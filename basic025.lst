00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic025.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 25
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 34 61 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 32 65 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 31 63 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 32 63 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 64 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 62 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 31 63 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 32 65 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec B8 2B 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed A0 29 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 C0 19 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio095_8_sc_spin2_dat__
007d0 0f3 E0 17 03 00 | 	long	@_Audio095_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 80 1C 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 00 95 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 C0 23 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 54 B6 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 04 DE 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa BC DB 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 94 ED 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 90 0F 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     F3 E4 05 F1 | 	add	objptr, ##62707
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     38 E5 85 F1 | 	sub	objptr, ##62776
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     F0 8E B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     38 E5 05 F1 | 	add	objptr, ##62776
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     38 E5 85 F1 | 	sub	objptr, ##62776
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     C8 8E B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     38 E5 05 F1 | 	add	objptr, ##62776
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     38 E5 85 F1 | 	sub	objptr, ##62776
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     A0 8E B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     38 E5 05 F1 | 	add	objptr, ##62776
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     38 E5 85 F1 | 	sub	objptr, ##62776
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     B0 E4 05 F1 | 	add	objptr, ##62640
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     B8 E4 85 F1 | 	sub	objptr, ##62648
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     30 84 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     80 84 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     70 84 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     C0 E4 05 F1 | 	add	objptr, ##62656
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     DC E4 85 F1 | 	sub	objptr, ##62684
009b0     D4 83 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     C0 E4 05 F1 | 	add	objptr, ##62656
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     DC E4 85 F1 | 	sub	objptr, ##62684
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     22 4A 05 F6 | 	mov	COUNT_, #34
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     4C F0 07 F1 | 	add	ptra, ##588
00a2c     56 00 00 FF 
00a30     E0 E4 05 F1 | 	add	objptr, ##44256
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     69 00 00 FF 
00a68     40 E5 85 F1 | 	sub	objptr, ##54080
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     D0 E4 05 F1 | 	add	objptr, ##43216
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     44 01 00 FF 
00abc     D2 17 06 F6 | 	mov	arg03, ##@LR__4307
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     56 00 00 FF 
00afc     E0 E4 85 F1 | 	sub	objptr, ##44256
00b00     78 AD B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     B0 AC B1 FD | 	call	#__system__LTrim_S
00b0c     56 00 00 FF 
00b10     E0 E4 05 F1 | 	add	objptr, ##44256
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     44 01 00 FF 
00b1c     D3 1F 06 F6 | 	mov	local01, ##@LR__4308
00b20     24 00 00 FF 
00b24     94 E4 05 F1 | 	add	objptr, ##18580
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     94 E4 85 F1 | 	sub	objptr, ##18580
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     56 00 00 FF 
00b3c     E0 E4 85 F1 | 	sub	objptr, ##44256
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7A 00 00 FF 
00b5c     78 E5 05 F1 | 	add	objptr, ##62840
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7A 00 00 FF 
00b68     78 E5 85 F1 | 	sub	objptr, ##62840
00b6c     D4 26 90 AD |  if_e	jmp	#LR__0148
00b70     7A 00 00 FF 
00b74     7C E5 05 F1 | 	add	objptr, ##62844
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     9C E4 85 F1 | 	sub	objptr, ##18588
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     56 00 00 FF 
00b90     E0 E4 85 F1 | 	sub	objptr, ##44256
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     56 00 00 FF 
00bc0     E0 E4 05 F1 | 	add	objptr, ##44256
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     56 00 00 FF 
00bcc     E0 E4 85 F1 | 	sub	objptr, ##44256
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     84 A9 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     44 01 00 FF 
00be4     D4 15 06 F6 | 	mov	arg02, ##@LR__4309
00be8     74 88 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7A 00 00 FF 
00bf8     7C E5 05 F1 | 	add	objptr, ##62844
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7A 00 00 FF 
00c04     7C E5 85 F1 | 	sub	objptr, ##62844
00c08     7A 00 00 AF 
00c0c     7C E5 05 A1 |  if_e	add	objptr, ##62844
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7A 00 00 AF 
00c18     7C E5 85 A1 |  if_e	sub	objptr, ##62844
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     56 00 00 FF 
00c24     E0 E4 05 F1 | 	add	objptr, ##44256
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     56 00 00 FF 
00c30     E0 E4 85 F1 | 	sub	objptr, ##44256
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     20 A9 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     44 01 00 FF 
00c48     D6 15 06 F6 | 	mov	arg02, ##@LR__4310
00c4c     10 88 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7A 00 00 AF 
00c58     7C E5 05 A1 |  if_e	add	objptr, ##62844
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7A 00 00 AF 
00c64     7C E5 85 A1 |  if_e	sub	objptr, ##62844
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7A 00 00 AF 
00c70     7C E5 05 A1 |  if_e	add	objptr, ##62844
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7A 00 00 AF 
00c7c     7C E5 85 A1 |  if_e	sub	objptr, ##62844
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     D0 E4 05 F1 | 	add	objptr, ##43216
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     AC E4 05 F1 | 	add	objptr, ##19628
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7A 00 00 FF 
00ca8     7C E5 85 F1 | 	sub	objptr, ##62844
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     56 00 00 FF 
00cc4     E0 E4 05 F1 | 	add	objptr, ##44256
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     56 00 00 FF 
00cd0     E0 E4 85 F1 | 	sub	objptr, ##44256
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     80 A8 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     44 01 00 FF 
00ce8     D8 2F 06 F6 | 	mov	local09, ##@LR__4311
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     6C 87 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     D0 E4 05 F1 | 	add	objptr, ##43216
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     D0 E4 85 F1 | 	sub	objptr, ##43216
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7A 00 00 FF 
00d34     78 E5 05 F1 | 	add	objptr, ##62840
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7A 00 00 FF 
00d40     78 E5 85 F1 | 	sub	objptr, ##62840
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7A 00 00 FF 
00d58     78 E5 05 F1 | 	add	objptr, ##62840
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7A 00 00 FF 
00d64     78 E5 85 F1 | 	sub	objptr, ##62840
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     56 00 00 FF 
00d74     E0 E4 05 F1 | 	add	objptr, ##44256
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     56 00 00 FF 
00d80     E0 E4 85 F1 | 	sub	objptr, ##44256
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     20 A7 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     C4 AA B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     FC A9 B1 FD | 	call	#__system__LTrim_S
00dc0     7A 00 00 FF 
00dc4     80 E5 05 F1 | 	add	objptr, ##62848
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     A0 E4 85 F1 | 	sub	objptr, ##18592
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     56 00 00 FF 
00ddc     E0 E4 85 F1 | 	sub	objptr, ##44256
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     5C A6 B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     88 AA B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     C0 A9 B1 FD | 	call	#__system__LTrim_S
00dfc     56 00 00 FF 
00e00     E0 E4 05 F1 | 	add	objptr, ##44256
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     56 00 00 FF 
00e0c     E0 E4 85 F1 | 	sub	objptr, ##44256
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     44 01 00 FF 
00e18     DA 1F 06 F6 | 	mov	local01, ##@LR__4312
00e1c     7A 00 00 FF 
00e20     80 E5 05 F1 | 	add	objptr, ##62848
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7A 00 00 FF 
00e2c     80 E5 85 F1 | 	sub	objptr, ##62848
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     56 00 00 FF 
00e34     E8 E4 05 F1 | 	add	objptr, ##44264
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     56 00 00 FF 
00e40     E8 E4 85 F1 | 	sub	objptr, ##44264
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7A 00 00 FF 
00e54     80 E5 05 F1 | 	add	objptr, ##62848
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7A 00 00 FF 
00e60     80 E5 85 F1 | 	sub	objptr, ##62848
00e64     44 01 00 FF 
00e68     DB 15 06 F6 | 	mov	arg02, ##@LR__4313
00e6c     F0 85 B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     56 00 00 5F 
00e78     E8 E4 05 51 |  if_ne	add	objptr, ##44264
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     56 00 00 5F 
00e84     E8 E4 85 51 |  if_ne	sub	objptr, ##44264
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     56 00 00 FF 
00e90     E8 E4 05 F1 | 	add	objptr, ##44264
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     56 00 00 FF 
00e9c     E8 E4 85 F1 | 	sub	objptr, ##44264
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7A 00 00 FF 
00eb0     80 E5 05 F1 | 	add	objptr, ##62848
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7A 00 00 FF 
00ebc     80 E5 85 F1 | 	sub	objptr, ##62848
00ec0     44 01 00 FF 
00ec4     DC 15 06 F6 | 	mov	arg02, ##@LR__4314
00ec8     94 85 B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     56 00 00 AF 
00ed4     E8 E4 05 A1 |  if_e	add	objptr, ##44264
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     56 00 00 AF 
00ee0     E8 E4 85 A1 |  if_e	sub	objptr, ##44264
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     56 00 00 FF 
00eec     E8 E4 05 F1 | 	add	objptr, ##44264
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     56 00 00 FF 
00ef8     E8 E4 85 F1 | 	sub	objptr, ##44264
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7A 00 00 FF 
00f08     80 E5 05 F1 | 	add	objptr, ##62848
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7A 00 00 FF 
00f14     80 E5 85 F1 | 	sub	objptr, ##62848
00f18     44 01 00 FF 
00f1c     DD 15 06 F6 | 	mov	arg02, ##@LR__4315
00f20     3C 85 B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     56 00 00 5F 
00f2c     E8 E4 05 51 |  if_ne	add	objptr, ##44264
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     56 00 00 5F 
00f38     E8 E4 85 51 |  if_ne	sub	objptr, ##44264
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     56 00 00 FF 
00f44     E8 E4 05 F1 | 	add	objptr, ##44264
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     56 00 00 FF 
00f50     E8 E4 85 F1 | 	sub	objptr, ##44264
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7A 00 00 FF 
00f60     80 E5 05 F1 | 	add	objptr, ##62848
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7A 00 00 FF 
00f6c     80 E5 85 F1 | 	sub	objptr, ##62848
00f70     44 01 00 FF 
00f74     DE 15 06 F6 | 	mov	arg02, ##@LR__4316
00f78     E4 84 B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     56 00 00 AF 
00f84     E8 E4 05 A1 |  if_e	add	objptr, ##44264
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     56 00 00 AF 
00f90     E8 E4 85 A1 |  if_e	sub	objptr, ##44264
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     56 00 00 FF 
00fb0     E0 E4 05 F1 | 	add	objptr, ##44256
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     56 00 00 FF 
00fbc     E0 E4 85 F1 | 	sub	objptr, ##44256
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     94 A5 B1 FD | 	call	#__system__Mid_S
00fcc     7A 00 00 FF 
00fd0     84 E5 05 F1 | 	add	objptr, ##62852
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7A 00 00 FF 
00fe0     84 E5 85 F1 | 	sub	objptr, ##62852
00fe4     68 25 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7A 00 00 FF 
01010     78 E5 05 F1 | 	add	objptr, ##62840
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7A 00 00 FF 
0101c     78 E5 85 F1 | 	sub	objptr, ##62840
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7A 00 00 FF 
0106c     8C E5 05 F1 | 	add	objptr, ##62860
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7A 00 00 FF 
010a0     8C E5 85 F1 | 	sub	objptr, ##62860
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     56 00 00 FF 
010b4     E0 E4 05 F1 | 	add	objptr, ##44256
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     AC E4 05 F1 | 	add	objptr, ##18604
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7A 00 00 FF 
010cc     8C E5 85 F1 | 	sub	objptr, ##62860
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     88 A4 B1 FD | 	call	#__system__Mid_S
010d8     7A 00 00 FF 
010dc     94 E5 05 F1 | 	add	objptr, ##62868
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7A 00 00 FF 
010e8     94 E5 85 F1 | 	sub	objptr, ##62868
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     44 01 00 FF 
010f4     DF 15 06 F6 | 	mov	arg02, ##@LR__4317
010f8     64 83 B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     D0 E4 05 F1 | 	add	objptr, ##43216
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     C4 E4 05 F1 | 	add	objptr, ##19652
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7A 00 00 FF 
01128     94 E5 85 F1 | 	sub	objptr, ##62868
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     56 00 00 FF 
01138     E0 E4 05 F1 | 	add	objptr, ##44256
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     AC E4 05 F1 | 	add	objptr, ##18604
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7A 00 00 FF 
01164     8C E5 85 F1 | 	sub	objptr, ##62860
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     E8 A3 B1 FD | 	call	#__system__Mid_S
01178     7A 00 00 FF 
0117c     94 E5 05 F1 | 	add	objptr, ##62868
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7A 00 00 FF 
01188     94 E5 85 F1 | 	sub	objptr, ##62868
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     44 01 00 FF 
01194     E0 15 06 F6 | 	mov	arg02, ##@LR__4318
01198     C4 82 B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     D0 E4 05 F1 | 	add	objptr, ##43216
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     C4 E4 05 F1 | 	add	objptr, ##19652
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7A 00 00 FF 
011c8     94 E5 85 F1 | 	sub	objptr, ##62868
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     D0 E4 05 F1 | 	add	objptr, ##43216
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     44 01 00 FF 
011fc     E1 15 06 F6 | 	mov	arg02, ##@LR__4319
01200     54 00 00 FF 
01204     D0 E4 85 F1 | 	sub	objptr, ##43216
01208     54 82 B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     D0 E4 05 F1 | 	add	objptr, ##43216
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     C4 E4 05 F1 | 	add	objptr, ##19652
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     C4 E4 85 F1 | 	sub	objptr, ##19652
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     D0 E4 85 F1 | 	sub	objptr, ##43216
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     18 82 B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     D0 E4 05 F1 | 	add	objptr, ##43216
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     D0 E4 85 F1 | 	sub	objptr, ##43216
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7A 00 00 FF 
01314     94 E5 05 F1 | 	add	objptr, ##62868
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7A 00 00 FF 
01320     94 E5 85 F1 | 	sub	objptr, ##62868
01324     44 01 00 FF 
01328     E3 15 06 F6 | 	mov	arg02, ##@LR__4320
0132c     30 81 B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7A 00 00 FF 
01340     94 E5 05 F1 | 	add	objptr, ##62868
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7A 00 00 FF 
0134c     94 E5 85 F1 | 	sub	objptr, ##62868
01350     44 01 00 FF 
01354     E5 15 06 F6 | 	mov	arg02, ##@LR__4321
01358     04 81 B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     D0 E4 05 F1 | 	add	objptr, ##43216
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     D0 E4 85 F1 | 	sub	objptr, ##43216
01398     34 A1 B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     44 01 00 FF 
013a4     E7 15 06 F6 | 	mov	arg02, ##@LR__4322
013a8     B4 80 B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     D0 E4 05 F1 | 	add	objptr, ##43216
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     D0 E4 85 F1 | 	sub	objptr, ##43216
013e0     64 A0 B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     44 01 00 FF 
013ec     E9 15 06 F6 | 	mov	arg02, ##@LR__4323
013f0     6C 80 B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     D0 E4 05 F1 | 	add	objptr, ##43216
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     D0 E4 85 F1 | 	sub	objptr, ##43216
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     4C A0 B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     00 80 B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     D0 E4 05 F1 | 	add	objptr, ##43216
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     D0 E4 85 F1 | 	sub	objptr, ##43216
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     D0 E4 05 F1 | 	add	objptr, ##43216
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     CC E4 05 F1 | 	add	objptr, ##19660
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     CC E4 85 F1 | 	sub	objptr, ##19660
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     D0 E4 05 F1 | 	add	objptr, ##19664
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7A 00 00 FF 
01594     9C E5 85 F1 | 	sub	objptr, ##62876
01598     44 01 00 FF 
0159c     EB 15 06 F6 | 	mov	arg02, ##@LR__4324
015a0     BC 7E B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7A 00 00 FF 
015b0     9C E5 05 F1 | 	add	objptr, ##62876
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7A 00 00 FF 
015bc     9C E5 85 F1 | 	sub	objptr, ##62876
015c0     44 01 00 FF 
015c4     ED 15 06 F6 | 	mov	arg02, ##@LR__4325
015c8     94 7E B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7A 00 00 FF 
015d8     9C E5 05 F1 | 	add	objptr, ##62876
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7A 00 00 FF 
015e4     9C E5 85 F1 | 	sub	objptr, ##62876
015e8     44 01 00 FF 
015ec     EF 15 06 F6 | 	mov	arg02, ##@LR__4326
015f0     6C 7E B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7A 00 00 FF 
01600     9C E5 05 F1 | 	add	objptr, ##62876
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7A 00 00 FF 
0160c     9C E5 85 F1 | 	sub	objptr, ##62876
01610     44 01 00 FF 
01614     F1 33 06 F6 | 	mov	local11, ##@LR__4327
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     40 7E B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7A 00 00 FF 
0162c     9C E5 05 F1 | 	add	objptr, ##62876
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7A 00 00 FF 
01638     9C E5 85 F1 | 	sub	objptr, ##62876
0163c     44 01 00 FF 
01640     F3 31 06 F6 | 	mov	local10, ##@LR__4328
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     10 7E B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7A 00 00 FF 
0165c     9C E5 05 F1 | 	add	objptr, ##62876
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7A 00 00 FF 
01668     9C E5 85 F1 | 	sub	objptr, ##62876
0166c     44 01 00 FF 
01670     F5 31 06 F6 | 	mov	local10, ##@LR__4329
01674     18 15 02 F6 | 	mov	arg02, local10
01678     E4 7D B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7A 00 00 FF 
01688     9C E5 05 F1 | 	add	objptr, ##62876
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7A 00 00 FF 
01694     9C E5 85 F1 | 	sub	objptr, ##62876
01698     44 01 00 FF 
0169c     F7 37 06 F6 | 	mov	local13, ##@LR__4330
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     B8 7D B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7A 00 00 FF 
016b4     A0 E5 05 F1 | 	add	objptr, ##62880
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7A 00 00 FF 
016c0     A0 E5 85 F1 | 	sub	objptr, ##62880
016c4     44 01 00 FF 
016c8     F9 4B 06 F6 | 	mov	local23, ##@LR__4331
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     88 7D B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7A 00 00 FF 
016e4     9C E5 05 F1 | 	add	objptr, ##62876
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7A 00 00 FF 
016f0     9C E5 85 F1 | 	sub	objptr, ##62876
016f4     44 01 00 FF 
016f8     FB 4B 06 F6 | 	mov	local23, ##@LR__4332
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     5C 7D B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7A 00 00 FF 
01710     A0 E5 05 F1 | 	add	objptr, ##62880
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7A 00 00 FF 
0171c     A0 E5 85 F1 | 	sub	objptr, ##62880
01720     44 01 00 FF 
01724     FD 45 06 F6 | 	mov	local20, ##@LR__4333
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     2C 7D B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7A 00 00 FF 
01740     9C E5 05 F1 | 	add	objptr, ##62876
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7A 00 00 FF 
0174c     9C E5 85 F1 | 	sub	objptr, ##62876
01750     44 01 00 FF 
01754     FF 45 06 F6 | 	mov	local20, ##@LR__4334
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     00 7D B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7A 00 00 FF 
0176c     A0 E5 05 F1 | 	add	objptr, ##62880
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7A 00 00 FF 
01778     A0 E5 85 F1 | 	sub	objptr, ##62880
0177c     45 01 00 FF 
01780     01 4C 06 F6 | 	mov	local24, ##@LR__4335
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     D0 7C B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7A 00 00 FF 
0179c     9C E5 05 F1 | 	add	objptr, ##62876
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7A 00 00 FF 
017a8     9C E5 85 F1 | 	sub	objptr, ##62876
017ac     45 01 00 FF 
017b0     03 4E 06 F6 | 	mov	local25, ##@LR__4336
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     A0 7C B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7A 00 00 FF 
017cc     A0 E5 05 F1 | 	add	objptr, ##62880
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7A 00 00 FF 
017d8     A0 E5 85 F1 | 	sub	objptr, ##62880
017dc     45 01 00 FF 
017e0     05 50 06 F6 | 	mov	local26, ##@LR__4337
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     70 7C B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     D0 E4 05 F1 | 	add	objptr, ##43216
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     CC E4 05 F1 | 	add	objptr, ##19660
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7A 00 00 FF 
01824     A0 E5 85 F1 | 	sub	objptr, ##62880
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     60 7C B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     D0 E4 05 F1 | 	add	objptr, ##43216
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     D0 E4 85 F1 | 	sub	objptr, ##43216
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     D0 E4 05 F1 | 	add	objptr, ##43216
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     D0 E4 85 F1 | 	sub	objptr, ##43216
01930     48 9F B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     80 9E B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     D0 E4 05 F1 | 	add	objptr, ##43216
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     D0 E4 85 F1 | 	sub	objptr, ##43216
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     D0 E4 05 F1 | 	add	objptr, ##43216
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     D0 E4 85 F1 | 	sub	objptr, ##43216
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     D0 E4 05 F1 | 	add	objptr, ##43216
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     D0 E4 85 F1 | 	sub	objptr, ##43216
01a98     AC 99 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     45 01 00 FF 
01aa4     07 14 06 F6 | 	mov	arg02, ##@LR__4338
01aa8     B4 79 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     D0 E4 05 F1 | 	add	objptr, ##43216
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     D0 E4 85 F1 | 	sub	objptr, ##43216
01ad8     F4 99 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     45 01 00 FF 
01ae4     09 14 06 F6 | 	mov	arg02, ##@LR__4339
01ae8     74 79 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     D0 E4 05 F1 | 	add	objptr, ##43216
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     D0 E4 85 F1 | 	sub	objptr, ##43216
01b24     D4 9B B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     D0 E4 05 F1 | 	add	objptr, ##43216
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     D0 E4 85 F1 | 	sub	objptr, ##43216
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     D0 E4 05 F1 | 	add	objptr, ##43216
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     D0 E4 85 F1 | 	sub	objptr, ##43216
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     98 16 90 AD |  if_e	jmp	#LR__0148
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     D0 E4 05 F1 | 	add	objptr, ##43216
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     D0 E4 85 F1 | 	sub	objptr, ##43216
01bc0     F0 2E B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7A 00 00 5F 
01bcc     A4 E5 05 51 |  if_ne	add	objptr, ##62884
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7A 00 00 FF 
01bd8     A4 E5 E5 F3 | 	sumnz	objptr, ##62884
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7A 00 00 AF 
01be4     A4 E5 85 A1 |  if_e	sub	objptr, ##62884
01be8     7A 00 00 FF 
01bec     A4 E5 05 F1 | 	add	objptr, ##62884
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     D4 E4 85 F1 | 	sub	objptr, ##19668
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     D8 E4 05 F1 | 	add	objptr, ##19672
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     D4 E4 85 F1 | 	sub	objptr, ##19668
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     45 01 00 FF 
01c38     0B 16 06 F6 | 	mov	arg03, ##@LR__4340
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     D0 E4 85 F1 | 	sub	objptr, ##43216
01c48     E8 9C B1 FD | 	call	#__system__Instr
01c4c     7A 00 00 FF 
01c50     AC E5 05 F1 | 	add	objptr, ##62892
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7A 00 00 FF 
01c60     AC E5 85 F1 | 	sub	objptr, ##62892
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7A 00 00 FF 
01c70     A4 E5 05 F1 | 	add	objptr, ##62884
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     D4 E4 85 F1 | 	sub	objptr, ##19668
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     D0 E4 85 F1 | 	sub	objptr, ##43216
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7A 00 00 FF 
01cb8     AC E5 05 F1 | 	add	objptr, ##62892
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7A 00 00 FF 
01cc4     AC E5 85 F1 | 	sub	objptr, ##62892
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7A 00 00 FF 
01cdc     A4 E5 05 F1 | 	add	objptr, ##62884
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     D4 E4 85 F1 | 	sub	objptr, ##19668
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     D4 E4 05 F1 | 	add	objptr, ##19668
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     D4 E4 85 F1 | 	sub	objptr, ##19668
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     D4 E4 05 F1 | 	add	objptr, ##19668
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     D4 E4 85 F1 | 	sub	objptr, ##19668
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     D0 E4 85 F1 | 	sub	objptr, ##43216
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7A 00 00 FF 
01dd0     AC E5 05 F1 | 	add	objptr, ##62892
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7A 00 00 FF 
01ddc     AC E5 85 F1 | 	sub	objptr, ##62892
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     E4 96 B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7A 00 00 FF 
01df4     A4 E5 05 F1 | 	add	objptr, ##62884
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     D4 E4 85 F1 | 	sub	objptr, ##19668
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     DC E4 05 F1 | 	add	objptr, ##19676
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7A 00 00 FF 
01e34     AC E5 85 F1 | 	sub	objptr, ##62892
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     04 96 B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7A 00 00 FF 
01e4c     A4 E5 05 F1 | 	add	objptr, ##62884
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     D4 E4 85 F1 | 	sub	objptr, ##19668
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     D0 E4 85 F1 | 	sub	objptr, ##43216
01e74     D0 95 B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     45 01 00 FF 
01e80     0D 14 06 F6 | 	mov	arg02, ##@LR__4341
01e84     D8 75 B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7A 00 00 FF 
01e94     A4 E5 05 F1 | 	add	objptr, ##62884
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     D4 E4 85 F1 | 	sub	objptr, ##19668
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     D0 E4 85 F1 | 	sub	objptr, ##43216
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7A 00 00 FF 
01ee8     A4 E5 05 F1 | 	add	objptr, ##62884
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     D4 E4 85 F1 | 	sub	objptr, ##19668
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     D4 E4 05 F1 | 	add	objptr, ##19668
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     D4 E4 85 F1 | 	sub	objptr, ##19668
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     D4 E4 05 F1 | 	add	objptr, ##19668
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     D4 E4 85 F1 | 	sub	objptr, ##19668
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     D0 E4 85 F1 | 	sub	objptr, ##43216
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     D8 94 B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7A 00 00 FF 
02000     A4 E5 05 F1 | 	add	objptr, ##62884
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     D4 E4 85 F1 | 	sub	objptr, ##19668
02014     F2 26 02 F1 | 	add	local05, objptr
02018     45 01 00 FF 
0201c     0F 32 06 F6 | 	mov	local11, ##@LR__4342
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     D0 E4 85 F1 | 	sub	objptr, ##43216
0202c                 | LR__0107
0202c     7A 00 00 FF 
02030     A4 E5 05 F1 | 	add	objptr, ##62884
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     D4 E4 85 F1 | 	sub	objptr, ##19668
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     D8 E4 05 F1 | 	add	objptr, ##19672
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7A 00 00 FF 
0205c     A8 E5 85 F1 | 	sub	objptr, ##62888
02060     45 01 00 FF 
02064     11 14 06 F6 | 	mov	arg02, ##@LR__4343
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     F0 73 B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7A 00 00 FF 
0207c     A8 E5 05 F1 | 	add	objptr, ##62888
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7A 00 00 FF 
02088     A8 E5 85 F1 | 	sub	objptr, ##62888
0208c     45 01 00 FF 
02090     17 14 06 F6 | 	mov	arg02, ##@LR__4344
02094     C8 73 B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7A 00 00 FF 
020a4     A8 E5 05 F1 | 	add	objptr, ##62888
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7A 00 00 FF 
020b0     A8 E5 85 F1 | 	sub	objptr, ##62888
020b4     45 01 00 FF 
020b8     1E 14 06 F6 | 	mov	arg02, ##@LR__4345
020bc     A0 73 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7A 00 00 FF 
020cc     A4 E5 05 F1 | 	add	objptr, ##62884
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     D4 E4 85 F1 | 	sub	objptr, ##19668
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     D0 E4 85 F1 | 	sub	objptr, ##43216
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7A 00 00 FF 
02118     A4 E5 05 F1 | 	add	objptr, ##62884
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     D4 E4 85 F1 | 	sub	objptr, ##19668
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     45 01 00 FF 
0213c     24 14 06 F6 | 	mov	arg02, ##@LR__4346
02140     54 00 00 FF 
02144     D0 E4 85 F1 | 	sub	objptr, ##43216
02148     14 73 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7A 00 00 FF 
02158     A4 E5 05 F1 | 	add	objptr, ##62884
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     D4 E4 85 F1 | 	sub	objptr, ##19668
02170     F2 26 02 F1 | 	add	local05, objptr
02174     45 01 00 FF 
02178     27 32 06 F6 | 	mov	local11, ##@LR__4347
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     D4 E4 05 F1 | 	add	objptr, ##19668
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     D4 E4 85 F1 | 	sub	objptr, ##19668
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     D0 E4 85 F1 | 	sub	objptr, ##43216
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7A 00 00 FF 
021b8     A4 E5 05 F1 | 	add	objptr, ##62884
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     D4 E4 85 F1 | 	sub	objptr, ##19668
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     45 01 00 FF 
021e0     29 14 06 F6 | 	mov	arg02, ##@LR__4348
021e4     54 00 00 FF 
021e8     D0 E4 85 F1 | 	sub	objptr, ##43216
021ec     70 72 B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7A 00 00 FF 
021fc     A4 E5 05 F1 | 	add	objptr, ##62884
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     D4 E4 85 F1 | 	sub	objptr, ##19668
02214     F2 26 02 F1 | 	add	local05, objptr
02218     45 01 00 FF 
0221c     2D 32 06 F6 | 	mov	local11, ##@LR__4349
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     D4 E4 05 F1 | 	add	objptr, ##19668
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     D4 E4 85 F1 | 	sub	objptr, ##19668
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     D0 E4 85 F1 | 	sub	objptr, ##43216
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7A 00 00 FF 
02260     A8 E5 05 F1 | 	add	objptr, ##62888
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7A 00 00 FF 
0226c     A8 E5 85 F1 | 	sub	objptr, ##62888
02270     45 01 00 FF 
02274     2F 14 06 F6 | 	mov	arg02, ##@LR__4350
02278     E4 71 B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7A 00 00 FF 
02288     A8 E5 05 F1 | 	add	objptr, ##62888
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7A 00 00 FF 
02294     A8 E5 85 F1 | 	sub	objptr, ##62888
02298     45 01 00 FF 
0229c     34 14 06 F6 | 	mov	arg02, ##@LR__4351
022a0     BC 71 B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7A 00 00 FF 
022b0     A4 E5 05 F1 | 	add	objptr, ##62884
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     D4 E4 85 F1 | 	sub	objptr, ##19668
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     45 01 00 FF 
022d4     37 14 06 F6 | 	mov	arg02, ##@LR__4352
022d8     54 00 00 FF 
022dc     D0 E4 85 F1 | 	sub	objptr, ##43216
022e0     7C 71 B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7A 00 00 FF 
022f0     A4 E5 05 F1 | 	add	objptr, ##62884
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     D4 E4 85 F1 | 	sub	objptr, ##19668
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     45 01 00 FF 
02310     3D 32 06 F6 | 	mov	local11, ##@LR__4353
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     D0 E4 85 F1 | 	sub	objptr, ##43216
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7A 00 00 FF 
02324     A4 E5 05 F1 | 	add	objptr, ##62884
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     D4 E4 85 F1 | 	sub	objptr, ##19668
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     45 01 00 FF 
02348     3F 14 06 F6 | 	mov	arg02, ##@LR__4354
0234c     54 00 00 FF 
02350     D0 E4 85 F1 | 	sub	objptr, ##43216
02354     08 71 B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7A 00 00 FF 
02364     A4 E5 05 F1 | 	add	objptr, ##62884
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     D4 E4 85 F1 | 	sub	objptr, ##19668
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     45 01 00 FF 
02384     48 32 06 F6 | 	mov	local11, ##@LR__4355
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     D0 E4 85 F1 | 	sub	objptr, ##43216
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7A 00 00 FF 
02398     A4 E5 05 F1 | 	add	objptr, ##62884
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     D4 E4 85 F1 | 	sub	objptr, ##19668
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     45 01 00 FF 
023bc     4A 14 06 F6 | 	mov	arg02, ##@LR__4356
023c0     54 00 00 FF 
023c4     D0 E4 85 F1 | 	sub	objptr, ##43216
023c8     94 70 B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7A 00 00 FF 
023d8     A4 E5 05 F1 | 	add	objptr, ##62884
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     D4 E4 85 F1 | 	sub	objptr, ##19668
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     45 01 00 FF 
023f8     53 32 06 F6 | 	mov	local11, ##@LR__4357
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     D0 E4 85 F1 | 	sub	objptr, ##43216
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7A 00 00 FF 
0240c     A4 E5 05 F1 | 	add	objptr, ##62884
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     D4 E4 85 F1 | 	sub	objptr, ##19668
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     45 01 00 FF 
02430     55 14 06 F6 | 	mov	arg02, ##@LR__4358
02434     54 00 00 FF 
02438     D0 E4 85 F1 | 	sub	objptr, ##43216
0243c     20 70 B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7A 00 00 FF 
0244c     A4 E5 05 F1 | 	add	objptr, ##62884
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     D4 E4 85 F1 | 	sub	objptr, ##19668
02464     F2 26 02 F1 | 	add	local05, objptr
02468     45 01 00 FF 
0246c     5E 32 06 F6 | 	mov	local11, ##@LR__4359
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     D0 E4 85 F1 | 	sub	objptr, ##43216
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7A 00 00 FF 
02480     A4 E5 05 F1 | 	add	objptr, ##62884
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     D4 E4 85 F1 | 	sub	objptr, ##19668
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     45 01 00 FF 
024a8     60 14 06 F6 | 	mov	arg02, ##@LR__4360
024ac     54 00 00 FF 
024b0     D0 E4 85 F1 | 	sub	objptr, ##43216
024b4     A8 6F B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7A 00 00 FF 
024c4     A4 E5 05 F1 | 	add	objptr, ##62884
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     D4 E4 85 F1 | 	sub	objptr, ##19668
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     45 01 00 FF 
024e4     63 32 06 F6 | 	mov	local11, ##@LR__4361
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     D0 E4 85 F1 | 	sub	objptr, ##43216
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     74 05 90 3D |  if_ae	jmp	#LR__0128
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     D0 E4 05 F1 | 	add	objptr, ##43216
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     D0 E4 85 F1 | 	sub	objptr, ##43216
02534     18 10 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     D0 E4 05 F1 | 	add	objptr, ##43216
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     D0 E4 85 F1 | 	sub	objptr, ##43216
0256c     00 05 90 3D |  if_ae	jmp	#LR__0127
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     D0 E4 05 F1 | 	add	objptr, ##43216
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     D0 E4 85 F1 | 	sub	objptr, ##43216
025a0     CC 0C B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     D0 E4 05 F1 | 	add	objptr, ##43216
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     D0 E4 85 F1 | 	sub	objptr, ##43216
025d8     94 04 90 3D |  if_ae	jmp	#LR__0127
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     D0 E4 05 F1 | 	add	objptr, ##43216
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     D0 E4 85 F1 | 	sub	objptr, ##43216
0260c                 | ' 
0260c                 | ' select case s
0260c     45 01 00 FF 
02610     19 15 06 F6 | 	mov	arg02, ##@LR__4414
02614     48 6E B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     D0 E4 05 F1 | 	add	objptr, ##43216
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     D0 E4 85 F1 | 	sub	objptr, ##43216
02658     14 04 90 3D |  if_ae	jmp	#LR__0127
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     D0 E4 05 F1 | 	add	objptr, ##43216
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     D0 E4 85 F1 | 	sub	objptr, ##43216
0268c     C0 10 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     D0 E4 05 F1 | 	add	objptr, ##43216
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     D0 E4 85 F1 | 	sub	objptr, ##43216
026c4     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     D0 E4 05 F1 | 	add	objptr, ##43216
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 31 02 F6 | 	mov	local10, local03
026e0     18 37 02 F6 | 	mov	local13, local10
026e4     1B 35 02 F6 | 	mov	local12, local13
026e8     03 34 66 F0 | 	shl	local12, #3
026ec     F2 4A 02 F6 | 	mov	local23, objptr
026f0     F2 34 02 F1 | 	add	local12, objptr
026f4     1A 13 02 FB | 	rdlong	arg01, local12
026f8     54 00 00 FF 
026fc     D0 E4 85 F1 | 	sub	objptr, ##43216
02700     6C 1A B0 FD | 	call	#_isfunction
02704     FD FA E1 F8 | 	getbyte	result1, result1, #0
02708     04 2E 06 F1 | 	add	local09, #4
0270c     17 FB 61 FC | 	wrlong	result1, local09
02710                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02710     11 2F 02 F6 | 	mov	local09, local03
02714     03 2E 66 F0 | 	shl	local09, #3
02718     54 00 00 FF 
0271c     D0 E4 05 F1 | 	add	objptr, ##43216
02720     F2 2E 02 F1 | 	add	local09, objptr
02724     04 2E 06 F1 | 	add	local09, #4
02728     17 33 02 FB | 	rdlong	local11, local09
0272c     01 32 56 F2 | 	cmps	local11, #1 wc
02730     54 00 00 FF 
02734     D0 E4 85 F1 | 	sub	objptr, ##43216
02738     34 03 90 3D |  if_ae	jmp	#LR__0127
0273c     11 27 02 F6 | 	mov	local05, local03
02740     03 26 66 F0 | 	shl	local05, #3
02744     54 00 00 FF 
02748     D0 E4 05 F1 | 	add	objptr, ##43216
0274c     F2 26 02 F1 | 	add	local05, objptr
02750     13 13 02 FB | 	rdlong	arg01, local05
02754     54 00 00 FF 
02758     D0 E4 85 F1 | 	sub	objptr, ##43216
0275c     24 1F B0 FD | 	call	#_isnum
02760     FD 1E 02 F6 | 	mov	local01, result1
02764     7A 00 00 FF 
02768     B0 E5 05 F1 | 	add	objptr, ##62896
0276c     F2 1E 62 FC | 	wrlong	local01, objptr
02770     11 27 02 F6 | 	mov	local05, local03
02774     03 26 66 F0 | 	shl	local05, #3
02778     26 00 00 FF 
0277c     E0 E4 85 F1 | 	sub	objptr, ##19680
02780     F2 26 02 F1 | 	add	local05, objptr
02784     13 13 02 FB | 	rdlong	arg01, local05
02788     54 00 00 FF 
0278c     D0 E4 85 F1 | 	sub	objptr, ##43216
02790     C8 21 B0 FD | 	call	#_isint
02794     FD 1E 02 F6 | 	mov	local01, result1
02798     7A 00 00 FF 
0279c     B4 E5 05 F1 | 	add	objptr, ##62900
027a0     F2 1E 62 FC | 	wrlong	local01, objptr
027a4     11 27 02 F6 | 	mov	local05, local03
027a8     03 26 66 F0 | 	shl	local05, #3
027ac     26 00 00 FF 
027b0     E4 E4 85 F1 | 	sub	objptr, ##19684
027b4     F2 28 02 F6 | 	mov	local06, objptr
027b8     F2 26 02 F1 | 	add	local05, objptr
027bc     13 13 02 FB | 	rdlong	arg01, local05
027c0     54 00 00 FF 
027c4     D0 E4 85 F1 | 	sub	objptr, ##43216
027c8     E8 22 B0 FD | 	call	#_isdec
027cc     7A 00 00 FF 
027d0     B8 E5 05 F1 | 	add	objptr, ##62904
027d4     F2 FA 61 FC | 	wrlong	result1, objptr
027d8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d8     08 E4 85 F1 | 	sub	objptr, #8
027dc     F2 1E 0A FB | 	rdlong	local01, objptr wz
027e0     7A 00 00 FF 
027e4     B0 E5 85 F1 | 	sub	objptr, ##62896
027e8     60 00 90 AD |  if_e	jmp	#LR__0120
027ec     7A 00 00 FF 
027f0     B4 E5 05 F1 | 	add	objptr, ##62900
027f4     F2 2E 0A FB | 	rdlong	local09, objptr wz
027f8     7A 00 00 FF 
027fc     B4 E5 85 F1 | 	sub	objptr, ##62900
02800     48 00 90 AD |  if_e	jmp	#LR__0120
02804     7A 00 00 FF 
02808     B8 E5 05 F1 | 	add	objptr, ##62904
0280c     F2 32 0A FB | 	rdlong	local11, objptr wz
02810     7A 00 00 FF 
02814     B8 E5 85 F1 | 	sub	objptr, ##62904
02818     30 00 90 AD |  if_e	jmp	#LR__0120
0281c     11 25 02 F6 | 	mov	local04, local03
02820     12 2F 02 F6 | 	mov	local09, local04
02824     03 2E 66 F0 | 	shl	local09, #3
02828     54 00 00 FF 
0282c     D0 E4 05 F1 | 	add	objptr, ##43216
02830     F2 2E 02 F1 | 	add	local09, objptr
02834     04 2E 06 F1 | 	add	local09, #4
02838     01 00 80 FF 
0283c     17 01 68 FC | 	wrlong	##512, local09
02840     54 00 00 FF 
02844     D0 E4 85 F1 | 	sub	objptr, ##43216
02848     24 02 90 FD | 	jmp	#LR__0127
0284c                 | LR__0120
0284c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
0284c     7A 00 00 FF 
02850     B0 E5 05 F1 | 	add	objptr, ##62896
02854     F2 1E 0A FB | 	rdlong	local01, objptr wz
02858     7A 00 00 FF 
0285c     B0 E5 85 F1 | 	sub	objptr, ##62896
02860     64 00 90 AD |  if_e	jmp	#LR__0121
02864     7A 00 00 FF 
02868     B4 E5 05 F1 | 	add	objptr, ##62900
0286c     F2 2E 0A FB | 	rdlong	local09, objptr wz
02870     7A 00 00 FF 
02874     B4 E5 85 F1 | 	sub	objptr, ##62900
02878     7A 00 00 5F 
0287c     B8 E5 05 51 |  if_ne	add	objptr, ##62904
02880     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02884     7A 00 00 5F 
02888     B8 E5 85 51 |  if_ne	sub	objptr, ##62904
0288c     19 29 22 56 |  if_ne	not	local06, local11
02890     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02894     30 00 90 AD |  if_e	jmp	#LR__0121
02898     11 25 02 F6 | 	mov	local04, local03
0289c     12 2F 02 F6 | 	mov	local09, local04
028a0     03 2E 66 F0 | 	shl	local09, #3
028a4     54 00 00 FF 
028a8     D0 E4 05 F1 | 	add	objptr, ##43216
028ac     F2 2E 02 F1 | 	add	local09, objptr
028b0     04 2E 06 F1 | 	add	local09, #4
028b4     01 00 80 FF 
028b8     17 03 68 FC | 	wrlong	##513, local09
028bc     54 00 00 FF 
028c0     D0 E4 85 F1 | 	sub	objptr, ##43216
028c4     A8 01 90 FD | 	jmp	#LR__0127
028c8                 | LR__0121
028c8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c8     7A 00 00 FF 
028cc     B0 E5 05 F1 | 	add	objptr, ##62896
028d0     F2 1E 0A FB | 	rdlong	local01, objptr wz
028d4     7A 00 00 FF 
028d8     B0 E5 85 F1 | 	sub	objptr, ##62896
028dc     7A 00 00 5F 
028e0     B4 E5 05 51 |  if_ne	add	objptr, ##62900
028e4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
028e8     7A 00 00 5F 
028ec     B4 E5 85 51 |  if_ne	sub	objptr, ##62900
028f0     17 2F 22 56 |  if_ne	not	local09, local09
028f4     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
028f8     7A 00 00 5F 
028fc     B8 E5 05 51 |  if_ne	add	objptr, ##62904
02900     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02904     7A 00 00 5F 
02908     B8 E5 85 51 |  if_ne	sub	objptr, ##62904
0290c     19 29 22 56 |  if_ne	not	local06, local11
02910     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02914     30 00 90 AD |  if_e	jmp	#LR__0122
02918     11 25 02 F6 | 	mov	local04, local03
0291c     12 2F 02 F6 | 	mov	local09, local04
02920     03 2E 66 F0 | 	shl	local09, #3
02924     54 00 00 FF 
02928     D0 E4 05 F1 | 	add	objptr, ##43216
0292c     F2 2E 02 F1 | 	add	local09, objptr
02930     04 2E 06 F1 | 	add	local09, #4
02934     01 00 80 FF 
02938     17 05 68 FC | 	wrlong	##514, local09
0293c     54 00 00 FF 
02940     D0 E4 85 F1 | 	sub	objptr, ##43216
02944     28 01 90 FD | 	jmp	#LR__0127
02948                 | LR__0122
02948                 | ' 
02948                 | ' if isstring(lparts(i).part$) then 
02948     11 27 02 F6 | 	mov	local05, local03
0294c     03 26 66 F0 | 	shl	local05, #3
02950     54 00 00 FF 
02954     D0 E4 05 F1 | 	add	objptr, ##43216
02958     F2 26 02 F1 | 	add	local05, objptr
0295c     13 13 02 FB | 	rdlong	arg01, local05
02960     54 00 00 FF 
02964     D0 E4 85 F1 | 	sub	objptr, ##43216
02968     08 22 B0 FD | 	call	#_isstring
0296c     00 FA 0D F2 | 	cmp	result1, #0 wz
02970     A0 00 90 AD |  if_e	jmp	#LR__0125
02974     11 2F 02 F6 | 	mov	local09, local03
02978     03 2E 66 F0 | 	shl	local09, #3
0297c     54 00 00 FF 
02980     D0 E4 05 F1 | 	add	objptr, ##43216
02984     F2 2E 02 F1 | 	add	local09, objptr
02988     04 2E 06 F1 | 	add	local09, #4
0298c     01 00 80 FF 
02990     17 07 68 FC | 	wrlong	##515, local09
02994     11 25 02 F6 | 	mov	local04, local03
02998     12 2F 02 F6 | 	mov	local09, local04
0299c     03 2E 66 F0 | 	shl	local09, #3
029a0     F2 2E 02 F1 | 	add	local09, objptr
029a4     11 37 02 F6 | 	mov	local13, local03
029a8     03 36 66 F0 | 	shl	local13, #3
029ac     F2 36 02 F1 | 	add	local13, objptr
029b0     1B 29 02 FB | 	rdlong	local06, local13
029b4     02 32 06 F6 | 	mov	local11, #2
029b8     11 4B 02 F6 | 	mov	local23, local03
029bc     25 43 02 F6 | 	mov	local19, local23
029c0     21 45 02 F6 | 	mov	local20, local19
029c4     03 44 66 F0 | 	shl	local20, #3
029c8     F2 46 02 F6 | 	mov	local21, objptr
029cc     F2 44 02 F1 | 	add	local20, objptr
029d0     22 13 02 FB | 	rdlong	arg01, local20
029d4     54 00 00 FF 
029d8     D0 E4 85 F1 | 	sub	objptr, ##43216
029dc     09 2B 02 F6 | 	mov	local07, arg01
029e0     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029e4                 | LR__0123
029e4     15 FB C9 FA | 	rdbyte	result1, local07 wz
029e8     01 2A 06 51 |  if_ne	add	local07, #1
029ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029f0                 | LR__0124
029f0     09 2B 82 F1 | 	sub	local07, arg01
029f4     15 35 02 F6 | 	mov	local12, local07
029f8     1A 17 02 F6 | 	mov	arg03, local12
029fc     02 16 86 F1 | 	sub	arg03, #2
02a00     14 13 02 F6 | 	mov	arg01, local06
02a04     19 15 02 F6 | 	mov	arg02, local11
02a08     54 8B B1 FD | 	call	#__system__Mid_S
02a0c     17 FB 61 FC | 	wrlong	result1, local09
02a10     5C 00 90 FD | 	jmp	#LR__0127
02a14                 | LR__0125
02a14                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a14     11 25 02 F6 | 	mov	local04, local03
02a18     12 27 02 F6 | 	mov	local05, local04
02a1c     03 26 66 F0 | 	shl	local05, #3
02a20     54 00 00 FF 
02a24     D0 E4 05 F1 | 	add	objptr, ##43216
02a28     F2 26 02 F1 | 	add	local05, objptr
02a2c     13 13 02 FB | 	rdlong	arg01, local05
02a30     54 00 00 FF 
02a34     D0 E4 85 F1 | 	sub	objptr, ##43216
02a38     D4 19 B0 FD | 	call	#_isname
02a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02a40     2C 00 90 AD |  if_e	jmp	#LR__0126
02a44     11 25 02 F6 | 	mov	local04, local03
02a48     12 2F 02 F6 | 	mov	local09, local04
02a4c     03 2E 66 F0 | 	shl	local09, #3
02a50     54 00 00 FF 
02a54     D0 E4 05 F1 | 	add	objptr, ##43216
02a58     F2 2E 02 F1 | 	add	local09, objptr
02a5c     04 2E 06 F1 | 	add	local09, #4
02a60     01 00 80 FF 
02a64     17 09 68 FC | 	wrlong	##516, local09
02a68     54 00 00 FF 
02a6c     D0 E4 85 F1 | 	sub	objptr, ##43216
02a70                 | LR__0126
02a70                 | LR__0127
02a70     01 22 06 F1 | 	add	local03, #1
02a74     84 FA 9F FD | 	jmp	#LR__0119
02a78                 | LR__0128
02a78     1D 2F 02 F6 | 	mov	local09, local15
02a7c     03 2E 66 F0 | 	shl	local09, #3
02a80     54 00 00 FF 
02a84     D0 E4 05 F1 | 	add	objptr, ##43216
02a88     F2 2E 02 F1 | 	add	local09, objptr
02a8c     04 2E 06 F1 | 	add	local09, #4
02a90     17 FD 6B FC | 	wrlong	#510, local09
02a94     1D 2F 02 F6 | 	mov	local09, local15
02a98     03 2E 66 F0 | 	shl	local09, #3
02a9c     F2 26 02 F6 | 	mov	local05, objptr
02aa0     F2 2E 02 F1 | 	add	local09, objptr
02aa4     45 01 00 FF 
02aa8     65 28 06 F6 | 	mov	local06, ##@LR__4362
02aac     17 29 62 FC | 	wrlong	local06, local09
02ab0     10 00 00 FF 
02ab4     54 E4 05 F1 | 	add	objptr, ##8276
02ab8     F2 3A 62 FC | 	wrlong	local15, objptr
02abc                 | ' 
02abc                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02abc                 | ' 
02abc                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02abc                 | '  
02abc                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02abc     16 00 00 FF 
02ac0     84 E4 05 F1 | 	add	objptr, ##11396
02ac4     F2 12 02 FB | 	rdlong	arg01, objptr
02ac8     7A 00 00 FF 
02acc     A8 E5 85 F1 | 	sub	objptr, ##62888
02ad0     45 01 00 FF 
02ad4     66 2E 06 F6 | 	mov	local09, ##@LR__4363
02ad8     17 15 02 F6 | 	mov	arg02, local09
02adc     80 69 B1 FD | 	call	#__system___string_cmp
02ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae4     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae8     7A 00 00 FF 
02aec     A8 E5 05 F1 | 	add	objptr, ##62888
02af0     F2 12 02 FB | 	rdlong	arg01, objptr
02af4     7A 00 00 FF 
02af8     A8 E5 85 F1 | 	sub	objptr, ##62888
02afc     45 01 00 FF 
02b00     6B 26 06 F6 | 	mov	local05, ##@LR__4364
02b04     13 2F 02 F6 | 	mov	local09, local05
02b08     17 15 02 F6 | 	mov	arg02, local09
02b0c     50 69 B1 FD | 	call	#__system___string_cmp
02b10     00 FA 0D F2 | 	cmp	result1, #0 wz
02b14     BC 00 90 AD |  if_e	jmp	#LR__0129
02b18     7A 00 00 FF 
02b1c     A8 E5 05 F1 | 	add	objptr, ##62888
02b20     F2 12 02 FB | 	rdlong	arg01, objptr
02b24     7A 00 00 FF 
02b28     A8 E5 85 F1 | 	sub	objptr, ##62888
02b2c     45 01 00 FF 
02b30     70 28 06 F6 | 	mov	local06, ##@LR__4365
02b34     14 27 02 F6 | 	mov	local05, local06
02b38     13 15 02 F6 | 	mov	arg02, local05
02b3c     20 69 B1 FD | 	call	#__system___string_cmp
02b40     FD 2E 0A F6 | 	mov	local09, result1 wz
02b44     8C 00 90 AD |  if_e	jmp	#LR__0129
02b48     7A 00 00 FF 
02b4c     A8 E5 05 F1 | 	add	objptr, ##62888
02b50     F2 12 02 FB | 	rdlong	arg01, objptr
02b54     7A 00 00 FF 
02b58     A8 E5 85 F1 | 	sub	objptr, ##62888
02b5c     45 01 00 FF 
02b60     75 32 06 F6 | 	mov	local11, ##@LR__4366
02b64     19 29 02 F6 | 	mov	local06, local11
02b68     14 15 02 F6 | 	mov	arg02, local06
02b6c     F0 68 B1 FD | 	call	#__system___string_cmp
02b70     FD 26 0A F6 | 	mov	local05, result1 wz
02b74     5C 00 90 AD |  if_e	jmp	#LR__0129
02b78     7A 00 00 FF 
02b7c     A8 E5 05 F1 | 	add	objptr, ##62888
02b80     F2 12 02 FB | 	rdlong	arg01, objptr
02b84     7A 00 00 FF 
02b88     A8 E5 85 F1 | 	sub	objptr, ##62888
02b8c     45 01 00 FF 
02b90     79 32 06 F6 | 	mov	local11, ##@LR__4367
02b94     19 15 02 F6 | 	mov	arg02, local11
02b98     C4 68 B1 FD | 	call	#__system___string_cmp
02b9c     FD 28 0A F6 | 	mov	local06, result1 wz
02ba0     30 00 90 AD |  if_e	jmp	#LR__0129
02ba4     7A 00 00 FF 
02ba8     A8 E5 05 F1 | 	add	objptr, ##62888
02bac     F2 12 02 FB | 	rdlong	arg01, objptr
02bb0     7A 00 00 FF 
02bb4     A8 E5 85 F1 | 	sub	objptr, ##62888
02bb8     45 01 00 FF 
02bbc     7C 36 06 F6 | 	mov	local13, ##@LR__4368
02bc0     1B 31 02 F6 | 	mov	local10, local13
02bc4     18 15 02 F6 | 	mov	arg02, local10
02bc8     94 68 B1 FD | 	call	#__system___string_cmp
02bcc     FD 32 0A F6 | 	mov	local11, result1 wz
02bd0     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bd4                 | LR__0129
02bd4     7A 00 00 FF 
02bd8     A4 E5 05 F1 | 	add	objptr, ##62884
02bdc     F2 36 02 FB | 	rdlong	local13, objptr
02be0     1B 31 02 F6 | 	mov	local10, local13
02be4     01 30 06 F1 | 	add	local10, #1
02be8     18 35 02 F6 | 	mov	local12, local10
02bec     1A 4B 02 F6 | 	mov	local23, local12
02bf0     03 4A 66 F0 | 	shl	local23, #3
02bf4     26 00 00 FF 
02bf8     D4 E4 85 F1 | 	sub	objptr, ##19668
02bfc     F2 42 02 F6 | 	mov	local19, objptr
02c00     F2 4A 02 F1 | 	add	local23, objptr
02c04     04 4A 06 F1 | 	add	local23, #4
02c08     25 47 02 FB | 	rdlong	local21, local23
02c0c     04 4A 86 F1 | 	sub	local23, #4
02c10     23 45 02 F6 | 	mov	local20, local21
02c14     01 00 00 FF 
02c18     04 44 0E F2 | 	cmp	local20, ##516 wz
02c1c     54 00 00 FF 
02c20     D0 E4 85 F1 | 	sub	objptr, ##43216
02c24     48 00 90 5D |  if_ne	jmp	#LR__0130
02c28     7A 00 00 FF 
02c2c     A4 E5 05 F1 | 	add	objptr, ##62884
02c30     F2 2E 02 FB | 	rdlong	local09, objptr
02c34     01 2E 06 F1 | 	add	local09, #1
02c38     17 27 02 F6 | 	mov	local05, local09
02c3c     03 26 66 F0 | 	shl	local05, #3
02c40     26 00 00 FF 
02c44     D4 E4 85 F1 | 	sub	objptr, ##19668
02c48     F2 28 02 F6 | 	mov	local06, objptr
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     01 00 00 FF 
02c54     03 32 06 F6 | 	mov	local11, ##515
02c58     04 26 06 F1 | 	add	local05, #4
02c5c     01 00 80 FF 
02c60     13 07 68 FC | 	wrlong	##515, local05
02c64     04 26 86 F1 | 	sub	local05, #4
02c68     54 00 00 FF 
02c6c     D0 E4 85 F1 | 	sub	objptr, ##43216
02c70                 | LR__0130
02c70                 | ' 
02c70                 | ' ' abbreviated command has to be at the position addptr
02c70                 | ' 
02c70                 | ' 
02c70                 | ' 
02c70                 | ' '2b determine a type of the line
02c70                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c70     54 00 00 FF 
02c74     D0 E4 05 F1 | 	add	objptr, ##43216
02c78     F2 12 02 FB | 	rdlong	arg01, objptr
02c7c     54 00 00 FF 
02c80     D0 E4 85 F1 | 	sub	objptr, ##43216
02c84     2C 1E B0 FD | 	call	#_isdec
02c88     00 FA 0D F2 | 	cmp	result1, #0 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0131
02c90     54 00 00 FF 
02c94     D0 E4 05 F1 | 	add	objptr, ##43216
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     54 00 00 FF 
02ca0     D0 E4 85 F1 | 	sub	objptr, ##43216
02ca4     00 14 06 F6 | 	mov	arg02, #0
02ca8     F0 98 B1 FD | 	call	#__system____builtin_atoi
02cac     7A 00 00 FF 
02cb0     54 E5 05 F1 | 	add	objptr, ##62804
02cb4     F2 FA 61 FC | 	wrlong	result1, objptr
02cb8     7A 00 00 FF 
02cbc     54 E5 85 F1 | 	sub	objptr, ##62804
02cc0                 | LR__0131
02cc0                 | ' 
02cc0                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02cc0     7A 00 00 FF 
02cc4     54 E5 05 F1 | 	add	objptr, ##62804
02cc8     F2 1E 02 FB | 	rdlong	local01, objptr
02ccc     7A 00 00 FF 
02cd0     54 E5 85 F1 | 	sub	objptr, ##62804
02cd4     01 1E 16 F2 | 	cmp	local01, #1 wc
02cd8     3C 00 90 CD |  if_b	jmp	#LR__0132
02cdc     01 3A 0E F2 | 	cmp	local15, #1 wz
02ce0     56 00 00 AF 
02ce4     E8 E4 05 A1 |  if_e	add	objptr, ##44264
02ce8     F2 26 02 AB |  if_e	rdlong	local05, objptr
02cec     56 00 00 AF 
02cf0     E8 E4 85 A1 |  if_e	sub	objptr, ##44264
02cf4     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02cf8     1C 00 90 5D |  if_ne	jmp	#LR__0132
02cfc     7A 00 00 FF 
02d00     54 E5 05 F1 | 	add	objptr, ##62804
02d04     F2 12 02 FB | 	rdlong	arg01, objptr
02d08     7A 00 00 FF 
02d0c     54 E5 85 F1 | 	sub	objptr, ##62804
02d10     C4 1E B0 FD | 	call	#_deleteline
02d14     4C 05 90 FD | 	jmp	#LR__0149
02d18                 | LR__0132
02d18                 | ' 
02d18                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02d18     7A 00 00 FF 
02d1c     54 E5 05 F1 | 	add	objptr, ##62804
02d20     F2 1E 02 FB | 	rdlong	local01, objptr
02d24     7A 00 00 FF 
02d28     54 E5 85 F1 | 	sub	objptr, ##62804
02d2c     01 1E 16 F2 | 	cmp	local01, #1 wc
02d30     EC 00 90 CD |  if_b	jmp	#LR__0135
02d34     56 00 00 FF 
02d38     E8 E4 05 F1 | 	add	objptr, ##44264
02d3c     F2 26 02 FB | 	rdlong	local05, objptr
02d40     56 00 00 FF 
02d44     E8 E4 85 F1 | 	sub	objptr, ##44264
02d48     13 2F 0A F6 | 	mov	local09, local05 wz
02d4c     20 00 90 AD |  if_e	jmp	#LR__0133
02d50     56 00 00 FF 
02d54     E8 E4 05 F1 | 	add	objptr, ##44264
02d58     F2 32 02 FB | 	rdlong	local11, objptr
02d5c     56 00 00 FF 
02d60     E8 E4 85 F1 | 	sub	objptr, ##44264
02d64     19 29 02 F6 | 	mov	local06, local11
02d68     03 28 0E F2 | 	cmp	local06, #3 wz
02d6c     B0 00 90 5D |  if_ne	jmp	#LR__0135
02d70                 | LR__0133
02d70     54 00 00 FF 
02d74     E4 E4 05 F1 | 	add	objptr, ##43236
02d78     F2 36 02 FB | 	rdlong	local13, objptr
02d7c     54 00 00 FF 
02d80     E4 E4 85 F1 | 	sub	objptr, ##43236
02d84     1B 31 02 F6 | 	mov	local10, local13
02d88     1B 30 0E F2 | 	cmp	local10, #27 wz
02d8c     90 00 90 AD |  if_e	jmp	#LR__0135
02d90     7A 00 00 FF 
02d94     54 E5 05 F1 | 	add	objptr, ##62804
02d98     F2 12 02 FB | 	rdlong	arg01, objptr
02d9c     24 00 00 FF 
02da0     6C E4 85 F1 | 	sub	objptr, ##18540
02da4     F2 16 02 FB | 	rdlong	arg03, objptr
02da8     56 00 00 FF 
02dac     E8 E4 85 F1 | 	sub	objptr, ##44264
02db0     00 14 06 F6 | 	mov	arg02, #0
02db4     7C 31 B0 FD | 	call	#_compile
02db8     FD 20 0A F6 | 	mov	local02, result1 wz
02dbc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02dbc                 | '   if err<>0 then printerror(err): goto 104
02dbc     0C 00 90 AD |  if_e	jmp	#LR__0134
02dc0     10 13 02 F6 | 	mov	arg01, local02
02dc4     B4 30 B1 FD | 	call	#_printerror
02dc8     98 04 90 FD | 	jmp	#LR__0149
02dcc                 | LR__0134
02dcc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02dcc     7A 00 00 FF 
02dd0     80 E5 05 F1 | 	add	objptr, ##62848
02dd4     F2 12 02 FB | 	rdlong	arg01, objptr
02dd8     7A 00 00 FF 
02ddc     80 E5 85 F1 | 	sub	objptr, ##62848
02de0     45 01 00 FF 
02de4     80 14 06 F6 | 	mov	arg02, ##@LR__4369
02de8     74 66 B1 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     70 04 90 AD |  if_e	jmp	#LR__0149
02df4     7A 00 00 FF 
02df8     80 E5 05 F1 | 	add	objptr, ##62848
02dfc     F2 1E 02 FB | 	rdlong	local01, objptr
02e00     24 00 00 FF 
02e04     A0 E4 85 F1 | 	sub	objptr, ##18592
02e08     F2 1E 62 FC | 	wrlong	local01, objptr
02e0c     08 E4 05 F1 | 	add	objptr, #8
02e10     F2 08 68 FC | 	wrlong	#4, objptr
02e14     56 00 00 FF 
02e18     E8 E4 85 F1 | 	sub	objptr, ##44264
02e1c     50 DC 9F FD | 	jmp	#LR__0020
02e20                 | LR__0135
02e20                 | '       							
02e20                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02e20     7A 00 00 FF 
02e24     54 E5 05 F1 | 	add	objptr, ##62804
02e28     F2 1E 02 FB | 	rdlong	local01, objptr
02e2c     7A 00 00 FF 
02e30     54 E5 85 F1 | 	sub	objptr, ##62804
02e34     01 1E 16 F2 | 	cmp	local01, #1 wc
02e38     EC 00 90 CD |  if_b	jmp	#LR__0138
02e3c     56 00 00 FF 
02e40     E8 E4 05 F1 | 	add	objptr, ##44264
02e44     F2 26 02 FB | 	rdlong	local05, objptr
02e48     56 00 00 FF 
02e4c     E8 E4 85 F1 | 	sub	objptr, ##44264
02e50     01 26 0E F2 | 	cmp	local05, #1 wz
02e54     20 00 90 AD |  if_e	jmp	#LR__0136
02e58     56 00 00 FF 
02e5c     E8 E4 05 F1 | 	add	objptr, ##44264
02e60     F2 32 02 FB | 	rdlong	local11, objptr
02e64     56 00 00 FF 
02e68     E8 E4 85 F1 | 	sub	objptr, ##44264
02e6c     19 29 02 F6 | 	mov	local06, local11
02e70     02 28 0E F2 | 	cmp	local06, #2 wz
02e74     B0 00 90 5D |  if_ne	jmp	#LR__0138
02e78                 | LR__0136
02e78     54 00 00 FF 
02e7c     DC E4 05 F1 | 	add	objptr, ##43228
02e80     F2 36 02 FB | 	rdlong	local13, objptr
02e84     54 00 00 FF 
02e88     DC E4 85 F1 | 	sub	objptr, ##43228
02e8c     1B 31 02 F6 | 	mov	local10, local13
02e90     1B 30 0E F2 | 	cmp	local10, #27 wz
02e94     90 00 90 AD |  if_e	jmp	#LR__0138
02e98     7A 00 00 FF 
02e9c     54 E5 05 F1 | 	add	objptr, ##62804
02ea0     F2 12 02 FB | 	rdlong	arg01, objptr
02ea4     24 00 00 FF 
02ea8     6C E4 85 F1 | 	sub	objptr, ##18540
02eac     F2 16 02 FB | 	rdlong	arg03, objptr
02eb0     56 00 00 FF 
02eb4     E8 E4 85 F1 | 	sub	objptr, ##44264
02eb8     00 14 06 F6 | 	mov	arg02, #0
02ebc     74 30 B0 FD | 	call	#_compile
02ec0     FD 20 0A F6 | 	mov	local02, result1 wz
02ec4                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ec4                 | '   if err<>0 then printerror(err): goto 104
02ec4     0C 00 90 AD |  if_e	jmp	#LR__0137
02ec8     10 13 02 F6 | 	mov	arg01, local02
02ecc     AC 2F B1 FD | 	call	#_printerror
02ed0     90 03 90 FD | 	jmp	#LR__0149
02ed4                 | LR__0137
02ed4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02ed4     7A 00 00 FF 
02ed8     80 E5 05 F1 | 	add	objptr, ##62848
02edc     F2 12 02 FB | 	rdlong	arg01, objptr
02ee0     7A 00 00 FF 
02ee4     80 E5 85 F1 | 	sub	objptr, ##62848
02ee8     45 01 00 FF 
02eec     81 14 06 F6 | 	mov	arg02, ##@LR__4370
02ef0     6C 65 B1 FD | 	call	#__system___string_cmp
02ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef8     68 03 90 AD |  if_e	jmp	#LR__0149
02efc     7A 00 00 FF 
02f00     80 E5 05 F1 | 	add	objptr, ##62848
02f04     F2 1E 02 FB | 	rdlong	local01, objptr
02f08     24 00 00 FF 
02f0c     A0 E4 85 F1 | 	sub	objptr, ##18592
02f10     F2 1E 62 FC | 	wrlong	local01, objptr
02f14     08 E4 05 F1 | 	add	objptr, #8
02f18     F2 08 68 FC | 	wrlong	#4, objptr
02f1c     56 00 00 FF 
02f20     E8 E4 85 F1 | 	sub	objptr, ##44264
02f24     48 DB 9F FD | 	jmp	#LR__0020
02f28                 | LR__0138
02f28                 | ' 							 
02f28                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02f28     7A 00 00 FF 
02f2c     54 E5 05 F1 | 	add	objptr, ##62804
02f30     F2 1E 02 FB | 	rdlong	local01, objptr
02f34     7A 00 00 FF 
02f38     54 E5 85 F1 | 	sub	objptr, ##62804
02f3c     01 1E 16 F2 | 	cmp	local01, #1 wc
02f40     D4 00 90 CD |  if_b	jmp	#LR__0140
02f44     56 00 00 FF 
02f48     E8 E4 05 F1 | 	add	objptr, ##44264
02f4c     F2 26 0A FB | 	rdlong	local05, objptr wz
02f50     56 00 00 FF 
02f54     E8 E4 85 F1 | 	sub	objptr, ##44264
02f58     20 00 90 AD |  if_e	jmp	#LR__0139
02f5c     56 00 00 FF 
02f60     E8 E4 05 F1 | 	add	objptr, ##44264
02f64     F2 32 02 FB | 	rdlong	local11, objptr
02f68     56 00 00 FF 
02f6c     E8 E4 85 F1 | 	sub	objptr, ##44264
02f70     19 29 02 F6 | 	mov	local06, local11
02f74     03 28 0E F2 | 	cmp	local06, #3 wz
02f78     9C 00 90 5D |  if_ne	jmp	#LR__0140
02f7c                 | LR__0139
02f7c     54 00 00 FF 
02f80     E4 E4 05 F1 | 	add	objptr, ##43236
02f84     F2 36 02 FB | 	rdlong	local13, objptr
02f88     54 00 00 FF 
02f8c     E4 E4 85 F1 | 	sub	objptr, ##43236
02f90     1B 31 02 F6 | 	mov	local10, local13
02f94     1B 30 0E F2 | 	cmp	local10, #27 wz
02f98     7C 00 90 5D |  if_ne	jmp	#LR__0140
02f9c     7A 00 00 FF 
02fa0     54 E5 05 F1 | 	add	objptr, ##62804
02fa4     F2 12 02 FB | 	rdlong	arg01, objptr
02fa8     24 00 00 FF 
02fac     6C E4 85 F1 | 	sub	objptr, ##18540
02fb0     F2 16 02 FB | 	rdlong	arg03, objptr
02fb4     56 00 00 FF 
02fb8     E8 E4 85 F1 | 	sub	objptr, ##44264
02fbc     00 14 06 F6 | 	mov	arg02, #0
02fc0     40 30 B0 FD | 	call	#_compile_assign
02fc4                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02fc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02fc4     7A 00 00 FF 
02fc8     80 E5 05 F1 | 	add	objptr, ##62848
02fcc     F2 12 02 FB | 	rdlong	arg01, objptr
02fd0     7A 00 00 FF 
02fd4     80 E5 85 F1 | 	sub	objptr, ##62848
02fd8     45 01 00 FF 
02fdc     82 14 06 F6 | 	mov	arg02, ##@LR__4371
02fe0     7C 64 B1 FD | 	call	#__system___string_cmp
02fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe8     78 02 90 AD |  if_e	jmp	#LR__0149
02fec     7A 00 00 FF 
02ff0     80 E5 05 F1 | 	add	objptr, ##62848
02ff4     F2 1E 02 FB | 	rdlong	local01, objptr
02ff8     24 00 00 FF 
02ffc     A0 E4 85 F1 | 	sub	objptr, ##18592
03000     F2 1E 62 FC | 	wrlong	local01, objptr
03004     08 E4 05 F1 | 	add	objptr, #8
03008     F2 08 68 FC | 	wrlong	#4, objptr
0300c     56 00 00 FF 
03010     E8 E4 85 F1 | 	sub	objptr, ##44264
03014     58 DA 9F FD | 	jmp	#LR__0020
03018                 | LR__0140
03018                 | '     							 
03018                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03018     7A 00 00 FF 
0301c     54 E5 05 F1 | 	add	objptr, ##62804
03020     F2 1E 02 FB | 	rdlong	local01, objptr
03024     7A 00 00 FF 
03028     54 E5 85 F1 | 	sub	objptr, ##62804
0302c     01 1E 16 F2 | 	cmp	local01, #1 wc
03030     CC 00 90 CD |  if_b	jmp	#LR__0141
03034     56 00 00 FF 
03038     E8 E4 05 F1 | 	add	objptr, ##44264
0303c     F2 26 02 FB | 	rdlong	local05, objptr
03040     56 00 00 FF 
03044     E8 E4 85 F1 | 	sub	objptr, ##44264
03048     01 26 0E F2 | 	cmp	local05, #1 wz
0304c     56 00 00 5F 
03050     E8 E4 05 51 |  if_ne	add	objptr, ##44264
03054     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03058     56 00 00 5F 
0305c     E8 E4 85 51 |  if_ne	sub	objptr, ##44264
03060     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03064     54 00 00 AF 
03068     DC E4 05 A1 |  if_e	add	objptr, ##43228
0306c     F2 36 02 AB |  if_e	rdlong	local13, objptr
03070     54 00 00 AF 
03074     DC E4 85 A1 |  if_e	sub	objptr, ##43228
03078     1B 31 02 A6 |  if_e	mov	local10, local13
0307c     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03080     7C 00 90 5D |  if_ne	jmp	#LR__0141
03084     7A 00 00 FF 
03088     54 E5 05 F1 | 	add	objptr, ##62804
0308c     F2 12 02 FB | 	rdlong	arg01, objptr
03090     24 00 00 FF 
03094     6C E4 85 F1 | 	sub	objptr, ##18540
03098     F2 16 02 FB | 	rdlong	arg03, objptr
0309c     56 00 00 FF 
030a0     E8 E4 85 F1 | 	sub	objptr, ##44264
030a4     00 14 06 F6 | 	mov	arg02, #0
030a8     58 2F B0 FD | 	call	#_compile_assign
030ac                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
030ac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
030ac     7A 00 00 FF 
030b0     80 E5 05 F1 | 	add	objptr, ##62848
030b4     F2 12 02 FB | 	rdlong	arg01, objptr
030b8     7A 00 00 FF 
030bc     80 E5 85 F1 | 	sub	objptr, ##62848
030c0     45 01 00 FF 
030c4     83 14 06 F6 | 	mov	arg02, ##@LR__4372
030c8     94 63 B1 FD | 	call	#__system___string_cmp
030cc     00 FA 0D F2 | 	cmp	result1, #0 wz
030d0     90 01 90 AD |  if_e	jmp	#LR__0149
030d4     7A 00 00 FF 
030d8     80 E5 05 F1 | 	add	objptr, ##62848
030dc     F2 1E 02 FB | 	rdlong	local01, objptr
030e0     24 00 00 FF 
030e4     A0 E4 85 F1 | 	sub	objptr, ##18592
030e8     F2 1E 62 FC | 	wrlong	local01, objptr
030ec     08 E4 05 F1 | 	add	objptr, #8
030f0     F2 08 68 FC | 	wrlong	#4, objptr
030f4     56 00 00 FF 
030f8     E8 E4 85 F1 | 	sub	objptr, ##44264
030fc     70 D9 9F FD | 	jmp	#LR__0020
03100                 | LR__0141
03100                 | ' 
03100                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03100     54 00 00 FF 
03104     D4 E4 05 F1 | 	add	objptr, ##43220
03108     F2 1E 02 FB | 	rdlong	local01, objptr
0310c     54 00 00 FF 
03110     D4 E4 85 F1 | 	sub	objptr, ##43220
03114     01 00 00 FF 
03118     04 1E 0E F2 | 	cmp	local01, ##516 wz
0311c     54 00 00 AF 
03120     DC E4 05 A1 |  if_e	add	objptr, ##43228
03124     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03128     54 00 00 AF 
0312c     DC E4 85 A1 |  if_e	sub	objptr, ##43228
03130     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03134     14 00 90 5D |  if_ne	jmp	#LR__0142
03138     00 12 06 F6 | 	mov	arg01, #0
0313c     00 14 06 F6 | 	mov	arg02, #0
03140     00 16 06 F6 | 	mov	arg03, #0
03144     BC 2E B0 FD | 	call	#_compile_assign
03148     90 00 90 FD | 	jmp	#LR__0144
0314c                 | LR__0142
0314c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0314c     54 00 00 FF 
03150     D4 E4 05 F1 | 	add	objptr, ##43220
03154     F2 1E 02 FB | 	rdlong	local01, objptr
03158     54 00 00 FF 
0315c     D4 E4 85 F1 | 	sub	objptr, ##43220
03160     01 00 00 FF 
03164     04 1E 0E F2 | 	cmp	local01, ##516 wz
03168     54 00 00 AF 
0316c     DC E4 05 A1 |  if_e	add	objptr, ##43228
03170     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03174     54 00 00 AF 
03178     DC E4 85 A1 |  if_e	sub	objptr, ##43228
0317c     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
03180     44 00 90 5D |  if_ne	jmp	#LR__0143
03184     00 12 06 F6 | 	mov	arg01, #0
03188     B0 BB B1 FD | 	call	#__system___getiolock_0425
0318c     FD 12 02 F6 | 	mov	arg01, result1
03190     A4 62 B1 FD | 	call	#__system___lockmem
03194     45 01 00 FF 
03198     84 14 06 F6 | 	mov	arg02, ##@LR__4373
0319c     00 12 06 F6 | 	mov	arg01, #0
031a0     00 16 06 F6 | 	mov	arg03, #0
031a4     84 6F B1 FD | 	call	#__system___basic_print_string
031a8     00 12 06 F6 | 	mov	arg01, #0
031ac     0A 14 06 F6 | 	mov	arg02, #10
031b0     00 16 06 F6 | 	mov	arg03, #0
031b4     1C 6F B1 FD | 	call	#__system___basic_print_char
031b8     00 12 06 F6 | 	mov	arg01, #0
031bc     7C BB B1 FD | 	call	#__system___getiolock_0425
031c0     FD 00 68 FC | 	wrlong	#0, result1
031c4     7C 00 90 FD | 	jmp	#LR__0148
031c8                 | LR__0143
031c8     00 12 06 F6 | 	mov	arg01, #0
031cc     00 14 06 F6 | 	mov	arg02, #0
031d0     00 16 06 F6 | 	mov	arg03, #0
031d4     5C 2D B0 FD | 	call	#_compile
031d8     FD 20 02 F6 | 	mov	local02, result1
031dc                 | LR__0144
031dc                 | ' 
031dc                 | ' ' if we are here, this is not a program line to add, so try to execute this
031dc                 | ' 
031dc                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
031dc                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
031dc                 | ' if err=0 then execute_line() else printerror(err)
031dc     00 20 0E F2 | 	cmp	local02, #0 wz
031e0     0C 00 90 5D |  if_ne	jmp	#LR__0145
031e4     00 12 06 F6 | 	mov	arg01, #0
031e8     48 66 B0 FD | 	call	#_execute_line
031ec     08 00 90 FD | 	jmp	#LR__0146
031f0                 | LR__0145
031f0     10 13 02 F6 | 	mov	arg01, local02
031f4     84 2C B1 FD | 	call	#_printerror
031f8                 | LR__0146
031f8                 | ' if rest$<>"" then line$=rest$:  goto 108 
031f8     7A 00 00 FF 
031fc     80 E5 05 F1 | 	add	objptr, ##62848
03200     F2 12 02 FB | 	rdlong	arg01, objptr
03204     7A 00 00 FF 
03208     80 E5 85 F1 | 	sub	objptr, ##62848
0320c     45 01 00 FF 
03210     B3 14 06 F6 | 	mov	arg02, ##@LR__4374
03214     48 62 B1 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     24 00 90 AD |  if_e	jmp	#LR__0147
03220     7A 00 00 FF 
03224     80 E5 05 F1 | 	add	objptr, ##62848
03228     F2 1E 02 FB | 	rdlong	local01, objptr
0322c     24 00 00 FF 
03230     A0 E4 85 F1 | 	sub	objptr, ##18592
03234     F2 1E 62 FC | 	wrlong	local01, objptr
03238     56 00 00 FF 
0323c     E0 E4 85 F1 | 	sub	objptr, ##44256
03240     2C D8 9F FD | 	jmp	#LR__0020
03244                 | LR__0147
03244                 | LR__0148
03244     45 01 00 FF 
03248     B4 12 06 F6 | 	mov	arg01, ##@LR__4375
0324c                 | ' 
0324c                 | ' write(text)
0324c     44 51 B1 FD | 	call	#_hg010b_spin2_write
03250                 | ' crlf
03250     A0 52 B1 FD | 	call	#_hg010b_spin2_crlf
03254     45 01 00 FF 
03258     B5 12 06 F6 | 	mov	arg01, ##@LR__4376
0325c                 | ' 
0325c                 | ' write(text)
0325c     34 51 B1 FD | 	call	#_hg010b_spin2_write
03260                 | ' crlf
03260     90 52 B1 FD | 	call	#_hg010b_spin2_crlf
03264                 | LR__0149
03264     A7 F0 03 F6 | 	mov	ptra, fp
03268     B2 00 A0 FD | 	call	#popregs_
0326c                 | _interpret_ret
0326c     2D 00 64 FD | 	ret
03270                 | 
03270                 | ' 
03270                 | ' 
03270                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
03270                 | ' 
03270                 | ' function isoperator(s as string) as ubyte
03270                 | _isoperator
03270     01 4A 05 F6 | 	mov	COUNT_, #1
03274     A8 00 A0 FD | 	call	#pushregs_
03278                 | ' 
03278                 | ' select case s
03278     09 1F 02 F6 | 	mov	local01, arg01
0327c     45 01 00 FF 
03280     BB 14 06 F6 | 	mov	arg02, ##@LR__4377
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     D4 61 B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     FC 01 90 AD |  if_e	jmp	#LR__0150
03294     45 01 00 FF 
03298     BD 14 06 F6 | 	mov	arg02, ##@LR__4378
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     BC 61 B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     EC 01 90 AD |  if_e	jmp	#LR__0151
032ac     45 01 00 FF 
032b0     BF 14 06 F6 | 	mov	arg02, ##@LR__4379
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     A4 61 B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     DC 01 90 AD |  if_e	jmp	#LR__0152
032c4     45 01 00 FF 
032c8     C2 14 06 F6 | 	mov	arg02, ##@LR__4380
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     8C 61 B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     CC 01 90 AD |  if_e	jmp	#LR__0153
032dc     45 01 00 FF 
032e0     C6 14 06 F6 | 	mov	arg02, ##@LR__4381
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     74 61 B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     BC 01 90 AD |  if_e	jmp	#LR__0154
032f4     45 01 00 FF 
032f8     C8 14 06 F6 | 	mov	arg02, ##@LR__4382
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     5C 61 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     AC 01 90 AD |  if_e	jmp	#LR__0155
0330c     45 01 00 FF 
03310     CA 14 06 F6 | 	mov	arg02, ##@LR__4383
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     44 61 B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     9C 01 90 AD |  if_e	jmp	#LR__0156
03324     45 01 00 FF 
03328     CE 14 06 F6 | 	mov	arg02, ##@LR__4384
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     2C 61 B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     8C 01 90 AD |  if_e	jmp	#LR__0157
0333c     45 01 00 FF 
03340     D2 14 06 F6 | 	mov	arg02, ##@LR__4385
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     14 61 B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     7C 01 90 AD |  if_e	jmp	#LR__0158
03354     45 01 00 FF 
03358     D6 14 06 F6 | 	mov	arg02, ##@LR__4386
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     FC 60 B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     6C 01 90 AD |  if_e	jmp	#LR__0159
0336c     45 01 00 FF 
03370     DA 14 06 F6 | 	mov	arg02, ##@LR__4387
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     E4 60 B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     5C 01 90 AD |  if_e	jmp	#LR__0160
03384     45 01 00 FF 
03388     DE 14 06 F6 | 	mov	arg02, ##@LR__4388
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     CC 60 B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     4C 01 90 AD |  if_e	jmp	#LR__0161
0339c     45 01 00 FF 
033a0     E0 14 06 F6 | 	mov	arg02, ##@LR__4389
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     B4 60 B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     3C 01 90 AD |  if_e	jmp	#LR__0162
033b4     45 01 00 FF 
033b8     E4 14 06 F6 | 	mov	arg02, ##@LR__4390
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     9C 60 B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     2C 01 90 AD |  if_e	jmp	#LR__0163
033cc     45 01 00 FF 
033d0     E6 14 06 F6 | 	mov	arg02, ##@LR__4391
033d4     0F 13 02 F6 | 	mov	arg01, local01
033d8     84 60 B1 FD | 	call	#__system___string_cmp
033dc     00 FA 0D F2 | 	cmp	result1, #0 wz
033e0     1C 01 90 AD |  if_e	jmp	#LR__0164
033e4     45 01 00 FF 
033e8     E8 14 06 F6 | 	mov	arg02, ##@LR__4392
033ec     0F 13 02 F6 | 	mov	arg01, local01
033f0     6C 60 B1 FD | 	call	#__system___string_cmp
033f4     00 FA 0D F2 | 	cmp	result1, #0 wz
033f8     0C 01 90 AD |  if_e	jmp	#LR__0165
033fc     45 01 00 FF 
03400     EB 14 06 F6 | 	mov	arg02, ##@LR__4393
03404     0F 13 02 F6 | 	mov	arg01, local01
03408     54 60 B1 FD | 	call	#__system___string_cmp
0340c     00 FA 0D F2 | 	cmp	result1, #0 wz
03410     FC 00 90 AD |  if_e	jmp	#LR__0166
03414     45 01 00 FF 
03418     EE 14 06 F6 | 	mov	arg02, ##@LR__4394
0341c     0F 13 02 F6 | 	mov	arg01, local01
03420     3C 60 B1 FD | 	call	#__system___string_cmp
03424     00 FA 0D F2 | 	cmp	result1, #0 wz
03428     EC 00 90 AD |  if_e	jmp	#LR__0167
0342c     45 01 00 FF 
03430     F0 14 06 F6 | 	mov	arg02, ##@LR__4395
03434     0F 13 02 F6 | 	mov	arg01, local01
03438     24 60 B1 FD | 	call	#__system___string_cmp
0343c     00 FA 0D F2 | 	cmp	result1, #0 wz
03440     DC 00 90 AD |  if_e	jmp	#LR__0168
03444     45 01 00 FF 
03448     F2 14 06 F6 | 	mov	arg02, ##@LR__4396
0344c     0F 13 02 F6 | 	mov	arg01, local01
03450     0C 60 B1 FD | 	call	#__system___string_cmp
03454     00 FA 0D F2 | 	cmp	result1, #0 wz
03458     CC 00 90 AD |  if_e	jmp	#LR__0169
0345c     45 01 00 FF 
03460     F5 14 06 F6 | 	mov	arg02, ##@LR__4397
03464     0F 13 02 F6 | 	mov	arg01, local01
03468     F4 5F B1 FD | 	call	#__system___string_cmp
0346c     00 FA 0D F2 | 	cmp	result1, #0 wz
03470     BC 00 90 AD |  if_e	jmp	#LR__0170
03474     45 01 00 FF 
03478     F8 14 06 F6 | 	mov	arg02, ##@LR__4398
0347c     0F 13 02 F6 | 	mov	arg01, local01
03480     DC 5F B1 FD | 	call	#__system___string_cmp
03484     00 FA 0D F2 | 	cmp	result1, #0 wz
03488     AC 00 90 AD |  if_e	jmp	#LR__0171
0348c     B0 00 90 FD | 	jmp	#LR__0172
03490                 | LR__0150
03490     01 FA 05 F6 | 	mov	result1, #1
03494     AC 00 90 FD | 	jmp	#LR__0173
03498                 | LR__0151
03498     02 FA 05 F6 | 	mov	result1, #2
0349c     A4 00 90 FD | 	jmp	#LR__0173
034a0                 | LR__0152
034a0     03 FA 05 F6 | 	mov	result1, #3
034a4     9C 00 90 FD | 	jmp	#LR__0173
034a8                 | LR__0153
034a8     04 FA 05 F6 | 	mov	result1, #4
034ac     94 00 90 FD | 	jmp	#LR__0173
034b0                 | LR__0154
034b0     05 FA 05 F6 | 	mov	result1, #5
034b4     8C 00 90 FD | 	jmp	#LR__0173
034b8                 | LR__0155
034b8     06 FA 05 F6 | 	mov	result1, #6
034bc     84 00 90 FD | 	jmp	#LR__0173
034c0                 | LR__0156
034c0     07 FA 05 F6 | 	mov	result1, #7
034c4     7C 00 90 FD | 	jmp	#LR__0173
034c8                 | LR__0157
034c8     08 FA 05 F6 | 	mov	result1, #8
034cc     74 00 90 FD | 	jmp	#LR__0173
034d0                 | LR__0158
034d0     09 FA 05 F6 | 	mov	result1, #9
034d4     6C 00 90 FD | 	jmp	#LR__0173
034d8                 | LR__0159
034d8     0A FA 05 F6 | 	mov	result1, #10
034dc     64 00 90 FD | 	jmp	#LR__0173
034e0                 | LR__0160
034e0     0B FA 05 F6 | 	mov	result1, #11
034e4     5C 00 90 FD | 	jmp	#LR__0173
034e8                 | LR__0161
034e8     0C FA 05 F6 | 	mov	result1, #12
034ec     54 00 90 FD | 	jmp	#LR__0173
034f0                 | LR__0162
034f0     0D FA 05 F6 | 	mov	result1, #13
034f4     4C 00 90 FD | 	jmp	#LR__0173
034f8                 | LR__0163
034f8     0E FA 05 F6 | 	mov	result1, #14
034fc     44 00 90 FD | 	jmp	#LR__0173
03500                 | LR__0164
03500     1B FA 05 F6 | 	mov	result1, #27
03504     3C 00 90 FD | 	jmp	#LR__0173
03508                 | LR__0165
03508     27 FA 05 F6 | 	mov	result1, #39
0350c     34 00 90 FD | 	jmp	#LR__0173
03510                 | LR__0166
03510     26 FA 05 F6 | 	mov	result1, #38
03514     2C 00 90 FD | 	jmp	#LR__0173
03518                 | LR__0167
03518     10 FA 05 F6 | 	mov	result1, #16
0351c     24 00 90 FD | 	jmp	#LR__0173
03520                 | LR__0168
03520     0F FA 05 F6 | 	mov	result1, #15
03524     1C 00 90 FD | 	jmp	#LR__0173
03528                 | LR__0169
03528     2A FA 05 F6 | 	mov	result1, #42
0352c     14 00 90 FD | 	jmp	#LR__0173
03530                 | LR__0170
03530     28 FA 05 F6 | 	mov	result1, #40
03534     0C 00 90 FD | 	jmp	#LR__0173
03538                 | LR__0171
03538     29 FA 05 F6 | 	mov	result1, #41
0353c     04 00 90 FD | 	jmp	#LR__0173
03540                 | LR__0172
03540     00 FA 05 F6 | 	mov	result1, #0
03544                 | LR__0173
03544     A7 F0 03 F6 | 	mov	ptra, fp
03548     B2 00 A0 FD | 	call	#popregs_
0354c                 | _isoperator_ret
0354c     2D 00 64 FD | 	ret
03550                 | 
03550                 | ' 
03550                 | ' function isseparator(s as string) as ubyte
03550                 | _isseparator
03550     01 4A 05 F6 | 	mov	COUNT_, #1
03554     A8 00 A0 FD | 	call	#pushregs_
03558                 | ' 
03558                 | ' select case s
03558     09 1F 02 F6 | 	mov	local01, arg01
0355c     45 01 00 FF 
03560     FB 14 06 F6 | 	mov	arg02, ##@LR__4399
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     F4 5E B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     54 01 90 AD |  if_e	jmp	#LR__0180
03574     45 01 00 FF 
03578     FD 14 06 F6 | 	mov	arg02, ##@LR__4400
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     DC 5E B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     44 01 90 AD |  if_e	jmp	#LR__0181
0358c     45 01 00 FF 
03590     FF 14 06 F6 | 	mov	arg02, ##@LR__4401
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     C4 5E B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     34 01 90 AD |  if_e	jmp	#LR__0182
035a4     45 01 00 FF 
035a8     01 15 06 F6 | 	mov	arg02, ##@LR__4402
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     AC 5E B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     24 01 90 AD |  if_e	jmp	#LR__0183
035bc     45 01 00 FF 
035c0     03 15 06 F6 | 	mov	arg02, ##@LR__4403
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     94 5E B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     14 01 90 AD |  if_e	jmp	#LR__0184
035d4     45 01 00 FF 
035d8     05 15 06 F6 | 	mov	arg02, ##@LR__4404
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     7C 5E B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     04 01 90 AD |  if_e	jmp	#LR__0185
035ec     45 01 00 FF 
035f0     07 15 06 F6 | 	mov	arg02, ##@LR__4405
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     64 5E B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     F4 00 90 AD |  if_e	jmp	#LR__0186
03604     45 01 00 FF 
03608     09 15 06 F6 | 	mov	arg02, ##@LR__4406
0360c     0F 13 02 F6 | 	mov	arg01, local01
03610     4C 5E B1 FD | 	call	#__system___string_cmp
03614     00 FA 0D F2 | 	cmp	result1, #0 wz
03618     E4 00 90 AD |  if_e	jmp	#LR__0187
0361c     45 01 00 FF 
03620     0B 15 06 F6 | 	mov	arg02, ##@LR__4407
03624     0F 13 02 F6 | 	mov	arg01, local01
03628     34 5E B1 FD | 	call	#__system___string_cmp
0362c     00 FA 0D F2 | 	cmp	result1, #0 wz
03630     D4 00 90 AD |  if_e	jmp	#LR__0188
03634     45 01 00 FF 
03638     0D 15 06 F6 | 	mov	arg02, ##@LR__4408
0363c     0F 13 02 F6 | 	mov	arg01, local01
03640     1C 5E B1 FD | 	call	#__system___string_cmp
03644     00 FA 0D F2 | 	cmp	result1, #0 wz
03648     C4 00 90 AD |  if_e	jmp	#LR__0189
0364c     45 01 00 FF 
03650     0F 15 06 F6 | 	mov	arg02, ##@LR__4409
03654     0F 13 02 F6 | 	mov	arg01, local01
03658     04 5E B1 FD | 	call	#__system___string_cmp
0365c     00 FA 0D F2 | 	cmp	result1, #0 wz
03660     B4 00 90 AD |  if_e	jmp	#LR__0190
03664     45 01 00 FF 
03668     11 15 06 F6 | 	mov	arg02, ##@LR__4410
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     EC 5D B1 FD | 	call	#__system___string_cmp
03674     00 FA 0D F2 | 	cmp	result1, #0 wz
03678     A4 00 90 AD |  if_e	jmp	#LR__0191
0367c     45 01 00 FF 
03680     13 15 06 F6 | 	mov	arg02, ##@LR__4411
03684     0F 13 02 F6 | 	mov	arg01, local01
03688     D4 5D B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     94 00 90 AD |  if_e	jmp	#LR__0192
03694     45 01 00 FF 
03698     15 15 06 F6 | 	mov	arg02, ##@LR__4412
0369c     0F 13 02 F6 | 	mov	arg01, local01
036a0     BC 5D B1 FD | 	call	#__system___string_cmp
036a4     00 FA 0D F2 | 	cmp	result1, #0 wz
036a8     84 00 90 AD |  if_e	jmp	#LR__0193
036ac     45 01 00 FF 
036b0     17 15 06 F6 | 	mov	arg02, ##@LR__4413
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     A4 5D B1 FD | 	call	#__system___string_cmp
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     74 00 90 AD |  if_e	jmp	#LR__0194
036c4     78 00 90 FD | 	jmp	#LR__0195
036c8                 | LR__0180
036c8     01 FA 05 F6 | 	mov	result1, #1
036cc     74 00 90 FD | 	jmp	#LR__0196
036d0                 | LR__0181
036d0     02 FA 05 F6 | 	mov	result1, #2
036d4     6C 00 90 FD | 	jmp	#LR__0196
036d8                 | LR__0182
036d8     1B FA 05 F6 | 	mov	result1, #27
036dc     64 00 90 FD | 	jmp	#LR__0196
036e0                 | LR__0183
036e0     11 FA 05 F6 | 	mov	result1, #17
036e4     5C 00 90 FD | 	jmp	#LR__0196
036e8                 | LR__0184
036e8     05 FA 05 F6 | 	mov	result1, #5
036ec     54 00 90 FD | 	jmp	#LR__0196
036f0                 | LR__0185
036f0     06 FA 05 F6 | 	mov	result1, #6
036f4     4C 00 90 FD | 	jmp	#LR__0196
036f8                 | LR__0186
036f8     12 FA 05 F6 | 	mov	result1, #18
036fc     44 00 90 FD | 	jmp	#LR__0196
03700                 | LR__0187
03700     13 FA 05 F6 | 	mov	result1, #19
03704     3C 00 90 FD | 	jmp	#LR__0196
03708                 | LR__0188
03708     0C FA 05 F6 | 	mov	result1, #12
0370c     34 00 90 FD | 	jmp	#LR__0196
03710                 | LR__0189
03710     14 FA 05 F6 | 	mov	result1, #20
03714     2C 00 90 FD | 	jmp	#LR__0196
03718                 | LR__0190
03718     15 FA 05 F6 | 	mov	result1, #21
0371c     24 00 90 FD | 	jmp	#LR__0196
03720                 | LR__0191
03720     16 FA 05 F6 | 	mov	result1, #22
03724     1C 00 90 FD | 	jmp	#LR__0196
03728                 | LR__0192
03728     FF FB 05 F6 | 	mov	result1, #511
0372c     14 00 90 FD | 	jmp	#LR__0196
03730                 | LR__0193
03730     0F FA 05 F6 | 	mov	result1, #15
03734     0C 00 90 FD | 	jmp	#LR__0196
03738                 | LR__0194
03738     10 FA 05 F6 | 	mov	result1, #16
0373c     04 00 90 FD | 	jmp	#LR__0196
03740                 | LR__0195
03740     00 FA 05 F6 | 	mov	result1, #0
03744                 | LR__0196
03744     A7 F0 03 F6 | 	mov	ptra, fp
03748     B2 00 A0 FD | 	call	#popregs_
0374c                 | _isseparator_ret
0374c     2D 00 64 FD | 	ret
03750                 | 
03750                 | ' 
03750                 | ' 
03750                 | ' function iscommand(s as string) as ubyte
03750                 | _iscommand
03750     01 4A 05 F6 | 	mov	COUNT_, #1
03754     A8 00 A0 FD | 	call	#pushregs_
03758                 | ' 
03758                 | ' select case s
03758     09 1F 02 F6 | 	mov	local01, arg01
0375c     45 01 00 FF 
03760     1B 15 06 F6 | 	mov	arg02, ##@LR__4415
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     F4 5C B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     6C 07 90 AD |  if_e	jmp	#LR__0200
03774     45 01 00 FF 
03778     20 15 06 F6 | 	mov	arg02, ##@LR__4416
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     DC 5C B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     5C 07 90 AD |  if_e	jmp	#LR__0201
0378c     45 01 00 FF 
03790     23 15 06 F6 | 	mov	arg02, ##@LR__4417
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     C4 5C B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     4C 07 90 AD |  if_e	jmp	#LR__0202
037a4     45 01 00 FF 
037a8     27 15 06 F6 | 	mov	arg02, ##@LR__4418
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     AC 5C B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     3C 07 90 AD |  if_e	jmp	#LR__0203
037bc     45 01 00 FF 
037c0     2C 15 06 F6 | 	mov	arg02, ##@LR__4419
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     94 5C B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     2C 07 90 AD |  if_e	jmp	#LR__0204
037d4     45 01 00 FF 
037d8     30 15 06 F6 | 	mov	arg02, ##@LR__4420
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     7C 5C B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     1C 07 90 AD |  if_e	jmp	#LR__0205
037ec     45 01 00 FF 
037f0     37 15 06 F6 | 	mov	arg02, ##@LR__4421
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     64 5C B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     0C 07 90 AD |  if_e	jmp	#LR__0206
03804     45 01 00 FF 
03808     3B 15 06 F6 | 	mov	arg02, ##@LR__4422
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     4C 5C B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     FC 06 90 AD |  if_e	jmp	#LR__0207
0381c     45 01 00 FF 
03820     41 15 06 F6 | 	mov	arg02, ##@LR__4423
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     34 5C B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     EC 06 90 AD |  if_e	jmp	#LR__0208
03834     45 01 00 FF 
03838     45 15 06 F6 | 	mov	arg02, ##@LR__4424
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     1C 5C B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 06 90 AD |  if_e	jmp	#LR__0209
0384c     45 01 00 FF 
03850     4B 15 06 F6 | 	mov	arg02, ##@LR__4425
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     04 5C B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     CC 06 90 AD |  if_e	jmp	#LR__0210
03864     45 01 00 FF 
03868     4E 15 06 F6 | 	mov	arg02, ##@LR__4426
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     EC 5B B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     BC 06 90 AD |  if_e	jmp	#LR__0211
0387c     45 01 00 FF 
03880     54 15 06 F6 | 	mov	arg02, ##@LR__4427
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     D4 5B B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     AC 06 90 AD |  if_e	jmp	#LR__0212
03894     45 01 00 FF 
03898     58 15 06 F6 | 	mov	arg02, ##@LR__4428
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     BC 5B B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     9C 06 90 AD |  if_e	jmp	#LR__0213
038ac     45 01 00 FF 
038b0     5F 15 06 F6 | 	mov	arg02, ##@LR__4429
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     A4 5B B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     8C 06 90 AD |  if_e	jmp	#LR__0214
038c4     45 01 00 FF 
038c8     66 15 06 F6 | 	mov	arg02, ##@LR__4430
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     8C 5B B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     7C 06 90 AD |  if_e	jmp	#LR__0215
038dc     45 01 00 FF 
038e0     6D 15 06 F6 | 	mov	arg02, ##@LR__4431
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     74 5B B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     6C 06 90 AD |  if_e	jmp	#LR__0216
038f4     45 01 00 FF 
038f8     77 15 06 F6 | 	mov	arg02, ##@LR__4432
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     5C 5B B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     5C 06 90 AD |  if_e	jmp	#LR__0217
0390c     45 01 00 FF 
03910     7B 15 06 F6 | 	mov	arg02, ##@LR__4433
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     44 5B B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     4C 06 90 AD |  if_e	jmp	#LR__0218
03924     45 01 00 FF 
03928     7F 15 06 F6 | 	mov	arg02, ##@LR__4434
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     2C 5B B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     3C 06 90 AD |  if_e	jmp	#LR__0219
0393c     45 01 00 FF 
03940     83 15 06 F6 | 	mov	arg02, ##@LR__4435
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     14 5B B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     2C 06 90 AD |  if_e	jmp	#LR__0220
03954     45 01 00 FF 
03958     87 15 06 F6 | 	mov	arg02, ##@LR__4436
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     FC 5A B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     1C 06 90 AD |  if_e	jmp	#LR__0221
0396c     45 01 00 FF 
03970     8C 15 06 F6 | 	mov	arg02, ##@LR__4437
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     E4 5A B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     0C 06 90 AD |  if_e	jmp	#LR__0222
03984     45 01 00 FF 
03988     90 15 06 F6 | 	mov	arg02, ##@LR__4438
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     CC 5A B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     FC 05 90 AD |  if_e	jmp	#LR__0223
0399c     45 01 00 FF 
039a0     95 15 06 F6 | 	mov	arg02, ##@LR__4439
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     B4 5A B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     EC 05 90 AD |  if_e	jmp	#LR__0224
039b4     45 01 00 FF 
039b8     9D 15 06 F6 | 	mov	arg02, ##@LR__4440
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     9C 5A B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     DC 05 90 AD |  if_e	jmp	#LR__0225
039cc     45 01 00 FF 
039d0     A1 15 06 F6 | 	mov	arg02, ##@LR__4441
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     84 5A B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     CC 05 90 AD |  if_e	jmp	#LR__0226
039e4     45 01 00 FF 
039e8     A6 15 06 F6 | 	mov	arg02, ##@LR__4442
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     6C 5A B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     BC 05 90 AD |  if_e	jmp	#LR__0227
039fc     45 01 00 FF 
03a00     AA 15 06 F6 | 	mov	arg02, ##@LR__4443
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     54 5A B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     AC 05 90 AD |  if_e	jmp	#LR__0228
03a14     45 01 00 FF 
03a18     AF 15 06 F6 | 	mov	arg02, ##@LR__4444
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     3C 5A B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     9C 05 90 AD |  if_e	jmp	#LR__0229
03a2c     45 01 00 FF 
03a30     B3 15 06 F6 | 	mov	arg02, ##@LR__4445
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     24 5A B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     8C 05 90 AD |  if_e	jmp	#LR__0230
03a44     45 01 00 FF 
03a48     B6 15 06 F6 | 	mov	arg02, ##@LR__4446
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     0C 5A B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     7C 05 90 AD |  if_e	jmp	#LR__0231
03a5c     45 01 00 FF 
03a60     BC 15 06 F6 | 	mov	arg02, ##@LR__4447
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     F4 59 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     6C 05 90 AD |  if_e	jmp	#LR__0232
03a74     45 01 00 FF 
03a78     C0 15 06 F6 | 	mov	arg02, ##@LR__4448
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     DC 59 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     5C 05 90 AD |  if_e	jmp	#LR__0233
03a8c     45 01 00 FF 
03a90     C5 15 06 F6 | 	mov	arg02, ##@LR__4449
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     C4 59 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     4C 05 90 AD |  if_e	jmp	#LR__0234
03aa4     45 01 00 FF 
03aa8     C8 15 06 F6 | 	mov	arg02, ##@LR__4450
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     AC 59 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     3C 05 90 AD |  if_e	jmp	#LR__0235
03abc     45 01 00 FF 
03ac0     CB 15 06 F6 | 	mov	arg02, ##@LR__4451
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     94 59 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     2C 05 90 AD |  if_e	jmp	#LR__0236
03ad4     45 01 00 FF 
03ad8     CF 15 06 F6 | 	mov	arg02, ##@LR__4452
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     7C 59 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     1C 05 90 AD |  if_e	jmp	#LR__0237
03aec     45 01 00 FF 
03af0     D2 15 06 F6 | 	mov	arg02, ##@LR__4453
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     64 59 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     0C 05 90 AD |  if_e	jmp	#LR__0238
03b04     45 01 00 FF 
03b08     D6 15 06 F6 | 	mov	arg02, ##@LR__4454
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     4C 59 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     FC 04 90 AD |  if_e	jmp	#LR__0239
03b1c     45 01 00 FF 
03b20     DB 15 06 F6 | 	mov	arg02, ##@LR__4455
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     34 59 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     EC 04 90 AD |  if_e	jmp	#LR__0240
03b34     45 01 00 FF 
03b38     DE 15 06 F6 | 	mov	arg02, ##@LR__4456
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     1C 59 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     DC 04 90 AD |  if_e	jmp	#LR__0241
03b4c     45 01 00 FF 
03b50     E3 15 06 F6 | 	mov	arg02, ##@LR__4457
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     04 59 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     CC 04 90 AD |  if_e	jmp	#LR__0242
03b64     45 01 00 FF 
03b68     E7 15 06 F6 | 	mov	arg02, ##@LR__4458
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     EC 58 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     BC 04 90 AD |  if_e	jmp	#LR__0243
03b7c     45 01 00 FF 
03b80     EC 15 06 F6 | 	mov	arg02, ##@LR__4459
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     D4 58 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     AC 04 90 AD |  if_e	jmp	#LR__0244
03b94     45 01 00 FF 
03b98     EF 15 06 F6 | 	mov	arg02, ##@LR__4460
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     BC 58 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     9C 04 90 AD |  if_e	jmp	#LR__0245
03bac     45 01 00 FF 
03bb0     F5 15 06 F6 | 	mov	arg02, ##@LR__4461
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     A4 58 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     8C 04 90 AD |  if_e	jmp	#LR__0246
03bc4     45 01 00 FF 
03bc8     F9 15 06 F6 | 	mov	arg02, ##@LR__4462
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     8C 58 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     7C 04 90 AD |  if_e	jmp	#LR__0247
03bdc     45 01 00 FF 
03be0     FE 15 06 F6 | 	mov	arg02, ##@LR__4463
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     74 58 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     6C 04 90 AD |  if_e	jmp	#LR__0248
03bf4     46 01 00 FF 
03bf8     01 14 06 F6 | 	mov	arg02, ##@LR__4464
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     5C 58 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     5C 04 90 AD |  if_e	jmp	#LR__0249
03c0c     46 01 00 FF 
03c10     07 14 06 F6 | 	mov	arg02, ##@LR__4465
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     44 58 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     4C 04 90 AD |  if_e	jmp	#LR__0250
03c24     46 01 00 FF 
03c28     0A 14 06 F6 | 	mov	arg02, ##@LR__4466
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     2C 58 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     3C 04 90 AD |  if_e	jmp	#LR__0251
03c3c     46 01 00 FF 
03c40     13 14 06 F6 | 	mov	arg02, ##@LR__4467
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     14 58 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     2C 04 90 AD |  if_e	jmp	#LR__0252
03c54     46 01 00 FF 
03c58     19 14 06 F6 | 	mov	arg02, ##@LR__4468
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     FC 57 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     1C 04 90 AD |  if_e	jmp	#LR__0253
03c6c     46 01 00 FF 
03c70     1F 14 06 F6 | 	mov	arg02, ##@LR__4469
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     E4 57 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     0C 04 90 AD |  if_e	jmp	#LR__0254
03c84     46 01 00 FF 
03c88     28 14 06 F6 | 	mov	arg02, ##@LR__4470
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     CC 57 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     FC 03 90 AD |  if_e	jmp	#LR__0255
03c9c     46 01 00 FF 
03ca0     32 14 06 F6 | 	mov	arg02, ##@LR__4471
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     B4 57 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     EC 03 90 AD |  if_e	jmp	#LR__0256
03cb4     46 01 00 FF 
03cb8     3B 14 06 F6 | 	mov	arg02, ##@LR__4472
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     9C 57 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     DC 03 90 AD |  if_e	jmp	#LR__0257
03ccc     46 01 00 FF 
03cd0     40 14 06 F6 | 	mov	arg02, ##@LR__4473
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     84 57 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     CC 03 90 AD |  if_e	jmp	#LR__0258
03ce4     46 01 00 FF 
03ce8     45 14 06 F6 | 	mov	arg02, ##@LR__4474
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     6C 57 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     BC 03 90 AD |  if_e	jmp	#LR__0259
03cfc     46 01 00 FF 
03d00     49 14 06 F6 | 	mov	arg02, ##@LR__4475
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     54 57 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     AC 03 90 AD |  if_e	jmp	#LR__0260
03d14     46 01 00 FF 
03d18     52 14 06 F6 | 	mov	arg02, ##@LR__4476
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     3C 57 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     9C 03 90 AD |  if_e	jmp	#LR__0261
03d2c     46 01 00 FF 
03d30     57 14 06 F6 | 	mov	arg02, ##@LR__4477
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     24 57 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     8C 03 90 AD |  if_e	jmp	#LR__0262
03d44     46 01 00 FF 
03d48     5D 14 06 F6 | 	mov	arg02, ##@LR__4478
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     0C 57 B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     7C 03 90 AD |  if_e	jmp	#LR__0263
03d5c     46 01 00 FF 
03d60     5F 14 06 F6 | 	mov	arg02, ##@LR__4479
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     F4 56 B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     6C 03 90 AD |  if_e	jmp	#LR__0264
03d74     46 01 00 FF 
03d78     63 14 06 F6 | 	mov	arg02, ##@LR__4480
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     DC 56 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     5C 03 90 AD |  if_e	jmp	#LR__0265
03d8c     46 01 00 FF 
03d90     67 14 06 F6 | 	mov	arg02, ##@LR__4481
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     C4 56 B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     4C 03 90 AD |  if_e	jmp	#LR__0266
03da4     46 01 00 FF 
03da8     6C 14 06 F6 | 	mov	arg02, ##@LR__4482
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     AC 56 B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     3C 03 90 AD |  if_e	jmp	#LR__0267
03dbc     46 01 00 FF 
03dc0     6F 14 06 F6 | 	mov	arg02, ##@LR__4483
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     94 56 B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     2C 03 90 AD |  if_e	jmp	#LR__0268
03dd4     46 01 00 FF 
03dd8     75 14 06 F6 | 	mov	arg02, ##@LR__4484
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     7C 56 B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     1C 03 90 AD |  if_e	jmp	#LR__0269
03dec     46 01 00 FF 
03df0     79 14 06 F6 | 	mov	arg02, ##@LR__4485
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     64 56 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     0C 03 90 AD |  if_e	jmp	#LR__0270
03e04     46 01 00 FF 
03e08     80 14 06 F6 | 	mov	arg02, ##@LR__4486
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     4C 56 B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     FC 02 90 AD |  if_e	jmp	#LR__0271
03e1c     46 01 00 FF 
03e20     84 14 06 F6 | 	mov	arg02, ##@LR__4487
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     34 56 B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     EC 02 90 AD |  if_e	jmp	#LR__0272
03e34     46 01 00 FF 
03e38     89 14 06 F6 | 	mov	arg02, ##@LR__4488
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     1C 56 B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     DC 02 90 AD |  if_e	jmp	#LR__0273
03e4c     46 01 00 FF 
03e50     90 14 06 F6 | 	mov	arg02, ##@LR__4489
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     04 56 B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     CC 02 90 AD |  if_e	jmp	#LR__0274
03e64     46 01 00 FF 
03e68     9A 14 06 F6 | 	mov	arg02, ##@LR__4490
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     EC 55 B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     BC 02 90 AD |  if_e	jmp	#LR__0275
03e7c     46 01 00 FF 
03e80     9E 14 06 F6 | 	mov	arg02, ##@LR__4491
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     D4 55 B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     AC 02 90 AD |  if_e	jmp	#LR__0276
03e94     46 01 00 FF 
03e98     A6 14 06 F6 | 	mov	arg02, ##@LR__4492
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     BC 55 B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     9C 02 90 AD |  if_e	jmp	#LR__0277
03eac     46 01 00 FF 
03eb0     AA 14 06 F6 | 	mov	arg02, ##@LR__4493
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     A4 55 B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     8C 02 90 AD |  if_e	jmp	#LR__0278
03ec4     46 01 00 FF 
03ec8     B0 14 06 F6 | 	mov	arg02, ##@LR__4494
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     8C 55 B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     7C 02 90 AD |  if_e	jmp	#LR__0279
03edc     80 02 90 FD | 	jmp	#LR__0280
03ee0                 | LR__0200
03ee0     5C FA 05 F6 | 	mov	result1, #92
03ee4     7C 02 90 FD | 	jmp	#LR__0281
03ee8                 | LR__0201
03ee8     5C FA 05 F6 | 	mov	result1, #92
03eec     74 02 90 FD | 	jmp	#LR__0281
03ef0                 | LR__0202
03ef0     47 FA 05 F6 | 	mov	result1, #71
03ef4     6C 02 90 FD | 	jmp	#LR__0281
03ef8                 | LR__0203
03ef8     59 FA 05 F6 | 	mov	result1, #89
03efc     64 02 90 FD | 	jmp	#LR__0281
03f00                 | LR__0204
03f00     59 FA 05 F6 | 	mov	result1, #89
03f04     5C 02 90 FD | 	jmp	#LR__0281
03f08                 | LR__0205
03f08     45 FA 05 F6 | 	mov	result1, #69
03f0c     54 02 90 FD | 	jmp	#LR__0281
03f10                 | LR__0206
03f10     45 FA 05 F6 | 	mov	result1, #69
03f14     4C 02 90 FD | 	jmp	#LR__0281
03f18                 | LR__0207
03f18     69 FA 05 F6 | 	mov	result1, #105
03f1c     44 02 90 FD | 	jmp	#LR__0281
03f20                 | LR__0208
03f20     40 FA 05 F6 | 	mov	result1, #64
03f24     3C 02 90 FD | 	jmp	#LR__0281
03f28                 | LR__0209
03f28     49 FA 05 F6 | 	mov	result1, #73
03f2c     34 02 90 FD | 	jmp	#LR__0281
03f30                 | LR__0210
03f30     49 FA 05 F6 | 	mov	result1, #73
03f34     2C 02 90 FD | 	jmp	#LR__0281
03f38                 | LR__0211
03f38     50 FA 05 F6 | 	mov	result1, #80
03f3c     24 02 90 FD | 	jmp	#LR__0281
03f40                 | LR__0212
03f40     50 FA 05 F6 | 	mov	result1, #80
03f44     1C 02 90 FD | 	jmp	#LR__0281
03f48                 | LR__0213
03f48     68 FA 05 F6 | 	mov	result1, #104
03f4c     14 02 90 FD | 	jmp	#LR__0281
03f50                 | LR__0214
03f50     73 FA 05 F6 | 	mov	result1, #115
03f54     0C 02 90 FD | 	jmp	#LR__0281
03f58                 | LR__0215
03f58     74 FA 05 F6 | 	mov	result1, #116
03f5c     04 02 90 FD | 	jmp	#LR__0281
03f60                 | LR__0216
03f60     6C FA 05 F6 | 	mov	result1, #108
03f64     FC 01 90 FD | 	jmp	#LR__0281
03f68                 | LR__0217
03f68     6C FA 05 F6 | 	mov	result1, #108
03f6c     F4 01 90 FD | 	jmp	#LR__0281
03f70                 | LR__0218
03f70     89 FA 05 F6 | 	mov	result1, #137
03f74     EC 01 90 FD | 	jmp	#LR__0281
03f78                 | LR__0219
03f78     72 FA 05 F6 | 	mov	result1, #114
03f7c     E4 01 90 FD | 	jmp	#LR__0281
03f80                 | LR__0220
03f80     5D FA 05 F6 | 	mov	result1, #93
03f84     DC 01 90 FD | 	jmp	#LR__0281
03f88                 | LR__0221
03f88     43 FA 05 F6 | 	mov	result1, #67
03f8c     D4 01 90 FD | 	jmp	#LR__0281
03f90                 | LR__0222
03f90     43 FA 05 F6 | 	mov	result1, #67
03f94     CC 01 90 FD | 	jmp	#LR__0281
03f98                 | LR__0223
03f98     5A FA 05 F6 | 	mov	result1, #90
03f9c     C4 01 90 FD | 	jmp	#LR__0281
03fa0                 | LR__0224
03fa0     46 FA 05 F6 | 	mov	result1, #70
03fa4     BC 01 90 FD | 	jmp	#LR__0281
03fa8                 | LR__0225
03fa8     46 FA 05 F6 | 	mov	result1, #70
03fac     B4 01 90 FD | 	jmp	#LR__0281
03fb0                 | LR__0226
03fb0     71 FA 05 F6 | 	mov	result1, #113
03fb4     AC 01 90 FD | 	jmp	#LR__0281
03fb8                 | LR__0227
03fb8     71 FA 05 F6 | 	mov	result1, #113
03fbc     A4 01 90 FD | 	jmp	#LR__0281
03fc0                 | LR__0228
03fc0     60 FA 05 F6 | 	mov	result1, #96
03fc4     9C 01 90 FD | 	jmp	#LR__0281
03fc8                 | LR__0229
03fc8     4A FA 05 F6 | 	mov	result1, #74
03fcc     94 01 90 FD | 	jmp	#LR__0281
03fd0                 | LR__0230
03fd0     4A FA 05 F6 | 	mov	result1, #74
03fd4     8C 01 90 FD | 	jmp	#LR__0281
03fd8                 | LR__0231
03fd8     48 FA 05 F6 | 	mov	result1, #72
03fdc     84 01 90 FD | 	jmp	#LR__0281
03fe0                 | LR__0232
03fe0     48 FA 05 F6 | 	mov	result1, #72
03fe4     7C 01 90 FD | 	jmp	#LR__0281
03fe8                 | LR__0233
03fe8     4E FA 05 F6 | 	mov	result1, #78
03fec     74 01 90 FD | 	jmp	#LR__0281
03ff0                 | LR__0234
03ff0     4E FA 05 F6 | 	mov	result1, #78
03ff4     6C 01 90 FD | 	jmp	#LR__0281
03ff8                 | LR__0235
03ff8     58 FA 05 F6 | 	mov	result1, #88
03ffc     64 01 90 FD | 	jmp	#LR__0281
04000                 | LR__0236
04000     5F FA 05 F6 | 	mov	result1, #95
04004     5C 01 90 FD | 	jmp	#LR__0281
04008                 | LR__0237
04008     5F FA 05 F6 | 	mov	result1, #95
0400c     54 01 90 FD | 	jmp	#LR__0281
04010                 | LR__0238
04010     8A FA 05 F6 | 	mov	result1, #138
04014     4C 01 90 FD | 	jmp	#LR__0281
04018                 | LR__0239
04018     4C FA 05 F6 | 	mov	result1, #76
0401c     44 01 90 FD | 	jmp	#LR__0281
04020                 | LR__0240
04020     4C FA 05 F6 | 	mov	result1, #76
04024     3C 01 90 FD | 	jmp	#LR__0281
04028                 | LR__0241
04028     52 FA 05 F6 | 	mov	result1, #82
0402c     34 01 90 FD | 	jmp	#LR__0281
04030                 | LR__0242
04030     52 FA 05 F6 | 	mov	result1, #82
04034     2C 01 90 FD | 	jmp	#LR__0281
04038                 | LR__0243
04038     61 FA 05 F6 | 	mov	result1, #97
0403c     24 01 90 FD | 	jmp	#LR__0281
04040                 | LR__0244
04040     61 FA 05 F6 | 	mov	result1, #97
04044     1C 01 90 FD | 	jmp	#LR__0281
04048                 | LR__0245
04048     63 FA 05 F6 | 	mov	result1, #99
0404c     14 01 90 FD | 	jmp	#LR__0281
04050                 | LR__0246
04050     41 FA 05 F6 | 	mov	result1, #65
04054     0C 01 90 FD | 	jmp	#LR__0281
04058                 | LR__0247
04058     4B FA 05 F6 | 	mov	result1, #75
0405c     04 01 90 FD | 	jmp	#LR__0281
04060                 | LR__0248
04060     4B FA 05 F6 | 	mov	result1, #75
04064     FC 00 90 FD | 	jmp	#LR__0281
04068                 | LR__0249
04068     5E FA 05 F6 | 	mov	result1, #94
0406c     F4 00 90 FD | 	jmp	#LR__0281
04070                 | LR__0250
04070     5E FA 05 F6 | 	mov	result1, #94
04074     EC 00 90 FD | 	jmp	#LR__0281
04078                 | LR__0251
04078     7C FA 05 F6 | 	mov	result1, #124
0407c     E4 00 90 FD | 	jmp	#LR__0281
04080                 | LR__0252
04080     7E FA 05 F6 | 	mov	result1, #126
04084     DC 00 90 FD | 	jmp	#LR__0281
04088                 | LR__0253
04088     7D FA 05 F6 | 	mov	result1, #125
0408c     D4 00 90 FD | 	jmp	#LR__0281
04090                 | LR__0254
04090     7F FA 05 F6 | 	mov	result1, #127
04094     CC 00 90 FD | 	jmp	#LR__0281
04098                 | LR__0255
04098     80 FA 05 F6 | 	mov	result1, #128
0409c     C4 00 90 FD | 	jmp	#LR__0281
040a0                 | LR__0256
040a0     55 FA 05 F6 | 	mov	result1, #85
040a4     BC 00 90 FD | 	jmp	#LR__0281
040a8                 | LR__0257
040a8     75 FA 05 F6 | 	mov	result1, #117
040ac     B4 00 90 FD | 	jmp	#LR__0281
040b0                 | LR__0258
040b0     42 FA 05 F6 | 	mov	result1, #66
040b4     AC 00 90 FD | 	jmp	#LR__0281
040b8                 | LR__0259
040b8     42 FA 05 F6 | 	mov	result1, #66
040bc     A4 00 90 FD | 	jmp	#LR__0281
040c0                 | LR__0260
040c0     81 FA 05 F6 | 	mov	result1, #129
040c4     9C 00 90 FD | 	jmp	#LR__0281
040c8                 | LR__0261
040c8     81 FA 05 F6 | 	mov	result1, #129
040cc     94 00 90 FD | 	jmp	#LR__0281
040d0                 | LR__0262
040d0     44 FA 05 F6 | 	mov	result1, #68
040d4     8C 00 90 FD | 	jmp	#LR__0281
040d8                 | LR__0263
040d8     44 FA 05 F6 | 	mov	result1, #68
040dc     84 00 90 FD | 	jmp	#LR__0281
040e0                 | LR__0264
040e0     88 FA 05 F6 | 	mov	result1, #136
040e4     7C 00 90 FD | 	jmp	#LR__0281
040e8                 | LR__0265
040e8     4D FA 05 F6 | 	mov	result1, #77
040ec     74 00 90 FD | 	jmp	#LR__0281
040f0                 | LR__0266
040f0     51 FA 05 F6 | 	mov	result1, #81
040f4     6C 00 90 FD | 	jmp	#LR__0281
040f8                 | LR__0267
040f8     51 FA 05 F6 | 	mov	result1, #81
040fc     64 00 90 FD | 	jmp	#LR__0281
04100                 | LR__0268
04100     75 FA 05 F6 | 	mov	result1, #117
04104     5C 00 90 FD | 	jmp	#LR__0281
04108                 | LR__0269
04108     75 FA 05 F6 | 	mov	result1, #117
0410c     54 00 90 FD | 	jmp	#LR__0281
04110                 | LR__0270
04110     6D FA 05 F6 | 	mov	result1, #109
04114     4C 00 90 FD | 	jmp	#LR__0281
04118                 | LR__0271
04118     6D FA 05 F6 | 	mov	result1, #109
0411c     44 00 90 FD | 	jmp	#LR__0281
04120                 | LR__0272
04120     5B FA 05 F6 | 	mov	result1, #91
04124     3C 00 90 FD | 	jmp	#LR__0281
04128                 | LR__0273
04128     56 FA 05 F6 | 	mov	result1, #86
0412c     34 00 90 FD | 	jmp	#LR__0281
04130                 | LR__0274
04130     70 FA 05 F6 | 	mov	result1, #112
04134     2C 00 90 FD | 	jmp	#LR__0281
04138                 | LR__0275
04138     70 FA 05 F6 | 	mov	result1, #112
0413c     24 00 90 FD | 	jmp	#LR__0281
04140                 | LR__0276
04140     57 FA 05 F6 | 	mov	result1, #87
04144     1C 00 90 FD | 	jmp	#LR__0281
04148                 | LR__0277
04148     57 FA 05 F6 | 	mov	result1, #87
0414c     14 00 90 FD | 	jmp	#LR__0281
04150                 | LR__0278
04150     77 FA 05 F6 | 	mov	result1, #119
04154     0C 00 90 FD | 	jmp	#LR__0281
04158                 | LR__0279
04158     78 FA 05 F6 | 	mov	result1, #120
0415c     04 00 90 FD | 	jmp	#LR__0281
04160                 | LR__0280
04160     00 FA 05 F6 | 	mov	result1, #0
04164                 | LR__0281
04164     A7 F0 03 F6 | 	mov	ptra, fp
04168     B2 00 A0 FD | 	call	#popregs_
0416c                 | _iscommand_ret
0416c     2D 00 64 FD | 	ret
04170                 | 
04170                 | ' 
04170                 | ' function isfunction(s as string) as ubyte
04170                 | _isfunction
04170     01 4A 05 F6 | 	mov	COUNT_, #1
04174     A8 00 A0 FD | 	call	#pushregs_
04178                 | ' 
04178                 | ' select case s
04178     09 1F 02 F6 | 	mov	local01, arg01
0417c     46 01 00 FF 
04180     B6 14 06 F6 | 	mov	arg02, ##@LR__4495
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     D4 52 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     CC 01 90 AD |  if_e	jmp	#LR__0290
04194     46 01 00 FF 
04198     BB 14 06 F6 | 	mov	arg02, ##@LR__4496
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     BC 52 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     BC 01 90 AD |  if_e	jmp	#LR__0291
041ac     46 01 00 FF 
041b0     C0 14 06 F6 | 	mov	arg02, ##@LR__4497
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     A4 52 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     AC 01 90 AD |  if_e	jmp	#LR__0292
041c4     46 01 00 FF 
041c8     C4 14 06 F6 | 	mov	arg02, ##@LR__4498
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     8C 52 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     9C 01 90 AD |  if_e	jmp	#LR__0293
041dc     46 01 00 FF 
041e0     C8 14 06 F6 | 	mov	arg02, ##@LR__4499
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     74 52 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     8C 01 90 AD |  if_e	jmp	#LR__0294
041f4     46 01 00 FF 
041f8     D1 14 06 F6 | 	mov	arg02, ##@LR__4500
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     5C 52 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     7C 01 90 AD |  if_e	jmp	#LR__0295
0420c     46 01 00 FF 
04210     D5 14 06 F6 | 	mov	arg02, ##@LR__4501
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     44 52 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     6C 01 90 AD |  if_e	jmp	#LR__0296
04224     46 01 00 FF 
04228     DD 14 06 F6 | 	mov	arg02, ##@LR__4502
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     2C 52 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     5C 01 90 AD |  if_e	jmp	#LR__0297
0423c     46 01 00 FF 
04240     E4 14 06 F6 | 	mov	arg02, ##@LR__4503
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     14 52 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     4C 01 90 AD |  if_e	jmp	#LR__0298
04254     46 01 00 FF 
04258     EB 14 06 F6 | 	mov	arg02, ##@LR__4504
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     FC 51 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     3C 01 90 AD |  if_e	jmp	#LR__0299
0426c     46 01 00 FF 
04270     F2 14 06 F6 | 	mov	arg02, ##@LR__4505
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     E4 51 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     2C 01 90 AD |  if_e	jmp	#LR__0300
04284     46 01 00 FF 
04288     F9 14 06 F6 | 	mov	arg02, ##@LR__4506
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     CC 51 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     1C 01 90 AD |  if_e	jmp	#LR__0301
0429c     46 01 00 FF 
042a0     01 15 06 F6 | 	mov	arg02, ##@LR__4507
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     B4 51 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     0C 01 90 AD |  if_e	jmp	#LR__0302
042b4     46 01 00 FF 
042b8     07 15 06 F6 | 	mov	arg02, ##@LR__4508
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     9C 51 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     FC 00 90 AD |  if_e	jmp	#LR__0303
042cc     46 01 00 FF 
042d0     0D 15 06 F6 | 	mov	arg02, ##@LR__4509
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     84 51 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     EC 00 90 AD |  if_e	jmp	#LR__0304
042e4     46 01 00 FF 
042e8     11 15 06 F6 | 	mov	arg02, ##@LR__4510
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     6C 51 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     DC 00 90 AD |  if_e	jmp	#LR__0305
042fc     46 01 00 FF 
04300     15 15 06 F6 | 	mov	arg02, ##@LR__4511
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     54 51 B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     CC 00 90 AD |  if_e	jmp	#LR__0306
04314     46 01 00 FF 
04318     19 15 06 F6 | 	mov	arg02, ##@LR__4512
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     3C 51 B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     BC 00 90 AD |  if_e	jmp	#LR__0307
0432c     46 01 00 FF 
04330     1F 15 06 F6 | 	mov	arg02, ##@LR__4513
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     24 51 B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     AC 00 90 AD |  if_e	jmp	#LR__0308
04344     46 01 00 FF 
04348     25 15 06 F6 | 	mov	arg02, ##@LR__4514
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     0C 51 B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     9C 00 90 AD |  if_e	jmp	#LR__0309
0435c     A0 00 90 FD | 	jmp	#LR__0310
04360                 | LR__0290
04360     85 FA 05 F6 | 	mov	result1, #133
04364     9C 00 90 FD | 	jmp	#LR__0311
04368                 | LR__0291
04368     84 FA 05 F6 | 	mov	result1, #132
0436c     94 00 90 FD | 	jmp	#LR__0311
04370                 | LR__0292
04370     86 FA 05 F6 | 	mov	result1, #134
04374     8C 00 90 FD | 	jmp	#LR__0311
04378                 | LR__0293
04378     82 FA 05 F6 | 	mov	result1, #130
0437c     84 00 90 FD | 	jmp	#LR__0311
04380                 | LR__0294
04380     6F FA 05 F6 | 	mov	result1, #111
04384     7C 00 90 FD | 	jmp	#LR__0311
04388                 | LR__0295
04388     6F FA 05 F6 | 	mov	result1, #111
0438c     74 00 90 FD | 	jmp	#LR__0311
04390                 | LR__0296
04390     62 FA 05 F6 | 	mov	result1, #98
04394     6C 00 90 FD | 	jmp	#LR__0311
04398                 | LR__0297
04398     66 FA 05 F6 | 	mov	result1, #102
0439c     64 00 90 FD | 	jmp	#LR__0311
043a0                 | LR__0298
043a0     67 FA 05 F6 | 	mov	result1, #103
043a4     5C 00 90 FD | 	jmp	#LR__0311
043a8                 | LR__0299
043a8     64 FA 05 F6 | 	mov	result1, #100
043ac     54 00 90 FD | 	jmp	#LR__0311
043b0                 | LR__0300
043b0     65 FA 05 F6 | 	mov	result1, #101
043b4     4C 00 90 FD | 	jmp	#LR__0311
043b8                 | LR__0301
043b8     7B FA 05 F6 | 	mov	result1, #123
043bc     44 00 90 FD | 	jmp	#LR__0311
043c0                 | LR__0302
043c0     76 FA 05 F6 | 	mov	result1, #118
043c4     3C 00 90 FD | 	jmp	#LR__0311
043c8                 | LR__0303
043c8     7A FA 05 F6 | 	mov	result1, #122
043cc     34 00 90 FD | 	jmp	#LR__0311
043d0                 | LR__0304
043d0     54 FA 05 F6 | 	mov	result1, #84
043d4     2C 00 90 FD | 	jmp	#LR__0311
043d8                 | LR__0305
043d8     6B FA 05 F6 | 	mov	result1, #107
043dc     24 00 90 FD | 	jmp	#LR__0311
043e0                 | LR__0306
043e0     87 FA 05 F6 | 	mov	result1, #135
043e4     1C 00 90 FD | 	jmp	#LR__0311
043e8                 | LR__0307
043e8     6A FA 05 F6 | 	mov	result1, #106
043ec     14 00 90 FD | 	jmp	#LR__0311
043f0                 | LR__0308
043f0     6E FA 05 F6 | 	mov	result1, #110
043f4     0C 00 90 FD | 	jmp	#LR__0311
043f8                 | LR__0309
043f8     83 FA 05 F6 | 	mov	result1, #131
043fc     04 00 90 FD | 	jmp	#LR__0311
04400                 | LR__0310
04400     00 FA 05 F6 | 	mov	result1, #0
04404                 | LR__0311
04404     A7 F0 03 F6 | 	mov	ptra, fp
04408     B2 00 A0 FD | 	call	#popregs_
0440c                 | _isfunction_ret
0440c     2D 00 64 FD | 	ret
04410                 | 
04410                 | ' 
04410                 | ' function isname(s as string) as boolean
04410                 | _isname
04410     0D 4A 05 F6 | 	mov	COUNT_, #13
04414     A8 00 A0 FD | 	call	#pushregs_
04418     09 1F 02 F6 | 	mov	local01, arg01
0441c     09 21 02 F6 | 	mov	local02, arg01
04420     97 06 48 FB | 	callpa	#(@LR__0321-@LR__0320)>>2,fcache_load_ptr_
04424                 | LR__0320
04424     10 FB C9 FA | 	rdbyte	result1, local02 wz
04428     01 20 06 51 |  if_ne	add	local02, #1
0442c     F4 FF 9F 5D |  if_ne	jmp	#LR__0320
04430                 | LR__0321
04430     09 21 82 F1 | 	sub	local02, arg01
04434     10 FB 01 F6 | 	mov	result1, local02
04438     FD 22 0A F6 | 	mov	local03, result1 wz
0443c     00 FA 05 A6 |  if_e	mov	result1, #0
04440     34 02 90 AD |  if_e	jmp	#LR__0333
04444     0F 13 02 F6 | 	mov	arg01, local01
04448     01 14 06 F6 | 	mov	arg02, #1
0444c     01 16 06 F6 | 	mov	arg03, #1
04450     0C 71 B1 FD | 	call	#__system__Mid_S
04454     FD 24 02 F6 | 	mov	local04, result1
04458                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04458     46 01 00 FF 
0445c     29 15 06 F6 | 	mov	arg02, ##@LR__4515
04460     12 13 02 F6 | 	mov	arg01, local04
04464     F8 4F B1 FD | 	call	#__system___string_cmp
04468     00 FA 55 F2 | 	cmps	result1, #0 wc
0446c     18 00 90 CD |  if_b	jmp	#LR__0322
04470     46 01 00 FF 
04474     2B 15 06 F6 | 	mov	arg02, ##@LR__4516
04478     12 13 02 F6 | 	mov	arg01, local04
0447c     E0 4F B1 FD | 	call	#__system___string_cmp
04480     01 FA 55 F2 | 	cmps	result1, #1 wc
04484     1C 00 90 CD |  if_b	jmp	#LR__0323
04488                 | LR__0322
04488     46 01 00 FF 
0448c     2D 15 06 F6 | 	mov	arg02, ##@LR__4517
04490     12 13 02 F6 | 	mov	arg01, local04
04494     C8 4F B1 FD | 	call	#__system___string_cmp
04498     00 FA 0D F2 | 	cmp	result1, #0 wz
0449c     00 FA 05 56 |  if_ne	mov	result1, #0
044a0     D4 01 90 5D |  if_ne	jmp	#LR__0333
044a4                 | LR__0323
044a4                 | ' if l>2 then 
044a4     03 22 56 F2 | 	cmps	local03, #3 wc
044a8     C8 01 90 CD |  if_b	jmp	#LR__0332
044ac                 | '   for i=2 to l
044ac     02 26 06 F6 | 	mov	local05, #2
044b0     11 29 02 F6 | 	mov	local06, local03
044b4     01 28 06 F1 | 	add	local06, #1
044b8                 | LR__0324
044b8     14 27 52 F2 | 	cmps	local05, local06 wc
044bc     B4 01 90 3D |  if_ae	jmp	#LR__0331
044c0     0F 13 02 F6 | 	mov	arg01, local01
044c4     13 15 02 F6 | 	mov	arg02, local05
044c8     01 16 06 F6 | 	mov	arg03, #1
044cc     90 70 B1 FD | 	call	#__system__Mid_S
044d0     FD 24 02 F6 | 	mov	local04, result1
044d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
044d4     11 27 52 F2 | 	cmps	local05, local03 wc
044d8     9C 00 90 3D |  if_ae	jmp	#LR__0327
044dc     46 01 00 FF 
044e0     2F 15 06 F6 | 	mov	arg02, ##@LR__4518
044e4     12 13 02 F6 | 	mov	arg01, local04
044e8     74 4F B1 FD | 	call	#__system___string_cmp
044ec     00 FA 55 F2 | 	cmps	result1, #0 wc
044f0     18 00 90 CD |  if_b	jmp	#LR__0325
044f4     46 01 00 FF 
044f8     31 15 06 F6 | 	mov	arg02, ##@LR__4519
044fc     12 13 02 F6 | 	mov	arg01, local04
04500     5C 4F B1 FD | 	call	#__system___string_cmp
04504     01 FA 55 F2 | 	cmps	result1, #1 wc
04508     6C 00 90 CD |  if_b	jmp	#LR__0327
0450c                 | LR__0325
0450c     46 01 00 FF 
04510     33 15 06 F6 | 	mov	arg02, ##@LR__4520
04514     12 13 02 F6 | 	mov	arg01, local04
04518     44 4F B1 FD | 	call	#__system___string_cmp
0451c     00 FA 55 F2 | 	cmps	result1, #0 wc
04520     18 00 90 CD |  if_b	jmp	#LR__0326
04524     46 01 00 FF 
04528     35 15 06 F6 | 	mov	arg02, ##@LR__4521
0452c     12 13 02 F6 | 	mov	arg01, local04
04530     2C 4F B1 FD | 	call	#__system___string_cmp
04534     01 FA 55 F2 | 	cmps	result1, #1 wc
04538     3C 00 90 CD |  if_b	jmp	#LR__0327
0453c                 | LR__0326
0453c     46 01 00 FF 
04540     37 2B 06 F6 | 	mov	local07, ##@LR__4522
04544     12 13 02 F6 | 	mov	arg01, local04
04548     15 15 02 F6 | 	mov	arg02, local07
0454c     10 4F B1 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     20 00 90 AD |  if_e	jmp	#LR__0327
04558     46 01 00 FF 
0455c     39 2D 06 F6 | 	mov	local08, ##@LR__4523
04560     12 13 02 F6 | 	mov	arg01, local04
04564     16 15 02 F6 | 	mov	arg02, local08
04568     F4 4E B1 FD | 	call	#__system___string_cmp
0456c     FD 2E 0A F6 | 	mov	local09, result1 wz
04570     00 FA 05 56 |  if_ne	mov	result1, #0
04574     00 01 90 5D |  if_ne	jmp	#LR__0333
04578                 | LR__0327
04578                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04578     11 27 0A F2 | 	cmp	local05, local03 wz
0457c     EC 00 90 5D |  if_ne	jmp	#LR__0330
04580     46 01 00 FF 
04584     3B 31 06 F6 | 	mov	local10, ##@LR__4524
04588     12 13 02 F6 | 	mov	arg01, local04
0458c     18 15 02 F6 | 	mov	arg02, local10
04590     CC 4E B1 FD | 	call	#__system___string_cmp
04594     FD 32 02 F6 | 	mov	local11, result1
04598     00 32 56 F2 | 	cmps	local11, #0 wc
0459c     1C 00 90 CD |  if_b	jmp	#LR__0328
045a0     46 01 00 FF 
045a4     3D 15 06 F6 | 	mov	arg02, ##@LR__4525
045a8     12 13 02 F6 | 	mov	arg01, local04
045ac     B0 4E B1 FD | 	call	#__system___string_cmp
045b0     FD 30 02 F6 | 	mov	local10, result1
045b4     01 30 56 F2 | 	cmps	local10, #1 wc
045b8     B0 00 90 CD |  if_b	jmp	#LR__0330
045bc                 | LR__0328
045bc     46 01 00 FF 
045c0     3F 15 06 F6 | 	mov	arg02, ##@LR__4526
045c4     12 13 02 F6 | 	mov	arg01, local04
045c8     94 4E B1 FD | 	call	#__system___string_cmp
045cc     00 FA 55 F2 | 	cmps	result1, #0 wc
045d0     1C 00 90 CD |  if_b	jmp	#LR__0329
045d4     46 01 00 FF 
045d8     41 2F 06 F6 | 	mov	local09, ##@LR__4527
045dc     12 13 02 F6 | 	mov	arg01, local04
045e0     17 15 02 F6 | 	mov	arg02, local09
045e4     78 4E B1 FD | 	call	#__system___string_cmp
045e8     01 FA 55 F2 | 	cmps	result1, #1 wc
045ec     7C 00 90 CD |  if_b	jmp	#LR__0330
045f0                 | LR__0329
045f0     46 01 00 FF 
045f4     43 2F 06 F6 | 	mov	local09, ##@LR__4528
045f8     12 13 02 F6 | 	mov	arg01, local04
045fc     17 15 02 F6 | 	mov	arg02, local09
04600     5C 4E B1 FD | 	call	#__system___string_cmp
04604     00 FA 4D F2 | 	cmps	result1, #0 wz
04608     60 00 90 AD |  if_e	jmp	#LR__0330
0460c     46 01 00 FF 
04610     45 2D 06 F6 | 	mov	local08, ##@LR__4529
04614     12 13 02 F6 | 	mov	arg01, local04
04618     16 15 02 F6 | 	mov	arg02, local08
0461c     40 4E B1 FD | 	call	#__system___string_cmp
04620     FD 2E 0A F6 | 	mov	local09, result1 wz
04624     44 00 90 AD |  if_e	jmp	#LR__0330
04628     46 01 00 FF 
0462c     47 35 06 F6 | 	mov	local12, ##@LR__4530
04630     1A 2D 02 F6 | 	mov	local08, local12
04634     12 13 02 F6 | 	mov	arg01, local04
04638     16 15 02 F6 | 	mov	arg02, local08
0463c     20 4E B1 FD | 	call	#__system___string_cmp
04640     FD 2A 0A F6 | 	mov	local07, result1 wz
04644     24 00 90 AD |  if_e	jmp	#LR__0330
04648     46 01 00 FF 
0464c     49 37 06 F6 | 	mov	local13, ##@LR__4531
04650     1B 35 02 F6 | 	mov	local12, local13
04654     12 13 02 F6 | 	mov	arg01, local04
04658     1A 15 02 F6 | 	mov	arg02, local12
0465c     00 4E B1 FD | 	call	#__system___string_cmp
04660     FD 2C 0A F6 | 	mov	local08, result1 wz
04664     00 FA 05 56 |  if_ne	mov	result1, #0
04668     0C 00 90 5D |  if_ne	jmp	#LR__0333
0466c                 | LR__0330
0466c     01 26 06 F1 | 	add	local05, #1
04670     44 FE 9F FD | 	jmp	#LR__0324
04674                 | LR__0331
04674                 | LR__0332
04674                 | ' return true
04674     01 FA 65 F6 | 	neg	result1, #1
04678                 | LR__0333
04678     A7 F0 03 F6 | 	mov	ptra, fp
0467c     B2 00 A0 FD | 	call	#popregs_
04680                 | _isname_ret
04680     2D 00 64 FD | 	ret
04684                 | 
04684                 | ' 
04684                 | ' function isnum(s as string) as boolean
04684                 | _isnum
04684     0D 4A 05 F6 | 	mov	COUNT_, #13
04688     A8 00 A0 FD | 	call	#pushregs_
0468c     09 1F 02 F6 | 	mov	local01, arg01
04690     00 20 06 F6 | 	mov	local02, #0
04694     00 22 06 F6 | 	mov	local03, #0
04698     0F 13 02 F6 | 	mov	arg01, local01
0469c     09 25 02 F6 | 	mov	local04, arg01
046a0     97 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
046a4                 | LR__0340
046a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
046a8     01 24 06 51 |  if_ne	add	local04, #1
046ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
046b0                 | LR__0341
046b0     09 25 82 F1 | 	sub	local04, arg01
046b4     12 FB 01 F6 | 	mov	result1, local04
046b8     FD 26 0A F6 | 	mov	local05, result1 wz
046bc     00 FA 05 A6 |  if_e	mov	result1, #0
046c0     8C 02 90 AD |  if_e	jmp	#LR__0352
046c4     0F 13 02 F6 | 	mov	arg01, local01
046c8     01 14 06 F6 | 	mov	arg02, #1
046cc     01 16 06 F6 | 	mov	arg03, #1
046d0     8C 6E B1 FD | 	call	#__system__Mid_S
046d4     FD 28 02 F6 | 	mov	local06, result1
046d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
046d8     46 01 00 FF 
046dc     4B 15 06 F6 | 	mov	arg02, ##@LR__4532
046e0     14 13 02 F6 | 	mov	arg01, local06
046e4     78 4D B1 FD | 	call	#__system___string_cmp
046e8     00 FA 55 F2 | 	cmps	result1, #0 wc
046ec     18 00 90 CD |  if_b	jmp	#LR__0342
046f0     46 01 00 FF 
046f4     4D 15 06 F6 | 	mov	arg02, ##@LR__4533
046f8     14 13 02 F6 | 	mov	arg01, local06
046fc     60 4D B1 FD | 	call	#__system___string_cmp
04700     01 FA 55 F2 | 	cmps	result1, #1 wc
04704     78 00 90 CD |  if_b	jmp	#LR__0343
04708                 | LR__0342
04708     46 01 00 FF 
0470c     4F 15 06 F6 | 	mov	arg02, ##@LR__4534
04710     14 13 02 F6 | 	mov	arg01, local06
04714     48 4D B1 FD | 	call	#__system___string_cmp
04718     00 FA 0D F2 | 	cmp	result1, #0 wz
0471c     60 00 90 AD |  if_e	jmp	#LR__0343
04720     46 01 00 FF 
04724     51 2B 06 F6 | 	mov	local07, ##@LR__4535
04728     14 13 02 F6 | 	mov	arg01, local06
0472c     15 15 02 F6 | 	mov	arg02, local07
04730     2C 4D B1 FD | 	call	#__system___string_cmp
04734     00 FA 0D F2 | 	cmp	result1, #0 wz
04738     44 00 90 AD |  if_e	jmp	#LR__0343
0473c     46 01 00 FF 
04740     53 2D 06 F6 | 	mov	local08, ##@LR__4536
04744     16 2B 02 F6 | 	mov	local07, local08
04748     14 13 02 F6 | 	mov	arg01, local06
0474c     15 15 02 F6 | 	mov	arg02, local07
04750     0C 4D B1 FD | 	call	#__system___string_cmp
04754     00 FA 4D F2 | 	cmps	result1, #0 wz
04758     24 00 90 AD |  if_e	jmp	#LR__0343
0475c     46 01 00 FF 
04760     55 2F 06 F6 | 	mov	local09, ##@LR__4537
04764     17 2D 02 F6 | 	mov	local08, local09
04768     14 13 02 F6 | 	mov	arg01, local06
0476c     16 15 02 F6 | 	mov	arg02, local08
04770     EC 4C B1 FD | 	call	#__system___string_cmp
04774     FD 2A 0A F6 | 	mov	local07, result1 wz
04778     00 FA 05 56 |  if_ne	mov	result1, #0
0477c     D0 01 90 5D |  if_ne	jmp	#LR__0352
04780                 | LR__0343
04780                 | ' if m$="." then ds=1
04780     46 01 00 FF 
04784     57 15 06 F6 | 	mov	arg02, ##@LR__4538
04788     14 13 02 F6 | 	mov	arg01, local06
0478c     D0 4C B1 FD | 	call	#__system___string_cmp
04790     00 FA 0D F2 | 	cmp	result1, #0 wz
04794     01 20 06 A6 |  if_e	mov	local02, #1
04798                 | ' if l>1 then 
04798     02 26 56 F2 | 	cmps	local05, #2 wc
0479c     AC 01 90 CD |  if_b	jmp	#LR__0351
047a0                 | '   for i=2 to l
047a0     02 30 06 F6 | 	mov	local10, #2
047a4     13 33 02 F6 | 	mov	local11, local05
047a8     01 32 06 F1 | 	add	local11, #1
047ac                 | LR__0344
047ac     19 31 52 F2 | 	cmps	local10, local11 wc
047b0     98 01 90 3D |  if_ae	jmp	#LR__0350
047b4     0F 13 02 F6 | 	mov	arg01, local01
047b8     18 15 02 F6 | 	mov	arg02, local10
047bc     01 16 06 F6 | 	mov	arg03, #1
047c0     9C 6D B1 FD | 	call	#__system__Mid_S
047c4     FD 28 02 F6 | 	mov	local06, result1
047c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
047c8     46 01 00 FF 
047cc     59 15 06 F6 | 	mov	arg02, ##@LR__4539
047d0     14 13 02 F6 | 	mov	arg01, local06
047d4     88 4C B1 FD | 	call	#__system___string_cmp
047d8     00 FA 55 F2 | 	cmps	result1, #0 wc
047dc     18 00 90 CD |  if_b	jmp	#LR__0345
047e0     46 01 00 FF 
047e4     5B 15 06 F6 | 	mov	arg02, ##@LR__4540
047e8     14 13 02 F6 | 	mov	arg01, local06
047ec     70 4C B1 FD | 	call	#__system___string_cmp
047f0     01 FA 55 F2 | 	cmps	result1, #1 wc
047f4     98 00 90 CD |  if_b	jmp	#LR__0346
047f8                 | LR__0345
047f8     46 01 00 FF 
047fc     5D 15 06 F6 | 	mov	arg02, ##@LR__4541
04800     14 13 02 F6 | 	mov	arg01, local06
04804     58 4C B1 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     80 00 90 AD |  if_e	jmp	#LR__0346
04810     46 01 00 FF 
04814     5F 2B 06 F6 | 	mov	local07, ##@LR__4542
04818     14 13 02 F6 | 	mov	arg01, local06
0481c     15 15 02 F6 | 	mov	arg02, local07
04820     3C 4C B1 FD | 	call	#__system___string_cmp
04824     00 FA 4D F2 | 	cmps	result1, #0 wz
04828     64 00 90 AD |  if_e	jmp	#LR__0346
0482c     46 01 00 FF 
04830     61 2D 06 F6 | 	mov	local08, ##@LR__4543
04834     16 2B 02 F6 | 	mov	local07, local08
04838     14 13 02 F6 | 	mov	arg01, local06
0483c     15 15 02 F6 | 	mov	arg02, local07
04840     1C 4C B1 FD | 	call	#__system___string_cmp
04844     FD 34 0A F6 | 	mov	local12, result1 wz
04848     44 00 90 AD |  if_e	jmp	#LR__0346
0484c     46 01 00 FF 
04850     63 2F 06 F6 | 	mov	local09, ##@LR__4544
04854     17 2D 02 F6 | 	mov	local08, local09
04858     14 13 02 F6 | 	mov	arg01, local06
0485c     16 15 02 F6 | 	mov	arg02, local08
04860     FC 4B B1 FD | 	call	#__system___string_cmp
04864     FD 2A 0A F6 | 	mov	local07, result1 wz
04868     24 00 90 AD |  if_e	jmp	#LR__0346
0486c     46 01 00 FF 
04870     65 37 06 F6 | 	mov	local13, ##@LR__4545
04874     1B 2F 02 F6 | 	mov	local09, local13
04878     14 13 02 F6 | 	mov	arg01, local06
0487c     17 15 02 F6 | 	mov	arg02, local09
04880     DC 4B B1 FD | 	call	#__system___string_cmp
04884     FD 2C 0A F6 | 	mov	local08, result1 wz
04888     00 FA 05 56 |  if_ne	mov	result1, #0
0488c     C0 00 90 5D |  if_ne	jmp	#LR__0352
04890                 | LR__0346
04890                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04890     46 01 00 FF 
04894     67 15 06 F6 | 	mov	arg02, ##@LR__4546
04898     14 13 02 F6 | 	mov	arg01, local06
0489c     C0 4B B1 FD | 	call	#__system___string_cmp
048a0     00 FA 0D F2 | 	cmp	result1, #0 wz
048a4     38 00 90 5D |  if_ne	jmp	#LR__0347
048a8     18 15 02 F6 | 	mov	arg02, local10
048ac     01 14 86 F1 | 	sub	arg02, #1
048b0     0F 13 02 F6 | 	mov	arg01, local01
048b4     01 16 06 F6 | 	mov	arg03, #1
048b8     A4 6C B1 FD | 	call	#__system__Mid_S
048bc     FD 12 02 F6 | 	mov	arg01, result1
048c0     38 6E B1 FD | 	call	#__system__LCase_S
048c4     FD 12 02 F6 | 	mov	arg01, result1
048c8     46 01 00 FF 
048cc     69 15 06 F6 | 	mov	arg02, ##@LR__4547
048d0     8C 4B B1 FD | 	call	#__system___string_cmp
048d4     00 FA 0D F2 | 	cmp	result1, #0 wz
048d8     00 FA 05 56 |  if_ne	mov	result1, #0
048dc     70 00 90 5D |  if_ne	jmp	#LR__0352
048e0                 | LR__0347
048e0                 | '     if m$="." then ds+=1: if ds>1 then return false
048e0     46 01 00 FF 
048e4     6B 15 06 F6 | 	mov	arg02, ##@LR__4548
048e8     14 13 02 F6 | 	mov	arg01, local06
048ec     70 4B B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     01 20 06 A1 |  if_e	add	local02, #1
048f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
048fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
04900     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0352
04904                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
04904     46 01 00 FF 
04908     6D 15 06 F6 | 	mov	arg02, ##@LR__4549
0490c     14 13 02 F6 | 	mov	arg01, local06
04910     4C 4B B1 FD | 	call	#__system___string_cmp
04914     00 FA 4D F2 | 	cmps	result1, #0 wz
04918     18 00 90 AD |  if_e	jmp	#LR__0348
0491c     46 01 00 FF 
04920     6F 15 06 F6 | 	mov	arg02, ##@LR__4550
04924     14 13 02 F6 | 	mov	arg01, local06
04928     34 4B B1 FD | 	call	#__system___string_cmp
0492c     00 FA 4D F2 | 	cmps	result1, #0 wz
04930     10 00 90 5D |  if_ne	jmp	#LR__0349
04934                 | LR__0348
04934     01 22 06 F1 | 	add	local03, #1
04938     02 22 56 F2 | 	cmps	local03, #2 wc
0493c     00 FA 05 36 |  if_ae	mov	result1, #0
04940     0C 00 90 3D |  if_ae	jmp	#LR__0352
04944                 | LR__0349
04944     01 30 06 F1 | 	add	local10, #1
04948     60 FE 9F FD | 	jmp	#LR__0344
0494c                 | LR__0350
0494c                 | LR__0351
0494c                 | ' return true
0494c     01 FA 65 F6 | 	neg	result1, #1
04950                 | LR__0352
04950     A7 F0 03 F6 | 	mov	ptra, fp
04954     B2 00 A0 FD | 	call	#popregs_
04958                 | _isnum_ret
04958     2D 00 64 FD | 	ret
0495c                 | 
0495c                 | '   
0495c                 | ' function isint(s as string) as boolean
0495c                 | _isint
0495c     05 4A 05 F6 | 	mov	COUNT_, #5
04960     A8 00 A0 FD | 	call	#pushregs_
04964     09 1F 02 F6 | 	mov	local01, arg01
04968     09 21 02 F6 | 	mov	local02, arg01
0496c     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
04970                 | LR__0360
04970     10 FB C9 FA | 	rdbyte	result1, local02 wz
04974     01 20 06 51 |  if_ne	add	local02, #1
04978     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
0497c                 | LR__0361
0497c     09 21 82 F1 | 	sub	local02, arg01
04980     10 FB 01 F6 | 	mov	result1, local02
04984     FD 20 0A F6 | 	mov	local02, result1 wz
04988     00 FA 05 A6 |  if_e	mov	result1, #0
0498c     18 01 90 AD |  if_e	jmp	#LR__0369
04990     0F 13 02 F6 | 	mov	arg01, local01
04994     01 14 06 F6 | 	mov	arg02, #1
04998     01 16 06 F6 | 	mov	arg03, #1
0499c     C0 6B B1 FD | 	call	#__system__Mid_S
049a0     FD 22 02 F6 | 	mov	local03, result1
049a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
049a4     46 01 00 FF 
049a8     71 15 06 F6 | 	mov	arg02, ##@LR__4551
049ac     11 13 02 F6 | 	mov	arg01, local03
049b0     AC 4A B1 FD | 	call	#__system___string_cmp
049b4     00 FA 55 F2 | 	cmps	result1, #0 wc
049b8     18 00 90 CD |  if_b	jmp	#LR__0362
049bc     46 01 00 FF 
049c0     73 15 06 F6 | 	mov	arg02, ##@LR__4552
049c4     11 13 02 F6 | 	mov	arg01, local03
049c8     94 4A B1 FD | 	call	#__system___string_cmp
049cc     01 FA 55 F2 | 	cmps	result1, #1 wc
049d0     4C 00 90 CD |  if_b	jmp	#LR__0363
049d4                 | LR__0362
049d4     46 01 00 FF 
049d8     75 15 06 F6 | 	mov	arg02, ##@LR__4553
049dc     11 13 02 F6 | 	mov	arg01, local03
049e0     7C 4A B1 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     34 00 90 AD |  if_e	jmp	#LR__0363
049ec     46 01 00 FF 
049f0     77 15 06 F6 | 	mov	arg02, ##@LR__4554
049f4     11 13 02 F6 | 	mov	arg01, local03
049f8     64 4A B1 FD | 	call	#__system___string_cmp
049fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04a00     1C 00 90 AD |  if_e	jmp	#LR__0363
04a04     46 01 00 FF 
04a08     79 15 06 F6 | 	mov	arg02, ##@LR__4555
04a0c     11 13 02 F6 | 	mov	arg01, local03
04a10     4C 4A B1 FD | 	call	#__system___string_cmp
04a14     00 FA 0D F2 | 	cmp	result1, #0 wz
04a18     00 FA 05 56 |  if_ne	mov	result1, #0
04a1c     88 00 90 5D |  if_ne	jmp	#LR__0369
04a20                 | LR__0363
04a20                 | ' 
04a20                 | ' if l>1 then 
04a20     02 20 56 F2 | 	cmps	local02, #2 wc
04a24     7C 00 90 CD |  if_b	jmp	#LR__0368
04a28                 | '   for i=2 to l
04a28     02 24 06 F6 | 	mov	local04, #2
04a2c     10 27 02 F6 | 	mov	local05, local02
04a30     01 26 06 F1 | 	add	local05, #1
04a34                 | LR__0364
04a34     13 25 52 F2 | 	cmps	local04, local05 wc
04a38     68 00 90 3D |  if_ae	jmp	#LR__0367
04a3c     0F 13 02 F6 | 	mov	arg01, local01
04a40     12 15 02 F6 | 	mov	arg02, local04
04a44     01 16 06 F6 | 	mov	arg03, #1
04a48     14 6B B1 FD | 	call	#__system__Mid_S
04a4c     FD 22 02 F6 | 	mov	local03, result1
04a50                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04a50     46 01 00 FF 
04a54     7B 15 06 F6 | 	mov	arg02, ##@LR__4556
04a58     11 13 02 F6 | 	mov	arg01, local03
04a5c     00 4A B1 FD | 	call	#__system___string_cmp
04a60     00 FA 55 F2 | 	cmps	result1, #0 wc
04a64     18 00 90 CD |  if_b	jmp	#LR__0365
04a68     46 01 00 FF 
04a6c     7D 15 06 F6 | 	mov	arg02, ##@LR__4557
04a70     11 13 02 F6 | 	mov	arg01, local03
04a74     E8 49 B1 FD | 	call	#__system___string_cmp
04a78     01 FA 55 F2 | 	cmps	result1, #1 wc
04a7c     1C 00 90 CD |  if_b	jmp	#LR__0366
04a80                 | LR__0365
04a80     46 01 00 FF 
04a84     7F 15 06 F6 | 	mov	arg02, ##@LR__4558
04a88     11 13 02 F6 | 	mov	arg01, local03
04a8c     D0 49 B1 FD | 	call	#__system___string_cmp
04a90     00 FA 0D F2 | 	cmp	result1, #0 wz
04a94     00 FA 05 56 |  if_ne	mov	result1, #0
04a98     0C 00 90 5D |  if_ne	jmp	#LR__0369
04a9c                 | LR__0366
04a9c     01 24 06 F1 | 	add	local04, #1
04aa0     90 FF 9F FD | 	jmp	#LR__0364
04aa4                 | LR__0367
04aa4                 | LR__0368
04aa4                 | ' return true
04aa4     01 FA 65 F6 | 	neg	result1, #1
04aa8                 | LR__0369
04aa8     A7 F0 03 F6 | 	mov	ptra, fp
04aac     B2 00 A0 FD | 	call	#popregs_
04ab0                 | _isint_ret
04ab0     2D 00 64 FD | 	ret
04ab4                 | 
04ab4                 | ' 
04ab4                 | ' function isdec(s as string) as boolean
04ab4                 | _isdec
04ab4     05 4A 05 F6 | 	mov	COUNT_, #5
04ab8     A8 00 A0 FD | 	call	#pushregs_
04abc     09 1F 02 F6 | 	mov	local01, arg01
04ac0     09 21 02 F6 | 	mov	local02, arg01
04ac4     97 06 48 FB | 	callpa	#(@LR__0371-@LR__0370)>>2,fcache_load_ptr_
04ac8                 | LR__0370
04ac8     10 FB C9 FA | 	rdbyte	result1, local02 wz
04acc     01 20 06 51 |  if_ne	add	local02, #1
04ad0     F4 FF 9F 5D |  if_ne	jmp	#LR__0370
04ad4                 | LR__0371
04ad4     09 21 82 F1 | 	sub	local02, arg01
04ad8     10 FB 01 F6 | 	mov	result1, local02
04adc     FD 20 0A F6 | 	mov	local02, result1 wz
04ae0     00 FA 05 A6 |  if_e	mov	result1, #0
04ae4     80 00 90 AD |  if_e	jmp	#LR__0376
04ae8                 | ' for i=1 to l
04ae8     01 22 06 F6 | 	mov	local03, #1
04aec     10 25 02 F6 | 	mov	local04, local02
04af0     01 24 06 F1 | 	add	local04, #1
04af4                 | LR__0372
04af4     12 23 52 F2 | 	cmps	local03, local04 wc
04af8     68 00 90 3D |  if_ae	jmp	#LR__0375
04afc     0F 13 02 F6 | 	mov	arg01, local01
04b00     11 15 02 F6 | 	mov	arg02, local03
04b04     01 16 06 F6 | 	mov	arg03, #1
04b08     54 6A B1 FD | 	call	#__system__Mid_S
04b0c     FD 26 02 F6 | 	mov	local05, result1
04b10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04b10     46 01 00 FF 
04b14     81 15 06 F6 | 	mov	arg02, ##@LR__4559
04b18     13 13 02 F6 | 	mov	arg01, local05
04b1c     40 49 B1 FD | 	call	#__system___string_cmp
04b20     00 FA 55 F2 | 	cmps	result1, #0 wc
04b24     18 00 90 CD |  if_b	jmp	#LR__0373
04b28     46 01 00 FF 
04b2c     83 15 06 F6 | 	mov	arg02, ##@LR__4560
04b30     13 13 02 F6 | 	mov	arg01, local05
04b34     28 49 B1 FD | 	call	#__system___string_cmp
04b38     01 FA 55 F2 | 	cmps	result1, #1 wc
04b3c     1C 00 90 CD |  if_b	jmp	#LR__0374
04b40                 | LR__0373
04b40     46 01 00 FF 
04b44     85 15 06 F6 | 	mov	arg02, ##@LR__4561
04b48     13 13 02 F6 | 	mov	arg01, local05
04b4c     10 49 B1 FD | 	call	#__system___string_cmp
04b50     00 FA 0D F2 | 	cmp	result1, #0 wz
04b54     00 FA 05 56 |  if_ne	mov	result1, #0
04b58     0C 00 90 5D |  if_ne	jmp	#LR__0376
04b5c                 | LR__0374
04b5c     01 22 06 F1 | 	add	local03, #1
04b60     90 FF 9F FD | 	jmp	#LR__0372
04b64                 | LR__0375
04b64                 | ' return true
04b64     01 FA 65 F6 | 	neg	result1, #1
04b68                 | LR__0376
04b68     A7 F0 03 F6 | 	mov	ptra, fp
04b6c     B2 00 A0 FD | 	call	#popregs_
04b70                 | _isdec_ret
04b70     2D 00 64 FD | 	ret
04b74                 | 
04b74                 | ' 
04b74                 | ' function isstring(s as string) as boolean
04b74                 | _isstring
04b74     01 4A 05 F6 | 	mov	COUNT_, #1
04b78     A8 00 A0 FD | 	call	#pushregs_
04b7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04b7c     09 1F 02 F6 | 	mov	local01, arg01
04b80     01 14 06 F6 | 	mov	arg02, #1
04b84     C0 68 B1 FD | 	call	#__system__Left_S
04b88     FD 12 02 F6 | 	mov	arg01, result1
04b8c     46 01 00 FF 
04b90     87 15 06 F6 | 	mov	arg02, ##@LR__4562
04b94     C8 48 B1 FD | 	call	#__system___string_cmp
04b98     00 FA 4D F2 | 	cmps	result1, #0 wz
04b9c     28 00 90 5D |  if_ne	jmp	#LR__0380
04ba0     0F 13 02 F6 | 	mov	arg01, local01
04ba4     01 14 06 F6 | 	mov	arg02, #1
04ba8     24 69 B1 FD | 	call	#__system__Right_S
04bac     FD 12 02 F6 | 	mov	arg01, result1
04bb0     46 01 00 FF 
04bb4     89 15 06 F6 | 	mov	arg02, ##@LR__4563
04bb8     A4 48 B1 FD | 	call	#__system___string_cmp
04bbc     00 FA 4D F2 | 	cmps	result1, #0 wz
04bc0     01 FA 65 A6 |  if_e	neg	result1, #1
04bc4     04 00 90 AD |  if_e	jmp	#LR__0381
04bc8                 | LR__0380
04bc8     00 FA 05 F6 | 	mov	result1, #0
04bcc                 | LR__0381
04bcc     A7 F0 03 F6 | 	mov	ptra, fp
04bd0     B2 00 A0 FD | 	call	#popregs_
04bd4                 | _isstring_ret
04bd4     2D 00 64 FD | 	ret
04bd8                 | 
04bd8                 | ' 
04bd8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04bd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04bd8                 | ' 
04bd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04bd8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04bd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04bd8                 | ' 
04bd8                 | ' '----- delete a line from a program
04bd8                 | ' 
04bd8                 | ' function deleteline(aline as ulong) as integer
04bd8                 | _deleteline
04bd8     03 4A 05 F6 | 	mov	COUNT_, #3
04bdc     A8 00 A0 FD | 	call	#pushregs_
04be0     2C F0 07 F1 | 	add	ptra, #44
04be4     04 4E 05 F1 | 	add	fp, #4
04be8     A7 12 62 FC | 	wrlong	arg01, fp
04bec     69 00 00 FF 
04bf0     48 E5 05 F1 | 	add	objptr, ##54088
04bf4     F2 1E 02 FB | 	rdlong	local01, objptr
04bf8     0C 4E 05 F1 | 	add	fp, #12
04bfc     A7 1E 62 FC | 	wrlong	local01, fp
04c00     10 4E 85 F1 | 	sub	fp, #16
04c04                 | ' 
04c04                 | ' 
04c04                 | ' searchptr=programstart
04c04                 | ' 
04c04                 | ' do
04c04     5E 00 00 FF 
04c08     88 E4 85 F1 | 	sub	objptr, ##48264
04c0c                 | LR__0390
04c0c     14 4E 05 F1 | 	add	fp, #20
04c10     A7 12 02 F6 | 	mov	arg01, fp
04c14     04 4E 85 F1 | 	sub	fp, #4
04c18     A7 14 02 FB | 	rdlong	arg02, fp
04c1c     10 4E 85 F1 | 	sub	fp, #16
04c20     18 16 06 F6 | 	mov	arg03, #24
04c24     A4 3C B1 FD | 	call	#_psram_spin2_read1
04c28     10 4E 05 F1 | 	add	fp, #16
04c2c     A7 1E 02 FB | 	rdlong	local01, fp
04c30     08 4E 85 F1 | 	sub	fp, #8
04c34     A7 1E 62 FC | 	wrlong	local01, fp
04c38     20 4E 05 F1 | 	add	fp, #32
04c3c     A7 1E 02 FB | 	rdlong	local01, fp
04c40     18 4E 85 F1 | 	sub	fp, #24
04c44     A7 1E 62 FC | 	wrlong	local01, fp
04c48     04 4E 05 F1 | 	add	fp, #4
04c4c     A7 1E 02 FB | 	rdlong	local01, fp
04c50     10 4E 85 F1 | 	sub	fp, #16
04c54     A7 16 02 FB | 	rdlong	arg03, fp
04c58     04 4E 85 F1 | 	sub	fp, #4
04c5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04c60     28 4E 05 C1 |  if_b	add	fp, #40
04c64     A7 20 02 CB |  if_b	rdlong	local02, fp
04c68     28 4E 85 C1 |  if_b	sub	fp, #40
04c6c     FF FF 3F CF 
04c70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04c74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0390
04c78     0B 00 00 FF 
04c7c     C0 E4 85 F1 | 	sub	objptr, ##5824
04c80                 | ' 
04c80                 | ' 
04c80                 | ' if header(0)<>aline then return -1
04c80     14 4E 05 F1 | 	add	fp, #20
04c84     A7 1E 02 FB | 	rdlong	local01, fp
04c88     10 4E 85 F1 | 	sub	fp, #16
04c8c     A7 22 02 FB | 	rdlong	local03, fp
04c90     04 4E 85 F1 | 	sub	fp, #4
04c94     11 1F 0A F2 | 	cmp	local01, local03 wz
04c98     01 FA 65 56 |  if_ne	neg	result1, #1
04c9c     58 03 90 5D |  if_ne	jmp	#LR__0396
04ca0     08 4E 05 F1 | 	add	fp, #8
04ca4     A7 12 02 FB | 	rdlong	arg01, fp
04ca8     08 4E 85 F1 | 	sub	fp, #8
04cac     01 14 66 F6 | 	neg	arg02, #1
04cb0     01 16 06 F6 | 	mov	arg03, #1
04cb4     00 18 06 F6 | 	mov	arg04, #0
04cb8     0B 00 00 FF 
04cbc     C0 E4 05 F1 | 	add	objptr, ##5824
04cc0                 | '     return fill(addr, pattern, count, listPtr, 4)
04cc0     04 1A 06 F6 | 	mov	arg05, #4
04cc4     3C 3D B1 FD | 	call	#_psram_spin2_fill
04cc8     0B 00 00 FF 
04ccc     C0 E4 85 F1 | 	sub	objptr, ##5824
04cd0                 | ' 
04cd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04cd0                 | ' 
04cd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
04cd0     28 4E 05 F1 | 	add	fp, #40
04cd4     A7 1E 02 FB | 	rdlong	local01, fp
04cd8     28 4E 85 F1 | 	sub	fp, #40
04cdc     FF FF 3F FF 
04ce0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ce4     24 4E 05 A1 |  if_e	add	fp, #36
04ce8     A7 22 02 AB |  if_e	rdlong	local03, fp
04cec     24 4E 85 A1 |  if_e	sub	fp, #36
04cf0     FF FF 7F AF 
04cf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04cf8     9C 00 90 5D |  if_ne	jmp	#LR__0391
04cfc     69 00 00 FF 
04d00     48 E5 05 F1 | 	add	objptr, ##54088
04d04     F2 00 68 FC | 	wrlong	#0, objptr
04d08     07 00 00 FF 
04d0c     28 E4 85 F1 | 	sub	objptr, ##3624
04d10     F2 00 68 FC | 	wrlong	#0, objptr
04d14     07 00 00 FF 
04d18     2C E4 05 F1 | 	add	objptr, ##3628
04d1c     F2 00 68 FC | 	wrlong	#0, objptr
04d20     04 E4 05 F1 | 	add	objptr, #4
04d24     FF FF FF FF 
04d28     F2 FE 6B FC | 	wrlong	##-1, objptr
04d2c     00 12 06 F6 | 	mov	arg01, #0
04d30     01 14 66 F6 | 	neg	arg02, #1
04d34     01 16 06 F6 | 	mov	arg03, #1
04d38     00 18 06 F6 | 	mov	arg04, #0
04d3c     5E 00 00 FF 
04d40     90 E4 85 F1 | 	sub	objptr, ##48272
04d44                 | '     return fill(addr, pattern, count, listPtr, 4)
04d44     04 1A 06 F6 | 	mov	arg05, #4
04d48     B8 3C B1 FD | 	call	#_psram_spin2_fill
04d4c     10 12 06 F6 | 	mov	arg01, #16
04d50     01 14 66 F6 | 	neg	arg02, #1
04d54     01 16 06 F6 | 	mov	arg03, #1
04d58     00 18 06 F6 | 	mov	arg04, #0
04d5c                 | '     return fill(addr, pattern, count, listPtr, 4)
04d5c     04 1A 06 F6 | 	mov	arg05, #4
04d60     A0 3C B1 FD | 	call	#_psram_spin2_fill
04d64     14 12 06 F6 | 	mov	arg01, #20
04d68     1E 14 CE F9 | 	bmask	arg02, #30
04d6c     01 16 06 F6 | 	mov	arg03, #1
04d70     00 18 06 F6 | 	mov	arg04, #0
04d74                 | '     return fill(addr, pattern, count, listPtr, 4)
04d74     04 1A 06 F6 | 	mov	arg05, #4
04d78     88 3C B1 FD | 	call	#_psram_spin2_fill
04d7c     6D 00 00 FF 
04d80     B4 E5 05 F1 | 	add	objptr, ##56244
04d84     F2 00 68 FC | 	wrlong	#0, objptr
04d88     04 E4 05 F1 | 	add	objptr, #4
04d8c     F2 00 68 FC | 	wrlong	#0, objptr
04d90     79 00 00 FF 
04d94     78 E4 85 F1 | 	sub	objptr, ##62072
04d98                 | LR__0391
04d98                 | ' 
04d98                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04d98     28 4E 05 F1 | 	add	fp, #40
04d9c     A7 1E 02 FB | 	rdlong	local01, fp
04da0     28 4E 85 F1 | 	sub	fp, #40
04da4     FF FF 3F FF 
04da8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04dac     88 00 90 5D |  if_ne	jmp	#LR__0392
04db0     24 4E 05 F1 | 	add	fp, #36
04db4     A7 22 02 FB | 	rdlong	local03, fp
04db8     24 4E 85 F1 | 	sub	fp, #36
04dbc     FF FF 7F FF 
04dc0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04dc4     70 00 90 AD |  if_e	jmp	#LR__0392
04dc8     24 4E 05 F1 | 	add	fp, #36
04dcc     A7 12 02 FB | 	rdlong	arg01, fp
04dd0     24 4E 85 F1 | 	sub	fp, #36
04dd4     14 12 06 F1 | 	add	arg01, #20
04dd8     1E 14 CE F9 | 	bmask	arg02, #30
04ddc     01 16 06 F6 | 	mov	arg03, #1
04de0     00 18 06 F6 | 	mov	arg04, #0
04de4     0B 00 00 FF 
04de8     C0 E4 05 F1 | 	add	objptr, ##5824
04dec                 | '     return fill(addr, pattern, count, listPtr, 4)
04dec     04 1A 06 F6 | 	mov	arg05, #4
04df0     10 3C B1 FD | 	call	#_psram_spin2_fill
04df4     24 4E 05 F1 | 	add	fp, #36
04df8     A7 1E 02 FB | 	rdlong	local01, fp
04dfc     5E 00 00 FF 
04e00     90 E4 05 F1 | 	add	objptr, ##48272
04e04     F2 1E 62 FC | 	wrlong	local01, objptr
04e08     69 00 00 FF 
04e0c     50 E5 85 F1 | 	sub	objptr, ##54096
04e10     A7 12 02 FB | 	rdlong	arg01, fp
04e14     24 4E 85 F1 | 	sub	fp, #36
04e18     1C 12 B1 FD | 	call	#_pslpeek
04e1c     69 00 00 FF 
04e20     4C E5 05 F1 | 	add	objptr, ##54092
04e24     F2 FA 61 FC | 	wrlong	result1, objptr
04e28     69 00 00 FF 
04e2c     4C E5 85 F1 | 	sub	objptr, ##54092
04e30                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04e30                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04e30                 | '   lastline=pslpeek(header(4))
04e30                 | '   return 0
04e30     00 FA 05 F6 | 	mov	result1, #0
04e34     C0 01 90 FD | 	jmp	#LR__0396
04e38                 | LR__0392
04e38                 | ' 
04e38                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04e38     28 4E 05 F1 | 	add	fp, #40
04e3c     A7 1E 02 FB | 	rdlong	local01, fp
04e40     28 4E 85 F1 | 	sub	fp, #40
04e44     FF FF 3F FF 
04e48     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e4c     6C 00 90 AD |  if_e	jmp	#LR__0393
04e50     24 4E 05 F1 | 	add	fp, #36
04e54     A7 22 02 FB | 	rdlong	local03, fp
04e58     24 4E 85 F1 | 	sub	fp, #36
04e5c     FF FF 7F FF 
04e60     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04e64     54 00 90 5D |  if_ne	jmp	#LR__0393
04e68     28 4E 05 F1 | 	add	fp, #40
04e6c     A7 12 02 FB | 	rdlong	arg01, fp
04e70     28 4E 85 F1 | 	sub	fp, #40
04e74     10 12 06 F1 | 	add	arg01, #16
04e78     01 14 66 F6 | 	neg	arg02, #1
04e7c     01 16 06 F6 | 	mov	arg03, #1
04e80     00 18 06 F6 | 	mov	arg04, #0
04e84     0B 00 00 FF 
04e88     C0 E4 05 F1 | 	add	objptr, ##5824
04e8c                 | '     return fill(addr, pattern, count, listPtr, 4)
04e8c     04 1A 06 F6 | 	mov	arg05, #4
04e90     70 3B B1 FD | 	call	#_psram_spin2_fill
04e94     28 4E 05 F1 | 	add	fp, #40
04e98     A7 1E 02 FB | 	rdlong	local01, fp
04e9c     28 4E 85 F1 | 	sub	fp, #40
04ea0     5E 00 00 FF 
04ea4     88 E4 05 F1 | 	add	objptr, ##48264
04ea8     F2 1E 62 FC | 	wrlong	local01, objptr
04eac     69 00 00 FF 
04eb0     48 E5 85 F1 | 	sub	objptr, ##54088
04eb4                 | ' '   print "deleted first line"
04eb4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04eb4                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04eb4                 | '   return 0
04eb4     00 FA 05 F6 | 	mov	result1, #0
04eb8     3C 01 90 FD | 	jmp	#LR__0396
04ebc                 | LR__0393
04ebc                 | ' 
04ebc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04ebc     28 4E 05 F1 | 	add	fp, #40
04ec0     A7 1E 02 FB | 	rdlong	local01, fp
04ec4     28 4E 85 F1 | 	sub	fp, #40
04ec8     FF FF 3F FF 
04ecc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ed0     24 4E 05 51 |  if_ne	add	fp, #36
04ed4     A7 22 02 5B |  if_ne	rdlong	local03, fp
04ed8     24 4E 85 51 |  if_ne	sub	fp, #36
04edc     FF FF 7F 5F 
04ee0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04ee4     68 00 90 AD |  if_e	jmp	#LR__0394
04ee8     28 4E 05 F1 | 	add	fp, #40
04eec     A7 12 02 FB | 	rdlong	arg01, fp
04ef0     10 12 06 F1 | 	add	arg01, #16
04ef4     04 4E 85 F1 | 	sub	fp, #4
04ef8     A7 14 02 FB | 	rdlong	arg02, fp
04efc     24 4E 85 F1 | 	sub	fp, #36
04f00     01 16 06 F6 | 	mov	arg03, #1
04f04     00 18 06 F6 | 	mov	arg04, #0
04f08     0B 00 00 FF 
04f0c     C0 E4 05 F1 | 	add	objptr, ##5824
04f10                 | '     return fill(addr, pattern, count, listPtr, 4)
04f10     04 1A 06 F6 | 	mov	arg05, #4
04f14     EC 3A B1 FD | 	call	#_psram_spin2_fill
04f18     24 4E 05 F1 | 	add	fp, #36
04f1c     A7 12 02 FB | 	rdlong	arg01, fp
04f20     14 12 06 F1 | 	add	arg01, #20
04f24     04 4E 05 F1 | 	add	fp, #4
04f28     A7 14 02 FB | 	rdlong	arg02, fp
04f2c     28 4E 85 F1 | 	sub	fp, #40
04f30     01 16 06 F6 | 	mov	arg03, #1
04f34     00 18 06 F6 | 	mov	arg04, #0
04f38                 | '     return fill(addr, pattern, count, listPtr, 4)
04f38     04 1A 06 F6 | 	mov	arg05, #4
04f3c     C4 3A B1 FD | 	call	#_psram_spin2_fill
04f40     0B 00 00 FF 
04f44     C0 E4 85 F1 | 	sub	objptr, ##5824
04f48                 | '    pslpoke(header(5)+16,header(4))  
04f48                 | '    pslpoke(header(4)+20, header(5))
04f48                 | '    return 0
04f48     00 FA 05 F6 | 	mov	result1, #0
04f4c     A8 00 90 FD | 	jmp	#LR__0396
04f50                 | LR__0394
04f50     10 4E 05 F1 | 	add	fp, #16
04f54     A7 1E 02 FB | 	rdlong	local01, fp
04f58     08 4E 85 F1 | 	sub	fp, #8
04f5c     A7 1E 62 FC | 	wrlong	local01, fp
04f60     69 00 00 FF 
04f64     48 E5 05 F1 | 	add	objptr, ##54088
04f68     F2 1E 02 FB | 	rdlong	local01, objptr
04f6c     08 4E 05 F1 | 	add	fp, #8
04f70     A7 1E 62 FC | 	wrlong	local01, fp
04f74     10 4E 85 F1 | 	sub	fp, #16
04f78                 | ' 
04f78                 | ' 
04f78                 | ' 
04f78                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04f78                 | ' 
04f78                 | ' lineptr2=searchptr
04f78                 | ' searchptr=programstart
04f78                 | ' 
04f78                 | ' do
04f78     5E 00 00 FF 
04f7c     88 E4 85 F1 | 	sub	objptr, ##48264
04f80                 | LR__0395
04f80     14 4E 05 F1 | 	add	fp, #20
04f84     A7 12 02 F6 | 	mov	arg01, fp
04f88     04 4E 85 F1 | 	sub	fp, #4
04f8c     A7 14 02 FB | 	rdlong	arg02, fp
04f90     10 4E 85 F1 | 	sub	fp, #16
04f94     18 16 06 F6 | 	mov	arg03, #24
04f98     30 39 B1 FD | 	call	#_psram_spin2_read1
04f9c     10 4E 05 F1 | 	add	fp, #16
04fa0     A7 1E 02 FB | 	rdlong	local01, fp
04fa4     08 4E 85 F1 | 	sub	fp, #8
04fa8     A7 1E 62 FC | 	wrlong	local01, fp
04fac     20 4E 05 F1 | 	add	fp, #32
04fb0     A7 1E 02 FB | 	rdlong	local01, fp
04fb4     18 4E 85 F1 | 	sub	fp, #24
04fb8     A7 1E 62 FC | 	wrlong	local01, fp
04fbc     04 4E 05 F1 | 	add	fp, #4
04fc0     A7 1E 02 FB | 	rdlong	local01, fp
04fc4     10 4E 85 F1 | 	sub	fp, #16
04fc8     A7 22 02 FB | 	rdlong	local03, fp
04fcc     04 4E 85 F1 | 	sub	fp, #4
04fd0     11 1F 12 F2 | 	cmp	local01, local03 wc
04fd4     28 4E 05 C1 |  if_b	add	fp, #40
04fd8     A7 20 02 CB |  if_b	rdlong	local02, fp
04fdc     28 4E 85 C1 |  if_b	sub	fp, #40
04fe0     FF FF 3F CF 
04fe4     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04fe8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0395
04fec     0B 00 00 FF 
04ff0     C0 E4 85 F1 | 	sub	objptr, ##5824
04ff4     00 FA 05 F6 | 	mov	result1, #0
04ff8                 | LR__0396
04ff8     A7 F0 03 F6 | 	mov	ptra, fp
04ffc     B2 00 A0 FD | 	call	#popregs_
05000                 | _deleteline_ret
05000     2D 00 64 FD | 	ret
05004                 | 
05004                 | ' 
05004                 | ' sub save_line
05004                 | _save_line
05004     03 4A 05 F6 | 	mov	COUNT_, #3
05008     A8 00 A0 FD | 	call	#pushregs_
0500c     69 00 00 FF 
05010     40 E5 05 F1 | 	add	objptr, ##54080
05014     F2 16 02 FB | 	rdlong	arg03, objptr
05018     01 16 06 F1 | 	add	arg03, #1
0501c     05 00 00 FF 
05020     18 E4 85 F1 | 	sub	objptr, ##2584
05024     F2 14 02 FB | 	rdlong	arg02, objptr
05028     0B 15 02 FD | 	qmul	arg02, arg03
0502c     0E 00 00 FF 
05030     44 E4 85 F1 | 	sub	objptr, ##7236
05034     F2 12 02 FB | 	rdlong	arg01, objptr
05038     56 00 00 FF 
0503c     E4 E4 85 F1 | 	sub	objptr, ##44260
05040     09 1F 02 F6 | 	mov	local01, arg01
05044     18 20 62 FD | 	getqx	local02
05048     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
0504c                 | LR__0400
0504c     0F FB C9 FA | 	rdbyte	result1, local01 wz
05050     01 1E 06 51 |  if_ne	add	local01, #1
05054     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
05058                 | LR__0401
05058     09 1F 82 F1 | 	sub	local01, arg01
0505c     03 1E CE F7 | 	test	local01, #3 wz
05060     02 1E 46 50 |  if_ne	shr	local01, #2
05064     01 1E 06 51 |  if_ne	add	local01, #1
05068     02 1E 66 50 |  if_ne	shl	local01, #2
0506c     10 23 02 F6 | 	mov	local03, local02
05070     0F 23 02 F1 | 	add	local03, local01
05074     62 00 00 FF 
05078     20 E5 05 F1 | 	add	objptr, ##50464
0507c     F2 16 02 FB | 	rdlong	arg03, objptr
05080     10 17 02 F1 | 	add	arg03, local02
05084     04 00 00 FF 
05088     28 E4 05 F1 | 	add	objptr, ##2088
0508c     F2 16 62 FC | 	wrlong	arg03, objptr
05090     04 E4 05 F1 | 	add	objptr, #4
05094     F2 1E 62 FC | 	wrlong	local01, objptr
05098     0C E4 85 F1 | 	sub	objptr, #12
0509c     F2 12 02 F6 | 	mov	arg01, objptr
050a0     04 00 00 FF 
050a4     20 E4 85 F1 | 	sub	objptr, ##2080
050a8     F2 14 02 FB | 	rdlong	arg02, objptr
050ac     10 17 02 F6 | 	mov	arg03, local02
050b0     57 00 00 FF 
050b4     60 E4 85 F1 | 	sub	objptr, ##44640
050b8     AC 38 B1 FD | 	call	#_psram_spin2_write
050bc     4B 00 00 FF 
050c0     24 E4 05 F1 | 	add	objptr, ##38436
050c4     F2 12 02 FB | 	rdlong	arg01, objptr
050c8     0C 00 00 FF 
050cc     3C E4 05 F1 | 	add	objptr, ##6204
050d0     F2 14 02 FB | 	rdlong	arg02, objptr
050d4     10 15 02 F1 | 	add	arg02, local02
050d8     0F 17 02 F6 | 	mov	arg03, local01
050dc     57 00 00 FF 
050e0     60 E4 85 F1 | 	sub	objptr, ##44640
050e4     80 38 B1 FD | 	call	#_psram_spin2_write
050e8     57 00 00 FF 
050ec     60 E4 05 F1 | 	add	objptr, ##44640
050f0     F2 1E 02 FB | 	rdlong	local01, objptr
050f4     11 1F 02 F1 | 	add	local01, local03
050f8     F2 1E 62 FC | 	wrlong	local01, objptr
050fc     62 00 00 FF 
05100     20 E5 85 F1 | 	sub	objptr, ##50464
05104     A7 F0 03 F6 | 	mov	ptra, fp
05108     B2 00 A0 FD | 	call	#popregs_
0510c                 | _save_line_ret
0510c     2D 00 64 FD | 	ret
05110                 | 
05110                 | ' 
05110                 | ' 
05110                 | ' function insertline(aline as ulong) as integer
05110                 | _insertline
05110     02 4A 05 F6 | 	mov	COUNT_, #2
05114     A8 00 A0 FD | 	call	#pushregs_
05118     28 F0 07 F1 | 	add	ptra, #40
0511c     04 4E 05 F1 | 	add	fp, #4
05120     A7 12 62 FC | 	wrlong	arg01, fp
05124     69 00 00 FF 
05128     48 E5 05 F1 | 	add	objptr, ##54088
0512c     F2 1E 02 FB | 	rdlong	local01, objptr
05130     04 4E 05 F1 | 	add	fp, #4
05134     A7 1E 62 FC | 	wrlong	local01, fp
05138     08 4E 85 F1 | 	sub	fp, #8
0513c                 | ' 
0513c                 | ' do
0513c     5E 00 00 FF 
05140     88 E4 85 F1 | 	sub	objptr, ##48264
05144                 | LR__0410
05144     10 4E 05 F1 | 	add	fp, #16
05148     A7 12 02 F6 | 	mov	arg01, fp
0514c     08 4E 85 F1 | 	sub	fp, #8
05150     A7 14 02 FB | 	rdlong	arg02, fp
05154     08 4E 85 F1 | 	sub	fp, #8
05158     18 16 06 F6 | 	mov	arg03, #24
0515c     6C 37 B1 FD | 	call	#_psram_spin2_read1
05160     08 4E 05 F1 | 	add	fp, #8
05164     A7 1E 02 FB | 	rdlong	local01, fp
05168     04 4E 05 F1 | 	add	fp, #4
0516c     A7 1E 62 FC | 	wrlong	local01, fp
05170     18 4E 05 F1 | 	add	fp, #24
05174     A7 1E 02 FB | 	rdlong	local01, fp
05178     1C 4E 85 F1 | 	sub	fp, #28
0517c     A7 1E 62 FC | 	wrlong	local01, fp
05180     08 4E 05 F1 | 	add	fp, #8
05184     A7 1E 02 FB | 	rdlong	local01, fp
05188     0C 4E 85 F1 | 	sub	fp, #12
0518c     A7 16 02 FB | 	rdlong	arg03, fp
05190     04 4E 85 F1 | 	sub	fp, #4
05194     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05198     24 4E 05 C1 |  if_b	add	fp, #36
0519c     A7 20 02 CB |  if_b	rdlong	local02, fp
051a0     24 4E 85 C1 |  if_b	sub	fp, #36
051a4     FF FF 3F CF 
051a8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
051ac     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0410
051b0     0B 00 00 FF 
051b4     C0 E4 85 F1 | 	sub	objptr, ##5824
051b8                 | ' 
051b8                 | ' if header(0)=aline then return -1 ' delete it first
051b8     10 4E 05 F1 | 	add	fp, #16
051bc     A7 1E 02 FB | 	rdlong	local01, fp
051c0     0C 4E 85 F1 | 	sub	fp, #12
051c4     A7 20 02 FB | 	rdlong	local02, fp
051c8     04 4E 85 F1 | 	sub	fp, #4
051cc     10 1F 0A F2 | 	cmp	local01, local02 wz
051d0     01 FA 65 A6 |  if_e	neg	result1, #1
051d4     74 01 90 AD |  if_e	jmp	#LR__0413
051d8                 | ' if header(0)<aline then return -2 ' end of program reached
051d8     10 4E 05 F1 | 	add	fp, #16
051dc     A7 1E 02 FB | 	rdlong	local01, fp
051e0     0C 4E 85 F1 | 	sub	fp, #12
051e4     A7 16 02 FB | 	rdlong	arg03, fp
051e8     04 4E 85 F1 | 	sub	fp, #4
051ec     0B 1F 12 F2 | 	cmp	local01, arg03 wc
051f0     02 FA 65 C6 |  if_b	neg	result1, #2
051f4     54 01 90 CD |  if_b	jmp	#LR__0413
051f8                 | ' 
051f8                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
051f8     20 4E 05 F1 | 	add	fp, #32
051fc     A7 1E 02 FB | 	rdlong	local01, fp
05200     20 4E 85 F1 | 	sub	fp, #32
05204     FF FF 7F FF 
05208     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0520c     84 00 90 5D |  if_ne	jmp	#LR__0411
05210     62 00 00 FF 
05214     20 E5 05 F1 | 	add	objptr, ##50464
05218     F2 1E 02 FB | 	rdlong	local01, objptr
0521c     07 00 00 FF 
05220     28 E4 05 F1 | 	add	objptr, ##3624
05224     F2 1E 62 FC | 	wrlong	local01, objptr
05228     0C 4E 05 F1 | 	add	fp, #12
0522c     A7 12 02 FB | 	rdlong	arg01, fp
05230     0C 4E 85 F1 | 	sub	fp, #12
05234     10 12 06 F1 | 	add	arg01, #16
05238     07 00 00 FF 
0523c     28 E4 85 F1 | 	sub	objptr, ##3624
05240     F2 14 02 FB | 	rdlong	arg02, objptr
05244     01 16 06 F6 | 	mov	arg03, #1
05248     00 18 06 F6 | 	mov	arg04, #0
0524c     57 00 00 FF 
05250     60 E4 85 F1 | 	sub	objptr, ##44640
05254                 | '     return fill(addr, pattern, count, listPtr, 4)
05254     04 1A 06 F6 | 	mov	arg05, #4
05258     A8 37 B1 FD | 	call	#_psram_spin2_fill
0525c     5B 00 00 FF 
05260     90 E4 05 F1 | 	add	objptr, ##46736
05264     FF FF FF FF 
05268     F2 FE 6B FC | 	wrlong	##-1, objptr
0526c     0C 4E 05 F1 | 	add	fp, #12
05270     A7 1E 02 FB | 	rdlong	local01, fp
05274     0C 4E 85 F1 | 	sub	fp, #12
05278     04 E4 05 F1 | 	add	objptr, #4
0527c     F2 1E 62 FC | 	wrlong	local01, objptr
05280     66 00 00 FF 
05284     54 E5 85 F1 | 	sub	objptr, ##52564
05288     78 FD BF FD | 	call	#_save_line
0528c                 | '   programstart=programptr
0528c                 | '   pslpoke(lineptr2+16,programptr)
0528c                 | '   ucompiledline(4)=$FFFF_FFFF
0528c                 | '   ucompiledline(5)=lineptr2
0528c                 | '   save_line
0528c                 | '   return 0
0528c     00 FA 05 F6 | 	mov	result1, #0
05290     B8 00 90 FD | 	jmp	#LR__0413
05294                 | LR__0411
05294                 | ' 
05294                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05294     20 4E 05 F1 | 	add	fp, #32
05298     A7 1E 02 FB | 	rdlong	local01, fp
0529c     20 4E 85 F1 | 	sub	fp, #32
052a0     FF FF 7F FF 
052a4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
052a8     9C 00 90 AD |  if_e	jmp	#LR__0412
052ac     20 4E 05 F1 | 	add	fp, #32
052b0     A7 1E 02 FB | 	rdlong	local01, fp
052b4     66 00 00 FF 
052b8     50 E5 05 F1 | 	add	objptr, ##52560
052bc     F2 1E 62 FC | 	wrlong	local01, objptr
052c0     14 4E 85 F1 | 	sub	fp, #20
052c4     A7 1E 02 FB | 	rdlong	local01, fp
052c8     04 E4 05 F1 | 	add	objptr, #4
052cc     F2 1E 62 FC | 	wrlong	local01, objptr
052d0     A7 12 02 FB | 	rdlong	arg01, fp
052d4     0C 4E 85 F1 | 	sub	fp, #12
052d8     10 12 06 F1 | 	add	arg01, #16
052dc     04 00 00 FF 
052e0     34 E4 85 F1 | 	sub	objptr, ##2100
052e4     F2 14 02 FB | 	rdlong	arg02, objptr
052e8     01 16 06 F6 | 	mov	arg03, #1
052ec     00 18 06 F6 | 	mov	arg04, #0
052f0     57 00 00 FF 
052f4     60 E4 85 F1 | 	sub	objptr, ##44640
052f8                 | '     return fill(addr, pattern, count, listPtr, 4)
052f8     04 1A 06 F6 | 	mov	arg05, #4
052fc     04 37 B1 FD | 	call	#_psram_spin2_fill
05300     20 4E 05 F1 | 	add	fp, #32
05304     A7 12 02 FB | 	rdlong	arg01, fp
05308     20 4E 85 F1 | 	sub	fp, #32
0530c     14 12 06 F1 | 	add	arg01, #20
05310     57 00 00 FF 
05314     60 E4 05 F1 | 	add	objptr, ##44640
05318     F2 14 02 FB | 	rdlong	arg02, objptr
0531c     01 16 06 F6 | 	mov	arg03, #1
05320     00 18 06 F6 | 	mov	arg04, #0
05324     57 00 00 FF 
05328     60 E4 85 F1 | 	sub	objptr, ##44640
0532c                 | '     return fill(addr, pattern, count, listPtr, 4)
0532c     04 1A 06 F6 | 	mov	arg05, #4
05330     D0 36 B1 FD | 	call	#_psram_spin2_fill
05334     0B 00 00 FF 
05338     C0 E4 85 F1 | 	sub	objptr, ##5824
0533c     C4 FC BF FD | 	call	#_save_line
05340                 | '   ucompiledline(4)=header(4)
05340                 | '   ucompiledline(5)=lineptr2
05340                 | '   pslpoke(lineptr2+16,programptr)
05340                 | '   pslpoke(header(4)+20,programptr)
05340                 | '   save_line
05340                 | '   return 0
05340     00 FA 05 F6 | 	mov	result1, #0
05344     04 00 90 FD | 	jmp	#LR__0413
05348                 | LR__0412
05348     00 FA 05 F6 | 	mov	result1, #0
0534c                 | LR__0413
0534c     A7 F0 03 F6 | 	mov	ptra, fp
05350     B2 00 A0 FD | 	call	#popregs_
05354                 | _insertline_ret
05354     2D 00 64 FD | 	ret
05358                 | 
05358                 | ' 
05358                 | ' sub add_line_at_end(aline) 
05358                 | _add_line_at_end
05358     69 00 00 FF 
0535c     4C E5 05 F1 | 	add	objptr, ##54092
05360     F2 12 62 FC | 	wrlong	arg01, objptr
05364     04 E4 05 F1 | 	add	objptr, #4
05368     F2 14 02 FB | 	rdlong	arg02, objptr
0536c     03 00 00 FF 
05370     00 E4 85 F1 | 	sub	objptr, ##1536
05374     F2 14 62 FC | 	wrlong	arg02, objptr
05378     03 00 00 FF 
0537c     00 E4 05 F1 | 	add	objptr, ##1536
05380     F2 12 02 FB | 	rdlong	arg01, objptr
05384     14 12 06 F1 | 	add	arg01, #20
05388     07 00 00 FF 
0538c     30 E4 85 F1 | 	sub	objptr, ##3632
05390     F2 14 02 FB | 	rdlong	arg02, objptr
05394     01 16 06 F6 | 	mov	arg03, #1
05398     00 18 06 F6 | 	mov	arg04, #0
0539c     57 00 00 FF 
053a0     60 E4 85 F1 | 	sub	objptr, ##44640
053a4                 | '     return fill(addr, pattern, count, listPtr, 4)
053a4     04 1A 06 F6 | 	mov	arg05, #4
053a8     58 36 B1 FD | 	call	#_psram_spin2_fill
053ac     57 00 00 FF 
053b0     60 E4 05 F1 | 	add	objptr, ##44640
053b4     F2 14 02 FB | 	rdlong	arg02, objptr
053b8     07 00 00 FF 
053bc     30 E4 05 F1 | 	add	objptr, ##3632
053c0     F2 14 62 FC | 	wrlong	arg02, objptr
053c4     02 00 00 FF 
053c8     FC E5 85 F1 | 	sub	objptr, ##1532
053cc     FF FF BF FF 
053d0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
053d4                 | ' 
053d4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
053d4                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
053d4     04 00 00 FF 
053d8     34 E4 85 F1 | 	sub	objptr, ##2100
053dc     F2 14 0A FB | 	rdlong	arg02, objptr wz
053e0     62 00 00 FF 
053e4     20 E5 85 F1 | 	sub	objptr, ##50464
053e8     66 00 00 AF 
053ec     50 E5 05 A1 |  if_e	add	objptr, ##52560
053f0     FF FF FF AF 
053f4     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
053f8     66 00 00 AF 
053fc     50 E5 85 A1 |  if_e	sub	objptr, ##52560
05400     00 FC BF FD | 	call	#_save_line
05404     62 00 00 FF 
05408     20 E5 05 F1 | 	add	objptr, ##50464
0540c     F2 12 02 FB | 	rdlong	arg01, objptr
05410     01 14 66 F6 | 	neg	arg02, #1
05414     01 16 06 F6 | 	mov	arg03, #1
05418     00 18 06 F6 | 	mov	arg04, #0
0541c     57 00 00 FF 
05420     60 E4 85 F1 | 	sub	objptr, ##44640
05424                 | '     return fill(addr, pattern, count, listPtr, 4)
05424     04 1A 06 F6 | 	mov	arg05, #4
05428     D8 35 B1 FD | 	call	#_psram_spin2_fill
0542c     0B 00 00 FF 
05430     C0 E4 85 F1 | 	sub	objptr, ##5824
05434                 | _add_line_at_end_ret
05434     2D 00 64 FD | 	ret
05438                 | 
05438                 | ' 
05438                 | ' function compile_immediate(linetype as ulong) as integer
05438                 | _compile_immediate
05438     09 4A 05 F6 | 	mov	COUNT_, #9
0543c     A8 00 A0 FD | 	call	#pushregs_
05440                 | _compile_immediate_enter
05440     09 25 0A F6 | 	mov	local04, arg01 wz
05444     00 26 06 F6 | 	mov	local05, #0
05448     00 28 06 F6 | 	mov	local06, #0
0544c                 | ' 
0544c                 | ' ' linetype=cont+1, linetype=0 immediate
0544c                 | ' '  : 1: this is the first part of the line that will continue
0544c                 | ' ' 2 - this is the continuation of the line
0544c                 | ' ' 3 - this is the last continued line
0544c                 | ' ' 4 - this is the one and only part
0544c                 | ' 
0544c                 | ' err=0
0544c                 | ' cmd=0
0544c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
0544c     2C 00 90 5D |  if_ne	jmp	#LR__0420
05450     54 00 00 FF 
05454     D4 E4 05 F1 | 	add	objptr, ##43220
05458     F2 28 02 FB | 	rdlong	local06, objptr
0545c     02 00 00 FF 
05460     34 E4 05 F1 | 	add	objptr, ##1076
05464     F2 02 68 FC | 	wrlong	#1, objptr
05468     13 00 00 FF 
0546c     38 E4 05 F1 | 	add	objptr, ##9784
05470     F2 00 68 FC | 	wrlong	#0, objptr
05474     69 00 00 FF 
05478     40 E5 85 F1 | 	sub	objptr, ##54080
0547c                 | LR__0420
0547c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
0547c     02 24 0E F2 | 	cmp	local04, #2 wz
05480     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05484     54 00 00 AF 
05488     D4 E4 05 A1 |  if_e	add	objptr, ##43220
0548c     F2 28 02 AB |  if_e	rdlong	local06, objptr
05490     02 00 00 AF 
05494     34 E4 05 A1 |  if_e	add	objptr, ##1076
05498     F2 02 68 AC |  if_e	wrlong	#1, objptr
0549c     56 00 00 AF 
054a0     08 E5 85 A1 |  if_e	sub	objptr, ##44296
054a4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
054a4     04 24 0E F2 | 	cmp	local04, #4 wz
054a8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
054ac     2C 00 90 5D |  if_ne	jmp	#LR__0421
054b0     54 00 00 FF 
054b4     DC E4 05 F1 | 	add	objptr, ##43228
054b8     F2 28 02 FB | 	rdlong	local06, objptr
054bc     02 00 00 FF 
054c0     2C E4 05 F1 | 	add	objptr, ##1068
054c4     F2 04 68 FC | 	wrlong	#2, objptr
054c8     13 00 00 FF 
054cc     38 E4 05 F1 | 	add	objptr, ##9784
054d0     F2 04 68 FC | 	wrlong	#2, objptr
054d4     69 00 00 FF 
054d8     40 E5 85 F1 | 	sub	objptr, ##54080
054dc                 | LR__0421
054dc                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
054dc     05 24 0E F2 | 	cmp	local04, #5 wz
054e0     40 00 90 5D |  if_ne	jmp	#LR__0422
054e4     56 00 00 FF 
054e8     08 E5 05 F1 | 	add	objptr, ##44296
054ec     F2 2A 02 FB | 	rdlong	local07, objptr
054f0     15 29 02 F6 | 	mov	local06, local07
054f4     03 28 66 F0 | 	shl	local06, #3
054f8     02 00 00 FF 
054fc     38 E4 85 F1 | 	sub	objptr, ##1080
05500     F2 28 02 F1 | 	add	local06, objptr
05504     04 28 06 F1 | 	add	local06, #4
05508     14 29 02 FB | 	rdlong	local06, local06
0550c     01 2A 06 F1 | 	add	local07, #1
05510     02 00 00 FF 
05514     38 E4 05 F1 | 	add	objptr, ##1080
05518     F2 2A 62 FC | 	wrlong	local07, objptr
0551c     56 00 00 FF 
05520     08 E5 85 F1 | 	sub	objptr, ##44296
05524                 | LR__0422
05524     00 2C 06 F6 | 	mov	local08, #0
05528                 | ' vars=0
05528                 | ' 'print  "In compile_immediate cmd=:", cmd
05528                 | ' 451 select case cmd
05528     5C 28 0E F2 | 	cmp	local06, #92 wz
0552c     AC 01 90 AD |  if_e	jmp	#LR__0423
05530     47 28 0E F2 | 	cmp	local06, #71 wz
05534     B0 01 90 AD |  if_e	jmp	#LR__0424
05538     59 28 0E F2 | 	cmp	local06, #89 wz
0553c     B4 01 90 AD |  if_e	jmp	#LR__0425
05540     45 28 0E F2 | 	cmp	local06, #69 wz
05544     B8 01 90 AD |  if_e	jmp	#LR__0426
05548     69 28 0E F2 | 	cmp	local06, #105 wz
0554c     BC 01 90 AD |  if_e	jmp	#LR__0427
05550     40 28 0E F2 | 	cmp	local06, #64 wz
05554     AC 03 90 AD |  if_e	jmp	#LR__0471
05558     49 28 0E F2 | 	cmp	local06, #73 wz
0555c     B8 01 90 AD |  if_e	jmp	#LR__0428
05560     50 28 0E F2 | 	cmp	local06, #80 wz
05564     BC 01 90 AD |  if_e	jmp	#LR__0429
05568     68 28 0E F2 | 	cmp	local06, #104 wz
0556c     C0 01 90 AD |  if_e	jmp	#LR__0430
05570     74 28 0E F2 | 	cmp	local06, #116 wz
05574     C4 01 90 AD |  if_e	jmp	#LR__0431
05578     73 28 0E F2 | 	cmp	local06, #115 wz
0557c     C8 01 90 AD |  if_e	jmp	#LR__0432
05580     6C 28 0E F2 | 	cmp	local06, #108 wz
05584     CC 01 90 AD |  if_e	jmp	#LR__0433
05588     89 28 0E F2 | 	cmp	local06, #137 wz
0558c     74 03 90 AD |  if_e	jmp	#LR__0471
05590     72 28 0E F2 | 	cmp	local06, #114 wz
05594     C8 01 90 AD |  if_e	jmp	#LR__0434
05598     5D 28 0E F2 | 	cmp	local06, #93 wz
0559c     64 03 90 AD |  if_e	jmp	#LR__0471
055a0     43 28 0E F2 | 	cmp	local06, #67 wz
055a4     C0 01 90 AD |  if_e	jmp	#LR__0435
055a8     5A 28 0E F2 | 	cmp	local06, #90 wz
055ac     C4 01 90 AD |  if_e	jmp	#LR__0436
055b0     4E 28 0E F2 | 	cmp	local06, #78 wz
055b4     C4 01 90 AD |  if_e	jmp	#LR__0437
055b8     46 28 0E F2 | 	cmp	local06, #70 wz
055bc     D8 01 90 AD |  if_e	jmp	#LR__0439
055c0     71 28 0E F2 | 	cmp	local06, #113 wz
055c4     DC 01 90 AD |  if_e	jmp	#LR__0440
055c8     60 28 0E F2 | 	cmp	local06, #96 wz
055cc     E0 01 90 AD |  if_e	jmp	#LR__0441
055d0     4A 28 0E F2 | 	cmp	local06, #74 wz
055d4     E4 01 90 AD |  if_e	jmp	#LR__0442
055d8     48 28 0E F2 | 	cmp	local06, #72 wz
055dc     E4 01 90 AD |  if_e	jmp	#LR__0443
055e0     58 28 0E F2 | 	cmp	local06, #88 wz
055e4     E8 01 90 AD |  if_e	jmp	#LR__0444
055e8     5F 28 0E F2 | 	cmp	local06, #95 wz
055ec     E8 01 90 AD |  if_e	jmp	#LR__0445
055f0     8A 28 0E F2 | 	cmp	local06, #138 wz
055f4     EC 01 90 AD |  if_e	jmp	#LR__0446
055f8     4C 28 0E F2 | 	cmp	local06, #76 wz
055fc     F0 01 90 AD |  if_e	jmp	#LR__0447
05600     52 28 0E F2 | 	cmp	local06, #82 wz
05604     F4 01 90 AD |  if_e	jmp	#LR__0448
05608     61 28 0E F2 | 	cmp	local06, #97 wz
0560c     F8 01 90 AD |  if_e	jmp	#LR__0449
05610     63 28 0E F2 | 	cmp	local06, #99 wz
05614     FC 01 90 AD |  if_e	jmp	#LR__0450
05618     41 28 0E F2 | 	cmp	local06, #65 wz
0561c     E4 02 90 AD |  if_e	jmp	#LR__0471
05620     4B 28 0E F2 | 	cmp	local06, #75 wz
05624     F8 01 90 AD |  if_e	jmp	#LR__0451
05628     5E 28 0E F2 | 	cmp	local06, #94 wz
0562c     F8 01 90 AD |  if_e	jmp	#LR__0452
05630     7C 28 0E F2 | 	cmp	local06, #124 wz
05634     FC 01 90 AD |  if_e	jmp	#LR__0453
05638     7D 28 0E F2 | 	cmp	local06, #125 wz
0563c     00 02 90 AD |  if_e	jmp	#LR__0454
05640     7E 28 0E F2 | 	cmp	local06, #126 wz
05644     04 02 90 AD |  if_e	jmp	#LR__0455
05648     7F 28 0E F2 | 	cmp	local06, #127 wz
0564c     08 02 90 AD |  if_e	jmp	#LR__0456
05650     80 28 0E F2 | 	cmp	local06, #128 wz
05654     0C 02 90 AD |  if_e	jmp	#LR__0457
05658     55 28 0E F2 | 	cmp	local06, #85 wz
0565c     10 02 90 AD |  if_e	jmp	#LR__0458
05660     75 28 0E F2 | 	cmp	local06, #117 wz
05664     14 02 90 AD |  if_e	jmp	#LR__0459
05668     42 28 0E F2 | 	cmp	local06, #66 wz
0566c     18 02 90 AD |  if_e	jmp	#LR__0460
05670     81 28 0E F2 | 	cmp	local06, #129 wz
05674     1C 02 90 AD |  if_e	jmp	#LR__0461
05678     44 28 0E F2 | 	cmp	local06, #68 wz
0567c     20 02 90 AD |  if_e	jmp	#LR__0462
05680     88 28 0E F2 | 	cmp	local06, #136 wz
05684     4D 28 0E 52 |  if_ne	cmp	local06, #77 wz
05688     78 02 90 AD |  if_e	jmp	#LR__0471
0568c     51 28 0E F2 | 	cmp	local06, #81 wz
05690     18 02 90 AD |  if_e	jmp	#LR__0463
05694     6D 28 0E F2 | 	cmp	local06, #109 wz
05698     1C 02 90 AD |  if_e	jmp	#LR__0464
0569c     70 28 0E F2 | 	cmp	local06, #112 wz
056a0     60 02 90 AD |  if_e	jmp	#LR__0471
056a4     56 28 0E F2 | 	cmp	local06, #86 wz
056a8     18 02 90 AD |  if_e	jmp	#LR__0465
056ac     57 28 0E F2 | 	cmp	local06, #87 wz
056b0     50 02 90 AD |  if_e	jmp	#LR__0471
056b4     79 28 0E F2 | 	cmp	local06, #121 wz
056b8     14 02 90 AD |  if_e	jmp	#LR__0466
056bc     77 28 0E F2 | 	cmp	local06, #119 wz
056c0     18 02 90 AD |  if_e	jmp	#LR__0467
056c4     78 28 0E F2 | 	cmp	local06, #120 wz
056c8     1C 02 90 AD |  if_e	jmp	#LR__0468
056cc     01 00 00 FF 
056d0     04 28 0E F2 | 	cmp	local06, ##516 wz
056d4     1C 02 90 AD |  if_e	jmp	#LR__0469
056d8     20 02 90 FD | 	jmp	#LR__0470
056dc                 | LR__0423
056dc     5C 0B B0 FD | 	call	#_compile_fun_2p
056e0     FD 26 02 F6 | 	mov	local05, result1
056e4     1C 02 90 FD | 	jmp	#LR__0471
056e8                 | LR__0424
056e8     90 0C B0 FD | 	call	#_compile_fun_4p
056ec     FD 26 02 F6 | 	mov	local05, result1
056f0     10 02 90 FD | 	jmp	#LR__0471
056f4                 | LR__0425
056f4     90 2D B0 FD | 	call	#_expr
056f8                 | ' expr()
056f8                 | ' return 0
056f8     00 26 06 F6 | 	mov	local05, #0
056fc     04 02 90 FD | 	jmp	#LR__0471
05700                 | LR__0426
05700     AC 0B B0 FD | 	call	#_compile_fun_3p
05704     FD 26 02 F6 | 	mov	local05, result1
05708     F8 01 90 FD | 	jmp	#LR__0471
0570c                 | LR__0427
0570c     78 2D B0 FD | 	call	#_expr
05710                 | ' expr()
05710                 | ' return 0
05710     00 26 06 F6 | 	mov	local05, #0
05714     EC 01 90 FD | 	jmp	#LR__0471
05718                 | LR__0428
05718     6C 2D B0 FD | 	call	#_expr
0571c                 | ' expr()
0571c                 | ' return 0
0571c     00 26 06 F6 | 	mov	local05, #0
05720     E0 01 90 FD | 	jmp	#LR__0471
05724                 | LR__0429
05724     F4 0E B0 FD | 	call	#_compile_fun_varp
05728     FD 2C 02 F6 | 	mov	local08, result1
0572c     D4 01 90 FD | 	jmp	#LR__0471
05730                 | LR__0430
05730     54 2D B0 FD | 	call	#_expr
05734                 | ' expr()
05734                 | ' return 0
05734     00 26 06 F6 | 	mov	local05, #0
05738     C8 01 90 FD | 	jmp	#LR__0471
0573c                 | LR__0431
0573c     DC 0E B0 FD | 	call	#_compile_fun_varp
05740     FD 2C 02 F6 | 	mov	local08, result1
05744     BC 01 90 FD | 	jmp	#LR__0471
05748                 | LR__0432
05748     D0 0E B0 FD | 	call	#_compile_fun_varp
0574c     FD 2C 02 F6 | 	mov	local08, result1
05750     B0 01 90 FD | 	jmp	#LR__0471
05754                 | LR__0433
05754     48 0D B0 FD | 	call	#_compile_fun_5p
05758     FD 26 02 F6 | 	mov	local05, result1
0575c     A4 01 90 FD | 	jmp	#LR__0471
05760                 | LR__0434
05760     A4 18 B0 FD | 	call	#_compile_dim
05764     58 02 90 FD | 	jmp	#LR__0472
05768                 | LR__0435
05768     D0 0A B0 FD | 	call	#_compile_fun_2p
0576c     FD 26 02 F6 | 	mov	local05, result1
05770     90 01 90 FD | 	jmp	#LR__0471
05774                 | LR__0436
05774     68 17 B0 FD | 	call	#_compile_else
05778     44 02 90 FD | 	jmp	#LR__0472
0577c                 | LR__0437
0577c     01 24 16 F2 | 	cmp	local04, #1 wc
05780     08 00 90 CD |  if_b	jmp	#LR__0438
05784     A0 29 B0 FD | 	call	#_compile_goto
05788     34 02 90 FD | 	jmp	#LR__0472
0578c                 | LR__0438
0578c     19 12 06 F6 | 	mov	arg01, #25
05790     E8 06 B1 FD | 	call	#_printerror
05794     28 02 90 FD | 	jmp	#LR__0472
05798                 | LR__0439
05798     14 0B B0 FD | 	call	#_compile_fun_3p
0579c     FD 26 02 F6 | 	mov	local05, result1
057a0     60 01 90 FD | 	jmp	#LR__0471
057a4                 | LR__0440
057a4     D4 0B B0 FD | 	call	#_compile_fun_4p
057a8     FD 26 02 F6 | 	mov	local05, result1
057ac     54 01 90 FD | 	jmp	#LR__0471
057b0                 | LR__0441
057b0     D4 2C B0 FD | 	call	#_expr
057b4                 | ' expr()
057b4                 | ' return 0
057b4     00 26 06 F6 | 	mov	local05, #0
057b8     48 01 90 FD | 	jmp	#LR__0471
057bc                 | LR__0442
057bc     90 1F B0 FD | 	call	#_compile_for
057c0     FC 01 90 FD | 	jmp	#LR__0472
057c4                 | LR__0443
057c4     B4 0B B0 FD | 	call	#_compile_fun_4p
057c8     FD 26 02 F6 | 	mov	local05, result1
057cc     34 01 90 FD | 	jmp	#LR__0471
057d0                 | LR__0444
057d0     CC 15 B0 FD | 	call	#_compile_if
057d4     E8 01 90 FD | 	jmp	#LR__0472
057d8                 | LR__0445
057d8     AC 2C B0 FD | 	call	#_expr
057dc                 | ' expr()
057dc                 | ' return 0
057dc     00 26 06 F6 | 	mov	local05, #0
057e0     20 01 90 FD | 	jmp	#LR__0471
057e4                 | LR__0446
057e4     A0 2C B0 FD | 	call	#_expr
057e8                 | ' expr()
057e8                 | ' return 0
057e8     00 26 06 F6 | 	mov	local05, #0
057ec     14 01 90 FD | 	jmp	#LR__0471
057f0                 | LR__0447
057f0     28 0E B0 FD | 	call	#_compile_fun_varp
057f4     FD 2C 02 F6 | 	mov	local08, result1
057f8     08 01 90 FD | 	jmp	#LR__0471
057fc                 | LR__0448
057fc     1C 0E B0 FD | 	call	#_compile_fun_varp
05800     FD 2C 02 F6 | 	mov	local08, result1
05804     FC 00 90 FD | 	jmp	#LR__0471
05808                 | LR__0449
05808     7C 2C B0 FD | 	call	#_expr
0580c                 | ' expr()
0580c                 | ' return 0
0580c     00 26 06 F6 | 	mov	local05, #0
05810     F0 00 90 FD | 	jmp	#LR__0471
05814                 | LR__0450
05814     70 2C B0 FD | 	call	#_expr
05818                 | ' expr()
05818                 | ' return 0
05818     00 26 06 F6 | 	mov	local05, #0
0581c     E4 00 90 FD | 	jmp	#LR__0471
05820                 | LR__0451
05820     54 27 B0 FD | 	call	#_compile_next
05824     98 01 90 FD | 	jmp	#LR__0472
05828                 | LR__0452
05828     5C 2C B0 FD | 	call	#_expr
0582c                 | ' expr()
0582c                 | ' return 0
0582c     00 26 06 F6 | 	mov	local05, #0
05830     D0 00 90 FD | 	jmp	#LR__0471
05834                 | LR__0453
05834     50 2C B0 FD | 	call	#_expr
05838                 | ' expr()
05838                 | ' return 0
05838     00 26 06 F6 | 	mov	local05, #0
0583c     C4 00 90 FD | 	jmp	#LR__0471
05840                 | LR__0454
05840     44 2C B0 FD | 	call	#_expr
05844                 | ' expr()
05844                 | ' return 0
05844     00 26 06 F6 | 	mov	local05, #0
05848     B8 00 90 FD | 	jmp	#LR__0471
0584c                 | LR__0455
0584c     38 2C B0 FD | 	call	#_expr
05850                 | ' expr()
05850                 | ' return 0
05850     00 26 06 F6 | 	mov	local05, #0
05854     AC 00 90 FD | 	jmp	#LR__0471
05858                 | LR__0456
05858     20 0B B0 FD | 	call	#_compile_fun_4p
0585c     FD 26 02 F6 | 	mov	local05, result1
05860     A0 00 90 FD | 	jmp	#LR__0471
05864                 | LR__0457
05864     20 2C B0 FD | 	call	#_expr
05868                 | ' expr()
05868                 | ' return 0
05868     00 26 06 F6 | 	mov	local05, #0
0586c     94 00 90 FD | 	jmp	#LR__0471
05870                 | LR__0458
05870     C8 09 B0 FD | 	call	#_compile_fun_2p
05874     FD 26 02 F6 | 	mov	local05, result1
05878     88 00 90 FD | 	jmp	#LR__0471
0587c                 | LR__0459
0587c     9C 0D B0 FD | 	call	#_compile_fun_varp
05880     FD 2C 02 F6 | 	mov	local08, result1
05884     7C 00 90 FD | 	jmp	#LR__0471
05888                 | LR__0460
05888     B0 09 B0 FD | 	call	#_compile_fun_2p
0588c     FD 26 02 F6 | 	mov	local05, result1
05890     70 00 90 FD | 	jmp	#LR__0471
05894                 | LR__0461
05894     A4 09 B0 FD | 	call	#_compile_fun_2p
05898     FD 26 02 F6 | 	mov	local05, result1
0589c     64 00 90 FD | 	jmp	#LR__0471
058a0                 | LR__0462
058a0     24 0E B0 FD | 	call	#_compile_print
058a4     FD 26 02 F6 | 	mov	local05, result1
058a8     14 01 90 FD | 	jmp	#LR__0472
058ac                 | LR__0463
058ac     6C 0D B0 FD | 	call	#_compile_fun_varp
058b0     FD 2C 02 F6 | 	mov	local08, result1
058b4     4C 00 90 FD | 	jmp	#LR__0471
058b8                 | LR__0464
058b8     F4 09 B0 FD | 	call	#_compile_fun_3p
058bc     FD 26 02 F6 | 	mov	local05, result1
058c0     40 00 90 FD | 	jmp	#LR__0471
058c4                 | LR__0465
058c4     C0 2B B0 FD | 	call	#_expr
058c8                 | ' expr()
058c8                 | ' return 0
058c8     00 26 06 F6 | 	mov	local05, #0
058cc     34 00 90 FD | 	jmp	#LR__0471
058d0                 | LR__0466
058d0     68 09 B0 FD | 	call	#_compile_fun_2p
058d4     FD 26 02 F6 | 	mov	local05, result1
058d8     28 00 90 FD | 	jmp	#LR__0471
058dc                 | LR__0467
058dc     5C 09 B0 FD | 	call	#_compile_fun_2p
058e0     FD 26 02 F6 | 	mov	local05, result1
058e4     1C 00 90 FD | 	jmp	#LR__0471
058e8                 | LR__0468
058e8     50 09 B0 FD | 	call	#_compile_fun_2p
058ec     FD 26 02 F6 | 	mov	local05, result1
058f0     10 00 90 FD | 	jmp	#LR__0471
058f4                 | LR__0469
058f4     20 01 B0 FD | 	call	#_compile_array_assign
058f8     C4 00 90 FD | 	jmp	#LR__0472
058fc                 | LR__0470
058fc     80 08 B0 FD | 	call	#_compile_unknown
05900     BC 00 90 FD | 	jmp	#LR__0472
05904                 | LR__0471
05904     14 23 02 F6 | 	mov	local03, local06
05908     16 1F 02 F6 | 	mov	local01, local08
0590c     0F 2B 02 F6 | 	mov	local07, local01
05910     10 2F 02 F6 | 	mov	local09, local02
05914     11 1F 02 F6 | 	mov	local01, local03
05918     69 00 00 FF 
0591c     40 E5 05 F1 | 	add	objptr, ##54080
05920     F2 2C 02 FB | 	rdlong	local08, objptr
05924     16 29 02 F6 | 	mov	local06, local08
05928     01 28 66 F0 | 	shl	local06, #1
0592c     16 29 02 F1 | 	add	local06, local08
05930     02 28 66 F0 | 	shl	local06, #2
05934     03 00 00 FF 
05938     00 E4 85 F1 | 	sub	objptr, ##1536
0593c     F2 28 02 F1 | 	add	local06, objptr
05940     14 2B 62 FC | 	wrlong	local07, local06
05944     03 00 00 FF 
05948     00 E4 05 F1 | 	add	objptr, ##1536
0594c     F2 2C 02 FB | 	rdlong	local08, objptr
05950     16 2B 02 F6 | 	mov	local07, local08
05954     01 2A 66 F0 | 	shl	local07, #1
05958     16 2B 02 F1 | 	add	local07, local08
0595c     02 2A 66 F0 | 	shl	local07, #2
05960     03 00 00 FF 
05964     00 E4 85 F1 | 	sub	objptr, ##1536
05968     F2 2A 02 F1 | 	add	local07, objptr
0596c     04 2A 06 F1 | 	add	local07, #4
05970     15 2F 62 FC | 	wrlong	local09, local07
05974     03 00 00 FF 
05978     00 E4 05 F1 | 	add	objptr, ##1536
0597c     F2 2E 02 FB | 	rdlong	local09, objptr
05980     17 2D 02 F6 | 	mov	local08, local09
05984     01 2C 66 F0 | 	shl	local08, #1
05988     17 2D 02 F1 | 	add	local08, local09
0598c     02 2C 66 F0 | 	shl	local08, #2
05990     03 00 00 FF 
05994     00 E4 85 F1 | 	sub	objptr, ##1536
05998     F2 2C 02 F1 | 	add	local08, objptr
0599c     08 2C 06 F1 | 	add	local08, #8
059a0     16 1F 62 FC | 	wrlong	local01, local08
059a4     03 00 00 FF 
059a8     00 E4 05 F1 | 	add	objptr, ##1536
059ac     F2 2A 02 FB | 	rdlong	local07, objptr
059b0     01 2A 06 F1 | 	add	local07, #1
059b4     F2 2A 62 FC | 	wrlong	local07, objptr
059b8     69 00 00 FF 
059bc     40 E5 85 F1 | 	sub	objptr, ##54080
059c0                 | LR__0472
059c0                 | ' 
059c0                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
059c0                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
059c0     00 24 0E F2 | 	cmp	local04, #0 wz
059c4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
059c8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
059cc     38 00 90 5D |  if_ne	jmp	#LR__0473
059d0     69 00 00 FF 
059d4     40 E5 05 F1 | 	add	objptr, ##54080
059d8     F2 2E 02 FB | 	rdlong	local09, objptr
059dc     17 1F 02 F6 | 	mov	local01, local09
059e0     01 1E 66 F0 | 	shl	local01, #1
059e4     17 1F 02 F1 | 	add	local01, local09
059e8     02 1E 66 F0 | 	shl	local01, #2
059ec     03 00 00 FF 
059f0     00 E4 85 F1 | 	sub	objptr, ##1536
059f4     F2 1E 02 F1 | 	add	local01, objptr
059f8     08 1E 06 F1 | 	add	local01, #8
059fc     0F FD 6B FC | 	wrlong	#510, local01
05a00     66 00 00 FF 
05a04     40 E5 85 F1 | 	sub	objptr, ##52544
05a08                 | LR__0473
05a08                 | ' 
05a08                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
05a08                 | ' return err
05a08     13 FB 01 F6 | 	mov	result1, local05
05a0c     A7 F0 03 F6 | 	mov	ptra, fp
05a10     B2 00 A0 FD | 	call	#popregs_
05a14                 | _compile_immediate_ret
05a14     2D 00 64 FD | 	ret
05a18                 | 
05a18                 | ' 
05a18                 | ' sub compile_array_assign
05a18                 | _compile_array_assign
05a18     0A 4A 05 F6 | 	mov	COUNT_, #10
05a1c     A8 00 A0 FD | 	call	#pushregs_
05a20     00 24 06 F6 | 	mov	local04, #0
05a24     56 00 00 FF 
05a28     08 E5 05 F1 | 	add	objptr, ##44296
05a2c     F2 26 02 FB | 	rdlong	local05, objptr
05a30     13 FB 01 F6 | 	mov	result1, local05
05a34     01 FA 85 F1 | 	sub	result1, #1
05a38     03 FA 65 F0 | 	shl	result1, #3
05a3c     02 00 00 FF 
05a40     38 E4 85 F1 | 	sub	objptr, ##1080
05a44     F2 FA 01 F1 | 	add	result1, objptr
05a48     FD 28 02 FB | 	rdlong	local06, result1
05a4c                 | ' numpar=0
05a4c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
05a4c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
05a4c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
05a4c                 | ' if lparts(ct).token=token_lpar then
05a4c     03 26 66 F0 | 	shl	local05, #3
05a50     F2 26 02 F1 | 	add	local05, objptr
05a54     04 26 06 F1 | 	add	local05, #4
05a58     13 27 02 FB | 	rdlong	local05, local05
05a5c     15 26 0E F2 | 	cmp	local05, #21 wz
05a60     54 00 00 FF 
05a64     D0 E4 85 F1 | 	sub	objptr, ##43216
05a68     D4 01 90 5D |  if_ne	jmp	#LR__0484
05a6c     56 00 00 FF 
05a70     08 E5 05 F1 | 	add	objptr, ##44296
05a74     F2 2A 02 FB | 	rdlong	local07, objptr
05a78     01 2A 06 F1 | 	add	local07, #1
05a7c     F2 2A 62 FC | 	wrlong	local07, objptr
05a80     56 00 00 FF 
05a84     08 E5 85 F1 | 	sub	objptr, ##44296
05a88                 | '   ct+=1 											' omit this lpar, this is for expr list
05a88                 | '   do
05a88                 | LR__0480
05a88     FC 29 B0 FD | 	call	#_expr
05a8c     56 00 00 FF 
05a90     08 E5 05 F1 | 	add	objptr, ##44296
05a94     F2 26 02 FB | 	rdlong	local05, objptr
05a98     01 26 06 F1 | 	add	local05, #1
05a9c     F2 26 62 FC | 	wrlong	local05, objptr
05aa0     01 24 06 F1 | 	add	local04, #1
05aa4     01 26 86 F1 | 	sub	local05, #1
05aa8     03 26 66 F0 | 	shl	local05, #3
05aac     02 00 00 FF 
05ab0     38 E4 85 F1 | 	sub	objptr, ##1080
05ab4     F2 26 02 F1 | 	add	local05, objptr
05ab8     04 26 06 F1 | 	add	local05, #4
05abc     13 2B 02 FB | 	rdlong	local07, local05
05ac0     14 2A 0E F2 | 	cmp	local07, #20 wz
05ac4     54 00 00 FF 
05ac8     D0 E4 85 F1 | 	sub	objptr, ##43216
05acc     34 00 90 AD |  if_e	jmp	#LR__0481
05ad0     56 00 00 FF 
05ad4     08 E5 05 F1 | 	add	objptr, ##44296
05ad8     F2 2A 02 FB | 	rdlong	local07, objptr
05adc     03 2A 66 F0 | 	shl	local07, #3
05ae0     02 00 00 FF 
05ae4     38 E4 85 F1 | 	sub	objptr, ##1080
05ae8     F2 2A 02 F1 | 	add	local07, objptr
05aec     04 2A 06 F1 | 	add	local07, #4
05af0     15 2B 02 FB | 	rdlong	local07, local07
05af4     FE 2B 0E F2 | 	cmp	local07, #510 wz
05af8     54 00 00 FF 
05afc     D0 E4 85 F1 | 	sub	objptr, ##43216
05b00     84 FF 9F 5D |  if_ne	jmp	#LR__0480
05b04                 | LR__0481
05b04     56 00 00 FF 
05b08     08 E5 05 F1 | 	add	objptr, ##44296
05b0c     F2 2A 02 FB | 	rdlong	local07, objptr
05b10     01 2A 06 F1 | 	add	local07, #1
05b14     F2 2A 62 FC | 	wrlong	local07, objptr
05b18     56 00 00 FF 
05b1c     08 E5 85 F1 | 	sub	objptr, ##44296
05b20     64 29 B0 FD | 	call	#_expr
05b24     01 2C 66 F6 | 	neg	local08, #1
05b28     00 2E 06 F6 | 	mov	local09, #0
05b2c                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05b2c                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05b2c                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05b2c                 | ' ct+=1 : expr()
05b2c                 | ' ' now find the vae
05b2c                 | ' 
05b2c                 | ' j=-1 : i=0 : do : 
05b2c                 | LR__0482
05b2c                 | '   if variables(i).name=varname$ then j=i: exit loop
05b2c     17 27 02 F6 | 	mov	local05, local09
05b30     04 26 66 F0 | 	shl	local05, #4
05b34     34 00 00 FF 
05b38     CC E4 05 F1 | 	add	objptr, ##26828
05b3c     F2 26 02 F1 | 	add	local05, objptr
05b40     13 13 02 FB | 	rdlong	arg01, local05
05b44     14 15 02 F6 | 	mov	arg02, local06
05b48     34 00 00 FF 
05b4c     CC E4 85 F1 | 	sub	objptr, ##26828
05b50     0C 39 B1 FD | 	call	#__system___string_cmp
05b54     00 FA 0D F2 | 	cmp	result1, #0 wz
05b58     17 2D 02 A6 |  if_e	mov	local08, local09
05b5c     20 00 90 AD |  if_e	jmp	#LR__0483
05b60     01 2E 06 F1 | 	add	local09, #1
05b64     54 00 00 FF 
05b68     CC E4 05 F1 | 	add	objptr, ##43212
05b6c     F2 2A 02 FB | 	rdlong	local07, objptr
05b70     54 00 00 FF 
05b74     CC E4 85 F1 | 	sub	objptr, ##43212
05b78     15 2F 5A F2 | 	cmps	local09, local07 wcz
05b7c     AC FF 9F ED |  if_be	jmp	#LR__0482
05b80                 | LR__0483
05b80     16 1F 02 F6 | 	mov	local01, local08
05b84     12 21 02 F6 | 	mov	local02, local04
05b88     17 22 06 F6 | 	mov	local03, #23
05b8c     0F 2B 02 F6 | 	mov	local07, local01
05b90     10 31 02 F6 | 	mov	local10, local02
05b94     11 2D 02 F6 | 	mov	local08, local03
05b98     69 00 00 FF 
05b9c     40 E5 05 F1 | 	add	objptr, ##54080
05ba0     F2 1E 02 FB | 	rdlong	local01, objptr
05ba4     0F 2F 02 F6 | 	mov	local09, local01
05ba8     01 2E 66 F0 | 	shl	local09, #1
05bac     0F 2F 02 F1 | 	add	local09, local01
05bb0     02 2E 66 F0 | 	shl	local09, #2
05bb4     03 00 00 FF 
05bb8     00 E4 85 F1 | 	sub	objptr, ##1536
05bbc     F2 2E 02 F1 | 	add	local09, objptr
05bc0     17 2B 62 FC | 	wrlong	local07, local09
05bc4     03 00 00 FF 
05bc8     00 E4 05 F1 | 	add	objptr, ##1536
05bcc     F2 1E 02 FB | 	rdlong	local01, objptr
05bd0     0F 2F 02 F6 | 	mov	local09, local01
05bd4     01 2E 66 F0 | 	shl	local09, #1
05bd8     0F 2F 02 F1 | 	add	local09, local01
05bdc     02 2E 66 F0 | 	shl	local09, #2
05be0     03 00 00 FF 
05be4     00 E4 85 F1 | 	sub	objptr, ##1536
05be8     F2 2E 02 F1 | 	add	local09, objptr
05bec     04 2E 06 F1 | 	add	local09, #4
05bf0     17 31 62 FC | 	wrlong	local10, local09
05bf4     03 00 00 FF 
05bf8     00 E4 05 F1 | 	add	objptr, ##1536
05bfc     F2 30 02 FB | 	rdlong	local10, objptr
05c00     18 1F 02 F6 | 	mov	local01, local10
05c04     01 1E 66 F0 | 	shl	local01, #1
05c08     18 1F 02 F1 | 	add	local01, local10
05c0c     02 1E 66 F0 | 	shl	local01, #2
05c10     03 00 00 FF 
05c14     00 E4 85 F1 | 	sub	objptr, ##1536
05c18     F2 1E 02 F1 | 	add	local01, objptr
05c1c     08 1E 06 F1 | 	add	local01, #8
05c20     0F 2D 62 FC | 	wrlong	local08, local01
05c24     03 00 00 FF 
05c28     00 E4 05 F1 | 	add	objptr, ##1536
05c2c     F2 2A 02 FB | 	rdlong	local07, objptr
05c30     01 2A 06 F1 | 	add	local07, #1
05c34     F2 2A 62 FC | 	wrlong	local07, objptr
05c38     69 00 00 FF 
05c3c     40 E5 85 F1 | 	sub	objptr, ##54080
05c40                 | LR__0484
05c40     A7 F0 03 F6 | 	mov	ptra, fp
05c44     B2 00 A0 FD | 	call	#popregs_
05c48                 | _compile_array_assign_ret
05c48     2D 00 64 FD | 	ret
05c4c                 | 
05c4c                 | ' 
05c4c                 | ' 
05c4c                 | ' sub compile_immediate_assign(linetype as ulong)
05c4c                 | _compile_immediate_assign
05c4c     09 4A 05 F6 | 	mov	COUNT_, #9
05c50     A8 00 A0 FD | 	call	#pushregs_
05c54     09 25 0A F6 | 	mov	local04, arg01 wz
05c58     FF 22 06 F6 | 	mov	local03, #255
05c5c     01 26 66 F6 | 	neg	local05, #1
05c60                 | ' 
05c60                 | ' t1.result_type=result_error : t1.result.uresult=0
05c60                 | ' i=-1: j=-1
05c60                 | ' 
05c60                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05c60     2C 00 90 5D |  if_ne	jmp	#LR__0490
05c64     54 00 00 FF 
05c68     D0 E4 05 F1 | 	add	objptr, ##43216
05c6c     F2 28 02 FB | 	rdlong	local06, objptr
05c70     02 00 00 FF 
05c74     38 E4 05 F1 | 	add	objptr, ##1080
05c78     F2 04 68 FC | 	wrlong	#2, objptr
05c7c     13 00 00 FF 
05c80     38 E4 05 F1 | 	add	objptr, ##9784
05c84     F2 00 68 FC | 	wrlong	#0, objptr
05c88     69 00 00 FF 
05c8c     40 E5 85 F1 | 	sub	objptr, ##54080
05c90                 | LR__0490
05c90                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05c90     02 24 0E F2 | 	cmp	local04, #2 wz
05c94     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05c98     54 00 00 AF 
05c9c     D0 E4 05 A1 |  if_e	add	objptr, ##43216
05ca0     F2 28 02 AB |  if_e	rdlong	local06, objptr
05ca4     02 00 00 AF 
05ca8     38 E4 05 A1 |  if_e	add	objptr, ##1080
05cac     F2 04 68 AC |  if_e	wrlong	#2, objptr
05cb0     56 00 00 AF 
05cb4     08 E5 85 A1 |  if_e	sub	objptr, ##44296
05cb8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05cb8     04 24 0E F2 | 	cmp	local04, #4 wz
05cbc     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05cc0     2C 00 90 5D |  if_ne	jmp	#LR__0491
05cc4     54 00 00 FF 
05cc8     D8 E4 05 F1 | 	add	objptr, ##43224
05ccc     F2 28 02 FB | 	rdlong	local06, objptr
05cd0     02 00 00 FF 
05cd4     30 E4 05 F1 | 	add	objptr, ##1072
05cd8     F2 06 68 FC | 	wrlong	#3, objptr
05cdc     13 00 00 FF 
05ce0     38 E4 05 F1 | 	add	objptr, ##9784
05ce4     F2 04 68 FC | 	wrlong	#2, objptr
05ce8     69 00 00 FF 
05cec     40 E5 85 F1 | 	sub	objptr, ##54080
05cf0                 | LR__0491
05cf0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05cf0     05 24 0E F2 | 	cmp	local04, #5 wz
05cf4     3C 00 90 5D |  if_ne	jmp	#LR__0492
05cf8     56 00 00 FF 
05cfc     08 E5 05 F1 | 	add	objptr, ##44296
05d00     F2 FA 01 FB | 	rdlong	result1, objptr
05d04     FD 28 02 F6 | 	mov	local06, result1
05d08     03 28 66 F0 | 	shl	local06, #3
05d0c     02 00 00 FF 
05d10     38 E4 85 F1 | 	sub	objptr, ##1080
05d14     F2 28 02 F1 | 	add	local06, objptr
05d18     14 29 02 FB | 	rdlong	local06, local06
05d1c     02 FA 05 F1 | 	add	result1, #2
05d20     02 00 00 FF 
05d24     38 E4 05 F1 | 	add	objptr, ##1080
05d28     F2 FA 61 FC | 	wrlong	result1, objptr
05d2c     56 00 00 FF 
05d30     08 E5 85 F1 | 	sub	objptr, ##44296
05d34                 | LR__0492
05d34     14 13 02 F6 | 	mov	arg01, local06
05d38     01 14 06 F6 | 	mov	arg02, #1
05d3c     90 57 B1 FD | 	call	#__system__Right_S
05d40     44 27 B0 FD | 	call	#_expr
05d44                 | '  
05d44                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05d44                 | ' 
05d44                 | ' suffix2$=right$(varname2$,1)
05d44                 | ' expr()
05d44                 | ' 
05d44                 | ' 
05d44                 | ' if varnum>0 then
05d44     54 00 00 FF 
05d48     CC E4 05 F1 | 	add	objptr, ##43212
05d4c     F2 2A 02 FB | 	rdlong	local07, objptr
05d50     54 00 00 FF 
05d54     CC E4 85 F1 | 	sub	objptr, ##43212
05d58     01 2A 56 F2 | 	cmps	local07, #1 wc
05d5c     58 00 90 CD |  if_b	jmp	#LR__0495
05d60                 | '   for i=0 to varnum-1
05d60     00 2C 06 F6 | 	mov	local08, #0
05d64     54 00 00 FF 
05d68     CC E4 05 F1 | 	add	objptr, ##43212
05d6c     F2 2E 02 FB | 	rdlong	local09, objptr
05d70     54 00 00 FF 
05d74     CC E4 85 F1 | 	sub	objptr, ##43212
05d78                 | LR__0493
05d78     17 2D 52 F2 | 	cmps	local08, local09 wc
05d7c     38 00 90 3D |  if_ae	jmp	#LR__0494
05d80                 | '     if variables(i).name=varname2$ then j=i : exit
05d80     16 2B 02 F6 | 	mov	local07, local08
05d84     04 2A 66 F0 | 	shl	local07, #4
05d88     34 00 00 FF 
05d8c     CC E4 05 F1 | 	add	objptr, ##26828
05d90     F2 2A 02 F1 | 	add	local07, objptr
05d94     15 13 02 FB | 	rdlong	arg01, local07
05d98     14 15 02 F6 | 	mov	arg02, local06
05d9c     34 00 00 FF 
05da0     CC E4 85 F1 | 	sub	objptr, ##26828
05da4     B8 36 B1 FD | 	call	#__system___string_cmp
05da8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dac     16 27 02 A6 |  if_e	mov	local05, local08
05db0     01 2C 06 51 |  if_ne	add	local08, #1
05db4     C0 FF 9F 5D |  if_ne	jmp	#LR__0493
05db8                 | LR__0494
05db8                 | LR__0495
05db8                 | ' if  j=-1 andalso varnum<maxvars then   
05db8     FF FF 7F FF 
05dbc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05dc0     60 00 90 5D |  if_ne	jmp	#LR__0496
05dc4     54 00 00 FF 
05dc8     CC E4 05 F1 | 	add	objptr, ##43212
05dcc     F2 2A 02 FB | 	rdlong	local07, objptr
05dd0     54 00 00 FF 
05dd4     CC E4 85 F1 | 	sub	objptr, ##43212
05dd8     01 00 00 FF 
05ddc     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05de0     40 00 90 3D |  if_ae	jmp	#LR__0496
05de4     54 00 00 FF 
05de8     CC E4 05 F1 | 	add	objptr, ##43212
05dec     F2 2E 02 FB | 	rdlong	local09, objptr
05df0     04 2E 66 F0 | 	shl	local09, #4
05df4     20 00 00 FF 
05df8     00 E4 85 F1 | 	sub	objptr, ##16384
05dfc     F2 2E 02 F1 | 	add	local09, objptr
05e00     17 29 62 FC | 	wrlong	local06, local09
05e04     20 00 00 FF 
05e08     00 E4 05 F1 | 	add	objptr, ##16384
05e0c     F2 2A 02 FB | 	rdlong	local07, objptr
05e10     15 27 02 F6 | 	mov	local05, local07
05e14     01 2A 06 F1 | 	add	local07, #1
05e18     F2 2A 62 FC | 	wrlong	local07, objptr
05e1c     54 00 00 FF 
05e20     CC E4 85 F1 | 	sub	objptr, ##43212
05e24                 | LR__0496
05e24     13 1F 02 F6 | 	mov	local01, local05
05e28     17 22 06 F6 | 	mov	local03, #23
05e2c     0F 2B 02 F6 | 	mov	local07, local01
05e30     10 2F 02 F6 | 	mov	local09, local02
05e34     11 1F 02 F6 | 	mov	local01, local03
05e38     69 00 00 FF 
05e3c     40 E5 05 F1 | 	add	objptr, ##54080
05e40     F2 2C 02 FB | 	rdlong	local08, objptr
05e44     16 29 02 F6 | 	mov	local06, local08
05e48     01 28 66 F0 | 	shl	local06, #1
05e4c     16 29 02 F1 | 	add	local06, local08
05e50     02 28 66 F0 | 	shl	local06, #2
05e54     03 00 00 FF 
05e58     00 E4 85 F1 | 	sub	objptr, ##1536
05e5c     F2 28 02 F1 | 	add	local06, objptr
05e60     14 2B 62 FC | 	wrlong	local07, local06
05e64     03 00 00 FF 
05e68     00 E4 05 F1 | 	add	objptr, ##1536
05e6c     F2 2C 02 FB | 	rdlong	local08, objptr
05e70     16 2B 02 F6 | 	mov	local07, local08
05e74     01 2A 66 F0 | 	shl	local07, #1
05e78     16 2B 02 F1 | 	add	local07, local08
05e7c     02 2A 66 F0 | 	shl	local07, #2
05e80     03 00 00 FF 
05e84     00 E4 85 F1 | 	sub	objptr, ##1536
05e88     F2 2A 02 F1 | 	add	local07, objptr
05e8c     04 2A 06 F1 | 	add	local07, #4
05e90     15 2F 62 FC | 	wrlong	local09, local07
05e94     03 00 00 FF 
05e98     00 E4 05 F1 | 	add	objptr, ##1536
05e9c     F2 2E 02 FB | 	rdlong	local09, objptr
05ea0     17 2D 02 F6 | 	mov	local08, local09
05ea4     01 2C 66 F0 | 	shl	local08, #1
05ea8     17 2D 02 F1 | 	add	local08, local09
05eac     02 2C 66 F0 | 	shl	local08, #2
05eb0     03 00 00 FF 
05eb4     00 E4 85 F1 | 	sub	objptr, ##1536
05eb8     F2 2C 02 F1 | 	add	local08, objptr
05ebc     08 2C 06 F1 | 	add	local08, #8
05ec0     16 1F 62 FC | 	wrlong	local01, local08
05ec4     03 00 00 FF 
05ec8     00 E4 05 F1 | 	add	objptr, ##1536
05ecc     F2 2A 02 FB | 	rdlong	local07, objptr
05ed0     01 2A 06 F1 | 	add	local07, #1
05ed4     F2 2A 62 FC | 	wrlong	local07, objptr
05ed8     69 00 00 FF 
05edc     40 E5 85 F1 | 	sub	objptr, ##54080
05ee0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
05ee0                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
05ee0     00 24 0E F2 | 	cmp	local04, #0 wz
05ee4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05ee8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05eec     38 00 90 5D |  if_ne	jmp	#LR__0497
05ef0     69 00 00 FF 
05ef4     40 E5 05 F1 | 	add	objptr, ##54080
05ef8     F2 1E 02 FB | 	rdlong	local01, objptr
05efc     0F 2F 02 F6 | 	mov	local09, local01
05f00     01 2E 66 F0 | 	shl	local09, #1
05f04     0F 2F 02 F1 | 	add	local09, local01
05f08     02 2E 66 F0 | 	shl	local09, #2
05f0c     03 00 00 FF 
05f10     00 E4 85 F1 | 	sub	objptr, ##1536
05f14     F2 2E 02 F1 | 	add	local09, objptr
05f18     08 2E 06 F1 | 	add	local09, #8
05f1c     17 FD 6B FC | 	wrlong	#510, local09
05f20     66 00 00 FF 
05f24     40 E5 85 F1 | 	sub	objptr, ##52544
05f28                 | LR__0497
05f28     A7 F0 03 F6 | 	mov	ptra, fp
05f2c     B2 00 A0 FD | 	call	#popregs_
05f30                 | _compile_immediate_assign_ret
05f30     2D 00 64 FD | 	ret
05f34                 | 
05f34                 | ' 
05f34                 | ' ' ------------------ compile the line that is calling a command 
05f34                 | ' 
05f34                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05f34                 | _compile
05f34     04 4A 05 F6 | 	mov	COUNT_, #4
05f38     A8 00 A0 FD | 	call	#pushregs_
05f3c     09 1F 0A F6 | 	mov	local01, arg01 wz
05f40     0A 21 02 F6 | 	mov	local02, arg02
05f44     0B 23 02 F6 | 	mov	local03, arg03
05f48                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05f48                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05f48                 | '  
05f48                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05f48                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05f48     0C 00 90 5D |  if_ne	jmp	#LR__0500
05f4c     00 12 06 F6 | 	mov	arg01, #0
05f50     E4 F4 BF FD | 	call	#_compile_immediate
05f54     A0 00 90 FD | 	jmp	#LR__0507
05f58                 | LR__0500
05f58     66 00 00 FF 
05f5c     40 E5 05 F1 | 	add	objptr, ##52544
05f60     F2 1E 62 FC | 	wrlong	local01, objptr
05f64     04 E4 05 F1 | 	add	objptr, #4
05f68     F2 20 62 FC | 	wrlong	local02, objptr
05f6c     66 00 00 FF 
05f70     44 E5 85 F1 | 	sub	objptr, ##52548
05f74     11 13 02 F6 | 	mov	arg01, local03
05f78     01 12 06 F1 | 	add	arg01, #1
05f7c     B8 F4 BF FD | 	call	#_compile_immediate
05f80     FD 24 0A F6 | 	mov	local04, result1 wz
05f84                 | ' 
05f84                 | ' ucompiledline(0)=alinemajor
05f84                 | ' ucompiledline(1)=alineminor
05f84                 | ' 
05f84                 | ' 
05f84                 | ' ' cont: 0: this is the first part of the line that will continue
05f84                 | ' ' 1 - this is the continuation of the line
05f84                 | ' ' 2 - this is the last continued line
05f84                 | ' ' 3 - this is the ome and only part
05f84                 | ' 
05f84                 | ' err=compile_immediate(cont+1) 
05f84                 | ' if err=0 then
05f84     6C 00 90 5D |  if_ne	jmp	#LR__0506
05f88                 | '   if cont=3 orelse cont=2 then 
05f88     03 22 0E F2 | 	cmp	local03, #3 wz
05f8c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05f90     60 00 90 5D |  if_ne	jmp	#LR__0505
05f94                 | '     if alinemajor >lastline then 
05f94     69 00 00 FF 
05f98     4C E5 05 F1 | 	add	objptr, ##54092
05f9c     F2 16 02 FB | 	rdlong	arg03, objptr
05fa0     69 00 00 FF 
05fa4     4C E5 85 F1 | 	sub	objptr, ##54092
05fa8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05fac     0C 00 90 ED |  if_be	jmp	#LR__0501
05fb0     0F 13 02 F6 | 	mov	arg01, local01
05fb4     A0 F3 BF FD | 	call	#_add_line_at_end
05fb8     38 00 90 FD | 	jmp	#LR__0504
05fbc                 | LR__0501
05fbc     0F 13 02 F6 | 	mov	arg01, local01
05fc0     14 EC BF FD | 	call	#_deleteline
05fc4                 | '       deleteline(alinemajor)  
05fc4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
05fc4     69 00 00 FF 
05fc8     4C E5 05 F1 | 	add	objptr, ##54092
05fcc     F2 16 02 FB | 	rdlong	arg03, objptr
05fd0     69 00 00 FF 
05fd4     4C E5 85 F1 | 	sub	objptr, ##54092
05fd8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05fdc     0C 00 90 ED |  if_be	jmp	#LR__0502
05fe0     0F 13 02 F6 | 	mov	arg01, local01
05fe4     70 F3 BF FD | 	call	#_add_line_at_end
05fe8     08 00 90 FD | 	jmp	#LR__0503
05fec                 | LR__0502
05fec     0F 13 02 F6 | 	mov	arg01, local01
05ff0     1C F1 BF FD | 	call	#_insertline
05ff4                 | LR__0503
05ff4                 | LR__0504
05ff4                 | LR__0505
05ff4                 | LR__0506
05ff4                 | ' return err
05ff4     12 FB 01 F6 | 	mov	result1, local04
05ff8                 | LR__0507
05ff8     A7 F0 03 F6 | 	mov	ptra, fp
05ffc     B2 00 A0 FD | 	call	#popregs_
06000                 | _compile_ret
06000     2D 00 64 FD | 	ret
06004                 | 
06004                 | ' 
06004                 | ' ' ------------------ compile the line that is assigning to a variable
06004                 | ' 
06004                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06004                 | _compile_assign
06004     03 4A 05 F6 | 	mov	COUNT_, #3
06008     A8 00 A0 FD | 	call	#pushregs_
0600c     09 1F 0A F6 | 	mov	local01, arg01 wz
06010     0A 21 02 F6 | 	mov	local02, arg02
06014     0B 23 02 F6 | 	mov	local03, arg03
06018                 | ' 
06018                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06018                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06018     0C 00 90 5D |  if_ne	jmp	#LR__0510
0601c     00 12 06 F6 | 	mov	arg01, #0
06020     28 FC BF FD | 	call	#_compile_immediate_assign
06024     94 00 90 FD | 	jmp	#LR__0516
06028                 | LR__0510
06028     66 00 00 FF 
0602c     40 E5 05 F1 | 	add	objptr, ##52544
06030     F2 1E 62 FC | 	wrlong	local01, objptr
06034     04 E4 05 F1 | 	add	objptr, #4
06038     F2 20 62 FC | 	wrlong	local02, objptr
0603c     66 00 00 FF 
06040     44 E5 85 F1 | 	sub	objptr, ##52548
06044     11 13 02 F6 | 	mov	arg01, local03
06048     01 12 06 F1 | 	add	arg01, #1
0604c     FC FB BF FD | 	call	#_compile_immediate_assign
06050                 | ' 
06050                 | ' ucompiledline(0)=alinemajor
06050                 | ' ucompiledline(1)=alineminor
06050                 | ' 
06050                 | ' compile_immediate_assign(cont+1) 
06050                 | ' 
06050                 | ' if cont=3 orelse cont=2 then 
06050     03 22 0E F2 | 	cmp	local03, #3 wz
06054     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06058     60 00 90 5D |  if_ne	jmp	#LR__0515
0605c                 | '   if alinemajor >lastline then 
0605c     69 00 00 FF 
06060     4C E5 05 F1 | 	add	objptr, ##54092
06064     F2 16 02 FB | 	rdlong	arg03, objptr
06068     69 00 00 FF 
0606c     4C E5 85 F1 | 	sub	objptr, ##54092
06070     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06074     0C 00 90 ED |  if_be	jmp	#LR__0511
06078     0F 13 02 F6 | 	mov	arg01, local01
0607c     D8 F2 BF FD | 	call	#_add_line_at_end
06080     38 00 90 FD | 	jmp	#LR__0514
06084                 | LR__0511
06084     0F 13 02 F6 | 	mov	arg01, local01
06088     4C EB BF FD | 	call	#_deleteline
0608c                 | '     deleteline(alinemajor)  
0608c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0608c     69 00 00 FF 
06090     4C E5 05 F1 | 	add	objptr, ##54092
06094     F2 16 02 FB | 	rdlong	arg03, objptr
06098     69 00 00 FF 
0609c     4C E5 85 F1 | 	sub	objptr, ##54092
060a0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
060a4     0C 00 90 ED |  if_be	jmp	#LR__0512
060a8     0F 13 02 F6 | 	mov	arg01, local01
060ac     A8 F2 BF FD | 	call	#_add_line_at_end
060b0     08 00 90 FD | 	jmp	#LR__0513
060b4                 | LR__0512
060b4     0F 13 02 F6 | 	mov	arg01, local01
060b8     54 F0 BF FD | 	call	#_insertline
060bc                 | LR__0513
060bc                 | LR__0514
060bc                 | LR__0515
060bc                 | LR__0516
060bc     A7 F0 03 F6 | 	mov	ptra, fp
060c0     B2 00 A0 FD | 	call	#popregs_
060c4                 | _compile_assign_ret
060c4     2D 00 64 FD | 	ret
060c8                 | 
060c8                 | ' 
060c8                 | ' sub compile_error(errno)
060c8                 | _compile_error
060c8     FF 04 06 F6 | 	mov	_var03, #255
060cc     01 07 02 F6 | 	mov	_var04, _var02
060d0     02 09 02 F6 | 	mov	_var05, _var03
060d4     69 00 00 FF 
060d8     40 E5 05 F1 | 	add	objptr, ##54080
060dc     F2 0A 02 FB | 	rdlong	_var06, objptr
060e0     05 0D 02 F6 | 	mov	_var07, _var06
060e4     01 0C 66 F0 | 	shl	_var07, #1
060e8     05 0D 02 F1 | 	add	_var07, _var06
060ec     02 0C 66 F0 | 	shl	_var07, #2
060f0     03 00 00 FF 
060f4     00 E4 85 F1 | 	sub	objptr, ##1536
060f8     F2 0C 02 F1 | 	add	_var07, objptr
060fc     06 13 62 FC | 	wrlong	arg01, _var07
06100     03 00 00 FF 
06104     00 E4 05 F1 | 	add	objptr, ##1536
06108     F2 0C 02 FB | 	rdlong	_var07, objptr
0610c     06 0B 02 F6 | 	mov	_var06, _var07
06110     01 0A 66 F0 | 	shl	_var06, #1
06114     06 0B 02 F1 | 	add	_var06, _var07
06118     02 0A 66 F0 | 	shl	_var06, #2
0611c     03 00 00 FF 
06120     00 E4 85 F1 | 	sub	objptr, ##1536
06124     F2 0A 02 F1 | 	add	_var06, objptr
06128     04 0A 06 F1 | 	add	_var06, #4
0612c     05 07 62 FC | 	wrlong	_var04, _var06
06130     03 00 00 FF 
06134     00 E4 05 F1 | 	add	objptr, ##1536
06138     F2 0C 02 FB | 	rdlong	_var07, objptr
0613c     06 0B 02 F6 | 	mov	_var06, _var07
06140     01 0A 66 F0 | 	shl	_var06, #1
06144     06 0B 02 F1 | 	add	_var06, _var07
06148     02 0A 66 F0 | 	shl	_var06, #2
0614c     03 00 00 FF 
06150     00 E4 85 F1 | 	sub	objptr, ##1536
06154     F2 0A 02 F1 | 	add	_var06, objptr
06158     08 0A 06 F1 | 	add	_var06, #8
0615c     05 09 62 FC | 	wrlong	_var05, _var06
06160     03 00 00 FF 
06164     00 E4 05 F1 | 	add	objptr, ##1536
06168     F2 12 02 FB | 	rdlong	arg01, objptr
0616c     01 12 06 F1 | 	add	arg01, #1
06170     F2 12 62 FC | 	wrlong	arg01, objptr
06174     69 00 00 FF 
06178     40 E5 85 F1 | 	sub	objptr, ##54080
0617c                 | _compile_error_ret
0617c     2D 00 64 FD | 	ret
06180                 | 
06180                 | ' 
06180                 | ' sub compile_unknown() 
06180                 | _compile_unknown
06180     FF 04 06 F6 | 	mov	_var03, #255
06184     17 00 06 F6 | 	mov	_var01, #23
06188     01 07 02 F6 | 	mov	_var04, _var02
0618c     02 01 02 F6 | 	mov	_var01, _var03
06190     69 00 00 FF 
06194     40 E5 05 F1 | 	add	objptr, ##54080
06198     F2 08 02 FB | 	rdlong	_var05, objptr
0619c     04 0B 02 F6 | 	mov	_var06, _var05
061a0     01 0A 66 F0 | 	shl	_var06, #1
061a4     04 0B 02 F1 | 	add	_var06, _var05
061a8     02 0A 66 F0 | 	shl	_var06, #2
061ac     03 00 00 FF 
061b0     00 E4 85 F1 | 	sub	objptr, ##1536
061b4     F2 0A 02 F1 | 	add	_var06, objptr
061b8     05 2F 68 FC | 	wrlong	#23, _var06
061bc     03 00 00 FF 
061c0     00 E4 05 F1 | 	add	objptr, ##1536
061c4     F2 0A 02 FB | 	rdlong	_var06, objptr
061c8     05 09 02 F6 | 	mov	_var05, _var06
061cc     01 08 66 F0 | 	shl	_var05, #1
061d0     05 09 02 F1 | 	add	_var05, _var06
061d4     02 08 66 F0 | 	shl	_var05, #2
061d8     03 00 00 FF 
061dc     00 E4 85 F1 | 	sub	objptr, ##1536
061e0     F2 08 02 F1 | 	add	_var05, objptr
061e4     04 08 06 F1 | 	add	_var05, #4
061e8     04 07 62 FC | 	wrlong	_var04, _var05
061ec     03 00 00 FF 
061f0     00 E4 05 F1 | 	add	objptr, ##1536
061f4     F2 0A 02 FB | 	rdlong	_var06, objptr
061f8     05 09 02 F6 | 	mov	_var05, _var06
061fc     01 08 66 F0 | 	shl	_var05, #1
06200     05 09 02 F1 | 	add	_var05, _var06
06204     02 08 66 F0 | 	shl	_var05, #2
06208     03 00 00 FF 
0620c     00 E4 85 F1 | 	sub	objptr, ##1536
06210     F2 08 02 F1 | 	add	_var05, objptr
06214     08 08 06 F1 | 	add	_var05, #8
06218     04 01 62 FC | 	wrlong	_var01, _var05
0621c     03 00 00 FF 
06220     00 E4 05 F1 | 	add	objptr, ##1536
06224     F2 0A 02 FB | 	rdlong	_var06, objptr
06228     01 0A 06 F1 | 	add	_var06, #1
0622c     F2 0A 62 FC | 	wrlong	_var06, objptr
06230     69 00 00 FF 
06234     40 E5 85 F1 | 	sub	objptr, ##54080
06238                 | _compile_unknown_ret
06238     2D 00 64 FD | 	ret
0623c                 | 
0623c                 | ' 
0623c                 | ' function compile_fun_2p() as ulong
0623c                 | _compile_fun_2p
0623c     01 4A 05 F6 | 	mov	COUNT_, #1
06240     A8 00 A0 FD | 	call	#pushregs_
06244     40 22 B0 FD | 	call	#_expr
06248                 | ' 
06248                 | ' expr()
06248                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06248     56 00 00 FF 
0624c     08 E5 05 F1 | 	add	objptr, ##44296
06250     F2 1E 02 FB | 	rdlong	local01, objptr
06254     03 1E 66 F0 | 	shl	local01, #3
06258     02 00 00 FF 
0625c     38 E4 85 F1 | 	sub	objptr, ##1080
06260     F2 1E 02 F1 | 	add	local01, objptr
06264     04 1E 06 F1 | 	add	local01, #4
06268     0F 1F 02 FB | 	rdlong	local01, local01
0626c     11 1E 0E F2 | 	cmp	local01, #17 wz
06270     54 00 00 FF 
06274     D0 E4 85 F1 | 	sub	objptr, ##43216
06278     15 FA 05 56 |  if_ne	mov	result1, #21
0627c     24 00 90 5D |  if_ne	jmp	#LR__0520
06280     56 00 00 FF 
06284     08 E5 05 F1 | 	add	objptr, ##44296
06288     F2 1E 02 FB | 	rdlong	local01, objptr
0628c     01 1E 06 F1 | 	add	local01, #1
06290     F2 1E 62 FC | 	wrlong	local01, objptr
06294     56 00 00 FF 
06298     08 E5 85 F1 | 	sub	objptr, ##44296
0629c     E8 21 B0 FD | 	call	#_expr
062a0     00 FA 05 F6 | 	mov	result1, #0
062a4                 | LR__0520
062a4     A7 F0 03 F6 | 	mov	ptra, fp
062a8     B2 00 A0 FD | 	call	#popregs_
062ac                 | _compile_fun_2p_ret
062ac     2D 00 64 FD | 	ret
062b0                 | 
062b0                 | ' 
062b0                 | ' function compile_fun_3p() as ulong
062b0                 | _compile_fun_3p
062b0     01 4A 05 F6 | 	mov	COUNT_, #1
062b4     A8 00 A0 FD | 	call	#pushregs_
062b8     CC 21 B0 FD | 	call	#_expr
062bc                 | ' 
062bc                 | ' expr()
062bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
062bc     56 00 00 FF 
062c0     08 E5 05 F1 | 	add	objptr, ##44296
062c4     F2 1E 02 FB | 	rdlong	local01, objptr
062c8     03 1E 66 F0 | 	shl	local01, #3
062cc     02 00 00 FF 
062d0     38 E4 85 F1 | 	sub	objptr, ##1080
062d4     F2 1E 02 F1 | 	add	local01, objptr
062d8     04 1E 06 F1 | 	add	local01, #4
062dc     0F 1F 02 FB | 	rdlong	local01, local01
062e0     11 1E 0E F2 | 	cmp	local01, #17 wz
062e4     54 00 00 FF 
062e8     D0 E4 85 F1 | 	sub	objptr, ##43216
062ec     15 FA 05 56 |  if_ne	mov	result1, #21
062f0     7C 00 90 5D |  if_ne	jmp	#LR__0530
062f4     56 00 00 FF 
062f8     08 E5 05 F1 | 	add	objptr, ##44296
062fc     F2 1E 02 FB | 	rdlong	local01, objptr
06300     01 1E 06 F1 | 	add	local01, #1
06304     F2 1E 62 FC | 	wrlong	local01, objptr
06308     56 00 00 FF 
0630c     08 E5 85 F1 | 	sub	objptr, ##44296
06310     74 21 B0 FD | 	call	#_expr
06314                 | ' expr()
06314                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06314     56 00 00 FF 
06318     08 E5 05 F1 | 	add	objptr, ##44296
0631c     F2 1E 02 FB | 	rdlong	local01, objptr
06320     03 1E 66 F0 | 	shl	local01, #3
06324     02 00 00 FF 
06328     38 E4 85 F1 | 	sub	objptr, ##1080
0632c     F2 1E 02 F1 | 	add	local01, objptr
06330     04 1E 06 F1 | 	add	local01, #4
06334     0F 1F 02 FB | 	rdlong	local01, local01
06338     11 1E 0E F2 | 	cmp	local01, #17 wz
0633c     54 00 00 FF 
06340     D0 E4 85 F1 | 	sub	objptr, ##43216
06344     15 FA 05 56 |  if_ne	mov	result1, #21
06348     24 00 90 5D |  if_ne	jmp	#LR__0530
0634c     56 00 00 FF 
06350     08 E5 05 F1 | 	add	objptr, ##44296
06354     F2 1E 02 FB | 	rdlong	local01, objptr
06358     01 1E 06 F1 | 	add	local01, #1
0635c     F2 1E 62 FC | 	wrlong	local01, objptr
06360     56 00 00 FF 
06364     08 E5 85 F1 | 	sub	objptr, ##44296
06368     1C 21 B0 FD | 	call	#_expr
0636c     00 FA 05 F6 | 	mov	result1, #0
06370                 | LR__0530
06370     A7 F0 03 F6 | 	mov	ptra, fp
06374     B2 00 A0 FD | 	call	#popregs_
06378                 | _compile_fun_3p_ret
06378     2D 00 64 FD | 	ret
0637c                 | 
0637c                 | ' 
0637c                 | ' function compile_fun_4p() as ulong
0637c                 | _compile_fun_4p
0637c     01 4A 05 F6 | 	mov	COUNT_, #1
06380     A8 00 A0 FD | 	call	#pushregs_
06384     00 21 B0 FD | 	call	#_expr
06388                 | ' 
06388                 | ' expr()
06388                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06388     56 00 00 FF 
0638c     08 E5 05 F1 | 	add	objptr, ##44296
06390     F2 1E 02 FB | 	rdlong	local01, objptr
06394     03 1E 66 F0 | 	shl	local01, #3
06398     02 00 00 FF 
0639c     38 E4 85 F1 | 	sub	objptr, ##1080
063a0     F2 1E 02 F1 | 	add	local01, objptr
063a4     04 1E 06 F1 | 	add	local01, #4
063a8     0F 1F 02 FB | 	rdlong	local01, local01
063ac     11 1E 0E F2 | 	cmp	local01, #17 wz
063b0     54 00 00 FF 
063b4     D0 E4 85 F1 | 	sub	objptr, ##43216
063b8     15 FA 05 56 |  if_ne	mov	result1, #21
063bc     D4 00 90 5D |  if_ne	jmp	#LR__0540
063c0     56 00 00 FF 
063c4     08 E5 05 F1 | 	add	objptr, ##44296
063c8     F2 1E 02 FB | 	rdlong	local01, objptr
063cc     01 1E 06 F1 | 	add	local01, #1
063d0     F2 1E 62 FC | 	wrlong	local01, objptr
063d4     56 00 00 FF 
063d8     08 E5 85 F1 | 	sub	objptr, ##44296
063dc     A8 20 B0 FD | 	call	#_expr
063e0                 | ' expr()
063e0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
063e0     56 00 00 FF 
063e4     08 E5 05 F1 | 	add	objptr, ##44296
063e8     F2 1E 02 FB | 	rdlong	local01, objptr
063ec     03 1E 66 F0 | 	shl	local01, #3
063f0     02 00 00 FF 
063f4     38 E4 85 F1 | 	sub	objptr, ##1080
063f8     F2 1E 02 F1 | 	add	local01, objptr
063fc     04 1E 06 F1 | 	add	local01, #4
06400     0F 1F 02 FB | 	rdlong	local01, local01
06404     11 1E 0E F2 | 	cmp	local01, #17 wz
06408     54 00 00 FF 
0640c     D0 E4 85 F1 | 	sub	objptr, ##43216
06410     15 FA 05 56 |  if_ne	mov	result1, #21
06414     7C 00 90 5D |  if_ne	jmp	#LR__0540
06418     56 00 00 FF 
0641c     08 E5 05 F1 | 	add	objptr, ##44296
06420     F2 1E 02 FB | 	rdlong	local01, objptr
06424     01 1E 06 F1 | 	add	local01, #1
06428     F2 1E 62 FC | 	wrlong	local01, objptr
0642c     56 00 00 FF 
06430     08 E5 85 F1 | 	sub	objptr, ##44296
06434     50 20 B0 FD | 	call	#_expr
06438                 | ' expr()
06438                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06438     56 00 00 FF 
0643c     08 E5 05 F1 | 	add	objptr, ##44296
06440     F2 1E 02 FB | 	rdlong	local01, objptr
06444     03 1E 66 F0 | 	shl	local01, #3
06448     02 00 00 FF 
0644c     38 E4 85 F1 | 	sub	objptr, ##1080
06450     F2 1E 02 F1 | 	add	local01, objptr
06454     04 1E 06 F1 | 	add	local01, #4
06458     0F 1F 02 FB | 	rdlong	local01, local01
0645c     11 1E 0E F2 | 	cmp	local01, #17 wz
06460     54 00 00 FF 
06464     D0 E4 85 F1 | 	sub	objptr, ##43216
06468     15 FA 05 56 |  if_ne	mov	result1, #21
0646c     24 00 90 5D |  if_ne	jmp	#LR__0540
06470     56 00 00 FF 
06474     08 E5 05 F1 | 	add	objptr, ##44296
06478     F2 1E 02 FB | 	rdlong	local01, objptr
0647c     01 1E 06 F1 | 	add	local01, #1
06480     F2 1E 62 FC | 	wrlong	local01, objptr
06484     56 00 00 FF 
06488     08 E5 85 F1 | 	sub	objptr, ##44296
0648c     F8 1F B0 FD | 	call	#_expr
06490     00 FA 05 F6 | 	mov	result1, #0
06494                 | LR__0540
06494     A7 F0 03 F6 | 	mov	ptra, fp
06498     B2 00 A0 FD | 	call	#popregs_
0649c                 | _compile_fun_4p_ret
0649c     2D 00 64 FD | 	ret
064a0                 | 
064a0                 | ' 
064a0                 | ' 
064a0                 | ' function compile_fun_5p() as ulong
064a0                 | _compile_fun_5p
064a0     01 4A 05 F6 | 	mov	COUNT_, #1
064a4     A8 00 A0 FD | 	call	#pushregs_
064a8     DC 1F B0 FD | 	call	#_expr
064ac                 | ' 
064ac                 | ' expr()
064ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064ac     56 00 00 FF 
064b0     08 E5 05 F1 | 	add	objptr, ##44296
064b4     F2 1E 02 FB | 	rdlong	local01, objptr
064b8     03 1E 66 F0 | 	shl	local01, #3
064bc     02 00 00 FF 
064c0     38 E4 85 F1 | 	sub	objptr, ##1080
064c4     F2 1E 02 F1 | 	add	local01, objptr
064c8     04 1E 06 F1 | 	add	local01, #4
064cc     0F 1F 02 FB | 	rdlong	local01, local01
064d0     11 1E 0E F2 | 	cmp	local01, #17 wz
064d4     54 00 00 FF 
064d8     D0 E4 85 F1 | 	sub	objptr, ##43216
064dc     15 FA 05 56 |  if_ne	mov	result1, #21
064e0     2C 01 90 5D |  if_ne	jmp	#LR__0550
064e4     56 00 00 FF 
064e8     08 E5 05 F1 | 	add	objptr, ##44296
064ec     F2 1E 02 FB | 	rdlong	local01, objptr
064f0     01 1E 06 F1 | 	add	local01, #1
064f4     F2 1E 62 FC | 	wrlong	local01, objptr
064f8     56 00 00 FF 
064fc     08 E5 85 F1 | 	sub	objptr, ##44296
06500     84 1F B0 FD | 	call	#_expr
06504                 | ' expr()
06504                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06504     56 00 00 FF 
06508     08 E5 05 F1 | 	add	objptr, ##44296
0650c     F2 1E 02 FB | 	rdlong	local01, objptr
06510     03 1E 66 F0 | 	shl	local01, #3
06514     02 00 00 FF 
06518     38 E4 85 F1 | 	sub	objptr, ##1080
0651c     F2 1E 02 F1 | 	add	local01, objptr
06520     04 1E 06 F1 | 	add	local01, #4
06524     0F 1F 02 FB | 	rdlong	local01, local01
06528     11 1E 0E F2 | 	cmp	local01, #17 wz
0652c     54 00 00 FF 
06530     D0 E4 85 F1 | 	sub	objptr, ##43216
06534     15 FA 05 56 |  if_ne	mov	result1, #21
06538     D4 00 90 5D |  if_ne	jmp	#LR__0550
0653c     56 00 00 FF 
06540     08 E5 05 F1 | 	add	objptr, ##44296
06544     F2 1E 02 FB | 	rdlong	local01, objptr
06548     01 1E 06 F1 | 	add	local01, #1
0654c     F2 1E 62 FC | 	wrlong	local01, objptr
06550     56 00 00 FF 
06554     08 E5 85 F1 | 	sub	objptr, ##44296
06558     2C 1F B0 FD | 	call	#_expr
0655c                 | ' expr()
0655c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0655c     56 00 00 FF 
06560     08 E5 05 F1 | 	add	objptr, ##44296
06564     F2 1E 02 FB | 	rdlong	local01, objptr
06568     03 1E 66 F0 | 	shl	local01, #3
0656c     02 00 00 FF 
06570     38 E4 85 F1 | 	sub	objptr, ##1080
06574     F2 1E 02 F1 | 	add	local01, objptr
06578     04 1E 06 F1 | 	add	local01, #4
0657c     0F 1F 02 FB | 	rdlong	local01, local01
06580     11 1E 0E F2 | 	cmp	local01, #17 wz
06584     54 00 00 FF 
06588     D0 E4 85 F1 | 	sub	objptr, ##43216
0658c     15 FA 05 56 |  if_ne	mov	result1, #21
06590     7C 00 90 5D |  if_ne	jmp	#LR__0550
06594     56 00 00 FF 
06598     08 E5 05 F1 | 	add	objptr, ##44296
0659c     F2 1E 02 FB | 	rdlong	local01, objptr
065a0     01 1E 06 F1 | 	add	local01, #1
065a4     F2 1E 62 FC | 	wrlong	local01, objptr
065a8     56 00 00 FF 
065ac     08 E5 85 F1 | 	sub	objptr, ##44296
065b0     D4 1E B0 FD | 	call	#_expr
065b4                 | ' expr()
065b4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
065b4     56 00 00 FF 
065b8     08 E5 05 F1 | 	add	objptr, ##44296
065bc     F2 1E 02 FB | 	rdlong	local01, objptr
065c0     03 1E 66 F0 | 	shl	local01, #3
065c4     02 00 00 FF 
065c8     38 E4 85 F1 | 	sub	objptr, ##1080
065cc     F2 1E 02 F1 | 	add	local01, objptr
065d0     04 1E 06 F1 | 	add	local01, #4
065d4     0F 1F 02 FB | 	rdlong	local01, local01
065d8     11 1E 0E F2 | 	cmp	local01, #17 wz
065dc     54 00 00 FF 
065e0     D0 E4 85 F1 | 	sub	objptr, ##43216
065e4     15 FA 05 56 |  if_ne	mov	result1, #21
065e8     24 00 90 5D |  if_ne	jmp	#LR__0550
065ec     56 00 00 FF 
065f0     08 E5 05 F1 | 	add	objptr, ##44296
065f4     F2 1E 02 FB | 	rdlong	local01, objptr
065f8     01 1E 06 F1 | 	add	local01, #1
065fc     F2 1E 62 FC | 	wrlong	local01, objptr
06600     56 00 00 FF 
06604     08 E5 85 F1 | 	sub	objptr, ##44296
06608     7C 1E B0 FD | 	call	#_expr
0660c     00 FA 05 F6 | 	mov	result1, #0
06610                 | LR__0550
06610     A7 F0 03 F6 | 	mov	ptra, fp
06614     B2 00 A0 FD | 	call	#popregs_
06618                 | _compile_fun_5p_ret
06618     2D 00 64 FD | 	ret
0661c                 | 
0661c                 | ' 
0661c                 | ' function compile_fun_varp() as ulong 
0661c                 | _compile_fun_varp
0661c     02 4A 05 F6 | 	mov	COUNT_, #2
06620     A8 00 A0 FD | 	call	#pushregs_
06624     00 1E 06 F6 | 	mov	local01, #0
06628                 | ' i=0
06628                 | ' if lparts(ct).token<>token_end then
06628     56 00 00 FF 
0662c     08 E5 05 F1 | 	add	objptr, ##44296
06630     F2 20 02 FB | 	rdlong	local02, objptr
06634     03 20 66 F0 | 	shl	local02, #3
06638     02 00 00 FF 
0663c     38 E4 85 F1 | 	sub	objptr, ##1080
06640     F2 20 02 F1 | 	add	local02, objptr
06644     04 20 06 F1 | 	add	local02, #4
06648     10 21 02 FB | 	rdlong	local02, local02
0664c     FE 21 0E F2 | 	cmp	local02, #510 wz
06650     54 00 00 FF 
06654     D0 E4 85 F1 | 	sub	objptr, ##43216
06658     5C 00 90 AD |  if_e	jmp	#LR__0562
0665c                 | '   do
0665c                 | LR__0560
0665c     28 1E B0 FD | 	call	#_expr
06660     01 1E 06 F1 | 	add	local01, #1
06664                 | '   expr()
06664                 | '    i+=1
06664                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06664     56 00 00 FF 
06668     08 E5 05 F1 | 	add	objptr, ##44296
0666c     F2 20 02 FB | 	rdlong	local02, objptr
06670     03 20 66 F0 | 	shl	local02, #3
06674     02 00 00 FF 
06678     38 E4 85 F1 | 	sub	objptr, ##1080
0667c     F2 20 02 F1 | 	add	local02, objptr
06680     04 20 06 F1 | 	add	local02, #4
06684     10 21 02 FB | 	rdlong	local02, local02
06688     11 20 0E F2 | 	cmp	local02, #17 wz
0668c     54 00 00 FF 
06690     D0 E4 85 F1 | 	sub	objptr, ##43216
06694     20 00 90 5D |  if_ne	jmp	#LR__0561
06698     56 00 00 FF 
0669c     08 E5 05 F1 | 	add	objptr, ##44296
066a0     F2 20 02 FB | 	rdlong	local02, objptr
066a4     01 20 06 F1 | 	add	local02, #1
066a8     F2 20 62 FC | 	wrlong	local02, objptr
066ac     56 00 00 FF 
066b0     08 E5 85 F1 | 	sub	objptr, ##44296
066b4     A4 FF 9F FD | 	jmp	#LR__0560
066b8                 | LR__0561
066b8                 | LR__0562
066b8                 | ' return i
066b8     0F FB 01 F6 | 	mov	result1, local01
066bc     A7 F0 03 F6 | 	mov	ptra, fp
066c0     B2 00 A0 FD | 	call	#popregs_
066c4                 | _compile_fun_varp_ret
066c4     2D 00 64 FD | 	ret
066c8                 | 
066c8                 | ' 
066c8                 | ' 
066c8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
066c8                 | _compile_print
066c8     0B 4A 05 F6 | 	mov	COUNT_, #11
066cc     A8 00 A0 FD | 	call	#pushregs_
066d0     00 1E 06 F6 | 	mov	local01, #0
066d4     1D 22 06 F6 | 	mov	local03, #29
066d8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
066d8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
066d8     56 00 00 FF 
066dc     08 E5 05 F1 | 	add	objptr, ##44296
066e0     F2 24 02 FB | 	rdlong	local04, objptr
066e4     03 24 66 F0 | 	shl	local04, #3
066e8     02 00 00 FF 
066ec     38 E4 85 F1 | 	sub	objptr, ##1080
066f0     F2 24 02 F1 | 	add	local04, objptr
066f4     04 24 06 F1 | 	add	local04, #4
066f8     12 25 02 FB | 	rdlong	local04, local04
066fc     FE 25 0E F2 | 	cmp	local04, #510 wz
06700     54 00 00 FF 
06704     D0 E4 85 F1 | 	sub	objptr, ##43216
06708     68 01 90 5D |  if_ne	jmp	#LR__0570
0670c     20 22 06 F6 | 	mov	local03, #32
06710     0F 27 02 F6 | 	mov	local05, local01
06714     10 29 02 F6 | 	mov	local06, local02
06718     11 2B 02 F6 | 	mov	local07, local03
0671c     69 00 00 FF 
06720     40 E5 05 F1 | 	add	objptr, ##54080
06724     F2 2C 02 FB | 	rdlong	local08, objptr
06728     16 2F 02 F6 | 	mov	local09, local08
0672c     01 2E 66 F0 | 	shl	local09, #1
06730     16 2F 02 F1 | 	add	local09, local08
06734     02 2E 66 F0 | 	shl	local09, #2
06738     03 00 00 FF 
0673c     00 E4 85 F1 | 	sub	objptr, ##1536
06740     F2 2E 02 F1 | 	add	local09, objptr
06744     17 27 62 FC | 	wrlong	local05, local09
06748     03 00 00 FF 
0674c     00 E4 05 F1 | 	add	objptr, ##1536
06750     F2 26 02 FB | 	rdlong	local05, objptr
06754     13 31 02 F6 | 	mov	local10, local05
06758     01 30 66 F0 | 	shl	local10, #1
0675c     13 31 02 F1 | 	add	local10, local05
06760     02 30 66 F0 | 	shl	local10, #2
06764     03 00 00 FF 
06768     00 E4 85 F1 | 	sub	objptr, ##1536
0676c     F2 30 02 F1 | 	add	local10, objptr
06770     04 30 06 F1 | 	add	local10, #4
06774     18 29 62 FC | 	wrlong	local06, local10
06778     03 00 00 FF 
0677c     00 E4 05 F1 | 	add	objptr, ##1536
06780     F2 26 02 FB | 	rdlong	local05, objptr
06784     13 33 02 F6 | 	mov	local11, local05
06788     01 32 66 F0 | 	shl	local11, #1
0678c     13 33 02 F1 | 	add	local11, local05
06790     02 32 66 F0 | 	shl	local11, #2
06794     03 00 00 FF 
06798     00 E4 85 F1 | 	sub	objptr, ##1536
0679c     F2 32 02 F1 | 	add	local11, objptr
067a0     08 32 06 F1 | 	add	local11, #8
067a4     19 2B 62 FC | 	wrlong	local07, local11
067a8     03 00 00 FF 
067ac     00 E4 05 F1 | 	add	objptr, ##1536
067b0     F2 26 02 FB | 	rdlong	local05, objptr
067b4     01 26 06 F1 | 	add	local05, #1
067b8     F2 26 62 FC | 	wrlong	local05, objptr
067bc     44 22 06 F6 | 	mov	local03, #68
067c0     0F 27 02 F6 | 	mov	local05, local01
067c4     10 29 02 F6 | 	mov	local06, local02
067c8     11 2B 02 F6 | 	mov	local07, local03
067cc     F2 2C 02 FB | 	rdlong	local08, objptr
067d0     16 2F 02 F6 | 	mov	local09, local08
067d4     01 2E 66 F0 | 	shl	local09, #1
067d8     16 2F 02 F1 | 	add	local09, local08
067dc     02 2E 66 F0 | 	shl	local09, #2
067e0     03 00 00 FF 
067e4     00 E4 85 F1 | 	sub	objptr, ##1536
067e8     F2 2E 02 F1 | 	add	local09, objptr
067ec     17 27 62 FC | 	wrlong	local05, local09
067f0     03 00 00 FF 
067f4     00 E4 05 F1 | 	add	objptr, ##1536
067f8     F2 32 02 FB | 	rdlong	local11, objptr
067fc     19 31 02 F6 | 	mov	local10, local11
06800     01 30 66 F0 | 	shl	local10, #1
06804     19 31 02 F1 | 	add	local10, local11
06808     02 30 66 F0 | 	shl	local10, #2
0680c     03 00 00 FF 
06810     00 E4 85 F1 | 	sub	objptr, ##1536
06814     F2 30 02 F1 | 	add	local10, objptr
06818     04 30 06 F1 | 	add	local10, #4
0681c     18 29 62 FC | 	wrlong	local06, local10
06820     03 00 00 FF 
06824     00 E4 05 F1 | 	add	objptr, ##1536
06828     F2 30 02 FB | 	rdlong	local10, objptr
0682c     18 33 02 F6 | 	mov	local11, local10
06830     01 32 66 F0 | 	shl	local11, #1
06834     18 33 02 F1 | 	add	local11, local10
06838     02 32 66 F0 | 	shl	local11, #2
0683c     03 00 00 FF 
06840     00 E4 85 F1 | 	sub	objptr, ##1536
06844     F2 32 02 F1 | 	add	local11, objptr
06848     08 32 06 F1 | 	add	local11, #8
0684c     19 2B 62 FC | 	wrlong	local07, local11
06850     03 00 00 FF 
06854     00 E4 05 F1 | 	add	objptr, ##1536
06858     F2 26 02 FB | 	rdlong	local05, objptr
0685c     01 26 06 F1 | 	add	local05, #1
06860     F2 26 62 FC | 	wrlong	local05, objptr
06864     69 00 00 FF 
06868     40 E5 85 F1 | 	sub	objptr, ##54080
0686c     00 FA 05 F6 | 	mov	result1, #0
06870     20 05 90 FD | 	jmp	#LR__0577
06874                 | LR__0570
06874                 | ' do
06874                 | LR__0571
06874     10 1C B0 FD | 	call	#_expr
06878                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
06878                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06878     56 00 00 FF 
0687c     08 E5 05 F1 | 	add	objptr, ##44296
06880     F2 24 02 FB | 	rdlong	local04, objptr
06884     03 24 66 F0 | 	shl	local04, #3
06888     02 00 00 FF 
0688c     38 E4 85 F1 | 	sub	objptr, ##1080
06890     F2 24 02 F1 | 	add	local04, objptr
06894     04 24 06 F1 | 	add	local04, #4
06898     12 2D 02 FB | 	rdlong	local08, local04
0689c     11 2C 0E F2 | 	cmp	local08, #17 wz
068a0     54 00 00 FF 
068a4     D0 E4 85 F1 | 	sub	objptr, ##43216
068a8     60 01 90 5D |  if_ne	jmp	#LR__0572
068ac     21 22 06 F6 | 	mov	local03, #33
068b0     0F 27 02 F6 | 	mov	local05, local01
068b4     10 29 02 F6 | 	mov	local06, local02
068b8     11 2B 02 F6 | 	mov	local07, local03
068bc     69 00 00 FF 
068c0     40 E5 05 F1 | 	add	objptr, ##54080
068c4     F2 2C 02 FB | 	rdlong	local08, objptr
068c8     16 2F 02 F6 | 	mov	local09, local08
068cc     01 2E 66 F0 | 	shl	local09, #1
068d0     16 2F 02 F1 | 	add	local09, local08
068d4     02 2E 66 F0 | 	shl	local09, #2
068d8     03 00 00 FF 
068dc     00 E4 85 F1 | 	sub	objptr, ##1536
068e0     F2 2E 02 F1 | 	add	local09, objptr
068e4     17 27 62 FC | 	wrlong	local05, local09
068e8     03 00 00 FF 
068ec     00 E4 05 F1 | 	add	objptr, ##1536
068f0     F2 32 02 FB | 	rdlong	local11, objptr
068f4     19 31 02 F6 | 	mov	local10, local11
068f8     01 30 66 F0 | 	shl	local10, #1
068fc     19 31 02 F1 | 	add	local10, local11
06900     02 30 66 F0 | 	shl	local10, #2
06904     03 00 00 FF 
06908     00 E4 85 F1 | 	sub	objptr, ##1536
0690c     F2 30 02 F1 | 	add	local10, objptr
06910     04 30 06 F1 | 	add	local10, #4
06914     18 29 62 FC | 	wrlong	local06, local10
06918     03 00 00 FF 
0691c     00 E4 05 F1 | 	add	objptr, ##1536
06920     F2 26 02 FB | 	rdlong	local05, objptr
06924     13 33 02 F6 | 	mov	local11, local05
06928     01 32 66 F0 | 	shl	local11, #1
0692c     13 33 02 F1 | 	add	local11, local05
06930     02 32 66 F0 | 	shl	local11, #2
06934     03 00 00 FF 
06938     00 E4 85 F1 | 	sub	objptr, ##1536
0693c     F2 32 02 F1 | 	add	local11, objptr
06940     08 32 06 F1 | 	add	local11, #8
06944     19 2B 62 FC | 	wrlong	local07, local11
06948     03 00 00 FF 
0694c     00 E4 05 F1 | 	add	objptr, ##1536
06950     F2 26 02 FB | 	rdlong	local05, objptr
06954     01 26 06 F1 | 	add	local05, #1
06958     F2 26 62 FC | 	wrlong	local05, objptr
0695c     44 22 06 F6 | 	mov	local03, #68
06960     0F 27 02 F6 | 	mov	local05, local01
06964     10 29 02 F6 | 	mov	local06, local02
06968     11 2B 02 F6 | 	mov	local07, local03
0696c     F2 2C 02 FB | 	rdlong	local08, objptr
06970     16 2F 02 F6 | 	mov	local09, local08
06974     01 2E 66 F0 | 	shl	local09, #1
06978     16 2F 02 F1 | 	add	local09, local08
0697c     02 2E 66 F0 | 	shl	local09, #2
06980     03 00 00 FF 
06984     00 E4 85 F1 | 	sub	objptr, ##1536
06988     F2 2E 02 F1 | 	add	local09, objptr
0698c     17 27 62 FC | 	wrlong	local05, local09
06990     03 00 00 FF 
06994     00 E4 05 F1 | 	add	objptr, ##1536
06998     F2 32 02 FB | 	rdlong	local11, objptr
0699c     19 31 02 F6 | 	mov	local10, local11
069a0     01 30 66 F0 | 	shl	local10, #1
069a4     19 31 02 F1 | 	add	local10, local11
069a8     02 30 66 F0 | 	shl	local10, #2
069ac     03 00 00 FF 
069b0     00 E4 85 F1 | 	sub	objptr, ##1536
069b4     F2 30 02 F1 | 	add	local10, objptr
069b8     04 30 06 F1 | 	add	local10, #4
069bc     18 29 62 FC | 	wrlong	local06, local10
069c0     03 00 00 FF 
069c4     00 E4 05 F1 | 	add	objptr, ##1536
069c8     F2 30 02 FB | 	rdlong	local10, objptr
069cc     18 33 02 F6 | 	mov	local11, local10
069d0     01 32 66 F0 | 	shl	local11, #1
069d4     18 33 02 F1 | 	add	local11, local10
069d8     02 32 66 F0 | 	shl	local11, #2
069dc     03 00 00 FF 
069e0     00 E4 85 F1 | 	sub	objptr, ##1536
069e4     F2 32 02 F1 | 	add	local11, objptr
069e8     08 32 06 F1 | 	add	local11, #8
069ec     19 2B 62 FC | 	wrlong	local07, local11
069f0     03 00 00 FF 
069f4     00 E4 05 F1 | 	add	objptr, ##1536
069f8     F2 26 02 FB | 	rdlong	local05, objptr
069fc     01 26 06 F1 | 	add	local05, #1
06a00     F2 26 62 FC | 	wrlong	local05, objptr
06a04     69 00 00 FF 
06a08     40 E5 85 F1 | 	sub	objptr, ##54080
06a0c                 | LR__0572
06a0c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06a0c     56 00 00 FF 
06a10     08 E5 05 F1 | 	add	objptr, ##44296
06a14     F2 24 02 FB | 	rdlong	local04, objptr
06a18     03 24 66 F0 | 	shl	local04, #3
06a1c     02 00 00 FF 
06a20     38 E4 85 F1 | 	sub	objptr, ##1080
06a24     F2 24 02 F1 | 	add	local04, objptr
06a28     04 24 06 F1 | 	add	local04, #4
06a2c     12 2D 02 FB | 	rdlong	local08, local04
06a30     12 2C 0E F2 | 	cmp	local08, #18 wz
06a34     54 00 00 FF 
06a38     D0 E4 85 F1 | 	sub	objptr, ##43216
06a3c     60 01 90 5D |  if_ne	jmp	#LR__0573
06a40     22 22 06 F6 | 	mov	local03, #34
06a44     0F 27 02 F6 | 	mov	local05, local01
06a48     10 29 02 F6 | 	mov	local06, local02
06a4c     11 2B 02 F6 | 	mov	local07, local03
06a50     69 00 00 FF 
06a54     40 E5 05 F1 | 	add	objptr, ##54080
06a58     F2 2C 02 FB | 	rdlong	local08, objptr
06a5c     16 2F 02 F6 | 	mov	local09, local08
06a60     01 2E 66 F0 | 	shl	local09, #1
06a64     16 2F 02 F1 | 	add	local09, local08
06a68     02 2E 66 F0 | 	shl	local09, #2
06a6c     03 00 00 FF 
06a70     00 E4 85 F1 | 	sub	objptr, ##1536
06a74     F2 2E 02 F1 | 	add	local09, objptr
06a78     17 27 62 FC | 	wrlong	local05, local09
06a7c     03 00 00 FF 
06a80     00 E4 05 F1 | 	add	objptr, ##1536
06a84     F2 32 02 FB | 	rdlong	local11, objptr
06a88     19 31 02 F6 | 	mov	local10, local11
06a8c     01 30 66 F0 | 	shl	local10, #1
06a90     19 31 02 F1 | 	add	local10, local11
06a94     02 30 66 F0 | 	shl	local10, #2
06a98     03 00 00 FF 
06a9c     00 E4 85 F1 | 	sub	objptr, ##1536
06aa0     F2 30 02 F1 | 	add	local10, objptr
06aa4     04 30 06 F1 | 	add	local10, #4
06aa8     18 29 62 FC | 	wrlong	local06, local10
06aac     03 00 00 FF 
06ab0     00 E4 05 F1 | 	add	objptr, ##1536
06ab4     F2 26 02 FB | 	rdlong	local05, objptr
06ab8     13 33 02 F6 | 	mov	local11, local05
06abc     01 32 66 F0 | 	shl	local11, #1
06ac0     13 33 02 F1 | 	add	local11, local05
06ac4     02 32 66 F0 | 	shl	local11, #2
06ac8     03 00 00 FF 
06acc     00 E4 85 F1 | 	sub	objptr, ##1536
06ad0     F2 32 02 F1 | 	add	local11, objptr
06ad4     08 32 06 F1 | 	add	local11, #8
06ad8     19 2B 62 FC | 	wrlong	local07, local11
06adc     03 00 00 FF 
06ae0     00 E4 05 F1 | 	add	objptr, ##1536
06ae4     F2 26 02 FB | 	rdlong	local05, objptr
06ae8     01 26 06 F1 | 	add	local05, #1
06aec     F2 26 62 FC | 	wrlong	local05, objptr
06af0     44 22 06 F6 | 	mov	local03, #68
06af4     0F 27 02 F6 | 	mov	local05, local01
06af8     10 29 02 F6 | 	mov	local06, local02
06afc     11 2B 02 F6 | 	mov	local07, local03
06b00     F2 2C 02 FB | 	rdlong	local08, objptr
06b04     16 2F 02 F6 | 	mov	local09, local08
06b08     01 2E 66 F0 | 	shl	local09, #1
06b0c     16 2F 02 F1 | 	add	local09, local08
06b10     02 2E 66 F0 | 	shl	local09, #2
06b14     03 00 00 FF 
06b18     00 E4 85 F1 | 	sub	objptr, ##1536
06b1c     F2 2E 02 F1 | 	add	local09, objptr
06b20     17 27 62 FC | 	wrlong	local05, local09
06b24     03 00 00 FF 
06b28     00 E4 05 F1 | 	add	objptr, ##1536
06b2c     F2 32 02 FB | 	rdlong	local11, objptr
06b30     19 31 02 F6 | 	mov	local10, local11
06b34     01 30 66 F0 | 	shl	local10, #1
06b38     19 31 02 F1 | 	add	local10, local11
06b3c     02 30 66 F0 | 	shl	local10, #2
06b40     03 00 00 FF 
06b44     00 E4 85 F1 | 	sub	objptr, ##1536
06b48     F2 30 02 F1 | 	add	local10, objptr
06b4c     04 30 06 F1 | 	add	local10, #4
06b50     18 29 62 FC | 	wrlong	local06, local10
06b54     03 00 00 FF 
06b58     00 E4 05 F1 | 	add	objptr, ##1536
06b5c     F2 30 02 FB | 	rdlong	local10, objptr
06b60     18 33 02 F6 | 	mov	local11, local10
06b64     01 32 66 F0 | 	shl	local11, #1
06b68     18 33 02 F1 | 	add	local11, local10
06b6c     02 32 66 F0 | 	shl	local11, #2
06b70     03 00 00 FF 
06b74     00 E4 85 F1 | 	sub	objptr, ##1536
06b78     F2 32 02 F1 | 	add	local11, objptr
06b7c     08 32 06 F1 | 	add	local11, #8
06b80     19 2B 62 FC | 	wrlong	local07, local11
06b84     03 00 00 FF 
06b88     00 E4 05 F1 | 	add	objptr, ##1536
06b8c     F2 26 02 FB | 	rdlong	local05, objptr
06b90     01 26 06 F1 | 	add	local05, #1
06b94     F2 26 62 FC | 	wrlong	local05, objptr
06b98     69 00 00 FF 
06b9c     40 E5 85 F1 | 	sub	objptr, ##54080
06ba0                 | LR__0573
06ba0                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06ba0     56 00 00 FF 
06ba4     08 E5 05 F1 | 	add	objptr, ##44296
06ba8     F2 24 02 FB | 	rdlong	local04, objptr
06bac     03 24 66 F0 | 	shl	local04, #3
06bb0     02 00 00 FF 
06bb4     38 E4 85 F1 | 	sub	objptr, ##1080
06bb8     F2 24 02 F1 | 	add	local04, objptr
06bbc     04 24 06 F1 | 	add	local04, #4
06bc0     12 2D 02 FB | 	rdlong	local08, local04
06bc4     FE 2D 0E F2 | 	cmp	local08, #510 wz
06bc8     54 00 00 FF 
06bcc     D0 E4 85 F1 | 	sub	objptr, ##43216
06bd0     B8 00 90 5D |  if_ne	jmp	#LR__0574
06bd4     44 22 06 F6 | 	mov	local03, #68
06bd8     0F 27 02 F6 | 	mov	local05, local01
06bdc     10 29 02 F6 | 	mov	local06, local02
06be0     11 2B 02 F6 | 	mov	local07, local03
06be4     69 00 00 FF 
06be8     40 E5 05 F1 | 	add	objptr, ##54080
06bec     F2 2C 02 FB | 	rdlong	local08, objptr
06bf0     16 2F 02 F6 | 	mov	local09, local08
06bf4     01 2E 66 F0 | 	shl	local09, #1
06bf8     16 2F 02 F1 | 	add	local09, local08
06bfc     02 2E 66 F0 | 	shl	local09, #2
06c00     03 00 00 FF 
06c04     00 E4 85 F1 | 	sub	objptr, ##1536
06c08     F2 2E 02 F1 | 	add	local09, objptr
06c0c     17 27 62 FC | 	wrlong	local05, local09
06c10     03 00 00 FF 
06c14     00 E4 05 F1 | 	add	objptr, ##1536
06c18     F2 32 02 FB | 	rdlong	local11, objptr
06c1c     19 31 02 F6 | 	mov	local10, local11
06c20     01 30 66 F0 | 	shl	local10, #1
06c24     19 31 02 F1 | 	add	local10, local11
06c28     02 30 66 F0 | 	shl	local10, #2
06c2c     03 00 00 FF 
06c30     00 E4 85 F1 | 	sub	objptr, ##1536
06c34     F2 30 02 F1 | 	add	local10, objptr
06c38     04 30 06 F1 | 	add	local10, #4
06c3c     18 29 62 FC | 	wrlong	local06, local10
06c40     03 00 00 FF 
06c44     00 E4 05 F1 | 	add	objptr, ##1536
06c48     F2 30 02 FB | 	rdlong	local10, objptr
06c4c     18 33 02 F6 | 	mov	local11, local10
06c50     01 32 66 F0 | 	shl	local11, #1
06c54     18 33 02 F1 | 	add	local11, local10
06c58     02 32 66 F0 | 	shl	local11, #2
06c5c     03 00 00 FF 
06c60     00 E4 85 F1 | 	sub	objptr, ##1536
06c64     F2 32 02 F1 | 	add	local11, objptr
06c68     08 32 06 F1 | 	add	local11, #8
06c6c     19 2B 62 FC | 	wrlong	local07, local11
06c70     03 00 00 FF 
06c74     00 E4 05 F1 | 	add	objptr, ##1536
06c78     F2 26 02 FB | 	rdlong	local05, objptr
06c7c     01 26 06 F1 | 	add	local05, #1
06c80     F2 26 62 FC | 	wrlong	local05, objptr
06c84     69 00 00 FF 
06c88     40 E5 85 F1 | 	sub	objptr, ##54080
06c8c                 | LR__0574
06c8c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06c8c     56 00 00 FF 
06c90     08 E5 05 F1 | 	add	objptr, ##44296
06c94     F2 24 02 FB | 	rdlong	local04, objptr
06c98     03 24 66 F0 | 	shl	local04, #3
06c9c     02 00 00 FF 
06ca0     38 E4 85 F1 | 	sub	objptr, ##1080
06ca4     F2 24 02 F1 | 	add	local04, objptr
06ca8     04 24 06 F1 | 	add	local04, #4
06cac     12 2D 02 FB | 	rdlong	local08, local04
06cb0     11 2C 0E F2 | 	cmp	local08, #17 wz
06cb4     54 00 00 FF 
06cb8     D0 E4 85 F1 | 	sub	objptr, ##43216
06cbc     6C 00 90 AD |  if_e	jmp	#LR__0575
06cc0     56 00 00 FF 
06cc4     08 E5 05 F1 | 	add	objptr, ##44296
06cc8     F2 2C 02 FB | 	rdlong	local08, objptr
06ccc     03 2C 66 F0 | 	shl	local08, #3
06cd0     02 00 00 FF 
06cd4     38 E4 85 F1 | 	sub	objptr, ##1080
06cd8     F2 2C 02 F1 | 	add	local08, objptr
06cdc     04 2C 06 F1 | 	add	local08, #4
06ce0     16 2D 02 FB | 	rdlong	local08, local08
06ce4     12 2C 0E F2 | 	cmp	local08, #18 wz
06ce8     54 00 00 FF 
06cec     D0 E4 85 F1 | 	sub	objptr, ##43216
06cf0     38 00 90 AD |  if_e	jmp	#LR__0575
06cf4     56 00 00 FF 
06cf8     08 E5 05 F1 | 	add	objptr, ##44296
06cfc     F2 32 02 FB | 	rdlong	local11, objptr
06d00     03 32 66 F0 | 	shl	local11, #3
06d04     02 00 00 FF 
06d08     38 E4 85 F1 | 	sub	objptr, ##1080
06d0c     F2 32 02 F1 | 	add	local11, objptr
06d10     04 32 06 F1 | 	add	local11, #4
06d14     19 33 02 FB | 	rdlong	local11, local11
06d18     FE 33 0E F2 | 	cmp	local11, #510 wz
06d1c     54 00 00 FF 
06d20     D0 E4 85 F1 | 	sub	objptr, ##43216
06d24     16 FA 05 56 |  if_ne	mov	result1, #22
06d28     68 00 90 5D |  if_ne	jmp	#LR__0577
06d2c                 | LR__0575
06d2c     56 00 00 FF 
06d30     08 E5 05 F1 | 	add	objptr, ##44296
06d34     F2 24 02 FB | 	rdlong	local04, objptr
06d38     01 24 06 F1 | 	add	local04, #1
06d3c     F2 24 62 FC | 	wrlong	local04, objptr
06d40     03 24 66 F0 | 	shl	local04, #3
06d44     02 00 00 FF 
06d48     38 E4 85 F1 | 	sub	objptr, ##1080
06d4c     F2 24 02 F1 | 	add	local04, objptr
06d50     04 24 06 F1 | 	add	local04, #4
06d54     12 2D 02 FB | 	rdlong	local08, local04
06d58     FE 2D 0E F2 | 	cmp	local08, #510 wz
06d5c     54 00 00 FF 
06d60     D0 E4 85 F1 | 	sub	objptr, ##43216
06d64     28 00 90 AD |  if_e	jmp	#LR__0576
06d68     56 00 00 FF 
06d6c     08 E5 05 F1 | 	add	objptr, ##44296
06d70     F2 32 02 FB | 	rdlong	local11, objptr
06d74     0E 00 00 FF 
06d78     1C E4 05 F1 | 	add	objptr, ##7196
06d7c     F2 30 02 FB | 	rdlong	local10, objptr
06d80     64 00 00 FF 
06d84     24 E5 85 F1 | 	sub	objptr, ##51492
06d88     18 33 52 F2 | 	cmps	local11, local10 wc
06d8c     E4 FA 9F CD |  if_b	jmp	#LR__0571
06d90                 | LR__0576
06d90                 | ' return 0
06d90     00 FA 05 F6 | 	mov	result1, #0
06d94                 | LR__0577
06d94     A7 F0 03 F6 | 	mov	ptra, fp
06d98     B2 00 A0 FD | 	call	#popregs_
06d9c                 | _compile_print_ret
06d9c     2D 00 64 FD | 	ret
06da0                 | 
06da0                 | ' 
06da0                 | ' function compile_if() as ulong  
06da0                 | _compile_if
06da0     05 4A 05 F6 | 	mov	COUNT_, #5
06da4     A8 00 A0 FD | 	call	#pushregs_
06da8                 | _compile_if_enter
06da8     DC 16 B0 FD | 	call	#_expr
06dac                 | ' expr()
06dac                 | ' return 0
06dac     56 00 00 FF 
06db0     08 E5 05 F1 | 	add	objptr, ##44296
06db4     F2 FA 01 FB | 	rdlong	result1, objptr
06db8     01 FA 05 F1 | 	add	result1, #1
06dbc     F2 FA 61 FC | 	wrlong	result1, objptr
06dc0     58 22 06 F6 | 	mov	local03, #88
06dc4     0F 25 02 F6 | 	mov	local04, local01
06dc8     10 27 02 F6 | 	mov	local05, local02
06dcc     11 1F 02 F6 | 	mov	local01, local03
06dd0     13 00 00 FF 
06dd4     38 E4 05 F1 | 	add	objptr, ##9784
06dd8     F2 12 02 FB | 	rdlong	arg01, objptr
06ddc     09 FB 01 F6 | 	mov	result1, arg01
06de0     01 FA 65 F0 | 	shl	result1, #1
06de4     09 FB 01 F1 | 	add	result1, arg01
06de8     02 FA 65 F0 | 	shl	result1, #2
06dec     03 00 00 FF 
06df0     00 E4 85 F1 | 	sub	objptr, ##1536
06df4     F2 FA 01 F1 | 	add	result1, objptr
06df8     FD 24 62 FC | 	wrlong	local04, result1
06dfc     03 00 00 FF 
06e00     00 E4 05 F1 | 	add	objptr, ##1536
06e04     F2 12 02 FB | 	rdlong	arg01, objptr
06e08     09 25 02 F6 | 	mov	local04, arg01
06e0c     01 24 66 F0 | 	shl	local04, #1
06e10     09 25 02 F1 | 	add	local04, arg01
06e14     02 24 66 F0 | 	shl	local04, #2
06e18     03 00 00 FF 
06e1c     00 E4 85 F1 | 	sub	objptr, ##1536
06e20     F2 24 02 F1 | 	add	local04, objptr
06e24     04 24 06 F1 | 	add	local04, #4
06e28     12 27 62 FC | 	wrlong	local05, local04
06e2c     03 00 00 FF 
06e30     00 E4 05 F1 | 	add	objptr, ##1536
06e34     F2 24 02 FB | 	rdlong	local04, objptr
06e38     12 27 02 F6 | 	mov	local05, local04
06e3c     01 26 66 F0 | 	shl	local05, #1
06e40     12 27 02 F1 | 	add	local05, local04
06e44     02 26 66 F0 | 	shl	local05, #2
06e48     03 00 00 FF 
06e4c     00 E4 85 F1 | 	sub	objptr, ##1536
06e50     F2 26 02 F1 | 	add	local05, objptr
06e54     08 26 06 F1 | 	add	local05, #8
06e58     13 1F 62 FC | 	wrlong	local01, local05
06e5c     03 00 00 FF 
06e60     00 E4 05 F1 | 	add	objptr, ##1536
06e64     F2 24 02 FB | 	rdlong	local04, objptr
06e68     01 24 06 F1 | 	add	local04, #1
06e6c     F2 24 62 FC | 	wrlong	local04, objptr
06e70                 | ' 
06e70                 | ' 'print "In compile_if"
06e70                 | ' compile_fun_1p()
06e70                 | ' cmd=lparts(ct).token : ct+=1
06e70                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
06e70                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
06e70                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06e70     13 00 00 FF 
06e74     38 E4 85 F1 | 	sub	objptr, ##9784
06e78     F2 26 02 FB | 	rdlong	local05, objptr
06e7c     01 26 06 F1 | 	add	local05, #1
06e80     03 26 66 F0 | 	shl	local05, #3
06e84     02 00 00 FF 
06e88     38 E4 85 F1 | 	sub	objptr, ##1080
06e8c     F2 26 02 F1 | 	add	local05, objptr
06e90     13 13 02 FB | 	rdlong	arg01, local05
06e94     54 00 00 FF 
06e98     D0 E4 85 F1 | 	sub	objptr, ##43216
06e9c                 | ' 
06e9c                 | ' select case s
06e9c     45 01 00 FF 
06ea0     19 15 06 F6 | 	mov	arg02, ##@LR__4414
06ea4     B8 25 B1 FD | 	call	#__system___string_cmp
06ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
06eac     1B FA 05 A6 |  if_e	mov	result1, #27
06eb0     00 FA 05 56 |  if_ne	mov	result1, #0
06eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
06eb8     0C 00 90 AD |  if_e	jmp	#LR__0580
06ebc     05 12 06 F6 | 	mov	arg01, #5
06ec0     88 ED BF FD | 	call	#_compile_immediate_assign
06ec4     08 00 90 FD | 	jmp	#LR__0581
06ec8                 | LR__0580
06ec8     05 12 06 F6 | 	mov	arg01, #5
06ecc     68 E5 BF FD | 	call	#_compile_immediate
06ed0                 | LR__0581
06ed0                 | ' 
06ed0                 | ' 
06ed0                 | ' return 0
06ed0     00 FA 05 F6 | 	mov	result1, #0
06ed4     A7 F0 03 F6 | 	mov	ptra, fp
06ed8     B2 00 A0 FD | 	call	#popregs_
06edc                 | _compile_if_ret
06edc     2D 00 64 FD | 	ret
06ee0                 | 
06ee0                 | ' 
06ee0                 | ' function compile_else() as ulong  
06ee0                 | _compile_else
06ee0     05 4A 05 F6 | 	mov	COUNT_, #5
06ee4     A8 00 A0 FD | 	call	#pushregs_
06ee8                 | _compile_else_enter
06ee8     5A 22 06 F6 | 	mov	local03, #90
06eec     0F 25 02 F6 | 	mov	local04, local01
06ef0     10 27 02 F6 | 	mov	local05, local02
06ef4     11 1F 02 F6 | 	mov	local01, local03
06ef8     69 00 00 FF 
06efc     40 E5 05 F1 | 	add	objptr, ##54080
06f00     F2 12 02 FB | 	rdlong	arg01, objptr
06f04     09 FB 01 F6 | 	mov	result1, arg01
06f08     01 FA 65 F0 | 	shl	result1, #1
06f0c     09 FB 01 F1 | 	add	result1, arg01
06f10     02 FA 65 F0 | 	shl	result1, #2
06f14     03 00 00 FF 
06f18     00 E4 85 F1 | 	sub	objptr, ##1536
06f1c     F2 FA 01 F1 | 	add	result1, objptr
06f20     FD 24 62 FC | 	wrlong	local04, result1
06f24     03 00 00 FF 
06f28     00 E4 05 F1 | 	add	objptr, ##1536
06f2c     F2 FA 01 FB | 	rdlong	result1, objptr
06f30     FD 24 02 F6 | 	mov	local04, result1
06f34     01 24 66 F0 | 	shl	local04, #1
06f38     FD 24 02 F1 | 	add	local04, result1
06f3c     02 24 66 F0 | 	shl	local04, #2
06f40     03 00 00 FF 
06f44     00 E4 85 F1 | 	sub	objptr, ##1536
06f48     F2 24 02 F1 | 	add	local04, objptr
06f4c     04 24 06 F1 | 	add	local04, #4
06f50     12 27 62 FC | 	wrlong	local05, local04
06f54     03 00 00 FF 
06f58     00 E4 05 F1 | 	add	objptr, ##1536
06f5c     F2 24 02 FB | 	rdlong	local04, objptr
06f60     12 27 02 F6 | 	mov	local05, local04
06f64     01 26 66 F0 | 	shl	local05, #1
06f68     12 27 02 F1 | 	add	local05, local04
06f6c     02 26 66 F0 | 	shl	local05, #2
06f70     03 00 00 FF 
06f74     00 E4 85 F1 | 	sub	objptr, ##1536
06f78     F2 26 02 F1 | 	add	local05, objptr
06f7c     08 26 06 F1 | 	add	local05, #8
06f80     13 1F 62 FC | 	wrlong	local01, local05
06f84     03 00 00 FF 
06f88     00 E4 05 F1 | 	add	objptr, ##1536
06f8c     F2 24 02 FB | 	rdlong	local04, objptr
06f90     01 24 06 F1 | 	add	local04, #1
06f94     F2 24 62 FC | 	wrlong	local04, objptr
06f98                 | ' 
06f98                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06f98                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06f98     13 00 00 FF 
06f9c     38 E4 85 F1 | 	sub	objptr, ##9784
06fa0     F2 26 02 FB | 	rdlong	local05, objptr
06fa4     01 26 06 F1 | 	add	local05, #1
06fa8     03 26 66 F0 | 	shl	local05, #3
06fac     02 00 00 FF 
06fb0     38 E4 85 F1 | 	sub	objptr, ##1080
06fb4     F2 26 02 F1 | 	add	local05, objptr
06fb8     13 13 02 FB | 	rdlong	arg01, local05
06fbc     54 00 00 FF 
06fc0     D0 E4 85 F1 | 	sub	objptr, ##43216
06fc4                 | ' 
06fc4                 | ' select case s
06fc4     45 01 00 FF 
06fc8     19 15 06 F6 | 	mov	arg02, ##@LR__4414
06fcc     90 24 B1 FD | 	call	#__system___string_cmp
06fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
06fd4     1B FA 05 A6 |  if_e	mov	result1, #27
06fd8     00 FA 05 56 |  if_ne	mov	result1, #0
06fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
06fe0     0C 00 90 AD |  if_e	jmp	#LR__0590
06fe4     05 12 06 F6 | 	mov	arg01, #5
06fe8     60 EC BF FD | 	call	#_compile_immediate_assign
06fec     08 00 90 FD | 	jmp	#LR__0591
06ff0                 | LR__0590
06ff0     05 12 06 F6 | 	mov	arg01, #5
06ff4     40 E4 BF FD | 	call	#_compile_immediate
06ff8                 | LR__0591
06ff8                 | ' 
06ff8                 | ' 
06ff8                 | ' return 0
06ff8     00 FA 05 F6 | 	mov	result1, #0
06ffc     A7 F0 03 F6 | 	mov	ptra, fp
07000     B2 00 A0 FD | 	call	#popregs_
07004                 | _compile_else_ret
07004     2D 00 64 FD | 	ret
07008                 | 
07008                 | ' 
07008                 | ' 
07008                 | ' function compile_dim() as ulong  
07008                 | _compile_dim
07008     11 4A 05 F6 | 	mov	COUNT_, #17
0700c     A8 00 A0 FD | 	call	#pushregs_
07010     01 1E 06 F6 | 	mov	local01, #1
07014     01 20 06 F6 | 	mov	local02, #1
07018     01 22 06 F6 | 	mov	local03, #1
0701c                 | ' 
0701c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0701c                 | ' 
0701c                 | ' if isname(lparts(ct).part$) then 
0701c     56 00 00 FF 
07020     08 E5 05 F1 | 	add	objptr, ##44296
07024     F2 18 02 FB | 	rdlong	arg04, objptr
07028     03 18 66 F0 | 	shl	arg04, #3
0702c     02 00 00 FF 
07030     38 E4 85 F1 | 	sub	objptr, ##1080
07034     F2 18 02 F1 | 	add	arg04, objptr
07038     0C 13 02 FB | 	rdlong	arg01, arg04
0703c     54 00 00 FF 
07040     D0 E4 85 F1 | 	sub	objptr, ##43216
07044     C8 D3 BF FD | 	call	#_isname
07048     00 FA 0D F2 | 	cmp	result1, #0 wz
0704c     AC 05 90 AD |  if_e	jmp	#LR__0624
07050     56 00 00 FF 
07054     08 E5 05 F1 | 	add	objptr, ##44296
07058     F2 24 02 FB | 	rdlong	local04, objptr
0705c     03 24 66 F0 | 	shl	local04, #3
07060     02 00 00 FF 
07064     38 E4 85 F1 | 	sub	objptr, ##1080
07068     F2 24 02 F1 | 	add	local04, objptr
0706c     12 27 02 FB | 	rdlong	local05, local04
07070     01 28 66 F6 | 	neg	local06, #1
07074                 | '   varname2$=lparts(ct).part$ 
07074                 | '   j=-1
07074                 | '   if varnum>0 then
07074     04 E4 85 F1 | 	sub	objptr, #4
07078     F2 2A 02 FB | 	rdlong	local07, objptr
0707c     54 00 00 FF 
07080     CC E4 85 F1 | 	sub	objptr, ##43212
07084     01 2A 56 F2 | 	cmps	local07, #1 wc
07088     58 00 90 CD |  if_b	jmp	#LR__0602
0708c                 | '  '   print "in dim, varnum=";varnum
0708c                 | '     for i=0 to varnum-1
0708c     00 2C 06 F6 | 	mov	local08, #0
07090     54 00 00 FF 
07094     CC E4 05 F1 | 	add	objptr, ##43212
07098     F2 2E 02 FB | 	rdlong	local09, objptr
0709c     54 00 00 FF 
070a0     CC E4 85 F1 | 	sub	objptr, ##43212
070a4                 | LR__0600
070a4     17 2D 52 F2 | 	cmps	local08, local09 wc
070a8     38 00 90 3D |  if_ae	jmp	#LR__0601
070ac                 | '       if variables(i).name=varname2$ then j=i : exit
070ac     16 25 02 F6 | 	mov	local04, local08
070b0     04 24 66 F0 | 	shl	local04, #4
070b4     34 00 00 FF 
070b8     CC E4 05 F1 | 	add	objptr, ##26828
070bc     F2 24 02 F1 | 	add	local04, objptr
070c0     12 13 02 FB | 	rdlong	arg01, local04
070c4     13 15 02 F6 | 	mov	arg02, local05
070c8     34 00 00 FF 
070cc     CC E4 85 F1 | 	sub	objptr, ##26828
070d0     8C 23 B1 FD | 	call	#__system___string_cmp
070d4     00 FA 0D F2 | 	cmp	result1, #0 wz
070d8     16 29 02 A6 |  if_e	mov	local06, local08
070dc     01 2C 06 51 |  if_ne	add	local08, #1
070e0     C0 FF 9F 5D |  if_ne	jmp	#LR__0600
070e4                 | LR__0601
070e4                 | LR__0602
070e4                 | ' '  if j<>-1 then printerror (42) : return 42
070e4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
070e4     FF FF 7F FF 
070e8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
070ec     54 00 00 AF 
070f0     CC E4 05 A1 |  if_e	add	objptr, ##43212
070f4     F2 28 02 AB |  if_e	rdlong	local06, objptr
070f8     54 00 00 AF 
070fc     CC E4 85 A1 |  if_e	sub	objptr, ##43212
07100     78 00 90 AD |  if_e	jmp	#LR__0603
07104     00 12 06 F6 | 	mov	arg01, #0
07108     30 7C B1 FD | 	call	#__system___getiolock_0425
0710c     FD 12 02 F6 | 	mov	arg01, result1
07110     24 23 B1 FD | 	call	#__system___lockmem
07114     46 01 00 FF 
07118     8B 15 06 F6 | 	mov	arg02, ##@LR__4564
0711c     00 12 06 F6 | 	mov	arg01, #0
07120     00 16 06 F6 | 	mov	arg03, #0
07124     04 30 B1 FD | 	call	#__system___basic_print_string
07128     7A 00 00 FF 
0712c     54 E5 05 F1 | 	add	objptr, ##62804
07130     F2 14 02 FB | 	rdlong	arg02, objptr
07134     7A 00 00 FF 
07138     54 E5 85 F1 | 	sub	objptr, ##62804
0713c     00 12 06 F6 | 	mov	arg01, #0
07140     00 16 06 F6 | 	mov	arg03, #0
07144     0A 18 06 F6 | 	mov	arg04, #10
07148     64 30 B1 FD | 	call	#__system___basic_print_unsigned
0714c     46 01 00 FF 
07150     99 15 06 F6 | 	mov	arg02, ##@LR__4565
07154     00 12 06 F6 | 	mov	arg01, #0
07158     00 16 06 F6 | 	mov	arg03, #0
0715c     CC 2F B1 FD | 	call	#__system___basic_print_string
07160     00 12 06 F6 | 	mov	arg01, #0
07164     0A 14 06 F6 | 	mov	arg02, #10
07168     00 16 06 F6 | 	mov	arg03, #0
0716c     64 2F B1 FD | 	call	#__system___basic_print_char
07170     00 12 06 F6 | 	mov	arg01, #0
07174     C4 7B B1 FD | 	call	#__system___getiolock_0425
07178     FD 00 68 FC | 	wrlong	#0, result1
0717c                 | LR__0603
0717c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
0717c     56 00 00 FF 
07180     08 E5 05 F1 | 	add	objptr, ##44296
07184     F2 18 02 FB | 	rdlong	arg04, objptr
07188     01 18 06 F1 | 	add	arg04, #1
0718c     03 18 66 F0 | 	shl	arg04, #3
07190     02 00 00 FF 
07194     38 E4 85 F1 | 	sub	objptr, ##1080
07198     F2 18 02 F1 | 	add	arg04, objptr
0719c     0C 13 02 FB | 	rdlong	arg01, arg04
071a0     46 01 00 FF 
071a4     BA 15 06 F6 | 	mov	arg02, ##@LR__4566
071a8     54 00 00 FF 
071ac     D0 E4 85 F1 | 	sub	objptr, ##43216
071b0     AC 22 B1 FD | 	call	#__system___string_cmp
071b4     00 FA 0D F2 | 	cmp	result1, #0 wz
071b8     50 00 90 AD |  if_e	jmp	#LR__0604
071bc     56 00 00 FF 
071c0     08 E5 05 F1 | 	add	objptr, ##44296
071c4     F2 2E 02 FB | 	rdlong	local09, objptr
071c8     01 2E 06 F1 | 	add	local09, #1
071cc     03 2E 66 F0 | 	shl	local09, #3
071d0     02 00 00 FF 
071d4     38 E4 85 F1 | 	sub	objptr, ##1080
071d8     F2 2E 02 F1 | 	add	local09, objptr
071dc     17 13 02 FB | 	rdlong	arg01, local09
071e0     46 01 00 FF 
071e4     BC 15 06 F6 | 	mov	arg02, ##@LR__4567
071e8     54 00 00 FF 
071ec     D0 E4 85 F1 | 	sub	objptr, ##43216
071f0     6C 22 B1 FD | 	call	#__system___string_cmp
071f4     00 FA 0D F2 | 	cmp	result1, #0 wz
071f8     10 00 90 AD |  if_e	jmp	#LR__0604
071fc     2B 12 06 F6 | 	mov	arg01, #43
07200     78 EC B0 FD | 	call	#_printerror
07204     2B FA 05 F6 | 	mov	result1, #43
07208     38 05 90 FD | 	jmp	#LR__0626
0720c                 | LR__0604
0720c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
0720c     56 00 00 FF 
07210     08 E5 05 F1 | 	add	objptr, ##44296
07214     F2 14 02 FB | 	rdlong	arg02, objptr
07218     01 14 06 F1 | 	add	arg02, #1
0721c     03 14 66 F0 | 	shl	arg02, #3
07220     02 00 00 FF 
07224     38 E4 85 F1 | 	sub	objptr, ##1080
07228     F2 14 02 F1 | 	add	arg02, objptr
0722c     0A 13 02 FB | 	rdlong	arg01, arg02
07230     46 01 00 FF 
07234     BF 15 06 F6 | 	mov	arg02, ##@LR__4568
07238     54 00 00 FF 
0723c     D0 E4 85 F1 | 	sub	objptr, ##43216
07240     1C 22 B1 FD | 	call	#__system___string_cmp
07244     00 FA 0D F2 | 	cmp	result1, #0 wz
07248     56 00 00 AF 
0724c     08 E5 05 A1 |  if_e	add	objptr, ##44296
07250     F2 30 02 AB |  if_e	rdlong	local10, objptr
07254     56 00 00 AF 
07258     08 E5 85 A1 |  if_e	sub	objptr, ##44296
0725c     01 30 06 A1 |  if_e	add	local10, #1
07260     7C 01 90 AD |  if_e	jmp	#LR__0610
07264     56 00 00 FF 
07268     08 E5 05 F1 | 	add	objptr, ##44296
0726c     F2 30 02 FB | 	rdlong	local10, objptr
07270     56 00 00 FF 
07274     08 E5 85 F1 | 	sub	objptr, ##44296
07278     02 30 06 F1 | 	add	local10, #2
0727c     00 32 06 F6 | 	mov	local11, #0
07280                 | '   l=ct+2 : m=0 : do
07280                 | LR__0605
07280                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07280                 | '     if isdec(lparts(l).part$) then 
07280     18 25 02 F6 | 	mov	local04, local10
07284     03 24 66 F0 | 	shl	local04, #3
07288     54 00 00 FF 
0728c     D0 E4 05 F1 | 	add	objptr, ##43216
07290     F2 24 02 F1 | 	add	local04, objptr
07294     12 13 02 FB | 	rdlong	arg01, local04
07298     54 00 00 FF 
0729c     D0 E4 85 F1 | 	sub	objptr, ##43216
072a0     10 D8 BF FD | 	call	#_isdec
072a4     00 FA 0D F2 | 	cmp	result1, #0 wz
072a8     44 00 90 AD |  if_e	jmp	#LR__0606
072ac     19 35 02 F6 | 	mov	local12, local11
072b0     0F 35 06 F1 | 	add	local12, #local01
072b4     18 2F 02 F6 | 	mov	local09, local10
072b8     03 2E 66 F0 | 	shl	local09, #3
072bc     54 00 00 FF 
072c0     D0 E4 05 F1 | 	add	objptr, ##43216
072c4     F2 2E 02 F1 | 	add	local09, objptr
072c8     17 13 02 FB | 	rdlong	arg01, local09
072cc     00 14 06 F6 | 	mov	arg02, #0
072d0     54 00 00 FF 
072d4     D0 E4 85 F1 | 	sub	objptr, ##43216
072d8     C0 52 B1 FD | 	call	#__system____builtin_atoi
072dc     FD 36 02 F6 | 	mov	local13, result1
072e0                 | 	'.live	local13
072e0                 | 	'.live	local12
072e0     00 34 8E F9 | 	altd	local12, #0
072e4     1B 35 02 F6 | 	mov	local12, local13
072e8     01 32 06 F1 | 	add	local11, #1
072ec     10 00 90 FD | 	jmp	#LR__0607
072f0                 | LR__0606
072f0     11 12 06 F6 | 	mov	arg01, #17
072f4     84 EB B0 FD | 	call	#_printerror
072f8                 | '       printerror (17)  : return(17)
072f8     11 FA 05 F6 | 	mov	result1, #17
072fc     44 04 90 FD | 	jmp	#LR__0626
07300                 | LR__0607
07300                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07300     18 25 02 F6 | 	mov	local04, local10
07304     01 24 06 F1 | 	add	local04, #1
07308     03 24 66 F0 | 	shl	local04, #3
0730c     54 00 00 FF 
07310     D0 E4 05 F1 | 	add	objptr, ##43216
07314     F2 24 02 F1 | 	add	local04, objptr
07318     12 13 02 FB | 	rdlong	arg01, local04
0731c     46 01 00 FF 
07320     C2 15 06 F6 | 	mov	arg02, ##@LR__4569
07324     54 00 00 FF 
07328     D0 E4 85 F1 | 	sub	objptr, ##43216
0732c     30 21 B1 FD | 	call	#__system___string_cmp
07330     00 FA 0D F2 | 	cmp	result1, #0 wz
07334     48 00 90 AD |  if_e	jmp	#LR__0608
07338     18 37 02 F6 | 	mov	local13, local10
0733c     01 36 06 F1 | 	add	local13, #1
07340     03 36 66 F0 | 	shl	local13, #3
07344     54 00 00 FF 
07348     D0 E4 05 F1 | 	add	objptr, ##43216
0734c     F2 36 02 F1 | 	add	local13, objptr
07350     1B 13 02 FB | 	rdlong	arg01, local13
07354     46 01 00 FF 
07358     C4 15 06 F6 | 	mov	arg02, ##@LR__4570
0735c     54 00 00 FF 
07360     D0 E4 85 F1 | 	sub	objptr, ##43216
07364     F8 20 B1 FD | 	call	#__system___string_cmp
07368     00 FA 0D F2 | 	cmp	result1, #0 wz
0736c     10 00 90 AD |  if_e	jmp	#LR__0608
07370     2C 12 06 F6 | 	mov	arg01, #44
07374     04 EB B0 FD | 	call	#_printerror
07378     2C FA 05 F6 | 	mov	result1, #44
0737c     C4 03 90 FD | 	jmp	#LR__0626
07380                 | LR__0608
07380     02 30 06 F1 | 	add	local10, #2
07384     18 25 02 F6 | 	mov	local04, local10
07388     01 24 86 F1 | 	sub	local04, #1
0738c     03 24 66 F0 | 	shl	local04, #3
07390     54 00 00 FF 
07394     D0 E4 05 F1 | 	add	objptr, ##43216
07398     F2 24 02 F1 | 	add	local04, objptr
0739c     12 13 02 FB | 	rdlong	arg01, local04
073a0     46 01 00 FF 
073a4     C6 15 06 F6 | 	mov	arg02, ##@LR__4571
073a8     54 00 00 FF 
073ac     D0 E4 85 F1 | 	sub	objptr, ##43216
073b0     AC 20 B1 FD | 	call	#__system___string_cmp
073b4     00 FA 0D F2 | 	cmp	result1, #0 wz
073b8     03 32 56 52 |  if_ne	cmps	local11, #3 wc
073bc     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0605
073c0                 | '   if m>3 then printerror(45): return(45)
073c0     04 32 56 F2 | 	cmps	local11, #4 wc
073c4     10 00 90 CD |  if_b	jmp	#LR__0609
073c8     2D 12 06 F6 | 	mov	arg01, #45
073cc     AC EA B0 FD | 	call	#_printerror
073d0     2D FA 05 F6 | 	mov	result1, #45
073d4     6C 03 90 FD | 	jmp	#LR__0626
073d8                 | LR__0609
073d8     00 39 06 F6 | 	mov	local14, #256
073dc     0C 3A 06 F6 | 	mov	local15, #12
073e0                 | LR__0610
073e0                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
073e0                 | '   arraytype=array_no_type : esize=12
073e0                 | ' 1350 
073e0                 | '   if lparts(l).part$="as" then
073e0     18 25 02 F6 | 	mov	local04, local10
073e4     03 24 66 F0 | 	shl	local04, #3
073e8     54 00 00 FF 
073ec     D0 E4 05 F1 | 	add	objptr, ##43216
073f0     F2 24 02 F1 | 	add	local04, objptr
073f4     12 13 02 FB | 	rdlong	arg01, local04
073f8     46 01 00 FF 
073fc     C8 15 06 F6 | 	mov	arg02, ##@LR__4572
07400     54 00 00 FF 
07404     D0 E4 85 F1 | 	sub	objptr, ##43216
07408     54 20 B1 FD | 	call	#__system___string_cmp
0740c     00 FA 0D F2 | 	cmp	result1, #0 wz
07410     F8 01 90 5D |  if_ne	jmp	#LR__0625
07414                 | '     select case lparts(l+1).part$
07414     18 35 02 F6 | 	mov	local12, local10
07418     01 34 06 F1 | 	add	local12, #1
0741c     03 34 66 F0 | 	shl	local12, #3
07420     54 00 00 FF 
07424     D0 E4 05 F1 | 	add	objptr, ##43216
07428     F2 34 02 F1 | 	add	local12, objptr
0742c     1A 3D 02 FB | 	rdlong	local16, local12
07430     46 01 00 FF 
07434     CB 15 06 F6 | 	mov	arg02, ##@LR__4573
07438     1E 13 02 F6 | 	mov	arg01, local16
0743c     54 00 00 FF 
07440     D0 E4 85 F1 | 	sub	objptr, ##43216
07444     18 20 B1 FD | 	call	#__system___string_cmp
07448     00 FA 0D F2 | 	cmp	result1, #0 wz
0744c     0C 01 90 AD |  if_e	jmp	#LR__0611
07450     46 01 00 FF 
07454     D0 15 06 F6 | 	mov	arg02, ##@LR__4574
07458     1E 13 02 F6 | 	mov	arg01, local16
0745c     00 20 B1 FD | 	call	#__system___string_cmp
07460     00 FA 0D F2 | 	cmp	result1, #0 wz
07464     00 01 90 AD |  if_e	jmp	#LR__0612
07468     46 01 00 FF 
0746c     D6 15 06 F6 | 	mov	arg02, ##@LR__4575
07470     1E 13 02 F6 | 	mov	arg01, local16
07474     E8 1F B1 FD | 	call	#__system___string_cmp
07478     00 FA 0D F2 | 	cmp	result1, #0 wz
0747c     F4 00 90 AD |  if_e	jmp	#LR__0613
07480     46 01 00 FF 
07484     DC 15 06 F6 | 	mov	arg02, ##@LR__4576
07488     1E 13 02 F6 | 	mov	arg01, local16
0748c     D0 1F B1 FD | 	call	#__system___string_cmp
07490     00 FA 0D F2 | 	cmp	result1, #0 wz
07494     E8 00 90 AD |  if_e	jmp	#LR__0614
07498     46 01 00 FF 
0749c     E3 15 06 F6 | 	mov	arg02, ##@LR__4577
074a0     1E 13 02 F6 | 	mov	arg01, local16
074a4     B8 1F B1 FD | 	call	#__system___string_cmp
074a8     00 FA 0D F2 | 	cmp	result1, #0 wz
074ac     DC 00 90 AD |  if_e	jmp	#LR__0615
074b0     46 01 00 FF 
074b4     E8 15 06 F6 | 	mov	arg02, ##@LR__4578
074b8     1E 13 02 F6 | 	mov	arg01, local16
074bc     A0 1F B1 FD | 	call	#__system___string_cmp
074c0     00 FA 0D F2 | 	cmp	result1, #0 wz
074c4     D0 00 90 AD |  if_e	jmp	#LR__0616
074c8     46 01 00 FF 
074cc     F0 15 06 F6 | 	mov	arg02, ##@LR__4579
074d0     1E 13 02 F6 | 	mov	arg01, local16
074d4     88 1F B1 FD | 	call	#__system___string_cmp
074d8     00 FA 0D F2 | 	cmp	result1, #0 wz
074dc     C4 00 90 AD |  if_e	jmp	#LR__0617
074e0     46 01 00 FF 
074e4     F6 15 06 F6 | 	mov	arg02, ##@LR__4580
074e8     1E 13 02 F6 | 	mov	arg01, local16
074ec     70 1F B1 FD | 	call	#__system___string_cmp
074f0     00 FA 0D F2 | 	cmp	result1, #0 wz
074f4     B8 00 90 AD |  if_e	jmp	#LR__0618
074f8     46 01 00 FF 
074fc     FC 15 06 F6 | 	mov	arg02, ##@LR__4581
07500     1E 13 02 F6 | 	mov	arg01, local16
07504     58 1F B1 FD | 	call	#__system___string_cmp
07508     00 FA 0D F2 | 	cmp	result1, #0 wz
0750c     AC 00 90 AD |  if_e	jmp	#LR__0619
07510     47 01 00 FF 
07514     03 14 06 F6 | 	mov	arg02, ##@LR__4582
07518     1E 13 02 F6 | 	mov	arg01, local16
0751c     40 1F B1 FD | 	call	#__system___string_cmp
07520     00 FA 0D F2 | 	cmp	result1, #0 wz
07524     A0 00 90 AD |  if_e	jmp	#LR__0620
07528     47 01 00 FF 
0752c     0A 14 06 F6 | 	mov	arg02, ##@LR__4583
07530     1E 13 02 F6 | 	mov	arg01, local16
07534     28 1F B1 FD | 	call	#__system___string_cmp
07538     00 FA 0D F2 | 	cmp	result1, #0 wz
0753c     94 00 90 AD |  if_e	jmp	#LR__0621
07540     47 01 00 FF 
07544     11 14 06 F6 | 	mov	arg02, ##@LR__4584
07548     1E 13 02 F6 | 	mov	arg01, local16
0754c     10 1F B1 FD | 	call	#__system___string_cmp
07550     00 FA 0D F2 | 	cmp	result1, #0 wz
07554     88 00 90 AD |  if_e	jmp	#LR__0622
07558     90 00 90 FD | 	jmp	#LR__0623
0755c                 | LR__0611
0755c     01 39 06 F6 | 	mov	local14, #257
07560     01 3A 06 F6 | 	mov	local15, #1
07564     A4 00 90 FD | 	jmp	#LR__0625
07568                 | LR__0612
07568     02 39 06 F6 | 	mov	local14, #258
0756c     01 3A 06 F6 | 	mov	local15, #1
07570     98 00 90 FD | 	jmp	#LR__0625
07574                 | LR__0613
07574     03 39 06 F6 | 	mov	local14, #259
07578     02 3A 06 F6 | 	mov	local15, #2
0757c     8C 00 90 FD | 	jmp	#LR__0625
07580                 | LR__0614
07580     04 39 06 F6 | 	mov	local14, #260
07584     02 3A 06 F6 | 	mov	local15, #2
07588     80 00 90 FD | 	jmp	#LR__0625
0758c                 | LR__0615
0758c     05 39 06 F6 | 	mov	local14, #261
07590     04 3A 06 F6 | 	mov	local15, #4
07594     74 00 90 FD | 	jmp	#LR__0625
07598                 | LR__0616
07598     05 39 06 F6 | 	mov	local14, #261
0759c     04 3A 06 F6 | 	mov	local15, #4
075a0     68 00 90 FD | 	jmp	#LR__0625
075a4                 | LR__0617
075a4     06 39 06 F6 | 	mov	local14, #262
075a8     04 3A 06 F6 | 	mov	local15, #4
075ac     5C 00 90 FD | 	jmp	#LR__0625
075b0                 | LR__0618
075b0     07 39 06 F6 | 	mov	local14, #263
075b4     08 3A 06 F6 | 	mov	local15, #8
075b8     50 00 90 FD | 	jmp	#LR__0625
075bc                 | LR__0619
075bc     08 39 06 F6 | 	mov	local14, #264
075c0     08 3A 06 F6 | 	mov	local15, #8
075c4     44 00 90 FD | 	jmp	#LR__0625
075c8                 | LR__0620
075c8     09 39 06 F6 | 	mov	local14, #265
075cc     04 3A 06 F6 | 	mov	local15, #4
075d0     38 00 90 FD | 	jmp	#LR__0625
075d4                 | LR__0621
075d4     0A 39 06 F6 | 	mov	local14, #266
075d8     08 3A 06 F6 | 	mov	local15, #8
075dc     2C 00 90 FD | 	jmp	#LR__0625
075e0                 | LR__0622
075e0     0B 39 06 F6 | 	mov	local14, #267
075e4     04 3A 06 F6 | 	mov	local15, #4
075e8     20 00 90 FD | 	jmp	#LR__0625
075ec                 | LR__0623
075ec     2F 12 06 F6 | 	mov	arg01, #47
075f0     88 E8 B0 FD | 	call	#_printerror
075f4     2F FA 05 F6 | 	mov	result1, #47
075f8     48 01 90 FD | 	jmp	#LR__0626
075fc                 | LR__0624
075fc     2E 12 06 F6 | 	mov	arg01, #46
07600     78 E8 B0 FD | 	call	#_printerror
07604                 | '   printerror(46): return 46
07604     2E FA 05 F6 | 	mov	result1, #46
07608     38 01 90 FD | 	jmp	#LR__0626
0760c                 | LR__0625
0760c     0F 3B 02 FD | 	qmul	local15, local01
07610     18 2A 62 FD | 	getqx	local07
07614     10 2B 02 FD | 	qmul	local07, local02
07618     18 3C 62 FD | 	getqx	local16
0761c     11 3D 02 FD | 	qmul	local16, local03
07620     7A 00 00 FF 
07624     3C E5 05 F1 | 	add	objptr, ##62780
07628     F2 3E 02 FB | 	rdlong	local17, objptr
0762c     1C 15 02 F6 | 	mov	arg02, local14
07630     01 16 06 F6 | 	mov	arg03, #1
07634     00 18 06 F6 | 	mov	arg04, #0
07638                 | '     return fill(addr, pattern, count, listPtr, 4)
07638     04 1A 06 F6 | 	mov	arg05, #4
0763c     18 3C 62 FD | 	getqx	local16
07640     1E 3F 82 F1 | 	sub	local17, local16
07644     10 3E 86 F1 | 	sub	local17, #16
07648     F2 3E 62 FC | 	wrlong	local17, objptr
0764c     1F 13 02 F6 | 	mov	arg01, local17
07650     6F 00 00 FF 
07654     7C E4 85 F1 | 	sub	objptr, ##56956
07658     A8 13 B1 FD | 	call	#_psram_spin2_fill
0765c     1F 13 02 F6 | 	mov	arg01, local17
07660     02 12 06 F1 | 	add	arg01, #2
07664     1D 15 02 F6 | 	mov	arg02, local15
07668     01 16 06 F6 | 	mov	arg03, #1
0766c     00 18 06 F6 | 	mov	arg04, #0
07670                 | '     return fill(addr, pattern, count, listPtr, 1)
07670     01 1A 06 F6 | 	mov	arg05, #1
07674     8C 13 B1 FD | 	call	#_psram_spin2_fill
07678     1F 13 02 F6 | 	mov	arg01, local17
0767c     04 12 06 F1 | 	add	arg01, #4
07680     0F 15 02 F6 | 	mov	arg02, local01
07684     01 16 06 F6 | 	mov	arg03, #1
07688     00 18 06 F6 | 	mov	arg04, #0
0768c                 | '     return fill(addr, pattern, count, listPtr, 4)
0768c     04 1A 06 F6 | 	mov	arg05, #4
07690     70 13 B1 FD | 	call	#_psram_spin2_fill
07694     1F 13 02 F6 | 	mov	arg01, local17
07698     08 12 06 F1 | 	add	arg01, #8
0769c     10 15 02 F6 | 	mov	arg02, local02
076a0     01 16 06 F6 | 	mov	arg03, #1
076a4     00 18 06 F6 | 	mov	arg04, #0
076a8                 | '     return fill(addr, pattern, count, listPtr, 4)
076a8     04 1A 06 F6 | 	mov	arg05, #4
076ac     54 13 B1 FD | 	call	#_psram_spin2_fill
076b0     1F 13 02 F6 | 	mov	arg01, local17
076b4     0C 12 06 F1 | 	add	arg01, #12
076b8     11 15 02 F6 | 	mov	arg02, local03
076bc     01 16 06 F6 | 	mov	arg03, #1
076c0     00 18 06 F6 | 	mov	arg04, #0
076c4                 | '     return fill(addr, pattern, count, listPtr, 4)
076c4     04 1A 06 F6 | 	mov	arg05, #4
076c8     38 13 B1 FD | 	call	#_psram_spin2_fill
076cc     14 35 02 F6 | 	mov	local12, local06
076d0     04 34 66 F0 | 	shl	local12, #4
076d4     29 00 00 FF 
076d8     0C E4 05 F1 | 	add	objptr, ##21004
076dc     F2 34 02 F1 | 	add	local12, objptr
076e0     1A 27 62 FC | 	wrlong	local05, local12
076e4     14 35 02 F6 | 	mov	local12, local06
076e8     04 34 66 F0 | 	shl	local12, #4
076ec     F2 34 02 F1 | 	add	local12, objptr
076f0     04 34 06 F1 | 	add	local12, #4
076f4     1A 3F 62 FC | 	wrlong	local17, local12
076f8     14 35 02 F6 | 	mov	local12, local06
076fc     04 34 66 F0 | 	shl	local12, #4
07700     F2 34 02 F1 | 	add	local12, objptr
07704     0C 34 06 F1 | 	add	local12, #12
07708     1A 39 62 FC | 	wrlong	local14, local12
0770c                 | ' 'print dims(0),dims(1),dims(2),arraytype
0770c                 | ' 
0770c                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
0770c                 | ' arrayptr=memtop-arraysize-16
0770c                 | ' memtop=arrayptr
0770c                 | ' 
0770c                 | ' pslpoke arrayptr,arraytype
0770c                 | ' pspoke arrayptr+2,esize
0770c                 | ' pslpoke arrayptr+4,dims(0)
0770c                 | ' pslpoke arrayptr+8,dims(1)
0770c                 | ' pslpoke arrayptr+12,dims(2)
0770c                 | ' 
0770c                 | ' variables(j).name=varname2$
0770c                 | ' variables(j).value.uresult=arrayptr
0770c                 | ' variables(j).vartype=arraytype
0770c                 | ' if j=varnum then varnum+=1
0770c     20 00 00 FF 
07710     00 E4 05 F1 | 	add	objptr, ##16384
07714     F2 2A 02 FB | 	rdlong	local07, objptr
07718     54 00 00 FF 
0771c     CC E4 85 F1 | 	sub	objptr, ##43212
07720     15 29 0A F2 | 	cmp	local06, local07 wz
07724     54 00 00 AF 
07728     CC E4 05 A1 |  if_e	add	objptr, ##43212
0772c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07730     01 2A 06 A1 |  if_e	add	local07, #1
07734     F2 2A 62 AC |  if_e	wrlong	local07, objptr
07738     54 00 00 AF 
0773c     CC E4 85 A1 |  if_e	sub	objptr, ##43212
07740                 | ' 
07740                 | ' return 0
07740     00 FA 05 F6 | 	mov	result1, #0
07744                 | LR__0626
07744     A7 F0 03 F6 | 	mov	ptra, fp
07748     B2 00 A0 FD | 	call	#popregs_
0774c                 | _compile_dim_ret
0774c     2D 00 64 FD | 	ret
07750                 | 
07750                 | ' 
07750                 | ' 
07750                 | ' function compile_for() as ulong  
07750                 | _compile_for
07750     07 4A 05 F6 | 	mov	COUNT_, #7
07754     A8 00 A0 FD | 	call	#pushregs_
07758                 | ' 
07758                 | ' 
07758                 | ' 
07758                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07758     56 00 00 FF 
0775c     08 E5 05 F1 | 	add	objptr, ##44296
07760     F2 14 02 FB | 	rdlong	arg02, objptr
07764     01 14 06 F1 | 	add	arg02, #1
07768     03 14 66 F0 | 	shl	arg02, #3
0776c     02 00 00 FF 
07770     38 E4 85 F1 | 	sub	objptr, ##1080
07774     F2 14 02 F1 | 	add	arg02, objptr
07778     0A 13 02 FB | 	rdlong	arg01, arg02
0777c     54 00 00 FF 
07780     D0 E4 85 F1 | 	sub	objptr, ##43216
07784                 | ' 
07784                 | ' select case s
07784     45 01 00 FF 
07788     19 15 06 F6 | 	mov	arg02, ##@LR__4414
0778c     D0 1C B1 FD | 	call	#__system___string_cmp
07790     00 FA 0D F2 | 	cmp	result1, #0 wz
07794     1B FA 05 A6 |  if_e	mov	result1, #27
07798     00 FA 05 56 |  if_ne	mov	result1, #0
0779c     00 FA 0D F2 | 	cmp	result1, #0 wz
077a0     0C 00 90 AD |  if_e	jmp	#LR__0630
077a4     05 12 06 F6 | 	mov	arg01, #5
077a8     A0 E4 BF FD | 	call	#_compile_immediate_assign
077ac     10 00 90 FD | 	jmp	#LR__0631
077b0                 | LR__0630
077b0     20 12 06 F6 | 	mov	arg01, #32
077b4     10 E9 BF FD | 	call	#_compile_error
077b8     20 FA 05 F6 | 	mov	result1, #32
077bc     E8 02 90 FD | 	jmp	#LR__0637
077c0                 | LR__0631
077c0     69 00 00 FF 
077c4     40 E5 05 F1 | 	add	objptr, ##54080
077c8     F2 12 02 FB | 	rdlong	arg01, objptr
077cc     09 25 02 F6 | 	mov	local04, arg01
077d0     01 24 86 F1 | 	sub	local04, #1
077d4     12 15 02 F6 | 	mov	arg02, local04
077d8     01 14 66 F0 | 	shl	arg02, #1
077dc     12 15 02 F1 | 	add	arg02, local04
077e0     02 14 66 F0 | 	shl	arg02, #2
077e4     03 00 00 FF 
077e8     00 E4 85 F1 | 	sub	objptr, ##1536
077ec     F2 14 02 F1 | 	add	arg02, objptr
077f0     0A 1F 02 FB | 	rdlong	local01, arg02
077f4     04 14 06 F1 | 	add	arg02, #4
077f8     0A 27 02 FB | 	rdlong	local05, arg02
077fc     01 12 86 F1 | 	sub	arg01, #1
07800     09 29 02 F6 | 	mov	local06, arg01
07804     01 28 66 F0 | 	shl	local06, #1
07808     09 29 02 F1 | 	add	local06, arg01
0780c     02 28 66 F0 | 	shl	local06, #2
07810     F2 28 02 F1 | 	add	local06, objptr
07814     08 28 06 F1 | 	add	local06, #8
07818     14 13 02 FB | 	rdlong	arg01, local06
0781c     13 21 02 F6 | 	mov	local02, local05
07820     09 23 02 F6 | 	mov	local03, arg01
07824                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
07824                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
07824     17 22 0E F2 | 	cmp	local03, #23 wz
07828     66 00 00 FF 
0782c     40 E5 85 F1 | 	sub	objptr, ##52544
07830     10 00 90 AD |  if_e	jmp	#LR__0632
07834     22 12 06 F6 | 	mov	arg01, #34
07838     8C E8 BF FD | 	call	#_compile_error
0783c     22 FA 05 F6 | 	mov	result1, #34
07840     64 02 90 FD | 	jmp	#LR__0637
07844                 | LR__0632
07844     0F 2B 02 F6 | 	mov	local07, local01
07848                 | ' varnum=t1.result.uresult
07848                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
07848     56 00 00 FF 
0784c     08 E5 05 F1 | 	add	objptr, ##44296
07850     F2 24 02 FB | 	rdlong	local04, objptr
07854     03 24 66 F0 | 	shl	local04, #3
07858     02 00 00 FF 
0785c     38 E4 85 F1 | 	sub	objptr, ##1080
07860     F2 24 02 F1 | 	add	local04, objptr
07864     12 13 02 FB | 	rdlong	arg01, local04
07868     47 01 00 FF 
0786c     18 14 06 F6 | 	mov	arg02, ##@LR__4585
07870     54 00 00 FF 
07874     D0 E4 85 F1 | 	sub	objptr, ##43216
07878     E4 1B B1 FD | 	call	#__system___string_cmp
0787c     00 FA 0D F2 | 	cmp	result1, #0 wz
07880     10 00 90 AD |  if_e	jmp	#LR__0633
07884     21 12 06 F6 | 	mov	arg01, #33
07888     3C E8 BF FD | 	call	#_compile_error
0788c     21 FA 05 F6 | 	mov	result1, #33
07890     14 02 90 FD | 	jmp	#LR__0637
07894                 | LR__0633
07894     56 00 00 FF 
07898     08 E5 05 F1 | 	add	objptr, ##44296
0789c     F2 24 02 FB | 	rdlong	local04, objptr
078a0     01 24 06 F1 | 	add	local04, #1
078a4     F2 24 62 FC | 	wrlong	local04, objptr
078a8     56 00 00 FF 
078ac     08 E5 85 F1 | 	sub	objptr, ##44296
078b0     D4 0B B0 FD | 	call	#_expr
078b4                 | ' ct+=1
078b4                 | ' expr()  ' there is "to" value pushed on the stack
078b4                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
078b4     56 00 00 FF 
078b8     08 E5 05 F1 | 	add	objptr, ##44296
078bc     F2 24 02 FB | 	rdlong	local04, objptr
078c0     03 24 66 F0 | 	shl	local04, #3
078c4     02 00 00 FF 
078c8     38 E4 85 F1 | 	sub	objptr, ##1080
078cc     F2 24 02 F1 | 	add	local04, objptr
078d0     12 13 02 FB | 	rdlong	arg01, local04
078d4     47 01 00 FF 
078d8     1B 14 06 F6 | 	mov	arg02, ##@LR__4586
078dc     54 00 00 FF 
078e0     D0 E4 85 F1 | 	sub	objptr, ##43216
078e4     78 1B B1 FD | 	call	#__system___string_cmp
078e8     00 FA 0D F2 | 	cmp	result1, #0 wz
078ec     3C 00 90 AD |  if_e	jmp	#LR__0634
078f0     56 00 00 FF 
078f4     08 E5 05 F1 | 	add	objptr, ##44296
078f8     F2 28 02 FB | 	rdlong	local06, objptr
078fc     03 28 66 F0 | 	shl	local06, #3
07900     02 00 00 FF 
07904     38 E4 85 F1 | 	sub	objptr, ##1080
07908     F2 28 02 F1 | 	add	local06, objptr
0790c     14 13 02 FB | 	rdlong	arg01, local06
07910     47 01 00 FF 
07914     20 14 06 F6 | 	mov	arg02, ##@LR__4587
07918     54 00 00 FF 
0791c     D0 E4 85 F1 | 	sub	objptr, ##43216
07920     3C 1B B1 FD | 	call	#__system___string_cmp
07924     00 FA 0D F2 | 	cmp	result1, #0 wz
07928     24 00 90 5D |  if_ne	jmp	#LR__0635
0792c                 | LR__0634
0792c     56 00 00 FF 
07930     08 E5 05 F1 | 	add	objptr, ##44296
07934     F2 28 02 FB | 	rdlong	local06, objptr
07938     01 28 06 F1 | 	add	local06, #1
0793c     F2 28 62 FC | 	wrlong	local06, objptr
07940     56 00 00 FF 
07944     08 E5 85 F1 | 	sub	objptr, ##44296
07948     3C 0B B0 FD | 	call	#_expr
0794c     78 00 90 FD | 	jmp	#LR__0636
07950                 | LR__0635
07950     69 00 00 FF 
07954     40 E5 05 F1 | 	add	objptr, ##54080
07958     F2 28 02 FB | 	rdlong	local06, objptr
0795c     14 27 02 F6 | 	mov	local05, local06
07960     01 26 66 F0 | 	shl	local05, #1
07964     14 27 02 F1 | 	add	local05, local06
07968     02 26 66 F0 | 	shl	local05, #2
0796c     03 00 00 FF 
07970     00 E4 85 F1 | 	sub	objptr, ##1536
07974     F2 26 02 F1 | 	add	local05, objptr
07978     08 26 06 F1 | 	add	local05, #8
0797c     13 39 68 FC | 	wrlong	#28, local05
07980     03 00 00 FF 
07984     00 E4 05 F1 | 	add	objptr, ##1536
07988     F2 28 02 FB | 	rdlong	local06, objptr
0798c     14 27 02 F6 | 	mov	local05, local06
07990     01 26 66 F0 | 	shl	local05, #1
07994     14 27 02 F1 | 	add	local05, local06
07998     02 26 66 F0 | 	shl	local05, #2
0799c     03 00 00 FF 
079a0     00 E4 85 F1 | 	sub	objptr, ##1536
079a4     F2 26 02 F1 | 	add	local05, objptr
079a8     13 03 68 FC | 	wrlong	#1, local05
079ac     03 00 00 FF 
079b0     00 E4 05 F1 | 	add	objptr, ##1536
079b4     F2 28 02 FB | 	rdlong	local06, objptr
079b8     01 28 06 F1 | 	add	local06, #1
079bc     F2 28 62 FC | 	wrlong	local06, objptr
079c0     69 00 00 FF 
079c4     40 E5 85 F1 | 	sub	objptr, ##54080
079c8                 | LR__0636
079c8     69 00 00 FF 
079cc     40 E5 05 F1 | 	add	objptr, ##54080
079d0     F2 28 02 FB | 	rdlong	local06, objptr
079d4     14 27 02 F6 | 	mov	local05, local06
079d8     01 26 66 F0 | 	shl	local05, #1
079dc     14 27 02 F1 | 	add	local05, local06
079e0     02 26 66 F0 | 	shl	local05, #2
079e4     03 00 00 FF 
079e8     00 E4 85 F1 | 	sub	objptr, ##1536
079ec     F2 26 02 F1 | 	add	local05, objptr
079f0     08 26 06 F1 | 	add	local05, #8
079f4     13 39 68 FC | 	wrlong	#28, local05
079f8     03 00 00 FF 
079fc     00 E4 05 F1 | 	add	objptr, ##1536
07a00     F2 28 02 FB | 	rdlong	local06, objptr
07a04     14 27 02 F6 | 	mov	local05, local06
07a08     01 26 66 F0 | 	shl	local05, #1
07a0c     14 27 02 F1 | 	add	local05, local06
07a10     02 26 66 F0 | 	shl	local05, #2
07a14     03 00 00 FF 
07a18     00 E4 85 F1 | 	sub	objptr, ##1536
07a1c     F2 26 02 F1 | 	add	local05, objptr
07a20     13 2B 62 FC | 	wrlong	local07, local05
07a24     03 00 00 FF 
07a28     00 E4 05 F1 | 	add	objptr, ##1536
07a2c     F2 2A 02 FB | 	rdlong	local07, objptr
07a30     01 2A 06 F1 | 	add	local07, #1
07a34     F2 2A 62 FC | 	wrlong	local07, objptr
07a38     15 29 02 F6 | 	mov	local06, local07
07a3c     01 28 66 F0 | 	shl	local06, #1
07a40     15 29 02 F1 | 	add	local06, local07
07a44     02 28 66 F0 | 	shl	local06, #2
07a48     03 00 00 FF 
07a4c     00 E4 85 F1 | 	sub	objptr, ##1536
07a50     F2 28 02 F1 | 	add	local06, objptr
07a54     08 28 06 F1 | 	add	local06, #8
07a58     14 95 68 FC | 	wrlong	#74, local06
07a5c     03 00 00 FF 
07a60     00 E4 05 F1 | 	add	objptr, ##1536
07a64     F2 2A 02 FB | 	rdlong	local07, objptr
07a68     15 29 02 F6 | 	mov	local06, local07
07a6c     01 28 66 F0 | 	shl	local06, #1
07a70     15 29 02 F1 | 	add	local06, local07
07a74     02 28 66 F0 | 	shl	local06, #2
07a78     03 00 00 FF 
07a7c     00 E4 85 F1 | 	sub	objptr, ##1536
07a80     F2 28 02 F1 | 	add	local06, objptr
07a84     14 01 68 FC | 	wrlong	#0, local06
07a88     03 00 00 FF 
07a8c     00 E4 05 F1 | 	add	objptr, ##1536
07a90     F2 2A 02 FB | 	rdlong	local07, objptr
07a94     01 2A 06 F1 | 	add	local07, #1
07a98     F2 2A 62 FC | 	wrlong	local07, objptr
07a9c     69 00 00 FF 
07aa0     40 E5 85 F1 | 	sub	objptr, ##54080
07aa4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07aa4                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07aa4                 | ' 
07aa4                 | ' 
07aa4                 | ' return 0
07aa4     00 FA 05 F6 | 	mov	result1, #0
07aa8                 | LR__0637
07aa8     A7 F0 03 F6 | 	mov	ptra, fp
07aac     B2 00 A0 FD | 	call	#popregs_
07ab0                 | _compile_for_ret
07ab0     2D 00 64 FD | 	ret
07ab4                 | 
07ab4                 | ' 
07ab4                 | ' 
07ab4                 | ' sub do_for()
07ab4                 | _do_for
07ab4     05 4A 05 F6 | 	mov	COUNT_, #5
07ab8     A8 00 A0 FD | 	call	#pushregs_
07abc     79 00 00 FF 
07ac0     9C E4 05 F1 | 	add	objptr, ##62108
07ac4     F2 24 02 FB | 	rdlong	local04, objptr
07ac8     01 24 06 F1 | 	add	local04, #1
07acc     F2 24 62 FC | 	wrlong	local04, objptr
07ad0     79 00 00 FF 
07ad4     9C E4 85 F1 | 	sub	objptr, ##62108
07ad8     5C 1E B0 FD | 	call	#_pop
07adc     FD 1E 02 F6 | 	mov	local01, result1
07ae0     FE 20 02 F6 | 	mov	local02, result2
07ae4     FF 22 02 F6 | 	mov	local03, result3
07ae8     79 00 00 FF 
07aec     9C E4 05 F1 | 	add	objptr, ##62108
07af0     F2 24 02 FB | 	rdlong	local04, objptr
07af4     12 27 02 F6 | 	mov	local05, local04
07af8     02 26 66 F0 | 	shl	local05, #2
07afc     12 27 02 F1 | 	add	local05, local04
07b00     02 26 66 F0 | 	shl	local05, #2
07b04     07 00 00 FF 
07b08     40 E5 85 F1 | 	sub	objptr, ##3904
07b0c     F2 26 02 F1 | 	add	local05, objptr
07b10     08 26 06 F1 | 	add	local05, #8
07b14     13 1F 62 FC | 	wrlong	local01, local05
07b18     71 00 00 FF 
07b1c     5C E5 85 F1 | 	sub	objptr, ##58204
07b20     14 1E B0 FD | 	call	#_pop
07b24     FD 1E 02 F6 | 	mov	local01, result1
07b28     FE 20 02 F6 | 	mov	local02, result2
07b2c     FF 22 02 F6 | 	mov	local03, result3
07b30     79 00 00 FF 
07b34     9C E4 05 F1 | 	add	objptr, ##62108
07b38     F2 24 02 FB | 	rdlong	local04, objptr
07b3c     12 27 02 F6 | 	mov	local05, local04
07b40     02 26 66 F0 | 	shl	local05, #2
07b44     12 27 02 F1 | 	add	local05, local04
07b48     02 26 66 F0 | 	shl	local05, #2
07b4c     07 00 00 FF 
07b50     40 E5 85 F1 | 	sub	objptr, ##3904
07b54     F2 26 02 F1 | 	add	local05, objptr
07b58     0C 26 06 F1 | 	add	local05, #12
07b5c     13 1F 62 FC | 	wrlong	local01, local05
07b60     71 00 00 FF 
07b64     5C E5 85 F1 | 	sub	objptr, ##58204
07b68     CC 1D B0 FD | 	call	#_pop
07b6c     FD 1E 02 F6 | 	mov	local01, result1
07b70     FE 20 02 F6 | 	mov	local02, result2
07b74     FF 22 02 F6 | 	mov	local03, result3
07b78     79 00 00 FF 
07b7c     9C E4 05 F1 | 	add	objptr, ##62108
07b80     F2 24 02 FB | 	rdlong	local04, objptr
07b84     12 27 02 F6 | 	mov	local05, local04
07b88     02 26 66 F0 | 	shl	local05, #2
07b8c     12 27 02 F1 | 	add	local05, local04
07b90     02 26 66 F0 | 	shl	local05, #2
07b94     07 00 00 FF 
07b98     40 E5 85 F1 | 	sub	objptr, ##3904
07b9c     F2 26 02 F1 | 	add	local05, objptr
07ba0     10 26 06 F1 | 	add	local05, #16
07ba4     13 1F 62 FC | 	wrlong	local01, local05
07ba8                 | ' fortop+=1
07ba8                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07ba8                 | ' 'if i> maxfor then printerror(36) : return
07ba8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07ba8                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07ba8                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07ba8                 | ' if compiledline(lineptr_e).result_type=token_end then
07ba8     08 00 00 FF 
07bac     18 E4 85 F1 | 	sub	objptr, ##4120
07bb0     F2 1E 02 FB | 	rdlong	local01, objptr
07bb4     0F 27 02 F6 | 	mov	local05, local01
07bb8     01 26 66 F0 | 	shl	local05, #1
07bbc     0F 27 02 F1 | 	add	local05, local01
07bc0     02 26 66 F0 | 	shl	local05, #2
07bc4     03 00 00 FF 
07bc8     04 E4 85 F1 | 	sub	objptr, ##1540
07bcc     F2 26 02 F1 | 	add	local05, objptr
07bd0     08 26 06 F1 | 	add	local05, #8
07bd4     13 27 02 FB | 	rdlong	local05, local05
07bd8     FE 27 0E F2 | 	cmp	local05, #510 wz
07bdc     66 00 00 FF 
07be0     40 E5 85 F1 | 	sub	objptr, ##52544
07be4     70 00 90 5D |  if_ne	jmp	#LR__0640
07be8     79 00 00 FF 
07bec     9C E4 05 F1 | 	add	objptr, ##62108
07bf0     F2 1E 02 FB | 	rdlong	local01, objptr
07bf4     0F 27 02 F6 | 	mov	local05, local01
07bf8     02 26 66 F0 | 	shl	local05, #2
07bfc     0F 27 02 F1 | 	add	local05, local01
07c00     02 26 66 F0 | 	shl	local05, #2
07c04     07 00 00 FF 
07c08     40 E5 85 F1 | 	sub	objptr, ##3904
07c0c     F2 26 02 F1 | 	add	local05, objptr
07c10     07 00 00 FF 
07c14     18 E5 05 F1 | 	add	objptr, ##3864
07c18     F2 1E 02 FB | 	rdlong	local01, objptr
07c1c     13 1F 62 FC | 	wrlong	local01, local05
07c20     28 E4 05 F1 | 	add	objptr, #40
07c24     F2 1E 02 FB | 	rdlong	local01, objptr
07c28     0F 27 02 F6 | 	mov	local05, local01
07c2c     02 26 66 F0 | 	shl	local05, #2
07c30     0F 27 02 F1 | 	add	local05, local01
07c34     02 26 66 F0 | 	shl	local05, #2
07c38     07 00 00 FF 
07c3c     40 E5 85 F1 | 	sub	objptr, ##3904
07c40     F2 26 02 F1 | 	add	local05, objptr
07c44     04 26 06 F1 | 	add	local05, #4
07c48     13 01 68 FC | 	wrlong	#0, local05
07c4c     71 00 00 FF 
07c50     5C E5 85 F1 | 	sub	objptr, ##58204
07c54     7C 00 90 FD | 	jmp	#LR__0641
07c58                 | LR__0640
07c58     79 00 00 FF 
07c5c     9C E4 05 F1 | 	add	objptr, ##62108
07c60     F2 1E 02 FB | 	rdlong	local01, objptr
07c64     0F 27 02 F6 | 	mov	local05, local01
07c68     02 26 66 F0 | 	shl	local05, #2
07c6c     0F 27 02 F1 | 	add	local05, local01
07c70     02 26 66 F0 | 	shl	local05, #2
07c74     07 00 00 FF 
07c78     40 E5 85 F1 | 	sub	objptr, ##3904
07c7c     F2 26 02 F1 | 	add	local05, objptr
07c80     07 00 00 FF 
07c84     20 E5 05 F1 | 	add	objptr, ##3872
07c88     F2 1E 02 FB | 	rdlong	local01, objptr
07c8c     13 1F 62 FC | 	wrlong	local01, local05
07c90     20 E4 05 F1 | 	add	objptr, #32
07c94     F2 1E 02 FB | 	rdlong	local01, objptr
07c98     0F 27 02 F6 | 	mov	local05, local01
07c9c     02 26 66 F0 | 	shl	local05, #2
07ca0     0F 27 02 F1 | 	add	local05, local01
07ca4     02 26 66 F0 | 	shl	local05, #2
07ca8     07 00 00 FF 
07cac     40 E5 85 F1 | 	sub	objptr, ##3904
07cb0     F2 26 02 F1 | 	add	local05, objptr
07cb4     08 00 00 FF 
07cb8     18 E4 85 F1 | 	sub	objptr, ##4120
07cbc     F2 1E 02 FB | 	rdlong	local01, objptr
07cc0     69 00 00 FF 
07cc4     44 E5 85 F1 | 	sub	objptr, ##54084
07cc8     01 1E 06 F1 | 	add	local01, #1
07ccc     04 26 06 F1 | 	add	local05, #4
07cd0     13 1F 62 FC | 	wrlong	local01, local05
07cd4                 | LR__0641
07cd4     A7 F0 03 F6 | 	mov	ptra, fp
07cd8     B2 00 A0 FD | 	call	#popregs_
07cdc                 | _do_for_ret
07cdc     2D 00 64 FD | 	ret
07ce0                 | 
07ce0                 | ' 
07ce0                 | ' ' now do_next todo
07ce0                 | ' 
07ce0                 | ' sub do_next()
07ce0                 | _do_next
07ce0     04 4A 05 F6 | 	mov	COUNT_, #4
07ce4     A8 00 A0 FD | 	call	#pushregs_
07ce8     4C 1C B0 FD | 	call	#_pop
07cec     FD 1E 02 F6 | 	mov	local01, result1
07cf0     FE 20 02 F6 | 	mov	local02, result2
07cf4     FF 22 02 F6 | 	mov	local03, result3
07cf8                 | ' 
07cf8                 | ' t1=pop() :varnum=t1.result.uresult
07cf8                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07cf8     79 00 00 FF 
07cfc     9C E4 05 F1 | 	add	objptr, ##62108
07d00     F2 12 02 FB | 	rdlong	arg01, objptr
07d04     09 25 02 F6 | 	mov	local04, arg01
07d08     02 24 66 F0 | 	shl	local04, #2
07d0c     09 25 02 F1 | 	add	local04, arg01
07d10     02 24 66 F0 | 	shl	local04, #2
07d14     07 00 00 FF 
07d18     40 E5 85 F1 | 	sub	objptr, ##3904
07d1c     F2 24 02 F1 | 	add	local04, objptr
07d20     08 24 06 F1 | 	add	local04, #8
07d24     12 25 02 FB | 	rdlong	local04, local04
07d28     0F 25 0A F2 | 	cmp	local04, local01 wz
07d2c     71 00 00 FF 
07d30     5C E5 85 F1 | 	sub	objptr, ##58204
07d34     0C 00 90 AD |  if_e	jmp	#LR__0650
07d38     25 12 06 F6 | 	mov	arg01, #37
07d3c     3C E1 B0 FD | 	call	#_printerror
07d40     28 02 90 FD | 	jmp	#LR__0654
07d44                 | LR__0650
07d44     79 00 00 FF 
07d48     9C E4 05 F1 | 	add	objptr, ##62108
07d4c     F2 12 02 FB | 	rdlong	arg01, objptr
07d50     09 25 02 F6 | 	mov	local04, arg01
07d54     02 24 66 F0 | 	shl	local04, #2
07d58     09 25 02 F1 | 	add	local04, arg01
07d5c     02 24 66 F0 | 	shl	local04, #2
07d60     07 00 00 FF 
07d64     40 E5 85 F1 | 	sub	objptr, ##3904
07d68     F2 24 02 F1 | 	add	local04, objptr
07d6c     0C 24 06 F1 | 	add	local04, #12
07d70     12 25 02 FB | 	rdlong	local04, local04
07d74     0F 13 02 F6 | 	mov	arg01, local01
07d78     04 12 66 F0 | 	shl	arg01, #4
07d7c     3D 00 00 FF 
07d80     90 E4 85 F1 | 	sub	objptr, ##31376
07d84     F2 12 02 F1 | 	add	arg01, objptr
07d88     0F FF 01 F6 | 	mov	result3, local01
07d8c     04 FE 65 F0 | 	shl	result3, #4
07d90     F2 FE 01 F1 | 	add	result3, objptr
07d94     04 FE 05 F1 | 	add	result3, #4
07d98     FF FE 01 FB | 	rdlong	result3, result3
07d9c     12 FF 01 F1 | 	add	result3, local04
07da0     04 12 06 F1 | 	add	arg01, #4
07da4     09 FF 61 FC | 	wrlong	result3, arg01
07da8                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07da8                 | ' if fortable(fortop).stepval>=0 then
07da8     44 00 00 FF 
07dac     D0 E5 05 F1 | 	add	objptr, ##35280
07db0     F2 12 02 FB | 	rdlong	arg01, objptr
07db4     09 25 02 F6 | 	mov	local04, arg01
07db8     02 24 66 F0 | 	shl	local04, #2
07dbc     09 25 02 F1 | 	add	local04, arg01
07dc0     02 24 66 F0 | 	shl	local04, #2
07dc4     07 00 00 FF 
07dc8     40 E5 85 F1 | 	sub	objptr, ##3904
07dcc     F2 24 02 F1 | 	add	local04, objptr
07dd0     0C 24 06 F1 | 	add	local04, #12
07dd4     12 25 02 FB | 	rdlong	local04, local04
07dd8     00 24 56 F2 | 	cmps	local04, #0 wc
07ddc     71 00 00 FF 
07de0     5C E5 85 F1 | 	sub	objptr, ##58204
07de4     78 00 90 CD |  if_b	jmp	#LR__0651
07de8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07de8     04 1E 66 F0 | 	shl	local01, #4
07dec     34 00 00 FF 
07df0     CC E4 05 F1 | 	add	objptr, ##26828
07df4     F2 1E 02 F1 | 	add	local01, objptr
07df8     44 00 00 FF 
07dfc     D0 E5 05 F1 | 	add	objptr, ##35280
07e00     F2 24 02 FB | 	rdlong	local04, objptr
07e04     12 13 02 F6 | 	mov	arg01, local04
07e08     02 12 66 F0 | 	shl	arg01, #2
07e0c     12 13 02 F1 | 	add	arg01, local04
07e10     02 12 66 F0 | 	shl	arg01, #2
07e14     07 00 00 FF 
07e18     40 E5 85 F1 | 	sub	objptr, ##3904
07e1c     F2 12 02 F1 | 	add	arg01, objptr
07e20     04 1E 06 F1 | 	add	local01, #4
07e24     0F 25 02 FB | 	rdlong	local04, local01
07e28     10 12 06 F1 | 	add	arg01, #16
07e2c     09 13 02 FB | 	rdlong	arg01, arg01
07e30     09 25 5A F2 | 	cmps	local04, arg01 wcz
07e34     71 00 00 FF 
07e38     5C E5 85 F1 | 	sub	objptr, ##58204
07e3c     9C 00 90 ED |  if_be	jmp	#LR__0653
07e40     79 00 00 FF 
07e44     9C E4 05 F1 | 	add	objptr, ##62108
07e48     F2 24 02 FB | 	rdlong	local04, objptr
07e4c     01 24 86 F1 | 	sub	local04, #1
07e50     F2 24 62 FC | 	wrlong	local04, objptr
07e54     79 00 00 FF 
07e58     9C E4 85 F1 | 	sub	objptr, ##62108
07e5c     0C 01 90 FD | 	jmp	#LR__0654
07e60                 | LR__0651
07e60                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07e60     0F 13 02 F6 | 	mov	arg01, local01
07e64     04 12 66 F0 | 	shl	arg01, #4
07e68     34 00 00 FF 
07e6c     CC E4 05 F1 | 	add	objptr, ##26828
07e70     F2 12 02 F1 | 	add	arg01, objptr
07e74     44 00 00 FF 
07e78     D0 E5 05 F1 | 	add	objptr, ##35280
07e7c     F2 24 02 FB | 	rdlong	local04, objptr
07e80     12 1F 02 F6 | 	mov	local01, local04
07e84     02 1E 66 F0 | 	shl	local01, #2
07e88     12 1F 02 F1 | 	add	local01, local04
07e8c     02 1E 66 F0 | 	shl	local01, #2
07e90     07 00 00 FF 
07e94     40 E5 85 F1 | 	sub	objptr, ##3904
07e98     F2 1E 02 F1 | 	add	local01, objptr
07e9c     04 12 06 F1 | 	add	arg01, #4
07ea0     09 13 02 FB | 	rdlong	arg01, arg01
07ea4     10 1E 06 F1 | 	add	local01, #16
07ea8     0F 1F 02 FB | 	rdlong	local01, local01
07eac     0F 13 52 F2 | 	cmps	arg01, local01 wc
07eb0     71 00 00 FF 
07eb4     5C E5 85 F1 | 	sub	objptr, ##58204
07eb8     20 00 90 3D |  if_ae	jmp	#LR__0652
07ebc     79 00 00 FF 
07ec0     9C E4 05 F1 | 	add	objptr, ##62108
07ec4     F2 24 02 FB | 	rdlong	local04, objptr
07ec8     01 24 86 F1 | 	sub	local04, #1
07ecc     F2 24 62 FC | 	wrlong	local04, objptr
07ed0     79 00 00 FF 
07ed4     9C E4 85 F1 | 	sub	objptr, ##62108
07ed8     90 00 90 FD | 	jmp	#LR__0654
07edc                 | LR__0652
07edc                 | LR__0653
07edc     79 00 00 FF 
07ee0     9C E4 05 F1 | 	add	objptr, ##62108
07ee4     F2 1E 02 FB | 	rdlong	local01, objptr
07ee8     0F 25 02 F6 | 	mov	local04, local01
07eec     02 24 66 F0 | 	shl	local04, #2
07ef0     0F 25 02 F1 | 	add	local04, local01
07ef4     02 24 66 F0 | 	shl	local04, #2
07ef8     07 00 00 FF 
07efc     40 E5 85 F1 | 	sub	objptr, ##3904
07f00     F2 24 02 F1 | 	add	local04, objptr
07f04     12 25 02 FB | 	rdlong	local04, local04
07f08     07 00 00 FF 
07f0c     18 E5 05 F1 | 	add	objptr, ##3864
07f10     F2 24 62 FC | 	wrlong	local04, objptr
07f14     28 E4 05 F1 | 	add	objptr, #40
07f18     F2 1E 02 FB | 	rdlong	local01, objptr
07f1c     0F 25 02 F6 | 	mov	local04, local01
07f20     02 24 66 F0 | 	shl	local04, #2
07f24     0F 25 02 F1 | 	add	local04, local01
07f28     02 24 66 F0 | 	shl	local04, #2
07f2c     07 00 00 FF 
07f30     40 E5 85 F1 | 	sub	objptr, ##3904
07f34     F2 24 02 F1 | 	add	local04, objptr
07f38     04 24 06 F1 | 	add	local04, #4
07f3c     12 25 02 FB | 	rdlong	local04, local04
07f40     07 00 00 FF 
07f44     1C E5 05 F1 | 	add	objptr, ##3868
07f48     F2 24 62 FC | 	wrlong	local04, objptr
07f4c     0F 00 00 FF 
07f50     38 E5 85 F1 | 	sub	objptr, ##7992
07f54     F2 24 02 FB | 	rdlong	local04, objptr
07f58     01 24 86 F1 | 	sub	local04, #1
07f5c     04 E4 05 F1 | 	add	objptr, #4
07f60     F2 24 62 FC | 	wrlong	local04, objptr
07f64     69 00 00 FF 
07f68     44 E5 85 F1 | 	sub	objptr, ##54084
07f6c                 | LR__0654
07f6c     A7 F0 03 F6 | 	mov	ptra, fp
07f70     B2 00 A0 FD | 	call	#popregs_
07f74                 | _do_next_ret
07f74     2D 00 64 FD | 	ret
07f78                 | 
07f78                 | ' 
07f78                 | ' 
07f78                 | ' function compile_next() as ulong
07f78                 | _compile_next
07f78     04 4A 05 F6 | 	mov	COUNT_, #4
07f7c     A8 00 A0 FD | 	call	#pushregs_
07f80     56 00 00 FF 
07f84     08 E5 05 F1 | 	add	objptr, ##44296
07f88     F2 12 02 FB | 	rdlong	arg01, objptr
07f8c     03 12 66 F0 | 	shl	arg01, #3
07f90     02 00 00 FF 
07f94     38 E4 85 F1 | 	sub	objptr, ##1080
07f98     F2 12 02 F1 | 	add	arg01, objptr
07f9c     09 1F 02 FB | 	rdlong	local01, arg01
07fa0                 | ' 
07fa0                 | ' varname$=lparts(ct).part$ 
07fa0                 | ' 'suffix$=right$(varname$,1)
07fa0                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07fa0                 | ' if varnum=0 then compile_error(35)  : return 35
07fa0     04 E4 85 F1 | 	sub	objptr, #4
07fa4     F2 14 0A FB | 	rdlong	arg02, objptr wz
07fa8     54 00 00 FF 
07fac     CC E4 85 F1 | 	sub	objptr, ##43212
07fb0     10 00 90 5D |  if_ne	jmp	#LR__0660
07fb4     23 12 06 F6 | 	mov	arg01, #35
07fb8     0C E1 BF FD | 	call	#_compile_error
07fbc     23 FA 05 F6 | 	mov	result1, #35
07fc0     58 01 90 FD | 	jmp	#LR__0664
07fc4                 | LR__0660
07fc4     01 20 66 F6 | 	neg	local02, #1
07fc8                 | ' j=-1
07fc8                 | ' for i=0 to varnum-1
07fc8     00 22 06 F6 | 	mov	local03, #0
07fcc     54 00 00 FF 
07fd0     CC E4 05 F1 | 	add	objptr, ##43212
07fd4     F2 24 02 FB | 	rdlong	local04, objptr
07fd8     54 00 00 FF 
07fdc     CC E4 85 F1 | 	sub	objptr, ##43212
07fe0                 | LR__0661
07fe0     12 23 12 F2 | 	cmp	local03, local04 wc
07fe4     38 00 90 3D |  if_ae	jmp	#LR__0662
07fe8                 | '   if variables(i).name=varname$ then j=i : exit
07fe8     11 15 02 F6 | 	mov	arg02, local03
07fec     04 14 66 F0 | 	shl	arg02, #4
07ff0     34 00 00 FF 
07ff4     CC E4 05 F1 | 	add	objptr, ##26828
07ff8     F2 14 02 F1 | 	add	arg02, objptr
07ffc     0A 13 02 FB | 	rdlong	arg01, arg02
08000     0F 15 02 F6 | 	mov	arg02, local01
08004     34 00 00 FF 
08008     CC E4 85 F1 | 	sub	objptr, ##26828
0800c     50 14 B1 FD | 	call	#__system___string_cmp
08010     00 FA 0D F2 | 	cmp	result1, #0 wz
08014     11 21 02 A6 |  if_e	mov	local02, local03
08018     01 22 06 51 |  if_ne	add	local03, #1
0801c     C0 FF 9F 5D |  if_ne	jmp	#LR__0661
08020                 | LR__0662
08020                 | ' if j=-1 then compile_error(35) : return 35
08020     FF FF 7F FF 
08024     FF 21 0E F2 | 	cmp	local02, ##-1 wz
08028     10 00 90 5D |  if_ne	jmp	#LR__0663
0802c     23 12 06 F6 | 	mov	arg01, #35
08030     94 E0 BF FD | 	call	#_compile_error
08034     23 FA 05 F6 | 	mov	result1, #35
08038     E0 00 90 FD | 	jmp	#LR__0664
0803c                 | LR__0663
0803c     69 00 00 FF 
08040     40 E5 05 F1 | 	add	objptr, ##54080
08044     F2 24 02 FB | 	rdlong	local04, objptr
08048     12 23 02 F6 | 	mov	local03, local04
0804c     01 22 66 F0 | 	shl	local03, #1
08050     12 23 02 F1 | 	add	local03, local04
08054     02 22 66 F0 | 	shl	local03, #2
08058     03 00 00 FF 
0805c     00 E4 85 F1 | 	sub	objptr, ##1536
08060     F2 22 02 F1 | 	add	local03, objptr
08064     08 22 06 F1 | 	add	local03, #8
08068     11 39 68 FC | 	wrlong	#28, local03
0806c     03 00 00 FF 
08070     00 E4 05 F1 | 	add	objptr, ##1536
08074     F2 24 02 FB | 	rdlong	local04, objptr
08078     12 23 02 F6 | 	mov	local03, local04
0807c     01 22 66 F0 | 	shl	local03, #1
08080     12 23 02 F1 | 	add	local03, local04
08084     02 22 66 F0 | 	shl	local03, #2
08088     03 00 00 FF 
0808c     00 E4 85 F1 | 	sub	objptr, ##1536
08090     F2 22 02 F1 | 	add	local03, objptr
08094     11 21 62 FC | 	wrlong	local02, local03
08098     03 00 00 FF 
0809c     00 E4 05 F1 | 	add	objptr, ##1536
080a0     F2 24 02 FB | 	rdlong	local04, objptr
080a4     01 24 06 F1 | 	add	local04, #1
080a8     F2 24 62 FC | 	wrlong	local04, objptr
080ac     12 23 02 F6 | 	mov	local03, local04
080b0     01 22 66 F0 | 	shl	local03, #1
080b4     12 23 02 F1 | 	add	local03, local04
080b8     02 22 66 F0 | 	shl	local03, #2
080bc     03 00 00 FF 
080c0     00 E4 85 F1 | 	sub	objptr, ##1536
080c4     F2 22 02 F1 | 	add	local03, objptr
080c8     08 22 06 F1 | 	add	local03, #8
080cc     11 97 68 FC | 	wrlong	#75, local03
080d0     03 00 00 FF 
080d4     00 E4 05 F1 | 	add	objptr, ##1536
080d8     F2 24 02 FB | 	rdlong	local04, objptr
080dc     12 23 02 F6 | 	mov	local03, local04
080e0     01 22 66 F0 | 	shl	local03, #1
080e4     12 23 02 F1 | 	add	local03, local04
080e8     02 22 66 F0 | 	shl	local03, #2
080ec     03 00 00 FF 
080f0     00 E4 85 F1 | 	sub	objptr, ##1536
080f4     F2 22 02 F1 | 	add	local03, objptr
080f8     11 01 68 FC | 	wrlong	#0, local03
080fc     03 00 00 FF 
08100     00 E4 05 F1 | 	add	objptr, ##1536
08104     F2 24 02 FB | 	rdlong	local04, objptr
08108     01 24 06 F1 | 	add	local04, #1
0810c     F2 24 62 FC | 	wrlong	local04, objptr
08110     69 00 00 FF 
08114     40 E5 85 F1 | 	sub	objptr, ##54080
08118                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08118                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08118                 | ' return 0
08118     00 FA 05 F6 | 	mov	result1, #0
0811c                 | LR__0664
0811c     A7 F0 03 F6 | 	mov	ptra, fp
08120     B2 00 A0 FD | 	call	#popregs_
08124                 | _compile_next_ret
08124     2D 00 64 FD | 	ret
08128                 | 
08128                 | ' 
08128                 | ' 
08128                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
08128                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
08128                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
08128                 | ' 
08128                 | ' 
08128                 | ' function compile_goto( ) as ulong
08128                 | _compile_goto
08128     03 4A 05 F6 | 	mov	COUNT_, #3
0812c     A8 00 A0 FD | 	call	#pushregs_
08130     28 F0 07 F1 | 	add	ptra, #40
08134                 | ' 
08134                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08134     56 00 00 FF 
08138     08 E5 05 F1 | 	add	objptr, ##44296
0813c     F2 16 02 FB | 	rdlong	arg03, objptr
08140     03 16 66 F0 | 	shl	arg03, #3
08144     02 00 00 FF 
08148     38 E4 85 F1 | 	sub	objptr, ##1080
0814c     F2 16 02 F1 | 	add	arg03, objptr
08150     04 16 06 F1 | 	add	arg03, #4
08154     0B 17 02 FB | 	rdlong	arg03, arg03
08158     01 00 00 FF 
0815c     00 16 0E F2 | 	cmp	arg03, ##512 wz
08160     54 00 00 FF 
08164     D0 E4 85 F1 | 	sub	objptr, ##43216
08168     CC 02 90 5D |  if_ne	jmp	#LR__0675
0816c     56 00 00 FF 
08170     08 E5 05 F1 | 	add	objptr, ##44296
08174     F2 16 02 FB | 	rdlong	arg03, objptr
08178     01 16 06 F1 | 	add	arg03, #1
0817c     03 16 66 F0 | 	shl	arg03, #3
08180     02 00 00 FF 
08184     38 E4 85 F1 | 	sub	objptr, ##1080
08188     F2 16 02 F1 | 	add	arg03, objptr
0818c     04 16 06 F1 | 	add	arg03, #4
08190     0B 17 02 FB | 	rdlong	arg03, arg03
08194     FE 17 0E F2 | 	cmp	arg03, #510 wz
08198     54 00 00 FF 
0819c     D0 E4 85 F1 | 	sub	objptr, ##43216
081a0     94 02 90 5D |  if_ne	jmp	#LR__0675
081a4     56 00 00 FF 
081a8     08 E5 05 F1 | 	add	objptr, ##44296
081ac     F2 16 02 FB | 	rdlong	arg03, objptr
081b0     03 16 66 F0 | 	shl	arg03, #3
081b4     02 00 00 FF 
081b8     38 E4 85 F1 | 	sub	objptr, ##1080
081bc     F2 16 02 F1 | 	add	arg03, objptr
081c0     0B 13 02 FB | 	rdlong	arg01, arg03
081c4     00 14 06 F6 | 	mov	arg02, #0
081c8     54 00 00 FF 
081cc     D0 E4 85 F1 | 	sub	objptr, ##43216
081d0     C8 43 B1 FD | 	call	#__system____builtin_atoi
081d4     04 4E 05 F1 | 	add	fp, #4
081d8     A7 FA 61 FC | 	wrlong	result1, fp
081dc     69 00 00 FF 
081e0     40 E5 05 F1 | 	add	objptr, ##54080
081e4     F2 1E 02 FB | 	rdlong	local01, objptr
081e8     0F 21 02 F6 | 	mov	local02, local01
081ec     01 20 66 F0 | 	shl	local02, #1
081f0     0F 21 02 F1 | 	add	local02, local01
081f4     02 20 66 F0 | 	shl	local02, #2
081f8     03 00 00 FF 
081fc     00 E4 85 F1 | 	sub	objptr, ##1536
08200     F2 20 02 F1 | 	add	local02, objptr
08204     08 20 06 F1 | 	add	local02, #8
08208     10 9D 68 FC | 	wrlong	#78, local02
0820c     03 00 00 FF 
08210     08 E4 05 F1 | 	add	objptr, ##1544
08214     F2 22 02 FB | 	rdlong	local03, objptr
08218     69 00 00 FF 
0821c     48 E5 85 F1 | 	sub	objptr, ##54088
08220     04 4E 05 F1 | 	add	fp, #4
08224     A7 22 62 FC | 	wrlong	local03, fp
08228     08 4E 85 F1 | 	sub	fp, #8
0822c                 | ' 
0822c                 | '   gotoline=val%(lparts(ct).part$) 
0822c                 | '   compiledline(lineptr).result_type=token_fast_goto
0822c                 | ' ' now find a pointer to goto
0822c                 | '   gotoptr=programstart
0822c                 | '   do
0822c                 | LR__0670
0822c     10 4E 05 F1 | 	add	fp, #16
08230     A7 12 02 F6 | 	mov	arg01, fp
08234     08 4E 85 F1 | 	sub	fp, #8
08238     A7 14 02 FB | 	rdlong	arg02, fp
0823c     08 4E 85 F1 | 	sub	fp, #8
08240     18 16 06 F6 | 	mov	arg03, #24
08244     0B 00 00 FF 
08248     C0 E4 05 F1 | 	add	objptr, ##5824
0824c     7C 06 B1 FD | 	call	#_psram_spin2_read1
08250     0B 00 00 FF 
08254     C0 E4 85 F1 | 	sub	objptr, ##5824
08258                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08258                 | '     if gotoheader(0)<>$FFFFFFFF then
08258     10 4E 05 F1 | 	add	fp, #16
0825c     A7 22 02 FB | 	rdlong	local03, fp
08260     10 4E 85 F1 | 	sub	fp, #16
08264     FF FF 7F FF 
08268     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0826c     24 00 90 AD |  if_e	jmp	#LR__0671
08270     08 4E 05 F1 | 	add	fp, #8
08274     A7 22 02 FB | 	rdlong	local03, fp
08278     04 4E 05 F1 | 	add	fp, #4
0827c     A7 22 62 FC | 	wrlong	local03, fp
08280     18 4E 05 F1 | 	add	fp, #24
08284     A7 22 02 FB | 	rdlong	local03, fp
08288     1C 4E 85 F1 | 	sub	fp, #28
0828c     A7 22 62 FC | 	wrlong	local03, fp
08290     08 4E 85 F1 | 	sub	fp, #8
08294                 | LR__0671
08294     24 4E 05 F1 | 	add	fp, #36
08298     A7 22 02 FB | 	rdlong	local03, fp
0829c     24 4E 85 F1 | 	sub	fp, #36
082a0     FF FF 3F FF 
082a4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
082a8     10 4E 05 51 |  if_ne	add	fp, #16
082ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
082b0     10 4E 85 51 |  if_ne	sub	fp, #16
082b4     FF FF 7F 5F 
082b8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
082bc     1C 00 90 AD |  if_e	jmp	#LR__0672
082c0     10 4E 05 F1 | 	add	fp, #16
082c4     A7 22 02 FB | 	rdlong	local03, fp
082c8     0C 4E 85 F1 | 	sub	fp, #12
082cc     A7 20 02 FB | 	rdlong	local02, fp
082d0     04 4E 85 F1 | 	sub	fp, #4
082d4     10 23 0A F2 | 	cmp	local03, local02 wz
082d8     50 FF 9F 5D |  if_ne	jmp	#LR__0670
082dc                 | LR__0672
082dc                 | '   if gotoheader(0)=gotoline then
082dc     10 4E 05 F1 | 	add	fp, #16
082e0     A7 22 02 FB | 	rdlong	local03, fp
082e4     0C 4E 85 F1 | 	sub	fp, #12
082e8     A7 1E 02 FB | 	rdlong	local01, fp
082ec     04 4E 85 F1 | 	sub	fp, #4
082f0     0F 23 0A F2 | 	cmp	local03, local01 wz
082f4     7C 00 90 5D |  if_ne	jmp	#LR__0673
082f8     69 00 00 FF 
082fc     40 E5 05 F1 | 	add	objptr, ##54080
08300     F2 1E 02 FB | 	rdlong	local01, objptr
08304     0F 21 02 F6 | 	mov	local02, local01
08308     01 20 66 F0 | 	shl	local02, #1
0830c     0F 21 02 F1 | 	add	local02, local01
08310     02 20 66 F0 | 	shl	local02, #2
08314     03 00 00 FF 
08318     00 E4 85 F1 | 	sub	objptr, ##1536
0831c     F2 20 02 F1 | 	add	local02, objptr
08320     0C 4E 05 F1 | 	add	fp, #12
08324     A7 22 02 FB | 	rdlong	local03, fp
08328     10 23 62 FC | 	wrlong	local03, local02
0832c     03 00 00 FF 
08330     00 E4 05 F1 | 	add	objptr, ##1536
08334     F2 1E 02 FB | 	rdlong	local01, objptr
08338     0F 21 02 F6 | 	mov	local02, local01
0833c     01 20 66 F0 | 	shl	local02, #1
08340     0F 21 02 F1 | 	add	local02, local01
08344     02 20 66 F0 | 	shl	local02, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 20 02 F1 | 	add	local02, objptr
08354     08 4E 85 F1 | 	sub	fp, #8
08358     A7 22 02 FB | 	rdlong	local03, fp
0835c     04 4E 85 F1 | 	sub	fp, #4
08360     04 20 06 F1 | 	add	local02, #4
08364     10 23 62 FC | 	wrlong	local03, local02
08368     66 00 00 FF 
0836c     40 E5 85 F1 | 	sub	objptr, ##52544
08370     A4 00 90 FD | 	jmp	#LR__0674
08374                 | LR__0673
08374     69 00 00 FF 
08378     40 E5 05 F1 | 	add	objptr, ##54080
0837c     F2 1E 02 FB | 	rdlong	local01, objptr
08380     0F 21 02 F6 | 	mov	local02, local01
08384     01 20 66 F0 | 	shl	local02, #1
08388     0F 21 02 F1 | 	add	local02, local01
0838c     02 20 66 F0 | 	shl	local02, #2
08390     03 00 00 FF 
08394     00 E4 85 F1 | 	sub	objptr, ##1536
08398     F2 20 02 F1 | 	add	local02, objptr
0839c     00 00 C0 FF 
083a0     10 01 68 FC | 	wrlong	##-2147483648, local02
083a4     03 00 00 FF 
083a8     00 E4 05 F1 | 	add	objptr, ##1536
083ac     F2 1E 02 FB | 	rdlong	local01, objptr
083b0     0F 21 02 F6 | 	mov	local02, local01
083b4     01 20 66 F0 | 	shl	local02, #1
083b8     0F 21 02 F1 | 	add	local02, local01
083bc     02 20 66 F0 | 	shl	local02, #2
083c0     03 00 00 FF 
083c4     00 E4 85 F1 | 	sub	objptr, ##1536
083c8     F2 20 02 F1 | 	add	local02, objptr
083cc     04 4E 05 F1 | 	add	fp, #4
083d0     A7 22 02 FB | 	rdlong	local03, fp
083d4     04 4E 85 F1 | 	sub	fp, #4
083d8     04 20 06 F1 | 	add	local02, #4
083dc     10 23 62 FC | 	wrlong	local03, local02
083e0     03 00 00 FF 
083e4     00 E4 05 F1 | 	add	objptr, ##1536
083e8     F2 1E 02 FB | 	rdlong	local01, objptr
083ec     0F 21 02 F6 | 	mov	local02, local01
083f0     01 20 66 F0 | 	shl	local02, #1
083f4     0F 21 02 F1 | 	add	local02, local01
083f8     02 20 66 F0 | 	shl	local02, #2
083fc     03 00 00 FF 
08400     00 E4 85 F1 | 	sub	objptr, ##1536
08404     F2 20 02 F1 | 	add	local02, objptr
08408     08 20 06 F1 | 	add	local02, #8
0840c     10 A7 68 FC | 	wrlong	#83, local02
08410     66 00 00 FF 
08414     40 E5 85 F1 | 	sub	objptr, ##52544
08418                 | LR__0674
08418     69 00 00 FF 
0841c     40 E5 05 F1 | 	add	objptr, ##54080
08420     F2 22 02 FB | 	rdlong	local03, objptr
08424     01 22 06 F1 | 	add	local03, #1
08428     F2 22 62 FC | 	wrlong	local03, objptr
0842c     69 00 00 FF 
08430     40 E5 85 F1 | 	sub	objptr, ##54080
08434     40 00 90 FD | 	jmp	#LR__0676
08438                 | LR__0675
08438                 | '    print "We have a slow goto, todo  "
08438     00 12 06 F6 | 	mov	arg01, #0
0843c     FC 68 B1 FD | 	call	#__system___getiolock_0425
08440     FD 12 02 F6 | 	mov	arg01, result1
08444     F0 0F B1 FD | 	call	#__system___lockmem
08448     47 01 00 FF 
0844c     23 14 06 F6 | 	mov	arg02, ##@LR__4588
08450     00 12 06 F6 | 	mov	arg01, #0
08454     00 16 06 F6 | 	mov	arg03, #0
08458     D0 1C B1 FD | 	call	#__system___basic_print_string
0845c     00 12 06 F6 | 	mov	arg01, #0
08460     0A 14 06 F6 | 	mov	arg02, #10
08464     00 16 06 F6 | 	mov	arg03, #0
08468     68 1C B1 FD | 	call	#__system___basic_print_char
0846c     00 12 06 F6 | 	mov	arg01, #0
08470     C8 68 B1 FD | 	call	#__system___getiolock_0425
08474     FD 00 68 FC | 	wrlong	#0, result1
08478                 | LR__0676
08478                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08478                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08478                 | ' return 0
08478     00 FA 05 F6 | 	mov	result1, #0
0847c     A7 F0 03 F6 | 	mov	ptra, fp
08480     B2 00 A0 FD | 	call	#popregs_
08484                 | _compile_goto_ret
08484     2D 00 64 FD | 	ret
08488                 | 
08488                 | ' 
08488                 | ' 
08488                 | ' 
08488                 | ' 
08488                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08488                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08488                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08488                 | ' 
08488                 | ' 
08488                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08488                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08488                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08488                 | ' 
08488                 | ' 
08488                 | ' function expr() as integer 
08488                 | _expr
08488     07 4A 05 F6 | 	mov	COUNT_, #7
0848c     A8 00 A0 FD | 	call	#pushregs_
08490                 | _expr_enter
08490     56 00 00 FF 
08494     08 E5 05 F1 | 	add	objptr, ##44296
08498     F2 24 02 FB | 	rdlong	local04, objptr
0849c     03 24 66 F0 | 	shl	local04, #3
084a0     02 00 00 FF 
084a4     38 E4 85 F1 | 	sub	objptr, ##1080
084a8     F2 24 02 F1 | 	add	local04, objptr
084ac     04 24 06 F1 | 	add	local04, #4
084b0     12 27 02 FB | 	rdlong	local05, local04
084b4                 | ' 
084b4                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
084b4     FE 27 0E F2 | 	cmp	local05, #510 wz
084b8     54 00 00 FF 
084bc     D0 E4 85 F1 | 	sub	objptr, ##43216
084c0     C4 00 90 5D |  if_ne	jmp	#LR__0680
084c4     1D 1E 06 F6 | 	mov	local01, #29
084c8     FF 22 06 F6 | 	mov	local03, #255
084cc     0F 29 02 F6 | 	mov	local06, local01
084d0     10 2B 02 F6 | 	mov	local07, local02
084d4     11 1F 02 F6 | 	mov	local01, local03
084d8     69 00 00 FF 
084dc     40 E5 05 F1 | 	add	objptr, ##54080
084e0     F2 26 02 FB | 	rdlong	local05, objptr
084e4     13 25 02 F6 | 	mov	local04, local05
084e8     01 24 66 F0 | 	shl	local04, #1
084ec     13 25 02 F1 | 	add	local04, local05
084f0     02 24 66 F0 | 	shl	local04, #2
084f4     03 00 00 FF 
084f8     00 E4 85 F1 | 	sub	objptr, ##1536
084fc     F2 24 02 F1 | 	add	local04, objptr
08500     12 29 62 FC | 	wrlong	local06, local04
08504     03 00 00 FF 
08508     00 E4 05 F1 | 	add	objptr, ##1536
0850c     F2 28 02 FB | 	rdlong	local06, objptr
08510     14 27 02 F6 | 	mov	local05, local06
08514     01 26 66 F0 | 	shl	local05, #1
08518     14 27 02 F1 | 	add	local05, local06
0851c     02 26 66 F0 | 	shl	local05, #2
08520     03 00 00 FF 
08524     00 E4 85 F1 | 	sub	objptr, ##1536
08528     F2 26 02 F1 | 	add	local05, objptr
0852c     04 26 06 F1 | 	add	local05, #4
08530     13 2B 62 FC | 	wrlong	local07, local05
08534     03 00 00 FF 
08538     00 E4 05 F1 | 	add	objptr, ##1536
0853c     F2 2A 02 FB | 	rdlong	local07, objptr
08540     15 29 02 F6 | 	mov	local06, local07
08544     01 28 66 F0 | 	shl	local06, #1
08548     15 29 02 F1 | 	add	local06, local07
0854c     02 28 66 F0 | 	shl	local06, #2
08550     03 00 00 FF 
08554     00 E4 85 F1 | 	sub	objptr, ##1536
08558     F2 28 02 F1 | 	add	local06, objptr
0855c     08 28 06 F1 | 	add	local06, #8
08560     14 1F 62 FC | 	wrlong	local01, local06
08564     03 00 00 FF 
08568     00 E4 05 F1 | 	add	objptr, ##1536
0856c     F2 28 02 FB | 	rdlong	local06, objptr
08570     01 28 06 F1 | 	add	local06, #1
08574     F2 28 62 FC | 	wrlong	local06, objptr
08578     69 00 00 FF 
0857c     40 E5 85 F1 | 	sub	objptr, ##54080
08580     1D FA 05 F6 | 	mov	result1, #29
08584     54 01 90 FD | 	jmp	#LR__0683
08588                 | LR__0680
08588     00 1E 06 F6 | 	mov	local01, #0
0858c     58 01 B0 FD | 	call	#_addsub
08590     56 00 00 FF 
08594     08 E5 05 F1 | 	add	objptr, ##44296
08598     F2 24 02 FB | 	rdlong	local04, objptr
0859c     03 24 66 F0 | 	shl	local04, #3
085a0     02 00 00 FF 
085a4     38 E4 85 F1 | 	sub	objptr, ##1080
085a8     F2 24 02 F1 | 	add	local04, objptr
085ac     04 24 06 F1 | 	add	local04, #4
085b0     12 27 02 FB | 	rdlong	local05, local04
085b4                 | ' t3.result.uresult=0
085b4                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
085b4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
085b4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
085b4     54 00 00 FF 
085b8     D0 E4 85 F1 | 	sub	objptr, ##43216
085bc                 | LR__0681
085bc     1B 26 0E F2 | 	cmp	local05, #27 wz
085c0     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
085c4     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
085c8     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
085cc     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
085d0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
085d4     00 01 90 5D |  if_ne	jmp	#LR__0682
085d8     56 00 00 FF 
085dc     08 E5 05 F1 | 	add	objptr, ##44296
085e0     F2 28 02 FB | 	rdlong	local06, objptr
085e4     01 28 06 F1 | 	add	local06, #1
085e8     F2 28 62 FC | 	wrlong	local06, objptr
085ec     56 00 00 FF 
085f0     08 E5 85 F1 | 	sub	objptr, ##44296
085f4     F0 00 B0 FD | 	call	#_addsub
085f8     13 23 02 F6 | 	mov	local03, local05
085fc     0F 29 02 F6 | 	mov	local06, local01
08600     10 2B 02 F6 | 	mov	local07, local02
08604     11 27 02 F6 | 	mov	local05, local03
08608     69 00 00 FF 
0860c     40 E5 05 F1 | 	add	objptr, ##54080
08610     F2 24 02 FB | 	rdlong	local04, objptr
08614     12 FB 01 F6 | 	mov	result1, local04
08618     01 FA 65 F0 | 	shl	result1, #1
0861c     12 FB 01 F1 | 	add	result1, local04
08620     02 FA 65 F0 | 	shl	result1, #2
08624     03 00 00 FF 
08628     00 E4 85 F1 | 	sub	objptr, ##1536
0862c     F2 FA 01 F1 | 	add	result1, objptr
08630     FD 28 62 FC | 	wrlong	local06, result1
08634     03 00 00 FF 
08638     00 E4 05 F1 | 	add	objptr, ##1536
0863c     F2 28 02 FB | 	rdlong	local06, objptr
08640     14 25 02 F6 | 	mov	local04, local06
08644     01 24 66 F0 | 	shl	local04, #1
08648     14 25 02 F1 | 	add	local04, local06
0864c     02 24 66 F0 | 	shl	local04, #2
08650     03 00 00 FF 
08654     00 E4 85 F1 | 	sub	objptr, ##1536
08658     F2 24 02 F1 | 	add	local04, objptr
0865c     04 24 06 F1 | 	add	local04, #4
08660     12 2B 62 FC | 	wrlong	local07, local04
08664     03 00 00 FF 
08668     00 E4 05 F1 | 	add	objptr, ##1536
0866c     F2 2A 02 FB | 	rdlong	local07, objptr
08670     15 29 02 F6 | 	mov	local06, local07
08674     01 28 66 F0 | 	shl	local06, #1
08678     15 29 02 F1 | 	add	local06, local07
0867c     02 28 66 F0 | 	shl	local06, #2
08680     03 00 00 FF 
08684     00 E4 85 F1 | 	sub	objptr, ##1536
08688     F2 28 02 F1 | 	add	local06, objptr
0868c     08 28 06 F1 | 	add	local06, #8
08690     14 27 62 FC | 	wrlong	local05, local06
08694     03 00 00 FF 
08698     00 E4 05 F1 | 	add	objptr, ##1536
0869c     F2 28 02 FB | 	rdlong	local06, objptr
086a0     01 28 06 F1 | 	add	local06, #1
086a4     F2 28 62 FC | 	wrlong	local06, objptr
086a8     13 00 00 FF 
086ac     38 E4 85 F1 | 	sub	objptr, ##9784
086b0     F2 24 02 FB | 	rdlong	local04, objptr
086b4     03 24 66 F0 | 	shl	local04, #3
086b8     02 00 00 FF 
086bc     38 E4 85 F1 | 	sub	objptr, ##1080
086c0     F2 24 02 F1 | 	add	local04, objptr
086c4     04 24 06 F1 | 	add	local04, #4
086c8     12 27 02 FB | 	rdlong	local05, local04
086cc     54 00 00 FF 
086d0     D0 E4 85 F1 | 	sub	objptr, ##43216
086d4     E4 FE 9F FD | 	jmp	#LR__0681
086d8                 | LR__0682
086d8                 | ' return 0  
086d8     00 FA 05 F6 | 	mov	result1, #0
086dc                 | LR__0683
086dc     A7 F0 03 F6 | 	mov	ptra, fp
086e0     B2 00 A0 FD | 	call	#popregs_
086e4                 | _expr_ret
086e4     2D 00 64 FD | 	ret
086e8                 | 
086e8                 | ' 
086e8                 | ' 
086e8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
086e8                 | ' 
086e8                 | ' function addsub() as integer 
086e8                 | _addsub
086e8     07 4A 05 F6 | 	mov	COUNT_, #7
086ec     A8 00 A0 FD | 	call	#pushregs_
086f0                 | _addsub_enter
086f0     00 1E 06 F6 | 	mov	local01, #0
086f4     50 01 B0 FD | 	call	#_muldiv
086f8     56 00 00 FF 
086fc     08 E5 05 F1 | 	add	objptr, ##44296
08700     F2 24 02 FB | 	rdlong	local04, objptr
08704     03 24 66 F0 | 	shl	local04, #3
08708     02 00 00 FF 
0870c     38 E4 85 F1 | 	sub	objptr, ##1080
08710     F2 24 02 F1 | 	add	local04, objptr
08714     04 24 06 F1 | 	add	local04, #4
08718     12 27 02 FB | 	rdlong	local05, local04
0871c                 | ' t3.result.uresult=0
0871c                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0871c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0871c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0871c     54 00 00 FF 
08720     D0 E4 85 F1 | 	sub	objptr, ##43216
08724                 | LR__0690
08724     01 26 0E F2 | 	cmp	local05, #1 wz
08728     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0872c     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08730     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
08734     00 01 90 5D |  if_ne	jmp	#LR__0691
08738     56 00 00 FF 
0873c     08 E5 05 F1 | 	add	objptr, ##44296
08740     F2 24 02 FB | 	rdlong	local04, objptr
08744     01 24 06 F1 | 	add	local04, #1
08748     F2 24 62 FC | 	wrlong	local04, objptr
0874c     56 00 00 FF 
08750     08 E5 85 F1 | 	sub	objptr, ##44296
08754     F0 00 B0 FD | 	call	#_muldiv
08758     13 23 02 F6 | 	mov	local03, local05
0875c     0F 29 02 F6 | 	mov	local06, local01
08760     10 2B 02 F6 | 	mov	local07, local02
08764     11 27 02 F6 | 	mov	local05, local03
08768     69 00 00 FF 
0876c     40 E5 05 F1 | 	add	objptr, ##54080
08770     F2 24 02 FB | 	rdlong	local04, objptr
08774     12 FB 01 F6 | 	mov	result1, local04
08778     01 FA 65 F0 | 	shl	result1, #1
0877c     12 FB 01 F1 | 	add	result1, local04
08780     02 FA 65 F0 | 	shl	result1, #2
08784     03 00 00 FF 
08788     00 E4 85 F1 | 	sub	objptr, ##1536
0878c     F2 FA 01 F1 | 	add	result1, objptr
08790     FD 28 62 FC | 	wrlong	local06, result1
08794     03 00 00 FF 
08798     00 E4 05 F1 | 	add	objptr, ##1536
0879c     F2 28 02 FB | 	rdlong	local06, objptr
087a0     14 25 02 F6 | 	mov	local04, local06
087a4     01 24 66 F0 | 	shl	local04, #1
087a8     14 25 02 F1 | 	add	local04, local06
087ac     02 24 66 F0 | 	shl	local04, #2
087b0     03 00 00 FF 
087b4     00 E4 85 F1 | 	sub	objptr, ##1536
087b8     F2 24 02 F1 | 	add	local04, objptr
087bc     04 24 06 F1 | 	add	local04, #4
087c0     12 2B 62 FC | 	wrlong	local07, local04
087c4     03 00 00 FF 
087c8     00 E4 05 F1 | 	add	objptr, ##1536
087cc     F2 2A 02 FB | 	rdlong	local07, objptr
087d0     15 29 02 F6 | 	mov	local06, local07
087d4     01 28 66 F0 | 	shl	local06, #1
087d8     15 29 02 F1 | 	add	local06, local07
087dc     02 28 66 F0 | 	shl	local06, #2
087e0     03 00 00 FF 
087e4     00 E4 85 F1 | 	sub	objptr, ##1536
087e8     F2 28 02 F1 | 	add	local06, objptr
087ec     08 28 06 F1 | 	add	local06, #8
087f0     14 27 62 FC | 	wrlong	local05, local06
087f4     03 00 00 FF 
087f8     00 E4 05 F1 | 	add	objptr, ##1536
087fc     F2 28 02 FB | 	rdlong	local06, objptr
08800     01 28 06 F1 | 	add	local06, #1
08804     F2 28 62 FC | 	wrlong	local06, objptr
08808     13 00 00 FF 
0880c     38 E4 85 F1 | 	sub	objptr, ##9784
08810     F2 24 02 FB | 	rdlong	local04, objptr
08814     03 24 66 F0 | 	shl	local04, #3
08818     02 00 00 FF 
0881c     38 E4 85 F1 | 	sub	objptr, ##1080
08820     F2 24 02 F1 | 	add	local04, objptr
08824     04 24 06 F1 | 	add	local04, #4
08828     12 27 02 FB | 	rdlong	local05, local04
0882c     54 00 00 FF 
08830     D0 E4 85 F1 | 	sub	objptr, ##43216
08834     EC FE 9F FD | 	jmp	#LR__0690
08838                 | LR__0691
08838                 | '   return 0
08838     00 FA 05 F6 | 	mov	result1, #0
0883c     A7 F0 03 F6 | 	mov	ptra, fp
08840     B2 00 A0 FD | 	call	#popregs_
08844                 | _addsub_ret
08844     2D 00 64 FD | 	ret
08848                 | 
08848                 | ' 
08848                 | ' sub muldiv()
08848                 | _muldiv
08848     08 4A 05 F6 | 	mov	COUNT_, #8
0884c     A8 00 A0 FD | 	call	#pushregs_
08850                 | _muldiv_enter
08850     00 1E 06 F6 | 	mov	local01, #0
08854     58 01 B0 FD | 	call	#_getvalue
08858     56 00 00 FF 
0885c     08 E5 05 F1 | 	add	objptr, ##44296
08860     F2 24 02 FB | 	rdlong	local04, objptr
08864     03 24 66 F0 | 	shl	local04, #3
08868     02 00 00 FF 
0886c     38 E4 85 F1 | 	sub	objptr, ##1080
08870     F2 24 02 F1 | 	add	local04, objptr
08874     04 24 06 F1 | 	add	local04, #4
08878     12 27 02 FB | 	rdlong	local05, local04
0887c                 | ' t3.result.uresult=0
0887c                 | ' getvalue()    
0887c                 | ' op = lparts(ct).token
0887c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0887c     54 00 00 FF 
08880     D0 E4 85 F1 | 	sub	objptr, ##43216
08884                 | LR__0700
08884     05 26 0E F2 | 	cmp	local05, #5 wz
08888     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0888c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
08890     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08894     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08898     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0889c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
088a0     00 01 90 5D |  if_ne	jmp	#LR__0701
088a4     56 00 00 FF 
088a8     08 E5 05 F1 | 	add	objptr, ##44296
088ac     F2 24 02 FB | 	rdlong	local04, objptr
088b0     01 24 06 F1 | 	add	local04, #1
088b4     F2 24 62 FC | 	wrlong	local04, objptr
088b8     56 00 00 FF 
088bc     08 E5 85 F1 | 	sub	objptr, ##44296
088c0     EC 00 B0 FD | 	call	#_getvalue
088c4     13 23 02 F6 | 	mov	local03, local05
088c8     0F 29 02 F6 | 	mov	local06, local01
088cc     10 2B 02 F6 | 	mov	local07, local02
088d0     11 27 02 F6 | 	mov	local05, local03
088d4     69 00 00 FF 
088d8     40 E5 05 F1 | 	add	objptr, ##54080
088dc     F2 24 02 FB | 	rdlong	local04, objptr
088e0     12 2D 02 F6 | 	mov	local08, local04
088e4     01 2C 66 F0 | 	shl	local08, #1
088e8     12 2D 02 F1 | 	add	local08, local04
088ec     02 2C 66 F0 | 	shl	local08, #2
088f0     03 00 00 FF 
088f4     00 E4 85 F1 | 	sub	objptr, ##1536
088f8     F2 2C 02 F1 | 	add	local08, objptr
088fc     16 29 62 FC | 	wrlong	local06, local08
08900     03 00 00 FF 
08904     00 E4 05 F1 | 	add	objptr, ##1536
08908     F2 2C 02 FB | 	rdlong	local08, objptr
0890c     16 29 02 F6 | 	mov	local06, local08
08910     01 28 66 F0 | 	shl	local06, #1
08914     16 29 02 F1 | 	add	local06, local08
08918     02 28 66 F0 | 	shl	local06, #2
0891c     03 00 00 FF 
08920     00 E4 85 F1 | 	sub	objptr, ##1536
08924     F2 28 02 F1 | 	add	local06, objptr
08928     04 28 06 F1 | 	add	local06, #4
0892c     14 2B 62 FC | 	wrlong	local07, local06
08930     03 00 00 FF 
08934     00 E4 05 F1 | 	add	objptr, ##1536
08938     F2 2C 02 FB | 	rdlong	local08, objptr
0893c     16 2B 02 F6 | 	mov	local07, local08
08940     01 2A 66 F0 | 	shl	local07, #1
08944     16 2B 02 F1 | 	add	local07, local08
08948     02 2A 66 F0 | 	shl	local07, #2
0894c     03 00 00 FF 
08950     00 E4 85 F1 | 	sub	objptr, ##1536
08954     F2 2A 02 F1 | 	add	local07, objptr
08958     08 2A 06 F1 | 	add	local07, #8
0895c     15 27 62 FC | 	wrlong	local05, local07
08960     03 00 00 FF 
08964     00 E4 05 F1 | 	add	objptr, ##1536
08968     F2 28 02 FB | 	rdlong	local06, objptr
0896c     01 28 06 F1 | 	add	local06, #1
08970     F2 28 62 FC | 	wrlong	local06, objptr
08974     13 00 00 FF 
08978     38 E4 85 F1 | 	sub	objptr, ##9784
0897c     F2 24 02 FB | 	rdlong	local04, objptr
08980     03 24 66 F0 | 	shl	local04, #3
08984     02 00 00 FF 
08988     38 E4 85 F1 | 	sub	objptr, ##1080
0898c     F2 24 02 F1 | 	add	local04, objptr
08990     04 24 06 F1 | 	add	local04, #4
08994     12 27 02 FB | 	rdlong	local05, local04
08998     54 00 00 FF 
0899c     D0 E4 85 F1 | 	sub	objptr, ##43216
089a0     E0 FE 9F FD | 	jmp	#LR__0700
089a4                 | LR__0701
089a4     A7 F0 03 F6 | 	mov	ptra, fp
089a8     B2 00 A0 FD | 	call	#popregs_
089ac                 | _muldiv_ret
089ac     2D 00 64 FD | 	ret
089b0                 | 
089b0                 | ' 
089b0                 | ' sub getvalue() 
089b0                 | _getvalue
089b0     0B 4A 05 F6 | 	mov	COUNT_, #11
089b4     A8 00 A0 FD | 	call	#pushregs_
089b8                 | _getvalue_enter
089b8     01 24 06 F6 | 	mov	local04, #1
089bc     00 1E 06 F6 | 	mov	local01, #0
089c0     1D 22 06 F6 | 	mov	local03, #29
089c4     56 00 00 FF 
089c8     08 E5 05 F1 | 	add	objptr, ##44296
089cc     F2 16 02 FB | 	rdlong	arg03, objptr
089d0     03 16 66 F0 | 	shl	arg03, #3
089d4     02 00 00 FF 
089d8     38 E4 85 F1 | 	sub	objptr, ##1080
089dc     F2 16 02 F1 | 	add	arg03, objptr
089e0     04 16 06 F1 | 	add	arg03, #4
089e4     0B 27 02 FB | 	rdlong	local05, arg03
089e8                 | ' m=1
089e8                 | ' t1.result.uresult=0: t1.result_type=result_uint
089e8                 | ' op=lparts(ct).token
089e8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
089e8     02 26 0E F2 | 	cmp	local05, #2 wz
089ec     54 00 00 FF 
089f0     D0 E4 85 F1 | 	sub	objptr, ##43216
089f4     38 00 90 5D |  if_ne	jmp	#LR__0710
089f8     01 24 66 F6 | 	neg	local04, #1
089fc     56 00 00 FF 
08a00     08 E5 05 F1 | 	add	objptr, ##44296
08a04     F2 26 02 FB | 	rdlong	local05, objptr
08a08     01 26 06 F1 | 	add	local05, #1
08a0c     F2 26 62 FC | 	wrlong	local05, objptr
08a10     03 26 66 F0 | 	shl	local05, #3
08a14     02 00 00 FF 
08a18     38 E4 85 F1 | 	sub	objptr, ##1080
08a1c     F2 26 02 F1 | 	add	local05, objptr
08a20     04 26 06 F1 | 	add	local05, #4
08a24     13 27 02 FB | 	rdlong	local05, local05
08a28     54 00 00 FF 
08a2c     D0 E4 85 F1 | 	sub	objptr, ##43216
08a30                 | LR__0710
08a30                 | ' select case op
08a30     01 00 00 FF 
08a34     00 26 0E F2 | 	cmp	local05, ##512 wz
08a38     3C 00 90 AD |  if_e	jmp	#LR__0711
08a3c     01 00 00 FF 
08a40     01 26 0E F2 | 	cmp	local05, ##513 wz
08a44     88 01 90 AD |  if_e	jmp	#LR__0714
08a48     01 00 00 FF 
08a4c     02 26 0E F2 | 	cmp	local05, ##514 wz
08a50     84 02 90 AD |  if_e	jmp	#LR__0715
08a54     01 00 00 FF 
08a58     03 26 0E F2 | 	cmp	local05, ##515 wz
08a5c     E8 03 90 AD |  if_e	jmp	#LR__0718
08a60     01 00 00 FF 
08a64     04 26 0E F2 | 	cmp	local05, ##516 wz
08a68     E0 05 90 AD |  if_e	jmp	#LR__0723
08a6c     15 26 0E F2 | 	cmp	local05, #21 wz
08a70     00 06 90 AD |  if_e	jmp	#LR__0724
08a74     70 06 90 FD | 	jmp	#LR__0725
08a78                 | LR__0711
08a78                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08a78     01 24 0E F2 | 	cmp	local04, #1 wz
08a7c     3C 00 90 5D |  if_ne	jmp	#LR__0712
08a80     56 00 00 FF 
08a84     08 E5 05 F1 | 	add	objptr, ##44296
08a88     F2 26 02 FB | 	rdlong	local05, objptr
08a8c     03 26 66 F0 | 	shl	local05, #3
08a90     02 00 00 FF 
08a94     38 E4 85 F1 | 	sub	objptr, ##1080
08a98     F2 26 02 F1 | 	add	local05, objptr
08a9c     13 13 02 FB | 	rdlong	arg01, local05
08aa0     00 14 06 F6 | 	mov	arg02, #0
08aa4     54 00 00 FF 
08aa8     D0 E4 85 F1 | 	sub	objptr, ##43216
08aac     EC 3A B1 FD | 	call	#__system____builtin_atoi
08ab0     FD 24 02 FD | 	qmul	local04, result1
08ab4     18 1E 62 FD | 	getqx	local01
08ab8     1C 22 06 F6 | 	mov	local03, #28
08abc                 | LR__0712
08abc                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08abc     FF FF 7F FF 
08ac0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08ac4     3C 00 90 5D |  if_ne	jmp	#LR__0713
08ac8     56 00 00 FF 
08acc     08 E5 05 F1 | 	add	objptr, ##44296
08ad0     F2 26 02 FB | 	rdlong	local05, objptr
08ad4     03 26 66 F0 | 	shl	local05, #3
08ad8     02 00 00 FF 
08adc     38 E4 85 F1 | 	sub	objptr, ##1080
08ae0     F2 26 02 F1 | 	add	local05, objptr
08ae4     13 13 02 FB | 	rdlong	arg01, local05
08ae8     00 14 06 F6 | 	mov	arg02, #0
08aec     54 00 00 FF 
08af0     D0 E4 85 F1 | 	sub	objptr, ##43216
08af4     A4 3A B1 FD | 	call	#__system____builtin_atoi
08af8     FD 24 02 FD | 	qmul	local04, result1
08afc     18 1E 62 FD | 	getqx	local01
08b00     1C 22 06 F6 | 	mov	local03, #28
08b04                 | LR__0713
08b04     0F 29 02 F6 | 	mov	local06, local01
08b08     10 2B 02 F6 | 	mov	local07, local02
08b0c     11 27 02 F6 | 	mov	local05, local03
08b10     69 00 00 FF 
08b14     40 E5 05 F1 | 	add	objptr, ##54080
08b18     F2 1E 02 FB | 	rdlong	local01, objptr
08b1c     0F 25 02 F6 | 	mov	local04, local01
08b20     01 24 66 F0 | 	shl	local04, #1
08b24     0F 25 02 F1 | 	add	local04, local01
08b28     02 24 66 F0 | 	shl	local04, #2
08b2c     03 00 00 FF 
08b30     00 E4 85 F1 | 	sub	objptr, ##1536
08b34     F2 24 02 F1 | 	add	local04, objptr
08b38     12 29 62 FC | 	wrlong	local06, local04
08b3c     03 00 00 FF 
08b40     00 E4 05 F1 | 	add	objptr, ##1536
08b44     F2 28 02 FB | 	rdlong	local06, objptr
08b48     14 1F 02 F6 | 	mov	local01, local06
08b4c     01 1E 66 F0 | 	shl	local01, #1
08b50     14 1F 02 F1 | 	add	local01, local06
08b54     02 1E 66 F0 | 	shl	local01, #2
08b58     03 00 00 FF 
08b5c     00 E4 85 F1 | 	sub	objptr, ##1536
08b60     F2 1E 02 F1 | 	add	local01, objptr
08b64     04 1E 06 F1 | 	add	local01, #4
08b68     0F 2B 62 FC | 	wrlong	local07, local01
08b6c     03 00 00 FF 
08b70     00 E4 05 F1 | 	add	objptr, ##1536
08b74     F2 2A 02 FB | 	rdlong	local07, objptr
08b78     15 29 02 F6 | 	mov	local06, local07
08b7c     01 28 66 F0 | 	shl	local06, #1
08b80     15 29 02 F1 | 	add	local06, local07
08b84     02 28 66 F0 | 	shl	local06, #2
08b88     03 00 00 FF 
08b8c     00 E4 85 F1 | 	sub	objptr, ##1536
08b90     F2 28 02 F1 | 	add	local06, objptr
08b94     08 28 06 F1 | 	add	local06, #8
08b98     14 27 62 FC | 	wrlong	local05, local06
08b9c     03 00 00 FF 
08ba0     00 E4 05 F1 | 	add	objptr, ##1536
08ba4     F2 28 02 FB | 	rdlong	local06, objptr
08ba8     01 28 06 F1 | 	add	local06, #1
08bac     F2 28 62 FC | 	wrlong	local06, objptr
08bb0     13 00 00 FF 
08bb4     38 E4 85 F1 | 	sub	objptr, ##9784
08bb8     F2 28 02 FB | 	rdlong	local06, objptr
08bbc     01 28 06 F1 | 	add	local06, #1
08bc0     F2 28 62 FC | 	wrlong	local06, objptr
08bc4     56 00 00 FF 
08bc8     08 E5 85 F1 | 	sub	objptr, ##44296
08bcc     3C 05 90 FD | 	jmp	#LR__0726
08bd0                 | LR__0714
08bd0     56 00 00 FF 
08bd4     08 E5 05 F1 | 	add	objptr, ##44296
08bd8     F2 28 02 FB | 	rdlong	local06, objptr
08bdc     03 28 66 F0 | 	shl	local06, #3
08be0     02 00 00 FF 
08be4     38 E4 85 F1 | 	sub	objptr, ##1080
08be8     F2 28 02 F1 | 	add	local06, objptr
08bec     14 13 02 FB | 	rdlong	arg01, local06
08bf0     00 14 06 F6 | 	mov	arg02, #0
08bf4     54 00 00 FF 
08bf8     D0 E4 85 F1 | 	sub	objptr, ##43216
08bfc     9C 39 B1 FD | 	call	#__system____builtin_atoi
08c00     FD 24 02 FD | 	qmul	local04, result1
08c04     69 00 00 FF 
08c08     40 E5 05 F1 | 	add	objptr, ##54080
08c0c     F2 28 02 FB | 	rdlong	local06, objptr
08c10     14 2D 02 F6 | 	mov	local08, local06
08c14     01 2C 66 F0 | 	shl	local08, #1
08c18     14 2D 02 F1 | 	add	local08, local06
08c1c     02 2C 66 F0 | 	shl	local08, #2
08c20     03 00 00 FF 
08c24     00 E4 85 F1 | 	sub	objptr, ##1536
08c28     F2 2C 02 F1 | 	add	local08, objptr
08c2c     03 00 00 FF 
08c30     00 E4 05 F1 | 	add	objptr, ##1536
08c34     18 1E 62 FD | 	getqx	local01
08c38     1C 22 06 F6 | 	mov	local03, #28
08c3c     0F 29 02 F6 | 	mov	local06, local01
08c40     10 2B 02 F6 | 	mov	local07, local02
08c44     16 29 62 FC | 	wrlong	local06, local08
08c48     11 2D 02 F6 | 	mov	local08, local03
08c4c     F2 28 02 FB | 	rdlong	local06, objptr
08c50     14 27 02 F6 | 	mov	local05, local06
08c54     01 26 66 F0 | 	shl	local05, #1
08c58     14 27 02 F1 | 	add	local05, local06
08c5c     02 26 66 F0 | 	shl	local05, #2
08c60     03 00 00 FF 
08c64     00 E4 85 F1 | 	sub	objptr, ##1536
08c68     F2 26 02 F1 | 	add	local05, objptr
08c6c     04 26 06 F1 | 	add	local05, #4
08c70     13 2B 62 FC | 	wrlong	local07, local05
08c74     03 00 00 FF 
08c78     00 E4 05 F1 | 	add	objptr, ##1536
08c7c     F2 2A 02 FB | 	rdlong	local07, objptr
08c80     15 29 02 F6 | 	mov	local06, local07
08c84     01 28 66 F0 | 	shl	local06, #1
08c88     15 29 02 F1 | 	add	local06, local07
08c8c     02 28 66 F0 | 	shl	local06, #2
08c90     03 00 00 FF 
08c94     00 E4 85 F1 | 	sub	objptr, ##1536
08c98     F2 28 02 F1 | 	add	local06, objptr
08c9c     08 28 06 F1 | 	add	local06, #8
08ca0     14 2D 62 FC | 	wrlong	local08, local06
08ca4     03 00 00 FF 
08ca8     00 E4 05 F1 | 	add	objptr, ##1536
08cac     F2 28 02 FB | 	rdlong	local06, objptr
08cb0     01 28 06 F1 | 	add	local06, #1
08cb4     F2 28 62 FC | 	wrlong	local06, objptr
08cb8     13 00 00 FF 
08cbc     38 E4 85 F1 | 	sub	objptr, ##9784
08cc0     F2 28 02 FB | 	rdlong	local06, objptr
08cc4     01 28 06 F1 | 	add	local06, #1
08cc8     F2 28 62 FC | 	wrlong	local06, objptr
08ccc     56 00 00 FF 
08cd0     08 E5 85 F1 | 	sub	objptr, ##44296
08cd4     34 04 90 FD | 	jmp	#LR__0726
08cd8                 | LR__0715
08cd8                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08cd8     01 24 0E F2 | 	cmp	local04, #1 wz
08cdc     48 00 90 5D |  if_ne	jmp	#LR__0716
08ce0     00 C0 1F FF 
08ce4     00 28 06 F6 | 	mov	local06, ##1065353216
08ce8     56 00 00 FF 
08cec     08 E5 05 F1 | 	add	objptr, ##44296
08cf0     F2 2C 02 FB | 	rdlong	local08, objptr
08cf4     03 2C 66 F0 | 	shl	local08, #3
08cf8     02 00 00 FF 
08cfc     38 E4 85 F1 | 	sub	objptr, ##1080
08d00     F2 2C 02 F1 | 	add	local08, objptr
08d04     16 13 02 FB | 	rdlong	arg01, local08
08d08     54 00 00 FF 
08d0c     D0 E4 85 F1 | 	sub	objptr, ##43216
08d10     F8 39 B1 FD | 	call	#__system____builtin_atof
08d14     FD 14 02 F6 | 	mov	arg02, result1
08d18     14 13 02 F6 | 	mov	arg01, local06
08d1c     04 32 B1 FD | 	call	#__system___float_mul
08d20     FD 1E 02 F6 | 	mov	local01, result1
08d24     1E 22 06 F6 | 	mov	local03, #30
08d28                 | LR__0716
08d28                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08d28     FF FF 7F FF 
08d2c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08d30     48 00 90 5D |  if_ne	jmp	#LR__0717
08d34     00 C0 5F FF 
08d38     00 28 06 F6 | 	mov	local06, ##-1082130432
08d3c     56 00 00 FF 
08d40     08 E5 05 F1 | 	add	objptr, ##44296
08d44     F2 2C 02 FB | 	rdlong	local08, objptr
08d48     03 2C 66 F0 | 	shl	local08, #3
08d4c     02 00 00 FF 
08d50     38 E4 85 F1 | 	sub	objptr, ##1080
08d54     F2 2C 02 F1 | 	add	local08, objptr
08d58     16 13 02 FB | 	rdlong	arg01, local08
08d5c     54 00 00 FF 
08d60     D0 E4 85 F1 | 	sub	objptr, ##43216
08d64     A4 39 B1 FD | 	call	#__system____builtin_atof
08d68     FD 14 02 F6 | 	mov	arg02, result1
08d6c     14 13 02 F6 | 	mov	arg01, local06
08d70     B0 31 B1 FD | 	call	#__system___float_mul
08d74     FD 1E 02 F6 | 	mov	local01, result1
08d78     1E 22 06 F6 | 	mov	local03, #30
08d7c                 | LR__0717
08d7c     0F 29 02 F6 | 	mov	local06, local01
08d80     10 2B 02 F6 | 	mov	local07, local02
08d84     11 27 02 F6 | 	mov	local05, local03
08d88     69 00 00 FF 
08d8c     40 E5 05 F1 | 	add	objptr, ##54080
08d90     F2 1E 02 FB | 	rdlong	local01, objptr
08d94     0F 2D 02 F6 | 	mov	local08, local01
08d98     01 2C 66 F0 | 	shl	local08, #1
08d9c     0F 2D 02 F1 | 	add	local08, local01
08da0     02 2C 66 F0 | 	shl	local08, #2
08da4     03 00 00 FF 
08da8     00 E4 85 F1 | 	sub	objptr, ##1536
08dac     F2 2C 02 F1 | 	add	local08, objptr
08db0     16 29 62 FC | 	wrlong	local06, local08
08db4     03 00 00 FF 
08db8     00 E4 05 F1 | 	add	objptr, ##1536
08dbc     F2 2C 02 FB | 	rdlong	local08, objptr
08dc0     16 29 02 F6 | 	mov	local06, local08
08dc4     01 28 66 F0 | 	shl	local06, #1
08dc8     16 29 02 F1 | 	add	local06, local08
08dcc     02 28 66 F0 | 	shl	local06, #2
08dd0     03 00 00 FF 
08dd4     00 E4 85 F1 | 	sub	objptr, ##1536
08dd8     F2 28 02 F1 | 	add	local06, objptr
08ddc     04 28 06 F1 | 	add	local06, #4
08de0     14 2B 62 FC | 	wrlong	local07, local06
08de4     03 00 00 FF 
08de8     00 E4 05 F1 | 	add	objptr, ##1536
08dec     F2 2C 02 FB | 	rdlong	local08, objptr
08df0     16 2B 02 F6 | 	mov	local07, local08
08df4     01 2A 66 F0 | 	shl	local07, #1
08df8     16 2B 02 F1 | 	add	local07, local08
08dfc     02 2A 66 F0 | 	shl	local07, #2
08e00     03 00 00 FF 
08e04     00 E4 85 F1 | 	sub	objptr, ##1536
08e08     F2 2A 02 F1 | 	add	local07, objptr
08e0c     08 2A 06 F1 | 	add	local07, #8
08e10     15 27 62 FC | 	wrlong	local05, local07
08e14     03 00 00 FF 
08e18     00 E4 05 F1 | 	add	objptr, ##1536
08e1c     F2 28 02 FB | 	rdlong	local06, objptr
08e20     01 28 06 F1 | 	add	local06, #1
08e24     F2 28 62 FC | 	wrlong	local06, objptr
08e28     13 00 00 FF 
08e2c     38 E4 85 F1 | 	sub	objptr, ##9784
08e30     F2 28 02 FB | 	rdlong	local06, objptr
08e34     01 28 06 F1 | 	add	local06, #1
08e38     F2 28 62 FC | 	wrlong	local06, objptr
08e3c     56 00 00 FF 
08e40     08 E5 85 F1 | 	sub	objptr, ##44296
08e44     C4 02 90 FD | 	jmp	#LR__0726
08e48                 | LR__0718
08e48     1F 22 06 F6 | 	mov	local03, #31
08e4c     56 00 00 FF 
08e50     08 E5 05 F1 | 	add	objptr, ##44296
08e54     F2 16 02 FB | 	rdlong	arg03, objptr
08e58     03 16 66 F0 | 	shl	arg03, #3
08e5c     02 00 00 FF 
08e60     38 E4 85 F1 | 	sub	objptr, ##1080
08e64     F2 16 02 F1 | 	add	arg03, objptr
08e68     0B 13 02 FB | 	rdlong	arg01, arg03
08e6c     54 00 00 FF 
08e70     D0 E4 85 F1 | 	sub	objptr, ##43216
08e74     09 2F 02 F6 | 	mov	local09, arg01
08e78     97 06 48 FB | 	callpa	#(@LR__0720-@LR__0719)>>2,fcache_load_ptr_
08e7c                 | LR__0719
08e7c     17 FB C9 FA | 	rdbyte	result1, local09 wz
08e80     01 2E 06 51 |  if_ne	add	local09, #1
08e84     F4 FF 9F 5D |  if_ne	jmp	#LR__0719
08e88                 | LR__0720
08e88     09 2F 82 F1 | 	sub	local09, arg01
08e8c     17 FB 01 F6 | 	mov	result1, local09
08e90     7A 00 00 FF 
08e94     78 E5 05 F1 | 	add	objptr, ##62840
08e98     F2 FA 61 FC | 	wrlong	result1, objptr
08e9c     3C E4 85 F1 | 	sub	objptr, #60
08ea0     F2 12 02 FB | 	rdlong	arg01, objptr
08ea4     FD 12 82 F1 | 	sub	arg01, result1
08ea8     04 12 86 F1 | 	sub	arg01, #4
08eac     03 12 26 F5 | 	andn	arg01, #3
08eb0     F2 12 62 FC | 	wrlong	arg01, objptr
08eb4     3C E4 05 F1 | 	add	objptr, #60
08eb8     F2 14 02 FB | 	rdlong	arg02, objptr
08ebc     01 16 06 F6 | 	mov	arg03, #1
08ec0     00 18 06 F6 | 	mov	arg04, #0
08ec4     6F 00 00 FF 
08ec8     B8 E4 85 F1 | 	sub	objptr, ##57016
08ecc                 | '     return fill(addr, pattern, count, listPtr, 4)
08ecc     04 1A 06 F6 | 	mov	arg05, #4
08ed0     30 FB B0 FD | 	call	#_psram_spin2_fill
08ed4                 | '     pslpoke memtop,l
08ed4                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08ed4     01 30 06 F6 | 	mov	local10, #1
08ed8     6F 00 00 FF 
08edc     B8 E4 05 F1 | 	add	objptr, ##57016
08ee0     F2 32 02 FB | 	rdlong	local11, objptr
08ee4     7A 00 00 FF 
08ee8     78 E5 85 F1 | 	sub	objptr, ##62840
08eec     01 32 06 F1 | 	add	local11, #1
08ef0                 | LR__0721
08ef0     19 31 52 F2 | 	cmps	local10, local11 wc
08ef4     78 00 90 3D |  if_ae	jmp	#LR__0722
08ef8     7A 00 00 FF 
08efc     3C E5 05 F1 | 	add	objptr, ##62780
08f00     F2 2A 02 FB | 	rdlong	local07, objptr
08f04     03 2A 06 F1 | 	add	local07, #3
08f08     18 2B 02 F1 | 	add	local07, local10
08f0c     24 00 00 FF 
08f10     34 E4 85 F1 | 	sub	objptr, ##18484
08f14     F2 2C 02 FB | 	rdlong	local08, objptr
08f18     03 2C 66 F0 | 	shl	local08, #3
08f1c     02 00 00 FF 
08f20     38 E4 85 F1 | 	sub	objptr, ##1080
08f24     F2 2C 02 F1 | 	add	local08, objptr
08f28     16 13 02 FB | 	rdlong	arg01, local08
08f2c     18 15 02 F6 | 	mov	arg02, local10
08f30     01 16 06 F6 | 	mov	arg03, #1
08f34     54 00 00 FF 
08f38     D0 E4 85 F1 | 	sub	objptr, ##43216
08f3c     20 26 B1 FD | 	call	#__system__Mid_S
08f40     FD 14 C2 FA | 	rdbyte	arg02, result1
08f44     15 13 02 F6 | 	mov	arg01, local07
08f48     01 16 06 F6 | 	mov	arg03, #1
08f4c     00 18 06 F6 | 	mov	arg04, #0
08f50     0B 00 00 FF 
08f54     C0 E4 05 F1 | 	add	objptr, ##5824
08f58                 | '     return fill(addr, pattern, count, listPtr, 1)
08f58     01 1A 06 F6 | 	mov	arg05, #1
08f5c     A4 FA B0 FD | 	call	#_psram_spin2_fill
08f60     0B 00 00 FF 
08f64     C0 E4 85 F1 | 	sub	objptr, ##5824
08f68     01 30 06 F1 | 	add	local10, #1
08f6c     80 FF 9F FD | 	jmp	#LR__0721
08f70                 | LR__0722
08f70     7A 00 00 FF 
08f74     3C E5 05 F1 | 	add	objptr, ##62780
08f78     F2 1E 02 FB | 	rdlong	local01, objptr
08f7c     2B 22 06 F6 | 	mov	local03, #43
08f80     0F 29 02 F6 | 	mov	local06, local01
08f84     10 2B 02 F6 | 	mov	local07, local02
08f88     11 33 02 F6 | 	mov	local11, local03
08f8c     10 00 00 FF 
08f90     FC E5 85 F1 | 	sub	objptr, ##8700
08f94     F2 30 02 FB | 	rdlong	local10, objptr
08f98     18 2D 02 F6 | 	mov	local08, local10
08f9c     01 2C 66 F0 | 	shl	local08, #1
08fa0     18 2D 02 F1 | 	add	local08, local10
08fa4     02 2C 66 F0 | 	shl	local08, #2
08fa8     03 00 00 FF 
08fac     00 E4 85 F1 | 	sub	objptr, ##1536
08fb0     F2 2C 02 F1 | 	add	local08, objptr
08fb4     16 29 62 FC | 	wrlong	local06, local08
08fb8     03 00 00 FF 
08fbc     00 E4 05 F1 | 	add	objptr, ##1536
08fc0     F2 30 02 FB | 	rdlong	local10, objptr
08fc4     18 2D 02 F6 | 	mov	local08, local10
08fc8     01 2C 66 F0 | 	shl	local08, #1
08fcc     18 2D 02 F1 | 	add	local08, local10
08fd0     02 2C 66 F0 | 	shl	local08, #2
08fd4     03 00 00 FF 
08fd8     00 E4 85 F1 | 	sub	objptr, ##1536
08fdc     F2 2C 02 F1 | 	add	local08, objptr
08fe0     04 2C 06 F1 | 	add	local08, #4
08fe4     16 2B 62 FC | 	wrlong	local07, local08
08fe8     03 00 00 FF 
08fec     00 E4 05 F1 | 	add	objptr, ##1536
08ff0     F2 30 02 FB | 	rdlong	local10, objptr
08ff4     18 2D 02 F6 | 	mov	local08, local10
08ff8     01 2C 66 F0 | 	shl	local08, #1
08ffc     18 2D 02 F1 | 	add	local08, local10
09000     02 2C 66 F0 | 	shl	local08, #2
09004     03 00 00 FF 
09008     00 E4 85 F1 | 	sub	objptr, ##1536
0900c     F2 2C 02 F1 | 	add	local08, objptr
09010     08 2C 06 F1 | 	add	local08, #8
09014     16 33 62 FC | 	wrlong	local11, local08
09018     03 00 00 FF 
0901c     00 E4 05 F1 | 	add	objptr, ##1536
09020     F2 28 02 FB | 	rdlong	local06, objptr
09024     01 28 06 F1 | 	add	local06, #1
09028     F2 28 62 FC | 	wrlong	local06, objptr
0902c     13 00 00 FF 
09030     38 E4 85 F1 | 	sub	objptr, ##9784
09034     F2 28 02 FB | 	rdlong	local06, objptr
09038     01 28 06 F1 | 	add	local06, #1
0903c     F2 28 62 FC | 	wrlong	local06, objptr
09040     56 00 00 FF 
09044     08 E5 85 F1 | 	sub	objptr, ##44296
09048     C0 00 90 FD | 	jmp	#LR__0726
0904c                 | LR__0723
0904c     12 13 02 F6 | 	mov	arg01, local04
09050     B8 03 B0 FD | 	call	#_getvar
09054     56 00 00 FF 
09058     08 E5 05 F1 | 	add	objptr, ##44296
0905c     F2 28 02 FB | 	rdlong	local06, objptr
09060     01 28 06 F1 | 	add	local06, #1
09064     F2 28 62 FC | 	wrlong	local06, objptr
09068     56 00 00 FF 
0906c     08 E5 85 F1 | 	sub	objptr, ##44296
09070     98 00 90 FD | 	jmp	#LR__0726
09074                 | LR__0724
09074     56 00 00 FF 
09078     08 E5 05 F1 | 	add	objptr, ##44296
0907c     F2 28 02 FB | 	rdlong	local06, objptr
09080     01 28 06 F1 | 	add	local06, #1
09084     F2 28 62 FC | 	wrlong	local06, objptr
09088     56 00 00 FF 
0908c     08 E5 85 F1 | 	sub	objptr, ##44296
09090     F4 F3 BF FD | 	call	#_expr
09094                 | '     ct+=1
09094                 | '     expr() 
09094                 | '     if lparts(ct).token=token_rpar then ct+=1
09094     56 00 00 FF 
09098     08 E5 05 F1 | 	add	objptr, ##44296
0909c     F2 32 02 FB | 	rdlong	local11, objptr
090a0     03 32 66 F0 | 	shl	local11, #3
090a4     02 00 00 FF 
090a8     38 E4 85 F1 | 	sub	objptr, ##1080
090ac     F2 32 02 F1 | 	add	local11, objptr
090b0     04 32 06 F1 | 	add	local11, #4
090b4     19 33 02 FB | 	rdlong	local11, local11
090b8     14 32 0E F2 | 	cmp	local11, #20 wz
090bc     54 00 00 FF 
090c0     D0 E4 85 F1 | 	sub	objptr, ##43216
090c4     44 00 90 5D |  if_ne	jmp	#LR__0726
090c8     56 00 00 FF 
090cc     08 E5 05 F1 | 	add	objptr, ##44296
090d0     F2 28 02 FB | 	rdlong	local06, objptr
090d4     01 28 06 F1 | 	add	local06, #1
090d8     F2 28 62 FC | 	wrlong	local06, objptr
090dc     56 00 00 FF 
090e0     08 E5 85 F1 | 	sub	objptr, ##44296
090e4     24 00 90 FD | 	jmp	#LR__0726
090e8                 | LR__0725
090e8     12 13 02 F6 | 	mov	arg01, local04
090ec     28 00 B0 FD | 	call	#_getfun
090f0     56 00 00 FF 
090f4     08 E5 05 F1 | 	add	objptr, ##44296
090f8     F2 28 02 FB | 	rdlong	local06, objptr
090fc     01 28 06 F1 | 	add	local06, #1
09100     F2 28 62 FC | 	wrlong	local06, objptr
09104     56 00 00 FF 
09108     08 E5 85 F1 | 	sub	objptr, ##44296
0910c                 | LR__0726
0910c     A7 F0 03 F6 | 	mov	ptra, fp
09110     B2 00 A0 FD | 	call	#popregs_
09114                 | _getvalue_ret
09114     2D 00 64 FD | 	ret
09118                 | 
09118                 | ' 
09118                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
09118                 | _getfun
09118     0A 4A 05 F6 | 	mov	COUNT_, #10
0911c     A8 00 A0 FD | 	call	#pushregs_
09120                 | _getfun_enter
09120     09 25 02 F6 | 	mov	local04, arg01
09124     56 00 00 FF 
09128     08 E5 05 F1 | 	add	objptr, ##44296
0912c     F2 26 02 FB | 	rdlong	local05, objptr
09130     13 29 02 F6 | 	mov	local06, local05
09134     00 2A 06 F6 | 	mov	local07, #0
09138                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
09138                 | ' oldct=ct
09138                 | ' numpar=0
09138                 | '   
09138                 | ' if lparts(ct+1).token=token_lpar then
09138     01 26 06 F1 | 	add	local05, #1
0913c     03 26 66 F0 | 	shl	local05, #3
09140     02 00 00 FF 
09144     38 E4 85 F1 | 	sub	objptr, ##1080
09148     F2 26 02 F1 | 	add	local05, objptr
0914c     04 26 06 F1 | 	add	local05, #4
09150     13 27 02 FB | 	rdlong	local05, local05
09154     15 26 0E F2 | 	cmp	local05, #21 wz
09158     54 00 00 FF 
0915c     D0 E4 85 F1 | 	sub	objptr, ##43216
09160     08 01 90 5D |  if_ne	jmp	#LR__0734
09164     56 00 00 FF 
09168     08 E5 05 F1 | 	add	objptr, ##44296
0916c     F2 2C 02 FB | 	rdlong	local08, objptr
09170     01 2C 06 F1 | 	add	local08, #1
09174     F2 2C 62 FC | 	wrlong	local08, objptr
09178     56 00 00 FF 
0917c     08 E5 85 F1 | 	sub	objptr, ##44296
09180                 | '   ct+=1 											' omit this lpar, this is for expr list
09180                 | '   do
09180                 | LR__0730
09180     56 00 00 FF 
09184     08 E5 05 F1 | 	add	objptr, ##44296
09188     F2 26 02 FB | 	rdlong	local05, objptr
0918c     01 26 06 F1 | 	add	local05, #1
09190     F2 26 62 FC | 	wrlong	local05, objptr
09194                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09194                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09194     03 26 66 F0 | 	shl	local05, #3
09198     02 00 00 FF 
0919c     38 E4 85 F1 | 	sub	objptr, ##1080
091a0     F2 26 02 F1 | 	add	local05, objptr
091a4     04 26 06 F1 | 	add	local05, #4
091a8     13 2D 02 FB | 	rdlong	local08, local05
091ac     15 2C 0E F2 | 	cmp	local08, #21 wz
091b0     54 00 00 FF 
091b4     D0 E4 85 F1 | 	sub	objptr, ##43216
091b8     40 00 90 5D |  if_ne	jmp	#LR__0731
091bc     56 00 00 FF 
091c0     08 E5 05 F1 | 	add	objptr, ##44296
091c4     F2 2C 02 FB | 	rdlong	local08, objptr
091c8     01 2C 06 F1 | 	add	local08, #1
091cc     F2 2C 62 FC | 	wrlong	local08, objptr
091d0     56 00 00 FF 
091d4     08 E5 85 F1 | 	sub	objptr, ##44296
091d8     AC F2 BF FD | 	call	#_expr
091dc     56 00 00 FF 
091e0     08 E5 05 F1 | 	add	objptr, ##44296
091e4     F2 2C 02 FB | 	rdlong	local08, objptr
091e8     01 2C 06 F1 | 	add	local08, #1
091ec     F2 2C 62 FC | 	wrlong	local08, objptr
091f0     56 00 00 FF 
091f4     08 E5 85 F1 | 	sub	objptr, ##44296
091f8     04 00 90 FD | 	jmp	#LR__0732
091fc                 | LR__0731
091fc     88 F2 BF FD | 	call	#_expr
09200                 | LR__0732
09200     01 2A 06 F1 | 	add	local07, #1
09204     56 00 00 FF 
09208     08 E5 05 F1 | 	add	objptr, ##44296
0920c     F2 26 02 FB | 	rdlong	local05, objptr
09210     03 26 66 F0 | 	shl	local05, #3
09214     02 00 00 FF 
09218     38 E4 85 F1 | 	sub	objptr, ##1080
0921c     F2 26 02 F1 | 	add	local05, objptr
09220     04 26 06 F1 | 	add	local05, #4
09224     13 2D 02 FB | 	rdlong	local08, local05
09228     14 2C 0E F2 | 	cmp	local08, #20 wz
0922c     54 00 00 FF 
09230     D0 E4 85 F1 | 	sub	objptr, ##43216
09234     34 00 90 AD |  if_e	jmp	#LR__0733
09238     56 00 00 FF 
0923c     08 E5 05 F1 | 	add	objptr, ##44296
09240     F2 2C 02 FB | 	rdlong	local08, objptr
09244     03 2C 66 F0 | 	shl	local08, #3
09248     02 00 00 FF 
0924c     38 E4 85 F1 | 	sub	objptr, ##1080
09250     F2 2C 02 F1 | 	add	local08, objptr
09254     04 2C 06 F1 | 	add	local08, #4
09258     16 2D 02 FB | 	rdlong	local08, local08
0925c     FE 2D 0E F2 | 	cmp	local08, #510 wz
09260     54 00 00 FF 
09264     D0 E4 85 F1 | 	sub	objptr, ##43216
09268     14 FF 9F 5D |  if_ne	jmp	#LR__0730
0926c                 | LR__0733
0926c                 | LR__0734
0926c     15 1F 02 F6 | 	mov	local01, local07
09270     03 28 66 F0 | 	shl	local06, #3
09274     54 00 00 FF 
09278     D0 E4 05 F1 | 	add	objptr, ##43216
0927c     F2 28 02 F1 | 	add	local06, objptr
09280     04 28 06 F1 | 	add	local06, #4
09284     14 23 02 FB | 	rdlong	local03, local06
09288     0F 2D 02 F6 | 	mov	local08, local01
0928c     10 2B 02 F6 | 	mov	local07, local02
09290     11 29 02 F6 | 	mov	local06, local03
09294     15 00 00 FF 
09298     70 E4 05 F1 | 	add	objptr, ##10864
0929c     F2 26 02 FB | 	rdlong	local05, objptr
092a0     13 13 02 F6 | 	mov	arg01, local05
092a4     01 12 66 F0 | 	shl	arg01, #1
092a8     13 13 02 F1 | 	add	arg01, local05
092ac     02 12 66 F0 | 	shl	arg01, #2
092b0     03 00 00 FF 
092b4     00 E4 85 F1 | 	sub	objptr, ##1536
092b8     F2 12 02 F1 | 	add	arg01, objptr
092bc     09 2D 62 FC | 	wrlong	local08, arg01
092c0     03 00 00 FF 
092c4     00 E4 05 F1 | 	add	objptr, ##1536
092c8     F2 2C 02 FB | 	rdlong	local08, objptr
092cc     16 2F 02 F6 | 	mov	local09, local08
092d0     01 2E 66 F0 | 	shl	local09, #1
092d4     16 2F 02 F1 | 	add	local09, local08
092d8     02 2E 66 F0 | 	shl	local09, #2
092dc     03 00 00 FF 
092e0     00 E4 85 F1 | 	sub	objptr, ##1536
092e4     F2 2E 02 F1 | 	add	local09, objptr
092e8     04 2E 06 F1 | 	add	local09, #4
092ec     17 2B 62 FC | 	wrlong	local07, local09
092f0     03 00 00 FF 
092f4     00 E4 05 F1 | 	add	objptr, ##1536
092f8     F2 2C 02 FB | 	rdlong	local08, objptr
092fc     16 31 02 F6 | 	mov	local10, local08
09300     01 30 66 F0 | 	shl	local10, #1
09304     16 31 02 F1 | 	add	local10, local08
09308     02 30 66 F0 | 	shl	local10, #2
0930c     03 00 00 FF 
09310     00 E4 85 F1 | 	sub	objptr, ##1536
09314     F2 30 02 F1 | 	add	local10, objptr
09318     08 30 06 F1 | 	add	local10, #8
0931c     18 29 62 FC | 	wrlong	local06, local10
09320     03 00 00 FF 
09324     00 E4 05 F1 | 	add	objptr, ##1536
09328     F2 2C 02 FB | 	rdlong	local08, objptr
0932c     01 2C 06 F1 | 	add	local08, #1
09330     F2 2C 62 FC | 	wrlong	local08, objptr
09334     69 00 00 FF 
09338     40 E5 85 F1 | 	sub	objptr, ##54080
0933c                 | ' 
0933c                 | ' t2.result.uresult=numpar
0933c                 | ' 
0933c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0933c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0933c                 | ' 
0933c                 | '   
0933c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0933c     FF FF 7F FF 
09340     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09344     B8 00 90 5D |  if_ne	jmp	#LR__0735
09348     15 22 06 F6 | 	mov	local03, #21
0934c     0F 2D 02 F6 | 	mov	local08, local01
09350     10 2B 02 F6 | 	mov	local07, local02
09354     11 29 02 F6 | 	mov	local06, local03
09358     69 00 00 FF 
0935c     40 E5 05 F1 | 	add	objptr, ##54080
09360     F2 26 02 FB | 	rdlong	local05, objptr
09364     13 13 02 F6 | 	mov	arg01, local05
09368     01 12 66 F0 | 	shl	arg01, #1
0936c     13 13 02 F1 | 	add	arg01, local05
09370     02 12 66 F0 | 	shl	arg01, #2
09374     03 00 00 FF 
09378     00 E4 85 F1 | 	sub	objptr, ##1536
0937c     F2 12 02 F1 | 	add	arg01, objptr
09380     09 2D 62 FC | 	wrlong	local08, arg01
09384     03 00 00 FF 
09388     00 E4 05 F1 | 	add	objptr, ##1536
0938c     F2 30 02 FB | 	rdlong	local10, objptr
09390     18 2F 02 F6 | 	mov	local09, local10
09394     01 2E 66 F0 | 	shl	local09, #1
09398     18 2F 02 F1 | 	add	local09, local10
0939c     02 2E 66 F0 | 	shl	local09, #2
093a0     03 00 00 FF 
093a4     00 E4 85 F1 | 	sub	objptr, ##1536
093a8     F2 2E 02 F1 | 	add	local09, objptr
093ac     04 2E 06 F1 | 	add	local09, #4
093b0     17 2B 62 FC | 	wrlong	local07, local09
093b4     03 00 00 FF 
093b8     00 E4 05 F1 | 	add	objptr, ##1536
093bc     F2 2E 02 FB | 	rdlong	local09, objptr
093c0     17 31 02 F6 | 	mov	local10, local09
093c4     01 30 66 F0 | 	shl	local10, #1
093c8     17 31 02 F1 | 	add	local10, local09
093cc     02 30 66 F0 | 	shl	local10, #2
093d0     03 00 00 FF 
093d4     00 E4 85 F1 | 	sub	objptr, ##1536
093d8     F2 30 02 F1 | 	add	local10, objptr
093dc     08 30 06 F1 | 	add	local10, #8
093e0     18 29 62 FC | 	wrlong	local06, local10
093e4     03 00 00 FF 
093e8     00 E4 05 F1 | 	add	objptr, ##1536
093ec     F2 2C 02 FB | 	rdlong	local08, objptr
093f0     01 2C 06 F1 | 	add	local08, #1
093f4     F2 2C 62 FC | 	wrlong	local08, objptr
093f8     69 00 00 FF 
093fc     40 E5 85 F1 | 	sub	objptr, ##54080
09400                 | LR__0735
09400     A7 F0 03 F6 | 	mov	ptra, fp
09404     B2 00 A0 FD | 	call	#popregs_
09408                 | _getfun_ret
09408     2D 00 64 FD | 	ret
0940c                 | 
0940c                 | '   
0940c                 | '   
0940c                 | ' sub getvar(m as integer) 
0940c                 | _getvar
0940c     0A 4A 05 F6 | 	mov	COUNT_, #10
09410     A8 00 A0 FD | 	call	#pushregs_
09414                 | _getvar_enter
09414     09 25 02 F6 | 	mov	local04, arg01
09418     56 00 00 FF 
0941c     08 E5 05 F1 | 	add	objptr, ##44296
09420     F2 14 02 FB | 	rdlong	arg02, objptr
09424     03 14 66 F0 | 	shl	arg02, #3
09428     02 00 00 FF 
0942c     38 E4 85 F1 | 	sub	objptr, ##1080
09430     F2 14 02 F1 | 	add	arg02, objptr
09434     0A 27 02 FB | 	rdlong	local05, arg02
09438     13 13 02 F6 | 	mov	arg01, local05
0943c     01 14 06 F6 | 	mov	arg02, #1
09440     54 00 00 FF 
09444     D0 E4 85 F1 | 	sub	objptr, ##43216
09448     84 20 B1 FD | 	call	#__system__Right_S
0944c     FD 28 02 F6 | 	mov	local06, result1
09450     01 2A 66 F6 | 	neg	local07, #1
09454                 | ' 
09454                 | ' varname$=lparts(ct).part$
09454                 | ' suffix$=right$(varname$,1)
09454                 | ' j=-1
09454                 | ' 
09454                 | ' for i=0 to varnum-1
09454     00 2C 06 F6 | 	mov	local08, #0
09458     54 00 00 FF 
0945c     CC E4 05 F1 | 	add	objptr, ##43212
09460     F2 2E 02 FB | 	rdlong	local09, objptr
09464     54 00 00 FF 
09468     CC E4 85 F1 | 	sub	objptr, ##43212
0946c                 | LR__0740
0946c     17 2D 52 F2 | 	cmps	local08, local09 wc
09470     38 00 90 3D |  if_ae	jmp	#LR__0741
09474                 | '   if variables(i).name=varname$ then j=i : exit
09474     16 15 02 F6 | 	mov	arg02, local08
09478     04 14 66 F0 | 	shl	arg02, #4
0947c     34 00 00 FF 
09480     CC E4 05 F1 | 	add	objptr, ##26828
09484     F2 14 02 F1 | 	add	arg02, objptr
09488     0A 13 02 FB | 	rdlong	arg01, arg02
0948c     13 15 02 F6 | 	mov	arg02, local05
09490     34 00 00 FF 
09494     CC E4 85 F1 | 	sub	objptr, ##26828
09498     C4 FF B0 FD | 	call	#__system___string_cmp
0949c     00 FA 0D F2 | 	cmp	result1, #0 wz
094a0     16 2B 02 A6 |  if_e	mov	local07, local08
094a4     01 2C 06 51 |  if_ne	add	local08, #1
094a8     C0 FF 9F 5D |  if_ne	jmp	#LR__0740
094ac                 | LR__0741
094ac                 | ' if  j=-1 andalso varnum<maxvars then   
094ac     FF FF 7F FF 
094b0     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
094b4     A8 00 90 5D |  if_ne	jmp	#LR__0742
094b8     54 00 00 FF 
094bc     CC E4 05 F1 | 	add	objptr, ##43212
094c0     F2 2E 02 FB | 	rdlong	local09, objptr
094c4     54 00 00 FF 
094c8     CC E4 85 F1 | 	sub	objptr, ##43212
094cc     01 00 00 FF 
094d0     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
094d4     88 00 90 3D |  if_ae	jmp	#LR__0742
094d8     54 00 00 FF 
094dc     CC E4 05 F1 | 	add	objptr, ##43212
094e0     F2 2E 02 FB | 	rdlong	local09, objptr
094e4     04 2E 66 F0 | 	shl	local09, #4
094e8     20 00 00 FF 
094ec     00 E4 85 F1 | 	sub	objptr, ##16384
094f0     F2 2E 02 F1 | 	add	local09, objptr
094f4     17 27 62 FC | 	wrlong	local05, local09
094f8     20 00 00 FF 
094fc     00 E4 05 F1 | 	add	objptr, ##16384
09500     F2 2E 02 FB | 	rdlong	local09, objptr
09504     04 2E 66 F0 | 	shl	local09, #4
09508     20 00 00 FF 
0950c     00 E4 85 F1 | 	sub	objptr, ##16384
09510     F2 2E 02 F1 | 	add	local09, objptr
09514     04 2E 06 F1 | 	add	local09, #4
09518     17 01 68 FC | 	wrlong	#0, local09
0951c     20 00 00 FF 
09520     00 E4 05 F1 | 	add	objptr, ##16384
09524     F2 2E 02 FB | 	rdlong	local09, objptr
09528     04 2E 66 F0 | 	shl	local09, #4
0952c     20 00 00 FF 
09530     00 E4 85 F1 | 	sub	objptr, ##16384
09534     F2 2E 02 F1 | 	add	local09, objptr
09538     0C 2E 06 F1 | 	add	local09, #12
0953c     17 39 68 FC | 	wrlong	#28, local09
09540     20 00 00 FF 
09544     00 E4 05 F1 | 	add	objptr, ##16384
09548     F2 2E 02 FB | 	rdlong	local09, objptr
0954c     17 2B 02 F6 | 	mov	local07, local09
09550     01 2E 06 F1 | 	add	local09, #1
09554     F2 2E 62 FC | 	wrlong	local09, objptr
09558     54 00 00 FF 
0955c     CC E4 85 F1 | 	sub	objptr, ##43212
09560                 | LR__0742
09560     00 2E 06 F6 | 	mov	local09, #0
09564                 | ' numpar=0
09564                 | ' ' check if it is an array
09564                 | ' 
09564                 | ' if lparts(ct+1).token=token_lpar then
09564     56 00 00 FF 
09568     08 E5 05 F1 | 	add	objptr, ##44296
0956c     F2 2C 02 FB | 	rdlong	local08, objptr
09570     01 2C 06 F1 | 	add	local08, #1
09574     03 2C 66 F0 | 	shl	local08, #3
09578     02 00 00 FF 
0957c     38 E4 85 F1 | 	sub	objptr, ##1080
09580     F2 2C 02 F1 | 	add	local08, objptr
09584     04 2C 06 F1 | 	add	local08, #4
09588     16 2D 02 FB | 	rdlong	local08, local08
0958c     15 2C 0E F2 | 	cmp	local08, #21 wz
09590     54 00 00 FF 
09594     D0 E4 85 F1 | 	sub	objptr, ##43216
09598     08 01 90 5D |  if_ne	jmp	#LR__0747
0959c     56 00 00 FF 
095a0     08 E5 05 F1 | 	add	objptr, ##44296
095a4     F2 30 02 FB | 	rdlong	local10, objptr
095a8     01 30 06 F1 | 	add	local10, #1
095ac     F2 30 62 FC | 	wrlong	local10, objptr
095b0     56 00 00 FF 
095b4     08 E5 85 F1 | 	sub	objptr, ##44296
095b8                 | '   ct+=1 											' omit this lpar, this is for expr list
095b8                 | '   do
095b8                 | LR__0743
095b8     56 00 00 FF 
095bc     08 E5 05 F1 | 	add	objptr, ##44296
095c0     F2 2C 02 FB | 	rdlong	local08, objptr
095c4     01 2C 06 F1 | 	add	local08, #1
095c8     F2 2C 62 FC | 	wrlong	local08, objptr
095cc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
095cc                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
095cc     03 2C 66 F0 | 	shl	local08, #3
095d0     02 00 00 FF 
095d4     38 E4 85 F1 | 	sub	objptr, ##1080
095d8     F2 2C 02 F1 | 	add	local08, objptr
095dc     04 2C 06 F1 | 	add	local08, #4
095e0     16 31 02 FB | 	rdlong	local10, local08
095e4     15 30 0E F2 | 	cmp	local10, #21 wz
095e8     54 00 00 FF 
095ec     D0 E4 85 F1 | 	sub	objptr, ##43216
095f0     40 00 90 5D |  if_ne	jmp	#LR__0744
095f4     56 00 00 FF 
095f8     08 E5 05 F1 | 	add	objptr, ##44296
095fc     F2 30 02 FB | 	rdlong	local10, objptr
09600     01 30 06 F1 | 	add	local10, #1
09604     F2 30 62 FC | 	wrlong	local10, objptr
09608     56 00 00 FF 
0960c     08 E5 85 F1 | 	sub	objptr, ##44296
09610     74 EE BF FD | 	call	#_expr
09614     56 00 00 FF 
09618     08 E5 05 F1 | 	add	objptr, ##44296
0961c     F2 30 02 FB | 	rdlong	local10, objptr
09620     01 30 06 F1 | 	add	local10, #1
09624     F2 30 62 FC | 	wrlong	local10, objptr
09628     56 00 00 FF 
0962c     08 E5 85 F1 | 	sub	objptr, ##44296
09630     04 00 90 FD | 	jmp	#LR__0745
09634                 | LR__0744
09634     50 EE BF FD | 	call	#_expr
09638                 | LR__0745
09638     01 2E 06 F1 | 	add	local09, #1
0963c     56 00 00 FF 
09640     08 E5 05 F1 | 	add	objptr, ##44296
09644     F2 2C 02 FB | 	rdlong	local08, objptr
09648     03 2C 66 F0 | 	shl	local08, #3
0964c     02 00 00 FF 
09650     38 E4 85 F1 | 	sub	objptr, ##1080
09654     F2 2C 02 F1 | 	add	local08, objptr
09658     04 2C 06 F1 | 	add	local08, #4
0965c     16 31 02 FB | 	rdlong	local10, local08
09660     14 30 0E F2 | 	cmp	local10, #20 wz
09664     54 00 00 FF 
09668     D0 E4 85 F1 | 	sub	objptr, ##43216
0966c     34 00 90 AD |  if_e	jmp	#LR__0746
09670     56 00 00 FF 
09674     08 E5 05 F1 | 	add	objptr, ##44296
09678     F2 30 02 FB | 	rdlong	local10, objptr
0967c     03 30 66 F0 | 	shl	local10, #3
09680     02 00 00 FF 
09684     38 E4 85 F1 | 	sub	objptr, ##1080
09688     F2 30 02 F1 | 	add	local10, objptr
0968c     04 30 06 F1 | 	add	local10, #4
09690     18 31 02 FB | 	rdlong	local10, local10
09694     FE 31 0E F2 | 	cmp	local10, #510 wz
09698     54 00 00 FF 
0969c     D0 E4 85 F1 | 	sub	objptr, ##43216
096a0     14 FF 9F 5D |  if_ne	jmp	#LR__0743
096a4                 | LR__0746
096a4                 | LR__0747
096a4     17 21 02 F6 | 	mov	local02, local09
096a8     11 22 06 F6 | 	mov	local03, #17
096ac     15 1F 02 F6 | 	mov	local01, local07
096b0     0F 31 02 F6 | 	mov	local10, local01
096b4     10 2F 02 F6 | 	mov	local09, local02
096b8     11 2D 02 F6 | 	mov	local08, local03
096bc     69 00 00 FF 
096c0     40 E5 05 F1 | 	add	objptr, ##54080
096c4     F2 2A 02 FB | 	rdlong	local07, objptr
096c8     15 29 02 F6 | 	mov	local06, local07
096cc     01 28 66 F0 | 	shl	local06, #1
096d0     15 29 02 F1 | 	add	local06, local07
096d4     02 28 66 F0 | 	shl	local06, #2
096d8     03 00 00 FF 
096dc     00 E4 85 F1 | 	sub	objptr, ##1536
096e0     F2 28 02 F1 | 	add	local06, objptr
096e4     14 31 62 FC | 	wrlong	local10, local06
096e8     03 00 00 FF 
096ec     00 E4 05 F1 | 	add	objptr, ##1536
096f0     F2 30 02 FB | 	rdlong	local10, objptr
096f4     18 27 02 F6 | 	mov	local05, local10
096f8     01 26 66 F0 | 	shl	local05, #1
096fc     18 27 02 F1 | 	add	local05, local10
09700     02 26 66 F0 | 	shl	local05, #2
09704     03 00 00 FF 
09708     00 E4 85 F1 | 	sub	objptr, ##1536
0970c     F2 26 02 F1 | 	add	local05, objptr
09710     04 26 06 F1 | 	add	local05, #4
09714     13 2F 62 FC | 	wrlong	local09, local05
09718     03 00 00 FF 
0971c     00 E4 05 F1 | 	add	objptr, ##1536
09720     F2 30 02 FB | 	rdlong	local10, objptr
09724     18 FB 01 F6 | 	mov	result1, local10
09728     01 FA 65 F0 | 	shl	result1, #1
0972c     18 FB 01 F1 | 	add	result1, local10
09730     02 FA 65 F0 | 	shl	result1, #2
09734     03 00 00 FF 
09738     00 E4 85 F1 | 	sub	objptr, ##1536
0973c     F2 FA 01 F1 | 	add	result1, objptr
09740     08 FA 05 F1 | 	add	result1, #8
09744     FD 2C 62 FC | 	wrlong	local08, result1
09748     03 00 00 FF 
0974c     00 E4 05 F1 | 	add	objptr, ##1536
09750     F2 30 02 FB | 	rdlong	local10, objptr
09754     01 30 06 F1 | 	add	local10, #1
09758     F2 30 62 FC | 	wrlong	local10, objptr
0975c     69 00 00 FF 
09760     40 E5 85 F1 | 	sub	objptr, ##54080
09764                 | ' 
09764                 | ' t2.result.twowords(1)=numpar
09764                 | ' 
09764                 | ' 
09764                 | ' 
09764                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09764                 | ' 
09764                 | ' 
09764                 | '  
09764                 | ' 
09764                 | ' 701 
09764                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09764                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09764     FF FF 7F FF 
09768     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0976c     B8 00 90 5D |  if_ne	jmp	#LR__0748
09770     15 22 06 F6 | 	mov	local03, #21
09774     0F 31 02 F6 | 	mov	local10, local01
09778     10 2F 02 F6 | 	mov	local09, local02
0977c     11 2D 02 F6 | 	mov	local08, local03
09780     69 00 00 FF 
09784     40 E5 05 F1 | 	add	objptr, ##54080
09788     F2 2A 02 FB | 	rdlong	local07, objptr
0978c     15 29 02 F6 | 	mov	local06, local07
09790     01 28 66 F0 | 	shl	local06, #1
09794     15 29 02 F1 | 	add	local06, local07
09798     02 28 66 F0 | 	shl	local06, #2
0979c     03 00 00 FF 
097a0     00 E4 85 F1 | 	sub	objptr, ##1536
097a4     F2 28 02 F1 | 	add	local06, objptr
097a8     14 31 62 FC | 	wrlong	local10, local06
097ac     03 00 00 FF 
097b0     00 E4 05 F1 | 	add	objptr, ##1536
097b4     F2 1E 02 FB | 	rdlong	local01, objptr
097b8     0F 27 02 F6 | 	mov	local05, local01
097bc     01 26 66 F0 | 	shl	local05, #1
097c0     0F 27 02 F1 | 	add	local05, local01
097c4     02 26 66 F0 | 	shl	local05, #2
097c8     03 00 00 FF 
097cc     00 E4 85 F1 | 	sub	objptr, ##1536
097d0     F2 26 02 F1 | 	add	local05, objptr
097d4     04 26 06 F1 | 	add	local05, #4
097d8     13 2F 62 FC | 	wrlong	local09, local05
097dc     03 00 00 FF 
097e0     00 E4 05 F1 | 	add	objptr, ##1536
097e4     F2 1E 02 FB | 	rdlong	local01, objptr
097e8     0F FB 01 F6 | 	mov	result1, local01
097ec     01 FA 65 F0 | 	shl	result1, #1
097f0     0F FB 01 F1 | 	add	result1, local01
097f4     02 FA 65 F0 | 	shl	result1, #2
097f8     03 00 00 FF 
097fc     00 E4 85 F1 | 	sub	objptr, ##1536
09800     F2 FA 01 F1 | 	add	result1, objptr
09804     08 FA 05 F1 | 	add	result1, #8
09808     FD 2C 62 FC | 	wrlong	local08, result1
0980c     03 00 00 FF 
09810     00 E4 05 F1 | 	add	objptr, ##1536
09814     F2 30 02 FB | 	rdlong	local10, objptr
09818     01 30 06 F1 | 	add	local10, #1
0981c     F2 30 62 FC | 	wrlong	local10, objptr
09820     69 00 00 FF 
09824     40 E5 85 F1 | 	sub	objptr, ##54080
09828                 | LR__0748
09828     A7 F0 03 F6 | 	mov	ptra, fp
0982c     B2 00 A0 FD | 	call	#popregs_
09830                 | _getvar_ret
09830     2D 00 64 FD | 	ret
09834                 | 
09834                 | ' 
09834                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09834                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
09834                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09834                 | ' 
09834                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09834                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
09834                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09834                 | ' 
09834                 | ' function execute_line (astart=0 as integer) as integer
09834                 | _execute_line
09834     04 4A 05 F6 | 	mov	COUNT_, #4
09838     A8 00 A0 FD | 	call	#pushregs_
0983c     79 00 00 FF 
09840     78 E4 05 F1 | 	add	objptr, ##62072
09844     F2 00 68 FC | 	wrlong	#0, objptr
09848                 | ' runptr2=0
09848                 | ' for lineptr_e=astart to lineptr-1
09848     0F 00 00 FF 
0984c     34 E5 85 F1 | 	sub	objptr, ##7988
09850     F2 12 62 FC | 	wrlong	arg01, objptr
09854     04 E4 85 F1 | 	sub	objptr, #4
09858     F2 1E 02 FB | 	rdlong	local01, objptr
0985c     69 00 00 FF 
09860     40 E5 85 F1 | 	sub	objptr, ##54080
09864                 | LR__0750
09864     69 00 00 FF 
09868     44 E5 05 F1 | 	add	objptr, ##54084
0986c     F2 FA 01 FB | 	rdlong	result1, objptr
09870     69 00 00 FF 
09874     44 E5 85 F1 | 	sub	objptr, ##54084
09878     0F FB 51 F2 | 	cmps	result1, local01 wc
0987c     98 00 90 3D |  if_ae	jmp	#LR__0751
09880     69 00 00 FF 
09884     44 E5 05 F1 | 	add	objptr, ##54084
09888     F2 FA 01 FB | 	rdlong	result1, objptr
0988c     FD 20 02 F6 | 	mov	local02, result1
09890     01 20 66 F0 | 	shl	local02, #1
09894     FD 20 02 F1 | 	add	local02, result1
09898     02 20 66 F0 | 	shl	local02, #2
0989c     03 00 00 FF 
098a0     04 E4 85 F1 | 	sub	objptr, ##1540
098a4     F2 20 02 F1 | 	add	local02, objptr
098a8     08 20 06 F1 | 	add	local02, #8
098ac     10 21 02 FB | 	rdlong	local02, local02
098b0     10 21 E2 F8 | 	getbyte	local02, local02, #0
098b4     02 20 66 F0 | 	shl	local02, #2
098b8     04 00 00 FF 
098bc     1C E4 85 F1 | 	sub	objptr, ##2076
098c0     F2 20 02 F1 | 	add	local02, objptr
098c4     10 21 02 FB | 	rdlong	local02, local02
098c8     10 23 02 F6 | 	mov	local03, local02
098cc     13 20 46 F7 | 	zerox	local02, #19
098d0     14 22 46 F0 | 	shr	local03, #20
098d4     02 22 66 F0 | 	shl	local03, #2
098d8     ED 22 02 F1 | 	add	local03, __methods__
098dc     11 23 02 FB | 	rdlong	local03, local03
098e0     62 00 00 FF 
098e4     24 E5 85 F1 | 	sub	objptr, ##50468
098e8     F2 24 02 F6 | 	mov	local04, objptr
098ec     10 E5 01 F6 | 	mov	objptr, local02
098f0     2D 22 62 FD | 	call	local03
098f4     12 E5 01 F6 | 	mov	objptr, local04
098f8     69 00 00 FF 
098fc     44 E5 05 F1 | 	add	objptr, ##54084
09900     F2 24 02 FB | 	rdlong	local04, objptr
09904     01 24 06 F1 | 	add	local04, #1
09908     F2 24 62 FC | 	wrlong	local04, objptr
0990c     69 00 00 FF 
09910     44 E5 85 F1 | 	sub	objptr, ##54084
09914     4C FF 9F FD | 	jmp	#LR__0750
09918                 | LR__0751
09918                 | ' return runptr2
09918     79 00 00 FF 
0991c     78 E4 05 F1 | 	add	objptr, ##62072
09920     F2 FA 01 FB | 	rdlong	result1, objptr
09924     79 00 00 FF 
09928     78 E4 85 F1 | 	sub	objptr, ##62072
0992c     A7 F0 03 F6 | 	mov	ptra, fp
09930     B2 00 A0 FD | 	call	#popregs_
09934                 | _execute_line_ret
09934     2D 00 64 FD | 	ret
09938                 | 
09938                 | ' 
09938                 | ' 
09938                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
09938                 | ' 
09938                 | ' function pop() as expr_result
09938                 | _pop
09938                 | ' 
09938                 | ' if stackpointer=0 then
09938     62 00 00 FF 
0993c     1C E5 05 F1 | 	add	objptr, ##50460
09940     F2 FA 09 FB | 	rdlong	result1, objptr wz
09944     62 00 00 FF 
09948     1C E5 85 F1 | 	sub	objptr, ##50460
0994c     FF 04 06 A6 |  if_e	mov	_var03, #255
09950     18 00 06 A6 |  if_e	mov	_var01, #24
09954     68 00 90 AD |  if_e	jmp	#LR__0760
09958     62 00 00 FF 
0995c     1C E5 05 F1 | 	add	objptr, ##50460
09960     F2 FA 01 FB | 	rdlong	result1, objptr
09964     01 FA 85 F1 | 	sub	result1, #1
09968     F2 FA 61 FC | 	wrlong	result1, objptr
0996c     FD FE 01 F6 | 	mov	result3, result1
09970     01 FE 65 F0 | 	shl	result3, #1
09974     FD FE 01 F1 | 	add	result3, result1
09978     02 FE 65 F0 | 	shl	result3, #2
0997c     0C 00 00 FF 
09980     0C E4 85 F1 | 	sub	objptr, ##6156
09984     F2 FE 01 F1 | 	add	result3, objptr
09988     FF 00 02 FB | 	rdlong	_var01, result3
0998c     04 FE 05 F1 | 	add	result3, #4
09990     FF FE 01 FB | 	rdlong	result3, result3
09994     FD FC 01 F6 | 	mov	result2, result1
09998     01 FC 65 F0 | 	shl	result2, #1
0999c     FD FC 01 F1 | 	add	result2, result1
099a0     02 FC 65 F0 | 	shl	result2, #2
099a4     F2 FC 01 F1 | 	add	result2, objptr
099a8     08 FC 05 F1 | 	add	result2, #8
099ac     FE FA 01 FB | 	rdlong	result1, result2
099b0     FF 02 02 F6 | 	mov	_var02, result3
099b4     FD 04 02 F6 | 	mov	_var03, result1
099b8     56 00 00 FF 
099bc     10 E5 85 F1 | 	sub	objptr, ##44304
099c0                 | LR__0760
099c0                 | ' return t1
099c0     01 FD 01 F6 | 	mov	result2, _var02
099c4     02 FF 01 F6 | 	mov	result3, _var03
099c8     00 FB 01 F6 | 	mov	result1, _var01
099cc                 | _pop_ret
099cc     2D 00 64 FD | 	ret
099d0                 | 
099d0                 | ' 
099d0                 | ' sub push(t1 as expr_result )
099d0                 | _push
099d0                 | ' 
099d0                 | ' 'print "In push: "; t1.result_type
099d0                 | ' 'print "In push: "; t1.result.uresult
099d0                 | ' 
099d0                 | ' if stackpointer<maxstack then 
099d0     62 00 00 FF 
099d4     1C E5 05 F1 | 	add	objptr, ##50460
099d8     F2 00 02 FB | 	rdlong	_var01, objptr
099dc     62 00 00 FF 
099e0     1C E5 85 F1 | 	sub	objptr, ##50460
099e4     01 00 00 FF 
099e8     00 00 56 F2 | 	cmps	_var01, ##512 wc
099ec     BC 00 90 3D |  if_ae	jmp	#LR__0770
099f0     09 01 02 FB | 	rdlong	_var01, arg01
099f4     04 12 06 F1 | 	add	arg01, #4
099f8     09 03 02 FB | 	rdlong	_var02, arg01
099fc     04 12 06 F1 | 	add	arg01, #4
09a00     09 13 02 FB | 	rdlong	arg01, arg01
09a04     62 00 00 FF 
09a08     1C E5 05 F1 | 	add	objptr, ##50460
09a0c     F2 04 02 FB | 	rdlong	_var03, objptr
09a10     02 07 02 F6 | 	mov	_var04, _var03
09a14     01 06 66 F0 | 	shl	_var04, #1
09a18     02 07 02 F1 | 	add	_var04, _var03
09a1c     02 06 66 F0 | 	shl	_var04, #2
09a20     0C 00 00 FF 
09a24     0C E4 85 F1 | 	sub	objptr, ##6156
09a28     F2 06 02 F1 | 	add	_var04, objptr
09a2c     03 01 62 FC | 	wrlong	_var01, _var04
09a30     0C 00 00 FF 
09a34     0C E4 05 F1 | 	add	objptr, ##6156
09a38     F2 06 02 FB | 	rdlong	_var04, objptr
09a3c     03 05 02 F6 | 	mov	_var03, _var04
09a40     01 04 66 F0 | 	shl	_var03, #1
09a44     03 05 02 F1 | 	add	_var03, _var04
09a48     02 04 66 F0 | 	shl	_var03, #2
09a4c     0C 00 00 FF 
09a50     0C E4 85 F1 | 	sub	objptr, ##6156
09a54     F2 04 02 F1 | 	add	_var03, objptr
09a58     04 04 06 F1 | 	add	_var03, #4
09a5c     02 03 62 FC | 	wrlong	_var02, _var03
09a60     0C 00 00 FF 
09a64     0C E4 05 F1 | 	add	objptr, ##6156
09a68     F2 06 02 FB | 	rdlong	_var04, objptr
09a6c     03 05 02 F6 | 	mov	_var03, _var04
09a70     01 04 66 F0 | 	shl	_var03, #1
09a74     03 05 02 F1 | 	add	_var03, _var04
09a78     02 04 66 F0 | 	shl	_var03, #2
09a7c     0C 00 00 FF 
09a80     0C E4 85 F1 | 	sub	objptr, ##6156
09a84     F2 04 02 F1 | 	add	_var03, objptr
09a88     08 04 06 F1 | 	add	_var03, #8
09a8c     02 13 62 FC | 	wrlong	arg01, _var03
09a90     0C 00 00 FF 
09a94     0C E4 05 F1 | 	add	objptr, ##6156
09a98     F2 00 02 FB | 	rdlong	_var01, objptr
09a9c     01 00 06 F1 | 	add	_var01, #1
09aa0     F2 00 62 FC | 	wrlong	_var01, objptr
09aa4     62 00 00 FF 
09aa8     1C E5 85 F1 | 	sub	objptr, ##50460
09aac                 | LR__0770
09aac                 | _push_ret
09aac     2D 00 64 FD | 	ret
09ab0                 | 
09ab0                 | ' 
09ab0                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
09ab0                 | ' 
09ab0                 | ' sub do_push
09ab0                 | _do_push
09ab0                 | ' if stackpointer<maxstack then 
09ab0     62 00 00 FF 
09ab4     1C E5 05 F1 | 	add	objptr, ##50460
09ab8     F2 00 02 FB | 	rdlong	_var01, objptr
09abc     62 00 00 FF 
09ac0     1C E5 85 F1 | 	sub	objptr, ##50460
09ac4     01 00 00 FF 
09ac8     00 00 56 F2 | 	cmps	_var01, ##512 wc
09acc     F8 00 90 3D |  if_ae	jmp	#LR__0780
09ad0     69 00 00 FF 
09ad4     44 E5 05 F1 | 	add	objptr, ##54084
09ad8     F2 02 02 FB | 	rdlong	_var02, objptr
09adc     01 05 02 F6 | 	mov	_var03, _var02
09ae0     01 04 66 F0 | 	shl	_var03, #1
09ae4     01 05 02 F1 | 	add	_var03, _var02
09ae8     02 04 66 F0 | 	shl	_var03, #2
09aec     03 00 00 FF 
09af0     04 E4 85 F1 | 	sub	objptr, ##1540
09af4     F2 04 02 F1 | 	add	_var03, objptr
09af8     02 01 02 FB | 	rdlong	_var01, _var03
09afc     04 04 06 F1 | 	add	_var03, #4
09b00     02 07 02 FB | 	rdlong	_var04, _var03
09b04     01 05 02 F6 | 	mov	_var03, _var02
09b08     01 04 66 F0 | 	shl	_var03, #1
09b0c     01 05 02 F1 | 	add	_var03, _var02
09b10     02 04 66 F0 | 	shl	_var03, #2
09b14     F2 04 02 F1 | 	add	_var03, objptr
09b18     08 04 06 F1 | 	add	_var03, #8
09b1c     02 03 02 FB | 	rdlong	_var02, _var03
09b20     04 00 00 FF 
09b24     24 E4 85 F1 | 	sub	objptr, ##2084
09b28     F2 04 02 FB | 	rdlong	_var03, objptr
09b2c     02 09 02 F6 | 	mov	_var05, _var03
09b30     01 08 66 F0 | 	shl	_var05, #1
09b34     02 09 02 F1 | 	add	_var05, _var03
09b38     02 08 66 F0 | 	shl	_var05, #2
09b3c     0C 00 00 FF 
09b40     0C E4 85 F1 | 	sub	objptr, ##6156
09b44     F2 08 02 F1 | 	add	_var05, objptr
09b48     04 01 62 FC | 	wrlong	_var01, _var05
09b4c     0C 00 00 FF 
09b50     0C E4 05 F1 | 	add	objptr, ##6156
09b54     F2 08 02 FB | 	rdlong	_var05, objptr
09b58     04 05 02 F6 | 	mov	_var03, _var05
09b5c     01 04 66 F0 | 	shl	_var03, #1
09b60     04 05 02 F1 | 	add	_var03, _var05
09b64     02 04 66 F0 | 	shl	_var03, #2
09b68     0C 00 00 FF 
09b6c     0C E4 85 F1 | 	sub	objptr, ##6156
09b70     F2 04 02 F1 | 	add	_var03, objptr
09b74     04 04 06 F1 | 	add	_var03, #4
09b78     02 07 62 FC | 	wrlong	_var04, _var03
09b7c     0C 00 00 FF 
09b80     0C E4 05 F1 | 	add	objptr, ##6156
09b84     F2 08 02 FB | 	rdlong	_var05, objptr
09b88     04 07 02 F6 | 	mov	_var04, _var05
09b8c     01 06 66 F0 | 	shl	_var04, #1
09b90     04 07 02 F1 | 	add	_var04, _var05
09b94     02 06 66 F0 | 	shl	_var04, #2
09b98     0C 00 00 FF 
09b9c     0C E4 85 F1 | 	sub	objptr, ##6156
09ba0     F2 06 02 F1 | 	add	_var04, objptr
09ba4     08 06 06 F1 | 	add	_var04, #8
09ba8     03 03 62 FC | 	wrlong	_var02, _var04
09bac     0C 00 00 FF 
09bb0     0C E4 05 F1 | 	add	objptr, ##6156
09bb4     F2 00 02 FB | 	rdlong	_var01, objptr
09bb8     01 00 06 F1 | 	add	_var01, #1
09bbc     F2 00 62 FC | 	wrlong	_var01, objptr
09bc0     62 00 00 FF 
09bc4     1C E5 85 F1 | 	sub	objptr, ##50460
09bc8                 | LR__0780
09bc8                 | _do_push_ret
09bc8     2D 00 64 FD | 	ret
09bcc                 | 
09bcc                 | ' 
09bcc                 | '   
09bcc                 | ' sub csave_block(address as ulong)
09bcc                 | _csave_block
09bcc     09 01 02 F6 | 	mov	_var01, arg01
09bd0                 | ' 
09bd0                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09bd0                 | ' ' we enter it at the state of playing 1 kHz header tone
09bd0                 | ' 
09bd0                 | ' for i=0 to 63 step 2
09bd0     00 02 06 F6 | 	mov	_var02, #0
09bd4                 | LR__0790
09bd4                 | '   do: loop until lpeek(base+32*7)>32768
09bd4     56 00 00 FF 
09bd8     D4 E4 05 F1 | 	add	objptr, ##44244
09bdc     97 0C 48 FB | 	callpa	#(@LR__0792-@LR__0791)>>2,fcache_load_ptr_
09be0                 | LR__0791
09be0     F2 12 02 FB | 	rdlong	arg01, objptr
09be4     E0 12 06 F1 | 	add	arg01, #224
09be8     09 FB 01 FB | 	rdlong	result1, arg01
09bec     40 00 00 FF 
09bf0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09bf4     E8 FF 9F CD |  if_b	jmp	#LR__0791
09bf8                 | LR__0792
09bf8     00 13 02 F6 | 	mov	arg01, _var01
09bfc     01 05 02 F6 | 	mov	_var03, _var02
09c00     02 04 66 F0 | 	shl	_var03, #2
09c04     02 13 02 F1 | 	add	arg01, _var03
09c08     09 07 02 FB | 	rdlong	_var04, arg01
09c0c     24 00 00 FF 
09c10     C4 E4 05 F1 | 	add	objptr, ##18628
09c14     F2 06 62 FC | 	wrlong	_var04, objptr
09c18     7A 00 00 FF 
09c1c     98 E5 85 F1 | 	sub	objptr, ##62872
09c20                 | '   q=lpeek(address+4*i)
09c20                 | '      for bit=0 to 31
09c20     00 08 06 F6 | 	mov	_var05, #0
09c24     97 84 48 FB | 	callpa	#(@LR__0797-@LR__0793)>>2,fcache_load_ptr_
09c28                 | LR__0793
09c28                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09c28     7A 00 00 FF 
09c2c     98 E5 05 F1 | 	add	objptr, ##62872
09c30     F2 06 02 FB | 	rdlong	_var04, objptr
09c34     7A 00 00 FF 
09c38     98 E5 85 F1 | 	sub	objptr, ##62872
09c3c     04 05 C2 F9 | 	decod	_var03, _var05
09c40     02 07 CA F7 | 	test	_var04, _var03 wz
09c44     60 00 90 AD |  if_e	jmp	#LR__0794
09c48     04 05 02 F6 | 	mov	_var03, _var05
09c4c     02 04 66 F0 | 	shl	_var03, #2
09c50     76 00 00 FF 
09c54     70 E5 05 F1 | 	add	objptr, ##60784
09c58     F2 04 02 F1 | 	add	_var03, objptr
09c5c     02 FF 48 FC | 	wrbyte	#127, _var03
09c60     04 05 02 F6 | 	mov	_var03, _var05
09c64     02 04 66 F0 | 	shl	_var03, #2
09c68     01 04 06 F1 | 	add	_var03, #1
09c6c     F2 04 02 F1 | 	add	_var03, objptr
09c70     02 01 49 FC | 	wrbyte	#128, _var03
09c74     04 05 02 F6 | 	mov	_var03, _var05
09c78     02 04 66 F0 | 	shl	_var03, #2
09c7c     02 04 06 F1 | 	add	_var03, #2
09c80     F2 04 02 F1 | 	add	_var03, objptr
09c84     02 FF 48 FC | 	wrbyte	#127, _var03
09c88     04 05 02 F6 | 	mov	_var03, _var05
09c8c     02 04 66 F0 | 	shl	_var03, #2
09c90     03 04 06 F1 | 	add	_var03, #3
09c94     F2 04 02 F1 | 	add	_var03, objptr
09c98     02 01 49 FC | 	wrbyte	#128, _var03
09c9c     76 00 00 FF 
09ca0     70 E5 85 F1 | 	sub	objptr, ##60784
09ca4     5C 00 90 FD | 	jmp	#LR__0795
09ca8                 | LR__0794
09ca8     04 05 02 F6 | 	mov	_var03, _var05
09cac     02 04 66 F0 | 	shl	_var03, #2
09cb0     76 00 00 FF 
09cb4     70 E5 05 F1 | 	add	objptr, ##60784
09cb8     F2 04 02 F1 | 	add	_var03, objptr
09cbc     02 01 49 FC | 	wrbyte	#128, _var03
09cc0     04 05 02 F6 | 	mov	_var03, _var05
09cc4     02 04 66 F0 | 	shl	_var03, #2
09cc8     01 04 06 F1 | 	add	_var03, #1
09ccc     F2 04 02 F1 | 	add	_var03, objptr
09cd0     02 01 49 FC | 	wrbyte	#128, _var03
09cd4     04 05 02 F6 | 	mov	_var03, _var05
09cd8     02 04 66 F0 | 	shl	_var03, #2
09cdc     02 04 06 F1 | 	add	_var03, #2
09ce0     F2 04 02 F1 | 	add	_var03, objptr
09ce4     02 FF 48 FC | 	wrbyte	#127, _var03
09ce8     04 05 02 F6 | 	mov	_var03, _var05
09cec     02 04 66 F0 | 	shl	_var03, #2
09cf0     03 04 06 F1 | 	add	_var03, #3
09cf4     F2 04 02 F1 | 	add	_var03, objptr
09cf8     02 FF 48 FC | 	wrbyte	#127, _var03
09cfc     76 00 00 FF 
09d00     70 E5 85 F1 | 	sub	objptr, ##60784
09d04                 | LR__0795
09d04     01 08 06 F1 | 	add	_var05, #1
09d08     20 08 56 F2 | 	cmps	_var05, #32 wc
09d0c     18 FF 9F CD |  if_b	jmp	#LR__0793
09d10                 | '   do: loop until lpeek(base+32*7)<32768
09d10     56 00 00 FF 
09d14     D4 E4 05 F1 | 	add	objptr, ##44244
09d18                 | LR__0796
09d18     F2 12 02 FB | 	rdlong	arg01, objptr
09d1c     E0 12 06 F1 | 	add	arg01, #224
09d20     09 FB 01 FB | 	rdlong	result1, arg01
09d24     40 00 00 FF 
09d28     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09d2c     E8 FF 9F 3D |  if_ae	jmp	#LR__0796
09d30                 | LR__0797
09d30     00 13 02 F6 | 	mov	arg01, _var01
09d34     04 12 06 F1 | 	add	arg01, #4
09d38     01 05 02 F6 | 	mov	_var03, _var02
09d3c     02 04 66 F0 | 	shl	_var03, #2
09d40     02 13 02 F1 | 	add	arg01, _var03
09d44     09 07 02 FB | 	rdlong	_var04, arg01
09d48     24 00 00 FF 
09d4c     C4 E4 05 F1 | 	add	objptr, ##18628
09d50     F2 06 62 FC | 	wrlong	_var04, objptr
09d54     7A 00 00 FF 
09d58     98 E5 85 F1 | 	sub	objptr, ##62872
09d5c                 | '   q=lpeek(address+4+4*i)
09d5c                 | '      for bit=0 to 31
09d5c     00 08 06 F6 | 	mov	_var05, #0
09d60     97 94 48 FB | 	callpa	#(@LR__0801-@LR__0798)>>2,fcache_load_ptr_
09d64                 | LR__0798
09d64                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09d64     7A 00 00 FF 
09d68     98 E5 05 F1 | 	add	objptr, ##62872
09d6c     F2 06 02 FB | 	rdlong	_var04, objptr
09d70     7A 00 00 FF 
09d74     98 E5 85 F1 | 	sub	objptr, ##62872
09d78     04 05 C2 F9 | 	decod	_var03, _var05
09d7c     02 07 CA F7 | 	test	_var04, _var03 wz
09d80     80 00 90 AD |  if_e	jmp	#LR__0799
09d84     04 0B 02 F6 | 	mov	_var06, _var05
09d88     02 0A 66 F0 | 	shl	_var06, #2
09d8c     80 04 06 F6 | 	mov	_var03, #128
09d90     05 05 02 F1 | 	add	_var03, _var06
09d94     76 00 00 FF 
09d98     70 E5 05 F1 | 	add	objptr, ##60784
09d9c     F2 04 02 F1 | 	add	_var03, objptr
09da0     02 FF 48 FC | 	wrbyte	#127, _var03
09da4     04 0B 02 F6 | 	mov	_var06, _var05
09da8     02 0A 66 F0 | 	shl	_var06, #2
09dac     80 04 06 F6 | 	mov	_var03, #128
09db0     05 05 02 F1 | 	add	_var03, _var06
09db4     01 04 06 F1 | 	add	_var03, #1
09db8     F2 04 02 F1 | 	add	_var03, objptr
09dbc     02 01 49 FC | 	wrbyte	#128, _var03
09dc0     04 0B 02 F6 | 	mov	_var06, _var05
09dc4     02 0A 66 F0 | 	shl	_var06, #2
09dc8     80 04 06 F6 | 	mov	_var03, #128
09dcc     05 05 02 F1 | 	add	_var03, _var06
09dd0     02 04 06 F1 | 	add	_var03, #2
09dd4     F2 04 02 F1 | 	add	_var03, objptr
09dd8     02 FF 48 FC | 	wrbyte	#127, _var03
09ddc     04 0B 02 F6 | 	mov	_var06, _var05
09de0     02 0A 66 F0 | 	shl	_var06, #2
09de4     80 04 06 F6 | 	mov	_var03, #128
09de8     05 05 02 F1 | 	add	_var03, _var06
09dec     03 04 06 F1 | 	add	_var03, #3
09df0     F2 04 02 F1 | 	add	_var03, objptr
09df4     02 01 49 FC | 	wrbyte	#128, _var03
09df8     76 00 00 FF 
09dfc     70 E5 85 F1 | 	sub	objptr, ##60784
09e00     7C 00 90 FD | 	jmp	#LR__0800
09e04                 | LR__0799
09e04     04 0B 02 F6 | 	mov	_var06, _var05
09e08     02 0A 66 F0 | 	shl	_var06, #2
09e0c     80 04 06 F6 | 	mov	_var03, #128
09e10     05 05 02 F1 | 	add	_var03, _var06
09e14     76 00 00 FF 
09e18     70 E5 05 F1 | 	add	objptr, ##60784
09e1c     F2 04 02 F1 | 	add	_var03, objptr
09e20     02 01 49 FC | 	wrbyte	#128, _var03
09e24     04 0B 02 F6 | 	mov	_var06, _var05
09e28     02 0A 66 F0 | 	shl	_var06, #2
09e2c     80 04 06 F6 | 	mov	_var03, #128
09e30     05 05 02 F1 | 	add	_var03, _var06
09e34     01 04 06 F1 | 	add	_var03, #1
09e38     F2 04 02 F1 | 	add	_var03, objptr
09e3c     02 01 49 FC | 	wrbyte	#128, _var03
09e40     04 0B 02 F6 | 	mov	_var06, _var05
09e44     02 0A 66 F0 | 	shl	_var06, #2
09e48     80 04 06 F6 | 	mov	_var03, #128
09e4c     05 05 02 F1 | 	add	_var03, _var06
09e50     02 04 06 F1 | 	add	_var03, #2
09e54     F2 04 02 F1 | 	add	_var03, objptr
09e58     02 FF 48 FC | 	wrbyte	#127, _var03
09e5c     04 0B 02 F6 | 	mov	_var06, _var05
09e60     02 0A 66 F0 | 	shl	_var06, #2
09e64     80 04 06 F6 | 	mov	_var03, #128
09e68     05 05 02 F1 | 	add	_var03, _var06
09e6c     03 04 06 F1 | 	add	_var03, #3
09e70     F2 04 02 F1 | 	add	_var03, objptr
09e74     02 FF 48 FC | 	wrbyte	#127, _var03
09e78     76 00 00 FF 
09e7c     70 E5 85 F1 | 	sub	objptr, ##60784
09e80                 | LR__0800
09e80     01 08 06 F1 | 	add	_var05, #1
09e84     20 08 56 F2 | 	cmps	_var05, #32 wc
09e88     D8 FE 9F CD |  if_b	jmp	#LR__0798
09e8c                 | LR__0801
09e8c     02 02 06 F1 | 	add	_var02, #2
09e90     40 02 56 F2 | 	cmps	_var02, #64 wc
09e94     3C FD 9F CD |  if_b	jmp	#LR__0790
09e98                 | ' do: loop until lpeek(base+32*7)>32768
09e98     56 00 00 FF 
09e9c     D4 E4 05 F1 | 	add	objptr, ##44244
09ea0     97 84 48 FB | 	callpa	#(@LR__0810-@LR__0802)>>2,fcache_load_ptr_
09ea4                 | LR__0802
09ea4     F2 12 02 FB | 	rdlong	arg01, objptr
09ea8     E0 12 06 F1 | 	add	arg01, #224
09eac     09 FB 01 FB | 	rdlong	result1, arg01
09eb0     40 00 00 FF 
09eb4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09eb8     E8 FF 9F CD |  if_b	jmp	#LR__0802
09ebc     56 00 00 FF 
09ec0     D4 E4 85 F1 | 	sub	objptr, ##44244
09ec4                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09ec4     00 02 06 F6 | 	mov	_var02, #0
09ec8                 | LR__0803
09ec8     01 07 52 F6 | 	abs	_var04, _var02 wc
09ecc     07 06 06 F5 | 	and	_var04, #7
09ed0     03 07 82 F6 | 	negc	_var04, _var04
09ed4     04 06 56 F2 | 	cmps	_var04, #4 wc
09ed8     20 00 90 3D |  if_ae	jmp	#LR__0804
09edc     01 0B 02 F6 | 	mov	_var06, _var02
09ee0     76 00 00 FF 
09ee4     70 E5 05 F1 | 	add	objptr, ##60784
09ee8     F2 0A 02 F1 | 	add	_var06, objptr
09eec     05 FF 48 FC | 	wrbyte	#127, _var06
09ef0     76 00 00 FF 
09ef4     70 E5 85 F1 | 	sub	objptr, ##60784
09ef8     1C 00 90 FD | 	jmp	#LR__0805
09efc                 | LR__0804
09efc     01 0B 02 F6 | 	mov	_var06, _var02
09f00     76 00 00 FF 
09f04     70 E5 05 F1 | 	add	objptr, ##60784
09f08     F2 0A 02 F1 | 	add	_var06, objptr
09f0c     05 01 49 FC | 	wrbyte	#128, _var06
09f10     76 00 00 FF 
09f14     70 E5 85 F1 | 	sub	objptr, ##60784
09f18                 | LR__0805
09f18     01 02 06 F1 | 	add	_var02, #1
09f1c     80 02 56 F2 | 	cmps	_var02, #128 wc
09f20     A4 FF 9F CD |  if_b	jmp	#LR__0803
09f24                 | ' 
09f24                 | ' do: loop until lpeek(base+32*7)<32768
09f24     56 00 00 FF 
09f28     D4 E4 05 F1 | 	add	objptr, ##44244
09f2c                 | LR__0806
09f2c     F2 12 02 FB | 	rdlong	arg01, objptr
09f30     E0 12 06 F1 | 	add	arg01, #224
09f34     09 FB 01 FB | 	rdlong	result1, arg01
09f38     40 00 00 FF 
09f3c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09f40     E8 FF 9F 3D |  if_ae	jmp	#LR__0806
09f44     56 00 00 FF 
09f48     D4 E4 85 F1 | 	sub	objptr, ##44244
09f4c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09f4c     80 02 06 F6 | 	mov	_var02, #128
09f50                 | LR__0807
09f50     01 07 52 F6 | 	abs	_var04, _var02 wc
09f54     07 06 06 F5 | 	and	_var04, #7
09f58     03 07 82 F6 | 	negc	_var04, _var04
09f5c     04 06 56 F2 | 	cmps	_var04, #4 wc
09f60     20 00 90 3D |  if_ae	jmp	#LR__0808
09f64     01 0B 02 F6 | 	mov	_var06, _var02
09f68     76 00 00 FF 
09f6c     70 E5 05 F1 | 	add	objptr, ##60784
09f70     F2 0A 02 F1 | 	add	_var06, objptr
09f74     05 FF 48 FC | 	wrbyte	#127, _var06
09f78     76 00 00 FF 
09f7c     70 E5 85 F1 | 	sub	objptr, ##60784
09f80     1C 00 90 FD | 	jmp	#LR__0809
09f84                 | LR__0808
09f84     01 0B 02 F6 | 	mov	_var06, _var02
09f88     76 00 00 FF 
09f8c     70 E5 05 F1 | 	add	objptr, ##60784
09f90     F2 0A 02 F1 | 	add	_var06, objptr
09f94     05 01 49 FC | 	wrbyte	#128, _var06
09f98     76 00 00 FF 
09f9c     70 E5 85 F1 | 	sub	objptr, ##60784
09fa0                 | LR__0809
09fa0     01 02 06 F1 | 	add	_var02, #1
09fa4     00 03 16 F2 | 	cmp	_var02, #256 wc
09fa8     A4 FF 9F CD |  if_b	jmp	#LR__0807
09fac                 | LR__0810
09fac                 | _csave_block_ret
09fac     2D 00 64 FD | 	ret
09fb0                 | 
09fb0                 | ' 
09fb0                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09fb0                 | _csave_addtoblock
09fb0     04 4A 05 F6 | 	mov	COUNT_, #4
09fb4     A8 00 A0 FD | 	call	#pushregs_
09fb8     09 1F 02 F6 | 	mov	local01, arg01
09fbc                 | ' 
09fbc                 | ' 
09fbc                 | ' if force=0 then
09fbc     07 14 4E F7 | 	zerox	arg02, #7 wz
09fc0     78 00 90 5D |  if_ne	jmp	#LR__0820
09fc4     79 00 00 FF 
09fc8     70 E4 05 F1 | 	add	objptr, ##62064
09fcc     F2 14 02 FB | 	rdlong	arg02, objptr
09fd0     02 00 00 FF 
09fd4     00 E4 85 F1 | 	sub	objptr, ##1024
09fd8     F2 14 02 F1 | 	add	arg02, objptr
09fdc     0A 1F 42 FC | 	wrbyte	local01, arg02
09fe0     02 00 00 FF 
09fe4     00 E4 05 F1 | 	add	objptr, ##1024
09fe8     F2 1E 02 FB | 	rdlong	local01, objptr
09fec     01 1E 06 F1 | 	add	local01, #1
09ff0     F2 1E 62 FC | 	wrlong	local01, objptr
09ff4                 | '   block(blockptr)=d
09ff4                 | '   blockptr+=1
09ff4                 | '   if blockptr>=255 then
09ff4     79 00 00 FF 
09ff8     70 E4 85 F1 | 	sub	objptr, ##62064
09ffc     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a000     E4 00 90 CD |  if_b	jmp	#LR__0824
0a004     77 00 00 FF 
0a008     70 E4 05 F1 | 	add	objptr, ##61040
0a00c     F2 12 02 F6 | 	mov	arg01, objptr
0a010     77 00 00 FF 
0a014     70 E4 85 F1 | 	sub	objptr, ##61040
0a018     B0 FB BF FD | 	call	#_csave_block
0a01c     79 00 00 FF 
0a020     70 E4 05 F1 | 	add	objptr, ##62064
0a024     F2 00 68 FC | 	wrlong	#0, objptr
0a028     79 00 00 FF 
0a02c     70 E4 85 F1 | 	sub	objptr, ##62064
0a030     2C 13 06 F6 | 	mov	arg01, #300
0a034     F4 F6 B0 FD | 	call	#__system___waitms
0a038     AC 00 90 FD | 	jmp	#LR__0824
0a03c                 | LR__0820
0a03c     79 00 00 FF 
0a040     70 E4 05 F1 | 	add	objptr, ##62064
0a044     F2 20 02 FB | 	rdlong	local02, objptr
0a048     02 00 00 FF 
0a04c     00 E4 85 F1 | 	sub	objptr, ##1024
0a050     F2 20 02 F1 | 	add	local02, objptr
0a054     10 1F 42 FC | 	wrbyte	local01, local02
0a058                 | '   block(blockptr)=d
0a058                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a058     02 00 00 FF 
0a05c     00 E4 05 F1 | 	add	objptr, ##1024
0a060     F2 22 02 FB | 	rdlong	local03, objptr
0a064     79 00 00 FF 
0a068     70 E4 85 F1 | 	sub	objptr, ##62064
0a06c     FF 22 16 F2 | 	cmp	local03, #255 wc
0a070     40 00 90 3D |  if_ae	jmp	#LR__0823
0a074     79 00 00 FF 
0a078     70 E4 05 F1 | 	add	objptr, ##62064
0a07c     F2 24 02 FB | 	rdlong	local04, objptr
0a080     79 00 00 FF 
0a084     70 E4 85 F1 | 	sub	objptr, ##62064
0a088                 | LR__0821
0a088     00 25 56 F2 | 	cmps	local04, #256 wc
0a08c     24 00 90 3D |  if_ae	jmp	#LR__0822
0a090     12 21 02 F6 | 	mov	local02, local04
0a094     77 00 00 FF 
0a098     70 E4 05 F1 | 	add	objptr, ##61040
0a09c     F2 20 02 F1 | 	add	local02, objptr
0a0a0     10 01 48 FC | 	wrbyte	#0, local02
0a0a4     01 24 06 F1 | 	add	local04, #1
0a0a8     77 00 00 FF 
0a0ac     70 E4 85 F1 | 	sub	objptr, ##61040
0a0b0     D4 FF 9F FD | 	jmp	#LR__0821
0a0b4                 | LR__0822
0a0b4                 | LR__0823
0a0b4     77 00 00 FF 
0a0b8     70 E4 05 F1 | 	add	objptr, ##61040
0a0bc     F2 12 02 F6 | 	mov	arg01, objptr
0a0c0     77 00 00 FF 
0a0c4     70 E4 85 F1 | 	sub	objptr, ##61040
0a0c8     00 FB BF FD | 	call	#_csave_block
0a0cc     79 00 00 FF 
0a0d0     70 E4 05 F1 | 	add	objptr, ##62064
0a0d4     F2 00 68 FC | 	wrlong	#0, objptr
0a0d8     79 00 00 FF 
0a0dc     70 E4 85 F1 | 	sub	objptr, ##62064
0a0e0     2C 13 06 F6 | 	mov	arg01, #300
0a0e4     44 F6 B0 FD | 	call	#__system___waitms
0a0e8                 | LR__0824
0a0e8     A7 F0 03 F6 | 	mov	ptra, fp
0a0ec     B2 00 A0 FD | 	call	#popregs_
0a0f0                 | _csave_addtoblock_ret
0a0f0     2D 00 64 FD | 	ret
0a0f4                 | 
0a0f4                 | ' 
0a0f4                 | ' sub test_csave
0a0f4                 | _test_csave
0a0f4     04 4A 05 F6 | 	mov	COUNT_, #4
0a0f8     A8 00 A0 FD | 	call	#pushregs_
0a0fc     C0 F0 07 F1 | 	add	ptra, #192
0a100                 | ' 'dim fileheader,savestart, saveptr as ulong
0a100                 | ' 
0a100                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a100     69 00 00 FF 
0a104     48 E5 05 F1 | 	add	objptr, ##54088
0a108     F2 12 02 FB | 	rdlong	arg01, objptr
0a10c     69 00 00 FF 
0a110     48 E5 85 F1 | 	sub	objptr, ##54088
0a114     20 BF B0 FD | 	call	#_pslpeek
0a118     FF FF 7F FF 
0a11c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a120     0C 00 90 5D |  if_ne	jmp	#LR__0830
0a124     1B 12 06 F6 | 	mov	arg01, #27
0a128     50 BD B0 FD | 	call	#_printerror
0a12c     0C 03 90 FD | 	jmp	#LR__0842
0a130                 | LR__0830
0a130     04 F8 BF FD | 	call	#_pop
0a134     FF 1E 02 F6 | 	mov	local01, result3
0a138     90 4E 05 F1 | 	add	fp, #144
0a13c     A7 FA 61 FC | 	wrlong	result1, fp
0a140     04 4E 05 F1 | 	add	fp, #4
0a144     A7 FC 61 FC | 	wrlong	result2, fp
0a148     04 4E 05 F1 | 	add	fp, #4
0a14c     A7 1E 62 FC | 	wrlong	local01, fp
0a150                 | ' t1=pop()
0a150                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a150     98 4E 85 F1 | 	sub	fp, #152
0a154     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a158     47 01 00 5F 
0a15c     3F 1E 06 56 |  if_ne	mov	local01, ##@LR__4589
0a160     8C 4E 05 51 |  if_ne	add	fp, #140
0a164     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a168     8C 4E 85 51 |  if_ne	sub	fp, #140
0a16c     90 4E 05 A1 |  if_e	add	fp, #144
0a170     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a174     04 4E 85 A1 |  if_e	sub	fp, #4
0a178     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a17c     8C 4E 85 A1 |  if_e	sub	fp, #140
0a180                 | ' 
0a180                 | ' ' prepare 1 kHz header wave
0a180                 | ' 
0a180                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a180     A7 00 68 FC | 	wrlong	#0, fp
0a184     97 34 48 FB | 	callpa	#(@LR__0834-@LR__0831)>>2,fcache_load_ptr_
0a188                 | LR__0831
0a188     A7 1E 02 FB | 	rdlong	local01, fp
0a18c     0F 1F 52 F6 | 	abs	local01, local01 wc
0a190     07 1E 06 F5 | 	and	local01, #7
0a194     0F 1F 82 F6 | 	negc	local01, local01
0a198     04 1E 56 F2 | 	cmps	local01, #4 wc
0a19c     20 00 90 3D |  if_ae	jmp	#LR__0832
0a1a0     A7 1E 02 FB | 	rdlong	local01, fp
0a1a4     76 00 00 FF 
0a1a8     70 E5 05 F1 | 	add	objptr, ##60784
0a1ac     F2 1E 02 F1 | 	add	local01, objptr
0a1b0     0F FF 48 FC | 	wrbyte	#127, local01
0a1b4     76 00 00 FF 
0a1b8     70 E5 85 F1 | 	sub	objptr, ##60784
0a1bc     1C 00 90 FD | 	jmp	#LR__0833
0a1c0                 | LR__0832
0a1c0     A7 1E 02 FB | 	rdlong	local01, fp
0a1c4     76 00 00 FF 
0a1c8     70 E5 05 F1 | 	add	objptr, ##60784
0a1cc     F2 1E 02 F1 | 	add	local01, objptr
0a1d0     0F 01 49 FC | 	wrbyte	#128, local01
0a1d4     76 00 00 FF 
0a1d8     70 E5 85 F1 | 	sub	objptr, ##60784
0a1dc                 | LR__0833
0a1dc     A7 1E 02 FB | 	rdlong	local01, fp
0a1e0     01 1E 06 F1 | 	add	local01, #1
0a1e4     A7 1E 62 FC | 	wrlong	local01, fp
0a1e8     00 1F 56 F2 | 	cmps	local01, #256 wc
0a1ec     98 FF 9F CD |  if_b	jmp	#LR__0831
0a1f0                 | LR__0834
0a1f0     76 00 00 FF 
0a1f4     70 E5 05 F1 | 	add	objptr, ##60784
0a1f8     F2 14 02 F6 | 	mov	arg02, objptr
0a1fc     07 12 06 F6 | 	mov	arg01, #7
0a200     0F 00 00 FF 
0a204     40 17 06 F6 | 	mov	arg03, ##8000
0a208     0E 18 C6 F9 | 	decod	arg04, #14
0a20c     00 1B 06 F6 | 	mov	arg05, #256
0a210     00 1C 06 F6 | 	mov	arg06, #0
0a214     6B 00 00 FF 
0a218     B0 E4 85 F1 | 	sub	objptr, ##54960
0a21c     64 EE B0 FD | 	call	#_Audio095_8_sc_spin2_play8
0a220     0B 00 00 FF 
0a224     C0 E4 85 F1 | 	sub	objptr, ##5824
0a228     05 00 00 FF 
0a22c     B8 13 06 F6 | 	mov	arg01, ##3000
0a230     F8 F4 B0 FD | 	call	#__system___waitms
0a234     79 00 00 FF 
0a238     70 E4 05 F1 | 	add	objptr, ##62064
0a23c     F2 00 68 FC | 	wrlong	#0, objptr
0a240     79 00 00 FF 
0a244     70 E4 85 F1 | 	sub	objptr, ##62064
0a248     72 12 06 F6 | 	mov	arg01, #114
0a24c     00 14 06 F6 | 	mov	arg02, #0
0a250     5C FD BF FD | 	call	#_csave_addtoblock
0a254     62 12 06 F6 | 	mov	arg01, #98
0a258     00 14 06 F6 | 	mov	arg02, #0
0a25c     50 FD BF FD | 	call	#_csave_addtoblock
0a260     61 12 06 F6 | 	mov	arg01, #97
0a264     00 14 06 F6 | 	mov	arg02, #0
0a268     44 FD BF FD | 	call	#_csave_addtoblock
0a26c     0D 12 06 F6 | 	mov	arg01, #13
0a270     00 14 06 F6 | 	mov	arg02, #0
0a274     38 FD BF FD | 	call	#_csave_addtoblock
0a278                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a278                 | ' waitms 3000 
0a278                 | ' 
0a278                 | ' blockptr=0
0a278                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a278                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a278     A7 02 68 FC | 	wrlong	#1, fp
0a27c     8C 4E 05 F1 | 	add	fp, #140
0a280     A7 12 02 FB | 	rdlong	arg01, fp
0a284     8C 4E 85 F1 | 	sub	fp, #140
0a288     09 21 02 F6 | 	mov	local02, arg01
0a28c     97 06 48 FB | 	callpa	#(@LR__0836-@LR__0835)>>2,fcache_load_ptr_
0a290                 | LR__0835
0a290     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a294     01 20 06 51 |  if_ne	add	local02, #1
0a298     F4 FF 9F 5D |  if_ne	jmp	#LR__0835
0a29c                 | LR__0836
0a29c     09 21 82 F1 | 	sub	local02, arg01
0a2a0     10 23 02 F6 | 	mov	local03, local02
0a2a4     01 22 06 F1 | 	add	local03, #1
0a2a8                 | LR__0837
0a2a8     A7 1E 02 FB | 	rdlong	local01, fp
0a2ac     11 1F 52 F2 | 	cmps	local01, local03 wc
0a2b0     34 00 90 3D |  if_ae	jmp	#LR__0838
0a2b4     8C 4E 05 F1 | 	add	fp, #140
0a2b8     A7 12 02 FB | 	rdlong	arg01, fp
0a2bc     8C 4E 85 F1 | 	sub	fp, #140
0a2c0     A7 14 02 FB | 	rdlong	arg02, fp
0a2c4     01 16 06 F6 | 	mov	arg03, #1
0a2c8     94 12 B1 FD | 	call	#__system__Mid_S
0a2cc     FD 12 C2 FA | 	rdbyte	arg01, result1
0a2d0     00 14 06 F6 | 	mov	arg02, #0
0a2d4     D8 FC BF FD | 	call	#_csave_addtoblock
0a2d8     A7 1E 02 FB | 	rdlong	local01, fp
0a2dc     01 1E 06 F1 | 	add	local01, #1
0a2e0     A7 1E 62 FC | 	wrlong	local01, fp
0a2e4     C0 FF 9F FD | 	jmp	#LR__0837
0a2e8                 | LR__0838
0a2e8     00 12 06 F6 | 	mov	arg01, #0
0a2ec     00 14 06 F6 | 	mov	arg02, #0
0a2f0     BC FC BF FD | 	call	#_csave_addtoblock
0a2f4     72 12 06 F6 | 	mov	arg01, #114
0a2f8     00 14 06 F6 | 	mov	arg02, #0
0a2fc     B0 FC BF FD | 	call	#_csave_addtoblock
0a300     62 12 06 F6 | 	mov	arg01, #98
0a304     00 14 06 F6 | 	mov	arg02, #0
0a308     A4 FC BF FD | 	call	#_csave_addtoblock
0a30c     73 12 06 F6 | 	mov	arg01, #115
0a310     00 14 06 F6 | 	mov	arg02, #0
0a314     98 FC BF FD | 	call	#_csave_addtoblock
0a318     0D 12 06 F6 | 	mov	arg01, #13
0a31c     00 14 06 F6 | 	mov	arg02, #0
0a320     8C FC BF FD | 	call	#_csave_addtoblock
0a324     69 00 00 FF 
0a328     48 E5 05 F1 | 	add	objptr, ##54088
0a32c     F2 1E 02 FB | 	rdlong	local01, objptr
0a330     69 00 00 FF 
0a334     48 E5 85 F1 | 	sub	objptr, ##54088
0a338     9C 4E 05 F1 | 	add	fp, #156
0a33c     A7 1E 62 FC | 	wrlong	local01, fp
0a340     9C 4E 85 F1 | 	sub	fp, #156
0a344                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a344                 | ' 
0a344                 | ' saveptr=programstart
0a344                 | ' do
0a344                 | LR__0839
0a344     A0 4E 05 F1 | 	add	fp, #160
0a348     A7 12 02 F6 | 	mov	arg01, fp
0a34c     04 4E 85 F1 | 	sub	fp, #4
0a350     A7 14 02 FB | 	rdlong	arg02, fp
0a354     9C 4E 85 F1 | 	sub	fp, #156
0a358     18 16 06 F6 | 	mov	arg03, #24
0a35c     0B 00 00 FF 
0a360     C0 E4 05 F1 | 	add	objptr, ##5824
0a364     64 E5 B0 FD | 	call	#_psram_spin2_read1
0a368     0C 4E 05 F1 | 	add	fp, #12
0a36c     A7 12 02 F6 | 	mov	arg01, fp
0a370     9C 4E 05 F1 | 	add	fp, #156
0a374     A7 14 02 FB | 	rdlong	arg02, fp
0a378     04 4E 05 F1 | 	add	fp, #4
0a37c     A7 16 02 FB | 	rdlong	arg03, fp
0a380     AC 4E 85 F1 | 	sub	fp, #172
0a384     44 E5 B0 FD | 	call	#_psram_spin2_read1
0a388     0B 00 00 FF 
0a38c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a390     AC 4E 05 F1 | 	add	fp, #172
0a394     A7 12 02 FB | 	rdlong	arg01, fp
0a398     AC 4E 85 F1 | 	sub	fp, #172
0a39c     00 14 06 F6 | 	mov	arg02, #0
0a3a0     0C FC BF FD | 	call	#_csave_addtoblock
0a3a4                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a3a4                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a3a4                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a3a4                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a3a4     A7 00 68 FC | 	wrlong	#0, fp
0a3a8     AC 4E 05 F1 | 	add	fp, #172
0a3ac     A7 24 02 FB | 	rdlong	local04, fp
0a3b0     AC 4E 85 F1 | 	sub	fp, #172
0a3b4                 | LR__0840
0a3b4     A7 1E 02 FB | 	rdlong	local01, fp
0a3b8     12 1F 52 F2 | 	cmps	local01, local04 wc
0a3bc     2C 00 90 3D |  if_ae	jmp	#LR__0841
0a3c0     A7 22 02 FB | 	rdlong	local03, fp
0a3c4     0C 4E 05 F1 | 	add	fp, #12
0a3c8     A7 22 02 F1 | 	add	local03, fp
0a3cc     11 13 C2 FA | 	rdbyte	arg01, local03
0a3d0     00 14 06 F6 | 	mov	arg02, #0
0a3d4     0C 4E 85 F1 | 	sub	fp, #12
0a3d8     D4 FB BF FD | 	call	#_csave_addtoblock
0a3dc     A7 22 02 FB | 	rdlong	local03, fp
0a3e0     01 22 06 F1 | 	add	local03, #1
0a3e4     A7 22 62 FC | 	wrlong	local03, fp
0a3e8     C8 FF 9F FD | 	jmp	#LR__0840
0a3ec                 | LR__0841
0a3ec     B4 4E 05 F1 | 	add	fp, #180
0a3f0     A7 1E 02 FB | 	rdlong	local01, fp
0a3f4     18 4E 85 F1 | 	sub	fp, #24
0a3f8     A7 1E 62 FC | 	wrlong	local01, fp
0a3fc     18 4E 05 F1 | 	add	fp, #24
0a400     A7 1E 02 FB | 	rdlong	local01, fp
0a404     B4 4E 85 F1 | 	sub	fp, #180
0a408     FF FF 3F FF 
0a40c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a410     30 FF 9F 5D |  if_ne	jmp	#LR__0839
0a414     00 12 06 F6 | 	mov	arg01, #0
0a418     01 14 06 F6 | 	mov	arg02, #1
0a41c     90 FB BF FD | 	call	#_csave_addtoblock
0a420     56 00 00 FF 
0a424     D4 E4 05 F1 | 	add	objptr, ##44244
0a428     F2 12 02 FB | 	rdlong	arg01, objptr
0a42c     56 00 00 FF 
0a430     D4 E4 85 F1 | 	sub	objptr, ##44244
0a434     F4 12 06 F1 | 	add	arg01, #244
0a438     09 01 58 FC | 	wrword	#0, arg01
0a43c                 | LR__0842
0a43c     A7 F0 03 F6 | 	mov	ptra, fp
0a440     B2 00 A0 FD | 	call	#popregs_
0a444                 | _test_csave_ret
0a444     2D 00 64 FD | 	ret
0a448                 | 
0a448                 | ' 
0a448                 | ' ' ----------------- Save the program
0a448                 | ' 
0a448                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a448                 | _do_save
0a448     02 4A 05 F6 | 	mov	COUNT_, #2
0a44c     A8 00 A0 FD | 	call	#pushregs_
0a450     01 00 00 FF 
0a454     BC F0 07 F1 | 	add	ptra, ##700
0a458     01 00 00 FF 
0a45c     10 4E 05 F1 | 	add	fp, ##528
0a460     B1 B0 86 FF 
0a464     A7 E4 68 FC | 	wrlong	##224486002, fp
0a468     01 00 00 FF 
0a46c     10 4E 85 F1 | 	sub	fp, ##528
0a470     C4 F4 BF FD | 	call	#_pop
0a474     FF 16 02 F6 | 	mov	arg03, result3
0a478     A7 FA 61 FC | 	wrlong	result1, fp
0a47c     04 4E 05 F1 | 	add	fp, #4
0a480     A7 FC 61 FC | 	wrlong	result2, fp
0a484     04 4E 05 F1 | 	add	fp, #4
0a488     A7 16 62 FC | 	wrlong	arg03, fp
0a48c     08 4E 85 F1 | 	sub	fp, #8
0a490                 | ' 
0a490                 | ' fileheader=$0D616272' rba+ver'
0a490                 | ' 
0a490                 | ' t1=pop() 
0a490                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a490     69 00 00 FF 
0a494     48 E5 05 F1 | 	add	objptr, ##54088
0a498     F2 12 02 FB | 	rdlong	arg01, objptr
0a49c     69 00 00 FF 
0a4a0     48 E5 85 F1 | 	sub	objptr, ##54088
0a4a4     90 BB B0 FD | 	call	#_pslpeek
0a4a8     FF FF 7F FF 
0a4ac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a4b0     0C 00 90 5D |  if_ne	jmp	#LR__0850
0a4b4     1B 12 06 F6 | 	mov	arg01, #27
0a4b8     C0 B9 B0 FD | 	call	#_printerror
0a4bc     68 02 90 FD | 	jmp	#LR__0856
0a4c0                 | LR__0850
0a4c0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a4c0     08 4E 05 F1 | 	add	fp, #8
0a4c4     A7 16 02 FB | 	rdlong	arg03, fp
0a4c8     08 4E 85 F1 | 	sub	fp, #8
0a4cc     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a4d0     18 00 90 5D |  if_ne	jmp	#LR__0851
0a4d4     A7 12 02 FB | 	rdlong	arg01, fp
0a4d8     D8 29 B0 FD | 	call	#_convertstring
0a4dc     A7 FA 61 FC | 	wrlong	result1, fp
0a4e0     08 4E 05 F1 | 	add	fp, #8
0a4e4     A7 3E 68 FC | 	wrlong	#31, fp
0a4e8     08 4E 85 F1 | 	sub	fp, #8
0a4ec                 | LR__0851
0a4ec                 | ' if t1.result_type=result_string then
0a4ec     08 4E 05 F1 | 	add	fp, #8
0a4f0     A7 1E 02 FB | 	rdlong	local01, fp
0a4f4     08 4E 85 F1 | 	sub	fp, #8
0a4f8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a4fc     28 02 90 5D |  if_ne	jmp	#LR__0855
0a500                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a500     A7 12 02 FB | 	rdlong	arg01, fp
0a504     47 01 00 FF 
0a508     4A 14 06 F6 | 	mov	arg02, ##@LR__4590
0a50c     50 EF B0 FD | 	call	#__system___string_cmp
0a510     00 FA 0D F2 | 	cmp	result1, #0 wz
0a514     47 01 00 AF 
0a518     4B 1E 06 A6 |  if_e	mov	local01, ##@LR__4591
0a51c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a520                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a520     09 12 06 F6 | 	mov	arg01, #9
0a524     44 3E B1 FD | 	call	#__system__close
0a528     09 1E 06 F6 | 	mov	local01, #9
0a52c     71 00 00 FF 
0a530     58 E5 05 F1 | 	add	objptr, ##58200
0a534     F2 12 02 FB | 	rdlong	arg01, objptr
0a538     71 00 00 FF 
0a53c     58 E5 85 F1 | 	sub	objptr, ##58200
0a540     47 01 00 FF 
0a544     56 14 06 F6 | 	mov	arg02, ##@LR__4592
0a548     48 EF B0 FD | 	call	#__system___string_concat
0a54c     FD 12 02 F6 | 	mov	arg01, result1
0a550     A7 14 02 FB | 	rdlong	arg02, fp
0a554     3C EF B0 FD | 	call	#__system___string_concat
0a558     FD 14 02 F6 | 	mov	arg02, result1
0a55c     0F 13 02 F6 | 	mov	arg01, local01
0a560     0D 16 06 F6 | 	mov	arg03, #13
0a564     D4 FA B0 FD | 	call	#__system___basic_open_string
0a568     01 00 00 FF 
0a56c     0C 4E 05 F1 | 	add	fp, ##524
0a570     A7 0A 68 FC | 	wrlong	#5, fp
0a574     69 00 00 FF 
0a578     48 E5 05 F1 | 	add	objptr, ##54088
0a57c     F2 1E 02 FB | 	rdlong	local01, objptr
0a580     69 00 00 FF 
0a584     48 E5 85 F1 | 	sub	objptr, ##54088
0a588     0C 4E 05 F1 | 	add	fp, #12
0a58c     A7 1E 62 FC | 	wrlong	local01, fp
0a590     01 00 00 FF 
0a594     18 4E 85 F1 | 	sub	fp, ##536
0a598                 | ' '  put #9,1,fileheader,1
0a598                 | '   i=5
0a598                 | '   saveptr=programstart
0a598                 | '   do
0a598                 | LR__0852
0a598     01 00 00 FF 
0a59c     1C 4E 05 F1 | 	add	fp, ##540
0a5a0     A7 12 02 F6 | 	mov	arg01, fp
0a5a4     04 4E 85 F1 | 	sub	fp, #4
0a5a8     A7 14 02 FB | 	rdlong	arg02, fp
0a5ac     01 00 00 FF 
0a5b0     18 4E 85 F1 | 	sub	fp, ##536
0a5b4     18 16 06 F6 | 	mov	arg03, #24
0a5b8     0B 00 00 FF 
0a5bc     C0 E4 05 F1 | 	add	objptr, ##5824
0a5c0     08 E3 B0 FD | 	call	#_psram_spin2_read1
0a5c4     01 00 00 FF 
0a5c8     34 4E 05 F1 | 	add	fp, ##564
0a5cc     A7 12 02 F6 | 	mov	arg01, fp
0a5d0     10 4E 85 F1 | 	sub	fp, #16
0a5d4     A7 14 02 FB | 	rdlong	arg02, fp
0a5d8     04 4E 05 F1 | 	add	fp, #4
0a5dc     A7 16 02 FB | 	rdlong	arg03, fp
0a5e0     01 00 00 FF 
0a5e4     28 4E 85 F1 | 	sub	fp, ##552
0a5e8     E0 E2 B0 FD | 	call	#_psram_spin2_read1
0a5ec     0B 00 00 FF 
0a5f0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a5f4     47 01 00 FF 
0a5f8     58 1E 06 F6 | 	mov	local01, ##@LR__4593
0a5fc     01 00 00 FF 
0a600     B4 4E 05 F1 | 	add	fp, ##692
0a604     A7 1E 62 FC | 	wrlong	local01, fp
0a608                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a608                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a608                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a608     A8 4E 85 F1 | 	sub	fp, #168
0a60c     A7 02 68 FC | 	wrlong	#1, fp
0a610     1C 4E 05 F1 | 	add	fp, #28
0a614     A7 20 02 FB | 	rdlong	local02, fp
0a618     01 00 00 FF 
0a61c     28 4E 85 F1 | 	sub	fp, ##552
0a620     01 20 06 F1 | 	add	local02, #1
0a624                 | LR__0853
0a624     01 00 00 FF 
0a628     0C 4E 05 F1 | 	add	fp, ##524
0a62c     A7 1E 02 FB | 	rdlong	local01, fp
0a630     01 00 00 FF 
0a634     0C 4E 85 F1 | 	sub	fp, ##524
0a638     10 1F 52 F2 | 	cmps	local01, local02 wc
0a63c     64 00 90 3D |  if_ae	jmp	#LR__0854
0a640     01 00 00 FF 
0a644     B4 4E 05 F1 | 	add	fp, ##692
0a648     A7 1E 02 FB | 	rdlong	local01, fp
0a64c     A8 4E 85 F1 | 	sub	fp, #168
0a650     A7 16 02 FB | 	rdlong	arg03, fp
0a654     01 16 86 F1 | 	sub	arg03, #1
0a658     28 4E 05 F1 | 	add	fp, #40
0a65c     A7 16 02 F1 | 	add	arg03, fp
0a660     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a664     01 00 00 FF 
0a668     34 4E 85 F1 | 	sub	fp, ##564
0a66c     9C 0F B1 FD | 	call	#__system__Chr_S
0a670     FD 14 02 F6 | 	mov	arg02, result1
0a674     0F 13 02 F6 | 	mov	arg01, local01
0a678     18 EE B0 FD | 	call	#__system___string_concat
0a67c     01 00 00 FF 
0a680     B4 4E 05 F1 | 	add	fp, ##692
0a684     A7 FA 61 FC | 	wrlong	result1, fp
0a688     A8 4E 85 F1 | 	sub	fp, #168
0a68c     A7 1E 02 FB | 	rdlong	local01, fp
0a690     01 1E 06 F1 | 	add	local01, #1
0a694     A7 1E 62 FC | 	wrlong	local01, fp
0a698     01 00 00 FF 
0a69c     0C 4E 85 F1 | 	sub	fp, ##524
0a6a0     80 FF 9F FD | 	jmp	#LR__0853
0a6a4                 | LR__0854
0a6a4                 | '  '   put #9,i,header(3),1 : i+=4
0a6a4                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a6a4                 | '      print #9, saveline$
0a6a4     09 12 06 F6 | 	mov	arg01, #9
0a6a8     90 46 B1 FD | 	call	#__system___getiolock_0425
0a6ac     FD 12 02 F6 | 	mov	arg01, result1
0a6b0     84 ED B0 FD | 	call	#__system___lockmem
0a6b4     01 00 00 FF 
0a6b8     B4 4E 05 F1 | 	add	fp, ##692
0a6bc     A7 14 02 FB | 	rdlong	arg02, fp
0a6c0     01 00 00 FF 
0a6c4     B4 4E 85 F1 | 	sub	fp, ##692
0a6c8     09 12 06 F6 | 	mov	arg01, #9
0a6cc     00 16 06 F6 | 	mov	arg03, #0
0a6d0     58 FA B0 FD | 	call	#__system___basic_print_string
0a6d4     09 12 06 F6 | 	mov	arg01, #9
0a6d8     0A 14 06 F6 | 	mov	arg02, #10
0a6dc     00 16 06 F6 | 	mov	arg03, #0
0a6e0     F0 F9 B0 FD | 	call	#__system___basic_print_char
0a6e4     09 12 06 F6 | 	mov	arg01, #9
0a6e8     50 46 B1 FD | 	call	#__system___getiolock_0425
0a6ec     FD 00 68 FC | 	wrlong	#0, result1
0a6f0     01 00 00 FF 
0a6f4     30 4E 05 F1 | 	add	fp, ##560
0a6f8     A7 1E 02 FB | 	rdlong	local01, fp
0a6fc     18 4E 85 F1 | 	sub	fp, #24
0a700     A7 1E 62 FC | 	wrlong	local01, fp
0a704     18 4E 05 F1 | 	add	fp, #24
0a708     A7 1E 02 FB | 	rdlong	local01, fp
0a70c     01 00 00 FF 
0a710     30 4E 85 F1 | 	sub	fp, ##560
0a714     FF FF 3F FF 
0a718     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a71c     78 FE 9F 5D |  if_ne	jmp	#LR__0852
0a720                 | '   close #9  
0a720     09 12 06 F6 | 	mov	arg01, #9
0a724     44 3C B1 FD | 	call	#__system__close
0a728                 | LR__0855
0a728                 | LR__0856
0a728     A7 F0 03 F6 | 	mov	ptra, fp
0a72c     B2 00 A0 FD | 	call	#popregs_
0a730                 | _do_save_ret
0a730     2D 00 64 FD | 	ret
0a734                 | 
0a734                 | ' 
0a734                 | ' '----------------- Load the program
0a734                 | ' 'lo todo: errors while loading
0a734                 | ' sub do_load
0a734                 | _do_load
0a734     01 4A 05 F6 | 	mov	COUNT_, #1
0a738     A8 00 A0 FD | 	call	#pushregs_
0a73c     A4 F0 07 F1 | 	add	ptra, #164
0a740     A0 4E 05 F1 | 	add	fp, #160
0a744     A7 12 02 F6 | 	mov	arg01, fp
0a748     80 4E 85 F1 | 	sub	fp, #128
0a74c     A7 14 02 F6 | 	mov	arg02, fp
0a750     20 4E 85 F1 | 	sub	fp, #32
0a754     09 15 62 FC | 	wrlong	arg02, arg01
0a758     DC F1 BF FD | 	call	#_pop
0a75c     FF 1A 02 F6 | 	mov	arg05, result3
0a760     A7 FA 61 FC | 	wrlong	result1, fp
0a764     04 4E 05 F1 | 	add	fp, #4
0a768     A7 FC 61 FC | 	wrlong	result2, fp
0a76c     04 4E 05 F1 | 	add	fp, #4
0a770     A7 1A 62 FC | 	wrlong	arg05, fp
0a774                 | ' 
0a774                 | ' lpoke varptr(line2$),varptr(line2)
0a774                 | ' t1=pop() 
0a774                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a774                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a774     08 4E 85 F1 | 	sub	fp, #8
0a778     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a77c     18 00 90 5D |  if_ne	jmp	#LR__0860
0a780     A7 12 02 FB | 	rdlong	arg01, fp
0a784     2C 27 B0 FD | 	call	#_convertstring
0a788     A7 FA 61 FC | 	wrlong	result1, fp
0a78c     08 4E 05 F1 | 	add	fp, #8
0a790     A7 3E 68 FC | 	wrlong	#31, fp
0a794     08 4E 85 F1 | 	sub	fp, #8
0a798                 | LR__0860
0a798                 | ' if t1.result_type=result_string then
0a798     08 4E 05 F1 | 	add	fp, #8
0a79c     A7 1E 02 FB | 	rdlong	local01, fp
0a7a0     08 4E 85 F1 | 	sub	fp, #8
0a7a4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a7a8     40 03 90 5D |  if_ne	jmp	#LR__0867
0a7ac     6C 21 B0 FD | 	call	#_do_new
0a7b0                 | '   do_new
0a7b0                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a7b0     A7 12 02 FB | 	rdlong	arg01, fp
0a7b4     47 01 00 FF 
0a7b8     59 14 06 F6 | 	mov	arg02, ##@LR__4594
0a7bc     A0 EC B0 FD | 	call	#__system___string_cmp
0a7c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7c4     47 01 00 AF 
0a7c8     5A 1E 06 A6 |  if_e	mov	local01, ##@LR__4595
0a7cc     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a7d0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a7d0     09 12 06 F6 | 	mov	arg01, #9
0a7d4     94 3B B1 FD | 	call	#__system__close
0a7d8     09 1E 06 F6 | 	mov	local01, #9
0a7dc     71 00 00 FF 
0a7e0     58 E5 05 F1 | 	add	objptr, ##58200
0a7e4     F2 12 02 FB | 	rdlong	arg01, objptr
0a7e8     71 00 00 FF 
0a7ec     58 E5 85 F1 | 	sub	objptr, ##58200
0a7f0     47 01 00 FF 
0a7f4     65 14 06 F6 | 	mov	arg02, ##@LR__4596
0a7f8     98 EC B0 FD | 	call	#__system___string_concat
0a7fc     FD 12 02 F6 | 	mov	arg01, result1
0a800     A7 14 02 FB | 	rdlong	arg02, fp
0a804     8C EC B0 FD | 	call	#__system___string_concat
0a808     FD 14 02 F6 | 	mov	arg02, result1
0a80c     0F 13 02 F6 | 	mov	arg01, local01
0a810     00 16 06 F6 | 	mov	arg03, #0
0a814     24 F8 B0 FD | 	call	#__system___basic_open_string
0a818     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a81c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a820     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a824     10 4E 05 F1 | 	add	fp, #16
0a828     A7 FA 61 FC | 	wrlong	result1, fp
0a82c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a82c     10 4E 85 F1 | 	sub	fp, #16
0a830     9C 00 90 AD |  if_e	jmp	#LR__0861
0a834     00 12 06 F6 | 	mov	arg01, #0
0a838     00 45 B1 FD | 	call	#__system___getiolock_0425
0a83c     FD 12 02 F6 | 	mov	arg01, result1
0a840     F4 EB B0 FD | 	call	#__system___lockmem
0a844     47 01 00 FF 
0a848     67 14 06 F6 | 	mov	arg02, ##@LR__4597
0a84c     00 12 06 F6 | 	mov	arg01, #0
0a850     00 16 06 F6 | 	mov	arg03, #0
0a854     D4 F8 B0 FD | 	call	#__system___basic_print_string
0a858     10 4E 05 F1 | 	add	fp, #16
0a85c     A7 14 02 FB | 	rdlong	arg02, fp
0a860     10 4E 85 F1 | 	sub	fp, #16
0a864     00 12 06 F6 | 	mov	arg01, #0
0a868     00 16 06 F6 | 	mov	arg03, #0
0a86c     0A 18 06 F6 | 	mov	arg04, #10
0a870     FC F8 B0 FD | 	call	#__system___basic_print_integer
0a874     47 01 00 FF 
0a878     75 14 06 F6 | 	mov	arg02, ##@LR__4598
0a87c     00 12 06 F6 | 	mov	arg01, #0
0a880     00 16 06 F6 | 	mov	arg03, #0
0a884     A4 F8 B0 FD | 	call	#__system___basic_print_string
0a888     10 4E 05 F1 | 	add	fp, #16
0a88c     A7 12 02 FB | 	rdlong	arg01, fp
0a890     10 4E 85 F1 | 	sub	fp, #16
0a894     A0 11 B1 FD | 	call	#__system___strerror
0a898     FD 14 02 F6 | 	mov	arg02, result1
0a89c     00 12 06 F6 | 	mov	arg01, #0
0a8a0     00 16 06 F6 | 	mov	arg03, #0
0a8a4     84 F8 B0 FD | 	call	#__system___basic_print_string
0a8a8     00 12 06 F6 | 	mov	arg01, #0
0a8ac     0A 14 06 F6 | 	mov	arg02, #10
0a8b0     00 16 06 F6 | 	mov	arg03, #0
0a8b4     1C F8 B0 FD | 	call	#__system___basic_print_char
0a8b8     00 12 06 F6 | 	mov	arg01, #0
0a8bc     7C 44 B1 FD | 	call	#__system___getiolock_0425
0a8c0     FD 00 68 FC | 	wrlong	#0, result1
0a8c4     09 12 06 F6 | 	mov	arg01, #9
0a8c8     A0 3A B1 FD | 	call	#__system__close
0a8cc     24 02 90 FD | 	jmp	#LR__0869
0a8d0                 | LR__0861
0a8d0     0C 4E 05 F1 | 	add	fp, #12
0a8d4     A7 0A 68 FC | 	wrlong	#5, fp
0a8d8                 | '   i=5
0a8d8                 | '   get #9,1,header,1
0a8d8     0C 4E 05 F1 | 	add	fp, #12
0a8dc     A7 16 02 F6 | 	mov	arg03, fp
0a8e0     18 4E 85 F1 | 	sub	fp, #24
0a8e4     09 12 06 F6 | 	mov	arg01, #9
0a8e8     01 14 06 F6 | 	mov	arg02, #1
0a8ec     01 18 06 F6 | 	mov	arg04, #1
0a8f0     04 1A 06 F6 | 	mov	arg05, #4
0a8f4     44 F9 B0 FD | 	call	#__system___basic_get
0a8f8                 | '   
0a8f8                 | '   if header<>$0D616272 then 
0a8f8     18 4E 05 F1 | 	add	fp, #24
0a8fc     A7 1E 02 FB | 	rdlong	local01, fp
0a900     18 4E 85 F1 | 	sub	fp, #24
0a904     B1 B0 06 FF 
0a908     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a90c     F0 00 90 AD |  if_e	jmp	#LR__0864
0a910                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a910     09 12 06 F6 | 	mov	arg01, #9
0a914     54 3A B1 FD | 	call	#__system__close
0a918     09 1E 06 F6 | 	mov	local01, #9
0a91c     71 00 00 FF 
0a920     58 E5 05 F1 | 	add	objptr, ##58200
0a924     F2 12 02 FB | 	rdlong	arg01, objptr
0a928     71 00 00 FF 
0a92c     58 E5 85 F1 | 	sub	objptr, ##58200
0a930     47 01 00 FF 
0a934     78 14 06 F6 | 	mov	arg02, ##@LR__4599
0a938     58 EB B0 FD | 	call	#__system___string_concat
0a93c     FD 12 02 F6 | 	mov	arg01, result1
0a940     A7 14 02 FB | 	rdlong	arg02, fp
0a944     4C EB B0 FD | 	call	#__system___string_concat
0a948     FD 14 02 F6 | 	mov	arg02, result1
0a94c     0F 13 02 F6 | 	mov	arg01, local01
0a950     00 16 06 F6 | 	mov	arg03, #0
0a954     E4 F6 B0 FD | 	call	#__system___basic_open_string
0a958                 | '     do
0a958                 | LR__0862
0a958     09 12 06 F6 | 	mov	arg01, #9
0a95c     E4 EC B0 FD | 	call	#__system___basic_read_line
0a960     56 00 00 FF 
0a964     E0 E4 05 F1 | 	add	objptr, ##44256
0a968     F2 FA 61 FC | 	wrlong	result1, objptr
0a96c                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a96c     56 00 00 FF 
0a970     E0 E4 85 F1 | 	sub	objptr, ##44256
0a974     FD 12 02 F6 | 	mov	arg01, result1
0a978     01 14 06 F6 | 	mov	arg02, #1
0a97c     C8 0A B1 FD | 	call	#__system__Left_S
0a980     FD 12 02 F6 | 	mov	arg01, result1
0a984     47 01 00 FF 
0a988     7A 14 06 F6 | 	mov	arg02, ##@LR__4600
0a98c     D0 EA B0 FD | 	call	#__system___string_cmp
0a990     00 FA 55 F2 | 	cmps	result1, #0 wc
0a994     34 00 90 CD |  if_b	jmp	#LR__0863
0a998     56 00 00 FF 
0a99c     E0 E4 05 F1 | 	add	objptr, ##44256
0a9a0     F2 12 02 FB | 	rdlong	arg01, objptr
0a9a4     56 00 00 FF 
0a9a8     E0 E4 85 F1 | 	sub	objptr, ##44256
0a9ac     01 14 06 F6 | 	mov	arg02, #1
0a9b0     94 0A B1 FD | 	call	#__system__Left_S
0a9b4     FD 12 02 F6 | 	mov	arg01, result1
0a9b8     47 01 00 FF 
0a9bc     7C 14 06 F6 | 	mov	arg02, ##@LR__4601
0a9c0     9C EA B0 FD | 	call	#__system___string_cmp
0a9c4     01 FA 55 F2 | 	cmps	result1, #1 wc
0a9c8     50 60 BF CD |  if_b	call	#_interpret
0a9cc                 | LR__0863
0a9cc     56 00 00 FF 
0a9d0     E0 E4 05 F1 | 	add	objptr, ##44256
0a9d4     F2 12 02 FB | 	rdlong	arg01, objptr
0a9d8     56 00 00 FF 
0a9dc     E0 E4 85 F1 | 	sub	objptr, ##44256
0a9e0     47 01 00 FF 
0a9e4     7E 14 06 F6 | 	mov	arg02, ##@LR__4602
0a9e8     74 EA B0 FD | 	call	#__system___string_cmp
0a9ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9f0     64 FF 9F 5D |  if_ne	jmp	#LR__0862
0a9f4                 | '     close #9
0a9f4     09 12 06 F6 | 	mov	arg01, #9
0a9f8     70 39 B1 FD | 	call	#__system__close
0a9fc     F4 00 90 FD | 	jmp	#LR__0868
0aa00                 | LR__0864
0aa00                 | '   'printerror(26) : close #9 : return
0aa00                 | '     do
0aa00                 | LR__0865
0aa00                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0aa00     0C 4E 05 F1 | 	add	fp, #12
0aa04     A7 14 02 FB | 	rdlong	arg02, fp
0aa08     10 4E 05 F1 | 	add	fp, #16
0aa0c     A7 16 02 F6 | 	mov	arg03, fp
0aa10     1C 4E 85 F1 | 	sub	fp, #28
0aa14     09 12 06 F6 | 	mov	arg01, #9
0aa18     01 18 06 F6 | 	mov	arg04, #1
0aa1c     04 1A 06 F6 | 	mov	arg05, #4
0aa20     18 F8 B0 FD | 	call	#__system___basic_get
0aa24     14 4E 05 F1 | 	add	fp, #20
0aa28     A7 FA 61 FC | 	wrlong	result1, fp
0aa2c     08 4E 85 F1 | 	sub	fp, #8
0aa30     A7 1E 02 FB | 	rdlong	local01, fp
0aa34     04 1E 06 F1 | 	add	local01, #4
0aa38     A7 1E 62 FC | 	wrlong	local01, fp
0aa3c     10 4E 05 F1 | 	add	fp, #16
0aa40     A7 1E 02 FB | 	rdlong	local01, fp
0aa44     04 4E 05 F1 | 	add	fp, #4
0aa48     A7 1E 02 F1 | 	add	local01, fp
0aa4c     0F 01 48 FC | 	wrbyte	#0, local01
0aa50                 | '       if amount=1 then  
0aa50     0C 4E 85 F1 | 	sub	fp, #12
0aa54     A7 1E 02 FB | 	rdlong	local01, fp
0aa58     14 4E 85 F1 | 	sub	fp, #20
0aa5c     01 1E 0E F2 | 	cmp	local01, #1 wz
0aa60     68 00 90 5D |  if_ne	jmp	#LR__0866
0aa64                 | '         get #9,i,line2(0),linelength : i+=linelength
0aa64     0C 4E 05 F1 | 	add	fp, #12
0aa68     A7 14 02 FB | 	rdlong	arg02, fp
0aa6c     14 4E 05 F1 | 	add	fp, #20
0aa70     A7 16 02 F6 | 	mov	arg03, fp
0aa74     04 4E 85 F1 | 	sub	fp, #4
0aa78     A7 18 02 FB | 	rdlong	arg04, fp
0aa7c     1C 4E 85 F1 | 	sub	fp, #28
0aa80     09 12 06 F6 | 	mov	arg01, #9
0aa84     01 1A 06 F6 | 	mov	arg05, #1
0aa88     B0 F7 B0 FD | 	call	#__system___basic_get
0aa8c     0C 4E 05 F1 | 	add	fp, #12
0aa90     A7 1E 02 FB | 	rdlong	local01, fp
0aa94     10 4E 05 F1 | 	add	fp, #16
0aa98     A7 1A 02 FB | 	rdlong	arg05, fp
0aa9c     0D 1F 02 F1 | 	add	local01, arg05
0aaa0     10 4E 85 F1 | 	sub	fp, #16
0aaa4     A7 1E 62 FC | 	wrlong	local01, fp
0aaa8     94 4E 05 F1 | 	add	fp, #148
0aaac     A7 1E 02 FB | 	rdlong	local01, fp
0aab0     A0 4E 85 F1 | 	sub	fp, #160
0aab4     56 00 00 FF 
0aab8     E0 E4 05 F1 | 	add	objptr, ##44256
0aabc     F2 1E 62 FC | 	wrlong	local01, objptr
0aac0     56 00 00 FF 
0aac4     E0 E4 85 F1 | 	sub	objptr, ##44256
0aac8     50 5F BF FD | 	call	#_interpret
0aacc                 | LR__0866
0aacc     14 4E 05 F1 | 	add	fp, #20
0aad0     A7 1E 02 FB | 	rdlong	local01, fp
0aad4     14 4E 85 F1 | 	sub	fp, #20
0aad8     01 1E 56 F2 | 	cmps	local01, #1 wc
0aadc     20 FF 9F 3D |  if_ae	jmp	#LR__0865
0aae0                 | '     close #9 
0aae0     09 12 06 F6 | 	mov	arg01, #9
0aae4     84 38 B1 FD | 	call	#__system__close
0aae8     08 00 90 FD | 	jmp	#LR__0868
0aaec                 | LR__0867
0aaec     1E 12 06 F6 | 	mov	arg01, #30
0aaf0     88 B3 B0 FD | 	call	#_printerror
0aaf4                 | LR__0868
0aaf4                 | LR__0869
0aaf4     A7 F0 03 F6 | 	mov	ptra, fp
0aaf8     B2 00 A0 FD | 	call	#popregs_
0aafc                 | _do_load_ret
0aafc     2D 00 64 FD | 	ret
0ab00                 | 
0ab00                 | ' 
0ab00                 | ' '----------------- Run the program 
0ab00                 | ' 
0ab00                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0ab00                 | ' 
0ab00                 | ' sub do_run
0ab00                 | _do_run
0ab00     01 4A 05 F6 | 	mov	COUNT_, #1
0ab04     A8 00 A0 FD | 	call	#pushregs_
0ab08     69 00 00 FF 
0ab0c     48 E5 05 F1 | 	add	objptr, ##54088
0ab10     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab14     0F 00 00 FF 
0ab18     2C E5 05 F1 | 	add	objptr, ##7980
0ab1c     F2 1C 62 FC | 	wrlong	arg06, objptr
0ab20     04 E4 05 F1 | 	add	objptr, #4
0ab24     F2 00 68 FC | 	wrlong	#0, objptr
0ab28     04 E4 05 F1 | 	add	objptr, #4
0ab2c     FF FF FF FF 
0ab30     F2 FE 6B FC | 	wrlong	##-1, objptr
0ab34                 | ' if inrun>0 then 
0ab34     04 E4 05 F1 | 	add	objptr, #4
0ab38     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab3c     79 00 00 FF 
0ab40     80 E4 85 F1 | 	sub	objptr, ##62080
0ab44     01 1C 16 F2 | 	cmp	arg06, #1 wc
0ab48     30 00 90 CD |  if_b	jmp	#LR__0870
0ab4c     79 00 00 FF 
0ab50     84 E4 05 F1 | 	add	objptr, ##62084
0ab54     F2 12 02 F6 | 	mov	arg01, objptr
0ab58     10 E4 85 F1 | 	sub	objptr, #16
0ab5c     F2 14 02 FB | 	rdlong	arg02, objptr
0ab60     18 16 06 F6 | 	mov	arg03, #24
0ab64     6D 00 00 FF 
0ab68     B4 E5 85 F1 | 	sub	objptr, ##56244
0ab6c     5C DD B0 FD | 	call	#_psram_spin2_read1
0ab70     0B 00 00 FF 
0ab74     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab78                 | '   psram.read1(varptr(runheader),runptr,24)  
0ab78                 | '   return
0ab78     9C 02 90 FD | 	jmp	#LR__0876
0ab7c                 | LR__0870
0ab7c     79 00 00 FF 
0ab80     80 E4 05 F1 | 	add	objptr, ##62080
0ab84     F2 02 68 FC | 	wrlong	#1, objptr
0ab88     04 E4 05 F1 | 	add	objptr, #4
0ab8c     F2 12 02 F6 | 	mov	arg01, objptr
0ab90     10 E4 85 F1 | 	sub	objptr, #16
0ab94     F2 14 02 FB | 	rdlong	arg02, objptr
0ab98     18 16 06 F6 | 	mov	arg03, #24
0ab9c     6D 00 00 FF 
0aba0     B4 E5 85 F1 | 	sub	objptr, ##56244
0aba4     24 DD B0 FD | 	call	#_psram_spin2_read1
0aba8                 | ' inrun=1
0aba8                 | ' psram.read1(varptr(runheader),runptr,24) 
0aba8                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0aba8     6D 00 00 FF 
0abac     C4 E5 05 F1 | 	add	objptr, ##56260
0abb0     F2 1E 02 FB | 	rdlong	local01, objptr
0abb4     79 00 00 FF 
0abb8     84 E4 85 F1 | 	sub	objptr, ##62084
0abbc     FF FF 7F FF 
0abc0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0abc4     79 00 00 AF 
0abc8     80 E4 05 A1 |  if_e	add	objptr, ##62080
0abcc     F2 00 68 AC |  if_e	wrlong	#0, objptr
0abd0     79 00 00 AF 
0abd4     80 E4 85 A1 |  if_e	sub	objptr, ##62080
0abd8     3C 02 90 AD |  if_e	jmp	#LR__0876
0abdc                 | ' do 
0abdc                 | LR__0871
0abdc                 | '   if runptr<>oldrunptr then
0abdc     79 00 00 FF 
0abe0     74 E4 05 F1 | 	add	objptr, ##62068
0abe4     F2 1E 02 FB | 	rdlong	local01, objptr
0abe8     08 E4 05 F1 | 	add	objptr, #8
0abec     F2 1C 02 FB | 	rdlong	arg06, objptr
0abf0     79 00 00 FF 
0abf4     7C E4 85 F1 | 	sub	objptr, ##62076
0abf8     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0abfc     CC 00 90 AD |  if_e	jmp	#LR__0872
0ac00     79 00 00 FF 
0ac04     84 E4 05 F1 | 	add	objptr, ##62084
0ac08     F2 12 02 F6 | 	mov	arg01, objptr
0ac0c     10 E4 85 F1 | 	sub	objptr, #16
0ac10     F2 14 02 FB | 	rdlong	arg02, objptr
0ac14     18 16 06 F6 | 	mov	arg03, #24
0ac18     6D 00 00 FF 
0ac1c     B4 E5 85 F1 | 	sub	objptr, ##56244
0ac20     A8 DC B0 FD | 	call	#_psram_spin2_read1
0ac24     5B 00 00 FF 
0ac28     80 E4 05 F1 | 	add	objptr, ##46720
0ac2c     F2 12 02 F6 | 	mov	arg01, objptr
0ac30     12 00 00 FF 
0ac34     34 E5 05 F1 | 	add	objptr, ##9524
0ac38     F2 14 02 FB | 	rdlong	arg02, objptr
0ac3c     14 00 00 FF 
0ac40     4C E5 85 F1 | 	sub	objptr, ##10572
0ac44     F2 1E 02 FB | 	rdlong	local01, objptr
0ac48     01 1E 66 F0 | 	shl	local01, #1
0ac4c     0F 15 02 F1 | 	add	arg02, local01
0ac50     14 00 00 FF 
0ac54     64 E5 05 F1 | 	add	objptr, ##10596
0ac58     F2 16 02 FB | 	rdlong	arg03, objptr
0ac5c     18 E4 85 F1 | 	sub	objptr, #24
0ac60     F2 1E 02 FB | 	rdlong	local01, objptr
0ac64     0F 17 82 F1 | 	sub	arg03, local01
0ac68     6D 00 00 FF 
0ac6c     B4 E5 85 F1 | 	sub	objptr, ##56244
0ac70     58 DC B0 FD | 	call	#_psram_spin2_read1
0ac74     6D 00 00 FF 
0ac78     CC E5 05 F1 | 	add	objptr, ##56268
0ac7c     F2 1E 02 FB | 	rdlong	local01, objptr
0ac80     18 E4 85 F1 | 	sub	objptr, #24
0ac84     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac88     0E 1F 82 F1 | 	sub	local01, arg06
0ac8c     14 00 00 FF 
0ac90     4C E5 85 F1 | 	sub	objptr, ##10572
0ac94     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac98     0E 1F 12 FD | 	qdiv	local01, arg06
0ac9c     05 00 00 FF 
0aca0     18 E4 05 F1 | 	add	objptr, ##2584
0aca4     18 1E 62 FD | 	getqx	local01
0aca8     03 1E 86 F1 | 	sub	local01, #3
0acac     F2 1E 62 FC | 	wrlong	local01, objptr
0acb0     0F 00 00 FF 
0acb4     34 E5 05 F1 | 	add	objptr, ##7988
0acb8     F2 1E 02 FB | 	rdlong	local01, objptr
0acbc     08 E4 05 F1 | 	add	objptr, #8
0acc0     F2 1E 62 FC | 	wrlong	local01, objptr
0acc4     79 00 00 FF 
0acc8     7C E4 85 F1 | 	sub	objptr, ##62076
0accc                 | LR__0872
0accc     79 00 00 FF 
0acd0     98 E4 05 F1 | 	add	objptr, ##62104
0acd4     F2 1E 02 FB | 	rdlong	local01, objptr
0acd8     24 E4 85 F1 | 	sub	objptr, #36
0acdc     F2 1E 62 FC | 	wrlong	local01, objptr
0ace0     04 E4 05 F1 | 	add	objptr, #4
0ace4     F2 12 02 FB | 	rdlong	arg01, objptr
0ace8     79 00 00 FF 
0acec     78 E4 85 F1 | 	sub	objptr, ##62072
0acf0     40 EB BF FD | 	call	#_execute_line
0acf4     79 00 00 FF 
0acf8     78 E4 05 F1 | 	add	objptr, ##62072
0acfc     F2 FA 61 FC | 	wrlong	result1, objptr
0ad00     04 E4 85 F1 | 	sub	objptr, #4
0ad04     F2 1E 02 FB | 	rdlong	local01, objptr
0ad08     79 00 00 FF 
0ad0c     74 E4 85 F1 | 	sub	objptr, ##62068
0ad10     FF FF 3F FF 
0ad14     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ad18     0C 00 90 AD |  if_e	jmp	#LR__0873
0ad1c     3C DF B0 FD | 	call	#_usbnew_spin2_get_key
0ad20     06 FB 0D F2 | 	cmp	result1, #262 wz
0ad24     B4 FE 9F 5D |  if_ne	jmp	#LR__0871
0ad28                 | LR__0873
0ad28                 | ' if runheader(5)<>$7FFF_FFFF then 
0ad28     79 00 00 FF 
0ad2c     98 E4 05 F1 | 	add	objptr, ##62104
0ad30     F2 1E 02 FB | 	rdlong	local01, objptr
0ad34     79 00 00 FF 
0ad38     98 E4 85 F1 | 	sub	objptr, ##62104
0ad3c     FF FF 3F FF 
0ad40     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ad44     BC 00 90 AD |  if_e	jmp	#LR__0875
0ad48                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0ad48     79 00 00 FF 
0ad4c     A4 E4 05 F1 | 	add	objptr, ##62116
0ad50     F2 1E 02 FB | 	rdlong	local01, objptr
0ad54     79 00 00 FF 
0ad58     A4 E4 85 F1 | 	sub	objptr, ##62116
0ad5c     01 1E 0E F2 | 	cmp	local01, #1 wz
0ad60     3C 00 90 5D |  if_ne	jmp	#LR__0874
0ad64     7A 00 00 FF 
0ad68     48 E5 05 F1 | 	add	objptr, ##62792
0ad6c     F2 14 02 FB | 	rdlong	arg02, objptr
0ad70     04 E4 85 F1 | 	sub	objptr, #4
0ad74     F2 1A 02 FB | 	rdlong	arg05, objptr
0ad78     07 12 06 F6 | 	mov	arg01, #7
0ad7c     56 00 00 FF 
0ad80     44 16 06 F6 | 	mov	arg03, ##44100
0ad84     0E 18 C6 F9 | 	decod	arg04, #14
0ad88     01 1C 66 F6 | 	neg	arg06, #1
0ad8c     6F 00 00 FF 
0ad90     84 E4 85 F1 | 	sub	objptr, ##56964
0ad94     4C E2 B0 FD | 	call	#_Audio095_8_sc_spin2_play
0ad98     0B 00 00 FF 
0ad9c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ada0                 | LR__0874
0ada0                 | '   print "Stopped at line ";runheader(0)
0ada0     00 12 06 F6 | 	mov	arg01, #0
0ada4     94 3F B1 FD | 	call	#__system___getiolock_0425
0ada8     FD 12 02 F6 | 	mov	arg01, result1
0adac     88 E6 B0 FD | 	call	#__system___lockmem
0adb0     47 01 00 FF 
0adb4     7F 14 06 F6 | 	mov	arg02, ##@LR__4603
0adb8     00 12 06 F6 | 	mov	arg01, #0
0adbc     00 16 06 F6 | 	mov	arg03, #0
0adc0     68 F3 B0 FD | 	call	#__system___basic_print_string
0adc4     79 00 00 FF 
0adc8     84 E4 05 F1 | 	add	objptr, ##62084
0adcc     F2 14 02 FB | 	rdlong	arg02, objptr
0add0     79 00 00 FF 
0add4     84 E4 85 F1 | 	sub	objptr, ##62084
0add8     00 12 06 F6 | 	mov	arg01, #0
0addc     00 16 06 F6 | 	mov	arg03, #0
0ade0     0A 18 06 F6 | 	mov	arg04, #10
0ade4     C8 F3 B0 FD | 	call	#__system___basic_print_unsigned
0ade8     00 12 06 F6 | 	mov	arg01, #0
0adec     0A 14 06 F6 | 	mov	arg02, #10
0adf0     00 16 06 F6 | 	mov	arg03, #0
0adf4     DC F2 B0 FD | 	call	#__system___basic_print_char
0adf8     00 12 06 F6 | 	mov	arg01, #0
0adfc     3C 3F B1 FD | 	call	#__system___getiolock_0425
0ae00     FD 00 68 FC | 	wrlong	#0, result1
0ae04                 | LR__0875
0ae04     79 00 00 FF 
0ae08     80 E4 05 F1 | 	add	objptr, ##62080
0ae0c     F2 00 68 FC | 	wrlong	#0, objptr
0ae10     79 00 00 FF 
0ae14     80 E4 85 F1 | 	sub	objptr, ##62080
0ae18                 | LR__0876
0ae18     A7 F0 03 F6 | 	mov	ptra, fp
0ae1c     B2 00 A0 FD | 	call	#popregs_
0ae20                 | _do_run_ret
0ae20     2D 00 64 FD | 	ret
0ae24                 | 
0ae24                 | ' 
0ae24                 | ' sub do_defenv
0ae24                 | _do_defenv
0ae24     05 4A 05 F6 | 	mov	COUNT_, #5
0ae28     A8 00 A0 FD | 	call	#pushregs_
0ae2c     84 F0 07 F1 | 	add	ptra, #132
0ae30     69 00 00 FF 
0ae34     44 E5 05 F1 | 	add	objptr, ##54084
0ae38     F2 1A 02 FB | 	rdlong	arg05, objptr
0ae3c     0D 19 02 F6 | 	mov	arg04, arg05
0ae40     01 18 66 F0 | 	shl	arg04, #1
0ae44     0D 19 02 F1 | 	add	arg04, arg05
0ae48     02 18 66 F0 | 	shl	arg04, #2
0ae4c     03 00 00 FF 
0ae50     04 E4 85 F1 | 	sub	objptr, ##1540
0ae54     F2 18 02 F1 | 	add	arg04, objptr
0ae58     0C 1B 02 FB | 	rdlong	arg05, arg04
0ae5c     A7 1A 62 FC | 	wrlong	arg05, fp
0ae60                 | ' 
0ae60                 | ' numpar=compiledline(lineptr_e).result.uresult
0ae60                 | ' 
0ae60                 | ' 
0ae60                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ae60                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ae60                 | ' ' Every 5 ms added 
0ae60                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0ae60                 | ' 
0ae60                 | ' 
0ae60                 | ' if numpar<2 then return
0ae60     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ae64     66 00 00 FF 
0ae68     40 E5 85 F1 | 	sub	objptr, ##52544
0ae6c     B4 09 90 CD |  if_b	jmp	#LR__0906
0ae70                 | ' 
0ae70                 | '  
0ae70                 | ' if numpar=2 then
0ae70     A7 1A 02 FB | 	rdlong	arg05, fp
0ae74     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ae78     20 04 90 5D |  if_ne	jmp	#LR__0889
0ae7c     B8 EA BF FD | 	call	#_pop
0ae80     FF 1A 02 F6 | 	mov	arg05, result3
0ae84     28 4E 05 F1 | 	add	fp, #40
0ae88     A7 FA 61 FC | 	wrlong	result1, fp
0ae8c     04 4E 05 F1 | 	add	fp, #4
0ae90     A7 FC 61 FC | 	wrlong	result2, fp
0ae94     04 4E 05 F1 | 	add	fp, #4
0ae98     A7 1A 62 FC | 	wrlong	arg05, fp
0ae9c                 | '   t1=pop()
0ae9c                 | '   if t1.result_type=result_string2 then 
0ae9c     30 4E 85 F1 | 	sub	fp, #48
0aea0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0aea4     20 00 90 5D |  if_ne	jmp	#LR__0880
0aea8     28 4E 05 F1 | 	add	fp, #40
0aeac     A7 12 02 FB | 	rdlong	arg01, fp
0aeb0     28 4E 85 F1 | 	sub	fp, #40
0aeb4     FC 1F B0 FD | 	call	#_convertstring
0aeb8     34 4E 05 F1 | 	add	fp, #52
0aebc     A7 FA 61 FC | 	wrlong	result1, fp
0aec0     34 4E 85 F1 | 	sub	fp, #52
0aec4     40 00 90 FD | 	jmp	#LR__0883
0aec8                 | LR__0880
0aec8     30 4E 05 F1 | 	add	fp, #48
0aecc     A7 1A 02 FB | 	rdlong	arg05, fp
0aed0     30 4E 85 F1 | 	sub	fp, #48
0aed4     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0aed8     18 00 90 5D |  if_ne	jmp	#LR__0881
0aedc     28 4E 05 F1 | 	add	fp, #40
0aee0     A7 1A 02 FB | 	rdlong	arg05, fp
0aee4     0C 4E 05 F1 | 	add	fp, #12
0aee8     A7 1A 62 FC | 	wrlong	arg05, fp
0aeec     34 4E 85 F1 | 	sub	fp, #52
0aef0     14 00 90 FD | 	jmp	#LR__0882
0aef4                 | LR__0881
0aef4     47 01 00 FF 
0aef8     90 1A 06 F6 | 	mov	arg05, ##@LR__4604
0aefc     34 4E 05 F1 | 	add	fp, #52
0af00     A7 1A 62 FC | 	wrlong	arg05, fp
0af04     34 4E 85 F1 | 	sub	fp, #52
0af08                 | LR__0882
0af08                 | LR__0883
0af08                 | ' 
0af08                 | '     
0af08                 | '   if s<>"" then 
0af08     34 4E 05 F1 | 	add	fp, #52
0af0c     A7 12 02 FB | 	rdlong	arg01, fp
0af10     34 4E 85 F1 | 	sub	fp, #52
0af14     47 01 00 FF 
0af18     91 14 06 F6 | 	mov	arg02, ##@LR__4605
0af1c     40 E5 B0 FD | 	call	#__system___string_cmp
0af20     00 FA 0D F2 | 	cmp	result1, #0 wz
0af24     10 02 90 AD |  if_e	jmp	#LR__0887
0af28     0C EA BF FD | 	call	#_pop
0af2c     FF 1A 02 F6 | 	mov	arg05, result3
0af30     28 4E 05 F1 | 	add	fp, #40
0af34     A7 FA 61 FC | 	wrlong	result1, fp
0af38     04 4E 05 F1 | 	add	fp, #4
0af3c     A7 FC 61 FC | 	wrlong	result2, fp
0af40     04 4E 05 F1 | 	add	fp, #4
0af44     A7 1A 62 FC | 	wrlong	arg05, fp
0af48     08 4E 85 F1 | 	sub	fp, #8
0af4c     A7 12 02 F6 | 	mov	arg01, fp
0af50     28 4E 85 F1 | 	sub	fp, #40
0af54     90 63 B0 FD | 	call	#_converttoint
0af58     10 4E 05 F1 | 	add	fp, #16
0af5c     A7 FA 61 FC | 	wrlong	result1, fp
0af60     10 4E 85 F1 | 	sub	fp, #16
0af64                 | '     t1=pop()
0af64                 | '     channel=converttoint(t1) 
0af64                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0af64     09 12 06 F6 | 	mov	arg01, #9
0af68     00 34 B1 FD | 	call	#__system__close
0af6c     09 1E 06 F6 | 	mov	local01, #9
0af70     47 01 00 FF 
0af74     92 12 06 F6 | 	mov	arg01, ##@LR__4606
0af78     34 4E 05 F1 | 	add	fp, #52
0af7c     A7 14 02 FB | 	rdlong	arg02, fp
0af80     34 4E 85 F1 | 	sub	fp, #52
0af84     0C E5 B0 FD | 	call	#__system___string_concat
0af88     FD 14 02 F6 | 	mov	arg02, result1
0af8c     0F 13 02 F6 | 	mov	arg01, local01
0af90     00 16 06 F6 | 	mov	arg03, #0
0af94     A4 F0 B0 FD | 	call	#__system___basic_open_string
0af98     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0af9c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0afa0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0afa4     7A 00 00 FF 
0afa8     C4 E5 05 F1 | 	add	objptr, ##62916
0afac     F2 FA 61 FC | 	wrlong	result1, objptr
0afb0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0afb0     7A 00 00 FF 
0afb4     C4 E5 85 F1 | 	sub	objptr, ##62916
0afb8     B0 00 90 AD |  if_e	jmp	#LR__0884
0afbc     00 12 06 F6 | 	mov	arg01, #0
0afc0     78 3D B1 FD | 	call	#__system___getiolock_0425
0afc4     FD 12 02 F6 | 	mov	arg01, result1
0afc8     6C E4 B0 FD | 	call	#__system___lockmem
0afcc     47 01 00 FF 
0afd0     9F 14 06 F6 | 	mov	arg02, ##@LR__4607
0afd4     00 12 06 F6 | 	mov	arg01, #0
0afd8     00 16 06 F6 | 	mov	arg03, #0
0afdc     4C F1 B0 FD | 	call	#__system___basic_print_string
0afe0     7A 00 00 FF 
0afe4     C4 E5 05 F1 | 	add	objptr, ##62916
0afe8     F2 14 02 FB | 	rdlong	arg02, objptr
0afec     7A 00 00 FF 
0aff0     C4 E5 85 F1 | 	sub	objptr, ##62916
0aff4     00 12 06 F6 | 	mov	arg01, #0
0aff8     00 16 06 F6 | 	mov	arg03, #0
0affc     0A 18 06 F6 | 	mov	arg04, #10
0b000     6C F1 B0 FD | 	call	#__system___basic_print_integer
0b004     47 01 00 FF 
0b008     AD 14 06 F6 | 	mov	arg02, ##@LR__4608
0b00c     00 12 06 F6 | 	mov	arg01, #0
0b010     00 16 06 F6 | 	mov	arg03, #0
0b014     14 F1 B0 FD | 	call	#__system___basic_print_string
0b018     00 1E 06 F6 | 	mov	local01, #0
0b01c     7A 00 00 FF 
0b020     C4 E5 05 F1 | 	add	objptr, ##62916
0b024     F2 12 02 FB | 	rdlong	arg01, objptr
0b028     7A 00 00 FF 
0b02c     C4 E5 85 F1 | 	sub	objptr, ##62916
0b030     04 0A B1 FD | 	call	#__system___strerror
0b034     FD 14 02 F6 | 	mov	arg02, result1
0b038     0F 13 02 F6 | 	mov	arg01, local01
0b03c     00 16 06 F6 | 	mov	arg03, #0
0b040     E8 F0 B0 FD | 	call	#__system___basic_print_string
0b044     00 12 06 F6 | 	mov	arg01, #0
0b048     0A 14 06 F6 | 	mov	arg02, #10
0b04c     00 16 06 F6 | 	mov	arg03, #0
0b050     80 F0 B0 FD | 	call	#__system___basic_print_char
0b054     00 12 06 F6 | 	mov	arg01, #0
0b058     E0 3C B1 FD | 	call	#__system___getiolock_0425
0b05c     FD 00 68 FC | 	wrlong	#0, result1
0b060     09 12 06 F6 | 	mov	arg01, #9
0b064     04 33 B1 FD | 	call	#__system__close
0b068     B8 07 90 FD | 	jmp	#LR__0906
0b06c                 | LR__0884
0b06c                 | '     get #9,17,envbuf8(channel,0),256
0b06c     10 4E 05 F1 | 	add	fp, #16
0b070     A7 1A 02 FB | 	rdlong	arg05, fp
0b074     10 4E 85 F1 | 	sub	fp, #16
0b078     0D 17 02 F6 | 	mov	arg03, arg05
0b07c     09 16 66 F0 | 	shl	arg03, #9
0b080     0D 17 02 F1 | 	add	arg03, arg05
0b084     2C 00 00 FF 
0b088     CC E4 05 F1 | 	add	objptr, ##22732
0b08c     F2 16 02 F1 | 	add	arg03, objptr
0b090     09 12 06 F6 | 	mov	arg01, #9
0b094     11 14 06 F6 | 	mov	arg02, #17
0b098     00 19 06 F6 | 	mov	arg04, #256
0b09c     01 1A 06 F6 | 	mov	arg05, #1
0b0a0     2C 00 00 FF 
0b0a4     CC E4 85 F1 | 	sub	objptr, ##22732
0b0a8     90 F1 B0 FD | 	call	#__system___basic_get
0b0ac                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b0ac     04 4E 05 F1 | 	add	fp, #4
0b0b0     A7 FE 69 FC | 	wrlong	#255, fp
0b0b4     04 4E 85 F1 | 	sub	fp, #4
0b0b8     2C 00 00 FF 
0b0bc     CC E4 05 F1 | 	add	objptr, ##22732
0b0c0     97 30 48 FB | 	callpa	#(@LR__0886-@LR__0885)>>2,fcache_load_ptr_
0b0c4                 | LR__0885
0b0c4     10 4E 05 F1 | 	add	fp, #16
0b0c8     A7 1E 02 FB | 	rdlong	local01, fp
0b0cc     0F 1B 02 F6 | 	mov	arg05, local01
0b0d0     09 1A 66 F0 | 	shl	arg05, #9
0b0d4     F2 1A 02 F1 | 	add	arg05, objptr
0b0d8     0C 4E 85 F1 | 	sub	fp, #12
0b0dc     A7 18 02 FB | 	rdlong	arg04, fp
0b0e0     0C 17 02 F6 | 	mov	arg03, arg04
0b0e4     01 16 66 F0 | 	shl	arg03, #1
0b0e8     0D 17 02 F1 | 	add	arg03, arg05
0b0ec     0F 1B 02 F6 | 	mov	arg05, local01
0b0f0     09 1A 66 F0 | 	shl	arg05, #9
0b0f4     0F 1B 02 F1 | 	add	arg05, local01
0b0f8     F2 1A 02 F1 | 	add	arg05, objptr
0b0fc     0D 19 02 F1 | 	add	arg04, arg05
0b100     0C 1F C2 FA | 	rdbyte	local01, arg04
0b104     00 1F 06 FA | 	mul	local01, #256
0b108     0B 1F 52 FC | 	wrword	local01, arg03
0b10c     A7 1E 02 FB | 	rdlong	local01, fp
0b110     01 1E 86 F1 | 	sub	local01, #1
0b114     A7 1E 62 FC | 	wrlong	local01, fp
0b118     04 4E 85 F1 | 	sub	fp, #4
0b11c     00 1E 56 F2 | 	cmps	local01, #0 wc
0b120     A0 FF 9F 3D |  if_ae	jmp	#LR__0885
0b124                 | LR__0886
0b124     2C 00 00 FF 
0b128     CC E4 85 F1 | 	sub	objptr, ##22732
0b12c                 | '     close #9
0b12c     09 12 06 F6 | 	mov	arg01, #9
0b130     38 32 B1 FD | 	call	#__system__close
0b134                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b134                 | '     return
0b134     EC 06 90 FD | 	jmp	#LR__0906
0b138                 | LR__0887
0b138     28 4E 05 F1 | 	add	fp, #40
0b13c     A7 12 02 F6 | 	mov	arg01, fp
0b140     28 4E 85 F1 | 	sub	fp, #40
0b144     A0 61 B0 FD | 	call	#_converttoint
0b148     FD 1E 02 F6 | 	mov	local01, result1
0b14c     0C 4E 05 F1 | 	add	fp, #12
0b150     A7 1E 62 FC | 	wrlong	local01, fp
0b154     0C 4E 85 F1 | 	sub	fp, #12
0b158                 | '   
0b158                 | '   par=converttoint(t1)  : print par
0b158     00 12 06 F6 | 	mov	arg01, #0
0b15c     DC 3B B1 FD | 	call	#__system___getiolock_0425
0b160     FD 12 02 F6 | 	mov	arg01, result1
0b164     D0 E2 B0 FD | 	call	#__system___lockmem
0b168     0C 4E 05 F1 | 	add	fp, #12
0b16c     A7 14 02 FB | 	rdlong	arg02, fp
0b170     0C 4E 85 F1 | 	sub	fp, #12
0b174     00 12 06 F6 | 	mov	arg01, #0
0b178     00 16 06 F6 | 	mov	arg03, #0
0b17c     0A 18 06 F6 | 	mov	arg04, #10
0b180     EC EF B0 FD | 	call	#__system___basic_print_integer
0b184     00 12 06 F6 | 	mov	arg01, #0
0b188     0A 14 06 F6 | 	mov	arg02, #10
0b18c     00 16 06 F6 | 	mov	arg03, #0
0b190     40 EF B0 FD | 	call	#__system___basic_print_char
0b194     00 12 06 F6 | 	mov	arg01, #0
0b198     A0 3B B1 FD | 	call	#__system___getiolock_0425
0b19c     FD 00 68 FC | 	wrlong	#0, result1
0b1a0     94 E7 BF FD | 	call	#_pop
0b1a4     FF 1E 02 F6 | 	mov	local01, result3
0b1a8     28 4E 05 F1 | 	add	fp, #40
0b1ac     A7 FA 61 FC | 	wrlong	result1, fp
0b1b0     04 4E 05 F1 | 	add	fp, #4
0b1b4     A7 FC 61 FC | 	wrlong	result2, fp
0b1b8     04 4E 05 F1 | 	add	fp, #4
0b1bc     A7 1E 62 FC | 	wrlong	local01, fp
0b1c0     08 4E 85 F1 | 	sub	fp, #8
0b1c4     A7 12 02 F6 | 	mov	arg01, fp
0b1c8     28 4E 85 F1 | 	sub	fp, #40
0b1cc     18 61 B0 FD | 	call	#_converttoint
0b1d0     10 4E 05 F1 | 	add	fp, #16
0b1d4     A7 FA 61 FC | 	wrlong	result1, fp
0b1d8                 | '   t1=pop()
0b1d8                 | '   channel=converttoint(t1)  
0b1d8                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b1d8     04 4E 85 F1 | 	sub	fp, #4
0b1dc     A7 1E 0A FB | 	rdlong	local01, fp wz
0b1e0     0C 4E 85 F1 | 	sub	fp, #12
0b1e4     3C 06 90 5D |  if_ne	jmp	#LR__0906
0b1e8     04 4E 05 F1 | 	add	fp, #4
0b1ec     A7 00 68 FC | 	wrlong	#0, fp
0b1f0     04 4E 85 F1 | 	sub	fp, #4
0b1f4                 | LR__0888
0b1f4     10 4E 05 F1 | 	add	fp, #16
0b1f8     A7 1E 02 FB | 	rdlong	local01, fp
0b1fc     0B 1E 66 F0 | 	shl	local01, #11
0b200     0C 00 00 FF 
0b204     CC E4 05 F1 | 	add	objptr, ##6348
0b208     F2 1E 02 F1 | 	add	local01, objptr
0b20c     0C 4E 85 F1 | 	sub	fp, #12
0b210     A7 12 02 FB | 	rdlong	arg01, fp
0b214     09 21 02 F6 | 	mov	local02, arg01
0b218     01 20 66 F0 | 	shl	local02, #1
0b21c     0F 21 02 F1 | 	add	local02, local01
0b220     04 4E 85 F1 | 	sub	fp, #4
0b224     0C 00 00 FF 
0b228     CC E4 85 F1 | 	sub	objptr, ##6348
0b22c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b230     1F 22 C6 C9 |  if_b	decod	local03, #31
0b234     00 22 06 36 |  if_ae	mov	local03, #0
0b238     E4 08 B1 FD | 	call	#__system___float_fromuns
0b23c     11 FB 61 F5 | 	xor	result1, local03
0b240     FD 14 02 F6 | 	mov	arg02, result1
0b244     87 E4 1D FF 
0b248     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b24c     D4 0C B1 FD | 	call	#__system___float_mul
0b250     FD 12 02 F6 | 	mov	arg01, result1
0b254     08 16 B1 FD | 	call	#__system____builtin_sinf
0b258     FD 14 02 F6 | 	mov	arg02, result1
0b25c     58 7F 23 FF 
0b260     00 12 06 F6 | 	mov	arg01, ##1191096320
0b264     BC 0C B1 FD | 	call	#__system___float_mul
0b268     FD 12 02 F6 | 	mov	arg01, result1
0b26c     01 14 06 F6 | 	mov	arg02, #1
0b270     78 11 B1 FD | 	call	#__system___float_tointeger
0b274     10 FB 51 FC | 	wrword	result1, local02
0b278     04 4E 05 F1 | 	add	fp, #4
0b27c     A7 20 02 FB | 	rdlong	local02, fp
0b280     01 20 06 F1 | 	add	local02, #1
0b284     A7 20 62 FC | 	wrlong	local02, fp
0b288     04 4E 85 F1 | 	sub	fp, #4
0b28c     02 00 00 FF 
0b290     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b294     5C FF 9F CD |  if_b	jmp	#LR__0888
0b298                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b298                 | '   return
0b298     88 05 90 FD | 	jmp	#LR__0906
0b29c                 | LR__0889
0b29c                 | ' for i=0 to 15 : harm(i)=0: next i  
0b29c     04 4E 05 F1 | 	add	fp, #4
0b2a0     A7 00 68 FC | 	wrlong	#0, fp
0b2a4     97 16 48 FB | 	callpa	#(@LR__0891-@LR__0890)>>2,fcache_load_ptr_
0b2a8                 | LR__0890
0b2a8     A7 1E 02 FB | 	rdlong	local01, fp
0b2ac     02 1E 66 F0 | 	shl	local01, #2
0b2b0     34 4E 05 F1 | 	add	fp, #52
0b2b4     A7 1E 02 F1 | 	add	local01, fp
0b2b8     0F 01 68 FC | 	wrlong	#0, local01
0b2bc     34 4E 85 F1 | 	sub	fp, #52
0b2c0     A7 1E 02 FB | 	rdlong	local01, fp
0b2c4     01 1E 06 F1 | 	add	local01, #1
0b2c8     A7 1E 62 FC | 	wrlong	local01, fp
0b2cc     10 1E 56 F2 | 	cmps	local01, #16 wc
0b2d0     D4 FF 9F CD |  if_b	jmp	#LR__0890
0b2d4                 | LR__0891
0b2d4     04 4E 85 F1 | 	sub	fp, #4
0b2d8                 | ' for i=numpar to 2 step -1 
0b2d8     A7 1E 02 FB | 	rdlong	local01, fp
0b2dc     04 4E 05 F1 | 	add	fp, #4
0b2e0     A7 1E 62 FC | 	wrlong	local01, fp
0b2e4     04 4E 85 F1 | 	sub	fp, #4
0b2e8                 | LR__0892
0b2e8     4C E6 BF FD | 	call	#_pop
0b2ec     28 4E 05 F1 | 	add	fp, #40
0b2f0     A7 FA 61 FC | 	wrlong	result1, fp
0b2f4     04 4E 05 F1 | 	add	fp, #4
0b2f8     A7 FC 61 FC | 	wrlong	result2, fp
0b2fc     04 4E 05 F1 | 	add	fp, #4
0b300     A7 FE 61 FC | 	wrlong	result3, fp
0b304     2C 4E 85 F1 | 	sub	fp, #44
0b308     A7 1E 02 FB | 	rdlong	local01, fp
0b30c     02 1E 86 F1 | 	sub	local01, #2
0b310     02 1E 66 F0 | 	shl	local01, #2
0b314     34 4E 05 F1 | 	add	fp, #52
0b318     A7 1E 02 F1 | 	add	local01, fp
0b31c     10 4E 85 F1 | 	sub	fp, #16
0b320     A7 12 02 F6 | 	mov	arg01, fp
0b324     28 4E 85 F1 | 	sub	fp, #40
0b328     68 60 B0 FD | 	call	#_converttofloat
0b32c     0F FB 61 FC | 	wrlong	result1, local01
0b330     04 4E 05 F1 | 	add	fp, #4
0b334     A7 1E 02 FB | 	rdlong	local01, fp
0b338     01 1E 86 F1 | 	sub	local01, #1
0b33c     A7 1E 62 FC | 	wrlong	local01, fp
0b340     04 4E 85 F1 | 	sub	fp, #4
0b344     02 1E 56 F2 | 	cmps	local01, #2 wc
0b348     9C FF 9F 3D |  if_ae	jmp	#LR__0892
0b34c     E8 E5 BF FD | 	call	#_pop
0b350     FF 1E 02 F6 | 	mov	local01, result3
0b354     28 4E 05 F1 | 	add	fp, #40
0b358     A7 FA 61 FC | 	wrlong	result1, fp
0b35c     04 4E 05 F1 | 	add	fp, #4
0b360     A7 FC 61 FC | 	wrlong	result2, fp
0b364     04 4E 05 F1 | 	add	fp, #4
0b368     A7 1E 62 FC | 	wrlong	local01, fp
0b36c     08 4E 85 F1 | 	sub	fp, #8
0b370     A7 12 02 F6 | 	mov	arg01, fp
0b374     28 4E 85 F1 | 	sub	fp, #40
0b378     6C 5F B0 FD | 	call	#_converttoint
0b37c     FD 1E 02 F6 | 	mov	local01, result1
0b380     10 4E 05 F1 | 	add	fp, #16
0b384     A7 1E 62 FC | 	wrlong	local01, fp
0b388     10 4E 85 F1 | 	sub	fp, #16
0b38c                 | ' t1=pop()
0b38c                 | ' channel=converttoint(t1) : print channel
0b38c     00 12 06 F6 | 	mov	arg01, #0
0b390     A8 39 B1 FD | 	call	#__system___getiolock_0425
0b394     FD 12 02 F6 | 	mov	arg01, result1
0b398     9C E0 B0 FD | 	call	#__system___lockmem
0b39c     10 4E 05 F1 | 	add	fp, #16
0b3a0     A7 14 02 FB | 	rdlong	arg02, fp
0b3a4     10 4E 85 F1 | 	sub	fp, #16
0b3a8     00 12 06 F6 | 	mov	arg01, #0
0b3ac     00 16 06 F6 | 	mov	arg03, #0
0b3b0     0A 18 06 F6 | 	mov	arg04, #10
0b3b4     B8 ED B0 FD | 	call	#__system___basic_print_integer
0b3b8     00 12 06 F6 | 	mov	arg01, #0
0b3bc     0A 14 06 F6 | 	mov	arg02, #10
0b3c0     00 16 06 F6 | 	mov	arg03, #0
0b3c4     0C ED B0 FD | 	call	#__system___basic_print_char
0b3c8     00 12 06 F6 | 	mov	arg01, #0
0b3cc     6C 39 B1 FD | 	call	#__system___getiolock_0425
0b3d0     FD 00 68 FC | 	wrlong	#0, result1
0b3d4                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b3d4     08 4E 05 F1 | 	add	fp, #8
0b3d8     02 00 80 FF 
0b3dc     A7 00 68 FC | 	wrlong	##1024, fp
0b3e0     08 4E 85 F1 | 	sub	fp, #8
0b3e4     0C 00 00 FF 
0b3e8     CC E4 05 F1 | 	add	objptr, ##6348
0b3ec     97 18 48 FB | 	callpa	#(@LR__0895-@LR__0893)>>2,fcache_load_ptr_
0b3f0                 | LR__0893
0b3f0     02 00 00 FF 
0b3f4     00 14 DC FC | 	rep	@LR__0896, ##1024
0b3f8                 | LR__0894
0b3f8     10 4E 05 F1 | 	add	fp, #16
0b3fc     A7 20 02 FB | 	rdlong	local02, fp
0b400     0B 20 66 F0 | 	shl	local02, #11
0b404     F2 20 02 F1 | 	add	local02, objptr
0b408     0C 4E 85 F1 | 	sub	fp, #12
0b40c     A7 1E 02 FB | 	rdlong	local01, fp
0b410     04 4E 85 F1 | 	sub	fp, #4
0b414     01 1E 66 F0 | 	shl	local01, #1
0b418     10 1F 02 F1 | 	add	local01, local02
0b41c     0F 01 58 FC | 	wrword	#0, local01
0b420                 | LR__0895
0b420                 | LR__0896
0b420     0C 00 00 FF 
0b424     CC E4 85 F1 | 	sub	objptr, ##6348
0b428     1C 4E 05 F1 | 	add	fp, #28
0b42c     A7 00 68 FC | 	wrlong	#0, fp
0b430                 | ' max=0
0b430                 | ' if harm(0)<0 then
0b430     1C 4E 05 F1 | 	add	fp, #28
0b434     A7 12 02 FB | 	rdlong	arg01, fp
0b438     38 4E 85 F1 | 	sub	fp, #56
0b43c     00 14 06 F6 | 	mov	arg02, #0
0b440     01 16 06 F6 | 	mov	arg03, #1
0b444     10 0F B1 FD | 	call	#__system___float_cmp
0b448     00 FA 55 F2 | 	cmps	result1, #0 wc
0b44c     04 01 90 3D |  if_ae	jmp	#LR__0899
0b450     38 4E 05 F1 | 	add	fp, #56
0b454     A7 FA 01 FB | 	rdlong	result1, fp
0b458     1F FA 05 F4 | 	bitl	result1, #31
0b45c     24 4E 85 F1 | 	sub	fp, #36
0b460     A7 FA 61 FC | 	wrlong	result1, fp
0b464     28 4E 05 F1 | 	add	fp, #40
0b468     A7 FA 01 FB | 	rdlong	result1, fp
0b46c     1F FA 05 F4 | 	bitl	result1, #31
0b470     24 4E 85 F1 | 	sub	fp, #36
0b474     A7 FA 61 FC | 	wrlong	result1, fp
0b478     20 4E 05 F1 | 	add	fp, #32
0b47c     00 C0 9F FF 
0b480     A7 00 68 FC | 	wrlong	##1065353216, fp
0b484     24 4E 85 F1 | 	sub	fp, #36
0b488     A7 1E 02 FB | 	rdlong	local01, fp
0b48c     28 4E 05 F1 | 	add	fp, #40
0b490     A7 1E 62 FC | 	wrlong	local01, fp
0b494     24 4E 85 F1 | 	sub	fp, #36
0b498     A7 1E 02 FB | 	rdlong	local01, fp
0b49c     28 4E 05 F1 | 	add	fp, #40
0b4a0     A7 1E 62 FC | 	wrlong	local01, fp
0b4a4                 | '   harm(0)=1
0b4a4                 | '   harm(1)=even
0b4a4                 | '   harm(2)=odd
0b4a4                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b4a4     3C 4E 85 F1 | 	sub	fp, #60
0b4a8     A7 06 68 FC | 	wrlong	#3, fp
0b4ac                 | LR__0897
0b4ac     A7 1A 02 FB | 	rdlong	arg05, fp
0b4b0     0D 25 02 F6 | 	mov	local04, arg05
0b4b4     02 24 66 F0 | 	shl	local04, #2
0b4b8     34 4E 05 F1 | 	add	fp, #52
0b4bc     A7 24 02 F1 | 	add	local04, fp
0b4c0     02 1A 86 F1 | 	sub	arg05, #2
0b4c4     02 1A 66 F0 | 	shl	arg05, #2
0b4c8     A7 1A 02 F1 | 	add	arg05, fp
0b4cc     0D 13 02 FB | 	rdlong	arg01, arg05
0b4d0     24 4E 85 F1 | 	sub	fp, #36
0b4d4     A7 14 02 FB | 	rdlong	arg02, fp
0b4d8     14 4E 85 F1 | 	sub	fp, #20
0b4dc     44 0A B1 FD | 	call	#__system___float_mul
0b4e0     12 FB 61 FC | 	wrlong	result1, local04
0b4e4     04 4E 05 F1 | 	add	fp, #4
0b4e8     A7 26 02 FB | 	rdlong	local05, fp
0b4ec     02 26 06 F1 | 	add	local05, #2
0b4f0     A7 26 62 FC | 	wrlong	local05, fp
0b4f4     10 26 56 F2 | 	cmps	local05, #16 wc
0b4f8     B0 FF 9F CD |  if_b	jmp	#LR__0897
0b4fc                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b4fc     A7 08 68 FC | 	wrlong	#4, fp
0b500                 | LR__0898
0b500     A7 26 02 FB | 	rdlong	local05, fp
0b504     13 25 02 F6 | 	mov	local04, local05
0b508     02 24 66 F0 | 	shl	local04, #2
0b50c     34 4E 05 F1 | 	add	fp, #52
0b510     A7 24 02 F1 | 	add	local04, fp
0b514     02 26 86 F1 | 	sub	local05, #2
0b518     02 26 66 F0 | 	shl	local05, #2
0b51c     A7 26 02 F1 | 	add	local05, fp
0b520     13 13 02 FB | 	rdlong	arg01, local05
0b524     20 4E 85 F1 | 	sub	fp, #32
0b528     A7 14 02 FB | 	rdlong	arg02, fp
0b52c     18 4E 85 F1 | 	sub	fp, #24
0b530     F0 09 B1 FD | 	call	#__system___float_mul
0b534     12 FB 61 FC | 	wrlong	result1, local04
0b538     04 4E 05 F1 | 	add	fp, #4
0b53c     A7 26 02 FB | 	rdlong	local05, fp
0b540     02 26 06 F1 | 	add	local05, #2
0b544     A7 26 62 FC | 	wrlong	local05, fp
0b548     0F 26 56 F2 | 	cmps	local05, #15 wc
0b54c     B0 FF 9F CD |  if_b	jmp	#LR__0898
0b550     04 4E 85 F1 | 	sub	fp, #4
0b554                 | LR__0899
0b554                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b554     38 4E 05 F1 | 	add	fp, #56
0b558     A7 12 02 FB | 	rdlong	arg01, fp
0b55c     38 4E 85 F1 | 	sub	fp, #56
0b560     00 14 06 F6 | 	mov	arg02, #0
0b564     01 16 66 F6 | 	neg	arg03, #1
0b568     EC 0D B1 FD | 	call	#__system___float_cmp
0b56c     00 FA 55 F2 | 	cmps	result1, #0 wc
0b570     B0 02 90 CD |  if_b	jmp	#LR__0905
0b574                 | '   for i=0 to 1023
0b574     04 4E 05 F1 | 	add	fp, #4
0b578     A7 00 68 FC | 	wrlong	#0, fp
0b57c     04 4E 85 F1 | 	sub	fp, #4
0b580                 | LR__0900
0b580     20 4E 05 F1 | 	add	fp, #32
0b584     A7 00 68 FC | 	wrlong	#0, fp
0b588                 | '     spl=0
0b588                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b588     18 4E 85 F1 | 	sub	fp, #24
0b58c     A7 00 68 FC | 	wrlong	#0, fp
0b590                 | LR__0901
0b590     A7 24 02 FB | 	rdlong	local04, fp
0b594     02 24 66 F0 | 	shl	local04, #2
0b598     30 4E 05 F1 | 	add	fp, #48
0b59c     A7 24 02 F1 | 	add	local04, fp
0b5a0     12 27 02 FB | 	rdlong	local05, local04
0b5a4     87 E4 1D FF 
0b5a8     DB 25 06 F6 | 	mov	local04, ##1003032539
0b5ac     34 4E 85 F1 | 	sub	fp, #52
0b5b0     A7 12 02 FB | 	rdlong	arg01, fp
0b5b4     04 4E 85 F1 | 	sub	fp, #4
0b5b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0b5bc     1F 22 C6 C9 |  if_b	decod	local03, #31
0b5c0     00 22 06 36 |  if_ae	mov	local03, #0
0b5c4     58 05 B1 FD | 	call	#__system___float_fromuns
0b5c8     11 FB 61 F5 | 	xor	result1, local03
0b5cc     FD 14 02 F6 | 	mov	arg02, result1
0b5d0     12 13 02 F6 | 	mov	arg01, local04
0b5d4     4C 09 B1 FD | 	call	#__system___float_mul
0b5d8     FD 24 02 F6 | 	mov	local04, result1
0b5dc     08 4E 05 F1 | 	add	fp, #8
0b5e0     A7 12 02 FB | 	rdlong	arg01, fp
0b5e4     08 4E 85 F1 | 	sub	fp, #8
0b5e8     01 12 06 F1 | 	add	arg01, #1
0b5ec     09 13 52 F6 | 	abs	arg01, arg01 wc
0b5f0     1F 22 C6 C9 |  if_b	decod	local03, #31
0b5f4     00 22 06 36 |  if_ae	mov	local03, #0
0b5f8     24 05 B1 FD | 	call	#__system___float_fromuns
0b5fc     11 FB 61 F5 | 	xor	result1, local03
0b600     FD 14 02 F6 | 	mov	arg02, result1
0b604     12 13 02 F6 | 	mov	arg01, local04
0b608     18 09 B1 FD | 	call	#__system___float_mul
0b60c     FD 12 02 F6 | 	mov	arg01, result1
0b610     4C 12 B1 FD | 	call	#__system____builtin_sinf
0b614     FD 14 02 F6 | 	mov	arg02, result1
0b618     13 13 02 F6 | 	mov	arg01, local05
0b61c     04 09 B1 FD | 	call	#__system___float_mul
0b620     FD 14 02 F6 | 	mov	arg02, result1
0b624     20 4E 05 F1 | 	add	fp, #32
0b628     A7 12 02 FB | 	rdlong	arg01, fp
0b62c     20 4E 85 F1 | 	sub	fp, #32
0b630     20 05 B1 FD | 	call	#__system___float_add
0b634     20 4E 05 F1 | 	add	fp, #32
0b638     A7 FA 61 FC | 	wrlong	result1, fp
0b63c     18 4E 85 F1 | 	sub	fp, #24
0b640     A7 16 02 FB | 	rdlong	arg03, fp
0b644     01 16 06 F1 | 	add	arg03, #1
0b648     A7 16 62 FC | 	wrlong	arg03, fp
0b64c     10 16 56 F2 | 	cmps	arg03, #16 wc
0b650     3C FF 9F CD |  if_b	jmp	#LR__0901
0b654                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b654     18 4E 05 F1 | 	add	fp, #24
0b658     A7 12 02 FB | 	rdlong	arg01, fp
0b65c     1F 12 06 F4 | 	bitl	arg01, #31
0b660     04 4E 85 F1 | 	sub	fp, #4
0b664     A7 14 02 FB | 	rdlong	arg02, fp
0b668     1C 4E 85 F1 | 	sub	fp, #28
0b66c     01 16 66 F6 | 	neg	arg03, #1
0b670     E4 0C B1 FD | 	call	#__system___float_cmp
0b674     01 FA 55 F2 | 	cmps	result1, #1 wc
0b678     18 00 90 CD |  if_b	jmp	#LR__0902
0b67c     20 4E 05 F1 | 	add	fp, #32
0b680     A7 FA 01 FB | 	rdlong	result1, fp
0b684     1F FA 05 F4 | 	bitl	result1, #31
0b688     04 4E 85 F1 | 	sub	fp, #4
0b68c     A7 FA 61 FC | 	wrlong	result1, fp
0b690     1C 4E 85 F1 | 	sub	fp, #28
0b694                 | LR__0902
0b694     04 4E 05 F1 | 	add	fp, #4
0b698     A7 26 02 FB | 	rdlong	local05, fp
0b69c     01 26 06 F1 | 	add	local05, #1
0b6a0     A7 26 62 FC | 	wrlong	local05, fp
0b6a4     04 4E 85 F1 | 	sub	fp, #4
0b6a8     02 00 00 FF 
0b6ac     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b6b0     CC FE 9F CD |  if_b	jmp	#LR__0900
0b6b4                 | '   for i=0 to 1023
0b6b4     04 4E 05 F1 | 	add	fp, #4
0b6b8     A7 00 68 FC | 	wrlong	#0, fp
0b6bc     04 4E 85 F1 | 	sub	fp, #4
0b6c0                 | LR__0903
0b6c0     20 4E 05 F1 | 	add	fp, #32
0b6c4     A7 00 68 FC | 	wrlong	#0, fp
0b6c8                 | '     spl=0
0b6c8                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b6c8     18 4E 85 F1 | 	sub	fp, #24
0b6cc     A7 00 68 FC | 	wrlong	#0, fp
0b6d0                 | LR__0904
0b6d0     A7 26 02 FB | 	rdlong	local05, fp
0b6d4     02 26 66 F0 | 	shl	local05, #2
0b6d8     30 4E 05 F1 | 	add	fp, #48
0b6dc     A7 26 02 F1 | 	add	local05, fp
0b6e0     13 27 02 FB | 	rdlong	local05, local05
0b6e4     1C 4E 85 F1 | 	sub	fp, #28
0b6e8     A7 14 02 FB | 	rdlong	arg02, fp
0b6ec     1C 4E 85 F1 | 	sub	fp, #28
0b6f0     58 7F 23 FF 
0b6f4     00 12 06 F6 | 	mov	arg01, ##1191096320
0b6f8     2C 0A B1 FD | 	call	#__system___float_div
0b6fc     FD 14 02 F6 | 	mov	arg02, result1
0b700     13 13 02 F6 | 	mov	arg01, local05
0b704     1C 08 B1 FD | 	call	#__system___float_mul
0b708     FD 26 02 F6 | 	mov	local05, result1
0b70c     87 E4 1D FF 
0b710     DB 25 06 F6 | 	mov	local04, ##1003032539
0b714     04 4E 05 F1 | 	add	fp, #4
0b718     A7 12 02 FB | 	rdlong	arg01, fp
0b71c     04 4E 85 F1 | 	sub	fp, #4
0b720     09 13 52 F6 | 	abs	arg01, arg01 wc
0b724     1F 22 C6 C9 |  if_b	decod	local03, #31
0b728     00 22 06 36 |  if_ae	mov	local03, #0
0b72c     F0 03 B1 FD | 	call	#__system___float_fromuns
0b730     11 FB 61 F5 | 	xor	result1, local03
0b734     FD 14 02 F6 | 	mov	arg02, result1
0b738     12 13 02 F6 | 	mov	arg01, local04
0b73c     E4 07 B1 FD | 	call	#__system___float_mul
0b740     FD 24 02 F6 | 	mov	local04, result1
0b744     08 4E 05 F1 | 	add	fp, #8
0b748     A7 12 02 FB | 	rdlong	arg01, fp
0b74c     08 4E 85 F1 | 	sub	fp, #8
0b750     01 12 06 F1 | 	add	arg01, #1
0b754     09 13 52 F6 | 	abs	arg01, arg01 wc
0b758     1F 22 C6 C9 |  if_b	decod	local03, #31
0b75c     00 22 06 36 |  if_ae	mov	local03, #0
0b760     BC 03 B1 FD | 	call	#__system___float_fromuns
0b764     11 FB 61 F5 | 	xor	result1, local03
0b768     FD 14 02 F6 | 	mov	arg02, result1
0b76c     12 13 02 F6 | 	mov	arg01, local04
0b770     B0 07 B1 FD | 	call	#__system___float_mul
0b774     FD 12 02 F6 | 	mov	arg01, result1
0b778     E4 10 B1 FD | 	call	#__system____builtin_sinf
0b77c     FD 14 02 F6 | 	mov	arg02, result1
0b780     13 13 02 F6 | 	mov	arg01, local05
0b784     9C 07 B1 FD | 	call	#__system___float_mul
0b788     FD 14 02 F6 | 	mov	arg02, result1
0b78c     20 4E 05 F1 | 	add	fp, #32
0b790     A7 12 02 FB | 	rdlong	arg01, fp
0b794     20 4E 85 F1 | 	sub	fp, #32
0b798     B8 03 B1 FD | 	call	#__system___float_add
0b79c     20 4E 05 F1 | 	add	fp, #32
0b7a0     A7 FA 61 FC | 	wrlong	result1, fp
0b7a4     18 4E 85 F1 | 	sub	fp, #24
0b7a8     A7 26 02 FB | 	rdlong	local05, fp
0b7ac     01 26 06 F1 | 	add	local05, #1
0b7b0     A7 26 62 FC | 	wrlong	local05, fp
0b7b4     10 26 56 F2 | 	cmps	local05, #16 wc
0b7b8     14 FF 9F CD |  if_b	jmp	#LR__0904
0b7bc     08 4E 05 F1 | 	add	fp, #8
0b7c0     A7 26 02 FB | 	rdlong	local05, fp
0b7c4     0B 26 66 F0 | 	shl	local05, #11
0b7c8     0C 00 00 FF 
0b7cc     CC E4 05 F1 | 	add	objptr, ##6348
0b7d0     F2 26 02 F1 | 	add	local05, objptr
0b7d4     0C 4E 85 F1 | 	sub	fp, #12
0b7d8     A7 20 02 FB | 	rdlong	local02, fp
0b7dc     01 20 66 F0 | 	shl	local02, #1
0b7e0     13 21 02 F1 | 	add	local02, local05
0b7e4     1C 4E 05 F1 | 	add	fp, #28
0b7e8     A7 12 02 FB | 	rdlong	arg01, fp
0b7ec     20 4E 85 F1 | 	sub	fp, #32
0b7f0     0C 00 00 FF 
0b7f4     CC E4 85 F1 | 	sub	objptr, ##6348
0b7f8     01 14 06 F6 | 	mov	arg02, #1
0b7fc     EC 0B B1 FD | 	call	#__system___float_tointeger
0b800     10 FB 51 FC | 	wrword	result1, local02
0b804     04 4E 05 F1 | 	add	fp, #4
0b808     A7 26 02 FB | 	rdlong	local05, fp
0b80c     01 26 06 F1 | 	add	local05, #1
0b810     A7 26 62 FC | 	wrlong	local05, fp
0b814     04 4E 85 F1 | 	sub	fp, #4
0b818     02 00 00 FF 
0b81c     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b820     9C FE 9F CD |  if_b	jmp	#LR__0903
0b824                 | LR__0905
0b824                 | LR__0906
0b824     A7 F0 03 F6 | 	mov	ptra, fp
0b828     B2 00 A0 FD | 	call	#popregs_
0b82c                 | _do_defenv_ret
0b82c     2D 00 64 FD | 	ret
0b830                 | 
0b830                 | ' 
0b830                 | ' 
0b830                 | ' sub do_play
0b830                 | _do_play
0b830     02 4A 05 F6 | 	mov	COUNT_, #2
0b834     A8 00 A0 FD | 	call	#pushregs_
0b838     4C F0 07 F1 | 	add	ptra, #76
0b83c     48 4E 05 F1 | 	add	fp, #72
0b840     AB CB A1 FF 
0b844     A7 D6 6B FC | 	wrlong	##1133991915, fp
0b848     2C 4E 85 F1 | 	sub	fp, #44
0b84c     A7 00 68 FC | 	wrlong	#0, fp
0b850     04 4E 05 F1 | 	add	fp, #4
0b854     00 EE A1 FF 
0b858     A7 00 68 FC | 	wrlong	##1138491392, fp
0b85c     04 4E 05 F1 | 	add	fp, #4
0b860     00 C0 A0 FF 
0b864     A7 00 68 FC | 	wrlong	##1098907648, fp
0b868     04 4E 05 F1 | 	add	fp, #4
0b86c     A7 00 68 FC | 	wrlong	#0, fp
0b870     04 4E 05 F1 | 	add	fp, #4
0b874     A7 00 68 FC | 	wrlong	#0, fp
0b878     04 4E 05 F1 | 	add	fp, #4
0b87c     00 C0 9F FF 
0b880     A7 00 68 FC | 	wrlong	##1065353216, fp
0b884     04 4E 05 F1 | 	add	fp, #4
0b888     A7 00 68 FC | 	wrlong	#0, fp
0b88c     04 4E 05 F1 | 	add	fp, #4
0b890     A7 00 68 FC | 	wrlong	#0, fp
0b894     38 4E 85 F1 | 	sub	fp, #56
0b898     69 00 00 FF 
0b89c     44 E5 05 F1 | 	add	objptr, ##54084
0b8a0     F2 1E 02 FB | 	rdlong	local01, objptr
0b8a4     0F 21 02 F6 | 	mov	local02, local01
0b8a8     01 20 66 F0 | 	shl	local02, #1
0b8ac     0F 21 02 F1 | 	add	local02, local01
0b8b0     02 20 66 F0 | 	shl	local02, #2
0b8b4     03 00 00 FF 
0b8b8     04 E4 85 F1 | 	sub	objptr, ##1540
0b8bc     F2 20 02 F1 | 	add	local02, objptr
0b8c0     10 1F 02 FB | 	rdlong	local01, local02
0b8c4     A7 1E 62 FC | 	wrlong	local01, fp
0b8c8                 | ' speed_coeff=302.68686433234421364985163204748 
0b8c8                 | ' params(0)=0.0 : params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0
0b8c8                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan
0b8c8                 | ' numpar=compiledline(lineptr_e).result.uresult
0b8c8                 | ' for i=numpar to 1 step -1 
0b8c8     04 4E 05 F1 | 	add	fp, #4
0b8cc     A7 1E 62 FC | 	wrlong	local01, fp
0b8d0     04 4E 85 F1 | 	sub	fp, #4
0b8d4     66 00 00 FF 
0b8d8     40 E5 85 F1 | 	sub	objptr, ##52544
0b8dc                 | LR__0910
0b8dc     58 E0 BF FD | 	call	#_pop
0b8e0     3C 4E 05 F1 | 	add	fp, #60
0b8e4     A7 FA 61 FC | 	wrlong	result1, fp
0b8e8     04 4E 05 F1 | 	add	fp, #4
0b8ec     A7 FC 61 FC | 	wrlong	result2, fp
0b8f0     04 4E 05 F1 | 	add	fp, #4
0b8f4     A7 FE 61 FC | 	wrlong	result3, fp
0b8f8     40 4E 85 F1 | 	sub	fp, #64
0b8fc     A7 20 02 FB | 	rdlong	local02, fp
0b900     01 20 86 F1 | 	sub	local02, #1
0b904     02 20 66 F0 | 	shl	local02, #2
0b908     18 4E 05 F1 | 	add	fp, #24
0b90c     A7 20 02 F1 | 	add	local02, fp
0b910     20 4E 05 F1 | 	add	fp, #32
0b914     A7 12 02 F6 | 	mov	arg01, fp
0b918     3C 4E 85 F1 | 	sub	fp, #60
0b91c     74 5A B0 FD | 	call	#_converttofloat
0b920     10 FB 61 FC | 	wrlong	result1, local02
0b924     04 4E 05 F1 | 	add	fp, #4
0b928     A7 20 02 FB | 	rdlong	local02, fp
0b92c     01 20 86 F1 | 	sub	local02, #1
0b930     A7 20 62 FC | 	wrlong	local02, fp
0b934     04 4E 85 F1 | 	sub	fp, #4
0b938     01 20 56 F2 | 	cmps	local02, #1 wc
0b93c     9C FF 9F 3D |  if_ae	jmp	#LR__0910
0b940                 | ' 'for i=0 to 7 : print params(i): next i
0b940                 | ' if numpar<4 then params(3)=params(0) : params(4)=params(0) ' set wave and env # as chn#
0b940     A7 1E 02 FB | 	rdlong	local01, fp
0b944     04 1E 56 F2 | 	cmps	local01, #4 wc
0b948     24 00 90 3D |  if_ae	jmp	#LR__0911
0b94c     1C 4E 05 F1 | 	add	fp, #28
0b950     A7 1E 02 FB | 	rdlong	local01, fp
0b954     0C 4E 05 F1 | 	add	fp, #12
0b958     A7 1E 62 FC | 	wrlong	local01, fp
0b95c     0C 4E 85 F1 | 	sub	fp, #12
0b960     A7 1E 02 FB | 	rdlong	local01, fp
0b964     10 4E 05 F1 | 	add	fp, #16
0b968     A7 1E 62 FC | 	wrlong	local01, fp
0b96c     2C 4E 85 F1 | 	sub	fp, #44
0b970                 | LR__0911
0b970                 | ' if numpar<5 then params(4)=params(0) ' set wave and env # as chn#
0b970     A7 1E 02 FB | 	rdlong	local01, fp
0b974     05 1E 56 F2 | 	cmps	local01, #5 wc
0b978     1C 4E 05 C1 |  if_b	add	fp, #28
0b97c     A7 1E 02 CB |  if_b	rdlong	local01, fp
0b980     10 4E 05 C1 |  if_b	add	fp, #16
0b984     A7 1E 62 CC |  if_b	wrlong	local01, fp
0b988     2C 4E 85 C1 |  if_b	sub	fp, #44
0b98c     48 4E 05 F1 | 	add	fp, #72
0b990     A7 12 02 FB | 	rdlong	arg01, fp
0b994     18 4E 85 F1 | 	sub	fp, #24
0b998     A7 14 02 FB | 	rdlong	arg02, fp
0b99c     30 4E 85 F1 | 	sub	fp, #48
0b9a0     84 07 B1 FD | 	call	#__system___float_div
0b9a4     FD 12 02 F6 | 	mov	arg01, result1
0b9a8     01 14 06 F6 | 	mov	arg02, #1
0b9ac     3C 0A B1 FD | 	call	#__system___float_tointeger
0b9b0     FD 1E 02 F6 | 	mov	local01, result1
0b9b4     14 4E 05 F1 | 	add	fp, #20
0b9b8     A7 1E 62 FC | 	wrlong	local01, fp
0b9bc     24 4E 05 F1 | 	add	fp, #36
0b9c0     A7 14 02 FB | 	rdlong	arg02, fp
0b9c4     38 4E 85 F1 | 	sub	fp, #56
0b9c8     00 00 23 FF 
0b9cc     00 12 06 F6 | 	mov	arg01, ##1174405120
0b9d0     50 05 B1 FD | 	call	#__system___float_mul
0b9d4     FD 12 02 F6 | 	mov	arg01, result1
0b9d8     01 14 06 F6 | 	mov	arg02, #1
0b9dc     0C 0A B1 FD | 	call	#__system___float_tointeger
0b9e0     0D 1E C6 F9 | 	decod	local01, #13
0b9e4     FD 1E 02 F1 | 	add	local01, result1
0b9e8     18 4E 05 F1 | 	add	fp, #24
0b9ec     A7 1E 62 FC | 	wrlong	local01, fp
0b9f0     18 4E 85 F1 | 	sub	fp, #24
0b9f4     56 00 00 FF 
0b9f8     D4 E4 05 F1 | 	add	objptr, ##44244
0b9fc     F2 12 02 FB | 	rdlong	arg01, objptr
0ba00     56 00 00 FF 
0ba04     D4 E4 85 F1 | 	sub	objptr, ##44244
0ba08     14 01 B1 FD | 	call	#__system___float_fromuns
0ba0c     FD 1E 02 F6 | 	mov	local01, result1
0ba10     1C 4E 05 F1 | 	add	fp, #28
0ba14     A7 14 02 FB | 	rdlong	arg02, fp
0ba18     1C 4E 85 F1 | 	sub	fp, #28
0ba1c     00 40 21 FF 
0ba20     00 12 06 F6 | 	mov	arg01, ##1115684864
0ba24     FC 04 B1 FD | 	call	#__system___float_mul
0ba28     FD 14 02 F6 | 	mov	arg02, result1
0ba2c     0F 13 02 F6 | 	mov	arg01, local01
0ba30     20 01 B1 FD | 	call	#__system___float_add
0ba34     FD 12 02 F6 | 	mov	arg01, result1
0ba38     00 14 06 F6 | 	mov	arg02, #0
0ba3c     AC 09 B1 FD | 	call	#__system___float_tointeger
0ba40     08 4E 05 F1 | 	add	fp, #8
0ba44     A7 FA 61 FC | 	wrlong	result1, fp
0ba48     18 4E 05 F1 | 	add	fp, #24
0ba4c     A7 12 02 FB | 	rdlong	arg01, fp
0ba50     20 4E 85 F1 | 	sub	fp, #32
0ba54     F1 46 20 FF 
0ba58     6C 14 06 F6 | 	mov	arg02, ##1083040364
0ba5c     C4 04 B1 FD | 	call	#__system___float_mul
0ba60     FD 12 02 F6 | 	mov	arg01, result1
0ba64     01 14 06 F6 | 	mov	arg02, #1
0ba68     80 09 B1 FD | 	call	#__system___float_tointeger
0ba6c     10 4E 05 F1 | 	add	fp, #16
0ba70     A7 FA 61 FC | 	wrlong	result1, fp
0ba74                 | ' speed=round(speed_coeff/params(5))
0ba74                 | ' pan=8192+round(8192*params(7))
0ba74                 | ' base2=base+64*params(0)
0ba74                 | ' skip=round(params(1)*4.4338896)
0ba74                 | ' if params(3)<8 then 
0ba74     18 4E 05 F1 | 	add	fp, #24
0ba78     A7 12 02 FB | 	rdlong	arg01, fp
0ba7c     28 4E 85 F1 | 	sub	fp, #40
0ba80     00 80 20 FF 
0ba84     00 14 06 F6 | 	mov	arg02, ##1090519040
0ba88     01 16 06 F6 | 	mov	arg03, #1
0ba8c     C8 08 B1 FD | 	call	#__system___float_cmp
0ba90     00 FA 55 F2 | 	cmps	result1, #0 wc
0ba94     48 00 90 3D |  if_ae	jmp	#LR__0912
0ba98     08 4E 05 F1 | 	add	fp, #8
0ba9c     A7 1E 02 FB | 	rdlong	local01, fp
0baa0     08 1E 06 F1 | 	add	local01, #8
0baa4     14 4E 05 F1 | 	add	fp, #20
0baa8     A7 12 02 FB | 	rdlong	arg01, fp
0baac     1C 4E 85 F1 | 	sub	fp, #28
0bab0     01 14 06 F6 | 	mov	arg02, #1
0bab4     34 09 B1 FD | 	call	#__system___float_tointeger
0bab8     0B FA 65 F0 | 	shl	result1, #11
0babc     0C 00 00 FF 
0bac0     CC E4 05 F1 | 	add	objptr, ##6348
0bac4     F2 FA 01 F1 | 	add	result1, objptr
0bac8     0C 00 00 FF 
0bacc     CC E4 85 F1 | 	sub	objptr, ##6348
0bad0     00 00 60 FF 
0bad4     00 FA 05 F1 | 	add	result1, ##-1073741824
0bad8     0F FB 61 FC | 	wrlong	result1, local01
0badc     18 00 90 FD | 	jmp	#LR__0913
0bae0                 | LR__0912
0bae0     08 4E 05 F1 | 	add	fp, #8
0bae4     A7 12 02 FB | 	rdlong	arg01, fp
0bae8     08 4E 85 F1 | 	sub	fp, #8
0baec     08 12 06 F1 | 	add	arg01, #8
0baf0     00 00 E4 FF 
0baf4     09 01 68 FC | 	wrlong	##-939524096, arg01
0baf8                 | LR__0913
0baf8     08 4E 05 F1 | 	add	fp, #8
0bafc     A7 12 02 FB | 	rdlong	arg01, fp
0bb00     10 12 06 F1 | 	add	arg01, #16
0bb04     04 00 80 FF 
0bb08     09 01 68 FC | 	wrlong	##2048, arg01
0bb0c     A7 12 02 FB | 	rdlong	arg01, fp
0bb10     0C 12 06 F1 | 	add	arg01, #12
0bb14     09 01 68 FC | 	wrlong	#0, arg01
0bb18     A7 1E 02 FB | 	rdlong	local01, fp
0bb1c     14 1E 06 F1 | 	add	local01, #20
0bb20     1C 4E 05 F1 | 	add	fp, #28
0bb24     A7 14 02 FB | 	rdlong	arg02, fp
0bb28     24 4E 85 F1 | 	sub	fp, #36
0bb2c     00 3D 22 FF 
0bb30     00 12 06 F6 | 	mov	arg01, ##1148846080
0bb34     EC 03 B1 FD | 	call	#__system___float_mul
0bb38     FD 12 02 F6 | 	mov	arg01, result1
0bb3c     01 14 06 F6 | 	mov	arg02, #1
0bb40     A8 08 B1 FD | 	call	#__system___float_tointeger
0bb44     0F FB 51 FC | 	wrword	result1, local01
0bb48     08 4E 05 F1 | 	add	fp, #8
0bb4c     A7 12 02 FB | 	rdlong	arg01, fp
0bb50     16 12 06 F1 | 	add	arg01, #22
0bb54     10 4E 05 F1 | 	add	fp, #16
0bb58     A7 14 02 FB | 	rdlong	arg02, fp
0bb5c     09 15 52 FC | 	wrword	arg02, arg01
0bb60                 | '   
0bb60                 | ' lpoke base2+16,2048
0bb60                 | ' lpoke base2+12,0
0bb60                 | ' dpoke base2+20,round(1000*params(2))
0bb60                 | ' dpoke base2+22,pan
0bb60                 | ' if params(3)<8 then
0bb60     10 4E 05 F1 | 	add	fp, #16
0bb64     A7 12 02 FB | 	rdlong	arg01, fp
0bb68     28 4E 85 F1 | 	sub	fp, #40
0bb6c     00 80 20 FF 
0bb70     00 14 06 F6 | 	mov	arg02, ##1090519040
0bb74     01 16 06 F6 | 	mov	arg03, #1
0bb78     DC 07 B1 FD | 	call	#__system___float_cmp
0bb7c     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb80     2C 00 90 3D |  if_ae	jmp	#LR__0914
0bb84     08 4E 05 F1 | 	add	fp, #8
0bb88     A7 12 02 FB | 	rdlong	arg01, fp
0bb8c     18 12 06 F1 | 	add	arg01, #24
0bb90     09 79 58 FC | 	wrword	#60, arg01
0bb94     A7 12 02 FB | 	rdlong	arg01, fp
0bb98     1A 12 06 F1 | 	add	arg01, #26
0bb9c     08 4E 05 F1 | 	add	fp, #8
0bba0     A7 14 02 FB | 	rdlong	arg02, fp
0bba4     10 4E 85 F1 | 	sub	fp, #16
0bba8     09 15 52 FC | 	wrword	arg02, arg01
0bbac     48 00 90 FD | 	jmp	#LR__0915
0bbb0                 | LR__0914
0bbb0     08 4E 05 F1 | 	add	fp, #8
0bbb4     A7 1E 02 FB | 	rdlong	local01, fp
0bbb8     18 1E 06 F1 | 	add	local01, #24
0bbbc     18 4E 05 F1 | 	add	fp, #24
0bbc0     A7 14 02 FB | 	rdlong	arg02, fp
0bbc4     20 4E 85 F1 | 	sub	fp, #32
0bbc8     CF 2A 25 FF 
0bbcc     80 13 06 F6 | 	mov	arg01, ##1247125376
0bbd0     54 05 B1 FD | 	call	#__system___float_div
0bbd4     FD 12 02 F6 | 	mov	arg01, result1
0bbd8     01 14 06 F6 | 	mov	arg02, #1
0bbdc     0C 08 B1 FD | 	call	#__system___float_tointeger
0bbe0     0F FB 51 FC | 	wrword	result1, local01
0bbe4     08 4E 05 F1 | 	add	fp, #8
0bbe8     A7 12 02 FB | 	rdlong	arg01, fp
0bbec     08 4E 85 F1 | 	sub	fp, #8
0bbf0     1A 12 06 F1 | 	add	arg01, #26
0bbf4     09 01 5A FC | 	wrword	#256, arg01
0bbf8                 | LR__0915
0bbf8     08 4E 05 F1 | 	add	fp, #8
0bbfc     A7 12 02 FB | 	rdlong	arg01, fp
0bc00     1C 12 06 F1 | 	add	arg01, #28
0bc04     09 01 58 FC | 	wrword	#0, arg01
0bc08     A7 12 02 FB | 	rdlong	arg01, fp
0bc0c     20 12 06 F1 | 	add	arg01, #32
0bc10     09 01 68 FC | 	wrlong	#0, arg01
0bc14                 | ' dpoke base2+28,$4000_0000
0bc14                 | ' lpoke base2+32,0 
0bc14                 | ' if params(4)=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(params(4),0))
0bc14     24 4E 05 F1 | 	add	fp, #36
0bc18     A7 12 02 FB | 	rdlong	arg01, fp
0bc1c     2C 4E 85 F1 | 	sub	fp, #44
0bc20     00 80 20 FF 
0bc24     00 14 06 F6 | 	mov	arg02, ##1090519040
0bc28     01 16 06 F6 | 	mov	arg03, #1
0bc2c     28 07 B1 FD | 	call	#__system___float_cmp
0bc30     00 FA 0D F2 | 	cmp	result1, #0 wz
0bc34     18 00 90 5D |  if_ne	jmp	#LR__0916
0bc38     08 4E 05 F1 | 	add	fp, #8
0bc3c     A7 12 02 FB | 	rdlong	arg01, fp
0bc40     08 4E 85 F1 | 	sub	fp, #8
0bc44     24 12 06 F1 | 	add	arg01, #36
0bc48     09 01 68 FC | 	wrlong	#0, arg01
0bc4c     3C 00 90 FD | 	jmp	#LR__0917
0bc50                 | LR__0916
0bc50     08 4E 05 F1 | 	add	fp, #8
0bc54     A7 1E 02 FB | 	rdlong	local01, fp
0bc58     24 1E 06 F1 | 	add	local01, #36
0bc5c     24 4E 05 F1 | 	add	fp, #36
0bc60     A7 12 02 FB | 	rdlong	arg01, fp
0bc64     2C 4E 85 F1 | 	sub	fp, #44
0bc68     00 14 06 F6 | 	mov	arg02, #0
0bc6c     7C 07 B1 FD | 	call	#__system___float_tointeger
0bc70     09 FA 65 F0 | 	shl	result1, #9
0bc74     2C 00 00 FF 
0bc78     CC E4 05 F1 | 	add	objptr, ##22732
0bc7c     F2 FA 01 F1 | 	add	result1, objptr
0bc80     2C 00 00 FF 
0bc84     CC E4 85 F1 | 	sub	objptr, ##22732
0bc88     0F FB 61 FC | 	wrlong	result1, local01
0bc8c                 | LR__0917
0bc8c     08 4E 05 F1 | 	add	fp, #8
0bc90     A7 12 02 FB | 	rdlong	arg01, fp
0bc94     28 12 06 F1 | 	add	arg01, #40
0bc98     0C 4E 05 F1 | 	add	fp, #12
0bc9c     A7 14 02 FB | 	rdlong	arg02, fp
0bca0     09 15 62 FC | 	wrlong	arg02, arg01
0bca4     0C 4E 85 F1 | 	sub	fp, #12
0bca8     A7 12 02 FB | 	rdlong	arg01, fp
0bcac     2C 12 06 F1 | 	add	arg01, #44
0bcb0     09 FF 69 FC | 	wrlong	#255, arg01
0bcb4                 | ' lpoke base2+40,speed' speed
0bcb4                 | ' lpoke base2+44,255 'len
0bcb4                 | ' 
0bcb4                 | ' if params(6)>0 then waitms(round(params(6)))' : print "wait "; round(params(6)) : l
0bcb4     2C 4E 05 F1 | 	add	fp, #44
0bcb8     A7 12 02 FB | 	rdlong	arg01, fp
0bcbc     34 4E 85 F1 | 	sub	fp, #52
0bcc0     00 14 06 F6 | 	mov	arg02, #0
0bcc4     01 16 66 F6 | 	neg	arg03, #1
0bcc8     8C 06 B1 FD | 	call	#__system___float_cmp
0bccc     01 FA 55 F2 | 	cmps	result1, #1 wc
0bcd0     1C 00 90 CD |  if_b	jmp	#LR__0918
0bcd4     34 4E 05 F1 | 	add	fp, #52
0bcd8     A7 12 02 FB | 	rdlong	arg01, fp
0bcdc     34 4E 85 F1 | 	sub	fp, #52
0bce0     01 14 06 F6 | 	mov	arg02, #1
0bce4     04 07 B1 FD | 	call	#__system___float_tointeger
0bce8     FD 12 02 F6 | 	mov	arg01, result1
0bcec     3C DA B0 FD | 	call	#__system___waitms
0bcf0                 | LR__0918
0bcf0     A7 F0 03 F6 | 	mov	ptra, fp
0bcf4     B2 00 A0 FD | 	call	#popregs_
0bcf8                 | _do_play_ret
0bcf8     2D 00 64 FD | 	ret
0bcfc                 | 
0bcfc                 | ' 
0bcfc                 | ' 
0bcfc                 | ' 
0bcfc                 | ' sub do_defsnd
0bcfc                 | _do_defsnd
0bcfc     05 4A 05 F6 | 	mov	COUNT_, #5
0bd00     A8 00 A0 FD | 	call	#pushregs_
0bd04     84 F0 07 F1 | 	add	ptra, #132
0bd08     69 00 00 FF 
0bd0c     44 E5 05 F1 | 	add	objptr, ##54084
0bd10     F2 1A 02 FB | 	rdlong	arg05, objptr
0bd14     0D 19 02 F6 | 	mov	arg04, arg05
0bd18     01 18 66 F0 | 	shl	arg04, #1
0bd1c     0D 19 02 F1 | 	add	arg04, arg05
0bd20     02 18 66 F0 | 	shl	arg04, #2
0bd24     03 00 00 FF 
0bd28     04 E4 85 F1 | 	sub	objptr, ##1540
0bd2c     F2 18 02 F1 | 	add	arg04, objptr
0bd30     0C 1B 02 FB | 	rdlong	arg05, arg04
0bd34     A7 1A 62 FC | 	wrlong	arg05, fp
0bd38                 | ' 
0bd38                 | ' numpar=compiledline(lineptr_e).result.uresult
0bd38                 | ' 
0bd38                 | ' 
0bd38                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0bd38                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0bd38                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0bd38                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0bd38                 | ' 
0bd38                 | ' if numpar<2 then return
0bd38     02 1A 56 F2 | 	cmps	arg05, #2 wc
0bd3c     66 00 00 FF 
0bd40     40 E5 85 F1 | 	sub	objptr, ##52544
0bd44     2C 09 90 CD |  if_b	jmp	#LR__0944
0bd48                 | ' 
0bd48                 | '   
0bd48                 | ' if numpar=2 then
0bd48     A7 1A 02 FB | 	rdlong	arg05, fp
0bd4c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0bd50     98 03 90 5D |  if_ne	jmp	#LR__0927
0bd54     E0 DB BF FD | 	call	#_pop
0bd58     FF 1A 02 F6 | 	mov	arg05, result3
0bd5c     28 4E 05 F1 | 	add	fp, #40
0bd60     A7 FA 61 FC | 	wrlong	result1, fp
0bd64     04 4E 05 F1 | 	add	fp, #4
0bd68     A7 FC 61 FC | 	wrlong	result2, fp
0bd6c     04 4E 05 F1 | 	add	fp, #4
0bd70     A7 1A 62 FC | 	wrlong	arg05, fp
0bd74                 | '   t1=pop()
0bd74                 | '   if t1.result_type=result_string2 then 
0bd74     30 4E 85 F1 | 	sub	fp, #48
0bd78     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0bd7c     20 00 90 5D |  if_ne	jmp	#LR__0920
0bd80     28 4E 05 F1 | 	add	fp, #40
0bd84     A7 12 02 FB | 	rdlong	arg01, fp
0bd88     28 4E 85 F1 | 	sub	fp, #40
0bd8c     24 11 B0 FD | 	call	#_convertstring
0bd90     34 4E 05 F1 | 	add	fp, #52
0bd94     A7 FA 61 FC | 	wrlong	result1, fp
0bd98     34 4E 85 F1 | 	sub	fp, #52
0bd9c     40 00 90 FD | 	jmp	#LR__0923
0bda0                 | LR__0920
0bda0     30 4E 05 F1 | 	add	fp, #48
0bda4     A7 1A 02 FB | 	rdlong	arg05, fp
0bda8     30 4E 85 F1 | 	sub	fp, #48
0bdac     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0bdb0     18 00 90 5D |  if_ne	jmp	#LR__0921
0bdb4     28 4E 05 F1 | 	add	fp, #40
0bdb8     A7 1A 02 FB | 	rdlong	arg05, fp
0bdbc     0C 4E 05 F1 | 	add	fp, #12
0bdc0     A7 1A 62 FC | 	wrlong	arg05, fp
0bdc4     34 4E 85 F1 | 	sub	fp, #52
0bdc8     14 00 90 FD | 	jmp	#LR__0922
0bdcc                 | LR__0921
0bdcc     47 01 00 FF 
0bdd0     B0 1A 06 F6 | 	mov	arg05, ##@LR__4609
0bdd4     34 4E 05 F1 | 	add	fp, #52
0bdd8     A7 1A 62 FC | 	wrlong	arg05, fp
0bddc     34 4E 85 F1 | 	sub	fp, #52
0bde0                 | LR__0922
0bde0                 | LR__0923
0bde0                 | ' 
0bde0                 | '     
0bde0                 | '   if s<>"" then 
0bde0     34 4E 05 F1 | 	add	fp, #52
0bde4     A7 12 02 FB | 	rdlong	arg01, fp
0bde8     34 4E 85 F1 | 	sub	fp, #52
0bdec     47 01 00 FF 
0bdf0     B1 14 06 F6 | 	mov	arg02, ##@LR__4610
0bdf4     68 D6 B0 FD | 	call	#__system___string_cmp
0bdf8     00 FA 0D F2 | 	cmp	result1, #0 wz
0bdfc     88 01 90 AD |  if_e	jmp	#LR__0925
0be00     34 DB BF FD | 	call	#_pop
0be04     FF 1A 02 F6 | 	mov	arg05, result3
0be08     28 4E 05 F1 | 	add	fp, #40
0be0c     A7 FA 61 FC | 	wrlong	result1, fp
0be10     04 4E 05 F1 | 	add	fp, #4
0be14     A7 FC 61 FC | 	wrlong	result2, fp
0be18     04 4E 05 F1 | 	add	fp, #4
0be1c     A7 1A 62 FC | 	wrlong	arg05, fp
0be20     08 4E 85 F1 | 	sub	fp, #8
0be24     A7 12 02 F6 | 	mov	arg01, fp
0be28     28 4E 85 F1 | 	sub	fp, #40
0be2c     B8 54 B0 FD | 	call	#_converttoint
0be30     10 4E 05 F1 | 	add	fp, #16
0be34     A7 FA 61 FC | 	wrlong	result1, fp
0be38     10 4E 85 F1 | 	sub	fp, #16
0be3c                 | '     t1=pop()
0be3c                 | '     channel=converttoint(t1) 
0be3c                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0be3c     09 12 06 F6 | 	mov	arg01, #9
0be40     28 25 B1 FD | 	call	#__system__close
0be44     09 1E 06 F6 | 	mov	local01, #9
0be48     47 01 00 FF 
0be4c     B2 12 06 F6 | 	mov	arg01, ##@LR__4611
0be50     34 4E 05 F1 | 	add	fp, #52
0be54     A7 14 02 FB | 	rdlong	arg02, fp
0be58     34 4E 85 F1 | 	sub	fp, #52
0be5c     34 D6 B0 FD | 	call	#__system___string_concat
0be60     FD 14 02 F6 | 	mov	arg02, result1
0be64     0F 13 02 F6 | 	mov	arg01, local01
0be68     00 16 06 F6 | 	mov	arg03, #0
0be6c     CC E1 B0 FD | 	call	#__system___basic_open_string
0be70     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0be74     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0be78     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0be7c     7A 00 00 FF 
0be80     C4 E5 05 F1 | 	add	objptr, ##62916
0be84     F2 FA 61 FC | 	wrlong	result1, objptr
0be88                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0be88     7A 00 00 FF 
0be8c     C4 E5 85 F1 | 	sub	objptr, ##62916
0be90     B0 00 90 AD |  if_e	jmp	#LR__0924
0be94     00 12 06 F6 | 	mov	arg01, #0
0be98     A0 2E B1 FD | 	call	#__system___getiolock_0425
0be9c     FD 12 02 F6 | 	mov	arg01, result1
0bea0     94 D5 B0 FD | 	call	#__system___lockmem
0bea4     47 01 00 FF 
0bea8     BF 14 06 F6 | 	mov	arg02, ##@LR__4612
0beac     00 12 06 F6 | 	mov	arg01, #0
0beb0     00 16 06 F6 | 	mov	arg03, #0
0beb4     74 E2 B0 FD | 	call	#__system___basic_print_string
0beb8     7A 00 00 FF 
0bebc     C4 E5 05 F1 | 	add	objptr, ##62916
0bec0     F2 14 02 FB | 	rdlong	arg02, objptr
0bec4     7A 00 00 FF 
0bec8     C4 E5 85 F1 | 	sub	objptr, ##62916
0becc     00 12 06 F6 | 	mov	arg01, #0
0bed0     00 16 06 F6 | 	mov	arg03, #0
0bed4     0A 18 06 F6 | 	mov	arg04, #10
0bed8     94 E2 B0 FD | 	call	#__system___basic_print_integer
0bedc     47 01 00 FF 
0bee0     CD 14 06 F6 | 	mov	arg02, ##@LR__4613
0bee4     00 12 06 F6 | 	mov	arg01, #0
0bee8     00 16 06 F6 | 	mov	arg03, #0
0beec     3C E2 B0 FD | 	call	#__system___basic_print_string
0bef0     00 1E 06 F6 | 	mov	local01, #0
0bef4     7A 00 00 FF 
0bef8     C4 E5 05 F1 | 	add	objptr, ##62916
0befc     F2 12 02 FB | 	rdlong	arg01, objptr
0bf00     7A 00 00 FF 
0bf04     C4 E5 85 F1 | 	sub	objptr, ##62916
0bf08     2C FB B0 FD | 	call	#__system___strerror
0bf0c     FD 14 02 F6 | 	mov	arg02, result1
0bf10     0F 13 02 F6 | 	mov	arg01, local01
0bf14     00 16 06 F6 | 	mov	arg03, #0
0bf18     10 E2 B0 FD | 	call	#__system___basic_print_string
0bf1c     00 12 06 F6 | 	mov	arg01, #0
0bf20     0A 14 06 F6 | 	mov	arg02, #10
0bf24     00 16 06 F6 | 	mov	arg03, #0
0bf28     A8 E1 B0 FD | 	call	#__system___basic_print_char
0bf2c     00 12 06 F6 | 	mov	arg01, #0
0bf30     08 2E B1 FD | 	call	#__system___getiolock_0425
0bf34     FD 00 68 FC | 	wrlong	#0, result1
0bf38     09 12 06 F6 | 	mov	arg01, #9
0bf3c     2C 24 B1 FD | 	call	#__system__close
0bf40     30 07 90 FD | 	jmp	#LR__0944
0bf44                 | LR__0924
0bf44                 | '     get #9,17,samplebuf(channel,0),1024
0bf44     10 4E 05 F1 | 	add	fp, #16
0bf48     A7 16 02 FB | 	rdlong	arg03, fp
0bf4c     10 4E 85 F1 | 	sub	fp, #16
0bf50     0B 16 66 F0 | 	shl	arg03, #11
0bf54     0C 00 00 FF 
0bf58     CC E4 05 F1 | 	add	objptr, ##6348
0bf5c     F2 16 02 F1 | 	add	arg03, objptr
0bf60     09 12 06 F6 | 	mov	arg01, #9
0bf64     11 14 06 F6 | 	mov	arg02, #17
0bf68     0A 18 C6 F9 | 	decod	arg04, #10
0bf6c     02 1A 06 F6 | 	mov	arg05, #2
0bf70     0C 00 00 FF 
0bf74     CC E4 85 F1 | 	sub	objptr, ##6348
0bf78     C0 E2 B0 FD | 	call	#__system___basic_get
0bf7c                 | '     close #9
0bf7c     09 12 06 F6 | 	mov	arg01, #9
0bf80     E8 23 B1 FD | 	call	#__system__close
0bf84                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bf84                 | '     return
0bf84     EC 06 90 FD | 	jmp	#LR__0944
0bf88                 | LR__0925
0bf88     28 4E 05 F1 | 	add	fp, #40
0bf8c     A7 12 02 F6 | 	mov	arg01, fp
0bf90     28 4E 85 F1 | 	sub	fp, #40
0bf94     50 53 B0 FD | 	call	#_converttoint
0bf98     FD 1E 02 F6 | 	mov	local01, result1
0bf9c     0C 4E 05 F1 | 	add	fp, #12
0bfa0     A7 1E 62 FC | 	wrlong	local01, fp
0bfa4     0C 4E 85 F1 | 	sub	fp, #12
0bfa8                 | '   
0bfa8                 | '   par=converttoint(t1)  : print par
0bfa8     00 12 06 F6 | 	mov	arg01, #0
0bfac     8C 2D B1 FD | 	call	#__system___getiolock_0425
0bfb0     FD 12 02 F6 | 	mov	arg01, result1
0bfb4     80 D4 B0 FD | 	call	#__system___lockmem
0bfb8     0C 4E 05 F1 | 	add	fp, #12
0bfbc     A7 14 02 FB | 	rdlong	arg02, fp
0bfc0     0C 4E 85 F1 | 	sub	fp, #12
0bfc4     00 12 06 F6 | 	mov	arg01, #0
0bfc8     00 16 06 F6 | 	mov	arg03, #0
0bfcc     0A 18 06 F6 | 	mov	arg04, #10
0bfd0     9C E1 B0 FD | 	call	#__system___basic_print_integer
0bfd4     00 12 06 F6 | 	mov	arg01, #0
0bfd8     0A 14 06 F6 | 	mov	arg02, #10
0bfdc     00 16 06 F6 | 	mov	arg03, #0
0bfe0     F0 E0 B0 FD | 	call	#__system___basic_print_char
0bfe4     00 12 06 F6 | 	mov	arg01, #0
0bfe8     50 2D B1 FD | 	call	#__system___getiolock_0425
0bfec     FD 00 68 FC | 	wrlong	#0, result1
0bff0     44 D9 BF FD | 	call	#_pop
0bff4     FF 1E 02 F6 | 	mov	local01, result3
0bff8     28 4E 05 F1 | 	add	fp, #40
0bffc     A7 FA 61 FC | 	wrlong	result1, fp
0c000     04 4E 05 F1 | 	add	fp, #4
0c004     A7 FC 61 FC | 	wrlong	result2, fp
0c008     04 4E 05 F1 | 	add	fp, #4
0c00c     A7 1E 62 FC | 	wrlong	local01, fp
0c010     08 4E 85 F1 | 	sub	fp, #8
0c014     A7 12 02 F6 | 	mov	arg01, fp
0c018     28 4E 85 F1 | 	sub	fp, #40
0c01c     C8 52 B0 FD | 	call	#_converttoint
0c020     10 4E 05 F1 | 	add	fp, #16
0c024     A7 FA 61 FC | 	wrlong	result1, fp
0c028                 | '   t1=pop()
0c028                 | '   channel=converttoint(t1)  
0c028                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0c028     04 4E 85 F1 | 	sub	fp, #4
0c02c     A7 1E 0A FB | 	rdlong	local01, fp wz
0c030     0C 4E 85 F1 | 	sub	fp, #12
0c034     3C 06 90 5D |  if_ne	jmp	#LR__0944
0c038     04 4E 05 F1 | 	add	fp, #4
0c03c     A7 00 68 FC | 	wrlong	#0, fp
0c040     04 4E 85 F1 | 	sub	fp, #4
0c044                 | LR__0926
0c044     10 4E 05 F1 | 	add	fp, #16
0c048     A7 1E 02 FB | 	rdlong	local01, fp
0c04c     0B 1E 66 F0 | 	shl	local01, #11
0c050     0C 00 00 FF 
0c054     CC E4 05 F1 | 	add	objptr, ##6348
0c058     F2 1E 02 F1 | 	add	local01, objptr
0c05c     0C 4E 85 F1 | 	sub	fp, #12
0c060     A7 12 02 FB | 	rdlong	arg01, fp
0c064     09 21 02 F6 | 	mov	local02, arg01
0c068     01 20 66 F0 | 	shl	local02, #1
0c06c     0F 21 02 F1 | 	add	local02, local01
0c070     04 4E 85 F1 | 	sub	fp, #4
0c074     0C 00 00 FF 
0c078     CC E4 85 F1 | 	sub	objptr, ##6348
0c07c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c080     1F 22 C6 C9 |  if_b	decod	local03, #31
0c084     00 22 06 36 |  if_ae	mov	local03, #0
0c088     94 FA B0 FD | 	call	#__system___float_fromuns
0c08c     11 FB 61 F5 | 	xor	result1, local03
0c090     FD 14 02 F6 | 	mov	arg02, result1
0c094     87 E4 1D FF 
0c098     DB 13 06 F6 | 	mov	arg01, ##1003032539
0c09c     84 FE B0 FD | 	call	#__system___float_mul
0c0a0     FD 12 02 F6 | 	mov	arg01, result1
0c0a4     B8 07 B1 FD | 	call	#__system____builtin_sinf
0c0a8     FD 14 02 F6 | 	mov	arg02, result1
0c0ac     58 7F 23 FF 
0c0b0     00 12 06 F6 | 	mov	arg01, ##1191096320
0c0b4     6C FE B0 FD | 	call	#__system___float_mul
0c0b8     FD 12 02 F6 | 	mov	arg01, result1
0c0bc     01 14 06 F6 | 	mov	arg02, #1
0c0c0     28 03 B1 FD | 	call	#__system___float_tointeger
0c0c4     10 FB 51 FC | 	wrword	result1, local02
0c0c8     04 4E 05 F1 | 	add	fp, #4
0c0cc     A7 20 02 FB | 	rdlong	local02, fp
0c0d0     01 20 06 F1 | 	add	local02, #1
0c0d4     A7 20 62 FC | 	wrlong	local02, fp
0c0d8     04 4E 85 F1 | 	sub	fp, #4
0c0dc     02 00 00 FF 
0c0e0     00 20 56 F2 | 	cmps	local02, ##1024 wc
0c0e4     5C FF 9F CD |  if_b	jmp	#LR__0926
0c0e8                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0c0e8                 | '   return
0c0e8     88 05 90 FD | 	jmp	#LR__0944
0c0ec                 | LR__0927
0c0ec                 | ' for i=0 to 15 : harm(i)=0: next i  
0c0ec     04 4E 05 F1 | 	add	fp, #4
0c0f0     A7 00 68 FC | 	wrlong	#0, fp
0c0f4     97 16 48 FB | 	callpa	#(@LR__0929-@LR__0928)>>2,fcache_load_ptr_
0c0f8                 | LR__0928
0c0f8     A7 1E 02 FB | 	rdlong	local01, fp
0c0fc     02 1E 66 F0 | 	shl	local01, #2
0c100     34 4E 05 F1 | 	add	fp, #52
0c104     A7 1E 02 F1 | 	add	local01, fp
0c108     0F 01 68 FC | 	wrlong	#0, local01
0c10c     34 4E 85 F1 | 	sub	fp, #52
0c110     A7 1E 02 FB | 	rdlong	local01, fp
0c114     01 1E 06 F1 | 	add	local01, #1
0c118     A7 1E 62 FC | 	wrlong	local01, fp
0c11c     10 1E 56 F2 | 	cmps	local01, #16 wc
0c120     D4 FF 9F CD |  if_b	jmp	#LR__0928
0c124                 | LR__0929
0c124     04 4E 85 F1 | 	sub	fp, #4
0c128                 | ' for i=numpar to 2 step -1 
0c128     A7 1E 02 FB | 	rdlong	local01, fp
0c12c     04 4E 05 F1 | 	add	fp, #4
0c130     A7 1E 62 FC | 	wrlong	local01, fp
0c134     04 4E 85 F1 | 	sub	fp, #4
0c138                 | LR__0930
0c138     FC D7 BF FD | 	call	#_pop
0c13c     28 4E 05 F1 | 	add	fp, #40
0c140     A7 FA 61 FC | 	wrlong	result1, fp
0c144     04 4E 05 F1 | 	add	fp, #4
0c148     A7 FC 61 FC | 	wrlong	result2, fp
0c14c     04 4E 05 F1 | 	add	fp, #4
0c150     A7 FE 61 FC | 	wrlong	result3, fp
0c154     2C 4E 85 F1 | 	sub	fp, #44
0c158     A7 1E 02 FB | 	rdlong	local01, fp
0c15c     02 1E 86 F1 | 	sub	local01, #2
0c160     02 1E 66 F0 | 	shl	local01, #2
0c164     34 4E 05 F1 | 	add	fp, #52
0c168     A7 1E 02 F1 | 	add	local01, fp
0c16c     10 4E 85 F1 | 	sub	fp, #16
0c170     A7 12 02 F6 | 	mov	arg01, fp
0c174     28 4E 85 F1 | 	sub	fp, #40
0c178     18 52 B0 FD | 	call	#_converttofloat
0c17c     0F FB 61 FC | 	wrlong	result1, local01
0c180     04 4E 05 F1 | 	add	fp, #4
0c184     A7 1E 02 FB | 	rdlong	local01, fp
0c188     01 1E 86 F1 | 	sub	local01, #1
0c18c     A7 1E 62 FC | 	wrlong	local01, fp
0c190     04 4E 85 F1 | 	sub	fp, #4
0c194     02 1E 56 F2 | 	cmps	local01, #2 wc
0c198     9C FF 9F 3D |  if_ae	jmp	#LR__0930
0c19c     98 D7 BF FD | 	call	#_pop
0c1a0     FF 1E 02 F6 | 	mov	local01, result3
0c1a4     28 4E 05 F1 | 	add	fp, #40
0c1a8     A7 FA 61 FC | 	wrlong	result1, fp
0c1ac     04 4E 05 F1 | 	add	fp, #4
0c1b0     A7 FC 61 FC | 	wrlong	result2, fp
0c1b4     04 4E 05 F1 | 	add	fp, #4
0c1b8     A7 1E 62 FC | 	wrlong	local01, fp
0c1bc     08 4E 85 F1 | 	sub	fp, #8
0c1c0     A7 12 02 F6 | 	mov	arg01, fp
0c1c4     28 4E 85 F1 | 	sub	fp, #40
0c1c8     1C 51 B0 FD | 	call	#_converttoint
0c1cc     FD 1E 02 F6 | 	mov	local01, result1
0c1d0     10 4E 05 F1 | 	add	fp, #16
0c1d4     A7 1E 62 FC | 	wrlong	local01, fp
0c1d8     10 4E 85 F1 | 	sub	fp, #16
0c1dc                 | ' t1=pop()
0c1dc                 | ' channel=converttoint(t1) : print channel
0c1dc     00 12 06 F6 | 	mov	arg01, #0
0c1e0     58 2B B1 FD | 	call	#__system___getiolock_0425
0c1e4     FD 12 02 F6 | 	mov	arg01, result1
0c1e8     4C D2 B0 FD | 	call	#__system___lockmem
0c1ec     10 4E 05 F1 | 	add	fp, #16
0c1f0     A7 14 02 FB | 	rdlong	arg02, fp
0c1f4     10 4E 85 F1 | 	sub	fp, #16
0c1f8     00 12 06 F6 | 	mov	arg01, #0
0c1fc     00 16 06 F6 | 	mov	arg03, #0
0c200     0A 18 06 F6 | 	mov	arg04, #10
0c204     68 DF B0 FD | 	call	#__system___basic_print_integer
0c208     00 12 06 F6 | 	mov	arg01, #0
0c20c     0A 14 06 F6 | 	mov	arg02, #10
0c210     00 16 06 F6 | 	mov	arg03, #0
0c214     BC DE B0 FD | 	call	#__system___basic_print_char
0c218     00 12 06 F6 | 	mov	arg01, #0
0c21c     1C 2B B1 FD | 	call	#__system___getiolock_0425
0c220     FD 00 68 FC | 	wrlong	#0, result1
0c224                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0c224     08 4E 05 F1 | 	add	fp, #8
0c228     02 00 80 FF 
0c22c     A7 00 68 FC | 	wrlong	##1024, fp
0c230     08 4E 85 F1 | 	sub	fp, #8
0c234     0C 00 00 FF 
0c238     CC E4 05 F1 | 	add	objptr, ##6348
0c23c     97 18 48 FB | 	callpa	#(@LR__0933-@LR__0931)>>2,fcache_load_ptr_
0c240                 | LR__0931
0c240     02 00 00 FF 
0c244     00 14 DC FC | 	rep	@LR__0934, ##1024
0c248                 | LR__0932
0c248     10 4E 05 F1 | 	add	fp, #16
0c24c     A7 20 02 FB | 	rdlong	local02, fp
0c250     0B 20 66 F0 | 	shl	local02, #11
0c254     F2 20 02 F1 | 	add	local02, objptr
0c258     0C 4E 85 F1 | 	sub	fp, #12
0c25c     A7 1E 02 FB | 	rdlong	local01, fp
0c260     04 4E 85 F1 | 	sub	fp, #4
0c264     01 1E 66 F0 | 	shl	local01, #1
0c268     10 1F 02 F1 | 	add	local01, local02
0c26c     0F 01 58 FC | 	wrword	#0, local01
0c270                 | LR__0933
0c270                 | LR__0934
0c270     0C 00 00 FF 
0c274     CC E4 85 F1 | 	sub	objptr, ##6348
0c278     1C 4E 05 F1 | 	add	fp, #28
0c27c     A7 00 68 FC | 	wrlong	#0, fp
0c280                 | ' max=0
0c280                 | ' if harm(0)<0 then
0c280     1C 4E 05 F1 | 	add	fp, #28
0c284     A7 12 02 FB | 	rdlong	arg01, fp
0c288     38 4E 85 F1 | 	sub	fp, #56
0c28c     00 14 06 F6 | 	mov	arg02, #0
0c290     01 16 06 F6 | 	mov	arg03, #1
0c294     C0 00 B1 FD | 	call	#__system___float_cmp
0c298     00 FA 55 F2 | 	cmps	result1, #0 wc
0c29c     04 01 90 3D |  if_ae	jmp	#LR__0937
0c2a0     38 4E 05 F1 | 	add	fp, #56
0c2a4     A7 FA 01 FB | 	rdlong	result1, fp
0c2a8     1F FA 05 F4 | 	bitl	result1, #31
0c2ac     24 4E 85 F1 | 	sub	fp, #36
0c2b0     A7 FA 61 FC | 	wrlong	result1, fp
0c2b4     28 4E 05 F1 | 	add	fp, #40
0c2b8     A7 FA 01 FB | 	rdlong	result1, fp
0c2bc     1F FA 05 F4 | 	bitl	result1, #31
0c2c0     24 4E 85 F1 | 	sub	fp, #36
0c2c4     A7 FA 61 FC | 	wrlong	result1, fp
0c2c8     20 4E 05 F1 | 	add	fp, #32
0c2cc     00 C0 9F FF 
0c2d0     A7 00 68 FC | 	wrlong	##1065353216, fp
0c2d4     24 4E 85 F1 | 	sub	fp, #36
0c2d8     A7 1E 02 FB | 	rdlong	local01, fp
0c2dc     28 4E 05 F1 | 	add	fp, #40
0c2e0     A7 1E 62 FC | 	wrlong	local01, fp
0c2e4     24 4E 85 F1 | 	sub	fp, #36
0c2e8     A7 1E 02 FB | 	rdlong	local01, fp
0c2ec     28 4E 05 F1 | 	add	fp, #40
0c2f0     A7 1E 62 FC | 	wrlong	local01, fp
0c2f4                 | '   harm(0)=1
0c2f4                 | '   harm(1)=even
0c2f4                 | '   harm(2)=odd
0c2f4                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0c2f4     3C 4E 85 F1 | 	sub	fp, #60
0c2f8     A7 06 68 FC | 	wrlong	#3, fp
0c2fc                 | LR__0935
0c2fc     A7 1A 02 FB | 	rdlong	arg05, fp
0c300     0D 25 02 F6 | 	mov	local04, arg05
0c304     02 24 66 F0 | 	shl	local04, #2
0c308     34 4E 05 F1 | 	add	fp, #52
0c30c     A7 24 02 F1 | 	add	local04, fp
0c310     02 1A 86 F1 | 	sub	arg05, #2
0c314     02 1A 66 F0 | 	shl	arg05, #2
0c318     A7 1A 02 F1 | 	add	arg05, fp
0c31c     0D 13 02 FB | 	rdlong	arg01, arg05
0c320     24 4E 85 F1 | 	sub	fp, #36
0c324     A7 14 02 FB | 	rdlong	arg02, fp
0c328     14 4E 85 F1 | 	sub	fp, #20
0c32c     F4 FB B0 FD | 	call	#__system___float_mul
0c330     12 FB 61 FC | 	wrlong	result1, local04
0c334     04 4E 05 F1 | 	add	fp, #4
0c338     A7 26 02 FB | 	rdlong	local05, fp
0c33c     02 26 06 F1 | 	add	local05, #2
0c340     A7 26 62 FC | 	wrlong	local05, fp
0c344     10 26 56 F2 | 	cmps	local05, #16 wc
0c348     B0 FF 9F CD |  if_b	jmp	#LR__0935
0c34c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0c34c     A7 08 68 FC | 	wrlong	#4, fp
0c350                 | LR__0936
0c350     A7 26 02 FB | 	rdlong	local05, fp
0c354     13 25 02 F6 | 	mov	local04, local05
0c358     02 24 66 F0 | 	shl	local04, #2
0c35c     34 4E 05 F1 | 	add	fp, #52
0c360     A7 24 02 F1 | 	add	local04, fp
0c364     02 26 86 F1 | 	sub	local05, #2
0c368     02 26 66 F0 | 	shl	local05, #2
0c36c     A7 26 02 F1 | 	add	local05, fp
0c370     13 13 02 FB | 	rdlong	arg01, local05
0c374     20 4E 85 F1 | 	sub	fp, #32
0c378     A7 14 02 FB | 	rdlong	arg02, fp
0c37c     18 4E 85 F1 | 	sub	fp, #24
0c380     A0 FB B0 FD | 	call	#__system___float_mul
0c384     12 FB 61 FC | 	wrlong	result1, local04
0c388     04 4E 05 F1 | 	add	fp, #4
0c38c     A7 26 02 FB | 	rdlong	local05, fp
0c390     02 26 06 F1 | 	add	local05, #2
0c394     A7 26 62 FC | 	wrlong	local05, fp
0c398     0F 26 56 F2 | 	cmps	local05, #15 wc
0c39c     B0 FF 9F CD |  if_b	jmp	#LR__0936
0c3a0     04 4E 85 F1 | 	sub	fp, #4
0c3a4                 | LR__0937
0c3a4                 | ' if harm(0)>=0 then ' synthesize with harmonics
0c3a4     38 4E 05 F1 | 	add	fp, #56
0c3a8     A7 12 02 FB | 	rdlong	arg01, fp
0c3ac     38 4E 85 F1 | 	sub	fp, #56
0c3b0     00 14 06 F6 | 	mov	arg02, #0
0c3b4     01 16 66 F6 | 	neg	arg03, #1
0c3b8     9C FF B0 FD | 	call	#__system___float_cmp
0c3bc     00 FA 55 F2 | 	cmps	result1, #0 wc
0c3c0     B0 02 90 CD |  if_b	jmp	#LR__0943
0c3c4                 | '   for i=0 to 1023
0c3c4     04 4E 05 F1 | 	add	fp, #4
0c3c8     A7 00 68 FC | 	wrlong	#0, fp
0c3cc     04 4E 85 F1 | 	sub	fp, #4
0c3d0                 | LR__0938
0c3d0     20 4E 05 F1 | 	add	fp, #32
0c3d4     A7 00 68 FC | 	wrlong	#0, fp
0c3d8                 | '     spl=0
0c3d8                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0c3d8     18 4E 85 F1 | 	sub	fp, #24
0c3dc     A7 00 68 FC | 	wrlong	#0, fp
0c3e0                 | LR__0939
0c3e0     A7 24 02 FB | 	rdlong	local04, fp
0c3e4     02 24 66 F0 | 	shl	local04, #2
0c3e8     30 4E 05 F1 | 	add	fp, #48
0c3ec     A7 24 02 F1 | 	add	local04, fp
0c3f0     12 27 02 FB | 	rdlong	local05, local04
0c3f4     87 E4 1D FF 
0c3f8     DB 25 06 F6 | 	mov	local04, ##1003032539
0c3fc     34 4E 85 F1 | 	sub	fp, #52
0c400     A7 12 02 FB | 	rdlong	arg01, fp
0c404     04 4E 85 F1 | 	sub	fp, #4
0c408     09 13 52 F6 | 	abs	arg01, arg01 wc
0c40c     1F 22 C6 C9 |  if_b	decod	local03, #31
0c410     00 22 06 36 |  if_ae	mov	local03, #0
0c414     08 F7 B0 FD | 	call	#__system___float_fromuns
0c418     11 FB 61 F5 | 	xor	result1, local03
0c41c     FD 14 02 F6 | 	mov	arg02, result1
0c420     12 13 02 F6 | 	mov	arg01, local04
0c424     FC FA B0 FD | 	call	#__system___float_mul
0c428     FD 24 02 F6 | 	mov	local04, result1
0c42c     08 4E 05 F1 | 	add	fp, #8
0c430     A7 12 02 FB | 	rdlong	arg01, fp
0c434     08 4E 85 F1 | 	sub	fp, #8
0c438     01 12 06 F1 | 	add	arg01, #1
0c43c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c440     1F 22 C6 C9 |  if_b	decod	local03, #31
0c444     00 22 06 36 |  if_ae	mov	local03, #0
0c448     D4 F6 B0 FD | 	call	#__system___float_fromuns
0c44c     11 FB 61 F5 | 	xor	result1, local03
0c450     FD 14 02 F6 | 	mov	arg02, result1
0c454     12 13 02 F6 | 	mov	arg01, local04
0c458     C8 FA B0 FD | 	call	#__system___float_mul
0c45c     FD 12 02 F6 | 	mov	arg01, result1
0c460     FC 03 B1 FD | 	call	#__system____builtin_sinf
0c464     FD 14 02 F6 | 	mov	arg02, result1
0c468     13 13 02 F6 | 	mov	arg01, local05
0c46c     B4 FA B0 FD | 	call	#__system___float_mul
0c470     FD 14 02 F6 | 	mov	arg02, result1
0c474     20 4E 05 F1 | 	add	fp, #32
0c478     A7 12 02 FB | 	rdlong	arg01, fp
0c47c     20 4E 85 F1 | 	sub	fp, #32
0c480     D0 F6 B0 FD | 	call	#__system___float_add
0c484     20 4E 05 F1 | 	add	fp, #32
0c488     A7 FA 61 FC | 	wrlong	result1, fp
0c48c     18 4E 85 F1 | 	sub	fp, #24
0c490     A7 16 02 FB | 	rdlong	arg03, fp
0c494     01 16 06 F1 | 	add	arg03, #1
0c498     A7 16 62 FC | 	wrlong	arg03, fp
0c49c     10 16 56 F2 | 	cmps	arg03, #16 wc
0c4a0     3C FF 9F CD |  if_b	jmp	#LR__0939
0c4a4                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0c4a4     18 4E 05 F1 | 	add	fp, #24
0c4a8     A7 12 02 FB | 	rdlong	arg01, fp
0c4ac     1F 12 06 F4 | 	bitl	arg01, #31
0c4b0     04 4E 85 F1 | 	sub	fp, #4
0c4b4     A7 14 02 FB | 	rdlong	arg02, fp
0c4b8     1C 4E 85 F1 | 	sub	fp, #28
0c4bc     01 16 66 F6 | 	neg	arg03, #1
0c4c0     94 FE B0 FD | 	call	#__system___float_cmp
0c4c4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c4c8     18 00 90 CD |  if_b	jmp	#LR__0940
0c4cc     20 4E 05 F1 | 	add	fp, #32
0c4d0     A7 FA 01 FB | 	rdlong	result1, fp
0c4d4     1F FA 05 F4 | 	bitl	result1, #31
0c4d8     04 4E 85 F1 | 	sub	fp, #4
0c4dc     A7 FA 61 FC | 	wrlong	result1, fp
0c4e0     1C 4E 85 F1 | 	sub	fp, #28
0c4e4                 | LR__0940
0c4e4     04 4E 05 F1 | 	add	fp, #4
0c4e8     A7 26 02 FB | 	rdlong	local05, fp
0c4ec     01 26 06 F1 | 	add	local05, #1
0c4f0     A7 26 62 FC | 	wrlong	local05, fp
0c4f4     04 4E 85 F1 | 	sub	fp, #4
0c4f8     02 00 00 FF 
0c4fc     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c500     CC FE 9F CD |  if_b	jmp	#LR__0938
0c504                 | '   for i=0 to 1023
0c504     04 4E 05 F1 | 	add	fp, #4
0c508     A7 00 68 FC | 	wrlong	#0, fp
0c50c     04 4E 85 F1 | 	sub	fp, #4
0c510                 | LR__0941
0c510     20 4E 05 F1 | 	add	fp, #32
0c514     A7 00 68 FC | 	wrlong	#0, fp
0c518                 | '     spl=0
0c518                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0c518     18 4E 85 F1 | 	sub	fp, #24
0c51c     A7 00 68 FC | 	wrlong	#0, fp
0c520                 | LR__0942
0c520     A7 26 02 FB | 	rdlong	local05, fp
0c524     02 26 66 F0 | 	shl	local05, #2
0c528     30 4E 05 F1 | 	add	fp, #48
0c52c     A7 26 02 F1 | 	add	local05, fp
0c530     13 27 02 FB | 	rdlong	local05, local05
0c534     1C 4E 85 F1 | 	sub	fp, #28
0c538     A7 14 02 FB | 	rdlong	arg02, fp
0c53c     1C 4E 85 F1 | 	sub	fp, #28
0c540     58 7F 23 FF 
0c544     00 12 06 F6 | 	mov	arg01, ##1191096320
0c548     DC FB B0 FD | 	call	#__system___float_div
0c54c     FD 14 02 F6 | 	mov	arg02, result1
0c550     13 13 02 F6 | 	mov	arg01, local05
0c554     CC F9 B0 FD | 	call	#__system___float_mul
0c558     FD 26 02 F6 | 	mov	local05, result1
0c55c     87 E4 1D FF 
0c560     DB 25 06 F6 | 	mov	local04, ##1003032539
0c564     04 4E 05 F1 | 	add	fp, #4
0c568     A7 12 02 FB | 	rdlong	arg01, fp
0c56c     04 4E 85 F1 | 	sub	fp, #4
0c570     09 13 52 F6 | 	abs	arg01, arg01 wc
0c574     1F 22 C6 C9 |  if_b	decod	local03, #31
0c578     00 22 06 36 |  if_ae	mov	local03, #0
0c57c     A0 F5 B0 FD | 	call	#__system___float_fromuns
0c580     11 FB 61 F5 | 	xor	result1, local03
0c584     FD 14 02 F6 | 	mov	arg02, result1
0c588     12 13 02 F6 | 	mov	arg01, local04
0c58c     94 F9 B0 FD | 	call	#__system___float_mul
0c590     FD 24 02 F6 | 	mov	local04, result1
0c594     08 4E 05 F1 | 	add	fp, #8
0c598     A7 12 02 FB | 	rdlong	arg01, fp
0c59c     08 4E 85 F1 | 	sub	fp, #8
0c5a0     01 12 06 F1 | 	add	arg01, #1
0c5a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c5a8     1F 22 C6 C9 |  if_b	decod	local03, #31
0c5ac     00 22 06 36 |  if_ae	mov	local03, #0
0c5b0     6C F5 B0 FD | 	call	#__system___float_fromuns
0c5b4     11 FB 61 F5 | 	xor	result1, local03
0c5b8     FD 14 02 F6 | 	mov	arg02, result1
0c5bc     12 13 02 F6 | 	mov	arg01, local04
0c5c0     60 F9 B0 FD | 	call	#__system___float_mul
0c5c4     FD 12 02 F6 | 	mov	arg01, result1
0c5c8     94 02 B1 FD | 	call	#__system____builtin_sinf
0c5cc     FD 14 02 F6 | 	mov	arg02, result1
0c5d0     13 13 02 F6 | 	mov	arg01, local05
0c5d4     4C F9 B0 FD | 	call	#__system___float_mul
0c5d8     FD 14 02 F6 | 	mov	arg02, result1
0c5dc     20 4E 05 F1 | 	add	fp, #32
0c5e0     A7 12 02 FB | 	rdlong	arg01, fp
0c5e4     20 4E 85 F1 | 	sub	fp, #32
0c5e8     68 F5 B0 FD | 	call	#__system___float_add
0c5ec     20 4E 05 F1 | 	add	fp, #32
0c5f0     A7 FA 61 FC | 	wrlong	result1, fp
0c5f4     18 4E 85 F1 | 	sub	fp, #24
0c5f8     A7 26 02 FB | 	rdlong	local05, fp
0c5fc     01 26 06 F1 | 	add	local05, #1
0c600     A7 26 62 FC | 	wrlong	local05, fp
0c604     10 26 56 F2 | 	cmps	local05, #16 wc
0c608     14 FF 9F CD |  if_b	jmp	#LR__0942
0c60c     08 4E 05 F1 | 	add	fp, #8
0c610     A7 26 02 FB | 	rdlong	local05, fp
0c614     0B 26 66 F0 | 	shl	local05, #11
0c618     0C 00 00 FF 
0c61c     CC E4 05 F1 | 	add	objptr, ##6348
0c620     F2 26 02 F1 | 	add	local05, objptr
0c624     0C 4E 85 F1 | 	sub	fp, #12
0c628     A7 20 02 FB | 	rdlong	local02, fp
0c62c     01 20 66 F0 | 	shl	local02, #1
0c630     13 21 02 F1 | 	add	local02, local05
0c634     1C 4E 05 F1 | 	add	fp, #28
0c638     A7 12 02 FB | 	rdlong	arg01, fp
0c63c     20 4E 85 F1 | 	sub	fp, #32
0c640     0C 00 00 FF 
0c644     CC E4 85 F1 | 	sub	objptr, ##6348
0c648     01 14 06 F6 | 	mov	arg02, #1
0c64c     9C FD B0 FD | 	call	#__system___float_tointeger
0c650     10 FB 51 FC | 	wrword	result1, local02
0c654     04 4E 05 F1 | 	add	fp, #4
0c658     A7 26 02 FB | 	rdlong	local05, fp
0c65c     01 26 06 F1 | 	add	local05, #1
0c660     A7 26 62 FC | 	wrlong	local05, fp
0c664     04 4E 85 F1 | 	sub	fp, #4
0c668     02 00 00 FF 
0c66c     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c670     9C FE 9F CD |  if_b	jmp	#LR__0941
0c674                 | LR__0943
0c674                 | LR__0944
0c674     A7 F0 03 F6 | 	mov	ptra, fp
0c678     B2 00 A0 FD | 	call	#popregs_
0c67c                 | _do_defsnd_ret
0c67c     2D 00 64 FD | 	ret
0c680                 | 
0c680                 | ' 
0c680                 | ' ' ---------------  List the program. 
0c680                 | ' 
0c680                 | ' sub do_list
0c680                 | _do_list
0c680     02 4A 05 F6 | 	mov	COUNT_, #2
0c684     A8 00 A0 FD | 	call	#pushregs_
0c688     B8 F0 07 F1 | 	add	ptra, #184
0c68c     04 4E 05 F1 | 	add	fp, #4
0c690     A7 00 68 FC | 	wrlong	#0, fp
0c694     04 4E 05 F1 | 	add	fp, #4
0c698     FF FF BF FF 
0c69c     A7 FE 6B FC | 	wrlong	##2147483647, fp
0c6a0     08 4E 85 F1 | 	sub	fp, #8
0c6a4     69 00 00 FF 
0c6a8     44 E5 05 F1 | 	add	objptr, ##54084
0c6ac     F2 1E 02 FB | 	rdlong	local01, objptr
0c6b0     0F 17 02 F6 | 	mov	arg03, local01
0c6b4     01 16 66 F0 | 	shl	arg03, #1
0c6b8     0F 17 02 F1 | 	add	arg03, local01
0c6bc     02 16 66 F0 | 	shl	arg03, #2
0c6c0     03 00 00 FF 
0c6c4     04 E4 85 F1 | 	sub	objptr, ##1540
0c6c8     F2 16 02 F1 | 	add	arg03, objptr
0c6cc     0B 17 02 FB | 	rdlong	arg03, arg03
0c6d0     A7 16 62 FC | 	wrlong	arg03, fp
0c6d4                 | ' 
0c6d4                 | ' startline=0 : endline=$7FFFFFFF
0c6d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c6d4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0c6d4     01 16 0E F2 | 	cmp	arg03, #1 wz
0c6d8     66 00 00 FF 
0c6dc     40 E5 85 F1 | 	sub	objptr, ##52544
0c6e0     3C 00 90 5D |  if_ne	jmp	#LR__0950
0c6e4     50 D2 BF FD | 	call	#_pop
0c6e8     FF 1E 02 F6 | 	mov	local01, result3
0c6ec     0C 4E 05 F1 | 	add	fp, #12
0c6f0     A7 FA 61 FC | 	wrlong	result1, fp
0c6f4     04 4E 05 F1 | 	add	fp, #4
0c6f8     A7 FC 61 FC | 	wrlong	result2, fp
0c6fc     04 4E 05 F1 | 	add	fp, #4
0c700     A7 1E 62 FC | 	wrlong	local01, fp
0c704     08 4E 85 F1 | 	sub	fp, #8
0c708     A7 12 02 F6 | 	mov	arg01, fp
0c70c     0C 4E 85 F1 | 	sub	fp, #12
0c710     D4 4B B0 FD | 	call	#_converttoint
0c714     04 4E 05 F1 | 	add	fp, #4
0c718     A7 FA 61 FC | 	wrlong	result1, fp
0c71c     04 4E 85 F1 | 	sub	fp, #4
0c720                 | LR__0950
0c720                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0c720     A7 16 02 FB | 	rdlong	arg03, fp
0c724     02 16 0E F2 | 	cmp	arg03, #2 wz
0c728     7C 00 90 5D |  if_ne	jmp	#LR__0951
0c72c     08 D2 BF FD | 	call	#_pop
0c730     FF 1E 02 F6 | 	mov	local01, result3
0c734     0C 4E 05 F1 | 	add	fp, #12
0c738     A7 FA 61 FC | 	wrlong	result1, fp
0c73c     04 4E 05 F1 | 	add	fp, #4
0c740     A7 FC 61 FC | 	wrlong	result2, fp
0c744     04 4E 05 F1 | 	add	fp, #4
0c748     A7 1E 62 FC | 	wrlong	local01, fp
0c74c     08 4E 85 F1 | 	sub	fp, #8
0c750     A7 12 02 F6 | 	mov	arg01, fp
0c754     0C 4E 85 F1 | 	sub	fp, #12
0c758     8C 4B B0 FD | 	call	#_converttoint
0c75c     FD 1E 02 F6 | 	mov	local01, result1
0c760     08 4E 05 F1 | 	add	fp, #8
0c764     A7 1E 62 FC | 	wrlong	local01, fp
0c768     08 4E 85 F1 | 	sub	fp, #8
0c76c     C8 D1 BF FD | 	call	#_pop
0c770     FF 1E 02 F6 | 	mov	local01, result3
0c774     0C 4E 05 F1 | 	add	fp, #12
0c778     A7 FA 61 FC | 	wrlong	result1, fp
0c77c     04 4E 05 F1 | 	add	fp, #4
0c780     A7 FC 61 FC | 	wrlong	result2, fp
0c784     04 4E 05 F1 | 	add	fp, #4
0c788     A7 1E 62 FC | 	wrlong	local01, fp
0c78c     08 4E 85 F1 | 	sub	fp, #8
0c790     A7 12 02 F6 | 	mov	arg01, fp
0c794     0C 4E 85 F1 | 	sub	fp, #12
0c798     4C 4B B0 FD | 	call	#_converttoint
0c79c     04 4E 05 F1 | 	add	fp, #4
0c7a0     A7 FA 61 FC | 	wrlong	result1, fp
0c7a4     04 4E 85 F1 | 	sub	fp, #4
0c7a8                 | LR__0951
0c7a8                 | ' 
0c7a8                 | ' 
0c7a8                 | ' print
0c7a8     00 12 06 F6 | 	mov	arg01, #0
0c7ac     8C 25 B1 FD | 	call	#__system___getiolock_0425
0c7b0     FD 12 02 F6 | 	mov	arg01, result1
0c7b4     80 CC B0 FD | 	call	#__system___lockmem
0c7b8     00 12 06 F6 | 	mov	arg01, #0
0c7bc     0A 14 06 F6 | 	mov	arg02, #10
0c7c0     00 16 06 F6 | 	mov	arg03, #0
0c7c4     0C D9 B0 FD | 	call	#__system___basic_print_char
0c7c8     00 12 06 F6 | 	mov	arg01, #0
0c7cc     6C 25 B1 FD | 	call	#__system___getiolock_0425
0c7d0     FD 00 68 FC | 	wrlong	#0, result1
0c7d4     69 00 00 FF 
0c7d8     48 E5 05 F1 | 	add	objptr, ##54088
0c7dc     F2 20 02 FB | 	rdlong	local02, objptr
0c7e0     11 00 00 FF 
0c7e4     74 E4 05 F1 | 	add	objptr, ##8820
0c7e8     F2 20 62 FC | 	wrlong	local02, objptr
0c7ec     7A 00 00 FF 
0c7f0     BC E5 85 F1 | 	sub	objptr, ##62908
0c7f4                 | ' do 
0c7f4                 | LR__0952
0c7f4     20 4E 05 F1 | 	add	fp, #32
0c7f8     A7 12 02 F6 | 	mov	arg01, fp
0c7fc     20 4E 85 F1 | 	sub	fp, #32
0c800     7A 00 00 FF 
0c804     BC E5 05 F1 | 	add	objptr, ##62908
0c808     F2 14 02 FB | 	rdlong	arg02, objptr
0c80c     18 16 06 F6 | 	mov	arg03, #24
0c810     6F 00 00 FF 
0c814     FC E4 85 F1 | 	sub	objptr, ##57084
0c818     B0 C0 B0 FD | 	call	#_psram_spin2_read1
0c81c     0B 00 00 FF 
0c820     C0 E4 85 F1 | 	sub	objptr, ##5824
0c824                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0c824                 | '   
0c824                 | '   if header(0)<> $FFFFFFFF then
0c824     20 4E 05 F1 | 	add	fp, #32
0c828     A7 20 02 FB | 	rdlong	local02, fp
0c82c     20 4E 85 F1 | 	sub	fp, #32
0c830     FF FF 7F FF 
0c834     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0c838     A8 00 90 AD |  if_e	jmp	#LR__0954
0c83c     38 4E 05 F1 | 	add	fp, #56
0c840     3F 16 06 F6 | 	mov	arg03, #63
0c844     28 16 62 FD | 	setq	arg03
0c848     A7 00 68 FC | 	wrlong	#0, fp
0c84c     A7 12 02 F6 | 	mov	arg01, fp
0c850     10 4E 85 F1 | 	sub	fp, #16
0c854     A7 14 02 FB | 	rdlong	arg02, fp
0c858     04 4E 05 F1 | 	add	fp, #4
0c85c     A7 16 02 FB | 	rdlong	arg03, fp
0c860     2C 4E 85 F1 | 	sub	fp, #44
0c864     0B 00 00 FF 
0c868     C0 E4 05 F1 | 	add	objptr, ##5824
0c86c     5C C0 B0 FD | 	call	#_psram_spin2_read1
0c870     0B 00 00 FF 
0c874     C0 E4 85 F1 | 	sub	objptr, ##5824
0c878                 | '     longfill(linebuf,0,64)
0c878                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0c878                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0c878     20 4E 05 F1 | 	add	fp, #32
0c87c     A7 20 02 FB | 	rdlong	local02, fp
0c880     1C 4E 85 F1 | 	sub	fp, #28
0c884     A7 1E 02 FB | 	rdlong	local01, fp
0c888     04 4E 85 F1 | 	sub	fp, #4
0c88c     0F 21 52 F2 | 	cmps	local02, local01 wc
0c890     30 00 90 CD |  if_b	jmp	#LR__0953
0c894     20 4E 05 F1 | 	add	fp, #32
0c898     A7 20 02 FB | 	rdlong	local02, fp
0c89c     18 4E 85 F1 | 	sub	fp, #24
0c8a0     A7 16 02 FB | 	rdlong	arg03, fp
0c8a4     08 4E 85 F1 | 	sub	fp, #8
0c8a8     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0c8ac     14 00 90 1D |  if_a	jmp	#LR__0953
0c8b0     38 4E 05 F1 | 	add	fp, #56
0c8b4     A7 12 02 F6 | 	mov	arg01, fp
0c8b8     38 4E 85 F1 | 	sub	fp, #56
0c8bc                 | ' 
0c8bc                 | ' write(text)
0c8bc     D4 BA B0 FD | 	call	#_hg010b_spin2_write
0c8c0                 | ' crlf
0c8c0     30 BC B0 FD | 	call	#_hg010b_spin2_crlf
0c8c4                 | LR__0953
0c8c4     34 4E 05 F1 | 	add	fp, #52
0c8c8     A7 20 02 FB | 	rdlong	local02, fp
0c8cc     34 4E 85 F1 | 	sub	fp, #52
0c8d0     7A 00 00 FF 
0c8d4     BC E5 05 F1 | 	add	objptr, ##62908
0c8d8     F2 20 62 FC | 	wrlong	local02, objptr
0c8dc     7A 00 00 FF 
0c8e0     BC E5 85 F1 | 	sub	objptr, ##62908
0c8e4                 | LR__0954
0c8e4     34 4E 05 F1 | 	add	fp, #52
0c8e8     A7 20 02 FB | 	rdlong	local02, fp
0c8ec     34 4E 85 F1 | 	sub	fp, #52
0c8f0     FF FF 3F FF 
0c8f4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c8f8     20 4E 05 51 |  if_ne	add	fp, #32
0c8fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c900     20 4E 85 51 |  if_ne	sub	fp, #32
0c904     FF FF 7F 5F 
0c908     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c90c     E4 FE 9F 5D |  if_ne	jmp	#LR__0952
0c910     A7 F0 03 F6 | 	mov	ptra, fp
0c914     B2 00 A0 FD | 	call	#popregs_
0c918                 | _do_list_ret
0c918     2D 00 64 FD | 	ret
0c91c                 | 
0c91c                 | ' 
0c91c                 | ' '---------------- Clear the program
0c91c                 | ' 
0c91c                 | ' sub do_new
0c91c                 | _do_new
0c91c     03 4A 05 F6 | 	mov	COUNT_, #3
0c920     A8 00 A0 FD | 	call	#pushregs_
0c924     00 12 06 F6 | 	mov	arg01, #0
0c928     01 14 66 F6 | 	neg	arg02, #1
0c92c     01 16 06 F6 | 	mov	arg03, #1
0c930     00 18 06 F6 | 	mov	arg04, #0
0c934     0B 00 00 FF 
0c938     C0 E4 05 F1 | 	add	objptr, ##5824
0c93c                 | '     return fill(addr, pattern, count, listPtr, 4)
0c93c     04 1A 06 F6 | 	mov	arg05, #4
0c940     C0 C0 B0 FD | 	call	#_psram_spin2_fill
0c944     49 00 00 FF 
0c948     0C E4 05 F1 | 	add	objptr, ##37388
0c94c     F2 00 68 FC | 	wrlong	#0, objptr
0c950     15 00 00 FF 
0c954     7C E4 05 F1 | 	add	objptr, ##10876
0c958     F2 00 68 FC | 	wrlong	#0, objptr
0c95c     0F 00 00 FF 
0c960     2C E5 05 F1 | 	add	objptr, ##7980
0c964     F2 00 68 FC | 	wrlong	#0, objptr
0c968     04 E4 05 F1 | 	add	objptr, #4
0c96c     F2 00 68 FC | 	wrlong	#0, objptr
0c970     16 00 00 FF 
0c974     5C E5 85 F1 | 	sub	objptr, ##11612
0c978     F2 00 68 FC | 	wrlong	#0, objptr
0c97c     07 00 00 FF 
0c980     24 E4 05 F1 | 	add	objptr, ##3620
0c984     F2 00 68 FC | 	wrlong	#0, objptr
0c988     07 00 00 FF 
0c98c     20 E4 85 F1 | 	sub	objptr, ##3616
0c990     F2 00 68 FC | 	wrlong	#0, objptr
0c994     0F 00 00 FF 
0c998     34 E4 05 F1 | 	add	objptr, ##7732
0c99c     F2 00 68 FC | 	wrlong	#0, objptr
0c9a0     08 00 00 FF 
0c9a4     08 E4 85 F1 | 	sub	objptr, ##4104
0c9a8     F2 00 68 FC | 	wrlong	#0, objptr
0c9ac     04 E4 05 F1 | 	add	objptr, #4
0c9b0     FF FF FF FF 
0c9b4     F2 FE 6B FC | 	wrlong	##-1, objptr
0c9b8     0F 00 00 FF 
0c9bc     4C E5 05 F1 | 	add	objptr, ##8012
0c9c0     F2 00 68 FC | 	wrlong	#0, objptr
0c9c4                 | ' 
0c9c4                 | ' pslpoke(0,$FFFFFFFF)
0c9c4                 | ' varnum=0
0c9c4                 | ' programstart=0 :runptr=0 : runptr2=0
0c9c4                 | ' stackpointer=0
0c9c4                 | ' lineptr=0 
0c9c4                 | ' programptr=0 : stringptr=0
0c9c4                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0c9c4                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0c9c4     00 1E 06 F6 | 	mov	local01, #0
0c9c8     07 00 00 FF 
0c9cc     40 E5 85 F1 | 	sub	objptr, ##3904
0c9d0     97 16 48 FB | 	callpa	#(@LR__0961-@LR__0960)>>2,fcache_load_ptr_
0c9d4                 | LR__0960
0c9d4     0F 21 02 F6 | 	mov	local02, local01
0c9d8     02 20 66 F0 | 	shl	local02, #2
0c9dc     0F 21 02 F1 | 	add	local02, local01
0c9e0     02 20 66 F0 | 	shl	local02, #2
0c9e4     F2 20 02 F1 | 	add	local02, objptr
0c9e8     08 20 06 F1 | 	add	local02, #8
0c9ec     FF FF FF FF 
0c9f0     10 FF 6B FC | 	wrlong	##-1, local02
0c9f4     01 1E 06 F1 | 	add	local01, #1
0c9f8     81 1E 56 F2 | 	cmps	local01, #129 wc
0c9fc     D4 FF 9F CD |  if_b	jmp	#LR__0960
0ca00                 | LR__0961
0ca00     71 00 00 FF 
0ca04     5C E5 85 F1 | 	sub	objptr, ##58204
0ca08                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0ca08     00 1E 06 F6 | 	mov	local01, #0
0ca0c                 | LR__0962
0ca0c     0F 21 02 F6 | 	mov	local02, local01
0ca10     02 20 66 F0 | 	shl	local02, #2
0ca14     7A 00 00 FF 
0ca18     F8 E4 05 F1 | 	add	objptr, ##62712
0ca1c     F2 20 02 F1 | 	add	local02, objptr
0ca20     10 21 0A FB | 	rdlong	local02, local02 wz
0ca24     7A 00 00 FF 
0ca28     F8 E4 85 F1 | 	sub	objptr, ##62712
0ca2c     34 00 90 AD |  if_e	jmp	#LR__0963
0ca30     0F 13 02 F6 | 	mov	arg01, local01
0ca34     00 14 06 F6 | 	mov	arg02, #0
0ca38     00 16 06 F6 | 	mov	arg03, #0
0ca3c     E0 A9 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ca40     0F 21 02 F6 | 	mov	local02, local01
0ca44     02 20 66 F0 | 	shl	local02, #2
0ca48     7A 00 00 FF 
0ca4c     F8 E4 05 F1 | 	add	objptr, ##62712
0ca50     F2 20 02 F1 | 	add	local02, objptr
0ca54     10 13 02 FB | 	rdlong	arg01, local02
0ca58     7A 00 00 FF 
0ca5c     F8 E4 85 F1 | 	sub	objptr, ##62712
0ca60     C8 08 B1 FD | 	call	#__system___gc_free
0ca64                 | LR__0963
0ca64     7A 00 00 FF 
0ca68     4C E5 05 F1 | 	add	objptr, ##62796
0ca6c     00 C0 9F FF 
0ca70     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ca74     04 E4 05 F1 | 	add	objptr, #4
0ca78     00 C0 9F FF 
0ca7c     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ca80     7A 00 00 FF 
0ca84     50 E5 85 F1 | 	sub	objptr, ##62800
0ca88     F2 22 02 FB | 	rdlong	local03, objptr
0ca8c     7A 00 00 FF 
0ca90     3C E5 05 F1 | 	add	objptr, ##62780
0ca94     F2 22 62 FC | 	wrlong	local03, objptr
0ca98     7A 00 00 FF 
0ca9c     3C E5 85 F1 | 	sub	objptr, ##62780
0caa0     11 12 06 F6 | 	mov	arg01, #17
0caa4     08 14 06 F6 | 	mov	arg02, #8
0caa8     10 16 06 F6 | 	mov	arg03, #16
0caac     70 A9 B0 FD | 	call	#_hg010b_spin2_setspritesize
0cab0     10 12 06 F6 | 	mov	arg01, #16
0cab4     20 14 06 F6 | 	mov	arg02, #32
0cab8     20 16 06 F6 | 	mov	arg03, #32
0cabc     60 A9 B0 FD | 	call	#_hg010b_spin2_setspritesize
0cac0     01 1E 06 F1 | 	add	local01, #1
0cac4     10 1E 56 F2 | 	cmps	local01, #16 wc
0cac8     40 FF 9F CD |  if_b	jmp	#LR__0962
0cacc     A7 F0 03 F6 | 	mov	ptra, fp
0cad0     B2 00 A0 FD | 	call	#popregs_
0cad4                 | _do_new_ret
0cad4     2D 00 64 FD | 	ret
0cad8                 | 
0cad8                 | ' 
0cad8                 | ' '----------------------- goto
0cad8                 | ' sub do_fast_goto
0cad8                 | _do_fast_goto
0cad8     02 4A 05 F6 | 	mov	COUNT_, #2
0cadc     A8 00 A0 FD | 	call	#pushregs_
0cae0                 | _do_fast_goto_enter
0cae0     69 00 00 FF 
0cae4     44 E5 05 F1 | 	add	objptr, ##54084
0cae8     F2 12 02 FB | 	rdlong	arg01, objptr
0caec     09 1F 02 F6 | 	mov	local01, arg01
0caf0     01 1E 66 F0 | 	shl	local01, #1
0caf4     09 1F 02 F1 | 	add	local01, arg01
0caf8     02 1E 66 F0 | 	shl	local01, #2
0cafc     03 00 00 FF 
0cb00     04 E4 85 F1 | 	sub	objptr, ##1540
0cb04     F2 1E 02 F1 | 	add	local01, objptr
0cb08     0F 21 02 FB | 	rdlong	local02, local01
0cb0c     10 13 02 F6 | 	mov	arg01, local02
0cb10     66 00 00 FF 
0cb14     40 E5 85 F1 | 	sub	objptr, ##52544
0cb18     1C 95 B0 FD | 	call	#_pslpeek
0cb1c     FD 12 02 F6 | 	mov	arg01, result1
0cb20                 | ' 
0cb20                 | ' testptr=compiledline(lineptr_e).result.uresult
0cb20                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0cb20                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0cb20     69 00 00 FF 
0cb24     44 E5 05 F1 | 	add	objptr, ##54084
0cb28     F2 FA 01 FB | 	rdlong	result1, objptr
0cb2c     FD 1E 02 F6 | 	mov	local01, result1
0cb30     01 1E 66 F0 | 	shl	local01, #1
0cb34     FD 1E 02 F1 | 	add	local01, result1
0cb38     02 1E 66 F0 | 	shl	local01, #2
0cb3c     03 00 00 FF 
0cb40     04 E4 85 F1 | 	sub	objptr, ##1540
0cb44     F2 1E 02 F1 | 	add	local01, objptr
0cb48     04 1E 06 F1 | 	add	local01, #4
0cb4c     0F 1F 02 FB | 	rdlong	local01, local01
0cb50     0F 13 0A F2 | 	cmp	arg01, local01 wz
0cb54     66 00 00 FF 
0cb58     40 E5 85 F1 | 	sub	objptr, ##52544
0cb5c     58 00 90 5D |  if_ne	jmp	#LR__0970
0cb60     79 00 00 FF 
0cb64     74 E4 05 F1 | 	add	objptr, ##62068
0cb68     F2 20 62 FC | 	wrlong	local02, objptr
0cb6c     0F 00 00 FF 
0cb70     34 E5 85 F1 | 	sub	objptr, ##7988
0cb74     F2 20 02 FB | 	rdlong	local02, objptr
0cb78     01 20 86 F1 | 	sub	local02, #1
0cb7c     04 E4 05 F1 | 	add	objptr, #4
0cb80     F2 20 62 FC | 	wrlong	local02, objptr
0cb84                 | '   runptr=testptr
0cb84                 | '   lineptr_e=lineptr-1
0cb84                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0cb84     0F 00 00 FF 
0cb88     54 E5 05 F1 | 	add	objptr, ##8020
0cb8c     F2 20 02 FB | 	rdlong	local02, objptr
0cb90     79 00 00 FF 
0cb94     98 E4 85 F1 | 	sub	objptr, ##62104
0cb98     FF FF 3F FF 
0cb9c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0cba0     79 00 00 AF 
0cba4     98 E4 05 A1 |  if_e	add	objptr, ##62104
0cba8     F2 00 68 AC |  if_e	wrlong	#0, objptr
0cbac     79 00 00 AF 
0cbb0     98 E4 85 A1 |  if_e	sub	objptr, ##62104
0cbb4     04 00 90 FD | 	jmp	#LR__0971
0cbb8                 | LR__0970
0cbb8     0C 00 B0 FD | 	call	#_do_find_goto
0cbbc                 | LR__0971
0cbbc     A7 F0 03 F6 | 	mov	ptra, fp
0cbc0     B2 00 A0 FD | 	call	#popregs_
0cbc4                 | _do_fast_goto_ret
0cbc4     2D 00 64 FD | 	ret
0cbc8                 | 
0cbc8                 | ' 
0cbc8                 | ' 
0cbc8                 | ' 
0cbc8                 | ' 
0cbc8                 | ' sub do_find_goto
0cbc8                 | _do_find_goto
0cbc8     03 4A 05 F6 | 	mov	COUNT_, #3
0cbcc     A8 00 A0 FD | 	call	#pushregs_
0cbd0     24 F0 07 F1 | 	add	ptra, #36
0cbd4                 | _do_find_goto_enter
0cbd4     69 00 00 FF 
0cbd8     44 E5 05 F1 | 	add	objptr, ##54084
0cbdc     F2 1E 02 FB | 	rdlong	local01, objptr
0cbe0     0F 21 02 F6 | 	mov	local02, local01
0cbe4     01 20 66 F0 | 	shl	local02, #1
0cbe8     0F 21 02 F1 | 	add	local02, local01
0cbec     02 20 66 F0 | 	shl	local02, #2
0cbf0     03 00 00 FF 
0cbf4     04 E4 85 F1 | 	sub	objptr, ##1540
0cbf8     F2 20 02 F1 | 	add	local02, objptr
0cbfc     04 20 06 F1 | 	add	local02, #4
0cc00     10 21 02 FB | 	rdlong	local02, local02
0cc04     A7 20 62 FC | 	wrlong	local02, fp
0cc08     03 00 00 FF 
0cc0c     08 E4 05 F1 | 	add	objptr, ##1544
0cc10     F2 22 02 FB | 	rdlong	local03, objptr
0cc14     69 00 00 FF 
0cc18     48 E5 85 F1 | 	sub	objptr, ##54088
0cc1c     04 4E 05 F1 | 	add	fp, #4
0cc20     A7 22 62 FC | 	wrlong	local03, fp
0cc24     04 4E 85 F1 | 	sub	fp, #4
0cc28                 | ' 
0cc28                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0cc28                 | '  ' print "find goto"                                                                     'print gotoline 
0cc28                 | ' gotoptr=programstart
0cc28                 | ' do
0cc28                 | LR__0980
0cc28     0C 4E 05 F1 | 	add	fp, #12
0cc2c     A7 12 02 F6 | 	mov	arg01, fp
0cc30     08 4E 85 F1 | 	sub	fp, #8
0cc34     A7 14 02 FB | 	rdlong	arg02, fp
0cc38     04 4E 85 F1 | 	sub	fp, #4
0cc3c     18 16 06 F6 | 	mov	arg03, #24
0cc40     0B 00 00 FF 
0cc44     C0 E4 05 F1 | 	add	objptr, ##5824
0cc48     80 BC B0 FD | 	call	#_psram_spin2_read1
0cc4c     0B 00 00 FF 
0cc50     C0 E4 85 F1 | 	sub	objptr, ##5824
0cc54                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0cc54                 | '   if gotoheader(0)<>$FFFFFFFF then
0cc54     0C 4E 05 F1 | 	add	fp, #12
0cc58     A7 22 02 FB | 	rdlong	local03, fp
0cc5c     0C 4E 85 F1 | 	sub	fp, #12
0cc60     FF FF 7F FF 
0cc64     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0cc68     24 00 90 AD |  if_e	jmp	#LR__0981
0cc6c     04 4E 05 F1 | 	add	fp, #4
0cc70     A7 22 02 FB | 	rdlong	local03, fp
0cc74     04 4E 05 F1 | 	add	fp, #4
0cc78     A7 22 62 FC | 	wrlong	local03, fp
0cc7c     18 4E 05 F1 | 	add	fp, #24
0cc80     A7 22 02 FB | 	rdlong	local03, fp
0cc84     1C 4E 85 F1 | 	sub	fp, #28
0cc88     A7 22 62 FC | 	wrlong	local03, fp
0cc8c     04 4E 85 F1 | 	sub	fp, #4
0cc90                 | LR__0981
0cc90     20 4E 05 F1 | 	add	fp, #32
0cc94     A7 22 02 FB | 	rdlong	local03, fp
0cc98     20 4E 85 F1 | 	sub	fp, #32
0cc9c     FF FF 3F FF 
0cca0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0cca4     0C 4E 05 51 |  if_ne	add	fp, #12
0cca8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ccac     0C 4E 85 51 |  if_ne	sub	fp, #12
0ccb0     FF FF 7F 5F 
0ccb4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0ccb8     18 00 90 AD |  if_e	jmp	#LR__0982
0ccbc     0C 4E 05 F1 | 	add	fp, #12
0ccc0     A7 22 02 FB | 	rdlong	local03, fp
0ccc4     0C 4E 85 F1 | 	sub	fp, #12
0ccc8     A7 20 02 FB | 	rdlong	local02, fp
0cccc     10 23 0A F2 | 	cmp	local03, local02 wz
0ccd0     54 FF 9F 5D |  if_ne	jmp	#LR__0980
0ccd4                 | LR__0982
0ccd4                 | ' 
0ccd4                 | ' if gotoheader(0)=gotoline then
0ccd4     0C 4E 05 F1 | 	add	fp, #12
0ccd8     A7 22 02 FB | 	rdlong	local03, fp
0ccdc     0C 4E 85 F1 | 	sub	fp, #12
0cce0     A7 1E 02 FB | 	rdlong	local01, fp
0cce4     0F 23 0A F2 | 	cmp	local03, local01 wz
0cce8     D8 00 90 5D |  if_ne	jmp	#LR__0983
0ccec     69 00 00 FF 
0ccf0     44 E5 05 F1 | 	add	objptr, ##54084
0ccf4     F2 1E 02 FB | 	rdlong	local01, objptr
0ccf8     0F 21 02 F6 | 	mov	local02, local01
0ccfc     01 20 66 F0 | 	shl	local02, #1
0cd00     0F 21 02 F1 | 	add	local02, local01
0cd04     02 20 66 F0 | 	shl	local02, #2
0cd08     03 00 00 FF 
0cd0c     04 E4 85 F1 | 	sub	objptr, ##1540
0cd10     F2 20 02 F1 | 	add	local02, objptr
0cd14     08 4E 05 F1 | 	add	fp, #8
0cd18     A7 22 02 FB | 	rdlong	local03, fp
0cd1c     10 23 62 FC | 	wrlong	local03, local02
0cd20     03 00 00 FF 
0cd24     04 E4 05 F1 | 	add	objptr, ##1540
0cd28     F2 1E 02 FB | 	rdlong	local01, objptr
0cd2c     0F 21 02 F6 | 	mov	local02, local01
0cd30     01 20 66 F0 | 	shl	local02, #1
0cd34     0F 21 02 F1 | 	add	local02, local01
0cd38     02 20 66 F0 | 	shl	local02, #2
0cd3c     03 00 00 FF 
0cd40     04 E4 85 F1 | 	sub	objptr, ##1540
0cd44     F2 20 02 F1 | 	add	local02, objptr
0cd48     08 20 06 F1 | 	add	local02, #8
0cd4c     10 9D 68 FC | 	wrlong	#78, local02
0cd50     03 00 00 FF 
0cd54     04 E4 05 F1 | 	add	objptr, ##1540
0cd58     F2 20 02 FB | 	rdlong	local02, objptr
0cd5c     10 13 02 F6 | 	mov	arg01, local02
0cd60     01 12 66 F0 | 	shl	arg01, #1
0cd64     10 13 02 F1 | 	add	arg01, local02
0cd68     02 12 66 F0 | 	shl	arg01, #2
0cd6c     03 00 00 FF 
0cd70     04 E4 85 F1 | 	sub	objptr, ##1540
0cd74     F2 12 02 F1 | 	add	arg01, objptr
0cd78     12 00 00 FF 
0cd7c     3C E5 05 F1 | 	add	objptr, ##9532
0cd80     F2 14 02 FB | 	rdlong	arg02, objptr
0cd84     02 22 06 F6 | 	mov	local03, #2
0cd88     10 23 02 F1 | 	add	local03, local02
0cd8c     14 00 00 FF 
0cd90     54 E5 85 F1 | 	sub	objptr, ##10580
0cd94     F2 16 02 FB | 	rdlong	arg03, objptr
0cd98     0B 23 02 FD | 	qmul	local03, arg03
0cd9c     08 4E 85 F1 | 	sub	fp, #8
0cda0     59 00 00 FF 
0cda4     68 E4 85 F1 | 	sub	objptr, ##45672
0cda8     18 22 62 FD | 	getqx	local03
0cdac     11 15 02 F1 | 	add	arg02, local03
0cdb0     B4 BB B0 FD | 	call	#_psram_spin2_write
0cdb4     0B 00 00 FF 
0cdb8     C0 E4 85 F1 | 	sub	objptr, ##5824
0cdbc     18 FD BF FD | 	call	#_do_fast_goto
0cdc0     08 00 90 FD | 	jmp	#LR__0984
0cdc4                 | LR__0983
0cdc4     26 12 06 F6 | 	mov	arg01, #38
0cdc8     B0 90 B0 FD | 	call	#_printerror
0cdcc                 | LR__0984
0cdcc     A7 F0 03 F6 | 	mov	ptra, fp
0cdd0     B2 00 A0 FD | 	call	#popregs_
0cdd4                 | _do_find_goto_ret
0cdd4     2D 00 64 FD | 	ret
0cdd8                 | 
0cdd8                 | ' 
0cdd8                 | ' sub do_slow_goto
0cdd8                 | _do_slow_goto
0cdd8                 | _do_slow_goto_ret
0cdd8     2D 00 64 FD | 	ret
0cddc                 | 
0cddc                 | ' 
0cddc                 | ' '----------------------- Error processing
0cddc                 | ' 
0cddc                 | ' sub do_error
0cddc                 | _do_error
0cddc     01 4A 05 F6 | 	mov	COUNT_, #1
0cde0     A8 00 A0 FD | 	call	#pushregs_
0cde4     69 00 00 FF 
0cde8     44 E5 05 F1 | 	add	objptr, ##54084
0cdec     F2 18 02 FB | 	rdlong	arg04, objptr
0cdf0     0C 17 02 F6 | 	mov	arg03, arg04
0cdf4     01 16 66 F0 | 	shl	arg03, #1
0cdf8     0C 17 02 F1 | 	add	arg03, arg04
0cdfc     02 16 66 F0 | 	shl	arg03, #2
0ce00     03 00 00 FF 
0ce04     04 E4 85 F1 | 	sub	objptr, ##1540
0ce08     F2 16 02 F1 | 	add	arg03, objptr
0ce0c     0B 1F 02 FB | 	rdlong	local01, arg03
0ce10                 | ' r=compiledline(lineptr_e).result.uresult
0ce10                 | ' print "Error ";r;": ";errors$(r)
0ce10     00 12 06 F6 | 	mov	arg01, #0
0ce14     66 00 00 FF 
0ce18     40 E5 85 F1 | 	sub	objptr, ##52544
0ce1c     1C 1F B1 FD | 	call	#__system___getiolock_0425
0ce20     FD 12 02 F6 | 	mov	arg01, result1
0ce24     10 C6 B0 FD | 	call	#__system___lockmem
0ce28     47 01 00 FF 
0ce2c     D0 14 06 F6 | 	mov	arg02, ##@LR__4614
0ce30     00 12 06 F6 | 	mov	arg01, #0
0ce34     00 16 06 F6 | 	mov	arg03, #0
0ce38     F0 D2 B0 FD | 	call	#__system___basic_print_string
0ce3c     00 12 06 F6 | 	mov	arg01, #0
0ce40     0F 15 02 F6 | 	mov	arg02, local01
0ce44     00 16 06 F6 | 	mov	arg03, #0
0ce48     0A 18 06 F6 | 	mov	arg04, #10
0ce4c     60 D3 B0 FD | 	call	#__system___basic_print_unsigned
0ce50     47 01 00 FF 
0ce54     D7 14 06 F6 | 	mov	arg02, ##@LR__4615
0ce58     00 12 06 F6 | 	mov	arg01, #0
0ce5c     00 16 06 F6 | 	mov	arg03, #0
0ce60     C8 D2 B0 FD | 	call	#__system___basic_print_string
0ce64     02 1E 66 F0 | 	shl	local01, #2
0ce68     64 00 00 FF 
0ce6c     40 E5 05 F1 | 	add	objptr, ##51520
0ce70     F2 1E 02 F1 | 	add	local01, objptr
0ce74     0F 15 02 FB | 	rdlong	arg02, local01
0ce78     00 12 06 F6 | 	mov	arg01, #0
0ce7c     00 16 06 F6 | 	mov	arg03, #0
0ce80     64 00 00 FF 
0ce84     40 E5 85 F1 | 	sub	objptr, ##51520
0ce88     A0 D2 B0 FD | 	call	#__system___basic_print_string
0ce8c     00 12 06 F6 | 	mov	arg01, #0
0ce90     0A 14 06 F6 | 	mov	arg02, #10
0ce94     00 16 06 F6 | 	mov	arg03, #0
0ce98     38 D2 B0 FD | 	call	#__system___basic_print_char
0ce9c     00 12 06 F6 | 	mov	arg01, #0
0cea0     98 1E B1 FD | 	call	#__system___getiolock_0425
0cea4     FD 00 68 FC | 	wrlong	#0, result1
0cea8     A7 F0 03 F6 | 	mov	ptra, fp
0ceac     B2 00 A0 FD | 	call	#popregs_
0ceb0                 | _do_error_ret
0ceb0     2D 00 64 FD | 	ret
0ceb4                 | 
0ceb4                 | ' 
0ceb4                 | ' 
0ceb4                 | ' '------------------ Assigning to a variable  
0ceb4                 | ' 
0ceb4                 | ' function  convertstring(psaddr as ulong) as string
0ceb4                 | _convertstring
0ceb4     04 4A 05 F6 | 	mov	COUNT_, #4
0ceb8     A8 00 A0 FD | 	call	#pushregs_
0cebc     09 1F 02 F6 | 	mov	local01, arg01
0cec0     74 91 B0 FD | 	call	#_pslpeek
0cec4     FD 20 02 F6 | 	mov	local02, result1
0cec8     47 01 00 FF 
0cecc     DA 22 06 F6 | 	mov	local03, ##@LR__4616
0ced0                 | ' 'print "in convertstring: psaddr=";psaddr
0ced0                 | ' l=pslpeek(psaddr)
0ced0                 | ' 'print "in convertstring: len=";l
0ced0                 | ' s="" 
0ced0                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ced0     01 24 06 F6 | 	mov	local04, #1
0ced4     01 20 06 F1 | 	add	local02, #1
0ced8                 | LR__0990
0ced8     10 25 52 F2 | 	cmps	local04, local02 wc
0cedc     30 00 90 3D |  if_ae	jmp	#LR__0991
0cee0     0F 13 02 F6 | 	mov	arg01, local01
0cee4     03 12 06 F1 | 	add	arg01, #3
0cee8     12 13 02 F1 | 	add	arg01, local04
0ceec     F0 90 B0 FD | 	call	#_pspeek
0cef0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0cef4     14 E7 B0 FD | 	call	#__system__Chr_S
0cef8     FD 14 02 F6 | 	mov	arg02, result1
0cefc     11 13 02 F6 | 	mov	arg01, local03
0cf00     90 C5 B0 FD | 	call	#__system___string_concat
0cf04     FD 22 02 F6 | 	mov	local03, result1
0cf08     01 24 06 F1 | 	add	local04, #1
0cf0c     C8 FF 9F FD | 	jmp	#LR__0990
0cf10                 | LR__0991
0cf10                 | ' 'print "in convertstring: str=";s
0cf10                 | ' return s
0cf10     11 FB 01 F6 | 	mov	result1, local03
0cf14     A7 F0 03 F6 | 	mov	ptra, fp
0cf18     B2 00 A0 FD | 	call	#popregs_
0cf1c                 | _convertstring_ret
0cf1c     2D 00 64 FD | 	ret
0cf20                 | 
0cf20                 | ' 
0cf20                 | ' sub do_assign
0cf20                 | _do_assign
0cf20     05 4A 05 F6 | 	mov	COUNT_, #5
0cf24     A8 00 A0 FD | 	call	#pushregs_
0cf28     44 F0 07 F1 | 	add	ptra, #68
0cf2c     69 00 00 FF 
0cf30     44 E5 05 F1 | 	add	objptr, ##54084
0cf34     F2 16 02 FB | 	rdlong	arg03, objptr
0cf38     0B 15 02 F6 | 	mov	arg02, arg03
0cf3c     01 14 66 F0 | 	shl	arg02, #1
0cf40     0B 15 02 F1 | 	add	arg02, arg03
0cf44     02 14 66 F0 | 	shl	arg02, #2
0cf48     03 00 00 FF 
0cf4c     04 E4 85 F1 | 	sub	objptr, ##1540
0cf50     F2 14 02 F1 | 	add	arg02, objptr
0cf54     0A 15 02 FB | 	rdlong	arg02, arg02
0cf58     18 4E 05 F1 | 	add	fp, #24
0cf5c     A7 14 62 FC | 	wrlong	arg02, fp
0cf60                 | ' 
0cf60                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0cf60                 | ' 
0cf60                 | ' if variables(varnum).vartype<array_no_type then 
0cf60     18 4E 85 F1 | 	sub	fp, #24
0cf64     04 14 66 F0 | 	shl	arg02, #4
0cf68     32 00 00 FF 
0cf6c     74 E4 85 F1 | 	sub	objptr, ##25716
0cf70     F2 14 02 F1 | 	add	arg02, objptr
0cf74     0C 14 06 F1 | 	add	arg02, #12
0cf78     0A 17 02 FB | 	rdlong	arg03, arg02
0cf7c     00 17 16 F2 | 	cmp	arg03, #256 wc
0cf80     34 00 00 FF 
0cf84     CC E4 85 F1 | 	sub	objptr, ##26828
0cf88     18 01 90 3D |  if_ae	jmp	#LR__1000
0cf8c     A8 C9 BF FD | 	call	#_pop
0cf90     A7 FA 61 FC | 	wrlong	result1, fp
0cf94     04 4E 05 F1 | 	add	fp, #4
0cf98     A7 FC 61 FC | 	wrlong	result2, fp
0cf9c     04 4E 05 F1 | 	add	fp, #4
0cfa0     A7 FE 61 FC | 	wrlong	result3, fp
0cfa4     08 4E 85 F1 | 	sub	fp, #8
0cfa8     A7 16 02 FB | 	rdlong	arg03, fp
0cfac     04 4E 05 F1 | 	add	fp, #4
0cfb0     A7 14 02 FB | 	rdlong	arg02, fp
0cfb4     14 4E 05 F1 | 	add	fp, #20
0cfb8     A7 12 02 FB | 	rdlong	arg01, fp
0cfbc     04 12 66 F0 | 	shl	arg01, #4
0cfc0     34 00 00 FF 
0cfc4     CC E4 05 F1 | 	add	objptr, ##26828
0cfc8     F2 12 02 F1 | 	add	arg01, objptr
0cfcc     04 12 06 F1 | 	add	arg01, #4
0cfd0     09 17 62 FC | 	wrlong	arg03, arg01
0cfd4     A7 16 02 FB | 	rdlong	arg03, fp
0cfd8     04 16 66 F0 | 	shl	arg03, #4
0cfdc     F2 16 02 F1 | 	add	arg03, objptr
0cfe0     08 16 06 F1 | 	add	arg03, #8
0cfe4     0B 15 62 FC | 	wrlong	arg02, arg03
0cfe8     A7 16 02 FB | 	rdlong	arg03, fp
0cfec     04 16 66 F0 | 	shl	arg03, #4
0cff0     F2 16 02 F1 | 	add	arg03, objptr
0cff4     10 4E 85 F1 | 	sub	fp, #16
0cff8     A7 14 02 FB | 	rdlong	arg02, fp
0cffc     0C 16 06 F1 | 	add	arg03, #12
0d000     0B 15 62 FC | 	wrlong	arg02, arg03
0d004                 | '   t1=pop() 
0d004                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0d004                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0d004                 | '   if variables(varnum).vartype<>result_string2 then return
0d004     10 4E 05 F1 | 	add	fp, #16
0d008     A7 16 02 FB | 	rdlong	arg03, fp
0d00c     18 4E 85 F1 | 	sub	fp, #24
0d010     04 16 66 F0 | 	shl	arg03, #4
0d014     F2 16 02 F1 | 	add	arg03, objptr
0d018     0C 16 06 F1 | 	add	arg03, #12
0d01c     0B 17 02 FB | 	rdlong	arg03, arg03
0d020     2B 16 0E F2 | 	cmp	arg03, #43 wz
0d024     34 00 00 FF 
0d028     CC E4 85 F1 | 	sub	objptr, ##26828
0d02c     30 06 90 5D |  if_ne	jmp	#LR__1023
0d030     18 4E 05 F1 | 	add	fp, #24
0d034     A7 16 02 FB | 	rdlong	arg03, fp
0d038     0B 1F 02 F6 | 	mov	local01, arg03
0d03c     04 1E 66 F0 | 	shl	local01, #4
0d040     34 00 00 FF 
0d044     CC E4 05 F1 | 	add	objptr, ##26828
0d048     F2 1E 02 F1 | 	add	local01, objptr
0d04c     18 4E 85 F1 | 	sub	fp, #24
0d050     04 16 66 F0 | 	shl	arg03, #4
0d054     F2 16 02 F1 | 	add	arg03, objptr
0d058     04 16 06 F1 | 	add	arg03, #4
0d05c     0B 13 02 FB | 	rdlong	arg01, arg03
0d060     34 00 00 FF 
0d064     CC E4 85 F1 | 	sub	objptr, ##26828
0d068     48 FE BF FD | 	call	#_convertstring
0d06c     04 1E 06 F1 | 	add	local01, #4
0d070     0F FB 61 FC | 	wrlong	result1, local01
0d074     18 4E 05 F1 | 	add	fp, #24
0d078     A7 1E 02 FB | 	rdlong	local01, fp
0d07c     18 4E 85 F1 | 	sub	fp, #24
0d080     04 1E 66 F0 | 	shl	local01, #4
0d084     34 00 00 FF 
0d088     CC E4 05 F1 | 	add	objptr, ##26828
0d08c     F2 1E 02 F1 | 	add	local01, objptr
0d090     0C 1E 06 F1 | 	add	local01, #12
0d094     0F 3F 68 FC | 	wrlong	#31, local01
0d098                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0d098                 | '   variables(varnum).vartype=result_string
0d098                 | '   return
0d098     34 00 00 FF 
0d09c     CC E4 85 F1 | 	sub	objptr, ##26828
0d0a0     BC 05 90 FD | 	jmp	#LR__1023
0d0a4                 | LR__1000
0d0a4                 | ' for i=0 to 2 : arrid(i)=0 : next i
0d0a4     1C 4E 05 F1 | 	add	fp, #28
0d0a8     A7 00 68 FC | 	wrlong	#0, fp
0d0ac     97 16 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0d0b0                 | LR__1001
0d0b0     A7 1E 02 FB | 	rdlong	local01, fp
0d0b4     02 1E 66 F0 | 	shl	local01, #2
0d0b8     18 4E 05 F1 | 	add	fp, #24
0d0bc     A7 1E 02 F1 | 	add	local01, fp
0d0c0     0F 01 68 FC | 	wrlong	#0, local01
0d0c4     18 4E 85 F1 | 	sub	fp, #24
0d0c8     A7 1E 02 FB | 	rdlong	local01, fp
0d0cc     01 1E 06 F1 | 	add	local01, #1
0d0d0     A7 1E 62 FC | 	wrlong	local01, fp
0d0d4     03 1E 16 F2 | 	cmp	local01, #3 wc
0d0d8     D4 FF 9F CD |  if_b	jmp	#LR__1001
0d0dc                 | LR__1002
0d0dc     69 00 00 FF 
0d0e0     44 E5 05 F1 | 	add	objptr, ##54084
0d0e4     F2 16 02 FB | 	rdlong	arg03, objptr
0d0e8     0B 1F 02 F6 | 	mov	local01, arg03
0d0ec     01 1E 66 F0 | 	shl	local01, #1
0d0f0     0B 1F 02 F1 | 	add	local01, arg03
0d0f4     02 1E 66 F0 | 	shl	local01, #2
0d0f8     03 00 00 FF 
0d0fc     04 E4 85 F1 | 	sub	objptr, ##1540
0d100     F2 1E 02 F1 | 	add	local01, objptr
0d104     04 1E 06 F1 | 	add	local01, #4
0d108     0F 21 02 FB | 	rdlong	local02, local01
0d10c     04 4E 05 F1 | 	add	fp, #4
0d110     A7 20 62 FC | 	wrlong	local02, fp
0d114     20 4E 85 F1 | 	sub	fp, #32
0d118     66 00 00 FF 
0d11c     40 E5 85 F1 | 	sub	objptr, ##52544
0d120     14 C8 BF FD | 	call	#_pop
0d124     A7 FA 61 FC | 	wrlong	result1, fp
0d128     04 4E 05 F1 | 	add	fp, #4
0d12c     A7 FC 61 FC | 	wrlong	result2, fp
0d130     04 4E 05 F1 | 	add	fp, #4
0d134     A7 FE 61 FC | 	wrlong	result3, fp
0d138                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0d138                 | ' t1=pop() ' var value
0d138                 | ' if numpar>0 then
0d138     18 4E 05 F1 | 	add	fp, #24
0d13c     A7 22 02 FB | 	rdlong	local03, fp
0d140     20 4E 85 F1 | 	sub	fp, #32
0d144     01 22 16 F2 | 	cmp	local03, #1 wc
0d148     78 00 90 CD |  if_b	jmp	#LR__1005
0d14c                 | '   for i=numpar to 1 step -1
0d14c     20 4E 05 F1 | 	add	fp, #32
0d150     A7 24 0A FB | 	rdlong	local04, fp wz
0d154     04 4E 85 F1 | 	sub	fp, #4
0d158     A7 24 62 FC | 	wrlong	local04, fp
0d15c     1C 4E 85 F1 | 	sub	fp, #28
0d160     60 00 90 AD |  if_e	jmp	#LR__1004
0d164                 | LR__1003
0d164     D0 C7 BF FD | 	call	#_pop
0d168     0C 4E 05 F1 | 	add	fp, #12
0d16c     A7 FA 61 FC | 	wrlong	result1, fp
0d170     04 4E 05 F1 | 	add	fp, #4
0d174     A7 FC 61 FC | 	wrlong	result2, fp
0d178     04 4E 05 F1 | 	add	fp, #4
0d17c     A7 FE 61 FC | 	wrlong	result3, fp
0d180     08 4E 05 F1 | 	add	fp, #8
0d184     A7 22 02 FB | 	rdlong	local03, fp
0d188     01 22 86 F1 | 	sub	local03, #1
0d18c     02 22 66 F0 | 	shl	local03, #2
0d190     18 4E 05 F1 | 	add	fp, #24
0d194     A7 22 02 F1 | 	add	local03, fp
0d198     28 4E 85 F1 | 	sub	fp, #40
0d19c     A7 12 02 F6 | 	mov	arg01, fp
0d1a0     0C 4E 85 F1 | 	sub	fp, #12
0d1a4     40 41 B0 FD | 	call	#_converttoint
0d1a8     11 FB 61 FC | 	wrlong	result1, local03
0d1ac     1C 4E 05 F1 | 	add	fp, #28
0d1b0     A7 24 02 FB | 	rdlong	local04, fp
0d1b4     01 24 8E F1 | 	sub	local04, #1 wz
0d1b8     A7 24 62 FC | 	wrlong	local04, fp
0d1bc     1C 4E 85 F1 | 	sub	fp, #28
0d1c0     A0 FF 9F 5D |  if_ne	jmp	#LR__1003
0d1c4                 | LR__1004
0d1c4                 | LR__1005
0d1c4     18 4E 05 F1 | 	add	fp, #24
0d1c8     A7 1E 02 FB | 	rdlong	local01, fp
0d1cc     04 1E 66 F0 | 	shl	local01, #4
0d1d0     34 00 00 FF 
0d1d4     CC E4 05 F1 | 	add	objptr, ##26828
0d1d8     F2 1E 02 F1 | 	add	local01, objptr
0d1dc     04 1E 06 F1 | 	add	local01, #4
0d1e0     0F 13 02 FB | 	rdlong	arg01, local01
0d1e4     0C 4E 05 F1 | 	add	fp, #12
0d1e8     A7 12 62 FC | 	wrlong	arg01, fp
0d1ec     24 4E 85 F1 | 	sub	fp, #36
0d1f0     34 00 00 FF 
0d1f4     CC E4 85 F1 | 	sub	objptr, ##26828
0d1f8     3C 8E B0 FD | 	call	#_pslpeek
0d1fc     FD 24 32 F9 | 	getword	local04, result1, #0
0d200     28 4E 05 F1 | 	add	fp, #40
0d204     A7 24 62 FC | 	wrlong	local04, fp
0d208     04 4E 85 F1 | 	sub	fp, #4
0d20c     A7 12 02 FB | 	rdlong	arg01, fp
0d210     24 4E 85 F1 | 	sub	fp, #36
0d214     02 12 06 F1 | 	add	arg01, #2
0d218     C4 8D B0 FD | 	call	#_pspeek
0d21c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d220     2C 4E 05 F1 | 	add	fp, #44
0d224     A7 FA 61 FC | 	wrlong	result1, fp
0d228                 | ' esize=pspeek(arrptr+2)
0d228                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0d228     08 4E 85 F1 | 	sub	fp, #8
0d22c     A7 12 02 FB | 	rdlong	arg01, fp
0d230     24 4E 85 F1 | 	sub	fp, #36
0d234     04 12 06 F1 | 	add	arg01, #4
0d238     FC 8D B0 FD | 	call	#_pslpeek
0d23c     FD 24 02 F6 | 	mov	local04, result1
0d240     34 4E 05 F1 | 	add	fp, #52
0d244     A7 1E 02 FB | 	rdlong	local01, fp
0d248     34 4E 85 F1 | 	sub	fp, #52
0d24c     12 1F 12 F2 | 	cmp	local01, local04 wc
0d250     54 00 90 3D |  if_ae	jmp	#LR__1006
0d254     24 4E 05 F1 | 	add	fp, #36
0d258     A7 12 02 FB | 	rdlong	arg01, fp
0d25c     24 4E 85 F1 | 	sub	fp, #36
0d260     08 12 06 F1 | 	add	arg01, #8
0d264     D0 8D B0 FD | 	call	#_pslpeek
0d268     FD 1E 02 F6 | 	mov	local01, result1
0d26c     38 4E 05 F1 | 	add	fp, #56
0d270     A7 24 02 FB | 	rdlong	local04, fp
0d274     38 4E 85 F1 | 	sub	fp, #56
0d278     0F 25 12 F2 | 	cmp	local04, local01 wc
0d27c     28 00 90 3D |  if_ae	jmp	#LR__1006
0d280     24 4E 05 F1 | 	add	fp, #36
0d284     A7 12 02 FB | 	rdlong	arg01, fp
0d288     24 4E 85 F1 | 	sub	fp, #36
0d28c     0C 12 06 F1 | 	add	arg01, #12
0d290     A4 8D B0 FD | 	call	#_pslpeek
0d294     3C 4E 05 F1 | 	add	fp, #60
0d298     A7 24 02 FB | 	rdlong	local04, fp
0d29c     3C 4E 85 F1 | 	sub	fp, #60
0d2a0     FD 24 12 F2 | 	cmp	local04, result1 wc
0d2a4     0C 00 90 CD |  if_b	jmp	#LR__1007
0d2a8                 | LR__1006
0d2a8     31 12 06 F6 | 	mov	arg01, #49
0d2ac     CC 8B B0 FD | 	call	#_printerror
0d2b0     AC 03 90 FD | 	jmp	#LR__1023
0d2b4                 | LR__1007
0d2b4     24 4E 05 F1 | 	add	fp, #36
0d2b8     A7 12 02 FB | 	rdlong	arg01, fp
0d2bc     09 25 02 F6 | 	mov	local04, arg01
0d2c0     10 24 06 F1 | 	add	local04, #16
0d2c4     24 4E 85 F1 | 	sub	fp, #36
0d2c8     04 12 06 F1 | 	add	arg01, #4
0d2cc     68 8D B0 FD | 	call	#_pslpeek
0d2d0     FD 1E 02 F6 | 	mov	local01, result1
0d2d4     38 4E 05 F1 | 	add	fp, #56
0d2d8     A7 20 02 FB | 	rdlong	local02, fp
0d2dc     10 1F 02 FD | 	qmul	local01, local02
0d2e0     04 4E 85 F1 | 	sub	fp, #4
0d2e4     A7 22 02 FB | 	rdlong	local03, fp
0d2e8     10 4E 85 F1 | 	sub	fp, #16
0d2ec     A7 12 02 FB | 	rdlong	arg01, fp
0d2f0     24 4E 85 F1 | 	sub	fp, #36
0d2f4     08 12 06 F1 | 	add	arg01, #8
0d2f8     18 20 62 FD | 	getqx	local02
0d2fc     10 23 02 F1 | 	add	local03, local02
0d300     34 8D B0 FD | 	call	#_pslpeek
0d304     FD 20 02 F6 | 	mov	local02, result1
0d308     24 4E 05 F1 | 	add	fp, #36
0d30c     A7 12 02 FB | 	rdlong	arg01, fp
0d310     24 4E 85 F1 | 	sub	fp, #36
0d314     04 12 06 F1 | 	add	arg01, #4
0d318     1C 8D B0 FD | 	call	#_pslpeek
0d31c     FD 20 02 FD | 	qmul	local02, result1
0d320     3C 4E 05 F1 | 	add	fp, #60
0d324     A7 20 02 FB | 	rdlong	local02, fp
0d328     18 1E 62 FD | 	getqx	local01
0d32c     10 1F 02 FD | 	qmul	local01, local02
0d330     10 4E 85 F1 | 	sub	fp, #16
0d334     A7 20 02 FB | 	rdlong	local02, fp
0d338     18 1E 62 FD | 	getqx	local01
0d33c     0F 23 02 F1 | 	add	local03, local01
0d340     11 21 02 FD | 	qmul	local02, local03
0d344     04 4E 05 F1 | 	add	fp, #4
0d348                 | ' 
0d348                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0d348                 | ' select case arrtype
0d348     18 22 62 FD | 	getqx	local03
0d34c     11 25 02 F1 | 	add	local04, local03
0d350     A7 24 62 FC | 	wrlong	local04, fp
0d354     08 4E 85 F1 | 	sub	fp, #8
0d358     A7 26 02 FB | 	rdlong	local05, fp
0d35c     28 4E 85 F1 | 	sub	fp, #40
0d360     00 27 86 F1 | 	sub	local05, #256
0d364     0C 26 26 F3 | 	fle	local05, #12
0d368     30 26 62 FD | 	jmprel	local05
0d36c                 | LR__1008
0d36c     30 00 90 FD | 	jmp	#LR__1009
0d370     58 00 90 FD | 	jmp	#LR__1010
0d374     88 00 90 FD | 	jmp	#LR__1011
0d378     B8 00 90 FD | 	jmp	#LR__1012
0d37c     10 01 90 FD | 	jmp	#LR__1013
0d380     68 01 90 FD | 	jmp	#LR__1014
0d384     98 01 90 FD | 	jmp	#LR__1015
0d388     C8 01 90 FD | 	jmp	#LR__1016
0d38c     F8 01 90 FD | 	jmp	#LR__1017
0d390     28 02 90 FD | 	jmp	#LR__1018
0d394     58 02 90 FD | 	jmp	#LR__1019
0d398     88 02 90 FD | 	jmp	#LR__1020
0d39c     B8 02 90 FD | 	jmp	#LR__1021
0d3a0                 | LR__1009
0d3a0     A7 12 02 F6 | 	mov	arg01, fp
0d3a4     30 4E 05 F1 | 	add	fp, #48
0d3a8     A7 14 02 FB | 	rdlong	arg02, fp
0d3ac     30 4E 85 F1 | 	sub	fp, #48
0d3b0     0C 16 06 F6 | 	mov	arg03, #12
0d3b4     0B 00 00 FF 
0d3b8     C0 E4 05 F1 | 	add	objptr, ##5824
0d3bc     A8 B5 B0 FD | 	call	#_psram_spin2_write
0d3c0     0B 00 00 FF 
0d3c4     C0 E4 85 F1 | 	sub	objptr, ##5824
0d3c8     94 02 90 FD | 	jmp	#LR__1022
0d3cc                 | LR__1010
0d3cc     30 4E 05 F1 | 	add	fp, #48
0d3d0     A7 12 02 FB | 	rdlong	arg01, fp
0d3d4     30 4E 85 F1 | 	sub	fp, #48
0d3d8     A7 14 02 FB | 	rdlong	arg02, fp
0d3dc     01 16 06 F6 | 	mov	arg03, #1
0d3e0     00 18 06 F6 | 	mov	arg04, #0
0d3e4     0B 00 00 FF 
0d3e8     C0 E4 05 F1 | 	add	objptr, ##5824
0d3ec                 | '     return fill(addr, pattern, count, listPtr, 1)
0d3ec     01 1A 06 F6 | 	mov	arg05, #1
0d3f0     10 B6 B0 FD | 	call	#_psram_spin2_fill
0d3f4     0B 00 00 FF 
0d3f8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d3fc     60 02 90 FD | 	jmp	#LR__1022
0d400                 | LR__1011
0d400     30 4E 05 F1 | 	add	fp, #48
0d404     A7 12 02 FB | 	rdlong	arg01, fp
0d408     30 4E 85 F1 | 	sub	fp, #48
0d40c     A7 14 02 FB | 	rdlong	arg02, fp
0d410     01 16 06 F6 | 	mov	arg03, #1
0d414     00 18 06 F6 | 	mov	arg04, #0
0d418     0B 00 00 FF 
0d41c     C0 E4 05 F1 | 	add	objptr, ##5824
0d420                 | '     return fill(addr, pattern, count, listPtr, 1)
0d420     01 1A 06 F6 | 	mov	arg05, #1
0d424     DC B5 B0 FD | 	call	#_psram_spin2_fill
0d428     0B 00 00 FF 
0d42c     C0 E4 85 F1 | 	sub	objptr, ##5824
0d430     2C 02 90 FD | 	jmp	#LR__1022
0d434                 | LR__1012
0d434     30 4E 05 F1 | 	add	fp, #48
0d438     A7 12 02 FB | 	rdlong	arg01, fp
0d43c     30 4E 85 F1 | 	sub	fp, #48
0d440     A7 14 02 FB | 	rdlong	arg02, fp
0d444     01 16 06 F6 | 	mov	arg03, #1
0d448     00 18 06 F6 | 	mov	arg04, #0
0d44c     0B 00 00 FF 
0d450     C0 E4 05 F1 | 	add	objptr, ##5824
0d454                 | '     return fill(addr, pattern, count, listPtr, 1)
0d454     01 1A 06 F6 | 	mov	arg05, #1
0d458     A8 B5 B0 FD | 	call	#_psram_spin2_fill
0d45c     30 4E 05 F1 | 	add	fp, #48
0d460     A7 12 02 FB | 	rdlong	arg01, fp
0d464     30 4E 85 F1 | 	sub	fp, #48
0d468     01 12 06 F1 | 	add	arg01, #1
0d46c     A7 14 02 FB | 	rdlong	arg02, fp
0d470     08 14 46 F0 | 	shr	arg02, #8
0d474     01 16 06 F6 | 	mov	arg03, #1
0d478     00 18 06 F6 | 	mov	arg04, #0
0d47c                 | '     return fill(addr, pattern, count, listPtr, 1)
0d47c     01 1A 06 F6 | 	mov	arg05, #1
0d480     80 B5 B0 FD | 	call	#_psram_spin2_fill
0d484     0B 00 00 FF 
0d488     C0 E4 85 F1 | 	sub	objptr, ##5824
0d48c     D0 01 90 FD | 	jmp	#LR__1022
0d490                 | LR__1013
0d490     30 4E 05 F1 | 	add	fp, #48
0d494     A7 12 02 FB | 	rdlong	arg01, fp
0d498     30 4E 85 F1 | 	sub	fp, #48
0d49c     A7 14 02 FB | 	rdlong	arg02, fp
0d4a0     01 16 06 F6 | 	mov	arg03, #1
0d4a4     00 18 06 F6 | 	mov	arg04, #0
0d4a8     0B 00 00 FF 
0d4ac     C0 E4 05 F1 | 	add	objptr, ##5824
0d4b0                 | '     return fill(addr, pattern, count, listPtr, 1)
0d4b0     01 1A 06 F6 | 	mov	arg05, #1
0d4b4     4C B5 B0 FD | 	call	#_psram_spin2_fill
0d4b8     30 4E 05 F1 | 	add	fp, #48
0d4bc     A7 12 02 FB | 	rdlong	arg01, fp
0d4c0     30 4E 85 F1 | 	sub	fp, #48
0d4c4     01 12 06 F1 | 	add	arg01, #1
0d4c8     A7 14 02 FB | 	rdlong	arg02, fp
0d4cc     08 14 46 F0 | 	shr	arg02, #8
0d4d0     01 16 06 F6 | 	mov	arg03, #1
0d4d4     00 18 06 F6 | 	mov	arg04, #0
0d4d8                 | '     return fill(addr, pattern, count, listPtr, 1)
0d4d8     01 1A 06 F6 | 	mov	arg05, #1
0d4dc     24 B5 B0 FD | 	call	#_psram_spin2_fill
0d4e0     0B 00 00 FF 
0d4e4     C0 E4 85 F1 | 	sub	objptr, ##5824
0d4e8     74 01 90 FD | 	jmp	#LR__1022
0d4ec                 | LR__1014
0d4ec     30 4E 05 F1 | 	add	fp, #48
0d4f0     A7 12 02 FB | 	rdlong	arg01, fp
0d4f4     30 4E 85 F1 | 	sub	fp, #48
0d4f8     A7 14 02 FB | 	rdlong	arg02, fp
0d4fc     01 16 06 F6 | 	mov	arg03, #1
0d500     00 18 06 F6 | 	mov	arg04, #0
0d504     0B 00 00 FF 
0d508     C0 E4 05 F1 | 	add	objptr, ##5824
0d50c                 | '     return fill(addr, pattern, count, listPtr, 4)
0d50c     04 1A 06 F6 | 	mov	arg05, #4
0d510     F0 B4 B0 FD | 	call	#_psram_spin2_fill
0d514     0B 00 00 FF 
0d518     C0 E4 85 F1 | 	sub	objptr, ##5824
0d51c     40 01 90 FD | 	jmp	#LR__1022
0d520                 | LR__1015
0d520     30 4E 05 F1 | 	add	fp, #48
0d524     A7 12 02 FB | 	rdlong	arg01, fp
0d528     30 4E 85 F1 | 	sub	fp, #48
0d52c     A7 14 02 FB | 	rdlong	arg02, fp
0d530     01 16 06 F6 | 	mov	arg03, #1
0d534     00 18 06 F6 | 	mov	arg04, #0
0d538     0B 00 00 FF 
0d53c     C0 E4 05 F1 | 	add	objptr, ##5824
0d540                 | '     return fill(addr, pattern, count, listPtr, 4)
0d540     04 1A 06 F6 | 	mov	arg05, #4
0d544     BC B4 B0 FD | 	call	#_psram_spin2_fill
0d548     0B 00 00 FF 
0d54c     C0 E4 85 F1 | 	sub	objptr, ##5824
0d550     0C 01 90 FD | 	jmp	#LR__1022
0d554                 | LR__1016
0d554     30 4E 05 F1 | 	add	fp, #48
0d558     A7 12 02 FB | 	rdlong	arg01, fp
0d55c     30 4E 85 F1 | 	sub	fp, #48
0d560     A7 14 02 FB | 	rdlong	arg02, fp
0d564     01 16 06 F6 | 	mov	arg03, #1
0d568     00 18 06 F6 | 	mov	arg04, #0
0d56c     0B 00 00 FF 
0d570     C0 E4 05 F1 | 	add	objptr, ##5824
0d574                 | '     return fill(addr, pattern, count, listPtr, 4)
0d574     04 1A 06 F6 | 	mov	arg05, #4
0d578     88 B4 B0 FD | 	call	#_psram_spin2_fill
0d57c     0B 00 00 FF 
0d580     C0 E4 85 F1 | 	sub	objptr, ##5824
0d584     D8 00 90 FD | 	jmp	#LR__1022
0d588                 | LR__1017
0d588     30 4E 05 F1 | 	add	fp, #48
0d58c     A7 12 02 FB | 	rdlong	arg01, fp
0d590     30 4E 85 F1 | 	sub	fp, #48
0d594     A7 14 02 FB | 	rdlong	arg02, fp
0d598     01 16 06 F6 | 	mov	arg03, #1
0d59c     00 18 06 F6 | 	mov	arg04, #0
0d5a0     0B 00 00 FF 
0d5a4     C0 E4 05 F1 | 	add	objptr, ##5824
0d5a8                 | '     return fill(addr, pattern, count, listPtr, 4)
0d5a8     04 1A 06 F6 | 	mov	arg05, #4
0d5ac     54 B4 B0 FD | 	call	#_psram_spin2_fill
0d5b0     0B 00 00 FF 
0d5b4     C0 E4 85 F1 | 	sub	objptr, ##5824
0d5b8     A4 00 90 FD | 	jmp	#LR__1022
0d5bc                 | LR__1018
0d5bc     30 4E 05 F1 | 	add	fp, #48
0d5c0     A7 12 02 FB | 	rdlong	arg01, fp
0d5c4     30 4E 85 F1 | 	sub	fp, #48
0d5c8     A7 14 02 FB | 	rdlong	arg02, fp
0d5cc     01 16 06 F6 | 	mov	arg03, #1
0d5d0     00 18 06 F6 | 	mov	arg04, #0
0d5d4     0B 00 00 FF 
0d5d8     C0 E4 05 F1 | 	add	objptr, ##5824
0d5dc                 | '     return fill(addr, pattern, count, listPtr, 4)
0d5dc     04 1A 06 F6 | 	mov	arg05, #4
0d5e0     20 B4 B0 FD | 	call	#_psram_spin2_fill
0d5e4     0B 00 00 FF 
0d5e8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d5ec     70 00 90 FD | 	jmp	#LR__1022
0d5f0                 | LR__1019
0d5f0     30 4E 05 F1 | 	add	fp, #48
0d5f4     A7 12 02 FB | 	rdlong	arg01, fp
0d5f8     30 4E 85 F1 | 	sub	fp, #48
0d5fc     A7 14 02 FB | 	rdlong	arg02, fp
0d600     01 16 06 F6 | 	mov	arg03, #1
0d604     00 18 06 F6 | 	mov	arg04, #0
0d608     0B 00 00 FF 
0d60c     C0 E4 05 F1 | 	add	objptr, ##5824
0d610                 | '     return fill(addr, pattern, count, listPtr, 4)
0d610     04 1A 06 F6 | 	mov	arg05, #4
0d614     EC B3 B0 FD | 	call	#_psram_spin2_fill
0d618     0B 00 00 FF 
0d61c     C0 E4 85 F1 | 	sub	objptr, ##5824
0d620     3C 00 90 FD | 	jmp	#LR__1022
0d624                 | LR__1020
0d624     30 4E 05 F1 | 	add	fp, #48
0d628     A7 12 02 FB | 	rdlong	arg01, fp
0d62c     30 4E 85 F1 | 	sub	fp, #48
0d630     A7 14 02 FB | 	rdlong	arg02, fp
0d634     01 16 06 F6 | 	mov	arg03, #1
0d638     00 18 06 F6 | 	mov	arg04, #0
0d63c     0B 00 00 FF 
0d640     C0 E4 05 F1 | 	add	objptr, ##5824
0d644                 | '     return fill(addr, pattern, count, listPtr, 4)
0d644     04 1A 06 F6 | 	mov	arg05, #4
0d648     B8 B3 B0 FD | 	call	#_psram_spin2_fill
0d64c     0B 00 00 FF 
0d650     C0 E4 85 F1 | 	sub	objptr, ##5824
0d654     08 00 90 FD | 	jmp	#LR__1022
0d658                 | LR__1021
0d658     2F 12 06 F6 | 	mov	arg01, #47
0d65c     1C 88 B0 FD | 	call	#_printerror
0d660                 | LR__1022
0d660                 | LR__1023
0d660     A7 F0 03 F6 | 	mov	ptra, fp
0d664     B2 00 A0 FD | 	call	#popregs_
0d668                 | _do_assign_ret
0d668     2D 00 64 FD | 	ret
0d66c                 | 
0d66c                 | ' 
0d66c                 | ' 
0d66c                 | ' ' --------------------- Read a variable and push to the stack
0d66c                 | ' 
0d66c                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0d66c                 | ' 
0d66c                 | ' sub do_getvar
0d66c                 | _do_getvar
0d66c     04 4A 05 F6 | 	mov	COUNT_, #4
0d670     A8 00 A0 FD | 	call	#pushregs_
0d674     3C F0 07 F1 | 	add	ptra, #60
0d678                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0d678                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0d678     69 00 00 FF 
0d67c     44 E5 05 F1 | 	add	objptr, ##54084
0d680     F2 1E 02 FB | 	rdlong	local01, objptr
0d684     0F 17 02 F6 | 	mov	arg03, local01
0d688     01 16 66 F0 | 	shl	arg03, #1
0d68c     0F 17 02 F1 | 	add	arg03, local01
0d690     02 16 66 F0 | 	shl	arg03, #2
0d694     03 00 00 FF 
0d698     04 E4 85 F1 | 	sub	objptr, ##1540
0d69c     F2 16 02 F1 | 	add	arg03, objptr
0d6a0     04 16 06 F1 | 	add	arg03, #4
0d6a4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d6a8     66 00 00 FF 
0d6ac     40 E5 85 F1 | 	sub	objptr, ##52544
0d6b0     C4 00 90 5D |  if_ne	jmp	#LR__1031
0d6b4     69 00 00 FF 
0d6b8     44 E5 05 F1 | 	add	objptr, ##54084
0d6bc     F2 1E 02 FB | 	rdlong	local01, objptr
0d6c0     0F 13 02 F6 | 	mov	arg01, local01
0d6c4     01 12 66 F0 | 	shl	arg01, #1
0d6c8     0F 13 02 F1 | 	add	arg01, local01
0d6cc     02 12 66 F0 | 	shl	arg01, #2
0d6d0     03 00 00 FF 
0d6d4     04 E4 85 F1 | 	sub	objptr, ##1540
0d6d8     F2 12 02 F1 | 	add	arg01, objptr
0d6dc     09 1F 02 FB | 	rdlong	local01, arg01
0d6e0     04 1E 66 F0 | 	shl	local01, #4
0d6e4     32 00 00 FF 
0d6e8     74 E4 85 F1 | 	sub	objptr, ##25716
0d6ec     F2 1E 02 F1 | 	add	local01, objptr
0d6f0     04 1E 06 F1 | 	add	local01, #4
0d6f4     0F 13 02 FB | 	rdlong	arg01, local01
0d6f8     04 1E 06 F1 | 	add	local01, #4
0d6fc     0F 1F 02 FB | 	rdlong	local01, local01
0d700     A7 12 62 FC | 	wrlong	arg01, fp
0d704     04 4E 05 F1 | 	add	fp, #4
0d708     A7 1E 62 FC | 	wrlong	local01, fp
0d70c     35 00 00 FF 
0d710     78 E4 05 F1 | 	add	objptr, ##27256
0d714     F2 1E 02 FB | 	rdlong	local01, objptr
0d718     0F 13 02 F6 | 	mov	arg01, local01
0d71c     01 12 66 F0 | 	shl	arg01, #1
0d720     0F 13 02 F1 | 	add	arg01, local01
0d724     02 12 66 F0 | 	shl	arg01, #2
0d728     03 00 00 FF 
0d72c     04 E4 85 F1 | 	sub	objptr, ##1540
0d730     F2 12 02 F1 | 	add	arg01, objptr
0d734     09 1F 02 FB | 	rdlong	local01, arg01
0d738     04 1E 66 F0 | 	shl	local01, #4
0d73c     32 00 00 FF 
0d740     74 E4 85 F1 | 	sub	objptr, ##25716
0d744     F2 1E 02 F1 | 	add	local01, objptr
0d748     0C 1E 06 F1 | 	add	local01, #12
0d74c     0F 1F 02 FB | 	rdlong	local01, local01
0d750     04 4E 05 F1 | 	add	fp, #4
0d754     A7 1E 62 FC | 	wrlong	local01, fp
0d758                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0d758                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0d758                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0d758     08 4E 85 F1 | 	sub	fp, #8
0d75c     00 1F 16 F2 | 	cmp	local01, #256 wc
0d760     34 00 00 FF 
0d764     CC E4 85 F1 | 	sub	objptr, ##26828
0d768     0C 00 90 3D |  if_ae	jmp	#LR__1030
0d76c     A7 12 02 F6 | 	mov	arg01, fp
0d770     5C C2 BF FD | 	call	#_push
0d774     A0 04 90 FD | 	jmp	#LR__1052
0d778                 | LR__1030
0d778                 | LR__1031
0d778     69 00 00 FF 
0d77c     44 E5 05 F1 | 	add	objptr, ##54084
0d780     F2 16 02 FB | 	rdlong	arg03, objptr
0d784     0B 15 02 F6 | 	mov	arg02, arg03
0d788     01 14 66 F0 | 	shl	arg02, #1
0d78c     0B 15 02 F1 | 	add	arg02, arg03
0d790     02 14 66 F0 | 	shl	arg02, #2
0d794     03 00 00 FF 
0d798     04 E4 85 F1 | 	sub	objptr, ##1540
0d79c     F2 14 02 F1 | 	add	arg02, objptr
0d7a0     0A 17 02 FB | 	rdlong	arg03, arg02
0d7a4     04 16 66 F0 | 	shl	arg03, #4
0d7a8     32 00 00 FF 
0d7ac     74 E4 85 F1 | 	sub	objptr, ##25716
0d7b0     F2 16 02 F1 | 	add	arg03, objptr
0d7b4     04 16 06 F1 | 	add	arg03, #4
0d7b8     0B 13 02 FB | 	rdlong	arg01, arg03
0d7bc     0C 4E 05 F1 | 	add	fp, #12
0d7c0     A7 12 62 FC | 	wrlong	arg01, fp
0d7c4     0C 4E 85 F1 | 	sub	fp, #12
0d7c8     34 00 00 FF 
0d7cc     CC E4 85 F1 | 	sub	objptr, ##26828
0d7d0     64 88 B0 FD | 	call	#_pslpeek
0d7d4     FD FA 31 F9 | 	getword	result1, result1, #0
0d7d8     10 4E 05 F1 | 	add	fp, #16
0d7dc     A7 FA 61 FC | 	wrlong	result1, fp
0d7e0     69 00 00 FF 
0d7e4     44 E5 05 F1 | 	add	objptr, ##54084
0d7e8     F2 16 02 FB | 	rdlong	arg03, objptr
0d7ec     0B 15 02 F6 | 	mov	arg02, arg03
0d7f0     01 14 66 F0 | 	shl	arg02, #1
0d7f4     0B 15 02 F1 | 	add	arg02, arg03
0d7f8     02 14 66 F0 | 	shl	arg02, #2
0d7fc     03 00 00 FF 
0d800     04 E4 85 F1 | 	sub	objptr, ##1540
0d804     F2 14 02 F1 | 	add	arg02, objptr
0d808     04 14 06 F1 | 	add	arg02, #4
0d80c     0A 17 02 FB | 	rdlong	arg03, arg02
0d810     04 4E 05 F1 | 	add	fp, #4
0d814     A7 16 62 FC | 	wrlong	arg03, fp
0d818     08 4E 85 F1 | 	sub	fp, #8
0d81c     A7 12 02 FB | 	rdlong	arg01, fp
0d820     0C 4E 85 F1 | 	sub	fp, #12
0d824     02 12 06 F1 | 	add	arg01, #2
0d828     66 00 00 FF 
0d82c     40 E5 85 F1 | 	sub	objptr, ##52544
0d830     AC 87 B0 FD | 	call	#_pspeek
0d834     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d838     18 4E 05 F1 | 	add	fp, #24
0d83c     A7 FA 61 FC | 	wrlong	result1, fp
0d840     0C 4E 85 F1 | 	sub	fp, #12
0d844     A7 12 02 FB | 	rdlong	arg01, fp
0d848     0C 4E 85 F1 | 	sub	fp, #12
0d84c     04 12 06 F1 | 	add	arg01, #4
0d850     E4 87 B0 FD | 	call	#_pslpeek
0d854     1C 4E 05 F1 | 	add	fp, #28
0d858     A7 FA 61 FC | 	wrlong	result1, fp
0d85c     10 4E 85 F1 | 	sub	fp, #16
0d860     A7 12 02 FB | 	rdlong	arg01, fp
0d864     0C 4E 85 F1 | 	sub	fp, #12
0d868     08 12 06 F1 | 	add	arg01, #8
0d86c     C8 87 B0 FD | 	call	#_pslpeek
0d870     20 4E 05 F1 | 	add	fp, #32
0d874     A7 FA 61 FC | 	wrlong	result1, fp
0d878     14 4E 85 F1 | 	sub	fp, #20
0d87c     A7 12 02 FB | 	rdlong	arg01, fp
0d880     0C 4E 85 F1 | 	sub	fp, #12
0d884     0C 12 06 F1 | 	add	arg01, #12
0d888     AC 87 B0 FD | 	call	#_pslpeek
0d88c     24 4E 05 F1 | 	add	fp, #36
0d890     A7 FA 61 FC | 	wrlong	result1, fp
0d894                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0d894                 | ' esize=pspeek(arrptr+2)
0d894                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0d894                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0d894                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0d894                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0d894     10 4E 85 F1 | 	sub	fp, #16
0d898     A7 16 02 FB | 	rdlong	arg03, fp
0d89c     14 4E 85 F1 | 	sub	fp, #20
0d8a0     03 16 16 F2 | 	cmp	arg03, #3 wc
0d8a4     38 00 90 CD |  if_b	jmp	#LR__1032
0d8a8     8C C0 BF FD | 	call	#_pop
0d8ac     FF 16 02 F6 | 	mov	arg03, result3
0d8b0     A7 FA 61 FC | 	wrlong	result1, fp
0d8b4     04 4E 05 F1 | 	add	fp, #4
0d8b8     A7 FC 61 FC | 	wrlong	result2, fp
0d8bc     04 4E 05 F1 | 	add	fp, #4
0d8c0     A7 16 62 FC | 	wrlong	arg03, fp
0d8c4     08 4E 85 F1 | 	sub	fp, #8
0d8c8     A7 12 02 F6 | 	mov	arg01, fp
0d8cc     18 3A B0 FD | 	call	#_converttoint
0d8d0     30 4E 05 F1 | 	add	fp, #48
0d8d4     A7 FA 61 FC | 	wrlong	result1, fp
0d8d8     30 4E 85 F1 | 	sub	fp, #48
0d8dc     0C 00 90 FD | 	jmp	#LR__1033
0d8e0                 | LR__1032
0d8e0     30 4E 05 F1 | 	add	fp, #48
0d8e4     A7 00 68 FC | 	wrlong	#0, fp
0d8e8     30 4E 85 F1 | 	sub	fp, #48
0d8ec                 | LR__1033
0d8ec                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0d8ec     14 4E 05 F1 | 	add	fp, #20
0d8f0     A7 16 02 FB | 	rdlong	arg03, fp
0d8f4     14 4E 85 F1 | 	sub	fp, #20
0d8f8     02 16 16 F2 | 	cmp	arg03, #2 wc
0d8fc     38 00 90 CD |  if_b	jmp	#LR__1034
0d900     34 C0 BF FD | 	call	#_pop
0d904     FF 16 02 F6 | 	mov	arg03, result3
0d908     A7 FA 61 FC | 	wrlong	result1, fp
0d90c     04 4E 05 F1 | 	add	fp, #4
0d910     A7 FC 61 FC | 	wrlong	result2, fp
0d914     04 4E 05 F1 | 	add	fp, #4
0d918     A7 16 62 FC | 	wrlong	arg03, fp
0d91c     08 4E 85 F1 | 	sub	fp, #8
0d920     A7 12 02 F6 | 	mov	arg01, fp
0d924     C0 39 B0 FD | 	call	#_converttoint
0d928     2C 4E 05 F1 | 	add	fp, #44
0d92c     A7 FA 61 FC | 	wrlong	result1, fp
0d930     2C 4E 85 F1 | 	sub	fp, #44
0d934     0C 00 90 FD | 	jmp	#LR__1035
0d938                 | LR__1034
0d938     2C 4E 05 F1 | 	add	fp, #44
0d93c     A7 00 68 FC | 	wrlong	#0, fp
0d940     2C 4E 85 F1 | 	sub	fp, #44
0d944                 | LR__1035
0d944                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0d944     14 4E 05 F1 | 	add	fp, #20
0d948     A7 16 02 FB | 	rdlong	arg03, fp
0d94c     14 4E 85 F1 | 	sub	fp, #20
0d950     01 16 16 F2 | 	cmp	arg03, #1 wc
0d954     38 00 90 CD |  if_b	jmp	#LR__1036
0d958     DC BF BF FD | 	call	#_pop
0d95c     FF 16 02 F6 | 	mov	arg03, result3
0d960     A7 FA 61 FC | 	wrlong	result1, fp
0d964     04 4E 05 F1 | 	add	fp, #4
0d968     A7 FC 61 FC | 	wrlong	result2, fp
0d96c     04 4E 05 F1 | 	add	fp, #4
0d970     A7 16 62 FC | 	wrlong	arg03, fp
0d974     08 4E 85 F1 | 	sub	fp, #8
0d978     A7 12 02 F6 | 	mov	arg01, fp
0d97c     68 39 B0 FD | 	call	#_converttoint
0d980     28 4E 05 F1 | 	add	fp, #40
0d984     A7 FA 61 FC | 	wrlong	result1, fp
0d988     28 4E 85 F1 | 	sub	fp, #40
0d98c     0C 00 90 FD | 	jmp	#LR__1037
0d990                 | LR__1036
0d990     28 4E 05 F1 | 	add	fp, #40
0d994     A7 00 68 FC | 	wrlong	#0, fp
0d998     28 4E 85 F1 | 	sub	fp, #40
0d99c                 | LR__1037
0d99c     0C 4E 05 F1 | 	add	fp, #12
0d9a0     A7 20 02 FB | 	rdlong	local02, fp
0d9a4     1C 4E 05 F1 | 	add	fp, #28
0d9a8     A7 22 02 FB | 	rdlong	local03, fp
0d9ac     04 4E 05 F1 | 	add	fp, #4
0d9b0     A7 FC 01 FB | 	rdlong	result2, fp
0d9b4     10 4E 85 F1 | 	sub	fp, #16
0d9b8     A7 FE 01 FB | 	rdlong	result3, fp
0d9bc     FF FC 01 FD | 	qmul	result2, result3
0d9c0     10 20 06 F1 | 	add	local02, #16
0d9c4     14 4E 05 F1 | 	add	fp, #20
0d9c8     A7 FC 01 FB | 	rdlong	result2, fp
0d9cc     18 FA 61 FD | 	getqx	result1
0d9d0     FF FC 01 FD | 	qmul	result2, result3
0d9d4     FD 22 02 F1 | 	add	local03, result1
0d9d8     10 4E 85 F1 | 	sub	fp, #16
0d9dc     A7 FE 01 FB | 	rdlong	result3, fp
0d9e0     18 FC 61 FD | 	getqx	result2
0d9e4     FF FC 01 FD | 	qmul	result2, result3
0d9e8     08 4E 85 F1 | 	sub	fp, #8
0d9ec     A7 FE 01 FB | 	rdlong	result3, fp
0d9f0     18 FC 61 FD | 	getqx	result2
0d9f4     FE 22 02 F1 | 	add	local03, result2
0d9f8     FF 22 02 FD | 	qmul	local03, result3
0d9fc     1C 4E 05 F1 | 	add	fp, #28
0da00                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0da00                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0da00                 | ' 
0da00                 | ' select case vartype
0da00     18 FC 61 FD | 	getqx	result2
0da04     FE 20 02 F1 | 	add	local02, result2
0da08     A7 20 62 FC | 	wrlong	local02, fp
0da0c     24 4E 85 F1 | 	sub	fp, #36
0da10     A7 24 02 FB | 	rdlong	local04, fp
0da14     10 4E 85 F1 | 	sub	fp, #16
0da18     00 25 86 F1 | 	sub	local04, #256
0da1c     0C 24 26 F3 | 	fle	local04, #12
0da20     30 24 62 FD | 	jmprel	local04
0da24                 | LR__1038
0da24     30 00 90 FD | 	jmp	#LR__1039
0da28     58 00 90 FD | 	jmp	#LR__1040
0da2c     8C 00 90 FD | 	jmp	#LR__1041
0da30     AC 00 90 FD | 	jmp	#LR__1042
0da34     E8 00 90 FD | 	jmp	#LR__1043
0da38     08 01 90 FD | 	jmp	#LR__1044
0da3c     24 01 90 FD | 	jmp	#LR__1045
0da40     40 01 90 FD | 	jmp	#LR__1046
0da44     50 01 90 FD | 	jmp	#LR__1047
0da48     60 01 90 FD | 	jmp	#LR__1048
0da4c     7C 01 90 FD | 	jmp	#LR__1049
0da50     8C 01 90 FD | 	jmp	#LR__1050
0da54     B8 01 90 FD | 	jmp	#LR__1051
0da58                 | LR__1039
0da58     A7 12 02 F6 | 	mov	arg01, fp
0da5c     34 4E 05 F1 | 	add	fp, #52
0da60     A7 14 02 FB | 	rdlong	arg02, fp
0da64     34 4E 85 F1 | 	sub	fp, #52
0da68     0C 16 06 F6 | 	mov	arg03, #12
0da6c     0B 00 00 FF 
0da70     C0 E4 05 F1 | 	add	objptr, ##5824
0da74     54 AE B0 FD | 	call	#_psram_spin2_read1
0da78     0B 00 00 FF 
0da7c     C0 E4 85 F1 | 	sub	objptr, ##5824
0da80     8C 01 90 FD | 	jmp	#LR__1051
0da84                 | LR__1040
0da84     08 4E 05 F1 | 	add	fp, #8
0da88     A7 38 68 FC | 	wrlong	#28, fp
0da8c     2C 4E 05 F1 | 	add	fp, #44
0da90     A7 12 02 FB | 	rdlong	arg01, fp
0da94     34 4E 85 F1 | 	sub	fp, #52
0da98     44 85 B0 FD | 	call	#_pspeek
0da9c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0daa0     A7 FA 61 FC | 	wrlong	result1, fp
0daa4     80 FA 15 F2 | 	cmp	result1, #128 wc
0daa8     00 1F 66 36 |  if_ae	neg	local01, #256
0daac     A7 22 02 3B |  if_ae	rdlong	local03, fp
0dab0     11 1F 42 35 |  if_ae	or	local01, local03
0dab4     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0dab8     54 01 90 FD | 	jmp	#LR__1051
0dabc                 | LR__1041
0dabc     08 4E 05 F1 | 	add	fp, #8
0dac0     A7 3A 68 FC | 	wrlong	#29, fp
0dac4     2C 4E 05 F1 | 	add	fp, #44
0dac8     A7 12 02 FB | 	rdlong	arg01, fp
0dacc     34 4E 85 F1 | 	sub	fp, #52
0dad0     0C 85 B0 FD | 	call	#_pspeek
0dad4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0dad8     A7 FA 61 FC | 	wrlong	result1, fp
0dadc     30 01 90 FD | 	jmp	#LR__1051
0dae0                 | LR__1042
0dae0     08 4E 05 F1 | 	add	fp, #8
0dae4     A7 38 68 FC | 	wrlong	#28, fp
0dae8     2C 4E 05 F1 | 	add	fp, #44
0daec     A7 12 02 FB | 	rdlong	arg01, fp
0daf0     34 4E 85 F1 | 	sub	fp, #52
0daf4     40 85 B0 FD | 	call	#_pslpeek
0daf8     FD FA 31 F9 | 	getword	result1, result1, #0
0dafc     A7 FA 61 FC | 	wrlong	result1, fp
0db00     40 00 00 FF 
0db04     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0db08     FF 7F 00 3F 
0db0c     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0db10     A7 22 02 3B |  if_ae	rdlong	local03, fp
0db14     11 1F 42 35 |  if_ae	or	local01, local03
0db18     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0db1c     F0 00 90 FD | 	jmp	#LR__1051
0db20                 | LR__1043
0db20     08 4E 05 F1 | 	add	fp, #8
0db24     A7 3A 68 FC | 	wrlong	#29, fp
0db28     2C 4E 05 F1 | 	add	fp, #44
0db2c     A7 12 02 FB | 	rdlong	arg01, fp
0db30     34 4E 85 F1 | 	sub	fp, #52
0db34     00 85 B0 FD | 	call	#_pslpeek
0db38     FD FA 31 F9 | 	getword	result1, result1, #0
0db3c     A7 FA 61 FC | 	wrlong	result1, fp
0db40     CC 00 90 FD | 	jmp	#LR__1051
0db44                 | LR__1044
0db44     08 4E 05 F1 | 	add	fp, #8
0db48     A7 38 68 FC | 	wrlong	#28, fp
0db4c     2C 4E 05 F1 | 	add	fp, #44
0db50     A7 12 02 FB | 	rdlong	arg01, fp
0db54     34 4E 85 F1 | 	sub	fp, #52
0db58     DC 84 B0 FD | 	call	#_pslpeek
0db5c     A7 FA 61 FC | 	wrlong	result1, fp
0db60     AC 00 90 FD | 	jmp	#LR__1051
0db64                 | LR__1045
0db64     08 4E 05 F1 | 	add	fp, #8
0db68     A7 3A 68 FC | 	wrlong	#29, fp
0db6c     2C 4E 05 F1 | 	add	fp, #44
0db70     A7 12 02 FB | 	rdlong	arg01, fp
0db74     34 4E 85 F1 | 	sub	fp, #52
0db78     BC 84 B0 FD | 	call	#_pslpeek
0db7c     A7 FA 61 FC | 	wrlong	result1, fp
0db80     8C 00 90 FD | 	jmp	#LR__1051
0db84                 | LR__1046
0db84     08 4E 05 F1 | 	add	fp, #8
0db88     A7 FE 69 FC | 	wrlong	#255, fp
0db8c     08 4E 85 F1 | 	sub	fp, #8
0db90     A7 60 68 FC | 	wrlong	#48, fp
0db94     78 00 90 FD | 	jmp	#LR__1051
0db98                 | LR__1047
0db98     08 4E 05 F1 | 	add	fp, #8
0db9c     A7 FE 69 FC | 	wrlong	#255, fp
0dba0     08 4E 85 F1 | 	sub	fp, #8
0dba4     A7 60 68 FC | 	wrlong	#48, fp
0dba8     64 00 90 FD | 	jmp	#LR__1051
0dbac                 | LR__1048
0dbac     08 4E 05 F1 | 	add	fp, #8
0dbb0     A7 3C 68 FC | 	wrlong	#30, fp
0dbb4     2C 4E 05 F1 | 	add	fp, #44
0dbb8     A7 12 02 FB | 	rdlong	arg01, fp
0dbbc     34 4E 85 F1 | 	sub	fp, #52
0dbc0     74 84 B0 FD | 	call	#_pslpeek
0dbc4     A7 FA 61 FC | 	wrlong	result1, fp
0dbc8     44 00 90 FD | 	jmp	#LR__1051
0dbcc                 | LR__1049
0dbcc     08 4E 05 F1 | 	add	fp, #8
0dbd0     A7 FE 69 FC | 	wrlong	#255, fp
0dbd4     08 4E 85 F1 | 	sub	fp, #8
0dbd8     A7 60 68 FC | 	wrlong	#48, fp
0dbdc     30 00 90 FD | 	jmp	#LR__1051
0dbe0                 | LR__1050
0dbe0     08 4E 05 F1 | 	add	fp, #8
0dbe4     A7 3E 68 FC | 	wrlong	#31, fp
0dbe8     2C 4E 05 F1 | 	add	fp, #44
0dbec     A7 12 02 FB | 	rdlong	arg01, fp
0dbf0     34 4E 85 F1 | 	sub	fp, #52
0dbf4     40 84 B0 FD | 	call	#_pslpeek
0dbf8     A7 FA 61 FC | 	wrlong	result1, fp
0dbfc     00 04 00 FF 
0dc00     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0dc04     08 4E 05 31 |  if_ae	add	fp, #8
0dc08     A7 56 68 3C |  if_ae	wrlong	#43, fp
0dc0c     08 4E 85 31 |  if_ae	sub	fp, #8
0dc10                 | LR__1051
0dc10     A7 12 02 F6 | 	mov	arg01, fp
0dc14     B8 BD BF FD | 	call	#_push
0dc18                 | LR__1052
0dc18     A7 F0 03 F6 | 	mov	ptra, fp
0dc1c     B2 00 A0 FD | 	call	#popregs_
0dc20                 | _do_getvar_ret
0dc20     2D 00 64 FD | 	ret
0dc24                 | 
0dc24                 | ' 
0dc24                 | ' '------------------------ Operators 
0dc24                 | ' 
0dc24                 | ' sub do_plus 
0dc24                 | _do_plus
0dc24     05 4A 05 F6 | 	mov	COUNT_, #5
0dc28     A8 00 A0 FD | 	call	#pushregs_
0dc2c     18 F0 07 F1 | 	add	ptra, #24
0dc30     04 BD BF FD | 	call	#_pop
0dc34     FD 1E 02 F6 | 	mov	local01, result1
0dc38     FE 20 02 F6 | 	mov	local02, result2
0dc3c     FF 22 02 F6 | 	mov	local03, result3
0dc40     0C 4E 05 F1 | 	add	fp, #12
0dc44     A7 1E 62 FC | 	wrlong	local01, fp
0dc48     04 4E 05 F1 | 	add	fp, #4
0dc4c     A7 20 62 FC | 	wrlong	local02, fp
0dc50     04 4E 05 F1 | 	add	fp, #4
0dc54     A7 22 62 FC | 	wrlong	local03, fp
0dc58     14 4E 85 F1 | 	sub	fp, #20
0dc5c     D8 BC BF FD | 	call	#_pop
0dc60     FF 22 02 F6 | 	mov	local03, result3
0dc64     A7 FA 61 FC | 	wrlong	result1, fp
0dc68     04 4E 05 F1 | 	add	fp, #4
0dc6c     A7 FC 61 FC | 	wrlong	result2, fp
0dc70     04 4E 05 F1 | 	add	fp, #4
0dc74     A7 22 62 FC | 	wrlong	local03, fp
0dc78                 | ' 
0dc78                 | ' t2=pop()
0dc78                 | ' t1=pop()
0dc78                 | ' 
0dc78                 | ' 
0dc78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0dc78     08 4E 85 F1 | 	sub	fp, #8
0dc7c     1D 22 0E F2 | 	cmp	local03, #29 wz
0dc80     14 4E 05 A1 |  if_e	add	fp, #20
0dc84     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc88     14 4E 85 A1 |  if_e	sub	fp, #20
0dc8c     12 23 02 A6 |  if_e	mov	local03, local04
0dc90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dc94     1C 00 90 5D |  if_ne	jmp	#LR__1060
0dc98     A7 1E 02 FB | 	rdlong	local01, fp
0dc9c     0C 4E 05 F1 | 	add	fp, #12
0dca0     A7 20 02 FB | 	rdlong	local02, fp
0dca4     0C 4E 85 F1 | 	sub	fp, #12
0dca8     10 1F 02 F1 | 	add	local01, local02
0dcac     A7 1E 62 FC | 	wrlong	local01, fp
0dcb0     48 04 90 FD | 	jmp	#LR__1075
0dcb4                 | LR__1060
0dcb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0dcb4     08 4E 05 F1 | 	add	fp, #8
0dcb8     A7 1E 02 FB | 	rdlong	local01, fp
0dcbc     08 4E 85 F1 | 	sub	fp, #8
0dcc0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dcc4     14 4E 05 A1 |  if_e	add	fp, #20
0dcc8     A7 24 02 AB |  if_e	rdlong	local04, fp
0dccc     14 4E 85 A1 |  if_e	sub	fp, #20
0dcd0     12 23 02 A6 |  if_e	mov	local03, local04
0dcd4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dcd8     28 00 90 5D |  if_ne	jmp	#LR__1061
0dcdc     A7 1E 02 FB | 	rdlong	local01, fp
0dce0     0C 4E 05 F1 | 	add	fp, #12
0dce4     A7 20 02 FB | 	rdlong	local02, fp
0dce8     0C 4E 85 F1 | 	sub	fp, #12
0dcec     10 1F 02 F1 | 	add	local01, local02
0dcf0     A7 1E 62 FC | 	wrlong	local01, fp
0dcf4     08 4E 05 F1 | 	add	fp, #8
0dcf8     A7 38 68 FC | 	wrlong	#28, fp
0dcfc     08 4E 85 F1 | 	sub	fp, #8
0dd00     F8 03 90 FD | 	jmp	#LR__1075
0dd04                 | LR__1061
0dd04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0dd04     08 4E 05 F1 | 	add	fp, #8
0dd08     A7 1E 02 FB | 	rdlong	local01, fp
0dd0c     08 4E 85 F1 | 	sub	fp, #8
0dd10     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dd14     14 4E 05 A1 |  if_e	add	fp, #20
0dd18     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd1c     14 4E 85 A1 |  if_e	sub	fp, #20
0dd20     12 23 02 A6 |  if_e	mov	local03, local04
0dd24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dd28     30 00 90 5D |  if_ne	jmp	#LR__1062
0dd2c     A7 12 02 FB | 	rdlong	arg01, fp
0dd30     EC DD B0 FD | 	call	#__system___float_fromuns
0dd34     FD 12 02 F6 | 	mov	arg01, result1
0dd38     0C 4E 05 F1 | 	add	fp, #12
0dd3c     A7 14 02 FB | 	rdlong	arg02, fp
0dd40     0C 4E 85 F1 | 	sub	fp, #12
0dd44     0C DE B0 FD | 	call	#__system___float_add
0dd48     A7 FA 61 FC | 	wrlong	result1, fp
0dd4c     08 4E 05 F1 | 	add	fp, #8
0dd50     A7 3C 68 FC | 	wrlong	#30, fp
0dd54     08 4E 85 F1 | 	sub	fp, #8
0dd58     A0 03 90 FD | 	jmp	#LR__1075
0dd5c                 | LR__1062
0dd5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0dd5c     08 4E 05 F1 | 	add	fp, #8
0dd60     A7 1E 02 FB | 	rdlong	local01, fp
0dd64     08 4E 85 F1 | 	sub	fp, #8
0dd68     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd6c     14 4E 05 A1 |  if_e	add	fp, #20
0dd70     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd74     14 4E 85 A1 |  if_e	sub	fp, #20
0dd78     12 23 02 A6 |  if_e	mov	local03, local04
0dd7c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dd80     1C 00 90 5D |  if_ne	jmp	#LR__1063
0dd84     A7 1E 02 FB | 	rdlong	local01, fp
0dd88     0C 4E 05 F1 | 	add	fp, #12
0dd8c     A7 20 02 FB | 	rdlong	local02, fp
0dd90     0C 4E 85 F1 | 	sub	fp, #12
0dd94     10 1F 02 F1 | 	add	local01, local02
0dd98     A7 1E 62 FC | 	wrlong	local01, fp
0dd9c     5C 03 90 FD | 	jmp	#LR__1075
0dda0                 | LR__1063
0dda0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0dda0     08 4E 05 F1 | 	add	fp, #8
0dda4     A7 1E 02 FB | 	rdlong	local01, fp
0dda8     08 4E 85 F1 | 	sub	fp, #8
0ddac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ddb0     14 4E 05 A1 |  if_e	add	fp, #20
0ddb4     A7 24 02 AB |  if_e	rdlong	local04, fp
0ddb8     14 4E 85 A1 |  if_e	sub	fp, #20
0ddbc     12 23 02 A6 |  if_e	mov	local03, local04
0ddc0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ddc4     1C 00 90 5D |  if_ne	jmp	#LR__1064
0ddc8     A7 1E 02 FB | 	rdlong	local01, fp
0ddcc     0C 4E 05 F1 | 	add	fp, #12
0ddd0     A7 20 02 FB | 	rdlong	local02, fp
0ddd4     0C 4E 85 F1 | 	sub	fp, #12
0ddd8     10 1F 02 F1 | 	add	local01, local02
0dddc     A7 1E 62 FC | 	wrlong	local01, fp
0dde0     18 03 90 FD | 	jmp	#LR__1075
0dde4                 | LR__1064
0dde4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0dde4     08 4E 05 F1 | 	add	fp, #8
0dde8     A7 1E 02 FB | 	rdlong	local01, fp
0ddec     08 4E 85 F1 | 	sub	fp, #8
0ddf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ddf4     14 4E 05 A1 |  if_e	add	fp, #20
0ddf8     A7 24 02 AB |  if_e	rdlong	local04, fp
0ddfc     14 4E 85 A1 |  if_e	sub	fp, #20
0de00     12 23 02 A6 |  if_e	mov	local03, local04
0de04     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0de08     40 00 90 5D |  if_ne	jmp	#LR__1065
0de0c     A7 12 02 FB | 	rdlong	arg01, fp
0de10     09 13 52 F6 | 	abs	arg01, arg01 wc
0de14     1F 26 C6 C9 |  if_b	decod	local05, #31
0de18     00 26 06 36 |  if_ae	mov	local05, #0
0de1c     00 DD B0 FD | 	call	#__system___float_fromuns
0de20     13 FB 61 F5 | 	xor	result1, local05
0de24     FD 12 02 F6 | 	mov	arg01, result1
0de28     0C 4E 05 F1 | 	add	fp, #12
0de2c     A7 14 02 FB | 	rdlong	arg02, fp
0de30     0C 4E 85 F1 | 	sub	fp, #12
0de34     1C DD B0 FD | 	call	#__system___float_add
0de38     A7 FA 61 FC | 	wrlong	result1, fp
0de3c     08 4E 05 F1 | 	add	fp, #8
0de40     A7 3C 68 FC | 	wrlong	#30, fp
0de44     08 4E 85 F1 | 	sub	fp, #8
0de48     B0 02 90 FD | 	jmp	#LR__1075
0de4c                 | LR__1065
0de4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0de4c     08 4E 05 F1 | 	add	fp, #8
0de50     A7 1E 02 FB | 	rdlong	local01, fp
0de54     08 4E 85 F1 | 	sub	fp, #8
0de58     1E 1E 0E F2 | 	cmp	local01, #30 wz
0de5c     14 4E 05 A1 |  if_e	add	fp, #20
0de60     A7 24 02 AB |  if_e	rdlong	local04, fp
0de64     14 4E 85 A1 |  if_e	sub	fp, #20
0de68     12 23 02 A6 |  if_e	mov	local03, local04
0de6c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de70     28 00 90 5D |  if_ne	jmp	#LR__1066
0de74     A7 1E 02 FB | 	rdlong	local01, fp
0de78     0C 4E 05 F1 | 	add	fp, #12
0de7c     A7 12 02 FB | 	rdlong	arg01, fp
0de80     0C 4E 85 F1 | 	sub	fp, #12
0de84     98 DC B0 FD | 	call	#__system___float_fromuns
0de88     FD 14 02 F6 | 	mov	arg02, result1
0de8c     0F 13 02 F6 | 	mov	arg01, local01
0de90     C0 DC B0 FD | 	call	#__system___float_add
0de94     A7 FA 61 FC | 	wrlong	result1, fp
0de98     60 02 90 FD | 	jmp	#LR__1075
0de9c                 | LR__1066
0de9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0de9c     08 4E 05 F1 | 	add	fp, #8
0dea0     A7 1E 02 FB | 	rdlong	local01, fp
0dea4     08 4E 85 F1 | 	sub	fp, #8
0dea8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0deac     14 4E 05 A1 |  if_e	add	fp, #20
0deb0     A7 24 02 AB |  if_e	rdlong	local04, fp
0deb4     14 4E 85 A1 |  if_e	sub	fp, #20
0deb8     12 23 02 A6 |  if_e	mov	local03, local04
0debc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dec0     38 00 90 5D |  if_ne	jmp	#LR__1067
0dec4     A7 1E 02 FB | 	rdlong	local01, fp
0dec8     0C 4E 05 F1 | 	add	fp, #12
0decc     A7 12 02 FB | 	rdlong	arg01, fp
0ded0     0C 4E 85 F1 | 	sub	fp, #12
0ded4     09 13 52 F6 | 	abs	arg01, arg01 wc
0ded8     1F 26 C6 C9 |  if_b	decod	local05, #31
0dedc     00 26 06 36 |  if_ae	mov	local05, #0
0dee0     3C DC B0 FD | 	call	#__system___float_fromuns
0dee4     13 FB 61 F5 | 	xor	result1, local05
0dee8     FD 14 02 F6 | 	mov	arg02, result1
0deec     0F 13 02 F6 | 	mov	arg01, local01
0def0     60 DC B0 FD | 	call	#__system___float_add
0def4     A7 FA 61 FC | 	wrlong	result1, fp
0def8     00 02 90 FD | 	jmp	#LR__1075
0defc                 | LR__1067
0defc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0defc     08 4E 05 F1 | 	add	fp, #8
0df00     A7 1E 02 FB | 	rdlong	local01, fp
0df04     08 4E 85 F1 | 	sub	fp, #8
0df08     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df0c     14 4E 05 A1 |  if_e	add	fp, #20
0df10     A7 24 02 AB |  if_e	rdlong	local04, fp
0df14     14 4E 85 A1 |  if_e	sub	fp, #20
0df18     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0df1c     1C 00 90 5D |  if_ne	jmp	#LR__1068
0df20     A7 12 02 FB | 	rdlong	arg01, fp
0df24     0C 4E 05 F1 | 	add	fp, #12
0df28     A7 14 02 FB | 	rdlong	arg02, fp
0df2c     0C 4E 85 F1 | 	sub	fp, #12
0df30     20 DC B0 FD | 	call	#__system___float_add
0df34     A7 FA 61 FC | 	wrlong	result1, fp
0df38     C0 01 90 FD | 	jmp	#LR__1075
0df3c                 | LR__1068
0df3c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0df3c     08 4E 05 F1 | 	add	fp, #8
0df40     A7 1E 02 FB | 	rdlong	local01, fp
0df44     08 4E 85 F1 | 	sub	fp, #8
0df48     1F 1E 0E F2 | 	cmp	local01, #31 wz
0df4c     24 00 90 5D |  if_ne	jmp	#LR__1069
0df50     14 4E 05 F1 | 	add	fp, #20
0df54     A7 22 02 FB | 	rdlong	local03, fp
0df58     14 4E 85 F1 | 	sub	fp, #20
0df5c     1F 22 0E F2 | 	cmp	local03, #31 wz
0df60     A7 04 68 5C |  if_ne	wrlong	#2, fp
0df64     08 4E 05 51 |  if_ne	add	fp, #8
0df68     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0df6c     08 4E 85 51 |  if_ne	sub	fp, #8
0df70     88 01 90 5D |  if_ne	jmp	#LR__1075
0df74                 | LR__1069
0df74                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0df74     14 4E 05 F1 | 	add	fp, #20
0df78     A7 1E 02 FB | 	rdlong	local01, fp
0df7c     14 4E 85 F1 | 	sub	fp, #20
0df80     1F 1E 0E F2 | 	cmp	local01, #31 wz
0df84     24 00 90 5D |  if_ne	jmp	#LR__1070
0df88     08 4E 05 F1 | 	add	fp, #8
0df8c     A7 22 02 FB | 	rdlong	local03, fp
0df90     08 4E 85 F1 | 	sub	fp, #8
0df94     1F 22 0E F2 | 	cmp	local03, #31 wz
0df98     A7 04 68 5C |  if_ne	wrlong	#2, fp
0df9c     08 4E 05 51 |  if_ne	add	fp, #8
0dfa0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dfa4     08 4E 85 51 |  if_ne	sub	fp, #8
0dfa8     50 01 90 5D |  if_ne	jmp	#LR__1075
0dfac                 | LR__1070
0dfac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0dfac     08 4E 05 F1 | 	add	fp, #8
0dfb0     A7 1E 02 FB | 	rdlong	local01, fp
0dfb4     08 4E 85 F1 | 	sub	fp, #8
0dfb8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dfbc     14 4E 05 A1 |  if_e	add	fp, #20
0dfc0     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfc4     14 4E 85 A1 |  if_e	sub	fp, #20
0dfc8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0dfcc     1C 00 90 5D |  if_ne	jmp	#LR__1071
0dfd0     A7 12 02 FB | 	rdlong	arg01, fp
0dfd4     0C 4E 05 F1 | 	add	fp, #12
0dfd8     A7 14 02 FB | 	rdlong	arg02, fp
0dfdc     0C 4E 85 F1 | 	sub	fp, #12
0dfe0     B0 B4 B0 FD | 	call	#__system___string_concat
0dfe4     A7 FA 61 FC | 	wrlong	result1, fp
0dfe8     10 01 90 FD | 	jmp	#LR__1075
0dfec                 | LR__1071
0dfec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0dfec     08 4E 05 F1 | 	add	fp, #8
0dff0     A7 1E 02 FB | 	rdlong	local01, fp
0dff4     08 4E 85 F1 | 	sub	fp, #8
0dff8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0dffc     14 4E 05 A1 |  if_e	add	fp, #20
0e000     A7 22 02 AB |  if_e	rdlong	local03, fp
0e004     14 4E 85 A1 |  if_e	sub	fp, #20
0e008     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e00c     30 00 90 5D |  if_ne	jmp	#LR__1072
0e010     A7 12 02 FB | 	rdlong	arg01, fp
0e014     9C EE BF FD | 	call	#_convertstring
0e018     FD 12 02 F6 | 	mov	arg01, result1
0e01c     0C 4E 05 F1 | 	add	fp, #12
0e020     A7 14 02 FB | 	rdlong	arg02, fp
0e024     0C 4E 85 F1 | 	sub	fp, #12
0e028     68 B4 B0 FD | 	call	#__system___string_concat
0e02c     A7 FA 61 FC | 	wrlong	result1, fp
0e030     08 4E 05 F1 | 	add	fp, #8
0e034     A7 3E 68 FC | 	wrlong	#31, fp
0e038     08 4E 85 F1 | 	sub	fp, #8
0e03c     BC 00 90 FD | 	jmp	#LR__1075
0e040                 | LR__1072
0e040                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0e040     08 4E 05 F1 | 	add	fp, #8
0e044     A7 1E 02 FB | 	rdlong	local01, fp
0e048     08 4E 85 F1 | 	sub	fp, #8
0e04c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e050     14 4E 05 A1 |  if_e	add	fp, #20
0e054     A7 22 02 AB |  if_e	rdlong	local03, fp
0e058     14 4E 85 A1 |  if_e	sub	fp, #20
0e05c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0e060     28 00 90 5D |  if_ne	jmp	#LR__1073
0e064     A7 1E 02 FB | 	rdlong	local01, fp
0e068     0C 4E 05 F1 | 	add	fp, #12
0e06c     A7 12 02 FB | 	rdlong	arg01, fp
0e070     0C 4E 85 F1 | 	sub	fp, #12
0e074     3C EE BF FD | 	call	#_convertstring
0e078     FD 14 02 F6 | 	mov	arg02, result1
0e07c     0F 13 02 F6 | 	mov	arg01, local01
0e080     10 B4 B0 FD | 	call	#__system___string_concat
0e084     A7 FA 61 FC | 	wrlong	result1, fp
0e088     70 00 90 FD | 	jmp	#LR__1075
0e08c                 | LR__1073
0e08c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0e08c     08 4E 05 F1 | 	add	fp, #8
0e090     A7 1E 02 FB | 	rdlong	local01, fp
0e094     08 4E 85 F1 | 	sub	fp, #8
0e098     2B 1E 0E F2 | 	cmp	local01, #43 wz
0e09c     14 4E 05 A1 |  if_e	add	fp, #20
0e0a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e0a4     14 4E 85 A1 |  if_e	sub	fp, #20
0e0a8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0e0ac     3C 00 90 5D |  if_ne	jmp	#LR__1074
0e0b0     A7 12 02 FB | 	rdlong	arg01, fp
0e0b4     FC ED BF FD | 	call	#_convertstring
0e0b8     FD 1E 02 F6 | 	mov	local01, result1
0e0bc     0C 4E 05 F1 | 	add	fp, #12
0e0c0     A7 12 02 FB | 	rdlong	arg01, fp
0e0c4     0C 4E 85 F1 | 	sub	fp, #12
0e0c8     E8 ED BF FD | 	call	#_convertstring
0e0cc     FD 14 02 F6 | 	mov	arg02, result1
0e0d0     0F 13 02 F6 | 	mov	arg01, local01
0e0d4     BC B3 B0 FD | 	call	#__system___string_concat
0e0d8     A7 FA 61 FC | 	wrlong	result1, fp
0e0dc     08 4E 05 F1 | 	add	fp, #8
0e0e0     A7 3E 68 FC | 	wrlong	#31, fp
0e0e4     08 4E 85 F1 | 	sub	fp, #8
0e0e8     10 00 90 FD | 	jmp	#LR__1075
0e0ec                 | LR__1074
0e0ec     A7 08 68 FC | 	wrlong	#4, fp
0e0f0     08 4E 05 F1 | 	add	fp, #8
0e0f4     A7 FE 69 FC | 	wrlong	#255, fp
0e0f8     08 4E 85 F1 | 	sub	fp, #8
0e0fc                 | LR__1075
0e0fc     A7 12 02 F6 | 	mov	arg01, fp
0e100     CC B8 BF FD | 	call	#_push
0e104     A7 F0 03 F6 | 	mov	ptra, fp
0e108     B2 00 A0 FD | 	call	#popregs_
0e10c                 | _do_plus_ret
0e10c     2D 00 64 FD | 	ret
0e110                 | 
0e110                 | ' 
0e110                 | ' sub do_minus
0e110                 | _do_minus
0e110     05 4A 05 F6 | 	mov	COUNT_, #5
0e114     A8 00 A0 FD | 	call	#pushregs_
0e118     18 F0 07 F1 | 	add	ptra, #24
0e11c     18 B8 BF FD | 	call	#_pop
0e120     FD 1E 02 F6 | 	mov	local01, result1
0e124     FE 20 02 F6 | 	mov	local02, result2
0e128     FF 22 02 F6 | 	mov	local03, result3
0e12c     0C 4E 05 F1 | 	add	fp, #12
0e130     A7 1E 62 FC | 	wrlong	local01, fp
0e134     04 4E 05 F1 | 	add	fp, #4
0e138     A7 20 62 FC | 	wrlong	local02, fp
0e13c     04 4E 05 F1 | 	add	fp, #4
0e140     A7 22 62 FC | 	wrlong	local03, fp
0e144     14 4E 85 F1 | 	sub	fp, #20
0e148     EC B7 BF FD | 	call	#_pop
0e14c     FF 22 02 F6 | 	mov	local03, result3
0e150     A7 FA 61 FC | 	wrlong	result1, fp
0e154     04 4E 05 F1 | 	add	fp, #4
0e158     A7 FC 61 FC | 	wrlong	result2, fp
0e15c     04 4E 05 F1 | 	add	fp, #4
0e160     A7 22 62 FC | 	wrlong	local03, fp
0e164                 | ' 
0e164                 | ' t2=pop()
0e164                 | ' t1=pop()
0e164                 | ' 
0e164                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0e164     08 4E 85 F1 | 	sub	fp, #8
0e168     1D 22 0E F2 | 	cmp	local03, #29 wz
0e16c     14 4E 05 A1 |  if_e	add	fp, #20
0e170     A7 24 02 AB |  if_e	rdlong	local04, fp
0e174     14 4E 85 A1 |  if_e	sub	fp, #20
0e178     12 23 02 A6 |  if_e	mov	local03, local04
0e17c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e180     5C 00 90 5D |  if_ne	jmp	#LR__1081
0e184                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0e184     0C 4E 05 F1 | 	add	fp, #12
0e188     A7 1E 02 FB | 	rdlong	local01, fp
0e18c     0C 4E 85 F1 | 	sub	fp, #12
0e190     A7 22 02 FB | 	rdlong	local03, fp
0e194     11 1F 12 F2 | 	cmp	local01, local03 wc
0e198     1C 00 90 3D |  if_ae	jmp	#LR__1080
0e19c     A7 1E 02 FB | 	rdlong	local01, fp
0e1a0     0C 4E 05 F1 | 	add	fp, #12
0e1a4     A7 20 02 FB | 	rdlong	local02, fp
0e1a8     0C 4E 85 F1 | 	sub	fp, #12
0e1ac     10 1F 82 F1 | 	sub	local01, local02
0e1b0     A7 1E 62 FC | 	wrlong	local01, fp
0e1b4     F4 02 90 FD | 	jmp	#LR__1090
0e1b8                 | LR__1080
0e1b8     A7 1E 02 FB | 	rdlong	local01, fp
0e1bc     0C 4E 05 F1 | 	add	fp, #12
0e1c0     A7 20 02 FB | 	rdlong	local02, fp
0e1c4     0C 4E 85 F1 | 	sub	fp, #12
0e1c8     10 1F 82 F1 | 	sub	local01, local02
0e1cc     A7 1E 62 FC | 	wrlong	local01, fp
0e1d0     08 4E 05 F1 | 	add	fp, #8
0e1d4     A7 38 68 FC | 	wrlong	#28, fp
0e1d8     08 4E 85 F1 | 	sub	fp, #8
0e1dc     CC 02 90 FD | 	jmp	#LR__1090
0e1e0                 | LR__1081
0e1e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0e1e0     08 4E 05 F1 | 	add	fp, #8
0e1e4     A7 1E 02 FB | 	rdlong	local01, fp
0e1e8     08 4E 85 F1 | 	sub	fp, #8
0e1ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e1f0     14 4E 05 A1 |  if_e	add	fp, #20
0e1f4     A7 24 02 AB |  if_e	rdlong	local04, fp
0e1f8     14 4E 85 A1 |  if_e	sub	fp, #20
0e1fc     12 23 02 A6 |  if_e	mov	local03, local04
0e200     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e204     28 00 90 5D |  if_ne	jmp	#LR__1082
0e208     A7 1E 02 FB | 	rdlong	local01, fp
0e20c     0C 4E 05 F1 | 	add	fp, #12
0e210     A7 20 02 FB | 	rdlong	local02, fp
0e214     0C 4E 85 F1 | 	sub	fp, #12
0e218     10 1F 82 F1 | 	sub	local01, local02
0e21c     A7 1E 62 FC | 	wrlong	local01, fp
0e220     08 4E 05 F1 | 	add	fp, #8
0e224     A7 38 68 FC | 	wrlong	#28, fp
0e228     08 4E 85 F1 | 	sub	fp, #8
0e22c     7C 02 90 FD | 	jmp	#LR__1090
0e230                 | LR__1082
0e230                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0e230     08 4E 05 F1 | 	add	fp, #8
0e234     A7 1E 02 FB | 	rdlong	local01, fp
0e238     08 4E 85 F1 | 	sub	fp, #8
0e23c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e240     14 4E 05 A1 |  if_e	add	fp, #20
0e244     A7 24 02 AB |  if_e	rdlong	local04, fp
0e248     14 4E 85 A1 |  if_e	sub	fp, #20
0e24c     12 23 02 A6 |  if_e	mov	local03, local04
0e250     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e254     34 00 90 5D |  if_ne	jmp	#LR__1083
0e258     A7 12 02 FB | 	rdlong	arg01, fp
0e25c     C0 D8 B0 FD | 	call	#__system___float_fromuns
0e260     FD 12 02 F6 | 	mov	arg01, result1
0e264     0C 4E 05 F1 | 	add	fp, #12
0e268     A7 14 02 FB | 	rdlong	arg02, fp
0e26c     0C 4E 85 F1 | 	sub	fp, #12
0e270     1F 14 E6 F4 | 	bitnot	arg02, #31
0e274     DC D8 B0 FD | 	call	#__system___float_add
0e278     A7 FA 61 FC | 	wrlong	result1, fp
0e27c     08 4E 05 F1 | 	add	fp, #8
0e280     A7 3C 68 FC | 	wrlong	#30, fp
0e284     08 4E 85 F1 | 	sub	fp, #8
0e288     20 02 90 FD | 	jmp	#LR__1090
0e28c                 | LR__1083
0e28c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0e28c     08 4E 05 F1 | 	add	fp, #8
0e290     A7 1E 02 FB | 	rdlong	local01, fp
0e294     08 4E 85 F1 | 	sub	fp, #8
0e298     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e29c     14 4E 05 A1 |  if_e	add	fp, #20
0e2a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e2a4     14 4E 85 A1 |  if_e	sub	fp, #20
0e2a8     12 23 02 A6 |  if_e	mov	local03, local04
0e2ac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e2b0     1C 00 90 5D |  if_ne	jmp	#LR__1084
0e2b4     A7 1E 02 FB | 	rdlong	local01, fp
0e2b8     0C 4E 05 F1 | 	add	fp, #12
0e2bc     A7 20 02 FB | 	rdlong	local02, fp
0e2c0     0C 4E 85 F1 | 	sub	fp, #12
0e2c4     10 1F 82 F1 | 	sub	local01, local02
0e2c8     A7 1E 62 FC | 	wrlong	local01, fp
0e2cc     DC 01 90 FD | 	jmp	#LR__1090
0e2d0                 | LR__1084
0e2d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0e2d0     08 4E 05 F1 | 	add	fp, #8
0e2d4     A7 1E 02 FB | 	rdlong	local01, fp
0e2d8     08 4E 85 F1 | 	sub	fp, #8
0e2dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e2e0     14 4E 05 A1 |  if_e	add	fp, #20
0e2e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0e2e8     14 4E 85 A1 |  if_e	sub	fp, #20
0e2ec     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e2f0     1C 00 90 5D |  if_ne	jmp	#LR__1085
0e2f4     A7 1E 02 FB | 	rdlong	local01, fp
0e2f8     0C 4E 05 F1 | 	add	fp, #12
0e2fc     A7 20 02 FB | 	rdlong	local02, fp
0e300     0C 4E 85 F1 | 	sub	fp, #12
0e304     10 1F 82 F1 | 	sub	local01, local02
0e308     A7 1E 62 FC | 	wrlong	local01, fp
0e30c     9C 01 90 FD | 	jmp	#LR__1090
0e310                 | LR__1085
0e310                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0e310     08 4E 05 F1 | 	add	fp, #8
0e314     A7 1E 02 FB | 	rdlong	local01, fp
0e318     08 4E 85 F1 | 	sub	fp, #8
0e31c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e320     14 4E 05 A1 |  if_e	add	fp, #20
0e324     A7 22 02 AB |  if_e	rdlong	local03, fp
0e328     14 4E 85 A1 |  if_e	sub	fp, #20
0e32c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e330     44 00 90 5D |  if_ne	jmp	#LR__1086
0e334     A7 12 02 FB | 	rdlong	arg01, fp
0e338     09 13 52 F6 | 	abs	arg01, arg01 wc
0e33c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e340     00 26 06 36 |  if_ae	mov	local05, #0
0e344     D8 D7 B0 FD | 	call	#__system___float_fromuns
0e348     13 FB 61 F5 | 	xor	result1, local05
0e34c     FD 12 02 F6 | 	mov	arg01, result1
0e350     0C 4E 05 F1 | 	add	fp, #12
0e354     A7 14 02 FB | 	rdlong	arg02, fp
0e358     0C 4E 85 F1 | 	sub	fp, #12
0e35c     1F 14 E6 F4 | 	bitnot	arg02, #31
0e360     F0 D7 B0 FD | 	call	#__system___float_add
0e364     A7 FA 61 FC | 	wrlong	result1, fp
0e368     08 4E 05 F1 | 	add	fp, #8
0e36c     A7 3C 68 FC | 	wrlong	#30, fp
0e370     08 4E 85 F1 | 	sub	fp, #8
0e374     34 01 90 FD | 	jmp	#LR__1090
0e378                 | LR__1086
0e378                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0e378     08 4E 05 F1 | 	add	fp, #8
0e37c     A7 1E 02 FB | 	rdlong	local01, fp
0e380     08 4E 85 F1 | 	sub	fp, #8
0e384     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e388     14 4E 05 A1 |  if_e	add	fp, #20
0e38c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e390     14 4E 85 A1 |  if_e	sub	fp, #20
0e394     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e398     2C 00 90 5D |  if_ne	jmp	#LR__1087
0e39c     A7 1E 02 FB | 	rdlong	local01, fp
0e3a0     0C 4E 05 F1 | 	add	fp, #12
0e3a4     A7 12 02 FB | 	rdlong	arg01, fp
0e3a8     0C 4E 85 F1 | 	sub	fp, #12
0e3ac     70 D7 B0 FD | 	call	#__system___float_fromuns
0e3b0     FD 14 02 F6 | 	mov	arg02, result1
0e3b4     0F 13 02 F6 | 	mov	arg01, local01
0e3b8     1F 14 E6 F4 | 	bitnot	arg02, #31
0e3bc     94 D7 B0 FD | 	call	#__system___float_add
0e3c0     A7 FA 61 FC | 	wrlong	result1, fp
0e3c4     E4 00 90 FD | 	jmp	#LR__1090
0e3c8                 | LR__1087
0e3c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0e3c8     08 4E 05 F1 | 	add	fp, #8
0e3cc     A7 1E 02 FB | 	rdlong	local01, fp
0e3d0     08 4E 85 F1 | 	sub	fp, #8
0e3d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e3d8     14 4E 05 A1 |  if_e	add	fp, #20
0e3dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0e3e0     14 4E 85 A1 |  if_e	sub	fp, #20
0e3e4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e3e8     3C 00 90 5D |  if_ne	jmp	#LR__1088
0e3ec     A7 1E 02 FB | 	rdlong	local01, fp
0e3f0     0C 4E 05 F1 | 	add	fp, #12
0e3f4     A7 12 02 FB | 	rdlong	arg01, fp
0e3f8     0C 4E 85 F1 | 	sub	fp, #12
0e3fc     09 13 52 F6 | 	abs	arg01, arg01 wc
0e400     1F 26 C6 C9 |  if_b	decod	local05, #31
0e404     00 26 06 36 |  if_ae	mov	local05, #0
0e408     14 D7 B0 FD | 	call	#__system___float_fromuns
0e40c     13 FB 61 F5 | 	xor	result1, local05
0e410     FD 14 02 F6 | 	mov	arg02, result1
0e414     0F 13 02 F6 | 	mov	arg01, local01
0e418     1F 14 E6 F4 | 	bitnot	arg02, #31
0e41c     34 D7 B0 FD | 	call	#__system___float_add
0e420     A7 FA 61 FC | 	wrlong	result1, fp
0e424     84 00 90 FD | 	jmp	#LR__1090
0e428                 | LR__1088
0e428                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0e428     08 4E 05 F1 | 	add	fp, #8
0e42c     A7 1E 02 FB | 	rdlong	local01, fp
0e430     08 4E 85 F1 | 	sub	fp, #8
0e434     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e438     14 4E 05 A1 |  if_e	add	fp, #20
0e43c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e440     14 4E 85 A1 |  if_e	sub	fp, #20
0e444     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e448     20 00 90 5D |  if_ne	jmp	#LR__1089
0e44c     A7 12 02 FB | 	rdlong	arg01, fp
0e450     0C 4E 05 F1 | 	add	fp, #12
0e454     A7 14 02 FB | 	rdlong	arg02, fp
0e458     0C 4E 85 F1 | 	sub	fp, #12
0e45c     1F 14 E6 F4 | 	bitnot	arg02, #31
0e460     F0 D6 B0 FD | 	call	#__system___float_add
0e464     A7 FA 61 FC | 	wrlong	result1, fp
0e468     40 00 90 FD | 	jmp	#LR__1090
0e46c                 | LR__1089
0e46c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0e46c     08 4E 05 F1 | 	add	fp, #8
0e470     A7 1E 02 FB | 	rdlong	local01, fp
0e474     08 4E 85 F1 | 	sub	fp, #8
0e478     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e47c     14 4E 05 51 |  if_ne	add	fp, #20
0e480     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e484     14 4E 85 51 |  if_ne	sub	fp, #20
0e488     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e48c     A7 06 68 AC |  if_e	wrlong	#3, fp
0e490     08 4E 05 A1 |  if_e	add	fp, #8
0e494     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e498     08 4E 85 A1 |  if_e	sub	fp, #8
0e49c     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0e4a0     08 4E 05 51 |  if_ne	add	fp, #8
0e4a4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e4a8     08 4E 85 51 |  if_ne	sub	fp, #8
0e4ac                 | LR__1090
0e4ac     A7 12 02 F6 | 	mov	arg01, fp
0e4b0     1C B5 BF FD | 	call	#_push
0e4b4     A7 F0 03 F6 | 	mov	ptra, fp
0e4b8     B2 00 A0 FD | 	call	#popregs_
0e4bc                 | _do_minus_ret
0e4bc     2D 00 64 FD | 	ret
0e4c0                 | 
0e4c0                 | ' 
0e4c0                 | ' sub do_and 
0e4c0                 | _do_and
0e4c0     03 4A 05 F6 | 	mov	COUNT_, #3
0e4c4     A8 00 A0 FD | 	call	#pushregs_
0e4c8     18 F0 07 F1 | 	add	ptra, #24
0e4cc     68 B4 BF FD | 	call	#_pop
0e4d0     FD 12 02 F6 | 	mov	arg01, result1
0e4d4     FE 1E 02 F6 | 	mov	local01, result2
0e4d8     FF 20 02 F6 | 	mov	local02, result3
0e4dc     0C 4E 05 F1 | 	add	fp, #12
0e4e0     A7 12 62 FC | 	wrlong	arg01, fp
0e4e4     04 4E 05 F1 | 	add	fp, #4
0e4e8     A7 1E 62 FC | 	wrlong	local01, fp
0e4ec     04 4E 05 F1 | 	add	fp, #4
0e4f0     A7 20 62 FC | 	wrlong	local02, fp
0e4f4     14 4E 85 F1 | 	sub	fp, #20
0e4f8     3C B4 BF FD | 	call	#_pop
0e4fc     FF 22 02 F6 | 	mov	local03, result3
0e500     A7 FA 61 FC | 	wrlong	result1, fp
0e504     04 4E 05 F1 | 	add	fp, #4
0e508     A7 FC 61 FC | 	wrlong	result2, fp
0e50c     04 4E 05 F1 | 	add	fp, #4
0e510     A7 22 62 FC | 	wrlong	local03, fp
0e514                 | ' 
0e514                 | ' t2=pop()
0e514                 | ' t1=pop()
0e514                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e514     08 4E 85 F1 | 	sub	fp, #8
0e518     1C 22 0E F2 | 	cmp	local03, #28 wz
0e51c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e520     A7 22 62 AC |  if_e	wrlong	local03, fp
0e524     08 4E 05 A1 |  if_e	add	fp, #8
0e528     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e52c     08 4E 85 A1 |  if_e	sub	fp, #8
0e530                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e530     14 4E 05 F1 | 	add	fp, #20
0e534     A7 22 02 FB | 	rdlong	local03, fp
0e538     14 4E 85 F1 | 	sub	fp, #20
0e53c     1C 22 0E F2 | 	cmp	local03, #28 wz
0e540     18 00 90 5D |  if_ne	jmp	#LR__1100
0e544     0C 4E 05 F1 | 	add	fp, #12
0e548     A7 22 02 FB | 	rdlong	local03, fp
0e54c     A7 22 62 FC | 	wrlong	local03, fp
0e550     08 4E 05 F1 | 	add	fp, #8
0e554     A7 3A 68 FC | 	wrlong	#29, fp
0e558     14 4E 85 F1 | 	sub	fp, #20
0e55c                 | LR__1100
0e55c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0e55c     08 4E 05 F1 | 	add	fp, #8
0e560     A7 22 02 FB | 	rdlong	local03, fp
0e564     08 4E 85 F1 | 	sub	fp, #8
0e568     1F 22 0E F2 | 	cmp	local03, #31 wz
0e56c     14 4E 05 51 |  if_ne	add	fp, #20
0e570     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e574     14 4E 85 51 |  if_ne	sub	fp, #20
0e578     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e57c     08 4E 05 51 |  if_ne	add	fp, #8
0e580     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e584     08 4E 85 51 |  if_ne	sub	fp, #8
0e588     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e58c     14 4E 05 51 |  if_ne	add	fp, #20
0e590     14 4E 85 51 |  if_ne	sub	fp, #20
0e594     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e598     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e59c     08 4E 05 A1 |  if_e	add	fp, #8
0e5a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e5a4     08 4E 85 A1 |  if_e	sub	fp, #8
0e5a8     18 00 90 AD |  if_e	jmp	#LR__1101
0e5ac     A7 22 02 FB | 	rdlong	local03, fp
0e5b0     0C 4E 05 F1 | 	add	fp, #12
0e5b4     A7 1E 02 FB | 	rdlong	local01, fp
0e5b8     0C 4E 85 F1 | 	sub	fp, #12
0e5bc     0F 23 02 F5 | 	and	local03, local01
0e5c0     A7 22 62 FC | 	wrlong	local03, fp
0e5c4                 | LR__1101
0e5c4     A7 12 02 F6 | 	mov	arg01, fp
0e5c8     04 B4 BF FD | 	call	#_push
0e5cc     A7 F0 03 F6 | 	mov	ptra, fp
0e5d0     B2 00 A0 FD | 	call	#popregs_
0e5d4                 | _do_and_ret
0e5d4     2D 00 64 FD | 	ret
0e5d8                 | 
0e5d8                 | ' 
0e5d8                 | ' sub do_or 
0e5d8                 | _do_or
0e5d8     03 4A 05 F6 | 	mov	COUNT_, #3
0e5dc     A8 00 A0 FD | 	call	#pushregs_
0e5e0     18 F0 07 F1 | 	add	ptra, #24
0e5e4     50 B3 BF FD | 	call	#_pop
0e5e8     FD 12 02 F6 | 	mov	arg01, result1
0e5ec     FE 1E 02 F6 | 	mov	local01, result2
0e5f0     FF 20 02 F6 | 	mov	local02, result3
0e5f4     0C 4E 05 F1 | 	add	fp, #12
0e5f8     A7 12 62 FC | 	wrlong	arg01, fp
0e5fc     04 4E 05 F1 | 	add	fp, #4
0e600     A7 1E 62 FC | 	wrlong	local01, fp
0e604     04 4E 05 F1 | 	add	fp, #4
0e608     A7 20 62 FC | 	wrlong	local02, fp
0e60c     14 4E 85 F1 | 	sub	fp, #20
0e610     24 B3 BF FD | 	call	#_pop
0e614     FF 22 02 F6 | 	mov	local03, result3
0e618     A7 FA 61 FC | 	wrlong	result1, fp
0e61c     04 4E 05 F1 | 	add	fp, #4
0e620     A7 FC 61 FC | 	wrlong	result2, fp
0e624     04 4E 05 F1 | 	add	fp, #4
0e628     A7 22 62 FC | 	wrlong	local03, fp
0e62c                 | ' 
0e62c                 | ' t2=pop()
0e62c                 | ' t1=pop()
0e62c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e62c     08 4E 85 F1 | 	sub	fp, #8
0e630     1C 22 0E F2 | 	cmp	local03, #28 wz
0e634     A7 22 02 AB |  if_e	rdlong	local03, fp
0e638     A7 22 62 AC |  if_e	wrlong	local03, fp
0e63c     08 4E 05 A1 |  if_e	add	fp, #8
0e640     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e644     08 4E 85 A1 |  if_e	sub	fp, #8
0e648                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e648     14 4E 05 F1 | 	add	fp, #20
0e64c     A7 22 02 FB | 	rdlong	local03, fp
0e650     14 4E 85 F1 | 	sub	fp, #20
0e654     1C 22 0E F2 | 	cmp	local03, #28 wz
0e658     18 00 90 5D |  if_ne	jmp	#LR__1110
0e65c     0C 4E 05 F1 | 	add	fp, #12
0e660     A7 22 02 FB | 	rdlong	local03, fp
0e664     A7 22 62 FC | 	wrlong	local03, fp
0e668     08 4E 05 F1 | 	add	fp, #8
0e66c     A7 3A 68 FC | 	wrlong	#29, fp
0e670     14 4E 85 F1 | 	sub	fp, #20
0e674                 | LR__1110
0e674                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0e674     08 4E 05 F1 | 	add	fp, #8
0e678     A7 22 02 FB | 	rdlong	local03, fp
0e67c     08 4E 85 F1 | 	sub	fp, #8
0e680     1F 22 0E F2 | 	cmp	local03, #31 wz
0e684     14 4E 05 51 |  if_ne	add	fp, #20
0e688     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e68c     14 4E 85 51 |  if_ne	sub	fp, #20
0e690     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e694     08 4E 05 51 |  if_ne	add	fp, #8
0e698     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e69c     08 4E 85 51 |  if_ne	sub	fp, #8
0e6a0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e6a4     14 4E 05 51 |  if_ne	add	fp, #20
0e6a8     14 4E 85 51 |  if_ne	sub	fp, #20
0e6ac     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e6b0     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e6b4     08 4E 05 A1 |  if_e	add	fp, #8
0e6b8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e6bc     08 4E 85 A1 |  if_e	sub	fp, #8
0e6c0     18 00 90 AD |  if_e	jmp	#LR__1111
0e6c4     A7 22 02 FB | 	rdlong	local03, fp
0e6c8     0C 4E 05 F1 | 	add	fp, #12
0e6cc     A7 1E 02 FB | 	rdlong	local01, fp
0e6d0     0C 4E 85 F1 | 	sub	fp, #12
0e6d4     0F 23 42 F5 | 	or	local03, local01
0e6d8     A7 22 62 FC | 	wrlong	local03, fp
0e6dc                 | LR__1111
0e6dc     A7 12 02 F6 | 	mov	arg01, fp
0e6e0     EC B2 BF FD | 	call	#_push
0e6e4     A7 F0 03 F6 | 	mov	ptra, fp
0e6e8     B2 00 A0 FD | 	call	#popregs_
0e6ec                 | _do_or_ret
0e6ec     2D 00 64 FD | 	ret
0e6f0                 | 
0e6f0                 | ' 
0e6f0                 | ' sub do_mul
0e6f0                 | _do_mul
0e6f0     05 4A 05 F6 | 	mov	COUNT_, #5
0e6f4     A8 00 A0 FD | 	call	#pushregs_
0e6f8     18 F0 07 F1 | 	add	ptra, #24
0e6fc     38 B2 BF FD | 	call	#_pop
0e700     FD 1E 02 F6 | 	mov	local01, result1
0e704     FE 20 02 F6 | 	mov	local02, result2
0e708     FF 22 02 F6 | 	mov	local03, result3
0e70c     0C 4E 05 F1 | 	add	fp, #12
0e710     A7 1E 62 FC | 	wrlong	local01, fp
0e714     04 4E 05 F1 | 	add	fp, #4
0e718     A7 20 62 FC | 	wrlong	local02, fp
0e71c     04 4E 05 F1 | 	add	fp, #4
0e720     A7 22 62 FC | 	wrlong	local03, fp
0e724     14 4E 85 F1 | 	sub	fp, #20
0e728     0C B2 BF FD | 	call	#_pop
0e72c     FF 22 02 F6 | 	mov	local03, result3
0e730     A7 FA 61 FC | 	wrlong	result1, fp
0e734     04 4E 05 F1 | 	add	fp, #4
0e738     A7 FC 61 FC | 	wrlong	result2, fp
0e73c     04 4E 05 F1 | 	add	fp, #4
0e740     A7 22 62 FC | 	wrlong	local03, fp
0e744                 | ' 
0e744                 | ' t2=pop()
0e744                 | ' t1=pop()
0e744                 | ' 
0e744                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0e744     08 4E 85 F1 | 	sub	fp, #8
0e748     1D 22 0E F2 | 	cmp	local03, #29 wz
0e74c     14 4E 05 A1 |  if_e	add	fp, #20
0e750     A7 24 02 AB |  if_e	rdlong	local04, fp
0e754     14 4E 85 A1 |  if_e	sub	fp, #20
0e758     12 23 02 A6 |  if_e	mov	local03, local04
0e75c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e760     20 00 90 5D |  if_ne	jmp	#LR__1120
0e764     A7 20 02 FB | 	rdlong	local02, fp
0e768     0C 4E 05 F1 | 	add	fp, #12
0e76c     A7 22 02 FB | 	rdlong	local03, fp
0e770     11 21 02 FD | 	qmul	local02, local03
0e774     0C 4E 85 F1 | 	sub	fp, #12
0e778     18 1E 62 FD | 	getqx	local01
0e77c     A7 1E 62 FC | 	wrlong	local01, fp
0e780     C4 02 90 FD | 	jmp	#LR__1129
0e784                 | LR__1120
0e784                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0e784     08 4E 05 F1 | 	add	fp, #8
0e788     A7 1E 02 FB | 	rdlong	local01, fp
0e78c     08 4E 85 F1 | 	sub	fp, #8
0e790     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e794     14 4E 05 A1 |  if_e	add	fp, #20
0e798     A7 24 02 AB |  if_e	rdlong	local04, fp
0e79c     14 4E 85 A1 |  if_e	sub	fp, #20
0e7a0     12 23 02 A6 |  if_e	mov	local03, local04
0e7a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e7a8     2C 00 90 5D |  if_ne	jmp	#LR__1121
0e7ac     A7 20 02 FB | 	rdlong	local02, fp
0e7b0     0C 4E 05 F1 | 	add	fp, #12
0e7b4     A7 22 02 FB | 	rdlong	local03, fp
0e7b8     11 21 02 FD | 	qmul	local02, local03
0e7bc     0C 4E 85 F1 | 	sub	fp, #12
0e7c0     18 1E 62 FD | 	getqx	local01
0e7c4     A7 1E 62 FC | 	wrlong	local01, fp
0e7c8     08 4E 05 F1 | 	add	fp, #8
0e7cc     A7 38 68 FC | 	wrlong	#28, fp
0e7d0     08 4E 85 F1 | 	sub	fp, #8
0e7d4     70 02 90 FD | 	jmp	#LR__1129
0e7d8                 | LR__1121
0e7d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e7d8     08 4E 05 F1 | 	add	fp, #8
0e7dc     A7 1E 02 FB | 	rdlong	local01, fp
0e7e0     08 4E 85 F1 | 	sub	fp, #8
0e7e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e7e8     14 4E 05 A1 |  if_e	add	fp, #20
0e7ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0e7f0     14 4E 85 A1 |  if_e	sub	fp, #20
0e7f4     12 23 02 A6 |  if_e	mov	local03, local04
0e7f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e7fc     30 00 90 5D |  if_ne	jmp	#LR__1122
0e800     A7 12 02 FB | 	rdlong	arg01, fp
0e804     18 D3 B0 FD | 	call	#__system___float_fromuns
0e808     FD 12 02 F6 | 	mov	arg01, result1
0e80c     0C 4E 05 F1 | 	add	fp, #12
0e810     A7 14 02 FB | 	rdlong	arg02, fp
0e814     0C 4E 85 F1 | 	sub	fp, #12
0e818     08 D7 B0 FD | 	call	#__system___float_mul
0e81c     A7 FA 61 FC | 	wrlong	result1, fp
0e820     08 4E 05 F1 | 	add	fp, #8
0e824     A7 3C 68 FC | 	wrlong	#30, fp
0e828     08 4E 85 F1 | 	sub	fp, #8
0e82c     18 02 90 FD | 	jmp	#LR__1129
0e830                 | LR__1122
0e830                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0e830     08 4E 05 F1 | 	add	fp, #8
0e834     A7 1E 02 FB | 	rdlong	local01, fp
0e838     08 4E 85 F1 | 	sub	fp, #8
0e83c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e840     14 4E 05 A1 |  if_e	add	fp, #20
0e844     A7 24 02 AB |  if_e	rdlong	local04, fp
0e848     14 4E 85 A1 |  if_e	sub	fp, #20
0e84c     12 23 02 A6 |  if_e	mov	local03, local04
0e850     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e854     20 00 90 5D |  if_ne	jmp	#LR__1123
0e858     A7 20 02 FB | 	rdlong	local02, fp
0e85c     0C 4E 05 F1 | 	add	fp, #12
0e860     A7 22 02 FB | 	rdlong	local03, fp
0e864     11 21 02 FD | 	qmul	local02, local03
0e868     0C 4E 85 F1 | 	sub	fp, #12
0e86c     18 1E 62 FD | 	getqx	local01
0e870     A7 1E 62 FC | 	wrlong	local01, fp
0e874     D0 01 90 FD | 	jmp	#LR__1129
0e878                 | LR__1123
0e878                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0e878     08 4E 05 F1 | 	add	fp, #8
0e87c     A7 1E 02 FB | 	rdlong	local01, fp
0e880     08 4E 85 F1 | 	sub	fp, #8
0e884     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e888     14 4E 05 A1 |  if_e	add	fp, #20
0e88c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e890     14 4E 85 A1 |  if_e	sub	fp, #20
0e894     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e898     20 00 90 5D |  if_ne	jmp	#LR__1124
0e89c     A7 20 02 FB | 	rdlong	local02, fp
0e8a0     0C 4E 05 F1 | 	add	fp, #12
0e8a4     A7 22 02 FB | 	rdlong	local03, fp
0e8a8     11 21 02 FD | 	qmul	local02, local03
0e8ac     0C 4E 85 F1 | 	sub	fp, #12
0e8b0     18 1E 62 FD | 	getqx	local01
0e8b4     A7 1E 62 FC | 	wrlong	local01, fp
0e8b8     8C 01 90 FD | 	jmp	#LR__1129
0e8bc                 | LR__1124
0e8bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e8bc     08 4E 05 F1 | 	add	fp, #8
0e8c0     A7 1E 02 FB | 	rdlong	local01, fp
0e8c4     08 4E 85 F1 | 	sub	fp, #8
0e8c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e8cc     14 4E 05 A1 |  if_e	add	fp, #20
0e8d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e8d4     14 4E 85 A1 |  if_e	sub	fp, #20
0e8d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e8dc     40 00 90 5D |  if_ne	jmp	#LR__1125
0e8e0     A7 12 02 FB | 	rdlong	arg01, fp
0e8e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e8e8     1F 26 C6 C9 |  if_b	decod	local05, #31
0e8ec     00 26 06 36 |  if_ae	mov	local05, #0
0e8f0     2C D2 B0 FD | 	call	#__system___float_fromuns
0e8f4     13 FB 61 F5 | 	xor	result1, local05
0e8f8     FD 12 02 F6 | 	mov	arg01, result1
0e8fc     0C 4E 05 F1 | 	add	fp, #12
0e900     A7 14 02 FB | 	rdlong	arg02, fp
0e904     0C 4E 85 F1 | 	sub	fp, #12
0e908     18 D6 B0 FD | 	call	#__system___float_mul
0e90c     A7 FA 61 FC | 	wrlong	result1, fp
0e910     08 4E 05 F1 | 	add	fp, #8
0e914     A7 3C 68 FC | 	wrlong	#30, fp
0e918     08 4E 85 F1 | 	sub	fp, #8
0e91c     28 01 90 FD | 	jmp	#LR__1129
0e920                 | LR__1125
0e920                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0e920     08 4E 05 F1 | 	add	fp, #8
0e924     A7 1E 02 FB | 	rdlong	local01, fp
0e928     08 4E 85 F1 | 	sub	fp, #8
0e92c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e930     14 4E 05 A1 |  if_e	add	fp, #20
0e934     A7 22 02 AB |  if_e	rdlong	local03, fp
0e938     14 4E 85 A1 |  if_e	sub	fp, #20
0e93c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e940     28 00 90 5D |  if_ne	jmp	#LR__1126
0e944     A7 1E 02 FB | 	rdlong	local01, fp
0e948     0C 4E 05 F1 | 	add	fp, #12
0e94c     A7 12 02 FB | 	rdlong	arg01, fp
0e950     0C 4E 85 F1 | 	sub	fp, #12
0e954     C8 D1 B0 FD | 	call	#__system___float_fromuns
0e958     FD 14 02 F6 | 	mov	arg02, result1
0e95c     0F 13 02 F6 | 	mov	arg01, local01
0e960     C0 D5 B0 FD | 	call	#__system___float_mul
0e964     A7 FA 61 FC | 	wrlong	result1, fp
0e968     DC 00 90 FD | 	jmp	#LR__1129
0e96c                 | LR__1126
0e96c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0e96c     08 4E 05 F1 | 	add	fp, #8
0e970     A7 1E 02 FB | 	rdlong	local01, fp
0e974     08 4E 85 F1 | 	sub	fp, #8
0e978     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e97c     14 4E 05 A1 |  if_e	add	fp, #20
0e980     A7 22 02 AB |  if_e	rdlong	local03, fp
0e984     14 4E 85 A1 |  if_e	sub	fp, #20
0e988     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e98c     38 00 90 5D |  if_ne	jmp	#LR__1127
0e990     A7 1E 02 FB | 	rdlong	local01, fp
0e994     0C 4E 05 F1 | 	add	fp, #12
0e998     A7 12 02 FB | 	rdlong	arg01, fp
0e99c     0C 4E 85 F1 | 	sub	fp, #12
0e9a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e9a4     1F 26 C6 C9 |  if_b	decod	local05, #31
0e9a8     00 26 06 36 |  if_ae	mov	local05, #0
0e9ac     70 D1 B0 FD | 	call	#__system___float_fromuns
0e9b0     13 FB 61 F5 | 	xor	result1, local05
0e9b4     FD 14 02 F6 | 	mov	arg02, result1
0e9b8     0F 13 02 F6 | 	mov	arg01, local01
0e9bc     64 D5 B0 FD | 	call	#__system___float_mul
0e9c0     A7 FA 61 FC | 	wrlong	result1, fp
0e9c4     80 00 90 FD | 	jmp	#LR__1129
0e9c8                 | LR__1127
0e9c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0e9c8     08 4E 05 F1 | 	add	fp, #8
0e9cc     A7 1E 02 FB | 	rdlong	local01, fp
0e9d0     08 4E 85 F1 | 	sub	fp, #8
0e9d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e9d8     14 4E 05 A1 |  if_e	add	fp, #20
0e9dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0e9e0     14 4E 85 A1 |  if_e	sub	fp, #20
0e9e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e9e8     1C 00 90 5D |  if_ne	jmp	#LR__1128
0e9ec     A7 12 02 FB | 	rdlong	arg01, fp
0e9f0     0C 4E 05 F1 | 	add	fp, #12
0e9f4     A7 14 02 FB | 	rdlong	arg02, fp
0e9f8     0C 4E 85 F1 | 	sub	fp, #12
0e9fc     24 D5 B0 FD | 	call	#__system___float_mul
0ea00     A7 FA 61 FC | 	wrlong	result1, fp
0ea04     40 00 90 FD | 	jmp	#LR__1129
0ea08                 | LR__1128
0ea08                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0ea08     08 4E 05 F1 | 	add	fp, #8
0ea0c     A7 1E 02 FB | 	rdlong	local01, fp
0ea10     08 4E 85 F1 | 	sub	fp, #8
0ea14     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ea18     14 4E 05 51 |  if_ne	add	fp, #20
0ea1c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ea20     14 4E 85 51 |  if_ne	sub	fp, #20
0ea24     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0ea28     A7 10 68 AC |  if_e	wrlong	#8, fp
0ea2c     08 4E 05 A1 |  if_e	add	fp, #8
0ea30     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ea34     08 4E 85 A1 |  if_e	sub	fp, #8
0ea38     A7 12 68 5C |  if_ne	wrlong	#9, fp
0ea3c     08 4E 05 51 |  if_ne	add	fp, #8
0ea40     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ea44     08 4E 85 51 |  if_ne	sub	fp, #8
0ea48                 | LR__1129
0ea48     A7 12 02 F6 | 	mov	arg01, fp
0ea4c     80 AF BF FD | 	call	#_push
0ea50     A7 F0 03 F6 | 	mov	ptra, fp
0ea54     B2 00 A0 FD | 	call	#popregs_
0ea58                 | _do_mul_ret
0ea58     2D 00 64 FD | 	ret
0ea5c                 | 
0ea5c                 | ' 
0ea5c                 | ' sub do_div 
0ea5c                 | _do_div
0ea5c     01 4A 05 F6 | 	mov	COUNT_, #1
0ea60     A8 00 A0 FD | 	call	#pushregs_
0ea64     18 F0 07 F1 | 	add	ptra, #24
0ea68     CC AE BF FD | 	call	#_pop
0ea6c     FD 64 02 F6 | 	mov	muldivb_, result1
0ea70     FE 62 02 F6 | 	mov	muldiva_, result2
0ea74     FF 1E 02 F6 | 	mov	local01, result3
0ea78     0C 4E 05 F1 | 	add	fp, #12
0ea7c     A7 64 62 FC | 	wrlong	muldivb_, fp
0ea80     04 4E 05 F1 | 	add	fp, #4
0ea84     A7 62 62 FC | 	wrlong	muldiva_, fp
0ea88     04 4E 05 F1 | 	add	fp, #4
0ea8c     A7 1E 62 FC | 	wrlong	local01, fp
0ea90     14 4E 85 F1 | 	sub	fp, #20
0ea94     A0 AE BF FD | 	call	#_pop
0ea98     A7 FA 61 FC | 	wrlong	result1, fp
0ea9c     04 4E 05 F1 | 	add	fp, #4
0eaa0     A7 FC 61 FC | 	wrlong	result2, fp
0eaa4     04 4E 05 F1 | 	add	fp, #4
0eaa8     A7 FE 61 FC | 	wrlong	result3, fp
0eaac                 | ' 
0eaac                 | ' t2=pop()
0eaac                 | ' t1=pop()
0eaac                 | ' 
0eaac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0eaac     08 4E 85 F1 | 	sub	fp, #8
0eab0     1F FE 0D F2 | 	cmp	result3, #31 wz
0eab4     14 4E 05 51 |  if_ne	add	fp, #20
0eab8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0eabc     14 4E 85 51 |  if_ne	sub	fp, #20
0eac0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0eac4     A7 14 68 AC |  if_e	wrlong	#10, fp
0eac8     08 4E 05 A1 |  if_e	add	fp, #8
0eacc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ead0     08 4E 85 A1 |  if_e	sub	fp, #8
0ead4     90 01 90 AD |  if_e	jmp	#LR__1136
0ead8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0ead8     08 4E 05 F1 | 	add	fp, #8
0eadc     A7 64 02 FB | 	rdlong	muldivb_, fp
0eae0     08 4E 85 F1 | 	sub	fp, #8
0eae4     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0eae8     1C 00 90 5D |  if_ne	jmp	#LR__1130
0eaec     08 4E 05 F1 | 	add	fp, #8
0eaf0     A7 38 68 FC | 	wrlong	#28, fp
0eaf4     08 4E 85 F1 | 	sub	fp, #8
0eaf8     A7 12 02 FB | 	rdlong	arg01, fp
0eafc     00 14 06 F6 | 	mov	arg02, #0
0eb00     E8 D8 B0 FD | 	call	#__system___float_tointeger
0eb04     A7 FA 61 FC | 	wrlong	result1, fp
0eb08                 | LR__1130
0eb08                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0eb08     14 4E 05 F1 | 	add	fp, #20
0eb0c     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb10     14 4E 85 F1 | 	sub	fp, #20
0eb14     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0eb18     28 00 90 5D |  if_ne	jmp	#LR__1131
0eb1c     14 4E 05 F1 | 	add	fp, #20
0eb20     A7 38 68 FC | 	wrlong	#28, fp
0eb24     08 4E 85 F1 | 	sub	fp, #8
0eb28     A7 12 02 FB | 	rdlong	arg01, fp
0eb2c     0C 4E 85 F1 | 	sub	fp, #12
0eb30     00 14 06 F6 | 	mov	arg02, #0
0eb34     B4 D8 B0 FD | 	call	#__system___float_tointeger
0eb38     0C 4E 05 F1 | 	add	fp, #12
0eb3c     A7 FA 61 FC | 	wrlong	result1, fp
0eb40     0C 4E 85 F1 | 	sub	fp, #12
0eb44                 | LR__1131
0eb44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0eb44     08 4E 05 F1 | 	add	fp, #8
0eb48     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb4c     08 4E 85 F1 | 	sub	fp, #8
0eb50     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0eb54     14 4E 05 A1 |  if_e	add	fp, #20
0eb58     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eb5c     14 4E 85 A1 |  if_e	sub	fp, #20
0eb60     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0eb64     20 00 90 5D |  if_ne	jmp	#LR__1132
0eb68     0C 4E 05 F1 | 	add	fp, #12
0eb6c     A7 1E 02 FB | 	rdlong	local01, fp
0eb70     0C 4E 85 F1 | 	sub	fp, #12
0eb74     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb78     0F 65 12 FD | 	qdiv	muldivb_, local01
0eb7c     18 1E 62 FD | 	getqx	local01
0eb80     A7 1E 62 FC | 	wrlong	local01, fp
0eb84     E0 00 90 FD | 	jmp	#LR__1136
0eb88                 | LR__1132
0eb88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0eb88     08 4E 05 F1 | 	add	fp, #8
0eb8c     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb90     08 4E 85 F1 | 	sub	fp, #8
0eb94     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0eb98     14 4E 05 A1 |  if_e	add	fp, #20
0eb9c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eba0     14 4E 85 A1 |  if_e	sub	fp, #20
0eba4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0eba8     2C 00 90 5D |  if_ne	jmp	#LR__1133
0ebac     0C 4E 05 F1 | 	add	fp, #12
0ebb0     A7 1E 02 FB | 	rdlong	local01, fp
0ebb4     0C 4E 85 F1 | 	sub	fp, #12
0ebb8     A7 64 02 FB | 	rdlong	muldivb_, fp
0ebbc     0F 65 12 FD | 	qdiv	muldivb_, local01
0ebc0     18 1E 62 FD | 	getqx	local01
0ebc4     A7 1E 62 FC | 	wrlong	local01, fp
0ebc8     08 4E 05 F1 | 	add	fp, #8
0ebcc     A7 38 68 FC | 	wrlong	#28, fp
0ebd0     08 4E 85 F1 | 	sub	fp, #8
0ebd4     90 00 90 FD | 	jmp	#LR__1136
0ebd8                 | LR__1133
0ebd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0ebd8     08 4E 05 F1 | 	add	fp, #8
0ebdc     A7 64 02 FB | 	rdlong	muldivb_, fp
0ebe0     08 4E 85 F1 | 	sub	fp, #8
0ebe4     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0ebe8     14 4E 05 A1 |  if_e	add	fp, #20
0ebec     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ebf0     14 4E 85 A1 |  if_e	sub	fp, #20
0ebf4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ebf8     1C 00 90 5D |  if_ne	jmp	#LR__1134
0ebfc     A7 62 02 FB | 	rdlong	muldiva_, fp
0ec00     0C 4E 05 F1 | 	add	fp, #12
0ec04     A7 64 02 FB | 	rdlong	muldivb_, fp
0ec08     0C 4E 85 F1 | 	sub	fp, #12
0ec0c     BA 00 A0 FD | 	call	#divide_
0ec10     A7 64 62 FC | 	wrlong	muldivb_, fp
0ec14     50 00 90 FD | 	jmp	#LR__1136
0ec18                 | LR__1134
0ec18                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0ec18     08 4E 05 F1 | 	add	fp, #8
0ec1c     A7 64 02 FB | 	rdlong	muldivb_, fp
0ec20     08 4E 85 F1 | 	sub	fp, #8
0ec24     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0ec28     14 4E 05 A1 |  if_e	add	fp, #20
0ec2c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ec30     14 4E 85 A1 |  if_e	sub	fp, #20
0ec34     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ec38     1C 00 90 5D |  if_ne	jmp	#LR__1135
0ec3c     A7 62 02 FB | 	rdlong	muldiva_, fp
0ec40     0C 4E 05 F1 | 	add	fp, #12
0ec44     A7 64 02 FB | 	rdlong	muldivb_, fp
0ec48     0C 4E 85 F1 | 	sub	fp, #12
0ec4c     BA 00 A0 FD | 	call	#divide_
0ec50     A7 64 62 FC | 	wrlong	muldivb_, fp
0ec54     10 00 90 FD | 	jmp	#LR__1136
0ec58                 | LR__1135
0ec58     A7 16 68 FC | 	wrlong	#11, fp
0ec5c     08 4E 05 F1 | 	add	fp, #8
0ec60     A7 FE 69 FC | 	wrlong	#255, fp
0ec64     08 4E 85 F1 | 	sub	fp, #8
0ec68                 | LR__1136
0ec68     A7 12 02 F6 | 	mov	arg01, fp
0ec6c     60 AD BF FD | 	call	#_push
0ec70     A7 F0 03 F6 | 	mov	ptra, fp
0ec74     B2 00 A0 FD | 	call	#popregs_
0ec78                 | _do_div_ret
0ec78     2D 00 64 FD | 	ret
0ec7c                 | 
0ec7c                 | ' 
0ec7c                 | ' sub do_fdiv 
0ec7c                 | _do_fdiv
0ec7c     02 4A 05 F6 | 	mov	COUNT_, #2
0ec80     A8 00 A0 FD | 	call	#pushregs_
0ec84     18 F0 07 F1 | 	add	ptra, #24
0ec88     AC AC BF FD | 	call	#_pop
0ec8c     FD 14 02 F6 | 	mov	arg02, result1
0ec90     FE 12 02 F6 | 	mov	arg01, result2
0ec94     FF 1E 02 F6 | 	mov	local01, result3
0ec98     0C 4E 05 F1 | 	add	fp, #12
0ec9c     A7 14 62 FC | 	wrlong	arg02, fp
0eca0     04 4E 05 F1 | 	add	fp, #4
0eca4     A7 12 62 FC | 	wrlong	arg01, fp
0eca8     04 4E 05 F1 | 	add	fp, #4
0ecac     A7 1E 62 FC | 	wrlong	local01, fp
0ecb0     14 4E 85 F1 | 	sub	fp, #20
0ecb4     80 AC BF FD | 	call	#_pop
0ecb8     A7 FA 61 FC | 	wrlong	result1, fp
0ecbc     04 4E 05 F1 | 	add	fp, #4
0ecc0     A7 FC 61 FC | 	wrlong	result2, fp
0ecc4     04 4E 05 F1 | 	add	fp, #4
0ecc8     A7 FE 61 FC | 	wrlong	result3, fp
0eccc                 | ' 
0eccc                 | ' t2=pop()
0eccc                 | ' t1=pop()
0eccc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0eccc     08 4E 85 F1 | 	sub	fp, #8
0ecd0     1F FE 0D F2 | 	cmp	result3, #31 wz
0ecd4     14 4E 05 51 |  if_ne	add	fp, #20
0ecd8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ecdc     14 4E 85 51 |  if_ne	sub	fp, #20
0ece0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0ece4     A7 14 68 AC |  if_e	wrlong	#10, fp
0ece8     08 4E 05 A1 |  if_e	add	fp, #8
0ecec     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ecf0     08 4E 85 A1 |  if_e	sub	fp, #8
0ecf4     38 01 90 AD |  if_e	jmp	#LR__1145
0ecf8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0ecf8     08 4E 05 F1 | 	add	fp, #8
0ecfc     A7 14 02 FB | 	rdlong	arg02, fp
0ed00     08 4E 85 F1 | 	sub	fp, #8
0ed04     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ed08     28 00 90 5D |  if_ne	jmp	#LR__1140
0ed0c     08 4E 05 F1 | 	add	fp, #8
0ed10     A7 3C 68 FC | 	wrlong	#30, fp
0ed14     08 4E 85 F1 | 	sub	fp, #8
0ed18     A7 12 02 FB | 	rdlong	arg01, fp
0ed1c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed20     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed24     00 20 06 36 |  if_ae	mov	local02, #0
0ed28     F4 CD B0 FD | 	call	#__system___float_fromuns
0ed2c     10 FB 61 F5 | 	xor	result1, local02
0ed30     A7 FA 61 FC | 	wrlong	result1, fp
0ed34                 | LR__1140
0ed34                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0ed34     08 4E 05 F1 | 	add	fp, #8
0ed38     A7 14 02 FB | 	rdlong	arg02, fp
0ed3c     08 4E 85 F1 | 	sub	fp, #8
0ed40     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ed44     18 00 90 5D |  if_ne	jmp	#LR__1141
0ed48     08 4E 05 F1 | 	add	fp, #8
0ed4c     A7 3C 68 FC | 	wrlong	#30, fp
0ed50     08 4E 85 F1 | 	sub	fp, #8
0ed54     A7 12 02 FB | 	rdlong	arg01, fp
0ed58     C4 CD B0 FD | 	call	#__system___float_fromuns
0ed5c     A7 FA 61 FC | 	wrlong	result1, fp
0ed60                 | LR__1141
0ed60                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0ed60     14 4E 05 F1 | 	add	fp, #20
0ed64     A7 14 02 FB | 	rdlong	arg02, fp
0ed68     14 4E 85 F1 | 	sub	fp, #20
0ed6c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ed70     34 00 90 5D |  if_ne	jmp	#LR__1142
0ed74     14 4E 05 F1 | 	add	fp, #20
0ed78     A7 3C 68 FC | 	wrlong	#30, fp
0ed7c     08 4E 85 F1 | 	sub	fp, #8
0ed80     A7 12 02 FB | 	rdlong	arg01, fp
0ed84     0C 4E 85 F1 | 	sub	fp, #12
0ed88     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed8c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed90     00 20 06 36 |  if_ae	mov	local02, #0
0ed94     88 CD B0 FD | 	call	#__system___float_fromuns
0ed98     10 FB 61 F5 | 	xor	result1, local02
0ed9c     0C 4E 05 F1 | 	add	fp, #12
0eda0     A7 FA 61 FC | 	wrlong	result1, fp
0eda4     0C 4E 85 F1 | 	sub	fp, #12
0eda8                 | LR__1142
0eda8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0eda8     14 4E 05 F1 | 	add	fp, #20
0edac     A7 14 02 FB | 	rdlong	arg02, fp
0edb0     14 4E 85 F1 | 	sub	fp, #20
0edb4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0edb8     24 00 90 5D |  if_ne	jmp	#LR__1143
0edbc     14 4E 05 F1 | 	add	fp, #20
0edc0     A7 3C 68 FC | 	wrlong	#30, fp
0edc4     08 4E 85 F1 | 	sub	fp, #8
0edc8     A7 12 02 FB | 	rdlong	arg01, fp
0edcc     0C 4E 85 F1 | 	sub	fp, #12
0edd0     4C CD B0 FD | 	call	#__system___float_fromuns
0edd4     0C 4E 05 F1 | 	add	fp, #12
0edd8     A7 FA 61 FC | 	wrlong	result1, fp
0eddc     0C 4E 85 F1 | 	sub	fp, #12
0ede0                 | LR__1143
0ede0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0ede0     08 4E 05 F1 | 	add	fp, #8
0ede4     A7 14 02 FB | 	rdlong	arg02, fp
0ede8     08 4E 85 F1 | 	sub	fp, #8
0edec     1E 14 0E F2 | 	cmp	arg02, #30 wz
0edf0     14 4E 05 A1 |  if_e	add	fp, #20
0edf4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0edf8     14 4E 85 A1 |  if_e	sub	fp, #20
0edfc     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ee00     1C 00 90 5D |  if_ne	jmp	#LR__1144
0ee04     A7 12 02 FB | 	rdlong	arg01, fp
0ee08     0C 4E 05 F1 | 	add	fp, #12
0ee0c     A7 14 02 FB | 	rdlong	arg02, fp
0ee10     0C 4E 85 F1 | 	sub	fp, #12
0ee14     10 D3 B0 FD | 	call	#__system___float_div
0ee18     A7 FA 61 FC | 	wrlong	result1, fp
0ee1c     10 00 90 FD | 	jmp	#LR__1145
0ee20                 | LR__1144
0ee20     A7 16 68 FC | 	wrlong	#11, fp
0ee24     08 4E 05 F1 | 	add	fp, #8
0ee28     A7 FE 69 FC | 	wrlong	#255, fp
0ee2c     08 4E 85 F1 | 	sub	fp, #8
0ee30                 | LR__1145
0ee30     A7 12 02 F6 | 	mov	arg01, fp
0ee34     98 AB BF FD | 	call	#_push
0ee38     A7 F0 03 F6 | 	mov	ptra, fp
0ee3c     B2 00 A0 FD | 	call	#popregs_
0ee40                 | _do_fdiv_ret
0ee40     2D 00 64 FD | 	ret
0ee44                 | 
0ee44                 | ' 
0ee44                 | ' 
0ee44                 | ' sub do_mod 
0ee44                 | _do_mod
0ee44     01 4A 05 F6 | 	mov	COUNT_, #1
0ee48     A8 00 A0 FD | 	call	#pushregs_
0ee4c     18 F0 07 F1 | 	add	ptra, #24
0ee50     E4 AA BF FD | 	call	#_pop
0ee54     FD 64 02 F6 | 	mov	muldivb_, result1
0ee58     FE 62 02 F6 | 	mov	muldiva_, result2
0ee5c     FF 1E 02 F6 | 	mov	local01, result3
0ee60     0C 4E 05 F1 | 	add	fp, #12
0ee64     A7 64 62 FC | 	wrlong	muldivb_, fp
0ee68     04 4E 05 F1 | 	add	fp, #4
0ee6c     A7 62 62 FC | 	wrlong	muldiva_, fp
0ee70     04 4E 05 F1 | 	add	fp, #4
0ee74     A7 1E 62 FC | 	wrlong	local01, fp
0ee78     14 4E 85 F1 | 	sub	fp, #20
0ee7c     B8 AA BF FD | 	call	#_pop
0ee80     A7 FA 61 FC | 	wrlong	result1, fp
0ee84     04 4E 05 F1 | 	add	fp, #4
0ee88     A7 FC 61 FC | 	wrlong	result2, fp
0ee8c     04 4E 05 F1 | 	add	fp, #4
0ee90     A7 FE 61 FC | 	wrlong	result3, fp
0ee94                 | ' 
0ee94                 | ' t2=pop()
0ee94                 | ' t1=pop()
0ee94                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0ee94     08 4E 85 F1 | 	sub	fp, #8
0ee98     1F FE 0D F2 | 	cmp	result3, #31 wz
0ee9c     14 4E 05 51 |  if_ne	add	fp, #20
0eea0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0eea4     14 4E 85 51 |  if_ne	sub	fp, #20
0eea8     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0eeac     A7 14 68 AC |  if_e	wrlong	#10, fp
0eeb0     08 4E 05 A1 |  if_e	add	fp, #8
0eeb4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0eeb8     08 4E 85 A1 |  if_e	sub	fp, #8
0eebc     90 01 90 AD |  if_e	jmp	#LR__1156
0eec0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0eec0     08 4E 05 F1 | 	add	fp, #8
0eec4     A7 64 02 FB | 	rdlong	muldivb_, fp
0eec8     08 4E 85 F1 | 	sub	fp, #8
0eecc     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0eed0     1C 00 90 5D |  if_ne	jmp	#LR__1150
0eed4     08 4E 05 F1 | 	add	fp, #8
0eed8     A7 38 68 FC | 	wrlong	#28, fp
0eedc     08 4E 85 F1 | 	sub	fp, #8
0eee0     A7 12 02 FB | 	rdlong	arg01, fp
0eee4     00 14 06 F6 | 	mov	arg02, #0
0eee8     00 D5 B0 FD | 	call	#__system___float_tointeger
0eeec     A7 FA 61 FC | 	wrlong	result1, fp
0eef0                 | LR__1150
0eef0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0eef0     14 4E 05 F1 | 	add	fp, #20
0eef4     A7 64 02 FB | 	rdlong	muldivb_, fp
0eef8     14 4E 85 F1 | 	sub	fp, #20
0eefc     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0ef00     28 00 90 5D |  if_ne	jmp	#LR__1151
0ef04     14 4E 05 F1 | 	add	fp, #20
0ef08     A7 38 68 FC | 	wrlong	#28, fp
0ef0c     08 4E 85 F1 | 	sub	fp, #8
0ef10     A7 12 02 FB | 	rdlong	arg01, fp
0ef14     0C 4E 85 F1 | 	sub	fp, #12
0ef18     00 14 06 F6 | 	mov	arg02, #0
0ef1c     CC D4 B0 FD | 	call	#__system___float_tointeger
0ef20     0C 4E 05 F1 | 	add	fp, #12
0ef24     A7 FA 61 FC | 	wrlong	result1, fp
0ef28     0C 4E 85 F1 | 	sub	fp, #12
0ef2c                 | LR__1151
0ef2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0ef2c     08 4E 05 F1 | 	add	fp, #8
0ef30     A7 64 02 FB | 	rdlong	muldivb_, fp
0ef34     08 4E 85 F1 | 	sub	fp, #8
0ef38     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0ef3c     14 4E 05 A1 |  if_e	add	fp, #20
0ef40     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ef44     14 4E 85 A1 |  if_e	sub	fp, #20
0ef48     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ef4c     20 00 90 5D |  if_ne	jmp	#LR__1152
0ef50     0C 4E 05 F1 | 	add	fp, #12
0ef54     A7 1E 02 FB | 	rdlong	local01, fp
0ef58     0C 4E 85 F1 | 	sub	fp, #12
0ef5c     A7 64 02 FB | 	rdlong	muldivb_, fp
0ef60     0F 65 12 FD | 	qdiv	muldivb_, local01
0ef64     19 1E 62 FD | 	getqy	local01
0ef68     A7 1E 62 FC | 	wrlong	local01, fp
0ef6c     E0 00 90 FD | 	jmp	#LR__1156
0ef70                 | LR__1152
0ef70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0ef70     08 4E 05 F1 | 	add	fp, #8
0ef74     A7 64 02 FB | 	rdlong	muldivb_, fp
0ef78     08 4E 85 F1 | 	sub	fp, #8
0ef7c     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0ef80     14 4E 05 A1 |  if_e	add	fp, #20
0ef84     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ef88     14 4E 85 A1 |  if_e	sub	fp, #20
0ef8c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ef90     2C 00 90 5D |  if_ne	jmp	#LR__1153
0ef94     0C 4E 05 F1 | 	add	fp, #12
0ef98     A7 1E 02 FB | 	rdlong	local01, fp
0ef9c     0C 4E 85 F1 | 	sub	fp, #12
0efa0     A7 64 02 FB | 	rdlong	muldivb_, fp
0efa4     0F 65 12 FD | 	qdiv	muldivb_, local01
0efa8     19 1E 62 FD | 	getqy	local01
0efac     A7 1E 62 FC | 	wrlong	local01, fp
0efb0     08 4E 05 F1 | 	add	fp, #8
0efb4     A7 38 68 FC | 	wrlong	#28, fp
0efb8     08 4E 85 F1 | 	sub	fp, #8
0efbc     90 00 90 FD | 	jmp	#LR__1156
0efc0                 | LR__1153
0efc0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0efc0     08 4E 05 F1 | 	add	fp, #8
0efc4     A7 64 02 FB | 	rdlong	muldivb_, fp
0efc8     08 4E 85 F1 | 	sub	fp, #8
0efcc     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0efd0     14 4E 05 A1 |  if_e	add	fp, #20
0efd4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0efd8     14 4E 85 A1 |  if_e	sub	fp, #20
0efdc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0efe0     1C 00 90 5D |  if_ne	jmp	#LR__1154
0efe4     A7 62 02 FB | 	rdlong	muldiva_, fp
0efe8     0C 4E 05 F1 | 	add	fp, #12
0efec     A7 64 02 FB | 	rdlong	muldivb_, fp
0eff0     0C 4E 85 F1 | 	sub	fp, #12
0eff4     BA 00 A0 FD | 	call	#divide_
0eff8     A7 62 62 FC | 	wrlong	muldiva_, fp
0effc     50 00 90 FD | 	jmp	#LR__1156
0f000                 | LR__1154
0f000                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0f000     08 4E 05 F1 | 	add	fp, #8
0f004     A7 64 02 FB | 	rdlong	muldivb_, fp
0f008     08 4E 85 F1 | 	sub	fp, #8
0f00c     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0f010     14 4E 05 A1 |  if_e	add	fp, #20
0f014     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f018     14 4E 85 A1 |  if_e	sub	fp, #20
0f01c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0f020     1C 00 90 5D |  if_ne	jmp	#LR__1155
0f024     A7 62 02 FB | 	rdlong	muldiva_, fp
0f028     0C 4E 05 F1 | 	add	fp, #12
0f02c     A7 64 02 FB | 	rdlong	muldivb_, fp
0f030     0C 4E 85 F1 | 	sub	fp, #12
0f034     BA 00 A0 FD | 	call	#divide_
0f038     A7 62 62 FC | 	wrlong	muldiva_, fp
0f03c     10 00 90 FD | 	jmp	#LR__1156
0f040                 | LR__1155
0f040     A7 16 68 FC | 	wrlong	#11, fp
0f044     08 4E 05 F1 | 	add	fp, #8
0f048     A7 FE 69 FC | 	wrlong	#255, fp
0f04c     08 4E 85 F1 | 	sub	fp, #8
0f050                 | LR__1156
0f050     A7 12 02 F6 | 	mov	arg01, fp
0f054     78 A9 BF FD | 	call	#_push
0f058     A7 F0 03 F6 | 	mov	ptra, fp
0f05c     B2 00 A0 FD | 	call	#popregs_
0f060                 | _do_mod_ret
0f060     2D 00 64 FD | 	ret
0f064                 | 
0f064                 | ' 
0f064                 | ' sub do_shl 
0f064                 | _do_shl
0f064     03 4A 05 F6 | 	mov	COUNT_, #3
0f068     A8 00 A0 FD | 	call	#pushregs_
0f06c     18 F0 07 F1 | 	add	ptra, #24
0f070     C4 A8 BF FD | 	call	#_pop
0f074     FD 12 02 F6 | 	mov	arg01, result1
0f078     FE 1E 02 F6 | 	mov	local01, result2
0f07c     FF 20 02 F6 | 	mov	local02, result3
0f080     0C 4E 05 F1 | 	add	fp, #12
0f084     A7 12 62 FC | 	wrlong	arg01, fp
0f088     04 4E 05 F1 | 	add	fp, #4
0f08c     A7 1E 62 FC | 	wrlong	local01, fp
0f090     04 4E 05 F1 | 	add	fp, #4
0f094     A7 20 62 FC | 	wrlong	local02, fp
0f098     14 4E 85 F1 | 	sub	fp, #20
0f09c     98 A8 BF FD | 	call	#_pop
0f0a0     FF 22 02 F6 | 	mov	local03, result3
0f0a4     A7 FA 61 FC | 	wrlong	result1, fp
0f0a8     04 4E 05 F1 | 	add	fp, #4
0f0ac     A7 FC 61 FC | 	wrlong	result2, fp
0f0b0     04 4E 05 F1 | 	add	fp, #4
0f0b4     A7 22 62 FC | 	wrlong	local03, fp
0f0b8                 | ' 
0f0b8                 | ' t2=pop()
0f0b8                 | ' t1=pop()
0f0b8                 | ' 
0f0b8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0f0b8     08 4E 85 F1 | 	sub	fp, #8
0f0bc     1C 22 0E F2 | 	cmp	local03, #28 wz
0f0c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f0c4     A7 22 62 AC |  if_e	wrlong	local03, fp
0f0c8     08 4E 05 A1 |  if_e	add	fp, #8
0f0cc     A7 3A 68 AC |  if_e	wrlong	#29, fp
0f0d0     08 4E 85 A1 |  if_e	sub	fp, #8
0f0d4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0f0d4     14 4E 05 F1 | 	add	fp, #20
0f0d8     A7 22 02 FB | 	rdlong	local03, fp
0f0dc     14 4E 85 F1 | 	sub	fp, #20
0f0e0     1C 22 0E F2 | 	cmp	local03, #28 wz
0f0e4     18 00 90 5D |  if_ne	jmp	#LR__1160
0f0e8     0C 4E 05 F1 | 	add	fp, #12
0f0ec     A7 22 02 FB | 	rdlong	local03, fp
0f0f0     A7 22 62 FC | 	wrlong	local03, fp
0f0f4     08 4E 05 F1 | 	add	fp, #8
0f0f8     A7 3A 68 FC | 	wrlong	#29, fp
0f0fc     14 4E 85 F1 | 	sub	fp, #20
0f100                 | LR__1160
0f100                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0f100     08 4E 05 F1 | 	add	fp, #8
0f104     A7 22 02 FB | 	rdlong	local03, fp
0f108     08 4E 85 F1 | 	sub	fp, #8
0f10c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f110     14 4E 05 51 |  if_ne	add	fp, #20
0f114     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f118     14 4E 85 51 |  if_ne	sub	fp, #20
0f11c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0f120     08 4E 05 51 |  if_ne	add	fp, #8
0f124     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f128     08 4E 85 51 |  if_ne	sub	fp, #8
0f12c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0f130     14 4E 05 51 |  if_ne	add	fp, #20
0f134     14 4E 85 51 |  if_ne	sub	fp, #20
0f138     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0f13c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0f140     08 4E 05 A1 |  if_e	add	fp, #8
0f144     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f148     08 4E 85 A1 |  if_e	sub	fp, #8
0f14c     18 00 90 AD |  if_e	jmp	#LR__1161
0f150     A7 22 02 FB | 	rdlong	local03, fp
0f154     0C 4E 05 F1 | 	add	fp, #12
0f158     A7 1E 02 FB | 	rdlong	local01, fp
0f15c     0C 4E 85 F1 | 	sub	fp, #12
0f160     0F 23 62 F0 | 	shl	local03, local01
0f164     A7 22 62 FC | 	wrlong	local03, fp
0f168                 | LR__1161
0f168     A7 12 02 F6 | 	mov	arg01, fp
0f16c     60 A8 BF FD | 	call	#_push
0f170     A7 F0 03 F6 | 	mov	ptra, fp
0f174     B2 00 A0 FD | 	call	#popregs_
0f178                 | _do_shl_ret
0f178     2D 00 64 FD | 	ret
0f17c                 | 
0f17c                 | ' 
0f17c                 | ' sub do_shr 
0f17c                 | _do_shr
0f17c     03 4A 05 F6 | 	mov	COUNT_, #3
0f180     A8 00 A0 FD | 	call	#pushregs_
0f184     18 F0 07 F1 | 	add	ptra, #24
0f188     AC A7 BF FD | 	call	#_pop
0f18c     FD 12 02 F6 | 	mov	arg01, result1
0f190     FE 1E 02 F6 | 	mov	local01, result2
0f194     FF 20 02 F6 | 	mov	local02, result3
0f198     0C 4E 05 F1 | 	add	fp, #12
0f19c     A7 12 62 FC | 	wrlong	arg01, fp
0f1a0     04 4E 05 F1 | 	add	fp, #4
0f1a4     A7 1E 62 FC | 	wrlong	local01, fp
0f1a8     04 4E 05 F1 | 	add	fp, #4
0f1ac     A7 20 62 FC | 	wrlong	local02, fp
0f1b0     14 4E 85 F1 | 	sub	fp, #20
0f1b4     80 A7 BF FD | 	call	#_pop
0f1b8     FF 22 02 F6 | 	mov	local03, result3
0f1bc     A7 FA 61 FC | 	wrlong	result1, fp
0f1c0     04 4E 05 F1 | 	add	fp, #4
0f1c4     A7 FC 61 FC | 	wrlong	result2, fp
0f1c8     04 4E 05 F1 | 	add	fp, #4
0f1cc     A7 22 62 FC | 	wrlong	local03, fp
0f1d0                 | ' t2=pop()
0f1d0                 | ' t1=pop()
0f1d0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0f1d0     08 4E 85 F1 | 	sub	fp, #8
0f1d4     1C 22 0E F2 | 	cmp	local03, #28 wz
0f1d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f1dc     A7 22 62 AC |  if_e	wrlong	local03, fp
0f1e0     08 4E 05 A1 |  if_e	add	fp, #8
0f1e4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0f1e8     08 4E 85 A1 |  if_e	sub	fp, #8
0f1ec                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0f1ec     14 4E 05 F1 | 	add	fp, #20
0f1f0     A7 22 02 FB | 	rdlong	local03, fp
0f1f4     14 4E 85 F1 | 	sub	fp, #20
0f1f8     1C 22 0E F2 | 	cmp	local03, #28 wz
0f1fc     18 00 90 5D |  if_ne	jmp	#LR__1170
0f200     0C 4E 05 F1 | 	add	fp, #12
0f204     A7 22 02 FB | 	rdlong	local03, fp
0f208     A7 22 62 FC | 	wrlong	local03, fp
0f20c     08 4E 05 F1 | 	add	fp, #8
0f210     A7 3A 68 FC | 	wrlong	#29, fp
0f214     14 4E 85 F1 | 	sub	fp, #20
0f218                 | LR__1170
0f218                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0f218     08 4E 05 F1 | 	add	fp, #8
0f21c     A7 22 02 FB | 	rdlong	local03, fp
0f220     08 4E 85 F1 | 	sub	fp, #8
0f224     1F 22 0E F2 | 	cmp	local03, #31 wz
0f228     14 4E 05 51 |  if_ne	add	fp, #20
0f22c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f230     14 4E 85 51 |  if_ne	sub	fp, #20
0f234     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0f238     08 4E 05 51 |  if_ne	add	fp, #8
0f23c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f240     08 4E 85 51 |  if_ne	sub	fp, #8
0f244     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0f248     14 4E 05 51 |  if_ne	add	fp, #20
0f24c     14 4E 85 51 |  if_ne	sub	fp, #20
0f250     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0f254     A7 0C 68 AC |  if_e	wrlong	#6, fp
0f258     08 4E 05 A1 |  if_e	add	fp, #8
0f25c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f260     08 4E 85 A1 |  if_e	sub	fp, #8
0f264     18 00 90 AD |  if_e	jmp	#LR__1171
0f268     A7 22 02 FB | 	rdlong	local03, fp
0f26c     0C 4E 05 F1 | 	add	fp, #12
0f270     A7 1E 02 FB | 	rdlong	local01, fp
0f274     0C 4E 85 F1 | 	sub	fp, #12
0f278     0F 23 42 F0 | 	shr	local03, local01
0f27c     A7 22 62 FC | 	wrlong	local03, fp
0f280                 | LR__1171
0f280     A7 12 02 F6 | 	mov	arg01, fp
0f284     48 A7 BF FD | 	call	#_push
0f288     A7 F0 03 F6 | 	mov	ptra, fp
0f28c     B2 00 A0 FD | 	call	#popregs_
0f290                 | _do_shr_ret
0f290     2D 00 64 FD | 	ret
0f294                 | 
0f294                 | ' 
0f294                 | ' sub do_power 
0f294                 | _do_power
0f294     02 4A 05 F6 | 	mov	COUNT_, #2
0f298     A8 00 A0 FD | 	call	#pushregs_
0f29c     18 F0 07 F1 | 	add	ptra, #24
0f2a0     94 A6 BF FD | 	call	#_pop
0f2a4     FD 14 02 F6 | 	mov	arg02, result1
0f2a8     FE 12 02 F6 | 	mov	arg01, result2
0f2ac     FF 1E 02 F6 | 	mov	local01, result3
0f2b0     0C 4E 05 F1 | 	add	fp, #12
0f2b4     A7 14 62 FC | 	wrlong	arg02, fp
0f2b8     04 4E 05 F1 | 	add	fp, #4
0f2bc     A7 12 62 FC | 	wrlong	arg01, fp
0f2c0     04 4E 05 F1 | 	add	fp, #4
0f2c4     A7 1E 62 FC | 	wrlong	local01, fp
0f2c8     14 4E 85 F1 | 	sub	fp, #20
0f2cc     68 A6 BF FD | 	call	#_pop
0f2d0     A7 FA 61 FC | 	wrlong	result1, fp
0f2d4     04 4E 05 F1 | 	add	fp, #4
0f2d8     A7 FC 61 FC | 	wrlong	result2, fp
0f2dc     04 4E 05 F1 | 	add	fp, #4
0f2e0     A7 FE 61 FC | 	wrlong	result3, fp
0f2e4                 | ' t2=pop()
0f2e4                 | ' t1=pop()
0f2e4                 | ' 
0f2e4                 | ' 
0f2e4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0f2e4     08 4E 85 F1 | 	sub	fp, #8
0f2e8     1F FE 0D F2 | 	cmp	result3, #31 wz
0f2ec     14 4E 05 51 |  if_ne	add	fp, #20
0f2f0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f2f4     14 4E 85 51 |  if_ne	sub	fp, #20
0f2f8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0f2fc     A7 18 68 AC |  if_e	wrlong	#12, fp
0f300     08 4E 05 A1 |  if_e	add	fp, #8
0f304     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f308     08 4E 85 A1 |  if_e	sub	fp, #8
0f30c     38 01 90 AD |  if_e	jmp	#LR__1185
0f310                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0f310     08 4E 05 F1 | 	add	fp, #8
0f314     A7 14 02 FB | 	rdlong	arg02, fp
0f318     08 4E 85 F1 | 	sub	fp, #8
0f31c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0f320     28 00 90 5D |  if_ne	jmp	#LR__1180
0f324     08 4E 05 F1 | 	add	fp, #8
0f328     A7 3C 68 FC | 	wrlong	#30, fp
0f32c     08 4E 85 F1 | 	sub	fp, #8
0f330     A7 12 02 FB | 	rdlong	arg01, fp
0f334     09 13 52 F6 | 	abs	arg01, arg01 wc
0f338     1F 20 C6 C9 |  if_b	decod	local02, #31
0f33c     00 20 06 36 |  if_ae	mov	local02, #0
0f340     DC C7 B0 FD | 	call	#__system___float_fromuns
0f344     10 FB 61 F5 | 	xor	result1, local02
0f348     A7 FA 61 FC | 	wrlong	result1, fp
0f34c                 | LR__1180
0f34c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0f34c     08 4E 05 F1 | 	add	fp, #8
0f350     A7 14 02 FB | 	rdlong	arg02, fp
0f354     08 4E 85 F1 | 	sub	fp, #8
0f358     1D 14 0E F2 | 	cmp	arg02, #29 wz
0f35c     18 00 90 5D |  if_ne	jmp	#LR__1181
0f360     08 4E 05 F1 | 	add	fp, #8
0f364     A7 3C 68 FC | 	wrlong	#30, fp
0f368     08 4E 85 F1 | 	sub	fp, #8
0f36c     A7 12 02 FB | 	rdlong	arg01, fp
0f370     AC C7 B0 FD | 	call	#__system___float_fromuns
0f374     A7 FA 61 FC | 	wrlong	result1, fp
0f378                 | LR__1181
0f378                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0f378     14 4E 05 F1 | 	add	fp, #20
0f37c     A7 14 02 FB | 	rdlong	arg02, fp
0f380     14 4E 85 F1 | 	sub	fp, #20
0f384     1C 14 0E F2 | 	cmp	arg02, #28 wz
0f388     34 00 90 5D |  if_ne	jmp	#LR__1182
0f38c     14 4E 05 F1 | 	add	fp, #20
0f390     A7 3C 68 FC | 	wrlong	#30, fp
0f394     08 4E 85 F1 | 	sub	fp, #8
0f398     A7 12 02 FB | 	rdlong	arg01, fp
0f39c     0C 4E 85 F1 | 	sub	fp, #12
0f3a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f3a4     1F 20 C6 C9 |  if_b	decod	local02, #31
0f3a8     00 20 06 36 |  if_ae	mov	local02, #0
0f3ac     70 C7 B0 FD | 	call	#__system___float_fromuns
0f3b0     10 FB 61 F5 | 	xor	result1, local02
0f3b4     0C 4E 05 F1 | 	add	fp, #12
0f3b8     A7 FA 61 FC | 	wrlong	result1, fp
0f3bc     0C 4E 85 F1 | 	sub	fp, #12
0f3c0                 | LR__1182
0f3c0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0f3c0     14 4E 05 F1 | 	add	fp, #20
0f3c4     A7 14 02 FB | 	rdlong	arg02, fp
0f3c8     14 4E 85 F1 | 	sub	fp, #20
0f3cc     1D 14 0E F2 | 	cmp	arg02, #29 wz
0f3d0     24 00 90 5D |  if_ne	jmp	#LR__1183
0f3d4     14 4E 05 F1 | 	add	fp, #20
0f3d8     A7 3C 68 FC | 	wrlong	#30, fp
0f3dc     08 4E 85 F1 | 	sub	fp, #8
0f3e0     A7 12 02 FB | 	rdlong	arg01, fp
0f3e4     0C 4E 85 F1 | 	sub	fp, #12
0f3e8     34 C7 B0 FD | 	call	#__system___float_fromuns
0f3ec     0C 4E 05 F1 | 	add	fp, #12
0f3f0     A7 FA 61 FC | 	wrlong	result1, fp
0f3f4     0C 4E 85 F1 | 	sub	fp, #12
0f3f8                 | LR__1183
0f3f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0f3f8     08 4E 05 F1 | 	add	fp, #8
0f3fc     A7 14 02 FB | 	rdlong	arg02, fp
0f400     08 4E 85 F1 | 	sub	fp, #8
0f404     1E 14 0E F2 | 	cmp	arg02, #30 wz
0f408     14 4E 05 A1 |  if_e	add	fp, #20
0f40c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f410     14 4E 85 A1 |  if_e	sub	fp, #20
0f414     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0f418     1C 00 90 5D |  if_ne	jmp	#LR__1184
0f41c     A7 12 02 FB | 	rdlong	arg01, fp
0f420     0C 4E 05 F1 | 	add	fp, #12
0f424     A7 14 02 FB | 	rdlong	arg02, fp
0f428     0C 4E 85 F1 | 	sub	fp, #12
0f42c     D8 D9 B0 FD | 	call	#__system____builtin_powf
0f430     A7 FA 61 FC | 	wrlong	result1, fp
0f434     10 00 90 FD | 	jmp	#LR__1185
0f438                 | LR__1184
0f438     A7 1A 68 FC | 	wrlong	#13, fp
0f43c     08 4E 05 F1 | 	add	fp, #8
0f440     A7 FE 69 FC | 	wrlong	#255, fp
0f444     08 4E 85 F1 | 	sub	fp, #8
0f448                 | LR__1185
0f448     A7 12 02 F6 | 	mov	arg01, fp
0f44c     80 A5 BF FD | 	call	#_push
0f450     A7 F0 03 F6 | 	mov	ptra, fp
0f454     B2 00 A0 FD | 	call	#popregs_
0f458                 | _do_power_ret
0f458     2D 00 64 FD | 	ret
0f45c                 | 
0f45c                 | ' 
0f45c                 | ' 
0f45c                 | ' sub do_eq
0f45c                 | _do_eq
0f45c     05 4A 05 F6 | 	mov	COUNT_, #5
0f460     A8 00 A0 FD | 	call	#pushregs_
0f464     18 F0 07 F1 | 	add	ptra, #24
0f468     CC A4 BF FD | 	call	#_pop
0f46c     FD 1E 02 F6 | 	mov	local01, result1
0f470     FE 20 02 F6 | 	mov	local02, result2
0f474     FF 22 02 F6 | 	mov	local03, result3
0f478     0C 4E 05 F1 | 	add	fp, #12
0f47c     A7 1E 62 FC | 	wrlong	local01, fp
0f480     04 4E 05 F1 | 	add	fp, #4
0f484     A7 20 62 FC | 	wrlong	local02, fp
0f488     04 4E 05 F1 | 	add	fp, #4
0f48c     A7 22 62 FC | 	wrlong	local03, fp
0f490     14 4E 85 F1 | 	sub	fp, #20
0f494     A0 A4 BF FD | 	call	#_pop
0f498     FF 22 02 F6 | 	mov	local03, result3
0f49c     A7 FA 61 FC | 	wrlong	result1, fp
0f4a0     04 4E 05 F1 | 	add	fp, #4
0f4a4     A7 FC 61 FC | 	wrlong	result2, fp
0f4a8     04 4E 05 F1 | 	add	fp, #4
0f4ac     A7 22 62 FC | 	wrlong	local03, fp
0f4b0                 | ' t2=pop()
0f4b0                 | ' t1=pop()
0f4b0                 | ' 
0f4b0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0f4b0     08 4E 85 F1 | 	sub	fp, #8
0f4b4     1F 22 0E F2 | 	cmp	local03, #31 wz
0f4b8     14 4E 05 A1 |  if_e	add	fp, #20
0f4bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4c0     14 4E 85 A1 |  if_e	sub	fp, #20
0f4c4     12 23 02 A6 |  if_e	mov	local03, local04
0f4c8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f4cc     28 00 90 5D |  if_ne	jmp	#LR__1190
0f4d0     00 1E 06 F6 | 	mov	local01, #0
0f4d4     A7 12 02 FB | 	rdlong	arg01, fp
0f4d8     0C 4E 05 F1 | 	add	fp, #12
0f4dc     A7 14 02 FB | 	rdlong	arg02, fp
0f4e0     0C 4E 85 F1 | 	sub	fp, #12
0f4e4     78 9F B0 FD | 	call	#__system___string_cmp
0f4e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0f4ec     00 1E 26 A6 |  if_e	not	local01, #0
0f4f0     A7 1E 62 FC | 	wrlong	local01, fp
0f4f4     1C 04 90 FD | 	jmp	#LR__1203
0f4f8                 | LR__1190
0f4f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0f4f8     08 4E 05 F1 | 	add	fp, #8
0f4fc     A7 1E 02 FB | 	rdlong	local01, fp
0f500     08 4E 85 F1 | 	sub	fp, #8
0f504     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f508     14 4E 05 A1 |  if_e	add	fp, #20
0f50c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f510     14 4E 85 A1 |  if_e	sub	fp, #20
0f514     12 23 02 A6 |  if_e	mov	local03, local04
0f518     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f51c     2C 00 90 5D |  if_ne	jmp	#LR__1191
0f520     00 1E 06 F6 | 	mov	local01, #0
0f524     A7 12 02 FB | 	rdlong	arg01, fp
0f528     0C 4E 05 F1 | 	add	fp, #12
0f52c     A7 14 02 FB | 	rdlong	arg02, fp
0f530     0C 4E 85 F1 | 	sub	fp, #12
0f534     01 16 06 F6 | 	mov	arg03, #1
0f538     1C CE B0 FD | 	call	#__system___float_cmp
0f53c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f540     00 1E 26 A6 |  if_e	not	local01, #0
0f544     A7 1E 62 FC | 	wrlong	local01, fp
0f548     C8 03 90 FD | 	jmp	#LR__1203
0f54c                 | LR__1191
0f54c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0f54c     08 4E 05 F1 | 	add	fp, #8
0f550     A7 1E 02 FB | 	rdlong	local01, fp
0f554     08 4E 85 F1 | 	sub	fp, #8
0f558     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f55c     14 4E 05 A1 |  if_e	add	fp, #20
0f560     A7 24 02 AB |  if_e	rdlong	local04, fp
0f564     14 4E 85 A1 |  if_e	sub	fp, #20
0f568     12 23 02 A6 |  if_e	mov	local03, local04
0f56c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f570     48 00 90 5D |  if_ne	jmp	#LR__1192
0f574     00 1E 06 F6 | 	mov	local01, #0
0f578     A7 20 02 FB | 	rdlong	local02, fp
0f57c     0C 4E 05 F1 | 	add	fp, #12
0f580     A7 12 02 FB | 	rdlong	arg01, fp
0f584     0C 4E 85 F1 | 	sub	fp, #12
0f588     09 13 52 F6 | 	abs	arg01, arg01 wc
0f58c     1F 26 C6 C9 |  if_b	decod	local05, #31
0f590     00 26 06 36 |  if_ae	mov	local05, #0
0f594     88 C5 B0 FD | 	call	#__system___float_fromuns
0f598     13 FB 61 F5 | 	xor	result1, local05
0f59c     FD 14 02 F6 | 	mov	arg02, result1
0f5a0     10 13 02 F6 | 	mov	arg01, local02
0f5a4     01 16 06 F6 | 	mov	arg03, #1
0f5a8     AC CD B0 FD | 	call	#__system___float_cmp
0f5ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0f5b0     00 1E 26 A6 |  if_e	not	local01, #0
0f5b4     A7 1E 62 FC | 	wrlong	local01, fp
0f5b8     58 03 90 FD | 	jmp	#LR__1203
0f5bc                 | LR__1192
0f5bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0f5bc     08 4E 05 F1 | 	add	fp, #8
0f5c0     A7 1E 02 FB | 	rdlong	local01, fp
0f5c4     08 4E 85 F1 | 	sub	fp, #8
0f5c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5cc     14 4E 05 A1 |  if_e	add	fp, #20
0f5d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5d4     14 4E 85 A1 |  if_e	sub	fp, #20
0f5d8     12 23 02 A6 |  if_e	mov	local03, local04
0f5dc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f5e0     38 00 90 5D |  if_ne	jmp	#LR__1193
0f5e4     00 1E 06 F6 | 	mov	local01, #0
0f5e8     A7 20 02 FB | 	rdlong	local02, fp
0f5ec     0C 4E 05 F1 | 	add	fp, #12
0f5f0     A7 12 02 FB | 	rdlong	arg01, fp
0f5f4     0C 4E 85 F1 | 	sub	fp, #12
0f5f8     24 C5 B0 FD | 	call	#__system___float_fromuns
0f5fc     FD 14 02 F6 | 	mov	arg02, result1
0f600     10 13 02 F6 | 	mov	arg01, local02
0f604     01 16 06 F6 | 	mov	arg03, #1
0f608     4C CD B0 FD | 	call	#__system___float_cmp
0f60c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f610     00 1E 26 A6 |  if_e	not	local01, #0
0f614     A7 1E 62 FC | 	wrlong	local01, fp
0f618     F8 02 90 FD | 	jmp	#LR__1203
0f61c                 | LR__1193
0f61c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0f61c     08 4E 05 F1 | 	add	fp, #8
0f620     A7 1E 02 FB | 	rdlong	local01, fp
0f624     08 4E 85 F1 | 	sub	fp, #8
0f628     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f62c     14 4E 05 A1 |  if_e	add	fp, #20
0f630     A7 24 02 AB |  if_e	rdlong	local04, fp
0f634     14 4E 85 A1 |  if_e	sub	fp, #20
0f638     12 23 02 A6 |  if_e	mov	local03, local04
0f63c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f640     44 00 90 5D |  if_ne	jmp	#LR__1194
0f644     00 1E 06 F6 | 	mov	local01, #0
0f648     A7 12 02 FB | 	rdlong	arg01, fp
0f64c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f650     1F 26 C6 C9 |  if_b	decod	local05, #31
0f654     00 26 06 36 |  if_ae	mov	local05, #0
0f658     C4 C4 B0 FD | 	call	#__system___float_fromuns
0f65c     13 FB 61 F5 | 	xor	result1, local05
0f660     FD 12 02 F6 | 	mov	arg01, result1
0f664     0C 4E 05 F1 | 	add	fp, #12
0f668     A7 14 02 FB | 	rdlong	arg02, fp
0f66c     0C 4E 85 F1 | 	sub	fp, #12
0f670     01 16 06 F6 | 	mov	arg03, #1
0f674     E0 CC B0 FD | 	call	#__system___float_cmp
0f678     00 FA 0D F2 | 	cmp	result1, #0 wz
0f67c     00 1E 26 A6 |  if_e	not	local01, #0
0f680     A7 1E 62 FC | 	wrlong	local01, fp
0f684     8C 02 90 FD | 	jmp	#LR__1203
0f688                 | LR__1194
0f688                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0f688     08 4E 05 F1 | 	add	fp, #8
0f68c     A7 1E 02 FB | 	rdlong	local01, fp
0f690     08 4E 85 F1 | 	sub	fp, #8
0f694     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f698     14 4E 05 A1 |  if_e	add	fp, #20
0f69c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6a0     14 4E 85 A1 |  if_e	sub	fp, #20
0f6a4     12 23 02 A6 |  if_e	mov	local03, local04
0f6a8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f6ac     24 00 90 5D |  if_ne	jmp	#LR__1195
0f6b0     00 1E 06 F6 | 	mov	local01, #0
0f6b4     A7 20 02 FB | 	rdlong	local02, fp
0f6b8     0C 4E 05 F1 | 	add	fp, #12
0f6bc     A7 22 02 FB | 	rdlong	local03, fp
0f6c0     0C 4E 85 F1 | 	sub	fp, #12
0f6c4     11 21 0A F2 | 	cmp	local02, local03 wz
0f6c8     01 1E 66 A6 |  if_e	neg	local01, #1
0f6cc     A7 1E 62 FC | 	wrlong	local01, fp
0f6d0     40 02 90 FD | 	jmp	#LR__1203
0f6d4                 | LR__1195
0f6d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0f6d4     08 4E 05 F1 | 	add	fp, #8
0f6d8     A7 1E 02 FB | 	rdlong	local01, fp
0f6dc     08 4E 85 F1 | 	sub	fp, #8
0f6e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f6e4     14 4E 05 A1 |  if_e	add	fp, #20
0f6e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6ec     14 4E 85 A1 |  if_e	sub	fp, #20
0f6f0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f6f4     24 00 90 5D |  if_ne	jmp	#LR__1196
0f6f8     00 1E 06 F6 | 	mov	local01, #0
0f6fc     A7 20 02 FB | 	rdlong	local02, fp
0f700     0C 4E 05 F1 | 	add	fp, #12
0f704     A7 22 02 FB | 	rdlong	local03, fp
0f708     0C 4E 85 F1 | 	sub	fp, #12
0f70c     11 21 0A F2 | 	cmp	local02, local03 wz
0f710     01 1E 66 A6 |  if_e	neg	local01, #1
0f714     A7 1E 62 FC | 	wrlong	local01, fp
0f718     F8 01 90 FD | 	jmp	#LR__1203
0f71c                 | LR__1196
0f71c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0f71c     08 4E 05 F1 | 	add	fp, #8
0f720     A7 1E 02 FB | 	rdlong	local01, fp
0f724     08 4E 85 F1 | 	sub	fp, #8
0f728     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f72c     14 4E 05 A1 |  if_e	add	fp, #20
0f730     A7 22 02 AB |  if_e	rdlong	local03, fp
0f734     14 4E 85 A1 |  if_e	sub	fp, #20
0f738     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f73c     34 00 90 5D |  if_ne	jmp	#LR__1197
0f740     00 1E 06 F6 | 	mov	local01, #0
0f744     A7 12 02 FB | 	rdlong	arg01, fp
0f748     D4 C3 B0 FD | 	call	#__system___float_fromuns
0f74c     FD 12 02 F6 | 	mov	arg01, result1
0f750     0C 4E 05 F1 | 	add	fp, #12
0f754     A7 14 02 FB | 	rdlong	arg02, fp
0f758     0C 4E 85 F1 | 	sub	fp, #12
0f75c     01 16 06 F6 | 	mov	arg03, #1
0f760     F4 CB B0 FD | 	call	#__system___float_cmp
0f764     00 FA 0D F2 | 	cmp	result1, #0 wz
0f768     00 1E 26 A6 |  if_e	not	local01, #0
0f76c     A7 1E 62 FC | 	wrlong	local01, fp
0f770     A0 01 90 FD | 	jmp	#LR__1203
0f774                 | LR__1197
0f774                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0f774     08 4E 05 F1 | 	add	fp, #8
0f778     A7 1E 02 FB | 	rdlong	local01, fp
0f77c     08 4E 85 F1 | 	sub	fp, #8
0f780     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f784     14 4E 05 A1 |  if_e	add	fp, #20
0f788     A7 22 02 AB |  if_e	rdlong	local03, fp
0f78c     14 4E 85 A1 |  if_e	sub	fp, #20
0f790     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f794     24 00 90 5D |  if_ne	jmp	#LR__1198
0f798     00 1E 06 F6 | 	mov	local01, #0
0f79c     A7 20 02 FB | 	rdlong	local02, fp
0f7a0     0C 4E 05 F1 | 	add	fp, #12
0f7a4     A7 22 02 FB | 	rdlong	local03, fp
0f7a8     0C 4E 85 F1 | 	sub	fp, #12
0f7ac     11 21 0A F2 | 	cmp	local02, local03 wz
0f7b0     01 1E 66 A6 |  if_e	neg	local01, #1
0f7b4     A7 1E 62 FC | 	wrlong	local01, fp
0f7b8     58 01 90 FD | 	jmp	#LR__1203
0f7bc                 | LR__1198
0f7bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0f7bc     08 4E 05 F1 | 	add	fp, #8
0f7c0     A7 1E 02 FB | 	rdlong	local01, fp
0f7c4     08 4E 85 F1 | 	sub	fp, #8
0f7c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f7cc     14 4E 05 A1 |  if_e	add	fp, #20
0f7d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7d4     14 4E 85 A1 |  if_e	sub	fp, #20
0f7d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f7dc     24 00 90 5D |  if_ne	jmp	#LR__1199
0f7e0     00 1E 06 F6 | 	mov	local01, #0
0f7e4     A7 20 02 FB | 	rdlong	local02, fp
0f7e8     0C 4E 05 F1 | 	add	fp, #12
0f7ec     A7 22 02 FB | 	rdlong	local03, fp
0f7f0     0C 4E 85 F1 | 	sub	fp, #12
0f7f4     11 21 0A F2 | 	cmp	local02, local03 wz
0f7f8     01 1E 66 A6 |  if_e	neg	local01, #1
0f7fc     A7 1E 62 FC | 	wrlong	local01, fp
0f800     10 01 90 FD | 	jmp	#LR__1203
0f804                 | LR__1199
0f804                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0f804     08 4E 05 F1 | 	add	fp, #8
0f808     A7 1E 02 FB | 	rdlong	local01, fp
0f80c     08 4E 85 F1 | 	sub	fp, #8
0f810     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f814     14 4E 05 A1 |  if_e	add	fp, #20
0f818     A7 22 02 AB |  if_e	rdlong	local03, fp
0f81c     14 4E 85 A1 |  if_e	sub	fp, #20
0f820     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f824     30 00 90 5D |  if_ne	jmp	#LR__1200
0f828     00 1E 06 F6 | 	mov	local01, #0
0f82c     A7 12 02 FB | 	rdlong	arg01, fp
0f830     80 D6 BF FD | 	call	#_convertstring
0f834     FD 12 02 F6 | 	mov	arg01, result1
0f838     0C 4E 05 F1 | 	add	fp, #12
0f83c     A7 14 02 FB | 	rdlong	arg02, fp
0f840     0C 4E 85 F1 | 	sub	fp, #12
0f844     18 9C B0 FD | 	call	#__system___string_cmp
0f848     00 FA 0D F2 | 	cmp	result1, #0 wz
0f84c     00 1E 26 A6 |  if_e	not	local01, #0
0f850     A7 1E 62 FC | 	wrlong	local01, fp
0f854     BC 00 90 FD | 	jmp	#LR__1203
0f858                 | LR__1200
0f858                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0f858     08 4E 05 F1 | 	add	fp, #8
0f85c     A7 1E 02 FB | 	rdlong	local01, fp
0f860     08 4E 85 F1 | 	sub	fp, #8
0f864     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f868     14 4E 05 A1 |  if_e	add	fp, #20
0f86c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f870     14 4E 85 A1 |  if_e	sub	fp, #20
0f874     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f878     34 00 90 5D |  if_ne	jmp	#LR__1201
0f87c     00 1E 06 F6 | 	mov	local01, #0
0f880     A7 20 02 FB | 	rdlong	local02, fp
0f884     0C 4E 05 F1 | 	add	fp, #12
0f888     A7 12 02 FB | 	rdlong	arg01, fp
0f88c     0C 4E 85 F1 | 	sub	fp, #12
0f890     20 D6 BF FD | 	call	#_convertstring
0f894     FD 14 02 F6 | 	mov	arg02, result1
0f898     10 13 02 F6 | 	mov	arg01, local02
0f89c     C0 9B B0 FD | 	call	#__system___string_cmp
0f8a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0f8a4     00 1E 26 A6 |  if_e	not	local01, #0
0f8a8     A7 1E 62 FC | 	wrlong	local01, fp
0f8ac     64 00 90 FD | 	jmp	#LR__1203
0f8b0                 | LR__1201
0f8b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0f8b0     08 4E 05 F1 | 	add	fp, #8
0f8b4     A7 1E 02 FB | 	rdlong	local01, fp
0f8b8     08 4E 85 F1 | 	sub	fp, #8
0f8bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f8c0     14 4E 05 A1 |  if_e	add	fp, #20
0f8c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f8c8     14 4E 85 A1 |  if_e	sub	fp, #20
0f8cc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f8d0     3C 00 90 5D |  if_ne	jmp	#LR__1202
0f8d4     00 1E 06 F6 | 	mov	local01, #0
0f8d8     A7 12 02 FB | 	rdlong	arg01, fp
0f8dc     D4 D5 BF FD | 	call	#_convertstring
0f8e0     FD 20 02 F6 | 	mov	local02, result1
0f8e4     0C 4E 05 F1 | 	add	fp, #12
0f8e8     A7 12 02 FB | 	rdlong	arg01, fp
0f8ec     0C 4E 85 F1 | 	sub	fp, #12
0f8f0     C0 D5 BF FD | 	call	#_convertstring
0f8f4     FD 14 02 F6 | 	mov	arg02, result1
0f8f8     10 13 02 F6 | 	mov	arg01, local02
0f8fc     60 9B B0 FD | 	call	#__system___string_cmp
0f900     00 FA 0D F2 | 	cmp	result1, #0 wz
0f904     00 1E 26 A6 |  if_e	not	local01, #0
0f908     A7 1E 62 FC | 	wrlong	local01, fp
0f90c     04 00 90 FD | 	jmp	#LR__1203
0f910                 | LR__1202
0f910     A7 00 68 FC | 	wrlong	#0, fp
0f914                 | LR__1203
0f914     08 4E 05 F1 | 	add	fp, #8
0f918     A7 38 68 FC | 	wrlong	#28, fp
0f91c     08 4E 85 F1 | 	sub	fp, #8
0f920     A7 12 02 F6 | 	mov	arg01, fp
0f924     A8 A0 BF FD | 	call	#_push
0f928     A7 F0 03 F6 | 	mov	ptra, fp
0f92c     B2 00 A0 FD | 	call	#popregs_
0f930                 | _do_eq_ret
0f930     2D 00 64 FD | 	ret
0f934                 | 
0f934                 | ' 
0f934                 | ' sub do_gt
0f934                 | _do_gt
0f934     05 4A 05 F6 | 	mov	COUNT_, #5
0f938     A8 00 A0 FD | 	call	#pushregs_
0f93c     18 F0 07 F1 | 	add	ptra, #24
0f940     F4 9F BF FD | 	call	#_pop
0f944     FD 1E 02 F6 | 	mov	local01, result1
0f948     FE 20 02 F6 | 	mov	local02, result2
0f94c     FF 22 02 F6 | 	mov	local03, result3
0f950     0C 4E 05 F1 | 	add	fp, #12
0f954     A7 1E 62 FC | 	wrlong	local01, fp
0f958     04 4E 05 F1 | 	add	fp, #4
0f95c     A7 20 62 FC | 	wrlong	local02, fp
0f960     04 4E 05 F1 | 	add	fp, #4
0f964     A7 22 62 FC | 	wrlong	local03, fp
0f968     14 4E 85 F1 | 	sub	fp, #20
0f96c     C8 9F BF FD | 	call	#_pop
0f970     FF 22 02 F6 | 	mov	local03, result3
0f974     A7 FA 61 FC | 	wrlong	result1, fp
0f978     04 4E 05 F1 | 	add	fp, #4
0f97c     A7 FC 61 FC | 	wrlong	result2, fp
0f980     04 4E 05 F1 | 	add	fp, #4
0f984     A7 22 62 FC | 	wrlong	local03, fp
0f988                 | ' t2=pop()
0f988                 | ' t1=pop()
0f988                 | ' 
0f988                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0f988     08 4E 85 F1 | 	sub	fp, #8
0f98c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f990     14 4E 05 A1 |  if_e	add	fp, #20
0f994     A7 24 02 AB |  if_e	rdlong	local04, fp
0f998     14 4E 85 A1 |  if_e	sub	fp, #20
0f99c     12 23 02 A6 |  if_e	mov	local03, local04
0f9a0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f9a4     28 00 90 5D |  if_ne	jmp	#LR__1210
0f9a8     00 1E 06 F6 | 	mov	local01, #0
0f9ac     A7 12 02 FB | 	rdlong	arg01, fp
0f9b0     0C 4E 05 F1 | 	add	fp, #12
0f9b4     A7 14 02 FB | 	rdlong	arg02, fp
0f9b8     0C 4E 85 F1 | 	sub	fp, #12
0f9bc     A0 9A B0 FD | 	call	#__system___string_cmp
0f9c0     01 FA 55 F2 | 	cmps	result1, #1 wc
0f9c4     00 1E 26 36 |  if_ae	not	local01, #0
0f9c8     A7 1E 62 FC | 	wrlong	local01, fp
0f9cc     1C 04 90 FD | 	jmp	#LR__1223
0f9d0                 | LR__1210
0f9d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0f9d0     08 4E 05 F1 | 	add	fp, #8
0f9d4     A7 1E 02 FB | 	rdlong	local01, fp
0f9d8     08 4E 85 F1 | 	sub	fp, #8
0f9dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f9e0     14 4E 05 A1 |  if_e	add	fp, #20
0f9e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f9ec     12 23 02 A6 |  if_e	mov	local03, local04
0f9f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f9f4     2C 00 90 5D |  if_ne	jmp	#LR__1211
0f9f8     00 1E 06 F6 | 	mov	local01, #0
0f9fc     A7 12 02 FB | 	rdlong	arg01, fp
0fa00     0C 4E 05 F1 | 	add	fp, #12
0fa04     A7 14 02 FB | 	rdlong	arg02, fp
0fa08     0C 4E 85 F1 | 	sub	fp, #12
0fa0c     01 16 66 F6 | 	neg	arg03, #1
0fa10     44 C9 B0 FD | 	call	#__system___float_cmp
0fa14     01 FA 55 F2 | 	cmps	result1, #1 wc
0fa18     00 1E 26 36 |  if_ae	not	local01, #0
0fa1c     A7 1E 62 FC | 	wrlong	local01, fp
0fa20     C8 03 90 FD | 	jmp	#LR__1223
0fa24                 | LR__1211
0fa24                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0fa24     08 4E 05 F1 | 	add	fp, #8
0fa28     A7 1E 02 FB | 	rdlong	local01, fp
0fa2c     08 4E 85 F1 | 	sub	fp, #8
0fa30     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa34     14 4E 05 A1 |  if_e	add	fp, #20
0fa38     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa3c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa40     12 23 02 A6 |  if_e	mov	local03, local04
0fa44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fa48     48 00 90 5D |  if_ne	jmp	#LR__1212
0fa4c     00 1E 06 F6 | 	mov	local01, #0
0fa50     A7 20 02 FB | 	rdlong	local02, fp
0fa54     0C 4E 05 F1 | 	add	fp, #12
0fa58     A7 12 02 FB | 	rdlong	arg01, fp
0fa5c     0C 4E 85 F1 | 	sub	fp, #12
0fa60     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa64     1F 26 C6 C9 |  if_b	decod	local05, #31
0fa68     00 26 06 36 |  if_ae	mov	local05, #0
0fa6c     B0 C0 B0 FD | 	call	#__system___float_fromuns
0fa70     13 FB 61 F5 | 	xor	result1, local05
0fa74     FD 14 02 F6 | 	mov	arg02, result1
0fa78     10 13 02 F6 | 	mov	arg01, local02
0fa7c     01 16 66 F6 | 	neg	arg03, #1
0fa80     D4 C8 B0 FD | 	call	#__system___float_cmp
0fa84     01 FA 55 F2 | 	cmps	result1, #1 wc
0fa88     00 1E 26 36 |  if_ae	not	local01, #0
0fa8c     A7 1E 62 FC | 	wrlong	local01, fp
0fa90     58 03 90 FD | 	jmp	#LR__1223
0fa94                 | LR__1212
0fa94                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0fa94     08 4E 05 F1 | 	add	fp, #8
0fa98     A7 1E 02 FB | 	rdlong	local01, fp
0fa9c     08 4E 85 F1 | 	sub	fp, #8
0faa0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0faa4     14 4E 05 A1 |  if_e	add	fp, #20
0faa8     A7 24 02 AB |  if_e	rdlong	local04, fp
0faac     14 4E 85 A1 |  if_e	sub	fp, #20
0fab0     12 23 02 A6 |  if_e	mov	local03, local04
0fab4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fab8     38 00 90 5D |  if_ne	jmp	#LR__1213
0fabc     00 1E 06 F6 | 	mov	local01, #0
0fac0     A7 20 02 FB | 	rdlong	local02, fp
0fac4     0C 4E 05 F1 | 	add	fp, #12
0fac8     A7 12 02 FB | 	rdlong	arg01, fp
0facc     0C 4E 85 F1 | 	sub	fp, #12
0fad0     4C C0 B0 FD | 	call	#__system___float_fromuns
0fad4     FD 14 02 F6 | 	mov	arg02, result1
0fad8     10 13 02 F6 | 	mov	arg01, local02
0fadc     01 16 66 F6 | 	neg	arg03, #1
0fae0     74 C8 B0 FD | 	call	#__system___float_cmp
0fae4     01 FA 55 F2 | 	cmps	result1, #1 wc
0fae8     00 1E 26 36 |  if_ae	not	local01, #0
0faec     A7 1E 62 FC | 	wrlong	local01, fp
0faf0     F8 02 90 FD | 	jmp	#LR__1223
0faf4                 | LR__1213
0faf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0faf4     08 4E 05 F1 | 	add	fp, #8
0faf8     A7 1E 02 FB | 	rdlong	local01, fp
0fafc     08 4E 85 F1 | 	sub	fp, #8
0fb00     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb04     14 4E 05 A1 |  if_e	add	fp, #20
0fb08     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb0c     14 4E 85 A1 |  if_e	sub	fp, #20
0fb10     12 23 02 A6 |  if_e	mov	local03, local04
0fb14     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb18     44 00 90 5D |  if_ne	jmp	#LR__1214
0fb1c     00 1E 06 F6 | 	mov	local01, #0
0fb20     A7 12 02 FB | 	rdlong	arg01, fp
0fb24     09 13 52 F6 | 	abs	arg01, arg01 wc
0fb28     1F 26 C6 C9 |  if_b	decod	local05, #31
0fb2c     00 26 06 36 |  if_ae	mov	local05, #0
0fb30     EC BF B0 FD | 	call	#__system___float_fromuns
0fb34     13 FB 61 F5 | 	xor	result1, local05
0fb38     FD 12 02 F6 | 	mov	arg01, result1
0fb3c     0C 4E 05 F1 | 	add	fp, #12
0fb40     A7 14 02 FB | 	rdlong	arg02, fp
0fb44     0C 4E 85 F1 | 	sub	fp, #12
0fb48     01 16 66 F6 | 	neg	arg03, #1
0fb4c     08 C8 B0 FD | 	call	#__system___float_cmp
0fb50     01 FA 55 F2 | 	cmps	result1, #1 wc
0fb54     00 1E 26 36 |  if_ae	not	local01, #0
0fb58     A7 1E 62 FC | 	wrlong	local01, fp
0fb5c     8C 02 90 FD | 	jmp	#LR__1223
0fb60                 | LR__1214
0fb60                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0fb60     08 4E 05 F1 | 	add	fp, #8
0fb64     A7 1E 02 FB | 	rdlong	local01, fp
0fb68     08 4E 85 F1 | 	sub	fp, #8
0fb6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb70     14 4E 05 A1 |  if_e	add	fp, #20
0fb74     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb78     14 4E 85 A1 |  if_e	sub	fp, #20
0fb7c     12 23 02 A6 |  if_e	mov	local03, local04
0fb80     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fb84     24 00 90 5D |  if_ne	jmp	#LR__1215
0fb88     00 1E 06 F6 | 	mov	local01, #0
0fb8c     A7 20 02 FB | 	rdlong	local02, fp
0fb90     0C 4E 05 F1 | 	add	fp, #12
0fb94     A7 22 02 FB | 	rdlong	local03, fp
0fb98     0C 4E 85 F1 | 	sub	fp, #12
0fb9c     11 21 5A F2 | 	cmps	local02, local03 wcz
0fba0     01 1E 66 16 |  if_a	neg	local01, #1
0fba4     A7 1E 62 FC | 	wrlong	local01, fp
0fba8     40 02 90 FD | 	jmp	#LR__1223
0fbac                 | LR__1215
0fbac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0fbac     08 4E 05 F1 | 	add	fp, #8
0fbb0     A7 1E 02 FB | 	rdlong	local01, fp
0fbb4     08 4E 85 F1 | 	sub	fp, #8
0fbb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbbc     14 4E 05 A1 |  if_e	add	fp, #20
0fbc0     A7 24 02 AB |  if_e	rdlong	local04, fp
0fbc4     14 4E 85 A1 |  if_e	sub	fp, #20
0fbc8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fbcc     24 00 90 5D |  if_ne	jmp	#LR__1216
0fbd0     00 1E 06 F6 | 	mov	local01, #0
0fbd4     A7 20 02 FB | 	rdlong	local02, fp
0fbd8     0C 4E 05 F1 | 	add	fp, #12
0fbdc     A7 22 02 FB | 	rdlong	local03, fp
0fbe0     0C 4E 85 F1 | 	sub	fp, #12
0fbe4     11 21 5A F2 | 	cmps	local02, local03 wcz
0fbe8     01 1E 66 16 |  if_a	neg	local01, #1
0fbec     A7 1E 62 FC | 	wrlong	local01, fp
0fbf0     F8 01 90 FD | 	jmp	#LR__1223
0fbf4                 | LR__1216
0fbf4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0fbf4     08 4E 05 F1 | 	add	fp, #8
0fbf8     A7 1E 02 FB | 	rdlong	local01, fp
0fbfc     08 4E 85 F1 | 	sub	fp, #8
0fc00     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc04     14 4E 05 A1 |  if_e	add	fp, #20
0fc08     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc0c     14 4E 85 A1 |  if_e	sub	fp, #20
0fc10     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fc14     34 00 90 5D |  if_ne	jmp	#LR__1217
0fc18     00 1E 06 F6 | 	mov	local01, #0
0fc1c     A7 12 02 FB | 	rdlong	arg01, fp
0fc20     FC BE B0 FD | 	call	#__system___float_fromuns
0fc24     FD 12 02 F6 | 	mov	arg01, result1
0fc28     0C 4E 05 F1 | 	add	fp, #12
0fc2c     A7 14 02 FB | 	rdlong	arg02, fp
0fc30     0C 4E 85 F1 | 	sub	fp, #12
0fc34     01 16 66 F6 | 	neg	arg03, #1
0fc38     1C C7 B0 FD | 	call	#__system___float_cmp
0fc3c     01 FA 55 F2 | 	cmps	result1, #1 wc
0fc40     00 1E 26 36 |  if_ae	not	local01, #0
0fc44     A7 1E 62 FC | 	wrlong	local01, fp
0fc48     A0 01 90 FD | 	jmp	#LR__1223
0fc4c                 | LR__1217
0fc4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0fc4c     08 4E 05 F1 | 	add	fp, #8
0fc50     A7 1E 02 FB | 	rdlong	local01, fp
0fc54     08 4E 85 F1 | 	sub	fp, #8
0fc58     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc5c     14 4E 05 A1 |  if_e	add	fp, #20
0fc60     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc64     14 4E 85 A1 |  if_e	sub	fp, #20
0fc68     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fc6c     24 00 90 5D |  if_ne	jmp	#LR__1218
0fc70     00 1E 06 F6 | 	mov	local01, #0
0fc74     A7 20 02 FB | 	rdlong	local02, fp
0fc78     0C 4E 05 F1 | 	add	fp, #12
0fc7c     A7 22 02 FB | 	rdlong	local03, fp
0fc80     0C 4E 85 F1 | 	sub	fp, #12
0fc84     11 21 5A F2 | 	cmps	local02, local03 wcz
0fc88     01 1E 66 16 |  if_a	neg	local01, #1
0fc8c     A7 1E 62 FC | 	wrlong	local01, fp
0fc90     58 01 90 FD | 	jmp	#LR__1223
0fc94                 | LR__1218
0fc94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0fc94     08 4E 05 F1 | 	add	fp, #8
0fc98     A7 1E 02 FB | 	rdlong	local01, fp
0fc9c     08 4E 85 F1 | 	sub	fp, #8
0fca0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fca4     14 4E 05 A1 |  if_e	add	fp, #20
0fca8     A7 22 02 AB |  if_e	rdlong	local03, fp
0fcac     14 4E 85 A1 |  if_e	sub	fp, #20
0fcb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fcb4     24 00 90 5D |  if_ne	jmp	#LR__1219
0fcb8     00 1E 06 F6 | 	mov	local01, #0
0fcbc     A7 20 02 FB | 	rdlong	local02, fp
0fcc0     0C 4E 05 F1 | 	add	fp, #12
0fcc4     A7 22 02 FB | 	rdlong	local03, fp
0fcc8     0C 4E 85 F1 | 	sub	fp, #12
0fccc     11 21 1A F2 | 	cmp	local02, local03 wcz
0fcd0     01 1E 66 16 |  if_a	neg	local01, #1
0fcd4     A7 1E 62 FC | 	wrlong	local01, fp
0fcd8     10 01 90 FD | 	jmp	#LR__1223
0fcdc                 | LR__1219
0fcdc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0fcdc     08 4E 05 F1 | 	add	fp, #8
0fce0     A7 1E 02 FB | 	rdlong	local01, fp
0fce4     08 4E 85 F1 | 	sub	fp, #8
0fce8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fcec     14 4E 05 A1 |  if_e	add	fp, #20
0fcf0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fcf4     14 4E 85 A1 |  if_e	sub	fp, #20
0fcf8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fcfc     30 00 90 5D |  if_ne	jmp	#LR__1220
0fd00     00 1E 06 F6 | 	mov	local01, #0
0fd04     A7 12 02 FB | 	rdlong	arg01, fp
0fd08     A8 D1 BF FD | 	call	#_convertstring
0fd0c     FD 12 02 F6 | 	mov	arg01, result1
0fd10     0C 4E 05 F1 | 	add	fp, #12
0fd14     A7 14 02 FB | 	rdlong	arg02, fp
0fd18     0C 4E 85 F1 | 	sub	fp, #12
0fd1c     40 97 B0 FD | 	call	#__system___string_cmp
0fd20     01 FA 55 F2 | 	cmps	result1, #1 wc
0fd24     00 1E 26 36 |  if_ae	not	local01, #0
0fd28     A7 1E 62 FC | 	wrlong	local01, fp
0fd2c     BC 00 90 FD | 	jmp	#LR__1223
0fd30                 | LR__1220
0fd30                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0fd30     08 4E 05 F1 | 	add	fp, #8
0fd34     A7 1E 02 FB | 	rdlong	local01, fp
0fd38     08 4E 85 F1 | 	sub	fp, #8
0fd3c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fd40     14 4E 05 A1 |  if_e	add	fp, #20
0fd44     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd48     14 4E 85 A1 |  if_e	sub	fp, #20
0fd4c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fd50     34 00 90 5D |  if_ne	jmp	#LR__1221
0fd54     00 1E 06 F6 | 	mov	local01, #0
0fd58     A7 20 02 FB | 	rdlong	local02, fp
0fd5c     0C 4E 05 F1 | 	add	fp, #12
0fd60     A7 12 02 FB | 	rdlong	arg01, fp
0fd64     0C 4E 85 F1 | 	sub	fp, #12
0fd68     48 D1 BF FD | 	call	#_convertstring
0fd6c     FD 14 02 F6 | 	mov	arg02, result1
0fd70     10 13 02 F6 | 	mov	arg01, local02
0fd74     E8 96 B0 FD | 	call	#__system___string_cmp
0fd78     01 FA 55 F2 | 	cmps	result1, #1 wc
0fd7c     00 1E 26 36 |  if_ae	not	local01, #0
0fd80     A7 1E 62 FC | 	wrlong	local01, fp
0fd84     64 00 90 FD | 	jmp	#LR__1223
0fd88                 | LR__1221
0fd88                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0fd88     08 4E 05 F1 | 	add	fp, #8
0fd8c     A7 1E 02 FB | 	rdlong	local01, fp
0fd90     08 4E 85 F1 | 	sub	fp, #8
0fd94     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fd98     14 4E 05 A1 |  if_e	add	fp, #20
0fd9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fda0     14 4E 85 A1 |  if_e	sub	fp, #20
0fda4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fda8     3C 00 90 5D |  if_ne	jmp	#LR__1222
0fdac     00 1E 06 F6 | 	mov	local01, #0
0fdb0     A7 12 02 FB | 	rdlong	arg01, fp
0fdb4     FC D0 BF FD | 	call	#_convertstring
0fdb8     FD 20 02 F6 | 	mov	local02, result1
0fdbc     0C 4E 05 F1 | 	add	fp, #12
0fdc0     A7 12 02 FB | 	rdlong	arg01, fp
0fdc4     0C 4E 85 F1 | 	sub	fp, #12
0fdc8     E8 D0 BF FD | 	call	#_convertstring
0fdcc     FD 14 02 F6 | 	mov	arg02, result1
0fdd0     10 13 02 F6 | 	mov	arg01, local02
0fdd4     88 96 B0 FD | 	call	#__system___string_cmp
0fdd8     01 FA 55 F2 | 	cmps	result1, #1 wc
0fddc     00 1E 26 36 |  if_ae	not	local01, #0
0fde0     A7 1E 62 FC | 	wrlong	local01, fp
0fde4     04 00 90 FD | 	jmp	#LR__1223
0fde8                 | LR__1222
0fde8     A7 00 68 FC | 	wrlong	#0, fp
0fdec                 | LR__1223
0fdec     08 4E 05 F1 | 	add	fp, #8
0fdf0     A7 38 68 FC | 	wrlong	#28, fp
0fdf4     08 4E 85 F1 | 	sub	fp, #8
0fdf8     A7 12 02 F6 | 	mov	arg01, fp
0fdfc     D0 9B BF FD | 	call	#_push
0fe00     A7 F0 03 F6 | 	mov	ptra, fp
0fe04     B2 00 A0 FD | 	call	#popregs_
0fe08                 | _do_gt_ret
0fe08     2D 00 64 FD | 	ret
0fe0c                 | 
0fe0c                 | ' 
0fe0c                 | ' sub do_lt
0fe0c                 | _do_lt
0fe0c     05 4A 05 F6 | 	mov	COUNT_, #5
0fe10     A8 00 A0 FD | 	call	#pushregs_
0fe14     18 F0 07 F1 | 	add	ptra, #24
0fe18     1C 9B BF FD | 	call	#_pop
0fe1c     FD 1E 02 F6 | 	mov	local01, result1
0fe20     FE 20 02 F6 | 	mov	local02, result2
0fe24     FF 22 02 F6 | 	mov	local03, result3
0fe28     0C 4E 05 F1 | 	add	fp, #12
0fe2c     A7 1E 62 FC | 	wrlong	local01, fp
0fe30     04 4E 05 F1 | 	add	fp, #4
0fe34     A7 20 62 FC | 	wrlong	local02, fp
0fe38     04 4E 05 F1 | 	add	fp, #4
0fe3c     A7 22 62 FC | 	wrlong	local03, fp
0fe40     14 4E 85 F1 | 	sub	fp, #20
0fe44     F0 9A BF FD | 	call	#_pop
0fe48     FF 22 02 F6 | 	mov	local03, result3
0fe4c     A7 FA 61 FC | 	wrlong	result1, fp
0fe50     04 4E 05 F1 | 	add	fp, #4
0fe54     A7 FC 61 FC | 	wrlong	result2, fp
0fe58     04 4E 05 F1 | 	add	fp, #4
0fe5c     A7 22 62 FC | 	wrlong	local03, fp
0fe60                 | ' t2=pop()
0fe60                 | ' t1=pop()
0fe60                 | ' 
0fe60                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0fe60     08 4E 85 F1 | 	sub	fp, #8
0fe64     1F 22 0E F2 | 	cmp	local03, #31 wz
0fe68     14 4E 05 A1 |  if_e	add	fp, #20
0fe6c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe70     14 4E 85 A1 |  if_e	sub	fp, #20
0fe74     12 23 02 A6 |  if_e	mov	local03, local04
0fe78     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fe7c     28 00 90 5D |  if_ne	jmp	#LR__1230
0fe80     00 1E 06 F6 | 	mov	local01, #0
0fe84     A7 12 02 FB | 	rdlong	arg01, fp
0fe88     0C 4E 05 F1 | 	add	fp, #12
0fe8c     A7 14 02 FB | 	rdlong	arg02, fp
0fe90     0C 4E 85 F1 | 	sub	fp, #12
0fe94     C8 95 B0 FD | 	call	#__system___string_cmp
0fe98     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe9c     00 1E 26 C6 |  if_b	not	local01, #0
0fea0     A7 1E 62 FC | 	wrlong	local01, fp
0fea4     0C 04 90 FD | 	jmp	#LR__1243
0fea8                 | LR__1230
0fea8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0fea8     08 4E 05 F1 | 	add	fp, #8
0feac     A7 1E 02 FB | 	rdlong	local01, fp
0feb0     08 4E 85 F1 | 	sub	fp, #8
0feb4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0feb8     14 4E 05 A1 |  if_e	add	fp, #20
0febc     A7 24 02 AB |  if_e	rdlong	local04, fp
0fec0     14 4E 85 A1 |  if_e	sub	fp, #20
0fec4     12 23 02 A6 |  if_e	mov	local03, local04
0fec8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fecc     2C 00 90 5D |  if_ne	jmp	#LR__1231
0fed0     00 1E 06 F6 | 	mov	local01, #0
0fed4     A7 12 02 FB | 	rdlong	arg01, fp
0fed8     0C 4E 05 F1 | 	add	fp, #12
0fedc     A7 14 02 FB | 	rdlong	arg02, fp
0fee0     0C 4E 85 F1 | 	sub	fp, #12
0fee4     01 16 06 F6 | 	mov	arg03, #1
0fee8     6C C4 B0 FD | 	call	#__system___float_cmp
0feec     00 FA 55 F2 | 	cmps	result1, #0 wc
0fef0     00 1E 26 C6 |  if_b	not	local01, #0
0fef4     A7 1E 62 FC | 	wrlong	local01, fp
0fef8     B8 03 90 FD | 	jmp	#LR__1243
0fefc                 | LR__1231
0fefc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0fefc     08 4E 05 F1 | 	add	fp, #8
0ff00     A7 1E 02 FB | 	rdlong	local01, fp
0ff04     08 4E 85 F1 | 	sub	fp, #8
0ff08     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff0c     14 4E 05 A1 |  if_e	add	fp, #20
0ff10     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff14     14 4E 85 A1 |  if_e	sub	fp, #20
0ff18     12 23 02 A6 |  if_e	mov	local03, local04
0ff1c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff20     48 00 90 5D |  if_ne	jmp	#LR__1232
0ff24     00 1E 06 F6 | 	mov	local01, #0
0ff28     A7 20 02 FB | 	rdlong	local02, fp
0ff2c     0C 4E 05 F1 | 	add	fp, #12
0ff30     A7 12 02 FB | 	rdlong	arg01, fp
0ff34     0C 4E 85 F1 | 	sub	fp, #12
0ff38     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff3c     1F 26 C6 C9 |  if_b	decod	local05, #31
0ff40     00 26 06 36 |  if_ae	mov	local05, #0
0ff44     D8 BB B0 FD | 	call	#__system___float_fromuns
0ff48     13 FB 61 F5 | 	xor	result1, local05
0ff4c     FD 14 02 F6 | 	mov	arg02, result1
0ff50     10 13 02 F6 | 	mov	arg01, local02
0ff54     01 16 06 F6 | 	mov	arg03, #1
0ff58     FC C3 B0 FD | 	call	#__system___float_cmp
0ff5c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff60     00 1E 26 C6 |  if_b	not	local01, #0
0ff64     A7 1E 62 FC | 	wrlong	local01, fp
0ff68     48 03 90 FD | 	jmp	#LR__1243
0ff6c                 | LR__1232
0ff6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0ff6c     08 4E 05 F1 | 	add	fp, #8
0ff70     A7 1E 02 FB | 	rdlong	local01, fp
0ff74     08 4E 85 F1 | 	sub	fp, #8
0ff78     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff7c     14 4E 05 A1 |  if_e	add	fp, #20
0ff80     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff84     14 4E 85 A1 |  if_e	sub	fp, #20
0ff88     12 23 02 A6 |  if_e	mov	local03, local04
0ff8c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ff90     38 00 90 5D |  if_ne	jmp	#LR__1233
0ff94     00 1E 06 F6 | 	mov	local01, #0
0ff98     A7 20 02 FB | 	rdlong	local02, fp
0ff9c     0C 4E 05 F1 | 	add	fp, #12
0ffa0     A7 12 02 FB | 	rdlong	arg01, fp
0ffa4     0C 4E 85 F1 | 	sub	fp, #12
0ffa8     74 BB B0 FD | 	call	#__system___float_fromuns
0ffac     FD 14 02 F6 | 	mov	arg02, result1
0ffb0     10 13 02 F6 | 	mov	arg01, local02
0ffb4     01 16 06 F6 | 	mov	arg03, #1
0ffb8     9C C3 B0 FD | 	call	#__system___float_cmp
0ffbc     00 FA 55 F2 | 	cmps	result1, #0 wc
0ffc0     00 1E 26 C6 |  if_b	not	local01, #0
0ffc4     A7 1E 62 FC | 	wrlong	local01, fp
0ffc8     E8 02 90 FD | 	jmp	#LR__1243
0ffcc                 | LR__1233
0ffcc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0ffcc     08 4E 05 F1 | 	add	fp, #8
0ffd0     A7 1E 02 FB | 	rdlong	local01, fp
0ffd4     08 4E 85 F1 | 	sub	fp, #8
0ffd8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ffdc     14 4E 05 A1 |  if_e	add	fp, #20
0ffe0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffe4     14 4E 85 A1 |  if_e	sub	fp, #20
0ffe8     12 23 02 A6 |  if_e	mov	local03, local04
0ffec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fff0     44 00 90 5D |  if_ne	jmp	#LR__1234
0fff4     00 1E 06 F6 | 	mov	local01, #0
0fff8     A7 12 02 FB | 	rdlong	arg01, fp
0fffc     09 13 52 F6 | 	abs	arg01, arg01 wc
10000     1F 26 C6 C9 |  if_b	decod	local05, #31
10004     00 26 06 36 |  if_ae	mov	local05, #0
10008     14 BB B0 FD | 	call	#__system___float_fromuns
1000c     13 FB 61 F5 | 	xor	result1, local05
10010     FD 12 02 F6 | 	mov	arg01, result1
10014     0C 4E 05 F1 | 	add	fp, #12
10018     A7 14 02 FB | 	rdlong	arg02, fp
1001c     0C 4E 85 F1 | 	sub	fp, #12
10020     01 16 06 F6 | 	mov	arg03, #1
10024     30 C3 B0 FD | 	call	#__system___float_cmp
10028     00 FA 55 F2 | 	cmps	result1, #0 wc
1002c     00 1E 26 C6 |  if_b	not	local01, #0
10030     A7 1E 62 FC | 	wrlong	local01, fp
10034     7C 02 90 FD | 	jmp	#LR__1243
10038                 | LR__1234
10038                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
10038     08 4E 05 F1 | 	add	fp, #8
1003c     A7 1E 02 FB | 	rdlong	local01, fp
10040     08 4E 85 F1 | 	sub	fp, #8
10044     1C 1E 0E F2 | 	cmp	local01, #28 wz
10048     14 4E 05 A1 |  if_e	add	fp, #20
1004c     A7 24 02 AB |  if_e	rdlong	local04, fp
10050     14 4E 85 A1 |  if_e	sub	fp, #20
10054     12 23 02 A6 |  if_e	mov	local03, local04
10058     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1005c     20 00 90 5D |  if_ne	jmp	#LR__1235
10060     A7 20 02 FB | 	rdlong	local02, fp
10064     0C 4E 05 F1 | 	add	fp, #12
10068     A7 22 02 FB | 	rdlong	local03, fp
1006c     0C 4E 85 F1 | 	sub	fp, #12
10070     11 21 52 F2 | 	cmps	local02, local03 wc
10074     0F 1F A2 F1 | 	subx	local01, local01
10078     A7 1E 62 FC | 	wrlong	local01, fp
1007c     34 02 90 FD | 	jmp	#LR__1243
10080                 | LR__1235
10080                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
10080     08 4E 05 F1 | 	add	fp, #8
10084     A7 1E 02 FB | 	rdlong	local01, fp
10088     08 4E 85 F1 | 	sub	fp, #8
1008c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10090     14 4E 05 A1 |  if_e	add	fp, #20
10094     A7 24 02 AB |  if_e	rdlong	local04, fp
10098     14 4E 85 A1 |  if_e	sub	fp, #20
1009c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
100a0     20 00 90 5D |  if_ne	jmp	#LR__1236
100a4     A7 20 02 FB | 	rdlong	local02, fp
100a8     0C 4E 05 F1 | 	add	fp, #12
100ac     A7 22 02 FB | 	rdlong	local03, fp
100b0     0C 4E 85 F1 | 	sub	fp, #12
100b4     11 21 52 F2 | 	cmps	local02, local03 wc
100b8     0F 1F A2 F1 | 	subx	local01, local01
100bc     A7 1E 62 FC | 	wrlong	local01, fp
100c0     F0 01 90 FD | 	jmp	#LR__1243
100c4                 | LR__1236
100c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
100c4     08 4E 05 F1 | 	add	fp, #8
100c8     A7 1E 02 FB | 	rdlong	local01, fp
100cc     08 4E 85 F1 | 	sub	fp, #8
100d0     1D 1E 0E F2 | 	cmp	local01, #29 wz
100d4     14 4E 05 A1 |  if_e	add	fp, #20
100d8     A7 22 02 AB |  if_e	rdlong	local03, fp
100dc     14 4E 85 A1 |  if_e	sub	fp, #20
100e0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
100e4     34 00 90 5D |  if_ne	jmp	#LR__1237
100e8     00 1E 06 F6 | 	mov	local01, #0
100ec     A7 12 02 FB | 	rdlong	arg01, fp
100f0     2C BA B0 FD | 	call	#__system___float_fromuns
100f4     FD 12 02 F6 | 	mov	arg01, result1
100f8     0C 4E 05 F1 | 	add	fp, #12
100fc     A7 14 02 FB | 	rdlong	arg02, fp
10100     0C 4E 85 F1 | 	sub	fp, #12
10104     01 16 06 F6 | 	mov	arg03, #1
10108     4C C2 B0 FD | 	call	#__system___float_cmp
1010c     00 FA 55 F2 | 	cmps	result1, #0 wc
10110     00 1E 26 C6 |  if_b	not	local01, #0
10114     A7 1E 62 FC | 	wrlong	local01, fp
10118     98 01 90 FD | 	jmp	#LR__1243
1011c                 | LR__1237
1011c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1011c     08 4E 05 F1 | 	add	fp, #8
10120     A7 1E 02 FB | 	rdlong	local01, fp
10124     08 4E 85 F1 | 	sub	fp, #8
10128     1D 1E 0E F2 | 	cmp	local01, #29 wz
1012c     14 4E 05 A1 |  if_e	add	fp, #20
10130     A7 22 02 AB |  if_e	rdlong	local03, fp
10134     14 4E 85 A1 |  if_e	sub	fp, #20
10138     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1013c     20 00 90 5D |  if_ne	jmp	#LR__1238
10140     A7 20 02 FB | 	rdlong	local02, fp
10144     0C 4E 05 F1 | 	add	fp, #12
10148     A7 22 02 FB | 	rdlong	local03, fp
1014c     0C 4E 85 F1 | 	sub	fp, #12
10150     11 21 52 F2 | 	cmps	local02, local03 wc
10154     0F 1F A2 F1 | 	subx	local01, local01
10158     A7 1E 62 FC | 	wrlong	local01, fp
1015c     54 01 90 FD | 	jmp	#LR__1243
10160                 | LR__1238
10160                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
10160     08 4E 05 F1 | 	add	fp, #8
10164     A7 1E 02 FB | 	rdlong	local01, fp
10168     08 4E 85 F1 | 	sub	fp, #8
1016c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10170     14 4E 05 A1 |  if_e	add	fp, #20
10174     A7 22 02 AB |  if_e	rdlong	local03, fp
10178     14 4E 85 A1 |  if_e	sub	fp, #20
1017c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10180     20 00 90 5D |  if_ne	jmp	#LR__1239
10184     A7 20 02 FB | 	rdlong	local02, fp
10188     0C 4E 05 F1 | 	add	fp, #12
1018c     A7 22 02 FB | 	rdlong	local03, fp
10190     0C 4E 85 F1 | 	sub	fp, #12
10194     11 21 12 F2 | 	cmp	local02, local03 wc
10198     0F 1F A2 F1 | 	subx	local01, local01
1019c     A7 1E 62 FC | 	wrlong	local01, fp
101a0     10 01 90 FD | 	jmp	#LR__1243
101a4                 | LR__1239
101a4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
101a4     08 4E 05 F1 | 	add	fp, #8
101a8     A7 1E 02 FB | 	rdlong	local01, fp
101ac     08 4E 85 F1 | 	sub	fp, #8
101b0     2B 1E 0E F2 | 	cmp	local01, #43 wz
101b4     14 4E 05 A1 |  if_e	add	fp, #20
101b8     A7 22 02 AB |  if_e	rdlong	local03, fp
101bc     14 4E 85 A1 |  if_e	sub	fp, #20
101c0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
101c4     30 00 90 5D |  if_ne	jmp	#LR__1240
101c8     00 1E 06 F6 | 	mov	local01, #0
101cc     A7 12 02 FB | 	rdlong	arg01, fp
101d0     E0 CC BF FD | 	call	#_convertstring
101d4     FD 12 02 F6 | 	mov	arg01, result1
101d8     0C 4E 05 F1 | 	add	fp, #12
101dc     A7 14 02 FB | 	rdlong	arg02, fp
101e0     0C 4E 85 F1 | 	sub	fp, #12
101e4     78 92 B0 FD | 	call	#__system___string_cmp
101e8     00 FA 55 F2 | 	cmps	result1, #0 wc
101ec     00 1E 26 C6 |  if_b	not	local01, #0
101f0     A7 1E 62 FC | 	wrlong	local01, fp
101f4     BC 00 90 FD | 	jmp	#LR__1243
101f8                 | LR__1240
101f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
101f8     08 4E 05 F1 | 	add	fp, #8
101fc     A7 1E 02 FB | 	rdlong	local01, fp
10200     08 4E 85 F1 | 	sub	fp, #8
10204     1F 1E 0E F2 | 	cmp	local01, #31 wz
10208     14 4E 05 A1 |  if_e	add	fp, #20
1020c     A7 22 02 AB |  if_e	rdlong	local03, fp
10210     14 4E 85 A1 |  if_e	sub	fp, #20
10214     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10218     34 00 90 5D |  if_ne	jmp	#LR__1241
1021c     00 1E 06 F6 | 	mov	local01, #0
10220     A7 20 02 FB | 	rdlong	local02, fp
10224     0C 4E 05 F1 | 	add	fp, #12
10228     A7 12 02 FB | 	rdlong	arg01, fp
1022c     0C 4E 85 F1 | 	sub	fp, #12
10230     80 CC BF FD | 	call	#_convertstring
10234     FD 14 02 F6 | 	mov	arg02, result1
10238     10 13 02 F6 | 	mov	arg01, local02
1023c     20 92 B0 FD | 	call	#__system___string_cmp
10240     00 FA 55 F2 | 	cmps	result1, #0 wc
10244     00 1E 26 C6 |  if_b	not	local01, #0
10248     A7 1E 62 FC | 	wrlong	local01, fp
1024c     64 00 90 FD | 	jmp	#LR__1243
10250                 | LR__1241
10250                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
10250     08 4E 05 F1 | 	add	fp, #8
10254     A7 1E 02 FB | 	rdlong	local01, fp
10258     08 4E 85 F1 | 	sub	fp, #8
1025c     2B 1E 0E F2 | 	cmp	local01, #43 wz
10260     14 4E 05 A1 |  if_e	add	fp, #20
10264     A7 22 02 AB |  if_e	rdlong	local03, fp
10268     14 4E 85 A1 |  if_e	sub	fp, #20
1026c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10270     3C 00 90 5D |  if_ne	jmp	#LR__1242
10274     00 1E 06 F6 | 	mov	local01, #0
10278     A7 12 02 FB | 	rdlong	arg01, fp
1027c     34 CC BF FD | 	call	#_convertstring
10280     FD 20 02 F6 | 	mov	local02, result1
10284     0C 4E 05 F1 | 	add	fp, #12
10288     A7 12 02 FB | 	rdlong	arg01, fp
1028c     0C 4E 85 F1 | 	sub	fp, #12
10290     20 CC BF FD | 	call	#_convertstring
10294     FD 14 02 F6 | 	mov	arg02, result1
10298     10 13 02 F6 | 	mov	arg01, local02
1029c     C0 91 B0 FD | 	call	#__system___string_cmp
102a0     00 FA 55 F2 | 	cmps	result1, #0 wc
102a4     00 1E 26 C6 |  if_b	not	local01, #0
102a8     A7 1E 62 FC | 	wrlong	local01, fp
102ac     04 00 90 FD | 	jmp	#LR__1243
102b0                 | LR__1242
102b0     A7 00 68 FC | 	wrlong	#0, fp
102b4                 | LR__1243
102b4     08 4E 05 F1 | 	add	fp, #8
102b8     A7 38 68 FC | 	wrlong	#28, fp
102bc     08 4E 85 F1 | 	sub	fp, #8
102c0     A7 12 02 F6 | 	mov	arg01, fp
102c4     08 97 BF FD | 	call	#_push
102c8     A7 F0 03 F6 | 	mov	ptra, fp
102cc     B2 00 A0 FD | 	call	#popregs_
102d0                 | _do_lt_ret
102d0     2D 00 64 FD | 	ret
102d4                 | 
102d4                 | ' 
102d4                 | ' sub do_ge
102d4                 | _do_ge
102d4     05 4A 05 F6 | 	mov	COUNT_, #5
102d8     A8 00 A0 FD | 	call	#pushregs_
102dc     18 F0 07 F1 | 	add	ptra, #24
102e0     54 96 BF FD | 	call	#_pop
102e4     FD 1E 02 F6 | 	mov	local01, result1
102e8     FE 20 02 F6 | 	mov	local02, result2
102ec     FF 22 02 F6 | 	mov	local03, result3
102f0     0C 4E 05 F1 | 	add	fp, #12
102f4     A7 1E 62 FC | 	wrlong	local01, fp
102f8     04 4E 05 F1 | 	add	fp, #4
102fc     A7 20 62 FC | 	wrlong	local02, fp
10300     04 4E 05 F1 | 	add	fp, #4
10304     A7 22 62 FC | 	wrlong	local03, fp
10308     14 4E 85 F1 | 	sub	fp, #20
1030c     28 96 BF FD | 	call	#_pop
10310     FF 22 02 F6 | 	mov	local03, result3
10314     A7 FA 61 FC | 	wrlong	result1, fp
10318     04 4E 05 F1 | 	add	fp, #4
1031c     A7 FC 61 FC | 	wrlong	result2, fp
10320     04 4E 05 F1 | 	add	fp, #4
10324     A7 22 62 FC | 	wrlong	local03, fp
10328                 | ' t2=pop()
10328                 | ' t1=pop()
10328                 | ' 
10328                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
10328     08 4E 85 F1 | 	sub	fp, #8
1032c     1F 22 0E F2 | 	cmp	local03, #31 wz
10330     14 4E 05 A1 |  if_e	add	fp, #20
10334     A7 24 02 AB |  if_e	rdlong	local04, fp
10338     14 4E 85 A1 |  if_e	sub	fp, #20
1033c     12 23 02 A6 |  if_e	mov	local03, local04
10340     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10344     28 00 90 5D |  if_ne	jmp	#LR__1250
10348     00 1E 06 F6 | 	mov	local01, #0
1034c     A7 12 02 FB | 	rdlong	arg01, fp
10350     0C 4E 05 F1 | 	add	fp, #12
10354     A7 14 02 FB | 	rdlong	arg02, fp
10358     0C 4E 85 F1 | 	sub	fp, #12
1035c     00 91 B0 FD | 	call	#__system___string_cmp
10360     00 FA 55 F2 | 	cmps	result1, #0 wc
10364     00 1E 26 36 |  if_ae	not	local01, #0
10368     A7 1E 62 FC | 	wrlong	local01, fp
1036c     1C 04 90 FD | 	jmp	#LR__1263
10370                 | LR__1250
10370                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
10370     08 4E 05 F1 | 	add	fp, #8
10374     A7 1E 02 FB | 	rdlong	local01, fp
10378     08 4E 85 F1 | 	sub	fp, #8
1037c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10380     14 4E 05 A1 |  if_e	add	fp, #20
10384     A7 24 02 AB |  if_e	rdlong	local04, fp
10388     14 4E 85 A1 |  if_e	sub	fp, #20
1038c     12 23 02 A6 |  if_e	mov	local03, local04
10390     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10394     2C 00 90 5D |  if_ne	jmp	#LR__1251
10398     00 1E 06 F6 | 	mov	local01, #0
1039c     A7 12 02 FB | 	rdlong	arg01, fp
103a0     0C 4E 05 F1 | 	add	fp, #12
103a4     A7 14 02 FB | 	rdlong	arg02, fp
103a8     0C 4E 85 F1 | 	sub	fp, #12
103ac     01 16 66 F6 | 	neg	arg03, #1
103b0     A4 BF B0 FD | 	call	#__system___float_cmp
103b4     00 FA 55 F2 | 	cmps	result1, #0 wc
103b8     00 1E 26 36 |  if_ae	not	local01, #0
103bc     A7 1E 62 FC | 	wrlong	local01, fp
103c0     C8 03 90 FD | 	jmp	#LR__1263
103c4                 | LR__1251
103c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
103c4     08 4E 05 F1 | 	add	fp, #8
103c8     A7 1E 02 FB | 	rdlong	local01, fp
103cc     08 4E 85 F1 | 	sub	fp, #8
103d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
103d4     14 4E 05 A1 |  if_e	add	fp, #20
103d8     A7 24 02 AB |  if_e	rdlong	local04, fp
103dc     14 4E 85 A1 |  if_e	sub	fp, #20
103e0     12 23 02 A6 |  if_e	mov	local03, local04
103e4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
103e8     48 00 90 5D |  if_ne	jmp	#LR__1252
103ec     00 1E 06 F6 | 	mov	local01, #0
103f0     A7 20 02 FB | 	rdlong	local02, fp
103f4     0C 4E 05 F1 | 	add	fp, #12
103f8     A7 12 02 FB | 	rdlong	arg01, fp
103fc     0C 4E 85 F1 | 	sub	fp, #12
10400     09 13 52 F6 | 	abs	arg01, arg01 wc
10404     1F 26 C6 C9 |  if_b	decod	local05, #31
10408     00 26 06 36 |  if_ae	mov	local05, #0
1040c     10 B7 B0 FD | 	call	#__system___float_fromuns
10410     13 FB 61 F5 | 	xor	result1, local05
10414     FD 14 02 F6 | 	mov	arg02, result1
10418     10 13 02 F6 | 	mov	arg01, local02
1041c     01 16 66 F6 | 	neg	arg03, #1
10420     34 BF B0 FD | 	call	#__system___float_cmp
10424     00 FA 55 F2 | 	cmps	result1, #0 wc
10428     00 1E 26 36 |  if_ae	not	local01, #0
1042c     A7 1E 62 FC | 	wrlong	local01, fp
10430     58 03 90 FD | 	jmp	#LR__1263
10434                 | LR__1252
10434                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
10434     08 4E 05 F1 | 	add	fp, #8
10438     A7 1E 02 FB | 	rdlong	local01, fp
1043c     08 4E 85 F1 | 	sub	fp, #8
10440     1E 1E 0E F2 | 	cmp	local01, #30 wz
10444     14 4E 05 A1 |  if_e	add	fp, #20
10448     A7 24 02 AB |  if_e	rdlong	local04, fp
1044c     14 4E 85 A1 |  if_e	sub	fp, #20
10450     12 23 02 A6 |  if_e	mov	local03, local04
10454     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10458     38 00 90 5D |  if_ne	jmp	#LR__1253
1045c     00 1E 06 F6 | 	mov	local01, #0
10460     A7 20 02 FB | 	rdlong	local02, fp
10464     0C 4E 05 F1 | 	add	fp, #12
10468     A7 12 02 FB | 	rdlong	arg01, fp
1046c     0C 4E 85 F1 | 	sub	fp, #12
10470     AC B6 B0 FD | 	call	#__system___float_fromuns
10474     FD 14 02 F6 | 	mov	arg02, result1
10478     10 13 02 F6 | 	mov	arg01, local02
1047c     01 16 66 F6 | 	neg	arg03, #1
10480     D4 BE B0 FD | 	call	#__system___float_cmp
10484     00 FA 55 F2 | 	cmps	result1, #0 wc
10488     00 1E 26 36 |  if_ae	not	local01, #0
1048c     A7 1E 62 FC | 	wrlong	local01, fp
10490     F8 02 90 FD | 	jmp	#LR__1263
10494                 | LR__1253
10494                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
10494     08 4E 05 F1 | 	add	fp, #8
10498     A7 1E 02 FB | 	rdlong	local01, fp
1049c     08 4E 85 F1 | 	sub	fp, #8
104a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
104a4     14 4E 05 A1 |  if_e	add	fp, #20
104a8     A7 24 02 AB |  if_e	rdlong	local04, fp
104ac     14 4E 85 A1 |  if_e	sub	fp, #20
104b0     12 23 02 A6 |  if_e	mov	local03, local04
104b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
104b8     44 00 90 5D |  if_ne	jmp	#LR__1254
104bc     00 1E 06 F6 | 	mov	local01, #0
104c0     A7 12 02 FB | 	rdlong	arg01, fp
104c4     09 13 52 F6 | 	abs	arg01, arg01 wc
104c8     1F 26 C6 C9 |  if_b	decod	local05, #31
104cc     00 26 06 36 |  if_ae	mov	local05, #0
104d0     4C B6 B0 FD | 	call	#__system___float_fromuns
104d4     13 FB 61 F5 | 	xor	result1, local05
104d8     FD 12 02 F6 | 	mov	arg01, result1
104dc     0C 4E 05 F1 | 	add	fp, #12
104e0     A7 14 02 FB | 	rdlong	arg02, fp
104e4     0C 4E 85 F1 | 	sub	fp, #12
104e8     01 16 66 F6 | 	neg	arg03, #1
104ec     68 BE B0 FD | 	call	#__system___float_cmp
104f0     00 FA 55 F2 | 	cmps	result1, #0 wc
104f4     00 1E 26 36 |  if_ae	not	local01, #0
104f8     A7 1E 62 FC | 	wrlong	local01, fp
104fc     8C 02 90 FD | 	jmp	#LR__1263
10500                 | LR__1254
10500                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
10500     08 4E 05 F1 | 	add	fp, #8
10504     A7 1E 02 FB | 	rdlong	local01, fp
10508     08 4E 85 F1 | 	sub	fp, #8
1050c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10510     14 4E 05 A1 |  if_e	add	fp, #20
10514     A7 24 02 AB |  if_e	rdlong	local04, fp
10518     14 4E 85 A1 |  if_e	sub	fp, #20
1051c     12 23 02 A6 |  if_e	mov	local03, local04
10520     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10524     24 00 90 5D |  if_ne	jmp	#LR__1255
10528     00 1E 06 F6 | 	mov	local01, #0
1052c     A7 20 02 FB | 	rdlong	local02, fp
10530     0C 4E 05 F1 | 	add	fp, #12
10534     A7 22 02 FB | 	rdlong	local03, fp
10538     0C 4E 85 F1 | 	sub	fp, #12
1053c     11 21 52 F2 | 	cmps	local02, local03 wc
10540     01 1E 66 36 |  if_ae	neg	local01, #1
10544     A7 1E 62 FC | 	wrlong	local01, fp
10548     40 02 90 FD | 	jmp	#LR__1263
1054c                 | LR__1255
1054c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1054c     08 4E 05 F1 | 	add	fp, #8
10550     A7 1E 02 FB | 	rdlong	local01, fp
10554     08 4E 85 F1 | 	sub	fp, #8
10558     1C 1E 0E F2 | 	cmp	local01, #28 wz
1055c     14 4E 05 A1 |  if_e	add	fp, #20
10560     A7 24 02 AB |  if_e	rdlong	local04, fp
10564     14 4E 85 A1 |  if_e	sub	fp, #20
10568     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1056c     24 00 90 5D |  if_ne	jmp	#LR__1256
10570     00 1E 06 F6 | 	mov	local01, #0
10574     A7 20 02 FB | 	rdlong	local02, fp
10578     0C 4E 05 F1 | 	add	fp, #12
1057c     A7 22 02 FB | 	rdlong	local03, fp
10580     0C 4E 85 F1 | 	sub	fp, #12
10584     11 21 52 F2 | 	cmps	local02, local03 wc
10588     01 1E 66 36 |  if_ae	neg	local01, #1
1058c     A7 1E 62 FC | 	wrlong	local01, fp
10590     F8 01 90 FD | 	jmp	#LR__1263
10594                 | LR__1256
10594                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
10594     08 4E 05 F1 | 	add	fp, #8
10598     A7 1E 02 FB | 	rdlong	local01, fp
1059c     08 4E 85 F1 | 	sub	fp, #8
105a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
105a4     14 4E 05 A1 |  if_e	add	fp, #20
105a8     A7 22 02 AB |  if_e	rdlong	local03, fp
105ac     14 4E 85 A1 |  if_e	sub	fp, #20
105b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
105b4     34 00 90 5D |  if_ne	jmp	#LR__1257
105b8     00 1E 06 F6 | 	mov	local01, #0
105bc     A7 12 02 FB | 	rdlong	arg01, fp
105c0     5C B5 B0 FD | 	call	#__system___float_fromuns
105c4     FD 12 02 F6 | 	mov	arg01, result1
105c8     0C 4E 05 F1 | 	add	fp, #12
105cc     A7 14 02 FB | 	rdlong	arg02, fp
105d0     0C 4E 85 F1 | 	sub	fp, #12
105d4     01 16 66 F6 | 	neg	arg03, #1
105d8     7C BD B0 FD | 	call	#__system___float_cmp
105dc     00 FA 55 F2 | 	cmps	result1, #0 wc
105e0     00 1E 26 36 |  if_ae	not	local01, #0
105e4     A7 1E 62 FC | 	wrlong	local01, fp
105e8     A0 01 90 FD | 	jmp	#LR__1263
105ec                 | LR__1257
105ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
105ec     08 4E 05 F1 | 	add	fp, #8
105f0     A7 1E 02 FB | 	rdlong	local01, fp
105f4     08 4E 85 F1 | 	sub	fp, #8
105f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
105fc     14 4E 05 A1 |  if_e	add	fp, #20
10600     A7 22 02 AB |  if_e	rdlong	local03, fp
10604     14 4E 85 A1 |  if_e	sub	fp, #20
10608     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1060c     24 00 90 5D |  if_ne	jmp	#LR__1258
10610     00 1E 06 F6 | 	mov	local01, #0
10614     A7 20 02 FB | 	rdlong	local02, fp
10618     0C 4E 05 F1 | 	add	fp, #12
1061c     A7 22 02 FB | 	rdlong	local03, fp
10620     0C 4E 85 F1 | 	sub	fp, #12
10624     11 21 52 F2 | 	cmps	local02, local03 wc
10628     01 1E 66 36 |  if_ae	neg	local01, #1
1062c     A7 1E 62 FC | 	wrlong	local01, fp
10630     58 01 90 FD | 	jmp	#LR__1263
10634                 | LR__1258
10634                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
10634     08 4E 05 F1 | 	add	fp, #8
10638     A7 1E 02 FB | 	rdlong	local01, fp
1063c     08 4E 85 F1 | 	sub	fp, #8
10640     1D 1E 0E F2 | 	cmp	local01, #29 wz
10644     14 4E 05 A1 |  if_e	add	fp, #20
10648     A7 22 02 AB |  if_e	rdlong	local03, fp
1064c     14 4E 85 A1 |  if_e	sub	fp, #20
10650     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10654     24 00 90 5D |  if_ne	jmp	#LR__1259
10658     00 1E 06 F6 | 	mov	local01, #0
1065c     A7 20 02 FB | 	rdlong	local02, fp
10660     0C 4E 05 F1 | 	add	fp, #12
10664     A7 22 02 FB | 	rdlong	local03, fp
10668     0C 4E 85 F1 | 	sub	fp, #12
1066c     11 21 12 F2 | 	cmp	local02, local03 wc
10670     01 1E 66 36 |  if_ae	neg	local01, #1
10674     A7 1E 62 FC | 	wrlong	local01, fp
10678     10 01 90 FD | 	jmp	#LR__1263
1067c                 | LR__1259
1067c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1067c     08 4E 05 F1 | 	add	fp, #8
10680     A7 1E 02 FB | 	rdlong	local01, fp
10684     08 4E 85 F1 | 	sub	fp, #8
10688     2B 1E 0E F2 | 	cmp	local01, #43 wz
1068c     14 4E 05 A1 |  if_e	add	fp, #20
10690     A7 22 02 AB |  if_e	rdlong	local03, fp
10694     14 4E 85 A1 |  if_e	sub	fp, #20
10698     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1069c     30 00 90 5D |  if_ne	jmp	#LR__1260
106a0     00 1E 06 F6 | 	mov	local01, #0
106a4     A7 12 02 FB | 	rdlong	arg01, fp
106a8     08 C8 BF FD | 	call	#_convertstring
106ac     FD 12 02 F6 | 	mov	arg01, result1
106b0     0C 4E 05 F1 | 	add	fp, #12
106b4     A7 14 02 FB | 	rdlong	arg02, fp
106b8     0C 4E 85 F1 | 	sub	fp, #12
106bc     A0 8D B0 FD | 	call	#__system___string_cmp
106c0     00 FA 55 F2 | 	cmps	result1, #0 wc
106c4     00 1E 26 36 |  if_ae	not	local01, #0
106c8     A7 1E 62 FC | 	wrlong	local01, fp
106cc     BC 00 90 FD | 	jmp	#LR__1263
106d0                 | LR__1260
106d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
106d0     08 4E 05 F1 | 	add	fp, #8
106d4     A7 1E 02 FB | 	rdlong	local01, fp
106d8     08 4E 85 F1 | 	sub	fp, #8
106dc     1F 1E 0E F2 | 	cmp	local01, #31 wz
106e0     14 4E 05 A1 |  if_e	add	fp, #20
106e4     A7 22 02 AB |  if_e	rdlong	local03, fp
106e8     14 4E 85 A1 |  if_e	sub	fp, #20
106ec     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
106f0     34 00 90 5D |  if_ne	jmp	#LR__1261
106f4     00 1E 06 F6 | 	mov	local01, #0
106f8     A7 20 02 FB | 	rdlong	local02, fp
106fc     0C 4E 05 F1 | 	add	fp, #12
10700     A7 12 02 FB | 	rdlong	arg01, fp
10704     0C 4E 85 F1 | 	sub	fp, #12
10708     A8 C7 BF FD | 	call	#_convertstring
1070c     FD 14 02 F6 | 	mov	arg02, result1
10710     10 13 02 F6 | 	mov	arg01, local02
10714     48 8D B0 FD | 	call	#__system___string_cmp
10718     00 FA 55 F2 | 	cmps	result1, #0 wc
1071c     00 1E 26 36 |  if_ae	not	local01, #0
10720     A7 1E 62 FC | 	wrlong	local01, fp
10724     64 00 90 FD | 	jmp	#LR__1263
10728                 | LR__1261
10728                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
10728     08 4E 05 F1 | 	add	fp, #8
1072c     A7 1E 02 FB | 	rdlong	local01, fp
10730     08 4E 85 F1 | 	sub	fp, #8
10734     2B 1E 0E F2 | 	cmp	local01, #43 wz
10738     14 4E 05 A1 |  if_e	add	fp, #20
1073c     A7 22 02 AB |  if_e	rdlong	local03, fp
10740     14 4E 85 A1 |  if_e	sub	fp, #20
10744     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10748     3C 00 90 5D |  if_ne	jmp	#LR__1262
1074c     00 1E 06 F6 | 	mov	local01, #0
10750     A7 12 02 FB | 	rdlong	arg01, fp
10754     5C C7 BF FD | 	call	#_convertstring
10758     FD 20 02 F6 | 	mov	local02, result1
1075c     0C 4E 05 F1 | 	add	fp, #12
10760     A7 12 02 FB | 	rdlong	arg01, fp
10764     0C 4E 85 F1 | 	sub	fp, #12
10768     48 C7 BF FD | 	call	#_convertstring
1076c     FD 14 02 F6 | 	mov	arg02, result1
10770     10 13 02 F6 | 	mov	arg01, local02
10774     E8 8C B0 FD | 	call	#__system___string_cmp
10778     00 FA 55 F2 | 	cmps	result1, #0 wc
1077c     00 1E 26 36 |  if_ae	not	local01, #0
10780     A7 1E 62 FC | 	wrlong	local01, fp
10784     04 00 90 FD | 	jmp	#LR__1263
10788                 | LR__1262
10788     A7 00 68 FC | 	wrlong	#0, fp
1078c                 | LR__1263
1078c     08 4E 05 F1 | 	add	fp, #8
10790     A7 38 68 FC | 	wrlong	#28, fp
10794     08 4E 85 F1 | 	sub	fp, #8
10798     A7 12 02 F6 | 	mov	arg01, fp
1079c     30 92 BF FD | 	call	#_push
107a0     A7 F0 03 F6 | 	mov	ptra, fp
107a4     B2 00 A0 FD | 	call	#popregs_
107a8                 | _do_ge_ret
107a8     2D 00 64 FD | 	ret
107ac                 | 
107ac                 | ' 
107ac                 | ' sub do_le
107ac                 | _do_le
107ac     05 4A 05 F6 | 	mov	COUNT_, #5
107b0     A8 00 A0 FD | 	call	#pushregs_
107b4     18 F0 07 F1 | 	add	ptra, #24
107b8     7C 91 BF FD | 	call	#_pop
107bc     FD 1E 02 F6 | 	mov	local01, result1
107c0     FE 20 02 F6 | 	mov	local02, result2
107c4     FF 22 02 F6 | 	mov	local03, result3
107c8     0C 4E 05 F1 | 	add	fp, #12
107cc     A7 1E 62 FC | 	wrlong	local01, fp
107d0     04 4E 05 F1 | 	add	fp, #4
107d4     A7 20 62 FC | 	wrlong	local02, fp
107d8     04 4E 05 F1 | 	add	fp, #4
107dc     A7 22 62 FC | 	wrlong	local03, fp
107e0     14 4E 85 F1 | 	sub	fp, #20
107e4     50 91 BF FD | 	call	#_pop
107e8     FF 22 02 F6 | 	mov	local03, result3
107ec     A7 FA 61 FC | 	wrlong	result1, fp
107f0     04 4E 05 F1 | 	add	fp, #4
107f4     A7 FC 61 FC | 	wrlong	result2, fp
107f8     04 4E 05 F1 | 	add	fp, #4
107fc     A7 22 62 FC | 	wrlong	local03, fp
10800                 | ' t2=pop()
10800                 | ' t1=pop()
10800                 | ' 
10800                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
10800     08 4E 85 F1 | 	sub	fp, #8
10804     1F 22 0E F2 | 	cmp	local03, #31 wz
10808     14 4E 05 A1 |  if_e	add	fp, #20
1080c     A7 24 02 AB |  if_e	rdlong	local04, fp
10810     14 4E 85 A1 |  if_e	sub	fp, #20
10814     12 23 02 A6 |  if_e	mov	local03, local04
10818     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1081c     28 00 90 5D |  if_ne	jmp	#LR__1270
10820     00 1E 06 F6 | 	mov	local01, #0
10824     A7 12 02 FB | 	rdlong	arg01, fp
10828     0C 4E 05 F1 | 	add	fp, #12
1082c     A7 14 02 FB | 	rdlong	arg02, fp
10830     0C 4E 85 F1 | 	sub	fp, #12
10834     28 8C B0 FD | 	call	#__system___string_cmp
10838     01 FA 55 F2 | 	cmps	result1, #1 wc
1083c     00 1E 26 C6 |  if_b	not	local01, #0
10840     A7 1E 62 FC | 	wrlong	local01, fp
10844     1C 04 90 FD | 	jmp	#LR__1283
10848                 | LR__1270
10848                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
10848     08 4E 05 F1 | 	add	fp, #8
1084c     A7 1E 02 FB | 	rdlong	local01, fp
10850     08 4E 85 F1 | 	sub	fp, #8
10854     1E 1E 0E F2 | 	cmp	local01, #30 wz
10858     14 4E 05 A1 |  if_e	add	fp, #20
1085c     A7 24 02 AB |  if_e	rdlong	local04, fp
10860     14 4E 85 A1 |  if_e	sub	fp, #20
10864     12 23 02 A6 |  if_e	mov	local03, local04
10868     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1086c     2C 00 90 5D |  if_ne	jmp	#LR__1271
10870     00 1E 06 F6 | 	mov	local01, #0
10874     A7 12 02 FB | 	rdlong	arg01, fp
10878     0C 4E 05 F1 | 	add	fp, #12
1087c     A7 14 02 FB | 	rdlong	arg02, fp
10880     0C 4E 85 F1 | 	sub	fp, #12
10884     01 16 06 F6 | 	mov	arg03, #1
10888     CC BA B0 FD | 	call	#__system___float_cmp
1088c     01 FA 55 F2 | 	cmps	result1, #1 wc
10890     00 1E 26 C6 |  if_b	not	local01, #0
10894     A7 1E 62 FC | 	wrlong	local01, fp
10898     C8 03 90 FD | 	jmp	#LR__1283
1089c                 | LR__1271
1089c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1089c     08 4E 05 F1 | 	add	fp, #8
108a0     A7 1E 02 FB | 	rdlong	local01, fp
108a4     08 4E 85 F1 | 	sub	fp, #8
108a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
108ac     14 4E 05 A1 |  if_e	add	fp, #20
108b0     A7 24 02 AB |  if_e	rdlong	local04, fp
108b4     14 4E 85 A1 |  if_e	sub	fp, #20
108b8     12 23 02 A6 |  if_e	mov	local03, local04
108bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
108c0     48 00 90 5D |  if_ne	jmp	#LR__1272
108c4     00 1E 06 F6 | 	mov	local01, #0
108c8     A7 20 02 FB | 	rdlong	local02, fp
108cc     0C 4E 05 F1 | 	add	fp, #12
108d0     A7 12 02 FB | 	rdlong	arg01, fp
108d4     0C 4E 85 F1 | 	sub	fp, #12
108d8     09 13 52 F6 | 	abs	arg01, arg01 wc
108dc     1F 26 C6 C9 |  if_b	decod	local05, #31
108e0     00 26 06 36 |  if_ae	mov	local05, #0
108e4     38 B2 B0 FD | 	call	#__system___float_fromuns
108e8     13 FB 61 F5 | 	xor	result1, local05
108ec     FD 14 02 F6 | 	mov	arg02, result1
108f0     10 13 02 F6 | 	mov	arg01, local02
108f4     01 16 06 F6 | 	mov	arg03, #1
108f8     5C BA B0 FD | 	call	#__system___float_cmp
108fc     01 FA 55 F2 | 	cmps	result1, #1 wc
10900     00 1E 26 C6 |  if_b	not	local01, #0
10904     A7 1E 62 FC | 	wrlong	local01, fp
10908     58 03 90 FD | 	jmp	#LR__1283
1090c                 | LR__1272
1090c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1090c     08 4E 05 F1 | 	add	fp, #8
10910     A7 1E 02 FB | 	rdlong	local01, fp
10914     08 4E 85 F1 | 	sub	fp, #8
10918     1E 1E 0E F2 | 	cmp	local01, #30 wz
1091c     14 4E 05 A1 |  if_e	add	fp, #20
10920     A7 24 02 AB |  if_e	rdlong	local04, fp
10924     14 4E 85 A1 |  if_e	sub	fp, #20
10928     12 23 02 A6 |  if_e	mov	local03, local04
1092c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10930     38 00 90 5D |  if_ne	jmp	#LR__1273
10934     00 1E 06 F6 | 	mov	local01, #0
10938     A7 20 02 FB | 	rdlong	local02, fp
1093c     0C 4E 05 F1 | 	add	fp, #12
10940     A7 12 02 FB | 	rdlong	arg01, fp
10944     0C 4E 85 F1 | 	sub	fp, #12
10948     D4 B1 B0 FD | 	call	#__system___float_fromuns
1094c     FD 14 02 F6 | 	mov	arg02, result1
10950     10 13 02 F6 | 	mov	arg01, local02
10954     01 16 06 F6 | 	mov	arg03, #1
10958     FC B9 B0 FD | 	call	#__system___float_cmp
1095c     01 FA 55 F2 | 	cmps	result1, #1 wc
10960     00 1E 26 C6 |  if_b	not	local01, #0
10964     A7 1E 62 FC | 	wrlong	local01, fp
10968     F8 02 90 FD | 	jmp	#LR__1283
1096c                 | LR__1273
1096c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1096c     08 4E 05 F1 | 	add	fp, #8
10970     A7 1E 02 FB | 	rdlong	local01, fp
10974     08 4E 85 F1 | 	sub	fp, #8
10978     1C 1E 0E F2 | 	cmp	local01, #28 wz
1097c     14 4E 05 A1 |  if_e	add	fp, #20
10980     A7 24 02 AB |  if_e	rdlong	local04, fp
10984     14 4E 85 A1 |  if_e	sub	fp, #20
10988     12 23 02 A6 |  if_e	mov	local03, local04
1098c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10990     44 00 90 5D |  if_ne	jmp	#LR__1274
10994     00 1E 06 F6 | 	mov	local01, #0
10998     A7 12 02 FB | 	rdlong	arg01, fp
1099c     09 13 52 F6 | 	abs	arg01, arg01 wc
109a0     1F 26 C6 C9 |  if_b	decod	local05, #31
109a4     00 26 06 36 |  if_ae	mov	local05, #0
109a8     74 B1 B0 FD | 	call	#__system___float_fromuns
109ac     13 FB 61 F5 | 	xor	result1, local05
109b0     FD 12 02 F6 | 	mov	arg01, result1
109b4     0C 4E 05 F1 | 	add	fp, #12
109b8     A7 14 02 FB | 	rdlong	arg02, fp
109bc     0C 4E 85 F1 | 	sub	fp, #12
109c0     01 16 06 F6 | 	mov	arg03, #1
109c4     90 B9 B0 FD | 	call	#__system___float_cmp
109c8     01 FA 55 F2 | 	cmps	result1, #1 wc
109cc     00 1E 26 C6 |  if_b	not	local01, #0
109d0     A7 1E 62 FC | 	wrlong	local01, fp
109d4     8C 02 90 FD | 	jmp	#LR__1283
109d8                 | LR__1274
109d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
109d8     08 4E 05 F1 | 	add	fp, #8
109dc     A7 1E 02 FB | 	rdlong	local01, fp
109e0     08 4E 85 F1 | 	sub	fp, #8
109e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
109e8     14 4E 05 A1 |  if_e	add	fp, #20
109ec     A7 24 02 AB |  if_e	rdlong	local04, fp
109f0     14 4E 85 A1 |  if_e	sub	fp, #20
109f4     12 23 02 A6 |  if_e	mov	local03, local04
109f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
109fc     24 00 90 5D |  if_ne	jmp	#LR__1275
10a00     00 1E 06 F6 | 	mov	local01, #0
10a04     A7 20 02 FB | 	rdlong	local02, fp
10a08     0C 4E 05 F1 | 	add	fp, #12
10a0c     A7 22 02 FB | 	rdlong	local03, fp
10a10     0C 4E 85 F1 | 	sub	fp, #12
10a14     11 21 5A F2 | 	cmps	local02, local03 wcz
10a18     01 1E 66 E6 |  if_be	neg	local01, #1
10a1c     A7 1E 62 FC | 	wrlong	local01, fp
10a20     40 02 90 FD | 	jmp	#LR__1283
10a24                 | LR__1275
10a24                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
10a24     08 4E 05 F1 | 	add	fp, #8
10a28     A7 1E 02 FB | 	rdlong	local01, fp
10a2c     08 4E 85 F1 | 	sub	fp, #8
10a30     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a34     14 4E 05 A1 |  if_e	add	fp, #20
10a38     A7 24 02 AB |  if_e	rdlong	local04, fp
10a3c     14 4E 85 A1 |  if_e	sub	fp, #20
10a40     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10a44     24 00 90 5D |  if_ne	jmp	#LR__1276
10a48     00 1E 06 F6 | 	mov	local01, #0
10a4c     A7 20 02 FB | 	rdlong	local02, fp
10a50     0C 4E 05 F1 | 	add	fp, #12
10a54     A7 22 02 FB | 	rdlong	local03, fp
10a58     0C 4E 85 F1 | 	sub	fp, #12
10a5c     11 21 5A F2 | 	cmps	local02, local03 wcz
10a60     01 1E 66 E6 |  if_be	neg	local01, #1
10a64     A7 1E 62 FC | 	wrlong	local01, fp
10a68     F8 01 90 FD | 	jmp	#LR__1283
10a6c                 | LR__1276
10a6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
10a6c     08 4E 05 F1 | 	add	fp, #8
10a70     A7 1E 02 FB | 	rdlong	local01, fp
10a74     08 4E 85 F1 | 	sub	fp, #8
10a78     1D 1E 0E F2 | 	cmp	local01, #29 wz
10a7c     14 4E 05 A1 |  if_e	add	fp, #20
10a80     A7 22 02 AB |  if_e	rdlong	local03, fp
10a84     14 4E 85 A1 |  if_e	sub	fp, #20
10a88     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10a8c     34 00 90 5D |  if_ne	jmp	#LR__1277
10a90     00 1E 06 F6 | 	mov	local01, #0
10a94     A7 12 02 FB | 	rdlong	arg01, fp
10a98     84 B0 B0 FD | 	call	#__system___float_fromuns
10a9c     FD 12 02 F6 | 	mov	arg01, result1
10aa0     0C 4E 05 F1 | 	add	fp, #12
10aa4     A7 14 02 FB | 	rdlong	arg02, fp
10aa8     0C 4E 85 F1 | 	sub	fp, #12
10aac     01 16 06 F6 | 	mov	arg03, #1
10ab0     A4 B8 B0 FD | 	call	#__system___float_cmp
10ab4     01 FA 55 F2 | 	cmps	result1, #1 wc
10ab8     00 1E 26 C6 |  if_b	not	local01, #0
10abc     A7 1E 62 FC | 	wrlong	local01, fp
10ac0     A0 01 90 FD | 	jmp	#LR__1283
10ac4                 | LR__1277
10ac4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
10ac4     08 4E 05 F1 | 	add	fp, #8
10ac8     A7 1E 02 FB | 	rdlong	local01, fp
10acc     08 4E 85 F1 | 	sub	fp, #8
10ad0     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ad4     14 4E 05 A1 |  if_e	add	fp, #20
10ad8     A7 22 02 AB |  if_e	rdlong	local03, fp
10adc     14 4E 85 A1 |  if_e	sub	fp, #20
10ae0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10ae4     24 00 90 5D |  if_ne	jmp	#LR__1278
10ae8     00 1E 06 F6 | 	mov	local01, #0
10aec     A7 20 02 FB | 	rdlong	local02, fp
10af0     0C 4E 05 F1 | 	add	fp, #12
10af4     A7 22 02 FB | 	rdlong	local03, fp
10af8     0C 4E 85 F1 | 	sub	fp, #12
10afc     11 21 5A F2 | 	cmps	local02, local03 wcz
10b00     01 1E 66 E6 |  if_be	neg	local01, #1
10b04     A7 1E 62 FC | 	wrlong	local01, fp
10b08     58 01 90 FD | 	jmp	#LR__1283
10b0c                 | LR__1278
10b0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
10b0c     08 4E 05 F1 | 	add	fp, #8
10b10     A7 1E 02 FB | 	rdlong	local01, fp
10b14     08 4E 85 F1 | 	sub	fp, #8
10b18     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b1c     14 4E 05 A1 |  if_e	add	fp, #20
10b20     A7 22 02 AB |  if_e	rdlong	local03, fp
10b24     14 4E 85 A1 |  if_e	sub	fp, #20
10b28     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10b2c     24 00 90 5D |  if_ne	jmp	#LR__1279
10b30     00 1E 06 F6 | 	mov	local01, #0
10b34     A7 20 02 FB | 	rdlong	local02, fp
10b38     0C 4E 05 F1 | 	add	fp, #12
10b3c     A7 22 02 FB | 	rdlong	local03, fp
10b40     0C 4E 85 F1 | 	sub	fp, #12
10b44     11 21 1A F2 | 	cmp	local02, local03 wcz
10b48     01 1E 66 E6 |  if_be	neg	local01, #1
10b4c     A7 1E 62 FC | 	wrlong	local01, fp
10b50     10 01 90 FD | 	jmp	#LR__1283
10b54                 | LR__1279
10b54                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
10b54     08 4E 05 F1 | 	add	fp, #8
10b58     A7 1E 02 FB | 	rdlong	local01, fp
10b5c     08 4E 85 F1 | 	sub	fp, #8
10b60     2B 1E 0E F2 | 	cmp	local01, #43 wz
10b64     14 4E 05 A1 |  if_e	add	fp, #20
10b68     A7 22 02 AB |  if_e	rdlong	local03, fp
10b6c     14 4E 85 A1 |  if_e	sub	fp, #20
10b70     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10b74     30 00 90 5D |  if_ne	jmp	#LR__1280
10b78     00 1E 06 F6 | 	mov	local01, #0
10b7c     A7 12 02 FB | 	rdlong	arg01, fp
10b80     30 C3 BF FD | 	call	#_convertstring
10b84     FD 12 02 F6 | 	mov	arg01, result1
10b88     0C 4E 05 F1 | 	add	fp, #12
10b8c     A7 14 02 FB | 	rdlong	arg02, fp
10b90     0C 4E 85 F1 | 	sub	fp, #12
10b94     C8 88 B0 FD | 	call	#__system___string_cmp
10b98     01 FA 55 F2 | 	cmps	result1, #1 wc
10b9c     00 1E 26 C6 |  if_b	not	local01, #0
10ba0     A7 1E 62 FC | 	wrlong	local01, fp
10ba4     BC 00 90 FD | 	jmp	#LR__1283
10ba8                 | LR__1280
10ba8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
10ba8     08 4E 05 F1 | 	add	fp, #8
10bac     A7 1E 02 FB | 	rdlong	local01, fp
10bb0     08 4E 85 F1 | 	sub	fp, #8
10bb4     1F 1E 0E F2 | 	cmp	local01, #31 wz
10bb8     14 4E 05 A1 |  if_e	add	fp, #20
10bbc     A7 22 02 AB |  if_e	rdlong	local03, fp
10bc0     14 4E 85 A1 |  if_e	sub	fp, #20
10bc4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10bc8     34 00 90 5D |  if_ne	jmp	#LR__1281
10bcc     00 1E 06 F6 | 	mov	local01, #0
10bd0     A7 20 02 FB | 	rdlong	local02, fp
10bd4     0C 4E 05 F1 | 	add	fp, #12
10bd8     A7 12 02 FB | 	rdlong	arg01, fp
10bdc     0C 4E 85 F1 | 	sub	fp, #12
10be0     D0 C2 BF FD | 	call	#_convertstring
10be4     FD 14 02 F6 | 	mov	arg02, result1
10be8     10 13 02 F6 | 	mov	arg01, local02
10bec     70 88 B0 FD | 	call	#__system___string_cmp
10bf0     01 FA 55 F2 | 	cmps	result1, #1 wc
10bf4     00 1E 26 C6 |  if_b	not	local01, #0
10bf8     A7 1E 62 FC | 	wrlong	local01, fp
10bfc     64 00 90 FD | 	jmp	#LR__1283
10c00                 | LR__1281
10c00                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
10c00     08 4E 05 F1 | 	add	fp, #8
10c04     A7 1E 02 FB | 	rdlong	local01, fp
10c08     08 4E 85 F1 | 	sub	fp, #8
10c0c     2B 1E 0E F2 | 	cmp	local01, #43 wz
10c10     14 4E 05 A1 |  if_e	add	fp, #20
10c14     A7 22 02 AB |  if_e	rdlong	local03, fp
10c18     14 4E 85 A1 |  if_e	sub	fp, #20
10c1c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10c20     3C 00 90 5D |  if_ne	jmp	#LR__1282
10c24     00 1E 06 F6 | 	mov	local01, #0
10c28     A7 12 02 FB | 	rdlong	arg01, fp
10c2c     84 C2 BF FD | 	call	#_convertstring
10c30     FD 20 02 F6 | 	mov	local02, result1
10c34     0C 4E 05 F1 | 	add	fp, #12
10c38     A7 12 02 FB | 	rdlong	arg01, fp
10c3c     0C 4E 85 F1 | 	sub	fp, #12
10c40     70 C2 BF FD | 	call	#_convertstring
10c44     FD 14 02 F6 | 	mov	arg02, result1
10c48     10 13 02 F6 | 	mov	arg01, local02
10c4c     10 88 B0 FD | 	call	#__system___string_cmp
10c50     01 FA 55 F2 | 	cmps	result1, #1 wc
10c54     00 1E 26 C6 |  if_b	not	local01, #0
10c58     A7 1E 62 FC | 	wrlong	local01, fp
10c5c     04 00 90 FD | 	jmp	#LR__1283
10c60                 | LR__1282
10c60     A7 00 68 FC | 	wrlong	#0, fp
10c64                 | LR__1283
10c64     08 4E 05 F1 | 	add	fp, #8
10c68     A7 38 68 FC | 	wrlong	#28, fp
10c6c     08 4E 85 F1 | 	sub	fp, #8
10c70     A7 12 02 F6 | 	mov	arg01, fp
10c74     58 8D BF FD | 	call	#_push
10c78     A7 F0 03 F6 | 	mov	ptra, fp
10c7c     B2 00 A0 FD | 	call	#popregs_
10c80                 | _do_le_ret
10c80     2D 00 64 FD | 	ret
10c84                 | 
10c84                 | ' 
10c84                 | ' 
10c84                 | ' sub do_ne
10c84                 | _do_ne
10c84     05 4A 05 F6 | 	mov	COUNT_, #5
10c88     A8 00 A0 FD | 	call	#pushregs_
10c8c     18 F0 07 F1 | 	add	ptra, #24
10c90     A4 8C BF FD | 	call	#_pop
10c94     FD 1E 02 F6 | 	mov	local01, result1
10c98     FE 20 02 F6 | 	mov	local02, result2
10c9c     FF 22 02 F6 | 	mov	local03, result3
10ca0     0C 4E 05 F1 | 	add	fp, #12
10ca4     A7 1E 62 FC | 	wrlong	local01, fp
10ca8     04 4E 05 F1 | 	add	fp, #4
10cac     A7 20 62 FC | 	wrlong	local02, fp
10cb0     04 4E 05 F1 | 	add	fp, #4
10cb4     A7 22 62 FC | 	wrlong	local03, fp
10cb8     14 4E 85 F1 | 	sub	fp, #20
10cbc     78 8C BF FD | 	call	#_pop
10cc0     FF 22 02 F6 | 	mov	local03, result3
10cc4     A7 FA 61 FC | 	wrlong	result1, fp
10cc8     04 4E 05 F1 | 	add	fp, #4
10ccc     A7 FC 61 FC | 	wrlong	result2, fp
10cd0     04 4E 05 F1 | 	add	fp, #4
10cd4     A7 22 62 FC | 	wrlong	local03, fp
10cd8                 | ' t2=pop()
10cd8                 | ' t1=pop()
10cd8                 | ' 
10cd8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
10cd8     08 4E 85 F1 | 	sub	fp, #8
10cdc     1F 22 0E F2 | 	cmp	local03, #31 wz
10ce0     14 4E 05 A1 |  if_e	add	fp, #20
10ce4     A7 24 02 AB |  if_e	rdlong	local04, fp
10ce8     14 4E 85 A1 |  if_e	sub	fp, #20
10cec     12 23 02 A6 |  if_e	mov	local03, local04
10cf0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10cf4     28 00 90 5D |  if_ne	jmp	#LR__1290
10cf8     00 1E 06 F6 | 	mov	local01, #0
10cfc     A7 12 02 FB | 	rdlong	arg01, fp
10d00     0C 4E 05 F1 | 	add	fp, #12
10d04     A7 14 02 FB | 	rdlong	arg02, fp
10d08     0C 4E 85 F1 | 	sub	fp, #12
10d0c     50 87 B0 FD | 	call	#__system___string_cmp
10d10     00 FA 0D F2 | 	cmp	result1, #0 wz
10d14     00 1E 26 56 |  if_ne	not	local01, #0
10d18     A7 1E 62 FC | 	wrlong	local01, fp
10d1c     1C 04 90 FD | 	jmp	#LR__1303
10d20                 | LR__1290
10d20                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
10d20     08 4E 05 F1 | 	add	fp, #8
10d24     A7 1E 02 FB | 	rdlong	local01, fp
10d28     08 4E 85 F1 | 	sub	fp, #8
10d2c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d30     14 4E 05 A1 |  if_e	add	fp, #20
10d34     A7 24 02 AB |  if_e	rdlong	local04, fp
10d38     14 4E 85 A1 |  if_e	sub	fp, #20
10d3c     12 23 02 A6 |  if_e	mov	local03, local04
10d40     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10d44     2C 00 90 5D |  if_ne	jmp	#LR__1291
10d48     00 1E 06 F6 | 	mov	local01, #0
10d4c     A7 12 02 FB | 	rdlong	arg01, fp
10d50     0C 4E 05 F1 | 	add	fp, #12
10d54     A7 14 02 FB | 	rdlong	arg02, fp
10d58     0C 4E 85 F1 | 	sub	fp, #12
10d5c     01 16 06 F6 | 	mov	arg03, #1
10d60     F4 B5 B0 FD | 	call	#__system___float_cmp
10d64     00 FA 0D F2 | 	cmp	result1, #0 wz
10d68     00 1E 26 56 |  if_ne	not	local01, #0
10d6c     A7 1E 62 FC | 	wrlong	local01, fp
10d70     C8 03 90 FD | 	jmp	#LR__1303
10d74                 | LR__1291
10d74                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
10d74     08 4E 05 F1 | 	add	fp, #8
10d78     A7 1E 02 FB | 	rdlong	local01, fp
10d7c     08 4E 85 F1 | 	sub	fp, #8
10d80     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d84     14 4E 05 A1 |  if_e	add	fp, #20
10d88     A7 24 02 AB |  if_e	rdlong	local04, fp
10d8c     14 4E 85 A1 |  if_e	sub	fp, #20
10d90     12 23 02 A6 |  if_e	mov	local03, local04
10d94     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10d98     48 00 90 5D |  if_ne	jmp	#LR__1292
10d9c     00 1E 06 F6 | 	mov	local01, #0
10da0     A7 20 02 FB | 	rdlong	local02, fp
10da4     0C 4E 05 F1 | 	add	fp, #12
10da8     A7 12 02 FB | 	rdlong	arg01, fp
10dac     0C 4E 85 F1 | 	sub	fp, #12
10db0     09 13 52 F6 | 	abs	arg01, arg01 wc
10db4     1F 26 C6 C9 |  if_b	decod	local05, #31
10db8     00 26 06 36 |  if_ae	mov	local05, #0
10dbc     60 AD B0 FD | 	call	#__system___float_fromuns
10dc0     13 FB 61 F5 | 	xor	result1, local05
10dc4     FD 14 02 F6 | 	mov	arg02, result1
10dc8     10 13 02 F6 | 	mov	arg01, local02
10dcc     01 16 06 F6 | 	mov	arg03, #1
10dd0     84 B5 B0 FD | 	call	#__system___float_cmp
10dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
10dd8     00 1E 26 56 |  if_ne	not	local01, #0
10ddc     A7 1E 62 FC | 	wrlong	local01, fp
10de0     58 03 90 FD | 	jmp	#LR__1303
10de4                 | LR__1292
10de4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
10de4     08 4E 05 F1 | 	add	fp, #8
10de8     A7 1E 02 FB | 	rdlong	local01, fp
10dec     08 4E 85 F1 | 	sub	fp, #8
10df0     1E 1E 0E F2 | 	cmp	local01, #30 wz
10df4     14 4E 05 A1 |  if_e	add	fp, #20
10df8     A7 24 02 AB |  if_e	rdlong	local04, fp
10dfc     14 4E 85 A1 |  if_e	sub	fp, #20
10e00     12 23 02 A6 |  if_e	mov	local03, local04
10e04     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10e08     38 00 90 5D |  if_ne	jmp	#LR__1293
10e0c     00 1E 06 F6 | 	mov	local01, #0
10e10     A7 20 02 FB | 	rdlong	local02, fp
10e14     0C 4E 05 F1 | 	add	fp, #12
10e18     A7 12 02 FB | 	rdlong	arg01, fp
10e1c     0C 4E 85 F1 | 	sub	fp, #12
10e20     FC AC B0 FD | 	call	#__system___float_fromuns
10e24     FD 14 02 F6 | 	mov	arg02, result1
10e28     10 13 02 F6 | 	mov	arg01, local02
10e2c     01 16 06 F6 | 	mov	arg03, #1
10e30     24 B5 B0 FD | 	call	#__system___float_cmp
10e34     00 FA 0D F2 | 	cmp	result1, #0 wz
10e38     00 1E 26 56 |  if_ne	not	local01, #0
10e3c     A7 1E 62 FC | 	wrlong	local01, fp
10e40     F8 02 90 FD | 	jmp	#LR__1303
10e44                 | LR__1293
10e44                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
10e44     08 4E 05 F1 | 	add	fp, #8
10e48     A7 1E 02 FB | 	rdlong	local01, fp
10e4c     08 4E 85 F1 | 	sub	fp, #8
10e50     1C 1E 0E F2 | 	cmp	local01, #28 wz
10e54     14 4E 05 A1 |  if_e	add	fp, #20
10e58     A7 24 02 AB |  if_e	rdlong	local04, fp
10e5c     14 4E 85 A1 |  if_e	sub	fp, #20
10e60     12 23 02 A6 |  if_e	mov	local03, local04
10e64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10e68     44 00 90 5D |  if_ne	jmp	#LR__1294
10e6c     00 1E 06 F6 | 	mov	local01, #0
10e70     A7 12 02 FB | 	rdlong	arg01, fp
10e74     09 13 52 F6 | 	abs	arg01, arg01 wc
10e78     1F 26 C6 C9 |  if_b	decod	local05, #31
10e7c     00 26 06 36 |  if_ae	mov	local05, #0
10e80     9C AC B0 FD | 	call	#__system___float_fromuns
10e84     13 FB 61 F5 | 	xor	result1, local05
10e88     FD 12 02 F6 | 	mov	arg01, result1
10e8c     0C 4E 05 F1 | 	add	fp, #12
10e90     A7 14 02 FB | 	rdlong	arg02, fp
10e94     0C 4E 85 F1 | 	sub	fp, #12
10e98     01 16 06 F6 | 	mov	arg03, #1
10e9c     B8 B4 B0 FD | 	call	#__system___float_cmp
10ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
10ea4     00 1E 26 56 |  if_ne	not	local01, #0
10ea8     A7 1E 62 FC | 	wrlong	local01, fp
10eac     8C 02 90 FD | 	jmp	#LR__1303
10eb0                 | LR__1294
10eb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
10eb0     08 4E 05 F1 | 	add	fp, #8
10eb4     A7 1E 02 FB | 	rdlong	local01, fp
10eb8     08 4E 85 F1 | 	sub	fp, #8
10ebc     1C 1E 0E F2 | 	cmp	local01, #28 wz
10ec0     14 4E 05 A1 |  if_e	add	fp, #20
10ec4     A7 24 02 AB |  if_e	rdlong	local04, fp
10ec8     14 4E 85 A1 |  if_e	sub	fp, #20
10ecc     12 23 02 A6 |  if_e	mov	local03, local04
10ed0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10ed4     24 00 90 5D |  if_ne	jmp	#LR__1295
10ed8     00 1E 06 F6 | 	mov	local01, #0
10edc     A7 20 02 FB | 	rdlong	local02, fp
10ee0     0C 4E 05 F1 | 	add	fp, #12
10ee4     A7 22 02 FB | 	rdlong	local03, fp
10ee8     0C 4E 85 F1 | 	sub	fp, #12
10eec     11 21 0A F2 | 	cmp	local02, local03 wz
10ef0     01 1E 66 56 |  if_ne	neg	local01, #1
10ef4     A7 1E 62 FC | 	wrlong	local01, fp
10ef8     40 02 90 FD | 	jmp	#LR__1303
10efc                 | LR__1295
10efc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
10efc     08 4E 05 F1 | 	add	fp, #8
10f00     A7 1E 02 FB | 	rdlong	local01, fp
10f04     08 4E 85 F1 | 	sub	fp, #8
10f08     1C 1E 0E F2 | 	cmp	local01, #28 wz
10f0c     14 4E 05 A1 |  if_e	add	fp, #20
10f10     A7 24 02 AB |  if_e	rdlong	local04, fp
10f14     14 4E 85 A1 |  if_e	sub	fp, #20
10f18     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10f1c     24 00 90 5D |  if_ne	jmp	#LR__1296
10f20     00 1E 06 F6 | 	mov	local01, #0
10f24     A7 20 02 FB | 	rdlong	local02, fp
10f28     0C 4E 05 F1 | 	add	fp, #12
10f2c     A7 22 02 FB | 	rdlong	local03, fp
10f30     0C 4E 85 F1 | 	sub	fp, #12
10f34     11 21 0A F2 | 	cmp	local02, local03 wz
10f38     01 1E 66 56 |  if_ne	neg	local01, #1
10f3c     A7 1E 62 FC | 	wrlong	local01, fp
10f40     F8 01 90 FD | 	jmp	#LR__1303
10f44                 | LR__1296
10f44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
10f44     08 4E 05 F1 | 	add	fp, #8
10f48     A7 1E 02 FB | 	rdlong	local01, fp
10f4c     08 4E 85 F1 | 	sub	fp, #8
10f50     1D 1E 0E F2 | 	cmp	local01, #29 wz
10f54     14 4E 05 A1 |  if_e	add	fp, #20
10f58     A7 22 02 AB |  if_e	rdlong	local03, fp
10f5c     14 4E 85 A1 |  if_e	sub	fp, #20
10f60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10f64     34 00 90 5D |  if_ne	jmp	#LR__1297
10f68     00 1E 06 F6 | 	mov	local01, #0
10f6c     A7 12 02 FB | 	rdlong	arg01, fp
10f70     AC AB B0 FD | 	call	#__system___float_fromuns
10f74     FD 12 02 F6 | 	mov	arg01, result1
10f78     0C 4E 05 F1 | 	add	fp, #12
10f7c     A7 14 02 FB | 	rdlong	arg02, fp
10f80     0C 4E 85 F1 | 	sub	fp, #12
10f84     01 16 06 F6 | 	mov	arg03, #1
10f88     CC B3 B0 FD | 	call	#__system___float_cmp
10f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
10f90     00 1E 26 56 |  if_ne	not	local01, #0
10f94     A7 1E 62 FC | 	wrlong	local01, fp
10f98     A0 01 90 FD | 	jmp	#LR__1303
10f9c                 | LR__1297
10f9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10f9c     08 4E 05 F1 | 	add	fp, #8
10fa0     A7 1E 02 FB | 	rdlong	local01, fp
10fa4     08 4E 85 F1 | 	sub	fp, #8
10fa8     1D 1E 0E F2 | 	cmp	local01, #29 wz
10fac     14 4E 05 A1 |  if_e	add	fp, #20
10fb0     A7 22 02 AB |  if_e	rdlong	local03, fp
10fb4     14 4E 85 A1 |  if_e	sub	fp, #20
10fb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10fbc     24 00 90 5D |  if_ne	jmp	#LR__1298
10fc0     00 1E 06 F6 | 	mov	local01, #0
10fc4     A7 20 02 FB | 	rdlong	local02, fp
10fc8     0C 4E 05 F1 | 	add	fp, #12
10fcc     A7 22 02 FB | 	rdlong	local03, fp
10fd0     0C 4E 85 F1 | 	sub	fp, #12
10fd4     11 21 0A F2 | 	cmp	local02, local03 wz
10fd8     01 1E 66 56 |  if_ne	neg	local01, #1
10fdc     A7 1E 62 FC | 	wrlong	local01, fp
10fe0     58 01 90 FD | 	jmp	#LR__1303
10fe4                 | LR__1298
10fe4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
10fe4     08 4E 05 F1 | 	add	fp, #8
10fe8     A7 1E 02 FB | 	rdlong	local01, fp
10fec     08 4E 85 F1 | 	sub	fp, #8
10ff0     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ff4     14 4E 05 A1 |  if_e	add	fp, #20
10ff8     A7 22 02 AB |  if_e	rdlong	local03, fp
10ffc     14 4E 85 A1 |  if_e	sub	fp, #20
11000     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11004     24 00 90 5D |  if_ne	jmp	#LR__1299
11008     00 1E 06 F6 | 	mov	local01, #0
1100c     A7 20 02 FB | 	rdlong	local02, fp
11010     0C 4E 05 F1 | 	add	fp, #12
11014     A7 22 02 FB | 	rdlong	local03, fp
11018     0C 4E 85 F1 | 	sub	fp, #12
1101c     11 21 0A F2 | 	cmp	local02, local03 wz
11020     01 1E 66 56 |  if_ne	neg	local01, #1
11024     A7 1E 62 FC | 	wrlong	local01, fp
11028     10 01 90 FD | 	jmp	#LR__1303
1102c                 | LR__1299
1102c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1102c     08 4E 05 F1 | 	add	fp, #8
11030     A7 1E 02 FB | 	rdlong	local01, fp
11034     08 4E 85 F1 | 	sub	fp, #8
11038     2B 1E 0E F2 | 	cmp	local01, #43 wz
1103c     14 4E 05 A1 |  if_e	add	fp, #20
11040     A7 22 02 AB |  if_e	rdlong	local03, fp
11044     14 4E 85 A1 |  if_e	sub	fp, #20
11048     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1104c     30 00 90 5D |  if_ne	jmp	#LR__1300
11050     00 1E 06 F6 | 	mov	local01, #0
11054     A7 12 02 FB | 	rdlong	arg01, fp
11058     58 BE BF FD | 	call	#_convertstring
1105c     FD 12 02 F6 | 	mov	arg01, result1
11060     0C 4E 05 F1 | 	add	fp, #12
11064     A7 14 02 FB | 	rdlong	arg02, fp
11068     0C 4E 85 F1 | 	sub	fp, #12
1106c     F0 83 B0 FD | 	call	#__system___string_cmp
11070     00 FA 0D F2 | 	cmp	result1, #0 wz
11074     00 1E 26 56 |  if_ne	not	local01, #0
11078     A7 1E 62 FC | 	wrlong	local01, fp
1107c     BC 00 90 FD | 	jmp	#LR__1303
11080                 | LR__1300
11080                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
11080     08 4E 05 F1 | 	add	fp, #8
11084     A7 1E 02 FB | 	rdlong	local01, fp
11088     08 4E 85 F1 | 	sub	fp, #8
1108c     1F 1E 0E F2 | 	cmp	local01, #31 wz
11090     14 4E 05 A1 |  if_e	add	fp, #20
11094     A7 22 02 AB |  if_e	rdlong	local03, fp
11098     14 4E 85 A1 |  if_e	sub	fp, #20
1109c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
110a0     34 00 90 5D |  if_ne	jmp	#LR__1301
110a4     00 1E 06 F6 | 	mov	local01, #0
110a8     A7 20 02 FB | 	rdlong	local02, fp
110ac     0C 4E 05 F1 | 	add	fp, #12
110b0     A7 12 02 FB | 	rdlong	arg01, fp
110b4     0C 4E 85 F1 | 	sub	fp, #12
110b8     F8 BD BF FD | 	call	#_convertstring
110bc     FD 14 02 F6 | 	mov	arg02, result1
110c0     10 13 02 F6 | 	mov	arg01, local02
110c4     98 83 B0 FD | 	call	#__system___string_cmp
110c8     00 FA 0D F2 | 	cmp	result1, #0 wz
110cc     00 1E 26 56 |  if_ne	not	local01, #0
110d0     A7 1E 62 FC | 	wrlong	local01, fp
110d4     64 00 90 FD | 	jmp	#LR__1303
110d8                 | LR__1301
110d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
110d8     08 4E 05 F1 | 	add	fp, #8
110dc     A7 1E 02 FB | 	rdlong	local01, fp
110e0     08 4E 85 F1 | 	sub	fp, #8
110e4     2B 1E 0E F2 | 	cmp	local01, #43 wz
110e8     14 4E 05 A1 |  if_e	add	fp, #20
110ec     A7 22 02 AB |  if_e	rdlong	local03, fp
110f0     14 4E 85 A1 |  if_e	sub	fp, #20
110f4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
110f8     3C 00 90 5D |  if_ne	jmp	#LR__1302
110fc     00 1E 06 F6 | 	mov	local01, #0
11100     A7 12 02 FB | 	rdlong	arg01, fp
11104     AC BD BF FD | 	call	#_convertstring
11108     FD 20 02 F6 | 	mov	local02, result1
1110c     0C 4E 05 F1 | 	add	fp, #12
11110     A7 12 02 FB | 	rdlong	arg01, fp
11114     0C 4E 85 F1 | 	sub	fp, #12
11118     98 BD BF FD | 	call	#_convertstring
1111c     FD 14 02 F6 | 	mov	arg02, result1
11120     10 13 02 F6 | 	mov	arg01, local02
11124     38 83 B0 FD | 	call	#__system___string_cmp
11128     00 FA 0D F2 | 	cmp	result1, #0 wz
1112c     00 1E 26 56 |  if_ne	not	local01, #0
11130     A7 1E 62 FC | 	wrlong	local01, fp
11134     04 00 90 FD | 	jmp	#LR__1303
11138                 | LR__1302
11138     A7 00 68 FC | 	wrlong	#0, fp
1113c                 | LR__1303
1113c     08 4E 05 F1 | 	add	fp, #8
11140     A7 38 68 FC | 	wrlong	#28, fp
11144     08 4E 85 F1 | 	sub	fp, #8
11148     A7 12 02 F6 | 	mov	arg01, fp
1114c     80 88 BF FD | 	call	#_push
11150     A7 F0 03 F6 | 	mov	ptra, fp
11154     B2 00 A0 FD | 	call	#popregs_
11158                 | _do_ne_ret
11158     2D 00 64 FD | 	ret
1115c                 | 
1115c                 | ' 
1115c                 | ' 
1115c                 | ' 
1115c                 | ' ' -------------------   convert a variable on the top of stack to integer
1115c                 | ' 
1115c                 | ' sub do_converttoint
1115c                 | _do_converttoint
1115c     02 4A 05 F6 | 	mov	COUNT_, #2
11160     A8 00 A0 FD | 	call	#pushregs_
11164     18 F0 07 F1 | 	add	ptra, #24
11168     CC 87 BF FD | 	call	#_pop
1116c     FE 1E 02 F6 | 	mov	local01, result2
11170     FF 20 02 F6 | 	mov	local02, result3
11174     A7 FA 61 FC | 	wrlong	result1, fp
11178     04 4E 05 F1 | 	add	fp, #4
1117c     A7 1E 62 FC | 	wrlong	local01, fp
11180     04 4E 05 F1 | 	add	fp, #4
11184     A7 20 62 FC | 	wrlong	local02, fp
11188                 | ' t1=pop() 
11188                 | ' select case t1.result_type
11188     08 4E 85 F1 | 	sub	fp, #8
1118c     1C 20 0E F2 | 	cmp	local02, #28 wz
11190     2C 00 90 AD |  if_e	jmp	#LR__1310
11194     1D 20 0E F2 | 	cmp	local02, #29 wz
11198     40 00 90 AD |  if_e	jmp	#LR__1311
1119c     1E 20 0E F2 | 	cmp	local02, #30 wz
111a0     54 00 90 AD |  if_e	jmp	#LR__1312
111a4     1F 20 0E F2 | 	cmp	local02, #31 wz
111a8     70 00 90 AD |  if_e	jmp	#LR__1313
111ac     2B 20 0E F2 | 	cmp	local02, #43 wz
111b0     94 00 90 AD |  if_e	jmp	#LR__1314
111b4     FF 20 0E F2 | 	cmp	local02, #255 wz
111b8     C0 00 90 AD |  if_e	jmp	#LR__1315
111bc     DC 00 90 FD | 	jmp	#LR__1316
111c0                 | LR__1310
111c0     A7 20 02 FB | 	rdlong	local02, fp
111c4     0C 4E 05 F1 | 	add	fp, #12
111c8     A7 20 62 FC | 	wrlong	local02, fp
111cc     04 4E 05 F1 | 	add	fp, #4
111d0     A7 38 68 FC | 	wrlong	#28, fp
111d4     10 4E 85 F1 | 	sub	fp, #16
111d8     D4 00 90 FD | 	jmp	#LR__1317
111dc                 | LR__1311
111dc     A7 20 02 FB | 	rdlong	local02, fp
111e0     0C 4E 05 F1 | 	add	fp, #12
111e4     A7 20 62 FC | 	wrlong	local02, fp
111e8     04 4E 05 F1 | 	add	fp, #4
111ec     A7 38 68 FC | 	wrlong	#28, fp
111f0     10 4E 85 F1 | 	sub	fp, #16
111f4     B8 00 90 FD | 	jmp	#LR__1317
111f8                 | LR__1312
111f8     A7 12 02 FB | 	rdlong	arg01, fp
111fc     01 14 06 F6 | 	mov	arg02, #1
11200     E8 B1 B0 FD | 	call	#__system___float_tointeger
11204     0C 4E 05 F1 | 	add	fp, #12
11208     A7 FA 61 FC | 	wrlong	result1, fp
1120c     04 4E 05 F1 | 	add	fp, #4
11210     A7 38 68 FC | 	wrlong	#28, fp
11214     10 4E 85 F1 | 	sub	fp, #16
11218     94 00 90 FD | 	jmp	#LR__1317
1121c                 | LR__1313
1121c     A7 12 02 FB | 	rdlong	arg01, fp
11220     E8 B4 B0 FD | 	call	#__system____builtin_atof
11224     FD 12 02 F6 | 	mov	arg01, result1
11228     00 14 06 F6 | 	mov	arg02, #0
1122c     BC B1 B0 FD | 	call	#__system___float_tointeger
11230     0C 4E 05 F1 | 	add	fp, #12
11234     A7 FA 61 FC | 	wrlong	result1, fp
11238     04 4E 05 F1 | 	add	fp, #4
1123c     A7 38 68 FC | 	wrlong	#28, fp
11240     10 4E 85 F1 | 	sub	fp, #16
11244     68 00 90 FD | 	jmp	#LR__1317
11248                 | LR__1314
11248     A7 12 02 FB | 	rdlong	arg01, fp
1124c     64 BC BF FD | 	call	#_convertstring
11250     FD 12 02 F6 | 	mov	arg01, result1
11254     B4 B4 B0 FD | 	call	#__system____builtin_atof
11258     FD 12 02 F6 | 	mov	arg01, result1
1125c     00 14 06 F6 | 	mov	arg02, #0
11260     88 B1 B0 FD | 	call	#__system___float_tointeger
11264     0C 4E 05 F1 | 	add	fp, #12
11268     A7 FA 61 FC | 	wrlong	result1, fp
1126c     04 4E 05 F1 | 	add	fp, #4
11270     A7 38 68 FC | 	wrlong	#28, fp
11274     10 4E 85 F1 | 	sub	fp, #16
11278     34 00 90 FD | 	jmp	#LR__1317
1127c                 | LR__1315
1127c     0C 4E 05 F1 | 	add	fp, #12
11280     A7 00 68 FC | 	wrlong	#0, fp
11284     0C 4E 85 F1 | 	sub	fp, #12
11288     A7 20 02 FB | 	rdlong	local02, fp
1128c     10 4E 05 F1 | 	add	fp, #16
11290     A7 20 62 FC | 	wrlong	local02, fp
11294     10 4E 85 F1 | 	sub	fp, #16
11298     14 00 90 FD | 	jmp	#LR__1317
1129c                 | LR__1316
1129c     0C 4E 05 F1 | 	add	fp, #12
112a0     A7 00 68 FC | 	wrlong	#0, fp
112a4     04 4E 05 F1 | 	add	fp, #4
112a8     A7 02 68 FC | 	wrlong	#1, fp
112ac     10 4E 85 F1 | 	sub	fp, #16
112b0                 | LR__1317
112b0     0C 4E 05 F1 | 	add	fp, #12
112b4     A7 20 02 FB | 	rdlong	local02, fp
112b8     0C 4E 85 F1 | 	sub	fp, #12
112bc     A7 20 62 FC | 	wrlong	local02, fp
112c0     10 4E 05 F1 | 	add	fp, #16
112c4     A7 20 02 FB | 	rdlong	local02, fp
112c8     08 4E 85 F1 | 	sub	fp, #8
112cc     A7 20 62 FC | 	wrlong	local02, fp
112d0     08 4E 85 F1 | 	sub	fp, #8
112d4     A7 12 02 F6 | 	mov	arg01, fp
112d8     F4 86 BF FD | 	call	#_push
112dc     A7 F0 03 F6 | 	mov	ptra, fp
112e0     B2 00 A0 FD | 	call	#popregs_
112e4                 | _do_converttoint_ret
112e4     2D 00 64 FD | 	ret
112e8                 | 
112e8                 | ' 
112e8                 | ' function converttoint (t1 as expr_result) as integer
112e8                 | _converttoint
112e8     02 4A 05 F6 | 	mov	COUNT_, #2
112ec     A8 00 A0 FD | 	call	#pushregs_
112f0     09 1F 02 F6 | 	mov	local01, arg01
112f4                 | ' 
112f4                 | ' select case t1.result_type
112f4     08 1E 06 F1 | 	add	local01, #8
112f8     0F 21 02 FB | 	rdlong	local02, local01
112fc     08 1E 86 F1 | 	sub	local01, #8
11300     1C 20 0E F2 | 	cmp	local02, #28 wz
11304     24 00 90 AD |  if_e	jmp	#LR__1320
11308     1D 20 0E F2 | 	cmp	local02, #29 wz
1130c     24 00 90 AD |  if_e	jmp	#LR__1321
11310     1E 20 0E F2 | 	cmp	local02, #30 wz
11314     24 00 90 AD |  if_e	jmp	#LR__1322
11318     1F 20 0E F2 | 	cmp	local02, #31 wz
1131c     2C 00 90 AD |  if_e	jmp	#LR__1323
11320     2B 20 0E F2 | 	cmp	local02, #43 wz
11324     3C 00 90 AD |  if_e	jmp	#LR__1324
11328     58 00 90 FD | 	jmp	#LR__1325
1132c                 | LR__1320
1132c     0F FB 01 FB | 	rdlong	result1, local01
11330     54 00 90 FD | 	jmp	#LR__1326
11334                 | LR__1321
11334     0F FB 01 FB | 	rdlong	result1, local01
11338     4C 00 90 FD | 	jmp	#LR__1326
1133c                 | LR__1322
1133c     0F 13 02 FB | 	rdlong	arg01, local01
11340     01 14 06 F6 | 	mov	arg02, #1
11344     A4 B0 B0 FD | 	call	#__system___float_tointeger
11348     3C 00 90 FD | 	jmp	#LR__1326
1134c                 | LR__1323
1134c     0F 13 02 FB | 	rdlong	arg01, local01
11350     B8 B3 B0 FD | 	call	#__system____builtin_atof
11354     FD 12 02 F6 | 	mov	arg01, result1
11358     00 14 06 F6 | 	mov	arg02, #0
1135c     8C B0 B0 FD | 	call	#__system___float_tointeger
11360     24 00 90 FD | 	jmp	#LR__1326
11364                 | LR__1324
11364     0F 13 02 FB | 	rdlong	arg01, local01
11368     48 BB BF FD | 	call	#_convertstring
1136c     FD 12 02 F6 | 	mov	arg01, result1
11370     98 B3 B0 FD | 	call	#__system____builtin_atof
11374     FD 12 02 F6 | 	mov	arg01, result1
11378     00 14 06 F6 | 	mov	arg02, #0
1137c     6C B0 B0 FD | 	call	#__system___float_tointeger
11380     04 00 90 FD | 	jmp	#LR__1326
11384                 | LR__1325
11384     00 FA 05 F6 | 	mov	result1, #0
11388                 | LR__1326
11388     A7 F0 03 F6 | 	mov	ptra, fp
1138c     B2 00 A0 FD | 	call	#popregs_
11390                 | _converttoint_ret
11390     2D 00 64 FD | 	ret
11394                 | 
11394                 | ' 
11394                 | ' function converttofloat (t1 as expr_result) as single
11394                 | _converttofloat
11394     03 4A 05 F6 | 	mov	COUNT_, #3
11398     A8 00 A0 FD | 	call	#pushregs_
1139c     09 1F 02 F6 | 	mov	local01, arg01
113a0                 | ' 
113a0                 | ' select case t1.result_type
113a0     08 1E 06 F1 | 	add	local01, #8
113a4     0F 21 02 FB | 	rdlong	local02, local01
113a8     08 1E 86 F1 | 	sub	local01, #8
113ac     1C 20 0E F2 | 	cmp	local02, #28 wz
113b0     24 00 90 AD |  if_e	jmp	#LR__1330
113b4     1D 20 0E F2 | 	cmp	local02, #29 wz
113b8     38 00 90 AD |  if_e	jmp	#LR__1331
113bc     1E 20 0E F2 | 	cmp	local02, #30 wz
113c0     3C 00 90 AD |  if_e	jmp	#LR__1332
113c4     1F 20 0E F2 | 	cmp	local02, #31 wz
113c8     3C 00 90 AD |  if_e	jmp	#LR__1333
113cc     2B 20 0E F2 | 	cmp	local02, #43 wz
113d0     40 00 90 AD |  if_e	jmp	#LR__1334
113d4     50 00 90 FD | 	jmp	#LR__1335
113d8                 | LR__1330
113d8     0F 13 02 FB | 	rdlong	arg01, local01
113dc     09 13 52 F6 | 	abs	arg01, arg01 wc
113e0     1F 22 C6 C9 |  if_b	decod	local03, #31
113e4     00 22 06 36 |  if_ae	mov	local03, #0
113e8     34 A7 B0 FD | 	call	#__system___float_fromuns
113ec     11 FB 61 F5 | 	xor	result1, local03
113f0     38 00 90 FD | 	jmp	#LR__1336
113f4                 | LR__1331
113f4     0F 13 02 FB | 	rdlong	arg01, local01
113f8     24 A7 B0 FD | 	call	#__system___float_fromuns
113fc     2C 00 90 FD | 	jmp	#LR__1336
11400                 | LR__1332
11400     0F FB 01 FB | 	rdlong	result1, local01
11404     24 00 90 FD | 	jmp	#LR__1336
11408                 | LR__1333
11408     0F 13 02 FB | 	rdlong	arg01, local01
1140c     FC B2 B0 FD | 	call	#__system____builtin_atof
11410     18 00 90 FD | 	jmp	#LR__1336
11414                 | LR__1334
11414     0F 13 02 FB | 	rdlong	arg01, local01
11418     98 BA BF FD | 	call	#_convertstring
1141c     FD 12 02 F6 | 	mov	arg01, result1
11420     E8 B2 B0 FD | 	call	#__system____builtin_atof
11424     04 00 90 FD | 	jmp	#LR__1336
11428                 | LR__1335
11428     00 FA 05 F6 | 	mov	result1, #0
1142c                 | LR__1336
1142c     A7 F0 03 F6 | 	mov	ptra, fp
11430     B2 00 A0 FD | 	call	#popregs_
11434                 | _converttofloat_ret
11434     2D 00 64 FD | 	ret
11438                 | 
11438                 | ' 
11438                 | ' sub do_rnd
11438                 | _do_rnd
11438     01 4A 05 F6 | 	mov	COUNT_, #1
1143c     A8 00 A0 FD | 	call	#pushregs_
11440     10 F0 07 F1 | 	add	ptra, #16
11444     69 00 00 FF 
11448     44 E5 05 F1 | 	add	objptr, ##54084
1144c     F2 1E 02 FB | 	rdlong	local01, objptr
11450     0F 17 02 F6 | 	mov	arg03, local01
11454     01 16 66 F0 | 	shl	arg03, #1
11458     0F 17 02 F1 | 	add	arg03, local01
1145c     02 16 66 F0 | 	shl	arg03, #2
11460     03 00 00 FF 
11464     04 E4 85 F1 | 	sub	objptr, ##1540
11468     F2 16 02 F1 | 	add	arg03, objptr
1146c     0B 17 02 FB | 	rdlong	arg03, arg03
11470     0C 4E 05 F1 | 	add	fp, #12
11474     A7 16 62 FC | 	wrlong	arg03, fp
11478                 | ' 
11478                 | ' numpar=compiledline(lineptr_e).result.uresult
11478                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
11478     0C 4E 85 F1 | 	sub	fp, #12
1147c     02 16 16 F2 | 	cmp	arg03, #2 wc
11480     66 00 00 FF 
11484     40 E5 85 F1 | 	sub	objptr, ##52544
11488     3C 00 90 CD |  if_b	jmp	#LR__1340
1148c     00 12 06 F6 | 	mov	arg01, #0
11490     A8 D8 B0 FD | 	call	#__system___getiolock_0425
11494     FD 12 02 F6 | 	mov	arg01, result1
11498     9C 7F B0 FD | 	call	#__system___lockmem
1149c     47 01 00 FF 
114a0     DB 14 06 F6 | 	mov	arg02, ##@LR__4617
114a4     00 12 06 F6 | 	mov	arg01, #0
114a8     00 16 06 F6 | 	mov	arg03, #0
114ac     7C 8C B0 FD | 	call	#__system___basic_print_string
114b0     00 12 06 F6 | 	mov	arg01, #0
114b4     84 D8 B0 FD | 	call	#__system___getiolock_0425
114b8     FD 00 68 FC | 	wrlong	#0, result1
114bc     27 12 06 F6 | 	mov	arg01, #39
114c0     B8 49 B0 FD | 	call	#_printerror
114c4     2C 01 90 FD | 	jmp	#LR__1347
114c8                 | LR__1340
114c8                 | ' if numpar=0 then
114c8     0C 4E 05 F1 | 	add	fp, #12
114cc     A7 FE 09 FB | 	rdlong	result3, fp wz
114d0     0C 4E 85 F1 | 	sub	fp, #12
114d4     20 00 90 5D |  if_ne	jmp	#LR__1341
114d8     08 4E 05 F1 | 	add	fp, #8
114dc     A7 3A 68 FC | 	wrlong	#29, fp
114e0     08 4E 85 F1 | 	sub	fp, #8
114e4     1B FA 61 FD | 	getrnd	result1
114e8     A7 FA 61 FC | 	wrlong	result1, fp
114ec     A7 12 02 F6 | 	mov	arg01, fp
114f0     DC 84 BF FD | 	call	#_push
114f4     FC 00 90 FD | 	jmp	#LR__1346
114f8                 | LR__1341
114f8     3C 84 BF FD | 	call	#_pop
114fc     A7 FA 61 FC | 	wrlong	result1, fp
11500     04 4E 05 F1 | 	add	fp, #4
11504     A7 FC 61 FC | 	wrlong	result2, fp
11508     04 4E 05 F1 | 	add	fp, #4
1150c     A7 FE 61 FC | 	wrlong	result3, fp
11510                 | '   t1=pop()
11510                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
11510     08 4E 85 F1 | 	sub	fp, #8
11514     1C FE 0D F2 | 	cmp	result3, #28 wz
11518     08 4E 05 51 |  if_ne	add	fp, #8
1151c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11520     08 4E 85 51 |  if_ne	sub	fp, #8
11524     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11528     2C 00 90 5D |  if_ne	jmp	#LR__1342
1152c     1B FA 61 FD | 	getrnd	result1
11530     A7 1E 02 FB | 	rdlong	local01, fp
11534     0F FB 11 FD | 	qdiv	result1, local01
11538     A7 12 02 F6 | 	mov	arg01, fp
1153c     19 1E 62 FD | 	getqy	local01
11540     A7 1E 62 FC | 	wrlong	local01, fp
11544     08 4E 05 F1 | 	add	fp, #8
11548     A7 3A 68 FC | 	wrlong	#29, fp
1154c     08 4E 85 F1 | 	sub	fp, #8
11550     7C 84 BF FD | 	call	#_push
11554     9C 00 90 FD | 	jmp	#LR__1345
11558                 | LR__1342
11558     08 4E 05 F1 | 	add	fp, #8
1155c     A7 1E 02 FB | 	rdlong	local01, fp
11560     08 4E 85 F1 | 	sub	fp, #8
11564     1E 1E 0E F2 | 	cmp	local01, #30 wz
11568     48 00 90 5D |  if_ne	jmp	#LR__1343
1156c     A7 12 02 FB | 	rdlong	arg01, fp
11570     00 C0 24 FF 
11574     00 14 06 F6 | 	mov	arg02, ##1233125376
11578     AC AB B0 FD | 	call	#__system___float_div
1157c     FD 1E 02 F6 | 	mov	local01, result1
11580     1B 12 62 FD | 	getrnd	arg01
11584     74 13 06 F4 | 	bitl	arg01, #372
11588     94 A5 B0 FD | 	call	#__system___float_fromuns
1158c     FD 14 02 F6 | 	mov	arg02, result1
11590     0F 13 02 F6 | 	mov	arg01, local01
11594     8C A9 B0 FD | 	call	#__system___float_mul
11598     A7 FA 61 FC | 	wrlong	result1, fp
1159c     08 4E 05 F1 | 	add	fp, #8
115a0     A7 3C 68 FC | 	wrlong	#30, fp
115a4     08 4E 85 F1 | 	sub	fp, #8
115a8     A7 12 02 F6 | 	mov	arg01, fp
115ac     20 84 BF FD | 	call	#_push
115b0     40 00 90 FD | 	jmp	#LR__1344
115b4                 | LR__1343
115b4                 | '     print "rnd: "; : printerror(40) 
115b4     00 12 06 F6 | 	mov	arg01, #0
115b8     80 D7 B0 FD | 	call	#__system___getiolock_0425
115bc     FD 12 02 F6 | 	mov	arg01, result1
115c0     74 7E B0 FD | 	call	#__system___lockmem
115c4     47 01 00 FF 
115c8     E1 14 06 F6 | 	mov	arg02, ##@LR__4618
115cc     00 12 06 F6 | 	mov	arg01, #0
115d0     00 16 06 F6 | 	mov	arg03, #0
115d4     54 8B B0 FD | 	call	#__system___basic_print_string
115d8     00 12 06 F6 | 	mov	arg01, #0
115dc     5C D7 B0 FD | 	call	#__system___getiolock_0425
115e0     FD 00 68 FC | 	wrlong	#0, result1
115e4     28 12 06 F6 | 	mov	arg01, #40
115e8     90 48 B0 FD | 	call	#_printerror
115ec     A7 12 02 F6 | 	mov	arg01, fp
115f0     DC 83 BF FD | 	call	#_push
115f4                 | LR__1344
115f4                 | LR__1345
115f4                 | LR__1346
115f4                 | LR__1347
115f4     A7 F0 03 F6 | 	mov	ptra, fp
115f8     B2 00 A0 FD | 	call	#popregs_
115fc                 | _do_rnd_ret
115fc     2D 00 64 FD | 	ret
11600                 | 
11600                 | ' 
11600                 | ' sub do_sin
11600                 | _do_sin
11600     01 4A 05 F6 | 	mov	COUNT_, #1
11604     A8 00 A0 FD | 	call	#pushregs_
11608     10 F0 07 F1 | 	add	ptra, #16
1160c     69 00 00 FF 
11610     44 E5 05 F1 | 	add	objptr, ##54084
11614     F2 1E 02 FB | 	rdlong	local01, objptr
11618     0F 17 02 F6 | 	mov	arg03, local01
1161c     01 16 66 F0 | 	shl	arg03, #1
11620     0F 17 02 F1 | 	add	arg03, local01
11624     02 16 66 F0 | 	shl	arg03, #2
11628     03 00 00 FF 
1162c     04 E4 85 F1 | 	sub	objptr, ##1540
11630     F2 16 02 F1 | 	add	arg03, objptr
11634     0B 17 02 FB | 	rdlong	arg03, arg03
11638     0C 4E 05 F1 | 	add	fp, #12
1163c     A7 16 62 FC | 	wrlong	arg03, fp
11640                 | ' 
11640                 | ' numpar=compiledline(lineptr_e).result.uresult
11640                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
11640     0C 4E 85 F1 | 	sub	fp, #12
11644     02 16 16 F2 | 	cmp	arg03, #2 wc
11648     66 00 00 FF 
1164c     40 E5 85 F1 | 	sub	objptr, ##52544
11650     0C 4E 05 C1 |  if_b	add	fp, #12
11654     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11658     0C 4E 85 C1 |  if_b	sub	fp, #12
1165c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
11660     00 12 06 F6 | 	mov	arg01, #0
11664     D4 D6 B0 FD | 	call	#__system___getiolock_0425
11668     FD 12 02 F6 | 	mov	arg01, result1
1166c     C8 7D B0 FD | 	call	#__system___lockmem
11670     47 01 00 FF 
11674     E7 14 06 F6 | 	mov	arg02, ##@LR__4619
11678     00 12 06 F6 | 	mov	arg01, #0
1167c     00 16 06 F6 | 	mov	arg03, #0
11680     A8 8A B0 FD | 	call	#__system___basic_print_string
11684     00 12 06 F6 | 	mov	arg01, #0
11688     B0 D6 B0 FD | 	call	#__system___getiolock_0425
1168c     FD 00 68 FC | 	wrlong	#0, result1
11690     27 12 06 F6 | 	mov	arg01, #39
11694     E4 47 B0 FD | 	call	#_printerror
11698     64 00 90 FD | 	jmp	#LR__1351
1169c                 | LR__1350
1169c     98 82 BF FD | 	call	#_pop
116a0     A7 FA 61 FC | 	wrlong	result1, fp
116a4     04 4E 05 F1 | 	add	fp, #4
116a8     A7 FC 61 FC | 	wrlong	result2, fp
116ac     04 4E 05 F1 | 	add	fp, #4
116b0     A7 FE 61 FC | 	wrlong	result3, fp
116b4     08 4E 85 F1 | 	sub	fp, #8
116b8     7A 00 00 FF 
116bc     4C E5 05 F1 | 	add	objptr, ##62796
116c0     F2 1E 02 FB | 	rdlong	local01, objptr
116c4     7A 00 00 FF 
116c8     4C E5 85 F1 | 	sub	objptr, ##62796
116cc     A7 12 02 F6 | 	mov	arg01, fp
116d0     C0 FC BF FD | 	call	#_converttofloat
116d4     FD 14 02 F6 | 	mov	arg02, result1
116d8     0F 13 02 F6 | 	mov	arg01, local01
116dc     44 A8 B0 FD | 	call	#__system___float_mul
116e0     FD 12 02 F6 | 	mov	arg01, result1
116e4     78 B1 B0 FD | 	call	#__system____builtin_sinf
116e8     A7 FA 61 FC | 	wrlong	result1, fp
116ec     08 4E 05 F1 | 	add	fp, #8
116f0     A7 3C 68 FC | 	wrlong	#30, fp
116f4     08 4E 85 F1 | 	sub	fp, #8
116f8     A7 12 02 F6 | 	mov	arg01, fp
116fc     D0 82 BF FD | 	call	#_push
11700                 | LR__1351
11700     A7 F0 03 F6 | 	mov	ptra, fp
11704     B2 00 A0 FD | 	call	#popregs_
11708                 | _do_sin_ret
11708     2D 00 64 FD | 	ret
1170c                 | 
1170c                 | ' 
1170c                 | ' sub do_cos
1170c                 | _do_cos
1170c     01 4A 05 F6 | 	mov	COUNT_, #1
11710     A8 00 A0 FD | 	call	#pushregs_
11714     10 F0 07 F1 | 	add	ptra, #16
11718     69 00 00 FF 
1171c     44 E5 05 F1 | 	add	objptr, ##54084
11720     F2 1E 02 FB | 	rdlong	local01, objptr
11724     0F 17 02 F6 | 	mov	arg03, local01
11728     01 16 66 F0 | 	shl	arg03, #1
1172c     0F 17 02 F1 | 	add	arg03, local01
11730     02 16 66 F0 | 	shl	arg03, #2
11734     03 00 00 FF 
11738     04 E4 85 F1 | 	sub	objptr, ##1540
1173c     F2 16 02 F1 | 	add	arg03, objptr
11740     0B 17 02 FB | 	rdlong	arg03, arg03
11744     0C 4E 05 F1 | 	add	fp, #12
11748     A7 16 62 FC | 	wrlong	arg03, fp
1174c                 | ' 
1174c                 | ' numpar=compiledline(lineptr_e).result.uresult
1174c                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
1174c     0C 4E 85 F1 | 	sub	fp, #12
11750     02 16 16 F2 | 	cmp	arg03, #2 wc
11754     66 00 00 FF 
11758     40 E5 85 F1 | 	sub	objptr, ##52544
1175c     0C 4E 05 C1 |  if_b	add	fp, #12
11760     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11764     0C 4E 85 C1 |  if_b	sub	fp, #12
11768     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
1176c     00 12 06 F6 | 	mov	arg01, #0
11770     C8 D5 B0 FD | 	call	#__system___getiolock_0425
11774     FD 12 02 F6 | 	mov	arg01, result1
11778     BC 7C B0 FD | 	call	#__system___lockmem
1177c     47 01 00 FF 
11780     ED 14 06 F6 | 	mov	arg02, ##@LR__4620
11784     00 12 06 F6 | 	mov	arg01, #0
11788     00 16 06 F6 | 	mov	arg03, #0
1178c     9C 89 B0 FD | 	call	#__system___basic_print_string
11790     00 12 06 F6 | 	mov	arg01, #0
11794     A4 D5 B0 FD | 	call	#__system___getiolock_0425
11798     FD 00 68 FC | 	wrlong	#0, result1
1179c     27 12 06 F6 | 	mov	arg01, #39
117a0     D8 46 B0 FD | 	call	#_printerror
117a4     78 00 90 FD | 	jmp	#LR__1361
117a8                 | LR__1360
117a8     8C 81 BF FD | 	call	#_pop
117ac     A7 FA 61 FC | 	wrlong	result1, fp
117b0     04 4E 05 F1 | 	add	fp, #4
117b4     A7 FC 61 FC | 	wrlong	result2, fp
117b8     04 4E 05 F1 | 	add	fp, #4
117bc     A7 FE 61 FC | 	wrlong	result3, fp
117c0     08 4E 85 F1 | 	sub	fp, #8
117c4     7A 00 00 FF 
117c8     4C E5 05 F1 | 	add	objptr, ##62796
117cc     F2 1E 02 FB | 	rdlong	local01, objptr
117d0     7A 00 00 FF 
117d4     4C E5 85 F1 | 	sub	objptr, ##62796
117d8     A7 12 02 F6 | 	mov	arg01, fp
117dc     B4 FB BF FD | 	call	#_converttofloat
117e0     FD 14 02 F6 | 	mov	arg02, result1
117e4     0F 13 02 F6 | 	mov	arg01, local01
117e8     38 A7 B0 FD | 	call	#__system___float_mul
117ec     FD 14 02 F6 | 	mov	arg02, result1
117f0     87 E4 1F FF 
117f4     DB 13 06 F6 | 	mov	arg01, ##1070141403
117f8     1F 14 E6 F4 | 	bitnot	arg02, #31
117fc     54 A3 B0 FD | 	call	#__system___float_add
11800     FD 12 02 F6 | 	mov	arg01, result1
11804     58 B0 B0 FD | 	call	#__system____builtin_sinf
11808     A7 FA 61 FC | 	wrlong	result1, fp
1180c     08 4E 05 F1 | 	add	fp, #8
11810     A7 3C 68 FC | 	wrlong	#30, fp
11814     08 4E 85 F1 | 	sub	fp, #8
11818     A7 12 02 F6 | 	mov	arg01, fp
1181c     B0 81 BF FD | 	call	#_push
11820                 | LR__1361
11820     A7 F0 03 F6 | 	mov	ptra, fp
11824     B2 00 A0 FD | 	call	#popregs_
11828                 | _do_cos_ret
11828     2D 00 64 FD | 	ret
1182c                 | 
1182c                 | ' 
1182c                 | ' sub do_tan
1182c                 | _do_tan
1182c     01 4A 05 F6 | 	mov	COUNT_, #1
11830     A8 00 A0 FD | 	call	#pushregs_
11834     10 F0 07 F1 | 	add	ptra, #16
11838     69 00 00 FF 
1183c     44 E5 05 F1 | 	add	objptr, ##54084
11840     F2 1E 02 FB | 	rdlong	local01, objptr
11844     0F 17 02 F6 | 	mov	arg03, local01
11848     01 16 66 F0 | 	shl	arg03, #1
1184c     0F 17 02 F1 | 	add	arg03, local01
11850     02 16 66 F0 | 	shl	arg03, #2
11854     03 00 00 FF 
11858     04 E4 85 F1 | 	sub	objptr, ##1540
1185c     F2 16 02 F1 | 	add	arg03, objptr
11860     0B 17 02 FB | 	rdlong	arg03, arg03
11864     0C 4E 05 F1 | 	add	fp, #12
11868     A7 16 62 FC | 	wrlong	arg03, fp
1186c                 | ' 
1186c                 | ' numpar=compiledline(lineptr_e).result.uresult
1186c                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1186c     0C 4E 85 F1 | 	sub	fp, #12
11870     02 16 16 F2 | 	cmp	arg03, #2 wc
11874     66 00 00 FF 
11878     40 E5 85 F1 | 	sub	objptr, ##52544
1187c     0C 4E 05 C1 |  if_b	add	fp, #12
11880     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11884     0C 4E 85 C1 |  if_b	sub	fp, #12
11888     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
1188c     00 12 06 F6 | 	mov	arg01, #0
11890     A8 D4 B0 FD | 	call	#__system___getiolock_0425
11894     FD 12 02 F6 | 	mov	arg01, result1
11898     9C 7B B0 FD | 	call	#__system___lockmem
1189c     47 01 00 FF 
118a0     F3 14 06 F6 | 	mov	arg02, ##@LR__4621
118a4     00 12 06 F6 | 	mov	arg01, #0
118a8     00 16 06 F6 | 	mov	arg03, #0
118ac     7C 88 B0 FD | 	call	#__system___basic_print_string
118b0     00 12 06 F6 | 	mov	arg01, #0
118b4     84 D4 B0 FD | 	call	#__system___getiolock_0425
118b8     FD 00 68 FC | 	wrlong	#0, result1
118bc     27 12 06 F6 | 	mov	arg01, #39
118c0     B8 45 B0 FD | 	call	#_printerror
118c4     64 00 90 FD | 	jmp	#LR__1371
118c8                 | LR__1370
118c8     6C 80 BF FD | 	call	#_pop
118cc     A7 FA 61 FC | 	wrlong	result1, fp
118d0     04 4E 05 F1 | 	add	fp, #4
118d4     A7 FC 61 FC | 	wrlong	result2, fp
118d8     04 4E 05 F1 | 	add	fp, #4
118dc     A7 FE 61 FC | 	wrlong	result3, fp
118e0     08 4E 85 F1 | 	sub	fp, #8
118e4     7A 00 00 FF 
118e8     4C E5 05 F1 | 	add	objptr, ##62796
118ec     F2 1E 02 FB | 	rdlong	local01, objptr
118f0     7A 00 00 FF 
118f4     4C E5 85 F1 | 	sub	objptr, ##62796
118f8     A7 12 02 F6 | 	mov	arg01, fp
118fc     94 FA BF FD | 	call	#_converttofloat
11900     FD 14 02 F6 | 	mov	arg02, result1
11904     0F 13 02 F6 | 	mov	arg01, local01
11908     18 A6 B0 FD | 	call	#__system___float_mul
1190c     FD 12 02 F6 | 	mov	arg01, result1
11910     98 B0 B0 FD | 	call	#__system____builtin_tanf
11914     A7 FA 61 FC | 	wrlong	result1, fp
11918     08 4E 05 F1 | 	add	fp, #8
1191c     A7 3C 68 FC | 	wrlong	#30, fp
11920     08 4E 85 F1 | 	sub	fp, #8
11924     A7 12 02 F6 | 	mov	arg01, fp
11928     A4 80 BF FD | 	call	#_push
1192c                 | LR__1371
1192c     A7 F0 03 F6 | 	mov	ptra, fp
11930     B2 00 A0 FD | 	call	#popregs_
11934                 | _do_tan_ret
11934     2D 00 64 FD | 	ret
11938                 | 
11938                 | ' 
11938                 | ' sub do_asin
11938                 | _do_asin
11938     01 4A 05 F6 | 	mov	COUNT_, #1
1193c     A8 00 A0 FD | 	call	#pushregs_
11940     10 F0 07 F1 | 	add	ptra, #16
11944     69 00 00 FF 
11948     44 E5 05 F1 | 	add	objptr, ##54084
1194c     F2 1E 02 FB | 	rdlong	local01, objptr
11950     0F 17 02 F6 | 	mov	arg03, local01
11954     01 16 66 F0 | 	shl	arg03, #1
11958     0F 17 02 F1 | 	add	arg03, local01
1195c     02 16 66 F0 | 	shl	arg03, #2
11960     03 00 00 FF 
11964     04 E4 85 F1 | 	sub	objptr, ##1540
11968     F2 16 02 F1 | 	add	arg03, objptr
1196c     0B 17 02 FB | 	rdlong	arg03, arg03
11970     0C 4E 05 F1 | 	add	fp, #12
11974     A7 16 62 FC | 	wrlong	arg03, fp
11978                 | ' 
11978                 | ' numpar=compiledline(lineptr_e).result.uresult
11978                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
11978     0C 4E 85 F1 | 	sub	fp, #12
1197c     02 16 16 F2 | 	cmp	arg03, #2 wc
11980     66 00 00 FF 
11984     40 E5 85 F1 | 	sub	objptr, ##52544
11988     0C 4E 05 C1 |  if_b	add	fp, #12
1198c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11990     0C 4E 85 C1 |  if_b	sub	fp, #12
11994     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
11998     00 12 06 F6 | 	mov	arg01, #0
1199c     9C D3 B0 FD | 	call	#__system___getiolock_0425
119a0     FD 12 02 F6 | 	mov	arg01, result1
119a4     90 7A B0 FD | 	call	#__system___lockmem
119a8     47 01 00 FF 
119ac     F9 14 06 F6 | 	mov	arg02, ##@LR__4622
119b0     00 12 06 F6 | 	mov	arg01, #0
119b4     00 16 06 F6 | 	mov	arg03, #0
119b8     70 87 B0 FD | 	call	#__system___basic_print_string
119bc     00 12 06 F6 | 	mov	arg01, #0
119c0     78 D3 B0 FD | 	call	#__system___getiolock_0425
119c4     FD 00 68 FC | 	wrlong	#0, result1
119c8     27 12 06 F6 | 	mov	arg01, #39
119cc     AC 44 B0 FD | 	call	#_printerror
119d0     64 00 90 FD | 	jmp	#LR__1381
119d4                 | LR__1380
119d4     60 7F BF FD | 	call	#_pop
119d8     FF 1E 02 F6 | 	mov	local01, result3
119dc     A7 FA 61 FC | 	wrlong	result1, fp
119e0     04 4E 05 F1 | 	add	fp, #4
119e4     A7 FC 61 FC | 	wrlong	result2, fp
119e8     04 4E 05 F1 | 	add	fp, #4
119ec     A7 1E 62 FC | 	wrlong	local01, fp
119f0     08 4E 85 F1 | 	sub	fp, #8
119f4     A7 12 02 F6 | 	mov	arg01, fp
119f8     98 F9 BF FD | 	call	#_converttofloat
119fc     FD 12 02 F6 | 	mov	arg01, result1
11a00     F0 AF B0 FD | 	call	#__system____builtin_asinf
11a04     FD 12 02 F6 | 	mov	arg01, result1
11a08     7A 00 00 FF 
11a0c     50 E5 05 F1 | 	add	objptr, ##62800
11a10     F2 14 02 FB | 	rdlong	arg02, objptr
11a14     7A 00 00 FF 
11a18     50 E5 85 F1 | 	sub	objptr, ##62800
11a1c     04 A5 B0 FD | 	call	#__system___float_mul
11a20     A7 FA 61 FC | 	wrlong	result1, fp
11a24     08 4E 05 F1 | 	add	fp, #8
11a28     A7 3C 68 FC | 	wrlong	#30, fp
11a2c     08 4E 85 F1 | 	sub	fp, #8
11a30     A7 12 02 F6 | 	mov	arg01, fp
11a34     98 7F BF FD | 	call	#_push
11a38                 | LR__1381
11a38     A7 F0 03 F6 | 	mov	ptra, fp
11a3c     B2 00 A0 FD | 	call	#popregs_
11a40                 | _do_asin_ret
11a40     2D 00 64 FD | 	ret
11a44                 | 
11a44                 | ' 
11a44                 | ' sub do_acos
11a44                 | _do_acos
11a44     01 4A 05 F6 | 	mov	COUNT_, #1
11a48     A8 00 A0 FD | 	call	#pushregs_
11a4c     10 F0 07 F1 | 	add	ptra, #16
11a50     69 00 00 FF 
11a54     44 E5 05 F1 | 	add	objptr, ##54084
11a58     F2 1E 02 FB | 	rdlong	local01, objptr
11a5c     0F 17 02 F6 | 	mov	arg03, local01
11a60     01 16 66 F0 | 	shl	arg03, #1
11a64     0F 17 02 F1 | 	add	arg03, local01
11a68     02 16 66 F0 | 	shl	arg03, #2
11a6c     03 00 00 FF 
11a70     04 E4 85 F1 | 	sub	objptr, ##1540
11a74     F2 16 02 F1 | 	add	arg03, objptr
11a78     0B 17 02 FB | 	rdlong	arg03, arg03
11a7c     0C 4E 05 F1 | 	add	fp, #12
11a80     A7 16 62 FC | 	wrlong	arg03, fp
11a84                 | ' 
11a84                 | ' numpar=compiledline(lineptr_e).result.uresult
11a84                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
11a84     0C 4E 85 F1 | 	sub	fp, #12
11a88     02 16 16 F2 | 	cmp	arg03, #2 wc
11a8c     66 00 00 FF 
11a90     40 E5 85 F1 | 	sub	objptr, ##52544
11a94     0C 4E 05 C1 |  if_b	add	fp, #12
11a98     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11a9c     0C 4E 85 C1 |  if_b	sub	fp, #12
11aa0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
11aa4     00 12 06 F6 | 	mov	arg01, #0
11aa8     90 D2 B0 FD | 	call	#__system___getiolock_0425
11aac     FD 12 02 F6 | 	mov	arg01, result1
11ab0     84 79 B0 FD | 	call	#__system___lockmem
11ab4     47 01 00 FF 
11ab8     00 15 06 F6 | 	mov	arg02, ##@LR__4623
11abc     00 12 06 F6 | 	mov	arg01, #0
11ac0     00 16 06 F6 | 	mov	arg03, #0
11ac4     64 86 B0 FD | 	call	#__system___basic_print_string
11ac8     00 12 06 F6 | 	mov	arg01, #0
11acc     6C D2 B0 FD | 	call	#__system___getiolock_0425
11ad0     FD 00 68 FC | 	wrlong	#0, result1
11ad4     27 12 06 F6 | 	mov	arg01, #39
11ad8     A0 43 B0 FD | 	call	#_printerror
11adc     64 00 90 FD | 	jmp	#LR__1391
11ae0                 | LR__1390
11ae0     54 7E BF FD | 	call	#_pop
11ae4     FF 1E 02 F6 | 	mov	local01, result3
11ae8     A7 FA 61 FC | 	wrlong	result1, fp
11aec     04 4E 05 F1 | 	add	fp, #4
11af0     A7 FC 61 FC | 	wrlong	result2, fp
11af4     04 4E 05 F1 | 	add	fp, #4
11af8     A7 1E 62 FC | 	wrlong	local01, fp
11afc     08 4E 85 F1 | 	sub	fp, #8
11b00     A7 12 02 F6 | 	mov	arg01, fp
11b04     8C F8 BF FD | 	call	#_converttofloat
11b08     FD 12 02 F6 | 	mov	arg01, result1
11b0c     30 AF B0 FD | 	call	#__system____builtin_acosf
11b10     FD 12 02 F6 | 	mov	arg01, result1
11b14     7A 00 00 FF 
11b18     50 E5 05 F1 | 	add	objptr, ##62800
11b1c     F2 14 02 FB | 	rdlong	arg02, objptr
11b20     7A 00 00 FF 
11b24     50 E5 85 F1 | 	sub	objptr, ##62800
11b28     F8 A3 B0 FD | 	call	#__system___float_mul
11b2c     A7 FA 61 FC | 	wrlong	result1, fp
11b30     08 4E 05 F1 | 	add	fp, #8
11b34     A7 3C 68 FC | 	wrlong	#30, fp
11b38     08 4E 85 F1 | 	sub	fp, #8
11b3c     A7 12 02 F6 | 	mov	arg01, fp
11b40     8C 7E BF FD | 	call	#_push
11b44                 | LR__1391
11b44     A7 F0 03 F6 | 	mov	ptra, fp
11b48     B2 00 A0 FD | 	call	#popregs_
11b4c                 | _do_acos_ret
11b4c     2D 00 64 FD | 	ret
11b50                 | 
11b50                 | ' 
11b50                 | ' sub do_atn
11b50                 | _do_atn
11b50     01 4A 05 F6 | 	mov	COUNT_, #1
11b54     A8 00 A0 FD | 	call	#pushregs_
11b58     10 F0 07 F1 | 	add	ptra, #16
11b5c     69 00 00 FF 
11b60     44 E5 05 F1 | 	add	objptr, ##54084
11b64     F2 1E 02 FB | 	rdlong	local01, objptr
11b68     0F 17 02 F6 | 	mov	arg03, local01
11b6c     01 16 66 F0 | 	shl	arg03, #1
11b70     0F 17 02 F1 | 	add	arg03, local01
11b74     02 16 66 F0 | 	shl	arg03, #2
11b78     03 00 00 FF 
11b7c     04 E4 85 F1 | 	sub	objptr, ##1540
11b80     F2 16 02 F1 | 	add	arg03, objptr
11b84     0B 17 02 FB | 	rdlong	arg03, arg03
11b88     0C 4E 05 F1 | 	add	fp, #12
11b8c     A7 16 62 FC | 	wrlong	arg03, fp
11b90                 | ' 
11b90                 | ' numpar=compiledline(lineptr_e).result.uresult
11b90                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
11b90     0C 4E 85 F1 | 	sub	fp, #12
11b94     02 16 16 F2 | 	cmp	arg03, #2 wc
11b98     66 00 00 FF 
11b9c     40 E5 85 F1 | 	sub	objptr, ##52544
11ba0     0C 4E 05 C1 |  if_b	add	fp, #12
11ba4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11ba8     0C 4E 85 C1 |  if_b	sub	fp, #12
11bac     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1400
11bb0     00 12 06 F6 | 	mov	arg01, #0
11bb4     84 D1 B0 FD | 	call	#__system___getiolock_0425
11bb8     FD 12 02 F6 | 	mov	arg01, result1
11bbc     78 78 B0 FD | 	call	#__system___lockmem
11bc0     47 01 00 FF 
11bc4     07 15 06 F6 | 	mov	arg02, ##@LR__4624
11bc8     00 12 06 F6 | 	mov	arg01, #0
11bcc     00 16 06 F6 | 	mov	arg03, #0
11bd0     58 85 B0 FD | 	call	#__system___basic_print_string
11bd4     00 12 06 F6 | 	mov	arg01, #0
11bd8     60 D1 B0 FD | 	call	#__system___getiolock_0425
11bdc     FD 00 68 FC | 	wrlong	#0, result1
11be0     27 12 06 F6 | 	mov	arg01, #39
11be4     94 42 B0 FD | 	call	#_printerror
11be8     6C 00 90 FD | 	jmp	#LR__1401
11bec                 | LR__1400
11bec     48 7D BF FD | 	call	#_pop
11bf0     FF 1E 02 F6 | 	mov	local01, result3
11bf4     A7 FA 61 FC | 	wrlong	result1, fp
11bf8     04 4E 05 F1 | 	add	fp, #4
11bfc     A7 FC 61 FC | 	wrlong	result2, fp
11c00     04 4E 05 F1 | 	add	fp, #4
11c04     A7 1E 62 FC | 	wrlong	local01, fp
11c08     08 4E 85 F1 | 	sub	fp, #8
11c0c     A7 12 02 F6 | 	mov	arg01, fp
11c10     80 F7 BF FD | 	call	#_converttofloat
11c14     FD 12 02 F6 | 	mov	arg01, result1
11c18     00 C0 1F FF 
11c1c     00 14 06 F6 | 	mov	arg02, ##1065353216
11c20     68 AE B0 FD | 	call	#__system____builtin_atan2f
11c24     FD 12 02 F6 | 	mov	arg01, result1
11c28     7A 00 00 FF 
11c2c     50 E5 05 F1 | 	add	objptr, ##62800
11c30     F2 14 02 FB | 	rdlong	arg02, objptr
11c34     7A 00 00 FF 
11c38     50 E5 85 F1 | 	sub	objptr, ##62800
11c3c     E4 A2 B0 FD | 	call	#__system___float_mul
11c40     A7 FA 61 FC | 	wrlong	result1, fp
11c44     08 4E 05 F1 | 	add	fp, #8
11c48     A7 3C 68 FC | 	wrlong	#30, fp
11c4c     08 4E 85 F1 | 	sub	fp, #8
11c50     A7 12 02 F6 | 	mov	arg01, fp
11c54     78 7D BF FD | 	call	#_push
11c58                 | LR__1401
11c58     A7 F0 03 F6 | 	mov	ptra, fp
11c5c     B2 00 A0 FD | 	call	#popregs_
11c60                 | _do_atn_ret
11c60     2D 00 64 FD | 	ret
11c64                 | 
11c64                 | ' 
11c64                 | ' sub do_sqr
11c64                 | _do_sqr
11c64     01 4A 05 F6 | 	mov	COUNT_, #1
11c68     A8 00 A0 FD | 	call	#pushregs_
11c6c     10 F0 07 F1 | 	add	ptra, #16
11c70     69 00 00 FF 
11c74     44 E5 05 F1 | 	add	objptr, ##54084
11c78     F2 1E 02 FB | 	rdlong	local01, objptr
11c7c     0F 17 02 F6 | 	mov	arg03, local01
11c80     01 16 66 F0 | 	shl	arg03, #1
11c84     0F 17 02 F1 | 	add	arg03, local01
11c88     02 16 66 F0 | 	shl	arg03, #2
11c8c     03 00 00 FF 
11c90     04 E4 85 F1 | 	sub	objptr, ##1540
11c94     F2 16 02 F1 | 	add	arg03, objptr
11c98     0B 17 02 FB | 	rdlong	arg03, arg03
11c9c     0C 4E 05 F1 | 	add	fp, #12
11ca0     A7 16 62 FC | 	wrlong	arg03, fp
11ca4                 | ' 
11ca4                 | ' numpar=compiledline(lineptr_e).result.uresult
11ca4                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
11ca4     0C 4E 85 F1 | 	sub	fp, #12
11ca8     02 16 16 F2 | 	cmp	arg03, #2 wc
11cac     66 00 00 FF 
11cb0     40 E5 85 F1 | 	sub	objptr, ##52544
11cb4     0C 4E 05 C1 |  if_b	add	fp, #12
11cb8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11cbc     0C 4E 85 C1 |  if_b	sub	fp, #12
11cc0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1410
11cc4     00 12 06 F6 | 	mov	arg01, #0
11cc8     70 D0 B0 FD | 	call	#__system___getiolock_0425
11ccc     FD 12 02 F6 | 	mov	arg01, result1
11cd0     64 77 B0 FD | 	call	#__system___lockmem
11cd4     47 01 00 FF 
11cd8     0D 15 06 F6 | 	mov	arg02, ##@LR__4625
11cdc     00 12 06 F6 | 	mov	arg01, #0
11ce0     00 16 06 F6 | 	mov	arg03, #0
11ce4     44 84 B0 FD | 	call	#__system___basic_print_string
11ce8     00 12 06 F6 | 	mov	arg01, #0
11cec     4C D0 B0 FD | 	call	#__system___getiolock_0425
11cf0     FD 00 68 FC | 	wrlong	#0, result1
11cf4     27 12 06 F6 | 	mov	arg01, #39
11cf8     80 41 B0 FD | 	call	#_printerror
11cfc     48 00 90 FD | 	jmp	#LR__1411
11d00                 | LR__1410
11d00     34 7C BF FD | 	call	#_pop
11d04     FF 1E 02 F6 | 	mov	local01, result3
11d08     A7 FA 61 FC | 	wrlong	result1, fp
11d0c     04 4E 05 F1 | 	add	fp, #4
11d10     A7 FC 61 FC | 	wrlong	result2, fp
11d14     04 4E 05 F1 | 	add	fp, #4
11d18     A7 1E 62 FC | 	wrlong	local01, fp
11d1c     08 4E 85 F1 | 	sub	fp, #8
11d20     A7 12 02 F6 | 	mov	arg01, fp
11d24     6C F6 BF FD | 	call	#_converttofloat
11d28     FD 12 02 F6 | 	mov	arg01, result1
11d2c     1C A1 B0 FD | 	call	#__system___float_sqrt
11d30     A7 FA 61 FC | 	wrlong	result1, fp
11d34     08 4E 05 F1 | 	add	fp, #8
11d38     A7 3C 68 FC | 	wrlong	#30, fp
11d3c     08 4E 85 F1 | 	sub	fp, #8
11d40     A7 12 02 F6 | 	mov	arg01, fp
11d44     88 7C BF FD | 	call	#_push
11d48                 | LR__1411
11d48     A7 F0 03 F6 | 	mov	ptra, fp
11d4c     B2 00 A0 FD | 	call	#popregs_
11d50                 | _do_sqr_ret
11d50     2D 00 64 FD | 	ret
11d54                 | 
11d54                 | ' 
11d54                 | ' sub do_stick
11d54                 | _do_stick
11d54     01 4A 05 F6 | 	mov	COUNT_, #1
11d58     A8 00 A0 FD | 	call	#pushregs_
11d5c     10 F0 07 F1 | 	add	ptra, #16
11d60     69 00 00 FF 
11d64     44 E5 05 F1 | 	add	objptr, ##54084
11d68     F2 1E 02 FB | 	rdlong	local01, objptr
11d6c     0F 17 02 F6 | 	mov	arg03, local01
11d70     01 16 66 F0 | 	shl	arg03, #1
11d74     0F 17 02 F1 | 	add	arg03, local01
11d78     02 16 66 F0 | 	shl	arg03, #2
11d7c     03 00 00 FF 
11d80     04 E4 85 F1 | 	sub	objptr, ##1540
11d84     F2 16 02 F1 | 	add	arg03, objptr
11d88     0B 17 02 FB | 	rdlong	arg03, arg03
11d8c     0C 4E 05 F1 | 	add	fp, #12
11d90     A7 16 62 FC | 	wrlong	arg03, fp
11d94                 | ' 
11d94                 | ' numpar=compiledline(lineptr_e).result.uresult
11d94                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
11d94     0C 4E 85 F1 | 	sub	fp, #12
11d98     02 16 16 F2 | 	cmp	arg03, #2 wc
11d9c     66 00 00 FF 
11da0     40 E5 85 F1 | 	sub	objptr, ##52544
11da4     3C 00 90 CD |  if_b	jmp	#LR__1420
11da8     00 12 06 F6 | 	mov	arg01, #0
11dac     8C CF B0 FD | 	call	#__system___getiolock_0425
11db0     FD 12 02 F6 | 	mov	arg01, result1
11db4     80 76 B0 FD | 	call	#__system___lockmem
11db8     47 01 00 FF 
11dbc     13 15 06 F6 | 	mov	arg02, ##@LR__4626
11dc0     00 12 06 F6 | 	mov	arg01, #0
11dc4     00 16 06 F6 | 	mov	arg03, #0
11dc8     60 83 B0 FD | 	call	#__system___basic_print_string
11dcc     00 12 06 F6 | 	mov	arg01, #0
11dd0     68 CF B0 FD | 	call	#__system___getiolock_0425
11dd4     FD 00 68 FC | 	wrlong	#0, result1
11dd8     27 12 06 F6 | 	mov	arg01, #39
11ddc     9C 40 B0 FD | 	call	#_printerror
11de0     E8 00 90 FD | 	jmp	#LR__1424
11de4                 | LR__1420
11de4                 | ' 
11de4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
11de4     0C 4E 05 F1 | 	add	fp, #12
11de8     A7 FE 09 FB | 	rdlong	result3, fp wz
11dec     0C 4E 85 F1 | 	sub	fp, #12
11df0     30 00 90 5D |  if_ne	jmp	#LR__1421
11df4     7A 00 00 FF 
11df8     C0 E4 05 F1 | 	add	objptr, ##62656
11dfc     F2 1E 02 FB | 	rdlong	local01, objptr
11e00     7A 00 00 FF 
11e04     C0 E4 85 F1 | 	sub	objptr, ##62656
11e08     A7 1E 62 FC | 	wrlong	local01, fp
11e0c     08 4E 05 F1 | 	add	fp, #8
11e10     A7 3A 68 FC | 	wrlong	#29, fp
11e14     08 4E 85 F1 | 	sub	fp, #8
11e18     A7 12 02 F6 | 	mov	arg01, fp
11e1c     B0 7B BF FD | 	call	#_push
11e20     A8 00 90 FD | 	jmp	#LR__1424
11e24                 | LR__1421
11e24     10 7B BF FD | 	call	#_pop
11e28     A7 FA 61 FC | 	wrlong	result1, fp
11e2c     04 4E 05 F1 | 	add	fp, #4
11e30     A7 FC 61 FC | 	wrlong	result2, fp
11e34     04 4E 05 F1 | 	add	fp, #4
11e38     A7 FE 61 FC | 	wrlong	result3, fp
11e3c                 | ' 
11e3c                 | ' t1=pop()
11e3c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11e3c     08 4E 85 F1 | 	sub	fp, #8
11e40     1C FE 0D F2 | 	cmp	result3, #28 wz
11e44     08 4E 05 51 |  if_ne	add	fp, #8
11e48     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11e4c     08 4E 85 51 |  if_ne	sub	fp, #8
11e50     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11e54     6C 00 90 5D |  if_ne	jmp	#LR__1423
11e58     A7 1E 02 FB | 	rdlong	local01, fp
11e5c     7A 00 00 FF 
11e60     98 E5 05 F1 | 	add	objptr, ##62872
11e64     F2 1E 62 FC | 	wrlong	local01, objptr
11e68                 | '   q=t1.result.uresult
11e68                 | '   if q<7 then 
11e68     7A 00 00 FF 
11e6c     98 E5 85 F1 | 	sub	objptr, ##62872
11e70     07 1E 56 F2 | 	cmps	local01, #7 wc
11e74     40 00 90 3D |  if_ae	jmp	#LR__1422
11e78     7A 00 00 FF 
11e7c     98 E5 05 F1 | 	add	objptr, ##62872
11e80     F2 1E 02 FB | 	rdlong	local01, objptr
11e84     02 1E 66 F0 | 	shl	local01, #2
11e88     D8 E4 85 F1 | 	sub	objptr, #216
11e8c     F2 1E 02 F1 | 	add	local01, objptr
11e90     0F 1F 02 FB | 	rdlong	local01, local01
11e94     A7 1E 62 FC | 	wrlong	local01, fp
11e98     08 4E 05 F1 | 	add	fp, #8
11e9c     A7 3A 68 FC | 	wrlong	#29, fp
11ea0     08 4E 85 F1 | 	sub	fp, #8
11ea4     A7 12 02 F6 | 	mov	arg01, fp
11ea8     7A 00 00 FF 
11eac     C0 E4 85 F1 | 	sub	objptr, ##62656
11eb0     1C 7B BF FD | 	call	#_push
11eb4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
11eb4     14 00 90 FD | 	jmp	#LR__1424
11eb8                 | LR__1422
11eb8     29 12 06 F6 | 	mov	arg01, #41
11ebc     BC 3F B0 FD | 	call	#_printerror
11ec0                 | '      printerror(41) : return
11ec0     08 00 90 FD | 	jmp	#LR__1424
11ec4                 | LR__1423
11ec4     29 12 06 F6 | 	mov	arg01, #41
11ec8     B0 3F B0 FD | 	call	#_printerror
11ecc                 | LR__1424
11ecc     A7 F0 03 F6 | 	mov	ptra, fp
11ed0     B2 00 A0 FD | 	call	#popregs_
11ed4                 | _do_stick_ret
11ed4     2D 00 64 FD | 	ret
11ed8                 | 
11ed8                 | ' 
11ed8                 | ' sub do_strig
11ed8                 | _do_strig
11ed8     01 4A 05 F6 | 	mov	COUNT_, #1
11edc     A8 00 A0 FD | 	call	#pushregs_
11ee0     10 F0 07 F1 | 	add	ptra, #16
11ee4     69 00 00 FF 
11ee8     44 E5 05 F1 | 	add	objptr, ##54084
11eec     F2 1E 02 FB | 	rdlong	local01, objptr
11ef0     0F 17 02 F6 | 	mov	arg03, local01
11ef4     01 16 66 F0 | 	shl	arg03, #1
11ef8     0F 17 02 F1 | 	add	arg03, local01
11efc     02 16 66 F0 | 	shl	arg03, #2
11f00     03 00 00 FF 
11f04     04 E4 85 F1 | 	sub	objptr, ##1540
11f08     F2 16 02 F1 | 	add	arg03, objptr
11f0c     0B 17 02 FB | 	rdlong	arg03, arg03
11f10     0C 4E 05 F1 | 	add	fp, #12
11f14     A7 16 62 FC | 	wrlong	arg03, fp
11f18                 | ' 
11f18                 | ' numpar=compiledline(lineptr_e).result.uresult
11f18                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
11f18     0C 4E 85 F1 | 	sub	fp, #12
11f1c     02 16 16 F2 | 	cmp	arg03, #2 wc
11f20     66 00 00 FF 
11f24     40 E5 85 F1 | 	sub	objptr, ##52544
11f28     3C 00 90 CD |  if_b	jmp	#LR__1430
11f2c     00 12 06 F6 | 	mov	arg01, #0
11f30     08 CE B0 FD | 	call	#__system___getiolock_0425
11f34     FD 12 02 F6 | 	mov	arg01, result1
11f38     FC 74 B0 FD | 	call	#__system___lockmem
11f3c     47 01 00 FF 
11f40     1B 15 06 F6 | 	mov	arg02, ##@LR__4627
11f44     00 12 06 F6 | 	mov	arg01, #0
11f48     00 16 06 F6 | 	mov	arg03, #0
11f4c     DC 81 B0 FD | 	call	#__system___basic_print_string
11f50     00 12 06 F6 | 	mov	arg01, #0
11f54     E4 CD B0 FD | 	call	#__system___getiolock_0425
11f58     FD 00 68 FC | 	wrlong	#0, result1
11f5c     27 12 06 F6 | 	mov	arg01, #39
11f60     18 3F B0 FD | 	call	#_printerror
11f64     E8 00 90 FD | 	jmp	#LR__1434
11f68                 | LR__1430
11f68                 | ' 
11f68                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
11f68     0C 4E 05 F1 | 	add	fp, #12
11f6c     A7 FE 09 FB | 	rdlong	result3, fp wz
11f70     0C 4E 85 F1 | 	sub	fp, #12
11f74     30 00 90 5D |  if_ne	jmp	#LR__1431
11f78     7A 00 00 FF 
11f7c     DC E4 05 F1 | 	add	objptr, ##62684
11f80     F2 1E 02 FB | 	rdlong	local01, objptr
11f84     7A 00 00 FF 
11f88     DC E4 85 F1 | 	sub	objptr, ##62684
11f8c     A7 1E 62 FC | 	wrlong	local01, fp
11f90     08 4E 05 F1 | 	add	fp, #8
11f94     A7 3A 68 FC | 	wrlong	#29, fp
11f98     08 4E 85 F1 | 	sub	fp, #8
11f9c     A7 12 02 F6 | 	mov	arg01, fp
11fa0     2C 7A BF FD | 	call	#_push
11fa4     A8 00 90 FD | 	jmp	#LR__1434
11fa8                 | LR__1431
11fa8     8C 79 BF FD | 	call	#_pop
11fac     A7 FA 61 FC | 	wrlong	result1, fp
11fb0     04 4E 05 F1 | 	add	fp, #4
11fb4     A7 FC 61 FC | 	wrlong	result2, fp
11fb8     04 4E 05 F1 | 	add	fp, #4
11fbc     A7 FE 61 FC | 	wrlong	result3, fp
11fc0                 | ' 
11fc0                 | ' t1=pop()
11fc0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11fc0     08 4E 85 F1 | 	sub	fp, #8
11fc4     1C FE 0D F2 | 	cmp	result3, #28 wz
11fc8     08 4E 05 51 |  if_ne	add	fp, #8
11fcc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11fd0     08 4E 85 51 |  if_ne	sub	fp, #8
11fd4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11fd8     6C 00 90 5D |  if_ne	jmp	#LR__1433
11fdc     A7 1E 02 FB | 	rdlong	local01, fp
11fe0     7A 00 00 FF 
11fe4     98 E5 05 F1 | 	add	objptr, ##62872
11fe8     F2 1E 62 FC | 	wrlong	local01, objptr
11fec                 | '   q=t1.result.uresult
11fec                 | '   if q<7 then 
11fec     7A 00 00 FF 
11ff0     98 E5 85 F1 | 	sub	objptr, ##62872
11ff4     07 1E 56 F2 | 	cmps	local01, #7 wc
11ff8     40 00 90 3D |  if_ae	jmp	#LR__1432
11ffc     7A 00 00 FF 
12000     98 E5 05 F1 | 	add	objptr, ##62872
12004     F2 1E 02 FB | 	rdlong	local01, objptr
12008     02 1E 66 F0 | 	shl	local01, #2
1200c     BC E4 85 F1 | 	sub	objptr, #188
12010     F2 1E 02 F1 | 	add	local01, objptr
12014     0F 1F 02 FB | 	rdlong	local01, local01
12018     A7 1E 62 FC | 	wrlong	local01, fp
1201c     08 4E 05 F1 | 	add	fp, #8
12020     A7 3A 68 FC | 	wrlong	#29, fp
12024     08 4E 85 F1 | 	sub	fp, #8
12028     A7 12 02 F6 | 	mov	arg01, fp
1202c     7A 00 00 FF 
12030     DC E4 85 F1 | 	sub	objptr, ##62684
12034     98 79 BF FD | 	call	#_push
12038                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
12038     14 00 90 FD | 	jmp	#LR__1434
1203c                 | LR__1432
1203c     29 12 06 F6 | 	mov	arg01, #41
12040     38 3E B0 FD | 	call	#_printerror
12044                 | '      printerror(41) : return
12044     08 00 90 FD | 	jmp	#LR__1434
12048                 | LR__1433
12048     29 12 06 F6 | 	mov	arg01, #41
1204c     2C 3E B0 FD | 	call	#_printerror
12050                 | LR__1434
12050     A7 F0 03 F6 | 	mov	ptra, fp
12054     B2 00 A0 FD | 	call	#popregs_
12058                 | _do_strig_ret
12058     2D 00 64 FD | 	ret
1205c                 | 
1205c                 | ' 
1205c                 | ' sub do_getpixel
1205c                 | _do_getpixel
1205c     00 4A 05 F6 | 	mov	COUNT_, #0
12060     A8 00 A0 FD | 	call	#pushregs_
12064     24 F0 07 F1 | 	add	ptra, #36
12068     69 00 00 FF 
1206c     44 E5 05 F1 | 	add	objptr, ##54084
12070     F2 16 02 FB | 	rdlong	arg03, objptr
12074     0B 15 02 F6 | 	mov	arg02, arg03
12078     01 14 66 F0 | 	shl	arg02, #1
1207c     0B 15 02 F1 | 	add	arg02, arg03
12080     02 14 66 F0 | 	shl	arg02, #2
12084     03 00 00 FF 
12088     04 E4 85 F1 | 	sub	objptr, ##1540
1208c     F2 14 02 F1 | 	add	arg02, objptr
12090     0A 17 02 FB | 	rdlong	arg03, arg02
12094     18 4E 05 F1 | 	add	fp, #24
12098     A7 16 62 FC | 	wrlong	arg03, fp
1209c                 | ' 
1209c                 | ' numpar=compiledline(lineptr_e).result.uresult
1209c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
1209c     18 4E 85 F1 | 	sub	fp, #24
120a0     02 16 0E F2 | 	cmp	arg03, #2 wz
120a4     66 00 00 FF 
120a8     40 E5 85 F1 | 	sub	objptr, ##52544
120ac     3C 00 90 AD |  if_e	jmp	#LR__1440
120b0     00 12 06 F6 | 	mov	arg01, #0
120b4     84 CC B0 FD | 	call	#__system___getiolock_0425
120b8     FD 12 02 F6 | 	mov	arg01, result1
120bc     78 73 B0 FD | 	call	#__system___lockmem
120c0     47 01 00 FF 
120c4     23 15 06 F6 | 	mov	arg02, ##@LR__4628
120c8     00 12 06 F6 | 	mov	arg01, #0
120cc     00 16 06 F6 | 	mov	arg03, #0
120d0     58 80 B0 FD | 	call	#__system___basic_print_string
120d4     00 12 06 F6 | 	mov	arg01, #0
120d8     60 CC B0 FD | 	call	#__system___getiolock_0425
120dc     FD 00 68 FC | 	wrlong	#0, result1
120e0     27 12 06 F6 | 	mov	arg01, #39
120e4     94 3D B0 FD | 	call	#_printerror
120e8     B4 00 90 FD | 	jmp	#LR__1441
120ec                 | LR__1440
120ec     48 78 BF FD | 	call	#_pop
120f0     FD 16 02 F6 | 	mov	arg03, result1
120f4     FE 14 02 F6 | 	mov	arg02, result2
120f8     FF 12 02 F6 | 	mov	arg01, result3
120fc     0C 4E 05 F1 | 	add	fp, #12
12100     A7 16 62 FC | 	wrlong	arg03, fp
12104     04 4E 05 F1 | 	add	fp, #4
12108     A7 14 62 FC | 	wrlong	arg02, fp
1210c     04 4E 05 F1 | 	add	fp, #4
12110     A7 12 62 FC | 	wrlong	arg01, fp
12114     14 4E 85 F1 | 	sub	fp, #20
12118     1C 78 BF FD | 	call	#_pop
1211c     FF 16 02 F6 | 	mov	arg03, result3
12120     A7 FA 61 FC | 	wrlong	result1, fp
12124     04 4E 05 F1 | 	add	fp, #4
12128     A7 FC 61 FC | 	wrlong	result2, fp
1212c     04 4E 05 F1 | 	add	fp, #4
12130     A7 16 62 FC | 	wrlong	arg03, fp
12134     08 4E 85 F1 | 	sub	fp, #8
12138     A7 12 02 F6 | 	mov	arg01, fp
1213c     A8 F1 BF FD | 	call	#_converttoint
12140     1C 4E 05 F1 | 	add	fp, #28
12144     A7 FA 61 FC | 	wrlong	result1, fp
12148     10 4E 85 F1 | 	sub	fp, #16
1214c     A7 12 02 F6 | 	mov	arg01, fp
12150     0C 4E 85 F1 | 	sub	fp, #12
12154     90 F1 BF FD | 	call	#_converttoint
12158     FD 16 02 F6 | 	mov	arg03, result1
1215c     20 4E 05 F1 | 	add	fp, #32
12160     A7 16 62 FC | 	wrlong	arg03, fp
12164     F2 12 02 FB | 	rdlong	arg01, objptr
12168     04 4E 85 F1 | 	sub	fp, #4
1216c     A7 FE 01 FB | 	rdlong	result3, fp
12170     FF 12 02 F1 | 	add	arg01, result3
12174     1C 4E 85 F1 | 	sub	fp, #28
12178     0A 16 66 F0 | 	shl	arg03, #10
1217c     0B 13 02 F1 | 	add	arg01, arg03
12180     5C 3E B0 FD | 	call	#_pspeek
12184     FD FA E1 F8 | 	getbyte	result1, result1, #0
12188     A7 FA 61 FC | 	wrlong	result1, fp
1218c     08 4E 05 F1 | 	add	fp, #8
12190     A7 3A 68 FC | 	wrlong	#29, fp
12194     08 4E 85 F1 | 	sub	fp, #8
12198     A7 12 02 F6 | 	mov	arg01, fp
1219c     30 78 BF FD | 	call	#_push
121a0                 | LR__1441
121a0     A7 F0 03 F6 | 	mov	ptra, fp
121a4     B2 00 A0 FD | 	call	#popregs_
121a8                 | _do_getpixel_ret
121a8     2D 00 64 FD | 	ret
121ac                 | 
121ac                 | ' 
121ac                 | ' 
121ac                 | ' 
121ac                 | ' sub do_defsprite
121ac                 | _do_defsprite
121ac     07 4A 05 F6 | 	mov	COUNT_, #7
121b0     A8 00 A0 FD | 	call	#pushregs_
121b4     5C F0 07 F1 | 	add	ptra, #92
121b8     7C 77 BF FD | 	call	#_pop
121bc     FD 16 02 F6 | 	mov	arg03, result1
121c0     FE 14 02 F6 | 	mov	arg02, result2
121c4     FF 12 02 F6 | 	mov	arg01, result3
121c8     30 4E 05 F1 | 	add	fp, #48
121cc     A7 16 62 FC | 	wrlong	arg03, fp
121d0     04 4E 05 F1 | 	add	fp, #4
121d4     A7 14 62 FC | 	wrlong	arg02, fp
121d8     04 4E 05 F1 | 	add	fp, #4
121dc     A7 12 62 FC | 	wrlong	arg01, fp
121e0     38 4E 85 F1 | 	sub	fp, #56
121e4     50 77 BF FD | 	call	#_pop
121e8     FD 16 02 F6 | 	mov	arg03, result1
121ec     FE 14 02 F6 | 	mov	arg02, result2
121f0     FF 12 02 F6 | 	mov	arg01, result3
121f4     24 4E 05 F1 | 	add	fp, #36
121f8     A7 16 62 FC | 	wrlong	arg03, fp
121fc     04 4E 05 F1 | 	add	fp, #4
12200     A7 14 62 FC | 	wrlong	arg02, fp
12204     04 4E 05 F1 | 	add	fp, #4
12208     A7 12 62 FC | 	wrlong	arg01, fp
1220c     2C 4E 85 F1 | 	sub	fp, #44
12210     24 77 BF FD | 	call	#_pop
12214     FD 16 02 F6 | 	mov	arg03, result1
12218     FE 14 02 F6 | 	mov	arg02, result2
1221c     FF 12 02 F6 | 	mov	arg01, result3
12220     18 4E 05 F1 | 	add	fp, #24
12224     A7 16 62 FC | 	wrlong	arg03, fp
12228     04 4E 05 F1 | 	add	fp, #4
1222c     A7 14 62 FC | 	wrlong	arg02, fp
12230     04 4E 05 F1 | 	add	fp, #4
12234     A7 12 62 FC | 	wrlong	arg01, fp
12238     20 4E 85 F1 | 	sub	fp, #32
1223c     F8 76 BF FD | 	call	#_pop
12240     FD 16 02 F6 | 	mov	arg03, result1
12244     FE 14 02 F6 | 	mov	arg02, result2
12248     FF 12 02 F6 | 	mov	arg01, result3
1224c     0C 4E 05 F1 | 	add	fp, #12
12250     A7 16 62 FC | 	wrlong	arg03, fp
12254     04 4E 05 F1 | 	add	fp, #4
12258     A7 14 62 FC | 	wrlong	arg02, fp
1225c     04 4E 05 F1 | 	add	fp, #4
12260     A7 12 62 FC | 	wrlong	arg01, fp
12264     14 4E 85 F1 | 	sub	fp, #20
12268     CC 76 BF FD | 	call	#_pop
1226c     FF 16 02 F6 | 	mov	arg03, result3
12270     A7 FA 61 FC | 	wrlong	result1, fp
12274     04 4E 05 F1 | 	add	fp, #4
12278     A7 FC 61 FC | 	wrlong	result2, fp
1227c     04 4E 05 F1 | 	add	fp, #4
12280     A7 16 62 FC | 	wrlong	arg03, fp
12284     08 4E 85 F1 | 	sub	fp, #8
12288     A7 12 02 F6 | 	mov	arg01, fp
1228c     58 F0 BF FD | 	call	#_converttoint
12290     3C 4E 05 F1 | 	add	fp, #60
12294     A7 FA 61 FC | 	wrlong	result1, fp
12298     30 4E 85 F1 | 	sub	fp, #48
1229c     A7 12 02 F6 | 	mov	arg01, fp
122a0     0C 4E 85 F1 | 	sub	fp, #12
122a4     40 F0 BF FD | 	call	#_converttoint
122a8     40 4E 05 F1 | 	add	fp, #64
122ac     A7 FA 61 FC | 	wrlong	result1, fp
122b0     28 4E 85 F1 | 	sub	fp, #40
122b4     A7 12 02 F6 | 	mov	arg01, fp
122b8     18 4E 85 F1 | 	sub	fp, #24
122bc     28 F0 BF FD | 	call	#_converttoint
122c0     44 4E 05 F1 | 	add	fp, #68
122c4     A7 FA 61 FC | 	wrlong	result1, fp
122c8     20 4E 85 F1 | 	sub	fp, #32
122cc     A7 12 02 F6 | 	mov	arg01, fp
122d0     24 4E 85 F1 | 	sub	fp, #36
122d4     10 F0 BF FD | 	call	#_converttoint
122d8     48 4E 05 F1 | 	add	fp, #72
122dc     A7 FA 61 FC | 	wrlong	result1, fp
122e0     18 4E 85 F1 | 	sub	fp, #24
122e4     A7 12 02 F6 | 	mov	arg01, fp
122e8     30 4E 85 F1 | 	sub	fp, #48
122ec     F8 EF BF FD | 	call	#_converttoint
122f0     4C 4E 05 F1 | 	add	fp, #76
122f4     A7 FA 61 FC | 	wrlong	result1, fp
122f8                 | ' 
122f8                 | ' t5=pop()
122f8                 | ' t4=pop()
122f8                 | ' t3=pop()
122f8                 | ' t2=pop()
122f8                 | ' t1=pop()
122f8                 | ' 
122f8                 | ' ' do convert, defsprite is not a racing command
122f8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
122f8                 | '  
122f8                 | ' ' todo: check parameters for linits
122f8                 | ' if sprite(a1)<> nil then delete(sprite(a1))
122f8     10 4E 85 F1 | 	sub	fp, #16
122fc     A7 16 02 FB | 	rdlong	arg03, fp
12300     3C 4E 85 F1 | 	sub	fp, #60
12304     02 16 66 F0 | 	shl	arg03, #2
12308     7A 00 00 FF 
1230c     F8 E4 05 F1 | 	add	objptr, ##62712
12310     F2 16 02 F1 | 	add	arg03, objptr
12314     0B 17 0A FB | 	rdlong	arg03, arg03 wz
12318     7A 00 00 FF 
1231c     F8 E4 85 F1 | 	sub	objptr, ##62712
12320     2C 00 90 AD |  if_e	jmp	#LR__1450
12324     3C 4E 05 F1 | 	add	fp, #60
12328     A7 16 02 FB | 	rdlong	arg03, fp
1232c     3C 4E 85 F1 | 	sub	fp, #60
12330     02 16 66 F0 | 	shl	arg03, #2
12334     7A 00 00 FF 
12338     F8 E4 05 F1 | 	add	objptr, ##62712
1233c     F2 16 02 F1 | 	add	arg03, objptr
12340     0B 13 02 FB | 	rdlong	arg01, arg03
12344     7A 00 00 FF 
12348     F8 E4 85 F1 | 	sub	objptr, ##62712
1234c     DC AF B0 FD | 	call	#__system___gc_free
12350                 | LR__1450
12350     3C 4E 05 F1 | 	add	fp, #60
12354     A7 1E 02 FB | 	rdlong	local01, fp
12358     0C 4E 05 F1 | 	add	fp, #12
1235c     A7 16 02 FB | 	rdlong	arg03, fp
12360     04 4E 05 F1 | 	add	fp, #4
12364     A7 14 02 FB | 	rdlong	arg02, fp
12368     0A 17 02 FD | 	qmul	arg03, arg02
1236c     02 1E 66 F0 | 	shl	local01, #2
12370     7A 00 00 FF 
12374     F8 E4 05 F1 | 	add	objptr, ##62712
12378     F2 1E 02 F1 | 	add	local01, objptr
1237c     4C 4E 85 F1 | 	sub	fp, #76
12380     7A 00 00 FF 
12384     F8 E4 85 F1 | 	sub	objptr, ##62712
12388     18 12 62 FD | 	getqx	arg01
1238c     60 AE B0 FD | 	call	#__system___gc_alloc_managed
12390     0F FB 61 FC | 	wrlong	result1, local01
12394                 | ' for y=a3 to a3+a5-1
12394     44 4E 05 F1 | 	add	fp, #68
12398     A7 20 02 FB | 	rdlong	local02, fp
1239c     0C 4E 05 F1 | 	add	fp, #12
123a0     A7 20 62 FC | 	wrlong	local02, fp
123a4     0C 4E 85 F1 | 	sub	fp, #12
123a8     A7 22 02 FB | 	rdlong	local03, fp
123ac     08 4E 05 F1 | 	add	fp, #8
123b0     A7 24 02 FB | 	rdlong	local04, fp
123b4     4C 4E 85 F1 | 	sub	fp, #76
123b8     12 23 02 F1 | 	add	local03, local04
123bc                 | LR__1451
123bc     50 4E 05 F1 | 	add	fp, #80
123c0     A7 20 02 FB | 	rdlong	local02, fp
123c4     50 4E 85 F1 | 	sub	fp, #80
123c8     11 21 52 F2 | 	cmps	local02, local03 wc
123cc     10 01 90 3D |  if_ae	jmp	#LR__1454
123d0                 | '   for x=a2 to a4+a2-1
123d0     40 4E 05 F1 | 	add	fp, #64
123d4     A7 1E 02 FB | 	rdlong	local01, fp
123d8     7A 00 00 FF 
123dc     6C E5 05 F1 | 	add	objptr, ##62828
123e0     F2 1E 62 FC | 	wrlong	local01, objptr
123e4     7A 00 00 FF 
123e8     6C E5 85 F1 | 	sub	objptr, ##62828
123ec     08 4E 05 F1 | 	add	fp, #8
123f0     A7 26 02 FB | 	rdlong	local05, fp
123f4     08 4E 85 F1 | 	sub	fp, #8
123f8     A7 28 02 FB | 	rdlong	local06, fp
123fc     40 4E 85 F1 | 	sub	fp, #64
12400     14 27 02 F1 | 	add	local05, local06
12404                 | LR__1452
12404     7A 00 00 FF 
12408     6C E5 05 F1 | 	add	objptr, ##62828
1240c     F2 1E 02 FB | 	rdlong	local01, objptr
12410     7A 00 00 FF 
12414     6C E5 85 F1 | 	sub	objptr, ##62828
12418     13 1F 52 F2 | 	cmps	local01, local05 wc
1241c     A8 00 90 3D |  if_ae	jmp	#LR__1453
12420     3C 4E 05 F1 | 	add	fp, #60
12424     A7 28 02 FB | 	rdlong	local06, fp
12428     04 4E 05 F1 | 	add	fp, #4
1242c     A7 24 02 FB | 	rdlong	local04, fp
12430     10 4E 05 F1 | 	add	fp, #16
12434     A7 20 02 FB | 	rdlong	local02, fp
12438     10 1F 02 F6 | 	mov	local01, local02
1243c     0C 4E 85 F1 | 	sub	fp, #12
12440     A7 16 02 FB | 	rdlong	arg03, fp
12444     0B 1F 82 F1 | 	sub	local01, arg03
12448     04 4E 05 F1 | 	add	fp, #4
1244c     A7 16 02 FB | 	rdlong	arg03, fp
12450     0B 1F 02 FD | 	qmul	local01, arg03
12454     02 28 66 F0 | 	shl	local06, #2
12458     7A 00 00 FF 
1245c     F8 E4 05 F1 | 	add	objptr, ##62712
12460     F2 28 02 F1 | 	add	local06, objptr
12464     14 29 02 FB | 	rdlong	local06, local06
12468     74 E4 05 F1 | 	add	objptr, #116
1246c     F2 1E 02 FB | 	rdlong	local01, objptr
12470     7A 00 00 FF 
12474     6C E5 85 F1 | 	sub	objptr, ##62828
12478     0F 2B 02 F6 | 	mov	local07, local01
1247c     12 2B 82 F1 | 	sub	local07, local04
12480     F2 12 02 FB | 	rdlong	arg01, objptr
12484     0F 13 02 F1 | 	add	arg01, local01
12488     48 4E 85 F1 | 	sub	fp, #72
1248c     0A 20 66 F0 | 	shl	local02, #10
12490     10 13 02 F1 | 	add	arg01, local02
12494     18 24 62 FD | 	getqx	local04
12498     12 2B 02 F1 | 	add	local07, local04
1249c     14 2B 02 F1 | 	add	local07, local06
124a0     3C 3B B0 FD | 	call	#_pspeek
124a4     15 FB 41 FC | 	wrbyte	result1, local07
124a8     7A 00 00 FF 
124ac     6C E5 05 F1 | 	add	objptr, ##62828
124b0     F2 2A 02 FB | 	rdlong	local07, objptr
124b4     01 2A 06 F1 | 	add	local07, #1
124b8     F2 2A 62 FC | 	wrlong	local07, objptr
124bc     7A 00 00 FF 
124c0     6C E5 85 F1 | 	sub	objptr, ##62828
124c4     3C FF 9F FD | 	jmp	#LR__1452
124c8                 | LR__1453
124c8     50 4E 05 F1 | 	add	fp, #80
124cc     A7 2A 02 FB | 	rdlong	local07, fp
124d0     01 2A 06 F1 | 	add	local07, #1
124d4     A7 2A 62 FC | 	wrlong	local07, fp
124d8     50 4E 85 F1 | 	sub	fp, #80
124dc     DC FE 9F FD | 	jmp	#LR__1451
124e0                 | LR__1454
124e0     3C 4E 05 F1 | 	add	fp, #60
124e4     A7 2A 02 FB | 	rdlong	local07, fp
124e8     15 13 02 F6 | 	mov	arg01, local07
124ec     3C 4E 85 F1 | 	sub	fp, #60
124f0     02 2A 66 F0 | 	shl	local07, #2
124f4     7A 00 00 FF 
124f8     F8 E4 05 F1 | 	add	objptr, ##62712
124fc     F2 2A 02 F1 | 	add	local07, objptr
12500     15 15 02 FB | 	rdlong	arg02, local07
12504     7A 00 00 FF 
12508     F8 E4 85 F1 | 	sub	objptr, ##62712
1250c     9C 4E B0 FD | 	call	#_hg010b_spin2_setspriteptr
12510     3C 4E 05 F1 | 	add	fp, #60
12514     A7 12 02 FB | 	rdlong	arg01, fp
12518     0C 4E 05 F1 | 	add	fp, #12
1251c     A7 14 02 FB | 	rdlong	arg02, fp
12520     04 4E 05 F1 | 	add	fp, #4
12524     A7 16 02 FB | 	rdlong	arg03, fp
12528     4C 4E 85 F1 | 	sub	fp, #76
1252c     F0 4E B0 FD | 	call	#_hg010b_spin2_setspritesize
12530     A7 F0 03 F6 | 	mov	ptra, fp
12534     B2 00 A0 FD | 	call	#popregs_
12538                 | _do_defsprite_ret
12538     2D 00 64 FD | 	ret
1253c                 | 
1253c                 | ' 
1253c                 | ' sub do_sprite
1253c                 | _do_sprite
1253c     00 4A 05 F6 | 	mov	COUNT_, #0
12540     A8 00 A0 FD | 	call	#pushregs_
12544     30 F0 07 F1 | 	add	ptra, #48
12548     EC 73 BF FD | 	call	#_pop
1254c     FD 16 02 F6 | 	mov	arg03, result1
12550     FE 14 02 F6 | 	mov	arg02, result2
12554     FF 12 02 F6 | 	mov	arg01, result3
12558     18 4E 05 F1 | 	add	fp, #24
1255c     A7 16 62 FC | 	wrlong	arg03, fp
12560     04 4E 05 F1 | 	add	fp, #4
12564     A7 14 62 FC | 	wrlong	arg02, fp
12568     04 4E 05 F1 | 	add	fp, #4
1256c     A7 12 62 FC | 	wrlong	arg01, fp
12570     20 4E 85 F1 | 	sub	fp, #32
12574     C0 73 BF FD | 	call	#_pop
12578     FD 16 02 F6 | 	mov	arg03, result1
1257c     FE 14 02 F6 | 	mov	arg02, result2
12580     FF 12 02 F6 | 	mov	arg01, result3
12584     0C 4E 05 F1 | 	add	fp, #12
12588     A7 16 62 FC | 	wrlong	arg03, fp
1258c     04 4E 05 F1 | 	add	fp, #4
12590     A7 14 62 FC | 	wrlong	arg02, fp
12594     04 4E 05 F1 | 	add	fp, #4
12598     A7 12 62 FC | 	wrlong	arg01, fp
1259c     14 4E 85 F1 | 	sub	fp, #20
125a0     94 73 BF FD | 	call	#_pop
125a4     FF 16 02 F6 | 	mov	arg03, result3
125a8     A7 FA 61 FC | 	wrlong	result1, fp
125ac     04 4E 05 F1 | 	add	fp, #4
125b0     A7 FC 61 FC | 	wrlong	result2, fp
125b4     04 4E 05 F1 | 	add	fp, #4
125b8     A7 16 62 FC | 	wrlong	arg03, fp
125bc     08 4E 85 F1 | 	sub	fp, #8
125c0     A7 12 02 F6 | 	mov	arg01, fp
125c4     20 ED BF FD | 	call	#_converttoint
125c8     24 4E 05 F1 | 	add	fp, #36
125cc     A7 FA 61 FC | 	wrlong	result1, fp
125d0     18 4E 85 F1 | 	sub	fp, #24
125d4     A7 12 02 F6 | 	mov	arg01, fp
125d8     0C 4E 85 F1 | 	sub	fp, #12
125dc     08 ED BF FD | 	call	#_converttoint
125e0     28 4E 05 F1 | 	add	fp, #40
125e4     A7 FA 61 FC | 	wrlong	result1, fp
125e8     10 4E 85 F1 | 	sub	fp, #16
125ec     A7 12 02 F6 | 	mov	arg01, fp
125f0     18 4E 85 F1 | 	sub	fp, #24
125f4     F0 EC BF FD | 	call	#_converttoint
125f8     2C 4E 05 F1 | 	add	fp, #44
125fc     A7 FA 61 FC | 	wrlong	result1, fp
12600     08 4E 85 F1 | 	sub	fp, #8
12604     A7 12 02 FB | 	rdlong	arg01, fp
12608     04 4E 05 F1 | 	add	fp, #4
1260c     A7 14 02 FB | 	rdlong	arg02, fp
12610     FD 16 02 F6 | 	mov	arg03, result1
12614     28 4E 85 F1 | 	sub	fp, #40
12618     B8 4D B0 FD | 	call	#_hg010b_spin2_setspritepos
1261c     A7 F0 03 F6 | 	mov	ptra, fp
12620     B2 00 A0 FD | 	call	#popregs_
12624                 | _do_sprite_ret
12624     2D 00 64 FD | 	ret
12628                 | 
12628                 | ' 
12628                 | ' sub do_mousex
12628                 | _do_mousex
12628     00 4A 05 F6 | 	mov	COUNT_, #0
1262c     A8 00 A0 FD | 	call	#pushregs_
12630     0C F0 07 F1 | 	add	ptra, #12
12634     08 4E 05 F1 | 	add	fp, #8
12638     A7 3A 68 FC | 	wrlong	#29, fp
1263c     08 4E 85 F1 | 	sub	fp, #8
12640     7A 00 00 FF 
12644     B0 E4 05 F1 | 	add	objptr, ##62640
12648     F2 12 02 FB | 	rdlong	arg01, objptr
1264c     7A 00 00 FF 
12650     B0 E4 85 F1 | 	sub	objptr, ##62640
12654     A7 12 62 FC | 	wrlong	arg01, fp
12658     A7 12 02 F6 | 	mov	arg01, fp
1265c     70 73 BF FD | 	call	#_push
12660     A7 F0 03 F6 | 	mov	ptra, fp
12664     B2 00 A0 FD | 	call	#popregs_
12668                 | _do_mousex_ret
12668     2D 00 64 FD | 	ret
1266c                 | 
1266c                 | ' 
1266c                 | ' sub do_mousey
1266c                 | _do_mousey
1266c     00 4A 05 F6 | 	mov	COUNT_, #0
12670     A8 00 A0 FD | 	call	#pushregs_
12674     0C F0 07 F1 | 	add	ptra, #12
12678     08 4E 05 F1 | 	add	fp, #8
1267c     A7 3A 68 FC | 	wrlong	#29, fp
12680     08 4E 85 F1 | 	sub	fp, #8
12684     7A 00 00 FF 
12688     B4 E4 05 F1 | 	add	objptr, ##62644
1268c     F2 12 02 FB | 	rdlong	arg01, objptr
12690     7A 00 00 FF 
12694     B4 E4 85 F1 | 	sub	objptr, ##62644
12698     A7 12 62 FC | 	wrlong	arg01, fp
1269c     A7 12 02 F6 | 	mov	arg01, fp
126a0     2C 73 BF FD | 	call	#_push
126a4     A7 F0 03 F6 | 	mov	ptra, fp
126a8     B2 00 A0 FD | 	call	#popregs_
126ac                 | _do_mousey_ret
126ac     2D 00 64 FD | 	ret
126b0                 | 
126b0                 | ' 
126b0                 | ' sub do_mousew
126b0                 | _do_mousew
126b0     00 4A 05 F6 | 	mov	COUNT_, #0
126b4     A8 00 A0 FD | 	call	#pushregs_
126b8     0C F0 07 F1 | 	add	ptra, #12
126bc     08 4E 05 F1 | 	add	fp, #8
126c0     A7 38 68 FC | 	wrlong	#28, fp
126c4     08 4E 85 F1 | 	sub	fp, #8
126c8     7A 00 00 FF 
126cc     BC E4 05 F1 | 	add	objptr, ##62652
126d0     F2 12 02 FB | 	rdlong	arg01, objptr
126d4     7A 00 00 FF 
126d8     BC E4 85 F1 | 	sub	objptr, ##62652
126dc     A7 12 62 FC | 	wrlong	arg01, fp
126e0     A7 12 02 F6 | 	mov	arg01, fp
126e4     E8 72 BF FD | 	call	#_push
126e8     A7 F0 03 F6 | 	mov	ptra, fp
126ec     B2 00 A0 FD | 	call	#popregs_
126f0                 | _do_mousew_ret
126f0     2D 00 64 FD | 	ret
126f4                 | 
126f4                 | ' 
126f4                 | ' sub do_mousek
126f4                 | _do_mousek
126f4     00 4A 05 F6 | 	mov	COUNT_, #0
126f8     A8 00 A0 FD | 	call	#pushregs_
126fc     0C F0 07 F1 | 	add	ptra, #12
12700     08 4E 05 F1 | 	add	fp, #8
12704     A7 3A 68 FC | 	wrlong	#29, fp
12708     08 4E 85 F1 | 	sub	fp, #8
1270c     7A 00 00 FF 
12710     B8 E4 05 F1 | 	add	objptr, ##62648
12714     F2 12 02 FB | 	rdlong	arg01, objptr
12718     7A 00 00 FF 
1271c     B8 E4 85 F1 | 	sub	objptr, ##62648
12720     A7 12 62 FC | 	wrlong	arg01, fp
12724     A7 12 02 F6 | 	mov	arg01, fp
12728     A4 72 BF FD | 	call	#_push
1272c     A7 F0 03 F6 | 	mov	ptra, fp
12730     B2 00 A0 FD | 	call	#popregs_
12734                 | _do_mousek_ret
12734     2D 00 64 FD | 	ret
12738                 | 
12738                 | ' 
12738                 | ' 
12738                 | ' sub do_rdpin
12738                 | _do_rdpin
12738     00 4A 05 F6 | 	mov	COUNT_, #0
1273c     A8 00 A0 FD | 	call	#pushregs_
12740     0C F0 07 F1 | 	add	ptra, #12
12744     F0 71 BF FD | 	call	#_pop
12748     A7 FA 61 FC | 	wrlong	result1, fp
1274c     04 4E 05 F1 | 	add	fp, #4
12750     A7 FC 61 FC | 	wrlong	result2, fp
12754     04 4E 05 F1 | 	add	fp, #4
12758     A7 FE 61 FC | 	wrlong	result3, fp
1275c     08 4E 85 F1 | 	sub	fp, #8
12760     A7 12 02 F6 | 	mov	arg01, fp
12764     80 EB BF FD | 	call	#_converttoint
12768     FD FA 89 FA | 	rdpin	result1, result1
1276c     7A 00 00 FF 
12770     C4 E5 05 F1 | 	add	objptr, ##62916
12774     F2 FA 61 FC | 	wrlong	result1, objptr
12778     7A 00 00 FF 
1277c     C4 E5 85 F1 | 	sub	objptr, ##62916
12780     08 4E 05 F1 | 	add	fp, #8
12784     A7 3A 68 FC | 	wrlong	#29, fp
12788     08 4E 85 F1 | 	sub	fp, #8
1278c     A7 08 68 FC | 	wrlong	#4, fp
12790     A7 12 02 F6 | 	mov	arg01, fp
12794     38 72 BF FD | 	call	#_push
12798     A7 F0 03 F6 | 	mov	ptra, fp
1279c     B2 00 A0 FD | 	call	#popregs_
127a0                 | _do_rdpin_ret
127a0     2D 00 64 FD | 	ret
127a4                 | 
127a4                 | ' 
127a4                 | ' sub do_rqpin
127a4                 | _do_rqpin
127a4     00 4A 05 F6 | 	mov	COUNT_, #0
127a8     A8 00 A0 FD | 	call	#pushregs_
127ac     0C F0 07 F1 | 	add	ptra, #12
127b0     84 71 BF FD | 	call	#_pop
127b4     A7 FA 61 FC | 	wrlong	result1, fp
127b8     04 4E 05 F1 | 	add	fp, #4
127bc     A7 FC 61 FC | 	wrlong	result2, fp
127c0     04 4E 05 F1 | 	add	fp, #4
127c4     A7 FE 61 FC | 	wrlong	result3, fp
127c8     08 4E 85 F1 | 	sub	fp, #8
127cc     A7 12 02 F6 | 	mov	arg01, fp
127d0     14 EB BF FD | 	call	#_converttoint
127d4     FD 12 02 F6 | 	mov	arg01, result1
127d8     00 FA 05 F6 | 	mov	result1, #0
127dc     09 FB 81 FA | 	rqpin	result1, arg01
127e0     7A 00 00 FF 
127e4     C4 E5 05 F1 | 	add	objptr, ##62916
127e8     F2 FA 61 FC | 	wrlong	result1, objptr
127ec     7A 00 00 FF 
127f0     C4 E5 85 F1 | 	sub	objptr, ##62916
127f4     08 4E 05 F1 | 	add	fp, #8
127f8     A7 3A 68 FC | 	wrlong	#29, fp
127fc     08 4E 85 F1 | 	sub	fp, #8
12800     A7 08 68 FC | 	wrlong	#4, fp
12804     A7 12 02 F6 | 	mov	arg01, fp
12808     C4 71 BF FD | 	call	#_push
1280c     A7 F0 03 F6 | 	mov	ptra, fp
12810     B2 00 A0 FD | 	call	#popregs_
12814                 | _do_rqpin_ret
12814     2D 00 64 FD | 	ret
12818                 | 
12818                 | ' 
12818                 | ' sub do_pinread
12818                 | _do_pinread
12818     00 4A 05 F6 | 	mov	COUNT_, #0
1281c     A8 00 A0 FD | 	call	#pushregs_
12820     0C F0 07 F1 | 	add	ptra, #12
12824     10 71 BF FD | 	call	#_pop
12828     A7 FA 61 FC | 	wrlong	result1, fp
1282c     04 4E 05 F1 | 	add	fp, #4
12830     A7 FC 61 FC | 	wrlong	result2, fp
12834     04 4E 05 F1 | 	add	fp, #4
12838     A7 FE 61 FC | 	wrlong	result3, fp
1283c     08 4E 85 F1 | 	sub	fp, #8
12840     A7 12 02 F6 | 	mov	arg01, fp
12844     A0 EA BF FD | 	call	#_converttoint
12848     FD 12 02 F6 | 	mov	arg01, result1
1284c     20 12 CE F7 | 	test	arg01, #32 wz
12850     FF FB 01 56 |  if_ne	mov	result1, inb
12854     FE FB 01 A6 |  if_e	mov	result1, ina
12858     09 FB 41 F0 | 	shr	result1, arg01
1285c     06 12 46 F0 | 	shr	arg01, #6
12860     09 FB 41 F7 | 	zerox	result1, arg01
12864     7A 00 00 FF 
12868     C4 E5 05 F1 | 	add	objptr, ##62916
1286c     F2 FA 61 FC | 	wrlong	result1, objptr
12870     7A 00 00 FF 
12874     C4 E5 85 F1 | 	sub	objptr, ##62916
12878     08 4E 05 F1 | 	add	fp, #8
1287c     A7 3A 68 FC | 	wrlong	#29, fp
12880     08 4E 85 F1 | 	sub	fp, #8
12884     A7 08 68 FC | 	wrlong	#4, fp
12888     A7 12 02 F6 | 	mov	arg01, fp
1288c     40 71 BF FD | 	call	#_push
12890     A7 F0 03 F6 | 	mov	ptra, fp
12894     B2 00 A0 FD | 	call	#popregs_
12898                 | _do_pinread_ret
12898     2D 00 64 FD | 	ret
1289c                 | 
1289c                 | ' 
1289c                 | ' sub do_gettime
1289c                 | _do_gettime
1289c     02 4A 05 F6 | 	mov	COUNT_, #2
128a0     A8 00 A0 FD | 	call	#pushregs_
128a4     14 F0 07 F1 | 	add	ptra, #20
128a8                 | ' 
128a8                 | ' const asm 
128a8     1A 1E 72 FD | 	getct	local01 wc
128ac     1A 20 62 FD | 	getct	local02
128b0                 | ' 
128b0                 | ' return hi1, lo1
128b0     10 FD 01 F6 | 	mov	result2, local02
128b4     A7 1E 62 FC | 	wrlong	local01, fp
128b8     04 4E 05 F1 | 	add	fp, #4
128bc     A7 FC 61 FC | 	wrlong	result2, fp
128c0     0C 4E 05 F1 | 	add	fp, #12
128c4     A7 3A 68 FC | 	wrlong	#29, fp
128c8     0C 4E 85 F1 | 	sub	fp, #12
128cc     A7 12 02 FB | 	rdlong	arg01, fp
128d0     04 4E 05 F1 | 	add	fp, #4
128d4     A7 12 62 FC | 	wrlong	arg01, fp
128d8     08 4E 85 F1 | 	sub	fp, #8
128dc     A7 12 02 FB | 	rdlong	arg01, fp
128e0     0C 4E 05 F1 | 	add	fp, #12
128e4     A7 12 62 FC | 	wrlong	arg01, fp
128e8     04 4E 85 F1 | 	sub	fp, #4
128ec     A7 12 02 F6 | 	mov	arg01, fp
128f0     08 4E 85 F1 | 	sub	fp, #8
128f4     D8 70 BF FD | 	call	#_push
128f8     A7 F0 03 F6 | 	mov	ptra, fp
128fc     B2 00 A0 FD | 	call	#popregs_
12900                 | _do_gettime_ret
12900     2D 00 64 FD | 	ret
12904                 | 
12904                 | '    
12904                 | ' 
12904                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
12904                 | ' 
12904                 | ' '' ----------------------------- Clear the screen
12904                 | ' 
12904                 | ' sub do_cls
12904                 | _do_cls
12904     56 00 00 FF 
12908     00 E5 05 F1 | 	add	objptr, ##44288
1290c     F2 12 02 FB | 	rdlong	arg01, objptr
12910     04 E4 85 F1 | 	sub	objptr, #4
12914     F2 14 02 FB | 	rdlong	arg02, objptr
12918     56 00 00 FF 
1291c     FC E4 85 F1 | 	sub	objptr, ##44284
12920     B4 57 B0 FD | 	call	#_hg010b_spin2_cls
12924     56 00 00 FF 
12928     00 E5 05 F1 | 	add	objptr, ##44288
1292c     F2 14 02 FB | 	rdlong	arg02, objptr
12930     14 E4 85 F1 | 	sub	objptr, #20
12934     F2 14 62 FC | 	wrlong	arg02, objptr
12938     56 00 00 FF 
1293c     EC E4 85 F1 | 	sub	objptr, ##44268
12940                 | ' cls(ink,paper): plot_color=ink: print
12940     00 12 06 F6 | 	mov	arg01, #0
12944     F4 C3 B0 FD | 	call	#__system___getiolock_0425
12948     FD 12 02 F6 | 	mov	arg01, result1
1294c     E8 6A B0 FD | 	call	#__system___lockmem
12950     00 12 06 F6 | 	mov	arg01, #0
12954     0A 14 06 F6 | 	mov	arg02, #10
12958     00 16 06 F6 | 	mov	arg03, #0
1295c     74 77 B0 FD | 	call	#__system___basic_print_char
12960     00 12 06 F6 | 	mov	arg01, #0
12964     D4 C3 B0 FD | 	call	#__system___getiolock_0425
12968     FD 00 68 FC | 	wrlong	#0, result1
1296c                 | _do_cls_ret
1296c     2D 00 64 FD | 	ret
12970                 | 
12970                 | ' 
12970                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
12970                 | ' 
12970                 | ' sub do_color
12970                 | _do_color
12970     03 4A 05 F6 | 	mov	COUNT_, #3
12974     A8 00 A0 FD | 	call	#pushregs_
12978     BC 6F BF FD | 	call	#_pop
1297c     FD 1E 02 F6 | 	mov	local01, result1
12980     FE 20 02 F6 | 	mov	local02, result2
12984     FF 22 02 F6 | 	mov	local03, result3
12988     56 00 00 FF 
1298c     EC E4 05 F1 | 	add	objptr, ##44268
12990     F2 1E 62 FC | 	wrlong	local01, objptr
12994     56 00 00 FF 
12998     EC E4 85 F1 | 	sub	objptr, ##44268
1299c     A7 F0 03 F6 | 	mov	ptra, fp
129a0     B2 00 A0 FD | 	call	#popregs_
129a4                 | _do_color_ret
129a4     2D 00 64 FD | 	ret
129a8                 | 
129a8                 | ' 
129a8                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
129a8                 | ' 
129a8                 | ' sub do_plot
129a8                 | _do_plot
129a8     00 4A 05 F6 | 	mov	COUNT_, #0
129ac     A8 00 A0 FD | 	call	#pushregs_
129b0     20 F0 07 F1 | 	add	ptra, #32
129b4     80 6F BF FD | 	call	#_pop
129b8     FD 16 02 F6 | 	mov	arg03, result1
129bc     FE 14 02 F6 | 	mov	arg02, result2
129c0     FF 12 02 F6 | 	mov	arg01, result3
129c4     0C 4E 05 F1 | 	add	fp, #12
129c8     A7 16 62 FC | 	wrlong	arg03, fp
129cc     04 4E 05 F1 | 	add	fp, #4
129d0     A7 14 62 FC | 	wrlong	arg02, fp
129d4     04 4E 05 F1 | 	add	fp, #4
129d8     A7 12 62 FC | 	wrlong	arg01, fp
129dc     14 4E 85 F1 | 	sub	fp, #20
129e0     54 6F BF FD | 	call	#_pop
129e4     FF 16 02 F6 | 	mov	arg03, result3
129e8     A7 FA 61 FC | 	wrlong	result1, fp
129ec     04 4E 05 F1 | 	add	fp, #4
129f0     A7 FC 61 FC | 	wrlong	result2, fp
129f4     04 4E 05 F1 | 	add	fp, #4
129f8     A7 16 62 FC | 	wrlong	arg03, fp
129fc     08 4E 85 F1 | 	sub	fp, #8
12a00     A7 12 02 F6 | 	mov	arg01, fp
12a04     E0 E8 BF FD | 	call	#_converttoint
12a08     18 4E 05 F1 | 	add	fp, #24
12a0c     A7 FA 61 FC | 	wrlong	result1, fp
12a10     0C 4E 85 F1 | 	sub	fp, #12
12a14     A7 12 02 F6 | 	mov	arg01, fp
12a18     0C 4E 85 F1 | 	sub	fp, #12
12a1c     C8 E8 BF FD | 	call	#_converttoint
12a20     1C 4E 05 F1 | 	add	fp, #28
12a24     A7 FA 61 FC | 	wrlong	result1, fp
12a28     04 4E 85 F1 | 	sub	fp, #4
12a2c     A7 16 02 FB | 	rdlong	arg03, fp
12a30     56 00 00 FF 
12a34     F0 E4 05 F1 | 	add	objptr, ##44272
12a38     F2 16 62 FC | 	wrlong	arg03, objptr
12a3c     04 4E 05 F1 | 	add	fp, #4
12a40     A7 14 02 FB | 	rdlong	arg02, fp
12a44     1C 4E 85 F1 | 	sub	fp, #28
12a48     04 E4 05 F1 | 	add	objptr, #4
12a4c     F2 14 62 FC | 	wrlong	arg02, objptr
12a50     04 E4 85 F1 | 	sub	objptr, #4
12a54     F2 12 02 FB | 	rdlong	arg01, objptr
12a58     04 E4 85 F1 | 	sub	objptr, #4
12a5c     F2 16 02 FB | 	rdlong	arg03, objptr
12a60     56 00 00 FF 
12a64     EC E4 85 F1 | 	sub	objptr, ##44268
12a68     00 4A B0 FD | 	call	#_hg010b_spin2_putpixel
12a6c     A7 F0 03 F6 | 	mov	ptra, fp
12a70     B2 00 A0 FD | 	call	#popregs_
12a74                 | _do_plot_ret
12a74     2D 00 64 FD | 	ret
12a78                 | 
12a78                 | ' 
12a78                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
12a78                 | ' 
12a78                 | ' sub do_draw
12a78                 | _do_draw
12a78     00 4A 05 F6 | 	mov	COUNT_, #0
12a7c     A8 00 A0 FD | 	call	#pushregs_
12a80     20 F0 07 F1 | 	add	ptra, #32
12a84     B0 6E BF FD | 	call	#_pop
12a88     FD 1A 02 F6 | 	mov	arg05, result1
12a8c     FE 18 02 F6 | 	mov	arg04, result2
12a90     FF 16 02 F6 | 	mov	arg03, result3
12a94     0C 4E 05 F1 | 	add	fp, #12
12a98     A7 1A 62 FC | 	wrlong	arg05, fp
12a9c     04 4E 05 F1 | 	add	fp, #4
12aa0     A7 18 62 FC | 	wrlong	arg04, fp
12aa4     04 4E 05 F1 | 	add	fp, #4
12aa8     A7 16 62 FC | 	wrlong	arg03, fp
12aac     14 4E 85 F1 | 	sub	fp, #20
12ab0     84 6E BF FD | 	call	#_pop
12ab4     FF 1A 02 F6 | 	mov	arg05, result3
12ab8     A7 FA 61 FC | 	wrlong	result1, fp
12abc     04 4E 05 F1 | 	add	fp, #4
12ac0     A7 FC 61 FC | 	wrlong	result2, fp
12ac4     04 4E 05 F1 | 	add	fp, #4
12ac8     A7 1A 62 FC | 	wrlong	arg05, fp
12acc     08 4E 85 F1 | 	sub	fp, #8
12ad0     A7 12 02 F6 | 	mov	arg01, fp
12ad4     10 E8 BF FD | 	call	#_converttoint
12ad8     18 4E 05 F1 | 	add	fp, #24
12adc     A7 FA 61 FC | 	wrlong	result1, fp
12ae0     0C 4E 85 F1 | 	sub	fp, #12
12ae4     A7 12 02 F6 | 	mov	arg01, fp
12ae8     0C 4E 85 F1 | 	sub	fp, #12
12aec     F8 E7 BF FD | 	call	#_converttoint
12af0     1C 4E 05 F1 | 	add	fp, #28
12af4     A7 FA 61 FC | 	wrlong	result1, fp
12af8     56 00 00 FF 
12afc     F0 E4 05 F1 | 	add	objptr, ##44272
12b00     F2 12 02 FB | 	rdlong	arg01, objptr
12b04     04 E4 05 F1 | 	add	objptr, #4
12b08     F2 14 02 FB | 	rdlong	arg02, objptr
12b0c     04 4E 85 F1 | 	sub	fp, #4
12b10     A7 16 02 FB | 	rdlong	arg03, fp
12b14     FD 18 02 F6 | 	mov	arg04, result1
12b18     18 4E 85 F1 | 	sub	fp, #24
12b1c     08 E4 85 F1 | 	sub	objptr, #8
12b20     F2 1A 02 FB | 	rdlong	arg05, objptr
12b24     56 00 00 FF 
12b28     EC E4 85 F1 | 	sub	objptr, ##44268
12b2c     EC 4B B0 FD | 	call	#_hg010b_spin2_draw
12b30     18 4E 05 F1 | 	add	fp, #24
12b34     A7 1A 02 FB | 	rdlong	arg05, fp
12b38     56 00 00 FF 
12b3c     F0 E4 05 F1 | 	add	objptr, ##44272
12b40     F2 1A 62 FC | 	wrlong	arg05, objptr
12b44     04 4E 05 F1 | 	add	fp, #4
12b48     A7 1A 02 FB | 	rdlong	arg05, fp
12b4c     1C 4E 85 F1 | 	sub	fp, #28
12b50     04 E4 05 F1 | 	add	objptr, #4
12b54     F2 1A 62 FC | 	wrlong	arg05, objptr
12b58     56 00 00 FF 
12b5c     F4 E4 85 F1 | 	sub	objptr, ##44276
12b60     A7 F0 03 F6 | 	mov	ptra, fp
12b64     B2 00 A0 FD | 	call	#popregs_
12b68                 | _do_draw_ret
12b68     2D 00 64 FD | 	ret
12b6c                 | 
12b6c                 | ' 
12b6c                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
12b6c                 | ' 
12b6c                 | ' sub do_fcircle
12b6c                 | _do_fcircle
12b6c     02 4A 05 F6 | 	mov	COUNT_, #2
12b70     A8 00 A0 FD | 	call	#pushregs_
12b74     24 F0 07 F1 | 	add	ptra, #36
12b78     BC 6D BF FD | 	call	#_pop
12b7c     FD 18 02 F6 | 	mov	arg04, result1
12b80     FE 16 02 F6 | 	mov	arg03, result2
12b84     FF 14 02 F6 | 	mov	arg02, result3
12b88     18 4E 05 F1 | 	add	fp, #24
12b8c     A7 18 62 FC | 	wrlong	arg04, fp
12b90     04 4E 05 F1 | 	add	fp, #4
12b94     A7 16 62 FC | 	wrlong	arg03, fp
12b98     04 4E 05 F1 | 	add	fp, #4
12b9c     A7 14 62 FC | 	wrlong	arg02, fp
12ba0     20 4E 85 F1 | 	sub	fp, #32
12ba4     90 6D BF FD | 	call	#_pop
12ba8     FD 18 02 F6 | 	mov	arg04, result1
12bac     FE 16 02 F6 | 	mov	arg03, result2
12bb0     FF 1E 02 F6 | 	mov	local01, result3
12bb4     0C 4E 05 F1 | 	add	fp, #12
12bb8     A7 18 62 FC | 	wrlong	arg04, fp
12bbc     04 4E 05 F1 | 	add	fp, #4
12bc0     A7 16 62 FC | 	wrlong	arg03, fp
12bc4     04 4E 05 F1 | 	add	fp, #4
12bc8     A7 1E 62 FC | 	wrlong	local01, fp
12bcc     14 4E 85 F1 | 	sub	fp, #20
12bd0     64 6D BF FD | 	call	#_pop
12bd4     A7 FA 61 FC | 	wrlong	result1, fp
12bd8     04 4E 05 F1 | 	add	fp, #4
12bdc     A7 FC 61 FC | 	wrlong	result2, fp
12be0     04 4E 05 F1 | 	add	fp, #4
12be4     A7 FE 61 FC | 	wrlong	result3, fp
12be8                 | ' 
12be8                 | ' t3=pop()
12be8                 | ' t2=pop()
12be8                 | ' t1=pop()
12be8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12be8     FF 18 02 F6 | 	mov	arg04, result3
12bec     08 4E 85 F1 | 	sub	fp, #8
12bf0     1C 18 0E F2 | 	cmp	arg04, #28 wz
12bf4     08 4E 05 51 |  if_ne	add	fp, #8
12bf8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12bfc     08 4E 85 51 |  if_ne	sub	fp, #8
12c00     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12c04     7C 00 90 5D |  if_ne	jmp	#LR__1460
12c08     14 4E 05 F1 | 	add	fp, #20
12c0c     A7 1E 02 FB | 	rdlong	local01, fp
12c10     14 4E 85 F1 | 	sub	fp, #20
12c14     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c18     14 4E 05 51 |  if_ne	add	fp, #20
12c1c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12c20     14 4E 85 51 |  if_ne	sub	fp, #20
12c24     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12c28     58 00 90 5D |  if_ne	jmp	#LR__1460
12c2c     20 4E 05 F1 | 	add	fp, #32
12c30     A7 1E 02 FB | 	rdlong	local01, fp
12c34     20 4E 85 F1 | 	sub	fp, #32
12c38     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c3c     20 4E 05 51 |  if_ne	add	fp, #32
12c40     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12c44     20 4E 85 51 |  if_ne	sub	fp, #32
12c48     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12c4c     34 00 90 5D |  if_ne	jmp	#LR__1460
12c50     A7 12 02 FB | 	rdlong	arg01, fp
12c54     0C 4E 05 F1 | 	add	fp, #12
12c58     A7 14 02 FB | 	rdlong	arg02, fp
12c5c     0C 4E 05 F1 | 	add	fp, #12
12c60     A7 16 02 FB | 	rdlong	arg03, fp
12c64     18 4E 85 F1 | 	sub	fp, #24
12c68     56 00 00 FF 
12c6c     EC E4 05 F1 | 	add	objptr, ##44268
12c70     F2 18 02 FB | 	rdlong	arg04, objptr
12c74     56 00 00 FF 
12c78     EC E4 85 F1 | 	sub	objptr, ##44268
12c7c     20 4F B0 FD | 	call	#_hg010b_spin2_fcircle
12c80                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12c80     54 00 90 FD | 	jmp	#LR__1461
12c84                 | LR__1460
12c84     A7 12 02 F6 | 	mov	arg01, fp
12c88     5C E6 BF FD | 	call	#_converttoint
12c8c     FD 1E 02 F6 | 	mov	local01, result1
12c90     0C 4E 05 F1 | 	add	fp, #12
12c94     A7 12 02 F6 | 	mov	arg01, fp
12c98     0C 4E 85 F1 | 	sub	fp, #12
12c9c     48 E6 BF FD | 	call	#_converttoint
12ca0     FD 20 02 F6 | 	mov	local02, result1
12ca4     18 4E 05 F1 | 	add	fp, #24
12ca8     A7 12 02 F6 | 	mov	arg01, fp
12cac     18 4E 85 F1 | 	sub	fp, #24
12cb0     34 E6 BF FD | 	call	#_converttoint
12cb4     FD 16 02 F6 | 	mov	arg03, result1
12cb8     56 00 00 FF 
12cbc     EC E4 05 F1 | 	add	objptr, ##44268
12cc0     F2 18 02 FB | 	rdlong	arg04, objptr
12cc4     56 00 00 FF 
12cc8     EC E4 85 F1 | 	sub	objptr, ##44268
12ccc     0F 13 02 F6 | 	mov	arg01, local01
12cd0     10 15 02 F6 | 	mov	arg02, local02
12cd4     C8 4E B0 FD | 	call	#_hg010b_spin2_fcircle
12cd8                 | LR__1461
12cd8     A7 F0 03 F6 | 	mov	ptra, fp
12cdc     B2 00 A0 FD | 	call	#popregs_
12ce0                 | _do_fcircle_ret
12ce0     2D 00 64 FD | 	ret
12ce4                 | 
12ce4                 | ' 
12ce4                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
12ce4                 | ' 
12ce4                 | ' sub do_circle
12ce4                 | _do_circle
12ce4     02 4A 05 F6 | 	mov	COUNT_, #2
12ce8     A8 00 A0 FD | 	call	#pushregs_
12cec     24 F0 07 F1 | 	add	ptra, #36
12cf0     44 6C BF FD | 	call	#_pop
12cf4     FD 18 02 F6 | 	mov	arg04, result1
12cf8     FE 16 02 F6 | 	mov	arg03, result2
12cfc     FF 14 02 F6 | 	mov	arg02, result3
12d00     18 4E 05 F1 | 	add	fp, #24
12d04     A7 18 62 FC | 	wrlong	arg04, fp
12d08     04 4E 05 F1 | 	add	fp, #4
12d0c     A7 16 62 FC | 	wrlong	arg03, fp
12d10     04 4E 05 F1 | 	add	fp, #4
12d14     A7 14 62 FC | 	wrlong	arg02, fp
12d18     20 4E 85 F1 | 	sub	fp, #32
12d1c     18 6C BF FD | 	call	#_pop
12d20     FD 18 02 F6 | 	mov	arg04, result1
12d24     FE 16 02 F6 | 	mov	arg03, result2
12d28     FF 1E 02 F6 | 	mov	local01, result3
12d2c     0C 4E 05 F1 | 	add	fp, #12
12d30     A7 18 62 FC | 	wrlong	arg04, fp
12d34     04 4E 05 F1 | 	add	fp, #4
12d38     A7 16 62 FC | 	wrlong	arg03, fp
12d3c     04 4E 05 F1 | 	add	fp, #4
12d40     A7 1E 62 FC | 	wrlong	local01, fp
12d44     14 4E 85 F1 | 	sub	fp, #20
12d48     EC 6B BF FD | 	call	#_pop
12d4c     A7 FA 61 FC | 	wrlong	result1, fp
12d50     04 4E 05 F1 | 	add	fp, #4
12d54     A7 FC 61 FC | 	wrlong	result2, fp
12d58     04 4E 05 F1 | 	add	fp, #4
12d5c     A7 FE 61 FC | 	wrlong	result3, fp
12d60                 | ' 
12d60                 | ' t3=pop()
12d60                 | ' t2=pop()
12d60                 | ' t1=pop()
12d60                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12d60     FF 18 02 F6 | 	mov	arg04, result3
12d64     08 4E 85 F1 | 	sub	fp, #8
12d68     1C 18 0E F2 | 	cmp	arg04, #28 wz
12d6c     08 4E 05 51 |  if_ne	add	fp, #8
12d70     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12d74     08 4E 85 51 |  if_ne	sub	fp, #8
12d78     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12d7c     7C 00 90 5D |  if_ne	jmp	#LR__1470
12d80     14 4E 05 F1 | 	add	fp, #20
12d84     A7 1E 02 FB | 	rdlong	local01, fp
12d88     14 4E 85 F1 | 	sub	fp, #20
12d8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d90     14 4E 05 51 |  if_ne	add	fp, #20
12d94     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12d98     14 4E 85 51 |  if_ne	sub	fp, #20
12d9c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12da0     58 00 90 5D |  if_ne	jmp	#LR__1470
12da4     20 4E 05 F1 | 	add	fp, #32
12da8     A7 1E 02 FB | 	rdlong	local01, fp
12dac     20 4E 85 F1 | 	sub	fp, #32
12db0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12db4     20 4E 05 51 |  if_ne	add	fp, #32
12db8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12dbc     20 4E 85 51 |  if_ne	sub	fp, #32
12dc0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12dc4     34 00 90 5D |  if_ne	jmp	#LR__1470
12dc8     A7 12 02 FB | 	rdlong	arg01, fp
12dcc     0C 4E 05 F1 | 	add	fp, #12
12dd0     A7 14 02 FB | 	rdlong	arg02, fp
12dd4     0C 4E 05 F1 | 	add	fp, #12
12dd8     A7 16 02 FB | 	rdlong	arg03, fp
12ddc     18 4E 85 F1 | 	sub	fp, #24
12de0     56 00 00 FF 
12de4     EC E4 05 F1 | 	add	objptr, ##44268
12de8     F2 18 02 FB | 	rdlong	arg04, objptr
12dec     56 00 00 FF 
12df0     EC E4 85 F1 | 	sub	objptr, ##44268
12df4     B4 4E B0 FD | 	call	#_hg010b_spin2_circle
12df8                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12df8     54 00 90 FD | 	jmp	#LR__1471
12dfc                 | LR__1470
12dfc     A7 12 02 F6 | 	mov	arg01, fp
12e00     E4 E4 BF FD | 	call	#_converttoint
12e04     FD 1E 02 F6 | 	mov	local01, result1
12e08     0C 4E 05 F1 | 	add	fp, #12
12e0c     A7 12 02 F6 | 	mov	arg01, fp
12e10     0C 4E 85 F1 | 	sub	fp, #12
12e14     D0 E4 BF FD | 	call	#_converttoint
12e18     FD 20 02 F6 | 	mov	local02, result1
12e1c     18 4E 05 F1 | 	add	fp, #24
12e20     A7 12 02 F6 | 	mov	arg01, fp
12e24     18 4E 85 F1 | 	sub	fp, #24
12e28     BC E4 BF FD | 	call	#_converttoint
12e2c     FD 16 02 F6 | 	mov	arg03, result1
12e30     56 00 00 FF 
12e34     EC E4 05 F1 | 	add	objptr, ##44268
12e38     F2 18 02 FB | 	rdlong	arg04, objptr
12e3c     56 00 00 FF 
12e40     EC E4 85 F1 | 	sub	objptr, ##44268
12e44     0F 13 02 F6 | 	mov	arg01, local01
12e48     10 15 02 F6 | 	mov	arg02, local02
12e4c     5C 4E B0 FD | 	call	#_hg010b_spin2_circle
12e50                 | LR__1471
12e50     A7 F0 03 F6 | 	mov	ptra, fp
12e54     B2 00 A0 FD | 	call	#popregs_
12e58                 | _do_circle_ret
12e58     2D 00 64 FD | 	ret
12e5c                 | 
12e5c                 | ' 
12e5c                 | ' ' -------------------------- Draw a rectangle
12e5c                 | ' 
12e5c                 | ' sub do_box
12e5c                 | _do_box
12e5c     03 4A 05 F6 | 	mov	COUNT_, #3
12e60     A8 00 A0 FD | 	call	#pushregs_
12e64     30 F0 07 F1 | 	add	ptra, #48
12e68     CC 6A BF FD | 	call	#_pop
12e6c     FD 1A 02 F6 | 	mov	arg05, result1
12e70     FE 18 02 F6 | 	mov	arg04, result2
12e74     FF 16 02 F6 | 	mov	arg03, result3
12e78     24 4E 05 F1 | 	add	fp, #36
12e7c     A7 1A 62 FC | 	wrlong	arg05, fp
12e80     04 4E 05 F1 | 	add	fp, #4
12e84     A7 18 62 FC | 	wrlong	arg04, fp
12e88     04 4E 05 F1 | 	add	fp, #4
12e8c     A7 16 62 FC | 	wrlong	arg03, fp
12e90     2C 4E 85 F1 | 	sub	fp, #44
12e94     A0 6A BF FD | 	call	#_pop
12e98     FD 1A 02 F6 | 	mov	arg05, result1
12e9c     FE 18 02 F6 | 	mov	arg04, result2
12ea0     FF 16 02 F6 | 	mov	arg03, result3
12ea4     18 4E 05 F1 | 	add	fp, #24
12ea8     A7 1A 62 FC | 	wrlong	arg05, fp
12eac     04 4E 05 F1 | 	add	fp, #4
12eb0     A7 18 62 FC | 	wrlong	arg04, fp
12eb4     04 4E 05 F1 | 	add	fp, #4
12eb8     A7 16 62 FC | 	wrlong	arg03, fp
12ebc     20 4E 85 F1 | 	sub	fp, #32
12ec0     74 6A BF FD | 	call	#_pop
12ec4     FD 1A 02 F6 | 	mov	arg05, result1
12ec8     FE 18 02 F6 | 	mov	arg04, result2
12ecc     FF 1E 02 F6 | 	mov	local01, result3
12ed0     0C 4E 05 F1 | 	add	fp, #12
12ed4     A7 1A 62 FC | 	wrlong	arg05, fp
12ed8     04 4E 05 F1 | 	add	fp, #4
12edc     A7 18 62 FC | 	wrlong	arg04, fp
12ee0     04 4E 05 F1 | 	add	fp, #4
12ee4     A7 1E 62 FC | 	wrlong	local01, fp
12ee8     14 4E 85 F1 | 	sub	fp, #20
12eec     48 6A BF FD | 	call	#_pop
12ef0     A7 FA 61 FC | 	wrlong	result1, fp
12ef4     04 4E 05 F1 | 	add	fp, #4
12ef8     A7 FC 61 FC | 	wrlong	result2, fp
12efc     04 4E 05 F1 | 	add	fp, #4
12f00     A7 FE 61 FC | 	wrlong	result3, fp
12f04                 | ' 
12f04                 | ' t4=pop()
12f04                 | ' t3=pop()
12f04                 | ' t2=pop()
12f04                 | ' t1=pop()
12f04                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12f04     FF 1A 02 F6 | 	mov	arg05, result3
12f08     08 4E 85 F1 | 	sub	fp, #8
12f0c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12f10     08 4E 05 51 |  if_ne	add	fp, #8
12f14     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12f18     08 4E 85 51 |  if_ne	sub	fp, #8
12f1c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12f20     A8 00 90 5D |  if_ne	jmp	#LR__1480
12f24     14 4E 05 F1 | 	add	fp, #20
12f28     A7 1E 02 FB | 	rdlong	local01, fp
12f2c     14 4E 85 F1 | 	sub	fp, #20
12f30     1C 1E 0E F2 | 	cmp	local01, #28 wz
12f34     14 4E 05 51 |  if_ne	add	fp, #20
12f38     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12f3c     14 4E 85 51 |  if_ne	sub	fp, #20
12f40     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12f44     84 00 90 5D |  if_ne	jmp	#LR__1480
12f48     20 4E 05 F1 | 	add	fp, #32
12f4c     A7 1E 02 FB | 	rdlong	local01, fp
12f50     20 4E 85 F1 | 	sub	fp, #32
12f54     1C 1E 0E F2 | 	cmp	local01, #28 wz
12f58     20 4E 05 51 |  if_ne	add	fp, #32
12f5c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12f60     20 4E 85 51 |  if_ne	sub	fp, #32
12f64     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12f68     60 00 90 5D |  if_ne	jmp	#LR__1480
12f6c     2C 4E 05 F1 | 	add	fp, #44
12f70     A7 1E 02 FB | 	rdlong	local01, fp
12f74     2C 4E 85 F1 | 	sub	fp, #44
12f78     1C 1E 0E F2 | 	cmp	local01, #28 wz
12f7c     2C 4E 05 51 |  if_ne	add	fp, #44
12f80     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12f84     2C 4E 85 51 |  if_ne	sub	fp, #44
12f88     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12f8c     3C 00 90 5D |  if_ne	jmp	#LR__1480
12f90     A7 12 02 FB | 	rdlong	arg01, fp
12f94     0C 4E 05 F1 | 	add	fp, #12
12f98     A7 14 02 FB | 	rdlong	arg02, fp
12f9c     0C 4E 05 F1 | 	add	fp, #12
12fa0     A7 16 02 FB | 	rdlong	arg03, fp
12fa4     0C 4E 05 F1 | 	add	fp, #12
12fa8     A7 18 02 FB | 	rdlong	arg04, fp
12fac     24 4E 85 F1 | 	sub	fp, #36
12fb0     56 00 00 FF 
12fb4     EC E4 05 F1 | 	add	objptr, ##44268
12fb8     F2 1A 02 FB | 	rdlong	arg05, objptr
12fbc     56 00 00 FF 
12fc0     EC E4 85 F1 | 	sub	objptr, ##44268
12fc4     B0 4E B0 FD | 	call	#_hg010b_spin2_box
12fc8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12fc8     6C 00 90 FD | 	jmp	#LR__1481
12fcc                 | LR__1480
12fcc     A7 12 02 F6 | 	mov	arg01, fp
12fd0     14 E3 BF FD | 	call	#_converttoint
12fd4     FD 20 02 F6 | 	mov	local02, result1
12fd8     0C 4E 05 F1 | 	add	fp, #12
12fdc     A7 12 02 F6 | 	mov	arg01, fp
12fe0     0C 4E 85 F1 | 	sub	fp, #12
12fe4     00 E3 BF FD | 	call	#_converttoint
12fe8     FD 22 02 F6 | 	mov	local03, result1
12fec     18 4E 05 F1 | 	add	fp, #24
12ff0     A7 12 02 F6 | 	mov	arg01, fp
12ff4     18 4E 85 F1 | 	sub	fp, #24
12ff8     EC E2 BF FD | 	call	#_converttoint
12ffc     FD 1E 02 F6 | 	mov	local01, result1
13000     24 4E 05 F1 | 	add	fp, #36
13004     A7 12 02 F6 | 	mov	arg01, fp
13008     24 4E 85 F1 | 	sub	fp, #36
1300c     D8 E2 BF FD | 	call	#_converttoint
13010     FD 18 02 F6 | 	mov	arg04, result1
13014     56 00 00 FF 
13018     EC E4 05 F1 | 	add	objptr, ##44268
1301c     F2 1A 02 FB | 	rdlong	arg05, objptr
13020     56 00 00 FF 
13024     EC E4 85 F1 | 	sub	objptr, ##44268
13028     10 13 02 F6 | 	mov	arg01, local02
1302c     11 15 02 F6 | 	mov	arg02, local03
13030     0F 17 02 F6 | 	mov	arg03, local01
13034     40 4E B0 FD | 	call	#_hg010b_spin2_box
13038                 | LR__1481
13038     A7 F0 03 F6 | 	mov	ptra, fp
1303c     B2 00 A0 FD | 	call	#popregs_
13040                 | _do_box_ret
13040     2D 00 64 FD | 	ret
13044                 | 
13044                 | ' 
13044                 | ' sub do_fill
13044                 | _do_fill
13044     03 4A 05 F6 | 	mov	COUNT_, #3
13048     A8 00 A0 FD | 	call	#pushregs_
1304c     30 F0 07 F1 | 	add	ptra, #48
13050     E4 68 BF FD | 	call	#_pop
13054     FD 18 02 F6 | 	mov	arg04, result1
13058     FE 16 02 F6 | 	mov	arg03, result2
1305c     FF 14 02 F6 | 	mov	arg02, result3
13060     24 4E 05 F1 | 	add	fp, #36
13064     A7 18 62 FC | 	wrlong	arg04, fp
13068     04 4E 05 F1 | 	add	fp, #4
1306c     A7 16 62 FC | 	wrlong	arg03, fp
13070     04 4E 05 F1 | 	add	fp, #4
13074     A7 14 62 FC | 	wrlong	arg02, fp
13078     2C 4E 85 F1 | 	sub	fp, #44
1307c     B8 68 BF FD | 	call	#_pop
13080     FD 18 02 F6 | 	mov	arg04, result1
13084     FE 16 02 F6 | 	mov	arg03, result2
13088     FF 14 02 F6 | 	mov	arg02, result3
1308c     18 4E 05 F1 | 	add	fp, #24
13090     A7 18 62 FC | 	wrlong	arg04, fp
13094     04 4E 05 F1 | 	add	fp, #4
13098     A7 16 62 FC | 	wrlong	arg03, fp
1309c     04 4E 05 F1 | 	add	fp, #4
130a0     A7 14 62 FC | 	wrlong	arg02, fp
130a4     20 4E 85 F1 | 	sub	fp, #32
130a8     8C 68 BF FD | 	call	#_pop
130ac     FD 18 02 F6 | 	mov	arg04, result1
130b0     FE 16 02 F6 | 	mov	arg03, result2
130b4     FF 1E 02 F6 | 	mov	local01, result3
130b8     0C 4E 05 F1 | 	add	fp, #12
130bc     A7 18 62 FC | 	wrlong	arg04, fp
130c0     04 4E 05 F1 | 	add	fp, #4
130c4     A7 16 62 FC | 	wrlong	arg03, fp
130c8     04 4E 05 F1 | 	add	fp, #4
130cc     A7 1E 62 FC | 	wrlong	local01, fp
130d0     14 4E 85 F1 | 	sub	fp, #20
130d4     60 68 BF FD | 	call	#_pop
130d8     A7 FA 61 FC | 	wrlong	result1, fp
130dc     04 4E 05 F1 | 	add	fp, #4
130e0     A7 FC 61 FC | 	wrlong	result2, fp
130e4     04 4E 05 F1 | 	add	fp, #4
130e8     A7 FE 61 FC | 	wrlong	result3, fp
130ec                 | ' 
130ec                 | ' t4=pop()
130ec                 | ' t3=pop()
130ec                 | ' t2=pop()
130ec                 | ' t1=pop()
130ec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
130ec     FF 18 02 F6 | 	mov	arg04, result3
130f0     08 4E 85 F1 | 	sub	fp, #8
130f4     1C 18 0E F2 | 	cmp	arg04, #28 wz
130f8     08 4E 05 51 |  if_ne	add	fp, #8
130fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13100     08 4E 85 51 |  if_ne	sub	fp, #8
13104     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13108     94 00 90 5D |  if_ne	jmp	#LR__1490
1310c     14 4E 05 F1 | 	add	fp, #20
13110     A7 1E 02 FB | 	rdlong	local01, fp
13114     14 4E 85 F1 | 	sub	fp, #20
13118     1C 1E 0E F2 | 	cmp	local01, #28 wz
1311c     14 4E 05 51 |  if_ne	add	fp, #20
13120     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13124     14 4E 85 51 |  if_ne	sub	fp, #20
13128     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1312c     70 00 90 5D |  if_ne	jmp	#LR__1490
13130     20 4E 05 F1 | 	add	fp, #32
13134     A7 1E 02 FB | 	rdlong	local01, fp
13138     20 4E 85 F1 | 	sub	fp, #32
1313c     1C 1E 0E F2 | 	cmp	local01, #28 wz
13140     20 4E 05 51 |  if_ne	add	fp, #32
13144     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13148     20 4E 85 51 |  if_ne	sub	fp, #32
1314c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13150     4C 00 90 5D |  if_ne	jmp	#LR__1490
13154     2C 4E 05 F1 | 	add	fp, #44
13158     A7 1E 02 FB | 	rdlong	local01, fp
1315c     2C 4E 85 F1 | 	sub	fp, #44
13160     1C 1E 0E F2 | 	cmp	local01, #28 wz
13164     2C 4E 05 51 |  if_ne	add	fp, #44
13168     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1316c     2C 4E 85 51 |  if_ne	sub	fp, #44
13170     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13174     28 00 90 5D |  if_ne	jmp	#LR__1490
13178     A7 12 02 FB | 	rdlong	arg01, fp
1317c     0C 4E 05 F1 | 	add	fp, #12
13180     A7 14 02 FB | 	rdlong	arg02, fp
13184     0C 4E 05 F1 | 	add	fp, #12
13188     A7 16 02 FB | 	rdlong	arg03, fp
1318c     0C 4E 05 F1 | 	add	fp, #12
13190     A7 18 02 FB | 	rdlong	arg04, fp
13194     24 4E 85 F1 | 	sub	fp, #36
13198     70 47 B0 FD | 	call	#_hg010b_spin2_fill
1319c                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
1319c     58 00 90 FD | 	jmp	#LR__1491
131a0                 | LR__1490
131a0     A7 12 02 F6 | 	mov	arg01, fp
131a4     40 E1 BF FD | 	call	#_converttoint
131a8     FD 20 02 F6 | 	mov	local02, result1
131ac     0C 4E 05 F1 | 	add	fp, #12
131b0     A7 12 02 F6 | 	mov	arg01, fp
131b4     0C 4E 85 F1 | 	sub	fp, #12
131b8     2C E1 BF FD | 	call	#_converttoint
131bc     FD 22 02 F6 | 	mov	local03, result1
131c0     18 4E 05 F1 | 	add	fp, #24
131c4     A7 12 02 F6 | 	mov	arg01, fp
131c8     18 4E 85 F1 | 	sub	fp, #24
131cc     18 E1 BF FD | 	call	#_converttoint
131d0     FD 1E 02 F6 | 	mov	local01, result1
131d4     24 4E 05 F1 | 	add	fp, #36
131d8     A7 12 02 F6 | 	mov	arg01, fp
131dc     24 4E 85 F1 | 	sub	fp, #36
131e0     04 E1 BF FD | 	call	#_converttoint
131e4     FD 18 02 F6 | 	mov	arg04, result1
131e8     10 13 02 F6 | 	mov	arg01, local02
131ec     11 15 02 F6 | 	mov	arg02, local03
131f0     0F 17 02 F6 | 	mov	arg03, local01
131f4     14 47 B0 FD | 	call	#_hg010b_spin2_fill
131f8                 | LR__1491
131f8     A7 F0 03 F6 | 	mov	ptra, fp
131fc     B2 00 A0 FD | 	call	#popregs_
13200                 | _do_fill_ret
13200     2D 00 64 FD | 	ret
13204                 | 
13204                 | ' 
13204                 | ' ' -------------------------- Draw a frane
13204                 | ' 
13204                 | ' sub do_frame
13204                 | _do_frame
13204     03 4A 05 F6 | 	mov	COUNT_, #3
13208     A8 00 A0 FD | 	call	#pushregs_
1320c     30 F0 07 F1 | 	add	ptra, #48
13210     24 67 BF FD | 	call	#_pop
13214     FD 1A 02 F6 | 	mov	arg05, result1
13218     FE 18 02 F6 | 	mov	arg04, result2
1321c     FF 16 02 F6 | 	mov	arg03, result3
13220     24 4E 05 F1 | 	add	fp, #36
13224     A7 1A 62 FC | 	wrlong	arg05, fp
13228     04 4E 05 F1 | 	add	fp, #4
1322c     A7 18 62 FC | 	wrlong	arg04, fp
13230     04 4E 05 F1 | 	add	fp, #4
13234     A7 16 62 FC | 	wrlong	arg03, fp
13238     2C 4E 85 F1 | 	sub	fp, #44
1323c     F8 66 BF FD | 	call	#_pop
13240     FD 1A 02 F6 | 	mov	arg05, result1
13244     FE 18 02 F6 | 	mov	arg04, result2
13248     FF 16 02 F6 | 	mov	arg03, result3
1324c     18 4E 05 F1 | 	add	fp, #24
13250     A7 1A 62 FC | 	wrlong	arg05, fp
13254     04 4E 05 F1 | 	add	fp, #4
13258     A7 18 62 FC | 	wrlong	arg04, fp
1325c     04 4E 05 F1 | 	add	fp, #4
13260     A7 16 62 FC | 	wrlong	arg03, fp
13264     20 4E 85 F1 | 	sub	fp, #32
13268     CC 66 BF FD | 	call	#_pop
1326c     FD 1A 02 F6 | 	mov	arg05, result1
13270     FE 18 02 F6 | 	mov	arg04, result2
13274     FF 1E 02 F6 | 	mov	local01, result3
13278     0C 4E 05 F1 | 	add	fp, #12
1327c     A7 1A 62 FC | 	wrlong	arg05, fp
13280     04 4E 05 F1 | 	add	fp, #4
13284     A7 18 62 FC | 	wrlong	arg04, fp
13288     04 4E 05 F1 | 	add	fp, #4
1328c     A7 1E 62 FC | 	wrlong	local01, fp
13290     14 4E 85 F1 | 	sub	fp, #20
13294     A0 66 BF FD | 	call	#_pop
13298     A7 FA 61 FC | 	wrlong	result1, fp
1329c     04 4E 05 F1 | 	add	fp, #4
132a0     A7 FC 61 FC | 	wrlong	result2, fp
132a4     04 4E 05 F1 | 	add	fp, #4
132a8     A7 FE 61 FC | 	wrlong	result3, fp
132ac                 | ' 
132ac                 | ' t4=pop()
132ac                 | ' t3=pop()
132ac                 | ' t2=pop()
132ac                 | ' t1=pop()
132ac                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
132ac     FF 1A 02 F6 | 	mov	arg05, result3
132b0     08 4E 85 F1 | 	sub	fp, #8
132b4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
132b8     08 4E 05 51 |  if_ne	add	fp, #8
132bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
132c0     08 4E 85 51 |  if_ne	sub	fp, #8
132c4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
132c8     A8 00 90 5D |  if_ne	jmp	#LR__1500
132cc     14 4E 05 F1 | 	add	fp, #20
132d0     A7 1E 02 FB | 	rdlong	local01, fp
132d4     14 4E 85 F1 | 	sub	fp, #20
132d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
132dc     14 4E 05 51 |  if_ne	add	fp, #20
132e0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
132e4     14 4E 85 51 |  if_ne	sub	fp, #20
132e8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
132ec     84 00 90 5D |  if_ne	jmp	#LR__1500
132f0     20 4E 05 F1 | 	add	fp, #32
132f4     A7 1E 02 FB | 	rdlong	local01, fp
132f8     20 4E 85 F1 | 	sub	fp, #32
132fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
13300     20 4E 05 51 |  if_ne	add	fp, #32
13304     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13308     20 4E 85 51 |  if_ne	sub	fp, #32
1330c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13310     60 00 90 5D |  if_ne	jmp	#LR__1500
13314     2C 4E 05 F1 | 	add	fp, #44
13318     A7 1E 02 FB | 	rdlong	local01, fp
1331c     2C 4E 85 F1 | 	sub	fp, #44
13320     1C 1E 0E F2 | 	cmp	local01, #28 wz
13324     2C 4E 05 51 |  if_ne	add	fp, #44
13328     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1332c     2C 4E 85 51 |  if_ne	sub	fp, #44
13330     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13334     3C 00 90 5D |  if_ne	jmp	#LR__1500
13338     A7 12 02 FB | 	rdlong	arg01, fp
1333c     0C 4E 05 F1 | 	add	fp, #12
13340     A7 14 02 FB | 	rdlong	arg02, fp
13344     0C 4E 05 F1 | 	add	fp, #12
13348     A7 16 02 FB | 	rdlong	arg03, fp
1334c     0C 4E 05 F1 | 	add	fp, #12
13350     A7 18 02 FB | 	rdlong	arg04, fp
13354     24 4E 85 F1 | 	sub	fp, #36
13358     56 00 00 FF 
1335c     EC E4 05 F1 | 	add	objptr, ##44268
13360     F2 1A 02 FB | 	rdlong	arg05, objptr
13364     56 00 00 FF 
13368     EC E4 85 F1 | 	sub	objptr, ##44268
1336c     88 4A B0 FD | 	call	#_hg010b_spin2_frame
13370                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
13370     6C 00 90 FD | 	jmp	#LR__1501
13374                 | LR__1500
13374     A7 12 02 F6 | 	mov	arg01, fp
13378     6C DF BF FD | 	call	#_converttoint
1337c     FD 20 02 F6 | 	mov	local02, result1
13380     0C 4E 05 F1 | 	add	fp, #12
13384     A7 12 02 F6 | 	mov	arg01, fp
13388     0C 4E 85 F1 | 	sub	fp, #12
1338c     58 DF BF FD | 	call	#_converttoint
13390     FD 22 02 F6 | 	mov	local03, result1
13394     18 4E 05 F1 | 	add	fp, #24
13398     A7 12 02 F6 | 	mov	arg01, fp
1339c     18 4E 85 F1 | 	sub	fp, #24
133a0     44 DF BF FD | 	call	#_converttoint
133a4     FD 1E 02 F6 | 	mov	local01, result1
133a8     24 4E 05 F1 | 	add	fp, #36
133ac     A7 12 02 F6 | 	mov	arg01, fp
133b0     24 4E 85 F1 | 	sub	fp, #36
133b4     30 DF BF FD | 	call	#_converttoint
133b8     FD 18 02 F6 | 	mov	arg04, result1
133bc     56 00 00 FF 
133c0     EC E4 05 F1 | 	add	objptr, ##44268
133c4     F2 1A 02 FB | 	rdlong	arg05, objptr
133c8     56 00 00 FF 
133cc     EC E4 85 F1 | 	sub	objptr, ##44268
133d0     10 13 02 F6 | 	mov	arg01, local02
133d4     11 15 02 F6 | 	mov	arg02, local03
133d8     0F 17 02 F6 | 	mov	arg03, local01
133dc     18 4A B0 FD | 	call	#_hg010b_spin2_frame
133e0                 | LR__1501
133e0     A7 F0 03 F6 | 	mov	ptra, fp
133e4     B2 00 A0 FD | 	call	#popregs_
133e8                 | _do_frame_ret
133e8     2D 00 64 FD | 	ret
133ec                 | 
133ec                 | ' 
133ec                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
133ec                 | ' 
133ec                 | ' ' ------------------------- Print to the screem
133ec                 | ' 
133ec                 | ' sub do_print  
133ec                 | _do_print
133ec     0A 4A 05 F6 | 	mov	COUNT_, #10
133f0     A8 00 A0 FD | 	call	#pushregs_
133f4     00 24 06 F6 | 	mov	local04, #0
133f8     3C 65 BF FD | 	call	#_pop
133fc     FD 26 02 F6 | 	mov	local05, result1
13400     FE 28 02 F6 | 	mov	local06, result2
13404     FF 2A 02 F6 | 	mov	local07, result3
13408     13 1F 02 F6 | 	mov	local01, local05
1340c     14 21 02 F6 | 	mov	local02, local06
13410     15 23 02 F6 | 	mov	local03, local07
13414                 | '  
13414                 | ' r=0
13414                 | ' t1=pop() 
13414                 | ' 'print t1.result_type,t1.result.uresult
13414                 | ' 
13414                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
13414     21 22 0E F2 | 	cmp	local03, #33 wz
13418     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
1341c     20 00 90 5D |  if_ne	jmp	#LR__1510
13420     11 25 02 F6 | 	mov	local04, local03
13424     10 65 BF FD | 	call	#_pop
13428     FD 26 02 F6 | 	mov	local05, result1
1342c     FE 28 02 F6 | 	mov	local06, result2
13430     FF 2A 02 F6 | 	mov	local07, result3
13434     13 1F 02 F6 | 	mov	local01, local05
13438     14 21 02 F6 | 	mov	local02, local06
1343c     15 23 02 F6 | 	mov	local03, local07
13440                 | LR__1510
13440                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
13440     20 22 0E F2 | 	cmp	local03, #32 wz
13444     11 25 02 A6 |  if_e	mov	local04, local03
13448                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
13448     FF 22 0E F2 | 	cmp	local03, #255 wz
1344c     0C 00 90 5D |  if_ne	jmp	#LR__1511
13450     0F 13 02 F6 | 	mov	arg01, local01
13454     24 2A B0 FD | 	call	#_printerror
13458     4C 04 90 FD | 	jmp	#LR__1529
1345c                 | LR__1511
1345c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
1345c     2B 22 0E F2 | 	cmp	local03, #43 wz
13460     14 00 90 5D |  if_ne	jmp	#LR__1512
13464     0F 13 02 F6 | 	mov	arg01, local01
13468     48 9A BF FD | 	call	#_convertstring
1346c     FD 26 02 F6 | 	mov	local05, result1
13470     13 1F 02 F6 | 	mov	local01, local05
13474     1F 22 06 F6 | 	mov	local03, #31
13478                 | LR__1512
13478                 | ' 
13478                 | ' if r=print_mod_comma  then
13478     21 24 0E F2 | 	cmp	local04, #33 wz
1347c     AC 01 90 5D |  if_ne	jmp	#LR__1517
13480                 | '   if t1.result_type=result_int then print t1.result.iresult,
13480     1C 22 0E F2 | 	cmp	local03, #28 wz
13484     64 00 90 5D |  if_ne	jmp	#LR__1513
13488     00 12 06 F6 | 	mov	arg01, #0
1348c     AC B8 B0 FD | 	call	#__system___getiolock_0425
13490     FD 12 02 F6 | 	mov	arg01, result1
13494     A0 5F B0 FD | 	call	#__system___lockmem
13498     00 28 06 F6 | 	mov	local06, #0
1349c     00 12 06 F6 | 	mov	arg01, #0
134a0     0F 15 02 F6 | 	mov	arg02, local01
134a4     00 16 06 F6 | 	mov	arg03, #0
134a8     0A 18 06 F6 | 	mov	arg04, #10
134ac     C0 6C B0 FD | 	call	#__system___basic_print_integer
134b0     FD 2A 02 F6 | 	mov	local07, result1
134b4     14 27 02 F6 | 	mov	local05, local06
134b8     15 27 02 F1 | 	add	local05, local07
134bc     00 2C 06 F6 | 	mov	local08, #0
134c0     00 12 06 F6 | 	mov	arg01, #0
134c4     09 14 06 F6 | 	mov	arg02, #9
134c8     00 16 06 F6 | 	mov	arg03, #0
134cc     04 6C B0 FD | 	call	#__system___basic_print_char
134d0     FD 2E 02 F6 | 	mov	local09, result1
134d4     FD 26 02 F1 | 	add	local05, result1
134d8     00 12 06 F6 | 	mov	arg01, #0
134dc     5C B8 B0 FD | 	call	#__system___getiolock_0425
134e0     FD 00 68 FC | 	wrlong	#0, result1
134e4     00 FA 05 F6 | 	mov	result1, #0
134e8     00 30 06 F6 | 	mov	local10, #0
134ec                 | LR__1513
134ec                 | '   if t1.result_type=result_uint then print t1.result.uresult,
134ec     1D 22 0E F2 | 	cmp	local03, #29 wz
134f0     64 00 90 5D |  if_ne	jmp	#LR__1514
134f4     00 12 06 F6 | 	mov	arg01, #0
134f8     40 B8 B0 FD | 	call	#__system___getiolock_0425
134fc     FD 12 02 F6 | 	mov	arg01, result1
13500     34 5F B0 FD | 	call	#__system___lockmem
13504     00 28 06 F6 | 	mov	local06, #0
13508     00 12 06 F6 | 	mov	arg01, #0
1350c     0F 15 02 F6 | 	mov	arg02, local01
13510     00 16 06 F6 | 	mov	arg03, #0
13514     0A 18 06 F6 | 	mov	arg04, #10
13518     94 6C B0 FD | 	call	#__system___basic_print_unsigned
1351c     FD 2A 02 F6 | 	mov	local07, result1
13520     14 27 02 F6 | 	mov	local05, local06
13524     15 27 02 F1 | 	add	local05, local07
13528     00 2C 06 F6 | 	mov	local08, #0
1352c     00 12 06 F6 | 	mov	arg01, #0
13530     09 14 06 F6 | 	mov	arg02, #9
13534     00 16 06 F6 | 	mov	arg03, #0
13538     98 6B B0 FD | 	call	#__system___basic_print_char
1353c     FD 2E 02 F6 | 	mov	local09, result1
13540     FD 26 02 F1 | 	add	local05, result1
13544     00 12 06 F6 | 	mov	arg01, #0
13548     F0 B7 B0 FD | 	call	#__system___getiolock_0425
1354c     FD 00 68 FC | 	wrlong	#0, result1
13550     00 FA 05 F6 | 	mov	result1, #0
13554     00 30 06 F6 | 	mov	local10, #0
13558                 | LR__1514
13558                 | '   if t1.result_type=result_float then print t1.result.fresult,
13558     1E 22 0E F2 | 	cmp	local03, #30 wz
1355c     64 00 90 5D |  if_ne	jmp	#LR__1515
13560     00 12 06 F6 | 	mov	arg01, #0
13564     D4 B7 B0 FD | 	call	#__system___getiolock_0425
13568     FD 12 02 F6 | 	mov	arg01, result1
1356c     C8 5E B0 FD | 	call	#__system___lockmem
13570     00 28 06 F6 | 	mov	local06, #0
13574     00 12 06 F6 | 	mov	arg01, #0
13578     0F 15 02 F6 | 	mov	arg02, local01
1357c     00 16 06 F6 | 	mov	arg03, #0
13580     23 18 06 F6 | 	mov	arg04, #35
13584     B4 8F B0 FD | 	call	#__system___basic_print_float
13588     FD 2A 02 F6 | 	mov	local07, result1
1358c     14 27 02 F6 | 	mov	local05, local06
13590     15 27 02 F1 | 	add	local05, local07
13594     00 2C 06 F6 | 	mov	local08, #0
13598     00 12 06 F6 | 	mov	arg01, #0
1359c     09 14 06 F6 | 	mov	arg02, #9
135a0     00 16 06 F6 | 	mov	arg03, #0
135a4     2C 6B B0 FD | 	call	#__system___basic_print_char
135a8     FD 2E 02 F6 | 	mov	local09, result1
135ac     FD 26 02 F1 | 	add	local05, result1
135b0     00 12 06 F6 | 	mov	arg01, #0
135b4     84 B7 B0 FD | 	call	#__system___getiolock_0425
135b8     FD 00 68 FC | 	wrlong	#0, result1
135bc     00 FA 05 F6 | 	mov	result1, #0
135c0     00 30 06 F6 | 	mov	local10, #0
135c4                 | LR__1515
135c4                 | '   if t1.result_type=result_string then print t1.result.sresult,
135c4     1F 22 0E F2 | 	cmp	local03, #31 wz
135c8     60 00 90 5D |  if_ne	jmp	#LR__1516
135cc     00 12 06 F6 | 	mov	arg01, #0
135d0     68 B7 B0 FD | 	call	#__system___getiolock_0425
135d4     FD 12 02 F6 | 	mov	arg01, result1
135d8     5C 5E B0 FD | 	call	#__system___lockmem
135dc     00 28 06 F6 | 	mov	local06, #0
135e0     00 12 06 F6 | 	mov	arg01, #0
135e4     0F 15 02 F6 | 	mov	arg02, local01
135e8     00 16 06 F6 | 	mov	arg03, #0
135ec     3C 6B B0 FD | 	call	#__system___basic_print_string
135f0     FD 2A 02 F6 | 	mov	local07, result1
135f4     14 27 02 F6 | 	mov	local05, local06
135f8     15 27 02 F1 | 	add	local05, local07
135fc     00 2C 06 F6 | 	mov	local08, #0
13600     00 12 06 F6 | 	mov	arg01, #0
13604     09 14 06 F6 | 	mov	arg02, #9
13608     00 16 06 F6 | 	mov	arg03, #0
1360c     C4 6A B0 FD | 	call	#__system___basic_print_char
13610     FD 2E 02 F6 | 	mov	local09, result1
13614     FD 26 02 F1 | 	add	local05, result1
13618     00 12 06 F6 | 	mov	arg01, #0
1361c     1C B7 B0 FD | 	call	#__system___getiolock_0425
13620     FD 00 68 FC | 	wrlong	#0, result1
13624     00 FA 05 F6 | 	mov	result1, #0
13628     00 30 06 F6 | 	mov	local10, #0
1362c                 | LR__1516
1362c                 | LR__1517
1362c                 | ' if r=print_mod_semicolon then 
1362c     22 24 0E F2 | 	cmp	local04, #34 wz
13630     1C 01 90 5D |  if_ne	jmp	#LR__1522
13634                 | '   if t1.result_type=result_int then print t1.result.iresult;
13634     1C 22 0E F2 | 	cmp	local03, #28 wz
13638     50 00 90 5D |  if_ne	jmp	#LR__1518
1363c     00 12 06 F6 | 	mov	arg01, #0
13640     F8 B6 B0 FD | 	call	#__system___getiolock_0425
13644     FD 12 02 F6 | 	mov	arg01, result1
13648     EC 5D B0 FD | 	call	#__system___lockmem
1364c     00 28 06 F6 | 	mov	local06, #0
13650     00 30 06 F6 | 	mov	local10, #0
13654     0A 2C 06 F6 | 	mov	local08, #10
13658     00 12 06 F6 | 	mov	arg01, #0
1365c     0F 15 02 F6 | 	mov	arg02, local01
13660     00 16 06 F6 | 	mov	arg03, #0
13664     0A 18 06 F6 | 	mov	arg04, #10
13668     04 6B B0 FD | 	call	#__system___basic_print_integer
1366c     FD 2A 02 F6 | 	mov	local07, result1
13670     14 27 02 F6 | 	mov	local05, local06
13674     15 27 02 F1 | 	add	local05, local07
13678     00 12 06 F6 | 	mov	arg01, #0
1367c     BC B6 B0 FD | 	call	#__system___getiolock_0425
13680     FD 00 68 FC | 	wrlong	#0, result1
13684     00 FA 05 F6 | 	mov	result1, #0
13688     00 2E 06 F6 | 	mov	local09, #0
1368c                 | LR__1518
1368c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1368c     1D 22 0E F2 | 	cmp	local03, #29 wz
13690     50 00 90 5D |  if_ne	jmp	#LR__1519
13694     00 12 06 F6 | 	mov	arg01, #0
13698     A0 B6 B0 FD | 	call	#__system___getiolock_0425
1369c     FD 12 02 F6 | 	mov	arg01, result1
136a0     94 5D B0 FD | 	call	#__system___lockmem
136a4     00 28 06 F6 | 	mov	local06, #0
136a8     00 30 06 F6 | 	mov	local10, #0
136ac     0A 2C 06 F6 | 	mov	local08, #10
136b0     00 12 06 F6 | 	mov	arg01, #0
136b4     0F 15 02 F6 | 	mov	arg02, local01
136b8     00 16 06 F6 | 	mov	arg03, #0
136bc     0A 18 06 F6 | 	mov	arg04, #10
136c0     EC 6A B0 FD | 	call	#__system___basic_print_unsigned
136c4     FD 2A 02 F6 | 	mov	local07, result1
136c8     14 27 02 F6 | 	mov	local05, local06
136cc     15 27 02 F1 | 	add	local05, local07
136d0     00 12 06 F6 | 	mov	arg01, #0
136d4     64 B6 B0 FD | 	call	#__system___getiolock_0425
136d8     FD 00 68 FC | 	wrlong	#0, result1
136dc     00 FA 05 F6 | 	mov	result1, #0
136e0     00 2E 06 F6 | 	mov	local09, #0
136e4                 | LR__1519
136e4                 | '   if t1.result_type=result_float then print t1.result.fresult;
136e4     1E 22 0E F2 | 	cmp	local03, #30 wz
136e8     30 00 90 5D |  if_ne	jmp	#LR__1520
136ec     00 12 06 F6 | 	mov	arg01, #0
136f0     48 B6 B0 FD | 	call	#__system___getiolock_0425
136f4     FD 12 02 F6 | 	mov	arg01, result1
136f8     3C 5D B0 FD | 	call	#__system___lockmem
136fc     00 12 06 F6 | 	mov	arg01, #0
13700     0F 15 02 F6 | 	mov	arg02, local01
13704     00 16 06 F6 | 	mov	arg03, #0
13708     23 18 06 F6 | 	mov	arg04, #35
1370c     2C 8E B0 FD | 	call	#__system___basic_print_float
13710     00 12 06 F6 | 	mov	arg01, #0
13714     24 B6 B0 FD | 	call	#__system___getiolock_0425
13718     FD 00 68 FC | 	wrlong	#0, result1
1371c                 | LR__1520
1371c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1371c     1F 22 0E F2 | 	cmp	local03, #31 wz
13720     2C 00 90 5D |  if_ne	jmp	#LR__1521
13724     00 12 06 F6 | 	mov	arg01, #0
13728     10 B6 B0 FD | 	call	#__system___getiolock_0425
1372c     FD 12 02 F6 | 	mov	arg01, result1
13730     04 5D B0 FD | 	call	#__system___lockmem
13734     00 12 06 F6 | 	mov	arg01, #0
13738     0F 15 02 F6 | 	mov	arg02, local01
1373c     00 16 06 F6 | 	mov	arg03, #0
13740     E8 69 B0 FD | 	call	#__system___basic_print_string
13744     00 12 06 F6 | 	mov	arg01, #0
13748     F0 B5 B0 FD | 	call	#__system___getiolock_0425
1374c     FD 00 68 FC | 	wrlong	#0, result1
13750                 | LR__1521
13750                 | LR__1522
13750                 | ' if r=0 then 
13750     00 24 0E F2 | 	cmp	local04, #0 wz
13754     1C 01 90 5D |  if_ne	jmp	#LR__1527
13758                 | '   if t1.result_type=result_int then print t1.result.iresult
13758     1C 22 0E F2 | 	cmp	local03, #28 wz
1375c     40 00 90 5D |  if_ne	jmp	#LR__1523
13760     00 12 06 F6 | 	mov	arg01, #0
13764     D4 B5 B0 FD | 	call	#__system___getiolock_0425
13768     FD 12 02 F6 | 	mov	arg01, result1
1376c     C8 5C B0 FD | 	call	#__system___lockmem
13770     00 12 06 F6 | 	mov	arg01, #0
13774     0F 15 02 F6 | 	mov	arg02, local01
13778     00 16 06 F6 | 	mov	arg03, #0
1377c     0A 18 06 F6 | 	mov	arg04, #10
13780     EC 69 B0 FD | 	call	#__system___basic_print_integer
13784     00 12 06 F6 | 	mov	arg01, #0
13788     0A 14 06 F6 | 	mov	arg02, #10
1378c     00 16 06 F6 | 	mov	arg03, #0
13790     40 69 B0 FD | 	call	#__system___basic_print_char
13794     00 12 06 F6 | 	mov	arg01, #0
13798     A0 B5 B0 FD | 	call	#__system___getiolock_0425
1379c     FD 00 68 FC | 	wrlong	#0, result1
137a0                 | LR__1523
137a0                 | '   if t1.result_type=result_uint then print t1.result.uresult
137a0     1D 22 0E F2 | 	cmp	local03, #29 wz
137a4     40 00 90 5D |  if_ne	jmp	#LR__1524
137a8     00 12 06 F6 | 	mov	arg01, #0
137ac     8C B5 B0 FD | 	call	#__system___getiolock_0425
137b0     FD 12 02 F6 | 	mov	arg01, result1
137b4     80 5C B0 FD | 	call	#__system___lockmem
137b8     00 12 06 F6 | 	mov	arg01, #0
137bc     0F 15 02 F6 | 	mov	arg02, local01
137c0     00 16 06 F6 | 	mov	arg03, #0
137c4     0A 18 06 F6 | 	mov	arg04, #10
137c8     E4 69 B0 FD | 	call	#__system___basic_print_unsigned
137cc     00 12 06 F6 | 	mov	arg01, #0
137d0     0A 14 06 F6 | 	mov	arg02, #10
137d4     00 16 06 F6 | 	mov	arg03, #0
137d8     F8 68 B0 FD | 	call	#__system___basic_print_char
137dc     00 12 06 F6 | 	mov	arg01, #0
137e0     58 B5 B0 FD | 	call	#__system___getiolock_0425
137e4     FD 00 68 FC | 	wrlong	#0, result1
137e8                 | LR__1524
137e8                 | '   if t1.result_type=result_float then print t1.result.fresult
137e8     1E 22 0E F2 | 	cmp	local03, #30 wz
137ec     40 00 90 5D |  if_ne	jmp	#LR__1525
137f0     00 12 06 F6 | 	mov	arg01, #0
137f4     44 B5 B0 FD | 	call	#__system___getiolock_0425
137f8     FD 12 02 F6 | 	mov	arg01, result1
137fc     38 5C B0 FD | 	call	#__system___lockmem
13800     00 12 06 F6 | 	mov	arg01, #0
13804     0F 15 02 F6 | 	mov	arg02, local01
13808     00 16 06 F6 | 	mov	arg03, #0
1380c     23 18 06 F6 | 	mov	arg04, #35
13810     28 8D B0 FD | 	call	#__system___basic_print_float
13814     00 12 06 F6 | 	mov	arg01, #0
13818     0A 14 06 F6 | 	mov	arg02, #10
1381c     00 16 06 F6 | 	mov	arg03, #0
13820     B0 68 B0 FD | 	call	#__system___basic_print_char
13824     00 12 06 F6 | 	mov	arg01, #0
13828     10 B5 B0 FD | 	call	#__system___getiolock_0425
1382c     FD 00 68 FC | 	wrlong	#0, result1
13830                 | LR__1525
13830                 | '   if t1.result_type=result_string then print t1.result.sresult
13830     1F 22 0E F2 | 	cmp	local03, #31 wz
13834     3C 00 90 5D |  if_ne	jmp	#LR__1526
13838     00 12 06 F6 | 	mov	arg01, #0
1383c     FC B4 B0 FD | 	call	#__system___getiolock_0425
13840     FD 12 02 F6 | 	mov	arg01, result1
13844     F0 5B B0 FD | 	call	#__system___lockmem
13848     00 12 06 F6 | 	mov	arg01, #0
1384c     0F 15 02 F6 | 	mov	arg02, local01
13850     00 16 06 F6 | 	mov	arg03, #0
13854     D4 68 B0 FD | 	call	#__system___basic_print_string
13858     00 12 06 F6 | 	mov	arg01, #0
1385c     0A 14 06 F6 | 	mov	arg02, #10
13860     00 16 06 F6 | 	mov	arg03, #0
13864     6C 68 B0 FD | 	call	#__system___basic_print_char
13868     00 12 06 F6 | 	mov	arg01, #0
1386c     CC B4 B0 FD | 	call	#__system___getiolock_0425
13870     FD 00 68 FC | 	wrlong	#0, result1
13874                 | LR__1526
13874                 | LR__1527
13874                 | ' if r=print_mod_empty then print
13874     20 24 0E F2 | 	cmp	local04, #32 wz
13878     2C 00 90 5D |  if_ne	jmp	#LR__1528
1387c     00 12 06 F6 | 	mov	arg01, #0
13880     B8 B4 B0 FD | 	call	#__system___getiolock_0425
13884     FD 12 02 F6 | 	mov	arg01, result1
13888     AC 5B B0 FD | 	call	#__system___lockmem
1388c     00 12 06 F6 | 	mov	arg01, #0
13890     0A 14 06 F6 | 	mov	arg02, #10
13894     00 16 06 F6 | 	mov	arg03, #0
13898     38 68 B0 FD | 	call	#__system___basic_print_char
1389c     00 12 06 F6 | 	mov	arg01, #0
138a0     98 B4 B0 FD | 	call	#__system___getiolock_0425
138a4     FD 00 68 FC | 	wrlong	#0, result1
138a8                 | LR__1528
138a8                 | LR__1529
138a8     A7 F0 03 F6 | 	mov	ptra, fp
138ac     B2 00 A0 FD | 	call	#popregs_
138b0                 | _do_print_ret
138b0     2D 00 64 FD | 	ret
138b4                 | 
138b4                 | ' 
138b4                 | ' 
138b4                 | ' sub do_paper
138b4                 | _do_paper
138b4     03 4A 05 F6 | 	mov	COUNT_, #3
138b8     A8 00 A0 FD | 	call	#pushregs_
138bc     78 60 BF FD | 	call	#_pop
138c0     FD 1E 02 F6 | 	mov	local01, result1
138c4     FE 20 02 F6 | 	mov	local02, result2
138c8     FF 22 02 F6 | 	mov	local03, result3
138cc                 | ' t1=pop() 
138cc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
138cc     1E 22 0E F2 | 	cmp	local03, #30 wz
138d0     10 00 90 5D |  if_ne	jmp	#LR__1530
138d4     0F 13 02 F6 | 	mov	arg01, local01
138d8     00 14 06 F6 | 	mov	arg02, #0
138dc     0C 8B B0 FD | 	call	#__system___float_tointeger
138e0     FD 1E 02 F6 | 	mov	local01, result1
138e4                 | LR__1530
138e4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
138e4     1F 22 0E F2 | 	cmp	local03, #31 wz
138e8     18 00 90 5D |  if_ne	jmp	#LR__1531
138ec     0F 13 02 F6 | 	mov	arg01, local01
138f0     18 8E B0 FD | 	call	#__system____builtin_atof
138f4     FD 12 02 F6 | 	mov	arg01, result1
138f8     00 14 06 F6 | 	mov	arg02, #0
138fc     EC 8A B0 FD | 	call	#__system___float_tointeger
13900     FD 1E 02 F6 | 	mov	local01, result1
13904                 | LR__1531
13904     56 00 00 FF 
13908     FC E4 05 F1 | 	add	objptr, ##44284
1390c     F2 1E 62 FC | 	wrlong	local01, objptr
13910     04 E4 05 F1 | 	add	objptr, #4
13914     F2 12 02 FB | 	rdlong	arg01, objptr
13918                 | ' 
13918                 | ' write_color:=ff
13918     56 00 00 FF 
1391c     C3 E4 85 F1 | 	sub	objptr, ##44227
13920     F2 12 62 FC | 	wrlong	arg01, objptr
13924                 | ' write_background:=bb
13924     04 E4 05 F1 | 	add	objptr, #4
13928     F2 1E 62 FC | 	wrlong	local01, objptr
1392c     41 E4 85 F1 | 	sub	objptr, #65
13930     A7 F0 03 F6 | 	mov	ptra, fp
13934     B2 00 A0 FD | 	call	#popregs_
13938                 | _do_paper_ret
13938     2D 00 64 FD | 	ret
1393c                 | 
1393c                 | ' 
1393c                 | ' sub do_ink
1393c                 | _do_ink
1393c     03 4A 05 F6 | 	mov	COUNT_, #3
13940     A8 00 A0 FD | 	call	#pushregs_
13944     F0 5F BF FD | 	call	#_pop
13948     FD 1E 02 F6 | 	mov	local01, result1
1394c     FE 20 02 F6 | 	mov	local02, result2
13950     FF 22 02 F6 | 	mov	local03, result3
13954                 | ' t1=pop() 
13954                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13954     1E 22 0E F2 | 	cmp	local03, #30 wz
13958     10 00 90 5D |  if_ne	jmp	#LR__1540
1395c     0F 13 02 F6 | 	mov	arg01, local01
13960     00 14 06 F6 | 	mov	arg02, #0
13964     84 8A B0 FD | 	call	#__system___float_tointeger
13968     FD 1E 02 F6 | 	mov	local01, result1
1396c                 | LR__1540
1396c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1396c     1F 22 0E F2 | 	cmp	local03, #31 wz
13970     18 00 90 5D |  if_ne	jmp	#LR__1541
13974     0F 13 02 F6 | 	mov	arg01, local01
13978     90 8D B0 FD | 	call	#__system____builtin_atof
1397c     FD 12 02 F6 | 	mov	arg01, result1
13980     00 14 06 F6 | 	mov	arg02, #0
13984     64 8A B0 FD | 	call	#__system___float_tointeger
13988     FD 1E 02 F6 | 	mov	local01, result1
1398c                 | LR__1541
1398c     56 00 00 FF 
13990     00 E5 05 F1 | 	add	objptr, ##44288
13994     F2 1E 62 FC | 	wrlong	local01, objptr
13998     04 E4 85 F1 | 	sub	objptr, #4
1399c     F2 14 02 FB | 	rdlong	arg02, objptr
139a0                 | ' 
139a0                 | ' write_color:=ff
139a0     56 00 00 FF 
139a4     BF E4 85 F1 | 	sub	objptr, ##44223
139a8     F2 1E 62 FC | 	wrlong	local01, objptr
139ac                 | ' write_background:=bb
139ac     04 E4 05 F1 | 	add	objptr, #4
139b0     F2 14 62 FC | 	wrlong	arg02, objptr
139b4     56 00 00 FF 
139b8     BF E4 05 F1 | 	add	objptr, ##44223
139bc     F2 12 02 FB | 	rdlong	arg01, objptr
139c0     56 00 00 FF 
139c4     00 E5 85 F1 | 	sub	objptr, ##44288
139c8     C4 36 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
139cc     A7 F0 03 F6 | 	mov	ptra, fp
139d0     B2 00 A0 FD | 	call	#popregs_
139d4                 | _do_ink_ret
139d4     2D 00 64 FD | 	ret
139d8                 | 
139d8                 | ' 
139d8                 | ' 
139d8                 | ' sub do_font
139d8                 | _do_font
139d8     03 4A 05 F6 | 	mov	COUNT_, #3
139dc     A8 00 A0 FD | 	call	#pushregs_
139e0     54 5F BF FD | 	call	#_pop
139e4     FD 1E 02 F6 | 	mov	local01, result1
139e8     FE 20 02 F6 | 	mov	local02, result2
139ec     FF 22 02 F6 | 	mov	local03, result3
139f0                 | ' t1=pop() 
139f0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
139f0     1E 22 0E F2 | 	cmp	local03, #30 wz
139f4     10 00 90 5D |  if_ne	jmp	#LR__1550
139f8     0F 13 02 F6 | 	mov	arg01, local01
139fc     00 14 06 F6 | 	mov	arg02, #0
13a00     E8 89 B0 FD | 	call	#__system___float_tointeger
13a04     FD 1E 02 F6 | 	mov	local01, result1
13a08                 | LR__1550
13a08                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13a08     1F 22 0E F2 | 	cmp	local03, #31 wz
13a0c     18 00 90 5D |  if_ne	jmp	#LR__1551
13a10     0F 13 02 F6 | 	mov	arg01, local01
13a14     F4 8C B0 FD | 	call	#__system____builtin_atof
13a18     FD 12 02 F6 | 	mov	arg01, result1
13a1c     00 14 06 F6 | 	mov	arg02, #0
13a20     C8 89 B0 FD | 	call	#__system___float_tointeger
13a24     FD 1E 02 F6 | 	mov	local01, result1
13a28                 | LR__1551
13a28     56 00 00 FF 
13a2c     04 E5 05 F1 | 	add	objptr, ##44292
13a30     F2 1E 62 FC | 	wrlong	local01, objptr
13a34     56 00 00 FF 
13a38     04 E5 85 F1 | 	sub	objptr, ##44292
13a3c     02 1E 66 F0 | 	shl	local01, #2
13a40     0F 13 02 F6 | 	mov	arg01, local01
13a44     A8 45 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13a48     A7 F0 03 F6 | 	mov	ptra, fp
13a4c     B2 00 A0 FD | 	call	#popregs_
13a50                 | _do_font_ret
13a50     2D 00 64 FD | 	ret
13a54                 | 
13a54                 | ' 
13a54                 | ' sub do_mode
13a54                 | _do_mode
13a54     04 4A 05 F6 | 	mov	COUNT_, #4
13a58     A8 00 A0 FD | 	call	#pushregs_
13a5c     D8 5E BF FD | 	call	#_pop
13a60     FD 1E 02 F6 | 	mov	local01, result1
13a64     FE 20 02 F6 | 	mov	local02, result2
13a68     FF 22 02 F6 | 	mov	local03, result3
13a6c                 | ' t1=pop() 
13a6c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13a6c     1E 22 0E F2 | 	cmp	local03, #30 wz
13a70     10 00 90 5D |  if_ne	jmp	#LR__1560
13a74     0F 13 02 F6 | 	mov	arg01, local01
13a78     00 14 06 F6 | 	mov	arg02, #0
13a7c     6C 89 B0 FD | 	call	#__system___float_tointeger
13a80     FD 1E 02 F6 | 	mov	local01, result1
13a84                 | LR__1560
13a84                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13a84     1F 22 0E F2 | 	cmp	local03, #31 wz
13a88     18 00 90 5D |  if_ne	jmp	#LR__1561
13a8c     0F 13 02 F6 | 	mov	arg01, local01
13a90     78 8C B0 FD | 	call	#__system____builtin_atof
13a94     FD 12 02 F6 | 	mov	arg01, result1
13a98     00 14 06 F6 | 	mov	arg02, #0
13a9c     4C 89 B0 FD | 	call	#__system___float_tointeger
13aa0     FD 1E 02 F6 | 	mov	local01, result1
13aa4                 | LR__1561
13aa4                 | ' select case t1.result.iresult
13aa4     0F 25 02 F6 | 	mov	local04, local01
13aa8     05 24 26 F3 | 	fle	local04, #5
13aac     30 24 62 FD | 	jmprel	local04
13ab0                 | LR__1562
13ab0     14 00 90 FD | 	jmp	#LR__1563
13ab4     A8 00 90 FD | 	jmp	#LR__1564
13ab8     10 01 90 FD | 	jmp	#LR__1565
13abc     78 01 90 FD | 	jmp	#LR__1566
13ac0     E0 01 90 FD | 	jmp	#LR__1567
13ac4     70 02 90 FD | 	jmp	#LR__1568
13ac8                 | LR__1563
13ac8     56 00 00 FF 
13acc     04 E5 05 F1 | 	add	objptr, ##44292
13ad0     F2 02 68 FC | 	wrlong	#1, objptr
13ad4     04 E4 85 F1 | 	sub	objptr, #4
13ad8     F2 34 69 FC | 	wrlong	#154, objptr
13adc     22 00 00 FF 
13ae0     A4 E5 05 F1 | 	add	objptr, ##17828
13ae4     F2 02 68 FC | 	wrlong	#1, objptr
13ae8     22 00 00 FF 
13aec     A8 E5 85 F1 | 	sub	objptr, ##17832
13af0     F2 26 69 FC | 	wrlong	#147, objptr
13af4     56 00 00 FF 
13af8     FC E4 85 F1 | 	sub	objptr, ##44284
13afc     04 12 06 F6 | 	mov	arg01, #4
13b00     EC 44 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13b04     56 00 00 FF 
13b08     00 E5 05 F1 | 	add	objptr, ##44288
13b0c     F2 12 02 FB | 	rdlong	arg01, objptr
13b10     04 E4 85 F1 | 	sub	objptr, #4
13b14     F2 14 02 FB | 	rdlong	arg02, objptr
13b18                 | ' 
13b18                 | ' write_color:=ff
13b18     56 00 00 FF 
13b1c     BF E4 85 F1 | 	sub	objptr, ##44223
13b20     F2 12 62 FC | 	wrlong	arg01, objptr
13b24                 | ' write_background:=bb
13b24     04 E4 05 F1 | 	add	objptr, #4
13b28     F2 14 62 FC | 	wrlong	arg02, objptr
13b2c     01 00 00 FF 
13b30     00 EA 05 F1 | 	add	ptr__dat__, ##512
13b34     7A 00 00 FF 
13b38     07 E5 05 F1 | 	add	objptr, ##62727
13b3c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13b40     04 E4 85 F1 | 	sub	objptr, #4
13b44     03 00 80 FF 
13b48     F2 30 69 FC | 	wrlong	##1688, objptr
13b4c     7A 00 00 FF 
13b50     44 E5 85 F1 | 	sub	objptr, ##62788
13b54     01 00 00 FF 
13b58     00 EA 85 F1 | 	sub	ptr__dat__, ##512
13b5c     D8 01 90 FD | 	jmp	#LR__1568
13b60                 | LR__1564
13b60     56 00 00 FF 
13b64     04 E5 05 F1 | 	add	objptr, ##44292
13b68     F2 00 68 FC | 	wrlong	#0, objptr
13b6c     04 E4 85 F1 | 	sub	objptr, #4
13b70     F2 2E 68 FC | 	wrlong	#23, objptr
13b74     22 00 00 FF 
13b78     A4 E5 05 F1 | 	add	objptr, ##17828
13b7c     F2 00 68 FC | 	wrlong	#0, objptr
13b80     22 00 00 FF 
13b84     A8 E5 85 F1 | 	sub	objptr, ##17832
13b88     F2 00 68 FC | 	wrlong	#0, objptr
13b8c     56 00 00 FF 
13b90     FC E4 85 F1 | 	sub	objptr, ##44284
13b94     00 12 06 F6 | 	mov	arg01, #0
13b98     54 44 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13b9c     56 00 00 FF 
13ba0     00 E5 05 F1 | 	add	objptr, ##44288
13ba4     F2 12 02 FB | 	rdlong	arg01, objptr
13ba8     04 E4 85 F1 | 	sub	objptr, #4
13bac     F2 14 02 FB | 	rdlong	arg02, objptr
13bb0                 | ' 
13bb0                 | ' write_color:=ff
13bb0     56 00 00 FF 
13bb4     BF E4 85 F1 | 	sub	objptr, ##44223
13bb8     F2 12 62 FC | 	wrlong	arg01, objptr
13bbc                 | ' write_background:=bb
13bbc     04 E4 05 F1 | 	add	objptr, #4
13bc0     F2 14 62 FC | 	wrlong	arg02, objptr
13bc4     41 E4 85 F1 | 	sub	objptr, #65
13bc8     6C 01 90 FD | 	jmp	#LR__1568
13bcc                 | LR__1565
13bcc     56 00 00 FF 
13bd0     04 E5 05 F1 | 	add	objptr, ##44292
13bd4     F2 00 68 FC | 	wrlong	#0, objptr
13bd8     04 E4 85 F1 | 	sub	objptr, #4
13bdc     F2 6A 69 FC | 	wrlong	#181, objptr
13be0     22 00 00 FF 
13be4     A4 E5 05 F1 | 	add	objptr, ##17828
13be8     F2 00 68 FC | 	wrlong	#0, objptr
13bec     22 00 00 FF 
13bf0     A8 E5 85 F1 | 	sub	objptr, ##17832
13bf4     F2 00 68 FC | 	wrlong	#0, objptr
13bf8     56 00 00 FF 
13bfc     FC E4 85 F1 | 	sub	objptr, ##44284
13c00     00 12 06 F6 | 	mov	arg01, #0
13c04     E8 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13c08     56 00 00 FF 
13c0c     00 E5 05 F1 | 	add	objptr, ##44288
13c10     F2 12 02 FB | 	rdlong	arg01, objptr
13c14     04 E4 85 F1 | 	sub	objptr, #4
13c18     F2 14 02 FB | 	rdlong	arg02, objptr
13c1c                 | ' 
13c1c                 | ' write_color:=ff
13c1c     56 00 00 FF 
13c20     BF E4 85 F1 | 	sub	objptr, ##44223
13c24     F2 12 62 FC | 	wrlong	arg01, objptr
13c28                 | ' write_background:=bb
13c28     04 E4 05 F1 | 	add	objptr, #4
13c2c     F2 14 62 FC | 	wrlong	arg02, objptr
13c30     41 E4 85 F1 | 	sub	objptr, #65
13c34     00 01 90 FD | 	jmp	#LR__1568
13c38                 | LR__1566
13c38     56 00 00 FF 
13c3c     04 E5 05 F1 | 	add	objptr, ##44292
13c40     F2 00 68 FC | 	wrlong	#0, objptr
13c44     04 E4 85 F1 | 	sub	objptr, #4
13c48     F2 1E 68 FC | 	wrlong	#15, objptr
13c4c     22 00 00 FF 
13c50     A4 E5 05 F1 | 	add	objptr, ##17828
13c54     F2 00 68 FC | 	wrlong	#0, objptr
13c58     22 00 00 FF 
13c5c     A8 E5 85 F1 | 	sub	objptr, ##17832
13c60     F2 00 68 FC | 	wrlong	#0, objptr
13c64     56 00 00 FF 
13c68     FC E4 85 F1 | 	sub	objptr, ##44284
13c6c     00 12 06 F6 | 	mov	arg01, #0
13c70     7C 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13c74     56 00 00 FF 
13c78     00 E5 05 F1 | 	add	objptr, ##44288
13c7c     F2 12 02 FB | 	rdlong	arg01, objptr
13c80     04 E4 85 F1 | 	sub	objptr, #4
13c84     F2 14 02 FB | 	rdlong	arg02, objptr
13c88                 | ' 
13c88                 | ' write_color:=ff
13c88     56 00 00 FF 
13c8c     BF E4 85 F1 | 	sub	objptr, ##44223
13c90     F2 12 62 FC | 	wrlong	arg01, objptr
13c94                 | ' write_background:=bb
13c94     04 E4 05 F1 | 	add	objptr, #4
13c98     F2 14 62 FC | 	wrlong	arg02, objptr
13c9c     41 E4 85 F1 | 	sub	objptr, #65
13ca0     94 00 90 FD | 	jmp	#LR__1568
13ca4                 | LR__1567
13ca4     56 00 00 FF 
13ca8     04 E5 05 F1 | 	add	objptr, ##44292
13cac     F2 02 68 FC | 	wrlong	#1, objptr
13cb0     04 E4 85 F1 | 	sub	objptr, #4
13cb4     F2 02 68 FC | 	wrlong	#1, objptr
13cb8     22 00 00 FF 
13cbc     A4 E5 05 F1 | 	add	objptr, ##17828
13cc0     F2 02 68 FC | 	wrlong	#1, objptr
13cc4     22 00 00 FF 
13cc8     A8 E5 85 F1 | 	sub	objptr, ##17832
13ccc     F2 1C 68 FC | 	wrlong	#14, objptr
13cd0     56 00 00 FF 
13cd4     FC E4 85 F1 | 	sub	objptr, ##44284
13cd8     04 12 06 F6 | 	mov	arg01, #4
13cdc     10 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13ce0     56 00 00 FF 
13ce4     00 E5 05 F1 | 	add	objptr, ##44288
13ce8     F2 12 02 FB | 	rdlong	arg01, objptr
13cec     04 E4 85 F1 | 	sub	objptr, #4
13cf0     F2 14 02 FB | 	rdlong	arg02, objptr
13cf4                 | ' 
13cf4                 | ' write_color:=ff
13cf4     56 00 00 FF 
13cf8     BF E4 85 F1 | 	sub	objptr, ##44223
13cfc     F2 12 62 FC | 	wrlong	arg01, objptr
13d00                 | ' write_background:=bb
13d00     04 E4 05 F1 | 	add	objptr, #4
13d04     F2 14 62 FC | 	wrlong	arg02, objptr
13d08     07 00 00 FF 
13d0c     8A EB 05 F1 | 	add	ptr__dat__, ##3978
13d10     7A 00 00 FF 
13d14     07 E5 05 F1 | 	add	objptr, ##62727
13d18     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13d1c     04 E4 85 F1 | 	sub	objptr, #4
13d20     03 00 80 FF 
13d24     F2 30 69 FC | 	wrlong	##1688, objptr
13d28     7A 00 00 FF 
13d2c     44 E5 85 F1 | 	sub	objptr, ##62788
13d30     07 00 00 FF 
13d34     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
13d38                 | LR__1568
13d38     7A 00 00 FF 
13d3c     40 E5 05 F1 | 	add	objptr, ##62784
13d40     F2 1E 62 FC | 	wrlong	local01, objptr
13d44     24 00 00 FF 
13d48     40 E4 85 F1 | 	sub	objptr, ##18496
13d4c     F2 12 02 FB | 	rdlong	arg01, objptr
13d50     04 E4 85 F1 | 	sub	objptr, #4
13d54     F2 14 02 FB | 	rdlong	arg02, objptr
13d58     56 00 00 FF 
13d5c     FC E4 85 F1 | 	sub	objptr, ##44284
13d60     74 43 B0 FD | 	call	#_hg010b_spin2_cls
13d64     47 01 00 FF 
13d68     2E 13 06 F6 | 	mov	arg01, ##@LR__4629
13d6c                 | ' 
13d6c                 | ' write(text)
13d6c     24 46 B0 FD | 	call	#_hg010b_spin2_write
13d70                 | ' crlf
13d70     80 47 B0 FD | 	call	#_hg010b_spin2_crlf
13d74     10 00 00 FF 
13d78     2C EB 05 F1 | 	add	ptr__dat__, ##8492
13d7c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
13d80     10 00 00 FF 
13d84     2C EB 85 F1 | 	sub	ptr__dat__, ##8492
13d88                 | ' 
13d88                 | ' write(text)
13d88     08 46 B0 FD | 	call	#_hg010b_spin2_write
13d8c                 | ' crlf
13d8c     64 47 B0 FD | 	call	#_hg010b_spin2_crlf
13d90     79 00 00 FF 
13d94     A0 E4 05 F1 | 	add	objptr, ##62112
13d98     F2 12 02 FB | 	rdlong	arg01, objptr
13d9c     79 00 00 FF 
13da0     A0 E4 85 F1 | 	sub	objptr, ##62112
13da4                 | ' 
13da4                 | ' write(text)
13da4     EC 45 B0 FD | 	call	#_hg010b_spin2_write
13da8                 | ' crlf
13da8     48 47 B0 FD | 	call	#_hg010b_spin2_crlf
13dac     A7 F0 03 F6 | 	mov	ptra, fp
13db0     B2 00 A0 FD | 	call	#popregs_
13db4                 | _do_mode_ret
13db4     2D 00 64 FD | 	ret
13db8                 | 
13db8                 | ' 
13db8                 | ' 
13db8                 | ' 
13db8                 | ' sub do_pinwrite
13db8                 | _do_pinwrite
13db8     01 4A 05 F6 | 	mov	COUNT_, #1
13dbc     A8 00 A0 FD | 	call	#pushregs_
13dc0     18 F0 07 F1 | 	add	ptra, #24
13dc4     70 5B BF FD | 	call	#_pop
13dc8     FD 14 02 F6 | 	mov	arg02, result1
13dcc     FE 12 02 F6 | 	mov	arg01, result2
13dd0     FF 1E 02 F6 | 	mov	local01, result3
13dd4     A7 14 62 FC | 	wrlong	arg02, fp
13dd8     04 4E 05 F1 | 	add	fp, #4
13ddc     A7 12 62 FC | 	wrlong	arg01, fp
13de0     04 4E 05 F1 | 	add	fp, #4
13de4     A7 1E 62 FC | 	wrlong	local01, fp
13de8     08 4E 85 F1 | 	sub	fp, #8
13dec     48 5B BF FD | 	call	#_pop
13df0     FF 1E 02 F6 | 	mov	local01, result3
13df4     0C 4E 05 F1 | 	add	fp, #12
13df8     A7 FA 61 FC | 	wrlong	result1, fp
13dfc     04 4E 05 F1 | 	add	fp, #4
13e00     A7 FC 61 FC | 	wrlong	result2, fp
13e04     04 4E 05 F1 | 	add	fp, #4
13e08     A7 1E 62 FC | 	wrlong	local01, fp
13e0c     08 4E 85 F1 | 	sub	fp, #8
13e10     A7 12 02 F6 | 	mov	arg01, fp
13e14     0C 4E 85 F1 | 	sub	fp, #12
13e18     CC D4 BF FD | 	call	#_converttoint
13e1c     FD 1E 02 F6 | 	mov	local01, result1
13e20     A7 12 02 F6 | 	mov	arg01, fp
13e24     C0 D4 BF FD | 	call	#_converttoint
13e28     FD 14 02 F6 | 	mov	arg02, result1
13e2c     0F 13 02 F6 | 	mov	arg01, local01
13e30     B8 57 B0 FD | 	call	#__system___pinwrite
13e34     A7 F0 03 F6 | 	mov	ptra, fp
13e38     B2 00 A0 FD | 	call	#popregs_
13e3c                 | _do_pinwrite_ret
13e3c     2D 00 64 FD | 	ret
13e40                 | 
13e40                 | ' 
13e40                 | ' sub do_pinfloat
13e40                 | _do_pinfloat
13e40     00 4A 05 F6 | 	mov	COUNT_, #0
13e44     A8 00 A0 FD | 	call	#pushregs_
13e48     0C F0 07 F1 | 	add	ptra, #12
13e4c     E8 5A BF FD | 	call	#_pop
13e50     A7 FA 61 FC | 	wrlong	result1, fp
13e54     04 4E 05 F1 | 	add	fp, #4
13e58     A7 FC 61 FC | 	wrlong	result2, fp
13e5c     04 4E 05 F1 | 	add	fp, #4
13e60     A7 FE 61 FC | 	wrlong	result3, fp
13e64     08 4E 85 F1 | 	sub	fp, #8
13e68     A7 12 02 F6 | 	mov	arg01, fp
13e6c     78 D4 BF FD | 	call	#_converttoint
13e70     50 FA 61 FD | 	fltl	result1
13e74     A7 F0 03 F6 | 	mov	ptra, fp
13e78     B2 00 A0 FD | 	call	#popregs_
13e7c                 | _do_pinfloat_ret
13e7c     2D 00 64 FD | 	ret
13e80                 | 
13e80                 | ' 
13e80                 | ' sub do_pinlo
13e80                 | _do_pinlo
13e80     00 4A 05 F6 | 	mov	COUNT_, #0
13e84     A8 00 A0 FD | 	call	#pushregs_
13e88     0C F0 07 F1 | 	add	ptra, #12
13e8c     A8 5A BF FD | 	call	#_pop
13e90     A7 FA 61 FC | 	wrlong	result1, fp
13e94     04 4E 05 F1 | 	add	fp, #4
13e98     A7 FC 61 FC | 	wrlong	result2, fp
13e9c     04 4E 05 F1 | 	add	fp, #4
13ea0     A7 FE 61 FC | 	wrlong	result3, fp
13ea4     08 4E 85 F1 | 	sub	fp, #8
13ea8     A7 12 02 F6 | 	mov	arg01, fp
13eac     38 D4 BF FD | 	call	#_converttoint
13eb0     58 FA 61 FD | 	drvl	result1
13eb4     A7 F0 03 F6 | 	mov	ptra, fp
13eb8     B2 00 A0 FD | 	call	#popregs_
13ebc                 | _do_pinlo_ret
13ebc     2D 00 64 FD | 	ret
13ec0                 | 
13ec0                 | ' 
13ec0                 | ' sub do_pinhi
13ec0                 | _do_pinhi
13ec0     00 4A 05 F6 | 	mov	COUNT_, #0
13ec4     A8 00 A0 FD | 	call	#pushregs_
13ec8     0C F0 07 F1 | 	add	ptra, #12
13ecc     68 5A BF FD | 	call	#_pop
13ed0     A7 FA 61 FC | 	wrlong	result1, fp
13ed4     04 4E 05 F1 | 	add	fp, #4
13ed8     A7 FC 61 FC | 	wrlong	result2, fp
13edc     04 4E 05 F1 | 	add	fp, #4
13ee0     A7 FE 61 FC | 	wrlong	result3, fp
13ee4     08 4E 85 F1 | 	sub	fp, #8
13ee8     A7 12 02 F6 | 	mov	arg01, fp
13eec     F8 D3 BF FD | 	call	#_converttoint
13ef0     59 FA 61 FD | 	drvh	result1
13ef4     A7 F0 03 F6 | 	mov	ptra, fp
13ef8     B2 00 A0 FD | 	call	#popregs_
13efc                 | _do_pinhi_ret
13efc     2D 00 64 FD | 	ret
13f00                 | 
13f00                 | ' 
13f00                 | ' sub do_pintoggle
13f00                 | _do_pintoggle
13f00     00 4A 05 F6 | 	mov	COUNT_, #0
13f04     A8 00 A0 FD | 	call	#pushregs_
13f08     0C F0 07 F1 | 	add	ptra, #12
13f0c     28 5A BF FD | 	call	#_pop
13f10     A7 FA 61 FC | 	wrlong	result1, fp
13f14     04 4E 05 F1 | 	add	fp, #4
13f18     A7 FC 61 FC | 	wrlong	result2, fp
13f1c     04 4E 05 F1 | 	add	fp, #4
13f20     A7 FE 61 FC | 	wrlong	result3, fp
13f24     08 4E 85 F1 | 	sub	fp, #8
13f28     A7 12 02 F6 | 	mov	arg01, fp
13f2c     B8 D3 BF FD | 	call	#_converttoint
13f30     5F FA 61 FD | 	drvnot	result1
13f34     A7 F0 03 F6 | 	mov	ptra, fp
13f38     B2 00 A0 FD | 	call	#popregs_
13f3c                 | _do_pintoggle_ret
13f3c     2D 00 64 FD | 	ret
13f40                 | 
13f40                 | ' 
13f40                 | ' 
13f40                 | ' sub do_pinstart
13f40                 | _do_pinstart
13f40     03 4A 05 F6 | 	mov	COUNT_, #3
13f44     A8 00 A0 FD | 	call	#pushregs_
13f48     30 F0 07 F1 | 	add	ptra, #48
13f4c     E8 59 BF FD | 	call	#_pop
13f50     FD 16 02 F6 | 	mov	arg03, result1
13f54     FE 14 02 F6 | 	mov	arg02, result2
13f58     FF 18 02 F6 | 	mov	arg04, result3
13f5c     A7 16 62 FC | 	wrlong	arg03, fp
13f60     04 4E 05 F1 | 	add	fp, #4
13f64     A7 14 62 FC | 	wrlong	arg02, fp
13f68     04 4E 05 F1 | 	add	fp, #4
13f6c     A7 18 62 FC | 	wrlong	arg04, fp
13f70     08 4E 85 F1 | 	sub	fp, #8
13f74     C0 59 BF FD | 	call	#_pop
13f78     FD 16 02 F6 | 	mov	arg03, result1
13f7c     FE 14 02 F6 | 	mov	arg02, result2
13f80     FF 18 02 F6 | 	mov	arg04, result3
13f84     0C 4E 05 F1 | 	add	fp, #12
13f88     A7 16 62 FC | 	wrlong	arg03, fp
13f8c     04 4E 05 F1 | 	add	fp, #4
13f90     A7 14 62 FC | 	wrlong	arg02, fp
13f94     04 4E 05 F1 | 	add	fp, #4
13f98     A7 18 62 FC | 	wrlong	arg04, fp
13f9c     14 4E 85 F1 | 	sub	fp, #20
13fa0     94 59 BF FD | 	call	#_pop
13fa4     FD 16 02 F6 | 	mov	arg03, result1
13fa8     FE 14 02 F6 | 	mov	arg02, result2
13fac     FF 18 02 F6 | 	mov	arg04, result3
13fb0     18 4E 05 F1 | 	add	fp, #24
13fb4     A7 16 62 FC | 	wrlong	arg03, fp
13fb8     04 4E 05 F1 | 	add	fp, #4
13fbc     A7 14 62 FC | 	wrlong	arg02, fp
13fc0     04 4E 05 F1 | 	add	fp, #4
13fc4     A7 18 62 FC | 	wrlong	arg04, fp
13fc8     20 4E 85 F1 | 	sub	fp, #32
13fcc     68 59 BF FD | 	call	#_pop
13fd0     FF 16 02 F6 | 	mov	arg03, result3
13fd4     24 4E 05 F1 | 	add	fp, #36
13fd8     A7 FA 61 FC | 	wrlong	result1, fp
13fdc     04 4E 05 F1 | 	add	fp, #4
13fe0     A7 FC 61 FC | 	wrlong	result2, fp
13fe4     04 4E 05 F1 | 	add	fp, #4
13fe8     A7 16 62 FC | 	wrlong	arg03, fp
13fec     08 4E 85 F1 | 	sub	fp, #8
13ff0     A7 12 02 F6 | 	mov	arg01, fp
13ff4     24 4E 85 F1 | 	sub	fp, #36
13ff8     EC D2 BF FD | 	call	#_converttoint
13ffc     FD 1E 02 F6 | 	mov	local01, result1
14000     18 4E 05 F1 | 	add	fp, #24
14004     A7 12 02 F6 | 	mov	arg01, fp
14008     18 4E 85 F1 | 	sub	fp, #24
1400c     D8 D2 BF FD | 	call	#_converttoint
14010     FD 20 02 F6 | 	mov	local02, result1
14014     0C 4E 05 F1 | 	add	fp, #12
14018     A7 12 02 F6 | 	mov	arg01, fp
1401c     0C 4E 85 F1 | 	sub	fp, #12
14020     C4 D2 BF FD | 	call	#_converttoint
14024     FD 22 02 F6 | 	mov	local03, result1
14028     A7 12 02 F6 | 	mov	arg01, fp
1402c     B8 D2 BF FD | 	call	#_converttoint
14030     40 1E 62 FD | 	dirl	local01
14034     0F 21 02 FC | 	wrpin	local02, local01
14038     0F 23 12 FC | 	wxpin	local03, local01
1403c     0F FB 21 FC | 	wypin	result1, local01
14040     41 1E 62 FD | 	dirh	local01
14044     A7 F0 03 F6 | 	mov	ptra, fp
14048     B2 00 A0 FD | 	call	#popregs_
1404c                 | _do_pinstart_ret
1404c     2D 00 64 FD | 	ret
14050                 | 
14050                 | ' 
14050                 | ' 
14050                 | ' sub do_wrpin
14050                 | _do_wrpin
14050     01 4A 05 F6 | 	mov	COUNT_, #1
14054     A8 00 A0 FD | 	call	#pushregs_
14058     18 F0 07 F1 | 	add	ptra, #24
1405c     D8 58 BF FD | 	call	#_pop
14060     FD 14 02 F6 | 	mov	arg02, result1
14064     FE 12 02 F6 | 	mov	arg01, result2
14068     FF 1E 02 F6 | 	mov	local01, result3
1406c     A7 14 62 FC | 	wrlong	arg02, fp
14070     04 4E 05 F1 | 	add	fp, #4
14074     A7 12 62 FC | 	wrlong	arg01, fp
14078     04 4E 05 F1 | 	add	fp, #4
1407c     A7 1E 62 FC | 	wrlong	local01, fp
14080     08 4E 85 F1 | 	sub	fp, #8
14084     B0 58 BF FD | 	call	#_pop
14088     FF 1E 02 F6 | 	mov	local01, result3
1408c     0C 4E 05 F1 | 	add	fp, #12
14090     A7 FA 61 FC | 	wrlong	result1, fp
14094     04 4E 05 F1 | 	add	fp, #4
14098     A7 FC 61 FC | 	wrlong	result2, fp
1409c     04 4E 05 F1 | 	add	fp, #4
140a0     A7 1E 62 FC | 	wrlong	local01, fp
140a4     08 4E 85 F1 | 	sub	fp, #8
140a8     A7 12 02 F6 | 	mov	arg01, fp
140ac     0C 4E 85 F1 | 	sub	fp, #12
140b0     34 D2 BF FD | 	call	#_converttoint
140b4     FD 1E 02 F6 | 	mov	local01, result1
140b8     A7 12 02 F6 | 	mov	arg01, fp
140bc     28 D2 BF FD | 	call	#_converttoint
140c0     0F FB 01 FC | 	wrpin	result1, local01
140c4     A7 F0 03 F6 | 	mov	ptra, fp
140c8     B2 00 A0 FD | 	call	#popregs_
140cc                 | _do_wrpin_ret
140cc     2D 00 64 FD | 	ret
140d0                 | 
140d0                 | ' 
140d0                 | ' sub do_wxpin
140d0                 | _do_wxpin
140d0     01 4A 05 F6 | 	mov	COUNT_, #1
140d4     A8 00 A0 FD | 	call	#pushregs_
140d8     18 F0 07 F1 | 	add	ptra, #24
140dc     58 58 BF FD | 	call	#_pop
140e0     FD 14 02 F6 | 	mov	arg02, result1
140e4     FE 12 02 F6 | 	mov	arg01, result2
140e8     FF 1E 02 F6 | 	mov	local01, result3
140ec     A7 14 62 FC | 	wrlong	arg02, fp
140f0     04 4E 05 F1 | 	add	fp, #4
140f4     A7 12 62 FC | 	wrlong	arg01, fp
140f8     04 4E 05 F1 | 	add	fp, #4
140fc     A7 1E 62 FC | 	wrlong	local01, fp
14100     08 4E 85 F1 | 	sub	fp, #8
14104     30 58 BF FD | 	call	#_pop
14108     FF 1E 02 F6 | 	mov	local01, result3
1410c     0C 4E 05 F1 | 	add	fp, #12
14110     A7 FA 61 FC | 	wrlong	result1, fp
14114     04 4E 05 F1 | 	add	fp, #4
14118     A7 FC 61 FC | 	wrlong	result2, fp
1411c     04 4E 05 F1 | 	add	fp, #4
14120     A7 1E 62 FC | 	wrlong	local01, fp
14124     08 4E 85 F1 | 	sub	fp, #8
14128     A7 12 02 F6 | 	mov	arg01, fp
1412c     0C 4E 85 F1 | 	sub	fp, #12
14130     B4 D1 BF FD | 	call	#_converttoint
14134     FD 1E 02 F6 | 	mov	local01, result1
14138     A7 12 02 F6 | 	mov	arg01, fp
1413c     A8 D1 BF FD | 	call	#_converttoint
14140     0F FB 11 FC | 	wxpin	result1, local01
14144     A7 F0 03 F6 | 	mov	ptra, fp
14148     B2 00 A0 FD | 	call	#popregs_
1414c                 | _do_wxpin_ret
1414c     2D 00 64 FD | 	ret
14150                 | 
14150                 | ' 
14150                 | ' sub do_wypin
14150                 | _do_wypin
14150     01 4A 05 F6 | 	mov	COUNT_, #1
14154     A8 00 A0 FD | 	call	#pushregs_
14158     18 F0 07 F1 | 	add	ptra, #24
1415c     D8 57 BF FD | 	call	#_pop
14160     FD 14 02 F6 | 	mov	arg02, result1
14164     FE 12 02 F6 | 	mov	arg01, result2
14168     FF 1E 02 F6 | 	mov	local01, result3
1416c     A7 14 62 FC | 	wrlong	arg02, fp
14170     04 4E 05 F1 | 	add	fp, #4
14174     A7 12 62 FC | 	wrlong	arg01, fp
14178     04 4E 05 F1 | 	add	fp, #4
1417c     A7 1E 62 FC | 	wrlong	local01, fp
14180     08 4E 85 F1 | 	sub	fp, #8
14184     B0 57 BF FD | 	call	#_pop
14188     FF 1E 02 F6 | 	mov	local01, result3
1418c     0C 4E 05 F1 | 	add	fp, #12
14190     A7 FA 61 FC | 	wrlong	result1, fp
14194     04 4E 05 F1 | 	add	fp, #4
14198     A7 FC 61 FC | 	wrlong	result2, fp
1419c     04 4E 05 F1 | 	add	fp, #4
141a0     A7 1E 62 FC | 	wrlong	local01, fp
141a4     08 4E 85 F1 | 	sub	fp, #8
141a8     A7 12 02 F6 | 	mov	arg01, fp
141ac     0C 4E 85 F1 | 	sub	fp, #12
141b0     34 D1 BF FD | 	call	#_converttoint
141b4     FD 1E 02 F6 | 	mov	local01, result1
141b8     A7 12 02 F6 | 	mov	arg01, fp
141bc     28 D1 BF FD | 	call	#_converttoint
141c0     0F FB 21 FC | 	wypin	result1, local01
141c4     A7 F0 03 F6 | 	mov	ptra, fp
141c8     B2 00 A0 FD | 	call	#popregs_
141cc                 | _do_wypin_ret
141cc     2D 00 64 FD | 	ret
141d0                 | 
141d0                 | ' 
141d0                 | ' sub do_position
141d0                 | _do_position
141d0     01 4A 05 F6 | 	mov	COUNT_, #1
141d4     A8 00 A0 FD | 	call	#pushregs_
141d8     18 F0 07 F1 | 	add	ptra, #24
141dc     58 57 BF FD | 	call	#_pop
141e0     FD 14 02 F6 | 	mov	arg02, result1
141e4     FE 12 02 F6 | 	mov	arg01, result2
141e8     FF 1E 02 F6 | 	mov	local01, result3
141ec     A7 14 62 FC | 	wrlong	arg02, fp
141f0     04 4E 05 F1 | 	add	fp, #4
141f4     A7 12 62 FC | 	wrlong	arg01, fp
141f8     04 4E 05 F1 | 	add	fp, #4
141fc     A7 1E 62 FC | 	wrlong	local01, fp
14200     08 4E 85 F1 | 	sub	fp, #8
14204     30 57 BF FD | 	call	#_pop
14208     FF 1E 02 F6 | 	mov	local01, result3
1420c     0C 4E 05 F1 | 	add	fp, #12
14210     A7 FA 61 FC | 	wrlong	result1, fp
14214     04 4E 05 F1 | 	add	fp, #4
14218     A7 FC 61 FC | 	wrlong	result2, fp
1421c     04 4E 05 F1 | 	add	fp, #4
14220     A7 1E 62 FC | 	wrlong	local01, fp
14224     08 4E 85 F1 | 	sub	fp, #8
14228     A7 12 02 F6 | 	mov	arg01, fp
1422c     0C 4E 85 F1 | 	sub	fp, #12
14230     B4 D0 BF FD | 	call	#_converttoint
14234     FD 1E 02 F6 | 	mov	local01, result1
14238     A7 12 02 F6 | 	mov	arg01, fp
1423c     A8 D0 BF FD | 	call	#_converttoint
14240     FD 14 02 F6 | 	mov	arg02, result1
14244     0F 13 02 F6 | 	mov	arg01, local01
14248     E4 3D B0 FD | 	call	#_hg010b_spin2_setcursorpos
1424c     A7 F0 03 F6 | 	mov	ptra, fp
14250     B2 00 A0 FD | 	call	#popregs_
14254                 | _do_position_ret
14254     2D 00 64 FD | 	ret
14258                 | 
14258                 | ' 
14258                 | ' sub do_waitms
14258                 | _do_waitms
14258     01 4A 05 F6 | 	mov	COUNT_, #1
1425c     A8 00 A0 FD | 	call	#pushregs_
14260     18 F0 07 F1 | 	add	ptra, #24
14264     D0 56 BF FD | 	call	#_pop
14268     A7 FA 61 FC | 	wrlong	result1, fp
1426c     04 4E 05 F1 | 	add	fp, #4
14270     A7 FC 61 FC | 	wrlong	result2, fp
14274     04 4E 05 F1 | 	add	fp, #4
14278     A7 FE 61 FC | 	wrlong	result3, fp
1427c                 | ' 
1427c                 | ' t1=pop() 'value
1427c                 | ' 
1427c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1427c     08 4E 85 F1 | 	sub	fp, #8
14280     1C FE 0D F2 | 	cmp	result3, #28 wz
14284     08 4E 05 51 |  if_ne	add	fp, #8
14288     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1428c     08 4E 85 51 |  if_ne	sub	fp, #8
14290     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
14294     A7 12 02 AB |  if_e	rdlong	arg01, fp
14298     0C 4E 05 A1 |  if_e	add	fp, #12
1429c     A7 12 62 AC |  if_e	wrlong	arg01, fp
142a0     0C 4E 85 A1 |  if_e	sub	fp, #12
142a4     14 00 90 AD |  if_e	jmp	#LR__1570
142a8     A7 12 02 F6 | 	mov	arg01, fp
142ac     38 D0 BF FD | 	call	#_converttoint
142b0     0C 4E 05 F1 | 	add	fp, #12
142b4     A7 FA 61 FC | 	wrlong	result1, fp
142b8     0C 4E 85 F1 | 	sub	fp, #12
142bc                 | LR__1570
142bc                 | ' if t<0 then return
142bc     0C 4E 05 F1 | 	add	fp, #12
142c0     A7 12 02 FB | 	rdlong	arg01, fp
142c4     0C 4E 85 F1 | 	sub	fp, #12
142c8     00 12 56 F2 | 	cmps	arg01, #0 wc
142cc     B8 00 90 CD |  if_b	jmp	#LR__1575
142d0                 | ' if t < 5000 then 
142d0     0C 4E 05 F1 | 	add	fp, #12
142d4     A7 12 02 FB | 	rdlong	arg01, fp
142d8     0C 4E 85 F1 | 	sub	fp, #12
142dc     09 00 00 FF 
142e0     88 13 56 F2 | 	cmps	arg01, ##5000 wc
142e4     14 00 90 3D |  if_ae	jmp	#LR__1571
142e8     0C 4E 05 F1 | 	add	fp, #12
142ec     A7 12 02 FB | 	rdlong	arg01, fp
142f0     0C 4E 85 F1 | 	sub	fp, #12
142f4     34 54 B0 FD | 	call	#__system___waitms
142f8     8C 00 90 FD | 	jmp	#LR__1574
142fc                 | LR__1571
142fc     10 4E 05 F1 | 	add	fp, #16
14300     A7 02 68 FC | 	wrlong	#1, fp
14304     04 4E 85 F1 | 	sub	fp, #4
14308     A7 12 02 FB | 	rdlong	arg01, fp
1430c     09 13 52 F6 | 	abs	arg01, arg01 wc
14310     09 00 00 FF 
14314     88 13 16 FD | 	qdiv	arg01, ##5000
14318                 | '   for i=1 to t/5000
14318     0C 4E 85 F1 | 	sub	fp, #12
1431c     18 1E 62 FD | 	getqx	local01
14320     0F 1F 82 F6 | 	negc	local01, local01
14324     01 1E 06 F1 | 	add	local01, #1
14328                 | LR__1572
14328     10 4E 05 F1 | 	add	fp, #16
1432c     A7 12 02 FB | 	rdlong	arg01, fp
14330     10 4E 85 F1 | 	sub	fp, #16
14334     0F 13 52 F2 | 	cmps	arg01, local01 wc
14338     28 00 90 3D |  if_ae	jmp	#LR__1573
1433c     0C 4E 05 F1 | 	add	fp, #12
14340     A7 12 02 FB | 	rdlong	arg01, fp
14344     0C 4E 85 F1 | 	sub	fp, #12
14348     E0 53 B0 FD | 	call	#__system___waitms
1434c     10 4E 05 F1 | 	add	fp, #16
14350     A7 12 02 FB | 	rdlong	arg01, fp
14354     01 12 06 F1 | 	add	arg01, #1
14358     A7 12 62 FC | 	wrlong	arg01, fp
1435c     10 4E 85 F1 | 	sub	fp, #16
14360     C4 FF 9F FD | 	jmp	#LR__1572
14364                 | LR__1573
14364     0C 4E 05 F1 | 	add	fp, #12
14368     A7 1E 02 FB | 	rdlong	local01, fp
1436c     0F 1F 52 F6 | 	abs	local01, local01 wc
14370     09 00 00 FF 
14374     88 1F 16 FD | 	qdiv	local01, ##5000
14378     0C 4E 85 F1 | 	sub	fp, #12
1437c     19 1E 62 FD | 	getqy	local01
14380     0F 13 82 F6 | 	negc	arg01, local01
14384     A4 53 B0 FD | 	call	#__system___waitms
14388                 | LR__1574
14388                 | LR__1575
14388     A7 F0 03 F6 | 	mov	ptra, fp
1438c     B2 00 A0 FD | 	call	#popregs_
14390                 | _do_waitms_ret
14390     2D 00 64 FD | 	ret
14394                 | 
14394                 | ' 
14394                 | ' sub do_waitvbl
14394                 | _do_waitvbl
14394     01 12 06 F6 | 	mov	arg01, #1
14398     CC 3C B0 FD | 	call	#_hg010b_spin2_waitvbl
1439c                 | _do_waitvbl_ret
1439c     2D 00 64 FD | 	ret
143a0                 | 
143a0                 | ' 
143a0                 | ' sub do_waitclock
143a0                 | _do_waitclock
143a0     7A 00 00 FF 
143a4     38 E5 05 F1 | 	add	objptr, ##62776
143a8     F2 00 02 FB | 	rdlong	_var01, objptr
143ac                 | ' c=hkcnt
143ac                 | ' do: loop until hkcnt<>c
143ac                 | LR__1580
143ac     F2 02 02 FB | 	rdlong	_var02, objptr
143b0     00 03 0A F2 | 	cmp	_var02, _var01 wz
143b4     F4 FF 9F AD |  if_e	jmp	#LR__1580
143b8     7A 00 00 FF 
143bc     38 E5 85 F1 | 	sub	objptr, ##62776
143c0                 | _do_waitclock_ret
143c0     2D 00 64 FD | 	ret
143c4                 | 
143c4                 | ' 
143c4                 | ' sub do_dir
143c4                 | _do_dir
143c4     03 4A 05 F6 | 	mov	COUNT_, #3
143c8     A8 00 A0 FD | 	call	#pushregs_
143cc     47 01 00 FF 
143d0     2F 13 06 F6 | 	mov	arg01, ##@LR__4630
143d4     EC 56 B0 FD | 	call	#__system___chdir
143d8                 | ' chdir("/sd/bas")       ' set working directory
143d8                 | ' print "Working directory: "; currentdir$ 
143d8     00 12 06 F6 | 	mov	arg01, #0
143dc     5C A9 B0 FD | 	call	#__system___getiolock_0425
143e0     FD 12 02 F6 | 	mov	arg01, result1
143e4     50 50 B0 FD | 	call	#__system___lockmem
143e8     47 01 00 FF 
143ec     37 15 06 F6 | 	mov	arg02, ##@LR__4631
143f0     00 12 06 F6 | 	mov	arg01, #0
143f4     00 16 06 F6 | 	mov	arg03, #0
143f8     30 5D B0 FD | 	call	#__system___basic_print_string
143fc     71 00 00 FF 
14400     58 E5 05 F1 | 	add	objptr, ##58200
14404     F2 14 02 FB | 	rdlong	arg02, objptr
14408     71 00 00 FF 
1440c     58 E5 85 F1 | 	sub	objptr, ##58200
14410     00 12 06 F6 | 	mov	arg01, #0
14414     00 16 06 F6 | 	mov	arg03, #0
14418     10 5D B0 FD | 	call	#__system___basic_print_string
1441c     00 12 06 F6 | 	mov	arg01, #0
14420     0A 14 06 F6 | 	mov	arg02, #10
14424     00 16 06 F6 | 	mov	arg03, #0
14428     A8 5C B0 FD | 	call	#__system___basic_print_char
1442c     00 12 06 F6 | 	mov	arg01, #0
14430     08 A9 B0 FD | 	call	#__system___getiolock_0425
14434     FD 00 68 FC | 	wrlong	#0, result1
14438     47 01 00 FF 
1443c     4B 13 06 F6 | 	mov	arg01, ##@LR__4632
14440     10 14 06 F6 | 	mov	arg02, #16
14444     2C AA B0 FD | 	call	#__system___basic_dir
14448     FD 1E 02 F6 | 	mov	local01, result1
1444c                 | ' 
1444c                 | ' filename=dir$("*", fbDirectory)
1444c                 | ' while filename <> "" and filename <> nil
1444c                 | LR__1590
1444c     00 20 06 F6 | 	mov	local02, #0
14450     47 01 00 FF 
14454     4D 15 06 F6 | 	mov	arg02, ##@LR__4633
14458     0F 13 02 F6 | 	mov	arg01, local01
1445c     00 50 B0 FD | 	call	#__system___string_cmp
14460     00 FA 0D F2 | 	cmp	result1, #0 wz
14464     00 20 26 56 |  if_ne	not	local02, #0
14468     00 22 06 F6 | 	mov	local03, #0
1446c     0F 13 02 F6 | 	mov	arg01, local01
14470     00 14 06 F6 | 	mov	arg02, #0
14474     E8 4F B0 FD | 	call	#__system___string_cmp
14478     00 FA 0D F2 | 	cmp	result1, #0 wz
1447c     00 22 26 56 |  if_ne	not	local03, #0
14480     11 21 CA F7 | 	test	local02, local03 wz
14484     64 00 90 AD |  if_e	jmp	#LR__1591
14488                 | '   print "[dir] ";filename
14488     00 12 06 F6 | 	mov	arg01, #0
1448c     AC A8 B0 FD | 	call	#__system___getiolock_0425
14490     FD 12 02 F6 | 	mov	arg01, result1
14494     A0 4F B0 FD | 	call	#__system___lockmem
14498     47 01 00 FF 
1449c     4E 15 06 F6 | 	mov	arg02, ##@LR__4634
144a0     00 12 06 F6 | 	mov	arg01, #0
144a4     00 16 06 F6 | 	mov	arg03, #0
144a8     80 5C B0 FD | 	call	#__system___basic_print_string
144ac     00 12 06 F6 | 	mov	arg01, #0
144b0     0F 15 02 F6 | 	mov	arg02, local01
144b4     00 16 06 F6 | 	mov	arg03, #0
144b8     70 5C B0 FD | 	call	#__system___basic_print_string
144bc     00 12 06 F6 | 	mov	arg01, #0
144c0     0A 14 06 F6 | 	mov	arg02, #10
144c4     00 16 06 F6 | 	mov	arg03, #0
144c8     08 5C B0 FD | 	call	#__system___basic_print_char
144cc     00 12 06 F6 | 	mov	arg01, #0
144d0     68 A8 B0 FD | 	call	#__system___getiolock_0425
144d4     FD 00 68 FC | 	wrlong	#0, result1
144d8     00 12 06 F6 | 	mov	arg01, #0
144dc     00 14 06 F6 | 	mov	arg02, #0
144e0     90 A9 B0 FD | 	call	#__system___basic_dir
144e4     FD 1E 02 F6 | 	mov	local01, result1
144e8     60 FF 9F FD | 	jmp	#LR__1590
144ec                 | LR__1591
144ec     47 01 00 FF 
144f0     55 13 06 F6 | 	mov	arg01, ##@LR__4635
144f4     21 14 06 F6 | 	mov	arg02, #33
144f8     78 A9 B0 FD | 	call	#__system___basic_dir
144fc     FD 1E 02 F6 | 	mov	local01, result1
14500                 | ' 
14500                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
14500                 | ' do while filename <> "" and filename <> nil
14500                 | LR__1592
14500     00 20 06 F6 | 	mov	local02, #0
14504     47 01 00 FF 
14508     57 15 06 F6 | 	mov	arg02, ##@LR__4636
1450c     0F 13 02 F6 | 	mov	arg01, local01
14510     4C 4F B0 FD | 	call	#__system___string_cmp
14514     00 FA 0D F2 | 	cmp	result1, #0 wz
14518     00 20 26 56 |  if_ne	not	local02, #0
1451c     00 22 06 F6 | 	mov	local03, #0
14520     0F 13 02 F6 | 	mov	arg01, local01
14524     00 14 06 F6 | 	mov	arg02, #0
14528     34 4F B0 FD | 	call	#__system___string_cmp
1452c     00 FA 0D F2 | 	cmp	result1, #0 wz
14530     00 22 26 56 |  if_ne	not	local03, #0
14534     11 21 CA F7 | 	test	local02, local03 wz
14538     4C 01 90 AD |  if_e	jmp	#LR__1596
1453c                 | '   print filename
1453c     00 12 06 F6 | 	mov	arg01, #0
14540     F8 A7 B0 FD | 	call	#__system___getiolock_0425
14544     FD 12 02 F6 | 	mov	arg01, result1
14548     EC 4E B0 FD | 	call	#__system___lockmem
1454c     00 12 06 F6 | 	mov	arg01, #0
14550     0F 15 02 F6 | 	mov	arg02, local01
14554     00 16 06 F6 | 	mov	arg03, #0
14558     D0 5B B0 FD | 	call	#__system___basic_print_string
1455c     00 12 06 F6 | 	mov	arg01, #0
14560     0A 14 06 F6 | 	mov	arg02, #10
14564     00 16 06 F6 | 	mov	arg03, #0
14568     68 5B B0 FD | 	call	#__system___basic_print_char
1456c     00 12 06 F6 | 	mov	arg01, #0
14570     C8 A7 B0 FD | 	call	#__system___getiolock_0425
14574     FD 00 68 FC | 	wrlong	#0, result1
14578     00 12 06 F6 | 	mov	arg01, #0
1457c     00 14 06 F6 | 	mov	arg02, #0
14580     F0 A8 B0 FD | 	call	#__system___basic_dir
14584     FD 1E 02 F6 | 	mov	local01, result1
14588                 | '   filename = dir$()      ' continue scan
14588                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
14588                 | ' return cursor_y
14588     3A E4 05 F1 | 	add	objptr, #58
1458c     F2 FA C1 FA | 	rdbyte	result1, objptr
14590     3A E4 85 F1 | 	sub	objptr, #58
14594     22 FA 0D F2 | 	cmp	result1, #34 wz
14598     64 FF 9F 5D |  if_ne	jmp	#LR__1592
1459c                 | '     print "-----more, press any key";
1459c     00 12 06 F6 | 	mov	arg01, #0
145a0     98 A7 B0 FD | 	call	#__system___getiolock_0425
145a4     FD 12 02 F6 | 	mov	arg01, result1
145a8     8C 4E B0 FD | 	call	#__system___lockmem
145ac     47 01 00 FF 
145b0     58 15 06 F6 | 	mov	arg02, ##@LR__4637
145b4     00 12 06 F6 | 	mov	arg01, #0
145b8     00 16 06 F6 | 	mov	arg03, #0
145bc     6C 5B B0 FD | 	call	#__system___basic_print_string
145c0     00 12 06 F6 | 	mov	arg01, #0
145c4     74 A7 B0 FD | 	call	#__system___getiolock_0425
145c8     FD 00 68 FC | 	wrlong	#0, result1
145cc                 | '     do 
145cc                 | LR__1593
145cc     8C 46 B0 FD | 	call	#_usbnew_spin2_get_key
145d0     00 FA 0D F2 | 	cmp	result1, #0 wz
145d4     F4 FF 9F 5D |  if_ne	jmp	#LR__1593
145d8                 | '     do
145d8                 | LR__1594
145d8     80 46 B0 FD | 	call	#_usbnew_spin2_get_key
145dc     00 FA 0D F2 | 	cmp	result1, #0 wz
145e0     F4 FF 9F AD |  if_e	jmp	#LR__1594
145e4                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
145e4     79 00 00 FF 
145e8     A4 E4 05 F1 | 	add	objptr, ##62116
145ec     F2 20 02 FB | 	rdlong	local02, objptr
145f0     79 00 00 FF 
145f4     A4 E4 85 F1 | 	sub	objptr, ##62116
145f8     01 20 0E F2 | 	cmp	local02, #1 wz
145fc     3C 00 90 5D |  if_ne	jmp	#LR__1595
14600     7A 00 00 FF 
14604     48 E5 05 F1 | 	add	objptr, ##62792
14608     F2 14 02 FB | 	rdlong	arg02, objptr
1460c     04 E4 85 F1 | 	sub	objptr, #4
14610     F2 1A 02 FB | 	rdlong	arg05, objptr
14614     07 12 06 F6 | 	mov	arg01, #7
14618     56 00 00 FF 
1461c     44 16 06 F6 | 	mov	arg03, ##44100
14620     0E 18 C6 F9 | 	decod	arg04, #14
14624     01 1C 66 F6 | 	neg	arg06, #1
14628     6F 00 00 FF 
1462c     84 E4 85 F1 | 	sub	objptr, ##56964
14630     B0 49 B0 FD | 	call	#_Audio095_8_sc_spin2_play
14634     0B 00 00 FF 
14638     C0 E4 85 F1 | 	sub	objptr, ##5824
1463c                 | LR__1595
1463c     00 12 06 F6 | 	mov	arg01, #0
14640     23 14 06 F6 | 	mov	arg02, #35
14644     E8 39 B0 FD | 	call	#_hg010b_spin2_setcursorpos
14648                 | '     position 0,35: print "                             ";: position 4,35  
14648     00 12 06 F6 | 	mov	arg01, #0
1464c     EC A6 B0 FD | 	call	#__system___getiolock_0425
14650     FD 12 02 F6 | 	mov	arg01, result1
14654     E0 4D B0 FD | 	call	#__system___lockmem
14658     47 01 00 FF 
1465c     71 15 06 F6 | 	mov	arg02, ##@LR__4638
14660     00 12 06 F6 | 	mov	arg01, #0
14664     00 16 06 F6 | 	mov	arg03, #0
14668     C0 5A B0 FD | 	call	#__system___basic_print_string
1466c     00 12 06 F6 | 	mov	arg01, #0
14670     C8 A6 B0 FD | 	call	#__system___getiolock_0425
14674     FD 00 68 FC | 	wrlong	#0, result1
14678     04 12 06 F6 | 	mov	arg01, #4
1467c     23 14 06 F6 | 	mov	arg02, #35
14680     AC 39 B0 FD | 	call	#_hg010b_spin2_setcursorpos
14684     78 FE 9F FD | 	jmp	#LR__1592
14688                 | LR__1596
14688     A7 F0 03 F6 | 	mov	ptra, fp
1468c     B2 00 A0 FD | 	call	#popregs_
14690                 | _do_dir_ret
14690     2D 00 64 FD | 	ret
14694                 | 
14694                 | ' 
14694                 | ' sub do_if
14694                 | _do_if
14694     05 4A 05 F6 | 	mov	COUNT_, #5
14698     A8 00 A0 FD | 	call	#pushregs_
1469c     98 52 BF FD | 	call	#_pop
146a0     FD 1E 0A F6 | 	mov	local01, result1 wz
146a4     FE 20 02 F6 | 	mov	local02, result2
146a8     FF 22 02 F6 | 	mov	local03, result3
146ac                 | ' t1=pop()
146ac                 | ' ' if uresult=0, jump over else
146ac                 | ' if t1.result.uresult = 0 then 
146ac     BC 00 90 5D |  if_ne	jmp	#LR__1602
146b0                 | '   for i=lineptr_e to lineptr-1
146b0     69 00 00 FF 
146b4     44 E5 05 F1 | 	add	objptr, ##54084
146b8     F2 24 02 FB | 	rdlong	local04, objptr
146bc     04 E4 85 F1 | 	sub	objptr, #4
146c0     F2 26 02 FB | 	rdlong	local05, objptr
146c4     69 00 00 FF 
146c8     40 E5 85 F1 | 	sub	objptr, ##54080
146cc                 | LR__1600
146cc     13 25 52 F2 | 	cmps	local04, local05 wc
146d0     78 00 90 3D |  if_ae	jmp	#LR__1601
146d4     12 FF 01 F6 | 	mov	result3, local04
146d8     01 FE 65 F0 | 	shl	result3, #1
146dc     12 FF 01 F1 | 	add	result3, local04
146e0     02 FE 65 F0 | 	shl	result3, #2
146e4     66 00 00 FF 
146e8     40 E5 05 F1 | 	add	objptr, ##52544
146ec     F2 FE 01 F1 | 	add	result3, objptr
146f0     FF 1E 02 FB | 	rdlong	local01, result3
146f4     04 FE 05 F1 | 	add	result3, #4
146f8     FF FC 01 FB | 	rdlong	result2, result3
146fc     12 FF 01 F6 | 	mov	result3, local04
14700     01 FE 65 F0 | 	shl	result3, #1
14704     12 FF 01 F1 | 	add	result3, local04
14708     02 FE 65 F0 | 	shl	result3, #2
1470c     F2 FE 01 F1 | 	add	result3, objptr
14710     08 FE 05 F1 | 	add	result3, #8
14714     FF FE 01 FB | 	rdlong	result3, result3
14718     FE 20 02 F6 | 	mov	local02, result2
1471c     FF 22 02 F6 | 	mov	local03, result3
14720                 | '     t1=compiledline(i)
14720                 | '     if t1.result_type=token_else then lineptr_e=i : return
14720     5A 22 0E F2 | 	cmp	local03, #90 wz
14724     66 00 00 FF 
14728     40 E5 85 F1 | 	sub	objptr, ##52544
1472c     69 00 00 AF 
14730     44 E5 05 A1 |  if_e	add	objptr, ##54084
14734     F2 24 62 AC |  if_e	wrlong	local04, objptr
14738     69 00 00 AF 
1473c     44 E5 85 A1 |  if_e	sub	objptr, ##54084
14740     28 00 90 AD |  if_e	jmp	#LR__1603
14744     01 24 06 F1 | 	add	local04, #1
14748     80 FF 9F FD | 	jmp	#LR__1600
1474c                 | LR__1601
1474c     69 00 00 FF 
14750     40 E5 05 F1 | 	add	objptr, ##54080
14754     F2 26 02 FB | 	rdlong	local05, objptr
14758     01 26 86 F1 | 	sub	local05, #1
1475c     04 E4 05 F1 | 	add	objptr, #4
14760     F2 26 62 FC | 	wrlong	local05, objptr
14764     69 00 00 FF 
14768     44 E5 85 F1 | 	sub	objptr, ##54084
1476c                 | LR__1602
1476c                 | LR__1603
1476c     A7 F0 03 F6 | 	mov	ptra, fp
14770     B2 00 A0 FD | 	call	#popregs_
14774                 | _do_if_ret
14774     2D 00 64 FD | 	ret
14778                 | 
14778                 | ' 
14778                 | ' sub do_else
14778                 | _do_else
14778     69 00 00 FF 
1477c     40 E5 05 F1 | 	add	objptr, ##54080
14780     F2 00 02 FB | 	rdlong	_var01, objptr
14784     01 00 86 F1 | 	sub	_var01, #1
14788     04 E4 05 F1 | 	add	objptr, #4
1478c     F2 00 62 FC | 	wrlong	_var01, objptr
14790     69 00 00 FF 
14794     44 E5 85 F1 | 	sub	objptr, ##54084
14798                 | _do_else_ret
14798     2D 00 64 FD | 	ret
1479c                 | 
1479c                 | ' 
1479c                 | ' sub do_rad
1479c                 | _do_rad
1479c     7A 00 00 FF 
147a0     4C E5 05 F1 | 	add	objptr, ##62796
147a4     00 C0 9F FF 
147a8     F2 00 68 FC | 	wrlong	##1065353216, objptr
147ac     04 E4 05 F1 | 	add	objptr, #4
147b0     00 C0 9F FF 
147b4     F2 00 68 FC | 	wrlong	##1065353216, objptr
147b8     7A 00 00 FF 
147bc     50 E5 85 F1 | 	sub	objptr, ##62800
147c0                 | _do_rad_ret
147c0     2D 00 64 FD | 	ret
147c4                 | 
147c4                 | ' 
147c4                 | ' sub do_deg
147c4                 | _do_deg
147c4     7A 00 00 FF 
147c8     4C E5 05 F1 | 	add	objptr, ##62796
147cc     7D 47 9E FF 
147d0     F2 6A 68 FC | 	wrlong	##1016003125, objptr
147d4     04 E4 05 F1 | 	add	objptr, #4
147d8     97 32 A1 FF 
147dc     F2 C2 69 FC | 	wrlong	##1113927393, objptr
147e0     7A 00 00 FF 
147e4     50 E5 85 F1 | 	sub	objptr, ##62800
147e8                 | _do_deg_ret
147e8     2D 00 64 FD | 	ret
147ec                 | 
147ec                 | ' 
147ec                 | ' sub do_int
147ec                 | _do_int
147ec     00 4A 05 F6 | 	mov	COUNT_, #0
147f0     A8 00 A0 FD | 	call	#pushregs_
147f4     0C F0 07 F1 | 	add	ptra, #12
147f8     3C 51 BF FD | 	call	#_pop
147fc     A7 FA 61 FC | 	wrlong	result1, fp
14800     04 4E 05 F1 | 	add	fp, #4
14804     A7 FC 61 FC | 	wrlong	result2, fp
14808     04 4E 05 F1 | 	add	fp, #4
1480c     A7 FE 61 FC | 	wrlong	result3, fp
14810     08 4E 85 F1 | 	sub	fp, #8
14814     A7 12 02 F6 | 	mov	arg01, fp
14818     CC CA BF FD | 	call	#_converttoint
1481c     A7 FA 61 FC | 	wrlong	result1, fp
14820     08 4E 05 F1 | 	add	fp, #8
14824     A7 38 68 FC | 	wrlong	#28, fp
14828     08 4E 85 F1 | 	sub	fp, #8
1482c     A7 12 02 F6 | 	mov	arg01, fp
14830     9C 51 BF FD | 	call	#_push
14834     A7 F0 03 F6 | 	mov	ptra, fp
14838     B2 00 A0 FD | 	call	#popregs_
1483c                 | _do_int_ret
1483c     2D 00 64 FD | 	ret
14840                 | 
14840                 | ' 
14840                 | ' sub do_nothing
14840                 | _do_nothing
14840                 | _do_nothing_ret
14840     2D 00 64 FD | 	ret
14844                 | 
14844                 | ' 
14844                 | ' sub do_brun
14844                 | _do_brun
14844     08 4A 05 F6 | 	mov	COUNT_, #8
14848     A8 00 A0 FD | 	call	#pushregs_
1484c     E8 50 BF FD | 	call	#_pop
14850     FE 1A 02 F6 | 	mov	arg05, result2
14854     FF 18 02 F6 | 	mov	arg04, result3
14858     FD 1E 02 F6 | 	mov	local01, result1
1485c     0D 21 02 F6 | 	mov	local02, arg05
14860     0C 23 02 F6 | 	mov	local03, arg04
14864                 | ' 
14864                 | ' t1=pop() 
14864                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
14864     2B 22 0E F2 | 	cmp	local03, #43 wz
14868     10 00 90 5D |  if_ne	jmp	#LR__1610
1486c     0F 13 02 F6 | 	mov	arg01, local01
14870     40 86 BF FD | 	call	#_convertstring
14874     FD 1E 02 F6 | 	mov	local01, result1
14878     1F 22 06 F6 | 	mov	local03, #31
1487c                 | LR__1610
1487c                 | ' if t1.result_type=result_string then
1487c     1F 22 0E F2 | 	cmp	local03, #31 wz
14880     EC 01 90 5D |  if_ne	jmp	#LR__1614
14884     0F 25 02 F6 | 	mov	local04, local01
14888                 | '   filename=t1.result.sresult
14888                 | '   if left$(filename,1)="/" then 
14888     12 13 02 F6 | 	mov	arg01, local04
1488c     01 14 06 F6 | 	mov	arg02, #1
14890     B4 6B B0 FD | 	call	#__system__Left_S
14894     FD 12 02 F6 | 	mov	arg01, result1
14898     47 01 00 FF 
1489c     8F 15 06 F6 | 	mov	arg02, ##@LR__4639
148a0     BC 4B B0 FD | 	call	#__system___string_cmp
148a4     00 FA 0D F2 | 	cmp	result1, #0 wz
148a8     12 27 02 A6 |  if_e	mov	local05, local04
148ac     14 00 90 AD |  if_e	jmp	#LR__1611
148b0     47 01 00 FF 
148b4     91 13 06 F6 | 	mov	arg01, ##@LR__4640
148b8     12 15 02 F6 | 	mov	arg02, local04
148bc     D4 4B B0 FD | 	call	#__system___string_concat
148c0     FD 26 02 F6 | 	mov	local05, result1
148c4                 | LR__1611
148c4                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
148c4                 | '   open fullfilename for input as #9
148c4     09 12 06 F6 | 	mov	arg01, #9
148c8     13 15 02 F6 | 	mov	arg02, local05
148cc     00 16 06 F6 | 	mov	arg03, #0
148d0     68 57 B0 FD | 	call	#__system___basic_open_string
148d4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
148d8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
148dc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
148e0     FD 28 0A F6 | 	mov	local06, result1 wz
148e4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
148e4     8C 00 90 AD |  if_e	jmp	#LR__1612
148e8     00 12 06 F6 | 	mov	arg01, #0
148ec     4C A4 B0 FD | 	call	#__system___getiolock_0425
148f0     FD 12 02 F6 | 	mov	arg01, result1
148f4     40 4B B0 FD | 	call	#__system___lockmem
148f8     47 01 00 FF 
148fc     9A 15 06 F6 | 	mov	arg02, ##@LR__4641
14900     00 12 06 F6 | 	mov	arg01, #0
14904     00 16 06 F6 | 	mov	arg03, #0
14908     20 58 B0 FD | 	call	#__system___basic_print_string
1490c     00 12 06 F6 | 	mov	arg01, #0
14910     14 15 02 F6 | 	mov	arg02, local06
14914     00 16 06 F6 | 	mov	arg03, #0
14918     0A 18 06 F6 | 	mov	arg04, #10
1491c     50 58 B0 FD | 	call	#__system___basic_print_integer
14920     47 01 00 FF 
14924     A8 15 06 F6 | 	mov	arg02, ##@LR__4642
14928     00 12 06 F6 | 	mov	arg01, #0
1492c     00 16 06 F6 | 	mov	arg03, #0
14930     F8 57 B0 FD | 	call	#__system___basic_print_string
14934     14 13 02 F6 | 	mov	arg01, local06
14938     FC 70 B0 FD | 	call	#__system___strerror
1493c     FD 14 02 F6 | 	mov	arg02, result1
14940     00 12 06 F6 | 	mov	arg01, #0
14944     00 16 06 F6 | 	mov	arg03, #0
14948     E0 57 B0 FD | 	call	#__system___basic_print_string
1494c     00 12 06 F6 | 	mov	arg01, #0
14950     0A 14 06 F6 | 	mov	arg02, #10
14954     00 16 06 F6 | 	mov	arg03, #0
14958     78 57 B0 FD | 	call	#__system___basic_print_char
1495c     00 12 06 F6 | 	mov	arg01, #0
14960     D8 A3 B0 FD | 	call	#__system___getiolock_0425
14964     FD 00 68 FC | 	wrlong	#0, result1
14968     09 12 06 F6 | 	mov	arg01, #9
1496c     FC 99 B0 FD | 	call	#__system__close
14970     FC 00 90 FD | 	jmp	#LR__1615
14974                 | LR__1612
14974     01 2A 06 F6 | 	mov	local07, #1
14978     00 2C 06 F6 | 	mov	local08, #0
1497c                 | '   do
1497c                 | LR__1613
1497c                 | '     get #9,pos,block(0),1024,r : pos+=r	
1497c     77 00 00 FF 
14980     70 E4 05 F1 | 	add	objptr, ##61040
14984     F2 16 02 F6 | 	mov	arg03, objptr
14988     77 00 00 FF 
1498c     70 E4 85 F1 | 	sub	objptr, ##61040
14990     09 12 06 F6 | 	mov	arg01, #9
14994     15 15 02 F6 | 	mov	arg02, local07
14998     0A 18 C6 F9 | 	decod	arg04, #10
1499c     01 1A 06 F6 | 	mov	arg05, #1
149a0     98 58 B0 FD | 	call	#__system___basic_get
149a4     FD 28 02 F6 | 	mov	local06, result1
149a8     FD 2A 02 F1 | 	add	local07, result1
149ac     77 00 00 FF 
149b0     70 E4 05 F1 | 	add	objptr, ##61040
149b4     F2 12 02 F6 | 	mov	arg01, objptr
149b8     16 15 02 F6 | 	mov	arg02, local08
149bc     0A 16 C6 F9 | 	decod	arg03, #10
149c0     6B 00 00 FF 
149c4     B0 E5 85 F1 | 	sub	objptr, ##55216
149c8     9C 3F B0 FD | 	call	#_psram_spin2_write
149cc     0B 00 00 FF 
149d0     C0 E4 85 F1 | 	sub	objptr, ##5824
149d4     14 2D 02 F1 | 	add	local08, local06
149d8     02 00 00 FF 
149dc     00 28 0E F2 | 	cmp	local06, ##1024 wz
149e0     E0 03 00 AF 
149e4     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
149e8     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1613
149ec     56 00 00 FF 
149f0     C0 E4 05 F1 | 	add	objptr, ##44224
149f4     F2 12 02 FB | 	rdlong	arg01, objptr
149f8     03 12 62 FD | 	cogstop	arg01
149fc     04 E4 05 F1 | 	add	objptr, #4
14a00     F2 12 02 FB | 	rdlong	arg01, objptr
14a04     03 12 62 FD | 	cogstop	arg01
14a08     04 E4 05 F1 | 	add	objptr, #4
14a0c     F2 12 02 FB | 	rdlong	arg01, objptr
14a10     03 12 62 FD | 	cogstop	arg01
14a14     22 00 00 FF 
14a18     E0 E5 05 F1 | 	add	objptr, ##17888
14a1c     F2 12 02 FB | 	rdlong	arg01, objptr
14a20     03 12 62 FD | 	cogstop	arg01
14a24     10 00 00 FF 
14a28     B8 EA 05 F1 | 	add	ptr__dat__, ##8376
14a2c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
14a30     10 00 00 FF 
14a34     B8 EA 85 F1 | 	sub	ptr__dat__, ##8376
14a38     22 00 00 FF 
14a3c     D8 E5 85 F1 | 	sub	objptr, ##17880
14a40     1E 2C 06 F6 | 	mov	local08, #30
14a44     28 E4 61 FD | 	setq	objptr
14a48     0A 2D F2 FC | 	coginit	local08, arg02 wc
14a4c     01 2C 66 C6 |  if_b	neg	local08, #1
14a50     24 00 00 FF 
14a54     FC E4 05 F1 | 	add	objptr, ##18684
14a58     F2 2C 62 FC | 	wrlong	local08, objptr
14a5c     7A 00 00 FF 
14a60     CC E5 85 F1 | 	sub	objptr, ##62924
14a64     00 12 06 F6 | 	mov	arg01, #0
14a68     01 12 62 FD | 	cogid	arg01
14a6c     03 12 62 FD | 	cogstop	arg01
14a70                 | LR__1614
14a70                 | LR__1615
14a70     A7 F0 03 F6 | 	mov	ptra, fp
14a74     B2 00 A0 FD | 	call	#popregs_
14a78                 | _do_brun_ret
14a78     2D 00 64 FD | 	ret
14a7c                 | 
14a7c                 | ' 
14a7c                 | ' 
14a7c                 | ' sub do_mouse
14a7c                 | _do_mouse
14a7c     B8 4E BF FD | 	call	#_pop
14a80     00 FA 4D F2 | 	cmps	result1, #0 wz
14a84                 | ' 
14a84                 | ' t1=pop()
14a84                 | ' 
14a84                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
14a84     14 00 90 5D |  if_ne	jmp	#LR__1620
14a88     10 12 06 F6 | 	mov	arg01, #16
14a8c     00 14 06 F6 | 	mov	arg02, #0
14a90     00 16 06 F6 | 	mov	arg03, #0
14a94     88 29 B0 FD | 	call	#_hg010b_spin2_setspritesize
14a98     10 00 90 FD | 	jmp	#LR__1621
14a9c                 | LR__1620
14a9c     10 12 06 F6 | 	mov	arg01, #16
14aa0     20 14 06 F6 | 	mov	arg02, #32
14aa4     20 16 06 F6 | 	mov	arg03, #32
14aa8     74 29 B0 FD | 	call	#_hg010b_spin2_setspritesize
14aac                 | LR__1621
14aac                 | _do_mouse_ret
14aac     2D 00 64 FD | 	ret
14ab0                 | 
14ab0                 | ' 
14ab0                 | ' sub do_cursor
14ab0                 | _do_cursor
14ab0     84 4E BF FD | 	call	#_pop
14ab4     00 FA 4D F2 | 	cmps	result1, #0 wz
14ab8                 | ' 
14ab8                 | ' t1=pop()
14ab8                 | ' 
14ab8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
14ab8     14 00 90 5D |  if_ne	jmp	#LR__1630
14abc     11 12 06 F6 | 	mov	arg01, #17
14ac0     00 14 06 F6 | 	mov	arg02, #0
14ac4     00 16 06 F6 | 	mov	arg03, #0
14ac8     54 29 B0 FD | 	call	#_hg010b_spin2_setspritesize
14acc     10 00 90 FD | 	jmp	#LR__1631
14ad0                 | LR__1630
14ad0     11 12 06 F6 | 	mov	arg01, #17
14ad4     08 14 06 F6 | 	mov	arg02, #8
14ad8     10 16 06 F6 | 	mov	arg03, #16
14adc     40 29 B0 FD | 	call	#_hg010b_spin2_setspritesize
14ae0                 | LR__1631
14ae0                 | _do_cursor_ret
14ae0     2D 00 64 FD | 	ret
14ae4                 | 
14ae4                 | ' 
14ae4                 | ' 
14ae4                 | ' sub do_click
14ae4                 | _do_click
14ae4     50 4E BF FD | 	call	#_pop
14ae8     00 FA 4D F2 | 	cmps	result1, #0 wz
14aec                 | ' 
14aec                 | ' t1=pop()
14aec                 | ' 
14aec                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
14aec     79 00 00 AF 
14af0     A4 E4 05 A1 |  if_e	add	objptr, ##62116
14af4     F2 00 68 AC |  if_e	wrlong	#0, objptr
14af8     79 00 00 FF 
14afc     A4 E4 C5 F3 | 	sumz	objptr, ##62116
14b00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
14b04     79 00 00 5F 
14b08     A4 E4 85 51 |  if_ne	sub	objptr, ##62116
14b0c                 | _do_click_ret
14b0c     2D 00 64 FD | 	ret
14b10                 | 
14b10                 | ' 
14b10                 | ' 
14b10                 | ' sub do_beep
14b10                 | _do_beep
14b10     02 4A 05 F6 | 	mov	COUNT_, #2
14b14     A8 00 A0 FD | 	call	#pushregs_
14b18     20 F0 07 F1 | 	add	ptra, #32
14b1c     18 4E BF FD | 	call	#_pop
14b20     FD 1E 02 F6 | 	mov	local01, result1
14b24     FE 1C 02 F6 | 	mov	arg06, result2
14b28     FF 20 02 F6 | 	mov	local02, result3
14b2c     0C 4E 05 F1 | 	add	fp, #12
14b30     A7 1E 62 FC | 	wrlong	local01, fp
14b34     04 4E 05 F1 | 	add	fp, #4
14b38     A7 1C 62 FC | 	wrlong	arg06, fp
14b3c     04 4E 05 F1 | 	add	fp, #4
14b40     A7 20 62 FC | 	wrlong	local02, fp
14b44     14 4E 85 F1 | 	sub	fp, #20
14b48     EC 4D BF FD | 	call	#_pop
14b4c     A7 FA 61 FC | 	wrlong	result1, fp
14b50     04 4E 05 F1 | 	add	fp, #4
14b54     A7 FC 61 FC | 	wrlong	result2, fp
14b58     04 4E 05 F1 | 	add	fp, #4
14b5c     A7 FE 61 FC | 	wrlong	result3, fp
14b60                 | ' 
14b60                 | ' 
14b60                 | ' 
14b60                 | ' t2=pop()
14b60                 | ' t1=pop()
14b60                 | ' 
14b60                 | ' 
14b60                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
14b60     08 4E 85 F1 | 	sub	fp, #8
14b64     1C FE 0D F2 | 	cmp	result3, #28 wz
14b68     08 4E 05 51 |  if_ne	add	fp, #8
14b6c     A7 20 02 5B |  if_ne	rdlong	local02, fp
14b70     08 4E 85 51 |  if_ne	sub	fp, #8
14b74     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
14b78     A7 1E 02 AB |  if_e	rdlong	local01, fp
14b7c     18 4E 05 A1 |  if_e	add	fp, #24
14b80     A7 1E 62 AC |  if_e	wrlong	local01, fp
14b84     18 4E 85 A1 |  if_e	sub	fp, #24
14b88     14 00 90 AD |  if_e	jmp	#LR__1640
14b8c     A7 12 02 F6 | 	mov	arg01, fp
14b90     54 C7 BF FD | 	call	#_converttoint
14b94     18 4E 05 F1 | 	add	fp, #24
14b98     A7 FA 61 FC | 	wrlong	result1, fp
14b9c     18 4E 85 F1 | 	sub	fp, #24
14ba0                 | LR__1640
14ba0     1C 4E 05 F1 | 	add	fp, #28
14ba4     A7 FE 48 FC | 	wrbyte	#127, fp
14ba8     01 4E 05 F1 | 	add	fp, #1
14bac     A7 00 49 FC | 	wrbyte	#128, fp
14bb0     01 4E 85 F1 | 	sub	fp, #1
14bb4     A7 14 02 F6 | 	mov	arg02, fp
14bb8     04 4E 85 F1 | 	sub	fp, #4
14bbc     A7 16 02 FB | 	rdlong	arg03, fp
14bc0     18 4E 85 F1 | 	sub	fp, #24
14bc4     01 16 66 F0 | 	shl	arg03, #1
14bc8     07 12 06 F6 | 	mov	arg01, #7
14bcc     0E 18 C6 F9 | 	decod	arg04, #14
14bd0     02 1A 06 F6 | 	mov	arg05, #2
14bd4     00 1C 06 F6 | 	mov	arg06, #0
14bd8     0B 00 00 FF 
14bdc     C0 E4 05 F1 | 	add	objptr, ##5824
14be0     A0 44 B0 FD | 	call	#_Audio095_8_sc_spin2_play8
14be4     0B 00 00 FF 
14be8     C0 E4 85 F1 | 	sub	objptr, ##5824
14bec     0C 4E 05 F1 | 	add	fp, #12
14bf0     A7 12 02 F6 | 	mov	arg01, fp
14bf4     0C 4E 85 F1 | 	sub	fp, #12
14bf8     D4 4D BF FD | 	call	#_push
14bfc     58 F6 BF FD | 	call	#_do_waitms
14c00     07 12 06 F6 | 	mov	arg01, #7
14c04     0B 00 00 FF 
14c08     C0 E4 05 F1 | 	add	objptr, ##5824
14c0c     28 45 B0 FD | 	call	#_Audio095_8_sc_spin2_stop
14c10     0B 00 00 FF 
14c14     C0 E4 85 F1 | 	sub	objptr, ##5824
14c18     A7 F0 03 F6 | 	mov	ptra, fp
14c1c     B2 00 A0 FD | 	call	#popregs_
14c20                 | _do_beep_ret
14c20     2D 00 64 FD | 	ret
14c24                 | 
14c24                 | ' 
14c24                 | ' sub do_no_command
14c24                 | _do_no_command
14c24     17 12 06 F6 | 	mov	arg01, #23
14c28     50 12 B0 FD | 	call	#_printerror
14c2c                 | _do_no_command_ret
14c2c     2D 00 64 FD | 	ret
14c30                 | 
14c30                 | ' 
14c30                 | ' sub do_negative
14c30                 | _do_negative
14c30     02 4A 05 F6 | 	mov	COUNT_, #2
14c34     A8 00 A0 FD | 	call	#pushregs_
14c38     0C F0 07 F1 | 	add	ptra, #12
14c3c     F8 4C BF FD | 	call	#_pop
14c40     FF 1E 02 F6 | 	mov	local01, result3
14c44     A7 FA 61 FC | 	wrlong	result1, fp
14c48     04 4E 05 F1 | 	add	fp, #4
14c4c     A7 FC 61 FC | 	wrlong	result2, fp
14c50     04 4E 05 F1 | 	add	fp, #4
14c54     A7 1E 62 FC | 	wrlong	local01, fp
14c58                 | ' t1=pop()
14c58                 | ' if t1.result_type=result_int then 
14c58     08 4E 85 F1 | 	sub	fp, #8
14c5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14c60     A7 20 02 AB |  if_e	rdlong	local02, fp
14c64     10 1F 62 A6 |  if_e	neg	local01, local02
14c68     A7 1E 62 AC |  if_e	wrlong	local01, fp
14c6c     5C 00 90 AD |  if_e	jmp	#LR__1652
14c70     08 4E 05 F1 | 	add	fp, #8
14c74     A7 1E 02 FB | 	rdlong	local01, fp
14c78     08 4E 85 F1 | 	sub	fp, #8
14c7c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14c80     1C 00 90 5D |  if_ne	jmp	#LR__1650
14c84     A7 20 02 FB | 	rdlong	local02, fp
14c88     10 1F 62 F6 | 	neg	local01, local02
14c8c     A7 1E 62 FC | 	wrlong	local01, fp
14c90     08 4E 05 F1 | 	add	fp, #8
14c94     A7 38 68 FC | 	wrlong	#28, fp
14c98     08 4E 85 F1 | 	sub	fp, #8
14c9c     2C 00 90 FD | 	jmp	#LR__1651
14ca0                 | LR__1650
14ca0     08 4E 05 F1 | 	add	fp, #8
14ca4     A7 1E 02 FB | 	rdlong	local01, fp
14ca8     08 4E 85 F1 | 	sub	fp, #8
14cac     1E 1E 0E F2 | 	cmp	local01, #30 wz
14cb0     A7 FA 01 AB |  if_e	rdlong	result1, fp
14cb4     1F FA E5 A4 |  if_e	bitnot	result1, #31
14cb8     A7 FA 61 AC |  if_e	wrlong	result1, fp
14cbc     08 4E 05 51 |  if_ne	add	fp, #8
14cc0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
14cc4     08 4E 85 51 |  if_ne	sub	fp, #8
14cc8     A7 50 68 5C |  if_ne	wrlong	#40, fp
14ccc                 | LR__1651
14ccc                 | LR__1652
14ccc     A7 12 02 F6 | 	mov	arg01, fp
14cd0     FC 4C BF FD | 	call	#_push
14cd4     A7 F0 03 F6 | 	mov	ptra, fp
14cd8     B2 00 A0 FD | 	call	#popregs_
14cdc                 | _do_negative_ret
14cdc     2D 00 64 FD | 	ret
14ce0                 | 
14ce0                 | ' 
14ce0                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
14ce0                 | ' 
14ce0                 | ' ''----------------------------------------------------------------------------------------------------
14ce0                 | ' ''------------------ Initialization procedures -------------------------------------------------------
14ce0                 | ' ''----------------------------------------------------------------------------------------------------
14ce0                 | ' 
14ce0                 | ' ''--------------------------- Command function pointers
14ce0                 | ' 
14ce0                 | ' sub init_commands
14ce0                 | _init_commands
14ce0                 | ' 
14ce0                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
14ce0     00 00 06 F6 | 	mov	_var01, #0
14ce4     97 16 48 FB | 	callpa	#(@LR__1661-@LR__1660)>>2,fcache_load_ptr_
14ce8                 | LR__1660
14ce8     00 FB 01 F6 | 	mov	result1, _var01
14cec     02 FA 65 F0 | 	shl	result1, #2
14cf0     62 00 00 FF 
14cf4     24 E5 05 F1 | 	add	objptr, ##50468
14cf8     F2 FA 01 F1 | 	add	result1, objptr
14cfc     62 00 00 FF 
14d00     24 E5 85 F1 | 	sub	objptr, ##50468
14d04     FD E4 61 FC | 	wrlong	objptr, result1
14d08     01 00 06 F1 | 	add	_var01, #1
14d0c     00 01 56 F2 | 	cmps	_var01, #256 wc
14d10     D4 FF 9F CD |  if_b	jmp	#LR__1660
14d14                 | LR__1661
14d14     F2 FA 01 F6 | 	mov	result1, objptr
14d18     14 FA 25 F4 | 	bith	result1, #20
14d1c     62 00 00 FF 
14d20     28 E5 05 F1 | 	add	objptr, ##50472
14d24     F2 FA 61 FC | 	wrlong	result1, objptr
14d28     62 00 00 FF 
14d2c     28 E5 85 F1 | 	sub	objptr, ##50472
14d30     F2 FA 01 F6 | 	mov	result1, objptr
14d34     15 FA 25 F4 | 	bith	result1, #21
14d38     62 00 00 FF 
14d3c     2C E5 05 F1 | 	add	objptr, ##50476
14d40     F2 FA 61 FC | 	wrlong	result1, objptr
14d44     62 00 00 FF 
14d48     2C E5 85 F1 | 	sub	objptr, ##50476
14d4c     F2 FA 01 F6 | 	mov	result1, objptr
14d50     34 FA 25 F4 | 	bith	result1, #52
14d54     62 00 00 FF 
14d58     30 E5 05 F1 | 	add	objptr, ##50480
14d5c     F2 FA 61 FC | 	wrlong	result1, objptr
14d60     62 00 00 FF 
14d64     30 E5 85 F1 | 	sub	objptr, ##50480
14d68     F2 FA 01 F6 | 	mov	result1, objptr
14d6c     16 FA 25 F4 | 	bith	result1, #22
14d70     62 00 00 FF 
14d74     38 E5 05 F1 | 	add	objptr, ##50488
14d78     F2 FA 61 FC | 	wrlong	result1, objptr
14d7c     62 00 00 FF 
14d80     38 E5 85 F1 | 	sub	objptr, ##50488
14d84     F2 FA 01 F6 | 	mov	result1, objptr
14d88     00 28 00 FF 
14d8c     00 FA 45 F5 | 	or	result1, ##5242880
14d90     62 00 00 FF 
14d94     3C E5 05 F1 | 	add	objptr, ##50492
14d98     F2 FA 61 FC | 	wrlong	result1, objptr
14d9c     62 00 00 FF 
14da0     3C E5 85 F1 | 	sub	objptr, ##50492
14da4     F2 FA 01 F6 | 	mov	result1, objptr
14da8     35 FA 25 F4 | 	bith	result1, #53
14dac     62 00 00 FF 
14db0     40 E5 05 F1 | 	add	objptr, ##50496
14db4     F2 FA 61 FC | 	wrlong	result1, objptr
14db8     62 00 00 FF 
14dbc     40 E5 85 F1 | 	sub	objptr, ##50496
14dc0     F2 FA 01 F6 | 	mov	result1, objptr
14dc4     54 FA 25 F4 | 	bith	result1, #84
14dc8     62 00 00 FF 
14dcc     44 E5 05 F1 | 	add	objptr, ##50500
14dd0     F2 FA 61 FC | 	wrlong	result1, objptr
14dd4     62 00 00 FF 
14dd8     44 E5 85 F1 | 	sub	objptr, ##50500
14ddc     F2 FA 01 F6 | 	mov	result1, objptr
14de0     17 FA 25 F4 | 	bith	result1, #23
14de4     62 00 00 FF 
14de8     48 E5 05 F1 | 	add	objptr, ##50504
14dec     F2 FA 61 FC | 	wrlong	result1, objptr
14df0     62 00 00 FF 
14df4     48 E5 85 F1 | 	sub	objptr, ##50504
14df8     F2 FA 01 F6 | 	mov	result1, objptr
14dfc     00 48 00 FF 
14e00     00 FA 45 F5 | 	or	result1, ##9437184
14e04     62 00 00 FF 
14e08     4C E5 05 F1 | 	add	objptr, ##50508
14e0c     F2 FA 61 FC | 	wrlong	result1, objptr
14e10     62 00 00 FF 
14e14     4C E5 85 F1 | 	sub	objptr, ##50508
14e18     F2 FA 01 F6 | 	mov	result1, objptr
14e1c     00 50 00 FF 
14e20     00 FA 45 F5 | 	or	result1, ##10485760
14e24     62 00 00 FF 
14e28     50 E5 05 F1 | 	add	objptr, ##50512
14e2c     F2 FA 61 FC | 	wrlong	result1, objptr
14e30     62 00 00 FF 
14e34     50 E5 85 F1 | 	sub	objptr, ##50512
14e38     F2 FA 01 F6 | 	mov	result1, objptr
14e3c     00 58 00 FF 
14e40     00 FA 45 F5 | 	or	result1, ##11534336
14e44     62 00 00 FF 
14e48     54 E5 05 F1 | 	add	objptr, ##50516
14e4c     F2 FA 61 FC | 	wrlong	result1, objptr
14e50     62 00 00 FF 
14e54     54 E5 85 F1 | 	sub	objptr, ##50516
14e58     F2 FA 01 F6 | 	mov	result1, objptr
14e5c     36 FA 25 F4 | 	bith	result1, #54
14e60     62 00 00 FF 
14e64     68 E5 05 F1 | 	add	objptr, ##50536
14e68     F2 FA 61 FC | 	wrlong	result1, objptr
14e6c     62 00 00 FF 
14e70     68 E5 85 F1 | 	sub	objptr, ##50536
14e74     F2 FA 01 F6 | 	mov	result1, objptr
14e78     00 68 00 FF 
14e7c     00 FA 45 F5 | 	or	result1, ##13631488
14e80     62 00 00 FF 
14e84     98 E5 05 F1 | 	add	objptr, ##50584
14e88     F2 FA 61 FC | 	wrlong	result1, objptr
14e8c     62 00 00 FF 
14e90     98 E5 85 F1 | 	sub	objptr, ##50584
14e94     F2 FA 01 F6 | 	mov	result1, objptr
14e98     00 68 00 FF 
14e9c     00 FA 45 F5 | 	or	result1, ##13631488
14ea0     62 00 00 FF 
14ea4     94 E5 05 F1 | 	add	objptr, ##50580
14ea8     F2 FA 61 FC | 	wrlong	result1, objptr
14eac     62 00 00 FF 
14eb0     94 E5 85 F1 | 	sub	objptr, ##50580
14eb4     F2 FA 01 F6 | 	mov	result1, objptr
14eb8     00 68 00 FF 
14ebc     00 FA 45 F5 | 	or	result1, ##13631488
14ec0     62 00 00 FF 
14ec4     9C E5 05 F1 | 	add	objptr, ##50588
14ec8     F2 FA 61 FC | 	wrlong	result1, objptr
14ecc     62 00 00 FF 
14ed0     9C E5 85 F1 | 	sub	objptr, ##50588
14ed4     F2 FA 01 F6 | 	mov	result1, objptr
14ed8     00 68 00 FF 
14edc     00 FA 45 F5 | 	or	result1, ##13631488
14ee0     62 00 00 FF 
14ee4     A0 E5 05 F1 | 	add	objptr, ##50592
14ee8     F2 FA 61 FC | 	wrlong	result1, objptr
14eec     62 00 00 FF 
14ef0     A0 E5 85 F1 | 	sub	objptr, ##50592
14ef4     F2 FA 01 F6 | 	mov	result1, objptr
14ef8     00 68 00 FF 
14efc     00 FA 45 F5 | 	or	result1, ##13631488
14f00     62 00 00 FF 
14f04     D0 E5 05 F1 | 	add	objptr, ##50640
14f08     F2 FA 61 FC | 	wrlong	result1, objptr
14f0c     62 00 00 FF 
14f10     D0 E5 85 F1 | 	sub	objptr, ##50640
14f14     F2 FA 01 F6 | 	mov	result1, objptr
14f18     55 FA 25 F4 | 	bith	result1, #85
14f1c     62 00 00 FF 
14f20     80 E5 05 F1 | 	add	objptr, ##50560
14f24     F2 FA 61 FC | 	wrlong	result1, objptr
14f28     62 00 00 FF 
14f2c     80 E5 85 F1 | 	sub	objptr, ##50560
14f30     F2 FA 01 F6 | 	mov	result1, objptr
14f34     00 68 00 FF 
14f38     00 FA 45 F5 | 	or	result1, ##13631488
14f3c     62 00 00 FF 
14f40     A4 E5 05 F1 | 	add	objptr, ##50596
14f44     F2 FA 61 FC | 	wrlong	result1, objptr
14f48     62 00 00 FF 
14f4c     A4 E5 85 F1 | 	sub	objptr, ##50596
14f50     F2 FA 01 F6 | 	mov	result1, objptr
14f54     00 68 00 FF 
14f58     00 FA 45 F5 | 	or	result1, ##13631488
14f5c     62 00 00 FF 
14f60     A8 E5 05 F1 | 	add	objptr, ##50600
14f64     F2 FA 61 FC | 	wrlong	result1, objptr
14f68     62 00 00 FF 
14f6c     A8 E5 85 F1 | 	sub	objptr, ##50600
14f70     F2 FA 01 F6 | 	mov	result1, objptr
14f74     00 68 00 FF 
14f78     00 FA 45 F5 | 	or	result1, ##13631488
14f7c     62 00 00 FF 
14f80     AC E5 05 F1 | 	add	objptr, ##50604
14f84     F2 FA 61 FC | 	wrlong	result1, objptr
14f88     62 00 00 FF 
14f8c     AC E5 85 F1 | 	sub	objptr, ##50604
14f90     F2 FA 01 F6 | 	mov	result1, objptr
14f94     74 FA 25 F4 | 	bith	result1, #116
14f98     63 00 00 FF 
14f9c     24 E4 05 F1 | 	add	objptr, ##50724
14fa0     F2 FA 61 FC | 	wrlong	result1, objptr
14fa4     63 00 00 FF 
14fa8     24 E4 85 F1 | 	sub	objptr, ##50724
14fac     F2 FA 01 F6 | 	mov	result1, objptr
14fb0     18 FA 25 F4 | 	bith	result1, #24
14fb4     63 00 00 FF 
14fb8     28 E4 05 F1 | 	add	objptr, ##50728
14fbc     F2 FA 61 FC | 	wrlong	result1, objptr
14fc0     63 00 00 FF 
14fc4     28 E4 85 F1 | 	sub	objptr, ##50728
14fc8     F2 FA 01 F6 | 	mov	result1, objptr
14fcc     00 88 00 FF 
14fd0     00 FA 45 F5 | 	or	result1, ##17825792
14fd4     63 00 00 FF 
14fd8     2C E4 05 F1 | 	add	objptr, ##50732
14fdc     F2 FA 61 FC | 	wrlong	result1, objptr
14fe0     63 00 00 FF 
14fe4     2C E4 85 F1 | 	sub	objptr, ##50732
14fe8     F2 FA 01 F6 | 	mov	result1, objptr
14fec     00 90 00 FF 
14ff0     00 FA 45 F5 | 	or	result1, ##18874368
14ff4     63 00 00 FF 
14ff8     30 E4 05 F1 | 	add	objptr, ##50736
14ffc     F2 FA 61 FC | 	wrlong	result1, objptr
15000     63 00 00 FF 
15004     30 E4 85 F1 | 	sub	objptr, ##50736
15008     F2 FA 01 F6 | 	mov	result1, objptr
1500c     00 98 00 FF 
15010     00 FA 45 F5 | 	or	result1, ##19922944
15014     63 00 00 FF 
15018     34 E4 05 F1 | 	add	objptr, ##50740
1501c     F2 FA 61 FC | 	wrlong	result1, objptr
15020     63 00 00 FF 
15024     34 E4 85 F1 | 	sub	objptr, ##50740
15028     F2 FA 01 F6 | 	mov	result1, objptr
1502c     00 A0 00 FF 
15030     00 FA 45 F5 | 	or	result1, ##20971520
15034     63 00 00 FF 
15038     38 E4 05 F1 | 	add	objptr, ##50744
1503c     F2 FA 61 FC | 	wrlong	result1, objptr
15040     63 00 00 FF 
15044     38 E4 85 F1 | 	sub	objptr, ##50744
15048     F2 FA 01 F6 | 	mov	result1, objptr
1504c     00 A8 00 FF 
15050     00 FA 45 F5 | 	or	result1, ##22020096
15054     63 00 00 FF 
15058     3C E4 05 F1 | 	add	objptr, ##50748
1505c     F2 FA 61 FC | 	wrlong	result1, objptr
15060     63 00 00 FF 
15064     3C E4 85 F1 | 	sub	objptr, ##50748
15068     F2 FA 01 F6 | 	mov	result1, objptr
1506c     00 B0 00 FF 
15070     00 FA 45 F5 | 	or	result1, ##23068672
15074     63 00 00 FF 
15078     40 E4 05 F1 | 	add	objptr, ##50752
1507c     F2 FA 61 FC | 	wrlong	result1, objptr
15080     63 00 00 FF 
15084     40 E4 85 F1 | 	sub	objptr, ##50752
15088     F2 FA 01 F6 | 	mov	result1, objptr
1508c     00 B8 00 FF 
15090     00 FA 45 F5 | 	or	result1, ##24117248
15094     63 00 00 FF 
15098     44 E4 05 F1 | 	add	objptr, ##50756
1509c     F2 FA 61 FC | 	wrlong	result1, objptr
150a0     63 00 00 FF 
150a4     44 E4 85 F1 | 	sub	objptr, ##50756
150a8     F2 FA 01 F6 | 	mov	result1, objptr
150ac     37 FA 25 F4 | 	bith	result1, #55
150b0     63 00 00 FF 
150b4     48 E4 05 F1 | 	add	objptr, ##50760
150b8     F2 FA 61 FC | 	wrlong	result1, objptr
150bc     63 00 00 FF 
150c0     48 E4 85 F1 | 	sub	objptr, ##50760
150c4     F2 FA 01 F6 | 	mov	result1, objptr
150c8     00 C8 00 FF 
150cc     00 FA 45 F5 | 	or	result1, ##26214400
150d0     63 00 00 FF 
150d4     4C E4 05 F1 | 	add	objptr, ##50764
150d8     F2 FA 61 FC | 	wrlong	result1, objptr
150dc     63 00 00 FF 
150e0     4C E4 85 F1 | 	sub	objptr, ##50764
150e4     F2 FA 01 F6 | 	mov	result1, objptr
150e8     00 D0 00 FF 
150ec     00 FA 45 F5 | 	or	result1, ##27262976
150f0     63 00 00 FF 
150f4     50 E4 05 F1 | 	add	objptr, ##50768
150f8     F2 FA 61 FC | 	wrlong	result1, objptr
150fc     63 00 00 FF 
15100     50 E4 85 F1 | 	sub	objptr, ##50768
15104     F2 FA 01 F6 | 	mov	result1, objptr
15108     00 D8 00 FF 
1510c     00 FA 45 F5 | 	or	result1, ##28311552
15110     63 00 00 FF 
15114     54 E4 05 F1 | 	add	objptr, ##50772
15118     F2 FA 61 FC | 	wrlong	result1, objptr
1511c     63 00 00 FF 
15120     54 E4 85 F1 | 	sub	objptr, ##50772
15124     F2 FA 01 F6 | 	mov	result1, objptr
15128     56 FA 25 F4 | 	bith	result1, #86
1512c     63 00 00 FF 
15130     58 E4 05 F1 | 	add	objptr, ##50776
15134     F2 FA 61 FC | 	wrlong	result1, objptr
15138     63 00 00 FF 
1513c     58 E4 85 F1 | 	sub	objptr, ##50776
15140     F2 FA 01 F6 | 	mov	result1, objptr
15144     00 E8 00 FF 
15148     00 FA 45 F5 | 	or	result1, ##30408704
1514c     64 00 00 FF 
15150     20 E5 05 F1 | 	add	objptr, ##51488
15154     F2 FA 61 FC | 	wrlong	result1, objptr
15158     64 00 00 FF 
1515c     20 E5 85 F1 | 	sub	objptr, ##51488
15160     F2 FA 01 F6 | 	mov	result1, objptr
15164     75 FA 25 F4 | 	bith	result1, #117
15168     63 00 00 FF 
1516c     5C E4 05 F1 | 	add	objptr, ##50780
15170     F2 FA 61 FC | 	wrlong	result1, objptr
15174     63 00 00 FF 
15178     5C E4 85 F1 | 	sub	objptr, ##50780
1517c     F2 FA 01 F6 | 	mov	result1, objptr
15180     94 FA 25 F4 | 	bith	result1, #148
15184     63 00 00 FF 
15188     70 E4 05 F1 | 	add	objptr, ##50800
1518c     F2 FA 61 FC | 	wrlong	result1, objptr
15190     63 00 00 FF 
15194     70 E4 85 F1 | 	sub	objptr, ##50800
15198     F2 FA 01 F6 | 	mov	result1, objptr
1519c     19 FA 25 F4 | 	bith	result1, #25
151a0     63 00 00 FF 
151a4     60 E4 05 F1 | 	add	objptr, ##50784
151a8     F2 FA 61 FC | 	wrlong	result1, objptr
151ac     63 00 00 FF 
151b0     60 E4 85 F1 | 	sub	objptr, ##50784
151b4     F2 FA 01 F6 | 	mov	result1, objptr
151b8     00 08 01 FF 
151bc     00 FA 45 F5 | 	or	result1, ##34603008
151c0     62 00 00 FF 
151c4     7C E5 05 F1 | 	add	objptr, ##50556
151c8     F2 FA 61 FC | 	wrlong	result1, objptr
151cc     62 00 00 FF 
151d0     7C E5 85 F1 | 	sub	objptr, ##50556
151d4     F2 FA 01 F6 | 	mov	result1, objptr
151d8     00 10 01 FF 
151dc     00 FA 45 F5 | 	or	result1, ##35651584
151e0     63 00 00 FF 
151e4     64 E4 05 F1 | 	add	objptr, ##50788
151e8     F2 FA 61 FC | 	wrlong	result1, objptr
151ec     63 00 00 FF 
151f0     64 E4 85 F1 | 	sub	objptr, ##50788
151f4     F2 FA 01 F6 | 	mov	result1, objptr
151f8     00 18 01 FF 
151fc     00 FA 45 F5 | 	or	result1, ##36700160
15200     63 00 00 FF 
15204     68 E4 05 F1 | 	add	objptr, ##50792
15208     F2 FA 61 FC | 	wrlong	result1, objptr
1520c     63 00 00 FF 
15210     68 E4 85 F1 | 	sub	objptr, ##50792
15214     F2 FA 01 F6 | 	mov	result1, objptr
15218     00 20 01 FF 
1521c     00 FA 45 F5 | 	or	result1, ##37748736
15220     63 00 00 FF 
15224     6C E4 05 F1 | 	add	objptr, ##50796
15228     F2 FA 61 FC | 	wrlong	result1, objptr
1522c     63 00 00 FF 
15230     6C E4 85 F1 | 	sub	objptr, ##50796
15234     F2 FA 01 F6 | 	mov	result1, objptr
15238     00 28 01 FF 
1523c     00 FA 45 F5 | 	or	result1, ##38797312
15240     63 00 00 FF 
15244     78 E4 05 F1 | 	add	objptr, ##50808
15248     F2 FA 61 FC | 	wrlong	result1, objptr
1524c     63 00 00 FF 
15250     78 E4 85 F1 | 	sub	objptr, ##50808
15254     F2 FA 01 F6 | 	mov	result1, objptr
15258     00 30 01 FF 
1525c     00 FA 45 F5 | 	or	result1, ##39845888
15260     63 00 00 FF 
15264     7C E4 05 F1 | 	add	objptr, ##50812
15268     F2 FA 61 FC | 	wrlong	result1, objptr
1526c     63 00 00 FF 
15270     7C E4 85 F1 | 	sub	objptr, ##50812
15274     F2 FA 01 F6 | 	mov	result1, objptr
15278     00 38 01 FF 
1527c     00 FA 45 F5 | 	or	result1, ##40894464
15280     63 00 00 FF 
15284     80 E4 05 F1 | 	add	objptr, ##50816
15288     F2 FA 61 FC | 	wrlong	result1, objptr
1528c     63 00 00 FF 
15290     80 E4 85 F1 | 	sub	objptr, ##50816
15294     F2 FA 01 F6 | 	mov	result1, objptr
15298     00 40 01 FF 
1529c     00 FA 45 F5 | 	or	result1, ##41943040
152a0     63 00 00 FF 
152a4     84 E4 05 F1 | 	add	objptr, ##50820
152a8     F2 FA 61 FC | 	wrlong	result1, objptr
152ac     63 00 00 FF 
152b0     84 E4 85 F1 | 	sub	objptr, ##50820
152b4     F2 FA 01 F6 | 	mov	result1, objptr
152b8     00 48 01 FF 
152bc     00 FA 45 F5 | 	or	result1, ##42991616
152c0     63 00 00 FF 
152c4     8C E4 05 F1 | 	add	objptr, ##50828
152c8     F2 FA 61 FC | 	wrlong	result1, objptr
152cc     63 00 00 FF 
152d0     8C E4 85 F1 | 	sub	objptr, ##50828
152d4     F2 FA 01 F6 | 	mov	result1, objptr
152d8     00 50 01 FF 
152dc     00 FA 45 F5 | 	or	result1, ##44040192
152e0     63 00 00 FF 
152e4     90 E4 05 F1 | 	add	objptr, ##50832
152e8     F2 FA 61 FC | 	wrlong	result1, objptr
152ec     63 00 00 FF 
152f0     90 E4 85 F1 | 	sub	objptr, ##50832
152f4     F2 FA 01 F6 | 	mov	result1, objptr
152f8     00 58 01 FF 
152fc     00 FA 45 F5 | 	or	result1, ##45088768
15300     62 00 00 FF 
15304     90 E5 05 F1 | 	add	objptr, ##50576
15308     F2 FA 61 FC | 	wrlong	result1, objptr
1530c     62 00 00 FF 
15310     90 E5 85 F1 | 	sub	objptr, ##50576
15314     F2 FA 01 F6 | 	mov	result1, objptr
15318     00 60 01 FF 
1531c     00 FA 45 F5 | 	or	result1, ##46137344
15320     62 00 00 FF 
15324     C0 E5 05 F1 | 	add	objptr, ##50624
15328     F2 FA 61 FC | 	wrlong	result1, objptr
1532c     62 00 00 FF 
15330     C0 E5 85 F1 | 	sub	objptr, ##50624
15334     F2 FA 01 F6 | 	mov	result1, objptr
15338     00 68 01 FF 
1533c     00 FA 45 F5 | 	or	result1, ##47185920
15340     62 00 00 FF 
15344     BC E5 05 F1 | 	add	objptr, ##50620
15348     F2 FA 61 FC | 	wrlong	result1, objptr
1534c     62 00 00 FF 
15350     BC E5 85 F1 | 	sub	objptr, ##50620
15354     F2 FA 01 F6 | 	mov	result1, objptr
15358     00 70 01 FF 
1535c     00 FA 45 F5 | 	or	result1, ##48234496
15360     62 00 00 FF 
15364     60 E5 05 F1 | 	add	objptr, ##50528
15368     F2 FA 61 FC | 	wrlong	result1, objptr
1536c     62 00 00 FF 
15370     60 E5 85 F1 | 	sub	objptr, ##50528
15374     F2 FA 01 F6 | 	mov	result1, objptr
15378     00 78 01 FF 
1537c     00 FA 45 F5 | 	or	result1, ##49283072
15380     62 00 00 FF 
15384     64 E5 05 F1 | 	add	objptr, ##50532
15388     F2 FA 61 FC | 	wrlong	result1, objptr
1538c     62 00 00 FF 
15390     64 E5 85 F1 | 	sub	objptr, ##50532
15394     F2 FA 01 F6 | 	mov	result1, objptr
15398     38 FA 25 F4 | 	bith	result1, #56
1539c     62 00 00 FF 
153a0     CC E5 05 F1 | 	add	objptr, ##50636
153a4     F2 FA 61 FC | 	wrlong	result1, objptr
153a8     62 00 00 FF 
153ac     CC E5 85 F1 | 	sub	objptr, ##50636
153b0     F2 FA 01 F6 | 	mov	result1, objptr
153b4     00 88 01 FF 
153b8     00 FA 45 F5 | 	or	result1, ##51380224
153bc     63 00 00 FF 
153c0     74 E4 05 F1 | 	add	objptr, ##50804
153c4     F2 FA 61 FC | 	wrlong	result1, objptr
153c8     63 00 00 FF 
153cc     74 E4 85 F1 | 	sub	objptr, ##50804
153d0     F2 FA 01 F6 | 	mov	result1, objptr
153d4     00 90 01 FF 
153d8     00 FA 45 F5 | 	or	result1, ##52428800
153dc     63 00 00 FF 
153e0     88 E4 05 F1 | 	add	objptr, ##50824
153e4     F2 FA 61 FC | 	wrlong	result1, objptr
153e8     63 00 00 FF 
153ec     88 E4 85 F1 | 	sub	objptr, ##50824
153f0     F2 FA 01 F6 | 	mov	result1, objptr
153f4     00 98 01 FF 
153f8     00 FA 45 F5 | 	or	result1, ##53477376
153fc     63 00 00 FF 
15400     94 E4 05 F1 | 	add	objptr, ##50836
15404     F2 FA 61 FC | 	wrlong	result1, objptr
15408     63 00 00 FF 
1540c     94 E4 85 F1 | 	sub	objptr, ##50836
15410     F2 FA 01 F6 | 	mov	result1, objptr
15414     00 A0 01 FF 
15418     00 FA 45 F5 | 	or	result1, ##54525952
1541c     63 00 00 FF 
15420     98 E4 05 F1 | 	add	objptr, ##50840
15424     F2 FA 61 FC | 	wrlong	result1, objptr
15428     63 00 00 FF 
1542c     98 E4 85 F1 | 	sub	objptr, ##50840
15430     F2 FA 01 F6 | 	mov	result1, objptr
15434     00 A8 01 FF 
15438     00 FA 45 F5 | 	or	result1, ##55574528
1543c     63 00 00 FF 
15440     9C E4 05 F1 | 	add	objptr, ##50844
15444     F2 FA 61 FC | 	wrlong	result1, objptr
15448     63 00 00 FF 
1544c     9C E4 85 F1 | 	sub	objptr, ##50844
15450     F2 FA 01 F6 | 	mov	result1, objptr
15454     00 B0 01 FF 
15458     00 FA 45 F5 | 	or	result1, ##56623104
1545c     63 00 00 FF 
15460     A0 E4 05 F1 | 	add	objptr, ##50848
15464     F2 FA 61 FC | 	wrlong	result1, objptr
15468     63 00 00 FF 
1546c     A0 E4 85 F1 | 	sub	objptr, ##50848
15470     F2 FA 01 F6 | 	mov	result1, objptr
15474     00 B8 01 FF 
15478     00 FA 45 F5 | 	or	result1, ##57671680
1547c     63 00 00 FF 
15480     A4 E4 05 F1 | 	add	objptr, ##50852
15484     F2 FA 61 FC | 	wrlong	result1, objptr
15488     63 00 00 FF 
1548c     A4 E4 85 F1 | 	sub	objptr, ##50852
15490     F2 FA 01 F6 | 	mov	result1, objptr
15494     57 FA 25 F4 | 	bith	result1, #87
15498     63 00 00 FF 
1549c     A8 E4 05 F1 | 	add	objptr, ##50856
154a0     F2 FA 61 FC | 	wrlong	result1, objptr
154a4     63 00 00 FF 
154a8     A8 E4 85 F1 | 	sub	objptr, ##50856
154ac     F2 FA 01 F6 | 	mov	result1, objptr
154b0     94 FA 25 F4 | 	bith	result1, #148
154b4     63 00 00 FF 
154b8     70 E4 05 F1 | 	add	objptr, ##50800
154bc     F2 FA 61 FC | 	wrlong	result1, objptr
154c0     63 00 00 FF 
154c4     70 E4 85 F1 | 	sub	objptr, ##50800
154c8     F2 FA 01 F6 | 	mov	result1, objptr
154cc     00 C8 01 FF 
154d0     00 FA 45 F5 | 	or	result1, ##59768832
154d4     63 00 00 FF 
154d8     B0 E4 05 F1 | 	add	objptr, ##50864
154dc     F2 FA 61 FC | 	wrlong	result1, objptr
154e0     63 00 00 FF 
154e4     B0 E4 85 F1 | 	sub	objptr, ##50864
154e8     F2 FA 01 F6 | 	mov	result1, objptr
154ec     00 D0 01 FF 
154f0     00 FA 45 F5 | 	or	result1, ##60817408
154f4     63 00 00 FF 
154f8     AC E4 05 F1 | 	add	objptr, ##50860
154fc     F2 FA 61 FC | 	wrlong	result1, objptr
15500     63 00 00 FF 
15504     AC E4 85 F1 | 	sub	objptr, ##50860
15508     F2 FA 01 F6 | 	mov	result1, objptr
1550c     00 D8 01 FF 
15510     00 FA 45 F5 | 	or	result1, ##61865984
15514     63 00 00 FF 
15518     C4 E4 05 F1 | 	add	objptr, ##50884
1551c     F2 FA 61 FC | 	wrlong	result1, objptr
15520     63 00 00 FF 
15524     C4 E4 85 F1 | 	sub	objptr, ##50884
15528     F2 FA 01 F6 | 	mov	result1, objptr
1552c     76 FA 25 F4 | 	bith	result1, #118
15530     63 00 00 FF 
15534     C8 E4 05 F1 | 	add	objptr, ##50888
15538     F2 FA 61 FC | 	wrlong	result1, objptr
1553c     63 00 00 FF 
15540     C8 E4 85 F1 | 	sub	objptr, ##50888
15544     F2 FA 01 F6 | 	mov	result1, objptr
15548     00 E8 01 FF 
1554c     00 FA 45 F5 | 	or	result1, ##63963136
15550     63 00 00 FF 
15554     B4 E4 05 F1 | 	add	objptr, ##50868
15558     F2 FA 61 FC | 	wrlong	result1, objptr
1555c     63 00 00 FF 
15560     B4 E4 85 F1 | 	sub	objptr, ##50868
15564     F2 FA 01 F6 | 	mov	result1, objptr
15568     95 FA 25 F4 | 	bith	result1, #149
1556c     63 00 00 FF 
15570     B8 E4 05 F1 | 	add	objptr, ##50872
15574     F2 FA 61 FC | 	wrlong	result1, objptr
15578     63 00 00 FF 
1557c     B8 E4 85 F1 | 	sub	objptr, ##50872
15580     F2 FA 01 F6 | 	mov	result1, objptr
15584     B4 FA 25 F4 | 	bith	result1, #180
15588     63 00 00 FF 
1558c     BC E4 05 F1 | 	add	objptr, ##50876
15590     F2 FA 61 FC | 	wrlong	result1, objptr
15594     63 00 00 FF 
15598     BC E4 85 F1 | 	sub	objptr, ##50876
1559c     F2 FA 01 F6 | 	mov	result1, objptr
155a0     1A FA 25 F4 | 	bith	result1, #26
155a4     63 00 00 FF 
155a8     C0 E4 05 F1 | 	add	objptr, ##50880
155ac     F2 FA 61 FC | 	wrlong	result1, objptr
155b0     63 00 00 FF 
155b4     C0 E4 85 F1 | 	sub	objptr, ##50880
155b8     F2 FA 01 F6 | 	mov	result1, objptr
155bc     00 08 02 FF 
155c0     00 FA 45 F5 | 	or	result1, ##68157440
155c4     63 00 00 FF 
155c8     D0 E4 05 F1 | 	add	objptr, ##50896
155cc     F2 FA 61 FC | 	wrlong	result1, objptr
155d0     63 00 00 FF 
155d4     D0 E4 85 F1 | 	sub	objptr, ##50896
155d8     F2 FA 01 F6 | 	mov	result1, objptr
155dc     00 10 02 FF 
155e0     00 FA 45 F5 | 	or	result1, ##69206016
155e4     63 00 00 FF 
155e8     CC E4 05 F1 | 	add	objptr, ##50892
155ec     F2 FA 61 FC | 	wrlong	result1, objptr
155f0     63 00 00 FF 
155f4     CC E4 85 F1 | 	sub	objptr, ##50892
155f8     F2 FA 01 F6 | 	mov	result1, objptr
155fc     00 18 02 FF 
15600     00 FA 45 F5 | 	or	result1, ##70254592
15604     63 00 00 FF 
15608     DC E4 05 F1 | 	add	objptr, ##50908
1560c     F2 FA 61 FC | 	wrlong	result1, objptr
15610     63 00 00 FF 
15614     DC E4 85 F1 | 	sub	objptr, ##50908
15618     F2 FA 01 F6 | 	mov	result1, objptr
1561c     00 20 02 FF 
15620     00 FA 45 F5 | 	or	result1, ##71303168
15624     63 00 00 FF 
15628     D8 E4 05 F1 | 	add	objptr, ##50904
1562c     F2 FA 61 FC | 	wrlong	result1, objptr
15630     63 00 00 FF 
15634     D8 E4 85 F1 | 	sub	objptr, ##50904
15638     F2 FA 01 F6 | 	mov	result1, objptr
1563c     00 28 02 FF 
15640     00 FA 45 F5 | 	or	result1, ##72351744
15644     63 00 00 FF 
15648     D4 E4 05 F1 | 	add	objptr, ##50900
1564c     F2 FA 61 FC | 	wrlong	result1, objptr
15650     63 00 00 FF 
15654     D4 E4 85 F1 | 	sub	objptr, ##50900
15658     F2 FA 01 F6 | 	mov	result1, objptr
1565c     00 30 02 FF 
15660     00 FA 45 F5 | 	or	result1, ##73400320
15664     63 00 00 FF 
15668     E0 E4 05 F1 | 	add	objptr, ##50912
1566c     F2 FA 61 FC | 	wrlong	result1, objptr
15670     63 00 00 FF 
15674     E0 E4 85 F1 | 	sub	objptr, ##50912
15678     F2 FA 01 F6 | 	mov	result1, objptr
1567c     00 38 02 FF 
15680     00 FA 45 F5 | 	or	result1, ##74448896
15684     63 00 00 FF 
15688     E4 E4 05 F1 | 	add	objptr, ##50916
1568c     F2 FA 61 FC | 	wrlong	result1, objptr
15690     63 00 00 FF 
15694     E4 E4 85 F1 | 	sub	objptr, ##50916
15698     F2 FA 01 F6 | 	mov	result1, objptr
1569c     00 40 02 FF 
156a0     00 FA 45 F5 | 	or	result1, ##75497472
156a4     62 00 00 FF 
156a8     78 E5 05 F1 | 	add	objptr, ##50552
156ac     F2 FA 61 FC | 	wrlong	result1, objptr
156b0     62 00 00 FF 
156b4     78 E5 85 F1 | 	sub	objptr, ##50552
156b8     F2 FA 01 F6 | 	mov	result1, objptr
156bc     00 48 02 FF 
156c0     00 FA 45 F5 | 	or	result1, ##76546048
156c4     63 00 00 FF 
156c8     FC E4 05 F1 | 	add	objptr, ##50940
156cc     F2 FA 61 FC | 	wrlong	result1, objptr
156d0     63 00 00 FF 
156d4     FC E4 85 F1 | 	sub	objptr, ##50940
156d8     F2 FA 01 F6 | 	mov	result1, objptr
156dc     00 50 02 FF 
156e0     00 FA 45 F5 | 	or	result1, ##77594624
156e4     63 00 00 FF 
156e8     0C E5 05 F1 | 	add	objptr, ##50956
156ec     F2 FA 61 FC | 	wrlong	result1, objptr
156f0     63 00 00 FF 
156f4     0C E5 85 F1 | 	sub	objptr, ##50956
156f8     F2 FA 01 F6 | 	mov	result1, objptr
156fc     00 58 02 FF 
15700     00 FA 45 F5 | 	or	result1, ##78643200
15704     63 00 00 FF 
15708     10 E5 05 F1 | 	add	objptr, ##50960
1570c     F2 FA 61 FC | 	wrlong	result1, objptr
15710     63 00 00 FF 
15714     10 E5 85 F1 | 	sub	objptr, ##50960
15718     F2 FA 01 F6 | 	mov	result1, objptr
1571c     00 60 02 FF 
15720     00 FA 45 F5 | 	or	result1, ##79691776
15724     63 00 00 FF 
15728     08 E5 05 F1 | 	add	objptr, ##50952
1572c     F2 FA 61 FC | 	wrlong	result1, objptr
15730     63 00 00 FF 
15734     08 E5 85 F1 | 	sub	objptr, ##50952
15738     F2 FA 01 F6 | 	mov	result1, objptr
1573c     00 68 02 FF 
15740     00 FA 45 F5 | 	or	result1, ##80740352
15744     63 00 00 FF 
15748     00 E5 05 F1 | 	add	objptr, ##50944
1574c     F2 FA 61 FC | 	wrlong	result1, objptr
15750     63 00 00 FF 
15754     00 E5 85 F1 | 	sub	objptr, ##50944
15758     F2 FA 01 F6 | 	mov	result1, objptr
1575c     00 70 02 FF 
15760     00 FA 45 F5 | 	or	result1, ##81788928
15764     63 00 00 FF 
15768     04 E5 05 F1 | 	add	objptr, ##50948
1576c     F2 FA 61 FC | 	wrlong	result1, objptr
15770     63 00 00 FF 
15774     04 E5 85 F1 | 	sub	objptr, ##50948
15778     F2 FA 01 F6 | 	mov	result1, objptr
1577c     00 78 02 FF 
15780     00 FA 45 F5 | 	or	result1, ##82837504
15784     63 00 00 FF 
15788     14 E5 05 F1 | 	add	objptr, ##50964
1578c     F2 FA 61 FC | 	wrlong	result1, objptr
15790     63 00 00 FF 
15794     14 E5 85 F1 | 	sub	objptr, ##50964
15798     F2 FA 01 F6 | 	mov	result1, objptr
1579c     00 80 02 FF 
157a0     00 FA 45 F5 | 	or	result1, ##83886080
157a4     63 00 00 FF 
157a8     18 E5 05 F1 | 	add	objptr, ##50968
157ac     F2 FA 61 FC | 	wrlong	result1, objptr
157b0     63 00 00 FF 
157b4     18 E5 85 F1 | 	sub	objptr, ##50968
157b8     F2 FA 01 F6 | 	mov	result1, objptr
157bc     00 88 02 FF 
157c0     00 FA 45 F5 | 	or	result1, ##84934656
157c4     63 00 00 FF 
157c8     1C E5 05 F1 | 	add	objptr, ##50972
157cc     F2 FA 61 FC | 	wrlong	result1, objptr
157d0     63 00 00 FF 
157d4     1C E5 85 F1 | 	sub	objptr, ##50972
157d8     F2 FA 01 F6 | 	mov	result1, objptr
157dc     00 90 02 FF 
157e0     00 FA 45 F5 | 	or	result1, ##85983232
157e4     63 00 00 FF 
157e8     20 E5 05 F1 | 	add	objptr, ##50976
157ec     F2 FA 61 FC | 	wrlong	result1, objptr
157f0     63 00 00 FF 
157f4     20 E5 85 F1 | 	sub	objptr, ##50976
157f8     F2 FA 01 F6 | 	mov	result1, objptr
157fc     00 98 02 FF 
15800     00 FA 45 F5 | 	or	result1, ##87031808
15804     63 00 00 FF 
15808     24 E5 05 F1 | 	add	objptr, ##50980
1580c     F2 FA 61 FC | 	wrlong	result1, objptr
15810     63 00 00 FF 
15814     24 E5 85 F1 | 	sub	objptr, ##50980
15818     F2 FA 01 F6 | 	mov	result1, objptr
1581c     00 A0 02 FF 
15820     00 FA 45 F5 | 	or	result1, ##88080384
15824     63 00 00 FF 
15828     28 E5 05 F1 | 	add	objptr, ##50984
1582c     F2 FA 61 FC | 	wrlong	result1, objptr
15830     63 00 00 FF 
15834     28 E5 85 F1 | 	sub	objptr, ##50984
15838     F2 FA 01 F6 | 	mov	result1, objptr
1583c     00 A8 02 FF 
15840     00 FA 45 F5 | 	or	result1, ##89128960
15844     63 00 00 FF 
15848     2C E5 05 F1 | 	add	objptr, ##50988
1584c     F2 FA 61 FC | 	wrlong	result1, objptr
15850     63 00 00 FF 
15854     2C E5 85 F1 | 	sub	objptr, ##50988
15858     F2 FA 01 F6 | 	mov	result1, objptr
1585c     00 B0 02 FF 
15860     00 FA 45 F5 | 	or	result1, ##90177536
15864     63 00 00 FF 
15868     30 E5 05 F1 | 	add	objptr, ##50992
1586c     F2 FA 61 FC | 	wrlong	result1, objptr
15870     63 00 00 FF 
15874     30 E5 85 F1 | 	sub	objptr, ##50992
15878     F2 FA 01 F6 | 	mov	result1, objptr
1587c     00 B8 02 FF 
15880     00 FA 45 F5 | 	or	result1, ##91226112
15884     63 00 00 FF 
15888     3C E5 05 F1 | 	add	objptr, ##51004
1588c     F2 FA 61 FC | 	wrlong	result1, objptr
15890     63 00 00 FF 
15894     3C E5 85 F1 | 	sub	objptr, ##51004
15898     F2 FA 01 F6 | 	mov	result1, objptr
1589c     00 C0 02 FF 
158a0     00 FA 45 F5 | 	or	result1, ##92274688
158a4     63 00 00 FF 
158a8     34 E5 05 F1 | 	add	objptr, ##50996
158ac     F2 FA 61 FC | 	wrlong	result1, objptr
158b0     63 00 00 FF 
158b4     34 E5 85 F1 | 	sub	objptr, ##50996
158b8     F2 FA 01 F6 | 	mov	result1, objptr
158bc     00 C8 02 FF 
158c0     00 FA 45 F5 | 	or	result1, ##93323264
158c4     63 00 00 FF 
158c8     38 E5 05 F1 | 	add	objptr, ##51000
158cc     F2 FA 61 FC | 	wrlong	result1, objptr
158d0     63 00 00 FF 
158d4     38 E5 85 F1 | 	sub	objptr, ##51000
158d8     F2 FA 01 F6 | 	mov	result1, objptr
158dc     00 D0 02 FF 
158e0     00 FA 45 F5 | 	or	result1, ##94371840
158e4     63 00 00 FF 
158e8     40 E5 05 F1 | 	add	objptr, ##51008
158ec     F2 FA 61 FC | 	wrlong	result1, objptr
158f0     63 00 00 FF 
158f4     40 E5 85 F1 | 	sub	objptr, ##51008
158f8     F2 FA 01 F6 | 	mov	result1, objptr
158fc     00 D8 02 FF 
15900     00 FA 45 F5 | 	or	result1, ##95420416
15904     63 00 00 FF 
15908     E8 E4 05 F1 | 	add	objptr, ##50920
1590c     F2 FA 61 FC | 	wrlong	result1, objptr
15910     63 00 00 FF 
15914     E8 E4 85 F1 | 	sub	objptr, ##50920
15918     F2 FA 01 F6 | 	mov	result1, objptr
1591c     00 E0 02 FF 
15920     00 FA 45 F5 | 	or	result1, ##96468992
15924     63 00 00 FF 
15928     F0 E4 05 F1 | 	add	objptr, ##50928
1592c     F2 FA 61 FC | 	wrlong	result1, objptr
15930     63 00 00 FF 
15934     F0 E4 85 F1 | 	sub	objptr, ##50928
15938     F2 FA 01 F6 | 	mov	result1, objptr
1593c     00 E8 02 FF 
15940     00 FA 45 F5 | 	or	result1, ##97517568
15944     63 00 00 FF 
15948     F4 E4 05 F1 | 	add	objptr, ##50932
1594c     F2 FA 61 FC | 	wrlong	result1, objptr
15950     63 00 00 FF 
15954     F4 E4 85 F1 | 	sub	objptr, ##50932
15958     F2 FA 01 F6 | 	mov	result1, objptr
1595c     00 F0 02 FF 
15960     00 FA 45 F5 | 	or	result1, ##98566144
15964     63 00 00 FF 
15968     44 E5 05 F1 | 	add	objptr, ##51012
1596c     F2 FA 61 FC | 	wrlong	result1, objptr
15970     63 00 00 FF 
15974     44 E5 85 F1 | 	sub	objptr, ##51012
15978     F2 FA 01 F6 | 	mov	result1, objptr
1597c     00 F8 02 FF 
15980     00 FA 45 F5 | 	or	result1, ##99614720
15984     63 00 00 FF 
15988     48 E5 05 F1 | 	add	objptr, ##51016
1598c     F2 FA 61 FC | 	wrlong	result1, objptr
15990     63 00 00 FF 
15994     48 E5 85 F1 | 	sub	objptr, ##51016
15998     F2 FA 01 F6 | 	mov	result1, objptr
1599c     39 FA 25 F4 | 	bith	result1, #57
159a0     63 00 00 FF 
159a4     4C E5 05 F1 | 	add	objptr, ##51020
159a8     F2 FA 61 FC | 	wrlong	result1, objptr
159ac     63 00 00 FF 
159b0     4C E5 85 F1 | 	sub	objptr, ##51020
159b4     F2 FA 01 F6 | 	mov	result1, objptr
159b8     00 08 03 FF 
159bc     00 FA 45 F5 | 	or	result1, ##101711872
159c0     63 00 00 FF 
159c4     F8 E4 05 F1 | 	add	objptr, ##50936
159c8     F2 FA 61 FC | 	wrlong	result1, objptr
159cc     63 00 00 FF 
159d0     F8 E4 85 F1 | 	sub	objptr, ##50936
159d4                 | _init_commands_ret
159d4     2D 00 64 FD | 	ret
159d8                 | 
159d8                 | ' 
159d8                 | ' ''--------------------------------Error strings -------------------------------------
159d8                 | ' sub init_audio
159d8                 | _init_audio
159d8     05 4A 05 F6 | 	mov	COUNT_, #5
159dc     A8 00 A0 FD | 	call	#pushregs_
159e0     93 12 06 F6 | 	mov	arg01, #147
159e4     9A 14 06 F6 | 	mov	arg02, #154
159e8     EC 26 B0 FD | 	call	#_hg010b_spin2_cls
159ec                 | ' v.cls(147,154)
159ec                 | ' for i=0 to 1023 : for j=0 to 7 : samplebuf(j,i)=round(32600*sin(i*3.1415926535/512.0)) : next j: next i
159ec     00 1E 06 F6 | 	mov	local01, #0
159f0                 | LR__1670
159f0     00 20 06 F6 | 	mov	local02, #0
159f4                 | LR__1671
159f4     10 15 02 F6 | 	mov	arg02, local02
159f8     0B 14 66 F0 | 	shl	arg02, #11
159fc     0C 00 00 FF 
15a00     CC E4 05 F1 | 	add	objptr, ##6348
15a04     F2 14 02 F1 | 	add	arg02, objptr
15a08     0F 23 02 F6 | 	mov	local03, local01
15a0c     01 22 66 F0 | 	shl	local03, #1
15a10     0A 23 02 F1 | 	add	local03, arg02
15a14     58 7F 23 FF 
15a18     00 24 06 F6 | 	mov	local04, ##1191096320
15a1c     0C 00 00 FF 
15a20     CC E4 85 F1 | 	sub	objptr, ##6348
15a24     0F 13 52 F6 | 	abs	arg01, local01 wc
15a28     1F 26 C6 C9 |  if_b	decod	local05, #31
15a2c     00 26 06 36 |  if_ae	mov	local05, #0
15a30     EC 60 B0 FD | 	call	#__system___float_fromuns
15a34     13 FB 61 F5 | 	xor	result1, local05
15a38     FD 12 02 F6 | 	mov	arg01, result1
15a3c     87 24 20 FF 
15a40     DB 15 06 F6 | 	mov	arg02, ##1078530011
15a44     DC 64 B0 FD | 	call	#__system___float_mul
15a48     FD 12 02 F6 | 	mov	arg01, result1
15a4c     00 00 22 FF 
15a50     00 14 06 F6 | 	mov	arg02, ##1140850688
15a54     D0 66 B0 FD | 	call	#__system___float_div
15a58     FD 12 02 F6 | 	mov	arg01, result1
15a5c     00 6E B0 FD | 	call	#__system____builtin_sinf
15a60     FD 14 02 F6 | 	mov	arg02, result1
15a64     12 13 02 F6 | 	mov	arg01, local04
15a68     B8 64 B0 FD | 	call	#__system___float_mul
15a6c     FD 12 02 F6 | 	mov	arg01, result1
15a70     01 14 06 F6 | 	mov	arg02, #1
15a74     74 69 B0 FD | 	call	#__system___float_tointeger
15a78     11 FB 51 FC | 	wrword	result1, local03
15a7c     01 20 06 F1 | 	add	local02, #1
15a80     08 20 56 F2 | 	cmps	local02, #8 wc
15a84     6C FF 9F CD |  if_b	jmp	#LR__1671
15a88     01 1E 06 F1 | 	add	local01, #1
15a8c     02 00 00 FF 
15a90     00 1E 56 F2 | 	cmps	local01, ##1024 wc
15a94     58 FF 9F CD |  if_b	jmp	#LR__1670
15a98                 | ' for i=0 to 255 : for j=0 to 7 : envbuf(j,i)=65280-256*i : next j : next i
15a98     00 1E 06 F6 | 	mov	local01, #0
15a9c     97 2E 48 FB | 	callpa	#(@LR__1674-@LR__1672)>>2,fcache_load_ptr_
15aa0                 | LR__1672
15aa0     00 20 06 F6 | 	mov	local02, #0
15aa4     2C 00 00 FF 
15aa8     CC E4 05 F1 | 	add	objptr, ##22732
15aac                 | LR__1673
15aac     10 25 02 F6 | 	mov	local04, local02
15ab0     09 24 66 F0 | 	shl	local04, #9
15ab4     F2 24 02 F1 | 	add	local04, objptr
15ab8     0F 23 02 F6 | 	mov	local03, local01
15abc     01 22 66 F0 | 	shl	local03, #1
15ac0     12 23 02 F1 | 	add	local03, local04
15ac4     0F 15 02 F6 | 	mov	arg02, local01
15ac8     08 14 66 F0 | 	shl	arg02, #8
15acc     7F 00 00 FF 
15ad0     00 25 06 F6 | 	mov	local04, ##65280
15ad4     0A 25 82 F1 | 	sub	local04, arg02
15ad8     11 25 52 FC | 	wrword	local04, local03
15adc     01 20 06 F1 | 	add	local02, #1
15ae0     08 20 56 F2 | 	cmps	local02, #8 wc
15ae4     C4 FF 9F CD |  if_b	jmp	#LR__1673
15ae8     2C 00 00 FF 
15aec     CC E4 85 F1 | 	sub	objptr, ##22732
15af0     01 1E 06 F1 | 	add	local01, #1
15af4     00 1F 56 F2 | 	cmps	local01, #256 wc
15af8     A4 FF 9F CD |  if_b	jmp	#LR__1672
15afc                 | LR__1674
15afc     56 00 00 FF 
15b00     D4 E4 05 F1 | 	add	objptr, ##44244
15b04     F2 12 02 FB | 	rdlong	arg01, objptr
15b08     E4 13 06 F1 | 	add	arg01, #484
15b0c     23 00 00 FF 
15b10     08 E4 85 F1 | 	sub	objptr, ##17928
15b14     09 E5 61 FC | 	wrlong	objptr, arg01
15b18     23 00 00 FF 
15b1c     08 E4 05 F1 | 	add	objptr, ##17928
15b20     F2 12 02 FB | 	rdlong	arg01, objptr
15b24     E8 13 06 F1 | 	add	arg01, #488
15b28     09 01 6A FC | 	wrlong	#256, arg01
15b2c     F2 12 02 FB | 	rdlong	arg01, objptr
15b30     56 00 00 FF 
15b34     D4 E4 85 F1 | 	sub	objptr, ##44244
15b38     EC 13 06 F1 | 	add	arg01, #492
15b3c     09 FF 69 FC | 	wrlong	#255, arg01
15b40     A7 F0 03 F6 | 	mov	ptra, fp
15b44     B2 00 A0 FD | 	call	#popregs_
15b48                 | _init_audio_ret
15b48     2D 00 64 FD | 	ret
15b4c                 | 
15b4c                 | ' 
15b4c                 | ' sub init_error_strings
15b4c                 | _init_error_strings
15b4c     47 01 00 FF 
15b50     AB 01 06 F6 | 	mov	_var01, ##@LR__4643
15b54     64 00 00 FF 
15b58     40 E5 05 F1 | 	add	objptr, ##51520
15b5c     F2 00 62 FC | 	wrlong	_var01, objptr
15b60     47 01 00 FF 
15b64     AC 01 06 F6 | 	mov	_var01, ##@LR__4644
15b68     04 E4 05 F1 | 	add	objptr, #4
15b6c     F2 00 62 FC | 	wrlong	_var01, objptr
15b70     47 01 00 FF 
15b74     D1 01 06 F6 | 	mov	_var01, ##@LR__4645
15b78     04 E4 05 F1 | 	add	objptr, #4
15b7c     F2 00 62 FC | 	wrlong	_var01, objptr
15b80     47 01 00 FF 
15b84     F2 01 06 F6 | 	mov	_var01, ##@LR__4646
15b88     04 E4 05 F1 | 	add	objptr, #4
15b8c     F2 00 62 FC | 	wrlong	_var01, objptr
15b90     48 01 00 FF 
15b94     0C 00 06 F6 | 	mov	_var01, ##@LR__4647
15b98     04 E4 05 F1 | 	add	objptr, #4
15b9c     F2 00 62 FC | 	wrlong	_var01, objptr
15ba0     48 01 00 FF 
15ba4     28 00 06 F6 | 	mov	_var01, ##@LR__4648
15ba8     04 E4 05 F1 | 	add	objptr, #4
15bac     F2 00 62 FC | 	wrlong	_var01, objptr
15bb0     48 01 00 FF 
15bb4     4A 00 06 F6 | 	mov	_var01, ##@LR__4649
15bb8     04 E4 05 F1 | 	add	objptr, #4
15bbc     F2 00 62 FC | 	wrlong	_var01, objptr
15bc0     48 01 00 FF 
15bc4     78 00 06 F6 | 	mov	_var01, ##@LR__4650
15bc8     04 E4 05 F1 | 	add	objptr, #4
15bcc     F2 00 62 FC | 	wrlong	_var01, objptr
15bd0     48 01 00 FF 
15bd4     A3 00 06 F6 | 	mov	_var01, ##@LR__4651
15bd8     04 E4 05 F1 | 	add	objptr, #4
15bdc     F2 00 62 FC | 	wrlong	_var01, objptr
15be0     48 01 00 FF 
15be4     BC 00 06 F6 | 	mov	_var01, ##@LR__4652
15be8     04 E4 05 F1 | 	add	objptr, #4
15bec     F2 00 62 FC | 	wrlong	_var01, objptr
15bf0     48 01 00 FF 
15bf4     DD 00 06 F6 | 	mov	_var01, ##@LR__4653
15bf8     04 E4 05 F1 | 	add	objptr, #4
15bfc     F2 00 62 FC | 	wrlong	_var01, objptr
15c00     48 01 00 FF 
15c04     F4 00 06 F6 | 	mov	_var01, ##@LR__4654
15c08     04 E4 05 F1 | 	add	objptr, #4
15c0c     F2 00 62 FC | 	wrlong	_var01, objptr
15c10     48 01 00 FF 
15c14     12 01 06 F6 | 	mov	_var01, ##@LR__4655
15c18     04 E4 05 F1 | 	add	objptr, #4
15c1c     F2 00 62 FC | 	wrlong	_var01, objptr
15c20     48 01 00 FF 
15c24     36 01 06 F6 | 	mov	_var01, ##@LR__4656
15c28     04 E4 05 F1 | 	add	objptr, #4
15c2c     F2 00 62 FC | 	wrlong	_var01, objptr
15c30     48 01 00 FF 
15c34     5D 01 06 F6 | 	mov	_var01, ##@LR__4657
15c38     04 E4 05 F1 | 	add	objptr, #4
15c3c     F2 00 62 FC | 	wrlong	_var01, objptr
15c40     48 01 00 FF 
15c44     79 01 06 F6 | 	mov	_var01, ##@LR__4658
15c48     04 E4 05 F1 | 	add	objptr, #4
15c4c     F2 00 62 FC | 	wrlong	_var01, objptr
15c50     48 01 00 FF 
15c54     8A 01 06 F6 | 	mov	_var01, ##@LR__4659
15c58     04 E4 05 F1 | 	add	objptr, #4
15c5c     F2 00 62 FC | 	wrlong	_var01, objptr
15c60     48 01 00 FF 
15c64     9A 01 06 F6 | 	mov	_var01, ##@LR__4660
15c68     04 E4 05 F1 | 	add	objptr, #4
15c6c     F2 00 62 FC | 	wrlong	_var01, objptr
15c70     48 01 00 FF 
15c74     B5 01 06 F6 | 	mov	_var01, ##@LR__4661
15c78     04 E4 05 F1 | 	add	objptr, #4
15c7c     F2 00 62 FC | 	wrlong	_var01, objptr
15c80     48 01 00 FF 
15c84     C7 01 06 F6 | 	mov	_var01, ##@LR__4662
15c88     04 E4 05 F1 | 	add	objptr, #4
15c8c     F2 00 62 FC | 	wrlong	_var01, objptr
15c90     48 01 00 FF 
15c94     DF 01 06 F6 | 	mov	_var01, ##@LR__4663
15c98     04 E4 05 F1 | 	add	objptr, #4
15c9c     F2 00 62 FC | 	wrlong	_var01, objptr
15ca0     48 01 00 FF 
15ca4     F3 01 06 F6 | 	mov	_var01, ##@LR__4664
15ca8     04 E4 05 F1 | 	add	objptr, #4
15cac     F2 00 62 FC | 	wrlong	_var01, objptr
15cb0     49 01 00 FF 
15cb4     03 00 06 F6 | 	mov	_var01, ##@LR__4665
15cb8     04 E4 05 F1 | 	add	objptr, #4
15cbc     F2 00 62 FC | 	wrlong	_var01, objptr
15cc0     49 01 00 FF 
15cc4     20 00 06 F6 | 	mov	_var01, ##@LR__4666
15cc8     04 E4 05 F1 | 	add	objptr, #4
15ccc     F2 00 62 FC | 	wrlong	_var01, objptr
15cd0     49 01 00 FF 
15cd4     31 00 06 F6 | 	mov	_var01, ##@LR__4667
15cd8     04 E4 05 F1 | 	add	objptr, #4
15cdc     F2 00 62 FC | 	wrlong	_var01, objptr
15ce0     49 01 00 FF 
15ce4     42 00 06 F6 | 	mov	_var01, ##@LR__4668
15ce8     04 E4 05 F1 | 	add	objptr, #4
15cec     F2 00 62 FC | 	wrlong	_var01, objptr
15cf0     49 01 00 FF 
15cf4     6D 00 06 F6 | 	mov	_var01, ##@LR__4669
15cf8     04 E4 05 F1 | 	add	objptr, #4
15cfc     F2 00 62 FC | 	wrlong	_var01, objptr
15d00     49 01 00 FF 
15d04     89 00 06 F6 | 	mov	_var01, ##@LR__4670
15d08     04 E4 05 F1 | 	add	objptr, #4
15d0c     F2 00 62 FC | 	wrlong	_var01, objptr
15d10     49 01 00 FF 
15d14     9F 00 06 F6 | 	mov	_var01, ##@LR__4671
15d18     04 E4 05 F1 | 	add	objptr, #4
15d1c     F2 00 62 FC | 	wrlong	_var01, objptr
15d20     49 01 00 FF 
15d24     AC 00 06 F6 | 	mov	_var01, ##@LR__4672
15d28     04 E4 05 F1 | 	add	objptr, #4
15d2c     F2 00 62 FC | 	wrlong	_var01, objptr
15d30     49 01 00 FF 
15d34     BE 00 06 F6 | 	mov	_var01, ##@LR__4673
15d38     04 E4 05 F1 | 	add	objptr, #4
15d3c     F2 00 62 FC | 	wrlong	_var01, objptr
15d40     49 01 00 FF 
15d44     CF 00 06 F6 | 	mov	_var01, ##@LR__4674
15d48     04 E4 05 F1 | 	add	objptr, #4
15d4c     F2 00 62 FC | 	wrlong	_var01, objptr
15d50     49 01 00 FF 
15d54     EB 00 06 F6 | 	mov	_var01, ##@LR__4675
15d58     04 E4 05 F1 | 	add	objptr, #4
15d5c     F2 00 62 FC | 	wrlong	_var01, objptr
15d60     49 01 00 FF 
15d64     FC 00 06 F6 | 	mov	_var01, ##@LR__4676
15d68     04 E4 05 F1 | 	add	objptr, #4
15d6c     F2 00 62 FC | 	wrlong	_var01, objptr
15d70     49 01 00 FF 
15d74     0B 01 06 F6 | 	mov	_var01, ##@LR__4677
15d78     04 E4 05 F1 | 	add	objptr, #4
15d7c     F2 00 62 FC | 	wrlong	_var01, objptr
15d80     49 01 00 FF 
15d84     26 01 06 F6 | 	mov	_var01, ##@LR__4678
15d88     04 E4 05 F1 | 	add	objptr, #4
15d8c     F2 00 62 FC | 	wrlong	_var01, objptr
15d90     49 01 00 FF 
15d94     5A 01 06 F6 | 	mov	_var01, ##@LR__4679
15d98     04 E4 05 F1 | 	add	objptr, #4
15d9c     F2 00 62 FC | 	wrlong	_var01, objptr
15da0     49 01 00 FF 
15da4     73 01 06 F6 | 	mov	_var01, ##@LR__4680
15da8     04 E4 05 F1 | 	add	objptr, #4
15dac     F2 00 62 FC | 	wrlong	_var01, objptr
15db0     49 01 00 FF 
15db4     8F 01 06 F6 | 	mov	_var01, ##@LR__4681
15db8     04 E4 05 F1 | 	add	objptr, #4
15dbc     F2 00 62 FC | 	wrlong	_var01, objptr
15dc0     49 01 00 FF 
15dc4     AD 01 06 F6 | 	mov	_var01, ##@LR__4682
15dc8     04 E4 05 F1 | 	add	objptr, #4
15dcc     F2 00 62 FC | 	wrlong	_var01, objptr
15dd0     49 01 00 FF 
15dd4     C6 01 06 F6 | 	mov	_var01, ##@LR__4683
15dd8     04 E4 05 F1 | 	add	objptr, #4
15ddc     F2 00 62 FC | 	wrlong	_var01, objptr
15de0     49 01 00 FF 
15de4     E5 01 06 F6 | 	mov	_var01, ##@LR__4684
15de8     04 E4 05 F1 | 	add	objptr, #4
15dec     F2 00 62 FC | 	wrlong	_var01, objptr
15df0     49 01 00 FF 
15df4     F4 01 06 F6 | 	mov	_var01, ##@LR__4685
15df8     04 E4 05 F1 | 	add	objptr, #4
15dfc     F2 00 62 FC | 	wrlong	_var01, objptr
15e00     4A 01 00 FF 
15e04     22 00 06 F6 | 	mov	_var01, ##@LR__4686
15e08     04 E4 05 F1 | 	add	objptr, #4
15e0c     F2 00 62 FC | 	wrlong	_var01, objptr
15e10     4A 01 00 FF 
15e14     30 00 06 F6 | 	mov	_var01, ##@LR__4687
15e18     04 E4 05 F1 | 	add	objptr, #4
15e1c     F2 00 62 FC | 	wrlong	_var01, objptr
15e20     4A 01 00 FF 
15e24     45 00 06 F6 | 	mov	_var01, ##@LR__4688
15e28     04 E4 05 F1 | 	add	objptr, #4
15e2c     F2 00 62 FC | 	wrlong	_var01, objptr
15e30     4A 01 00 FF 
15e34     69 00 06 F6 | 	mov	_var01, ##@LR__4689
15e38     04 E4 05 F1 | 	add	objptr, #4
15e3c     F2 00 62 FC | 	wrlong	_var01, objptr
15e40     4A 01 00 FF 
15e44     80 00 06 F6 | 	mov	_var01, ##@LR__4690
15e48     04 E4 05 F1 | 	add	objptr, #4
15e4c     F2 00 62 FC | 	wrlong	_var01, objptr
15e50     4A 01 00 FF 
15e54     93 00 06 F6 | 	mov	_var01, ##@LR__4691
15e58     04 E4 05 F1 | 	add	objptr, #4
15e5c     F2 00 62 FC | 	wrlong	_var01, objptr
15e60     4A 01 00 FF 
15e64     AA 00 06 F6 | 	mov	_var01, ##@LR__4692
15e68     04 E4 05 F1 | 	add	objptr, #4
15e6c     F2 00 62 FC | 	wrlong	_var01, objptr
15e70     65 00 00 FF 
15e74     04 E4 85 F1 | 	sub	objptr, ##51716
15e78                 | _init_error_strings_ret
15e78     2D 00 64 FD | 	ret
15e7c                 | 
15e7c                 | '         
15e7c                 | ' sub printerror(err as integer)
15e7c                 | _printerror
15e7c     01 4A 05 F6 | 	mov	COUNT_, #1
15e80     A8 00 A0 FD | 	call	#pushregs_
15e84     09 1F 02 F6 | 	mov	local01, arg01
15e88     4A 01 00 FF 
15e8c     C3 12 06 F6 | 	mov	arg01, ##@LR__4693
15e90     00 25 B0 FD | 	call	#_hg010b_spin2_write
15e94     0F 13 02 F6 | 	mov	arg01, local01
15e98     F8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
15e9c     FD 12 02 F6 | 	mov	arg01, result1
15ea0     F0 24 B0 FD | 	call	#_hg010b_spin2_write
15ea4     4A 01 00 FF 
15ea8     CA 12 06 F6 | 	mov	arg01, ##@LR__4694
15eac     E4 24 B0 FD | 	call	#_hg010b_spin2_write
15eb0     02 1E 66 F0 | 	shl	local01, #2
15eb4     64 00 00 FF 
15eb8     40 E5 05 F1 | 	add	objptr, ##51520
15ebc     F2 1E 02 F1 | 	add	local01, objptr
15ec0     0F 13 02 FB | 	rdlong	arg01, local01
15ec4     64 00 00 FF 
15ec8     40 E5 85 F1 | 	sub	objptr, ##51520
15ecc                 | ' 
15ecc                 | ' write(text)
15ecc     C4 24 B0 FD | 	call	#_hg010b_spin2_write
15ed0                 | ' crlf
15ed0     20 26 B0 FD | 	call	#_hg010b_spin2_crlf
15ed4     A7 F0 03 F6 | 	mov	ptra, fp
15ed8     B2 00 A0 FD | 	call	#popregs_
15edc                 | _printerror_ret
15edc     2D 00 64 FD | 	ret
15ee0                 | 
15ee0                 | ' 
15ee0                 | ' '' ------------------------------- Hardware start/stop/initialization 
15ee0                 | ' 
15ee0                 | ' sub startpsram
15ee0                 | _startpsram
15ee0     00 12 06 F6 | 	mov	arg01, #0
15ee4     0A 14 C6 F9 | 	decod	arg02, #10
15ee8     0B 16 06 F6 | 	mov	arg03, #11
15eec     07 18 06 F6 | 	mov	arg04, #7
15ef0     0B 00 00 FF 
15ef4     C0 E4 05 F1 | 	add	objptr, ##5824
15ef8     A4 27 B0 FD | 	call	#_psram_spin2_startx
15efc     4B 00 00 FF 
15f00     0C E4 05 F1 | 	add	objptr, ##38412
15f04     F2 FA 61 FC | 	wrlong	result1, objptr
15f08                 | '     return $7FF00 + cog*12
15f08     0C E4 05 F1 | 	add	objptr, #12
15f0c     FF 03 80 FF 
15f10     F2 00 6A FC | 	wrlong	##524032, objptr
15f14     56 00 00 FF 
15f18     D8 E4 85 F1 | 	sub	objptr, ##44248
15f1c                 | _startpsram_ret
15f1c     2D 00 64 FD | 	ret
15f20                 | 
15f20                 | ' 
15f20                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
15f20                 | _startvideo
15f20     01 4A 05 F6 | 	mov	COUNT_, #1
15f24     A8 00 A0 FD | 	call	#pushregs_
15f28     56 00 00 FF 
15f2c     D8 E4 05 F1 | 	add	objptr, ##44248
15f30     F2 18 02 FB | 	rdlong	arg04, objptr
15f34     56 00 00 FF 
15f38     D8 E4 85 F1 | 	sub	objptr, ##44248
15f3c     0A 13 02 F6 | 	mov	arg01, arg02
15f40     0C 15 02 F6 | 	mov	arg02, arg04
15f44     6C 0F B0 FD | 	call	#_hg010b_spin2_start
15f48     56 00 00 FF 
15f4c     C4 E4 05 F1 | 	add	objptr, ##44228
15f50     F2 FA 61 FC | 	wrlong	result1, objptr
15f54                 | ' 
15f54                 | ' videocog=v.start(pin,mbox)
15f54                 | ' 
15f54                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
15f54     00 1E 06 F6 | 	mov	local01, #0
15f58     4B 00 00 FF 
15f5c     04 E4 85 F1 | 	sub	objptr, ##38404
15f60                 | LR__1680
15f60     0F 13 02 F6 | 	mov	arg01, local01
15f64     00 28 00 FF 
15f68     00 14 06 F6 | 	mov	arg02, ##5242880
15f6c     88 2B B0 FD | 	call	#_psram_spin2_setQos
15f70     01 1E 06 F1 | 	add	local01, #1
15f74     08 1E 56 F2 | 	cmps	local01, #8 wc
15f78     E4 FF 9F CD |  if_b	jmp	#LR__1680
15f7c     4B 00 00 FF 
15f80     04 E4 05 F1 | 	add	objptr, ##38404
15f84     F2 12 02 FB | 	rdlong	arg01, objptr
15f88     7A 00 02 FF 
15f8c     00 14 06 F6 | 	mov	arg02, ##67171328
15f90     4B 00 00 FF 
15f94     04 E4 85 F1 | 	sub	objptr, ##38404
15f98     5C 2B B0 FD | 	call	#_psram_spin2_setQos
15f9c     0B 00 00 FF 
15fa0     C0 E4 85 F1 | 	sub	objptr, ##5824
15fa4                 | ' psram.setQoS(videocog, $0400f400) 
15fa4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
15fa4     F2 14 02 F6 | 	mov	arg02, objptr
15fa8     00 10 03 FF 
15fac     00 14 46 F5 | 	or	arg02, ##102760448
15fb0     00 16 06 F6 | 	mov	arg03, #0
15fb4     00 18 06 F6 | 	mov	arg04, #0
15fb8     00 12 06 F6 | 	mov	arg01, #0
15fbc     20 3F B0 FD | 	call	#__system___basic_open
15fc0                 | ' return videocog
15fc0     56 00 00 FF 
15fc4     C4 E4 05 F1 | 	add	objptr, ##44228
15fc8     F2 FA 01 FB | 	rdlong	result1, objptr
15fcc     56 00 00 FF 
15fd0     C4 E4 85 F1 | 	sub	objptr, ##44228
15fd4     A7 F0 03 F6 | 	mov	ptra, fp
15fd8     B2 00 A0 FD | 	call	#popregs_
15fdc                 | _startvideo_ret
15fdc     2D 00 64 FD | 	ret
15fe0                 | 
15fe0                 | ' 
15fe0                 | ' function pspeek(adr as ulong) as ubyte
15fe0                 | _pspeek
15fe0     00 4A 05 F6 | 	mov	COUNT_, #0
15fe4     A8 00 A0 FD | 	call	#pushregs_
15fe8     0C F0 07 F1 | 	add	ptra, #12
15fec     04 4E 05 F1 | 	add	fp, #4
15ff0     A7 12 62 FC | 	wrlong	arg01, fp
15ff4     04 4E 05 F1 | 	add	fp, #4
15ff8     A7 12 02 F6 | 	mov	arg01, fp
15ffc     04 4E 85 F1 | 	sub	fp, #4
16000     A7 14 02 FB | 	rdlong	arg02, fp
16004     04 4E 85 F1 | 	sub	fp, #4
16008     01 16 06 F6 | 	mov	arg03, #1
1600c     0B 00 00 FF 
16010     C0 E4 05 F1 | 	add	objptr, ##5824
16014     B4 28 B0 FD | 	call	#_psram_spin2_read1
16018     0B 00 00 FF 
1601c     C0 E4 85 F1 | 	sub	objptr, ##5824
16020                 | ' psram.read1(varptr(res),adr,1)
16020                 | ' return res
16020     08 4E 05 F1 | 	add	fp, #8
16024     A7 FA C1 FA | 	rdbyte	result1, fp
16028     08 4E 85 F1 | 	sub	fp, #8
1602c     A7 F0 03 F6 | 	mov	ptra, fp
16030     B2 00 A0 FD | 	call	#popregs_
16034                 | _pspeek_ret
16034     2D 00 64 FD | 	ret
16038                 | 
16038                 | ' 
16038                 | ' function pslpeek(adr as ulong) as ulong
16038                 | _pslpeek
16038     00 4A 05 F6 | 	mov	COUNT_, #0
1603c     A8 00 A0 FD | 	call	#pushregs_
16040     0C F0 07 F1 | 	add	ptra, #12
16044     04 4E 05 F1 | 	add	fp, #4
16048     A7 12 62 FC | 	wrlong	arg01, fp
1604c     04 4E 05 F1 | 	add	fp, #4
16050     A7 12 02 F6 | 	mov	arg01, fp
16054     04 4E 85 F1 | 	sub	fp, #4
16058     A7 14 02 FB | 	rdlong	arg02, fp
1605c     04 4E 85 F1 | 	sub	fp, #4
16060     04 16 06 F6 | 	mov	arg03, #4
16064     0B 00 00 FF 
16068     C0 E4 05 F1 | 	add	objptr, ##5824
1606c     5C 28 B0 FD | 	call	#_psram_spin2_read1
16070     0B 00 00 FF 
16074     C0 E4 85 F1 | 	sub	objptr, ##5824
16078                 | ' psram.read1(varptr(res),adr,4)
16078                 | ' return res
16078     08 4E 05 F1 | 	add	fp, #8
1607c     A7 FA 01 FB | 	rdlong	result1, fp
16080     08 4E 85 F1 | 	sub	fp, #8
16084     A7 F0 03 F6 | 	mov	ptra, fp
16088     B2 00 A0 FD | 	call	#popregs_
1608c                 | _pslpeek_ret
1608c     2D 00 64 FD | 	ret
16090                 | 
16090                 | ' 
16090                 | ' '' ------------------------------- USB keyboard scan to char translator
16090                 | ' 
16090                 | ' function scantochar(key)
16090                 | _scantochar
16090                 | ' 
16090                 | ' select case (key shr 8) and 255
16090     09 01 02 F6 | 	mov	_var01, arg01
16094     08 00 C6 F0 | 	sar	_var01, #8
16098     FF 00 0E F5 | 	and	_var01, #255 wz
1609c     24 00 90 AD |  if_e	jmp	#LR__1690
160a0     02 00 0E F2 | 	cmp	_var01, #2 wz
160a4     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
160a8     30 00 90 AD |  if_e	jmp	#LR__1691
160ac     40 00 0E F2 | 	cmp	_var01, #64 wz
160b0     44 00 90 AD |  if_e	jmp	#LR__1692
160b4     42 00 0E F2 | 	cmp	_var01, #66 wz
160b8     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
160bc     70 00 90 5D |  if_ne	jmp	#LR__1694
160c0     50 00 90 FD | 	jmp	#LR__1693
160c4                 | LR__1690
160c4     09 FB 01 F6 | 	mov	result1, arg01
160c8     7F FA 05 F5 | 	and	result1, #127
160cc     02 FA 65 F0 | 	shl	result1, #2
160d0     F5 FA 01 F1 | 	add	result1, ptr__dat__
160d4     FD FA C1 FA | 	rdbyte	result1, result1
160d8     54 00 90 FD | 	jmp	#_scantochar_ret
160dc                 | LR__1691
160dc     09 FB 01 F6 | 	mov	result1, arg01
160e0     7F FA 05 F5 | 	and	result1, #127
160e4     02 FA 65 F0 | 	shl	result1, #2
160e8     01 FA 05 F1 | 	add	result1, #1
160ec     F5 FA 01 F1 | 	add	result1, ptr__dat__
160f0     FD FA C1 FA | 	rdbyte	result1, result1
160f4     38 00 90 FD | 	jmp	#_scantochar_ret
160f8                 | LR__1692
160f8     09 FB 01 F6 | 	mov	result1, arg01
160fc     7F FA 05 F5 | 	and	result1, #127
16100     02 FA 65 F0 | 	shl	result1, #2
16104     02 FA 05 F1 | 	add	result1, #2
16108     F5 FA 01 F1 | 	add	result1, ptr__dat__
1610c     FD FA C1 FA | 	rdbyte	result1, result1
16110     1C 00 90 FD | 	jmp	#_scantochar_ret
16114                 | LR__1693
16114     09 FB 01 F6 | 	mov	result1, arg01
16118     7F FA 05 F5 | 	and	result1, #127
1611c     02 FA 65 F0 | 	shl	result1, #2
16120     03 FA 05 F1 | 	add	result1, #3
16124     F5 FA 01 F1 | 	add	result1, ptr__dat__
16128     FD FA C1 FA | 	rdbyte	result1, result1
1612c     00 00 90 FD | 	jmp	#_scantochar_ret
16130                 | LR__1694
16130                 | _scantochar_ret
16130     2D 00 64 FD | 	ret
16134                 | 
16134                 | _program
16134     0B 4A 05 F6 | 	mov	COUNT_, #11
16138     A8 00 A0 FD | 	call	#pushregs_
1613c     A0 FD BF FD | 	call	#_startpsram
16140     40 12 06 F6 | 	mov	arg01, #64
16144     00 14 06 F6 | 	mov	arg02, #0
16148     00 16 06 F6 | 	mov	arg03, #0
1614c     D0 FD BF FD | 	call	#_startvideo
16150     00 12 06 F6 | 	mov	arg01, #0
16154     00 14 06 F6 | 	mov	arg02, #0
16158     00 16 06 F6 | 	mov	arg03, #0
1615c     0B 00 00 FF 
16160     C0 E4 05 F1 | 	add	objptr, ##5824
16164     A4 2C B0 FD | 	call	#_Audio095_8_sc_spin2_start
16168     FE 1C 02 F6 | 	mov	arg06, result2
1616c     4B 00 00 FF 
16170     00 E4 05 F1 | 	add	objptr, ##38400
16174     F2 FA 61 FC | 	wrlong	result1, objptr
16178     14 E4 05 F1 | 	add	objptr, #20
1617c     F2 1C 62 FC | 	wrlong	arg06, objptr
16180     56 00 00 FF 
16184     D4 E4 85 F1 | 	sub	objptr, ##44244
16188     32 12 06 F6 | 	mov	arg01, #50
1618c     9C 35 B0 FD | 	call	#__system___waitms
16190     56 00 00 FF 
16194     D4 E4 05 F1 | 	add	objptr, ##44244
16198     F2 12 02 FB | 	rdlong	arg01, objptr
1619c     56 00 00 FF 
161a0     D4 E4 85 F1 | 	sub	objptr, ##44244
161a4     14 12 06 F1 | 	add	arg01, #20
161a8     20 00 80 FF 
161ac     09 01 58 FC | 	wrword	##16384, arg01
161b0     4C 2A B0 FD | 	call	#_usbnew_spin2_start
161b4     56 00 00 FF 
161b8     C8 E4 05 F1 | 	add	objptr, ##44232
161bc     F2 FA 61 FC | 	wrlong	result1, objptr
161c0                 | '   mouse_limits[0] := xlim
161c0     0F 00 00 FF 
161c4     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
161c8     01 00 80 FF 
161cc     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
161d0                 | '   mouse_limits[1] := ylim
161d0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
161d4     01 00 80 FF 
161d8     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
161dc     55 00 00 FF 
161e0     BB E5 85 F1 | 	sub	objptr, ##43963
161e4     F2 12 02 F6 | 	mov	arg01, objptr
161e8     0D E5 85 F1 | 	sub	objptr, #269
161ec     C4 12 06 F1 | 	add	arg01, #196
161f0                 | '   mouse_outptr := ptr
161f0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
161f4     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
161f8     0F 00 00 FF 
161fc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
16200     0E 00 00 FF 
16204     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
16208     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1620c     0E 00 00 FF 
16210     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
16214     10 12 06 F6 | 	mov	arg01, #16
16218     90 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1621c     10 12 06 F6 | 	mov	arg01, #16
16220     20 14 06 F6 | 	mov	arg02, #32
16224     20 16 06 F6 | 	mov	arg03, #32
16228     F4 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
1622c     09 12 C6 F9 | 	decod	arg01, #9
16230     20 15 06 F6 | 	mov	arg02, #288
16234     84 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
16238     F2 1C 02 F6 | 	mov	arg06, objptr
1623c     79 00 00 FF 
16240     AC E4 05 F1 | 	add	objptr, ##62124
16244     F2 1A 02 F6 | 	mov	arg05, objptr
16248     0D 1D 62 FC | 	wrlong	arg06, arg05
1624c     04 1A 06 F1 | 	add	arg05, #4
16250     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
16254     EF 14 02 F6 | 	mov	arg02, entryptr__
16258     F2 1E 02 F6 | 	mov	local01, objptr
1625c     1E FA 05 F6 | 	mov	result1, #30
16260     28 1E 62 FD | 	setq	local01
16264     0A FB F1 FC | 	coginit	result1, arg02 wc
16268     01 FA 65 C6 |  if_b	neg	result1, #1
1626c     04 E4 85 F1 | 	sub	objptr, #4
16270     F2 FA 61 FC | 	wrlong	result1, objptr
16274     01 00 00 FF 
16278     90 E4 05 F1 | 	add	objptr, ##656
1627c     F2 00 68 FC | 	wrlong	#0, objptr
16280     24 00 00 FF 
16284     40 E4 85 F1 | 	sub	objptr, ##18496
16288     F2 04 68 FC | 	wrlong	#2, objptr
1628c     04 E4 05 F1 | 	add	objptr, #4
16290     F2 26 69 FC | 	wrlong	#147, objptr
16294     04 E4 05 F1 | 	add	objptr, #4
16298     F2 34 69 FC | 	wrlong	#154, objptr
1629c     04 E4 05 F1 | 	add	objptr, #4
162a0     F2 08 68 FC | 	wrlong	#4, objptr
162a4     04 E4 85 F1 | 	sub	objptr, #4
162a8     F2 1C 02 FB | 	rdlong	arg06, objptr
162ac     14 E4 85 F1 | 	sub	objptr, #20
162b0     F2 1C 62 FC | 	wrlong	arg06, objptr
162b4     04 E4 05 F1 | 	add	objptr, #4
162b8     F2 00 68 FC | 	wrlong	#0, objptr
162bc     04 E4 05 F1 | 	add	objptr, #4
162c0     F2 00 68 FC | 	wrlong	#0, objptr
162c4     22 00 00 FF 
162c8     B0 E5 05 F1 | 	add	objptr, ##17840
162cc     F2 02 68 FC | 	wrlong	#1, objptr
162d0     01 00 00 FF 
162d4     9C E4 05 F1 | 	add	objptr, ##668
162d8     F2 00 68 FC | 	wrlong	#0, objptr
162dc     01 00 00 FF 
162e0     00 EA 05 F1 | 	add	ptr__dat__, ##512
162e4     08 E4 05 F1 | 	add	objptr, #8
162e8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
162ec     04 E4 85 F1 | 	sub	objptr, #4
162f0     03 00 80 FF 
162f4     F2 3C 69 FC | 	wrlong	##1694, objptr
162f8     16 00 00 FF 
162fc     1C E4 85 F1 | 	sub	objptr, ##11292
16300     F2 18 68 FC | 	wrlong	#12, objptr
16304     64 00 00 FF 
16308     28 E5 85 F1 | 	sub	objptr, ##51496
1630c     01 00 00 FF 
16310     00 EA 85 F1 | 	sub	ptr__dat__, ##512
16314     C8 E9 BF FD | 	call	#_init_commands
16318     30 F8 BF FD | 	call	#_init_error_strings
1631c     B8 F6 BF FD | 	call	#_init_audio
16320     F8 65 BF FD | 	call	#_do_new
16324     56 00 00 FF 
16328     00 E5 05 F1 | 	add	objptr, ##44288
1632c     F2 12 02 FB | 	rdlong	arg01, objptr
16330     04 E4 85 F1 | 	sub	objptr, #4
16334     F2 14 02 FB | 	rdlong	arg02, objptr
16338     56 00 00 FF 
1633c     FC E4 85 F1 | 	sub	objptr, ##44284
16340     94 1D B0 FD | 	call	#_hg010b_spin2_cls
16344     56 00 00 FF 
16348     04 E5 05 F1 | 	add	objptr, ##44292
1634c     F2 12 02 FB | 	rdlong	arg01, objptr
16350     56 00 00 FF 
16354     04 E5 85 F1 | 	sub	objptr, ##44292
16358     94 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
1635c                 | ' 
1635c                 | ' leading_spaces:=amount
1635c     01 00 00 FF 
16360     B2 E4 05 F1 | 	add	objptr, ##690
16364     F2 04 68 FC | 	wrlong	#2, objptr
16368     01 00 00 FF 
1636c     B2 E4 85 F1 | 	sub	objptr, ##690
16370     4A 01 00 FF 
16374     CD 20 06 F6 | 	mov	local02, ##@LR__4695
16378     3D 12 06 F6 | 	mov	arg01, #61
1637c     3C 14 06 F6 | 	mov	arg02, #60
16380     3B 16 06 F6 | 	mov	arg03, #59
16384     3A 18 06 F6 | 	mov	arg04, #58
16388     48 7A B0 FD | 	call	#__system___vfs_open_sdcardx
1638c     FD 14 02 F6 | 	mov	arg02, result1
16390     10 13 02 F6 | 	mov	arg01, local02
16394     6C 34 B0 FD | 	call	#__system___mount
16398     4A 01 00 FF 
1639c     D1 12 06 F6 | 	mov	arg01, ##@LR__4696
163a0     20 37 B0 FD | 	call	#__system___chdir
163a4     4A 01 00 FF 
163a8     D9 20 06 F6 | 	mov	local02, ##@LR__4697
163ac     71 00 00 FF 
163b0     58 E5 05 F1 | 	add	objptr, ##58200
163b4     F2 20 62 FC | 	wrlong	local02, objptr
163b8     1B 00 00 FF 
163bc     60 E4 85 F1 | 	sub	objptr, ##13920
163c0     F2 12 02 FB | 	rdlong	arg01, objptr
163c4     56 00 00 FF 
163c8     F8 E4 85 F1 | 	sub	objptr, ##44280
163cc     01 12 66 F0 | 	shl	arg01, #1
163d0     01 14 06 F6 | 	mov	arg02, #1
163d4     58 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
163d8                 | ' 
163d8                 | ' init_commands
163d8                 | ' init_error_strings
163d8                 | ' init_audio
163d8                 | ' do_new
163d8                 | ' 
163d8                 | ' 
163d8                 | ' cls(ink, paper)
163d8                 | ' v.setfontfamily(font) 				' use ST Mono font
163d8                 | ' v.setleadingspaces(2)
163d8                 | ' mount "/sd", _vfs_open_sdcard()
163d8                 | ' chdir "/sd/bas"
163d8                 | ' 
163d8                 | ' currentdir$="/sd/bas"
163d8                 | ' 
163d8                 | ' position 2*editor_spaces,1 : print ver$
163d8     00 12 06 F6 | 	mov	arg01, #0
163dc     5C 89 B0 FD | 	call	#__system___getiolock_0425
163e0     FD 12 02 F6 | 	mov	arg01, result1
163e4     50 30 B0 FD | 	call	#__system___lockmem
163e8     10 00 00 FF 
163ec     2C EB 05 F1 | 	add	ptr__dat__, ##8492
163f0     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
163f4     10 00 00 FF 
163f8     2C EB 85 F1 | 	sub	ptr__dat__, ##8492
163fc     00 12 06 F6 | 	mov	arg01, #0
16400     00 16 06 F6 | 	mov	arg03, #0
16404     24 3D B0 FD | 	call	#__system___basic_print_string
16408     00 12 06 F6 | 	mov	arg01, #0
1640c     0A 14 06 F6 | 	mov	arg02, #10
16410     00 16 06 F6 | 	mov	arg03, #0
16414     BC 3C B0 FD | 	call	#__system___basic_print_char
16418     00 12 06 F6 | 	mov	arg01, #0
1641c     1C 89 B0 FD | 	call	#__system___getiolock_0425
16420     FD 00 68 FC | 	wrlong	#0, result1
16424     F2 12 02 FB | 	rdlong	arg01, objptr
16428     00 14 06 F6 | 	mov	arg02, #0
1642c     0A 16 06 F6 | 	mov	arg03, #10
16430     0C 52 B0 FD | 	call	#__system__Number_S
16434     FD 12 02 F6 | 	mov	arg01, result1
16438     4A 01 00 FF 
1643c     E1 14 06 F6 | 	mov	arg02, ##@LR__4698
16440     50 30 B0 FD | 	call	#__system___string_concat
16444     FD 20 02 F6 | 	mov	local02, result1
16448     79 00 00 FF 
1644c     A0 E4 05 F1 | 	add	objptr, ##62112
16450     F2 20 62 FC | 	wrlong	local02, objptr
16454     79 00 00 FF 
16458     A0 E4 85 F1 | 	sub	objptr, ##62112
1645c                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
1645c     00 12 06 F6 | 	mov	arg01, #0
16460     D8 88 B0 FD | 	call	#__system___getiolock_0425
16464     FD 12 02 F6 | 	mov	arg01, result1
16468     CC 2F B0 FD | 	call	#__system___lockmem
1646c     79 00 00 FF 
16470     A0 E4 05 F1 | 	add	objptr, ##62112
16474     F2 14 02 FB | 	rdlong	arg02, objptr
16478     79 00 00 FF 
1647c     A0 E4 85 F1 | 	sub	objptr, ##62112
16480     00 12 06 F6 | 	mov	arg01, #0
16484     00 16 06 F6 | 	mov	arg03, #0
16488     A0 3C B0 FD | 	call	#__system___basic_print_string
1648c     00 12 06 F6 | 	mov	arg01, #0
16490     0A 14 06 F6 | 	mov	arg02, #10
16494     00 16 06 F6 | 	mov	arg03, #0
16498     38 3C B0 FD | 	call	#__system___basic_print_char
1649c     00 12 06 F6 | 	mov	arg01, #0
164a0     98 88 B0 FD | 	call	#__system___getiolock_0425
164a4     FD 00 68 FC | 	wrlong	#0, result1
164a8     56 00 00 FF 
164ac     F8 E4 05 F1 | 	add	objptr, ##44280
164b0     F2 12 02 FB | 	rdlong	arg01, objptr
164b4     56 00 00 FF 
164b8     F8 E4 85 F1 | 	sub	objptr, ##44280
164bc     01 12 66 F0 | 	shl	arg01, #1
164c0     04 14 06 F6 | 	mov	arg02, #4
164c4     68 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
164c8                 | ' position 2*editor_spaces,4 : print "Ready"
164c8     00 12 06 F6 | 	mov	arg01, #0
164cc     6C 88 B0 FD | 	call	#__system___getiolock_0425
164d0     FD 12 02 F6 | 	mov	arg01, result1
164d4     60 2F B0 FD | 	call	#__system___lockmem
164d8     4A 01 00 FF 
164dc     F3 14 06 F6 | 	mov	arg02, ##@LR__4699
164e0     00 12 06 F6 | 	mov	arg01, #0
164e4     00 16 06 F6 | 	mov	arg03, #0
164e8     40 3C B0 FD | 	call	#__system___basic_print_string
164ec     FD 22 02 F6 | 	mov	local03, result1
164f0     00 12 06 F6 | 	mov	arg01, #0
164f4     0A 14 06 F6 | 	mov	arg02, #10
164f8     00 16 06 F6 | 	mov	arg03, #0
164fc     D4 3B B0 FD | 	call	#__system___basic_print_char
16500     01 24 06 F6 | 	mov	local04, #1
16504     00 12 06 F6 | 	mov	arg01, #0
16508     30 88 B0 FD | 	call	#__system___getiolock_0425
1650c     FD 00 68 FC | 	wrlong	#0, result1
16510     00 26 06 F6 | 	mov	local05, #0
16514     00 14 06 F6 | 	mov	arg02, #0
16518     01 14 D6 F7 | 	test	arg02, #1 wc
1651c     5A 4C 64 FD | 	drvc	#38
16520     01 14 D6 F7 | 	test	arg02, #1 wc
16524     5A 4E 64 FD | 	drvc	#39
16528                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
16528                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
16528                 | ' 
16528                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
16528                 | ' 
16528                 | ' 'base2:=@channel1[0]+64*channel
16528                 | ' 'long[base2+8]:=sample+$C0000000 
16528                 | ' 'long[base2+12]:= len
16528                 | ' 'if loop >=0 
16528                 | ' '  long[base2+16]:= loop
16528                 | ' 'else
16528                 | ' '  long[base2+16]:= len+2
16528                 | ' 'word[base2+20]:=vol
16528                 | ' 'word[base2+24]:= 3546911/splfreq 
16528                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
16528                 | ' 'long[base2+28]:=$40000000
16528                 | ' 
16528                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
16528                 | ' 'lpoke base+16,2048
16528                 | ' 'lpoke base+12,0
16528                 | ' 'dpoke base+20,16383
16528                 | ' 'dpoke base+22,8192
16528                 | ' 'dpoke base+24,40
16528                 | ' 'dpoke base+26,1280 ' todo: use skip to make accurate sample rate
16528                 | ' 'dpoke base+28,$4000_0000
16528                 | ' 'lpoke base+32,0 
16528                 | ' 'lpoke base+36, varptr(envbuf(0,0))
16528                 | ' 'lpoke base+40,25600' speed
16528                 | ' 'lpoke base+44,1023 'len
16528                 | ' 
16528                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
16528                 | ' '-------------------------------------------------------------------------------------------------------- 
16528                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
16528                 | ' '--------------------------------------------------------------------------------------------------------
16528                 | ' 
16528                 | ' do
16528                 | LR__1700
16528     01 12 06 F6 | 	mov	arg01, #1
1652c     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
16530     06 12 06 F6 | 	mov	arg01, #6
16534     0B 00 00 FF 
16538     C0 E4 05 F1 | 	add	objptr, ##5824
1653c     F8 2B B0 FD | 	call	#_Audio095_8_sc_spin2_stop
16540     0B 00 00 FF 
16544     C0 E4 85 F1 | 	sub	objptr, ##5824
16548     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
1654c     64 00 00 FF 
16550     38 E5 05 F1 | 	add	objptr, ##51512
16554     F2 FA 61 FC | 	wrlong	result1, objptr
16558                 | '   return hkbd_led_rep
16558     13 00 00 FF 
1655c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
16560     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
16564     13 00 00 FF 
16568     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1656c     16 00 00 FF 
16570     20 E4 05 F1 | 	add	objptr, ##11296
16574     F2 FA 61 FC | 	wrlong	result1, objptr
16578                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
16578     16 00 00 FF 
1657c     20 E4 85 F1 | 	sub	objptr, ##11296
16580     F2 20 02 FB | 	rdlong	local02, objptr
16584     64 00 00 FF 
16588     38 E5 85 F1 | 	sub	objptr, ##51512
1658c     01 20 16 F2 | 	cmp	local02, #1 wc
16590     BC 00 90 CD |  if_b	jmp	#LR__1701
16594     64 00 00 FF 
16598     38 E5 05 F1 | 	add	objptr, ##51512
1659c     F2 24 02 FB | 	rdlong	local04, objptr
165a0     64 00 00 FF 
165a4     38 E5 85 F1 | 	sub	objptr, ##51512
165a8     12 23 02 F6 | 	mov	local03, local04
165ac     04 22 16 F2 | 	cmp	local03, #4 wc
165b0     9C 00 90 3D |  if_ae	jmp	#LR__1701
165b4     79 00 00 FF 
165b8     A4 E4 05 F1 | 	add	objptr, ##62116
165bc     F2 1E 02 FB | 	rdlong	local01, objptr
165c0     79 00 00 FF 
165c4     A4 E4 85 F1 | 	sub	objptr, ##62116
165c8     0F 27 02 F6 | 	mov	local05, local01
165cc     01 26 0E F2 | 	cmp	local05, #1 wz
165d0     7C 00 90 5D |  if_ne	jmp	#LR__1701
165d4     04 00 00 FF 
165d8     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
165dc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
165e0     04 00 00 FF 
165e4     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
165e8     56 00 00 FF 
165ec     44 22 06 F6 | 	mov	local03, ##44100
165f0     0E 24 C6 F9 | 	decod	local04, #14
165f4     00 26 06 F6 | 	mov	local05, #0
165f8     03 00 00 FF 
165fc     DE 1E 06 F6 | 	mov	local01, ##1758
16600     07 12 06 F6 | 	mov	arg01, #7
16604     56 00 00 FF 
16608     44 16 06 F6 | 	mov	arg03, ##44100
1660c     0E 18 C6 F9 | 	decod	arg04, #14
16610     00 1A 06 F6 | 	mov	arg05, #0
16614     03 00 00 FF 
16618     DE 1C 06 F6 | 	mov	arg06, ##1758
1661c     0B 00 00 FF 
16620     C0 E4 05 F1 | 	add	objptr, ##5824
16624     BC 29 B0 FD | 	call	#_Audio095_8_sc_spin2_play
16628     0B 00 00 FF 
1662c     C0 E4 85 F1 | 	sub	objptr, ##5824
16630     0A 12 06 F6 | 	mov	arg01, #10
16634     F4 30 B0 FD | 	call	#__system___waitms
16638     07 12 06 F6 | 	mov	arg01, #7
1663c     0B 00 00 FF 
16640     C0 E4 05 F1 | 	add	objptr, ##5824
16644     F0 2A B0 FD | 	call	#_Audio095_8_sc_spin2_stop
16648     0B 00 00 FF 
1664c     C0 E4 85 F1 | 	sub	objptr, ##5824
16650                 | LR__1701
16650                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
16650     64 00 00 FF 
16654     38 E5 05 F1 | 	add	objptr, ##51512
16658     F2 20 02 FB | 	rdlong	local02, objptr
1665c     64 00 00 FF 
16660     38 E5 85 F1 | 	sub	objptr, ##51512
16664     04 20 16 F2 | 	cmp	local02, #4 wc
16668     80 00 90 CD |  if_b	jmp	#LR__1702
1666c     64 00 00 FF 
16670     38 E5 05 F1 | 	add	objptr, ##51512
16674     F2 24 02 FB | 	rdlong	local04, objptr
16678     64 00 00 FF 
1667c     38 E5 85 F1 | 	sub	objptr, ##51512
16680     12 23 02 F6 | 	mov	local03, local04
16684     00 00 40 FF 
16688     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1668c     64 00 00 CF 
16690     38 E5 05 C1 |  if_b	add	objptr, ##51512
16694     F2 1E 02 CB |  if_b	rdlong	local01, objptr
16698     64 00 00 CF 
1669c     38 E5 85 C1 |  if_b	sub	objptr, ##51512
166a0     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
166a4     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
166a8     40 00 90 3D |  if_ae	jmp	#LR__1702
166ac     64 00 00 FF 
166b0     38 E5 05 F1 | 	add	objptr, ##51512
166b4     F2 20 02 FB | 	rdlong	local02, objptr
166b8     04 E4 05 F1 | 	add	objptr, #4
166bc     F2 20 62 FC | 	wrlong	local02, objptr
166c0     16 00 00 FF 
166c4     20 E4 05 F1 | 	add	objptr, ##11296
166c8     F2 02 68 FC | 	wrlong	#1, objptr
166cc     16 00 00 FF 
166d0     20 E4 85 F1 | 	sub	objptr, ##11296
166d4     F2 20 02 FB | 	rdlong	local02, objptr
166d8     16 00 00 FF 
166dc     24 E4 05 F1 | 	add	objptr, ##11300
166e0     F2 20 62 FC | 	wrlong	local02, objptr
166e4     7A 00 00 FF 
166e8     60 E5 85 F1 | 	sub	objptr, ##62816
166ec                 | LR__1702
166ec                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
166ec     64 00 00 FF 
166f0     38 E5 05 F1 | 	add	objptr, ##51512
166f4     F2 20 02 FB | 	rdlong	local02, objptr
166f8     64 00 00 FF 
166fc     38 E5 85 F1 | 	sub	objptr, ##51512
16700     00 00 40 FF 
16704     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
16708     7A 00 00 3F 
1670c     64 E5 05 31 |  if_ae	add	objptr, ##62820
16710     F2 00 68 3C |  if_ae	wrlong	#0, objptr
16714     08 E4 85 31 |  if_ae	sub	objptr, #8
16718     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1671c     7A 00 00 3F 
16720     5C E5 85 31 |  if_ae	sub	objptr, ##62812
16724                 | ' if key=0 andalso rpt=1 then rptcnt+=1
16724     64 00 00 FF 
16728     38 E5 05 F1 | 	add	objptr, ##51512
1672c     F2 20 0A FB | 	rdlong	local02, objptr wz
16730     64 00 00 FF 
16734     38 E5 85 F1 | 	sub	objptr, ##51512
16738     7A 00 00 AF 
1673c     5C E5 05 A1 |  if_e	add	objptr, ##62812
16740     F2 24 02 AB |  if_e	rdlong	local04, objptr
16744     7A 00 00 AF 
16748     5C E5 85 A1 |  if_e	sub	objptr, ##62812
1674c     12 23 02 A6 |  if_e	mov	local03, local04
16750     01 22 0E A2 |  if_e	cmp	local03, #1 wz
16754     7A 00 00 AF 
16758     64 E5 05 A1 |  if_e	add	objptr, ##62820
1675c     F2 20 02 AB |  if_e	rdlong	local02, objptr
16760     01 20 06 A1 |  if_e	add	local02, #1
16764     F2 20 62 AC |  if_e	wrlong	local02, objptr
16768     7A 00 00 AF 
1676c     64 E5 85 A1 |  if_e	sub	objptr, ##62820
16770                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
16770     64 00 00 FF 
16774     38 E5 05 F1 | 	add	objptr, ##51512
16778     F2 20 02 FB | 	rdlong	local02, objptr
1677c     64 00 00 FF 
16780     38 E5 85 F1 | 	sub	objptr, ##51512
16784     00 00 40 FF 
16788     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1678c     44 00 90 3D |  if_ae	jmp	#LR__1704
16790     7A 00 00 FF 
16794     64 E5 05 F1 | 	add	objptr, ##62820
16798     F2 20 02 FB | 	rdlong	local02, objptr
1679c     7A 00 00 FF 
167a0     64 E5 85 F1 | 	sub	objptr, ##62820
167a4     19 20 0E F2 | 	cmp	local02, #25 wz
167a8     28 00 90 5D |  if_ne	jmp	#LR__1703
167ac     64 00 00 FF 
167b0     3C E5 05 F1 | 	add	objptr, ##51516
167b4     F2 20 02 FB | 	rdlong	local02, objptr
167b8     16 00 00 FF 
167bc     24 E4 05 F1 | 	add	objptr, ##11300
167c0     F2 20 62 FC | 	wrlong	local02, objptr
167c4     04 E4 05 F1 | 	add	objptr, #4
167c8     F2 2A 68 FC | 	wrlong	#21, objptr
167cc     7A 00 00 FF 
167d0     64 E5 85 F1 | 	sub	objptr, ##62820
167d4                 | LR__1703
167d4                 | LR__1704
167d4                 | ' 
167d4                 | ' 
167d4                 | ' if key3<>0 then
167d4     7A 00 00 FF 
167d8     60 E5 05 F1 | 	add	objptr, ##62816
167dc     F2 28 0A FB | 	rdlong	local06, objptr wz
167e0     7A 00 00 FF 
167e4     60 E5 85 F1 | 	sub	objptr, ##62816
167e8     3C FD 9F AD |  if_e	jmp	#LR__1700
167ec                 | '   if keyclick=1 then paula.play(6,keyclick_spl,44100,16384,spl_len) 
167ec     79 00 00 FF 
167f0     A4 E4 05 F1 | 	add	objptr, ##62116
167f4     F2 20 02 FB | 	rdlong	local02, objptr
167f8     79 00 00 FF 
167fc     A4 E4 85 F1 | 	sub	objptr, ##62116
16800     01 20 0E F2 | 	cmp	local02, #1 wz
16804     50 00 90 5D |  if_ne	jmp	#LR__1705
16808     7A 00 00 FF 
1680c     48 E5 05 F1 | 	add	objptr, ##62792
16810     F2 14 02 FB | 	rdlong	arg02, objptr
16814     56 00 00 FF 
16818     44 22 06 F6 | 	mov	local03, ##44100
1681c     0E 24 C6 F9 | 	decod	local04, #14
16820     04 E4 85 F1 | 	sub	objptr, #4
16824     F2 26 02 FB | 	rdlong	local05, objptr
16828     01 1E 66 F6 | 	neg	local01, #1
1682c     06 12 06 F6 | 	mov	arg01, #6
16830     56 00 00 FF 
16834     44 16 06 F6 | 	mov	arg03, ##44100
16838     0E 18 C6 F9 | 	decod	arg04, #14
1683c     13 1B 02 F6 | 	mov	arg05, local05
16840     01 1C 66 F6 | 	neg	arg06, #1
16844     6F 00 00 FF 
16848     84 E4 85 F1 | 	sub	objptr, ##56964
1684c     94 27 B0 FD | 	call	#_Audio095_8_sc_spin2_play
16850     0B 00 00 FF 
16854     C0 E4 85 F1 | 	sub	objptr, ##5824
16858                 | LR__1705
16858     7A 00 00 FF 
1685c     60 E5 05 F1 | 	add	objptr, ##62816
16860     F2 12 02 FB | 	rdlong	arg01, objptr
16864     7A 00 00 FF 
16868     60 E5 85 F1 | 	sub	objptr, ##62816
1686c     20 F8 BF FD | 	call	#_scantochar
16870     7A 00 00 FF 
16874     68 E5 05 F1 | 	add	objptr, ##62824
16878     F2 FA 61 FC | 	wrlong	result1, objptr
1687c                 | '   if leds and 2 = 2 then 
1687c     10 E4 85 F1 | 	sub	objptr, #16
16880     F2 20 0A FB | 	rdlong	local02, objptr wz
16884     7A 00 00 FF 
16888     58 E5 85 F1 | 	sub	objptr, ##62808
1688c     68 01 90 AD |  if_e	jmp	#LR__1713
16890                 | '     if key4>96 andalso key4<123 then
16890     7A 00 00 FF 
16894     68 E5 05 F1 | 	add	objptr, ##62824
16898     F2 20 02 FB | 	rdlong	local02, objptr
1689c     7A 00 00 FF 
168a0     68 E5 85 F1 | 	sub	objptr, ##62824
168a4     61 20 56 F2 | 	cmps	local02, #97 wc
168a8     40 00 90 CD |  if_b	jmp	#LR__1706
168ac     7A 00 00 FF 
168b0     68 E5 05 F1 | 	add	objptr, ##62824
168b4     F2 24 02 FB | 	rdlong	local04, objptr
168b8     7A 00 00 FF 
168bc     68 E5 85 F1 | 	sub	objptr, ##62824
168c0     12 23 02 F6 | 	mov	local03, local04
168c4     7B 22 56 F2 | 	cmps	local03, #123 wc
168c8     20 00 90 3D |  if_ae	jmp	#LR__1706
168cc     7A 00 00 FF 
168d0     68 E5 05 F1 | 	add	objptr, ##62824
168d4     F2 20 02 FB | 	rdlong	local02, objptr
168d8     20 20 86 F1 | 	sub	local02, #32
168dc     F2 20 62 FC | 	wrlong	local02, objptr
168e0     7A 00 00 FF 
168e4     68 E5 85 F1 | 	sub	objptr, ##62824
168e8     0C 01 90 FD | 	jmp	#LR__1712
168ec                 | LR__1706
168ec     7A 00 00 FF 
168f0     68 E5 05 F1 | 	add	objptr, ##62824
168f4     F2 20 02 FB | 	rdlong	local02, objptr
168f8     7A 00 00 FF 
168fc     68 E5 85 F1 | 	sub	objptr, ##62824
16900     41 20 56 F2 | 	cmps	local02, #65 wc
16904     40 00 90 CD |  if_b	jmp	#LR__1707
16908     7A 00 00 FF 
1690c     68 E5 05 F1 | 	add	objptr, ##62824
16910     F2 24 02 FB | 	rdlong	local04, objptr
16914     7A 00 00 FF 
16918     68 E5 85 F1 | 	sub	objptr, ##62824
1691c     12 23 02 F6 | 	mov	local03, local04
16920     5B 22 56 F2 | 	cmps	local03, #91 wc
16924     20 00 90 3D |  if_ae	jmp	#LR__1707
16928     7A 00 00 FF 
1692c     68 E5 05 F1 | 	add	objptr, ##62824
16930     F2 20 02 FB | 	rdlong	local02, objptr
16934     20 20 06 F1 | 	add	local02, #32
16938     F2 20 62 FC | 	wrlong	local02, objptr
1693c     7A 00 00 FF 
16940     68 E5 85 F1 | 	sub	objptr, ##62824
16944     B0 00 90 FD | 	jmp	#LR__1711
16948                 | LR__1707
16948     7A 00 00 FF 
1694c     68 E5 05 F1 | 	add	objptr, ##62824
16950     F2 20 02 FB | 	rdlong	local02, objptr
16954     7A 00 00 FF 
16958     68 E5 85 F1 | 	sub	objptr, ##62824
1695c     17 20 56 F2 | 	cmps	local02, #23 wc
16960     40 00 90 CD |  if_b	jmp	#LR__1708
16964     7A 00 00 FF 
16968     68 E5 05 F1 | 	add	objptr, ##62824
1696c     F2 24 02 FB | 	rdlong	local04, objptr
16970     7A 00 00 FF 
16974     68 E5 85 F1 | 	sub	objptr, ##62824
16978     12 23 02 F6 | 	mov	local03, local04
1697c     20 22 56 F2 | 	cmps	local03, #32 wc
16980     20 00 90 3D |  if_ae	jmp	#LR__1708
16984     7A 00 00 FF 
16988     68 E5 05 F1 | 	add	objptr, ##62824
1698c     F2 20 02 FB | 	rdlong	local02, objptr
16990     09 20 86 F1 | 	sub	local02, #9
16994     F2 20 62 FC | 	wrlong	local02, objptr
16998     7A 00 00 FF 
1699c     68 E5 85 F1 | 	sub	objptr, ##62824
169a0     54 00 90 FD | 	jmp	#LR__1710
169a4                 | LR__1708
169a4     7A 00 00 FF 
169a8     68 E5 05 F1 | 	add	objptr, ##62824
169ac     F2 20 02 FB | 	rdlong	local02, objptr
169b0     7A 00 00 FF 
169b4     68 E5 85 F1 | 	sub	objptr, ##62824
169b8     0E 20 56 F2 | 	cmps	local02, #14 wc
169bc     38 00 90 CD |  if_b	jmp	#LR__1709
169c0     7A 00 00 FF 
169c4     68 E5 05 F1 | 	add	objptr, ##62824
169c8     F2 24 02 FB | 	rdlong	local04, objptr
169cc     7A 00 00 FF 
169d0     68 E5 85 F1 | 	sub	objptr, ##62824
169d4     12 23 02 F6 | 	mov	local03, local04
169d8     17 22 56 F2 | 	cmps	local03, #23 wc
169dc     7A 00 00 CF 
169e0     68 E5 05 C1 |  if_b	add	objptr, ##62824
169e4     F2 20 02 CB |  if_b	rdlong	local02, objptr
169e8     27 20 06 C1 |  if_b	add	local02, #39
169ec     F2 20 62 CC |  if_b	wrlong	local02, objptr
169f0     7A 00 00 CF 
169f4     68 E5 85 C1 |  if_b	sub	objptr, ##62824
169f8                 | LR__1709
169f8                 | LR__1710
169f8                 | LR__1711
169f8                 | LR__1712
169f8                 | LR__1713
169f8                 | '  
169f8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
169f8     7A 00 00 FF 
169fc     68 E5 05 F1 | 	add	objptr, ##62824
16a00     F2 20 02 FB | 	rdlong	local02, objptr
16a04     7A 00 00 FF 
16a08     68 E5 85 F1 | 	sub	objptr, ##62824
16a0c     01 20 56 F2 | 	cmps	local02, #1 wc
16a10     90 00 90 CD |  if_b	jmp	#LR__1714
16a14     7A 00 00 FF 
16a18     68 E5 05 F1 | 	add	objptr, ##62824
16a1c     F2 24 02 FB | 	rdlong	local04, objptr
16a20     7A 00 00 FF 
16a24     68 E5 85 F1 | 	sub	objptr, ##62824
16a28     12 23 02 F6 | 	mov	local03, local04
16a2c     7F 22 56 F2 | 	cmps	local03, #127 wc
16a30     38 E4 05 C1 |  if_b	add	objptr, #56
16a34     F2 1E E2 CA |  if_b	rdword	local01, objptr
16a38     38 E4 85 C1 |  if_b	sub	objptr, #56
16a3c     0F 27 32 C9 |  if_b	getword	local05, local01, #0
16a40     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
16a44     5C 00 90 3D |  if_ae	jmp	#LR__1714
16a48     7A 00 00 FF 
16a4c     68 E5 05 F1 | 	add	objptr, ##62824
16a50     F2 12 02 FB | 	rdlong	arg01, objptr
16a54     7A 00 00 FF 
16a58     68 E5 85 F1 | 	sub	objptr, ##62824
16a5c     AC 4B B0 FD | 	call	#__system__Chr_S
16a60     FD 2A 02 F6 | 	mov	local07, result1
16a64     56 00 00 FF 
16a68     E0 E4 05 F1 | 	add	objptr, ##44256
16a6c     F2 12 02 FB | 	rdlong	arg01, objptr
16a70     56 00 00 FF 
16a74     E0 E4 85 F1 | 	sub	objptr, ##44256
16a78     15 15 02 F6 | 	mov	arg02, local07
16a7c     14 2A B0 FD | 	call	#__system___string_concat
16a80     56 00 00 FF 
16a84     E0 E4 05 F1 | 	add	objptr, ##44256
16a88     F2 FA 61 FC | 	wrlong	result1, objptr
16a8c     24 00 00 FF 
16a90     88 E4 05 F1 | 	add	objptr, ##18568
16a94     F2 12 02 FB | 	rdlong	arg01, objptr
16a98     7A 00 00 FF 
16a9c     68 E5 85 F1 | 	sub	objptr, ##62824
16aa0     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
16aa4                 | LR__1714
16aa4                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
16aa4     7A 00 00 FF 
16aa8     68 E5 05 F1 | 	add	objptr, ##62824
16aac     F2 20 02 FB | 	rdlong	local02, objptr
16ab0     7A 00 00 FF 
16ab4     68 E5 85 F1 | 	sub	objptr, ##62824
16ab8     01 20 56 F2 | 	cmps	local02, #1 wc
16abc     D0 00 90 CD |  if_b	jmp	#LR__1715
16ac0     7A 00 00 FF 
16ac4     68 E5 05 F1 | 	add	objptr, ##62824
16ac8     F2 24 02 FB | 	rdlong	local04, objptr
16acc     7A 00 00 FF 
16ad0     68 E5 85 F1 | 	sub	objptr, ##62824
16ad4     12 23 02 F6 | 	mov	local03, local04
16ad8     7F 22 56 F2 | 	cmps	local03, #127 wc
16adc     B0 00 90 3D |  if_ae	jmp	#LR__1715
16ae0     38 E4 05 F1 | 	add	objptr, #56
16ae4     F2 1E E2 FA | 	rdword	local01, objptr
16ae8     38 E4 85 F1 | 	sub	objptr, #56
16aec     0F 27 32 F9 | 	getword	local05, local01, #0
16af0     FE 26 0E F2 | 	cmp	local05, #254 wz
16af4     79 00 00 AF 
16af8     A4 E4 05 A1 |  if_e	add	objptr, ##62116
16afc     F2 2C 02 AB |  if_e	rdlong	local08, objptr
16b00     79 00 00 AF 
16b04     A4 E4 85 A1 |  if_e	sub	objptr, ##62116
16b08     16 2F 02 A6 |  if_e	mov	local09, local08
16b0c     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
16b10     7C 00 90 5D |  if_ne	jmp	#LR__1715
16b14     04 00 00 FF 
16b18     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
16b1c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16b20     04 00 00 FF 
16b24     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
16b28     56 00 00 FF 
16b2c     44 22 06 F6 | 	mov	local03, ##44100
16b30     0E 24 C6 F9 | 	decod	local04, #14
16b34     00 26 06 F6 | 	mov	local05, #0
16b38     03 00 00 FF 
16b3c     DE 1E 06 F6 | 	mov	local01, ##1758
16b40     07 12 06 F6 | 	mov	arg01, #7
16b44     56 00 00 FF 
16b48     44 16 06 F6 | 	mov	arg03, ##44100
16b4c     0E 18 C6 F9 | 	decod	arg04, #14
16b50     00 1A 06 F6 | 	mov	arg05, #0
16b54     03 00 00 FF 
16b58     DE 1C 06 F6 | 	mov	arg06, ##1758
16b5c     0B 00 00 FF 
16b60     C0 E4 05 F1 | 	add	objptr, ##5824
16b64     7C 24 B0 FD | 	call	#_Audio095_8_sc_spin2_play
16b68     0B 00 00 FF 
16b6c     C0 E4 85 F1 | 	sub	objptr, ##5824
16b70     2C 13 06 F6 | 	mov	arg01, #300
16b74     B4 2B B0 FD | 	call	#__system___waitms
16b78     07 12 06 F6 | 	mov	arg01, #7
16b7c     0B 00 00 FF 
16b80     C0 E4 05 F1 | 	add	objptr, ##5824
16b84     B0 25 B0 FD | 	call	#_Audio095_8_sc_spin2_stop
16b88     0B 00 00 FF 
16b8c     C0 E4 85 F1 | 	sub	objptr, ##5824
16b90                 | LR__1715
16b90                 | '  
16b90                 | '   'tab
16b90                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
16b90     7A 00 00 FF 
16b94     60 E5 05 F1 | 	add	objptr, ##62816
16b98     F2 20 02 FB | 	rdlong	local02, objptr
16b9c     7A 00 00 FF 
16ba0     60 E5 85 F1 | 	sub	objptr, ##62816
16ba4     10 21 E2 F8 | 	getbyte	local02, local02, #0
16ba8     2B 20 0E F2 | 	cmp	local02, #43 wz
16bac     B4 00 90 5D |  if_ne	jmp	#LR__1716
16bb0     38 E4 05 F1 | 	add	objptr, #56
16bb4     F2 24 E2 FA | 	rdword	local04, objptr
16bb8     38 E4 85 F1 | 	sub	objptr, #56
16bbc     12 23 32 F9 | 	getword	local03, local04, #0
16bc0     F0 22 16 F2 | 	cmp	local03, #240 wc
16bc4     9C 00 90 CD |  if_b	jmp	#LR__1716
16bc8     79 00 00 FF 
16bcc     A4 E4 05 F1 | 	add	objptr, ##62116
16bd0     F2 1E 02 FB | 	rdlong	local01, objptr
16bd4     79 00 00 FF 
16bd8     A4 E4 85 F1 | 	sub	objptr, ##62116
16bdc     0F 27 02 F6 | 	mov	local05, local01
16be0     01 26 0E F2 | 	cmp	local05, #1 wz
16be4     7C 00 90 5D |  if_ne	jmp	#LR__1716
16be8     04 00 00 FF 
16bec     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
16bf0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16bf4     04 00 00 FF 
16bf8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
16bfc     56 00 00 FF 
16c00     44 22 06 F6 | 	mov	local03, ##44100
16c04     0E 24 C6 F9 | 	decod	local04, #14
16c08     00 26 06 F6 | 	mov	local05, #0
16c0c     03 00 00 FF 
16c10     DE 1E 06 F6 | 	mov	local01, ##1758
16c14     00 12 06 F6 | 	mov	arg01, #0
16c18     56 00 00 FF 
16c1c     44 16 06 F6 | 	mov	arg03, ##44100
16c20     0E 18 C6 F9 | 	decod	arg04, #14
16c24     00 1A 06 F6 | 	mov	arg05, #0
16c28     03 00 00 FF 
16c2c     DE 1C 06 F6 | 	mov	arg06, ##1758
16c30     0B 00 00 FF 
16c34     C0 E4 05 F1 | 	add	objptr, ##5824
16c38     A8 23 B0 FD | 	call	#_Audio095_8_sc_spin2_play
16c3c     0B 00 00 FF 
16c40     C0 E4 85 F1 | 	sub	objptr, ##5824
16c44     2C 13 06 F6 | 	mov	arg01, #300
16c48     E0 2A B0 FD | 	call	#__system___waitms
16c4c     00 12 06 F6 | 	mov	arg01, #0
16c50     0B 00 00 FF 
16c54     C0 E4 05 F1 | 	add	objptr, ##5824
16c58     DC 24 B0 FD | 	call	#_Audio095_8_sc_spin2_stop
16c5c     0B 00 00 FF 
16c60     C0 E4 85 F1 | 	sub	objptr, ##5824
16c64                 | LR__1716
16c64                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
16c64     7A 00 00 FF 
16c68     60 E5 05 F1 | 	add	objptr, ##62816
16c6c     F2 20 02 FB | 	rdlong	local02, objptr
16c70     7A 00 00 FF 
16c74     60 E5 85 F1 | 	sub	objptr, ##62816
16c78     10 21 E2 F8 | 	getbyte	local02, local02, #0
16c7c     2B 20 0E F2 | 	cmp	local02, #43 wz
16c80     AC 00 90 5D |  if_ne	jmp	#LR__1719
16c84     38 E4 05 F1 | 	add	objptr, #56
16c88     F2 24 E2 FA | 	rdword	local04, objptr
16c8c     38 E4 85 F1 | 	sub	objptr, #56
16c90     12 23 32 F9 | 	getword	local03, local04, #0
16c94     F0 22 16 F2 | 	cmp	local03, #240 wc
16c98     94 00 90 3D |  if_ae	jmp	#LR__1719
16c9c     38 E4 05 F1 | 	add	objptr, #56
16ca0     F2 20 E2 FA | 	rdword	local02, objptr
16ca4     10 23 52 F6 | 	abs	local03, local02 wc
16ca8     11 23 42 F8 | 	getnib	local03, local03, #0
16cac     11 23 82 F6 | 	negc	local03, local03
16cb0     11 25 52 F6 | 	abs	local04, local03 wc
16cb4     01 24 46 F0 | 	shr	local04, #1
16cb8     12 25 82 F6 | 	negc	local04, local04
16cbc     7A 00 00 FF 
16cc0     34 E5 05 F1 | 	add	objptr, ##62772
16cc4     F2 24 62 FC | 	wrlong	local04, objptr
16cc8     12 31 02 F6 | 	mov	local10, local04
16ccc     7A 00 00 FF 
16cd0     6C E5 85 F1 | 	sub	objptr, ##62828
16cd4                 | LR__1717
16cd4     08 30 56 F2 | 	cmps	local10, #8 wc
16cd8     54 00 90 3D |  if_ae	jmp	#LR__1718
16cdc     56 00 00 FF 
16ce0     E0 E4 05 F1 | 	add	objptr, ##44256
16ce4     F2 12 02 FB | 	rdlong	arg01, objptr
16ce8     56 00 00 FF 
16cec     E0 E4 85 F1 | 	sub	objptr, ##44256
16cf0     4A 01 00 FF 
16cf4     F9 24 06 F6 | 	mov	local04, ##@LR__4700
16cf8     12 15 02 F6 | 	mov	arg02, local04
16cfc     94 27 B0 FD | 	call	#__system___string_concat
16d00     56 00 00 FF 
16d04     E0 E4 05 F1 | 	add	objptr, ##44256
16d08     F2 FA 61 FC | 	wrlong	result1, objptr
16d0c     56 00 00 FF 
16d10     E0 E4 85 F1 | 	sub	objptr, ##44256
16d14     4A 01 00 FF 
16d18     FB 12 06 F6 | 	mov	arg01, ##@LR__4701
16d1c     74 16 B0 FD | 	call	#_hg010b_spin2_write
16d20     18 23 02 F6 | 	mov	local03, local10
16d24     01 22 06 F1 | 	add	local03, #1
16d28     11 31 02 F6 | 	mov	local10, local03
16d2c     A4 FF 9F FD | 	jmp	#LR__1717
16d30                 | LR__1718
16d30                 | LR__1719
16d30                 | '  
16d30                 | '   'backspace
16d30                 | '   if (key3 and 255) = 42 then 
16d30     7A 00 00 FF 
16d34     60 E5 05 F1 | 	add	objptr, ##62816
16d38     F2 20 02 FB | 	rdlong	local02, objptr
16d3c     7A 00 00 FF 
16d40     60 E5 85 F1 | 	sub	objptr, ##62816
16d44     10 21 E2 F8 | 	getbyte	local02, local02, #0
16d48     2A 20 0E F2 | 	cmp	local02, #42 wz
16d4c     D4 00 90 5D |  if_ne	jmp	#LR__1724
16d50                 | '       if v.cursor_x>4 then 
16d50     38 E4 05 F1 | 	add	objptr, #56
16d54     F2 20 E2 FA | 	rdword	local02, objptr
16d58     38 E4 85 F1 | 	sub	objptr, #56
16d5c     05 20 16 F2 | 	cmp	local02, #5 wc
16d60     9C 00 90 CD |  if_b	jmp	#LR__1722
16d64     56 00 00 FF 
16d68     E0 E4 05 F1 | 	add	objptr, ##44256
16d6c     F2 26 02 FB | 	rdlong	local05, objptr
16d70     56 00 00 FF 
16d74     E0 E4 85 F1 | 	sub	objptr, ##44256
16d78     13 13 02 F6 | 	mov	arg01, local05
16d7c     09 33 02 F6 | 	mov	local11, arg01
16d80     97 06 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
16d84                 | LR__1720
16d84     19 FB C9 FA | 	rdbyte	result1, local11 wz
16d88     01 32 06 51 |  if_ne	add	local11, #1
16d8c     F4 FF 9F 5D |  if_ne	jmp	#LR__1720
16d90                 | LR__1721
16d90     09 33 82 F1 | 	sub	local11, arg01
16d94     19 15 02 F6 | 	mov	arg02, local11
16d98     01 14 86 F1 | 	sub	arg02, #1
16d9c     13 13 02 F6 | 	mov	arg01, local05
16da0     A4 46 B0 FD | 	call	#__system__Left_S
16da4     56 00 00 FF 
16da8     E0 E4 05 F1 | 	add	objptr, ##44256
16dac     F2 FA 61 FC | 	wrlong	result1, objptr
16db0     56 00 00 FF 
16db4     A8 E4 85 F1 | 	sub	objptr, ##44200
16db8     F2 12 E2 FA | 	rdword	arg01, objptr
16dbc     02 12 86 F1 | 	sub	arg01, #2
16dc0     02 E4 05 F1 | 	add	objptr, #2
16dc4     F2 14 C2 FA | 	rdbyte	arg02, objptr
16dc8     3A E4 85 F1 | 	sub	objptr, #58
16dcc     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16dd0     20 12 06 F6 | 	mov	arg01, #32
16dd4     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
16dd8     38 E4 05 F1 | 	add	objptr, #56
16ddc     F2 12 E2 FA | 	rdword	arg01, objptr
16de0     02 12 86 F1 | 	sub	arg01, #2
16de4     02 E4 05 F1 | 	add	objptr, #2
16de8     F2 24 C2 FA | 	rdbyte	local04, objptr
16dec     3A E4 85 F1 | 	sub	objptr, #58
16df0     12 23 E2 F8 | 	getbyte	local03, local04, #0
16df4     11 15 02 F6 | 	mov	arg02, local03
16df8     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16dfc     24 00 90 FD | 	jmp	#LR__1723
16e00                 | LR__1722
16e00     4A 01 00 FF 
16e04     FD 20 06 F6 | 	mov	local02, ##@LR__4702
16e08     56 00 00 FF 
16e0c     E0 E4 05 F1 | 	add	objptr, ##44256
16e10     F2 20 62 FC | 	wrlong	local02, objptr
16e14     56 00 00 FF 
16e18     A8 E4 85 F1 | 	sub	objptr, ##44200
16e1c     F2 08 58 FC | 	wrword	#4, objptr
16e20     38 E4 85 F1 | 	sub	objptr, #56
16e24                 | LR__1723
16e24                 | LR__1724
16e24                 | '    
16e24                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
16e24                 | '  
16e24                 | '   if key4=key_enter then 
16e24     7A 00 00 FF 
16e28     68 E5 05 F1 | 	add	objptr, ##62824
16e2c     F2 28 02 FB | 	rdlong	local06, objptr
16e30     7A 00 00 FF 
16e34     68 E5 85 F1 | 	sub	objptr, ##62824
16e38     8D 28 0E F2 | 	cmp	local06, #141 wz
16e3c     50 00 90 5D |  if_ne	jmp	#LR__1725
16e40     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
16e44     D4 9B BE FD | 	call	#_interpret
16e48     4A 01 00 FF 
16e4c     FE 20 06 F6 | 	mov	local02, ##@LR__4703
16e50     56 00 00 FF 
16e54     E0 E4 05 F1 | 	add	objptr, ##44256
16e58     F2 20 62 FC | 	wrlong	local02, objptr
16e5c     1A FA 61 FD | 	getct	result1
16e60     24 00 00 FF 
16e64     90 E4 05 F1 | 	add	objptr, ##18576
16e68     F2 24 02 FB | 	rdlong	local04, objptr
16e6c     12 23 02 F6 | 	mov	local03, local04
16e70     11 FB 81 F1 | 	sub	result1, local03
16e74     F2 FA 61 FC | 	wrlong	result1, objptr
16e78     14 E4 85 F1 | 	sub	objptr, #20
16e7c     F2 00 68 FC | 	wrlong	#0, objptr
16e80     08 E4 05 F1 | 	add	objptr, #8
16e84     F2 00 68 FC | 	wrlong	#0, objptr
16e88     7A 00 00 FF 
16e8c     64 E5 85 F1 | 	sub	objptr, ##62820
16e90                 | LR__1725
16e90     7A 00 00 FF 
16e94     60 E5 05 F1 | 	add	objptr, ##62816
16e98     F2 00 68 FC | 	wrlong	#0, objptr
16e9c     7A 00 00 FF 
16ea0     60 E5 85 F1 | 	sub	objptr, ##62816
16ea4     80 F6 9F FD | 	jmp	#LR__1700
16ea8     A7 F0 03 F6 | 	mov	ptra, fp
16eac     B2 00 A0 FD | 	call	#popregs_
16eb0                 | _program_ret
16eb0     2D 00 64 FD | 	ret
16eb4                 | 
16eb4                 | ' '' this is not a main program.
16eb4                 | ' 
16eb4                 | ' '****************************************************************************************************************
16eb4                 | ' '                                                                                                             	*
16eb4                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
16eb4                 | ' '                                                                                                            	*
16eb4                 | ' ' mode - mode #, see below											*
16eb4                 | ' ' base - HDMI base pin												*
16eb4                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
16eb4                 | ' '														*
16eb4                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
16eb4                 | ' '' set bit #15 for custom timings														*
16eb4                 | ' '' p - 1 - psram, 0 - hub											*
16eb4                 | ' '' t - 1 - graphics, 0 - text											*
16eb4                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
16eb4                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
16eb4                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
16eb4                 | ' '														*
16eb4                 | ' '****************************************************************************************************************
16eb4                 | ' 
16eb4                 | ' pub start(base,mb):result |i
16eb4                 | _hg010b_spin2_start
16eb4                 | ' 
16eb4                 | ' '--------------------------- initialize pointers and variables
16eb4                 | ' 
16eb4                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
16eb4     30 E4 05 F1 | 	add	objptr, #48
16eb8     F2 FA 01 F6 | 	mov	result1, objptr
16ebc     28 E4 85 F1 | 	sub	objptr, #40
16ec0     F2 FA 61 FC | 	wrlong	result1, objptr
16ec4                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
16ec4                 | ' hdmibase:=base							' HDMI base pin, 8*n
16ec4     18 E4 05 F1 | 	add	objptr, #24
16ec8     F2 12 62 FC | 	wrlong	arg01, objptr
16ecc                 | ' mailbox_ptr:=mb		
16ecc     04 E4 05 F1 | 	add	objptr, #4
16ed0     F2 14 62 FC | 	wrlong	arg02, objptr
16ed4                 | ' mailbox0:=mb				' PSRAM mailbox pointer
16ed4     C1 E5 05 F1 | 	add	objptr, #449
16ed8     F2 14 62 FC | 	wrlong	arg02, objptr
16edc                 | ' sprite_ptr:=@spr1ptr
16edc     D8 E4 85 F1 | 	sub	objptr, #216
16ee0     F2 FA 01 F6 | 	mov	result1, objptr
16ee4     E5 E4 85 F1 | 	sub	objptr, #229
16ee8     F2 FA 61 FC | 	wrlong	result1, objptr
16eec                 | ' 
16eec                 | ' 		'
16eec                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
16eec     E5 E4 05 F1 | 	add	objptr, #229
16ef0     F2 FA 01 FB | 	rdlong	result1, objptr
16ef4     D0 FA 05 F1 | 	add	result1, #208
16ef8     FD 10 58 FC | 	wrword	#8, result1
16efc                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
16efc     F2 16 02 FB | 	rdlong	arg03, objptr
16f00     D2 16 06 F1 | 	add	arg03, #210
16f04     0B 21 58 FC | 	wrword	#16, arg03
16f08                 | ' leading_spaces:=0				'
16f08     A5 E5 05 F1 | 	add	objptr, #421
16f0c     F2 00 68 FC | 	wrlong	#0, objptr
16f10                 | ' 
16f10                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
16f10     99 E4 85 F1 | 	sub	objptr, #153
16f14     00 00 A0 FF 
16f18     F2 0E 68 FC | 	wrlong	##1073741831, objptr
16f1c                 | ' emptydl[1]:=0
16f1c     04 E4 05 F1 | 	add	objptr, #4
16f20     F2 00 68 FC | 	wrlong	#0, objptr
16f24                 | ' 
16f24                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
16f24                 | ' 
16f24                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
16f24     28 E5 85 F1 | 	sub	objptr, #296
16f28     F2 02 68 FC | 	wrlong	#1, objptr
16f2c                 | ' if s_debug<>0
16f2c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
16f2c     20 00 80 FF 
16f30     F2 00 68 FC | 	wrlong	##16384, objptr
16f34     F5 E4 85 F1 | 	sub	objptr, #245
16f38                 | ' setmode()							' set the mode, see below
16f38     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
16f3c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
16f3c     45 E4 05 F1 | 	add	objptr, #69
16f40     F2 FA 01 F6 | 	mov	result1, objptr
16f44     35 E4 85 F1 | 	sub	objptr, #53
16f48     F2 FA 61 FC | 	wrlong	result1, objptr
16f4c                 | ' cursor_ptr:=@cursor_x						
16f4c     28 E4 05 F1 | 	add	objptr, #40
16f50     F2 16 02 F6 | 	mov	arg03, objptr
16f54     2C E4 85 F1 | 	sub	objptr, #44
16f58     F2 16 62 FC | 	wrlong	arg03, objptr
16f5c                 | ' fontnum:=0  							' start with a PC type font 
16f5c     55 E4 05 F1 | 	add	objptr, #85
16f60     F2 00 68 FC | 	wrlong	#0, objptr
16f64                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
16f64     1C E4 05 F1 | 	add	objptr, #28
16f68     F2 12 02 F6 | 	mov	arg01, objptr
16f6c     7D E4 85 F1 | 	sub	objptr, #125
16f70     10 00 00 FF 
16f74     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
16f78     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16f7c     10 00 00 FF 
16f80     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
16f84     10 16 06 F6 | 	mov	arg03, #16
16f88     CC 23 B0 FD | 	call	#__system____builtin_memmove
16f8c                 | ' leading_spaces:=0
16f8c     01 00 00 FF 
16f90     B2 E4 05 F1 | 	add	objptr, ##690
16f94     F2 00 68 FC | 	wrlong	#0, objptr
16f98     01 00 00 FF 
16f9c     B2 E4 85 F1 | 	sub	objptr, ##690
16fa0                 | ' '---------------------------- initialize a cursor (MSDOS type)
16fa0                 | ' 
16fa0                 | ' initcursor(154)
16fa0     9A 12 06 F6 | 	mov	arg01, #154
16fa4     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
16fa8                 | ' 
16fa8                 | ' '---------------------------- start the cog
16fa8                 | ' 
16fa8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
16fa8     10 00 00 FF 
16fac     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
16fb0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16fb4     10 00 00 FF 
16fb8     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
16fbc     10 E4 05 F1 | 	add	objptr, #16
16fc0     10 FA 05 F6 | 	mov	result1, #16
16fc4     28 E4 61 FD | 	setq	objptr
16fc8     0A FB F1 FC | 	coginit	result1, arg02 wc
16fcc     01 FA 65 C6 |  if_b	neg	result1, #1
16fd0     1C E4 05 F1 | 	add	objptr, #28
16fd4     F2 FA 61 FC | 	wrlong	result1, objptr
16fd8     2C E4 85 F1 | 	sub	objptr, #44
16fdc                 | ' waitms(40)							' wait for stabilize
16fdc     28 12 06 F6 | 	mov	arg01, #40
16fe0     48 27 B0 FD | 	call	#__system___waitms
16fe4                 | ' return cog							' return the driver's cog #
16fe4     2C E4 05 F1 | 	add	objptr, #44
16fe8     F2 FA 01 FB | 	rdlong	result1, objptr
16fec     2C E4 85 F1 | 	sub	objptr, #44
16ff0                 | _hg010b_spin2_start_ret
16ff0     2D 00 64 FD | 	ret
16ff4                 | 
16ff4                 | ' 
16ff4                 | ' 
16ff4                 | ' '**************************************************************************************************************** 
16ff4                 | ' '                                                                                                             	*
16ff4                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
16ff4                 | ' '  Mode number - see start() above or bits below								*
16ff4                 | ' '                                                                                                             	*
16ff4                 | ' '****************************************************************************************************************
16ff4                 | ' 
16ff4                 | ' '---------------------------- initialize a cursor (MSDOS type)
16ff4                 | ' pub initcursor(color) |i
16ff4                 | _hg010b_spin2_initcursor
16ff4     03 4A 05 F6 | 	mov	COUNT_, #3
16ff8     A8 00 A0 FD | 	call	#pushregs_
16ffc     09 1F 02 F6 | 	mov	local01, arg01
17000                 | ' 
17000                 | ' cursor_x:=0							' place the cursor at 0:0
17000     38 E4 05 F1 | 	add	objptr, #56
17004     F2 00 58 FC | 	wrword	#0, objptr
17008                 | ' cursor_y:=0
17008     02 E4 05 F1 | 	add	objptr, #2
1700c     F2 00 48 FC | 	wrbyte	#0, objptr
17010                 | ' repeat i from 0 to 111
17010     00 20 06 F6 | 	mov	local02, #0
17014     F8 E5 05 F1 | 	add	objptr, #504
17018     97 1A 48 FB | 	callpa	#(@LR__1732-@LR__1730)>>2,fcache_load_ptr_
1701c                 | LR__1730
1701c                 | '   cursor[i]:=0
1701c     10 23 02 F6 | 	mov	local03, local02
17020     F2 22 02 F1 | 	add	local03, objptr
17024     11 01 48 FC | 	wrbyte	#0, local03
17028     01 20 06 F1 | 	add	local02, #1
1702c     70 20 56 F2 | 	cmps	local02, #112 wc
17030     E8 FF 9F CD |  if_b	jmp	#LR__1730
17034                 | ' repeat i from 112 to 127
17034     70 20 06 F6 | 	mov	local02, #112
17038                 | LR__1731
17038                 | '   cursor[i]:=color  
17038     10 23 02 F6 | 	mov	local03, local02
1703c     F2 22 02 F1 | 	add	local03, objptr
17040     11 1F 42 FC | 	wrbyte	local01, local03
17044     01 20 06 F1 | 	add	local02, #1
17048     80 20 16 F2 | 	cmp	local02, #128 wc
1704c     E8 FF 9F CD |  if_b	jmp	#LR__1731
17050                 | LR__1732
17050                 | ' 'repeat i from 0 to 127
17050                 | ' '  if ((i/8)//2)
17050                 | ' '    cursor[i]:=15
17050                 | ' '  else
17050                 | ' '    cursor[i]:=0
17050                 | ' '  if i>=120    
17050                 | ' '    cursor[i]:=40
17050                 | ' setspriteptr(17,@cursor)
17050     F2 14 02 F6 | 	mov	arg02, objptr
17054     01 00 00 FF 
17058     32 E4 85 F1 | 	sub	objptr, ##562
1705c     11 12 06 F6 | 	mov	arg01, #17
17060     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17064                 | ' setspritesize(17,8,16)
17064     11 12 06 F6 | 	mov	arg01, #17
17068     08 14 06 F6 | 	mov	arg02, #8
1706c     10 16 06 F6 | 	mov	arg03, #16
17070     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
17074                 | ' setspritepos(17,0,0)
17074     11 12 06 F6 | 	mov	arg01, #17
17078     00 14 06 F6 | 	mov	arg02, #0
1707c     00 16 06 F6 | 	mov	arg03, #0
17080     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
17084     A7 F0 03 F6 | 	mov	ptra, fp
17088     B2 00 A0 FD | 	call	#popregs_
1708c                 | _hg010b_spin2_initcursor_ret
1708c     2D 00 64 FD | 	ret
17090                 | 
17090                 | ' 
17090                 | '  
17090                 | ' pub setcursorcolor(color) |i
17090                 | _hg010b_spin2_setcursorcolor
17090                 | ' 
17090                 | ' 
17090                 | ' repeat i from 0 to 111
17090     00 00 06 F6 | 	mov	_var01, #0
17094     01 00 00 FF 
17098     32 E4 05 F1 | 	add	objptr, ##562
1709c     97 1A 48 FB | 	callpa	#(@LR__1742-@LR__1740)>>2,fcache_load_ptr_
170a0                 | LR__1740
170a0                 | '   cursor[i]:=0
170a0     00 03 02 F6 | 	mov	_var02, _var01
170a4     F2 02 02 F1 | 	add	_var02, objptr
170a8     01 01 48 FC | 	wrbyte	#0, _var02
170ac     01 00 06 F1 | 	add	_var01, #1
170b0     70 00 56 F2 | 	cmps	_var01, #112 wc
170b4     E8 FF 9F CD |  if_b	jmp	#LR__1740
170b8                 | ' repeat i from 112 to 127
170b8     70 00 06 F6 | 	mov	_var01, #112
170bc                 | LR__1741
170bc                 | '   cursor[i]:=color  
170bc     00 03 02 F6 | 	mov	_var02, _var01
170c0     F2 02 02 F1 | 	add	_var02, objptr
170c4     01 13 42 FC | 	wrbyte	arg01, _var02
170c8     01 00 06 F1 | 	add	_var01, #1
170cc     80 00 16 F2 | 	cmp	_var01, #128 wc
170d0     E8 FF 9F CD |  if_b	jmp	#LR__1741
170d4                 | LR__1742
170d4     01 00 00 FF 
170d8     32 E4 85 F1 | 	sub	objptr, ##562
170dc                 | _hg010b_spin2_setcursorcolor_ret
170dc     2D 00 64 FD | 	ret
170e0                 | 
170e0                 | '  
170e0                 | ' 
170e0                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
170e0                 | _hg010b_spin2_setmode
170e0     02 4A 05 F6 | 	mov	COUNT_, #2
170e4     A8 00 A0 FD | 	call	#pushregs_
170e8                 | ' 
170e8                 | ' 
170e8                 | ' dl_ptr:=@emptydl[0]
170e8     01 00 00 FF 
170ec     19 E4 05 F1 | 	add	objptr, ##537
170f0     F2 64 02 F6 | 	mov	muldivb_, objptr
170f4     FD E5 85 F1 | 	sub	objptr, #509
170f8     F2 64 62 FC | 	wrlong	muldivb_, objptr
170fc                 | ' 
170fc                 | ' if cog>0 
170fc     10 E4 05 F1 | 	add	objptr, #16
17100     F2 64 02 FB | 	rdlong	muldivb_, objptr
17104     2C E4 85 F1 | 	sub	objptr, #44
17108     01 64 56 F2 | 	cmps	muldivb_, #1 wc
1710c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1710c     01 12 06 36 |  if_ae	mov	arg01, #1
17110     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
17114                 | ' xres:=1024
17114     01 00 00 FF 
17118     22 E4 05 F1 | 	add	objptr, ##546
1711c     02 00 80 FF 
17120     F2 00 68 FC | 	wrlong	##1024, objptr
17124                 | ' yres:=576  
17124     04 E4 05 F1 | 	add	objptr, #4
17128     01 00 80 FF 
1712c     F2 80 68 FC | 	wrlong	##576, objptr
17130                 | ' ppl:=(timings[3])
17130     10 00 00 FF 
17134     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
17138     F7 64 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
1713c     51 E5 85 F1 | 	sub	objptr, #337
17140     F2 64 62 FC | 	wrlong	muldivb_, objptr
17144                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
17144     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
17148     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1714c     01 1E 66 F0 | 	shl	local01, #1
17150     80 E4 85 F1 | 	sub	objptr, #128
17154     F2 1E 62 FC | 	wrlong	local01, objptr
17158                 | ' cpl1:=cpl '' todo remove
17158     04 E4 05 F1 | 	add	objptr, #4
1715c     F2 1E 62 FC | 	wrlong	local01, objptr
17160                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
17160     02 00 00 FF 
17164     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
17168     41 E4 85 F1 | 	sub	objptr, #65
1716c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
17170                 | ' repeat i from 0 to 3
17170     00 20 06 F6 | 	mov	local02, #0
17174     02 00 00 FF 
17178     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1717c     08 E4 05 F1 | 	add	objptr, #8
17180     97 20 48 FB | 	callpa	#(@LR__1751-@LR__1750)>>2,fcache_load_ptr_
17184                 | LR__1750
17184                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
17184     10 1F 02 F6 | 	mov	local01, local02
17188     02 1E 66 F0 | 	shl	local01, #2
1718c     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
17190     F2 64 02 FB | 	rdlong	muldivb_, objptr
17194     11 64 66 F0 | 	shl	muldivb_, #17
17198     0F 1F 02 FB | 	rdlong	local01, local01
1719c     32 1F 02 F1 | 	add	local01, muldivb_
171a0     80 40 38 FF 
171a4     00 1E 06 F1 | 	add	local01, ##1887502336
171a8     10 65 02 F6 | 	mov	muldivb_, local02
171ac     02 64 66 F0 | 	shl	muldivb_, #2
171b0     F7 64 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
171b4     32 1F 62 FC | 	wrlong	local01, muldivb_
171b8     01 20 06 F1 | 	add	local02, #1
171bc     04 20 56 F2 | 	cmps	local02, #4 wc
171c0     C0 FF 9F CD |  if_b	jmp	#LR__1750
171c4                 | LR__1751
171c4     20 E4 85 F1 | 	sub	objptr, #32
171c8                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
171c8     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
171cc     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
171d0     14 1E 66 FC | 	wrlong	local01, #20
171d4                 | ' hubset(timings[10])
171d4     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
171d8     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
171dc     10 00 00 FF 
171e0     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
171e4     00 12 62 FD | 	hubset	arg01
171e8                 | ' waitms(1)                                                   	' wait for stabilization
171e8     01 12 06 F6 | 	mov	arg01, #1
171ec     3C 25 B0 FD | 	call	#__system___waitms
171f0     10 00 00 FF 
171f4     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
171f8     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
171fc     5D E4 05 F1 | 	add	objptr, #93
17200     F2 20 62 FC | 	wrlong	local02, objptr
17204     10 1F 52 F6 | 	abs	local01, local02 wc
17208     04 1E 46 F0 | 	shr	local01, #4
1720c     0F 1F 82 F6 | 	negc	local01, local01
17210     9C E4 05 F1 | 	add	objptr, #156
17214     F2 1E 62 FC | 	wrlong	local01, objptr
17218     A4 E4 85 F1 | 	sub	objptr, #164
1721c     F2 20 02 FB | 	rdlong	local02, objptr
17220     08 E4 05 F1 | 	add	objptr, #8
17224     F2 1E 02 FB | 	rdlong	local01, objptr
17228     0F 21 02 FD | 	qmul	local02, local01
1722c                 | ' lines:=timings[11]
1722c                 | ' t_lines:=lines/16
1722c                 | ' buflen:=cpl*lines						' framebuffer length in longs
1722c     29 E4 85 F1 | 	sub	objptr, #41
17230                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
17230     19 1E C6 F9 | 	decod	local01, #25
17234                 | ' mode_ptr:=@timings						' set pointers to timings
17234     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
17238                 | ' graphmode:=1024+512+192+48							' det global variable
17238                 | ' makedl(graphmode)							' make a DL for the mode
17238     03 00 00 FF 
1723c     F0 12 06 F6 | 	mov	arg01, ##1776
17240     18 20 62 FD | 	getqx	local02
17244     F2 20 62 FC | 	wrlong	local02, objptr
17248     34 E4 85 F1 | 	sub	objptr, #52
1724c     02 20 66 F0 | 	shl	local02, #2
17250     10 1F 82 F1 | 	sub	local01, local02
17254     F2 1E 62 FC | 	wrlong	local01, objptr
17258     14 E4 05 F1 | 	add	objptr, #20
1725c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
17260     79 E4 05 F1 | 	add	objptr, #121
17264     03 00 80 FF 
17268     F2 E0 69 FC | 	wrlong	##1776, objptr
1726c     8D E4 85 F1 | 	sub	objptr, #141
17270     10 00 00 FF 
17274     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
17278     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
1727c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1727c     F2 1E 02 FB | 	rdlong	local01, objptr
17280     D9 E4 05 F1 | 	add	objptr, #217
17284     F2 1E 62 FC | 	wrlong	local01, objptr
17288                 | ' s_font_ptr:=font_ptr
17288     D5 E4 85 F1 | 	sub	objptr, #213
1728c     F2 1E 02 FB | 	rdlong	local01, objptr
17290     D9 E4 05 F1 | 	add	objptr, #217
17294     F2 1E 62 FC | 	wrlong	local01, objptr
17298                 | ' s_lines:=lines
17298     80 E4 85 F1 | 	sub	objptr, #128
1729c     F2 1E 02 FB | 	rdlong	local01, objptr
172a0     84 E4 05 F1 | 	add	objptr, #132
172a4     F2 1E 62 FC | 	wrlong	local01, objptr
172a8                 | ' s_buflen:=buflen
172a8     AD E4 85 F1 | 	sub	objptr, #173
172ac     F2 1E 02 FB | 	rdlong	local01, objptr
172b0     B5 E4 05 F1 | 	add	objptr, #181
172b4     F2 1E 62 FC | 	wrlong	local01, objptr
172b8                 | ' s_cpl:=cpl
172b8     94 E4 85 F1 | 	sub	objptr, #148
172bc     F2 1E 02 FB | 	rdlong	local01, objptr
172c0     90 E4 05 F1 | 	add	objptr, #144
172c4     F2 1E 62 FC | 	wrlong	local01, objptr
172c8                 | ' s_cpl1:=cpl
172c8     90 E4 85 F1 | 	sub	objptr, #144
172cc     F2 1E 02 FB | 	rdlong	local01, objptr
172d0     98 E4 05 F1 | 	add	objptr, #152
172d4     F2 1E 62 FC | 	wrlong	local01, objptr
172d8                 | ' st_lines:=t_lines
172d8     0C E4 05 F1 | 	add	objptr, #12
172dc     F2 1E 02 FB | 	rdlong	local01, objptr
172e0     04 E4 05 F1 | 	add	objptr, #4
172e4     F2 1E 62 FC | 	wrlong	local01, objptr
172e8                 | ' ppl:=ppl/xzoom  
172e8     28 E4 85 F1 | 	sub	objptr, #40
172ec     F2 62 02 FB | 	rdlong	muldiva_, objptr
172f0     2C E4 05 F1 | 	add	objptr, #44
172f4     F2 64 02 FB | 	rdlong	muldivb_, objptr
172f8     01 E5 85 F1 | 	sub	objptr, #257
172fc     BA 00 A0 FD | 	call	#divide_
17300     D5 E4 05 F1 | 	add	objptr, #213
17304     F2 64 62 FC | 	wrlong	muldivb_, objptr
17308                 | ' s_ppl:=ppl
17308     1C E4 05 F1 | 	add	objptr, #28
1730c     F2 64 62 FC | 	wrlong	muldivb_, objptr
17310     F1 E4 85 F1 | 	sub	objptr, #241
17314                 | ' waitms(20)							' wait 
17314     14 12 06 F6 | 	mov	arg01, #20
17318     10 24 B0 FD | 	call	#__system___waitms
1731c     A7 F0 03 F6 | 	mov	ptra, fp
17320     B2 00 A0 FD | 	call	#popregs_
17324                 | _hg010b_spin2_setmode_ret
17324     2D 00 64 FD | 	ret
17328                 | 
17328                 | ' 
17328                 | ' 
17328                 | ' '****************************************************************************************************************
17328                 | ' '                                                                                                             	*
17328                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
17328                 | ' '                                                                                                             	*
17328                 | ' '****************************************************************************************************************
17328                 | ' 
17328                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
17328                 | _hg010b_spin2_makedl
17328                 | ' 
17328                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
17328                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
17328                 | ' repeat i from 0 to 11                                                           ' clear DL
17328     00 00 06 F6 | 	mov	_var01, #0
1732c     E9 E5 05 F1 | 	add	objptr, #489
17330     97 0E 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
17334                 | LR__1760
17334                 | '   displaylist[i]:=0 
17334     00 03 02 F6 | 	mov	_var02, _var01
17338     02 02 66 F0 | 	shl	_var02, #2
1733c     F2 02 02 F1 | 	add	_var02, objptr
17340     01 01 68 FC | 	wrlong	#0, _var02
17344     01 00 06 F1 | 	add	_var01, #1
17348     0C 00 56 F2 | 	cmps	_var01, #12 wc
1734c     E4 FF 9F CD |  if_b	jmp	#LR__1760
17350                 | LR__1761
17350                 | '                         ' 
17350                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
17350     8C E5 85 F1 | 	sub	objptr, #396
17354     F2 02 02 FB | 	rdlong	_var02, objptr
17358     14 02 66 F0 | 	shl	_var02, #20
1735c     01 02 06 F1 | 	add	_var02, #1
17360     04 E4 85 F1 | 	sub	objptr, #4
17364     F2 00 02 FB | 	rdlong	_var01, objptr
17368     02 00 66 F0 | 	shl	_var01, #2
1736c     04 00 66 F0 | 	shl	_var01, #4
17370     00 03 02 F1 | 	add	_var02, _var01
17374     90 E5 05 F1 | 	add	objptr, #400
17378     F2 02 62 FC | 	wrlong	_var02, objptr
1737c     E9 E5 85 F1 | 	sub	objptr, #489
17380                 | ' displaylist[1]:=buf_ptr<<4+%10  
17380     F2 02 02 FB | 	rdlong	_var02, objptr
17384     04 02 66 F0 | 	shl	_var02, #4
17388     02 02 06 F1 | 	add	_var02, #2
1738c     ED E5 05 F1 | 	add	objptr, #493
17390     F2 02 62 FC | 	wrlong	_var02, objptr
17394                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
17394     04 E4 85 F1 | 	sub	objptr, #4
17398     F2 02 02 F6 | 	mov	_var02, objptr
1739c     CD E5 85 F1 | 	sub	objptr, #461
173a0     F2 02 62 FC | 	wrlong	_var02, objptr
173a4     1C E4 85 F1 | 	sub	objptr, #28
173a8                 | _hg010b_spin2_makedl_ret
173a8     2D 00 64 FD | 	ret
173ac                 | 
173ac                 | ' 
173ac                 | ' 
173ac                 | ' '****************************************************************************************************************
173ac                 | ' '                                                                        					*
173ac                 | ' '  Graphic primitives                                                    					*
173ac                 | ' '                                                                        					*
173ac                 | ' '****************************************************************************************************************
173ac                 | ' 
173ac                 | ' pub setspriteptr(num,ptr)
173ac                 | _hg010b_spin2_setspriteptr
173ac                 | ' long[@spr1ptr+12*num]:=ptr
173ac     0D E5 05 F1 | 	add	objptr, #269
173b0     F2 00 02 F6 | 	mov	_var01, objptr
173b4     09 03 02 F6 | 	mov	_var02, arg01
173b8     01 02 66 F0 | 	shl	_var02, #1
173bc     09 03 02 F1 | 	add	_var02, arg01
173c0     02 02 66 F0 | 	shl	_var02, #2
173c4     01 01 02 F1 | 	add	_var01, _var02
173c8     00 15 62 FC | 	wrlong	arg02, _var01
173cc     0D E5 85 F1 | 	sub	objptr, #269
173d0                 | _hg010b_spin2_setspriteptr_ret
173d0     2D 00 64 FD | 	ret
173d4                 | 
173d4                 | ' 
173d4                 | ' pub setspritepos(num,x,y)
173d4                 | _hg010b_spin2_setspritepos
173d4                 | ' word[@spr1ptr+12*num+4]:=x
173d4     0D E5 05 F1 | 	add	objptr, #269
173d8     F2 00 02 F6 | 	mov	_var01, objptr
173dc     09 03 02 F6 | 	mov	_var02, arg01
173e0     01 02 66 F0 | 	shl	_var02, #1
173e4     09 03 02 F1 | 	add	_var02, arg01
173e8     02 02 66 F0 | 	shl	_var02, #2
173ec     01 01 02 F1 | 	add	_var01, _var02
173f0     04 00 06 F1 | 	add	_var01, #4
173f4     00 15 52 FC | 	wrword	arg02, _var01
173f8                 | ' word[@spr1ptr+12*num+6]:=y
173f8     F2 00 02 F6 | 	mov	_var01, objptr
173fc     09 03 02 F6 | 	mov	_var02, arg01
17400     01 02 66 F0 | 	shl	_var02, #1
17404     09 03 02 F1 | 	add	_var02, arg01
17408     02 02 66 F0 | 	shl	_var02, #2
1740c     01 01 02 F1 | 	add	_var01, _var02
17410     06 00 06 F1 | 	add	_var01, #6
17414     00 17 52 FC | 	wrword	arg03, _var01
17418     0D E5 85 F1 | 	sub	objptr, #269
1741c                 | _hg010b_spin2_setspritepos_ret
1741c     2D 00 64 FD | 	ret
17420                 | 
17420                 | ' 
17420                 | ' pub setspritesize(num,w,h)
17420                 | _hg010b_spin2_setspritesize
17420                 | ' word[@spr1ptr+12*num+8]:=w
17420     0D E5 05 F1 | 	add	objptr, #269
17424     F2 00 02 F6 | 	mov	_var01, objptr
17428     09 03 02 F6 | 	mov	_var02, arg01
1742c     01 02 66 F0 | 	shl	_var02, #1
17430     09 03 02 F1 | 	add	_var02, arg01
17434     02 02 66 F0 | 	shl	_var02, #2
17438     01 01 02 F1 | 	add	_var01, _var02
1743c     08 00 06 F1 | 	add	_var01, #8
17440     00 15 52 FC | 	wrword	arg02, _var01
17444                 | ' word[@spr1ptr+12*num+10]:=h
17444     F2 00 02 F6 | 	mov	_var01, objptr
17448     09 03 02 F6 | 	mov	_var02, arg01
1744c     01 02 66 F0 | 	shl	_var02, #1
17450     09 03 02 F1 | 	add	_var02, arg01
17454     02 02 66 F0 | 	shl	_var02, #2
17458     01 01 02 F1 | 	add	_var01, _var02
1745c     0A 00 06 F1 | 	add	_var01, #10
17460     00 17 52 FC | 	wrword	arg03, _var01
17464     0D E5 85 F1 | 	sub	objptr, #269
17468                 | _hg010b_spin2_setspritesize_ret
17468     2D 00 64 FD | 	ret
1746c                 | 
1746c                 | ' 
1746c                 | ' 
1746c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1746c                 | ' 
1746c                 | ' 
1746c                 | ' pub putpixel(x,y,c)
1746c                 | _hg010b_spin2_putpixel
1746c     04 4A 05 F6 | 	mov	COUNT_, #4
17470     A8 00 A0 FD | 	call	#pushregs_
17474     09 1F 02 F6 | 	mov	local01, arg01
17478                 | ' 
17478                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
17478     00 20 06 F6 | 	mov	local02, #0
1747c     00 1E 56 F2 | 	cmps	local01, #0 wc
17480     01 20 66 36 |  if_ae	neg	local02, #1
17484     E5 E4 05 F1 | 	add	objptr, #229
17488     F2 1A 02 FB | 	rdlong	arg05, objptr
1748c     02 1A 66 F0 | 	shl	arg05, #2
17490     0D 1F 52 F2 | 	cmps	local01, arg05 wc
17494     11 23 A2 F1 | 	subx	local03, local03
17498     11 21 02 F5 | 	and	local02, local03
1749c     00 22 06 F6 | 	mov	local03, #0
174a0     00 14 56 F2 | 	cmps	arg02, #0 wc
174a4     01 22 66 36 |  if_ae	neg	local03, #1
174a8     11 21 02 F5 | 	and	local02, local03
174ac     04 E4 85 F1 | 	sub	objptr, #4
174b0     F2 22 02 FB | 	rdlong	local03, objptr
174b4     E1 E4 85 F1 | 	sub	objptr, #225
174b8     11 15 52 F2 | 	cmps	arg02, local03 wc
174bc     12 25 A2 F1 | 	subx	local04, local04
174c0     12 21 CA F7 | 	test	local02, local04 wz
174c4     48 00 90 AD |  if_e	jmp	#LR__1770
174c8     D9 E4 05 F1 | 	add	objptr, #217
174cc     F2 12 02 FB | 	rdlong	arg01, objptr
174d0     14 E4 05 F1 | 	add	objptr, #20
174d4     F2 24 02 FB | 	rdlong	local04, objptr
174d8     02 24 66 F0 | 	shl	local04, #2
174dc     0A 25 02 FD | 	qmul	local04, arg02
174e0                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
174e0     0B 15 02 F6 | 	mov	arg02, arg03
174e4     01 16 06 F6 | 	mov	arg03, #1
174e8     00 18 06 F6 | 	mov	arg04, #0
174ec     01 1A 06 F6 | 	mov	arg05, #1
174f0     0A 00 00 FF 
174f4     D3 E5 05 F1 | 	add	objptr, ##5587
174f8     18 24 62 FD | 	getqx	local04
174fc     0F 25 02 F1 | 	add	local04, local01
17500     12 13 02 F1 | 	add	arg01, local04
17504     FC 14 B0 FD | 	call	#_psram_spin2_fill
17508     0B 00 00 FF 
1750c     C0 E4 85 F1 | 	sub	objptr, ##5824
17510                 | LR__1770
17510     A7 F0 03 F6 | 	mov	ptra, fp
17514     B2 00 A0 FD | 	call	#popregs_
17518                 | _hg010b_spin2_putpixel_ret
17518     2D 00 64 FD | 	ret
1751c                 | 
1751c                 | ' 
1751c                 | ' pub putpixel2(x,y,c)
1751c                 | _hg010b_spin2_putpixel2
1751c     02 4A 05 F6 | 	mov	COUNT_, #2
17520     A8 00 A0 FD | 	call	#pushregs_
17524     D9 E4 05 F1 | 	add	objptr, #217
17528     F2 1E 02 FB | 	rdlong	local01, objptr
1752c     14 E4 05 F1 | 	add	objptr, #20
17530     F2 1A 02 FB | 	rdlong	arg05, objptr
17534     02 1A 66 F0 | 	shl	arg05, #2
17538     0A 1B 02 FD | 	qmul	arg05, arg02
1753c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1753c     0B 15 02 F6 | 	mov	arg02, arg03
17540     01 16 06 F6 | 	mov	arg03, #1
17544     00 18 06 F6 | 	mov	arg04, #0
17548     01 1A 06 F6 | 	mov	arg05, #1
1754c     0A 00 00 FF 
17550     D3 E5 05 F1 | 	add	objptr, ##5587
17554     18 20 62 FD | 	getqx	local02
17558     09 21 02 F1 | 	add	local02, arg01
1755c     10 1F 02 F1 | 	add	local01, local02
17560     0F 13 02 F6 | 	mov	arg01, local01
17564     9C 14 B0 FD | 	call	#_psram_spin2_fill
17568     0B 00 00 FF 
1756c     C0 E4 85 F1 | 	sub	objptr, ##5824
17570     A7 F0 03 F6 | 	mov	ptra, fp
17574     B2 00 A0 FD | 	call	#popregs_
17578                 | _hg010b_spin2_putpixel2_ret
17578     2D 00 64 FD | 	ret
1757c                 | 
1757c                 | ' 
1757c                 | ' pub getpixel2(x,y): c 
1757c                 | _hg010b_spin2_getpixel2
1757c     02 4A 05 F6 | 	mov	COUNT_, #2
17580     A8 00 A0 FD | 	call	#pushregs_
17584     0C F0 07 F1 | 	add	ptra, #12
17588     04 4E 05 F1 | 	add	fp, #4
1758c     A7 12 62 FC | 	wrlong	arg01, fp
17590     04 4E 05 F1 | 	add	fp, #4
17594     A7 14 62 FC | 	wrlong	arg02, fp
17598     08 4E 85 F1 | 	sub	fp, #8
1759c     A7 00 68 FC | 	wrlong	#0, fp
175a0     A7 12 02 F6 | 	mov	arg01, fp
175a4     D9 E4 05 F1 | 	add	objptr, #217
175a8     F2 14 02 FB | 	rdlong	arg02, objptr
175ac     14 E4 05 F1 | 	add	objptr, #20
175b0     F2 16 02 FB | 	rdlong	arg03, objptr
175b4     02 16 66 F0 | 	shl	arg03, #2
175b8     08 4E 05 F1 | 	add	fp, #8
175bc     A7 FA 01 FB | 	rdlong	result1, fp
175c0     FD 16 02 FD | 	qmul	arg03, result1
175c4                 | ' 
175c4                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
175c4     04 4E 85 F1 | 	sub	fp, #4
175c8     A7 1E 02 FB | 	rdlong	local01, fp
175cc     04 4E 85 F1 | 	sub	fp, #4
175d0     01 16 06 F6 | 	mov	arg03, #1
175d4     0A 00 00 FF 
175d8     D3 E5 05 F1 | 	add	objptr, ##5587
175dc     18 20 62 FD | 	getqx	local02
175e0     0F 21 02 F1 | 	add	local02, local01
175e4     10 15 02 F1 | 	add	arg02, local02
175e8     E0 12 B0 FD | 	call	#_psram_spin2_read1
175ec     0B 00 00 FF 
175f0     C0 E4 85 F1 | 	sub	objptr, ##5824
175f4                 | ' return c
175f4     A7 FA 01 FB | 	rdlong	result1, fp
175f8     A7 F0 03 F6 | 	mov	ptra, fp
175fc     B2 00 A0 FD | 	call	#popregs_
17600                 | _hg010b_spin2_getpixel2_ret
17600     2D 00 64 FD | 	ret
17604                 | 
17604                 | '   
17604                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
17604                 | ' 
17604                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
17604                 | _hg010b_spin2_fastline
17604     02 4A 05 F6 | 	mov	COUNT_, #2
17608     A8 00 A0 FD | 	call	#pushregs_
1760c     09 1F 02 F6 | 	mov	local01, arg01
17610     0A 21 02 F6 | 	mov	local02, arg02
17614                 | ' 
17614                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
17614     00 16 56 F2 | 	cmps	arg03, #0 wc
17618     F4 00 90 CD |  if_b	jmp	#LR__1780
1761c     01 00 00 FF 
17620     26 E4 05 F1 | 	add	objptr, ##550
17624     F2 1A 02 FB | 	rdlong	arg05, objptr
17628     01 00 00 FF 
1762c     26 E4 85 F1 | 	sub	objptr, ##550
17630     0D 17 52 F2 | 	cmps	arg03, arg05 wc
17634     D8 00 90 3D |  if_ae	jmp	#LR__1780
17638     00 1E 56 F2 | 	cmps	local01, #0 wc
1763c     00 20 56 C2 |  if_b	cmps	local02, #0 wc
17640     CC 00 90 CD |  if_b	jmp	#LR__1780
17644     01 00 00 FF 
17648     22 E4 05 F1 | 	add	objptr, ##546
1764c     F2 1A 02 FB | 	rdlong	arg05, objptr
17650     01 00 00 FF 
17654     22 E4 85 F1 | 	sub	objptr, ##546
17658     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1765c     01 00 00 1F 
17660     22 E4 05 11 |  if_a	add	objptr, ##546
17664     F2 12 02 1B |  if_a	rdlong	arg01, objptr
17668     01 00 00 1F 
1766c     22 E4 85 11 |  if_a	sub	objptr, ##546
17670     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
17674                 | '   return
17674     98 00 90 1D |  if_a	jmp	#LR__1780
17678     10 1F 5A F2 | 	cmps	local01, local02 wcz
1767c     0F 1B 02 16 |  if_a	mov	arg05, local01
17680     10 1F 02 16 |  if_a	mov	local01, local02
17684     0D 21 02 16 |  if_a	mov	local02, arg05
17688     00 1E 56 F2 | 	cmps	local01, #0 wc
1768c     00 1E 06 C6 |  if_b	mov	local01, #0
17690     01 00 00 FF 
17694     22 E4 05 F1 | 	add	objptr, ##546
17698     F2 1A 02 FB | 	rdlong	arg05, objptr
1769c     01 00 00 FF 
176a0     22 E4 85 F1 | 	sub	objptr, ##546
176a4     0D 21 52 F2 | 	cmps	local02, arg05 wc
176a8     01 00 00 3F 
176ac     22 E4 05 31 |  if_ae	add	objptr, ##546
176b0     F2 20 02 3B |  if_ae	rdlong	local02, objptr
176b4     01 00 00 3F 
176b8     22 E4 85 31 |  if_ae	sub	objptr, ##546
176bc     D9 E4 05 F1 | 	add	objptr, #217
176c0     F2 12 02 FB | 	rdlong	arg01, objptr
176c4     14 E4 05 F1 | 	add	objptr, #20
176c8     F2 1A 02 FB | 	rdlong	arg05, objptr
176cc     02 1A 66 F0 | 	shl	arg05, #2
176d0     0B 1B 02 FD | 	qmul	arg05, arg03
176d4                 | ' if x1>x2
176d4                 | '   x1,x2:=x2,x1
176d4                 | ' if x1<0 
176d4                 | '   x1:=0
176d4                 | ' if x2>=xres
176d4                 | '   x2:=xres-1  
176d4     01 20 86 31 |  if_ae	sub	local02, #1
176d8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
176d8     01 16 06 F6 | 	mov	arg03, #1
176dc     10 17 02 F1 | 	add	arg03, local02
176e0     0F 17 82 F1 | 	sub	arg03, local01
176e4     0C 15 02 F6 | 	mov	arg02, arg04
176e8     00 18 06 F6 | 	mov	arg04, #0
176ec     01 1A 06 F6 | 	mov	arg05, #1
176f0     0A 00 00 FF 
176f4     D3 E5 05 F1 | 	add	objptr, ##5587
176f8     18 20 62 FD | 	getqx	local02
176fc     0F 21 02 F1 | 	add	local02, local01
17700     10 13 02 F1 | 	add	arg01, local02
17704     FC 12 B0 FD | 	call	#_psram_spin2_fill
17708     0B 00 00 FF 
1770c     C0 E4 85 F1 | 	sub	objptr, ##5824
17710                 | LR__1780
17710     A7 F0 03 F6 | 	mov	ptra, fp
17714     B2 00 A0 FD | 	call	#popregs_
17718                 | _hg010b_spin2_fastline_ret
17718     2D 00 64 FD | 	ret
1771c                 | 
1771c                 | ' 
1771c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1771c                 | _hg010b_spin2_draw
1771c     0E 4A 05 F6 | 	mov	COUNT_, #14
17720     A8 00 A0 FD | 	call	#pushregs_
17724     09 1F 02 F6 | 	mov	local01, arg01
17728     0A 21 02 F6 | 	mov	local02, arg02
1772c     0B 23 02 F6 | 	mov	local03, arg03
17730     0C 25 02 F6 | 	mov	local04, arg04
17734     0D 27 02 F6 | 	mov	local05, arg05
17738                 | ' 
17738                 | ' if (y1==y2)
17738     12 21 0A F2 | 	cmp	local02, local04 wz
1773c     18 00 90 5D |  if_ne	jmp	#LR__1790
17740                 | '   fastline(x1,x2,y1,c)
17740     0F 13 02 F6 | 	mov	arg01, local01
17744     11 15 02 F6 | 	mov	arg02, local03
17748     10 17 02 F6 | 	mov	arg03, local02
1774c     13 19 02 F6 | 	mov	arg04, local05
17750     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
17754     F8 00 90 FD | 	jmp	#LR__1796
17758                 | LR__1790
17758                 | ' else  
17758                 | '   x:=x1
17758     0F 29 02 F6 | 	mov	local06, local01
1775c                 | '   y:=y1
1775c     10 2B 02 F6 | 	mov	local07, local02
17760                 | ' 
17760                 | '   if (x1<x2) 
17760     11 1F 52 F2 | 	cmps	local01, local03 wc
17764                 | '     xi:=1
17764     01 2C 06 C6 |  if_b	mov	local08, #1
17768                 | '     dx:=x2-x1
17768     11 2F 02 C6 |  if_b	mov	local09, local03
1776c     0F 2F 82 C1 |  if_b	sub	local09, local01
17770                 | '   else
17770                 | '     xi:=-1
17770     01 2C 66 36 |  if_ae	neg	local08, #1
17774                 | '     dx:=x1-x2
17774     11 1F 82 31 |  if_ae	sub	local01, local03
17778     0F 2F 02 36 |  if_ae	mov	local09, local01
1777c                 | '   
1777c                 | '   if (y1<y2) 
1777c     12 21 52 F2 | 	cmps	local02, local04 wc
17780                 | '     yi:=1
17780     01 30 06 C6 |  if_b	mov	local10, #1
17784                 | '     dy:=y2-y1
17784     12 33 02 C6 |  if_b	mov	local11, local04
17788     10 33 82 C1 |  if_b	sub	local11, local02
1778c                 | '   else
1778c                 | '     yi:=-1
1778c     01 30 66 36 |  if_ae	neg	local10, #1
17790                 | '     dy:=y1-y2
17790     12 21 82 31 |  if_ae	sub	local02, local04
17794     10 33 02 36 |  if_ae	mov	local11, local02
17798                 | ' 
17798                 | '   putpixel(x,y,c)
17798     13 17 02 F6 | 	mov	arg03, local05
1779c     14 13 02 F6 | 	mov	arg01, local06
177a0     15 15 02 F6 | 	mov	arg02, local07
177a4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
177a8                 | ' 
177a8                 | '   if (dx>dy)
177a8     19 2F 5A F2 | 	cmps	local09, local11 wcz
177ac     50 00 90 ED |  if_be	jmp	#LR__1792
177b0                 | '     ai:=(dy-dx)*2
177b0     19 35 02 F6 | 	mov	local12, local11
177b4     17 35 82 F1 | 	sub	local12, local09
177b8     01 34 66 F0 | 	shl	local12, #1
177bc                 | '     bi:=dy*2
177bc     01 32 66 F0 | 	shl	local11, #1
177c0     19 37 02 F6 | 	mov	local13, local11
177c4                 | '     d:= bi-dx
177c4     1B 39 02 F6 | 	mov	local14, local13
177c8     17 39 82 F1 | 	sub	local14, local09
177cc                 | '     repeat while (x<>x2) 
177cc                 | LR__1791
177cc     11 29 0A F2 | 	cmp	local06, local03 wz
177d0     7C 00 90 AD |  if_e	jmp	#LR__1795
177d4                 | '       if (d>=0) 
177d4     00 38 56 F2 | 	cmps	local14, #0 wc
177d8                 | '         x+=xi
177d8     16 29 02 31 |  if_ae	add	local06, local08
177dc                 | '         y+=yi
177dc     18 2B 02 31 |  if_ae	add	local07, local10
177e0                 | '         d+=ai
177e0     1A 39 02 31 |  if_ae	add	local14, local12
177e4                 | '       else
177e4                 | '         d+=bi
177e4     1B 39 02 C1 |  if_b	add	local14, local13
177e8                 | '         x+=xi
177e8     16 29 02 C1 |  if_b	add	local06, local08
177ec                 | '       putpixel(x,y,c)
177ec     14 13 02 F6 | 	mov	arg01, local06
177f0     15 15 02 F6 | 	mov	arg02, local07
177f4     13 17 02 F6 | 	mov	arg03, local05
177f8     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
177fc     CC FF 9F FD | 	jmp	#LR__1791
17800                 | LR__1792
17800                 | '   else
17800                 | '     ai:=(dx-dy)*2
17800     17 35 02 F6 | 	mov	local12, local09
17804     19 35 82 F1 | 	sub	local12, local11
17808     01 34 66 F0 | 	shl	local12, #1
1780c                 | '     bi:=dx*2
1780c     01 2E 66 F0 | 	shl	local09, #1
17810     17 37 02 F6 | 	mov	local13, local09
17814                 | '     d:=bi-dy
17814     1B 39 02 F6 | 	mov	local14, local13
17818     19 39 82 F1 | 	sub	local14, local11
1781c                 | '     repeat while (y<>y2)
1781c                 | LR__1793
1781c     12 2B 0A F2 | 	cmp	local07, local04 wz
17820     2C 00 90 AD |  if_e	jmp	#LR__1794
17824                 | '       if (d>=0)
17824     00 38 56 F2 | 	cmps	local14, #0 wc
17828                 | '         x+=xi
17828     16 29 02 31 |  if_ae	add	local06, local08
1782c                 | '         y+=yi
1782c     18 2B 02 31 |  if_ae	add	local07, local10
17830                 | '         d+=ai
17830     1A 39 02 31 |  if_ae	add	local14, local12
17834                 | '       else
17834                 | '         d+=bi
17834     1B 39 02 C1 |  if_b	add	local14, local13
17838                 | '         y+=yi
17838     18 2B 02 C1 |  if_b	add	local07, local10
1783c                 | '       putpixel(x, y,c)
1783c     14 13 02 F6 | 	mov	arg01, local06
17840     15 15 02 F6 | 	mov	arg02, local07
17844     13 17 02 F6 | 	mov	arg03, local05
17848     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1784c     CC FF 9F FD | 	jmp	#LR__1793
17850                 | LR__1794
17850                 | LR__1795
17850                 | LR__1796
17850     A7 F0 03 F6 | 	mov	ptra, fp
17854     B2 00 A0 FD | 	call	#popregs_
17858                 | _hg010b_spin2_draw_ret
17858     2D 00 64 FD | 	ret
1785c                 | 
1785c                 | '  
1785c                 | ' pub fillpush(val) 
1785c                 | _hg010b_spin2_fillpush
1785c                 | ' fillstack[fillptr]:=val
1785c     0B 00 00 FF 
17860     B6 E4 05 F1 | 	add	objptr, ##5814
17864     F2 00 02 FB | 	rdlong	_var01, objptr
17868     02 00 66 F0 | 	shl	_var01, #2
1786c     0A 00 00 FF 
17870     00 E4 85 F1 | 	sub	objptr, ##5120
17874     F2 00 02 F1 | 	add	_var01, objptr
17878     00 13 62 FC | 	wrlong	arg01, _var01
1787c                 | ' fillptr+=1   
1787c     0A 00 00 FF 
17880     00 E4 05 F1 | 	add	objptr, ##5120
17884     F2 00 02 FB | 	rdlong	_var01, objptr
17888     01 00 06 F1 | 	add	_var01, #1
1788c     F2 00 62 FC | 	wrlong	_var01, objptr
17890     0B 00 00 FF 
17894     B6 E4 85 F1 | 	sub	objptr, ##5814
17898                 | _hg010b_spin2_fillpush_ret
17898     2D 00 64 FD | 	ret
1789c                 | 
1789c                 | ' 
1789c                 | '     
1789c                 | ' pub fillpop() : val
1789c                 | _hg010b_spin2_fillpop
1789c                 | ' 
1789c                 | ' fillptr-=1
1789c     0B 00 00 FF 
178a0     B6 E4 05 F1 | 	add	objptr, ##5814
178a4     F2 FA 01 FB | 	rdlong	result1, objptr
178a8     01 FA 85 F1 | 	sub	result1, #1
178ac     F2 FA 61 FC | 	wrlong	result1, objptr
178b0                 | ' if fillptr<0
178b0     0B 00 00 FF 
178b4     B6 E4 85 F1 | 	sub	objptr, ##5814
178b8     00 FA 55 F2 | 	cmps	result1, #0 wc
178bc                 | '   fillptr:=0
178bc     0B 00 00 CF 
178c0     B6 E4 05 C1 |  if_b	add	objptr, ##5814
178c4     F2 00 68 CC |  if_b	wrlong	#0, objptr
178c8     0B 00 00 CF 
178cc     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
178d0                 | '   val:=-12345
178d0     E7 FF 7F CF 
178d4     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
178d8     28 00 90 CD |  if_b	jmp	#LR__1800
178dc                 | ' else 
178dc                 | '   val:=fillstack[fillptr]
178dc     0B 00 00 FF 
178e0     B6 E4 05 F1 | 	add	objptr, ##5814
178e4     F2 00 02 FB | 	rdlong	_var01, objptr
178e8     02 00 66 F0 | 	shl	_var01, #2
178ec     0A 00 00 FF 
178f0     00 E4 85 F1 | 	sub	objptr, ##5120
178f4     F2 00 02 F1 | 	add	_var01, objptr
178f8     00 01 02 FB | 	rdlong	_var01, _var01
178fc     01 00 00 FF 
17900     B6 E4 85 F1 | 	sub	objptr, ##694
17904                 | LR__1800
17904                 | ' return val
17904     00 FB 01 F6 | 	mov	result1, _var01
17908                 | _hg010b_spin2_fillpop_ret
17908     2D 00 64 FD | 	ret
1790c                 | 
1790c                 | ' 
1790c                 | '       
1790c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1790c                 | _hg010b_spin2_fill
1790c     0B 4A 05 F6 | 	mov	COUNT_, #11
17910     A8 00 A0 FD | 	call	#pushregs_
17914                 | ' 
17914                 | ' newcolor:=newcolor & 255
17914     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
17918                 | ' oldcolor:=oldcolor & 255
17918     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1791c                 | ' 
1791c                 | ' if (oldcolor == newcolor) 
1791c     0F 21 0A F2 | 	cmp	local02, local01 wz
17920                 | '   return
17920     70 02 90 AD |  if_e	jmp	#LR__1819
17924                 | ' 
17924                 | ' fillptr:=0
17924     0B 00 00 FF 
17928     B6 E4 05 F1 | 	add	objptr, ##5814
1792c     F2 00 68 FC | 	wrlong	#0, objptr
17930                 | ' fillmax:=0
17930     04 E4 05 F1 | 	add	objptr, #4
17934     F2 00 68 FC | 	wrlong	#0, objptr
17938     0B 00 00 FF 
1793c     BA E4 85 F1 | 	sub	objptr, ##5818
17940                 | ' fillpush(x)
17940     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
17944                 | ' fillpush(y)
17944     0A 13 02 F6 | 	mov	arg01, arg02
17948     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1794c                 | ' y:=fillpop()
1794c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
17950     FD 22 02 F6 | 	mov	local03, result1
17954                 | ' x:=fillpop()
17954     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
17958     FD 24 02 F6 | 	mov	local04, result1
1795c                 | ' 'pinhigh(38)
1795c                 | ' repeat while (x>-1)       
1795c                 | LR__1810
1795c     00 24 56 F2 | 	cmps	local04, #0 wc
17960     30 02 90 CD |  if_b	jmp	#LR__1818
17964                 | '  ' pintoggle(39)
17964                 | '   x1 := x
17964     12 27 02 F6 | 	mov	local05, local04
17968                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
17968                 | LR__1811
17968     00 28 06 F6 | 	mov	local06, #0
1796c     00 2A 06 F6 | 	mov	local07, #0
17970     00 26 56 F2 | 	cmps	local05, #0 wc
17974     01 2A 66 36 |  if_ae	neg	local07, #1
17978     00 2A 0E F2 | 	cmp	local07, #0 wz
1797c     00 28 26 56 |  if_ne	not	local06, #0
17980     00 2C 06 F6 | 	mov	local08, #0
17984     00 2E 06 F6 | 	mov	local09, #0
17988     11 15 02 F6 | 	mov	arg02, local03
1798c     13 13 02 F6 | 	mov	arg01, local05
17990     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17994     10 FB 09 F2 | 	cmp	result1, local02 wz
17998     00 2E 26 A6 |  if_e	not	local09, #0
1799c     00 2E 0E F2 | 	cmp	local09, #0 wz
179a0     00 2C 26 56 |  if_ne	not	local08, #0
179a4     16 29 CA F7 | 	test	local06, local08 wz
179a8                 | '     x1--
179a8     01 26 86 51 |  if_ne	sub	local05, #1
179ac     B8 FF 9F 5D |  if_ne	jmp	#LR__1811
179b0                 | '   x1++
179b0     01 26 06 F1 | 	add	local05, #1
179b4                 | '   spanabove := 0
179b4     00 30 06 F6 | 	mov	local10, #0
179b8                 | '   spanbelow := 0
179b8     00 32 06 F6 | 	mov	local11, #0
179bc                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
179bc                 | LR__1812
179bc     00 28 06 F6 | 	mov	local06, #0
179c0     02 00 00 FF 
179c4     00 26 56 F2 | 	cmps	local05, ##1024 wc
179c8     00 28 26 C6 |  if_b	not	local06, #0
179cc     00 2C 06 F6 | 	mov	local08, #0
179d0     00 2E 06 F6 | 	mov	local09, #0
179d4     11 15 02 F6 | 	mov	arg02, local03
179d8     13 13 02 F6 | 	mov	arg01, local05
179dc     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
179e0     10 FB 09 F2 | 	cmp	result1, local02 wz
179e4     00 2E 26 A6 |  if_e	not	local09, #0
179e8     00 2E 0E F2 | 	cmp	local09, #0 wz
179ec     00 2C 26 56 |  if_ne	not	local08, #0
179f0     16 29 CA F7 | 	test	local06, local08 wz
179f4     88 01 90 AD |  if_e	jmp	#LR__1817
179f8                 | '     putpixel2 (x1,y, newcolor & 255)
179f8     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
179fc     13 13 02 F6 | 	mov	arg01, local05
17a00     11 15 02 F6 | 	mov	arg02, local03
17a04     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
17a08                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
17a08     00 28 06 F6 | 	mov	local06, #0
17a0c     00 2A 06 F6 | 	mov	local07, #0
17a10     00 30 0E F2 | 	cmp	local10, #0 wz
17a14     01 22 56 A2 |  if_e	cmps	local03, #1 wc
17a18     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
17a1c     00 2A 0E F2 | 	cmp	local07, #0 wz
17a20     00 28 26 56 |  if_ne	not	local06, #0
17a24     00 2C 06 F6 | 	mov	local08, #0
17a28     00 2E 06 F6 | 	mov	local09, #0
17a2c     11 15 02 F6 | 	mov	arg02, local03
17a30     01 14 86 F1 | 	sub	arg02, #1
17a34     13 13 02 F6 | 	mov	arg01, local05
17a38     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17a3c     10 FB 09 F2 | 	cmp	result1, local02 wz
17a40     00 2E 26 A6 |  if_e	not	local09, #0
17a44     00 2E 0E F2 | 	cmp	local09, #0 wz
17a48     00 2C 26 56 |  if_ne	not	local08, #0
17a4c     16 29 CA F7 | 	test	local06, local08 wz
17a50     1C 00 90 AD |  if_e	jmp	#LR__1813
17a54                 | '       fillpush(x1)
17a54     13 13 02 F6 | 	mov	arg01, local05
17a58     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
17a5c                 | '       fillpush(y-1)
17a5c     11 13 02 F6 | 	mov	arg01, local03
17a60     01 12 86 F1 | 	sub	arg01, #1
17a64     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
17a68                 | '       spanabove := 1 
17a68     01 30 06 F6 | 	mov	local10, #1
17a6c     4C 00 90 FD | 	jmp	#LR__1814
17a70                 | LR__1813
17a70                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
17a70     00 28 06 F6 | 	mov	local06, #0
17a74     00 2A 06 F6 | 	mov	local07, #0
17a78     00 30 0E F2 | 	cmp	local10, #0 wz
17a7c     01 22 56 52 |  if_ne	cmps	local03, #1 wc
17a80     01 2A 66 16 |  if_a	neg	local07, #1
17a84     00 2A 0E F2 | 	cmp	local07, #0 wz
17a88     00 28 26 56 |  if_ne	not	local06, #0
17a8c     00 2C 06 F6 | 	mov	local08, #0
17a90     00 2E 06 F6 | 	mov	local09, #0
17a94     11 15 02 F6 | 	mov	arg02, local03
17a98     01 14 86 F1 | 	sub	arg02, #1
17a9c     13 13 02 F6 | 	mov	arg01, local05
17aa0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
17aa4     10 FB 09 F2 | 	cmp	result1, local02 wz
17aa8     00 2E 26 56 |  if_ne	not	local09, #0
17aac     00 2E 0E F2 | 	cmp	local09, #0 wz
17ab0     00 2C 26 56 |  if_ne	not	local08, #0
17ab4     16 29 CA F7 | 	test	local06, local08 wz
17ab8                 | '       spanabove := 0 
17ab8     00 30 06 56 |  if_ne	mov	local10, #0
17abc                 | LR__1814
17abc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
17abc     00 28 06 F6 | 	mov	local06, #0
17ac0     00 2A 06 F6 | 	mov	local07, #0
17ac4     00 32 0E F2 | 	cmp	local11, #0 wz
17ac8     01 00 00 AF 
17acc     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
17ad0     01 2A 66 86 |  if_c_and_z	neg	local07, #1
17ad4     00 2A 0E F2 | 	cmp	local07, #0 wz
17ad8     00 28 26 56 |  if_ne	not	local06, #0
17adc     00 2C 06 F6 | 	mov	local08, #0
17ae0     00 2E 06 F6 | 	mov	local09, #0
17ae4     11 15 02 F6 | 	mov	arg02, local03
17ae8     01 14 06 F1 | 	add	arg02, #1
17aec     13 13 02 F6 | 	mov	arg01, local05
17af0     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
17af4     10 FB 09 F2 | 	cmp	result1, local02 wz
17af8     00 2E 26 A6 |  if_e	not	local09, #0
17afc     00 2E 0E F2 | 	cmp	local09, #0 wz
17b00     00 2C 26 56 |  if_ne	not	local08, #0
17b04     16 29 CA F7 | 	test	local06, local08 wz
17b08     1C 00 90 AD |  if_e	jmp	#LR__1815
17b0c                 | '       fillpush(x1)
17b0c     13 13 02 F6 | 	mov	arg01, local05
17b10     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
17b14                 | '       fillpush(y + 1)
17b14     11 13 02 F6 | 	mov	arg01, local03
17b18     01 12 06 F1 | 	add	arg01, #1
17b1c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
17b20                 | '       spanBelow := 1
17b20     01 32 06 F6 | 	mov	local11, #1
17b24     50 00 90 FD | 	jmp	#LR__1816
17b28                 | LR__1815
17b28                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
17b28     00 28 06 F6 | 	mov	local06, #0
17b2c     00 2A 06 F6 | 	mov	local07, #0
17b30     00 32 0E F2 | 	cmp	local11, #0 wz
17b34     01 00 00 5F 
17b38     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
17b3c     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
17b40     00 2A 0E F2 | 	cmp	local07, #0 wz
17b44     00 28 26 56 |  if_ne	not	local06, #0
17b48     00 2C 06 F6 | 	mov	local08, #0
17b4c     00 2E 06 F6 | 	mov	local09, #0
17b50     11 15 02 F6 | 	mov	arg02, local03
17b54     01 14 06 F1 | 	add	arg02, #1
17b58     13 13 02 F6 | 	mov	arg01, local05
17b5c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
17b60     10 FB 09 F2 | 	cmp	result1, local02 wz
17b64     00 2E 26 56 |  if_ne	not	local09, #0
17b68     00 2E 0E F2 | 	cmp	local09, #0 wz
17b6c     00 2C 26 56 |  if_ne	not	local08, #0
17b70     16 29 CA F7 | 	test	local06, local08 wz
17b74                 | '       spanbelow := 0
17b74     00 32 06 56 |  if_ne	mov	local11, #0
17b78                 | LR__1816
17b78                 | '     x1++
17b78     01 26 06 F1 | 	add	local05, #1
17b7c     3C FE 9F FD | 	jmp	#LR__1812
17b80                 | LR__1817
17b80                 | '   y:=fillpop()
17b80     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
17b84     FD 22 02 F6 | 	mov	local03, result1
17b88                 | '   x:=fillpop()
17b88     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
17b8c     FD 24 02 F6 | 	mov	local04, result1
17b90     C8 FD 9F FD | 	jmp	#LR__1810
17b94                 | LR__1818
17b94                 | LR__1819
17b94     A7 F0 03 F6 | 	mov	ptra, fp
17b98     B2 00 A0 FD | 	call	#popregs_
17b9c                 | _hg010b_spin2_fill_ret
17b9c     2D 00 64 FD | 	ret
17ba0                 | 
17ba0                 | ' 'pinlow(38)    
17ba0                 | ' 
17ba0                 | ' '-- A filled circle -----------------------------------------------------
17ba0                 | ' 
17ba0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
17ba0                 | _hg010b_spin2_fcircle
17ba0     08 4A 05 F6 | 	mov	COUNT_, #8
17ba4     A8 00 A0 FD | 	call	#pushregs_
17ba8     0B 1F 02 F6 | 	mov	local01, arg03
17bac     FF FF 7F FF 
17bb0     FE 1F 06 FD | 	qmul	local01, ##-2
17bb4     09 21 02 F6 | 	mov	local02, arg01
17bb8     0A 23 02 F6 | 	mov	local03, arg02
17bbc     0C 25 02 F6 | 	mov	local04, arg04
17bc0                 | ' 
17bc0                 | ' d:=5-4*r
17bc0     0F 19 02 F6 | 	mov	arg04, local01
17bc4     02 18 66 F0 | 	shl	arg04, #2
17bc8     05 26 06 F6 | 	mov	local05, #5
17bcc     0C 27 82 F1 | 	sub	local05, arg04
17bd0                 | ' x:=0
17bd0     00 28 06 F6 | 	mov	local06, #0
17bd4                 | ' y:=r
17bd4                 | ' da:=(-2*r+5)*4
17bd4                 | ' db:=3*4
17bd4     0C 2A 06 F6 | 	mov	local07, #12
17bd8                 | ' repeat while (x<=y) 
17bd8     18 2C 62 FD | 	getqx	local08
17bdc     05 2C 06 F1 | 	add	local08, #5
17be0     02 2C 66 F0 | 	shl	local08, #2
17be4                 | LR__1820
17be4     0F 29 5A F2 | 	cmps	local06, local01 wcz
17be8     B4 00 90 1D |  if_a	jmp	#LR__1822
17bec                 | '   fastline(x0-x,x0+x,y0-y,c)
17bec     10 13 02 F6 | 	mov	arg01, local02
17bf0     14 13 82 F1 | 	sub	arg01, local06
17bf4     10 15 02 F6 | 	mov	arg02, local02
17bf8     14 15 02 F1 | 	add	arg02, local06
17bfc     11 17 02 F6 | 	mov	arg03, local03
17c00     0F 17 82 F1 | 	sub	arg03, local01
17c04     12 19 02 F6 | 	mov	arg04, local04
17c08     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17c0c                 | '   fastline(x0-x,x0+x,y0+y,c)
17c0c     10 13 02 F6 | 	mov	arg01, local02
17c10     14 13 82 F1 | 	sub	arg01, local06
17c14     10 15 02 F6 | 	mov	arg02, local02
17c18     14 15 02 F1 | 	add	arg02, local06
17c1c     11 17 02 F6 | 	mov	arg03, local03
17c20     0F 17 02 F1 | 	add	arg03, local01
17c24     12 19 02 F6 | 	mov	arg04, local04
17c28     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17c2c                 | '   fastline(x0-y,x0+y,y0-x,c)
17c2c     10 13 02 F6 | 	mov	arg01, local02
17c30     0F 13 82 F1 | 	sub	arg01, local01
17c34     10 15 02 F6 | 	mov	arg02, local02
17c38     0F 15 02 F1 | 	add	arg02, local01
17c3c     11 17 02 F6 | 	mov	arg03, local03
17c40     14 17 82 F1 | 	sub	arg03, local06
17c44     12 19 02 F6 | 	mov	arg04, local04
17c48     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17c4c                 | '   fastline(x0-y,x0+y,y0+x,c)
17c4c     10 13 02 F6 | 	mov	arg01, local02
17c50     0F 13 82 F1 | 	sub	arg01, local01
17c54     10 15 02 F6 | 	mov	arg02, local02
17c58     0F 15 02 F1 | 	add	arg02, local01
17c5c     11 17 02 F6 | 	mov	arg03, local03
17c60     14 17 02 F1 | 	add	arg03, local06
17c64     12 19 02 F6 | 	mov	arg04, local04
17c68     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
17c6c                 | '   if d>0 
17c6c     01 26 56 F2 | 	cmps	local05, #1 wc
17c70     18 00 90 CD |  if_b	jmp	#LR__1821
17c74                 | '     d+=da
17c74     16 27 02 F1 | 	add	local05, local08
17c78                 | '     y-=1
17c78     01 1E 86 F1 | 	sub	local01, #1
17c7c                 | '     x+=1
17c7c     01 28 06 F1 | 	add	local06, #1
17c80                 | '     da+=4*4
17c80     10 2C 06 F1 | 	add	local08, #16
17c84                 | '     db+=2*4
17c84     08 2A 06 F1 | 	add	local07, #8
17c88     58 FF 9F FD | 	jmp	#LR__1820
17c8c                 | LR__1821
17c8c                 | '   else
17c8c                 | '     d+=db
17c8c     15 27 02 F1 | 	add	local05, local07
17c90                 | '     x+=1
17c90     01 28 06 F1 | 	add	local06, #1
17c94                 | '     da+=2*4
17c94     08 2C 06 F1 | 	add	local08, #8
17c98                 | '     db+=2*4
17c98     08 2A 06 F1 | 	add	local07, #8
17c9c     44 FF 9F FD | 	jmp	#LR__1820
17ca0                 | LR__1822
17ca0     A7 F0 03 F6 | 	mov	ptra, fp
17ca4     B2 00 A0 FD | 	call	#popregs_
17ca8                 | _hg010b_spin2_fcircle_ret
17ca8     2D 00 64 FD | 	ret
17cac                 | 
17cac                 | '  
17cac                 | ' '-- A circle ------------------------------------------------------------ 
17cac                 | '  
17cac                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
17cac                 | _hg010b_spin2_circle
17cac     08 4A 05 F6 | 	mov	COUNT_, #8
17cb0     A8 00 A0 FD | 	call	#pushregs_
17cb4     0B 1F 02 F6 | 	mov	local01, arg03
17cb8     FF FF 7F FF 
17cbc     FE 1F 06 FD | 	qmul	local01, ##-2
17cc0     09 21 02 F6 | 	mov	local02, arg01
17cc4     0A 23 02 F6 | 	mov	local03, arg02
17cc8     0C 25 02 F6 | 	mov	local04, arg04
17ccc                 | ' 
17ccc                 | '  
17ccc                 | ' d:=5-4*r
17ccc     0F 19 02 F6 | 	mov	arg04, local01
17cd0     02 18 66 F0 | 	shl	arg04, #2
17cd4     05 26 06 F6 | 	mov	local05, #5
17cd8     0C 27 82 F1 | 	sub	local05, arg04
17cdc                 | ' x:=0
17cdc     00 28 06 F6 | 	mov	local06, #0
17ce0                 | ' y:=r
17ce0                 | ' da:=(-2*r+5)*4
17ce0                 | ' db:=3*4
17ce0     0C 2A 06 F6 | 	mov	local07, #12
17ce4                 | ' repeat while (x<=y) 
17ce4     18 2C 62 FD | 	getqx	local08
17ce8     05 2C 06 F1 | 	add	local08, #5
17cec     02 2C 66 F0 | 	shl	local08, #2
17cf0                 | LR__1830
17cf0     0F 29 5A F2 | 	cmps	local06, local01 wcz
17cf4     F4 00 90 1D |  if_a	jmp	#LR__1832
17cf8                 | '   putpixel(x0-x,y0-y,c)
17cf8     10 13 02 F6 | 	mov	arg01, local02
17cfc     14 13 82 F1 | 	sub	arg01, local06
17d00     11 15 02 F6 | 	mov	arg02, local03
17d04     0F 15 82 F1 | 	sub	arg02, local01
17d08     12 17 02 F6 | 	mov	arg03, local04
17d0c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17d10                 | '   putpixel(x0-x,y0+y,c)
17d10     10 13 02 F6 | 	mov	arg01, local02
17d14     14 13 82 F1 | 	sub	arg01, local06
17d18     11 15 02 F6 | 	mov	arg02, local03
17d1c     0F 15 02 F1 | 	add	arg02, local01
17d20     12 17 02 F6 | 	mov	arg03, local04
17d24     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17d28                 | '   putpixel(x0+x,y0-y,c)
17d28     10 13 02 F6 | 	mov	arg01, local02
17d2c     14 13 02 F1 | 	add	arg01, local06
17d30     11 15 02 F6 | 	mov	arg02, local03
17d34     0F 15 82 F1 | 	sub	arg02, local01
17d38     12 17 02 F6 | 	mov	arg03, local04
17d3c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17d40                 | '   putpixel(x0+x,y0+y,c)
17d40     10 13 02 F6 | 	mov	arg01, local02
17d44     14 13 02 F1 | 	add	arg01, local06
17d48     11 15 02 F6 | 	mov	arg02, local03
17d4c     0F 15 02 F1 | 	add	arg02, local01
17d50     12 17 02 F6 | 	mov	arg03, local04
17d54     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17d58                 | '   putpixel(x0-y,y0-x,c)
17d58     10 13 02 F6 | 	mov	arg01, local02
17d5c     0F 13 82 F1 | 	sub	arg01, local01
17d60     11 15 02 F6 | 	mov	arg02, local03
17d64     14 15 82 F1 | 	sub	arg02, local06
17d68     12 17 02 F6 | 	mov	arg03, local04
17d6c     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17d70                 | '   putpixel(x0-y,y0+x,c)
17d70     10 13 02 F6 | 	mov	arg01, local02
17d74     0F 13 82 F1 | 	sub	arg01, local01
17d78     11 15 02 F6 | 	mov	arg02, local03
17d7c     14 15 02 F1 | 	add	arg02, local06
17d80     12 17 02 F6 | 	mov	arg03, local04
17d84     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17d88                 | '   putpixel(x0+y,y0-x,c)
17d88     10 13 02 F6 | 	mov	arg01, local02
17d8c     0F 13 02 F1 | 	add	arg01, local01
17d90     11 15 02 F6 | 	mov	arg02, local03
17d94     14 15 82 F1 | 	sub	arg02, local06
17d98     12 17 02 F6 | 	mov	arg03, local04
17d9c     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17da0                 | '   putpixel(x0+y,y0+x,c)
17da0     10 13 02 F6 | 	mov	arg01, local02
17da4     0F 13 02 F1 | 	add	arg01, local01
17da8     11 15 02 F6 | 	mov	arg02, local03
17dac     14 15 02 F1 | 	add	arg02, local06
17db0     12 17 02 F6 | 	mov	arg03, local04
17db4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17db8                 | '   if d>0 
17db8     01 26 56 F2 | 	cmps	local05, #1 wc
17dbc     18 00 90 CD |  if_b	jmp	#LR__1831
17dc0                 | '     d+=da
17dc0     16 27 02 F1 | 	add	local05, local08
17dc4                 | '     y-=1
17dc4     01 1E 86 F1 | 	sub	local01, #1
17dc8                 | '     x+=1
17dc8     01 28 06 F1 | 	add	local06, #1
17dcc                 | '     da+=4*4
17dcc     10 2C 06 F1 | 	add	local08, #16
17dd0                 | '     db+=2*4
17dd0     08 2A 06 F1 | 	add	local07, #8
17dd4     18 FF 9F FD | 	jmp	#LR__1830
17dd8                 | LR__1831
17dd8                 | '   else
17dd8                 | '     d+=db
17dd8     15 27 02 F1 | 	add	local05, local07
17ddc                 | '     x+=1
17ddc     01 28 06 F1 | 	add	local06, #1
17de0                 | '     da+=2*4
17de0     08 2C 06 F1 | 	add	local08, #8
17de4                 | '     db+=2*4
17de4     08 2A 06 F1 | 	add	local07, #8
17de8     04 FF 9F FD | 	jmp	#LR__1830
17dec                 | LR__1832
17dec     A7 F0 03 F6 | 	mov	ptra, fp
17df0     B2 00 A0 FD | 	call	#popregs_
17df4                 | _hg010b_spin2_circle_ret
17df4     2D 00 64 FD | 	ret
17df8                 | 
17df8                 | '     
17df8                 | ' '-- A frame (an empty rectangle) ---------------------------------------
17df8                 | ' 
17df8                 | ' pub frame(x1,y1,x2,y2,c)
17df8                 | _hg010b_spin2_frame
17df8     05 4A 05 F6 | 	mov	COUNT_, #5
17dfc     A8 00 A0 FD | 	call	#pushregs_
17e00     09 1F 02 F6 | 	mov	local01, arg01
17e04     0A 21 02 F6 | 	mov	local02, arg02
17e08     0B 23 02 F6 | 	mov	local03, arg03
17e0c     0C 25 02 F6 | 	mov	local04, arg04
17e10     0D 27 02 F6 | 	mov	local05, arg05
17e14                 | ' 
17e14                 | ' fastline(x1,x2,y1,c)
17e14     0F 13 02 F6 | 	mov	arg01, local01
17e18     11 15 02 F6 | 	mov	arg02, local03
17e1c     10 17 02 F6 | 	mov	arg03, local02
17e20     13 19 02 F6 | 	mov	arg04, local05
17e24     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
17e28                 | ' fastline(x1,x2,y2,c)
17e28     0F 13 02 F6 | 	mov	arg01, local01
17e2c     11 15 02 F6 | 	mov	arg02, local03
17e30     12 17 02 F6 | 	mov	arg03, local04
17e34     13 19 02 F6 | 	mov	arg04, local05
17e38     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
17e3c                 | ' line(x1,y1,x1,y2,c)
17e3c     0F 13 02 F6 | 	mov	arg01, local01
17e40     10 15 02 F6 | 	mov	arg02, local02
17e44     0F 17 02 F6 | 	mov	arg03, local01
17e48     12 19 02 F6 | 	mov	arg04, local04
17e4c     13 1B 02 F6 | 	mov	arg05, local05
17e50                 | ' draw(x1,y1,x2,y2,c)
17e50     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
17e54                 | ' line(x2,y1,x2,y2,c)
17e54     11 13 02 F6 | 	mov	arg01, local03
17e58     10 15 02 F6 | 	mov	arg02, local02
17e5c     11 17 02 F6 | 	mov	arg03, local03
17e60     12 19 02 F6 | 	mov	arg04, local04
17e64     13 1B 02 F6 | 	mov	arg05, local05
17e68                 | ' draw(x1,y1,x2,y2,c)
17e68     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
17e6c     A7 F0 03 F6 | 	mov	ptra, fp
17e70     B2 00 A0 FD | 	call	#popregs_
17e74                 | _hg010b_spin2_frame_ret
17e74     2D 00 64 FD | 	ret
17e78                 | 
17e78                 | ' 
17e78                 | ' '-- A box (a filled rectangle) ----------------------------------------
17e78                 | ' 
17e78                 | ' pub box(x1,y1,x2,y2,c) |yy
17e78                 | _hg010b_spin2_box
17e78     06 4A 05 F6 | 	mov	COUNT_, #6
17e7c     A8 00 A0 FD | 	call	#pushregs_
17e80     09 1F 02 F6 | 	mov	local01, arg01
17e84     0A 21 02 F6 | 	mov	local02, arg02
17e88     0B 23 02 F6 | 	mov	local03, arg03
17e8c     0C 25 02 F6 | 	mov	local04, arg04
17e90     0D 27 02 F6 | 	mov	local05, arg05
17e94                 | ' 
17e94                 | ' repeat yy from y1 to y2
17e94     10 25 52 F2 | 	cmps	local04, local02 wc
17e98     01 28 86 F6 | 	negc	local06, #1
17e9c     14 25 02 F1 | 	add	local04, local06
17ea0                 | LR__1840
17ea0                 | '   fastline(x1,x2,yy,c)
17ea0     0F 13 02 F6 | 	mov	arg01, local01
17ea4     11 15 02 F6 | 	mov	arg02, local03
17ea8     13 19 02 F6 | 	mov	arg04, local05
17eac     10 17 02 F6 | 	mov	arg03, local02
17eb0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
17eb4     14 21 02 F1 | 	add	local02, local06
17eb8     12 21 0A F2 | 	cmp	local02, local04 wz
17ebc     E0 FF 9F 5D |  if_ne	jmp	#LR__1840
17ec0     A7 F0 03 F6 | 	mov	ptra, fp
17ec4     B2 00 A0 FD | 	call	#popregs_
17ec8                 | _hg010b_spin2_box_ret
17ec8     2D 00 64 FD | 	ret
17ecc                 | 
17ecc                 | '       
17ecc                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
17ecc                 | _hg010b_spin2_putcharxycgf
17ecc                 | ' 
17ecc                 | '  
17ecc                 | ' repeat yy from 0 to 15
17ecc     00 00 06 F6 | 	mov	_var01, #0
17ed0     97 8C 48 FB | 	callpa	#(@LR__1852-@LR__1850)>>2,fcache_load_ptr_
17ed4                 | LR__1850
17ed4                 | ' 
17ed4                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
17ed4     91 E4 05 F1 | 	add	objptr, #145
17ed8     F2 02 02 FB | 	rdlong	_var02, objptr
17edc     0A 02 66 F0 | 	shl	_var02, #10
17ee0     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
17ee4     01 05 02 F1 | 	add	_var03, _var02
17ee8     0B 03 02 F6 | 	mov	_var02, arg03
17eec     04 02 66 F0 | 	shl	_var02, #4
17ef0     01 05 02 F1 | 	add	_var03, _var02
17ef4     00 05 02 F1 | 	add	_var03, _var01
17ef8     02 05 C2 FA | 	rdbyte	_var03, _var03
17efc                 | '   asm
17efc     00 04 0E F4 | 	testb	_var03, #0 wz
17f00     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
17f04     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
17f08     01 04 0E F4 | 	testb	_var03, #1 wz
17f0c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
17f10     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
17f14     02 04 0E F4 | 	testb	_var03, #2 wz
17f18     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
17f1c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
17f20     03 04 0E F4 | 	testb	_var03, #3 wz
17f24     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
17f28     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
17f2c     04 04 0E F4 | 	testb	_var03, #4 wz
17f30     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
17f34     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
17f38     05 04 0E F4 | 	testb	_var03, #5 wz
17f3c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
17f40     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
17f44     06 04 0E F4 | 	testb	_var03, #6 wz
17f48     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
17f4c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
17f50     07 04 0E F4 | 	testb	_var03, #7 wz
17f54     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
17f58     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
17f5c                 | '   
17f5c                 | '   ccc[0]:=c1
17f5c     99 E5 05 F1 | 	add	objptr, #409
17f60     F2 06 62 FC | 	wrlong	_var04, objptr
17f64                 | '   ccc[1]:=c2 
17f64     04 E4 05 F1 | 	add	objptr, #4
17f68     F2 08 62 FC | 	wrlong	_var05, objptr
17f6c                 | '   long[mailbox0][2]:=8
17f6c     49 E4 85 F1 | 	sub	objptr, #73
17f70     F2 04 02 FB | 	rdlong	_var03, objptr
17f74     08 04 06 F1 | 	add	_var03, #8
17f78     02 11 68 FC | 	wrlong	#8, _var03
17f7c                 | '   long[mailbox0][1]:=@ccc
17f7c     45 E4 05 F1 | 	add	objptr, #69
17f80     F2 04 02 F6 | 	mov	_var03, objptr
17f84     45 E4 85 F1 | 	sub	objptr, #69
17f88     F2 02 02 FB | 	rdlong	_var02, objptr
17f8c     04 02 06 F1 | 	add	_var02, #4
17f90     01 05 62 FC | 	wrlong	_var03, _var02
17f94                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
17f94     0C E5 85 F1 | 	sub	objptr, #268
17f98     F2 04 02 FB | 	rdlong	_var03, objptr
17f9c     0A 03 02 F6 | 	mov	_var02, arg02
17fa0     00 03 02 F1 | 	add	_var02, _var01
17fa4     0A 02 66 F0 | 	shl	_var02, #10
17fa8     09 0B 02 F6 | 	mov	_var06, arg01
17fac     02 0A 66 F0 | 	shl	_var06, #2
17fb0     05 03 02 F1 | 	add	_var02, _var06
17fb4     01 05 02 F1 | 	add	_var03, _var02
17fb8     00 00 78 FF 
17fbc     00 04 06 F1 | 	add	_var03, ##-268435456
17fc0     0C E5 05 F1 | 	add	objptr, #268
17fc4     F2 0A 02 FB | 	rdlong	_var06, objptr
17fc8     05 05 62 FC | 	wrlong	_var03, _var06
17fcc                 | '   repeat
17fcc                 | LR__1851
17fcc     F2 04 02 FB | 	rdlong	_var03, objptr
17fd0     02 03 02 FB | 	rdlong	_var02, _var03
17fd4     00 02 56 F2 | 	cmps	_var02, #0 wc
17fd8     F0 FF 9F CD |  if_b	jmp	#LR__1851
17fdc     E5 E5 85 F1 | 	sub	objptr, #485
17fe0     01 00 06 F1 | 	add	_var01, #1
17fe4     10 00 56 F2 | 	cmps	_var01, #16 wc
17fe8     E8 FE 9F CD |  if_b	jmp	#LR__1850
17fec                 | LR__1852
17fec                 | _hg010b_spin2_putcharxycgf_ret
17fec     2D 00 64 FD | 	ret
17ff0                 | 
17ff0                 | ' 
17ff0                 | ' 
17ff0                 | ' '**********************************************************************r***
17ff0                 | ' '                                                                        *
17ff0                 | ' ' Font related functions                                                 *
17ff0                 | ' '                                                                        *
17ff0                 | ' '*************************************************************************
17ff0                 | ' 
17ff0                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
17ff0                 | ' 
17ff0                 | ' pub setfontfamily(afontnum)
17ff0                 | _hg010b_spin2_setfontfamily
17ff0                 | ' 
17ff0                 | ' font_family:=afontnum
17ff0     91 E4 05 F1 | 	add	objptr, #145
17ff4     F2 12 62 FC | 	wrlong	arg01, objptr
17ff8     91 E4 85 F1 | 	sub	objptr, #145
17ffc                 | ' 'if afontnum==8
17ffc                 | ' '  font_ptr:=@amiga_font
17ffc                 | ' 
17ffc                 | ' if afontnum==4
17ffc     04 12 0E F2 | 	cmp	arg01, #4 wz
18000                 | '   font_ptr:=@st_font
18000     08 00 00 AF 
18004     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
18008     04 E4 05 A1 |  if_e	add	objptr, #4
1800c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
18010     04 E4 85 A1 |  if_e	sub	objptr, #4
18014     08 00 00 AF 
18018     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1801c                 | ' if afontnum==0
1801c     00 12 0E F2 | 	cmp	arg01, #0 wz
18020                 | '   font_ptr:=@vga_font
18020     04 E4 05 A1 |  if_e	add	objptr, #4
18024     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
18028     04 E4 85 A1 |  if_e	sub	objptr, #4
1802c                 | _hg010b_spin2_setfontfamily_ret
1802c     2D 00 64 FD | 	ret
18030                 | 
18030                 | ' 
18030                 | ' '*************************************************************************
18030                 | ' '                                                                        *
18030                 | ' '  Cursor functions                                                      *
18030                 | ' '                                                                        *
18030                 | ' '*************************************************************************
18030                 | ' 
18030                 | ' 
18030                 | ' pub setcursorpos(x,y)
18030                 | _hg010b_spin2_setcursorpos
18030                 | ' 
18030                 | ' ''---------- Set the (x,y) position of cursor
18030                 | ' 
18030                 | ' cursor_x:=x
18030     38 E4 05 F1 | 	add	objptr, #56
18034     F2 12 52 FC | 	wrword	arg01, objptr
18038                 | ' cursor_y:=y
18038     02 E4 05 F1 | 	add	objptr, #2
1803c     F2 14 42 FC | 	wrbyte	arg02, objptr
18040                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
18040     02 E4 85 F1 | 	sub	objptr, #2
18044     F2 14 E2 FA | 	rdword	arg02, objptr
18048     02 14 66 F0 | 	shl	arg02, #2
1804c     02 E4 05 F1 | 	add	objptr, #2
18050     F2 16 C2 FA | 	rdbyte	arg03, objptr
18054     3A E4 85 F1 | 	sub	objptr, #58
18058     04 16 66 F0 | 	shl	arg03, #4
1805c     11 12 06 F6 | 	mov	arg01, #17
18060     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
18064                 | _hg010b_spin2_setcursorpos_ret
18064     2D 00 64 FD | 	ret
18068                 | 
18068                 | ' 
18068                 | ' '*************************************************************************
18068                 | ' '                                                                        *
18068                 | ' '  VBlank functions                                                      *
18068                 | ' '                                                                        *
18068                 | ' '*************************************************************************
18068                 | ' 
18068                 | ' pub waitvbl(amount) | i
18068                 | _hg010b_spin2_waitvbl
18068     03 4A 05 F6 | 	mov	COUNT_, #3
1806c     A8 00 A0 FD | 	call	#pushregs_
18070     09 1F 02 F6 | 	mov	local01, arg01
18074                 | ' 
18074                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
18074                 | ' 
18074                 | ' repeat i from 1 to amount
18074     01 20 06 F6 | 	mov	local02, #1
18078     01 1E 56 F2 | 	cmps	local01, #1 wc
1807c     01 22 86 F6 | 	negc	local03, #1
18080     11 1F 02 F1 | 	add	local01, local03
18084                 | LR__1860
18084                 | '   repeat until vblank==0
18084                 | LR__1861
18084     45 E4 05 F1 | 	add	objptr, #69
18088     F2 12 0A FB | 	rdlong	arg01, objptr wz
1808c     45 E4 85 F1 | 	sub	objptr, #69
18090     0C 00 90 AD |  if_e	jmp	#LR__1862
18094                 | '     waitus(100)
18094     64 12 06 F6 | 	mov	arg01, #100
18098     FC 16 B0 FD | 	call	#__system___waitus
1809c     E4 FF 9F FD | 	jmp	#LR__1861
180a0                 | LR__1862
180a0                 | '   repeat until vblank==1
180a0                 | LR__1863
180a0     45 E4 05 F1 | 	add	objptr, #69
180a4     F2 12 02 FB | 	rdlong	arg01, objptr
180a8     45 E4 85 F1 | 	sub	objptr, #69
180ac     01 12 0E F2 | 	cmp	arg01, #1 wz
180b0     0C 00 90 AD |  if_e	jmp	#LR__1864
180b4                 | '     waitus(100)
180b4     64 12 06 F6 | 	mov	arg01, #100
180b8     DC 16 B0 FD | 	call	#__system___waitus
180bc     E0 FF 9F FD | 	jmp	#LR__1863
180c0                 | LR__1864
180c0     11 21 02 F1 | 	add	local02, local03
180c4     0F 21 0A F2 | 	cmp	local02, local01 wz
180c8     B8 FF 9F 5D |  if_ne	jmp	#LR__1860
180cc     A7 F0 03 F6 | 	mov	ptra, fp
180d0     B2 00 A0 FD | 	call	#popregs_
180d4                 | _hg010b_spin2_waitvbl_ret
180d4     2D 00 64 FD | 	ret
180d8                 | 
180d8                 | ' 
180d8                 | ' 
180d8                 | ' pub cls(fc,bc)   :c,i
180d8                 | _hg010b_spin2_cls
180d8     02 4A 05 F6 | 	mov	COUNT_, #2
180dc     A8 00 A0 FD | 	call	#pushregs_
180e0     09 1F 02 F6 | 	mov	local01, arg01
180e4     0A 21 02 F6 | 	mov	local02, arg02
180e8                 | ' 
180e8                 | ' c:=bc
180e8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
180e8     D9 E4 05 F1 | 	add	objptr, #217
180ec     F2 12 02 FB | 	rdlong	arg01, objptr
180f0     A5 E4 85 F1 | 	sub	objptr, #165
180f4     F2 16 02 FB | 	rdlong	arg03, objptr
180f8     02 16 66 F0 | 	shl	arg03, #2
180fc     10 15 02 F6 | 	mov	arg02, local02
18100     00 18 06 F6 | 	mov	arg04, #0
18104     01 1A 06 F6 | 	mov	arg05, #1
18108     0B 00 00 FF 
1810c     8C E4 05 F1 | 	add	objptr, ##5772
18110     F0 08 B0 FD | 	call	#_psram_spin2_fill
18114                 | ' setwritecolors(fc,bc)
18114                 | ' 
18114                 | ' write_color:=ff
18114     0B 00 00 FF 
18118     83 E4 85 F1 | 	sub	objptr, ##5763
1811c     F2 1E 62 FC | 	wrlong	local01, objptr
18120                 | ' write_background:=bb
18120     04 E4 05 F1 | 	add	objptr, #4
18124     F2 20 62 FC | 	wrlong	local02, objptr
18128                 | ' cursor_x:=0
18128     09 E4 85 F1 | 	sub	objptr, #9
1812c     F2 00 58 FC | 	wrword	#0, objptr
18130                 | ' cursor_y:=0
18130     02 E4 05 F1 | 	add	objptr, #2
18134     F2 00 48 FC | 	wrbyte	#0, objptr
18138                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
18138     02 E4 85 F1 | 	sub	objptr, #2
1813c     F2 14 E2 FA | 	rdword	arg02, objptr
18140     02 14 66 F0 | 	shl	arg02, #2
18144     02 E4 05 F1 | 	add	objptr, #2
18148     F2 16 C2 FA | 	rdbyte	arg03, objptr
1814c     3A E4 85 F1 | 	sub	objptr, #58
18150     04 16 66 F0 | 	shl	arg03, #4
18154     11 12 06 F6 | 	mov	arg01, #17
18158     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1815c                 | ' setcursorcolor(fc)
1815c     0F 13 02 F6 | 	mov	arg01, local01
18160     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
18164     10 FB 01 F6 | 	mov	result1, local02
18168     00 FC 05 F6 | 	mov	result2, #0
1816c     A7 F0 03 F6 | 	mov	ptra, fp
18170     B2 00 A0 FD | 	call	#popregs_
18174                 | _hg010b_spin2_cls_ret
18174     2D 00 64 FD | 	ret
18178                 | 
18178                 | ' 
18178                 | ' ''---------- Output a char at the cursor position, move the cursor 
18178                 | ' 
18178                 | ' pub putchar(achar) | c,x,y,l,newcpl
18178                 | _hg010b_spin2_putchar
18178     01 4A 05 F6 | 	mov	COUNT_, #1
1817c     A8 00 A0 FD | 	call	#pushregs_
18180     09 1F 02 F6 | 	mov	local01, arg01
18184                 | ' 
18184                 | ' if achar==10
18184     0A 1E 0E F2 | 	cmp	local01, #10 wz
18188                 | '   crlf()
18188     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1818c                 | ' if achar==9
1818c     09 1E 0E F2 | 	cmp	local01, #9 wz
18190     18 00 90 5D |  if_ne	jmp	#LR__1870
18194                 | '   cursor_x:=(cursor_x& %11110000)+16
18194     38 E4 05 F1 | 	add	objptr, #56
18198     F2 16 E2 FA | 	rdword	arg03, objptr
1819c     F0 16 06 F5 | 	and	arg03, #240
181a0     10 16 06 F1 | 	add	arg03, #16
181a4     F2 16 52 FC | 	wrword	arg03, objptr
181a8     38 E4 85 F1 | 	sub	objptr, #56
181ac                 | LR__1870
181ac                 | '   
181ac                 | ' if (achar<>9) && (achar<>10) 
181ac     09 1E 0E F2 | 	cmp	local01, #9 wz
181b0     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
181b4     44 00 90 AD |  if_e	jmp	#LR__1871
181b8                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
181b8     38 E4 05 F1 | 	add	objptr, #56
181bc     F2 12 E2 FA | 	rdword	arg01, objptr
181c0     02 E4 05 F1 | 	add	objptr, #2
181c4     F2 14 C2 FA | 	rdbyte	arg02, objptr
181c8     04 14 66 F0 | 	shl	arg02, #4
181cc     03 E4 05 F1 | 	add	objptr, #3
181d0     F2 18 02 FB | 	rdlong	arg04, objptr
181d4     04 E4 05 F1 | 	add	objptr, #4
181d8     F2 1A 02 FB | 	rdlong	arg05, objptr
181dc     41 E4 85 F1 | 	sub	objptr, #65
181e0     0F 17 02 F6 | 	mov	arg03, local01
181e4     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
181e8                 | '   cursor_x+=2
181e8     38 E4 05 F1 | 	add	objptr, #56
181ec     F2 1E E2 FA | 	rdword	local01, objptr
181f0     02 1E 06 F1 | 	add	local01, #2
181f4     F2 1E 52 FC | 	wrword	local01, objptr
181f8     38 E4 85 F1 | 	sub	objptr, #56
181fc                 | LR__1871
181fc                 | ' 
181fc                 | ' if cursor_x>=256
181fc     38 E4 05 F1 | 	add	objptr, #56
18200     F2 1E E2 FA | 	rdword	local01, objptr
18204     38 E4 85 F1 | 	sub	objptr, #56
18208     00 1F 56 F2 | 	cmps	local01, #256 wc
1820c     64 00 90 CD |  if_b	jmp	#LR__1873
18210                 | '   cursor_x:=0
18210     38 E4 05 F1 | 	add	objptr, #56
18214     F2 00 58 FC | 	wrword	#0, objptr
18218                 | '   cursor_y+=1
18218     02 E4 05 F1 | 	add	objptr, #2
1821c     F2 1E C2 FA | 	rdbyte	local01, objptr
18220     01 1E 06 F1 | 	add	local01, #1
18224     F2 1E 42 FC | 	wrbyte	local01, objptr
18228                 | '   if cursor_y>st_lines-1
18228     C3 E4 05 F1 | 	add	objptr, #195
1822c     F2 1E 02 FB | 	rdlong	local01, objptr
18230     01 1E 86 F1 | 	sub	local01, #1
18234     C3 E4 85 F1 | 	sub	objptr, #195
18238     F2 16 C2 FA | 	rdbyte	arg03, objptr
1823c     3A E4 85 F1 | 	sub	objptr, #58
18240     0F 17 5A F2 | 	cmps	arg03, local01 wcz
18244     2C 00 90 ED |  if_be	jmp	#LR__1872
18248                 | '     scrollup()
18248     00 12 06 F6 | 	mov	arg01, #0
1824c     01 00 00 FF 
18250     40 14 06 F6 | 	mov	arg02, ##576
18254     10 16 06 F6 | 	mov	arg03, #16
18258     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
1825c                 | '     cursor_y:=st_lines-1
1825c     FD E4 05 F1 | 	add	objptr, #253
18260     F2 1E 02 FB | 	rdlong	local01, objptr
18264     01 1E 86 F1 | 	sub	local01, #1
18268     C3 E4 85 F1 | 	sub	objptr, #195
1826c     F2 1E 42 FC | 	wrbyte	local01, objptr
18270     3A E4 85 F1 | 	sub	objptr, #58
18274                 | LR__1872
18274                 | LR__1873
18274                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
18274     38 E4 05 F1 | 	add	objptr, #56
18278     F2 14 E2 FA | 	rdword	arg02, objptr
1827c     02 14 66 F0 | 	shl	arg02, #2
18280     02 E4 05 F1 | 	add	objptr, #2
18284     F2 16 C2 FA | 	rdbyte	arg03, objptr
18288     3A E4 85 F1 | 	sub	objptr, #58
1828c     04 16 66 F0 | 	shl	arg03, #4
18290     11 12 06 F6 | 	mov	arg01, #17
18294     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
18298     A7 F0 03 F6 | 	mov	ptra, fp
1829c     B2 00 A0 FD | 	call	#popregs_
182a0                 | _hg010b_spin2_putchar_ret
182a0     2D 00 64 FD | 	ret
182a4                 | 
182a4                 | '     
182a4                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
182a4                 | ' 
182a4                 | ' pub putchar2(achar) | c,x,y,l,newcpl
182a4                 | _hg010b_spin2_putchar2
182a4     01 4A 05 F6 | 	mov	COUNT_, #1
182a8     A8 00 A0 FD | 	call	#pushregs_
182ac                 | ' 
182ac                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
182ac     38 E4 05 F1 | 	add	objptr, #56
182b0     F2 1E E2 FA | 	rdword	local01, objptr
182b4     02 E4 05 F1 | 	add	objptr, #2
182b8     F2 14 C2 FA | 	rdbyte	arg02, objptr
182bc     04 14 66 F0 | 	shl	arg02, #4
182c0     09 17 02 F6 | 	mov	arg03, arg01
182c4     03 E4 05 F1 | 	add	objptr, #3
182c8     F2 18 02 FB | 	rdlong	arg04, objptr
182cc     04 E4 05 F1 | 	add	objptr, #4
182d0     F2 1A 02 FB | 	rdlong	arg05, objptr
182d4     41 E4 85 F1 | 	sub	objptr, #65
182d8     0F 13 02 F6 | 	mov	arg01, local01
182dc     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
182e0                 | ' cursor_x+=2
182e0     38 E4 05 F1 | 	add	objptr, #56
182e4     F2 1E E2 FA | 	rdword	local01, objptr
182e8     02 1E 06 F1 | 	add	local01, #2
182ec     F2 1E 52 FC | 	wrword	local01, objptr
182f0                 | ' if cursor_x>=256
182f0     F2 1E E2 FA | 	rdword	local01, objptr
182f4     38 E4 85 F1 | 	sub	objptr, #56
182f8     00 1F 56 F2 | 	cmps	local01, #256 wc
182fc     64 00 90 CD |  if_b	jmp	#LR__1881
18300                 | '   cursor_x:=0
18300     38 E4 05 F1 | 	add	objptr, #56
18304     F2 00 58 FC | 	wrword	#0, objptr
18308                 | '   cursor_y+=1
18308     02 E4 05 F1 | 	add	objptr, #2
1830c     F2 1E C2 FA | 	rdbyte	local01, objptr
18310     01 1E 06 F1 | 	add	local01, #1
18314     F2 1E 42 FC | 	wrbyte	local01, objptr
18318                 | '   if cursor_y>st_lines-1
18318     C3 E4 05 F1 | 	add	objptr, #195
1831c     F2 1E 02 FB | 	rdlong	local01, objptr
18320     01 1E 86 F1 | 	sub	local01, #1
18324     C3 E4 85 F1 | 	sub	objptr, #195
18328     F2 1A C2 FA | 	rdbyte	arg05, objptr
1832c     3A E4 85 F1 | 	sub	objptr, #58
18330     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
18334     2C 00 90 ED |  if_be	jmp	#LR__1880
18338                 | '     scrollup()
18338     00 12 06 F6 | 	mov	arg01, #0
1833c     01 00 00 FF 
18340     40 14 06 F6 | 	mov	arg02, ##576
18344     10 16 06 F6 | 	mov	arg03, #16
18348     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
1834c                 | '     cursor_y:=st_lines-1
1834c     FD E4 05 F1 | 	add	objptr, #253
18350     F2 1E 02 FB | 	rdlong	local01, objptr
18354     01 1E 86 F1 | 	sub	local01, #1
18358     C3 E4 85 F1 | 	sub	objptr, #195
1835c     F2 1E 42 FC | 	wrbyte	local01, objptr
18360     3A E4 85 F1 | 	sub	objptr, #58
18364                 | LR__1880
18364                 | LR__1881
18364                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
18364     38 E4 05 F1 | 	add	objptr, #56
18368     F2 14 E2 FA | 	rdword	arg02, objptr
1836c     02 14 66 F0 | 	shl	arg02, #2
18370     02 E4 05 F1 | 	add	objptr, #2
18374     F2 16 C2 FA | 	rdbyte	arg03, objptr
18378     3A E4 85 F1 | 	sub	objptr, #58
1837c     04 16 66 F0 | 	shl	arg03, #4
18380     11 12 06 F6 | 	mov	arg01, #17
18384     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
18388     A7 F0 03 F6 | 	mov	ptra, fp
1838c     B2 00 A0 FD | 	call	#popregs_
18390                 | _hg010b_spin2_putchar2_ret
18390     2D 00 64 FD | 	ret
18394                 | 
18394                 | ' ''--------- Output a string at the cursor position, move the cursor  
18394                 | ' 
18394                 | ' pub write(text) | iii,c,ncx,ncy
18394                 | _hg010b_spin2_write
18394     04 4A 05 F6 | 	mov	COUNT_, #4
18398     A8 00 A0 FD | 	call	#pushregs_
1839c     09 1F 02 F6 | 	mov	local01, arg01
183a0                 | ' 
183a0                 | ' repeat iii from 0 to strsize(text)-1
183a0     00 20 06 F6 | 	mov	local02, #0
183a4     0F 13 02 F6 | 	mov	arg01, local01
183a8     09 23 02 F6 | 	mov	local03, arg01
183ac     97 06 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
183b0                 | LR__1890
183b0     11 FB C9 FA | 	rdbyte	result1, local03 wz
183b4     01 22 06 51 |  if_ne	add	local03, #1
183b8     F4 FF 9F 5D |  if_ne	jmp	#LR__1890
183bc                 | LR__1891
183bc     09 23 82 F1 | 	sub	local03, arg01
183c0     01 22 86 F1 | 	sub	local03, #1
183c4     00 22 56 F2 | 	cmps	local03, #0 wc
183c8     01 24 86 F6 | 	negc	local04, #1
183cc     12 23 02 F1 | 	add	local03, local04
183d0                 | LR__1892
183d0                 | '   putchar2(byte[text+iii])
183d0     0F 13 02 F6 | 	mov	arg01, local01
183d4     10 13 02 F1 | 	add	arg01, local02
183d8     09 13 C2 FA | 	rdbyte	arg01, arg01
183dc     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
183e0     12 21 02 F1 | 	add	local02, local04
183e4     11 21 0A F2 | 	cmp	local02, local03 wz
183e8     E4 FF 9F 5D |  if_ne	jmp	#LR__1892
183ec     A7 F0 03 F6 | 	mov	ptra, fp
183f0     B2 00 A0 FD | 	call	#popregs_
183f4                 | _hg010b_spin2_write_ret
183f4     2D 00 64 FD | 	ret
183f8                 | 
183f8                 | ' 
183f8                 | ' ''-----------  Scroll the screen one line up
183f8                 | ' 
183f8                 | ' pub scrollup(start=0, end=576 , amount=16) | i
183f8                 | _hg010b_spin2_scrollup
183f8     01 4A 05 F6 | 	mov	COUNT_, #1
183fc     A8 00 A0 FD | 	call	#pushregs_
18400                 | ' 	
18400                 | ' repeat i from 0 to 559 
18400     00 1E 06 F6 | 	mov	local01, #0
18404                 | LR__1900
18404     F5 E4 05 F1 | 	add	objptr, #245
18408     F2 18 02 FB | 	rdlong	arg04, objptr
1840c     1C E4 85 F1 | 	sub	objptr, #28
18410     F2 14 02 FB | 	rdlong	arg02, objptr
18414     0F 13 02 F6 | 	mov	arg01, local01
18418     10 12 06 F1 | 	add	arg01, #16
1841c     02 12 66 F0 | 	shl	arg01, #2
18420     14 E4 05 F1 | 	add	objptr, #20
18424     F2 16 02 FB | 	rdlong	arg03, objptr
18428     0B 13 02 FD | 	qmul	arg01, arg03
1842c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1842c     F6 03 00 FF 
18430     00 12 06 F6 | 	mov	arg01, ##519168
18434     0C 13 82 F1 | 	sub	arg01, arg04
18438     02 16 66 F0 | 	shl	arg03, #2
1843c     0A 00 00 FF 
18440     D3 E5 05 F1 | 	add	objptr, ##5587
18444     18 18 62 FD | 	getqx	arg04
18448     0C 15 02 F1 | 	add	arg02, arg04
1844c     7C 04 B0 FD | 	call	#_psram_spin2_read1
18450     0A 00 00 FF 
18454     CB E5 85 F1 | 	sub	objptr, ##5579
18458     F2 18 02 FB | 	rdlong	arg04, objptr
1845c     1C E4 85 F1 | 	sub	objptr, #28
18460     F2 14 02 FB | 	rdlong	arg02, objptr
18464     0F 13 02 F6 | 	mov	arg01, local01
18468     02 12 66 F0 | 	shl	arg01, #2
1846c     14 E4 05 F1 | 	add	objptr, #20
18470     F2 16 02 FB | 	rdlong	arg03, objptr
18474     0B 13 02 FD | 	qmul	arg01, arg03
18478                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
18478     F6 03 00 FF 
1847c     00 12 06 F6 | 	mov	arg01, ##519168
18480     0C 13 82 F1 | 	sub	arg01, arg04
18484     02 16 66 F0 | 	shl	arg03, #2
18488     0A 00 00 FF 
1848c     D3 E5 05 F1 | 	add	objptr, ##5587
18490     18 18 62 FD | 	getqx	arg04
18494     0C 15 02 F1 | 	add	arg02, arg04
18498     CC 04 B0 FD | 	call	#_psram_spin2_write
1849c     0B 00 00 FF 
184a0     C0 E4 85 F1 | 	sub	objptr, ##5824
184a4     01 1E 06 F1 | 	add	local01, #1
184a8     01 00 00 FF 
184ac     30 1E 56 F2 | 	cmps	local01, ##560 wc
184b0     50 FF 9F CD |  if_b	jmp	#LR__1900
184b4                 | ' 
184b4                 | ' repeat i from 560 to 575
184b4     01 00 00 FF 
184b8     30 1E 06 F6 | 	mov	local01, ##560
184bc                 | LR__1901
184bc                 | '    fastline(0,1023,i,write_background)   
184bc     41 E4 05 F1 | 	add	objptr, #65
184c0     F2 18 02 FB | 	rdlong	arg04, objptr
184c4     41 E4 85 F1 | 	sub	objptr, #65
184c8     00 12 06 F6 | 	mov	arg01, #0
184cc     09 14 CE F9 | 	bmask	arg02, #9
184d0     0F 17 02 F6 | 	mov	arg03, local01
184d4     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
184d8     01 1E 06 F1 | 	add	local01, #1
184dc     01 00 00 FF 
184e0     40 1E 16 F2 | 	cmp	local01, ##576 wc
184e4     D4 FF 9F CD |  if_b	jmp	#LR__1901
184e8     A7 F0 03 F6 | 	mov	ptra, fp
184ec     B2 00 A0 FD | 	call	#popregs_
184f0                 | _hg010b_spin2_scrollup_ret
184f0     2D 00 64 FD | 	ret
184f4                 | 
184f4                 | ' 
184f4                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
184f4                 | ' 
184f4                 | ' pub crlf()
184f4                 | _hg010b_spin2_crlf
184f4                 | ' 
184f4                 | ' cursor_x:=leading_spaces*2
184f4     01 00 00 FF 
184f8     B2 E4 05 F1 | 	add	objptr, ##690
184fc     F2 16 02 FB | 	rdlong	arg03, objptr
18500     01 16 66 F0 | 	shl	arg03, #1
18504     01 00 00 FF 
18508     7A E4 85 F1 | 	sub	objptr, ##634
1850c     F2 16 52 FC | 	wrword	arg03, objptr
18510                 | ' cursor_y+=1
18510     02 E4 05 F1 | 	add	objptr, #2
18514     F2 16 C2 FA | 	rdbyte	arg03, objptr
18518     01 16 06 F1 | 	add	arg03, #1
1851c     F2 16 42 FC | 	wrbyte	arg03, objptr
18520                 | ' if cursor_y>st_lines-1
18520     C3 E4 05 F1 | 	add	objptr, #195
18524     F2 16 02 FB | 	rdlong	arg03, objptr
18528     01 16 86 F1 | 	sub	arg03, #1
1852c     C3 E4 85 F1 | 	sub	objptr, #195
18530     F2 14 C2 FA | 	rdbyte	arg02, objptr
18534     3A E4 85 F1 | 	sub	objptr, #58
18538     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1853c     2C 00 90 ED |  if_be	jmp	#LR__1910
18540                 | '   scrollup()
18540     00 12 06 F6 | 	mov	arg01, #0
18544     01 00 00 FF 
18548     40 14 06 F6 | 	mov	arg02, ##576
1854c     10 16 06 F6 | 	mov	arg03, #16
18550     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
18554                 | '   cursor_y:=st_lines-1
18554     FD E4 05 F1 | 	add	objptr, #253
18558     F2 16 02 FB | 	rdlong	arg03, objptr
1855c     01 16 86 F1 | 	sub	arg03, #1
18560     C3 E4 85 F1 | 	sub	objptr, #195
18564     F2 16 42 FC | 	wrbyte	arg03, objptr
18568     3A E4 85 F1 | 	sub	objptr, #58
1856c                 | LR__1910
1856c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
1856c     38 E4 05 F1 | 	add	objptr, #56
18570     F2 14 E2 FA | 	rdword	arg02, objptr
18574     02 14 66 F0 | 	shl	arg02, #2
18578     02 E4 05 F1 | 	add	objptr, #2
1857c     F2 16 C2 FA | 	rdbyte	arg03, objptr
18580     3A E4 85 F1 | 	sub	objptr, #58
18584     04 16 66 F0 | 	shl	arg03, #4
18588     11 12 06 F6 | 	mov	arg01, #17
1858c     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
18590                 | _hg010b_spin2_crlf_ret
18590     2D 00 64 FD | 	ret
18594                 | 
18594                 | ' 
18594                 | ' 
18594                 | ' '*************************************************************************
18594                 | ' '                                                                        *
18594                 | ' '  Conversions                                                           *
18594                 | ' '                                                                        *
18594                 | ' '*************************************************************************
18594                 | ' 
18594                 | ' ''---------- Convert a integer to dec string, return a pointer
18594                 | ' 
18594                 | ' pub inttostr(i):result |q,pos,k,j
18594                 | _hg010b_spin2_inttostr
18594     03 4A 05 F6 | 	mov	COUNT_, #3
18598     A8 00 A0 FD | 	call	#pushregs_
1859c     09 1F 0A F6 | 	mov	local01, arg01 wz
185a0                 | ' 
185a0                 | ' j:=i
185a0                 | ' pos:=10
185a0     0A 20 06 F6 | 	mov	local02, #10
185a4                 | ' k:=0
185a4     00 22 06 F6 | 	mov	local03, #0
185a8                 | ' 
185a8                 | ' if (j==0)
185a8     18 00 90 5D |  if_ne	jmp	#LR__1920
185ac                 | '   n_string[0]:=48
185ac     49 E4 05 F1 | 	add	objptr, #73
185b0     F2 60 48 FC | 	wrbyte	#48, objptr
185b4                 | '   n_string[1]:=0
185b4     01 E4 05 F1 | 	add	objptr, #1
185b8     F2 00 48 FC | 	wrbyte	#0, objptr
185bc     4A E4 85 F1 | 	sub	objptr, #74
185c0     C4 00 90 FD | 	jmp	#LR__1927
185c4                 | LR__1920
185c4                 | ' 
185c4                 | ' else
185c4                 | '   if (j<0)
185c4     0F 1F 52 F6 | 	abs	local01, local01 wc
185c8                 | '     j:=0-j
185c8                 | '     k:=45
185c8     2D 22 06 C6 |  if_b	mov	local03, #45
185cc                 | ' 
185cc                 | '   n_string[11]:=0
185cc     54 E4 05 F1 | 	add	objptr, #84
185d0     F2 00 48 FC | 	wrbyte	#0, objptr
185d4     54 E4 85 F1 | 	sub	objptr, #84
185d8     97 24 48 FB | 	callpa	#(@LR__1922-@LR__1921)>>2,fcache_load_ptr_
185dc                 | '   repeat while (pos>-1)
185dc                 | LR__1921
185dc     00 20 56 F2 | 	cmps	local02, #0 wc
185e0     40 00 90 CD |  if_b	jmp	#LR__1923
185e4     0F FB 51 F6 | 	abs	result1, local01 wc
185e8     0A FA 15 FD | 	qdiv	result1, #10
185ec                 | '     q:=j//10
185ec     19 FA 61 FD | 	getqy	result1
185f0     FD FA 81 F6 | 	negc	result1, result1
185f4     0F 1F 52 F6 | 	abs	local01, local01 wc
185f8     0A 1E 16 FD | 	qdiv	local01, #10
185fc                 | '     q:=48+q
185fc     30 FA 05 F1 | 	add	result1, #48
18600                 | '     n_string[pos]:=q
18600     10 1F 02 F6 | 	mov	local01, local02
18604     49 E4 05 F1 | 	add	objptr, #73
18608     F2 1E 02 F1 | 	add	local01, objptr
1860c     0F FB 41 FC | 	wrbyte	result1, local01
18610                 | '     j:=j/10
18610     49 E4 85 F1 | 	sub	objptr, #73
18614                 | '     pos-=1
18614     01 20 86 F1 | 	sub	local02, #1
18618     18 1E 62 FD | 	getqx	local01
1861c     0F 1F 82 F6 | 	negc	local01, local01
18620     B8 FF 9F FD | 	jmp	#LR__1921
18624                 | LR__1922
18624                 | LR__1923
18624                 | '   repeat while n_string[0]==48
18624                 | LR__1924
18624     49 E4 05 F1 | 	add	objptr, #73
18628     F2 16 C2 FA | 	rdbyte	arg03, objptr
1862c     49 E4 85 F1 | 	sub	objptr, #73
18630     30 16 0E F2 | 	cmp	arg03, #48 wz
18634     20 00 90 5D |  if_ne	jmp	#LR__1925
18638                 | '     bytemove(@n_string,@n_string+1,12)
18638     49 E4 05 F1 | 	add	objptr, #73
1863c     F2 12 02 F6 | 	mov	arg01, objptr
18640     F2 14 02 F6 | 	mov	arg02, objptr
18644     49 E4 85 F1 | 	sub	objptr, #73
18648     01 14 06 F1 | 	add	arg02, #1
1864c     0C 16 06 F6 | 	mov	arg03, #12
18650     04 0D B0 FD | 	call	#__system____builtin_memmove
18654     CC FF 9F FD | 	jmp	#LR__1924
18658                 | LR__1925
18658                 | ' 
18658                 | '   if k==45
18658     2D 22 0E F2 | 	cmp	local03, #45 wz
1865c     28 00 90 5D |  if_ne	jmp	#LR__1926
18660                 | '      bytemove(@n_string+1,@n_string,12)
18660     49 E4 05 F1 | 	add	objptr, #73
18664     F2 12 02 F6 | 	mov	arg01, objptr
18668     01 12 06 F1 | 	add	arg01, #1
1866c     F2 14 02 F6 | 	mov	arg02, objptr
18670     49 E4 85 F1 | 	sub	objptr, #73
18674     0C 16 06 F6 | 	mov	arg03, #12
18678     DC 0C B0 FD | 	call	#__system____builtin_memmove
1867c                 | '      n_string[0]:=k
1867c     49 E4 05 F1 | 	add	objptr, #73
18680     F2 22 42 FC | 	wrbyte	local03, objptr
18684     49 E4 85 F1 | 	sub	objptr, #73
18688                 | LR__1926
18688                 | LR__1927
18688                 | ' 
18688                 | ' q:=@n_string
18688     49 E4 05 F1 | 	add	objptr, #73
1868c     F2 FA 01 F6 | 	mov	result1, objptr
18690     49 E4 85 F1 | 	sub	objptr, #73
18694                 | ' return q
18694     A7 F0 03 F6 | 	mov	ptra, fp
18698     B2 00 A0 FD | 	call	#popregs_
1869c                 | _hg010b_spin2_inttostr_ret
1869c     2D 00 64 FD | 	ret
186a0                 | 
186a0                 | ' 
186a0                 | ' '..............................................................................
186a0                 | ' 
186a0                 | ' {{
186a0                 | ' }}
186a0                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
186a0                 | _psram_spin2_startx
186a0     04 4A 05 F6 | 	mov	COUNT_, #4
186a4     A8 00 A0 FD | 	call	#pushregs_
186a8     09 1F 02 F6 | 	mov	local01, arg01
186ac     0B 21 02 F6 | 	mov	local02, arg03
186b0     0C 23 02 F6 | 	mov	local03, arg04
186b4                 | '     stop() ' restart driver if required
186b4     54 01 B0 FD | 	call	#_psram_spin2_stop
186b8     00 1E 0E F2 | 	cmp	local01, #0 wz
186bc     14 1E 06 AB |  if_e	rdlong	local01, #20
186c0     0F 15 52 F6 | 	abs	arg02, local01 wc
186c4     A1 07 00 FF 
186c8     40 14 16 FD | 	qdiv	arg02, ##1000000
186cc                 | ' 
186cc                 | '     ' use current frequency if none specified
186cc                 | ' 
186cc                 | '     if freq == 0 
186cc                 | '         freq := clkfreq 
186cc                 | ' 
186cc                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
186cc                 | ' 
186cc                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
186cc                 | '     if burst < 0
186cc                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
186cc     18 14 62 FD | 	getqx	arg02
186d0     0A 19 82 F6 | 	negc	arg04, arg02
186d4     03 18 66 F0 | 	shl	arg04, #3
186d8     84 18 86 F1 | 	sub	arg04, #132
186dc     04 18 46 F0 | 	shr	arg04, #4
186e0     04 18 66 F0 | 	shl	arg04, #4
186e4     00 18 56 F2 | 	cmps	arg04, #0 wc
186e8     0E FA 65 C6 |  if_b	neg	result1, #14
186ec     10 01 90 CD |  if_b	jmp	#LR__1933
186f0                 | ' 
186f0                 | '     ' compute the input delay
186f0                 | ' 
186f0                 | '     if delay <= 0
186f0     01 20 56 F2 | 	cmps	local02, #1 wc
186f4     10 00 90 3D |  if_ae	jmp	#LR__1930
186f8                 | '         delay := lookupDelay(freq)
186f8     0F 13 02 F6 | 	mov	arg01, local01
186fc     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
18700     FD 20 02 F6 | 	mov	local02, result1
18704     04 00 90 FD | 	jmp	#LR__1931
18708                 | LR__1930
18708                 | '     else
18708                 | '         delay <#= $f ' limit to 15
18708     0F 20 66 F3 | 	fles	local02, #15
1870c                 | LR__1931
1870c                 | ' 
1870c                 | '     ' create our lock
1870c                 | ' 
1870c                 | '     driverlock := LOCKNEW()  
1870c     00 FA 05 F6 | 	mov	result1, #0
18710     04 FA 61 FD | 	locknew	result1
18714     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18718     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1871c                 | '     if driverlock == -1
1871c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18720     FF FF 7F FF 
18724     FF FB 0D F2 | 	cmp	result1, ##-1 wz
18728                 | '         return ERR_NO_LOCK
18728     1A FA 65 A6 |  if_e	neg	result1, #26
1872c     D0 00 90 AD |  if_e	jmp	#LR__1933
18730                 | ' 
18730                 | '     ' patch in the proper data and HUB addresses to the startup structure
18730                 | ' 
18730                 | '     long[@startupData][0]:=clkfreq
18730     14 1E 06 FB | 	rdlong	local01, #20
18734     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
18738     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1873c                 | ' '    long[@startupData][1]:=$1000_0000
1873c                 | '     long[@startupData][5]:=@deviceData
1873c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
18740     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18744     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
18748     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1874c     14 14 06 F1 | 	add	arg02, #20
18750     0A 1F 62 FC | 	wrlong	local01, arg02
18754                 | '     long[@startupData][6]:=@qosData
18754     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
18758     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1875c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
18760     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
18764     18 14 06 F1 | 	add	arg02, #24
18768     0A 1F 62 FC | 	wrlong	local01, arg02
1876c                 | '     long[@startupData][7]:=$7FF00
1876c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18770     1C 1E 06 F1 | 	add	local01, #28
18774     FF 03 80 FF 
18778     0F 01 6A FC | 	wrlong	##524032, local01
1877c                 | ' 
1877c                 | '     ' setup some default bank and QoS parameter values
1877c                 | ' 
1877c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1877c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
18780     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
18784     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
18788     10 18 66 F0 | 	shl	arg04, #16
1878c     0C 20 66 F0 | 	shl	local02, #12
18790     10 19 42 F5 | 	or	arg04, local02
18794     18 18 46 F5 | 	or	arg04, #24
18798     0C 15 02 F6 | 	mov	arg02, arg04
1879c     02 16 06 F6 | 	mov	arg03, #2
187a0     A0 00 A0 FD | 	call	#\builtin_longfill_
187a4                 | '     longfill(@qosData, $FFFF0000, 8)
187a4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
187a8     07 16 06 F6 | 	mov	arg03, #7
187ac     28 16 62 FD | 	setq	arg03
187b0     80 FF FF FF 
187b4     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
187b8                 | ' 
187b8                 | '     ' get the address of the PSRAM memory driver so we can start it
187b8                 | ' 
187b8                 | '     driverAddr:= driver.getDriverAddr()
187b8                 | '     return @driver_start
187b8     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
187bc     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
187c0     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
187c4                 | ' 
187c4                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
187c4                 | ' 
187c4                 | '     if desiredcog < 0
187c4     00 22 56 F2 | 	cmps	local03, #0 wc
187c8                 | '         desiredcog := NEWCOG
187c8     10 22 06 C6 |  if_b	mov	local03, #16
187cc                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
187cc     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
187d0     11 25 02 F6 | 	mov	local04, local03
187d4     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
187d8     0A 25 F2 FC | 	coginit	local04, arg02 wc
187dc     01 24 66 C6 |  if_b	neg	local04, #1
187e0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
187e4     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
187e8                 | '     repeat until long[@startupData] == 0 
187e8     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
187ec                 | LR__1932
187ec     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
187f0     F8 FF 9F 5D |  if_ne	jmp	#LR__1932
187f4                 | ' 
187f4                 | '     return drivercog
187f4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
187f8     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
187fc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18800                 | LR__1933
18800     A7 F0 03 F6 | 	mov	ptra, fp
18804     B2 00 A0 FD | 	call	#popregs_
18808                 | _psram_spin2_startx_ret
18808     2D 00 64 FD | 	ret
1880c                 | 
1880c                 | ' 
1880c                 | ' '..............................................................................
1880c                 | ' 
1880c                 | ' {{
1880c                 | ' }}
1880c                 | ' PUB stop() : i
1880c                 | _psram_spin2_stop
1880c     00 00 06 F6 | 	mov	_var01, #0
18810                 | '     if drivercog <> -1
18810     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18814     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18818     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1881c     FF FF 7F FF 
18820     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
18824     70 00 90 AD |  if_e	jmp	#LR__1943
18828                 | '         cogstop(drivercog) ' a rather brutal stop
18828     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1882c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18830     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18834     03 12 62 FD | 	cogstop	arg01
18838     97 26 48 FB | 	callpa	#(@LR__1942-@LR__1940)>>2,fcache_load_ptr_
1883c                 | '         repeat i from 0 to 7
1883c                 | LR__1940
1883c                 | '             if long[$7FF00][i*3] < 0
1883c     00 FB 01 F6 | 	mov	result1, _var01
18840     01 FA 65 F0 | 	shl	result1, #1
18844     00 FB 01 F1 | 	add	result1, _var01
18848     02 FA 65 F0 | 	shl	result1, #2
1884c     FF 03 00 FF 
18850     00 FB 05 F1 | 	add	result1, ##524032
18854     FD FA 01 FB | 	rdlong	result1, result1
18858     00 FA 55 F2 | 	cmps	result1, #0 wc
1885c     1C 00 90 3D |  if_ae	jmp	#LR__1941
18860                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
18860     00 FB 01 F6 | 	mov	result1, _var01
18864     01 FA 65 F0 | 	shl	result1, #1
18868     00 FB 01 F1 | 	add	result1, _var01
1886c     02 FA 65 F0 | 	shl	result1, #2
18870     FF 03 00 FF 
18874     00 FB 05 F1 | 	add	result1, ##524032
18878     FD 20 68 FC | 	wrlong	#16, result1
1887c                 | LR__1941
1887c     01 00 06 F1 | 	add	_var01, #1
18880     08 00 56 F2 | 	cmps	_var01, #8 wc
18884     B4 FF 9F CD |  if_b	jmp	#LR__1940
18888                 | LR__1942
18888                 | '         drivercog := -1
18888     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1888c     FF FF FF FF 
18890     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
18894     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18898                 | LR__1943
18898                 | '     if driverlock <> -1
18898     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1889c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
188a0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
188a4     FF FF 7F FF 
188a8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
188ac                 | '         LOCKRET(driverlock)
188ac     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
188b0     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
188b4     05 12 62 5D |  if_ne	lockret	arg01
188b8                 | '         driverlock := -1
188b8     FF FF FF 5F 
188bc     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
188c0     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
188c4     00 FB 01 F6 | 	mov	result1, _var01
188c8                 | _psram_spin2_stop_ret
188c8     2D 00 64 FD | 	ret
188cc                 | 
188cc                 | ' 
188cc                 | ' '..............................................................................
188cc                 | ' 
188cc                 | ' {{
188cc                 | ' }}
188cc                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
188cc                 | _psram_spin2_read1
188cc                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
188cc                 | '     if drivercog == -1 ' driver must be running
188cc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
188d0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
188d4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
188d8     FF FF 7F FF 
188dc     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
188e0                 | '         return ERR_INACTIVE
188e0     0F FA 65 A6 |  if_e	neg	result1, #15
188e4     7C 00 90 AD |  if_e	jmp	#LR__1951
188e8                 | '     if count == 0 ' don't even bother reading
188e8     00 16 0E F2 | 	cmp	arg03, #0 wz
188ec                 | '         return 0
188ec     00 FA 05 A6 |  if_e	mov	result1, #0
188f0     70 00 90 AD |  if_e	jmp	#LR__1951
188f4                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
188f4     00 FA 05 F6 | 	mov	result1, #0
188f8     01 FA 61 FD | 	cogid	result1
188fc     FD 00 02 F6 | 	mov	_var01, result1
18900     01 00 66 F0 | 	shl	_var01, #1
18904     FD 00 02 F1 | 	add	_var01, result1
18908     02 00 66 F0 | 	shl	_var01, #2
1890c     FF 03 00 FF 
18910     00 03 06 F6 | 	mov	_var02, ##524032
18914     00 03 02 F1 | 	add	_var02, _var01
18918                 | '     if long[mailbox] < 0
18918     01 01 02 FB | 	rdlong	_var01, _var02
1891c     00 00 56 F2 | 	cmps	_var01, #0 wc
18920                 | '         return ERR_MAILBOX_BUSY
18920     1C FA 65 C6 |  if_b	neg	result1, #28
18924     3C 00 90 CD |  if_b	jmp	#LR__1951
18928                 | '     long[mailbox][2] := count
18928     08 02 06 F1 | 	add	_var02, #8
1892c     01 17 62 FC | 	wrlong	arg03, _var02
18930                 | '     long[mailbox][1] := dstHubAddr
18930     04 02 86 F1 | 	sub	_var02, #4
18934     01 13 62 FC | 	wrlong	arg01, _var02
18938     04 02 86 F1 | 	sub	_var02, #4
1893c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1893c     0A 05 02 F6 | 	mov	_var03, arg02
18940     D9 04 06 F4 | 	bitl	_var03, #217
18944     00 00 58 FF 
18948     00 00 06 F6 | 	mov	_var01, ##-1342177280
1894c     02 01 02 F1 | 	add	_var01, _var03
18950     01 01 62 FC | 	wrlong	_var01, _var02
18954                 | '     repeat
18954                 | LR__1950
18954                 | '         result := long[mailbox]    
18954     01 05 02 FB | 	rdlong	_var03, _var02
18958     00 04 56 F2 | 	cmps	_var03, #0 wc
1895c     F4 FF 9F CD |  if_b	jmp	#LR__1950
18960                 | '     while result < 0   
18960                 | '     return -result                       'return success or error
18960     02 FB 61 F6 | 	neg	result1, _var03
18964                 | LR__1951
18964                 | _psram_spin2_read1_ret
18964     2D 00 64 FD | 	ret
18968                 | 
18968                 | ' 
18968                 | ' '..............................................................................
18968                 | ' 
18968                 | ' {{
18968                 | ' }}
18968                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
18968                 | _psram_spin2_write
18968                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
18968                 | '     if drivercog == -1 ' driver must be running
18968     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1896c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
18970     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18974     FF FF 7F FF 
18978     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1897c                 | '         return ERR_INACTIVE
1897c     0F FA 65 A6 |  if_e	neg	result1, #15
18980     7C 00 90 AD |  if_e	jmp	#LR__1961
18984                 | '     if count == 0 ' don't even bother writing
18984     00 16 0E F2 | 	cmp	arg03, #0 wz
18988                 | '         return 0
18988     00 FA 05 A6 |  if_e	mov	result1, #0
1898c     70 00 90 AD |  if_e	jmp	#LR__1961
18990                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
18990     00 FA 05 F6 | 	mov	result1, #0
18994     01 FA 61 FD | 	cogid	result1
18998     FD 00 02 F6 | 	mov	_var01, result1
1899c     01 00 66 F0 | 	shl	_var01, #1
189a0     FD 00 02 F1 | 	add	_var01, result1
189a4     02 00 66 F0 | 	shl	_var01, #2
189a8     FF 03 00 FF 
189ac     00 03 06 F6 | 	mov	_var02, ##524032
189b0     00 03 02 F1 | 	add	_var02, _var01
189b4                 | '     if long[mailbox] < 0
189b4     01 01 02 FB | 	rdlong	_var01, _var02
189b8     00 00 56 F2 | 	cmps	_var01, #0 wc
189bc                 | '         return ERR_MAILBOX_BUSY
189bc     1C FA 65 C6 |  if_b	neg	result1, #28
189c0     3C 00 90 CD |  if_b	jmp	#LR__1961
189c4                 | '     long[mailbox][2] := count
189c4     08 02 06 F1 | 	add	_var02, #8
189c8     01 17 62 FC | 	wrlong	arg03, _var02
189cc                 | '     long[mailbox][1] := srcHubAddr
189cc     04 02 86 F1 | 	sub	_var02, #4
189d0     01 13 62 FC | 	wrlong	arg01, _var02
189d4     04 02 86 F1 | 	sub	_var02, #4
189d8                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
189d8     0A 05 02 F6 | 	mov	_var03, arg02
189dc     D9 04 06 F4 | 	bitl	_var03, #217
189e0     00 00 78 FF 
189e4     00 00 06 F6 | 	mov	_var01, ##-268435456
189e8     02 01 02 F1 | 	add	_var01, _var03
189ec     01 01 62 FC | 	wrlong	_var01, _var02
189f0                 | '     repeat
189f0                 | LR__1960
189f0                 | '         result := long[mailbox]    
189f0     01 05 02 FB | 	rdlong	_var03, _var02
189f4     00 04 56 F2 | 	cmps	_var03, #0 wc
189f8     F4 FF 9F CD |  if_b	jmp	#LR__1960
189fc                 | '     while result < 0   
189fc                 | '     return -result                       'return success or error
189fc     02 FB 61 F6 | 	neg	result1, _var03
18a00                 | LR__1961
18a00                 | _psram_spin2_write_ret
18a00     2D 00 64 FD | 	ret
18a04                 | 
18a04                 | ' 
18a04                 | ' ' generalized fill
18a04                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
18a04                 | _psram_spin2_fill
18a04     09 01 02 F6 | 	mov	_var01, arg01
18a08     0A 03 02 F6 | 	mov	_var02, arg02
18a0c     0B 05 02 F6 | 	mov	_var03, arg03
18a10     0D 07 02 F6 | 	mov	_var04, arg05
18a14                 | '     case datasize 
18a14     01 06 86 F1 | 	sub	_var04, #1
18a18     04 06 26 F3 | 	fle	_var04, #4
18a1c     30 06 62 FD | 	jmprel	_var04
18a20                 | LR__1970
18a20     10 00 90 FD | 	jmp	#LR__1971
18a24     18 00 90 FD | 	jmp	#LR__1972
18a28     2C 00 90 FD | 	jmp	#LR__1974
18a2c     1C 00 90 FD | 	jmp	#LR__1973
18a30     24 00 90 FD | 	jmp	#LR__1974
18a34                 | LR__1971
18a34                 | '         1: req := driver.R_WRITEBYTE
18a34     00 00 60 FF 
18a38     00 08 06 F6 | 	mov	_var05, ##-1073741824
18a3c     20 00 90 FD | 	jmp	#LR__1975
18a40                 | LR__1972
18a40                 | '         2: req := driver.R_WRITEWORD
18a40     00 00 68 FF 
18a44     00 08 06 F6 | 	mov	_var05, ##-805306368
18a48     14 00 90 FD | 	jmp	#LR__1975
18a4c                 | LR__1973
18a4c                 | '         4: req := driver.R_WRITELONG
18a4c     00 00 70 FF 
18a50     00 08 06 F6 | 	mov	_var05, ##-536870912
18a54     08 00 90 FD | 	jmp	#LR__1975
18a58                 | LR__1974
18a58                 | '         other : return ERR_INVALID
18a58     06 FA 65 F6 | 	neg	result1, #6
18a5c     94 00 90 FD | 	jmp	#LR__1977
18a60                 | LR__1975
18a60                 | '     if count == 0   ' nothing to do
18a60     00 04 0E F2 | 	cmp	_var03, #0 wz
18a64                 | '         return 0
18a64     00 FA 05 A6 |  if_e	mov	result1, #0
18a68     88 00 90 AD |  if_e	jmp	#LR__1977
18a6c                 | '     if drivercog == -1
18a6c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18a70     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
18a74     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18a78     FF FF 7F FF 
18a7c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
18a80                 | '         return ERR_INACTIVE
18a80     0F FA 65 A6 |  if_e	neg	result1, #15
18a84     6C 00 90 AD |  if_e	jmp	#LR__1977
18a88                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
18a88     00 FA 05 F6 | 	mov	result1, #0
18a8c     01 FA 61 FD | 	cogid	result1
18a90     FD 06 02 F6 | 	mov	_var04, result1
18a94     01 06 66 F0 | 	shl	_var04, #1
18a98     FD 06 02 F1 | 	add	_var04, result1
18a9c     02 06 66 F0 | 	shl	_var04, #2
18aa0     FF 03 00 FF 
18aa4     00 0B 06 F6 | 	mov	_var06, ##524032
18aa8     03 0B 02 F1 | 	add	_var06, _var04
18aac                 | '     if long[mailbox] < 0
18aac     05 07 02 FB | 	rdlong	_var04, _var06
18ab0     00 06 56 F2 | 	cmps	_var04, #0 wc
18ab4                 | '         return ERR_MAILBOX_BUSY
18ab4     1C FA 65 C6 |  if_b	neg	result1, #28
18ab8     38 00 90 CD |  if_b	jmp	#LR__1977
18abc                 | '     long[mailbox][2] := count
18abc     08 0A 06 F1 | 	add	_var06, #8
18ac0     05 05 62 FC | 	wrlong	_var03, _var06
18ac4                 | '     long[mailbox][1] := pattern
18ac4     04 0A 86 F1 | 	sub	_var06, #4
18ac8     05 03 62 FC | 	wrlong	_var02, _var06
18acc     04 0A 86 F1 | 	sub	_var06, #4
18ad0                 | '     long[mailbox] := req + (addr & $fffffff)
18ad0     04 0D 02 F6 | 	mov	_var07, _var05
18ad4     00 0F 02 F6 | 	mov	_var08, _var01
18ad8     7C 0E 06 F4 | 	bitl	_var08, #124
18adc     07 0D 02 F1 | 	add	_var07, _var08
18ae0     05 0D 62 FC | 	wrlong	_var07, _var06
18ae4                 | '     repeat
18ae4                 | LR__1976
18ae4                 | '         r := long[mailbox]
18ae4     05 0F 02 FB | 	rdlong	_var08, _var06
18ae8     00 0E 56 F2 | 	cmps	_var08, #0 wc
18aec     F4 FF 9F CD |  if_b	jmp	#LR__1976
18af0                 | '     while r < 0
18af0                 | '     return -r                  ' return 0 for success or negated error code
18af0     07 FB 61 F6 | 	neg	result1, _var08
18af4                 | LR__1977
18af4                 | _psram_spin2_fill_ret
18af4     2D 00 64 FD | 	ret
18af8                 | 
18af8                 | ' 
18af8                 | ' '..............................................................................
18af8                 | ' 
18af8                 | ' {{
18af8                 | ' }}
18af8                 | ' PUB setQos(cog, qos) : result | mailbox
18af8                 | _psram_spin2_setQos
18af8     09 01 02 F6 | 	mov	_var01, arg01
18afc                 | '     if drivercog == -1 ' driver must be running
18afc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18b00     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
18b04     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18b08     FF FF 7F FF 
18b0c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
18b10                 | '         return ERR_INACTIVE
18b10     0F FA 65 A6 |  if_e	neg	result1, #15
18b14     9C 00 90 AD |  if_e	jmp	#LR__1984
18b18                 | '     if cog < 0 or cog > 7 ' enforce cog id range
18b18     00 00 56 F2 | 	cmps	_var01, #0 wc
18b1c     08 00 90 CD |  if_b	jmp	#LR__1980
18b20     08 00 56 F2 | 	cmps	_var01, #8 wc
18b24     08 00 90 CD |  if_b	jmp	#LR__1981
18b28                 | LR__1980
18b28                 | '         return ERR_INVALID
18b28     06 FA 65 F6 | 	neg	result1, #6
18b2c     84 00 90 FD | 	jmp	#LR__1984
18b30                 | LR__1981
18b30                 | '     long[@qosData][cog] := qos & !$1ff
18b30     FF 15 26 F5 | 	andn	arg02, #511
18b34     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
18b38     02 00 66 F0 | 	shl	_var01, #2
18b3c     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
18b40     00 15 62 FC | 	wrlong	arg02, _var01
18b44                 | '     mailbox := $7FF00 + drivercog*12
18b44     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
18b48     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
18b4c     02 07 02 F6 | 	mov	_var04, _var03
18b50     01 06 66 F0 | 	shl	_var04, #1
18b54     02 07 02 F1 | 	add	_var04, _var03
18b58     02 06 66 F0 | 	shl	_var04, #2
18b5c     FF 03 00 FF 
18b60     00 09 06 F6 | 	mov	_var05, ##524032
18b64     03 09 02 F1 | 	add	_var05, _var04
18b68                 | '     repeat until LOCKTRY(driverlock)
18b68     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
18b6c                 | LR__1982
18b6c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18b70     06 12 72 FD | 	locktry	arg01 wc
18b74     F4 FF 9F 3D |  if_ae	jmp	#LR__1982
18b78     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18b7c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
18b7c     00 06 06 F6 | 	mov	_var04, #0
18b80     01 06 62 FD | 	cogid	_var04
18b84     00 00 78 FF 
18b88     00 02 06 F6 | 	mov	_var02, ##-268435456
18b8c     03 03 02 F1 | 	add	_var02, _var04
18b90     04 03 62 FC | 	wrlong	_var02, _var05
18b94                 | '     repeat while long[mailbox] < 0
18b94                 | LR__1983
18b94     04 03 02 FB | 	rdlong	_var02, _var05
18b98     00 02 56 F2 | 	cmps	_var02, #0 wc
18b9c     F4 FF 9F CD |  if_b	jmp	#LR__1983
18ba0                 | '     LOCKREL(driverlock)
18ba0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18ba4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18ba8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18bac     07 12 72 FD | 	lockrel	arg01 wc
18bb0     00 FA 05 F6 | 	mov	result1, #0
18bb4                 | LR__1984
18bb4                 | _psram_spin2_setQos_ret
18bb4     2D 00 64 FD | 	ret
18bb8                 | 
18bb8                 | ' 
18bb8                 | ' '..............................................................................
18bb8                 | ' 
18bb8                 | ' {{
18bb8                 | ' }}
18bb8                 | ' PRI lookupDelay(freq) : delay | profile
18bb8                 | _psram_spin2_lookupDelay
18bb8                 | '     profile := @delayTable
18bb8     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
18bbc     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
18bc0                 | '     delay := long[profile][0]
18bc0     00 03 02 FB | 	rdlong	_var02, _var01
18bc4                 | '     repeat while long[profile][1] 
18bc4     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
18bc8     97 16 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
18bcc                 | LR__1990
18bcc     04 00 06 F1 | 	add	_var01, #4
18bd0     00 FB 09 FB | 	rdlong	result1, _var01 wz
18bd4     04 00 86 F1 | 	sub	_var01, #4
18bd8     1C 00 90 AD |  if_e	jmp	#LR__1992
18bdc                 | '         if freq +< long[profile][1] 
18bdc     04 00 06 F1 | 	add	_var01, #4
18be0     00 FB 01 FB | 	rdlong	result1, _var01
18be4     04 00 86 F1 | 	sub	_var01, #4
18be8     FD 12 12 F2 | 	cmp	arg01, result1 wc
18bec                 | '             quit
18bec                 | '         profile += 4
18bec     04 00 06 31 |  if_ae	add	_var01, #4
18bf0                 | '         delay++
18bf0     01 02 06 31 |  if_ae	add	_var02, #1
18bf4     D4 FF 9F 3D |  if_ae	jmp	#LR__1990
18bf8                 | LR__1991
18bf8                 | LR__1992
18bf8     01 FB 01 F6 | 	mov	result1, _var02
18bfc                 | _psram_spin2_lookupDelay_ret
18bfc     2D 00 64 FD | 	ret
18c00                 | 
18c00                 | ' 
18c00                 | ' PUB start() : r
18c00                 | _usbnew_spin2_start
18c00     00 00 06 F6 | 	mov	_var01, #0
18c04                 | '   ifnot driver_cog
18c04     15 00 00 FF 
18c08     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
18c0c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
18c10     15 00 00 FF 
18c14     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
18c18     38 00 90 5D |  if_ne	jmp	#LR__2000
18c1c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
18c1c     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
18c20     10 00 06 F6 | 	mov	_var01, #16
18c24     00 16 06 F6 | 	mov	arg03, #0
18c28     28 16 62 FD | 	setq	arg03
18c2c     0A 01 F2 FC | 	coginit	_var01, arg02 wc
18c30     01 00 66 C6 |  if_b	neg	_var01, #1
18c34                 | '     if r >= 0
18c34     00 00 56 F2 | 	cmps	_var01, #0 wc
18c38                 | '       driver_cog := r+1
18c38     00 03 02 36 |  if_ae	mov	_var02, _var01
18c3c     01 02 06 31 |  if_ae	add	_var02, #1
18c40     15 00 00 3F 
18c44     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
18c48     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
18c4c     15 00 00 3F 
18c50     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
18c54                 | LR__2000
18c54     00 FB 01 F6 | 	mov	result1, _var01
18c58                 | _usbnew_spin2_start_ret
18c58     2D 00 64 FD | 	ret
18c5c                 | 
18c5c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
18c5c                 | ' 
18c5c                 | ' '' Return key event from buffer if there is one
18c5c                 | ' PUB get_key() : r | tail
18c5c                 | _usbnew_spin2_get_key
18c5c                 | '   tail := keyq_tail
18c5c     0F 00 00 FF 
18c60     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
18c64     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
18c68                 | '   if keyq_head == tail
18c68     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18c6c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
18c70     0F 00 00 FF 
18c74     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
18c78     00 03 0A F2 | 	cmp	_var02, _var01 wz
18c7c                 | '     return 0 ' No event
18c7c     00 FA 05 A6 |  if_e	mov	result1, #0
18c80     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
18c84                 | '   r := keyq_data[tail]
18c84     00 03 02 F6 | 	mov	_var02, _var01
18c88     02 02 66 F0 | 	shl	_var02, #2
18c8c     0F 00 00 FF 
18c90     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
18c94     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
18c98     01 FB 01 FB | 	rdlong	result1, _var02
18c9c                 | '   if ++tail == KEYQUEUE_SIZE
18c9c     01 00 06 F1 | 	add	_var01, #1
18ca0     80 00 0E F2 | 	cmp	_var01, #128 wz
18ca4                 | '     tail := 0
18ca4     00 00 06 A6 |  if_e	mov	_var01, #0
18ca8                 | '   keyq_tail := tail
18ca8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18cac     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
18cb0     0F 00 00 FF 
18cb4     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
18cb8                 | _usbnew_spin2_get_key_ret
18cb8     2D 00 64 FD | 	ret
18cbc                 | 
18cbc                 | ' 
18cbc                 | ' '' Emulate mouse movement
18cbc                 | ' PUB mouse_move(x,y)
18cbc                 | _usbnew_spin2_mouse_move
18cbc     02 4A 05 F6 | 	mov	COUNT_, #2
18cc0     A8 00 A0 FD | 	call	#pushregs_
18cc4     09 1F 02 F6 | 	mov	local01, arg01
18cc8     0A 21 02 F6 | 	mov	local02, arg02
18ccc                 | '   mouse_lock := 1
18ccc     14 00 00 FF 
18cd0     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18cd4     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
18cd8     14 00 00 FF 
18cdc     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18ce0                 | '   waitus(2) ' hope driver is now done
18ce0     02 12 06 F6 | 	mov	arg01, #2
18ce4     B0 0A B0 FD | 	call	#__system___waitus
18ce8                 | '   mouse_xacc := x
18ce8     14 00 00 FF 
18cec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
18cf0     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
18cf4                 | '   mouse_yacc := y
18cf4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
18cf8     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
18cfc                 | '   if mouse_outptr
18cfc     04 00 00 FF 
18d00     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
18d04     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
18d08     0F 00 00 FF 
18d0c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18d10     24 00 90 AD |  if_e	jmp	#LR__2010
18d14                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
18d14     10 20 66 F0 | 	shl	local02, #16
18d18     0F 1F 32 F9 | 	getword	local01, local01, #0
18d1c     0F 21 42 F5 | 	or	local02, local01
18d20     0F 00 00 FF 
18d24     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
18d28     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
18d2c     0F 00 00 FF 
18d30     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18d34     0F 21 62 FC | 	wrlong	local02, local01
18d38                 | LR__2010
18d38                 | '   mouse_lock := 0
18d38     14 00 00 FF 
18d3c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18d40     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
18d44     14 00 00 FF 
18d48     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18d4c     A7 F0 03 F6 | 	mov	ptra, fp
18d50     B2 00 A0 FD | 	call	#popregs_
18d54                 | _usbnew_spin2_mouse_move_ret
18d54     2D 00 64 FD | 	ret
18d58                 | 
18d58                 | '     '' Set HAVE_HIDPAD to enable.
18d58                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
18d58                 | ' 
18d58                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
18d58                 | ' PUB hidpad_id(dev) : r
18d58                 | _usbnew_spin2_hidpad_id
18d58                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
18d58     13 00 00 FF 
18d5c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18d60     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18d64     09 01 02 F6 | 	mov	_var01, arg01
18d68     03 00 66 F0 | 	shl	_var01, #3
18d6c     09 01 82 F1 | 	sub	_var01, arg01
18d70     02 00 66 F0 | 	shl	_var01, #2
18d74     00 FB 01 F1 | 	add	result1, _var01
18d78     FD FA 01 FB | 	rdlong	result1, result1
18d7c     13 00 00 FF 
18d80     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18d84                 | _usbnew_spin2_hidpad_id_ret
18d84     2D 00 64 FD | 	ret
18d88                 | 
18d88                 | ' 
18d88                 | ' '' Get all button states for a device
18d88                 | ' PUB hidpad_buttons(dev) : r 
18d88                 | _usbnew_spin2_hidpad_buttons
18d88                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
18d88     13 00 00 FF 
18d8c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18d90     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18d94     09 01 02 F6 | 	mov	_var01, arg01
18d98     03 00 66 F0 | 	shl	_var01, #3
18d9c     09 01 82 F1 | 	sub	_var01, arg01
18da0     02 00 66 F0 | 	shl	_var01, #2
18da4     00 FB 01 F1 | 	add	result1, _var01
18da8     14 FA 05 F1 | 	add	result1, #20
18dac     FD FA 01 FB | 	rdlong	result1, result1
18db0     13 00 00 FF 
18db4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18db8                 | _usbnew_spin2_hidpad_buttons_ret
18db8     2D 00 64 FD | 	ret
18dbc                 | 
18dbc                 | ' 
18dbc                 | ' '' Get state of an axis (normalized between -32768 and 32767)
18dbc                 | ' PUB hidpad_axis(dev,axnum) : r
18dbc                 | _usbnew_spin2_hidpad_axis
18dbc                 | '   if axnum +>= 6
18dbc     06 14 16 F2 | 	cmp	arg02, #6 wc
18dc0                 | '     return 0
18dc0     00 FA 05 36 |  if_ae	mov	result1, #0
18dc4     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
18dc8                 | '   else 
18dc8                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
18dc8     13 00 00 FF 
18dcc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18dd0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18dd4     09 01 02 F6 | 	mov	_var01, arg01
18dd8     03 00 66 F0 | 	shl	_var01, #3
18ddc     09 01 82 F1 | 	sub	_var01, arg01
18de0     02 00 66 F0 | 	shl	_var01, #2
18de4     00 FB 01 F1 | 	add	result1, _var01
18de8     04 00 06 F6 | 	mov	_var01, #4
18dec     0A 01 02 F1 | 	add	_var01, arg02
18df0     01 00 66 F0 | 	shl	_var01, #1
18df4     FD 00 02 F1 | 	add	_var01, result1
18df8     00 FB E1 FA | 	rdword	result1, _var01
18dfc     0F FA 65 F7 | 	signx	result1, #15
18e00     13 00 00 FF 
18e04     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18e08                 | _usbnew_spin2_hidpad_axis_ret
18e08     2D 00 64 FD | 	ret
18e0c                 | 
18e0c                 | ' 
18e0c                 | ' 
18e0c                 | ' '--------------------------------------------------------------
18e0c                 | ' '---------- Init the variables, start the cog. ----------------
18e0c                 | ' '--------------------------------------------------------------
18e0c                 | ' 
18e0c                 | ' pub start(mbox,scope,cache) :cog,base | iii
18e0c                 | _Audio095_8_sc_spin2_start
18e0c     04 4A 05 F6 | 	mov	COUNT_, #4
18e10     A8 00 A0 FD | 	call	#pushregs_
18e14     09 1F 02 F6 | 	mov	local01, arg01
18e18                 | ' 
18e18                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
18e18                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
18e18                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
18e18                 | ' 
18e18                 | ' mailboxaddr:=mbox 
18e18     F2 1E 62 FC | 	wrlong	local01, objptr
18e1c                 | ' scope_ptr:=scope
18e1c     04 E4 05 F1 | 	add	objptr, #4
18e20     F2 14 62 FC | 	wrlong	arg02, objptr
18e24                 | ' cache_ptr:=cache
18e24     04 E4 05 F1 | 	add	objptr, #4
18e28     F2 16 62 FC | 	wrlong	arg03, objptr
18e2c                 | ' base:=@channel1[0]
18e2c     04 E4 05 F1 | 	add	objptr, #4
18e30     F2 20 02 F6 | 	mov	local02, objptr
18e34                 | ' 
18e34                 | ' repeat iii from 0 to 7
18e34     00 22 06 F6 | 	mov	local03, #0
18e38     02 00 00 FF 
18e3c     98 E6 05 F1 | 	add	ptr__Audio095_8_sc_spin2_dat__, ##1176
18e40     0C E4 85 F1 | 	sub	objptr, #12
18e44     97 B0 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
18e48                 | LR__2020
18e48                 | '   long[base+64*iii]:=0
18e48     10 1F 02 F6 | 	mov	local01, local02
18e4c     11 FD 01 F6 | 	mov	result2, local03
18e50     06 FC 65 F0 | 	shl	result2, #6
18e54     FE 1E 02 F1 | 	add	local01, result2
18e58     0F 01 68 FC | 	wrlong	#0, local01
18e5c                 | '   long[base+64*iii+4]:=0
18e5c     10 1F 02 F6 | 	mov	local01, local02
18e60     11 FD 01 F6 | 	mov	result2, local03
18e64     06 FC 65 F0 | 	shl	result2, #6
18e68     FE 1E 02 F1 | 	add	local01, result2
18e6c     04 1E 06 F1 | 	add	local01, #4
18e70     0F 01 68 FC | 	wrlong	#0, local01
18e74                 | '   long[base+64*iii+12]:=0
18e74     10 25 02 F6 | 	mov	local04, local02
18e78     11 1F 02 F6 | 	mov	local01, local03
18e7c     06 1E 66 F0 | 	shl	local01, #6
18e80     0F 25 02 F1 | 	add	local04, local01
18e84     0C 24 06 F1 | 	add	local04, #12
18e88     12 01 68 FC | 	wrlong	#0, local04
18e8c                 | '   long[base+64*iii+16]:=2 
18e8c     10 25 02 F6 | 	mov	local04, local02
18e90     11 1F 02 F6 | 	mov	local01, local03
18e94     06 1E 66 F0 | 	shl	local01, #6
18e98     0F 25 02 F1 | 	add	local04, local01
18e9c     10 24 06 F1 | 	add	local04, #16
18ea0     12 05 68 FC | 	wrlong	#2, local04
18ea4                 | '   word[base+64*iii+20]:=0
18ea4     10 25 02 F6 | 	mov	local04, local02
18ea8     11 1F 02 F6 | 	mov	local01, local03
18eac     06 1E 66 F0 | 	shl	local01, #6
18eb0     0F 25 02 F1 | 	add	local04, local01
18eb4     14 24 06 F1 | 	add	local04, #20
18eb8     12 01 58 FC | 	wrword	#0, local04
18ebc                 | '   word[base+64*iii+22]:=8192
18ebc     10 25 02 F6 | 	mov	local04, local02
18ec0     11 1F 02 F6 | 	mov	local01, local03
18ec4     06 1E 66 F0 | 	shl	local01, #6
18ec8     0F 25 02 F1 | 	add	local04, local01
18ecc     16 24 06 F1 | 	add	local04, #22
18ed0     10 00 80 FF 
18ed4     12 01 58 FC | 	wrword	##8192, local04
18ed8                 | '   word[base+64*iii+24]:=4000+2*iii
18ed8     11 25 02 F6 | 	mov	local04, local03
18edc     01 24 66 F0 | 	shl	local04, #1
18ee0     07 00 00 FF 
18ee4     A0 1F 06 F6 | 	mov	local01, ##4000
18ee8     12 1F 02 F1 | 	add	local01, local04
18eec     10 25 02 F6 | 	mov	local04, local02
18ef0     11 FD 01 F6 | 	mov	result2, local03
18ef4     06 FC 65 F0 | 	shl	result2, #6
18ef8     FE 24 02 F1 | 	add	local04, result2
18efc     18 24 06 F1 | 	add	local04, #24
18f00     12 1F 52 FC | 	wrword	local01, local04
18f04                 | '   word[base+64*iii+26]:=2
18f04     10 25 02 F6 | 	mov	local04, local02
18f08     11 1F 02 F6 | 	mov	local01, local03
18f0c     06 1E 66 F0 | 	shl	local01, #6
18f10     0F 25 02 F1 | 	add	local04, local01
18f14     1A 24 06 F1 | 	add	local04, #26
18f18     12 05 58 FC | 	wrword	#2, local04
18f1c                 | '   long [base+64*iii+8]:=@null | $C0000000
18f1c     F3 1E 02 F6 | 	mov	local01, ptr__Audio095_8_sc_spin2_dat__
18f20     3E 1E 26 F4 | 	bith	local01, #62
18f24     10 25 02 F6 | 	mov	local04, local02
18f28     11 17 02 F6 | 	mov	arg03, local03
18f2c     06 16 66 F0 | 	shl	arg03, #6
18f30     0B 25 02 F1 | 	add	local04, arg03
18f34     08 24 06 F1 | 	add	local04, #8
18f38     12 1F 62 FC | 	wrlong	local01, local04
18f3c                 | '   long[base+64*iii+32]:=0
18f3c     10 25 02 F6 | 	mov	local04, local02
18f40     11 1F 02 F6 | 	mov	local01, local03
18f44     06 1E 66 F0 | 	shl	local01, #6
18f48     0F 25 02 F1 | 	add	local04, local01
18f4c     20 24 06 F1 | 	add	local04, #32
18f50     12 01 68 FC | 	wrlong	#0, local04
18f54                 | '   long[base+64*iii+36]:=0
18f54     10 25 02 F6 | 	mov	local04, local02
18f58     11 1F 02 F6 | 	mov	local01, local03
18f5c     06 1E 66 F0 | 	shl	local01, #6
18f60     0F 25 02 F1 | 	add	local04, local01
18f64     24 24 06 F1 | 	add	local04, #36
18f68     12 01 68 FC | 	wrlong	#0, local04
18f6c                 | '   long[base+64*iii+40]:=0
18f6c     10 25 02 F6 | 	mov	local04, local02
18f70     11 1F 02 F6 | 	mov	local01, local03
18f74     06 1E 66 F0 | 	shl	local01, #6
18f78     0F 25 02 F1 | 	add	local04, local01
18f7c     28 24 06 F1 | 	add	local04, #40
18f80     12 01 68 FC | 	wrlong	#0, local04
18f84                 | '   long[base+64*iii+44]:=0
18f84     10 25 02 F6 | 	mov	local04, local02
18f88     11 1F 02 F6 | 	mov	local01, local03
18f8c     06 1E 66 F0 | 	shl	local01, #6
18f90     0F 25 02 F1 | 	add	local04, local01
18f94     2C 24 06 F1 | 	add	local04, #44
18f98     12 01 68 FC | 	wrlong	#0, local04
18f9c     01 22 06 F1 | 	add	local03, #1
18fa0     08 22 56 F2 | 	cmps	local03, #8 wc
18fa4     A0 FE 9F CD |  if_b	jmp	#LR__2020
18fa8                 | LR__2021
18fa8     02 00 00 FF 
18fac     98 E6 85 F1 | 	sub	ptr__Audio095_8_sc_spin2_dat__, ##1176
18fb0                 | '   
18fb0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
18fb0     F3 14 02 F6 | 	mov	arg02, ptr__Audio095_8_sc_spin2_dat__
18fb4     F2 16 02 F6 | 	mov	arg03, objptr
18fb8     10 24 06 F6 | 	mov	local04, #16
18fbc     28 16 62 FD | 	setq	arg03
18fc0     0A 25 F2 FC | 	coginit	local04, arg02 wc
18fc4     01 24 66 C6 |  if_b	neg	local04, #1
18fc8                 | ' waitms(100)
18fc8     64 12 06 F6 | 	mov	arg01, #100
18fcc     5C 07 B0 FD | 	call	#__system___waitms
18fd0                 | ' return cog,base
18fd0     10 FD 01 F6 | 	mov	result2, local02
18fd4     12 FB 01 F6 | 	mov	result1, local04
18fd8     A7 F0 03 F6 | 	mov	ptra, fp
18fdc     B2 00 A0 FD | 	call	#popregs_
18fe0                 | _Audio095_8_sc_spin2_start_ret
18fe0     2D 00 64 FD | 	ret
18fe4                 | 
18fe4                 | ' 
18fe4                 | ' ' a simple play procedure to not poke everything. 
18fe4                 | ' 
18fe4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
18fe4                 | _Audio095_8_sc_spin2_play
18fe4     0B 17 52 F6 | 	abs	arg03, arg03 wc
18fe8     0F 1B 80 FF 
18fec     0B 3F 1A FD | 	qdiv	##3546911, arg03
18ff0                 | ' 
18ff0                 | ' base2:=@channel1[0]+64*channel
18ff0     0C E4 05 F1 | 	add	objptr, #12
18ff4     F2 16 02 F6 | 	mov	arg03, objptr
18ff8     06 12 66 F0 | 	shl	arg01, #6
18ffc     09 17 02 F1 | 	add	arg03, arg01
19000                 | ' long[base2+4]:=0
19000     0B 13 02 F6 | 	mov	arg01, arg03
19004     04 12 06 F1 | 	add	arg01, #4
19008     09 01 68 FC | 	wrlong	#0, arg01
1900c                 | ' long[base2+8]:=sample+$C0000000 
1900c     00 00 60 FF 
19010     00 14 06 F1 | 	add	arg02, ##-1073741824
19014     0B 13 02 F6 | 	mov	arg01, arg03
19018     08 12 06 F1 | 	add	arg01, #8
1901c     09 15 62 FC | 	wrlong	arg02, arg01
19020                 | ' long[base2+12]:= len-4
19020     0D 15 02 F6 | 	mov	arg02, arg05
19024     04 14 86 F1 | 	sub	arg02, #4
19028     0B 13 02 F6 | 	mov	arg01, arg03
1902c     0C 12 06 F1 | 	add	arg01, #12
19030     09 15 62 FC | 	wrlong	arg02, arg01
19034                 | ' long[base2+16]:= len+4
19034     04 1A 06 F1 | 	add	arg05, #4
19038     0B 15 02 F6 | 	mov	arg02, arg03
1903c     10 14 06 F1 | 	add	arg02, #16
19040     0A 1B 62 FC | 	wrlong	arg05, arg02
19044                 | ' word[base2+20]:=vol
19044     0B 1B 02 F6 | 	mov	arg05, arg03
19048     14 1A 06 F1 | 	add	arg05, #20
1904c     0D 19 52 FC | 	wrword	arg04, arg05
19050                 | ' word[base2+24]:= 3546911/splfreq 
19050     0C E4 85 F1 | 	sub	objptr, #12
19054     0B 19 02 F6 | 	mov	arg04, arg03
19058     18 1A 62 FD | 	getqx	arg05
1905c     0D 1B 82 F6 | 	negc	arg05, arg05
19060     18 18 06 F1 | 	add	arg04, #24
19064     0C 1B 52 FC | 	wrword	arg05, arg04
19068                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
19068     0B 19 02 F6 | 	mov	arg04, arg03
1906c     1A 18 06 F1 | 	add	arg04, #26
19070     0C 01 5A FC | 	wrword	#256, arg04
19074                 | ' long[base2+28]:=$40000000
19074     1C 16 06 F1 | 	add	arg03, #28
19078     00 00 A0 FF 
1907c     0B 01 68 FC | 	wrlong	##1073741824, arg03
19080                 | _Audio095_8_sc_spin2_play_ret
19080     2D 00 64 FD | 	ret
19084                 | 
19084                 | ' 
19084                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
19084                 | _Audio095_8_sc_spin2_play8
19084                 | ' 
19084                 | ' base2:=@channel1[0]+64*channel
19084     0C E4 05 F1 | 	add	objptr, #12
19088     F2 00 02 F6 | 	mov	_var01, objptr
1908c     06 12 66 F0 | 	shl	arg01, #6
19090     09 01 02 F1 | 	add	_var01, arg01
19094                 | ' long[base2]:=0
19094     00 01 68 FC | 	wrlong	#0, _var01
19098                 | ' long[base2+8]:=sample+$40000000 
19098     00 00 20 FF 
1909c     00 14 06 F1 | 	add	arg02, ##1073741824
190a0     00 13 02 F6 | 	mov	arg01, _var01
190a4     08 12 06 F1 | 	add	arg01, #8
190a8     09 15 62 FC | 	wrlong	arg02, arg01
190ac                 | ' if loop>=0
190ac     00 1C 56 F2 | 	cmps	arg06, #0 wc
190b0     0C E4 85 F1 | 	sub	objptr, #12
190b4     1C 00 90 CD |  if_b	jmp	#LR__2030
190b8                 | '   long[base2+12]:=loop
190b8     00 15 02 F6 | 	mov	arg02, _var01
190bc     0C 14 06 F1 | 	add	arg02, #12
190c0     0A 1D 62 FC | 	wrlong	arg06, arg02
190c4                 | '   long[base2+16]:= len
190c4     00 1D 02 F6 | 	mov	arg06, _var01
190c8     10 1C 06 F1 | 	add	arg06, #16
190cc     0E 1B 62 FC | 	wrlong	arg05, arg06
190d0     1C 00 90 FD | 	jmp	#LR__2031
190d4                 | LR__2030
190d4                 | ' else
190d4                 | '   long[base2+12]:= len
190d4     00 1D 02 F6 | 	mov	arg06, _var01
190d8     0C 1C 06 F1 | 	add	arg06, #12
190dc     0E 1B 62 FC | 	wrlong	arg05, arg06
190e0                 | '   long[base2+16]:= len+1
190e0     01 1A 06 F1 | 	add	arg05, #1
190e4     00 13 02 F6 | 	mov	arg01, _var01
190e8     10 12 06 F1 | 	add	arg01, #16
190ec     09 1B 62 FC | 	wrlong	arg05, arg01
190f0                 | LR__2031
190f0     0B 17 52 F6 | 	abs	arg03, arg03 wc
190f4     0F 1B 80 FF 
190f8     0B 3F 1A FD | 	qdiv	##3546911, arg03
190fc                 | ' word[base2+20]:=vol
190fc     00 17 02 F6 | 	mov	arg03, _var01
19100     14 16 06 F1 | 	add	arg03, #20
19104     0B 19 52 FC | 	wrword	arg04, arg03
19108                 | ' word[base2+24]:= 3546911/splfreq 
19108     00 13 02 F6 | 	mov	arg01, _var01
1910c     18 12 06 F1 | 	add	arg01, #24
19110                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
19110                 | ' long[base2+28]:=$40000000
19110     18 18 62 FD | 	getqx	arg04
19114     0C 19 82 F6 | 	negc	arg04, arg04
19118     09 19 52 FC | 	wrword	arg04, arg01
1911c     00 19 02 F6 | 	mov	arg04, _var01
19120     1A 18 06 F1 | 	add	arg04, #26
19124     0C 01 5A FC | 	wrword	#256, arg04
19128     1C 00 06 F1 | 	add	_var01, #28
1912c     00 00 A0 FF 
19130     00 01 68 FC | 	wrlong	##1073741824, _var01
19134                 | _Audio095_8_sc_spin2_play8_ret
19134     2D 00 64 FD | 	ret
19138                 | 
19138                 | ' 
19138                 | '     
19138                 | ' pub stop(channel) 'silence it
19138                 | _Audio095_8_sc_spin2_stop
19138                 | ' 
19138                 | ' word[@channel1[0]+64*channel+20]:=0
19138     0C E4 05 F1 | 	add	objptr, #12
1913c     F2 00 02 F6 | 	mov	_var01, objptr
19140     09 03 02 F6 | 	mov	_var02, arg01
19144     06 02 66 F0 | 	shl	_var02, #6
19148     01 01 02 F1 | 	add	_var01, _var02
1914c     14 00 06 F1 | 	add	_var01, #20
19150     00 01 58 FC | 	wrword	#0, _var01
19154                 | ' word[@channel1[0]+64*channel+20]:=0
19154     F2 00 02 F6 | 	mov	_var01, objptr
19158     06 12 66 F0 | 	shl	arg01, #6
1915c     09 01 02 F1 | 	add	_var01, arg01
19160     14 00 06 F1 | 	add	_var01, #20
19164     00 01 58 FC | 	wrword	#0, _var01
19168     0C E4 85 F1 | 	sub	objptr, #12
1916c                 | _Audio095_8_sc_spin2_stop_ret
1916c     2D 00 64 FD | 	ret
19170                 | hubexit
19170     81 00 80 FD | 	jmp	#cogexit
19174                 | 
19174                 | __system___setbaud
19174     14 62 06 FB | 	rdlong	muldiva_, #20
19178     09 65 02 F6 | 	mov	muldivb_, arg01
1917c     BA 00 A0 FD | 	call	#divide_
19180     97 06 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
19184                 | LR__2040
19184     3E FA 9D FA | 	rdpin	result1, #62 wc
19188     FE FC A1 F1 | 	subx	result2, result2
1918c     F4 FF 9F CD |  if_b	jmp	#LR__2040
19190                 | LR__2041
19190     40 7C 64 FD | 	dirl	#62
19194     40 7E 64 FD | 	dirl	#63
19198     F4 64 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1919c     10 64 66 F0 | 	shl	muldivb_, #16
191a0     07 14 06 F6 | 	mov	arg02, #7
191a4     32 15 02 F1 | 	add	arg02, muldivb_
191a8     3E F8 0C FC | 	wrpin	#124, #62
191ac     3E 14 16 FC | 	wxpin	arg02, #62
191b0     3F 7C 0C FC | 	wrpin	#62, #63
191b4     14 14 06 F1 | 	add	arg02, #20
191b8     3F 14 16 FC | 	wxpin	arg02, #63
191bc     41 7C 64 FD | 	dirh	#62
191c0     41 7E 64 FD | 	dirh	#63
191c4                 | __system___setbaud_ret
191c4     2D 00 64 FD | 	ret
191c8                 | 
191c8                 | __system___txraw
191c8     01 4A 05 F6 | 	mov	COUNT_, #1
191cc     A8 00 A0 FD | 	call	#pushregs_
191d0     09 1F 02 F6 | 	mov	local01, arg01
191d4     97 06 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
191d8                 | LR__2050
191d8     3E FA 9D FA | 	rdpin	result1, #62 wc
191dc     FE FC A1 F1 | 	subx	result2, result2
191e0     F4 FF 9F CD |  if_b	jmp	#LR__2050
191e4                 | LR__2051
191e4     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
191e8     C2 01 00 AF 
191ec     00 12 06 A6 |  if_e	mov	arg01, ##230400
191f0     80 FF BF AD |  if_e	call	#__system___setbaud
191f4     58 7C 64 FD | 	drvl	#62
191f8     3E 1E 26 FC | 	wypin	local01, #62
191fc     01 FA 05 F6 | 	mov	result1, #1
19200     A7 F0 03 F6 | 	mov	ptra, fp
19204     B2 00 A0 FD | 	call	#popregs_
19208                 | __system___txraw_ret
19208     2D 00 64 FD | 	ret
1920c                 | 
1920c                 | __system___rxraw
1920c     0D 4A 05 F6 | 	mov	COUNT_, #13
19210     A8 00 A0 FD | 	call	#pushregs_
19214     09 1F 02 F6 | 	mov	local01, arg01
19218     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1921c     C2 01 00 AF 
19220     00 12 06 A6 |  if_e	mov	arg01, ##230400
19224     4C FF BF AD |  if_e	call	#__system___setbaud
19228     00 1E 0E F2 | 	cmp	local01, #0 wz
1922c     20 00 90 AD |  if_e	jmp	#LR__2060
19230     14 22 06 FB | 	rdlong	local03, #20
19234     0A 22 46 F0 | 	shr	local03, #10
19238     11 1F 02 FD | 	qmul	local01, local03
1923c     1A FA 61 FD | 	getct	result1
19240     18 24 62 FD | 	getqx	local04
19244     12 FB 01 F1 | 	add	result1, local04
19248     FD 26 02 F6 | 	mov	local05, result1
1924c     04 00 90 FD | 	jmp	#LR__2061
19250                 | LR__2060
19250     00 26 06 F6 | 	mov	local05, #0
19254                 | LR__2061
19254     01 28 66 F6 | 	neg	local06, #1
19258     3F 2A 06 F6 | 	mov	local07, #63
1925c     00 2C 06 F6 | 	mov	local08, #0
19260     04 E8 05 F1 | 	add	ptr___system__dat__, #4
19264     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
19268     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
1926c                 | LR__2062
1926c     08 2E 16 F4 | 	testb	local09, #8 wc
19270     09 2E 76 F4 | 	testbn	local09, #9 andc
19274     0A 2E 46 F0 | 	shr	local09, #10
19278     01 2C 06 C6 |  if_b	mov	local08, #1
1927c     40 7E 6C 3D |  if_ae	testp	#63 wz
19280     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
19284     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
19288     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1928c                 | LR__2063
1928c     00 20 06 F6 | 	mov	local02, #0
19290     00 2C 0E F2 | 	cmp	local08, #0 wz
19294     01 20 66 56 |  if_ne	neg	local02, #1
19298     00 30 06 F6 | 	mov	local10, #0
1929c     00 22 06 F6 | 	mov	local03, #0
192a0     00 1E 0E F2 | 	cmp	local01, #0 wz
192a4     01 22 66 56 |  if_ne	neg	local03, #1
192a8     00 24 06 F6 | 	mov	local04, #0
192ac     00 32 06 F6 | 	mov	local11, #0
192b0     1A FA 61 FD | 	getct	result1
192b4     FD 34 02 F6 | 	mov	local12, result1
192b8     1A 37 02 F6 | 	mov	local13, local12
192bc     13 37 82 F1 | 	sub	local13, local05
192c0     00 36 56 F2 | 	cmps	local13, #0 wc
192c4     00 32 26 C6 |  if_b	not	local11, #0
192c8     00 32 0E F2 | 	cmp	local11, #0 wz
192cc     00 24 26 56 |  if_ne	not	local04, #0
192d0     12 23 CA F7 | 	test	local03, local04 wz
192d4     00 30 26 56 |  if_ne	not	local10, #0
192d8     18 21 4A F5 | 	or	local02, local10 wz
192dc     8C FF 9F AD |  if_e	jmp	#LR__2062
192e0     00 2C 0E F2 | 	cmp	local08, #0 wz
192e4     17 29 02 56 |  if_ne	mov	local06, local09
192e8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
192ec     04 E8 05 F1 | 	add	ptr___system__dat__, #4
192f0     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
192f4     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
192f8     14 FB 01 F6 | 	mov	result1, local06
192fc     A7 F0 03 F6 | 	mov	ptra, fp
19300     B2 00 A0 FD | 	call	#popregs_
19304                 | __system___rxraw_ret
19304     2D 00 64 FD | 	ret
19308                 | 
19308                 | __system___getus
19308     1A FC 71 FD | 	getct	result2 wc
1930c     1A 00 62 FD | 	getct	_var01
19310     10 E8 05 F1 | 	add	ptr___system__dat__, #16
19314     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
19318     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
1931c     20 00 90 5D |  if_ne	jmp	#LR__2070
19320     14 02 06 FB | 	rdlong	_var02, #20
19324     A1 07 00 FF 
19328     40 02 16 FD | 	qdiv	_var02, ##1000000
1932c     10 E8 05 F1 | 	add	ptr___system__dat__, #16
19330     18 FA 61 FD | 	getqx	result1
19334     FD 02 02 F6 | 	mov	_var02, result1
19338     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1933c     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
19340                 | LR__2070
19340     01 FD 11 FD | 	qdiv	result2, _var02
19344     19 FC 61 FD | 	getqy	result2
19348     28 FC 61 FD | 	setq	result2
1934c     01 01 12 FD | 	qdiv	_var01, _var02
19350     18 FA 61 FD | 	getqx	result1
19354                 | __system___getus_ret
19354     2D 00 64 FD | 	ret
19358                 | 
19358                 | __system____builtin_memmove
19358     09 01 02 F6 | 	mov	_var01, arg01
1935c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
19360     10 00 90 CD |  if_b	jmp	#LR__2080
19364     0A 03 02 F6 | 	mov	_var02, arg02
19368     0B 03 02 F1 | 	add	_var02, arg03
1936c     01 13 52 F2 | 	cmps	arg01, _var02 wc
19370     48 00 90 CD |  if_b	jmp	#LR__2086
19374                 | LR__2080
19374     0B 05 02 F6 | 	mov	_var03, arg03
19378     02 04 4E F0 | 	shr	_var03, #2 wz
1937c     18 00 90 AD |  if_e	jmp	#LR__2085
19380     97 0A 48 FB | 	callpa	#(@LR__2083-@LR__2081)>>2,fcache_load_ptr_
19384                 | LR__2081
19384     02 09 D8 FC | 	rep	@LR__2084, _var03
19388                 | LR__2082
19388     0A 05 02 FB | 	rdlong	_var03, arg02
1938c     09 05 62 FC | 	wrlong	_var03, arg01
19390     04 12 06 F1 | 	add	arg01, #4
19394     04 14 06 F1 | 	add	arg02, #4
19398                 | LR__2083
19398                 | LR__2084
19398                 | LR__2085
19398     02 16 CE F7 | 	test	arg03, #2 wz
1939c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
193a0     09 03 52 5C |  if_ne	wrword	_var02, arg01
193a4     02 12 06 51 |  if_ne	add	arg01, #2
193a8     02 14 06 51 |  if_ne	add	arg02, #2
193ac     01 16 CE F7 | 	test	arg03, #1 wz
193b0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
193b4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
193b8     28 00 90 FD | 	jmp	#LR__2092
193bc                 | LR__2086
193bc     0B 13 02 F1 | 	add	arg01, arg03
193c0     0B 15 02 F1 | 	add	arg02, arg03
193c4     0B 07 0A F6 | 	mov	_var04, arg03 wz
193c8     18 00 90 AD |  if_e	jmp	#LR__2091
193cc     97 0A 48 FB | 	callpa	#(@LR__2089-@LR__2087)>>2,fcache_load_ptr_
193d0                 | LR__2087
193d0     03 09 D8 FC | 	rep	@LR__2090, _var04
193d4                 | LR__2088
193d4     01 12 86 F1 | 	sub	arg01, #1
193d8     01 14 86 F1 | 	sub	arg02, #1
193dc     0A 03 C2 FA | 	rdbyte	_var02, arg02
193e0     09 03 42 FC | 	wrbyte	_var02, arg01
193e4                 | LR__2089
193e4                 | LR__2090
193e4                 | LR__2091
193e4                 | LR__2092
193e4     00 FB 01 F6 | 	mov	result1, _var01
193e8                 | __system____builtin_memmove_ret
193e8     2D 00 64 FD | 	ret
193ec                 | 
193ec                 | __system____builtin_strcpy
193ec     09 01 02 F6 | 	mov	_var01, arg01
193f0     97 0A 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
193f4                 | LR__2100
193f4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
193f8     09 FB 41 FC | 	wrbyte	result1, arg01
193fc     01 14 06 F1 | 	add	arg02, #1
19400     01 12 06 F1 | 	add	arg01, #1
19404     EC FF 9F 5D |  if_ne	jmp	#LR__2100
19408                 | LR__2101
19408     00 FB 01 F6 | 	mov	result1, _var01
1940c                 | __system____builtin_strcpy_ret
1940c     2D 00 64 FD | 	ret
19410                 | 
19410                 | __system____topofstack
19410     00 4A 05 F6 | 	mov	COUNT_, #0
19414     A8 00 A0 FD | 	call	#pushregs_
19418     08 F0 07 F1 | 	add	ptra, #8
1941c     04 4E 05 F1 | 	add	fp, #4
19420     A7 12 62 FC | 	wrlong	arg01, fp
19424     A7 FA 01 F6 | 	mov	result1, fp
19428     04 4E 85 F1 | 	sub	fp, #4
1942c     A7 F0 03 F6 | 	mov	ptra, fp
19430     B2 00 A0 FD | 	call	#popregs_
19434                 | __system____topofstack_ret
19434     2D 00 64 FD | 	ret
19438                 | 
19438                 | __system___lockmem
19438     00 FA 05 F6 | 	mov	result1, #0
1943c     01 FA 61 FD | 	cogid	result1
19440     00 FB 05 F1 | 	add	result1, #256
19444                 | LR__2110
19444     09 01 0A FB | 	rdlong	_var01, arg01 wz
19448     09 FB 61 AC |  if_e	wrlong	result1, arg01
1944c     09 01 02 AB |  if_e	rdlong	_var01, arg01
19450     09 01 02 AB |  if_e	rdlong	_var01, arg01
19454     FD 00 0A F2 | 	cmp	_var01, result1 wz
19458     E8 FF 9F 5D |  if_ne	jmp	#LR__2110
1945c                 | __system___lockmem_ret
1945c     2D 00 64 FD | 	ret
19460                 | 
19460                 | __system___string_cmp
19460     97 14 48 FB | 	callpa	#(@LR__2121-@LR__2120)>>2,fcache_load_ptr_
19464                 | LR__2120
19464     09 01 C2 FA | 	rdbyte	_var01, arg01
19468     0A 03 C2 FA | 	rdbyte	_var02, arg02
1946c     00 05 02 F6 | 	mov	_var03, _var01
19470     01 05 8A F1 | 	sub	_var03, _var02 wz
19474     01 12 06 F1 | 	add	arg01, #1
19478     01 14 06 F1 | 	add	arg02, #1
1947c     0C 00 90 5D |  if_ne	jmp	#LR__2122
19480     00 00 0E F2 | 	cmp	_var01, #0 wz
19484     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
19488     D8 FF 9F 5D |  if_ne	jmp	#LR__2120
1948c                 | LR__2121
1948c                 | LR__2122
1948c     02 FB 01 F6 | 	mov	result1, _var03
19490                 | __system___string_cmp_ret
19490     2D 00 64 FD | 	ret
19494                 | 
19494                 | __system___string_concat
19494     05 4A 05 F6 | 	mov	COUNT_, #5
19498     A8 00 A0 FD | 	call	#pushregs_
1949c     09 1F 02 F6 | 	mov	local01, arg01
194a0     0A 21 02 F6 | 	mov	local02, arg02
194a4     0F 13 02 F6 | 	mov	arg01, local01
194a8     09 23 02 F6 | 	mov	local03, arg01
194ac     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
194b0                 | LR__2130
194b0     11 FB C9 FA | 	rdbyte	result1, local03 wz
194b4     01 22 06 51 |  if_ne	add	local03, #1
194b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2130
194bc                 | LR__2131
194bc     09 23 82 F1 | 	sub	local03, arg01
194c0     11 25 02 F6 | 	mov	local04, local03
194c4     10 13 02 F6 | 	mov	arg01, local02
194c8     09 23 02 F6 | 	mov	local03, arg01
194cc     97 06 48 FB | 	callpa	#(@LR__2133-@LR__2132)>>2,fcache_load_ptr_
194d0                 | LR__2132
194d0     11 FB C9 FA | 	rdbyte	result1, local03 wz
194d4     01 22 06 51 |  if_ne	add	local03, #1
194d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2132
194dc                 | LR__2133
194dc     09 23 82 F1 | 	sub	local03, arg01
194e0     12 13 02 F6 | 	mov	arg01, local04
194e4     11 13 02 F1 | 	add	arg01, local03
194e8     01 12 06 F1 | 	add	arg01, #1
194ec     00 3D B0 FD | 	call	#__system___gc_alloc_managed
194f0     FD 26 0A F6 | 	mov	local05, result1 wz
194f4     28 00 90 AD |  if_e	jmp	#LR__2134
194f8     13 13 02 F6 | 	mov	arg01, local05
194fc     0F 15 02 F6 | 	mov	arg02, local01
19500     12 17 02 F6 | 	mov	arg03, local04
19504     50 FE BF FD | 	call	#__system____builtin_memmove
19508     13 13 02 F6 | 	mov	arg01, local05
1950c     12 13 02 F1 | 	add	arg01, local04
19510     01 22 06 F1 | 	add	local03, #1
19514     10 15 02 F6 | 	mov	arg02, local02
19518     11 17 02 F6 | 	mov	arg03, local03
1951c     38 FE BF FD | 	call	#__system____builtin_memmove
19520                 | LR__2134
19520     13 FB 01 F6 | 	mov	result1, local05
19524     A7 F0 03 F6 | 	mov	ptra, fp
19528     B2 00 A0 FD | 	call	#popregs_
1952c                 | __system___string_concat_ret
1952c     2D 00 64 FD | 	ret
19530                 | 
19530                 | __system___tx
19530     02 4A 05 F6 | 	mov	COUNT_, #2
19534     A8 00 A0 FD | 	call	#pushregs_
19538     09 1F 02 F6 | 	mov	local01, arg01
1953c     0A 1E 0E F2 | 	cmp	local01, #10 wz
19540     18 00 90 5D |  if_ne	jmp	#LR__2140
19544     08 E8 05 F1 | 	add	ptr___system__dat__, #8
19548     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
1954c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
19550     02 20 CE F7 | 	test	local02, #2 wz
19554     0D 12 06 56 |  if_ne	mov	arg01, #13
19558     6C FC BF 5D |  if_ne	call	#__system___txraw
1955c                 | LR__2140
1955c     0F 13 02 F6 | 	mov	arg01, local01
19560     64 FC BF FD | 	call	#__system___txraw
19564     A7 F0 03 F6 | 	mov	ptra, fp
19568     B2 00 A0 FD | 	call	#popregs_
1956c                 | __system___tx_ret
1956c     2D 00 64 FD | 	ret
19570                 | 
19570                 | __system___rx
19570     01 4A 05 F6 | 	mov	COUNT_, #1
19574     A8 00 A0 FD | 	call	#pushregs_
19578                 | LR__2150
19578     00 12 06 F6 | 	mov	arg01, #0
1957c     8C FC BF FD | 	call	#__system___rxraw
19580     FD 1E 02 F6 | 	mov	local01, result1
19584     FF FF 7F FF 
19588     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1958c     E8 FF 9F AD |  if_e	jmp	#LR__2150
19590     0D 1E 0E F2 | 	cmp	local01, #13 wz
19594     14 00 90 5D |  if_ne	jmp	#LR__2151
19598     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1959c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
195a0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
195a4     02 FA CD F7 | 	test	result1, #2 wz
195a8     0A 1E 06 56 |  if_ne	mov	local01, #10
195ac                 | LR__2151
195ac     08 E8 05 F1 | 	add	ptr___system__dat__, #8
195b0     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
195b4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
195b8     01 12 CE F7 | 	test	arg01, #1 wz
195bc     1C 00 90 AD |  if_e	jmp	#LR__2154
195c0     7F 1E 0E F2 | 	cmp	local01, #127 wz
195c4     0C 00 90 5D |  if_ne	jmp	#LR__2152
195c8     08 12 06 F6 | 	mov	arg01, #8
195cc     60 FF BF FD | 	call	#__system___tx
195d0     08 00 90 FD | 	jmp	#LR__2153
195d4                 | LR__2152
195d4     0F 13 02 F6 | 	mov	arg01, local01
195d8     54 FF BF FD | 	call	#__system___tx
195dc                 | LR__2153
195dc                 | LR__2154
195dc     0F FB 01 F6 | 	mov	result1, local01
195e0     A7 F0 03 F6 | 	mov	ptra, fp
195e4     B2 00 A0 FD | 	call	#popregs_
195e8                 | __system___rx_ret
195e8     2D 00 64 FD | 	ret
195ec                 | 
195ec                 | __system___pinwrite
195ec     09 01 02 F6 | 	mov	_var01, arg01
195f0     1F 00 06 F5 | 	and	_var01, #31
195f4     20 12 CE F7 | 	test	arg01, #32 wz
195f8     06 12 46 F0 | 	shr	arg01, #6
195fc     09 13 CA F9 | 	bmask	arg01, arg01
19600     00 13 62 F0 | 	shl	arg01, _var01
19604     00 15 62 F0 | 	shl	arg02, _var01
19608     1C 00 90 AD |  if_e	jmp	#LR__2160
1960c     09 F7 43 F5 | 	or	dirb, arg01
19610     FD 01 02 F6 | 	mov	_var01, outb
19614     09 01 22 F5 | 	andn	_var01, arg01
19618     09 15 02 F5 | 	and	arg02, arg01
1961c     0A 01 42 F5 | 	or	_var01, arg02
19620     00 FB 03 F6 | 	mov	outb, _var01
19624     18 00 90 FD | 	jmp	#LR__2161
19628                 | LR__2160
19628     09 F5 43 F5 | 	or	dira, arg01
1962c     FC 01 02 F6 | 	mov	_var01, outa
19630     09 01 22 F5 | 	andn	_var01, arg01
19634     09 15 02 F5 | 	and	arg02, arg01
19638     0A 01 42 F5 | 	or	_var01, arg02
1963c     00 F9 03 F6 | 	mov	outa, _var01
19640                 | LR__2161
19640                 | __system___pinwrite_ret
19640     2D 00 64 FD | 	ret
19644                 | 
19644                 | __system___basic_read_line
19644     06 4A 05 F6 | 	mov	COUNT_, #6
19648     A8 00 A0 FD | 	call	#pushregs_
1964c     09 1F 02 F6 | 	mov	local01, arg01
19650     00 20 06 F6 | 	mov	local02, #0
19654     18 22 06 F6 | 	mov	local03, #24
19658     00 24 06 F6 | 	mov	local04, #0
1965c     18 12 06 F6 | 	mov	arg01, #24
19660     8C 3B B0 FD | 	call	#__system___gc_alloc_managed
19664     FD 26 0A F6 | 	mov	local05, result1 wz
19668     13 FB 01 A6 |  if_e	mov	result1, local05
1966c     B0 00 90 AD |  if_e	jmp	#LR__2173
19670                 | LR__2170
19670     0F 13 02 F6 | 	mov	arg01, local01
19674     78 0B B0 FD | 	call	#__system___basic_get_char
19678     FD 28 02 F6 | 	mov	local06, result1
1967c     01 28 56 F2 | 	cmps	local06, #1 wc
19680     8C 00 90 CD |  if_b	jmp	#LR__2172
19684     0A 28 0E F2 | 	cmp	local06, #10 wz
19688     10 00 90 5D |  if_ne	jmp	#LR__2171
1968c     00 24 0E F2 | 	cmp	local04, #0 wz
19690     01 20 56 52 |  if_ne	cmps	local02, #1 wc
19694     01 20 86 11 |  if_a	sub	local02, #1
19698     74 00 90 FD | 	jmp	#LR__2172
1969c                 | LR__2171
1969c     0D 28 0E F2 | 	cmp	local06, #13 wz
196a0     01 24 06 A6 |  if_e	mov	local04, #1
196a4     00 24 06 56 |  if_ne	mov	local04, #0
196a8     08 28 0E F2 | 	cmp	local06, #8 wz
196ac     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
196b0     01 20 56 A2 |  if_e	cmps	local02, #1 wc
196b4     01 20 86 21 |  if_nc_and_z	sub	local02, #1
196b8     B4 FF 9F AD |  if_e	jmp	#LR__2170
196bc     13 17 02 F6 | 	mov	arg03, local05
196c0     10 17 02 F1 | 	add	arg03, local02
196c4     0B 29 42 FC | 	wrbyte	local06, arg03
196c8     01 20 06 F1 | 	add	local02, #1
196cc     11 21 0A F2 | 	cmp	local02, local03 wz
196d0     9C FF 9F 5D |  if_ne	jmp	#LR__2170
196d4     11 13 02 F6 | 	mov	arg01, local03
196d8     20 12 06 F1 | 	add	arg01, #32
196dc     10 3B B0 FD | 	call	#__system___gc_alloc_managed
196e0     FD 28 0A F6 | 	mov	local06, result1 wz
196e4     14 FB 01 A6 |  if_e	mov	result1, local06
196e8     34 00 90 AD |  if_e	jmp	#LR__2173
196ec     14 13 02 F6 | 	mov	arg01, local06
196f0     13 15 02 F6 | 	mov	arg02, local05
196f4     11 17 02 F6 | 	mov	arg03, local03
196f8     5C FC BF FD | 	call	#__system____builtin_memmove
196fc     20 22 06 F1 | 	add	local03, #32
19700     13 13 02 F6 | 	mov	arg01, local05
19704     24 3C B0 FD | 	call	#__system___gc_free
19708     14 27 02 F6 | 	mov	local05, local06
1970c     60 FF 9F FD | 	jmp	#LR__2170
19710                 | LR__2172
19710     13 29 02 F6 | 	mov	local06, local05
19714     10 29 02 F1 | 	add	local06, local02
19718     14 01 48 FC | 	wrbyte	#0, local06
1971c     13 FB 01 F6 | 	mov	result1, local05
19720                 | LR__2173
19720     A7 F0 03 F6 | 	mov	ptra, fp
19724     B2 00 A0 FD | 	call	#popregs_
19728                 | __system___basic_read_line_ret
19728     2D 00 64 FD | 	ret
1972c                 | 
1972c                 | __system___waitms
1972c     09 01 02 F6 | 	mov	_var01, arg01
19730     1A 02 62 FD | 	getct	_var02
19734     14 04 06 FB | 	rdlong	_var03, #20
19738     97 14 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
1973c                 | LR__2180
1973c     01 00 00 FF 
19740     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
19744     1C 00 90 CD |  if_b	jmp	#LR__2182
19748     02 03 02 F1 | 	add	_var02, _var03
1974c     01 13 02 F6 | 	mov	arg01, _var02
19750     00 12 66 FA | 	addct1	arg01, #0
19754     24 22 60 FD | 	waitct1
19758     01 00 00 FF 
1975c     E8 01 86 F1 | 	sub	_var01, ##1000
19760     D8 FF 9F FD | 	jmp	#LR__2180
19764                 | LR__2181
19764                 | LR__2182
19764     01 00 56 F2 | 	cmps	_var01, #1 wc
19768     28 00 90 CD |  if_b	jmp	#LR__2183
1976c     02 01 02 FD | 	qmul	_var01, _var03
19770     01 00 00 FF 
19774     E8 17 06 F6 | 	mov	arg03, ##1000
19778     19 FA 61 FD | 	getqy	result1
1977c     18 12 62 FD | 	getqx	arg01
19780     28 FA 61 FD | 	setq	result1
19784     0B 13 12 FD | 	qdiv	arg01, arg03
19788     18 12 62 FD | 	getqx	arg01
1978c     01 13 62 FA | 	addct1	arg01, _var02
19790     24 22 60 FD | 	waitct1
19794                 | LR__2183
19794                 | __system___waitms_ret
19794     2D 00 64 FD | 	ret
19798                 | 
19798                 | __system___waitus
19798     09 01 02 F6 | 	mov	_var01, arg01
1979c     1A 02 62 FD | 	getct	_var02
197a0     14 04 06 FB | 	rdlong	_var03, #20
197a4     97 14 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
197a8                 | LR__2190
197a8     A1 07 00 FF 
197ac     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
197b0     1C 00 90 CD |  if_b	jmp	#LR__2192
197b4     02 03 02 F1 | 	add	_var02, _var03
197b8     01 13 02 F6 | 	mov	arg01, _var02
197bc     00 12 66 FA | 	addct1	arg01, #0
197c0     24 22 60 FD | 	waitct1
197c4     A1 07 00 FF 
197c8     40 00 86 F1 | 	sub	_var01, ##1000000
197cc     D8 FF 9F FD | 	jmp	#LR__2190
197d0                 | LR__2191
197d0                 | LR__2192
197d0     01 00 56 F2 | 	cmps	_var01, #1 wc
197d4     28 00 90 CD |  if_b	jmp	#LR__2193
197d8     02 01 02 FD | 	qmul	_var01, _var03
197dc     A1 07 00 FF 
197e0     40 16 06 F6 | 	mov	arg03, ##1000000
197e4     19 FA 61 FD | 	getqy	result1
197e8     18 12 62 FD | 	getqx	arg01
197ec     28 FA 61 FD | 	setq	result1
197f0     0B 13 12 FD | 	qdiv	arg01, arg03
197f4     18 FA 61 FD | 	getqx	result1
197f8     FD 02 62 FA | 	addct1	_var02, result1
197fc     24 22 60 FD | 	waitct1
19800                 | LR__2193
19800                 | __system___waitus_ret
19800     2D 00 64 FD | 	ret
19804                 | 
19804                 | __system___mount
19804     0B 4A 05 F6 | 	mov	COUNT_, #11
19808     A8 00 A0 FD | 	call	#pushregs_
1980c     09 1F 02 F6 | 	mov	local01, arg01
19810     0A 21 0A F6 | 	mov	local02, arg02 wz
19814     01 22 66 F6 | 	neg	local03, #1
19818     01 FA 65 A6 |  if_e	neg	result1, #1
1981c     98 02 90 AD |  if_e	jmp	#LR__2215
19820     0F FB C1 FA | 	rdbyte	result1, local01
19824     2F FA 0D F2 | 	cmp	result1, #47 wz
19828     28 00 90 5D |  if_ne	jmp	#LR__2202
1982c     0F 13 02 F6 | 	mov	arg01, local01
19830     09 25 02 F6 | 	mov	local04, arg01
19834     97 06 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
19838                 | LR__2200
19838     12 FB C9 FA | 	rdbyte	result1, local04 wz
1983c     01 24 06 51 |  if_ne	add	local04, #1
19840     F4 FF 9F 5D |  if_ne	jmp	#LR__2200
19844                 | LR__2201
19844     09 25 82 F1 | 	sub	local04, arg01
19848     12 FB 01 F6 | 	mov	result1, local04
1984c     10 FA 55 F2 | 	cmps	result1, #16 wc
19850     14 00 90 CD |  if_b	jmp	#LR__2203
19854                 | LR__2202
19854     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19858     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1985c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19860     01 FA 65 F6 | 	neg	result1, #1
19864     50 02 90 FD | 	jmp	#LR__2215
19868                 | LR__2203
19868     00 26 06 F6 | 	mov	local05, #0
1986c                 | LR__2204
1986c     04 26 56 F2 | 	cmps	local05, #4 wc
19870     B0 00 90 3D |  if_ae	jmp	#LR__2209
19874     13 13 02 F6 | 	mov	arg01, local05
19878     02 12 66 F0 | 	shl	arg01, #2
1987c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19880     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19884     09 FB 09 FB | 	rdlong	result1, arg01 wz
19888     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1988c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
19890     13 23 02 86 |  if_c_and_z	mov	local03, local05
19894     84 00 90 8D |  if_c_and_z	jmp	#LR__2208
19898     13 13 02 F6 | 	mov	arg01, local05
1989c     02 12 66 F0 | 	shl	arg01, #2
198a0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
198a4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
198a8     09 13 02 FB | 	rdlong	arg01, arg01
198ac     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
198b0     09 25 02 F6 | 	mov	local04, arg01
198b4     97 06 48 FB | 	callpa	#(@LR__2206-@LR__2205)>>2,fcache_load_ptr_
198b8                 | LR__2205
198b8     12 FB C9 FA | 	rdbyte	result1, local04 wz
198bc     01 24 06 51 |  if_ne	add	local04, #1
198c0     F4 FF 9F 5D |  if_ne	jmp	#LR__2205
198c4                 | LR__2206
198c4     09 25 82 F1 | 	sub	local04, arg01
198c8     12 29 02 F6 | 	mov	local06, local04
198cc     14 13 02 F6 | 	mov	arg01, local06
198d0     0F 13 02 F1 | 	add	arg01, local01
198d4     09 FB C1 FA | 	rdbyte	result1, arg01
198d8     2F FA 0D F2 | 	cmp	result1, #47 wz
198dc     14 2B 02 56 |  if_ne	mov	local07, local06
198e0     0F 2B 02 51 |  if_ne	add	local07, local01
198e4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
198e8     30 00 90 5D |  if_ne	jmp	#LR__2207
198ec     13 17 02 F6 | 	mov	arg03, local05
198f0     02 16 66 F0 | 	shl	arg03, #2
198f4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
198f8     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
198fc     0B 15 02 FB | 	rdlong	arg02, arg03
19900     0F 13 02 F6 | 	mov	arg01, local01
19904     14 17 02 F6 | 	mov	arg03, local06
19908     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1990c     24 4D B0 FD | 	call	#__system__strncmp
19910     00 FA 0D F2 | 	cmp	result1, #0 wz
19914     13 23 02 A6 |  if_e	mov	local03, local05
19918     08 00 90 AD |  if_e	jmp	#LR__2209
1991c                 | LR__2207
1991c                 | LR__2208
1991c     01 26 06 F1 | 	add	local05, #1
19920     48 FF 9F FD | 	jmp	#LR__2204
19924                 | LR__2209
19924     FF FF 7F FF 
19928     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1992c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19930     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
19934     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19938     01 FA 65 A6 |  if_e	neg	result1, #1
1993c     78 01 90 AD |  if_e	jmp	#LR__2215
19940     11 27 02 F6 | 	mov	local05, local03
19944     13 2B 02 F6 | 	mov	local07, local05
19948     02 2A 66 F0 | 	shl	local07, #2
1994c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19950     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
19954     15 29 0A FB | 	rdlong	local06, local07 wz
19958     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1995c     58 00 90 AD |  if_e	jmp	#LR__2210
19960     4C 28 06 F1 | 	add	local06, #76
19964     14 2B 0A FB | 	rdlong	local07, local06 wz
19968     4C 28 86 F1 | 	sub	local06, #76
1996c     48 00 90 AD |  if_e	jmp	#LR__2210
19970     4C 28 06 F1 | 	add	local06, #76
19974     14 2B 02 FB | 	rdlong	local07, local06
19978     15 23 02 F6 | 	mov	local03, local07
1997c     13 2A 46 F7 | 	zerox	local07, #19
19980     14 22 46 F0 | 	shr	local03, #20
19984     02 22 66 F0 | 	shl	local03, #2
19988     ED 22 02 F1 | 	add	local03, __methods__
1998c     11 23 02 FB | 	rdlong	local03, local03
19990     13 29 02 F6 | 	mov	local06, local05
19994     02 28 66 F0 | 	shl	local06, #2
19998     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1999c     F4 28 02 F1 | 	add	local06, ptr___system__dat__
199a0     14 13 02 FB | 	rdlong	arg01, local06
199a4     F2 28 02 F6 | 	mov	local06, objptr
199a8     15 E5 01 F6 | 	mov	objptr, local07
199ac     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
199b0     2D 22 62 FD | 	call	local03
199b4     14 E5 01 F6 | 	mov	objptr, local06
199b8                 | LR__2210
199b8     13 2D 02 F6 | 	mov	local08, local05
199bc     02 2C 66 F0 | 	shl	local08, #2
199c0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
199c4     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
199c8     16 21 62 FC | 	wrlong	local02, local08
199cc     00 20 0E F2 | 	cmp	local02, #0 wz
199d0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
199d4     18 00 90 5D |  if_ne	jmp	#LR__2211
199d8     02 26 66 F0 | 	shl	local05, #2
199dc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
199e0     F4 26 02 F1 | 	add	local05, ptr___system__dat__
199e4     13 01 68 FC | 	wrlong	#0, local05
199e8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
199ec     C4 00 90 FD | 	jmp	#LR__2214
199f0                 | LR__2211
199f0     13 2F 02 F6 | 	mov	local09, local05
199f4     04 2E 66 F0 | 	shl	local09, #4
199f8     24 E8 05 F1 | 	add	ptr___system__dat__, #36
199fc     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
19a00     17 13 02 F6 | 	mov	arg01, local09
19a04     0F 15 02 F6 | 	mov	arg02, local01
19a08     10 16 06 F6 | 	mov	arg03, #16
19a0c     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
19a10     74 4B B0 FD | 	call	#__system__strncpy
19a14     48 20 06 F1 | 	add	local02, #72
19a18     10 2D 0A FB | 	rdlong	local08, local02 wz
19a1c     48 20 86 F1 | 	sub	local02, #72
19a20     7C 00 90 AD |  if_e	jmp	#LR__2213
19a24     48 20 06 F1 | 	add	local02, #72
19a28     10 2D 02 FB | 	rdlong	local08, local02
19a2c     16 31 02 F6 | 	mov	local10, local08
19a30     13 2C 46 F7 | 	zerox	local08, #19
19a34     14 30 46 F0 | 	shr	local10, #20
19a38     02 30 66 F0 | 	shl	local10, #2
19a3c     ED 30 02 F1 | 	add	local10, __methods__
19a40     18 31 02 FB | 	rdlong	local10, local10
19a44     17 13 02 F6 | 	mov	arg01, local09
19a48     F2 32 02 F6 | 	mov	local11, objptr
19a4c     16 E5 01 F6 | 	mov	objptr, local08
19a50     2D 30 62 FD | 	call	local10
19a54     19 E5 01 F6 | 	mov	objptr, local11
19a58     FD 12 0A F6 | 	mov	arg01, result1 wz
19a5c     40 00 90 AD |  if_e	jmp	#LR__2212
19a60     13 2D 02 F6 | 	mov	local08, local05
19a64     02 2C 66 F0 | 	shl	local08, #2
19a68     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19a6c     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
19a70     16 01 68 FC | 	wrlong	#0, local08
19a74     02 26 66 F0 | 	shl	local05, #2
19a78     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
19a7c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19a80     13 01 68 FC | 	wrlong	#0, local05
19a84     09 13 6A F6 | 	neg	arg01, arg01 wz
19a88     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
19a8c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19a90     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19a94     01 FA 65 56 |  if_ne	neg	result1, #1
19a98     00 FA 05 A6 |  if_e	mov	result1, #0
19a9c     18 00 90 FD | 	jmp	#LR__2215
19aa0                 | LR__2212
19aa0                 | LR__2213
19aa0     02 26 66 F0 | 	shl	local05, #2
19aa4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19aa8     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19aac     13 2F 62 FC | 	wrlong	local09, local05
19ab0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19ab4                 | LR__2214
19ab4     00 FA 05 F6 | 	mov	result1, #0
19ab8                 | LR__2215
19ab8     A7 F0 03 F6 | 	mov	ptra, fp
19abc     B2 00 A0 FD | 	call	#popregs_
19ac0                 | __system___mount_ret
19ac0     2D 00 64 FD | 	ret
19ac4                 | 
19ac4                 | __system___chdir
19ac4     00 4A 05 F6 | 	mov	COUNT_, #0
19ac8     A8 00 A0 FD | 	call	#pushregs_
19acc     40 F0 07 F1 | 	add	ptra, #64
19ad0     04 4E 05 F1 | 	add	fp, #4
19ad4     A7 12 62 FC | 	wrlong	arg01, fp
19ad8     04 4E 05 F1 | 	add	fp, #4
19adc     A7 14 02 F6 | 	mov	arg02, fp
19ae0     08 4E 85 F1 | 	sub	fp, #8
19ae4     80 47 B0 FD | 	call	#__system__stat
19ae8     3C 4E 05 F1 | 	add	fp, #60
19aec     A7 FA 61 FC | 	wrlong	result1, fp
19af0     3C 4E 85 F1 | 	sub	fp, #60
19af4     00 FA 0D F2 | 	cmp	result1, #0 wz
19af8     3C 4E 05 51 |  if_ne	add	fp, #60
19afc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
19b00     3C 4E 85 51 |  if_ne	sub	fp, #60
19b04     BC 00 90 5D |  if_ne	jmp	#LR__2222
19b08     10 4E 05 F1 | 	add	fp, #16
19b0c     A7 12 02 FB | 	rdlong	arg01, fp
19b10     10 4E 85 F1 | 	sub	fp, #16
19b14     78 00 00 FF 
19b18     00 12 06 F5 | 	and	arg01, ##61440
19b1c     08 00 00 FF 
19b20     00 12 0E F2 | 	cmp	arg01, ##4096 wz
19b24     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
19b28     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
19b2c     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
19b30     01 FA 65 56 |  if_ne	neg	result1, #1
19b34     8C 00 90 5D |  if_ne	jmp	#LR__2222
19b38     04 4E 05 F1 | 	add	fp, #4
19b3c     A7 16 02 FB | 	rdlong	arg03, fp
19b40     04 4E 85 F1 | 	sub	fp, #4
19b44     0B 17 C2 FA | 	rdbyte	arg03, arg03
19b48     2F 16 0E F2 | 	cmp	arg03, #47 wz
19b4c     24 00 90 5D |  if_ne	jmp	#LR__2220
19b50     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19b54     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19b58     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19b5c     04 4E 05 F1 | 	add	fp, #4
19b60     A7 14 02 FB | 	rdlong	arg02, fp
19b64     04 4E 85 F1 | 	sub	fp, #4
19b68     00 17 06 F6 | 	mov	arg03, #256
19b6c     18 4A B0 FD | 	call	#__system__strncpy
19b70     4C 00 90 FD | 	jmp	#LR__2221
19b74                 | LR__2220
19b74     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19b78     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19b7c     38 4E 05 F1 | 	add	fp, #56
19b80     A7 12 62 FC | 	wrlong	arg01, fp
19b84     38 4E 85 F1 | 	sub	fp, #56
19b88     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
19b8c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
19b90     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19b94     00 17 06 F6 | 	mov	arg03, #256
19b98     EC 49 B0 FD | 	call	#__system__strncpy
19b9c     38 4E 05 F1 | 	add	fp, #56
19ba0     A7 12 02 FB | 	rdlong	arg01, fp
19ba4     34 4E 85 F1 | 	sub	fp, #52
19ba8     A7 14 02 FB | 	rdlong	arg02, fp
19bac     04 4E 85 F1 | 	sub	fp, #4
19bb0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19bb4     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
19bb8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19bbc     10 00 B0 FD | 	call	#__system____getvfsforfile
19bc0                 | LR__2221
19bc0     00 FA 05 F6 | 	mov	result1, #0
19bc4                 | LR__2222
19bc4     A7 F0 03 F6 | 	mov	ptra, fp
19bc8     B2 00 A0 FD | 	call	#popregs_
19bcc                 | __system___chdir_ret
19bcc     2D 00 64 FD | 	ret
19bd0                 | 
19bd0                 | __system____getvfsforfile
19bd0     0E 4A 05 F6 | 	mov	COUNT_, #14
19bd4     A8 00 A0 FD | 	call	#pushregs_
19bd8     09 1F 02 F6 | 	mov	local01, arg01
19bdc     0A 21 02 F6 | 	mov	local02, arg02
19be0     0B 23 02 F6 | 	mov	local03, arg03
19be4     97 10 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
19be8                 | LR__2230
19be8     10 FB C1 FA | 	rdbyte	result1, local02
19bec     2F FA 0D F2 | 	cmp	result1, #47 wz
19bf0     01 20 06 A1 |  if_e	add	local02, #1
19bf4     10 25 C2 AA |  if_e	rdbyte	local04, local02
19bf8     01 20 86 A1 |  if_e	sub	local02, #1
19bfc     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
19c00     01 20 06 A1 |  if_e	add	local02, #1
19c04     E0 FF 9F AD |  if_e	jmp	#LR__2230
19c08                 | LR__2231
19c08     10 25 C2 FA | 	rdbyte	local04, local02
19c0c     2F 24 0E F2 | 	cmp	local04, #47 wz
19c10     14 00 90 5D |  if_ne	jmp	#LR__2232
19c14     0F 13 02 F6 | 	mov	arg01, local01
19c18     10 15 02 F6 | 	mov	arg02, local02
19c1c     00 17 06 F6 | 	mov	arg03, #256
19c20     64 49 B0 FD | 	call	#__system__strncpy
19c24     7C 00 90 FD | 	jmp	#LR__2234
19c28                 | LR__2232
19c28     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19c2c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
19c30     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19c34     0F 13 02 F6 | 	mov	arg01, local01
19c38     00 17 06 F6 | 	mov	arg03, #256
19c3c     48 49 B0 FD | 	call	#__system__strncpy
19c40     10 25 CA FA | 	rdbyte	local04, local02 wz
19c44     5C 00 90 AD |  if_e	jmp	#LR__2233
19c48     10 25 C2 FA | 	rdbyte	local04, local02
19c4c     2E 24 0E F2 | 	cmp	local04, #46 wz
19c50     01 20 06 A1 |  if_e	add	local02, #1
19c54     10 27 C2 AA |  if_e	rdbyte	local05, local02
19c58     01 20 86 A1 |  if_e	sub	local02, #1
19c5c     13 29 02 A6 |  if_e	mov	local06, local05
19c60     07 28 4E A7 |  if_e	zerox	local06, #7 wz
19c64     3C 00 90 AD |  if_e	jmp	#LR__2233
19c68     0F 27 C2 FA | 	rdbyte	local05, local01
19c6c     2F 26 0E F2 | 	cmp	local05, #47 wz
19c70     01 1E 06 A1 |  if_e	add	local01, #1
19c74     0F 25 C2 AA |  if_e	rdbyte	local04, local01
19c78     01 1E 86 A1 |  if_e	sub	local01, #1
19c7c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
19c80     44 01 00 5F 
19c84     40 15 06 56 |  if_ne	mov	arg02, ##@LR__4280
19c88     0F 13 02 56 |  if_ne	mov	arg01, local01
19c8c     00 17 06 56 |  if_ne	mov	arg03, #256
19c90     40 49 B0 5D |  if_ne	call	#__system__strncat
19c94     0F 13 02 F6 | 	mov	arg01, local01
19c98     10 15 02 F6 | 	mov	arg02, local02
19c9c     00 17 06 F6 | 	mov	arg03, #256
19ca0     30 49 B0 FD | 	call	#__system__strncat
19ca4                 | LR__2233
19ca4                 | LR__2234
19ca4     0F 13 02 F6 | 	mov	arg01, local01
19ca8     E8 4A B0 FD | 	call	#__system___normalizeName
19cac     0F 25 CA FA | 	rdbyte	local04, local01 wz
19cb0     1C 00 90 AD |  if_e	jmp	#LR__2235
19cb4     0F 25 C2 FA | 	rdbyte	local04, local01
19cb8     2F 24 0E F2 | 	cmp	local04, #47 wz
19cbc     01 1E 06 A1 |  if_e	add	local01, #1
19cc0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
19cc4     01 1E 86 A1 |  if_e	sub	local01, #1
19cc8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
19ccc     18 00 90 5D |  if_ne	jmp	#LR__2236
19cd0                 | LR__2235
19cd0     01 00 00 FF 
19cd4     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
19cd8     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
19cdc     01 00 00 FF 
19ce0     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
19ce4     EC 01 90 FD | 	jmp	#LR__2250
19ce8                 | LR__2236
19ce8     00 2A 06 F6 | 	mov	local07, #0
19cec                 | LR__2237
19cec     04 2A 56 F2 | 	cmps	local07, #4 wc
19cf0     CC 01 90 3D |  if_ae	jmp	#LR__2249
19cf4     15 29 02 F6 | 	mov	local06, local07
19cf8     02 28 66 F0 | 	shl	local06, #2
19cfc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19d00     F4 28 02 F1 | 	add	local06, ptr___system__dat__
19d04     14 29 0A FB | 	rdlong	local06, local06 wz
19d08     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19d0c     A8 01 90 AD |  if_e	jmp	#LR__2248
19d10     15 25 02 F6 | 	mov	local04, local07
19d14     02 24 66 F0 | 	shl	local04, #2
19d18     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19d1c     F4 24 02 F1 | 	add	local04, ptr___system__dat__
19d20     12 13 02 FB | 	rdlong	arg01, local04
19d24     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19d28     09 2D 02 F6 | 	mov	local08, arg01
19d2c     97 06 48 FB | 	callpa	#(@LR__2239-@LR__2238)>>2,fcache_load_ptr_
19d30                 | LR__2238
19d30     16 FB C9 FA | 	rdbyte	result1, local08 wz
19d34     01 2C 06 51 |  if_ne	add	local08, #1
19d38     F4 FF 9F 5D |  if_ne	jmp	#LR__2238
19d3c                 | LR__2239
19d3c     09 2D 82 F1 | 	sub	local08, arg01
19d40     16 2F 02 F6 | 	mov	local09, local08
19d44     17 25 02 F6 | 	mov	local04, local09
19d48     0F 25 02 F1 | 	add	local04, local01
19d4c     12 29 C2 FA | 	rdbyte	local06, local04
19d50     2F 28 0E F2 | 	cmp	local06, #47 wz
19d54     17 31 02 56 |  if_ne	mov	local10, local09
19d58     0F 31 02 51 |  if_ne	add	local10, local01
19d5c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
19d60     54 01 90 5D |  if_ne	jmp	#LR__2247
19d64     15 17 02 F6 | 	mov	arg03, local07
19d68     02 16 66 F0 | 	shl	arg03, #2
19d6c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19d70     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19d74     0B 15 02 FB | 	rdlong	arg02, arg03
19d78     17 17 02 F6 | 	mov	arg03, local09
19d7c     0F 13 02 F6 | 	mov	arg01, local01
19d80     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19d84     AC 48 B0 FD | 	call	#__system__strncmp
19d88     00 FA 4D F2 | 	cmps	result1, #0 wz
19d8c     28 01 90 5D |  if_ne	jmp	#LR__2247
19d90     15 33 02 F6 | 	mov	local11, local07
19d94     02 32 66 F0 | 	shl	local11, #2
19d98     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19d9c     F4 32 02 F1 | 	add	local11, ptr___system__dat__
19da0     19 35 02 FB | 	rdlong	local12, local11
19da4     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19da8     97 22 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
19dac                 | LR__2240
19dac     17 29 02 F6 | 	mov	local06, local09
19db0     01 28 06 F1 | 	add	local06, #1
19db4     0F 29 02 F1 | 	add	local06, local01
19db8     14 33 C2 FA | 	rdbyte	local11, local06
19dbc     2E 32 0E F2 | 	cmp	local11, #46 wz
19dc0     2C 00 90 5D |  if_ne	jmp	#LR__2242
19dc4     17 33 02 F6 | 	mov	local11, local09
19dc8     02 32 06 F1 | 	add	local11, #2
19dcc     0F 33 02 F1 | 	add	local11, local01
19dd0     19 31 C2 FA | 	rdbyte	local10, local11
19dd4     2F 30 0E F2 | 	cmp	local10, #47 wz
19dd8     17 37 02 56 |  if_ne	mov	local13, local09
19ddc     02 36 06 51 |  if_ne	add	local13, #2
19de0     0F 37 02 51 |  if_ne	add	local13, local01
19de4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
19de8     01 2E 06 A1 |  if_e	add	local09, #1
19dec     BC FF 9F AD |  if_e	jmp	#LR__2240
19df0                 | LR__2241
19df0                 | LR__2242
19df0     00 22 0E F2 | 	cmp	local03, #0 wz
19df4     11 13 02 56 |  if_ne	mov	arg01, local03
19df8     0F 15 02 56 |  if_ne	mov	arg02, local01
19dfc     00 17 06 56 |  if_ne	mov	arg03, #256
19e00     84 47 B0 5D |  if_ne	call	#__system__strncpy
19e04     0F 15 02 F6 | 	mov	arg02, local01
19e08     17 15 02 F1 | 	add	arg02, local09
19e0c     01 14 06 F1 | 	add	arg02, #1
19e10     0F 13 02 F6 | 	mov	arg01, local01
19e14     D4 F5 BF FD | 	call	#__system____builtin_strcpy
19e18     0F 13 02 F6 | 	mov	arg01, local01
19e1c     09 2D 02 F6 | 	mov	local08, arg01
19e20     97 06 48 FB | 	callpa	#(@LR__2244-@LR__2243)>>2,fcache_load_ptr_
19e24                 | LR__2243
19e24     16 FB C9 FA | 	rdbyte	result1, local08 wz
19e28     01 2C 06 51 |  if_ne	add	local08, #1
19e2c     F4 FF 9F 5D |  if_ne	jmp	#LR__2243
19e30                 | LR__2244
19e30     09 2D 82 F1 | 	sub	local08, arg01
19e34     16 2F 02 F6 | 	mov	local09, local08
19e38                 | LR__2245
19e38     01 2E 56 F2 | 	cmps	local09, #1 wc
19e3c     70 00 90 CD |  if_b	jmp	#LR__2246
19e40     17 25 02 F6 | 	mov	local04, local09
19e44     0F 25 02 F1 | 	add	local04, local01
19e48     12 33 C2 FA | 	rdbyte	local11, local04
19e4c     2F 32 0E F2 | 	cmp	local11, #47 wz
19e50     17 33 02 A6 |  if_e	mov	local11, local09
19e54     0F 33 02 A1 |  if_e	add	local11, local01
19e58     19 01 48 AC |  if_e	wrbyte	#0, local11
19e5c     01 2E 86 A1 |  if_e	sub	local09, #1
19e60     D4 FF 9F AD |  if_e	jmp	#LR__2245
19e64     17 25 02 F6 | 	mov	local04, local09
19e68     0F 25 02 F1 | 	add	local04, local01
19e6c     12 33 C2 FA | 	rdbyte	local11, local04
19e70     2E 32 0E F2 | 	cmp	local11, #46 wz
19e74     38 00 90 5D |  if_ne	jmp	#LR__2246
19e78     02 2E 56 F2 | 	cmps	local09, #2 wc
19e7c     30 00 90 CD |  if_b	jmp	#LR__2246
19e80     17 39 02 F6 | 	mov	local14, local09
19e84     01 38 86 F1 | 	sub	local14, #1
19e88     0F 39 02 F1 | 	add	local14, local01
19e8c     1C 27 C2 FA | 	rdbyte	local05, local14
19e90     2F 26 0E F2 | 	cmp	local05, #47 wz
19e94     18 00 90 5D |  if_ne	jmp	#LR__2246
19e98     17 25 02 F6 | 	mov	local04, local09
19e9c     01 24 86 F1 | 	sub	local04, #1
19ea0     0F 25 02 F1 | 	add	local04, local01
19ea4     12 01 48 FC | 	wrbyte	#0, local04
19ea8     02 2E 86 F1 | 	sub	local09, #2
19eac     88 FF 9F FD | 	jmp	#LR__2245
19eb0                 | LR__2246
19eb0     1A FB 01 F6 | 	mov	result1, local12
19eb4     1C 00 90 FD | 	jmp	#LR__2250
19eb8                 | LR__2247
19eb8                 | LR__2248
19eb8     01 2A 06 F1 | 	add	local07, #1
19ebc     2C FE 9F FD | 	jmp	#LR__2237
19ec0                 | LR__2249
19ec0     03 00 00 FF 
19ec4     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
19ec8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
19ecc     03 00 00 FF 
19ed0     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
19ed4                 | LR__2250
19ed4     A7 F0 03 F6 | 	mov	ptra, fp
19ed8     B2 00 A0 FD | 	call	#popregs_
19edc                 | __system____getvfsforfile_ret
19edc     2D 00 64 FD | 	ret
19ee0                 | 
19ee0                 | __system___basic_open
19ee0     05 4A 05 F6 | 	mov	COUNT_, #5
19ee4     A8 00 A0 FD | 	call	#pushregs_
19ee8     0A 1F 02 F6 | 	mov	local01, arg02
19eec     0B 21 02 F6 | 	mov	local02, arg03
19ef0     0C 23 02 F6 | 	mov	local03, arg04
19ef4     00 24 06 F6 | 	mov	local04, #0
19ef8     64 46 B0 FD | 	call	#__system____getftab
19efc     FD 26 0A F6 | 	mov	local05, result1 wz
19f00     18 00 90 5D |  if_ne	jmp	#LR__2260
19f04     EE 12 02 F6 | 	mov	arg01, abortchain
19f08     0C 14 06 F6 | 	mov	arg02, #12
19f0c     01 16 06 F6 | 	mov	arg03, #1
19f10     DA 00 A0 FD | 	call	#__longjmp
19f14     01 FA 65 F6 | 	neg	result1, #1
19f18     14 01 90 FD | 	jmp	#LR__2269
19f1c                 | LR__2260
19f1c     08 26 06 F1 | 	add	local05, #8
19f20     13 FB 09 FB | 	rdlong	result1, local05 wz
19f24     08 26 86 F1 | 	sub	local05, #8
19f28     13 13 02 56 |  if_ne	mov	arg01, local05
19f2c     C0 3D B0 5D |  if_ne	call	#__system___closeraw
19f30     00 1E 0E F2 | 	cmp	local01, #0 wz
19f34     00 20 0E A2 |  if_e	cmp	local02, #0 wz
19f38     00 22 0E A2 |  if_e	cmp	local03, #0 wz
19f3c     3C 00 90 AD |  if_e	jmp	#LR__2262
19f40     0C 12 06 F6 | 	mov	arg01, #12
19f44     A8 32 B0 FD | 	call	#__system___gc_alloc_managed
19f48     FD 24 0A F6 | 	mov	local04, result1 wz
19f4c     18 00 90 5D |  if_ne	jmp	#LR__2261
19f50     EE 12 02 F6 | 	mov	arg01, abortchain
19f54     07 14 06 F6 | 	mov	arg02, #7
19f58     01 16 06 F6 | 	mov	arg03, #1
19f5c     DA 00 A0 FD | 	call	#__longjmp
19f60     01 FA 65 F6 | 	neg	result1, #1
19f64     C8 00 90 FD | 	jmp	#LR__2269
19f68                 | LR__2261
19f68     12 01 68 FC | 	wrlong	#0, local04
19f6c     04 24 06 F1 | 	add	local04, #4
19f70     12 01 68 FC | 	wrlong	#0, local04
19f74     04 24 86 F1 | 	sub	local04, #4
19f78     13 25 62 FC | 	wrlong	local04, local05
19f7c                 | LR__2262
19f7c     00 1E 0E F2 | 	cmp	local01, #0 wz
19f80     20 00 90 AD |  if_e	jmp	#LR__2263
19f84     12 1F 62 FC | 	wrlong	local01, local04
19f88     12 FB 01 F6 | 	mov	result1, local04
19f8c     00 18 03 FF 
19f90     00 FA 45 F5 | 	or	result1, ##103809024
19f94     1C 26 06 F1 | 	add	local05, #28
19f98     13 FB 61 FC | 	wrlong	result1, local05
19f9c     1C 26 86 F1 | 	sub	local05, #28
19fa0     0C 00 90 FD | 	jmp	#LR__2264
19fa4                 | LR__2263
19fa4     1C 26 06 F1 | 	add	local05, #28
19fa8     13 01 68 FC | 	wrlong	#0, local05
19fac     1C 26 86 F1 | 	sub	local05, #28
19fb0                 | LR__2264
19fb0     00 20 0E F2 | 	cmp	local02, #0 wz
19fb4     28 00 90 AD |  if_e	jmp	#LR__2265
19fb8     04 24 06 F1 | 	add	local04, #4
19fbc     12 21 62 FC | 	wrlong	local02, local04
19fc0     04 24 86 F1 | 	sub	local04, #4
19fc4     12 FB 01 F6 | 	mov	result1, local04
19fc8     00 20 03 FF 
19fcc     00 FA 45 F5 | 	or	result1, ##104857600
19fd0     20 26 06 F1 | 	add	local05, #32
19fd4     13 FB 61 FC | 	wrlong	result1, local05
19fd8     20 26 86 F1 | 	sub	local05, #32
19fdc     0C 00 90 FD | 	jmp	#LR__2266
19fe0                 | LR__2265
19fe0     20 26 06 F1 | 	add	local05, #32
19fe4     13 01 68 FC | 	wrlong	#0, local05
19fe8     20 26 86 F1 | 	sub	local05, #32
19fec                 | LR__2266
19fec     00 22 0E F2 | 	cmp	local03, #0 wz
19ff0     24 00 90 AD |  if_e	jmp	#LR__2267
19ff4     08 24 06 F1 | 	add	local04, #8
19ff8     12 23 62 FC | 	wrlong	local03, local04
19ffc     08 24 86 F1 | 	sub	local04, #8
1a000     00 28 03 FF 
1a004     00 24 46 F5 | 	or	local04, ##105906176
1a008     24 26 06 F1 | 	add	local05, #36
1a00c     13 25 62 FC | 	wrlong	local04, local05
1a010     24 26 86 F1 | 	sub	local05, #36
1a014     0C 00 90 FD | 	jmp	#LR__2268
1a018                 | LR__2267
1a018     24 26 06 F1 | 	add	local05, #36
1a01c     13 01 68 FC | 	wrlong	#0, local05
1a020     24 26 86 F1 | 	sub	local05, #36
1a024                 | LR__2268
1a024     08 26 06 F1 | 	add	local05, #8
1a028     13 0F 68 FC | 	wrlong	#7, local05
1a02c     00 FA 05 F6 | 	mov	result1, #0
1a030                 | LR__2269
1a030     A7 F0 03 F6 | 	mov	ptra, fp
1a034     B2 00 A0 FD | 	call	#popregs_
1a038                 | __system___basic_open_ret
1a038     2D 00 64 FD | 	ret
1a03c                 | 
1a03c                 | __system___basic_open_string
1a03c     04 4A 05 F6 | 	mov	COUNT_, #4
1a040     A8 00 A0 FD | 	call	#pushregs_
1a044     0A 1F 02 F6 | 	mov	local01, arg02
1a048     0B 21 02 F6 | 	mov	local02, arg03
1a04c     10 45 B0 FD | 	call	#__system____getftab
1a050     FD 22 0A F6 | 	mov	local03, result1 wz
1a054     18 00 90 5D |  if_ne	jmp	#LR__2270
1a058     EE 12 02 F6 | 	mov	arg01, abortchain
1a05c     0C 14 06 F6 | 	mov	arg02, #12
1a060     01 16 06 F6 | 	mov	arg03, #1
1a064     DA 00 A0 FD | 	call	#__longjmp
1a068     01 FA 65 F6 | 	neg	result1, #1
1a06c     58 00 90 FD | 	jmp	#LR__2272
1a070                 | LR__2270
1a070     08 22 06 F1 | 	add	local03, #8
1a074     11 19 0A FB | 	rdlong	arg04, local03 wz
1a078     08 22 86 F1 | 	sub	local03, #8
1a07c     11 13 02 56 |  if_ne	mov	arg01, local03
1a080     6C 3C B0 5D |  if_ne	call	#__system___closeraw
1a084     0F 15 02 F6 | 	mov	arg02, local01
1a088     10 17 02 F6 | 	mov	arg03, local02
1a08c     11 13 02 F6 | 	mov	arg01, local03
1a090     B6 19 06 F6 | 	mov	arg04, #438
1a094     54 39 B0 FD | 	call	#__system___openraw
1a098     FD 24 02 F6 | 	mov	local04, result1
1a09c     00 24 56 F2 | 	cmps	local04, #0 wc
1a0a0     20 00 90 3D |  if_ae	jmp	#LR__2271
1a0a4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a0a8     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1a0ac     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a0b0     EE 12 02 F6 | 	mov	arg01, abortchain
1a0b4     01 16 06 F6 | 	mov	arg03, #1
1a0b8     DA 00 A0 FD | 	call	#__longjmp
1a0bc     01 FA 65 F6 | 	neg	result1, #1
1a0c0     04 00 90 FD | 	jmp	#LR__2272
1a0c4                 | LR__2271
1a0c4     12 FB 01 F6 | 	mov	result1, local04
1a0c8                 | LR__2272
1a0c8     A7 F0 03 F6 | 	mov	ptra, fp
1a0cc     B2 00 A0 FD | 	call	#popregs_
1a0d0                 | __system___basic_open_string_ret
1a0d0     2D 00 64 FD | 	ret
1a0d4                 | 
1a0d4                 | __system___basic_print_char
1a0d4     03 4A 05 F6 | 	mov	COUNT_, #3
1a0d8     A8 00 A0 FD | 	call	#pushregs_
1a0dc     0A 1F 02 F6 | 	mov	local01, arg02
1a0e0     D0 4B B0 FD | 	call	#__system___gettxfunc
1a0e4     FD 20 0A F6 | 	mov	local02, result1 wz
1a0e8     00 FA 05 A6 |  if_e	mov	result1, #0
1a0ec     30 00 90 AD |  if_e	jmp	#LR__2280
1a0f0     10 23 02 F6 | 	mov	local03, local02
1a0f4     13 20 46 F7 | 	zerox	local02, #19
1a0f8     14 22 46 F0 | 	shr	local03, #20
1a0fc     02 22 66 F0 | 	shl	local03, #2
1a100     ED 22 02 F1 | 	add	local03, __methods__
1a104     11 23 02 FB | 	rdlong	local03, local03
1a108     0F 13 02 F6 | 	mov	arg01, local01
1a10c     F2 1E 02 F6 | 	mov	local01, objptr
1a110     10 E5 01 F6 | 	mov	objptr, local02
1a114     2D 22 62 FD | 	call	local03
1a118     0F E5 01 F6 | 	mov	objptr, local01
1a11c     01 FA 05 F6 | 	mov	result1, #1
1a120                 | LR__2280
1a120     A7 F0 03 F6 | 	mov	ptra, fp
1a124     B2 00 A0 FD | 	call	#popregs_
1a128                 | __system___basic_print_char_ret
1a128     2D 00 64 FD | 	ret
1a12c                 | 
1a12c                 | __system___basic_print_string
1a12c     03 4A 05 F6 | 	mov	COUNT_, #3
1a130     A8 00 A0 FD | 	call	#pushregs_
1a134     0A 1F 02 F6 | 	mov	local01, arg02
1a138     0B 21 02 F6 | 	mov	local02, arg03
1a13c     74 4B B0 FD | 	call	#__system___gettxfunc
1a140     FD 22 0A F6 | 	mov	local03, result1 wz
1a144     00 FA 05 A6 |  if_e	mov	result1, #0
1a148     18 00 90 AD |  if_e	jmp	#LR__2290
1a14c     00 1E 0E F2 | 	cmp	local01, #0 wz
1a150     00 FA 05 A6 |  if_e	mov	result1, #0
1a154     11 13 02 56 |  if_ne	mov	arg01, local03
1a158     10 15 02 56 |  if_ne	mov	arg02, local02
1a15c     0F 17 02 56 |  if_ne	mov	arg03, local01
1a160     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
1a164                 | LR__2290
1a164     A7 F0 03 F6 | 	mov	ptra, fp
1a168     B2 00 A0 FD | 	call	#popregs_
1a16c                 | __system___basic_print_string_ret
1a16c     2D 00 64 FD | 	ret
1a170                 | 
1a170                 | __system___basic_print_integer
1a170     04 4A 05 F6 | 	mov	COUNT_, #4
1a174     A8 00 A0 FD | 	call	#pushregs_
1a178     0A 1F 02 F6 | 	mov	local01, arg02
1a17c     0B 21 02 F6 | 	mov	local02, arg03
1a180     0C 23 02 F6 | 	mov	local03, arg04
1a184     2C 4B B0 FD | 	call	#__system___gettxfunc
1a188     FD 24 0A F6 | 	mov	local04, result1 wz
1a18c     00 FA 05 A6 |  if_e	mov	result1, #0
1a190     12 13 02 56 |  if_ne	mov	arg01, local04
1a194     10 15 02 56 |  if_ne	mov	arg02, local02
1a198     0F 17 02 56 |  if_ne	mov	arg03, local01
1a19c     11 19 02 56 |  if_ne	mov	arg04, local03
1a1a0     48 02 B0 5D |  if_ne	call	#__system___fmtnum
1a1a4     A7 F0 03 F6 | 	mov	ptra, fp
1a1a8     B2 00 A0 FD | 	call	#popregs_
1a1ac                 | __system___basic_print_integer_ret
1a1ac     2D 00 64 FD | 	ret
1a1b0                 | 
1a1b0                 | __system___basic_print_unsigned
1a1b0     03 4A 05 F6 | 	mov	COUNT_, #3
1a1b4     A8 00 A0 FD | 	call	#pushregs_
1a1b8     0A 1F 02 F6 | 	mov	local01, arg02
1a1bc     0B 21 02 F6 | 	mov	local02, arg03
1a1c0     0C 23 02 F6 | 	mov	local03, arg04
1a1c4     EC 4A B0 FD | 	call	#__system___gettxfunc
1a1c8     FD 12 0A F6 | 	mov	arg01, result1 wz
1a1cc     00 FA 05 A6 |  if_e	mov	result1, #0
1a1d0     3A 20 26 54 |  if_ne	bith	local02, #58
1a1d4     10 15 02 56 |  if_ne	mov	arg02, local02
1a1d8     0F 17 02 56 |  if_ne	mov	arg03, local01
1a1dc     11 19 02 56 |  if_ne	mov	arg04, local03
1a1e0     08 02 B0 5D |  if_ne	call	#__system___fmtnum
1a1e4     A7 F0 03 F6 | 	mov	ptra, fp
1a1e8     B2 00 A0 FD | 	call	#popregs_
1a1ec                 | __system___basic_print_unsigned_ret
1a1ec     2D 00 64 FD | 	ret
1a1f0                 | 
1a1f0                 | __system___basic_get_char
1a1f0     03 4A 05 F6 | 	mov	COUNT_, #3
1a1f4     A8 00 A0 FD | 	call	#pushregs_
1a1f8     FC 4A B0 FD | 	call	#__system___getrxfunc
1a1fc     FD 1E 0A F6 | 	mov	local01, result1 wz
1a200     01 FA 65 A6 |  if_e	neg	result1, #1
1a204     28 00 90 AD |  if_e	jmp	#LR__2300
1a208     0F 21 02 F6 | 	mov	local02, local01
1a20c     13 1E 46 F7 | 	zerox	local01, #19
1a210     14 20 46 F0 | 	shr	local02, #20
1a214     02 20 66 F0 | 	shl	local02, #2
1a218     ED 20 02 F1 | 	add	local02, __methods__
1a21c     10 21 02 FB | 	rdlong	local02, local02
1a220     F2 22 02 F6 | 	mov	local03, objptr
1a224     0F E5 01 F6 | 	mov	objptr, local01
1a228     2D 20 62 FD | 	call	local02
1a22c     11 E5 01 F6 | 	mov	objptr, local03
1a230                 | LR__2300
1a230     A7 F0 03 F6 | 	mov	ptra, fp
1a234     B2 00 A0 FD | 	call	#popregs_
1a238                 | __system___basic_get_char_ret
1a238     2D 00 64 FD | 	ret
1a23c                 | 
1a23c                 | __system___basic_get
1a23c     04 4A 05 F6 | 	mov	COUNT_, #4
1a240     A8 00 A0 FD | 	call	#pushregs_
1a244     0D 1F 02 F6 | 	mov	local01, arg05
1a248     0F 19 02 FD | 	qmul	arg04, local01
1a24c     09 21 02 F6 | 	mov	local02, arg01
1a250     0B 23 02 F6 | 	mov	local03, arg03
1a254     00 14 0E F2 | 	cmp	arg02, #0 wz
1a258     01 14 86 51 |  if_ne	sub	arg02, #1
1a25c     10 13 02 56 |  if_ne	mov	arg01, local02
1a260     00 16 06 56 |  if_ne	mov	arg03, #0
1a264     18 24 62 FD | 	getqx	local04
1a268     3C 41 B0 5D |  if_ne	call	#__system__lseek
1a26c     11 15 02 F6 | 	mov	arg02, local03
1a270     12 17 02 F6 | 	mov	arg03, local04
1a274     10 13 02 F6 | 	mov	arg01, local02
1a278     B4 40 B0 FD | 	call	#__system__read
1a27c     FD 24 02 F6 | 	mov	local04, result1
1a280     01 24 56 F2 | 	cmps	local04, #1 wc
1a284     10 00 90 CD |  if_b	jmp	#LR__2310
1a288     12 63 02 F6 | 	mov	muldiva_, local04
1a28c     0F 65 02 F6 | 	mov	muldivb_, local01
1a290     BA 00 A0 FD | 	call	#divide_
1a294     32 25 02 F6 | 	mov	local04, muldivb_
1a298                 | LR__2310
1a298     12 FB 01 F6 | 	mov	result1, local04
1a29c     A7 F0 03 F6 | 	mov	ptra, fp
1a2a0     B2 00 A0 FD | 	call	#popregs_
1a2a4                 | __system___basic_get_ret
1a2a4     2D 00 64 FD | 	ret
1a2a8                 | 
1a2a8                 | __system___fmtchar
1a2a8     00 4A 05 F6 | 	mov	COUNT_, #0
1a2ac     A8 00 A0 FD | 	call	#pushregs_
1a2b0     10 F0 07 F1 | 	add	ptra, #16
1a2b4     04 4E 05 F1 | 	add	fp, #4
1a2b8     A7 12 62 FC | 	wrlong	arg01, fp
1a2bc     04 4E 05 F1 | 	add	fp, #4
1a2c0     A7 14 62 FC | 	wrlong	arg02, fp
1a2c4     04 4E 05 F1 | 	add	fp, #4
1a2c8     A7 16 62 FC | 	wrlong	arg03, fp
1a2cc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1a2d0     A7 16 62 FC | 	wrlong	arg03, fp
1a2d4     08 4E 85 F1 | 	sub	fp, #8
1a2d8     A7 12 02 FB | 	rdlong	arg01, fp
1a2dc     04 4E 05 F1 | 	add	fp, #4
1a2e0     A7 14 02 FB | 	rdlong	arg02, fp
1a2e4     04 4E 05 F1 | 	add	fp, #4
1a2e8     A7 16 02 F6 | 	mov	arg03, fp
1a2ec     0C 4E 85 F1 | 	sub	fp, #12
1a2f0     0C 00 B0 FD | 	call	#__system___fmtstr
1a2f4     A7 F0 03 F6 | 	mov	ptra, fp
1a2f8     B2 00 A0 FD | 	call	#popregs_
1a2fc                 | __system___fmtchar_ret
1a2fc     2D 00 64 FD | 	ret
1a300                 | 
1a300                 | __system___fmtstr
1a300     09 4A 05 F6 | 	mov	COUNT_, #9
1a304     A8 00 A0 FD | 	call	#pushregs_
1a308     09 1F 02 F6 | 	mov	local01, arg01
1a30c     0A 21 02 F6 | 	mov	local02, arg02
1a310     0B 23 02 F6 | 	mov	local03, arg03
1a314     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1a318     11 13 02 F6 | 	mov	arg01, local03
1a31c     09 25 02 F6 | 	mov	local04, arg01
1a320     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1a324                 | LR__2320
1a324     12 FB C9 FA | 	rdbyte	result1, local04 wz
1a328     01 24 06 51 |  if_ne	add	local04, #1
1a32c     F4 FF 9F 5D |  if_ne	jmp	#LR__2320
1a330                 | LR__2321
1a330     09 25 82 F1 | 	sub	local04, arg01
1a334     00 18 0E F2 | 	cmp	arg04, #0 wz
1a338     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1a33c     10 15 02 F6 | 	mov	arg02, local02
1a340     12 17 02 F6 | 	mov	arg03, local04
1a344     0F 13 02 F6 | 	mov	arg01, local01
1a348     02 18 06 F6 | 	mov	arg04, #2
1a34c     04 46 B0 FD | 	call	#__system___fmtpad
1a350     FD 26 02 F6 | 	mov	local05, result1
1a354     00 26 56 F2 | 	cmps	local05, #0 wc
1a358     13 FB 01 C6 |  if_b	mov	result1, local05
1a35c     80 00 90 CD |  if_b	jmp	#LR__2324
1a360     01 24 56 F2 | 	cmps	local04, #1 wc
1a364     50 00 90 CD |  if_b	jmp	#LR__2323
1a368     12 29 02 F6 | 	mov	local06, local04
1a36c                 | LR__2322
1a36c     0F 2B 02 F6 | 	mov	local07, local01
1a370     0F 2D 02 F6 | 	mov	local08, local01
1a374     13 2A 46 F7 | 	zerox	local07, #19
1a378     14 2C 46 F0 | 	shr	local08, #20
1a37c     02 2C 66 F0 | 	shl	local08, #2
1a380     ED 2C 02 F1 | 	add	local08, __methods__
1a384     16 2D 02 FB | 	rdlong	local08, local08
1a388     11 13 C2 FA | 	rdbyte	arg01, local03
1a38c     F2 2E 02 F6 | 	mov	local09, objptr
1a390     15 E5 01 F6 | 	mov	objptr, local07
1a394     01 22 06 F1 | 	add	local03, #1
1a398     2D 2C 62 FD | 	call	local08
1a39c     17 E5 01 F6 | 	mov	objptr, local09
1a3a0     FD 2E 02 F6 | 	mov	local09, result1
1a3a4     00 2E 56 F2 | 	cmps	local09, #0 wc
1a3a8     17 FB 01 C6 |  if_b	mov	result1, local09
1a3ac     30 00 90 CD |  if_b	jmp	#LR__2324
1a3b0     17 27 02 F1 | 	add	local05, local09
1a3b4     ED 29 6E FB | 	djnz	local06, #LR__2322
1a3b8                 | LR__2323
1a3b8     10 15 02 F6 | 	mov	arg02, local02
1a3bc     12 17 02 F6 | 	mov	arg03, local04
1a3c0     0F 13 02 F6 | 	mov	arg01, local01
1a3c4     01 18 06 F6 | 	mov	arg04, #1
1a3c8     88 45 B0 FD | 	call	#__system___fmtpad
1a3cc     FD 2E 02 F6 | 	mov	local09, result1
1a3d0     00 2E 56 F2 | 	cmps	local09, #0 wc
1a3d4     17 FB 01 C6 |  if_b	mov	result1, local09
1a3d8     17 27 02 31 |  if_ae	add	local05, local09
1a3dc     13 FB 01 36 |  if_ae	mov	result1, local05
1a3e0                 | LR__2324
1a3e0     A7 F0 03 F6 | 	mov	ptra, fp
1a3e4     B2 00 A0 FD | 	call	#popregs_
1a3e8                 | __system___fmtstr_ret
1a3e8     2D 00 64 FD | 	ret
1a3ec                 | 
1a3ec                 | __system___fmtnum
1a3ec     0B 4A 05 F6 | 	mov	COUNT_, #11
1a3f0     A8 00 A0 FD | 	call	#pushregs_
1a3f4     09 1F 02 F6 | 	mov	local01, arg01
1a3f8     0A 21 02 F6 | 	mov	local02, arg02
1a3fc     0B 23 02 F6 | 	mov	local03, arg03
1a400     0C 25 02 F6 | 	mov	local04, arg04
1a404     F8 27 02 F6 | 	mov	local05, ptra
1a408     13 29 02 F6 | 	mov	local06, local05
1a40c     00 2A 06 F6 | 	mov	local07, #0
1a410     10 2D 02 F6 | 	mov	local08, local02
1a414     10 2C 46 F0 | 	shr	local08, #16
1a418     3F 2C 06 F5 | 	and	local08, #63
1a41c     10 2F E2 F8 | 	getbyte	local09, local02, #0
1a420     10 31 02 F6 | 	mov	local10, local02
1a424     1A 30 46 F0 | 	shr	local10, #26
1a428     03 30 06 F5 | 	and	local10, #3
1a42c     18 33 02 F6 | 	mov	local11, local10
1a430     01 2C 56 F2 | 	cmps	local08, #1 wc
1a434     44 F0 07 F1 | 	add	ptra, #68
1a438     01 2C 86 31 |  if_ae	sub	local08, #1
1a43c     41 2E 56 F2 | 	cmps	local09, #65 wc
1a440     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1a444     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1a448     03 32 0E F2 | 	cmp	local11, #3 wz
1a44c     00 32 06 A6 |  if_e	mov	local11, #0
1a450     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1a454     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1a458     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1a45c     00 32 0E F2 | 	cmp	local11, #0 wz
1a460     4C 00 90 AD |  if_e	jmp	#LR__2333
1a464     01 2A 06 F6 | 	mov	local07, #1
1a468     17 2D 0A F2 | 	cmp	local08, local09 wz
1a46c     18 00 90 5D |  if_ne	jmp	#LR__2331
1a470     05 2C 6E FB | 	djnz	local08, #LR__2330
1a474     0F 13 02 F6 | 	mov	arg01, local01
1a478     10 15 02 F6 | 	mov	arg02, local02
1a47c     23 16 06 F6 | 	mov	arg03, #35
1a480     24 FE BF FD | 	call	#__system___fmtchar
1a484     88 00 90 FD | 	jmp	#LR__2337
1a488                 | LR__2330
1a488                 | LR__2331
1a488     02 32 0E F2 | 	cmp	local11, #2 wz
1a48c     14 31 02 A6 |  if_e	mov	local10, local06
1a490     01 28 06 A1 |  if_e	add	local06, #1
1a494     18 41 48 AC |  if_e	wrbyte	#32, local10
1a498     14 00 90 AD |  if_e	jmp	#LR__2332
1a49c     04 32 0E F2 | 	cmp	local11, #4 wz
1a4a0     14 5B 48 AC |  if_e	wrbyte	#45, local06
1a4a4     01 28 06 A1 |  if_e	add	local06, #1
1a4a8     14 57 48 5C |  if_ne	wrbyte	#43, local06
1a4ac     01 28 06 51 |  if_ne	add	local06, #1
1a4b0                 | LR__2332
1a4b0                 | LR__2333
1a4b0     14 13 02 F6 | 	mov	arg01, local06
1a4b4     11 15 02 F6 | 	mov	arg02, local03
1a4b8     12 17 02 F6 | 	mov	arg03, local04
1a4bc     16 19 02 F6 | 	mov	arg04, local08
1a4c0     00 1A 06 F6 | 	mov	arg05, #0
1a4c4     1D 20 2E F4 | 	testbn	local02, #29 wz
1a4c8     01 1A 06 56 |  if_ne	mov	arg05, #1
1a4cc     4C 45 B0 FD | 	call	#__system___uitoa
1a4d0     FD 2A 02 F1 | 	add	local07, result1
1a4d4     17 2B 5A F2 | 	cmps	local07, local09 wcz
1a4d8     24 00 90 ED |  if_be	jmp	#LR__2336
1a4dc     97 0E 48 FB | 	callpa	#(@LR__2335-@LR__2334)>>2,fcache_load_ptr_
1a4e0                 | LR__2334
1a4e0     17 31 02 F6 | 	mov	local10, local09
1a4e4     01 30 56 F2 | 	cmps	local10, #1 wc
1a4e8     01 2E 86 F1 | 	sub	local09, #1
1a4ec     14 31 02 36 |  if_ae	mov	local10, local06
1a4f0     01 28 06 31 |  if_ae	add	local06, #1
1a4f4     18 47 48 3C |  if_ae	wrbyte	#35, local10
1a4f8     E4 FF 9F 3D |  if_ae	jmp	#LR__2334
1a4fc                 | LR__2335
1a4fc     14 01 48 FC | 	wrbyte	#0, local06
1a500                 | LR__2336
1a500     0F 13 02 F6 | 	mov	arg01, local01
1a504     10 15 02 F6 | 	mov	arg02, local02
1a508     13 17 02 F6 | 	mov	arg03, local05
1a50c     F0 FD BF FD | 	call	#__system___fmtstr
1a510                 | LR__2337
1a510     A7 F0 03 F6 | 	mov	ptra, fp
1a514     B2 00 A0 FD | 	call	#popregs_
1a518                 | __system___fmtnum_ret
1a518     2D 00 64 FD | 	ret
1a51c                 | 
1a51c                 | __system___fmtfloat
1a51c     10 4A 05 F6 | 	mov	COUNT_, #16
1a520     A8 00 A0 FD | 	call	#pushregs_
1a524     24 F1 07 F1 | 	add	ptra, #292
1a528     04 4E 05 F1 | 	add	fp, #4
1a52c     A7 12 62 FC | 	wrlong	arg01, fp
1a530     04 4E 05 F1 | 	add	fp, #4
1a534     A7 14 62 FC | 	wrlong	arg02, fp
1a538     04 4E 05 F1 | 	add	fp, #4
1a53c     A7 16 62 FC | 	wrlong	arg03, fp
1a540     04 4E 05 F1 | 	add	fp, #4
1a544     A7 18 62 FC | 	wrlong	arg04, fp
1a548     0C 4E 05 F1 | 	add	fp, #12
1a54c     A7 14 68 FC | 	wrlong	#10, fp
1a550     08 4E 05 F1 | 	add	fp, #8
1a554     A7 00 68 FC | 	wrlong	#0, fp
1a558     08 4E 05 F1 | 	add	fp, #8
1a55c     A7 00 68 FC | 	wrlong	#0, fp
1a560     08 4E 05 F1 | 	add	fp, #8
1a564     A7 00 68 FC | 	wrlong	#0, fp
1a568     04 4E 05 F1 | 	add	fp, #4
1a56c     A7 04 68 FC | 	wrlong	#2, fp
1a570     04 4E 05 F1 | 	add	fp, #4
1a574     A7 00 68 FC | 	wrlong	#0, fp
1a578     04 4E 05 F1 | 	add	fp, #4
1a57c     A7 00 68 FC | 	wrlong	#0, fp
1a580     04 4E 05 F1 | 	add	fp, #4
1a584     A7 00 68 FC | 	wrlong	#0, fp
1a588     04 4E 05 F1 | 	add	fp, #4
1a58c     A7 00 68 FC | 	wrlong	#0, fp
1a590     18 4E 05 F1 | 	add	fp, #24
1a594     A7 00 68 FC | 	wrlong	#0, fp
1a598     68 4E 05 F1 | 	add	fp, #104
1a59c     A7 1E 02 F6 | 	mov	local01, fp
1a5a0     08 4E 85 F1 | 	sub	fp, #8
1a5a4     A7 1E 62 FC | 	wrlong	local01, fp
1a5a8     04 4E 05 F1 | 	add	fp, #4
1a5ac     A7 1E 62 FC | 	wrlong	local01, fp
1a5b0     BC 4E 85 F1 | 	sub	fp, #188
1a5b4     A7 1E 02 FB | 	rdlong	local01, fp
1a5b8     10 1E 46 F0 | 	shr	local01, #16
1a5bc     3F 1E 06 F5 | 	and	local01, #63
1a5c0     B0 4E 05 F1 | 	add	fp, #176
1a5c4     A7 1E 62 FC | 	wrlong	local01, fp
1a5c8     B0 4E 85 F1 | 	sub	fp, #176
1a5cc     A7 1E 02 FB | 	rdlong	local01, fp
1a5d0     1C 1E 46 F0 | 	shr	local01, #28
1a5d4     01 1E 06 F5 | 	and	local01, #1
1a5d8     08 4F 05 F1 | 	add	fp, #264
1a5dc     A7 1E 62 FC | 	wrlong	local01, fp
1a5e0     58 4E 85 F1 | 	sub	fp, #88
1a5e4     A7 1E 0A FB | 	rdlong	local01, fp wz
1a5e8     B8 4E 85 F1 | 	sub	fp, #184
1a5ec     3C 00 90 5D |  if_ne	jmp	#LR__2341
1a5f0     10 4E 05 F1 | 	add	fp, #16
1a5f4     A7 1E 02 FB | 	rdlong	local01, fp
1a5f8     10 4E 85 F1 | 	sub	fp, #16
1a5fc     61 1E 0E F2 | 	cmp	local01, #97 wz
1a600     18 00 90 5D |  if_ne	jmp	#LR__2340
1a604     B8 4E 05 F1 | 	add	fp, #184
1a608     A7 1A 68 FC | 	wrlong	#13, fp
1a60c     84 4E 85 F1 | 	sub	fp, #132
1a610     A7 02 68 FC | 	wrlong	#1, fp
1a614     34 4E 85 F1 | 	sub	fp, #52
1a618     24 00 90 FD | 	jmp	#LR__2342
1a61c                 | LR__2340
1a61c     B8 4E 05 F1 | 	add	fp, #184
1a620     A7 0C 68 FC | 	wrlong	#6, fp
1a624     B8 4E 85 F1 | 	sub	fp, #184
1a628     14 00 90 FD | 	jmp	#LR__2342
1a62c                 | LR__2341
1a62c     B8 4E 05 F1 | 	add	fp, #184
1a630     A7 1E 02 FB | 	rdlong	local01, fp
1a634     01 1E 86 F1 | 	sub	local01, #1
1a638     A7 1E 62 FC | 	wrlong	local01, fp
1a63c     B8 4E 85 F1 | 	sub	fp, #184
1a640                 | LR__2342
1a640     08 4E 05 F1 | 	add	fp, #8
1a644     A7 1E 02 FB | 	rdlong	local01, fp
1a648     16 1E 46 F0 | 	shr	local01, #22
1a64c     03 1E 06 F5 | 	and	local01, #3
1a650     04 4F 05 F1 | 	add	fp, #260
1a654     A7 1E 62 FC | 	wrlong	local01, fp
1a658     04 4F 85 F1 | 	sub	fp, #260
1a65c     A7 1E 02 FB | 	rdlong	local01, fp
1a660     1D 1E 46 F0 | 	shr	local01, #29
1a664     01 1E 06 F5 | 	and	local01, #1
1a668     B4 4E 05 F1 | 	add	fp, #180
1a66c     A7 1E 62 FC | 	wrlong	local01, fp
1a670     B4 4E 85 F1 | 	sub	fp, #180
1a674     A7 1E 02 FB | 	rdlong	local01, fp
1a678     0F 1F EA F8 | 	getbyte	local01, local01, #1
1a67c     60 4E 05 F1 | 	add	fp, #96
1a680     A7 1E 62 FC | 	wrlong	local01, fp
1a684     60 4E 85 F1 | 	sub	fp, #96
1a688     A7 1E 02 FB | 	rdlong	local01, fp
1a68c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1a690     64 4E 05 F1 | 	add	fp, #100
1a694     A7 1E 62 FC | 	wrlong	local01, fp
1a698     00 1E 06 F6 | 	mov	local01, #0
1a69c     5C 4E 85 F1 | 	sub	fp, #92
1a6a0     A7 1A 02 FB | 	rdlong	arg05, fp
1a6a4     65 1A 0E F2 | 	cmp	arg05, #101 wz
1a6a8     01 1E 06 A6 |  if_e	mov	local01, #1
1a6ac     14 4E 05 F1 | 	add	fp, #20
1a6b0     A7 1E 62 FC | 	wrlong	local01, fp
1a6b4     98 4E 05 F1 | 	add	fp, #152
1a6b8     A7 20 0A FB | 	rdlong	local02, fp wz
1a6bc     45 1E 06 56 |  if_ne	mov	local01, #69
1a6c0     65 1E 06 A6 |  if_e	mov	local01, #101
1a6c4     8C 4E 85 F1 | 	sub	fp, #140
1a6c8     A7 1E 62 FC | 	wrlong	local01, fp
1a6cc     20 4E 85 F1 | 	sub	fp, #32
1a6d0     A7 1E 02 FB | 	rdlong	local01, fp
1a6d4     10 4E 85 F1 | 	sub	fp, #16
1a6d8     61 1E 0E F2 | 	cmp	local01, #97 wz
1a6dc     4C 00 90 5D |  if_ne	jmp	#LR__2343
1a6e0     24 4E 05 F1 | 	add	fp, #36
1a6e4     A7 02 68 FC | 	wrlong	#1, fp
1a6e8     98 4E 05 F1 | 	add	fp, #152
1a6ec     A7 20 0A FB | 	rdlong	local02, fp wz
1a6f0     50 1E 06 56 |  if_ne	mov	local01, #80
1a6f4     70 1E 06 A6 |  if_e	mov	local01, #112
1a6f8     8C 4E 85 F1 | 	sub	fp, #140
1a6fc     A7 1E 62 FC | 	wrlong	local01, fp
1a700     14 4E 85 F1 | 	sub	fp, #20
1a704     A7 04 68 FC | 	wrlong	#2, fp
1a708     1C 4E 05 F1 | 	add	fp, #28
1a70c     A7 02 68 FC | 	wrlong	#1, fp
1a710     84 4E 05 F1 | 	add	fp, #132
1a714     A7 20 0A FB | 	rdlong	local02, fp wz
1a718     58 1E 06 56 |  if_ne	mov	local01, #88
1a71c     78 1E 06 A6 |  if_e	mov	local01, #120
1a720     7C 4E 85 F1 | 	sub	fp, #124
1a724     A7 1E 62 FC | 	wrlong	local01, fp
1a728     40 4E 85 F1 | 	sub	fp, #64
1a72c                 | LR__2343
1a72c     10 4E 05 F1 | 	add	fp, #16
1a730     A7 1E 02 FB | 	rdlong	local01, fp
1a734     10 4E 85 F1 | 	sub	fp, #16
1a738     23 1E 0E F2 | 	cmp	local01, #35 wz
1a73c     3C 00 90 5D |  if_ne	jmp	#LR__2346
1a740     48 4E 05 F1 | 	add	fp, #72
1a744     A7 02 68 FC | 	wrlong	#1, fp
1a748     C8 4E 05 F1 | 	add	fp, #200
1a74c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a750     10 4F 85 F1 | 	sub	fp, #272
1a754     18 00 90 AD |  if_e	jmp	#LR__2344
1a758     10 4E 05 F1 | 	add	fp, #16
1a75c     A7 CC 68 FC | 	wrlong	#102, fp
1a760     00 4F 05 F1 | 	add	fp, #256
1a764     A7 00 68 FC | 	wrlong	#0, fp
1a768     10 4F 85 F1 | 	sub	fp, #272
1a76c     0C 00 90 FD | 	jmp	#LR__2345
1a770                 | LR__2344
1a770     10 4F 05 F1 | 	add	fp, #272
1a774     A7 02 68 FC | 	wrlong	#1, fp
1a778     10 4F 85 F1 | 	sub	fp, #272
1a77c                 | LR__2345
1a77c                 | LR__2346
1a77c     08 4E 05 F1 | 	add	fp, #8
1a780     A7 1E 02 FB | 	rdlong	local01, fp
1a784     1A 1E 46 F0 | 	shr	local01, #26
1a788     03 1E 06 F5 | 	and	local01, #3
1a78c     5C 4E 05 F1 | 	add	fp, #92
1a790     A7 1E 62 FC | 	wrlong	local01, fp
1a794     58 4E 85 F1 | 	sub	fp, #88
1a798     A7 FA 01 FB | 	rdlong	result1, fp
1a79c     0C 4E 85 F1 | 	sub	fp, #12
1a7a0     1F FA 4D F0 | 	shr	result1, #31 wz
1a7a4     20 00 90 AD |  if_e	jmp	#LR__2347
1a7a8     2C 4E 05 F1 | 	add	fp, #44
1a7ac     A7 5A 68 FC | 	wrlong	#45, fp
1a7b0     20 4E 85 F1 | 	sub	fp, #32
1a7b4     A7 FA 01 FB | 	rdlong	result1, fp
1a7b8     1F FA E5 F4 | 	bitnot	result1, #31
1a7bc     A7 FA 61 FC | 	wrlong	result1, fp
1a7c0     0C 4E 85 F1 | 	sub	fp, #12
1a7c4     3C 00 90 FD | 	jmp	#LR__2349
1a7c8                 | LR__2347
1a7c8     64 4E 05 F1 | 	add	fp, #100
1a7cc     A7 1E 02 FB | 	rdlong	local01, fp
1a7d0     64 4E 85 F1 | 	sub	fp, #100
1a7d4     01 1E 0E F2 | 	cmp	local01, #1 wz
1a7d8     2C 4E 05 A1 |  if_e	add	fp, #44
1a7dc     A7 56 68 AC |  if_e	wrlong	#43, fp
1a7e0     2C 4E 85 A1 |  if_e	sub	fp, #44
1a7e4     1C 00 90 AD |  if_e	jmp	#LR__2348
1a7e8     64 4E 05 F1 | 	add	fp, #100
1a7ec     A7 1E 02 FB | 	rdlong	local01, fp
1a7f0     64 4E 85 F1 | 	sub	fp, #100
1a7f4     02 1E 0E F2 | 	cmp	local01, #2 wz
1a7f8     2C 4E 05 A1 |  if_e	add	fp, #44
1a7fc     A7 40 68 AC |  if_e	wrlong	#32, fp
1a800     2C 4E 85 A1 |  if_e	sub	fp, #44
1a804                 | LR__2348
1a804                 | LR__2349
1a804     08 4E 05 F1 | 	add	fp, #8
1a808     A7 1E 02 FB | 	rdlong	local01, fp
1a80c     18 1E 46 F0 | 	shr	local01, #24
1a810     03 1E 06 F5 | 	and	local01, #3
1a814     3C 4E 05 F1 | 	add	fp, #60
1a818     A7 1E 62 FC | 	wrlong	local01, fp
1a81c     00 1E 06 F6 | 	mov	local01, #0
1a820     18 4E 85 F1 | 	sub	fp, #24
1a824     A7 22 0A FB | 	rdlong	local03, fp wz
1a828     2C 4E 85 F1 | 	sub	fp, #44
1a82c     18 00 90 5D |  if_ne	jmp	#LR__2350
1a830     1C 4E 05 F1 | 	add	fp, #28
1a834     A7 24 02 FB | 	rdlong	local04, fp
1a838     1C 4E 85 F1 | 	sub	fp, #28
1a83c     12 27 02 F6 | 	mov	local05, local04
1a840     0A 26 0E F2 | 	cmp	local05, #10 wz
1a844     04 00 90 AD |  if_e	jmp	#LR__2351
1a848                 | LR__2350
1a848     01 1E 66 F5 | 	xor	local01, #1
1a84c                 | LR__2351
1a84c     3C 4E 05 F1 | 	add	fp, #60
1a850     A7 1E 62 FC | 	wrlong	local01, fp
1a854     3C 4E 85 F1 | 	sub	fp, #60
1a858     00 1E 0E F2 | 	cmp	local01, #0 wz
1a85c     0C 01 90 AD |  if_e	jmp	#LR__2353
1a860     44 4E 05 F1 | 	add	fp, #68
1a864     A7 26 02 FB | 	rdlong	local05, fp
1a868     44 4E 85 F1 | 	sub	fp, #68
1a86c     13 23 02 F6 | 	mov	local03, local05
1a870     02 22 0E F2 | 	cmp	local03, #2 wz
1a874     F4 00 90 5D |  if_ne	jmp	#LR__2353
1a878     0C 4F 05 F1 | 	add	fp, #268
1a87c     A7 28 02 FB | 	rdlong	local06, fp
1a880     0C 4F 85 F1 | 	sub	fp, #268
1a884     14 25 02 F6 | 	mov	local04, local06
1a888     02 24 0E F2 | 	cmp	local04, #2 wz
1a88c     DC 00 90 AD |  if_e	jmp	#LR__2353
1a890     C0 4E 05 F1 | 	add	fp, #192
1a894     A7 12 02 FB | 	rdlong	arg01, fp
1a898     94 4E 85 F1 | 	sub	fp, #148
1a89c     A7 14 02 FB | 	rdlong	arg02, fp
1a8a0     14 4E 05 F1 | 	add	fp, #20
1a8a4     A7 16 02 FB | 	rdlong	arg03, fp
1a8a8     40 4E 85 F1 | 	sub	fp, #64
1a8ac     D4 43 B0 FD | 	call	#__system__emitsign_0385
1a8b0     14 4F 05 F1 | 	add	fp, #276
1a8b4     A7 FA 61 FC | 	wrlong	result1, fp
1a8b8     14 4F 85 F1 | 	sub	fp, #276
1a8bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1a8c0     14 4F 05 C1 |  if_b	add	fp, #276
1a8c4     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a8c8     14 4F 85 C1 |  if_b	sub	fp, #276
1a8cc     6C 0B 90 CD |  if_b	jmp	#LR__2403
1a8d0     C0 4E 05 F1 | 	add	fp, #192
1a8d4     A7 1E 02 FB | 	rdlong	local01, fp
1a8d8     54 4E 05 F1 | 	add	fp, #84
1a8dc     A7 26 02 FB | 	rdlong	local05, fp
1a8e0     13 23 02 F6 | 	mov	local03, local05
1a8e4     13 1F 02 F1 | 	add	local01, local05
1a8e8     54 4E 85 F1 | 	sub	fp, #84
1a8ec     A7 1E 62 FC | 	wrlong	local01, fp
1a8f0     58 4E 85 F1 | 	sub	fp, #88
1a8f4     A7 1E 0A FB | 	rdlong	local01, fp wz
1a8f8     68 4E 85 F1 | 	sub	fp, #104
1a8fc     60 00 90 AD |  if_e	jmp	#LR__2352
1a900     68 4E 05 F1 | 	add	fp, #104
1a904     A7 1E 02 FB | 	rdlong	local01, fp
1a908     AC 4E 05 F1 | 	add	fp, #172
1a90c     A7 22 02 FB | 	rdlong	local03, fp
1a910     11 1F 82 F1 | 	sub	local01, local03
1a914     AC 4E 85 F1 | 	sub	fp, #172
1a918     A7 1E 62 FC | 	wrlong	local01, fp
1a91c     68 4E 85 F1 | 	sub	fp, #104
1a920     00 1E 56 F2 | 	cmps	local01, #0 wc
1a924     68 4E 05 C1 |  if_b	add	fp, #104
1a928     A7 00 68 CC |  if_b	wrlong	#0, fp
1a92c     68 4E 85 C1 |  if_b	sub	fp, #104
1a930     08 4E 05 F1 | 	add	fp, #8
1a934     A7 1E 02 FB | 	rdlong	local01, fp
1a938     E8 1E 06 F4 | 	bitl	local01, #232
1a93c     A7 1E 62 FC | 	wrlong	local01, fp
1a940     60 4E 05 F1 | 	add	fp, #96
1a944     A7 26 02 FB | 	rdlong	local05, fp
1a948     13 23 02 F6 | 	mov	local03, local05
1a94c     08 22 66 F0 | 	shl	local03, #8
1a950     11 1F 42 F5 | 	or	local01, local03
1a954     60 4E 85 F1 | 	sub	fp, #96
1a958     A7 1E 62 FC | 	wrlong	local01, fp
1a95c     08 4E 85 F1 | 	sub	fp, #8
1a960                 | LR__2352
1a960     3C 4E 05 F1 | 	add	fp, #60
1a964     A7 00 68 FC | 	wrlong	#0, fp
1a968     3C 4E 85 F1 | 	sub	fp, #60
1a96c                 | LR__2353
1a96c     0C 4E 05 F1 | 	add	fp, #12
1a970     A7 12 02 FB | 	rdlong	arg01, fp
1a974     0C 4E 85 F1 | 	sub	fp, #12
1a978     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1a97c     FF FF 3F FF 
1a980     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1a984     50 00 90 5D |  if_ne	jmp	#LR__2355
1a988     2C 4E 05 F1 | 	add	fp, #44
1a98c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a990     2C 4E 85 F1 | 	sub	fp, #44
1a994     24 00 90 AD |  if_e	jmp	#LR__2354
1a998     C0 4E 05 F1 | 	add	fp, #192
1a99c     A7 20 02 FB | 	rdlong	local02, fp
1a9a0     10 23 02 F6 | 	mov	local03, local02
1a9a4     01 22 06 F1 | 	add	local03, #1
1a9a8     A7 22 62 FC | 	wrlong	local03, fp
1a9ac     94 4E 85 F1 | 	sub	fp, #148
1a9b0     A7 24 02 FB | 	rdlong	local04, fp
1a9b4     2C 4E 85 F1 | 	sub	fp, #44
1a9b8     10 25 42 FC | 	wrbyte	local04, local02
1a9bc                 | LR__2354
1a9bc     C0 4E 05 F1 | 	add	fp, #192
1a9c0     A7 12 02 FB | 	rdlong	arg01, fp
1a9c4     C0 4E 85 F1 | 	sub	fp, #192
1a9c8     44 01 00 FF 
1a9cc     42 15 06 F6 | 	mov	arg02, ##@LR__4281
1a9d0     18 EA BF FD | 	call	#__system____builtin_strcpy
1a9d4     A4 08 90 FD | 	jmp	#LR__2391
1a9d8                 | LR__2355
1a9d8     0C 4E 05 F1 | 	add	fp, #12
1a9dc     A7 20 02 FB | 	rdlong	local02, fp
1a9e0     0C 4E 85 F1 | 	sub	fp, #12
1a9e4     10 13 02 F6 | 	mov	arg01, local02
1a9e8     38 1E B0 FD | 	call	#__system____builtin_ilogb
1a9ec     00 00 40 FF 
1a9f0     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1a9f4     50 00 90 5D |  if_ne	jmp	#LR__2357
1a9f8     2C 4E 05 F1 | 	add	fp, #44
1a9fc     A7 1E 0A FB | 	rdlong	local01, fp wz
1aa00     2C 4E 85 F1 | 	sub	fp, #44
1aa04     24 00 90 AD |  if_e	jmp	#LR__2356
1aa08     C0 4E 05 F1 | 	add	fp, #192
1aa0c     A7 20 02 FB | 	rdlong	local02, fp
1aa10     10 23 02 F6 | 	mov	local03, local02
1aa14     01 22 06 F1 | 	add	local03, #1
1aa18     A7 22 62 FC | 	wrlong	local03, fp
1aa1c     94 4E 85 F1 | 	sub	fp, #148
1aa20     A7 24 02 FB | 	rdlong	local04, fp
1aa24     2C 4E 85 F1 | 	sub	fp, #44
1aa28     10 25 42 FC | 	wrbyte	local04, local02
1aa2c                 | LR__2356
1aa2c     C0 4E 05 F1 | 	add	fp, #192
1aa30     A7 12 02 FB | 	rdlong	arg01, fp
1aa34     C0 4E 85 F1 | 	sub	fp, #192
1aa38     44 01 00 FF 
1aa3c     46 15 06 F6 | 	mov	arg02, ##@LR__4282
1aa40     A8 E9 BF FD | 	call	#__system____builtin_strcpy
1aa44     34 08 90 FD | 	jmp	#LR__2391
1aa48                 | LR__2357
1aa48     10 4E 05 F1 | 	add	fp, #16
1aa4c     A7 1E 02 FB | 	rdlong	local01, fp
1aa50     10 4E 85 F1 | 	sub	fp, #16
1aa54     67 1E 0E F2 | 	cmp	local01, #103 wz
1aa58     10 4E 05 51 |  if_ne	add	fp, #16
1aa5c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1aa60     10 4E 85 51 |  if_ne	sub	fp, #16
1aa64     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1aa68     94 01 90 5D |  if_ne	jmp	#LR__2362
1aa6c     0C 4E 05 F1 | 	add	fp, #12
1aa70     A7 12 02 FB | 	rdlong	arg01, fp
1aa74     08 4E 05 F1 | 	add	fp, #8
1aa78     A7 14 02 F6 | 	mov	arg02, fp
1aa7c     0C 4E 05 F1 | 	add	fp, #12
1aa80     A7 16 02 F6 | 	mov	arg03, fp
1aa84     98 4E 05 F1 | 	add	fp, #152
1aa88     A7 18 02 FB | 	rdlong	arg04, fp
1aa8c     9C 4E 85 F1 | 	sub	fp, #156
1aa90     A7 1A 02 FB | 	rdlong	arg05, fp
1aa94     1C 4E 85 F1 | 	sub	fp, #28
1aa98     F4 3F B0 FD | 	call	#__system__disassemble_0383
1aa9c     10 4E 05 F1 | 	add	fp, #16
1aaa0     A7 1E 02 FB | 	rdlong	local01, fp
1aaa4     10 4E 85 F1 | 	sub	fp, #16
1aaa8     23 1E 0E F2 | 	cmp	local01, #35 wz
1aaac     A0 00 90 5D |  if_ne	jmp	#LR__2359
1aab0     20 4E 05 F1 | 	add	fp, #32
1aab4     A7 1E 02 FB | 	rdlong	local01, fp
1aab8     98 4E 05 F1 | 	add	fp, #152
1aabc     A7 22 02 FB | 	rdlong	local03, fp
1aac0     B8 4E 85 F1 | 	sub	fp, #184
1aac4     11 1F 5A F2 | 	cmps	local01, local03 wcz
1aac8     24 4E 05 11 |  if_a	add	fp, #36
1aacc     A7 02 68 1C |  if_a	wrlong	#1, fp
1aad0     24 4E 85 11 |  if_a	sub	fp, #36
1aad4     A4 01 90 1D |  if_a	jmp	#LR__2365
1aad8     20 4E 05 F1 | 	add	fp, #32
1aadc     A7 1E 02 FB | 	rdlong	local01, fp
1aae0     20 4E 85 F1 | 	sub	fp, #32
1aae4     00 1E 56 F2 | 	cmps	local01, #0 wc
1aae8     2C 00 90 3D |  if_ae	jmp	#LR__2358
1aaec     B8 4E 05 F1 | 	add	fp, #184
1aaf0     A7 1E 02 FB | 	rdlong	local01, fp
1aaf4     0F 1F 62 F6 | 	neg	local01, local01
1aaf8     98 4E 85 F1 | 	sub	fp, #152
1aafc     A7 22 02 FB | 	rdlong	local03, fp
1ab00     20 4E 85 F1 | 	sub	fp, #32
1ab04     0F 23 5A F2 | 	cmps	local03, local01 wcz
1ab08     24 4E 05 E1 |  if_be	add	fp, #36
1ab0c     A7 02 68 EC |  if_be	wrlong	#1, fp
1ab10     24 4E 85 E1 |  if_be	sub	fp, #36
1ab14     64 01 90 FD | 	jmp	#LR__2365
1ab18                 | LR__2358
1ab18     20 4E 05 F1 | 	add	fp, #32
1ab1c     A7 1E 02 FB | 	rdlong	local01, fp
1ab20     20 4E 85 F1 | 	sub	fp, #32
1ab24     01 1E 56 F2 | 	cmps	local01, #1 wc
1ab28     50 01 90 CD |  if_b	jmp	#LR__2365
1ab2c     B8 4E 05 F1 | 	add	fp, #184
1ab30     A7 1E 02 FB | 	rdlong	local01, fp
1ab34     98 4E 85 F1 | 	sub	fp, #152
1ab38     A7 22 02 FB | 	rdlong	local03, fp
1ab3c     11 1F 82 F1 | 	sub	local01, local03
1ab40     98 4E 05 F1 | 	add	fp, #152
1ab44     A7 1E 62 FC | 	wrlong	local01, fp
1ab48     B8 4E 85 F1 | 	sub	fp, #184
1ab4c     2C 01 90 FD | 	jmp	#LR__2365
1ab50                 | LR__2359
1ab50     00 1E 06 F6 | 	mov	local01, #0
1ab54     08 4E 05 F1 | 	add	fp, #8
1ab58     A7 20 02 FB | 	rdlong	local02, fp
1ab5c     1C 20 46 F0 | 	shr	local02, #28
1ab60     01 20 0E F5 | 	and	local02, #1 wz
1ab64     01 1E 06 A6 |  if_e	mov	local01, #1
1ab68     2C 4E 05 F1 | 	add	fp, #44
1ab6c     A7 1E 62 FC | 	wrlong	local01, fp
1ab70     14 4E 85 F1 | 	sub	fp, #20
1ab74     A7 1E 02 FB | 	rdlong	local01, fp
1ab78     98 4E 05 F1 | 	add	fp, #152
1ab7c     A7 22 02 FB | 	rdlong	local03, fp
1ab80     B8 4E 85 F1 | 	sub	fp, #184
1ab84     11 1F 52 F2 | 	cmps	local01, local03 wc
1ab88     18 00 90 3D |  if_ae	jmp	#LR__2360
1ab8c     20 4E 05 F1 | 	add	fp, #32
1ab90     A7 24 02 FB | 	rdlong	local04, fp
1ab94     20 4E 85 F1 | 	sub	fp, #32
1ab98     FF FF 7F FF 
1ab9c     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1aba0     10 00 90 3D |  if_ae	jmp	#LR__2361
1aba4                 | LR__2360
1aba4     24 4E 05 F1 | 	add	fp, #36
1aba8     A7 02 68 FC | 	wrlong	#1, fp
1abac     24 4E 85 F1 | 	sub	fp, #36
1abb0     C8 00 90 FD | 	jmp	#LR__2365
1abb4                 | LR__2361
1abb4     B8 4E 05 F1 | 	add	fp, #184
1abb8     A7 24 02 FB | 	rdlong	local04, fp
1abbc     98 4E 85 F1 | 	sub	fp, #152
1abc0     A7 22 02 FB | 	rdlong	local03, fp
1abc4     11 25 82 F1 | 	sub	local04, local03
1abc8     98 4E 05 F1 | 	add	fp, #152
1abcc     A7 24 62 FC | 	wrlong	local04, fp
1abd0     AC 4E 85 F1 | 	sub	fp, #172
1abd4     A7 12 02 FB | 	rdlong	arg01, fp
1abd8     08 4E 05 F1 | 	add	fp, #8
1abdc     A7 14 02 F6 | 	mov	arg02, fp
1abe0     0C 4E 05 F1 | 	add	fp, #12
1abe4     A7 16 02 F6 | 	mov	arg03, fp
1abe8     12 19 62 F6 | 	neg	arg04, local04
1abec     04 4E 85 F1 | 	sub	fp, #4
1abf0     A7 1A 02 FB | 	rdlong	arg05, fp
1abf4     1C 4E 85 F1 | 	sub	fp, #28
1abf8     94 3E B0 FD | 	call	#__system__disassemble_0383
1abfc     7C 00 90 FD | 	jmp	#LR__2365
1ac00                 | LR__2362
1ac00     24 4E 05 F1 | 	add	fp, #36
1ac04     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac08     24 4E 85 F1 | 	sub	fp, #36
1ac0c     34 00 90 AD |  if_e	jmp	#LR__2363
1ac10     0C 4E 05 F1 | 	add	fp, #12
1ac14     A7 12 02 FB | 	rdlong	arg01, fp
1ac18     08 4E 05 F1 | 	add	fp, #8
1ac1c     A7 14 02 F6 | 	mov	arg02, fp
1ac20     0C 4E 05 F1 | 	add	fp, #12
1ac24     A7 16 02 F6 | 	mov	arg03, fp
1ac28     98 4E 05 F1 | 	add	fp, #152
1ac2c     A7 18 02 FB | 	rdlong	arg04, fp
1ac30     9C 4E 85 F1 | 	sub	fp, #156
1ac34     A7 1A 02 FB | 	rdlong	arg05, fp
1ac38     1C 4E 85 F1 | 	sub	fp, #28
1ac3c     50 3E B0 FD | 	call	#__system__disassemble_0383
1ac40     38 00 90 FD | 	jmp	#LR__2364
1ac44                 | LR__2363
1ac44     0C 4E 05 F1 | 	add	fp, #12
1ac48     A7 12 02 FB | 	rdlong	arg01, fp
1ac4c     08 4E 05 F1 | 	add	fp, #8
1ac50     A7 14 02 F6 | 	mov	arg02, fp
1ac54     0C 4E 05 F1 | 	add	fp, #12
1ac58     A7 16 02 F6 | 	mov	arg03, fp
1ac5c     98 4E 05 F1 | 	add	fp, #152
1ac60     A7 24 02 FB | 	rdlong	local04, fp
1ac64     01 24 06 F1 | 	add	local04, #1
1ac68     12 19 62 F6 | 	neg	arg04, local04
1ac6c     9C 4E 85 F1 | 	sub	fp, #156
1ac70     A7 1A 02 FB | 	rdlong	arg05, fp
1ac74     1C 4E 85 F1 | 	sub	fp, #28
1ac78     14 3E B0 FD | 	call	#__system__disassemble_0383
1ac7c                 | LR__2364
1ac7c                 | LR__2365
1ac7c     1C 4E 05 F1 | 	add	fp, #28
1ac80     A7 1E 02 FB | 	rdlong	local01, fp
1ac84     1C 4E 85 F1 | 	sub	fp, #28
1ac88     02 1E 0E F2 | 	cmp	local01, #2 wz
1ac8c     4C 00 90 5D |  if_ne	jmp	#LR__2368
1ac90     1C 4E 05 F1 | 	add	fp, #28
1ac94     A7 20 68 FC | 	wrlong	#16, fp
1ac98     1C 4E 85 F1 | 	sub	fp, #28
1ac9c                 | LR__2366
1ac9c     14 4E 05 F1 | 	add	fp, #20
1aca0     A7 1E 0A FB | 	rdlong	local01, fp wz
1aca4     14 4E 85 F1 | 	sub	fp, #20
1aca8     30 00 90 AD |  if_e	jmp	#LR__2367
1acac     14 4E 05 F1 | 	add	fp, #20
1acb0     A7 22 02 FB | 	rdlong	local03, fp
1acb4     14 4E 85 F1 | 	sub	fp, #20
1acb8     00 80 00 FF 
1acbc     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1acc0     18 00 90 3D |  if_ae	jmp	#LR__2367
1acc4     14 4E 05 F1 | 	add	fp, #20
1acc8     A7 1E 02 FB | 	rdlong	local01, fp
1accc     01 1E 66 F0 | 	shl	local01, #1
1acd0     A7 1E 62 FC | 	wrlong	local01, fp
1acd4     14 4E 85 F1 | 	sub	fp, #20
1acd8     C0 FF 9F FD | 	jmp	#LR__2366
1acdc                 | LR__2367
1acdc                 | LR__2368
1acdc     70 4E 05 F1 | 	add	fp, #112
1ace0     A7 12 02 F6 | 	mov	arg01, fp
1ace4     5C 4E 85 F1 | 	sub	fp, #92
1ace8     A7 14 02 FB | 	rdlong	arg02, fp
1acec     08 4E 05 F1 | 	add	fp, #8
1acf0     A7 16 02 FB | 	rdlong	arg03, fp
1acf4     A0 4E 05 F1 | 	add	fp, #160
1acf8     A7 1A 02 FB | 	rdlong	arg05, fp
1acfc     BC 4E 85 F1 | 	sub	fp, #188
1ad00     01 18 06 F6 | 	mov	arg04, #1
1ad04     14 3D B0 FD | 	call	#__system___uitoa
1ad08     58 4E 05 F1 | 	add	fp, #88
1ad0c     A7 FA 61 FC | 	wrlong	result1, fp
1ad10     38 4E 85 F1 | 	sub	fp, #56
1ad14     A7 1E 02 FB | 	rdlong	local01, fp
1ad18     20 4E 85 F1 | 	sub	fp, #32
1ad1c     00 1E 56 F2 | 	cmps	local01, #0 wc
1ad20     50 00 90 3D |  if_ae	jmp	#LR__2369
1ad24     60 4E 05 F1 | 	add	fp, #96
1ad28     A7 5A 68 FC | 	wrlong	#45, fp
1ad2c     50 4E 05 F1 | 	add	fp, #80
1ad30     A7 12 02 F6 | 	mov	arg01, fp
1ad34     90 4E 85 F1 | 	sub	fp, #144
1ad38     A7 22 02 FB | 	rdlong	local03, fp
1ad3c     11 15 62 F6 | 	neg	arg02, local03
1ad40     18 4E 05 F1 | 	add	fp, #24
1ad44     A7 18 02 FB | 	rdlong	arg04, fp
1ad48     84 4E 05 F1 | 	add	fp, #132
1ad4c     A7 28 02 FB | 	rdlong	local06, fp
1ad50     BC 4E 85 F1 | 	sub	fp, #188
1ad54     14 25 02 F6 | 	mov	local04, local06
1ad58     0A 16 06 F6 | 	mov	arg03, #10
1ad5c     12 1B 02 F6 | 	mov	arg05, local04
1ad60     B8 3C B0 FD | 	call	#__system___uitoa
1ad64     5C 4E 05 F1 | 	add	fp, #92
1ad68     A7 FA 61 FC | 	wrlong	result1, fp
1ad6c     5C 4E 85 F1 | 	sub	fp, #92
1ad70     48 00 90 FD | 	jmp	#LR__2370
1ad74                 | LR__2369
1ad74     60 4E 05 F1 | 	add	fp, #96
1ad78     A7 56 68 FC | 	wrlong	#43, fp
1ad7c     50 4E 05 F1 | 	add	fp, #80
1ad80     A7 12 02 F6 | 	mov	arg01, fp
1ad84     90 4E 85 F1 | 	sub	fp, #144
1ad88     A7 14 02 FB | 	rdlong	arg02, fp
1ad8c     18 4E 05 F1 | 	add	fp, #24
1ad90     A7 18 02 FB | 	rdlong	arg04, fp
1ad94     84 4E 05 F1 | 	add	fp, #132
1ad98     A7 28 02 FB | 	rdlong	local06, fp
1ad9c     BC 4E 85 F1 | 	sub	fp, #188
1ada0     14 25 02 F6 | 	mov	local04, local06
1ada4     0A 16 06 F6 | 	mov	arg03, #10
1ada8     12 1B 02 F6 | 	mov	arg05, local04
1adac     6C 3C B0 FD | 	call	#__system___uitoa
1adb0     5C 4E 05 F1 | 	add	fp, #92
1adb4     A7 FA 61 FC | 	wrlong	result1, fp
1adb8     5C 4E 85 F1 | 	sub	fp, #92
1adbc                 | LR__2370
1adbc     24 4E 05 F1 | 	add	fp, #36
1adc0     A7 1E 0A FB | 	rdlong	local01, fp wz
1adc4     24 4E 85 F1 | 	sub	fp, #36
1adc8     2C 00 90 AD |  if_e	jmp	#LR__2371
1adcc     50 4E 05 F1 | 	add	fp, #80
1add0     A7 00 68 FC | 	wrlong	#0, fp
1add4     04 4E 85 F1 | 	sub	fp, #4
1add8     A7 00 68 FC | 	wrlong	#0, fp
1addc     6C 4E 05 F1 | 	add	fp, #108
1ade0     A7 1E 02 FB | 	rdlong	local01, fp
1ade4     01 1E 06 F1 | 	add	local01, #1
1ade8     64 4E 85 F1 | 	sub	fp, #100
1adec     A7 1E 62 FC | 	wrlong	local01, fp
1adf0     54 4E 85 F1 | 	sub	fp, #84
1adf4     88 00 90 FD | 	jmp	#LR__2374
1adf8                 | LR__2371
1adf8     20 4E 05 F1 | 	add	fp, #32
1adfc     A7 1E 02 FB | 	rdlong	local01, fp
1ae00     20 4E 85 F1 | 	sub	fp, #32
1ae04     00 1E 56 F2 | 	cmps	local01, #0 wc
1ae08     40 00 90 3D |  if_ae	jmp	#LR__2372
1ae0c     20 4E 05 F1 | 	add	fp, #32
1ae10     A7 20 02 FB | 	rdlong	local02, fp
1ae14     30 4E 05 F1 | 	add	fp, #48
1ae18     A7 20 62 FC | 	wrlong	local02, fp
1ae1c     04 4E 85 F1 | 	sub	fp, #4
1ae20     A7 20 62 FC | 	wrlong	local02, fp
1ae24     2C 4E 85 F1 | 	sub	fp, #44
1ae28     A7 1E 02 FB | 	rdlong	local01, fp
1ae2c     98 4E 05 F1 | 	add	fp, #152
1ae30     A7 22 02 FB | 	rdlong	local03, fp
1ae34     11 1F 02 F1 | 	add	local01, local03
1ae38     01 1E 06 F1 | 	add	local01, #1
1ae3c     64 4E 85 F1 | 	sub	fp, #100
1ae40     A7 1E 62 FC | 	wrlong	local01, fp
1ae44     54 4E 85 F1 | 	sub	fp, #84
1ae48     34 00 90 FD | 	jmp	#LR__2373
1ae4c                 | LR__2372
1ae4c     4C 4E 05 F1 | 	add	fp, #76
1ae50     A7 00 68 FC | 	wrlong	#0, fp
1ae54     2C 4E 85 F1 | 	sub	fp, #44
1ae58     A7 1E 02 FB | 	rdlong	local01, fp
1ae5c     30 4E 05 F1 | 	add	fp, #48
1ae60     A7 1E 62 FC | 	wrlong	local01, fp
1ae64     68 4E 05 F1 | 	add	fp, #104
1ae68     A7 22 02 FB | 	rdlong	local03, fp
1ae6c     11 1F 02 F1 | 	add	local01, local03
1ae70     01 1E 06 F1 | 	add	local01, #1
1ae74     64 4E 85 F1 | 	sub	fp, #100
1ae78     A7 1E 62 FC | 	wrlong	local01, fp
1ae7c     54 4E 85 F1 | 	sub	fp, #84
1ae80                 | LR__2373
1ae80                 | LR__2374
1ae80     54 4E 05 F1 | 	add	fp, #84
1ae84     A7 1E 02 FB | 	rdlong	local01, fp
1ae88     08 4E 85 F1 | 	sub	fp, #8
1ae8c     A7 22 02 FB | 	rdlong	local03, fp
1ae90     11 1F 82 F1 | 	sub	local01, local03
1ae94     01 1E 06 F1 | 	add	local01, #1
1ae98     24 4E 85 F1 | 	sub	fp, #36
1ae9c     A7 1E 62 FC | 	wrlong	local01, fp
1aea0     04 4E 05 F1 | 	add	fp, #4
1aea4     A7 1E 0A FB | 	rdlong	local01, fp wz
1aea8     2C 4E 85 F1 | 	sub	fp, #44
1aeac     28 4E 05 51 |  if_ne	add	fp, #40
1aeb0     A7 22 02 5B |  if_ne	rdlong	local03, fp
1aeb4     01 22 06 51 |  if_ne	add	local03, #1
1aeb8     A7 22 62 5C |  if_ne	wrlong	local03, fp
1aebc     28 4E 85 51 |  if_ne	sub	fp, #40
1aec0     1C 4E 05 F1 | 	add	fp, #28
1aec4     A7 1E 02 FB | 	rdlong	local01, fp
1aec8     1C 4E 85 F1 | 	sub	fp, #28
1aecc     10 1E 0E F2 | 	cmp	local01, #16 wz
1aed0     28 4E 05 A1 |  if_e	add	fp, #40
1aed4     A7 1E 02 AB |  if_e	rdlong	local01, fp
1aed8     02 1E 06 A1 |  if_e	add	local01, #2
1aedc     A7 1E 62 AC |  if_e	wrlong	local01, fp
1aee0     28 4E 85 A1 |  if_e	sub	fp, #40
1aee4     24 4E 05 F1 | 	add	fp, #36
1aee8     A7 1E 0A FB | 	rdlong	local01, fp wz
1aeec     24 4E 85 F1 | 	sub	fp, #36
1aef0     28 00 90 AD |  if_e	jmp	#LR__2375
1aef4     28 4E 05 F1 | 	add	fp, #40
1aef8     A7 1E 02 FB | 	rdlong	local01, fp
1aefc     02 22 06 F6 | 	mov	local03, #2
1af00     34 4E 05 F1 | 	add	fp, #52
1af04     A7 26 02 FB | 	rdlong	local05, fp
1af08     13 23 02 F1 | 	add	local03, local05
1af0c     11 1F 02 F1 | 	add	local01, local03
1af10     34 4E 85 F1 | 	sub	fp, #52
1af14     A7 1E 62 FC | 	wrlong	local01, fp
1af18     28 4E 85 F1 | 	sub	fp, #40
1af1c                 | LR__2375
1af1c     28 4E 05 F1 | 	add	fp, #40
1af20     A7 1E 02 FB | 	rdlong	local01, fp
1af24     28 4E 85 F1 | 	sub	fp, #40
1af28     41 1E 56 F2 | 	cmps	local01, #65 wc
1af2c     01 FA 65 36 |  if_ae	neg	result1, #1
1af30     08 05 90 3D |  if_ae	jmp	#LR__2403
1af34     3C 4E 05 F1 | 	add	fp, #60
1af38     A7 1E 0A FB | 	rdlong	local01, fp wz
1af3c     3C 4E 85 F1 | 	sub	fp, #60
1af40     60 00 90 AD |  if_e	jmp	#LR__2376
1af44     C0 4E 05 F1 | 	add	fp, #192
1af48     A7 12 02 FB | 	rdlong	arg01, fp
1af4c     94 4E 85 F1 | 	sub	fp, #148
1af50     A7 14 02 FB | 	rdlong	arg02, fp
1af54     14 4E 05 F1 | 	add	fp, #20
1af58     A7 16 02 FB | 	rdlong	arg03, fp
1af5c     40 4E 85 F1 | 	sub	fp, #64
1af60     20 3D B0 FD | 	call	#__system__emitsign_0385
1af64     18 4F 05 F1 | 	add	fp, #280
1af68     A7 FA 61 FC | 	wrlong	result1, fp
1af6c     18 4F 85 F1 | 	sub	fp, #280
1af70     00 FA 55 F2 | 	cmps	result1, #0 wc
1af74     18 4F 05 C1 |  if_b	add	fp, #280
1af78     A7 FA 01 CB |  if_b	rdlong	result1, fp
1af7c     18 4F 85 C1 |  if_b	sub	fp, #280
1af80     B8 04 90 CD |  if_b	jmp	#LR__2403
1af84     C0 4E 05 F1 | 	add	fp, #192
1af88     A7 1E 02 FB | 	rdlong	local01, fp
1af8c     58 4E 05 F1 | 	add	fp, #88
1af90     A7 22 02 FB | 	rdlong	local03, fp
1af94     11 1F 02 F1 | 	add	local01, local03
1af98     58 4E 85 F1 | 	sub	fp, #88
1af9c     A7 1E 62 FC | 	wrlong	local01, fp
1afa0     C0 4E 85 F1 | 	sub	fp, #192
1afa4                 | LR__2376
1afa4     4C 4E 05 F1 | 	add	fp, #76
1afa8     A7 1E 02 FB | 	rdlong	local01, fp
1afac     34 4E 85 F1 | 	sub	fp, #52
1afb0     A7 1E 62 FC | 	wrlong	local01, fp
1afb4     18 4E 85 F1 | 	sub	fp, #24
1afb8     97 9E 48 FB | 	callpa	#(@LR__2382-@LR__2377)>>2,fcache_load_ptr_
1afbc                 | LR__2377
1afbc     18 4E 05 F1 | 	add	fp, #24
1afc0     A7 20 02 FB | 	rdlong	local02, fp
1afc4     3C 4E 05 F1 | 	add	fp, #60
1afc8     A7 26 02 FB | 	rdlong	local05, fp
1afcc     54 4E 85 F1 | 	sub	fp, #84
1afd0     13 21 52 F2 | 	cmps	local02, local05 wc
1afd4     20 01 90 3D |  if_ae	jmp	#LR__2383
1afd8     18 4E 05 F1 | 	add	fp, #24
1afdc     A7 28 02 FB | 	rdlong	local06, fp
1afe0     18 4E 85 F1 | 	sub	fp, #24
1afe4     00 28 56 F2 | 	cmps	local06, #0 wc
1afe8     58 00 90 CD |  if_b	jmp	#LR__2378
1afec     18 4E 05 F1 | 	add	fp, #24
1aff0     A7 28 02 FB | 	rdlong	local06, fp
1aff4     40 4E 05 F1 | 	add	fp, #64
1aff8     A7 2A 02 FB | 	rdlong	local07, fp
1affc     58 4E 85 F1 | 	sub	fp, #88
1b000     15 29 52 F2 | 	cmps	local06, local07 wc
1b004     3C 00 90 3D |  if_ae	jmp	#LR__2378
1b008     C0 4E 05 F1 | 	add	fp, #192
1b00c     A7 2C 02 FB | 	rdlong	local08, fp
1b010     16 2B 02 F6 | 	mov	local07, local08
1b014     01 2A 06 F1 | 	add	local07, #1
1b018     A7 2A 62 FC | 	wrlong	local07, fp
1b01c     A8 4E 85 F1 | 	sub	fp, #168
1b020     A7 2A 02 FB | 	rdlong	local07, fp
1b024     15 2F 02 F6 | 	mov	local09, local07
1b028     58 4E 05 F1 | 	add	fp, #88
1b02c     A7 30 02 F6 | 	mov	local10, fp
1b030     A7 2E 02 F1 | 	add	local09, fp
1b034     17 33 C2 FA | 	rdbyte	local11, local09
1b038     16 33 42 FC | 	wrbyte	local11, local08
1b03c     70 4E 85 F1 | 	sub	fp, #112
1b040     20 00 90 FD | 	jmp	#LR__2379
1b044                 | LR__2378
1b044     C0 4E 05 F1 | 	add	fp, #192
1b048     A7 2C 02 FB | 	rdlong	local08, fp
1b04c     16 2F 02 F6 | 	mov	local09, local08
1b050     01 2E 06 F1 | 	add	local09, #1
1b054     A7 2E 62 FC | 	wrlong	local09, fp
1b058     C0 4E 85 F1 | 	sub	fp, #192
1b05c     30 2E 06 F6 | 	mov	local09, #48
1b060     16 61 48 FC | 	wrbyte	#48, local08
1b064                 | LR__2379
1b064     18 4E 05 F1 | 	add	fp, #24
1b068     A7 28 02 FB | 	rdlong	local06, fp
1b06c     38 4E 05 F1 | 	add	fp, #56
1b070     A7 34 02 FB | 	rdlong	local12, fp
1b074     50 4E 85 F1 | 	sub	fp, #80
1b078     1A 29 0A F2 | 	cmp	local06, local12 wz
1b07c     5C 00 90 5D |  if_ne	jmp	#LR__2381
1b080     10 4F 05 F1 | 	add	fp, #272
1b084     A7 2A 02 FB | 	rdlong	local07, fp
1b088     10 4F 85 F1 | 	sub	fp, #272
1b08c     15 2F 0A F6 | 	mov	local09, local07 wz
1b090     28 00 90 5D |  if_ne	jmp	#LR__2380
1b094     54 4E 05 F1 | 	add	fp, #84
1b098     A7 32 02 FB | 	rdlong	local11, fp
1b09c     19 31 02 F6 | 	mov	local10, local11
1b0a0     01 30 86 F1 | 	sub	local10, #1
1b0a4     3C 4E 85 F1 | 	sub	fp, #60
1b0a8     A7 36 02 FB | 	rdlong	local13, fp
1b0ac     18 4E 85 F1 | 	sub	fp, #24
1b0b0     1B 39 02 F6 | 	mov	local14, local13
1b0b4     18 39 52 F2 | 	cmps	local14, local10 wc
1b0b8     20 00 90 3D |  if_ae	jmp	#LR__2381
1b0bc                 | LR__2380
1b0bc     C0 4E 05 F1 | 	add	fp, #192
1b0c0     A7 2C 02 FB | 	rdlong	local08, fp
1b0c4     16 35 02 F6 | 	mov	local12, local08
1b0c8     01 34 06 F1 | 	add	local12, #1
1b0cc     A7 34 62 FC | 	wrlong	local12, fp
1b0d0     C0 4E 85 F1 | 	sub	fp, #192
1b0d4     2E 2E 06 F6 | 	mov	local09, #46
1b0d8     16 5D 48 FC | 	wrbyte	#46, local08
1b0dc                 | LR__2381
1b0dc     18 4E 05 F1 | 	add	fp, #24
1b0e0     A7 3A 02 FB | 	rdlong	local15, fp
1b0e4     1D 35 02 F6 | 	mov	local12, local15
1b0e8     01 34 06 F1 | 	add	local12, #1
1b0ec     A7 34 62 FC | 	wrlong	local12, fp
1b0f0     18 4E 85 F1 | 	sub	fp, #24
1b0f4     C4 FE 9F FD | 	jmp	#LR__2377
1b0f8                 | LR__2382
1b0f8                 | LR__2383
1b0f8     34 4E 05 F1 | 	add	fp, #52
1b0fc     A7 1E 0A FB | 	rdlong	local01, fp wz
1b100     34 4E 85 F1 | 	sub	fp, #52
1b104     A0 00 90 AD |  if_e	jmp	#LR__2387
1b108     C0 4E 05 F1 | 	add	fp, #192
1b10c     A7 1E 02 FB | 	rdlong	local01, fp
1b110     01 1E 86 F1 | 	sub	local01, #1
1b114     A7 1E 62 FC | 	wrlong	local01, fp
1b118     C0 4E 85 F1 | 	sub	fp, #192
1b11c     97 26 48 FB | 	callpa	#(@LR__2385-@LR__2384)>>2,fcache_load_ptr_
1b120                 | LR__2384
1b120     C0 4E 05 F1 | 	add	fp, #192
1b124     A7 1E 02 FB | 	rdlong	local01, fp
1b128     04 4E 05 F1 | 	add	fp, #4
1b12c     A7 22 02 FB | 	rdlong	local03, fp
1b130     C4 4E 85 F1 | 	sub	fp, #196
1b134     11 1F 5A F2 | 	cmps	local01, local03 wcz
1b138     30 00 90 ED |  if_be	jmp	#LR__2386
1b13c     C0 4E 05 F1 | 	add	fp, #192
1b140     A7 28 02 FB | 	rdlong	local06, fp
1b144     C0 4E 85 F1 | 	sub	fp, #192
1b148     14 25 C2 FA | 	rdbyte	local04, local06
1b14c     30 24 0E F2 | 	cmp	local04, #48 wz
1b150     18 00 90 5D |  if_ne	jmp	#LR__2386
1b154     C0 4E 05 F1 | 	add	fp, #192
1b158     A7 1E 02 FB | 	rdlong	local01, fp
1b15c     01 1E 86 F1 | 	sub	local01, #1
1b160     A7 1E 62 FC | 	wrlong	local01, fp
1b164     C0 4E 85 F1 | 	sub	fp, #192
1b168     B4 FF 9F FD | 	jmp	#LR__2384
1b16c                 | LR__2385
1b16c                 | LR__2386
1b16c     C0 4E 05 F1 | 	add	fp, #192
1b170     A7 20 02 FB | 	rdlong	local02, fp
1b174     C0 4E 85 F1 | 	sub	fp, #192
1b178     10 1F C2 FA | 	rdbyte	local01, local02
1b17c     2E 1E 0E F2 | 	cmp	local01, #46 wz
1b180     C0 4E 05 A1 |  if_e	add	fp, #192
1b184     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b188     01 1E 86 A1 |  if_e	sub	local01, #1
1b18c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b190     C0 4E 85 A1 |  if_e	sub	fp, #192
1b194     C0 4E 05 F1 | 	add	fp, #192
1b198     A7 22 02 FB | 	rdlong	local03, fp
1b19c     01 22 06 F1 | 	add	local03, #1
1b1a0     A7 22 62 FC | 	wrlong	local03, fp
1b1a4     C0 4E 85 F1 | 	sub	fp, #192
1b1a8                 | LR__2387
1b1a8     24 4E 05 F1 | 	add	fp, #36
1b1ac     A7 1E 0A FB | 	rdlong	local01, fp wz
1b1b0     24 4E 85 F1 | 	sub	fp, #36
1b1b4     B4 00 90 AD |  if_e	jmp	#LR__2390
1b1b8     C0 4E 05 F1 | 	add	fp, #192
1b1bc     A7 20 02 FB | 	rdlong	local02, fp
1b1c0     10 23 02 F6 | 	mov	local03, local02
1b1c4     01 22 06 F1 | 	add	local03, #1
1b1c8     A7 22 62 FC | 	wrlong	local03, fp
1b1cc     90 4E 85 F1 | 	sub	fp, #144
1b1d0     A7 24 02 FB | 	rdlong	local04, fp
1b1d4     10 25 42 FC | 	wrbyte	local04, local02
1b1d8     90 4E 05 F1 | 	add	fp, #144
1b1dc     A7 20 02 FB | 	rdlong	local02, fp
1b1e0     10 23 02 F6 | 	mov	local03, local02
1b1e4     01 22 06 F1 | 	add	local03, #1
1b1e8     A7 22 62 FC | 	wrlong	local03, fp
1b1ec     60 4E 85 F1 | 	sub	fp, #96
1b1f0     A7 24 02 FB | 	rdlong	local04, fp
1b1f4     10 25 42 FC | 	wrbyte	local04, local02
1b1f8     48 4E 85 F1 | 	sub	fp, #72
1b1fc     A7 00 68 FC | 	wrlong	#0, fp
1b200     18 4E 85 F1 | 	sub	fp, #24
1b204                 | LR__2388
1b204     18 4E 05 F1 | 	add	fp, #24
1b208     A7 20 02 FB | 	rdlong	local02, fp
1b20c     44 4E 05 F1 | 	add	fp, #68
1b210     A7 26 02 FB | 	rdlong	local05, fp
1b214     5C 4E 85 F1 | 	sub	fp, #92
1b218     13 21 52 F2 | 	cmps	local02, local05 wc
1b21c     4C 00 90 3D |  if_ae	jmp	#LR__2389
1b220     C0 4E 05 F1 | 	add	fp, #192
1b224     A7 2C 02 FB | 	rdlong	local08, fp
1b228     16 35 02 F6 | 	mov	local12, local08
1b22c     01 34 06 F1 | 	add	local12, #1
1b230     A7 34 62 FC | 	wrlong	local12, fp
1b234     A8 4E 85 F1 | 	sub	fp, #168
1b238     A7 2A 02 FB | 	rdlong	local07, fp
1b23c     15 2F 02 F6 | 	mov	local09, local07
1b240     98 4E 05 F1 | 	add	fp, #152
1b244     A7 30 02 F6 | 	mov	local10, fp
1b248     A7 2E 02 F1 | 	add	local09, fp
1b24c     17 33 C2 FA | 	rdbyte	local11, local09
1b250     16 33 42 FC | 	wrbyte	local11, local08
1b254     98 4E 85 F1 | 	sub	fp, #152
1b258     A7 34 02 FB | 	rdlong	local12, fp
1b25c     01 34 06 F1 | 	add	local12, #1
1b260     A7 34 62 FC | 	wrlong	local12, fp
1b264     18 4E 85 F1 | 	sub	fp, #24
1b268     98 FF 9F FD | 	jmp	#LR__2388
1b26c                 | LR__2389
1b26c                 | LR__2390
1b26c     C0 4E 05 F1 | 	add	fp, #192
1b270     A7 1E 02 FB | 	rdlong	local01, fp
1b274     C0 4E 85 F1 | 	sub	fp, #192
1b278     0F 01 48 FC | 	wrbyte	#0, local01
1b27c                 | LR__2391
1b27c     6C 4E 05 F1 | 	add	fp, #108
1b280     A7 1E 0A FB | 	rdlong	local01, fp wz
1b284     6C 4E 85 F1 | 	sub	fp, #108
1b288     90 01 90 AD |  if_e	jmp	#LR__2402
1b28c     48 4E 05 F1 | 	add	fp, #72
1b290     A7 22 0A FB | 	rdlong	local03, fp wz
1b294     48 4E 85 F1 | 	sub	fp, #72
1b298     80 01 90 AD |  if_e	jmp	#LR__2402
1b29c     C4 4E 05 F1 | 	add	fp, #196
1b2a0     A7 12 02 FB | 	rdlong	arg01, fp
1b2a4     C4 4E 85 F1 | 	sub	fp, #196
1b2a8     09 3D 02 F6 | 	mov	local16, arg01
1b2ac     97 06 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
1b2b0                 | LR__2392
1b2b0     1E FB C9 FA | 	rdbyte	result1, local16 wz
1b2b4     01 3C 06 51 |  if_ne	add	local16, #1
1b2b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2392
1b2bc                 | LR__2393
1b2bc     09 3D 82 F1 | 	sub	local16, arg01
1b2c0     1E 25 02 F6 | 	mov	local04, local16
1b2c4     6C 4E 05 F1 | 	add	fp, #108
1b2c8     A7 28 02 FB | 	rdlong	local06, fp
1b2cc     6C 4E 85 F1 | 	sub	fp, #108
1b2d0     14 25 5A F2 | 	cmps	local04, local06 wcz
1b2d4     44 01 90 ED |  if_be	jmp	#LR__2402
1b2d8     C4 4E 05 F1 | 	add	fp, #196
1b2dc     A7 1E 02 FB | 	rdlong	local01, fp
1b2e0     5C 4E 05 F1 | 	add	fp, #92
1b2e4     A7 1E 62 FC | 	wrlong	local01, fp
1b2e8     FC 4E 85 F1 | 	sub	fp, #252
1b2ec     A7 1E 0A FB | 	rdlong	local01, fp wz
1b2f0     24 4E 85 F1 | 	sub	fp, #36
1b2f4     20 00 90 AD |  if_e	jmp	#LR__2394
1b2f8     B8 4E 05 F1 | 	add	fp, #184
1b2fc     A7 00 68 FC | 	wrlong	#0, fp
1b300     4C 4E 85 F1 | 	sub	fp, #76
1b304     A7 1E 02 FB | 	rdlong	local01, fp
1b308     B0 4E 05 F1 | 	add	fp, #176
1b30c     A7 1E 62 FC | 	wrlong	local01, fp
1b310     1C 4F 85 F1 | 	sub	fp, #284
1b314     24 00 90 FD | 	jmp	#LR__2395
1b318                 | LR__2394
1b318     6C 4E 05 F1 | 	add	fp, #108
1b31c     A7 1E 02 FB | 	rdlong	local01, fp
1b320     01 1E 86 F1 | 	sub	local01, #1
1b324     4C 4E 05 F1 | 	add	fp, #76
1b328     A7 22 02 FB | 	rdlong	local03, fp
1b32c     11 1F 82 F1 | 	sub	local01, local03
1b330     64 4E 05 F1 | 	add	fp, #100
1b334     A7 1E 62 FC | 	wrlong	local01, fp
1b338     1C 4F 85 F1 | 	sub	fp, #284
1b33c                 | LR__2395
1b33c     97 20 48 FB | 	callpa	#(@LR__2397-@LR__2396)>>2,fcache_load_ptr_
1b340                 | LR__2396
1b340     1C 4F 05 F1 | 	add	fp, #284
1b344     A7 1E 0A FB | 	rdlong	local01, fp wz
1b348     1C 4F 85 F1 | 	sub	fp, #284
1b34c     30 00 90 AD |  if_e	jmp	#LR__2398
1b350     20 4F 05 F1 | 	add	fp, #288
1b354     A7 20 02 FB | 	rdlong	local02, fp
1b358     10 23 02 F6 | 	mov	local03, local02
1b35c     01 22 06 F1 | 	add	local03, #1
1b360     A7 22 62 FC | 	wrlong	local03, fp
1b364     10 55 48 FC | 	wrbyte	#42, local02
1b368     04 4E 85 F1 | 	sub	fp, #4
1b36c     A7 1E 02 FB | 	rdlong	local01, fp
1b370     01 1E 86 F1 | 	sub	local01, #1
1b374     A7 1E 62 FC | 	wrlong	local01, fp
1b378     1C 4F 85 F1 | 	sub	fp, #284
1b37c     C0 FF 9F FD | 	jmp	#LR__2396
1b380                 | LR__2397
1b380                 | LR__2398
1b380     B8 4E 05 F1 | 	add	fp, #184
1b384     A7 1E 0A FB | 	rdlong	local01, fp wz
1b388     B8 4E 85 F1 | 	sub	fp, #184
1b38c     70 00 90 AD |  if_e	jmp	#LR__2401
1b390     20 4F 05 F1 | 	add	fp, #288
1b394     A7 20 02 FB | 	rdlong	local02, fp
1b398     10 23 02 F6 | 	mov	local03, local02
1b39c     01 22 06 F1 | 	add	local03, #1
1b3a0     A7 22 62 FC | 	wrlong	local03, fp
1b3a4     10 5D 48 FC | 	wrbyte	#46, local02
1b3a8     04 4E 85 F1 | 	sub	fp, #4
1b3ac     A7 00 68 FC | 	wrlong	#0, fp
1b3b0     1C 4F 85 F1 | 	sub	fp, #284
1b3b4                 | LR__2399
1b3b4     1C 4F 05 F1 | 	add	fp, #284
1b3b8     A7 20 02 FB | 	rdlong	local02, fp
1b3bc     64 4E 85 F1 | 	sub	fp, #100
1b3c0     A7 26 02 FB | 	rdlong	local05, fp
1b3c4     B8 4E 85 F1 | 	sub	fp, #184
1b3c8     13 21 52 F2 | 	cmps	local02, local05 wc
1b3cc     30 00 90 3D |  if_ae	jmp	#LR__2400
1b3d0     20 4F 05 F1 | 	add	fp, #288
1b3d4     A7 2C 02 FB | 	rdlong	local08, fp
1b3d8     16 35 02 F6 | 	mov	local12, local08
1b3dc     01 34 06 F1 | 	add	local12, #1
1b3e0     A7 34 62 FC | 	wrlong	local12, fp
1b3e4     16 55 48 FC | 	wrbyte	#42, local08
1b3e8     04 4E 85 F1 | 	sub	fp, #4
1b3ec     A7 34 02 FB | 	rdlong	local12, fp
1b3f0     01 34 06 F1 | 	add	local12, #1
1b3f4     A7 34 62 FC | 	wrlong	local12, fp
1b3f8     1C 4F 85 F1 | 	sub	fp, #284
1b3fc     B4 FF 9F FD | 	jmp	#LR__2399
1b400                 | LR__2400
1b400                 | LR__2401
1b400     20 4F 05 F1 | 	add	fp, #288
1b404     A7 20 02 FB | 	rdlong	local02, fp
1b408     10 23 02 F6 | 	mov	local03, local02
1b40c     01 22 06 F1 | 	add	local03, #1
1b410     A7 22 62 FC | 	wrlong	local03, fp
1b414     20 4F 85 F1 | 	sub	fp, #288
1b418     10 01 48 FC | 	wrbyte	#0, local02
1b41c                 | LR__2402
1b41c     04 4E 05 F1 | 	add	fp, #4
1b420     A7 12 02 FB | 	rdlong	arg01, fp
1b424     04 4E 05 F1 | 	add	fp, #4
1b428     A7 14 02 FB | 	rdlong	arg02, fp
1b42c     BC 4E 05 F1 | 	add	fp, #188
1b430     A7 16 02 FB | 	rdlong	arg03, fp
1b434     C4 4E 85 F1 | 	sub	fp, #196
1b438     C4 EE BF FD | 	call	#__system___fmtstr
1b43c                 | LR__2403
1b43c     A7 F0 03 F6 | 	mov	ptra, fp
1b440     B2 00 A0 FD | 	call	#popregs_
1b444                 | __system___fmtfloat_ret
1b444     2D 00 64 FD | 	ret
1b448                 | 
1b448                 | __system__Left_S
1b448     04 4A 05 F6 | 	mov	COUNT_, #4
1b44c     A8 00 A0 FD | 	call	#pushregs_
1b450     09 1F 02 F6 | 	mov	local01, arg01
1b454     0A 21 02 F6 | 	mov	local02, arg02
1b458     01 20 56 F2 | 	cmps	local02, #1 wc
1b45c     44 01 00 CF 
1b460     4A FB 05 C6 |  if_b	mov	result1, ##@LR__4283
1b464     5C 00 90 CD |  if_b	jmp	#LR__2413
1b468     0F 13 02 F6 | 	mov	arg01, local01
1b46c     09 23 02 F6 | 	mov	local03, arg01
1b470     97 06 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1b474                 | LR__2410
1b474     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b478     01 22 06 51 |  if_ne	add	local03, #1
1b47c     F4 FF 9F 5D |  if_ne	jmp	#LR__2410
1b480                 | LR__2411
1b480     09 23 82 F1 | 	sub	local03, arg01
1b484     11 FB 01 F6 | 	mov	result1, local03
1b488     10 FB 59 F2 | 	cmps	result1, local02 wcz
1b48c     0F FB 01 E6 |  if_be	mov	result1, local01
1b490     30 00 90 ED |  if_be	jmp	#LR__2413
1b494     10 13 02 F6 | 	mov	arg01, local02
1b498     02 12 06 F1 | 	add	arg01, #2
1b49c     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1b4a0     FD 24 0A F6 | 	mov	local04, result1 wz
1b4a4     18 00 90 AD |  if_e	jmp	#LR__2412
1b4a8     12 13 02 F6 | 	mov	arg01, local04
1b4ac     0F 15 02 F6 | 	mov	arg02, local01
1b4b0     10 17 02 F6 | 	mov	arg03, local02
1b4b4     A0 DE BF FD | 	call	#__system____builtin_memmove
1b4b8     12 21 02 F1 | 	add	local02, local04
1b4bc     10 01 48 FC | 	wrbyte	#0, local02
1b4c0                 | LR__2412
1b4c0     12 FB 01 F6 | 	mov	result1, local04
1b4c4                 | LR__2413
1b4c4     A7 F0 03 F6 | 	mov	ptra, fp
1b4c8     B2 00 A0 FD | 	call	#popregs_
1b4cc                 | __system__Left_S_ret
1b4cc     2D 00 64 FD | 	ret
1b4d0                 | 
1b4d0                 | __system__Right_S
1b4d0     05 4A 05 F6 | 	mov	COUNT_, #5
1b4d4     A8 00 A0 FD | 	call	#pushregs_
1b4d8     09 1F 02 F6 | 	mov	local01, arg01
1b4dc     0A 21 02 F6 | 	mov	local02, arg02
1b4e0     01 20 56 F2 | 	cmps	local02, #1 wc
1b4e4     44 01 00 CF 
1b4e8     4B FB 05 C6 |  if_b	mov	result1, ##@LR__4284
1b4ec     64 00 90 CD |  if_b	jmp	#LR__2423
1b4f0     0F 13 02 F6 | 	mov	arg01, local01
1b4f4     09 23 02 F6 | 	mov	local03, arg01
1b4f8     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1b4fc                 | LR__2420
1b4fc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b500     01 22 06 51 |  if_ne	add	local03, #1
1b504     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1b508                 | LR__2421
1b508     09 23 82 F1 | 	sub	local03, arg01
1b50c     11 FB 01 F6 | 	mov	result1, local03
1b510     FD 24 02 F6 | 	mov	local04, result1
1b514     10 25 5A F2 | 	cmps	local04, local02 wcz
1b518     0F FB 01 E6 |  if_be	mov	result1, local01
1b51c     34 00 90 ED |  if_be	jmp	#LR__2423
1b520     10 13 02 F6 | 	mov	arg01, local02
1b524     02 12 06 F1 | 	add	arg01, #2
1b528     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1b52c     FD 26 0A F6 | 	mov	local05, result1 wz
1b530     1C 00 90 AD |  if_e	jmp	#LR__2422
1b534     10 25 82 F1 | 	sub	local04, local02
1b538     0F 25 02 F1 | 	add	local04, local01
1b53c     01 20 06 F1 | 	add	local02, #1
1b540     13 13 02 F6 | 	mov	arg01, local05
1b544     12 15 02 F6 | 	mov	arg02, local04
1b548     10 17 02 F6 | 	mov	arg03, local02
1b54c     08 DE BF FD | 	call	#__system____builtin_memmove
1b550                 | LR__2422
1b550     13 FB 01 F6 | 	mov	result1, local05
1b554                 | LR__2423
1b554     A7 F0 03 F6 | 	mov	ptra, fp
1b558     B2 00 A0 FD | 	call	#popregs_
1b55c                 | __system__Right_S_ret
1b55c     2D 00 64 FD | 	ret
1b560                 | 
1b560                 | __system__Mid_S
1b560     05 4A 05 F6 | 	mov	COUNT_, #5
1b564     A8 00 A0 FD | 	call	#pushregs_
1b568     09 1F 02 F6 | 	mov	local01, arg01
1b56c     0A 21 02 F6 | 	mov	local02, arg02
1b570     01 16 56 F2 | 	cmps	arg03, #1 wc
1b574     44 01 00 CF 
1b578     4C FB 05 C6 |  if_b	mov	result1, ##@LR__4285
1b57c     80 00 90 CD |  if_b	jmp	#LR__2433
1b580     01 20 86 F1 | 	sub	local02, #1
1b584     00 20 56 F3 | 	fges	local02, #0 wc
1b588     0F 13 02 F6 | 	mov	arg01, local01
1b58c     09 23 02 F6 | 	mov	local03, arg01
1b590     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1b594                 | LR__2430
1b594     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b598     01 22 06 51 |  if_ne	add	local03, #1
1b59c     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1b5a0                 | LR__2431
1b5a0     09 23 82 F1 | 	sub	local03, arg01
1b5a4     11 FB 01 F6 | 	mov	result1, local03
1b5a8     FD 14 02 F6 | 	mov	arg02, result1
1b5ac     10 15 52 F2 | 	cmps	arg02, local02 wc
1b5b0     44 01 00 CF 
1b5b4     4D FB 05 C6 |  if_b	mov	result1, ##@LR__4286
1b5b8     44 00 90 CD |  if_b	jmp	#LR__2433
1b5bc     0A 25 02 F6 | 	mov	local04, arg02
1b5c0     10 25 82 F1 | 	sub	local04, local02
1b5c4     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1b5c8     0B 25 02 16 |  if_a	mov	local04, arg03
1b5cc     12 13 02 F6 | 	mov	arg01, local04
1b5d0     02 12 06 F1 | 	add	arg01, #2
1b5d4     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1b5d8     FD 26 0A F6 | 	mov	local05, result1 wz
1b5dc     1C 00 90 AD |  if_e	jmp	#LR__2432
1b5e0     0F 21 02 F1 | 	add	local02, local01
1b5e4     13 13 02 F6 | 	mov	arg01, local05
1b5e8     10 15 02 F6 | 	mov	arg02, local02
1b5ec     12 17 02 F6 | 	mov	arg03, local04
1b5f0     64 DD BF FD | 	call	#__system____builtin_memmove
1b5f4     13 25 02 F1 | 	add	local04, local05
1b5f8     12 01 48 FC | 	wrbyte	#0, local04
1b5fc                 | LR__2432
1b5fc     13 FB 01 F6 | 	mov	result1, local05
1b600                 | LR__2433
1b600     A7 F0 03 F6 | 	mov	ptra, fp
1b604     B2 00 A0 FD | 	call	#popregs_
1b608                 | __system__Mid_S_ret
1b608     2D 00 64 FD | 	ret
1b60c                 | 
1b60c                 | __system__Chr_S
1b60c     01 4A 05 F6 | 	mov	COUNT_, #1
1b610     A8 00 A0 FD | 	call	#pushregs_
1b614     09 1F 02 F6 | 	mov	local01, arg01
1b618     03 12 06 F6 | 	mov	arg01, #3
1b61c     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1b620     00 FA 4D F2 | 	cmps	result1, #0 wz
1b624     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1b628     01 FA 05 51 |  if_ne	add	result1, #1
1b62c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1b630     01 FA 85 51 |  if_ne	sub	result1, #1
1b634     A7 F0 03 F6 | 	mov	ptra, fp
1b638     B2 00 A0 FD | 	call	#popregs_
1b63c                 | __system__Chr_S_ret
1b63c     2D 00 64 FD | 	ret
1b640                 | 
1b640                 | __system__Number_S
1b640     08 4A 05 F6 | 	mov	COUNT_, #8
1b644     A8 00 A0 FD | 	call	#pushregs_
1b648     09 1F 02 F6 | 	mov	local01, arg01
1b64c     0A 21 0A F6 | 	mov	local02, arg02 wz
1b650     0B 23 02 F6 | 	mov	local03, arg03
1b654     3C 00 90 5D |  if_ne	jmp	#LR__2442
1b658     01 20 06 F6 | 	mov	local02, #1
1b65c     11 25 02 F6 | 	mov	local04, local03
1b660     01 26 06 F6 | 	mov	local05, #1
1b664     97 16 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1b668                 | LR__2440
1b668     00 28 06 F6 | 	mov	local06, #0
1b66c     0F 25 1A F2 | 	cmp	local04, local01 wcz
1b670     01 28 66 E6 |  if_be	neg	local06, #1
1b674     12 27 12 F2 | 	cmp	local05, local04 wc
1b678     15 2B A2 F1 | 	subx	local07, local07
1b67c     15 29 CA F7 | 	test	local06, local07 wz
1b680     11 25 02 5D |  if_ne	qmul	local04, local03
1b684     12 27 02 56 |  if_ne	mov	local05, local04
1b688     01 20 06 51 |  if_ne	add	local02, #1
1b68c     18 24 62 5D |  if_ne	getqx	local04
1b690     D4 FF 9F 5D |  if_ne	jmp	#LR__2440
1b694                 | LR__2441
1b694                 | LR__2442
1b694     20 20 36 F3 | 	fle	local02, #32 wc
1b698     10 13 02 F6 | 	mov	arg01, local02
1b69c     02 12 06 F1 | 	add	arg01, #2
1b6a0     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1b6a4     FD 28 02 F6 | 	mov	local06, result1
1b6a8     10 2B 02 F6 | 	mov	local07, local02
1b6ac     14 2B 02 F1 | 	add	local07, local06
1b6b0     15 01 48 FC | 	wrbyte	#0, local07
1b6b4     97 1A 48 FB | 	callpa	#(@LR__2444-@LR__2443)>>2,fcache_load_ptr_
1b6b8                 | LR__2443
1b6b8     01 20 16 F2 | 	cmp	local02, #1 wc
1b6bc     2C 00 90 CD |  if_b	jmp	#LR__2445
1b6c0     11 1F 12 FD | 	qdiv	local01, local03
1b6c4     01 20 86 F1 | 	sub	local02, #1
1b6c8     10 2B 02 F6 | 	mov	local07, local02
1b6cc     14 2B 02 F1 | 	add	local07, local06
1b6d0     19 2C 62 FD | 	getqy	local08
1b6d4     0A 2C 16 F2 | 	cmp	local08, #10 wc
1b6d8     30 2C 06 C1 |  if_b	add	local08, #48
1b6dc     37 2C 06 31 |  if_ae	add	local08, #55
1b6e0     15 2D 42 FC | 	wrbyte	local08, local07
1b6e4     18 1E 62 FD | 	getqx	local01
1b6e8     CC FF 9F FD | 	jmp	#LR__2443
1b6ec                 | LR__2444
1b6ec                 | LR__2445
1b6ec     14 FB 01 F6 | 	mov	result1, local06
1b6f0     A7 F0 03 F6 | 	mov	ptra, fp
1b6f4     B2 00 A0 FD | 	call	#popregs_
1b6f8                 | __system__Number_S_ret
1b6f8     2D 00 64 FD | 	ret
1b6fc                 | 
1b6fc                 | __system__LCase_S
1b6fc     07 4A 05 F6 | 	mov	COUNT_, #7
1b700     A8 00 A0 FD | 	call	#pushregs_
1b704     09 1F 02 F6 | 	mov	local01, arg01
1b708     09 21 02 F6 | 	mov	local02, arg01
1b70c     97 06 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1b710                 | LR__2450
1b710     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b714     01 20 06 51 |  if_ne	add	local02, #1
1b718     F4 FF 9F 5D |  if_ne	jmp	#LR__2450
1b71c                 | LR__2451
1b71c     09 21 82 F1 | 	sub	local02, arg01
1b720     10 FB 01 F6 | 	mov	result1, local02
1b724     FD 20 0A F6 | 	mov	local02, result1 wz
1b728     44 01 00 AF 
1b72c     4E FB 05 A6 |  if_e	mov	result1, ##@LR__4287
1b730     7C 00 90 AD |  if_e	jmp	#LR__2457
1b734     10 13 02 F6 | 	mov	arg01, local02
1b738     02 12 06 F1 | 	add	arg01, #2
1b73c     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1b740     FD 22 0A F6 | 	mov	local03, result1 wz
1b744     64 00 90 AD |  if_e	jmp	#LR__2456
1b748     01 24 66 F6 | 	neg	local04, #1
1b74c     97 26 48 FB | 	callpa	#(@LR__2455-@LR__2452)>>2,fcache_load_ptr_
1b750                 | LR__2452
1b750     01 24 06 F1 | 	add	local04, #1
1b754     12 27 02 F6 | 	mov	local05, local04
1b758     0F 27 02 F1 | 	add	local05, local01
1b75c     13 29 C2 FA | 	rdbyte	local06, local05
1b760     41 28 56 F2 | 	cmps	local06, #65 wc
1b764     18 00 90 CD |  if_b	jmp	#LR__2453
1b768     5B 28 56 F2 | 	cmps	local06, #91 wc
1b76c     12 2B 02 C6 |  if_b	mov	local07, local04
1b770     11 2B 02 C1 |  if_b	add	local07, local03
1b774     20 28 06 C1 |  if_b	add	local06, #32
1b778     15 29 42 CC |  if_b	wrbyte	local06, local07
1b77c     0C 00 90 CD |  if_b	jmp	#LR__2454
1b780                 | LR__2453
1b780     12 2B 02 F6 | 	mov	local07, local04
1b784     11 2B 02 F1 | 	add	local07, local03
1b788     15 29 42 FC | 	wrbyte	local06, local07
1b78c                 | LR__2454
1b78c     10 29 02 F6 | 	mov	local06, local02
1b790     01 28 86 F1 | 	sub	local06, #1
1b794     14 25 0A F2 | 	cmp	local04, local06 wz
1b798     B4 FF 9F 5D |  if_ne	jmp	#LR__2452
1b79c                 | LR__2455
1b79c     11 21 02 F1 | 	add	local02, local03
1b7a0     10 01 48 FC | 	wrbyte	#0, local02
1b7a4     11 FB 01 F6 | 	mov	result1, local03
1b7a8     04 00 90 FD | 	jmp	#LR__2457
1b7ac                 | LR__2456
1b7ac     11 FB 01 F6 | 	mov	result1, local03
1b7b0                 | LR__2457
1b7b0     A7 F0 03 F6 | 	mov	ptra, fp
1b7b4     B2 00 A0 FD | 	call	#popregs_
1b7b8                 | __system__LCase_S_ret
1b7b8     2D 00 64 FD | 	ret
1b7bc                 | 
1b7bc                 | __system__LTrim_S
1b7bc     05 4A 05 F6 | 	mov	COUNT_, #5
1b7c0     A8 00 A0 FD | 	call	#pushregs_
1b7c4     09 1F 02 F6 | 	mov	local01, arg01
1b7c8     09 21 02 F6 | 	mov	local02, arg01
1b7cc     97 06 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1b7d0                 | LR__2460
1b7d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b7d4     01 20 06 51 |  if_ne	add	local02, #1
1b7d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2460
1b7dc                 | LR__2461
1b7dc     09 21 82 F1 | 	sub	local02, arg01
1b7e0     10 FB 01 F6 | 	mov	result1, local02
1b7e4     FD 20 0A F6 | 	mov	local02, result1 wz
1b7e8     44 01 00 AF 
1b7ec     4F FB 05 A6 |  if_e	mov	result1, ##@LR__4288
1b7f0     7C 00 90 AD |  if_e	jmp	#LR__2466
1b7f4     00 22 06 F6 | 	mov	local03, #0
1b7f8     10 25 02 F6 | 	mov	local04, local02
1b7fc                 | LR__2462
1b7fc     12 23 52 F2 | 	cmps	local03, local04 wc
1b800     68 00 90 3D |  if_ae	jmp	#LR__2465
1b804     11 17 02 F6 | 	mov	arg03, local03
1b808     0F 17 02 F1 | 	add	arg03, local01
1b80c     0B 17 C2 FA | 	rdbyte	arg03, arg03
1b810     20 16 0E F2 | 	cmp	arg03, #32 wz
1b814     4C 00 90 AD |  if_e	jmp	#LR__2464
1b818     10 13 02 F6 | 	mov	arg01, local02
1b81c     11 13 82 F1 | 	sub	arg01, local03
1b820     02 12 06 F1 | 	add	arg01, #2
1b824     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1b828     FD 26 0A F6 | 	mov	local05, result1 wz
1b82c     2C 00 90 AD |  if_e	jmp	#LR__2463
1b830     11 15 02 F6 | 	mov	arg02, local03
1b834     0F 15 02 F1 | 	add	arg02, local01
1b838     10 17 02 F6 | 	mov	arg03, local02
1b83c     11 17 82 F1 | 	sub	arg03, local03
1b840     13 13 02 F6 | 	mov	arg01, local05
1b844     10 DB BF FD | 	call	#__system____builtin_memmove
1b848     11 21 82 F1 | 	sub	local02, local03
1b84c     13 21 02 F1 | 	add	local02, local05
1b850     10 01 48 FC | 	wrbyte	#0, local02
1b854     13 FB 01 F6 | 	mov	result1, local05
1b858     14 00 90 FD | 	jmp	#LR__2466
1b85c                 | LR__2463
1b85c     13 FB 01 F6 | 	mov	result1, local05
1b860     0C 00 90 FD | 	jmp	#LR__2466
1b864                 | LR__2464
1b864     01 22 06 F1 | 	add	local03, #1
1b868     90 FF 9F FD | 	jmp	#LR__2462
1b86c                 | LR__2465
1b86c     0F FB 01 F6 | 	mov	result1, local01
1b870                 | LR__2466
1b870     A7 F0 03 F6 | 	mov	ptra, fp
1b874     B2 00 A0 FD | 	call	#popregs_
1b878                 | __system__LTrim_S_ret
1b878     2D 00 64 FD | 	ret
1b87c                 | 
1b87c                 | __system__RTrim_S
1b87c     04 4A 05 F6 | 	mov	COUNT_, #4
1b880     A8 00 A0 FD | 	call	#pushregs_
1b884     09 1F 02 F6 | 	mov	local01, arg01
1b888     09 21 02 F6 | 	mov	local02, arg01
1b88c     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1b890                 | LR__2470
1b890     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b894     01 20 06 51 |  if_ne	add	local02, #1
1b898     F4 FF 9F 5D |  if_ne	jmp	#LR__2470
1b89c                 | LR__2471
1b89c     09 21 82 F1 | 	sub	local02, arg01
1b8a0     10 FB 01 F6 | 	mov	result1, local02
1b8a4     FD 20 0A F6 | 	mov	local02, result1 wz
1b8a8     44 01 00 AF 
1b8ac     50 FB 05 A6 |  if_e	mov	result1, ##@LR__4289
1b8b0     74 00 90 AD |  if_e	jmp	#LR__2475
1b8b4     10 23 02 F6 | 	mov	local03, local02
1b8b8     01 22 86 F1 | 	sub	local03, #1
1b8bc                 | LR__2472
1b8bc     11 15 02 F6 | 	mov	arg02, local03
1b8c0     0F 15 02 F1 | 	add	arg02, local01
1b8c4     0A 21 C2 FA | 	rdbyte	local02, arg02
1b8c8     20 20 0E F2 | 	cmp	local02, #32 wz
1b8cc     44 00 90 AD |  if_e	jmp	#LR__2474
1b8d0     11 13 02 F6 | 	mov	arg01, local03
1b8d4     02 12 06 F1 | 	add	arg01, #2
1b8d8     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1b8dc     FD 24 0A F6 | 	mov	local04, result1 wz
1b8e0     28 00 90 AD |  if_e	jmp	#LR__2473
1b8e4     11 17 02 F6 | 	mov	arg03, local03
1b8e8     01 16 06 F1 | 	add	arg03, #1
1b8ec     12 13 02 F6 | 	mov	arg01, local04
1b8f0     0F 15 02 F6 | 	mov	arg02, local01
1b8f4     60 DA BF FD | 	call	#__system____builtin_memmove
1b8f8     01 22 06 F1 | 	add	local03, #1
1b8fc     12 23 02 F1 | 	add	local03, local04
1b900     11 01 48 FC | 	wrbyte	#0, local03
1b904     12 FB 01 F6 | 	mov	result1, local04
1b908     1C 00 90 FD | 	jmp	#LR__2475
1b90c                 | LR__2473
1b90c     12 FB 01 F6 | 	mov	result1, local04
1b910     14 00 90 FD | 	jmp	#LR__2475
1b914                 | LR__2474
1b914     01 22 86 F1 | 	sub	local03, #1
1b918     00 22 56 F2 | 	cmps	local03, #0 wc
1b91c     9C FF 9F 3D |  if_ae	jmp	#LR__2472
1b920     44 01 00 FF 
1b924     51 FB 05 F6 | 	mov	result1, ##@LR__4290
1b928                 | LR__2475
1b928     A7 F0 03 F6 | 	mov	ptra, fp
1b92c     B2 00 A0 FD | 	call	#popregs_
1b930                 | __system__RTrim_S_ret
1b930     2D 00 64 FD | 	ret
1b934                 | 
1b934                 | __system__Instr
1b934     07 4A 05 F6 | 	mov	COUNT_, #7
1b938     A8 00 A0 FD | 	call	#pushregs_
1b93c     09 1F 02 F6 | 	mov	local01, arg01
1b940     0A 21 02 F6 | 	mov	local02, arg02
1b944     0B 23 02 F6 | 	mov	local03, arg03
1b948     11 13 02 F6 | 	mov	arg01, local03
1b94c     09 25 02 F6 | 	mov	local04, arg01
1b950     97 06 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1b954                 | LR__2480
1b954     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b958     01 24 06 51 |  if_ne	add	local04, #1
1b95c     F4 FF 9F 5D |  if_ne	jmp	#LR__2480
1b960                 | LR__2481
1b960     09 25 82 F1 | 	sub	local04, arg01
1b964     12 27 02 F6 | 	mov	local05, local04
1b968     10 13 02 F6 | 	mov	arg01, local02
1b96c     09 25 02 F6 | 	mov	local04, arg01
1b970     97 06 48 FB | 	callpa	#(@LR__2483-@LR__2482)>>2,fcache_load_ptr_
1b974                 | LR__2482
1b974     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b978     01 24 06 51 |  if_ne	add	local04, #1
1b97c     F4 FF 9F 5D |  if_ne	jmp	#LR__2482
1b980                 | LR__2483
1b980     09 25 82 F1 | 	sub	local04, arg01
1b984     12 FB 01 F6 | 	mov	result1, local04
1b988     FD 18 0A F6 | 	mov	arg04, result1 wz
1b98c     00 FA 05 A6 |  if_e	mov	result1, #0
1b990     98 00 90 AD |  if_e	jmp	#LR__2487
1b994     00 26 0E F2 | 	cmp	local05, #0 wz
1b998     00 FA 05 A6 |  if_e	mov	result1, #0
1b99c     8C 00 90 AD |  if_e	jmp	#LR__2487
1b9a0     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1b9a4     00 FA 05 16 |  if_a	mov	result1, #0
1b9a8     80 00 90 1D |  if_a	jmp	#LR__2487
1b9ac     01 1E 56 F2 | 	cmps	local01, #1 wc
1b9b0     01 1E 06 C6 |  if_b	mov	local01, #1
1b9b4     11 29 C2 FA | 	rdbyte	local06, local03
1b9b8     01 26 0E F2 | 	cmp	local05, #1 wz
1b9bc     18 00 90 5D |  if_ne	jmp	#LR__2484
1b9c0     10 13 02 F6 | 	mov	arg01, local02
1b9c4     14 15 02 F6 | 	mov	arg02, local06
1b9c8     0F 17 02 F6 | 	mov	arg03, local01
1b9cc     00 18 06 F6 | 	mov	arg04, #0
1b9d0     B8 33 B0 FD | 	call	#__system____ScanForChar
1b9d4     54 00 90 FD | 	jmp	#LR__2487
1b9d8                 | LR__2484
1b9d8     0F 2B 02 F6 | 	mov	local07, local01
1b9dc                 | LR__2485
1b9dc     10 13 02 F6 | 	mov	arg01, local02
1b9e0     14 15 02 F6 | 	mov	arg02, local06
1b9e4     15 17 02 F6 | 	mov	arg03, local07
1b9e8     00 18 06 F6 | 	mov	arg04, #0
1b9ec     9C 33 B0 FD | 	call	#__system____ScanForChar
1b9f0     FD 2A 0A F6 | 	mov	local07, result1 wz
1b9f4     30 00 90 AD |  if_e	jmp	#LR__2486
1b9f8     13 17 02 F6 | 	mov	arg03, local05
1b9fc     10 13 02 F6 | 	mov	arg01, local02
1ba00     15 15 02 F6 | 	mov	arg02, local07
1ba04     58 FB BF FD | 	call	#__system__Mid_S
1ba08     FD 12 02 F6 | 	mov	arg01, result1
1ba0c     11 15 02 F6 | 	mov	arg02, local03
1ba10     4C DA BF FD | 	call	#__system___string_cmp
1ba14     00 FA 0D F2 | 	cmp	result1, #0 wz
1ba18     15 FB 01 A6 |  if_e	mov	result1, local07
1ba1c     0C 00 90 AD |  if_e	jmp	#LR__2487
1ba20     13 2B 02 F1 | 	add	local07, local05
1ba24     B4 FF 9F FD | 	jmp	#LR__2485
1ba28                 | LR__2486
1ba28     00 FA 05 F6 | 	mov	result1, #0
1ba2c                 | LR__2487
1ba2c     A7 F0 03 F6 | 	mov	ptra, fp
1ba30     B2 00 A0 FD | 	call	#popregs_
1ba34                 | __system__Instr_ret
1ba34     2D 00 64 FD | 	ret
1ba38                 | 
1ba38                 | __system___strerror
1ba38     00 12 56 F2 | 	cmps	arg01, #0 wc
1ba3c     08 00 90 CD |  if_b	jmp	#LR__2490
1ba40     1A 12 56 F2 | 	cmps	arg01, #26 wc
1ba44     04 00 90 CD |  if_b	jmp	#LR__2491
1ba48                 | LR__2490
1ba48     19 12 06 F6 | 	mov	arg01, #25
1ba4c                 | LR__2491
1ba4c     02 12 66 F0 | 	shl	arg01, #2
1ba50     01 00 00 FF 
1ba54     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1ba58     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1ba5c     09 FB 01 FB | 	rdlong	result1, arg01
1ba60     01 00 00 FF 
1ba64     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1ba68                 | __system___strerror_ret
1ba68     2D 00 64 FD | 	ret
1ba6c                 | 
1ba6c                 | __system___int64_shl
1ba6c     20 16 CE F7 | 	test	arg03, #32 wz
1ba70     09 15 02 56 |  if_ne	mov	arg02, arg01
1ba74     00 12 06 56 |  if_ne	mov	arg01, #0
1ba78     1F 16 CE F7 | 	test	arg03, #31 wz
1ba7c     18 00 90 AD |  if_e	jmp	#LR__2500
1ba80     0B 15 62 F0 | 	shl	arg02, arg03
1ba84     09 FB 01 F6 | 	mov	result1, arg01
1ba88     0B FD 61 F6 | 	neg	result2, arg03
1ba8c     FE FA 41 F0 | 	shr	result1, result2
1ba90     FD 14 42 F5 | 	or	arg02, result1
1ba94     0B 13 62 F0 | 	shl	arg01, arg03
1ba98                 | LR__2500
1ba98     0A FD 01 F6 | 	mov	result2, arg02
1ba9c     09 FB 01 F6 | 	mov	result1, arg01
1baa0                 | __system___int64_shl_ret
1baa0     2D 00 64 FD | 	ret
1baa4                 | 
1baa4                 | __system___usepins
1baa4     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1baa8     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1baac     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1bab0     00 13 CA F7 | 	test	arg01, _var01 wz
1bab4     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1bab8     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1babc     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1bac0     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1bac4     00 FA 05 56 |  if_ne	mov	result1, #0
1bac8     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1bacc     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1bad0     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1bad4     09 03 42 F5 | 	or	_var02, arg01
1bad8     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1badc     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1bae0     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1bae4     0A 03 42 F5 | 	or	_var02, arg02
1bae8     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1baec     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1baf0     01 FA 65 F6 | 	neg	result1, #1
1baf4                 | __system___usepins_ret
1baf4     2D 00 64 FD | 	ret
1baf8                 | 
1baf8                 | __system___freepins
1baf8     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1bafc     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1bb00     09 01 22 F5 | 	andn	_var01, arg01
1bb04     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1bb08     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1bb0c     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1bb10     0A 01 22 F5 | 	andn	_var01, arg02
1bb14     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1bb18     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1bb1c                 | __system___freepins_ret
1bb1c     2D 00 64 FD | 	ret
1bb20                 | 
1bb20                 | __system___float_fromuns
1bb20     09 17 0A F6 | 	mov	arg03, arg01 wz
1bb24     0B FB 01 A6 |  if_e	mov	result1, arg03
1bb28     24 00 90 AD |  if_e	jmp	#LR__2510
1bb2c     0B 15 92 F7 | 	encod	arg02, arg03 wc
1bb30     01 14 06 C1 |  if_b	add	arg02, #1
1bb34     01 14 86 F1 | 	sub	arg02, #1
1bb38     1F 12 06 F6 | 	mov	arg01, #31
1bb3c     0A 13 82 F1 | 	sub	arg01, arg02
1bb40     09 17 62 F0 | 	shl	arg03, arg01
1bb44     02 16 46 F0 | 	shr	arg03, #2
1bb48     00 12 06 F6 | 	mov	arg01, #0
1bb4c     4C 09 B0 FD | 	call	#__system___float_Pack
1bb50                 | LR__2510
1bb50                 | __system___float_fromuns_ret
1bb50     2D 00 64 FD | 	ret
1bb54                 | 
1bb54                 | __system___float_add
1bb54     0F 4A 05 F6 | 	mov	COUNT_, #15
1bb58     A8 00 A0 FD | 	call	#pushregs_
1bb5c     09 1F 02 F6 | 	mov	local01, arg01
1bb60     0A 21 02 F6 | 	mov	local02, arg02
1bb64     00 22 06 F6 | 	mov	local03, #0
1bb68     0F 25 02 F6 | 	mov	local04, local01
1bb6c     12 27 02 F6 | 	mov	local05, local04
1bb70     16 26 46 F7 | 	zerox	local05, #22
1bb74     12 29 02 F6 | 	mov	local06, local04
1bb78     01 28 66 F0 | 	shl	local06, #1
1bb7c     18 28 46 F0 | 	shr	local06, #24
1bb80     1F 24 46 F0 | 	shr	local04, #31
1bb84     10 13 02 F6 | 	mov	arg01, local02
1bb88     09 FB 01 F6 | 	mov	result1, arg01
1bb8c     FD 2A 02 F6 | 	mov	local07, result1
1bb90     15 2D 02 F6 | 	mov	local08, local07
1bb94     16 2C 46 F7 | 	zerox	local08, #22
1bb98     15 2F 02 F6 | 	mov	local09, local07
1bb9c     01 2E 66 F0 | 	shl	local09, #1
1bba0     18 2E 46 F0 | 	shr	local09, #24
1bba4     17 31 02 F6 | 	mov	local10, local09
1bba8     1F 2A 46 F0 | 	shr	local07, #31
1bbac     00 32 06 F6 | 	mov	local11, #0
1bbb0     00 34 06 F6 | 	mov	local12, #0
1bbb4     18 29 12 F2 | 	cmp	local06, local10 wc
1bbb8     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1bbbc     2C 00 90 1D |  if_a	jmp	#LR__2520
1bbc0     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1bbc4     24 00 90 3D |  if_ae	jmp	#LR__2520
1bbc8     13 37 02 F6 | 	mov	local13, local05
1bbcc     16 27 02 F6 | 	mov	local05, local08
1bbd0     1B 2D 02 F6 | 	mov	local08, local13
1bbd4     14 37 02 F6 | 	mov	local13, local06
1bbd8     18 29 02 F6 | 	mov	local06, local10
1bbdc     1B 31 02 F6 | 	mov	local10, local13
1bbe0     12 37 02 F6 | 	mov	local13, local04
1bbe4     15 25 02 F6 | 	mov	local04, local07
1bbe8     1B 2B 02 F6 | 	mov	local07, local13
1bbec                 | LR__2520
1bbec     FF 28 0E F2 | 	cmp	local06, #255 wz
1bbf0     70 01 90 AD |  if_e	jmp	#LR__2535
1bbf4     00 28 0E F2 | 	cmp	local06, #0 wz
1bbf8     AC 01 90 AD |  if_e	jmp	#LR__2537
1bbfc     17 26 26 F4 | 	bith	local05, #23
1bc00                 | LR__2521
1bc00     00 30 0E F2 | 	cmp	local10, #0 wz
1bc04     F0 01 90 AD |  if_e	jmp	#LR__2541
1bc08     17 2C 26 F4 | 	bith	local08, #23
1bc0c                 | LR__2522
1bc0c     7F 28 86 F1 | 	sub	local06, #127
1bc10     7F 30 86 F1 | 	sub	local10, #127
1bc14     14 39 02 F6 | 	mov	local14, local06
1bc18     18 39 82 F1 | 	sub	local14, local10
1bc1c     97 14 48 FB | 	callpa	#(@LR__2524-@LR__2523)>>2,fcache_load_ptr_
1bc20                 | LR__2523
1bc20     20 38 56 F2 | 	cmps	local14, #32 wc
1bc24     20 00 90 CD |  if_b	jmp	#LR__2525
1bc28     16 2F 02 F6 | 	mov	local09, local08
1bc2c     00 32 0E F2 | 	cmp	local11, #0 wz
1bc30     6F 32 62 FD | 	wrnz	local11
1bc34     19 2F 42 F5 | 	or	local09, local11
1bc38     17 33 02 F6 | 	mov	local11, local09
1bc3c     00 2C 06 F6 | 	mov	local08, #0
1bc40     20 38 86 F1 | 	sub	local14, #32
1bc44     D8 FF 9F FD | 	jmp	#LR__2523
1bc48                 | LR__2524
1bc48                 | LR__2525
1bc48     00 38 0E F2 | 	cmp	local14, #0 wz
1bc4c     38 00 90 AD |  if_e	jmp	#LR__2526
1bc50     16 37 02 F6 | 	mov	local13, local08
1bc54     20 30 06 F6 | 	mov	local10, #32
1bc58     1C 31 82 F1 | 	sub	local10, local14
1bc5c     18 37 62 F0 | 	shl	local13, local10
1bc60     19 31 02 F6 | 	mov	local10, local11
1bc64     20 2E 06 F6 | 	mov	local09, #32
1bc68     1C 2F 82 F1 | 	sub	local09, local14
1bc6c     17 31 6A F0 | 	shl	local10, local09 wz
1bc70     1C 33 42 F0 | 	shr	local11, local14
1bc74     1C 2D 42 F0 | 	shr	local08, local14
1bc78     1B 33 42 F5 | 	or	local11, local13
1bc7c     00 3A 06 F6 | 	mov	local15, #0
1bc80     01 3A 06 56 |  if_ne	mov	local15, #1
1bc84     1D 33 42 F5 | 	or	local11, local15
1bc88                 | LR__2526
1bc88     12 3B 02 F6 | 	mov	local15, local04
1bc8c     15 3B 62 F5 | 	xor	local15, local07
1bc90     01 3A CE F7 | 	test	local15, #1 wz
1bc94     18 00 90 AD |  if_e	jmp	#LR__2527
1bc98     16 2D 22 F6 | 	not	local08, local08
1bc9c     19 33 22 F6 | 	not	local11, local11
1bca0     01 32 0E F1 | 	add	local11, #1 wz
1bca4     00 3A 06 F6 | 	mov	local15, #0
1bca8     01 3A 06 A6 |  if_e	mov	local15, #1
1bcac     1D 2D 02 F1 | 	add	local08, local15
1bcb0                 | LR__2527
1bcb0     19 35 12 F1 | 	add	local12, local11 wc
1bcb4     16 27 22 F1 | 	addx	local05, local08
1bcb8     00 26 56 F2 | 	cmps	local05, #0 wc
1bcbc     1C 00 90 3D |  if_ae	jmp	#LR__2528
1bcc0     01 24 66 F5 | 	xor	local04, #1
1bcc4     13 27 22 F6 | 	not	local05, local05
1bcc8     1A 35 22 F6 | 	not	local12, local12
1bccc     01 34 0E F1 | 	add	local12, #1 wz
1bcd0     00 3A 06 F6 | 	mov	local15, #0
1bcd4     01 3A 06 A6 |  if_e	mov	local15, #1
1bcd8     1D 27 02 F1 | 	add	local05, local15
1bcdc                 | LR__2528
1bcdc     00 80 00 FF 
1bce0     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1bce4     28 00 90 CD |  if_b	jmp	#LR__2529
1bce8     01 28 06 F1 | 	add	local06, #1
1bcec     1A 39 02 F6 | 	mov	local14, local12
1bcf0     01 38 06 F5 | 	and	local14, #1
1bcf4     01 34 46 F0 | 	shr	local12, #1
1bcf8     13 3B 02 F6 | 	mov	local15, local05
1bcfc     1F 3A 66 F0 | 	shl	local15, #31
1bd00     1D 35 42 F5 | 	or	local12, local15
1bd04     1C 35 42 F5 | 	or	local12, local14
1bd08     01 26 46 F0 | 	shr	local05, #1
1bd0c     3C 00 90 FD | 	jmp	#LR__2534
1bd10                 | LR__2529
1bd10     00 40 00 FF 
1bd14     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1bd18     30 00 90 3D |  if_ae	jmp	#LR__2533
1bd1c     00 26 0E F2 | 	cmp	local05, #0 wz
1bd20     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1bd24     08 24 46 A5 |  if_e	or	local04, #8
1bd28     01 24 26 A5 |  if_e	andn	local04, #1
1bd2c     1C 00 90 AD |  if_e	jmp	#LR__2532
1bd30                 | LR__2530
1bd30     00 40 00 FF 
1bd34     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1bd38     10 00 90 3D |  if_ae	jmp	#LR__2531
1bd3c     1A 35 12 F1 | 	add	local12, local12 wc
1bd40     13 27 22 F1 | 	addx	local05, local05
1bd44     01 28 86 F1 | 	sub	local06, #1
1bd48     E4 FF 9F FD | 	jmp	#LR__2530
1bd4c                 | LR__2531
1bd4c                 | LR__2532
1bd4c                 | LR__2533
1bd4c                 | LR__2534
1bd4c     13 13 02 F6 | 	mov	arg01, local05
1bd50     1A 15 02 F6 | 	mov	arg02, local12
1bd54     14 17 02 F6 | 	mov	arg03, local06
1bd58     12 19 02 F6 | 	mov	arg04, local04
1bd5c     70 34 B0 FD | 	call	#__system__pack_0491
1bd60     DC 00 90 FD | 	jmp	#LR__2545
1bd64                 | LR__2535
1bd64     FF 30 0E F2 | 	cmp	local10, #255 wz
1bd68     10 00 90 5D |  if_ne	jmp	#LR__2536
1bd6c     12 2B 0A F2 | 	cmp	local07, local04 wz
1bd70     00 F8 3F 5F 
1bd74     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1bd78     C4 00 90 5D |  if_ne	jmp	#LR__2545
1bd7c                 | LR__2536
1bd7c     00 26 0E F2 | 	cmp	local05, #0 wz
1bd80     00 F8 3F 5F 
1bd84     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1bd88     B4 00 90 5D |  if_ne	jmp	#LR__2545
1bd8c     1A 15 02 F6 | 	mov	arg02, local12
1bd90     14 17 02 F6 | 	mov	arg03, local06
1bd94     12 19 02 F6 | 	mov	arg04, local04
1bd98     02 18 46 F5 | 	or	arg04, #2
1bd9c     13 13 02 F6 | 	mov	arg01, local05
1bda0     2C 34 B0 FD | 	call	#__system__pack_0491
1bda4     98 00 90 FD | 	jmp	#LR__2545
1bda8                 | LR__2537
1bda8     00 26 0E F2 | 	cmp	local05, #0 wz
1bdac     28 00 90 AD |  if_e	jmp	#LR__2540
1bdb0     01 26 66 F0 | 	shl	local05, #1
1bdb4     97 0E 48 FB | 	callpa	#(@LR__2539-@LR__2538)>>2,fcache_load_ptr_
1bdb8                 | LR__2538
1bdb8     00 40 00 FF 
1bdbc     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1bdc0     14 3B 02 C6 |  if_b	mov	local15, local06
1bdc4     01 3A 86 C1 |  if_b	sub	local15, #1
1bdc8     1D 29 02 C6 |  if_b	mov	local06, local15
1bdcc     01 26 66 C0 |  if_b	shl	local05, #1
1bdd0     E4 FF 9F CD |  if_b	jmp	#LR__2538
1bdd4                 | LR__2539
1bdd4     28 FE 9F FD | 	jmp	#LR__2521
1bdd8                 | LR__2540
1bdd8     15 25 02 F5 | 	and	local04, local07
1bddc     12 19 02 F6 | 	mov	arg04, local04
1bde0     08 18 46 F5 | 	or	arg04, #8
1bde4     00 12 06 F6 | 	mov	arg01, #0
1bde8     00 14 06 F6 | 	mov	arg02, #0
1bdec     00 16 06 F6 | 	mov	arg03, #0
1bdf0     DC 33 B0 FD | 	call	#__system__pack_0491
1bdf4     48 00 90 FD | 	jmp	#LR__2545
1bdf8                 | LR__2541
1bdf8     00 2C 0E F2 | 	cmp	local08, #0 wz
1bdfc     28 00 90 AD |  if_e	jmp	#LR__2544
1be00     01 2C 66 F0 | 	shl	local08, #1
1be04     97 0E 48 FB | 	callpa	#(@LR__2543-@LR__2542)>>2,fcache_load_ptr_
1be08                 | LR__2542
1be08     00 40 00 FF 
1be0c     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1be10     18 3B 02 C6 |  if_b	mov	local15, local10
1be14     01 3A 86 C1 |  if_b	sub	local15, #1
1be18     1D 31 02 C6 |  if_b	mov	local10, local15
1be1c     01 2C 66 C0 |  if_b	shl	local08, #1
1be20     E4 FF 9F CD |  if_b	jmp	#LR__2542
1be24                 | LR__2543
1be24     E4 FD 9F FD | 	jmp	#LR__2522
1be28                 | LR__2544
1be28     7F 28 86 F1 | 	sub	local06, #127
1be2c     13 13 02 F6 | 	mov	arg01, local05
1be30     1A 15 02 F6 | 	mov	arg02, local12
1be34     14 17 02 F6 | 	mov	arg03, local06
1be38     12 19 02 F6 | 	mov	arg04, local04
1be3c     90 33 B0 FD | 	call	#__system__pack_0491
1be40                 | LR__2545
1be40     A7 F0 03 F6 | 	mov	ptra, fp
1be44     B2 00 A0 FD | 	call	#popregs_
1be48                 | __system___float_add_ret
1be48     2D 00 64 FD | 	ret
1be4c                 | 
1be4c                 | __system___float_sqrt
1be4c     04 4A 05 F6 | 	mov	COUNT_, #4
1be50     A8 00 A0 FD | 	call	#pushregs_
1be54     09 1F 02 F6 | 	mov	local01, arg01
1be58     09 FB 01 F6 | 	mov	result1, arg01
1be5c     FD 20 02 F6 | 	mov	local02, result1
1be60     10 23 02 F6 | 	mov	local03, local02
1be64     16 22 46 F7 | 	zerox	local03, #22
1be68     10 25 02 F6 | 	mov	local04, local02
1be6c     01 24 66 F0 | 	shl	local04, #1
1be70     18 24 4E F0 | 	shr	local04, #24 wz
1be74     1F 20 46 F0 | 	shr	local02, #31
1be78     70 00 90 AD |  if_e	jmp	#LR__2551
1be7c     17 22 26 F4 | 	bith	local03, #23
1be80                 | LR__2550
1be80     00 20 0E F2 | 	cmp	local02, #0 wz
1be84     00 F8 3F 5F 
1be88     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1be8c     88 00 90 5D |  if_ne	jmp	#LR__2554
1be90     FF 24 0E F2 | 	cmp	local04, #255 wz
1be94     0F FB 01 A6 |  if_e	mov	result1, local01
1be98     7C 00 90 AD |  if_e	jmp	#LR__2554
1be9c     7F 24 86 F1 | 	sub	local04, #127
1bea0     01 24 CE F7 | 	test	local04, #1 wz
1bea4     01 22 66 50 |  if_ne	shl	local03, #1
1bea8     05 22 66 F0 | 	shl	local03, #5
1beac     11 01 38 FD | 	qsqrt	#0, local03
1beb0     01 24 86 51 |  if_ne	sub	local04, #1
1beb4     12 25 52 F6 | 	abs	local04, local04 wc
1beb8     01 24 46 F0 | 	shr	local04, #1
1bebc     12 17 82 F6 | 	negc	arg03, local04
1bec0     10 19 02 F6 | 	mov	arg04, local02
1bec4     18 12 62 FD | 	getqx	arg01
1bec8     09 15 02 F6 | 	mov	arg02, arg01
1becc     19 14 66 F0 | 	shl	arg02, #25
1bed0     07 12 46 F0 | 	shr	arg01, #7
1bed4     00 80 00 FF 
1bed8     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1bedc     01 16 06 31 |  if_ae	add	arg03, #1
1bee0     01 12 46 30 |  if_ae	shr	arg01, #1
1bee4     E8 32 B0 FD | 	call	#__system__pack_0491
1bee8     2C 00 90 FD | 	jmp	#LR__2554
1beec                 | LR__2551
1beec     00 22 0E F2 | 	cmp	local03, #0 wz
1bef0     0F FB 01 A6 |  if_e	mov	result1, local01
1bef4     20 00 90 AD |  if_e	jmp	#LR__2554
1bef8     01 22 66 F0 | 	shl	local03, #1
1befc     97 0A 48 FB | 	callpa	#(@LR__2553-@LR__2552)>>2,fcache_load_ptr_
1bf00                 | LR__2552
1bf00     00 40 00 FF 
1bf04     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1bf08     01 24 86 C1 |  if_b	sub	local04, #1
1bf0c     01 22 66 C0 |  if_b	shl	local03, #1
1bf10     EC FF 9F CD |  if_b	jmp	#LR__2552
1bf14                 | LR__2553
1bf14     68 FF 9F FD | 	jmp	#LR__2550
1bf18                 | LR__2554
1bf18     A7 F0 03 F6 | 	mov	ptra, fp
1bf1c     B2 00 A0 FD | 	call	#popregs_
1bf20                 | __system___float_sqrt_ret
1bf20     2D 00 64 FD | 	ret
1bf24                 | 
1bf24                 | __system___float_mul
1bf24     0B 4A 05 F6 | 	mov	COUNT_, #11
1bf28     A8 00 A0 FD | 	call	#pushregs_
1bf2c     09 1F 02 F6 | 	mov	local01, arg01
1bf30     0A 21 02 F6 | 	mov	local02, arg02
1bf34     0F 23 02 F6 | 	mov	local03, local01
1bf38     11 25 02 F6 | 	mov	local04, local03
1bf3c     16 24 46 F7 | 	zerox	local04, #22
1bf40     11 27 02 F6 | 	mov	local05, local03
1bf44     01 26 66 F0 | 	shl	local05, #1
1bf48     18 26 46 F0 | 	shr	local05, #24
1bf4c     1F 22 46 F0 | 	shr	local03, #31
1bf50     10 FB 01 F6 | 	mov	result1, local02
1bf54     FD 28 02 F6 | 	mov	local06, result1
1bf58     14 2B 02 F6 | 	mov	local07, local06
1bf5c     16 2A 46 F7 | 	zerox	local07, #22
1bf60     14 2D 02 F6 | 	mov	local08, local06
1bf64     01 2C 66 F0 | 	shl	local08, #1
1bf68     18 2C 46 F0 | 	shr	local08, #24
1bf6c     1F 28 46 F0 | 	shr	local06, #31
1bf70     14 23 62 F5 | 	xor	local03, local06
1bf74     FF 26 0E F2 | 	cmp	local05, #255 wz
1bf78     90 00 90 AD |  if_e	jmp	#LR__2563
1bf7c     FF 2C 0E F2 | 	cmp	local08, #255 wz
1bf80     D8 00 90 AD |  if_e	jmp	#LR__2565
1bf84     00 26 0E F2 | 	cmp	local05, #0 wz
1bf88     0C 01 90 AD |  if_e	jmp	#LR__2566
1bf8c     17 24 26 F4 | 	bith	local04, #23
1bf90                 | LR__2560
1bf90     00 2C 0E F2 | 	cmp	local08, #0 wz
1bf94     44 01 90 AD |  if_e	jmp	#LR__2570
1bf98     17 2A 26 F4 | 	bith	local07, #23
1bf9c                 | LR__2561
1bf9c     12 21 02 F6 | 	mov	local02, local04
1bfa0     04 20 66 F0 | 	shl	local02, #4
1bfa4     15 29 02 F6 | 	mov	local06, local07
1bfa8     05 28 66 F0 | 	shl	local06, #5
1bfac     14 21 02 FD | 	qmul	local02, local06
1bfb0     16 27 02 F1 | 	add	local05, local08
1bfb4     FE 26 86 F1 | 	sub	local05, #254
1bfb8     13 2F 02 F6 | 	mov	local09, local05
1bfbc     04 24 66 F0 | 	shl	local04, #4
1bfc0     05 2A 66 F0 | 	shl	local07, #5
1bfc4     18 30 62 FD | 	getqx	local10
1bfc8     15 25 02 FD | 	qmul	local04, local07
1bfcc     19 32 62 FD | 	getqy	local11
1bfd0     00 80 00 FF 
1bfd4     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1bfd8     18 00 90 CD |  if_b	jmp	#LR__2562
1bfdc     01 2E 06 F1 | 	add	local09, #1
1bfe0     01 30 46 F0 | 	shr	local10, #1
1bfe4     19 2D 02 F6 | 	mov	local08, local11
1bfe8     1F 2C 66 F0 | 	shl	local08, #31
1bfec     16 31 42 F5 | 	or	local10, local08
1bff0     01 32 46 F0 | 	shr	local11, #1
1bff4                 | LR__2562
1bff4     19 13 02 F6 | 	mov	arg01, local11
1bff8     18 15 02 F6 | 	mov	arg02, local10
1bffc     17 17 02 F6 | 	mov	arg03, local09
1c000     11 19 02 F6 | 	mov	arg04, local03
1c004     C8 31 B0 FD | 	call	#__system__pack_0491
1c008     10 01 90 FD | 	jmp	#LR__2574
1c00c                 | LR__2563
1c00c     00 24 0E F2 | 	cmp	local04, #0 wz
1c010     0F FB 01 56 |  if_ne	mov	result1, local01
1c014     04 01 90 5D |  if_ne	jmp	#LR__2574
1c018     FF 2C 56 F2 | 	cmps	local08, #255 wc
1c01c     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1c020     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1c024     18 00 90 4D |  if_c_and_nz	jmp	#LR__2564
1c028     00 F8 3F CF 
1c02c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1c030     E8 00 90 CD |  if_b	jmp	#LR__2574
1c034     00 2A 0E F2 | 	cmp	local07, #0 wz
1c038     10 FB 01 56 |  if_ne	mov	result1, local02
1c03c     DC 00 90 5D |  if_ne	jmp	#LR__2574
1c040                 | LR__2564
1c040     02 22 46 F5 | 	or	local03, #2
1c044     00 12 06 F6 | 	mov	arg01, #0
1c048     00 14 06 F6 | 	mov	arg02, #0
1c04c     13 17 02 F6 | 	mov	arg03, local05
1c050     11 19 02 F6 | 	mov	arg04, local03
1c054     78 31 B0 FD | 	call	#__system__pack_0491
1c058     C0 00 90 FD | 	jmp	#LR__2574
1c05c                 | LR__2565
1c05c     00 26 0E F2 | 	cmp	local05, #0 wz
1c060     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1c064     00 F8 3F AF 
1c068     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1c06c     AC 00 90 AD |  if_e	jmp	#LR__2574
1c070     00 2A 0E F2 | 	cmp	local07, #0 wz
1c074     10 FB 01 56 |  if_ne	mov	result1, local02
1c078     A0 00 90 5D |  if_ne	jmp	#LR__2574
1c07c     16 17 02 F6 | 	mov	arg03, local08
1c080     11 19 02 F6 | 	mov	arg04, local03
1c084     02 18 46 F5 | 	or	arg04, #2
1c088     00 12 06 F6 | 	mov	arg01, #0
1c08c     00 14 06 F6 | 	mov	arg02, #0
1c090     3C 31 B0 FD | 	call	#__system__pack_0491
1c094     84 00 90 FD | 	jmp	#LR__2574
1c098                 | LR__2566
1c098     00 24 0E F2 | 	cmp	local04, #0 wz
1c09c     20 00 90 AD |  if_e	jmp	#LR__2569
1c0a0     01 24 66 F0 | 	shl	local04, #1
1c0a4     97 0A 48 FB | 	callpa	#(@LR__2568-@LR__2567)>>2,fcache_load_ptr_
1c0a8                 | LR__2567
1c0a8     00 40 00 FF 
1c0ac     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1c0b0     01 26 86 C1 |  if_b	sub	local05, #1
1c0b4     01 24 66 C0 |  if_b	shl	local04, #1
1c0b8     EC FF 9F CD |  if_b	jmp	#LR__2567
1c0bc                 | LR__2568
1c0bc     D0 FE 9F FD | 	jmp	#LR__2560
1c0c0                 | LR__2569
1c0c0     08 22 46 F5 | 	or	local03, #8
1c0c4     00 12 06 F6 | 	mov	arg01, #0
1c0c8     00 14 06 F6 | 	mov	arg02, #0
1c0cc     00 16 06 F6 | 	mov	arg03, #0
1c0d0     11 19 02 F6 | 	mov	arg04, local03
1c0d4     F8 30 B0 FD | 	call	#__system__pack_0491
1c0d8     40 00 90 FD | 	jmp	#LR__2574
1c0dc                 | LR__2570
1c0dc     00 2A 0E F2 | 	cmp	local07, #0 wz
1c0e0     20 00 90 AD |  if_e	jmp	#LR__2573
1c0e4     01 2A 66 F0 | 	shl	local07, #1
1c0e8     97 0A 48 FB | 	callpa	#(@LR__2572-@LR__2571)>>2,fcache_load_ptr_
1c0ec                 | LR__2571
1c0ec     00 40 00 FF 
1c0f0     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1c0f4     01 2C 86 C1 |  if_b	sub	local08, #1
1c0f8     01 2A 66 C0 |  if_b	shl	local07, #1
1c0fc     EC FF 9F CD |  if_b	jmp	#LR__2571
1c100                 | LR__2572
1c100     98 FE 9F FD | 	jmp	#LR__2561
1c104                 | LR__2573
1c104     08 22 46 F5 | 	or	local03, #8
1c108     00 12 06 F6 | 	mov	arg01, #0
1c10c     00 14 06 F6 | 	mov	arg02, #0
1c110     00 16 06 F6 | 	mov	arg03, #0
1c114     11 19 02 F6 | 	mov	arg04, local03
1c118     B4 30 B0 FD | 	call	#__system__pack_0491
1c11c                 | LR__2574
1c11c     A7 F0 03 F6 | 	mov	ptra, fp
1c120     B2 00 A0 FD | 	call	#popregs_
1c124                 | __system___float_mul_ret
1c124     2D 00 64 FD | 	ret
1c128                 | 
1c128                 | __system___float_div
1c128     0E 4A 05 F6 | 	mov	COUNT_, #14
1c12c     A8 00 A0 FD | 	call	#pushregs_
1c130     09 23 02 F6 | 	mov	local03, arg01
1c134     0A 25 02 F6 | 	mov	local04, arg02
1c138     11 27 02 F6 | 	mov	local05, local03
1c13c     13 29 02 F6 | 	mov	local06, local05
1c140     16 28 46 F7 | 	zerox	local06, #22
1c144     13 2B 02 F6 | 	mov	local07, local05
1c148     01 2A 66 F0 | 	shl	local07, #1
1c14c     18 2A 46 F0 | 	shr	local07, #24
1c150     1F 26 46 F0 | 	shr	local05, #31
1c154     12 FB 01 F6 | 	mov	result1, local04
1c158     FD 2C 02 F6 | 	mov	local08, result1
1c15c     16 2F 02 F6 | 	mov	local09, local08
1c160     16 2E 46 F7 | 	zerox	local09, #22
1c164     16 31 02 F6 | 	mov	local10, local08
1c168     01 30 66 F0 | 	shl	local10, #1
1c16c     18 30 46 F0 | 	shr	local10, #24
1c170     1F 2C 46 F0 | 	shr	local08, #31
1c174     16 27 62 F5 | 	xor	local05, local08
1c178     FF 2A 0E F2 | 	cmp	local07, #255 wz
1c17c     D4 00 90 AD |  if_e	jmp	#LR__2585
1c180     FF 30 0E F2 | 	cmp	local10, #255 wz
1c184     04 01 90 AD |  if_e	jmp	#LR__2586
1c188     00 2A 0E F2 | 	cmp	local07, #0 wz
1c18c     24 01 90 AD |  if_e	jmp	#LR__2587
1c190     17 28 26 F4 | 	bith	local06, #23
1c194                 | LR__2580
1c194     00 30 0E F2 | 	cmp	local10, #0 wz
1c198     70 01 90 AD |  if_e	jmp	#LR__2591
1c19c     17 2E 26 F4 | 	bith	local09, #23
1c1a0                 | LR__2581
1c1a0     18 2B 82 F1 | 	sub	local07, local10
1c1a4     15 33 02 F6 | 	mov	local11, local07
1c1a8     14 13 02 F6 | 	mov	arg01, local06
1c1ac     02 12 46 F0 | 	shr	arg01, #2
1c1b0     1E 28 66 F0 | 	shl	local06, #30
1c1b4     14 15 02 F6 | 	mov	arg02, local06
1c1b8     17 17 02 F6 | 	mov	arg03, local09
1c1bc     28 12 62 FD | 	setq	arg01
1c1c0     0B 15 12 FD | 	qdiv	arg02, arg03
1c1c4     00 34 06 F6 | 	mov	local12, #0
1c1c8     18 1E 62 FD | 	getqx	local01
1c1cc     19 FC 61 FD | 	getqy	result2
1c1d0     FE 20 02 F6 | 	mov	local02, result2
1c1d4     0F 37 02 F6 | 	mov	local13, local01
1c1d8     00 20 4E F2 | 	cmps	local02, #0 wz
1c1dc     1B 39 02 F6 | 	mov	local14, local13
1c1e0     19 38 66 F0 | 	shl	local14, #25
1c1e4     01 34 06 56 |  if_ne	mov	local12, #1
1c1e8     1A 39 42 F5 | 	or	local14, local12
1c1ec     07 36 46 F0 | 	shr	local13, #7
1c1f0     00 80 00 FF 
1c1f4     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1c1f8     1C 00 90 CD |  if_b	jmp	#LR__2582
1c1fc     01 32 06 F1 | 	add	local11, #1
1c200     01 38 46 F0 | 	shr	local14, #1
1c204     1B 35 02 F6 | 	mov	local12, local13
1c208     1F 34 66 F0 | 	shl	local12, #31
1c20c     1A 39 42 F5 | 	or	local14, local12
1c210     01 36 46 F0 | 	shr	local13, #1
1c214     24 00 90 FD | 	jmp	#LR__2584
1c218                 | LR__2582
1c218     00 40 00 FF 
1c21c     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1c220     18 00 90 3D |  if_ae	jmp	#LR__2583
1c224     01 32 86 F1 | 	sub	local11, #1
1c228     01 36 66 F0 | 	shl	local13, #1
1c22c     1C 35 02 F6 | 	mov	local12, local14
1c230     1F 34 46 F0 | 	shr	local12, #31
1c234     1A 37 42 F5 | 	or	local13, local12
1c238     01 38 66 F0 | 	shl	local14, #1
1c23c                 | LR__2583
1c23c                 | LR__2584
1c23c     1B 13 02 F6 | 	mov	arg01, local13
1c240     1C 15 02 F6 | 	mov	arg02, local14
1c244     19 17 02 F6 | 	mov	arg03, local11
1c248     13 19 02 F6 | 	mov	arg04, local05
1c24c     80 2F B0 FD | 	call	#__system__pack_0491
1c250     F8 00 90 FD | 	jmp	#LR__2595
1c254                 | LR__2585
1c254     00 28 0E F2 | 	cmp	local06, #0 wz
1c258     11 FB 01 56 |  if_ne	mov	result1, local03
1c25c     EC 00 90 5D |  if_ne	jmp	#LR__2595
1c260     FF 30 0E F2 | 	cmp	local10, #255 wz
1c264     00 F8 3F AF 
1c268     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1c26c     DC 00 90 AD |  if_e	jmp	#LR__2595
1c270     02 26 46 F5 | 	or	local05, #2
1c274     00 12 06 F6 | 	mov	arg01, #0
1c278     00 14 06 F6 | 	mov	arg02, #0
1c27c     15 17 02 F6 | 	mov	arg03, local07
1c280     13 19 02 F6 | 	mov	arg04, local05
1c284     48 2F B0 FD | 	call	#__system__pack_0491
1c288     C0 00 90 FD | 	jmp	#LR__2595
1c28c                 | LR__2586
1c28c     00 2E 0E F2 | 	cmp	local09, #0 wz
1c290     12 FB 01 56 |  if_ne	mov	result1, local04
1c294     B4 00 90 5D |  if_ne	jmp	#LR__2595
1c298     13 19 02 F6 | 	mov	arg04, local05
1c29c     08 18 46 F5 | 	or	arg04, #8
1c2a0     00 12 06 F6 | 	mov	arg01, #0
1c2a4     00 14 06 F6 | 	mov	arg02, #0
1c2a8     00 16 06 F6 | 	mov	arg03, #0
1c2ac     20 2F B0 FD | 	call	#__system__pack_0491
1c2b0     98 00 90 FD | 	jmp	#LR__2595
1c2b4                 | LR__2587
1c2b4     00 28 0E F2 | 	cmp	local06, #0 wz
1c2b8     20 00 90 AD |  if_e	jmp	#LR__2590
1c2bc     01 28 66 F0 | 	shl	local06, #1
1c2c0     97 0A 48 FB | 	callpa	#(@LR__2589-@LR__2588)>>2,fcache_load_ptr_
1c2c4                 | LR__2588
1c2c4     00 40 00 FF 
1c2c8     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1c2cc     01 2A 86 C1 |  if_b	sub	local07, #1
1c2d0     01 28 66 C0 |  if_b	shl	local06, #1
1c2d4     EC FF 9F CD |  if_b	jmp	#LR__2588
1c2d8                 | LR__2589
1c2d8     B8 FE 9F FD | 	jmp	#LR__2580
1c2dc                 | LR__2590
1c2dc     00 30 0E F2 | 	cmp	local10, #0 wz
1c2e0     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1c2e4     00 F8 3F AF 
1c2e8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1c2ec     5C 00 90 AD |  if_e	jmp	#LR__2595
1c2f0     13 19 02 F6 | 	mov	arg04, local05
1c2f4     08 18 46 F5 | 	or	arg04, #8
1c2f8     00 12 06 F6 | 	mov	arg01, #0
1c2fc     00 14 06 F6 | 	mov	arg02, #0
1c300     00 16 06 F6 | 	mov	arg03, #0
1c304     C8 2E B0 FD | 	call	#__system__pack_0491
1c308     40 00 90 FD | 	jmp	#LR__2595
1c30c                 | LR__2591
1c30c     00 2E 0E F2 | 	cmp	local09, #0 wz
1c310     20 00 90 AD |  if_e	jmp	#LR__2594
1c314     01 2E 66 F0 | 	shl	local09, #1
1c318     97 0A 48 FB | 	callpa	#(@LR__2593-@LR__2592)>>2,fcache_load_ptr_
1c31c                 | LR__2592
1c31c     00 40 00 FF 
1c320     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1c324     01 30 86 C1 |  if_b	sub	local10, #1
1c328     01 2E 66 C0 |  if_b	shl	local09, #1
1c32c     EC FF 9F CD |  if_b	jmp	#LR__2592
1c330                 | LR__2593
1c330     6C FE 9F FD | 	jmp	#LR__2581
1c334                 | LR__2594
1c334     02 26 46 F5 | 	or	local05, #2
1c338     00 12 06 F6 | 	mov	arg01, #0
1c33c     00 14 06 F6 | 	mov	arg02, #0
1c340     00 16 06 F6 | 	mov	arg03, #0
1c344     13 19 02 F6 | 	mov	arg04, local05
1c348     84 2E B0 FD | 	call	#__system__pack_0491
1c34c                 | LR__2595
1c34c     A7 F0 03 F6 | 	mov	ptra, fp
1c350     B2 00 A0 FD | 	call	#popregs_
1c354                 | __system___float_div_ret
1c354     2D 00 64 FD | 	ret
1c358                 | 
1c358                 | __system___float_cmp
1c358     00 C0 3F FF 
1c35c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1c360     00 C0 3F CF 
1c364     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1c368     0B FB 01 36 |  if_ae	mov	result1, arg03
1c36c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1c370     00 C0 7F FF 
1c374     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1c378     00 C0 7F CF 
1c37c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1c380     0B FB 01 36 |  if_ae	mov	result1, arg03
1c384     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1c388     00 12 56 F2 | 	cmps	arg01, #0 wc
1c38c     2C 00 90 3D |  if_ae	jmp	#LR__2600
1c390     00 14 56 F2 | 	cmps	arg02, #0 wc
1c394     0A FB 01 C6 |  if_b	mov	result1, arg02
1c398     09 FB 81 C1 |  if_b	sub	result1, arg01
1c39c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1c3a0     00 14 0E F2 | 	cmp	arg02, #0 wz
1c3a4     00 00 40 AF 
1c3a8     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1c3ac     00 FA 05 A6 |  if_e	mov	result1, #0
1c3b0     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1c3b4     01 FA 65 F6 | 	neg	result1, #1
1c3b8     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1c3bc                 | LR__2600
1c3bc     00 14 56 F2 | 	cmps	arg02, #0 wc
1c3c0     1C 00 90 3D |  if_ae	jmp	#LR__2601
1c3c4     00 12 0E F2 | 	cmp	arg01, #0 wz
1c3c8     00 00 40 AF 
1c3cc     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1c3d0     00 FA 05 A6 |  if_e	mov	result1, #0
1c3d4     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1c3d8     01 FA 05 F6 | 	mov	result1, #1
1c3dc     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1c3e0                 | LR__2601
1c3e0     0A 13 82 F1 | 	sub	arg01, arg02
1c3e4     09 FB 01 F6 | 	mov	result1, arg01
1c3e8                 | __system___float_cmp_ret
1c3e8     2D 00 64 FD | 	ret
1c3ec                 | 
1c3ec                 | __system___float_tointeger
1c3ec     02 4A 05 F6 | 	mov	COUNT_, #2
1c3f0     A8 00 A0 FD | 	call	#pushregs_
1c3f4     50 00 B0 FD | 	call	#__system___float_Unpack
1c3f8     FF FF 7F FF 
1c3fc     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1c400     34 00 90 CD |  if_b	jmp	#LR__2610
1c404     1F FC 55 F2 | 	cmps	result2, #31 wc
1c408     2C 00 90 3D |  if_ae	jmp	#LR__2610
1c40c     02 FE 65 F0 | 	shl	result3, #2
1c410     1E 1E 06 F6 | 	mov	local01, #30
1c414     FE 1E 82 F1 | 	sub	local01, result2
1c418     0F FF 41 F0 | 	shr	result3, local01
1c41c     FF 20 02 F6 | 	mov	local02, result3
1c420     0A 21 02 F1 | 	add	local02, arg02
1c424     01 20 46 F0 | 	shr	local02, #1
1c428     00 FA 0D F2 | 	cmp	result1, #0 wz
1c42c     10 21 62 56 |  if_ne	neg	local02, local02
1c430     10 FB 01 F6 | 	mov	result1, local02
1c434     04 00 90 FD | 	jmp	#LR__2611
1c438                 | LR__2610
1c438     00 FA 05 F6 | 	mov	result1, #0
1c43c                 | LR__2611
1c43c     A7 F0 03 F6 | 	mov	ptra, fp
1c440     B2 00 A0 FD | 	call	#popregs_
1c444                 | __system___float_tointeger_ret
1c444     2D 00 64 FD | 	ret
1c448                 | 
1c448                 | __system___float_Unpack
1c448     09 01 02 F6 | 	mov	_var01, arg01
1c44c     1F 00 46 F0 | 	shr	_var01, #31
1c450     09 03 02 F6 | 	mov	_var02, arg01
1c454     01 02 66 F0 | 	shl	_var02, #1
1c458     18 02 4E F0 | 	shr	_var02, #24 wz
1c45c     17 13 06 F4 | 	bitl	arg01, #279
1c460     06 12 66 50 |  if_ne	shl	arg01, #6
1c464     1D 12 26 54 |  if_ne	bith	arg01, #29
1c468     1C 00 90 5D |  if_ne	jmp	#LR__2620
1c46c     09 05 92 F7 | 	encod	_var03, arg01 wc
1c470     01 04 06 C1 |  if_b	add	_var03, #1
1c474     17 04 86 F1 | 	sub	_var03, #23
1c478     02 03 02 F6 | 	mov	_var02, _var03
1c47c     07 FC 05 F6 | 	mov	result2, #7
1c480     02 FD 81 F1 | 	sub	result2, _var03
1c484     FE 12 62 F0 | 	shl	arg01, result2
1c488                 | LR__2620
1c488     7F 02 86 F1 | 	sub	_var02, #127
1c48c     09 FF 01 F6 | 	mov	result3, arg01
1c490     00 FB 01 F6 | 	mov	result1, _var01
1c494     01 FD 01 F6 | 	mov	result2, _var02
1c498                 | __system___float_Unpack_ret
1c498     2D 00 64 FD | 	ret
1c49c                 | 
1c49c                 | __system___float_Pack
1c49c     00 00 06 F6 | 	mov	_var01, #0
1c4a0     00 16 0E F2 | 	cmp	arg03, #0 wz
1c4a4     8C 00 90 AD |  if_e	jmp	#LR__2631
1c4a8     0B 03 92 F7 | 	encod	_var02, arg03 wc
1c4ac     01 02 06 C1 |  if_b	add	_var02, #1
1c4b0     21 00 06 F6 | 	mov	_var01, #33
1c4b4     01 01 82 F1 | 	sub	_var01, _var02
1c4b8     00 17 62 F0 | 	shl	arg03, _var01
1c4bc     03 02 06 F6 | 	mov	_var02, #3
1c4c0     00 03 82 F1 | 	sub	_var02, _var01
1c4c4     01 15 02 F1 | 	add	arg02, _var02
1c4c8     0A 05 02 F6 | 	mov	_var03, arg02
1c4cc     00 17 06 F1 | 	add	arg03, #256
1c4d0     0B 03 02 F6 | 	mov	_var02, arg03
1c4d4     FF 02 2E F5 | 	andn	_var02, #255 wz
1c4d8     01 04 06 A1 |  if_e	add	_var03, #1
1c4dc     7F 04 06 F1 | 	add	_var03, #127
1c4e0     FF FF 7F FF 
1c4e4     E9 05 46 F3 | 	fges	_var03, ##-23
1c4e8     FF 04 66 F3 | 	fles	_var03, #255
1c4ec     01 04 56 F2 | 	cmps	_var03, #1 wc
1c4f0     1C 00 90 3D |  if_ae	jmp	#LR__2630
1c4f4     01 16 46 F0 | 	shr	arg03, #1
1c4f8     1F 02 C6 F9 | 	decod	_var02, #31
1c4fc     0B 03 02 F1 | 	add	_var02, arg03
1c500     02 05 62 F6 | 	neg	_var03, _var03
1c504     02 03 42 F0 | 	shr	_var02, _var03
1c508     01 17 02 F6 | 	mov	arg03, _var02
1c50c     00 04 06 F6 | 	mov	_var03, #0
1c510                 | LR__2630
1c510     09 FB 01 F6 | 	mov	result1, arg01
1c514     1F FA 65 F0 | 	shl	result1, #31
1c518     02 03 02 F6 | 	mov	_var02, _var03
1c51c     17 02 66 F0 | 	shl	_var02, #23
1c520     01 FB 41 F5 | 	or	result1, _var02
1c524     0B 07 02 F6 | 	mov	_var04, arg03
1c528     09 06 46 F0 | 	shr	_var04, #9
1c52c     03 FB 41 F5 | 	or	result1, _var04
1c530     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1c534                 | LR__2631
1c534     00 FB 01 F6 | 	mov	result1, _var01
1c538                 | __system___float_Pack_ret
1c538     2D 00 64 FD | 	ret
1c53c                 | 
1c53c                 | __system___basic_print_float
1c53c     05 4A 05 F6 | 	mov	COUNT_, #5
1c540     A8 00 A0 FD | 	call	#pushregs_
1c544     09 1F 02 F6 | 	mov	local01, arg01
1c548     0A 21 02 F6 | 	mov	local02, arg02
1c54c     0B 23 0A F6 | 	mov	local03, arg03 wz
1c550     0C 25 02 F6 | 	mov	local04, arg04
1c554     14 00 90 5D |  if_ne	jmp	#LR__2640
1c558     23 24 0E F2 | 	cmp	local04, #35 wz
1c55c     80 02 10 AF 
1c560     00 26 06 A6 |  if_e	mov	local05, ##537198592
1c564     1D 26 C6 59 |  if_ne	decod	local05, #29
1c568     13 23 02 F6 | 	mov	local03, local05
1c56c                 | LR__2640
1c56c     0F 13 02 F6 | 	mov	arg01, local01
1c570     40 27 B0 FD | 	call	#__system___gettxfunc
1c574     FD 26 0A F6 | 	mov	local05, result1 wz
1c578     00 FA 05 A6 |  if_e	mov	result1, #0
1c57c     13 13 02 56 |  if_ne	mov	arg01, local05
1c580     11 15 02 56 |  if_ne	mov	arg02, local03
1c584     10 17 02 56 |  if_ne	mov	arg03, local02
1c588     12 19 02 56 |  if_ne	mov	arg04, local04
1c58c     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1c590     A7 F0 03 F6 | 	mov	ptra, fp
1c594     B2 00 A0 FD | 	call	#popregs_
1c598                 | __system___basic_print_float_ret
1c598     2D 00 64 FD | 	ret
1c59c                 | 
1c59c                 | __system____builtin_atoi
1c59c     07 4A 05 F6 | 	mov	COUNT_, #7
1c5a0     A8 00 A0 FD | 	call	#pushregs_
1c5a4                 | __system____builtin_atoi_enter
1c5a4     09 1F 02 F6 | 	mov	local01, arg01
1c5a8     0A 21 02 F6 | 	mov	local02, arg02
1c5ac     00 22 06 F6 | 	mov	local03, #0
1c5b0     00 24 06 F6 | 	mov	local04, #0
1c5b4     00 26 06 F6 | 	mov	local05, #0
1c5b8     97 08 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1c5bc                 | LR__2650
1c5bc     0F 29 C2 FA | 	rdbyte	local06, local01
1c5c0     20 28 0E F2 | 	cmp	local06, #32 wz
1c5c4     01 1E 06 A1 |  if_e	add	local01, #1
1c5c8     F0 FF 9F AD |  if_e	jmp	#LR__2650
1c5cc                 | LR__2651
1c5cc     0F 2B C2 FA | 	rdbyte	local07, local01
1c5d0                 | LR__2652
1c5d0     2D 2A 0E F2 | 	cmp	local07, #45 wz
1c5d4     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1c5d8     18 00 90 5D |  if_ne	jmp	#LR__2653
1c5dc     01 1E 06 F1 | 	add	local01, #1
1c5e0     2D 2A 0E F2 | 	cmp	local07, #45 wz
1c5e4     01 28 06 A6 |  if_e	mov	local06, #1
1c5e8     14 27 C2 A2 |  if_e	subr	local05, local06
1c5ec     0F 2B C2 FA | 	rdbyte	local07, local01
1c5f0     DC FF 9F FD | 	jmp	#LR__2652
1c5f4                 | LR__2653
1c5f4     97 48 48 FB | 	callpa	#(@LR__2661-@LR__2654)>>2,fcache_load_ptr_
1c5f8                 | LR__2654
1c5f8                 | LR__2655
1c5f8     0F 2B C2 FA | 	rdbyte	local07, local01
1c5fc     5F 2A 0E F2 | 	cmp	local07, #95 wz
1c600     01 1E 06 F1 | 	add	local01, #1
1c604     F0 FF 9F AD |  if_e	jmp	#LR__2655
1c608     30 2A 0E F2 | 	cmp	local07, #48 wz
1c60c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1c610     00 24 06 A6 |  if_e	mov	local04, #0
1c614     60 00 90 AD |  if_e	jmp	#LR__2660
1c618     31 2A 56 F2 | 	cmps	local07, #49 wc
1c61c     18 00 90 CD |  if_b	jmp	#LR__2656
1c620     3A 2A 56 F2 | 	cmps	local07, #58 wc
1c624     15 25 02 C6 |  if_b	mov	local04, local07
1c628     30 24 86 C1 |  if_b	sub	local04, #48
1c62c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1c630     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1c634     40 00 90 CD |  if_b	jmp	#LR__2659
1c638                 | LR__2656
1c638     0B 20 56 F2 | 	cmps	local02, #11 wc
1c63c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1c640     14 00 90 CD |  if_b	jmp	#LR__2657
1c644     67 2A 56 F2 | 	cmps	local07, #103 wc
1c648     61 2A 86 C1 |  if_b	sub	local07, #97
1c64c     0A 24 06 C6 |  if_b	mov	local04, #10
1c650     15 25 02 C1 |  if_b	add	local04, local07
1c654     20 00 90 CD |  if_b	jmp	#LR__2658
1c658                 | LR__2657
1c658     0B 20 56 F2 | 	cmps	local02, #11 wc
1c65c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1c660     24 00 90 CD |  if_b	jmp	#LR__2662
1c664     47 2A 56 F2 | 	cmps	local07, #71 wc
1c668     41 2A 86 C1 |  if_b	sub	local07, #65
1c66c     0A 24 06 C6 |  if_b	mov	local04, #10
1c670     15 25 02 C1 |  if_b	add	local04, local07
1c674     10 00 90 3D |  if_ae	jmp	#LR__2662
1c678                 | LR__2658
1c678                 | LR__2659
1c678                 | LR__2660
1c678     11 21 02 FD | 	qmul	local02, local03
1c67c     18 22 62 FD | 	getqx	local03
1c680     12 23 02 F1 | 	add	local03, local04
1c684     70 FF 9F FD | 	jmp	#LR__2654
1c688                 | LR__2661
1c688                 | LR__2662
1c688     00 20 0E F2 | 	cmp	local02, #0 wz
1c68c     64 00 90 5D |  if_ne	jmp	#LR__2668
1c690     78 2A 0E F2 | 	cmp	local07, #120 wz
1c694     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1c698     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1c69c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1c6a0     14 00 90 5D |  if_ne	jmp	#LR__2663
1c6a4     0F 13 02 F6 | 	mov	arg01, local01
1c6a8     10 14 06 F6 | 	mov	arg02, #16
1c6ac     EC FE BF FD | 	call	#__system____builtin_atoi
1c6b0     FD 22 02 F6 | 	mov	local03, result1
1c6b4     3C 00 90 FD | 	jmp	#LR__2667
1c6b8                 | LR__2663
1c6b8     62 2A 0E F2 | 	cmp	local07, #98 wz
1c6bc     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1c6c0     14 00 90 5D |  if_ne	jmp	#LR__2664
1c6c4     0F 13 02 F6 | 	mov	arg01, local01
1c6c8     02 14 06 F6 | 	mov	arg02, #2
1c6cc     CC FE BF FD | 	call	#__system____builtin_atoi
1c6d0     FD 22 02 F6 | 	mov	local03, result1
1c6d4     1C 00 90 FD | 	jmp	#LR__2666
1c6d8                 | LR__2664
1c6d8     6F 2A 0E F2 | 	cmp	local07, #111 wz
1c6dc     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1c6e0     10 00 90 5D |  if_ne	jmp	#LR__2665
1c6e4     0F 13 02 F6 | 	mov	arg01, local01
1c6e8     08 14 06 F6 | 	mov	arg02, #8
1c6ec     AC FE BF FD | 	call	#__system____builtin_atoi
1c6f0     FD 22 02 F6 | 	mov	local03, result1
1c6f4                 | LR__2665
1c6f4                 | LR__2666
1c6f4                 | LR__2667
1c6f4                 | LR__2668
1c6f4     00 26 0E F2 | 	cmp	local05, #0 wz
1c6f8     11 23 62 56 |  if_ne	neg	local03, local03
1c6fc     11 FB 01 F6 | 	mov	result1, local03
1c700     A7 F0 03 F6 | 	mov	ptra, fp
1c704     B2 00 A0 FD | 	call	#popregs_
1c708                 | __system____builtin_atoi_ret
1c708     2D 00 64 FD | 	ret
1c70c                 | 
1c70c                 | __system____builtin_atof
1c70c     07 4A 05 F6 | 	mov	COUNT_, #7
1c710     A8 00 A0 FD | 	call	#pushregs_
1c714     09 1F 02 F6 | 	mov	local01, arg01
1c718     00 20 06 F6 | 	mov	local02, #0
1c71c     00 22 06 F6 | 	mov	local03, #0
1c720     00 24 06 F6 | 	mov	local04, #0
1c724     00 26 06 F6 | 	mov	local05, #0
1c728     97 08 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
1c72c                 | LR__2670
1c72c     0F 17 C2 FA | 	rdbyte	arg03, local01
1c730     20 16 0E F2 | 	cmp	arg03, #32 wz
1c734     01 1E 06 A1 |  if_e	add	local01, #1
1c738     F0 FF 9F AD |  if_e	jmp	#LR__2670
1c73c                 | LR__2671
1c73c     0F 29 C2 FA | 	rdbyte	local06, local01
1c740                 | LR__2672
1c740     2B 28 0E F2 | 	cmp	local06, #43 wz
1c744     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1c748     14 00 90 5D |  if_ne	jmp	#LR__2673
1c74c     2D 28 0E F2 | 	cmp	local06, #45 wz
1c750     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1c754     01 1E 06 F1 | 	add	local01, #1
1c758     0F 29 C2 FA | 	rdbyte	local06, local01
1c75c     E0 FF 9F FD | 	jmp	#LR__2672
1c760                 | LR__2673
1c760                 | LR__2674
1c760     97 08 48 FB | 	callpa	#(@LR__2676-@LR__2675)>>2,fcache_load_ptr_
1c764                 | LR__2675
1c764     0F 29 C2 FA | 	rdbyte	local06, local01
1c768     5F 28 0E F2 | 	cmp	local06, #95 wz
1c76c     01 1E 06 F1 | 	add	local01, #1
1c770     F0 FF 9F AD |  if_e	jmp	#LR__2675
1c774                 | LR__2676
1c774     00 28 0E F2 | 	cmp	local06, #0 wz
1c778     5C 00 90 AD |  if_e	jmp	#LR__2678
1c77c     30 28 56 F2 | 	cmps	local06, #48 wc
1c780     44 00 90 CD |  if_b	jmp	#LR__2677
1c784     3A 28 56 F2 | 	cmps	local06, #58 wc
1c788     3C 00 90 3D |  if_ae	jmp	#LR__2677
1c78c     10 13 02 F6 | 	mov	arg01, local02
1c790     00 90 20 FF 
1c794     00 14 06 F6 | 	mov	arg02, ##1092616192
1c798     88 F7 BF FD | 	call	#__system___float_mul
1c79c     FD 20 02 F6 | 	mov	local02, result1
1c7a0     30 28 86 F1 | 	sub	local06, #48
1c7a4     14 13 02 F6 | 	mov	arg01, local06
1c7a8     74 F3 BF FD | 	call	#__system___float_fromuns
1c7ac     FD 14 02 F6 | 	mov	arg02, result1
1c7b0     10 13 02 F6 | 	mov	arg01, local02
1c7b4     9C F3 BF FD | 	call	#__system___float_add
1c7b8     FD 20 02 F6 | 	mov	local02, result1
1c7bc     00 26 0E F2 | 	cmp	local05, #0 wz
1c7c0     01 22 86 51 |  if_ne	sub	local03, #1
1c7c4     98 FF 9F FD | 	jmp	#LR__2674
1c7c8                 | LR__2677
1c7c8     2E 28 0E F2 | 	cmp	local06, #46 wz
1c7cc     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1c7d0     01 26 06 A6 |  if_e	mov	local05, #1
1c7d4     88 FF 9F AD |  if_e	jmp	#LR__2674
1c7d8                 | LR__2678
1c7d8     45 28 0E F2 | 	cmp	local06, #69 wz
1c7dc     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1c7e0     18 00 90 5D |  if_ne	jmp	#LR__2679
1c7e4     0F 13 02 F6 | 	mov	arg01, local01
1c7e8     00 14 06 F6 | 	mov	arg02, #0
1c7ec     AC FD BF FD | 	call	#__system____builtin_atoi
1c7f0     11 FB 01 F1 | 	add	result1, local03
1c7f4     FD 2A 02 F6 | 	mov	local07, result1
1c7f8     04 00 90 FD | 	jmp	#LR__2680
1c7fc                 | LR__2679
1c7fc     11 2B 02 F6 | 	mov	local07, local03
1c800                 | LR__2680
1c800     15 17 02 F6 | 	mov	arg03, local07
1c804     10 13 02 F6 | 	mov	arg01, local02
1c808     00 90 20 FF 
1c80c     00 14 06 F6 | 	mov	arg02, ##1092616192
1c810     BC 06 B0 FD | 	call	#__system___float_pow_n
1c814     12 FB 61 F5 | 	xor	result1, local04
1c818     A7 F0 03 F6 | 	mov	ptra, fp
1c81c     B2 00 A0 FD | 	call	#popregs_
1c820                 | __system____builtin_atof_ret
1c820     2D 00 64 FD | 	ret
1c824                 | 
1c824                 | __system____builtin_ilogb
1c824     20 FC BF FD | 	call	#__system___float_Unpack
1c828     00 FE 0D F2 | 	cmp	result3, #0 wz
1c82c     00 00 40 AF 
1c830     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1c834     24 00 90 AD |  if_e	jmp	#LR__2691
1c838     80 FC 0D F2 | 	cmp	result2, #128 wz
1c83c     18 00 90 5D |  if_ne	jmp	#LR__2690
1c840     00 00 10 FF 
1c844     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1c848     1E FA CD A9 |  if_e	bmask	result1, #30
1c84c     0C 00 90 AD |  if_e	jmp	#LR__2691
1c850     1F FA C5 F9 | 	decod	result1, #31
1c854     04 00 90 FD | 	jmp	#LR__2691
1c858                 | LR__2690
1c858     FE FA 01 F6 | 	mov	result1, result2
1c85c                 | LR__2691
1c85c                 | __system____builtin_ilogb_ret
1c85c     2D 00 64 FD | 	ret
1c860                 | 
1c860                 | __system____builtin_sinf
1c860     03 4A 05 F6 | 	mov	COUNT_, #3
1c864     A8 00 A0 FD | 	call	#pushregs_
1c868     09 1F 02 F6 | 	mov	local01, arg01
1c86c     87 64 20 FF 
1c870     DB 15 06 F6 | 	mov	arg02, ##1086918619
1c874     B0 F8 BF FD | 	call	#__system___float_div
1c878     FD 12 02 F6 | 	mov	arg01, result1
1c87c     00 14 06 F6 | 	mov	arg02, #0
1c880     68 FB BF FD | 	call	#__system___float_tointeger
1c884     FD 16 0A F6 | 	mov	arg03, result1 wz
1c888     44 00 90 AD |  if_e	jmp	#LR__2700
1c88c     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c890     1F 20 C6 C9 |  if_b	decod	local02, #31
1c894     00 20 06 36 |  if_ae	mov	local02, #0
1c898     84 F2 BF FD | 	call	#__system___float_fromuns
1c89c     10 FB 61 F5 | 	xor	result1, local02
1c8a0     FD 12 02 F6 | 	mov	arg01, result1
1c8a4     1E 14 C6 F9 | 	decod	arg02, #30
1c8a8     78 F6 BF FD | 	call	#__system___float_mul
1c8ac     FD 12 02 F6 | 	mov	arg01, result1
1c8b0     87 24 20 FF 
1c8b4     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c8b8     68 F6 BF FD | 	call	#__system___float_mul
1c8bc     FD 14 02 F6 | 	mov	arg02, result1
1c8c0     0F 13 02 F6 | 	mov	arg01, local01
1c8c4     1F 14 E6 F4 | 	bitnot	arg02, #31
1c8c8     88 F2 BF FD | 	call	#__system___float_add
1c8cc     FD 1E 02 F6 | 	mov	local01, result1
1c8d0                 | LR__2700
1c8d0     0F 13 02 F6 | 	mov	arg01, local01
1c8d4     66 E6 1E FF 
1c8d8     CD 14 06 F6 | 	mov	arg02, ##1036831949
1c8dc     01 16 06 F6 | 	mov	arg03, #1
1c8e0     74 FA BF FD | 	call	#__system___float_cmp
1c8e4     00 FA 55 F2 | 	cmps	result1, #0 wc
1c8e8     5C 00 90 3D |  if_ae	jmp	#LR__2701
1c8ec     0F 13 02 F6 | 	mov	arg01, local01
1c8f0     66 E6 5E FF 
1c8f4     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1c8f8     01 16 66 F6 | 	neg	arg03, #1
1c8fc     58 FA BF FD | 	call	#__system___float_cmp
1c900     01 FA 55 F2 | 	cmps	result1, #1 wc
1c904     40 00 90 CD |  if_b	jmp	#LR__2701
1c908     0F 13 02 F6 | 	mov	arg01, local01
1c90c     0F 15 02 F6 | 	mov	arg02, local01
1c910     10 F6 BF FD | 	call	#__system___float_mul
1c914     FD 12 02 F6 | 	mov	arg01, result1
1c918     0F 15 02 F6 | 	mov	arg02, local01
1c91c     04 F6 BF FD | 	call	#__system___float_mul
1c920     FD 12 02 F6 | 	mov	arg01, result1
1c924     00 60 20 FF 
1c928     00 14 06 F6 | 	mov	arg02, ##1086324736
1c92c     F8 F7 BF FD | 	call	#__system___float_div
1c930     FD 14 02 F6 | 	mov	arg02, result1
1c934     0F 13 02 F6 | 	mov	arg01, local01
1c938     1F 14 E6 F4 | 	bitnot	arg02, #31
1c93c     14 F2 BF FD | 	call	#__system___float_add
1c940     FD 22 02 F6 | 	mov	local03, result1
1c944     54 00 90 FD | 	jmp	#LR__2702
1c948                 | LR__2701
1c948     0F 13 02 F6 | 	mov	arg01, local01
1c94c     7C 91 26 FF 
1c950     83 15 06 F6 | 	mov	arg02, ##1294137731
1c954     CC F5 BF FD | 	call	#__system___float_mul
1c958     FD 12 02 F6 | 	mov	arg01, result1
1c95c     00 14 06 F6 | 	mov	arg02, #0
1c960     88 FA BF FD | 	call	#__system___float_tointeger
1c964     02 FA 65 F0 | 	shl	result1, #2
1c968     00 00 A0 FF 
1c96c     FD 00 48 FD | 	qrotate	##1073741824, result1
1c970     19 12 62 FD | 	getqy	arg01
1c974     09 13 52 F6 | 	abs	arg01, arg01 wc
1c978     1F 20 C6 C9 |  if_b	decod	local02, #31
1c97c     00 20 06 36 |  if_ae	mov	local02, #0
1c980     9C F1 BF FD | 	call	#__system___float_fromuns
1c984     10 FB 61 F5 | 	xor	result1, local02
1c988     FD 12 02 F6 | 	mov	arg01, result1
1c98c     00 40 27 FF 
1c990     00 14 06 F6 | 	mov	arg02, ##1317011456
1c994     90 F7 BF FD | 	call	#__system___float_div
1c998     FD 22 02 F6 | 	mov	local03, result1
1c99c                 | LR__2702
1c99c     11 FB 01 F6 | 	mov	result1, local03
1c9a0     A7 F0 03 F6 | 	mov	ptra, fp
1c9a4     B2 00 A0 FD | 	call	#popregs_
1c9a8                 | __system____builtin_sinf_ret
1c9a8     2D 00 64 FD | 	ret
1c9ac                 | 
1c9ac                 | __system____builtin_tanf
1c9ac     02 4A 05 F6 | 	mov	COUNT_, #2
1c9b0     A8 00 A0 FD | 	call	#pushregs_
1c9b4     09 1F 02 F6 | 	mov	local01, arg01
1c9b8     A4 FE BF FD | 	call	#__system____builtin_sinf
1c9bc     FD 20 02 F6 | 	mov	local02, result1
1c9c0     0F 15 02 F6 | 	mov	arg02, local01
1c9c4     87 E4 1F FF 
1c9c8     DB 13 06 F6 | 	mov	arg01, ##1070141403
1c9cc     1F 14 E6 F4 | 	bitnot	arg02, #31
1c9d0     80 F1 BF FD | 	call	#__system___float_add
1c9d4     FD 12 02 F6 | 	mov	arg01, result1
1c9d8     84 FE BF FD | 	call	#__system____builtin_sinf
1c9dc     FD 14 02 F6 | 	mov	arg02, result1
1c9e0     10 13 02 F6 | 	mov	arg01, local02
1c9e4     40 F7 BF FD | 	call	#__system___float_div
1c9e8     A7 F0 03 F6 | 	mov	ptra, fp
1c9ec     B2 00 A0 FD | 	call	#popregs_
1c9f0                 | __system____builtin_tanf_ret
1c9f0     2D 00 64 FD | 	ret
1c9f4                 | 
1c9f4                 | __system____builtin_asinf
1c9f4     01 4A 05 F6 | 	mov	COUNT_, #1
1c9f8     A8 00 A0 FD | 	call	#pushregs_
1c9fc     09 1F 02 F6 | 	mov	local01, arg01
1ca00     0F 15 02 F6 | 	mov	arg02, local01
1ca04     0F 13 02 F6 | 	mov	arg01, local01
1ca08     18 F5 BF FD | 	call	#__system___float_mul
1ca0c     FD 14 02 F6 | 	mov	arg02, result1
1ca10     00 C0 1F FF 
1ca14     00 12 06 F6 | 	mov	arg01, ##1065353216
1ca18     1F 14 E6 F4 | 	bitnot	arg02, #31
1ca1c     34 F1 BF FD | 	call	#__system___float_add
1ca20     FD 12 02 F6 | 	mov	arg01, result1
1ca24     24 F4 BF FD | 	call	#__system___float_sqrt
1ca28     FD 14 02 F6 | 	mov	arg02, result1
1ca2c     0F 13 02 F6 | 	mov	arg01, local01
1ca30     58 00 B0 FD | 	call	#__system____builtin_atan2f
1ca34     A7 F0 03 F6 | 	mov	ptra, fp
1ca38     B2 00 A0 FD | 	call	#popregs_
1ca3c                 | __system____builtin_asinf_ret
1ca3c     2D 00 64 FD | 	ret
1ca40                 | 
1ca40                 | __system____builtin_acosf
1ca40     01 4A 05 F6 | 	mov	COUNT_, #1
1ca44     A8 00 A0 FD | 	call	#pushregs_
1ca48     09 1F 02 F6 | 	mov	local01, arg01
1ca4c     0F 15 02 F6 | 	mov	arg02, local01
1ca50     0F 13 02 F6 | 	mov	arg01, local01
1ca54     CC F4 BF FD | 	call	#__system___float_mul
1ca58     FD 14 02 F6 | 	mov	arg02, result1
1ca5c     00 C0 1F FF 
1ca60     00 12 06 F6 | 	mov	arg01, ##1065353216
1ca64     1F 14 E6 F4 | 	bitnot	arg02, #31
1ca68     E8 F0 BF FD | 	call	#__system___float_add
1ca6c     FD 12 02 F6 | 	mov	arg01, result1
1ca70     D8 F3 BF FD | 	call	#__system___float_sqrt
1ca74     FD 12 02 F6 | 	mov	arg01, result1
1ca78     0F 15 02 F6 | 	mov	arg02, local01
1ca7c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1ca80     A7 F0 03 F6 | 	mov	ptra, fp
1ca84     B2 00 A0 FD | 	call	#popregs_
1ca88                 | __system____builtin_acosf_ret
1ca88     2D 00 64 FD | 	ret
1ca8c                 | 
1ca8c                 | __system____builtin_atan2f
1ca8c     04 4A 05 F6 | 	mov	COUNT_, #4
1ca90     A8 00 A0 FD | 	call	#pushregs_
1ca94     09 1F 02 F6 | 	mov	local01, arg01
1ca98     0A 21 02 F6 | 	mov	local02, arg02
1ca9c     0F 13 02 F6 | 	mov	arg01, local01
1caa0     00 14 06 F6 | 	mov	arg02, #0
1caa4     01 16 06 F6 | 	mov	arg03, #1
1caa8     AC F8 BF FD | 	call	#__system___float_cmp
1caac     00 FA 0D F2 | 	cmp	result1, #0 wz
1cab0     28 00 90 5D |  if_ne	jmp	#LR__2710
1cab4     10 13 02 F6 | 	mov	arg01, local02
1cab8     00 14 06 F6 | 	mov	arg02, #0
1cabc     01 16 06 F6 | 	mov	arg03, #1
1cac0     94 F8 BF FD | 	call	#__system___float_cmp
1cac4     00 FA 55 F2 | 	cmps	result1, #0 wc
1cac8     87 24 60 CF 
1cacc     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1cad0     DC 00 90 CD |  if_b	jmp	#LR__2711
1cad4     00 FA 05 F6 | 	mov	result1, #0
1cad8     D4 00 90 FD | 	jmp	#LR__2711
1cadc                 | LR__2710
1cadc     10 13 02 F6 | 	mov	arg01, local02
1cae0     10 15 02 F6 | 	mov	arg02, local02
1cae4     3C F4 BF FD | 	call	#__system___float_mul
1cae8     FD 22 02 F6 | 	mov	local03, result1
1caec     0F 13 02 F6 | 	mov	arg01, local01
1caf0     0F 15 02 F6 | 	mov	arg02, local01
1caf4     2C F4 BF FD | 	call	#__system___float_mul
1caf8     FD 14 02 F6 | 	mov	arg02, result1
1cafc     11 13 02 F6 | 	mov	arg01, local03
1cb00     50 F0 BF FD | 	call	#__system___float_add
1cb04     FD 12 02 F6 | 	mov	arg01, result1
1cb08     40 F3 BF FD | 	call	#__system___float_sqrt
1cb0c     FD 22 02 F6 | 	mov	local03, result1
1cb10     10 13 02 F6 | 	mov	arg01, local02
1cb14     11 15 02 F6 | 	mov	arg02, local03
1cb18     0C F6 BF FD | 	call	#__system___float_div
1cb1c     FD 20 02 F6 | 	mov	local02, result1
1cb20     0F 13 02 F6 | 	mov	arg01, local01
1cb24     11 15 02 F6 | 	mov	arg02, local03
1cb28     FC F5 BF FD | 	call	#__system___float_div
1cb2c     FD 1E 02 F6 | 	mov	local01, result1
1cb30     00 40 27 FF 
1cb34     00 12 06 F6 | 	mov	arg01, ##1317011456
1cb38     10 15 02 F6 | 	mov	arg02, local02
1cb3c     E4 F3 BF FD | 	call	#__system___float_mul
1cb40     FD 12 02 F6 | 	mov	arg01, result1
1cb44     00 14 06 F6 | 	mov	arg02, #0
1cb48     A0 F8 BF FD | 	call	#__system___float_tointeger
1cb4c     FD 22 02 F6 | 	mov	local03, result1
1cb50     00 40 27 FF 
1cb54     00 12 06 F6 | 	mov	arg01, ##1317011456
1cb58     0F 15 02 F6 | 	mov	arg02, local01
1cb5c     C4 F3 BF FD | 	call	#__system___float_mul
1cb60     FD 12 02 F6 | 	mov	arg01, result1
1cb64     00 14 06 F6 | 	mov	arg02, #0
1cb68     80 F8 BF FD | 	call	#__system___float_tointeger
1cb6c     FD 22 52 FD | 	qvector	local03, result1
1cb70     87 24 20 FF 
1cb74     DB 23 06 F6 | 	mov	local03, ##1078530011
1cb78     19 12 62 FD | 	getqy	arg01
1cb7c     01 12 C6 F0 | 	sar	arg01, #1
1cb80     09 13 52 F6 | 	abs	arg01, arg01 wc
1cb84     1F 24 C6 C9 |  if_b	decod	local04, #31
1cb88     00 24 06 36 |  if_ae	mov	local04, #0
1cb8c     90 EF BF FD | 	call	#__system___float_fromuns
1cb90     12 FB 61 F5 | 	xor	result1, local04
1cb94     FD 12 02 F6 | 	mov	arg01, result1
1cb98     00 40 27 FF 
1cb9c     00 14 06 F6 | 	mov	arg02, ##1317011456
1cba0     84 F5 BF FD | 	call	#__system___float_div
1cba4     FD 14 02 F6 | 	mov	arg02, result1
1cba8     11 13 02 F6 | 	mov	arg01, local03
1cbac     74 F3 BF FD | 	call	#__system___float_mul
1cbb0                 | LR__2711
1cbb0     A7 F0 03 F6 | 	mov	ptra, fp
1cbb4     B2 00 A0 FD | 	call	#popregs_
1cbb8                 | __system____builtin_atan2f_ret
1cbb8     2D 00 64 FD | 	ret
1cbbc                 | 
1cbbc                 | __system____builtin_exp2f
1cbbc     04 4A 05 F6 | 	mov	COUNT_, #4
1cbc0     A8 00 A0 FD | 	call	#pushregs_
1cbc4     09 1F 02 F6 | 	mov	local01, arg01
1cbc8     00 7F 21 FF 
1cbcc     00 14 06 F6 | 	mov	arg02, ##1123942400
1cbd0     01 16 66 F6 | 	neg	arg03, #1
1cbd4     80 F7 BF FD | 	call	#__system___float_cmp
1cbd8     00 FA 55 F2 | 	cmps	result1, #0 wc
1cbdc     00 C0 3F 3F 
1cbe0     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1cbe4     DC 00 90 3D |  if_ae	jmp	#LR__2721
1cbe8     0F 13 02 F6 | 	mov	arg01, local01
1cbec     00 7F 61 FF 
1cbf0     00 14 06 F6 | 	mov	arg02, ##-1023541248
1cbf4     01 16 06 F6 | 	mov	arg03, #1
1cbf8     5C F7 BF FD | 	call	#__system___float_cmp
1cbfc     00 FA 55 F2 | 	cmps	result1, #0 wc
1cc00     00 FA 05 C6 |  if_b	mov	result1, #0
1cc04     BC 00 90 CD |  if_b	jmp	#LR__2721
1cc08     0F 13 02 F6 | 	mov	arg01, local01
1cc0c     00 14 06 F6 | 	mov	arg02, #0
1cc10     D8 F7 BF FD | 	call	#__system___float_tointeger
1cc14     FD 20 02 F6 | 	mov	local02, result1
1cc18     10 13 52 F6 | 	abs	arg01, local02 wc
1cc1c     1F 22 C6 C9 |  if_b	decod	local03, #31
1cc20     00 22 06 36 |  if_ae	mov	local03, #0
1cc24     F8 EE BF FD | 	call	#__system___float_fromuns
1cc28     11 FB 61 F5 | 	xor	result1, local03
1cc2c     FD 14 02 F6 | 	mov	arg02, result1
1cc30     0F 13 02 F6 | 	mov	arg01, local01
1cc34     1F 14 E6 F4 | 	bitnot	arg02, #31
1cc38     18 EF BF FD | 	call	#__system___float_add
1cc3c     FD 24 02 F6 | 	mov	local04, result1
1cc40     12 13 02 F6 | 	mov	arg01, local04
1cc44     00 14 06 F6 | 	mov	arg02, #0
1cc48     01 16 06 F6 | 	mov	arg03, #1
1cc4c     08 F7 BF FD | 	call	#__system___float_cmp
1cc50     00 FA 55 F2 | 	cmps	result1, #0 wc
1cc54     18 00 90 3D |  if_ae	jmp	#LR__2720
1cc58     12 13 02 F6 | 	mov	arg01, local04
1cc5c     00 C0 1F FF 
1cc60     00 14 06 F6 | 	mov	arg02, ##1065353216
1cc64     EC EE BF FD | 	call	#__system___float_add
1cc68     FD 24 02 F6 | 	mov	local04, result1
1cc6c     01 20 86 F1 | 	sub	local02, #1
1cc70                 | LR__2720
1cc70     7F 20 06 F1 | 	add	local02, #127
1cc74     17 20 66 F0 | 	shl	local02, #23
1cc78     12 13 02 F6 | 	mov	arg01, local04
1cc7c     00 80 26 FF 
1cc80     00 14 06 F6 | 	mov	arg02, ##1291845632
1cc84     9C F2 BF FD | 	call	#__system___float_mul
1cc88     FD 12 02 F6 | 	mov	arg01, result1
1cc8c     00 14 06 F6 | 	mov	arg02, #0
1cc90     58 F7 BF FD | 	call	#__system___float_tointeger
1cc94     FD 24 0A F6 | 	mov	local04, result1 wz
1cc98     10 FB 01 A6 |  if_e	mov	result1, local02
1cc9c     24 00 90 AD |  if_e	jmp	#LR__2721
1cca0     3E 24 26 F4 | 	bith	local04, #62
1cca4     0F 24 62 FD | 	qexp	local04
1cca8     10 13 02 F6 | 	mov	arg01, local02
1ccac     18 14 62 FD | 	getqx	arg02
1ccb0     01 14 06 F1 | 	add	arg02, #1
1ccb4     01 14 46 F0 | 	shr	arg02, #1
1ccb8     00 80 1F FF 
1ccbc     00 14 06 F1 | 	add	arg02, ##1056964608
1ccc0     60 F2 BF FD | 	call	#__system___float_mul
1ccc4                 | LR__2721
1ccc4     A7 F0 03 F6 | 	mov	ptra, fp
1ccc8     B2 00 A0 FD | 	call	#popregs_
1cccc                 | __system____builtin_exp2f_ret
1cccc     2D 00 64 FD | 	ret
1ccd0                 | 
1ccd0                 | __system____builtin_log2f
1ccd0     06 4A 05 F6 | 	mov	COUNT_, #6
1ccd4     A8 00 A0 FD | 	call	#pushregs_
1ccd8     09 1F 02 F6 | 	mov	local01, arg01
1ccdc     09 21 0A F6 | 	mov	local02, arg01 wz
1cce0     00 00 40 5F 
1cce4     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1cce8     00 40 00 AF 
1ccec     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1ccf0     08 01 90 AD |  if_e	jmp	#LR__2734
1ccf4     00 20 56 F2 | 	cmps	local02, #0 wc
1ccf8     00 E0 3F CF 
1ccfc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1cd00     F8 00 90 CD |  if_b	jmp	#LR__2734
1cd04     0F 13 02 F6 | 	mov	arg01, local01
1cd08     00 90 20 FF 
1cd0c     00 14 06 F6 | 	mov	arg02, ##1092616192
1cd10     01 16 06 F6 | 	mov	arg03, #1
1cd14     40 F6 BF FD | 	call	#__system___float_cmp
1cd18     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd1c     4D 2A 20 AF 
1cd20     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1cd24     D4 00 90 AD |  if_e	jmp	#LR__2734
1cd28     0F 13 02 F6 | 	mov	arg01, local01
1cd2c     FC 16 20 FF 
1cd30     54 14 06 F6 | 	mov	arg02, ##1076754516
1cd34     01 16 06 F6 | 	mov	arg03, #1
1cd38     1C F6 BF FD | 	call	#__system___float_cmp
1cd3c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd40     55 DC 1F AF 
1cd44     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1cd48     B0 00 90 AD |  if_e	jmp	#LR__2734
1cd4c     10 23 02 F6 | 	mov	local03, local02
1cd50     17 22 46 F0 | 	shr	local03, #23
1cd54     11 23 E2 F8 | 	getbyte	local03, local03, #0
1cd58     17 21 06 F4 | 	bitl	local02, #279
1cd5c     10 25 02 F6 | 	mov	local04, local02
1cd60     FF 22 0E F2 | 	cmp	local03, #255 wz
1cd64     1C 00 90 5D |  if_ne	jmp	#LR__2730
1cd68     00 24 0E F2 | 	cmp	local04, #0 wz
1cd6c     00 C0 3F 5F 
1cd70     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1cd74     00 E0 3F AF 
1cd78     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1cd7c     13 FB 01 F6 | 	mov	result1, local05
1cd80     78 00 90 FD | 	jmp	#LR__2734
1cd84                 | LR__2730
1cd84     00 22 0E F2 | 	cmp	local03, #0 wz
1cd88     17 24 26 54 |  if_ne	bith	local04, #23
1cd8c     7F 22 86 51 |  if_ne	sub	local03, #127
1cd90     28 00 90 5D |  if_ne	jmp	#LR__2733
1cd94     00 24 0E F2 | 	cmp	local04, #0 wz
1cd98     00 40 00 AF 
1cd9c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1cda0     58 00 90 AD |  if_e	jmp	#LR__2734
1cda4     7E 22 66 F6 | 	neg	local03, #126
1cda8     97 08 48 FB | 	callpa	#(@LR__2732-@LR__2731)>>2,fcache_load_ptr_
1cdac                 | LR__2731
1cdac     17 24 2E F4 | 	testbn	local04, #23 wz
1cdb0     01 24 66 A0 |  if_e	shl	local04, #1
1cdb4     01 22 06 A1 |  if_e	add	local03, #1
1cdb8     F0 FF 9F AD |  if_e	jmp	#LR__2731
1cdbc                 | LR__2732
1cdbc                 | LR__2733
1cdbc     0E 24 62 FD | 	qlog	local04
1cdc0     01 22 86 F1 | 	sub	local03, #1
1cdc4     11 13 52 F6 | 	abs	arg01, local03 wc
1cdc8     1F 28 C6 C9 |  if_b	decod	local06, #31
1cdcc     00 28 06 36 |  if_ae	mov	local06, #0
1cdd0     18 26 62 FD | 	getqx	local05
1cdd4     9B 26 06 F4 | 	bitl	local05, #155
1cdd8     08 26 06 F1 | 	add	local05, #8
1cddc     04 26 46 F0 | 	shr	local05, #4
1cde0     00 C0 1F FF 
1cde4     00 26 06 F1 | 	add	local05, ##1065353216
1cde8     34 ED BF FD | 	call	#__system___float_fromuns
1cdec     14 FB 61 F5 | 	xor	result1, local06
1cdf0     FD 14 02 F6 | 	mov	arg02, result1
1cdf4     13 13 02 F6 | 	mov	arg01, local05
1cdf8     58 ED BF FD | 	call	#__system___float_add
1cdfc                 | LR__2734
1cdfc     A7 F0 03 F6 | 	mov	ptra, fp
1ce00     B2 00 A0 FD | 	call	#popregs_
1ce04                 | __system____builtin_log2f_ret
1ce04     2D 00 64 FD | 	ret
1ce08                 | 
1ce08                 | __system____builtin_powf
1ce08     04 4A 05 F6 | 	mov	COUNT_, #4
1ce0c     A8 00 A0 FD | 	call	#pushregs_
1ce10     09 1F 02 F6 | 	mov	local01, arg01
1ce14     0A 21 02 F6 | 	mov	local02, arg02
1ce18     10 13 02 F6 | 	mov	arg01, local02
1ce1c     00 14 06 F6 | 	mov	arg02, #0
1ce20     C8 F5 BF FD | 	call	#__system___float_tointeger
1ce24     FD 22 02 F6 | 	mov	local03, result1
1ce28     11 13 52 F6 | 	abs	arg01, local03 wc
1ce2c     1F 24 C6 C9 |  if_b	decod	local04, #31
1ce30     00 24 06 36 |  if_ae	mov	local04, #0
1ce34     E8 EC BF FD | 	call	#__system___float_fromuns
1ce38     12 FB 61 F5 | 	xor	result1, local04
1ce3c     FD 12 02 F6 | 	mov	arg01, result1
1ce40     10 15 02 F6 | 	mov	arg02, local02
1ce44     01 16 06 F6 | 	mov	arg03, #1
1ce48     0C F5 BF FD | 	call	#__system___float_cmp
1ce4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce50     18 00 90 5D |  if_ne	jmp	#LR__2740
1ce54     00 C0 1F FF 
1ce58     00 12 06 F6 | 	mov	arg01, ##1065353216
1ce5c     0F 15 02 F6 | 	mov	arg02, local01
1ce60     11 17 02 F6 | 	mov	arg03, local03
1ce64     68 00 B0 FD | 	call	#__system___float_pow_n
1ce68     58 00 90 FD | 	jmp	#LR__2741
1ce6c                 | LR__2740
1ce6c     0F 13 02 F6 | 	mov	arg01, local01
1ce70     00 14 06 F6 | 	mov	arg02, #0
1ce74     01 16 06 F6 | 	mov	arg03, #1
1ce78     DC F4 BF FD | 	call	#__system___float_cmp
1ce7c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ce80     00 E0 3F CF 
1ce84     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1ce88     38 00 90 CD |  if_b	jmp	#LR__2741
1ce8c     0F 13 02 F6 | 	mov	arg01, local01
1ce90     00 14 06 F6 | 	mov	arg02, #0
1ce94     01 16 06 F6 | 	mov	arg03, #1
1ce98     BC F4 BF FD | 	call	#__system___float_cmp
1ce9c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cea0     00 FA 05 A6 |  if_e	mov	result1, #0
1cea4     1C 00 90 AD |  if_e	jmp	#LR__2741
1cea8     0F 13 02 F6 | 	mov	arg01, local01
1ceac     20 FE BF FD | 	call	#__system____builtin_log2f
1ceb0     FD 12 02 F6 | 	mov	arg01, result1
1ceb4     10 15 02 F6 | 	mov	arg02, local02
1ceb8     68 F0 BF FD | 	call	#__system___float_mul
1cebc     FD 12 02 F6 | 	mov	arg01, result1
1cec0     F8 FC BF FD | 	call	#__system____builtin_exp2f
1cec4                 | LR__2741
1cec4     A7 F0 03 F6 | 	mov	ptra, fp
1cec8     B2 00 A0 FD | 	call	#popregs_
1cecc                 | __system____builtin_powf_ret
1cecc     2D 00 64 FD | 	ret
1ced0                 | 
1ced0                 | __system___float_pow_n
1ced0     05 4A 05 F6 | 	mov	COUNT_, #5
1ced4     A8 00 A0 FD | 	call	#pushregs_
1ced8     09 1F 02 F6 | 	mov	local01, arg01
1cedc     0A 21 02 F6 | 	mov	local02, arg02
1cee0     0B 23 02 F6 | 	mov	local03, arg03
1cee4     00 22 56 F2 | 	cmps	local03, #0 wc
1cee8     18 00 90 3D |  if_ae	jmp	#LR__2750
1ceec     01 24 06 F6 | 	mov	local04, #1
1cef0     11 23 62 F6 | 	neg	local03, local03
1cef4     00 22 56 F2 | 	cmps	local03, #0 wc
1cef8     00 FA 05 C6 |  if_b	mov	result1, #0
1cefc     94 00 90 CD |  if_b	jmp	#LR__2758
1cf00     04 00 90 FD | 	jmp	#LR__2751
1cf04                 | LR__2750
1cf04     00 24 06 F6 | 	mov	local04, #0
1cf08                 | LR__2751
1cf08     00 C0 1F FF 
1cf0c     00 26 06 F6 | 	mov	local05, ##1065353216
1cf10                 | LR__2752
1cf10     01 22 56 F2 | 	cmps	local03, #1 wc
1cf14     30 00 90 CD |  if_b	jmp	#LR__2754
1cf18     01 22 CE F7 | 	test	local03, #1 wz
1cf1c     10 00 90 AD |  if_e	jmp	#LR__2753
1cf20     13 13 02 F6 | 	mov	arg01, local05
1cf24     10 15 02 F6 | 	mov	arg02, local02
1cf28     F8 EF BF FD | 	call	#__system___float_mul
1cf2c     FD 26 02 F6 | 	mov	local05, result1
1cf30                 | LR__2753
1cf30     01 22 C6 F0 | 	sar	local03, #1
1cf34     10 13 02 F6 | 	mov	arg01, local02
1cf38     10 15 02 F6 | 	mov	arg02, local02
1cf3c     E4 EF BF FD | 	call	#__system___float_mul
1cf40     FD 20 02 F6 | 	mov	local02, result1
1cf44     C8 FF 9F FD | 	jmp	#LR__2752
1cf48                 | LR__2754
1cf48     00 24 0E F2 | 	cmp	local04, #0 wz
1cf4c     14 00 90 AD |  if_e	jmp	#LR__2755
1cf50     0F 13 02 F6 | 	mov	arg01, local01
1cf54     13 15 02 F6 | 	mov	arg02, local05
1cf58     CC F1 BF FD | 	call	#__system___float_div
1cf5c     FD 26 02 F6 | 	mov	local05, result1
1cf60     2C 00 90 FD | 	jmp	#LR__2757
1cf64                 | LR__2755
1cf64     0F 13 02 F6 | 	mov	arg01, local01
1cf68     00 C0 1F FF 
1cf6c     00 14 06 F6 | 	mov	arg02, ##1065353216
1cf70     01 16 06 F6 | 	mov	arg03, #1
1cf74     E0 F3 BF FD | 	call	#__system___float_cmp
1cf78     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf7c     10 00 90 AD |  if_e	jmp	#LR__2756
1cf80     0F 13 02 F6 | 	mov	arg01, local01
1cf84     13 15 02 F6 | 	mov	arg02, local05
1cf88     98 EF BF FD | 	call	#__system___float_mul
1cf8c     FD 26 02 F6 | 	mov	local05, result1
1cf90                 | LR__2756
1cf90                 | LR__2757
1cf90     13 FB 01 F6 | 	mov	result1, local05
1cf94                 | LR__2758
1cf94     A7 F0 03 F6 | 	mov	ptra, fp
1cf98     B2 00 A0 FD | 	call	#popregs_
1cf9c                 | __system___float_pow_n_ret
1cf9c     2D 00 64 FD | 	ret
1cfa0                 | 
1cfa0                 | __system___gc_ptrs
1cfa0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1cfa4     00 03 02 F6 | 	mov	_var02, _var01
1cfa8     76 01 00 FF 
1cfac     F8 03 06 F1 | 	add	_var02, ##191992
1cfb0     00 FD 09 FB | 	rdlong	result2, _var01 wz
1cfb4     74 00 90 5D |  if_ne	jmp	#LR__2760
1cfb8     01 FD 01 F6 | 	mov	result2, _var02
1cfbc     00 FD 81 F1 | 	sub	result2, _var01
1cfc0     00 03 58 FC | 	wrword	#1, _var01
1cfc4     00 FB 01 F6 | 	mov	result1, _var01
1cfc8     02 FA 05 F1 | 	add	result1, #2
1cfcc     36 00 80 FF 
1cfd0     FD 20 59 FC | 	wrword	##27792, result1
1cfd4     00 FB 01 F6 | 	mov	result1, _var01
1cfd8     04 FA 05 F1 | 	add	result1, #4
1cfdc     FD 00 58 FC | 	wrword	#0, result1
1cfe0     00 FB 01 F6 | 	mov	result1, _var01
1cfe4     06 FA 05 F1 | 	add	result1, #6
1cfe8     FD 02 58 FC | 	wrword	#1, result1
1cfec     10 00 06 F1 | 	add	_var01, #16
1cff0     FE FC 51 F6 | 	abs	result2, result2 wc
1cff4     04 FC 45 F0 | 	shr	result2, #4
1cff8     FE FC 81 F6 | 	negc	result2, result2
1cffc     00 FD 51 FC | 	wrword	result2, _var01
1d000     00 FD 01 F6 | 	mov	result2, _var01
1d004     02 FC 05 F1 | 	add	result2, #2
1d008     36 00 80 FF 
1d00c     FE 1E 59 FC | 	wrword	##27791, result2
1d010     00 FD 01 F6 | 	mov	result2, _var01
1d014     04 FC 05 F1 | 	add	result2, #4
1d018     FE 00 58 FC | 	wrword	#0, result2
1d01c     00 FD 01 F6 | 	mov	result2, _var01
1d020     06 FC 05 F1 | 	add	result2, #6
1d024     FE 00 58 FC | 	wrword	#0, result2
1d028     10 00 86 F1 | 	sub	_var01, #16
1d02c                 | LR__2760
1d02c     00 FB 01 F6 | 	mov	result1, _var01
1d030     01 FD 01 F6 | 	mov	result2, _var02
1d034                 | __system___gc_ptrs_ret
1d034     2D 00 64 FD | 	ret
1d038                 | 
1d038                 | __system___gc_tryalloc
1d038     0B 4A 05 F6 | 	mov	COUNT_, #11
1d03c     A8 00 A0 FD | 	call	#pushregs_
1d040     09 1F 02 F6 | 	mov	local01, arg01
1d044     0A 21 02 F6 | 	mov	local02, arg02
1d048     54 FF BF FD | 	call	#__system___gc_ptrs
1d04c     FD 22 02 F6 | 	mov	local03, result1
1d050     FE 24 02 F6 | 	mov	local04, result2
1d054     11 27 02 F6 | 	mov	local05, local03
1d058     00 28 06 F6 | 	mov	local06, #0
1d05c     97 1E 48 FB | 	callpa	#(@LR__2771-@LR__2770)>>2,fcache_load_ptr_
1d060                 | LR__2770
1d060     13 2B 02 F6 | 	mov	local07, local05
1d064     06 26 06 F1 | 	add	local05, #6
1d068     13 15 EA FA | 	rdword	arg02, local05 wz
1d06c     11 13 02 F6 | 	mov	arg01, local03
1d070     00 FA 05 A6 |  if_e	mov	result1, #0
1d074     04 14 66 50 |  if_ne	shl	arg02, #4
1d078     0A 13 02 51 |  if_ne	add	arg01, arg02
1d07c     09 FB 01 56 |  if_ne	mov	result1, arg01
1d080     FD 26 0A F6 | 	mov	local05, result1 wz
1d084     13 29 E2 5A |  if_ne	rdword	local06, local05
1d088     00 26 0E F2 | 	cmp	local05, #0 wz
1d08c     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1d090     08 00 90 1D |  if_a	jmp	#LR__2772
1d094     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1d098     C4 FF 9F 1D |  if_a	jmp	#LR__2770
1d09c                 | LR__2771
1d09c                 | LR__2772
1d09c     00 26 0E F2 | 	cmp	local05, #0 wz
1d0a0     13 FB 01 A6 |  if_e	mov	result1, local05
1d0a4     3C 01 90 AD |  if_e	jmp	#LR__2775
1d0a8     13 FD 01 F6 | 	mov	result2, local05
1d0ac     06 FC 05 F1 | 	add	result2, #6
1d0b0     FE 2C E2 FA | 	rdword	local08, result2
1d0b4     14 1F 52 F2 | 	cmps	local01, local06 wc
1d0b8     C0 00 90 3D |  if_ae	jmp	#LR__2774
1d0bc     13 1F 52 FC | 	wrword	local01, local05
1d0c0     13 13 02 F6 | 	mov	arg01, local05
1d0c4     0F 2D 02 F6 | 	mov	local08, local01
1d0c8     04 2C 66 F0 | 	shl	local08, #4
1d0cc     16 13 02 F1 | 	add	arg01, local08
1d0d0     0F 29 82 F1 | 	sub	local06, local01
1d0d4     09 29 52 FC | 	wrword	local06, arg01
1d0d8     09 2D 02 F6 | 	mov	local08, arg01
1d0dc     02 2C 06 F1 | 	add	local08, #2
1d0e0     36 00 80 FF 
1d0e4     16 1F 59 FC | 	wrword	##27791, local08
1d0e8     13 15 0A F6 | 	mov	arg02, local05 wz
1d0ec     00 FA 05 A6 |  if_e	mov	result1, #0
1d0f0     11 15 82 51 |  if_ne	sub	arg02, local03
1d0f4     04 14 46 50 |  if_ne	shr	arg02, #4
1d0f8     0A FB 01 56 |  if_ne	mov	result1, arg02
1d0fc     09 2D 02 F6 | 	mov	local08, arg01
1d100     04 2C 06 F1 | 	add	local08, #4
1d104     16 FB 51 FC | 	wrword	result1, local08
1d108     13 2D 02 F6 | 	mov	local08, local05
1d10c     06 2C 06 F1 | 	add	local08, #6
1d110     09 15 02 F6 | 	mov	arg02, arg01
1d114     16 2D E2 FA | 	rdword	local08, local08
1d118     06 14 06 F1 | 	add	arg02, #6
1d11c     0A 2D 52 FC | 	wrword	local08, arg02
1d120     09 2F 02 F6 | 	mov	local09, arg01
1d124     17 15 0A F6 | 	mov	arg02, local09 wz
1d128     00 FA 05 A6 |  if_e	mov	result1, #0
1d12c     11 15 82 51 |  if_ne	sub	arg02, local03
1d130     04 14 46 50 |  if_ne	shr	arg02, #4
1d134     0A FB 01 56 |  if_ne	mov	result1, arg02
1d138     FD 2C 02 F6 | 	mov	local08, result1
1d13c     09 31 EA FA | 	rdword	local10, arg01 wz
1d140     00 FA 05 A6 |  if_e	mov	result1, #0
1d144     04 30 66 50 |  if_ne	shl	local10, #4
1d148     18 13 02 51 |  if_ne	add	arg01, local10
1d14c     09 FB 01 56 |  if_ne	mov	result1, arg01
1d150     FD 32 0A F6 | 	mov	local11, result1 wz
1d154     24 00 90 AD |  if_e	jmp	#LR__2773
1d158     12 33 52 F2 | 	cmps	local11, local04 wc
1d15c     1C 00 90 3D |  if_ae	jmp	#LR__2773
1d160     17 15 0A F6 | 	mov	arg02, local09 wz
1d164     00 FA 05 A6 |  if_e	mov	result1, #0
1d168     11 15 82 51 |  if_ne	sub	arg02, local03
1d16c     04 14 46 50 |  if_ne	shr	arg02, #4
1d170     0A FB 01 56 |  if_ne	mov	result1, arg02
1d174     04 32 06 F1 | 	add	local11, #4
1d178     19 FB 51 FC | 	wrword	result1, local11
1d17c                 | LR__2773
1d17c                 | LR__2774
1d17c     06 2A 06 F1 | 	add	local07, #6
1d180     15 2D 52 FC | 	wrword	local08, local07
1d184     36 00 00 FF 
1d188     80 2E 06 F6 | 	mov	local09, ##27776
1d18c     10 2F 42 F5 | 	or	local09, local02
1d190     00 FA 05 F6 | 	mov	result1, #0
1d194     01 FA 61 FD | 	cogid	result1
1d198     FD 2E 42 F5 | 	or	local09, result1
1d19c     13 33 02 F6 | 	mov	local11, local05
1d1a0     02 32 06 F1 | 	add	local11, #2
1d1a4     19 2F 52 FC | 	wrword	local09, local11
1d1a8     11 2F 02 F6 | 	mov	local09, local03
1d1ac     08 2E 06 F1 | 	add	local09, #8
1d1b0     13 33 02 F6 | 	mov	local11, local05
1d1b4     17 2F E2 FA | 	rdword	local09, local09
1d1b8     06 32 06 F1 | 	add	local11, #6
1d1bc     19 2F 52 FC | 	wrword	local09, local11
1d1c0     13 15 0A F6 | 	mov	arg02, local05 wz
1d1c4     00 FA 05 A6 |  if_e	mov	result1, #0
1d1c8     11 15 82 51 |  if_ne	sub	arg02, local03
1d1cc     04 14 46 50 |  if_ne	shr	arg02, #4
1d1d0     0A FB 01 56 |  if_ne	mov	result1, arg02
1d1d4     08 22 06 F1 | 	add	local03, #8
1d1d8     11 FB 51 FC | 	wrword	result1, local03
1d1dc     08 26 06 F1 | 	add	local05, #8
1d1e0     13 FB 01 F6 | 	mov	result1, local05
1d1e4                 | LR__2775
1d1e4     A7 F0 03 F6 | 	mov	ptra, fp
1d1e8     B2 00 A0 FD | 	call	#popregs_
1d1ec                 | __system___gc_tryalloc_ret
1d1ec     2D 00 64 FD | 	ret
1d1f0                 | 
1d1f0                 | __system___gc_alloc_managed
1d1f0     01 4A 05 F6 | 	mov	COUNT_, #1
1d1f4     A8 00 A0 FD | 	call	#pushregs_
1d1f8     09 1F 02 F6 | 	mov	local01, arg01
1d1fc     00 14 06 F6 | 	mov	arg02, #0
1d200     1C 00 B0 FD | 	call	#__system___gc_doalloc
1d204     FD 14 0A F6 | 	mov	arg02, result1 wz
1d208     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1d20c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1d210     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1d214     A7 F0 03 F6 | 	mov	ptra, fp
1d218     B2 00 A0 FD | 	call	#popregs_
1d21c                 | __system___gc_alloc_managed_ret
1d21c     2D 00 64 FD | 	ret
1d220                 | 
1d220                 | __system___gc_doalloc
1d220     06 4A 05 F6 | 	mov	COUNT_, #6
1d224     A8 00 A0 FD | 	call	#pushregs_
1d228     09 1F 0A F6 | 	mov	local01, arg01 wz
1d22c     0A 21 02 F6 | 	mov	local02, arg02
1d230     00 FA 05 A6 |  if_e	mov	result1, #0
1d234     8C 00 90 AD |  if_e	jmp	#LR__2787
1d238     17 1E 06 F1 | 	add	local01, #23
1d23c     0F 1E 26 F5 | 	andn	local01, #15
1d240     04 1E 46 F0 | 	shr	local01, #4
1d244     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1d248     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1d24c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1d250     E4 C1 BF FD | 	call	#__system___lockmem
1d254     0F 13 02 F6 | 	mov	arg01, local01
1d258     10 15 02 F6 | 	mov	arg02, local02
1d25c     D8 FD BF FD | 	call	#__system___gc_tryalloc
1d260     FD 22 0A F6 | 	mov	local03, result1 wz
1d264     14 00 90 5D |  if_ne	jmp	#LR__2780
1d268     70 03 B0 FD | 	call	#__system___gc_docollect
1d26c     0F 13 02 F6 | 	mov	arg01, local01
1d270     10 15 02 F6 | 	mov	arg02, local02
1d274     C0 FD BF FD | 	call	#__system___gc_tryalloc
1d278     FD 22 02 F6 | 	mov	local03, result1
1d27c                 | LR__2780
1d27c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1d280     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1d284     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1d288     09 01 68 FC | 	wrlong	#0, arg01
1d28c     00 22 0E F2 | 	cmp	local03, #0 wz
1d290     2C 00 90 AD |  if_e	jmp	#LR__2786
1d294     04 1E 66 F0 | 	shl	local01, #4
1d298     08 1E 86 F1 | 	sub	local01, #8
1d29c     0F 25 52 F6 | 	abs	local04, local01 wc
1d2a0     02 24 46 F0 | 	shr	local04, #2
1d2a4     12 27 8A F6 | 	negc	local05, local04 wz
1d2a8     11 29 02 F6 | 	mov	local06, local03
1d2ac     10 00 90 AD |  if_e	jmp	#LR__2785
1d2b0     97 06 48 FB | 	callpa	#(@LR__2783-@LR__2781)>>2,fcache_load_ptr_
1d2b4                 | LR__2781
1d2b4     13 05 D8 FC | 	rep	@LR__2784, local05
1d2b8                 | LR__2782
1d2b8     14 01 68 FC | 	wrlong	#0, local06
1d2bc     04 28 06 F1 | 	add	local06, #4
1d2c0                 | LR__2783
1d2c0                 | LR__2784
1d2c0                 | LR__2785
1d2c0                 | LR__2786
1d2c0     11 FB 01 F6 | 	mov	result1, local03
1d2c4                 | LR__2787
1d2c4     A7 F0 03 F6 | 	mov	ptra, fp
1d2c8     B2 00 A0 FD | 	call	#popregs_
1d2cc                 | __system___gc_doalloc_ret
1d2cc     2D 00 64 FD | 	ret
1d2d0                 | 
1d2d0                 | __system___gc_isvalidptr
1d2d0     F8 16 06 F4 | 	bitl	arg03, #248
1d2d4     08 16 86 F1 | 	sub	arg03, #8
1d2d8     09 17 52 F2 | 	cmps	arg03, arg01 wc
1d2dc     08 00 90 CD |  if_b	jmp	#LR__2790
1d2e0     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1d2e4     08 00 90 CD |  if_b	jmp	#LR__2791
1d2e8                 | LR__2790
1d2e8     00 FA 05 F6 | 	mov	result1, #0
1d2ec     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1d2f0                 | LR__2791
1d2f0     0B 01 02 F6 | 	mov	_var01, arg03
1d2f4     09 01 62 F5 | 	xor	_var01, arg01
1d2f8     0F 00 CE F7 | 	test	_var01, #15 wz
1d2fc     00 FA 05 56 |  if_ne	mov	result1, #0
1d300     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1d304     0B 01 02 F6 | 	mov	_var01, arg03
1d308     02 00 06 F1 | 	add	_var01, #2
1d30c     00 01 E2 FA | 	rdword	_var01, _var01
1d310     7F 00 00 FF 
1d314     C0 01 06 F5 | 	and	_var01, ##65472
1d318     36 00 00 FF 
1d31c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1d320     00 FA 05 56 |  if_ne	mov	result1, #0
1d324     0B FB 01 A6 |  if_e	mov	result1, arg03
1d328                 | __system___gc_isvalidptr_ret
1d328     2D 00 64 FD | 	ret
1d32c                 | 
1d32c                 | __system___gc_free
1d32c     09 17 02 F6 | 	mov	arg03, arg01
1d330     6C FC BF FD | 	call	#__system___gc_ptrs
1d334     FD 12 02 F6 | 	mov	arg01, result1
1d338     FE 14 02 F6 | 	mov	arg02, result2
1d33c     90 FF BF FD | 	call	#__system___gc_isvalidptr
1d340     FD 14 0A F6 | 	mov	arg02, result1 wz
1d344     28 00 90 AD |  if_e	jmp	#LR__2800
1d348     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1d34c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1d350     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1d354     E0 C0 BF FD | 	call	#__system___lockmem
1d358     0A 13 02 F6 | 	mov	arg01, arg02
1d35c     14 00 B0 FD | 	call	#__system___gc_dofree
1d360     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1d364     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1d368     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1d36c     09 01 68 FC | 	wrlong	#0, arg01
1d370                 | LR__2800
1d370                 | __system___gc_free_ret
1d370     2D 00 64 FD | 	ret
1d374                 | 
1d374                 | __system___gc_dofree
1d374     06 4A 05 F6 | 	mov	COUNT_, #6
1d378     A8 00 A0 FD | 	call	#pushregs_
1d37c     09 1F 02 F6 | 	mov	local01, arg01
1d380     1C FC BF FD | 	call	#__system___gc_ptrs
1d384     FD 20 02 F6 | 	mov	local02, result1
1d388     FE 22 02 F6 | 	mov	local03, result2
1d38c     0F 15 02 F6 | 	mov	arg02, local01
1d390     02 14 06 F1 | 	add	arg02, #2
1d394     36 00 80 FF 
1d398     0A 1F 59 FC | 	wrword	##27791, arg02
1d39c     0F 25 02 F6 | 	mov	local04, local01
1d3a0     0F 13 02 F6 | 	mov	arg01, local01
1d3a4     09 27 EA FA | 	rdword	local05, arg01 wz
1d3a8     00 FA 05 A6 |  if_e	mov	result1, #0
1d3ac     04 26 66 50 |  if_ne	shl	local05, #4
1d3b0     13 13 02 51 |  if_ne	add	arg01, local05
1d3b4     09 FB 01 56 |  if_ne	mov	result1, arg01
1d3b8     FD 28 02 F6 | 	mov	local06, result1
1d3bc     97 24 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
1d3c0                 | LR__2810
1d3c0     04 24 06 F1 | 	add	local04, #4
1d3c4     12 15 EA FA | 	rdword	arg02, local04 wz
1d3c8     10 13 02 F6 | 	mov	arg01, local02
1d3cc     00 FA 05 A6 |  if_e	mov	result1, #0
1d3d0     04 14 66 50 |  if_ne	shl	arg02, #4
1d3d4     0A 13 02 51 |  if_ne	add	arg01, arg02
1d3d8     09 FB 01 56 |  if_ne	mov	result1, arg01
1d3dc     FD 24 0A F6 | 	mov	local04, result1 wz
1d3e0     24 00 90 AD |  if_e	jmp	#LR__2812
1d3e4     12 13 02 F6 | 	mov	arg01, local04
1d3e8     00 FA 05 F6 | 	mov	result1, #0
1d3ec     02 12 06 F1 | 	add	arg01, #2
1d3f0     09 13 E2 FA | 	rdword	arg01, arg01
1d3f4     36 00 00 FF 
1d3f8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1d3fc     01 FA 65 A6 |  if_e	neg	result1, #1
1d400     00 FA 0D F2 | 	cmp	result1, #0 wz
1d404     B8 FF 9F AD |  if_e	jmp	#LR__2810
1d408                 | LR__2811
1d408                 | LR__2812
1d408     00 24 0E F2 | 	cmp	local04, #0 wz
1d40c     10 25 02 A6 |  if_e	mov	local04, local02
1d410     12 15 02 F6 | 	mov	arg02, local04
1d414     06 14 06 F1 | 	add	arg02, #6
1d418     0F 13 02 F6 | 	mov	arg01, local01
1d41c     0A 15 E2 FA | 	rdword	arg02, arg02
1d420     06 12 06 F1 | 	add	arg01, #6
1d424     09 15 52 FC | 	wrword	arg02, arg01
1d428     0F 15 0A F6 | 	mov	arg02, local01 wz
1d42c     00 FA 05 A6 |  if_e	mov	result1, #0
1d430     10 15 82 51 |  if_ne	sub	arg02, local02
1d434     04 14 46 50 |  if_ne	shr	arg02, #4
1d438     0A FB 01 56 |  if_ne	mov	result1, arg02
1d43c     12 15 02 F6 | 	mov	arg02, local04
1d440     06 14 06 F1 | 	add	arg02, #6
1d444     0A FB 51 FC | 	wrword	result1, arg02
1d448     10 25 0A F2 | 	cmp	local04, local02 wz
1d44c     A4 00 90 AD |  if_e	jmp	#LR__2815
1d450     12 13 02 F6 | 	mov	arg01, local04
1d454     09 27 EA FA | 	rdword	local05, arg01 wz
1d458     00 FA 05 A6 |  if_e	mov	result1, #0
1d45c     04 26 66 50 |  if_ne	shl	local05, #4
1d460     13 13 02 51 |  if_ne	add	arg01, local05
1d464     09 FB 01 56 |  if_ne	mov	result1, arg01
1d468     0F FB 09 F2 | 	cmp	result1, local01 wz
1d46c     84 00 90 5D |  if_ne	jmp	#LR__2814
1d470     12 29 E2 FA | 	rdword	local06, local04
1d474     0F 15 E2 FA | 	rdword	arg02, local01
1d478     0A 29 02 F1 | 	add	local06, arg02
1d47c     12 29 52 FC | 	wrword	local06, local04
1d480     0F 29 02 F6 | 	mov	local06, local01
1d484     02 28 06 F1 | 	add	local06, #2
1d488     14 01 58 FC | 	wrword	#0, local06
1d48c     0F 13 02 F6 | 	mov	arg01, local01
1d490     09 27 EA FA | 	rdword	local05, arg01 wz
1d494     00 FA 05 A6 |  if_e	mov	result1, #0
1d498     04 26 66 50 |  if_ne	shl	local05, #4
1d49c     13 13 02 51 |  if_ne	add	arg01, local05
1d4a0     09 FB 01 56 |  if_ne	mov	result1, arg01
1d4a4     FD 28 02 F6 | 	mov	local06, result1
1d4a8     11 29 52 F2 | 	cmps	local06, local03 wc
1d4ac     20 00 90 3D |  if_ae	jmp	#LR__2813
1d4b0     12 15 0A F6 | 	mov	arg02, local04 wz
1d4b4     00 FA 05 A6 |  if_e	mov	result1, #0
1d4b8     10 15 82 51 |  if_ne	sub	arg02, local02
1d4bc     04 14 46 50 |  if_ne	shr	arg02, #4
1d4c0     0A FB 01 56 |  if_ne	mov	result1, arg02
1d4c4     14 15 02 F6 | 	mov	arg02, local06
1d4c8     04 14 06 F1 | 	add	arg02, #4
1d4cc     0A FB 51 FC | 	wrword	result1, arg02
1d4d0                 | LR__2813
1d4d0     0F 15 02 F6 | 	mov	arg02, local01
1d4d4     06 14 06 F1 | 	add	arg02, #6
1d4d8     12 FD 01 F6 | 	mov	result2, local04
1d4dc     0A 15 E2 FA | 	rdword	arg02, arg02
1d4e0     06 FC 05 F1 | 	add	result2, #6
1d4e4     FE 14 52 FC | 	wrword	arg02, result2
1d4e8     06 1E 06 F1 | 	add	local01, #6
1d4ec     0F 01 58 FC | 	wrword	#0, local01
1d4f0     12 1F 02 F6 | 	mov	local01, local04
1d4f4                 | LR__2814
1d4f4                 | LR__2815
1d4f4     0F 13 02 F6 | 	mov	arg01, local01
1d4f8     09 27 EA FA | 	rdword	local05, arg01 wz
1d4fc     00 FA 05 A6 |  if_e	mov	result1, #0
1d500     04 26 66 50 |  if_ne	shl	local05, #4
1d504     13 13 02 51 |  if_ne	add	arg01, local05
1d508     09 FB 01 56 |  if_ne	mov	result1, arg01
1d50c     FD 14 0A F6 | 	mov	arg02, result1 wz
1d510     B8 00 90 AD |  if_e	jmp	#LR__2817
1d514     11 15 52 F2 | 	cmps	arg02, local03 wc
1d518     B0 00 90 3D |  if_ae	jmp	#LR__2817
1d51c     0A 13 02 F6 | 	mov	arg01, arg02
1d520     00 FA 05 F6 | 	mov	result1, #0
1d524     02 12 06 F1 | 	add	arg01, #2
1d528     09 13 E2 FA | 	rdword	arg01, arg01
1d52c     36 00 00 FF 
1d530     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1d534     01 FA 65 A6 |  if_e	neg	result1, #1
1d538     00 FA 0D F2 | 	cmp	result1, #0 wz
1d53c     8C 00 90 AD |  if_e	jmp	#LR__2817
1d540     0F 25 02 F6 | 	mov	local04, local01
1d544     12 29 E2 FA | 	rdword	local06, local04
1d548     0A 13 02 F6 | 	mov	arg01, arg02
1d54c     09 1F E2 FA | 	rdword	local01, arg01
1d550     0F 29 02 F1 | 	add	local06, local01
1d554     12 29 52 FC | 	wrword	local06, local04
1d558     09 29 02 F6 | 	mov	local06, arg01
1d55c     06 28 06 F1 | 	add	local06, #6
1d560     12 1F 02 F6 | 	mov	local01, local04
1d564     14 29 E2 FA | 	rdword	local06, local06
1d568     06 1E 06 F1 | 	add	local01, #6
1d56c     0F 29 52 FC | 	wrword	local06, local01
1d570     09 29 02 F6 | 	mov	local06, arg01
1d574     02 28 06 F1 | 	add	local06, #2
1d578     14 55 59 FC | 	wrword	#170, local06
1d57c     09 29 02 F6 | 	mov	local06, arg01
1d580     06 28 06 F1 | 	add	local06, #6
1d584     14 01 58 FC | 	wrword	#0, local06
1d588     09 27 EA FA | 	rdword	local05, arg01 wz
1d58c     00 FA 05 A6 |  if_e	mov	result1, #0
1d590     04 26 66 50 |  if_ne	shl	local05, #4
1d594     13 13 02 51 |  if_ne	add	arg01, local05
1d598     09 FB 01 56 |  if_ne	mov	result1, arg01
1d59c     FD 28 0A F6 | 	mov	local06, result1 wz
1d5a0     28 00 90 AD |  if_e	jmp	#LR__2816
1d5a4     11 29 52 F2 | 	cmps	local06, local03 wc
1d5a8     20 00 90 3D |  if_ae	jmp	#LR__2816
1d5ac     12 15 0A F6 | 	mov	arg02, local04 wz
1d5b0     00 FA 05 A6 |  if_e	mov	result1, #0
1d5b4     10 15 82 51 |  if_ne	sub	arg02, local02
1d5b8     04 14 46 50 |  if_ne	shr	arg02, #4
1d5bc     0A FB 01 56 |  if_ne	mov	result1, arg02
1d5c0     14 25 02 F6 | 	mov	local04, local06
1d5c4     04 24 06 F1 | 	add	local04, #4
1d5c8     12 FB 51 FC | 	wrword	result1, local04
1d5cc                 | LR__2816
1d5cc                 | LR__2817
1d5cc     14 FB 01 F6 | 	mov	result1, local06
1d5d0     A7 F0 03 F6 | 	mov	ptra, fp
1d5d4     B2 00 A0 FD | 	call	#popregs_
1d5d8                 | __system___gc_dofree_ret
1d5d8     2D 00 64 FD | 	ret
1d5dc                 | 
1d5dc                 | __system___gc_docollect
1d5dc     05 4A 05 F6 | 	mov	COUNT_, #5
1d5e0     A8 00 A0 FD | 	call	#pushregs_
1d5e4     B8 F9 BF FD | 	call	#__system___gc_ptrs
1d5e8     FE 1E 02 F6 | 	mov	local01, result2
1d5ec     FD 20 02 F6 | 	mov	local02, result1
1d5f0     10 13 02 F6 | 	mov	arg01, local02
1d5f4     09 23 EA FA | 	rdword	local03, arg01 wz
1d5f8     00 FA 05 A6 |  if_e	mov	result1, #0
1d5fc     04 22 66 50 |  if_ne	shl	local03, #4
1d600     11 13 02 51 |  if_ne	add	arg01, local03
1d604     09 FB 01 56 |  if_ne	mov	result1, arg01
1d608     FD 24 0A F6 | 	mov	local04, result1 wz
1d60c     00 FA 05 F6 | 	mov	result1, #0
1d610     01 FA 61 FD | 	cogid	result1
1d614     FD 26 02 F6 | 	mov	local05, result1
1d618     48 00 90 AD |  if_e	jmp	#LR__2822
1d61c     97 22 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
1d620                 | LR__2820
1d620     0F 25 52 F2 | 	cmps	local04, local01 wc
1d624     3C 00 90 3D |  if_ae	jmp	#LR__2822
1d628     12 15 02 F6 | 	mov	arg02, local04
1d62c     02 14 06 F1 | 	add	arg02, #2
1d630     0A 15 E2 FA | 	rdword	arg02, arg02
1d634     20 14 26 F5 | 	andn	arg02, #32
1d638     12 13 02 F6 | 	mov	arg01, local04
1d63c     02 12 06 F1 | 	add	arg01, #2
1d640     09 15 52 FC | 	wrword	arg02, arg01
1d644     12 13 02 F6 | 	mov	arg01, local04
1d648     09 23 EA FA | 	rdword	local03, arg01 wz
1d64c     00 FA 05 A6 |  if_e	mov	result1, #0
1d650     04 22 66 50 |  if_ne	shl	local03, #4
1d654     11 13 02 51 |  if_ne	add	arg01, local03
1d658     09 FB 01 56 |  if_ne	mov	result1, arg01
1d65c     FD 24 0A F6 | 	mov	local04, result1 wz
1d660     BC FF 9F 5D |  if_ne	jmp	#LR__2820
1d664                 | LR__2821
1d664                 | LR__2822
1d664     00 22 06 F6 | 	mov	local03, #0
1d668     00 12 06 F6 | 	mov	arg01, #0
1d66c     A0 BD BF FD | 	call	#__system____topofstack
1d670     FD 14 02 F6 | 	mov	arg02, result1
1d674     11 13 02 F6 | 	mov	arg01, local03
1d678     90 00 B0 FD | 	call	#__system___gc_markhub
1d67c     1C 01 B0 FD | 	call	#__system___gc_markcog
1d680     10 13 02 F6 | 	mov	arg01, local02
1d684     09 23 EA FA | 	rdword	local03, arg01 wz
1d688     00 FA 05 A6 |  if_e	mov	result1, #0
1d68c     04 22 66 50 |  if_ne	shl	local03, #4
1d690     11 13 02 51 |  if_ne	add	arg01, local03
1d694     09 FB 01 56 |  if_ne	mov	result1, arg01
1d698     FD 20 0A F6 | 	mov	local02, result1 wz
1d69c     60 00 90 AD |  if_e	jmp	#LR__2826
1d6a0                 | LR__2823
1d6a0     10 25 02 F6 | 	mov	local04, local02
1d6a4     12 13 02 F6 | 	mov	arg01, local04
1d6a8     09 23 EA FA | 	rdword	local03, arg01 wz
1d6ac     00 FA 05 A6 |  if_e	mov	result1, #0
1d6b0     04 22 66 50 |  if_ne	shl	local03, #4
1d6b4     11 13 02 51 |  if_ne	add	arg01, local03
1d6b8     09 FB 01 56 |  if_ne	mov	result1, arg01
1d6bc     FD 20 02 F6 | 	mov	local02, result1
1d6c0     12 15 02 F6 | 	mov	arg02, local04
1d6c4     02 14 06 F1 | 	add	arg02, #2
1d6c8     0A 15 E2 FA | 	rdword	arg02, arg02
1d6cc     20 14 CE F7 | 	test	arg02, #32 wz
1d6d0     10 14 CE A7 |  if_e	test	arg02, #16 wz
1d6d4     1C 00 90 5D |  if_ne	jmp	#LR__2825
1d6d8     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1d6dc     13 15 0A F2 | 	cmp	arg02, local05 wz
1d6e0     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1d6e4     0C 00 90 5D |  if_ne	jmp	#LR__2824
1d6e8     12 13 02 F6 | 	mov	arg01, local04
1d6ec     84 FC BF FD | 	call	#__system___gc_dofree
1d6f0     FD 20 02 F6 | 	mov	local02, result1
1d6f4                 | LR__2824
1d6f4                 | LR__2825
1d6f4     00 20 0E F2 | 	cmp	local02, #0 wz
1d6f8     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1d6fc     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2823
1d700                 | LR__2826
1d700     A7 F0 03 F6 | 	mov	ptra, fp
1d704     B2 00 A0 FD | 	call	#popregs_
1d708                 | __system___gc_docollect_ret
1d708     2D 00 64 FD | 	ret
1d70c                 | 
1d70c                 | __system___gc_markhub
1d70c     04 4A 05 F6 | 	mov	COUNT_, #4
1d710     A8 00 A0 FD | 	call	#pushregs_
1d714     09 1F 02 F6 | 	mov	local01, arg01
1d718     0A 21 02 F6 | 	mov	local02, arg02
1d71c     80 F8 BF FD | 	call	#__system___gc_ptrs
1d720     FD 22 02 F6 | 	mov	local03, result1
1d724     FE 24 02 F6 | 	mov	local04, result2
1d728                 | LR__2830
1d728     10 1F 52 F2 | 	cmps	local01, local02 wc
1d72c     60 00 90 3D |  if_ae	jmp	#LR__2831
1d730     0F 17 02 FB | 	rdlong	arg03, local01
1d734     04 1E 06 F1 | 	add	local01, #4
1d738     12 15 02 F6 | 	mov	arg02, local04
1d73c     11 13 02 F6 | 	mov	arg01, local03
1d740     8C FB BF FD | 	call	#__system___gc_isvalidptr
1d744     FD 16 0A F6 | 	mov	arg03, result1 wz
1d748     DC FF 9F AD |  if_e	jmp	#LR__2830
1d74c     0B 13 02 F6 | 	mov	arg01, arg03
1d750     00 FA 05 F6 | 	mov	result1, #0
1d754     02 12 06 F1 | 	add	arg01, #2
1d758     09 13 E2 FA | 	rdword	arg01, arg01
1d75c     36 00 00 FF 
1d760     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1d764     01 FA 65 A6 |  if_e	neg	result1, #1
1d768     00 FA 0D F2 | 	cmp	result1, #0 wz
1d76c     B8 FF 9F 5D |  if_ne	jmp	#LR__2830
1d770     0B FD 01 F6 | 	mov	result2, arg03
1d774     02 FC 05 F1 | 	add	result2, #2
1d778     FE FC E1 FA | 	rdword	result2, result2
1d77c     0F FC 25 F5 | 	andn	result2, #15
1d780     2E FC 45 F5 | 	or	result2, #46
1d784     02 16 06 F1 | 	add	arg03, #2
1d788     0B FD 51 FC | 	wrword	result2, arg03
1d78c     98 FF 9F FD | 	jmp	#LR__2830
1d790                 | LR__2831
1d790     A7 F0 03 F6 | 	mov	ptra, fp
1d794     B2 00 A0 FD | 	call	#popregs_
1d798                 | __system___gc_markhub_ret
1d798     2D 00 64 FD | 	ret
1d79c                 | 
1d79c                 | __system___gc_markcog
1d79c     04 4A 05 F6 | 	mov	COUNT_, #4
1d7a0     A8 00 A0 FD | 	call	#pushregs_
1d7a4     F8 F7 BF FD | 	call	#__system___gc_ptrs
1d7a8     FD 1E 02 F6 | 	mov	local01, result1
1d7ac     FE 20 02 F6 | 	mov	local02, result2
1d7b0     EF 23 06 F6 | 	mov	local03, #495
1d7b4                 | LR__2840
1d7b4                 | 	'.live	local03
1d7b4     00 22 96 F9 | 	alts	local03, #0
1d7b8     11 25 02 F6 | 	mov	local04, local03
1d7bc     0F 13 02 F6 | 	mov	arg01, local01
1d7c0     10 15 02 F6 | 	mov	arg02, local02
1d7c4     12 17 02 F6 | 	mov	arg03, local04
1d7c8     04 FB BF FD | 	call	#__system___gc_isvalidptr
1d7cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1d7d0     18 00 90 AD |  if_e	jmp	#LR__2841
1d7d4     FD 24 02 F6 | 	mov	local04, result1
1d7d8     02 24 06 F1 | 	add	local04, #2
1d7dc     12 25 E2 FA | 	rdword	local04, local04
1d7e0     20 24 46 F5 | 	or	local04, #32
1d7e4     02 FA 05 F1 | 	add	result1, #2
1d7e8     FD 24 52 FC | 	wrword	local04, result1
1d7ec                 | LR__2841
1d7ec     01 22 86 F1 | 	sub	local03, #1
1d7f0     00 22 56 F2 | 	cmps	local03, #0 wc
1d7f4     BC FF 9F 3D |  if_ae	jmp	#LR__2840
1d7f8     A7 F0 03 F6 | 	mov	ptra, fp
1d7fc     B2 00 A0 FD | 	call	#popregs_
1d800                 | __system___gc_markcog_ret
1d800     2D 00 64 FD | 	ret
1d804                 | 
1d804                 | __system__opendir
1d804     06 4A 05 F6 | 	mov	COUNT_, #6
1d808     A8 00 A0 FD | 	call	#pushregs_
1d80c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d810     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1d814     09 15 02 F6 | 	mov	arg02, arg01
1d818     0F 13 02 F6 | 	mov	arg01, local01
1d81c     00 16 06 F6 | 	mov	arg03, #0
1d820     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d824     A8 C3 BF FD | 	call	#__system____getvfsforfile
1d828     FD 20 0A F6 | 	mov	local02, result1 wz
1d82c     10 00 90 AD |  if_e	jmp	#LR__2850
1d830     28 20 06 F1 | 	add	local02, #40
1d834     10 17 0A FB | 	rdlong	arg03, local02 wz
1d838     28 20 86 F1 | 	sub	local02, #40
1d83c     14 00 90 5D |  if_ne	jmp	#LR__2851
1d840                 | LR__2850
1d840     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d844     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d848     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d84c     00 FA 05 F6 | 	mov	result1, #0
1d850     90 00 90 FD | 	jmp	#LR__2853
1d854                 | LR__2851
1d854     5C 12 06 F6 | 	mov	arg01, #92
1d858     10 14 06 F6 | 	mov	arg02, #16
1d85c     C0 F9 BF FD | 	call	#__system___gc_doalloc
1d860     FD 22 0A F6 | 	mov	local03, result1 wz
1d864     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d868     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1d86c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d870     00 FA 05 A6 |  if_e	mov	result1, #0
1d874     6C 00 90 AD |  if_e	jmp	#LR__2853
1d878     28 20 06 F1 | 	add	local02, #40
1d87c     10 25 02 FB | 	rdlong	local04, local02
1d880     12 27 02 F6 | 	mov	local05, local04
1d884     28 20 86 F1 | 	sub	local02, #40
1d888     13 26 46 F7 | 	zerox	local05, #19
1d88c     14 24 46 F0 | 	shr	local04, #20
1d890     02 24 66 F0 | 	shl	local04, #2
1d894     ED 24 02 F1 | 	add	local04, __methods__
1d898     12 25 02 FB | 	rdlong	local04, local04
1d89c     11 13 02 F6 | 	mov	arg01, local03
1d8a0     0F 15 02 F6 | 	mov	arg02, local01
1d8a4     F2 28 02 F6 | 	mov	local06, objptr
1d8a8     13 E5 01 F6 | 	mov	objptr, local05
1d8ac     2D 24 62 FD | 	call	local04
1d8b0     14 E5 01 F6 | 	mov	objptr, local06
1d8b4     FD 16 0A F6 | 	mov	arg03, result1 wz
1d8b8     20 00 90 AD |  if_e	jmp	#LR__2852
1d8bc     00 16 4E F2 | 	cmps	arg03, #0 wz
1d8c0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d8c4     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1d8c8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d8cc     11 13 02 F6 | 	mov	arg01, local03
1d8d0     58 FA BF FD | 	call	#__system___gc_free
1d8d4     00 FA 05 F6 | 	mov	result1, #0
1d8d8     08 00 90 FD | 	jmp	#LR__2853
1d8dc                 | LR__2852
1d8dc     11 21 62 FC | 	wrlong	local02, local03
1d8e0     11 FB 01 F6 | 	mov	result1, local03
1d8e4                 | LR__2853
1d8e4     A7 F0 03 F6 | 	mov	ptra, fp
1d8e8     B2 00 A0 FD | 	call	#popregs_
1d8ec                 | __system__opendir_ret
1d8ec     2D 00 64 FD | 	ret
1d8f0                 | 
1d8f0                 | __system__closedir
1d8f0     04 4A 05 F6 | 	mov	COUNT_, #4
1d8f4     A8 00 A0 FD | 	call	#pushregs_
1d8f8     09 1F 02 F6 | 	mov	local01, arg01
1d8fc     0F 13 02 FB | 	rdlong	arg01, local01
1d900     2C 12 06 F1 | 	add	arg01, #44
1d904     09 21 02 FB | 	rdlong	local02, arg01
1d908     10 23 02 F6 | 	mov	local03, local02
1d90c     13 22 46 F7 | 	zerox	local03, #19
1d910     14 20 46 F0 | 	shr	local02, #20
1d914     02 20 66 F0 | 	shl	local02, #2
1d918     ED 20 02 F1 | 	add	local02, __methods__
1d91c     10 21 02 FB | 	rdlong	local02, local02
1d920     0F 13 02 F6 | 	mov	arg01, local01
1d924     F2 24 02 F6 | 	mov	local04, objptr
1d928     11 E5 01 F6 | 	mov	objptr, local03
1d92c     2D 20 62 FD | 	call	local02
1d930     12 E5 01 F6 | 	mov	objptr, local04
1d934     FD 24 02 F6 | 	mov	local04, result1
1d938     0F 13 02 F6 | 	mov	arg01, local01
1d93c     EC F9 BF FD | 	call	#__system___gc_free
1d940     00 24 4E F2 | 	cmps	local04, #0 wz
1d944     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d948     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1d94c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d950     01 FA 65 56 |  if_ne	neg	result1, #1
1d954     00 FA 05 A6 |  if_e	mov	result1, #0
1d958     A7 F0 03 F6 | 	mov	ptra, fp
1d95c     B2 00 A0 FD | 	call	#popregs_
1d960                 | __system__closedir_ret
1d960     2D 00 64 FD | 	ret
1d964                 | 
1d964                 | __system__readdir
1d964     04 4A 05 F6 | 	mov	COUNT_, #4
1d968     A8 00 A0 FD | 	call	#pushregs_
1d96c     09 15 0A FB | 	rdlong	arg02, arg01 wz
1d970     08 12 06 F1 | 	add	arg01, #8
1d974     09 1F 02 F6 | 	mov	local01, arg01
1d978     08 12 86 F1 | 	sub	arg01, #8
1d97c     00 FA 05 A6 |  if_e	mov	result1, #0
1d980     5C 00 90 AD |  if_e	jmp	#LR__2861
1d984     30 14 06 F1 | 	add	arg02, #48
1d988     0A 21 02 FB | 	rdlong	local02, arg02
1d98c     10 23 02 F6 | 	mov	local03, local02
1d990     13 22 46 F7 | 	zerox	local03, #19
1d994     14 20 46 F0 | 	shr	local02, #20
1d998     02 20 66 F0 | 	shl	local02, #2
1d99c     ED 20 02 F1 | 	add	local02, __methods__
1d9a0     10 21 02 FB | 	rdlong	local02, local02
1d9a4     0F 15 02 F6 | 	mov	arg02, local01
1d9a8     F2 24 02 F6 | 	mov	local04, objptr
1d9ac     11 E5 01 F6 | 	mov	objptr, local03
1d9b0     2D 20 62 FD | 	call	local02
1d9b4     12 E5 01 F6 | 	mov	objptr, local04
1d9b8     00 FA 4D F2 | 	cmps	result1, #0 wz
1d9bc     1C 00 90 AD |  if_e	jmp	#LR__2860
1d9c0     01 FA 55 F2 | 	cmps	result1, #1 wc
1d9c4     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1d9c8     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d9cc     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1d9d0     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d9d4     00 FA 05 F6 | 	mov	result1, #0
1d9d8     04 00 90 FD | 	jmp	#LR__2861
1d9dc                 | LR__2860
1d9dc     0F FB 01 F6 | 	mov	result1, local01
1d9e0                 | LR__2861
1d9e0     A7 F0 03 F6 | 	mov	ptra, fp
1d9e4     B2 00 A0 FD | 	call	#popregs_
1d9e8                 | __system__readdir_ret
1d9e8     2D 00 64 FD | 	ret
1d9ec                 | 
1d9ec                 | __system___openraw
1d9ec     15 4A 05 F6 | 	mov	COUNT_, #21
1d9f0     A8 00 A0 FD | 	call	#pushregs_
1d9f4     09 1F 02 F6 | 	mov	local01, arg01
1d9f8     0A 21 02 F6 | 	mov	local02, arg02
1d9fc     0B 23 02 F6 | 	mov	local03, arg03
1da00     0C 25 02 F6 | 	mov	local04, arg04
1da04     04 26 06 F6 | 	mov	local05, #4
1da08     0F 29 02 F6 | 	mov	local06, local01
1da0c     00 2A 06 F6 | 	mov	local07, #0
1da10     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1da14     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1da18     16 13 02 F6 | 	mov	arg01, local08
1da1c     10 15 02 F6 | 	mov	arg02, local02
1da20     00 16 06 F6 | 	mov	arg03, #0
1da24     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1da28     A4 C1 BF FD | 	call	#__system____getvfsforfile
1da2c     FD 2E 0A F6 | 	mov	local09, result1 wz
1da30     10 00 90 AD |  if_e	jmp	#LR__2870
1da34     20 2E 06 F1 | 	add	local09, #32
1da38     17 FB 09 FB | 	rdlong	result1, local09 wz
1da3c     20 2E 86 F1 | 	sub	local09, #32
1da40     14 00 90 5D |  if_ne	jmp	#LR__2871
1da44                 | LR__2870
1da44     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1da48     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1da4c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1da50     01 FA 65 F6 | 	neg	result1, #1
1da54     8C 02 90 FD | 	jmp	#LR__2884
1da58                 | LR__2871
1da58     14 13 02 F6 | 	mov	arg01, local06
1da5c     00 14 06 F6 | 	mov	arg02, #0
1da60     34 16 06 F6 | 	mov	arg03, #52
1da64     09 31 02 F6 | 	mov	local10, arg01
1da68     98 00 A0 FD | 	call	#\builtin_bytefill_
1da6c     20 2E 06 F1 | 	add	local09, #32
1da70     17 33 02 FB | 	rdlong	local11, local09
1da74     19 35 02 F6 | 	mov	local12, local11
1da78     19 37 02 F6 | 	mov	local13, local11
1da7c     20 2E 86 F1 | 	sub	local09, #32
1da80     1B 39 02 F6 | 	mov	local14, local13
1da84     13 34 46 F7 | 	zerox	local12, #19
1da88     14 38 46 F0 | 	shr	local14, #20
1da8c     02 38 66 F0 | 	shl	local14, #2
1da90     ED 38 02 F1 | 	add	local14, __methods__
1da94     1C 39 02 FB | 	rdlong	local14, local14
1da98     14 3B 02 F6 | 	mov	local15, local06
1da9c     16 3D 02 F6 | 	mov	local16, local08
1daa0     11 3F 02 F6 | 	mov	local17, local03
1daa4     1D 13 02 F6 | 	mov	arg01, local15
1daa8     1E 15 02 F6 | 	mov	arg02, local16
1daac     1F 17 02 F6 | 	mov	arg03, local17
1dab0     F2 40 02 F6 | 	mov	local18, objptr
1dab4     1A E5 01 F6 | 	mov	objptr, local12
1dab8     2D 38 62 FD | 	call	local14
1dabc     20 E5 01 F6 | 	mov	objptr, local18
1dac0     FD 42 0A F6 | 	mov	local19, result1 wz
1dac4     04 22 CE 57 |  if_ne	test	local03, #4 wz
1dac8     58 00 90 AD |  if_e	jmp	#LR__2872
1dacc     24 2E 06 F1 | 	add	local09, #36
1dad0     17 33 02 FB | 	rdlong	local11, local09
1dad4     19 35 02 F6 | 	mov	local12, local11
1dad8     19 37 02 F6 | 	mov	local13, local11
1dadc     24 2E 86 F1 | 	sub	local09, #36
1dae0     1B 39 02 F6 | 	mov	local14, local13
1dae4     13 34 46 F7 | 	zerox	local12, #19
1dae8     14 38 46 F0 | 	shr	local14, #20
1daec     02 38 66 F0 | 	shl	local14, #2
1daf0     ED 38 02 F1 | 	add	local14, __methods__
1daf4     1C 39 02 FB | 	rdlong	local14, local14
1daf8     14 3B 02 F6 | 	mov	local15, local06
1dafc     16 3D 02 F6 | 	mov	local16, local08
1db00     12 3F 02 F6 | 	mov	local17, local04
1db04     1D 13 02 F6 | 	mov	arg01, local15
1db08     1E 15 02 F6 | 	mov	arg02, local16
1db0c     1F 17 02 F6 | 	mov	arg03, local17
1db10     F2 40 02 F6 | 	mov	local18, objptr
1db14     1A E5 01 F6 | 	mov	objptr, local12
1db18     2D 38 62 FD | 	call	local14
1db1c     20 E5 01 F6 | 	mov	objptr, local18
1db20     FD 42 02 F6 | 	mov	local19, result1
1db24                 | LR__2872
1db24     00 42 0E F2 | 	cmp	local19, #0 wz
1db28     8C 01 90 5D |  if_ne	jmp	#LR__2882
1db2c     11 45 02 F6 | 	mov	local20, local03
1db30     03 44 0E F5 | 	and	local20, #3 wz
1db34     02 26 46 55 |  if_ne	or	local05, #2
1db38     01 44 0E F2 | 	cmp	local20, #1 wz
1db3c     01 26 46 55 |  if_ne	or	local05, #1
1db40     20 22 CE F7 | 	test	local03, #32 wz
1db44     C0 26 46 55 |  if_ne	or	local05, #192
1db48     08 28 06 F1 | 	add	local06, #8
1db4c     14 27 62 FC | 	wrlong	local05, local06
1db50     0C 28 06 F1 | 	add	local06, #12
1db54     14 47 0A FB | 	rdlong	local21, local06 wz
1db58     14 28 86 F1 | 	sub	local06, #20
1db5c     18 00 90 5D |  if_ne	jmp	#LR__2873
1db60     04 2E 06 F1 | 	add	local09, #4
1db64     17 47 02 FB | 	rdlong	local21, local09
1db68     04 2E 86 F1 | 	sub	local09, #4
1db6c     14 28 06 F1 | 	add	local06, #20
1db70     14 47 62 FC | 	wrlong	local21, local06
1db74     14 28 86 F1 | 	sub	local06, #20
1db78                 | LR__2873
1db78     18 28 06 F1 | 	add	local06, #24
1db7c     14 47 0A FB | 	rdlong	local21, local06 wz
1db80     18 28 86 F1 | 	sub	local06, #24
1db84     18 00 90 5D |  if_ne	jmp	#LR__2874
1db88     08 2E 06 F1 | 	add	local09, #8
1db8c     17 47 02 FB | 	rdlong	local21, local09
1db90     08 2E 86 F1 | 	sub	local09, #8
1db94     18 28 06 F1 | 	add	local06, #24
1db98     14 47 62 FC | 	wrlong	local21, local06
1db9c     18 28 86 F1 | 	sub	local06, #24
1dba0                 | LR__2874
1dba0     24 28 06 F1 | 	add	local06, #36
1dba4     14 47 0A FB | 	rdlong	local21, local06 wz
1dba8     24 28 86 F1 | 	sub	local06, #36
1dbac     17 47 02 AB |  if_e	rdlong	local21, local09
1dbb0     24 28 06 A1 |  if_e	add	local06, #36
1dbb4     14 47 62 AC |  if_e	wrlong	local21, local06
1dbb8     24 28 86 A1 |  if_e	sub	local06, #36
1dbbc     28 28 06 F1 | 	add	local06, #40
1dbc0     14 47 0A FB | 	rdlong	local21, local06 wz
1dbc4     28 28 86 F1 | 	sub	local06, #40
1dbc8     18 00 90 5D |  if_ne	jmp	#LR__2875
1dbcc     10 2E 06 F1 | 	add	local09, #16
1dbd0     17 47 02 FB | 	rdlong	local21, local09
1dbd4     10 2E 86 F1 | 	sub	local09, #16
1dbd8     28 28 06 F1 | 	add	local06, #40
1dbdc     14 47 62 FC | 	wrlong	local21, local06
1dbe0     28 28 86 F1 | 	sub	local06, #40
1dbe4                 | LR__2875
1dbe4     30 28 06 F1 | 	add	local06, #48
1dbe8     14 47 0A FB | 	rdlong	local21, local06 wz
1dbec     30 28 86 F1 | 	sub	local06, #48
1dbf0     18 00 90 5D |  if_ne	jmp	#LR__2876
1dbf4     0C 2E 06 F1 | 	add	local09, #12
1dbf8     17 47 02 FB | 	rdlong	local21, local09
1dbfc     0C 2E 86 F1 | 	sub	local09, #12
1dc00     30 28 06 F1 | 	add	local06, #48
1dc04     14 47 62 FC | 	wrlong	local21, local06
1dc08     30 28 86 F1 | 	sub	local06, #48
1dc0c                 | LR__2876
1dc0c     1C 28 06 F1 | 	add	local06, #28
1dc10     14 47 0A FB | 	rdlong	local21, local06 wz
1dc14     1C 28 86 F1 | 	sub	local06, #28
1dc18     1C 00 90 5D |  if_ne	jmp	#LR__2877
1dc1c     01 2A 06 F6 | 	mov	local07, #1
1dc20     F2 12 02 F6 | 	mov	arg01, objptr
1dc24     00 68 03 FF 
1dc28     00 12 46 F5 | 	or	arg01, ##114294784
1dc2c     1C 28 06 F1 | 	add	local06, #28
1dc30     14 13 62 FC | 	wrlong	arg01, local06
1dc34     1C 28 86 F1 | 	sub	local06, #28
1dc38                 | LR__2877
1dc38     20 28 06 F1 | 	add	local06, #32
1dc3c     14 47 0A FB | 	rdlong	local21, local06 wz
1dc40     20 28 86 F1 | 	sub	local06, #32
1dc44     1C 00 90 5D |  if_ne	jmp	#LR__2878
1dc48     01 2A 06 F6 | 	mov	local07, #1
1dc4c     F2 12 02 F6 | 	mov	arg01, objptr
1dc50     00 70 03 FF 
1dc54     00 12 46 F5 | 	or	arg01, ##115343360
1dc58     20 28 06 F1 | 	add	local06, #32
1dc5c     14 13 62 FC | 	wrlong	arg01, local06
1dc60     20 28 86 F1 | 	sub	local06, #32
1dc64                 | LR__2878
1dc64     2C 28 06 F1 | 	add	local06, #44
1dc68     14 47 0A FB | 	rdlong	local21, local06 wz
1dc6c     2C 28 86 F1 | 	sub	local06, #44
1dc70     44 00 90 5D |  if_ne	jmp	#LR__2881
1dc74     14 2E 06 F1 | 	add	local09, #20
1dc78     17 47 0A FB | 	rdlong	local21, local09 wz
1dc7c     14 2E 86 F1 | 	sub	local09, #20
1dc80     18 00 90 AD |  if_e	jmp	#LR__2879
1dc84     14 2E 06 F1 | 	add	local09, #20
1dc88     17 47 02 FB | 	rdlong	local21, local09
1dc8c     2C 28 06 F1 | 	add	local06, #44
1dc90     14 47 62 FC | 	wrlong	local21, local06
1dc94     2C 28 86 F1 | 	sub	local06, #44
1dc98     1C 00 90 FD | 	jmp	#LR__2880
1dc9c                 | LR__2879
1dc9c     01 2A 06 F6 | 	mov	local07, #1
1dca0     F2 12 02 F6 | 	mov	arg01, objptr
1dca4     00 78 03 FF 
1dca8     00 12 46 F5 | 	or	arg01, ##116391936
1dcac     2C 28 06 F1 | 	add	local06, #44
1dcb0     14 13 62 FC | 	wrlong	arg01, local06
1dcb4     2C 28 86 F1 | 	sub	local06, #44
1dcb8                 | LR__2880
1dcb8                 | LR__2881
1dcb8                 | LR__2882
1dcb8     00 2A 0E F2 | 	cmp	local07, #0 wz
1dcbc     14 13 02 56 |  if_ne	mov	arg01, local06
1dcc0     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1dcc4     00 42 0E F2 | 	cmp	local19, #0 wz
1dcc8     00 12 06 A6 |  if_e	mov	arg01, #0
1dccc     10 00 90 5D |  if_ne	jmp	#LR__2883
1dcd0     00 12 4E F2 | 	cmps	arg01, #0 wz
1dcd4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dcd8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1dcdc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dce0                 | LR__2883
1dce0     21 FB 01 F6 | 	mov	result1, local19
1dce4                 | LR__2884
1dce4     A7 F0 03 F6 | 	mov	ptra, fp
1dce8     B2 00 A0 FD | 	call	#popregs_
1dcec                 | __system___openraw_ret
1dcec     2D 00 64 FD | 	ret
1dcf0                 | 
1dcf0                 | __system___closeraw
1dcf0     05 4A 05 F6 | 	mov	COUNT_, #5
1dcf4     A8 00 A0 FD | 	call	#pushregs_
1dcf8     09 1F 02 F6 | 	mov	local01, arg01
1dcfc     00 20 06 F6 | 	mov	local02, #0
1dd00     08 1E 06 F1 | 	add	local01, #8
1dd04     0F FB 09 FB | 	rdlong	result1, local01 wz
1dd08     08 1E 86 F1 | 	sub	local01, #8
1dd0c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dd10     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1dd14     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1dd18     01 FA 65 A6 |  if_e	neg	result1, #1
1dd1c     A8 00 90 AD |  if_e	jmp	#LR__2892
1dd20     2C 1E 06 F1 | 	add	local01, #44
1dd24     0F FB 09 FB | 	rdlong	result1, local01 wz
1dd28     2C 1E 86 F1 | 	sub	local01, #44
1dd2c     38 00 90 AD |  if_e	jmp	#LR__2890
1dd30     2C 1E 06 F1 | 	add	local01, #44
1dd34     0F 23 02 FB | 	rdlong	local03, local01
1dd38     11 25 02 F6 | 	mov	local04, local03
1dd3c     2C 1E 86 F1 | 	sub	local01, #44
1dd40     13 24 46 F7 | 	zerox	local04, #19
1dd44     14 22 46 F0 | 	shr	local03, #20
1dd48     02 22 66 F0 | 	shl	local03, #2
1dd4c     ED 22 02 F1 | 	add	local03, __methods__
1dd50     11 23 02 FB | 	rdlong	local03, local03
1dd54     0F 13 02 F6 | 	mov	arg01, local01
1dd58     F2 26 02 F6 | 	mov	local05, objptr
1dd5c     12 E5 01 F6 | 	mov	objptr, local04
1dd60     2D 22 62 FD | 	call	local03
1dd64     13 E5 01 F6 | 	mov	objptr, local05
1dd68                 | LR__2890
1dd68     24 1E 06 F1 | 	add	local01, #36
1dd6c     0F 27 0A FB | 	rdlong	local05, local01 wz
1dd70     24 1E 86 F1 | 	sub	local01, #36
1dd74     3C 00 90 AD |  if_e	jmp	#LR__2891
1dd78     24 1E 06 F1 | 	add	local01, #36
1dd7c     0F 23 02 FB | 	rdlong	local03, local01
1dd80     11 25 02 F6 | 	mov	local04, local03
1dd84     24 1E 86 F1 | 	sub	local01, #36
1dd88     13 24 46 F7 | 	zerox	local04, #19
1dd8c     14 22 46 F0 | 	shr	local03, #20
1dd90     02 22 66 F0 | 	shl	local03, #2
1dd94     ED 22 02 F1 | 	add	local03, __methods__
1dd98     11 23 02 FB | 	rdlong	local03, local03
1dd9c     0F 13 02 F6 | 	mov	arg01, local01
1dda0     F2 26 02 F6 | 	mov	local05, objptr
1dda4     12 E5 01 F6 | 	mov	objptr, local04
1dda8     2D 22 62 FD | 	call	local03
1ddac     13 E5 01 F6 | 	mov	objptr, local05
1ddb0     FD 20 02 F6 | 	mov	local02, result1
1ddb4                 | LR__2891
1ddb4     0F 13 02 F6 | 	mov	arg01, local01
1ddb8     00 14 06 F6 | 	mov	arg02, #0
1ddbc     34 16 06 F6 | 	mov	arg03, #52
1ddc0     98 00 A0 FD | 	call	#\builtin_bytefill_
1ddc4     10 FB 01 F6 | 	mov	result1, local02
1ddc8                 | LR__2892
1ddc8     A7 F0 03 F6 | 	mov	ptra, fp
1ddcc     B2 00 A0 FD | 	call	#popregs_
1ddd0                 | __system___closeraw_ret
1ddd0     2D 00 64 FD | 	ret
1ddd4                 | 
1ddd4                 | __system___vfs_open_sdcardx
1ddd4     0B 4A 05 F6 | 	mov	COUNT_, #11
1ddd8     A8 00 A0 FD | 	call	#pushregs_
1dddc     09 23 02 F6 | 	mov	local03, arg01
1dde0     0A 25 02 F6 | 	mov	local04, arg02
1dde4     0B 27 02 F6 | 	mov	local05, arg03
1dde8     0C 29 02 F6 | 	mov	local06, arg04
1ddec     01 00 00 FF 
1ddf0     24 12 06 F6 | 	mov	arg01, ##548
1ddf4     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1ddf8     FD 2A 02 F6 | 	mov	local07, result1
1ddfc     01 00 00 FF 
1de00     34 12 06 F6 | 	mov	arg01, ##564
1de04     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1de08     FD 2C 02 F6 | 	mov	local08, result1
1de0c     11 19 02 F6 | 	mov	arg04, local03
1de10     1F 18 C6 F0 | 	sar	arg04, #31
1de14     11 17 02 F6 | 	mov	arg03, local03
1de18     01 12 06 F6 | 	mov	arg01, #1
1de1c     00 14 06 F6 | 	mov	arg02, #0
1de20     48 DC BF FD | 	call	#__system___int64_shl
1de24     FD 1E 02 F6 | 	mov	local01, result1
1de28     FE 2E 02 F6 | 	mov	local09, result2
1de2c     12 19 02 F6 | 	mov	arg04, local04
1de30     1F 18 C6 F0 | 	sar	arg04, #31
1de34     12 17 02 F6 | 	mov	arg03, local04
1de38     01 12 06 F6 | 	mov	arg01, #1
1de3c     00 14 06 F6 | 	mov	arg02, #0
1de40     28 DC BF FD | 	call	#__system___int64_shl
1de44     FD 1E 42 F5 | 	or	local01, result1
1de48     FE 2E 42 F5 | 	or	local09, result2
1de4c     13 19 02 F6 | 	mov	arg04, local05
1de50     1F 18 C6 F0 | 	sar	arg04, #31
1de54     13 17 02 F6 | 	mov	arg03, local05
1de58     01 12 06 F6 | 	mov	arg01, #1
1de5c     00 14 06 F6 | 	mov	arg02, #0
1de60     08 DC BF FD | 	call	#__system___int64_shl
1de64     FD 1E 42 F5 | 	or	local01, result1
1de68     FE 2E 42 F5 | 	or	local09, result2
1de6c     14 19 02 F6 | 	mov	arg04, local06
1de70     1F 18 C6 F0 | 	sar	arg04, #31
1de74     14 17 02 F6 | 	mov	arg03, local06
1de78     01 12 06 F6 | 	mov	arg01, #1
1de7c     00 14 06 F6 | 	mov	arg02, #0
1de80     E8 DB BF FD | 	call	#__system___int64_shl
1de84     17 15 02 F6 | 	mov	arg02, local09
1de88     FD 1E 42 F5 | 	or	local01, result1
1de8c     0A FD 41 F5 | 	or	result2, arg02
1de90     FE 20 02 F6 | 	mov	local02, result2
1de94     0F 13 02 F6 | 	mov	arg01, local01
1de98     10 15 02 F6 | 	mov	arg02, local02
1de9c     04 DC BF FD | 	call	#__system___usepins
1dea0     00 FA 0D F2 | 	cmp	result1, #0 wz
1dea4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dea8     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1deac     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1deb0     00 FA 05 A6 |  if_e	mov	result1, #0
1deb4     B4 00 90 AD |  if_e	jmp	#LR__2902
1deb8     0F 31 02 F6 | 	mov	local10, local01
1debc     10 2F 02 F6 | 	mov	local09, local02
1dec0     01 00 00 FF 
1dec4     08 2A 06 F1 | 	add	local07, ##520
1dec8     15 31 62 FC | 	wrlong	local10, local07
1decc     04 2A 06 F1 | 	add	local07, #4
1ded0     15 2F 62 FC | 	wrlong	local09, local07
1ded4     01 00 00 FF 
1ded8     0C 2A 86 F1 | 	sub	local07, ##524
1dedc     14 1B 02 F6 | 	mov	arg05, local06
1dee0     00 12 06 F6 | 	mov	arg01, #0
1dee4     11 15 02 F6 | 	mov	arg02, local03
1dee8     12 17 02 F6 | 	mov	arg03, local04
1deec     13 19 02 F6 | 	mov	arg04, local05
1def0     F2 30 02 F6 | 	mov	local10, objptr
1def4     15 E5 01 F6 | 	mov	objptr, local07
1def8     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1defc     18 E5 01 F6 | 	mov	objptr, local10
1df00     FD 32 0A F6 | 	mov	local11, result1 wz
1df04     24 00 90 5D |  if_ne	jmp	#LR__2900
1df08     44 01 00 FF 
1df0c     AA 15 06 F6 | 	mov	arg02, ##@LR__4297
1df10     16 13 02 F6 | 	mov	arg01, local08
1df14     00 16 06 F6 | 	mov	arg03, #0
1df18     F2 32 02 F6 | 	mov	local11, objptr
1df1c     15 E5 01 F6 | 	mov	objptr, local07
1df20     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1df24     19 E5 01 F6 | 	mov	objptr, local11
1df28     FD 32 02 F6 | 	mov	local11, result1
1df2c                 | LR__2900
1df2c     00 32 0E F2 | 	cmp	local11, #0 wz
1df30     24 00 90 AD |  if_e	jmp	#LR__2901
1df34     0F 13 02 F6 | 	mov	arg01, local01
1df38     10 15 02 F6 | 	mov	arg02, local02
1df3c     B8 DB BF FD | 	call	#__system___freepins
1df40     19 13 6A F6 | 	neg	arg01, local11 wz
1df44     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1df48     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1df4c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1df50     00 FA 05 F6 | 	mov	result1, #0
1df54     14 00 90 FD | 	jmp	#LR__2902
1df58                 | LR__2901
1df58     15 13 02 F6 | 	mov	arg01, local07
1df5c     F2 32 02 F6 | 	mov	local11, objptr
1df60     15 E5 01 F6 | 	mov	objptr, local07
1df64     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1df68     19 E5 01 F6 | 	mov	objptr, local11
1df6c                 | LR__2902
1df6c     A7 F0 03 F6 | 	mov	ptra, fp
1df70     B2 00 A0 FD | 	call	#popregs_
1df74                 | __system___vfs_open_sdcardx_ret
1df74     2D 00 64 FD | 	ret
1df78                 | 
1df78                 | __system____default_getc
1df78     03 4A 05 F6 | 	mov	COUNT_, #3
1df7c     A8 00 A0 FD | 	call	#pushregs_
1df80     09 1F 02 F6 | 	mov	local01, arg01
1df84     0F 21 02 FB | 	rdlong	local02, local01
1df88     08 20 06 F1 | 	add	local02, #8
1df8c     10 23 02 FB | 	rdlong	local03, local02
1df90     02 22 CE F7 | 	test	local03, #2 wz
1df94     0F 13 02 56 |  if_ne	mov	arg01, local01
1df98     00 01 B0 5D |  if_ne	call	#__system____default_flush
1df9c     10 23 02 FB | 	rdlong	local03, local02
1dfa0     01 22 46 F5 | 	or	local03, #1
1dfa4     10 23 62 FC | 	wrlong	local03, local02
1dfa8     08 20 86 F1 | 	sub	local02, #8
1dfac     10 23 0A FB | 	rdlong	local03, local02 wz
1dfb0     0C 00 90 5D |  if_ne	jmp	#LR__2910
1dfb4     0F 13 02 F6 | 	mov	arg01, local01
1dfb8     64 16 B0 FD | 	call	#__system____default_filbuf
1dfbc     FD 22 02 F6 | 	mov	local03, result1
1dfc0                 | LR__2910
1dfc0     01 22 56 F2 | 	cmps	local03, #1 wc
1dfc4     01 FA 65 C6 |  if_b	neg	result1, #1
1dfc8     1C 00 90 CD |  if_b	jmp	#LR__2911
1dfcc     01 22 86 F1 | 	sub	local03, #1
1dfd0     10 23 62 FC | 	wrlong	local03, local02
1dfd4     04 20 06 F1 | 	add	local02, #4
1dfd8     10 23 02 FB | 	rdlong	local03, local02
1dfdc     11 FB C1 FA | 	rdbyte	result1, local03
1dfe0     01 22 06 F1 | 	add	local03, #1
1dfe4     10 23 62 FC | 	wrlong	local03, local02
1dfe8                 | LR__2911
1dfe8     A7 F0 03 F6 | 	mov	ptra, fp
1dfec     B2 00 A0 FD | 	call	#popregs_
1dff0                 | __system____default_getc_ret
1dff0     2D 00 64 FD | 	ret
1dff4                 | 
1dff4                 | __system____default_putc
1dff4     06 4A 05 F6 | 	mov	COUNT_, #6
1dff8     A8 00 A0 FD | 	call	#pushregs_
1dffc     09 1F 02 F6 | 	mov	local01, arg01
1e000     0A 21 02 F6 | 	mov	local02, arg02
1e004     10 23 02 FB | 	rdlong	local03, local02
1e008     08 22 06 F1 | 	add	local03, #8
1e00c     11 FB 01 FB | 	rdlong	result1, local03
1e010     01 FA CD F7 | 	test	result1, #1 wz
1e014     10 13 02 56 |  if_ne	mov	arg01, local02
1e018     80 00 B0 5D |  if_ne	call	#__system____default_flush
1e01c     11 25 02 FB | 	rdlong	local04, local03
1e020     02 24 46 F5 | 	or	local04, #2
1e024     11 25 62 FC | 	wrlong	local04, local03
1e028     08 22 86 F1 | 	sub	local03, #8
1e02c     11 27 02 FB | 	rdlong	local05, local03
1e030     10 22 06 F1 | 	add	local03, #16
1e034     11 15 02 FB | 	rdlong	arg02, local03
1e038     10 22 86 F1 | 	sub	local03, #16
1e03c     13 FB 01 F6 | 	mov	result1, local05
1e040     0A FB 01 F1 | 	add	result1, arg02
1e044     FD 1E 42 FC | 	wrbyte	local01, result1
1e048     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1e04c     01 26 06 F1 | 	add	local05, #1
1e050     11 27 62 FC | 	wrlong	local05, local03
1e054     06 20 06 F1 | 	add	local02, #6
1e058     10 29 EA FA | 	rdword	local06, local02 wz
1e05c     06 20 86 F1 | 	sub	local02, #6
1e060     0C 22 06 51 |  if_ne	add	local03, #12
1e064     11 25 02 5B |  if_ne	rdlong	local04, local03
1e068     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1e06c     0C 00 90 AD |  if_e	jmp	#LR__2920
1e070     0A 1E 0E F2 | 	cmp	local01, #10 wz
1e074     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1e078     10 00 90 5D |  if_ne	jmp	#LR__2921
1e07c                 | LR__2920
1e07c     10 13 02 F6 | 	mov	arg01, local02
1e080     18 00 B0 FD | 	call	#__system____default_flush
1e084     00 FA 0D F2 | 	cmp	result1, #0 wz
1e088     01 1E 66 56 |  if_ne	neg	local01, #1
1e08c                 | LR__2921
1e08c     0F FB 01 F6 | 	mov	result1, local01
1e090     A7 F0 03 F6 | 	mov	ptra, fp
1e094     B2 00 A0 FD | 	call	#popregs_
1e098                 | __system____default_putc_ret
1e098     2D 00 64 FD | 	ret
1e09c                 | 
1e09c                 | __system____default_flush
1e09c     06 4A 05 F6 | 	mov	COUNT_, #6
1e0a0     A8 00 A0 FD | 	call	#pushregs_
1e0a4     09 1F 02 F6 | 	mov	local01, arg01
1e0a8     0F 21 02 FB | 	rdlong	local02, local01
1e0ac     10 23 02 FB | 	rdlong	local03, local02
1e0b0     08 20 06 F1 | 	add	local02, #8
1e0b4     10 FB 01 FB | 	rdlong	result1, local02
1e0b8     08 20 86 F1 | 	sub	local02, #8
1e0bc     02 FA CD F7 | 	test	result1, #2 wz
1e0c0     D0 00 90 AD |  if_e	jmp	#LR__2932
1e0c4     01 22 56 F2 | 	cmps	local03, #1 wc
1e0c8     20 01 90 CD |  if_b	jmp	#LR__2934
1e0cc     08 1E 06 F1 | 	add	local01, #8
1e0d0     0F FB 01 FB | 	rdlong	result1, local01
1e0d4     08 1E 86 F1 | 	sub	local01, #8
1e0d8     40 FA CD F7 | 	test	result1, #64 wz
1e0dc     68 00 90 AD |  if_e	jmp	#LR__2931
1e0e0     08 1E 06 F1 | 	add	local01, #8
1e0e4     0F 17 02 FB | 	rdlong	arg03, local01
1e0e8     08 1E 86 F1 | 	sub	local01, #8
1e0ec     80 16 CE F7 | 	test	arg03, #128 wz
1e0f0     54 00 90 AD |  if_e	jmp	#LR__2930
1e0f4     30 1E 06 F1 | 	add	local01, #48
1e0f8     0F 25 02 FB | 	rdlong	local04, local01
1e0fc     12 27 02 F6 | 	mov	local05, local04
1e100     30 1E 86 F1 | 	sub	local01, #48
1e104     13 26 46 F7 | 	zerox	local05, #19
1e108     14 24 46 F0 | 	shr	local04, #20
1e10c     02 24 66 F0 | 	shl	local04, #2
1e110     ED 24 02 F1 | 	add	local04, __methods__
1e114     12 25 02 FB | 	rdlong	local04, local04
1e118     0F 13 02 F6 | 	mov	arg01, local01
1e11c     00 14 06 F6 | 	mov	arg02, #0
1e120     02 16 06 F6 | 	mov	arg03, #2
1e124     F2 28 02 F6 | 	mov	local06, objptr
1e128     13 E5 01 F6 | 	mov	objptr, local05
1e12c     2D 24 62 FD | 	call	local04
1e130     14 E5 01 F6 | 	mov	objptr, local06
1e134     08 1E 06 F1 | 	add	local01, #8
1e138     0F 29 02 FB | 	rdlong	local06, local01
1e13c     80 28 26 F5 | 	andn	local06, #128
1e140     0F 29 62 FC | 	wrlong	local06, local01
1e144     08 1E 86 F1 | 	sub	local01, #8
1e148                 | LR__2930
1e148                 | LR__2931
1e148     18 1E 06 F1 | 	add	local01, #24
1e14c     0F 25 02 FB | 	rdlong	local04, local01
1e150     12 27 02 F6 | 	mov	local05, local04
1e154     18 1E 86 F1 | 	sub	local01, #24
1e158     13 26 46 F7 | 	zerox	local05, #19
1e15c     14 24 46 F0 | 	shr	local04, #20
1e160     02 24 66 F0 | 	shl	local04, #2
1e164     ED 24 02 F1 | 	add	local04, __methods__
1e168     12 25 02 FB | 	rdlong	local04, local04
1e16c     10 20 06 F1 | 	add	local02, #16
1e170     10 15 02 FB | 	rdlong	arg02, local02
1e174     10 20 86 F1 | 	sub	local02, #16
1e178     0F 13 02 F6 | 	mov	arg01, local01
1e17c     11 17 02 F6 | 	mov	arg03, local03
1e180     F2 28 02 F6 | 	mov	local06, objptr
1e184     13 E5 01 F6 | 	mov	objptr, local05
1e188     2D 24 62 FD | 	call	local04
1e18c     14 E5 01 F6 | 	mov	objptr, local06
1e190     58 00 90 FD | 	jmp	#LR__2934
1e194                 | LR__2932
1e194     08 20 06 F1 | 	add	local02, #8
1e198     10 29 02 FB | 	rdlong	local06, local02
1e19c     08 20 86 F1 | 	sub	local02, #8
1e1a0     01 28 CE F7 | 	test	local06, #1 wz
1e1a4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1e1a8     40 00 90 AD |  if_e	jmp	#LR__2933
1e1ac     30 1E 06 F1 | 	add	local01, #48
1e1b0     0F 25 02 FB | 	rdlong	local04, local01
1e1b4     12 27 02 F6 | 	mov	local05, local04
1e1b8     30 1E 86 F1 | 	sub	local01, #48
1e1bc     13 26 46 F7 | 	zerox	local05, #19
1e1c0     14 24 46 F0 | 	shr	local04, #20
1e1c4     02 24 66 F0 | 	shl	local04, #2
1e1c8     ED 24 02 F1 | 	add	local04, __methods__
1e1cc     12 25 02 FB | 	rdlong	local04, local04
1e1d0     0F 13 02 F6 | 	mov	arg01, local01
1e1d4     11 15 62 F6 | 	neg	arg02, local03
1e1d8     01 16 06 F6 | 	mov	arg03, #1
1e1dc     F2 28 02 F6 | 	mov	local06, objptr
1e1e0     13 E5 01 F6 | 	mov	objptr, local05
1e1e4     2D 24 62 FD | 	call	local04
1e1e8     14 E5 01 F6 | 	mov	objptr, local06
1e1ec                 | LR__2933
1e1ec                 | LR__2934
1e1ec     10 01 68 FC | 	wrlong	#0, local02
1e1f0     04 20 06 F1 | 	add	local02, #4
1e1f4     10 01 68 FC | 	wrlong	#0, local02
1e1f8     04 20 06 F1 | 	add	local02, #4
1e1fc     10 01 68 FC | 	wrlong	#0, local02
1e200     00 FA 05 F6 | 	mov	result1, #0
1e204     A7 F0 03 F6 | 	mov	ptra, fp
1e208     B2 00 A0 FD | 	call	#popregs_
1e20c                 | __system____default_flush_ret
1e20c     2D 00 64 FD | 	ret
1e210                 | 
1e210                 | __system____default_buffer_init
1e210     02 4A 05 F6 | 	mov	COUNT_, #2
1e214     A8 00 A0 FD | 	call	#pushregs_
1e218     09 1F 02 F6 | 	mov	local01, arg01
1e21c     0F 21 02 FB | 	rdlong	local02, local01
1e220     0F 13 02 F6 | 	mov	arg01, local01
1e224     F8 02 B0 FD | 	call	#__system___isatty
1e228     00 FA 0D F2 | 	cmp	result1, #0 wz
1e22c     06 1E 06 51 |  if_ne	add	local01, #6
1e230     0F 0B 58 5C |  if_ne	wrword	#5, local01
1e234     06 1E 06 A1 |  if_e	add	local01, #6
1e238     0F 0D 58 AC |  if_e	wrword	#6, local01
1e23c     14 20 06 F1 | 	add	local02, #20
1e240     10 1F 02 F6 | 	mov	local01, local02
1e244     04 20 86 F1 | 	sub	local02, #4
1e248     10 1F 62 FC | 	wrlong	local01, local02
1e24c     04 20 86 F1 | 	sub	local02, #4
1e250     02 00 80 FF 
1e254     10 01 68 FC | 	wrlong	##1024, local02
1e258     00 FA 05 F6 | 	mov	result1, #0
1e25c     A7 F0 03 F6 | 	mov	ptra, fp
1e260     B2 00 A0 FD | 	call	#popregs_
1e264                 | __system____default_buffer_init_ret
1e264     2D 00 64 FD | 	ret
1e268                 | 
1e268                 | __system__stat
1e268     04 4A 05 F6 | 	mov	COUNT_, #4
1e26c     A8 00 A0 FD | 	call	#pushregs_
1e270     0A 1F 02 F6 | 	mov	local01, arg02
1e274     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1e278     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1e27c     09 15 02 F6 | 	mov	arg02, arg01
1e280     10 13 02 F6 | 	mov	arg01, local02
1e284     00 16 06 F6 | 	mov	arg03, #0
1e288     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1e28c     40 B9 BF FD | 	call	#__system____getvfsforfile
1e290     FD 22 0A F6 | 	mov	local03, result1 wz
1e294     10 00 90 AD |  if_e	jmp	#LR__2940
1e298     34 22 06 F1 | 	add	local03, #52
1e29c     11 17 0A FB | 	rdlong	arg03, local03 wz
1e2a0     34 22 86 F1 | 	sub	local03, #52
1e2a4     14 00 90 5D |  if_ne	jmp	#LR__2941
1e2a8                 | LR__2940
1e2a8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e2ac     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1e2b0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e2b4     01 FA 65 F6 | 	neg	result1, #1
1e2b8     68 00 90 FD | 	jmp	#LR__2942
1e2bc                 | LR__2941
1e2bc     0F 13 02 F6 | 	mov	arg01, local01
1e2c0     00 14 06 F6 | 	mov	arg02, #0
1e2c4     30 16 06 F6 | 	mov	arg03, #48
1e2c8     09 25 02 F6 | 	mov	local04, arg01
1e2cc     98 00 A0 FD | 	call	#\builtin_bytefill_
1e2d0     12 FB 01 F6 | 	mov	result1, local04
1e2d4     10 13 CA FA | 	rdbyte	arg01, local02 wz
1e2d8     08 1E 06 A1 |  if_e	add	local01, #8
1e2dc     08 00 80 AF 
1e2e0     0F FF 6B AC |  if_e	wrlong	##4607, local01
1e2e4     00 FA 05 A6 |  if_e	mov	result1, #0
1e2e8     38 00 90 AD |  if_e	jmp	#LR__2942
1e2ec     34 22 06 F1 | 	add	local03, #52
1e2f0     11 23 02 FB | 	rdlong	local03, local03
1e2f4     11 25 02 F6 | 	mov	local04, local03
1e2f8     13 22 46 F7 | 	zerox	local03, #19
1e2fc     14 24 46 F0 | 	shr	local04, #20
1e300     02 24 66 F0 | 	shl	local04, #2
1e304     ED 24 02 F1 | 	add	local04, __methods__
1e308     12 25 02 FB | 	rdlong	local04, local04
1e30c     10 13 02 F6 | 	mov	arg01, local02
1e310     0F 15 02 F6 | 	mov	arg02, local01
1e314     F2 20 02 F6 | 	mov	local02, objptr
1e318     11 E5 01 F6 | 	mov	objptr, local03
1e31c     2D 24 62 FD | 	call	local04
1e320     10 E5 01 F6 | 	mov	objptr, local02
1e324                 | LR__2942
1e324     A7 F0 03 F6 | 	mov	ptra, fp
1e328     B2 00 A0 FD | 	call	#popregs_
1e32c                 | __system__stat_ret
1e32c     2D 00 64 FD | 	ret
1e330                 | 
1e330                 | __system__read
1e330     0A 12 16 F2 | 	cmp	arg01, #10 wc
1e334     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1e338     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1e33c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1e340     01 FA 65 36 |  if_ae	neg	result1, #1
1e344     20 00 90 3D |  if_ae	jmp	#LR__2950
1e348     34 12 06 FD | 	qmul	arg01, #52
1e34c     02 00 00 FF 
1e350     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1e354     18 12 62 FD | 	getqx	arg01
1e358     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1e35c     02 00 00 FF 
1e360     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1e364     D0 0F B0 FD | 	call	#__system___vfsread
1e368                 | LR__2950
1e368                 | __system__read_ret
1e368     2D 00 64 FD | 	ret
1e36c                 | 
1e36c                 | __system__close
1e36c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1e370     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1e374     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1e378     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1e37c     01 FA 65 36 |  if_ae	neg	result1, #1
1e380     20 00 90 3D |  if_ae	jmp	#LR__2960
1e384     34 12 06 FD | 	qmul	arg01, #52
1e388     02 00 00 FF 
1e38c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1e390     18 12 62 FD | 	getqx	arg01
1e394     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1e398     02 00 00 FF 
1e39c     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1e3a0     4C F9 BF FD | 	call	#__system___closeraw
1e3a4                 | LR__2960
1e3a4                 | __system__close_ret
1e3a4     2D 00 64 FD | 	ret
1e3a8                 | 
1e3a8                 | __system__lseek
1e3a8     06 4A 05 F6 | 	mov	COUNT_, #6
1e3ac     A8 00 A0 FD | 	call	#pushregs_
1e3b0     0A 12 16 F2 | 	cmp	arg01, #10 wc
1e3b4     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1e3b8     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1e3bc     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1e3c0     01 FA 65 36 |  if_ae	neg	result1, #1
1e3c4     C4 00 90 3D |  if_ae	jmp	#LR__2971
1e3c8     34 12 06 FD | 	qmul	arg01, #52
1e3cc     02 00 00 FF 
1e3d0     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1e3d4     18 1E 62 FD | 	getqx	local01
1e3d8     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1e3dc     30 1E 06 F1 | 	add	local01, #48
1e3e0     0F 13 0A FB | 	rdlong	arg01, local01 wz
1e3e4     30 1E 86 F1 | 	sub	local01, #48
1e3e8     02 00 00 FF 
1e3ec     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1e3f0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1e3f4     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1e3f8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1e3fc     01 FA 65 A6 |  if_e	neg	result1, #1
1e400     88 00 90 AD |  if_e	jmp	#LR__2971
1e404     08 1E 06 F1 | 	add	local01, #8
1e408     0F 21 02 FB | 	rdlong	local02, local01
1e40c     08 1E 86 F1 | 	sub	local01, #8
1e410     40 20 CE F7 | 	test	local02, #64 wz
1e414     08 1E 06 51 |  if_ne	add	local01, #8
1e418     0F 21 02 5B |  if_ne	rdlong	local02, local01
1e41c     80 20 46 55 |  if_ne	or	local02, #128
1e420     0F 21 62 5C |  if_ne	wrlong	local02, local01
1e424     08 1E 86 51 |  if_ne	sub	local01, #8
1e428     30 1E 06 F1 | 	add	local01, #48
1e42c     0F 23 02 FB | 	rdlong	local03, local01
1e430     11 25 02 F6 | 	mov	local04, local03
1e434     30 1E 86 F1 | 	sub	local01, #48
1e438     13 24 46 F7 | 	zerox	local04, #19
1e43c     14 22 46 F0 | 	shr	local03, #20
1e440     02 22 66 F0 | 	shl	local03, #2
1e444     ED 22 02 F1 | 	add	local03, __methods__
1e448     11 23 02 FB | 	rdlong	local03, local03
1e44c     0F 13 02 F6 | 	mov	arg01, local01
1e450     F2 26 02 F6 | 	mov	local05, objptr
1e454     12 E5 01 F6 | 	mov	objptr, local04
1e458     2D 22 62 FD | 	call	local03
1e45c     13 E5 01 F6 | 	mov	objptr, local05
1e460     FD 28 02 F6 | 	mov	local06, result1
1e464     00 28 56 F2 | 	cmps	local06, #0 wc
1e468     1C 00 90 3D |  if_ae	jmp	#LR__2970
1e46c     14 13 6A F6 | 	neg	arg01, local06 wz
1e470     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e474     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1e478     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e47c     01 FA 65 56 |  if_ne	neg	result1, #1
1e480     00 FA 05 A6 |  if_e	mov	result1, #0
1e484     04 00 90 FD | 	jmp	#LR__2971
1e488                 | LR__2970
1e488     14 FB 01 F6 | 	mov	result1, local06
1e48c                 | LR__2971
1e48c     A7 F0 03 F6 | 	mov	ptra, fp
1e490     B2 00 A0 FD | 	call	#popregs_
1e494                 | __system__lseek_ret
1e494     2D 00 64 FD | 	ret
1e498                 | 
1e498                 | __system___ioctl
1e498     03 4A 05 F6 | 	mov	COUNT_, #3
1e49c     A8 00 A0 FD | 	call	#pushregs_
1e4a0     00 12 4E F2 | 	cmps	arg01, #0 wz
1e4a4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1e4a8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1e4ac     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1e4b0     01 FA 65 A6 |  if_e	neg	result1, #1
1e4b4     5C 00 90 AD |  if_e	jmp	#LR__2981
1e4b8     28 12 06 F1 | 	add	arg01, #40
1e4bc     09 1F 02 FB | 	rdlong	local01, arg01
1e4c0     0F 21 02 F6 | 	mov	local02, local01
1e4c4     28 12 86 F1 | 	sub	arg01, #40
1e4c8     13 20 46 F7 | 	zerox	local02, #19
1e4cc     14 1E 46 F0 | 	shr	local01, #20
1e4d0     02 1E 66 F0 | 	shl	local01, #2
1e4d4     ED 1E 02 F1 | 	add	local01, __methods__
1e4d8     0F 1F 02 FB | 	rdlong	local01, local01
1e4dc     F2 22 02 F6 | 	mov	local03, objptr
1e4e0     10 E5 01 F6 | 	mov	objptr, local02
1e4e4     2D 1E 62 FD | 	call	local01
1e4e8     11 E5 01 F6 | 	mov	objptr, local03
1e4ec     FD 12 0A F6 | 	mov	arg01, result1 wz
1e4f0     1C 00 90 AD |  if_e	jmp	#LR__2980
1e4f4     00 12 4E F2 | 	cmps	arg01, #0 wz
1e4f8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e4fc     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1e500     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e504     01 FA 65 56 |  if_ne	neg	result1, #1
1e508     00 FA 05 A6 |  if_e	mov	result1, #0
1e50c     04 00 90 FD | 	jmp	#LR__2981
1e510                 | LR__2980
1e510     00 FA 05 F6 | 	mov	result1, #0
1e514                 | LR__2981
1e514     A7 F0 03 F6 | 	mov	ptra, fp
1e518     B2 00 A0 FD | 	call	#popregs_
1e51c                 | __system___ioctl_ret
1e51c     2D 00 64 FD | 	ret
1e520                 | 
1e520                 | __system___isatty
1e520     00 4A 05 F6 | 	mov	COUNT_, #0
1e524     A8 00 A0 FD | 	call	#pushregs_
1e528     0C F0 07 F1 | 	add	ptra, #12
1e52c     04 4E 05 F1 | 	add	fp, #4
1e530     A7 12 62 FC | 	wrlong	arg01, fp
1e534     04 4E 05 F1 | 	add	fp, #4
1e538     A7 16 02 F6 | 	mov	arg03, fp
1e53c     08 4E 85 F1 | 	sub	fp, #8
1e540     00 15 06 F6 | 	mov	arg02, #256
1e544     50 FF BF FD | 	call	#__system___ioctl
1e548     00 FA 0D F2 | 	cmp	result1, #0 wz
1e54c     01 FA 05 A6 |  if_e	mov	result1, #1
1e550     00 FA 05 56 |  if_ne	mov	result1, #0
1e554     A7 F0 03 F6 | 	mov	ptra, fp
1e558     B2 00 A0 FD | 	call	#popregs_
1e55c                 | __system___isatty_ret
1e55c     2D 00 64 FD | 	ret
1e560                 | 
1e560                 | __system____getftab
1e560     0A 12 16 F2 | 	cmp	arg01, #10 wc
1e564     34 12 06 CD |  if_b	qmul	arg01, #52
1e568     00 FA 05 36 |  if_ae	mov	result1, #0
1e56c     02 00 00 CF 
1e570     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1e574     18 FA 61 CD |  if_b	getqx	result1
1e578     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1e57c     02 00 00 CF 
1e580     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1e584                 | __system____getftab_ret
1e584     2D 00 64 FD | 	ret
1e588                 | 
1e588                 | __system__strncpy
1e588     09 01 02 F6 | 	mov	_var01, arg01
1e58c                 | LR__2990
1e58c     01 16 86 F1 | 	sub	arg03, #1
1e590     00 16 56 F2 | 	cmps	arg03, #0 wc
1e594     18 00 90 CD |  if_b	jmp	#LR__2991
1e598     0A FB C1 FA | 	rdbyte	result1, arg02
1e59c     00 FB 41 FC | 	wrbyte	result1, _var01
1e5a0     01 14 06 F1 | 	add	arg02, #1
1e5a4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1e5a8     01 00 06 F1 | 	add	_var01, #1
1e5ac     DC FF 9F 5D |  if_ne	jmp	#LR__2990
1e5b0                 | LR__2991
1e5b0     97 0C 48 FB | 	callpa	#(@LR__2993-@LR__2992)>>2,fcache_load_ptr_
1e5b4                 | LR__2992
1e5b4     01 16 86 F1 | 	sub	arg03, #1
1e5b8     00 16 56 F2 | 	cmps	arg03, #0 wc
1e5bc     00 03 02 36 |  if_ae	mov	_var02, _var01
1e5c0     01 00 06 31 |  if_ae	add	_var01, #1
1e5c4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1e5c8     E8 FF 9F 3D |  if_ae	jmp	#LR__2992
1e5cc                 | LR__2993
1e5cc     09 FB 01 F6 | 	mov	result1, arg01
1e5d0                 | __system__strncpy_ret
1e5d0     2D 00 64 FD | 	ret
1e5d4                 | 
1e5d4                 | __system__strncat
1e5d4     00 14 4E F2 | 	cmps	arg02, #0 wz
1e5d8     50 00 90 AD |  if_e	jmp	#LR__3004
1e5dc     01 16 16 F2 | 	cmp	arg03, #1 wc
1e5e0     48 00 90 CD |  if_b	jmp	#LR__3004
1e5e4     09 01 02 F6 | 	mov	_var01, arg01
1e5e8     97 1E 48 FB | 	callpa	#(@LR__3002-@LR__3000)>>2,fcache_load_ptr_
1e5ec                 | LR__3000
1e5ec     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1e5f0     01 00 06 51 |  if_ne	add	_var01, #1
1e5f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3000
1e5f8     0B 03 02 F6 | 	mov	_var02, arg03
1e5fc                 | LR__3001
1e5fc     0A 05 C2 FA | 	rdbyte	_var03, arg02
1e600     02 07 02 F6 | 	mov	_var04, _var03
1e604     07 06 4E F7 | 	zerox	_var04, #7 wz
1e608     01 14 06 F1 | 	add	arg02, #1
1e60c     18 00 90 AD |  if_e	jmp	#LR__3003
1e610     01 02 86 F1 | 	sub	_var02, #1
1e614     00 02 56 F2 | 	cmps	_var02, #0 wc
1e618     00 07 02 36 |  if_ae	mov	_var04, _var01
1e61c     01 00 06 31 |  if_ae	add	_var01, #1
1e620     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1e624     D4 FF 9F 3D |  if_ae	jmp	#LR__3001
1e628                 | LR__3002
1e628                 | LR__3003
1e628     00 01 48 FC | 	wrbyte	#0, _var01
1e62c                 | LR__3004
1e62c     09 FB 01 F6 | 	mov	result1, arg01
1e630                 | __system__strncat_ret
1e630     2D 00 64 FD | 	ret
1e634                 | 
1e634                 | __system__strncmp
1e634     09 01 0A F6 | 	mov	_var01, arg01 wz
1e638     14 00 90 5D |  if_ne	jmp	#LR__3010
1e63c     00 14 0E F2 | 	cmp	arg02, #0 wz
1e640     01 02 66 56 |  if_ne	neg	_var02, #1
1e644     00 02 06 A6 |  if_e	mov	_var02, #0
1e648     01 FB 01 F6 | 	mov	result1, _var02
1e64c     74 00 90 FD | 	jmp	#__system__strncmp_ret
1e650                 | LR__3010
1e650     00 14 0E F2 | 	cmp	arg02, #0 wz
1e654     01 FA 05 A6 |  if_e	mov	result1, #1
1e658     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e65c     0B 05 02 F6 | 	mov	_var03, arg03
1e660     97 16 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
1e664                 | LR__3011
1e664     00 07 C2 FA | 	rdbyte	_var04, _var01
1e668     0A 09 02 F6 | 	mov	_var05, arg02
1e66c     04 0B C2 FA | 	rdbyte	_var06, _var05
1e670     01 04 86 F1 | 	sub	_var03, #1
1e674     00 04 56 F2 | 	cmps	_var03, #0 wc
1e678     01 00 06 F1 | 	add	_var01, #1
1e67c     01 14 06 F1 | 	add	arg02, #1
1e680     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1e684     08 00 90 2D |  if_nc_and_z	jmp	#LR__3013
1e688     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1e68c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3011
1e690                 | LR__3012
1e690                 | LR__3013
1e690     00 04 56 F2 | 	cmps	_var03, #0 wc
1e694     00 FA 05 C6 |  if_b	mov	result1, #0
1e698     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1e69c     05 07 0A F2 | 	cmp	_var04, _var06 wz
1e6a0     00 FA 05 A6 |  if_e	mov	result1, #0
1e6a4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e6a8     00 06 0E F2 | 	cmp	_var04, #0 wz
1e6ac     01 FA 65 A6 |  if_e	neg	result1, #1
1e6b0     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e6b4     00 0A 0E F2 | 	cmp	_var06, #0 wz
1e6b8     01 FA 05 A6 |  if_e	mov	result1, #1
1e6bc     03 FB 01 56 |  if_ne	mov	result1, _var04
1e6c0     05 FB 81 51 |  if_ne	sub	result1, _var06
1e6c4                 | __system__strncmp_ret
1e6c4     2D 00 64 FD | 	ret
1e6c8                 | 
1e6c8                 | __system____root_opendir
1e6c8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1e6cc     04 12 06 F1 | 	add	arg01, #4
1e6d0     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1e6d4     00 FA 05 F6 | 	mov	result1, #0
1e6d8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1e6dc                 | __system____root_opendir_ret
1e6dc     2D 00 64 FD | 	ret
1e6e0                 | 
1e6e0                 | __system____root_readdir
1e6e0     03 4A 05 F6 | 	mov	COUNT_, #3
1e6e4     A8 00 A0 FD | 	call	#pushregs_
1e6e8     09 1F 02 F6 | 	mov	local01, arg01
1e6ec     0A 21 02 F6 | 	mov	local02, arg02
1e6f0     04 1E 06 F1 | 	add	local01, #4
1e6f4     0F 23 02 FB | 	rdlong	local03, local01
1e6f8     04 1E 86 F1 | 	sub	local01, #4
1e6fc                 | LR__3020
1e6fc     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1e700     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1e704     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1e708     01 FA 65 A6 |  if_e	neg	result1, #1
1e70c     48 00 90 AD |  if_e	jmp	#LR__3021
1e710     11 17 0A FB | 	rdlong	arg03, local03 wz
1e714     04 22 06 A1 |  if_e	add	local03, #4
1e718     E0 FF 9F AD |  if_e	jmp	#LR__3020
1e71c     11 15 02 FB | 	rdlong	arg02, local03
1e720     01 14 06 F1 | 	add	arg02, #1
1e724     10 13 02 F6 | 	mov	arg01, local02
1e728     40 16 06 F6 | 	mov	arg03, #64
1e72c     58 FE BF FD | 	call	#__system__strncpy
1e730     50 20 06 F1 | 	add	local02, #80
1e734     10 03 48 FC | 	wrbyte	#1, local02
1e738     08 20 86 F1 | 	sub	local02, #8
1e73c     10 01 68 FC | 	wrlong	#0, local02
1e740     04 20 06 F1 | 	add	local02, #4
1e744     10 01 68 FC | 	wrlong	#0, local02
1e748     04 22 06 F1 | 	add	local03, #4
1e74c     04 1E 06 F1 | 	add	local01, #4
1e750     0F 23 62 FC | 	wrlong	local03, local01
1e754     00 FA 05 F6 | 	mov	result1, #0
1e758                 | LR__3021
1e758     A7 F0 03 F6 | 	mov	ptra, fp
1e75c     B2 00 A0 FD | 	call	#popregs_
1e760                 | __system____root_readdir_ret
1e760     2D 00 64 FD | 	ret
1e764                 | 
1e764                 | __system____root_closedir
1e764     00 FA 05 F6 | 	mov	result1, #0
1e768                 | __system____root_closedir_ret
1e768     2D 00 64 FD | 	ret
1e76c                 | 
1e76c                 | __system____root_stat
1e76c     0A 01 02 F6 | 	mov	_var01, arg02
1e770     00 13 02 F6 | 	mov	arg01, _var01
1e774     00 14 06 F6 | 	mov	arg02, #0
1e778     30 16 06 F6 | 	mov	arg03, #48
1e77c     98 00 A0 FD | 	call	#\builtin_bytefill_
1e780     08 00 06 F1 | 	add	_var01, #8
1e784     08 00 80 FF 
1e788     00 FF 6B FC | 	wrlong	##4607, _var01
1e78c     00 FA 05 F6 | 	mov	result1, #0
1e790                 | __system____root_stat_ret
1e790     2D 00 64 FD | 	ret
1e794                 | 
1e794                 | __system___normalizeName
1e794     00 00 06 F6 | 	mov	_var01, #0
1e798     09 03 02 F6 | 	mov	_var02, arg01
1e79c     01 05 02 F6 | 	mov	_var03, _var02
1e7a0                 | LR__3030
1e7a0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e7a4     5C 01 90 AD |  if_e	jmp	#LR__3049
1e7a8     00 00 0E F2 | 	cmp	_var01, #0 wz
1e7ac     02 07 02 56 |  if_ne	mov	_var04, _var03
1e7b0     01 04 06 51 |  if_ne	add	_var03, #1
1e7b4     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1e7b8     00 00 06 56 |  if_ne	mov	_var01, #0
1e7bc     01 07 C2 FA | 	rdbyte	_var04, _var02
1e7c0     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e7c4     D8 00 90 5D |  if_ne	jmp	#LR__3042
1e7c8     01 02 06 F1 | 	add	_var02, #1
1e7cc     01 07 C2 FA | 	rdbyte	_var04, _var02
1e7d0     01 02 86 F1 | 	sub	_var02, #1
1e7d4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e7d8     18 00 90 AD |  if_e	jmp	#LR__3031
1e7dc     01 02 06 F1 | 	add	_var02, #1
1e7e0     01 09 C2 FA | 	rdbyte	_var05, _var02
1e7e4     01 02 86 F1 | 	sub	_var02, #1
1e7e8     04 0B 02 F6 | 	mov	_var06, _var05
1e7ec     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e7f0     10 00 90 5D |  if_ne	jmp	#LR__3032
1e7f4                 | LR__3031
1e7f4     01 0D 02 F6 | 	mov	_var07, _var02
1e7f8     01 0C 06 F1 | 	add	_var07, #1
1e7fc     06 03 02 F6 | 	mov	_var02, _var07
1e800     E0 00 90 FD | 	jmp	#LR__3046
1e804                 | LR__3032
1e804     01 02 06 F1 | 	add	_var02, #1
1e808     01 0D C2 FA | 	rdbyte	_var07, _var02
1e80c     01 02 86 F1 | 	sub	_var02, #1
1e810     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e814     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e818     84 00 90 5D |  if_ne	jmp	#LR__3041
1e81c     02 02 06 F1 | 	add	_var02, #2
1e820     01 0D C2 FA | 	rdbyte	_var07, _var02
1e824     02 02 86 F1 | 	sub	_var02, #2
1e828     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e82c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e830     18 00 90 AD |  if_e	jmp	#LR__3033
1e834     02 02 06 F1 | 	add	_var02, #2
1e838     01 09 C2 FA | 	rdbyte	_var05, _var02
1e83c     02 02 86 F1 | 	sub	_var02, #2
1e840     04 0B 02 F6 | 	mov	_var06, _var05
1e844     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e848     54 00 90 5D |  if_ne	jmp	#LR__3040
1e84c                 | LR__3033
1e84c     02 02 06 F1 | 	add	_var02, #2
1e850     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1e854     40 00 90 ED |  if_be	jmp	#LR__3039
1e858     02 0F 02 F6 | 	mov	_var08, _var03
1e85c     01 0E 86 F1 | 	sub	_var08, #1
1e860                 | LR__3034
1e860     07 07 C2 FA | 	rdbyte	_var04, _var08
1e864     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e868     0C 00 90 5D |  if_ne	jmp	#LR__3035
1e86c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e870     01 0E 86 11 |  if_a	sub	_var08, #1
1e874     E8 FF 9F 1D |  if_a	jmp	#LR__3034
1e878                 | LR__3035
1e878     97 0C 48 FB | 	callpa	#(@LR__3037-@LR__3036)>>2,fcache_load_ptr_
1e87c                 | LR__3036
1e87c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e880     10 00 90 ED |  if_be	jmp	#LR__3038
1e884     07 07 C2 FA | 	rdbyte	_var04, _var08
1e888     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e88c     01 0E 86 51 |  if_ne	sub	_var08, #1
1e890     E8 FF 9F 5D |  if_ne	jmp	#LR__3036
1e894                 | LR__3037
1e894                 | LR__3038
1e894     07 05 02 F6 | 	mov	_var03, _var08
1e898                 | LR__3039
1e898     01 00 06 F6 | 	mov	_var01, #1
1e89c     44 00 90 FD | 	jmp	#LR__3046
1e8a0                 | LR__3040
1e8a0                 | LR__3041
1e8a0                 | LR__3042
1e8a0     97 18 48 FB | 	callpa	#(@LR__3044-@LR__3043)>>2,fcache_load_ptr_
1e8a4                 | LR__3043
1e8a4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e8a8     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1e8ac     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1e8b0     20 00 90 AD |  if_e	jmp	#LR__3045
1e8b4     01 0B 02 F6 | 	mov	_var06, _var02
1e8b8     01 09 02 F6 | 	mov	_var05, _var02
1e8bc     01 08 06 F1 | 	add	_var05, #1
1e8c0     05 11 C2 FA | 	rdbyte	_var09, _var06
1e8c4     04 03 02 F6 | 	mov	_var02, _var05
1e8c8     02 11 42 FC | 	wrbyte	_var09, _var03
1e8cc     01 04 06 F1 | 	add	_var03, #1
1e8d0     D0 FF 9F FD | 	jmp	#LR__3043
1e8d4                 | LR__3044
1e8d4                 | LR__3045
1e8d4     01 07 C2 FA | 	rdbyte	_var04, _var02
1e8d8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e8dc     C0 FE 9F 5D |  if_ne	jmp	#LR__3030
1e8e0     01 00 06 F6 | 	mov	_var01, #1
1e8e4                 | LR__3046
1e8e4     97 0C 48 FB | 	callpa	#(@LR__3048-@LR__3047)>>2,fcache_load_ptr_
1e8e8                 | LR__3047
1e8e8     01 07 C2 FA | 	rdbyte	_var04, _var02
1e8ec     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e8f0     01 0D 02 A6 |  if_e	mov	_var07, _var02
1e8f4     01 0C 06 A1 |  if_e	add	_var07, #1
1e8f8     06 03 02 A6 |  if_e	mov	_var02, _var07
1e8fc     E8 FF 9F AD |  if_e	jmp	#LR__3047
1e900                 | LR__3048
1e900     9C FE 9F FD | 	jmp	#LR__3030
1e904                 | LR__3049
1e904     02 01 48 FC | 	wrbyte	#0, _var03
1e908                 | __system___normalizeName_ret
1e908     2D 00 64 FD | 	ret
1e90c                 | 
1e90c                 | __system___strrev
1e90c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1e910     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1e914     09 03 02 F6 | 	mov	_var02, arg01
1e918     97 1A 48 FB | 	callpa	#(@LR__3052-@LR__3050)>>2,fcache_load_ptr_
1e91c                 | LR__3050
1e91c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1e920     01 02 06 51 |  if_ne	add	_var02, #1
1e924     F4 FF 9F 5D |  if_ne	jmp	#LR__3050
1e928     01 02 86 F1 | 	sub	_var02, #1
1e92c                 | LR__3051
1e92c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1e930     1C 00 90 ED |  if_be	jmp	#LR__3053
1e934     09 01 C2 FA | 	rdbyte	_var01, arg01
1e938     01 05 C2 FA | 	rdbyte	_var03, _var02
1e93c     09 05 42 FC | 	wrbyte	_var03, arg01
1e940     01 01 42 FC | 	wrbyte	_var01, _var02
1e944     01 12 06 F1 | 	add	arg01, #1
1e948     01 02 86 F1 | 	sub	_var02, #1
1e94c     DC FF 9F FD | 	jmp	#LR__3051
1e950                 | LR__3052
1e950                 | LR__3053
1e950                 | __system___strrev_ret
1e950     2D 00 64 FD | 	ret
1e954                 | 
1e954                 | __system___fmtpad
1e954     06 4A 05 F6 | 	mov	COUNT_, #6
1e958     A8 00 A0 FD | 	call	#pushregs_
1e95c     09 1F 02 F6 | 	mov	local01, arg01
1e960     0A 21 02 F6 | 	mov	local02, arg02
1e964     0B 23 02 F6 | 	mov	local03, arg03
1e968     10 13 EA F8 | 	getbyte	arg01, local02, #1
1e96c     16 20 46 F0 | 	shr	local02, #22
1e970     03 20 0E F5 | 	and	local02, #3 wz
1e974     00 24 06 F6 | 	mov	local04, #0
1e978     01 20 06 A6 |  if_e	mov	local02, #1
1e97c     0C 21 CA F7 | 	test	local02, arg04 wz
1e980     00 FA 05 A6 |  if_e	mov	result1, #0
1e984     88 00 90 AD |  if_e	jmp	#LR__3063
1e988     09 23 C2 F2 | 	subr	local03, arg01
1e98c     01 22 56 F2 | 	cmps	local03, #1 wc
1e990     00 FA 05 C6 |  if_b	mov	result1, #0
1e994     78 00 90 CD |  if_b	jmp	#LR__3063
1e998     03 20 0E F2 | 	cmp	local02, #3 wz
1e99c     18 00 90 5D |  if_ne	jmp	#LR__3060
1e9a0     01 18 0E F2 | 	cmp	arg04, #1 wz
1e9a4     6E 20 62 FD | 	wrz	local02
1e9a8     10 23 02 F1 | 	add	local03, local02
1e9ac     11 23 52 F6 | 	abs	local03, local03 wc
1e9b0     01 22 46 F0 | 	shr	local03, #1
1e9b4     11 23 82 F6 | 	negc	local03, local03
1e9b8                 | LR__3060
1e9b8     01 22 56 F2 | 	cmps	local03, #1 wc
1e9bc     4C 00 90 CD |  if_b	jmp	#LR__3062
1e9c0     11 27 02 F6 | 	mov	local05, local03
1e9c4                 | LR__3061
1e9c4     0F 21 02 F6 | 	mov	local02, local01
1e9c8     0F 29 02 F6 | 	mov	local06, local01
1e9cc     13 20 46 F7 | 	zerox	local02, #19
1e9d0     14 28 46 F0 | 	shr	local06, #20
1e9d4     02 28 66 F0 | 	shl	local06, #2
1e9d8     ED 28 02 F1 | 	add	local06, __methods__
1e9dc     14 29 02 FB | 	rdlong	local06, local06
1e9e0     20 12 06 F6 | 	mov	arg01, #32
1e9e4     F2 22 02 F6 | 	mov	local03, objptr
1e9e8     10 E5 01 F6 | 	mov	objptr, local02
1e9ec     2D 28 62 FD | 	call	local06
1e9f0     11 E5 01 F6 | 	mov	objptr, local03
1e9f4     FD 28 02 F6 | 	mov	local06, result1
1e9f8     00 28 56 F2 | 	cmps	local06, #0 wc
1e9fc     14 FB 01 C6 |  if_b	mov	result1, local06
1ea00     0C 00 90 CD |  if_b	jmp	#LR__3063
1ea04     14 25 02 F1 | 	add	local04, local06
1ea08     EE 27 6E FB | 	djnz	local05, #LR__3061
1ea0c                 | LR__3062
1ea0c     12 FB 01 F6 | 	mov	result1, local04
1ea10                 | LR__3063
1ea10     A7 F0 03 F6 | 	mov	ptra, fp
1ea14     B2 00 A0 FD | 	call	#popregs_
1ea18                 | __system___fmtpad_ret
1ea18     2D 00 64 FD | 	ret
1ea1c                 | 
1ea1c                 | __system___uitoa
1ea1c     04 4A 05 F6 | 	mov	COUNT_, #4
1ea20     A8 00 A0 FD | 	call	#pushregs_
1ea24     09 1F 02 F6 | 	mov	local01, arg01
1ea28     00 1A 4E F2 | 	cmps	arg05, #0 wz
1ea2c     0F 1B 02 F6 | 	mov	arg05, local01
1ea30     00 20 06 F6 | 	mov	local02, #0
1ea34     37 22 06 56 |  if_ne	mov	local03, #55
1ea38     57 22 06 A6 |  if_e	mov	local03, #87
1ea3c                 | LR__3070
1ea3c     0B 15 12 FD | 	qdiv	arg02, arg03
1ea40     19 24 62 FD | 	getqy	local04
1ea44     0B 15 12 FD | 	qdiv	arg02, arg03
1ea48     0A 24 16 F2 | 	cmp	local04, #10 wc
1ea4c     30 24 06 C1 |  if_b	add	local04, #48
1ea50     11 25 02 31 |  if_ae	add	local04, local03
1ea54     0D 25 42 FC | 	wrbyte	local04, arg05
1ea58     01 1A 06 F1 | 	add	arg05, #1
1ea5c     01 20 06 F1 | 	add	local02, #1
1ea60     18 14 62 FD | 	getqx	arg02
1ea64     00 14 0E F2 | 	cmp	arg02, #0 wz
1ea68     D0 FF 9F 5D |  if_ne	jmp	#LR__3070
1ea6c     0C 21 12 F2 | 	cmp	local02, arg04 wc
1ea70     C8 FF 9F CD |  if_b	jmp	#LR__3070
1ea74     0D 01 48 FC | 	wrbyte	#0, arg05
1ea78     0F 13 02 F6 | 	mov	arg01, local01
1ea7c     8C FE BF FD | 	call	#__system___strrev
1ea80     10 FB 01 F6 | 	mov	result1, local02
1ea84     A7 F0 03 F6 | 	mov	ptra, fp
1ea88     B2 00 A0 FD | 	call	#popregs_
1ea8c                 | __system___uitoa_ret
1ea8c     2D 00 64 FD | 	ret
1ea90                 | 
1ea90                 | __system__disassemble_0383
1ea90     10 4A 05 F6 | 	mov	COUNT_, #16
1ea94     A8 00 A0 FD | 	call	#pushregs_
1ea98     09 1F 02 F6 | 	mov	local01, arg01
1ea9c     0A 21 02 F6 | 	mov	local02, arg02
1eaa0     0B 23 02 F6 | 	mov	local03, arg03
1eaa4     0C 25 02 F6 | 	mov	local04, arg04
1eaa8     0D 27 02 F6 | 	mov	local05, arg05
1eaac     13 13 52 F6 | 	abs	arg01, local05 wc
1eab0     1F 28 C6 C9 |  if_b	decod	local06, #31
1eab4     00 28 06 36 |  if_ae	mov	local06, #0
1eab8     64 D0 BF FD | 	call	#__system___float_fromuns
1eabc     14 FB 61 F5 | 	xor	result1, local06
1eac0     FD 2A 02 F6 | 	mov	local07, result1
1eac4     00 2C 06 F6 | 	mov	local08, #0
1eac8     0F 13 02 F6 | 	mov	arg01, local01
1eacc     00 14 06 F6 | 	mov	arg02, #0
1ead0     01 16 06 F6 | 	mov	arg03, #1
1ead4     80 D8 BF FD | 	call	#__system___float_cmp
1ead8     00 FA 0D F2 | 	cmp	result1, #0 wz
1eadc     00 2E 06 A6 |  if_e	mov	local09, #0
1eae0     10 01 68 AC |  if_e	wrlong	#0, local02
1eae4     11 2F 62 AC |  if_e	wrlong	local09, local03
1eae8     8C 01 90 AD |  if_e	jmp	#LR__3092
1eaec     0F 13 02 F6 | 	mov	arg01, local01
1eaf0     30 DD BF FD | 	call	#__system____builtin_ilogb
1eaf4     FD 30 02 F6 | 	mov	local10, result1
1eaf8     0A 26 0E F2 | 	cmp	local05, #10 wz
1eafc     24 00 90 5D |  if_ne	jmp	#LR__3080
1eb00     18 2F 02 F6 | 	mov	local09, local10
1eb04     01 2E 66 F0 | 	shl	local09, #1
1eb08     18 2F 02 F1 | 	add	local09, local10
1eb0c     17 31 52 F6 | 	abs	local10, local09 wc
1eb10     0A 30 16 FD | 	qdiv	local10, #10
1eb14     09 32 06 F6 | 	mov	local11, #9
1eb18     18 30 62 FD | 	getqx	local10
1eb1c     18 31 82 F6 | 	negc	local10, local10
1eb20     04 00 90 FD | 	jmp	#LR__3081
1eb24                 | LR__3080
1eb24     18 32 06 F6 | 	mov	local11, #24
1eb28                 | LR__3081
1eb28                 | LR__3082
1eb28     08 2C 56 F2 | 	cmps	local08, #8 wc
1eb2c     01 2C 06 F1 | 	add	local08, #1
1eb30     60 00 90 3D |  if_ae	jmp	#LR__3083
1eb34     00 C0 1F FF 
1eb38     00 12 06 F6 | 	mov	arg01, ##1065353216
1eb3c     15 15 02 F6 | 	mov	arg02, local07
1eb40     18 17 02 F6 | 	mov	arg03, local10
1eb44     88 E3 BF FD | 	call	#__system___float_pow_n
1eb48     FD 14 02 F6 | 	mov	arg02, result1
1eb4c     0F 13 02 F6 | 	mov	arg01, local01
1eb50     D4 D5 BF FD | 	call	#__system___float_div
1eb54     FD 34 02 F6 | 	mov	local12, result1
1eb58     1A 13 02 F6 | 	mov	arg01, local12
1eb5c     00 C0 1F FF 
1eb60     00 14 06 F6 | 	mov	arg02, ##1065353216
1eb64     01 16 06 F6 | 	mov	arg03, #1
1eb68     EC D7 BF FD | 	call	#__system___float_cmp
1eb6c     00 FA 55 F2 | 	cmps	result1, #0 wc
1eb70     01 30 86 C1 |  if_b	sub	local10, #1
1eb74     B0 FF 9F CD |  if_b	jmp	#LR__3082
1eb78     15 15 02 F6 | 	mov	arg02, local07
1eb7c     1A 13 02 F6 | 	mov	arg01, local12
1eb80     01 16 66 F6 | 	neg	arg03, #1
1eb84     D0 D7 BF FD | 	call	#__system___float_cmp
1eb88     00 FA 55 F2 | 	cmps	result1, #0 wc
1eb8c     01 30 06 31 |  if_ae	add	local10, #1
1eb90     94 FF 9F 3D |  if_ae	jmp	#LR__3082
1eb94                 | LR__3083
1eb94     1A 13 02 F6 | 	mov	arg01, local12
1eb98     88 DC BF FD | 	call	#__system____builtin_ilogb
1eb9c     FD 36 02 F6 | 	mov	local13, result1
1eba0     1A 39 02 F6 | 	mov	local14, local12
1eba4     17 39 06 F4 | 	bitl	local14, #279
1eba8     17 38 26 F4 | 	bith	local14, #23
1ebac     1B 39 62 F0 | 	shl	local14, local13
1ebb0     02 26 0E F2 | 	cmp	local05, #2 wz
1ebb4     02 24 66 A0 |  if_e	shl	local04, #2
1ebb8     00 3A 06 F6 | 	mov	local15, #0
1ebbc     00 24 56 F2 | 	cmps	local04, #0 wc
1ebc0     10 00 90 3D |  if_ae	jmp	#LR__3084
1ebc4     18 25 C2 F2 | 	subr	local04, local10
1ebc8     00 24 56 F2 | 	cmps	local04, #0 wc
1ebcc     A0 00 90 CD |  if_b	jmp	#LR__3091
1ebd0     04 00 90 FD | 	jmp	#LR__3085
1ebd4                 | LR__3084
1ebd4     01 24 06 F1 | 	add	local04, #1
1ebd8                 | LR__3085
1ebd8     19 25 7A F3 | 	fles	local04, local11 wcz
1ebdc     01 3C 06 F6 | 	mov	local16, #1
1ebe0     97 22 48 FB | 	callpa	#(@LR__3087-@LR__3086)>>2,fcache_load_ptr_
1ebe4                 | LR__3086
1ebe4     00 40 00 FF 
1ebe8     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1ebec     38 00 90 3D |  if_ae	jmp	#LR__3088
1ebf0     01 24 56 F2 | 	cmps	local04, #1 wc
1ebf4     01 24 86 F1 | 	sub	local04, #1
1ebf8     2C 00 90 CD |  if_b	jmp	#LR__3088
1ebfc     13 3B 02 FD | 	qmul	local15, local05
1ec00     1C 37 02 F6 | 	mov	local13, local14
1ec04     17 36 46 F0 | 	shr	local13, #23
1ec08     17 39 06 F4 | 	bitl	local14, #279
1ec0c     18 3A 62 FD | 	getqx	local15
1ec10     13 3D 02 FD | 	qmul	local16, local05
1ec14     18 3C 62 FD | 	getqx	local16
1ec18     13 39 02 FD | 	qmul	local14, local05
1ec1c     1B 3B 02 F1 | 	add	local15, local13
1ec20     18 38 62 FD | 	getqx	local14
1ec24     BC FF 9F FD | 	jmp	#LR__3086
1ec28                 | LR__3087
1ec28                 | LR__3088
1ec28     13 2F 02 F6 | 	mov	local09, local05
1ec2c     17 2E 66 F0 | 	shl	local09, #23
1ec30     17 37 52 F6 | 	abs	local13, local09 wc
1ec34     01 36 46 F0 | 	shr	local13, #1
1ec38     1B 37 82 F6 | 	negc	local13, local13
1ec3c     1B 39 1A F2 | 	cmp	local14, local13 wcz
1ec40     20 00 90 1D |  if_a	jmp	#LR__3089
1ec44     17 26 66 F0 | 	shl	local05, #23
1ec48     13 37 52 F6 | 	abs	local13, local05 wc
1ec4c     01 36 46 F0 | 	shr	local13, #1
1ec50     1B 37 82 F6 | 	negc	local13, local13
1ec54     1B 39 0A F2 | 	cmp	local14, local13 wz
1ec58     14 00 90 5D |  if_ne	jmp	#LR__3090
1ec5c     01 3A CE F7 | 	test	local15, #1 wz
1ec60     0C 00 90 AD |  if_e	jmp	#LR__3090
1ec64                 | LR__3089
1ec64     01 3A 06 F1 | 	add	local15, #1
1ec68     1E 3B 0A F2 | 	cmp	local15, local16 wz
1ec6c     01 30 06 A1 |  if_e	add	local10, #1
1ec70                 | LR__3090
1ec70                 | LR__3091
1ec70     10 3B 62 FC | 	wrlong	local15, local02
1ec74     11 31 62 FC | 	wrlong	local10, local03
1ec78                 | LR__3092
1ec78     A7 F0 03 F6 | 	mov	ptra, fp
1ec7c     B2 00 A0 FD | 	call	#popregs_
1ec80                 | __system__disassemble_0383_ret
1ec80     2D 00 64 FD | 	ret
1ec84                 | 
1ec84                 | __system__emitsign_0385
1ec84     00 FA 05 F6 | 	mov	result1, #0
1ec88     00 14 0E F2 | 	cmp	arg02, #0 wz
1ec8c     09 01 02 56 |  if_ne	mov	_var01, arg01
1ec90     01 12 06 51 |  if_ne	add	arg01, #1
1ec94     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1ec98     01 FA 05 56 |  if_ne	mov	result1, #1
1ec9c     00 16 0E F2 | 	cmp	arg03, #0 wz
1eca0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1eca4     01 12 06 51 |  if_ne	add	arg01, #1
1eca8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1ecac     02 FA 05 51 |  if_ne	add	result1, #2
1ecb0                 | __system__emitsign_0385_ret
1ecb0     2D 00 64 FD | 	ret
1ecb4                 | 
1ecb4                 | __system___gettxfunc
1ecb4     01 4A 05 F6 | 	mov	COUNT_, #1
1ecb8     A8 00 A0 FD | 	call	#pushregs_
1ecbc     A0 F8 BF FD | 	call	#__system____getftab
1ecc0     FD 1E 0A F6 | 	mov	local01, result1 wz
1ecc4     10 00 90 AD |  if_e	jmp	#LR__3100
1ecc8     08 1E 06 F1 | 	add	local01, #8
1eccc     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ecd0     08 1E 86 F1 | 	sub	local01, #8
1ecd4     08 00 90 5D |  if_ne	jmp	#LR__3101
1ecd8                 | LR__3100
1ecd8     00 FA 05 F6 | 	mov	result1, #0
1ecdc     0C 00 90 FD | 	jmp	#LR__3102
1ece0                 | LR__3101
1ece0     00 30 03 FF 
1ece4     00 1E 46 F5 | 	or	local01, ##106954752
1ece8     0F FB 01 F6 | 	mov	result1, local01
1ecec                 | LR__3102
1ecec     A7 F0 03 F6 | 	mov	ptra, fp
1ecf0     B2 00 A0 FD | 	call	#popregs_
1ecf4                 | __system___gettxfunc_ret
1ecf4     2D 00 64 FD | 	ret
1ecf8                 | 
1ecf8                 | __system___getrxfunc
1ecf8     01 4A 05 F6 | 	mov	COUNT_, #1
1ecfc     A8 00 A0 FD | 	call	#pushregs_
1ed00     5C F8 BF FD | 	call	#__system____getftab
1ed04     FD 1E 0A F6 | 	mov	local01, result1 wz
1ed08     10 00 90 AD |  if_e	jmp	#LR__3110
1ed0c     08 1E 06 F1 | 	add	local01, #8
1ed10     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ed14     08 1E 86 F1 | 	sub	local01, #8
1ed18     08 00 90 5D |  if_ne	jmp	#LR__3111
1ed1c                 | LR__3110
1ed1c     00 FA 05 F6 | 	mov	result1, #0
1ed20     0C 00 90 FD | 	jmp	#LR__3112
1ed24                 | LR__3111
1ed24     00 38 03 FF 
1ed28     00 1E 46 F5 | 	or	local01, ##108003328
1ed2c     0F FB 01 F6 | 	mov	result1, local01
1ed30                 | LR__3112
1ed30     A7 F0 03 F6 | 	mov	ptra, fp
1ed34     B2 00 A0 FD | 	call	#popregs_
1ed38                 | __system___getrxfunc_ret
1ed38     2D 00 64 FD | 	ret
1ed3c                 | 
1ed3c                 | __system___getiolock_0425
1ed3c     01 4A 05 F6 | 	mov	COUNT_, #1
1ed40     A8 00 A0 FD | 	call	#pushregs_
1ed44     18 F8 BF FD | 	call	#__system____getftab
1ed48     FD 1E 0A F6 | 	mov	local01, result1 wz
1ed4c     10 00 90 AD |  if_e	jmp	#LR__3120
1ed50     08 1E 06 F1 | 	add	local01, #8
1ed54     0F FB 09 FB | 	rdlong	result1, local01 wz
1ed58     08 1E 86 F1 | 	sub	local01, #8
1ed5c     18 00 90 5D |  if_ne	jmp	#LR__3121
1ed60                 | LR__3120
1ed60     01 00 00 FF 
1ed64     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1ed68     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1ed6c     01 00 00 FF 
1ed70     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1ed74     08 00 90 FD | 	jmp	#LR__3122
1ed78                 | LR__3121
1ed78     0C 1E 06 F1 | 	add	local01, #12
1ed7c     0F FB 01 F6 | 	mov	result1, local01
1ed80                 | LR__3122
1ed80     A7 F0 03 F6 | 	mov	ptra, fp
1ed84     B2 00 A0 FD | 	call	#popregs_
1ed88                 | __system___getiolock_0425_ret
1ed88     2D 00 64 FD | 	ret
1ed8c                 | 
1ed8c                 | __system____ScanForChar
1ed8c     09 01 02 F6 | 	mov	_var01, arg01
1ed90     09 03 02 F6 | 	mov	_var02, arg01
1ed94     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
1ed98                 | LR__3130
1ed98     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1ed9c     01 02 06 51 |  if_ne	add	_var02, #1
1eda0     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
1eda4                 | LR__3131
1eda4     09 03 82 F1 | 	sub	_var02, arg01
1eda8     01 FB 01 F6 | 	mov	result1, _var02
1edac     FD 12 0A F6 | 	mov	arg01, result1 wz
1edb0     00 FA 05 A6 |  if_e	mov	result1, #0
1edb4     B8 00 90 AD |  if_e	jmp	#LR__3138
1edb8     0A 05 02 F6 | 	mov	_var03, arg02
1edbc     07 04 4E F7 | 	zerox	_var03, #7 wz
1edc0     00 FA 05 A6 |  if_e	mov	result1, #0
1edc4     A8 00 90 AD |  if_e	jmp	#LR__3138
1edc8     01 16 16 F2 | 	cmp	arg03, #1 wc
1edcc     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1edd0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1edd4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1edd8     94 00 90 4D |  if_c_and_nz	jmp	#LR__3138
1eddc     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1ede0     10 00 90 ED |  if_be	jmp	#LR__3132
1ede4     00 18 0E F2 | 	cmp	arg04, #0 wz
1ede8     00 FA 05 A6 |  if_e	mov	result1, #0
1edec     80 00 90 AD |  if_e	jmp	#LR__3138
1edf0     09 17 02 F6 | 	mov	arg03, arg01
1edf4                 | LR__3132
1edf4     01 16 86 F1 | 	sub	arg03, #1
1edf8     00 18 0E F2 | 	cmp	arg04, #0 wz
1edfc     38 00 90 5D |  if_ne	jmp	#LR__3134
1ee00     0B 07 02 F6 | 	mov	_var04, arg03
1ee04     09 09 02 F6 | 	mov	_var05, arg01
1ee08                 | LR__3133
1ee08     04 07 12 F2 | 	cmp	_var04, _var05 wc
1ee0c     5C 00 90 3D |  if_ae	jmp	#LR__3137
1ee10     03 05 02 F6 | 	mov	_var03, _var04
1ee14     00 05 02 F1 | 	add	_var03, _var01
1ee18     02 05 C2 FA | 	rdbyte	_var03, _var03
1ee1c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1ee20     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1ee24     01 06 06 A1 |  if_e	add	_var04, #1
1ee28     03 FB 01 A6 |  if_e	mov	result1, _var04
1ee2c     40 00 90 AD |  if_e	jmp	#LR__3138
1ee30     01 06 06 F1 | 	add	_var04, #1
1ee34     D0 FF 9F FD | 	jmp	#LR__3133
1ee38                 | LR__3134
1ee38     0B 07 02 F6 | 	mov	_var04, arg03
1ee3c                 | LR__3135
1ee3c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1ee40     28 00 90 1D |  if_a	jmp	#LR__3136
1ee44     03 09 02 F6 | 	mov	_var05, _var04
1ee48     00 09 02 F1 | 	add	_var05, _var01
1ee4c     04 05 C2 FA | 	rdbyte	_var03, _var05
1ee50     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1ee54     04 05 0A F2 | 	cmp	_var03, _var05 wz
1ee58     01 06 06 A1 |  if_e	add	_var04, #1
1ee5c     03 FB 01 A6 |  if_e	mov	result1, _var04
1ee60     0C 00 90 AD |  if_e	jmp	#LR__3138
1ee64     01 06 86 F1 | 	sub	_var04, #1
1ee68     D0 FF 9F FD | 	jmp	#LR__3135
1ee6c                 | LR__3136
1ee6c                 | LR__3137
1ee6c     00 FA 05 F6 | 	mov	result1, #0
1ee70                 | LR__3138
1ee70                 | __system____ScanForChar_ret
1ee70     2D 00 64 FD | 	ret
1ee74                 | 
1ee74                 | __system___basic_dir
1ee74     05 4A 05 F6 | 	mov	COUNT_, #5
1ee78     A8 00 A0 FD | 	call	#pushregs_
1ee7c     4C F0 07 F1 | 	add	ptra, #76
1ee80     04 4E 05 F1 | 	add	fp, #4
1ee84     A7 12 62 FC | 	wrlong	arg01, fp
1ee88     04 4E 05 F1 | 	add	fp, #4
1ee8c     A7 14 62 FC | 	wrlong	arg02, fp
1ee90     04 4E 85 F1 | 	sub	fp, #4
1ee94     A7 14 0A FB | 	rdlong	arg02, fp wz
1ee98     04 4E 85 F1 | 	sub	fp, #4
1ee9c     04 4E 05 51 |  if_ne	add	fp, #4
1eea0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1eea4     04 4E 85 51 |  if_ne	sub	fp, #4
1eea8     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1eeac     70 00 90 AD |  if_e	jmp	#LR__3140
1eeb0     03 00 00 FF 
1eeb4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1eeb8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1eebc     03 00 00 FF 
1eec0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1eec4     03 00 00 5F 
1eec8     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1eecc     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1eed0     03 00 00 5F 
1eed4     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1eed8     14 EA BF 5D |  if_ne	call	#__system__closedir
1eedc     44 01 00 FF 
1eee0     AC 13 06 F6 | 	mov	arg01, ##@LR__4298
1eee4     1C E9 BF FD | 	call	#__system__opendir
1eee8     03 00 00 FF 
1eeec     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1eef0     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1eef4     08 4E 05 F1 | 	add	fp, #8
1eef8     A7 20 02 FB | 	rdlong	local02, fp
1eefc     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ef00     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1ef04     04 4E 85 F1 | 	sub	fp, #4
1ef08     A7 20 02 FB | 	rdlong	local02, fp
1ef0c     04 4E 85 F1 | 	sub	fp, #4
1ef10     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ef14     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1ef18     03 00 00 FF 
1ef1c     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1ef20                 | LR__3140
1ef20     03 00 00 FF 
1ef24     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ef28     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ef2c     03 00 00 FF 
1ef30     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ef34     44 01 00 AF 
1ef38     AE FB 05 A6 |  if_e	mov	result1, ##@LR__4299
1ef3c     84 02 90 AD |  if_e	jmp	#LR__3153
1ef40                 | LR__3141
1ef40     03 00 00 FF 
1ef44     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ef48     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ef4c     03 00 00 FF 
1ef50     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ef54     0C EA BF FD | 	call	#__system__readdir
1ef58     0C 4E 05 F1 | 	add	fp, #12
1ef5c     A7 FA 61 FC | 	wrlong	result1, fp
1ef60     0C 4E 85 F1 | 	sub	fp, #12
1ef64     00 FA 0D F2 | 	cmp	result1, #0 wz
1ef68     38 00 90 5D |  if_ne	jmp	#LR__3142
1ef6c     03 00 00 FF 
1ef70     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ef74     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ef78     03 00 00 FF 
1ef7c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ef80     6C E9 BF FD | 	call	#__system__closedir
1ef84     03 00 00 FF 
1ef88     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ef8c     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1ef90     03 00 00 FF 
1ef94     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ef98     44 01 00 FF 
1ef9c     B0 FB 05 F6 | 	mov	result1, ##@LR__4300
1efa0     20 02 90 FD | 	jmp	#LR__3153
1efa4                 | LR__3142
1efa4     0C 4E 05 F1 | 	add	fp, #12
1efa8     A7 12 02 FB | 	rdlong	arg01, fp
1efac     0C 4E 85 F1 | 	sub	fp, #12
1efb0     03 00 00 FF 
1efb4     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1efb8     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1efbc     03 00 00 FF 
1efc0     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1efc4     48 07 B0 FD | 	call	#__system___pat_match
1efc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1efcc     70 FF 9F AD |  if_e	jmp	#LR__3141
1efd0     03 00 00 FF 
1efd4     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1efd8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1efdc     03 00 00 FF 
1efe0     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1efe4     78 01 90 AD |  if_e	jmp	#LR__3149
1efe8     0C 4E 05 F1 | 	add	fp, #12
1efec     A7 12 02 FB | 	rdlong	arg01, fp
1eff0     04 4E 05 F1 | 	add	fp, #4
1eff4     A7 14 02 F6 | 	mov	arg02, fp
1eff8     10 4E 85 F1 | 	sub	fp, #16
1effc     68 F2 BF FD | 	call	#__system__stat
1f000     40 4E 05 F1 | 	add	fp, #64
1f004     A7 FA 61 FC | 	wrlong	result1, fp
1f008     40 4E 85 F1 | 	sub	fp, #64
1f00c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f010     44 01 00 5F 
1f014     B2 FB 05 56 |  if_ne	mov	result1, ##@LR__4301
1f018     A8 01 90 5D |  if_ne	jmp	#LR__3153
1f01c     18 4E 05 F1 | 	add	fp, #24
1f020     A7 20 02 FB | 	rdlong	local02, fp
1f024     78 00 00 FF 
1f028     00 20 06 F5 | 	and	local02, ##61440
1f02c     2C 4E 05 F1 | 	add	fp, #44
1f030     A7 20 62 FC | 	wrlong	local02, fp
1f034     38 4E 85 F1 | 	sub	fp, #56
1f038     A7 20 02 FB | 	rdlong	local02, fp
1f03c     0C 4E 85 F1 | 	sub	fp, #12
1f040     10 21 C2 FA | 	rdbyte	local02, local02
1f044     2E 20 0E F2 | 	cmp	local02, #46 wz
1f048     08 4E 05 A1 |  if_e	add	fp, #8
1f04c     A7 04 68 AC |  if_e	wrlong	#2, fp
1f050     08 4E C5 F3 | 	sumz	fp, #8
1f054     A7 00 68 5C |  if_ne	wrlong	#0, fp
1f058     08 4E 85 51 |  if_ne	sub	fp, #8
1f05c     44 4E 05 F1 | 	add	fp, #68
1f060     A7 20 02 FB | 	rdlong	local02, fp
1f064     44 4E 85 F1 | 	sub	fp, #68
1f068     08 00 00 FF 
1f06c     00 20 0E F2 | 	cmp	local02, ##4096 wz
1f070     18 00 90 5D |  if_ne	jmp	#LR__3143
1f074     08 4E 05 F1 | 	add	fp, #8
1f078     A7 20 02 FB | 	rdlong	local02, fp
1f07c     10 20 46 F5 | 	or	local02, #16
1f080     A7 20 62 FC | 	wrlong	local02, fp
1f084     08 4E 85 F1 | 	sub	fp, #8
1f088     AC 00 90 FD | 	jmp	#LR__3148
1f08c                 | LR__3143
1f08c     44 4E 05 F1 | 	add	fp, #68
1f090     A7 20 02 FB | 	rdlong	local02, fp
1f094     44 4E 85 F1 | 	sub	fp, #68
1f098     10 00 00 FF 
1f09c     00 20 0E F2 | 	cmp	local02, ##8192 wz
1f0a0     44 4E 05 51 |  if_ne	add	fp, #68
1f0a4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1f0a8     44 4E 85 51 |  if_ne	sub	fp, #68
1f0ac     18 00 00 5F 
1f0b0     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1f0b4     44 4E 05 51 |  if_ne	add	fp, #68
1f0b8     0F 23 02 56 |  if_ne	mov	local03, local01
1f0bc     44 4E 85 51 |  if_ne	sub	fp, #68
1f0c0     20 00 00 5F 
1f0c4     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1f0c8     18 00 90 5D |  if_ne	jmp	#LR__3144
1f0cc     08 4E 05 F1 | 	add	fp, #8
1f0d0     A7 20 02 FB | 	rdlong	local02, fp
1f0d4     04 20 46 F5 | 	or	local02, #4
1f0d8     A7 20 62 FC | 	wrlong	local02, fp
1f0dc     08 4E 85 F1 | 	sub	fp, #8
1f0e0     54 00 90 FD | 	jmp	#LR__3147
1f0e4                 | LR__3144
1f0e4     18 4E 05 F1 | 	add	fp, #24
1f0e8     A7 20 02 FB | 	rdlong	local02, fp
1f0ec     18 4E 85 F1 | 	sub	fp, #24
1f0f0     92 20 CE F7 | 	test	local02, #146 wz
1f0f4     18 00 90 5D |  if_ne	jmp	#LR__3145
1f0f8     08 4E 05 F1 | 	add	fp, #8
1f0fc     A7 20 02 FB | 	rdlong	local02, fp
1f100     01 20 46 F5 | 	or	local02, #1
1f104     A7 20 62 FC | 	wrlong	local02, fp
1f108     08 4E 85 F1 | 	sub	fp, #8
1f10c     28 00 90 FD | 	jmp	#LR__3146
1f110                 | LR__3145
1f110     44 4E 05 F1 | 	add	fp, #68
1f114     A7 24 02 FB | 	rdlong	local04, fp
1f118     44 4E 85 F1 | 	sub	fp, #68
1f11c     08 00 00 FF 
1f120     00 24 0E F2 | 	cmp	local04, ##4096 wz
1f124     08 4E 05 51 |  if_ne	add	fp, #8
1f128     A7 24 02 5B |  if_ne	rdlong	local04, fp
1f12c     20 24 46 55 |  if_ne	or	local04, #32
1f130     A7 24 62 5C |  if_ne	wrlong	local04, fp
1f134     08 4E 85 51 |  if_ne	sub	fp, #8
1f138                 | LR__3146
1f138                 | LR__3147
1f138                 | LR__3148
1f138     08 4E 05 F1 | 	add	fp, #8
1f13c     A7 24 02 FB | 	rdlong	local04, fp
1f140     08 4E 85 F1 | 	sub	fp, #8
1f144     03 00 00 FF 
1f148     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1f14c     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1f150     03 00 00 FF 
1f154     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1f158     0F 25 CA F7 | 	test	local04, local01 wz
1f15c     E0 FD 9F AD |  if_e	jmp	#LR__3141
1f160                 | LR__3149
1f160     0C 4E 05 F1 | 	add	fp, #12
1f164     A7 12 02 FB | 	rdlong	arg01, fp
1f168     0C 4E 85 F1 | 	sub	fp, #12
1f16c     09 27 02 F6 | 	mov	local05, arg01
1f170     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
1f174                 | LR__3150
1f174     13 FB C9 FA | 	rdbyte	result1, local05 wz
1f178     01 26 06 51 |  if_ne	add	local05, #1
1f17c     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
1f180                 | LR__3151
1f180     13 13 C2 F2 | 	subr	arg01, local05
1f184     01 12 06 F1 | 	add	arg01, #1
1f188     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1f18c     48 4E 05 F1 | 	add	fp, #72
1f190     A7 FA 61 FC | 	wrlong	result1, fp
1f194     48 4E 85 F1 | 	sub	fp, #72
1f198     00 FA 0D F2 | 	cmp	result1, #0 wz
1f19c     18 00 90 AD |  if_e	jmp	#LR__3152
1f1a0     48 4E 05 F1 | 	add	fp, #72
1f1a4     A7 12 02 FB | 	rdlong	arg01, fp
1f1a8     3C 4E 85 F1 | 	sub	fp, #60
1f1ac     A7 14 02 FB | 	rdlong	arg02, fp
1f1b0     0C 4E 85 F1 | 	sub	fp, #12
1f1b4     34 A2 BF FD | 	call	#__system____builtin_strcpy
1f1b8                 | LR__3152
1f1b8     48 4E 05 F1 | 	add	fp, #72
1f1bc     A7 FA 01 FB | 	rdlong	result1, fp
1f1c0     48 4E 85 F1 | 	sub	fp, #72
1f1c4                 | LR__3153
1f1c4     A7 F0 03 F6 | 	mov	ptra, fp
1f1c8     B2 00 A0 FD | 	call	#popregs_
1f1cc                 | __system___basic_dir_ret
1f1cc     2D 00 64 FD | 	ret
1f1d0                 | 
1f1d0                 | __system__pack_0491
1f1d0     09 01 02 F6 | 	mov	_var01, arg01
1f1d4     7F 16 06 F1 | 	add	arg03, #127
1f1d8     04 18 CE F7 | 	test	arg04, #4 wz
1f1dc     10 00 90 AD |  if_e	jmp	#LR__3160
1f1e0     00 00 0E F2 | 	cmp	_var01, #0 wz
1f1e4     16 00 C6 A9 |  if_e	decod	_var01, #22
1f1e8     F7 00 26 F4 | 	bith	_var01, #247
1f1ec     B4 00 90 FD | 	jmp	#LR__3169
1f1f0                 | LR__3160
1f1f0     02 18 CE F7 | 	test	arg04, #2 wz
1f1f4     00 C0 3F 5F 
1f1f8     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1f1fc     00 14 06 56 |  if_ne	mov	arg02, #0
1f200     A0 00 90 5D |  if_ne	jmp	#LR__3168
1f204     08 18 CE F7 | 	test	arg04, #8 wz
1f208     00 00 06 56 |  if_ne	mov	_var01, #0
1f20c     94 00 90 5D |  if_ne	jmp	#LR__3167
1f210     FF 16 56 F2 | 	cmps	arg03, #255 wc
1f214     00 C0 3F 3F 
1f218     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1f21c     00 14 06 36 |  if_ae	mov	arg02, #0
1f220     80 00 90 3D |  if_ae	jmp	#LR__3166
1f224     01 16 56 F2 | 	cmps	arg03, #1 wc
1f228     6C 00 90 3D |  if_ae	jmp	#LR__3164
1f22c     01 14 46 F0 | 	shr	arg02, #1
1f230     00 03 02 F6 | 	mov	_var02, _var01
1f234     01 02 06 F5 | 	and	_var02, #1
1f238     1F 02 66 F0 | 	shl	_var02, #31
1f23c     01 15 42 F5 | 	or	arg02, _var02
1f240     01 00 46 F0 | 	shr	_var01, #1
1f244     97 1E 48 FB | 	callpa	#(@LR__3162-@LR__3161)>>2,fcache_load_ptr_
1f248                 | LR__3161
1f248     00 16 56 F2 | 	cmps	arg03, #0 wc
1f24c     34 00 90 3D |  if_ae	jmp	#LR__3163
1f250     00 00 0E F2 | 	cmp	_var01, #0 wz
1f254     2C 00 90 AD |  if_e	jmp	#LR__3163
1f258     0A 13 02 F6 | 	mov	arg01, arg02
1f25c     01 12 06 F5 | 	and	arg01, #1
1f260     01 16 06 F1 | 	add	arg03, #1
1f264     01 14 46 F0 | 	shr	arg02, #1
1f268     00 03 02 F6 | 	mov	_var02, _var01
1f26c     01 02 06 F5 | 	and	_var02, #1
1f270     1F 02 66 F0 | 	shl	_var02, #31
1f274     01 15 42 F5 | 	or	arg02, _var02
1f278     09 15 42 F5 | 	or	arg02, arg01
1f27c     01 00 46 F0 | 	shr	_var01, #1
1f280     C4 FF 9F FD | 	jmp	#LR__3161
1f284                 | LR__3162
1f284                 | LR__3163
1f284     00 16 56 F2 | 	cmps	arg03, #0 wc
1f288     18 00 90 3D |  if_ae	jmp	#LR__3165
1f28c     00 14 0E F2 | 	cmp	arg02, #0 wz
1f290     6F 14 62 FD | 	wrnz	arg02
1f294     0C 00 90 FD | 	jmp	#LR__3165
1f298                 | LR__3164
1f298     17 01 06 F4 | 	bitl	_var01, #279
1f29c     17 16 66 F0 | 	shl	arg03, #23
1f2a0     0B 01 42 F5 | 	or	_var01, arg03
1f2a4                 | LR__3165
1f2a4                 | LR__3166
1f2a4                 | LR__3167
1f2a4                 | LR__3168
1f2a4                 | LR__3169
1f2a4     01 00 CE F7 | 	test	_var01, #1 wz
1f2a8     01 14 46 55 |  if_ne	or	arg02, #1
1f2ac     0A 17 02 F6 | 	mov	arg03, arg02
1f2b0     00 02 06 F6 | 	mov	_var02, #0
1f2b4     FF FF 3F FF 
1f2b8     FF 15 06 F1 | 	add	arg02, ##2147483647
1f2bc     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1f2c0     01 02 06 C6 |  if_b	mov	_var02, #1
1f2c4     01 01 02 F1 | 	add	_var01, _var02
1f2c8     01 18 CE F7 | 	test	arg04, #1 wz
1f2cc     1F 00 26 54 |  if_ne	bith	_var01, #31
1f2d0     00 FB 01 F6 | 	mov	result1, _var01
1f2d4                 | __system__pack_0491_ret
1f2d4     2D 00 64 FD | 	ret
1f2d8                 | 
1f2d8                 | __system___rxtxioctl_0581
1f2d8     00 15 0E F2 | 	cmp	arg02, #256 wz
1f2dc     0C 00 90 AD |  if_e	jmp	#LR__3170
1f2e0     01 15 0E F2 | 	cmp	arg02, #257 wz
1f2e4     1C 00 90 AD |  if_e	jmp	#LR__3171
1f2e8     30 00 90 FD | 	jmp	#LR__3172
1f2ec                 | LR__3170
1f2ec     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1f2f0     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1f2f4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1f2f8     0B FB 61 FC | 	wrlong	result1, arg03
1f2fc     00 FA 05 F6 | 	mov	result1, #0
1f300     28 00 90 FD | 	jmp	#LR__3173
1f304                 | LR__3171
1f304     0B 13 02 FB | 	rdlong	arg01, arg03
1f308     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1f30c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f310     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1f314     00 FA 05 F6 | 	mov	result1, #0
1f318     10 00 90 FD | 	jmp	#LR__3173
1f31c                 | LR__3172
1f31c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1f320     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1f324     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1f328     01 FA 65 F6 | 	neg	result1, #1
1f32c                 | LR__3173
1f32c                 | __system___rxtxioctl_0581_ret
1f32c     2D 00 64 FD | 	ret
1f330                 | 
1f330                 | __system____dummy_flush_0582
1f330     00 FA 05 F6 | 	mov	result1, #0
1f334                 | __system____dummy_flush_0582_ret
1f334     2D 00 64 FD | 	ret
1f338                 | 
1f338                 | __system___vfsread
1f338     03 4A 05 F6 | 	mov	COUNT_, #3
1f33c     A8 00 A0 FD | 	call	#pushregs_
1f340     28 F0 07 F1 | 	add	ptra, #40
1f344     04 4E 05 F1 | 	add	fp, #4
1f348     A7 12 62 FC | 	wrlong	arg01, fp
1f34c     04 4E 05 F1 | 	add	fp, #4
1f350     A7 14 62 FC | 	wrlong	arg02, fp
1f354     04 4E 05 F1 | 	add	fp, #4
1f358     A7 16 62 FC | 	wrlong	arg03, fp
1f35c     04 4E 85 F1 | 	sub	fp, #4
1f360     A7 FA 01 FB | 	rdlong	result1, fp
1f364     14 4E 05 F1 | 	add	fp, #20
1f368     A7 FA 61 FC | 	wrlong	result1, fp
1f36c     04 4E 05 F1 | 	add	fp, #4
1f370     A7 00 68 FC | 	wrlong	#0, fp
1f374     1C 4E 85 F1 | 	sub	fp, #28
1f378     A7 12 02 FB | 	rdlong	arg01, fp
1f37c     04 4E 85 F1 | 	sub	fp, #4
1f380     08 12 06 F1 | 	add	arg01, #8
1f384     09 FB 01 FB | 	rdlong	result1, arg01
1f388     01 FA CD F7 | 	test	result1, #1 wz
1f38c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1f390     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1f394     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f398     01 FA 65 A6 |  if_e	neg	result1, #1
1f39c     74 02 90 AD |  if_e	jmp	#LR__3186
1f3a0     04 4E 05 F1 | 	add	fp, #4
1f3a4     A7 12 02 FB | 	rdlong	arg01, fp
1f3a8     04 4E 85 F1 | 	sub	fp, #4
1f3ac     14 12 06 F1 | 	add	arg01, #20
1f3b0     09 FB 09 FB | 	rdlong	result1, arg01 wz
1f3b4     B8 00 90 AD |  if_e	jmp	#LR__3181
1f3b8     04 4E 05 F1 | 	add	fp, #4
1f3bc     A7 12 02 FB | 	rdlong	arg01, fp
1f3c0     09 17 02 F6 | 	mov	arg03, arg01
1f3c4     14 16 06 F1 | 	add	arg03, #20
1f3c8     0B 1F 02 FB | 	rdlong	local01, arg03
1f3cc     0F 21 02 F6 | 	mov	local02, local01
1f3d0     13 1E 46 F7 | 	zerox	local01, #19
1f3d4     14 20 46 F0 | 	shr	local02, #20
1f3d8     02 20 66 F0 | 	shl	local02, #2
1f3dc     ED 20 02 F1 | 	add	local02, __methods__
1f3e0     10 21 02 FB | 	rdlong	local02, local02
1f3e4     04 4E 05 F1 | 	add	fp, #4
1f3e8     A7 14 02 FB | 	rdlong	arg02, fp
1f3ec     04 4E 05 F1 | 	add	fp, #4
1f3f0     A7 16 02 FB | 	rdlong	arg03, fp
1f3f4     0C 4E 85 F1 | 	sub	fp, #12
1f3f8     F2 22 02 F6 | 	mov	local03, objptr
1f3fc     0F E5 01 F6 | 	mov	objptr, local01
1f400     2D 20 62 FD | 	call	local02
1f404     11 E5 01 F6 | 	mov	objptr, local03
1f408     10 4E 05 F1 | 	add	fp, #16
1f40c     A7 FA 61 FC | 	wrlong	result1, fp
1f410     10 4E 85 F1 | 	sub	fp, #16
1f414     00 FA 55 F2 | 	cmps	result1, #0 wc
1f418     44 00 90 3D |  if_ae	jmp	#LR__3180
1f41c     04 4E 05 F1 | 	add	fp, #4
1f420     A7 22 02 FB | 	rdlong	local03, fp
1f424     11 1F 02 F6 | 	mov	local01, local03
1f428     08 22 06 F1 | 	add	local03, #8
1f42c     11 21 02 FB | 	rdlong	local02, local03
1f430     20 20 46 F5 | 	or	local02, #32
1f434     08 1E 06 F1 | 	add	local01, #8
1f438     0F 21 62 FC | 	wrlong	local02, local01
1f43c     0C 4E 05 F1 | 	add	fp, #12
1f440     A7 12 0A FB | 	rdlong	arg01, fp wz
1f444     10 4E 85 F1 | 	sub	fp, #16
1f448     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1f44c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f450     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1f454     01 FA 65 56 |  if_ne	neg	result1, #1
1f458     00 FA 05 A6 |  if_e	mov	result1, #0
1f45c     B4 01 90 FD | 	jmp	#LR__3186
1f460                 | LR__3180
1f460     10 4E 05 F1 | 	add	fp, #16
1f464     A7 FA 01 FB | 	rdlong	result1, fp
1f468     10 4E 85 F1 | 	sub	fp, #16
1f46c     A4 01 90 FD | 	jmp	#LR__3186
1f470                 | LR__3181
1f470     04 4E 05 F1 | 	add	fp, #4
1f474     A7 12 02 FB | 	rdlong	arg01, fp
1f478     20 12 06 F1 | 	add	arg01, #32
1f47c     09 13 0A FB | 	rdlong	arg01, arg01 wz
1f480     14 4E 05 F1 | 	add	fp, #20
1f484     A7 12 62 FC | 	wrlong	arg01, fp
1f488     18 4E 85 F1 | 	sub	fp, #24
1f48c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1f490     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1f494     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f498     01 FA 65 A6 |  if_e	neg	result1, #1
1f49c     74 01 90 AD |  if_e	jmp	#LR__3186
1f4a0     04 4E 05 F1 | 	add	fp, #4
1f4a4     A7 22 02 FB | 	rdlong	local03, fp
1f4a8     04 4E 85 F1 | 	sub	fp, #4
1f4ac     28 22 06 F1 | 	add	local03, #40
1f4b0     11 21 0A FB | 	rdlong	local02, local03 wz
1f4b4     7C 00 90 AD |  if_e	jmp	#LR__3183
1f4b8     04 4E 05 F1 | 	add	fp, #4
1f4bc     A7 12 02 FB | 	rdlong	arg01, fp
1f4c0     09 23 02 F6 | 	mov	local03, arg01
1f4c4     28 22 06 F1 | 	add	local03, #40
1f4c8     11 1F 02 FB | 	rdlong	local01, local03
1f4cc     0F 21 02 F6 | 	mov	local02, local01
1f4d0     13 1E 46 F7 | 	zerox	local01, #19
1f4d4     14 20 46 F0 | 	shr	local02, #20
1f4d8     02 20 66 F0 | 	shl	local02, #2
1f4dc     ED 20 02 F1 | 	add	local02, __methods__
1f4e0     10 21 02 FB | 	rdlong	local02, local02
1f4e4     20 4E 05 F1 | 	add	fp, #32
1f4e8     A7 16 02 F6 | 	mov	arg03, fp
1f4ec     24 4E 85 F1 | 	sub	fp, #36
1f4f0     00 15 06 F6 | 	mov	arg02, #256
1f4f4     F2 22 02 F6 | 	mov	local03, objptr
1f4f8     0F E5 01 F6 | 	mov	objptr, local01
1f4fc     2D 20 62 FD | 	call	local02
1f500     11 E5 01 F6 | 	mov	objptr, local03
1f504     10 4E 05 F1 | 	add	fp, #16
1f508     A7 FA 61 FC | 	wrlong	result1, fp
1f50c     00 FA 4D F2 | 	cmps	result1, #0 wz
1f510     10 4E 85 F1 | 	sub	fp, #16
1f514     1C 00 90 5D |  if_ne	jmp	#LR__3182
1f518     24 4E 05 F1 | 	add	fp, #36
1f51c     A7 20 02 FB | 	rdlong	local02, fp
1f520     24 4E 85 F1 | 	sub	fp, #36
1f524     02 20 CE F7 | 	test	local02, #2 wz
1f528     20 4E 05 51 |  if_ne	add	fp, #32
1f52c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1f530     20 4E 85 51 |  if_ne	sub	fp, #32
1f534                 | LR__3182
1f534                 | LR__3183
1f534     10 4E 05 F1 | 	add	fp, #16
1f538     A7 00 68 FC | 	wrlong	#0, fp
1f53c     10 4E 85 F1 | 	sub	fp, #16
1f540                 | LR__3184
1f540     0C 4E 05 F1 | 	add	fp, #12
1f544     A7 22 02 FB | 	rdlong	local03, fp
1f548     0C 4E 85 F1 | 	sub	fp, #12
1f54c     01 22 16 F2 | 	cmp	local03, #1 wc
1f550     B4 00 90 CD |  if_b	jmp	#LR__3185
1f554     18 4E 05 F1 | 	add	fp, #24
1f558     A7 20 02 FB | 	rdlong	local02, fp
1f55c     10 23 02 F6 | 	mov	local03, local02
1f560     13 22 46 F7 | 	zerox	local03, #19
1f564     14 20 46 F0 | 	shr	local02, #20
1f568     02 20 66 F0 | 	shl	local02, #2
1f56c     ED 20 02 F1 | 	add	local02, __methods__
1f570     10 21 02 FB | 	rdlong	local02, local02
1f574     14 4E 85 F1 | 	sub	fp, #20
1f578     A7 12 02 FB | 	rdlong	arg01, fp
1f57c     04 4E 85 F1 | 	sub	fp, #4
1f580     F2 1E 02 F6 | 	mov	local01, objptr
1f584     11 E5 01 F6 | 	mov	objptr, local03
1f588     2D 20 62 FD | 	call	local02
1f58c     0F E5 01 F6 | 	mov	objptr, local01
1f590     14 4E 05 F1 | 	add	fp, #20
1f594     A7 FA 61 FC | 	wrlong	result1, fp
1f598     14 4E 85 F1 | 	sub	fp, #20
1f59c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f5a0     64 00 90 CD |  if_b	jmp	#LR__3185
1f5a4     1C 4E 05 F1 | 	add	fp, #28
1f5a8     A7 22 02 FB | 	rdlong	local03, fp
1f5ac     11 21 02 F6 | 	mov	local02, local03
1f5b0     01 20 06 F1 | 	add	local02, #1
1f5b4     A7 20 62 FC | 	wrlong	local02, fp
1f5b8     08 4E 85 F1 | 	sub	fp, #8
1f5bc     A7 20 02 FB | 	rdlong	local02, fp
1f5c0     11 21 42 FC | 	wrbyte	local02, local03
1f5c4     04 4E 85 F1 | 	sub	fp, #4
1f5c8     A7 22 02 FB | 	rdlong	local03, fp
1f5cc     01 22 06 F1 | 	add	local03, #1
1f5d0     A7 22 62 FC | 	wrlong	local03, fp
1f5d4     04 4E 85 F1 | 	sub	fp, #4
1f5d8     A7 22 02 FB | 	rdlong	local03, fp
1f5dc     01 22 86 F1 | 	sub	local03, #1
1f5e0     A7 22 62 FC | 	wrlong	local03, fp
1f5e4     14 4E 05 F1 | 	add	fp, #20
1f5e8     A7 22 0A FB | 	rdlong	local03, fp wz
1f5ec     20 4E 85 F1 | 	sub	fp, #32
1f5f0     4C FF 9F AD |  if_e	jmp	#LR__3184
1f5f4     14 4E 05 F1 | 	add	fp, #20
1f5f8     A7 20 02 FB | 	rdlong	local02, fp
1f5fc     14 4E 85 F1 | 	sub	fp, #20
1f600     0A 20 0E F2 | 	cmp	local02, #10 wz
1f604     38 FF 9F 5D |  if_ne	jmp	#LR__3184
1f608                 | LR__3185
1f608     10 4E 05 F1 | 	add	fp, #16
1f60c     A7 FA 01 FB | 	rdlong	result1, fp
1f610     10 4E 85 F1 | 	sub	fp, #16
1f614                 | LR__3186
1f614     A7 F0 03 F6 | 	mov	ptra, fp
1f618     B2 00 A0 FD | 	call	#popregs_
1f61c                 | __system___vfsread_ret
1f61c     2D 00 64 FD | 	ret
1f620                 | 
1f620                 | __system____default_filbuf
1f620     04 4A 05 F6 | 	mov	COUNT_, #4
1f624     A8 00 A0 FD | 	call	#pushregs_
1f628     09 1F 02 F6 | 	mov	local01, arg01
1f62c     0F 21 02 FB | 	rdlong	local02, local01
1f630     0C 20 06 F1 | 	add	local02, #12
1f634     10 FB 09 FB | 	rdlong	result1, local02 wz
1f638     0C 20 86 F1 | 	sub	local02, #12
1f63c     20 00 90 5D |  if_ne	jmp	#LR__3190
1f640     14 20 06 F1 | 	add	local02, #20
1f644     10 FB 01 F6 | 	mov	result1, local02
1f648     04 20 86 F1 | 	sub	local02, #4
1f64c     10 FB 61 FC | 	wrlong	result1, local02
1f650     04 20 86 F1 | 	sub	local02, #4
1f654     02 00 80 FF 
1f658     10 01 68 FC | 	wrlong	##1024, local02
1f65c     0C 20 86 F1 | 	sub	local02, #12
1f660                 | LR__3190
1f660     14 1E 06 F1 | 	add	local01, #20
1f664     0F 23 02 FB | 	rdlong	local03, local01
1f668     11 25 02 F6 | 	mov	local04, local03
1f66c     14 1E 86 F1 | 	sub	local01, #20
1f670     13 24 46 F7 | 	zerox	local04, #19
1f674     14 22 46 F0 | 	shr	local03, #20
1f678     02 22 66 F0 | 	shl	local03, #2
1f67c     ED 22 02 F1 | 	add	local03, __methods__
1f680     11 23 02 FB | 	rdlong	local03, local03
1f684     10 20 06 F1 | 	add	local02, #16
1f688     10 15 02 FB | 	rdlong	arg02, local02
1f68c     04 20 86 F1 | 	sub	local02, #4
1f690     10 17 02 FB | 	rdlong	arg03, local02
1f694     0C 20 86 F1 | 	sub	local02, #12
1f698     0F 13 02 F6 | 	mov	arg01, local01
1f69c     F2 1E 02 F6 | 	mov	local01, objptr
1f6a0     12 E5 01 F6 | 	mov	objptr, local04
1f6a4     2D 22 62 FD | 	call	local03
1f6a8     0F E5 01 F6 | 	mov	objptr, local01
1f6ac     FD 24 02 F6 | 	mov	local04, result1
1f6b0     00 24 56 F2 | 	cmps	local04, #0 wc
1f6b4     01 FA 65 C6 |  if_b	neg	result1, #1
1f6b8     28 00 90 CD |  if_b	jmp	#LR__3191
1f6bc     10 25 62 FC | 	wrlong	local04, local02
1f6c0     10 20 06 F1 | 	add	local02, #16
1f6c4     10 23 02 FB | 	rdlong	local03, local02
1f6c8     0C 20 86 F1 | 	sub	local02, #12
1f6cc     10 23 62 FC | 	wrlong	local03, local02
1f6d0     04 20 06 F1 | 	add	local02, #4
1f6d4     10 23 02 FB | 	rdlong	local03, local02
1f6d8     01 22 46 F5 | 	or	local03, #1
1f6dc     10 23 62 FC | 	wrlong	local03, local02
1f6e0     12 FB 01 F6 | 	mov	result1, local04
1f6e4                 | LR__3191
1f6e4     A7 F0 03 F6 | 	mov	ptra, fp
1f6e8     B2 00 A0 FD | 	call	#popregs_
1f6ec                 | __system____default_filbuf_ret
1f6ec     2D 00 64 FD | 	ret
1f6f0                 | 
1f6f0                 | __system__getlower_0967
1f6f0     41 12 56 F2 | 	cmps	arg01, #65 wc
1f6f4     10 00 90 CD |  if_b	jmp	#LR__3200
1f6f8     5B 12 56 F2 | 	cmps	arg01, #91 wc
1f6fc     09 FB 01 C6 |  if_b	mov	result1, arg01
1f700     20 FA 05 C1 |  if_b	add	result1, #32
1f704     04 00 90 CD |  if_b	jmp	#__system__getlower_0967_ret
1f708                 | LR__3200
1f708     09 FB 01 F6 | 	mov	result1, arg01
1f70c                 | __system__getlower_0967_ret
1f70c     2D 00 64 FD | 	ret
1f710                 | 
1f710                 | __system___pat_match
1f710     08 4A 05 F6 | 	mov	COUNT_, #8
1f714     A8 00 A0 FD | 	call	#pushregs_
1f718     09 1F 02 F6 | 	mov	local01, arg01
1f71c                 | LR__3210
1f71c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1f720     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1f724     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1f728     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1f72c     2C 00 90 AD |  if_e	jmp	#LR__3211
1f730     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f734     B8 FF BF FD | 	call	#__system__getlower_0967
1f738     FD 22 02 F6 | 	mov	local03, result1
1f73c     0F 13 C2 FA | 	rdbyte	arg01, local01
1f740     AC FF BF FD | 	call	#__system__getlower_0967
1f744     11 FB 09 F2 | 	cmp	result1, local03 wz
1f748     00 FA 05 56 |  if_ne	mov	result1, #0
1f74c     FC 00 90 5D |  if_ne	jmp	#LR__3219
1f750     01 1E 06 F1 | 	add	local01, #1
1f754     01 14 06 F1 | 	add	arg02, #1
1f758     C0 FF 9F FD | 	jmp	#LR__3210
1f75c                 | LR__3211
1f75c     0A 23 C2 FA | 	rdbyte	local03, arg02
1f760     2A 22 0E F2 | 	cmp	local03, #42 wz
1f764     D4 00 90 5D |  if_ne	jmp	#LR__3218
1f768     01 14 06 F1 | 	add	arg02, #1
1f76c     0A 21 C2 FA | 	rdbyte	local02, arg02
1f770     01 14 86 F1 | 	sub	arg02, #1
1f774     2E 20 0E F2 | 	cmp	local02, #46 wz
1f778     28 00 90 5D |  if_ne	jmp	#LR__3212
1f77c     02 14 06 F1 | 	add	arg02, #2
1f780     0A 21 C2 FA | 	rdbyte	local02, arg02
1f784     02 14 86 F1 | 	sub	arg02, #2
1f788     2A 20 0E F2 | 	cmp	local02, #42 wz
1f78c     03 14 06 A1 |  if_e	add	arg02, #3
1f790     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1f794     03 14 86 A1 |  if_e	sub	arg02, #3
1f798     12 27 0A A6 |  if_e	mov	local05, local04 wz
1f79c     01 FA 05 A6 |  if_e	mov	result1, #1
1f7a0     A8 00 90 AD |  if_e	jmp	#LR__3219
1f7a4                 | LR__3212
1f7a4     01 14 06 F1 | 	add	arg02, #1
1f7a8     00 28 06 F6 | 	mov	local06, #0
1f7ac     97 1E 48 FB | 	callpa	#(@LR__3215-@LR__3213)>>2,fcache_load_ptr_
1f7b0                 | LR__3213
1f7b0     14 2B 02 F6 | 	mov	local07, local06
1f7b4     0A 2B 02 F1 | 	add	local07, arg02
1f7b8     15 2B CA FA | 	rdbyte	local07, local07 wz
1f7bc     14 27 02 56 |  if_ne	mov	local05, local06
1f7c0     01 26 06 51 |  if_ne	add	local05, #1
1f7c4     13 29 02 56 |  if_ne	mov	local06, local05
1f7c8     E4 FF 9F 5D |  if_ne	jmp	#LR__3213
1f7cc     00 2C 06 F6 | 	mov	local08, #0
1f7d0                 | LR__3214
1f7d0     16 2B 02 F6 | 	mov	local07, local08
1f7d4     0F 2B 02 F1 | 	add	local07, local01
1f7d8     15 2B CA FA | 	rdbyte	local07, local07 wz
1f7dc     16 27 02 56 |  if_ne	mov	local05, local08
1f7e0     01 26 06 51 |  if_ne	add	local05, #1
1f7e4     13 2D 02 56 |  if_ne	mov	local08, local05
1f7e8     E4 FF 9F 5D |  if_ne	jmp	#LR__3214
1f7ec                 | LR__3215
1f7ec     14 2D 52 F2 | 	cmps	local08, local06 wc
1f7f0     00 FA 05 C6 |  if_b	mov	result1, #0
1f7f4     54 00 90 CD |  if_b	jmp	#LR__3219
1f7f8     16 21 02 F6 | 	mov	local02, local08
1f7fc     14 21 82 F1 | 	sub	local02, local06
1f800     10 1F 02 F1 | 	add	local01, local02
1f804                 | LR__3216
1f804     01 28 56 F2 | 	cmps	local06, #1 wc
1f808     30 00 90 CD |  if_b	jmp	#LR__3217
1f80c     0F 13 C2 FA | 	rdbyte	arg01, local01
1f810     DC FE BF FD | 	call	#__system__getlower_0967
1f814     FD 2C 02 F6 | 	mov	local08, result1
1f818     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f81c     D0 FE BF FD | 	call	#__system__getlower_0967
1f820     FD 2C 0A F2 | 	cmp	local08, result1 wz
1f824     00 FA 05 56 |  if_ne	mov	result1, #0
1f828     20 00 90 5D |  if_ne	jmp	#LR__3219
1f82c     01 1E 06 F1 | 	add	local01, #1
1f830     01 14 06 F1 | 	add	arg02, #1
1f834     01 28 86 F1 | 	sub	local06, #1
1f838     C8 FF 9F FD | 	jmp	#LR__3216
1f83c                 | LR__3217
1f83c                 | LR__3218
1f83c     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1f840     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1f844     01 FA 05 A6 |  if_e	mov	result1, #1
1f848     00 FA 05 56 |  if_ne	mov	result1, #0
1f84c                 | LR__3219
1f84c     A7 F0 03 F6 | 	mov	ptra, fp
1f850     B2 00 A0 FD | 	call	#popregs_
1f854                 | __system___pat_match_ret
1f854     2D 00 64 FD | 	ret
1f858                 | 
1f858                 | _fatfs_cc_ff_uni2oem
1f858     00 00 06 F6 | 	mov	_var01, #0
1f85c     80 12 16 F2 | 	cmp	arg01, #128 wc
1f860     09 01 02 C6 |  if_b	mov	_var01, arg01
1f864     58 00 90 CD |  if_b	jmp	#LR__3224
1f868     80 00 00 FF 
1f86c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1f870     4C 00 90 3D |  if_ae	jmp	#LR__3223
1f874     0A FB 31 F9 | 	getword	result1, arg02, #0
1f878     01 00 00 FF 
1f87c     52 FB 0D F2 | 	cmp	result1, ##850 wz
1f880     3C 00 90 5D |  if_ne	jmp	#LR__3223
1f884                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1f884     00 00 06 F6 | 	mov	_var01, #0
1f888     97 14 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
1f88c                 | LR__3220
1f88c     00 FB 31 F9 | 	getword	result1, _var01, #0
1f890     80 FA 15 F2 | 	cmp	result1, #128 wc
1f894     1C 00 90 3D |  if_ae	jmp	#LR__3222
1f898     00 FB 31 F9 | 	getword	result1, _var01, #0
1f89c     01 FA 65 F0 | 	shl	result1, #1
1f8a0     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1f8a4     FD FA E1 FA | 	rdword	result1, result1
1f8a8     FD 12 0A F2 | 	cmp	arg01, result1 wz
1f8ac     01 00 06 51 |  if_ne	add	_var01, #1
1f8b0     D8 FF 9F 5D |  if_ne	jmp	#LR__3220
1f8b4                 | LR__3221
1f8b4                 | LR__3222
1f8b4     00 01 32 F9 | 	getword	_var01, _var01, #0
1f8b8     80 00 06 F1 | 	add	_var01, #128
1f8bc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1f8c0                 | LR__3223
1f8c0                 | LR__3224
1f8c0                 | ' 			c = (c + 0x80) & 0xFF;
1f8c0                 | ' 		}
1f8c0                 | ' 	}
1f8c0                 | ' 
1f8c0                 | ' 	return c;
1f8c0     00 FB 01 F6 | 	mov	result1, _var01
1f8c4                 | _fatfs_cc_ff_uni2oem_ret
1f8c4     2D 00 64 FD | 	ret
1f8c8                 | 
1f8c8                 | _fatfs_cc_ff_oem2uni
1f8c8     00 00 06 F6 | 	mov	_var01, #0
1f8cc     09 FB 31 F9 | 	getword	result1, arg01, #0
1f8d0     80 FA 15 F2 | 	cmp	result1, #128 wc
1f8d4     09 01 02 C6 |  if_b	mov	_var01, arg01
1f8d8     2C 00 90 CD |  if_b	jmp	#LR__3231
1f8dc     0A 15 32 F9 | 	getword	arg02, arg02, #0
1f8e0     01 00 00 FF 
1f8e4     52 15 0E F2 | 	cmp	arg02, ##850 wz
1f8e8     1C 00 90 5D |  if_ne	jmp	#LR__3230
1f8ec     09 FB 31 F9 | 	getword	result1, arg01, #0
1f8f0     00 FB 15 F2 | 	cmp	result1, #256 wc
1f8f4     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1f8f8     80 12 86 C1 |  if_b	sub	arg01, #128
1f8fc     01 12 66 C0 |  if_b	shl	arg01, #1
1f900     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1f904     09 01 E2 CA |  if_b	rdword	_var01, arg01
1f908                 | LR__3230
1f908                 | LR__3231
1f908                 | ' 		}
1f908                 | ' 	}
1f908                 | ' 
1f908                 | ' 	return c;
1f908     00 FB 01 F6 | 	mov	result1, _var01
1f90c                 | _fatfs_cc_ff_oem2uni_ret
1f90c     2D 00 64 FD | 	ret
1f910                 | 
1f910                 | _fatfs_cc_ff_wtoupper
1f910     09 01 02 F6 | 	mov	_var01, arg01
1f914     80 00 00 FF 
1f918     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1f91c     60 01 90 3D |  if_ae	jmp	#LR__3253
1f920     00 03 02 F6 | 	mov	_var02, _var01
1f924     01 01 32 F9 | 	getword	_var01, _var02, #0
1f928     08 00 00 FF 
1f92c     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1f930     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1f934     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1f938     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1f93c     01 00 00 3F 
1f940     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1f944     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1f948     01 00 00 3F 
1f94c     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1f950     02 07 02 F6 | 	mov	_var04, _var03
1f954                 | ' 		uc = (WORD)uni;
1f954                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1f954                 | ' 		for (;;) {
1f954                 | LR__3240
1f954     03 09 E2 FA | 	rdword	_var05, _var04
1f958     04 05 02 F6 | 	mov	_var03, _var05
1f95c     0F 04 4E F7 | 	zerox	_var03, #15 wz
1f960     02 06 06 F1 | 	add	_var04, #2
1f964     14 01 90 AD |  if_e	jmp	#LR__3252
1f968     01 05 32 F9 | 	getword	_var03, _var02, #0
1f96c     04 01 32 F9 | 	getword	_var01, _var05, #0
1f970     00 05 12 F2 | 	cmp	_var03, _var01 wc
1f974     04 01 90 CD |  if_b	jmp	#LR__3252
1f978     03 0B E2 FA | 	rdword	_var06, _var04
1f97c     05 0D 32 F9 | 	getword	_var07, _var06, #0
1f980     08 0C 46 F0 | 	shr	_var07, #8
1f984     05 0B 32 F9 | 	getword	_var06, _var06, #0
1f988     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1f98c     01 05 32 F9 | 	getword	_var03, _var02, #0
1f990     04 0F 32 F9 | 	getword	_var08, _var05, #0
1f994     05 01 32 F9 | 	getword	_var01, _var06, #0
1f998     00 0F 02 F1 | 	add	_var08, _var01
1f99c     07 05 52 F2 | 	cmps	_var03, _var08 wc
1f9a0     02 06 06 F1 | 	add	_var04, #2
1f9a4     C4 00 90 3D |  if_ae	jmp	#LR__3251
1f9a8                 | ' 				switch (cmd) {
1f9a8     06 11 32 F9 | 	getword	_var09, _var07, #0
1f9ac     09 10 26 F3 | 	fle	_var09, #9
1f9b0     30 10 62 FD | 	jmprel	_var09
1f9b4                 | LR__3241
1f9b4     24 00 90 FD | 	jmp	#LR__3242
1f9b8     3C 00 90 FD | 	jmp	#LR__3243
1f9bc     54 00 90 FD | 	jmp	#LR__3244
1f9c0     5C 00 90 FD | 	jmp	#LR__3245
1f9c4     64 00 90 FD | 	jmp	#LR__3246
1f9c8     6C 00 90 FD | 	jmp	#LR__3247
1f9cc     74 00 90 FD | 	jmp	#LR__3248
1f9d0     7C 00 90 FD | 	jmp	#LR__3249
1f9d4     84 00 90 FD | 	jmp	#LR__3250
1f9d8     A0 00 90 FD | 	jmp	#LR__3252
1f9dc                 | LR__3242
1f9dc     01 03 32 F9 | 	getword	_var02, _var02, #0
1f9e0     04 09 32 F9 | 	getword	_var05, _var05, #0
1f9e4     04 03 82 F1 | 	sub	_var02, _var05
1f9e8     01 02 66 F0 | 	shl	_var02, #1
1f9ec     03 03 02 F1 | 	add	_var02, _var04
1f9f0     01 03 E2 FA | 	rdword	_var02, _var02
1f9f4     84 00 90 FD | 	jmp	#LR__3252
1f9f8                 | LR__3243
1f9f8     01 05 32 F9 | 	getword	_var03, _var02, #0
1f9fc     01 03 32 F9 | 	getword	_var02, _var02, #0
1fa00     04 09 32 F9 | 	getword	_var05, _var05, #0
1fa04     04 03 82 F1 | 	sub	_var02, _var05
1fa08     01 02 06 F5 | 	and	_var02, #1
1fa0c     02 03 C2 F2 | 	subr	_var02, _var03
1fa10     68 00 90 FD | 	jmp	#LR__3252
1fa14                 | LR__3244
1fa14     01 03 32 F9 | 	getword	_var02, _var02, #0
1fa18     10 02 86 F1 | 	sub	_var02, #16
1fa1c     5C 00 90 FD | 	jmp	#LR__3252
1fa20                 | LR__3245
1fa20     01 03 32 F9 | 	getword	_var02, _var02, #0
1fa24     20 02 86 F1 | 	sub	_var02, #32
1fa28     50 00 90 FD | 	jmp	#LR__3252
1fa2c                 | LR__3246
1fa2c     01 03 32 F9 | 	getword	_var02, _var02, #0
1fa30     30 02 86 F1 | 	sub	_var02, #48
1fa34     44 00 90 FD | 	jmp	#LR__3252
1fa38                 | LR__3247
1fa38     01 03 32 F9 | 	getword	_var02, _var02, #0
1fa3c     1A 02 86 F1 | 	sub	_var02, #26
1fa40     38 00 90 FD | 	jmp	#LR__3252
1fa44                 | LR__3248
1fa44     01 03 32 F9 | 	getword	_var02, _var02, #0
1fa48     08 02 06 F1 | 	add	_var02, #8
1fa4c     2C 00 90 FD | 	jmp	#LR__3252
1fa50                 | LR__3249
1fa50     01 03 32 F9 | 	getword	_var02, _var02, #0
1fa54     50 02 86 F1 | 	sub	_var02, #80
1fa58     20 00 90 FD | 	jmp	#LR__3252
1fa5c                 | LR__3250
1fa5c     01 03 32 F9 | 	getword	_var02, _var02, #0
1fa60     0E 00 00 FF 
1fa64     60 02 86 F1 | 	sub	_var02, ##7264
1fa68                 | ' 				}
1fa68                 | ' 				break;
1fa68     10 00 90 FD | 	jmp	#LR__3252
1fa6c                 | LR__3251
1fa6c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1fa70     02 0A 06 AA |  if_e	mul	_var06, #2
1fa74     05 07 02 A1 |  if_e	add	_var04, _var06
1fa78     D8 FE 9F FD | 	jmp	#LR__3240
1fa7c                 | LR__3252
1fa7c     01 01 32 F9 | 	getword	_var01, _var02, #0
1fa80                 | LR__3253
1fa80                 | ' 		}
1fa80                 | ' 		uni = uc;
1fa80                 | ' 	}
1fa80                 | ' 
1fa80                 | ' 	return uni;
1fa80     00 FB 01 F6 | 	mov	result1, _var01
1fa84                 | _fatfs_cc_ff_wtoupper_ret
1fa84     2D 00 64 FD | 	ret
1fa88                 | 
1fa88                 | _fatfs_cc_strncpy
1fa88     09 01 02 F6 | 	mov	_var01, arg01
1fa8c     97 12 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
1fa90                 | ' 
1fa90                 | ' 	dscan = dst;
1fa90                 | ' 	sscan = src;
1fa90                 | ' 	count = n;
1fa90                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1fa90                 | LR__3260
1fa90     01 16 86 F1 | 	sub	arg03, #1
1fa94     00 16 56 F2 | 	cmps	arg03, #0 wc
1fa98     18 00 90 CD |  if_b	jmp	#LR__3262
1fa9c     0A FB C1 FA | 	rdbyte	result1, arg02
1faa0     00 FB 41 FC | 	wrbyte	result1, _var01
1faa4     01 14 06 F1 | 	add	arg02, #1
1faa8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1faac                 | ' 		continue;
1faac     01 00 06 F1 | 	add	_var01, #1
1fab0     DC FF 9F 5D |  if_ne	jmp	#LR__3260
1fab4                 | LR__3261
1fab4                 | LR__3262
1fab4     97 0C 48 FB | 	callpa	#(@LR__3264-@LR__3263)>>2,fcache_load_ptr_
1fab8                 | ' 	while (--count >= 0)
1fab8                 | LR__3263
1fab8     01 16 86 F1 | 	sub	arg03, #1
1fabc     00 16 56 F2 | 	cmps	arg03, #0 wc
1fac0     00 03 02 36 |  if_ae	mov	_var02, _var01
1fac4     01 00 06 31 |  if_ae	add	_var01, #1
1fac8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1facc     E8 FF 9F 3D |  if_ae	jmp	#LR__3263
1fad0                 | LR__3264
1fad0                 | ' 		*dscan++ = '\0';
1fad0                 | ' 	return(dst);
1fad0     09 FB 01 F6 | 	mov	result1, arg01
1fad4                 | _fatfs_cc_strncpy_ret
1fad4     2D 00 64 FD | 	ret
1fad8                 | 
1fad8                 | _fatfs_cc_memcmp
1fad8                 | ' 	for (n = size; n > 0; n--)
1fad8     00 16 0E F2 | 	cmp	arg03, #0 wz
1fadc     28 00 90 AD |  if_e	jmp	#LR__3271
1fae0                 | LR__3270
1fae0     09 01 C2 FA | 	rdbyte	_var01, arg01
1fae4     0A 03 C2 FA | 	rdbyte	_var02, arg02
1fae8     01 01 0A F2 | 	cmp	_var01, _var02 wz
1faec     01 12 06 A1 |  if_e	add	arg01, #1
1faf0     01 14 06 A1 |  if_e	add	arg02, #1
1faf4                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1faf4     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1faf8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1fafc     01 FB 81 51 |  if_ne	sub	result1, _var02
1fb00     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1fb04     F6 17 6E FB | 	djnz	arg03, #LR__3270
1fb08                 | LR__3271
1fb08                 | ' 
1fb08                 | ' 	return(0);
1fb08     00 FA 05 F6 | 	mov	result1, #0
1fb0c                 | _fatfs_cc_memcmp_ret
1fb0c     2D 00 64 FD | 	ret
1fb10                 | 
1fb10                 | _fatfs_cc_strncmp
1fb10     09 01 0A F6 | 	mov	_var01, arg01 wz
1fb14     14 00 90 5D |  if_ne	jmp	#LR__3280
1fb18                 | ' 		return scan2 ? -1 : 0;
1fb18     00 14 0E F2 | 	cmp	arg02, #0 wz
1fb1c     01 02 66 56 |  if_ne	neg	_var02, #1
1fb20     00 02 06 A6 |  if_e	mov	_var02, #0
1fb24     01 FB 01 F6 | 	mov	result1, _var02
1fb28     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1fb2c                 | LR__3280
1fb2c     00 14 0E F2 | 	cmp	arg02, #0 wz
1fb30     01 FA 05 A6 |  if_e	mov	result1, #1
1fb34     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1fb38     0B 05 02 F6 | 	mov	_var03, arg03
1fb3c     97 16 48 FB | 	callpa	#(@LR__3282-@LR__3281)>>2,fcache_load_ptr_
1fb40                 | ' 	count = n;
1fb40                 | ' 	do {
1fb40                 | LR__3281
1fb40     00 07 C2 FA | 	rdbyte	_var04, _var01
1fb44     0A 09 02 F6 | 	mov	_var05, arg02
1fb48     04 0B C2 FA | 	rdbyte	_var06, _var05
1fb4c     01 04 86 F1 | 	sub	_var03, #1
1fb50     00 04 56 F2 | 	cmps	_var03, #0 wc
1fb54     01 00 06 F1 | 	add	_var01, #1
1fb58     01 14 06 F1 | 	add	arg02, #1
1fb5c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1fb60     08 00 90 2D |  if_nc_and_z	jmp	#LR__3283
1fb64     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1fb68     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3281
1fb6c                 | LR__3282
1fb6c                 | LR__3283
1fb6c     00 04 56 F2 | 	cmps	_var03, #0 wc
1fb70                 | ' 		return(0);
1fb70     00 FA 05 C6 |  if_b	mov	result1, #0
1fb74     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1fb78     05 07 0A F2 | 	cmp	_var04, _var06 wz
1fb7c                 | ' 		return(0);
1fb7c     00 FA 05 A6 |  if_e	mov	result1, #0
1fb80     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1fb84     00 06 0E F2 | 	cmp	_var04, #0 wz
1fb88                 | ' 		return(-1);
1fb88     01 FA 65 A6 |  if_e	neg	result1, #1
1fb8c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1fb90     00 0A 0E F2 | 	cmp	_var06, #0 wz
1fb94                 | ' 		return(1);
1fb94     01 FA 05 A6 |  if_e	mov	result1, #1
1fb98                 | ' 		return(c1 - c2);
1fb98     03 FB 01 56 |  if_ne	mov	result1, _var04
1fb9c     05 FB 81 51 |  if_ne	sub	result1, _var06
1fba0                 | _fatfs_cc_strncmp_ret
1fba0     2D 00 64 FD | 	ret
1fba4                 | 
1fba4                 | _fatfs_cc_strchr
1fba4                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1fba4                 | ' 	while ((c = *s++) != (char) charwanted)
1fba4                 | LR__3290
1fba4     09 01 02 F6 | 	mov	_var01, arg01
1fba8     00 03 C2 FA | 	rdbyte	_var02, _var01
1fbac     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1fbb0     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1fbb4     03 05 0A F2 | 	cmp	_var03, _var04 wz
1fbb8     01 12 06 F1 | 	add	arg01, #1
1fbbc     14 00 90 AD |  if_e	jmp	#LR__3291
1fbc0     01 05 02 F6 | 	mov	_var03, _var02
1fbc4     07 04 4E F7 | 	zerox	_var03, #7 wz
1fbc8     00 FA 05 A6 |  if_e	mov	result1, #0
1fbcc     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1fbd0     D0 FF 9F FD | 	jmp	#LR__3290
1fbd4                 | LR__3291
1fbd4                 | ' 	return((char *)--s);
1fbd4     01 12 86 F1 | 	sub	arg01, #1
1fbd8     09 FB 01 F6 | 	mov	result1, arg01
1fbdc                 | _fatfs_cc_strchr_ret
1fbdc     2D 00 64 FD | 	ret
1fbe0                 | 
1fbe0                 | _fatfs_cc_disk_initialize
1fbe0     04 4A 05 F6 | 	mov	COUNT_, #4
1fbe4     A8 00 A0 FD | 	call	#pushregs_
1fbe8     40 F0 07 F1 | 	add	ptra, #64
1fbec     04 4E 05 F1 | 	add	fp, #4
1fbf0     A7 12 42 FC | 	wrbyte	arg01, fp
1fbf4     01 00 00 FF 
1fbf8     14 E4 05 F1 | 	add	objptr, ##532
1fbfc     F2 18 02 FB | 	rdlong	arg04, objptr
1fc00     2C 4E 05 F1 | 	add	fp, #44
1fc04     A7 18 62 FC | 	wrlong	arg04, fp
1fc08     04 E4 85 F1 | 	sub	objptr, #4
1fc0c     F2 18 02 FB | 	rdlong	arg04, objptr
1fc10     04 4E 05 F1 | 	add	fp, #4
1fc14     A7 18 62 FC | 	wrlong	arg04, fp
1fc18     08 E4 05 F1 | 	add	objptr, #8
1fc1c     F2 18 02 FB | 	rdlong	arg04, objptr
1fc20     04 4E 05 F1 | 	add	fp, #4
1fc24     A7 18 62 FC | 	wrlong	arg04, fp
1fc28     04 E4 05 F1 | 	add	objptr, #4
1fc2c     F2 18 02 FB | 	rdlong	arg04, objptr
1fc30     04 4E 05 F1 | 	add	fp, #4
1fc34     A7 18 62 FC | 	wrlong	arg04, fp
1fc38     04 E4 05 F1 | 	add	objptr, #4
1fc3c     F2 02 48 FC | 	wrbyte	#1, objptr
1fc40     01 00 00 FF 
1fc44     20 E4 85 F1 | 	sub	objptr, ##544
1fc48     38 4E 85 F1 | 	sub	fp, #56
1fc4c     A7 18 CA FA | 	rdbyte	arg04, fp wz
1fc50     04 4E 85 F1 | 	sub	fp, #4
1fc54                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1fc54                 | '             return RES_NOTRDY;
1fc54     03 FA 05 56 |  if_ne	mov	result1, #3
1fc58     D8 05 90 5D |  if_ne	jmp	#LR__3318
1fc5c     13 00 00 FF 
1fc60     10 13 06 F6 | 	mov	arg01, ##10000
1fc64     30 9B BF FD | 	call	#__system___waitus
1fc68     30 4E 05 F1 | 	add	fp, #48
1fc6c     A7 12 02 FB | 	rdlong	arg01, fp
1fc70     09 01 08 FC | 	wrpin	#0, arg01
1fc74     04 4E 05 F1 | 	add	fp, #4
1fc78     A7 12 02 FB | 	rdlong	arg01, fp
1fc7c     09 01 08 FC | 	wrpin	#0, arg01
1fc80     04 4E 05 F1 | 	add	fp, #4
1fc84     A7 12 02 FB | 	rdlong	arg01, fp
1fc88     09 01 08 FC | 	wrpin	#0, arg01
1fc8c     04 4E 05 F1 | 	add	fp, #4
1fc90     A7 12 02 FB | 	rdlong	arg01, fp
1fc94     09 00 80 FF 
1fc98     09 01 08 FC | 	wrpin	##4608, arg01
1fc9c     0C 4E 85 F1 | 	sub	fp, #12
1fca0     A7 12 02 FB | 	rdlong	arg01, fp
1fca4     59 12 62 FD | 	drvh	arg01
1fca8     04 4E 05 F1 | 	add	fp, #4
1fcac     A7 12 02 FB | 	rdlong	arg01, fp
1fcb0     59 12 62 FD | 	drvh	arg01
1fcb4     04 4E 05 F1 | 	add	fp, #4
1fcb8     A7 12 02 FB | 	rdlong	arg01, fp
1fcbc     59 12 62 FD | 	drvh	arg01
1fcc0     04 4E 05 F1 | 	add	fp, #4
1fcc4     A7 12 02 FB | 	rdlong	arg01, fp
1fcc8     59 12 62 FD | 	drvh	arg01
1fccc     20 4E 85 F1 | 	sub	fp, #32
1fcd0     00 04 80 FF 
1fcd4     A7 20 68 FC | 	wrlong	##524304, fp
1fcd8     04 4E 05 F1 | 	add	fp, #4
1fcdc     20 03 80 FF 
1fce0     A7 90 68 FC | 	wrlong	##409672, fp
1fce4     14 4E 05 F1 | 	add	fp, #20
1fce8     A7 1E 02 FB | 	rdlong	local01, fp
1fcec     18 4E 85 F1 | 	sub	fp, #24
1fcf0     A7 16 02 FB | 	rdlong	arg03, fp
1fcf4     40 1E 62 FD | 	dirl	local01
1fcf8     A0 03 80 FF 
1fcfc     0F 91 08 FC | 	wrpin	##475208, local01
1fd00     0F 17 12 FC | 	wxpin	arg03, local01
1fd04     0F 01 28 FC | 	wypin	#0, local01
1fd08     41 1E 62 FD | 	dirh	local01
1fd0c     1C 4E 05 F1 | 	add	fp, #28
1fd10     A7 20 02 FB | 	rdlong	local02, fp
1fd14     10 1F 82 F1 | 	sub	local01, local02
1fd18     07 1E 06 F5 | 	and	local01, #7
1fd1c     18 1E 66 F0 | 	shl	local01, #24
1fd20     78 14 06 F6 | 	mov	arg02, #120
1fd24     0F 15 42 F5 | 	or	arg02, local01
1fd28     14 4E 85 F1 | 	sub	fp, #20
1fd2c     A7 14 62 FC | 	wrlong	arg02, fp
1fd30     14 4E 05 F1 | 	add	fp, #20
1fd34     A7 12 02 FB | 	rdlong	arg01, fp
1fd38     10 14 26 F4 | 	bith	arg02, #16
1fd3c     40 12 62 FD | 	dirl	arg01
1fd40     09 15 02 FC | 	wrpin	arg02, arg01
1fd44     09 3F 18 FC | 	wxpin	#31, arg01
1fd48     FF FF FF FF 
1fd4c     09 FF 2B FC | 	wypin	##-1, arg01
1fd50     41 12 62 FD | 	dirh	arg01
1fd54     04 4E 85 F1 | 	sub	fp, #4
1fd58     A7 14 02 FB | 	rdlong	arg02, fp
1fd5c     08 4E 05 F1 | 	add	fp, #8
1fd60     A7 22 02 FB | 	rdlong	local03, fp
1fd64     11 15 82 F1 | 	sub	arg02, local03
1fd68     07 14 06 F5 | 	and	arg02, #7
1fd6c     18 14 66 F0 | 	shl	arg02, #24
1fd70     14 4E 85 F1 | 	sub	fp, #20
1fd74     A7 14 62 FC | 	wrlong	arg02, fp
1fd78     29 00 00 FF 
1fd7c     7A 14 46 F5 | 	or	arg02, ##21114
1fd80     A7 14 62 FC | 	wrlong	arg02, fp
1fd84     14 4E 05 F1 | 	add	fp, #20
1fd88     A7 12 02 FB | 	rdlong	arg01, fp
1fd8c     40 12 62 FD | 	dirl	arg01
1fd90     09 15 02 FC | 	wrpin	arg02, arg01
1fd94     09 4F 18 FC | 	wxpin	#39, arg01
1fd98     09 01 28 FC | 	wypin	#0, arg01
1fd9c     41 12 62 FD | 	dirh	arg01
1fda0     28 4E 85 F1 | 	sub	fp, #40
1fda4     A7 12 02 F6 | 	mov	arg01, fp
1fda8     14 4E 85 F1 | 	sub	fp, #20
1fdac     0A 14 06 F6 | 	mov	arg02, #10
1fdb0     08 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1001
1fdb4     00 12 06 F6 | 	mov	arg01, #0
1fdb8     00 14 06 F6 | 	mov	arg02, #0
1fdbc     D4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fdc0     10 80 B0 FD | 	call	#_fatfs_cc_deselect_1011
1fdc4     64 12 06 F6 | 	mov	arg01, #100
1fdc8     CC 99 BF FD | 	call	#__system___waitus
1fdcc     14 4E 05 F1 | 	add	fp, #20
1fdd0     A7 12 02 F6 | 	mov	arg01, fp
1fdd4     14 4E 85 F1 | 	sub	fp, #20
1fdd8     0A 14 06 F6 | 	mov	arg02, #10
1fddc     DC 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1001
1fde0     0C 4E 05 F1 | 	add	fp, #12
1fde4     A7 00 48 FC | 	wrbyte	#0, fp
1fde8     0C 4E 85 F1 | 	sub	fp, #12
1fdec     00 12 06 F6 | 	mov	arg01, #0
1fdf0     00 14 06 F6 | 	mov	arg02, #0
1fdf4     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fdf8     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1fdfc     01 18 0E F2 | 	cmp	arg04, #1 wz
1fe00     B8 03 90 5D |  if_ne	jmp	#LR__3317
1fe04     08 12 06 F6 | 	mov	arg01, #8
1fe08     AA 15 06 F6 | 	mov	arg02, #426
1fe0c     84 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fe10     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fe14     01 FA 0D F2 | 	cmp	result1, #1 wz
1fe18     98 01 90 5D |  if_ne	jmp	#LR__3303
1fe1c     14 4E 05 F1 | 	add	fp, #20
1fe20     A7 12 02 F6 | 	mov	arg01, fp
1fe24     14 4E 85 F1 | 	sub	fp, #20
1fe28     04 14 06 F6 | 	mov	arg02, #4
1fe2c     8C 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1001
1fe30     16 4E 05 F1 | 	add	fp, #22
1fe34     A7 24 C2 FA | 	rdbyte	local04, fp
1fe38     16 4E 85 F1 | 	sub	fp, #22
1fe3c     01 24 0E F2 | 	cmp	local04, #1 wz
1fe40     17 4E 05 A1 |  if_e	add	fp, #23
1fe44     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1fe48     17 4E 85 A1 |  if_e	sub	fp, #23
1fe4c     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1fe50     68 03 90 5D |  if_ne	jmp	#LR__3316
1fe54                 | ' 				for (tmr = 1000; tmr; tmr--) {
1fe54     18 4E 05 F1 | 	add	fp, #24
1fe58     01 00 80 FF 
1fe5c     A7 D0 6B FC | 	wrlong	##1000, fp
1fe60     18 4E 85 F1 | 	sub	fp, #24
1fe64                 | LR__3300
1fe64     18 4E 05 F1 | 	add	fp, #24
1fe68     A7 1E 0A FB | 	rdlong	local01, fp wz
1fe6c     18 4E 85 F1 | 	sub	fp, #24
1fe70     3C 00 90 AD |  if_e	jmp	#LR__3301
1fe74     A9 12 06 F6 | 	mov	arg01, #169
1fe78     1E 14 C6 F9 | 	decod	arg02, #30
1fe7c     14 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fe80     FD 24 02 F6 | 	mov	local04, result1
1fe84     07 24 4E F7 | 	zerox	local04, #7 wz
1fe88     24 00 90 AD |  if_e	jmp	#LR__3301
1fe8c     01 00 00 FF 
1fe90     E8 13 06 F6 | 	mov	arg01, ##1000
1fe94     00 99 BF FD | 	call	#__system___waitus
1fe98     18 4E 05 F1 | 	add	fp, #24
1fe9c     A7 24 02 FB | 	rdlong	local04, fp
1fea0     01 24 86 F1 | 	sub	local04, #1
1fea4     A7 24 62 FC | 	wrlong	local04, fp
1fea8     18 4E 85 F1 | 	sub	fp, #24
1feac     B4 FF 9F FD | 	jmp	#LR__3300
1feb0                 | LR__3301
1feb0     18 4E 05 F1 | 	add	fp, #24
1feb4     A7 24 0A FB | 	rdlong	local04, fp wz
1feb8     18 4E 85 F1 | 	sub	fp, #24
1febc     4C 00 90 AD |  if_e	jmp	#LR__3302
1fec0     3A 12 06 F6 | 	mov	arg01, #58
1fec4     00 14 06 F6 | 	mov	arg02, #0
1fec8     C8 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fecc     FD 22 02 F6 | 	mov	local03, result1
1fed0     07 22 4E F7 | 	zerox	local03, #7 wz
1fed4     34 00 90 5D |  if_ne	jmp	#LR__3302
1fed8     14 4E 05 F1 | 	add	fp, #20
1fedc     A7 12 02 F6 | 	mov	arg01, fp
1fee0     14 4E 85 F1 | 	sub	fp, #20
1fee4     04 14 06 F6 | 	mov	arg02, #4
1fee8     D0 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1001
1feec     14 4E 05 F1 | 	add	fp, #20
1fef0     A7 1E C2 FA | 	rdbyte	local01, fp
1fef4     40 1E CE F7 | 	test	local01, #64 wz
1fef8     0C 24 06 56 |  if_ne	mov	local04, #12
1fefc     04 24 06 A6 |  if_e	mov	local04, #4
1ff00     08 4E 85 F1 | 	sub	fp, #8
1ff04     A7 24 42 FC | 	wrbyte	local04, fp
1ff08     0C 4E 85 F1 | 	sub	fp, #12
1ff0c                 | LR__3302
1ff0c     14 24 06 FB | 	rdlong	local04, #20
1ff10     18 4E 05 F1 | 	add	fp, #24
1ff14     A7 24 62 FC | 	wrlong	local04, fp
1ff18     0C 4E 05 F1 | 	add	fp, #12
1ff1c     A7 24 02 FB | 	rdlong	local04, fp
1ff20     1B 24 26 F4 | 	bith	local04, #27
1ff24     A7 24 62 FC | 	wrlong	local04, fp
1ff28     0C 4E 85 F1 | 	sub	fp, #12
1ff2c     A7 24 02 FB | 	rdlong	local04, fp
1ff30     18 4E 85 F1 | 	sub	fp, #24
1ff34     68 78 04 FF 
1ff38     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1ff3c     1C 4E 05 C1 |  if_b	add	fp, #28
1ff40     00 01 80 CF 
1ff44     A7 08 68 CC |  if_b	wrlong	##131076, fp
1ff48     1C 4E 85 C1 |  if_b	sub	fp, #28
1ff4c     6C 02 90 CD |  if_b	jmp	#LR__3316
1ff50     18 4E 05 F1 | 	add	fp, #24
1ff54     A7 24 02 FB | 	rdlong	local04, fp
1ff58     18 4E 85 F1 | 	sub	fp, #24
1ff5c     E1 F5 05 FF 
1ff60     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1ff64     1C 4E 05 C1 |  if_b	add	fp, #28
1ff68     00 01 80 CF 
1ff6c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1ff70     1C 4E 85 C1 |  if_b	sub	fp, #28
1ff74     44 02 90 CD |  if_b	jmp	#LR__3316
1ff78     18 4E 05 F1 | 	add	fp, #24
1ff7c     A7 24 02 FB | 	rdlong	local04, fp
1ff80     18 4E 85 F1 | 	sub	fp, #24
1ff84     3B 58 08 FF 
1ff88     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1ff8c     1C 4E 05 C1 |  if_b	add	fp, #28
1ff90     00 01 80 CF 
1ff94     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1ff98     1C 4E 85 C1 |  if_b	sub	fp, #28
1ff9c     1C 02 90 CD |  if_b	jmp	#LR__3316
1ffa0     1C 4E 05 F1 | 	add	fp, #28
1ffa4     80 01 80 FF 
1ffa8     A7 10 68 FC | 	wrlong	##196616, fp
1ffac     1C 4E 85 F1 | 	sub	fp, #28
1ffb0     08 02 90 FD | 	jmp	#LR__3316
1ffb4                 | LR__3303
1ffb4     A9 12 06 F6 | 	mov	arg01, #169
1ffb8     00 14 06 F6 | 	mov	arg02, #0
1ffbc     D4 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1ffc0     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1ffc4     02 24 16 F2 | 	cmp	local04, #2 wc
1ffc8     18 00 90 3D |  if_ae	jmp	#LR__3304
1ffcc     0C 4E 05 F1 | 	add	fp, #12
1ffd0     A7 04 48 FC | 	wrbyte	#2, fp
1ffd4     04 4E 05 F1 | 	add	fp, #4
1ffd8     A7 52 49 FC | 	wrbyte	#169, fp
1ffdc     10 4E 85 F1 | 	sub	fp, #16
1ffe0     14 00 90 FD | 	jmp	#LR__3305
1ffe4                 | LR__3304
1ffe4     0C 4E 05 F1 | 	add	fp, #12
1ffe8     A7 02 48 FC | 	wrbyte	#1, fp
1ffec     04 4E 05 F1 | 	add	fp, #4
1fff0     A7 02 48 FC | 	wrbyte	#1, fp
1fff4     10 4E 85 F1 | 	sub	fp, #16
1fff8                 | LR__3305
1fff8                 | ' 				ty =  0x01 ; cmd =  (1) ;
1fff8                 | ' 			}
1fff8                 | ' 			for (tmr = 1000; tmr; tmr--) {
1fff8     18 4E 05 F1 | 	add	fp, #24
1fffc     01 00 80 FF 
20000     A7 D0 6B FC | 	wrlong	##1000, fp
20004     18 4E 85 F1 | 	sub	fp, #24
20008                 | LR__3306
20008     18 4E 05 F1 | 	add	fp, #24
2000c     A7 22 0A FB | 	rdlong	local03, fp wz
20010     18 4E 85 F1 | 	sub	fp, #24
20014     44 00 90 AD |  if_e	jmp	#LR__3307
20018     10 4E 05 F1 | 	add	fp, #16
2001c     A7 12 C2 FA | 	rdbyte	arg01, fp
20020     10 4E 85 F1 | 	sub	fp, #16
20024     00 14 06 F6 | 	mov	arg02, #0
20028     68 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
2002c     FD 24 02 F6 | 	mov	local04, result1
20030     07 24 4E F7 | 	zerox	local04, #7 wz
20034     24 00 90 AD |  if_e	jmp	#LR__3307
20038     01 00 00 FF 
2003c     E8 13 06 F6 | 	mov	arg01, ##1000
20040     54 97 BF FD | 	call	#__system___waitus
20044     18 4E 05 F1 | 	add	fp, #24
20048     A7 24 02 FB | 	rdlong	local04, fp
2004c     01 24 86 F1 | 	sub	local04, #1
20050     A7 24 62 FC | 	wrlong	local04, fp
20054     18 4E 85 F1 | 	sub	fp, #24
20058     AC FF 9F FD | 	jmp	#LR__3306
2005c                 | LR__3307
2005c     18 4E 05 F1 | 	add	fp, #24
20060     A7 24 0A FB | 	rdlong	local04, fp wz
20064     18 4E 85 F1 | 	sub	fp, #24
20068     14 00 90 AD |  if_e	jmp	#LR__3308
2006c     10 12 06 F6 | 	mov	arg01, #16
20070     09 14 C6 F9 | 	decod	arg02, #9
20074     1C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
20078     07 FA 4D F7 | 	zerox	result1, #7 wz
2007c     0C 00 90 AD |  if_e	jmp	#LR__3309
20080                 | LR__3308
20080     0C 4E 05 F1 | 	add	fp, #12
20084     A7 00 48 FC | 	wrbyte	#0, fp
20088     0C 4E 85 F1 | 	sub	fp, #12
2008c                 | LR__3309
2008c     14 24 06 FB | 	rdlong	local04, #20
20090     18 4E 05 F1 | 	add	fp, #24
20094     A7 24 62 FC | 	wrlong	local04, fp
20098     18 4E 85 F1 | 	sub	fp, #24
2009c     F0 FA 02 FF 
200a0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
200a4     18 00 90 3D |  if_ae	jmp	#LR__3310
200a8     24 4E 05 F1 | 	add	fp, #36
200ac     A7 24 02 FB | 	rdlong	local04, fp
200b0     1B 24 26 F4 | 	bith	local04, #27
200b4     A7 24 62 FC | 	wrlong	local04, fp
200b8     24 4E 85 F1 | 	sub	fp, #36
200bc     2C 00 90 FD | 	jmp	#LR__3311
200c0                 | LR__3310
200c0     18 4E 05 F1 | 	add	fp, #24
200c4     A7 24 02 FB | 	rdlong	local04, fp
200c8     18 4E 85 F1 | 	sub	fp, #24
200cc     E1 F5 05 FF 
200d0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
200d4     24 4E 05 C1 |  if_b	add	fp, #36
200d8     A7 24 02 CB |  if_b	rdlong	local04, fp
200dc     80 00 04 CF 
200e0     00 24 46 C5 |  if_b	or	local04, ##134283264
200e4     A7 24 62 CC |  if_b	wrlong	local04, fp
200e8     24 4E 85 C1 |  if_b	sub	fp, #36
200ec                 | LR__3311
200ec     18 4E 05 F1 | 	add	fp, #24
200f0     A7 24 02 FB | 	rdlong	local04, fp
200f4     18 4E 85 F1 | 	sub	fp, #24
200f8     F0 FA 02 FF 
200fc     01 25 16 F2 | 	cmp	local04, ##100000001 wc
20100     1C 4E 05 C1 |  if_b	add	fp, #28
20104     00 01 80 CF 
20108     A7 08 68 CC |  if_b	wrlong	##131076, fp
2010c     1C 4E 85 C1 |  if_b	sub	fp, #28
20110     A8 00 90 CD |  if_b	jmp	#LR__3315
20114     18 4E 05 F1 | 	add	fp, #24
20118     A7 24 02 FB | 	rdlong	local04, fp
2011c     18 4E 85 F1 | 	sub	fp, #24
20120     68 78 04 FF 
20124     81 25 16 F2 | 	cmp	local04, ##150000001 wc
20128     1C 4E 05 C1 |  if_b	add	fp, #28
2012c     80 01 80 CF 
20130     A7 0C 68 CC |  if_b	wrlong	##196614, fp
20134     1C 4E 85 C1 |  if_b	sub	fp, #28
20138     80 00 90 CD |  if_b	jmp	#LR__3314
2013c     18 4E 05 F1 | 	add	fp, #24
20140     A7 24 02 FB | 	rdlong	local04, fp
20144     18 4E 85 F1 | 	sub	fp, #24
20148     E1 F5 05 FF 
2014c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
20150     1C 4E 05 C1 |  if_b	add	fp, #28
20154     00 02 80 CF 
20158     A7 10 68 CC |  if_b	wrlong	##262152, fp
2015c     1C 4E 85 C1 |  if_b	sub	fp, #28
20160     58 00 90 CD |  if_b	jmp	#LR__3313
20164     18 4E 05 F1 | 	add	fp, #24
20168     A7 24 02 FB | 	rdlong	local04, fp
2016c     18 4E 85 F1 | 	sub	fp, #24
20170     59 73 07 FF 
20174     81 24 16 F2 | 	cmp	local04, ##250000001 wc
20178     1C 4E 05 C1 |  if_b	add	fp, #28
2017c     80 02 80 CF 
20180     A7 14 68 CC |  if_b	wrlong	##327690, fp
20184     1C 4E 85 C1 |  if_b	sub	fp, #28
20188     30 00 90 CD |  if_b	jmp	#LR__3312
2018c     18 4E 05 F1 | 	add	fp, #24
20190     A7 24 02 FB | 	rdlong	local04, fp
20194     18 4E 85 F1 | 	sub	fp, #24
20198     D1 F0 08 FF 
2019c     01 25 16 F2 | 	cmp	local04, ##300000001 wc
201a0     1C 4E 05 C1 |  if_b	add	fp, #28
201a4     00 03 80 CF 
201a8     A7 18 68 CC |  if_b	wrlong	##393228, fp
201ac     1C 4E 85 F3 | 	sumc	fp, #28
201b0     80 03 80 3F 
201b4     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
201b8     1C 4E 85 31 |  if_ae	sub	fp, #28
201bc                 | LR__3312
201bc                 | LR__3313
201bc                 | LR__3314
201bc                 | LR__3315
201bc                 | LR__3316
201bc                 | LR__3317
201bc     0C 4E 05 F1 | 	add	fp, #12
201c0     A7 24 C2 FA | 	rdbyte	local04, fp
201c4     01 00 00 FF 
201c8     21 E4 05 F1 | 	add	objptr, ##545
201cc     F2 24 42 FC | 	wrbyte	local04, objptr
201d0     A7 1E CA FA | 	rdbyte	local01, fp wz
201d4     00 24 06 56 |  if_ne	mov	local04, #0
201d8     01 24 06 A6 |  if_e	mov	local04, #1
201dc     20 4E 05 F1 | 	add	fp, #32
201e0     A7 24 42 FC | 	wrbyte	local04, fp
201e4     A7 24 C2 FA | 	rdbyte	local04, fp
201e8     2C 4E 85 F1 | 	sub	fp, #44
201ec     01 E4 85 F1 | 	sub	objptr, #1
201f0     F2 24 42 FC | 	wrbyte	local04, objptr
201f4     01 00 00 FF 
201f8     20 E4 85 F1 | 	sub	objptr, ##544
201fc     D4 7B B0 FD | 	call	#_fatfs_cc_deselect_1011
20200     34 4E 05 F1 | 	add	fp, #52
20204     A7 12 02 FB | 	rdlong	arg01, fp
20208     18 4E 85 F1 | 	sub	fp, #24
2020c     A7 14 02 FB | 	rdlong	arg02, fp
20210     09 15 12 FC | 	wxpin	arg02, arg01
20214     1C 4E 05 F1 | 	add	fp, #28
20218     A7 12 02 FB | 	rdlong	arg01, fp
2021c     14 4E 85 F1 | 	sub	fp, #20
20220     A7 14 02 FB | 	rdlong	arg02, fp
20224     09 15 02 FC | 	wrpin	arg02, arg01
20228                 | ' 
20228                 | ' 		}
20228                 | ' 	}
20228                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
20228                 | ' 	CardType = ty;
20228                 | ' 	s = ty ? 0 :  0x01 ;
20228                 | ' 	Stat = s;
20228                 | ' 
20228                 | ' 	deselect();
20228                 | ' 
20228                 | ' 
20228                 | ' 	_wxpin( PIN_CLK, ck_div );
20228                 | ' 	_wrpin( PIN_DI, spm_tx );
20228                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
20228                 | ' 	return s;
20228     08 4E 05 F1 | 	add	fp, #8
2022c     A7 FA C1 FA | 	rdbyte	result1, fp
20230     2C 4E 85 F1 | 	sub	fp, #44
20234                 | LR__3318
20234     A7 F0 03 F6 | 	mov	ptra, fp
20238     B2 00 A0 FD | 	call	#popregs_
2023c                 | _fatfs_cc_disk_initialize_ret
2023c     2D 00 64 FD | 	ret
20240                 | 
20240                 | _fatfs_cc_disk_read
20240     05 4A 05 F6 | 	mov	COUNT_, #5
20244     A8 00 A0 FD | 	call	#pushregs_
20248     0A 1F 02 F6 | 	mov	local01, arg02
2024c     0B 21 02 F6 | 	mov	local02, arg03
20250     0C 23 02 F6 | 	mov	local03, arg04
20254     00 12 0E F2 | 	cmp	arg01, #0 wz
20258     01 FA 05 56 |  if_ne	mov	result1, #1
2025c                 | ' 
2025c                 | ' 	return Stat;
2025c     01 00 00 AF 
20260     20 E4 05 A1 |  if_e	add	objptr, ##544
20264     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
20268     01 00 00 AF 
2026c     20 E4 85 A1 |  if_e	sub	objptr, ##544
20270     FD FA E1 F8 | 	getbyte	result1, result1, #0
20274     01 FA CD F7 | 	test	result1, #1 wz
20278     03 FA 05 56 |  if_ne	mov	result1, #3
2027c     84 00 90 5D |  if_ne	jmp	#LR__3322
20280     01 00 00 FF 
20284     21 E4 05 F1 | 	add	objptr, ##545
20288     F2 24 C2 FA | 	rdbyte	local04, objptr
2028c     01 00 00 FF 
20290     21 E4 85 F1 | 	sub	objptr, ##545
20294     08 24 CE F7 | 	test	local04, #8 wz
20298     09 20 66 A0 |  if_e	shl	local02, #9
2029c     02 22 16 F2 | 	cmp	local03, #2 wc
202a0     12 24 06 36 |  if_ae	mov	local04, #18
202a4     11 24 06 C6 |  if_b	mov	local04, #17
202a8     10 15 02 F6 | 	mov	arg02, local02
202ac     12 13 02 F6 | 	mov	arg01, local04
202b0     E0 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1025
202b4     FD 26 02 F6 | 	mov	local05, result1
202b8     07 26 4E F7 | 	zerox	local05, #7 wz
202bc     30 00 90 5D |  if_ne	jmp	#LR__3321
202c0                 | ' 		do {
202c0                 | LR__3320
202c0     0F 13 02 F6 | 	mov	arg01, local01
202c4     09 14 C6 F9 | 	decod	arg02, #9
202c8     1C 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1019
202cc     00 FA 0D F2 | 	cmp	result1, #0 wz
202d0     01 00 00 5F 
202d4     00 1E 06 51 |  if_ne	add	local01, ##512
202d8     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3320
202dc     12 25 E2 F8 | 	getbyte	local04, local04, #0
202e0     12 24 0E F2 | 	cmp	local04, #18 wz
202e4     0C 12 06 A6 |  if_e	mov	arg01, #12
202e8     00 14 06 A6 |  if_e	mov	arg02, #0
202ec     A4 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1025
202f0                 | LR__3321
202f0     E0 7A B0 FD | 	call	#_fatfs_cc_deselect_1011
202f4                 | ' 	}
202f4                 | ' 	deselect();
202f4                 | ' 
202f4                 | ' 	return count ? RES_ERROR : RES_OK;
202f4     00 22 0E F2 | 	cmp	local03, #0 wz
202f8     01 26 06 56 |  if_ne	mov	local05, #1
202fc     00 26 06 A6 |  if_e	mov	local05, #0
20300     13 FB 01 F6 | 	mov	result1, local05
20304                 | LR__3322
20304     A7 F0 03 F6 | 	mov	ptra, fp
20308     B2 00 A0 FD | 	call	#popregs_
2030c                 | _fatfs_cc_disk_read_ret
2030c     2D 00 64 FD | 	ret
20310                 | 
20310                 | _fatfs_cc_disk_write
20310     04 4A 05 F6 | 	mov	COUNT_, #4
20314     A8 00 A0 FD | 	call	#pushregs_
20318     0A 1F 02 F6 | 	mov	local01, arg02
2031c     0C 21 02 F6 | 	mov	local02, arg04
20320     0B 23 02 F6 | 	mov	local03, arg03
20324     00 12 0E F2 | 	cmp	arg01, #0 wz
20328     01 FA 05 56 |  if_ne	mov	result1, #1
2032c                 | ' 
2032c                 | ' 	return Stat;
2032c     01 00 00 AF 
20330     20 E4 05 A1 |  if_e	add	objptr, ##544
20334     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
20338     01 00 00 AF 
2033c     20 E4 85 A1 |  if_e	sub	objptr, ##544
20340     FD FA E1 F8 | 	getbyte	result1, result1, #0
20344     01 FA CD F7 | 	test	result1, #1 wz
20348     03 FA 05 56 |  if_ne	mov	result1, #3
2034c     D4 00 90 5D |  if_ne	jmp	#LR__3334
20350     01 00 00 FF 
20354     21 E4 05 F1 | 	add	objptr, ##545
20358     F2 16 C2 FA | 	rdbyte	arg03, objptr
2035c     01 00 00 FF 
20360     21 E4 85 F1 | 	sub	objptr, ##545
20364     08 16 CE F7 | 	test	arg03, #8 wz
20368     09 22 66 A0 |  if_e	shl	local03, #9
2036c     01 20 0E F2 | 	cmp	local02, #1 wz
20370     30 00 90 5D |  if_ne	jmp	#LR__3330
20374     18 12 06 F6 | 	mov	arg01, #24
20378     11 15 02 F6 | 	mov	arg02, local03
2037c     14 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1025
20380     FD 24 02 F6 | 	mov	local04, result1
20384     07 24 4E F7 | 	zerox	local04, #7 wz
20388     84 00 90 5D |  if_ne	jmp	#LR__3333
2038c     0F 13 02 F6 | 	mov	arg01, local01
20390     FE 14 06 F6 | 	mov	arg02, #254
20394     30 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1021
20398     00 FA 0D F2 | 	cmp	result1, #0 wz
2039c     00 20 06 56 |  if_ne	mov	local02, #0
203a0     6C 00 90 FD | 	jmp	#LR__3333
203a4                 | LR__3330
203a4     01 00 00 FF 
203a8     21 E4 05 F1 | 	add	objptr, ##545
203ac     F2 24 C2 FA | 	rdbyte	local04, objptr
203b0     01 00 00 FF 
203b4     21 E4 85 F1 | 	sub	objptr, ##545
203b8     06 24 CE F7 | 	test	local04, #6 wz
203bc     97 12 06 56 |  if_ne	mov	arg01, #151
203c0     10 15 02 56 |  if_ne	mov	arg02, local02
203c4     CC 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1025
203c8     11 15 02 F6 | 	mov	arg02, local03
203cc     19 12 06 F6 | 	mov	arg01, #25
203d0     C0 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1025
203d4     FD 24 02 F6 | 	mov	local04, result1
203d8     07 24 4E F7 | 	zerox	local04, #7 wz
203dc     30 00 90 5D |  if_ne	jmp	#LR__3332
203e0                 | ' 			do {
203e0                 | LR__3331
203e0     0F 13 02 F6 | 	mov	arg01, local01
203e4     FC 14 06 F6 | 	mov	arg02, #252
203e8     DC 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1021
203ec     00 FA 0D F2 | 	cmp	result1, #0 wz
203f0     01 00 00 5F 
203f4     00 1E 06 51 |  if_ne	add	local01, ##512
203f8     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3331
203fc     00 12 06 F6 | 	mov	arg01, #0
20400     FD 14 06 F6 | 	mov	arg02, #253
20404     C0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1021
20408     00 FA 0D F2 | 	cmp	result1, #0 wz
2040c     01 20 06 A6 |  if_e	mov	local02, #1
20410                 | LR__3332
20410                 | LR__3333
20410     C0 79 B0 FD | 	call	#_fatfs_cc_deselect_1011
20414                 | ' 				count = 1;
20414                 | ' 		}
20414                 | ' 	}
20414                 | ' 	deselect();
20414                 | ' 
20414                 | ' 	return count ? RES_ERROR : RES_OK;
20414     00 20 0E F2 | 	cmp	local02, #0 wz
20418     01 24 06 56 |  if_ne	mov	local04, #1
2041c     00 24 06 A6 |  if_e	mov	local04, #0
20420     12 FB 01 F6 | 	mov	result1, local04
20424                 | LR__3334
20424     A7 F0 03 F6 | 	mov	ptra, fp
20428     B2 00 A0 FD | 	call	#popregs_
2042c                 | _fatfs_cc_disk_write_ret
2042c     2D 00 64 FD | 	ret
20430                 | 
20430                 | _fatfs_cc_disk_ioctl
20430     01 4A 05 F6 | 	mov	COUNT_, #1
20434     A8 00 A0 FD | 	call	#pushregs_
20438     30 F0 07 F1 | 	add	ptra, #48
2043c     04 4E 05 F1 | 	add	fp, #4
20440     A7 12 42 FC | 	wrbyte	arg01, fp
20444     04 4E 05 F1 | 	add	fp, #4
20448     A7 14 42 FC | 	wrbyte	arg02, fp
2044c     04 4E 05 F1 | 	add	fp, #4
20450     A7 16 62 FC | 	wrlong	arg03, fp
20454     08 4E 85 F1 | 	sub	fp, #8
20458     A7 12 CA FA | 	rdbyte	arg01, fp wz
2045c     04 4E 85 F1 | 	sub	fp, #4
20460     01 FA 05 56 |  if_ne	mov	result1, #1
20464                 | ' 
20464                 | ' 	return Stat;
20464     01 00 00 AF 
20468     20 E4 05 A1 |  if_e	add	objptr, ##544
2046c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
20470     01 00 00 AF 
20474     20 E4 85 A1 |  if_e	sub	objptr, ##544
20478     FD FA E1 F8 | 	getbyte	result1, result1, #0
2047c     01 FA CD F7 | 	test	result1, #1 wz
20480     03 FA 05 56 |  if_ne	mov	result1, #3
20484     E4 01 90 5D |  if_ne	jmp	#LR__3348
20488     10 4E 05 F1 | 	add	fp, #16
2048c     A7 02 68 FC | 	wrlong	#1, fp
20490                 | ' 
20490                 | ' 	res = RES_ERROR;
20490                 | ' 	switch (ctrl) {
20490     08 4E 85 F1 | 	sub	fp, #8
20494     A7 1E C2 FA | 	rdbyte	local01, fp
20498     08 4E 85 F1 | 	sub	fp, #8
2049c     04 1E 26 F3 | 	fle	local01, #4
204a0     30 1E 62 FD | 	jmprel	local01
204a4                 | LR__3340
204a4     10 00 90 FD | 	jmp	#LR__3341
204a8     24 00 90 FD | 	jmp	#LR__3342
204ac     A0 01 90 FD | 	jmp	#LR__3346
204b0     80 01 90 FD | 	jmp	#LR__3345
204b4     98 01 90 FD | 	jmp	#LR__3346
204b8                 | LR__3341
204b8     9C 79 B0 FD | 	call	#_fatfs_cc_select_1015
204bc     00 FA 0D F2 | 	cmp	result1, #0 wz
204c0     10 4E 05 51 |  if_ne	add	fp, #16
204c4     A7 00 68 5C |  if_ne	wrlong	#0, fp
204c8     10 4E 85 51 |  if_ne	sub	fp, #16
204cc                 | ' 			break;
204cc     8C 01 90 FD | 	jmp	#LR__3347
204d0                 | LR__3342
204d0     09 12 06 F6 | 	mov	arg01, #9
204d4     00 14 06 F6 | 	mov	arg02, #0
204d8     B8 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1025
204dc     FD 1E 02 F6 | 	mov	local01, result1
204e0     07 1E 4E F7 | 	zerox	local01, #7 wz
204e4     74 01 90 5D |  if_ne	jmp	#LR__3347
204e8     18 4E 05 F1 | 	add	fp, #24
204ec     A7 12 02 F6 | 	mov	arg01, fp
204f0     18 4E 85 F1 | 	sub	fp, #24
204f4     10 14 06 F6 | 	mov	arg02, #16
204f8     EC 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1019
204fc     00 FA 0D F2 | 	cmp	result1, #0 wz
20500     58 01 90 AD |  if_e	jmp	#LR__3347
20504     18 4E 05 F1 | 	add	fp, #24
20508     A7 1E C2 FA | 	rdbyte	local01, fp
2050c     18 4E 85 F1 | 	sub	fp, #24
20510     06 1E 46 F0 | 	shr	local01, #6
20514     01 1E 0E F2 | 	cmp	local01, #1 wz
20518     5C 00 90 5D |  if_ne	jmp	#LR__3343
2051c     21 4E 05 F1 | 	add	fp, #33
20520     A7 1E C2 FA | 	rdbyte	local01, fp
20524     01 4E 85 F1 | 	sub	fp, #1
20528     A7 FA C1 FA | 	rdbyte	result1, fp
2052c     FD FA 31 F9 | 	getword	result1, result1, #0
20530     08 FA 65 F0 | 	shl	result1, #8
20534     FD 1E 02 F1 | 	add	local01, result1
20538     01 4E 85 F1 | 	sub	fp, #1
2053c     A7 FA C1 FA | 	rdbyte	result1, fp
20540     3F FA 05 F5 | 	and	result1, #63
20544     10 FA 65 F0 | 	shl	result1, #16
20548     FD 1E 02 F1 | 	add	local01, result1
2054c     01 1E 06 F1 | 	add	local01, #1
20550     09 4E 05 F1 | 	add	fp, #9
20554     A7 1E 62 FC | 	wrlong	local01, fp
20558     1C 4E 85 F1 | 	sub	fp, #28
2055c     A7 1E 02 FB | 	rdlong	local01, fp
20560     1C 4E 05 F1 | 	add	fp, #28
20564     A7 FA 01 FB | 	rdlong	result1, fp
20568     28 4E 85 F1 | 	sub	fp, #40
2056c     0A FA 65 F0 | 	shl	result1, #10
20570     0F FB 61 FC | 	wrlong	result1, local01
20574     AC 00 90 FD | 	jmp	#LR__3344
20578                 | LR__3343
20578     1D 4E 05 F1 | 	add	fp, #29
2057c     A7 1E C2 FA | 	rdbyte	local01, fp
20580     0F 1F 42 F8 | 	getnib	local01, local01, #0
20584     05 4E 05 F1 | 	add	fp, #5
20588     A7 FA C1 FA | 	rdbyte	result1, fp
2058c     80 FA 05 F5 | 	and	result1, #128
20590     07 FA C5 F0 | 	sar	result1, #7
20594     FD 1E 02 F1 | 	add	local01, result1
20598     01 4E 85 F1 | 	sub	fp, #1
2059c     A7 FA C1 FA | 	rdbyte	result1, fp
205a0     03 FA 05 F5 | 	and	result1, #3
205a4     01 FA 65 F0 | 	shl	result1, #1
205a8     FD 1E 02 F1 | 	add	local01, result1
205ac     02 1E 06 F1 | 	add	local01, #2
205b0     0D 4E 85 F1 | 	sub	fp, #13
205b4     A7 1E 42 FC | 	wrbyte	local01, fp
205b8     0C 4E 05 F1 | 	add	fp, #12
205bc     A7 1E C2 FA | 	rdbyte	local01, fp
205c0     06 1E 46 F0 | 	shr	local01, #6
205c4     01 4E 85 F1 | 	sub	fp, #1
205c8     A7 FA C1 FA | 	rdbyte	result1, fp
205cc     FD FA 31 F9 | 	getword	result1, result1, #0
205d0     02 FA 65 F0 | 	shl	result1, #2
205d4     FD 1E 02 F1 | 	add	local01, result1
205d8     01 4E 85 F1 | 	sub	fp, #1
205dc     A7 FA C1 FA | 	rdbyte	result1, fp
205e0     03 FA 05 F5 | 	and	result1, #3
205e4     FD FA 31 F9 | 	getword	result1, result1, #0
205e8     0A FA 65 F0 | 	shl	result1, #10
205ec     FD 1E 02 F1 | 	add	local01, result1
205f0     01 1E 06 F1 | 	add	local01, #1
205f4     0A 4E 05 F1 | 	add	fp, #10
205f8     A7 1E 62 FC | 	wrlong	local01, fp
205fc     1C 4E 85 F1 | 	sub	fp, #28
20600     A7 1E 02 FB | 	rdlong	local01, fp
20604     1C 4E 05 F1 | 	add	fp, #28
20608     A7 FA 01 FB | 	rdlong	result1, fp
2060c     14 4E 85 F1 | 	sub	fp, #20
20610     A7 16 C2 FA | 	rdbyte	arg03, fp
20614     14 4E 85 F1 | 	sub	fp, #20
20618     09 16 86 F1 | 	sub	arg03, #9
2061c     0B FB 61 F0 | 	shl	result1, arg03
20620     0F FB 61 FC | 	wrlong	result1, local01
20624                 | LR__3344
20624     10 4E 05 F1 | 	add	fp, #16
20628     A7 00 68 FC | 	wrlong	#0, fp
2062c     10 4E 85 F1 | 	sub	fp, #16
20630                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
20630                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
20630                 | ' 					*(LBA_t*)buff = cs << (n - 9);
20630                 | ' 				}
20630                 | ' 				res = RES_OK;
20630                 | ' 			}
20630                 | ' 			break;
20630     28 00 90 FD | 	jmp	#LR__3347
20634                 | LR__3345
20634     0C 4E 05 F1 | 	add	fp, #12
20638     A7 1E 02 FB | 	rdlong	local01, fp
2063c     0F 01 69 FC | 	wrlong	#128, local01
20640     04 4E 05 F1 | 	add	fp, #4
20644     A7 00 68 FC | 	wrlong	#0, fp
20648     10 4E 85 F1 | 	sub	fp, #16
2064c                 | ' 			*(DWORD*)buff = 128;
2064c                 | ' 			res = RES_OK;
2064c                 | ' 			break;
2064c     0C 00 90 FD | 	jmp	#LR__3347
20650                 | LR__3346
20650     10 4E 05 F1 | 	add	fp, #16
20654     A7 08 68 FC | 	wrlong	#4, fp
20658     10 4E 85 F1 | 	sub	fp, #16
2065c                 | LR__3347
2065c     74 77 B0 FD | 	call	#_fatfs_cc_deselect_1011
20660                 | ' 			res = RES_PARERR;
20660                 | ' 	}
20660                 | ' 
20660                 | ' 	deselect();
20660                 | ' 
20660                 | ' 	return res;
20660     10 4E 05 F1 | 	add	fp, #16
20664     A7 FA 01 FB | 	rdlong	result1, fp
20668     10 4E 85 F1 | 	sub	fp, #16
2066c                 | LR__3348
2066c     A7 F0 03 F6 | 	mov	ptra, fp
20670     B2 00 A0 FD | 	call	#popregs_
20674                 | _fatfs_cc_disk_ioctl_ret
20674     2D 00 64 FD | 	ret
20678                 | 
20678                 | _fatfs_cc_disk_setpins
20678     00 12 0E F2 | 	cmp	arg01, #0 wz
2067c     01 FA 65 56 |  if_ne	neg	result1, #1
20680     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
20684     01 00 00 FF 
20688     10 E4 05 F1 | 	add	objptr, ##528
2068c     F2 14 62 FC | 	wrlong	arg02, objptr
20690     04 E4 05 F1 | 	add	objptr, #4
20694     F2 16 62 FC | 	wrlong	arg03, objptr
20698     04 E4 05 F1 | 	add	objptr, #4
2069c     F2 18 62 FC | 	wrlong	arg04, objptr
206a0     04 E4 05 F1 | 	add	objptr, #4
206a4     F2 1A 62 FC | 	wrlong	arg05, objptr
206a8     01 00 00 FF 
206ac     1C E4 85 F1 | 	sub	objptr, ##540
206b0     00 FA 05 F6 | 	mov	result1, #0
206b4                 | _fatfs_cc_disk_setpins_ret
206b4     2D 00 64 FD | 	ret
206b8                 | 
206b8                 | _fatfs_cc_tchar2uni
206b8     09 01 02 FB | 	rdlong	_var01, arg01
206bc     00 03 02 F6 | 	mov	_var02, _var01
206c0     01 00 06 F1 | 	add	_var01, #1
206c4     00 05 02 F6 | 	mov	_var03, _var01
206c8     01 07 C2 FA | 	rdbyte	_var04, _var02
206cc     80 06 CE F7 | 	test	_var04, #128 wz
206d0     E8 00 90 AD |  if_e	jmp	#LR__3357
206d4     03 09 02 F6 | 	mov	_var05, _var04
206d8     E0 08 06 F5 | 	and	_var05, #224
206dc     C0 08 0E F2 | 	cmp	_var05, #192 wz
206e0     1F 06 06 A5 |  if_e	and	_var04, #31
206e4     01 0A 06 A6 |  if_e	mov	_var06, #1
206e8     34 00 90 AD |  if_e	jmp	#LR__3351
206ec     03 09 02 F6 | 	mov	_var05, _var04
206f0     F0 08 06 F5 | 	and	_var05, #240
206f4     E0 08 0E F2 | 	cmp	_var05, #224 wz
206f8     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
206fc     02 0A 06 A6 |  if_e	mov	_var06, #2
20700     1C 00 90 AD |  if_e	jmp	#LR__3350
20704     03 09 02 F6 | 	mov	_var05, _var04
20708     F8 08 06 F5 | 	and	_var05, #248
2070c     F0 08 0E F2 | 	cmp	_var05, #240 wz
20710     07 06 06 A5 |  if_e	and	_var04, #7
20714     03 0A 06 A6 |  if_e	mov	_var06, #3
20718                 | ' 			return 0xFFFFFFFF;
20718     01 FA 65 56 |  if_ne	neg	result1, #1
2071c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
20720                 | LR__3350
20720                 | LR__3351
20720                 | ' 		}
20720                 | ' 		do {
20720                 | LR__3352
20720     02 0D C2 FA | 	rdbyte	_var07, _var03
20724     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
20728     C0 08 06 F5 | 	and	_var05, #192
2072c     80 08 0E F2 | 	cmp	_var05, #128 wz
20730     01 04 06 F1 | 	add	_var03, #1
20734     01 FA 65 56 |  if_ne	neg	result1, #1
20738     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2073c     06 06 66 F0 | 	shl	_var04, #6
20740     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
20744     3F 02 06 F5 | 	and	_var02, #63
20748     01 07 42 F5 | 	or	_var04, _var02
2074c     F4 0B 6E FB | 	djnz	_var06, #LR__3352
20750     80 06 16 F2 | 	cmp	_var04, #128 wc
20754     24 00 90 CD |  if_b	jmp	#LR__3354
20758     6C 00 00 FF 
2075c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
20760     0C 00 90 CD |  if_b	jmp	#LR__3353
20764     70 00 00 FF 
20768     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2076c     0C 00 90 CD |  if_b	jmp	#LR__3354
20770                 | LR__3353
20770     80 08 00 FF 
20774     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
20778     08 00 90 CD |  if_b	jmp	#LR__3355
2077c                 | LR__3354
2077c     01 FA 65 F6 | 	neg	result1, #1
20780     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
20784                 | LR__3355
20784     80 00 00 FF 
20788     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2078c     2C 00 90 CD |  if_b	jmp	#LR__3356
20790     03 03 02 F6 | 	mov	_var02, _var04
20794     80 00 00 FF 
20798     00 02 86 F1 | 	sub	_var02, ##65536
2079c     06 02 66 F0 | 	shl	_var02, #6
207a0     80 FF 01 FF 
207a4     00 02 06 F5 | 	and	_var02, ##67043328
207a8     6E 00 6C FF 
207ac     00 08 06 F6 | 	mov	_var05, ##-671032320
207b0     01 09 42 F5 | 	or	_var05, _var02
207b4     09 06 46 F7 | 	zerox	_var04, #9
207b8     04 07 42 F5 | 	or	_var04, _var05
207bc                 | LR__3356
207bc                 | LR__3357
207bc     09 05 62 FC | 	wrlong	_var03, arg01
207c0                 | ' 	}
207c0                 | ' #line 811 "ff.c"
207c0                 | ' 	*str = p;
207c0                 | ' 	return uc;
207c0     03 FB 01 F6 | 	mov	result1, _var04
207c4                 | _fatfs_cc_tchar2uni_ret
207c4     2D 00 64 FD | 	ret
207c8                 | 
207c8                 | _fatfs_cc_put_utf
207c8     80 12 16 F2 | 	cmp	arg01, #128 wc
207cc     18 00 90 3D |  if_ae	jmp	#LR__3360
207d0     01 16 16 F2 | 	cmp	arg03, #1 wc
207d4     00 FA 05 C6 |  if_b	mov	result1, #0
207d8     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
207dc     0A 13 42 FC | 	wrbyte	arg01, arg02
207e0                 | ' 		*buf = (TCHAR)chr;
207e0                 | ' 		return 1;
207e0     01 FA 05 F6 | 	mov	result1, #1
207e4     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
207e8                 | LR__3360
207e8     04 00 00 FF 
207ec     00 12 16 F2 | 	cmp	arg01, ##2048 wc
207f0     40 00 90 3D |  if_ae	jmp	#LR__3361
207f4     02 16 16 F2 | 	cmp	arg03, #2 wc
207f8     00 FA 05 C6 |  if_b	mov	result1, #0
207fc     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20800     09 FB 01 F6 | 	mov	result1, arg01
20804     06 FA 45 F0 | 	shr	result1, #6
20808     1F FA 05 F5 | 	and	result1, #31
2080c     C0 16 06 F6 | 	mov	arg03, #192
20810     FD 16 42 F5 | 	or	arg03, result1
20814     0A 17 42 FC | 	wrbyte	arg03, arg02
20818     01 14 06 F1 | 	add	arg02, #1
2081c     3F 12 06 F5 | 	and	arg01, #63
20820     80 FA 05 F6 | 	mov	result1, #128
20824     09 FB 41 F5 | 	or	result1, arg01
20828     0A FB 41 FC | 	wrbyte	result1, arg02
2082c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2082c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2082c                 | ' 		return 2;
2082c     02 FA 05 F6 | 	mov	result1, #2
20830     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20834                 | LR__3361
20834     80 00 00 FF 
20838     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2083c     70 00 90 3D |  if_ae	jmp	#LR__3364
20840     03 16 16 F2 | 	cmp	arg03, #3 wc
20844     18 00 90 CD |  if_b	jmp	#LR__3362
20848     6C 00 00 FF 
2084c     00 12 16 F2 | 	cmp	arg01, ##55296 wc
20850     14 00 90 CD |  if_b	jmp	#LR__3363
20854     70 00 00 FF 
20858     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2085c     08 00 90 3D |  if_ae	jmp	#LR__3363
20860                 | LR__3362
20860     00 FA 05 F6 | 	mov	result1, #0
20864     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20868                 | LR__3363
20868     09 FB 59 F8 | 	getnib	result1, arg01, #3
2086c     E0 16 06 F6 | 	mov	arg03, #224
20870     FD 16 42 F5 | 	or	arg03, result1
20874     0A 17 42 FC | 	wrbyte	arg03, arg02
20878     01 14 06 F1 | 	add	arg02, #1
2087c     09 FB 01 F6 | 	mov	result1, arg01
20880     06 FA 45 F0 | 	shr	result1, #6
20884     3F FA 05 F5 | 	and	result1, #63
20888     80 16 06 F6 | 	mov	arg03, #128
2088c     FD 16 42 F5 | 	or	arg03, result1
20890     0A 17 42 FC | 	wrbyte	arg03, arg02
20894     01 14 06 F1 | 	add	arg02, #1
20898     3F 12 06 F5 | 	and	arg01, #63
2089c     80 FA 05 F6 | 	mov	result1, #128
208a0     09 FB 41 F5 | 	or	result1, arg01
208a4     0A FB 41 FC | 	wrbyte	result1, arg02
208a8                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
208a8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
208a8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
208a8                 | ' 		return 3;
208a8     03 FA 05 F6 | 	mov	result1, #3
208ac     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
208b0                 | LR__3364
208b0     04 16 16 F2 | 	cmp	arg03, #4 wc
208b4     00 FA 05 C6 |  if_b	mov	result1, #0
208b8     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
208bc     09 01 02 F6 | 	mov	_var01, arg01
208c0     E0 01 06 F4 | 	bitl	_var01, #480
208c4     00 00 6C FF 
208c8     00 00 86 F1 | 	sub	_var01, ##-671088640
208cc     06 00 46 F0 | 	shr	_var01, #6
208d0     09 13 32 F9 | 	getword	arg01, arg01, #0
208d4     6E 00 00 FF 
208d8     00 12 86 F1 | 	sub	arg01, ##56320
208dc     00 08 00 FF 
208e0     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
208e4     02 00 00 CF 
208e8     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
208ec     00 FA 05 36 |  if_ae	mov	result1, #0
208f0     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
208f4     09 01 42 F5 | 	or	_var01, arg01
208f8     80 00 00 FF 
208fc     00 00 06 F1 | 	add	_var01, ##65536
20900     00 FB 01 F6 | 	mov	result1, _var01
20904     12 FA 45 F0 | 	shr	result1, #18
20908     07 FA 05 F5 | 	and	result1, #7
2090c     F0 16 06 F6 | 	mov	arg03, #240
20910     FD 16 42 F5 | 	or	arg03, result1
20914     0A 17 42 FC | 	wrbyte	arg03, arg02
20918     01 14 06 F1 | 	add	arg02, #1
2091c     00 FB 01 F6 | 	mov	result1, _var01
20920     0C FA 45 F0 | 	shr	result1, #12
20924     3F FA 05 F5 | 	and	result1, #63
20928     80 16 06 F6 | 	mov	arg03, #128
2092c     FD 16 42 F5 | 	or	arg03, result1
20930     0A 17 42 FC | 	wrbyte	arg03, arg02
20934     01 14 06 F1 | 	add	arg02, #1
20938     00 FB 01 F6 | 	mov	result1, _var01
2093c     06 FA 45 F0 | 	shr	result1, #6
20940     3F FA 05 F5 | 	and	result1, #63
20944     80 16 06 F6 | 	mov	arg03, #128
20948     FD 16 42 F5 | 	or	arg03, result1
2094c     0A 17 42 FC | 	wrbyte	arg03, arg02
20950     01 14 06 F1 | 	add	arg02, #1
20954     3F 00 06 F5 | 	and	_var01, #63
20958     80 FA 05 F6 | 	mov	result1, #128
2095c     00 FB 41 F5 | 	or	result1, _var01
20960     0A FB 41 FC | 	wrbyte	result1, arg02
20964                 | ' 	chr = (hc | chr) + 0x10000;
20964                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
20964                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
20964                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
20964                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
20964                 | ' 	return 4;
20964     04 FA 05 F6 | 	mov	result1, #4
20968                 | _fatfs_cc_put_utf_ret
20968     2D 00 64 FD | 	ret
2096c                 | 
2096c                 | _fatfs_cc_sync_window
2096c     02 4A 05 F6 | 	mov	COUNT_, #2
20970     A8 00 A0 FD | 	call	#pushregs_
20974     09 1F 02 F6 | 	mov	local01, arg01
20978     00 20 06 F6 | 	mov	local02, #0
2097c     03 1E 06 F1 | 	add	local01, #3
20980     0F FB C9 FA | 	rdbyte	result1, local01 wz
20984     03 1E 86 F1 | 	sub	local01, #3
20988     A4 00 90 AD |  if_e	jmp	#LR__3372
2098c     01 1E 06 F1 | 	add	local01, #1
20990     0F 13 C2 FA | 	rdbyte	arg01, local01
20994     33 1E 06 F1 | 	add	local01, #51
20998     0F 15 02 F6 | 	mov	arg02, local01
2099c     04 1E 86 F1 | 	sub	local01, #4
209a0     0F 17 02 FB | 	rdlong	arg03, local01
209a4     30 1E 86 F1 | 	sub	local01, #48
209a8     01 18 06 F6 | 	mov	arg04, #1
209ac     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
209b0     00 FA 0D F2 | 	cmp	result1, #0 wz
209b4     74 00 90 5D |  if_ne	jmp	#LR__3370
209b8     03 1E 06 F1 | 	add	local01, #3
209bc     0F 01 48 FC | 	wrbyte	#0, local01
209c0     2D 1E 06 F1 | 	add	local01, #45
209c4     0F FB 01 FB | 	rdlong	result1, local01
209c8     0C 1E 86 F1 | 	sub	local01, #12
209cc     0F 19 02 FB | 	rdlong	arg04, local01
209d0     0C FB 81 F1 | 	sub	result1, arg04
209d4     08 1E 86 F1 | 	sub	local01, #8
209d8     0F 19 02 FB | 	rdlong	arg04, local01
209dc     1C 1E 86 F1 | 	sub	local01, #28
209e0     0C FB 11 F2 | 	cmp	result1, arg04 wc
209e4     48 00 90 3D |  if_ae	jmp	#LR__3371
209e8     02 1E 06 F1 | 	add	local01, #2
209ec     0F 19 C2 FA | 	rdbyte	arg04, local01
209f0     02 1E 86 F1 | 	sub	local01, #2
209f4     02 18 0E F2 | 	cmp	arg04, #2 wz
209f8     34 00 90 5D |  if_ne	jmp	#LR__3371
209fc     01 1E 06 F1 | 	add	local01, #1
20a00     0F 13 C2 FA | 	rdbyte	arg01, local01
20a04     33 1E 06 F1 | 	add	local01, #51
20a08     0F 15 02 F6 | 	mov	arg02, local01
20a0c     04 1E 86 F1 | 	sub	local01, #4
20a10     0F 17 02 FB | 	rdlong	arg03, local01
20a14     14 1E 86 F1 | 	sub	local01, #20
20a18     0F 1F 02 FB | 	rdlong	local01, local01
20a1c     0F 17 02 F1 | 	add	arg03, local01
20a20     01 18 06 F6 | 	mov	arg04, #1
20a24     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
20a28     04 00 90 FD | 	jmp	#LR__3371
20a2c                 | LR__3370
20a2c     01 20 06 F6 | 	mov	local02, #1
20a30                 | LR__3371
20a30                 | LR__3372
20a30                 | ' 			res = FR_DISK_ERR;
20a30                 | ' 		}
20a30                 | ' 	}
20a30                 | ' 	return res;
20a30     10 FB 01 F6 | 	mov	result1, local02
20a34     A7 F0 03 F6 | 	mov	ptra, fp
20a38     B2 00 A0 FD | 	call	#popregs_
20a3c                 | _fatfs_cc_sync_window_ret
20a3c     2D 00 64 FD | 	ret
20a40                 | 
20a40                 | _fatfs_cc_move_window
20a40     03 4A 05 F6 | 	mov	COUNT_, #3
20a44     A8 00 A0 FD | 	call	#pushregs_
20a48     09 1F 02 F6 | 	mov	local01, arg01
20a4c     0A 21 02 F6 | 	mov	local02, arg02
20a50     00 22 06 F6 | 	mov	local03, #0
20a54     30 1E 06 F1 | 	add	local01, #48
20a58     0F 19 02 FB | 	rdlong	arg04, local01
20a5c     30 1E 86 F1 | 	sub	local01, #48
20a60     0C 21 0A F2 | 	cmp	local02, arg04 wz
20a64     40 00 90 AD |  if_e	jmp	#LR__3381
20a68     0F 13 02 F6 | 	mov	arg01, local01
20a6c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
20a70     FD 22 0A F6 | 	mov	local03, result1 wz
20a74     30 00 90 5D |  if_ne	jmp	#LR__3380
20a78     01 1E 06 F1 | 	add	local01, #1
20a7c     0F 13 C2 FA | 	rdbyte	arg01, local01
20a80     33 1E 06 F1 | 	add	local01, #51
20a84     0F 15 02 F6 | 	mov	arg02, local01
20a88     10 17 02 F6 | 	mov	arg03, local02
20a8c     01 18 06 F6 | 	mov	arg04, #1
20a90     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
20a94     00 FA 0D F2 | 	cmp	result1, #0 wz
20a98     01 20 66 56 |  if_ne	neg	local02, #1
20a9c     01 22 06 56 |  if_ne	mov	local03, #1
20aa0     04 1E 86 F1 | 	sub	local01, #4
20aa4     0F 21 62 FC | 	wrlong	local02, local01
20aa8                 | LR__3380
20aa8                 | LR__3381
20aa8                 | ' 				sect = (LBA_t)0 - 1;
20aa8                 | ' 				res = FR_DISK_ERR;
20aa8                 | ' 			}
20aa8                 | ' 			fs->winsect = sect;
20aa8                 | ' 		}
20aa8                 | ' 	}
20aa8                 | ' 	return res;
20aa8     11 FB 01 F6 | 	mov	result1, local03
20aac     A7 F0 03 F6 | 	mov	ptra, fp
20ab0     B2 00 A0 FD | 	call	#popregs_
20ab4                 | _fatfs_cc_move_window_ret
20ab4     2D 00 64 FD | 	ret
20ab8                 | 
20ab8                 | _fatfs_cc_sync_fs
20ab8     02 4A 05 F6 | 	mov	COUNT_, #2
20abc     A8 00 A0 FD | 	call	#pushregs_
20ac0     09 1F 02 F6 | 	mov	local01, arg01
20ac4     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
20ac8     FD 20 0A F6 | 	mov	local02, result1 wz
20acc     D8 00 90 5D |  if_ne	jmp	#LR__3391
20ad0     0F 19 C2 FA | 	rdbyte	arg04, local01
20ad4     03 18 0E F2 | 	cmp	arg04, #3 wz
20ad8     04 1E 06 A1 |  if_e	add	local01, #4
20adc     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
20ae0     04 1E 86 A1 |  if_e	sub	local01, #4
20ae4     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
20ae8     A0 00 90 5D |  if_ne	jmp	#LR__3390
20aec     34 1E 06 F1 | 	add	local01, #52
20af0     0F 13 02 F6 | 	mov	arg01, local01
20af4     00 14 06 F6 | 	mov	arg02, #0
20af8     09 16 C6 F9 | 	decod	arg03, #9
20afc     98 00 A0 FD | 	call	#\builtin_bytefill_
20b00     0F 13 02 F6 | 	mov	arg01, local01
20b04     FE 13 06 F1 | 	add	arg01, #510
20b08     55 00 80 FF 
20b0c     09 AB 58 FC | 	wrword	##43605, arg01
20b10     A9 B0 A0 FF 
20b14     0F A5 68 FC | 	wrlong	##1096897106, local01
20b18     0F 13 02 F6 | 	mov	arg01, local01
20b1c     E4 13 06 F1 | 	add	arg01, #484
20b20     B9 A0 B0 FF 
20b24     09 E5 68 FC | 	wrlong	##1631679090, arg01
20b28     0F 13 02 F6 | 	mov	arg01, local01
20b2c     E8 13 06 F1 | 	add	arg01, #488
20b30     20 1E 86 F1 | 	sub	local01, #32
20b34     0F 15 02 FB | 	rdlong	arg02, local01
20b38     09 15 62 FC | 	wrlong	arg02, arg01
20b3c     20 1E 06 F1 | 	add	local01, #32
20b40     0F 13 02 F6 | 	mov	arg01, local01
20b44     EC 13 06 F1 | 	add	arg01, #492
20b48     24 1E 86 F1 | 	sub	local01, #36
20b4c     0F 15 02 FB | 	rdlong	arg02, local01
20b50     09 15 62 FC | 	wrlong	arg02, arg01
20b54     10 1E 06 F1 | 	add	local01, #16
20b58     0F 17 02 FB | 	rdlong	arg03, local01
20b5c     01 16 06 F1 | 	add	arg03, #1
20b60     10 1E 06 F1 | 	add	local01, #16
20b64     0F 17 62 FC | 	wrlong	arg03, local01
20b68     2F 1E 86 F1 | 	sub	local01, #47
20b6c     0F 13 C2 FA | 	rdbyte	arg01, local01
20b70     33 1E 06 F1 | 	add	local01, #51
20b74     0F 15 02 F6 | 	mov	arg02, local01
20b78     01 18 06 F6 | 	mov	arg04, #1
20b7c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
20b80     30 1E 86 F1 | 	sub	local01, #48
20b84     0F 01 48 FC | 	wrbyte	#0, local01
20b88     04 1E 86 F1 | 	sub	local01, #4
20b8c                 | LR__3390
20b8c     01 1E 06 F1 | 	add	local01, #1
20b90     0F 13 C2 FA | 	rdbyte	arg01, local01
20b94     00 14 06 F6 | 	mov	arg02, #0
20b98     00 16 06 F6 | 	mov	arg03, #0
20b9c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
20ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
20ba4     01 20 06 56 |  if_ne	mov	local02, #1
20ba8                 | LR__3391
20ba8                 | ' 	}
20ba8                 | ' 
20ba8                 | ' 	return res;
20ba8     10 FB 01 F6 | 	mov	result1, local02
20bac     A7 F0 03 F6 | 	mov	ptra, fp
20bb0     B2 00 A0 FD | 	call	#popregs_
20bb4                 | _fatfs_cc_sync_fs_ret
20bb4     2D 00 64 FD | 	ret
20bb8                 | 
20bb8                 | _fatfs_cc_clst2sect
20bb8     02 14 86 F1 | 	sub	arg02, #2
20bbc     18 12 06 F1 | 	add	arg01, #24
20bc0     09 01 02 FB | 	rdlong	_var01, arg01
20bc4     18 12 86 F1 | 	sub	arg01, #24
20bc8     02 00 86 F1 | 	sub	_var01, #2
20bcc     00 15 12 F2 | 	cmp	arg02, _var01 wc
20bd0     00 FA 05 36 |  if_ae	mov	result1, #0
20bd4     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
20bd8     0A 12 06 F1 | 	add	arg01, #10
20bdc     09 01 E2 FA | 	rdword	_var01, arg01
20be0     0A 01 02 FD | 	qmul	_var01, arg02
20be4                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
20be4     22 12 06 F1 | 	add	arg01, #34
20be8     09 FB 01 FB | 	rdlong	result1, arg01
20bec     18 00 62 FD | 	getqx	_var01
20bf0     00 FB 01 F1 | 	add	result1, _var01
20bf4                 | _fatfs_cc_clst2sect_ret
20bf4     2D 00 64 FD | 	ret
20bf8                 | 
20bf8                 | _fatfs_cc_get_fat
20bf8     07 4A 05 F6 | 	mov	COUNT_, #7
20bfc     A8 00 A0 FD | 	call	#pushregs_
20c00     0A 1F 02 F6 | 	mov	local01, arg02
20c04     09 21 02 FB | 	rdlong	local02, arg01
20c08     02 1E 16 F2 | 	cmp	local01, #2 wc
20c0c     14 00 90 CD |  if_b	jmp	#LR__3400
20c10     18 20 06 F1 | 	add	local02, #24
20c14     10 23 02 FB | 	rdlong	local03, local02
20c18     18 20 86 F1 | 	sub	local02, #24
20c1c     11 1F 12 F2 | 	cmp	local01, local03 wc
20c20     08 00 90 CD |  if_b	jmp	#LR__3401
20c24                 | LR__3400
20c24     01 24 06 F6 | 	mov	local04, #1
20c28     60 01 90 FD | 	jmp	#LR__3408
20c2c                 | LR__3401
20c2c     01 24 66 F6 | 	neg	local04, #1
20c30                 | ' 		val = 0xFFFFFFFF;
20c30                 | ' 
20c30                 | ' 		switch (fs->fs_type) {
20c30     10 27 C2 FA | 	rdbyte	local05, local02
20c34     01 26 86 F1 | 	sub	local05, #1
20c38     03 26 26 F3 | 	fle	local05, #3
20c3c     30 26 62 FD | 	jmprel	local05
20c40                 | LR__3402
20c40     0C 00 90 FD | 	jmp	#LR__3403
20c44     B8 00 90 FD | 	jmp	#LR__3404
20c48     F8 00 90 FD | 	jmp	#LR__3405
20c4c     38 01 90 FD | 	jmp	#LR__3406
20c50                 | LR__3403
20c50     0F 27 02 F6 | 	mov	local05, local01
20c54     0F 13 02 F6 | 	mov	arg01, local01
20c58     01 12 46 F0 | 	shr	arg01, #1
20c5c     09 27 02 F1 | 	add	local05, arg01
20c60     10 13 02 F6 | 	mov	arg01, local02
20c64     13 29 02 F6 | 	mov	local06, local05
20c68     09 28 46 F0 | 	shr	local06, #9
20c6c     24 20 06 F1 | 	add	local02, #36
20c70     10 15 02 FB | 	rdlong	arg02, local02
20c74     24 20 86 F1 | 	sub	local02, #36
20c78     14 15 02 F1 | 	add	arg02, local06
20c7c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
20c80     00 FA 0D F2 | 	cmp	result1, #0 wz
20c84     04 01 90 5D |  if_ne	jmp	#LR__3407
20c88     13 29 02 F6 | 	mov	local06, local05
20c8c     FF 29 06 F5 | 	and	local06, #511
20c90     34 20 06 F1 | 	add	local02, #52
20c94     10 29 02 F1 | 	add	local06, local02
20c98     14 2B C2 FA | 	rdbyte	local07, local06
20c9c     34 20 86 F1 | 	sub	local02, #52
20ca0     10 13 02 F6 | 	mov	arg01, local02
20ca4     01 26 06 F1 | 	add	local05, #1
20ca8     13 29 02 F6 | 	mov	local06, local05
20cac     09 28 46 F0 | 	shr	local06, #9
20cb0     24 20 06 F1 | 	add	local02, #36
20cb4     10 15 02 FB | 	rdlong	arg02, local02
20cb8     24 20 86 F1 | 	sub	local02, #36
20cbc     14 15 02 F1 | 	add	arg02, local06
20cc0     7C FD BF FD | 	call	#_fatfs_cc_move_window
20cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
20cc8     C0 00 90 5D |  if_ne	jmp	#LR__3407
20ccc     FF 27 06 F5 | 	and	local05, #511
20cd0     34 20 06 F1 | 	add	local02, #52
20cd4     10 27 02 F1 | 	add	local05, local02
20cd8     13 29 C2 FA | 	rdbyte	local06, local05
20cdc     08 28 66 F0 | 	shl	local06, #8
20ce0     14 2B 42 F5 | 	or	local07, local06
20ce4     01 1E CE F7 | 	test	local01, #1 wz
20ce8     04 2A 46 50 |  if_ne	shr	local07, #4
20cec     15 23 02 56 |  if_ne	mov	local03, local07
20cf0     0B 2A 46 A7 |  if_e	zerox	local07, #11
20cf4     15 23 02 A6 |  if_e	mov	local03, local07
20cf8     11 25 02 F6 | 	mov	local04, local03
20cfc                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
20cfc                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
20cfc                 | ' 			break;
20cfc     8C 00 90 FD | 	jmp	#LR__3407
20d00                 | LR__3404
20d00     10 13 02 F6 | 	mov	arg01, local02
20d04     0F 29 02 F6 | 	mov	local06, local01
20d08     08 28 46 F0 | 	shr	local06, #8
20d0c     24 20 06 F1 | 	add	local02, #36
20d10     10 15 02 FB | 	rdlong	arg02, local02
20d14     24 20 86 F1 | 	sub	local02, #36
20d18     14 15 02 F1 | 	add	arg02, local06
20d1c     20 FD BF FD | 	call	#_fatfs_cc_move_window
20d20     00 FA 0D F2 | 	cmp	result1, #0 wz
20d24     64 00 90 5D |  if_ne	jmp	#LR__3407
20d28     34 20 06 F1 | 	add	local02, #52
20d2c     01 1E 66 F0 | 	shl	local01, #1
20d30     FF 1F 06 F5 | 	and	local01, #511
20d34     0F 21 02 F1 | 	add	local02, local01
20d38                 | ' {
20d38                 | ' 
20d38                 | ' 	return *((WORD*)ptr);
20d38     10 FB E1 FA | 	rdword	result1, local02
20d3c     FD 24 32 F9 | 	getword	local04, result1, #0
20d40                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
20d40                 | ' 			break;
20d40     48 00 90 FD | 	jmp	#LR__3407
20d44                 | LR__3405
20d44     10 13 02 F6 | 	mov	arg01, local02
20d48     0F 29 02 F6 | 	mov	local06, local01
20d4c     07 28 46 F0 | 	shr	local06, #7
20d50     24 20 06 F1 | 	add	local02, #36
20d54     10 15 02 FB | 	rdlong	arg02, local02
20d58     24 20 86 F1 | 	sub	local02, #36
20d5c     14 15 02 F1 | 	add	arg02, local06
20d60     DC FC BF FD | 	call	#_fatfs_cc_move_window
20d64     00 FA 0D F2 | 	cmp	result1, #0 wz
20d68     20 00 90 5D |  if_ne	jmp	#LR__3407
20d6c     34 20 06 F1 | 	add	local02, #52
20d70     02 1E 66 F0 | 	shl	local01, #2
20d74     FF 1F 06 F5 | 	and	local01, #511
20d78     0F 21 02 F1 | 	add	local02, local01
20d7c                 | ' {
20d7c                 | ' 
20d7c                 | ' 	return *((DWORD*)ptr);
20d7c     10 25 02 FB | 	rdlong	local04, local02
20d80     7C 24 06 F4 | 	bitl	local04, #124
20d84                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
20d84                 | ' 			break;
20d84     04 00 90 FD | 	jmp	#LR__3407
20d88                 | LR__3406
20d88     01 24 06 F6 | 	mov	local04, #1
20d8c                 | LR__3407
20d8c                 | LR__3408
20d8c                 | ' 			val = 1;
20d8c                 | ' 		}
20d8c                 | ' 	}
20d8c                 | ' 
20d8c                 | ' 	return val;
20d8c     12 FB 01 F6 | 	mov	result1, local04
20d90     A7 F0 03 F6 | 	mov	ptra, fp
20d94     B2 00 A0 FD | 	call	#popregs_
20d98                 | _fatfs_cc_get_fat_ret
20d98     2D 00 64 FD | 	ret
20d9c                 | 
20d9c                 | _fatfs_cc_put_fat
20d9c     08 4A 05 F6 | 	mov	COUNT_, #8
20da0     A8 00 A0 FD | 	call	#pushregs_
20da4     09 1F 02 F6 | 	mov	local01, arg01
20da8     0A 21 02 F6 | 	mov	local02, arg02
20dac     0B 23 02 F6 | 	mov	local03, arg03
20db0     02 24 06 F6 | 	mov	local04, #2
20db4     02 20 16 F2 | 	cmp	local02, #2 wc
20db8     E0 01 90 CD |  if_b	jmp	#LR__3417
20dbc     18 1E 06 F1 | 	add	local01, #24
20dc0     0F 27 02 FB | 	rdlong	local05, local01
20dc4     18 1E 86 F1 | 	sub	local01, #24
20dc8     13 21 12 F2 | 	cmp	local02, local05 wc
20dcc     CC 01 90 3D |  if_ae	jmp	#LR__3417
20dd0                 | ' 		switch (fs->fs_type) {
20dd0     0F 29 C2 FA | 	rdbyte	local06, local01
20dd4     01 28 86 F1 | 	sub	local06, #1
20dd8     03 28 26 F3 | 	fle	local06, #3
20ddc     30 28 62 FD | 	jmprel	local06
20de0                 | LR__3410
20de0     0C 00 90 FD | 	jmp	#LR__3411
20de4     F8 00 90 FD | 	jmp	#LR__3414
20de8     40 01 90 FD | 	jmp	#LR__3415
20dec     AC 01 90 FD | 	jmp	#LR__3416
20df0                 | LR__3411
20df0     10 2B 02 F6 | 	mov	local07, local02
20df4     10 27 02 F6 | 	mov	local05, local02
20df8     01 26 46 F0 | 	shr	local05, #1
20dfc     13 2B 02 F1 | 	add	local07, local05
20e00     0F 13 02 F6 | 	mov	arg01, local01
20e04     15 29 02 F6 | 	mov	local06, local07
20e08     09 28 46 F0 | 	shr	local06, #9
20e0c     24 1E 06 F1 | 	add	local01, #36
20e10     0F 15 02 FB | 	rdlong	arg02, local01
20e14     24 1E 86 F1 | 	sub	local01, #36
20e18     14 15 02 F1 | 	add	arg02, local06
20e1c     20 FC BF FD | 	call	#_fatfs_cc_move_window
20e20     FD 24 0A F6 | 	mov	local04, result1 wz
20e24     74 01 90 5D |  if_ne	jmp	#LR__3416
20e28     34 1E 06 F1 | 	add	local01, #52
20e2c     0F 2D 02 F6 | 	mov	local08, local01
20e30     15 27 02 F6 | 	mov	local05, local07
20e34     FF 27 06 F5 | 	and	local05, #511
20e38     13 2D 02 F1 | 	add	local08, local05
20e3c     01 20 CE F7 | 	test	local02, #1 wz
20e40     34 1E 86 F1 | 	sub	local01, #52
20e44     01 2A 06 F1 | 	add	local07, #1
20e48     18 00 90 AD |  if_e	jmp	#LR__3412
20e4c     16 27 C2 FA | 	rdbyte	local05, local08
20e50     13 27 42 F8 | 	getnib	local05, local05, #0
20e54     11 29 E2 F8 | 	getbyte	local06, local03, #0
20e58     04 28 66 F0 | 	shl	local06, #4
20e5c     14 27 42 F5 | 	or	local05, local06
20e60     04 00 90 FD | 	jmp	#LR__3413
20e64                 | LR__3412
20e64     11 27 02 F6 | 	mov	local05, local03
20e68                 | LR__3413
20e68     16 27 42 FC | 	wrbyte	local05, local08
20e6c     03 1E 06 F1 | 	add	local01, #3
20e70     0F 03 48 FC | 	wrbyte	#1, local01
20e74     03 1E 86 F1 | 	sub	local01, #3
20e78     0F 13 02 F6 | 	mov	arg01, local01
20e7c     15 2D 02 F6 | 	mov	local08, local07
20e80     09 2C 46 F0 | 	shr	local08, #9
20e84     24 1E 06 F1 | 	add	local01, #36
20e88     0F 15 02 FB | 	rdlong	arg02, local01
20e8c     24 1E 86 F1 | 	sub	local01, #36
20e90     16 15 02 F1 | 	add	arg02, local08
20e94     A8 FB BF FD | 	call	#_fatfs_cc_move_window
20e98     FD 24 0A F6 | 	mov	local04, result1 wz
20e9c     FC 00 90 5D |  if_ne	jmp	#LR__3416
20ea0     34 1E 06 F1 | 	add	local01, #52
20ea4     0F 2D 02 F6 | 	mov	local08, local01
20ea8     FF 2B 06 F5 | 	and	local07, #511
20eac     15 2D 02 F1 | 	add	local08, local07
20eb0     01 20 CE F7 | 	test	local02, #1 wz
20eb4     04 22 46 50 |  if_ne	shr	local03, #4
20eb8     11 27 02 56 |  if_ne	mov	local05, local03
20ebc     16 27 C2 AA |  if_e	rdbyte	local05, local08
20ec0     F0 26 06 A5 |  if_e	and	local05, #240
20ec4     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
20ec8     11 23 42 A8 |  if_e	getnib	local03, local03, #0
20ecc     11 27 42 A5 |  if_e	or	local05, local03
20ed0     16 27 42 FC | 	wrbyte	local05, local08
20ed4     31 1E 86 F1 | 	sub	local01, #49
20ed8     0F 03 48 FC | 	wrbyte	#1, local01
20edc                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
20edc                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
20edc                 | ' 			fs->wflag = 1;
20edc                 | ' 			break;
20edc     BC 00 90 FD | 	jmp	#LR__3416
20ee0                 | LR__3414
20ee0     0F 13 02 F6 | 	mov	arg01, local01
20ee4     10 2D 02 F6 | 	mov	local08, local02
20ee8     08 2C 46 F0 | 	shr	local08, #8
20eec     24 1E 06 F1 | 	add	local01, #36
20ef0     0F 15 02 FB | 	rdlong	arg02, local01
20ef4     24 1E 86 F1 | 	sub	local01, #36
20ef8     16 15 02 F1 | 	add	arg02, local08
20efc     40 FB BF FD | 	call	#_fatfs_cc_move_window
20f00     FD 24 0A F6 | 	mov	local04, result1 wz
20f04     94 00 90 5D |  if_ne	jmp	#LR__3416
20f08     34 1E 06 F1 | 	add	local01, #52
20f0c     0F 13 02 F6 | 	mov	arg01, local01
20f10     01 20 66 F0 | 	shl	local02, #1
20f14     FF 21 06 F5 | 	and	local02, #511
20f18     10 13 02 F1 | 	add	arg01, local02
20f1c     09 23 52 FC | 	wrword	local03, arg01
20f20     31 1E 86 F1 | 	sub	local01, #49
20f24     0F 03 48 FC | 	wrbyte	#1, local01
20f28                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
20f28                 | ' 			fs->wflag = 1;
20f28                 | ' 			break;
20f28     70 00 90 FD | 	jmp	#LR__3416
20f2c                 | LR__3415
20f2c     0F 13 02 F6 | 	mov	arg01, local01
20f30     10 2D 02 F6 | 	mov	local08, local02
20f34     07 2C 46 F0 | 	shr	local08, #7
20f38     24 1E 06 F1 | 	add	local01, #36
20f3c     0F 15 02 FB | 	rdlong	arg02, local01
20f40     24 1E 86 F1 | 	sub	local01, #36
20f44     16 15 02 F1 | 	add	arg02, local08
20f48     F4 FA BF FD | 	call	#_fatfs_cc_move_window
20f4c     FD 24 0A F6 | 	mov	local04, result1 wz
20f50     48 00 90 5D |  if_ne	jmp	#LR__3416
20f54     7C 22 06 F4 | 	bitl	local03, #124
20f58     34 1E 06 F1 | 	add	local01, #52
20f5c     10 2D 02 F6 | 	mov	local08, local02
20f60     02 2C 66 F0 | 	shl	local08, #2
20f64     FF 2D 06 F5 | 	and	local08, #511
20f68     0F 13 02 F6 | 	mov	arg01, local01
20f6c     16 13 02 F1 | 	add	arg01, local08
20f70                 | ' {
20f70                 | ' 
20f70                 | ' 	return *((DWORD*)ptr);
20f70     09 2D 02 FB | 	rdlong	local08, arg01
20f74     00 00 78 FF 
20f78     00 2C 06 F5 | 	and	local08, ##-268435456
20f7c     16 23 42 F5 | 	or	local03, local08
20f80     0F 13 02 F6 | 	mov	arg01, local01
20f84     02 20 66 F0 | 	shl	local02, #2
20f88     FF 21 06 F5 | 	and	local02, #511
20f8c     10 13 02 F1 | 	add	arg01, local02
20f90     09 23 62 FC | 	wrlong	local03, arg01
20f94     31 1E 86 F1 | 	sub	local01, #49
20f98     0F 03 48 FC | 	wrbyte	#1, local01
20f9c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
20f9c                 | ' 			}
20f9c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
20f9c                 | ' 			fs->wflag = 1;
20f9c                 | ' 			break;
20f9c                 | LR__3416
20f9c                 | LR__3417
20f9c                 | ' 		}
20f9c                 | ' 	}
20f9c                 | ' 	return res;
20f9c     12 FB 01 F6 | 	mov	result1, local04
20fa0     A7 F0 03 F6 | 	mov	ptra, fp
20fa4     B2 00 A0 FD | 	call	#popregs_
20fa8                 | _fatfs_cc_put_fat_ret
20fa8     2D 00 64 FD | 	ret
20fac                 | 
20fac                 | _fatfs_cc_remove_chain
20fac     05 4A 05 F6 | 	mov	COUNT_, #5
20fb0     A8 00 A0 FD | 	call	#pushregs_
20fb4     09 1F 02 F6 | 	mov	local01, arg01
20fb8     0A 21 02 F6 | 	mov	local02, arg02
20fbc     0B 23 02 F6 | 	mov	local03, arg03
20fc0     0F 25 02 FB | 	rdlong	local04, local01
20fc4     02 20 16 F2 | 	cmp	local02, #2 wc
20fc8     14 00 90 CD |  if_b	jmp	#LR__3420
20fcc     18 24 06 F1 | 	add	local04, #24
20fd0     12 FB 01 FB | 	rdlong	result1, local04
20fd4     18 24 86 F1 | 	sub	local04, #24
20fd8     FD 20 12 F2 | 	cmp	local02, result1 wc
20fdc     08 00 90 CD |  if_b	jmp	#LR__3421
20fe0                 | LR__3420
20fe0     02 FA 05 F6 | 	mov	result1, #2
20fe4     CC 00 90 FD | 	jmp	#LR__3426
20fe8                 | LR__3421
20fe8     00 22 0E F2 | 	cmp	local03, #0 wz
20fec     18 00 90 AD |  if_e	jmp	#LR__3422
20ff0     11 15 02 F6 | 	mov	arg02, local03
20ff4     12 13 02 F6 | 	mov	arg01, local04
20ff8     01 16 66 F6 | 	neg	arg03, #1
20ffc     9C FD BF FD | 	call	#_fatfs_cc_put_fat
21000     00 FA 0D F2 | 	cmp	result1, #0 wz
21004     AC 00 90 5D |  if_ne	jmp	#LR__3426
21008                 | LR__3422
21008                 | ' 	}
21008                 | ' 
21008                 | ' 
21008                 | ' 	do {
21008                 | LR__3423
21008     10 15 02 F6 | 	mov	arg02, local02
2100c     0F 13 02 F6 | 	mov	arg01, local01
21010     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
21014     FD 26 0A F6 | 	mov	local05, result1 wz
21018     94 00 90 AD |  if_e	jmp	#LR__3425
2101c     01 26 0E F2 | 	cmp	local05, #1 wz
21020     02 FA 05 A6 |  if_e	mov	result1, #2
21024     8C 00 90 AD |  if_e	jmp	#LR__3426
21028     FF FF 7F FF 
2102c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
21030     01 FA 05 A6 |  if_e	mov	result1, #1
21034     7C 00 90 AD |  if_e	jmp	#LR__3426
21038     10 15 02 F6 | 	mov	arg02, local02
2103c     12 13 02 F6 | 	mov	arg01, local04
21040     00 16 06 F6 | 	mov	arg03, #0
21044     54 FD BF FD | 	call	#_fatfs_cc_put_fat
21048     FD 22 0A F6 | 	mov	local03, result1 wz
2104c     11 FB 01 56 |  if_ne	mov	result1, local03
21050     60 00 90 5D |  if_ne	jmp	#LR__3426
21054     18 24 06 F1 | 	add	local04, #24
21058     12 23 02 FB | 	rdlong	local03, local04
2105c     02 22 86 F1 | 	sub	local03, #2
21060     04 24 86 F1 | 	sub	local04, #4
21064     12 21 02 FB | 	rdlong	local02, local04
21068     14 24 86 F1 | 	sub	local04, #20
2106c     11 21 12 F2 | 	cmp	local02, local03 wc
21070     24 00 90 3D |  if_ae	jmp	#LR__3424
21074     14 24 06 F1 | 	add	local04, #20
21078     12 23 02 FB | 	rdlong	local03, local04
2107c     01 22 06 F1 | 	add	local03, #1
21080     12 23 62 FC | 	wrlong	local03, local04
21084     10 24 86 F1 | 	sub	local04, #16
21088     12 23 C2 FA | 	rdbyte	local03, local04
2108c     01 22 46 F5 | 	or	local03, #1
21090     12 23 42 FC | 	wrbyte	local03, local04
21094     04 24 86 F1 | 	sub	local04, #4
21098                 | LR__3424
21098     13 21 02 F6 | 	mov	local02, local05
2109c     18 24 06 F1 | 	add	local04, #24
210a0     12 27 02 FB | 	rdlong	local05, local04
210a4     18 24 86 F1 | 	sub	local04, #24
210a8     13 21 12 F2 | 	cmp	local02, local05 wc
210ac     58 FF 9F CD |  if_b	jmp	#LR__3423
210b0                 | LR__3425
210b0                 | ' #line 1500 "ff.c"
210b0                 | ' 	return FR_OK;
210b0     00 FA 05 F6 | 	mov	result1, #0
210b4                 | LR__3426
210b4     A7 F0 03 F6 | 	mov	ptra, fp
210b8     B2 00 A0 FD | 	call	#popregs_
210bc                 | _fatfs_cc_remove_chain_ret
210bc     2D 00 64 FD | 	ret
210c0                 | 
210c0                 | _fatfs_cc_create_chain
210c0     09 4A 05 F6 | 	mov	COUNT_, #9
210c4     A8 00 A0 FD | 	call	#pushregs_
210c8     09 1F 02 F6 | 	mov	local01, arg01
210cc     0A 21 0A F6 | 	mov	local02, arg02 wz
210d0     0F 23 02 FB | 	rdlong	local03, local01
210d4     28 00 90 5D |  if_ne	jmp	#LR__3430
210d8     10 22 06 F1 | 	add	local03, #16
210dc     11 25 0A FB | 	rdlong	local04, local03 wz
210e0     10 22 86 F1 | 	sub	local03, #16
210e4     18 22 06 51 |  if_ne	add	local03, #24
210e8     11 27 02 5B |  if_ne	rdlong	local05, local03
210ec     18 22 86 51 |  if_ne	sub	local03, #24
210f0     13 25 12 52 |  if_ne	cmp	local04, local05 wc
210f4     50 00 90 4D |  if_c_and_nz	jmp	#LR__3431
210f8     01 24 06 F6 | 	mov	local04, #1
210fc     48 00 90 FD | 	jmp	#LR__3431
21100                 | LR__3430
21100     10 15 02 F6 | 	mov	arg02, local02
21104     0F 13 02 F6 | 	mov	arg01, local01
21108     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2110c     FD 24 02 F6 | 	mov	local04, result1
21110     02 24 16 F2 | 	cmp	local04, #2 wc
21114     01 FA 05 C6 |  if_b	mov	result1, #1
21118     BC 01 90 CD |  if_b	jmp	#LR__3441
2111c     FF FF 7F FF 
21120     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21124     12 FB 01 A6 |  if_e	mov	result1, local04
21128     AC 01 90 AD |  if_e	jmp	#LR__3441
2112c     18 22 06 F1 | 	add	local03, #24
21130     11 27 02 FB | 	rdlong	local05, local03
21134     18 22 86 F1 | 	sub	local03, #24
21138     13 25 12 F2 | 	cmp	local04, local05 wc
2113c     12 FB 01 C6 |  if_b	mov	result1, local04
21140     94 01 90 CD |  if_b	jmp	#LR__3441
21144     10 25 02 F6 | 	mov	local04, local02
21148                 | LR__3431
21148     14 22 06 F1 | 	add	local03, #20
2114c     11 27 0A FB | 	rdlong	local05, local03 wz
21150     14 22 86 F1 | 	sub	local03, #20
21154     00 FA 05 A6 |  if_e	mov	result1, #0
21158     7C 01 90 AD |  if_e	jmp	#LR__3441
2115c     00 28 06 F6 | 	mov	local06, #0
21160     10 25 0A F2 | 	cmp	local04, local02 wz
21164     74 00 90 5D |  if_ne	jmp	#LR__3434
21168     12 29 02 F6 | 	mov	local06, local04
2116c     01 28 06 F1 | 	add	local06, #1
21170     18 22 06 F1 | 	add	local03, #24
21174     11 27 02 FB | 	rdlong	local05, local03
21178     18 22 86 F1 | 	sub	local03, #24
2117c     13 29 12 F2 | 	cmp	local06, local05 wc
21180     02 28 06 36 |  if_ae	mov	local06, #2
21184     14 15 02 F6 | 	mov	arg02, local06
21188     0F 13 02 F6 | 	mov	arg01, local01
2118c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
21190     FD 26 02 F6 | 	mov	local05, result1
21194     01 26 0E F2 | 	cmp	local05, #1 wz
21198     FF FF 7F 5F 
2119c     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
211a0     13 FB 01 A6 |  if_e	mov	result1, local05
211a4     30 01 90 AD |  if_e	jmp	#LR__3441
211a8     00 26 0E F2 | 	cmp	local05, #0 wz
211ac     2C 00 90 AD |  if_e	jmp	#LR__3433
211b0     10 22 06 F1 | 	add	local03, #16
211b4     11 2B 02 FB | 	rdlong	local07, local03
211b8     10 22 86 F1 | 	sub	local03, #16
211bc     02 2A 16 F2 | 	cmp	local07, #2 wc
211c0     14 00 90 CD |  if_b	jmp	#LR__3432
211c4     18 22 06 F1 | 	add	local03, #24
211c8     11 27 02 FB | 	rdlong	local05, local03
211cc     18 22 86 F1 | 	sub	local03, #24
211d0     13 2B 12 F2 | 	cmp	local07, local05 wc
211d4     15 25 02 C6 |  if_b	mov	local04, local07
211d8                 | LR__3432
211d8     00 28 06 F6 | 	mov	local06, #0
211dc                 | LR__3433
211dc                 | LR__3434
211dc     00 28 0E F2 | 	cmp	local06, #0 wz
211e0     60 00 90 5D |  if_ne	jmp	#LR__3437
211e4     12 29 02 F6 | 	mov	local06, local04
211e8                 | ' 			ncl = scl;
211e8                 | ' 			for (;;) {
211e8                 | LR__3435
211e8     01 28 06 F1 | 	add	local06, #1
211ec     18 22 06 F1 | 	add	local03, #24
211f0     11 27 02 FB | 	rdlong	local05, local03
211f4     18 22 86 F1 | 	sub	local03, #24
211f8     13 29 12 F2 | 	cmp	local06, local05 wc
211fc     02 28 06 36 |  if_ae	mov	local06, #2
21200     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
21204     00 FA 05 16 |  if_a	mov	result1, #0
21208     CC 00 90 1D |  if_a	jmp	#LR__3441
2120c     14 15 02 F6 | 	mov	arg02, local06
21210     0F 13 02 F6 | 	mov	arg01, local01
21214     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
21218     FD 2A 0A F6 | 	mov	local07, result1 wz
2121c     24 00 90 AD |  if_e	jmp	#LR__3436
21220     01 2A 0E F2 | 	cmp	local07, #1 wz
21224     FF FF 7F 5F 
21228     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
2122c     15 FB 01 A6 |  if_e	mov	result1, local07
21230     A4 00 90 AD |  if_e	jmp	#LR__3441
21234     12 29 0A F2 | 	cmp	local06, local04 wz
21238     00 FA 05 A6 |  if_e	mov	result1, #0
2123c     98 00 90 AD |  if_e	jmp	#LR__3441
21240     A4 FF 9F FD | 	jmp	#LR__3435
21244                 | LR__3436
21244                 | LR__3437
21244     11 13 02 F6 | 	mov	arg01, local03
21248     14 15 02 F6 | 	mov	arg02, local06
2124c     01 16 66 F6 | 	neg	arg03, #1
21250     48 FB BF FD | 	call	#_fatfs_cc_put_fat
21254     FD 2C 0A F6 | 	mov	local08, result1 wz
21258     1C 00 90 5D |  if_ne	jmp	#LR__3438
2125c     00 20 0E F2 | 	cmp	local02, #0 wz
21260     14 00 90 AD |  if_e	jmp	#LR__3438
21264     11 13 02 F6 | 	mov	arg01, local03
21268     10 15 02 F6 | 	mov	arg02, local02
2126c     14 17 02 F6 | 	mov	arg03, local06
21270     28 FB BF FD | 	call	#_fatfs_cc_put_fat
21274     FD 2C 02 F6 | 	mov	local08, result1
21278                 | LR__3438
21278     00 2C 0E F2 | 	cmp	local08, #0 wz
2127c     4C 00 90 5D |  if_ne	jmp	#LR__3439
21280     10 22 06 F1 | 	add	local03, #16
21284     11 29 62 FC | 	wrlong	local06, local03
21288     08 22 06 F1 | 	add	local03, #8
2128c     11 27 02 FB | 	rdlong	local05, local03
21290     02 26 86 F1 | 	sub	local05, #2
21294     04 22 86 F1 | 	sub	local03, #4
21298     11 2F 02 FB | 	rdlong	local09, local03
2129c     14 22 86 F1 | 	sub	local03, #20
212a0     13 2F 1A F2 | 	cmp	local09, local05 wcz
212a4     14 22 06 E1 |  if_be	add	local03, #20
212a8     11 2F 02 EB |  if_be	rdlong	local09, local03
212ac     01 2E 86 E1 |  if_be	sub	local09, #1
212b0     11 2F 62 EC |  if_be	wrlong	local09, local03
212b4     14 22 86 E1 |  if_be	sub	local03, #20
212b8     04 22 06 F1 | 	add	local03, #4
212bc     11 27 C2 FA | 	rdbyte	local05, local03
212c0     01 26 46 F5 | 	or	local05, #1
212c4     11 27 42 FC | 	wrbyte	local05, local03
212c8     08 00 90 FD | 	jmp	#LR__3440
212cc                 | LR__3439
212cc     01 2C 0E F2 | 	cmp	local08, #1 wz
212d0     01 28 C6 F6 | 	negz	local06, #1
212d4                 | LR__3440
212d4                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
212d4                 | ' 	}
212d4                 | ' 
212d4                 | ' 	return ncl;
212d4     14 FB 01 F6 | 	mov	result1, local06
212d8                 | LR__3441
212d8     A7 F0 03 F6 | 	mov	ptra, fp
212dc     B2 00 A0 FD | 	call	#popregs_
212e0                 | _fatfs_cc_create_chain_ret
212e0     2D 00 64 FD | 	ret
212e4                 | 
212e4                 | _fatfs_cc_dir_clear
212e4     06 4A 05 F6 | 	mov	COUNT_, #6
212e8     A8 00 A0 FD | 	call	#pushregs_
212ec     09 1F 02 F6 | 	mov	local01, arg01
212f0     0A 21 02 F6 | 	mov	local02, arg02
212f4     0F 13 02 F6 | 	mov	arg01, local01
212f8     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
212fc     00 FA 0D F2 | 	cmp	result1, #0 wz
21300     01 FA 05 56 |  if_ne	mov	result1, #1
21304     90 00 90 5D |  if_ne	jmp	#LR__3452
21308     0F 13 02 F6 | 	mov	arg01, local01
2130c     10 15 02 F6 | 	mov	arg02, local02
21310     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
21314     FD 22 02 F6 | 	mov	local03, result1
21318     30 1E 06 F1 | 	add	local01, #48
2131c     0F 23 62 FC | 	wrlong	local03, local01
21320     04 1E 06 F1 | 	add	local01, #4
21324     0F 13 02 F6 | 	mov	arg01, local01
21328     00 14 06 F6 | 	mov	arg02, #0
2132c     09 16 C6 F9 | 	decod	arg03, #9
21330     98 00 A0 FD | 	call	#\builtin_bytefill_
21334     0F 25 02 F6 | 	mov	local04, local01
21338                 | ' #line 1667 "ff.c"
21338                 | ' 	{
21338                 | ' 		ibuf = fs->win; szb = 1;
21338                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
21338     00 26 06 F6 | 	mov	local05, #0
2133c     34 1E 86 F1 | 	sub	local01, #52
21340                 | LR__3450
21340     0A 1E 06 F1 | 	add	local01, #10
21344     0F 29 E2 FA | 	rdword	local06, local01
21348     0A 1E 86 F1 | 	sub	local01, #10
2134c     14 27 12 F2 | 	cmp	local05, local06 wc
21350     2C 00 90 3D |  if_ae	jmp	#LR__3451
21354     01 1E 06 F1 | 	add	local01, #1
21358     0F 13 C2 FA | 	rdbyte	arg01, local01
2135c     01 1E 86 F1 | 	sub	local01, #1
21360     12 15 02 F6 | 	mov	arg02, local04
21364     11 17 02 F6 | 	mov	arg03, local03
21368     13 17 02 F1 | 	add	arg03, local05
2136c     01 18 06 F6 | 	mov	arg04, #1
21370     9C EF BF FD | 	call	#_fatfs_cc_disk_write
21374     00 FA 0D F2 | 	cmp	result1, #0 wz
21378     01 26 06 A1 |  if_e	add	local05, #1
2137c     C0 FF 9F AD |  if_e	jmp	#LR__3450
21380                 | LR__3451
21380                 | ' 	}
21380                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
21380     0A 1E 06 F1 | 	add	local01, #10
21384     0F 25 E2 FA | 	rdword	local04, local01
21388     12 27 0A F2 | 	cmp	local05, local04 wz
2138c     00 28 06 A6 |  if_e	mov	local06, #0
21390     01 28 06 56 |  if_ne	mov	local06, #1
21394     14 FB 01 F6 | 	mov	result1, local06
21398                 | LR__3452
21398     A7 F0 03 F6 | 	mov	ptra, fp
2139c     B2 00 A0 FD | 	call	#popregs_
213a0                 | _fatfs_cc_dir_clear_ret
213a0     2D 00 64 FD | 	ret
213a4                 | 
213a4                 | _fatfs_cc_dir_sdi
213a4     06 4A 05 F6 | 	mov	COUNT_, #6
213a8     A8 00 A0 FD | 	call	#pushregs_
213ac     09 1F 02 F6 | 	mov	local01, arg01
213b0     0A 21 02 F6 | 	mov	local02, arg02
213b4     0F 23 02 FB | 	rdlong	local03, local01
213b8     00 10 00 FF 
213bc     00 20 16 F2 | 	cmp	local02, ##2097152 wc
213c0     1F 20 CE C7 |  if_b	test	local02, #31 wz
213c4                 | ' 		return FR_INT_ERR;
213c4     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
213c8     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3466
213cc     10 1E 06 F1 | 	add	local01, #16
213d0     0F 21 62 FC | 	wrlong	local02, local01
213d4     08 1E 86 F1 | 	sub	local01, #8
213d8     0F 25 0A FB | 	rdlong	local04, local01 wz
213dc     08 1E 86 F1 | 	sub	local01, #8
213e0     11 27 C2 AA |  if_e	rdbyte	local05, local03
213e4     03 26 16 A2 |  if_e	cmp	local05, #3 wc
213e8     28 22 06 21 |  if_nc_and_z	add	local03, #40
213ec     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
213f0     28 22 86 21 |  if_nc_and_z	sub	local03, #40
213f4     00 24 0E F2 | 	cmp	local04, #0 wz
213f8     3C 00 90 5D |  if_ne	jmp	#LR__3460
213fc     10 27 02 F6 | 	mov	local05, local02
21400     05 26 46 F0 | 	shr	local05, #5
21404     08 22 06 F1 | 	add	local03, #8
21408     11 15 E2 FA | 	rdword	arg02, local03
2140c     08 22 86 F1 | 	sub	local03, #8
21410     0A 27 12 F2 | 	cmp	local05, arg02 wc
21414     02 FA 05 36 |  if_ae	mov	result1, #2
21418     E4 00 90 3D |  if_ae	jmp	#LR__3466
2141c     28 22 06 F1 | 	add	local03, #40
21420     11 27 02 FB | 	rdlong	local05, local03
21424     28 22 86 F1 | 	sub	local03, #40
21428     18 1E 06 F1 | 	add	local01, #24
2142c     0F 27 62 FC | 	wrlong	local05, local01
21430     18 1E 86 F1 | 	sub	local01, #24
21434     7C 00 90 FD | 	jmp	#LR__3465
21438                 | LR__3460
21438     0A 22 06 F1 | 	add	local03, #10
2143c     11 29 E2 FA | 	rdword	local06, local03
21440     0A 22 86 F1 | 	sub	local03, #10
21444     09 28 66 F0 | 	shl	local06, #9
21448                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
21448                 | ' 		while (ofs >= csz) {
21448                 | LR__3461
21448     14 21 12 F2 | 	cmp	local02, local06 wc
2144c     4C 00 90 CD |  if_b	jmp	#LR__3464
21450     0F 13 02 F6 | 	mov	arg01, local01
21454     12 15 02 F6 | 	mov	arg02, local04
21458     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2145c     FD 24 02 F6 | 	mov	local04, result1
21460     FF FF 7F FF 
21464     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21468     01 FA 05 A6 |  if_e	mov	result1, #1
2146c     90 00 90 AD |  if_e	jmp	#LR__3466
21470     02 24 16 F2 | 	cmp	local04, #2 wc
21474     14 00 90 CD |  if_b	jmp	#LR__3462
21478     18 22 06 F1 | 	add	local03, #24
2147c     11 27 02 FB | 	rdlong	local05, local03
21480     18 22 86 F1 | 	sub	local03, #24
21484     13 25 12 F2 | 	cmp	local04, local05 wc
21488     08 00 90 CD |  if_b	jmp	#LR__3463
2148c                 | LR__3462
2148c     02 FA 05 F6 | 	mov	result1, #2
21490     6C 00 90 FD | 	jmp	#LR__3466
21494                 | LR__3463
21494     14 21 82 F1 | 	sub	local02, local06
21498     AC FF 9F FD | 	jmp	#LR__3461
2149c                 | LR__3464
2149c     11 13 02 F6 | 	mov	arg01, local03
214a0     12 15 02 F6 | 	mov	arg02, local04
214a4     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
214a8     18 1E 06 F1 | 	add	local01, #24
214ac     0F FB 61 FC | 	wrlong	result1, local01
214b0     18 1E 86 F1 | 	sub	local01, #24
214b4                 | LR__3465
214b4     14 1E 06 F1 | 	add	local01, #20
214b8     0F 25 62 FC | 	wrlong	local04, local01
214bc     04 1E 06 F1 | 	add	local01, #4
214c0     0F 27 0A FB | 	rdlong	local05, local01 wz
214c4     18 1E 86 F1 | 	sub	local01, #24
214c8     02 FA 05 A6 |  if_e	mov	result1, #2
214cc     30 00 90 AD |  if_e	jmp	#LR__3466
214d0     10 29 02 F6 | 	mov	local06, local02
214d4     09 28 46 F0 | 	shr	local06, #9
214d8     18 1E 06 F1 | 	add	local01, #24
214dc     0F 27 02 FB | 	rdlong	local05, local01
214e0     14 27 02 F1 | 	add	local05, local06
214e4     0F 27 62 FC | 	wrlong	local05, local01
214e8     34 22 06 F1 | 	add	local03, #52
214ec     FF 21 06 F5 | 	and	local02, #511
214f0     10 23 02 F1 | 	add	local03, local02
214f4     04 1E 06 F1 | 	add	local01, #4
214f8     0F 23 62 FC | 	wrlong	local03, local01
214fc                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
214fc                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
214fc                 | ' 
214fc                 | ' 	return FR_OK;
214fc     00 FA 05 F6 | 	mov	result1, #0
21500                 | LR__3466
21500     A7 F0 03 F6 | 	mov	ptra, fp
21504     B2 00 A0 FD | 	call	#popregs_
21508                 | _fatfs_cc_dir_sdi_ret
21508     2D 00 64 FD | 	ret
2150c                 | 
2150c                 | _fatfs_cc_dir_next
2150c     05 4A 05 F6 | 	mov	COUNT_, #5
21510     A8 00 A0 FD | 	call	#pushregs_
21514     09 1F 02 F6 | 	mov	local01, arg01
21518     0A 21 02 F6 | 	mov	local02, arg02
2151c     0F 23 02 FB | 	rdlong	local03, local01
21520     10 1E 06 F1 | 	add	local01, #16
21524     0F 25 02 FB | 	rdlong	local04, local01
21528     10 1E 86 F1 | 	sub	local01, #16
2152c     20 24 06 F1 | 	add	local04, #32
21530     00 10 00 FF 
21534     00 24 16 F2 | 	cmp	local04, ##2097152 wc
21538     18 1E 06 31 |  if_ae	add	local01, #24
2153c     0F 01 68 3C |  if_ae	wrlong	#0, local01
21540     18 1E 86 31 |  if_ae	sub	local01, #24
21544     18 1E 06 F1 | 	add	local01, #24
21548     0F 15 0A FB | 	rdlong	arg02, local01 wz
2154c     18 1E 86 F1 | 	sub	local01, #24
21550     04 FA 05 A6 |  if_e	mov	result1, #4
21554     64 01 90 AD |  if_e	jmp	#LR__3475
21558     FF 25 CE F7 | 	test	local04, #511 wz
2155c     3C 01 90 5D |  if_ne	jmp	#LR__3474
21560     18 1E 06 F1 | 	add	local01, #24
21564     0F 15 02 FB | 	rdlong	arg02, local01
21568     01 14 06 F1 | 	add	arg02, #1
2156c     0F 15 62 FC | 	wrlong	arg02, local01
21570     04 1E 86 F1 | 	sub	local01, #4
21574     0F 15 0A FB | 	rdlong	arg02, local01 wz
21578     14 1E 86 F1 | 	sub	local01, #20
2157c     2C 00 90 5D |  if_ne	jmp	#LR__3470
21580     12 15 02 F6 | 	mov	arg02, local04
21584     05 14 46 F0 | 	shr	arg02, #5
21588     08 22 06 F1 | 	add	local03, #8
2158c     11 21 E2 FA | 	rdword	local02, local03
21590     08 22 86 F1 | 	sub	local03, #8
21594     10 15 12 F2 | 	cmp	arg02, local02 wc
21598     18 1E 06 31 |  if_ae	add	local01, #24
2159c     0F 01 68 3C |  if_ae	wrlong	#0, local01
215a0                 | ' 				dp->sect = 0; return FR_NO_FILE;
215a0     04 FA 05 36 |  if_ae	mov	result1, #4
215a4     14 01 90 3D |  if_ae	jmp	#LR__3475
215a8     F0 00 90 FD | 	jmp	#LR__3473
215ac                 | LR__3470
215ac     12 13 02 F6 | 	mov	arg01, local04
215b0     09 12 46 F0 | 	shr	arg01, #9
215b4     0A 22 06 F1 | 	add	local03, #10
215b8     11 15 E2 FA | 	rdword	arg02, local03
215bc     0A 22 86 F1 | 	sub	local03, #10
215c0     01 14 86 F1 | 	sub	arg02, #1
215c4     0A 13 CA F7 | 	test	arg01, arg02 wz
215c8     D0 00 90 5D |  if_ne	jmp	#LR__3472
215cc     0F 13 02 F6 | 	mov	arg01, local01
215d0     14 1E 06 F1 | 	add	local01, #20
215d4     0F 15 02 FB | 	rdlong	arg02, local01
215d8     14 1E 86 F1 | 	sub	local01, #20
215dc     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
215e0     FD 26 02 F6 | 	mov	local05, result1
215e4     02 26 16 F2 | 	cmp	local05, #2 wc
215e8     02 FA 05 C6 |  if_b	mov	result1, #2
215ec     CC 00 90 CD |  if_b	jmp	#LR__3475
215f0     FF FF 7F FF 
215f4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
215f8     01 FA 05 A6 |  if_e	mov	result1, #1
215fc     BC 00 90 AD |  if_e	jmp	#LR__3475
21600     18 22 06 F1 | 	add	local03, #24
21604     11 15 02 FB | 	rdlong	arg02, local03
21608     18 22 86 F1 | 	sub	local03, #24
2160c     0A 27 12 F2 | 	cmp	local05, arg02 wc
21610     68 00 90 CD |  if_b	jmp	#LR__3471
21614     00 20 0E F2 | 	cmp	local02, #0 wz
21618     18 1E 06 A1 |  if_e	add	local01, #24
2161c     0F 01 68 AC |  if_e	wrlong	#0, local01
21620                 | ' 						dp->sect = 0; return FR_NO_FILE;
21620     04 FA 05 A6 |  if_e	mov	result1, #4
21624     94 00 90 AD |  if_e	jmp	#LR__3475
21628     0F 13 02 F6 | 	mov	arg01, local01
2162c     14 1E 06 F1 | 	add	local01, #20
21630     0F 15 02 FB | 	rdlong	arg02, local01
21634     14 1E 86 F1 | 	sub	local01, #20
21638     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2163c     FD 26 0A F6 | 	mov	local05, result1 wz
21640     07 FA 05 A6 |  if_e	mov	result1, #7
21644     74 00 90 AD |  if_e	jmp	#LR__3475
21648     01 26 0E F2 | 	cmp	local05, #1 wz
2164c     02 FA 05 A6 |  if_e	mov	result1, #2
21650     68 00 90 AD |  if_e	jmp	#LR__3475
21654     FF FF 7F FF 
21658     FF 27 0E F2 | 	cmp	local05, ##-1 wz
2165c     01 FA 05 A6 |  if_e	mov	result1, #1
21660     58 00 90 AD |  if_e	jmp	#LR__3475
21664     13 15 02 F6 | 	mov	arg02, local05
21668     11 13 02 F6 | 	mov	arg01, local03
2166c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
21670     00 FA 0D F2 | 	cmp	result1, #0 wz
21674     01 FA 05 56 |  if_ne	mov	result1, #1
21678     40 00 90 5D |  if_ne	jmp	#LR__3475
2167c                 | LR__3471
2167c     14 1E 06 F1 | 	add	local01, #20
21680     0F 27 62 FC | 	wrlong	local05, local01
21684     11 13 02 F6 | 	mov	arg01, local03
21688     13 15 02 F6 | 	mov	arg02, local05
2168c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
21690     04 1E 06 F1 | 	add	local01, #4
21694     0F FB 61 FC | 	wrlong	result1, local01
21698     18 1E 86 F1 | 	sub	local01, #24
2169c                 | LR__3472
2169c                 | LR__3473
2169c                 | LR__3474
2169c     10 1E 06 F1 | 	add	local01, #16
216a0     0F 25 62 FC | 	wrlong	local04, local01
216a4     34 22 06 F1 | 	add	local03, #52
216a8     FF 25 06 F5 | 	and	local04, #511
216ac     12 23 02 F1 | 	add	local03, local04
216b0     0C 1E 06 F1 | 	add	local01, #12
216b4     0F 23 62 FC | 	wrlong	local03, local01
216b8                 | ' #line 1771 "ff.c"
216b8                 | ' 				}
216b8                 | ' 				dp->clust = clst;
216b8                 | ' 				dp->sect = clst2sect(fs, clst);
216b8                 | ' 			}
216b8                 | ' 		}
216b8                 | ' 	}
216b8                 | ' 	dp->dptr = ofs;
216b8                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
216b8                 | ' 
216b8                 | ' 	return FR_OK;
216b8     00 FA 05 F6 | 	mov	result1, #0
216bc                 | LR__3475
216bc     A7 F0 03 F6 | 	mov	ptra, fp
216c0     B2 00 A0 FD | 	call	#popregs_
216c4                 | _fatfs_cc_dir_next_ret
216c4     2D 00 64 FD | 	ret
216c8                 | 
216c8                 | _fatfs_cc_dir_alloc
216c8     08 4A 05 F6 | 	mov	COUNT_, #8
216cc     A8 00 A0 FD | 	call	#pushregs_
216d0     09 1F 02 F6 | 	mov	local01, arg01
216d4     0A 21 02 F6 | 	mov	local02, arg02
216d8     0F 23 02 FB | 	rdlong	local03, local01
216dc     0F 13 02 F6 | 	mov	arg01, local01
216e0     00 14 06 F6 | 	mov	arg02, #0
216e4     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
216e8     FD 24 0A F6 | 	mov	local04, result1 wz
216ec     70 00 90 5D |  if_ne	jmp	#LR__3484
216f0     00 26 06 F6 | 	mov	local05, #0
216f4                 | ' 		n = 0;
216f4                 | ' 		do {
216f4                 | LR__3480
216f4     18 1E 06 F1 | 	add	local01, #24
216f8     0F 15 02 FB | 	rdlong	arg02, local01
216fc     18 1E 86 F1 | 	sub	local01, #24
21700     11 13 02 F6 | 	mov	arg01, local03
21704     38 F3 BF FD | 	call	#_fatfs_cc_move_window
21708     FD 24 0A F6 | 	mov	local04, result1 wz
2170c     50 00 90 5D |  if_ne	jmp	#LR__3483
21710     1C 1E 06 F1 | 	add	local01, #28
21714     0F 29 02 FB | 	rdlong	local06, local01
21718     1C 1E 86 F1 | 	sub	local01, #28
2171c     14 29 C2 FA | 	rdbyte	local06, local06
21720     E5 28 0E F2 | 	cmp	local06, #229 wz
21724     1C 1E 06 51 |  if_ne	add	local01, #28
21728     0F 2B 02 5B |  if_ne	rdlong	local07, local01
2172c     1C 1E 86 51 |  if_ne	sub	local01, #28
21730     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
21734     10 00 90 5D |  if_ne	jmp	#LR__3481
21738     01 26 06 F1 | 	add	local05, #1
2173c     10 27 0A F2 | 	cmp	local05, local02 wz
21740     1C 00 90 AD |  if_e	jmp	#LR__3483
21744     04 00 90 FD | 	jmp	#LR__3482
21748                 | LR__3481
21748     00 26 06 F6 | 	mov	local05, #0
2174c                 | LR__3482
2174c     0F 13 02 F6 | 	mov	arg01, local01
21750     01 14 06 F6 | 	mov	arg02, #1
21754     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
21758     FD 24 0A F6 | 	mov	local04, result1 wz
2175c     94 FF 9F AD |  if_e	jmp	#LR__3480
21760                 | LR__3483
21760                 | LR__3484
21760     04 24 0E F2 | 	cmp	local04, #4 wz
21764     07 24 06 A6 |  if_e	mov	local04, #7
21768                 | ' 	return res;
21768     12 FB 01 F6 | 	mov	result1, local04
2176c     A7 F0 03 F6 | 	mov	ptra, fp
21770     B2 00 A0 FD | 	call	#popregs_
21774                 | _fatfs_cc_dir_alloc_ret
21774     2D 00 64 FD | 	ret
21778                 | 
21778                 | _fatfs_cc_ld_clust
21778     09 01 02 F6 | 	mov	_var01, arg01
2177c     0A 13 02 F6 | 	mov	arg01, arg02
21780     1A 12 06 F1 | 	add	arg01, #26
21784                 | ' {
21784                 | ' 
21784                 | ' 	return *((WORD*)ptr);
21784     09 FB E1 FA | 	rdword	result1, arg01
21788     FD 12 32 F9 | 	getword	arg01, result1, #0
2178c     00 01 C2 FA | 	rdbyte	_var01, _var01
21790     03 00 0E F2 | 	cmp	_var01, #3 wz
21794     14 14 06 A1 |  if_e	add	arg02, #20
21798                 | ' {
21798                 | ' 
21798                 | ' 	return *((WORD*)ptr);
21798     0A FB E1 AA |  if_e	rdword	result1, arg02
2179c     10 FA 65 A0 |  if_e	shl	result1, #16
217a0     FD 12 42 A5 |  if_e	or	arg01, result1
217a4                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
217a4                 | ' 	}
217a4                 | ' 
217a4                 | ' 	return cl;
217a4     09 FB 01 F6 | 	mov	result1, arg01
217a8                 | _fatfs_cc_ld_clust_ret
217a8     2D 00 64 FD | 	ret
217ac                 | 
217ac                 | _fatfs_cc_st_clust
217ac     09 01 02 F6 | 	mov	_var01, arg01
217b0     0A 13 02 F6 | 	mov	arg01, arg02
217b4     1A 12 06 F1 | 	add	arg01, #26
217b8     09 17 52 FC | 	wrword	arg03, arg01
217bc     00 01 C2 FA | 	rdbyte	_var01, _var01
217c0     03 00 0E F2 | 	cmp	_var01, #3 wz
217c4     14 14 06 A1 |  if_e	add	arg02, #20
217c8     10 16 46 A0 |  if_e	shr	arg03, #16
217cc     0A 17 52 AC |  if_e	wrword	arg03, arg02
217d0                 | _fatfs_cc_st_clust_ret
217d0     2D 00 64 FD | 	ret
217d4                 | 
217d4                 | _fatfs_cc_cmp_lfn
217d4     07 4A 05 F6 | 	mov	COUNT_, #7
217d8     A8 00 A0 FD | 	call	#pushregs_
217dc     09 1F 02 F6 | 	mov	local01, arg01
217e0     0A 13 02 F6 | 	mov	arg01, arg02
217e4     1A 12 06 F1 | 	add	arg01, #26
217e8                 | ' {
217e8                 | ' 
217e8                 | ' 	return *((WORD*)ptr);
217e8     09 FB E9 FA | 	rdword	result1, arg01 wz
217ec     00 FA 05 56 |  if_ne	mov	result1, #0
217f0     E0 00 90 5D |  if_ne	jmp	#LR__3496
217f4     0A 21 C2 FA | 	rdbyte	local02, arg02
217f8     3F 20 06 F5 | 	and	local02, #63
217fc     01 20 86 F1 | 	sub	local02, #1
21800     0D 20 06 FD | 	qmul	local02, #13
21804                 | ' 
21804                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
21804                 | ' 
21804                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
21804     01 22 06 F6 | 	mov	local03, #1
21808     00 24 06 F6 | 	mov	local04, #0
2180c     18 26 62 FD | 	getqx	local05
21810                 | LR__3490
21810     0D 24 16 F2 | 	cmp	local04, #13 wc
21814     9C 00 90 3D |  if_ae	jmp	#LR__3495
21818     0A 13 02 F6 | 	mov	arg01, arg02
2181c     12 21 02 F6 | 	mov	local02, local04
21820     01 00 00 FF 
21824     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
21828     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2182c     10 21 C2 FA | 	rdbyte	local02, local02
21830     01 20 06 FA | 	mul	local02, #1
21834     10 13 02 F1 | 	add	arg01, local02
21838     01 00 00 FF 
2183c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
21840                 | ' {
21840                 | ' 
21840                 | ' 	return *((WORD*)ptr);
21840     09 FB E1 FA | 	rdword	result1, arg01
21844     FD 28 02 F6 | 	mov	local06, result1
21848     11 21 02 F6 | 	mov	local02, local03
2184c     0F 20 4E F7 | 	zerox	local02, #15 wz
21850     44 00 90 AD |  if_e	jmp	#LR__3493
21854     00 27 16 F2 | 	cmp	local05, #256 wc
21858     2C 00 90 3D |  if_ae	jmp	#LR__3491
2185c     14 13 32 F9 | 	getword	arg01, local06, #0
21860     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
21864     FD 20 02 F6 | 	mov	local02, result1
21868     13 23 02 F6 | 	mov	local03, local05
2186c     01 22 66 F0 | 	shl	local03, #1
21870     0F 23 02 F1 | 	add	local03, local01
21874     11 13 E2 FA | 	rdword	arg01, local03
21878     01 26 06 F1 | 	add	local05, #1
2187c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
21880     FD 20 0A F2 | 	cmp	local02, result1 wz
21884     08 00 90 AD |  if_e	jmp	#LR__3492
21888                 | LR__3491
21888                 | ' 				return 0;
21888     00 FA 05 F6 | 	mov	result1, #0
2188c     44 00 90 FD | 	jmp	#LR__3496
21890                 | LR__3492
21890     14 23 02 F6 | 	mov	local03, local06
21894     14 00 90 FD | 	jmp	#LR__3494
21898                 | LR__3493
21898     14 29 32 F9 | 	getword	local06, local06, #0
2189c     7F 00 00 FF 
218a0     FF 29 0E F2 | 	cmp	local06, ##65535 wz
218a4     00 FA 05 56 |  if_ne	mov	result1, #0
218a8     28 00 90 5D |  if_ne	jmp	#LR__3496
218ac                 | LR__3494
218ac     01 24 06 F1 | 	add	local04, #1
218b0     5C FF 9F FD | 	jmp	#LR__3490
218b4                 | LR__3495
218b4     0A 21 C2 FA | 	rdbyte	local02, arg02
218b8     40 20 CE F7 | 	test	local02, #64 wz
218bc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
218c0     01 26 66 50 |  if_ne	shl	local05, #1
218c4     0F 27 02 51 |  if_ne	add	local05, local01
218c8     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
218cc     00 FA 05 56 |  if_ne	mov	result1, #0
218d0                 | ' 
218d0                 | ' 	return 1;
218d0     01 FA 05 A6 |  if_e	mov	result1, #1
218d4                 | LR__3496
218d4     A7 F0 03 F6 | 	mov	ptra, fp
218d8     B2 00 A0 FD | 	call	#popregs_
218dc                 | _fatfs_cc_cmp_lfn_ret
218dc     2D 00 64 FD | 	ret
218e0                 | 
218e0                 | _fatfs_cc_pick_lfn
218e0     09 01 02 F6 | 	mov	_var01, arg01
218e4     0A 13 02 F6 | 	mov	arg01, arg02
218e8     1A 12 06 F1 | 	add	arg01, #26
218ec                 | ' {
218ec                 | ' 
218ec                 | ' 	return *((WORD*)ptr);
218ec     09 FB E9 FA | 	rdword	result1, arg01 wz
218f0     00 FA 05 56 |  if_ne	mov	result1, #0
218f4     D4 00 90 5D |  if_ne	jmp	#LR__3505
218f8     0A 03 C2 FA | 	rdbyte	_var02, arg02
218fc     40 02 26 F5 | 	andn	_var02, #64
21900     01 02 86 F1 | 	sub	_var02, #1
21904     0D 02 06 FD | 	qmul	_var02, #13
21908                 | ' 
21908                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
21908                 | ' 
21908                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
21908     01 04 06 F6 | 	mov	_var03, #1
2190c     00 06 06 F6 | 	mov	_var04, #0
21910     18 08 62 FD | 	getqx	_var05
21914                 | LR__3500
21914     0D 06 16 F2 | 	cmp	_var04, #13 wc
21918     80 00 90 3D |  if_ae	jmp	#LR__3503
2191c     0A 13 02 F6 | 	mov	arg01, arg02
21920     03 03 02 F6 | 	mov	_var02, _var04
21924     01 00 00 FF 
21928     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2192c     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
21930     01 03 C2 FA | 	rdbyte	_var02, _var02
21934     01 02 06 FA | 	mul	_var02, #1
21938     01 13 02 F1 | 	add	arg01, _var02
2193c     01 00 00 FF 
21940     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
21944                 | ' {
21944                 | ' 
21944                 | ' 	return *((WORD*)ptr);
21944     09 FB E1 FA | 	rdword	result1, arg01
21948     FD 0A 02 F6 | 	mov	_var06, result1
2194c     02 03 02 F6 | 	mov	_var02, _var03
21950     0F 02 4E F7 | 	zerox	_var02, #15 wz
21954     28 00 90 AD |  if_e	jmp	#LR__3501
21958     00 09 16 F2 | 	cmp	_var05, #256 wc
2195c     00 FA 05 36 |  if_ae	mov	result1, #0
21960     68 00 90 3D |  if_ae	jmp	#LR__3505
21964     04 03 02 F6 | 	mov	_var02, _var05
21968     01 02 66 F0 | 	shl	_var02, #1
2196c     00 03 02 F1 | 	add	_var02, _var01
21970     05 05 02 F6 | 	mov	_var03, _var06
21974     01 05 52 FC | 	wrword	_var03, _var02
21978     01 08 06 F1 | 	add	_var05, #1
2197c     14 00 90 FD | 	jmp	#LR__3502
21980                 | LR__3501
21980     05 0B 32 F9 | 	getword	_var06, _var06, #0
21984     7F 00 00 FF 
21988     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2198c     00 FA 05 56 |  if_ne	mov	result1, #0
21990     38 00 90 5D |  if_ne	jmp	#LR__3505
21994                 | LR__3502
21994     01 06 06 F1 | 	add	_var04, #1
21998     78 FF 9F FD | 	jmp	#LR__3500
2199c                 | LR__3503
2199c     0A 03 C2 FA | 	rdbyte	_var02, arg02
219a0     40 02 CE F7 | 	test	_var02, #64 wz
219a4     02 0D 02 56 |  if_ne	mov	_var07, _var03
219a8     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
219ac     18 00 90 AD |  if_e	jmp	#LR__3504
219b0     00 09 16 F2 | 	cmp	_var05, #256 wc
219b4     00 FA 05 36 |  if_ae	mov	result1, #0
219b8     10 00 90 3D |  if_ae	jmp	#LR__3505
219bc     01 08 66 F0 | 	shl	_var05, #1
219c0     00 09 02 F1 | 	add	_var05, _var01
219c4     04 01 58 FC | 	wrword	#0, _var05
219c8                 | LR__3504
219c8                 | ' 		lfnbuf[i] = 0;
219c8                 | ' 	}
219c8                 | ' 
219c8                 | ' 	return 1;
219c8     01 FA 05 F6 | 	mov	result1, #1
219cc                 | LR__3505
219cc                 | _fatfs_cc_pick_lfn_ret
219cc     2D 00 64 FD | 	ret
219d0                 | 
219d0                 | _fatfs_cc_put_lfn
219d0     0D 14 06 F1 | 	add	arg02, #13
219d4     0A 19 42 FC | 	wrbyte	arg04, arg02
219d8     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
219dc     01 18 86 F1 | 	sub	arg04, #1
219e0     0D 18 06 FD | 	qmul	arg04, #13
219e4     09 01 02 F6 | 	mov	_var01, arg01
219e8     02 14 86 F1 | 	sub	arg02, #2
219ec     0A 1F 48 FC | 	wrbyte	#15, arg02
219f0     01 14 06 F1 | 	add	arg02, #1
219f4     0A 01 48 FC | 	wrbyte	#0, arg02
219f8     0C 14 86 F1 | 	sub	arg02, #12
219fc     0A 13 02 F6 | 	mov	arg01, arg02
21a00     1A 12 06 F1 | 	add	arg01, #26
21a04     09 01 58 FC | 	wrword	#0, arg01
21a08     00 02 06 F6 | 	mov	_var02, #0
21a0c     00 04 06 F6 | 	mov	_var03, #0
21a10                 | ' 	BYTE* dir,
21a10                 | ' 	BYTE ord,
21a10                 | ' 	BYTE sum
21a10                 | ' )
21a10                 | ' {
21a10                 | ' 	UINT i, s;
21a10                 | ' 	WCHAR wc;
21a10                 | ' 
21a10                 | ' 
21a10                 | ' 	dir[ 13 ] = sum;
21a10                 | ' 	dir[ 11 ] =  0x0F ;
21a10                 | ' 	dir[ 12 ] = 0;
21a10                 | ' 	st_word(dir +  26 , 0);
21a10                 | ' 
21a10                 | ' 	i = (ord - 1) * 13;
21a10                 | ' 	s = wc = 0;
21a10                 | ' 	do {
21a10     01 00 00 FF 
21a14     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
21a18     18 06 62 FD | 	getqx	_var04
21a1c     97 2A 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
21a20                 | LR__3510
21a20     01 19 32 F9 | 	getword	arg04, _var02, #0
21a24     7F 00 00 FF 
21a28     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
21a2c     03 13 02 56 |  if_ne	mov	arg01, _var04
21a30     01 06 06 51 |  if_ne	add	_var04, #1
21a34     01 12 66 50 |  if_ne	shl	arg01, #1
21a38     00 13 02 51 |  if_ne	add	arg01, _var01
21a3c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
21a40     0A 13 02 F6 | 	mov	arg01, arg02
21a44     02 19 02 F6 | 	mov	arg04, _var03
21a48     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
21a4c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21a50     01 18 06 FA | 	mul	arg04, #1
21a54     0C 13 02 F1 | 	add	arg01, arg04
21a58     09 03 52 FC | 	wrword	_var02, arg01
21a5c     01 19 02 F6 | 	mov	arg04, _var02
21a60     0F 18 4E F7 | 	zerox	arg04, #15 wz
21a64     0F 02 CE A9 |  if_e	bmask	_var02, #15
21a68     01 04 06 F1 | 	add	_var03, #1
21a6c     0D 04 16 F2 | 	cmp	_var03, #13 wc
21a70     AC FF 9F CD |  if_b	jmp	#LR__3510
21a74                 | LR__3511
21a74     01 00 00 FF 
21a78     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
21a7c     01 03 32 F9 | 	getword	_var02, _var02, #0
21a80     7F 00 00 FF 
21a84     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
21a88     01 06 66 50 |  if_ne	shl	_var04, #1
21a8c     00 07 02 51 |  if_ne	add	_var04, _var01
21a90     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
21a94     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
21a98     40 16 46 A5 |  if_e	or	arg03, #64
21a9c     0A 17 42 FC | 	wrbyte	arg03, arg02
21aa0                 | _fatfs_cc_put_lfn_ret
21aa0     2D 00 64 FD | 	ret
21aa4                 | 
21aa4                 | _fatfs_cc_gen_numname
21aa4     08 4A 05 F6 | 	mov	COUNT_, #8
21aa8     A8 00 A0 FD | 	call	#pushregs_
21aac     2C F0 07 F1 | 	add	ptra, #44
21ab0     09 1F 02 F6 | 	mov	local01, arg01
21ab4     0A 21 02 F6 | 	mov	local02, arg02
21ab8     0B 23 02 F6 | 	mov	local03, arg03
21abc     0C 25 02 F6 | 	mov	local04, arg04
21ac0     0F 13 02 F6 | 	mov	arg01, local01
21ac4     10 15 02 F6 | 	mov	arg02, local02
21ac8     0B 16 06 F6 | 	mov	arg03, #11
21acc     88 78 BF FD | 	call	#__system____builtin_memmove
21ad0     06 24 16 F2 | 	cmp	local04, #6 wc
21ad4     48 00 90 CD |  if_b	jmp	#LR__3525
21ad8     12 27 02 F6 | 	mov	local05, local04
21adc     97 1E 48 FB | 	callpa	#(@LR__3523-@LR__3520)>>2,fcache_load_ptr_
21ae0                 | ' 		sreg = seq;
21ae0                 | ' 		while (*lfn) {
21ae0                 | LR__3520
21ae0     11 29 EA FA | 	rdword	local06, local03 wz
21ae4     34 00 90 AD |  if_e	jmp	#LR__3524
21ae8     11 2B E2 FA | 	rdword	local07, local03
21aec                 | ' 			wc = *lfn++;
21aec                 | ' 			for (i = 0; i < 16; i++) {
21aec     02 22 06 F1 | 	add	local03, #2
21af0     10 12 DC FC | 	rep	@LR__3522, #16
21af4                 | LR__3521
21af4     01 26 66 F0 | 	shl	local05, #1
21af8     15 29 32 F9 | 	getword	local06, local07, #0
21afc     01 28 06 F5 | 	and	local06, #1
21b00     14 27 02 F1 | 	add	local05, local06
21b04     15 2B 32 F9 | 	getword	local07, local07, #0
21b08     01 2A 46 F0 | 	shr	local07, #1
21b0c     10 26 2E F4 | 	testbn	local05, #16 wz
21b10     88 00 00 5F 
21b14     21 26 66 55 |  if_ne	xor	local05, ##69665
21b18                 | LR__3522
21b18     C4 FF 9F FD | 	jmp	#LR__3520
21b1c                 | LR__3523
21b1c                 | LR__3524
21b1c     13 25 02 F6 | 	mov	local04, local05
21b20                 | LR__3525
21b20     07 2A 06 F6 | 	mov	local07, #7
21b24                 | ' 			}
21b24                 | ' 		}
21b24                 | ' 		seq = (UINT)sreg;
21b24                 | ' 	}
21b24                 | ' 
21b24                 | ' 
21b24                 | ' 	i = 7;
21b24                 | ' 	do {
21b24     10 4E 05 F1 | 	add	fp, #16
21b28     97 1A 48 FB | 	callpa	#(@LR__3527-@LR__3526)>>2,fcache_load_ptr_
21b2c                 | LR__3526
21b2c     12 27 42 F8 | 	getnib	local05, local04, #0
21b30     30 26 06 F1 | 	add	local05, #48
21b34     04 24 46 F0 | 	shr	local04, #4
21b38     13 29 E2 F8 | 	getbyte	local06, local05, #0
21b3c     3A 28 16 F2 | 	cmp	local06, #58 wc
21b40     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
21b44     07 26 06 31 |  if_ae	add	local05, #7
21b48     15 29 02 F6 | 	mov	local06, local07
21b4c     01 2A 8E F1 | 	sub	local07, #1 wz
21b50     A7 28 02 F1 | 	add	local06, fp
21b54     14 27 42 FC | 	wrbyte	local05, local06
21b58     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
21b5c     CC FF 9F 5D |  if_ne	jmp	#LR__3526
21b60                 | LR__3527
21b60     15 29 02 F6 | 	mov	local06, local07
21b64     A7 28 02 F1 | 	add	local06, fp
21b68     14 FD 48 FC | 	wrbyte	#126, local06
21b6c                 | ' 	ns[i] = '~';
21b6c                 | ' 
21b6c                 | ' 
21b6c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
21b6c     00 26 06 F6 | 	mov	local05, #0
21b70     10 4E 85 F1 | 	sub	fp, #16
21b74     97 2A 48 FB | 	callpa	#(@LR__3530-@LR__3528)>>2,fcache_load_ptr_
21b78                 | LR__3528
21b78     15 27 12 F2 | 	cmp	local05, local07 wc
21b7c     4C 00 90 3D |  if_ae	jmp	#LR__3531
21b80     13 29 02 F6 | 	mov	local06, local05
21b84     0F 29 02 F1 | 	add	local06, local01
21b88     14 29 C2 FA | 	rdbyte	local06, local06
21b8c     20 28 0E F2 | 	cmp	local06, #32 wz
21b90     38 00 90 AD |  if_e	jmp	#LR__3531
21b94     13 13 02 F6 | 	mov	arg01, local05
21b98     0F 13 02 F1 | 	add	arg01, local01
21b9c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
21ba0     00 FA 05 56 |  if_ne	mov	result1, #0
21ba4                 | ' 
21ba4                 | ' 	return 0;
21ba4     00 FA 05 A6 |  if_e	mov	result1, #0
21ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
21bac     14 00 90 AD |  if_e	jmp	#LR__3529
21bb0     15 29 02 F6 | 	mov	local06, local07
21bb4     01 28 86 F1 | 	sub	local06, #1
21bb8     14 27 0A F2 | 	cmp	local05, local06 wz
21bbc     0C 00 90 AD |  if_e	jmp	#LR__3531
21bc0     01 26 06 F1 | 	add	local05, #1
21bc4                 | LR__3529
21bc4     01 26 06 F1 | 	add	local05, #1
21bc8     AC FF 9F FD | 	jmp	#LR__3528
21bcc                 | LR__3530
21bcc                 | LR__3531
21bcc     97 20 48 FB | 	callpa	#(@LR__3535-@LR__3532)>>2,fcache_load_ptr_
21bd0                 | ' 			j++;
21bd0                 | ' 		}
21bd0                 | ' 	}
21bd0                 | ' 	do {
21bd0                 | LR__3532
21bd0     13 29 02 F6 | 	mov	local06, local05
21bd4     0F 29 02 F1 | 	add	local06, local01
21bd8     08 2A 16 F2 | 	cmp	local07, #8 wc
21bdc     01 26 06 F1 | 	add	local05, #1
21be0     1C 00 90 3D |  if_ae	jmp	#LR__3533
21be4     15 25 02 F6 | 	mov	local04, local07
21be8     10 4E 05 F1 | 	add	fp, #16
21bec     A7 24 02 F1 | 	add	local04, fp
21bf0     12 2D C2 FA | 	rdbyte	local08, local04
21bf4     01 2A 06 F1 | 	add	local07, #1
21bf8     10 4E 85 F1 | 	sub	fp, #16
21bfc     04 00 90 FD | 	jmp	#LR__3534
21c00                 | LR__3533
21c00     20 2C 06 F6 | 	mov	local08, #32
21c04                 | LR__3534
21c04     14 2D 42 FC | 	wrbyte	local08, local06
21c08     08 26 16 F2 | 	cmp	local05, #8 wc
21c0c     C0 FF 9F CD |  if_b	jmp	#LR__3532
21c10                 | LR__3535
21c10     A7 F0 03 F6 | 	mov	ptra, fp
21c14     B2 00 A0 FD | 	call	#popregs_
21c18                 | _fatfs_cc_gen_numname_ret
21c18     2D 00 64 FD | 	ret
21c1c                 | 
21c1c                 | _fatfs_cc_sum_sfn
21c1c     00 00 06 F6 | 	mov	_var01, #0
21c20                 | ' )
21c20                 | ' {
21c20                 | ' 	BYTE sum = 0;
21c20                 | ' 	UINT n = 11;
21c20                 | ' 
21c20                 | ' 	do {
21c20     97 12 48 FB | 	callpa	#(@LR__3542-@LR__3540)>>2,fcache_load_ptr_
21c24                 | LR__3540
21c24     0B 10 DC FC | 	rep	@LR__3543, #11
21c28                 | LR__3541
21c28     00 FB E1 F8 | 	getbyte	result1, _var01, #0
21c2c     01 FA 45 F0 | 	shr	result1, #1
21c30     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
21c34     07 00 66 F0 | 	shl	_var01, #7
21c38     00 FB 01 F1 | 	add	result1, _var01
21c3c     09 01 C2 FA | 	rdbyte	_var01, arg01
21c40     FD 00 02 F1 | 	add	_var01, result1
21c44     01 12 06 F1 | 	add	arg01, #1
21c48                 | LR__3542
21c48                 | LR__3543
21c48                 | ' 	return sum;
21c48     00 FB 01 F6 | 	mov	result1, _var01
21c4c                 | _fatfs_cc_sum_sfn_ret
21c4c     2D 00 64 FD | 	ret
21c50                 | 
21c50                 | _fatfs_cc_dir_read
21c50     0C 4A 05 F6 | 	mov	COUNT_, #12
21c54     A8 00 A0 FD | 	call	#pushregs_
21c58     09 1F 02 F6 | 	mov	local01, arg01
21c5c     0A 21 02 F6 | 	mov	local02, arg02
21c60     04 22 06 F6 | 	mov	local03, #4
21c64     0F 25 02 FB | 	rdlong	local04, local01
21c68     FF 26 06 F6 | 	mov	local05, #255
21c6c     FF 28 06 F6 | 	mov	local06, #255
21c70                 | ' )
21c70                 | ' {
21c70                 | ' 	FRESULT res = FR_NO_FILE;
21c70                 | ' 	FATFS *fs = dp->obj.fs;
21c70                 | ' 	BYTE attr, b;
21c70                 | ' 
21c70                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
21c70                 | ' 
21c70                 | ' 
21c70                 | ' 	while (dp->sect) {
21c70                 | LR__3550
21c70     18 1E 06 F1 | 	add	local01, #24
21c74     0F FB 09 FB | 	rdlong	result1, local01 wz
21c78     18 1E 86 F1 | 	sub	local01, #24
21c7c     AC 01 90 AD |  if_e	jmp	#LR__3560
21c80     18 1E 06 F1 | 	add	local01, #24
21c84     0F 15 02 FB | 	rdlong	arg02, local01
21c88     18 1E 86 F1 | 	sub	local01, #24
21c8c     12 13 02 F6 | 	mov	arg01, local04
21c90     AC ED BF FD | 	call	#_fatfs_cc_move_window
21c94     FD 22 0A F6 | 	mov	local03, result1 wz
21c98     90 01 90 5D |  if_ne	jmp	#LR__3560
21c9c     1C 1E 06 F1 | 	add	local01, #28
21ca0     0F FB 01 FB | 	rdlong	result1, local01
21ca4     1C 1E 86 F1 | 	sub	local01, #28
21ca8     FD 2A C2 FA | 	rdbyte	local07, result1
21cac     15 FB 01 F6 | 	mov	result1, local07
21cb0     07 FA 4D F7 | 	zerox	result1, #7 wz
21cb4     04 22 06 A6 |  if_e	mov	local03, #4
21cb8                 | ' 			res = FR_NO_FILE; break;
21cb8     70 01 90 AD |  if_e	jmp	#LR__3560
21cbc     1C 1E 06 F1 | 	add	local01, #28
21cc0     0F 2D 02 FB | 	rdlong	local08, local01
21cc4     0B 2C 06 F1 | 	add	local08, #11
21cc8     16 2F C2 FA | 	rdbyte	local09, local08
21ccc     3F 2E 06 F5 | 	and	local09, #63
21cd0     16 1E 86 F1 | 	sub	local01, #22
21cd4     0F 2F 42 FC | 	wrbyte	local09, local01
21cd8     06 1E 86 F1 | 	sub	local01, #6
21cdc     15 FB E1 F8 | 	getbyte	result1, local07, #0
21ce0     E5 FA 0D F2 | 	cmp	result1, #229 wz
21ce4     15 2D 02 56 |  if_ne	mov	local08, local07
21ce8     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
21cec     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
21cf0     1C 00 90 AD |  if_e	jmp	#LR__3551
21cf4     00 30 06 F6 | 	mov	local10, #0
21cf8     17 2D E2 F8 | 	getbyte	local08, local09, #0
21cfc     20 2C 26 F5 | 	andn	local08, #32
21d00     08 2C 0E F2 | 	cmp	local08, #8 wz
21d04     01 30 06 A6 |  if_e	mov	local10, #1
21d08     10 31 0A F2 | 	cmp	local10, local02 wz
21d0c     08 00 90 AD |  if_e	jmp	#LR__3552
21d10                 | LR__3551
21d10     FF 26 06 F6 | 	mov	local05, #255
21d14     00 01 90 FD | 	jmp	#LR__3559
21d18                 | LR__3552
21d18     17 2F E2 F8 | 	getbyte	local09, local09, #0
21d1c     0F 2E 0E F2 | 	cmp	local09, #15 wz
21d20     B4 00 90 5D |  if_ne	jmp	#LR__3556
21d24     15 33 E2 F8 | 	getbyte	local11, local07, #0
21d28     40 32 CE F7 | 	test	local11, #64 wz
21d2c     30 00 90 AD |  if_e	jmp	#LR__3553
21d30     1C 1E 06 F1 | 	add	local01, #28
21d34     0F 33 02 FB | 	rdlong	local11, local01
21d38     0D 32 06 F1 | 	add	local11, #13
21d3c     19 29 C2 FA | 	rdbyte	local06, local11
21d40     15 2B E2 F8 | 	getbyte	local07, local07, #0
21d44     BF 2A 06 F5 | 	and	local07, #191
21d48     15 27 02 F6 | 	mov	local05, local07
21d4c     0C 1E 86 F1 | 	sub	local01, #12
21d50     0F 33 02 FB | 	rdlong	local11, local01
21d54     1C 1E 06 F1 | 	add	local01, #28
21d58     0F 33 62 FC | 	wrlong	local11, local01
21d5c     2C 1E 86 F1 | 	sub	local01, #44
21d60                 | LR__3553
21d60     15 2D E2 F8 | 	getbyte	local08, local07, #0
21d64     13 31 E2 F8 | 	getbyte	local10, local05, #0
21d68     18 2D 0A F2 | 	cmp	local08, local10 wz
21d6c     5C 00 90 5D |  if_ne	jmp	#LR__3554
21d70     14 31 E2 F8 | 	getbyte	local10, local06, #0
21d74     1C 1E 06 F1 | 	add	local01, #28
21d78     0F 2F 02 FB | 	rdlong	local09, local01
21d7c     1C 1E 86 F1 | 	sub	local01, #28
21d80     0D 2E 06 F1 | 	add	local09, #13
21d84     17 2D C2 FA | 	rdbyte	local08, local09
21d88     16 2F E2 F8 | 	getbyte	local09, local08, #0
21d8c     17 31 0A F2 | 	cmp	local10, local09 wz
21d90     38 00 90 5D |  if_ne	jmp	#LR__3554
21d94     0C 24 06 F1 | 	add	local04, #12
21d98     12 13 02 FB | 	rdlong	arg01, local04
21d9c     0C 24 86 F1 | 	sub	local04, #12
21da0     1C 1E 06 F1 | 	add	local01, #28
21da4     0F 35 02 FB | 	rdlong	local12, local01
21da8     1C 1E 86 F1 | 	sub	local01, #28
21dac     1A 15 02 F6 | 	mov	arg02, local12
21db0     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
21db4     00 FA 4D F2 | 	cmps	result1, #0 wz
21db8     13 35 02 56 |  if_ne	mov	local12, local05
21dbc     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
21dc0     01 34 86 51 |  if_ne	sub	local12, #1
21dc4     1A 33 02 56 |  if_ne	mov	local11, local12
21dc8     04 00 90 5D |  if_ne	jmp	#LR__3555
21dcc                 | LR__3554
21dcc     FF 32 06 F6 | 	mov	local11, #255
21dd0                 | LR__3555
21dd0     19 27 02 F6 | 	mov	local05, local11
21dd4     40 00 90 FD | 	jmp	#LR__3558
21dd8                 | LR__3556
21dd8     13 33 02 F6 | 	mov	local11, local05
21ddc     07 32 4E F7 | 	zerox	local11, #7 wz
21de0     20 00 90 5D |  if_ne	jmp	#LR__3557
21de4     14 29 E2 F8 | 	getbyte	local06, local06, #0
21de8     1C 1E 06 F1 | 	add	local01, #28
21dec     0F 13 02 FB | 	rdlong	arg01, local01
21df0     1C 1E 86 F1 | 	sub	local01, #28
21df4     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
21df8     FD FA E1 F8 | 	getbyte	result1, result1, #0
21dfc     FD 28 0A F2 | 	cmp	local06, result1 wz
21e00     28 00 90 AD |  if_e	jmp	#LR__3560
21e04                 | LR__3557
21e04     2C 1E 06 F1 | 	add	local01, #44
21e08     FF FF FF FF 
21e0c     0F FF 6B FC | 	wrlong	##-1, local01
21e10     2C 1E 86 F1 | 	sub	local01, #44
21e14                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
21e14                 | ' 					}
21e14                 | ' 					break;
21e14     14 00 90 FD | 	jmp	#LR__3560
21e18                 | LR__3558
21e18                 | LR__3559
21e18     0F 13 02 F6 | 	mov	arg01, local01
21e1c     00 14 06 F6 | 	mov	arg02, #0
21e20     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
21e24     FD 22 0A F6 | 	mov	local03, result1 wz
21e28     44 FE 9F AD |  if_e	jmp	#LR__3550
21e2c                 | LR__3560
21e2c     00 22 0E F2 | 	cmp	local03, #0 wz
21e30     18 1E 06 51 |  if_ne	add	local01, #24
21e34     0F 01 68 5C |  if_ne	wrlong	#0, local01
21e38                 | ' 	return res;
21e38     11 FB 01 F6 | 	mov	result1, local03
21e3c     A7 F0 03 F6 | 	mov	ptra, fp
21e40     B2 00 A0 FD | 	call	#popregs_
21e44                 | _fatfs_cc_dir_read_ret
21e44     2D 00 64 FD | 	ret
21e48                 | 
21e48                 | _fatfs_cc_dir_find
21e48     0B 4A 05 F6 | 	mov	COUNT_, #11
21e4c     A8 00 A0 FD | 	call	#pushregs_
21e50     09 1F 02 F6 | 	mov	local01, arg01
21e54     0F 21 02 FB | 	rdlong	local02, local01
21e58     0F 13 02 F6 | 	mov	arg01, local01
21e5c     00 14 06 F6 | 	mov	arg02, #0
21e60     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
21e64     00 FA 0D F2 | 	cmp	result1, #0 wz
21e68     18 02 90 5D |  if_ne	jmp	#LR__3582
21e6c     FF 22 06 F6 | 	mov	local03, #255
21e70     FF 24 06 F6 | 	mov	local04, #255
21e74     2C 1E 06 F1 | 	add	local01, #44
21e78     FF FF FF FF 
21e7c     0F FF 6B FC | 	wrlong	##-1, local01
21e80     2C 1E 86 F1 | 	sub	local01, #44
21e84                 | ' #line 2404 "ff.c"
21e84                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
21e84                 | ' 
21e84                 | ' 	do {
21e84                 | LR__3570
21e84     18 1E 06 F1 | 	add	local01, #24
21e88     0F 15 02 FB | 	rdlong	arg02, local01
21e8c     18 1E 86 F1 | 	sub	local01, #24
21e90     10 13 02 F6 | 	mov	arg01, local02
21e94     A8 EB BF FD | 	call	#_fatfs_cc_move_window
21e98     FD 26 0A F6 | 	mov	local05, result1 wz
21e9c     E0 01 90 5D |  if_ne	jmp	#LR__3581
21ea0     1C 1E 06 F1 | 	add	local01, #28
21ea4     0F 17 02 FB | 	rdlong	arg03, local01
21ea8     1C 1E 86 F1 | 	sub	local01, #28
21eac     0B 29 C2 FA | 	rdbyte	local06, arg03
21eb0     14 17 02 F6 | 	mov	arg03, local06
21eb4     07 16 4E F7 | 	zerox	arg03, #7 wz
21eb8     04 26 06 A6 |  if_e	mov	local05, #4
21ebc     C0 01 90 AD |  if_e	jmp	#LR__3581
21ec0     1C 1E 06 F1 | 	add	local01, #28
21ec4     0F 2B 02 FB | 	rdlong	local07, local01
21ec8     15 17 02 F6 | 	mov	arg03, local07
21ecc     0B 16 06 F1 | 	add	arg03, #11
21ed0     0B 2D C2 FA | 	rdbyte	local08, arg03
21ed4     3F 2C 06 F5 | 	and	local08, #63
21ed8     16 1E 86 F1 | 	sub	local01, #22
21edc     0F 2D 42 FC | 	wrbyte	local08, local01
21ee0     06 1E 86 F1 | 	sub	local01, #6
21ee4     14 17 E2 F8 | 	getbyte	arg03, local06, #0
21ee8     E5 16 0E F2 | 	cmp	arg03, #229 wz
21eec     18 00 90 AD |  if_e	jmp	#LR__3571
21ef0     16 17 E2 F8 | 	getbyte	arg03, local08, #0
21ef4     08 16 CE F7 | 	test	arg03, #8 wz
21ef8     16 2B 02 56 |  if_ne	mov	local07, local08
21efc     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
21f00     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
21f04     18 00 90 AD |  if_e	jmp	#LR__3572
21f08                 | LR__3571
21f08     FF 24 06 F6 | 	mov	local04, #255
21f0c     2C 1E 06 F1 | 	add	local01, #44
21f10     FF FF FF FF 
21f14     0F FF 6B FC | 	wrlong	##-1, local01
21f18     2C 1E 86 F1 | 	sub	local01, #44
21f1c     4C 01 90 FD | 	jmp	#LR__3580
21f20                 | LR__3572
21f20     16 2D E2 F8 | 	getbyte	local08, local08, #0
21f24     0F 2C 0E F2 | 	cmp	local08, #15 wz
21f28     C8 00 90 5D |  if_ne	jmp	#LR__3576
21f2c     2B 1E 06 F1 | 	add	local01, #43
21f30     0F 2D C2 FA | 	rdbyte	local08, local01
21f34     2B 1E 86 F1 | 	sub	local01, #43
21f38     40 2C CE F7 | 	test	local08, #64 wz
21f3c     2C 01 90 5D |  if_ne	jmp	#LR__3579
21f40     14 2F E2 F8 | 	getbyte	local09, local06, #0
21f44     40 2E CE F7 | 	test	local09, #64 wz
21f48     30 00 90 AD |  if_e	jmp	#LR__3573
21f4c     1C 1E 06 F1 | 	add	local01, #28
21f50     0F 2F 02 FB | 	rdlong	local09, local01
21f54     0D 2E 06 F1 | 	add	local09, #13
21f58     17 23 C2 FA | 	rdbyte	local03, local09
21f5c     14 29 E2 F8 | 	getbyte	local06, local06, #0
21f60     BF 28 06 F5 | 	and	local06, #191
21f64     14 25 02 F6 | 	mov	local04, local06
21f68     0C 1E 86 F1 | 	sub	local01, #12
21f6c     0F 2F 02 FB | 	rdlong	local09, local01
21f70     1C 1E 06 F1 | 	add	local01, #28
21f74     0F 2F 62 FC | 	wrlong	local09, local01
21f78     2C 1E 86 F1 | 	sub	local01, #44
21f7c                 | LR__3573
21f7c     14 31 E2 F8 | 	getbyte	local10, local06, #0
21f80     12 2B E2 F8 | 	getbyte	local07, local04, #0
21f84     15 31 0A F2 | 	cmp	local10, local07 wz
21f88     5C 00 90 5D |  if_ne	jmp	#LR__3574
21f8c     11 2D E2 F8 | 	getbyte	local08, local03, #0
21f90     1C 1E 06 F1 | 	add	local01, #28
21f94     0F 2B 02 FB | 	rdlong	local07, local01
21f98     1C 1E 86 F1 | 	sub	local01, #28
21f9c     0D 2A 06 F1 | 	add	local07, #13
21fa0     15 29 C2 FA | 	rdbyte	local06, local07
21fa4     14 2B E2 F8 | 	getbyte	local07, local06, #0
21fa8     15 2D 0A F2 | 	cmp	local08, local07 wz
21fac     38 00 90 5D |  if_ne	jmp	#LR__3574
21fb0     0C 20 06 F1 | 	add	local02, #12
21fb4     10 13 02 FB | 	rdlong	arg01, local02
21fb8     0C 20 86 F1 | 	sub	local02, #12
21fbc     1C 1E 06 F1 | 	add	local01, #28
21fc0     0F 33 02 FB | 	rdlong	local11, local01
21fc4     1C 1E 86 F1 | 	sub	local01, #28
21fc8     19 15 02 F6 | 	mov	arg02, local11
21fcc     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
21fd0     00 FA 4D F2 | 	cmps	result1, #0 wz
21fd4     12 33 02 56 |  if_ne	mov	local11, local04
21fd8     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
21fdc     01 32 86 51 |  if_ne	sub	local11, #1
21fe0     19 2F 02 56 |  if_ne	mov	local09, local11
21fe4     04 00 90 5D |  if_ne	jmp	#LR__3575
21fe8                 | LR__3574
21fe8     FF 2E 06 F6 | 	mov	local09, #255
21fec                 | LR__3575
21fec     17 25 02 F6 | 	mov	local04, local09
21ff0     78 00 90 FD | 	jmp	#LR__3579
21ff4                 | LR__3576
21ff4     12 2F 02 F6 | 	mov	local09, local04
21ff8     07 2E 4E F7 | 	zerox	local09, #7 wz
21ffc     20 00 90 5D |  if_ne	jmp	#LR__3577
22000     11 31 E2 F8 | 	getbyte	local10, local03, #0
22004     1C 1E 06 F1 | 	add	local01, #28
22008     0F 13 02 FB | 	rdlong	arg01, local01
2200c     1C 1E 86 F1 | 	sub	local01, #28
22010     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
22014     FD FA E1 F8 | 	getbyte	result1, result1, #0
22018     FD 30 0A F2 | 	cmp	local10, result1 wz
2201c     60 00 90 AD |  if_e	jmp	#LR__3581
22020                 | LR__3577
22020     2B 1E 06 F1 | 	add	local01, #43
22024     0F 2F C2 FA | 	rdbyte	local09, local01
22028     2B 1E 86 F1 | 	sub	local01, #43
2202c     01 2E CE F7 | 	test	local09, #1 wz
22030     24 00 90 5D |  if_ne	jmp	#LR__3578
22034     1C 1E 06 F1 | 	add	local01, #28
22038     0F 13 02 FB | 	rdlong	arg01, local01
2203c     04 1E 06 F1 | 	add	local01, #4
22040     0F 15 02 F6 | 	mov	arg02, local01
22044     20 1E 86 F1 | 	sub	local01, #32
22048     0B 16 06 F6 | 	mov	arg03, #11
2204c     88 DA BF FD | 	call	#_fatfs_cc_memcmp
22050     00 FA 0D F2 | 	cmp	result1, #0 wz
22054     28 00 90 AD |  if_e	jmp	#LR__3581
22058                 | LR__3578
22058     FF 24 06 F6 | 	mov	local04, #255
2205c     2C 1E 06 F1 | 	add	local01, #44
22060     FF FF FF FF 
22064     0F FF 6B FC | 	wrlong	##-1, local01
22068     2C 1E 86 F1 | 	sub	local01, #44
2206c                 | LR__3579
2206c                 | LR__3580
2206c     0F 13 02 F6 | 	mov	arg01, local01
22070     00 14 06 F6 | 	mov	arg02, #0
22074     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
22078     FD 26 0A F6 | 	mov	local05, result1 wz
2207c     04 FE 9F AD |  if_e	jmp	#LR__3570
22080                 | LR__3581
22080                 | ' 
22080                 | ' 	return res;
22080     13 FB 01 F6 | 	mov	result1, local05
22084                 | LR__3582
22084     A7 F0 03 F6 | 	mov	ptra, fp
22088     B2 00 A0 FD | 	call	#popregs_
2208c                 | _fatfs_cc_dir_find_ret
2208c     2D 00 64 FD | 	ret
22090                 | 
22090                 | _fatfs_cc_dir_register
22090     0A 4A 05 F6 | 	mov	COUNT_, #10
22094     A8 00 A0 FD | 	call	#pushregs_
22098     2C F0 07 F1 | 	add	ptra, #44
2209c     04 4E 05 F1 | 	add	fp, #4
220a0     A7 12 62 FC | 	wrlong	arg01, fp
220a4     09 1F 02 FB | 	rdlong	local01, arg01
220a8     08 4E 05 F1 | 	add	fp, #8
220ac     A7 1E 62 FC | 	wrlong	local01, fp
220b0     08 4E 85 F1 | 	sub	fp, #8
220b4     A7 20 02 FB | 	rdlong	local02, fp
220b8     04 4E 85 F1 | 	sub	fp, #4
220bc     2B 20 06 F1 | 	add	local02, #43
220c0     10 21 C2 FA | 	rdbyte	local02, local02
220c4     A0 20 CE F7 | 	test	local02, #160 wz
220c8     06 FA 05 56 |  if_ne	mov	result1, #6
220cc     F8 03 90 5D |  if_ne	jmp	#LR__3605
220d0                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
220d0     14 4E 05 F1 | 	add	fp, #20
220d4     A7 00 68 FC | 	wrlong	#0, fp
220d8     14 4E 85 F1 | 	sub	fp, #20
220dc     97 28 48 FB | 	callpa	#(@LR__3591-@LR__3590)>>2,fcache_load_ptr_
220e0                 | LR__3590
220e0     0C 4E 05 F1 | 	add	fp, #12
220e4     A7 20 02 FB | 	rdlong	local02, fp
220e8     0C 20 06 F1 | 	add	local02, #12
220ec     10 23 02 FB | 	rdlong	local03, local02
220f0     08 4E 05 F1 | 	add	fp, #8
220f4     A7 24 02 FB | 	rdlong	local04, fp
220f8     14 4E 85 F1 | 	sub	fp, #20
220fc     01 24 66 F0 | 	shl	local04, #1
22100     11 25 02 F1 | 	add	local04, local03
22104     12 21 EA FA | 	rdword	local02, local04 wz
22108     24 00 90 AD |  if_e	jmp	#LR__3592
2210c     14 4E 05 F1 | 	add	fp, #20
22110     A7 26 02 FB | 	rdlong	local05, fp
22114     13 29 02 F6 | 	mov	local06, local05
22118     13 2B 02 F6 | 	mov	local07, local05
2211c     15 2D 02 F6 | 	mov	local08, local07
22120     01 2C 06 F1 | 	add	local08, #1
22124     A7 2C 62 FC | 	wrlong	local08, fp
22128     14 4E 85 F1 | 	sub	fp, #20
2212c     B0 FF 9F FD | 	jmp	#LR__3590
22130                 | LR__3591
22130                 | LR__3592
22130     1C 4E 05 F1 | 	add	fp, #28
22134     A7 12 02 F6 | 	mov	arg01, fp
22138     18 4E 85 F1 | 	sub	fp, #24
2213c     A7 14 02 FB | 	rdlong	arg02, fp
22140     04 4E 85 F1 | 	sub	fp, #4
22144     20 14 06 F1 | 	add	arg02, #32
22148     0C 16 06 F6 | 	mov	arg03, #12
2214c     08 72 BF FD | 	call	#__system____builtin_memmove
22150     27 4E 05 F1 | 	add	fp, #39
22154     A7 2E C2 FA | 	rdbyte	local09, fp
22158     27 4E 85 F1 | 	sub	fp, #39
2215c     01 2E CE F7 | 	test	local09, #1 wz
22160     F4 00 90 AD |  if_e	jmp	#LR__3595
22164     04 4E 05 F1 | 	add	fp, #4
22168     A7 30 02 FB | 	rdlong	local10, fp
2216c     2B 30 06 F1 | 	add	local10, #43
22170     18 81 48 FC | 	wrbyte	#64, local10
22174                 | ' 		dp->fn[ 11 ] =  0x40 ;
22174                 | ' 		for (n = 1; n < 100; n++) {
22174     0C 4E 05 F1 | 	add	fp, #12
22178     A7 02 68 FC | 	wrlong	#1, fp
2217c     10 4E 85 F1 | 	sub	fp, #16
22180                 | LR__3593
22180     10 4E 05 F1 | 	add	fp, #16
22184     A7 20 02 FB | 	rdlong	local02, fp
22188     10 4E 85 F1 | 	sub	fp, #16
2218c     64 20 16 F2 | 	cmp	local02, #100 wc
22190     70 00 90 3D |  if_ae	jmp	#LR__3594
22194     04 4E 05 F1 | 	add	fp, #4
22198     A7 12 02 FB | 	rdlong	arg01, fp
2219c     20 12 06 F1 | 	add	arg01, #32
221a0     18 4E 05 F1 | 	add	fp, #24
221a4     A7 14 02 F6 | 	mov	arg02, fp
221a8     10 4E 85 F1 | 	sub	fp, #16
221ac     A7 30 02 FB | 	rdlong	local10, fp
221b0     0C 30 06 F1 | 	add	local10, #12
221b4     18 17 02 FB | 	rdlong	arg03, local10
221b8     04 4E 05 F1 | 	add	fp, #4
221bc     A7 18 02 FB | 	rdlong	arg04, fp
221c0     10 4E 85 F1 | 	sub	fp, #16
221c4     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
221c8     04 4E 05 F1 | 	add	fp, #4
221cc     A7 12 02 FB | 	rdlong	arg01, fp
221d0     04 4E 85 F1 | 	sub	fp, #4
221d4     70 FC BF FD | 	call	#_fatfs_cc_dir_find
221d8     08 4E 05 F1 | 	add	fp, #8
221dc     A7 FA 61 FC | 	wrlong	result1, fp
221e0     00 FA 4D F2 | 	cmps	result1, #0 wz
221e4     08 4E 85 F1 | 	sub	fp, #8
221e8     18 00 90 5D |  if_ne	jmp	#LR__3594
221ec     10 4E 05 F1 | 	add	fp, #16
221f0     A7 30 02 FB | 	rdlong	local10, fp
221f4     01 30 06 F1 | 	add	local10, #1
221f8     A7 30 62 FC | 	wrlong	local10, fp
221fc     10 4E 85 F1 | 	sub	fp, #16
22200     7C FF 9F FD | 	jmp	#LR__3593
22204                 | LR__3594
22204     10 4E 05 F1 | 	add	fp, #16
22208     A7 30 02 FB | 	rdlong	local10, fp
2220c     10 4E 85 F1 | 	sub	fp, #16
22210     64 30 0E F2 | 	cmp	local10, #100 wz
22214     07 FA 05 A6 |  if_e	mov	result1, #7
22218     AC 02 90 AD |  if_e	jmp	#LR__3605
2221c     08 4E 05 F1 | 	add	fp, #8
22220     A7 30 02 FB | 	rdlong	local10, fp
22224     08 4E 85 F1 | 	sub	fp, #8
22228     04 30 0E F2 | 	cmp	local10, #4 wz
2222c     08 4E 05 51 |  if_ne	add	fp, #8
22230     A7 FA 01 5B |  if_ne	rdlong	result1, fp
22234     08 4E 85 51 |  if_ne	sub	fp, #8
22238     8C 02 90 5D |  if_ne	jmp	#LR__3605
2223c     04 4E 05 F1 | 	add	fp, #4
22240     A7 30 02 FB | 	rdlong	local10, fp
22244     23 4E 05 F1 | 	add	fp, #35
22248     A7 1E C2 FA | 	rdbyte	local01, fp
2224c     27 4E 85 F1 | 	sub	fp, #39
22250     2B 30 06 F1 | 	add	local10, #43
22254     18 1F 42 FC | 	wrbyte	local01, local10
22258                 | LR__3595
22258     27 4E 05 F1 | 	add	fp, #39
2225c     A7 20 C2 FA | 	rdbyte	local02, fp
22260     27 4E 85 F1 | 	sub	fp, #39
22264     02 20 CE F7 | 	test	local02, #2 wz
22268     20 00 90 AD |  if_e	jmp	#LR__3596
2226c     14 4E 05 F1 | 	add	fp, #20
22270     A7 30 02 FB | 	rdlong	local10, fp
22274     0C 30 06 F1 | 	add	local10, #12
22278     0D 30 16 FD | 	qdiv	local10, #13
2227c     14 4E 85 F1 | 	sub	fp, #20
22280     18 30 62 FD | 	getqx	local10
22284     01 30 06 F1 | 	add	local10, #1
22288     04 00 90 FD | 	jmp	#LR__3597
2228c                 | LR__3596
2228c     01 30 06 F6 | 	mov	local10, #1
22290                 | LR__3597
22290     18 4E 05 F1 | 	add	fp, #24
22294     A7 30 62 FC | 	wrlong	local10, fp
22298     14 4E 85 F1 | 	sub	fp, #20
2229c     A7 12 02 FB | 	rdlong	arg01, fp
222a0     18 15 02 F6 | 	mov	arg02, local10
222a4     04 4E 85 F1 | 	sub	fp, #4
222a8     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
222ac     08 4E 05 F1 | 	add	fp, #8
222b0     A7 FA 61 FC | 	wrlong	result1, fp
222b4     08 4E 85 F1 | 	sub	fp, #8
222b8     00 FA 0D F2 | 	cmp	result1, #0 wz
222bc     38 01 90 5D |  if_ne	jmp	#LR__3602
222c0     18 4E 05 F1 | 	add	fp, #24
222c4     A7 30 02 FB | 	rdlong	local10, fp
222c8     01 30 8E F1 | 	sub	local10, #1 wz
222cc     A7 30 62 FC | 	wrlong	local10, fp
222d0     18 4E 85 F1 | 	sub	fp, #24
222d4     20 01 90 AD |  if_e	jmp	#LR__3602
222d8     04 4E 05 F1 | 	add	fp, #4
222dc     A7 30 02 FB | 	rdlong	local10, fp
222e0     18 13 02 F6 | 	mov	arg01, local10
222e4     14 4E 05 F1 | 	add	fp, #20
222e8     A7 18 02 FB | 	rdlong	arg04, fp
222ec     18 4E 85 F1 | 	sub	fp, #24
222f0     05 18 66 F0 | 	shl	arg04, #5
222f4     10 30 06 F1 | 	add	local10, #16
222f8     18 15 02 FB | 	rdlong	arg02, local10
222fc     0C 15 82 F1 | 	sub	arg02, arg04
22300     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
22304     08 4E 05 F1 | 	add	fp, #8
22308     A7 FA 61 FC | 	wrlong	result1, fp
2230c     08 4E 85 F1 | 	sub	fp, #8
22310     00 FA 0D F2 | 	cmp	result1, #0 wz
22314     E0 00 90 5D |  if_ne	jmp	#LR__3601
22318     04 4E 05 F1 | 	add	fp, #4
2231c     A7 12 02 FB | 	rdlong	arg01, fp
22320     04 4E 85 F1 | 	sub	fp, #4
22324     20 12 06 F1 | 	add	arg01, #32
22328     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2232c     FD 30 02 F6 | 	mov	local10, result1
22330     28 4E 05 F1 | 	add	fp, #40
22334     A7 30 42 FC | 	wrbyte	local10, fp
22338     28 4E 85 F1 | 	sub	fp, #40
2233c                 | ' 			sum = sum_sfn(dp->fn);
2233c                 | ' 			do {
2233c                 | LR__3598
2233c     0C 4E 05 F1 | 	add	fp, #12
22340     A7 12 02 FB | 	rdlong	arg01, fp
22344     08 4E 85 F1 | 	sub	fp, #8
22348     A7 1E 02 FB | 	rdlong	local01, fp
2234c     04 4E 85 F1 | 	sub	fp, #4
22350     18 1E 06 F1 | 	add	local01, #24
22354     0F 15 02 FB | 	rdlong	arg02, local01
22358     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2235c     08 4E 05 F1 | 	add	fp, #8
22360     A7 FA 61 FC | 	wrlong	result1, fp
22364     00 FA 4D F2 | 	cmps	result1, #0 wz
22368     08 4E 85 F1 | 	sub	fp, #8
2236c     88 00 90 5D |  if_ne	jmp	#LR__3600
22370     0C 4E 05 F1 | 	add	fp, #12
22374     A7 20 02 FB | 	rdlong	local02, fp
22378     0C 20 06 F1 | 	add	local02, #12
2237c     10 13 02 FB | 	rdlong	arg01, local02
22380     08 4E 85 F1 | 	sub	fp, #8
22384     A7 1E 02 FB | 	rdlong	local01, fp
22388     1C 1E 06 F1 | 	add	local01, #28
2238c     0F 15 02 FB | 	rdlong	arg02, local01
22390     14 4E 05 F1 | 	add	fp, #20
22394     A7 16 02 FB | 	rdlong	arg03, fp
22398     10 4E 05 F1 | 	add	fp, #16
2239c     A7 18 C2 FA | 	rdbyte	arg04, fp
223a0     28 4E 85 F1 | 	sub	fp, #40
223a4     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
223a8     0C 4E 05 F1 | 	add	fp, #12
223ac     A7 30 02 FB | 	rdlong	local10, fp
223b0     03 30 06 F1 | 	add	local10, #3
223b4     18 03 48 FC | 	wrbyte	#1, local10
223b8     08 4E 85 F1 | 	sub	fp, #8
223bc     A7 12 02 FB | 	rdlong	arg01, fp
223c0     04 4E 85 F1 | 	sub	fp, #4
223c4     00 14 06 F6 | 	mov	arg02, #0
223c8     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
223cc     08 4E 05 F1 | 	add	fp, #8
223d0     A7 FA 61 FC | 	wrlong	result1, fp
223d4     00 FA 4D F2 | 	cmps	result1, #0 wz
223d8     08 4E 85 F1 | 	sub	fp, #8
223dc     18 00 90 5D |  if_ne	jmp	#LR__3599
223e0     18 4E 05 F1 | 	add	fp, #24
223e4     A7 30 02 FB | 	rdlong	local10, fp
223e8     01 30 8E F1 | 	sub	local10, #1 wz
223ec     A7 30 62 FC | 	wrlong	local10, fp
223f0     18 4E 85 F1 | 	sub	fp, #24
223f4     44 FF 9F 5D |  if_ne	jmp	#LR__3598
223f8                 | LR__3599
223f8                 | LR__3600
223f8                 | LR__3601
223f8                 | LR__3602
223f8     08 4E 05 F1 | 	add	fp, #8
223fc     A7 30 0A FB | 	rdlong	local10, fp wz
22400     08 4E 85 F1 | 	sub	fp, #8
22404     B4 00 90 5D |  if_ne	jmp	#LR__3604
22408     0C 4E 05 F1 | 	add	fp, #12
2240c     A7 12 02 FB | 	rdlong	arg01, fp
22410     08 4E 85 F1 | 	sub	fp, #8
22414     A7 1E 02 FB | 	rdlong	local01, fp
22418     04 4E 85 F1 | 	sub	fp, #4
2241c     18 1E 06 F1 | 	add	local01, #24
22420     0F 15 02 FB | 	rdlong	arg02, local01
22424     18 E6 BF FD | 	call	#_fatfs_cc_move_window
22428     08 4E 05 F1 | 	add	fp, #8
2242c     A7 FA 61 FC | 	wrlong	result1, fp
22430     08 4E 85 F1 | 	sub	fp, #8
22434     00 FA 0D F2 | 	cmp	result1, #0 wz
22438     80 00 90 5D |  if_ne	jmp	#LR__3603
2243c     04 4E 05 F1 | 	add	fp, #4
22440     A7 20 02 FB | 	rdlong	local02, fp
22444     04 4E 85 F1 | 	sub	fp, #4
22448     1C 20 06 F1 | 	add	local02, #28
2244c     10 13 02 FB | 	rdlong	arg01, local02
22450     00 14 06 F6 | 	mov	arg02, #0
22454     20 16 06 F6 | 	mov	arg03, #32
22458     98 00 A0 FD | 	call	#\builtin_bytefill_
2245c     04 4E 05 F1 | 	add	fp, #4
22460     A7 14 02 FB | 	rdlong	arg02, fp
22464     0A 1F 02 F6 | 	mov	local01, arg02
22468     1C 1E 06 F1 | 	add	local01, #28
2246c     0F 13 02 FB | 	rdlong	arg01, local01
22470     04 4E 85 F1 | 	sub	fp, #4
22474     20 14 06 F1 | 	add	arg02, #32
22478     0B 16 06 F6 | 	mov	arg03, #11
2247c     D8 6E BF FD | 	call	#__system____builtin_memmove
22480     04 4E 05 F1 | 	add	fp, #4
22484     A7 2E 02 FB | 	rdlong	local09, fp
22488     17 31 02 F6 | 	mov	local10, local09
2248c     1C 30 06 F1 | 	add	local10, #28
22490     18 1F 02 FB | 	rdlong	local01, local10
22494     2B 2E 06 F1 | 	add	local09, #43
22498     17 31 C2 FA | 	rdbyte	local10, local09
2249c     18 30 06 F5 | 	and	local10, #24
224a0     0C 1E 06 F1 | 	add	local01, #12
224a4     0F 31 42 FC | 	wrbyte	local10, local01
224a8     08 4E 05 F1 | 	add	fp, #8
224ac     A7 30 02 FB | 	rdlong	local10, fp
224b0     0C 4E 85 F1 | 	sub	fp, #12
224b4     03 30 06 F1 | 	add	local10, #3
224b8     18 03 48 FC | 	wrbyte	#1, local10
224bc                 | LR__3603
224bc                 | LR__3604
224bc                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
224bc                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
224bc                 | ' 
224bc                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
224bc                 | ' 
224bc                 | ' 			fs->wflag = 1;
224bc                 | ' 		}
224bc                 | ' 	}
224bc                 | ' 
224bc                 | ' 	return res;
224bc     08 4E 05 F1 | 	add	fp, #8
224c0     A7 FA 01 FB | 	rdlong	result1, fp
224c4     08 4E 85 F1 | 	sub	fp, #8
224c8                 | LR__3605
224c8     A7 F0 03 F6 | 	mov	ptra, fp
224cc     B2 00 A0 FD | 	call	#popregs_
224d0                 | _fatfs_cc_dir_register_ret
224d0     2D 00 64 FD | 	ret
224d4                 | 
224d4                 | _fatfs_cc_dir_remove
224d4     05 4A 05 F6 | 	mov	COUNT_, #5
224d8     A8 00 A0 FD | 	call	#pushregs_
224dc     09 1F 02 F6 | 	mov	local01, arg01
224e0     0F 21 02 FB | 	rdlong	local02, local01
224e4     10 1E 06 F1 | 	add	local01, #16
224e8     0F 23 02 FB | 	rdlong	local03, local01
224ec     1C 1E 06 F1 | 	add	local01, #28
224f0     0F 15 02 FB | 	rdlong	arg02, local01
224f4     2C 1E 86 F1 | 	sub	local01, #44
224f8     FF FF 7F FF 
224fc     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
22500     00 24 06 A6 |  if_e	mov	local04, #0
22504     18 00 90 AD |  if_e	jmp	#LR__3610
22508     0F 13 02 F6 | 	mov	arg01, local01
2250c     2C 1E 06 F1 | 	add	local01, #44
22510     0F 15 02 FB | 	rdlong	arg02, local01
22514     2C 1E 86 F1 | 	sub	local01, #44
22518     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2251c     FD 24 02 F6 | 	mov	local04, result1
22520                 | LR__3610
22520     12 27 0A F6 | 	mov	local05, local04 wz
22524     64 00 90 5D |  if_ne	jmp	#LR__3613
22528                 | ' 		do {
22528                 | LR__3611
22528     18 1E 06 F1 | 	add	local01, #24
2252c     0F 15 02 FB | 	rdlong	arg02, local01
22530     18 1E 86 F1 | 	sub	local01, #24
22534     10 13 02 F6 | 	mov	arg01, local02
22538     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2253c     FD 26 0A F6 | 	mov	local05, result1 wz
22540     40 00 90 5D |  if_ne	jmp	#LR__3612
22544     1C 1E 06 F1 | 	add	local01, #28
22548     0F 25 02 FB | 	rdlong	local04, local01
2254c     12 CB 49 FC | 	wrbyte	#229, local04
22550     03 20 06 F1 | 	add	local02, #3
22554     10 03 48 FC | 	wrbyte	#1, local02
22558     03 20 86 F1 | 	sub	local02, #3
2255c     0C 1E 86 F1 | 	sub	local01, #12
22560     0F 25 02 FB | 	rdlong	local04, local01
22564     10 1E 86 F1 | 	sub	local01, #16
22568     11 25 12 F2 | 	cmp	local04, local03 wc
2256c     14 00 90 3D |  if_ae	jmp	#LR__3612
22570     0F 13 02 F6 | 	mov	arg01, local01
22574     00 14 06 F6 | 	mov	arg02, #0
22578     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2257c     FD 26 0A F6 | 	mov	local05, result1 wz
22580     A4 FF 9F AD |  if_e	jmp	#LR__3611
22584                 | LR__3612
22584     04 26 0E F2 | 	cmp	local05, #4 wz
22588     02 26 06 A6 |  if_e	mov	local05, #2
2258c                 | LR__3613
2258c                 | ' 	}
2258c                 | ' #line 2590 "ff.c"
2258c                 | ' 	return res;
2258c     13 FB 01 F6 | 	mov	result1, local05
22590     A7 F0 03 F6 | 	mov	ptra, fp
22594     B2 00 A0 FD | 	call	#popregs_
22598                 | _fatfs_cc_dir_remove_ret
22598     2D 00 64 FD | 	ret
2259c                 | 
2259c                 | _fatfs_cc_get_fileinfo
2259c     0F 4A 05 F6 | 	mov	COUNT_, #15
225a0     A8 00 A0 FD | 	call	#pushregs_
225a4     09 1F 02 F6 | 	mov	local01, arg01
225a8     0A 21 02 F6 | 	mov	local02, arg02
225ac     0F 23 02 FB | 	rdlong	local03, local01
225b0     1C 20 06 F1 | 	add	local02, #28
225b4     10 01 48 FC | 	wrbyte	#0, local02
225b8     1C 20 86 F1 | 	sub	local02, #28
225bc     18 1E 06 F1 | 	add	local01, #24
225c0     0F 25 0A FB | 	rdlong	local04, local01 wz
225c4     18 1E 86 F1 | 	sub	local01, #24
225c8     90 03 90 AD |  if_e	jmp	#LR__3634
225cc     2C 1E 06 F1 | 	add	local01, #44
225d0     0F 25 02 FB | 	rdlong	local04, local01
225d4     2C 1E 86 F1 | 	sub	local01, #44
225d8     FF FF 7F FF 
225dc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
225e0     D8 00 90 AD |  if_e	jmp	#LR__3623
225e4     00 26 06 F6 | 	mov	local05, #0
225e8     00 28 06 F6 | 	mov	local06, #0
225ec     00 2A 06 F6 | 	mov	local07, #0
225f0                 | ' 			si = di = 0;
225f0                 | ' 			hs = 0;
225f0                 | ' 			while (fs->lfnbuf[si] != 0) {
225f0                 | LR__3620
225f0     0C 22 06 F1 | 	add	local03, #12
225f4     11 25 02 FB | 	rdlong	local04, local03
225f8     0C 22 86 F1 | 	sub	local03, #12
225fc     14 2D 02 F6 | 	mov	local08, local06
22600     01 2C 66 F0 | 	shl	local08, #1
22604     12 2D 02 F1 | 	add	local08, local04
22608     16 25 EA FA | 	rdword	local04, local08 wz
2260c     90 00 90 AD |  if_e	jmp	#LR__3622
22610     0C 22 06 F1 | 	add	local03, #12
22614     11 2F 02 FB | 	rdlong	local09, local03
22618     0C 22 86 F1 | 	sub	local03, #12
2261c     14 31 02 F6 | 	mov	local10, local06
22620     01 30 66 F0 | 	shl	local10, #1
22624     17 31 02 F1 | 	add	local10, local09
22628     18 33 E2 FA | 	rdword	local11, local10
2262c     15 25 02 F6 | 	mov	local04, local07
22630     0F 24 4E F7 | 	zerox	local04, #15 wz
22634     01 28 06 F1 | 	add	local06, #1
22638     24 00 90 5D |  if_ne	jmp	#LR__3621
2263c     19 35 32 F9 | 	getword	local12, local11, #0
22640     6C 00 00 FF 
22644     00 34 16 F2 | 	cmp	local12, ##55296 wc
22648     14 00 90 CD |  if_b	jmp	#LR__3621
2264c     19 37 32 F9 | 	getword	local13, local11, #0
22650     70 00 00 FF 
22654     00 36 16 F2 | 	cmp	local13, ##57344 wc
22658     19 2B 02 C6 |  if_b	mov	local07, local11
2265c                 | ' 					hs = wc; continue;
2265c     90 FF 9F CD |  if_b	jmp	#LR__3620
22660                 | LR__3621
22660     15 13 32 F9 | 	getword	arg01, local07, #0
22664     10 12 66 F0 | 	shl	arg01, #16
22668     19 33 32 F9 | 	getword	local11, local11, #0
2266c     19 13 42 F5 | 	or	arg01, local11
22670     13 15 02 F6 | 	mov	arg02, local05
22674     1C 20 06 F1 | 	add	local02, #28
22678     10 15 02 F1 | 	add	arg02, local02
2267c     FF 16 06 F6 | 	mov	arg03, #255
22680     13 17 82 F1 | 	sub	arg03, local05
22684     1C 20 86 F1 | 	sub	local02, #28
22688     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2268c     FD 38 0A F6 | 	mov	local14, result1 wz
22690     00 26 06 A6 |  if_e	mov	local05, #0
22694     1C 27 02 51 |  if_ne	add	local05, local14
22698     00 2A 06 56 |  if_ne	mov	local07, #0
2269c     50 FF 9F 5D |  if_ne	jmp	#LR__3620
226a0                 | LR__3622
226a0     15 25 02 F6 | 	mov	local04, local07
226a4     0F 24 4E F7 | 	zerox	local04, #15 wz
226a8     00 26 06 56 |  if_ne	mov	local05, #0
226ac     1C 20 06 F1 | 	add	local02, #28
226b0     10 27 02 F1 | 	add	local05, local02
226b4     13 01 48 FC | 	wrbyte	#0, local05
226b8     1C 20 86 F1 | 	sub	local02, #28
226bc                 | LR__3623
226bc     00 26 06 F6 | 	mov	local05, #0
226c0     00 28 06 F6 | 	mov	local06, #0
226c4                 | ' 			fno->fname[di] = 0;
226c4                 | ' 		}
226c4                 | ' 	}
226c4                 | ' 
226c4                 | ' 	si = di = 0;
226c4                 | ' 	while (si < 11) {
226c4                 | LR__3624
226c4     0B 28 16 F2 | 	cmp	local06, #11 wc
226c8     20 01 90 3D |  if_ae	jmp	#LR__3627
226cc     1C 1E 06 F1 | 	add	local01, #28
226d0     0F 2F 02 FB | 	rdlong	local09, local01
226d4     1C 1E 86 F1 | 	sub	local01, #28
226d8     14 31 02 F6 | 	mov	local10, local06
226dc     17 31 02 F1 | 	add	local10, local09
226e0     18 33 C2 FA | 	rdbyte	local11, local10
226e4     19 25 32 F9 | 	getword	local04, local11, #0
226e8     20 24 0E F2 | 	cmp	local04, #32 wz
226ec     01 28 06 F1 | 	add	local06, #1
226f0     D0 FF 9F AD |  if_e	jmp	#LR__3624
226f4     19 25 32 F9 | 	getword	local04, local11, #0
226f8     05 24 0E F2 | 	cmp	local04, #5 wz
226fc     E5 32 06 A6 |  if_e	mov	local11, #229
22700     09 28 0E F2 | 	cmp	local06, #9 wz
22704     20 00 90 5D |  if_ne	jmp	#LR__3625
22708     0C 26 16 F2 | 	cmp	local05, #12 wc
2270c     18 00 90 3D |  if_ae	jmp	#LR__3625
22710     13 37 02 F6 | 	mov	local13, local05
22714     0C 20 06 F1 | 	add	local02, #12
22718     10 37 02 F1 | 	add	local13, local02
2271c     1B 5D 48 FC | 	wrbyte	#46, local13
22720     01 26 06 F1 | 	add	local05, #1
22724     0C 20 86 F1 | 	sub	local02, #12
22728                 | LR__3625
22728     19 13 32 F9 | 	getword	arg01, local11, #0
2272c     07 12 4E F7 | 	zerox	arg01, #7 wz
22730     00 FA 05 56 |  if_ne	mov	result1, #0
22734                 | ' 
22734                 | ' 	return 0;
22734     00 FA 05 A6 |  if_e	mov	result1, #0
22738     00 FA 0D F2 | 	cmp	result1, #0 wz
2273c     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
22740     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
22744     50 00 90 AD |  if_e	jmp	#LR__3626
22748     1C 1E 06 F1 | 	add	local01, #28
2274c     0F 31 02 FB | 	rdlong	local10, local01
22750     1C 1E 86 F1 | 	sub	local01, #28
22754     14 2D 02 F6 | 	mov	local08, local06
22758     18 2D 02 F1 | 	add	local08, local10
2275c     16 13 CA FA | 	rdbyte	arg01, local08 wz
22760     00 FA 05 56 |  if_ne	mov	result1, #0
22764                 | ' 
22764                 | ' 	return 0;
22764     00 FA 05 A6 |  if_e	mov	result1, #0
22768     00 FA 0D F2 | 	cmp	result1, #0 wz
2276c     28 00 90 AD |  if_e	jmp	#LR__3626
22770     19 33 32 F9 | 	getword	local11, local11, #0
22774     08 32 66 F0 | 	shl	local11, #8
22778     1C 1E 06 F1 | 	add	local01, #28
2277c     0F 39 02 FB | 	rdlong	local14, local01
22780     1C 1E 86 F1 | 	sub	local01, #28
22784     14 2F 02 F6 | 	mov	local09, local06
22788     1C 2F 02 F1 | 	add	local09, local14
2278c     17 35 C2 FA | 	rdbyte	local12, local09
22790     1A 33 42 F5 | 	or	local11, local12
22794     01 28 06 F1 | 	add	local06, #1
22798                 | LR__3626
22798     19 13 02 F6 | 	mov	arg01, local11
2279c     01 00 00 FF 
227a0     52 15 06 F6 | 	mov	arg02, ##850
227a4     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
227a8     FD 32 02 F6 | 	mov	local11, result1
227ac     19 25 02 F6 | 	mov	local04, local11
227b0     0F 24 4E F7 | 	zerox	local04, #15 wz
227b4     00 26 06 A6 |  if_e	mov	local05, #0
227b8     30 00 90 AD |  if_e	jmp	#LR__3627
227bc     19 13 32 F9 | 	getword	arg01, local11, #0
227c0     13 15 02 F6 | 	mov	arg02, local05
227c4     0C 20 06 F1 | 	add	local02, #12
227c8     10 15 02 F1 | 	add	arg02, local02
227cc     0C 16 06 F6 | 	mov	arg03, #12
227d0     13 17 82 F1 | 	sub	arg03, local05
227d4     0C 20 86 F1 | 	sub	local02, #12
227d8     EC DF BF FD | 	call	#_fatfs_cc_put_utf
227dc     FD 38 0A F6 | 	mov	local14, result1 wz
227e0     00 26 06 A6 |  if_e	mov	local05, #0
227e4     1C 27 02 51 |  if_ne	add	local05, local14
227e8     D8 FE 9F 5D |  if_ne	jmp	#LR__3624
227ec                 | LR__3627
227ec     13 25 02 F6 | 	mov	local04, local05
227f0     0C 20 06 F1 | 	add	local02, #12
227f4     10 25 02 F1 | 	add	local04, local02
227f8     12 01 48 FC | 	wrbyte	#0, local04
227fc     10 20 06 F1 | 	add	local02, #16
22800     10 25 CA FA | 	rdbyte	local04, local02 wz
22804     1C 20 86 F1 | 	sub	local02, #28
22808     F8 00 90 5D |  if_ne	jmp	#LR__3633
2280c     00 26 0E F2 | 	cmp	local05, #0 wz
22810     1C 00 90 5D |  if_ne	jmp	#LR__3628
22814     13 37 02 F6 | 	mov	local13, local05
22818     1C 20 06 F1 | 	add	local02, #28
2281c     10 37 02 F1 | 	add	local13, local02
22820     1B 7F 48 FC | 	wrbyte	#63, local13
22824     01 26 06 F1 | 	add	local05, #1
22828     1C 20 86 F1 | 	sub	local02, #28
2282c     A4 00 90 FD | 	jmp	#LR__3632
22830                 | LR__3628
22830                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
22830     00 26 06 F6 | 	mov	local05, #0
22834     00 28 06 F6 | 	mov	local06, #0
22838     08 3A 06 F6 | 	mov	local15, #8
2283c                 | LR__3629
2283c     14 25 02 F6 | 	mov	local04, local06
22840     0C 20 06 F1 | 	add	local02, #12
22844     10 25 02 F1 | 	add	local04, local02
22848     12 37 CA FA | 	rdbyte	local13, local04 wz
2284c     0C 20 86 F1 | 	sub	local02, #12
22850     80 00 90 AD |  if_e	jmp	#LR__3631
22854     14 2D 02 F6 | 	mov	local08, local06
22858     0C 20 06 F1 | 	add	local02, #12
2285c     10 2D 02 F1 | 	add	local08, local02
22860     16 33 C2 FA | 	rdbyte	local11, local08
22864     19 39 32 F9 | 	getword	local14, local11, #0
22868     2E 38 0E F2 | 	cmp	local14, #46 wz
2286c     0C 20 86 F1 | 	sub	local02, #12
22870     10 3A 06 A6 |  if_e	mov	local15, #16
22874     19 39 32 F9 | 	getword	local14, local11, #0
22878     41 38 16 F2 | 	cmp	local14, #65 wc
2287c     30 00 90 CD |  if_b	jmp	#LR__3630
22880     19 2D 32 F9 | 	getword	local08, local11, #0
22884     5B 2C 16 F2 | 	cmp	local08, #91 wc
22888     24 00 90 3D |  if_ae	jmp	#LR__3630
2288c     1C 1E 06 F1 | 	add	local01, #28
22890     0F 2F 02 FB | 	rdlong	local09, local01
22894     1C 1E 86 F1 | 	sub	local01, #28
22898     0C 2E 06 F1 | 	add	local09, #12
2289c     17 31 C2 FA | 	rdbyte	local10, local09
228a0     1D 39 E2 F8 | 	getbyte	local14, local15, #0
228a4     1C 31 CA F7 | 	test	local10, local14 wz
228a8     19 33 32 59 |  if_ne	getword	local11, local11, #0
228ac     20 32 06 51 |  if_ne	add	local11, #32
228b0                 | LR__3630
228b0     13 39 02 F6 | 	mov	local14, local05
228b4     1C 20 06 F1 | 	add	local02, #28
228b8     10 39 02 F1 | 	add	local14, local02
228bc     19 33 32 F9 | 	getword	local11, local11, #0
228c0     1C 33 42 FC | 	wrbyte	local11, local14
228c4     01 28 06 F1 | 	add	local06, #1
228c8     01 26 06 F1 | 	add	local05, #1
228cc     1C 20 86 F1 | 	sub	local02, #28
228d0     68 FF 9F FD | 	jmp	#LR__3629
228d4                 | LR__3631
228d4                 | LR__3632
228d4     1C 20 06 F1 | 	add	local02, #28
228d8     10 27 02 F1 | 	add	local05, local02
228dc     13 01 48 FC | 	wrbyte	#0, local05
228e0     1C 1E 06 F1 | 	add	local01, #28
228e4     0F 25 02 FB | 	rdlong	local04, local01
228e8     1C 1E 86 F1 | 	sub	local01, #28
228ec     0C 24 06 F1 | 	add	local04, #12
228f0     12 37 CA FA | 	rdbyte	local13, local04 wz
228f4     1C 20 86 F1 | 	sub	local02, #28
228f8     0C 20 06 A1 |  if_e	add	local02, #12
228fc     10 01 48 AC |  if_e	wrbyte	#0, local02
22900     0C 20 86 A1 |  if_e	sub	local02, #12
22904                 | LR__3633
22904     1C 1E 06 F1 | 	add	local01, #28
22908     0F 35 02 FB | 	rdlong	local12, local01
2290c     0B 34 06 F1 | 	add	local12, #11
22910     1A 25 C2 FA | 	rdbyte	local04, local12
22914     3F 24 06 F5 | 	and	local04, #63
22918     08 20 06 F1 | 	add	local02, #8
2291c     10 25 42 FC | 	wrbyte	local04, local02
22920     08 20 86 F1 | 	sub	local02, #8
22924     0F 13 02 FB | 	rdlong	arg01, local01
22928     1C 12 06 F1 | 	add	arg01, #28
2292c                 | ' {
2292c                 | ' 
2292c                 | ' 	return *((DWORD*)ptr);
2292c     09 FB 01 FB | 	rdlong	result1, arg01
22930     10 FB 61 FC | 	wrlong	result1, local02
22934     0F 13 02 FB | 	rdlong	arg01, local01
22938     16 12 06 F1 | 	add	arg01, #22
2293c                 | ' {
2293c                 | ' 
2293c                 | ' 	return *((WORD*)ptr);
2293c     09 FB E1 FA | 	rdword	result1, arg01
22940     06 20 06 F1 | 	add	local02, #6
22944     10 FB 51 FC | 	wrword	result1, local02
22948     0F 13 02 FB | 	rdlong	arg01, local01
2294c     18 12 06 F1 | 	add	arg01, #24
22950                 | ' {
22950                 | ' 
22950                 | ' 	return *((WORD*)ptr);
22950     09 FB E1 FA | 	rdword	result1, arg01
22954     02 20 86 F1 | 	sub	local02, #2
22958     10 FB 51 FC | 	wrword	result1, local02
2295c                 | LR__3634
2295c     A7 F0 03 F6 | 	mov	ptra, fp
22960     B2 00 A0 FD | 	call	#popregs_
22964                 | _fatfs_cc_get_fileinfo_ret
22964     2D 00 64 FD | 	ret
22968                 | 
22968                 | _fatfs_cc_create_name
22968     0D 4A 05 F6 | 	mov	COUNT_, #13
2296c     A8 00 A0 FD | 	call	#pushregs_
22970     34 F0 07 F1 | 	add	ptra, #52
22974     04 4E 05 F1 | 	add	fp, #4
22978     A7 12 62 FC | 	wrlong	arg01, fp
2297c     04 4E 05 F1 | 	add	fp, #4
22980     A7 14 62 FC | 	wrlong	arg02, fp
22984     0A FB 01 FB | 	rdlong	result1, arg02
22988     28 4E 05 F1 | 	add	fp, #40
2298c     A7 FA 61 FC | 	wrlong	result1, fp
22990     2C 4E 85 F1 | 	sub	fp, #44
22994     A7 FA 01 FB | 	rdlong	result1, fp
22998     FD 1E 02 FB | 	rdlong	local01, result1
2299c     0C 1E 06 F1 | 	add	local01, #12
229a0     0F 21 02 FB | 	rdlong	local02, local01
229a4     14 4E 05 F1 | 	add	fp, #20
229a8     A7 20 62 FC | 	wrlong	local02, fp
229ac     14 4E 05 F1 | 	add	fp, #20
229b0     A7 00 68 FC | 	wrlong	#0, fp
229b4     2C 4E 85 F1 | 	sub	fp, #44
229b8                 | ' 
229b8                 | ' 
229b8                 | ' 
229b8                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
229b8                 | ' 	for (;;) {
229b8                 | LR__3640
229b8     30 4E 05 F1 | 	add	fp, #48
229bc     A7 12 02 F6 | 	mov	arg01, fp
229c0     30 4E 85 F1 | 	sub	fp, #48
229c4     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
229c8     1C 4E 05 F1 | 	add	fp, #28
229cc     A7 FA 61 FC | 	wrlong	result1, fp
229d0     1C 4E 85 F1 | 	sub	fp, #28
229d4     FF FF 7F FF 
229d8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
229dc     06 FA 05 A6 |  if_e	mov	result1, #6
229e0     74 08 90 AD |  if_e	jmp	#LR__3680
229e4     1C 4E 05 F1 | 	add	fp, #28
229e8     A7 1E 02 FB | 	rdlong	local01, fp
229ec     1C 4E 85 F1 | 	sub	fp, #28
229f0     80 00 00 FF 
229f4     00 1E 16 F2 | 	cmp	local01, ##65536 wc
229f8     3C 00 90 CD |  if_b	jmp	#LR__3641
229fc     18 4E 05 F1 | 	add	fp, #24
22a00     A7 22 02 FB | 	rdlong	local03, fp
22a04     14 4E 05 F1 | 	add	fp, #20
22a08     A7 1E 02 FB | 	rdlong	local01, fp
22a0c     0F 25 02 F6 | 	mov	local04, local01
22a10     01 24 06 F1 | 	add	local04, #1
22a14     A7 24 62 FC | 	wrlong	local04, fp
22a18     01 1E 66 F0 | 	shl	local01, #1
22a1c     11 1F 02 F1 | 	add	local01, local03
22a20     10 4E 85 F1 | 	sub	fp, #16
22a24     A7 26 02 FB | 	rdlong	local05, fp
22a28     1C 4E 85 F1 | 	sub	fp, #28
22a2c     13 29 02 F6 | 	mov	local06, local05
22a30     10 28 46 F0 | 	shr	local06, #16
22a34     0F 29 52 FC | 	wrword	local06, local01
22a38                 | LR__3641
22a38     1C 4E 05 F1 | 	add	fp, #28
22a3c     A7 1E 02 FB | 	rdlong	local01, fp
22a40     08 4E 85 F1 | 	sub	fp, #8
22a44     A7 1E 52 FC | 	wrword	local01, fp
22a48     A7 1E E2 FA | 	rdword	local01, fp
22a4c     14 4E 85 F1 | 	sub	fp, #20
22a50     20 1E 16 F2 | 	cmp	local01, #32 wc
22a54     B0 00 90 CD |  if_b	jmp	#LR__3643
22a58     14 4E 05 F1 | 	add	fp, #20
22a5c     A7 1E E2 FA | 	rdword	local01, fp
22a60     14 4E 85 F1 | 	sub	fp, #20
22a64     2F 1E 0E F2 | 	cmp	local01, #47 wz
22a68     14 4E 05 51 |  if_ne	add	fp, #20
22a6c     A7 24 E2 5A |  if_ne	rdword	local04, fp
22a70     14 4E 85 51 |  if_ne	sub	fp, #20
22a74     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
22a78     8C 00 90 AD |  if_e	jmp	#LR__3643
22a7c     14 4E 05 F1 | 	add	fp, #20
22a80     A7 12 E2 FA | 	rdword	arg01, fp
22a84     14 4E 85 F1 | 	sub	fp, #20
22a88     80 12 16 F2 | 	cmp	arg01, #128 wc
22a8c     24 00 90 3D |  if_ae	jmp	#LR__3642
22a90     44 01 00 FF 
22a94     B4 13 06 F6 | 	mov	arg01, ##@LR__4302
22a98     14 4E 05 F1 | 	add	fp, #20
22a9c     A7 14 E2 FA | 	rdword	arg02, fp
22aa0     14 4E 85 F1 | 	sub	fp, #20
22aa4     FC D0 BF FD | 	call	#_fatfs_cc_strchr
22aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
22aac     06 FA 05 56 |  if_ne	mov	result1, #6
22ab0     A4 07 90 5D |  if_ne	jmp	#LR__3680
22ab4                 | LR__3642
22ab4     2C 4E 05 F1 | 	add	fp, #44
22ab8     A7 28 02 FB | 	rdlong	local06, fp
22abc     2C 4E 85 F1 | 	sub	fp, #44
22ac0     FF 28 16 F2 | 	cmp	local06, #255 wc
22ac4     06 FA 05 36 |  if_ae	mov	result1, #6
22ac8     8C 07 90 3D |  if_ae	jmp	#LR__3680
22acc     18 4E 05 F1 | 	add	fp, #24
22ad0     A7 22 02 FB | 	rdlong	local03, fp
22ad4     14 4E 05 F1 | 	add	fp, #20
22ad8     A7 20 02 FB | 	rdlong	local02, fp
22adc     10 25 02 F6 | 	mov	local04, local02
22ae0     01 24 06 F1 | 	add	local04, #1
22ae4     A7 24 62 FC | 	wrlong	local04, fp
22ae8     10 1F 02 F6 | 	mov	local01, local02
22aec     01 1E 66 F0 | 	shl	local01, #1
22af0     11 1F 02 F1 | 	add	local01, local03
22af4     18 4E 85 F1 | 	sub	fp, #24
22af8     A7 28 E2 FA | 	rdword	local06, fp
22afc     14 4E 85 F1 | 	sub	fp, #20
22b00     0F 29 52 FC | 	wrword	local06, local01
22b04     B0 FE 9F FD | 	jmp	#LR__3640
22b08                 | LR__3643
22b08     14 4E 05 F1 | 	add	fp, #20
22b0c     A7 2A E2 FA | 	rdword	local07, fp
22b10     14 4E 85 F1 | 	sub	fp, #20
22b14     20 2A 16 F2 | 	cmp	local07, #32 wc
22b18     10 4E 05 C1 |  if_b	add	fp, #16
22b1c     A7 08 48 CC |  if_b	wrbyte	#4, fp
22b20     10 4E 85 C1 |  if_b	sub	fp, #16
22b24     74 00 90 CD |  if_b	jmp	#LR__3648
22b28     97 24 48 FB | 	callpa	#(@LR__3646-@LR__3644)>>2,fcache_load_ptr_
22b2c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
22b2c                 | LR__3644
22b2c     30 4E 05 F1 | 	add	fp, #48
22b30     A7 24 02 FB | 	rdlong	local04, fp
22b34     30 4E 85 F1 | 	sub	fp, #48
22b38     12 2B C2 FA | 	rdbyte	local07, local04
22b3c     2F 2A 0E F2 | 	cmp	local07, #47 wz
22b40     18 00 90 AD |  if_e	jmp	#LR__3645
22b44     30 4E 05 F1 | 	add	fp, #48
22b48     A7 24 02 FB | 	rdlong	local04, fp
22b4c     30 4E 85 F1 | 	sub	fp, #48
22b50     12 21 C2 FA | 	rdbyte	local02, local04
22b54     5C 20 0E F2 | 	cmp	local02, #92 wz
22b58     18 00 90 5D |  if_ne	jmp	#LR__3647
22b5c                 | LR__3645
22b5c     30 4E 05 F1 | 	add	fp, #48
22b60     A7 1E 02 FB | 	rdlong	local01, fp
22b64     01 1E 06 F1 | 	add	local01, #1
22b68     A7 1E 62 FC | 	wrlong	local01, fp
22b6c     30 4E 85 F1 | 	sub	fp, #48
22b70     B8 FF 9F FD | 	jmp	#LR__3644
22b74                 | LR__3646
22b74                 | LR__3647
22b74     10 4E 05 F1 | 	add	fp, #16
22b78     A7 00 48 FC | 	wrbyte	#0, fp
22b7c     20 4E 05 F1 | 	add	fp, #32
22b80     A7 28 02 FB | 	rdlong	local06, fp
22b84     30 4E 85 F1 | 	sub	fp, #48
22b88     14 2B C2 FA | 	rdbyte	local07, local06
22b8c     20 2A 16 F2 | 	cmp	local07, #32 wc
22b90     10 4E 05 C1 |  if_b	add	fp, #16
22b94     A7 08 48 CC |  if_b	wrbyte	#4, fp
22b98     10 4E 85 C1 |  if_b	sub	fp, #16
22b9c                 | LR__3648
22b9c     08 4E 05 F1 | 	add	fp, #8
22ba0     A7 2A 02 FB | 	rdlong	local07, fp
22ba4     28 4E 05 F1 | 	add	fp, #40
22ba8     A7 1E 02 FB | 	rdlong	local01, fp
22bac     30 4E 85 F1 | 	sub	fp, #48
22bb0     15 1F 62 FC | 	wrlong	local01, local07
22bb4     97 38 48 FB | 	callpa	#(@LR__3650-@LR__3649)>>2,fcache_load_ptr_
22bb8                 | ' 	}
22bb8                 | ' 	*path = p;
22bb8                 | ' #line 2862 "ff.c"
22bb8                 | ' 	while (di) {
22bb8                 | LR__3649
22bb8     2C 4E 05 F1 | 	add	fp, #44
22bbc     A7 2A 0A FB | 	rdlong	local07, fp wz
22bc0     2C 4E 85 F1 | 	sub	fp, #44
22bc4     60 00 90 AD |  if_e	jmp	#LR__3651
22bc8     18 4E 05 F1 | 	add	fp, #24
22bcc     A7 28 02 FB | 	rdlong	local06, fp
22bd0     14 4E 05 F1 | 	add	fp, #20
22bd4     A7 24 02 FB | 	rdlong	local04, fp
22bd8     01 24 86 F1 | 	sub	local04, #1
22bdc     01 24 66 F0 | 	shl	local04, #1
22be0     14 25 02 F1 | 	add	local04, local06
22be4     12 29 E2 FA | 	rdword	local06, local04
22be8     18 4E 85 F1 | 	sub	fp, #24
22bec     A7 28 52 FC | 	wrword	local06, fp
22bf0     A7 2A E2 FA | 	rdword	local07, fp
22bf4     14 4E 85 F1 | 	sub	fp, #20
22bf8     20 2A 0E F2 | 	cmp	local07, #32 wz
22bfc     14 4E 05 51 |  if_ne	add	fp, #20
22c00     A7 1E E2 5A |  if_ne	rdword	local01, fp
22c04     14 4E 85 51 |  if_ne	sub	fp, #20
22c08     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
22c0c     18 00 90 5D |  if_ne	jmp	#LR__3651
22c10     2C 4E 05 F1 | 	add	fp, #44
22c14     A7 1E 02 FB | 	rdlong	local01, fp
22c18     01 1E 86 F1 | 	sub	local01, #1
22c1c     A7 1E 62 FC | 	wrlong	local01, fp
22c20     2C 4E 85 F1 | 	sub	fp, #44
22c24     90 FF 9F FD | 	jmp	#LR__3649
22c28                 | LR__3650
22c28                 | LR__3651
22c28     18 4E 05 F1 | 	add	fp, #24
22c2c     A7 2C 02 FB | 	rdlong	local08, fp
22c30     14 4E 05 F1 | 	add	fp, #20
22c34     A7 24 02 FB | 	rdlong	local04, fp
22c38     01 24 66 F0 | 	shl	local04, #1
22c3c     16 25 02 F1 | 	add	local04, local08
22c40     12 01 58 FC | 	wrword	#0, local04
22c44     A7 2A 0A FB | 	rdlong	local07, fp wz
22c48     2C 4E 85 F1 | 	sub	fp, #44
22c4c     06 FA 05 A6 |  if_e	mov	result1, #6
22c50     04 06 90 AD |  if_e	jmp	#LR__3680
22c54                 | ' 
22c54                 | ' 
22c54                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
22c54     28 4E 05 F1 | 	add	fp, #40
22c58     A7 00 68 FC | 	wrlong	#0, fp
22c5c     28 4E 85 F1 | 	sub	fp, #40
22c60     97 22 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
22c64                 | LR__3652
22c64     18 4E 05 F1 | 	add	fp, #24
22c68     A7 2E 02 FB | 	rdlong	local09, fp
22c6c     10 4E 05 F1 | 	add	fp, #16
22c70     A7 30 02 FB | 	rdlong	local10, fp
22c74     28 4E 85 F1 | 	sub	fp, #40
22c78     01 30 66 F0 | 	shl	local10, #1
22c7c     17 31 02 F1 | 	add	local10, local09
22c80     18 33 E2 FA | 	rdword	local11, local10
22c84     20 32 0E F2 | 	cmp	local11, #32 wz
22c88     1C 00 90 5D |  if_ne	jmp	#LR__3654
22c8c     28 4E 05 F1 | 	add	fp, #40
22c90     A7 34 02 FB | 	rdlong	local12, fp
22c94     1A 27 02 F6 | 	mov	local05, local12
22c98     01 26 06 F1 | 	add	local05, #1
22c9c     A7 26 62 FC | 	wrlong	local05, fp
22ca0     28 4E 85 F1 | 	sub	fp, #40
22ca4     BC FF 9F FD | 	jmp	#LR__3652
22ca8                 | LR__3653
22ca8                 | LR__3654
22ca8     28 4E 05 F1 | 	add	fp, #40
22cac     A7 2A 02 FB | 	rdlong	local07, fp
22cb0     28 4E 85 F1 | 	sub	fp, #40
22cb4     01 2A 16 F2 | 	cmp	local07, #1 wc
22cb8     28 00 90 3D |  if_ae	jmp	#LR__3655
22cbc     18 4E 05 F1 | 	add	fp, #24
22cc0     A7 22 02 FB | 	rdlong	local03, fp
22cc4     10 4E 05 F1 | 	add	fp, #16
22cc8     A7 2E 02 FB | 	rdlong	local09, fp
22ccc     28 4E 85 F1 | 	sub	fp, #40
22cd0     01 2E 66 F0 | 	shl	local09, #1
22cd4     11 2F 02 F1 | 	add	local09, local03
22cd8     17 1F E2 FA | 	rdword	local01, local09
22cdc     2E 1E 0E F2 | 	cmp	local01, #46 wz
22ce0     14 00 90 5D |  if_ne	jmp	#LR__3656
22ce4                 | LR__3655
22ce4     10 4E 05 F1 | 	add	fp, #16
22ce8     A7 2A C2 FA | 	rdbyte	local07, fp
22cec     03 2A 46 F5 | 	or	local07, #3
22cf0     A7 2A 42 FC | 	wrbyte	local07, fp
22cf4     10 4E 85 F1 | 	sub	fp, #16
22cf8                 | LR__3656
22cf8     97 2C 48 FB | 	callpa	#(@LR__3658-@LR__3657)>>2,fcache_load_ptr_
22cfc                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
22cfc                 | LR__3657
22cfc     2C 4E 05 F1 | 	add	fp, #44
22d00     A7 2A 02 FB | 	rdlong	local07, fp
22d04     2C 4E 85 F1 | 	sub	fp, #44
22d08     01 2A 16 F2 | 	cmp	local07, #1 wc
22d0c     44 00 90 CD |  if_b	jmp	#LR__3659
22d10     18 4E 05 F1 | 	add	fp, #24
22d14     A7 28 02 FB | 	rdlong	local06, fp
22d18     14 4E 05 F1 | 	add	fp, #20
22d1c     A7 22 02 FB | 	rdlong	local03, fp
22d20     2C 4E 85 F1 | 	sub	fp, #44
22d24     01 22 86 F1 | 	sub	local03, #1
22d28     01 22 66 F0 | 	shl	local03, #1
22d2c     14 23 02 F1 | 	add	local03, local06
22d30     11 1F E2 FA | 	rdword	local01, local03
22d34     2E 1E 0E F2 | 	cmp	local01, #46 wz
22d38     18 00 90 AD |  if_e	jmp	#LR__3659
22d3c     2C 4E 05 F1 | 	add	fp, #44
22d40     A7 1E 02 FB | 	rdlong	local01, fp
22d44     01 1E 86 F1 | 	sub	local01, #1
22d48     A7 1E 62 FC | 	wrlong	local01, fp
22d4c     2C 4E 85 F1 | 	sub	fp, #44
22d50     A8 FF 9F FD | 	jmp	#LR__3657
22d54                 | LR__3658
22d54                 | LR__3659
22d54     04 4E 05 F1 | 	add	fp, #4
22d58     A7 12 02 FB | 	rdlong	arg01, fp
22d5c     04 4E 85 F1 | 	sub	fp, #4
22d60     20 12 06 F1 | 	add	arg01, #32
22d64     20 14 06 F6 | 	mov	arg02, #32
22d68     0B 16 06 F6 | 	mov	arg03, #11
22d6c     09 37 02 F6 | 	mov	local13, arg01
22d70     98 00 A0 FD | 	call	#\builtin_bytefill_
22d74     1B FB 01 F6 | 	mov	result1, local13
22d78     0C 4E 05 F1 | 	add	fp, #12
22d7c     A7 00 48 FC | 	wrbyte	#0, fp
22d80     A7 2A C2 FA | 	rdbyte	local07, fp
22d84     14 4E 05 F1 | 	add	fp, #20
22d88     A7 2A 62 FC | 	wrlong	local07, fp
22d8c     04 4E 05 F1 | 	add	fp, #4
22d90     A7 10 68 FC | 	wrlong	#8, fp
22d94     24 4E 85 F1 | 	sub	fp, #36
22d98                 | ' 
22d98                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
22d98                 | ' 	i = b = 0; ni = 8;
22d98                 | ' 	for (;;) {
22d98                 | LR__3660
22d98     18 4E 05 F1 | 	add	fp, #24
22d9c     A7 22 02 FB | 	rdlong	local03, fp
22da0     10 4E 05 F1 | 	add	fp, #16
22da4     A7 2E 02 FB | 	rdlong	local09, fp
22da8     17 25 02 F6 | 	mov	local04, local09
22dac     01 24 06 F1 | 	add	local04, #1
22db0     A7 24 62 FC | 	wrlong	local04, fp
22db4     01 2E 66 F0 | 	shl	local09, #1
22db8     11 2F 02 F1 | 	add	local09, local03
22dbc     17 29 E2 FA | 	rdword	local06, local09
22dc0     14 4E 85 F1 | 	sub	fp, #20
22dc4     A7 28 52 FC | 	wrword	local06, fp
22dc8     A7 2A EA FA | 	rdword	local07, fp wz
22dcc     14 4E 85 F1 | 	sub	fp, #20
22dd0     74 03 90 AD |  if_e	jmp	#LR__3676
22dd4     14 4E 05 F1 | 	add	fp, #20
22dd8     A7 2A E2 FA | 	rdword	local07, fp
22ddc     14 4E 85 F1 | 	sub	fp, #20
22de0     20 2A 0E F2 | 	cmp	local07, #32 wz
22de4     30 00 90 AD |  if_e	jmp	#LR__3661
22de8     14 4E 05 F1 | 	add	fp, #20
22dec     A7 1E E2 FA | 	rdword	local01, fp
22df0     14 4E 85 F1 | 	sub	fp, #20
22df4     2E 1E 0E F2 | 	cmp	local01, #46 wz
22df8     34 00 90 5D |  if_ne	jmp	#LR__3662
22dfc     28 4E 05 F1 | 	add	fp, #40
22e00     A7 24 02 FB | 	rdlong	local04, fp
22e04     04 4E 05 F1 | 	add	fp, #4
22e08     A7 30 02 FB | 	rdlong	local10, fp
22e0c     2C 4E 85 F1 | 	sub	fp, #44
22e10     18 25 0A F2 | 	cmp	local04, local10 wz
22e14     18 00 90 AD |  if_e	jmp	#LR__3662
22e18                 | LR__3661
22e18     10 4E 05 F1 | 	add	fp, #16
22e1c     A7 2A C2 FA | 	rdbyte	local07, fp
22e20     03 2A 46 F5 | 	or	local07, #3
22e24     A7 2A 42 FC | 	wrbyte	local07, fp
22e28     10 4E 85 F1 | 	sub	fp, #16
22e2c                 | ' 			cf |=  0x01  |  0x02 ;
22e2c                 | ' 			continue;
22e2c     68 FF 9F FD | 	jmp	#LR__3660
22e30                 | LR__3662
22e30     20 4E 05 F1 | 	add	fp, #32
22e34     A7 2A 02 FB | 	rdlong	local07, fp
22e38     04 4E 05 F1 | 	add	fp, #4
22e3c     A7 1E 02 FB | 	rdlong	local01, fp
22e40     24 4E 85 F1 | 	sub	fp, #36
22e44     0F 2B 12 F2 | 	cmp	local07, local01 wc
22e48     1C 00 90 3D |  if_ae	jmp	#LR__3663
22e4c     28 4E 05 F1 | 	add	fp, #40
22e50     A7 2C 02 FB | 	rdlong	local08, fp
22e54     04 4E 05 F1 | 	add	fp, #4
22e58     A7 30 02 FB | 	rdlong	local10, fp
22e5c     2C 4E 85 F1 | 	sub	fp, #44
22e60     18 2D 0A F2 | 	cmp	local08, local10 wz
22e64     B0 00 90 5D |  if_ne	jmp	#LR__3665
22e68                 | LR__3663
22e68     24 4E 05 F1 | 	add	fp, #36
22e6c     A7 2A 02 FB | 	rdlong	local07, fp
22e70     24 4E 85 F1 | 	sub	fp, #36
22e74     0B 2A 0E F2 | 	cmp	local07, #11 wz
22e78     18 00 90 5D |  if_ne	jmp	#LR__3664
22e7c     10 4E 05 F1 | 	add	fp, #16
22e80     A7 2A C2 FA | 	rdbyte	local07, fp
22e84     03 2A 46 F5 | 	or	local07, #3
22e88     A7 2A 42 FC | 	wrbyte	local07, fp
22e8c     10 4E 85 F1 | 	sub	fp, #16
22e90                 | ' 				cf |=  0x01  |  0x02 ;
22e90                 | ' 				break;
22e90     B4 02 90 FD | 	jmp	#LR__3676
22e94                 | LR__3664
22e94     28 4E 05 F1 | 	add	fp, #40
22e98     A7 2A 02 FB | 	rdlong	local07, fp
22e9c     04 4E 05 F1 | 	add	fp, #4
22ea0     A7 1E 02 FB | 	rdlong	local01, fp
22ea4     2C 4E 85 F1 | 	sub	fp, #44
22ea8     0F 2B 0A F2 | 	cmp	local07, local01 wz
22eac     10 4E 05 51 |  if_ne	add	fp, #16
22eb0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22eb4     03 2A 46 55 |  if_ne	or	local07, #3
22eb8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22ebc     10 4E 85 51 |  if_ne	sub	fp, #16
22ec0     28 4E 05 F1 | 	add	fp, #40
22ec4     A7 2A 02 FB | 	rdlong	local07, fp
22ec8     04 4E 05 F1 | 	add	fp, #4
22ecc     A7 20 02 FB | 	rdlong	local02, fp
22ed0     2C 4E 85 F1 | 	sub	fp, #44
22ed4     10 2B 1A F2 | 	cmp	local07, local02 wcz
22ed8     6C 02 90 1D |  if_a	jmp	#LR__3676
22edc     2C 4E 05 F1 | 	add	fp, #44
22ee0     A7 2A 02 FB | 	rdlong	local07, fp
22ee4     04 4E 85 F1 | 	sub	fp, #4
22ee8     A7 2A 62 FC | 	wrlong	local07, fp
22eec     08 4E 85 F1 | 	sub	fp, #8
22ef0     A7 10 68 FC | 	wrlong	#8, fp
22ef4     04 4E 05 F1 | 	add	fp, #4
22ef8     A7 16 68 FC | 	wrlong	#11, fp
22efc     18 4E 85 F1 | 	sub	fp, #24
22f00     A7 32 C2 FA | 	rdbyte	local11, fp
22f04     19 2B E2 F8 | 	getbyte	local07, local11, #0
22f08     02 2A 66 F0 | 	shl	local07, #2
22f0c     A7 2A 42 FC | 	wrbyte	local07, fp
22f10     0C 4E 85 F1 | 	sub	fp, #12
22f14                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
22f14                 | ' 			continue;
22f14     80 FE 9F FD | 	jmp	#LR__3660
22f18                 | LR__3665
22f18     14 4E 05 F1 | 	add	fp, #20
22f1c     A7 2A E2 FA | 	rdword	local07, fp
22f20     14 4E 85 F1 | 	sub	fp, #20
22f24     80 2A 16 F2 | 	cmp	local07, #128 wc
22f28     6C 00 90 CD |  if_b	jmp	#LR__3667
22f2c     10 4E 05 F1 | 	add	fp, #16
22f30     A7 2A C2 FA | 	rdbyte	local07, fp
22f34     02 2A 46 F5 | 	or	local07, #2
22f38     A7 2A 42 FC | 	wrbyte	local07, fp
22f3c     04 4E 05 F1 | 	add	fp, #4
22f40     A7 12 E2 FA | 	rdword	arg01, fp
22f44     14 4E 85 F1 | 	sub	fp, #20
22f48     01 00 00 FF 
22f4c     52 15 06 F6 | 	mov	arg02, ##850
22f50     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
22f54     14 4E 05 F1 | 	add	fp, #20
22f58     A7 FA 51 FC | 	wrword	result1, fp
22f5c     A7 2A E2 FA | 	rdword	local07, fp
22f60     14 4E 85 F1 | 	sub	fp, #20
22f64     80 2A CE F7 | 	test	local07, #128 wz
22f68     2C 00 90 AD |  if_e	jmp	#LR__3666
22f6c     14 4E 05 F1 | 	add	fp, #20
22f70     A7 20 E2 FA | 	rdword	local02, fp
22f74     7F 20 06 F5 | 	and	local02, #127
22f78     01 00 00 FF 
22f7c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
22f80     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
22f84     10 2B C2 FA | 	rdbyte	local07, local02
22f88     A7 2A 52 FC | 	wrword	local07, fp
22f8c     14 4E 85 F1 | 	sub	fp, #20
22f90     01 00 00 FF 
22f94     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
22f98                 | LR__3666
22f98                 | LR__3667
22f98     14 4E 05 F1 | 	add	fp, #20
22f9c     A7 2A E2 FA | 	rdword	local07, fp
22fa0     14 4E 85 F1 | 	sub	fp, #20
22fa4     00 2B 16 F2 | 	cmp	local07, #256 wc
22fa8     88 00 90 CD |  if_b	jmp	#LR__3669
22fac     24 4E 05 F1 | 	add	fp, #36
22fb0     A7 2A 02 FB | 	rdlong	local07, fp
22fb4     01 2A 86 F1 | 	sub	local07, #1
22fb8     04 4E 85 F1 | 	sub	fp, #4
22fbc     A7 20 02 FB | 	rdlong	local02, fp
22fc0     20 4E 85 F1 | 	sub	fp, #32
22fc4     15 21 12 F2 | 	cmp	local02, local07 wc
22fc8     2C 00 90 CD |  if_b	jmp	#LR__3668
22fcc     10 4E 05 F1 | 	add	fp, #16
22fd0     A7 32 C2 FA | 	rdbyte	local11, fp
22fd4     19 2B E2 F8 | 	getbyte	local07, local11, #0
22fd8     03 2A 46 F5 | 	or	local07, #3
22fdc     A7 2A 42 FC | 	wrbyte	local07, fp
22fe0     14 4E 05 F1 | 	add	fp, #20
22fe4     A7 2A 02 FB | 	rdlong	local07, fp
22fe8     04 4E 85 F1 | 	sub	fp, #4
22fec     A7 2A 62 FC | 	wrlong	local07, fp
22ff0     20 4E 85 F1 | 	sub	fp, #32
22ff4                 | ' 				cf |=  0x01  |  0x02 ;
22ff4                 | ' 				i = ni; continue;
22ff4     A0 FD 9F FD | 	jmp	#LR__3660
22ff8                 | LR__3668
22ff8     04 4E 05 F1 | 	add	fp, #4
22ffc     A7 2E 02 FB | 	rdlong	local09, fp
23000     1C 4E 05 F1 | 	add	fp, #28
23004     A7 30 02 FB | 	rdlong	local10, fp
23008     18 25 02 F6 | 	mov	local04, local10
2300c     01 24 06 F1 | 	add	local04, #1
23010     A7 24 62 FC | 	wrlong	local04, fp
23014     20 2E 06 F1 | 	add	local09, #32
23018     17 31 02 F1 | 	add	local10, local09
2301c     0C 4E 85 F1 | 	sub	fp, #12
23020     A7 22 E2 FA | 	rdword	local03, fp
23024     14 4E 85 F1 | 	sub	fp, #20
23028     08 22 46 F0 | 	shr	local03, #8
2302c     18 23 42 FC | 	wrbyte	local03, local10
23030     D4 00 90 FD | 	jmp	#LR__3675
23034                 | LR__3669
23034     14 4E 05 F1 | 	add	fp, #20
23038     A7 2A EA FA | 	rdword	local07, fp wz
2303c     14 4E 85 F1 | 	sub	fp, #20
23040     20 00 90 AD |  if_e	jmp	#LR__3670
23044     44 01 00 FF 
23048     BD 13 06 F6 | 	mov	arg01, ##@LR__4303
2304c     14 4E 05 F1 | 	add	fp, #20
23050     A7 14 E2 FA | 	rdword	arg02, fp
23054     14 4E 85 F1 | 	sub	fp, #20
23058     48 CB BF FD | 	call	#_fatfs_cc_strchr
2305c     00 FA 0D F2 | 	cmp	result1, #0 wz
23060     20 00 90 AD |  if_e	jmp	#LR__3671
23064                 | LR__3670
23064     14 4E 05 F1 | 	add	fp, #20
23068     A7 BE 58 FC | 	wrword	#95, fp
2306c     04 4E 85 F1 | 	sub	fp, #4
23070     A7 2A C2 FA | 	rdbyte	local07, fp
23074     03 2A 46 F5 | 	or	local07, #3
23078     A7 2A 42 FC | 	wrbyte	local07, fp
2307c     10 4E 85 F1 | 	sub	fp, #16
23080     84 00 90 FD | 	jmp	#LR__3674
23084                 | LR__3671
23084     14 4E 05 F1 | 	add	fp, #20
23088     A7 2A E2 FA | 	rdword	local07, fp
2308c     14 4E 85 F1 | 	sub	fp, #20
23090     41 2A 16 F2 | 	cmp	local07, #65 wc
23094     24 00 90 CD |  if_b	jmp	#LR__3672
23098     14 4E 05 F1 | 	add	fp, #20
2309c     A7 1E E2 FA | 	rdword	local01, fp
230a0     14 4E 85 F1 | 	sub	fp, #20
230a4     5B 1E 16 F2 | 	cmp	local01, #91 wc
230a8     0C 4E 05 C1 |  if_b	add	fp, #12
230ac     A7 2A C2 CA |  if_b	rdbyte	local07, fp
230b0     02 2A 46 C5 |  if_b	or	local07, #2
230b4     A7 2A 42 CC |  if_b	wrbyte	local07, fp
230b8     0C 4E 85 C1 |  if_b	sub	fp, #12
230bc                 | LR__3672
230bc     14 4E 05 F1 | 	add	fp, #20
230c0     A7 2A E2 FA | 	rdword	local07, fp
230c4     14 4E 85 F1 | 	sub	fp, #20
230c8     61 2A 16 F2 | 	cmp	local07, #97 wc
230cc     38 00 90 CD |  if_b	jmp	#LR__3673
230d0     14 4E 05 F1 | 	add	fp, #20
230d4     A7 1E E2 FA | 	rdword	local01, fp
230d8     14 4E 85 F1 | 	sub	fp, #20
230dc     7B 1E 16 F2 | 	cmp	local01, #123 wc
230e0     24 00 90 3D |  if_ae	jmp	#LR__3673
230e4     0C 4E 05 F1 | 	add	fp, #12
230e8     A7 2A C2 FA | 	rdbyte	local07, fp
230ec     01 2A 46 F5 | 	or	local07, #1
230f0     A7 2A 42 FC | 	wrbyte	local07, fp
230f4     08 4E 05 F1 | 	add	fp, #8
230f8     A7 2A E2 FA | 	rdword	local07, fp
230fc     20 2A 86 F1 | 	sub	local07, #32
23100     A7 2A 52 FC | 	wrword	local07, fp
23104     14 4E 85 F1 | 	sub	fp, #20
23108                 | LR__3673
23108                 | LR__3674
23108                 | LR__3675
23108     04 4E 05 F1 | 	add	fp, #4
2310c     A7 32 02 FB | 	rdlong	local11, fp
23110     19 2F 02 F6 | 	mov	local09, local11
23114     1C 4E 05 F1 | 	add	fp, #28
23118     A7 20 02 FB | 	rdlong	local02, fp
2311c     10 25 02 F6 | 	mov	local04, local02
23120     01 24 06 F1 | 	add	local04, #1
23124     A7 24 62 FC | 	wrlong	local04, fp
23128     10 31 02 F6 | 	mov	local10, local02
2312c     20 2E 06 F1 | 	add	local09, #32
23130     17 31 02 F1 | 	add	local10, local09
23134     0C 4E 85 F1 | 	sub	fp, #12
23138     A7 22 E2 FA | 	rdword	local03, fp
2313c     14 4E 85 F1 | 	sub	fp, #20
23140     18 23 42 FC | 	wrbyte	local03, local10
23144     50 FC 9F FD | 	jmp	#LR__3660
23148                 | LR__3676
23148     04 4E 05 F1 | 	add	fp, #4
2314c     A7 32 02 FB | 	rdlong	local11, fp
23150     04 4E 85 F1 | 	sub	fp, #4
23154     20 32 06 F1 | 	add	local11, #32
23158     19 2B C2 FA | 	rdbyte	local07, local11
2315c     E5 2A 0E F2 | 	cmp	local07, #229 wz
23160     04 4E 05 A1 |  if_e	add	fp, #4
23164     A7 2A 02 AB |  if_e	rdlong	local07, fp
23168     04 4E 85 A1 |  if_e	sub	fp, #4
2316c     20 2A 06 A1 |  if_e	add	local07, #32
23170     15 0B 48 AC |  if_e	wrbyte	#5, local07
23174     24 4E 05 F1 | 	add	fp, #36
23178     A7 2A 02 FB | 	rdlong	local07, fp
2317c     24 4E 85 F1 | 	sub	fp, #36
23180     08 2A 0E F2 | 	cmp	local07, #8 wz
23184     0C 4E 05 A1 |  if_e	add	fp, #12
23188     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2318c     02 2A 66 A0 |  if_e	shl	local07, #2
23190     A7 2A 42 AC |  if_e	wrbyte	local07, fp
23194     0C 4E 85 A1 |  if_e	sub	fp, #12
23198     0C 4E 05 F1 | 	add	fp, #12
2319c     A7 2A C2 FA | 	rdbyte	local07, fp
231a0     0C 4E 85 F1 | 	sub	fp, #12
231a4     0C 2A 06 F5 | 	and	local07, #12
231a8     0C 2A 0E F2 | 	cmp	local07, #12 wz
231ac     18 00 90 AD |  if_e	jmp	#LR__3677
231b0     0C 4E 05 F1 | 	add	fp, #12
231b4     A7 1E C2 FA | 	rdbyte	local01, fp
231b8     0C 4E 85 F1 | 	sub	fp, #12
231bc     03 1E 06 F5 | 	and	local01, #3
231c0     03 1E 0E F2 | 	cmp	local01, #3 wz
231c4     14 00 90 5D |  if_ne	jmp	#LR__3678
231c8                 | LR__3677
231c8     10 4E 05 F1 | 	add	fp, #16
231cc     A7 2A C2 FA | 	rdbyte	local07, fp
231d0     02 2A 46 F5 | 	or	local07, #2
231d4     A7 2A 42 FC | 	wrbyte	local07, fp
231d8     10 4E 85 F1 | 	sub	fp, #16
231dc                 | LR__3678
231dc     10 4E 05 F1 | 	add	fp, #16
231e0     A7 2A C2 FA | 	rdbyte	local07, fp
231e4     10 4E 85 F1 | 	sub	fp, #16
231e8     02 2A CE F7 | 	test	local07, #2 wz
231ec     48 00 90 5D |  if_ne	jmp	#LR__3679
231f0     0C 4E 05 F1 | 	add	fp, #12
231f4     A7 2A C2 FA | 	rdbyte	local07, fp
231f8     0C 4E 85 F1 | 	sub	fp, #12
231fc     01 2A CE F7 | 	test	local07, #1 wz
23200     10 4E 05 51 |  if_ne	add	fp, #16
23204     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
23208     10 2A 46 55 |  if_ne	or	local07, #16
2320c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
23210     10 4E 85 51 |  if_ne	sub	fp, #16
23214     0C 4E 05 F1 | 	add	fp, #12
23218     A7 2A C2 FA | 	rdbyte	local07, fp
2321c     0C 4E 85 F1 | 	sub	fp, #12
23220     04 2A CE F7 | 	test	local07, #4 wz
23224     10 4E 05 51 |  if_ne	add	fp, #16
23228     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2322c     08 2A 46 55 |  if_ne	or	local07, #8
23230     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
23234     10 4E 85 51 |  if_ne	sub	fp, #16
23238                 | LR__3679
23238     04 4E 05 F1 | 	add	fp, #4
2323c     A7 2A 02 FB | 	rdlong	local07, fp
23240     0C 4E 05 F1 | 	add	fp, #12
23244     A7 1E C2 FA | 	rdbyte	local01, fp
23248     10 4E 85 F1 | 	sub	fp, #16
2324c     2B 2A 06 F1 | 	add	local07, #43
23250     15 1F 42 FC | 	wrbyte	local01, local07
23254                 | ' 	}
23254                 | ' 
23254                 | ' 	dp->fn[ 11 ] = cf;
23254                 | ' 
23254                 | ' 	return FR_OK;
23254     00 FA 05 F6 | 	mov	result1, #0
23258                 | LR__3680
23258     A7 F0 03 F6 | 	mov	ptra, fp
2325c     B2 00 A0 FD | 	call	#popregs_
23260                 | _fatfs_cc_create_name_ret
23260     2D 00 64 FD | 	ret
23264                 | 
23264                 | _fatfs_cc_follow_path
23264     02 4A 05 F6 | 	mov	COUNT_, #2
23268     A8 00 A0 FD | 	call	#pushregs_
2326c     18 F0 07 F1 | 	add	ptra, #24
23270     04 4E 05 F1 | 	add	fp, #4
23274     A7 12 62 FC | 	wrlong	arg01, fp
23278     04 4E 05 F1 | 	add	fp, #4
2327c     A7 14 62 FC | 	wrlong	arg02, fp
23280     04 4E 85 F1 | 	sub	fp, #4
23284     A7 FA 01 FB | 	rdlong	result1, fp
23288     FD 1E 02 FB | 	rdlong	local01, result1
2328c     10 4E 05 F1 | 	add	fp, #16
23290     A7 1E 62 FC | 	wrlong	local01, fp
23294     14 4E 85 F1 | 	sub	fp, #20
23298     97 24 48 FB | 	callpa	#(@LR__3692-@LR__3690)>>2,fcache_load_ptr_
2329c                 | ' )
2329c                 | ' {
2329c                 | ' 	FRESULT res;
2329c                 | ' 	BYTE ns;
2329c                 | ' 	FATFS *fs = dp->obj.fs;
2329c                 | ' #line 3034 "ff.c"
2329c                 | ' 	{
2329c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2329c                 | LR__3690
2329c     08 4E 05 F1 | 	add	fp, #8
232a0     A7 1E 02 FB | 	rdlong	local01, fp
232a4     08 4E 85 F1 | 	sub	fp, #8
232a8     0F 1F C2 FA | 	rdbyte	local01, local01
232ac     2F 1E 0E F2 | 	cmp	local01, #47 wz
232b0     18 00 90 AD |  if_e	jmp	#LR__3691
232b4     08 4E 05 F1 | 	add	fp, #8
232b8     A7 1E 02 FB | 	rdlong	local01, fp
232bc     08 4E 85 F1 | 	sub	fp, #8
232c0     0F 1F C2 FA | 	rdbyte	local01, local01
232c4     5C 1E 0E F2 | 	cmp	local01, #92 wz
232c8     18 00 90 5D |  if_ne	jmp	#LR__3693
232cc                 | LR__3691
232cc     08 4E 05 F1 | 	add	fp, #8
232d0     A7 1E 02 FB | 	rdlong	local01, fp
232d4     01 1E 06 F1 | 	add	local01, #1
232d8     A7 1E 62 FC | 	wrlong	local01, fp
232dc     08 4E 85 F1 | 	sub	fp, #8
232e0     B8 FF 9F FD | 	jmp	#LR__3690
232e4                 | LR__3692
232e4                 | LR__3693
232e4     04 4E 05 F1 | 	add	fp, #4
232e8     A7 1E 02 FB | 	rdlong	local01, fp
232ec     08 1E 06 F1 | 	add	local01, #8
232f0     0F 01 68 FC | 	wrlong	#0, local01
232f4     04 4E 05 F1 | 	add	fp, #4
232f8     A7 1E 02 FB | 	rdlong	local01, fp
232fc     08 4E 85 F1 | 	sub	fp, #8
23300     0F 1F C2 FA | 	rdbyte	local01, local01
23304     20 1E 16 F2 | 	cmp	local01, #32 wc
23308     30 00 90 3D |  if_ae	jmp	#LR__3694
2330c     04 4E 05 F1 | 	add	fp, #4
23310     A7 1E 02 FB | 	rdlong	local01, fp
23314     2B 1E 06 F1 | 	add	local01, #43
23318     0F 01 49 FC | 	wrbyte	#128, local01
2331c     A7 12 02 FB | 	rdlong	arg01, fp
23320     04 4E 85 F1 | 	sub	fp, #4
23324     00 14 06 F6 | 	mov	arg02, #0
23328     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2332c     0C 4E 05 F1 | 	add	fp, #12
23330     A7 FA 61 FC | 	wrlong	result1, fp
23334     0C 4E 85 F1 | 	sub	fp, #12
23338     1C 01 90 FD | 	jmp	#LR__3698
2333c                 | LR__3694
2333c                 | ' 		for (;;) {
2333c                 | LR__3695
2333c     04 4E 05 F1 | 	add	fp, #4
23340     A7 12 02 FB | 	rdlong	arg01, fp
23344     04 4E 05 F1 | 	add	fp, #4
23348     A7 14 02 F6 | 	mov	arg02, fp
2334c     08 4E 85 F1 | 	sub	fp, #8
23350     14 F6 BF FD | 	call	#_fatfs_cc_create_name
23354     0C 4E 05 F1 | 	add	fp, #12
23358     A7 FA 61 FC | 	wrlong	result1, fp
2335c     00 FA 4D F2 | 	cmps	result1, #0 wz
23360     0C 4E 85 F1 | 	sub	fp, #12
23364     F0 00 90 5D |  if_ne	jmp	#LR__3697
23368     04 4E 05 F1 | 	add	fp, #4
2336c     A7 12 02 FB | 	rdlong	arg01, fp
23370     04 4E 85 F1 | 	sub	fp, #4
23374     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
23378     0C 4E 05 F1 | 	add	fp, #12
2337c     A7 FA 61 FC | 	wrlong	result1, fp
23380     08 4E 85 F1 | 	sub	fp, #8
23384     A7 1E 02 FB | 	rdlong	local01, fp
23388     2B 1E 06 F1 | 	add	local01, #43
2338c     0F 1F C2 FA | 	rdbyte	local01, local01
23390     0C 4E 05 F1 | 	add	fp, #12
23394     A7 1E 42 FC | 	wrbyte	local01, fp
23398     04 4E 85 F1 | 	sub	fp, #4
2339c     A7 1E 0A FB | 	rdlong	local01, fp wz
233a0     0C 4E 85 F1 | 	sub	fp, #12
233a4     34 00 90 AD |  if_e	jmp	#LR__3696
233a8     0C 4E 05 F1 | 	add	fp, #12
233ac     A7 1E 02 FB | 	rdlong	local01, fp
233b0     0C 4E 85 F1 | 	sub	fp, #12
233b4     04 1E 0E F2 | 	cmp	local01, #4 wz
233b8     9C 00 90 5D |  if_ne	jmp	#LR__3697
233bc     10 4E 05 F1 | 	add	fp, #16
233c0     A7 1E C2 FA | 	rdbyte	local01, fp
233c4     10 4E 85 F1 | 	sub	fp, #16
233c8     04 1E CE F7 | 	test	local01, #4 wz
233cc     0C 4E 05 A1 |  if_e	add	fp, #12
233d0     A7 0A 68 AC |  if_e	wrlong	#5, fp
233d4     0C 4E 85 A1 |  if_e	sub	fp, #12
233d8                 | ' 					}
233d8                 | ' 				}
233d8                 | ' 				break;
233d8     7C 00 90 FD | 	jmp	#LR__3697
233dc                 | LR__3696
233dc     10 4E 05 F1 | 	add	fp, #16
233e0     A7 1E C2 FA | 	rdbyte	local01, fp
233e4     10 4E 85 F1 | 	sub	fp, #16
233e8     04 1E CE F7 | 	test	local01, #4 wz
233ec     68 00 90 5D |  if_ne	jmp	#LR__3697
233f0     04 4E 05 F1 | 	add	fp, #4
233f4     A7 1E 02 FB | 	rdlong	local01, fp
233f8     04 4E 85 F1 | 	sub	fp, #4
233fc     06 1E 06 F1 | 	add	local01, #6
23400     0F 1F C2 FA | 	rdbyte	local01, local01
23404     10 1E CE F7 | 	test	local01, #16 wz
23408     0C 4E 05 A1 |  if_e	add	fp, #12
2340c     A7 0A 68 AC |  if_e	wrlong	#5, fp
23410     0C 4E 85 A1 |  if_e	sub	fp, #12
23414                 | ' 				res = FR_NO_PATH; break;
23414     40 00 90 AD |  if_e	jmp	#LR__3697
23418     04 4E 05 F1 | 	add	fp, #4
2341c     A7 20 02 FB | 	rdlong	local02, fp
23420     10 1F 02 F6 | 	mov	local01, local02
23424     10 4E 05 F1 | 	add	fp, #16
23428     A7 14 02 FB | 	rdlong	arg02, fp
2342c     0A 13 02 F6 | 	mov	arg01, arg02
23430     34 14 06 F1 | 	add	arg02, #52
23434     14 4E 85 F1 | 	sub	fp, #20
23438     10 20 06 F1 | 	add	local02, #16
2343c     10 21 02 FB | 	rdlong	local02, local02
23440     FF 21 06 F5 | 	and	local02, #511
23444     10 15 02 F1 | 	add	arg02, local02
23448     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2344c     08 1E 06 F1 | 	add	local01, #8
23450     0F FB 61 FC | 	wrlong	result1, local01
23454     E4 FE 9F FD | 	jmp	#LR__3695
23458                 | LR__3697
23458                 | LR__3698
23458                 | ' 			}
23458                 | ' #line 3090 "ff.c"
23458                 | ' 			{
23458                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
23458                 | ' 			}
23458                 | ' 		}
23458                 | ' 	}
23458                 | ' 
23458                 | ' 	return res;
23458     0C 4E 05 F1 | 	add	fp, #12
2345c     A7 FA 01 FB | 	rdlong	result1, fp
23460     0C 4E 85 F1 | 	sub	fp, #12
23464     A7 F0 03 F6 | 	mov	ptra, fp
23468     B2 00 A0 FD | 	call	#popregs_
2346c                 | _fatfs_cc_follow_path_ret
2346c     2D 00 64 FD | 	ret
23470                 | 
23470                 | _fatfs_cc_get_ldnumber
23470     01 00 66 F6 | 	neg	_var01, #1
23474     09 03 0A FB | 	rdlong	_var02, arg01 wz
23478     01 05 02 F6 | 	mov	_var03, _var02
2347c     01 FA 65 A6 |  if_e	neg	result1, #1
23480     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
23484     97 10 48 FB | 	callpa	#(@LR__3701-@LR__3700)>>2,fcache_load_ptr_
23488                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
23488                 | LR__3700
23488     02 07 C2 FA | 	rdbyte	_var04, _var03
2348c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
23490     20 FA 15 F2 | 	cmp	result1, #32 wc
23494     01 04 06 F1 | 	add	_var03, #1
23498     03 09 02 36 |  if_ae	mov	_var05, _var04
2349c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
234a0     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
234a4     E0 FF 9F 1D |  if_a	jmp	#LR__3700
234a8                 | LR__3701
234a8     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
234ac     3A 06 0E F2 | 	cmp	_var04, #58 wz
234b0     40 00 90 5D |  if_ne	jmp	#LR__3703
234b4     01 0A 06 F6 | 	mov	_var06, #1
234b8     01 09 C2 FA | 	rdbyte	_var05, _var02
234bc     30 08 16 F2 | 	cmp	_var05, #48 wc
234c0     1C 00 90 CD |  if_b	jmp	#LR__3702
234c4     01 09 C2 FA | 	rdbyte	_var05, _var02
234c8     3A 08 16 F2 | 	cmp	_var05, #58 wc
234cc     01 0D 02 C6 |  if_b	mov	_var07, _var02
234d0     02 0C 06 C1 |  if_b	add	_var07, #2
234d4     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
234d8     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
234dc     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
234e0                 | LR__3702
234e0     01 0A 56 F2 | 	cmps	_var06, #1 wc
234e4     05 01 02 C6 |  if_b	mov	_var01, _var06
234e8     09 05 62 CC |  if_b	wrlong	_var03, arg01
234ec                 | ' 			vol = i;
234ec                 | ' 			*path = tt;
234ec                 | ' 		}
234ec                 | ' 		return vol;
234ec     00 FB 01 F6 | 	mov	result1, _var01
234f0     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
234f4                 | LR__3703
234f4                 | ' 	}
234f4                 | ' #line 3170 "ff.c"
234f4                 | ' 	vol = 0;
234f4                 | ' 
234f4                 | ' 	return vol;
234f4     00 FA 05 F6 | 	mov	result1, #0
234f8                 | _fatfs_cc_get_ldnumber_ret
234f8     2D 00 64 FD | 	ret
234fc                 | 
234fc                 | _fatfs_cc_check_fs
234fc     04 4A 05 F6 | 	mov	COUNT_, #4
23500     A8 00 A0 FD | 	call	#pushregs_
23504     09 1F 02 F6 | 	mov	local01, arg01
23508     03 1E 06 F1 | 	add	local01, #3
2350c     0F 01 48 FC | 	wrbyte	#0, local01
23510     2D 1E 06 F1 | 	add	local01, #45
23514     FF FF FF FF 
23518     0F FF 6B FC | 	wrlong	##-1, local01
2351c     30 1E 86 F1 | 	sub	local01, #48
23520     0F 13 02 F6 | 	mov	arg01, local01
23524     18 D5 BF FD | 	call	#_fatfs_cc_move_window
23528     00 FA 0D F2 | 	cmp	result1, #0 wz
2352c     04 FA 05 56 |  if_ne	mov	result1, #4
23530     94 01 90 5D |  if_ne	jmp	#LR__3714
23534     34 1E 06 F1 | 	add	local01, #52
23538     0F 13 02 F6 | 	mov	arg01, local01
2353c     FE 13 06 F1 | 	add	arg01, #510
23540                 | ' {
23540                 | ' 
23540                 | ' 	return *((WORD*)ptr);
23540     09 21 E2 FA | 	rdword	local02, arg01
23544     0F 23 C2 FA | 	rdbyte	local03, local01
23548     34 1E 86 F1 | 	sub	local01, #52
2354c     11 25 E2 F8 | 	getbyte	local04, local03, #0
23550     EB 24 0E F2 | 	cmp	local04, #235 wz
23554     11 17 02 56 |  if_ne	mov	arg03, local03
23558     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2355c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
23560     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
23564     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
23568     44 01 90 5D |  if_ne	jmp	#LR__3713
2356c     10 25 32 F9 | 	getword	local04, local02, #0
23570     55 00 00 FF 
23574     55 24 0E F2 | 	cmp	local04, ##43605 wz
23578     2C 00 90 5D |  if_ne	jmp	#LR__3710
2357c     34 1E 06 F1 | 	add	local01, #52
23580     0F 13 02 F6 | 	mov	arg01, local01
23584     34 1E 86 F1 | 	sub	local01, #52
23588     52 12 06 F1 | 	add	arg01, #82
2358c     44 01 00 FF 
23590     C4 15 06 F6 | 	mov	arg02, ##@LR__4304
23594     08 16 06 F6 | 	mov	arg03, #8
23598     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2359c     00 FA 0D F2 | 	cmp	result1, #0 wz
235a0                 | ' 			return 0;
235a0     00 FA 05 A6 |  if_e	mov	result1, #0
235a4     20 01 90 AD |  if_e	jmp	#LR__3714
235a8                 | LR__3710
235a8     34 1E 06 F1 | 	add	local01, #52
235ac     0F 13 02 F6 | 	mov	arg01, local01
235b0     0B 12 06 F1 | 	add	arg01, #11
235b4                 | ' {
235b4                 | ' 
235b4                 | ' 	return *((WORD*)ptr);
235b4     09 FB E1 FA | 	rdword	result1, arg01
235b8     0D 1E 06 F1 | 	add	local01, #13
235bc     0F 23 C2 FA | 	rdbyte	local03, local01
235c0     41 1E 86 F1 | 	sub	local01, #65
235c4     FD 24 32 F9 | 	getword	local04, result1, #0
235c8     FD 14 32 F9 | 	getword	arg02, result1, #0
235cc     01 14 86 F1 | 	sub	arg02, #1
235d0     0A 25 CA F7 | 	test	local04, arg02 wz
235d4     D8 00 90 5D |  if_ne	jmp	#LR__3712
235d8     FD 14 32 F9 | 	getword	arg02, result1, #0
235dc     01 00 00 FF 
235e0     00 14 16 F2 | 	cmp	arg02, ##512 wc
235e4     C8 00 90 CD |  if_b	jmp	#LR__3712
235e8     FD 14 32 F9 | 	getword	arg02, result1, #0
235ec     01 00 00 FF 
235f0     01 14 16 F2 | 	cmp	arg02, ##513 wc
235f4     B8 00 90 3D |  if_ae	jmp	#LR__3712
235f8     11 13 02 F6 | 	mov	arg01, local03
235fc     07 12 4E F7 | 	zerox	arg01, #7 wz
23600     AC 00 90 AD |  if_e	jmp	#LR__3712
23604     11 13 E2 F8 | 	getbyte	arg01, local03, #0
23608     11 23 E2 F8 | 	getbyte	local03, local03, #0
2360c     01 22 86 F1 | 	sub	local03, #1
23610     11 13 CA F7 | 	test	arg01, local03 wz
23614     98 00 90 5D |  if_ne	jmp	#LR__3712
23618     34 1E 06 F1 | 	add	local01, #52
2361c     0F 13 02 F6 | 	mov	arg01, local01
23620     34 1E 86 F1 | 	sub	local01, #52
23624     0E 12 06 F1 | 	add	arg01, #14
23628                 | ' {
23628                 | ' 
23628                 | ' 	return *((WORD*)ptr);
23628     09 FB E9 FA | 	rdword	result1, arg01 wz
2362c     80 00 90 AD |  if_e	jmp	#LR__3712
23630     44 1E 06 F1 | 	add	local01, #68
23634     0F 13 C2 FA | 	rdbyte	arg01, local01
23638     44 1E 86 F1 | 	sub	local01, #68
2363c     01 12 86 F1 | 	sub	arg01, #1
23640     02 12 16 F2 | 	cmp	arg01, #2 wc
23644     68 00 90 3D |  if_ae	jmp	#LR__3712
23648     34 1E 06 F1 | 	add	local01, #52
2364c     0F 13 02 F6 | 	mov	arg01, local01
23650     34 1E 86 F1 | 	sub	local01, #52
23654     11 12 06 F1 | 	add	arg01, #17
23658                 | ' {
23658                 | ' 
23658                 | ' 	return *((WORD*)ptr);
23658     09 FB E9 FA | 	rdword	result1, arg01 wz
2365c     50 00 90 AD |  if_e	jmp	#LR__3712
23660     34 1E 06 F1 | 	add	local01, #52
23664     0F 13 02 F6 | 	mov	arg01, local01
23668     34 1E 86 F1 | 	sub	local01, #52
2366c     13 12 06 F1 | 	add	arg01, #19
23670                 | ' {
23670                 | ' 
23670                 | ' 	return *((WORD*)ptr);
23670     09 FB E1 FA | 	rdword	result1, arg01
23674     FD 22 32 F9 | 	getword	local03, result1, #0
23678     80 22 16 F2 | 	cmp	local03, #128 wc
2367c     20 00 90 3D |  if_ae	jmp	#LR__3711
23680     34 1E 06 F1 | 	add	local01, #52
23684     0F 13 02 F6 | 	mov	arg01, local01
23688     34 1E 86 F1 | 	sub	local01, #52
2368c     20 12 06 F1 | 	add	arg01, #32
23690                 | ' {
23690                 | ' 
23690                 | ' 	return *((DWORD*)ptr);
23690     09 FB 01 FB | 	rdlong	result1, arg01
23694     80 00 00 FF 
23698     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2369c     10 00 90 CD |  if_b	jmp	#LR__3712
236a0                 | LR__3711
236a0     4A 1E 06 F1 | 	add	local01, #74
236a4                 | ' {
236a4                 | ' 
236a4                 | ' 	return *((WORD*)ptr);
236a4     0F FB E9 FA | 	rdword	result1, local01 wz
236a8                 | ' 			&& b != 0 && (b & (b - 1)) == 0
236a8                 | ' 			&& ld_word(fs->win +  14 ) != 0
236a8                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
236a8                 | ' 			&& ld_word(fs->win +  17 ) != 0
236a8                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
236a8                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
236a8                 | ' 				return 0;
236a8     00 FA 05 56 |  if_ne	mov	result1, #0
236ac     18 00 90 5D |  if_ne	jmp	#LR__3714
236b0                 | LR__3712
236b0                 | LR__3713
236b0                 | ' 		}
236b0                 | ' 	}
236b0                 | ' 	return sign == 0xAA55 ? 2 : 3;
236b0     10 23 32 F9 | 	getword	local03, local02, #0
236b4     55 00 00 FF 
236b8     55 22 0E F2 | 	cmp	local03, ##43605 wz
236bc     02 24 06 A6 |  if_e	mov	local04, #2
236c0     03 24 06 56 |  if_ne	mov	local04, #3
236c4     12 FB 01 F6 | 	mov	result1, local04
236c8                 | LR__3714
236c8     A7 F0 03 F6 | 	mov	ptra, fp
236cc     B2 00 A0 FD | 	call	#popregs_
236d0                 | _fatfs_cc_check_fs_ret
236d0     2D 00 64 FD | 	ret
236d4                 | 
236d4                 | _fatfs_cc_find_volume
236d4     05 4A 05 F6 | 	mov	COUNT_, #5
236d8     A8 00 A0 FD | 	call	#pushregs_
236dc     24 F0 07 F1 | 	add	ptra, #36
236e0     09 1F 02 F6 | 	mov	local01, arg01
236e4     0A 21 02 F6 | 	mov	local02, arg02
236e8     0F 13 02 F6 | 	mov	arg01, local01
236ec     00 14 06 F6 | 	mov	arg02, #0
236f0     08 FE BF FD | 	call	#_fatfs_cc_check_fs
236f4     02 FA 0D F2 | 	cmp	result1, #2 wz
236f8     0C 00 90 AD |  if_e	jmp	#LR__3720
236fc     03 FA 15 F2 | 	cmp	result1, #3 wc
23700     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23704     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3728
23708                 | LR__3720
23708                 | ' 	for (i = 0; i < 4; i++) {
23708     00 22 06 F6 | 	mov	local03, #0
2370c     97 26 48 FB | 	callpa	#(@LR__3722-@LR__3721)>>2,fcache_load_ptr_
23710                 | LR__3721
23710     04 22 16 F2 | 	cmp	local03, #4 wc
23714     44 00 90 3D |  if_ae	jmp	#LR__3723
23718     11 25 02 F6 | 	mov	local04, local03
2371c     02 24 66 F0 | 	shl	local04, #2
23720     14 4E 05 F1 | 	add	fp, #20
23724     A7 24 02 F1 | 	add	local04, fp
23728     34 1E 06 F1 | 	add	local01, #52
2372c     0F 13 02 F6 | 	mov	arg01, local01
23730     34 1E 86 F1 | 	sub	local01, #52
23734     BE 13 06 F1 | 	add	arg01, #446
23738     11 15 02 F6 | 	mov	arg02, local03
2373c     04 14 66 F0 | 	shl	arg02, #4
23740     0A 13 02 F1 | 	add	arg01, arg02
23744     08 12 06 F1 | 	add	arg01, #8
23748                 | ' {
23748                 | ' 
23748                 | ' 	return *((DWORD*)ptr);
23748     09 FB 01 FB | 	rdlong	result1, arg01
2374c     14 4E 85 F1 | 	sub	fp, #20
23750     12 FB 61 FC | 	wrlong	result1, local04
23754     01 22 06 F1 | 	add	local03, #1
23758     B4 FF 9F FD | 	jmp	#LR__3721
2375c                 | LR__3722
2375c                 | LR__3723
2375c     00 20 0E F2 | 	cmp	local02, #0 wz
23760     10 25 02 56 |  if_ne	mov	local04, local02
23764     01 24 86 51 |  if_ne	sub	local04, #1
23768     00 24 06 A6 |  if_e	mov	local04, #0
2376c     12 23 02 F6 | 	mov	local03, local04
23770                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
23770                 | ' 	}
23770                 | ' 	i = part ? part - 1 : 0;
23770                 | ' 	do {
23770                 | LR__3724
23770     11 25 02 F6 | 	mov	local04, local03
23774     02 24 66 F0 | 	shl	local04, #2
23778     14 4E 05 F1 | 	add	fp, #20
2377c     A7 24 02 F1 | 	add	local04, fp
23780     12 25 0A FB | 	rdlong	local04, local04 wz
23784     14 4E 85 F1 | 	sub	fp, #20
23788     28 00 90 AD |  if_e	jmp	#LR__3725
2378c     11 25 02 F6 | 	mov	local04, local03
23790     02 24 66 F0 | 	shl	local04, #2
23794     14 4E 05 F1 | 	add	fp, #20
23798     A7 24 02 F1 | 	add	local04, fp
2379c     12 15 02 FB | 	rdlong	arg02, local04
237a0     0F 13 02 F6 | 	mov	arg01, local01
237a4     14 4E 85 F1 | 	sub	fp, #20
237a8     50 FD BF FD | 	call	#_fatfs_cc_check_fs
237ac     FD 24 02 F6 | 	mov	local04, result1
237b0     04 00 90 FD | 	jmp	#LR__3726
237b4                 | LR__3725
237b4     03 24 06 F6 | 	mov	local04, #3
237b8                 | LR__3726
237b8     12 27 02 F6 | 	mov	local05, local04
237bc     00 20 0E F2 | 	cmp	local02, #0 wz
237c0     02 26 16 A2 |  if_e	cmp	local05, #2 wc
237c4     0C 00 90 8D |  if_c_and_z	jmp	#LR__3727
237c8     01 22 06 A1 |  if_e	add	local03, #1
237cc     04 22 16 A2 |  if_e	cmp	local03, #4 wc
237d0     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3724
237d4                 | LR__3727
237d4                 | ' 	return fmt;
237d4     13 FB 01 F6 | 	mov	result1, local05
237d8                 | LR__3728
237d8     A7 F0 03 F6 | 	mov	ptra, fp
237dc     B2 00 A0 FD | 	call	#popregs_
237e0                 | _fatfs_cc_find_volume_ret
237e0     2D 00 64 FD | 	ret
237e4                 | 
237e4                 | _fatfs_cc_mount_volume
237e4     0B 4A 05 F6 | 	mov	COUNT_, #11
237e8     A8 00 A0 FD | 	call	#pushregs_
237ec     0A 1F 02 F6 | 	mov	local01, arg02
237f0     0B 21 02 F6 | 	mov	local02, arg03
237f4     0F 01 68 FC | 	wrlong	#0, local01
237f8     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
237fc     FD 22 02 F6 | 	mov	local03, result1
23800     00 22 56 F2 | 	cmps	local03, #0 wc
23804     0B FA 05 C6 |  if_b	mov	result1, #11
23808     3C 05 90 CD |  if_b	jmp	#LR__3740
2380c     11 17 02 F6 | 	mov	arg03, local03
23810     02 16 66 F0 | 	shl	arg03, #2
23814     F2 16 02 F1 | 	add	arg03, objptr
23818     0B 25 0A FB | 	rdlong	local04, arg03 wz
2381c     0C FA 05 A6 |  if_e	mov	result1, #12
23820     24 05 90 AD |  if_e	jmp	#LR__3740
23824     0F 25 62 FC | 	wrlong	local04, local01
23828     10 21 E2 F8 | 	getbyte	local02, local02, #0
2382c     FE 20 06 F5 | 	and	local02, #254
23830     12 17 CA FA | 	rdbyte	arg03, local04 wz
23834     4C 00 90 AD |  if_e	jmp	#LR__3731
23838     01 24 06 F1 | 	add	local04, #1
2383c     12 13 CA FA | 	rdbyte	arg01, local04 wz
23840     01 24 86 F1 | 	sub	local04, #1
23844     01 FA 05 56 |  if_ne	mov	result1, #1
23848                 | ' 
23848                 | ' 	return Stat;
23848     01 00 00 AF 
2384c     20 E4 05 A1 |  if_e	add	objptr, ##544
23850     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23854     01 00 00 AF 
23858     20 E4 85 A1 |  if_e	sub	objptr, ##544
2385c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
23860     01 16 CE F7 | 	test	arg03, #1 wz
23864     1C 00 90 5D |  if_ne	jmp	#LR__3730
23868     00 20 0E F2 | 	cmp	local02, #0 wz
2386c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
23870     04 FA CD 57 |  if_ne	test	result1, #4 wz
23874                 | ' 				return FR_WRITE_PROTECTED;
23874     0A FA 05 56 |  if_ne	mov	result1, #10
23878     CC 04 90 5D |  if_ne	jmp	#LR__3740
2387c                 | ' 			}
2387c                 | ' 			return FR_OK;
2387c     00 FA 05 F6 | 	mov	result1, #0
23880     C4 04 90 FD | 	jmp	#LR__3740
23884                 | LR__3730
23884                 | LR__3731
23884     12 01 48 FC | 	wrbyte	#0, local04
23888     01 24 06 F1 | 	add	local04, #1
2388c     12 23 42 FC | 	wrbyte	local03, local04
23890     12 13 C2 FA | 	rdbyte	arg01, local04
23894     01 24 86 F1 | 	sub	local04, #1
23898     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2389c     FD 16 02 F6 | 	mov	arg03, result1
238a0     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
238a4     01 26 CE F7 | 	test	local05, #1 wz
238a8                 | ' 		return FR_NOT_READY;
238a8     03 FA 05 56 |  if_ne	mov	result1, #3
238ac     98 04 90 5D |  if_ne	jmp	#LR__3740
238b0     00 20 0E F2 | 	cmp	local02, #0 wz
238b4     0B 27 02 56 |  if_ne	mov	local05, arg03
238b8     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
238bc     04 26 CE 57 |  if_ne	test	local05, #4 wz
238c0                 | ' 		return FR_WRITE_PROTECTED;
238c0     0A FA 05 56 |  if_ne	mov	result1, #10
238c4     80 04 90 5D |  if_ne	jmp	#LR__3740
238c8     12 13 02 F6 | 	mov	arg01, local04
238cc     00 14 06 F6 | 	mov	arg02, #0
238d0     00 FE BF FD | 	call	#_fatfs_cc_find_volume
238d4     FD 12 02 F6 | 	mov	arg01, result1
238d8     04 12 0E F2 | 	cmp	arg01, #4 wz
238dc     01 FA 05 A6 |  if_e	mov	result1, #1
238e0     64 04 90 AD |  if_e	jmp	#LR__3740
238e4     02 12 16 F2 | 	cmp	arg01, #2 wc
238e8     0D FA 05 36 |  if_ae	mov	result1, #13
238ec     58 04 90 3D |  if_ae	jmp	#LR__3740
238f0     30 24 06 F1 | 	add	local04, #48
238f4     12 29 02 FB | 	rdlong	local06, local04
238f8     04 24 06 F1 | 	add	local04, #4
238fc     12 13 02 F6 | 	mov	arg01, local04
23900     34 24 86 F1 | 	sub	local04, #52
23904     0B 12 06 F1 | 	add	arg01, #11
23908                 | ' {
23908                 | ' 
23908                 | ' 	return *((WORD*)ptr);
23908     09 FB E1 FA | 	rdword	result1, arg01
2390c     01 00 00 FF 
23910     00 FA 0D F2 | 	cmp	result1, ##512 wz
23914     0D FA 05 56 |  if_ne	mov	result1, #13
23918     2C 04 90 5D |  if_ne	jmp	#LR__3740
2391c     34 24 06 F1 | 	add	local04, #52
23920     12 13 02 F6 | 	mov	arg01, local04
23924     34 24 86 F1 | 	sub	local04, #52
23928     16 12 06 F1 | 	add	arg01, #22
2392c                 | ' {
2392c                 | ' 
2392c                 | ' 	return *((WORD*)ptr);
2392c     09 FB E1 FA | 	rdword	result1, arg01
23930     FD 2A 0A F6 | 	mov	local07, result1 wz
23934     18 00 90 5D |  if_ne	jmp	#LR__3732
23938     34 24 06 F1 | 	add	local04, #52
2393c     12 13 02 F6 | 	mov	arg01, local04
23940     34 24 86 F1 | 	sub	local04, #52
23944     24 12 06 F1 | 	add	arg01, #36
23948                 | ' {
23948                 | ' 
23948                 | ' 	return *((DWORD*)ptr);
23948     09 FB 01 FB | 	rdlong	result1, arg01
2394c     FD 2A 02 F6 | 	mov	local07, result1
23950                 | LR__3732
23950     1C 24 06 F1 | 	add	local04, #28
23954     12 2B 62 FC | 	wrlong	local07, local04
23958     28 24 06 F1 | 	add	local04, #40
2395c     12 27 C2 FA | 	rdbyte	local05, local04
23960     42 24 86 F1 | 	sub	local04, #66
23964     12 27 42 FC | 	wrbyte	local05, local04
23968     12 27 C2 FA | 	rdbyte	local05, local04
2396c     02 24 86 F1 | 	sub	local04, #2
23970     01 26 0E F2 | 	cmp	local05, #1 wz
23974     02 24 06 51 |  if_ne	add	local04, #2
23978     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2397c     02 24 86 51 |  if_ne	sub	local04, #2
23980     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
23984     0D FA 05 56 |  if_ne	mov	result1, #13
23988     BC 03 90 5D |  if_ne	jmp	#LR__3740
2398c     02 24 06 F1 | 	add	local04, #2
23990     12 27 C2 FA | 	rdbyte	local05, local04
23994     13 2B 02 FD | 	qmul	local07, local05
23998     3F 24 06 F1 | 	add	local04, #63
2399c     12 27 C2 FA | 	rdbyte	local05, local04
239a0     37 24 86 F1 | 	sub	local04, #55
239a4     12 27 52 FC | 	wrword	local05, local04
239a8     12 27 EA FA | 	rdword	local05, local04 wz
239ac     0A 24 86 F1 | 	sub	local04, #10
239b0     18 2A 62 FD | 	getqx	local07
239b4     20 00 90 AD |  if_e	jmp	#LR__3733
239b8     0A 24 06 F1 | 	add	local04, #10
239bc     12 27 E2 FA | 	rdword	local05, local04
239c0     13 23 32 F9 | 	getword	local03, local05, #0
239c4     0A 24 86 F1 | 	sub	local04, #10
239c8     13 27 32 F9 | 	getword	local05, local05, #0
239cc     01 26 86 F1 | 	sub	local05, #1
239d0     13 23 CA F7 | 	test	local03, local05 wz
239d4     08 00 90 AD |  if_e	jmp	#LR__3734
239d8                 | LR__3733
239d8     0D FA 05 F6 | 	mov	result1, #13
239dc     68 03 90 FD | 	jmp	#LR__3740
239e0                 | LR__3734
239e0     34 24 06 F1 | 	add	local04, #52
239e4     12 13 02 F6 | 	mov	arg01, local04
239e8     11 12 06 F1 | 	add	arg01, #17
239ec                 | ' {
239ec                 | ' 
239ec                 | ' 	return *((WORD*)ptr);
239ec     09 FB E1 FA | 	rdword	result1, arg01
239f0     2C 24 86 F1 | 	sub	local04, #44
239f4     12 FB 51 FC | 	wrword	result1, local04
239f8     12 27 E2 FA | 	rdword	local05, local04
239fc     08 24 86 F1 | 	sub	local04, #8
23a00     13 13 52 F6 | 	abs	arg01, local05 wc
23a04     09 13 42 F8 | 	getnib	arg01, arg01, #0
23a08     09 13 8A F6 | 	negc	arg01, arg01 wz
23a0c     0D FA 05 56 |  if_ne	mov	result1, #13
23a10     34 03 90 5D |  if_ne	jmp	#LR__3740
23a14     34 24 06 F1 | 	add	local04, #52
23a18     12 13 02 F6 | 	mov	arg01, local04
23a1c     34 24 86 F1 | 	sub	local04, #52
23a20     13 12 06 F1 | 	add	arg01, #19
23a24                 | ' {
23a24                 | ' 
23a24                 | ' 	return *((WORD*)ptr);
23a24     09 FB E1 FA | 	rdword	result1, arg01
23a28     FD 2C 0A F6 | 	mov	local08, result1 wz
23a2c     34 24 06 A1 |  if_e	add	local04, #52
23a30     12 13 02 A6 |  if_e	mov	arg01, local04
23a34     34 24 86 A1 |  if_e	sub	local04, #52
23a38     20 12 06 A1 |  if_e	add	arg01, #32
23a3c                 | ' {
23a3c                 | ' 
23a3c                 | ' 	return *((DWORD*)ptr);
23a3c     09 2D 02 AB |  if_e	rdlong	local08, arg01
23a40     34 24 06 F1 | 	add	local04, #52
23a44     12 13 02 F6 | 	mov	arg01, local04
23a48     34 24 86 F1 | 	sub	local04, #52
23a4c     0E 12 06 F1 | 	add	arg01, #14
23a50                 | ' {
23a50                 | ' 
23a50                 | ' 	return *((WORD*)ptr);
23a50     09 FB E1 FA | 	rdword	result1, arg01
23a54     FD 12 02 F6 | 	mov	arg01, result1
23a58     09 27 02 F6 | 	mov	local05, arg01
23a5c     0F 26 4E F7 | 	zerox	local05, #15 wz
23a60     0D FA 05 A6 |  if_e	mov	result1, #13
23a64     E0 02 90 AD |  if_e	jmp	#LR__3740
23a68     09 2F 32 F9 | 	getword	local09, arg01, #0
23a6c     15 2F 02 F1 | 	add	local09, local07
23a70     08 24 06 F1 | 	add	local04, #8
23a74     12 27 E2 FA | 	rdword	local05, local04
23a78     08 24 86 F1 | 	sub	local04, #8
23a7c     13 27 52 F6 | 	abs	local05, local05 wc
23a80     04 26 46 F0 | 	shr	local05, #4
23a84     13 2F 82 F3 | 	sumc	local09, local05
23a88     17 2D 12 F2 | 	cmp	local08, local09 wc
23a8c     0D FA 05 C6 |  if_b	mov	result1, #13
23a90     B4 02 90 CD |  if_b	jmp	#LR__3740
23a94     17 2D 82 F1 | 	sub	local08, local09
23a98     0A 24 06 F1 | 	add	local04, #10
23a9c     12 27 E2 FA | 	rdword	local05, local04
23aa0     13 2D 12 FD | 	qdiv	local08, local05
23aa4     0A 24 86 F1 | 	sub	local04, #10
23aa8     18 26 62 FD | 	getqx	local05
23aac     00 26 0E F2 | 	cmp	local05, #0 wz
23ab0     0D FA 05 A6 |  if_e	mov	result1, #13
23ab4     90 02 90 AD |  if_e	jmp	#LR__3740
23ab8     00 30 06 F6 | 	mov	local10, #0
23abc     FF FF 07 FF 
23ac0     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
23ac4     03 30 06 C6 |  if_b	mov	local10, #3
23ac8     7F 00 00 FF 
23acc     F6 27 16 F2 | 	cmp	local05, ##65526 wc
23ad0     02 30 06 C6 |  if_b	mov	local10, #2
23ad4     07 00 00 FF 
23ad8     F6 27 16 F2 | 	cmp	local05, ##4086 wc
23adc     01 30 06 C6 |  if_b	mov	local10, #1
23ae0     00 30 0E F2 | 	cmp	local10, #0 wz
23ae4     0D FA 05 A6 |  if_e	mov	result1, #13
23ae8     5C 02 90 AD |  if_e	jmp	#LR__3740
23aec     02 26 06 F1 | 	add	local05, #2
23af0     18 24 06 F1 | 	add	local04, #24
23af4     12 27 62 FC | 	wrlong	local05, local04
23af8     08 24 06 F1 | 	add	local04, #8
23afc     12 29 62 FC | 	wrlong	local06, local04
23b00     14 27 02 F6 | 	mov	local05, local06
23b04     09 13 32 F9 | 	getword	arg01, arg01, #0
23b08     09 27 02 F1 | 	add	local05, arg01
23b0c     04 24 06 F1 | 	add	local04, #4
23b10     12 27 62 FC | 	wrlong	local05, local04
23b14     14 27 02 F6 | 	mov	local05, local06
23b18     17 27 02 F1 | 	add	local05, local09
23b1c     08 24 06 F1 | 	add	local04, #8
23b20     12 27 62 FC | 	wrlong	local05, local04
23b24     2C 24 86 F1 | 	sub	local04, #44
23b28     03 30 0E F2 | 	cmp	local10, #3 wz
23b2c     5C 00 90 5D |  if_ne	jmp	#LR__3735
23b30     34 24 06 F1 | 	add	local04, #52
23b34     12 13 02 F6 | 	mov	arg01, local04
23b38     34 24 86 F1 | 	sub	local04, #52
23b3c     2A 12 06 F1 | 	add	arg01, #42
23b40                 | ' {
23b40                 | ' 
23b40                 | ' 	return *((WORD*)ptr);
23b40     09 FB E9 FA | 	rdword	result1, arg01 wz
23b44     0D FA 05 56 |  if_ne	mov	result1, #13
23b48     FC 01 90 5D |  if_ne	jmp	#LR__3740
23b4c     08 24 06 F1 | 	add	local04, #8
23b50     12 27 EA FA | 	rdword	local05, local04 wz
23b54     08 24 86 F1 | 	sub	local04, #8
23b58     0D FA 05 56 |  if_ne	mov	result1, #13
23b5c     E8 01 90 5D |  if_ne	jmp	#LR__3740
23b60     34 24 06 F1 | 	add	local04, #52
23b64     12 13 02 F6 | 	mov	arg01, local04
23b68     2C 12 06 F1 | 	add	arg01, #44
23b6c                 | ' {
23b6c                 | ' 
23b6c                 | ' 	return *((DWORD*)ptr);
23b6c     09 FB 01 FB | 	rdlong	result1, arg01
23b70     0C 24 86 F1 | 	sub	local04, #12
23b74     12 FB 61 FC | 	wrlong	result1, local04
23b78     10 24 86 F1 | 	sub	local04, #16
23b7c     12 33 02 FB | 	rdlong	local11, local04
23b80     18 24 86 F1 | 	sub	local04, #24
23b84     02 32 66 F0 | 	shl	local11, #2
23b88     6C 00 90 FD | 	jmp	#LR__3737
23b8c                 | LR__3735
23b8c     08 24 06 F1 | 	add	local04, #8
23b90     12 27 EA FA | 	rdword	local05, local04 wz
23b94     08 24 86 F1 | 	sub	local04, #8
23b98     0D FA 05 A6 |  if_e	mov	result1, #13
23b9c     A8 01 90 AD |  if_e	jmp	#LR__3740
23ba0     24 24 06 F1 | 	add	local04, #36
23ba4     12 27 02 FB | 	rdlong	local05, local04
23ba8     15 27 02 F1 | 	add	local05, local07
23bac     04 24 06 F1 | 	add	local04, #4
23bb0     12 27 62 FC | 	wrlong	local05, local04
23bb4     28 24 86 F1 | 	sub	local04, #40
23bb8     02 30 0E F2 | 	cmp	local10, #2 wz
23bbc     18 24 06 A1 |  if_e	add	local04, #24
23bc0     12 27 02 AB |  if_e	rdlong	local05, local04
23bc4     18 24 86 A1 |  if_e	sub	local04, #24
23bc8     01 26 66 A0 |  if_e	shl	local05, #1
23bcc     24 00 90 AD |  if_e	jmp	#LR__3736
23bd0     18 24 06 F1 | 	add	local04, #24
23bd4     12 33 02 FB | 	rdlong	local11, local04
23bd8     19 27 02 F6 | 	mov	local05, local11
23bdc     01 26 66 F0 | 	shl	local05, #1
23be0     19 27 02 F1 | 	add	local05, local11
23be4     01 26 46 F0 | 	shr	local05, #1
23be8     18 24 86 F1 | 	sub	local04, #24
23bec     01 32 06 F5 | 	and	local11, #1
23bf0     19 27 02 F1 | 	add	local05, local11
23bf4                 | LR__3736
23bf4     13 33 02 F6 | 	mov	local11, local05
23bf8                 | LR__3737
23bf8     FF 33 06 F1 | 	add	local11, #511
23bfc     09 32 46 F0 | 	shr	local11, #9
23c00     1C 24 06 F1 | 	add	local04, #28
23c04     12 17 02 FB | 	rdlong	arg03, local04
23c08     1C 24 86 F1 | 	sub	local04, #28
23c0c     19 17 12 F2 | 	cmp	arg03, local11 wc
23c10     0D FA 05 C6 |  if_b	mov	result1, #13
23c14     30 01 90 CD |  if_b	jmp	#LR__3740
23c18     14 24 06 F1 | 	add	local04, #20
23c1c     FF FF FF FF 
23c20     12 FF 6B FC | 	wrlong	##-1, local04
23c24     04 24 86 F1 | 	sub	local04, #4
23c28     FF FF FF FF 
23c2c     12 FF 6B FC | 	wrlong	##-1, local04
23c30     0C 24 86 F1 | 	sub	local04, #12
23c34     12 01 49 FC | 	wrbyte	#128, local04
23c38     04 24 86 F1 | 	sub	local04, #4
23c3c     03 30 0E F2 | 	cmp	local10, #3 wz
23c40     D0 00 90 5D |  if_ne	jmp	#LR__3739
23c44     34 24 06 F1 | 	add	local04, #52
23c48     12 13 02 F6 | 	mov	arg01, local04
23c4c     34 24 86 F1 | 	sub	local04, #52
23c50     30 12 06 F1 | 	add	arg01, #48
23c54                 | ' {
23c54                 | ' 
23c54                 | ' 	return *((WORD*)ptr);
23c54     09 FB E1 FA | 	rdword	result1, arg01
23c58     FD 26 32 F9 | 	getword	local05, result1, #0
23c5c     01 26 0E F2 | 	cmp	local05, #1 wz
23c60     B0 00 90 5D |  if_ne	jmp	#LR__3739
23c64     01 28 06 F1 | 	add	local06, #1
23c68     12 13 02 F6 | 	mov	arg01, local04
23c6c     14 15 02 F6 | 	mov	arg02, local06
23c70     CC CD BF FD | 	call	#_fatfs_cc_move_window
23c74     00 FA 0D F2 | 	cmp	result1, #0 wz
23c78     98 00 90 5D |  if_ne	jmp	#LR__3739
23c7c     04 24 06 F1 | 	add	local04, #4
23c80     12 01 48 FC | 	wrbyte	#0, local04
23c84     30 24 06 F1 | 	add	local04, #48
23c88     12 13 02 F6 | 	mov	arg01, local04
23c8c     34 24 86 F1 | 	sub	local04, #52
23c90     FE 13 06 F1 | 	add	arg01, #510
23c94                 | ' {
23c94                 | ' 
23c94                 | ' 	return *((WORD*)ptr);
23c94     09 FB E1 FA | 	rdword	result1, arg01
23c98     FD 26 32 F9 | 	getword	local05, result1, #0
23c9c     55 00 00 FF 
23ca0     55 26 0E F2 | 	cmp	local05, ##43605 wz
23ca4     34 24 06 A1 |  if_e	add	local04, #52
23ca8     12 13 02 A6 |  if_e	mov	arg01, local04
23cac     34 24 86 A1 |  if_e	sub	local04, #52
23cb0                 | ' {
23cb0                 | ' 
23cb0                 | ' 	return *((DWORD*)ptr);
23cb0     09 FB 01 AB |  if_e	rdlong	result1, arg01
23cb4     A9 B0 20 AF 
23cb8     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
23cbc     54 00 90 5D |  if_ne	jmp	#LR__3738
23cc0     34 24 06 F1 | 	add	local04, #52
23cc4     12 13 02 F6 | 	mov	arg01, local04
23cc8     34 24 86 F1 | 	sub	local04, #52
23ccc     E4 13 06 F1 | 	add	arg01, #484
23cd0                 | ' {
23cd0                 | ' 
23cd0                 | ' 	return *((DWORD*)ptr);
23cd0     09 FB 01 FB | 	rdlong	result1, arg01
23cd4     B9 A0 30 FF 
23cd8     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
23cdc     34 00 90 5D |  if_ne	jmp	#LR__3738
23ce0     34 24 06 F1 | 	add	local04, #52
23ce4     12 13 02 F6 | 	mov	arg01, local04
23ce8     E8 13 06 F1 | 	add	arg01, #488
23cec                 | ' {
23cec                 | ' 
23cec                 | ' 	return *((DWORD*)ptr);
23cec     09 FB 01 FB | 	rdlong	result1, arg01
23cf0     20 24 86 F1 | 	sub	local04, #32
23cf4     12 FB 61 FC | 	wrlong	result1, local04
23cf8     20 24 06 F1 | 	add	local04, #32
23cfc     12 13 02 F6 | 	mov	arg01, local04
23d00     EC 13 06 F1 | 	add	arg01, #492
23d04                 | ' {
23d04                 | ' 
23d04                 | ' 	return *((DWORD*)ptr);
23d04     09 FB 01 FB | 	rdlong	result1, arg01
23d08     24 24 86 F1 | 	sub	local04, #36
23d0c     12 FB 61 FC | 	wrlong	result1, local04
23d10     10 24 86 F1 | 	sub	local04, #16
23d14                 | LR__3738
23d14                 | LR__3739
23d14     12 31 42 FC | 	wrbyte	local10, local04
23d18     04 E4 05 F1 | 	add	objptr, #4
23d1c     F2 26 E2 FA | 	rdword	local05, objptr
23d20     01 26 06 F1 | 	add	local05, #1
23d24     F2 26 52 FC | 	wrword	local05, objptr
23d28     F2 32 E2 FA | 	rdword	local11, objptr
23d2c     06 24 06 F1 | 	add	local04, #6
23d30     12 33 52 FC | 	wrword	local11, local04
23d34     04 E4 05 F1 | 	add	objptr, #4
23d38     06 24 06 F1 | 	add	local04, #6
23d3c     12 E5 61 FC | 	wrlong	objptr, local04
23d40                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
23d40                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
23d40                 | ' 			{
23d40                 | ' 
23d40                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
23d40                 | ' 
23d40                 | ' 
23d40                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
23d40                 | ' 
23d40                 | ' 			}
23d40                 | ' 		}
23d40                 | ' 
23d40                 | ' 
23d40                 | ' 	}
23d40                 | ' 
23d40                 | ' 	fs->fs_type = (BYTE)fmt;
23d40                 | ' 	fs->id = ++Fsid;
23d40                 | ' 
23d40                 | ' 	fs->lfnbuf = LfnBuf;
23d40                 | ' #line 3567 "ff.c"
23d40                 | ' 	return FR_OK;
23d40     00 FA 05 F6 | 	mov	result1, #0
23d44     08 E4 85 F1 | 	sub	objptr, #8
23d48                 | LR__3740
23d48     A7 F0 03 F6 | 	mov	ptra, fp
23d4c     B2 00 A0 FD | 	call	#popregs_
23d50                 | _fatfs_cc_mount_volume_ret
23d50     2D 00 64 FD | 	ret
23d54                 | 
23d54                 | _fatfs_cc_validate
23d54     09 01 0A F6 | 	mov	_var01, arg01 wz
23d58     09 02 06 F6 | 	mov	_var02, #9
23d5c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
23d60     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
23d64     50 00 90 AD |  if_e	jmp	#LR__3750
23d68     04 00 06 F1 | 	add	_var01, #4
23d6c     00 07 E2 FA | 	rdword	_var04, _var01
23d70     04 00 86 F1 | 	sub	_var01, #4
23d74     00 13 02 FB | 	rdlong	arg01, _var01
23d78     06 12 06 F1 | 	add	arg01, #6
23d7c     09 FB E1 FA | 	rdword	result1, arg01
23d80     FD 06 0A F2 | 	cmp	_var04, result1 wz
23d84     30 00 90 5D |  if_ne	jmp	#LR__3750
23d88     00 07 02 FB | 	rdlong	_var04, _var01
23d8c     01 06 06 F1 | 	add	_var04, #1
23d90     03 13 CA FA | 	rdbyte	arg01, _var04 wz
23d94     01 FA 05 56 |  if_ne	mov	result1, #1
23d98                 | ' 
23d98                 | ' 	return Stat;
23d98     01 00 00 AF 
23d9c     20 E4 05 A1 |  if_e	add	objptr, ##544
23da0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23da4     01 00 00 AF 
23da8     20 E4 85 A1 |  if_e	sub	objptr, ##544
23dac     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
23db0     01 04 CE F7 | 	test	_var03, #1 wz
23db4     00 02 06 A6 |  if_e	mov	_var02, #0
23db8                 | LR__3750
23db8     00 02 0E F2 | 	cmp	_var02, #0 wz
23dbc     00 05 02 AB |  if_e	rdlong	_var03, _var01
23dc0     00 04 06 56 |  if_ne	mov	_var03, #0
23dc4     0A 05 62 FC | 	wrlong	_var03, arg02
23dc8                 | ' 			res = FR_OK;
23dc8                 | ' 		}
23dc8                 | ' 
23dc8                 | ' 	}
23dc8                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
23dc8                 | ' 	return res;
23dc8     01 FB 01 F6 | 	mov	result1, _var02
23dcc                 | _fatfs_cc_validate_ret
23dcc     2D 00 64 FD | 	ret
23dd0                 | 
23dd0                 | _fatfs_cc_f_mount
23dd0     01 4A 05 F6 | 	mov	COUNT_, #1
23dd4     A8 00 A0 FD | 	call	#pushregs_
23dd8     20 F0 07 F1 | 	add	ptra, #32
23ddc     04 4E 05 F1 | 	add	fp, #4
23de0     A7 12 62 FC | 	wrlong	arg01, fp
23de4     04 4E 05 F1 | 	add	fp, #4
23de8     A7 14 62 FC | 	wrlong	arg02, fp
23dec     04 4E 05 F1 | 	add	fp, #4
23df0     A7 16 42 FC | 	wrbyte	arg03, fp
23df4     04 4E 85 F1 | 	sub	fp, #4
23df8     A7 16 02 FB | 	rdlong	arg03, fp
23dfc     14 4E 05 F1 | 	add	fp, #20
23e00     A7 16 62 FC | 	wrlong	arg03, fp
23e04     A7 12 02 F6 | 	mov	arg01, fp
23e08     1C 4E 85 F1 | 	sub	fp, #28
23e0c     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
23e10     14 4E 05 F1 | 	add	fp, #20
23e14     A7 FA 61 FC | 	wrlong	result1, fp
23e18     14 4E 85 F1 | 	sub	fp, #20
23e1c     00 FA 55 F2 | 	cmps	result1, #0 wc
23e20     0B FA 05 C6 |  if_b	mov	result1, #11
23e24     C0 00 90 CD |  if_b	jmp	#LR__3761
23e28     14 4E 05 F1 | 	add	fp, #20
23e2c     A7 16 02 FB | 	rdlong	arg03, fp
23e30     02 16 66 F0 | 	shl	arg03, #2
23e34     F2 16 02 F1 | 	add	arg03, objptr
23e38     0B 17 0A FB | 	rdlong	arg03, arg03 wz
23e3c     04 4E 85 F1 | 	sub	fp, #4
23e40     A7 16 62 FC | 	wrlong	arg03, fp
23e44     10 4E 85 F1 | 	sub	fp, #16
23e48     28 00 90 AD |  if_e	jmp	#LR__3760
23e4c     10 4E 05 F1 | 	add	fp, #16
23e50     A7 16 02 FB | 	rdlong	arg03, fp
23e54     10 4E 85 F1 | 	sub	fp, #16
23e58     01 16 06 F1 | 	add	arg03, #1
23e5c     0B 13 C2 FA | 	rdbyte	arg01, arg03
23e60     1C 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
23e64     10 4E 05 F1 | 	add	fp, #16
23e68     A7 16 02 FB | 	rdlong	arg03, fp
23e6c     10 4E 85 F1 | 	sub	fp, #16
23e70     0B 01 48 FC | 	wrbyte	#0, arg03
23e74                 | LR__3760
23e74     04 4E 05 F1 | 	add	fp, #4
23e78     A7 1E 0A FB | 	rdlong	local01, fp wz
23e7c     04 4E 85 F1 | 	sub	fp, #4
23e80     04 4E 05 51 |  if_ne	add	fp, #4
23e84     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23e88     04 4E 85 51 |  if_ne	sub	fp, #4
23e8c     0F 01 48 5C |  if_ne	wrbyte	#0, local01
23e90     14 4E 05 F1 | 	add	fp, #20
23e94     A7 1E 02 FB | 	rdlong	local01, fp
23e98     02 1E 66 F0 | 	shl	local01, #2
23e9c     F2 1E 02 F1 | 	add	local01, objptr
23ea0     10 4E 85 F1 | 	sub	fp, #16
23ea4     A7 16 02 FB | 	rdlong	arg03, fp
23ea8     0F 17 62 FC | 	wrlong	arg03, local01
23eac     08 4E 05 F1 | 	add	fp, #8
23eb0     A7 1E CA FA | 	rdbyte	local01, fp wz
23eb4     0C 4E 85 F1 | 	sub	fp, #12
23eb8     00 FA 05 A6 |  if_e	mov	result1, #0
23ebc     28 00 90 AD |  if_e	jmp	#LR__3761
23ec0     08 4E 05 F1 | 	add	fp, #8
23ec4     A7 12 02 F6 | 	mov	arg01, fp
23ec8     04 4E 85 F1 | 	sub	fp, #4
23ecc     A7 14 02 F6 | 	mov	arg02, fp
23ed0     04 4E 85 F1 | 	sub	fp, #4
23ed4     00 16 06 F6 | 	mov	arg03, #0
23ed8     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
23edc     18 4E 05 F1 | 	add	fp, #24
23ee0     A7 FA 61 FC | 	wrlong	result1, fp
23ee4                 | ' 
23ee4                 | ' 	res = mount_volume(&path, &fs, 0);
23ee4                 | ' 	return res ;
23ee4     18 4E 85 F1 | 	sub	fp, #24
23ee8                 | LR__3761
23ee8     A7 F0 03 F6 | 	mov	ptra, fp
23eec     B2 00 A0 FD | 	call	#popregs_
23ef0                 | _fatfs_cc_f_mount_ret
23ef0     2D 00 64 FD | 	ret
23ef4                 | 
23ef4                 | _fatfs_cc_f_open
23ef4     02 4A 05 F6 | 	mov	COUNT_, #2
23ef8     A8 00 A0 FD | 	call	#pushregs_
23efc     60 F0 07 F1 | 	add	ptra, #96
23f00     04 4E 05 F1 | 	add	fp, #4
23f04     A7 12 62 FC | 	wrlong	arg01, fp
23f08     04 4E 05 F1 | 	add	fp, #4
23f0c     A7 14 62 FC | 	wrlong	arg02, fp
23f10     04 4E 05 F1 | 	add	fp, #4
23f14     A7 16 42 FC | 	wrbyte	arg03, fp
23f18     08 4E 85 F1 | 	sub	fp, #8
23f1c     A7 18 0A FB | 	rdlong	arg04, fp wz
23f20     04 4E 85 F1 | 	sub	fp, #4
23f24     09 FA 05 A6 |  if_e	mov	result1, #9
23f28     98 06 90 AD |  if_e	jmp	#LR__3787
23f2c     0C 4E 05 F1 | 	add	fp, #12
23f30     A7 18 C2 FA | 	rdbyte	arg04, fp
23f34     3F 18 06 F5 | 	and	arg04, #63
23f38     A7 18 42 FC | 	wrbyte	arg04, fp
23f3c     04 4E 85 F1 | 	sub	fp, #4
23f40     A7 12 02 F6 | 	mov	arg01, fp
23f44     3C 4E 05 F1 | 	add	fp, #60
23f48     A7 14 02 F6 | 	mov	arg02, fp
23f4c     38 4E 85 F1 | 	sub	fp, #56
23f50     A7 16 C2 FA | 	rdbyte	arg03, fp
23f54     0C 4E 85 F1 | 	sub	fp, #12
23f58     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
23f5c     10 4E 05 F1 | 	add	fp, #16
23f60     A7 FA 61 FC | 	wrlong	result1, fp
23f64     10 4E 85 F1 | 	sub	fp, #16
23f68     00 FA 0D F2 | 	cmp	result1, #0 wz
23f6c     2C 06 90 5D |  if_ne	jmp	#LR__3786
23f70     44 4E 05 F1 | 	add	fp, #68
23f74     A7 18 02 FB | 	rdlong	arg04, fp
23f78     30 4E 85 F1 | 	sub	fp, #48
23f7c     A7 18 62 FC | 	wrlong	arg04, fp
23f80     A7 12 02 F6 | 	mov	arg01, fp
23f84     0C 4E 85 F1 | 	sub	fp, #12
23f88     A7 1E 02 FB | 	rdlong	local01, fp
23f8c     08 4E 85 F1 | 	sub	fp, #8
23f90     0F 15 02 F6 | 	mov	arg02, local01
23f94     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
23f98     10 4E 05 F1 | 	add	fp, #16
23f9c     A7 FA 61 FC | 	wrlong	result1, fp
23fa0     10 4E 85 F1 | 	sub	fp, #16
23fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
23fa8     1C 00 90 5D |  if_ne	jmp	#LR__3770
23fac     3F 4E 05 F1 | 	add	fp, #63
23fb0     A7 18 C2 FA | 	rdbyte	arg04, fp
23fb4     3F 4E 85 F1 | 	sub	fp, #63
23fb8     80 18 CE F7 | 	test	arg04, #128 wz
23fbc     10 4E 05 51 |  if_ne	add	fp, #16
23fc0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
23fc4     10 4E 85 51 |  if_ne	sub	fp, #16
23fc8                 | LR__3770
23fc8     0C 4E 05 F1 | 	add	fp, #12
23fcc     A7 18 C2 FA | 	rdbyte	arg04, fp
23fd0     0C 4E 85 F1 | 	sub	fp, #12
23fd4     1C 18 CE F7 | 	test	arg04, #28 wz
23fd8     F0 01 90 AD |  if_e	jmp	#LR__3775
23fdc     10 4E 05 F1 | 	add	fp, #16
23fe0     A7 1E 0A FB | 	rdlong	local01, fp wz
23fe4     10 4E 85 F1 | 	sub	fp, #16
23fe8     48 00 90 AD |  if_e	jmp	#LR__3772
23fec     10 4E 05 F1 | 	add	fp, #16
23ff0     A7 18 02 FB | 	rdlong	arg04, fp
23ff4     10 4E 85 F1 | 	sub	fp, #16
23ff8     04 18 0E F2 | 	cmp	arg04, #4 wz
23ffc     1C 00 90 5D |  if_ne	jmp	#LR__3771
24000     14 4E 05 F1 | 	add	fp, #20
24004     A7 12 02 F6 | 	mov	arg01, fp
24008     14 4E 85 F1 | 	sub	fp, #20
2400c     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
24010     10 4E 05 F1 | 	add	fp, #16
24014     A7 FA 61 FC | 	wrlong	result1, fp
24018     10 4E 85 F1 | 	sub	fp, #16
2401c                 | LR__3771
2401c     0C 4E 05 F1 | 	add	fp, #12
24020     A7 1E C2 FA | 	rdbyte	local01, fp
24024     08 1E 46 F5 | 	or	local01, #8
24028     A7 1E 42 FC | 	wrbyte	local01, fp
2402c     0C 4E 85 F1 | 	sub	fp, #12
24030     3C 00 90 FD | 	jmp	#LR__3774
24034                 | LR__3772
24034     1A 4E 05 F1 | 	add	fp, #26
24038     A7 1E C2 FA | 	rdbyte	local01, fp
2403c     1A 4E 85 F1 | 	sub	fp, #26
24040     11 1E CE F7 | 	test	local01, #17 wz
24044     10 4E 05 51 |  if_ne	add	fp, #16
24048     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2404c     10 4E 85 51 |  if_ne	sub	fp, #16
24050     1C 00 90 5D |  if_ne	jmp	#LR__3773
24054     0C 4E 05 F1 | 	add	fp, #12
24058     A7 1E C2 FA | 	rdbyte	local01, fp
2405c     0C 4E 85 F1 | 	sub	fp, #12
24060     04 1E CE F7 | 	test	local01, #4 wz
24064     10 4E 05 51 |  if_ne	add	fp, #16
24068     A7 10 68 5C |  if_ne	wrlong	#8, fp
2406c     10 4E 85 51 |  if_ne	sub	fp, #16
24070                 | LR__3773
24070                 | LR__3774
24070     10 4E 05 F1 | 	add	fp, #16
24074     A7 1E 0A FB | 	rdlong	local01, fp wz
24078     10 4E 85 F1 | 	sub	fp, #16
2407c     A8 01 90 5D |  if_ne	jmp	#LR__3778
24080     0C 4E 05 F1 | 	add	fp, #12
24084     A7 1E C2 FA | 	rdbyte	local01, fp
24088     0C 4E 85 F1 | 	sub	fp, #12
2408c     08 1E CE F7 | 	test	local01, #8 wz
24090     94 01 90 AD |  if_e	jmp	#LR__3778
24094     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
24098     54 4E 05 F1 | 	add	fp, #84
2409c     A7 FA 61 FC | 	wrlong	result1, fp
240a0     24 4E 85 F1 | 	sub	fp, #36
240a4     A7 12 02 FB | 	rdlong	arg01, fp
240a8     0E 12 06 F1 | 	add	arg01, #14
240ac     09 FB 61 FC | 	wrlong	result1, arg01
240b0     A7 12 02 FB | 	rdlong	arg01, fp
240b4     16 12 06 F1 | 	add	arg01, #22
240b8     24 4E 05 F1 | 	add	fp, #36
240bc     A7 14 02 FB | 	rdlong	arg02, fp
240c0     09 15 62 FC | 	wrlong	arg02, arg01
240c4     10 4E 85 F1 | 	sub	fp, #16
240c8     A7 12 02 FB | 	rdlong	arg01, fp
240cc     14 4E 85 F1 | 	sub	fp, #20
240d0     A7 14 02 FB | 	rdlong	arg02, fp
240d4     30 4E 85 F1 | 	sub	fp, #48
240d8     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
240dc     48 4E 05 F1 | 	add	fp, #72
240e0     A7 FA 61 FC | 	wrlong	result1, fp
240e4     18 4E 85 F1 | 	sub	fp, #24
240e8     A7 1E 02 FB | 	rdlong	local01, fp
240ec     0B 1E 06 F1 | 	add	local01, #11
240f0     0F 41 48 FC | 	wrbyte	#32, local01
240f4     14 4E 05 F1 | 	add	fp, #20
240f8     A7 12 02 FB | 	rdlong	arg01, fp
240fc     14 4E 85 F1 | 	sub	fp, #20
24100     A7 14 02 FB | 	rdlong	arg02, fp
24104     30 4E 85 F1 | 	sub	fp, #48
24108     00 16 06 F6 | 	mov	arg03, #0
2410c     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
24110     30 4E 05 F1 | 	add	fp, #48
24114     A7 12 02 FB | 	rdlong	arg01, fp
24118     1C 12 06 F1 | 	add	arg01, #28
2411c     09 01 68 FC | 	wrlong	#0, arg01
24120     14 4E 05 F1 | 	add	fp, #20
24124     A7 1E 02 FB | 	rdlong	local01, fp
24128     03 1E 06 F1 | 	add	local01, #3
2412c     0F 03 48 FC | 	wrbyte	#1, local01
24130     04 4E 05 F1 | 	add	fp, #4
24134     A7 1E 0A FB | 	rdlong	local01, fp wz
24138     48 4E 85 F1 | 	sub	fp, #72
2413c     E8 00 90 AD |  if_e	jmp	#LR__3778
24140     44 4E 05 F1 | 	add	fp, #68
24144     A7 1E 02 FB | 	rdlong	local01, fp
24148     30 1E 06 F1 | 	add	local01, #48
2414c     0F 1F 02 FB | 	rdlong	local01, local01
24150     14 4E 05 F1 | 	add	fp, #20
24154     A7 1E 62 FC | 	wrlong	local01, fp
24158     44 4E 85 F1 | 	sub	fp, #68
2415c     A7 12 02 F6 | 	mov	arg01, fp
24160     34 4E 05 F1 | 	add	fp, #52
24164     A7 14 02 FB | 	rdlong	arg02, fp
24168     48 4E 85 F1 | 	sub	fp, #72
2416c     00 16 06 F6 | 	mov	arg03, #0
24170     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
24174     10 4E 05 F1 | 	add	fp, #16
24178     A7 FA 61 FC | 	wrlong	result1, fp
2417c     10 4E 85 F1 | 	sub	fp, #16
24180     00 FA 0D F2 | 	cmp	result1, #0 wz
24184     A0 00 90 5D |  if_ne	jmp	#LR__3778
24188     44 4E 05 F1 | 	add	fp, #68
2418c     A7 12 02 FB | 	rdlong	arg01, fp
24190     14 4E 05 F1 | 	add	fp, #20
24194     A7 14 02 FB | 	rdlong	arg02, fp
24198     58 4E 85 F1 | 	sub	fp, #88
2419c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
241a0     10 4E 05 F1 | 	add	fp, #16
241a4     A7 FA 61 FC | 	wrlong	result1, fp
241a8     34 4E 05 F1 | 	add	fp, #52
241ac     A7 18 02 FB | 	rdlong	arg04, fp
241b0     04 4E 05 F1 | 	add	fp, #4
241b4     A7 1E 02 FB | 	rdlong	local01, fp
241b8     48 4E 85 F1 | 	sub	fp, #72
241bc     01 1E 86 F1 | 	sub	local01, #1
241c0     10 18 06 F1 | 	add	arg04, #16
241c4     0C 1F 62 FC | 	wrlong	local01, arg04
241c8     5C 00 90 FD | 	jmp	#LR__3778
241cc                 | LR__3775
241cc     10 4E 05 F1 | 	add	fp, #16
241d0     A7 18 0A FB | 	rdlong	arg04, fp wz
241d4     10 4E 85 F1 | 	sub	fp, #16
241d8     4C 00 90 5D |  if_ne	jmp	#LR__3777
241dc     1A 4E 05 F1 | 	add	fp, #26
241e0     A7 18 C2 FA | 	rdbyte	arg04, fp
241e4     1A 4E 85 F1 | 	sub	fp, #26
241e8     10 18 CE F7 | 	test	arg04, #16 wz
241ec     10 4E 05 51 |  if_ne	add	fp, #16
241f0     A7 08 68 5C |  if_ne	wrlong	#4, fp
241f4     10 4E 85 51 |  if_ne	sub	fp, #16
241f8     2C 00 90 5D |  if_ne	jmp	#LR__3776
241fc     0C 4E 05 F1 | 	add	fp, #12
24200     A7 18 C2 FA | 	rdbyte	arg04, fp
24204     0C 4E 85 F1 | 	sub	fp, #12
24208     02 18 CE F7 | 	test	arg04, #2 wz
2420c     1A 4E 05 51 |  if_ne	add	fp, #26
24210     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
24214     1A 4E 85 51 |  if_ne	sub	fp, #26
24218     01 1E CE 57 |  if_ne	test	local01, #1 wz
2421c     10 4E 05 51 |  if_ne	add	fp, #16
24220     A7 0E 68 5C |  if_ne	wrlong	#7, fp
24224     10 4E 85 51 |  if_ne	sub	fp, #16
24228                 | LR__3776
24228                 | LR__3777
24228                 | LR__3778
24228     10 4E 05 F1 | 	add	fp, #16
2422c     A7 1E 0A FB | 	rdlong	local01, fp wz
24230     10 4E 85 F1 | 	sub	fp, #16
24234     60 00 90 5D |  if_ne	jmp	#LR__3779
24238     0C 4E 05 F1 | 	add	fp, #12
2423c     A7 20 C2 FA | 	rdbyte	local02, fp
24240     0C 4E 85 F1 | 	sub	fp, #12
24244     08 20 CE F7 | 	test	local02, #8 wz
24248     0C 4E 05 51 |  if_ne	add	fp, #12
2424c     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
24250     40 20 46 55 |  if_ne	or	local02, #64
24254     A7 20 42 5C |  if_ne	wrbyte	local02, fp
24258     0C 4E 85 51 |  if_ne	sub	fp, #12
2425c     04 4E 05 F1 | 	add	fp, #4
24260     A7 20 02 FB | 	rdlong	local02, fp
24264     40 4E 05 F1 | 	add	fp, #64
24268     A7 1E 02 FB | 	rdlong	local01, fp
2426c     30 1E 06 F1 | 	add	local01, #48
24270     0F 1F 02 FB | 	rdlong	local01, local01
24274     20 20 06 F1 | 	add	local02, #32
24278     10 1F 62 FC | 	wrlong	local01, local02
2427c     40 4E 85 F1 | 	sub	fp, #64
24280     A7 20 02 FB | 	rdlong	local02, fp
24284     2C 4E 05 F1 | 	add	fp, #44
24288     A7 1E 02 FB | 	rdlong	local01, fp
2428c     30 4E 85 F1 | 	sub	fp, #48
24290     24 20 06 F1 | 	add	local02, #36
24294     10 1F 62 FC | 	wrlong	local01, local02
24298                 | LR__3779
24298     10 4E 05 F1 | 	add	fp, #16
2429c     A7 20 0A FB | 	rdlong	local02, fp wz
242a0     10 4E 85 F1 | 	sub	fp, #16
242a4     F4 02 90 5D |  if_ne	jmp	#LR__3785
242a8     04 4E 05 F1 | 	add	fp, #4
242ac     A7 20 02 FB | 	rdlong	local02, fp
242b0     40 4E 05 F1 | 	add	fp, #64
242b4     A7 12 02 FB | 	rdlong	arg01, fp
242b8     14 4E 85 F1 | 	sub	fp, #20
242bc     A7 14 02 FB | 	rdlong	arg02, fp
242c0     30 4E 85 F1 | 	sub	fp, #48
242c4     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
242c8     08 20 06 F1 | 	add	local02, #8
242cc     10 FB 61 FC | 	wrlong	result1, local02
242d0     04 4E 05 F1 | 	add	fp, #4
242d4     A7 20 02 FB | 	rdlong	local02, fp
242d8     2C 4E 05 F1 | 	add	fp, #44
242dc     A7 12 02 FB | 	rdlong	arg01, fp
242e0     1C 12 06 F1 | 	add	arg01, #28
242e4                 | ' {
242e4                 | ' 
242e4                 | ' 	return *((DWORD*)ptr);
242e4     09 FB 01 FB | 	rdlong	result1, arg01
242e8     0C 20 06 F1 | 	add	local02, #12
242ec     10 FB 61 FC | 	wrlong	result1, local02
242f0     2C 4E 85 F1 | 	sub	fp, #44
242f4     A7 20 02 FB | 	rdlong	local02, fp
242f8     40 4E 05 F1 | 	add	fp, #64
242fc     A7 1E 02 FB | 	rdlong	local01, fp
24300     10 1F 62 FC | 	wrlong	local01, local02
24304     40 4E 85 F1 | 	sub	fp, #64
24308     A7 20 02 FB | 	rdlong	local02, fp
2430c     40 4E 05 F1 | 	add	fp, #64
24310     A7 1E 02 FB | 	rdlong	local01, fp
24314     06 1E 06 F1 | 	add	local01, #6
24318     0F 1F E2 FA | 	rdword	local01, local01
2431c     04 20 06 F1 | 	add	local02, #4
24320     10 1F 52 FC | 	wrword	local01, local02
24324     40 4E 85 F1 | 	sub	fp, #64
24328     A7 20 02 FB | 	rdlong	local02, fp
2432c     08 4E 05 F1 | 	add	fp, #8
24330     A7 1E C2 FA | 	rdbyte	local01, fp
24334     10 20 06 F1 | 	add	local02, #16
24338     10 1F 42 FC | 	wrbyte	local01, local02
2433c     08 4E 85 F1 | 	sub	fp, #8
24340     A7 20 02 FB | 	rdlong	local02, fp
24344     11 20 06 F1 | 	add	local02, #17
24348     10 01 48 FC | 	wrbyte	#0, local02
2434c     A7 20 02 FB | 	rdlong	local02, fp
24350     1C 20 06 F1 | 	add	local02, #28
24354     10 01 68 FC | 	wrlong	#0, local02
24358     A7 20 02 FB | 	rdlong	local02, fp
2435c     14 20 06 F1 | 	add	local02, #20
24360     10 01 68 FC | 	wrlong	#0, local02
24364     A7 12 02 FB | 	rdlong	arg01, fp
24368     04 4E 85 F1 | 	sub	fp, #4
2436c     28 12 06 F1 | 	add	arg01, #40
24370     00 14 06 F6 | 	mov	arg02, #0
24374     09 16 C6 F9 | 	decod	arg03, #9
24378     98 00 A0 FD | 	call	#\builtin_bytefill_
2437c     0C 4E 05 F1 | 	add	fp, #12
24380     A7 20 C2 FA | 	rdbyte	local02, fp
24384     0C 4E 85 F1 | 	sub	fp, #12
24388     20 20 CE F7 | 	test	local02, #32 wz
2438c     0C 02 90 AD |  if_e	jmp	#LR__3784
24390     04 4E 05 F1 | 	add	fp, #4
24394     A7 1E 02 FB | 	rdlong	local01, fp
24398     04 4E 85 F1 | 	sub	fp, #4
2439c     0C 1E 06 F1 | 	add	local01, #12
243a0     0F 21 02 FB | 	rdlong	local02, local01
243a4     01 20 16 F2 | 	cmp	local02, #1 wc
243a8     F0 01 90 CD |  if_b	jmp	#LR__3784
243ac     04 4E 05 F1 | 	add	fp, #4
243b0     A7 1E 02 FB | 	rdlong	local01, fp
243b4     0F 21 02 F6 | 	mov	local02, local01
243b8     0C 1E 06 F1 | 	add	local01, #12
243bc     0F 1F 02 FB | 	rdlong	local01, local01
243c0     14 20 06 F1 | 	add	local02, #20
243c4     10 1F 62 FC | 	wrlong	local01, local02
243c8     40 4E 05 F1 | 	add	fp, #64
243cc     A7 20 02 FB | 	rdlong	local02, fp
243d0     0A 20 06 F1 | 	add	local02, #10
243d4     10 21 E2 FA | 	rdword	local02, local02
243d8     09 20 66 F0 | 	shl	local02, #9
243dc     08 4E 05 F1 | 	add	fp, #8
243e0     A7 20 62 FC | 	wrlong	local02, fp
243e4     48 4E 85 F1 | 	sub	fp, #72
243e8     A7 20 02 FB | 	rdlong	local02, fp
243ec     08 20 06 F1 | 	add	local02, #8
243f0     10 1F 02 FB | 	rdlong	local01, local02
243f4     4C 4E 05 F1 | 	add	fp, #76
243f8     A7 1E 62 FC | 	wrlong	local01, fp
243fc                 | ' 				fp->fptr = fp->obj.objsize;
243fc                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
243fc                 | ' 				clst = fp->obj.sclust;
243fc                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
243fc     4C 4E 85 F1 | 	sub	fp, #76
24400     A7 20 02 FB | 	rdlong	local02, fp
24404     0C 20 06 F1 | 	add	local02, #12
24408     10 1F 02 FB | 	rdlong	local01, local02
2440c     58 4E 05 F1 | 	add	fp, #88
24410     A7 1E 62 FC | 	wrlong	local01, fp
24414     5C 4E 85 F1 | 	sub	fp, #92
24418                 | LR__3780
24418     10 4E 05 F1 | 	add	fp, #16
2441c     A7 20 0A FB | 	rdlong	local02, fp wz
24420     10 4E 85 F1 | 	sub	fp, #16
24424     94 00 90 5D |  if_ne	jmp	#LR__3781
24428     5C 4E 05 F1 | 	add	fp, #92
2442c     A7 20 02 FB | 	rdlong	local02, fp
24430     10 4E 85 F1 | 	sub	fp, #16
24434     A7 1E 02 FB | 	rdlong	local01, fp
24438     4C 4E 85 F1 | 	sub	fp, #76
2443c     0F 21 1A F2 | 	cmp	local02, local01 wcz
24440     78 00 90 ED |  if_be	jmp	#LR__3781
24444     04 4E 05 F1 | 	add	fp, #4
24448     A7 12 02 FB | 	rdlong	arg01, fp
2444c     4C 4E 05 F1 | 	add	fp, #76
24450     A7 14 02 FB | 	rdlong	arg02, fp
24454     50 4E 85 F1 | 	sub	fp, #80
24458     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2445c     50 4E 05 F1 | 	add	fp, #80
24460     A7 FA 61 FC | 	wrlong	result1, fp
24464     50 4E 85 F1 | 	sub	fp, #80
24468     02 FA 15 F2 | 	cmp	result1, #2 wc
2446c     10 4E 05 C1 |  if_b	add	fp, #16
24470     A7 04 68 CC |  if_b	wrlong	#2, fp
24474     10 4E 85 C1 |  if_b	sub	fp, #16
24478     50 4E 05 F1 | 	add	fp, #80
2447c     A7 20 02 FB | 	rdlong	local02, fp
24480     50 4E 85 F1 | 	sub	fp, #80
24484     FF FF 7F FF 
24488     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2448c     10 4E 05 A1 |  if_e	add	fp, #16
24490     A7 02 68 AC |  if_e	wrlong	#1, fp
24494     10 4E 85 A1 |  if_e	sub	fp, #16
24498     5C 4E 05 F1 | 	add	fp, #92
2449c     A7 20 02 FB | 	rdlong	local02, fp
244a0     10 4E 85 F1 | 	sub	fp, #16
244a4     A7 1E 02 FB | 	rdlong	local01, fp
244a8     0F 21 82 F1 | 	sub	local02, local01
244ac     10 4E 05 F1 | 	add	fp, #16
244b0     A7 20 62 FC | 	wrlong	local02, fp
244b4     5C 4E 85 F1 | 	sub	fp, #92
244b8     5C FF 9F FD | 	jmp	#LR__3780
244bc                 | LR__3781
244bc     04 4E 05 F1 | 	add	fp, #4
244c0     A7 20 02 FB | 	rdlong	local02, fp
244c4     4C 4E 05 F1 | 	add	fp, #76
244c8     A7 1E 02 FB | 	rdlong	local01, fp
244cc     18 20 06 F1 | 	add	local02, #24
244d0     10 1F 62 FC | 	wrlong	local01, local02
244d4     40 4E 85 F1 | 	sub	fp, #64
244d8     A7 20 0A FB | 	rdlong	local02, fp wz
244dc     10 4E 85 F1 | 	sub	fp, #16
244e0     B8 00 90 5D |  if_ne	jmp	#LR__3783
244e4     5C 4E 05 F1 | 	add	fp, #92
244e8     A7 1E 02 FB | 	rdlong	local01, fp
244ec     5C 4E 85 F1 | 	sub	fp, #92
244f0     FF 1F CE F7 | 	test	local01, #511 wz
244f4     A4 00 90 AD |  if_e	jmp	#LR__3783
244f8     44 4E 05 F1 | 	add	fp, #68
244fc     A7 12 02 FB | 	rdlong	arg01, fp
24500     0C 4E 05 F1 | 	add	fp, #12
24504     A7 14 02 FB | 	rdlong	arg02, fp
24508     50 4E 85 F1 | 	sub	fp, #80
2450c     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
24510     58 4E 05 F1 | 	add	fp, #88
24514     A7 FA 61 FC | 	wrlong	result1, fp
24518     00 FA 4D F2 | 	cmps	result1, #0 wz
2451c     58 4E 85 F1 | 	sub	fp, #88
24520     10 4E 05 A1 |  if_e	add	fp, #16
24524     A7 04 68 AC |  if_e	wrlong	#2, fp
24528     10 4E 85 A1 |  if_e	sub	fp, #16
2452c     6C 00 90 AD |  if_e	jmp	#LR__3782
24530     04 4E 05 F1 | 	add	fp, #4
24534     A7 20 02 FB | 	rdlong	local02, fp
24538     54 4E 05 F1 | 	add	fp, #84
2453c     A7 1E 02 FB | 	rdlong	local01, fp
24540     04 4E 05 F1 | 	add	fp, #4
24544     A7 18 02 FB | 	rdlong	arg04, fp
24548     09 18 46 F0 | 	shr	arg04, #9
2454c     0C 1F 02 F1 | 	add	local01, arg04
24550     1C 20 06 F1 | 	add	local02, #28
24554     10 1F 62 FC | 	wrlong	local01, local02
24558     18 4E 85 F1 | 	sub	fp, #24
2455c     A7 20 02 FB | 	rdlong	local02, fp
24560     01 20 06 F1 | 	add	local02, #1
24564     10 13 C2 FA | 	rdbyte	arg01, local02
24568     40 4E 85 F1 | 	sub	fp, #64
2456c     A7 20 02 FB | 	rdlong	local02, fp
24570     10 15 02 F6 | 	mov	arg02, local02
24574     28 14 06 F1 | 	add	arg02, #40
24578     04 4E 85 F1 | 	sub	fp, #4
2457c     1C 20 06 F1 | 	add	local02, #28
24580     10 17 02 FB | 	rdlong	arg03, local02
24584     01 18 06 F6 | 	mov	arg04, #1
24588     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2458c     00 FA 0D F2 | 	cmp	result1, #0 wz
24590     10 4E 05 51 |  if_ne	add	fp, #16
24594     A7 02 68 5C |  if_ne	wrlong	#1, fp
24598     10 4E 85 51 |  if_ne	sub	fp, #16
2459c                 | LR__3782
2459c                 | LR__3783
2459c                 | LR__3784
2459c                 | LR__3785
2459c                 | LR__3786
2459c     10 4E 05 F1 | 	add	fp, #16
245a0     A7 20 0A FB | 	rdlong	local02, fp wz
245a4     10 4E 85 F1 | 	sub	fp, #16
245a8     04 4E 05 51 |  if_ne	add	fp, #4
245ac     A7 20 02 5B |  if_ne	rdlong	local02, fp
245b0     04 4E 85 51 |  if_ne	sub	fp, #4
245b4     10 01 68 5C |  if_ne	wrlong	#0, local02
245b8                 | ' 
245b8                 | ' 	return res ;
245b8     10 4E 05 F1 | 	add	fp, #16
245bc     A7 FA 01 FB | 	rdlong	result1, fp
245c0     10 4E 85 F1 | 	sub	fp, #16
245c4                 | LR__3787
245c4     A7 F0 03 F6 | 	mov	ptra, fp
245c8     B2 00 A0 FD | 	call	#popregs_
245cc                 | _fatfs_cc_f_open_ret
245cc     2D 00 64 FD | 	ret
245d0                 | 
245d0                 | _fatfs_cc_f_read
245d0     0E 4A 05 F6 | 	mov	COUNT_, #14
245d4     A8 00 A0 FD | 	call	#pushregs_
245d8     38 F0 07 F1 | 	add	ptra, #56
245dc     04 4E 05 F1 | 	add	fp, #4
245e0     A7 12 62 FC | 	wrlong	arg01, fp
245e4     04 4E 05 F1 | 	add	fp, #4
245e8     A7 14 62 FC | 	wrlong	arg02, fp
245ec     04 4E 05 F1 | 	add	fp, #4
245f0     A7 16 62 FC | 	wrlong	arg03, fp
245f4     04 4E 05 F1 | 	add	fp, #4
245f8     A7 18 62 FC | 	wrlong	arg04, fp
245fc     08 4E 85 F1 | 	sub	fp, #8
24600     A7 FA 01 FB | 	rdlong	result1, fp
24604     2C 4E 05 F1 | 	add	fp, #44
24608     A7 FA 61 FC | 	wrlong	result1, fp
2460c     24 4E 85 F1 | 	sub	fp, #36
24610     A7 FA 01 FB | 	rdlong	result1, fp
24614     FD 00 68 FC | 	wrlong	#0, result1
24618     0C 4E 85 F1 | 	sub	fp, #12
2461c     A7 12 02 FB | 	rdlong	arg01, fp
24620     14 4E 05 F1 | 	add	fp, #20
24624     A7 14 02 F6 | 	mov	arg02, fp
24628     18 4E 85 F1 | 	sub	fp, #24
2462c     24 F7 BF FD | 	call	#_fatfs_cc_validate
24630     14 4E 05 F1 | 	add	fp, #20
24634     A7 FA 61 FC | 	wrlong	result1, fp
24638     00 FA 4D F2 | 	cmps	result1, #0 wz
2463c     14 4E 85 F1 | 	sub	fp, #20
24640     20 00 90 5D |  if_ne	jmp	#LR__3790
24644     04 4E 05 F1 | 	add	fp, #4
24648     A7 14 02 FB | 	rdlong	arg02, fp
2464c     11 14 06 F1 | 	add	arg02, #17
24650     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
24654     10 4E 05 F1 | 	add	fp, #16
24658     A7 14 62 FC | 	wrlong	arg02, fp
2465c     14 4E 85 F1 | 	sub	fp, #20
24660     10 00 90 AD |  if_e	jmp	#LR__3791
24664                 | LR__3790
24664     14 4E 05 F1 | 	add	fp, #20
24668     A7 FA 01 FB | 	rdlong	result1, fp
2466c     14 4E 85 F1 | 	sub	fp, #20
24670     EC 05 90 FD | 	jmp	#LR__3810
24674                 | LR__3791
24674     04 4E 05 F1 | 	add	fp, #4
24678     A7 18 02 FB | 	rdlong	arg04, fp
2467c     04 4E 85 F1 | 	sub	fp, #4
24680     10 18 06 F1 | 	add	arg04, #16
24684     0C 19 C2 FA | 	rdbyte	arg04, arg04
24688     01 18 CE F7 | 	test	arg04, #1 wz
2468c     07 FA 05 A6 |  if_e	mov	result1, #7
24690     CC 05 90 AD |  if_e	jmp	#LR__3810
24694     04 4E 05 F1 | 	add	fp, #4
24698     A7 1E 02 FB | 	rdlong	local01, fp
2469c     0F 21 02 F6 | 	mov	local02, local01
246a0     0C 20 06 F1 | 	add	local02, #12
246a4     10 23 02 FB | 	rdlong	local03, local02
246a8     14 1E 06 F1 | 	add	local01, #20
246ac     0F 1F 02 FB | 	rdlong	local01, local01
246b0     0F 23 82 F1 | 	sub	local03, local01
246b4     20 4E 05 F1 | 	add	fp, #32
246b8     A7 22 62 FC | 	wrlong	local03, fp
246bc     18 4E 85 F1 | 	sub	fp, #24
246c0     A7 24 02 FB | 	rdlong	local04, fp
246c4     0C 4E 85 F1 | 	sub	fp, #12
246c8     11 25 1A F2 | 	cmp	local04, local03 wcz
246cc     24 4E 05 11 |  if_a	add	fp, #36
246d0     A7 24 02 1B |  if_a	rdlong	local04, fp
246d4     18 4E 85 11 |  if_a	sub	fp, #24
246d8     A7 24 62 1C |  if_a	wrlong	local04, fp
246dc     0C 4E 85 11 |  if_a	sub	fp, #12
246e0                 | ' 
246e0                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
246e0                 | LR__3792
246e0     0C 4E 05 F1 | 	add	fp, #12
246e4     A7 20 02 FB | 	rdlong	local02, fp
246e8     0C 4E 85 F1 | 	sub	fp, #12
246ec     10 25 02 F6 | 	mov	local04, local02
246f0     01 24 16 F2 | 	cmp	local04, #1 wc
246f4     64 05 90 CD |  if_b	jmp	#LR__3809
246f8     04 4E 05 F1 | 	add	fp, #4
246fc     A7 22 02 FB | 	rdlong	local03, fp
24700     04 4E 85 F1 | 	sub	fp, #4
24704     14 22 06 F1 | 	add	local03, #20
24708     11 23 02 FB | 	rdlong	local03, local03
2470c     FF 23 CE F7 | 	test	local03, #511 wz
24710     3C 04 90 5D |  if_ne	jmp	#LR__3807
24714     04 4E 05 F1 | 	add	fp, #4
24718     A7 1E 02 FB | 	rdlong	local01, fp
2471c     14 1E 06 F1 | 	add	local01, #20
24720     0F 23 02 FB | 	rdlong	local03, local01
24724     09 22 46 F0 | 	shr	local03, #9
24728     14 4E 05 F1 | 	add	fp, #20
2472c     A7 26 02 FB | 	rdlong	local05, fp
24730     13 29 02 F6 | 	mov	local06, local05
24734     0A 28 06 F1 | 	add	local06, #10
24738     14 2B E2 FA | 	rdword	local07, local06
2473c     0A 28 86 F1 | 	sub	local06, #10
24740     15 2D 32 F9 | 	getword	local08, local07, #0
24744     01 2C 86 F1 | 	sub	local08, #1
24748     16 23 0A F5 | 	and	local03, local08 wz
2474c     18 4E 05 F1 | 	add	fp, #24
24750     A7 22 62 FC | 	wrlong	local03, fp
24754     30 4E 85 F1 | 	sub	fp, #48
24758     E0 00 90 5D |  if_ne	jmp	#LR__3797
2475c     04 4E 05 F1 | 	add	fp, #4
24760     A7 22 02 FB | 	rdlong	local03, fp
24764     04 4E 85 F1 | 	sub	fp, #4
24768     14 22 06 F1 | 	add	local03, #20
2476c     11 23 0A FB | 	rdlong	local03, local03 wz
24770     20 00 90 5D |  if_ne	jmp	#LR__3793
24774     04 4E 05 F1 | 	add	fp, #4
24778     A7 22 02 FB | 	rdlong	local03, fp
2477c     08 22 06 F1 | 	add	local03, #8
24780     11 23 02 FB | 	rdlong	local03, local03
24784     18 4E 05 F1 | 	add	fp, #24
24788     A7 22 62 FC | 	wrlong	local03, fp
2478c     1C 4E 85 F1 | 	sub	fp, #28
24790     28 00 90 FD | 	jmp	#LR__3794
24794                 | LR__3793
24794     04 4E 05 F1 | 	add	fp, #4
24798     A7 2C 02 FB | 	rdlong	local08, fp
2479c     16 13 02 F6 | 	mov	arg01, local08
247a0     04 4E 85 F1 | 	sub	fp, #4
247a4     18 2C 06 F1 | 	add	local08, #24
247a8     16 15 02 FB | 	rdlong	arg02, local08
247ac     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
247b0     1C 4E 05 F1 | 	add	fp, #28
247b4     A7 FA 61 FC | 	wrlong	result1, fp
247b8     1C 4E 85 F1 | 	sub	fp, #28
247bc                 | LR__3794
247bc     1C 4E 05 F1 | 	add	fp, #28
247c0     A7 22 02 FB | 	rdlong	local03, fp
247c4     1C 4E 85 F1 | 	sub	fp, #28
247c8     02 22 16 F2 | 	cmp	local03, #2 wc
247cc     1C 00 90 3D |  if_ae	jmp	#LR__3795
247d0     04 4E 05 F1 | 	add	fp, #4
247d4     A7 22 02 FB | 	rdlong	local03, fp
247d8     04 4E 85 F1 | 	sub	fp, #4
247dc     11 22 06 F1 | 	add	local03, #17
247e0     11 05 48 FC | 	wrbyte	#2, local03
247e4     02 FA 05 F6 | 	mov	result1, #2
247e8     74 04 90 FD | 	jmp	#LR__3810
247ec                 | LR__3795
247ec     1C 4E 05 F1 | 	add	fp, #28
247f0     A7 22 02 FB | 	rdlong	local03, fp
247f4     1C 4E 85 F1 | 	sub	fp, #28
247f8     FF FF 7F FF 
247fc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
24800     1C 00 90 5D |  if_ne	jmp	#LR__3796
24804     04 4E 05 F1 | 	add	fp, #4
24808     A7 22 02 FB | 	rdlong	local03, fp
2480c     04 4E 85 F1 | 	sub	fp, #4
24810     11 22 06 F1 | 	add	local03, #17
24814     11 03 48 FC | 	wrbyte	#1, local03
24818     01 FA 05 F6 | 	mov	result1, #1
2481c     40 04 90 FD | 	jmp	#LR__3810
24820                 | LR__3796
24820     04 4E 05 F1 | 	add	fp, #4
24824     A7 22 02 FB | 	rdlong	local03, fp
24828     18 4E 05 F1 | 	add	fp, #24
2482c     A7 2C 02 FB | 	rdlong	local08, fp
24830     1C 4E 85 F1 | 	sub	fp, #28
24834     18 22 06 F1 | 	add	local03, #24
24838     11 2D 62 FC | 	wrlong	local08, local03
2483c                 | LR__3797
2483c     18 4E 05 F1 | 	add	fp, #24
24840     A7 12 02 FB | 	rdlong	arg01, fp
24844     14 4E 85 F1 | 	sub	fp, #20
24848     A7 22 02 FB | 	rdlong	local03, fp
2484c     04 4E 85 F1 | 	sub	fp, #4
24850     18 22 06 F1 | 	add	local03, #24
24854     11 15 02 FB | 	rdlong	arg02, local03
24858     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2485c     20 4E 05 F1 | 	add	fp, #32
24860     A7 FA 61 FC | 	wrlong	result1, fp
24864     20 4E 85 F1 | 	sub	fp, #32
24868     00 FA 0D F2 | 	cmp	result1, #0 wz
2486c     1C 00 90 5D |  if_ne	jmp	#LR__3798
24870     04 4E 05 F1 | 	add	fp, #4
24874     A7 22 02 FB | 	rdlong	local03, fp
24878     04 4E 85 F1 | 	sub	fp, #4
2487c     11 22 06 F1 | 	add	local03, #17
24880     11 05 48 FC | 	wrbyte	#2, local03
24884     02 FA 05 F6 | 	mov	result1, #2
24888     D4 03 90 FD | 	jmp	#LR__3810
2488c                 | LR__3798
2488c     20 4E 05 F1 | 	add	fp, #32
24890     A7 22 02 FB | 	rdlong	local03, fp
24894     10 4E 05 F1 | 	add	fp, #16
24898     A7 2C 02 FB | 	rdlong	local08, fp
2489c     16 23 02 F1 | 	add	local03, local08
248a0     10 4E 85 F1 | 	sub	fp, #16
248a4     A7 22 62 FC | 	wrlong	local03, fp
248a8     14 4E 85 F1 | 	sub	fp, #20
248ac     A7 22 02 FB | 	rdlong	local03, fp
248b0     09 22 46 F0 | 	shr	local03, #9
248b4     20 4E 05 F1 | 	add	fp, #32
248b8     A7 22 62 FC | 	wrlong	local03, fp
248bc     2C 4E 85 F1 | 	sub	fp, #44
248c0     01 22 16 F2 | 	cmp	local03, #1 wc
248c4     5C 01 90 CD |  if_b	jmp	#LR__3802
248c8     30 4E 05 F1 | 	add	fp, #48
248cc     A7 22 02 FB | 	rdlong	local03, fp
248d0     04 4E 85 F1 | 	sub	fp, #4
248d4     A7 2C 02 FB | 	rdlong	local08, fp
248d8     16 23 02 F1 | 	add	local03, local08
248dc     14 4E 85 F1 | 	sub	fp, #20
248e0     A7 2C 02 FB | 	rdlong	local08, fp
248e4     18 4E 85 F1 | 	sub	fp, #24
248e8     0A 2C 06 F1 | 	add	local08, #10
248ec     16 2D E2 FA | 	rdword	local08, local08
248f0     16 23 1A F2 | 	cmp	local03, local08 wcz
248f4     28 00 90 ED |  if_be	jmp	#LR__3799
248f8     18 4E 05 F1 | 	add	fp, #24
248fc     A7 1E 02 FB | 	rdlong	local01, fp
24900     0A 1E 06 F1 | 	add	local01, #10
24904     0F 23 E2 FA | 	rdword	local03, local01
24908     18 4E 05 F1 | 	add	fp, #24
2490c     A7 2C 02 FB | 	rdlong	local08, fp
24910     16 23 82 F1 | 	sub	local03, local08
24914     04 4E 85 F1 | 	sub	fp, #4
24918     A7 22 62 FC | 	wrlong	local03, fp
2491c     2C 4E 85 F1 | 	sub	fp, #44
24920                 | LR__3799
24920     18 4E 05 F1 | 	add	fp, #24
24924     A7 1E 02 FB | 	rdlong	local01, fp
24928     01 1E 06 F1 | 	add	local01, #1
2492c     0F 13 C2 FA | 	rdbyte	arg01, local01
24930     1C 4E 05 F1 | 	add	fp, #28
24934     A7 14 02 FB | 	rdlong	arg02, fp
24938     14 4E 85 F1 | 	sub	fp, #20
2493c     A7 16 02 FB | 	rdlong	arg03, fp
24940     0C 4E 05 F1 | 	add	fp, #12
24944     A7 18 02 FB | 	rdlong	arg04, fp
24948     2C 4E 85 F1 | 	sub	fp, #44
2494c     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
24950     00 FA 0D F2 | 	cmp	result1, #0 wz
24954     1C 00 90 AD |  if_e	jmp	#LR__3800
24958     04 4E 05 F1 | 	add	fp, #4
2495c     A7 22 02 FB | 	rdlong	local03, fp
24960     04 4E 85 F1 | 	sub	fp, #4
24964     11 22 06 F1 | 	add	local03, #17
24968     11 03 48 FC | 	wrbyte	#1, local03
2496c     01 FA 05 F6 | 	mov	result1, #1
24970     EC 02 90 FD | 	jmp	#LR__3810
24974                 | LR__3800
24974     04 4E 05 F1 | 	add	fp, #4
24978     A7 1E 02 FB | 	rdlong	local01, fp
2497c     04 4E 85 F1 | 	sub	fp, #4
24980     10 1E 06 F1 | 	add	local01, #16
24984     0F 23 C2 FA | 	rdbyte	local03, local01
24988     80 22 CE F7 | 	test	local03, #128 wz
2498c     78 00 90 AD |  if_e	jmp	#LR__3801
24990     04 4E 05 F1 | 	add	fp, #4
24994     A7 2C 02 FB | 	rdlong	local08, fp
24998     1C 2C 06 F1 | 	add	local08, #28
2499c     16 2D 02 FB | 	rdlong	local08, local08
249a0     1C 4E 05 F1 | 	add	fp, #28
249a4     A7 2E 02 FB | 	rdlong	local09, fp
249a8     17 2D 82 F1 | 	sub	local08, local09
249ac     0C 4E 05 F1 | 	add	fp, #12
249b0     A7 30 02 FB | 	rdlong	local10, fp
249b4     2C 4E 85 F1 | 	sub	fp, #44
249b8     18 33 02 F6 | 	mov	local11, local10
249bc     19 2D 12 F2 | 	cmp	local08, local11 wc
249c0     44 00 90 3D |  if_ae	jmp	#LR__3801
249c4     34 4E 05 F1 | 	add	fp, #52
249c8     A7 12 02 FB | 	rdlong	arg01, fp
249cc     30 4E 85 F1 | 	sub	fp, #48
249d0     A7 14 02 FB | 	rdlong	arg02, fp
249d4     0A 33 02 F6 | 	mov	local11, arg02
249d8     1C 32 06 F1 | 	add	local11, #28
249dc     19 2F 02 FB | 	rdlong	local09, local11
249e0     1C 4E 05 F1 | 	add	fp, #28
249e4     A7 26 02 FB | 	rdlong	local05, fp
249e8     13 2F 82 F1 | 	sub	local09, local05
249ec     09 2E 66 F0 | 	shl	local09, #9
249f0     17 33 02 F6 | 	mov	local11, local09
249f4     17 13 02 F1 | 	add	arg01, local09
249f8     20 4E 85 F1 | 	sub	fp, #32
249fc     28 14 06 F1 | 	add	arg02, #40
24a00     09 16 C6 F9 | 	decod	arg03, #9
24a04     50 49 BF FD | 	call	#__system____builtin_memmove
24a08                 | LR__3801
24a08     2C 4E 05 F1 | 	add	fp, #44
24a0c     A7 22 02 FB | 	rdlong	local03, fp
24a10     09 22 66 F0 | 	shl	local03, #9
24a14     04 4E 85 F1 | 	sub	fp, #4
24a18     A7 22 62 FC | 	wrlong	local03, fp
24a1c     28 4E 85 F1 | 	sub	fp, #40
24a20                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
24a20                 | ' 				}
24a20                 | ' 
24a20                 | ' 
24a20                 | ' 				rcnt =  ((UINT) 512 )  * cc;
24a20                 | ' 				continue;
24a20     B4 01 90 FD | 	jmp	#LR__3808
24a24                 | LR__3802
24a24     04 4E 05 F1 | 	add	fp, #4
24a28     A7 22 02 FB | 	rdlong	local03, fp
24a2c     1C 22 06 F1 | 	add	local03, #28
24a30     11 23 02 FB | 	rdlong	local03, local03
24a34     1C 4E 05 F1 | 	add	fp, #28
24a38     A7 1E 02 FB | 	rdlong	local01, fp
24a3c     20 4E 85 F1 | 	sub	fp, #32
24a40     0F 23 0A F2 | 	cmp	local03, local01 wz
24a44     EC 00 90 AD |  if_e	jmp	#LR__3806
24a48     04 4E 05 F1 | 	add	fp, #4
24a4c     A7 1E 02 FB | 	rdlong	local01, fp
24a50     04 4E 85 F1 | 	sub	fp, #4
24a54     10 1E 06 F1 | 	add	local01, #16
24a58     0F 23 C2 FA | 	rdbyte	local03, local01
24a5c     80 22 CE F7 | 	test	local03, #128 wz
24a60     7C 00 90 AD |  if_e	jmp	#LR__3804
24a64     18 4E 05 F1 | 	add	fp, #24
24a68     A7 1E 02 FB | 	rdlong	local01, fp
24a6c     01 1E 06 F1 | 	add	local01, #1
24a70     0F 13 C2 FA | 	rdbyte	arg01, local01
24a74     14 4E 85 F1 | 	sub	fp, #20
24a78     A7 22 02 FB | 	rdlong	local03, fp
24a7c     11 15 02 F6 | 	mov	arg02, local03
24a80     28 14 06 F1 | 	add	arg02, #40
24a84     04 4E 85 F1 | 	sub	fp, #4
24a88     1C 22 06 F1 | 	add	local03, #28
24a8c     11 17 02 FB | 	rdlong	arg03, local03
24a90     01 18 06 F6 | 	mov	arg04, #1
24a94     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
24a98     00 FA 0D F2 | 	cmp	result1, #0 wz
24a9c     1C 00 90 AD |  if_e	jmp	#LR__3803
24aa0     04 4E 05 F1 | 	add	fp, #4
24aa4     A7 22 02 FB | 	rdlong	local03, fp
24aa8     04 4E 85 F1 | 	sub	fp, #4
24aac     11 22 06 F1 | 	add	local03, #17
24ab0     11 03 48 FC | 	wrbyte	#1, local03
24ab4     01 FA 05 F6 | 	mov	result1, #1
24ab8     A4 01 90 FD | 	jmp	#LR__3810
24abc                 | LR__3803
24abc     04 4E 05 F1 | 	add	fp, #4
24ac0     A7 32 02 FB | 	rdlong	local11, fp
24ac4     19 23 02 F6 | 	mov	local03, local11
24ac8     04 4E 85 F1 | 	sub	fp, #4
24acc     10 32 06 F1 | 	add	local11, #16
24ad0     19 33 C2 FA | 	rdbyte	local11, local11
24ad4     7F 32 06 F5 | 	and	local11, #127
24ad8     10 22 06 F1 | 	add	local03, #16
24adc     11 33 42 FC | 	wrbyte	local11, local03
24ae0                 | LR__3804
24ae0     18 4E 05 F1 | 	add	fp, #24
24ae4     A7 1E 02 FB | 	rdlong	local01, fp
24ae8     01 1E 06 F1 | 	add	local01, #1
24aec     0F 13 C2 FA | 	rdbyte	arg01, local01
24af0     14 4E 85 F1 | 	sub	fp, #20
24af4     A7 14 02 FB | 	rdlong	arg02, fp
24af8     28 14 06 F1 | 	add	arg02, #40
24afc     1C 4E 05 F1 | 	add	fp, #28
24b00     A7 16 02 FB | 	rdlong	arg03, fp
24b04     20 4E 85 F1 | 	sub	fp, #32
24b08     01 18 06 F6 | 	mov	arg04, #1
24b0c     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
24b10     00 FA 0D F2 | 	cmp	result1, #0 wz
24b14     1C 00 90 AD |  if_e	jmp	#LR__3805
24b18     04 4E 05 F1 | 	add	fp, #4
24b1c     A7 22 02 FB | 	rdlong	local03, fp
24b20     04 4E 85 F1 | 	sub	fp, #4
24b24     11 22 06 F1 | 	add	local03, #17
24b28     11 03 48 FC | 	wrbyte	#1, local03
24b2c     01 FA 05 F6 | 	mov	result1, #1
24b30     2C 01 90 FD | 	jmp	#LR__3810
24b34                 | LR__3805
24b34                 | LR__3806
24b34     04 4E 05 F1 | 	add	fp, #4
24b38     A7 22 02 FB | 	rdlong	local03, fp
24b3c     1C 4E 05 F1 | 	add	fp, #28
24b40     A7 32 02 FB | 	rdlong	local11, fp
24b44     20 4E 85 F1 | 	sub	fp, #32
24b48     1C 22 06 F1 | 	add	local03, #28
24b4c     11 33 62 FC | 	wrlong	local11, local03
24b50                 | LR__3807
24b50     04 4E 05 F1 | 	add	fp, #4
24b54     A7 1E 02 FB | 	rdlong	local01, fp
24b58     14 1E 06 F1 | 	add	local01, #20
24b5c     0F 33 02 FB | 	rdlong	local11, local01
24b60     FF 33 06 F5 | 	and	local11, #511
24b64     09 22 C6 F9 | 	decod	local03, #9
24b68     19 23 82 F1 | 	sub	local03, local11
24b6c     24 4E 05 F1 | 	add	fp, #36
24b70     A7 22 62 FC | 	wrlong	local03, fp
24b74     1C 4E 85 F1 | 	sub	fp, #28
24b78     A7 32 02 FB | 	rdlong	local11, fp
24b7c     0C 4E 85 F1 | 	sub	fp, #12
24b80     19 23 1A F2 | 	cmp	local03, local11 wcz
24b84     0C 4E 05 11 |  if_a	add	fp, #12
24b88     A7 22 02 1B |  if_a	rdlong	local03, fp
24b8c     1C 4E 05 11 |  if_a	add	fp, #28
24b90     A7 22 62 1C |  if_a	wrlong	local03, fp
24b94     28 4E 85 11 |  if_a	sub	fp, #40
24b98     34 4E 05 F1 | 	add	fp, #52
24b9c     A7 12 02 FB | 	rdlong	arg01, fp
24ba0     30 4E 85 F1 | 	sub	fp, #48
24ba4     A7 28 02 FB | 	rdlong	local06, fp
24ba8     14 15 02 F6 | 	mov	arg02, local06
24bac     28 14 06 F1 | 	add	arg02, #40
24bb0     14 28 06 F1 | 	add	local06, #20
24bb4     14 33 02 FB | 	rdlong	local11, local06
24bb8     19 2F 02 F6 | 	mov	local09, local11
24bbc     17 31 02 F6 | 	mov	local10, local09
24bc0     FF 31 06 F5 | 	and	local10, #511
24bc4     18 15 02 F1 | 	add	arg02, local10
24bc8     24 4E 05 F1 | 	add	fp, #36
24bcc     A7 16 02 FB | 	rdlong	arg03, fp
24bd0     28 4E 85 F1 | 	sub	fp, #40
24bd4     80 47 BF FD | 	call	#__system____builtin_memmove
24bd8                 | LR__3808
24bd8     0C 4E 05 F1 | 	add	fp, #12
24bdc     A7 22 02 FB | 	rdlong	local03, fp
24be0     1C 4E 05 F1 | 	add	fp, #28
24be4     A7 2C 02 FB | 	rdlong	local08, fp
24be8     16 23 82 F1 | 	sub	local03, local08
24bec     1C 4E 85 F1 | 	sub	fp, #28
24bf0     A7 22 62 FC | 	wrlong	local03, fp
24bf4     04 4E 05 F1 | 	add	fp, #4
24bf8     A7 1E 02 FB | 	rdlong	local01, fp
24bfc     0F 2B 02 FB | 	rdlong	local07, local01
24c00     18 4E 05 F1 | 	add	fp, #24
24c04     A7 2C 02 FB | 	rdlong	local08, fp
24c08     16 2B 02 F1 | 	add	local07, local08
24c0c     0F 2B 62 FC | 	wrlong	local07, local01
24c10     0C 4E 05 F1 | 	add	fp, #12
24c14     A7 22 02 FB | 	rdlong	local03, fp
24c18     0C 4E 85 F1 | 	sub	fp, #12
24c1c     A7 34 02 FB | 	rdlong	local12, fp
24c20     1A 23 02 F1 | 	add	local03, local12
24c24     0C 4E 05 F1 | 	add	fp, #12
24c28     A7 22 62 FC | 	wrlong	local03, fp
24c2c     30 4E 85 F1 | 	sub	fp, #48
24c30     A7 36 02 FB | 	rdlong	local13, fp
24c34     1B 23 02 F6 | 	mov	local03, local13
24c38     14 36 06 F1 | 	add	local13, #20
24c3c     1B 39 02 FB | 	rdlong	local14, local13
24c40     24 4E 05 F1 | 	add	fp, #36
24c44     A7 28 02 FB | 	rdlong	local06, fp
24c48     28 4E 85 F1 | 	sub	fp, #40
24c4c     14 39 02 F1 | 	add	local14, local06
24c50     14 22 06 F1 | 	add	local03, #20
24c54     11 39 62 FC | 	wrlong	local14, local03
24c58     84 FA 9F FD | 	jmp	#LR__3792
24c5c                 | LR__3809
24c5c                 | ' 
24c5c                 | ' 
24c5c                 | ' 
24c5c                 | ' 
24c5c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
24c5c                 | ' 
24c5c                 | ' 	}
24c5c                 | ' 
24c5c                 | ' 	return FR_OK ;
24c5c     00 FA 05 F6 | 	mov	result1, #0
24c60                 | LR__3810
24c60     A7 F0 03 F6 | 	mov	ptra, fp
24c64     B2 00 A0 FD | 	call	#popregs_
24c68                 | _fatfs_cc_f_read_ret
24c68     2D 00 64 FD | 	ret
24c6c                 | 
24c6c                 | _fatfs_cc_f_write
24c6c     15 4A 05 F6 | 	mov	COUNT_, #21
24c70     A8 00 A0 FD | 	call	#pushregs_
24c74     34 F0 07 F1 | 	add	ptra, #52
24c78     04 4E 05 F1 | 	add	fp, #4
24c7c     A7 12 62 FC | 	wrlong	arg01, fp
24c80     04 4E 05 F1 | 	add	fp, #4
24c84     A7 14 62 FC | 	wrlong	arg02, fp
24c88     04 4E 05 F1 | 	add	fp, #4
24c8c     A7 16 62 FC | 	wrlong	arg03, fp
24c90     04 4E 05 F1 | 	add	fp, #4
24c94     A7 18 62 FC | 	wrlong	arg04, fp
24c98     08 4E 85 F1 | 	sub	fp, #8
24c9c     A7 FA 01 FB | 	rdlong	result1, fp
24ca0     28 4E 05 F1 | 	add	fp, #40
24ca4     A7 FA 61 FC | 	wrlong	result1, fp
24ca8     20 4E 85 F1 | 	sub	fp, #32
24cac     A7 FA 01 FB | 	rdlong	result1, fp
24cb0     FD 00 68 FC | 	wrlong	#0, result1
24cb4     0C 4E 85 F1 | 	sub	fp, #12
24cb8     A7 12 02 FB | 	rdlong	arg01, fp
24cbc     14 4E 05 F1 | 	add	fp, #20
24cc0     A7 14 02 F6 | 	mov	arg02, fp
24cc4     18 4E 85 F1 | 	sub	fp, #24
24cc8     88 F0 BF FD | 	call	#_fatfs_cc_validate
24ccc     14 4E 05 F1 | 	add	fp, #20
24cd0     A7 FA 61 FC | 	wrlong	result1, fp
24cd4     00 FA 4D F2 | 	cmps	result1, #0 wz
24cd8     14 4E 85 F1 | 	sub	fp, #20
24cdc     20 00 90 5D |  if_ne	jmp	#LR__3820
24ce0     04 4E 05 F1 | 	add	fp, #4
24ce4     A7 14 02 FB | 	rdlong	arg02, fp
24ce8     11 14 06 F1 | 	add	arg02, #17
24cec     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
24cf0     10 4E 05 F1 | 	add	fp, #16
24cf4     A7 14 62 FC | 	wrlong	arg02, fp
24cf8     14 4E 85 F1 | 	sub	fp, #20
24cfc     10 00 90 AD |  if_e	jmp	#LR__3821
24d00                 | LR__3820
24d00     14 4E 05 F1 | 	add	fp, #20
24d04     A7 FA 01 FB | 	rdlong	result1, fp
24d08     14 4E 85 F1 | 	sub	fp, #20
24d0c     44 07 90 FD | 	jmp	#LR__3843
24d10                 | LR__3821
24d10     04 4E 05 F1 | 	add	fp, #4
24d14     A7 14 02 FB | 	rdlong	arg02, fp
24d18     04 4E 85 F1 | 	sub	fp, #4
24d1c     10 14 06 F1 | 	add	arg02, #16
24d20     0A 15 C2 FA | 	rdbyte	arg02, arg02
24d24     02 14 CE F7 | 	test	arg02, #2 wz
24d28     07 FA 05 A6 |  if_e	mov	result1, #7
24d2c     24 07 90 AD |  if_e	jmp	#LR__3843
24d30     04 4E 05 F1 | 	add	fp, #4
24d34     A7 14 02 FB | 	rdlong	arg02, fp
24d38     0A 13 02 F6 | 	mov	arg01, arg02
24d3c     14 12 06 F1 | 	add	arg01, #20
24d40     09 13 02 FB | 	rdlong	arg01, arg01
24d44     08 4E 05 F1 | 	add	fp, #8
24d48     A7 FA 01 FB | 	rdlong	result1, fp
24d4c     FD 12 02 F1 | 	add	arg01, result1
24d50     0C 4E 85 F1 | 	sub	fp, #12
24d54     14 14 06 F1 | 	add	arg02, #20
24d58     0A FB 01 FB | 	rdlong	result1, arg02
24d5c     FD 12 12 F2 | 	cmp	arg01, result1 wc
24d60     24 00 90 3D |  if_ae	jmp	#LR__3822
24d64     04 4E 05 F1 | 	add	fp, #4
24d68     A7 14 02 FB | 	rdlong	arg02, fp
24d6c     01 FA 65 F6 | 	neg	result1, #1
24d70     14 14 06 F1 | 	add	arg02, #20
24d74     0A 15 02 FB | 	rdlong	arg02, arg02
24d78     0A FB 81 F1 | 	sub	result1, arg02
24d7c     08 4E 05 F1 | 	add	fp, #8
24d80     A7 FA 61 FC | 	wrlong	result1, fp
24d84     0C 4E 85 F1 | 	sub	fp, #12
24d88                 | LR__3822
24d88                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
24d88                 | ' 	}
24d88                 | ' 
24d88                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
24d88                 | LR__3823
24d88     0C 4E 05 F1 | 	add	fp, #12
24d8c     A7 FA 01 FB | 	rdlong	result1, fp
24d90     0C 4E 85 F1 | 	sub	fp, #12
24d94     01 FA 15 F2 | 	cmp	result1, #1 wc
24d98     90 06 90 CD |  if_b	jmp	#LR__3842
24d9c     04 4E 05 F1 | 	add	fp, #4
24da0     A7 FA 01 FB | 	rdlong	result1, fp
24da4     04 4E 85 F1 | 	sub	fp, #4
24da8     14 FA 05 F1 | 	add	result1, #20
24dac     FD FA 01 FB | 	rdlong	result1, result1
24db0     FF FB CD F7 | 	test	result1, #511 wz
24db4     D8 04 90 5D |  if_ne	jmp	#LR__3838
24db8     04 4E 05 F1 | 	add	fp, #4
24dbc     A7 FA 01 FB | 	rdlong	result1, fp
24dc0     14 FA 05 F1 | 	add	result1, #20
24dc4     FD FA 01 FB | 	rdlong	result1, result1
24dc8     09 FA 45 F0 | 	shr	result1, #9
24dcc     14 4E 05 F1 | 	add	fp, #20
24dd0     A7 14 02 FB | 	rdlong	arg02, fp
24dd4     0A 14 06 F1 | 	add	arg02, #10
24dd8     0A 19 E2 FA | 	rdword	arg04, arg02
24ddc     0C 15 32 F9 | 	getword	arg02, arg04, #0
24de0     01 14 86 F1 | 	sub	arg02, #1
24de4     0A FB 09 F5 | 	and	result1, arg02 wz
24de8     14 4E 05 F1 | 	add	fp, #20
24dec     A7 FA 61 FC | 	wrlong	result1, fp
24df0     2C 4E 85 F1 | 	sub	fp, #44
24df4     44 01 90 5D |  if_ne	jmp	#LR__3829
24df8     04 4E 05 F1 | 	add	fp, #4
24dfc     A7 FA 01 FB | 	rdlong	result1, fp
24e00     04 4E 85 F1 | 	sub	fp, #4
24e04     14 FA 05 F1 | 	add	result1, #20
24e08     FD 14 0A FB | 	rdlong	arg02, result1 wz
24e0c     44 00 90 5D |  if_ne	jmp	#LR__3824
24e10     04 4E 05 F1 | 	add	fp, #4
24e14     A7 14 02 FB | 	rdlong	arg02, fp
24e18     08 14 06 F1 | 	add	arg02, #8
24e1c     0A 15 0A FB | 	rdlong	arg02, arg02 wz
24e20     18 4E 05 F1 | 	add	fp, #24
24e24     A7 14 62 FC | 	wrlong	arg02, fp
24e28     1C 4E 85 F1 | 	sub	fp, #28
24e2c     4C 00 90 5D |  if_ne	jmp	#LR__3825
24e30     04 4E 05 F1 | 	add	fp, #4
24e34     A7 12 02 FB | 	rdlong	arg01, fp
24e38     04 4E 85 F1 | 	sub	fp, #4
24e3c     00 14 06 F6 | 	mov	arg02, #0
24e40     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
24e44     1C 4E 05 F1 | 	add	fp, #28
24e48     A7 FA 61 FC | 	wrlong	result1, fp
24e4c     1C 4E 85 F1 | 	sub	fp, #28
24e50     28 00 90 FD | 	jmp	#LR__3825
24e54                 | LR__3824
24e54     04 4E 05 F1 | 	add	fp, #4
24e58     A7 18 02 FB | 	rdlong	arg04, fp
24e5c     0C 13 02 F6 | 	mov	arg01, arg04
24e60     04 4E 85 F1 | 	sub	fp, #4
24e64     18 18 06 F1 | 	add	arg04, #24
24e68     0C 15 02 FB | 	rdlong	arg02, arg04
24e6c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
24e70     1C 4E 05 F1 | 	add	fp, #28
24e74     A7 FA 61 FC | 	wrlong	result1, fp
24e78     1C 4E 85 F1 | 	sub	fp, #28
24e7c                 | LR__3825
24e7c     1C 4E 05 F1 | 	add	fp, #28
24e80     A7 FA 09 FB | 	rdlong	result1, fp wz
24e84     1C 4E 85 F1 | 	sub	fp, #28
24e88     A0 05 90 AD |  if_e	jmp	#LR__3842
24e8c     1C 4E 05 F1 | 	add	fp, #28
24e90     A7 FA 01 FB | 	rdlong	result1, fp
24e94     1C 4E 85 F1 | 	sub	fp, #28
24e98     01 FA 0D F2 | 	cmp	result1, #1 wz
24e9c     1C 00 90 5D |  if_ne	jmp	#LR__3826
24ea0     04 4E 05 F1 | 	add	fp, #4
24ea4     A7 FA 01 FB | 	rdlong	result1, fp
24ea8     04 4E 85 F1 | 	sub	fp, #4
24eac     11 FA 05 F1 | 	add	result1, #17
24eb0     FD 04 48 FC | 	wrbyte	#2, result1
24eb4     02 FA 05 F6 | 	mov	result1, #2
24eb8     98 05 90 FD | 	jmp	#LR__3843
24ebc                 | LR__3826
24ebc     1C 4E 05 F1 | 	add	fp, #28
24ec0     A7 FA 01 FB | 	rdlong	result1, fp
24ec4     1C 4E 85 F1 | 	sub	fp, #28
24ec8     FF FF 7F FF 
24ecc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24ed0     1C 00 90 5D |  if_ne	jmp	#LR__3827
24ed4     04 4E 05 F1 | 	add	fp, #4
24ed8     A7 FA 01 FB | 	rdlong	result1, fp
24edc     04 4E 85 F1 | 	sub	fp, #4
24ee0     11 FA 05 F1 | 	add	result1, #17
24ee4     FD 02 48 FC | 	wrbyte	#1, result1
24ee8     01 FA 05 F6 | 	mov	result1, #1
24eec     64 05 90 FD | 	jmp	#LR__3843
24ef0                 | LR__3827
24ef0     04 4E 05 F1 | 	add	fp, #4
24ef4     A7 FA 01 FB | 	rdlong	result1, fp
24ef8     18 4E 05 F1 | 	add	fp, #24
24efc     A7 18 02 FB | 	rdlong	arg04, fp
24f00     18 FA 05 F1 | 	add	result1, #24
24f04     FD 18 62 FC | 	wrlong	arg04, result1
24f08     18 4E 85 F1 | 	sub	fp, #24
24f0c     A7 FA 01 FB | 	rdlong	result1, fp
24f10     04 4E 85 F1 | 	sub	fp, #4
24f14     08 FA 05 F1 | 	add	result1, #8
24f18     FD FA 09 FB | 	rdlong	result1, result1 wz
24f1c     1C 00 90 5D |  if_ne	jmp	#LR__3828
24f20     04 4E 05 F1 | 	add	fp, #4
24f24     A7 18 02 FB | 	rdlong	arg04, fp
24f28     18 4E 05 F1 | 	add	fp, #24
24f2c     A7 FA 01 FB | 	rdlong	result1, fp
24f30     1C 4E 85 F1 | 	sub	fp, #28
24f34     08 18 06 F1 | 	add	arg04, #8
24f38     0C FB 61 FC | 	wrlong	result1, arg04
24f3c                 | LR__3828
24f3c                 | LR__3829
24f3c     04 4E 05 F1 | 	add	fp, #4
24f40     A7 18 02 FB | 	rdlong	arg04, fp
24f44     04 4E 85 F1 | 	sub	fp, #4
24f48     10 18 06 F1 | 	add	arg04, #16
24f4c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24f50     80 18 CE F7 | 	test	arg04, #128 wz
24f54     7C 00 90 AD |  if_e	jmp	#LR__3831
24f58     18 4E 05 F1 | 	add	fp, #24
24f5c     A7 18 02 FB | 	rdlong	arg04, fp
24f60     01 18 06 F1 | 	add	arg04, #1
24f64     0C 13 C2 FA | 	rdbyte	arg01, arg04
24f68     14 4E 85 F1 | 	sub	fp, #20
24f6c     A7 18 02 FB | 	rdlong	arg04, fp
24f70     0C 15 02 F6 | 	mov	arg02, arg04
24f74     28 14 06 F1 | 	add	arg02, #40
24f78     04 4E 85 F1 | 	sub	fp, #4
24f7c     1C 18 06 F1 | 	add	arg04, #28
24f80     0C 17 02 FB | 	rdlong	arg03, arg04
24f84     01 18 06 F6 | 	mov	arg04, #1
24f88     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
24f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
24f90     1C 00 90 AD |  if_e	jmp	#LR__3830
24f94     04 4E 05 F1 | 	add	fp, #4
24f98     A7 FA 01 FB | 	rdlong	result1, fp
24f9c     04 4E 85 F1 | 	sub	fp, #4
24fa0     11 FA 05 F1 | 	add	result1, #17
24fa4     FD 02 48 FC | 	wrbyte	#1, result1
24fa8     01 FA 05 F6 | 	mov	result1, #1
24fac     A4 04 90 FD | 	jmp	#LR__3843
24fb0                 | LR__3830
24fb0     04 4E 05 F1 | 	add	fp, #4
24fb4     A7 18 02 FB | 	rdlong	arg04, fp
24fb8     0C FB 01 F6 | 	mov	result1, arg04
24fbc     04 4E 85 F1 | 	sub	fp, #4
24fc0     10 18 06 F1 | 	add	arg04, #16
24fc4     0C 19 C2 FA | 	rdbyte	arg04, arg04
24fc8     7F 18 06 F5 | 	and	arg04, #127
24fcc     10 FA 05 F1 | 	add	result1, #16
24fd0     FD 18 42 FC | 	wrbyte	arg04, result1
24fd4                 | LR__3831
24fd4     18 4E 05 F1 | 	add	fp, #24
24fd8     A7 12 02 FB | 	rdlong	arg01, fp
24fdc     14 4E 85 F1 | 	sub	fp, #20
24fe0     A7 14 02 FB | 	rdlong	arg02, fp
24fe4     04 4E 85 F1 | 	sub	fp, #4
24fe8     18 14 06 F1 | 	add	arg02, #24
24fec     0A 15 02 FB | 	rdlong	arg02, arg02
24ff0     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
24ff4     20 4E 05 F1 | 	add	fp, #32
24ff8     A7 FA 61 FC | 	wrlong	result1, fp
24ffc     20 4E 85 F1 | 	sub	fp, #32
25000     00 FA 0D F2 | 	cmp	result1, #0 wz
25004     1C 00 90 5D |  if_ne	jmp	#LR__3832
25008     04 4E 05 F1 | 	add	fp, #4
2500c     A7 FA 01 FB | 	rdlong	result1, fp
25010     04 4E 85 F1 | 	sub	fp, #4
25014     11 FA 05 F1 | 	add	result1, #17
25018     FD 04 48 FC | 	wrbyte	#2, result1
2501c     02 FA 05 F6 | 	mov	result1, #2
25020     30 04 90 FD | 	jmp	#LR__3843
25024                 | LR__3832
25024     20 4E 05 F1 | 	add	fp, #32
25028     A7 FA 01 FB | 	rdlong	result1, fp
2502c     0C 4E 05 F1 | 	add	fp, #12
25030     A7 1E 02 FB | 	rdlong	local01, fp
25034     0F FB 01 F1 | 	add	result1, local01
25038     0C 4E 85 F1 | 	sub	fp, #12
2503c     A7 FA 61 FC | 	wrlong	result1, fp
25040     14 4E 85 F1 | 	sub	fp, #20
25044     A7 FA 01 FB | 	rdlong	result1, fp
25048     09 FA 45 F0 | 	shr	result1, #9
2504c     1C 4E 05 F1 | 	add	fp, #28
25050     A7 FA 61 FC | 	wrlong	result1, fp
25054     28 4E 85 F1 | 	sub	fp, #40
25058     01 FA 15 F2 | 	cmp	result1, #1 wc
2505c     60 01 90 CD |  if_b	jmp	#LR__3836
25060     2C 4E 05 F1 | 	add	fp, #44
25064     A7 FA 01 FB | 	rdlong	result1, fp
25068     04 4E 85 F1 | 	sub	fp, #4
2506c     A7 18 02 FB | 	rdlong	arg04, fp
25070     0C FB 01 F1 | 	add	result1, arg04
25074     10 4E 85 F1 | 	sub	fp, #16
25078     A7 18 02 FB | 	rdlong	arg04, fp
2507c     18 4E 85 F1 | 	sub	fp, #24
25080     0A 18 06 F1 | 	add	arg04, #10
25084     0C 19 E2 FA | 	rdword	arg04, arg04
25088     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2508c     28 00 90 ED |  if_be	jmp	#LR__3833
25090     18 4E 05 F1 | 	add	fp, #24
25094     A7 FA 01 FB | 	rdlong	result1, fp
25098     0A FA 05 F1 | 	add	result1, #10
2509c     FD FA E1 FA | 	rdword	result1, result1
250a0     14 4E 05 F1 | 	add	fp, #20
250a4     A7 18 02 FB | 	rdlong	arg04, fp
250a8     0C FB 81 F1 | 	sub	result1, arg04
250ac     04 4E 85 F1 | 	sub	fp, #4
250b0     A7 FA 61 FC | 	wrlong	result1, fp
250b4     28 4E 85 F1 | 	sub	fp, #40
250b8                 | LR__3833
250b8     18 4E 05 F1 | 	add	fp, #24
250bc     A7 18 02 FB | 	rdlong	arg04, fp
250c0     01 18 06 F1 | 	add	arg04, #1
250c4     0C 13 C2 FA | 	rdbyte	arg01, arg04
250c8     18 4E 05 F1 | 	add	fp, #24
250cc     A7 14 02 FB | 	rdlong	arg02, fp
250d0     10 4E 85 F1 | 	sub	fp, #16
250d4     A7 16 02 FB | 	rdlong	arg03, fp
250d8     08 4E 05 F1 | 	add	fp, #8
250dc     A7 18 02 FB | 	rdlong	arg04, fp
250e0     28 4E 85 F1 | 	sub	fp, #40
250e4     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
250e8     00 FA 0D F2 | 	cmp	result1, #0 wz
250ec     1C 00 90 AD |  if_e	jmp	#LR__3834
250f0     04 4E 05 F1 | 	add	fp, #4
250f4     A7 1E 02 FB | 	rdlong	local01, fp
250f8     04 4E 85 F1 | 	sub	fp, #4
250fc     11 1E 06 F1 | 	add	local01, #17
25100     0F 03 48 FC | 	wrbyte	#1, local01
25104     01 FA 05 F6 | 	mov	result1, #1
25108     48 03 90 FD | 	jmp	#LR__3843
2510c                 | LR__3834
2510c     04 4E 05 F1 | 	add	fp, #4
25110     A7 FA 01 FB | 	rdlong	result1, fp
25114     1C FA 05 F1 | 	add	result1, #28
25118     FD FA 01 FB | 	rdlong	result1, result1
2511c     1C 4E 05 F1 | 	add	fp, #28
25120     A7 20 02 FB | 	rdlong	local02, fp
25124     10 FB 81 F1 | 	sub	result1, local02
25128     08 4E 05 F1 | 	add	fp, #8
2512c     A7 18 02 FB | 	rdlong	arg04, fp
25130     28 4E 85 F1 | 	sub	fp, #40
25134     0C FB 11 F2 | 	cmp	result1, arg04 wc
25138     68 00 90 3D |  if_ae	jmp	#LR__3835
2513c     04 4E 05 F1 | 	add	fp, #4
25140     A7 12 02 FB | 	rdlong	arg01, fp
25144     28 12 06 F1 | 	add	arg01, #40
25148     2C 4E 05 F1 | 	add	fp, #44
2514c     A7 14 02 FB | 	rdlong	arg02, fp
25150     2C 4E 85 F1 | 	sub	fp, #44
25154     A7 FA 01 FB | 	rdlong	result1, fp
25158     1C FA 05 F1 | 	add	result1, #28
2515c     FD 22 02 FB | 	rdlong	local03, result1
25160     1C 4E 05 F1 | 	add	fp, #28
25164     A7 18 02 FB | 	rdlong	arg04, fp
25168     20 4E 85 F1 | 	sub	fp, #32
2516c     0C 23 82 F1 | 	sub	local03, arg04
25170     09 22 66 F0 | 	shl	local03, #9
25174     11 15 02 F1 | 	add	arg02, local03
25178     09 16 C6 F9 | 	decod	arg03, #9
2517c     D8 41 BF FD | 	call	#__system____builtin_memmove
25180     04 4E 05 F1 | 	add	fp, #4
25184     A7 18 02 FB | 	rdlong	arg04, fp
25188     0C FB 01 F6 | 	mov	result1, arg04
2518c     04 4E 85 F1 | 	sub	fp, #4
25190     10 18 06 F1 | 	add	arg04, #16
25194     0C 19 C2 FA | 	rdbyte	arg04, arg04
25198     7F 18 06 F5 | 	and	arg04, #127
2519c     10 FA 05 F1 | 	add	result1, #16
251a0     FD 18 42 FC | 	wrbyte	arg04, result1
251a4                 | LR__3835
251a4     28 4E 05 F1 | 	add	fp, #40
251a8     A7 FA 01 FB | 	rdlong	result1, fp
251ac     09 FA 65 F0 | 	shl	result1, #9
251b0     04 4E 85 F1 | 	sub	fp, #4
251b4     A7 FA 61 FC | 	wrlong	result1, fp
251b8     24 4E 85 F1 | 	sub	fp, #36
251bc                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
251bc                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
251bc                 | ' 				}
251bc                 | ' 
251bc                 | ' 
251bc                 | ' 				wcnt =  ((UINT) 512 )  * cc;
251bc                 | ' 				continue;
251bc     74 01 90 FD | 	jmp	#LR__3839
251c0                 | LR__3836
251c0     04 4E 05 F1 | 	add	fp, #4
251c4     A7 20 02 FB | 	rdlong	local02, fp
251c8     1C 20 06 F1 | 	add	local02, #28
251cc     10 FB 01 FB | 	rdlong	result1, local02
251d0     1C 4E 05 F1 | 	add	fp, #28
251d4     A7 20 02 FB | 	rdlong	local02, fp
251d8     20 4E 85 F1 | 	sub	fp, #32
251dc     10 FB 09 F2 | 	cmp	result1, local02 wz
251e0     90 00 90 AD |  if_e	jmp	#LR__3837
251e4     04 4E 05 F1 | 	add	fp, #4
251e8     A7 FA 01 FB | 	rdlong	result1, fp
251ec     FD 22 02 F6 | 	mov	local03, result1
251f0     04 4E 85 F1 | 	sub	fp, #4
251f4     14 22 06 F1 | 	add	local03, #20
251f8     11 23 02 FB | 	rdlong	local03, local03
251fc     0C FA 05 F1 | 	add	result1, #12
25200     FD 24 02 FB | 	rdlong	local04, result1
25204     12 27 02 F6 | 	mov	local05, local04
25208     13 23 12 F2 | 	cmp	local03, local05 wc
2520c     64 00 90 3D |  if_ae	jmp	#LR__3837
25210     18 4E 05 F1 | 	add	fp, #24
25214     A7 18 02 FB | 	rdlong	arg04, fp
25218     01 18 06 F1 | 	add	arg04, #1
2521c     0C 13 C2 FA | 	rdbyte	arg01, arg04
25220     14 4E 85 F1 | 	sub	fp, #20
25224     A7 28 02 FB | 	rdlong	local06, fp
25228     28 28 06 F1 | 	add	local06, #40
2522c     14 2B 02 F6 | 	mov	local07, local06
25230     1C 4E 05 F1 | 	add	fp, #28
25234     A7 2C 02 FB | 	rdlong	local08, fp
25238     20 4E 85 F1 | 	sub	fp, #32
2523c     01 2E 06 F6 | 	mov	local09, #1
25240     15 15 02 F6 | 	mov	arg02, local07
25244     16 17 02 F6 | 	mov	arg03, local08
25248     01 18 06 F6 | 	mov	arg04, #1
2524c     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
25250     FD 30 0A F6 | 	mov	local10, result1 wz
25254     1C 00 90 AD |  if_e	jmp	#LR__3837
25258     04 4E 05 F1 | 	add	fp, #4
2525c     A7 30 02 FB | 	rdlong	local10, fp
25260     04 4E 85 F1 | 	sub	fp, #4
25264     11 30 06 F1 | 	add	local10, #17
25268     18 03 48 FC | 	wrbyte	#1, local10
2526c                 | ' 				fp->fptr < fp->obj.objsize &&
2526c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2526c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2526c     01 FA 05 F6 | 	mov	result1, #1
25270     E0 01 90 FD | 	jmp	#LR__3843
25274                 | LR__3837
25274     04 4E 05 F1 | 	add	fp, #4
25278     A7 18 02 FB | 	rdlong	arg04, fp
2527c     1C 4E 05 F1 | 	add	fp, #28
25280     A7 FA 01 FB | 	rdlong	result1, fp
25284     20 4E 85 F1 | 	sub	fp, #32
25288     1C 18 06 F1 | 	add	arg04, #28
2528c     0C FB 61 FC | 	wrlong	result1, arg04
25290                 | LR__3838
25290     04 4E 05 F1 | 	add	fp, #4
25294     A7 FA 01 FB | 	rdlong	result1, fp
25298     14 FA 05 F1 | 	add	result1, #20
2529c     FD FA 01 FB | 	rdlong	result1, result1
252a0     FF FB 05 F5 | 	and	result1, #511
252a4     09 32 C6 F9 | 	decod	local11, #9
252a8     FD 32 82 F1 | 	sub	local11, result1
252ac     20 4E 05 F1 | 	add	fp, #32
252b0     A7 32 62 FC | 	wrlong	local11, fp
252b4     18 4E 85 F1 | 	sub	fp, #24
252b8     A7 FA 01 FB | 	rdlong	result1, fp
252bc     0C 4E 85 F1 | 	sub	fp, #12
252c0     FD 32 1A F2 | 	cmp	local11, result1 wcz
252c4     0C 4E 05 11 |  if_a	add	fp, #12
252c8     A7 32 02 1B |  if_a	rdlong	local11, fp
252cc     18 4E 05 11 |  if_a	add	fp, #24
252d0     A7 32 62 1C |  if_a	wrlong	local11, fp
252d4     24 4E 85 11 |  if_a	sub	fp, #36
252d8     04 4E 05 F1 | 	add	fp, #4
252dc     A7 32 02 FB | 	rdlong	local11, fp
252e0     19 13 02 F6 | 	mov	arg01, local11
252e4     28 12 06 F1 | 	add	arg01, #40
252e8     14 32 06 F1 | 	add	local11, #20
252ec     19 33 02 FB | 	rdlong	local11, local11
252f0     FF 33 06 F5 | 	and	local11, #511
252f4     19 13 02 F1 | 	add	arg01, local11
252f8     2C 4E 05 F1 | 	add	fp, #44
252fc     A7 14 02 FB | 	rdlong	arg02, fp
25300     0C 4E 85 F1 | 	sub	fp, #12
25304     A7 16 02 FB | 	rdlong	arg03, fp
25308     24 4E 85 F1 | 	sub	fp, #36
2530c     48 40 BF FD | 	call	#__system____builtin_memmove
25310     04 4E 05 F1 | 	add	fp, #4
25314     A7 FA 01 FB | 	rdlong	result1, fp
25318     FD 32 02 F6 | 	mov	local11, result1
2531c     04 4E 85 F1 | 	sub	fp, #4
25320     10 FA 05 F1 | 	add	result1, #16
25324     FD FA C1 FA | 	rdbyte	result1, result1
25328     80 FA 45 F5 | 	or	result1, #128
2532c     10 32 06 F1 | 	add	local11, #16
25330     19 FB 41 FC | 	wrbyte	result1, local11
25334                 | LR__3839
25334     0C 4E 05 F1 | 	add	fp, #12
25338     A7 32 02 FB | 	rdlong	local11, fp
2533c     18 4E 05 F1 | 	add	fp, #24
25340     A7 FA 01 FB | 	rdlong	result1, fp
25344     FD 32 82 F1 | 	sub	local11, result1
25348     18 4E 85 F1 | 	sub	fp, #24
2534c     A7 32 62 FC | 	wrlong	local11, fp
25350     04 4E 05 F1 | 	add	fp, #4
25354     A7 34 02 FB | 	rdlong	local12, fp
25358     1A 33 02 FB | 	rdlong	local11, local12
2535c     14 4E 05 F1 | 	add	fp, #20
25360     A7 36 02 FB | 	rdlong	local13, fp
25364     1B 33 02 F1 | 	add	local11, local13
25368     1A 33 62 FC | 	wrlong	local11, local12
2536c     0C 4E 05 F1 | 	add	fp, #12
25370     A7 32 02 FB | 	rdlong	local11, fp
25374     0C 4E 85 F1 | 	sub	fp, #12
25378     A7 38 02 FB | 	rdlong	local14, fp
2537c     1C 33 02 F1 | 	add	local11, local14
25380     0C 4E 05 F1 | 	add	fp, #12
25384     A7 32 62 FC | 	wrlong	local11, fp
25388     2C 4E 85 F1 | 	sub	fp, #44
2538c     A7 3A 02 FB | 	rdlong	local15, fp
25390     1D 33 02 F6 | 	mov	local11, local15
25394     14 3A 06 F1 | 	add	local15, #20
25398     1D 3B 02 FB | 	rdlong	local15, local15
2539c     20 4E 05 F1 | 	add	fp, #32
253a0     A7 3C 02 FB | 	rdlong	local16, fp
253a4     1E 3B 02 F1 | 	add	local15, local16
253a8     14 32 06 F1 | 	add	local11, #20
253ac     19 3B 62 FC | 	wrlong	local15, local11
253b0     20 4E 85 F1 | 	sub	fp, #32
253b4     A7 3E 02 FB | 	rdlong	local17, fp
253b8     1F 33 02 F6 | 	mov	local11, local17
253bc     1F 41 02 F6 | 	mov	local18, local17
253c0     04 4E 85 F1 | 	sub	fp, #4
253c4     14 3E 06 F1 | 	add	local17, #20
253c8     1F 43 02 FB | 	rdlong	local19, local17
253cc     0C 40 06 F1 | 	add	local18, #12
253d0     20 45 02 FB | 	rdlong	local20, local18
253d4     22 43 1A F2 | 	cmp	local19, local20 wcz
253d8     24 00 90 ED |  if_be	jmp	#LR__3840
253dc     04 4E 05 F1 | 	add	fp, #4
253e0     A7 26 02 FB | 	rdlong	local05, fp
253e4     04 4E 85 F1 | 	sub	fp, #4
253e8     13 23 02 F6 | 	mov	local03, local05
253ec     14 22 06 F1 | 	add	local03, #20
253f0     11 25 02 FB | 	rdlong	local04, local03
253f4     14 22 86 F1 | 	sub	local03, #20
253f8     12 47 02 F6 | 	mov	local21, local04
253fc     20 00 90 FD | 	jmp	#LR__3841
25400                 | LR__3840
25400     04 4E 05 F1 | 	add	fp, #4
25404     A7 2A 02 FB | 	rdlong	local07, fp
25408     04 4E 85 F1 | 	sub	fp, #4
2540c     15 31 02 F6 | 	mov	local10, local07
25410     0C 30 06 F1 | 	add	local10, #12
25414     18 2D 02 FB | 	rdlong	local08, local10
25418     0C 30 86 F1 | 	sub	local10, #12
2541c     16 47 02 F6 | 	mov	local21, local08
25420                 | LR__3841
25420     0C 32 06 F1 | 	add	local11, #12
25424     19 47 62 FC | 	wrlong	local21, local11
25428     5C F9 9F FD | 	jmp	#LR__3823
2542c                 | LR__3842
2542c     04 4E 05 F1 | 	add	fp, #4
25430     A7 34 02 FB | 	rdlong	local12, fp
25434     1A 1F 02 F6 | 	mov	local01, local12
25438     04 4E 85 F1 | 	sub	fp, #4
2543c     10 34 06 F1 | 	add	local12, #16
25440     1A 33 C2 FA | 	rdbyte	local11, local12
25444     40 32 46 F5 | 	or	local11, #64
25448     10 1E 06 F1 | 	add	local01, #16
2544c     0F 33 42 FC | 	wrbyte	local11, local01
25450                 | ' 
25450                 | ' 
25450                 | ' 
25450                 | ' 
25450                 | ' 
25450                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
25450                 | ' 		fp->flag |=  0x80 ;
25450                 | ' 
25450                 | ' 	}
25450                 | ' 
25450                 | ' 	fp->flag |=  0x40 ;
25450                 | ' 
25450                 | ' 	return FR_OK ;
25450     00 FA 05 F6 | 	mov	result1, #0
25454                 | LR__3843
25454     A7 F0 03 F6 | 	mov	ptra, fp
25458     B2 00 A0 FD | 	call	#popregs_
2545c                 | _fatfs_cc_f_write_ret
2545c     2D 00 64 FD | 	ret
25460                 | 
25460                 | _fatfs_cc_f_sync
25460     00 4A 05 F6 | 	mov	COUNT_, #0
25464     A8 00 A0 FD | 	call	#pushregs_
25468     18 F0 07 F1 | 	add	ptra, #24
2546c     04 4E 05 F1 | 	add	fp, #4
25470     A7 12 62 FC | 	wrlong	arg01, fp
25474     08 4E 05 F1 | 	add	fp, #8
25478     A7 14 02 F6 | 	mov	arg02, fp
2547c     0C 4E 85 F1 | 	sub	fp, #12
25480     D0 E8 BF FD | 	call	#_fatfs_cc_validate
25484     08 4E 05 F1 | 	add	fp, #8
25488     A7 FA 61 FC | 	wrlong	result1, fp
2548c     08 4E 85 F1 | 	sub	fp, #8
25490     00 FA 0D F2 | 	cmp	result1, #0 wz
25494     C0 01 90 5D |  if_ne	jmp	#LR__3853
25498     04 4E 05 F1 | 	add	fp, #4
2549c     A7 18 02 FB | 	rdlong	arg04, fp
254a0     04 4E 85 F1 | 	sub	fp, #4
254a4     10 18 06 F1 | 	add	arg04, #16
254a8     0C 19 C2 FA | 	rdbyte	arg04, arg04
254ac     40 18 CE F7 | 	test	arg04, #64 wz
254b0     A4 01 90 AD |  if_e	jmp	#LR__3852
254b4     04 4E 05 F1 | 	add	fp, #4
254b8     A7 18 02 FB | 	rdlong	arg04, fp
254bc     04 4E 85 F1 | 	sub	fp, #4
254c0     10 18 06 F1 | 	add	arg04, #16
254c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
254c8     80 18 CE F7 | 	test	arg04, #128 wz
254cc     64 00 90 AD |  if_e	jmp	#LR__3850
254d0     0C 4E 05 F1 | 	add	fp, #12
254d4     A7 18 02 FB | 	rdlong	arg04, fp
254d8     01 18 06 F1 | 	add	arg04, #1
254dc     0C 13 C2 FA | 	rdbyte	arg01, arg04
254e0     08 4E 85 F1 | 	sub	fp, #8
254e4     A7 18 02 FB | 	rdlong	arg04, fp
254e8     0C 15 02 F6 | 	mov	arg02, arg04
254ec     28 14 06 F1 | 	add	arg02, #40
254f0     04 4E 85 F1 | 	sub	fp, #4
254f4     1C 18 06 F1 | 	add	arg04, #28
254f8     0C 17 02 FB | 	rdlong	arg03, arg04
254fc     01 18 06 F6 | 	mov	arg04, #1
25500     0C AE BF FD | 	call	#_fatfs_cc_disk_write
25504     00 FA 0D F2 | 	cmp	result1, #0 wz
25508     01 FA 05 56 |  if_ne	mov	result1, #1
2550c     54 01 90 5D |  if_ne	jmp	#LR__3854
25510     04 4E 05 F1 | 	add	fp, #4
25514     A7 18 02 FB | 	rdlong	arg04, fp
25518     0C 17 02 F6 | 	mov	arg03, arg04
2551c     04 4E 85 F1 | 	sub	fp, #4
25520     10 18 06 F1 | 	add	arg04, #16
25524     0C 19 C2 FA | 	rdbyte	arg04, arg04
25528     7F 18 06 F5 | 	and	arg04, #127
2552c     10 16 06 F1 | 	add	arg03, #16
25530     0B 19 42 FC | 	wrbyte	arg04, arg03
25534                 | LR__3850
25534     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
25538     10 4E 05 F1 | 	add	fp, #16
2553c     A7 FA 61 FC | 	wrlong	result1, fp
25540     04 4E 85 F1 | 	sub	fp, #4
25544     A7 12 02 FB | 	rdlong	arg01, fp
25548     08 4E 85 F1 | 	sub	fp, #8
2554c     A7 18 02 FB | 	rdlong	arg04, fp
25550     04 4E 85 F1 | 	sub	fp, #4
25554     20 18 06 F1 | 	add	arg04, #32
25558     0C 15 02 FB | 	rdlong	arg02, arg04
2555c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
25560     08 4E 05 F1 | 	add	fp, #8
25564     A7 FA 61 FC | 	wrlong	result1, fp
25568     08 4E 85 F1 | 	sub	fp, #8
2556c     00 FA 0D F2 | 	cmp	result1, #0 wz
25570     E4 00 90 5D |  if_ne	jmp	#LR__3851
25574     04 4E 05 F1 | 	add	fp, #4
25578     A7 18 02 FB | 	rdlong	arg04, fp
2557c     24 18 06 F1 | 	add	arg04, #36
25580     0C 19 02 FB | 	rdlong	arg04, arg04
25584     10 4E 05 F1 | 	add	fp, #16
25588     A7 18 62 FC | 	wrlong	arg04, fp
2558c     0C 17 02 F6 | 	mov	arg03, arg04
25590     0B 16 06 F1 | 	add	arg03, #11
25594     0B 17 C2 FA | 	rdbyte	arg03, arg03
25598     20 16 46 F5 | 	or	arg03, #32
2559c     0B 18 06 F1 | 	add	arg04, #11
255a0     0C 17 42 FC | 	wrbyte	arg03, arg04
255a4     10 4E 85 F1 | 	sub	fp, #16
255a8     A7 18 02 FB | 	rdlong	arg04, fp
255ac     0C 13 02 FB | 	rdlong	arg01, arg04
255b0     10 4E 05 F1 | 	add	fp, #16
255b4     A7 14 02 FB | 	rdlong	arg02, fp
255b8     14 4E 85 F1 | 	sub	fp, #20
255bc     08 18 06 F1 | 	add	arg04, #8
255c0     0C 17 02 FB | 	rdlong	arg03, arg04
255c4     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
255c8     14 4E 05 F1 | 	add	fp, #20
255cc     A7 12 02 FB | 	rdlong	arg01, fp
255d0     1C 12 06 F1 | 	add	arg01, #28
255d4     10 4E 85 F1 | 	sub	fp, #16
255d8     A7 18 02 FB | 	rdlong	arg04, fp
255dc     0C 18 06 F1 | 	add	arg04, #12
255e0     0C 15 02 FB | 	rdlong	arg02, arg04
255e4     09 15 62 FC | 	wrlong	arg02, arg01
255e8     10 4E 05 F1 | 	add	fp, #16
255ec     A7 12 02 FB | 	rdlong	arg01, fp
255f0     16 12 06 F1 | 	add	arg01, #22
255f4     04 4E 85 F1 | 	sub	fp, #4
255f8     A7 14 02 FB | 	rdlong	arg02, fp
255fc     09 15 62 FC | 	wrlong	arg02, arg01
25600     04 4E 05 F1 | 	add	fp, #4
25604     A7 12 02 FB | 	rdlong	arg01, fp
25608     12 12 06 F1 | 	add	arg01, #18
2560c     09 01 58 FC | 	wrword	#0, arg01
25610     08 4E 85 F1 | 	sub	fp, #8
25614     A7 18 02 FB | 	rdlong	arg04, fp
25618     03 18 06 F1 | 	add	arg04, #3
2561c     0C 03 48 FC | 	wrbyte	#1, arg04
25620     A7 12 02 FB | 	rdlong	arg01, fp
25624     0C 4E 85 F1 | 	sub	fp, #12
25628     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2562c     08 4E 05 F1 | 	add	fp, #8
25630     A7 FA 61 FC | 	wrlong	result1, fp
25634     04 4E 85 F1 | 	sub	fp, #4
25638     A7 18 02 FB | 	rdlong	arg04, fp
2563c     0C 17 02 F6 | 	mov	arg03, arg04
25640     04 4E 85 F1 | 	sub	fp, #4
25644     10 18 06 F1 | 	add	arg04, #16
25648     0C 19 C2 FA | 	rdbyte	arg04, arg04
2564c     BF 18 06 F5 | 	and	arg04, #191
25650     10 16 06 F1 | 	add	arg03, #16
25654     0B 19 42 FC | 	wrbyte	arg04, arg03
25658                 | LR__3851
25658                 | LR__3852
25658                 | LR__3853
25658                 | ' 					dir = fp->dir_ptr;
25658                 | ' 					dir[ 11 ] |=  0x20 ;
25658                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
25658                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
25658                 | ' 					st_dword(dir +  22 , tm);
25658                 | ' 					st_word(dir +  18 , 0);
25658                 | ' 					fs->wflag = 1;
25658                 | ' 					res = sync_fs(fs);
25658                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
25658                 | ' 				}
25658                 | ' 			}
25658                 | ' 		}
25658                 | ' 	}
25658                 | ' 
25658                 | ' 	return res ;
25658     08 4E 05 F1 | 	add	fp, #8
2565c     A7 FA 01 FB | 	rdlong	result1, fp
25660     08 4E 85 F1 | 	sub	fp, #8
25664                 | LR__3854
25664     A7 F0 03 F6 | 	mov	ptra, fp
25668     B2 00 A0 FD | 	call	#popregs_
2566c                 | _fatfs_cc_f_sync_ret
2566c     2D 00 64 FD | 	ret
25670                 | 
25670                 | _fatfs_cc_f_close
25670     01 4A 05 F6 | 	mov	COUNT_, #1
25674     A8 00 A0 FD | 	call	#pushregs_
25678     10 F0 07 F1 | 	add	ptra, #16
2567c     04 4E 05 F1 | 	add	fp, #4
25680     A7 12 62 FC | 	wrlong	arg01, fp
25684     04 4E 85 F1 | 	sub	fp, #4
25688     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2568c     08 4E 05 F1 | 	add	fp, #8
25690     A7 FA 61 FC | 	wrlong	result1, fp
25694     08 4E 85 F1 | 	sub	fp, #8
25698     00 FA 0D F2 | 	cmp	result1, #0 wz
2569c     38 00 90 5D |  if_ne	jmp	#LR__3860
256a0     04 4E 05 F1 | 	add	fp, #4
256a4     A7 12 02 FB | 	rdlong	arg01, fp
256a8     08 4E 05 F1 | 	add	fp, #8
256ac     A7 14 02 F6 | 	mov	arg02, fp
256b0     0C 4E 85 F1 | 	sub	fp, #12
256b4     9C E6 BF FD | 	call	#_fatfs_cc_validate
256b8     08 4E 05 F1 | 	add	fp, #8
256bc     A7 FA 61 FC | 	wrlong	result1, fp
256c0     08 4E 85 F1 | 	sub	fp, #8
256c4     00 FA 0D F2 | 	cmp	result1, #0 wz
256c8     04 4E 05 A1 |  if_e	add	fp, #4
256cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
256d0     04 4E 85 A1 |  if_e	sub	fp, #4
256d4     0F 01 68 AC |  if_e	wrlong	#0, local01
256d8                 | LR__3860
256d8                 | ' 
256d8                 | ' 
256d8                 | ' 
256d8                 | ' 
256d8                 | ' 			fp->obj.fs = 0;
256d8                 | ' #line 4192 "ff.c"
256d8                 | ' 		}
256d8                 | ' 	}
256d8                 | ' 	return res;
256d8     08 4E 05 F1 | 	add	fp, #8
256dc     A7 FA 01 FB | 	rdlong	result1, fp
256e0     08 4E 85 F1 | 	sub	fp, #8
256e4     A7 F0 03 F6 | 	mov	ptra, fp
256e8     B2 00 A0 FD | 	call	#popregs_
256ec                 | _fatfs_cc_f_close_ret
256ec     2D 00 64 FD | 	ret
256f0                 | 
256f0                 | _fatfs_cc_f_lseek
256f0     00 4A 05 F6 | 	mov	COUNT_, #0
256f4     A8 00 A0 FD | 	call	#pushregs_
256f8     24 F0 07 F1 | 	add	ptra, #36
256fc     04 4E 05 F1 | 	add	fp, #4
25700     A7 12 62 FC | 	wrlong	arg01, fp
25704     04 4E 05 F1 | 	add	fp, #4
25708     A7 14 62 FC | 	wrlong	arg02, fp
2570c     04 4E 85 F1 | 	sub	fp, #4
25710     A7 12 02 FB | 	rdlong	arg01, fp
25714     0C 4E 05 F1 | 	add	fp, #12
25718     A7 14 02 F6 | 	mov	arg02, fp
2571c     10 4E 85 F1 | 	sub	fp, #16
25720     30 E6 BF FD | 	call	#_fatfs_cc_validate
25724     0C 4E 05 F1 | 	add	fp, #12
25728     A7 FA 61 FC | 	wrlong	result1, fp
2572c     0C 4E 85 F1 | 	sub	fp, #12
25730     00 FA 0D F2 | 	cmp	result1, #0 wz
25734     1C 00 90 5D |  if_ne	jmp	#LR__3870
25738     04 4E 05 F1 | 	add	fp, #4
2573c     A7 18 02 FB | 	rdlong	arg04, fp
25740     11 18 06 F1 | 	add	arg04, #17
25744     0C 19 C2 FA | 	rdbyte	arg04, arg04
25748     08 4E 05 F1 | 	add	fp, #8
2574c     A7 18 62 FC | 	wrlong	arg04, fp
25750     0C 4E 85 F1 | 	sub	fp, #12
25754                 | LR__3870
25754     0C 4E 05 F1 | 	add	fp, #12
25758     A7 18 0A FB | 	rdlong	arg04, fp wz
2575c     0C 4E 85 F1 | 	sub	fp, #12
25760     0C 4E 05 51 |  if_ne	add	fp, #12
25764     A7 FA 01 5B |  if_ne	rdlong	result1, fp
25768     0C 4E 85 51 |  if_ne	sub	fp, #12
2576c     40 06 90 5D |  if_ne	jmp	#LR__3893
25770     04 4E 05 F1 | 	add	fp, #4
25774     A7 18 02 FB | 	rdlong	arg04, fp
25778     04 4E 05 F1 | 	add	fp, #4
2577c     A7 16 02 FB | 	rdlong	arg03, fp
25780     08 4E 85 F1 | 	sub	fp, #8
25784     0C 18 06 F1 | 	add	arg04, #12
25788     0C 19 02 FB | 	rdlong	arg04, arg04
2578c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
25790     3C 00 90 ED |  if_be	jmp	#LR__3871
25794     04 4E 05 F1 | 	add	fp, #4
25798     A7 16 02 FB | 	rdlong	arg03, fp
2579c     04 4E 85 F1 | 	sub	fp, #4
257a0     10 16 06 F1 | 	add	arg03, #16
257a4     0B 17 C2 FA | 	rdbyte	arg03, arg03
257a8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
257ac     02 16 CE F7 | 	test	arg03, #2 wz
257b0     1C 00 90 5D |  if_ne	jmp	#LR__3871
257b4     04 4E 05 F1 | 	add	fp, #4
257b8     A7 16 02 FB | 	rdlong	arg03, fp
257bc     0C 16 06 F1 | 	add	arg03, #12
257c0     0B 17 02 FB | 	rdlong	arg03, arg03
257c4     04 4E 05 F1 | 	add	fp, #4
257c8     A7 16 62 FC | 	wrlong	arg03, fp
257cc     08 4E 85 F1 | 	sub	fp, #8
257d0                 | LR__3871
257d0     04 4E 05 F1 | 	add	fp, #4
257d4     A7 16 02 FB | 	rdlong	arg03, fp
257d8     14 16 06 F1 | 	add	arg03, #20
257dc     0B 17 02 FB | 	rdlong	arg03, arg03
257e0     1C 4E 05 F1 | 	add	fp, #28
257e4     A7 16 62 FC | 	wrlong	arg03, fp
257e8     1C 4E 85 F1 | 	sub	fp, #28
257ec     A7 16 02 FB | 	rdlong	arg03, fp
257f0     18 4E 05 F1 | 	add	fp, #24
257f4     A7 00 68 FC | 	wrlong	#0, fp
257f8     14 16 06 F1 | 	add	arg03, #20
257fc     0B 01 68 FC | 	wrlong	#0, arg03
25800     14 4E 85 F1 | 	sub	fp, #20
25804     A7 16 02 FB | 	rdlong	arg03, fp
25808     08 4E 85 F1 | 	sub	fp, #8
2580c     01 16 16 F2 | 	cmp	arg03, #1 wc
25810     E4 03 90 CD |  if_b	jmp	#LR__3887
25814     10 4E 05 F1 | 	add	fp, #16
25818     A7 16 02 FB | 	rdlong	arg03, fp
2581c     0A 16 06 F1 | 	add	arg03, #10
25820     0B 19 E2 FA | 	rdword	arg04, arg03
25824     09 18 66 F0 | 	shl	arg04, #9
25828     08 4E 05 F1 | 	add	fp, #8
2582c     A7 18 62 FC | 	wrlong	arg04, fp
25830     08 4E 05 F1 | 	add	fp, #8
25834     A7 18 02 FB | 	rdlong	arg04, fp
25838     20 4E 85 F1 | 	sub	fp, #32
2583c     01 18 16 F2 | 	cmp	arg04, #1 wc
25840     AC 00 90 CD |  if_b	jmp	#LR__3872
25844     08 4E 05 F1 | 	add	fp, #8
25848     A7 18 02 FB | 	rdlong	arg04, fp
2584c     01 18 86 F1 | 	sub	arg04, #1
25850     10 4E 05 F1 | 	add	fp, #16
25854     A7 16 02 FB | 	rdlong	arg03, fp
25858     0B 19 12 FD | 	qdiv	arg04, arg03
2585c     08 4E 05 F1 | 	add	fp, #8
25860     A7 FA 01 FB | 	rdlong	result1, fp
25864     01 FA 85 F1 | 	sub	result1, #1
25868     18 18 62 FD | 	getqx	arg04
2586c     0B FB 11 FD | 	qdiv	result1, arg03
25870     20 4E 85 F1 | 	sub	fp, #32
25874     18 16 62 FD | 	getqx	arg03
25878     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2587c     70 00 90 CD |  if_b	jmp	#LR__3872
25880     04 4E 05 F1 | 	add	fp, #4
25884     A7 16 02 FB | 	rdlong	arg03, fp
25888     1C 4E 05 F1 | 	add	fp, #28
2588c     A7 FA 01 FB | 	rdlong	result1, fp
25890     01 FA 85 F1 | 	sub	result1, #1
25894     08 4E 85 F1 | 	sub	fp, #8
25898     A7 18 02 FB | 	rdlong	arg04, fp
2589c     01 18 86 F1 | 	sub	arg04, #1
258a0     0C FB 21 F5 | 	andn	result1, arg04
258a4     14 16 06 F1 | 	add	arg03, #20
258a8     0B FB 61 FC | 	wrlong	result1, arg03
258ac     10 4E 85 F1 | 	sub	fp, #16
258b0     A7 16 02 FB | 	rdlong	arg03, fp
258b4     04 4E 85 F1 | 	sub	fp, #4
258b8     A7 18 02 FB | 	rdlong	arg04, fp
258bc     14 18 06 F1 | 	add	arg04, #20
258c0     0C 19 02 FB | 	rdlong	arg04, arg04
258c4     0C 17 82 F1 | 	sub	arg03, arg04
258c8     04 4E 05 F1 | 	add	fp, #4
258cc     A7 16 62 FC | 	wrlong	arg03, fp
258d0     04 4E 85 F1 | 	sub	fp, #4
258d4     A7 16 02 FB | 	rdlong	arg03, fp
258d8     18 16 06 F1 | 	add	arg03, #24
258dc     0B 17 02 FB | 	rdlong	arg03, arg03
258e0     10 4E 05 F1 | 	add	fp, #16
258e4     A7 16 62 FC | 	wrlong	arg03, fp
258e8     14 4E 85 F1 | 	sub	fp, #20
258ec     D0 00 90 FD | 	jmp	#LR__3876
258f0                 | LR__3872
258f0     04 4E 05 F1 | 	add	fp, #4
258f4     A7 16 02 FB | 	rdlong	arg03, fp
258f8     08 16 06 F1 | 	add	arg03, #8
258fc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
25900     10 4E 05 F1 | 	add	fp, #16
25904     A7 16 62 FC | 	wrlong	arg03, fp
25908     14 4E 85 F1 | 	sub	fp, #20
2590c     94 00 90 5D |  if_ne	jmp	#LR__3875
25910     04 4E 05 F1 | 	add	fp, #4
25914     A7 12 02 FB | 	rdlong	arg01, fp
25918     04 4E 85 F1 | 	sub	fp, #4
2591c     00 14 06 F6 | 	mov	arg02, #0
25920     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
25924     14 4E 05 F1 | 	add	fp, #20
25928     A7 FA 61 FC | 	wrlong	result1, fp
2592c     14 4E 85 F1 | 	sub	fp, #20
25930     01 FA 0D F2 | 	cmp	result1, #1 wz
25934     1C 00 90 5D |  if_ne	jmp	#LR__3873
25938     04 4E 05 F1 | 	add	fp, #4
2593c     A7 16 02 FB | 	rdlong	arg03, fp
25940     04 4E 85 F1 | 	sub	fp, #4
25944     11 16 06 F1 | 	add	arg03, #17
25948     0B 05 48 FC | 	wrbyte	#2, arg03
2594c     02 FA 05 F6 | 	mov	result1, #2
25950     5C 04 90 FD | 	jmp	#LR__3893
25954                 | LR__3873
25954     14 4E 05 F1 | 	add	fp, #20
25958     A7 FA 01 FB | 	rdlong	result1, fp
2595c     14 4E 85 F1 | 	sub	fp, #20
25960     FF FF 7F FF 
25964     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25968     1C 00 90 5D |  if_ne	jmp	#LR__3874
2596c     04 4E 05 F1 | 	add	fp, #4
25970     A7 16 02 FB | 	rdlong	arg03, fp
25974     04 4E 85 F1 | 	sub	fp, #4
25978     11 16 06 F1 | 	add	arg03, #17
2597c     0B 03 48 FC | 	wrbyte	#1, arg03
25980     01 FA 05 F6 | 	mov	result1, #1
25984     28 04 90 FD | 	jmp	#LR__3893
25988                 | LR__3874
25988     04 4E 05 F1 | 	add	fp, #4
2598c     A7 16 02 FB | 	rdlong	arg03, fp
25990     10 4E 05 F1 | 	add	fp, #16
25994     A7 18 02 FB | 	rdlong	arg04, fp
25998     14 4E 85 F1 | 	sub	fp, #20
2599c     08 16 06 F1 | 	add	arg03, #8
259a0     0B 19 62 FC | 	wrlong	arg04, arg03
259a4                 | LR__3875
259a4     04 4E 05 F1 | 	add	fp, #4
259a8     A7 16 02 FB | 	rdlong	arg03, fp
259ac     10 4E 05 F1 | 	add	fp, #16
259b0     A7 18 02 FB | 	rdlong	arg04, fp
259b4     14 4E 85 F1 | 	sub	fp, #20
259b8     18 16 06 F1 | 	add	arg03, #24
259bc     0B 19 62 FC | 	wrlong	arg04, arg03
259c0                 | LR__3876
259c0     14 4E 05 F1 | 	add	fp, #20
259c4     A7 16 0A FB | 	rdlong	arg03, fp wz
259c8     14 4E 85 F1 | 	sub	fp, #20
259cc     28 02 90 AD |  if_e	jmp	#LR__3886
259d0                 | ' 				while (ofs > bcs) {
259d0                 | LR__3877
259d0     08 4E 05 F1 | 	add	fp, #8
259d4     A7 18 02 FB | 	rdlong	arg04, fp
259d8     10 4E 05 F1 | 	add	fp, #16
259dc     A7 16 02 FB | 	rdlong	arg03, fp
259e0     18 4E 85 F1 | 	sub	fp, #24
259e4     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
259e8     68 01 90 ED |  if_be	jmp	#LR__3883
259ec     08 4E 05 F1 | 	add	fp, #8
259f0     A7 18 02 FB | 	rdlong	arg04, fp
259f4     10 4E 05 F1 | 	add	fp, #16
259f8     A7 16 02 FB | 	rdlong	arg03, fp
259fc     0B 19 82 F1 | 	sub	arg04, arg03
25a00     10 4E 85 F1 | 	sub	fp, #16
25a04     A7 18 62 FC | 	wrlong	arg04, fp
25a08     04 4E 85 F1 | 	sub	fp, #4
25a0c     A7 18 02 FB | 	rdlong	arg04, fp
25a10     0C FB 01 F6 | 	mov	result1, arg04
25a14     14 18 06 F1 | 	add	arg04, #20
25a18     0C 19 02 FB | 	rdlong	arg04, arg04
25a1c     14 4E 05 F1 | 	add	fp, #20
25a20     A7 16 02 FB | 	rdlong	arg03, fp
25a24     0B 19 02 F1 | 	add	arg04, arg03
25a28     14 FA 05 F1 | 	add	result1, #20
25a2c     FD 18 62 FC | 	wrlong	arg04, result1
25a30     14 4E 85 F1 | 	sub	fp, #20
25a34     A7 16 02 FB | 	rdlong	arg03, fp
25a38     04 4E 85 F1 | 	sub	fp, #4
25a3c     10 16 06 F1 | 	add	arg03, #16
25a40     0B 17 C2 FA | 	rdbyte	arg03, arg03
25a44     02 16 CE F7 | 	test	arg03, #2 wz
25a48     3C 00 90 AD |  if_e	jmp	#LR__3878
25a4c     04 4E 05 F1 | 	add	fp, #4
25a50     A7 12 02 FB | 	rdlong	arg01, fp
25a54     10 4E 05 F1 | 	add	fp, #16
25a58     A7 14 02 FB | 	rdlong	arg02, fp
25a5c     14 4E 85 F1 | 	sub	fp, #20
25a60     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
25a64     14 4E 05 F1 | 	add	fp, #20
25a68     A7 FA 61 FC | 	wrlong	result1, fp
25a6c     00 FA 4D F2 | 	cmps	result1, #0 wz
25a70     14 4E 85 F1 | 	sub	fp, #20
25a74     08 4E 05 A1 |  if_e	add	fp, #8
25a78     A7 00 68 AC |  if_e	wrlong	#0, fp
25a7c     08 4E 85 A1 |  if_e	sub	fp, #8
25a80                 | ' 							ofs = 0; break;
25a80     D0 00 90 AD |  if_e	jmp	#LR__3883
25a84     24 00 90 FD | 	jmp	#LR__3879
25a88                 | LR__3878
25a88     04 4E 05 F1 | 	add	fp, #4
25a8c     A7 12 02 FB | 	rdlong	arg01, fp
25a90     10 4E 05 F1 | 	add	fp, #16
25a94     A7 14 02 FB | 	rdlong	arg02, fp
25a98     14 4E 85 F1 | 	sub	fp, #20
25a9c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
25aa0     14 4E 05 F1 | 	add	fp, #20
25aa4     A7 FA 61 FC | 	wrlong	result1, fp
25aa8     14 4E 85 F1 | 	sub	fp, #20
25aac                 | LR__3879
25aac     14 4E 05 F1 | 	add	fp, #20
25ab0     A7 16 02 FB | 	rdlong	arg03, fp
25ab4     14 4E 85 F1 | 	sub	fp, #20
25ab8     FF FF 7F FF 
25abc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25ac0     1C 00 90 5D |  if_ne	jmp	#LR__3880
25ac4     04 4E 05 F1 | 	add	fp, #4
25ac8     A7 16 02 FB | 	rdlong	arg03, fp
25acc     04 4E 85 F1 | 	sub	fp, #4
25ad0     11 16 06 F1 | 	add	arg03, #17
25ad4     0B 03 48 FC | 	wrbyte	#1, arg03
25ad8     01 FA 05 F6 | 	mov	result1, #1
25adc     D0 02 90 FD | 	jmp	#LR__3893
25ae0                 | LR__3880
25ae0     14 4E 05 F1 | 	add	fp, #20
25ae4     A7 16 02 FB | 	rdlong	arg03, fp
25ae8     14 4E 85 F1 | 	sub	fp, #20
25aec     02 16 16 F2 | 	cmp	arg03, #2 wc
25af0     24 00 90 CD |  if_b	jmp	#LR__3881
25af4     10 4E 05 F1 | 	add	fp, #16
25af8     A7 18 02 FB | 	rdlong	arg04, fp
25afc     04 4E 05 F1 | 	add	fp, #4
25b00     A7 16 02 FB | 	rdlong	arg03, fp
25b04     14 4E 85 F1 | 	sub	fp, #20
25b08     18 18 06 F1 | 	add	arg04, #24
25b0c     0C 19 02 FB | 	rdlong	arg04, arg04
25b10     0C 17 12 F2 | 	cmp	arg03, arg04 wc
25b14     1C 00 90 CD |  if_b	jmp	#LR__3882
25b18                 | LR__3881
25b18     04 4E 05 F1 | 	add	fp, #4
25b1c     A7 16 02 FB | 	rdlong	arg03, fp
25b20     04 4E 85 F1 | 	sub	fp, #4
25b24     11 16 06 F1 | 	add	arg03, #17
25b28     0B 05 48 FC | 	wrbyte	#2, arg03
25b2c     02 FA 05 F6 | 	mov	result1, #2
25b30     7C 02 90 FD | 	jmp	#LR__3893
25b34                 | LR__3882
25b34     04 4E 05 F1 | 	add	fp, #4
25b38     A7 18 02 FB | 	rdlong	arg04, fp
25b3c     10 4E 05 F1 | 	add	fp, #16
25b40     A7 16 02 FB | 	rdlong	arg03, fp
25b44     14 4E 85 F1 | 	sub	fp, #20
25b48     18 18 06 F1 | 	add	arg04, #24
25b4c     0C 17 62 FC | 	wrlong	arg03, arg04
25b50     7C FE 9F FD | 	jmp	#LR__3877
25b54                 | LR__3883
25b54     04 4E 05 F1 | 	add	fp, #4
25b58     A7 16 02 FB | 	rdlong	arg03, fp
25b5c     0B 13 02 F6 | 	mov	arg01, arg03
25b60     14 16 06 F1 | 	add	arg03, #20
25b64     0B 15 02 FB | 	rdlong	arg02, arg03
25b68     04 4E 05 F1 | 	add	fp, #4
25b6c     A7 16 02 FB | 	rdlong	arg03, fp
25b70     0B 15 02 F1 | 	add	arg02, arg03
25b74     14 12 06 F1 | 	add	arg01, #20
25b78     09 15 62 FC | 	wrlong	arg02, arg01
25b7c     A7 16 02 FB | 	rdlong	arg03, fp
25b80     08 4E 85 F1 | 	sub	fp, #8
25b84     FF 17 CE F7 | 	test	arg03, #511 wz
25b88     6C 00 90 AD |  if_e	jmp	#LR__3885
25b8c     10 4E 05 F1 | 	add	fp, #16
25b90     A7 12 02 FB | 	rdlong	arg01, fp
25b94     04 4E 05 F1 | 	add	fp, #4
25b98     A7 14 02 FB | 	rdlong	arg02, fp
25b9c     14 4E 85 F1 | 	sub	fp, #20
25ba0     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
25ba4     1C 4E 05 F1 | 	add	fp, #28
25ba8     A7 FA 61 FC | 	wrlong	result1, fp
25bac     1C 4E 85 F1 | 	sub	fp, #28
25bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
25bb4     1C 00 90 5D |  if_ne	jmp	#LR__3884
25bb8     04 4E 05 F1 | 	add	fp, #4
25bbc     A7 16 02 FB | 	rdlong	arg03, fp
25bc0     04 4E 85 F1 | 	sub	fp, #4
25bc4     11 16 06 F1 | 	add	arg03, #17
25bc8     0B 05 48 FC | 	wrbyte	#2, arg03
25bcc     02 FA 05 F6 | 	mov	result1, #2
25bd0     DC 01 90 FD | 	jmp	#LR__3893
25bd4                 | LR__3884
25bd4     1C 4E 05 F1 | 	add	fp, #28
25bd8     A7 18 02 FB | 	rdlong	arg04, fp
25bdc     14 4E 85 F1 | 	sub	fp, #20
25be0     A7 16 02 FB | 	rdlong	arg03, fp
25be4     09 16 46 F0 | 	shr	arg03, #9
25be8     0B 19 02 F1 | 	add	arg04, arg03
25bec     14 4E 05 F1 | 	add	fp, #20
25bf0     A7 18 62 FC | 	wrlong	arg04, fp
25bf4     1C 4E 85 F1 | 	sub	fp, #28
25bf8                 | LR__3885
25bf8                 | LR__3886
25bf8                 | LR__3887
25bf8     04 4E 05 F1 | 	add	fp, #4
25bfc     A7 18 02 FB | 	rdlong	arg04, fp
25c00     0C 17 02 F6 | 	mov	arg03, arg04
25c04     04 4E 85 F1 | 	sub	fp, #4
25c08     14 16 06 F1 | 	add	arg03, #20
25c0c     0B 17 02 FB | 	rdlong	arg03, arg03
25c10     0C 18 06 F1 | 	add	arg04, #12
25c14     0C 19 02 FB | 	rdlong	arg04, arg04
25c18     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
25c1c     3C 00 90 ED |  if_be	jmp	#LR__3888
25c20     04 4E 05 F1 | 	add	fp, #4
25c24     A7 18 02 FB | 	rdlong	arg04, fp
25c28     0C 17 02 F6 | 	mov	arg03, arg04
25c2c     14 18 06 F1 | 	add	arg04, #20
25c30     0C 19 02 FB | 	rdlong	arg04, arg04
25c34     0C 16 06 F1 | 	add	arg03, #12
25c38     0B 19 62 FC | 	wrlong	arg04, arg03
25c3c     A7 18 02 FB | 	rdlong	arg04, fp
25c40     0C 17 02 F6 | 	mov	arg03, arg04
25c44     04 4E 85 F1 | 	sub	fp, #4
25c48     10 18 06 F1 | 	add	arg04, #16
25c4c     0C 19 C2 FA | 	rdbyte	arg04, arg04
25c50     40 18 46 F5 | 	or	arg04, #64
25c54     10 16 06 F1 | 	add	arg03, #16
25c58     0B 19 42 FC | 	wrbyte	arg04, arg03
25c5c                 | LR__3888
25c5c     04 4E 05 F1 | 	add	fp, #4
25c60     A7 16 02 FB | 	rdlong	arg03, fp
25c64     04 4E 85 F1 | 	sub	fp, #4
25c68     14 16 06 F1 | 	add	arg03, #20
25c6c     0B 17 02 FB | 	rdlong	arg03, arg03
25c70     FF 17 CE F7 | 	test	arg03, #511 wz
25c74     2C 01 90 AD |  if_e	jmp	#LR__3892
25c78     04 4E 05 F1 | 	add	fp, #4
25c7c     A7 18 02 FB | 	rdlong	arg04, fp
25c80     18 4E 05 F1 | 	add	fp, #24
25c84     A7 16 02 FB | 	rdlong	arg03, fp
25c88     1C 4E 85 F1 | 	sub	fp, #28
25c8c     1C 18 06 F1 | 	add	arg04, #28
25c90     0C 19 02 FB | 	rdlong	arg04, arg04
25c94     0C 17 0A F2 | 	cmp	arg03, arg04 wz
25c98     08 01 90 AD |  if_e	jmp	#LR__3892
25c9c     04 4E 05 F1 | 	add	fp, #4
25ca0     A7 16 02 FB | 	rdlong	arg03, fp
25ca4     04 4E 85 F1 | 	sub	fp, #4
25ca8     10 16 06 F1 | 	add	arg03, #16
25cac     0B 17 C2 FA | 	rdbyte	arg03, arg03
25cb0     80 16 CE F7 | 	test	arg03, #128 wz
25cb4     7C 00 90 AD |  if_e	jmp	#LR__3890
25cb8     10 4E 05 F1 | 	add	fp, #16
25cbc     A7 16 02 FB | 	rdlong	arg03, fp
25cc0     01 16 06 F1 | 	add	arg03, #1
25cc4     0B 13 C2 FA | 	rdbyte	arg01, arg03
25cc8     0C 4E 85 F1 | 	sub	fp, #12
25ccc     A7 16 02 FB | 	rdlong	arg03, fp
25cd0     0B 15 02 F6 | 	mov	arg02, arg03
25cd4     28 14 06 F1 | 	add	arg02, #40
25cd8     04 4E 85 F1 | 	sub	fp, #4
25cdc     1C 16 06 F1 | 	add	arg03, #28
25ce0     0B 17 02 FB | 	rdlong	arg03, arg03
25ce4     01 18 06 F6 | 	mov	arg04, #1
25ce8     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
25cec     00 FA 0D F2 | 	cmp	result1, #0 wz
25cf0     1C 00 90 AD |  if_e	jmp	#LR__3889
25cf4     04 4E 05 F1 | 	add	fp, #4
25cf8     A7 16 02 FB | 	rdlong	arg03, fp
25cfc     04 4E 85 F1 | 	sub	fp, #4
25d00     11 16 06 F1 | 	add	arg03, #17
25d04     0B 03 48 FC | 	wrbyte	#1, arg03
25d08     01 FA 05 F6 | 	mov	result1, #1
25d0c     A0 00 90 FD | 	jmp	#LR__3893
25d10                 | LR__3889
25d10     04 4E 05 F1 | 	add	fp, #4
25d14     A7 18 02 FB | 	rdlong	arg04, fp
25d18     0C 17 02 F6 | 	mov	arg03, arg04
25d1c     04 4E 85 F1 | 	sub	fp, #4
25d20     10 18 06 F1 | 	add	arg04, #16
25d24     0C 19 C2 FA | 	rdbyte	arg04, arg04
25d28     7F 18 06 F5 | 	and	arg04, #127
25d2c     10 16 06 F1 | 	add	arg03, #16
25d30     0B 19 42 FC | 	wrbyte	arg04, arg03
25d34                 | LR__3890
25d34     10 4E 05 F1 | 	add	fp, #16
25d38     A7 16 02 FB | 	rdlong	arg03, fp
25d3c     01 16 06 F1 | 	add	arg03, #1
25d40     0B 13 C2 FA | 	rdbyte	arg01, arg03
25d44     0C 4E 85 F1 | 	sub	fp, #12
25d48     A7 14 02 FB | 	rdlong	arg02, fp
25d4c     28 14 06 F1 | 	add	arg02, #40
25d50     18 4E 05 F1 | 	add	fp, #24
25d54     A7 16 02 FB | 	rdlong	arg03, fp
25d58     1C 4E 85 F1 | 	sub	fp, #28
25d5c     01 18 06 F6 | 	mov	arg04, #1
25d60     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
25d64     00 FA 0D F2 | 	cmp	result1, #0 wz
25d68     1C 00 90 AD |  if_e	jmp	#LR__3891
25d6c     04 4E 05 F1 | 	add	fp, #4
25d70     A7 16 02 FB | 	rdlong	arg03, fp
25d74     04 4E 85 F1 | 	sub	fp, #4
25d78     11 16 06 F1 | 	add	arg03, #17
25d7c     0B 03 48 FC | 	wrbyte	#1, arg03
25d80     01 FA 05 F6 | 	mov	result1, #1
25d84     28 00 90 FD | 	jmp	#LR__3893
25d88                 | LR__3891
25d88     04 4E 05 F1 | 	add	fp, #4
25d8c     A7 18 02 FB | 	rdlong	arg04, fp
25d90     18 4E 05 F1 | 	add	fp, #24
25d94     A7 16 02 FB | 	rdlong	arg03, fp
25d98     1C 4E 85 F1 | 	sub	fp, #28
25d9c     1C 18 06 F1 | 	add	arg04, #28
25da0     0C 17 62 FC | 	wrlong	arg03, arg04
25da4                 | LR__3892
25da4                 | ' 
25da4                 | ' 			fp->sect = nsect;
25da4                 | ' 		}
25da4                 | ' 	}
25da4                 | ' 
25da4                 | ' 	return res ;
25da4     0C 4E 05 F1 | 	add	fp, #12
25da8     A7 FA 01 FB | 	rdlong	result1, fp
25dac     0C 4E 85 F1 | 	sub	fp, #12
25db0                 | LR__3893
25db0     A7 F0 03 F6 | 	mov	ptra, fp
25db4     B2 00 A0 FD | 	call	#popregs_
25db8                 | _fatfs_cc_f_lseek_ret
25db8     2D 00 64 FD | 	ret
25dbc                 | 
25dbc                 | _fatfs_cc_f_opendir
25dbc     01 4A 05 F6 | 	mov	COUNT_, #1
25dc0     A8 00 A0 FD | 	call	#pushregs_
25dc4     14 F0 07 F1 | 	add	ptra, #20
25dc8     04 4E 05 F1 | 	add	fp, #4
25dcc     A7 12 62 FC | 	wrlong	arg01, fp
25dd0     04 4E 05 F1 | 	add	fp, #4
25dd4     A7 14 62 FC | 	wrlong	arg02, fp
25dd8     04 4E 85 F1 | 	sub	fp, #4
25ddc     A7 16 0A FB | 	rdlong	arg03, fp wz
25de0     04 4E 85 F1 | 	sub	fp, #4
25de4     09 FA 05 A6 |  if_e	mov	result1, #9
25de8     78 01 90 AD |  if_e	jmp	#LR__3906
25dec     08 4E 05 F1 | 	add	fp, #8
25df0     A7 12 02 F6 | 	mov	arg01, fp
25df4     08 4E 05 F1 | 	add	fp, #8
25df8     A7 14 02 F6 | 	mov	arg02, fp
25dfc     10 4E 85 F1 | 	sub	fp, #16
25e00     00 16 06 F6 | 	mov	arg03, #0
25e04     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
25e08     0C 4E 05 F1 | 	add	fp, #12
25e0c     A7 FA 61 FC | 	wrlong	result1, fp
25e10     0C 4E 85 F1 | 	sub	fp, #12
25e14     00 FA 0D F2 | 	cmp	result1, #0 wz
25e18     20 01 90 5D |  if_ne	jmp	#LR__3905
25e1c     04 4E 05 F1 | 	add	fp, #4
25e20     A7 16 02 FB | 	rdlong	arg03, fp
25e24     0C 4E 05 F1 | 	add	fp, #12
25e28     A7 FA 01 FB | 	rdlong	result1, fp
25e2c     0B FB 61 FC | 	wrlong	result1, arg03
25e30     0C 4E 85 F1 | 	sub	fp, #12
25e34     A7 12 02 FB | 	rdlong	arg01, fp
25e38     04 4E 05 F1 | 	add	fp, #4
25e3c     A7 14 02 FB | 	rdlong	arg02, fp
25e40     08 4E 85 F1 | 	sub	fp, #8
25e44     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
25e48     0C 4E 05 F1 | 	add	fp, #12
25e4c     A7 FA 61 FC | 	wrlong	result1, fp
25e50     0C 4E 85 F1 | 	sub	fp, #12
25e54     00 FA 0D F2 | 	cmp	result1, #0 wz
25e58     C4 00 90 5D |  if_ne	jmp	#LR__3904
25e5c     04 4E 05 F1 | 	add	fp, #4
25e60     A7 16 02 FB | 	rdlong	arg03, fp
25e64     04 4E 85 F1 | 	sub	fp, #4
25e68     2B 16 06 F1 | 	add	arg03, #43
25e6c     0B 17 C2 FA | 	rdbyte	arg03, arg03
25e70     80 16 CE F7 | 	test	arg03, #128 wz
25e74     58 00 90 5D |  if_ne	jmp	#LR__3902
25e78     04 4E 05 F1 | 	add	fp, #4
25e7c     A7 16 02 FB | 	rdlong	arg03, fp
25e80     04 4E 85 F1 | 	sub	fp, #4
25e84     06 16 06 F1 | 	add	arg03, #6
25e88     0B 17 C2 FA | 	rdbyte	arg03, arg03
25e8c     10 16 CE F7 | 	test	arg03, #16 wz
25e90     30 00 90 AD |  if_e	jmp	#LR__3900
25e94     04 4E 05 F1 | 	add	fp, #4
25e98     A7 16 02 FB | 	rdlong	arg03, fp
25e9c     0B 1F 02 F6 | 	mov	local01, arg03
25ea0     0C 4E 05 F1 | 	add	fp, #12
25ea4     A7 12 02 FB | 	rdlong	arg01, fp
25ea8     10 4E 85 F1 | 	sub	fp, #16
25eac     1C 16 06 F1 | 	add	arg03, #28
25eb0     0B 15 02 FB | 	rdlong	arg02, arg03
25eb4     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
25eb8     08 1E 06 F1 | 	add	local01, #8
25ebc     0F FB 61 FC | 	wrlong	result1, local01
25ec0     0C 00 90 FD | 	jmp	#LR__3901
25ec4                 | LR__3900
25ec4     0C 4E 05 F1 | 	add	fp, #12
25ec8     A7 0A 68 FC | 	wrlong	#5, fp
25ecc     0C 4E 85 F1 | 	sub	fp, #12
25ed0                 | LR__3901
25ed0                 | LR__3902
25ed0     0C 4E 05 F1 | 	add	fp, #12
25ed4     A7 1E 0A FB | 	rdlong	local01, fp wz
25ed8     0C 4E 85 F1 | 	sub	fp, #12
25edc     40 00 90 5D |  if_ne	jmp	#LR__3903
25ee0     04 4E 05 F1 | 	add	fp, #4
25ee4     A7 1E 02 FB | 	rdlong	local01, fp
25ee8     0C 4E 05 F1 | 	add	fp, #12
25eec     A7 16 02 FB | 	rdlong	arg03, fp
25ef0     06 16 06 F1 | 	add	arg03, #6
25ef4     0B 17 E2 FA | 	rdword	arg03, arg03
25ef8     04 1E 06 F1 | 	add	local01, #4
25efc     0F 17 52 FC | 	wrword	arg03, local01
25f00     0C 4E 85 F1 | 	sub	fp, #12
25f04     A7 12 02 FB | 	rdlong	arg01, fp
25f08     04 4E 85 F1 | 	sub	fp, #4
25f0c     00 14 06 F6 | 	mov	arg02, #0
25f10     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
25f14     0C 4E 05 F1 | 	add	fp, #12
25f18     A7 FA 61 FC | 	wrlong	result1, fp
25f1c     0C 4E 85 F1 | 	sub	fp, #12
25f20                 | LR__3903
25f20                 | LR__3904
25f20     0C 4E 05 F1 | 	add	fp, #12
25f24     A7 1E 02 FB | 	rdlong	local01, fp
25f28     0C 4E 85 F1 | 	sub	fp, #12
25f2c     04 1E 0E F2 | 	cmp	local01, #4 wz
25f30     0C 4E 05 A1 |  if_e	add	fp, #12
25f34     A7 0A 68 AC |  if_e	wrlong	#5, fp
25f38     0C 4E 85 A1 |  if_e	sub	fp, #12
25f3c                 | LR__3905
25f3c     0C 4E 05 F1 | 	add	fp, #12
25f40     A7 1E 0A FB | 	rdlong	local01, fp wz
25f44     0C 4E 85 F1 | 	sub	fp, #12
25f48     04 4E 05 51 |  if_ne	add	fp, #4
25f4c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
25f50     04 4E 85 51 |  if_ne	sub	fp, #4
25f54     0F 01 68 5C |  if_ne	wrlong	#0, local01
25f58                 | ' 
25f58                 | ' 	return res ;
25f58     0C 4E 05 F1 | 	add	fp, #12
25f5c     A7 FA 01 FB | 	rdlong	result1, fp
25f60     0C 4E 85 F1 | 	sub	fp, #12
25f64                 | LR__3906
25f64     A7 F0 03 F6 | 	mov	ptra, fp
25f68     B2 00 A0 FD | 	call	#popregs_
25f6c                 | _fatfs_cc_f_opendir_ret
25f6c     2D 00 64 FD | 	ret
25f70                 | 
25f70                 | _fatfs_cc_f_closedir
25f70     00 4A 05 F6 | 	mov	COUNT_, #0
25f74     A8 00 A0 FD | 	call	#pushregs_
25f78     10 F0 07 F1 | 	add	ptra, #16
25f7c     04 4E 05 F1 | 	add	fp, #4
25f80     A7 12 62 FC | 	wrlong	arg01, fp
25f84     08 4E 05 F1 | 	add	fp, #8
25f88     A7 14 02 F6 | 	mov	arg02, fp
25f8c     0C 4E 85 F1 | 	sub	fp, #12
25f90     C0 DD BF FD | 	call	#_fatfs_cc_validate
25f94     08 4E 05 F1 | 	add	fp, #8
25f98     A7 FA 61 FC | 	wrlong	result1, fp
25f9c     08 4E 85 F1 | 	sub	fp, #8
25fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
25fa4     04 4E 05 A1 |  if_e	add	fp, #4
25fa8     A7 FA 01 AB |  if_e	rdlong	result1, fp
25fac     04 4E 85 A1 |  if_e	sub	fp, #4
25fb0     FD 00 68 AC |  if_e	wrlong	#0, result1
25fb4                 | ' 
25fb4                 | ' 
25fb4                 | ' 
25fb4                 | ' 
25fb4                 | ' 		dp->obj.fs = 0;
25fb4                 | ' #line 4633 "ff.c"
25fb4                 | ' 	}
25fb4                 | ' 	return res;
25fb4     08 4E 05 F1 | 	add	fp, #8
25fb8     A7 FA 01 FB | 	rdlong	result1, fp
25fbc     08 4E 85 F1 | 	sub	fp, #8
25fc0     A7 F0 03 F6 | 	mov	ptra, fp
25fc4     B2 00 A0 FD | 	call	#popregs_
25fc8                 | _fatfs_cc_f_closedir_ret
25fc8     2D 00 64 FD | 	ret
25fcc                 | 
25fcc                 | _fatfs_cc_f_readdir
25fcc     00 4A 05 F6 | 	mov	COUNT_, #0
25fd0     A8 00 A0 FD | 	call	#pushregs_
25fd4     14 F0 07 F1 | 	add	ptra, #20
25fd8     04 4E 05 F1 | 	add	fp, #4
25fdc     A7 12 62 FC | 	wrlong	arg01, fp
25fe0     04 4E 05 F1 | 	add	fp, #4
25fe4     A7 14 62 FC | 	wrlong	arg02, fp
25fe8     04 4E 85 F1 | 	sub	fp, #4
25fec     A7 12 02 FB | 	rdlong	arg01, fp
25ff0     0C 4E 05 F1 | 	add	fp, #12
25ff4     A7 14 02 F6 | 	mov	arg02, fp
25ff8     10 4E 85 F1 | 	sub	fp, #16
25ffc     54 DD BF FD | 	call	#_fatfs_cc_validate
26000     0C 4E 05 F1 | 	add	fp, #12
26004     A7 FA 61 FC | 	wrlong	result1, fp
26008     0C 4E 85 F1 | 	sub	fp, #12
2600c     00 FA 0D F2 | 	cmp	result1, #0 wz
26010     BC 00 90 5D |  if_ne	jmp	#LR__3913
26014     08 4E 05 F1 | 	add	fp, #8
26018     A7 FA 09 FB | 	rdlong	result1, fp wz
2601c     08 4E 85 F1 | 	sub	fp, #8
26020     24 00 90 5D |  if_ne	jmp	#LR__3910
26024     04 4E 05 F1 | 	add	fp, #4
26028     A7 12 02 FB | 	rdlong	arg01, fp
2602c     04 4E 85 F1 | 	sub	fp, #4
26030     00 14 06 F6 | 	mov	arg02, #0
26034     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
26038     0C 4E 05 F1 | 	add	fp, #12
2603c     A7 FA 61 FC | 	wrlong	result1, fp
26040     0C 4E 85 F1 | 	sub	fp, #12
26044     88 00 90 FD | 	jmp	#LR__3912
26048                 | LR__3910
26048     04 4E 05 F1 | 	add	fp, #4
2604c     A7 12 02 FB | 	rdlong	arg01, fp
26050     04 4E 85 F1 | 	sub	fp, #4
26054     00 14 06 F6 | 	mov	arg02, #0
26058     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2605c     0C 4E 05 F1 | 	add	fp, #12
26060     A7 FA 61 FC | 	wrlong	result1, fp
26064     0C 4E 85 F1 | 	sub	fp, #12
26068     04 FA 0D F2 | 	cmp	result1, #4 wz
2606c     0C 4E 05 A1 |  if_e	add	fp, #12
26070     A7 00 68 AC |  if_e	wrlong	#0, fp
26074     0C 4E 85 A1 |  if_e	sub	fp, #12
26078     0C 4E 05 F1 | 	add	fp, #12
2607c     A7 FA 09 FB | 	rdlong	result1, fp wz
26080     0C 4E 85 F1 | 	sub	fp, #12
26084     48 00 90 5D |  if_ne	jmp	#LR__3911
26088     04 4E 05 F1 | 	add	fp, #4
2608c     A7 12 02 FB | 	rdlong	arg01, fp
26090     04 4E 05 F1 | 	add	fp, #4
26094     A7 14 02 FB | 	rdlong	arg02, fp
26098     08 4E 85 F1 | 	sub	fp, #8
2609c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
260a0     04 4E 05 F1 | 	add	fp, #4
260a4     A7 12 02 FB | 	rdlong	arg01, fp
260a8     04 4E 85 F1 | 	sub	fp, #4
260ac     00 14 06 F6 | 	mov	arg02, #0
260b0     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
260b4     0C 4E 05 F1 | 	add	fp, #12
260b8     A7 FA 61 FC | 	wrlong	result1, fp
260bc     0C 4E 85 F1 | 	sub	fp, #12
260c0     04 FA 0D F2 | 	cmp	result1, #4 wz
260c4     0C 4E 05 A1 |  if_e	add	fp, #12
260c8     A7 00 68 AC |  if_e	wrlong	#0, fp
260cc     0C 4E 85 A1 |  if_e	sub	fp, #12
260d0                 | LR__3911
260d0                 | LR__3912
260d0                 | LR__3913
260d0                 | ' 			}
260d0                 | ' 			;
260d0                 | ' 		}
260d0                 | ' 	}
260d0                 | ' 	return res ;
260d0     0C 4E 05 F1 | 	add	fp, #12
260d4     A7 FA 01 FB | 	rdlong	result1, fp
260d8     0C 4E 85 F1 | 	sub	fp, #12
260dc     A7 F0 03 F6 | 	mov	ptra, fp
260e0     B2 00 A0 FD | 	call	#popregs_
260e4                 | _fatfs_cc_f_readdir_ret
260e4     2D 00 64 FD | 	ret
260e8                 | 
260e8                 | _fatfs_cc_f_stat
260e8     00 4A 05 F6 | 	mov	COUNT_, #0
260ec     A8 00 A0 FD | 	call	#pushregs_
260f0     40 F0 07 F1 | 	add	ptra, #64
260f4     04 4E 05 F1 | 	add	fp, #4
260f8     A7 12 62 FC | 	wrlong	arg01, fp
260fc     04 4E 05 F1 | 	add	fp, #4
26100     A7 14 62 FC | 	wrlong	arg02, fp
26104     04 4E 85 F1 | 	sub	fp, #4
26108     A7 12 02 F6 | 	mov	arg01, fp
2610c     0C 4E 05 F1 | 	add	fp, #12
26110     A7 14 02 F6 | 	mov	arg02, fp
26114     10 4E 85 F1 | 	sub	fp, #16
26118     00 16 06 F6 | 	mov	arg03, #0
2611c     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
26120     0C 4E 05 F1 | 	add	fp, #12
26124     A7 FA 61 FC | 	wrlong	result1, fp
26128     0C 4E 85 F1 | 	sub	fp, #12
2612c     00 FA 0D F2 | 	cmp	result1, #0 wz
26130     74 00 90 5D |  if_ne	jmp	#LR__3923
26134     10 4E 05 F1 | 	add	fp, #16
26138     A7 12 02 F6 | 	mov	arg01, fp
2613c     0C 4E 85 F1 | 	sub	fp, #12
26140     A7 14 02 FB | 	rdlong	arg02, fp
26144     04 4E 85 F1 | 	sub	fp, #4
26148     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2614c     0C 4E 05 F1 | 	add	fp, #12
26150     A7 FA 61 FC | 	wrlong	result1, fp
26154     0C 4E 85 F1 | 	sub	fp, #12
26158     00 FA 0D F2 | 	cmp	result1, #0 wz
2615c     48 00 90 5D |  if_ne	jmp	#LR__3922
26160     3B 4E 05 F1 | 	add	fp, #59
26164     A7 FA C1 FA | 	rdbyte	result1, fp
26168     3B 4E 85 F1 | 	sub	fp, #59
2616c     80 FA CD F7 | 	test	result1, #128 wz
26170     0C 4E 05 51 |  if_ne	add	fp, #12
26174     A7 0C 68 5C |  if_ne	wrlong	#6, fp
26178     0C 4E 85 51 |  if_ne	sub	fp, #12
2617c     28 00 90 5D |  if_ne	jmp	#LR__3921
26180     08 4E 05 F1 | 	add	fp, #8
26184     A7 FA 09 FB | 	rdlong	result1, fp wz
26188     08 4E 85 F1 | 	sub	fp, #8
2618c     18 00 90 AD |  if_e	jmp	#LR__3920
26190     10 4E 05 F1 | 	add	fp, #16
26194     A7 12 02 F6 | 	mov	arg01, fp
26198     08 4E 85 F1 | 	sub	fp, #8
2619c     A7 14 02 FB | 	rdlong	arg02, fp
261a0     08 4E 85 F1 | 	sub	fp, #8
261a4     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
261a8                 | LR__3920
261a8                 | LR__3921
261a8                 | LR__3922
261a8                 | LR__3923
261a8                 | ' 			}
261a8                 | ' 		}
261a8                 | ' 		;
261a8                 | ' 	}
261a8                 | ' 
261a8                 | ' 	return res ;
261a8     0C 4E 05 F1 | 	add	fp, #12
261ac     A7 FA 01 FB | 	rdlong	result1, fp
261b0     0C 4E 85 F1 | 	sub	fp, #12
261b4     A7 F0 03 F6 | 	mov	ptra, fp
261b8     B2 00 A0 FD | 	call	#popregs_
261bc                 | _fatfs_cc_f_stat_ret
261bc     2D 00 64 FD | 	ret
261c0                 | 
261c0                 | _fatfs_cc_f_unlink
261c0     00 4A 05 F6 | 	mov	COUNT_, #0
261c4     A8 00 A0 FD | 	call	#pushregs_
261c8     74 F0 07 F1 | 	add	ptra, #116
261cc     04 4E 05 F1 | 	add	fp, #4
261d0     A7 12 62 FC | 	wrlong	arg01, fp
261d4     68 4E 05 F1 | 	add	fp, #104
261d8     A7 00 68 FC | 	wrlong	#0, fp
261dc     68 4E 85 F1 | 	sub	fp, #104
261e0     A7 12 02 F6 | 	mov	arg01, fp
261e4     6C 4E 05 F1 | 	add	fp, #108
261e8     A7 14 02 F6 | 	mov	arg02, fp
261ec     70 4E 85 F1 | 	sub	fp, #112
261f0     02 16 06 F6 | 	mov	arg03, #2
261f4     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
261f8     08 4E 05 F1 | 	add	fp, #8
261fc     A7 FA 61 FC | 	wrlong	result1, fp
26200     08 4E 85 F1 | 	sub	fp, #8
26204     00 FA 0D F2 | 	cmp	result1, #0 wz
26208     E4 01 90 5D |  if_ne	jmp	#LR__3938
2620c     70 4E 05 F1 | 	add	fp, #112
26210     A7 16 02 FB | 	rdlong	arg03, fp
26214     64 4E 85 F1 | 	sub	fp, #100
26218     A7 16 62 FC | 	wrlong	arg03, fp
2621c     A7 12 02 F6 | 	mov	arg01, fp
26220     08 4E 85 F1 | 	sub	fp, #8
26224     A7 14 02 FB | 	rdlong	arg02, fp
26228     04 4E 85 F1 | 	sub	fp, #4
2622c     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
26230     08 4E 05 F1 | 	add	fp, #8
26234     A7 FA 61 FC | 	wrlong	result1, fp
26238     00 FA 4D F2 | 	cmps	result1, #0 wz
2623c     08 4E 85 F1 | 	sub	fp, #8
26240     AC 01 90 5D |  if_ne	jmp	#LR__3937
26244     37 4E 05 F1 | 	add	fp, #55
26248     A7 FA C1 FA | 	rdbyte	result1, fp
2624c     37 4E 85 F1 | 	sub	fp, #55
26250     80 FA CD F7 | 	test	result1, #128 wz
26254     08 4E 05 51 |  if_ne	add	fp, #8
26258     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2625c     08 4E 85 51 |  if_ne	sub	fp, #8
26260     1C 00 90 5D |  if_ne	jmp	#LR__3930
26264     12 4E 05 F1 | 	add	fp, #18
26268     A7 FA C1 FA | 	rdbyte	result1, fp
2626c     12 4E 85 F1 | 	sub	fp, #18
26270     01 FA CD F7 | 	test	result1, #1 wz
26274     08 4E 05 51 |  if_ne	add	fp, #8
26278     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2627c     08 4E 85 51 |  if_ne	sub	fp, #8
26280                 | LR__3930
26280     08 4E 05 F1 | 	add	fp, #8
26284     A7 FA 09 FB | 	rdlong	result1, fp wz
26288     08 4E 85 F1 | 	sub	fp, #8
2628c     C8 00 90 5D |  if_ne	jmp	#LR__3933
26290     70 4E 05 F1 | 	add	fp, #112
26294     A7 12 02 FB | 	rdlong	arg01, fp
26298     48 4E 85 F1 | 	sub	fp, #72
2629c     A7 14 02 FB | 	rdlong	arg02, fp
262a0     28 4E 85 F1 | 	sub	fp, #40
262a4     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
262a8     6C 4E 05 F1 | 	add	fp, #108
262ac     A7 FA 61 FC | 	wrlong	result1, fp
262b0     5A 4E 85 F1 | 	sub	fp, #90
262b4     A7 FA C1 FA | 	rdbyte	result1, fp
262b8     12 4E 85 F1 | 	sub	fp, #18
262bc     10 FA CD F7 | 	test	result1, #16 wz
262c0     94 00 90 AD |  if_e	jmp	#LR__3932
262c4     70 4E 05 F1 | 	add	fp, #112
262c8     A7 FA 01 FB | 	rdlong	result1, fp
262cc     34 4E 85 F1 | 	sub	fp, #52
262d0     A7 FA 61 FC | 	wrlong	result1, fp
262d4     30 4E 05 F1 | 	add	fp, #48
262d8     A7 16 02 FB | 	rdlong	arg03, fp
262dc     28 4E 85 F1 | 	sub	fp, #40
262e0     A7 16 62 FC | 	wrlong	arg03, fp
262e4     08 4E 85 F1 | 	sub	fp, #8
262e8     A7 12 02 F6 | 	mov	arg01, fp
262ec     3C 4E 85 F1 | 	sub	fp, #60
262f0     00 14 06 F6 | 	mov	arg02, #0
262f4     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
262f8     08 4E 05 F1 | 	add	fp, #8
262fc     A7 FA 61 FC | 	wrlong	result1, fp
26300     08 4E 85 F1 | 	sub	fp, #8
26304     00 FA 0D F2 | 	cmp	result1, #0 wz
26308     4C 00 90 5D |  if_ne	jmp	#LR__3931
2630c     3C 4E 05 F1 | 	add	fp, #60
26310     A7 12 02 F6 | 	mov	arg01, fp
26314     3C 4E 85 F1 | 	sub	fp, #60
26318     00 14 06 F6 | 	mov	arg02, #0
2631c     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
26320     08 4E 05 F1 | 	add	fp, #8
26324     A7 FA 61 FC | 	wrlong	result1, fp
26328     00 FA 4D F2 | 	cmps	result1, #0 wz
2632c     08 4E 85 F1 | 	sub	fp, #8
26330     08 4E 05 A1 |  if_e	add	fp, #8
26334     A7 0E 68 AC |  if_e	wrlong	#7, fp
26338     08 4E 85 A1 |  if_e	sub	fp, #8
2633c     08 4E 05 F1 | 	add	fp, #8
26340     A7 FA 01 FB | 	rdlong	result1, fp
26344     08 4E 85 F1 | 	sub	fp, #8
26348     04 FA 0D F2 | 	cmp	result1, #4 wz
2634c     08 4E 05 A1 |  if_e	add	fp, #8
26350     A7 00 68 AC |  if_e	wrlong	#0, fp
26354     08 4E 85 A1 |  if_e	sub	fp, #8
26358                 | LR__3931
26358                 | LR__3932
26358                 | LR__3933
26358     08 4E 05 F1 | 	add	fp, #8
2635c     A7 FA 09 FB | 	rdlong	result1, fp wz
26360     08 4E 85 F1 | 	sub	fp, #8
26364     88 00 90 5D |  if_ne	jmp	#LR__3936
26368     0C 4E 05 F1 | 	add	fp, #12
2636c     A7 12 02 F6 | 	mov	arg01, fp
26370     0C 4E 85 F1 | 	sub	fp, #12
26374     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
26378     08 4E 05 F1 | 	add	fp, #8
2637c     A7 FA 61 FC | 	wrlong	result1, fp
26380     08 4E 85 F1 | 	sub	fp, #8
26384     00 FA 0D F2 | 	cmp	result1, #0 wz
26388     38 00 90 5D |  if_ne	jmp	#LR__3934
2638c     6C 4E 05 F1 | 	add	fp, #108
26390     A7 FA 09 FB | 	rdlong	result1, fp wz
26394     6C 4E 85 F1 | 	sub	fp, #108
26398     28 00 90 AD |  if_e	jmp	#LR__3934
2639c     0C 4E 05 F1 | 	add	fp, #12
263a0     A7 12 02 F6 | 	mov	arg01, fp
263a4     60 4E 05 F1 | 	add	fp, #96
263a8     A7 14 02 FB | 	rdlong	arg02, fp
263ac     6C 4E 85 F1 | 	sub	fp, #108
263b0     00 16 06 F6 | 	mov	arg03, #0
263b4     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
263b8     08 4E 05 F1 | 	add	fp, #8
263bc     A7 FA 61 FC | 	wrlong	result1, fp
263c0     08 4E 85 F1 | 	sub	fp, #8
263c4                 | LR__3934
263c4     08 4E 05 F1 | 	add	fp, #8
263c8     A7 FA 09 FB | 	rdlong	result1, fp wz
263cc     08 4E 85 F1 | 	sub	fp, #8
263d0     1C 00 90 5D |  if_ne	jmp	#LR__3935
263d4     70 4E 05 F1 | 	add	fp, #112
263d8     A7 12 02 FB | 	rdlong	arg01, fp
263dc     70 4E 85 F1 | 	sub	fp, #112
263e0     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
263e4     08 4E 05 F1 | 	add	fp, #8
263e8     A7 FA 61 FC | 	wrlong	result1, fp
263ec     08 4E 85 F1 | 	sub	fp, #8
263f0                 | LR__3935
263f0                 | LR__3936
263f0                 | LR__3937
263f0                 | LR__3938
263f0                 | ' 			}
263f0                 | ' 		}
263f0                 | ' 		;
263f0                 | ' 	}
263f0                 | ' 
263f0                 | ' 	return res ;
263f0     08 4E 05 F1 | 	add	fp, #8
263f4     A7 FA 01 FB | 	rdlong	result1, fp
263f8     08 4E 85 F1 | 	sub	fp, #8
263fc     A7 F0 03 F6 | 	mov	ptra, fp
26400     B2 00 A0 FD | 	call	#popregs_
26404                 | _fatfs_cc_f_unlink_ret
26404     2D 00 64 FD | 	ret
26408                 | 
26408                 | _fatfs_cc_f_mkdir
26408     00 4A 05 F6 | 	mov	COUNT_, #0
2640c     A8 00 A0 FD | 	call	#pushregs_
26410     5C F0 07 F1 | 	add	ptra, #92
26414     04 4E 05 F1 | 	add	fp, #4
26418     A7 12 62 FC | 	wrlong	arg01, fp
2641c     A7 12 02 F6 | 	mov	arg01, fp
26420     48 4E 05 F1 | 	add	fp, #72
26424     A7 14 02 F6 | 	mov	arg02, fp
26428     4C 4E 85 F1 | 	sub	fp, #76
2642c     02 16 06 F6 | 	mov	arg03, #2
26430     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
26434     08 4E 05 F1 | 	add	fp, #8
26438     A7 FA 61 FC | 	wrlong	result1, fp
2643c     08 4E 85 F1 | 	sub	fp, #8
26440     00 FA 0D F2 | 	cmp	result1, #0 wz
26444     C4 02 90 5D |  if_ne	jmp	#LR__3945
26448     4C 4E 05 F1 | 	add	fp, #76
2644c     A7 16 02 FB | 	rdlong	arg03, fp
26450     40 4E 85 F1 | 	sub	fp, #64
26454     A7 16 62 FC | 	wrlong	arg03, fp
26458     A7 12 02 F6 | 	mov	arg01, fp
2645c     08 4E 85 F1 | 	sub	fp, #8
26460     A7 14 02 FB | 	rdlong	arg02, fp
26464     04 4E 85 F1 | 	sub	fp, #4
26468     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2646c     08 4E 05 F1 | 	add	fp, #8
26470     A7 FA 61 FC | 	wrlong	result1, fp
26474     00 FA 4D F2 | 	cmps	result1, #0 wz
26478     08 4E 85 F1 | 	sub	fp, #8
2647c     08 4E 05 A1 |  if_e	add	fp, #8
26480     A7 10 68 AC |  if_e	wrlong	#8, fp
26484     08 4E 85 A1 |  if_e	sub	fp, #8
26488     08 4E 05 F1 | 	add	fp, #8
2648c     A7 FA 01 FB | 	rdlong	result1, fp
26490     08 4E 85 F1 | 	sub	fp, #8
26494     04 FA 0D F2 | 	cmp	result1, #4 wz
26498     70 02 90 5D |  if_ne	jmp	#LR__3944
2649c     4C 4E 05 F1 | 	add	fp, #76
264a0     A7 16 02 FB | 	rdlong	arg03, fp
264a4     10 4E 85 F1 | 	sub	fp, #16
264a8     A7 16 62 FC | 	wrlong	arg03, fp
264ac     A7 12 02 F6 | 	mov	arg01, fp
264b0     3C 4E 85 F1 | 	sub	fp, #60
264b4     00 14 06 F6 | 	mov	arg02, #0
264b8     04 AC BF FD | 	call	#_fatfs_cc_create_chain
264bc     50 4E 05 F1 | 	add	fp, #80
264c0     A7 FA 61 FC | 	wrlong	result1, fp
264c4     48 4E 85 F1 | 	sub	fp, #72
264c8     A7 00 68 FC | 	wrlong	#0, fp
264cc     48 4E 05 F1 | 	add	fp, #72
264d0     A7 FA 09 FB | 	rdlong	result1, fp wz
264d4     50 4E 85 F1 | 	sub	fp, #80
264d8     08 4E 05 A1 |  if_e	add	fp, #8
264dc     A7 0E 68 AC |  if_e	wrlong	#7, fp
264e0     08 4E 85 A1 |  if_e	sub	fp, #8
264e4     50 4E 05 F1 | 	add	fp, #80
264e8     A7 FA 01 FB | 	rdlong	result1, fp
264ec     50 4E 85 F1 | 	sub	fp, #80
264f0     01 FA 0D F2 | 	cmp	result1, #1 wz
264f4     08 4E 05 A1 |  if_e	add	fp, #8
264f8     A7 04 68 AC |  if_e	wrlong	#2, fp
264fc     08 4E 85 A1 |  if_e	sub	fp, #8
26500     50 4E 05 F1 | 	add	fp, #80
26504     A7 16 02 FB | 	rdlong	arg03, fp
26508     50 4E 85 F1 | 	sub	fp, #80
2650c     FF FF 7F FF 
26510     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
26514     08 4E 05 A1 |  if_e	add	fp, #8
26518     A7 02 68 AC |  if_e	wrlong	#1, fp
2651c     08 4E 85 A1 |  if_e	sub	fp, #8
26520     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
26524     58 4E 05 F1 | 	add	fp, #88
26528     A7 FA 61 FC | 	wrlong	result1, fp
2652c     50 4E 85 F1 | 	sub	fp, #80
26530     A7 FA 09 FB | 	rdlong	result1, fp wz
26534     08 4E 85 F1 | 	sub	fp, #8
26538     1C 01 90 5D |  if_ne	jmp	#LR__3941
2653c     4C 4E 05 F1 | 	add	fp, #76
26540     A7 12 02 FB | 	rdlong	arg01, fp
26544     04 4E 05 F1 | 	add	fp, #4
26548     A7 14 02 FB | 	rdlong	arg02, fp
2654c     50 4E 85 F1 | 	sub	fp, #80
26550     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
26554     08 4E 05 F1 | 	add	fp, #8
26558     A7 FA 61 FC | 	wrlong	result1, fp
2655c     00 FA 4D F2 | 	cmps	result1, #0 wz
26560     08 4E 85 F1 | 	sub	fp, #8
26564     F0 00 90 5D |  if_ne	jmp	#LR__3940
26568     4C 4E 05 F1 | 	add	fp, #76
2656c     A7 12 02 FB | 	rdlong	arg01, fp
26570     4C 4E 85 F1 | 	sub	fp, #76
26574     34 12 06 F1 | 	add	arg01, #52
26578     20 14 06 F6 | 	mov	arg02, #32
2657c     0B 16 06 F6 | 	mov	arg03, #11
26580     98 00 A0 FD | 	call	#\builtin_bytefill_
26584     4C 4E 05 F1 | 	add	fp, #76
26588     A7 FA 01 FB | 	rdlong	result1, fp
2658c     34 FA 05 F1 | 	add	result1, #52
26590     FD 5C 48 FC | 	wrbyte	#46, result1
26594     A7 16 02 FB | 	rdlong	arg03, fp
26598     3F 16 06 F1 | 	add	arg03, #63
2659c     0B 21 48 FC | 	wrbyte	#16, arg03
265a0     A7 12 02 FB | 	rdlong	arg01, fp
265a4     4A 12 06 F1 | 	add	arg01, #74
265a8     0C 4E 05 F1 | 	add	fp, #12
265ac     A7 14 02 FB | 	rdlong	arg02, fp
265b0     09 15 62 FC | 	wrlong	arg02, arg01
265b4     0C 4E 85 F1 | 	sub	fp, #12
265b8     A7 14 02 FB | 	rdlong	arg02, fp
265bc     0A 13 02 F6 | 	mov	arg01, arg02
265c0     34 14 06 F1 | 	add	arg02, #52
265c4     04 4E 05 F1 | 	add	fp, #4
265c8     A7 16 02 FB | 	rdlong	arg03, fp
265cc     50 4E 85 F1 | 	sub	fp, #80
265d0     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
265d4     4C 4E 05 F1 | 	add	fp, #76
265d8     A7 14 02 FB | 	rdlong	arg02, fp
265dc     0A 13 02 F6 | 	mov	arg01, arg02
265e0     54 12 06 F1 | 	add	arg01, #84
265e4     4C 4E 85 F1 | 	sub	fp, #76
265e8     34 14 06 F1 | 	add	arg02, #52
265ec     20 16 06 F6 | 	mov	arg03, #32
265f0     64 2D BF FD | 	call	#__system____builtin_memmove
265f4     4C 4E 05 F1 | 	add	fp, #76
265f8     A7 16 02 FB | 	rdlong	arg03, fp
265fc     55 16 06 F1 | 	add	arg03, #85
26600     0B 5D 48 FC | 	wrbyte	#46, arg03
26604     38 4E 85 F1 | 	sub	fp, #56
26608     A7 16 02 FB | 	rdlong	arg03, fp
2660c     40 4E 05 F1 | 	add	fp, #64
26610     A7 16 62 FC | 	wrlong	arg03, fp
26614     08 4E 85 F1 | 	sub	fp, #8
26618     A7 14 02 FB | 	rdlong	arg02, fp
2661c     0A 13 02 F6 | 	mov	arg01, arg02
26620     54 14 06 F1 | 	add	arg02, #84
26624     4C 4E 85 F1 | 	sub	fp, #76
26628     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2662c     4C 4E 05 F1 | 	add	fp, #76
26630     A7 16 02 FB | 	rdlong	arg03, fp
26634     03 16 06 F1 | 	add	arg03, #3
26638     0B 03 48 FC | 	wrbyte	#1, arg03
2663c     40 4E 85 F1 | 	sub	fp, #64
26640     A7 12 02 F6 | 	mov	arg01, fp
26644     0C 4E 85 F1 | 	sub	fp, #12
26648     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2664c     08 4E 05 F1 | 	add	fp, #8
26650     A7 FA 61 FC | 	wrlong	result1, fp
26654     08 4E 85 F1 | 	sub	fp, #8
26658                 | LR__3940
26658                 | LR__3941
26658     08 4E 05 F1 | 	add	fp, #8
2665c     A7 FA 09 FB | 	rdlong	result1, fp wz
26660     08 4E 85 F1 | 	sub	fp, #8
26664     88 00 90 5D |  if_ne	jmp	#LR__3942
26668     28 4E 05 F1 | 	add	fp, #40
2666c     A7 12 02 FB | 	rdlong	arg01, fp
26670     16 12 06 F1 | 	add	arg01, #22
26674     30 4E 05 F1 | 	add	fp, #48
26678     A7 14 02 FB | 	rdlong	arg02, fp
2667c     09 15 62 FC | 	wrlong	arg02, arg01
26680     0C 4E 85 F1 | 	sub	fp, #12
26684     A7 12 02 FB | 	rdlong	arg01, fp
26688     24 4E 85 F1 | 	sub	fp, #36
2668c     A7 14 02 FB | 	rdlong	arg02, fp
26690     28 4E 05 F1 | 	add	fp, #40
26694     A7 16 02 FB | 	rdlong	arg03, fp
26698     50 4E 85 F1 | 	sub	fp, #80
2669c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
266a0     28 4E 05 F1 | 	add	fp, #40
266a4     A7 FA 01 FB | 	rdlong	result1, fp
266a8     0B FA 05 F1 | 	add	result1, #11
266ac     FD 20 48 FC | 	wrbyte	#16, result1
266b0     24 4E 05 F1 | 	add	fp, #36
266b4     A7 FA 01 FB | 	rdlong	result1, fp
266b8     03 FA 05 F1 | 	add	result1, #3
266bc     FD 02 48 FC | 	wrbyte	#1, result1
266c0     44 4E 85 F1 | 	sub	fp, #68
266c4     A7 FA 09 FB | 	rdlong	result1, fp wz
266c8     08 4E 85 F1 | 	sub	fp, #8
266cc     3C 00 90 5D |  if_ne	jmp	#LR__3943
266d0     4C 4E 05 F1 | 	add	fp, #76
266d4     A7 12 02 FB | 	rdlong	arg01, fp
266d8     4C 4E 85 F1 | 	sub	fp, #76
266dc     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
266e0     08 4E 05 F1 | 	add	fp, #8
266e4     A7 FA 61 FC | 	wrlong	result1, fp
266e8     08 4E 85 F1 | 	sub	fp, #8
266ec     1C 00 90 FD | 	jmp	#LR__3943
266f0                 | LR__3942
266f0     3C 4E 05 F1 | 	add	fp, #60
266f4     A7 12 02 F6 | 	mov	arg01, fp
266f8     14 4E 05 F1 | 	add	fp, #20
266fc     A7 14 02 FB | 	rdlong	arg02, fp
26700     50 4E 85 F1 | 	sub	fp, #80
26704     00 16 06 F6 | 	mov	arg03, #0
26708     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2670c                 | LR__3943
2670c                 | LR__3944
2670c                 | LR__3945
2670c                 | ' 				remove_chain(&sobj, dcl, 0);
2670c                 | ' 			}
2670c                 | ' 		}
2670c                 | ' 		;
2670c                 | ' 	}
2670c                 | ' 
2670c                 | ' 	return res ;
2670c     08 4E 05 F1 | 	add	fp, #8
26710     A7 FA 01 FB | 	rdlong	result1, fp
26714     08 4E 85 F1 | 	sub	fp, #8
26718     A7 F0 03 F6 | 	mov	ptra, fp
2671c     B2 00 A0 FD | 	call	#popregs_
26720                 | _fatfs_cc_f_mkdir_ret
26720     2D 00 64 FD | 	ret
26724                 | 
26724                 | _fatfs_cc_f_rename
26724     01 4A 05 F6 | 	mov	COUNT_, #1
26728     A8 00 A0 FD | 	call	#pushregs_
2672c     9C F0 07 F1 | 	add	ptra, #156
26730     04 4E 05 F1 | 	add	fp, #4
26734     A7 12 62 FC | 	wrlong	arg01, fp
26738     04 4E 05 F1 | 	add	fp, #4
2673c     A7 14 62 FC | 	wrlong	arg02, fp
26740     A7 12 02 F6 | 	mov	arg01, fp
26744     08 4E 85 F1 | 	sub	fp, #8
26748     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2674c     04 4E 05 F1 | 	add	fp, #4
26750     A7 12 02 F6 | 	mov	arg01, fp
26754     6C 4E 05 F1 | 	add	fp, #108
26758     A7 14 02 F6 | 	mov	arg02, fp
2675c     70 4E 85 F1 | 	sub	fp, #112
26760     02 16 06 F6 | 	mov	arg03, #2
26764     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
26768     0C 4E 05 F1 | 	add	fp, #12
2676c     A7 FA 61 FC | 	wrlong	result1, fp
26770     0C 4E 85 F1 | 	sub	fp, #12
26774     00 FA 0D F2 | 	cmp	result1, #0 wz
26778     44 03 90 5D |  if_ne	jmp	#LR__3963
2677c     70 4E 05 F1 | 	add	fp, #112
26780     A7 16 02 FB | 	rdlong	arg03, fp
26784     60 4E 85 F1 | 	sub	fp, #96
26788     A7 16 62 FC | 	wrlong	arg03, fp
2678c     A7 12 02 F6 | 	mov	arg01, fp
26790     0C 4E 85 F1 | 	sub	fp, #12
26794     A7 14 02 FB | 	rdlong	arg02, fp
26798     04 4E 85 F1 | 	sub	fp, #4
2679c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
267a0     0C 4E 05 F1 | 	add	fp, #12
267a4     A7 FA 61 FC | 	wrlong	result1, fp
267a8     00 FA 4D F2 | 	cmps	result1, #0 wz
267ac     0C 4E 85 F1 | 	sub	fp, #12
267b0     1C 00 90 5D |  if_ne	jmp	#LR__3950
267b4     3B 4E 05 F1 | 	add	fp, #59
267b8     A7 FA C1 FA | 	rdbyte	result1, fp
267bc     3B 4E 85 F1 | 	sub	fp, #59
267c0     A0 FA CD F7 | 	test	result1, #160 wz
267c4     0C 4E 05 51 |  if_ne	add	fp, #12
267c8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
267cc     0C 4E 85 51 |  if_ne	sub	fp, #12
267d0                 | LR__3950
267d0     0C 4E 05 F1 | 	add	fp, #12
267d4     A7 1E 0A FB | 	rdlong	local01, fp wz
267d8     0C 4E 85 F1 | 	sub	fp, #12
267dc     E0 02 90 5D |  if_ne	jmp	#LR__3962
267e0     74 4E 05 F1 | 	add	fp, #116
267e4     A7 12 02 F6 | 	mov	arg01, fp
267e8     48 4E 85 F1 | 	sub	fp, #72
267ec     A7 14 02 FB | 	rdlong	arg02, fp
267f0     2C 4E 85 F1 | 	sub	fp, #44
267f4     20 16 06 F6 | 	mov	arg03, #32
267f8     5C 2B BF FD | 	call	#__system____builtin_memmove
267fc     40 4E 05 F1 | 	add	fp, #64
26800     A7 12 02 F6 | 	mov	arg01, fp
26804     30 4E 85 F1 | 	sub	fp, #48
26808     A7 14 02 F6 | 	mov	arg02, fp
2680c     10 4E 85 F1 | 	sub	fp, #16
26810     30 16 06 F6 | 	mov	arg03, #48
26814     40 2B BF FD | 	call	#__system____builtin_memmove
26818     40 4E 05 F1 | 	add	fp, #64
2681c     A7 12 02 F6 | 	mov	arg01, fp
26820     38 4E 85 F1 | 	sub	fp, #56
26824     A7 14 02 FB | 	rdlong	arg02, fp
26828     08 4E 85 F1 | 	sub	fp, #8
2682c     34 CA BF FD | 	call	#_fatfs_cc_follow_path
26830     0C 4E 05 F1 | 	add	fp, #12
26834     A7 FA 61 FC | 	wrlong	result1, fp
26838     0C 4E 85 F1 | 	sub	fp, #12
2683c     00 FA 0D F2 | 	cmp	result1, #0 wz
26840     4C 00 90 5D |  if_ne	jmp	#LR__3953
26844     48 4E 05 F1 | 	add	fp, #72
26848     A7 FA 01 FB | 	rdlong	result1, fp
2684c     30 4E 85 F1 | 	sub	fp, #48
26850     A7 16 02 FB | 	rdlong	arg03, fp
26854     18 4E 85 F1 | 	sub	fp, #24
26858     0B FB 09 F2 | 	cmp	result1, arg03 wz
2685c     20 00 90 5D |  if_ne	jmp	#LR__3951
26860     50 4E 05 F1 | 	add	fp, #80
26864     A7 FA 01 FB | 	rdlong	result1, fp
26868     30 4E 85 F1 | 	sub	fp, #48
2686c     A7 16 02 FB | 	rdlong	arg03, fp
26870     20 4E 85 F1 | 	sub	fp, #32
26874     0B FB 09 F2 | 	cmp	result1, arg03 wz
26878     04 1E 06 A6 |  if_e	mov	local01, #4
2687c     04 00 90 AD |  if_e	jmp	#LR__3952
26880                 | LR__3951
26880     08 1E 06 F6 | 	mov	local01, #8
26884                 | LR__3952
26884     0C 4E 05 F1 | 	add	fp, #12
26888     A7 1E 62 FC | 	wrlong	local01, fp
2688c     0C 4E 85 F1 | 	sub	fp, #12
26890                 | LR__3953
26890     0C 4E 05 F1 | 	add	fp, #12
26894     A7 1E 02 FB | 	rdlong	local01, fp
26898     0C 4E 85 F1 | 	sub	fp, #12
2689c     04 1E 0E F2 | 	cmp	local01, #4 wz
268a0     CC 01 90 5D |  if_ne	jmp	#LR__3959
268a4     40 4E 05 F1 | 	add	fp, #64
268a8     A7 12 02 F6 | 	mov	arg01, fp
268ac     40 4E 85 F1 | 	sub	fp, #64
268b0     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
268b4     0C 4E 05 F1 | 	add	fp, #12
268b8     A7 FA 61 FC | 	wrlong	result1, fp
268bc     0C 4E 85 F1 | 	sub	fp, #12
268c0     00 FA 0D F2 | 	cmp	result1, #0 wz
268c4     A8 01 90 5D |  if_ne	jmp	#LR__3958
268c8     5C 4E 05 F1 | 	add	fp, #92
268cc     A7 12 02 FB | 	rdlong	arg01, fp
268d0     38 4E 05 F1 | 	add	fp, #56
268d4     A7 12 62 FC | 	wrlong	arg01, fp
268d8     0D 12 06 F1 | 	add	arg01, #13
268dc     20 4E 85 F1 | 	sub	fp, #32
268e0     A7 14 02 F6 | 	mov	arg02, fp
268e4     74 4E 85 F1 | 	sub	fp, #116
268e8     0D 14 06 F1 | 	add	arg02, #13
268ec     13 16 06 F6 | 	mov	arg03, #19
268f0     64 2A BF FD | 	call	#__system____builtin_memmove
268f4     94 4E 05 F1 | 	add	fp, #148
268f8     A7 1E 02 FB | 	rdlong	local01, fp
268fc     15 4E 85 F1 | 	sub	fp, #21
26900     A7 FA C1 FA | 	rdbyte	result1, fp
26904     0B 1E 06 F1 | 	add	local01, #11
26908     0F FB 41 FC | 	wrbyte	result1, local01
2690c     15 4E 05 F1 | 	add	fp, #21
26910     A7 1E 02 FB | 	rdlong	local01, fp
26914     94 4E 85 F1 | 	sub	fp, #148
26918     0B 1E 06 F1 | 	add	local01, #11
2691c     0F 1F C2 FA | 	rdbyte	local01, local01
26920     10 1E CE F7 | 	test	local01, #16 wz
26924     24 00 90 5D |  if_ne	jmp	#LR__3954
26928     94 4E 05 F1 | 	add	fp, #148
2692c     A7 FA 01 FB | 	rdlong	result1, fp
26930     FD 1E 02 F6 | 	mov	local01, result1
26934     94 4E 85 F1 | 	sub	fp, #148
26938     0B FA 05 F1 | 	add	result1, #11
2693c     FD FA C1 FA | 	rdbyte	result1, result1
26940     20 FA 45 F5 | 	or	result1, #32
26944     0B 1E 06 F1 | 	add	local01, #11
26948     0F FB 41 FC | 	wrbyte	result1, local01
2694c                 | LR__3954
2694c     70 4E 05 F1 | 	add	fp, #112
26950     A7 1E 02 FB | 	rdlong	local01, fp
26954     03 1E 06 F1 | 	add	local01, #3
26958     0F 03 48 FC | 	wrbyte	#1, local01
2695c     24 4E 05 F1 | 	add	fp, #36
26960     A7 1E 02 FB | 	rdlong	local01, fp
26964     94 4E 85 F1 | 	sub	fp, #148
26968     0B 1E 06 F1 | 	add	local01, #11
2696c     0F 1F C2 FA | 	rdbyte	local01, local01
26970     10 1E CE F7 | 	test	local01, #16 wz
26974     F8 00 90 AD |  if_e	jmp	#LR__3957
26978     18 4E 05 F1 | 	add	fp, #24
2697c     A7 16 02 FB | 	rdlong	arg03, fp
26980     30 4E 05 F1 | 	add	fp, #48
26984     A7 1E 02 FB | 	rdlong	local01, fp
26988     48 4E 85 F1 | 	sub	fp, #72
2698c     0F 17 0A F2 | 	cmp	arg03, local01 wz
26990     DC 00 90 AD |  if_e	jmp	#LR__3957
26994     70 4E 05 F1 | 	add	fp, #112
26998     A7 12 02 FB | 	rdlong	arg01, fp
2699c     09 1F 02 F6 | 	mov	local01, arg01
269a0     24 4E 05 F1 | 	add	fp, #36
269a4     A7 14 02 FB | 	rdlong	arg02, fp
269a8     94 4E 85 F1 | 	sub	fp, #148
269ac     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
269b0     FD 14 02 F6 | 	mov	arg02, result1
269b4     0F 13 02 F6 | 	mov	arg01, local01
269b8     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
269bc     98 4E 05 F1 | 	add	fp, #152
269c0     A7 FA 61 FC | 	wrlong	result1, fp
269c4     00 FA 4D F2 | 	cmps	result1, #0 wz
269c8     98 4E 85 F1 | 	sub	fp, #152
269cc     0C 4E 05 A1 |  if_e	add	fp, #12
269d0     A7 04 68 AC |  if_e	wrlong	#2, fp
269d4     0C 4E 85 A1 |  if_e	sub	fp, #12
269d8     94 00 90 AD |  if_e	jmp	#LR__3956
269dc     70 4E 05 F1 | 	add	fp, #112
269e0     A7 12 02 FB | 	rdlong	arg01, fp
269e4     28 4E 05 F1 | 	add	fp, #40
269e8     A7 14 02 FB | 	rdlong	arg02, fp
269ec     98 4E 85 F1 | 	sub	fp, #152
269f0     4C A0 BF FD | 	call	#_fatfs_cc_move_window
269f4     0C 4E 05 F1 | 	add	fp, #12
269f8     A7 FA 61 FC | 	wrlong	result1, fp
269fc     64 4E 05 F1 | 	add	fp, #100
26a00     A7 1E 02 FB | 	rdlong	local01, fp
26a04     54 1E 06 F1 | 	add	local01, #84
26a08     24 4E 05 F1 | 	add	fp, #36
26a0c     A7 1E 62 FC | 	wrlong	local01, fp
26a10     88 4E 85 F1 | 	sub	fp, #136
26a14     A7 1E 0A FB | 	rdlong	local01, fp wz
26a18     0C 4E 85 F1 | 	sub	fp, #12
26a1c     50 00 90 5D |  if_ne	jmp	#LR__3955
26a20     94 4E 05 F1 | 	add	fp, #148
26a24     A7 1E 02 FB | 	rdlong	local01, fp
26a28     94 4E 85 F1 | 	sub	fp, #148
26a2c     01 1E 06 F1 | 	add	local01, #1
26a30     0F 1F C2 FA | 	rdbyte	local01, local01
26a34     2E 1E 0E F2 | 	cmp	local01, #46 wz
26a38     34 00 90 5D |  if_ne	jmp	#LR__3955
26a3c     70 4E 05 F1 | 	add	fp, #112
26a40     A7 12 02 FB | 	rdlong	arg01, fp
26a44     24 4E 05 F1 | 	add	fp, #36
26a48     A7 14 02 FB | 	rdlong	arg02, fp
26a4c     4C 4E 85 F1 | 	sub	fp, #76
26a50     A7 16 02 FB | 	rdlong	arg03, fp
26a54     48 4E 85 F1 | 	sub	fp, #72
26a58     50 AD BF FD | 	call	#_fatfs_cc_st_clust
26a5c     70 4E 05 F1 | 	add	fp, #112
26a60     A7 1E 02 FB | 	rdlong	local01, fp
26a64     70 4E 85 F1 | 	sub	fp, #112
26a68     03 1E 06 F1 | 	add	local01, #3
26a6c     0F 03 48 FC | 	wrbyte	#1, local01
26a70                 | LR__3955
26a70                 | LR__3956
26a70                 | LR__3957
26a70                 | LR__3958
26a70                 | LR__3959
26a70     0C 4E 05 F1 | 	add	fp, #12
26a74     A7 1E 0A FB | 	rdlong	local01, fp wz
26a78     0C 4E 85 F1 | 	sub	fp, #12
26a7c     40 00 90 5D |  if_ne	jmp	#LR__3961
26a80     10 4E 05 F1 | 	add	fp, #16
26a84     A7 12 02 F6 | 	mov	arg01, fp
26a88     10 4E 85 F1 | 	sub	fp, #16
26a8c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
26a90     0C 4E 05 F1 | 	add	fp, #12
26a94     A7 FA 61 FC | 	wrlong	result1, fp
26a98     0C 4E 85 F1 | 	sub	fp, #12
26a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
26aa0     1C 00 90 5D |  if_ne	jmp	#LR__3960
26aa4     70 4E 05 F1 | 	add	fp, #112
26aa8     A7 12 02 FB | 	rdlong	arg01, fp
26aac     70 4E 85 F1 | 	sub	fp, #112
26ab0     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
26ab4     0C 4E 05 F1 | 	add	fp, #12
26ab8     A7 FA 61 FC | 	wrlong	result1, fp
26abc     0C 4E 85 F1 | 	sub	fp, #12
26ac0                 | LR__3960
26ac0                 | LR__3961
26ac0                 | LR__3962
26ac0                 | LR__3963
26ac0                 | ' 					res = sync_fs(fs);
26ac0                 | ' 				}
26ac0                 | ' 			}
26ac0                 | ' 
26ac0                 | ' 		}
26ac0                 | ' 		;
26ac0                 | ' 	}
26ac0                 | ' 
26ac0                 | ' 	return res ;
26ac0     0C 4E 05 F1 | 	add	fp, #12
26ac4     A7 FA 01 FB | 	rdlong	result1, fp
26ac8     0C 4E 85 F1 | 	sub	fp, #12
26acc     A7 F0 03 F6 | 	mov	ptra, fp
26ad0     B2 00 A0 FD | 	call	#popregs_
26ad4                 | _fatfs_cc_f_rename_ret
26ad4     2D 00 64 FD | 	ret
26ad8                 | 
26ad8                 | _fatfs_cc_time
26ad8     00 4A 05 F6 | 	mov	COUNT_, #0
26adc     A8 00 A0 FD | 	call	#pushregs_
26ae0     14 F0 07 F1 | 	add	ptra, #20
26ae4     04 4E 05 F1 | 	add	fp, #4
26ae8     A7 12 62 FC | 	wrlong	arg01, fp
26aec     04 4E 05 F1 | 	add	fp, #4
26af0     A7 12 02 F6 | 	mov	arg01, fp
26af4     08 4E 85 F1 | 	sub	fp, #8
26af8     00 14 06 F6 | 	mov	arg02, #0
26afc     F8 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
26b00     08 4E 05 F1 | 	add	fp, #8
26b04     A7 FA 01 FB | 	rdlong	result1, fp
26b08     08 4E 05 F1 | 	add	fp, #8
26b0c     A7 FA 61 FC | 	wrlong	result1, fp
26b10     0C 4E 85 F1 | 	sub	fp, #12
26b14     A7 FA 09 FB | 	rdlong	result1, fp wz
26b18     04 4E 85 F1 | 	sub	fp, #4
26b1c     18 00 90 AD |  if_e	jmp	#LR__3970
26b20     04 4E 05 F1 | 	add	fp, #4
26b24     A7 FA 01 FB | 	rdlong	result1, fp
26b28     0C 4E 05 F1 | 	add	fp, #12
26b2c     A7 14 02 FB | 	rdlong	arg02, fp
26b30     10 4E 85 F1 | 	sub	fp, #16
26b34     FD 14 62 FC | 	wrlong	arg02, result1
26b38                 | LR__3970
26b38                 | '         *tp = now;
26b38                 | '     return now;
26b38     10 4E 05 F1 | 	add	fp, #16
26b3c     A7 FA 01 FB | 	rdlong	result1, fp
26b40     10 4E 85 F1 | 	sub	fp, #16
26b44     A7 F0 03 F6 | 	mov	ptra, fp
26b48     B2 00 A0 FD | 	call	#popregs_
26b4c                 | _fatfs_cc_time_ret
26b4c     2D 00 64 FD | 	ret
26b50                 | 
26b50                 | _fatfs_cc_mktime
26b50     06 4A 05 F6 | 	mov	COUNT_, #6
26b54     A8 00 A0 FD | 	call	#pushregs_
26b58     09 1F 02 F6 | 	mov	local01, arg01
26b5c     14 1E 06 F1 | 	add	local01, #20
26b60     0F 13 02 FB | 	rdlong	arg01, local01
26b64     14 1E 86 F1 | 	sub	local01, #20
26b68     46 12 56 F2 | 	cmps	arg01, #70 wc
26b6c                 | '                 return (time_t) -1;
26b6c     01 FA 65 C6 |  if_b	neg	result1, #1
26b70     7C 01 90 CD |  if_b	jmp	#LR__3984
26b74     03 00 00 FF 
26b78     6C 21 06 F6 | 	mov	local02, ##1900
26b7c     14 1E 06 F1 | 	add	local01, #20
26b80     0F FB 01 FB | 	rdlong	result1, local01
26b84     FD 20 02 F1 | 	add	local02, result1
26b88     08 1E 86 F1 | 	sub	local01, #8
26b8c     0F 23 02 FB | 	rdlong	local03, local01
26b90     01 22 86 F1 | 	sub	local03, #1
26b94     04 1E 06 F1 | 	add	local01, #4
26b98     0F 13 02 FB | 	rdlong	arg01, local01
26b9c     10 1E 86 F1 | 	sub	local01, #16
26ba0     02 12 66 F0 | 	shl	arg01, #2
26ba4     02 00 00 FF 
26ba8     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
26bac     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
26bb0     09 FB 01 FB | 	rdlong	result1, arg01
26bb4     FD 22 02 F1 | 	add	local03, result1
26bb8     10 13 02 F6 | 	mov	arg01, local02
26bbc     02 00 00 FF 
26bc0     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
26bc4     D8 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
26bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
26bcc     1C 00 90 AD |  if_e	jmp	#LR__3980
26bd0     00 24 06 F6 | 	mov	local04, #0
26bd4     10 1E 06 F1 | 	add	local01, #16
26bd8     0F FB 01 FB | 	rdlong	result1, local01
26bdc     10 1E 86 F1 | 	sub	local01, #16
26be0     02 FA 55 F2 | 	cmps	result1, #2 wc
26be4     01 24 06 36 |  if_ae	mov	local04, #1
26be8     04 00 90 FD | 	jmp	#LR__3981
26bec                 | LR__3980
26bec     00 24 06 F6 | 	mov	local04, #0
26bf0                 | LR__3981
26bf0     04 1E 06 F1 | 	add	local01, #4
26bf4     0F FB 01 FB | 	rdlong	result1, local01
26bf8     04 1E 86 F1 | 	sub	local01, #4
26bfc     0F 27 02 FB | 	rdlong	local05, local01
26c00     08 1E 06 F1 | 	add	local01, #8
26c04     0F 13 02 FB | 	rdlong	arg01, local01
26c08     07 00 00 FF 
26c0c     10 12 06 FD | 	qmul	arg01, ##3600
26c10     12 23 02 F1 | 	add	local03, local04
26c14     FD 24 02 F6 | 	mov	local04, result1
26c18     04 24 66 F0 | 	shl	local04, #4
26c1c     FD 24 82 F1 | 	sub	local04, result1
26c20     02 24 66 F0 | 	shl	local04, #2
26c24     12 27 02 F1 | 	add	local05, local04
26c28     08 1E 86 F1 | 	sub	local01, #8
26c2c     18 24 62 FD | 	getqx	local04
26c30     A8 00 00 FF 
26c34     80 23 06 FD | 	qmul	local03, ##86400
26c38     12 27 02 F1 | 	add	local05, local04
26c3c     10 23 02 F6 | 	mov	local03, local02
26c40     03 00 00 FF 
26c44     B2 23 86 F1 | 	sub	local03, ##1970
26c48     18 24 62 FD | 	getqx	local04
26c4c     99 F0 00 FF 
26c50     80 23 06 FD | 	qmul	local03, ##31536000
26c54     12 27 02 F1 | 	add	local05, local04
26c58     10 23 02 F6 | 	mov	local03, local02
26c5c     03 00 00 FF 
26c60     B1 23 86 F1 | 	sub	local03, ##1969
26c64     11 29 52 F6 | 	abs	local06, local03 wc
26c68     02 28 46 F0 | 	shr	local06, #2
26c6c     14 29 82 F6 | 	negc	local06, local06
26c70     03 00 00 FF 
26c74     D1 21 56 F2 | 	cmps	local02, ##2001 wc
26c78     18 24 62 FD | 	getqx	local04
26c7c     12 27 02 F1 | 	add	local05, local04
26c80     18 00 90 CD |  if_b	jmp	#LR__3982
26c84     03 00 00 FF 
26c88     D0 21 86 F1 | 	sub	local02, ##2000
26c8c     10 25 52 F6 | 	abs	local04, local02 wc
26c90     64 24 16 FD | 	qdiv	local04, #100
26c94     18 24 62 FD | 	getqx	local04
26c98     12 29 A2 F3 | 	sumnc	local06, local04
26c9c                 | LR__3982
26c9c     A8 00 00 FF 
26ca0     80 29 06 FD | 	qmul	local06, ##86400
26ca4     18 28 62 FD | 	getqx	local06
26ca8     14 27 02 F1 | 	add	local05, local06
26cac     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
26cb0     02 00 00 FF 
26cb4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26cb8     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
26cbc     14 27 02 F1 | 	add	local05, local06
26cc0     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
26cc4     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26cc8     02 00 00 FF 
26ccc     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26cd0     01 22 0E F2 | 	cmp	local03, #1 wz
26cd4     14 00 90 5D |  if_ne	jmp	#LR__3983
26cd8     0F 13 02 F6 | 	mov	arg01, local01
26cdc     C4 19 B0 FD | 	call	#_fatfs_cc___indst
26ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
26ce4     07 00 00 5F 
26ce8     10 26 86 51 |  if_ne	sub	local05, ##3600
26cec                 | LR__3983
26cec                 | '                 s -=  (3600L) ;
26cec                 | ' 
26cec                 | '         return s;
26cec     13 FB 01 F6 | 	mov	result1, local05
26cf0                 | LR__3984
26cf0     A7 F0 03 F6 | 	mov	ptra, fp
26cf4     B2 00 A0 FD | 	call	#popregs_
26cf8                 | _fatfs_cc_mktime_ret
26cf8     2D 00 64 FD | 	ret
26cfc                 | 
26cfc                 | _fatfs_cc__gmtime_r
26cfc     03 4A 05 F6 | 	mov	COUNT_, #3
26d00     A8 00 A0 FD | 	call	#pushregs_
26d04     09 1F 02 FB | 	rdlong	local01, arg01
26d08     A8 00 00 FF 
26d0c     80 1F 16 FD | 	qdiv	local01, ##86400
26d10     18 FA 61 FD | 	getqx	result1
26d14     04 FA 05 F1 | 	add	result1, #4
26d18     07 FA 15 FD | 	qdiv	result1, #7
26d1c     18 14 06 F1 | 	add	arg02, #24
26d20     D1 7F 27 FF 
26d24     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
26d28     D1 7F 27 3F 
26d2c     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
26d30     03 00 00 3F 
26d34     DC 21 06 36 |  if_ae	mov	local02, ##2012
26d38     03 00 00 CF 
26d3c     B2 21 06 C6 |  if_b	mov	local02, ##1970
26d40                 | ' 	  year = 1970;
26d40                 | ' 	}
26d40                 | ' 
26d40                 | ' 	for(;;) {
26d40     19 FA 61 FD | 	getqy	result1
26d44     0A FB 61 FC | 	wrlong	result1, arg02
26d48     18 14 86 F1 | 	sub	arg02, #24
26d4c                 | LR__3990
26d4c     10 13 02 F6 | 	mov	arg01, local02
26d50     4C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
26d54     00 FA 0D F2 | 	cmp	result1, #0 wz
26d58     42 F1 00 5F 
26d5c     00 23 06 56 |  if_ne	mov	local03, ##31622400
26d60     99 F0 00 AF 
26d64     80 23 06 A6 |  if_e	mov	local03, ##31536000
26d68     11 1F 12 F2 | 	cmp	local01, local03 wc
26d6c                 | ' 	    break;
26d6c     01 20 06 31 |  if_ae	add	local02, #1
26d70     11 1F 82 31 |  if_ae	sub	local01, local03
26d74     D4 FF 9F 3D |  if_ae	jmp	#LR__3990
26d78     A8 00 00 FF 
26d7c     80 1F 16 FD | 	qdiv	local01, ##86400
26d80     10 23 02 F6 | 	mov	local03, local02
26d84     03 00 00 FF 
26d88     6C 23 86 F1 | 	sub	local03, ##1900
26d8c     14 14 06 F1 | 	add	arg02, #20
26d90     0A 23 62 FC | 	wrlong	local03, arg02
26d94     08 14 06 F1 | 	add	arg02, #8
26d98     10 13 02 F6 | 	mov	arg01, local02
26d9c     18 20 62 FD | 	getqx	local02
26da0     0A 21 62 FC | 	wrlong	local02, arg02
26da4     1C 14 86 F1 | 	sub	arg02, #28
26da8     F4 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
26dac     00 FA 0D F2 | 	cmp	result1, #0 wz
26db0     1D 22 06 56 |  if_ne	mov	local03, #29
26db4     1C 22 06 A6 |  if_e	mov	local03, #28
26db8     02 00 00 FF 
26dbc     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
26dc0     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
26dc4     02 00 00 FF 
26dc8     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
26dcc                 | ' 
26dcc                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
26dcc                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
26dcc     00 12 06 F6 | 	mov	arg01, #0
26dd0     97 2A 48 FB | 	callpa	#(@LR__3992-@LR__3991)>>2,fcache_load_ptr_
26dd4                 | LR__3991
26dd4     09 23 02 F6 | 	mov	local03, arg01
26dd8     02 22 66 F0 | 	shl	local03, #2
26ddc     02 00 00 FF 
26de0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26de4     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26de8     11 23 02 FB | 	rdlong	local03, local03
26dec     11 21 52 F2 | 	cmps	local02, local03 wc
26df0     02 00 00 FF 
26df4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26df8     2C 00 90 CD |  if_b	jmp	#LR__3993
26dfc     09 23 02 F6 | 	mov	local03, arg01
26e00     02 22 66 F0 | 	shl	local03, #2
26e04     02 00 00 FF 
26e08     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26e0c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26e10     11 23 02 FB | 	rdlong	local03, local03
26e14     11 21 82 F1 | 	sub	local02, local03
26e18     01 12 06 F1 | 	add	arg01, #1
26e1c     02 00 00 FF 
26e20     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26e24     AC FF 9F FD | 	jmp	#LR__3991
26e28                 | LR__3992
26e28                 | LR__3993
26e28     A8 00 00 FF 
26e2c     80 1F 16 FD | 	qdiv	local01, ##86400
26e30     10 14 06 F1 | 	add	arg02, #16
26e34     0A 13 62 FC | 	wrlong	arg01, arg02
26e38     01 20 06 F1 | 	add	local02, #1
26e3c     04 14 86 F1 | 	sub	arg02, #4
26e40     0A 21 62 FC | 	wrlong	local02, arg02
26e44     19 1E 62 FD | 	getqy	local01
26e48     07 00 00 FF 
26e4c     10 1E 16 FD | 	qdiv	local01, ##3600
26e50     18 22 62 FD | 	getqx	local03
26e54     07 00 00 FF 
26e58     10 1E 16 FD | 	qdiv	local01, ##3600
26e5c     04 14 86 F1 | 	sub	arg02, #4
26e60     0A 23 62 FC | 	wrlong	local03, arg02
26e64     19 1E 62 FD | 	getqy	local01
26e68     3C 1E 16 FD | 	qdiv	local01, #60
26e6c     18 22 62 FD | 	getqx	local03
26e70     3C 1E 16 FD | 	qdiv	local01, #60
26e74     04 14 86 F1 | 	sub	arg02, #4
26e78     0A 23 62 FC | 	wrlong	local03, arg02
26e7c     04 14 86 F1 | 	sub	arg02, #4
26e80                 | '         stm->tm_isdst = 0;
26e80                 | ' 
26e80                 | ' ;
26e80                 | '         return stm;
26e80     0A FB 01 F6 | 	mov	result1, arg02
26e84     19 22 62 FD | 	getqy	local03
26e88     0A 23 62 FC | 	wrlong	local03, arg02
26e8c     20 14 06 F1 | 	add	arg02, #32
26e90     0A 01 68 FC | 	wrlong	#0, arg02
26e94     A7 F0 03 F6 | 	mov	ptra, fp
26e98     B2 00 A0 FD | 	call	#popregs_
26e9c                 | _fatfs_cc__gmtime_r_ret
26e9c     2D 00 64 FD | 	ret
26ea0                 | 
26ea0                 | _fatfs_cc__tzset
26ea0     44 01 00 FF 
26ea4     CD 13 06 F6 | 	mov	arg01, ##@LR__4305
26ea8     34 00 B0 FD | 	call	#_fatfs_cc_getenv
26eac     FD 12 02 F6 | 	mov	arg01, result1
26eb0     02 00 00 FF 
26eb4     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
26eb8     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
26ebc     02 00 00 FF 
26ec0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26ec4     28 15 B0 FD | 	call	#_fatfs_cc___tzoffset
26ec8     02 00 00 FF 
26ecc     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26ed0     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
26ed4     02 00 00 FF 
26ed8     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
26edc                 | _fatfs_cc__tzset_ret
26edc     2D 00 64 FD | 	ret
26ee0                 | 
26ee0                 | _fatfs_cc_getenv
26ee0     06 4A 05 F6 | 	mov	COUNT_, #6
26ee4     A8 00 A0 FD | 	call	#pushregs_
26ee8     09 1F 02 F6 | 	mov	local01, arg01
26eec     09 21 02 F6 | 	mov	local02, arg01
26ef0     97 06 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
26ef4                 | LR__4000
26ef4     10 FB C9 FA | 	rdbyte	result1, local02 wz
26ef8     01 20 06 51 |  if_ne	add	local02, #1
26efc     F4 FF 9F 5D |  if_ne	jmp	#LR__4000
26f00                 | LR__4001
26f00     09 21 82 F1 | 	sub	local02, arg01
26f04     10 FB 01 F6 | 	mov	result1, local02
26f08     02 00 00 FF 
26f0c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
26f10     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
26f14     02 00 00 FF 
26f18     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
26f1c                 | '             return 0;
26f1c     00 FA 05 A6 |  if_e	mov	result1, #0
26f20     5C 00 90 AD |  if_e	jmp	#LR__4004
26f24                 | ' 
26f24                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
26f24     02 00 00 FF 
26f28     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
26f2c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26f30     02 00 00 FF 
26f34     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
26f38                 | LR__4002
26f38     11 25 0A FB | 	rdlong	local04, local03 wz
26f3c     3C 00 90 AD |  if_e	jmp	#LR__4003
26f40     12 13 02 F6 | 	mov	arg01, local04
26f44     0F 15 02 F6 | 	mov	arg02, local01
26f48     10 17 02 F6 | 	mov	arg03, local02
26f4c     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
26f50     00 FA 0D F2 | 	cmp	result1, #0 wz
26f54     10 27 02 A6 |  if_e	mov	local05, local02
26f58     12 27 02 A1 |  if_e	add	local05, local04
26f5c     13 29 C2 AA |  if_e	rdbyte	local06, local05
26f60     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
26f64                 | ' 			return name+len+1;
26f64     10 25 02 A1 |  if_e	add	local04, local02
26f68     01 24 06 A1 |  if_e	add	local04, #1
26f6c     12 FB 01 A6 |  if_e	mov	result1, local04
26f70     0C 00 90 AD |  if_e	jmp	#LR__4004
26f74     04 22 06 F1 | 	add	local03, #4
26f78     BC FF 9F FD | 	jmp	#LR__4002
26f7c                 | LR__4003
26f7c                 | ' 	}
26f7c                 | ' 	return 0;
26f7c     00 FA 05 F6 | 	mov	result1, #0
26f80                 | LR__4004
26f80     A7 F0 03 F6 | 	mov	ptra, fp
26f84     B2 00 A0 FD | 	call	#popregs_
26f88                 | _fatfs_cc_getenv_ret
26f88     2D 00 64 FD | 	ret
26f8c                 | 
26f8c                 | _fatfs_cc__get_fattime
26f8c     00 4A 05 F6 | 	mov	COUNT_, #0
26f90     A8 00 A0 FD | 	call	#pushregs_
26f94     34 F0 07 F1 | 	add	ptra, #52
26f98     00 12 06 F6 | 	mov	arg01, #0
26f9c     38 FB BF FD | 	call	#_fatfs_cc_time
26fa0     04 4E 05 F1 | 	add	fp, #4
26fa4     A7 FA 61 FC | 	wrlong	result1, fp
26fa8     A7 12 02 F6 | 	mov	arg01, fp
26fac     0C 4E 05 F1 | 	add	fp, #12
26fb0     A7 14 02 F6 | 	mov	arg02, fp
26fb4     10 4E 85 F1 | 	sub	fp, #16
26fb8     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
26fbc     24 4E 05 F1 | 	add	fp, #36
26fc0     A7 14 02 FB | 	rdlong	arg02, fp
26fc4     50 14 86 F1 | 	sub	arg02, #80
26fc8     09 14 66 F0 | 	shl	arg02, #9
26fcc     04 4E 85 F1 | 	sub	fp, #4
26fd0     A7 FA 01 FB | 	rdlong	result1, fp
26fd4     01 FA 05 F1 | 	add	result1, #1
26fd8     05 FA 65 F0 | 	shl	result1, #5
26fdc     FD 14 42 F5 | 	or	arg02, result1
26fe0     04 4E 85 F1 | 	sub	fp, #4
26fe4     A7 FA 01 FB | 	rdlong	result1, fp
26fe8     FD 14 42 F5 | 	or	arg02, result1
26fec     14 4E 85 F1 | 	sub	fp, #20
26ff0     A7 14 62 FC | 	wrlong	arg02, fp
26ff4     10 4E 05 F1 | 	add	fp, #16
26ff8     A7 14 02 FB | 	rdlong	arg02, fp
26ffc     0B 14 66 F0 | 	shl	arg02, #11
27000     04 4E 85 F1 | 	sub	fp, #4
27004     A7 FA 01 FB | 	rdlong	result1, fp
27008     05 FA 65 F0 | 	shl	result1, #5
2700c     FD 14 42 F5 | 	or	arg02, result1
27010     04 4E 85 F1 | 	sub	fp, #4
27014     A7 FA 01 FB | 	rdlong	result1, fp
27018     FD 14 42 F5 | 	or	arg02, result1
2701c     04 4E 85 F1 | 	sub	fp, #4
27020     A7 14 62 FC | 	wrlong	arg02, fp
27024                 | ' 
27024                 | '     now = time(0);
27024                 | '     _gmtime_r (&now, &date);
27024                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
27024                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
27024                 | '     return (ffdate << 16) | fftime;
27024     04 4E 85 F1 | 	sub	fp, #4
27028     A7 FA 01 FB | 	rdlong	result1, fp
2702c     10 FA 65 F0 | 	shl	result1, #16
27030     08 4E 85 F1 | 	sub	fp, #8
27034     0A FB 41 F5 | 	or	result1, arg02
27038     A7 F0 03 F6 | 	mov	ptra, fp
2703c     B2 00 A0 FD | 	call	#popregs_
27040                 | _fatfs_cc__get_fattime_ret
27040     2D 00 64 FD | 	ret
27044                 | 
27044                 | _fatfs_cc_unixtime_0845
27044     00 4A 05 F6 | 	mov	COUNT_, #0
27048     A8 00 A0 FD | 	call	#pushregs_
2704c     34 F0 07 F1 | 	add	ptra, #52
27050     04 4E 05 F1 | 	add	fp, #4
27054     A7 12 62 FC | 	wrlong	arg01, fp
27058     04 4E 05 F1 | 	add	fp, #4
2705c     A7 14 62 FC | 	wrlong	arg02, fp
27060     04 4E 85 F1 | 	sub	fp, #4
27064     A7 14 02 FB | 	rdlong	arg02, fp
27068     09 14 46 F0 | 	shr	arg02, #9
2706c     7F 14 06 F5 | 	and	arg02, #127
27070     50 FA 05 F6 | 	mov	result1, #80
27074     0A FB 01 F1 | 	add	result1, arg02
27078     20 4E 05 F1 | 	add	fp, #32
2707c     A7 FA 61 FC | 	wrlong	result1, fp
27080     20 4E 85 F1 | 	sub	fp, #32
27084     A7 FA 01 FB | 	rdlong	result1, fp
27088     05 FA 45 F0 | 	shr	result1, #5
2708c     FD FA 41 F8 | 	getnib	result1, result1, #0
27090     01 FA 85 F1 | 	sub	result1, #1
27094     1C 4E 05 F1 | 	add	fp, #28
27098     A7 FA 61 FC | 	wrlong	result1, fp
2709c     1C 4E 85 F1 | 	sub	fp, #28
270a0     A7 FA 01 FB | 	rdlong	result1, fp
270a4     1F FA 05 F5 | 	and	result1, #31
270a8     18 4E 05 F1 | 	add	fp, #24
270ac     A7 FA 61 FC | 	wrlong	result1, fp
270b0     14 4E 85 F1 | 	sub	fp, #20
270b4     A7 FA 01 FB | 	rdlong	result1, fp
270b8     0B FA 45 F0 | 	shr	result1, #11
270bc     1F FA 05 F5 | 	and	result1, #31
270c0     10 4E 05 F1 | 	add	fp, #16
270c4     A7 FA 61 FC | 	wrlong	result1, fp
270c8     10 4E 85 F1 | 	sub	fp, #16
270cc     A7 FA 01 FB | 	rdlong	result1, fp
270d0     05 FA 45 F0 | 	shr	result1, #5
270d4     3F FA 05 F5 | 	and	result1, #63
270d8     0C 4E 05 F1 | 	add	fp, #12
270dc     A7 FA 61 FC | 	wrlong	result1, fp
270e0     0C 4E 85 F1 | 	sub	fp, #12
270e4     A7 14 02 FB | 	rdlong	arg02, fp
270e8     1F 14 06 F5 | 	and	arg02, #31
270ec     01 14 66 F0 | 	shl	arg02, #1
270f0     08 4E 05 F1 | 	add	fp, #8
270f4     A7 14 62 FC | 	wrlong	arg02, fp
270f8     A7 12 02 F6 | 	mov	arg01, fp
270fc     10 4E 85 F1 | 	sub	fp, #16
27100     4C FA BF FD | 	call	#_fatfs_cc_mktime
27104     0C 4E 05 F1 | 	add	fp, #12
27108     A7 FA 61 FC | 	wrlong	result1, fp
2710c                 | ' 
2710c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2710c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2710c                 | '     date.tm_mday = (dosdate & 0x1f);
2710c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2710c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2710c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2710c                 | ' 
2710c                 | '     t = mktime(&date);
2710c                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2710c                 | '     return t;
2710c     0C 4E 85 F1 | 	sub	fp, #12
27110     A7 F0 03 F6 | 	mov	ptra, fp
27114     B2 00 A0 FD | 	call	#popregs_
27118                 | _fatfs_cc_unixtime_0845_ret
27118     2D 00 64 FD | 	ret
2711c                 | 
2711c                 | _fatfs_cc__set_dos_error_0847
2711c     09 01 02 F6 | 	mov	_var01, arg01
27120                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27120                 | '     switch (derr) {
27120     14 00 26 F3 | 	fle	_var01, #20
27124     30 00 62 FD | 	jmprel	_var01
27128                 | LR__4010
27128     50 00 90 FD | 	jmp	#LR__4011
2712c     84 00 90 FD | 	jmp	#LR__4025
27130     80 00 90 FD | 	jmp	#LR__4026
27134     7C 00 90 FD | 	jmp	#LR__4027
27138     48 00 90 FD | 	jmp	#LR__4012
2713c     44 00 90 FD | 	jmp	#LR__4013
27140     40 00 90 FD | 	jmp	#LR__4014
27144     44 00 90 FD | 	jmp	#LR__4015
27148     48 00 90 FD | 	jmp	#LR__4017
2714c     54 00 90 FD | 	jmp	#LR__4020
27150     38 00 90 FD | 	jmp	#LR__4016
27154     4C 00 90 FD | 	jmp	#LR__4021
27158     48 00 90 FD | 	jmp	#LR__4022
2715c     44 00 90 FD | 	jmp	#LR__4023
27160     50 00 90 FD | 	jmp	#LR__4028
27164     4C 00 90 FD | 	jmp	#LR__4028
27168     48 00 90 FD | 	jmp	#LR__4028
2716c     2C 00 90 FD | 	jmp	#LR__4018
27170     38 00 90 FD | 	jmp	#LR__4024
27174     2C 00 90 FD | 	jmp	#LR__4019
27178     38 00 90 FD | 	jmp	#LR__4028
2717c                 | LR__4011
2717c     00 02 06 F6 | 	mov	_var02, #0
27180                 | '         r = 0;
27180                 | '         break;
27180     34 00 90 FD | 	jmp	#LR__4029
27184                 | LR__4012
27184                 | LR__4013
27184                 | LR__4014
27184     04 02 06 F6 | 	mov	_var02, #4
27188                 | '         r =  4 ;
27188                 | '         break;
27188     2C 00 90 FD | 	jmp	#LR__4029
2718c                 | LR__4015
2718c                 | LR__4016
2718c     06 02 06 F6 | 	mov	_var02, #6
27190                 | '         r =  6 ;
27190                 | '         break;
27190     24 00 90 FD | 	jmp	#LR__4029
27194                 | LR__4017
27194     09 02 06 F6 | 	mov	_var02, #9
27198                 | '         r =  9 ;
27198                 | '         break;
27198     1C 00 90 FD | 	jmp	#LR__4029
2719c                 | LR__4018
2719c     07 02 06 F6 | 	mov	_var02, #7
271a0                 | '         r =  7 ;
271a0                 | '         break;
271a0     14 00 90 FD | 	jmp	#LR__4029
271a4                 | LR__4019
271a4                 | LR__4020
271a4                 | LR__4021
271a4                 | LR__4022
271a4                 | LR__4023
271a4     0A 02 06 F6 | 	mov	_var02, #10
271a8                 | '         r =  10 ;
271a8                 | '         break;
271a8     0C 00 90 FD | 	jmp	#LR__4029
271ac                 | LR__4024
271ac     0B 02 06 F6 | 	mov	_var02, #11
271b0                 | '         r =  11 ;
271b0                 | '         break;
271b0     04 00 90 FD | 	jmp	#LR__4029
271b4                 | LR__4025
271b4                 | LR__4026
271b4                 | LR__4027
271b4                 | LR__4028
271b4     0C 02 06 F6 | 	mov	_var02, #12
271b8                 | '         r =  12 ;
271b8                 | '         break;
271b8                 | LR__4029
271b8                 | '     }
271b8                 | '     return _seterror(r);
271b8     00 02 4E F2 | 	cmps	_var02, #0 wz
271bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
271c0     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
271c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
271c8     01 FA 65 56 |  if_ne	neg	result1, #1
271cc     00 FA 05 A6 |  if_e	mov	result1, #0
271d0                 | _fatfs_cc__set_dos_error_0847_ret
271d0     2D 00 64 FD | 	ret
271d4                 | 
271d4                 | _fatfs_cc_v_creat
271d4     04 4A 05 F6 | 	mov	COUNT_, #4
271d8     A8 00 A0 FD | 	call	#pushregs_
271dc     09 1F 02 F6 | 	mov	local01, arg01
271e0     0A 21 02 F6 | 	mov	local02, arg02
271e4     03 00 00 FF 
271e8     3C 12 06 F6 | 	mov	arg01, ##1596
271ec                 | '     return _gc_alloc(size);
271ec     10 14 06 F6 | 	mov	arg02, #16
271f0     2C 60 BF FD | 	call	#__system___gc_doalloc
271f4     FD 22 0A F6 | 	mov	local03, result1 wz
271f8                 | '       return _seterror( 7 );
271f8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
271fc     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
27200     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27204     01 FA 65 A6 |  if_e	neg	result1, #1
27208     58 00 90 AD |  if_e	jmp	#LR__4031
2720c     11 13 02 F6 | 	mov	arg01, local03
27210     00 14 06 F6 | 	mov	arg02, #0
27214     03 00 00 FF 
27218     3C 16 06 F6 | 	mov	arg03, ##1596
2721c     98 00 A0 FD | 	call	#\builtin_bytefill_
27220     02 00 00 FF 
27224     14 22 06 F1 | 	add	local03, ##1044
27228     11 13 02 F6 | 	mov	arg01, local03
2722c     02 00 00 FF 
27230     14 22 86 F1 | 	sub	local03, ##1044
27234     10 15 02 F6 | 	mov	arg02, local02
27238     07 16 06 F6 | 	mov	arg03, #7
2723c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
27240     FD 24 0A F6 | 	mov	local04, result1 wz
27244     14 00 90 AD |  if_e	jmp	#LR__4030
27248     11 13 02 F6 | 	mov	arg01, local03
2724c                 | '     return _gc_free(ptr);
2724c     DC 60 BF FD | 	call	#__system___gc_free
27250                 | '     free(f);
27250                 | '     return _set_dos_error(r);
27250     12 13 02 F6 | 	mov	arg01, local04
27254     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27258     08 00 90 FD | 	jmp	#LR__4031
2725c                 | LR__4030
2725c     0F 23 62 FC | 	wrlong	local03, local01
27260                 | '   }
27260                 | '   fil->vfsdata = f;
27260                 | '   return 0;
27260     00 FA 05 F6 | 	mov	result1, #0
27264                 | LR__4031
27264     A7 F0 03 F6 | 	mov	ptra, fp
27268     B2 00 A0 FD | 	call	#popregs_
2726c                 | _fatfs_cc_v_creat_ret
2726c     2D 00 64 FD | 	ret
27270                 | 
27270                 | _fatfs_cc_v_close
27270     02 4A 05 F6 | 	mov	COUNT_, #2
27274     A8 00 A0 FD | 	call	#pushregs_
27278     09 1F 02 FB | 	rdlong	local01, arg01
2727c     02 00 00 FF 
27280     14 1E 06 F1 | 	add	local01, ##1044
27284     0F 13 02 F6 | 	mov	arg01, local01
27288     02 00 00 FF 
2728c     14 1E 86 F1 | 	sub	local01, ##1044
27290     DC E3 BF FD | 	call	#_fatfs_cc_f_close
27294     FD 20 02 F6 | 	mov	local02, result1
27298     0F 13 02 F6 | 	mov	arg01, local01
2729c                 | '     return _gc_free(ptr);
2729c     8C 60 BF FD | 	call	#__system___gc_free
272a0                 | '     FAT_FIL *f = fil->vfsdata;
272a0                 | '     r=f_close(&f->fil);
272a0                 | '     free(f);
272a0                 | '     return _set_dos_error(r);
272a0     10 13 02 F6 | 	mov	arg01, local02
272a4     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0847
272a8     A7 F0 03 F6 | 	mov	ptra, fp
272ac     B2 00 A0 FD | 	call	#popregs_
272b0                 | _fatfs_cc_v_close_ret
272b0     2D 00 64 FD | 	ret
272b4                 | 
272b4                 | _fatfs_cc_v_opendir
272b4     04 4A 05 F6 | 	mov	COUNT_, #4
272b8     A8 00 A0 FD | 	call	#pushregs_
272bc     09 1F 02 F6 | 	mov	local01, arg01
272c0     0A 21 02 F6 | 	mov	local02, arg02
272c4     30 12 06 F6 | 	mov	arg01, #48
272c8                 | '     return _gc_alloc(size);
272c8     10 14 06 F6 | 	mov	arg02, #16
272cc     50 5F BF FD | 	call	#__system___gc_doalloc
272d0     FD 22 0A F6 | 	mov	local03, result1 wz
272d4                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
272d4                 | '       return _seterror( 7 );
272d4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
272d8     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
272dc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
272e0     01 FA 65 A6 |  if_e	neg	result1, #1
272e4     34 00 90 AD |  if_e	jmp	#LR__4041
272e8     10 15 02 F6 | 	mov	arg02, local02
272ec     11 13 02 F6 | 	mov	arg01, local03
272f0     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
272f4     FD 24 0A F6 | 	mov	local04, result1 wz
272f8     14 00 90 AD |  if_e	jmp	#LR__4040
272fc     11 13 02 F6 | 	mov	arg01, local03
27300                 | '     return _gc_free(ptr);
27300     28 60 BF FD | 	call	#__system___gc_free
27304                 | '         free(f);
27304                 | '         return _set_dos_error(r);
27304     12 13 02 F6 | 	mov	arg01, local04
27308     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0847
2730c     0C 00 90 FD | 	jmp	#LR__4041
27310                 | LR__4040
27310     04 1E 06 F1 | 	add	local01, #4
27314     0F 23 62 FC | 	wrlong	local03, local01
27318                 | '     }
27318                 | '     dir->vfsdata = f;
27318                 | '     return 0;
27318     00 FA 05 F6 | 	mov	result1, #0
2731c                 | LR__4041
2731c     A7 F0 03 F6 | 	mov	ptra, fp
27320     B2 00 A0 FD | 	call	#popregs_
27324                 | _fatfs_cc_v_opendir_ret
27324     2D 00 64 FD | 	ret
27328                 | 
27328                 | _fatfs_cc_v_closedir
27328     02 4A 05 F6 | 	mov	COUNT_, #2
2732c     A8 00 A0 FD | 	call	#pushregs_
27330     04 12 06 F1 | 	add	arg01, #4
27334     09 1F 02 FB | 	rdlong	local01, arg01
27338     0F 13 02 F6 | 	mov	arg01, local01
2733c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
27340     FD 20 02 F6 | 	mov	local02, result1
27344     0F 13 02 F6 | 	mov	arg01, local01
27348                 | '     return _gc_free(ptr);
27348     E0 5F BF FD | 	call	#__system___gc_free
2734c     00 20 0E F2 | 	cmp	local02, #0 wz
27350     10 13 02 56 |  if_ne	mov	arg01, local02
27354     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0847
27358                 | '     return r;
27358     10 FB 01 F6 | 	mov	result1, local02
2735c     A7 F0 03 F6 | 	mov	ptra, fp
27360     B2 00 A0 FD | 	call	#popregs_
27364                 | _fatfs_cc_v_closedir_ret
27364     2D 00 64 FD | 	ret
27368                 | 
27368                 | _fatfs_cc_v_readdir
27368     01 4A 05 F6 | 	mov	COUNT_, #1
2736c     A8 00 A0 FD | 	call	#pushregs_
27370     2C F1 07 F1 | 	add	ptra, #300
27374     04 4E 05 F1 | 	add	fp, #4
27378     A7 12 62 FC | 	wrlong	arg01, fp
2737c     04 4E 05 F1 | 	add	fp, #4
27380     A7 14 62 FC | 	wrlong	arg02, fp
27384     04 4E 85 F1 | 	sub	fp, #4
27388     A7 16 02 FB | 	rdlong	arg03, fp
2738c     04 16 06 F1 | 	add	arg03, #4
27390     0B 13 02 FB | 	rdlong	arg01, arg03
27394     08 4E 05 F1 | 	add	fp, #8
27398     A7 14 02 F6 | 	mov	arg02, fp
2739c     0C 4E 85 F1 | 	sub	fp, #12
273a0     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
273a4     28 4F 05 F1 | 	add	fp, #296
273a8     A7 FA 61 FC | 	wrlong	result1, fp
273ac     28 4F 85 F1 | 	sub	fp, #296
273b0     00 FA 0D F2 | 	cmp	result1, #0 wz
273b4     14 00 90 AD |  if_e	jmp	#LR__4050
273b8                 | '         return _set_dos_error(r);
273b8     28 4F 05 F1 | 	add	fp, #296
273bc     A7 12 02 FB | 	rdlong	arg01, fp
273c0     28 4F 85 F1 | 	sub	fp, #296
273c4     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0847
273c8     C4 00 90 FD | 	jmp	#LR__4053
273cc                 | LR__4050
273cc     28 4E 05 F1 | 	add	fp, #40
273d0     A7 16 CA FA | 	rdbyte	arg03, fp wz
273d4     28 4E 85 F1 | 	sub	fp, #40
273d8                 | '         return -1;
273d8     01 FA 65 A6 |  if_e	neg	result1, #1
273dc     B0 00 90 AD |  if_e	jmp	#LR__4053
273e0     08 4E 05 F1 | 	add	fp, #8
273e4     A7 12 02 FB | 	rdlong	arg01, fp
273e8     20 4E 05 F1 | 	add	fp, #32
273ec     A7 14 02 F6 | 	mov	arg02, fp
273f0     28 4E 85 F1 | 	sub	fp, #40
273f4     3F 16 06 F6 | 	mov	arg03, #63
273f8     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
273fc     08 4E 05 F1 | 	add	fp, #8
27400     A7 16 02 FB | 	rdlong	arg03, fp
27404     3F 16 06 F1 | 	add	arg03, #63
27408     0B 01 48 FC | 	wrbyte	#0, arg03
2740c     0C 4E 05 F1 | 	add	fp, #12
27410     A7 16 C2 FA | 	rdbyte	arg03, fp
27414     14 4E 85 F1 | 	sub	fp, #20
27418     10 16 CE F7 | 	test	arg03, #16 wz
2741c     18 00 90 AD |  if_e	jmp	#LR__4051
27420     08 4E 05 F1 | 	add	fp, #8
27424     A7 16 02 FB | 	rdlong	arg03, fp
27428     08 4E 85 F1 | 	sub	fp, #8
2742c     50 16 06 F1 | 	add	arg03, #80
27430     0B 03 48 FC | 	wrbyte	#1, arg03
27434     14 00 90 FD | 	jmp	#LR__4052
27438                 | LR__4051
27438     08 4E 05 F1 | 	add	fp, #8
2743c     A7 16 02 FB | 	rdlong	arg03, fp
27440     08 4E 85 F1 | 	sub	fp, #8
27444     50 16 06 F1 | 	add	arg03, #80
27448     0B 01 48 FC | 	wrbyte	#0, arg03
2744c                 | LR__4052
2744c     08 4E 05 F1 | 	add	fp, #8
27450     A7 16 02 FB | 	rdlong	arg03, fp
27454     04 4E 05 F1 | 	add	fp, #4
27458     A7 14 02 FB | 	rdlong	arg02, fp
2745c     48 16 06 F1 | 	add	arg03, #72
27460     0B 15 62 FC | 	wrlong	arg02, arg03
27464     04 4E 85 F1 | 	sub	fp, #4
27468     A7 1E 02 FB | 	rdlong	local01, fp
2746c     08 4E 05 F1 | 	add	fp, #8
27470     A7 12 E2 FA | 	rdword	arg01, fp
27474     02 4E 05 F1 | 	add	fp, #2
27478     A7 14 E2 FA | 	rdword	arg02, fp
2747c     12 4E 85 F1 | 	sub	fp, #18
27480     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0845
27484     4C 1E 06 F1 | 	add	local01, #76
27488     0F FB 61 FC | 	wrlong	result1, local01
2748c                 | '         ent->d_type =  (0) ;
2748c                 | '     }
2748c                 | '     ent->d_size = finfo.fsize;
2748c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2748c                 | '     return 0;
2748c     00 FA 05 F6 | 	mov	result1, #0
27490                 | LR__4053
27490     A7 F0 03 F6 | 	mov	ptra, fp
27494     B2 00 A0 FD | 	call	#popregs_
27498                 | _fatfs_cc_v_readdir_ret
27498     2D 00 64 FD | 	ret
2749c                 | 
2749c                 | _fatfs_cc_v_stat
2749c     03 4A 05 F6 | 	mov	COUNT_, #3
274a0     A8 00 A0 FD | 	call	#pushregs_
274a4     30 F1 07 F1 | 	add	ptra, #304
274a8     04 4E 05 F1 | 	add	fp, #4
274ac     A7 12 62 FC | 	wrlong	arg01, fp
274b0     04 4E 05 F1 | 	add	fp, #4
274b4     A7 14 62 FC | 	wrlong	arg02, fp
274b8     08 4E 85 F1 | 	sub	fp, #8
274bc     0A 13 02 F6 | 	mov	arg01, arg02
274c0     00 14 06 F6 | 	mov	arg02, #0
274c4     30 16 06 F6 | 	mov	arg03, #48
274c8     98 00 A0 FD | 	call	#\builtin_bytefill_
274cc     04 4E 05 F1 | 	add	fp, #4
274d0     A7 FA 01 FB | 	rdlong	result1, fp
274d4     04 4E 85 F1 | 	sub	fp, #4
274d8     FD FA C9 FA | 	rdbyte	result1, result1 wz
274dc     2C 00 90 AD |  if_e	jmp	#LR__4060
274e0     04 4E 05 F1 | 	add	fp, #4
274e4     A7 FA 01 FB | 	rdlong	result1, fp
274e8     04 4E 85 F1 | 	sub	fp, #4
274ec     FD FA C1 FA | 	rdbyte	result1, result1
274f0     2E FA 0D F2 | 	cmp	result1, #46 wz
274f4     04 4E 05 A1 |  if_e	add	fp, #4
274f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
274fc     04 4E 85 A1 |  if_e	sub	fp, #4
27500     01 1E 06 A1 |  if_e	add	local01, #1
27504     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
27508     18 00 90 5D |  if_ne	jmp	#LR__4061
2750c                 | LR__4060
2750c     18 4E 05 F1 | 	add	fp, #24
27510     A7 20 48 FC | 	wrbyte	#16, fp
27514     0C 4E 85 F1 | 	sub	fp, #12
27518     A7 00 68 FC | 	wrlong	#0, fp
2751c     0C 4E 85 F1 | 	sub	fp, #12
27520     24 00 90 FD | 	jmp	#LR__4062
27524                 | LR__4061
27524     04 4E 05 F1 | 	add	fp, #4
27528     A7 12 02 FB | 	rdlong	arg01, fp
2752c     0C 4E 05 F1 | 	add	fp, #12
27530     A7 14 02 F6 | 	mov	arg02, fp
27534     10 4E 85 F1 | 	sub	fp, #16
27538     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2753c     0C 4E 05 F1 | 	add	fp, #12
27540     A7 FA 61 FC | 	wrlong	result1, fp
27544     0C 4E 85 F1 | 	sub	fp, #12
27548                 | LR__4062
27548     0C 4E 05 F1 | 	add	fp, #12
2754c     A7 20 0A FB | 	rdlong	local02, fp wz
27550     0C 4E 85 F1 | 	sub	fp, #12
27554     14 00 90 AD |  if_e	jmp	#LR__4063
27558                 | '         return _set_dos_error(r);
27558     0C 4E 05 F1 | 	add	fp, #12
2755c     A7 12 02 FB | 	rdlong	arg01, fp
27560     0C 4E 85 F1 | 	sub	fp, #12
27564     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27568     14 01 90 FD | 	jmp	#LR__4064
2756c                 | LR__4063
2756c     2C 4F 05 F1 | 	add	fp, #300
27570     A7 48 6A FC | 	wrlong	#292, fp
27574     14 4F 85 F1 | 	sub	fp, #276
27578     A7 22 C2 FA | 	rdbyte	local03, fp
2757c     18 4E 85 F1 | 	sub	fp, #24
27580     01 22 CE F7 | 	test	local03, #1 wz
27584     2C 4F 05 A1 |  if_e	add	fp, #300
27588     A7 22 02 AB |  if_e	rdlong	local03, fp
2758c     92 22 46 A5 |  if_e	or	local03, #146
27590     A7 22 62 AC |  if_e	wrlong	local03, fp
27594     2C 4F 85 A1 |  if_e	sub	fp, #300
27598     18 4E 05 F1 | 	add	fp, #24
2759c     A7 22 C2 FA | 	rdbyte	local03, fp
275a0     18 4E 85 F1 | 	sub	fp, #24
275a4     10 22 CE F7 | 	test	local03, #16 wz
275a8     2C 4F 05 51 |  if_ne	add	fp, #300
275ac     A7 22 02 5B |  if_ne	rdlong	local03, fp
275b0     08 00 00 5F 
275b4     49 22 46 55 |  if_ne	or	local03, ##4169
275b8     A7 22 62 5C |  if_ne	wrlong	local03, fp
275bc     2C 4F 85 51 |  if_ne	sub	fp, #300
275c0     08 4E 05 F1 | 	add	fp, #8
275c4     A7 22 02 FB | 	rdlong	local03, fp
275c8     24 4F 05 F1 | 	add	fp, #292
275cc     A7 20 02 FB | 	rdlong	local02, fp
275d0     08 22 06 F1 | 	add	local03, #8
275d4     11 21 62 FC | 	wrlong	local02, local03
275d8     24 4F 85 F1 | 	sub	fp, #292
275dc     A7 22 02 FB | 	rdlong	local03, fp
275e0     0C 22 06 F1 | 	add	local03, #12
275e4     11 03 68 FC | 	wrlong	#1, local03
275e8     A7 22 02 FB | 	rdlong	local03, fp
275ec     08 4E 05 F1 | 	add	fp, #8
275f0     A7 20 02 FB | 	rdlong	local02, fp
275f4     18 22 06 F1 | 	add	local03, #24
275f8     11 21 62 FC | 	wrlong	local02, local03
275fc     08 4E 85 F1 | 	sub	fp, #8
27600     A7 22 02 FB | 	rdlong	local03, fp
27604     1C 22 06 F1 | 	add	local03, #28
27608     01 00 80 FF 
2760c     11 01 68 FC | 	wrlong	##512, local03
27610     A7 20 02 FB | 	rdlong	local02, fp
27614     10 23 02 F6 | 	mov	local03, local02
27618     18 20 06 F1 | 	add	local02, #24
2761c     10 21 02 FB | 	rdlong	local02, local02
27620     FF 21 06 F1 | 	add	local02, #511
27624     10 21 52 F6 | 	abs	local02, local02 wc
27628     09 20 46 F0 | 	shr	local02, #9
2762c     10 21 82 F6 | 	negc	local02, local02
27630     20 22 06 F1 | 	add	local03, #32
27634     11 21 62 FC | 	wrlong	local02, local03
27638     A7 20 02 FB | 	rdlong	local02, fp
2763c     10 23 02 F6 | 	mov	local03, local02
27640     10 1F 02 F6 | 	mov	local01, local02
27644     0C 4E 05 F1 | 	add	fp, #12
27648     A7 12 E2 FA | 	rdword	arg01, fp
2764c     02 4E 05 F1 | 	add	fp, #2
27650     A7 14 E2 FA | 	rdword	arg02, fp
27654     16 4E 85 F1 | 	sub	fp, #22
27658     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0845
2765c     2C 1E 06 F1 | 	add	local01, #44
27660     0F FB 61 FC | 	wrlong	result1, local01
27664     28 20 06 F1 | 	add	local02, #40
27668     10 FB 61 FC | 	wrlong	result1, local02
2766c     24 22 06 F1 | 	add	local03, #36
27670     11 FB 61 FC | 	wrlong	result1, local03
27674                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
27674                 | '     }
27674                 | '     buf->st_mode = mode;
27674                 | '     buf->st_nlink = 1;
27674                 | '     buf->st_size = finfo.fsize;
27674                 | '     buf->st_blksize = 512;
27674                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
27674                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
27674                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27674                 | '     return r;
27674     0C 4E 05 F1 | 	add	fp, #12
27678     A7 FA 01 FB | 	rdlong	result1, fp
2767c     0C 4E 85 F1 | 	sub	fp, #12
27680                 | LR__4064
27680     A7 F0 03 F6 | 	mov	ptra, fp
27684     B2 00 A0 FD | 	call	#popregs_
27688                 | _fatfs_cc_v_stat_ret
27688     2D 00 64 FD | 	ret
2768c                 | 
2768c                 | _fatfs_cc_v_read
2768c     00 4A 05 F6 | 	mov	COUNT_, #0
27690     A8 00 A0 FD | 	call	#pushregs_
27694     1C F0 07 F1 | 	add	ptra, #28
27698     04 4E 05 F1 | 	add	fp, #4
2769c     A7 12 62 FC | 	wrlong	arg01, fp
276a0     04 4E 05 F1 | 	add	fp, #4
276a4     A7 14 62 FC | 	wrlong	arg02, fp
276a8     04 4E 05 F1 | 	add	fp, #4
276ac     A7 16 62 FC | 	wrlong	arg03, fp
276b0     08 4E 85 F1 | 	sub	fp, #8
276b4     A7 12 02 FB | 	rdlong	arg01, fp
276b8     09 13 0A FB | 	rdlong	arg01, arg01 wz
276bc     0C 4E 05 F1 | 	add	fp, #12
276c0     A7 12 62 FC | 	wrlong	arg01, fp
276c4     10 4E 85 F1 | 	sub	fp, #16
276c8                 | '         return _seterror( 5 );
276c8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
276cc     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
276d0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
276d4     01 FA 65 A6 |  if_e	neg	result1, #1
276d8     B8 00 90 AD |  if_e	jmp	#LR__4072
276dc     10 4E 05 F1 | 	add	fp, #16
276e0     A7 12 02 FB | 	rdlong	arg01, fp
276e4     02 00 00 FF 
276e8     14 12 06 F1 | 	add	arg01, ##1044
276ec     08 4E 85 F1 | 	sub	fp, #8
276f0     A7 14 02 FB | 	rdlong	arg02, fp
276f4     04 4E 05 F1 | 	add	fp, #4
276f8     A7 16 02 FB | 	rdlong	arg03, fp
276fc     0C 4E 05 F1 | 	add	fp, #12
27700     A7 18 02 F6 | 	mov	arg04, fp
27704     18 4E 85 F1 | 	sub	fp, #24
27708     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2770c     14 4E 05 F1 | 	add	fp, #20
27710     A7 FA 61 FC | 	wrlong	result1, fp
27714     14 4E 85 F1 | 	sub	fp, #20
27718     00 FA 0D F2 | 	cmp	result1, #0 wz
2771c     34 00 90 AD |  if_e	jmp	#LR__4070
27720     04 4E 05 F1 | 	add	fp, #4
27724     A7 18 02 FB | 	rdlong	arg04, fp
27728     0C 17 02 F6 | 	mov	arg03, arg04
2772c     08 18 06 F1 | 	add	arg04, #8
27730     0C 19 02 FB | 	rdlong	arg04, arg04
27734     20 18 46 F5 | 	or	arg04, #32
27738     08 16 06 F1 | 	add	arg03, #8
2773c     0B 19 62 FC | 	wrlong	arg04, arg03
27740                 | '         fil->state |=  (0x20) ;
27740                 | '         return _set_dos_error(r);
27740     10 4E 05 F1 | 	add	fp, #16
27744     A7 12 02 FB | 	rdlong	arg01, fp
27748     14 4E 85 F1 | 	sub	fp, #20
2774c     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27750     40 00 90 FD | 	jmp	#LR__4072
27754                 | LR__4070
27754     18 4E 05 F1 | 	add	fp, #24
27758     A7 FA 09 FB | 	rdlong	result1, fp wz
2775c     18 4E 85 F1 | 	sub	fp, #24
27760     24 00 90 5D |  if_ne	jmp	#LR__4071
27764     04 4E 05 F1 | 	add	fp, #4
27768     A7 FA 01 FB | 	rdlong	result1, fp
2776c     FD 18 02 F6 | 	mov	arg04, result1
27770     04 4E 85 F1 | 	sub	fp, #4
27774     08 FA 05 F1 | 	add	result1, #8
27778     FD FA 01 FB | 	rdlong	result1, result1
2777c     10 FA 45 F5 | 	or	result1, #16
27780     08 18 06 F1 | 	add	arg04, #8
27784     0C FB 61 FC | 	wrlong	result1, arg04
27788                 | LR__4071
27788                 | '         fil->state |=  (0x10) ;
27788                 | '     }
27788                 | '     return x;
27788     18 4E 05 F1 | 	add	fp, #24
2778c     A7 FA 01 FB | 	rdlong	result1, fp
27790     18 4E 85 F1 | 	sub	fp, #24
27794                 | LR__4072
27794     A7 F0 03 F6 | 	mov	ptra, fp
27798     B2 00 A0 FD | 	call	#popregs_
2779c                 | _fatfs_cc_v_read_ret
2779c     2D 00 64 FD | 	ret
277a0                 | 
277a0                 | _fatfs_cc_v_write
277a0     00 4A 05 F6 | 	mov	COUNT_, #0
277a4     A8 00 A0 FD | 	call	#pushregs_
277a8     1C F0 07 F1 | 	add	ptra, #28
277ac     04 4E 05 F1 | 	add	fp, #4
277b0     A7 12 62 FC | 	wrlong	arg01, fp
277b4     04 4E 05 F1 | 	add	fp, #4
277b8     A7 14 62 FC | 	wrlong	arg02, fp
277bc     04 4E 05 F1 | 	add	fp, #4
277c0     A7 16 62 FC | 	wrlong	arg03, fp
277c4     08 4E 85 F1 | 	sub	fp, #8
277c8     A7 12 02 FB | 	rdlong	arg01, fp
277cc     09 13 0A FB | 	rdlong	arg01, arg01 wz
277d0     0C 4E 05 F1 | 	add	fp, #12
277d4     A7 12 62 FC | 	wrlong	arg01, fp
277d8     10 4E 85 F1 | 	sub	fp, #16
277dc                 | '         return _seterror( 5 );
277dc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
277e0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
277e4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
277e8     01 FA 65 A6 |  if_e	neg	result1, #1
277ec     84 00 90 AD |  if_e	jmp	#LR__4081
277f0     10 4E 05 F1 | 	add	fp, #16
277f4     A7 12 02 FB | 	rdlong	arg01, fp
277f8     02 00 00 FF 
277fc     14 12 06 F1 | 	add	arg01, ##1044
27800     08 4E 85 F1 | 	sub	fp, #8
27804     A7 14 02 FB | 	rdlong	arg02, fp
27808     04 4E 05 F1 | 	add	fp, #4
2780c     A7 16 02 FB | 	rdlong	arg03, fp
27810     0C 4E 05 F1 | 	add	fp, #12
27814     A7 18 02 F6 | 	mov	arg04, fp
27818     18 4E 85 F1 | 	sub	fp, #24
2781c     4C D4 BF FD | 	call	#_fatfs_cc_f_write
27820     14 4E 05 F1 | 	add	fp, #20
27824     A7 FA 61 FC | 	wrlong	result1, fp
27828     14 4E 85 F1 | 	sub	fp, #20
2782c     00 FA 0D F2 | 	cmp	result1, #0 wz
27830     34 00 90 AD |  if_e	jmp	#LR__4080
27834     04 4E 05 F1 | 	add	fp, #4
27838     A7 18 02 FB | 	rdlong	arg04, fp
2783c     0C 17 02 F6 | 	mov	arg03, arg04
27840     08 18 06 F1 | 	add	arg04, #8
27844     0C 19 02 FB | 	rdlong	arg04, arg04
27848     20 18 46 F5 | 	or	arg04, #32
2784c     08 16 06 F1 | 	add	arg03, #8
27850     0B 19 62 FC | 	wrlong	arg04, arg03
27854                 | '         fil->state |=  (0x20) ;
27854                 | '         return _set_dos_error(r);
27854     10 4E 05 F1 | 	add	fp, #16
27858     A7 12 02 FB | 	rdlong	arg01, fp
2785c     14 4E 85 F1 | 	sub	fp, #20
27860     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27864     0C 00 90 FD | 	jmp	#LR__4081
27868                 | LR__4080
27868                 | '     }
27868                 | '     return x;
27868     18 4E 05 F1 | 	add	fp, #24
2786c     A7 FA 01 FB | 	rdlong	result1, fp
27870     18 4E 85 F1 | 	sub	fp, #24
27874                 | LR__4081
27874     A7 F0 03 F6 | 	mov	ptra, fp
27878     B2 00 A0 FD | 	call	#popregs_
2787c                 | _fatfs_cc_v_write_ret
2787c     2D 00 64 FD | 	ret
27880                 | 
27880                 | _fatfs_cc_v_lseek
27880     04 4A 05 F6 | 	mov	COUNT_, #4
27884     A8 00 A0 FD | 	call	#pushregs_
27888     0A 1F 02 F6 | 	mov	local01, arg02
2788c     0B 21 02 F6 | 	mov	local02, arg03
27890     09 23 02 FB | 	rdlong	local03, arg01
27894     02 00 00 FF 
27898     14 22 0E F1 | 	add	local03, ##1044 wz
2789c                 | '         return _seterror( 5 );
2789c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
278a0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
278a4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
278a8     01 FA 65 A6 |  if_e	neg	result1, #1
278ac     4C 00 90 AD |  if_e	jmp	#LR__4092
278b0     00 20 0E F2 | 	cmp	local02, #0 wz
278b4     24 00 90 AD |  if_e	jmp	#LR__4090
278b8     01 20 0E F2 | 	cmp	local02, #1 wz
278bc     14 22 06 A1 |  if_e	add	local03, #20
278c0     11 25 02 AB |  if_e	rdlong	local04, local03
278c4     14 22 86 A1 |  if_e	sub	local03, #20
278c8     12 1F 02 A1 |  if_e	add	local01, local04
278cc     0C 22 06 51 |  if_ne	add	local03, #12
278d0     11 25 02 5B |  if_ne	rdlong	local04, local03
278d4     0C 22 86 51 |  if_ne	sub	local03, #12
278d8     12 1F 02 51 |  if_ne	add	local01, local04
278dc                 | LR__4090
278dc     0F 15 02 F6 | 	mov	arg02, local01
278e0     11 13 02 F6 | 	mov	arg01, local03
278e4     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
278e8     FD 12 0A F6 | 	mov	arg01, result1 wz
278ec     08 00 90 AD |  if_e	jmp	#LR__4091
278f0                 | '         return _set_dos_error(result);
278f0     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
278f4     04 00 90 FD | 	jmp	#LR__4092
278f8                 | LR__4091
278f8                 | '     }
278f8                 | '     return offset;
278f8     0F FB 01 F6 | 	mov	result1, local01
278fc                 | LR__4092
278fc     A7 F0 03 F6 | 	mov	ptra, fp
27900     B2 00 A0 FD | 	call	#popregs_
27904                 | _fatfs_cc_v_lseek_ret
27904     2D 00 64 FD | 	ret
27908                 | 
27908                 | _fatfs_cc_v_ioctl
27908                 | ' {
27908                 | '     return _seterror( 10 );
27908     20 E8 05 F1 | 	add	ptr___system__dat__, #32
2790c     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
27910     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
27914     01 FA 65 F6 | 	neg	result1, #1
27918                 | _fatfs_cc_v_ioctl_ret
27918     2D 00 64 FD | 	ret
2791c                 | 
2791c                 | _fatfs_cc_v_mkdir
2791c     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
27920     FD 12 02 F6 | 	mov	arg01, result1
27924                 | ' 
27924                 | '     r = f_mkdir(name);
27924                 | '     return _set_dos_error(r);
27924     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27928                 | _fatfs_cc_v_mkdir_ret
27928     2D 00 64 FD | 	ret
2792c                 | 
2792c                 | _fatfs_cc_v_remove
2792c     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
27930     FD 12 02 F6 | 	mov	arg01, result1
27934                 | ' 
27934                 | '     r = f_unlink(name);
27934                 | '     return _set_dos_error(r);
27934     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27938                 | _fatfs_cc_v_remove_ret
27938     2D 00 64 FD | 	ret
2793c                 | 
2793c                 | _fatfs_cc_v_rmdir
2793c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
27940     FD 12 02 F6 | 	mov	arg01, result1
27944                 | ' 
27944                 | '     r = f_unlink(name);
27944                 | '     return _set_dos_error(r);
27944     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27948                 | _fatfs_cc_v_rmdir_ret
27948     2D 00 64 FD | 	ret
2794c                 | 
2794c                 | _fatfs_cc_v_rename
2794c     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
27950     FD 12 02 F6 | 	mov	arg01, result1
27954                 | '     return _set_dos_error(r);
27954     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27958                 | _fatfs_cc_v_rename_ret
27958     2D 00 64 FD | 	ret
2795c                 | 
2795c                 | _fatfs_cc_v_open
2795c     07 4A 05 F6 | 	mov	COUNT_, #7
27960     A8 00 A0 FD | 	call	#pushregs_
27964     09 1F 02 F6 | 	mov	local01, arg01
27968     0A 21 02 F6 | 	mov	local02, arg02
2796c     0B 23 02 F6 | 	mov	local03, arg03
27970     03 00 00 FF 
27974     3C 12 06 F6 | 	mov	arg01, ##1596
27978                 | '     return _gc_alloc(size);
27978     10 14 06 F6 | 	mov	arg02, #16
2797c     A0 58 BF FD | 	call	#__system___gc_doalloc
27980     FD 24 0A F6 | 	mov	local04, result1 wz
27984                 | '       return _seterror( 7 );
27984     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27988     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2798c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27990     01 FA 65 A6 |  if_e	neg	result1, #1
27994     98 00 90 AD |  if_e	jmp	#LR__4106
27998     12 13 02 F6 | 	mov	arg01, local04
2799c     00 14 06 F6 | 	mov	arg02, #0
279a0     03 00 00 FF 
279a4     3C 16 06 F6 | 	mov	arg03, ##1596
279a8     98 00 A0 FD | 	call	#\builtin_bytefill_
279ac                 | '   switch (flags & 3) {
279ac     11 27 02 F6 | 	mov	local05, local03
279b0     03 26 0E F5 | 	and	local05, #3 wz
279b4     0C 00 90 AD |  if_e	jmp	#LR__4100
279b8     01 26 0E F2 | 	cmp	local05, #1 wz
279bc     0C 00 90 AD |  if_e	jmp	#LR__4101
279c0     10 00 90 FD | 	jmp	#LR__4102
279c4                 | LR__4100
279c4     01 28 06 F6 | 	mov	local06, #1
279c8                 | '       fs_flags =  0x01 ;
279c8                 | '       break;
279c8     0C 00 90 FD | 	jmp	#LR__4103
279cc                 | LR__4101
279cc     02 28 06 F6 | 	mov	local06, #2
279d0                 | '       fs_flags =  0x02 ;
279d0                 | '       break;
279d0     04 00 90 FD | 	jmp	#LR__4103
279d4                 | LR__4102
279d4     03 28 06 F6 | 	mov	local06, #3
279d8                 | '       fs_flags =  0x01  |  0x02 ;
279d8                 | '       break;
279d8                 | LR__4103
279d8     08 22 CE F7 | 	test	local03, #8 wz
279dc     18 28 46 55 |  if_ne	or	local06, #24
279e0     08 00 90 5D |  if_ne	jmp	#LR__4104
279e4     20 22 CE F7 | 	test	local03, #32 wz
279e8     30 28 46 55 |  if_ne	or	local06, #48
279ec                 | LR__4104
279ec     02 00 00 FF 
279f0     14 24 06 F1 | 	add	local04, ##1044
279f4     12 13 02 F6 | 	mov	arg01, local04
279f8     02 00 00 FF 
279fc     14 24 86 F1 | 	sub	local04, ##1044
27a00     10 15 02 F6 | 	mov	arg02, local02
27a04     14 17 02 F6 | 	mov	arg03, local06
27a08     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
27a0c     FD 2A 0A F6 | 	mov	local07, result1 wz
27a10     14 00 90 AD |  if_e	jmp	#LR__4105
27a14     12 13 02 F6 | 	mov	arg01, local04
27a18                 | '     return _gc_free(ptr);
27a18     10 59 BF FD | 	call	#__system___gc_free
27a1c                 | '     free(f);
27a1c                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27a1c                 | '     return _set_dos_error(r);
27a1c     15 13 02 F6 | 	mov	arg01, local07
27a20     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27a24     08 00 90 FD | 	jmp	#LR__4106
27a28                 | LR__4105
27a28     0F 25 62 FC | 	wrlong	local04, local01
27a2c                 | '   }
27a2c                 | '   fil->vfsdata = f;
27a2c                 | '   return 0;
27a2c     00 FA 05 F6 | 	mov	result1, #0
27a30                 | LR__4106
27a30     A7 F0 03 F6 | 	mov	ptra, fp
27a34     B2 00 A0 FD | 	call	#popregs_
27a38                 | _fatfs_cc_v_open_ret
27a38     2D 00 64 FD | 	ret
27a3c                 | 
27a3c                 | _fatfs_cc_v_flush
27a3c     09 13 02 FB | 	rdlong	arg01, arg01
27a40     02 00 00 FF 
27a44     14 12 0E F1 | 	add	arg01, ##1044 wz
27a48                 | '         return _seterror( 5 );
27a48     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27a4c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27a50     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27a54     01 FA 65 A6 |  if_e	neg	result1, #1
27a58     0C 00 90 AD |  if_e	jmp	#LR__4110
27a5c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
27a60     FD 12 02 F6 | 	mov	arg01, result1
27a64                 | '     }
27a64                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27a64                 | '     result = f_sync(f);
27a64                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27a64                 | '     return _set_dos_error(result);
27a64     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27a68                 | LR__4110
27a68                 | _fatfs_cc_v_flush_ret
27a68     2D 00 64 FD | 	ret
27a6c                 | 
27a6c                 | _fatfs_cc_v_init
27a6c                 | ' {
27a6c                 | '     return 0;
27a6c     00 FA 05 F6 | 	mov	result1, #0
27a70                 | _fatfs_cc_v_init_ret
27a70     2D 00 64 FD | 	ret
27a74                 | 
27a74                 | _fatfs_cc_v_deinit
27a74     44 01 00 FF 
27a78     D0 15 06 F6 | 	mov	arg02, ##@LR__4306
27a7c     00 12 06 F6 | 	mov	arg01, #0
27a80     00 16 06 F6 | 	mov	arg03, #0
27a84     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
27a88     01 00 00 FF 
27a8c     08 E4 05 F1 | 	add	objptr, ##520
27a90     F2 12 02 FB | 	rdlong	arg01, objptr
27a94     04 E4 05 F1 | 	add	objptr, #4
27a98     F2 14 02 FB | 	rdlong	arg02, objptr
27a9c     01 00 00 FF 
27aa0     0C E4 85 F1 | 	sub	objptr, ##524
27aa4     50 40 BF FD | 	call	#__system___freepins
27aa8                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27aa8                 | '     _freepins(f_pinmask);
27aa8                 | '     return 0;
27aa8     00 FA 05 F6 | 	mov	result1, #0
27aac                 | _fatfs_cc_v_deinit_ret
27aac     2D 00 64 FD | 	ret
27ab0                 | 
27ab0                 | _fatfs_cc_get_vfs
27ab0     01 4A 05 F6 | 	mov	COUNT_, #1
27ab4     A8 00 A0 FD | 	call	#pushregs_
27ab8     09 1F 02 F6 | 	mov	local01, arg01
27abc     50 12 06 F6 | 	mov	arg01, #80
27ac0     2C 57 BF FD | 	call	#__system___gc_alloc_managed
27ac4     FD 12 02 F6 | 	mov	arg01, result1
27ac8     F2 FA 01 F6 | 	mov	result1, objptr
27acc     58 FA 25 F4 | 	bith	result1, #88
27ad0     09 FB 61 FC | 	wrlong	result1, arg01
27ad4     F2 FA 01 F6 | 	mov	result1, objptr
27ad8     00 88 03 FF 
27adc     00 FA 45 F5 | 	or	result1, ##118489088
27ae0     04 12 06 F1 | 	add	arg01, #4
27ae4     09 FB 61 FC | 	wrlong	result1, arg01
27ae8     F2 FA 01 F6 | 	mov	result1, objptr
27aec     00 90 03 FF 
27af0     00 FA 45 F5 | 	or	result1, ##119537664
27af4     04 12 06 F1 | 	add	arg01, #4
27af8     09 FB 61 FC | 	wrlong	result1, arg01
27afc     F2 FA 01 F6 | 	mov	result1, objptr
27b00     00 98 03 FF 
27b04     00 FA 45 F5 | 	or	result1, ##120586240
27b08     04 12 06 F1 | 	add	arg01, #4
27b0c     09 FB 61 FC | 	wrlong	result1, arg01
27b10     F2 FA 01 F6 | 	mov	result1, objptr
27b14     00 A0 03 FF 
27b18     00 FA 45 F5 | 	or	result1, ##121634816
27b1c     04 12 06 F1 | 	add	arg01, #4
27b20     09 FB 61 FC | 	wrlong	result1, arg01
27b24     04 12 06 F1 | 	add	arg01, #4
27b28     09 01 68 FC | 	wrlong	#0, arg01
27b2c     04 12 06 F1 | 	add	arg01, #4
27b30     09 1F 62 FC | 	wrlong	local01, arg01
27b34     04 12 06 F1 | 	add	arg01, #4
27b38     09 01 68 FC | 	wrlong	#0, arg01
27b3c     F2 FA 01 F6 | 	mov	result1, objptr
27b40     00 A8 03 FF 
27b44     00 FA 45 F5 | 	or	result1, ##122683392
27b48     04 12 06 F1 | 	add	arg01, #4
27b4c     09 FB 61 FC | 	wrlong	result1, arg01
27b50     F2 FA 01 F6 | 	mov	result1, objptr
27b54     00 B0 03 FF 
27b58     00 FA 45 F5 | 	or	result1, ##123731968
27b5c     04 12 06 F1 | 	add	arg01, #4
27b60     09 FB 61 FC | 	wrlong	result1, arg01
27b64     F2 FA 01 F6 | 	mov	result1, objptr
27b68     00 B8 03 FF 
27b6c     00 FA 45 F5 | 	or	result1, ##124780544
27b70     04 12 06 F1 | 	add	arg01, #4
27b74     09 FB 61 FC | 	wrlong	result1, arg01
27b78     F2 FA 01 F6 | 	mov	result1, objptr
27b7c     77 FA 25 F4 | 	bith	result1, #119
27b80     04 12 06 F1 | 	add	arg01, #4
27b84     09 FB 61 FC | 	wrlong	result1, arg01
27b88     F2 FA 01 F6 | 	mov	result1, objptr
27b8c     00 C8 03 FF 
27b90     00 FA 45 F5 | 	or	result1, ##126877696
27b94     04 12 06 F1 | 	add	arg01, #4
27b98     09 FB 61 FC | 	wrlong	result1, arg01
27b9c     F2 FA 01 F6 | 	mov	result1, objptr
27ba0     00 D0 03 FF 
27ba4     00 FA 45 F5 | 	or	result1, ##127926272
27ba8     04 12 06 F1 | 	add	arg01, #4
27bac     09 FB 61 FC | 	wrlong	result1, arg01
27bb0     F2 FA 01 F6 | 	mov	result1, objptr
27bb4     00 D8 03 FF 
27bb8     00 FA 45 F5 | 	or	result1, ##128974848
27bbc     04 12 06 F1 | 	add	arg01, #4
27bc0     09 FB 61 FC | 	wrlong	result1, arg01
27bc4     F2 FA 01 F6 | 	mov	result1, objptr
27bc8     96 FA 25 F4 | 	bith	result1, #150
27bcc     04 12 06 F1 | 	add	arg01, #4
27bd0     09 FB 61 FC | 	wrlong	result1, arg01
27bd4     F2 FA 01 F6 | 	mov	result1, objptr
27bd8     00 E8 03 FF 
27bdc     00 FA 45 F5 | 	or	result1, ##131072000
27be0     04 12 06 F1 | 	add	arg01, #4
27be4     09 FB 61 FC | 	wrlong	result1, arg01
27be8     F2 FA 01 F6 | 	mov	result1, objptr
27bec     B5 FA 25 F4 | 	bith	result1, #181
27bf0     04 12 06 F1 | 	add	arg01, #4
27bf4     09 FB 61 FC | 	wrlong	result1, arg01
27bf8     F2 FA 01 F6 | 	mov	result1, objptr
27bfc     D4 FA 25 F4 | 	bith	result1, #212
27c00     04 12 06 F1 | 	add	arg01, #4
27c04     09 FB 61 FC | 	wrlong	result1, arg01
27c08     F2 FA 01 F6 | 	mov	result1, objptr
27c0c     1B FA 25 F4 | 	bith	result1, #27
27c10     04 12 06 F1 | 	add	arg01, #4
27c14     09 FB 61 FC | 	wrlong	result1, arg01
27c18     4C 12 86 F1 | 	sub	arg01, #76
27c1c                 | ' 
27c1c                 | '     v->close = &v_close;
27c1c                 | '     v->read = &v_read;
27c1c                 | '     v->write = &v_write;
27c1c                 | '     v->lseek = &v_lseek;
27c1c                 | '     v->ioctl = &v_ioctl;
27c1c                 | '     v->flush = 0;
27c1c                 | '     v->vfs_data = ptr;
27c1c                 | '     v->reserved = 0;
27c1c                 | ' 
27c1c                 | '     v->open = &v_open;
27c1c                 | '     v->creat = &v_creat;
27c1c                 | '     v->opendir = &v_opendir;
27c1c                 | '     v->closedir = &v_closedir;
27c1c                 | '     v->readdir = &v_readdir;
27c1c                 | '     v->stat = &v_stat;
27c1c                 | ' 
27c1c                 | '     v->mkdir = &v_mkdir;
27c1c                 | '     v->rmdir = &v_rmdir;
27c1c                 | ' 
27c1c                 | '     v->remove = &v_remove;
27c1c                 | '     v->rename = &v_rename;
27c1c                 | ' 
27c1c                 | '     v->init = &v_init;
27c1c                 | '     v->deinit = &v_deinit;
27c1c                 | ' 
27c1c                 | '     return v;
27c1c     09 FB 01 F6 | 	mov	result1, arg01
27c20     A7 F0 03 F6 | 	mov	ptra, fp
27c24     B2 00 A0 FD | 	call	#popregs_
27c28                 | _fatfs_cc_get_vfs_ret
27c28     2D 00 64 FD | 	ret
27c2c                 | 
27c2c                 | _fatfs_cc_xmit_mmc_0994
27c2c     01 00 00 FF 
27c30     10 E4 05 F1 | 	add	objptr, ##528
27c34     F2 00 02 FB | 	rdlong	_var01, objptr
27c38     08 E4 05 F1 | 	add	objptr, #8
27c3c     F2 02 02 FB | 	rdlong	_var02, objptr
27c40     01 00 00 FF 
27c44     18 E4 85 F1 | 	sub	objptr, ##536
27c48     40 02 62 FD | 	dirl	_var02
27c4c     28 02 64 FD | 	setq	#1
27c50     09 05 02 FB | 	rdlong	_var03, arg01
27c54     69 04 62 FD | 	rev	_var03
27c58     1B 04 FE F9 | 	movbyts	_var03, #27
27c5c     01 05 22 FC | 	wypin	_var03, _var02
27c60     0A 05 02 F6 | 	mov	_var03, arg02
27c64     02 14 4E F0 | 	shr	arg02, #2 wz
27c68     03 04 66 F0 | 	shl	_var03, #3
27c6c     00 05 22 FC | 	wypin	_var03, _var01
27c70     41 02 62 FD | 	dirh	_var02
27c74     08 12 06 F1 | 	add	arg01, #8
27c78     69 06 62 FD | 	rev	_var04
27c7c     1B 06 FE F9 | 	movbyts	_var04, #27
27c80                 | LR__4120
27c80     01 07 22 5C |  if_ne	wypin	_var04, _var02
27c84     09 07 02 5B |  if_ne	rdlong	_var04, arg01
27c88     04 12 06 51 |  if_ne	add	arg01, #4
27c8c     69 06 62 5D |  if_ne	rev	_var04
27c90     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
27c94                 | LR__4121
27c94     40 02 72 5D |  if_ne	testp	_var02 wc
27c98     F8 FF 9F 1D |  if_a	jmp	#LR__4121
27c9c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4120
27ca0                 | LR__4122
27ca0     40 00 72 FD | 	testp	_var01 wc
27ca4     F8 FF 9F 3D |  if_ae	jmp	#LR__4122
27ca8     40 02 62 FD | 	dirl	_var02
27cac     FF FF FF FF 
27cb0     01 FF 2B FC | 	wypin	##-1, _var02
27cb4     41 02 62 FD | 	dirh	_var02
27cb8                 | _fatfs_cc_xmit_mmc_0994_ret
27cb8     2D 00 64 FD | 	ret
27cbc                 | 
27cbc                 | _fatfs_cc_rcvr_mmc_1001
27cbc     01 00 00 FF 
27cc0     10 E4 05 F1 | 	add	objptr, ##528
27cc4     F2 00 02 FB | 	rdlong	_var01, objptr
27cc8     0C E4 05 F1 | 	add	objptr, #12
27ccc     F2 02 02 FB | 	rdlong	_var02, objptr
27cd0     01 00 00 FF 
27cd4     1C E4 85 F1 | 	sub	objptr, ##540
27cd8     01 03 08 FC | 	akpin	_var02
27cdc     0A 05 0A F6 | 	mov	_var03, arg02 wz
27ce0     02 04 4E F0 | 	shr	_var03, #2 wz
27ce4     30 00 90 AD |  if_e	jmp	#LR__4132
27ce8     02 07 02 F6 | 	mov	_var04, _var03
27cec     05 06 66 F0 | 	shl	_var04, #5
27cf0     00 07 22 FC | 	wypin	_var04, _var01
27cf4     01 7F 18 FC | 	wxpin	#63, _var02
27cf8                 | LR__4130
27cf8                 | LR__4131
27cf8     40 02 72 FD | 	testp	_var02 wc
27cfc     F8 FF 9F 3D |  if_ae	jmp	#LR__4131
27d00     01 07 8A FA | 	rdpin	_var04, _var02
27d04     69 06 62 FD | 	rev	_var04
27d08     1B 06 FE F9 | 	movbyts	_var04, #27
27d0c     09 07 62 FC | 	wrlong	_var04, arg01
27d10     04 12 06 F1 | 	add	arg01, #4
27d14     F8 05 6E FB | 	djnz	_var03, #LR__4130
27d18                 | LR__4132
27d18     03 14 0E F5 | 	and	arg02, #3 wz
27d1c     24 00 90 AD |  if_e	jmp	#LR__4135
27d20     01 4F 18 FC | 	wxpin	#39, _var02
27d24                 | LR__4133
27d24     00 11 28 FC | 	wypin	#8, _var01
27d28                 | LR__4134
27d28     40 02 72 FD | 	testp	_var02 wc
27d2c     F8 FF 9F 3D |  if_ae	jmp	#LR__4134
27d30     01 07 8A FA | 	rdpin	_var04, _var02
27d34     69 06 62 FD | 	rev	_var04
27d38     09 07 42 FC | 	wrbyte	_var04, arg01
27d3c     01 12 06 F1 | 	add	arg01, #1
27d40     F8 15 6E FB | 	djnz	arg02, #LR__4133
27d44                 | LR__4135
27d44                 | _fatfs_cc_rcvr_mmc_1001_ret
27d44     2D 00 64 FD | 	ret
27d48                 | 
27d48                 | _fatfs_cc_wait_ready_1005
27d48     01 4A 05 F6 | 	mov	COUNT_, #1
27d4c     A8 00 A0 FD | 	call	#pushregs_
27d50     10 F0 07 F1 | 	add	ptra, #16
27d54     1A FA 61 FD | 	getct	result1
27d58     08 4E 05 F1 | 	add	fp, #8
27d5c     A7 FA 61 FC | 	wrlong	result1, fp
27d60     14 1E 06 FB | 	rdlong	local01, #20
27d64     01 1E 46 F0 | 	shr	local01, #1
27d68     04 4E 05 F1 | 	add	fp, #4
27d6c     A7 1E 62 FC | 	wrlong	local01, fp
27d70     0C 4E 85 F1 | 	sub	fp, #12
27d74                 | ' {
27d74                 | ' 	BYTE d;
27d74                 | ' 	UINT tmr, tmout;
27d74                 | ' 
27d74                 | ' 	tmr = _cnt();
27d74                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
27d74                 | ' 	for(;;) {
27d74                 | LR__4140
27d74     04 4E 05 F1 | 	add	fp, #4
27d78     A7 12 02 F6 | 	mov	arg01, fp
27d7c     04 4E 85 F1 | 	sub	fp, #4
27d80     01 14 06 F6 | 	mov	arg02, #1
27d84     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27d88     04 4E 05 F1 | 	add	fp, #4
27d8c     A7 1E C2 FA | 	rdbyte	local01, fp
27d90     04 4E 85 F1 | 	sub	fp, #4
27d94     FF 1E 0E F2 | 	cmp	local01, #255 wz
27d98     01 FA 05 A6 |  if_e	mov	result1, #1
27d9c     28 00 90 AD |  if_e	jmp	#LR__4141
27da0     1A FA 61 FD | 	getct	result1
27da4     08 4E 05 F1 | 	add	fp, #8
27da8     A7 1E 02 FB | 	rdlong	local01, fp
27dac     0F FB 81 F1 | 	sub	result1, local01
27db0     04 4E 05 F1 | 	add	fp, #4
27db4     A7 1E 02 FB | 	rdlong	local01, fp
27db8     0C 4E 85 F1 | 	sub	fp, #12
27dbc     0F FB 11 F2 | 	cmp	result1, local01 wc
27dc0     00 FA 05 36 |  if_ae	mov	result1, #0
27dc4     AC FF 9F CD |  if_b	jmp	#LR__4140
27dc8                 | LR__4141
27dc8     A7 F0 03 F6 | 	mov	ptra, fp
27dcc     B2 00 A0 FD | 	call	#popregs_
27dd0                 | _fatfs_cc_wait_ready_1005_ret
27dd0     2D 00 64 FD | 	ret
27dd4                 | 
27dd4                 | _fatfs_cc_deselect_1011
27dd4     00 4A 05 F6 | 	mov	COUNT_, #0
27dd8     A8 00 A0 FD | 	call	#pushregs_
27ddc     14 F0 07 F1 | 	add	ptra, #20
27de0     01 00 00 FF 
27de4     14 E4 05 F1 | 	add	objptr, ##532
27de8     F2 14 02 FB | 	rdlong	arg02, objptr
27dec     04 4E 05 F1 | 	add	fp, #4
27df0     A7 14 62 FC | 	wrlong	arg02, fp
27df4     04 E4 85 F1 | 	sub	objptr, #4
27df8     F2 14 02 FB | 	rdlong	arg02, objptr
27dfc     04 4E 05 F1 | 	add	fp, #4
27e00     A7 14 62 FC | 	wrlong	arg02, fp
27e04     08 E4 05 F1 | 	add	objptr, #8
27e08     F2 14 02 FB | 	rdlong	arg02, objptr
27e0c     04 4E 05 F1 | 	add	fp, #4
27e10     A7 14 62 FC | 	wrlong	arg02, fp
27e14     04 E4 05 F1 | 	add	objptr, #4
27e18     F2 14 02 FB | 	rdlong	arg02, objptr
27e1c     01 00 00 FF 
27e20     1C E4 85 F1 | 	sub	objptr, ##540
27e24     04 4E 05 F1 | 	add	fp, #4
27e28     A7 14 62 FC | 	wrlong	arg02, fp
27e2c     0C 4E 85 F1 | 	sub	fp, #12
27e30     A7 12 02 FB | 	rdlong	arg01, fp
27e34     04 4E 85 F1 | 	sub	fp, #4
27e38     59 12 62 FD | 	drvh	arg01
27e3c     1F 20 64 FD | 	waitx	#16
27e40     A7 12 02 F6 | 	mov	arg01, fp
27e44     01 14 06 F6 | 	mov	arg02, #1
27e48     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27e4c     A7 F0 03 F6 | 	mov	ptra, fp
27e50     B2 00 A0 FD | 	call	#popregs_
27e54                 | _fatfs_cc_deselect_1011_ret
27e54     2D 00 64 FD | 	ret
27e58                 | 
27e58                 | _fatfs_cc_select_1015
27e58     00 4A 05 F6 | 	mov	COUNT_, #0
27e5c     A8 00 A0 FD | 	call	#pushregs_
27e60     10 F0 07 F1 | 	add	ptra, #16
27e64     01 00 00 FF 
27e68     14 E4 05 F1 | 	add	objptr, ##532
27e6c     F2 14 02 FB | 	rdlong	arg02, objptr
27e70     08 4E 05 F1 | 	add	fp, #8
27e74     A7 14 62 FC | 	wrlong	arg02, fp
27e78     08 E4 05 F1 | 	add	objptr, #8
27e7c     F2 12 02 FB | 	rdlong	arg01, objptr
27e80     01 00 00 FF 
27e84     1C E4 85 F1 | 	sub	objptr, ##540
27e88     04 4E 05 F1 | 	add	fp, #4
27e8c     A7 12 62 FC | 	wrlong	arg01, fp
27e90     50 12 62 FD | 	fltl	arg01
27e94     04 4E 85 F1 | 	sub	fp, #4
27e98     A7 12 02 FB | 	rdlong	arg01, fp
27e9c     58 12 62 FD | 	drvl	arg01
27ea0     1F 20 64 FD | 	waitx	#16
27ea4     04 4E 05 F1 | 	add	fp, #4
27ea8     A7 12 02 FB | 	rdlong	arg01, fp
27eac     41 12 62 FD | 	dirh	arg01
27eb0     08 4E 85 F1 | 	sub	fp, #8
27eb4     A7 12 02 F6 | 	mov	arg01, fp
27eb8     04 4E 85 F1 | 	sub	fp, #4
27ebc     01 14 06 F6 | 	mov	arg02, #1
27ec0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27ec4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1005
27ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
27ecc     01 FA 05 56 |  if_ne	mov	result1, #1
27ed0     08 00 90 5D |  if_ne	jmp	#LR__4150
27ed4     FC FE BF FD | 	call	#_fatfs_cc_deselect_1011
27ed8                 | ' 
27ed8                 | ' 	deselect();
27ed8                 | ' 	return 0;
27ed8     00 FA 05 F6 | 	mov	result1, #0
27edc                 | LR__4150
27edc     A7 F0 03 F6 | 	mov	ptra, fp
27ee0     B2 00 A0 FD | 	call	#popregs_
27ee4                 | _fatfs_cc_select_1015_ret
27ee4     2D 00 64 FD | 	ret
27ee8                 | 
27ee8                 | _fatfs_cc_rcvr_datablock_1019
27ee8     01 4A 05 F6 | 	mov	COUNT_, #1
27eec     A8 00 A0 FD | 	call	#pushregs_
27ef0     18 F0 07 F1 | 	add	ptra, #24
27ef4     04 4E 05 F1 | 	add	fp, #4
27ef8     A7 12 62 FC | 	wrlong	arg01, fp
27efc     04 4E 05 F1 | 	add	fp, #4
27f00     A7 14 62 FC | 	wrlong	arg02, fp
27f04     1A FA 61 FD | 	getct	result1
27f08     08 4E 05 F1 | 	add	fp, #8
27f0c     A7 FA 61 FC | 	wrlong	result1, fp
27f10     14 1E 06 FB | 	rdlong	local01, #20
27f14     03 1E 46 F0 | 	shr	local01, #3
27f18     04 4E 05 F1 | 	add	fp, #4
27f1c     A7 1E 62 FC | 	wrlong	local01, fp
27f20     14 4E 85 F1 | 	sub	fp, #20
27f24                 | ' 	BYTE *buff,
27f24                 | ' 	UINT btr
27f24                 | ' )
27f24                 | ' {
27f24                 | ' 	BYTE d[2];
27f24                 | ' 	UINT tmr, tmout;
27f24                 | ' 
27f24                 | ' 	tmr = _cnt();
27f24                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
27f24                 | ' 	for(;;) {
27f24                 | LR__4160
27f24     0C 4E 05 F1 | 	add	fp, #12
27f28     A7 12 02 F6 | 	mov	arg01, fp
27f2c     0C 4E 85 F1 | 	sub	fp, #12
27f30     01 14 06 F6 | 	mov	arg02, #1
27f34     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27f38     0C 4E 05 F1 | 	add	fp, #12
27f3c     A7 1E C2 FA | 	rdbyte	local01, fp
27f40     0C 4E 85 F1 | 	sub	fp, #12
27f44     FF 1E 0E F2 | 	cmp	local01, #255 wz
27f48     28 00 90 5D |  if_ne	jmp	#LR__4161
27f4c     1A FA 61 FD | 	getct	result1
27f50     FD 1E 02 F6 | 	mov	local01, result1
27f54     10 4E 05 F1 | 	add	fp, #16
27f58     A7 14 02 FB | 	rdlong	arg02, fp
27f5c     0A 1F 82 F1 | 	sub	local01, arg02
27f60     04 4E 05 F1 | 	add	fp, #4
27f64     A7 14 02 FB | 	rdlong	arg02, fp
27f68     14 4E 85 F1 | 	sub	fp, #20
27f6c     0A 1F 12 F2 | 	cmp	local01, arg02 wc
27f70     B0 FF 9F CD |  if_b	jmp	#LR__4160
27f74                 | LR__4161
27f74     0C 4E 05 F1 | 	add	fp, #12
27f78     A7 1E C2 FA | 	rdbyte	local01, fp
27f7c     0C 4E 85 F1 | 	sub	fp, #12
27f80     FE 1E 0E F2 | 	cmp	local01, #254 wz
27f84     00 FA 05 56 |  if_ne	mov	result1, #0
27f88     30 00 90 5D |  if_ne	jmp	#LR__4162
27f8c     04 4E 05 F1 | 	add	fp, #4
27f90     A7 12 02 FB | 	rdlong	arg01, fp
27f94     04 4E 05 F1 | 	add	fp, #4
27f98     A7 14 02 FB | 	rdlong	arg02, fp
27f9c     08 4E 85 F1 | 	sub	fp, #8
27fa0     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27fa4     0C 4E 05 F1 | 	add	fp, #12
27fa8     A7 12 02 F6 | 	mov	arg01, fp
27fac     0C 4E 85 F1 | 	sub	fp, #12
27fb0     02 14 06 F6 | 	mov	arg02, #2
27fb4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27fb8                 | ' 
27fb8                 | ' 	rcvr_mmc(buff, btr);
27fb8                 | ' 	rcvr_mmc(d, 2);
27fb8                 | ' 
27fb8                 | ' 	return 1;
27fb8     01 FA 05 F6 | 	mov	result1, #1
27fbc                 | LR__4162
27fbc     A7 F0 03 F6 | 	mov	ptra, fp
27fc0     B2 00 A0 FD | 	call	#popregs_
27fc4                 | _fatfs_cc_rcvr_datablock_1019_ret
27fc4     2D 00 64 FD | 	ret
27fc8                 | 
27fc8                 | _fatfs_cc_xmit_datablock_1021
27fc8     00 4A 05 F6 | 	mov	COUNT_, #0
27fcc     A8 00 A0 FD | 	call	#pushregs_
27fd0     10 F0 07 F1 | 	add	ptra, #16
27fd4     04 4E 05 F1 | 	add	fp, #4
27fd8     A7 12 62 FC | 	wrlong	arg01, fp
27fdc     04 4E 05 F1 | 	add	fp, #4
27fe0     A7 14 42 FC | 	wrbyte	arg02, fp
27fe4     08 4E 85 F1 | 	sub	fp, #8
27fe8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1005
27fec     00 FA 0D F2 | 	cmp	result1, #0 wz
27ff0     00 FA 05 A6 |  if_e	mov	result1, #0
27ff4     90 00 90 AD |  if_e	jmp	#LR__4171
27ff8     08 4E 05 F1 | 	add	fp, #8
27ffc     A7 14 C2 FA | 	rdbyte	arg02, fp
28000     04 4E 05 F1 | 	add	fp, #4
28004     A7 14 42 FC | 	wrbyte	arg02, fp
28008     A7 12 02 F6 | 	mov	arg01, fp
2800c     0C 4E 85 F1 | 	sub	fp, #12
28010     01 14 06 F6 | 	mov	arg02, #1
28014     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0994
28018     08 4E 05 F1 | 	add	fp, #8
2801c     A7 14 C2 FA | 	rdbyte	arg02, fp
28020     08 4E 85 F1 | 	sub	fp, #8
28024     FD 14 0E F2 | 	cmp	arg02, #253 wz
28028     58 00 90 AD |  if_e	jmp	#LR__4170
2802c     04 4E 05 F1 | 	add	fp, #4
28030     A7 12 02 FB | 	rdlong	arg01, fp
28034     04 4E 85 F1 | 	sub	fp, #4
28038     09 14 C6 F9 | 	decod	arg02, #9
2803c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0994
28040     0C 4E 05 F1 | 	add	fp, #12
28044     A7 12 02 F6 | 	mov	arg01, fp
28048     0C 4E 85 F1 | 	sub	fp, #12
2804c     02 14 06 F6 | 	mov	arg02, #2
28050     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
28054     0C 4E 05 F1 | 	add	fp, #12
28058     A7 12 02 F6 | 	mov	arg01, fp
2805c     0C 4E 85 F1 | 	sub	fp, #12
28060     01 14 06 F6 | 	mov	arg02, #1
28064     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
28068     0C 4E 05 F1 | 	add	fp, #12
2806c     A7 14 C2 FA | 	rdbyte	arg02, fp
28070     0C 4E 85 F1 | 	sub	fp, #12
28074     1F 14 06 F5 | 	and	arg02, #31
28078     05 14 0E F2 | 	cmp	arg02, #5 wz
2807c                 | ' 			return 0;
2807c     00 FA 05 56 |  if_ne	mov	result1, #0
28080     04 00 90 5D |  if_ne	jmp	#LR__4171
28084                 | LR__4170
28084                 | ' 	}
28084                 | ' 
28084                 | ' 	return 1;
28084     01 FA 05 F6 | 	mov	result1, #1
28088                 | LR__4171
28088     A7 F0 03 F6 | 	mov	ptra, fp
2808c     B2 00 A0 FD | 	call	#popregs_
28090                 | _fatfs_cc_xmit_datablock_1021_ret
28090     2D 00 64 FD | 	ret
28094                 | 
28094                 | _fatfs_cc_send_cmd_1025
28094     01 4A 05 F6 | 	mov	COUNT_, #1
28098     A8 00 A0 FD | 	call	#pushregs_
2809c     1C F0 07 F1 | 	add	ptra, #28
280a0                 | _fatfs_cc_send_cmd_1025_enter
280a0     04 4E 05 F1 | 	add	fp, #4
280a4     A7 12 42 FC | 	wrbyte	arg01, fp
280a8     04 4E 05 F1 | 	add	fp, #4
280ac     A7 14 62 FC | 	wrlong	arg02, fp
280b0     04 4E 85 F1 | 	sub	fp, #4
280b4     A7 FA C1 FA | 	rdbyte	result1, fp
280b8     04 4E 85 F1 | 	sub	fp, #4
280bc     80 FA CD F7 | 	test	result1, #128 wz
280c0     44 00 90 AD |  if_e	jmp	#LR__4180
280c4     04 4E 05 F1 | 	add	fp, #4
280c8     A7 14 C2 FA | 	rdbyte	arg02, fp
280cc     7F 14 06 F5 | 	and	arg02, #127
280d0     A7 14 42 FC | 	wrbyte	arg02, fp
280d4     04 4E 85 F1 | 	sub	fp, #4
280d8     37 12 06 F6 | 	mov	arg01, #55
280dc     00 14 06 F6 | 	mov	arg02, #0
280e0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1025
280e4     0C 4E 05 F1 | 	add	fp, #12
280e8     A7 FA 41 FC | 	wrbyte	result1, fp
280ec     A7 14 C2 FA | 	rdbyte	arg02, fp
280f0     0C 4E 85 F1 | 	sub	fp, #12
280f4     02 14 16 F2 | 	cmp	arg02, #2 wc
280f8     0C 4E 05 31 |  if_ae	add	fp, #12
280fc     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
28100     0C 4E 85 31 |  if_ae	sub	fp, #12
28104     6C 01 90 3D |  if_ae	jmp	#LR__4184
28108                 | LR__4180
28108     04 4E 05 F1 | 	add	fp, #4
2810c     A7 14 C2 FA | 	rdbyte	arg02, fp
28110     04 4E 85 F1 | 	sub	fp, #4
28114     0C 14 0E F2 | 	cmp	arg02, #12 wz
28118     14 00 90 AD |  if_e	jmp	#LR__4181
2811c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1011
28120     34 FD BF FD | 	call	#_fatfs_cc_select_1015
28124     00 FA 0D F2 | 	cmp	result1, #0 wz
28128     FF FA 05 A6 |  if_e	mov	result1, #255
2812c     44 01 90 AD |  if_e	jmp	#LR__4184
28130                 | LR__4181
28130     04 4E 05 F1 | 	add	fp, #4
28134     A7 14 C2 FA | 	rdbyte	arg02, fp
28138     40 FA 05 F6 | 	mov	result1, #64
2813c     0A FB 41 F5 | 	or	result1, arg02
28140     10 4E 05 F1 | 	add	fp, #16
28144     A7 FA 41 FC | 	wrbyte	result1, fp
28148     0C 4E 85 F1 | 	sub	fp, #12
2814c     A7 FA 01 FB | 	rdlong	result1, fp
28150     18 FA 45 F0 | 	shr	result1, #24
28154     0D 4E 05 F1 | 	add	fp, #13
28158     A7 FA 41 FC | 	wrbyte	result1, fp
2815c     0D 4E 85 F1 | 	sub	fp, #13
28160     A7 FA 01 FB | 	rdlong	result1, fp
28164     10 FA 45 F0 | 	shr	result1, #16
28168     0E 4E 05 F1 | 	add	fp, #14
2816c     A7 FA 41 FC | 	wrbyte	result1, fp
28170     0E 4E 85 F1 | 	sub	fp, #14
28174     A7 FA 01 FB | 	rdlong	result1, fp
28178     08 FA 45 F0 | 	shr	result1, #8
2817c     0F 4E 05 F1 | 	add	fp, #15
28180     A7 FA 41 FC | 	wrbyte	result1, fp
28184     0F 4E 85 F1 | 	sub	fp, #15
28188     A7 FA 01 FB | 	rdlong	result1, fp
2818c     10 4E 05 F1 | 	add	fp, #16
28190     A7 FA 41 FC | 	wrbyte	result1, fp
28194     0C 4E 85 F1 | 	sub	fp, #12
28198     A7 02 48 FC | 	wrbyte	#1, fp
2819c     08 4E 85 F1 | 	sub	fp, #8
281a0     A7 FA C9 FA | 	rdbyte	result1, fp wz
281a4     04 4E 85 F1 | 	sub	fp, #4
281a8     0C 4E 05 A1 |  if_e	add	fp, #12
281ac     A7 2A 49 AC |  if_e	wrbyte	#149, fp
281b0     0C 4E 85 A1 |  if_e	sub	fp, #12
281b4     04 4E 05 F1 | 	add	fp, #4
281b8     A7 FA C1 FA | 	rdbyte	result1, fp
281bc     04 4E 85 F1 | 	sub	fp, #4
281c0     08 FA 0D F2 | 	cmp	result1, #8 wz
281c4     0C 4E 05 A1 |  if_e	add	fp, #12
281c8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
281cc     0C 4E 85 A1 |  if_e	sub	fp, #12
281d0     0C 4E 05 F1 | 	add	fp, #12
281d4     A7 14 C2 FA | 	rdbyte	arg02, fp
281d8     0D 4E 05 F1 | 	add	fp, #13
281dc     A7 14 42 FC | 	wrbyte	arg02, fp
281e0     05 4E 85 F1 | 	sub	fp, #5
281e4     A7 12 02 F6 | 	mov	arg01, fp
281e8     14 4E 85 F1 | 	sub	fp, #20
281ec     06 14 06 F6 | 	mov	arg02, #6
281f0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0994
281f4     04 4E 05 F1 | 	add	fp, #4
281f8     A7 1E C2 FA | 	rdbyte	local01, fp
281fc     04 4E 85 F1 | 	sub	fp, #4
28200     0C 1E 0E F2 | 	cmp	local01, #12 wz
28204     10 4E 05 A1 |  if_e	add	fp, #16
28208     A7 12 02 A6 |  if_e	mov	arg01, fp
2820c     10 4E 85 A1 |  if_e	sub	fp, #16
28210     01 14 06 A6 |  if_e	mov	arg02, #1
28214     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1001
28218     0C 4E 05 F1 | 	add	fp, #12
2821c     A7 14 48 FC | 	wrbyte	#10, fp
28220     0C 4E 85 F1 | 	sub	fp, #12
28224                 | ' 	n = 10;
28224                 | ' 	do
28224                 | LR__4182
28224     10 4E 05 F1 | 	add	fp, #16
28228     A7 12 02 F6 | 	mov	arg01, fp
2822c     10 4E 85 F1 | 	sub	fp, #16
28230     01 14 06 F6 | 	mov	arg02, #1
28234     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
28238     10 4E 05 F1 | 	add	fp, #16
2823c     A7 1E C2 FA | 	rdbyte	local01, fp
28240     10 4E 85 F1 | 	sub	fp, #16
28244     80 1E CE F7 | 	test	local01, #128 wz
28248     1C 00 90 AD |  if_e	jmp	#LR__4183
2824c     0C 4E 05 F1 | 	add	fp, #12
28250     A7 1E C2 FA | 	rdbyte	local01, fp
28254     01 1E 86 F1 | 	sub	local01, #1
28258     A7 1E 42 FC | 	wrbyte	local01, fp
2825c     A7 1E CA FA | 	rdbyte	local01, fp wz
28260     0C 4E 85 F1 | 	sub	fp, #12
28264     BC FF 9F 5D |  if_ne	jmp	#LR__4182
28268                 | LR__4183
28268                 | ' 
28268                 | ' 	return d;
28268     10 4E 05 F1 | 	add	fp, #16
2826c     A7 FA C1 FA | 	rdbyte	result1, fp
28270     10 4E 85 F1 | 	sub	fp, #16
28274                 | LR__4184
28274     A7 F0 03 F6 | 	mov	ptra, fp
28278     B2 00 A0 FD | 	call	#popregs_
2827c                 | _fatfs_cc_send_cmd_1025_ret
2827c     2D 00 64 FD | 	ret
28280                 | 
28280                 | _fatfs_cc_disk_deinitialize
28280     03 4A 05 F6 | 	mov	COUNT_, #3
28284     A8 00 A0 FD | 	call	#pushregs_
28288     00 12 4E F2 | 	cmps	arg01, #0 wz
2828c     01 00 00 FF 
28290     14 E4 05 F1 | 	add	objptr, ##532
28294     F2 12 02 FB | 	rdlong	arg01, objptr
28298     04 E4 85 F1 | 	sub	objptr, #4
2829c     F2 1E 02 FB | 	rdlong	local01, objptr
282a0     08 E4 05 F1 | 	add	objptr, #8
282a4     F2 20 02 FB | 	rdlong	local02, objptr
282a8     04 E4 05 F1 | 	add	objptr, #4
282ac     F2 22 02 FB | 	rdlong	local03, objptr
282b0     01 00 00 FF 
282b4     1C E4 85 F1 | 	sub	objptr, ##540
282b8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
282b8                 | '         return RES_NOTRDY;
282b8     03 FA 05 56 |  if_ne	mov	result1, #3
282bc     2C 00 90 5D |  if_ne	jmp	#LR__4190
282c0     50 12 62 FD | 	fltl	arg01
282c4     09 01 08 FC | 	wrpin	#0, arg01
282c8     50 1E 62 FD | 	fltl	local01
282cc     0F 01 08 FC | 	wrpin	#0, local01
282d0     50 20 62 FD | 	fltl	local02
282d4     10 01 08 FC | 	wrpin	#0, local02
282d8     50 22 62 FD | 	fltl	local03
282dc     11 01 08 FC | 	wrpin	#0, local03
282e0     0A 12 06 F6 | 	mov	arg01, #10
282e4     44 14 BF FD | 	call	#__system___waitms
282e8                 | '     }
282e8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
282e8                 | '     _pinclear(PIN_SS);
282e8                 | '     _pinclear(PIN_CLK);
282e8                 | '     _pinclear(PIN_DI);
282e8                 | '     _pinclear(PIN_DO);
282e8                 | ' 
282e8                 | '     _waitms(10);
282e8                 | ' 
282e8                 | '     return 0;
282e8     00 FA 05 F6 | 	mov	result1, #0
282ec                 | LR__4190
282ec     A7 F0 03 F6 | 	mov	ptra, fp
282f0     B2 00 A0 FD | 	call	#popregs_
282f4                 | _fatfs_cc_disk_deinitialize_ret
282f4     2D 00 64 FD | 	ret
282f8                 | 
282f8                 | _fatfs_cc_gettimeofday
282f8     04 4A 05 F6 | 	mov	COUNT_, #4
282fc     A8 00 A0 FD | 	call	#pushregs_
28300     09 1F 02 F6 | 	mov	local01, arg01
28304     00 10 BF FD | 	call	#__system___getus
28308     FD 12 02 F6 | 	mov	arg01, result1
2830c     02 00 00 FF 
28310     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
28314     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
28318     09 FB 01 F6 | 	mov	result1, arg01
2831c     10 FB 81 F1 | 	sub	result1, local02
28320     A1 07 00 FF 
28324     40 FA 15 FD | 	qdiv	result1, ##1000000
28328     02 00 00 FF 
2832c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
28330     18 20 62 FD | 	getqx	local02
28334     A1 07 00 FF 
28338     40 FA 15 FD | 	qdiv	result1, ##1000000
2833c     00 20 0E F2 | 	cmp	local02, #0 wz
28340     19 22 62 FD | 	getqy	local03
28344     28 00 90 AD |  if_e	jmp	#LR__4200
28348     02 00 00 FF 
2834c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
28350     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
28354     10 25 02 F1 | 	add	local04, local02
28358     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2835c     11 13 82 F1 | 	sub	arg01, local03
28360     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
28364     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
28368     02 00 00 FF 
2836c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
28370                 | LR__4200
28370     02 00 00 FF 
28374     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
28378     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2837c     02 00 00 FF 
28380     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
28384     0F 25 62 FC | 	wrlong	local04, local01
28388     04 1E 06 F1 | 	add	local01, #4
2838c     0F 23 62 FC | 	wrlong	local03, local01
28390                 | '         lastsec += secs;
28390                 | '         lastus = now - leftover;
28390                 | '     }
28390                 | '     tv->tv_sec = lastsec;
28390                 | '     tv->tv_usec = leftover;
28390                 | '     return 0;
28390     00 FA 05 F6 | 	mov	result1, #0
28394     A7 F0 03 F6 | 	mov	ptra, fp
28398     B2 00 A0 FD | 	call	#popregs_
2839c                 | _fatfs_cc_gettimeofday_ret
2839c     2D 00 64 FD | 	ret
283a0                 | 
283a0                 | _fatfs_cc__is_leap_year
283a0     09 FB 51 F6 | 	abs	result1, arg01 wc
283a4     03 FA 05 F5 | 	and	result1, #3
283a8     FD FA 89 F6 | 	negc	result1, result1 wz
283ac     38 00 90 5D |  if_ne	jmp	#LR__4211
283b0     09 FB 51 F6 | 	abs	result1, arg01 wc
283b4     64 FA 15 FD | 	qdiv	result1, #100
283b8     19 FA 61 FD | 	getqy	result1
283bc     FD FA 89 F6 | 	negc	result1, result1 wz
283c0     1C 00 90 5D |  if_ne	jmp	#LR__4210
283c4     09 FB 51 F6 | 	abs	result1, arg01 wc
283c8     90 FB 15 FD | 	qdiv	result1, #400
283cc                 | '       return (0 == y % 400);
283cc     00 FA 05 F6 | 	mov	result1, #0
283d0     19 00 62 FD | 	getqy	_var01
283d4     00 01 8A F6 | 	negc	_var01, _var01 wz
283d8     01 FA 05 A6 |  if_e	mov	result1, #1
283dc     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
283e0                 | LR__4210
283e0                 | '     return 1;
283e0     01 FA 05 F6 | 	mov	result1, #1
283e4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
283e8                 | LR__4211
283e8                 | '   }
283e8                 | '   return 0;
283e8     00 FA 05 F6 | 	mov	result1, #0
283ec                 | _fatfs_cc__is_leap_year_ret
283ec     2D 00 64 FD | 	ret
283f0                 | 
283f0                 | _fatfs_cc___tzoffset
283f0     09 01 0A F6 | 	mov	_var01, arg01 wz
283f4     FF FF FF FF 
283f8     0A FF 6B FC | 	wrlong	##-1, arg02
283fc     01 02 06 F6 | 	mov	_var02, #1
28400     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
28404                 | '                 return 0;
28404     00 FA 05 A6 |  if_e	mov	result1, #0
28408     94 02 90 AD |  if_e	jmp	#LR__4237
2840c     0A 01 68 FC | 	wrlong	#0, arg02
28410     02 00 00 FF 
28414     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
28418     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2841c                 | ' 
2841c                 | '        *hasdst = 0;
2841c                 | ' 
2841c                 | ' 	n = stdname;
2841c                 | '         while (*s && isalpha(*s)) {
2841c     02 00 00 FF 
28420     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
28424     97 28 48 FB | 	callpa	#(@LR__4221-@LR__4220)>>2,fcache_load_ptr_
28428                 | LR__4220
28428     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2842c     48 00 90 AD |  if_e	jmp	#LR__4222
28430     00 13 C2 FA | 	rdbyte	arg01, _var01
28434                 | ' {
28434                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
28434     80 12 36 F3 | 	fle	arg01, #128 wc
28438                 | '     return __ctype[c];
28438     02 00 00 FF 
2843c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
28440     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
28444     09 FB C1 FA | 	rdbyte	result1, arg01
28448     02 00 00 FF 
2844c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
28450     0C FA CD F7 | 	test	result1, #12 wz
28454     20 00 90 AD |  if_e	jmp	#LR__4222
28458     00 09 02 F6 | 	mov	_var05, _var01
2845c     00 0B 02 F6 | 	mov	_var06, _var01
28460     01 0A 06 F1 | 	add	_var06, #1
28464     04 0D C2 FA | 	rdbyte	_var07, _var05
28468     05 01 02 F6 | 	mov	_var01, _var06
2846c     03 0D 42 FC | 	wrbyte	_var07, _var04
28470     01 06 06 F1 | 	add	_var04, #1
28474     B0 FF 9F FD | 	jmp	#LR__4220
28478                 | LR__4221
28478                 | LR__4222
28478     03 01 48 FC | 	wrbyte	#0, _var04
2847c     00 0E 06 F6 | 	mov	_var08, #0
28480     00 05 C2 FA | 	rdbyte	_var03, _var01
28484     2D 04 0E F2 | 	cmp	_var03, #45 wz
28488     01 02 66 A6 |  if_e	neg	_var02, #1
2848c     01 00 06 A1 |  if_e	add	_var01, #1
28490     97 28 48 FB | 	callpa	#(@LR__4224-@LR__4223)>>2,fcache_load_ptr_
28494                 | '                 sgn = -1;
28494                 | '                 s++;
28494                 | '         }
28494                 | '         while (isdigit(*s)) {
28494                 | LR__4223
28494     00 13 C2 FA | 	rdbyte	arg01, _var01
28498                 | ' {
28498                 | '   return  (__ctype_get(c) & 0x02 ) ;
28498     80 12 36 F3 | 	fle	arg01, #128 wc
2849c                 | '     return __ctype[c];
2849c     02 00 00 FF 
284a0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
284a4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
284a8     09 FB C1 FA | 	rdbyte	result1, arg01
284ac     02 00 00 FF 
284b0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
284b4     02 FA CD F7 | 	test	result1, #2 wz
284b8     28 00 90 AD |  if_e	jmp	#LR__4225
284bc     07 05 02 F6 | 	mov	_var03, _var08
284c0     02 04 66 F0 | 	shl	_var03, #2
284c4     07 05 02 F1 | 	add	_var03, _var08
284c8     01 04 66 F0 | 	shl	_var03, #1
284cc     00 09 C2 FA | 	rdbyte	_var05, _var01
284d0     30 08 86 F1 | 	sub	_var05, #48
284d4     04 05 02 F1 | 	add	_var03, _var05
284d8     02 0F 02 F6 | 	mov	_var08, _var03
284dc     01 00 06 F1 | 	add	_var01, #1
284e0     B0 FF 9F FD | 	jmp	#LR__4223
284e4                 | LR__4224
284e4                 | LR__4225
284e4     07 00 00 FF 
284e8     10 0E 06 FD | 	qmul	_var08, ##3600
284ec     00 05 C2 FA | 	rdbyte	_var03, _var01
284f0     3A 04 0E F2 | 	cmp	_var03, #58 wz
284f4     18 10 62 FD | 	getqx	_var09
284f8     70 00 90 5D |  if_ne	jmp	#LR__4229
284fc     00 0E 06 F6 | 	mov	_var08, #0
28500     01 00 06 F1 | 	add	_var01, #1
28504     97 28 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
28508                 | '                 x = 0;
28508                 | '                 s++;
28508                 | '                 while (isdigit(*s)) {
28508                 | LR__4226
28508     00 13 C2 FA | 	rdbyte	arg01, _var01
2850c                 | ' {
2850c                 | '   return  (__ctype_get(c) & 0x02 ) ;
2850c     80 12 36 F3 | 	fle	arg01, #128 wc
28510                 | '     return __ctype[c];
28510     02 00 00 FF 
28514     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
28518     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2851c     09 FB C1 FA | 	rdbyte	result1, arg01
28520     02 00 00 FF 
28524     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
28528     02 FA CD F7 | 	test	result1, #2 wz
2852c     28 00 90 AD |  if_e	jmp	#LR__4228
28530     07 05 02 F6 | 	mov	_var03, _var08
28534     02 04 66 F0 | 	shl	_var03, #2
28538     07 05 02 F1 | 	add	_var03, _var08
2853c     01 04 66 F0 | 	shl	_var03, #1
28540     00 09 C2 FA | 	rdbyte	_var05, _var01
28544     30 08 86 F1 | 	sub	_var05, #48
28548     04 05 02 F1 | 	add	_var03, _var05
2854c     02 0F 02 F6 | 	mov	_var08, _var03
28550     01 00 06 F1 | 	add	_var01, #1
28554     B0 FF 9F FD | 	jmp	#LR__4226
28558                 | LR__4227
28558                 | LR__4228
28558     07 0D 02 F6 | 	mov	_var07, _var08
2855c     04 0C 66 F0 | 	shl	_var07, #4
28560     07 0D 82 F1 | 	sub	_var07, _var08
28564     02 0C 66 F0 | 	shl	_var07, #2
28568     06 11 02 F1 | 	add	_var09, _var07
2856c                 | LR__4229
2856c     02 00 00 FF 
28570     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
28574     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
28578     00 13 C2 FA | 	rdbyte	arg01, _var01
2857c                 | ' {
2857c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2857c     80 12 36 F3 | 	fle	arg01, #128 wc
28580                 | '     return __ctype[c];
28580     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
28584     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
28588     09 FB C1 FA | 	rdbyte	result1, arg01
2858c     02 00 00 FF 
28590     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
28594     0C FA CD F7 | 	test	result1, #12 wz
28598     50 00 90 AD |  if_e	jmp	#LR__4232
2859c     0A 03 68 FC | 	wrlong	#1, arg02
285a0                 | '                 *hasdst = 1;
285a0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
285a0                 | LR__4230
285a0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
285a4     44 00 90 AD |  if_e	jmp	#LR__4231
285a8     00 13 C2 FA | 	rdbyte	arg01, _var01
285ac                 | ' {
285ac                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
285ac     80 12 36 F3 | 	fle	arg01, #128 wc
285b0                 | '     return __ctype[c];
285b0     02 00 00 FF 
285b4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
285b8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
285bc     09 FB C1 FA | 	rdbyte	result1, arg01
285c0     02 00 00 FF 
285c4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
285c8     0C FA CD F7 | 	test	result1, #12 wz
285cc     1C 00 90 AD |  if_e	jmp	#LR__4231
285d0     00 0B 02 F6 | 	mov	_var06, _var01
285d4     01 0A 06 F1 | 	add	_var06, #1
285d8     00 0D C2 FA | 	rdbyte	_var07, _var01
285dc     05 01 02 F6 | 	mov	_var01, _var06
285e0     03 0D 42 FC | 	wrbyte	_var07, _var04
285e4     01 06 06 F1 | 	add	_var04, #1
285e8     B4 FF 9F FD | 	jmp	#LR__4230
285ec                 | LR__4231
285ec                 | LR__4232
285ec     03 01 48 FC | 	wrbyte	#0, _var04
285f0     02 00 00 FF 
285f4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
285f8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
285fc     02 00 00 FF 
28600     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
28604     20 00 90 AD |  if_e	jmp	#LR__4233
28608     02 00 00 FF 
2860c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
28610     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
28614     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
28618     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2861c     02 00 00 FF 
28620     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
28624     1C 00 90 FD | 	jmp	#LR__4234
28628                 | LR__4233
28628     02 00 00 FF 
2862c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
28630     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
28634     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
28638     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2863c     02 00 00 FF 
28640     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
28644                 | LR__4234
28644     02 00 00 FF 
28648     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2864c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
28650     02 00 00 FF 
28654     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
28658     20 00 90 AD |  if_e	jmp	#LR__4235
2865c     02 00 00 FF 
28660     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
28664     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
28668     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2866c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
28670     02 00 00 FF 
28674     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
28678     1C 00 90 FD | 	jmp	#LR__4236
2867c                 | LR__4235
2867c     02 00 00 FF 
28680     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
28684     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
28688     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2868c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
28690     02 00 00 FF 
28694     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
28698                 | LR__4236
28698     08 03 02 FD | 	qmul	_var02, _var09
2869c                 | ' 		_tzname[1] = stdname;
2869c                 | ' 
2869c                 | '         return sgn * off;
2869c     18 FA 61 FD | 	getqx	result1
286a0                 | LR__4237
286a0                 | _fatfs_cc___tzoffset_ret
286a0     2D 00 64 FD | 	ret
286a4                 | 
286a4                 | _fatfs_cc___indst
286a4     10 12 06 F1 | 	add	arg01, #16
286a8     09 01 02 FB | 	rdlong	_var01, arg01
286ac     10 12 86 F1 | 	sub	arg01, #16
286b0     02 00 0E F2 | 	cmp	_var01, #2 wz
286b4     30 00 90 5D |  if_ne	jmp	#LR__4240
286b8     07 00 06 F6 | 	mov	_var01, #7
286bc     18 12 06 F1 | 	add	arg01, #24
286c0     09 03 02 FB | 	rdlong	_var02, arg01
286c4     01 01 02 F1 | 	add	_var01, _var02
286c8     0C 12 86 F1 | 	sub	arg01, #12
286cc     09 05 02 FB | 	rdlong	_var03, arg01
286d0     02 01 82 F1 | 	sub	_var01, _var03
286d4     00 00 56 F2 | 	cmps	_var01, #0 wc
286d8                 | '                         return 1;
286d8     01 FA 05 C6 |  if_b	mov	result1, #1
286dc     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
286e0                 | '                 return 0;
286e0     00 FA 05 F6 | 	mov	result1, #0
286e4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
286e8                 | LR__4240
286e8     10 12 06 F1 | 	add	arg01, #16
286ec     09 01 02 FB | 	rdlong	_var01, arg01
286f0     10 12 86 F1 | 	sub	arg01, #16
286f4     0A 00 0E F2 | 	cmp	_var01, #10 wz
286f8     28 00 90 5D |  if_ne	jmp	#LR__4241
286fc     18 12 06 F1 | 	add	arg01, #24
28700     09 01 02 FB | 	rdlong	_var01, arg01
28704     0C 12 86 F1 | 	sub	arg01, #12
28708     09 07 02 FB | 	rdlong	_var04, arg01
2870c     03 01 82 F1 | 	sub	_var01, _var04
28710     00 00 56 F2 | 	cmps	_var01, #0 wc
28714                 | '                         return 0;
28714     00 FA 05 C6 |  if_b	mov	result1, #0
28718     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2871c                 | '                 return 1;
2871c     01 FA 05 F6 | 	mov	result1, #1
28720     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
28724                 | LR__4241
28724                 | '         }
28724                 | ' 
28724                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
28724     00 00 06 F6 | 	mov	_var01, #0
28728     10 12 06 F1 | 	add	arg01, #16
2872c     09 03 02 FB | 	rdlong	_var02, arg01
28730     10 12 86 F1 | 	sub	arg01, #16
28734     03 02 56 F2 | 	cmps	_var02, #3 wc
28738     10 00 90 CD |  if_b	jmp	#LR__4242
2873c     10 12 06 F1 | 	add	arg01, #16
28740     09 05 02 FB | 	rdlong	_var03, arg01
28744     0A 04 56 F2 | 	cmps	_var03, #10 wc
28748     01 00 06 C6 |  if_b	mov	_var01, #1
2874c                 | LR__4242
2874c     00 FB 01 F6 | 	mov	result1, _var01
28750                 | _fatfs_cc___indst_ret
28750     2D 00 64 FD | 	ret
28754                 | 
28754                 | ' 	
28754                 | ' 	FUNCTION pfunc(c as integer) as integer
28754                 | ___strs_cl_pfunc
28754                 | ' 		if (i < 16) then
28754     04 E4 05 F1 | 	add	objptr, #4
28758     F2 FA 01 FB | 	rdlong	result1, objptr
2875c     04 E4 85 F1 | 	sub	objptr, #4
28760     10 FA 55 F2 | 	cmps	result1, #16 wc
28764     2C 00 90 3D |  if_ae	jmp	#LR__4250
28768     F2 FA 01 FB | 	rdlong	result1, objptr
2876c     04 E4 05 F1 | 	add	objptr, #4
28770     F2 00 02 FB | 	rdlong	_var01, objptr
28774     FD 00 02 F1 | 	add	_var01, result1
28778     00 13 42 FC | 	wrbyte	arg01, _var01
2877c     F2 FA 01 FB | 	rdlong	result1, objptr
28780     01 FA 05 F1 | 	add	result1, #1
28784     F2 FA 61 FC | 	wrlong	result1, objptr
28788     04 E4 85 F1 | 	sub	objptr, #4
2878c                 | ' 			p(i) = c
2878c                 | ' 			i = i+1
2878c                 | ' 			return 1
2878c     01 FA 05 F6 | 	mov	result1, #1
28790     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
28794                 | LR__4250
28794                 | ' 			return -1
28794     01 FA 65 F6 | 	neg	result1, #1
28798                 | ___strs_cl_pfunc_ret
28798     2D 00 64 FD | 	ret
2879c                 | 
2879c                 | __struct__s_vfs_file_t_putchar
2879c     04 4A 05 F6 | 	mov	COUNT_, #4
287a0     A8 00 A0 FD | 	call	#pushregs_
287a4     1C E4 05 F1 | 	add	objptr, #28
287a8     F2 1E 0A FB | 	rdlong	local01, objptr wz
287ac     1C E4 85 F1 | 	sub	objptr, #28
287b0     00 FA 05 A6 |  if_e	mov	result1, #0
287b4     48 00 90 AD |  if_e	jmp	#LR__4260
287b8     1C E4 05 F1 | 	add	objptr, #28
287bc     F2 20 02 FB | 	rdlong	local02, objptr
287c0     10 23 02 F6 | 	mov	local03, local02
287c4     1C E4 85 F1 | 	sub	objptr, #28
287c8     13 22 46 F7 | 	zerox	local03, #19
287cc     14 20 46 F0 | 	shr	local02, #20
287d0     02 20 66 F0 | 	shl	local02, #2
287d4     ED 20 02 F1 | 	add	local02, __methods__
287d8     10 21 02 FB | 	rdlong	local02, local02
287dc     F2 14 02 F6 | 	mov	arg02, objptr
287e0     F2 24 02 F6 | 	mov	local04, objptr
287e4     11 E5 01 F6 | 	mov	objptr, local03
287e8     2D 20 62 FD | 	call	local02
287ec     12 E5 01 F6 | 	mov	objptr, local04
287f0                 | '     return (i < 0) ? 0 : 1;
287f0     00 FA 55 F2 | 	cmps	result1, #0 wc
287f4     00 1E 06 C6 |  if_b	mov	local01, #0
287f8     01 1E 06 36 |  if_ae	mov	local01, #1
287fc     0F FB 01 F6 | 	mov	result1, local01
28800                 | LR__4260
28800     A7 F0 03 F6 | 	mov	ptra, fp
28804     B2 00 A0 FD | 	call	#popregs_
28808                 | __struct__s_vfs_file_t_putchar_ret
28808     2D 00 64 FD | 	ret
2880c                 | 
2880c                 | __struct__s_vfs_file_t_getchar
2880c     03 4A 05 F6 | 	mov	COUNT_, #3
28810     A8 00 A0 FD | 	call	#pushregs_
28814     20 E4 05 F1 | 	add	objptr, #32
28818     F2 12 0A FB | 	rdlong	arg01, objptr wz
2881c     20 E4 85 F1 | 	sub	objptr, #32
28820     01 FA 65 A6 |  if_e	neg	result1, #1
28824     38 00 90 AD |  if_e	jmp	#LR__4270
28828                 | '     return getcf(__this);
28828     20 E4 05 F1 | 	add	objptr, #32
2882c     F2 1E 02 FB | 	rdlong	local01, objptr
28830     0F 21 02 F6 | 	mov	local02, local01
28834     20 E4 85 F1 | 	sub	objptr, #32
28838     13 20 46 F7 | 	zerox	local02, #19
2883c     14 1E 46 F0 | 	shr	local01, #20
28840     02 1E 66 F0 | 	shl	local01, #2
28844     ED 1E 02 F1 | 	add	local01, __methods__
28848     0F 1F 02 FB | 	rdlong	local01, local01
2884c     F2 12 02 F6 | 	mov	arg01, objptr
28850     F2 22 02 F6 | 	mov	local03, objptr
28854     10 E5 01 F6 | 	mov	objptr, local02
28858     2D 1E 62 FD | 	call	local01
2885c     11 E5 01 F6 | 	mov	objptr, local03
28860                 | LR__4270
28860     A7 F0 03 F6 | 	mov	ptra, fp
28864     B2 00 A0 FD | 	call	#popregs_
28868                 | __struct__s_vfs_file_t_getchar_ret
28868     2D 00 64 FD | 	ret
2886c                 | 
2886c                 | __struct___bas_wrap_sender_tx
2886c     03 4A 05 F6 | 	mov	COUNT_, #3
28870     A8 00 A0 FD | 	call	#pushregs_
28874     F2 1E 02 FB | 	rdlong	local01, objptr
28878     0F 21 02 F6 | 	mov	local02, local01
2887c     13 1E 46 F7 | 	zerox	local01, #19
28880     14 20 46 F0 | 	shr	local02, #20
28884     02 20 66 F0 | 	shl	local02, #2
28888     ED 20 02 F1 | 	add	local02, __methods__
2888c     10 21 02 FB | 	rdlong	local02, local02
28890     F2 22 02 F6 | 	mov	local03, objptr
28894     0F E5 01 F6 | 	mov	objptr, local01
28898     2D 20 62 FD | 	call	local02
2889c     11 E5 01 F6 | 	mov	objptr, local03
288a0     01 FA 05 F6 | 	mov	result1, #1
288a4     A7 F0 03 F6 | 	mov	ptra, fp
288a8     B2 00 A0 FD | 	call	#popregs_
288ac                 | __struct___bas_wrap_sender_tx_ret
288ac     2D 00 64 FD | 	ret
288b0                 | 
288b0                 | __struct___bas_wrap_sender_rx
288b0     03 4A 05 F6 | 	mov	COUNT_, #3
288b4     A8 00 A0 FD | 	call	#pushregs_
288b8     04 E4 05 F1 | 	add	objptr, #4
288bc     F2 1E 02 FB | 	rdlong	local01, objptr
288c0     0F 21 02 F6 | 	mov	local02, local01
288c4     04 E4 85 F1 | 	sub	objptr, #4
288c8     13 20 46 F7 | 	zerox	local02, #19
288cc     14 1E 46 F0 | 	shr	local01, #20
288d0     02 1E 66 F0 | 	shl	local01, #2
288d4     ED 1E 02 F1 | 	add	local01, __methods__
288d8     0F 1F 02 FB | 	rdlong	local01, local01
288dc     F2 22 02 F6 | 	mov	local03, objptr
288e0     10 E5 01 F6 | 	mov	objptr, local02
288e4     2D 1E 62 FD | 	call	local01
288e8     11 E5 01 F6 | 	mov	objptr, local03
288ec     A7 F0 03 F6 | 	mov	ptra, fp
288f0     B2 00 A0 FD | 	call	#popregs_
288f4                 | __struct___bas_wrap_sender_rx_ret
288f4     2D 00 64 FD | 	ret
288f8                 | 
288f8                 | __struct___bas_wrap_sender_close
288f8     03 4A 05 F6 | 	mov	COUNT_, #3
288fc     A8 00 A0 FD | 	call	#pushregs_
28900     08 E4 05 F1 | 	add	objptr, #8
28904     F2 1E 02 FB | 	rdlong	local01, objptr
28908     0F 21 02 F6 | 	mov	local02, local01
2890c     08 E4 85 F1 | 	sub	objptr, #8
28910     13 20 46 F7 | 	zerox	local02, #19
28914     14 1E 46 F0 | 	shr	local01, #20
28918     02 1E 66 F0 | 	shl	local01, #2
2891c     ED 1E 02 F1 | 	add	local01, __methods__
28920     0F 1F 02 FB | 	rdlong	local01, local01
28924     F2 22 02 F6 | 	mov	local03, objptr
28928     10 E5 01 F6 | 	mov	objptr, local02
2892c     2D 1E 62 FD | 	call	local01
28930     11 E5 01 F6 | 	mov	objptr, local03
28934     A7 F0 03 F6 | 	mov	ptra, fp
28938     B2 00 A0 FD | 	call	#popregs_
2893c                 | __struct___bas_wrap_sender_close_ret
2893c     2D 00 64 FD | 	ret
28940                 | 
28940                 | LR__4280
28940     2F          | 	byte	"/"
28941     00          | 	byte	0
28942                 | LR__4281
28942     69 6E 66    | 	byte	"inf"
28945     00          | 	byte	0
28946                 | LR__4282
28946     6E 61 6E    | 	byte	"nan"
28949     00          | 	byte	0
2894a                 | LR__4283
2894a                 | 	byte	
2894a     00          | 	byte	0
2894b                 | LR__4284
2894b                 | 	byte	
2894b     00          | 	byte	0
2894c                 | LR__4285
2894c                 | 	byte	
2894c     00          | 	byte	0
2894d                 | LR__4286
2894d                 | 	byte	
2894d     00          | 	byte	0
2894e                 | LR__4287
2894e                 | 	byte	
2894e     00          | 	byte	0
2894f                 | LR__4288
2894f                 | 	byte	
2894f     00          | 	byte	0
28950                 | LR__4289
28950                 | 	byte	
28950     00          | 	byte	0
28951                 | LR__4290
28951                 | 	byte	
28951     00          | 	byte	0
28952                 | LR__4291
28952     00          | 	byte	0
28953     00          | 	byte	0
28954                 | LR__4292
28954     00          | 	byte	0
28955     00          | 	byte	0
28956                 | LR__4293
28956     00          | 	byte	0
28957     00          | 	byte	0
28958                 | LR__4294
28958     20 21 21 21 
2895c     20 63 6F 72 
28960     72 75 70 74 
28964     65 64 20 68 
28968     65 61 70 3F 
2896c     3F 3F 20 21 
28970     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
28973     00          | 	byte	0
28974                 | LR__4295
28974     20 21 21 21 
28978     20 6F 75 74 
2897c     20 6F 66 20 
28980     68 65 61 70 
28984     20 6D 65 6D 
28988     6F 72 79 20 
2898c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
28990     00          | 	byte	0
28991                 | LR__4296
28991     20 21 21 21 
28995     20 63 6F 72 
28999     72 75 70 74 
2899d     65 64 20 68 
289a1     65 61 70 20 
289a5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
289a9     00          | 	byte	0
289aa                 | LR__4297
289aa     00          | 	byte	0
289ab     00          | 	byte	0
289ac                 | LR__4298
289ac     2E          | 	byte	"."
289ad     00          | 	byte	0
289ae                 | LR__4299
289ae     00          | 	byte	0
289af     00          | 	byte	0
289b0                 | LR__4300
289b0     00          | 	byte	0
289b1     00          | 	byte	0
289b2                 | LR__4301
289b2     00          | 	byte	0
289b3     00          | 	byte	0
289b4                 | LR__4302
289b4     2A 3A 3C 3E 
289b8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
289bc     00          | 	byte	0
289bd                 | LR__4303
289bd     2B 2C 3B 3D 
289c1     5B 5D       | 	byte	"+,;=[]"
289c3     00          | 	byte	0
289c4                 | LR__4304
289c4     46 41 54 33 
289c8     32 20 20 20 | 	byte	"FAT32   "
289cc     00          | 	byte	0
289cd                 | LR__4305
289cd     54 5A       | 	byte	"TZ"
289cf     00          | 	byte	0
289d0                 | LR__4306
289d0     00          | 	byte	0
289d1     00          | 	byte	0
289d2                 | LR__4307
289d2                 | 	byte	
289d2     00          | 	byte	0
289d3                 | LR__4308
289d3                 | 	byte	
289d3     00          | 	byte	0
289d4                 | LR__4309
289d4     22          | 	byte	34
289d5     00          | 	byte	0
289d6                 | LR__4310
289d6     22          | 	byte	34
289d7     00          | 	byte	0
289d8                 | LR__4311
289d8     3A          | 	byte	":"
289d9     00          | 	byte	0
289da                 | LR__4312
289da                 | 	byte	
289da     00          | 	byte	0
289db                 | LR__4313
289db                 | 	byte	
289db     00          | 	byte	0
289dc                 | LR__4314
289dc                 | 	byte	
289dc     00          | 	byte	0
289dd                 | LR__4315
289dd                 | 	byte	
289dd     00          | 	byte	0
289de                 | LR__4316
289de                 | 	byte	
289de     00          | 	byte	0
289df                 | LR__4317
289df                 | 	byte	
289df     00          | 	byte	0
289e0                 | LR__4318
289e0                 | 	byte	
289e0     00          | 	byte	0
289e1                 | LR__4319
289e1     22          | 	byte	34
289e2     00          | 	byte	0
289e3                 | LR__4320
289e3     22          | 	byte	34
289e4     00          | 	byte	0
289e5                 | LR__4321
289e5     22          | 	byte	34
289e6     00          | 	byte	0
289e7                 | LR__4322
289e7     22          | 	byte	34
289e8     00          | 	byte	0
289e9                 | LR__4323
289e9     22          | 	byte	34
289ea     00          | 	byte	0
289eb                 | LR__4324
289eb     3E          | 	byte	">"
289ec     00          | 	byte	0
289ed                 | LR__4325
289ed     3E          | 	byte	">"
289ee     00          | 	byte	0
289ef                 | LR__4326
289ef     2B          | 	byte	"+"
289f0     00          | 	byte	0
289f1                 | LR__4327
289f1     2D          | 	byte	"-"
289f2     00          | 	byte	0
289f3                 | LR__4328
289f3     2A          | 	byte	"*"
289f4     00          | 	byte	0
289f5                 | LR__4329
289f5     2F          | 	byte	"/"
289f6     00          | 	byte	0
289f7                 | LR__4330
289f7     5E          | 	byte	"^"
289f8     00          | 	byte	0
289f9                 | LR__4331
289f9     3D          | 	byte	"="
289fa     00          | 	byte	0
289fb                 | LR__4332
289fb     2B          | 	byte	"+"
289fc     00          | 	byte	0
289fd                 | LR__4333
289fd     2B          | 	byte	"+"
289fe     00          | 	byte	0
289ff                 | LR__4334
289ff     2D          | 	byte	"-"
28a00     00          | 	byte	0
28a01                 | LR__4335
28a01     2D          | 	byte	"-"
28a02     00          | 	byte	0
28a03                 | LR__4336
28a03     3C          | 	byte	"<"
28a04     00          | 	byte	0
28a05                 | LR__4337
28a05     3E          | 	byte	">"
28a06     00          | 	byte	0
28a07                 | LR__4338
28a07     22          | 	byte	34
28a08     00          | 	byte	0
28a09                 | LR__4339
28a09     22          | 	byte	34
28a0a     00          | 	byte	0
28a0b                 | LR__4340
28a0b     2E          | 	byte	"."
28a0c     00          | 	byte	0
28a0d                 | LR__4341
28a0d     3F          | 	byte	"?"
28a0e     00          | 	byte	0
28a0f                 | LR__4342
28a0f     3F          | 	byte	"?"
28a10     00          | 	byte	0
28a11                 | LR__4343
28a11     6D 6F 75 73 
28a15     65          | 	byte	"mouse"
28a16     00          | 	byte	0
28a17                 | LR__4344
28a17     63 75 72 73 
28a1b     6F 72       | 	byte	"cursor"
28a1d     00          | 	byte	0
28a1e                 | LR__4345
28a1e     63 6C 69 63 
28a22     6B          | 	byte	"click"
28a23     00          | 	byte	0
28a24                 | LR__4346
28a24     6F 6E       | 	byte	"on"
28a26     00          | 	byte	0
28a27                 | LR__4347
28a27     31          | 	byte	"1"
28a28     00          | 	byte	0
28a29                 | LR__4348
28a29     6F 66 66    | 	byte	"off"
28a2c     00          | 	byte	0
28a2d                 | LR__4349
28a2d     30          | 	byte	"0"
28a2e     00          | 	byte	0
28a2f                 | LR__4350
28a2f     6D 6F 64 65 | 	byte	"mode"
28a33     00          | 	byte	0
28a34                 | LR__4351
28a34     6D 2E       | 	byte	"m."
28a36     00          | 	byte	0
28a37                 | LR__4352
28a37     61 74 61 72 
28a3b     69          | 	byte	"atari"
28a3c     00          | 	byte	0
28a3d                 | LR__4353
28a3d     30          | 	byte	"0"
28a3e     00          | 	byte	0
28a3f                 | LR__4354
28a3f     70 63 5F 61 
28a43     6D 62 65 72 | 	byte	"pc_amber"
28a47     00          | 	byte	0
28a48                 | LR__4355
28a48     31          | 	byte	"1"
28a49     00          | 	byte	0
28a4a                 | LR__4356
28a4a     70 63 5F 67 
28a4e     72 65 65 6E | 	byte	"pc_green"
28a52     00          | 	byte	0
28a53                 | LR__4357
28a53     32          | 	byte	"2"
28a54     00          | 	byte	0
28a55                 | LR__4358
28a55     70 63 5F 77 
28a59     68 69 74 65 | 	byte	"pc_white"
28a5d     00          | 	byte	0
28a5e                 | LR__4359
28a5e     33          | 	byte	"3"
28a5f     00          | 	byte	0
28a60                 | LR__4360
28a60     73 74       | 	byte	"st"
28a62     00          | 	byte	0
28a63                 | LR__4361
28a63     34          | 	byte	"4"
28a64     00          | 	byte	0
28a65                 | LR__4362
28a65                 | 	byte	
28a65     00          | 	byte	0
28a66                 | LR__4363
28a66     6C 6F 61 64 | 	byte	"load"
28a6a     00          | 	byte	0
28a6b                 | LR__4364
28a6b     73 61 76 65 | 	byte	"save"
28a6f     00          | 	byte	0
28a70                 | LR__4365
28a70     62 72 75 6E | 	byte	"brun"
28a74     00          | 	byte	0
28a75                 | LR__4366
28a75     6C 6F 2E    | 	byte	"lo."
28a78     00          | 	byte	0
28a79                 | LR__4367
28a79     73 2E       | 	byte	"s."
28a7b     00          | 	byte	0
28a7c                 | LR__4368
28a7c     62 72 2E    | 	byte	"br."
28a7f     00          | 	byte	0
28a80                 | LR__4369
28a80                 | 	byte	
28a80     00          | 	byte	0
28a81                 | LR__4370
28a81                 | 	byte	
28a81     00          | 	byte	0
28a82                 | LR__4371
28a82                 | 	byte	
28a82     00          | 	byte	0
28a83                 | LR__4372
28a83                 | 	byte	
28a83     00          | 	byte	0
28a84                 | LR__4373
28a84     20 55 73 65 
28a88     72 20 66 75 
28a8c     6E 63 74 69 
28a90     6F 6E 73 20 
28a94     61 6E 64 20 
28a98     61 72 72 61 
28a9c     79 73 20 6E 
28aa0     6F 74 20 79 
28aa4     65 74 20 69 
28aa8     6D 70 6C 65 
28aac     6D 65 6E 74 
28ab0     65 64       | 	byte	" User functions and arrays not yet implemented"
28ab2     00          | 	byte	0
28ab3                 | LR__4374
28ab3                 | 	byte	
28ab3     00          | 	byte	0
28ab4                 | LR__4375
28ab4                 | 	byte	
28ab4     00          | 	byte	0
28ab5                 | LR__4376
28ab5     52 65 61 64 
28ab9     79          | 	byte	"Ready"
28aba     00          | 	byte	0
28abb                 | LR__4377
28abb     2B          | 	byte	"+"
28abc     00          | 	byte	0
28abd                 | LR__4378
28abd     2D          | 	byte	"-"
28abe     00          | 	byte	0
28abf                 | LR__4379
28abf     6F 72       | 	byte	"or"
28ac1     00          | 	byte	0
28ac2                 | LR__4380
28ac2     78 6F 72    | 	byte	"xor"
28ac5     00          | 	byte	0
28ac6                 | LR__4381
28ac6     2A          | 	byte	"*"
28ac7     00          | 	byte	0
28ac8                 | LR__4382
28ac8     2F          | 	byte	"/"
28ac9     00          | 	byte	0
28aca                 | LR__4383
28aca     61 6E 64    | 	byte	"and"
28acd     00          | 	byte	0
28ace                 | LR__4384
28ace     64 69 76    | 	byte	"div"
28ad1     00          | 	byte	0
28ad2                 | LR__4385
28ad2     6D 6F 64    | 	byte	"mod"
28ad5     00          | 	byte	0
28ad6                 | LR__4386
28ad6     73 68 6C    | 	byte	"shl"
28ad9     00          | 	byte	0
28ada                 | LR__4387
28ada     73 68 72    | 	byte	"shr"
28add     00          | 	byte	0
28ade                 | LR__4388
28ade     5E          | 	byte	"^"
28adf     00          | 	byte	0
28ae0                 | LR__4389
28ae0     6E 6F 74    | 	byte	"not"
28ae3     00          | 	byte	0
28ae4                 | LR__4390
28ae4     40          | 	byte	"@"
28ae5     00          | 	byte	0
28ae6                 | LR__4391
28ae6     3D          | 	byte	"="
28ae7     00          | 	byte	0
28ae8                 | LR__4392
28ae8     3E 3D       | 	byte	">="
28aea     00          | 	byte	0
28aeb                 | LR__4393
28aeb     3C 3D       | 	byte	"<="
28aed     00          | 	byte	0
28aee                 | LR__4394
28aee     3C          | 	byte	"<"
28aef     00          | 	byte	0
28af0                 | LR__4395
28af0     3E          | 	byte	">"
28af1     00          | 	byte	0
28af2                 | LR__4396
28af2     3C 3E       | 	byte	"<>"
28af4     00          | 	byte	0
28af5                 | LR__4397
28af5     2B 2B       | 	byte	"++"
28af7     00          | 	byte	0
28af8                 | LR__4398
28af8     2D 2D       | 	byte	"--"
28afa     00          | 	byte	0
28afb                 | LR__4399
28afb     2B          | 	byte	"+"
28afc     00          | 	byte	0
28afd                 | LR__4400
28afd     2D          | 	byte	"-"
28afe     00          | 	byte	0
28aff                 | LR__4401
28aff     3D          | 	byte	"="
28b00     00          | 	byte	0
28b01                 | LR__4402
28b01     2C          | 	byte	","
28b02     00          | 	byte	0
28b03                 | LR__4403
28b03     2A          | 	byte	"*"
28b04     00          | 	byte	0
28b05                 | LR__4404
28b05     2F          | 	byte	"/"
28b06     00          | 	byte	0
28b07                 | LR__4405
28b07     3B          | 	byte	";"
28b08     00          | 	byte	0
28b09                 | LR__4406
28b09     22          | 	byte	34
28b0a     00          | 	byte	0
28b0b                 | LR__4407
28b0b     5E          | 	byte	"^"
28b0c     00          | 	byte	0
28b0d                 | LR__4408
28b0d     29          | 	byte	")"
28b0e     00          | 	byte	0
28b0f                 | LR__4409
28b0f     28          | 	byte	"("
28b10     00          | 	byte	0
28b11                 | LR__4410
28b11     3A          | 	byte	":"
28b12     00          | 	byte	0
28b13                 | LR__4411
28b13     20          | 	byte	" "
28b14     00          | 	byte	0
28b15                 | LR__4412
28b15     3E          | 	byte	">"
28b16     00          | 	byte	0
28b17                 | LR__4413
28b17     3C          | 	byte	"<"
28b18     00          | 	byte	0
28b19                 | LR__4414
28b19     3D          | 	byte	"="
28b1a     00          | 	byte	0
28b1b                 | LR__4415
28b1b     62 65 65 70 | 	byte	"beep"
28b1f     00          | 	byte	0
28b20                 | LR__4416
28b20     62 2E       | 	byte	"b."
28b22     00          | 	byte	0
28b23                 | LR__4417
28b23     62 6F 78    | 	byte	"box"
28b26     00          | 	byte	0
28b27                 | LR__4418
28b27     62 72 75 6E | 	byte	"brun"
28b2b     00          | 	byte	0
28b2c                 | LR__4419
28b2c     62 72 2E    | 	byte	"br."
28b2f     00          | 	byte	0
28b30                 | LR__4420
28b30     63 69 72 63 
28b34     6C 65       | 	byte	"circle"
28b36     00          | 	byte	0
28b37                 | LR__4421
28b37     63 69 2E    | 	byte	"ci."
28b3a     00          | 	byte	0
28b3b                 | LR__4422
28b3b     63 6C 69 63 
28b3f     6B          | 	byte	"click"
28b40     00          | 	byte	0
28b41                 | LR__4423
28b41     63 6C 73    | 	byte	"cls"
28b44     00          | 	byte	0
28b45                 | LR__4424
28b45     63 6F 6C 6F 
28b49     72          | 	byte	"color"
28b4a     00          | 	byte	0
28b4b                 | LR__4425
28b4b     63 2E       | 	byte	"c."
28b4d     00          | 	byte	0
28b4e                 | LR__4426
28b4e     63 73 61 76 
28b52     65          | 	byte	"csave"
28b53     00          | 	byte	0
28b54                 | LR__4427
28b54     63 73 2E    | 	byte	"cs."
28b57     00          | 	byte	0
28b58                 | LR__4428
28b58     63 75 72 73 
28b5c     6F 72       | 	byte	"cursor"
28b5e     00          | 	byte	0
28b5f                 | LR__4429
28b5f     64 65 66 73 
28b63     6E 64       | 	byte	"defsnd"
28b65     00          | 	byte	0
28b66                 | LR__4430
28b66     64 65 66 65 
28b6a     6E 76       | 	byte	"defenv"
28b6c     00          | 	byte	0
28b6d                 | LR__4431
28b6d     64 65 66 73 
28b71     70 72 69 74 
28b75     65          | 	byte	"defsprite"
28b76     00          | 	byte	0
28b77                 | LR__4432
28b77     64 73 2E    | 	byte	"ds."
28b7a     00          | 	byte	0
28b7b                 | LR__4433
28b7b     64 65 67    | 	byte	"deg"
28b7e     00          | 	byte	0
28b7f                 | LR__4434
28b7f     64 69 6D    | 	byte	"dim"
28b82     00          | 	byte	0
28b83                 | LR__4435
28b83     64 69 72    | 	byte	"dir"
28b86     00          | 	byte	0
28b87                 | LR__4436
28b87     64 72 61 77 | 	byte	"draw"
28b8b     00          | 	byte	0
28b8c                 | LR__4437
28b8c     64 72 2E    | 	byte	"dr."
28b8f     00          | 	byte	0
28b90                 | LR__4438
28b90     65 6C 73 65 | 	byte	"else"
28b94     00          | 	byte	0
28b95                 | LR__4439
28b95     66 63 69 72 
28b99     63 6C 65    | 	byte	"fcircle"
28b9c     00          | 	byte	0
28b9d                 | LR__4440
28b9d     66 63 2E    | 	byte	"fc."
28ba0     00          | 	byte	0
28ba1                 | LR__4441
28ba1     66 69 6C 6C | 	byte	"fill"
28ba5     00          | 	byte	0
28ba6                 | LR__4442
28ba6     66 69 2E    | 	byte	"fi."
28ba9     00          | 	byte	0
28baa                 | LR__4443
28baa     66 6F 6E 74 | 	byte	"font"
28bae     00          | 	byte	0
28baf                 | LR__4444
28baf     66 6F 72    | 	byte	"for"
28bb2     00          | 	byte	0
28bb3                 | LR__4445
28bb3     66 2E       | 	byte	"f."
28bb5     00          | 	byte	0
28bb6                 | LR__4446
28bb6     66 72 61 6D 
28bba     65          | 	byte	"frame"
28bbb     00          | 	byte	0
28bbc                 | LR__4447
28bbc     66 72 2E    | 	byte	"fr."
28bbf     00          | 	byte	0
28bc0                 | LR__4448
28bc0     67 6F 74 6F | 	byte	"goto"
28bc4     00          | 	byte	0
28bc5                 | LR__4449
28bc5     67 2E       | 	byte	"g."
28bc7     00          | 	byte	0
28bc8                 | LR__4450
28bc8     69 66       | 	byte	"if"
28bca     00          | 	byte	0
28bcb                 | LR__4451
28bcb     69 6E 6B    | 	byte	"ink"
28bce     00          | 	byte	0
28bcf                 | LR__4452
28bcf     69 2E       | 	byte	"i."
28bd1     00          | 	byte	0
28bd2                 | LR__4453
28bd2     69 6E 74    | 	byte	"int"
28bd5     00          | 	byte	0
28bd6                 | LR__4454
28bd6     6C 69 73 74 | 	byte	"list"
28bda     00          | 	byte	0
28bdb                 | LR__4455
28bdb     6C 2E       | 	byte	"l."
28bdd     00          | 	byte	0
28bde                 | LR__4456
28bde     6C 6F 61 64 | 	byte	"load"
28be2     00          | 	byte	0
28be3                 | LR__4457
28be3     6C 6F 2E    | 	byte	"lo."
28be6     00          | 	byte	0
28be7                 | LR__4458
28be7     6D 6F 64 65 | 	byte	"mode"
28beb     00          | 	byte	0
28bec                 | LR__4459
28bec     6D 2E       | 	byte	"m."
28bee     00          | 	byte	0
28bef                 | LR__4460
28bef     6D 6F 75 73 
28bf3     65          | 	byte	"mouse"
28bf4     00          | 	byte	0
28bf5                 | LR__4461
28bf5     6E 65 77    | 	byte	"new"
28bf8     00          | 	byte	0
28bf9                 | LR__4462
28bf9     6E 65 78 74 | 	byte	"next"
28bfd     00          | 	byte	0
28bfe                 | LR__4463
28bfe     6E 2E       | 	byte	"n."
28c00     00          | 	byte	0
28c01                 | LR__4464
28c01     70 61 70 65 
28c05     72          | 	byte	"paper"
28c06     00          | 	byte	0
28c07                 | LR__4465
28c07     70 2E       | 	byte	"p."
28c09     00          | 	byte	0
28c0a                 | LR__4466
28c0a     70 69 6E 66 
28c0e     6C 6F 61 74 | 	byte	"pinfloat"
28c12     00          | 	byte	0
28c13                 | LR__4467
28c13     70 69 6E 68 
28c17     69          | 	byte	"pinhi"
28c18     00          | 	byte	0
28c19                 | LR__4468
28c19     70 69 6E 6C 
28c1d     6F          | 	byte	"pinlo"
28c1e     00          | 	byte	0
28c1f                 | LR__4469
28c1f     70 69 6E 73 
28c23     74 61 72 74 | 	byte	"pinstart"
28c27     00          | 	byte	0
28c28                 | LR__4470
28c28     70 69 6E 74 
28c2c     6F 67 67 6C 
28c30     65          | 	byte	"pintoggle"
28c31     00          | 	byte	0
28c32                 | LR__4471
28c32     70 69 6E 77 
28c36     72 69 74 65 | 	byte	"pinwrite"
28c3a     00          | 	byte	0
28c3b                 | LR__4472
28c3b     70 6C 61 79 | 	byte	"play"
28c3f     00          | 	byte	0
28c40                 | LR__4473
28c40     70 6C 6F 74 | 	byte	"plot"
28c44     00          | 	byte	0
28c45                 | LR__4474
28c45     70 6C 2E    | 	byte	"pl."
28c48     00          | 	byte	0
28c49                 | LR__4475
28c49     70 6F 73 69 
28c4d     74 69 6F 6E | 	byte	"position"
28c51     00          | 	byte	0
28c52                 | LR__4476
28c52     70 6F 73 2E | 	byte	"pos."
28c56     00          | 	byte	0
28c57                 | LR__4477
28c57     70 72 69 6E 
28c5b     74          | 	byte	"print"
28c5c     00          | 	byte	0
28c5d                 | LR__4478
28c5d     3F          | 	byte	"?"
28c5e     00          | 	byte	0
28c5f                 | LR__4479
28c5f     72 61 64    | 	byte	"rad"
28c62     00          | 	byte	0
28c63                 | LR__4480
28c63     72 75 6E    | 	byte	"run"
28c66     00          | 	byte	0
28c67                 | LR__4481
28c67     73 61 76 65 | 	byte	"save"
28c6b     00          | 	byte	0
28c6c                 | LR__4482
28c6c     73 2E       | 	byte	"s."
28c6e     00          | 	byte	0
28c6f                 | LR__4483
28c6f     73 6F 75 6E 
28c73     64          | 	byte	"sound"
28c74     00          | 	byte	0
28c75                 | LR__4484
28c75     73 6F 2E    | 	byte	"so."
28c78     00          | 	byte	0
28c79                 | LR__4485
28c79     73 70 72 69 
28c7d     74 65       | 	byte	"sprite"
28c7f     00          | 	byte	0
28c80                 | LR__4486
28c80     73 70 2E    | 	byte	"sp."
28c83     00          | 	byte	0
28c84                 | LR__4487
28c84     74 68 65 6E | 	byte	"then"
28c88     00          | 	byte	0
28c89                 | LR__4488
28c89     77 61 69 74 
28c8d     6D 73       | 	byte	"waitms"
28c8f     00          | 	byte	0
28c90                 | LR__4489
28c90     77 61 69 74 
28c94     63 6C 6F 63 
28c98     6B          | 	byte	"waitclock"
28c99     00          | 	byte	0
28c9a                 | LR__4490
28c9a     77 63 2E    | 	byte	"wc."
28c9d     00          | 	byte	0
28c9e                 | LR__4491
28c9e     77 61 69 74 
28ca2     76 62 6C    | 	byte	"waitvbl"
28ca5     00          | 	byte	0
28ca6                 | LR__4492
28ca6     77 76 2E    | 	byte	"wv."
28ca9     00          | 	byte	0
28caa                 | LR__4493
28caa     77 78 70 69 
28cae     6E          | 	byte	"wxpin"
28caf     00          | 	byte	0
28cb0                 | LR__4494
28cb0     77 79 70 69 
28cb4     6E          | 	byte	"wypin"
28cb5     00          | 	byte	0
28cb6                 | LR__4495
28cb6     61 63 6F 73 | 	byte	"acos"
28cba     00          | 	byte	0
28cbb                 | LR__4496
28cbb     61 73 69 6E | 	byte	"asin"
28cbf     00          | 	byte	0
28cc0                 | LR__4497
28cc0     61 74 6E    | 	byte	"atn"
28cc3     00          | 	byte	0
28cc4                 | LR__4498
28cc4     63 6F 73    | 	byte	"cos"
28cc7     00          | 	byte	0
28cc8                 | LR__4499
28cc8     67 65 74 70 
28ccc     69 78 65 6C | 	byte	"getpixel"
28cd0     00          | 	byte	0
28cd1                 | LR__4500
28cd1     67 65 2E    | 	byte	"ge."
28cd4     00          | 	byte	0
28cd5                 | LR__4501
28cd5     67 65 74 74 
28cd9     69 6D 65    | 	byte	"gettime"
28cdc     00          | 	byte	0
28cdd                 | LR__4502
28cdd     6D 6F 75 73 
28ce1     65 6B       | 	byte	"mousek"
28ce3     00          | 	byte	0
28ce4                 | LR__4503
28ce4     6D 6F 75 73 
28ce8     65 77       | 	byte	"mousew"
28cea     00          | 	byte	0
28ceb                 | LR__4504
28ceb     6D 6F 75 73 
28cef     65 78       | 	byte	"mousex"
28cf1     00          | 	byte	0
28cf2                 | LR__4505
28cf2     6D 6F 75 73 
28cf6     65 79       | 	byte	"mousey"
28cf8     00          | 	byte	0
28cf9                 | LR__4506
28cf9     70 69 6E 72 
28cfd     65 61 64    | 	byte	"pinread"
28d00     00          | 	byte	0
28d01                 | LR__4507
28d01     72 64 70 69 
28d05     6E          | 	byte	"rdpin"
28d06     00          | 	byte	0
28d07                 | LR__4508
28d07     72 71 70 69 
28d0b     6E          | 	byte	"rqpin"
28d0c     00          | 	byte	0
28d0d                 | LR__4509
28d0d     72 6E 64    | 	byte	"rnd"
28d10     00          | 	byte	0
28d11                 | LR__4510
28d11     73 69 6E    | 	byte	"sin"
28d14     00          | 	byte	0
28d15                 | LR__4511
28d15     73 71 72    | 	byte	"sqr"
28d18     00          | 	byte	0
28d19                 | LR__4512
28d19     73 74 69 63 
28d1d     6B          | 	byte	"stick"
28d1e     00          | 	byte	0
28d1f                 | LR__4513
28d1f     73 74 72 69 
28d23     67          | 	byte	"strig"
28d24     00          | 	byte	0
28d25                 | LR__4514
28d25     74 61 6E    | 	byte	"tan"
28d28     00          | 	byte	0
28d29                 | LR__4515
28d29     61          | 	byte	"a"
28d2a     00          | 	byte	0
28d2b                 | LR__4516
28d2b     7A          | 	byte	"z"
28d2c     00          | 	byte	0
28d2d                 | LR__4517
28d2d     5F          | 	byte	"_"
28d2e     00          | 	byte	0
28d2f                 | LR__4518
28d2f     61          | 	byte	"a"
28d30     00          | 	byte	0
28d31                 | LR__4519
28d31     7A          | 	byte	"z"
28d32     00          | 	byte	0
28d33                 | LR__4520
28d33     30          | 	byte	"0"
28d34     00          | 	byte	0
28d35                 | LR__4521
28d35     39          | 	byte	"9"
28d36     00          | 	byte	0
28d37                 | LR__4522
28d37     5F          | 	byte	"_"
28d38     00          | 	byte	0
28d39                 | LR__4523
28d39     2E          | 	byte	"."
28d3a     00          | 	byte	0
28d3b                 | LR__4524
28d3b     61          | 	byte	"a"
28d3c     00          | 	byte	0
28d3d                 | LR__4525
28d3d     7A          | 	byte	"z"
28d3e     00          | 	byte	0
28d3f                 | LR__4526
28d3f     30          | 	byte	"0"
28d40     00          | 	byte	0
28d41                 | LR__4527
28d41     39          | 	byte	"9"
28d42     00          | 	byte	0
28d43                 | LR__4528
28d43     5F          | 	byte	"_"
28d44     00          | 	byte	0
28d45                 | LR__4529
28d45     24          | 	byte	"$"
28d46     00          | 	byte	0
28d47                 | LR__4530
28d47     25          | 	byte	"%"
28d48     00          | 	byte	0
28d49                 | LR__4531
28d49     21          | 	byte	"!"
28d4a     00          | 	byte	0
28d4b                 | LR__4532
28d4b     30          | 	byte	"0"
28d4c     00          | 	byte	0
28d4d                 | LR__4533
28d4d     39          | 	byte	"9"
28d4e     00          | 	byte	0
28d4f                 | LR__4534
28d4f     2E          | 	byte	"."
28d50     00          | 	byte	0
28d51                 | LR__4535
28d51     24          | 	byte	"$"
28d52     00          | 	byte	0
28d53                 | LR__4536
28d53     25          | 	byte	"%"
28d54     00          | 	byte	0
28d55                 | LR__4537
28d55     2D          | 	byte	"-"
28d56     00          | 	byte	0
28d57                 | LR__4538
28d57     2E          | 	byte	"."
28d58     00          | 	byte	0
28d59                 | LR__4539
28d59     30          | 	byte	"0"
28d5a     00          | 	byte	0
28d5b                 | LR__4540
28d5b     39          | 	byte	"9"
28d5c     00          | 	byte	0
28d5d                 | LR__4541
28d5d     5F          | 	byte	"_"
28d5e     00          | 	byte	0
28d5f                 | LR__4542
28d5f     2E          | 	byte	"."
28d60     00          | 	byte	0
28d61                 | LR__4543
28d61     45          | 	byte	"E"
28d62     00          | 	byte	0
28d63                 | LR__4544
28d63     65          | 	byte	"e"
28d64     00          | 	byte	0
28d65                 | LR__4545
28d65     2D          | 	byte	"-"
28d66     00          | 	byte	0
28d67                 | LR__4546
28d67     2D          | 	byte	"-"
28d68     00          | 	byte	0
28d69                 | LR__4547
28d69     65          | 	byte	"e"
28d6a     00          | 	byte	0
28d6b                 | LR__4548
28d6b     2E          | 	byte	"."
28d6c     00          | 	byte	0
28d6d                 | LR__4549
28d6d     45          | 	byte	"E"
28d6e     00          | 	byte	0
28d6f                 | LR__4550
28d6f     65          | 	byte	"e"
28d70     00          | 	byte	0
28d71                 | LR__4551
28d71     30          | 	byte	"0"
28d72     00          | 	byte	0
28d73                 | LR__4552
28d73     39          | 	byte	"9"
28d74     00          | 	byte	0
28d75                 | LR__4553
28d75     24          | 	byte	"$"
28d76     00          | 	byte	0
28d77                 | LR__4554
28d77     25          | 	byte	"%"
28d78     00          | 	byte	0
28d79                 | LR__4555
28d79     2D          | 	byte	"-"
28d7a     00          | 	byte	0
28d7b                 | LR__4556
28d7b     30          | 	byte	"0"
28d7c     00          | 	byte	0
28d7d                 | LR__4557
28d7d     39          | 	byte	"9"
28d7e     00          | 	byte	0
28d7f                 | LR__4558
28d7f     5F          | 	byte	"_"
28d80     00          | 	byte	0
28d81                 | LR__4559
28d81     30          | 	byte	"0"
28d82     00          | 	byte	0
28d83                 | LR__4560
28d83     39          | 	byte	"9"
28d84     00          | 	byte	0
28d85                 | LR__4561
28d85     5F          | 	byte	"_"
28d86     00          | 	byte	0
28d87                 | LR__4562
28d87     22          | 	byte	34
28d88     00          | 	byte	0
28d89                 | LR__4563
28d89     22          | 	byte	34
28d8a     00          | 	byte	0
28d8b                 | LR__4564
28d8b     44 69 6D 3A 
28d8f     20 61 74 20 
28d93     6C 69 6E 65 
28d97     20          | 	byte	"Dim: at line "
28d98     00          | 	byte	0
28d99                 | LR__4565
28d99     3A 20 77 61 
28d9d     72 6E 69 6E 
28da1     67 3A 20 74 
28da5     68 65 20 76 
28da9     61 72 69 61 
28dad     62 6C 65 20 
28db1     65 78 69 73 
28db5     74 65 64 2E | 	byte	": warning: the variable existed."
28db9     00          | 	byte	0
28dba                 | LR__4566
28dba     28          | 	byte	"("
28dbb     00          | 	byte	0
28dbc                 | LR__4567
28dbc     61 73       | 	byte	"as"
28dbe     00          | 	byte	0
28dbf                 | LR__4568
28dbf     61 73       | 	byte	"as"
28dc1     00          | 	byte	0
28dc2                 | LR__4569
28dc2     2C          | 	byte	","
28dc3     00          | 	byte	0
28dc4                 | LR__4570
28dc4     29          | 	byte	")"
28dc5     00          | 	byte	0
28dc6                 | LR__4571
28dc6     29          | 	byte	")"
28dc7     00          | 	byte	0
28dc8                 | LR__4572
28dc8     61 73       | 	byte	"as"
28dca     00          | 	byte	0
28dcb                 | LR__4573
28dcb     62 79 74 65 | 	byte	"byte"
28dcf     00          | 	byte	0
28dd0                 | LR__4574
28dd0     75 62 79 74 
28dd4     65          | 	byte	"ubyte"
28dd5     00          | 	byte	0
28dd6                 | LR__4575
28dd6     73 68 6F 72 
28dda     74          | 	byte	"short"
28ddb     00          | 	byte	0
28ddc                 | LR__4576
28ddc     75 73 68 6F 
28de0     72 74       | 	byte	"ushort"
28de2     00          | 	byte	0
28de3                 | LR__4577
28de3     6C 6F 6E 67 | 	byte	"long"
28de7     00          | 	byte	0
28de8                 | LR__4578
28de8     69 6E 74 65 
28dec     67 65 72    | 	byte	"integer"
28def     00          | 	byte	0
28df0                 | LR__4579
28df0     75 6C 6F 6E 
28df4     67          | 	byte	"ulong"
28df5     00          | 	byte	0
28df6                 | LR__4580
28df6     69 6E 74 36 
28dfa     34          | 	byte	"int64"
28dfb     00          | 	byte	0
28dfc                 | LR__4581
28dfc     75 69 6E 74 
28e00     36 34       | 	byte	"uint64"
28e02     00          | 	byte	0
28e03                 | LR__4582
28e03     73 69 6E 67 
28e07     6C 65       | 	byte	"single"
28e09     00          | 	byte	0
28e0a                 | LR__4583
28e0a     64 6F 75 62 
28e0e     6C 65       | 	byte	"double"
28e10     00          | 	byte	0
28e11                 | LR__4584
28e11     73 74 72 69 
28e15     6E 67       | 	byte	"string"
28e17     00          | 	byte	0
28e18                 | LR__4585
28e18     74 6F       | 	byte	"to"
28e1a     00          | 	byte	0
28e1b                 | LR__4586
28e1b     73 74 65 70 | 	byte	"step"
28e1f     00          | 	byte	0
28e20                 | LR__4587
28e20     73 2E       | 	byte	"s."
28e22     00          | 	byte	0
28e23                 | LR__4588
28e23     57 65 20 68 
28e27     61 76 65 20 
28e2b     61 20 73 6C 
28e2f     6F 77 20 67 
28e33     6F 74 6F 2C 
28e37     20 74 6F 64 
28e3b     6F 20 20    | 	byte	"We have a slow goto, todo  "
28e3e     00          | 	byte	0
28e3f                 | LR__4589
28e3f     6E 6F 6E 61 
28e43     6D 65 2E 62 
28e47     61 73       | 	byte	"noname.bas"
28e49     00          | 	byte	0
28e4a                 | LR__4590
28e4a                 | 	byte	
28e4a     00          | 	byte	0
28e4b                 | LR__4591
28e4b     6E 6F 6E 61 
28e4f     6D 65 2E 62 
28e53     61 73       | 	byte	"noname.bas"
28e55     00          | 	byte	0
28e56                 | LR__4592
28e56     2F          | 	byte	"/"
28e57     00          | 	byte	0
28e58                 | LR__4593
28e58                 | 	byte	
28e58     00          | 	byte	0
28e59                 | LR__4594
28e59                 | 	byte	
28e59     00          | 	byte	0
28e5a                 | LR__4595
28e5a     6E 6F 6E 61 
28e5e     6D 65 2E 62 
28e62     61 73       | 	byte	"noname.bas"
28e64     00          | 	byte	0
28e65                 | LR__4596
28e65     2F          | 	byte	"/"
28e66     00          | 	byte	0
28e67                 | LR__4597
28e67     53 79 73 74 
28e6b     65 6D 20 65 
28e6f     72 72 6F 72 
28e73     20          | 	byte	"System error "
28e74     00          | 	byte	0
28e75                 | LR__4598
28e75     3A 20       | 	byte	": "
28e77     00          | 	byte	0
28e78                 | LR__4599
28e78     2F          | 	byte	"/"
28e79     00          | 	byte	0
28e7a                 | LR__4600
28e7a     30          | 	byte	"0"
28e7b     00          | 	byte	0
28e7c                 | LR__4601
28e7c     39          | 	byte	"9"
28e7d     00          | 	byte	0
28e7e                 | LR__4602
28e7e                 | 	byte	
28e7e     00          | 	byte	0
28e7f                 | LR__4603
28e7f     53 74 6F 70 
28e83     70 65 64 20 
28e87     61 74 20 6C 
28e8b     69 6E 65 20 | 	byte	"Stopped at line "
28e8f     00          | 	byte	0
28e90                 | LR__4604
28e90                 | 	byte	
28e90     00          | 	byte	0
28e91                 | LR__4605
28e91                 | 	byte	
28e91     00          | 	byte	0
28e92                 | LR__4606
28e92     2F 73 64 2F 
28e96     6D 65 64 69 
28e9a     61 2F 68 2F | 	byte	"/sd/media/h/"
28e9e     00          | 	byte	0
28e9f                 | LR__4607
28e9f     53 79 73 74 
28ea3     65 6D 20 65 
28ea7     72 72 6F 72 
28eab     20          | 	byte	"System error "
28eac     00          | 	byte	0
28ead                 | LR__4608
28ead     3A 20       | 	byte	": "
28eaf     00          | 	byte	0
28eb0                 | LR__4609
28eb0                 | 	byte	
28eb0     00          | 	byte	0
28eb1                 | LR__4610
28eb1                 | 	byte	
28eb1     00          | 	byte	0
28eb2                 | LR__4611
28eb2     2F 73 64 2F 
28eb6     6D 65 64 69 
28eba     61 2F 73 2F | 	byte	"/sd/media/s/"
28ebe     00          | 	byte	0
28ebf                 | LR__4612
28ebf     53 79 73 74 
28ec3     65 6D 20 65 
28ec7     72 72 6F 72 
28ecb     20          | 	byte	"System error "
28ecc     00          | 	byte	0
28ecd                 | LR__4613
28ecd     3A 20       | 	byte	": "
28ecf     00          | 	byte	0
28ed0                 | LR__4614
28ed0     45 72 72 6F 
28ed4     72 20       | 	byte	"Error "
28ed6     00          | 	byte	0
28ed7                 | LR__4615
28ed7     3A 20       | 	byte	": "
28ed9     00          | 	byte	0
28eda                 | LR__4616
28eda                 | 	byte	
28eda     00          | 	byte	0
28edb                 | LR__4617
28edb     72 6E 64 3A 
28edf     20          | 	byte	"rnd: "
28ee0     00          | 	byte	0
28ee1                 | LR__4618
28ee1     72 6E 64 3A 
28ee5     20          | 	byte	"rnd: "
28ee6     00          | 	byte	0
28ee7                 | LR__4619
28ee7     73 69 6E 3A 
28eeb     20          | 	byte	"sin: "
28eec     00          | 	byte	0
28eed                 | LR__4620
28eed     63 6F 73 3A 
28ef1     20          | 	byte	"cos: "
28ef2     00          | 	byte	0
28ef3                 | LR__4621
28ef3     74 61 6E 3A 
28ef7     20          | 	byte	"tan: "
28ef8     00          | 	byte	0
28ef9                 | LR__4622
28ef9     61 73 69 6E 
28efd     3A 20       | 	byte	"asin: "
28eff     00          | 	byte	0
28f00                 | LR__4623
28f00     61 63 6F 73 
28f04     3A 20       | 	byte	"acos: "
28f06     00          | 	byte	0
28f07                 | LR__4624
28f07     61 74 6E 3A 
28f0b     20          | 	byte	"atn: "
28f0c     00          | 	byte	0
28f0d                 | LR__4625
28f0d     73 71 72 3A 
28f11     20          | 	byte	"sqr: "
28f12     00          | 	byte	0
28f13                 | LR__4626
28f13     73 74 69 63 
28f17     6B 3A 20    | 	byte	"stick: "
28f1a     00          | 	byte	0
28f1b                 | LR__4627
28f1b     73 74 72 69 
28f1f     67 3A 20    | 	byte	"strig: "
28f22     00          | 	byte	0
28f23                 | LR__4628
28f23     67 65 74 70 
28f27     69 78 65 6C 
28f2b     3A 20       | 	byte	"getpixel: "
28f2d     00          | 	byte	0
28f2e                 | LR__4629
28f2e                 | 	byte	
28f2e     00          | 	byte	0
28f2f                 | LR__4630
28f2f     2F 73 64 2F 
28f33     62 61 73    | 	byte	"/sd/bas"
28f36     00          | 	byte	0
28f37                 | LR__4631
28f37     57 6F 72 6B 
28f3b     69 6E 67 20 
28f3f     64 69 72 65 
28f43     63 74 6F 72 
28f47     79 3A 20    | 	byte	"Working directory: "
28f4a     00          | 	byte	0
28f4b                 | LR__4632
28f4b     2A          | 	byte	"*"
28f4c     00          | 	byte	0
28f4d                 | LR__4633
28f4d                 | 	byte	
28f4d     00          | 	byte	0
28f4e                 | LR__4634
28f4e     5B 64 69 72 
28f52     5D 20       | 	byte	"[dir] "
28f54     00          | 	byte	0
28f55                 | LR__4635
28f55     2A          | 	byte	"*"
28f56     00          | 	byte	0
28f57                 | LR__4636
28f57                 | 	byte	
28f57     00          | 	byte	0
28f58                 | LR__4637
28f58     2D 2D 2D 2D 
28f5c     2D 6D 6F 72 
28f60     65 2C 20 70 
28f64     72 65 73 73 
28f68     20 61 6E 79 
28f6c     20 6B 65 79 | 	byte	"-----more, press any key"
28f70     00          | 	byte	0
28f71                 | LR__4638
28f71     20 20 20 20 
      ...             
28f89     20 20 20 20 
28f8d     20          | 	byte	"                             "
28f8e     00          | 	byte	0
28f8f                 | LR__4639
28f8f     2F          | 	byte	"/"
28f90     00          | 	byte	0
28f91                 | LR__4640
28f91     2F 73 64 2F 
28f95     62 69 6E 2F | 	byte	"/sd/bin/"
28f99     00          | 	byte	0
28f9a                 | LR__4641
28f9a     53 79 73 74 
28f9e     65 6D 20 65 
28fa2     72 72 6F 72 
28fa6     20          | 	byte	"System error "
28fa7     00          | 	byte	0
28fa8                 | LR__4642
28fa8     3A 20       | 	byte	": "
28faa     00          | 	byte	0
28fab                 | LR__4643
28fab                 | 	byte	
28fab     00          | 	byte	0
28fac                 | LR__4644
28fac     45 78 70 65 
28fb0     63 74 65 64 
28fb4     20 6E 75 6D 
28fb8     62 65 72 2C 
28fbc     20 67 6F 74 
28fc0     20 73 6F 6D 
28fc4     65 74 68 69 
28fc8     6E 67 20 65 
28fcc     6C 73 65 2E | 	byte	"Expected number, got something else."
28fd0     00          | 	byte	0
28fd1                 | LR__4645
28fd1     43 61 6E 6E 
28fd5     6F 74 20 61 
28fd9     64 64 20 61 
28fdd     20 6E 75 6D 
28fe1     62 65 72 20 
28fe5     74 6F 20 61 
28fe9     20 73 74 72 
28fed     69 6E 67 2E | 	byte	"Cannot add a number to a string."
28ff1     00          | 	byte	0
28ff2                 | LR__4646
28ff2     43 61 6E 6E 
28ff6     6F 74 20 73 
28ffa     75 62 73 74 
28ffe     72 61 63 74 
29002     20 73 74 72 
29006     69 6E 67 73 
2900a     2E          | 	byte	"Cannot substract strings."
2900b     00          | 	byte	0
2900c                 | LR__4647
2900c     55 6E 6B 6E 
29010     6F 77 6E 20 
29014     65 72 72 6F 
29018     72 20 77 68 
2901c     69 6C 65 20 
29020     61 64 64 69 
29024     6E 67 2E    | 	byte	"Unknown error while adding."
29027     00          | 	byte	0
29028                 | LR__4648
29028     55 6E 6B 6E 
2902c     6F 77 6E 20 
29030     65 72 72 6F 
29034     72 20 77 68 
29038     69 6C 65 20 
2903c     73 75 62 73 
29040     74 72 61 63 
29044     74 69 6E 67 
29048     2E          | 	byte	"Unknown error while substracting."
29049     00          | 	byte	0
2904a                 | LR__4649
2904a     43 61 6E 6E 
2904e     6F 74 20 64 
29052     6F 20 6C 6F 
29056     67 69 63 20 
2905a     6F 70 65 72 
2905e     61 74 69 6F 
29062     6E 20 6F 6E 
29066     20 73 74 72 
2906a     69 6E 67 20 
2906e     6F 72 20 66 
29072     6C 6F 61 74 
29076     2E          | 	byte	"Cannot do logic operation on string or float."
29077     00          | 	byte	0
29078                 | LR__4650
29078     55 6E 6B 6E 
2907c     6F 77 6E 20 
29080     65 72 72 6F 
29084     72 20 77 68 
29088     69 6C 65 20 
2908c     64 6F 69 6E 
29090     67 20 6C 6F 
29094     67 69 63 20 
29098     6F 70 65 72 
2909c     61 74 69 6F 
290a0     6E 2E       | 	byte	"Unknown error while doing logic operation."
290a2     00          | 	byte	0
290a3                 | LR__4651
290a3     43 61 6E 6E 
290a7     6F 74 20 6D 
290ab     75 6C 74 69 
290af     70 6C 79 20 
290b3     73 74 72 69 
290b7     6E 67 73 2E | 	byte	"Cannot multiply strings."
290bb     00          | 	byte	0
290bc                 | LR__4652
290bc     55 6E 6B 6E 
290c0     6F 77 6E 20 
290c4     65 72 72 6F 
290c8     72 20 77 68 
290cc     69 6C 65 20 
290d0     6D 75 6C 74 
290d4     69 70 6C 79 
290d8     69 6E 67 2E | 	byte	"Unknown error while multiplying."
290dc     00          | 	byte	0
290dd                 | LR__4653
290dd     43 61 6E 6E 
290e1     6F 74 20 64 
290e5     69 76 69 64 
290e9     65 20 73 74 
290ed     72 69 6E 67 
290f1     73 2E       | 	byte	"Cannot divide strings."
290f3     00          | 	byte	0
290f4                 | LR__4654
290f4     55 6E 6B 6E 
290f8     6F 77 6E 20 
290fc     65 72 72 6F 
29100     72 20 77 68 
29104     69 6C 65 20 
29108     64 69 76 69 
2910c     64 69 6E 67 
29110     2E          | 	byte	"Unknown error while dividing."
29111     00          | 	byte	0
29112                 | LR__4655
29112     43 61 6E 6E 
29116     6F 74 20 63 
2911a     6F 6D 70 75 
2911e     74 65 20 61 
29122     20 70 6F 77 
29126     65 72 20 6F 
2912a     66 20 61 20 
2912e     73 74 72 69 
29132     6E 67 2E    | 	byte	"Cannot compute a power of a string."
29135     00          | 	byte	0
29136                 | LR__4656
29136     55 6E 6B 6E 
2913a     6F 77 6E 20 
2913e     65 72 72 6F 
29142     72 20 77 68 
29146     69 6C 65 20 
2914a     63 6F 6D 70 
2914e     75 74 69 6E 
29152     67 20 61 20 
29156     70 6F 77 65 
2915a     72 2E       | 	byte	"Unknown error while computing a power."
2915c     00          | 	byte	0
2915d                 | LR__4657
2915d     52 69 67 68 
29161     74 20 70 61 
29165     72 65 6E 74 
29169     68 65 73 69 
2916d     73 20 65 78 
29171     70 65 63 74 
29175     65 64 2E    | 	byte	"Right parenthesis expected."
29178     00          | 	byte	0
29179                 | LR__4658
29179     45 78 70 65 
2917d     63 74 65 64 
29181     20 73 74 72 
29185     69 6E 67 2E | 	byte	"Expected string."
29189     00          | 	byte	0
2918a                 | LR__4659
2918a     45 78 70 65 
2918e     63 74 65 64 
29192     20 66 6C 6F 
29196     61 74 2E    | 	byte	"Expected float."
29199     00          | 	byte	0
2919a                 | LR__4660
2919a     45 78 70 65 
2919e     63 74 65 64 
291a2     20 75 6E 73 
291a6     69 67 6E 65 
291aa     64 20 69 6E 
291ae     74 65 67 65 
291b2     72 2E       | 	byte	"Expected unsigned integer."
291b4     00          | 	byte	0
291b5                 | LR__4661
291b5     45 78 70 65 
291b9     63 74 65 64 
291bd     20 69 6E 74 
291c1     65 67 65 72 
291c5     2E          | 	byte	"Expected integer."
291c6     00          | 	byte	0
291c7                 | LR__4662
291c7     4E 6F 20 6D 
291cb     6F 72 65 20 
291cf     76 61 72 69 
291d3     61 62 6C 65 
291d7     20 73 6C 6F 
291db     74 73 2E    | 	byte	"No more variable slots."
291de     00          | 	byte	0
291df                 | LR__4663
291df     56 61 72 69 
291e3     61 62 6C 65 
291e7     20 6E 6F 74 
291eb     20 66 6F 75 
291ef     6E 64 2E    | 	byte	"Variable not found."
291f2     00          | 	byte	0
291f3                 | LR__4664
291f3     43 6F 6D 6D 
291f7     61 20 65 78 
291fb     70 65 63 74 
291ff     65 64 2E    | 	byte	"Comma expected."
29202     00          | 	byte	0
29203                 | LR__4665
29203     43 6F 6D 6D 
29207     61 20 6F 72 
2920b     20 73 65 6D 
2920f     69 63 6F 6C 
29213     6F 6E 20 65 
29217     78 70 65 63 
2921b     74 65 64 2E | 	byte	"Comma or semicolon expected."
2921f     00          | 	byte	0
29220                 | LR__4666
29220     55 6E 6B 6E 
29224     6F 77 6E 20 
29228     63 6F 6D 6D 
2922c     61 6E 64 2E | 	byte	"Unknown command."
29230     00          | 	byte	0
29231                 | LR__4667
29231     53 74 61 63 
29235     6B 20 75 6E 
29239     64 65 72 66 
2923d     6C 6F 77 2E | 	byte	"Stack underflow."
29241     00          | 	byte	0
29242                 | LR__4668
29242     43 61 6E 6E 
29246     6F 74 20 65 
2924a     78 65 63 75 
2924e     74 65 20 67 
29252     6F 74 6F 20 
29256     69 6E 20 74 
2925a     68 65 20 69 
2925e     6D 6D 65 64 
29262     69 61 74 65 
29266     20 6D 6F 64 
2926a     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2926c     00          | 	byte	0
2926d                 | LR__4669
2926d     43 61 6E 6E 
29271     6F 74 20 6C 
29275     6F 61 64 20 
29279     66 72 6F 6D 
2927d     20 74 68 69 
29281     73 20 66 69 
29285     6C 65 2E    | 	byte	"Cannot load from this file."
29288     00          | 	byte	0
29289                 | LR__4670
29289     54 68 65 20 
2928d     70 72 6F 67 
29291     72 61 6D 20 
29295     69 73 20 65 
29299     6D 70 74 79 
2929d     2E          | 	byte	"The program is empty."
2929e     00          | 	byte	0
2929f                 | LR__4671
2929f     49 66 20 61 
292a3     66 74 65 72 
292a7     20 69 66 2E | 	byte	"If after if."
292ab     00          | 	byte	0
292ac                 | LR__4672
292ac     45 6D 70 74 
292b0     79 20 65 78 
292b4     70 72 65 73 
292b8     73 69 6F 6E 
292bc     2E          | 	byte	"Empty expression."
292bd     00          | 	byte	0
292be                 | LR__4673
292be     53 74 72 69 
292c2     6E 67 20 65 
292c6     78 70 65 63 
292ca     74 65 64 2E | 	byte	"String expected."
292ce     00          | 	byte	0
292cf                 | LR__4674
292cf     49 6E 74 65 
292d3     72 70 72 65 
292d7     74 65 72 20 
292db     69 6E 74 65 
292df     72 6E 61 6C 
292e3     20 65 72 72 
292e7     6F 72 2E    | 	byte	"Interpreter internal error."
292ea     00          | 	byte	0
292eb                 | LR__4675
292eb     45 78 70 65 
292ef     63 74 65 64 
292f3     20 61 73 73 
292f7     69 67 6E 2E | 	byte	"Expected assign."
292fb     00          | 	byte	0
292fc                 | LR__4676
292fc     45 78 70 65 
29300     63 74 65 64 
29304     20 27 74 6F 
29308     27 2E       | 	byte	"Expected 'to'."
2930a     00          | 	byte	0
2930b                 | LR__4677
2930b     45 78 70 65 
2930f     63 74 65 64 
29313     20 69 6E 74 
29317     65 67 65 72 
2931b     20 76 61 72 
2931f     69 61 62 6C 
29323     65 2E       | 	byte	"Expected integer variable."
29325     00          | 	byte	0
29326                 | LR__4678
29326     55 6E 69 6E 
2932a     69 74 69 61 
2932e     6C 69 7A 65 
29332     64 20 76 61 
29336     72 69 61 62 
2933a     6C 65 20 69 
2933e     6E 20 27 6E 
29342     65 78 74 27 
29346     2C 20 75 73 
2934a     65 20 27 66 
2934e     6F 72 27 20 
29352     62 65 66 6F 
29356     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
29359     00          | 	byte	0
2935a                 | LR__4679
2935a     4E 6F 20 6D 
2935e     6F 72 65 20 
29362     73 6C 6F 74 
29366     73 20 66 6F 
2936a     72 20 27 66 
2936e     6F 72 27 2E | 	byte	"No more slots for 'for'."
29372     00          | 	byte	0
29373                 | LR__4680
29373     27 4E 65 78 
29377     74 27 20 64 
2937b     6F 65 73 6E 
2937f     27 74 20 6D 
29383     61 74 63 68 
29387     20 27 66 6F 
2938b     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2938e     00          | 	byte	0
2938f                 | LR__4681
2938f     27 47 6F 74 
29393     6F 27 20 74 
29397     61 72 67 65 
2939b     74 20 6C 69 
2939f     6E 65 20 6E 
293a3     6F 74 20 66 
293a7     6F 75 6E 64 
293ab     2E          | 	byte	"'Goto' target line not found."
293ac     00          | 	byte	0
293ad                 | LR__4682
293ad     42 61 64 20 
293b1     6E 75 6D 62 
293b5     65 72 20 6F 
293b9     66 20 70 61 
293bd     72 61 6D 65 
293c1     74 65 72 73 | 	byte	"Bad number of parameters"
293c5     00          | 	byte	0
293c6                 | LR__4683
293c6     46 75 6E 63 
293ca     74 69 6F 6E 
293ce     20 75 6E 64 
293d2     65 66 69 6E 
293d6     65 64 20 66 
293da     6F 72 20 73 
293de     74 72 69 6E 
293e2     67 73       | 	byte	"Function undefined for strings"
293e4     00          | 	byte	0
293e5                 | LR__4684
293e5     42 61 64 20 
293e9     70 61 72 61 
293ed     6D 65 74 65 
293f1     72 2E       | 	byte	"Bad parameter."
293f3     00          | 	byte	0
293f4                 | LR__4685
293f4     43 61 6E 6E 
293f8     6F 74 20 64 
293fc     65 63 6C 61 
29400     72 65 20 61 
29404     6E 20 61 72 
29408     72 61 79 3A 
2940c     20 74 68 65 
29410     20 76 61 72 
29414     69 61 62 6C 
29418     65 20 65 78 
2941c     69 73 74 73 
29420     2E          | 	byte	"Cannot declare an array: the variable exists."
29421     00          | 	byte	0
29422                 | LR__4686
29422     45 78 70 65 
29426     63 74 65 64 
2942a     20 27 28 27 
2942e     2E          | 	byte	"Expected '('."
2942f     00          | 	byte	0
29430                 | LR__4687
29430     45 78 70 65 
29434     63 74 65 64 
29438     20 27 29 27 
2943c     20 6F 72 20 
29440     27 2C 27 2E | 	byte	"Expected ')' or ','."
29444     00          | 	byte	0
29445                 | LR__4688
29445     4E 6F 20 6D 
29449     6F 72 65 20 
2944d     74 68 61 6E 
29451     20 33 20 64 
29455     69 6D 65 6E 
29459     73 69 6F 6E 
2945d     73 20 73 75 
29461     70 70 6F 72 
29465     74 65 64    | 	byte	"No more than 3 dimensions supported"
29468     00          | 	byte	0
29469                 | LR__4689
29469     56 61 72 69 
2946d     61 62 6C 65 
29471     20 6E 61 6D 
29475     65 20 65 78 
29479     70 65 63 74 
2947d     65 64       | 	byte	"Variable name expected"
2947f     00          | 	byte	0
29480                 | LR__4690
29480     54 79 70 65 
29484     20 6E 61 6D 
29488     65 20 65 78 
2948c     70 65 63 74 
29490     65 64       | 	byte	"Type name expected"
29492     00          | 	byte	0
29493                 | LR__4691
29493     54 79 70 65 
29497     20 6E 6F 74 
2949b     20 73 75 70 
2949f     70 6F 72 74 
294a3     65 64 20 79 
294a7     65 74       | 	byte	"Type not supported yet"
294a9     00          | 	byte	0
294aa                 | LR__4692
294aa     41 72 72 61 
294ae     79 20 69 6E 
294b2     64 65 78 20 
294b6     6F 75 74 20 
294ba     6F 66 20 62 
294be     6F 75 6E 64 | 	byte	"Array index out of bound"
294c2     00          | 	byte	0
294c3                 | LR__4693
294c3     45 72 72 6F 
294c7     72 20       | 	byte	"Error "
294c9     00          | 	byte	0
294ca                 | LR__4694
294ca     3A 20       | 	byte	": "
294cc     00          | 	byte	0
294cd                 | LR__4695
294cd     2F 73 64    | 	byte	"/sd"
294d0     00          | 	byte	0
294d1                 | LR__4696
294d1     2F 73 64 2F 
294d5     62 61 73    | 	byte	"/sd/bas"
294d8     00          | 	byte	0
294d9                 | LR__4697
294d9     2F 73 64 2F 
294dd     62 61 73    | 	byte	"/sd/bas"
294e0     00          | 	byte	0
294e1                 | LR__4698
294e1     20 42 41 53 
294e5     49 43 20 62 
294e9     79 74 65 73 
294ed     20 66 72 65 
294f1     65          | 	byte	" BASIC bytes free"
294f2     00          | 	byte	0
294f3                 | LR__4699
294f3     52 65 61 64 
294f7     79          | 	byte	"Ready"
294f8     00          | 	byte	0
294f9                 | LR__4700
294f9     20          | 	byte	" "
294fa     00          | 	byte	0
294fb                 | LR__4701
294fb     20          | 	byte	" "
294fc     00          | 	byte	0
294fd                 | LR__4702
294fd                 | 	byte	
294fd     00          | 	byte	0
294fe                 | LR__4703
294fe                 | 	byte	
294fe     00          | 	byte	0
294ff     00          | 	alignl
29500                 | _dat_
29500     00 00 00 00 
29504     00 00 00 00 
29508     00 00 00 00 
2950c     00 00 00 00 | 	byte	$00[16]
29510     61 41 17 0E 
29514     62 42 00 00 
29518     63 43 19 10 
2951c     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
29520     65 45 18 0F 
29524     66 46 00 00 
29528     67 47 00 00 
2952c     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
29530     69 49 00 00 
29534     6A 4A 00 00 
29538     6B 4B 00 00 
2953c     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
29540     6D 4D 00 00 
29544     6E 4E 1A 11 
29548     6F 4F 1E 15 
2954c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
29550     71 51 00 00 
29554     72 52 00 00 
29558     73 53 1B 12 
2955c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
29560     75 55 00 00 
29564     76 56 00 00 
29568     77 57 00 00 
2956c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
29570     79 59 00 00 
29574     7A 5A 1D 14 
29578     31 21 04 00 
2957c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
29580     33 23 06 00 
29584     34 24 07 00 
29588     35 25 08 00 
2958c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
29590     37 26 0A 00 
29594     38 2A 0B 00 
29598     39 28 0C 00 
2959c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
295a0     8D 8D 00 00 
295a4     9B 9B 00 00 
295a8     88 88 00 00 
295ac     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
295b0     20 20 00 00 
295b4     2D 5F 00 00 
295b8     3D 2B 00 00 
295bc     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
295c0     5D 7D 00 00 
295c4     5C 7C 00 00 
295c8     23 7E 00 00 
295cc     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
295d0     27 22 00 00 
295d4     60 7E 03 00 
295d8     2C 3C 00 00 
295dc     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
295e0     2F 3F 00 00 
295e4     B9 B9 00 00 
295e8     BA 00 00 00 
295ec     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
295f0     BC 00 00 00 
295f4     BD 00 00 00 
295f8     BE 00 00 00 
295fc     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
29600     C0 00 00 00 
29604     C1 00 00 00 
29608     C2 00 00 00 
2960c     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
29610     C4 00 00 00 
29614     C5 00 00 00 
29618     C6 00 00 00 
2961c     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
29620     C8 00 00 00 
29624     C9 00 00 00 
29628     CA 00 00 00 
2962c     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
29630     7F 7F 00 00 
29634     CC 00 00 00 
29638     CD 00 00 00 
2963c     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
29640     CF 00 00 00 
29644     D0 00 00 00 
29648     D1 00 00 00 
2964c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
29650     2F 2F 00 00 
29654     2A 2A 00 00 
29658     2D 2D 00 00 
2965c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
29660     8D 8D 00 00 
29664     31 31 00 00 
29668     32 32 00 00 
2966c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
29670     34 34 00 00 
29674     35 35 00 00 
29678     36 36 00 00 
2967c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
29680     38 38 00 00 
29684     39 39 00 00 
29688     30 30 00 00 
2968c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
29690     5C 7C 00 00 
29694     00 00 00 00 
29698     00 00 00 00 
2969c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
296a0     00 00 00 00 
      ...             
296f8     00 00 00 00 
296fc     00 00 00 00 | 	byte	$00[96]
29700     2B 00 A6 F2 
29704     24 A7 09 80 
29708     5B 88 4D 89 
2970c     80 88 A5 88 | atari_spl file "atari.spl"
29710     6D 88 B8 88 
29714     80 88 CB 88 
29718     92 88 A5 88 
2971c     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
29720     A5 88 CA 88 
29724     A6 88 DD 88 
29728     B8 88 AB 89 
2972c     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
29730     C8 AD C6 F1 
29734     91 06 B6 FF 
29738     13 00 4A 00 
2973c     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
29740     5D 00 5E 00 
29744     5D 00 5E 00 
29748     5E 00 5D 00 
2974c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
29750     38 00 83 00 
29754     25 00 83 00 
29758     C3 FE D1 04 
2975c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
29760     48 88 38 85 
29764     41 8A CB 88 
29768     28 89 B8 88 
2976c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
29770     15 89 03 89 
29774     02 89 15 89 
29778     16 89 15 89 
2977c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
29780     15 89 3A 89 
29784     72 89 E3 89 
29788     52 83 AD 97 
2978c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
29790     0C 02 B6 FF 
29794     E1 00 A8 00 
29798     F3 00 A8 00 
2979c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
297a0     CE 00 CD 00 
297a4     CD 00 BA 00 
297a8     E1 00 BB 00 
297ac     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
297b0     DF 00 C9 FF 
297b4     E6 01 B6 06 
297b8     EE DD 8D 98 
297bc     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
297c0     97 89 73 89 
297c4     3B 89 60 89 
297c8     60 89 60 89 
297cc     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
297d0     73 89 72 89 
297d4     85 89 73 89 
297d8     AA 89 60 89 
297dc     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
297e0     E8 8A 18 86 
297e4     92 88 A5 C2 
297e8     E0 00 C3 05 
297ec     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
297f0     F2 00 64 01 
297f4     06 01 3E 01 
297f8     2B 01 2B 01 
297fc     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
29800     2B 01 2A 01 
29804     2B 01 2B 01 
29808     2B 01 18 01 
2980c     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
29810     39 07 61 F3 
29814     C0 AF 37 85 
29818     0F 88 8B 8A 
2981c     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
29820     AB 89 D0 89 
29824     AB 89 D0 89 
29828     D0 89 CF 89 
2982c     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
29830     D0 89 F5 89 
29834     BD 89 08 8A 
29838     CF 89 E8 8A 
2983c     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
29840     53 B3 0D F8 
29844     F4 07 38 00 
29848     63 01 63 01 
2984c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
29850     88 01 88 01 
29854     76 01 88 01 
29858     88 01 89 01 
2985c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
29860     75 01 AE 01 
29864     76 01 88 01 
29868     4A 00 46 06 
2986c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
29870     08 8A 9A 86 
29874     33 8B 08 8A 
29878     2D 8A F5 89 
2987c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
29880     2D 8A 2D 8A 
29884     2E 8A 1B 8A 
29888     40 8A 2D 8A 
2988c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
29890     2E 8A 79 8A 
29894     66 8A C8 8B 
29898     72 82 2B 97 
2989c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
298a0     1D 02 05 01 
298a4     F8 01 C0 01 
298a8     0B 02 C0 01 
298ac     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
298b0     F9 01 D3 01 
298b4     F8 01 D3 01 
298b8     F8 01 D2 01 
298bc     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
298c0     E6 01 2B 01 
298c4     8E 02 5F 07 
298c8     F7 E2 ED 9C 
298cc     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
298d0     E8 8A 78 8A 
298d4     78 8A 65 8A 
298d8     8B 8A 78 8A 
298dc     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
298e0     8B 8A 9D 8A 
298e4     9D 8A 8B 8A 
298e8     C2 8A 78 8A 
298ec     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
298f0     70 8C 18 86 
298f4     8B 8A 23 C9 
298f8     CB 03 C4 05 
298fc     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
29900     0B 02 7B 02 
29904     1E 02 55 02 
29908     30 02 43 02 
2990c     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
29910     43 02 44 02 
29914     43 02 30 02 
29918     68 02 31 02 
2991c     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
29920     07 08 3F F7 
29924     73 B2 13 85 
29928     15 89 ED 8B 
2992c     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
29930     B0 8A FB 8A 
29934     D5 8A FA 8A 
29938     E8 8A FB 8A 
2993c     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
29940     E8 8A 21 8B 
29944     E7 8A 33 8B 
29948     E8 8A 26 8C 
2994c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
29950     8D B0 27 F6 
29954     9C 08 AD 01 
29958     7B 02 8D 02 
2995c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
29960     A1 02 A0 02 
29964     A1 02 A0 02 
29968     A0 02 A0 02 
2996c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
29970     7B 02 D8 02 
29974     7B 02 C6 02 
29978     3E 01 C3 05 
2997c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
29980     00 8C 2A 86 
29984     E0 8C FA 8A 
29988     6A 8B FB 8A 
2998c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
29990     45 8B 45 8B 
29994     45 8B 6B 8B 
29998     46 8B 59 8B 
2999c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
299a0     6B 8B 6B 8B 
299a4     6B 8B 6B 8B 
299a8     7D 8B 7D 8B 
299ac     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
299b0     90 8B 91 8B 
299b4     90 8B 90 8B 
299b8     A3 8B A3 8B 
299bc     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
299c0     B5 8B B6 8B 
299c4     B5 8B B5 8B 
299c8     B6 8B C8 8B 
299cc     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
299d0     C8 8B DA 8B 
299d4     DB 8B DB 8B 
299d8     DB 8B DC 8B 
299dc     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
299e0     EE 8B EE 8B 
299e4     00 8C 01 8C 
299e8     00 8C 01 8C 
299ec     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
299f0     12 8C 13 8C 
299f4     13 8C 26 8C 
299f8     26 8C 26 8C 
299fc     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
29a00     38 8C 38 8C 
29a04     38 8C 38 8C 
29a08     4B 8C 4B 8C 
29a0c     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
29a10     5E 8C 5E 8C 
29a14     5E 8C 5E 8C 
29a18     70 8C 70 8C 
29a1c     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
29a20     70 8C 83 8C 
29a24     83 8C 83 8C 
29a28     83 8C 96 8C 
29a2c     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
29a30     95 8C A9 8C 
29a34     A9 8C A8 8C 
29a38     A8 8C A8 8C 
29a3c     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
29a40     BB 8C BB 8C 
29a44     BB 8C CE 8C 
29a48     CE 8C CE 8C 
29a4c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
29a50     E0 8C E1 8C 
29a54     E1 8C E0 8C 
29a58     F4 8C F2 8C 
29a5c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
29a60     05 8D 05 8D 
29a64     06 8D 06 8D 
29a68     19 8D 19 8D 
29a6c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
29a70     18 8D 2B 8D 
29a74     2B 8D 2B 8D 
29a78     2A 8D 3E 8D 
29a7c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
29a80     3E 8D 51 8D 
29a84     50 8D 50 8D 
29a88     50 8D 51 8D 
29a8c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
29a90     63 8D 64 8D 
29a94     76 8D 75 8D 
29a98     75 8D 76 8D 
29a9c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
29aa0     88 8D 88 8D 
29aa4     89 8D 9B 8D 
29aa8     9A 8D 9B 8D 
29aac     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
29ab0     AD 8D AE 8D 
29ab4     AD 8D AE 8D 
29ab8     C1 8D C1 8D 
29abc     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
29ac0     D3 8D D3 8D 
29ac4     D3 8D D3 8D 
29ac8     D3 8D E6 8D 
29acc     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
29ad0     E6 8D E6 8D 
29ad4     F9 8D F9 8D 
29ad8     F9 8D F8 8D 
29adc     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
29ae0     0B 8E 0B 8E 
29ae4     1D 8E 1D 8E 
29ae8     1E 8E 1E 8E 
29aec     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
29af0     31 8E 31 8E 
29af4     31 8E 42 8E 
29af8     43 8E 43 8E 
29afc     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
29b00     56 8E 56 8E 
29b04     55 8E 56 8E 
29b08     68 8E 69 8E 
29b0c     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
29b10     69 8E 7B 8E 
29b14     7C 8E 7B 8E 
29b18     7B 8E 8D 8E 
29b1c     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
29b20     8D 8E A1 8E 
29b24     A0 8E A1 8E 
29b28     A1 8E A0 8E 
29b2c     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
29b30     B3 8E B3 8E 
29b34     C6 8E C5 8E 
29b38     C6 8E C6 8E 
29b3c     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
29b40     D8 8E D9 8E 
29b44     D8 8E EC 8E 
29b48     EB 8E EC 8E 
29b4c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
29b50     FE 8E FE 8E 
29b54     FE 8E FE 8E 
29b58     10 8F 10 8F 
29b5c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
29b60     11 8F 23 8F 
29b64     24 8F 23 8F 
29b68     24 8F 37 8F 
29b6c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
29b70     36 8F 36 8F 
29b74     48 8F 49 8F 
29b78     49 8F 49 8F 
29b7c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
29b80     5B 8F 5C 8F 
29b84     5B 8F 6E 8F 
29b88     6E 8F 6E 8F 
29b8c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
29b90     81 8F 81 8F 
29b94     81 8F 81 8F 
29b98     93 8F 93 8F 
29b9c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
29ba0     93 8F A6 8F 
29ba4     A6 8F A6 8F 
29ba8     A6 8F B9 8F 
29bac     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
29bb0     B9 8F B9 8F 
29bb4     CC 8F CB 8F 
29bb8     CB 8F CC 8F 
29bbc     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
29bc0     DF 8F DE 8F 
29bc4     DE 8F F1 8F 
29bc8     F1 8F F1 8F 
29bcc     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
29bd0     03 90 04 90 
29bd4     04 90 04 90 
29bd8     16 90 17 90 
29bdc     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
29be0     29 90 28 90 
29be4     29 90 28 90 
29be8     29 90 3C 90 
29bec     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
29bf0     3C 90 4F 90 
29bf4     4E 90 4E 90 
29bf8     4E 90 4E 90 
29bfc     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
29c00     61 90 61 90 
29c04     73 90 74 90 
29c08     74 90 74 90 
29c0c     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
29c10     87 90 86 90 
29c14     87 90 86 90 
29c18     99 90 99 90 
29c1c     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
29c20     AB 90 AB 90 
29c24     AC 90 AB 90 
29c28     AB 90 BF 90 
29c2c     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
29c30     BE 90 D1 90 
29c34     D0 90 D1 90 
29c38     D1 90 D1 90 
29c3c     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
29c40     E3 90 E4 90 
29c44     F6 90 F6 90 
29c48     F6 90 F6 90 
29c4c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
29c50     09 91 0A 91 
29c54     0A 91 1C 91 
29c58     1C 91 1C 91 
29c5c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
29c60     2F 91 2E 91 
29c64     2F 91 2F 91 
29c68     2E 91 41 91 
29c6c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
29c70     41 91 53 91 
29c74     54 91 54 91 
29c78     53 91 54 91 
29c7c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
29c80     67 91 67 91 
29c84     79 91 7A 91 
29c88     79 91 78 91 
29c8c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
29c90     8C 91 8B 91 
29c94     8C 91 8C 91 
29c98     9E 91 9E 91 
29c9c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
29ca0     B1 91 B1 91 
29ca4     B2 91 B1 91 
29ca8     B1 91 C4 91 
29cac     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
29cb0     C4 91 D6 91 
29cb4     D7 91 D7 91 
29cb8     D7 91 D6 91 
29cbc     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
29cc0     EA 91 EA 91 
29cc4     EA 91 FC 91 
29cc8     FC 91 FB 91 
29ccc     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
29cd0     0E 92 0F 92 
29cd4     0F 92 0E 92 
29cd8     21 92 21 92 
29cdc     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
29ce0     21 92 34 92 
29ce4     33 92 34 92 
29ce8     34 92 47 92 
29cec     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
29cf0     46 92 47 92 
29cf4     59 92 59 92 
29cf8     59 92 59 92 
29cfc     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
29d00     6C 92 6C 92 
29d04     6B 92 7E 92 
29d08     7E 92 7E 92 
29d0c     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
29d10     92 92 91 92 
29d14     91 92 90 92 
29d18     91 92 A4 92 
29d1c     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
29d20     A3 92 B6 92 
29d24     B6 92 B7 92 
29d28     B7 92 B6 92 
29d2c     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
29d30     CA 92 C9 92 
29d34     CA 92 DC 92 
29d38     DC 92 DC 92 
29d3c     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
29d40     EF 92 EF 92 
29d44     EF 92 EF 92 
29d48     01 93 01 93 
29d4c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
29d50     15 93 14 93 
29d54     14 93 14 93 
29d58     14 93 27 93 
29d5c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
29d60     27 93 39 93 
29d64     3A 93 39 93 
29d68     39 93 39 93 
29d6c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
29d70     4B 93 4C 93 
29d74     5F 93 5F 93 
29d78     5F 93 5E 93 
29d7c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
29d80     5F 93 84 93 
29d84     4C 93 96 93 
29d88     5F 93 AE 94 
29d8c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
29d90     7B C1 00 00 
29d94     00 00 00 00 
29d98     00 00 00 00 
29d9c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29da0     00 00 00 00 | 	byte	$00, $00, $00, $00
29da4     00 00 00 00 | zero long 0
29da8     7A D7 00 80 
29dac     87 8A 48 8F 
29db0     EC 8C 76 8D 
29db4     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
29db8     3C 8D 82 8D 
29dbc     42 8D 88 8D 
29dc0     8C 8D 8E 8D 
29dc4     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
29dc8     97 8D DE 8D 
29dcc     E1 8D F1 8E 
29dd0     D8 8C A3 83 
29dd4     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
29dd8     65 71 C9 65 
29ddc     FC 64 C4 65 
29de0     C1 65 BF 65 
29de4     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
29de8     B6 65 B4 65 
29dec     B2 65 AE 65 
29df0     AC 65 ED 65 
29df4     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
29df8     5E 65 25 66 
29dfc     FA 62 23 6B 
29e00     B5 6C 61 0A 
29e04     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
29e08     5D 90 BE 8D 
29e0c     47 8E C3 8D 
29e10     09 8E C9 8D 
29e14     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
29e18     15 8E 19 8E 
29e1c     1B 8E 62 8E 
29e20     64 8E 68 8E 
29e24     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
29e28     B5 8E 4C 90 
29e2c     FA 84 3C 9D 
29e30     98 13 79 6D 
29e34     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
29e38     D9 66 50 66 
29e3c     D4 66 4B 66 
29e40     8C 66 46 66 
29e44     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
29e48     81 66 3A 66 
29e4c     7C 66 36 66 
29e50     76 66 30 66 
29e54     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
29e58     6B 66 88 72 
29e5c     BF 37 E7 B7 
29e60     75 83 8B 8E 
29e64     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
29e68     94 8E 96 8E 
29e6c     DD 8E 9C 8E 
29e70     E2 8E A2 8E 
29e74     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
29e78     EE 8E AE 8E 
29e7c     38 8F B5 8E 
29e80     3F 8F FD 8E 
29e84     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
29e88     A5 87 1E E3 
29e8c     6D 5D FA 71 
29e90     41 64 25 67 
29e94     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
29e98     D9 66 1A 67 
29e9c     18 67 15 67 
29ea0     12 67 0F 67 
29ea4     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
29ea8     07 67 C0 66 
29eac     01 67 BC 66 
29eb0     B8 66 DE 64 
29eb4     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
29eb8     43 E5 1F 8B 
29ebc     14 8A F1 90 
29ec0     1C 8F 63 8F 
29ec4     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
29ec8     29 8F 6E 8F 
29ecc     72 8F 75 8F 
29ed0     34 8F BE 8F 
29ed4     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
29ed8     84 8F 87 8F 
29edc     CC 8F 56 90 
29ee0     67 91 49 80 
29ee4     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
29ee8     46 77 A6 66 
29eec     E8 66 B0 67 
29ef0     AD 67 ED 67 
29ef4     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
29ef8     A2 67 E3 67 
29efc     9D 67 9A 67 
29f00     98 67 94 67 
29f04     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
29f08     49 67 CD 67 
29f0c     28 65 5F 6E 
29f10     82 67 3A 01 
29f14     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
29f18     C2 91 A9 8F 
29f1c     EF 8F AE 8F 
29f20     F4 8F B5 8F 
29f24     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
29f28     01 90 03 90 
29f2c     07 90 09 90 
29f30     0C 90 53 90 
29f34     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
29f38     18 90 44 93 
29f3c     85 84 D6 9D 
29f40     87 1F 2F 75 
29f44     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
29f48     C4 68 F6 67 
29f4c     BE 68 F1 67 
29f50     76 68 2E 68 
29f54     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
29f58     27 68 24 68 
29f5c     64 68 1E 68 
29f60     5F 68 19 68 
29f64     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
29f68     DC 68 56 72 
29f6c     7E 36 C2 B8 
29f70     D7 84 73 90 
29f74     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
29f78     7B 90 7F 90 
29f7c     82 90 84 90 
29f80     CB 90 8B 90 
29f84     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
29f88     D7 90 96 90 
29f8c     20 91 59 90 
29f90     25 91 A2 90 
29f94     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
29f98     D0 89 40 EE 
29f9c     12 64 C4 71 
29fa0     29 66 0C 69 
29fa4     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
29fa8     C0 68 02 69 
29fac     FE 68 FB 68 
29fb0     F9 68 F6 68 
29fb4     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
29fb8     EE 68 A8 68 
29fbc     2C 69 5F 68 
29fc0     E2 68 81 66 
29fc4     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
29fc8     1E EB A6 8A 
29fcc     73 8B 5E 93 
29fd0     7B 90 48 91 
29fd4     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
29fd8     0D 91 11 91 
29fdc     14 91 16 91 
29fe0     5C 91 1C 91 
29fe4     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
29fe8     68 91 AF 91 
29fec     2A 91 B5 91 
29ff0     75 91 1A 94 
29ff4     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
29ff8     70 0E CB 6C 
29ffc     5D 6E C4 67 
2a000     99 69 54 69 
2a004     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2a008     D2 69 49 69 
2a00c     89 69 86 69 
2a010     40 69 C4 69 
2a014     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2a018     35 69 76 69 
2a01c     58 67 EB 6D 
2a020     E9 6D 89 0F 
2a024     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2a028     33 94 94 91 
2a02c     D9 91 56 91 
2a030     E0 91 9F 91 
2a034     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2a038     EC 91 EE 91 
2a03c     F1 91 F4 91 
2a040     F7 91 3D 92 
2a044     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2a048     46 92 21 94 
2a04c     11 89 A4 9D 
2a050     FD 0E 8F 6C 
2a054     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2a058     28 6A E1 69 
2a05c     65 6A 1F 6A 
2a060     5F 6A 1A 6A 
2a064     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2a068     54 6A 0F 6A 
2a06c     4F 6A 09 6A 
2a070     06 6A 03 6A 
2a074     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2a078     23 68 69 77 
2a07c     3A 4D 38 CA 
2a080     38 86 4E 91 
2a084     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2a088     64 92 24 92 
2a08c     6A 92 2A 92 
2a090     70 92 30 92 
2a094     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2a098     7B 92 7E 92 
2a09c     C5 92 84 92 
2a0a0     CB 92 8A 92 
2a0a4     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2a0a8     4D 8D F9 E2 
2a0ac     97 59 FE 74 
2a0b0     DB 68 6D 6A 
2a0b4     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2a0b8     A8 6A A5 6A 
2a0bc     A3 6A 9F 6A 
2a0c0     9D 6A 9B 6A 
2a0c4     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2a0c8     D6 6A 8F 6A 
2a0cc     CF 6A 46 6A 
2a0d0     CA 6A E1 67 
2a0d4     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2a0d8     D3 F7 15 92 
2a0dc     90 8C BF 94 
2a0e0     A6 92 EB 92 
2a0e4     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2a0e8     B1 92 F7 92 
2a0ec     FA 92 FD 92 
2a0f0     00 93 02 93 
2a0f4     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2a0f8     4F 93 52 93 
2a0fc     54 93 22 94 
2a100     5A 93 8F 88 
2a104     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2a108     1C 77 07 6C 
2a10c     E8 69 7A 6B 
2a110     34 6B 75 6B 
2a114     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2a118     29 6B 26 6B 
2a11c     24 6B 21 6B 
2a120     1D 6B 5E 6B 
2a124     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2a128     12 6B 52 6B 
2a12c     34 69 34 6E 
2a130     BA 73 A4 24 
2a134     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2a138     7A 94 B3 93 
2a13c     72 93 31 93 
2a140     78 93 7A 93 
2a144     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2a148     83 93 86 93 
2a14c     89 93 D0 93 
2a150     D2 93 D5 93 
2a154     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2a158     DD 93 40 96 
2a15c     30 8B 99 9C 
2a160     52 10 94 71 
2a164     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2a168     46 6C 79 6B 
2a16c     40 6C B7 6B 
2a170     F7 6B B1 6B 
2a174     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2a178     EC 6B A5 6B 
2a17c     A2 6B 9F 6B 
2a180     9D 6B 9A 6B 
2a184     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2a188     C8 6A E4 76 
2a18c     20 4B F9 CE 
2a190     2E 8A 1A 92 
2a194     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2a198     FB 93 BA 93 
2a19c     01 94 03 94 
2a1a0     4A 94 09 94 
2a1a4     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2a1a8     55 94 14 94 
2a1ac     9E 94 1A 94 
2a1b0     61 94 20 94 
2a1b4     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2a1b8     3E 87 E5 CD 
2a1bc     5F 50 6C 78 
2a1c0     B5 6A 04 6C 
2a1c4     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2a1c8     83 6C 7F 6C 
2a1cc     7C 6C 36 6C 
2a1d0     76 6C 74 6C 
2a1d4     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2a1d8     6B 6C 25 6C 
2a1dc     66 6C 1F 6C 
2a1e0     1D 6C 41 6A 
2a1e4     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2a1e8     BA FA FC 94 
2a1ec     5B 8D 97 96 
2a1f0     3B 94 C5 94 
2a1f4     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2a1f8     89 94 8C 94 
2a1fc     8F 94 92 94 
2a200     94 94 DB 94 
2a204     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2a208     E4 94 E7 94 
2a20c     2D 95 74 95 
2a210     C8 96 15 89 
2a214     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2a218     CB 75 31 6F 
2a21c     7E 6B 10 6D 
2a220     C9 6C 0A 6D 
2a224     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2a228     BD 6C FF 6C 
2a22c     FB 6C F9 6C 
2a230     B2 6C F3 6C 
2a234     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2a238     A7 6C E8 6C 
2a23c     0D 6B 85 6F 
2a240     C7 74 10 28 
2a244     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2a248     96 96 47 95 
2a24c     06 95 0A 95 
2a250     0C 95 0F 95 
2a254     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2a258     17 95 5E 95 
2a25c     61 95 63 95 
2a260     22 95 AC 95 
2a264     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2a268     72 95 17 98 
2a26c     59 8E 01 96 
2a270     CF FC 5A 68 
2a274     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2a278     96 6D 50 6D 
2a27c     D5 6D 4A 6D 
2a280     8C 6D 89 6D 
2a284     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2a288     80 6D 3A 6D 
2a28c     7A 6D 77 6D 
2a290     75 6D 71 6D 
2a294     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2a298     18 6C BC 78 
2a29c     9A 4F 7E CF 
2a2a0     1F 89 F1 93 
2a2a4     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2a2a8     D2 95 4E 95 
2a2ac     D7 95 53 95 
2a2b0     DD 95 E0 95 
2a2b4     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2a2b8     A5 95 EB 95 
2a2bc     EE 95 F0 95 
2a2c0     37 96 B3 95 
2a2c4     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2a2c8     1A 98 D5 8D 
2a2cc     C5 9F CD 0F 
2a2d0     0F 71 F3 73 
2a2d4     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2a2d8     D9 6D 5E 6E 
2a2dc     D3 6D 58 6E 
2a2e0     12 6E 0F 6E 
2a2e4     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2a2e8     49 6E BF 6D 
2a2ec     87 6E 76 6D 
2a2f0     81 6E 11 6B 
2a2f4     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2a2f8     3F 09 44 95 
2a2fc     E5 8D 3F 99 
2a300     D4 95 A2 96 
2a304     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2a308     23 96 69 96 
2a30c     6B 96 6E 96 
2a310     71 96 74 96 
2a314     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2a318     BF 96 3C 96 
2a31c     C6 96 C8 96 
2a320     A3 98 51 8D 
2a324     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2a328     CF 75 29 73 
2a32c     90 6C EC 6E 
2a330     62 6E E7 6E 
2a334     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2a338     9A 6E 98 6E 
2a33c     95 6E 91 6E 
2a340     8E 6E CF 6E 
2a344     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2a348     40 6E C3 6E 
2a34c     E8 6C 45 6F 
2a350     A5 7B C9 35 
2a354     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2a358     2D 98 23 97 
2a35c     E1 96 A0 96 
2a360     A4 96 EA 96 
2a364     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2a368     AF 96 F4 96 
2a36c     F8 96 3E 97 
2a370     FD 96 43 97 
2a374     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2a378     08 97 6B 99 
2a37c     D6 92 88 91 
2a380     D8 EE 84 66 
2a384     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2a388     2E 6F E7 6E 
2a38c     6C 6F 24 6F 
2a390     21 6F 1F 6F 
2a394     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2a398     17 6F 13 6F 
2a39c     54 6F 0E 6F 
2a3a0     0B 6F 4B 6F 
2a3a4     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2a3a8     27 6D 1C 7B 
2a3ac     19 59 9F DB 
2a3b0     66 8E BC 94 
2a3b4     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2a3b8     67 97 26 97 
2a3bc     6D 97 2B 97 
2a3c0     72 97 32 97 
2a3c4     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2a3c8     C1 97 7F 97 
2a3cc     C6 97 85 97 
2a3d0     CB 97 CE 97 
2a3d4     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2a3d8     EC 8A C4 C6 
2a3dc     68 4C F4 7D 
2a3e0     63 6E E8 6E 
2a3e4     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2a3e8     ED 6F A7 6F 
2a3ec     E7 6F A0 6F 
2a3f0     E1 6F 9B 6F 
2a3f4     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2a3f8     D5 6F 8F 6F 
2a3fc     CE 6F 45 6F 
2a400     86 6F 68 6D 
2a404     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2a408     C0 13 AD A2 
2a40c     A7 8E 79 99 
2a410     E6 97 E8 97 
2a414     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2a418     F1 97 F3 97 
2a41c     F6 97 F9 97 
2a420     FB 97 FE 97 
2a424     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2a428     4A 98 0A 98 
2a42c     93 98 0F 98 
2a430     7F 9B BF 8C 
2a434     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2a438     91 7B 62 73 
2a43c     1A 6E B9 70 
2a440     EB 6F B3 70 
2a444     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2a448     25 70 20 70 
2a44c     1E 70 1B 70 
2a450     18 70 15 70 
2a454     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2a458     0D 70 09 70 
2a45c     07 70 03 70 
2a460     01 70 FD 6F 
2a464     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2a468     F6 6F F2 6F 
2a46c     EF 6F EC 6F 
2a470     2C 70 E6 6F 
2a474     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2a478     DD 6F 97 6F 
2a47c     D7 6F 84 6E 
2a480     8F 6F 3F 7D 
2a484     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2a486     00 00 00 00 | zero1 long 0
2a48a     FF FF FF FF 
2a48e     FF FF       | atarist_spl file "atarist.spl" '512
2a490     00 00 00 00 
2a494     00 00 00 00 
2a498     00 00       | 	byte	$00[10]
2a49a     17 7F F2 7F 
2a49e     B2 7F 72 7F 
2a4a2     33 7F F4 7E 
2a4a6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2a4aa     36 7E F5 7D 
2a4ae     E9 51 F2 0D 
2a4b2     8E 00 F3 FD 
2a4b6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2a4ba     57 FD 58 FD 
2a4be     5B FD 5C FD 
2a4c2     5C FD 60 7D 
2a4c6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2a4ca     D6 7C 98 7C 
2a4ce     59 7C 1A 7C 
2a4d2     DC 7B 9E 7B 
2a4d6     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2a4da     F3 05 00 FD 
2a4de     41 FB EA FA 
2a4e2     D9 FA DB FA 
2a4e6     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2a4ea     E4 FA 9B 36 
2a4ee     F8 7A C0 7A 
2a4f2     84 7A 45 7A 
2a4f6     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2a4fa     8E 79 51 79 
2a4fe     15 79 D7 78 
2a502     3C 1F EB FF 
2a506     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2a50a     6D F8 65 F8 
2a50e     68 F8 6D F8 
2a512     70 F8 74 F8 
2a516     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2a51a     AB 60 79 60 
2a51e     4B 60 1A 60 
2a522     E9 5F B9 5F 
2a526     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2a52a     FB 59 B2 0B 
2a52e     92 FA 3A F7 
2a532     96 F6 79 F6 
2a536     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2a53a     82 F6 86 F6 
2a53e     8C F6 DB 5D 
2a542     F1 5E C1 5E 
2a546     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2a54a     34 5E 04 5E 
2a54e     D6 5D A6 5D 
2a552     78 5D D4 3E 
2a556     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2a55a     27 F5 BA F4 
2a55e     AB F4 AD F4 
2a562     B2 F4 B8 F4 
2a566     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2a56a     26 5D 2B 5D 
2a56e     FC 5C CD 5C 
2a572     9F 5C 70 5C 
2a576     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2a57a     E5 5B B8 5B 
2a57e     DB 24 A7 FC 
2a582     D1 F4 4D F3 
2a586     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2a58a     04 F3 0B F3 
2a58e     11 F3 16 F3 
2a592     DE 18 98 5B 
2a596     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2a59a     4E 4A 29 48 
2a59e     A0 47 6A 47 
2a5a2     43 47 20 47 
2a5a6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2a5aa     E2 F6 98 F2 
2a5ae     C5 F1 A3 F1 
2a5b2     A3 F1 A8 F1 
2a5b6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2a5ba     BF F1 00 3D 
2a5be     EF 46 CD 46 
2a5c2     AA 46 86 46 
2a5c6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2a5ca     1C 46 F9 45 
2a5ce     D7 45 EE 43 
2a5d2     DE 02 E8 F3 
2a5d6     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2a5da     61 F0 65 F0 
2a5de     6D F0 74 F0 
2a5e2     7C F0 84 F0 
2a5e6     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2a5ea     8E 45 6D 45 
2a5ee     49 45 27 45 
2a5f2     05 45 E1 44 
2a5f6     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2a5fa     F1 2F A9 FB 
2a5fe     8B F1 9B EF 
2a602     40 EF 36 EF 
2a606     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2a60a     4D EF 56 EF 
2a60e     5E EF 7B 44 
2a612     8C 44 69 44 
2a616     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2a61a     03 44 E1 43 
2a61e     C0 43 F5 37 
2a622     69 33 0F 11 
2a626     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2a62a     66 EE 37 EE 
2a62e     38 EE 40 EE 
2a632     48 EE 51 EE 
2a636     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2a63a     7D 32 6A 32 
2a63e     51 32 37 32 
2a642     1F 32 05 32 
2a646     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2a64a     B9 31 A1 31 
2a64e     F1 04 F4 F1 
2a652     50 EE A0 ED 
2a656     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2a65a     93 ED 9A ED 
2a65e     A4 ED AD ED 
2a662     F4 27 C1 31 
2a666     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2a66a     78 31 5F 31 
2a66e     46 31 2E 31 
2a672     15 31 FC 30 
2a676     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2a67a     C4 EF 4A ED 
2a67e     DC EC CB EC 
2a682     D2 EC DA EC 
2a686     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2a68a     F9 EC 64 2F 
2a68e     0A 31 F1 30 
2a692     D9 30 C0 30 
2a696     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2a69a     78 30 5F 30 
2a69e     46 30 38 23 
2a6a2     A6 F6 19 EE 
2a6a6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2a6aa     20 EC 28 EC 
2a6ae     32 EC 3C EC 
2a6b2     47 EC 51 EC 
2a6b6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2a6ba     A3 22 93 22 
2a6be     7F 22 6E 22 
2a6c2     5D 22 4C 22 
2a6c6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2a6ca     77 09 76 F1 
2a6ce     CC EC F0 EB 
2a6d2     CD EB CE EB 
2a6d6     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2a6da     ED EB F5 EB 
2a6de     3E F6 6B 22 
2a6e2     5F 22 4E 22 
2a6e6     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2a6ea     1B 22 0B 22 
2a6ee     FA 21 E9 21 
2a6f2     D8 21 4D FF 
2a6f6     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2a6fa     92 EB 7B EB 
2a6fe     82 EB 8C EB 
2a702     97 EB A1 EB 
2a706     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2a70a     15 22 04 22 
2a70e     F3 21 E3 21 
2a712     D2 21 C0 21 
2a716     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2a71a     8E 21 7D 21 
2a71e     9A F8 A4 ED 
2a722     8E EB 2F EB 
2a726     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2a72a     37 EB 42 EB 
2a72e     4C EB 57 EB 
2a732     B2 17 22 19 
2a736     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2a73a     FD 18 EF 18 
2a73e     E3 18 D6 18 
2a742     CA 18 BD 18 
2a746     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2a74a     60 EC 35 EB 
2a74e     01 EB 01 EB 
2a752     0C EB 16 EB 
2a756     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2a75a     34 EB D0 18 
2a75e     00 19 F4 18 
2a762     E8 18 DA 18 
2a766     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2a76a     B6 18 A9 18 
2a76e     9D 18 91 05 
2a772     F0 EF CA EB 
2a776     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2a77a     E8 EA F2 EA 
2a77e     FE EA 07 EB 
2a782     12 EB C2 EF 
2a786     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2a78a     D9 18 CD 18 
2a78e     C0 18 B3 18 
2a792     A7 18 9B 18 
2a796     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2a79a     B8 FC 30 EE 
2a79e     61 EB DC EA 
2a7a2     CD EA D2 EA 
2a7a6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2a7aa     F3 EA FE EA 
2a7ae     D2 09 D1 18 
2a7b2     C3 18 17 18 
2a7b6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2a7ba     66 11 52 11 
2a7be     49 11 41 11 
2a7c2     38 11 E0 F4 
2a7c6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2a7ca     C9 EA C5 EA 
2a7ce     CF EA DB EA 
2a7d2     E6 EA EF EA 
2a7d6     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2a7da     89 11 80 11 
2a7de     78 11 6E 11 
2a7e2     67 11 5D 11 
2a7e6     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2a7ea     43 11 32 0D 
2a7ee     9C F1 07 EC 
2a7f2     F8 EA CD EA 
2a7f6     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2a7fa     E4 EA ED EA 
2a7fe     F8 EA 02 EB 
2a802     55 11 91 11 
2a806     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2a80a     75 11 6E 11 
2a80e     64 11 5E 11 
2a812     54 11 4A 11 
2a816     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2a81a     A8 EB F1 EA 
2a81e     D9 EA DC EA 
2a822     E8 EA F1 EA 
2a826     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2a82a     A6 EB 9E 11 
2a82e     A0 11 96 11 
2a832     8D 11 85 11 
2a836     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2a83a     6A 11 CA 0D 
2a83e     36 0B 57 F8 
2a842     6C ED 57 EB 
2a846     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2a84a     F4 EA FF EA 
2a84e     09 EB 15 EB 
2a852     1E EB 1A FD 
2a856     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2a85a     ED 0A E8 0A 
2a85e     E2 0A DC 0A 
2a862     D6 0A D1 0A 
2a866     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2a86a     F8 F3 BC EC 
2a86e     57 EB 1E EB 
2a872     18 EB 24 EB 
2a876     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2a87a     42 EB 4D EB 
2a87e     08 09 20 0B 
2a882     1A 0B 14 0B 
2a886     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2a88a     04 0B FE 0A 
2a88e     F9 0A F2 0A 
2a892     84 08 3A F1 
2a896     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2a89a     42 EB 42 EB 
2a89e     4E EB 57 EB 
2a8a2     62 EB 6B EB 
2a8a6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2a8aa     48 0B 43 0B 
2a8ae     3C 0B 36 0B 
2a8b2     31 0B 2C 0B 
2a8b6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2a8ba     1B 0B 5C 00 
2a8be     6A EF 1B EC 
2a8c2     81 EB 6A EB 
2a8c6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2a8ca     85 EB 8E EB 
2a8ce     99 EB A3 EB 
2a8d2     DD 05 E5 05 
2a8d6     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2a8da     DB 05 D8 05 
2a8de     D5 05 D1 05 
2a8e2     D0 05 CB 05 
2a8e6     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2a8ea     0C EC BB EB 
2a8ee     B3 EB BB EB 
2a8f2     C5 EB D0 EB 
2a8f6     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2a8fa     E4 F7 2C 06 
2a8fe     28 06 24 06 
2a902     22 06 1F 06 
2a906     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2a90a     16 06 14 06 
2a90e     0F 06 D0 F3 
2a912     65 ED 2D EC 
2a916     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2a91a     01 EC 0A EC 
2a91e     14 EC 1E EC 
2a922     29 EC FB 03 
2a926     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2a92a     63 06 60 06 
2a92e     5E 06 59 06 
2a932     58 06 54 06 
2a936     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2a93a     69 F1 21 ED 
2a93e     55 EC 33 EC 
2a942     36 EC 40 EC 
2a946     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2a94a     5C EC 68 EC 
2a94e     92 02 D9 02 
2a952     D7 02 D7 02 
2a956     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2a95a     D1 02 D1 02 
2a95e     CE 02 CD 02 
2a962     5D FC 80 EF 
2a966     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2a96a     83 EC 8A EC 
2a96e     93 EC 9C EC 
2a972     A5 EC B1 EC 
2a976     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2a97a     2B 03 2A 03 
2a97e     29 03 26 03 
2a982     25 03 24 03 
2a986     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2a98a     1F 03 70 F7 
2a98e     D0 EE 27 ED 
2a992     DB EC D4 EC 
2a996     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2a99a     F0 EC FA EC 
2a99e     02 ED F9 F4 
2a9a2     7B 03 7C 03 
2a9a6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2a9aa     75 03 73 03 
2a9ae     72 03 70 03 
2a9b2     6D 03 6C 03 
2a9b6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2a9ba     54 ED 22 ED 
2a9be     22 ED 2C ED 
2a9c2     35 ED 3F ED 
2a9c6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2a9ca     14 01 C3 03 
2a9ce     C1 03 C0 03 
2a9d2     5F 01 A5 00 
2a9d6     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2a9da     7B 00 7C 00 
2a9de     20 00 85 F1 
2a9e2     2A EE 89 ED 
2a9e6     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2a9ea     80 ED 87 ED 
2a9ee     90 ED 9A ED 
2a9f2     A3 ED 73 00 
2a9f6     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2a9fa     D0 00 D0 00 
2a9fe     D0 00 D0 00 
2aa02     D0 00 CF 00 
2aa06     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2aa0a     80 F0 3D EE 
2aa0e     D5 ED C7 ED 
2aa12     CD ED D6 ED 
2aa16     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2aa1a     F2 ED FA ED 
2aa1e     1D 01 29 01 
2aa22     27 01 27 01 
2aa26     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2aa2a     25 01 26 01 
2aa2e     26 01 23 01 
2aa32     D0 F7 EC EF 
2aa36     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2aa3a     1C EE 24 EE 
2aa3e     2D EE 37 EE 
2aa42     40 EE 47 EE 
2aa46     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2aa4a     7D 01 7B 01 
2aa4e     7A 01 7A 01 
2aa52     79 01 78 01 
2aa56     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2aa5a     84 FE DE F3 
2aa5e     6C EF 93 EE 
2aa62     72 EE 72 EE 
2aa66     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2aa6a     8B EE 95 EE 
2aa6e     9E EE 15 FC 
2aa72     67 FE 67 FE 
2aa76     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2aa7a     6B FE 6B FE 
2aa7e     6D FE 6D FE 
2aa82     6D FE 6F FE 
2aa86     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2aa8a     DF EE CC EE 
2aa8e     CF EE D9 EE 
2aa92     E1 EE EA EE 
2aa96     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2aa9a     5A FE C4 FE 
2aa9e     C3 FE C5 FE 
2aaa2     C6 FE C6 FE 
2aaa6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2aaaa     C8 FE C7 FE 
2aaae     DA FB 85 F1 
2aab2     8D EF 31 EF 
2aab6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2aaba     34 EF 3E EF 
2aabe     46 EF 4F EF 
2aac2     57 EF 0D FF 
2aac6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2aaca     1F FF 1F FF 
2aace     21 FF 21 FF 
2aad2     21 FF 21 FF 
2aad6     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2aada     15 F1 BE EF 
2aade     84 EF 7E EF 
2aae2     88 EF 8F EF 
2aae6     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2aaea     A9 EF 06 F2 
2aaee     A6 FC AB FC 
2aaf2     AD FC AE FC 
2aaf6     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2aafa     B2 FC B4 FC 
2aafe     B6 FC B7 FC 
2ab02     8B F4 BD F0 
2ab06     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2ab0a     E4 EF EE EF 
2ab0e     F6 EF FD EF 
2ab12     04 F0 0E F0 
2ab16     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2ab1a     0B FD 0D FD 
2ab1e     0F FD 11 FD 
2ab22     11 FD 13 FD 
2ab26     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2ab2a     17 FD 64 F3 
2ab2e     CD F0 52 F0 
2ab32     41 F0 45 F0 
2ab36     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2ab3a     5B F0 64 F0 
2ab3e     6D F0 FB FC 
2ab42     65 FD 68 FD 
2ab46     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2ab4a     6C FD 6D FD 
2ab4e     6F FD 70 FD 
2ab52     72 FD B3 FB 
2ab56     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2ab5a     A4 F0 99 F0 
2ab5e     A0 F0 A8 F0 
2ab62     AE F0 B9 F0 
2ab66     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2ab6a     CB FB DD FB 
2ab6e     DE FB E0 FB 
2ab72     E3 FB E3 FB 
2ab76     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2ab7a     E9 FB EC FB 
2ab7e     62 F7 27 F2 
2ab82     2A F1 FF F0 
2ab86     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2ab8a     0C F1 13 F1 
2ab8e     1B F1 23 F1 
2ab92     33 F2 3C FC 
2ab96     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2ab9a     42 FC 45 FC 
2ab9e     47 FC 48 FC 
2aba2     4A FC 4C FC 
2aba6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2abaa     20 F2 77 F1 
2abae     5C F1 5F F1 
2abb2     64 F1 6C F1 
2abb6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2abba     83 F1 DC F8 
2abbe     9A FC 9A FC 
2abc2     9B FC 9E FC 
2abc6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2abca     A3 FC A4 FC 
2abce     A6 FC A9 FC 
2abd2     90 F4 33 F2 
2abd6     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2abda     BA F1 BF F1 
2abde     C7 F1 CE F1 
2abe2     D6 F1 DC F1 
2abe6     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2abea     F3 FC F5 FC 
2abee     FE FB 79 FB 
2abf2     62 FB 5F FB 
2abf6     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2abfa     6F FA AF F3 
2abfe     53 F2 12 F2 
2ac02     0F F2 15 F2 
2ac06     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2ac0a     2A F2 32 F2 
2ac0e     38 F2 9A FB 
2ac12     AF FB B1 FB 
2ac16     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2ac1a     B7 FB B8 FB 
2ac1e     BA FB BC FB 
2ac22     C1 FB 3B F8 
2ac26     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2ac2a     6E F2 6C F2 
2ac2e     74 F2 7A F2 
2ac32     81 F2 87 F2 
2ac36     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2ac3a     06 FC 09 FC 
2ac3e     0C FC 0E FC 
2ac42     0F FC 12 FC 
2ac46     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2ac4a     17 FC 1A FC 
2ac4e     B2 F6 7B F3 
2ac52     DD F2 C5 F2 
2ac56     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2ac5a     D4 F2 DB F2 
2ac5e     E0 F2 E8 F2 
2ac62     28 F8 60 FC 
2ac66     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2ac6a     64 FC 66 FC 
2ac6e     68 FC 6A FC 
2ac72     6D FC 52 FC 
2ac76     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2ac7a     78 F3 24 F3 
2ac7e     1A F3 1E F3 
2ac82     24 F3 2A F3 
2ac86     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2ac8a     3D F3 80 FA 
2ac8e     0C FB 0F FB 
2ac92     10 FB 14 FB 
2ac96     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2ac9a     1B FB 1D FB 
2ac9e     1F FB 92 FA 
2aca2     DE F4 AE F3 
2aca6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2acaa     79 F3 7E F3 
2acae     84 F3 8C F3 
2acb2     92 F3 97 F3 
2acb6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2acba     67 FB 69 FB 
2acbe     6B FB 6F FB 
2acc2     71 FB 72 FB 
2acc6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2acca     E3 F8 BA F4 
2acce     EE F3 CC F3 
2acd2     CA F3 CF F3 
2acd6     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2acda     E2 F3 E8 F3 
2acde     ED F3 B7 FB 
2ace2     BC FB BE FB 
2ace6     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2acea     C4 FB C6 FB 
2acee     C8 FB C9 FB 
2acf2     CC FB 8F F7 
2acf6     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2acfa     1E F4 1E F4 
2acfe     24 F4 2A F4 
2ad02     30 F4 38 F4 
2ad06     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2ad0a     AD FA B1 FA 
2ad0e     B4 FA B6 FA 
2ad12     BA FA BB FA 
2ad16     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2ad1a     C2 FA C6 FA 
2ad1e     55 F6 C6 F4 
2ad22     7D F4 72 F4 
2ad26     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2ad2a     83 F4 89 F4 
2ad2e     8F F4 94 F4 
2ad32     66 FA 03 FB 
2ad36     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2ad3a     0A FB 0E FB 
2ad3e     10 FB 11 FB 
2ad42     16 FB 18 FB 
2ad46     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2ad4a     F9 F4 CA F4 
2ad4e     C5 F4 CB F4 
2ad52     D1 F4 D7 F4 
2ad56     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2ad5a     E8 F4 3F FB 
2ad5e     56 FB 58 FB 
2ad62     5A FB 5E FB 
2ad66     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2ad6a     64 FB 64 FB 
2ad6e     69 FB 99 F9 
2ad72     E9 F5 33 F5 
2ad76     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2ad7a     1D F5 22 F5 
2ad7e     27 F5 2E F5 
2ad82     32 F5 37 F5 
2ad86     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2ad8a     BC FA BC FA 
2ad8e     C1 FA C2 FA 
2ad92     C4 FA C8 FA 
2ad96     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2ad9a     F9 F7 DB F5 
2ad9e     78 F5 69 F5 
2ada2     6A F5 70 F5 
2ada6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2adaa     7F F5 85 F5 
2adae     6E F7 06 FB 
2adb2     0A FB 0B FB 
2adb6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2adba     14 FB 15 FB 
2adbe     18 FB 1B FB 
2adc2     1D FB 70 F7 
2adc6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2adca     B6 F5 BB F5 
2adce     C0 F5 C6 F5 
2add2     CA F5 CF F5 
2add6     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2adda     54 FB 56 FB 
2adde     5A FB 5B FB 
2ade2     5E FB 5F FB 
2ade6     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2adea     67 FB 52 FB 
2adee     29 F7 33 F6 
2adf2     06 F6 02 F6 
2adf6     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2adfa     10 F6 16 F6 
2adfe     1A F6 1F F6 
2ae02     81 FB 9F FB 
2ae06     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2ae0a     51 FB F2 FA 
2ae0e     E3 FA E3 FA 
2ae12     E5 FA E9 FA 
2ae16     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2ae1a     64 F6 4D F6 
2ae1e     4D F6 53 F6 
2ae22     57 F6 5C F6 
2ae26     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2ae2a     6A F6 19 FB 
2ae2e     1E FB 22 FB 
2ae32     23 FB 24 FB 
2ae36     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2ae3a     2C FB 2E FB 
2ae3e     32 FB F0 F8 
2ae42     01 F7 A5 F6 
2ae46     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2ae4a     9F F6 A3 F6 
2ae4e     A6 F6 AC F6 
2ae52     B0 F6 EB F7 
2ae56     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2ae5a     68 FB 6C FB 
2ae5e     6E FB 71 FB 
2ae62     72 FB 74 FB 
2ae66     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2ae6a     71 F8 21 F7 
2ae6e     E5 F6 DD F6 
2ae72     E1 F6 E6 F6 
2ae76     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2ae7a     F5 F6 F7 F6 
2ae7e     F7 FA AB FB 
2ae82     AD FB AF FB 
2ae86     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2ae8a     B6 FB B9 FB 
2ae8e     BB FB BC FB 
2ae92     21 FB 07 F8 
2ae96     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2ae9a     22 F7 26 F7 
2ae9e     2B F7 2E F7 
2aea2     34 F7 38 F7 
2aea6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2aeaa     13 FB 16 FB 
2aeae     17 FB 1B FB 
2aeb2     1E FB 20 FB 
2aeb6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2aeba     26 FB 77 FA 
2aebe     F3 F7 7C F7 
2aec2     67 F7 6A F7 
2aec6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2aeca     74 F7 7A F7 
2aece     7E F7 82 F7 
2aed2     53 FB 5A FB 
2aed6     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2aeda     5F FB 63 FB 
2aede     65 FB 67 FB 
2aee2     69 FB 6A FB 
2aee6     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2aeea     B5 F7 A9 F7 
2aeee     AD F7 B0 F7 
2aef2     B5 F7 B8 F7 
2aef6     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2aefa     6E F8 99 FB 
2aefe     9C FB 9D FB 
2af02     9F FB A4 FB 
2af06     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2af0a     A9 FB AB FB 
2af0e     AD FB 46 F9 
2af12     26 F8 F0 F7 
2af16     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2af1a     F4 F7 F8 F7 
2af1e     FB F7 FF F7 
2af22     03 F8 65 FA 
2af26     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2af2a     2B FB 2F FB 
2af2e     30 FB 32 FB 
2af32     34 FB 38 FB 
2af36     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2af3a     E9 F8 4A F8 
2af3e     2E F8 2C F8 
2af42     2F F8 36 F8 
2af46     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2af4a     41 F8 44 F8 
2af4e     4A FB 67 FB 
2af52     68 FB 6B FB 
2af56     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2af5a     73 FB 74 FB 
2af5e     78 FB 7A FB 
2af62     14 FB E7 F8 
2af66     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2af6a     6D F8 70 F8 
2af6e     73 F8 78 F8 
2af72     7C F8 80 F8 
2af76     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2af7a     A6 FB A7 FB 
2af7e     A9 FB AC FB 
2af82     AF FB B1 FB 
2af86     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2af8a     B7 FB 73 FA 
2af8e     F8 F8 B4 F8 
2af92     A9 F8 AB F8 
2af96     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2af9a     B4 F8 B8 F8 
2af9e     BB F8 FA F8 
2afa2     64 FB 65 FB 
2afa6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2afaa     6D FB 6F FB 
2afae     70 FB 74 FB 
2afb2     77 FB 77 FB 
2afb6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2afba     E9 F8 E4 F8 
2afbe     E8 F8 EB F8 
2afc2     EE F8 F2 F8 
2afc6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2afca     B5 FA 9F FB 
2afce     A1 FB A4 FB 
2afd2     A5 FB A9 FB 
2afd6     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2afda     AE FB B1 FB 
2afde     B2 FB C7 F9 
2afe2     39 F9 22 F9 
2afe6     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2afea     26 F9 2A F9 
2afee     2E F9 32 F9 
2aff2     33 F9 BA FB 
2aff6     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2affa     DE FB E1 FB 
2affe     E2 FB E4 FB 
2b002     E5 FB E7 FB 
2b006     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2b00a     C5 F9 67 F9 
2b00e     57 F9 56 F9 
2b012     5B F9 5F F9 
2b016     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2b01a     68 F9 6C F9 
2b01e     0B FC 11 FC 
2b022     14 FC 15 FC 
2b026     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2b02a     B5 FB B5 FB 
2b02e     B6 FB B8 FB 
2b032     E9 FA C8 F9 
2b036     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2b03a     90 F9 94 F9 
2b03e     95 F9 99 F9 
2b042     9D F9 9F F9 
2b046     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2b04a     DE FB DF FB 
2b04e     E2 FB E4 FB 
2b052     E6 FB E8 FB 
2b056     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2b05a     EF FB AC FA 
2b05e     E9 F9 C7 F9 
2b062     C3 F9 C8 F9 
2b066     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2b06a     D0 F9 D4 F9 
2b06e     D6 F9 0E FB 
2b072     11 FC 13 FC 
2b076     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2b07a     19 FC 1B FC 
2b07e     1D FC 1E FC 
2b082     21 FC 22 FC 
2b086     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2b08a     F7 F9 F7 F9 
2b08e     FB F9 FE F9 
2b092     00 FA 03 FA 
2b096     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2b09a     1B FC 45 FC 
2b09e     46 FC 48 FC 
2b0a2     4A FC 4B FC 
2b0a6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2b0aa     52 FC 54 FC 
2b0ae     F3 FB 82 FA 
2b0b2     35 FA 28 FA 
2b0b6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2b0ba     31 FA 32 FA 
2b0be     37 FA 37 FA 
2b0c2     3C FA 00 FC 
2b0c6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2b0ca     09 FC 0B FC 
2b0ce     0F FC 12 FC 
2b0d2     12 FC 15 FC 
2b0d6     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2b0da     8D FA 60 FA 
2b0de     5B FA 5C FA 
2b0e2     60 FA 61 FA 
2b0e6     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2b0ea     6C FA 6D FA 
2b0ee     37 FC 3A FC 
2b0f2     3B FC 3D FC 
2b0f6     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2b0fa     43 FC 44 FC 
2b0fe     45 FC 47 FC 
2b102     51 FB AB FA 
2b106     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2b10a     8E FA 91 FA 
2b10e     93 FA 95 FA 
2b112     98 FA 9B FA 
2b116     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2b11a     68 FC 6A FC 
2b11e     6C FC 6E FC 
2b122     70 FC 72 FC 
2b126     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2b12a     76 FC 3B FB 
2b12e     D0 FA BB FA 
2b132     B9 FA BD FA 
2b136     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2b13a     C4 FA C6 FA 
2b13e     CA FA 13 FC 
2b142     3A FC 3A FC 
2b146     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2b14a     41 FC 43 FC 
2b14e     44 FC 47 FC 
2b152     48 FC 3C FC 
2b156     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2b15a     E6 FA E8 FA 
2b15e     EB FA EE FA 
2b162     F0 FA F2 FA 
2b166     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2b16a     61 FC 66 FC 
2b16e     68 FC 6B FC 
2b172     6C FC 6E FC 
2b176     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2b17a     73 FC 75 FC 
2b17e     13 FC 3F FB 
2b182     17 FB 12 FB 
2b186     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2b18a     1A FB 1D FB 
2b18e     1F FB 20 FB 
2b192     23 FB 92 FC 
2b196     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2b19a     96 FC 97 FC 
2b19e     9A FC 9C FC 
2b1a2     9E FC 9F FC 
2b1a6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2b1aa     5A FB 41 FB 
2b1ae     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2b1b2     00 00 00 00 | zero2 long 0
2b1b6     01 00 00 00 
2b1ba     00 00 00 00 
2b1be     00 00 00 00 
2b1c2     00 00 00 00 | mouse  file "mouse2.def"
2b1c6     00 00 00 00 
2b1ca     00 00 00 00 
2b1ce     00 00 00 00 
2b1d2     00 00 00 00 | 	byte	$00[16]
2b1d6     01 01 00 00 
2b1da     00 00 00 00 
2b1de     00 00 00 00 
2b1e2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1e6     00 00 00 00 
2b1ea     00 00 00 00 
2b1ee     00 00 00 00 
2b1f2     00 00 00 00 | 	byte	$00[16]
2b1f6     01 0D 01 00 
2b1fa     00 00 00 00 
2b1fe     00 00 00 00 
2b202     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b206     00 00 00 00 
2b20a     00 00 00 00 
2b20e     00 00 00 00 
2b212     00 00 00 00 | 	byte	$00[16]
2b216     01 0D 0D 01 
2b21a     00 00 00 00 
2b21e     00 00 00 00 
2b222     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b226     00 00 00 00 
2b22a     00 00 00 00 
2b22e     00 00 00 00 
2b232     00 00 00 00 | 	byte	$00[16]
2b236     01 0D 0D 0D 
2b23a     01 00 00 00 
2b23e     00 00 00 00 
2b242     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b246     00 00 00 00 
2b24a     00 00 00 00 
2b24e     00 00 00 00 
2b252     00 00 00 00 | 	byte	$00[16]
2b256     01 0D 0D 0D 
2b25a     0D 01 00 00 
2b25e     00 00 00 00 
2b262     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b266     00 00 00 00 
2b26a     00 00 00 00 
2b26e     00 00 00 00 
2b272     00 00 00 00 | 	byte	$00[16]
2b276     01 0D 0D 0D 
2b27a     0D 0D 01 00 
2b27e     00 00 00 00 
2b282     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b286     00 00 00 00 
2b28a     00 00 00 00 
2b28e     00 00 00 00 
2b292     00 00 00 00 | 	byte	$00[16]
2b296     01 0D 0D 0D 
2b29a     0D 0D 0D 01 
2b29e     00 00 00 00 
2b2a2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2b2a6     00 00 00 00 
2b2aa     00 00 00 00 
2b2ae     00 00 00 00 
2b2b2     00 00 00 00 | 	byte	$00[16]
2b2b6     01 0D 0D 0D 
2b2ba     0D 0D 0D 0C 
2b2be     01 00 00 00 
2b2c2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2b2c6     00 00 00 00 
2b2ca     00 00 00 00 
2b2ce     00 00 00 00 
2b2d2     00 00 00 00 | 	byte	$00[16]
2b2d6     01 0D 0D 0D 
2b2da     0D 0D 0D 0D 
2b2de     0C 01 00 00 
2b2e2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2b2e6     00 00 00 00 
2b2ea     00 00 00 00 
2b2ee     00 00 00 00 
2b2f2     00 00 00 00 | 	byte	$00[16]
2b2f6     01 0D 0D 0D 
2b2fa     0D 0D 0D 0D 
2b2fe     0D 0C 01 00 
2b302     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2b306     00 00 00 00 
2b30a     00 00 00 00 
2b30e     00 00 00 00 
2b312     00 00 00 00 | 	byte	$00[16]
2b316     01 0D 0D 0D 
2b31a     0D 0D 0D 0D 
2b31e     0D 0D 0B 01 
2b322     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2b326     00 00 00 00 
2b32a     00 00 00 00 
2b32e     00 00 00 00 
2b332     00 00 00 00 | 	byte	$00[16]
2b336     01 0D 0D 0D 
2b33a     0C 0D 0D 03 
2b33e     01 01 01 01 
2b342     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2b346     00 00 00 00 
2b34a     00 00 00 00 
2b34e     00 00 00 00 
2b352     00 00 00 00 | 	byte	$00[16]
2b356     01 0D 0D 0C 
2b35a     01 09 0D 03 
2b35e     00 00 00 00 
2b362     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2b366     00 00 00 00 
2b36a     00 00 00 00 
2b36e     00 00 00 00 
2b372     00 00 00 00 | 	byte	$00[16]
2b376     01 0D 0C 01 
2b37a     00 01 0D 0B 
2b37e     01 00 00 00 
2b382     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2b386     00 00 00 00 
2b38a     00 00 00 00 
2b38e     00 00 00 00 
2b392     00 00 00 00 | 	byte	$00[16]
2b396     01 0C 01 00 
2b39a     00 01 0A 0D 
2b39e     01 00 00 00 
2b3a2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2b3a6     00 00 00 00 
2b3aa     00 00 00 00 
2b3ae     00 00 00 00 
2b3b2     00 00 00 00 | 	byte	$00[16]
2b3b6     01 01 00 00 
2b3ba     00 00 01 0D 
2b3be     0B 01 00 00 
2b3c2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2b3c6     00 00 00 00 
2b3ca     00 00 00 00 
2b3ce     00 00 00 00 
2b3d2     00 00 00 00 
2b3d6     00 00 00 00 
2b3da     00 00       | 	byte	$00[22]
2b3dc     01 0B 0D 01 
2b3e0     00 00 00 00 
2b3e4     00 00 00 00 
2b3e8     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b3ec     00 00 00 00 
2b3f0     00 00 00 00 
2b3f4     00 00 00 00 
2b3f8     00 00 00 00 
2b3fc     00          | 	byte	$00[17]
2b3fd     01 01 00 00 
2b401     00 00 00 00 
2b405     00 00 00 00 
2b409     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b40d     00 00 00 00 
      ...             
2b5b1     00 00 00 00 
2b5b5     00          | 	byte	$00[425]
2b5b6                 | 
2b5b6     00 00       |              	org
2b5b8 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2b5bc 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2b5c0 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2b5c4 003             | 
2b5c4 003 00 30 04 F6 |                 mov     psramaddr,#0
2b5c8 004             | 
2b5c8 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2b5cc 005 20 00 00 FF 
2b5d0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2b5d4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2b5d8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2b5dc 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2b5e0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2b5e4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2b5e8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2b5ec 00d             | 
2b5ec 00d 20 00 00 FF 
2b5f0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2b5f4 00f E0 03 00 FF 
2b5f8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2b5fc 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2b600 012             | 
2b600 012             |                 
2b600 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2b604 013             |     
2b604 013 01 2C 60 FD |                 cogid 	t11				' get id
2b608 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2b60c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2b610 016             | 
2b610 016 00 00 00 00 | t11 		long 	0
2b614 017 00 FF 07 00 | mailbox 	long 	$7FF00
2b618 018 00 00 00 00 | psramaddr 	long 	0
2b61c 019 00 00 00 00 | pslockval	long 	0
2b620 01a 00 00 00 00 | cmd             long    0
2b624 01b 00 00 00 00 | buf1            long    0
2b628 01c 00 40 00 00 | buf2            long    16384
2b62c 01d 30 B6 02 00 | 	long	@@@_dat_ + 8496
2b630 01e 50 32 20 52 
2b634 01f 65 74 72 6F 
2b638 020 6D 61 63 68 
2b63c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2b640 022 42 41 53 49 
2b644 023 43 20 76 65 
2b648 024 72 73 69 6F 
2b64c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2b650 026 32 35 00 00 | 	byte	$32, $35, $00, $00
2b654 027             | 	alignl
2b654 027             | _hg010b_spin2_dat_
2b654 027             | 
2b654 027 00 00 00 00 
2b658 028 00 00 00 00 
2b65c 029 00 00 00 00 
2b660 02a 00 00 00 00 
2b664 02b 00 00 00    | vga_font       file "vgafont.def"
2b667 02b 7E 81 A5 81 
2b66b 02c 81 BD 99 81 
2b66f 02d 81 7E 00 00 
2b673 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2b677 02f 7E FF DB FF 
2b67b 030 FF C3 E7 FF 
2b67f 031 FF 7E 00 00 
2b683 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2b687 033 00 36 7F 7F 
2b68b 034 7F 7F 3E 1C 
2b68f 035 08 00 00 00 
2b693 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2b697 037 00 08 1C 3E 
2b69b 038 7F 3E 1C 08 
2b69f 039 00 00 00 00 
2b6a3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2b6a7 03b 18 3C 3C E7 
2b6ab 03c E7 E7 18 18 
2b6af 03d 3C 00 00 00 
2b6b3 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2b6b7 03f 18 3C 7E FF 
2b6bb 040 FF 7E 18 18 
2b6bf 041 3C 00 00 00 
2b6c3 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2b6c7 043 00 00 00 18 
2b6cb 044 3C 3C 18 00 
2b6cf 045 00 00 00 00 
2b6d3 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2b6d7 047 FF FF FF E7 
2b6db 048 C3 C3 E7 FF 
2b6df 049 FF FF FF FF 
2b6e3 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b6e7 04b 00 00 3C 66 
2b6eb 04c 42 42 66 3C 
2b6ef 04d 00 00 00 00 
2b6f3 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2b6f7 04f FF FF C3 99 
2b6fb 050 BD BD 99 C3 
2b6ff 051 FF FF FF FF 
2b703 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b707 053 78 70 58 4C 
2b70b 054 1E 33 33 33 
2b70f 055 33 1E 00 00 
2b713 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2b717 057 3C 66 66 66 
2b71b 058 66 3C 18 7E 
2b71f 059 18 18 00 00 
2b723 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2b727 05b FC CC FC 0C 
2b72b 05c 0C 0C 0C 0E 
2b72f 05d 0F 07 00 00 
2b733 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2b737 05f FE C6 FE C6 
2b73b 060 C6 C6 C6 E6 
2b73f 061 E7 67 03 00 
2b743 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2b747 063 18 18 DB 3C 
2b74b 064 E7 3C DB 18 
2b74f 065 18 00 00 00 
2b753 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2b757 067 03 07 0F 1F 
2b75b 068 7F 1F 0F 07 
2b75f 069 03 01 00 00 
2b763 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2b767 06b 60 70 78 7C 
2b76b 06c 7F 7C 78 70 
2b76f 06d 60 40 00 00 
2b773 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2b777 06f 18 3C 7E 18 
2b77b 070 18 18 7E 3C 
2b77f 071 18 00 00 00 
2b783 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2b787 073 66 66 66 66 
2b78b 074 66 66 66    | 	byte	$66[7]
2b78e 075 00 66 66 00 
2b792 076 00 00 00 00 
2b796 077 00 FE DB DB 
2b79a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2b79e 079 D8 D8 D8 00 
2b7a2 07a 00 00 00 3E 
2b7a6 07b 63 06 1C 36 
2b7aa 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2b7ae 07d 30 63 3E 00 
2b7b2 07e 00 00 00 00 
2b7b6 07f 00 00 00 00 
2b7ba 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b7be 081 7F 7F 7F 00 
2b7c2 082 00 00 00 00 
2b7c6 083 00 18 3C 7E 
2b7ca 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2b7ce 085 3C 18 7E 00 
2b7d2 086 00 00 00 00 
2b7d6 087 00 18 3C 7E 
2b7da 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2b7de 089 18 18 18 00 
2b7e2 08a 00 00 00 00 
2b7e6 08b 00 18 18 18 
2b7ea 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b7ee 08d 7E 3C 18 00 
2b7f2 08e 00 00 00 00 
2b7f6 08f 00 00 00 18 
2b7fa 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2b7fe 091 00 00 00 00 
2b802 092 00 00 00 00 
2b806 093 00 00 00    | 	byte	$00[11]
2b809 094 0C 06 7F 06 
2b80d 095 0C 00 00 00 
2b811 096 00 00 00 00 
2b815 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b819 098 00 03 03 03 
2b81d 099 7F 00 00 00 
2b821 09a 00 00 00 00 
2b825 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b829 09c 14 36 7F 36 
2b82d 09d 14 00 00 00 
2b831 09e 00 00 00 00 
2b835 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2b839 0a0 1C 1C 3E 3E 
2b83d 0a1 7F 7F 00 00 
2b841 0a2 00 00 00 00 
2b845 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b849 0a4 7F 3E 3E 1C 
2b84d 0a5 1C 08 00 00 
2b851 0a6 00 00 00 00 
2b855 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b859 0a8 00 00 00 00 
2b85d 0a9 00 00 00 00 
2b861 0aa 00 00 00 00 
2b865 0ab 00 00       | 	byte	$00[14]
2b867 0ab 18 3C 3C 3C 
2b86b 0ac 18 18 18 00 
2b86f 0ad 18 18 00 00 
2b873 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2b877 0af 66 24 00 00 
2b87b 0b0 00 00 00 00 
2b87f 0b1 00 00 00 00 
2b883 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b887 0b3 00 36 36 7F 
2b88b 0b4 36 36 36 7F 
2b88f 0b5 36 36 00 00 
2b893 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2b897 0b7 3E 63 43 03 
2b89b 0b8 3E 60 60 61 
2b89f 0b9 63 3E 18 18 
2b8a3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2b8a7 0bb 00 00 43 63 
2b8ab 0bc 30 18 0C 06 
2b8af 0bd 63 61 00 00 
2b8b3 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2b8b7 0bf 1C 36 36 1C 
2b8bb 0c0 6E 3B 33 33 
2b8bf 0c1 33 6E 00 00 
2b8c3 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2b8c7 0c3 0C 0C 0C 06 
2b8cb 0c4 00 00 00 00 
2b8cf 0c5 00 00 00 00 
2b8d3 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b8d7 0c7 30 18 0C 0C 
2b8db 0c8 0C 0C 0C 0C 
2b8df 0c9 18 30 00 00 
2b8e3 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2b8e7 0cb 0C 18 30 30 
2b8eb 0cc 30 30 30 30 
2b8ef 0cd 18 0C 00 00 
2b8f3 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2b8f7 0cf 00 00 00 66 
2b8fb 0d0 3C FF 3C 66 
2b8ff 0d1 00 00 00 00 
2b903 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2b907 0d3 00 00 00 18 
2b90b 0d4 18 7E 18 18 
2b90f 0d5 00 00 00 00 
2b913 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2b917 0d7 00 00 00 00 
2b91b 0d8 00 00 00 00 | 	byte	$00[8]
2b91f 0d9 18 18 18 0C 
2b923 0da 00 00 00 00 
2b927 0db 00 00 00 00 
2b92b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2b92f 0dd 00 00 00 00 
2b933 0de 00 00 00 00 
2b937 0df 00 00 00 00 
2b93b 0e0 00 00 00 00 | 	byte	$00[16]
2b93f 0e1 18 18 00 00 
2b943 0e2 00 00 00 00 
2b947 0e3 00 00 40 60 
2b94b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2b94f 0e5 03 01 00 00 
2b953 0e6 00 00 00 00 
2b957 0e7 1C 36 63 63 
2b95b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2b95f 0e9 36 1C 00 00 
2b963 0ea 00 00 00 00 
2b967 0eb 18 1C 1E 18 
2b96b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2b96f 0ed 18 7E 00 00 
2b973 0ee 00 00 00 00 
2b977 0ef 3E 63 60 30 
2b97b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2b97f 0f1 63 7F 00 00 
2b983 0f2 00 00 00 00 
2b987 0f3 3E 63 60 60 
2b98b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2b98f 0f5 63 3E 00 00 
2b993 0f6 00 00 00 00 
2b997 0f7 30 38 3C 36 
2b99b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2b99f 0f9 30 78 00 00 
2b9a3 0fa 00 00 00 00 
2b9a7 0fb 7F 03 03 03 
2b9ab 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2b9af 0fd 63 3E 00 00 
2b9b3 0fe 00 00 00 00 
2b9b7 0ff 1C 06 03 03 
2b9bb 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2b9bf 101 63 3E 00 00 
2b9c3 102 00 00 00 00 
2b9c7 103 7F 63 60 60 
2b9cb 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2b9cf 105 0C 0C 00 00 
2b9d3 106 00 00 00 00 
2b9d7 107 3E 63 63 63 
2b9db 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2b9df 109 63 3E 00 00 
2b9e3 10a 00 00 00 00 
2b9e7 10b 3E 63 63 63 
2b9eb 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2b9ef 10d 30 1E 00 00 
2b9f3 10e 00 00 00 00 
2b9f7 10f 00 00 00 18 
2b9fb 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b9ff 111 18 18 00 00 
2ba03 112 00 00 00 00 
2ba07 113 00 00 00 18 
2ba0b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2ba0f 115 18 18 0C 00 
2ba13 116 00 00 00 00 
2ba17 117 00 60 30 18 
2ba1b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2ba1f 119 30 60 00 00 
2ba23 11a 00 00 00 00 
2ba27 11b 00 00 00 7E 
2ba2b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2ba2f 11d 00 00 00 00 
2ba33 11e 00 00 00 00 
2ba37 11f 00          | 	byte	$00[9]
2ba38 120 06 0C 18 30 
2ba3c 121 60 30 18 0C 
2ba40 122 06 00 00 00 
2ba44 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2ba48 124 63 63 30 18 
2ba4c 125 18 18 00 18 
2ba50 126 18 00 00 00 
2ba54 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2ba58 128 3E 63 63 7B 
2ba5c 129 7B 7B 3B 03 
2ba60 12a 3E 00 00 00 
2ba64 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2ba68 12c 1C 36 63 63 
2ba6c 12d 7F 63 63 63 
2ba70 12e 63 00 00 00 
2ba74 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2ba78 130 66 66 66 3E 
2ba7c 131 66 66 66 66 
2ba80 132 3F 00 00 00 
2ba84 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2ba88 134 66 43 03 03 
2ba8c 135 03 03 43 66 
2ba90 136 3C 00 00 00 
2ba94 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2ba98 138 36 66 66 66 
2ba9c 139 66 66 66 36 
2baa0 13a 1F 00 00 00 
2baa4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2baa8 13c 66 46 16 1E 
2baac 13d 16 06 46 66 
2bab0 13e 7F 00 00 00 
2bab4 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2bab8 140 66 46 16 1E 
2babc 141 16 06 06 06 
2bac0 142 0F 00 00 00 
2bac4 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2bac8 144 66 43 03 03 
2bacc 145 7B 63 63 66 
2bad0 146 5C 00 00 00 
2bad4 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2bad8 148 63 63 63 7F 
2badc 149 63 63 63 63 
2bae0 14a 63 00 00 00 
2bae4 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2bae8 14c 18 18 18 18 
2baec 14d 18 18 18 18 | 	byte	$18[8]
2baf0 14e 3C 00 00 00 
2baf4 14f 00 00 00 78 
2baf8 150 30 30 30 30 
2bafc 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2bb00 152 1E 00 00 00 
2bb04 153 00 00 00 67 
2bb08 154 66 66 36 1E 
2bb0c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2bb10 156 67 00 00 00 
2bb14 157 00 00 00 0F 
2bb18 158 06 06 06 06 
2bb1c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2bb20 15a 7F 00 00 00 
2bb24 15b 00 00 00 63 
2bb28 15c 77 7F 7F 6B 
2bb2c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2bb30 15e 63 00 00 00 
2bb34 15f 00 00 00 63 
2bb38 160 67 6F 7F 7B 
2bb3c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2bb40 162 63 00 00 00 
2bb44 163 00 00 00 3E 
2bb48 164 63 63 63 63 
2bb4c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2bb50 166 3E 00 00 00 
2bb54 167 00 00 00 3F 
2bb58 168 66 66 66 3E 
2bb5c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2bb60 16a 0F 00 00 00 
2bb64 16b 00 00 00 3E 
2bb68 16c 63 63 63 63 
2bb6c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2bb70 16e 3E 30 70 00 
2bb74 16f 00 00 00 3F 
2bb78 170 66 66 66 3E 
2bb7c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2bb80 172 67 00 00 00 
2bb84 173 00 00 00 3E 
2bb88 174 63 63 06 1C 
2bb8c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2bb90 176 3E 00 00 00 
2bb94 177 00 00 00 7E 
2bb98 178 7E 5A 18 18 
2bb9c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2bba0 17a 3C 00 00 00 
2bba4 17b 00 00 00 63 
2bba8 17c 63 63 63 63 
2bbac 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2bbb0 17e 3E 00 00 00 
2bbb4 17f 00 00 00 63 
2bbb8 180 63 63 63 63 
2bbbc 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2bbc0 182 08 00 00 00 
2bbc4 183 00 00 00 63 
2bbc8 184 63 63 63 6B 
2bbcc 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2bbd0 186 36 00 00 00 
2bbd4 187 00 00 00 63 
2bbd8 188 63 36 3E 1C 
2bbdc 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2bbe0 18a 63 00 00 00 
2bbe4 18b 00 00 00 66 
2bbe8 18c 66 66 66 3C 
2bbec 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2bbf0 18e 3C 00 00 00 
2bbf4 18f 00 00 00 7F 
2bbf8 190 63 61 30 18 
2bbfc 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2bc00 192 7F 00 00 00 
2bc04 193 00 00 00 3C 
2bc08 194 0C 0C 0C 0C 
2bc0c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2bc10 196 3C 00 00 00 
2bc14 197 00 00 00 00 
2bc18 198 01 03 07 0E 
2bc1c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2bc20 19a 40 00 00 00 
2bc24 19b 00 00 00 3C 
2bc28 19c 30 30 30 30 
2bc2c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2bc30 19e 3C 00 00 00 
2bc34 19f 1C 36 00 00 
2bc38 1a0 00 00 00 00 
2bc3c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc40 1a2 00 00 00 00 
2bc44 1a3 00 00 00 00 
2bc48 1a4 00 00 00 00 
2bc4c 1a5 00 00 00 00 
2bc50 1a6 00          | 	byte	$00[17]
2bc51 1a6 FF 00 00 0C 
2bc55 1a7 18 00 00 00 
2bc59 1a8 00 00 00 00 
2bc5d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc61 1aa 00 00 00 00 
2bc65 1ab 00 00 00 00 
2bc69 1ac 00          | 	byte	$00[9]
2bc6a 1ac 1E 30 3E 33 
2bc6e 1ad 33 33 6E 00 
2bc72 1ae 00 00 00 00 
2bc76 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2bc7a 1b0 1E 36 66 66 
2bc7e 1b1 66 66 3E 00 
2bc82 1b2 00 00 00 00 
2bc86 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc8a 1b4 3E 63 03 03 
2bc8e 1b5 03 63 3E 00 
2bc92 1b6 00 00 00 00 
2bc96 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2bc9a 1b8 3C 36 33 33 
2bc9e 1b9 33 33 6E 00 
2bca2 1ba 00 00 00 00 
2bca6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bcaa 1bc 3E 63 7F 03 
2bcae 1bd 03 63 3E 00 
2bcb2 1be 00 00 00 00 
2bcb6 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2bcba 1c0 0C 1E 0C 0C 
2bcbe 1c1 0C 0C 1E 00 
2bcc2 1c2 00 00 00 00 
2bcc6 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bcca 1c4 6E 33 33 33 
2bcce 1c5 33 33 3E 30 
2bcd2 1c6 33 1E 00 00 
2bcd6 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2bcda 1c8 36 6E 66 66 
2bcde 1c9 66 66 67 00 
2bce2 1ca 00 00 00 00 
2bce6 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2bcea 1cc 1C 18 18 18 
2bcee 1cd 18 18 3C 00 
2bcf2 1ce 00 00 00 00 
2bcf6 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2bcfa 1d0 70 60 60 60 
2bcfe 1d1 60 60 60 66 
2bd02 1d2 66 3C 00 00 
2bd06 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2bd0a 1d4 66 36 1E 1E 
2bd0e 1d5 36 66 67 00 
2bd12 1d6 00 00 00 00 
2bd16 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2bd1a 1d8 18 18 18 18 
2bd1e 1d9 18 18       | 	byte	$18[6]
2bd20 1da 3C 00 00 00 
2bd24 1db 00 00 00 00 
2bd28 1dc 00 00 37 7F 
2bd2c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2bd30 1de 63 00 00 00 
2bd34 1df 00 00 00 00 
2bd38 1e0 00 00 3B 66 
2bd3c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2bd40 1e2 66 00 00 00 
2bd44 1e3 00 00 00 00 
2bd48 1e4 00 00 3E 63 
2bd4c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2bd50 1e6 3E 00 00 00 
2bd54 1e7 00 00 00 00 
2bd58 1e8 00 00 3B 66 
2bd5c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2bd60 1ea 3E 06 06 0F 
2bd64 1eb 00 00 00 00 
2bd68 1ec 00 00 6E 33 
2bd6c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2bd70 1ee 3E 30 30 78 
2bd74 1ef 00 00 00 00 
2bd78 1f0 00 00 3B 6E 
2bd7c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2bd80 1f2 0F 00 00 00 
2bd84 1f3 00 00 00 00 
2bd88 1f4 00 00 3E 63 
2bd8c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2bd90 1f6 3E 00 00 00 
2bd94 1f7 00 00 00 08 
2bd98 1f8 0C 0C 3F 0C 
2bd9c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2bda0 1fa 38 00 00 00 
2bda4 1fb 00 00 00 00 
2bda8 1fc 00 00 33 33 
2bdac 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2bdb0 1fe 6E 00 00 00 
2bdb4 1ff 00 00 00 00 
2bdb8 200 00 00 63 63 
2bdbc 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2bdc0 202 1C 00 00 00 
2bdc4 203 00 00 00 00 
2bdc8 204 00 00 63 63 
2bdcc 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2bdd0 206 36 00 00 00 
2bdd4 207 00 00 00 00 
2bdd8 208 00 00 63 36 
2bddc 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2bde0 20a 63 00 00 00 
2bde4 20b 00 00 00 00 
2bde8 20c 00 00 63 63 
2bdec 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2bdf0 20e 7E 60 30 1F 
2bdf4 20f 00 00 00 00 
2bdf8 210 00 00 7F 33 
2bdfc 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2be00 212 7F 00 00 00 
2be04 213 00 00 00 70 
2be08 214 18 18 18 0E 
2be0c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2be10 216 70 00 00 00 
2be14 217 00 00 00 18 
2be18 218 18 18 18 18 
2be1c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2be20 21a 18 00 00 00 
2be24 21b 00 00 00 0E 
2be28 21c 18 18 18 70 
2be2c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2be30 21e 0E 00 00 00 
2be34 21f 6E 3B 00 00 
2be38 220 00 00 00 00 
2be3c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2be40 222 00 00 00 00 
2be44 223 00 00 00 00 
2be48 224 00 00       | 	byte	$00[10]
2be4a 224 08 1C 36 63 
2be4e 225 63 63 7F 00 
2be52 226 00 00 00 00 
2be56 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2be5a 228 03 03 03 03 
2be5e 229 43 66 3C 18 
2be62 22a 30 1E 00 00 
2be66 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2be6a 22c 33 33 33 33 
2be6e 22d 33 33       | 	byte	$33[6]
2be70 22e 6E 00 00 00 
2be74 22f 00 00 60 30 
2be78 230 18 00 3E 63 
2be7c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2be80 232 3E 00 00 00 
2be84 233 00 00 08 1C 
2be88 234 36 00 1E 30 
2be8c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2be90 236 6E 00 00 00 
2be94 237 00 00 00 00 
2be98 238 33 00 1E 30 
2be9c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2bea0 23a 6E 00 00 00 
2bea4 23b 00 00 1C 36 
2bea8 23c 1C 00 33 33 
2beac 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2beb0 23e 6E 00 00 00 
2beb4 23f 00 00 60 30 
2beb8 240 18 00 3E 63 
2bebc 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2bec0 242 3E 00 00 00 
2bec4 243 00 00 00 00 
2bec8 244 00 00 3E 63 
2becc 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2bed0 246 3E 18 30 1E 
2bed4 247 00 00 00 1C 
2bed8 248 58 78 38 18 
2bedc 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2bee0 24a 3C 00 00 00 
2bee4 24b 00 00 00 00 
2bee8 24c 63 00 3E 63 
2beec 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2bef0 24e 3E 00 00 00 
2bef4 24f 66 33 00 3E 
2bef8 250 63 63 63 63 
2befc 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2bf00 252 3E 00 00 00 
2bf04 253 00 00 CC 66 
2bf08 254 33 00 3E 63 
2bf0c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2bf10 256 3E 00 00 00 
2bf14 257 00 00 18 3C 
2bf18 258 66 00 1C 18 
2bf1c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2bf20 25a 3C 00 00 00 
2bf24 25b 30 18 00 7F 
2bf28 25c 63 61 30 18 
2bf2c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2bf30 25e 7F 00 00 00 
2bf34 25f 00 63 00 08 
2bf38 260 1C 36 63 63 
2bf3c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2bf40 262 63 00 00 00 
2bf44 263 30 18 00 3C 
2bf48 264 66 43 03 03 
2bf4c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2bf50 266 3C 00 00 00 
2bf54 267 30 18 00 7F 
2bf58 268 66 46 16 1E 
2bf5c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2bf60 26a 7F 00 00 00 
2bf64 26b 0C 06 00 0F 
2bf68 26c 06 06 06 06 
2bf6c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2bf70 26e 7F 00 00 00 
2bf74 26f 30 18 00 1C 
2bf78 270 18 18 18 18 
2bf7c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2bf80 272 3C 00 00 00 
2bf84 273 00 00 08 1C 
2bf88 274 36 00 3E 63 
2bf8c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2bf90 276 3E 00 00 00 
2bf94 277 00 00 00 00 
2bf98 278 63 00 3E 63 
2bf9c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2bfa0 27a 3E 00 00 00 
2bfa4 27b 00 00 00 6F 
2bfa8 27c 46 26 06 06 
2bfac 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2bfb0 27e 7F 00 00 00 
2bfb4 27f 00 00 00 6E 
2bfb8 280 4C 2C 0C 0C 
2bfbc 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2bfc0 282 1E 00 00 00 
2bfc4 283 30 18 00 3E 
2bfc8 284 63 63 06 1C 
2bfcc 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2bfd0 286 3E 00 00 00 
2bfd4 287 00 00 60 30 
2bfd8 288 18 00 3E 63 
2bfdc 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2bfe0 28a 3E 00 00 00 
2bfe4 28b 00 63 00 3E 
2bfe8 28c 63 63 63 63 
2bfec 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2bff0 28e 3E 00 00 00 
2bff4 28f 00 63 00 63 
2bff8 290 63 63 63 63 
2bffc 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2c000 292 3E 00 00 00 
2c004 293 6C 38 00 7E 
2c008 294 7E 5A 18 18 
2c00c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2c010 296 3C 00 00 00 
2c014 297 00 00 60 48 
2c018 298 2C 0C 3F 0C 
2c01c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2c020 29a 38 00 00 00 
2c024 29b 00 00 00 0F 
2c028 29c 26 36 1E 0E 
2c02c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2c030 29e 7F 00 00 00 
2c034 29f 00 00 00 00 
2c038 2a0 00 63 36 1C 
2c03c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2c040 2a2 00 00 00 00 
2c044 2a3 00 00       | 	byte	$00[6]
2c046 2a3 36 1C 08 00 
2c04a 2a4 3E 63 03 03 
2c04e 2a5 03 63 3E 00 
2c052 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2c056 2a7 30 18 0C 00 
2c05a 2a8 1E 30 3E 33 
2c05e 2a9 33 33 6E 00 
2c062 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2c066 2ab 60 30 18 00 
2c06a 2ac 1C 18 18 18 
2c06e 2ad 18 18 3C 00 
2c072 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2c076 2af 60 30 18 00 
2c07a 2b0 3E 63 63 63 
2c07e 2b1 63 63 3E 00 
2c082 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2c086 2b3 30 18 0C 00 
2c08a 2b4 33 33 33 33 
2c08e 2b5 33 33 6E 00 
2c092 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2c096 2b7 00 08 1C 36 
2c09a 2b8 63 63 7F 63 
2c09e 2b9 63 63 63 18 
2c0a2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2c0a6 2bb 00 00 00 00 
2c0aa 2bc 1E 30 3E 33 
2c0ae 2bd 33 33 6E 18 
2c0b2 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2c0b6 2bf 00 7F 63 61 
2c0ba 2c0 30 18 0C 06 
2c0be 2c1 43 63 7F 00 
2c0c2 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2c0c6 2c3 36 1C 08 00 
2c0ca 2c4 7F 33 18 0C 
2c0ce 2c5 06 63 7F 00 
2c0d2 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2c0d6 2c7 00 7F 66 46 
2c0da 2c8 16 1E 16 06 
2c0de 2c9 46 66 7F 18 
2c0e2 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2c0e6 2cb 00 00 00 00 
2c0ea 2cc 3E 63 7F 03 
2c0ee 2cd 03 63 3E 18 
2c0f2 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2c0f6 2cf 00 3C 66 03 
2c0fa 2d0 1F 03 0F 03 
2c0fe 2d1 03 66 3C 00 
2c102 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2c106 2d3 60 30 18 00 
2c10a 2d4 7F 33 18 0C 
2c10e 2d5 06 63 7F 00 
2c112 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2c116 2d7 00 3C 66 43 
2c11a 2d8 03 03 03 03 
2c11e 2d9 43 66 3C 00 
2c122 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2c126 2db 00 00 00 00 
2c12a 2dc 3E 63 06 1C 
2c12e 2dd 30 63 3E 18 
2c132 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2c136 2df 00 00 00 00 
2c13a 2e0 00 00       | 	byte	$00[6]
2c13c 2e1 6C 36 1B 36 
2c140 2e2 6C 00 00 00 
2c144 2e3 00 00 00 00 
2c148 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c14c 2e5 1B 36 6C 36 
2c150 2e6 1B 00 00 00 
2c154 2e7 88 22 88 22 
2c158 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2c15c 2e9 88 22 88 22 
2c160 2ea 88 22 88 22 
2c164 2eb AA 55 AA 55 
2c168 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2c16c 2ed AA 55 AA 55 
2c170 2ee AA 55 AA 55 
2c174 2ef BB EE BB EE 
2c178 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2c17c 2f1 BB EE BB EE 
2c180 2f2 BB EE BB EE 
2c184 2f3 18 18 18 18 
2c188 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2c18c 2f5 18 18 18 18 
2c190 2f6 18 18 18 18 
2c194 2f7 18 18 18 18 
2c198 2f8 18 18 18    | 	byte	$18[15]
2c19b 2f8 1F 18 18 18 
2c19f 2f9 18 18 18 18 
2c1a3 2fa 18 30 18 00 
2c1a7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2c1ab 2fc 63 7F 63 63 
2c1af 2fd 63 63 00 00 
2c1b3 2fe 00 1C 36 00 
2c1b7 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2c1bb 300 63 7F 63 63 
2c1bf 301 63 63 00 00 
2c1c3 302 00 36 1C 00 
2c1c7 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2c1cb 304 1E 16 06 46 
2c1cf 305 66 7F 00 00 
2c1d3 306 00 00 00 00 
2c1d7 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2c1db 308 1C 30 60 63 
2c1df 309 63 3E 18 30 
2c1e3 30a 1E 6C 6C 6C 
2c1e7 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2c1eb 30c 6F 6C 6C 6C 
2c1ef 30d 6C 6C 6C 6C 
2c1f3 30e 6C 6C 6C 6C 
2c1f7 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2c1fb 310 6C 6C 6C 6C 
2c1ff 311 6C 6C 6C 6C 
2c203 312 6C          | 	byte	$6c[9]
2c204 313 00 00 00 00 
2c208 314 00          | 	byte	$00[5]
2c209 314 7F 60 6F 6C 
2c20d 315 6C 6C 6C 6C 
2c211 316 6C 6C 6C 6C 
2c215 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2c219 318 6F 60 7F 00 
2c21d 319 00 00 00 00 
2c221 31a 00 00 00 18 
2c225 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2c229 31c 61 30 18 0C 
2c22d 31d 06 43 63 7F 
2c231 31e 00 00 00 00 
2c235 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2c239 320 00 7F 33 18 
2c23d 321 0C 06 63 7F 
2c241 322 00 00 00 00 
2c245 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2c249 324 00 00 1F 18 
2c24d 325 18 18 18 18 
2c251 326 18 18 18 18 
2c255 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c259 328 18 18 F8 00 
2c25d 329 00 00 00 00 
2c261 32a 00 00 00 18 
2c265 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2c269 32c 18 18 FF 00 
2c26d 32d 00 00 00 00 
2c271 32e 00 00 00 00 
2c275 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c279 330 00 00 FF 18 
2c27d 331 18 18 18 18 
2c281 332 18 18 18 18 
2c285 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c289 334 18 18 F8 18 
2c28d 335 18 18 18 18 
2c291 336 18 18 18 00 
2c295 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2c299 338 00 00 FF 00 
2c29d 339 00 00 00 00 
2c2a1 33a 00 00 00 18 
2c2a5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2c2a9 33c 18 18 FF 18 
2c2ad 33d 18 18 18 18 
2c2b1 33e 18 18 18 63 
2c2b5 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2c2b9 340 36 63 63 7F 
2c2bd 341 63 63 63 63 
2c2c1 342 00 00 00 00 
2c2c5 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2c2c9 344 00 1E 30 3E 
2c2cd 345 33 33 33 6E 
2c2d1 346 00 00 00 6C 
2c2d5 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2c2d9 348 EC 0C FC 00 
2c2dd 349 00 00 00 00 
2c2e1 34a 00 00 00 00 
2c2e5 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c2e9 34c FC 0C EC 6C 
2c2ed 34d 6C 6C 6C 6C 
2c2f1 34e 6C 6C 6C 6C 
2c2f5 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2c2f9 350 EF 00 FF 00 
2c2fd 351 00 00 00 00 
2c301 352 00 00 00 00 
2c305 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c309 354 FF 00 EF 6C 
2c30d 355 6C 6C 6C 6C 
2c311 356 6C 6C 6C 6C 
2c315 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2c319 358 EC 0C EC 6C 
2c31d 359 6C 6C 6C 6C 
2c321 35a 6C 6C 6C 00 
2c325 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2c329 35c FF 00 FF 00 
2c32d 35d 00 00 00 00 
2c331 35e 00 00 00 6C 
2c335 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2c339 360 EF 00 EF 6C 
2c33d 361 6C 6C 6C 6C 
2c341 362 6C 6C 6C 00 
2c345 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2c349 364 63 3E 63 63 
2c34d 365 63 63 3E 63 
2c351 366 00 00 00 00 
2c355 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2c359 368 30 3C 36 33 
2c35d 369 33 33 33 6E 
2c361 36a 00 00 00 00 
2c365 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2c369 36c 66 66 6F 66 
2c36d 36d 66 66 36 1F 
2c371 36e 00 00 00 36 
2c375 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2c379 370 66 66 66 66 
2c37d 371 66 66       | 	byte	$66[6]
2c37f 371 36 1F 00 00 
2c383 372 00 00 63 00 
2c387 373 7F 66 46 16 
2c38b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2c38f 375 66 7F 00 00 
2c393 376 00 6C 38 00 
2c397 377 38 30 30 3C 
2c39b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2c39f 379 33 6E 00 00 
2c3a3 37a 00 36 1C 00 
2c3a7 37b 63 67 6F 7F 
2c3ab 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2c3af 37d 63 63 00 00 
2c3b3 37e 00 30 18 00 
2c3b7 37f 3C 18 18 18 
2c3bb 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2c3bf 381 18 3C 00 00 
2c3c3 382 00 3C 66 00 
2c3c7 383 3C 18 18 18 
2c3cb 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2c3cf 385 18 3C 00 00 
2c3d3 386 00 00 00 36 
2c3d7 387 1C 08 00 3E 
2c3db 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2c3df 389 63 3E 00 00 
2c3e3 38a 00 18 18 18 
2c3e7 38b 18 18 18 18 
2c3eb 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2c3ef 38d 00 00 00 00 
2c3f3 38e 00 00 00 00 
2c3f7 38f 00 00 00 00 | 	byte	$00[12]
2c3fb 390 F8 18 18 18 
2c3ff 391 18 18 18 18 
2c403 392 18 FF FF FF 
2c407 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2c40b 394 FF FF FF FF 
2c40f 395 FF FF FF FF 
2c413 396 FF          | 	byte	$ff[9]
2c414 397 00 00 00 00 
2c418 398 00 00 00    | 	byte	$00[7]
2c41b 398 FF FF FF FF 
2c41f 399 FF FF FF FF 
2c423 39a FF          | 	byte	$ff[9]
2c424 39b 00 00 00 7E 
2c428 39c 7E 5A 18 18 
2c42c 39d 18 18 18 18 
2c430 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2c434 39f 1C 36 1C 63 
2c438 3a0 63 63 63 63 
2c43c 3a1 63 63 63 63 
2c440 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c444 3a3 FF FF FF FF 
2c448 3a4 FF FF FF    | 	byte	$ff[7]
2c44b 3a4 00 00 00 00 
2c44f 3a5 00 00 00 00 
2c453 3a6 00          | 	byte	$00[9]
2c454 3a7 30 18 00 3E 
2c458 3a8 63 63 63 63 
2c45c 3a9 63 63 63 63 
2c460 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c464 3ab 00 00 00 1E 
2c468 3ac 33 33 33 1B 
2c46c 3ad 33 63 63 63 
2c470 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2c474 3af 1C 36 00 3E 
2c478 3b0 63 63 63 63 
2c47c 3b1 63 63 63 63 
2c480 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c484 3b3 30 18 00 63 
2c488 3b4 67 6F 7F 7B 
2c48c 3b5 73 63 63 63 
2c490 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2c494 3b7 00 00 60 30 
2c498 3b8 18 00 3B 66 
2c49c 3b9 66 66 66 66 
2c4a0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2c4a4 3bb 00 00 36 1C 
2c4a8 3bc 08 00 3B 66 
2c4ac 3bd 66 66 66 66 
2c4b0 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2c4b4 3bf 36 1C 00 3E 
2c4b8 3c0 63 63 06 1C 
2c4bc 3c1 30 60 63 63 
2c4c0 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2c4c4 3c3 00 00 36 1C 
2c4c8 3c4 08 00 3E 63 
2c4cc 3c5 06 1C 30 63 
2c4d0 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2c4d4 3c7 30 18 00 3F 
2c4d8 3c8 66 66 66 3E 
2c4dc 3c9 36 66 66 66 
2c4e0 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2c4e4 3cb 30 18 00 63 
2c4e8 3cc 63 63 63 63 
2c4ec 3cd 63 63 63 63 
2c4f0 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c4f4 3cf 00 00 60 30 
2c4f8 3d0 18 00 3B 6E 
2c4fc 3d1 66 06 06 06 
2c500 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2c504 3d3 66 33 00 63 
2c508 3d4 63 63 63 63 
2c50c 3d5 63 63 63 63 
2c510 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c514 3d7 00 00 60 30 
2c518 3d8 18 00 63 63 
2c51c 3d9 63 63 63 63 
2c520 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2c524 3db 30 18 00 66 
2c528 3dc 66 66 66 3C 
2c52c 3dd 18 18 18 18 
2c530 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2c534 3df 00 00 00 08 
2c538 3e0 0C 0C 3F 0C 
2c53c 3e1 0C 0C 0C 6C 
2c540 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2c544 3e3 30 18 00 00 
2c548 3e4 00 00 00 00 
2c54c 3e5 00 00 00 00 
2c550 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c554 3e7 00 00 00 00 
2c558 3e8 00 00 00 00 | 	byte	$00[8]
2c55c 3e9 7F 00 00 00 
2c560 3ea 00 00 00 00 
2c564 3eb 66 33 00 00 
2c568 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2c56c 3ed 00 00 00 00 
2c570 3ee 00 00 00 00 
2c574 3ef 00 00 00 00 
2c578 3f0 00 00 00 00 
2c57c 3f1 00 00 00 00 
2c580 3f2 00          | 	byte	$00[21]
2c581 3f2 0C 06 3C 36 
2c585 3f3 1C 00 00 00 
2c589 3f4 00 00 00 00 
2c58d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c591 3f6 00 00 00 63 
2c595 3f7 3E 00 00 00 
2c599 3f8 00 00 00 00 
2c59d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c5a1 3fa 00 00 00 00 
2c5a5 3fb 3E 63 06 1C 
2c5a9 3fc 36 63 63 36 
2c5ad 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2c5b1 3fe 00 00 00 00 
2c5b5 3ff 00 00 00 00 | 	byte	$00[8]
2c5b9 400 18 00 7E 00 
2c5bd 401 18 00 00 00 
2c5c1 402 00 00 00 00 
2c5c5 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c5c9 404 00 00 00 00 
2c5cd 405 00 00 00 00 | 	byte	$00[8]
2c5d1 406 18 30 1E 00 
2c5d5 407 00 00 1C 36 
2c5d9 408 36 1C 00 00 
2c5dd 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2c5e1 40a 00 00 00 00 
2c5e5 40b 63 00 00 00 
2c5e9 40c 00 00 00 00 
2c5ed 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c5f1 40e 00 00 00 18 
2c5f5 40f 18 00 00 00 
2c5f9 410 00 00 00 00 
2c5fd 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c601 412 00 00 00 00 
2c605 413 00          | 	byte	$00[5]
2c606 413 CC 66 33 00 
2c60a 414 33 33 33 33 
2c60e 415 33 33 6E 00 
2c612 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2c616 417 00 3F 66 66 
2c61a 418 66 3E 36 66 
2c61e 419 66 66 6F 00 
2c622 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2c626 41b 36 1C 08 00 
2c62a 41c 3B 6E 66 06 
2c62e 41d 06 06 0F 00 
2c632 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2c636 41f 00 00 00 7E 
2c63a 420 7E 7E 7E 7E 
2c63e 421 7E 7E 00 00 
2c642 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2c646 423 00 00 00 00 
2c64a 424 00 00 00 00 
2c64e 425 00 00 00 00 
2c652 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c654 427             | 'vga_font       file "vgafont.def"
2c654 427 00 00 00 00 
      ...             
2c684 433 00 00 00 00 
2c688 434 00 00 00    | st_font        file "st4font.def"
2c68b 434 FF FF 00 00 
2c68f 435 00 00 00 00 
2c693 436 00 18 18 18 
2c697 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c69b 438 18 18 18 18 
2c69f 439 18 18 18 18 
2c6a3 43a 18          | 	byte	$18[9]
2c6a4 43b 00 00 00 00 
2c6a8 43c 00 00 00    | 	byte	$00[7]
2c6ab 43c FF FF 18 18 
2c6af 43d 18 18 18 18 
2c6b3 43e 18 18 18 18 
2c6b7 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c6bb 440 FF FF 00 00 
2c6bf 441 00 00 00 00 
2c6c3 442 00 18 18 18 
2c6c7 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c6cb 444 1F 1F 18 18 
2c6cf 445 18 18 18 18 
2c6d3 446 18 18 18 18 
2c6d7 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c6db 448 F8 F8 18 18 
2c6df 449 18 18 18 18 
2c6e3 44a 18 00 00 00 
2c6e7 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c6eb 44c 1F 1F 18 18 
2c6ef 44d 18 18 18 18 
2c6f3 44e 18 00 00 00 
2c6f7 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c6fb 450 F8 F8 18 18 
2c6ff 451 18 18 18 18 
2c703 452 18 18 18 18 
2c707 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c70b 454 1F 1F 00 00 
2c70f 455 00 00 00 00 
2c713 456 00 18 18 18 
2c717 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c71b 458 F8 F8 00 00 
2c71f 459 00 00 00 00 
2c723 45a 00 18 18 18 
2c727 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c72b 45c FF FF 18 18 
2c72f 45d 18 18 18 18 
2c733 45e 18 00 00 18 
2c737 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2c73b 460 66 7E 7E 66 
2c73f 461 66 66 66 30 
2c743 462 18 00 00 7E 
2c747 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2c74b 464 3E 06 06 06 
2c74f 465 06 7E 7E 18 
2c753 466 0C 30 18 3C 
2c757 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2c75b 468 06 06 06 66 
2c75f 469 66 7E 3C 00 
2c763 46a 00 30 18 66 
2c767 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2c76b 46c 7E 7E 76 76 
2c76f 46d 66 66 66 00 
2c773 46e 00 30 18 7C 
2c777 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2c77b 470 1C 38 70 60 
2c77f 471 60 7E 3E 00 
2c783 472 00 30 18 7E 
2c787 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2c78b 474 18 0C 0C 06 
2c78f 475 06 7E 7E 00 
2c793 476 00 18 18 00 
2c797 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2c79b 478 18 18 0C 0C 
2c79f 479 06 7E 7E 00 
2c7a3 47a 00 30 18 3C 
2c7a7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2c7ab 47c 66 66 66 66 
2c7af 47d 66          | 	byte	$66[5]
2c7b0 47e 7E 3C 00 00 
2c7b4 47f 00 00 06 06 
2c7b8 480 06 06 16 1E 
2c7bc 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2c7c0 482 7E 7E 00 00 
2c7c4 483 00 00 00 00 
2c7c8 484 00 3C 7C 60 
2c7cc 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2c7d0 486 7E 7C 30 18 
2c7d4 487 00 00 00 00 
2c7d8 488 00 3C 7E 66 
2c7dc 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2c7e0 48a 7E 7C 18 0C 
2c7e4 48b 00 00 30 18 
2c7e8 48c 00 3C 3E 06 
2c7ec 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2c7f0 48e 7E 7C 00 00 
2c7f4 48f 00 00 30 18 
2c7f8 490 00 3E 7E 66 
2c7fc 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2c800 492 66 66 00 00 
2c804 493 00 00 30 18 
2c808 494 00 7C 7E 06 
2c80c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2c810 496 7E 3E 00 00 
2c814 497 00 00 30 18 
2c818 498 00 7E 7E 30 
2c81c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c820 49a 7E 7E 00 00 
2c824 49b 00 00 18 18 
2c828 49c 00 7E 7E 30 
2c82c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c830 49e 7E 7E 00 00 
2c834 49f 00 00 30 18 
2c838 4a0 00 3C 7E 66 
2c83c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2c840 4a2 7E 3C 00 00 
2c844 4a3 00 00 1C 1C 
2c848 4a4 18 18 38 3C 
2c84c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2c850 4a6 3C 3C 00 00 
2c854 4a7 00 00 00 00 
2c858 4a8 00 00 00 00 
2c85c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c860 4aa 00 00 00 00 
2c864 4ab 00 00       | 	byte	$00[6]
2c866 4ab 18 18 18 18 
2c86a 4ac 18 18 18 18 | 	byte	$18[8]
2c86e 4ad 00 00 18 18 
2c872 4ae 00 00 00 00 
2c876 4af 66 66 66 66 
2c87a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2c87e 4b1 00 00 00 00 
2c882 4b2 00 00 00 00 
2c886 4b3 00          | 	byte	$00[9]
2c887 4b3 66 66 FF FF 
2c88b 4b4 66 66 FF FF 
2c88f 4b5 66 66 00 00 
2c893 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2c897 4b7 7C 7E 06 06 
2c89b 4b8 3E 7C 60 60 
2c89f 4b9 7E 3E 18 18 
2c8a3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2c8a7 4bb 66 30 30 18 
2c8ab 4bc 18 0C 0C 66 
2c8af 4bd 66 00 00 00 
2c8b3 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2c8b7 4bf 66 66 3C 1C 
2c8bb 4c0 1C FC FE 66 
2c8bf 4c1 66 FE FC 00 
2c8c3 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2c8c7 4c3 18 18 18 18 
2c8cb 4c4 00 00 00 00 
2c8cf 4c5 00 00 00 00 
2c8d3 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2c8d7 4c7 18 1C 0C 0C 
2c8db 4c8 0C 0C 0C 0C 
2c8df 4c9 1C 18 30 00 
2c8e3 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2c8e7 4cb 18 38 30 30 
2c8eb 4cc 30 30 30 30 
2c8ef 4cd 38 18 0C 00 
2c8f3 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2c8f7 4cf 66 66 3C 3C 
2c8fb 4d0 FF FF 3C 3C 
2c8ff 4d1 66 66 00 00 
2c903 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2c907 4d3 00 18 18 18 
2c90b 4d4 7E 7E 18 18 
2c90f 4d5 18 00 00 00 
2c913 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c917 4d7 00 00 00 00 
2c91b 4d8 00 00       | 	byte	$00[6]
2c91d 4d9 18 18 18 18 
2c921 4da 18          | 	byte	$18[5]
2c922 4da 0C 04 00 00 
2c926 4db 00 00 00 00 
2c92a 4dc 7E 7E 00 00 
2c92e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2c932 4de 00 00 00 00 
2c936 4df 00 00 00 00 
2c93a 4e0 00 00 00 00 
2c93e 4e1 00          | 	byte	$00[13]
2c93f 4e1 18 18 18 00 
2c943 4e2 00 00 00 60 
2c947 4e3 60 60 30 30 
2c94b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2c94f 4e5 06 06 06 00 
2c953 4e6 00 00 00 3C 
2c957 4e7 7E 66 66 66 
2c95b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2c95f 4e9 66 7E 3C 00 
2c963 4ea 00 00 00 18 
2c967 4eb 18 1C 1C 18 
2c96b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2c96f 4ed 18 7E 7E 00 
2c973 4ee 00 00 00 3C 
2c977 4ef 7E 66 66 30 
2c97b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2c97f 4f1 0C 7E 7E 00 
2c983 4f2 00 00 00 7E 
2c987 4f3 7E 30 30 18 
2c98b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2c98f 4f5 66 7E 3C 00 
2c993 4f6 00 00 00 30 
2c997 4f7 30 38 38 3C 
2c99b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2c99f 4f9 7E 30 30 00 
2c9a3 4fa 00 00 00 7E 
2c9a7 4fb 7E 06 06 3E 
2c9ab 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2c9af 4fd 66 7E 3C 00 
2c9b3 4fe 00 00 00 38 
2c9b7 4ff 3C 0E 06 06 
2c9bb 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2c9bf 501 66 7E 3C 00 
2c9c3 502 00 00 00 7E 
2c9c7 503 7E 60 60 30 
2c9cb 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2c9cf 505 0C 0C 0C 00 
2c9d3 506 00 00 00 3C 
2c9d7 507 7E 66 66 3C 
2c9db 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2c9df 509 66 7E 3C 00 
2c9e3 50a 00 00 00 3C 
2c9e7 50b 7E 66 66 7E 
2c9eb 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2c9ef 50d 70 3C 1C 00 
2c9f3 50e 00 00 00 00 
2c9f7 50f 00 00 18 18 
2c9fb 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2c9ff 511 18 18 18 00 
2ca03 512 00 00 00 00 
2ca07 513 00 00 18 18 
2ca0b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2ca0f 515 18 18 18 0C 
2ca13 516 04 00 00 00 
2ca17 517 70 38 1C 0E 
2ca1b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2ca1f 519 70 00 00 00 
2ca23 51a 00 00 00 00 
2ca27 51b 00 00 7E 7E 
2ca2b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2ca2f 51d 00 00 00 00 
2ca33 51e 00 00 00 00 | 	byte	$00[8]
2ca37 51f 0E 1C 38 70 
2ca3b 520 E0 70 38 1C 
2ca3f 521 0E 00 00 00 
2ca43 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2ca47 523 7E 66 66 30 
2ca4b 524 30 18 18 18 
2ca4f 525 00 18 18 00 
2ca53 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2ca57 527 7E 66 66 66 
2ca5b 528 66 36 06 66 
2ca5f 529 66 7E 3C 00 
2ca63 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2ca67 52b 3C 7E 66 66 
2ca6b 52c 66 7E 7E 66 
2ca6f 52d 66 66 66 00 
2ca73 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2ca77 52f 7E 66 66 7E 
2ca7b 530 3E 66 66 66 
2ca7f 531 66 7E 3E 00 
2ca83 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2ca87 533 7E 66 66 06 
2ca8b 534 06 06 06 66 
2ca8f 535 66 7E 3C 00 
2ca93 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2ca97 537 7E 66 66 66 
2ca9b 538 66 66 66 66 
2ca9f 539 66 7E 3E 00 
2caa3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2caa7 53b 7E 06 06 3E 
2caab 53c 3E 06 06 06 
2caaf 53d 06 7E 7E 00 
2cab3 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2cab7 53f 7E 06 06 3E 
2cabb 540 3E 06 06 06 
2cabf 541 06 06 06 00 
2cac3 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2cac7 543 7E 06 06 76 
2cacb 544 76 66 66 66 
2cacf 545 66 7E 3C 00 
2cad3 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2cad7 547 66 66 66 7E 
2cadb 548 7E 66 66 66 
2cadf 549 66 66 66 00 
2cae3 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2cae7 54b 7E 18 18 18 
2caeb 54c 18 18 18 18 
2caef 54d 18 7E 7E 00 
2caf3 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2caf7 54f 60 60 60 60 
2cafb 550 60 60 60    | 	byte	$60[7]
2cafe 551 66 66 7E 3C 
2cb02 552 00 00 00 00 
2cb06 553 66 66 36 36 
2cb0a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2cb0e 555 66 66 C6 C6 
2cb12 556 00 00 00 00 
2cb16 557 06 06 06 06 
2cb1a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2cb1e 559 06 06 7E 7E 
2cb22 55a 00 00 00 00 
2cb26 55b C6 C6 EE EE 
2cb2a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2cb2e 55d C6 C6 C6 C6 
2cb32 55e 00 00 00 00 
2cb36 55f 66 66 66 6E 
2cb3a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2cb3e 561 76 66 66 66 
2cb42 562 00 00 00 00 
2cb46 563 3C 7E 66 66 
2cb4a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2cb4e 565 66 66 7E 3C 
2cb52 566 00 00 00 00 
2cb56 567 3E 7E 66 66 
2cb5a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2cb5e 569 06 06 06 06 
2cb62 56a 00 00 00 00 
2cb66 56b 3C 7E 66 66 
2cb6a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2cb6e 56d 66 56 3E 6C 
2cb72 56e 00 00 00 00 
2cb76 56f 3E 7E 66 66 
2cb7a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2cb7e 571 66 66 C6 C6 
2cb82 572 00 00 00 00 
2cb86 573 7C 7E 06 06 
2cb8a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2cb8e 575 60 60 7E 3E 
2cb92 576 00 00 00 00 
2cb96 577 7E 7E 18 18 
2cb9a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2cb9e 579 18 18 18 18 
2cba2 57a 00 00 00 00 
2cba6 57b 66 66 66 66 
2cbaa 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2cbae 57d 66 66 7E 3C 
2cbb2 57e 00 00 00 00 
2cbb6 57f 66 66 66 66 
2cbba 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2cbbe 581 3C 3C 18 18 
2cbc2 582 00 00 00 00 
2cbc6 583 C6 C6 C6 C6 
2cbca 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2cbce 585 FE EE C6 82 
2cbd2 586 00 00 00 00 
2cbd6 587 66 66 66 3C 
2cbda 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2cbde 589 3C 66 66 66 
2cbe2 58a 00 00 00 00 
2cbe6 58b 66 66 66 66 
2cbea 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2cbee 58d 18 18 18 18 
2cbf2 58e 00 00 00 00 
2cbf6 58f 7E 7E 30 30 
2cbfa 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2cbfe 591 06 06 7E 7E 
2cc02 592 00 00 00 00 
2cc06 593 3C 3C 0C 0C 
2cc0a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2cc0e 595 0C 0C 3C 3C 
2cc12 596 00 00 00 00 
2cc16 597 06 06 0C 0C 
2cc1a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2cc1e 599 60 60 C0 C0 
2cc22 59a 00 00 00 00 
2cc26 59b 3C 3C 30 30 
2cc2a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2cc2e 59d 30 30 3C 3C 
2cc32 59e 00 00 00 00 
2cc36 59f 18 18 3C 3C 
2cc3a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2cc3e 5a1 00 00 00 00 
2cc42 5a2 00 00 00 00 
2cc46 5a3 00 00 00 00 
2cc4a 5a4 00 00 00 00 
2cc4e 5a5 00 00       | 	byte	$00[18]
2cc50 5a6 FE FE 00 00 
2cc54 5a7 00 00 0C 0C 
2cc58 5a8 18 18 00 00 
2cc5c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2cc60 5aa 00 00 00 00 
2cc64 5ab 00 00 00 00 
2cc68 5ac 00          | 	byte	$00[9]
2cc69 5ac 3C 7C 60 7C 
2cc6d 5ad 7E 66 66 7E 
2cc71 5ae 7C 00 00 00 
2cc75 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2cc79 5b0 3E 7E 66 66 
2cc7d 5b1 66 66 66 7E 
2cc81 5b2 3E 00 00 00 
2cc85 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2cc89 5b4 3C 3E 06 06 
2cc8d 5b5 06 06 06 7E 
2cc91 5b6 7C 00 00 00 
2cc95 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2cc99 5b8 7C 7E 66 66 
2cc9d 5b9 66 66 66 7E 
2cca1 5ba 7C 00 00 00 
2cca5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2cca9 5bc 3C 7E 66 66 
2ccad 5bd 7E 06 06 7E 
2ccb1 5be 7C 00 00 00 
2ccb5 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2ccb9 5c0 18 7E 7E 18 
2ccbd 5c1 18 18 18 18 
2ccc1 5c2 18 00 00 00 
2ccc5 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2ccc9 5c4 7C 7E 66 66 
2cccd 5c5 66 66 7E 7C 
2ccd1 5c6 60 7E 3E 00 
2ccd5 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2ccd9 5c8 3E 7E 66 66 
2ccdd 5c9 66 66 66 66 
2cce1 5ca 66 00 00 00 
2cce5 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2cce9 5cc 1C 1C 18 18 
2cced 5cd 18 18 18 3C 
2ccf1 5ce 3C 00 00 00 
2ccf5 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2ccf9 5d0 30 30 30 30 
2ccfd 5d1 30 30 30 30 
2cd01 5d2 30          | 	byte	$30[9]
2cd02 5d2 3E 1E 00 00 
2cd06 5d3 06 06 06 36 
2cd0a 5d4 36 1E 1E 1E 
2cd0e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2cd12 5d6 00 00 00 00 
2cd16 5d7 1C 1C 18 18 
2cd1a 5d8 18 18 18 18 
2cd1e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2cd22 5da 00 00 00 00 
2cd26 5db 00 00 00    | 	byte	$00[7]
2cd29 5dc 6C FE FE D6 
2cd2d 5dd D6 C6 C6 C6 
2cd31 5de C6 00 00 00 
2cd35 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2cd39 5e0 3E 7E 66 66 
2cd3d 5e1 66 66 66 66 
2cd41 5e2 66 00 00 00 
2cd45 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2cd49 5e4 3C 7E 66 66 
2cd4d 5e5 66 66 66 7E 
2cd51 5e6 3C 00 00 00 
2cd55 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2cd59 5e8 3E 7E 66 66 
2cd5d 5e9 66 66 66 7E 
2cd61 5ea 3E 06 06 00 
2cd65 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2cd69 5ec 7C 7E 66 66 
2cd6d 5ed 66 66 66 7E 
2cd71 5ee 7C 60 60 00 
2cd75 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2cd79 5f0 3E 7E 66 06 
2cd7d 5f1 06 06 06 06 
2cd81 5f2 06 00 00 00 
2cd85 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2cd89 5f4 7C 7E 06 0E 
2cd8d 5f5 3C 70 60 7E 
2cd91 5f6 3E 00 00 00 
2cd95 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2cd99 5f8 7E 7E 18 18 
2cd9d 5f9 18 18 18 78 
2cda1 5fa 70 00 00 00 
2cda5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2cda9 5fc 66 66 66 66 
2cdad 5fd 66 66 66    | 	byte	$66[7]
2cdb0 5fe 7E 7C 00 00 
2cdb4 5ff 00 00 00 00 
2cdb8 600 00 66 66 66 
2cdbc 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2cdc0 602 18 18 00 00 
2cdc4 603 00 00 00 00 
2cdc8 604 00 C6 C6 D6 
2cdcc 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2cdd0 606 C6 82 00 00 
2cdd4 607 00 00 00 00 
2cdd8 608 00 66 66 3C 
2cddc 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2cde0 60a 66 66 00 00 
2cde4 60b 00 00 00 00 
2cde8 60c 00 66 66 66 
2cdec 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2cdf0 60e 7C 60 7E 3E 
2cdf4 60f 00 00 00 00 
2cdf8 610 00 7E 7E 30 
2cdfc 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2ce00 612 7E 7E 00 00 
2ce04 613 00 00 30 18 
2ce08 614 18 18 18 0C 
2ce0c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2ce10 616 18 30 00 00 
2ce14 617 00 00 18 18 
2ce18 618 18 18 18 18 
2ce1c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2ce20 61a 18 18 00 00 
2ce24 61b 00 00 0C 18 
2ce28 61c 18 18 18 30 
2ce2c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2ce30 61e 18 0C 00 00 
2ce34 61f 00 00 6C 7E 
2ce38 620 36 00 00 00 
2ce3c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2ce40 622 00 00 00 00 
2ce44 623 00 00 00 00 
2ce48 624 00          | 	byte	$00[9]
2ce49 624 18 18 18 18 
2ce4d 625 18 18 00 00 
2ce51 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2ce54 627             | 'amiga_font     file "amigafont.def"
2ce54 627 00 6C FE FE 
2ce58 628 7C 38 10 00 
2ce5c 629 18 18 18 F8 
2ce60 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2ce64 62b C0 C0 C0 C0 
2ce68 62c C0 C0 C0 C0 | 	byte	$c0[8]
2ce6c 62d 18 18 18 1F 
2ce70 62e 1F 00 00 00 
2ce74 62f 18 18 18 1F 
2ce78 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2ce7c 631 00 00 00 1F 
2ce80 632 1F 18 18 18 
2ce84 633 C0 E0 70 38 
2ce88 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2ce8c 635 03 07 0E 1C 
2ce90 636 38 70 E0 C0 
2ce94 637 80 C0 E0 F0 
2ce98 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2ce9c 639 00 00 00 00 
2cea0 63a F0 F0 F0 F0 
2cea4 63b 01 03 07 0F 
2cea8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2ceac 63d F0 F0 F0 F0 
2ceb0 63e 00 00 00 00 
2ceb4 63f 0F 0F 0F 0F 
2ceb8 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2cebc 641 FF FF 00 00 
2cec0 642 00 00 00 00 
2cec4 643 00 00 00 00 
2cec8 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2cecc 645 00 00 00 00 
2ced0 646 0F 0F 0F 0F 
2ced4 647 00 38 38 EE 
2ced8 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2cedc 649 00 00 00 F8 
2cee0 64a F8 18 18 18 
2cee4 64b 00 00 00 FF 
2cee8 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2ceec 64d 18 18 18 FF 
2cef0 64e FF 18 18 18 
2cef4 64f 00 00 3C 7E 
2cef8 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2cefc 651 00 00 00 00 
2cf00 652 FF FF FF FF 
2cf04 653 03 03 03 03 
2cf08 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2cf0c 655 00 00 00 FF 
2cf10 656 FF 18 18 18 
2cf14 657 18 18 18 FF 
2cf18 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2cf1c 659 0F 0F 0F 0F 
2cf20 65a 0F 0F 0F 0F | 	byte	$0f[8]
2cf24 65b 18 18 18 F8 
2cf28 65c F8 00 00 00 
2cf2c 65d 1E 06 1E 06 
2cf30 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2cf34 65f 00 18 3C 7E 
2cf38 660 18 18 18 00 
2cf3c 661 00 18 18 18 
2cf40 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2cf44 663 00 18 0C 7E 
2cf48 664 0C 18 00 00 
2cf4c 665 00 18 30 7E 
2cf50 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2cf54 667 00 00 00 00 
2cf58 668 00 00 00 00 
2cf5c 669 00          | 	byte	$00[9]
2cf5d 669 18 18 18 18 
2cf61 66a 00 18 00 00 
2cf65 66b 66 66 66 00 
2cf69 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2cf6d 66d 66 FF 66 66 
2cf71 66e FF 66 00 18 
2cf75 66f 7C 06 3C 60 
2cf79 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2cf7d 671 66 36 18 0C 
2cf81 672 66 62 00 38 
2cf85 673 6C 38 1C F6 
2cf89 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2cf8d 675 18 18 18 00 
2cf91 676 00 00 00 00 
2cf95 677 70 38 18 18 
2cf99 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2cf9d 679 0E 1C 18 18 
2cfa1 67a 1C 0E 00 00 
2cfa5 67b 66 3C FF 3C 
2cfa9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2cfad 67d 18 18 7E 18 
2cfb1 67e 18 00 00 00 
2cfb5 67f 00 00 00 00 
2cfb9 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2cfbd 681 00 00 7E 00 
2cfc1 682 00 00 00 00 
2cfc5 683 00 00 00 00 
2cfc9 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2cfcd 685 60 30 18 0C 
2cfd1 686 06 02 00 00 
2cfd5 687 3C 66 76 6E 
2cfd9 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2cfdd 689 18 1C 18 18 
2cfe1 68a 18 7E 00 00 
2cfe5 68b 3C 66 30 18 
2cfe9 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2cfed 68d 7E 30 18 30 
2cff1 68e 66 3C 00 00 
2cff5 68f 30 38 3C 36 
2cff9 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2cffd 691 7E 06 3E 60 
2d001 692 66 3C 00 00 
2d005 693 3C 06 3E 66 
2d009 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2d00d 695 7E 60 30 18 
2d011 696 0C 0C 00 00 
2d015 697 3C 66 3C 66 
2d019 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2d01d 699 3C 66 7C 60 
2d021 69a 30 1C 00 00 
2d025 69b 00 18 18 00 
2d029 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2d02d 69d 00 18 18 00 
2d031 69e 18 18 0C 60 
2d035 69f 30 18 0C 18 
2d039 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2d03d 6a1 00 7E 00 00 
2d041 6a2 7E 00 00 06 
2d045 6a3 0C 18 30 18 
2d049 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2d04d 6a5 3C 66 30 18 
2d051 6a6 00 18 00 00 
2d055 6a7 3C 66 76 76 
2d059 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2d05d 6a9 18 3C 66 66 
2d061 6aa 7E 66 00 00 
2d065 6ab 3E 66 3E 66 
2d069 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2d06d 6ad 3C 66 06 06 
2d071 6ae 66 3C 00 00 
2d075 6af 1E 36 66 66 
2d079 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2d07d 6b1 7E 06 3E 06 
2d081 6b2 06 7E 00 00 
2d085 6b3 7E 06 3E 06 
2d089 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2d08d 6b5 7C 06 06 76 
2d091 6b6 66 7C 00 00 
2d095 6b7 66 66 7E 66 
2d099 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2d09d 6b9 7E 18 18 18 
2d0a1 6ba 18 7E 00 00 
2d0a5 6bb 60 60 60 60 
2d0a9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2d0ad 6bd 66 36 1E 1E 
2d0b1 6be 36 66 00 00 
2d0b5 6bf 06 06 06 06 
2d0b9 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2d0bd 6c1 C6 EE FE D6 
2d0c1 6c2 C6 C6 00 00 
2d0c5 6c3 66 6E 7E 7E 
2d0c9 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2d0cd 6c5 3C 66 66 66 
2d0d1 6c6 66 3C 00 00 
2d0d5 6c7 3E 66 66 3E 
2d0d9 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2d0dd 6c9 3C 66 66 66 
2d0e1 6ca 36 6C 00 00 
2d0e5 6cb 3E 66 66 3E 
2d0e9 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2d0ed 6cd 3C 06 3C 60 
2d0f1 6ce 60 3C 00 00 
2d0f5 6cf 7E 18 18 18 
2d0f9 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2d0fd 6d1 66 66 66 66 
2d101 6d2 66          | 	byte	$66[5]
2d102 6d2 7E 00 00 66 
2d106 6d3 66 66 66 3C 
2d10a 6d4 18 00 00 C6 
2d10e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2d112 6d6 C6 00 00 66 
2d116 6d7 66 3C 3C 66 
2d11a 6d8 66 00 00 66 
2d11e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2d122 6da 18 00 00 7E 
2d126 6db 30 18 0C 06 
2d12a 6dc 7E 00 00 78 
2d12e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2d132 6de 78 00 00 02 
2d136 6df 06 0C 18 30 
2d13a 6e0 60 00 00 1E 
2d13e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2d142 6e2 1E 00 00 10 
2d146 6e3 38 6C C6 00 
2d14a 6e4 00 00 00 00 
2d14e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d152 6e6 FF 00 00 18 
2d156 6e7 3C 7E 7E 3C 
2d15a 6e8 18 00 00 00 
2d15e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2d162 6ea 7C 00 00 06 
2d166 6eb 06 3E 66 66 
2d16a 6ec 3E 00 00 00 
2d16e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2d172 6ee 3C 00 00 60 
2d176 6ef 60 7C 66 66 
2d17a 6f0 7C 00 00 00 
2d17e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2d182 6f2 3C 00 00 70 
2d186 6f3 18 7C 18 18 
2d18a 6f4 18 00 00 00 
2d18e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2d192 6f6 60 3E 00 06 
2d196 6f7 06 3E 66 66 
2d19a 6f8 66 00 00 18 
2d19e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2d1a2 6fa 3C 00 00 60 
2d1a6 6fb 00 60 60 60 
2d1aa 6fc 60 3C 00 06 
2d1ae 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2d1b2 6fe 66 00 00 1C 
2d1b6 6ff 18 18 18 18 
2d1ba 700 3C 00 00 00 
2d1be 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2d1c2 702 C6 00 00 00 
2d1c6 703 3E 66 66 66 
2d1ca 704 66 00 00 00 
2d1ce 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2d1d2 706 3C 00 00 00 
2d1d6 707 3E 66 66 3E 
2d1da 708 06 06 00 00 
2d1de 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2d1e2 70a 60 60 00 00 
2d1e6 70b 3E 66 06 06 
2d1ea 70c 06 00 00 00 
2d1ee 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2d1f2 70e 3E 00 00 18 
2d1f6 70f 7E 18 18 18 
2d1fa 710 70 00 00 00 
2d1fe 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2d202 712 7C 00 00 00 
2d206 713 66 66 66 3C 
2d20a 714 18 00 00 00 
2d20e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2d212 716 6C 00 00 00 
2d216 717 66 3C 18 3C 
2d21a 718 66 00 00 00 
2d21e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2d222 71a 30 1E 00 00 
2d226 71b 7E 30 18 0C 
2d22a 71c 7E 00 00 18 
2d22e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2d232 71e 3C 00 18 18 
2d236 71f 18 18 18 18 
2d23a 720 18 18 00 7E 
2d23e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2d242 722 60 00 10 18 
2d246 723 1C 1E 1C 18 
2d24a 724 10 00 08 18 
2d24e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2d252 726 08 00       | 	byte	$08, $00
2d254 727 00 00 00 00 
2d258 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2d259 728 80 00 00 00 
2d25d 729 00 80 00 00 
2d261 72a 80 80 00 00 
2d265 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2d269 72c 80 00 80 00 
2d26d 72d 00 40 80 00 
2d271 72e AA AA AA 00 
2d275 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2d279 730 FF 00 00 00 
2d27d 731 00 FF 00 00 
2d281 732 FF FF 00 00 
2d285 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2d289 734 FF 00 FF 00 
2d28d 735 00 FF FF 00 
2d291 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2d294 737 00 00 00 00 
2d298 738 00          | ataripalette   file "ataripalettep2.def"
2d299 738 11 11 11 00 
2d29d 739 22 22 22 00 
2d2a1 73a 33 33 33 00 
2d2a5 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2d2a9 73c 55 55 55 00 
2d2ad 73d 66 66 66 00 
2d2b1 73e 77 77 77 00 
2d2b5 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2d2b9 740 99 99 99 00 
2d2bd 741 AA AA AA 00 
2d2c1 742 BB BB BB 00 
2d2c5 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2d2c9 744 DD DD DD 00 
2d2cd 745 EE EE EE 00 
2d2d1 746 FF FF FF 00 
2d2d5 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2d2d9 748 00 14 40 00 
2d2dd 749 00 1E 60 00 
2d2e1 74a 00 28 80 00 
2d2e5 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2d2e9 74c 00 3C BF 00 
2d2ed 74d 00 46 DF 00 
2d2f1 74e 00 50 FF 00 
2d2f5 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2d2f9 750 39 77 FF 00 
2d2fd 751 55 8A FF 00 
2d301 752 71 9E FF 00 
2d305 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2d309 754 AA C5 FF 00 
2d30d 755 C6 D8 FF 00 
2d311 756 E3 EC FF 00 
2d315 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2d319 758 00 00 40 00 
2d31d 759 00 00 60 00 
2d321 75a 00 00 80 00 
2d325 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2d329 75c 00 00 BF 00 
2d32d 75d 00 00 DF 00 
2d331 75e 00 00 FF 00 
2d335 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2d339 760 39 39 FF 00 
2d33d 761 55 55 FF 00 
2d341 762 71 71 FF 00 
2d345 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2d349 764 AA AA FF 00 
2d34d 765 C6 C6 FF 00 
2d351 766 E3 E3 FF 00 
2d355 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2d359 768 20 00 40 00 
2d35d 769 30 00 60 00 
2d361 76a 40 00 80 00 
2d365 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2d369 76c 60 00 BF 00 
2d36d 76d 70 00 DF 00 
2d371 76e 80 00 FF 00 
2d375 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2d379 770 9C 39 FF 00 
2d37d 771 AA 55 FF 00 
2d381 772 B8 71 FF 00 
2d385 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2d389 774 D5 AA FF 00 
2d38d 775 E3 C6 FF 00 
2d391 776 F1 E3 FF 00 
2d395 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2d399 778 40 00 40 00 
2d39d 779 60 00 60 00 
2d3a1 77a 80 00 80 00 
2d3a5 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2d3a9 77c BF 00 BF 00 
2d3ad 77d DF 00 DF 00 
2d3b1 77e FF 00 FF 00 
2d3b5 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2d3b9 780 FF 39 FF 00 
2d3bd 781 FF 55 FF 00 
2d3c1 782 FF 71 FF 00 
2d3c5 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2d3c9 784 FF AA FF 00 
2d3cd 785 FF C6 FF 00 
2d3d1 786 FF E3 FF 00 
2d3d5 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2d3d9 788 40 00 20 00 
2d3dd 789 60 00 30 00 
2d3e1 78a 80 00 40 00 
2d3e5 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2d3e9 78c BF 00 60 00 
2d3ed 78d DF 00 70 00 
2d3f1 78e FF 00 80 00 
2d3f5 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2d3f9 790 FF 39 9C 00 
2d3fd 791 FF 55 AA 00 
2d401 792 FF 71 B8 00 
2d405 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2d409 794 FF AA D5 00 
2d40d 795 FF C6 E3 00 
2d411 796 FF E3 F1 00 
2d415 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2d419 798 40 00 00 00 
2d41d 799 60 00 00 00 
2d421 79a 80 00 00 00 
2d425 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2d429 79c BF 00 00 00 
2d42d 79d DF 00 00 00 
2d431 79e FF 00 00 00 
2d435 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2d439 7a0 FF 39 39 00 
2d43d 7a1 FF 55 55 00 
2d441 7a2 FF 71 71 00 
2d445 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2d449 7a4 FF AA AA 00 
2d44d 7a5 FF C6 C6 00 
2d451 7a6 FF E3 E3 00 
2d455 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2d459 7a8 40 10 00 00 
2d45d 7a9 60 18 00 00 
2d461 7aa 80 20 00 00 
2d465 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2d469 7ac BF 30 00 00 
2d46d 7ad DF 38 00 00 
2d471 7ae FF 40 00 00 
2d475 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2d479 7b0 FF 6A 39 00 
2d47d 7b1 FF 80 55 00 
2d481 7b2 FF 95 71 00 
2d485 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2d489 7b4 FF BF AA 00 
2d48d 7b5 FF D5 C6 00 
2d491 7b6 FF EA E3 00 
2d495 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2d499 7b8 40 20 00 00 
2d49d 7b9 60 30 00 00 
2d4a1 7ba 80 40 00 00 
2d4a5 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2d4a9 7bc BF 60 00 00 
2d4ad 7bd DF 70 00 00 
2d4b1 7be FF 80 00 00 
2d4b5 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2d4b9 7c0 FF 9C 39 00 
2d4bd 7c1 FF AA 55 00 
2d4c1 7c2 FF B8 71 00 
2d4c5 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2d4c9 7c4 FF D5 AA 00 
2d4cd 7c5 FF E3 C6 00 
2d4d1 7c6 FF F1 E3 00 
2d4d5 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2d4d9 7c8 40 30 00 00 
2d4dd 7c9 60 48 00 00 
2d4e1 7ca 80 60 00 00 
2d4e5 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2d4e9 7cc BF 90 00 00 
2d4ed 7cd DF A8 00 00 
2d4f1 7ce FF C0 00 00 
2d4f5 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2d4f9 7d0 FF CE 39 00 
2d4fd 7d1 FF D5 55 00 
2d501 7d2 FF DC 71 00 
2d505 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2d509 7d4 FF EA AA 00 
2d50d 7d5 FF F1 C6 00 
2d511 7d6 FF F8 E3 00 
2d515 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2d519 7d8 30 40 00 00 
2d51d 7d9 48 60 00 00 
2d521 7da 60 80 00 00 
2d525 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2d529 7dc 90 BF 00 00 
2d52d 7dd A8 DF 00 00 
2d531 7de C0 FF 00 00 
2d535 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2d539 7e0 CE FF 39 00 
2d53d 7e1 D5 FF 55 00 
2d541 7e2 DC FF 71 00 
2d545 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2d549 7e4 EA FF AA 00 
2d54d 7e5 F1 FF C6 00 
2d551 7e6 F8 FF E3 00 
2d555 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2d559 7e8 00 40 00 00 
2d55d 7e9 00 60 00 00 
2d561 7ea 00 80 00 00 
2d565 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2d569 7ec 00 BF 00 00 
2d56d 7ed 00 DF 00 00 
2d571 7ee 00 FF 00 00 
2d575 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2d579 7f0 39 FF 39 00 
2d57d 7f1 55 FF 55 00 
2d581 7f2 71 FF 71 00 
2d585 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2d589 7f4 AA FF AA 00 
2d58d 7f5 C6 FF C6 00 
2d591 7f6 E3 FF E3 00 
2d595 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2d599 7f8 00 40 14 00 
2d59d 7f9 00 60 1E 00 
2d5a1 7fa 00 80 28 00 
2d5a5 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2d5a9 7fc 00 BF 3C 00 
2d5ad 7fd 00 DF 46 00 
2d5b1 7fe 00 FF 50 00 
2d5b5 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2d5b9 800 39 FF 77 00 
2d5bd 801 55 FF 8A 00 
2d5c1 802 71 FF 9E 00 
2d5c5 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2d5c9 804 AA FF C5 00 
2d5cd 805 C6 FF D8 00 
2d5d1 806 E3 FF EC 00 
2d5d5 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2d5d9 808 00 40 28 00 
2d5dd 809 00 60 3C 00 
2d5e1 80a 00 80 50 00 
2d5e5 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2d5e9 80c 00 BF 78 00 
2d5ed 80d 00 DF 8C 00 
2d5f1 80e 00 FF A0 00 
2d5f5 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2d5f9 810 39 FF B5 00 
2d5fd 811 55 FF C0 00 
2d601 812 71 FF CA 00 
2d605 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2d609 814 AA FF DF 00 
2d60d 815 C6 FF EA 00 
2d611 816 E3 FF F4 00 
2d615 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2d619 818 00 40 40 00 
2d61d 819 00 60 60 00 
2d621 81a 00 80 80 00 
2d625 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2d629 81c 00 BF BF 00 
2d62d 81d 00 DF DF 00 
2d631 81e 00 FF FF 00 
2d635 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2d639 820 39 FF FF 00 
2d63d 821 55 FF FF 00 
2d641 822 71 FF FF 00 
2d645 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2d649 824 AA FF FF 00 
2d64d 825 C6 FF FF 00 
2d651 826 E3 FF FF 00 
2d655 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2d659 828 00 28 40 00 
2d65d 829 00 3C 60 00 
2d661 82a 00 50 80 00 
2d665 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2d669 82c 00 78 BF 00 
2d66d 82d 00 8C DF 00 
2d671 82e 00 A0 FF 00 
2d675 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2d679 830 39 B5 FF 00 
2d67d 831 55 C0 FF 00 
2d681 832 71 CA FF 00 
2d685 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2d689 834 AA DF FF 00 
2d68d 835 C6 EA FF 00 
2d691 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2d694 837             | 
2d694 837             | '**********************************************************************************
2d694 837             | '
2d694 837             | '        Timings and colors definitions
2d694 837             | '
2d694 837             | '**********************************************************************************
2d694 837             | 
2d694 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2d694 837 10 00 00 00 
2d698 838 50 00 00 00 
2d69c 839 0C 00 00 00 
2d6a0 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2d6a4 83b 08 00 00 00 
2d6a8 83c 04 00 00 00 
2d6ac 83d 08 00 00 00 
2d6b0 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2d6b4 83f 40 02 00 00 
2d6b8 840 6A 8C 15 14 
2d6bc 841 FB 06 B7 01 
2d6c0 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2d6c4 843 00 00 00 00 
2d6c8 844 C0 00 00 00 
2d6cc 845 00 00 00 00 
2d6d0 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d6d4 847 00 75 C7 97 
2d6d8 848 27 47 F6 0A 
2d6dc 849 05 79 CB 9B 
2d6e0 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2d6e4 84b             | 
2d6e4 84b             | ''--------  Initialization  ----------------------------------------------------------------
2d6e4 84b             | 
2d6e4 84b 28 0C 64 FD | hdmi            setq    #6
2d6e8 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2d6ec 84d 28 10 64 FD |                 setq    #8
2d6f0 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2d6f4 84f             | 
2d6f4 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2d6f8 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2d6fc 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2d700 852 D6 C6 01 F1 |                 add     t1,hbase
2d704 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2d708 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2d70c 855 7B 0B 80 5F 
2d710 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2d714 857 66 66 86 FF 
2d718 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2d71c 859             | '
2d71c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2d720 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2d724 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2d728 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2d72c 85d             | 
2d72c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2d730 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2d734 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2d738 860             | 
2d738 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2d738 860             | 
2d738 860 28 06 64 FD | p101            setq 	#3
2d73c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2d740 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2d744 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2d748 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2d74c 865 00 A0 05 F6 |                 mov     dlinum, #0
2d750 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2d754 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2d758 868             | 
2d758 868             | 
2d758 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2d75c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2d760 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2d764 86b             |                 
2d764 86b             | 
2d764 86b             | 
2d764 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2d764 86b             |   
2d764 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2d768 86c 29 FE 65 3D |          if_nc  setq2   #255
2d76c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2d770 86e             | 
2d770 86e             | '' -----   up porch (before the picture)
2d770 86e             | 
2d770 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2d774 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2d778 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2d77c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2d780 872             |  
2d780 872             |    
2d780 872             |  
2d780 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d784 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d788 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2d78c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d790 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d794 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2d798 878             | 
2d798 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d79c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d7a0 87a 48 00 B0 FD | 		call    #dli
2d7a4 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d7a8 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2d7ac 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2d7b0 87e             |                 	
2d7b0 87e             |                 
2d7b0 87e             | 
2d7b0 87e             |  
2d7b0 87e             | '' ------- the main screen drawing starts here
2d7b0 87e             | 
2d7b0 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2d7b4 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2d7b8 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2d7bc 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2d7c0 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2d7c4 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2d7c8 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2d7cc 885             |               
2d7cc 885             | 
2d7cc 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2d7d0 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2d7d4 887             | 
2d7d4 887             | ' ---------------- All visible lines displayed now, start vblank  
2d7d4 887             | 
2d7d4 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2d7d8 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2d7dc 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2d7e0 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2d7e4 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2d7e8 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2d7ec 88d             | 
2d7ec 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2d7ec 88d             | 
2d7ec 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2d7ec 88d             | 
2d7ec 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2d7f0 88e             | 
2d7f0 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2d7f4 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2d7f8 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2d7fc 891             | 
2d7fc 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2d800 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2d804 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2d808 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2d80c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2d810 896             | 
2d810 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2d814 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2d818 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2d81c 899 70 00 90 AD |     if_z        jmp     #preload
2d820 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2d824 89b 94 00 90 AD |     if_z        jmp     #preload2
2d828 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2d82c 89d 0C 00 90 AD |     if_z        jmp     #p390
2d830 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2d834 89f 28 00 90 AD |     if_z        jmp     #p391  
2d838 8a0             | 
2d838 8a0 2D 00 64 FD | p308            ret
2d83c 8a1             |    
2d83c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2d840 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2d844 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2d848 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2d84c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2d850 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2d854 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2d858 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2d85c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2d860 8aa             |  
2d860 8aa             | '' --------  Reload palette. To do 
2d860 8aa             | 
2d860 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2d864 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2d868 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2d86c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2d870 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2d874 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2d878 8b0 70 FF 9F FD |         	jmp     #dli                
2d87c 8b1             |       
2d87c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2d87c 8b1             | 
2d87c 8b1             | 
2d87c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2d87c 8b1             | 
2d87c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2d880 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d884 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d888 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d88c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2d890 8b6             |         
2d890 8b6             | '' -------------- Preload a line from PSRAM        
2d890 8b6             |         
2d890 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2d894 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2d898 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2d89c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2d8a0 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2d8a4 8bb             | 
2d8a4 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2d8a8 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2d8ac 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2d8b0 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2d8b4 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2d8b8 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2d8bc 8c1             |  
2d8bc 8c1             |  
2d8bc 8c1             | preload2      '  incmod  dlinum,#3
2d8bc 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2d8c0 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2d8c4 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2d8c8 8c4 28 02 64 FD |                 setq	#1
2d8cc 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2d8d0 8c6             |                 
2d8d0 8c6             | 
2d8d0 8c6             | '' -------------- Draw sprites
2d8d0 8c6             | 
2d8d0 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2d8d4 8c7 10 5C 0E F5 | 		and t8,#16 wz
2d8d8 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2d8dc 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2d8e0 8ca             | 		
2d8e0 8ca             | 
2d8e0 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2d8e4 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2d8e8 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2d8ec 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2d8f0 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2d8f4 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2d8f8 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2d8fc 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2d900 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d904 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2d908 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2d90c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d910 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2d914 8d7             | 
2d914 8d7             | 
2d914 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2d918 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2d91c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2d920 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2d924 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2d928 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2d92c 8dd 00 5E 06 F6 |                 mov 	t9,#0
2d930 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2d934 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2d938 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2d93c 8e1             |      
2d93c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2d940 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2d944 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2d948 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2d94c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2d950 8e6             |                 
2d950 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2d954 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2d958 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2d95c 8e9             |   		
2d95c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2d960 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2d964 8eb             | 
2d964 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2d968 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2d96c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2d970 8ee             |  
2d970 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2d974 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2d978 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2d97c 8f1             | 	
2d97c 8f1             | 	
2d97c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2d980 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2d984 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2d988 8f4             | 
2d988 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2d98c 8f5             | 
2d98c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2d990 8f6 01 58 86 F1 | 	 	sub     t6,#1
2d994 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2d998 8f8             | 
2d998 8f8 28 58 62 FD |                 setq   	t6
2d99c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2d9a0 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2d9a4 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2d9a8 8fc 24 00 90 AD |         if_z    jmp #p898
2d9ac 8fd             |          
2d9ac 8fd             |         
2d9ac 8fd 70 5F 06 F6 |                 mov  t9,#368
2d9b0 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2d9b4 8ff             | 
2d9b4 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2d9b8 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2d9bc 901 FF FF 7F FF 
2d9c0 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2d9c4 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2d9c8 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2d9cc 905 2D 01 00 F5 |                 and 0-0, t7
2d9d0 906             |                
2d9d0 906             | 
2d9d0 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2d9d4 907 E5 E0 7A FA |                 wmlong 368,t3				
2d9d8 908             |                 
2d9d8 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2d9dc 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2d9e0 90a 2D 00 64 FD |                 ret
2d9e4 90b             | 	
2d9e4 90b             | 	
2d9e4 90b             |                
2d9e4 90b             |  
2d9e4 90b             | '' -------------- Graphics line ------------------------------------------------------------
2d9e4 90b             |  
2d9e4 90b             | 
2d9e4 90b             | '' consts and vars
2d9e4 90b             | 
2d9e4 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2d9e8 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2d9ec 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2d9f0 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2d9f4 90f             | 
2d9f4 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2d9f8 910             | 
2d9f8 910             | '------ these longs will be set by setmode function
2d9f8 910             | 
2d9f8 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2d9fc 911 00 00 00 00 | m_sn            long    0        'sync
2da00 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2da04 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2da08 914             | 'm_border        long    0        'left/right borders
2da08 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2da0c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2da10 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2da14 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2da18 918 00 00 00 00 | i_totalvis      long    0
2da1c 919             | 
2da1c 919             | '-------------------------------------
2da1c 919             |  
2da1c 919 00 00 00 00 | linenum         long    0
2da20 91a 00 00 00 00 | frames          long    0
2da24 91b 00 00 00 00 | dlinum long 0
2da28 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2da2c 91d             | 
2da2c 91d 00 00 00 00 | vblankptr       long    0
2da30 91e 00 00 00 00 | modeptr         long    0
2da34 91f 00 00 00 00 | paletteptr      long    0
2da38 920 00 00 00 00 | dlptr           long    0
2da3c 921 01 00 00 00 | hbase           long    1
2da40 922 00 00 00 00 | mailbox         long    0
2da44 923 00 00 00 00 | spriteptr          long 0
2da48 924             | 
2da48 924 00 00 00 00 | cmd             long    0
2da4c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2da50 926 00 04 00 00 | buf2            long    1024
2da54 927 01 00 00 00 | dlptr2          long    1
2da58 928 01 00 00 00 | dl              long    1
2da5c 929             | 
2da5c 929 00 00 00 00 | buf1c long 0
2da60 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2da64 92b 01 00 00 00 | framebuf2       long    1
2da68 92c 01 00 00 00 | hsync0          long    1
2da6c 92d 01 00 00 00 | hsync1          long    1
2da70 92e             | 
2da70 92e 01 00 00 00 | t1              long    1
2da74 92f 00 00 00 00 | t2 long 0
2da78 930 00 00 00 00 | t3 long 0
2da7c 931 00 00 00 00 | t4 long 0
2da80 932             | 
2da80 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2da84 933 00 00 00 00 | rcnt2           long    0
2da88 934 00 00 00 00 | rcnt2a          long    0
2da8c 935 00 00 00 00 | roffset         long    0
2da90 936 00 00 00 00 | rdl             long    0  'dl repeat line
2da94 937 00 00 00 00 | dlc             long    0  'dl command
2da98 938             | 
2da98 938 FF FF FF FF | affffffff       long    $ffffffff
2da9c 939 00 00 00 00 | sprite1pointer long 0
2daa0 93a 00 00 00 00 | sprite1xy      long 0
2daa4 93b 00 00 00 00 | sprite1wh      long 0
2daa8 93c 00 00 00 00 | sprite2pointer long 0
2daac 93d 00 00 00 00 | sprite2xy      long 0
2dab0 93e 00 00 00 00 | sprite2wh      long 0
2dab4 93f 00 00 00 00 | sprite3pointer long 0
2dab8 940 00 00 00 00 | sprite3xy      long 0
2dabc 941 00 00 00 00 | sprite3wh      long 0
2dac0 942 00 00 00 00 | sprite4pointer long 0
2dac4 943 00 00 00 00 | sprite4xy      long 0
2dac8 944 00 00 00 00 | sprite4wh      long 0
2dacc 945 00 00 00 00 | sprite5pointer long 0
2dad0 946 00 00 00 00 | sprite5xy      long 0
2dad4 947 00 00 00 00 | sprite5wh      long 0
2dad8 948 00 00 00 00 | sprite6pointer long 0
2dadc 949 00 00 00 00 | sprite6xy      long 0
2dae0 94a 00 00 00 00 | sprite6wh      long 0
2dae4 94b 00 00 00 00 | sprite7pointer long 0
2dae8 94c 00 00 00 00 | sprite7xy      long 0
2daec 94d 00 00 00 00 | sprite7wh      long 0
2daf0 94e 00 00 00 00 | sprite8pointer long 0
2daf4 94f 00 00 00 00 | sprite8xy      long 0
2daf8 950 00 00 00 00 | sprite8wh      long 0
2dafc 951 00 00 00 00 | sprite9pointer long 0
2db00 952 00 00 00 00 | sprite9xy      long 0
2db04 953 00 00 00 00 | sprite9wh      long 0
2db08 954 00 00 00 00 | sprite10pointer long 0
2db0c 955 00 00 00 00 | sprite10xy      long 0
2db10 956 00 00 00 00 | sprite10wh      long 0
2db14 957 00 00 00 00 | sprite11pointer long 0
2db18 958 00 00 00 00 | sprite11xy      long 0
2db1c 959 00 00 00 00 | sprite11wh      long 0
2db20 95a 00 00 00 00 | sprite12pointer long 0
2db24 95b 00 00 00 00 | sprite12xy      long 0
2db28 95c 00 00 00 00 | sprite12wh      long 0
2db2c 95d 00 00 00 00 | sprite13pointer long 0
2db30 95e 00 00 00 00 | sprite13xy      long 0
2db34 95f 00 00 00 00 | sprite13wh      long 0
2db38 960 00 00 00 00 | sprite14pointer long 0
2db3c 961 00 00 00 00 | sprite14xy      long 0
2db40 962 00 00 00 00 | sprite14wh      long 0
2db44 963 00 00 00 00 | sprite15pointer long 0
2db48 964 00 00 00 00 | sprite15xy      long 0
2db4c 965 00 00 00 00 | sprite15wh      long 0
2db50 966 00 00 00 00 | sprite16pointer long 0
2db54 967 00 00 00 00 | sprite16xy      long 0
2db58 968 00 00 00 00 | sprite16wh      long 0
2db5c 969 00 00 00 00 | sprite17pointer long 0
2db60 96a 00 00 00 00 | sprite17xy      long 0
2db64 96b 00 00 00 00 | sprite17wh      long 0
2db68 96c 00 00 00 00 | sprite18pointer long 0
2db6c 96d 00 00 00 00 | sprite18xy      long 0
2db70 96e 00 00 00 00 | sprite18wh      long 0
2db74 96f 00 00 00 00 | spritenum long 0
2db78 970             | 
2db78 970 00 00 00 00 | spriteline long 0
2db7c 971 84 03 00 00 | sprite_x long 900
2db80 972 00 00 00 00 | sprite_y long 0
2db84 973 10 00 00 00 | sprite_w long 16
2db88 974 40 00 00 00 | sprite_h long 64
2db8c 975 00 00 00 00 | l2 long 0
2db90 976 00 00 00 00 | t5 long 0
2db94 977 00 00 00 00 | t6 long 0
2db98 978 00 00 00 00 | t7 long 0
2db9c 979 00 00 00 00 | t8 long 0
2dba0 97a 00 00 00 00 | t9 long 0
2dba4 97b 00 00 00 00 | preloadaddr long 0
2dba8 97c 00 00 00 00 | preloadlineaddr long 0
2dbac 97d 00 04 00 00 | a1024 long 1024
2dbb0 97e             | 
2dbb0 97e E0 03 00 00 | aa long 992
2dbb4 97f FF 03 00 00 | a1023 long 1023
2dbb8 980 00 10 00 00 | a4096 long 4096
2dbbc 981             |  fit 368
2dbbc 981             | _psram_spin2_dat_
2dbbc 981 00 00 00 00 
      ...             
2dcb4 9bf 00 00 00 00 
2dcb8 9c0 00 00 00 00 |     listdata long 0[8*8]
2dcbc 9c1             |             orgh
2dcbc                 | 
2dcbc                 | ' driver state
2dcbc     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2dcc0     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2dcc4                 | 
2dcc4                 | ' delay profile
2dcc4     07 00 00 00 
2dcc8     00 CF 7B 05 
2dccc     80 D1 F0 08 
2dcd0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2dcd4     80 C4 60 0F 
2dcd8     80 39 7A 12 
2dcdc     40 2D D9 13 
2dce0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2dce4                 | 
2dce4                 | ' data to be passed to driver when starting it
2dce4                 | startupData
2dce4     00 00 00 00 |     long    0           ' current frequency
2dce8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2dcec     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2dcf0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2dcf4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2dcf8     04 DD 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2dcfc     84 DD 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2dd00     A4 DD 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2dd04                 | 
2dd04                 | ' data for memory
2dd04                 | deviceData
2dd04                 |     ' 16 bank parameters follow (16MB per bank)
2dd04     00 00 00 00 
      ...             
2dd3c     00 00 00 00 
2dd40     00 00 00 00 |     long    0[16]                               ' banks 0-15
2dd44                 |     ' 16 banks of pin parameters follow
2dd44     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2dd48     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2dd4c     FF FF FF FF 
      ...             
2dd7c     FF FF FF FF 
2dd80     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2dd84                 | 
2dd84                 | ' data for COG polling
2dd84                 | qosData 
2dd84     00 00 FF FF 
2dd88     00 00 FF FF 
2dd8c     00 00 FF FF 
2dd90     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2dd94     00 00 FF FF 
2dd98     00 00 FF FF 
2dd9c     00 00 FF FF 
2dda0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2dda4                 |     
2dda4                 | ' mailbox storage
2dda4                 | 
2dda4                 | mailboxes
2dda4     00 00 00 00 
      ...             
2ddfc     00 00 00 00 
2de00     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2de04                 | 	alignl
2de04                 | _psram16drv_spin2_dat_
2de04                 |                             orgh
2de04     00 00 00 00 
      ...             
2de1c     00 00 00 00 
2de20     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2de24                 | 
2de24                 | driver_start
2de24                 |                             org
2de24 000             | '..................................................................................................
2de24 000             | ' Memory layout for COG RAM once operational:
2de24 000             | '
2de24 000             | '  COG RAM address      Usage
2de24 000             | '  ---------------      ----
2de24 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2de24 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2de24 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2de24 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2de24 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2de24 000             | '  ~$198-$1F3           State and register variables
2de24 000             | '
2de24 000             | ' Also during driver COG startup:
2de24 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2de24 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2de24 000             | '..................................................................................................
2de24 000             |                             
2de24 000             | ' Mailbox storage after vector initialization
2de24 000             | 
2de24 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2de28 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2de2c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2de30 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2de34 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2de38 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2de3c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2de40 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2de44 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2de48 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2de4c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2de50 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2de54 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2de58 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2de5c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2de60 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2de64 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2de68 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2de6c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2de70 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2de74 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2de78 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2de7c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2de80 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2de84 018             | 
2de84 018             | ' Mailbox parameter addresses per COG once patched
2de84 018             |                             
2de84 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2de88 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2de8c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2de90 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2de94 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2de98 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2de9c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2dea0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2dea4 020             | 
2dea4 020             | '..................................................................................................
2dea4 020             | ' Per COG request and state setup and service branching
2dea4 020             |         
2dea4 020             | cog0                 
2dea4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2dea8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2deac 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2deb0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2deb4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2deb8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2debc 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2dec0 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2dec4 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2dec8 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2decc 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2ded0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2ded4 02c             | cog1                        
2ded4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2ded8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2dedc 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2dee0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2dee4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dee8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2deec 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2def0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2def4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2def8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2defc 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2df00 037 33 CA 63 FD |                             execf   request-0               'jump to service
2df04 038             | cog2                         
2df04 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2df08 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2df0c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2df10 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2df14 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2df18 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2df1c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2df20 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2df24 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2df28 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2df2c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2df30 043 33 CA 63 FD |                             execf   request-0               'jump to service
2df34 044             | cog3                        
2df34 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2df38 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2df3c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2df40 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2df44 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2df48 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2df4c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2df50 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2df54 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2df58 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2df5c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2df60 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2df64 050             | cog4                        
2df64 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2df68 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2df6c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2df70 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2df74 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2df78 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2df7c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2df80 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2df84 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2df88 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2df8c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2df90 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2df94 05c             | cog5                        
2df94 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2df98 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2df9c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2dfa0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2dfa4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dfa8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dfac 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2dfb0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2dfb4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2dfb8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dfbc 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dfc0 067 33 CA 63 FD |                             execf   request-0               'jump to service
2dfc4 068             | cog6                        
2dfc4 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2dfc8 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2dfcc 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2dfd0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2dfd4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dfd8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dfdc 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2dfe0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2dfe4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2dfe8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dfec 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dff0 073 33 CA 63 FD |                             execf   request-0               'jump to service
2dff4 074             | cog7                        
2dff4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2dff8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2dffc 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2e000 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2e004 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2e008 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2e00c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2e010 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2e014 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2e018 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2e01c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2e020 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2e024 080             |                             fit     128
2e024 080             | 
2e024 080             |                             fit     128
2e024 080             | pad                         long    0[128-$]                'align init code to $80
2e024 080             | 
2e024 080             | '..................................................................................................
2e024 080             | 
2e024 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2e024 080             | 
2e024 080             | init                        
2e024 080             |                             ' get driver scratch long address in hub
2e024 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2e028 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2e02c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2e030 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2e034 084             |                     
2e034 084             |                             ' read in the additional LUT RAM code
2e034 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2e038 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2e03c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2e040 087             | 
2e040 087             |                             ' read the startup parameters
2e040 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2e044 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2e048 089             | 
2e048 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2e048 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2e04c 08a             | 
2e04c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2e050 08b 01 00 00 5F 
2e054 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2e058 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2e05c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2e060 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2e064 090             | 
2e064 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2e064 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2e068 091 01 00 00 FF 
2e06c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2e070 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2e074 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2e078 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2e07c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2e080 097 08 DE 47 F5 |                             or      a, #8
2e084 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2e088 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2e08c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2e090 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2e094 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2e098 09d 01 DE 07 F1 |                             add     a, #1
2e09c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2e0a0 09f             |  
2e0a0 09f             |                             ' setup device control pin states
2e0a0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2e0a4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2e0a8 0a1 01 00 00 FF 
2e0ac 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2e0b0 0a3             | 
2e0b0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2e0b4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2e0b8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2e0bc 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2e0c0 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2e0c4 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2e0c8 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2e0cc 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2e0d0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2e0d4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2e0d8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2e0dc 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2e0e0 0af             | pinloop
2e0e0 0af             |                             ' generate minimum CE high time before access
2e0e0 0af A1 07 00 FF 
2e0e4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2e0e8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2e0ec 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2e0f0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2e0f4 0b4 1F DE 63 FD |                             waitx   a                       'delay
2e0f8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2e0fc 0b6             | 
2e0fc 0b6             |                             ' setup the COG mailboxes and addresses 
2e0fc 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2e100 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2e104 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2e108 0b9             | 
2e108 0b9 28 2E 64 FD |                             setq    #24-1
2e10c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2e110 0bb             | 
2e110 0bb             |                             ' setup the polling loop for active COGs 
2e110 0bb 01 C2 63 FD |                             cogid   id
2e114 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2e118 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2e11c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2e120 0bf 0A F0 07 F6 |                             mov     ptra, #10
2e124 0c0 E1 F1 03 FA |                             mul     ptra, id
2e128 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2e12c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2e130 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2e134 0c4 03 C2 07 FA |                             mul     id, #3
2e138 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2e13c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2e140 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2e144 0c8 D8 01 B0 FD |                             call    #reloadcogs
2e148 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2e14c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2e150 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2e150 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2e154 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2e158 0cd 08 04 DC FC |                             rep     #2, #8
2e15c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2e160 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2e164 0d0             | 
2e164 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2e164 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2e164 0d0 01 C2 63 FD |                             cogid   id
2e168 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2e16c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2e170 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2e174 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2e178 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2e17c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2e180 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2e184 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2e188 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2e18c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2e190 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2e194 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2e198 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2e19c 0de A5 E5 03 F1 |                             add     d, const512
2e1a0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2e1a4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2e1a8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2e1ac 0e2             |                             
2e1ac 0e2             |                             ' setup register values for control vector loop setup after we return
2e1ac 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2e1b0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2e1b4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2e1b8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2e1bc 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2e1c0 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2e1c4 0e8 D0 C3 8F F9 |                             altd    id, #id0
2e1c8 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2e1cc 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2e1d0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2e1d4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2e1d8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2e1dc 0ee             |  
2e1dc 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2e1e0 0ef 07 CA 07 F5 |                             and     request, #7
2e1e4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2e1e8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2e1ec 0f2             |                             fit     $100                    'ensure all init code fits this space
2e1ec 0f2             | 
2e1ec 0f2             |                             fit     $100                    'ensure all init code fits this space
2e1ec 0f2             | 
2e1ec 0f2 00 00 00 00 
      ...             
2e21c 0fe 00 00 00 00 
2e220 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2e224 100             | 
2e224 100             | '..................................................................................................
2e224 100             | ' Error result handling and COG notification of request completion
2e224 100             | 
2e224 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2e228 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2e22c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2e230 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2e234 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2e238 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2e23c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2e240 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2e244 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2e248 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2e24c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2e250 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2e254 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2e258 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2e25c 10e             | ' Poller re-starts here after a COG is serviced
2e25c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2e260 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2e264 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2e268 111             | ' Main dynamic polling loop repeats until a request arrives
2e268 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2e26c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2e270 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2e274 114             | 
2e274 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2e278 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2e27c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2e280 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2e284 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2e288 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2e28c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2e290 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2e294 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2e298 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2e29c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2e2a0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2e2a4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2e2a8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2e2ac 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2e2b0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2e2b4 124             | 
2e2b4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2e2b8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2e2bc 126             |  
2e2bc 126             | '..................................................................................................
2e2bc 126             | ' List handler                               
2e2bc 126             | 
2e2bc 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2e2c0 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2e2c4 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2e2c8 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2e2cc 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2e2d0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2e2d4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2e2d8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2e2dc 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2e2e0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2e2e4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2e2e8 131 33 00 60 FD |                             execf   0-0                     'process the request 
2e2ec 132             | 
2e2ec 132             | '..................................................................................................
2e2ec 132             | ' Restoring per COG state and resuming where we left off
2e2ec 132             | 
2e2ec 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2e2f0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2e2f4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2e2f8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2e2fc 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2e300 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2e304 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2e308 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2e30c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2e310 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2e314 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2e318 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2e31c 13e             |                    
2e31c 13e             | '..................................................................................................
2e31c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2e31c 13e             | 
2e31c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2e320 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2e324 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2e328 141 D0 DF B7 F9 |                             setd    a, #id0
2e32c 142 D8 DF BF F9 |                             sets    a, #addr1
2e330 143 FE FF FF FF 
2e334 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2e338 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2e33c 146 3F DE A7 F9 |                             alti    a, #%111_111 
2e340 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2e344 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2e348 149 01 E2 63 FD |                             cogid   c
2e34c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2e350 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2e354 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2e358 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2e35c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2e360 14f 00 E0 03 F6 |                             mov     b, 0-0
2e364 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2e368 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2e36c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2e370 153 0C 00 90 AD |             if_z            jmp     #excluded               
2e374 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2e378 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2e37c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2e380 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2e384 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2e388 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2e38c 15a             | 
2e38c 15a             | 'determine priority cogs and build instructions for the polling sequence
2e38c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2e390 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2e394 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2e398 15d             | 
2e398 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2e39c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2e3a0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2e3a4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2e3a8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2e3ac 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2e3b0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2e3b4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2e3b8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2e3bc 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2e3c0 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2e3c4 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2e3c8 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2e3cc 16a             | endprioloop
2e3cc 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2e3d0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2e3d4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2e3d8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2e3dc 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2e3e0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2e3e4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2e3e8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2e3ec 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2e3f0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2e3f4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2e3f8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2e3fc 176             | 
2e3fc 176             | ' populate the round robin COG polling instructions
2e3fc 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2e400 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2e404 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2e408 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2e40c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2e410 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2e414 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2e418 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2e41c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2e420 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2e424 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2e428 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2e42c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2e430 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2e434 184             | '..................................................................................................
2e434 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2e434 184             | 
2e434 184             | set_latency                                                 '            (a) set latency
2e434 184             | get_latency                                                 '            (b) get latency
2e434 184             | set_burst                                                   '            (c) set burst size of bank
2e434 184             | get_burst                                                   '            (d) get burst size of bank
2e434 184             |                                                             '            (e) dump state
2e434 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2e438 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2e43c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2e440 187             |                                                             ' | | | | e  account for following AUGS
2e440 187 04 00 00 FF 
2e444 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2e448 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2e44c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2e450 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2e454 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2e458 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2e45c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2e460 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2e464 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2e468 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2e46c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2e470 193             | 
2e470 193             | '..................................................................................................
2e470 193             | ' Misc EXECF code
2e470 193             | 
2e470 193 33 72 63 FD | start_read_exec             execf   newburstr
2e474 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2e478 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2e47c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2e480 197             | 
2e480 197             | '..................................................................................................
2e480 197             | ' Variables
2e480 197             | 
2e480 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2e484 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2e488 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2e48c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2e490 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2e494 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2e498 19d             | 
2e498 19d 00 00 00 80 | xfreq1          long    $80000000
2e49c 19e 00 00 00 40 | xfreq2          long    $40000000
2e4a0 19f 03 00 00 00 | delay           long    3
2e4a4 1a0             | 
2e4a4 1a0             | lutcodeaddr                 
2e4a4 1a0             | startupparams
2e4a4 1a0             | excludedcogs                                    'careful: shared register use!
2e4a4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2e4a8 1a1 00 00 00 00 | flags           long    0
2e4ac 1a2             | mask                                            'careful: shared register use!
2e4ac 1a2 00 00 00 00 | resetmaskA      long    0
2e4b0 1a3             | limit                                           'careful: shared register use!
2e4b0 1a3 00 00 00 00 | resetmaskB      long    0
2e4b4 1a4 00 00 00 00 | datapins        long    0
2e4b8 1a5             | const512                                        'careful: shared register use!
2e4b8 1a5 00 00 00 00 | devicelist      long    0
2e4bc 1a6 00 00 00 00 | coglist         long    0
2e4c0 1a7 00 00 00 00 | mbox            long    0 
2e4c4 1a8             | 
2e4c4 1a8             | clkpin                                          'shared with code patched during init
2e4c4 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2e4c8 1a9             | cspin                                           'shared with code patched during init
2e4c8 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2e4cc 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2e4d0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2e4d4 1ac 01 00 00 00 | clkdelay        long    1
2e4d8 1ad 00 00 00 00 | regdatabus      long    0
2e4dc 1ae             | 
2e4dc 1ae 10 00 00 00 | deviceaddr      long    $10
2e4e0 1af             | rrcounter
2e4e0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2e4e4 1b0             | 
2e4e4 1b0             | ' jump addresses for the per COG handlers
2e4e4 1b0 20 00 00 00 | cog0_handler    long    cog0
2e4e8 1b1 2C 00 00 00 | cog1_handler    long    cog1
2e4ec 1b2 38 00 00 00 | cog2_handler    long    cog2
2e4f0 1b3 44 00 00 00 | cog3_handler    long    cog3
2e4f4 1b4 50 00 00 00 | cog4_handler    long    cog4
2e4f8 1b5 5C 00 00 00 | cog5_handler    long    cog5
2e4fc 1b6 68 00 00 00 | cog6_handler    long    cog6
2e500 1b7 74 00 00 00 | cog7_handler    long    cog7
2e504 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2e508 1b9             | 
2e508 1b9             | ' EXECF sequences
2e508 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2e50c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2e510 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2e514 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2e518 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2e51c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2e520 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2e524 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2e524 1c0             | 
2e524 1c0             | 
2e524 1c0             | ' SKIPF sequences
2e524 1c0             | skiptable
2e524 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2e528 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2e52c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2e530 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2e534 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2e538 1c5 00 00 00 00 | pattern2        long    0
2e53c 1c6 00 00 00 00 | pattern3        long    0
2e540 1c7 77 02 00 00 | singlelong      long    %1001110111  
2e544 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2e548 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2e54c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2e550 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2e554 1cc             | 
2e554 1cc             | ' LUT RAM address values
2e554 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2e558 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2e55c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2e560 1cf F6 02 00 00 | noread          long    noread_lut
2e564 1d0             | 
2e564 1d0 00 00 00 00 | id0             long    0
2e568 1d1 01 00 00 00 | id1             long    1
2e56c 1d2 02 00 00 00 | id2             long    2
2e570 1d3 03 00 00 00 | id3             long    3
2e574 1d4 04 00 00 00 | id4             long    4
2e578 1d5 05 00 00 00 | id5             long    5
2e57c 1d6 06 00 00 00 | id6             long    6
2e580 1d7 07 00 00 00 | id7             long    7
2e584 1d8             | 
2e584 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2e584 1d8             | 'and COG updates and need to follow immediately after id0-id7
2e584 1d8 00 00 00 00 | addr1           long    0
2e588 1d9 00 00 00 00 | hubdata         long    0
2e58c 1da 00 00 00 00 | count           long    0
2e590 1db 00 00 00 00 | addr2           long    0
2e594 1dc 00 00 00 00 | total           long    0
2e598 1dd 00 00 00 00 | offset1         long    0
2e59c 1de 00 00 00 00 | offset2         long    0
2e5a0 1df 00 00 00 00 | link            long    0
2e5a4 1e0             | 
2e5a4 1e0             | burstwrite                                      'note shared register use during init
2e5a4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2e5a8 1e1 00 00 00 00 | id              long    0
2e5ac 1e2             | 
2e5ac 1e2 00 00 00 00 | header          long    0
2e5b0 1e3 00 00 00 00 | trailer         long    0
2e5b4 1e4 00 00 00 00 | cmdaddr         long    0
2e5b8 1e5 00 00 00 00 | request         long    0
2e5bc 1e6 00 00 00 00 | rrlimit         long    0
2e5c0 1e7 00 00 00 00 | pinconfig       long    0
2e5c4 1e8 00 00 00 00 | clks            long    0
2e5c8 1e9 00 00 00 00 | resume          long    0
2e5cc 1ea 00 00 00 00 | orighubsize     long    0
2e5d0 1eb 00 00 00 00 | wrclks          long    0
2e5d4 1ec             | 
2e5d4 1ec 00 00 00 00 | pattern         long    0
2e5d8 1ed 00 00 00 00 | hubscratch      long    0
2e5dc 1ee 00 10 00 00 | val4k           long    4096
2e5e0 1ef             | 
2e5e0 1ef             | ' temporary general purpose regs
2e5e0 1ef 00 00 00 00 | a               long    0
2e5e4 1f0 00 00 00 00 | b               long    0
2e5e8 1f1 00 00 00 00 | c               long    0
2e5ec 1f2 00 00 00 00 | d               long    0
2e5f0 1f3             |                 fit     502
2e5f0 1f3             | 
2e5f0 1f3             |                 fit     502
2e5f0 1f3             | 
2e5f0 1f3             | '..................................................................................................
2e5f0 1f3             | 
2e5f0 1f3             |             orgh
2e5f0                 | 
2e5f0                 | lut_code
2e5f0                 | 'HW init code up to 80 longs
2e5f0                 | 
2e5f0                 | '..................................................................................................
2e5f0                 | ' Memory layout for LUT RAM once operational:
2e5f0                 | '
2e5f0                 | '  LUT RAM address      Usage
2e5f0                 | '  ---------------      ----
2e5f0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2e5f0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2e5f0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2e5f0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2e5f0                 | '
2e5f0                 | ' Also during driver COG startup:
2e5f0                 | ' $230-$24F is used for HW init setup
2e5f0                 | ' $250-$26F is used as temporary vector storage 
2e5f0                 | '..................................................................................................
2e5f0                 | 
2e5f0                 |                 org $230    
2e5f0 230             | 
2e5f0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2e5f0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2e5f4 231 24 16 60 FD |                             pollxfi
2e5f8 232 FF AA 2A FF 
2e5fc 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2e600 234 28 00 B0 FD |                             call    #sendqspi
2e604 235 07 F8 07 FF 
2e608 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2e60c 237 28 00 B0 FD |                             call    #sendspi
2e610 238 F8 07 78 FF 
2e614 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2e618 23a 1C 00 B0 FD |                             call    #sendspi
2e61c 23b 7F 78 78 FF 
2e620 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2e624 23d 10 00 B0 FD |                             call    #sendspi 
2e628 23e 2D 00 64 FD |                             ret
2e62c 23f             | 
2e62c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2e630 240 32 0C 64 FD |                             skipf   #%110
2e634 241 9C EF 03 F6 |                             mov     pb, xsendimm
2e638 242             | 
2e638 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2e63c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2e640 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2e644 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2e648 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2e64c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2e650 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2e654 249 50 48 63 FD |                             fltl    datapins                'float data bus
2e658 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2e65c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2e660 24c             | 
2e660 24c 00 00 00 00 
2e664 24d 00 00 00 00 
2e668 24e 00 00 00 00 
2e66c 24f 00 00 00 00 |                 long    0[$270-32-$]
2e670 250             |                 fit     $270-32  ' keep room for 32 vector longs
2e670 250             |     
2e670 250             |                 fit     $270-32  ' keep room for 32 vector longs
2e670 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2e670 250             | rw_vect ' PSRAM jump vectors
2e670 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e674 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e678 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2e67c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2e680 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2e684 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2e688 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2e68c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2e690 258             | ro_vect ' R/O PSRAM jump vectors
2e690 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e694 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e698 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2e69c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2e6a0 25c 00 01 00 00 |                 long    unsupported
2e6a4 25d 00 01 00 00 |                 long    unsupported
2e6a8 25e 00 01 00 00 |                 long    unsupported
2e6ac 25f 00 01 00 00 |                 long    unsupported
2e6b0 260             | ctrl_vect ' Control jump vectors
2e6b0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2e6b4 261 00 01 00 00 |                 long    unsupported
2e6b8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2e6bc 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2e6c0 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2e6c4 265 00 01 00 00 |                 long    unsupported
2e6c8 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2e6cc 267 3E 01 00 00 |                 long    reconfig 
2e6d0 268             | no_vect ' Invalid bank jump vectors
2e6d0 268 01 01 00 00 |                 long    invalidbank
2e6d4 269 01 01 00 00 |                 long    invalidbank
2e6d8 26a 01 01 00 00 |                 long    invalidbank
2e6dc 26b 01 01 00 00 |                 long    invalidbank
2e6e0 26c 01 01 00 00 |                 long    invalidbank
2e6e4 26d 01 01 00 00 |                 long    invalidbank
2e6e8 26e 01 01 00 00 |                 long    invalidbank
2e6ec 26f 01 01 00 00 |                 long    invalidbank
2e6f0 270             |                 fit     $270
2e6f0 270             | 
2e6f0 270             |                 fit     $270
2e6f0 270             | '..................................................................................................
2e6f0 270             | ' PSRAM READS
2e6f0 270             |                                                             ' a b c d e f
2e6f0 270             |                                                             ' B W L B R L  (a) byte read
2e6f0 270             |                                                             ' Y O O U E O  (b) word read
2e6f0 270             |                                                             ' T R N R S C  (c) long read
2e6f0 270             |                                                             ' E D G S U K  (d) new burst read
2e6f0 270             |                                                             '       T M E  (e) resumed sub-burst
2e6f0 270             |                                                             '         E D  (f) locked sub-burst
2e6f0 270             | 
2e6f0 270             | 
2e6f0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2e6f4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2e6f8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2e6fc 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2e700 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2e704 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2e708 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2e70c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2e710 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2e714 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2e718 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2e71c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2e720 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2e724 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2e728 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2e72c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2e730 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2e734 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2e738 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2e73c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2e740 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2e744 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2e748 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2e74c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2e750 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2e754 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2e758 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2e75c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2e760 28c             | 
2e760 28c             |                             ' fall through to read bursts
2e760 28c             |                         
2e760 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2e760 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e764 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e768 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e76c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e770 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2e774 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2e778 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2e77c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2e780 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2e784 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2e788 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2e78c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2e790 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2e794 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2e798 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2e79c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2e7a0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2e7a4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2e7a8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2e7ac 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2e7b0 2a0 E8 D1 03 F1 |                             add     clks, clks
2e7b4 2a1             | readcommon
2e7b4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2e7b8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e7bc 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2e7c0 2a4             | 
2e7c0 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e7c4 2a5 69 C8 63 FD |                             rev     cmdaddr
2e7c8 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e7cc 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2e7d0 2a8             | 
2e7d0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e7d4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2e7d8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2e7d8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2e7dc 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2e7e0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2e7e4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2e7e8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2e7e8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2e7ec 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2e7f0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2e7f4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2e7f8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2e7fc 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2e800 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2e800 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2e804 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2e808 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2e80c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2e810 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2e814 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2e818 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2e81c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2e820 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2e824 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2e828 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2e82c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2e830 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2e834 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2e838 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2e838 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2e83c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2e840 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2e844 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2e848 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2e84c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2e850 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2e854 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2e858 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2e85c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2e860 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2e864 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2e868 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2e86c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2e870 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2e874 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2e878 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2e87c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2e880 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2e884 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2e888 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2e88c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2e890 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2e894 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2e898 2da 10 03 90 FD |                             jmp     #writecommon
2e89c 2db             | 
2e89c 2db             | '..................................................................................................
2e89c 2db             | ' Burst continuation testing
2e89c 2db             | 
2e89c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2e8a0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2e8a4 2dd             | continue_read_lut          
2e8a4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2e8a8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2e8ac 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2e8b0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2e8b4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2e8b8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2e8bc 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2e8c0 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2e8c4 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2e8c8 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2e8cc 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2e8d0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2e8d4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2e8d8 2ea             | 
2e8d8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2e8dc 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2e8e0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2e8e4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2e8e8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2e8ec 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2e8f0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2e8f4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2e8f8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2e8fc 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2e900 2f4 2A 1C 66 0D |             _ret_           push    #poller
2e904 2f5             | 
2e904 2f5             | 
2e904 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2e908 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2e908 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2e90c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2e910 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2e914 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2e918 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2e91c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2e920 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2e924 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2e928 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2e92c 2ff             | '..................................................................................................
2e92c 2ff             | ' Completion of requests
2e92c 2ff             | 
2e92c 2ff             | complete_rw_lut             
2e92c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2e930 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2e934 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2e938 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2e93c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2e940 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2e944 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2e948 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2e94c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2e950 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2e954 309 32 62 64 AD |             if_z            skipf   #%110001
2e958 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2e95c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2e960 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2e964 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2e968 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2e96c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2e970 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2e974 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2e978 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2e97c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2e980 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2e984 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2e988 316             |                                                             ' skipcase (a) gfx copy to/from hub
2e988 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2e988 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2e988 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2e98c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2e990 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2e994 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2e998 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2e99c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2e9a0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2e9a4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2e9a8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2e9ac 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2e9b0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2e9b4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2e9b8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2e9bc 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2e9c0 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2e9c4 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2e9c8 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2e9cc 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2e9d0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2e9d4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2e9d8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2e9dc 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2e9e0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2e9e4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2e9e8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2e9ec 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2e9f0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2e9f4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2e9f8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2e9fc 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2ea00 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2ea04 335 DF B7 03 A6 |             if_z            mov     addr2, link
2ea08 336 34 FF 9F AD |             if_z            jmp     #checknext
2ea0c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2ea10 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2ea14 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2ea18 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2ea1c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2ea20 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2ea24 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2ea28 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2ea2c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2ea30 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2ea34 341             | 
2ea34 341             | '..................................................................................................
2ea34 341             | ' PSRAM WRITES
2ea34 341             |                                                             '  a b c d e f g h
2ea34 341             | 
2ea34 341             |                                                             '  B W L F B R L L (a) byte write(s)
2ea34 341             |                                                             '  Y O O I U E O O (b) word write(s)
2ea34 341             |                                                             '  T R N L R S C C (c) long write(s)
2ea34 341             |                                                             '  E D G L S U K K (d) resumed fill
2ea34 341             |                                                             '          T M E E (e) new burst write
2ea34 341             |                                                             '            E D D (f) resumed burst
2ea34 341             |                                                             '              F B (g) locked fill
2ea34 341             |                                                             '              I U (h) locked burst write
2ea34 341             |                                                             '              L R 
2ea34 341             |                                                             '              L S 
2ea34 341             |                                                             '                T 
2ea34 341             | 
2ea34 341             | w_single                   
2ea34 341             | w_fill_cont           
2ea34 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2ea38 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2ea3c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2ea40 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2ea44 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2ea48 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2ea4c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2ea50 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2ea54 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2ea58 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2ea5c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2ea60 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2ea64 34d             |                ' disable call to r_resume_burst for single longs when z=0
2ea64 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2ea68 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2ea6c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2ea70 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2ea74 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2ea78 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2ea7c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2ea80 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2ea84 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2ea88 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2ea8c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2ea90 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2ea94 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2ea98 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2ea9c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2eaa0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2eaa4 35d             |         
2eaa4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2eaa4 35d             |             '
2eaa4 35d             |             '  At least one of these 3 optional components will be sent
2eaa4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2eaa4 35d             |             '     body - N x full longs of data
2eaa4 35d             |             '     trailer - last partial long of data
2eaa4 35d             |             '
2eaa4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2eaa4 35d             |             '
2eaa4 35d             |             'Case    Type                           Sends
2eaa4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2eaa4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2eaa4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2eaa4 35d             |             ' 4)     Multiple long fill             body only
2eaa4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2eaa4 35d             | 
2eaa4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2eaa4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2eaa8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2eaac 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2eab0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2eab4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2eab8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2eabc 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2eac0 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2eac4 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2eac8 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2eacc 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2ead0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2ead4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2ead8 36a             |                             
2ead8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2eadc 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2eae0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2eae4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2eae8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2eaec 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2eaf0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2eaf4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2eaf8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2eafc 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2eb00 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2eb04 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2eb08 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2eb0c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2eb10 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2eb14 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2eb18 37a             | 
2eb18 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2eb1c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2eb20 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2eb24 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2eb28 37e             |                  
2eb28 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2eb2c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2eb30 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2eb34 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2eb38 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2eb3c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2eb40 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2eb44 385             | 
2eb44 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2eb48 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2eb4c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2eb50 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2eb54 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2eb58 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2eb5c 38b             | 
2eb5c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2eb5c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2eb60 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2eb64 38d 2A B0 63 FD |                             push    addr1                   'save address
2eb68 38e             | 
2eb68 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2eb68 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2eb6c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2eb70 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2eb74 391             |             
2eb74 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2eb78 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2eb7c 393 2B B0 63 FD |                             pop     addr1                   'restore address
2eb80 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2eb84 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2eb88 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2eb8c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2eb90 398             | 
2eb90 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2eb94 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2eb98 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2eb9c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2eba0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2eba4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2eba8 39e             | 
2eba8 39e             |                             'trailer is done
2eba8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2ebac 39f             | 
2ebac 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2ebb0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2ebb4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2ebb8 3a2             | 
2ebb8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2ebbc 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2ebc0 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2ebc4 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2ebc8 3a6             |                             
2ebc8 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2ebcc 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2ebd0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2ebd4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2ebd8 3aa             |                                                          
2ebd8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2ebdc 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2ebe0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2ebe4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2ebe8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2ebec 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2ebf0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2ebf4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2ebf8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2ebfc 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2ec00 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2ec04 3b5             |  
2ec04 3b5 59 52 63 FD |                             drvh    cspin
2ec08 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2ec0c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2ec10 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2ec14 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2ec18 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2ec1c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2ec20 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2ec24 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2ec28 3be EA E5 03 F6 |                             mov     d, orighubsize
2ec2c 3bf EF E5 63 F0 |                             shl     d, a
2ec30 3c0 F2 E3 83 F1 |                             sub     c, d
2ec34 3c1 DD E3 03 F1 |                             add     c, offset1
2ec38 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2ec3c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2ec40 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2ec44 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2ec48 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2ec4c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2ec50 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2ec54 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2ec58 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2ec5c 3cb BB D3 03 F6 |                             mov     resume, restorefill
2ec60 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2ec64 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2ec68 3ce 6C FC BF CD |             if_c            call    #yield
2ec6c 3cf 2D 00 64 FD |                             ret
2ec70 3d0             |                            
2ec70 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2ec70 3d0             |                       '     rczl    pa                      'rotate left into address offset
2ec70 3d0             |                       '     rczl    c wcz                   'restore count and flags
2ec70 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2ec74 3d1 02 EC 67 F0 |                             shl     pa, #2
2ec78 3d2 28 06 64 AD |             if_z            setq    #3
2ec7c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2ec80 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2ec84 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2ec88 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2ec8c 3d7             | 
2ec8c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2ec90 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2ec94 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2ec98 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2ec9c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2eca0 3dc             |                 fit 1024-32
2eca0 3dc             |         
2eca0 3dc             | 
2eca0 3dc             | '..................................................................................................
2eca0 3dc             | 
2eca0 3dc             |                 fit 1024-32
2eca0 3dc 00 00 00 00 
2eca4 3dd 00 00 00 00 
2eca8 3de 00 00 00 00 
2ecac 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2ecb0 3e0             |                 org 1024-32
2ecb0 000             | 
2ecb0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2ecb0 000 00 00 00 00 |                 long $0000
2ecb4 001 11 11 00 00 |                 long $1111
2ecb8 002 22 22 00 00 |                 long $2222
2ecbc 003 33 33 00 00 |                 long $3333
2ecc0 004 44 44 00 00 |                 long $4444
2ecc4 005 55 55 00 00 |                 long $5555
2ecc8 006 66 66 00 00 |                 long $6666
2eccc 007 77 77 00 00 |                 long $7777
2ecd0 008 88 88 00 00 |                 long $8888
2ecd4 009 99 99 00 00 |                 long $9999
2ecd8 00a AA AA 00 00 |                 long $aaaa
2ecdc 00b BB BB 00 00 |                 long $bbbb
2ece0 00c CC CC 00 00 |                 long $cccc
2ece4 00d DD DD 00 00 |                 long $dddd
2ece8 00e EE EE 00 00 |                 long $eeee
2ecec 00f FF FF 00 00 |                 long $ffff
2ecf0 010             | 
2ecf0 010             | 'masks
2ecf0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2ecf4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2ecf8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2ecfc 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2ed00 014             | 
2ed00 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2ed04 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2ed08 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2ed0c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2ed10 018             | 
2ed10 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2ed14 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2ed18 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2ed1c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2ed20 01c             | 
2ed20 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2ed24 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2ed28 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2ed2c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2ed30 020             |         fit 1024
2ed30 020             | 
2ed30 020             |         fit 1024
2ed30 020             | 
2ed30 020             | '--------------------------------------------------------------------------------------------------
2ed30 020             |         orgh
2ed30                 | 
2ed30                 | gfxexpansion
2ed30                 |                             'simple line drawing graphics expansion of memory driver
2ed30                 |                             'jmp     #donerepeats                'just return for now
2ed30                 | 
2ed30     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2ed34     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2ed38     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2ed3c     DD E1 03 F6 |                             mov     b, offset1              'get error term
2ed40     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2ed44     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2ed48     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2ed4c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2ed50     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2ed54     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2ed58     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2ed5c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2ed60     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2ed64     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2ed68     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2ed6c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2ed70     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2ed74     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2ed78     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2ed7c     DC E5 33 F9 |                             getword d, total, #0            'get line width
2ed80     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2ed84     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2ed88     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2ed8c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2ed90     C3 03 80 FD |                             jmp     #readmask               'continue filling
2ed94                 | 	alignl
2ed94                 | _usbnew_spin2_dat_
2ed94                 |                 org     $000
2ed94 000             | 
2ed94 000             | usb_host_start
2ed94 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2ed98 001             | 
2ed98 001 03 00 00 FF 
2ed9c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2eda0 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2eda4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2eda8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2edac 006 29 70 63 FD |                 setq2   htmp
2edb0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2edb4 008             | 
2edb4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2edb8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2edbc 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2edc0 00b             | 
2edc0 00b             | '------------------------------------------------------------------------------
2edc0 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2edc0 00b             | ' special because the receiving function must not respond with either STALL or
2edc0 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2edc0 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2edc0 00b             | ' corrupt packet, it must ignore the transaction
2edc0 00b             | '------------------------------------------------------------------------------
2edc0 00b             | ' On entry:
2edc0 00b             | '   PTRA - start address of the SETUP data struct.
2edc0 00b             | ' On exit:
2edc0 00b             | '   retval - PID_ACK on success, otherwise error code.
2edc0 00b             | '------------------------------------------------------------------------------
2edc0 00b             | txn_setup
2edc0 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2edc4 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2edc8 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2edcc 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2edd0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2edd4 010             | .setup
2edd4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2edd8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eddc 012 2D 00 64 AD |         if_z    ret
2ede0 013 7C 0B B0 FD |                 call    #retry_wait
2ede4 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ede8 015 2D 00 64 AD |         if_z    ret
2edec 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2edf0 017 E0 FF 9F FD |                 jmp     #.setup
2edf4 018             | 
2edf4 018             | '------------------------------------------------------------------------------
2edf4 018             | ' IN/INTERRUPT transaction.
2edf4 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2edf4 018             | '------------------------------------------------------------------------------
2edf4 018             | ' On entry:
2edf4 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2edf4 018             | '     CRC(b19..23).
2edf4 018             | ' On exit:
2edf4 018             | '------------------------------------------------------------------------------
2edf4 018             | txn_in
2edf4 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2edf8 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2edfc 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2ee00 01b             | 
2ee00 01b             |                 ' Fall through to urx_packet
2ee00 01b             | 
2ee00 01b             | '------------------------------------------------------------------------------
2ee00 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2ee00 01b             | ' received are handshakes and IN DATAx.
2ee00 01b             | '------------------------------------------------------------------------------
2ee00 01b             | ' On entry:
2ee00 01b             | ' On exit:
2ee00 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2ee00 01b             | '     returned.
2ee00 01b             | '------------------------------------------------------------------------------
2ee00 01b             | urx_packet
2ee00 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2ee04 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2ee08 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2ee0c 01e 1A 92 63 FD |                 getct   hct2
2ee10 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2ee14 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2ee18 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2ee1c 022             | .wait_sop
2ee1c 022 22 A7 8A FA |                 rdpin   urx, dm
2ee20 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2ee24 024 08 00 90 CD |         if_c    jmp     #.get_pid
2ee28 025 FC 25 CC FB |                 jnct2   #.wait_sop
2ee2c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2ee30 027             | .get_pid
2ee30 027 28 02 B0 FD |                 call    #urx_next
2ee34 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2ee38 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2ee3c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2ee40 02b             | .chk_pid
2ee40 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ee44 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2ee48 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2ee4c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2ee50 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2ee54 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2ee58 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2ee5c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2ee60 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2ee64 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2ee68 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2ee6c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2ee70 037             | .ack_resend
2ee70 037 22 A7 82 FA |                 rqpin   urx, dm
2ee74 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2ee78 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2ee7c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2ee80 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2ee84 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2ee88 03d             | .chk_eop
2ee88 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ee8c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2ee90 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2ee94 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2ee98 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2ee9c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2eea0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2eea4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2eea8 045 2D 00 64 FD |                 ret
2eeac 046             | .idle
2eeac 046 22 A7 82 FA |                 rqpin   urx, dm
2eeb0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2eeb4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2eeb8 049 2D 00 64 FD |                 ret
2eebc 04a             | 
2eebc 04a             | '------------------------------------------------------------------------------
2eebc 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2eebc 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2eebc 04a             | ' if one is required.
2eebc 04a             | '------------------------------------------------------------------------------
2eebc 04a             | ' On entry:
2eebc 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2eebc 04a             | ' On exit:
2eebc 04a             | '------------------------------------------------------------------------------
2eebc 04a             | utx_token
2eebc 04a 22 A7 82 FA |                 rqpin   urx, dm
2eec0 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2eec4 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2eec8 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2eecc 04e 34 0D B0 CD |         if_c    call    #utx_pre
2eed0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2eed4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2eed8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2eedc 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2eee0 053             | .next_byte
2eee0 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2eee4 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2eee8 055             | .wait
2eee8 055 40 46 72 FD |                 testp   dp                      wc
2eeec 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2eef0 057 23 03 08 FC |                 akpin   dp
2eef4 058 22 A5 22 FC |                 wypin   utx, dm
2eef8 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2eefc 05a             | 
2eefc 05a             | '------------------------------------------------------------------------------
2eefc 05a             | ' SETUP/OUT/INTERRUPT transaction.
2eefc 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2eefc 05a             | '------------------------------------------------------------------------------
2eefc 05a             | ' On entry:
2eefc 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2eefc 05a             | '     CRC(b19..23).
2eefc 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2eefc 05a             | '   pkt_data - count of DATAx payload bytes to send.
2eefc 05a             | ' On exit:
2eefc 05a             | '------------------------------------------------------------------------------
2eefc 05a             | txn_out
2eefc 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2ef00 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2ef04 05c 00 00 C0 FF 
2ef08 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2ef0c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2ef10 05f             | 
2ef10 05f             |                 ' Fall through to utx_data
2ef10 05f             | 
2ef10 05f             | '------------------------------------------------------------------------------
2ef10 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2ef10 05f             | ' calculated while the data byte is being shifted out. Since data stage
2ef10 05f             | ' success/fail is not determined until the status stage of the transaction,
2ef10 05f             | ' this routine is only concerned about the current DATAx packet.
2ef10 05f             | '------------------------------------------------------------------------------
2ef10 05f             | ' On entry:
2ef10 05f             | '   PTRA - hub start address of the data to read.
2ef10 05f             | '   pkt_cnt - data payload size.
2ef10 05f             | ' On exit:
2ef10 05f             | '------------------------------------------------------------------------------
2ef10 05f             | utx_data
2ef10 05f 22 A7 82 FA |                 rqpin   urx, dm
2ef14 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2ef18 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2ef1c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2ef20 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2ef24 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2ef28 065 D8 0C B0 CD |         if_c    call    #utx_pre
2ef2c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2ef30 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2ef34 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2ef38 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2ef3c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2ef40 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2ef44 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2ef48 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2ef4c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2ef50 06f             | .read_byte
2ef50 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2ef54 070 F0 00 B0 FD |                 call    #utx_byte
2ef58 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2ef5c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2ef60 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2ef64 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2ef68 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2ef6c 076             | .send_crc
2ef6c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2ef70 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2ef74 078 D0 00 B0 FD |                 call    #utx_byte
2ef78 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2ef7c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2ef80 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2ef84 07c             | 
2ef84 07c             | '------------------------------------------------------------------------------
2ef84 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2ef84 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2ef84 07c             | ' expects that the packet includes at least the CRC word.
2ef84 07c             | '
2ef84 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2ef84 07c             | ' was requested, which makes it difficult to determine where the data stops
2ef84 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2ef84 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2ef84 07c             | ' USB-16 expected residual value of 0xB001.
2ef84 07c             | '
2ef84 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2ef84 07c             | ' so the caller can verify IN success before writing the data to its final
2ef84 07c             | ' destination.
2ef84 07c             | '------------------------------------------------------------------------------
2ef84 07c             | ' On entry:
2ef84 07c             | '   pkt_data - max byte count expected to be in the packet.
2ef84 07c             | '   newb_flg - signals new byte ready when toggled.
2ef84 07c             | ' On exit:
2ef84 07c             | '   pkt_cnt - actual number of bytes read.
2ef84 07c             | '------------------------------------------------------------------------------
2ef84 07c             | urx_data
2ef84 07c F7 75 03 F6 |                 mov     htmp2, pb
2ef88 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2ef8c 07e 00 00 C0 FF 
2ef90 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2ef94 080 BA EF 03 F6 |                 mov     pb, htmp2
2ef98 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2ef9c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2efa0 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2efa4 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2efa8 085             | .wait_byte
2efa8 085             | ' In-line rx for max speed
2efa8 085 22 A7 82 FA |                 rqpin   urx, dm
2efac 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2efb0 087 53 A5 02 F5 |                 and     utx, urx
2efb4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2efb8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2efbc 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2efc0 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2efc4 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2efc8 08d DC FF 9F FD |                 jmp     #.wait_byte
2efcc 08e             | .get_byte
2efcc 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2efd0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2efd4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2efd8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2efdc 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2efe0 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2efe4 094             | .end_crc
2efe4 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2efe8 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2efec 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2eff0 097 2D 00 64 1D |         if_a    ret
2eff4 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2eff4 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2eff4 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2eff4 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2eff4 098 22 A7 82 FA |                 rqpin   urx, dm
2eff8 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2effc 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2f000 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2f000 09b             | .chk_crc
2f000 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2f004 09c 58 00 00 FF 
2f008 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2f00c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2f010 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2f014 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2f018 0a1 34 09 B0 FD |                 call    #poll_waitx
2f01c 0a2             | 
2f01c 0a2             |                 ' Fall through to utx_handshake
2f01c 0a2             | 
2f01c 0a2             | '------------------------------------------------------------------------------
2f01c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2f01c 0a2             | ' the appropriate IP delay has been inserted.
2f01c 0a2             | '------------------------------------------------------------------------------
2f01c 0a2             | ' On entry:
2f01c 0a2             | '   retval - handshake PID to send.
2f01c 0a2             | ' On exit:
2f01c 0a2             | '   retval unchanged.
2f01c 0a2             | '------------------------------------------------------------------------------
2f01c 0a2             | utx_handshake
2f01c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2f020 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2f024 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2f028 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2f02c 0a6 5F A5 02 F6 |                 mov     utx, retval
2f030 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2f034 0a8             | .idle
2f034 0a8 22 A7 82 FA |                 rqpin   urx, dm
2f038 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2f03c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2f040 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2f044 0ac 08 09 90 FD |                 jmp     #poll_waitx
2f048 0ad             | 
2f048 0ad             | '------------------------------------------------------------------------------
2f048 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2f048 0ad             | '------------------------------------------------------------------------------
2f048 0ad             | ' On entry:
2f048 0ad             | '   utx - byte to transmit.
2f048 0ad             | ' On exit:
2f048 0ad             | '------------------------------------------------------------------------------
2f048 0ad             | utx_byte
2f048 0ad 40 46 72 FD |                 testp   dp                      wc
2f04c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2f050 0af 23 03 08 FC |                 akpin   dp
2f054 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2f058 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2f05c 0b2             | 
2f05c 0b2             | '------------------------------------------------------------------------------
2f05c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2f05c 0b2             | '------------------------------------------------------------------------------
2f05c 0b2             | ' On entry:
2f05c 0b2             | ' On exit:
2f05c 0b2             | '   retval - the byte read.
2f05c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2f05c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2f05c 0b2             | '     received.
2f05c 0b2             | '------------------------------------------------------------------------------
2f05c 0b2             | urx_next
2f05c 0b2 22 A7 8A FA |                 rdpin   urx, dm
2f060 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2f064 0b4 53 A5 02 F5 |                 and     utx, urx
2f068 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2f06c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2f070 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2f074 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2f078 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2f07c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2f080 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2f084 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2f088 0bd 2D 00 64 FD |                 ret
2f08c 0be             | 
2f08c 0be             | '------------------------------------------------------------------------------
2f08c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2f08c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2f08c 0be             | ' length, and the PID is not included in the CRC calculation:
2f08c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2f08c 0be             | '  CRC5  ENDP ADDRESS PID
2f08c 0be             | ' %00000_1111_1111111_xxxxxxxx
2f08c 0be             | '------------------------------------------------------------------------------
2f08c 0be             | ' On entry:
2f08c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2f08c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2f08c 0be             | ' On exit:
2f08c 0be             | '   ep_addr_pid - CRC value appended to the packet.
2f08c 0be             | '------------------------------------------------------------------------------
2f08c 0be             | calc_crc5
2f08c 0be FF 03 00 FF 
2f090 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2f094 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2f098 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2f09c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2f0a0 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2f0a4 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2f0a8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2f0ac 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2f0b0 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2f0b4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2f0b8 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2f0bc 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2f0c0 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2f0c4 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2f0c8 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2f0cc 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2f0d0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2f0d4 0d0             | 
2f0d4 0d0             | '------------------------------------------------------------------------------
2f0d4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2f0d4 0d0             | '------------------------------------------------------------------------------
2f0d4 0d0             | isr1_fsframe
2f0d4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2f0d8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2f0dc 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2f0e0 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2f0e4 0d4             | .wait
2f0e4 0d4 40 46 72 FD |                 testp   dp                      wc
2f0e8 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2f0ec 0d6 23 03 08 FC |                 akpin   dp
2f0f0 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2f0f4 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2f0f8 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2f0fc 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2f100 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2f104 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2f108 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2f10c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2f110 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2f114 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2f118 0e1 2C FF BF FD |                 call    #utx_byte
2f11c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2f120 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2f124 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2f128 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2f12c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2f130 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2f134 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2f138 0e9 5B A5 42 F5 |                 or      utx, icrc
2f13c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2f140 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2f144 0ec 20 00 90 FD |                 jmp     #isr1_wait
2f148 0ed             | isr1_lsframe
2f148 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2f14c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2f150 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2f154 0f0             | .wait
2f154 0f0 40 46 72 FD |                 testp   dp                      wc
2f158 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2f15c 0f2 23 03 08 FC |                 akpin   dp
2f160 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2f164 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2f168 0f5             | isr1_wait
2f168 0f5 22 A5 82 FA |                 rqpin   utx, dm
2f16c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2f170 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2f174 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2f178 0f9 03 00 00 FF 
2f17c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2f180 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2f184 0fc F5 FF 3B FB |                 reti1
2f188 0fd             | 
2f188 0fd             | '------------------------------------------------------------------------------
2f188 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2f188 0fd             | ' transaction will complete before the next frame is triggered.
2f188 0fd             | '------------------------------------------------------------------------------
2f188 0fd             | ' On entry:
2f188 0fd             | ' On exit:
2f188 0fd             | '------------------------------------------------------------------------------
2f188 0fd             | wait_txn_ok
2f188 0fd 1A 74 63 FD |                 getct   htmp2
2f18c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2f190 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2f194 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2f198 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2f19c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2f1a0 103 2D 00 64 FD |                 ret
2f1a4 104             | 
2f1a4 104             | '------------------------------------------------------------------------------
2f1a4 104             | ' A device connection was detected, or a bus reset was requested by the USB
2f1a4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2f1a4 104             | ' and perform a reset sequence prior to device enumeration.
2f1a4 104             | '------------------------------------------------------------------------------
2f1a4 104             | dev_reset
2f1a4 104 22 A7 82 FA |                 rqpin   urx, dm
2f1a8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2f1ac 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2f1b0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2f1b4 108             | reset
2f1b4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2f1b8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2f1bc 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2f1c0 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f1c4 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2f1c8 10d 1A 92 62 FD |                 getct   iframe_ct_base
2f1cc 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2f1d0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2f1d4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2f1d8 111 24 70 07 F1 |                 add     htmp, #36
2f1dc 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2f1e0 113             | .framewait
2f1e0 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2f1e4 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2f1e8 115 2D 00 64 FD |                 ret
2f1ec 116             | 
2f1ec 116             | '------------------------------------------------------------------------------
2f1ec 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2f1ec 116             | '------------------------------------------------------------------------------
2f1ec 116             | ' On entry:
2f1ec 116             | '   PTRA - source address.
2f1ec 116             | '   PB - destination address.
2f1ec 116             | '   hr0 - length of copy, in bytes.
2f1ec 116             | ' On exit:
2f1ec 116             | '------------------------------------------------------------------------------
2f1ec 116             | hmemcpy
2f1ec 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2f1f0 117 F7 71 43 FC |                 wrbyte  htmp, pb
2f1f4 118 01 EE 07 F1 |                 add     pb, #1
2f1f8 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2f1fc 11a             | 
2f1fc 11a             | '------------------------------------------------------------------------------
2f1fc 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2f1fc 11a             | ' loop until the errant device is disconnected.
2f1fc 11a             | '------------------------------------------------------------------------------
2f1fc 11a             | ' On entry:
2f1fc 11a             | ' On exit:
2f1fc 11a             | '------------------------------------------------------------------------------
2f1fc 11a             | host_error
2f1fc 11a             |           if ERROR_LED >= 0
2f1fc 11a             |           end
2f1fc 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2f200 11b             | 
2f200 11b             | '------------------------------------------------------------------------------
2f200 11b             | ' Get HID descriptor buffer for current port
2f200 11b             | '------------------------------------------------------------------------------
2f200 11b             | ' On entry:
2f200 11b             | ' On exit:
2f200 11b             | '   PB - HID descriptor buffer pointer
2f200 11b             | '------------------------------------------------------------------------------
2f200 11b             | get_hid_descr_buffer
2f200 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2f204 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2f208 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2f20c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2f210 11f             | 
2f210 11f             | 
2f210 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2f214 120             | 
2f214 120             | ' USB commands and error codes
2f214 120 00 00 00 00 | cmd_data        long    0
2f218 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2f21c 122             | 
2f21c 122             | ' Parameters block assigned at cog startup
2f21c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2f220 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2f224 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2f228 125             | if ACTIVITY_LED >= 0
2f228 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2f228 125             | end
2f228 125             | if ERROR_LED >= 0
2f228 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2f228 125             | end
2f228 125 00 00 00 00 | hid_descr_p     long    0
2f22c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2f22c 126             | 'hkbd_report_p   long    0
2f22c 126 00 00 00 00 | hub_descr_p     long    0
2f230 127 00 00 00 00 | urx_buff_p      long    0
2f234 128 00 00 00 00 | dev_desc_buff_p long    0
2f238 129 00 00 00 00 | con_desc_buff_p long    0
2f23c 12a 00 00 00 00 | cache_start_p   long    0
2f240 12b 00 00 00 00 | cache_end_p     long    0
2f244 12c             | if EMUPAD_MAX_PLAYER > 0
2f244 12c             | emupad_out_ptr  long    0
2f244 12c             | end
2f244 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2f248 12d             | 
2f248 12d             | hdev_init_start
2f248 12d             | hdev_port       res     1
2f248 12d             | hdev_port       res     1
2f248 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2f248 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2f248 12d             | kbm_next_datax  res     1
2f248 12d             | kbm_next_datax  res     1
2f248 12d             | hub_intf_num    res     1
2f248 12d             | hub_intf_num    res     1
2f248 12d             | hub_next_datax  res     1
2f248 12d             | hub_next_datax  res     1
2f248 12d             | hub_status_chg  res     1
2f248 12d             | hub_status_chg  res     1
2f248 12d             | hub_port_status res     1
2f248 12d             | hub_port_status res     1
2f248 12d             | if HAVE_MOUSE
2f248 12d             | ms_intf_num     res     1
2f248 12d             | ms_intf_num     res     1
2f248 12d             | ms_in_max_pkt   res     1
2f248 12d             | ms_in_max_pkt   res     1
2f248 12d             | end
2f248 12d             | kb_intf_num     res     1
2f248 12d             | kb_intf_num     res     1
2f248 12d             | kb_interval     res     1
2f248 12d             | kb_interval     res     1
2f248 12d             | kb_in_max_pkt   res     1
2f248 12d             | kb_in_max_pkt   res     1
2f248 12d             | kb_max_index    res     1
2f248 12d             | kb_max_index    res     1
2f248 12d             | kb_led_states   res     1
2f248 12d             | kb_led_states   res     1
2f248 12d             | gp_intf_num     res     1
2f248 12d             | gp_intf_num     res     1
2f248 12d             | gp_interval     res     1
2f248 12d             | gp_interval     res     1
2f248 12d             | gp_max_index    res     1
2f248 12d             | gp_max_index    res     1
2f248 12d             | gp_descr_len    res     1+MAX_DEVICES
2f248 12d             | gp_descr_len    res     1+MAX_DEVICES
2f248 12d             | hdev_init_end
2f248 12d             | 
2f248 12d             | ' Initialized at cog startup:
2f248 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2f248 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2f248 12d             | iframe_ct_new   res     1
2f248 12d             | iframe_ct_new   res     1
2f248 12d             | iframe_ct_base  res     1
2f248 12d             | iframe_ct_base  res     1
2f248 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2f248 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2f248 12d             | 
2f248 12d             | ' This register block is reset to zero when a USB device connects
2f248 12d             | hreg_init_start
2f248 12d             | hstatus         res     1         ' Host status flags
2f248 12d             | hstatus         res     1         ' Host status flags
2f248 12d             | hctwait         res     1         ' Poll-based wait clocks
2f248 12d             | hctwait         res     1         ' Poll-based wait clocks
2f248 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2f248 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2f248 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2f248 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2f248 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2f248 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2f248 12d             | xfer_retry      res     1         ' Control transfer retry count
2f248 12d             | xfer_retry      res     1         ' Control transfer retry count
2f248 12d             | retry           res     1         ' Transaction retry count
2f248 12d             | retry           res     1         ' Transaction retry count
2f248 12d             | utx             res     1         ' Byte to transmit on USB
2f248 12d             | utx             res     1         ' Byte to transmit on USB
2f248 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2f248 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2f248 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2f248 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2f248 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2f248 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2f248 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2f248 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2f248 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2f248 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2f248 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2f248 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2f248 12d             | frame           res     1         ' USB 1ms frame counter value
2f248 12d             | frame           res     1         ' USB 1ms frame counter value
2f248 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2f248 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2f248 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2f248 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2f248 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2f248 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2f248 12d             | crc             res     1         ' Used for CRC16 calculation
2f248 12d             | crc             res     1         ' Used for CRC16 calculation
2f248 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2f248 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2f248 12d             | retval          res     1         ' Global success/fail return parameter
2f248 12d             | retval          res     1         ' Global success/fail return parameter
2f248 12d             | context_retval  res     1         ' Operation contextual return parameter
2f248 12d             | context_retval  res     1         ' Operation contextual return parameter
2f248 12d             | ' Device stuff
2f248 12d             | hdev_id         res     1+MAX_DEVICES
2f248 12d             | hdev_id         res     1+MAX_DEVICES
2f248 12d             | hdev_bcd        res     1
2f248 12d             | hdev_bcd        res     1
2f248 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2f248 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2f248 12d             | ' Keyboard/mouse stuff
2f248 12d             | hctrl_ep_addr   res     1
2f248 12d             | hctrl_ep_addr   res     1
2f248 12d             | hctrl_max_pkt   res     1
2f248 12d             | hctrl_max_pkt   res     1
2f248 12d             | hconfig_base    res     1
2f248 12d             | hconfig_base    res     1
2f248 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2f248 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2f248 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2f248 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2f248 12d             | hdev_class      res     1
2f248 12d             | hdev_class      res     1
2f248 12d             | hdev_subclass   res     1
2f248 12d             | hdev_subclass   res     1
2f248 12d             | hdev_protocol   res     1
2f248 12d             | hdev_protocol   res     1
2f248 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2f248 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2f248 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2f248 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2f248 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2f248 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2f248 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2f248 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2f248 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2f248 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2f248 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2f248 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2f248 12d             | if HAVE_MOUSE
2f248 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2f248 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2f248 12d             | end
2f248 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2f248 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2f248 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2f248 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2f248 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2f248 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2f248 12d             | hdev_out_addr   res     1
2f248 12d             | hdev_out_addr   res     1
2f248 12d             | 
2f248 12d             | if EMUPAD_MAX_PLAYER > 0
2f248 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2f248 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2f248 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2f248 12d             | end
2f248 12d             | 
2f248 12d             | hreg_init_end
2f248 12d             | 
2f248 12d             | hidr_start
2f248 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2f248 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2f248 12d             | hidr_flags      res     1
2f248 12d             | hidr_flags      res     1
2f248 12d             | hidr_axis       res     3
2f248 12d             | hidr_axis       res     3
2f248 12d             | hidr_buttons    res     1
2f248 12d             | hidr_buttons    res     1
2f248 12d             | hidr_hats       res     1
2f248 12d             | hidr_hats       res     1
2f248 12d             | '' Above are actually useful values, 6 longs
2f248 12d             | hidr_id         res     1
2f248 12d             | hidr_id         res     1
2f248 12d             | hidr_state      res     1
2f248 12d             | hidr_state      res     1
2f248 12d             | hidr_size       res     1
2f248 12d             | hidr_size       res     1
2f248 12d             | hidr_count      res     1
2f248 12d             | hidr_count      res     1
2f248 12d             | hidr_offset     res     1
2f248 12d             | hidr_offset     res     1
2f248 12d             | hidr_usage_idx  res     1
2f248 12d             | hidr_usage_idx  res     1
2f248 12d             | hidr_lminmax    res     1
2f248 12d             | hidr_lminmax    res     1
2f248 12d             | hidr_pminmax    res     1
2f248 12d             | hidr_pminmax    res     1
2f248 12d             | hidr_type       res     1
2f248 12d             | hidr_type       res     1
2f248 12d             | hidr_end
2f248 12d             | 
2f248 12d             | ' Variables dependent on the system freqency
2f248 12d             | _var_64_lower_  res     1
2f248 12d             | _var_64_lower_  res     1
2f248 12d             | _var_64_upper_  res     1
2f248 12d             | _var_64_upper_  res     1
2f248 12d             | _12Mbps_        res     1
2f248 12d             | _12Mbps_        res     1
2f248 12d             | _1_5Mbps_       res     1
2f248 12d             | _1_5Mbps_       res     1
2f248 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2f248 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2f248 12d             | _1us_           res     1         ' 1us
2f248 12d             | _1us_           res     1         ' 1us
2f248 12d             | _10us_          res     1         ' 10us
2f248 12d             | _10us_          res     1         ' 10us
2f248 12d             | _33us_          res     1         ' 33us
2f248 12d             | _33us_          res     1         ' 33us
2f248 12d             | _txn_err_       res     1         ' 250us
2f248 12d             | _txn_err_       res     1         ' 250us
2f248 12d             | _500us_         res     1         ' 500us
2f248 12d             | _500us_         res     1         ' 500us
2f248 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2f248 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2f248 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2f248 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2f248 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2f248 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2f248 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2f248 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2f248 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2f248 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2f248 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2f248 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2f248 12d             | _preamble_wait_ res     1
2f248 12d             | _preamble_wait_ res     1
2f248 12d             | _1ms_           res     1         ' 1ms
2f248 12d             | _1ms_           res     1         ' 1ms
2f248 12d             | _2ms_           res     1         ' 2ms
2f248 12d             | _2ms_           res     1         ' 2ms
2f248 12d             | _suspend_wait_  res     1         ' 3ms
2f248 12d             | _suspend_wait_  res     1         ' 3ms
2f248 12d             | _4ms_           res     1         ' 4ms
2f248 12d             | _4ms_           res     1         ' 4ms
2f248 12d             | _xfer_wait_     res     1         ' 5ms
2f248 12d             | _xfer_wait_     res     1         ' 5ms
2f248 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2f248 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2f248 12d             | _reset_hold_    res     1         ' 15ms
2f248 12d             | _reset_hold_    res     1         ' 15ms
2f248 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2f248 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2f248 12d             | _21ms_          res     1         ' 21ms
2f248 12d             | _21ms_          res     1         ' 21ms
2f248 12d             | _100ms_         res     1         ' 100ms
2f248 12d             | _100ms_         res     1         ' 100ms
2f248 12d             | _500ms_         res     1         ' 500ms
2f248 12d             | _500ms_         res     1         ' 500ms
2f248 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2f248 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2f248 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2f248 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2f248 12d             | '------------------------------------------------------------------------------
2f248 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2f248 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2f248 12d             | _usb_d_ls_nco_  res     1
2f248 12d             | _usb_d_ls_nco_  res     1
2f248 12d             | _usb_h_fs_nco_  res     1
2f248 12d             | _usb_h_fs_nco_  res     1
2f248 12d             | _usb_d_fs_nco_  res     1
2f248 12d             | _usb_d_fs_nco_  res     1
2f248 12d             | '------------------------------------------------------------------------------
2f248 12d             | ' Scratch registers
2f248 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2f248 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2f248 12d             | htmp1           res     1
2f248 12d             | htmp1           res     1
2f248 12d             | htmp2           res     1
2f248 12d             | htmp2           res     1
2f248 12d             | htmp3           res     1
2f248 12d             | htmp3           res     1
2f248 12d             | hrep            res     1         ' Repeat count
2f248 12d             | hrep            res     1         ' Repeat count
2f248 12d             | hsave0          res     1         ' Subroutine parameter saves
2f248 12d             | hsave0          res     1         ' Subroutine parameter saves
2f248 12d             | hsave1          res     1
2f248 12d             | hsave1          res     1
2f248 12d             | hsave2          res     1
2f248 12d             | hsave2          res     1
2f248 12d             | isrtmp1         res     1
2f248 12d             | isrtmp1         res     1
2f248 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2f248 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2f248 12d             | hr0             res     1         ' Multi-purpose registers
2f248 12d             | hr0             res     1         ' Multi-purpose registers
2f248 12d             | hr1             res     1
2f248 12d             | hr1             res     1
2f248 12d             | hr2             res     1
2f248 12d             | hr2             res     1
2f248 12d             | hr3             res     1
2f248 12d             | hr3             res     1
2f248 12d             | hpar1           res     1         ' Routine entry/exit parameters
2f248 12d             | hpar1           res     1         ' Routine entry/exit parameters
2f248 12d             | hpar2           res     1
2f248 12d             | hpar2           res     1
2f248 12d             | hpar3           res     1
2f248 12d             | hpar3           res     1
2f248 12d             | hct2            res     1         ' Function response bus turn-around timer
2f248 12d             | hct2            res     1         ' Function response bus turn-around timer
2f248 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2f248 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2f248 12d             | mod_cnt         res     1         ' Used in idle loops
2f248 12d             | mod_cnt         res     1         ' Used in idle loops
2f248 12d             |                 fit     $1F0
2f248 12d             |                 org     $200
2f248 200             | hlut_start
2f248 200             | 
2f248 200             | '------------------------------------------------------------------------------
2f248 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2f248 200             | ' settings to startup defaults.
2f248 200             | '------------------------------------------------------------------------------
2f248 200             | ' On entry:
2f248 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2f248 200             | '------------------------------------------------------------------------------
2f248 200             | set_speed_full
2f248 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2f24c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2f250 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2f254 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2f258 204             | '                ret                             wcz     ' Restore caller flags on exit
2f258 204             | 
2f258 204             | '------------------------------------------------------------------------------
2f258 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2f258 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2f258 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2f258 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2f258 204             | ' putting the smart pins into reset.
2f258 204             | '------------------------------------------------------------------------------
2f258 204             | ' On entry:
2f258 204             | ' On exit: CZ flags restored to caller states
2f258 204             | '------------------------------------------------------------------------------
2f258 204             | set_speed_low
2f258 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2f25c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2f260 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2f264 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2f268 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2f26c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2f270 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2f274 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2f278 20c             | 
2f278 20c             | '------------------------------------------------------------------------------
2f278 20c             | ' Perform configuration stuff required when a device intitially connects.
2f278 20c             | '------------------------------------------------------------------------------
2f278 20c             | ' On entry:
2f278 20c             | ' On exit:
2f278 20c             | '------------------------------------------------------------------------------
2f278 20c             | on_connect
2f278 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2f27c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2f280 20e             | .retry
2f280 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2f284 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2f288 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2f28c 211 00 08 00 FF 
2f290 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2f294 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2f298 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2f29c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2f2a0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2f2a4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2f2a8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f2ac 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2f2b0 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2f2b4 21b 4C 03 B0 FD |                 call    #poll_waitx
2f2b8 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2f2bc 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2f2c0 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2f2c4 21f B8 FF 9F FD |                 jmp     #.retry
2f2c8 220             | .get_dev_desc
2f2c8 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2f2cc 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2f2d0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2f2d4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2f2d8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2f2dc 225 88 FB BF FD |                 call    #reset
2f2e0 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2f2e4 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2f2e8 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2f2ec 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2f2f0 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f2f4 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2f2f8 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2f2fc 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2f300 22e 04 00 00 FF 
2f304 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2f308 230 34 FA BF FD |                 call    #calc_crc5
2f30c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2f310 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2f314 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2f318 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2f31c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2f320 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2f324 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f328 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2f32c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2f330 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2f334 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2f338 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2f33c 23d C4 02 B0 FD |                 call    #poll_waitx
2f340 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2f344 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2f348 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2f34c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2f350 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2f354 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f358 244 2D 00 64 5D |         if_nz   ret
2f35c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2f360 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2f364 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2f368 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2f36c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2f370 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2f374 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2f378 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2f37c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2f380 24e 2C FB 9F CD |         if_b    jmp     #host_error
2f384 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2f388 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2f38c 251 2D EC 63 FD |                 call    pa
2f390 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2f394 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2f398 254 2C EC 63 FD |                 jmp     pa
2f39c 255             | 
2f39c 255             | '------------------------------------------------------------------------------
2f39c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2f39c 255             | ' Status reporting is always in the function-to-host direction.
2f39c 255             | '------------------------------------------------------------------------------
2f39c 255             | ' On entry:
2f39c 255             | '   PTRA - start address of the SETUP data in hub.
2f39c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2f39c 255             | '     stage.
2f39c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2f39c 255             | ' On exit:
2f39c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2f39c 255             | '     contains the count of data stage bytes actually received, which must
2f39c 255             | '     always be <= the count requested.
2f39c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2f39c 255             | '     more specific USB operation error code.
2f39c 255             | '------------------------------------------------------------------------------
2f39c 255             | control_read
2f39c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2f3a0 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2f3a4 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2f3a8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2f3ac 259             | .xfer_start
2f3ac 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2f3b0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2f3b4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f3b8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2f3bc 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2f3c0 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2f3c4 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2f3c8 260 61 00 00 FF 
2f3cc 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2f3d0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2f3d4 263             | .data
2f3d4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2f3d8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2f3dc 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2f3e0 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2f3e4 267             | .nak_retry
2f3e4 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2f3e8 268             | .in_retry
2f3e8 268 BC F6 BF FD |                 call    #txn_in
2f3ec 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2f3f0 26a 28 00 90 AD |         if_z    jmp     #.commit
2f3f4 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2f3f8 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2f3fc 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2f400 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2f404 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2f408 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2f40c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2f410 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2f414 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2f418 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2f41c 275             | .commit
2f41c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2f420 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2f424 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2f428 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2f42c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2f430 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2f434 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2f438 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2f43c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2f440 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2f444 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2f448 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2f44c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2f450 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2f454 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2f458 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2f45c 285             | .pre_status
2f45c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2f460 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2f464 287 00 B0 06 F6 |                 mov     pkt_data, #0
2f468 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2f46c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2f470 28a 61 00 00 FF 
2f474 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2f478 28c             | .out_retry
2f478 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2f47c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f480 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2f484 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2f488 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2f48c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2f490 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2f494 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2f498 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2f49c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2f4a0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2f4a4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2f4a4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2f4a4 297             | ' ControlRead() transfer gets things unstuck most of the time...
2f4a4 297             | .xfer_retry
2f4a4 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2f4a8 298 58 01 B0 FD |                 call    #poll_waitx
2f4ac 299 8C F9 BF FD |                 call    #wait_txn_ok
2f4b0 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2f4b4 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2f4b8 29c C8 EF 03 F6 |                 mov     pb, hpar3
2f4bc 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2f4c0 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2f4c4 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2f4c8 2a0             | 
2f4c8 2a0             | '------------------------------------------------------------------------------
2f4c8 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2f4c8 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2f4c8 2a0             | ' the SETUP data struct is filled with the required values.
2f4c8 2a0             | '------------------------------------------------------------------------------
2f4c8 2a0             | ' On entry:
2f4c8 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2f4c8 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2f4c8 2a0             | '     stage.
2f4c8 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2f4c8 2a0             | ' On exit:
2f4c8 2a0             | '   retval - used to convey the success/failure of each stage.
2f4c8 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2f4c8 2a0             | '     more specific USB operation error code.
2f4c8 2a0             | '------------------------------------------------------------------------------
2f4c8 2a0             | control_write
2f4c8 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2f4cc 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2f4d0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2f4d4 2a3             | 
2f4d4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2f4d8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2f4dc 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2f4e0 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2f4e4 2a7             | .xfer_start
2f4e4 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2f4e8 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2f4ec 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2f4f0 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f4f4 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2f4f8 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2f4fc 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2f500 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2f504 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2f508 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2f50c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2f510 2b2             | .data
2f510 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2f514 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2f518 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2f51c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2f520 2b6             | .out_retry
2f520 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2f524 2b7 88 F6 BF FD |                 call    #txn_out
2f528 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f52c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2f530 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2f534 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2f538 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2f53c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2f540 2be             | .commit
2f540 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2f544 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2f548 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2f54c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2f550 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2f554 2c3             | pre_status_in
2f554 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2f558 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2f55c 2c5             | .status_retry
2f55c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2f560 2c6 44 F5 BF FD |                 call    #txn_in
2f564 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2f568 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2f56c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2f570 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2f574 2cb 2D 00 64 AD |         if_z    ret
2f578 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2f57c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2f580 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2f584 2cf             | '               ret                                     ' Caller must handle transfer retirement
2f584 2cf             | 
2f584 2cf             | '------------------------------------------------------------------------------
2f584 2cf             | ' Execute an IN interrupt transaction.
2f584 2cf             | '------------------------------------------------------------------------------
2f584 2cf             | ' On entry:
2f584 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2f584 2cf             | '   hpar2 - Address of the IN data buffer
2f584 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2f584 2cf             | ' On exit:
2f584 2cf             | '   retval - the result of the operation.
2f584 2cf             | '   hpar3 - the count of IN data bytes actually received.
2f584 2cf             | '------------------------------------------------------------------------------
2f584 2cf             | do_int_in
2f584 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2f588 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2f58c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2f590 2d2             | 
2f590 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2f594 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2f598 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2f59c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2f5a0 2d6             | .retry
2f5a0 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2f5a4 2d7 00 F5 BF FD |                 call    #txn_in
2f5a8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2f5ac 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2f5b0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2f5b4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2f5b8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2f5bc 2dd 54 00 B0 FD |                 call    #retry_wait
2f5c0 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2f5c4 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2f5c8 2e0 D4 FF 9F FD |                 jmp     #.retry
2f5cc 2e1             | .commit
2f5cc 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2f5d0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2f5d4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2f5d8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2f5dc 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2f5e0 2e6             | .post_ret
2f5e0 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2f5e4 2e7             | 
2f5e4 2e7             | 
2f5e4 2e7             | '------------------------------------------------------------------------------
2f5e4 2e7             | ' Resets the downstream hub port to FS
2f5e4 2e7             | '------------------------------------------------------------------------------
2f5e4 2e7             | dwnstream_reset
2f5e4 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2f5e8 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2f5ec 2e9             | 
2f5ec 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2f5f0 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2f5f4 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2f5f8 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2f5fc 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2f600 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2f604 2ef             | 
2f604 2ef             | '------------------------------------------------------------------------------
2f604 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2f604 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2f604 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2f604 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2f604 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2f604 2ef             | '------------------------------------------------------------------------------
2f604 2ef             | ' On entry:
2f604 2ef             | '   hctwait - wait interval in sysclocks.
2f604 2ef             | ' On exit:
2f604 2ef             | '------------------------------------------------------------------------------
2f604 2ef             | poll_waitx
2f604 2ef 1A 92 63 FD |                 getct   hct2
2f608 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2f60c 2f1             | .wait
2f60c 2f1 FF 25 CC FB |                 jnct2   #.wait
2f610 2f2 2D 00 64 FD |                 ret
2f614 2f3             | 
2f614 2f3             | '------------------------------------------------------------------------------
2f614 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2f614 2f3             | '------------------------------------------------------------------------------
2f614 2f3             | ' On entry:
2f614 2f3             | '   retval - transaction response PID or error code.
2f614 2f3             | ' On exit:
2f614 2f3             | '------------------------------------------------------------------------------
2f614 2f3             | retry_wait
2f614 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2f618 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2f61c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2f620 2f6 14 00 90 AD |         if_z    jmp     #.nak
2f624 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2f628 2f8 D8 FF BF FD |                 call    #poll_waitx
2f62c 2f9             | .dec
2f62c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2f630 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2f634 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2f638 2fc             | .nak
2f638 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2f63c 2fd C4 FF BF FD |                 call    #poll_waitx
2f640 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2f644 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2f648 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2f64c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2f650 302 2D 00 64 FD |                 ret
2f654 303             | 
2f654 303             | host_reset
2f654 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2f658 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2f65c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2f65c 305 BD 01 05 FF 
2f660 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2f664 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2f668 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2f66c 309             | ' Check to see if the system clock has been changed.
2f66c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2f670 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2f674 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2f678 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2f67c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f680 30e 40 46 62 FD |                 dirl    dp
2f684 30f             | 
2f684 30f 28 02 64 FD |                 setq    #1
2f688 310 80 00 80 FF 
2f68c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f690 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2f694 313             | .enable
2f694 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f698 314 41 46 62 FD |                 dirh    dp
2f69c 315 1F 36 63 FD |                 waitx   _1us_
2f6a0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f6a4 317             | 
2f6a4 317             |                 ' Handle Port protection enable and startup delay
2f6a4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2f6a8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2f6ac 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2f6b0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2f6b4 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2f6b8 31c             | 
2f6b8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2f6bc 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2f6c0 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2f6c4 31f 00 00 04 F6 |                 mov     0-0, #0
2f6c8 320             | .regloop
2f6c8 320             | 
2f6c8 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2f6c8 320             | 
2f6c8 320             | discon_entry
2f6c8 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2f6cc 321             | 
2f6cc 321             |               
2f6cc 321             |         if HAVE_HIDPAD
2f6cc 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2f6d0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f6d4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2f6d8 324 F7 01 68 FC |                 wrlong  #0,pb
2f6dc 325             |         end
2f6dc 325             |         if EMUPAD_MAX_PLAYER > 0
2f6dc 325             |         end
2f6dc 325             | 
2f6dc 325             |                 ' Fall through to disconnected loop
2f6dc 325             | 
2f6dc 325             | '-----------------------------------------------------------------------------------------------------------------
2f6dc 325             | ' Device connect handling (Section 7.1.7.3).
2f6dc 325             | '-----------------------------------------------------------------------------------------------------------------
2f6dc 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2f6dc 325             | ' device to connect (Section 7.1.7.3).
2f6dc 325             | '-----------------------------------------------------------------------------------------------------------------
2f6dc 325             | disconnected
2f6dc 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2f6e0 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2f6e4 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2f6e8 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2f6ec 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2f6f0 32a             |         if ACTIVITY_LED >= 0
2f6f0 32a             |         end
2f6f0 32a 22 A7 82 FA |                 rqpin   urx, dm
2f6f4 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2f6f8 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2f6fc 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2f700 32e             | .se1_test
2f700 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2f704 32f FC FE BF FD |                 call    #poll_waitx
2f708 330 22 A7 82 FA |                 rqpin   urx, dm
2f70c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f710 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2f714 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2f718 334             | .se1            'SE1 is a fatal error condition
2f718 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2f71c 335 E4 FE BF FD |                 call    #poll_waitx
2f720 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2f724 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2f728 338             | .connect_test                                           ' Test lines until stable J/K state seen
2f728 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2f72c 339 22 A7 82 FA |                 rqpin   urx, dm
2f730 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f734 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2f738 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2f73c 33d             | connected
2f73c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2f740 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2f744 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2f748 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2f74c 341             | .set_pulse
2f74c 341 1A 64 63 FD |                 getct   _pulse_time_
2f750 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2f754 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2f754 343             | ' of 1ms and make a correction, if necessary.
2f754 343             | '                mov     htmp, _1ms_
2f754 343             | '                subs    htmp, iframe_delta
2f754 343             | '                adds    _frame1ms_clks_, htmp
2f754 343             | '                debug(udec(_frame1ms_clks_))
2f754 343             | 
2f754 343             |                 ' Fall through to idle/processing loop
2f754 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2f758 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2f75c 345             | 
2f75c 345             | hidle
2f75c 345 22 A7 82 FA |                 rqpin   urx, dm
2f760 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f764 347 98 00 90 CD |         if_c    jmp     #.se0_test
2f768 348 24 06 70 FD |                 pollct3                         wc
2f76c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2f770 34a 1A 94 63 FD |                 getct   hct3
2f774 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2f778 34c             | 
2f778 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2f77c 34d 00 70 E3 F8 |                 getbyte htmp
2f780 34e             | 
2f780 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2f784 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2f788 350 40 00 90 AD |         if_z    jmp     #.poll
2f78c 351             | 
2f78c 351             |         if _HAVE_GAMEPAD
2f78c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2f790 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2f794 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2f798 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2f79c 355 2C 00 90 AD |         if_z    jmp     #.poll
2f7a0 356             |         end
2f7a0 356             | 
2f7a0 356             |         if HAVE_MOUSE
2f7a0 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2f7a4 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f7a8 358 20 00 90 AD |         if_z    jmp     #.poll
2f7ac 359             |         end
2f7ac 359             | 
2f7ac 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2f7b0 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2f7b4 35b 14 00 90 AD |         if_z    jmp     #.poll
2f7b8 35c             | 
2f7b8 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2f7bc 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2f7c0 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2f7c4 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2f7c8 360             |         if HAVE_MOUSE
2f7c8 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f7cc 361             |         else
2f7cc 361             |         end
2f7cc 361             | 
2f7cc 361             | .poll
2f7cc 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2f7d0 362 2D EC 63 FD |                 call    pa
2f7d4 363             | .skip_poll
2f7d4 363             | 
2f7d4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2f7d8 364             | 
2f7d8 364             | .nopoll
2f7d8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2f7dc 365 44 00 90 AD |         if_z    jmp     #hsuspend
2f7e0 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2f7e4 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2f7e8 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2f7ec 369 1A 84 63 FD |                 getct   hr0
2f7f0 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2f7f4 36b             |         if ACTIVITY_LED >= 0
2f7f4 36b             |         end
2f7f4 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2f7f8 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2f7fc 36d 5C FF 9F FD |                 jmp     #hidle
2f800 36e             | ' Check for extended SE0 state on the bus
2f800 36e             | .se0_test
2f800 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2f804 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2f808 370 22 A7 82 FA |                 rqpin   urx, dm
2f80c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f810 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2f814 373 24 F6 BF FD |                 call    #wait_txn_ok
2f818 374 00 00 80 FF 
2f81c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2f820 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2f820 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2f824 377             | 
2f824 377             | hsuspend
2f824 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2f828 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2f82c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2f830 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2f834 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2f838 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2f83c 37d             | 
2f83c 37d             |                 ' Fall through to resume wait loop
2f83c 37d             | 
2f83c 37d             | hwait_resume
2f83c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2f840 37e 02 86 47 F0 |                 shr     hr1, #2
2f844 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2f848 380             |         if ACTIVITY_LED >= 0
2f848 380             |         end
2f848 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2f84c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2f850 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2f854 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2f858 384 18 00 90 AD |         if_z    jmp     #.resume
2f85c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2f860 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f864 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2f868 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2f86c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2f870 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2f874 38b             | .resume
2f874 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2f878 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2f87c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2f880 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2f884 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2f888 390 1F 70 63 FD |                 waitx   htmp
2f88c 391 22 07 28 FC |                 wypin   #OUT_J, dm
2f890 392 01 70 47 F0 |                 shr     htmp, #1
2f894 393 1F 70 63 FD |                 waitx   htmp
2f898 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f89c 395 1A 92 62 FD |                 getct   iframe_ct_base
2f8a0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2f8a4 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2f8a8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2f8ac 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2f8b0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2f8b4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2f8b8 39c             | 
2f8b8 39c             | '------------------------------------------------------------------------------
2f8b8 39c             | ' Send preamble to enable low-speed HUB ports
2f8b8 39c             | '------------------------------------------------------------------------------
2f8b8 39c             | ' On entry:
2f8b8 39c             | ' On exit:
2f8b8 39c             | '   USB baud rate set to low-speed
2f8b8 39c             | '------------------------------------------------------------------------------
2f8b8 39c             | utx_pre
2f8b8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f8bc 39d 40 46 62 FD |                 dirl    dp
2f8c0 39e 28 02 64 FD |                 setq    #1
2f8c4 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2f8c8 3a0 58 44 62 FD |                 drvl    dm
2f8cc 3a1 59 46 62 FD |                 drvh    dp
2f8d0 3a2             | 
2f8d0 3a2 1E 00 00 FF 
2f8d4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2f8d8 3a4             | 
2f8d8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2f8dc 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2f8e0 3a6 28 02 64 3D |         if_nc   setq    #1
2f8e4 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2f8e8 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2f8ec 3a9             | .l1
2f8ec 3a9             | 
2f8ec 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f8f0 3aa 40 46 62 FD |                 dirl    dp
2f8f4 3ab 28 02 64 FD |                 setq    #1
2f8f8 3ac 80 00 80 FF 
2f8fc 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f900 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2f904 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f908 3b0 41 46 62 FD |                 dirh    dp
2f90c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f910 3b2             | 
2f910 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2f914 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2f918 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2f91c 3b5             | 
2f91c 3b5             | hlut_end
2f91c 3b5             |                 fit     $400
2f91c 3b5             |                 orgh
2f91c                 | if OVERLAP_MEMORY
2f91c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2f91c                 | end
2f91c                 | '------------------------------------------------------------------------------
2f91c                 | ' Routines called from cog space.
2f91c                 | '------------------------------------------------------------------------------
2f91c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2f91c                 | '------------------------------------------------------------------------------
2f91c                 | 
2f91c                 | '------------------------------------------------------------------------------
2f91c                 | ' USB host cog initialization.
2f91c                 | '------------------------------------------------------------------------------
2f91c                 | usb_host_init
2f91c                 |                 ' Initialize buffer pointers
2f91c                 |         if OVERLAP_MEMORY
2f91c                 |         else
2f91c     40 15 B0 FE |                 loc     pb, #hid_descr
2f920                 |         end
2f920     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2f924                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2f924                 |                 {
2f924                 |                 }
2f924                 |         
2f924                 |                 {
2f924                 |                 }
2f924                 |                 'loc     pb,#hkbd_report
2f924                 |                 'mov     hkbd_report_p,pb
2f924                 | 
2f924     08 1D B0 FE |                 loc     pb, #hub_descr
2f928     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2f92c     1D 1D B0 FE |                 loc     pb, #urx_buff
2f930     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2f934     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2f938     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2f93c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2f940     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2f944     18 15 B0 FE |                 loc     pb, #usb_cache_start
2f948     F7 55 02 F6 |                 mov     cache_start_p, pb
2f94c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2f950     F7 57 02 F6 |                 mov     cache_end_p, pb
2f954                 | 
2f954                 |         if ERROR_LED >= 0
2f954                 |         end
2f954                 | 
2f954                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2f954                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2f954                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2f954                 | ' Configure and enable the Serial Host USB port.
2f954     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2f958                 | 
2f958                 | '------------------------------------------------------------------------------
2f958                 | ' Timing calculations happen before any interrupt(s) are enabled.
2f958                 | '------------------------------------------------------------------------------
2f958                 | ' On entry:
2f958                 | '   htmp - current CLKFREQ value.
2f958                 | '------------------------------------------------------------------------------
2f958                 | hinit_usb_timings
2f958                 | '                getct   htmp2
2f958     B8 59 02 F6 |                 mov     save_sysclk, htmp
2f95c     8D 5B 80 FF 
2f960     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2f964     18 30 63 FD |                 getqx   _12Mbps_
2f968     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2f96c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2f970     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2f974     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2f978     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2f97c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2f980     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2f984     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2f988     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2f98c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2f990     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2f994     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2f998     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2f99c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2f9a0     80 00 00 FF 
2f9a4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2f9a8     18 2C 63 FD |                 getqx   _var_64_lower_
2f9ac     19 2E 63 FD |                 getqy   _var_64_upper_
2f9b0     28 2C 63 FD |                 setq    _var_64_lower_
2f9b4     65 CD 1D FF 
2f9b8     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2f9bc     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2f9c0     01 00 00 FF 
2f9c4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2f9c8     18 2C 63 FD |                 getqx   _var_64_lower_
2f9cc     19 2E 63 FD |                 getqy   _var_64_upper_
2f9d0     28 2C 63 FD |                 setq    _var_64_lower_
2f9d4     A1 07 00 FF 
2f9d8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2f9dc     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2f9e0     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2f9e4     09 36 57 F0 |                 shr     _1us_, #9               wc
2f9e8     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2f9ec     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2f9f0     18 38 63 FD |                 getqx   _10us_
2f9f4     09 38 57 F0 |                 shr     _10us_, #9              wc
2f9f8     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2f9fc     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2fa00     18 3A 63 FD |                 getqx   _33us_
2fa04     09 3A 57 F0 |                 shr     _33us_, #9              wc
2fa08     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2fa0c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2fa10     18 3C 63 FD |                 getqx   _txn_err_
2fa14     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2fa18     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2fa1c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2fa20     18 3E 63 FD |                 getqx   _500us_
2fa24     09 3E 57 F0 |                 shr     _500us_, #9             wc
2fa28     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2fa2c     01 00 00 FF 
2fa30     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2fa34     18 40 63 FD |                 getqx   _txn_ok_ls_
2fa38     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2fa3c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2fa40     01 00 00 FF 
2fa44     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2fa48     18 42 63 FD |                 getqx   _txn_ok_fs_
2fa4c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2fa50     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2fa54     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2fa58     05 00 00 FF 
2fa5c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2fa60     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2fa64     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2fa68     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2fa6c     1C 00 00 FF 
2fa70     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2fa74     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2fa78     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2fa7c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2fa80     00 00 00 FF 
2fa84     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2fa88     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2fa8c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2fa90     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2fa94     04 00 00 FF 
2fa98     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2fa9c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2faa0     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2faa4     8D 5B 00 FF 
2faa8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2faac     18 4C 63 FD |                 getqx   _preamble_wait_
2fab0     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2fab4     01 00 00 FF 
2fab8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2fabc     18 2C 63 FD |                 getqx   _var_64_lower_
2fac0     19 2E 63 FD |                 getqy   _var_64_upper_
2fac4     28 2C 63 FD |                 setq    _var_64_lower_
2fac8     01 00 00 FF 
2facc     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2fad0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2fad4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2fad8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2fadc     FF FF 7F FF 
2fae0     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2fae4     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2fae8     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2faec     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2faf0     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2faf4     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2faf8     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2fafc     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2fb00     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2fb04     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2fb08     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2fb0c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2fb10     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2fb14     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2fb18     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2fb1c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2fb20     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2fb24     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2fb28     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2fb2c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2fb30     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2fb34     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2fb38     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2fb3c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2fb40     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2fb44     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2fb48     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2fb4c                 | '        _ret_   mov     _1sec_, save_sysclk
2fb4c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2fb4c                 | '                ret
2fb4c                 | {
2fb4c                 | }
2fb4c                 | 
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2fb4c                 | ' one. If it is, start the task progression that will configure the device for
2fb4c                 | ' use.
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | ' On entry:
2fb4c                 | '   hconfig_base - start address of the cached config descriptor chain.
2fb4c                 | ' On exit:
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | hparse_con_desc
2fb4c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2fb50     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2fb54     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2fb58     4E 70 FF F9 |                 movbyts htmp,#%%1032
2fb5c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2fb60                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2fb60                 | 
2fb60     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2fb64     6E ED 03 F1 |                 add     pa, hconfig_base
2fb68     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2fb6c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2fb6c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2fb6c                 | ' that defines a keyboard and/or mouse.
2fb6c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2fb70                 | .next_intf
2fb70     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2fb74     BC 01 90 3D |         if_ae   jmp     #hset_config
2fb78     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2fb7c     75 F3 03 F1 |                 add     ptrb, hnext_desc
2fb80     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2fb84     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2fb88     0C 00 90 AD |         if_z    jmp     #.intf
2fb8c     80 71 C7 FA |                 rdbyte  htmp, ptrb
2fb90     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2fb94     D8 FF 9F FD |                 jmp     #.next_intf
2fb98                 | .intf
2fb98     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2fb9c     00 90 07 F6 |                 mov     hpar3, #0
2fba0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2fba4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2fba8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2fbac     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2fbb0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2fbb0                 | 
2fbb0                 | .endp
2fbb0     80 71 C7 FA |                 rdbyte  htmp, ptrb
2fbb4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2fbb8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2fbbc     78 00 90 3D |         if_ae   jmp     #.get_device
2fbc0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2fbc4     75 F3 03 F1 |                 add     ptrb, hnext_desc
2fbc8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2fbcc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2fbd0     64 00 90 AD |         if_z    jmp     #.get_device
2fbd4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2fbd8     04 00 90 AD |         if_z    jmp     #.get_ep
2fbdc     D0 FF 9F FD |                 jmp     #.endp
2fbe0                 | .get_ep
2fbe0     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2fbe4     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2fbe8     0F 86 67 F0 |                 shl     hr1, #8 + 7
2fbec     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2fbf0     3F 00 00 FF 
2fbf4     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2fbf8     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2fbfc     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2fc00     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2fc04     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fc08     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2fc0c     A0 FF 9F FD |                 jmp     #.endp
2fc10                 | .in_ep
2fc10     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2fc14     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2fc18                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2fc18     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2fc1c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2fc20     8C FF 9F FD |                 jmp     #.endp
2fc24                 | .out_ep
2fc24     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2fc28     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2fc2c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2fc2c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2fc30     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2fc34     78 FF 9F FD |                 jmp     #.endp
2fc38                 | 
2fc38                 | .get_device
2fc38     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2fc3c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2fc40     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2fc44     68 00 90 AD |         if_z    jmp     #.gamepad
2fc48     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2fc4c     AC 00 90 AD |         if_z    jmp     #.hub
2fc50     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2fc54     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2fc58     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2fc5c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2fc60     4C 00 90 AD |         if_z    jmp     #.gamepad
2fc64     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2fc68     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2fc6c                 | .keyboard
2fc6c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2fc70                 |         if HAVE_MOUSE
2fc70     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2fc74                 |         else
2fc74                 |         end
2fc74     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2fc78     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2fc7c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2fc80     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2fc84     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2fc88     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2fc8c                 |                 'debug(udec(kb_intf_num))
2fc8c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2fc8c     E0 FE 9F FD |                 jmp     #.next_intf
2fc90                 | if HAVE_MOUSE
2fc90                 | .mouse
2fc90     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2fc94     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2fc98     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2fc9c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2fca0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2fca4                 |                 'getbyte ms_interval, hr2, #3
2fca4     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2fca8     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2fcac                 |                 'debug(udec(kb_intf_num))
2fcac                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2fcac     C0 FE 9F FD |                 jmp     #.next_intf
2fcb0                 | end
2fcb0                 | .gamepad
2fcb0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2fcb4     C7 71 63 F5 |                 xor     htmp, hpar2
2fcb8     3F 00 00 FF 
2fcbc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fcc0     AC FE 9F AD |         if_z    jmp     #.next_intf
2fcc4                 |         if HAVE_MOUSE
2fcc4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2fcc8     C7 71 63 F5 |                 xor     htmp, hpar2
2fccc     3F 00 00 FF 
2fcd0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fcd4     98 FE 9F AD |         if_z    jmp     #.next_intf
2fcd8                 |         end
2fcd8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2fcdc     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2fce0     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2fce4                 | 
2fce4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2fce8     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2fcec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2fcf0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2fcf4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2fcf8                 |                 'debug(udec(gp_intf_num))
2fcf8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2fcf8     74 FE 9F FD |                 jmp     #.next_intf
2fcfc                 | .hub
2fcfc     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2fd00     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2fd04     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2fd08     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2fd0c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2fd10     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2fd14     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2fd18     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2fd1c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2fd20     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2fd24     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2fd28     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2fd2c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2fd30                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2fd30     3C FE 9F FD |                 jmp     #.next_intf
2fd34                 | 
2fd34                 | '------------------------------------------------------------------------------
2fd34                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2fd34                 | ' it according to its function, or functions. In the case of this boot protocol
2fd34                 | ' keyboard/mouse class driver:
2fd34                 | ' - SetConfiguration(config_num)
2fd34                 | ' - SetProtocol(boot)
2fd34                 | ' - SetIdle(indefinite)
2fd34                 | ' - Enter the device interrupt IN polling task stage.
2fd34                 | '------------------------------------------------------------------------------
2fd34                 | ' On entry:
2fd34                 | ' On exit:
2fd34                 | '------------------------------------------------------------------------------
2fd34                 | hset_config
2fd34                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2fd34                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2fd34     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2fd38     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2fd3c     00 00 0C F2 |                 cmp     0-0, #0                 wz
2fd40     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2fd44                 |         if HAVE_MOUSE
2fd44     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2fd48                 |         end
2fd48     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2fd4c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2fd50                 | .set_config
2fd50     6C 0E D0 FE |                 loc     ptra, #set_config
2fd54     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2fd58     6E ED 03 F1 |                 add     pa, hconfig_base
2fd5c     F6 8D C3 FA |                 rdbyte  hpar1, pa
2fd60     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2fd64     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2fd68     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2fd6c     A0 02 A0 FD |                 call    #control_write
2fd70     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fd74     2D 00 64 5D |         if_nz   ret
2fd78                 | .kbd_config
2fd78     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2fd7c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2fd80                 | 
2fd80     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2fd84     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2fd88     3F 00 00 FF 
2fd8c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fd90     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2fd94                 | 
2fd94     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2fd98     34 0E D0 FE |                 loc     ptra, #set_protocol
2fd9c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2fda0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2fda4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2fda8     A0 02 A0 FD |                 call    #control_write
2fdac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fdb0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2fdb4     E4 02 90 5D |         if_nz   jmp     #.notify_client
2fdb8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2fdbc     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2fdc0     30 03 B0 FD |                 call    #hset_idle
2fdc4                 |                 'cmp     retval, #PID_ACK        wz
2fdc4                 |         'if_nz   mov     hkbd_ep_addr, #0
2fdc4                 |         'if_nz   jmp     #.notify_client
2fdc4     A8 99 02 F6 |                 mov     hctwait, _2ms_
2fdc8     EF 02 A0 FD |                 call    #poll_waitx
2fdcc     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2fdd0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2fdd4     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2fdd8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2fddc     2C 03 B0 FD |                 call    #hset_kbdled_report
2fde0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fde4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2fde8     B0 02 90 5D |         if_nz   jmp     #.notify_client
2fdec     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2fdf0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2fdf4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2fdf8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2fdfc     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2fe00     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2fe04     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2fe08     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2fe0c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2fe10     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2fe14     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2fe18                 |         if !!HAVE_MOUSE
2fe18                 |         end
2fe18                 | 
2fe18                 | .mouse_config
2fe18                 | if HAVE_MOUSE
2fe18     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2fe1c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2fe20     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2fe24     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2fe28     3F 00 00 FF 
2fe2c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fe30     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2fe34                 | 
2fe34                 |                 debug("mouse passed addr check")
2fe34                 | 
2fe34     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2fe38     00 00 80 FF 
2fe3c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2fe40     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2fe44     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fe48     55 02 A0 FD |                 call    #control_read
2fe4c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fe50     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2fe54     44 02 90 5D |         if_nz   jmp     #.notify_client
2fe58     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2fe5c     56 01 00 F6 |                 mov     0-0, total_data
2fe60     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fe64                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2fe64                 | 
2fe64     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2fe68     64 0D D0 FE |                 loc     ptra, #set_protocol
2fe6c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2fe70     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2fe74     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2fe78     A0 02 A0 FD |                 call    #control_write
2fe7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fe80     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2fe84     14 02 90 5D |         if_nz   jmp     #.notify_client
2fe88                 |                 debug("mouse passed SetProtocol")
2fe88     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2fe8c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2fe90     60 02 B0 FD |                 call    #hset_idle
2fe94                 |                 'cmp     retval, #PID_ACK        wz
2fe94                 |         'if_nz   mov     hmouse_ep_addr, #0
2fe94                 |         'if_nz   jmp     #.notify_client
2fe94                 |                 debug("mouse passed SetIdle")
2fe94     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2fe98     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2fe9c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2fea0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2fea4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2fea8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2feac     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2feb0     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2feb4     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2feb8     3F 00 00 FF 
2febc     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2fec0     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2fec4     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2fec8     D0 01 90 FD |                 jmp     #.notify_client
2fecc                 | end
2fecc                 | .gamepad_config
2fecc                 | if _HAVE_GAMEPAD
2fecc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2fed0     00 00 0C F2 |                 cmp     0-0, #0                 wz
2fed4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2fed8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fedc     00 70 03 F6 |                 mov     htmp, 0-0
2fee0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2fee4     3F 00 00 FF 
2fee8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2feec     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2fef0                 | 
2fef0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fef4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2fef8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2fefc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ff00     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2ff04     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ff08     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2ff0c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2ff10     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2ff14     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ff18     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ff1c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2ff20     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2ff24     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2ff28                 | 
2ff28                 |                 if EMUPAD_MAX_PLAYER > 0
2ff28                 |                 
2ff28                 | .rule_loop           
2ff28                 |                 end
2ff28                 | 
2ff28     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2ff2c     5C 00 90 AD |         if_e    jmp     #.xinput
2ff30     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2ff34     00 70 03 F6 |                 mov     htmp,0-0
2ff38     01 A6 02 FF 
2ff3c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2ff40     7C 00 90 AD |         if_e    jmp     #.ps3
2ff44                 | 
2ff44     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2ff48     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2ff4c     00 00 80 5F 
2ff50     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2ff54     03 00 80 AF 
2ff58     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2ff5c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2ff60     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ff64     55 02 A0 FD |                 call    #control_read
2ff68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ff6c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2ff70     00 00 04 56 |         if_nz   mov     0-0, #0
2ff74     24 01 90 5D |         if_nz   jmp     #.notify_client
2ff78     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2ff7c     56 01 00 F6 |                 mov     0-0, total_data
2ff80     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2ff84                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2ff84                 | 
2ff84     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2ff88     10 01 90 FD |                 jmp     #.notify_client
2ff8c                 | .xinput
2ff8c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2ff90     2D EF 03 F6 |                 mov     pb,hdev_port
2ff94     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2ff98     03 EE 27 F3 |                 fle     pb,#3
2ff9c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2ffa0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2ffa4                 | 
2ffa4     03 B0 06 F6 |                 mov     pkt_data, #3
2ffa8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2ffac     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2ffb0     5A 00 A0 FD |                 call    #txn_out
2ffb4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2ffb8                 | 
2ffb8     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2ffbc     DC 00 90 FD |                 jmp     #.notify_client
2ffc0                 | .ps3
2ffc0     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2ffc4     2D EF 03 F6 |                 mov     pb,hdev_port
2ffc8     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2ffcc     04 EE 27 F3 |                 fle     pb,#4
2ffd0     F7 EF C3 F9 |                 decod   pb
2ffd4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2ffd8                 | 
2ffd8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2ffdc     00 0C D0 FE |                 loc     ptra, #set_report
2ffe0     01 00 80 FF 
2ffe4     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2ffe8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2ffec     03 61 5C FC |                 wrword  #48, ptra[wLength]
2fff0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2fff4     A0 02 A0 FD |                 call    #control_write
2fff8                 | 
2fff8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2fffc     E0 0B D0 FE |                 loc     ptra, #set_report
30000     01 00 80 FF 
30004     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
30008     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3000c     03 09 5C FC |                 wrword  #4, ptra[wLength]
30010     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
30014     A0 02 A0 FD |                 call    #control_write
30018     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3001c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
30020     00 00 04 56 |         if_nz   mov     0-0, #0
30024     74 00 90 5D |         if_nz   jmp     #.notify_client
30028                 | 
30028     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3002c     6C 00 90 FD |                 jmp     #.notify_client
30030                 | end
30030                 | 
30030                 | .hub_config
30030     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
30034     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
30038     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3003c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
30040     3F 00 00 FF 
30044     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
30048     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3004c                 | 
3004c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
30050     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
30054     26 EF 03 F6 |                 mov     pb, hub_descr_p
30058     55 02 A0 FD |                 call    #control_read
3005c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30060     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
30064     34 00 90 5D |         if_nz   jmp     #.notify_client
30068                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
30068                 | 
30068     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3006c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
30070     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
30074                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
30074                 | .pwr_loop
30074     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
30078     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3007c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
30080     A0 02 A0 FD |                 call    #control_write
30084     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
30088                 | 
30088     B1 99 02 F6 |                 mov     hctwait, _500ms_
3008c     B0 99 02 F1 |                 add     hctwait, _100ms_
30090     EF 02 A0 FD |                 call    #poll_waitx
30094                 | 
30094     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
30098     00 00 90 FD |                 jmp     #.notify_client
3009c                 | 
3009c                 | .notify_client
3009c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
300a0     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
300a4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
300a4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
300a4     2D 00 64 FD |                 ret
300a8                 | 
300a8                 | '------------------------------------------------------------------------------
300a8                 | ' Initialize the keyboard/mouse data area to start-up values.
300a8                 | '------------------------------------------------------------------------------
300a8                 | ' On entry:
300a8                 | ' On exit:
300a8                 | '------------------------------------------------------------------------------
300a8                 | init_kbdm_data
300a8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
300ac     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
300b0                 | 
300b0     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
300b4     2B ED 03 F6 |                 mov     pa, cache_end_p
300b8                 | .loop
300b8     61 01 4C FC |                 wrbyte  #0, ptra++
300bc     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
300c0     F4 FF 9F CD |         if_b    jmp     #.loop
300c4                 |         
300c4                 |         if EMUPAD_MAX_PLAYER > 0
300c4                 |         end
300c4                 | 
300c4                 | 
300c4     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
300c8                 | .regloop
300c8     00 EC 8F F9 |                 altd    pa
300cc     00 00 04 F6 |                 mov     0-0, #0
300d0     01 EC 07 F1 |                 add     pa, #1
300d4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
300d8     EC FF 9F 5D |         if_nz   jmp     #.regloop
300dc                 | 
300dc     E1 E1 61 FF 
300e0     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
300e4     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
300e8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
300ec     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
300f0                 | 
300f0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
300f4                 | 
300f4                 | '------------------------------------------------------------------------------
300f4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
300f4                 | ' function.
300f4                 | '------------------------------------------------------------------------------
300f4                 | ' On entry:
300f4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
300f4                 | '   hpar2 - index number of the target interface.
300f4                 | ' On exit:
300f4                 | '------------------------------------------------------------------------------
300f4                 | hset_idle
300f4     A8 99 02 F6 |                 mov     hctwait, _2ms_
300f8     EF 02 A0 FD |                 call    #poll_waitx
300fc     D8 0A D0 FE |                 loc     ptra, #set_idle
30100     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
30104     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
30108     A0 02 80 FD |                 jmp     #control_write
3010c                 | 
3010c                 | '------------------------------------------------------------------------------
3010c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3010c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3010c                 | '------------------------------------------------------------------------------
3010c                 | ' On entry:
3010c                 | '   ep_addr_pid - device address and enpoint for the request.
3010c                 | ' On exit:
3010c                 | '   retval - transaction result.
3010c                 | '------------------------------------------------------------------------------
3010c                 | hset_kbdled_report
3010c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
30110     CC 0A D0 FE |                 loc     ptra, #set_report
30114     01 00 80 FF 
30118     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3011c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
30120     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
30124     27 EF 03 F6 |                 mov     pb, urx_buff_p
30128     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3012c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
30130                 | 
30130                 | '------------------------------------------------------------------------------
30130                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
30130                 | '------------------------------------------------------------------------------
30130                 | ' On entry:
30130                 | ' On exit:
30130                 | '------------------------------------------------------------------------------
30130                 | hget_kbd_in_report
30130     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
30134     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
30138     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3013c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
30140     CF 02 A0 FD |                 call    #do_int_in
30144     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30148     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3014c                 | 
3014c     00 90 0F F2 |                 cmp     hpar3, #0               wz
30150     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
30154                 | 
30154     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
30158     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3015c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
30160     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
30164                 | 
30164     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
30168     18 00 B0 FD |                 call    #hkbd_compare
3016c                 |         if EMUPAD_MAX_PLAYER > 0
3016c                 |         end
3016c                 | 
3016c                 | .led_check
3016c     3B 71 03 F6 |                 mov     htmp, kb_led_states
30170     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
30174     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
30178     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3017c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
30180     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
30184                 | 
30184                 | '------------------------------------------------------------------------------
30184                 | ' Compare current and previous keyboard data buffers for keypress changes.
30184                 | '------------------------------------------------------------------------------
30184                 | hkbd_compare
30184     27 F1 03 F6 |                 mov     ptra, urx_buff_p
30188     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3018c     61 73 07 FB |                 rdlong  htmp1, ptra++
30190     E1 75 07 FB |                 rdlong  htmp2, ptrb++
30194     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
30198     61 73 07 FB |                 rdlong  htmp1, ptra++
3019c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
301a0     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
301a4     2D 00 64 AD |         if_z    ret
301a8                 | 
301a8     B4 13 D0 FE |                 loc     ptra, #hkbd_report
301ac                 | 
301ac                 |                 ' Handle modifiers
301ac     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
301b0     00 87 C7 FA |                 rdbyte  hr1, ptra
301b4     C7 87 43 F9 |                 rolword hr1,hpar2,#0
301b8     63 86 63 FD |                 mergew  hr1
301bc     08 EC 07 F6 |                 mov     pa,#8
301c0                 | .modloop
301c0     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
301c4     E8 8C 07 F6 |                 mov     hpar1,#$E8
301c8     F6 8D 83 F1 |                 sub     hpar1,pa
301cc     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
301d0     FB ED 6F FB |                 djnz    pa,#.modloop
301d4                 | 
301d4     6F E0 75 FD | .release        modc    _set    wc
301d8                 |                 'alts    hdev_port, #hid_report_p
301d8                 |                 'mov     ptra, hid_report_p
301d8     02 F0 07 F1 |                 add     ptra, #2
301dc     06 EC 07 F6 |                 mov     pa, #6
301e0     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
301e4     20 00 90 AD |         if_z    jmp     #.rl3
301e8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
301ec     02 F2 07 F1 |                 add     ptrb, #2
301f0     06 EE 07 F6 |                 mov     pb, #6
301f4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
301f8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
301fc     08 00 90 AD |         if_z    jmp     #.rl3
30200     FC EF 6F FB |                 djnz    pb, #.rl2
30204     68 00 B0 FD |                 call    #hkbd_translate
30208     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3020c                 | 
3020c     00 90 07 F6 |                 mov     hpar3, #0
30210     1F 90 27 F4 |                 bith    hpar3, #31
30214                 | 
30214     6F 00 74 FD | .press          modc    _clr    wc
30218     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3021c     02 F0 07 F1 |                 add     ptra, #2
30220     06 EC 07 F6 |                 mov     pa, #6
30224     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
30228     20 00 90 AD |         if_z    jmp     #.pl3
3022c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
30230     02 F2 07 F1 |                 add     ptrb, #2
30234     06 EE 07 F6 |                 mov     pb, #6
30238     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3023c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
30240     08 00 90 AD |         if_z    jmp     #.pl3
30244     FC EF 6F FB |                 djnz    pb, #.pl2
30248     24 00 B0 FD |                 call    #hkbd_translate
3024c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
30250                 | 
30250     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
30254     08 13 F0 FE |                 loc     ptrb, #hkbd_report
30258     28 02 64 FD |                 setq #1
3025c     61 73 07 FB |                 rdlong  htmp1, ptra++
30260     28 02 64 FD |                 setq #1
30264     E1 73 67 FC |                 wrlong  htmp1, ptrb++
30268     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3026c                 | 
3026c     2D 00 64 FD |                 ret
30270                 | 
30270                 | '------------------------------------------------------------------------------
30270                 | ' Translate keyboard scancode to ASCII
30270                 | '------------------------------------------------------------------------------
30270                 | ' On entry:
30270                 | '   hpar1 - scancode
30270                 | '   hpar2 - key modifiers state
30270                 | '       c - pressed (0) or released (1) flag
30270                 | ' On exit:
30270                 | '   hpar1 - bit     31 = 0 pressed, 1 released
30270                 | '               30..17 = unused
30270                 | '                   18 = scroll-lock state 
30270                 | '                   17 = caps-lock state
30270                 | '                   16 = num-lock state 
30270                 | '                15..8 = key modifiers state
30270                 | '                 7..0 = scancode
30270                 | '------------------------------------------------------------------------------
30270                 | hkbd_translate
30270     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
30274     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
30278     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3027c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
30280     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
30284     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
30288                 | 
30288                 |         if EMUPAD_MAX_PLAYER > 0
30288                 | 
30288                 |         if EMUPAD_BT0_BIT >= 0
30288                 |         end
30288                 |         if EMUPAD_BT1_BIT >= 0
30288                 |         end
30288                 |         if EMUPAD_BT2_BIT >= 0
30288                 |         end
30288                 |         if EMUPAD_BT3_BIT >= 0
30288                 |         end
30288                 |         if EMUPAD_BT4_BIT >= 0
30288                 |         end
30288                 |         if EMUPAD_BT5_BIT >= 0
30288                 |         end
30288                 |         if EMUPAD_BT6_BIT >= 0
30288                 |         end
30288                 |         if EMUPAD_BT7_BIT >= 0
30288                 |         end
30288                 |         if EMUPAD_BT8_BIT >= 0
30288                 |         end
30288                 |         if EMUPAD_BT9_BIT >= 0
30288                 |         end
30288                 | 
30288                 |         end
30288     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3028c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
30290     1F 8C 47 F4 |                 bitc    hpar1, #31
30294                 |         if KEYQUEUE_SIZE > 0
30294     C4 09 B0 FE |                 loc pb,#keyq_head
30298     F7 71 E3 FA |                 rdword htmp,pb
3029c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
302a0     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
302a4     B8 75 03 F6 |                 mov htmp2,htmp
302a8     04 74 07 FA |                 mul htmp2,#4
302ac     F7 75 03 F1 |                 add htmp2,pb
302b0     02 74 07 F1 |                 add htmp2,#2
302b4     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
302b8     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
302bc     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
302c0     F7 71 43 5C |         if_nz   wrbyte htmp,pb
302c4                 |         end
302c4     2D 00 7C FD |                 ret wcz
302c8                 | 
302c8                 | if HAVE_MOUSE
302c8                 | '------------------------------------------------------------------------------
302c8                 | ' Execute an IN interrupt transaction to poll for mouse activity.
302c8                 | '------------------------------------------------------------------------------
302c8                 | ' On entry:
302c8                 | ' On exit:
302c8                 | '------------------------------------------------------------------------------
302c8                 | hget_mouse_in_report
302c8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
302cc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
302d0     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
302d4     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
302d8     CF 02 A0 FD |                 call    #do_int_in
302dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
302e0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
302e4                 | 
302e4     00 90 0F F2 |                 cmp     hpar3, #0               wz
302e8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
302ec                 | 
302ec     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
302f0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
302f4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
302f8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
302fc                 | 
302fc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
30300     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
30304     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
30308     01 90 87 31 |         if_ae   sub     hpar3, #1
3030c                 | 
3030c     40 09 90 FE |                 loc     pa, #mouse_limits
30310     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
30314                 | 
30314                 |                 ' load xacc,yacc,zacc
30314     28 04 64 FD |                 setq    #3-1
30318     80 87 07 FB |                 rdlong  hr1,ptrb
3031c                 |                 ' load limits and outptr
3031c     28 04 64 FD |                 setq    #3-1
30320     F6 73 03 FB |                 rdlong  htmp1,pa
30324                 | 
30324     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
30328     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3032c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
30330     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
30334     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
30338     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3033c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
30340     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
30344                 |               
30344                 | 
30344     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
30348     07 70 67 F7 |                 signx   htmp, #7
3034c     B8 87 03 F1 |                 add     hr1,htmp
30350     00 72 0F F2 |                 cmp     htmp1,#0 wz
30354     B9 87 63 53 |         if_ne   fles    hr1,htmp1
30358     00 86 47 53 |         if_ne   fges    hr1,#0
3035c                 | 
3035c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
30360     07 70 67 F7 |                 signx   htmp, #7
30364     B8 89 03 F1 |                 add     hr2,htmp
30368     00 74 0F F2 |                 cmp     htmp2,#0 wz
3036c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
30370     00 88 47 53 |         if_ne   fges    hr2,#0
30374                 |                 
30374                 | 
30374     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
30378     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3037c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
30380     B8 8B 03 A1 |         if_z    add     hr3,htmp
30384                 | 
30384     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
30388     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3038c                 | 
3038c                 |                 ' write back accumulators
3038c     28 04 64 FD |                 setq    #3-1
30390     80 87 67 FC |                 wrlong  hr1,ptrb
30394                 |                 ' if outptr set, write X/Y words
30394     00 76 0F F2 |                 cmp htmp3,#0                    wz
30398     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3039c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
303a0     2D 00 64 FD |                 ret
303a4                 | end
303a4                 | 
303a4                 | '------------------------------------------------------------------------------
303a4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
303a4                 | '------------------------------------------------------------------------------
303a4                 | ' On entry:
303a4                 | ' On exit:
303a4                 | '------------------------------------------------------------------------------
303a4                 | if _HAVE_GAMEPAD
303a4                 | hget_gp_in_report
303a4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
303a8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
303ac                 | 
303ac     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
303b0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
303b4     00 90 E3 F8 |                 getbyte hpar3
303b8     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
303bc     CF 02 A0 FD |                 call    #do_int_in
303c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
303c4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
303c8                 | 
303c8     00 90 0F F2 |                 cmp     hpar3, #0               wz
303cc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
303d0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
303d0                 | 
303d0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
303d4     00 70 E3 F8 |                 getbyte htmp                            ' |
303d8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
303dc     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
303e0     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
303e4     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
303e8     B8 01 C0 F8 |                 setbyte htmp                            ' |
303ec                 | 
303ec                 | ' Note: the following code compares the current and previous reports
303ec                 | ' and process the data if there are changes to ease the debug output.
303ec                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
303ec                 | ' gpPreReport buffer.
303ec                 | 
303ec                 |                 ' ----- start of block to remove
303ec                 |                 {
303ec                 |                 }
303ec                 |                 ' ----- end of block to remove
303ec     F4 04 90 FE |                 loc pa,#hpad_translate
303f0     2A EC 63 FD |                 push pa
303f4                 | 
303f4                 |                 ' FALL THROUGH !!!!
303f4                 | 
303f4                 | '------------------------------------------------------------------------------
303f4                 | ' Decode controller report
303f4                 | '------------------------------------------------------------------------------
303f4                 | hid_decode
303f4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
303f4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
303f8     00 04 00 FF 
303fc     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
30400                 | 
30400     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
30404                 | 
30404     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
30408     00 2A E3 F8 |                 getbyte hidr_type
3040c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
30410     34 02 90 AD |         if_z    jmp     #hpad_xinput
30414     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
30418     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3041c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
30420     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
30424     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
30428                 |                 
30428                 | 
30428                 | '------------------------------------------------------------------------------
30428                 | ' Handle HID controller (or mouse now
30428                 | ' On entry:
30428                 | '   ptrb - controller report
30428                 | '------------------------------------------------------------------------------
30428                 | hpad_hid
30428     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3042c     F7 F1 03 F6 |                 mov     ptra, pb
30430     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
30434     00 EC 03 F6 |                 mov     pa, 0-0
30438                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
30438     19 2A 3B FF 
3043c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
30440                 | 
30440                 | .next
30440     00 EC 5F F2 |                 cmps    pa, #0      wcz
30444     2D 00 7C ED |         if_be   ret     wcz
30448                 | 
30448     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3044c     01 EC 87 F1 |                 sub     pa, #1
30450     00 8E 07 F6 |                 mov     hpar2, #0
30454                 | 
30454     C6 71 03 F6 |                 mov     htmp, hpar1
30458     03 70 07 F5 |                 and     htmp, #$03
3045c     01 70 0F F2 |                 cmp     htmp, #1    wz
30460     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
30464     07 8E 67 A7 |         if_z    signx   hpar2,#7
30468     01 EC 87 A1 |         if_z    sub     pa, #1
3046c     02 70 0F F2 |                 cmp     htmp, #2    wz
30470     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
30474     0F 8E 67 A7 |         if_z    signx   hpar2,#15
30478     02 EC 87 A1 |         if_z    sub     pa, #2
3047c     03 70 0F F2 |                 cmp     htmp, #3    wz
30480     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
30484     04 EC 87 A1 |         if_z    sub     pa, #4
30488                 | 
30488     FC 8C 07 F5 |                 and     hpar1, #$FC
3048c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3048c                 | 
3048c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
30490     0C 01 90 AD |         if_z    jmp     #.report_id
30494     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
30498     24 01 90 AD |         if_z    jmp     #.usage_page
3049c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
304a0     2C 01 90 AD |         if_z    jmp     #.usage
304a4     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
304a8     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
304ac     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
304b0     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
304b4     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
304b8     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
304bc     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
304c0     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
304c4     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
304c8     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
304cc     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
304d0     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
304d4     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
304d8     64 FF 9F 5D |         if_nz   jmp     #.next
304dc                 | 
304dc     D8 1D A7 FB |                 tjf     hidr_state,#.next
304e0                 | 
304e0     03 8E 07 F5 |                 and     hpar2, #$03
304e4     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
304e8     18 00 90 5D |         if_nz   jmp     #.skip
304ec                 | 
304ec     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
304f0     20 00 90 AD |         if_z    jmp     #.axes
304f4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
304f8     5C 00 90 AD |         if_z    jmp     #.hats
304fc     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
30500     70 00 90 AD |         if_z    jmp     #.buttons
30504                 | .skip
30504     8F 71 03 F6 |                 mov     htmp, hidr_size
30508     90 71 03 FA |                 mul     htmp, hidr_count
3050c     B8 23 03 F1 |                 add     hidr_offset, htmp
30510     2C FF 9F FD |                 jmp     #.next
30514                 | .axes
30514                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
30514     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
30518     90 87 03 F6 |                 mov     hr1, hidr_count
3051c                 | .l1
3051c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
30520     8F 8F 03 F6 |                 mov     hpar2, hidr_size
30524     04 03 B0 FD |                 call    #hpad_getbits
30528     64 03 B0 FD |                 call    #hpad_normalize
3052c     06 84 1F F2 |                 cmp     hr0, #6         wcz
30530     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
30534     00 88 43 C8 |         if_b    getnib  hr2
30538     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3053c     5F 01 20 C9 |         if_b    setword retval
30540     01 84 07 C1 |         if_b    add     hr0, #1
30544     8F 23 03 F1 |                 add     hidr_offset, hidr_size
30548     F4 87 6F FB |                 djnz    hr1, #.l1
3054c                 | 
3054c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
30550     01 1C 07 F6 |                 mov     hidr_state, #1
30554     E8 FE 9F FD |                 jmp     #.next
30558                 | .hats
30558                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
30558     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3055c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
30560     C8 02 B0 FD |                 call    #hpad_getbits
30564     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
30568     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3056c     01 1C 07 F6 |                 mov     hidr_state, #1
30570     90 FF 9F FD |                 jmp     #.skip
30574                 | .buttons
30574                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
30574     91 8D 03 F6 |                 mov     hpar1, hidr_offset
30578     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3057c     90 8F 03 FA |                 mul     hpar2, hidr_count
30580     A8 02 B0 FD |                 call    #hpad_getbits
30584     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
30588     B8 BF 62 F0 |                 shl     retval, htmp
3058c     5F 17 43 F5 |                 or      hidr_buttons, retval
30590     90 71 03 F1 |                 add     htmp, hidr_count
30594     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
30598     01 1C 07 F6 |                 mov     hidr_state, #1
3059c     64 FF 9F FD |                 jmp     #.skip
305a0                 | .report_id
305a0     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
305a4     2D 00 7C 5D |         if_nz   ret     wcz
305a8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
305ac     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
305b0     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
305b4     01 1C 67 56 |         if_nz   neg     hidr_state,#1
305b8     01 F2 87 51 |         if_nz   sub     ptrb,#1
305bc     80 FE 9F FD |                 jmp     #.next
305c0                 | .usage_page
305c0     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
305c4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
305c8     04 1C 07 A6 |         if_z    mov     hidr_state, #4
305cc     70 FE 9F FD |                 jmp     #.next
305d0                 | .usage
305d0     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
305d4     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
305d8     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
305dc     01 1C 07 A6 |         if_z    mov     hidr_state, #1
305e0     5C FE 9F AD |         if_z    jmp     #.next
305e4     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
305e8     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
305ec     01 1C 07 A6 |         if_z    mov     hidr_state, #1
305f0     4C FE 9F AD |         if_z    jmp     #.next
305f4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
305f8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
305fc     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
30600     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
30604     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
30608     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3060c     10 00 90 AD |         if_z    jmp     #.usage_axis
30610     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
30614     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
30618     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3061c     20 FE 9F FD |                 jmp     #.next
30620                 | .usage_axis
30620     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
30624     18 FE 9F CD |         if_b    jmp     #.next
30628     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3062c     C7 01 00 F8 |                 setnib  hpar2
30630                 | 
30630     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
30634     C7 8F C3 F9 |                 decod   hpar2
30638     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3063c                 | 
3063c     01 24 07 F1 |                 add     hidr_usage_idx, #1
30640     02 1C 07 F6 |                 mov     hidr_state, #2
30644     F8 FD 9F FD |                 jmp     #.next
30648                 | 
30648                 | '------------------------------------------------------------------------------
30648                 | ' Handle XInput controller
30648                 | ' On entry:
30648                 | '   ptrb - controller report
30648                 | '------------------------------------------------------------------------------
30648                 | '   Default implementation translates the report to a pseudo-defacto hid
30648                 | '   standard and jumps to hpad_translate for actions.
30648                 | '   Implementors may take specific actions for this kind of controller.
30648                 | '------------------------------------------------------------------------------
30648                 | hpad_xinput
30648     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3064c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
30650     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
30654     14 70 0F F2 |                 cmp     htmp, #$14      wz
30658     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3065c                 | 
3065c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3065c                 | 
3065c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
30660     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
30664                 | 
30664     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
30668     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3066c     5F BF 22 F6 |                 not     retval
30670     5F 11 2B F9 |                 setword hidr_axis, retval, #1
30674     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
30678     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3067c     5F BF 22 F6 |                 not     retval
30680     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
30684                 | 
30684     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
30688     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3068c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
30690     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
30694     F8 01 B0 FD |                 call    #hpad_normalize
30698     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3069c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
306a0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
306a4     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
306a8     E4 01 B0 FD |                 call    #hpad_normalize
306ac     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
306b0                 | 
306b0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
306b4     81 BF E6 FA |                 rdword  retval, ptrb[1]
306b8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
306bc     00 16 47 F4 |                 bitc    hidr_buttons, #0
306c0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
306c4     01 16 47 F4 |                 bitc    hidr_buttons, #1
306c8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
306cc     02 16 47 F4 |                 bitc    hidr_buttons, #2
306d0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
306d4     03 16 47 F4 |                 bitc    hidr_buttons, #3
306d8     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
306dc     04 16 47 F4 |                 bitc    hidr_buttons, #4
306e0     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
306e4     05 16 47 F4 |                 bitc    hidr_buttons, #5
306e8     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
306ec     08 16 47 F4 |                 bitc    hidr_buttons, #8
306f0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
306f4     09 16 47 F4 |                 bitc    hidr_buttons, #9
306f8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
306fc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
30700     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
30704     0B 16 47 F4 |                 bitc    hidr_buttons, #11
30708     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3070c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
30710                 | 
30710     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
30714     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
30718     7A BB 7A FF 
3071c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
30720     F9 FF 7F FF 
30724     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
30728     B9 71 5F F9 |                 altgn   htmp, #htmp1
3072c     00 70 43 F8 |                 getnib  htmp
30730     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
30734                 | 
30734     AC 01 90 FD |                 jmp     #hpad_translate
30738                 | 
30738                 | '------------------------------------------------------------------------------
30738                 | ' Handle PS3 controller
30738                 | ' On entry:
30738                 | '   ptrb - controller report
30738                 | '------------------------------------------------------------------------------
30738                 | '   Default implementation translates the report to a pseudo-defacto hid
30738                 | '   standard and jumps to hpad_translate for actions.
30738                 | '   Implementors may take specific actions for this kind of controller.
30738                 | '------------------------------------------------------------------------------
30738                 | hpad_ps3
30738     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3073c     01 70 0F F2 |                 cmp     htmp, #$01      wz
30740     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
30744                 | 
30744                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
30744                 | 
30744     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
30748     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3074c     40 01 B0 FD |                 call    #hpad_normalize
30750     5F 11 23 F9 |                 setword hidr_axis, retval, #0
30754     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
30758     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3075c     30 01 B0 FD |                 call    #hpad_normalize
30760     5F 11 2B F9 |                 setword hidr_axis, retval, #1
30764     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
30768     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3076c     20 01 B0 FD |                 call    #hpad_normalize
30770     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
30774     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
30778     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3077c     10 01 B0 FD |                 call    #hpad_normalize
30780     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
30784     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
30788     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3078c                 | 
3078c     08 8C 07 F6 |                 mov     hpar1, #8
30790     13 8E 07 F6 |                 mov     hpar2, #19
30794     94 00 B0 FD |                 call    #hpad_getbits
30798                 | 
30798     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3079c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
307a0     00 16 47 F4 |                 bitc    hidr_buttons, #0
307a4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
307a8     01 16 47 F4 |                 bitc    hidr_buttons, #1
307ac     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
307b0     02 16 47 F4 |                 bitc    hidr_buttons, #2
307b4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
307b8     03 16 47 F4 |                 bitc    hidr_buttons, #3
307bc     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
307c0     04 16 47 F4 |                 bitc    hidr_buttons, #4
307c4     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
307c8     05 16 47 F4 |                 bitc    hidr_buttons, #5
307cc     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
307d0     06 16 47 F4 |                 bitc    hidr_buttons, #6
307d4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
307d8     07 16 47 F4 |                 bitc    hidr_buttons, #7
307dc     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
307e0     08 16 47 F4 |                 bitc    hidr_buttons, #8
307e4     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
307e8     09 16 47 F4 |                 bitc    hidr_buttons, #9
307ec     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
307f0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
307f4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
307f8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
307fc     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
30800     0C 16 47 F4 |                 bitc    hidr_buttons, #12
30804                 | 
30804     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
30808     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3080c     09 FA 79 FF 
30810     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
30814     FF FA 7F FF 
30818     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3081c     B9 71 5F F9 |                 altgn   htmp, #htmp1
30820     00 70 43 F8 |                 getnib  htmp
30824     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
30828                 | 
30828     B8 00 90 FD |                 jmp     #hpad_translate
3082c                 | 
3082c                 | '------------------------------------------------------------------------------
3082c                 | ' Read bits from report data buffer
3082c                 | '------------------------------------------------------------------------------
3082c                 | ' On entry:
3082c                 | '   PTRB - report buffer
3082c                 | '   hpar1 - start bit
3082c                 | '   hpar2 - number of bits
3082c                 | ' On exit:
3082c                 | '   retval - bits
3082c                 | '------------------------------------------------------------------------------
3082c                 | hpad_getbits
3082c     C6 71 03 F6 |                 mov     htmp, hpar1
30830     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
30834     F9 71 03 F1 |                 add     htmp, ptrb
30838     B8 BF 02 FB |                 rdlong  retval, htmp
3083c                 | 
3083c     C6 73 03 F6 |                 mov     htmp1, hpar1
30840     07 72 07 F5 |                 and     htmp1, #$07     ' shift
30844     B9 BF 42 F0 |                 shr     retval, htmp1
30848                 | 
30848     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3084c     10 00 90 1D |         if_a    jmp     #.l1
30850                 | 
30850     C7 8F C3 F9 |                 decod   hpar2
30854     01 8E 87 F1 |                 sub     hpar2, #1
30858     C7 BF 02 F5 |                 and     retval, hpar2
3085c     2D 00 64 FD |                 ret
30860                 | .l1
30860     FF 7F 00 FF 
30864     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
30868     03 70 07 F1 |                 add     htmp, #3
3086c     B8 75 03 FB |                 rdlong  htmp2, htmp
30870     18 8E 87 F1 |                 sub     hpar2, #24
30874     C7 8F C3 F9 |                 decod   hpar2
30878     01 8E 87 F1 |                 sub     hpar2, #1
3087c     B9 75 43 F0 |                 shr     htmp2, htmp1
30880     C7 75 03 F5 |                 and     htmp2, hpar2
30884     18 74 67 F0 |                 shl     htmp2, #24
30888     BA BF 42 F5 |                 or      retval, htmp2
3088c     2D 00 64 FD |                 ret
30890                 | 
30890                 | '------------------------------------------------------------------------------
30890                 | ' Normalize value to signed word (-32768 / 32767)
30890                 | '------------------------------------------------------------------------------
30890                 | ' On entry:
30890                 | '   retval - value to normalize
30890                 | '   hidr_lminmax - min (word 1) max (word 0) value range
30890                 | '   - or -
30890                 | '   hidr_pminmax - min (word 1) max (word 0) value range
30890                 | '   hidr_size - value bits length
30890                 | ' On exit:
30890                 | '   retval - normalized value
30890                 | '------------------------------------------------------------------------------
30890                 | hpad_normalize
30890     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
30894     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
30898     2D 00 64 AD |         if_z    ret
3089c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
308a0     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
308a4     0F 72 77 F7 |                 signx   htmp1, #15      wc
308a8     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
308ac     00 BE 66 C7 |         if_c    signx   retval, #0-0
308b0     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
308b4     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
308b8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
308bc     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
308c0     B8 71 53 F6 |                 abs     htmp            wc
308c4     1F BE 0E F4 |                 testb   retval, #31     wz
308c8     5F BF 42 F6 |                 abs     retval
308cc     B8 BF 12 FD |                 qdiv    retval, htmp
308d0     18 BE 62 FD |                 getqx   retval
308d4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
308d8     C0 FF 7F FF 
308dc     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
308e0     2D 00 64 FD |                 ret
308e4                 | 
308e4                 | '------------------------------------------------------------------------------
308e4                 | ' Perform controller actions
308e4                 | ' On entry:
308e4                 | '    hidr_id        report id
308e4                 | '    hidr_axis      axis value (signed word, 2 axes per long)
308e4                 | '                      X = hidr_axis+0, #0
308e4                 | '                      Y = hidr_axis+0, #1
308e4                 | '                      Z = hidr_axis+1, #0
308e4                 | '                     RX = hidr_axis+1, #1
308e4                 | '                     RY = hidr_axis+2, #0
308e4                 | '                     RZ = hidr_axis+2, #1
308e4                 | '    hidr_buttons   buttons state (bits 0 to 31)
308e4                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
308e4                 | '
308e4                 | '                     -------3 -------2 -------1 -------0 byte
308e4                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
308e4                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
308e4                 | '                                zyx||| |||||||| ++++++++ n. buttons
308e4                 | '                                |||||| ||||++++--------- n. axes
308e4                 | '                                |||||| ++++------------- n. hats
308e4                 | '                                ++++++------------------ valid axes
308e4                 | '------------------------------------------------------------------------------
308e4                 | hpad_translate
308e4                 | 
308e4                 | 
308e4                 |         if HAVE_HIDPAD
308e4     84 0C F0 FE |                 loc     ptrb,#hidpad_report
308e8     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
308ec     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
308f0     01 70 E7 F2 |                 cmpsub  htmp,#1
308f4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
308f8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
308fc     2D 00 7C 3D |         if_ae   ret     wcz
30900     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
30904     B8 F3 03 F1 |                 add     ptrb,htmp
30908     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3090c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
30910     28 0C 64 FD |                 setq    #7-1
30914     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
30918                 |         end
30918                 | 
30918                 | 
30918                 |         if EMUPAD_MAX_PLAYER > 0
30918                 | .emupad_no_hat
30918                 |         if EMUPAD_BT0_BIT >= 0
30918                 |         end
30918                 |         if EMUPAD_BT1_BIT >= 0
30918                 |         end
30918                 |         if EMUPAD_BT2_BIT >= 0
30918                 |         end
30918                 |         if EMUPAD_BT3_BIT >= 0
30918                 |         end
30918                 |         if EMUPAD_BT4_BIT >= 0
30918                 |         end
30918                 |         if EMUPAD_BT5_BIT >= 0
30918                 |         end
30918                 |         if EMUPAD_BT6_BIT >= 0
30918                 |         end
30918                 |         if EMUPAD_BT7_BIT >= 0
30918                 |         end
30918                 |         if EMUPAD_BT8_BIT >= 0
30918                 |         end
30918                 |         if EMUPAD_BT9_BIT >= 0
30918                 |         end
30918                 | .emupad_slot_over
30918                 |         end
30918                 | 
30918                 |         if 0
30918                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
30918                 | 
30918                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
30918                 | 
30918                 |         end
30918     2D 00 64 FD |                 ret
3091c                 | end
3091c                 | 
3091c                 | if EMUPAD_MAX_PLAYER > 0
3091c                 | '------------------------------------------------------------------------------
3091c                 | ' Clear EmuPad state
3091c                 | '------------------------------------------------------------------------------
3091c                 | emupad_reset
3091c                 | 
3091c                 | '------------------------------------------------------------------------------
3091c                 | ' Get EmuPad Player number for current device (into retval)
3091c                 | ' Z flag is also set if current device is valid
3091c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3091c                 | '------------------------------------------------------------------------------
3091c                 | emupad_getnum
3091c                 | .loop
3091c                 | '------------------------------------------------------------------------------
3091c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3091c                 | '------------------------------------------------------------------------------
3091c                 | emupad_discon
3091c                 | .loop         
3091c                 |         
3091c                 |         ' FALL THROUGH!!!
3091c                 | 
3091c                 | '------------------------------------------------------------------------------
3091c                 | ' Update EmuPad reports (all of them...)
3091c                 | '------------------------------------------------------------------------------
3091c                 | emupad_write_reports
3091c                 | .devloop
3091c                 | 
3091c                 | end
3091c                 | 
3091c                 | 
3091c                 | '------------------------------------------------------------------------------
3091c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3091c                 | '------------------------------------------------------------------------------
3091c                 | ' On entry:
3091c                 | ' On exit:
3091c                 | '------------------------------------------------------------------------------
3091c                 | hget_hub_status
3091c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
30920     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
30924     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
30928     01 90 2F F9 |                 setword hpar3, #1, #1
3092c     CF 02 A0 FD |                 call    #do_int_in
30930     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30934     0C 00 90 AD |         if_z    jmp     #.data
30938     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3093c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
30940     2D 00 64 FD |                 ret
30944                 | .data
30944     00 90 0F F2 |                 cmp     hpar3, #0               wz
30948     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3094c                 | 
3094c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
30950     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
30954     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
30958     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3095c                 |                 debug(ubin_long(hub_status_chg))
3095c                 | 
3095c     01 5A 06 F6 |                 mov     hdev_port, #1
30960                 | .loop
30960     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
30964     0C 00 B0 AD |         if_x1   call    #hub_port_handler
30968     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3096c     F0 FF 9F 3D |         if_nc   jmp     #.loop
30970     2D 00 64 FD |                 ret
30974                 | 
30974                 | hub_port_handler
30974     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
30978     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3097c     27 EF 03 F6 |                 mov     pb, urx_buff_p
30980     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30984     55 02 A0 FD |                 call    #control_read
30988     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3098c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3098c                 | 
3098c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
30990     50 01 90 5D |         if_x0   jmp     #.other
30994     68 02 D0 FE |                 loc     ptra, #clr_port_feat
30998     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3099c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
309a0     A0 02 A0 FD |                 call    #control_write
309a4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
309a8     7C 01 90 5D |         if_x0   jmp     #.disconnect
309ac     B0 99 02 F6 |                 mov     hctwait, _100ms_
309b0     EF 02 A0 FD |                 call    #poll_waitx
309b4                 | 
309b4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
309b8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
309bc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
309c0     A0 02 A0 FD |                 call    #control_write
309c4                 | 
309c4     02 76 07 F6 |                 mov     htmp3, #2
309c8                 | .wait_reset
309c8     AC 99 02 F6 |                 mov     hctwait, _8ms_
309cc     EF 02 A0 FD |                 call    #poll_waitx
309d0     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
309d4     27 EF 03 F6 |                 mov     pb, urx_buff_p
309d8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
309dc     55 02 A0 FD |                 call    #control_read
309e0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
309e4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
309e8     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
309ec                 | 
309ec     10 02 D0 FE |                 loc     ptra, #clr_port_feat
309f0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
309f4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
309f8     A0 02 A0 FD |                 call    #control_write
309fc                 | 
309fc     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
30a00                 | .wait_recover
30a00     A7 99 02 F6 |                 mov     hctwait, _1ms_
30a04     EF 02 A0 FD |                 call    #poll_waitx
30a08     FD 71 6F FB |                 djnz    htmp,#.wait_recover
30a0c                 | 
30a0c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
30a10     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
30a14     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
30a18                 | 
30a18     00 08 00 FF 
30a1c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
30a20     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
30a24     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
30a28     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
30a2c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
30a30     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30a34     48 01 90 5D |         if_nz   jmp     #.done
30a38                 | .get_dev_desc
30a38     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
30a3c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
30a40     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
30a44     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
30a48     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
30a4c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
30a50     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
30a54     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30a58     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
30a5c     AC 99 02 F6 |                 mov     hctwait, _8ms_
30a60     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
30a64     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
30a68     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
30a6c     BE 00 A0 FD |                 call    #calc_crc5
30a70     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
30a74     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
30a78     F7 AD C2 FA |                 rdbyte  total_data, pb
30a7c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
30a80     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
30a84     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30a88     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
30a8c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
30a90     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
30a94                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
30a94     9F 99 02 F6 |                 mov     hctwait, _500us_
30a98     EF 02 A0 FD |                 call    #poll_waitx
30a9c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
30aa0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
30aa4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
30aa8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
30aac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30ab0     CC 00 90 5D |         if_nz   jmp     #.done
30ab4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
30ab8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
30abc     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
30ac0     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
30ac4     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
30ac8     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
30acc     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
30ad0     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
30ad4     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
30ad8     A4 00 90 CD |         if_b    jmp     #.done
30adc     6C F0 BF FD |                 call    #hparse_con_desc
30ae0     9C 00 90 FD |                 jmp     #.done
30ae4                 | 
30ae4                 | .other
30ae4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
30ae8     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
30aec     28 00 90 AD |         if_x1   jmp     #.reset_feature
30af0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
30af4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
30af8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
30afc     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
30b00     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
30b04     10 00 90 AD |         if_x1   jmp     #.reset_feature
30b08     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
30b0c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
30b10     04 00 90 AD |         if_x1   jmp     #.reset_feature
30b14     68 00 90 FD |                 jmp     #.done
30b18                 | .reset_feature
30b18     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
30b1c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30b20     A0 02 A0 FD |                 call    #control_write
30b24     58 00 90 FD |                 jmp     #.done
30b28                 | .disconnect
30b28                 | 
30b28     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
30b2c     00 70 E3 F8 |                 getbyte htmp
30b30     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
30b34     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
30b38     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
30b3c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
30b40     00 76 06 A6 |         if_z    mov     kb_led_states, #0
30b44     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
30b48                 |         if EMUPAD_MAX_PLAYER > 0
30b48                 |         end
30b48                 |         if HAVE_MOUSE
30b48     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
30b4c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
30b50     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
30b54                 |         end
30b54                 |         if HAVE_HIDPAD
30b54     14 0A F0 FE |                 loc ptrb,#hidpad_report
30b58     2D 71 03 F6 |                 mov htmp,hdev_port
30b5c     01 70 E7 F2 |                 cmpsub htmp,#1
30b60     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
30b64     B8 F3 03 F1 |                 add ptrb,htmp
30b68     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
30b6c     80 01 6C FC |                 wrlong #0,ptrb
30b70                 |         end
30b70                 | 
30b70     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
30b74     00 00 C4 F8 |                 setbyte #0
30b78     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
30b7c     00 00 04 F6 |                 mov     0-0, #0
30b80                 | 
30b80                 | .done
30b80     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
30b84     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
30b88     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
30b8c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
30b90     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
30b94     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
30b98                 | 
30b98     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
30b9c     27 EF 03 F6 |                 mov     pb, urx_buff_p
30ba0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30ba4     55 02 A0 FD |                 call    #control_read
30ba8     00 69 06 FB |                 rdlong  hub_port_status, ptra
30bac                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
30bac     2D 00 64 FD |                 ret
30bb0                 | 
30bb0                 | '------------------------------------------------------------------------------
30bb0                 | ' Partially populated SETUP packets
30bb0                 | '------------------------------------------------------------------------------
30bb0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
30bb1     06          |                 byte    REQ_GET_DESC
30bb2     00 01       |                 word    TYPE_DEVICE << 8
30bb4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30bb6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30bb8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
30bb9     06          |                 byte    REQ_GET_DESC
30bba     00 02       |                 word    TYPE_CONFIG << 8
30bbc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30bbe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30bc0     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
30bc1     09          |                 byte    REQ_SET_CONFIG
30bc2     00 00       |                 word    0       ' Configuration value
30bc4     00 00       |                 word    0       ' Zero
30bc6     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
30bc8     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
30bc9     05          |                 byte    REQ_SET_ADDR
30bca     00 00       |                 word    0       ' Zero
30bcc     00 00       |                 word    0       ' Zero
30bce     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
30bd0                 | '------------------------------------------------------------------------------
30bd0                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
30bd0                 | ' wValue field dictates which protocol should be used.
30bd0                 | '
30bd0                 | ' When initialized, all devices default to report protocol. However the host
30bd0                 | ' should not make any assumptions about the device state and should set the
30bd0                 | ' desired protocol whenever initializing a device.
30bd0                 | '------------------------------------------------------------------------------
30bd0     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30bd1     0B          |                 byte    HID_SET_PROTO
30bd2     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
30bd4                 |                                                 ' (HID 1.11 Section 7.2.6).
30bd4     00 00       |                 word    0               ' Interface index number.
30bd6     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
30bd8                 | '------------------------------------------------------------------------------
30bd8     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30bd9     0A          |                 byte    HID_SET_IDLE
30bda     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
30bdc                 |                                         ' reporting until a change is detected in the report data
30bdc                 | 
30bdc                 |                                         ' (HID 1.11 Section 7.2.4).
30bdc     00 00       |                 word    0       ' Interface index number.
30bde     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
30be0     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30be1     09          |                 byte    HID_SET_REPORT
30be2     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
30be4                 |                                         ' (HID 1.11 Section 7.2.2).
30be4     00 00       |                 word    0       ' Interface index number.
30be6     00 00       |                 word    0       ' Size of the report, in bytes.
30be8     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
30be9     06          |                 byte    REQ_GET_DESC
30bea     00 22       |                 word    TYPE_REPORT << 8
30bec     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30bee     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30bf0                 | '------------------------------------------------------------------------------
30bf0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
30bf1     06          |                 byte    REQ_GET_DESC
30bf2     00 29       |                 word    TYPE_HUB << 8
30bf4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30bf6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30bf8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30bf9     03          |                 byte    REQ_SET_FEATURE
30bfa     00 00       |                 word    0       ' port power
30bfc     01 00       |                 word    1       ' Port index number (1+)
30bfe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30c00     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30c01     01          |                 byte    REQ_CLEAR_FEATURE
30c02     00 00       |                 word    0       ' port power
30c04     01 00       |                 word    1       ' Port index number (1+)
30c06     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30c08     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
30c09     00          |                 byte    REQ_GET_STATUS
30c0a     00 00       |                 word    0
30c0c     01 00       |                 word    1       ' Port index number (1+)
30c0e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
30c10                 | '------------------------------------------------------------------------------
30c10                 | if _HAVE_GAMEPAD
30c10     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
30c14                 | ps3_command_buff
30c14     00 00 00 00 
30c18     00          |                 byte    $00, $00, $00, $00, $00
30c19     00 00 00 00 
30c1d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
30c1e     FF 27 10 00 
30c22     32          |                 byte    $FF, $27, $10, $00, $32
30c23     FF 27 10 00 
30c27     32          |                 byte    $FF, $27, $10, $00, $32
30c28     FF 27 10 00 
30c2c     32          |                 byte    $FF, $27, $10, $00, $32
30c2d     FF 27 10 00 
30c31     32          |                 byte    $FF, $27, $10, $00, $32
30c32     00 00 00 00 
30c36     00          |                 byte    $00, $00, $00, $00, $00
30c37     00 00 00 00 
30c3b     00          |                 byte    $00, $00, $00, $00, $00
30c3c     00 00 00 00 
30c40     00          |                 byte    $00, $00, $00, $00, $00
30c41     00 00 00    |                 byte    $00, $00, $00
30c44                 | '------------------------------------------------------------------------------
30c44     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
30c47                 |                                         ' 0x01 All blinking
30c47                 |                                         ' 0x02 1 flashes, then on
30c47                 |                                         ' 0x03 2 flashes, then on
30c47                 |                                         ' 0x04 3 flashes, then on
30c47                 |                                         ' 0x05 4 flashes, then on
30c47                 |                                         ' 0x06 1 on
30c47                 |                                         ' 0x07 2 on
30c47                 |                                         ' 0x08 3 on
30c47                 |                                         ' 0x09 4 on
30c47                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
30c47                 |                                         ' 0x0B Blinking*
30c47                 |                                         ' 0x0C Slow blinking*
30c47                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
30c47     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
30c4a     00          |                 byte    $00             ' Left rumble
30c4b     00          |                 byte    $00             ' Right rumble
30c4c     00 00 00    |                 byte    $00, $00, $00
30c4f     00          | end
30c50                 | alignl
30c50                 | 
30c50                 | if HAVE_MOUSE
30c50     00 00 00 00 
30c54     00 00 00 00 | mouse_limits long 0[2]
30c58     00 00 00 00 | mouse_outptr long 0
30c5c                 | end
30c5c                 | 
30c5c                 | if KEYQUEUE_SIZE > 0
30c5c     00          | keyq_head byte 0
30c5d     00          | keyq_tail byte 0
30c5e     00 00 00 00 
      ...             
30e5a     00 00 00 00 
30e5e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
30e60                 | alignl
30e60                 | end
30e60                 | 
30e60                 | if EMUPAD_MAX_PLAYER > 0
30e60                 | emupad_rule_buffer
30e60                 | if EMUPAD_BUILTIN_RULES
30e60                 | file "padmap_builtin.dat"
30e60                 | end
30e60                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
30e60                 | '' Default rule directly follows!
30e60                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
30e60                 | end
30e60                 | 
30e60                 | '------------------------------------------------------------------------------
30e60                 | ' The USB data cache area gets zero-filled at every device disconnect
30e60                 | '------------------------------------------------------------------------------
30e60                 | usb_cache_start
30e60                 | 
30e60                 | ' HID descriptor and report buffers
30e60                 | if !!OVERLAP_MEMORY
30e60     00 00 00 00 
      ...             
31558     00 00 00 00 
3155c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
31560                 | end
31560     00 00 00 00 
31564     00 00 00 00 | hkbd_report     byte    0[8]
31568     00 00 00 00 | hkbd_led_rep    byte    0
3156c                 | alignl
3156c                 | 
3156c                 | if HAVE_HIDPAD
3156c     00 00 00 00 
      ...             
31628     00 00 00 00 
3162c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
31630                 | end
31630                 | 
31630                 | ' HUB descriptor
31630     00          | hub_descr       byte    0   ' bDescLength
31631     00          |                 byte    0   ' bDescriptorType
31632     00          |                 byte    0   ' bNbrPorts
31633     00 00       |                 word    0   ' wHubCharacteristics
31635     00          |                 byte    0   ' bPwrOn2PwrGood
31636     00          |                 byte    0   ' bHubContrCurrent
31637     00          |                 byte    0   ' DeviceRemoveable
31638     00          |                 byte    0   ' PortPwrCtrlMask
31639                 | 
31639                 | usb_cache_end
31639                 | 
31639                 | if HAVE_MOUSE
31639     00 00 00 00 | mouse_xacc      long 0
3163d     00 00 00 00 | mouse_yacc      long 0
31641     00 00 00 00 | mouse_zacc      long 0
31645     00          | mouse_bstate    byte 0
31646     00          | mouse_lpending  byte 0
31647     00          | mouse_rpending  byte 0
31648     00          | mouse_mpending  byte 0
31649     00          | mouse_lock      byte 0
3164a     00 00 00    |                 byte 0[3] ' padding
3164d                 | end
3164d                 | 
3164d     00 00 00 00 
      ...             
316c5     00 00 00 00 
316c9     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
316cd     00 00 00 00 
316d1     00 00 00 00 
316d5     00 00 00 00 
316d9     00 00 00 00 
316dd     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
316df     00 00 00 00 
      ...             
317d7     00 00 00 00 
317db     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
317df                 | 
317df     00          | driver_cog      byte    0                       ' Current driver cog + 1
317e0                 | 	alignl
317e0                 | _Audio095_8_sc_spin2_dat_
317e0                 | 
317e0                 | audio       org     0
317e0                 | 
317e0     61 CB 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
317e4     61 19 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
317e8     61 25 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
317ec                 | 
317ec     01 EC 63 FD |             cogid   pa                   ' compute cogid
317f0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
317f4     F6 CB 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
317f8     E5 C8 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
317fc                 | 
317fc     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
31800     0E 20 06 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/95
31804     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
31808     0F 20 06 FC |             wrpin   dac,#right
3180c     0F BE 1C FC |             wxpin   #95,#right    
31810     41 9C 64 FD |             dirh    #left addpins 1
31814     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
31818     CC E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3181c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
31820                 |             
31820                 | '---------------------------------------------------------------------------------        
31820                 | '----------------- The main loop -------------------------------------------------
31820                 | '---------------------------------------------------------------------------------
31820                 | 
31820     D5 AC 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
31824     10 00 90 CD |       if_c  jmp     #loop1
31828                 |   
31828     09 FE 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3182c     D5 FE 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
31830     D4 00 80 F1 |             sub     0-0,a40000000
31834     FD FF 6D FB |             djnz    cn,#p402
31838                 |     
31838     00 FE 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3183c     D7 00 02 F6 |             mov     ct,time1            ' with the lowest next sample time
31840     D8 00 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
31844     01 FE 05 C6 |     if_c    mov     cn,#1
31848     D9 00 3A F3 |             fle     ct,time3 wcz
3184c     02 FE 05 C6 |     if_c    mov     cn,#2     
31850     DA 00 3A F3 |             fle     ct,time4 wcz
31854     03 FE 05 C6 |     if_c    mov     cn,#3
31858     DB 00 3A F3 |             fle     ct,time5 wcz
3185c     04 FE 05 C6 |     if_c    mov     cn,#4
31860     DC 00 3A F3 |             fle     ct,time6 wcz
31864     05 FE 05 C6 |     if_c    mov     cn,#5
31868     DD 00 3A F3 |             fle     ct,time7 wcz
3186c     06 FE 05 C6 |     if_c    mov     cn,#6
31870     DE 00 3A F3 |             fle     ct,time8 wcz
31874     07 FE 05 C6 |     if_c    mov     cn,#7
31878                 | 
31878                 | 
31878                 | '----------------------------------------------------------------------------------
31878                 | '------------- Compute channel samples --------------------------------------------
31878                 | '----------------------------------------------------------------------------------
31878                 | 
31878                 | 
31878     FF BE 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
3187c     06 BE 65 F0 |             shl     channeladd,#6
31880     DF F0 03 F1 |             add     ptra,channeladd
31884                 | 
31884     28 16 64 FD |             setq    #11                        ' read parameters
31888     00 D5 05 FB |             rdlong  pointer0,ptra
3188c                 |     	    
3188c     1F E2 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
31890     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
31894     F1 C2 31 F9 |             getword qq,command0,#0            ' get the new rate
31898     4E C2 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
3189c     E1 C2 E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
318a0     00 C2 0D F2 |             cmp     qq,#0 wz                         
318a4     4E 22 06 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
318a8     4E 20 06 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
318ac                 |             
318ac     1E E2 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
318b0     E5 C8 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
318b4     00 C8 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
318b8                 | 
318b8                 | 
318b8     EB 04 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
318bc     EB 06 3A F9 |             getword oldrs,sample0,#1
318c0     EF FA 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
318c4     EF F8 31 F9 |     	    getword avol0,volpan0,#0
318c8     F0 F6 39 F9 |             getword askip0,freqskip0,#1    	    
318cc     F0 F4 31 F9 |             getword afreq0,freqskip0,#0
318d0                 | 
318d0     D7 FE 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
318d4     00 02 02 F6 |             mov     dt0,0-0    
318d8     D6 02 82 F1 |             sub     dt0,time0
318dc                 |             
318dc     D7 FE 8D F9 |             altd    cn, #time1                ' add channel period to channel time
318e0     FA 00 00 F1 |             add     0-0,afreq0  	
318e4                 |             
318e4                 | '---- envelopes
318e4                 |             
318e4     00 E6 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
318e8     20 00 00 AF 
318ec     00 46 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
318f0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
318f4                 | 
318f4     FA 46 02 F6 |             mov envs1,afreq0
318f8     F4 46 02 FA |             mul envs1,envspd0
318fc     23 E5 01 F1 |             add envph0,envs1 
31900                 | 
31900     F2 42 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
31904     06 42 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
31908     21 45 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3190c     10 42 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
31910     F5 42 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
31914     F5 42 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
31918     00 44 06 36 |     if_ge   mov     envlo,#0
3191c     F5 E4 01 36 |     if_ge   mov     envph0,envlen0
31920     16 E4 65 30 |     if_ge   shl     envph0,#22
31924                 | 
31924     21 47 02 F6 |             mov envs1,envhi
31928     01 46 66 F0 |             shl envs1,#1
3192c     F3 46 02 F1 |             add envs1,envptr0
31930     23 47 02 FB |             rdlong envs1,envs1
31934     23 49 3A F9 |             getword envs2,envs1,#1
31938     23 47 32 F9 |             getword envs1,envs1,#0
3193c     22 49 02 FA |             mul envs2,envlo
31940     22 45 22 F6 |             not envlo
31944     22 47 02 FA |             mul envs1,envlo
31948     24 47 02 F1 |             add envs1,envs2
3194c     12 46 46 F0 |             shr envs1,#18
31950                 |             
31950                 | 
31950                 | 
31950     1B D8 0D F4 | p410        testb   sstart0, #27 wz
31954     1B C4 61 AD |     if_z    getrnd  spl
31958     58 00 90 AD |     if_z    jmp     #p406
3195c                 |  
3195c     FB D4 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
31960     EA 40 C2 F8 |             setbyte pointer00,pointer0,#0
31964     08 D4 45 F0 |             shr     pointer0,#8
31968                 |          
31968     1F D8 0D F4 |             testb   sstart0,#31 wz            
3196c     01 D4 65 A0 |     if_z    shl     pointer0,#1        
31970     1C D8 0D F4 |             testb   sstart0,#28 wz            
31974     01 D4 65 A0 |     if_z    shl     pointer0,#1        
31978                 |         
31978     EE D4 19 F2 |             cmp     pointer0,lend0 wcz
3197c     EE D4 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
31980     ED D4 01 31 |     if_ge   add     pointer0,lstart0       
31984                 |             
31984     EA C2 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
31988     EC C2 01 F1 |             add     qq,sstart0            
3198c                 | 
3198c                 | 
3198c                 | 
3198c     FF C9 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
31990     E1 C4 E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
31994     18 01 B0 1D |     if_gt   call    #cache_read
31998                 |          
31998                 |          
31998                 |  
31998                 |          
31998     1F D8 0D F4 |             testb   sstart0,#31 wz 
3199c     08 C4 65 50 |     if_nz   shl     spl,#8
319a0     08 D4 65 50 |     if_nz   shl     pointer0,#8
319a4     07 D4 65 A0 |     if_z    shl     pointer0,#7
319a8     1C D8 0D F4 |             testb   sstart0,#28 wz            
319ac     01 D4 45 A0 |     if_z    shr     pointer0,#1    
319b0     20 D5 C1 F8 | 	    setbyte pointer0,pointer00,#0       
319b4                 | 
319b4                 | 
319b4     23 C5 31 FA | p406         scas    spl,envs1
319b8     00 C4 01 F6 |              mov     spl,0-0
319bc     FC C4 31 FA |             scas    spl,avol0                 ' apply volume
319c0     00 C4 01 F6 |             mov     spl,0-0
319c4                 | 
319c4     FD C4 31 FA |             scas    spl,apan0                 ' apply pan
319c8     00 08 02 F6 |             mov     ls0,0-0
319cc     20 00 00 FF 
319d0     00 C2 05 F6 |             mov     qq,##16384
319d4     FD C2 81 F1 |             sub     qq,apan0
319d8     E1 C4 31 FA |             scas    spl,qq
319dc     00 0A 02 F6 |             mov     rs0, 0-0
319e0                 | 
319e0     03 0F 82 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
319e4     05 0F 02 F1 |             add     rs,rs0
319e8     02 0D 82 F1 |             sub     ls,oldls
319ec     04 0D 02 F1 |             add     ls,ls0
319f0                 |    
319f0     05 D7 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
319f4     04 D7 21 F9 |             setword sample0,ls0,#0
319f8                 |             
319f8     1E D8 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointers needs resetting  
319fc     00 D4 05 A6 |     if_z    mov     pointer0, #0  
31a00     00 E4 05 A6 |     if_z    mov     envph0, #0  
31a04     00 D6 05 A6 |     if_z    mov     sample0,#0
31a08     02 D9 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
31a0c     1D D8 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
31a10     04 00 00 AF 
31a14     00 AE 05 A1 |     if_z    add     time1,##2048
31a18     D7 B0 01 A6 |     if_z    mov     time2,time1
31a1c     02 D9 65 AC |     if_z    wrlong  sstart0,ptra[2]
31a20                 | 
31a20                 |             
31a20     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
31a24     00 D5 65 FC |             wrlong  pointer0,ptra
31a28     08 E5 65 FC |             wrlong  envph0,ptra[8]
31a2c     DF F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
31a30                 |                       
31a30     D6 FC 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
31a34     FF C1 25 A7 |     if_z    decmod  front, #511          
31a38                 |          
31a38     06 05 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
31a3c     07 07 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
31a40     0F 04 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
31a44     0F 06 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
31a48                 | 	    
31a48                 | 		    
31a48     02 07 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
31a4c     09 11 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
31a50     03 13 02 F6 |             mov     newsample, oldrs       
31a54                 | 
31a54     D6 FC 01 F6 |             mov     oldt0,time0              ' update global time
31a58     01 AD 01 F1 |             add     time0,dt0    
31a5c                 |                                      
31a5c     00 02 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
31a60     D4 FD 9F AD |     if_z    jmp     #loop1
31a64     01 C3 01 F6 |             mov     qq,dt0
31a68                 |   
31a68     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
31a6c     00 C0 9D F2 |             cmpr    front, #0-0 wcz
31a70     F4 FF 9F AD |     if_e    jmp     #p301    
31a74                 | 		
31a74     00 18 0E F2 | 	    cmp     scbase,#0 wz
31a78     20 00 90 AD |     if_z    jmp #p302	   
31a7c                 |  
31a7c                 |  
31a7c     3F 1E 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
31a80     0D 1D 02 C6 |     if_c    mov scptr2,scptr
31a84     02 1C 66 C0 |     if_c    shl scptr2,#2
31a88     0C 1D 02 C1 |     if_c    add scptr2,scbase     
31a8c     60 1C 66 FC |             wrlong scptr2,#$60
31a90     0E 11 62 CC |     if_c    wrlong oldsample,scptr2
31a94     01 00 00 CF 
31a98     7F 1A 06 C7 |     if_c    incmod scptr,##639
31a9c                 | 			    
31a9c     E0 10 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
31aa0     00 00 00 FF 
31aa4     FF C1 05 F7 |             incmod  front, ##511
31aa8     EF C3 6D FB |             djnz    qq,#p301
31aac                 |             
31aac     70 FD 9F FD |             jmp     #loop            'loop
31ab0                 | 
31ab0                 | '----------------------------------------------------------------------------------
31ab0                 | '------------- This is the end of the main loop -----------------------------------
31ab0                 | '----------------------------------------------------------------------------------
31ab0                 | 
31ab0                 | '----------------------------------------------------------------------------------
31ab0                 | '------------- PSRAM cache ----------- --------------------------------------------
31ab0                 | '----------------------------------------------------------------------------------
31ab0                 | 
31ab0                 | ' There are 8 cache pointers for 8 channels
31ab0                 | ' if 24 higher bits of address=cache, then get a word from the cache
31ab0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
31ab0                 | 
31ab0                 | 
31ab0     E1 3C E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
31ab4                 |             
31ab4     E1 3E 02 F6 | 	    mov     addrhi,qq		
31ab8     08 3E 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
31abc     13 FF 95 F9 | 	    alts    cn,#cache1            
31ac0     00 3E 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
31ac4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
31ac8                 | 	
31ac8     13 FF 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
31acc     1F 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
31ad0     1F 37 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
31ad4     08 36 66 F0 | 	    shl     cmd,#8
31ad8     0B 36 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
31adc     FF 38 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
31ae0     08 38 66 F0 |             shl     hubaddr,#8                  '
31ae4     12 39 02 F1 |             add     hubaddr,hubptr 
31ae8     00 3B 06 F6 |             mov     count,#256                  ' 256 bytes
31aec     28 04 64 FD |             setq    #2                          ' write 3 longs
31af0     E4 36 62 FC |             wrlong  cmd, mailbox                ' run it
31af4     E4 36 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
31af8     FE 37 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
31afc                 |             
31afc                 | 	
31afc     FF C2 01 F6 | p701	    mov     qq,cn			' cache hit
31b00     08 C2 65 F0 | 	    shl     qq,#8			' compute the cache start
31b04     12 C3 01 F1 | 	    add     qq,hubptr
31b08     1E C3 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
31b0c     E1 C4 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
31b10                 |           
31b10                 | 
31b10                 | '--------------------------------------------------------------------------
31b10                 | '------ Interrupt service -------------------------------------------------
31b10                 | '------ Output the sample, get the next one if exists ---------------------
31b10                 | '--------------------------------------------------------------------------
31b10                 | 
31b10     0E CC 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
31b14     0F CE 25 FC |             wypin   rsample,#right       '4
31b18     E0 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
31b1c     80 D1 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
31b20     FF F3 07 57 |     if_ne   incmod  ptrb,#511
31b24     E8 CE 39 59 |     if_ne   getword rsample,lsnext,#1    '13
31b28     E8 CC 31 59 |     if_ne   getword lsample,lsnext,#0    '15
31b2c                 |     
31b2c     F5 FF 3B FB |             reti1                        '17/19 
31b30                 |           
31b30                 | '---------------------------------------------------------------------------
31b30                 | '-------- End of interrupt -------------------------------------------------
31b30                 | '---------------------------------------------------------------------------    
31b30                 | 
31b30                 | 
31b30                 | '---------------------------------------------------------------------------
31b30                 | '------- Variables ---------------------------------------------------------
31b30                 | '---------------------------------------------------------------------------
31b30                 | 
31b30                 | ' constants
31b30                 | 
31b30     00 00 00 40 | a40000000   long $40000000
31b34     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
31b38                 | 
31b38                 | ' Time variables
31b38                 | 
31b38     00 00 00 00 | time0       long 0    ' Global sample computing time
31b3c     01 00 00 00 | time1       long 1    ' Local channels time
31b40     02 00 00 00 | time2       long 2
31b44     03 00 00 00 | time3       long 3
31b48     04 00 00 00 | time4       long 4
31b4c     05 00 00 00 | time5       long 5
31b50     06 00 00 00 | time6       long 6
31b54     07 00 00 00 | time7       long 7
31b58     08 00 00 00 | time8       long 8
31b5c                 | 
31b5c     00 00 00 00 | channeladd long 0
31b60                 | 
31b60     00 00 00 00 | front       long 0
31b64                 | 
31b64                 | ' temporary variables 
31b64     00 00 00 00 | qq          long 0
31b68     00 00 00 00 | spl         long 0
31b6c     00 00 00 00 | zero        long 0
31b70     00 00 00 00 | mailbox     long 0
31b74     00 00 00 00 | mailbox2 long 0
31b78                 | 
31b78                 | ' Interrupt ISR variables
31b78                 | 
31b78     00 00 00 00 | lsample     long 0
31b7c     00 00 00 00 | rsample     long 0
31b80     00 00 00 00 | lsnext      long 0
31b84     00 00 00 00 | rsnext      long 0 
31b88                 | 
31b88                 | ' channel parameter block
31b88                 | 
31b88     00 00 00 00 | pointer0    long 0     
31b8c     00 00 00 00 | sample0     long 0
31b90     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
31b94     00 00 00 00 | lstart0     long 0
31b98     00 00 00 00 | lend0       long 0
31b9c     00 00 00 00 | volpan0     long 0
31ba0     00 00 00 00 | freqskip0   long 0
31ba4     00 00 00 00 | command0    long 0
31ba8     00 00 00 00 | envph0	    long 0
31bac     00 00 00 00 | envptr0	    long 0
31bb0     00 00 00 00 | envspd0	    long 0
31bb4     00 00 00 00 | envlen0	    long 0
31bb8     00 00 00 00 | res5	    long 0
31bbc     00 00 00 00 | res6	    long 0
31bc0     00 00 00 00 | res7	    long 0
31bc4     00 00 00 00 | res8	    long 0
31bc8                 | 
31bc8     00 00 00 00 | afreq0      long 0
31bcc     00 00 00 00 | askip0      long 0
31bd0     00 00 00 00 | avol0       long 0
31bd4     00 00 00 00 | apan0       long 0
31bd8                 | 
31bd8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
31bdc     00 00 00 00 | cn          long 0
31be0     00 00 00 00 | ct          long 0
31be4     00 00 00 00 | dt0         long 0
31be8                 | 
31be8                 | ' Samples
31be8     00 00 00 00 | oldls       long 0
31bec     00 00 00 00 | oldrs       long 0
31bf0                 | 
31bf0     00 00 00 00 | ls0         long 0
31bf4     00 00 00 00 | rs0         long 0
31bf8                 | 
31bf8     00 00 00 00 | ls          long 0    
31bfc     00 00 00 00 | rs          long 0
31c00                 | 
31c00     00 00 00 00 | oldsample   long 0
31c04     00 00 00 00 | newsample   long 0
31c08                 | 
31c08     00 00 00 00 | nrsample    long 0
31c0c     00 00 00 00 | nlsample    long 0
31c10                 | 
31c10     00 00 00 00 | scbase long 0
31c14     00 00 00 00 | scptr long 0
31c18     00 00 00 00 | scptr2 long 0
31c1c     00 00 00 00 | scope long 0
31c20                 | 
31c20     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
31c24     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
31c28                 | 
31c28     00 18 07 00 | hubptr      long $71800
31c2c     00 00 00 00 | cache1      long 0
31c30     00 00 00 00 | cache2      long 0
31c34     00 00 00 00 | cache3      long 0
31c38     00 00 00 00 | cache4      long 0
31c3c     00 00 00 00 | cache5      long 0
31c40     00 00 00 00 | cache6      long 0
31c44     00 00 00 00 | cache7      long 0
31c48     00 00 00 00 | cache8      long 0
31c4c                 | 
31c4c                 | 
31c4c     00 00 00 00 | cmd         long 0
31c50     00 00 00 00 | hubaddr     long 0
31c54     00 01 00 00 | count       long 256
31c58     00 00 00 00 | addrlo long 0
31c5c     00 00 00 00 | addrhi long 0
31c60     00 00 00 00 | pointer00 long 0
31c64     00 00 00 00 | envhi long 0
31c68     00 00 00 00 | envlo long 0
31c6c     00 00 00 00 | envs1 long 0
31c70     00 00 00 00 | envs2 long 0
31c74     00 00 00 00 | noise0 long 0
31c78     00 00 00 00 
31c7c     00 00 00 00 | null  			long 	0,0           ' for channel reset
31c80                 | 	alignl
31c80                 | __system__dat_
31c80     00 00 00 00 
31c84     00 00 00 00 | 	byte	$00[8]
31c88     03 00 00 00 
31c8c     00 00 00 00 
31c90     00 00 00 00 
31c94     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31c98     00 00 00 00 
      ...             
31f24     00 00 00 00 
31f28     00 00 00 00 | 	byte	$00[660]
31f2c     00 00 90 06 | 	long	(105 {__system____root_opendir})<<20
31f30     00 00 A0 06 | 	long	(106 {__system____root_closedir})<<20
31f34     00 00 B0 06 | 	long	(107 {__system____root_readdir})<<20
31f38     00 00 C0 06 | 	long	(108 {__system____root_stat})<<20
31f3c     00 00 00 00 
31f40     00 00 00 00 
31f44     00 00 00 00 
31f48     00 00 00 00 
31f4c     00 00 00 00 
31f50     00 00 00 00 
31f54     00 00 00 00 | 	byte	$00[28]
31f58     C0 1F 03 00 | 	long	@@@__system__dat_ + 832
31f5c     C3 1F 03 00 | 	long	@@@__system__dat_ + 835
31f60     E4 1F 03 00 | 	long	@@@__system__dat_ + 868
31f64     FD 1F 03 00 | 	long	@@@__system__dat_ + 893
31f68     18 20 03 00 | 	long	@@@__system__dat_ + 920
31f6c     32 20 03 00 | 	long	@@@__system__dat_ + 946
31f70     42 20 03 00 | 	long	@@@__system__dat_ + 962
31f74     54 20 03 00 | 	long	@@@__system__dat_ + 980
31f78     66 20 03 00 | 	long	@@@__system__dat_ + 998
31f7c     78 20 03 00 | 	long	@@@__system__dat_ + 1016
31f80     84 20 03 00 | 	long	@@@__system__dat_ + 1028
31f84     95 20 03 00 | 	long	@@@__system__dat_ + 1045
31f88     A9 20 03 00 | 	long	@@@__system__dat_ + 1065
31f8c     B3 20 03 00 | 	long	@@@__system__dat_ + 1075
31f90     C3 20 03 00 | 	long	@@@__system__dat_ + 1091
31f94     D2 20 03 00 | 	long	@@@__system__dat_ + 1106
31f98     E8 20 03 00 | 	long	@@@__system__dat_ + 1128
31f9c     01 21 03 00 | 	long	@@@__system__dat_ + 1153
31fa0     15 21 03 00 | 	long	@@@__system__dat_ + 1173
31fa4     23 21 03 00 | 	long	@@@__system__dat_ + 1187
31fa8     37 21 03 00 | 	long	@@@__system__dat_ + 1207
31fac     43 21 03 00 | 	long	@@@__system__dat_ + 1219
31fb0     55 21 03 00 | 	long	@@@__system__dat_ + 1237
31fb4     6D 21 03 00 | 	long	@@@__system__dat_ + 1261
31fb8     7F 21 03 00 | 	long	@@@__system__dat_ + 1279
31fbc     92 21 03 00 | 	long	@@@__system__dat_ + 1298
31fc0     4F 4B 00 4E 
31fc4     75 6D 65 72 
31fc8     69 63 61 6C 
31fcc     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
31fd0     75 6D 65 6E 
31fd4     74 20 6F 75 
31fd8     74 20 6F 66 
31fdc     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
31fe0     61 69 6E 00 
31fe4     52 65 73 75 
31fe8     6C 74 20 6E 
31fec     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
31ff0     65 70 72 65 
31ff4     73 65 6E 74 
31ff8     61 62 6C 65 
31ffc     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
32000     65 67 61 6C 
32004     20 6D 75 6C 
32008     74 69 62 79 
3200c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
32010     65 71 75 65 
32014     6E 63 65 00 
32018     4E 6F 20 73 
3201c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
32020     66 69 6C 65 
32024     20 6F 72 20 
32028     64 69 72 65 
3202c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
32030     79 00 42 61 
32034     64 20 66 69 
32038     6C 65 20 6E 
3203c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
32040     72 00 50 65 
32044     72 6D 69 73 
32048     73 69 6F 6E 
3204c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
32050     69 65 64 00 
32054     4E 6F 74 20 
32058     65 6E 6F 75 
3205c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
32060     65 6D 6F 72 
32064     79 00 54 65 
32068     6D 70 6F 72 
3206c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
32070     66 61 69 6C 
32074     75 72 65 00 
32078     46 69 6C 65 
3207c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
32080     73 74 73 00 
32084     49 6E 76 61 
32088     6C 69 64 20 
3208c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
32090     6D 65 6E 74 
32094     00 54 6F 6F 
32098     20 6D 61 6E 
3209c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
320a0     65 6E 20 66 
320a4     69 6C 65 73 
320a8     00 49 2F 4F 
320ac     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
320b0     6F 72 00 4E 
320b4     6F 74 20 61 
320b8     20 64 69 72 
320bc     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
320c0     72 79 00 49 
320c4     73 20 61 20 
320c8     64 69 72 65 
320cc     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
320d0     79 00 52 65 
320d4     61 64 20 6F 
320d8     6E 6C 79 20 
320dc     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
320e0     20 73 79 73 
320e4     74 65 6D 00 
320e8     46 75 6E 63 
320ec     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
320f0     20 6E 6F 74 
320f4     20 69 6D 70 
320f8     6C 65 6D 65 
320fc     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
32100     00 44 69 72 
32104     65 63 74 6F 
32108     72 79 20 6E 
3210c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
32110     6D 70 74 79 
32114     00 4E 61 6D 
32118     65 20 74 6F 
3211c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
32120     6E 67 00 44 
32124     65 76 69 63 
32128     65 20 6E 6F 
3212c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
32130     65 6B 61 62 
32134     6C 65 00 42 
32138     61 64 20 61 
3213c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
32140     73 73 00 42 
32144     72 6F 6B 65 
32148     6E 20 63 6F 
3214c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
32150     74 69 6F 6E 
32154     00 44 65 76 
32158     69 63 65 20 
3215c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
32160     65 73 6F 75 
32164     72 63 65 20 
32168     62 75 73 79 
3216c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
32170     73 73 20 64 
32174     65 76 69 63 
32178     65 20 6C 69 
3217c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
32180     6F 20 73 70 
32184     61 63 65 20 
32188     6F 6E 20 64 
3218c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
32190     65 00 55 6E 
32194     6B 6E 6F 77 
32198     6E 20 65 72 
3219c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
321a0     00 00 00 00 
321a4     00 00 00 00 | 	byte	$00[8]
321a8     05 00 00 00 
321ac     00 00 00 00 
321b0     00 00 00 00 
321b4     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321b8     00 00 00 00 | 	byte	$00, $00, $00, $00
321bc     00 00 10 08 | 	long	(129 {__system___tx})<<20
321c0     00 00 20 08 | 	long	(130 {__system___rx})<<20
321c4     00 00 00 00 | 	byte	$00, $00, $00, $00
321c8     00 00 30 08 | 	long	(131 {__system___rxtxioctl_0581})<<20
321cc     00 00 40 08 | 	long	(132 {__system____dummy_flush_0582})<<20
321d0     00 00 00 00 
321d4     00 00 00 00 | 	byte	$00[8]
321d8     01 00 00 00 
321dc     06 00 00 00 
321e0     00 00 00 00 
321e4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321e8     00 00 00 00 
321ec     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
321f0     00 00 10 08 | 	long	(129 {__system___tx})<<20
321f4     00 00 20 08 | 	long	(130 {__system___rx})<<20
321f8     00 00 00 00 | 	byte	$00, $00, $00, $00
321fc     00 00 30 08 | 	long	(131 {__system___rxtxioctl_0581})<<20
32200     00 00 40 08 | 	long	(132 {__system____dummy_flush_0582})<<20
32204     00 00 00 00 
32208     00 00 00 00 | 	byte	$00[8]
3220c     01 00 00 00 
32210     06 00 00 00 
32214     00 00 00 00 
32218     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3221c     00 00 00 00 
32220     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
32224     00 00 10 08 | 	long	(129 {__system___tx})<<20
32228     00 00 20 08 | 	long	(130 {__system___rx})<<20
3222c     00 00 00 00 | 	byte	$00, $00, $00, $00
32230     00 00 30 08 | 	long	(131 {__system___rxtxioctl_0581})<<20
32234     00 00 40 08 | 	long	(132 {__system____dummy_flush_0582})<<20
32238     00 00 00 00 
      ...             
323a8     00 00 00 00 
323ac     00 00 00 00 | 	byte	$00[376]
323b0     B4 23 03 00 | 	long	@@@__system__dat_ + 1844
323b4     00 00 00 00 
323b8     00 00 00 00 
323bc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
323c0                 | 	alignl
323c0                 | _fatfs_cc_dat_
323c0     C7 00 FC 00 
323c4     E9 00 E2 00 
323c8     E4 00 E0 00 
323cc     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
323d0     EA 00 EB 00 
323d4     E8 00 EF 00 
323d8     EE 00 EC 00 
323dc     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
323e0     C9 00 E6 00 
323e4     C6 00 F4 00 
323e8     F6 00 F2 00 
323ec     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
323f0     FF 00 D6 00 
323f4     DC 00 F8 00 
323f8     A3 00 D8 00 
323fc     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
32400     E1 00 ED 00 
32404     F3 00 FA 00 
32408     F1 00 D1 00 
3240c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
32410     BF 00 AE 00 
32414     AC 00 BD 00 
32418     BC 00 A1 00 
3241c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
32420     91 25 92 25 
32424     93 25 02 25 
32428     24 25 C1 00 
3242c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
32430     A9 00 63 25 
32434     51 25 57 25 
32438     5D 25 A2 00 
3243c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
32440     14 25 34 25 
32444     2C 25 1C 25 
32448     00 25 3C 25 
3244c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
32450     5A 25 54 25 
32454     69 25 66 25 
32458     60 25 50 25 
3245c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
32460     F0 00 D0 00 
32464     CA 00 CB 00 
32468     C8 00 31 01 
3246c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
32470     CF 00 18 25 
32474     0C 25 88 25 
32478     84 25 A6 00 
3247c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
32480     D3 00 DF 00 
32484     D4 00 D2 00 
32488     F5 00 D5 00 
3248c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
32490     DE 00 DA 00 
32494     DB 00 D9 00 
32498     FD 00 DD 00 
3249c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
324a0     AD 00 B1 00 
324a4     17 20 BE 00 
324a8     B6 00 A7 00 
324ac     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
324b0     B0 00 A8 00 
324b4     B7 00 B9 00 
324b8     B3 00 B2 00 
324bc     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
324c0     61 00 1A 03 
324c4     E0 00 17 03 
324c8     F8 00 07 03 
324cc     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
324d0     78 01 00 01 
324d4     30 01 32 01 
324d8     06 01 39 01 
324dc     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
324e0     2E 01 79 01 
324e4     06 01 80 01 
324e8     4D 00 43 02 
324ec     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
324f0     82 01 84 01 
324f4     84 01 86 01 
324f8     87 01 87 01 
324fc     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
32500     8B 01 8B 01 
32504     8D 01 8E 01 
32508     8F 01 90 01 
3250c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
32510     93 01 94 01 
32514     F6 01 96 01 
32518     97 01 98 01 
3251c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
32520     9B 01 9C 01 
32524     9D 01 20 02 
32528     9F 01 A0 01 
3252c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
32530     A2 01 A4 01 
32534     A4 01 A6 01 
32538     A7 01 A7 01 
3253c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
32540     AB 01 AC 01 
32544     AC 01 AE 01 
32548     AF 01 AF 01 
3254c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
32550     B3 01 B3 01 
32554     B5 01 B5 01 
32558     B7 01 B8 01 
3255c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
32560     BB 01 BC 01 
32564     BC 01 BE 01 
32568     F7 01 C0 01 
3256c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
32570     C3 01 C4 01 
32574     C5 01 C4 01 
32578     C7 01 C8 01 
3257c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
32580     CB 01 CA 01 
32584     CD 01 10 01 
32588     DD 01 01 00 
3258c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
32590     12 01 F3 01 
32594     03 00 F1 01 
32598     F4 01 F4 01 
3259c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
325a0     22 02 12 01 
325a4     3A 02 09 00 
325a8     65 2C 3B 02 
325ac     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
325b0     66 2C 3F 02 
325b4     40 02 41 02 
325b8     41 02 46 02 
325bc     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
325c0     40 00 81 01 
325c4     86 01 55 02 
325c8     89 01 8A 01 
325cc     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
325d0     5A 02 90 01 
325d4     5C 02 5D 02 
325d8     5E 02 5F 02 
325dc     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
325e0     62 02 94 01 
325e4     64 02 65 02 
325e8     66 02 67 02 
325ec     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
325f0     6A 02 62 2C 
325f4     6C 02 6D 02 
325f8     6E 02 9C 01 
325fc     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
32600     9D 01 73 02 
32604     74 02 9F 01 
32608     76 02 77 02 
3260c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
32610     7A 02 7B 02 
32614     7C 02 64 2C 
32618     7E 02 7F 02 
3261c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
32620     82 02 A9 01 
32624     84 02 85 02 
32628     86 02 87 02 
3262c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
32630     B1 01 B2 01 
32634     45 02 8D 02 
32638     8E 02 8F 02 
3263c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
32640     B7 01 7B 03 
32644     03 00 FD 03 
32648     FE 03 FF 03 
3264c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
32650     86 03 88 03 
32654     89 03 8A 03 
32658     B1 03 11 03 
3265c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
32660     A3 03 A3 03 
32664     C4 03 08 03 
32668     CC 03 03 00 
3266c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
32670     8F 03 D8 03 
32674     18 01 F2 03 
32678     0A 00 F9 03 
3267c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
32680     F5 03 F6 03 
32684     F7 03 F7 03 
32688     F9 03 FA 03 
3268c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
32690     20 03 50 04 
32694     10 07 60 04 
32698     22 01 8A 04 
3269c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
326a0     0E 01 CF 04 
326a4     01 00 C0 04 
326a8     D0 04 44 01 
326ac     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
326b0     00 00 7D 1D 
326b4     01 00 63 2C 
326b8     00 1E 96 01 
326bc     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
326c0     00 1F 08 06 
326c4     10 1F 06 06 
326c8     20 1F 08 06 
326cc     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
326d0     40 1F 06 06 
326d4     51 1F 07 00 
326d8     59 1F 52 1F 
326dc     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
326e0     5D 1F 56 1F 
326e4     5F 1F 60 1F 
326e8     08 06 70 1F 
326ec     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
326f0     BB 1F C8 1F 
326f4     C9 1F CA 1F 
326f8     CB 1F DA 1F 
326fc     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
32700     F9 1F EA 1F 
32704     EB 1F FA 1F 
32708     FB 1F 80 1F 
3270c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
32710     08 06 A0 1F 
32714     08 06 B0 1F 
32718     04 00 B8 1F 
3271c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
32720     BC 1F CC 1F 
32724     01 00 C3 1F 
32728     D0 1F 02 06 
3272c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
32730     E5 1F 01 00 
32734     EC 1F F3 1F 
32738     01 00 FC 1F 
3273c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
32740     32 21 70 21 
32744     10 02 84 21 
32748     01 00 83 21 
3274c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
32750     30 2C 2F 04 
32754     60 2C 02 01 
32758     67 2C 06 01 
3275c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
32760     80 2C 64 01 
32764     00 2D 26 08 
32768     41 FF 1A 03 
3276c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
32770     05 07 09 0E 
32774     10 12 14 16 
32778     18 1C 1E 43 
3277c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
32780     41 41 43 45 
32784     45 45 49 49 
32788     49 41 41 45 
3278c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
32790     4F 55 55 59 
32794     4F 55 4F 9C 
32798     4F 9E 9F 41 
3279c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
327a0     A5 A6 A7 A8 
327a4     A9 AA AB AC 
327a8     AD AE AF B0 
327ac     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
327b0     41 41 41 B8 
327b4     B9 BA BB BC 
327b8     BD BE BF C0 
327bc     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
327c0     C5 41 41 C8 
327c4     C9 CA CB CC 
327c8     CD CE CF D1 
327cc     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
327d0     49 49 49 49 
327d4     D9 DA DB DC 
327d8     DD 49 DF 4F 
327dc     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
327e0     4F E6 E8 E8 
327e4     55 55 55 59 
327e8     59 EE EF F0 
327ec     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
327f0     F5 F6 F7 F8 
327f4     F9 FA FB FC 
327f8     FD FE FF 00 
327fc     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
32800     00 00 00 00 | 	byte	$00, $00, $00, $00
32804     00 00 00 07 | 	long	(112 {_fatfs_cc_v_close})<<20
32808     00 00 10 07 | 	long	(113 {_fatfs_cc_v_read})<<20
3280c     00 00 20 07 | 	long	(114 {_fatfs_cc_v_write})<<20
32810     00 00 30 07 | 	long	(115 {_fatfs_cc_v_lseek})<<20
32814     00 00 40 07 | 	long	(116 {_fatfs_cc_v_ioctl})<<20
32818     00 00 50 08 | 	long	(133 {_fatfs_cc_v_flush})<<20
3281c     00 00 00 00 
32820     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
32824     00 00 50 07 | 	long	(117 {_fatfs_cc_v_open})<<20
32828     00 00 60 07 | 	long	(118 {_fatfs_cc_v_creat})<<20
3282c     00 00 70 07 | 	long	(119 {_fatfs_cc_v_opendir})<<20
32830     00 00 80 07 | 	long	(120 {_fatfs_cc_v_closedir})<<20
32834     00 00 90 07 | 	long	(121 {_fatfs_cc_v_readdir})<<20
32838     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_stat})<<20
3283c     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_mkdir})<<20
32840     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_rmdir})<<20
32844     00 00 D0 07 | 	long	(125 {_fatfs_cc_v_remove})<<20
32848     00 00 E0 07 | 	long	(126 {_fatfs_cc_v_rename})<<20
3284c     00 00 F0 07 | 	long	(127 {_fatfs_cc_v_init})<<20
32850     00 00 00 08 | 	long	(128 {_fatfs_cc_v_deinit})<<20
32854     FF FF FF FF 
32858     1F 00 00 00 
3285c     1C 00 00 00 
32860     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
32864     1E 00 00 00 
32868     1F 00 00 00 
3286c     1E 00 00 00 
32870     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
32874     1F 00 00 00 
32878     1E 00 00 00 
3287c     1F 00 00 00 
32880     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
32884     1F 00 00 00 
32888     00 00 00 00 
3288c     1F 00 00 00 
32890     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
32894     5A 00 00 00 
32898     78 00 00 00 
3289c     97 00 00 00 
328a0     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
328a4     D4 00 00 00 
328a8     F3 00 00 00 
328ac     11 01 00 00 
328b0     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
328b4     4E 01 00 00 
328b8     6D 01 00 00 
328bc     FF FF FF FF 
328c0     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
328c4     00 00 00 00 
      ...             
328dc     00 00 00 00 
328e0     00 00 00 00 | 	byte	$00[32]
328e4     02 29 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
328e8     06 29 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
328ec     00 00 00 00 
328f0     00 00 00 00 
328f4     00 00 00 00 
328f8     00 00 00 00 
328fc     00 00       | 	byte	$00[18]
328fe     3F 3F 3F 00 
32902     55 43 54 00 
32906     55 43 54 00 
3290a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3290e     00 00 00 00 
32912     00 00 00    | 	byte	$00[7]
32915     CA 9A 3B 00 
32919     00 00 00 01 
3291d     01 01 01 01 
32921     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
32925     91 11 11 11 
32929     11 01 01 01 
3292d     01 01 01 01 
32931     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
32935     01 01 01 01 
32939     01 01 01    | 	byte	$01[7]
3293c     90 20 20 20 
32940     20 20 20 20 
32944     20 20 20 20 
32948     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3294c     42 42 42 42 
32950     42 42 42 42 
32954     42 42       | 	byte	$42[10]
32956     20 20 20 20 
3295a     20 20 20    | 	byte	$20[7]
3295d     44 44 44 44 
32961     44 44       | 	byte	$44[6]
32963     04 04 04 04 
32967     04 04 04 04 
3296b     04 04 04 04 
3296f     04 04 04 04 
32973     04 04 04 04 | 	byte	$04[20]
32977     20 20 20 20 
3297b     20 20       | 	byte	$20[6]
3297d     48 48 48 48 
32981     48 48       | 	byte	$48[6]
32983     08 08 08 08 
32987     08 08 08 08 
3298b     08 08 08 08 
3298f     08 08 08 08 
32993     08 08 08 08 | 	byte	$08[20]
32997     20 20 20 20 
3299b     01 00 00 00 
3299f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
329a0                 | __methodtable__
329a0     24 4C 01 00 | 	long	@_do_no_command
329a4     24 DC 00 00 | 	long	@_do_plus
329a8     10 E1 00 00 | 	long	@_do_minus
329ac     D8 E5 00 00 | 	long	@_do_or
329b0     F0 E6 00 00 | 	long	@_do_mul
329b4     7C EC 00 00 | 	long	@_do_fdiv
329b8     C0 E4 00 00 | 	long	@_do_and
329bc     5C EA 00 00 | 	long	@_do_div
329c0     44 EE 00 00 | 	long	@_do_mod
329c4     64 F0 00 00 | 	long	@_do_shl
329c8     7C F1 00 00 | 	long	@_do_shr
329cc     94 F2 00 00 | 	long	@_do_power
329d0     6C D6 00 00 | 	long	@_do_getvar
329d4     B0 9A 00 00 | 	long	@_do_push
329d8     20 CF 00 00 | 	long	@_do_assign
329dc     04 29 01 00 | 	long	@_do_cls
329e0     1C C9 00 00 | 	long	@_do_new
329e4     A8 29 01 00 | 	long	@_do_plot
329e8     78 2A 01 00 | 	long	@_do_draw
329ec     EC 33 01 00 | 	long	@_do_print
329f0     E4 2C 01 00 | 	long	@_do_circle
329f4     6C 2B 01 00 | 	long	@_do_fcircle
329f8     5C 2E 01 00 | 	long	@_do_box
329fc     04 32 01 00 | 	long	@_do_frame
32a00     70 29 01 00 | 	long	@_do_color
32a04     B4 7A 00 00 | 	long	@_do_for
32a08     E0 7C 00 00 | 	long	@_do_next
32a0c     80 C6 00 00 | 	long	@_do_list
32a10     00 AB 00 00 | 	long	@_do_run
32a14     DC CD 00 00 | 	long	@_do_error
32a18     D8 CA 00 00 | 	long	@_do_fast_goto
32a1c     C8 CB 00 00 | 	long	@_do_find_goto
32a20     D8 CD 00 00 | 	long	@_do_slow_goto
32a24     5C 11 01 00 | 	long	@_do_converttoint
32a28     F4 A0 00 00 | 	long	@_test_csave
32a2c     48 A4 00 00 | 	long	@_do_save
32a30     34 A7 00 00 | 	long	@_do_load
32a34     B8 3D 01 00 | 	long	@_do_pinwrite
32a38     58 42 01 00 | 	long	@_do_waitms
32a3c     94 43 01 00 | 	long	@_do_waitvbl
32a40     94 46 01 00 | 	long	@_do_if
32a44     78 47 01 00 | 	long	@_do_else
32a48     40 48 01 00 | 	long	@_do_nothing
32a4c     5C F4 00 00 | 	long	@_do_eq
32a50     D4 02 01 00 | 	long	@_do_ge
32a54     AC 07 01 00 | 	long	@_do_le
32a58     34 F9 00 00 | 	long	@_do_gt
32a5c     0C FE 00 00 | 	long	@_do_lt
32a60     84 0C 01 00 | 	long	@_do_ne
32a64     38 14 01 00 | 	long	@_do_rnd
32a68     44 48 01 00 | 	long	@_do_brun
32a6c     10 4B 01 00 | 	long	@_do_beep
32a70     C4 43 01 00 | 	long	@_do_dir
32a74     B4 38 01 00 | 	long	@_do_paper
32a78     3C 39 01 00 | 	long	@_do_ink
32a7c     D8 39 01 00 | 	long	@_do_font
32a80     54 3A 01 00 | 	long	@_do_mode
32a84     7C 4A 01 00 | 	long	@_do_mouse
32a88     9C 28 01 00 | 	long	@_do_gettime
32a8c     B0 4A 01 00 | 	long	@_do_cursor
32a90     E4 4A 01 00 | 	long	@_do_click
32a94     28 26 01 00 | 	long	@_do_mousex
32a98     6C 26 01 00 | 	long	@_do_mousey
32a9c     F4 26 01 00 | 	long	@_do_mousek
32aa0     B0 26 01 00 | 	long	@_do_mousew
32aa4     00 16 01 00 | 	long	@_do_sin
32aa8     54 1D 01 00 | 	long	@_do_stick
32aac     D8 1E 01 00 | 	long	@_do_strig
32ab0     3C 25 01 00 | 	long	@_do_sprite
32ab4     AC 21 01 00 | 	long	@_do_defsprite
32ab8     5C 20 01 00 | 	long	@_do_getpixel
32abc     A0 43 01 00 | 	long	@_do_waitclock
32ac0     30 4C 01 00 | 	long	@_do_negative
32ac4     38 27 01 00 | 	long	@_do_rdpin
32ac8     A4 27 01 00 | 	long	@_do_rqpin
32acc     18 28 01 00 | 	long	@_do_pinread
32ad0     50 40 01 00 | 	long	@_do_wrpin
32ad4     D0 40 01 00 | 	long	@_do_wxpin
32ad8     50 41 01 00 | 	long	@_do_wypin
32adc     40 3E 01 00 | 	long	@_do_pinfloat
32ae0     80 3E 01 00 | 	long	@_do_pinlo
32ae4     C0 3E 01 00 | 	long	@_do_pinhi
32ae8     40 3F 01 00 | 	long	@_do_pinstart
32aec     00 3F 01 00 | 	long	@_do_pintoggle
32af0     D0 41 01 00 | 	long	@_do_position
32af4     0C 17 01 00 | 	long	@_do_cos
32af8     2C 18 01 00 | 	long	@_do_tan
32afc     50 1B 01 00 | 	long	@_do_atn
32b00     38 19 01 00 | 	long	@_do_asin
32b04     44 1A 01 00 | 	long	@_do_acos
32b08     64 1C 01 00 | 	long	@_do_sqr
32b0c     44 30 01 00 | 	long	@_do_fill
32b10     FC BC 00 00 | 	long	@_do_defsnd
32b14     24 AE 00 00 | 	long	@_do_defenv
32b18     9C 47 01 00 | 	long	@_do_rad
32b1c     C4 47 01 00 | 	long	@_do_deg
32b20     EC 47 01 00 | 	long	@_do_int
32b24     30 B8 00 00 | 	long	@_do_play
32b28     78 81 01 00 | 	long	@_hg010b_spin2_putchar
32b2c     6C 88 02 00 | 	long	@__struct___bas_wrap_sender_tx
32b30     B0 88 02 00 | 	long	@__struct___bas_wrap_sender_rx
32b34     F8 88 02 00 | 	long	@__struct___bas_wrap_sender_close
32b38     9C 87 02 00 | 	long	@__struct__s_vfs_file_t_putchar
32b3c     0C 88 02 00 | 	long	@__struct__s_vfs_file_t_getchar
32b40     54 87 02 00 | 	long	@___strs_cl_pfunc
32b44     C8 E6 01 00 | 	long	@__system____root_opendir
32b48     64 E7 01 00 | 	long	@__system____root_closedir
32b4c     E0 E6 01 00 | 	long	@__system____root_readdir
32b50     6C E7 01 00 | 	long	@__system____root_stat
32b54     F4 DF 01 00 | 	long	@__system____default_putc
32b58     78 DF 01 00 | 	long	@__system____default_getc
32b5c     9C E0 01 00 | 	long	@__system____default_flush
32b60     70 72 02 00 | 	long	@_fatfs_cc_v_close
32b64     8C 76 02 00 | 	long	@_fatfs_cc_v_read
32b68     A0 77 02 00 | 	long	@_fatfs_cc_v_write
32b6c     80 78 02 00 | 	long	@_fatfs_cc_v_lseek
32b70     08 79 02 00 | 	long	@_fatfs_cc_v_ioctl
32b74     5C 79 02 00 | 	long	@_fatfs_cc_v_open
32b78     D4 71 02 00 | 	long	@_fatfs_cc_v_creat
32b7c     B4 72 02 00 | 	long	@_fatfs_cc_v_opendir
32b80     28 73 02 00 | 	long	@_fatfs_cc_v_closedir
32b84     68 73 02 00 | 	long	@_fatfs_cc_v_readdir
32b88     9C 74 02 00 | 	long	@_fatfs_cc_v_stat
32b8c     1C 79 02 00 | 	long	@_fatfs_cc_v_mkdir
32b90     3C 79 02 00 | 	long	@_fatfs_cc_v_rmdir
32b94     2C 79 02 00 | 	long	@_fatfs_cc_v_remove
32b98     4C 79 02 00 | 	long	@_fatfs_cc_v_rename
32b9c     6C 7A 02 00 | 	long	@_fatfs_cc_v_init
32ba0     74 7A 02 00 | 	long	@_fatfs_cc_v_deinit
32ba4     30 95 01 00 | 	long	@__system___tx
32ba8     70 95 01 00 | 	long	@__system___rx
32bac     D8 F2 01 00 | 	long	@__system___rxtxioctl_0581
32bb0     30 F3 01 00 | 	long	@__system____dummy_flush_0582
32bb4     3C 7A 02 00 | 	long	@_fatfs_cc_v_flush
32bb8                 | __heap_base
32bb8     00 00 00 00 
      ...             
619b8     00 00 00 00 
619bc     00 00 00 00 | 	long	0[48002]
619c0                 | objmem
619c0     00 00 00 00 
      ...             
70f88     00 00 00 00 
70f8c     00 00 00 00 | 	long	0[15732]
70f90                 | stackspace
70f90     00 00 00 00 | 	long	0[1]
70f94 100             | 	org	COG_BSS_START
70f94 100             | _var01
70f94 100             | 	res	1
70f94 101             | _var02
70f94 101             | 	res	1
70f94 102             | _var03
70f94 102             | 	res	1
70f94 103             | _var04
70f94 103             | 	res	1
70f94 104             | _var05
70f94 104             | 	res	1
70f94 105             | _var06
70f94 105             | 	res	1
70f94 106             | _var07
70f94 106             | 	res	1
70f94 107             | _var08
70f94 107             | 	res	1
70f94 108             | _var09
70f94 108             | 	res	1
70f94 109             | arg01
70f94 109             | 	res	1
70f94 10a             | arg02
70f94 10a             | 	res	1
70f94 10b             | arg03
70f94 10b             | 	res	1
70f94 10c             | arg04
70f94 10c             | 	res	1
70f94 10d             | arg05
70f94 10d             | 	res	1
70f94 10e             | arg06
70f94 10e             | 	res	1
70f94 10f             | local01
70f94 10f             | 	res	1
70f94 110             | local02
70f94 110             | 	res	1
70f94 111             | local03
70f94 111             | 	res	1
70f94 112             | local04
70f94 112             | 	res	1
70f94 113             | local05
70f94 113             | 	res	1
70f94 114             | local06
70f94 114             | 	res	1
70f94 115             | local07
70f94 115             | 	res	1
70f94 116             | local08
70f94 116             | 	res	1
70f94 117             | local09
70f94 117             | 	res	1
70f94 118             | local10
70f94 118             | 	res	1
70f94 119             | local11
70f94 119             | 	res	1
70f94 11a             | local12
70f94 11a             | 	res	1
70f94 11b             | local13
70f94 11b             | 	res	1
70f94 11c             | local14
70f94 11c             | 	res	1
70f94 11d             | local15
70f94 11d             | 	res	1
70f94 11e             | local16
70f94 11e             | 	res	1
70f94 11f             | local17
70f94 11f             | 	res	1
70f94 120             | local18
70f94 120             | 	res	1
70f94 121             | local19
70f94 121             | 	res	1
70f94 122             | local20
70f94 122             | 	res	1
70f94 123             | local21
70f94 123             | 	res	1
70f94 124             | local22
70f94 124             | 	res	1
70f94 125             | local23
70f94 125             | 	res	1
70f94 126             | local24
70f94 126             | 	res	1
70f94 127             | local25
70f94 127             | 	res	1
70f94 128             | local26
70f94 128             | 	res	1
70f94 129             | local27
70f94 129             | 	res	1
70f94 12a             | local28
70f94 12a             | 	res	1
70f94 12b             | local29
70f94 12b             | 	res	1
70f94 12c             | local30
70f94 12c             | 	res	1
70f94 12d             | local31
70f94 12d             | 	res	1
70f94 12e             | local32
70f94 12e             | 	res	1
70f94 12f             | local33
70f94 12f             | 	res	1
70f94 130             | local34
70f94 130             | 	res	1
70f94 131             | muldiva_
70f94 131             | 	res	1
70f94 132             | muldivb_
70f94 132             | 	res	1
70f94 133             | 	fit	480
70f94 133             | 
