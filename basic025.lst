00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic025.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 25
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 18 7A A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 32 65 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 31 63 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 32 63 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 64 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 62 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 31 63 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 32 65 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 70 55 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 34 53 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 78 43 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 14 46 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 78 41 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 78 AE 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 54 4D 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 EC DF 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 9C 07 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 54 05 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 2C 17 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 18 3A 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     B3 E5 05 F1 | 	add	objptr, ##62899
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     F8 E5 85 F1 | 	sub	objptr, ##62968
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     D0 A7 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     F8 E5 05 F1 | 	add	objptr, ##62968
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     F8 E5 85 F1 | 	sub	objptr, ##62968
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     A8 A7 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     F8 E5 05 F1 | 	add	objptr, ##62968
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     F8 E5 85 F1 | 	sub	objptr, ##62968
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     80 A7 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     F8 E5 05 F1 | 	add	objptr, ##62968
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     F8 E5 85 F1 | 	sub	objptr, ##62968
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     70 E5 05 F1 | 	add	objptr, ##62832
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     78 E5 85 F1 | 	sub	objptr, ##62840
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     14 9D B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     64 9D B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     54 9D B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     80 E5 05 F1 | 	add	objptr, ##62848
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     9C E5 85 F1 | 	sub	objptr, ##62876
009b0     B8 9C B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     80 E5 05 F1 | 	add	objptr, ##62848
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     9C E5 85 F1 | 	sub	objptr, ##62876
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     22 4A 05 F6 | 	mov	COUNT_, #34
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     4C F0 07 F1 | 	add	ptra, ##588
00a2c     56 00 00 FF 
00a30     A0 E5 05 F1 | 	add	objptr, ##44448
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     6A 00 00 FF 
00a68     00 E4 85 F1 | 	sub	objptr, ##54272
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     90 E5 05 F1 | 	add	objptr, ##43408
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     51 01 00 FF 
00abc     EA 16 06 F6 | 	mov	arg03, ##@LR__4397
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     56 00 00 FF 
00afc     A0 E5 85 F1 | 	sub	objptr, ##44448
00b00     90 C6 B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     C8 C5 B1 FD | 	call	#__system__LTrim_S
00b0c     56 00 00 FF 
00b10     A0 E5 05 F1 | 	add	objptr, ##44448
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     51 01 00 FF 
00b1c     EB 1E 06 F6 | 	mov	local01, ##@LR__4398
00b20     24 00 00 FF 
00b24     A4 E4 05 F1 | 	add	objptr, ##18596
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     A4 E4 85 F1 | 	sub	objptr, ##18596
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     56 00 00 FF 
00b3c     A0 E5 85 F1 | 	sub	objptr, ##44448
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7B 00 00 FF 
00b5c     48 E4 05 F1 | 	add	objptr, ##63048
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7B 00 00 FF 
00b68     48 E4 85 F1 | 	sub	objptr, ##63048
00b6c     D4 26 90 AD |  if_e	jmp	#LR__0148
00b70     7B 00 00 FF 
00b74     4C E4 05 F1 | 	add	objptr, ##63052
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     AC E4 85 F1 | 	sub	objptr, ##18604
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     56 00 00 FF 
00b90     A0 E5 85 F1 | 	sub	objptr, ##44448
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     56 00 00 FF 
00bc0     A0 E5 05 F1 | 	add	objptr, ##44448
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     56 00 00 FF 
00bcc     A0 E5 85 F1 | 	sub	objptr, ##44448
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     9C C2 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     51 01 00 FF 
00be4     EC 14 06 F6 | 	mov	arg02, ##@LR__4399
00be8     54 A1 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7B 00 00 FF 
00bf8     4C E4 05 F1 | 	add	objptr, ##63052
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7B 00 00 FF 
00c04     4C E4 85 F1 | 	sub	objptr, ##63052
00c08     7B 00 00 AF 
00c0c     4C E4 05 A1 |  if_e	add	objptr, ##63052
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7B 00 00 AF 
00c18     4C E4 85 A1 |  if_e	sub	objptr, ##63052
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     56 00 00 FF 
00c24     A0 E5 05 F1 | 	add	objptr, ##44448
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     56 00 00 FF 
00c30     A0 E5 85 F1 | 	sub	objptr, ##44448
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     38 C2 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     51 01 00 FF 
00c48     EE 14 06 F6 | 	mov	arg02, ##@LR__4400
00c4c     F0 A0 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7B 00 00 AF 
00c58     4C E4 05 A1 |  if_e	add	objptr, ##63052
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7B 00 00 AF 
00c64     4C E4 85 A1 |  if_e	sub	objptr, ##63052
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7B 00 00 AF 
00c70     4C E4 05 A1 |  if_e	add	objptr, ##63052
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7B 00 00 AF 
00c7c     4C E4 85 A1 |  if_e	sub	objptr, ##63052
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     90 E5 05 F1 | 	add	objptr, ##43408
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     BC E4 05 F1 | 	add	objptr, ##19644
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7B 00 00 FF 
00ca8     4C E4 85 F1 | 	sub	objptr, ##63052
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     56 00 00 FF 
00cc4     A0 E5 05 F1 | 	add	objptr, ##44448
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     56 00 00 FF 
00cd0     A0 E5 85 F1 | 	sub	objptr, ##44448
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     98 C1 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     51 01 00 FF 
00ce8     F0 2E 06 F6 | 	mov	local09, ##@LR__4401
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     4C A0 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     90 E5 05 F1 | 	add	objptr, ##43408
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     90 E5 85 F1 | 	sub	objptr, ##43408
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7B 00 00 FF 
00d34     48 E4 05 F1 | 	add	objptr, ##63048
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7B 00 00 FF 
00d40     48 E4 85 F1 | 	sub	objptr, ##63048
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7B 00 00 FF 
00d58     48 E4 05 F1 | 	add	objptr, ##63048
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7B 00 00 FF 
00d64     48 E4 85 F1 | 	sub	objptr, ##63048
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     56 00 00 FF 
00d74     A0 E5 05 F1 | 	add	objptr, ##44448
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     56 00 00 FF 
00d80     A0 E5 85 F1 | 	sub	objptr, ##44448
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     38 C0 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     DC C3 B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     14 C3 B1 FD | 	call	#__system__LTrim_S
00dc0     7B 00 00 FF 
00dc4     50 E4 05 F1 | 	add	objptr, ##63056
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     B0 E4 85 F1 | 	sub	objptr, ##18608
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     56 00 00 FF 
00ddc     A0 E5 85 F1 | 	sub	objptr, ##44448
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     74 BF B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     A0 C3 B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     D8 C2 B1 FD | 	call	#__system__LTrim_S
00dfc     56 00 00 FF 
00e00     A0 E5 05 F1 | 	add	objptr, ##44448
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     56 00 00 FF 
00e0c     A0 E5 85 F1 | 	sub	objptr, ##44448
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     51 01 00 FF 
00e18     F2 1E 06 F6 | 	mov	local01, ##@LR__4402
00e1c     7B 00 00 FF 
00e20     50 E4 05 F1 | 	add	objptr, ##63056
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7B 00 00 FF 
00e2c     50 E4 85 F1 | 	sub	objptr, ##63056
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     56 00 00 FF 
00e34     A8 E5 05 F1 | 	add	objptr, ##44456
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     56 00 00 FF 
00e40     A8 E5 85 F1 | 	sub	objptr, ##44456
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7B 00 00 FF 
00e54     50 E4 05 F1 | 	add	objptr, ##63056
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7B 00 00 FF 
00e60     50 E4 85 F1 | 	sub	objptr, ##63056
00e64     51 01 00 FF 
00e68     F3 14 06 F6 | 	mov	arg02, ##@LR__4403
00e6c     D0 9E B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     56 00 00 5F 
00e78     A8 E5 05 51 |  if_ne	add	objptr, ##44456
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     56 00 00 5F 
00e84     A8 E5 85 51 |  if_ne	sub	objptr, ##44456
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     56 00 00 FF 
00e90     A8 E5 05 F1 | 	add	objptr, ##44456
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     56 00 00 FF 
00e9c     A8 E5 85 F1 | 	sub	objptr, ##44456
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7B 00 00 FF 
00eb0     50 E4 05 F1 | 	add	objptr, ##63056
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7B 00 00 FF 
00ebc     50 E4 85 F1 | 	sub	objptr, ##63056
00ec0     51 01 00 FF 
00ec4     F4 14 06 F6 | 	mov	arg02, ##@LR__4404
00ec8     74 9E B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     56 00 00 AF 
00ed4     A8 E5 05 A1 |  if_e	add	objptr, ##44456
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     56 00 00 AF 
00ee0     A8 E5 85 A1 |  if_e	sub	objptr, ##44456
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     56 00 00 FF 
00eec     A8 E5 05 F1 | 	add	objptr, ##44456
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     56 00 00 FF 
00ef8     A8 E5 85 F1 | 	sub	objptr, ##44456
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7B 00 00 FF 
00f08     50 E4 05 F1 | 	add	objptr, ##63056
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7B 00 00 FF 
00f14     50 E4 85 F1 | 	sub	objptr, ##63056
00f18     51 01 00 FF 
00f1c     F5 14 06 F6 | 	mov	arg02, ##@LR__4405
00f20     1C 9E B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     56 00 00 5F 
00f2c     A8 E5 05 51 |  if_ne	add	objptr, ##44456
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     56 00 00 5F 
00f38     A8 E5 85 51 |  if_ne	sub	objptr, ##44456
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     56 00 00 FF 
00f44     A8 E5 05 F1 | 	add	objptr, ##44456
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     56 00 00 FF 
00f50     A8 E5 85 F1 | 	sub	objptr, ##44456
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7B 00 00 FF 
00f60     50 E4 05 F1 | 	add	objptr, ##63056
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7B 00 00 FF 
00f6c     50 E4 85 F1 | 	sub	objptr, ##63056
00f70     51 01 00 FF 
00f74     F6 14 06 F6 | 	mov	arg02, ##@LR__4406
00f78     C4 9D B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     56 00 00 AF 
00f84     A8 E5 05 A1 |  if_e	add	objptr, ##44456
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     56 00 00 AF 
00f90     A8 E5 85 A1 |  if_e	sub	objptr, ##44456
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     56 00 00 FF 
00fb0     A0 E5 05 F1 | 	add	objptr, ##44448
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     56 00 00 FF 
00fbc     A0 E5 85 F1 | 	sub	objptr, ##44448
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     AC BE B1 FD | 	call	#__system__Mid_S
00fcc     7B 00 00 FF 
00fd0     54 E4 05 F1 | 	add	objptr, ##63060
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7B 00 00 FF 
00fe0     54 E4 85 F1 | 	sub	objptr, ##63060
00fe4     68 25 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7B 00 00 FF 
01010     48 E4 05 F1 | 	add	objptr, ##63048
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7B 00 00 FF 
0101c     48 E4 85 F1 | 	sub	objptr, ##63048
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7B 00 00 FF 
0106c     5C E4 05 F1 | 	add	objptr, ##63068
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7B 00 00 FF 
010a0     5C E4 85 F1 | 	sub	objptr, ##63068
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     56 00 00 FF 
010b4     A0 E5 05 F1 | 	add	objptr, ##44448
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     BC E4 05 F1 | 	add	objptr, ##18620
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7B 00 00 FF 
010cc     5C E4 85 F1 | 	sub	objptr, ##63068
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     A0 BD B1 FD | 	call	#__system__Mid_S
010d8     7B 00 00 FF 
010dc     64 E4 05 F1 | 	add	objptr, ##63076
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7B 00 00 FF 
010e8     64 E4 85 F1 | 	sub	objptr, ##63076
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     51 01 00 FF 
010f4     F7 14 06 F6 | 	mov	arg02, ##@LR__4407
010f8     44 9C B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     90 E5 05 F1 | 	add	objptr, ##43408
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     D4 E4 05 F1 | 	add	objptr, ##19668
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7B 00 00 FF 
01128     64 E4 85 F1 | 	sub	objptr, ##63076
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     56 00 00 FF 
01138     A0 E5 05 F1 | 	add	objptr, ##44448
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     BC E4 05 F1 | 	add	objptr, ##18620
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7B 00 00 FF 
01164     5C E4 85 F1 | 	sub	objptr, ##63068
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     00 BD B1 FD | 	call	#__system__Mid_S
01178     7B 00 00 FF 
0117c     64 E4 05 F1 | 	add	objptr, ##63076
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7B 00 00 FF 
01188     64 E4 85 F1 | 	sub	objptr, ##63076
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     51 01 00 FF 
01194     F8 14 06 F6 | 	mov	arg02, ##@LR__4408
01198     A4 9B B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     90 E5 05 F1 | 	add	objptr, ##43408
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     D4 E4 05 F1 | 	add	objptr, ##19668
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7B 00 00 FF 
011c8     64 E4 85 F1 | 	sub	objptr, ##63076
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     90 E5 05 F1 | 	add	objptr, ##43408
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     51 01 00 FF 
011fc     F9 14 06 F6 | 	mov	arg02, ##@LR__4409
01200     54 00 00 FF 
01204     90 E5 85 F1 | 	sub	objptr, ##43408
01208     34 9B B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     90 E5 05 F1 | 	add	objptr, ##43408
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     D4 E4 05 F1 | 	add	objptr, ##19668
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     D4 E4 85 F1 | 	sub	objptr, ##19668
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     90 E5 85 F1 | 	sub	objptr, ##43408
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     F8 9A B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     90 E5 05 F1 | 	add	objptr, ##43408
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     90 E5 85 F1 | 	sub	objptr, ##43408
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7B 00 00 FF 
01314     64 E4 05 F1 | 	add	objptr, ##63076
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7B 00 00 FF 
01320     64 E4 85 F1 | 	sub	objptr, ##63076
01324     51 01 00 FF 
01328     FB 14 06 F6 | 	mov	arg02, ##@LR__4410
0132c     10 9A B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7B 00 00 FF 
01340     64 E4 05 F1 | 	add	objptr, ##63076
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7B 00 00 FF 
0134c     64 E4 85 F1 | 	sub	objptr, ##63076
01350     51 01 00 FF 
01354     FD 14 06 F6 | 	mov	arg02, ##@LR__4411
01358     E4 99 B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     90 E5 05 F1 | 	add	objptr, ##43408
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     90 E5 85 F1 | 	sub	objptr, ##43408
01398     4C BA B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     51 01 00 FF 
013a4     FF 14 06 F6 | 	mov	arg02, ##@LR__4412
013a8     94 99 B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     90 E5 05 F1 | 	add	objptr, ##43408
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     90 E5 85 F1 | 	sub	objptr, ##43408
013e0     7C B9 B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     51 01 00 FF 
013ec     01 15 06 F6 | 	mov	arg02, ##@LR__4413
013f0     4C 99 B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     90 E5 05 F1 | 	add	objptr, ##43408
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     90 E5 85 F1 | 	sub	objptr, ##43408
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     64 B9 B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     E0 98 B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     90 E5 05 F1 | 	add	objptr, ##43408
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     90 E5 85 F1 | 	sub	objptr, ##43408
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     90 E5 05 F1 | 	add	objptr, ##43408
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     DC E4 05 F1 | 	add	objptr, ##19676
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     DC E4 85 F1 | 	sub	objptr, ##19676
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     E0 E4 05 F1 | 	add	objptr, ##19680
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7B 00 00 FF 
01594     6C E4 85 F1 | 	sub	objptr, ##63084
01598     51 01 00 FF 
0159c     03 15 06 F6 | 	mov	arg02, ##@LR__4414
015a0     9C 97 B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7B 00 00 FF 
015b0     6C E4 05 F1 | 	add	objptr, ##63084
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7B 00 00 FF 
015bc     6C E4 85 F1 | 	sub	objptr, ##63084
015c0     51 01 00 FF 
015c4     05 15 06 F6 | 	mov	arg02, ##@LR__4415
015c8     74 97 B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7B 00 00 FF 
015d8     6C E4 05 F1 | 	add	objptr, ##63084
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7B 00 00 FF 
015e4     6C E4 85 F1 | 	sub	objptr, ##63084
015e8     51 01 00 FF 
015ec     07 15 06 F6 | 	mov	arg02, ##@LR__4416
015f0     4C 97 B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7B 00 00 FF 
01600     6C E4 05 F1 | 	add	objptr, ##63084
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7B 00 00 FF 
0160c     6C E4 85 F1 | 	sub	objptr, ##63084
01610     51 01 00 FF 
01614     09 33 06 F6 | 	mov	local11, ##@LR__4417
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     20 97 B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7B 00 00 FF 
0162c     6C E4 05 F1 | 	add	objptr, ##63084
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7B 00 00 FF 
01638     6C E4 85 F1 | 	sub	objptr, ##63084
0163c     51 01 00 FF 
01640     0B 31 06 F6 | 	mov	local10, ##@LR__4418
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     F0 96 B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7B 00 00 FF 
0165c     6C E4 05 F1 | 	add	objptr, ##63084
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7B 00 00 FF 
01668     6C E4 85 F1 | 	sub	objptr, ##63084
0166c     51 01 00 FF 
01670     0D 31 06 F6 | 	mov	local10, ##@LR__4419
01674     18 15 02 F6 | 	mov	arg02, local10
01678     C4 96 B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7B 00 00 FF 
01688     6C E4 05 F1 | 	add	objptr, ##63084
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7B 00 00 FF 
01694     6C E4 85 F1 | 	sub	objptr, ##63084
01698     51 01 00 FF 
0169c     0F 37 06 F6 | 	mov	local13, ##@LR__4420
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     98 96 B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7B 00 00 FF 
016b4     70 E4 05 F1 | 	add	objptr, ##63088
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7B 00 00 FF 
016c0     70 E4 85 F1 | 	sub	objptr, ##63088
016c4     51 01 00 FF 
016c8     11 4B 06 F6 | 	mov	local23, ##@LR__4421
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     68 96 B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7B 00 00 FF 
016e4     6C E4 05 F1 | 	add	objptr, ##63084
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7B 00 00 FF 
016f0     6C E4 85 F1 | 	sub	objptr, ##63084
016f4     51 01 00 FF 
016f8     13 4B 06 F6 | 	mov	local23, ##@LR__4422
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     3C 96 B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7B 00 00 FF 
01710     70 E4 05 F1 | 	add	objptr, ##63088
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7B 00 00 FF 
0171c     70 E4 85 F1 | 	sub	objptr, ##63088
01720     51 01 00 FF 
01724     15 45 06 F6 | 	mov	local20, ##@LR__4423
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     0C 96 B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7B 00 00 FF 
01740     6C E4 05 F1 | 	add	objptr, ##63084
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7B 00 00 FF 
0174c     6C E4 85 F1 | 	sub	objptr, ##63084
01750     51 01 00 FF 
01754     17 45 06 F6 | 	mov	local20, ##@LR__4424
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     E0 95 B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7B 00 00 FF 
0176c     70 E4 05 F1 | 	add	objptr, ##63088
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7B 00 00 FF 
01778     70 E4 85 F1 | 	sub	objptr, ##63088
0177c     51 01 00 FF 
01780     19 4D 06 F6 | 	mov	local24, ##@LR__4425
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     B0 95 B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7B 00 00 FF 
0179c     6C E4 05 F1 | 	add	objptr, ##63084
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7B 00 00 FF 
017a8     6C E4 85 F1 | 	sub	objptr, ##63084
017ac     51 01 00 FF 
017b0     1B 4F 06 F6 | 	mov	local25, ##@LR__4426
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     80 95 B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7B 00 00 FF 
017cc     70 E4 05 F1 | 	add	objptr, ##63088
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7B 00 00 FF 
017d8     70 E4 85 F1 | 	sub	objptr, ##63088
017dc     51 01 00 FF 
017e0     1D 51 06 F6 | 	mov	local26, ##@LR__4427
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     50 95 B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     90 E5 05 F1 | 	add	objptr, ##43408
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     DC E4 05 F1 | 	add	objptr, ##19676
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7B 00 00 FF 
01824     70 E4 85 F1 | 	sub	objptr, ##63088
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     40 95 B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     90 E5 05 F1 | 	add	objptr, ##43408
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     90 E5 85 F1 | 	sub	objptr, ##43408
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     90 E5 05 F1 | 	add	objptr, ##43408
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     90 E5 85 F1 | 	sub	objptr, ##43408
01930     60 B8 B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     98 B7 B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     90 E5 05 F1 | 	add	objptr, ##43408
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     90 E5 85 F1 | 	sub	objptr, ##43408
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     90 E5 05 F1 | 	add	objptr, ##43408
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     90 E5 85 F1 | 	sub	objptr, ##43408
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     90 E5 05 F1 | 	add	objptr, ##43408
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     90 E5 85 F1 | 	sub	objptr, ##43408
01a98     C4 B2 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     51 01 00 FF 
01aa4     1F 15 06 F6 | 	mov	arg02, ##@LR__4428
01aa8     94 92 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     90 E5 05 F1 | 	add	objptr, ##43408
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     90 E5 85 F1 | 	sub	objptr, ##43408
01ad8     0C B3 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     51 01 00 FF 
01ae4     21 15 06 F6 | 	mov	arg02, ##@LR__4429
01ae8     54 92 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     90 E5 05 F1 | 	add	objptr, ##43408
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     90 E5 85 F1 | 	sub	objptr, ##43408
01b24     EC B4 B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     90 E5 05 F1 | 	add	objptr, ##43408
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     90 E5 85 F1 | 	sub	objptr, ##43408
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     90 E5 05 F1 | 	add	objptr, ##43408
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     90 E5 85 F1 | 	sub	objptr, ##43408
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     98 16 90 AD |  if_e	jmp	#LR__0148
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     90 E5 05 F1 | 	add	objptr, ##43408
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     90 E5 85 F1 | 	sub	objptr, ##43408
01bc0     10 30 B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7B 00 00 5F 
01bcc     74 E4 05 51 |  if_ne	add	objptr, ##63092
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7B 00 00 FF 
01bd8     74 E4 E5 F3 | 	sumnz	objptr, ##63092
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7B 00 00 AF 
01be4     74 E4 85 A1 |  if_e	sub	objptr, ##63092
01be8     7B 00 00 FF 
01bec     74 E4 05 F1 | 	add	objptr, ##63092
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     E4 E4 85 F1 | 	sub	objptr, ##19684
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     E8 E4 05 F1 | 	add	objptr, ##19688
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     E4 E4 85 F1 | 	sub	objptr, ##19684
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     51 01 00 FF 
01c38     23 17 06 F6 | 	mov	arg03, ##@LR__4430
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     90 E5 85 F1 | 	sub	objptr, ##43408
01c48     00 B6 B1 FD | 	call	#__system__Instr
01c4c     7B 00 00 FF 
01c50     7C E4 05 F1 | 	add	objptr, ##63100
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7B 00 00 FF 
01c60     7C E4 85 F1 | 	sub	objptr, ##63100
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7B 00 00 FF 
01c70     74 E4 05 F1 | 	add	objptr, ##63092
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     E4 E4 85 F1 | 	sub	objptr, ##19684
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     90 E5 85 F1 | 	sub	objptr, ##43408
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7B 00 00 FF 
01cb8     7C E4 05 F1 | 	add	objptr, ##63100
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7B 00 00 FF 
01cc4     7C E4 85 F1 | 	sub	objptr, ##63100
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7B 00 00 FF 
01cdc     74 E4 05 F1 | 	add	objptr, ##63092
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     E4 E4 85 F1 | 	sub	objptr, ##19684
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     E4 E4 05 F1 | 	add	objptr, ##19684
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     E4 E4 85 F1 | 	sub	objptr, ##19684
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     E4 E4 05 F1 | 	add	objptr, ##19684
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     E4 E4 85 F1 | 	sub	objptr, ##19684
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     90 E5 85 F1 | 	sub	objptr, ##43408
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7B 00 00 FF 
01dd0     7C E4 05 F1 | 	add	objptr, ##63100
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7B 00 00 FF 
01ddc     7C E4 85 F1 | 	sub	objptr, ##63100
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     FC AF B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7B 00 00 FF 
01df4     74 E4 05 F1 | 	add	objptr, ##63092
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     E4 E4 85 F1 | 	sub	objptr, ##19684
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     EC E4 05 F1 | 	add	objptr, ##19692
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7B 00 00 FF 
01e34     7C E4 85 F1 | 	sub	objptr, ##63100
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     1C AF B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7B 00 00 FF 
01e4c     74 E4 05 F1 | 	add	objptr, ##63092
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     E4 E4 85 F1 | 	sub	objptr, ##19684
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     90 E5 85 F1 | 	sub	objptr, ##43408
01e74     E8 AE B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     51 01 00 FF 
01e80     25 15 06 F6 | 	mov	arg02, ##@LR__4431
01e84     B8 8E B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7B 00 00 FF 
01e94     74 E4 05 F1 | 	add	objptr, ##63092
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     E4 E4 85 F1 | 	sub	objptr, ##19684
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     90 E5 85 F1 | 	sub	objptr, ##43408
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7B 00 00 FF 
01ee8     74 E4 05 F1 | 	add	objptr, ##63092
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     E4 E4 85 F1 | 	sub	objptr, ##19684
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     E4 E4 05 F1 | 	add	objptr, ##19684
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     E4 E4 85 F1 | 	sub	objptr, ##19684
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     E4 E4 05 F1 | 	add	objptr, ##19684
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     E4 E4 85 F1 | 	sub	objptr, ##19684
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     90 E5 85 F1 | 	sub	objptr, ##43408
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     F0 AD B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7B 00 00 FF 
02000     74 E4 05 F1 | 	add	objptr, ##63092
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     E4 E4 85 F1 | 	sub	objptr, ##19684
02014     F2 26 02 F1 | 	add	local05, objptr
02018     51 01 00 FF 
0201c     27 33 06 F6 | 	mov	local11, ##@LR__4432
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     90 E5 85 F1 | 	sub	objptr, ##43408
0202c                 | LR__0107
0202c     7B 00 00 FF 
02030     74 E4 05 F1 | 	add	objptr, ##63092
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     E4 E4 85 F1 | 	sub	objptr, ##19684
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     E8 E4 05 F1 | 	add	objptr, ##19688
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7B 00 00 FF 
0205c     78 E4 85 F1 | 	sub	objptr, ##63096
02060     51 01 00 FF 
02064     29 15 06 F6 | 	mov	arg02, ##@LR__4433
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     D0 8C B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7B 00 00 FF 
0207c     78 E4 05 F1 | 	add	objptr, ##63096
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7B 00 00 FF 
02088     78 E4 85 F1 | 	sub	objptr, ##63096
0208c     51 01 00 FF 
02090     2F 15 06 F6 | 	mov	arg02, ##@LR__4434
02094     A8 8C B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7B 00 00 FF 
020a4     78 E4 05 F1 | 	add	objptr, ##63096
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7B 00 00 FF 
020b0     78 E4 85 F1 | 	sub	objptr, ##63096
020b4     51 01 00 FF 
020b8     36 15 06 F6 | 	mov	arg02, ##@LR__4435
020bc     80 8C B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7B 00 00 FF 
020cc     74 E4 05 F1 | 	add	objptr, ##63092
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     E4 E4 85 F1 | 	sub	objptr, ##19684
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     90 E5 85 F1 | 	sub	objptr, ##43408
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7B 00 00 FF 
02118     74 E4 05 F1 | 	add	objptr, ##63092
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     E4 E4 85 F1 | 	sub	objptr, ##19684
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     51 01 00 FF 
0213c     3C 15 06 F6 | 	mov	arg02, ##@LR__4436
02140     54 00 00 FF 
02144     90 E5 85 F1 | 	sub	objptr, ##43408
02148     F4 8B B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7B 00 00 FF 
02158     74 E4 05 F1 | 	add	objptr, ##63092
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     E4 E4 85 F1 | 	sub	objptr, ##19684
02170     F2 26 02 F1 | 	add	local05, objptr
02174     51 01 00 FF 
02178     3F 33 06 F6 | 	mov	local11, ##@LR__4437
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     E4 E4 05 F1 | 	add	objptr, ##19684
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     E4 E4 85 F1 | 	sub	objptr, ##19684
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     90 E5 85 F1 | 	sub	objptr, ##43408
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7B 00 00 FF 
021b8     74 E4 05 F1 | 	add	objptr, ##63092
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     E4 E4 85 F1 | 	sub	objptr, ##19684
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     51 01 00 FF 
021e0     41 15 06 F6 | 	mov	arg02, ##@LR__4438
021e4     54 00 00 FF 
021e8     90 E5 85 F1 | 	sub	objptr, ##43408
021ec     50 8B B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7B 00 00 FF 
021fc     74 E4 05 F1 | 	add	objptr, ##63092
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     E4 E4 85 F1 | 	sub	objptr, ##19684
02214     F2 26 02 F1 | 	add	local05, objptr
02218     51 01 00 FF 
0221c     45 33 06 F6 | 	mov	local11, ##@LR__4439
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     E4 E4 05 F1 | 	add	objptr, ##19684
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     E4 E4 85 F1 | 	sub	objptr, ##19684
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     90 E5 85 F1 | 	sub	objptr, ##43408
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7B 00 00 FF 
02260     78 E4 05 F1 | 	add	objptr, ##63096
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7B 00 00 FF 
0226c     78 E4 85 F1 | 	sub	objptr, ##63096
02270     51 01 00 FF 
02274     47 15 06 F6 | 	mov	arg02, ##@LR__4440
02278     C4 8A B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7B 00 00 FF 
02288     78 E4 05 F1 | 	add	objptr, ##63096
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7B 00 00 FF 
02294     78 E4 85 F1 | 	sub	objptr, ##63096
02298     51 01 00 FF 
0229c     4C 15 06 F6 | 	mov	arg02, ##@LR__4441
022a0     9C 8A B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7B 00 00 FF 
022b0     74 E4 05 F1 | 	add	objptr, ##63092
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     E4 E4 85 F1 | 	sub	objptr, ##19684
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     51 01 00 FF 
022d4     4F 15 06 F6 | 	mov	arg02, ##@LR__4442
022d8     54 00 00 FF 
022dc     90 E5 85 F1 | 	sub	objptr, ##43408
022e0     5C 8A B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7B 00 00 FF 
022f0     74 E4 05 F1 | 	add	objptr, ##63092
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     E4 E4 85 F1 | 	sub	objptr, ##19684
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     51 01 00 FF 
02310     55 33 06 F6 | 	mov	local11, ##@LR__4443
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     90 E5 85 F1 | 	sub	objptr, ##43408
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7B 00 00 FF 
02324     74 E4 05 F1 | 	add	objptr, ##63092
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     E4 E4 85 F1 | 	sub	objptr, ##19684
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     51 01 00 FF 
02348     57 15 06 F6 | 	mov	arg02, ##@LR__4444
0234c     54 00 00 FF 
02350     90 E5 85 F1 | 	sub	objptr, ##43408
02354     E8 89 B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7B 00 00 FF 
02364     74 E4 05 F1 | 	add	objptr, ##63092
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     E4 E4 85 F1 | 	sub	objptr, ##19684
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     51 01 00 FF 
02384     60 33 06 F6 | 	mov	local11, ##@LR__4445
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     90 E5 85 F1 | 	sub	objptr, ##43408
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7B 00 00 FF 
02398     74 E4 05 F1 | 	add	objptr, ##63092
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     E4 E4 85 F1 | 	sub	objptr, ##19684
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     51 01 00 FF 
023bc     62 15 06 F6 | 	mov	arg02, ##@LR__4446
023c0     54 00 00 FF 
023c4     90 E5 85 F1 | 	sub	objptr, ##43408
023c8     74 89 B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7B 00 00 FF 
023d8     74 E4 05 F1 | 	add	objptr, ##63092
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     E4 E4 85 F1 | 	sub	objptr, ##19684
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     51 01 00 FF 
023f8     6B 33 06 F6 | 	mov	local11, ##@LR__4447
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     90 E5 85 F1 | 	sub	objptr, ##43408
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7B 00 00 FF 
0240c     74 E4 05 F1 | 	add	objptr, ##63092
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     E4 E4 85 F1 | 	sub	objptr, ##19684
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     51 01 00 FF 
02430     6D 15 06 F6 | 	mov	arg02, ##@LR__4448
02434     54 00 00 FF 
02438     90 E5 85 F1 | 	sub	objptr, ##43408
0243c     00 89 B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7B 00 00 FF 
0244c     74 E4 05 F1 | 	add	objptr, ##63092
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     E4 E4 85 F1 | 	sub	objptr, ##19684
02464     F2 26 02 F1 | 	add	local05, objptr
02468     51 01 00 FF 
0246c     76 33 06 F6 | 	mov	local11, ##@LR__4449
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     90 E5 85 F1 | 	sub	objptr, ##43408
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7B 00 00 FF 
02480     74 E4 05 F1 | 	add	objptr, ##63092
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     E4 E4 85 F1 | 	sub	objptr, ##19684
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     51 01 00 FF 
024a8     78 15 06 F6 | 	mov	arg02, ##@LR__4450
024ac     54 00 00 FF 
024b0     90 E5 85 F1 | 	sub	objptr, ##43408
024b4     88 88 B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7B 00 00 FF 
024c4     74 E4 05 F1 | 	add	objptr, ##63092
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     E4 E4 85 F1 | 	sub	objptr, ##19684
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     51 01 00 FF 
024e4     7B 33 06 F6 | 	mov	local11, ##@LR__4451
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     90 E5 85 F1 | 	sub	objptr, ##43408
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     74 05 90 3D |  if_ae	jmp	#LR__0128
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     90 E5 05 F1 | 	add	objptr, ##43408
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     90 E5 85 F1 | 	sub	objptr, ##43408
02534     18 10 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     90 E5 05 F1 | 	add	objptr, ##43408
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     90 E5 85 F1 | 	sub	objptr, ##43408
0256c     00 05 90 3D |  if_ae	jmp	#LR__0127
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     90 E5 05 F1 | 	add	objptr, ##43408
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     90 E5 85 F1 | 	sub	objptr, ##43408
025a0     CC 0C B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     90 E5 05 F1 | 	add	objptr, ##43408
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     90 E5 85 F1 | 	sub	objptr, ##43408
025d8     94 04 90 3D |  if_ae	jmp	#LR__0127
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     90 E5 05 F1 | 	add	objptr, ##43408
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     90 E5 85 F1 | 	sub	objptr, ##43408
0260c                 | ' 
0260c                 | ' select case s
0260c     52 01 00 FF 
02610     31 14 06 F6 | 	mov	arg02, ##@LR__4504
02614     28 87 B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     90 E5 05 F1 | 	add	objptr, ##43408
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     90 E5 85 F1 | 	sub	objptr, ##43408
02658     14 04 90 3D |  if_ae	jmp	#LR__0127
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     90 E5 05 F1 | 	add	objptr, ##43408
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     90 E5 85 F1 | 	sub	objptr, ##43408
0268c     C0 10 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     90 E5 05 F1 | 	add	objptr, ##43408
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     90 E5 85 F1 | 	sub	objptr, ##43408
026c4     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     90 E5 05 F1 | 	add	objptr, ##43408
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 31 02 F6 | 	mov	local10, local03
026e0     18 37 02 F6 | 	mov	local13, local10
026e4     1B 35 02 F6 | 	mov	local12, local13
026e8     03 34 66 F0 | 	shl	local12, #3
026ec     F2 4A 02 F6 | 	mov	local23, objptr
026f0     F2 34 02 F1 | 	add	local12, objptr
026f4     1A 13 02 FB | 	rdlong	arg01, local12
026f8     54 00 00 FF 
026fc     90 E5 85 F1 | 	sub	objptr, ##43408
02700     6C 1B B0 FD | 	call	#_isfunction
02704     FD FA E1 F8 | 	getbyte	result1, result1, #0
02708     04 2E 06 F1 | 	add	local09, #4
0270c     17 FB 61 FC | 	wrlong	result1, local09
02710                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02710     11 2F 02 F6 | 	mov	local09, local03
02714     03 2E 66 F0 | 	shl	local09, #3
02718     54 00 00 FF 
0271c     90 E5 05 F1 | 	add	objptr, ##43408
02720     F2 2E 02 F1 | 	add	local09, objptr
02724     04 2E 06 F1 | 	add	local09, #4
02728     17 33 02 FB | 	rdlong	local11, local09
0272c     01 32 56 F2 | 	cmps	local11, #1 wc
02730     54 00 00 FF 
02734     90 E5 85 F1 | 	sub	objptr, ##43408
02738     34 03 90 3D |  if_ae	jmp	#LR__0127
0273c     11 27 02 F6 | 	mov	local05, local03
02740     03 26 66 F0 | 	shl	local05, #3
02744     54 00 00 FF 
02748     90 E5 05 F1 | 	add	objptr, ##43408
0274c     F2 26 02 F1 | 	add	local05, objptr
02750     13 13 02 FB | 	rdlong	arg01, local05
02754     54 00 00 FF 
02758     90 E5 85 F1 | 	sub	objptr, ##43408
0275c     44 20 B0 FD | 	call	#_isnum
02760     FD 1E 02 F6 | 	mov	local01, result1
02764     7B 00 00 FF 
02768     80 E4 05 F1 | 	add	objptr, ##63104
0276c     F2 1E 62 FC | 	wrlong	local01, objptr
02770     11 27 02 F6 | 	mov	local05, local03
02774     03 26 66 F0 | 	shl	local05, #3
02778     26 00 00 FF 
0277c     F0 E4 85 F1 | 	sub	objptr, ##19696
02780     F2 26 02 F1 | 	add	local05, objptr
02784     13 13 02 FB | 	rdlong	arg01, local05
02788     54 00 00 FF 
0278c     90 E5 85 F1 | 	sub	objptr, ##43408
02790     E8 22 B0 FD | 	call	#_isint
02794     FD 1E 02 F6 | 	mov	local01, result1
02798     7B 00 00 FF 
0279c     84 E4 05 F1 | 	add	objptr, ##63108
027a0     F2 1E 62 FC | 	wrlong	local01, objptr
027a4     11 27 02 F6 | 	mov	local05, local03
027a8     03 26 66 F0 | 	shl	local05, #3
027ac     26 00 00 FF 
027b0     F4 E4 85 F1 | 	sub	objptr, ##19700
027b4     F2 28 02 F6 | 	mov	local06, objptr
027b8     F2 26 02 F1 | 	add	local05, objptr
027bc     13 13 02 FB | 	rdlong	arg01, local05
027c0     54 00 00 FF 
027c4     90 E5 85 F1 | 	sub	objptr, ##43408
027c8     08 24 B0 FD | 	call	#_isdec
027cc     7B 00 00 FF 
027d0     88 E4 05 F1 | 	add	objptr, ##63112
027d4     F2 FA 61 FC | 	wrlong	result1, objptr
027d8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d8     08 E4 85 F1 | 	sub	objptr, #8
027dc     F2 1E 0A FB | 	rdlong	local01, objptr wz
027e0     7B 00 00 FF 
027e4     80 E4 85 F1 | 	sub	objptr, ##63104
027e8     60 00 90 AD |  if_e	jmp	#LR__0120
027ec     7B 00 00 FF 
027f0     84 E4 05 F1 | 	add	objptr, ##63108
027f4     F2 2E 0A FB | 	rdlong	local09, objptr wz
027f8     7B 00 00 FF 
027fc     84 E4 85 F1 | 	sub	objptr, ##63108
02800     48 00 90 AD |  if_e	jmp	#LR__0120
02804     7B 00 00 FF 
02808     88 E4 05 F1 | 	add	objptr, ##63112
0280c     F2 32 0A FB | 	rdlong	local11, objptr wz
02810     7B 00 00 FF 
02814     88 E4 85 F1 | 	sub	objptr, ##63112
02818     30 00 90 AD |  if_e	jmp	#LR__0120
0281c     11 25 02 F6 | 	mov	local04, local03
02820     12 2F 02 F6 | 	mov	local09, local04
02824     03 2E 66 F0 | 	shl	local09, #3
02828     54 00 00 FF 
0282c     90 E5 05 F1 | 	add	objptr, ##43408
02830     F2 2E 02 F1 | 	add	local09, objptr
02834     04 2E 06 F1 | 	add	local09, #4
02838     01 00 80 FF 
0283c     17 01 68 FC | 	wrlong	##512, local09
02840     54 00 00 FF 
02844     90 E5 85 F1 | 	sub	objptr, ##43408
02848     24 02 90 FD | 	jmp	#LR__0127
0284c                 | LR__0120
0284c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
0284c     7B 00 00 FF 
02850     80 E4 05 F1 | 	add	objptr, ##63104
02854     F2 1E 0A FB | 	rdlong	local01, objptr wz
02858     7B 00 00 FF 
0285c     80 E4 85 F1 | 	sub	objptr, ##63104
02860     64 00 90 AD |  if_e	jmp	#LR__0121
02864     7B 00 00 FF 
02868     84 E4 05 F1 | 	add	objptr, ##63108
0286c     F2 2E 0A FB | 	rdlong	local09, objptr wz
02870     7B 00 00 FF 
02874     84 E4 85 F1 | 	sub	objptr, ##63108
02878     7B 00 00 5F 
0287c     88 E4 05 51 |  if_ne	add	objptr, ##63112
02880     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02884     7B 00 00 5F 
02888     88 E4 85 51 |  if_ne	sub	objptr, ##63112
0288c     19 29 22 56 |  if_ne	not	local06, local11
02890     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02894     30 00 90 AD |  if_e	jmp	#LR__0121
02898     11 25 02 F6 | 	mov	local04, local03
0289c     12 2F 02 F6 | 	mov	local09, local04
028a0     03 2E 66 F0 | 	shl	local09, #3
028a4     54 00 00 FF 
028a8     90 E5 05 F1 | 	add	objptr, ##43408
028ac     F2 2E 02 F1 | 	add	local09, objptr
028b0     04 2E 06 F1 | 	add	local09, #4
028b4     01 00 80 FF 
028b8     17 03 68 FC | 	wrlong	##513, local09
028bc     54 00 00 FF 
028c0     90 E5 85 F1 | 	sub	objptr, ##43408
028c4     A8 01 90 FD | 	jmp	#LR__0127
028c8                 | LR__0121
028c8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c8     7B 00 00 FF 
028cc     80 E4 05 F1 | 	add	objptr, ##63104
028d0     F2 1E 0A FB | 	rdlong	local01, objptr wz
028d4     7B 00 00 FF 
028d8     80 E4 85 F1 | 	sub	objptr, ##63104
028dc     7B 00 00 5F 
028e0     84 E4 05 51 |  if_ne	add	objptr, ##63108
028e4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
028e8     7B 00 00 5F 
028ec     84 E4 85 51 |  if_ne	sub	objptr, ##63108
028f0     17 2F 22 56 |  if_ne	not	local09, local09
028f4     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
028f8     7B 00 00 5F 
028fc     88 E4 05 51 |  if_ne	add	objptr, ##63112
02900     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02904     7B 00 00 5F 
02908     88 E4 85 51 |  if_ne	sub	objptr, ##63112
0290c     19 29 22 56 |  if_ne	not	local06, local11
02910     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02914     30 00 90 AD |  if_e	jmp	#LR__0122
02918     11 25 02 F6 | 	mov	local04, local03
0291c     12 2F 02 F6 | 	mov	local09, local04
02920     03 2E 66 F0 | 	shl	local09, #3
02924     54 00 00 FF 
02928     90 E5 05 F1 | 	add	objptr, ##43408
0292c     F2 2E 02 F1 | 	add	local09, objptr
02930     04 2E 06 F1 | 	add	local09, #4
02934     01 00 80 FF 
02938     17 05 68 FC | 	wrlong	##514, local09
0293c     54 00 00 FF 
02940     90 E5 85 F1 | 	sub	objptr, ##43408
02944     28 01 90 FD | 	jmp	#LR__0127
02948                 | LR__0122
02948                 | ' 
02948                 | ' if isstring(lparts(i).part$) then 
02948     11 27 02 F6 | 	mov	local05, local03
0294c     03 26 66 F0 | 	shl	local05, #3
02950     54 00 00 FF 
02954     90 E5 05 F1 | 	add	objptr, ##43408
02958     F2 26 02 F1 | 	add	local05, objptr
0295c     13 13 02 FB | 	rdlong	arg01, local05
02960     54 00 00 FF 
02964     90 E5 85 F1 | 	sub	objptr, ##43408
02968     28 23 B0 FD | 	call	#_isstring
0296c     00 FA 0D F2 | 	cmp	result1, #0 wz
02970     A0 00 90 AD |  if_e	jmp	#LR__0125
02974     11 2F 02 F6 | 	mov	local09, local03
02978     03 2E 66 F0 | 	shl	local09, #3
0297c     54 00 00 FF 
02980     90 E5 05 F1 | 	add	objptr, ##43408
02984     F2 2E 02 F1 | 	add	local09, objptr
02988     04 2E 06 F1 | 	add	local09, #4
0298c     01 00 80 FF 
02990     17 07 68 FC | 	wrlong	##515, local09
02994     11 25 02 F6 | 	mov	local04, local03
02998     12 2F 02 F6 | 	mov	local09, local04
0299c     03 2E 66 F0 | 	shl	local09, #3
029a0     F2 2E 02 F1 | 	add	local09, objptr
029a4     11 37 02 F6 | 	mov	local13, local03
029a8     03 36 66 F0 | 	shl	local13, #3
029ac     F2 36 02 F1 | 	add	local13, objptr
029b0     1B 29 02 FB | 	rdlong	local06, local13
029b4     02 32 06 F6 | 	mov	local11, #2
029b8     11 4B 02 F6 | 	mov	local23, local03
029bc     25 43 02 F6 | 	mov	local19, local23
029c0     21 45 02 F6 | 	mov	local20, local19
029c4     03 44 66 F0 | 	shl	local20, #3
029c8     F2 46 02 F6 | 	mov	local21, objptr
029cc     F2 44 02 F1 | 	add	local20, objptr
029d0     22 13 02 FB | 	rdlong	arg01, local20
029d4     54 00 00 FF 
029d8     90 E5 85 F1 | 	sub	objptr, ##43408
029dc     09 2B 02 F6 | 	mov	local07, arg01
029e0     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029e4                 | LR__0123
029e4     15 FB C9 FA | 	rdbyte	result1, local07 wz
029e8     01 2A 06 51 |  if_ne	add	local07, #1
029ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029f0                 | LR__0124
029f0     09 2B 82 F1 | 	sub	local07, arg01
029f4     15 35 02 F6 | 	mov	local12, local07
029f8     1A 17 02 F6 | 	mov	arg03, local12
029fc     02 16 86 F1 | 	sub	arg03, #2
02a00     14 13 02 F6 | 	mov	arg01, local06
02a04     19 15 02 F6 | 	mov	arg02, local11
02a08     6C A4 B1 FD | 	call	#__system__Mid_S
02a0c     17 FB 61 FC | 	wrlong	result1, local09
02a10     5C 00 90 FD | 	jmp	#LR__0127
02a14                 | LR__0125
02a14                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a14     11 25 02 F6 | 	mov	local04, local03
02a18     12 27 02 F6 | 	mov	local05, local04
02a1c     03 26 66 F0 | 	shl	local05, #3
02a20     54 00 00 FF 
02a24     90 E5 05 F1 | 	add	objptr, ##43408
02a28     F2 26 02 F1 | 	add	local05, objptr
02a2c     13 13 02 FB | 	rdlong	arg01, local05
02a30     54 00 00 FF 
02a34     90 E5 85 F1 | 	sub	objptr, ##43408
02a38     F4 1A B0 FD | 	call	#_isname
02a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02a40     2C 00 90 AD |  if_e	jmp	#LR__0126
02a44     11 25 02 F6 | 	mov	local04, local03
02a48     12 2F 02 F6 | 	mov	local09, local04
02a4c     03 2E 66 F0 | 	shl	local09, #3
02a50     54 00 00 FF 
02a54     90 E5 05 F1 | 	add	objptr, ##43408
02a58     F2 2E 02 F1 | 	add	local09, objptr
02a5c     04 2E 06 F1 | 	add	local09, #4
02a60     01 00 80 FF 
02a64     17 09 68 FC | 	wrlong	##516, local09
02a68     54 00 00 FF 
02a6c     90 E5 85 F1 | 	sub	objptr, ##43408
02a70                 | LR__0126
02a70                 | LR__0127
02a70     01 22 06 F1 | 	add	local03, #1
02a74     84 FA 9F FD | 	jmp	#LR__0119
02a78                 | LR__0128
02a78     1D 2F 02 F6 | 	mov	local09, local15
02a7c     03 2E 66 F0 | 	shl	local09, #3
02a80     54 00 00 FF 
02a84     90 E5 05 F1 | 	add	objptr, ##43408
02a88     F2 2E 02 F1 | 	add	local09, objptr
02a8c     04 2E 06 F1 | 	add	local09, #4
02a90     17 FD 6B FC | 	wrlong	#510, local09
02a94     1D 2F 02 F6 | 	mov	local09, local15
02a98     03 2E 66 F0 | 	shl	local09, #3
02a9c     F2 26 02 F6 | 	mov	local05, objptr
02aa0     F2 2E 02 F1 | 	add	local09, objptr
02aa4     51 01 00 FF 
02aa8     7D 29 06 F6 | 	mov	local06, ##@LR__4452
02aac     17 29 62 FC | 	wrlong	local06, local09
02ab0     10 00 00 FF 
02ab4     54 E4 05 F1 | 	add	objptr, ##8276
02ab8     F2 3A 62 FC | 	wrlong	local15, objptr
02abc                 | ' 
02abc                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02abc                 | ' 
02abc                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02abc                 | '  
02abc                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02abc     16 00 00 FF 
02ac0     94 E4 05 F1 | 	add	objptr, ##11412
02ac4     F2 12 02 FB | 	rdlong	arg01, objptr
02ac8     7B 00 00 FF 
02acc     78 E4 85 F1 | 	sub	objptr, ##63096
02ad0     51 01 00 FF 
02ad4     7E 2F 06 F6 | 	mov	local09, ##@LR__4453
02ad8     17 15 02 F6 | 	mov	arg02, local09
02adc     60 82 B1 FD | 	call	#__system___string_cmp
02ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae4     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae8     7B 00 00 FF 
02aec     78 E4 05 F1 | 	add	objptr, ##63096
02af0     F2 12 02 FB | 	rdlong	arg01, objptr
02af4     7B 00 00 FF 
02af8     78 E4 85 F1 | 	sub	objptr, ##63096
02afc     51 01 00 FF 
02b00     83 27 06 F6 | 	mov	local05, ##@LR__4454
02b04     13 2F 02 F6 | 	mov	local09, local05
02b08     17 15 02 F6 | 	mov	arg02, local09
02b0c     30 82 B1 FD | 	call	#__system___string_cmp
02b10     00 FA 0D F2 | 	cmp	result1, #0 wz
02b14     BC 00 90 AD |  if_e	jmp	#LR__0129
02b18     7B 00 00 FF 
02b1c     78 E4 05 F1 | 	add	objptr, ##63096
02b20     F2 12 02 FB | 	rdlong	arg01, objptr
02b24     7B 00 00 FF 
02b28     78 E4 85 F1 | 	sub	objptr, ##63096
02b2c     51 01 00 FF 
02b30     88 29 06 F6 | 	mov	local06, ##@LR__4455
02b34     14 27 02 F6 | 	mov	local05, local06
02b38     13 15 02 F6 | 	mov	arg02, local05
02b3c     00 82 B1 FD | 	call	#__system___string_cmp
02b40     FD 2E 0A F6 | 	mov	local09, result1 wz
02b44     8C 00 90 AD |  if_e	jmp	#LR__0129
02b48     7B 00 00 FF 
02b4c     78 E4 05 F1 | 	add	objptr, ##63096
02b50     F2 12 02 FB | 	rdlong	arg01, objptr
02b54     7B 00 00 FF 
02b58     78 E4 85 F1 | 	sub	objptr, ##63096
02b5c     51 01 00 FF 
02b60     8D 33 06 F6 | 	mov	local11, ##@LR__4456
02b64     19 29 02 F6 | 	mov	local06, local11
02b68     14 15 02 F6 | 	mov	arg02, local06
02b6c     D0 81 B1 FD | 	call	#__system___string_cmp
02b70     FD 26 0A F6 | 	mov	local05, result1 wz
02b74     5C 00 90 AD |  if_e	jmp	#LR__0129
02b78     7B 00 00 FF 
02b7c     78 E4 05 F1 | 	add	objptr, ##63096
02b80     F2 12 02 FB | 	rdlong	arg01, objptr
02b84     7B 00 00 FF 
02b88     78 E4 85 F1 | 	sub	objptr, ##63096
02b8c     51 01 00 FF 
02b90     91 33 06 F6 | 	mov	local11, ##@LR__4457
02b94     19 15 02 F6 | 	mov	arg02, local11
02b98     A4 81 B1 FD | 	call	#__system___string_cmp
02b9c     FD 28 0A F6 | 	mov	local06, result1 wz
02ba0     30 00 90 AD |  if_e	jmp	#LR__0129
02ba4     7B 00 00 FF 
02ba8     78 E4 05 F1 | 	add	objptr, ##63096
02bac     F2 12 02 FB | 	rdlong	arg01, objptr
02bb0     7B 00 00 FF 
02bb4     78 E4 85 F1 | 	sub	objptr, ##63096
02bb8     51 01 00 FF 
02bbc     94 37 06 F6 | 	mov	local13, ##@LR__4458
02bc0     1B 31 02 F6 | 	mov	local10, local13
02bc4     18 15 02 F6 | 	mov	arg02, local10
02bc8     74 81 B1 FD | 	call	#__system___string_cmp
02bcc     FD 32 0A F6 | 	mov	local11, result1 wz
02bd0     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bd4                 | LR__0129
02bd4     7B 00 00 FF 
02bd8     74 E4 05 F1 | 	add	objptr, ##63092
02bdc     F2 36 02 FB | 	rdlong	local13, objptr
02be0     1B 31 02 F6 | 	mov	local10, local13
02be4     01 30 06 F1 | 	add	local10, #1
02be8     18 35 02 F6 | 	mov	local12, local10
02bec     1A 4B 02 F6 | 	mov	local23, local12
02bf0     03 4A 66 F0 | 	shl	local23, #3
02bf4     26 00 00 FF 
02bf8     E4 E4 85 F1 | 	sub	objptr, ##19684
02bfc     F2 42 02 F6 | 	mov	local19, objptr
02c00     F2 4A 02 F1 | 	add	local23, objptr
02c04     04 4A 06 F1 | 	add	local23, #4
02c08     25 47 02 FB | 	rdlong	local21, local23
02c0c     04 4A 86 F1 | 	sub	local23, #4
02c10     23 45 02 F6 | 	mov	local20, local21
02c14     01 00 00 FF 
02c18     04 44 0E F2 | 	cmp	local20, ##516 wz
02c1c     54 00 00 FF 
02c20     90 E5 85 F1 | 	sub	objptr, ##43408
02c24     48 00 90 5D |  if_ne	jmp	#LR__0130
02c28     7B 00 00 FF 
02c2c     74 E4 05 F1 | 	add	objptr, ##63092
02c30     F2 2E 02 FB | 	rdlong	local09, objptr
02c34     01 2E 06 F1 | 	add	local09, #1
02c38     17 27 02 F6 | 	mov	local05, local09
02c3c     03 26 66 F0 | 	shl	local05, #3
02c40     26 00 00 FF 
02c44     E4 E4 85 F1 | 	sub	objptr, ##19684
02c48     F2 28 02 F6 | 	mov	local06, objptr
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     01 00 00 FF 
02c54     03 32 06 F6 | 	mov	local11, ##515
02c58     04 26 06 F1 | 	add	local05, #4
02c5c     01 00 80 FF 
02c60     13 07 68 FC | 	wrlong	##515, local05
02c64     04 26 86 F1 | 	sub	local05, #4
02c68     54 00 00 FF 
02c6c     90 E5 85 F1 | 	sub	objptr, ##43408
02c70                 | LR__0130
02c70                 | ' 
02c70                 | ' ' abbreviated command has to be at the position addptr
02c70                 | ' 
02c70                 | ' 
02c70                 | ' 
02c70                 | ' '2b determine a type of the line
02c70                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c70     54 00 00 FF 
02c74     90 E5 05 F1 | 	add	objptr, ##43408
02c78     F2 12 02 FB | 	rdlong	arg01, objptr
02c7c     54 00 00 FF 
02c80     90 E5 85 F1 | 	sub	objptr, ##43408
02c84     4C 1F B0 FD | 	call	#_isdec
02c88     00 FA 0D F2 | 	cmp	result1, #0 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0131
02c90     54 00 00 FF 
02c94     90 E5 05 F1 | 	add	objptr, ##43408
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     54 00 00 FF 
02ca0     90 E5 85 F1 | 	sub	objptr, ##43408
02ca4     00 14 06 F6 | 	mov	arg02, #0
02ca8     08 B2 B1 FD | 	call	#__system____builtin_atoi
02cac     7B 00 00 FF 
02cb0     14 E4 05 F1 | 	add	objptr, ##62996
02cb4     F2 FA 61 FC | 	wrlong	result1, objptr
02cb8     7B 00 00 FF 
02cbc     14 E4 85 F1 | 	sub	objptr, ##62996
02cc0                 | LR__0131
02cc0                 | ' 
02cc0                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02cc0     7B 00 00 FF 
02cc4     14 E4 05 F1 | 	add	objptr, ##62996
02cc8     F2 1E 02 FB | 	rdlong	local01, objptr
02ccc     7B 00 00 FF 
02cd0     14 E4 85 F1 | 	sub	objptr, ##62996
02cd4     01 1E 16 F2 | 	cmp	local01, #1 wc
02cd8     3C 00 90 CD |  if_b	jmp	#LR__0132
02cdc     01 3A 0E F2 | 	cmp	local15, #1 wz
02ce0     56 00 00 AF 
02ce4     A8 E5 05 A1 |  if_e	add	objptr, ##44456
02ce8     F2 26 02 AB |  if_e	rdlong	local05, objptr
02cec     56 00 00 AF 
02cf0     A8 E5 85 A1 |  if_e	sub	objptr, ##44456
02cf4     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02cf8     1C 00 90 5D |  if_ne	jmp	#LR__0132
02cfc     7B 00 00 FF 
02d00     14 E4 05 F1 | 	add	objptr, ##62996
02d04     F2 12 02 FB | 	rdlong	arg01, objptr
02d08     7B 00 00 FF 
02d0c     14 E4 85 F1 | 	sub	objptr, ##62996
02d10     E4 1F B0 FD | 	call	#_deleteline
02d14     4C 05 90 FD | 	jmp	#LR__0149
02d18                 | LR__0132
02d18                 | ' 
02d18                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02d18     7B 00 00 FF 
02d1c     14 E4 05 F1 | 	add	objptr, ##62996
02d20     F2 1E 02 FB | 	rdlong	local01, objptr
02d24     7B 00 00 FF 
02d28     14 E4 85 F1 | 	sub	objptr, ##62996
02d2c     01 1E 16 F2 | 	cmp	local01, #1 wc
02d30     EC 00 90 CD |  if_b	jmp	#LR__0135
02d34     56 00 00 FF 
02d38     A8 E5 05 F1 | 	add	objptr, ##44456
02d3c     F2 26 02 FB | 	rdlong	local05, objptr
02d40     56 00 00 FF 
02d44     A8 E5 85 F1 | 	sub	objptr, ##44456
02d48     13 2F 0A F6 | 	mov	local09, local05 wz
02d4c     20 00 90 AD |  if_e	jmp	#LR__0133
02d50     56 00 00 FF 
02d54     A8 E5 05 F1 | 	add	objptr, ##44456
02d58     F2 32 02 FB | 	rdlong	local11, objptr
02d5c     56 00 00 FF 
02d60     A8 E5 85 F1 | 	sub	objptr, ##44456
02d64     19 29 02 F6 | 	mov	local06, local11
02d68     03 28 0E F2 | 	cmp	local06, #3 wz
02d6c     B0 00 90 5D |  if_ne	jmp	#LR__0135
02d70                 | LR__0133
02d70     54 00 00 FF 
02d74     A4 E5 05 F1 | 	add	objptr, ##43428
02d78     F2 36 02 FB | 	rdlong	local13, objptr
02d7c     54 00 00 FF 
02d80     A4 E5 85 F1 | 	sub	objptr, ##43428
02d84     1B 31 02 F6 | 	mov	local10, local13
02d88     1B 30 0E F2 | 	cmp	local10, #27 wz
02d8c     90 00 90 AD |  if_e	jmp	#LR__0135
02d90     7B 00 00 FF 
02d94     14 E4 05 F1 | 	add	objptr, ##62996
02d98     F2 12 02 FB | 	rdlong	arg01, objptr
02d9c     24 00 00 FF 
02da0     6C E4 85 F1 | 	sub	objptr, ##18540
02da4     F2 16 02 FB | 	rdlong	arg03, objptr
02da8     56 00 00 FF 
02dac     A8 E5 85 F1 | 	sub	objptr, ##44456
02db0     00 14 06 F6 | 	mov	arg02, #0
02db4     3C 33 B0 FD | 	call	#_compile
02db8     FD 20 0A F6 | 	mov	local02, result1 wz
02dbc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02dbc                 | '   if err<>0 then printerror(err): goto 104
02dbc     0C 00 90 AD |  if_e	jmp	#LR__0134
02dc0     10 13 02 F6 | 	mov	arg01, local02
02dc4     40 49 B1 FD | 	call	#_printerror
02dc8     98 04 90 FD | 	jmp	#LR__0149
02dcc                 | LR__0134
02dcc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02dcc     7B 00 00 FF 
02dd0     50 E4 05 F1 | 	add	objptr, ##63056
02dd4     F2 12 02 FB | 	rdlong	arg01, objptr
02dd8     7B 00 00 FF 
02ddc     50 E4 85 F1 | 	sub	objptr, ##63056
02de0     51 01 00 FF 
02de4     98 15 06 F6 | 	mov	arg02, ##@LR__4459
02de8     54 7F B1 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     70 04 90 AD |  if_e	jmp	#LR__0149
02df4     7B 00 00 FF 
02df8     50 E4 05 F1 | 	add	objptr, ##63056
02dfc     F2 1E 02 FB | 	rdlong	local01, objptr
02e00     24 00 00 FF 
02e04     B0 E4 85 F1 | 	sub	objptr, ##18608
02e08     F2 1E 62 FC | 	wrlong	local01, objptr
02e0c     08 E4 05 F1 | 	add	objptr, #8
02e10     F2 08 68 FC | 	wrlong	#4, objptr
02e14     56 00 00 FF 
02e18     A8 E5 85 F1 | 	sub	objptr, ##44456
02e1c     50 DC 9F FD | 	jmp	#LR__0020
02e20                 | LR__0135
02e20                 | '       							
02e20                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02e20     7B 00 00 FF 
02e24     14 E4 05 F1 | 	add	objptr, ##62996
02e28     F2 1E 02 FB | 	rdlong	local01, objptr
02e2c     7B 00 00 FF 
02e30     14 E4 85 F1 | 	sub	objptr, ##62996
02e34     01 1E 16 F2 | 	cmp	local01, #1 wc
02e38     EC 00 90 CD |  if_b	jmp	#LR__0138
02e3c     56 00 00 FF 
02e40     A8 E5 05 F1 | 	add	objptr, ##44456
02e44     F2 26 02 FB | 	rdlong	local05, objptr
02e48     56 00 00 FF 
02e4c     A8 E5 85 F1 | 	sub	objptr, ##44456
02e50     01 26 0E F2 | 	cmp	local05, #1 wz
02e54     20 00 90 AD |  if_e	jmp	#LR__0136
02e58     56 00 00 FF 
02e5c     A8 E5 05 F1 | 	add	objptr, ##44456
02e60     F2 32 02 FB | 	rdlong	local11, objptr
02e64     56 00 00 FF 
02e68     A8 E5 85 F1 | 	sub	objptr, ##44456
02e6c     19 29 02 F6 | 	mov	local06, local11
02e70     02 28 0E F2 | 	cmp	local06, #2 wz
02e74     B0 00 90 5D |  if_ne	jmp	#LR__0138
02e78                 | LR__0136
02e78     54 00 00 FF 
02e7c     9C E5 05 F1 | 	add	objptr, ##43420
02e80     F2 36 02 FB | 	rdlong	local13, objptr
02e84     54 00 00 FF 
02e88     9C E5 85 F1 | 	sub	objptr, ##43420
02e8c     1B 31 02 F6 | 	mov	local10, local13
02e90     1B 30 0E F2 | 	cmp	local10, #27 wz
02e94     90 00 90 AD |  if_e	jmp	#LR__0138
02e98     7B 00 00 FF 
02e9c     14 E4 05 F1 | 	add	objptr, ##62996
02ea0     F2 12 02 FB | 	rdlong	arg01, objptr
02ea4     24 00 00 FF 
02ea8     6C E4 85 F1 | 	sub	objptr, ##18540
02eac     F2 16 02 FB | 	rdlong	arg03, objptr
02eb0     56 00 00 FF 
02eb4     A8 E5 85 F1 | 	sub	objptr, ##44456
02eb8     00 14 06 F6 | 	mov	arg02, #0
02ebc     34 32 B0 FD | 	call	#_compile
02ec0     FD 20 0A F6 | 	mov	local02, result1 wz
02ec4                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ec4                 | '   if err<>0 then printerror(err): goto 104
02ec4     0C 00 90 AD |  if_e	jmp	#LR__0137
02ec8     10 13 02 F6 | 	mov	arg01, local02
02ecc     38 48 B1 FD | 	call	#_printerror
02ed0     90 03 90 FD | 	jmp	#LR__0149
02ed4                 | LR__0137
02ed4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02ed4     7B 00 00 FF 
02ed8     50 E4 05 F1 | 	add	objptr, ##63056
02edc     F2 12 02 FB | 	rdlong	arg01, objptr
02ee0     7B 00 00 FF 
02ee4     50 E4 85 F1 | 	sub	objptr, ##63056
02ee8     51 01 00 FF 
02eec     99 15 06 F6 | 	mov	arg02, ##@LR__4460
02ef0     4C 7E B1 FD | 	call	#__system___string_cmp
02ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef8     68 03 90 AD |  if_e	jmp	#LR__0149
02efc     7B 00 00 FF 
02f00     50 E4 05 F1 | 	add	objptr, ##63056
02f04     F2 1E 02 FB | 	rdlong	local01, objptr
02f08     24 00 00 FF 
02f0c     B0 E4 85 F1 | 	sub	objptr, ##18608
02f10     F2 1E 62 FC | 	wrlong	local01, objptr
02f14     08 E4 05 F1 | 	add	objptr, #8
02f18     F2 08 68 FC | 	wrlong	#4, objptr
02f1c     56 00 00 FF 
02f20     A8 E5 85 F1 | 	sub	objptr, ##44456
02f24     48 DB 9F FD | 	jmp	#LR__0020
02f28                 | LR__0138
02f28                 | ' 							 
02f28                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02f28     7B 00 00 FF 
02f2c     14 E4 05 F1 | 	add	objptr, ##62996
02f30     F2 1E 02 FB | 	rdlong	local01, objptr
02f34     7B 00 00 FF 
02f38     14 E4 85 F1 | 	sub	objptr, ##62996
02f3c     01 1E 16 F2 | 	cmp	local01, #1 wc
02f40     D4 00 90 CD |  if_b	jmp	#LR__0140
02f44     56 00 00 FF 
02f48     A8 E5 05 F1 | 	add	objptr, ##44456
02f4c     F2 26 0A FB | 	rdlong	local05, objptr wz
02f50     56 00 00 FF 
02f54     A8 E5 85 F1 | 	sub	objptr, ##44456
02f58     20 00 90 AD |  if_e	jmp	#LR__0139
02f5c     56 00 00 FF 
02f60     A8 E5 05 F1 | 	add	objptr, ##44456
02f64     F2 32 02 FB | 	rdlong	local11, objptr
02f68     56 00 00 FF 
02f6c     A8 E5 85 F1 | 	sub	objptr, ##44456
02f70     19 29 02 F6 | 	mov	local06, local11
02f74     03 28 0E F2 | 	cmp	local06, #3 wz
02f78     9C 00 90 5D |  if_ne	jmp	#LR__0140
02f7c                 | LR__0139
02f7c     54 00 00 FF 
02f80     A4 E5 05 F1 | 	add	objptr, ##43428
02f84     F2 36 02 FB | 	rdlong	local13, objptr
02f88     54 00 00 FF 
02f8c     A4 E5 85 F1 | 	sub	objptr, ##43428
02f90     1B 31 02 F6 | 	mov	local10, local13
02f94     1B 30 0E F2 | 	cmp	local10, #27 wz
02f98     7C 00 90 5D |  if_ne	jmp	#LR__0140
02f9c     7B 00 00 FF 
02fa0     14 E4 05 F1 | 	add	objptr, ##62996
02fa4     F2 12 02 FB | 	rdlong	arg01, objptr
02fa8     24 00 00 FF 
02fac     6C E4 85 F1 | 	sub	objptr, ##18540
02fb0     F2 16 02 FB | 	rdlong	arg03, objptr
02fb4     56 00 00 FF 
02fb8     A8 E5 85 F1 | 	sub	objptr, ##44456
02fbc     00 14 06 F6 | 	mov	arg02, #0
02fc0     00 32 B0 FD | 	call	#_compile_assign
02fc4                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02fc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02fc4     7B 00 00 FF 
02fc8     50 E4 05 F1 | 	add	objptr, ##63056
02fcc     F2 12 02 FB | 	rdlong	arg01, objptr
02fd0     7B 00 00 FF 
02fd4     50 E4 85 F1 | 	sub	objptr, ##63056
02fd8     51 01 00 FF 
02fdc     9A 15 06 F6 | 	mov	arg02, ##@LR__4461
02fe0     5C 7D B1 FD | 	call	#__system___string_cmp
02fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe8     78 02 90 AD |  if_e	jmp	#LR__0149
02fec     7B 00 00 FF 
02ff0     50 E4 05 F1 | 	add	objptr, ##63056
02ff4     F2 1E 02 FB | 	rdlong	local01, objptr
02ff8     24 00 00 FF 
02ffc     B0 E4 85 F1 | 	sub	objptr, ##18608
03000     F2 1E 62 FC | 	wrlong	local01, objptr
03004     08 E4 05 F1 | 	add	objptr, #8
03008     F2 08 68 FC | 	wrlong	#4, objptr
0300c     56 00 00 FF 
03010     A8 E5 85 F1 | 	sub	objptr, ##44456
03014     58 DA 9F FD | 	jmp	#LR__0020
03018                 | LR__0140
03018                 | '     							 
03018                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03018     7B 00 00 FF 
0301c     14 E4 05 F1 | 	add	objptr, ##62996
03020     F2 1E 02 FB | 	rdlong	local01, objptr
03024     7B 00 00 FF 
03028     14 E4 85 F1 | 	sub	objptr, ##62996
0302c     01 1E 16 F2 | 	cmp	local01, #1 wc
03030     CC 00 90 CD |  if_b	jmp	#LR__0141
03034     56 00 00 FF 
03038     A8 E5 05 F1 | 	add	objptr, ##44456
0303c     F2 26 02 FB | 	rdlong	local05, objptr
03040     56 00 00 FF 
03044     A8 E5 85 F1 | 	sub	objptr, ##44456
03048     01 26 0E F2 | 	cmp	local05, #1 wz
0304c     56 00 00 5F 
03050     A8 E5 05 51 |  if_ne	add	objptr, ##44456
03054     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03058     56 00 00 5F 
0305c     A8 E5 85 51 |  if_ne	sub	objptr, ##44456
03060     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03064     54 00 00 AF 
03068     9C E5 05 A1 |  if_e	add	objptr, ##43420
0306c     F2 36 02 AB |  if_e	rdlong	local13, objptr
03070     54 00 00 AF 
03074     9C E5 85 A1 |  if_e	sub	objptr, ##43420
03078     1B 31 02 A6 |  if_e	mov	local10, local13
0307c     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03080     7C 00 90 5D |  if_ne	jmp	#LR__0141
03084     7B 00 00 FF 
03088     14 E4 05 F1 | 	add	objptr, ##62996
0308c     F2 12 02 FB | 	rdlong	arg01, objptr
03090     24 00 00 FF 
03094     6C E4 85 F1 | 	sub	objptr, ##18540
03098     F2 16 02 FB | 	rdlong	arg03, objptr
0309c     56 00 00 FF 
030a0     A8 E5 85 F1 | 	sub	objptr, ##44456
030a4     00 14 06 F6 | 	mov	arg02, #0
030a8     18 31 B0 FD | 	call	#_compile_assign
030ac                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
030ac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
030ac     7B 00 00 FF 
030b0     50 E4 05 F1 | 	add	objptr, ##63056
030b4     F2 12 02 FB | 	rdlong	arg01, objptr
030b8     7B 00 00 FF 
030bc     50 E4 85 F1 | 	sub	objptr, ##63056
030c0     51 01 00 FF 
030c4     9B 15 06 F6 | 	mov	arg02, ##@LR__4462
030c8     74 7C B1 FD | 	call	#__system___string_cmp
030cc     00 FA 0D F2 | 	cmp	result1, #0 wz
030d0     90 01 90 AD |  if_e	jmp	#LR__0149
030d4     7B 00 00 FF 
030d8     50 E4 05 F1 | 	add	objptr, ##63056
030dc     F2 1E 02 FB | 	rdlong	local01, objptr
030e0     24 00 00 FF 
030e4     B0 E4 85 F1 | 	sub	objptr, ##18608
030e8     F2 1E 62 FC | 	wrlong	local01, objptr
030ec     08 E4 05 F1 | 	add	objptr, #8
030f0     F2 08 68 FC | 	wrlong	#4, objptr
030f4     56 00 00 FF 
030f8     A8 E5 85 F1 | 	sub	objptr, ##44456
030fc     70 D9 9F FD | 	jmp	#LR__0020
03100                 | LR__0141
03100                 | ' 
03100                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03100     54 00 00 FF 
03104     94 E5 05 F1 | 	add	objptr, ##43412
03108     F2 1E 02 FB | 	rdlong	local01, objptr
0310c     54 00 00 FF 
03110     94 E5 85 F1 | 	sub	objptr, ##43412
03114     01 00 00 FF 
03118     04 1E 0E F2 | 	cmp	local01, ##516 wz
0311c     54 00 00 AF 
03120     9C E5 05 A1 |  if_e	add	objptr, ##43420
03124     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03128     54 00 00 AF 
0312c     9C E5 85 A1 |  if_e	sub	objptr, ##43420
03130     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03134     14 00 90 5D |  if_ne	jmp	#LR__0142
03138     00 12 06 F6 | 	mov	arg01, #0
0313c     00 14 06 F6 | 	mov	arg02, #0
03140     00 16 06 F6 | 	mov	arg03, #0
03144     7C 30 B0 FD | 	call	#_compile_assign
03148     90 00 90 FD | 	jmp	#LR__0144
0314c                 | LR__0142
0314c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0314c     54 00 00 FF 
03150     94 E5 05 F1 | 	add	objptr, ##43412
03154     F2 1E 02 FB | 	rdlong	local01, objptr
03158     54 00 00 FF 
0315c     94 E5 85 F1 | 	sub	objptr, ##43412
03160     01 00 00 FF 
03164     04 1E 0E F2 | 	cmp	local01, ##516 wz
03168     54 00 00 AF 
0316c     9C E5 05 A1 |  if_e	add	objptr, ##43420
03170     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03174     54 00 00 AF 
03178     9C E5 85 A1 |  if_e	sub	objptr, ##43420
0317c     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
03180     44 00 90 5D |  if_ne	jmp	#LR__0143
03184     00 12 06 F6 | 	mov	arg01, #0
03188     C0 D4 B1 FD | 	call	#__system___getiolock_0442
0318c     FD 12 02 F6 | 	mov	arg01, result1
03190     84 7B B1 FD | 	call	#__system___lockmem
03194     51 01 00 FF 
03198     9C 15 06 F6 | 	mov	arg02, ##@LR__4463
0319c     00 12 06 F6 | 	mov	arg01, #0
031a0     00 16 06 F6 | 	mov	arg03, #0
031a4     78 88 B1 FD | 	call	#__system___basic_print_string
031a8     00 12 06 F6 | 	mov	arg01, #0
031ac     0A 14 06 F6 | 	mov	arg02, #10
031b0     00 16 06 F6 | 	mov	arg03, #0
031b4     10 88 B1 FD | 	call	#__system___basic_print_char
031b8     00 12 06 F6 | 	mov	arg01, #0
031bc     8C D4 B1 FD | 	call	#__system___getiolock_0442
031c0     FD 00 68 FC | 	wrlong	#0, result1
031c4     7C 00 90 FD | 	jmp	#LR__0148
031c8                 | LR__0143
031c8     00 12 06 F6 | 	mov	arg01, #0
031cc     00 14 06 F6 | 	mov	arg02, #0
031d0     00 16 06 F6 | 	mov	arg03, #0
031d4     1C 2F B0 FD | 	call	#_compile
031d8     FD 20 02 F6 | 	mov	local02, result1
031dc                 | LR__0144
031dc                 | ' 
031dc                 | ' ' if we are here, this is not a program line to add, so try to execute this
031dc                 | ' 
031dc                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
031dc                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
031dc                 | ' if err=0 then execute_line() else printerror(err)
031dc     00 20 0E F2 | 	cmp	local02, #0 wz
031e0     0C 00 90 5D |  if_ne	jmp	#LR__0145
031e4     00 12 06 F6 | 	mov	arg01, #0
031e8     08 68 B0 FD | 	call	#_execute_line
031ec     08 00 90 FD | 	jmp	#LR__0146
031f0                 | LR__0145
031f0     10 13 02 F6 | 	mov	arg01, local02
031f4     10 45 B1 FD | 	call	#_printerror
031f8                 | LR__0146
031f8                 | ' if rest$<>"" then line$=rest$:  goto 108 
031f8     7B 00 00 FF 
031fc     50 E4 05 F1 | 	add	objptr, ##63056
03200     F2 12 02 FB | 	rdlong	arg01, objptr
03204     7B 00 00 FF 
03208     50 E4 85 F1 | 	sub	objptr, ##63056
0320c     51 01 00 FF 
03210     CB 15 06 F6 | 	mov	arg02, ##@LR__4464
03214     28 7B B1 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     24 00 90 AD |  if_e	jmp	#LR__0147
03220     7B 00 00 FF 
03224     50 E4 05 F1 | 	add	objptr, ##63056
03228     F2 1E 02 FB | 	rdlong	local01, objptr
0322c     24 00 00 FF 
03230     B0 E4 85 F1 | 	sub	objptr, ##18608
03234     F2 1E 62 FC | 	wrlong	local01, objptr
03238     56 00 00 FF 
0323c     A0 E5 85 F1 | 	sub	objptr, ##44448
03240     2C D8 9F FD | 	jmp	#LR__0020
03244                 | LR__0147
03244                 | LR__0148
03244     51 01 00 FF 
03248     CC 13 06 F6 | 	mov	arg01, ##@LR__4465
0324c                 | ' 
0324c                 | ' write(text)
0324c     28 6A B1 FD | 	call	#_hg010b_spin2_write
03250                 | ' crlf
03250     84 6B B1 FD | 	call	#_hg010b_spin2_crlf
03254     51 01 00 FF 
03258     CD 13 06 F6 | 	mov	arg01, ##@LR__4466
0325c                 | ' 
0325c                 | ' write(text)
0325c     18 6A B1 FD | 	call	#_hg010b_spin2_write
03260                 | ' crlf
03260     74 6B B1 FD | 	call	#_hg010b_spin2_crlf
03264                 | LR__0149
03264     A7 F0 03 F6 | 	mov	ptra, fp
03268     B2 00 A0 FD | 	call	#popregs_
0326c                 | _interpret_ret
0326c     2D 00 64 FD | 	ret
03270                 | 
03270                 | ' 
03270                 | ' 
03270                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
03270                 | ' 
03270                 | ' function isoperator(s as string) as ubyte
03270                 | _isoperator
03270     01 4A 05 F6 | 	mov	COUNT_, #1
03274     A8 00 A0 FD | 	call	#pushregs_
03278                 | ' 
03278                 | ' select case s
03278     09 1F 02 F6 | 	mov	local01, arg01
0327c     51 01 00 FF 
03280     D3 15 06 F6 | 	mov	arg02, ##@LR__4467
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     B4 7A B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     FC 01 90 AD |  if_e	jmp	#LR__0150
03294     51 01 00 FF 
03298     D5 15 06 F6 | 	mov	arg02, ##@LR__4468
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     9C 7A B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     EC 01 90 AD |  if_e	jmp	#LR__0151
032ac     51 01 00 FF 
032b0     D7 15 06 F6 | 	mov	arg02, ##@LR__4469
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     84 7A B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     DC 01 90 AD |  if_e	jmp	#LR__0152
032c4     51 01 00 FF 
032c8     DA 15 06 F6 | 	mov	arg02, ##@LR__4470
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     6C 7A B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     CC 01 90 AD |  if_e	jmp	#LR__0153
032dc     51 01 00 FF 
032e0     DE 15 06 F6 | 	mov	arg02, ##@LR__4471
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     54 7A B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     BC 01 90 AD |  if_e	jmp	#LR__0154
032f4     51 01 00 FF 
032f8     E0 15 06 F6 | 	mov	arg02, ##@LR__4472
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     3C 7A B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     AC 01 90 AD |  if_e	jmp	#LR__0155
0330c     51 01 00 FF 
03310     E2 15 06 F6 | 	mov	arg02, ##@LR__4473
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     24 7A B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     9C 01 90 AD |  if_e	jmp	#LR__0156
03324     51 01 00 FF 
03328     E6 15 06 F6 | 	mov	arg02, ##@LR__4474
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     0C 7A B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     8C 01 90 AD |  if_e	jmp	#LR__0157
0333c     51 01 00 FF 
03340     EA 15 06 F6 | 	mov	arg02, ##@LR__4475
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     F4 79 B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     7C 01 90 AD |  if_e	jmp	#LR__0158
03354     51 01 00 FF 
03358     EE 15 06 F6 | 	mov	arg02, ##@LR__4476
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     DC 79 B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     6C 01 90 AD |  if_e	jmp	#LR__0159
0336c     51 01 00 FF 
03370     F2 15 06 F6 | 	mov	arg02, ##@LR__4477
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     C4 79 B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     5C 01 90 AD |  if_e	jmp	#LR__0160
03384     51 01 00 FF 
03388     F6 15 06 F6 | 	mov	arg02, ##@LR__4478
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     AC 79 B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     4C 01 90 AD |  if_e	jmp	#LR__0161
0339c     51 01 00 FF 
033a0     F8 15 06 F6 | 	mov	arg02, ##@LR__4479
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     94 79 B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     3C 01 90 AD |  if_e	jmp	#LR__0162
033b4     51 01 00 FF 
033b8     FC 15 06 F6 | 	mov	arg02, ##@LR__4480
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     7C 79 B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     2C 01 90 AD |  if_e	jmp	#LR__0163
033cc     51 01 00 FF 
033d0     FE 15 06 F6 | 	mov	arg02, ##@LR__4481
033d4     0F 13 02 F6 | 	mov	arg01, local01
033d8     64 79 B1 FD | 	call	#__system___string_cmp
033dc     00 FA 0D F2 | 	cmp	result1, #0 wz
033e0     1C 01 90 AD |  if_e	jmp	#LR__0164
033e4     52 01 00 FF 
033e8     00 14 06 F6 | 	mov	arg02, ##@LR__4482
033ec     0F 13 02 F6 | 	mov	arg01, local01
033f0     4C 79 B1 FD | 	call	#__system___string_cmp
033f4     00 FA 0D F2 | 	cmp	result1, #0 wz
033f8     0C 01 90 AD |  if_e	jmp	#LR__0165
033fc     52 01 00 FF 
03400     03 14 06 F6 | 	mov	arg02, ##@LR__4483
03404     0F 13 02 F6 | 	mov	arg01, local01
03408     34 79 B1 FD | 	call	#__system___string_cmp
0340c     00 FA 0D F2 | 	cmp	result1, #0 wz
03410     FC 00 90 AD |  if_e	jmp	#LR__0166
03414     52 01 00 FF 
03418     06 14 06 F6 | 	mov	arg02, ##@LR__4484
0341c     0F 13 02 F6 | 	mov	arg01, local01
03420     1C 79 B1 FD | 	call	#__system___string_cmp
03424     00 FA 0D F2 | 	cmp	result1, #0 wz
03428     EC 00 90 AD |  if_e	jmp	#LR__0167
0342c     52 01 00 FF 
03430     08 14 06 F6 | 	mov	arg02, ##@LR__4485
03434     0F 13 02 F6 | 	mov	arg01, local01
03438     04 79 B1 FD | 	call	#__system___string_cmp
0343c     00 FA 0D F2 | 	cmp	result1, #0 wz
03440     DC 00 90 AD |  if_e	jmp	#LR__0168
03444     52 01 00 FF 
03448     0A 14 06 F6 | 	mov	arg02, ##@LR__4486
0344c     0F 13 02 F6 | 	mov	arg01, local01
03450     EC 78 B1 FD | 	call	#__system___string_cmp
03454     00 FA 0D F2 | 	cmp	result1, #0 wz
03458     CC 00 90 AD |  if_e	jmp	#LR__0169
0345c     52 01 00 FF 
03460     0D 14 06 F6 | 	mov	arg02, ##@LR__4487
03464     0F 13 02 F6 | 	mov	arg01, local01
03468     D4 78 B1 FD | 	call	#__system___string_cmp
0346c     00 FA 0D F2 | 	cmp	result1, #0 wz
03470     BC 00 90 AD |  if_e	jmp	#LR__0170
03474     52 01 00 FF 
03478     10 14 06 F6 | 	mov	arg02, ##@LR__4488
0347c     0F 13 02 F6 | 	mov	arg01, local01
03480     BC 78 B1 FD | 	call	#__system___string_cmp
03484     00 FA 0D F2 | 	cmp	result1, #0 wz
03488     AC 00 90 AD |  if_e	jmp	#LR__0171
0348c     B0 00 90 FD | 	jmp	#LR__0172
03490                 | LR__0150
03490     01 FA 05 F6 | 	mov	result1, #1
03494     AC 00 90 FD | 	jmp	#LR__0173
03498                 | LR__0151
03498     02 FA 05 F6 | 	mov	result1, #2
0349c     A4 00 90 FD | 	jmp	#LR__0173
034a0                 | LR__0152
034a0     03 FA 05 F6 | 	mov	result1, #3
034a4     9C 00 90 FD | 	jmp	#LR__0173
034a8                 | LR__0153
034a8     04 FA 05 F6 | 	mov	result1, #4
034ac     94 00 90 FD | 	jmp	#LR__0173
034b0                 | LR__0154
034b0     05 FA 05 F6 | 	mov	result1, #5
034b4     8C 00 90 FD | 	jmp	#LR__0173
034b8                 | LR__0155
034b8     06 FA 05 F6 | 	mov	result1, #6
034bc     84 00 90 FD | 	jmp	#LR__0173
034c0                 | LR__0156
034c0     07 FA 05 F6 | 	mov	result1, #7
034c4     7C 00 90 FD | 	jmp	#LR__0173
034c8                 | LR__0157
034c8     08 FA 05 F6 | 	mov	result1, #8
034cc     74 00 90 FD | 	jmp	#LR__0173
034d0                 | LR__0158
034d0     09 FA 05 F6 | 	mov	result1, #9
034d4     6C 00 90 FD | 	jmp	#LR__0173
034d8                 | LR__0159
034d8     0A FA 05 F6 | 	mov	result1, #10
034dc     64 00 90 FD | 	jmp	#LR__0173
034e0                 | LR__0160
034e0     0B FA 05 F6 | 	mov	result1, #11
034e4     5C 00 90 FD | 	jmp	#LR__0173
034e8                 | LR__0161
034e8     0C FA 05 F6 | 	mov	result1, #12
034ec     54 00 90 FD | 	jmp	#LR__0173
034f0                 | LR__0162
034f0     0D FA 05 F6 | 	mov	result1, #13
034f4     4C 00 90 FD | 	jmp	#LR__0173
034f8                 | LR__0163
034f8     0E FA 05 F6 | 	mov	result1, #14
034fc     44 00 90 FD | 	jmp	#LR__0173
03500                 | LR__0164
03500     1B FA 05 F6 | 	mov	result1, #27
03504     3C 00 90 FD | 	jmp	#LR__0173
03508                 | LR__0165
03508     27 FA 05 F6 | 	mov	result1, #39
0350c     34 00 90 FD | 	jmp	#LR__0173
03510                 | LR__0166
03510     26 FA 05 F6 | 	mov	result1, #38
03514     2C 00 90 FD | 	jmp	#LR__0173
03518                 | LR__0167
03518     10 FA 05 F6 | 	mov	result1, #16
0351c     24 00 90 FD | 	jmp	#LR__0173
03520                 | LR__0168
03520     0F FA 05 F6 | 	mov	result1, #15
03524     1C 00 90 FD | 	jmp	#LR__0173
03528                 | LR__0169
03528     2A FA 05 F6 | 	mov	result1, #42
0352c     14 00 90 FD | 	jmp	#LR__0173
03530                 | LR__0170
03530     28 FA 05 F6 | 	mov	result1, #40
03534     0C 00 90 FD | 	jmp	#LR__0173
03538                 | LR__0171
03538     29 FA 05 F6 | 	mov	result1, #41
0353c     04 00 90 FD | 	jmp	#LR__0173
03540                 | LR__0172
03540     00 FA 05 F6 | 	mov	result1, #0
03544                 | LR__0173
03544     A7 F0 03 F6 | 	mov	ptra, fp
03548     B2 00 A0 FD | 	call	#popregs_
0354c                 | _isoperator_ret
0354c     2D 00 64 FD | 	ret
03550                 | 
03550                 | ' 
03550                 | ' function isseparator(s as string) as ubyte
03550                 | _isseparator
03550     01 4A 05 F6 | 	mov	COUNT_, #1
03554     A8 00 A0 FD | 	call	#pushregs_
03558                 | ' 
03558                 | ' select case s
03558     09 1F 02 F6 | 	mov	local01, arg01
0355c     52 01 00 FF 
03560     13 14 06 F6 | 	mov	arg02, ##@LR__4489
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     D4 77 B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     54 01 90 AD |  if_e	jmp	#LR__0180
03574     52 01 00 FF 
03578     15 14 06 F6 | 	mov	arg02, ##@LR__4490
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     BC 77 B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     44 01 90 AD |  if_e	jmp	#LR__0181
0358c     52 01 00 FF 
03590     17 14 06 F6 | 	mov	arg02, ##@LR__4491
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     A4 77 B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     34 01 90 AD |  if_e	jmp	#LR__0182
035a4     52 01 00 FF 
035a8     19 14 06 F6 | 	mov	arg02, ##@LR__4492
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     8C 77 B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     24 01 90 AD |  if_e	jmp	#LR__0183
035bc     52 01 00 FF 
035c0     1B 14 06 F6 | 	mov	arg02, ##@LR__4493
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     74 77 B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     14 01 90 AD |  if_e	jmp	#LR__0184
035d4     52 01 00 FF 
035d8     1D 14 06 F6 | 	mov	arg02, ##@LR__4494
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     5C 77 B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     04 01 90 AD |  if_e	jmp	#LR__0185
035ec     52 01 00 FF 
035f0     1F 14 06 F6 | 	mov	arg02, ##@LR__4495
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     44 77 B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     F4 00 90 AD |  if_e	jmp	#LR__0186
03604     52 01 00 FF 
03608     21 14 06 F6 | 	mov	arg02, ##@LR__4496
0360c     0F 13 02 F6 | 	mov	arg01, local01
03610     2C 77 B1 FD | 	call	#__system___string_cmp
03614     00 FA 0D F2 | 	cmp	result1, #0 wz
03618     E4 00 90 AD |  if_e	jmp	#LR__0187
0361c     52 01 00 FF 
03620     23 14 06 F6 | 	mov	arg02, ##@LR__4497
03624     0F 13 02 F6 | 	mov	arg01, local01
03628     14 77 B1 FD | 	call	#__system___string_cmp
0362c     00 FA 0D F2 | 	cmp	result1, #0 wz
03630     D4 00 90 AD |  if_e	jmp	#LR__0188
03634     52 01 00 FF 
03638     25 14 06 F6 | 	mov	arg02, ##@LR__4498
0363c     0F 13 02 F6 | 	mov	arg01, local01
03640     FC 76 B1 FD | 	call	#__system___string_cmp
03644     00 FA 0D F2 | 	cmp	result1, #0 wz
03648     C4 00 90 AD |  if_e	jmp	#LR__0189
0364c     52 01 00 FF 
03650     27 14 06 F6 | 	mov	arg02, ##@LR__4499
03654     0F 13 02 F6 | 	mov	arg01, local01
03658     E4 76 B1 FD | 	call	#__system___string_cmp
0365c     00 FA 0D F2 | 	cmp	result1, #0 wz
03660     B4 00 90 AD |  if_e	jmp	#LR__0190
03664     52 01 00 FF 
03668     29 14 06 F6 | 	mov	arg02, ##@LR__4500
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     CC 76 B1 FD | 	call	#__system___string_cmp
03674     00 FA 0D F2 | 	cmp	result1, #0 wz
03678     A4 00 90 AD |  if_e	jmp	#LR__0191
0367c     52 01 00 FF 
03680     2B 14 06 F6 | 	mov	arg02, ##@LR__4501
03684     0F 13 02 F6 | 	mov	arg01, local01
03688     B4 76 B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     94 00 90 AD |  if_e	jmp	#LR__0192
03694     52 01 00 FF 
03698     2D 14 06 F6 | 	mov	arg02, ##@LR__4502
0369c     0F 13 02 F6 | 	mov	arg01, local01
036a0     9C 76 B1 FD | 	call	#__system___string_cmp
036a4     00 FA 0D F2 | 	cmp	result1, #0 wz
036a8     84 00 90 AD |  if_e	jmp	#LR__0193
036ac     52 01 00 FF 
036b0     2F 14 06 F6 | 	mov	arg02, ##@LR__4503
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     84 76 B1 FD | 	call	#__system___string_cmp
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     74 00 90 AD |  if_e	jmp	#LR__0194
036c4     78 00 90 FD | 	jmp	#LR__0195
036c8                 | LR__0180
036c8     01 FA 05 F6 | 	mov	result1, #1
036cc     74 00 90 FD | 	jmp	#LR__0196
036d0                 | LR__0181
036d0     02 FA 05 F6 | 	mov	result1, #2
036d4     6C 00 90 FD | 	jmp	#LR__0196
036d8                 | LR__0182
036d8     1B FA 05 F6 | 	mov	result1, #27
036dc     64 00 90 FD | 	jmp	#LR__0196
036e0                 | LR__0183
036e0     11 FA 05 F6 | 	mov	result1, #17
036e4     5C 00 90 FD | 	jmp	#LR__0196
036e8                 | LR__0184
036e8     05 FA 05 F6 | 	mov	result1, #5
036ec     54 00 90 FD | 	jmp	#LR__0196
036f0                 | LR__0185
036f0     06 FA 05 F6 | 	mov	result1, #6
036f4     4C 00 90 FD | 	jmp	#LR__0196
036f8                 | LR__0186
036f8     12 FA 05 F6 | 	mov	result1, #18
036fc     44 00 90 FD | 	jmp	#LR__0196
03700                 | LR__0187
03700     13 FA 05 F6 | 	mov	result1, #19
03704     3C 00 90 FD | 	jmp	#LR__0196
03708                 | LR__0188
03708     0C FA 05 F6 | 	mov	result1, #12
0370c     34 00 90 FD | 	jmp	#LR__0196
03710                 | LR__0189
03710     14 FA 05 F6 | 	mov	result1, #20
03714     2C 00 90 FD | 	jmp	#LR__0196
03718                 | LR__0190
03718     15 FA 05 F6 | 	mov	result1, #21
0371c     24 00 90 FD | 	jmp	#LR__0196
03720                 | LR__0191
03720     16 FA 05 F6 | 	mov	result1, #22
03724     1C 00 90 FD | 	jmp	#LR__0196
03728                 | LR__0192
03728     FF FB 05 F6 | 	mov	result1, #511
0372c     14 00 90 FD | 	jmp	#LR__0196
03730                 | LR__0193
03730     0F FA 05 F6 | 	mov	result1, #15
03734     0C 00 90 FD | 	jmp	#LR__0196
03738                 | LR__0194
03738     10 FA 05 F6 | 	mov	result1, #16
0373c     04 00 90 FD | 	jmp	#LR__0196
03740                 | LR__0195
03740     00 FA 05 F6 | 	mov	result1, #0
03744                 | LR__0196
03744     A7 F0 03 F6 | 	mov	ptra, fp
03748     B2 00 A0 FD | 	call	#popregs_
0374c                 | _isseparator_ret
0374c     2D 00 64 FD | 	ret
03750                 | 
03750                 | ' 
03750                 | ' 
03750                 | ' function iscommand(s as string) as ubyte
03750                 | _iscommand
03750     01 4A 05 F6 | 	mov	COUNT_, #1
03754     A8 00 A0 FD | 	call	#pushregs_
03758                 | ' 
03758                 | ' select case s
03758     09 1F 02 F6 | 	mov	local01, arg01
0375c     52 01 00 FF 
03760     33 14 06 F6 | 	mov	arg02, ##@LR__4505
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     D4 75 B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     2C 08 90 AD |  if_e	jmp	#LR__0200
03774     52 01 00 FF 
03778     38 14 06 F6 | 	mov	arg02, ##@LR__4506
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     BC 75 B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     1C 08 90 AD |  if_e	jmp	#LR__0201
0378c     52 01 00 FF 
03790     3B 14 06 F6 | 	mov	arg02, ##@LR__4507
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     A4 75 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     0C 08 90 AD |  if_e	jmp	#LR__0202
037a4     52 01 00 FF 
037a8     3F 14 06 F6 | 	mov	arg02, ##@LR__4508
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     8C 75 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     FC 07 90 AD |  if_e	jmp	#LR__0203
037bc     52 01 00 FF 
037c0     44 14 06 F6 | 	mov	arg02, ##@LR__4509
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     74 75 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     EC 07 90 AD |  if_e	jmp	#LR__0204
037d4     52 01 00 FF 
037d8     48 14 06 F6 | 	mov	arg02, ##@LR__4510
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     5C 75 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     DC 07 90 AD |  if_e	jmp	#LR__0205
037ec     52 01 00 FF 
037f0     4F 14 06 F6 | 	mov	arg02, ##@LR__4511
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     44 75 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     CC 07 90 AD |  if_e	jmp	#LR__0206
03804     52 01 00 FF 
03808     53 14 06 F6 | 	mov	arg02, ##@LR__4512
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     2C 75 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     BC 07 90 AD |  if_e	jmp	#LR__0207
0381c     52 01 00 FF 
03820     59 14 06 F6 | 	mov	arg02, ##@LR__4513
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     14 75 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     AC 07 90 AD |  if_e	jmp	#LR__0208
03834     52 01 00 FF 
03838     5D 14 06 F6 | 	mov	arg02, ##@LR__4514
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     FC 74 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     9C 07 90 AD |  if_e	jmp	#LR__0209
0384c     52 01 00 FF 
03850     63 14 06 F6 | 	mov	arg02, ##@LR__4515
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     E4 74 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     8C 07 90 AD |  if_e	jmp	#LR__0210
03864     52 01 00 FF 
03868     66 14 06 F6 | 	mov	arg02, ##@LR__4516
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     CC 74 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     7C 07 90 AD |  if_e	jmp	#LR__0211
0387c     52 01 00 FF 
03880     6C 14 06 F6 | 	mov	arg02, ##@LR__4517
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     B4 74 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     6C 07 90 AD |  if_e	jmp	#LR__0212
03894     52 01 00 FF 
03898     70 14 06 F6 | 	mov	arg02, ##@LR__4518
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     9C 74 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     5C 07 90 AD |  if_e	jmp	#LR__0213
038ac     52 01 00 FF 
038b0     77 14 06 F6 | 	mov	arg02, ##@LR__4519
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     84 74 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     4C 07 90 AD |  if_e	jmp	#LR__0214
038c4     52 01 00 FF 
038c8     7E 14 06 F6 | 	mov	arg02, ##@LR__4520
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     6C 74 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     3C 07 90 AD |  if_e	jmp	#LR__0215
038dc     52 01 00 FF 
038e0     85 14 06 F6 | 	mov	arg02, ##@LR__4521
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     54 74 B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     2C 07 90 AD |  if_e	jmp	#LR__0216
038f4     52 01 00 FF 
038f8     8F 14 06 F6 | 	mov	arg02, ##@LR__4522
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     3C 74 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     1C 07 90 AD |  if_e	jmp	#LR__0217
0390c     52 01 00 FF 
03910     93 14 06 F6 | 	mov	arg02, ##@LR__4523
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     24 74 B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     0C 07 90 AD |  if_e	jmp	#LR__0218
03924     52 01 00 FF 
03928     97 14 06 F6 | 	mov	arg02, ##@LR__4524
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     0C 74 B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     FC 06 90 AD |  if_e	jmp	#LR__0219
0393c     52 01 00 FF 
03940     9B 14 06 F6 | 	mov	arg02, ##@LR__4525
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     F4 73 B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     EC 06 90 AD |  if_e	jmp	#LR__0220
03954     52 01 00 FF 
03958     9F 14 06 F6 | 	mov	arg02, ##@LR__4526
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     DC 73 B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     DC 06 90 AD |  if_e	jmp	#LR__0221
0396c     52 01 00 FF 
03970     A4 14 06 F6 | 	mov	arg02, ##@LR__4527
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     C4 73 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     CC 06 90 AD |  if_e	jmp	#LR__0222
03984     52 01 00 FF 
03988     A8 14 06 F6 | 	mov	arg02, ##@LR__4528
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     AC 73 B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     BC 06 90 AD |  if_e	jmp	#LR__0223
0399c     52 01 00 FF 
039a0     AD 14 06 F6 | 	mov	arg02, ##@LR__4529
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     94 73 B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     AC 06 90 AD |  if_e	jmp	#LR__0224
039b4     52 01 00 FF 
039b8     B5 14 06 F6 | 	mov	arg02, ##@LR__4530
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     7C 73 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     9C 06 90 AD |  if_e	jmp	#LR__0225
039cc     52 01 00 FF 
039d0     B9 14 06 F6 | 	mov	arg02, ##@LR__4531
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     64 73 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     8C 06 90 AD |  if_e	jmp	#LR__0226
039e4     52 01 00 FF 
039e8     BE 14 06 F6 | 	mov	arg02, ##@LR__4532
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     4C 73 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     7C 06 90 AD |  if_e	jmp	#LR__0227
039fc     52 01 00 FF 
03a00     C2 14 06 F6 | 	mov	arg02, ##@LR__4533
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     34 73 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     6C 06 90 AD |  if_e	jmp	#LR__0228
03a14     52 01 00 FF 
03a18     C7 14 06 F6 | 	mov	arg02, ##@LR__4534
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     1C 73 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     5C 06 90 AD |  if_e	jmp	#LR__0229
03a2c     52 01 00 FF 
03a30     CB 14 06 F6 | 	mov	arg02, ##@LR__4535
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     04 73 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     4C 06 90 AD |  if_e	jmp	#LR__0230
03a44     52 01 00 FF 
03a48     CE 14 06 F6 | 	mov	arg02, ##@LR__4536
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     EC 72 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     3C 06 90 AD |  if_e	jmp	#LR__0231
03a5c     52 01 00 FF 
03a60     D4 14 06 F6 | 	mov	arg02, ##@LR__4537
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     D4 72 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     2C 06 90 AD |  if_e	jmp	#LR__0232
03a74     52 01 00 FF 
03a78     D8 14 06 F6 | 	mov	arg02, ##@LR__4538
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     BC 72 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     1C 06 90 AD |  if_e	jmp	#LR__0233
03a8c     52 01 00 FF 
03a90     DD 14 06 F6 | 	mov	arg02, ##@LR__4539
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     A4 72 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     0C 06 90 AD |  if_e	jmp	#LR__0234
03aa4     52 01 00 FF 
03aa8     E0 14 06 F6 | 	mov	arg02, ##@LR__4540
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     8C 72 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     FC 05 90 AD |  if_e	jmp	#LR__0235
03abc     52 01 00 FF 
03ac0     E3 14 06 F6 | 	mov	arg02, ##@LR__4541
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     74 72 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     EC 05 90 AD |  if_e	jmp	#LR__0236
03ad4     52 01 00 FF 
03ad8     E7 14 06 F6 | 	mov	arg02, ##@LR__4542
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     5C 72 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     DC 05 90 AD |  if_e	jmp	#LR__0237
03aec     52 01 00 FF 
03af0     EA 14 06 F6 | 	mov	arg02, ##@LR__4543
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     44 72 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     CC 05 90 AD |  if_e	jmp	#LR__0238
03b04     52 01 00 FF 
03b08     EE 14 06 F6 | 	mov	arg02, ##@LR__4544
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     2C 72 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     BC 05 90 AD |  if_e	jmp	#LR__0239
03b1c     52 01 00 FF 
03b20     F3 14 06 F6 | 	mov	arg02, ##@LR__4545
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     14 72 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     AC 05 90 AD |  if_e	jmp	#LR__0240
03b34     52 01 00 FF 
03b38     F6 14 06 F6 | 	mov	arg02, ##@LR__4546
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     FC 71 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     9C 05 90 AD |  if_e	jmp	#LR__0241
03b4c     52 01 00 FF 
03b50     FB 14 06 F6 | 	mov	arg02, ##@LR__4547
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     E4 71 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     8C 05 90 AD |  if_e	jmp	#LR__0242
03b64     52 01 00 FF 
03b68     FF 14 06 F6 | 	mov	arg02, ##@LR__4548
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     CC 71 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     7C 05 90 AD |  if_e	jmp	#LR__0243
03b7c     52 01 00 FF 
03b80     04 15 06 F6 | 	mov	arg02, ##@LR__4549
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     B4 71 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     6C 05 90 AD |  if_e	jmp	#LR__0244
03b94     52 01 00 FF 
03b98     07 15 06 F6 | 	mov	arg02, ##@LR__4550
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     9C 71 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     5C 05 90 AD |  if_e	jmp	#LR__0245
03bac     52 01 00 FF 
03bb0     0D 15 06 F6 | 	mov	arg02, ##@LR__4551
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     84 71 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     4C 05 90 AD |  if_e	jmp	#LR__0246
03bc4     52 01 00 FF 
03bc8     11 15 06 F6 | 	mov	arg02, ##@LR__4552
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     6C 71 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     3C 05 90 AD |  if_e	jmp	#LR__0247
03bdc     52 01 00 FF 
03be0     16 15 06 F6 | 	mov	arg02, ##@LR__4553
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     54 71 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     2C 05 90 AD |  if_e	jmp	#LR__0248
03bf4     52 01 00 FF 
03bf8     19 15 06 F6 | 	mov	arg02, ##@LR__4554
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     3C 71 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     1C 05 90 AD |  if_e	jmp	#LR__0249
03c0c     52 01 00 FF 
03c10     1F 15 06 F6 | 	mov	arg02, ##@LR__4555
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     24 71 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     0C 05 90 AD |  if_e	jmp	#LR__0250
03c24     52 01 00 FF 
03c28     22 15 06 F6 | 	mov	arg02, ##@LR__4556
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     0C 71 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     FC 04 90 AD |  if_e	jmp	#LR__0251
03c3c     52 01 00 FF 
03c40     2B 15 06 F6 | 	mov	arg02, ##@LR__4557
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     F4 70 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     EC 04 90 AD |  if_e	jmp	#LR__0252
03c54     52 01 00 FF 
03c58     31 15 06 F6 | 	mov	arg02, ##@LR__4558
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     DC 70 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     DC 04 90 AD |  if_e	jmp	#LR__0253
03c6c     52 01 00 FF 
03c70     37 15 06 F6 | 	mov	arg02, ##@LR__4559
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     C4 70 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     CC 04 90 AD |  if_e	jmp	#LR__0254
03c84     52 01 00 FF 
03c88     40 15 06 F6 | 	mov	arg02, ##@LR__4560
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     AC 70 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     BC 04 90 AD |  if_e	jmp	#LR__0255
03c9c     52 01 00 FF 
03ca0     4A 15 06 F6 | 	mov	arg02, ##@LR__4561
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     94 70 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     AC 04 90 AD |  if_e	jmp	#LR__0256
03cb4     52 01 00 FF 
03cb8     53 15 06 F6 | 	mov	arg02, ##@LR__4562
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     7C 70 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     9C 04 90 AD |  if_e	jmp	#LR__0257
03ccc     52 01 00 FF 
03cd0     58 15 06 F6 | 	mov	arg02, ##@LR__4563
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     64 70 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     8C 04 90 AD |  if_e	jmp	#LR__0258
03ce4     52 01 00 FF 
03ce8     5D 15 06 F6 | 	mov	arg02, ##@LR__4564
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     4C 70 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     7C 04 90 AD |  if_e	jmp	#LR__0259
03cfc     52 01 00 FF 
03d00     61 15 06 F6 | 	mov	arg02, ##@LR__4565
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     34 70 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     6C 04 90 AD |  if_e	jmp	#LR__0260
03d14     52 01 00 FF 
03d18     6A 15 06 F6 | 	mov	arg02, ##@LR__4566
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     1C 70 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     5C 04 90 AD |  if_e	jmp	#LR__0261
03d2c     52 01 00 FF 
03d30     6F 15 06 F6 | 	mov	arg02, ##@LR__4567
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     04 70 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     4C 04 90 AD |  if_e	jmp	#LR__0262
03d44     52 01 00 FF 
03d48     75 15 06 F6 | 	mov	arg02, ##@LR__4568
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     EC 6F B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     3C 04 90 AD |  if_e	jmp	#LR__0263
03d5c     52 01 00 FF 
03d60     77 15 06 F6 | 	mov	arg02, ##@LR__4569
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     D4 6F B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     2C 04 90 AD |  if_e	jmp	#LR__0264
03d74     52 01 00 FF 
03d78     7B 15 06 F6 | 	mov	arg02, ##@LR__4570
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     BC 6F B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     1C 04 90 AD |  if_e	jmp	#LR__0265
03d8c     52 01 00 FF 
03d90     83 15 06 F6 | 	mov	arg02, ##@LR__4571
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     A4 6F B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     0C 04 90 AD |  if_e	jmp	#LR__0266
03da4     52 01 00 FF 
03da8     87 15 06 F6 | 	mov	arg02, ##@LR__4572
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     8C 6F B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     FC 03 90 AD |  if_e	jmp	#LR__0267
03dbc     52 01 00 FF 
03dc0     8C 15 06 F6 | 	mov	arg02, ##@LR__4573
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     74 6F B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     EC 03 90 AD |  if_e	jmp	#LR__0268
03dd4     52 01 00 FF 
03dd8     8F 15 06 F6 | 	mov	arg02, ##@LR__4574
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     5C 6F B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     DC 03 90 AD |  if_e	jmp	#LR__0269
03dec     52 01 00 FF 
03df0     98 15 06 F6 | 	mov	arg02, ##@LR__4575
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     44 6F B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     CC 03 90 AD |  if_e	jmp	#LR__0270
03e04     52 01 00 FF 
03e08     9F 15 06 F6 | 	mov	arg02, ##@LR__4576
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     2C 6F B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     BC 03 90 AD |  if_e	jmp	#LR__0271
03e1c     52 01 00 FF 
03e20     A6 15 06 F6 | 	mov	arg02, ##@LR__4577
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     14 6F B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     AC 03 90 AD |  if_e	jmp	#LR__0272
03e34     52 01 00 FF 
03e38     AD 15 06 F6 | 	mov	arg02, ##@LR__4578
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     FC 6E B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     9C 03 90 AD |  if_e	jmp	#LR__0273
03e4c     52 01 00 FF 
03e50     B8 15 06 F6 | 	mov	arg02, ##@LR__4579
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     E4 6E B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     8C 03 90 AD |  if_e	jmp	#LR__0274
03e64     52 01 00 FF 
03e68     BF 15 06 F6 | 	mov	arg02, ##@LR__4580
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     CC 6E B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     7C 03 90 AD |  if_e	jmp	#LR__0275
03e7c     52 01 00 FF 
03e80     C7 15 06 F6 | 	mov	arg02, ##@LR__4581
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     B4 6E B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     6C 03 90 AD |  if_e	jmp	#LR__0276
03e94     52 01 00 FF 
03e98     CD 15 06 F6 | 	mov	arg02, ##@LR__4582
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     9C 6E B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     5C 03 90 AD |  if_e	jmp	#LR__0277
03eac     52 01 00 FF 
03eb0     D1 15 06 F6 | 	mov	arg02, ##@LR__4583
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     84 6E B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     4C 03 90 AD |  if_e	jmp	#LR__0278
03ec4     52 01 00 FF 
03ec8     D8 15 06 F6 | 	mov	arg02, ##@LR__4584
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     6C 6E B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     3C 03 90 AD |  if_e	jmp	#LR__0279
03edc     52 01 00 FF 
03ee0     DC 15 06 F6 | 	mov	arg02, ##@LR__4585
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     54 6E B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     2C 03 90 AD |  if_e	jmp	#LR__0280
03ef4     52 01 00 FF 
03ef8     E1 15 06 F6 | 	mov	arg02, ##@LR__4586
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     3C 6E B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     1C 03 90 AD |  if_e	jmp	#LR__0281
03f0c     52 01 00 FF 
03f10     E8 15 06 F6 | 	mov	arg02, ##@LR__4587
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     24 6E B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     0C 03 90 AD |  if_e	jmp	#LR__0282
03f24     52 01 00 FF 
03f28     F2 15 06 F6 | 	mov	arg02, ##@LR__4588
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     0C 6E B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     FC 02 90 AD |  if_e	jmp	#LR__0283
03f3c     52 01 00 FF 
03f40     F6 15 06 F6 | 	mov	arg02, ##@LR__4589
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     F4 6D B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     EC 02 90 AD |  if_e	jmp	#LR__0284
03f54     52 01 00 FF 
03f58     FE 15 06 F6 | 	mov	arg02, ##@LR__4590
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     DC 6D B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     DC 02 90 AD |  if_e	jmp	#LR__0285
03f6c     53 01 00 FF 
03f70     02 14 06 F6 | 	mov	arg02, ##@LR__4591
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     C4 6D B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     CC 02 90 AD |  if_e	jmp	#LR__0286
03f84     53 01 00 FF 
03f88     08 14 06 F6 | 	mov	arg02, ##@LR__4592
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     AC 6D B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     BC 02 90 AD |  if_e	jmp	#LR__0287
03f9c     C0 02 90 FD | 	jmp	#LR__0288
03fa0                 | LR__0200
03fa0     5C FA 05 F6 | 	mov	result1, #92
03fa4     BC 02 90 FD | 	jmp	#LR__0289
03fa8                 | LR__0201
03fa8     5C FA 05 F6 | 	mov	result1, #92
03fac     B4 02 90 FD | 	jmp	#LR__0289
03fb0                 | LR__0202
03fb0     47 FA 05 F6 | 	mov	result1, #71
03fb4     AC 02 90 FD | 	jmp	#LR__0289
03fb8                 | LR__0203
03fb8     59 FA 05 F6 | 	mov	result1, #89
03fbc     A4 02 90 FD | 	jmp	#LR__0289
03fc0                 | LR__0204
03fc0     59 FA 05 F6 | 	mov	result1, #89
03fc4     9C 02 90 FD | 	jmp	#LR__0289
03fc8                 | LR__0205
03fc8     45 FA 05 F6 | 	mov	result1, #69
03fcc     94 02 90 FD | 	jmp	#LR__0289
03fd0                 | LR__0206
03fd0     45 FA 05 F6 | 	mov	result1, #69
03fd4     8C 02 90 FD | 	jmp	#LR__0289
03fd8                 | LR__0207
03fd8     69 FA 05 F6 | 	mov	result1, #105
03fdc     84 02 90 FD | 	jmp	#LR__0289
03fe0                 | LR__0208
03fe0     40 FA 05 F6 | 	mov	result1, #64
03fe4     7C 02 90 FD | 	jmp	#LR__0289
03fe8                 | LR__0209
03fe8     49 FA 05 F6 | 	mov	result1, #73
03fec     74 02 90 FD | 	jmp	#LR__0289
03ff0                 | LR__0210
03ff0     49 FA 05 F6 | 	mov	result1, #73
03ff4     6C 02 90 FD | 	jmp	#LR__0289
03ff8                 | LR__0211
03ff8     50 FA 05 F6 | 	mov	result1, #80
03ffc     64 02 90 FD | 	jmp	#LR__0289
04000                 | LR__0212
04000     50 FA 05 F6 | 	mov	result1, #80
04004     5C 02 90 FD | 	jmp	#LR__0289
04008                 | LR__0213
04008     68 FA 05 F6 | 	mov	result1, #104
0400c     54 02 90 FD | 	jmp	#LR__0289
04010                 | LR__0214
04010     73 FA 05 F6 | 	mov	result1, #115
04014     4C 02 90 FD | 	jmp	#LR__0289
04018                 | LR__0215
04018     74 FA 05 F6 | 	mov	result1, #116
0401c     44 02 90 FD | 	jmp	#LR__0289
04020                 | LR__0216
04020     6C FA 05 F6 | 	mov	result1, #108
04024     3C 02 90 FD | 	jmp	#LR__0289
04028                 | LR__0217
04028     6C FA 05 F6 | 	mov	result1, #108
0402c     34 02 90 FD | 	jmp	#LR__0289
04030                 | LR__0218
04030     89 FA 05 F6 | 	mov	result1, #137
04034     2C 02 90 FD | 	jmp	#LR__0289
04038                 | LR__0219
04038     72 FA 05 F6 | 	mov	result1, #114
0403c     24 02 90 FD | 	jmp	#LR__0289
04040                 | LR__0220
04040     5D FA 05 F6 | 	mov	result1, #93
04044     1C 02 90 FD | 	jmp	#LR__0289
04048                 | LR__0221
04048     43 FA 05 F6 | 	mov	result1, #67
0404c     14 02 90 FD | 	jmp	#LR__0289
04050                 | LR__0222
04050     43 FA 05 F6 | 	mov	result1, #67
04054     0C 02 90 FD | 	jmp	#LR__0289
04058                 | LR__0223
04058     5A FA 05 F6 | 	mov	result1, #90
0405c     04 02 90 FD | 	jmp	#LR__0289
04060                 | LR__0224
04060     46 FA 05 F6 | 	mov	result1, #70
04064     FC 01 90 FD | 	jmp	#LR__0289
04068                 | LR__0225
04068     46 FA 05 F6 | 	mov	result1, #70
0406c     F4 01 90 FD | 	jmp	#LR__0289
04070                 | LR__0226
04070     71 FA 05 F6 | 	mov	result1, #113
04074     EC 01 90 FD | 	jmp	#LR__0289
04078                 | LR__0227
04078     71 FA 05 F6 | 	mov	result1, #113
0407c     E4 01 90 FD | 	jmp	#LR__0289
04080                 | LR__0228
04080     60 FA 05 F6 | 	mov	result1, #96
04084     DC 01 90 FD | 	jmp	#LR__0289
04088                 | LR__0229
04088     4A FA 05 F6 | 	mov	result1, #74
0408c     D4 01 90 FD | 	jmp	#LR__0289
04090                 | LR__0230
04090     4A FA 05 F6 | 	mov	result1, #74
04094     CC 01 90 FD | 	jmp	#LR__0289
04098                 | LR__0231
04098     48 FA 05 F6 | 	mov	result1, #72
0409c     C4 01 90 FD | 	jmp	#LR__0289
040a0                 | LR__0232
040a0     48 FA 05 F6 | 	mov	result1, #72
040a4     BC 01 90 FD | 	jmp	#LR__0289
040a8                 | LR__0233
040a8     4E FA 05 F6 | 	mov	result1, #78
040ac     B4 01 90 FD | 	jmp	#LR__0289
040b0                 | LR__0234
040b0     4E FA 05 F6 | 	mov	result1, #78
040b4     AC 01 90 FD | 	jmp	#LR__0289
040b8                 | LR__0235
040b8     58 FA 05 F6 | 	mov	result1, #88
040bc     A4 01 90 FD | 	jmp	#LR__0289
040c0                 | LR__0236
040c0     5F FA 05 F6 | 	mov	result1, #95
040c4     9C 01 90 FD | 	jmp	#LR__0289
040c8                 | LR__0237
040c8     5F FA 05 F6 | 	mov	result1, #95
040cc     94 01 90 FD | 	jmp	#LR__0289
040d0                 | LR__0238
040d0     8A FA 05 F6 | 	mov	result1, #138
040d4     8C 01 90 FD | 	jmp	#LR__0289
040d8                 | LR__0239
040d8     4C FA 05 F6 | 	mov	result1, #76
040dc     84 01 90 FD | 	jmp	#LR__0289
040e0                 | LR__0240
040e0     4C FA 05 F6 | 	mov	result1, #76
040e4     7C 01 90 FD | 	jmp	#LR__0289
040e8                 | LR__0241
040e8     52 FA 05 F6 | 	mov	result1, #82
040ec     74 01 90 FD | 	jmp	#LR__0289
040f0                 | LR__0242
040f0     52 FA 05 F6 | 	mov	result1, #82
040f4     6C 01 90 FD | 	jmp	#LR__0289
040f8                 | LR__0243
040f8     61 FA 05 F6 | 	mov	result1, #97
040fc     64 01 90 FD | 	jmp	#LR__0289
04100                 | LR__0244
04100     61 FA 05 F6 | 	mov	result1, #97
04104     5C 01 90 FD | 	jmp	#LR__0289
04108                 | LR__0245
04108     63 FA 05 F6 | 	mov	result1, #99
0410c     54 01 90 FD | 	jmp	#LR__0289
04110                 | LR__0246
04110     41 FA 05 F6 | 	mov	result1, #65
04114     4C 01 90 FD | 	jmp	#LR__0289
04118                 | LR__0247
04118     4B FA 05 F6 | 	mov	result1, #75
0411c     44 01 90 FD | 	jmp	#LR__0289
04120                 | LR__0248
04120     4B FA 05 F6 | 	mov	result1, #75
04124     3C 01 90 FD | 	jmp	#LR__0289
04128                 | LR__0249
04128     5E FA 05 F6 | 	mov	result1, #94
0412c     34 01 90 FD | 	jmp	#LR__0289
04130                 | LR__0250
04130     5E FA 05 F6 | 	mov	result1, #94
04134     2C 01 90 FD | 	jmp	#LR__0289
04138                 | LR__0251
04138     7C FA 05 F6 | 	mov	result1, #124
0413c     24 01 90 FD | 	jmp	#LR__0289
04140                 | LR__0252
04140     7E FA 05 F6 | 	mov	result1, #126
04144     1C 01 90 FD | 	jmp	#LR__0289
04148                 | LR__0253
04148     7D FA 05 F6 | 	mov	result1, #125
0414c     14 01 90 FD | 	jmp	#LR__0289
04150                 | LR__0254
04150     7F FA 05 F6 | 	mov	result1, #127
04154     0C 01 90 FD | 	jmp	#LR__0289
04158                 | LR__0255
04158     80 FA 05 F6 | 	mov	result1, #128
0415c     04 01 90 FD | 	jmp	#LR__0289
04160                 | LR__0256
04160     55 FA 05 F6 | 	mov	result1, #85
04164     FC 00 90 FD | 	jmp	#LR__0289
04168                 | LR__0257
04168     75 FA 05 F6 | 	mov	result1, #117
0416c     F4 00 90 FD | 	jmp	#LR__0289
04170                 | LR__0258
04170     42 FA 05 F6 | 	mov	result1, #66
04174     EC 00 90 FD | 	jmp	#LR__0289
04178                 | LR__0259
04178     42 FA 05 F6 | 	mov	result1, #66
0417c     E4 00 90 FD | 	jmp	#LR__0289
04180                 | LR__0260
04180     81 FA 05 F6 | 	mov	result1, #129
04184     DC 00 90 FD | 	jmp	#LR__0289
04188                 | LR__0261
04188     81 FA 05 F6 | 	mov	result1, #129
0418c     D4 00 90 FD | 	jmp	#LR__0289
04190                 | LR__0262
04190     44 FA 05 F6 | 	mov	result1, #68
04194     CC 00 90 FD | 	jmp	#LR__0289
04198                 | LR__0263
04198     44 FA 05 F6 | 	mov	result1, #68
0419c     C4 00 90 FD | 	jmp	#LR__0289
041a0                 | LR__0264
041a0     88 FA 05 F6 | 	mov	result1, #136
041a4     BC 00 90 FD | 	jmp	#LR__0289
041a8                 | LR__0265
041a8     92 FA 05 F6 | 	mov	result1, #146
041ac     B4 00 90 FD | 	jmp	#LR__0289
041b0                 | LR__0266
041b0     4D FA 05 F6 | 	mov	result1, #77
041b4     AC 00 90 FD | 	jmp	#LR__0289
041b8                 | LR__0267
041b8     51 FA 05 F6 | 	mov	result1, #81
041bc     A4 00 90 FD | 	jmp	#LR__0289
041c0                 | LR__0268
041c0     51 FA 05 F6 | 	mov	result1, #81
041c4     9C 00 90 FD | 	jmp	#LR__0289
041c8                 | LR__0269
041c8     8E FA 05 F6 | 	mov	result1, #142
041cc     94 00 90 FD | 	jmp	#LR__0289
041d0                 | LR__0270
041d0     90 FA 05 F6 | 	mov	result1, #144
041d4     8C 00 90 FD | 	jmp	#LR__0289
041d8                 | LR__0271
041d8     8D FA 05 F6 | 	mov	result1, #141
041dc     84 00 90 FD | 	jmp	#LR__0289
041e0                 | LR__0272
041e0     8C FA 05 F6 | 	mov	result1, #140
041e4     7C 00 90 FD | 	jmp	#LR__0289
041e8                 | LR__0273
041e8     91 FA 05 F6 | 	mov	result1, #145
041ec     74 00 90 FD | 	jmp	#LR__0289
041f0                 | LR__0274
041f0     8B FA 05 F6 | 	mov	result1, #139
041f4     6C 00 90 FD | 	jmp	#LR__0289
041f8                 | LR__0275
041f8     8F FA 05 F6 | 	mov	result1, #143
041fc     64 00 90 FD | 	jmp	#LR__0289
04200                 | LR__0276
04200     75 FA 05 F6 | 	mov	result1, #117
04204     5C 00 90 FD | 	jmp	#LR__0289
04208                 | LR__0277
04208     75 FA 05 F6 | 	mov	result1, #117
0420c     54 00 90 FD | 	jmp	#LR__0289
04210                 | LR__0278
04210     6D FA 05 F6 | 	mov	result1, #109
04214     4C 00 90 FD | 	jmp	#LR__0289
04218                 | LR__0279
04218     6D FA 05 F6 | 	mov	result1, #109
0421c     44 00 90 FD | 	jmp	#LR__0289
04220                 | LR__0280
04220     5B FA 05 F6 | 	mov	result1, #91
04224     3C 00 90 FD | 	jmp	#LR__0289
04228                 | LR__0281
04228     56 FA 05 F6 | 	mov	result1, #86
0422c     34 00 90 FD | 	jmp	#LR__0289
04230                 | LR__0282
04230     70 FA 05 F6 | 	mov	result1, #112
04234     2C 00 90 FD | 	jmp	#LR__0289
04238                 | LR__0283
04238     70 FA 05 F6 | 	mov	result1, #112
0423c     24 00 90 FD | 	jmp	#LR__0289
04240                 | LR__0284
04240     57 FA 05 F6 | 	mov	result1, #87
04244     1C 00 90 FD | 	jmp	#LR__0289
04248                 | LR__0285
04248     57 FA 05 F6 | 	mov	result1, #87
0424c     14 00 90 FD | 	jmp	#LR__0289
04250                 | LR__0286
04250     77 FA 05 F6 | 	mov	result1, #119
04254     0C 00 90 FD | 	jmp	#LR__0289
04258                 | LR__0287
04258     78 FA 05 F6 | 	mov	result1, #120
0425c     04 00 90 FD | 	jmp	#LR__0289
04260                 | LR__0288
04260     00 FA 05 F6 | 	mov	result1, #0
04264                 | LR__0289
04264     A7 F0 03 F6 | 	mov	ptra, fp
04268     B2 00 A0 FD | 	call	#popregs_
0426c                 | _iscommand_ret
0426c     2D 00 64 FD | 	ret
04270                 | 
04270                 | ' 
04270                 | ' function isfunction(s as string) as ubyte
04270                 | _isfunction
04270     01 4A 05 F6 | 	mov	COUNT_, #1
04274     A8 00 A0 FD | 	call	#pushregs_
04278                 | ' 
04278                 | ' select case s
04278     09 1F 02 F6 | 	mov	local01, arg01
0427c     53 01 00 FF 
04280     0E 14 06 F6 | 	mov	arg02, ##@LR__4593
04284     0F 13 02 F6 | 	mov	arg01, local01
04288     B4 6A B1 FD | 	call	#__system___string_cmp
0428c     00 FA 0D F2 | 	cmp	result1, #0 wz
04290     E4 01 90 AD |  if_e	jmp	#LR__0290
04294     53 01 00 FF 
04298     13 14 06 F6 | 	mov	arg02, ##@LR__4594
0429c     0F 13 02 F6 | 	mov	arg01, local01
042a0     9C 6A B1 FD | 	call	#__system___string_cmp
042a4     00 FA 0D F2 | 	cmp	result1, #0 wz
042a8     D4 01 90 AD |  if_e	jmp	#LR__0291
042ac     53 01 00 FF 
042b0     18 14 06 F6 | 	mov	arg02, ##@LR__4595
042b4     0F 13 02 F6 | 	mov	arg01, local01
042b8     84 6A B1 FD | 	call	#__system___string_cmp
042bc     00 FA 0D F2 | 	cmp	result1, #0 wz
042c0     C4 01 90 AD |  if_e	jmp	#LR__0292
042c4     53 01 00 FF 
042c8     1C 14 06 F6 | 	mov	arg02, ##@LR__4596
042cc     0F 13 02 F6 | 	mov	arg01, local01
042d0     6C 6A B1 FD | 	call	#__system___string_cmp
042d4     00 FA 0D F2 | 	cmp	result1, #0 wz
042d8     B4 01 90 AD |  if_e	jmp	#LR__0293
042dc     53 01 00 FF 
042e0     20 14 06 F6 | 	mov	arg02, ##@LR__4597
042e4     0F 13 02 F6 | 	mov	arg01, local01
042e8     54 6A B1 FD | 	call	#__system___string_cmp
042ec     00 FA 0D F2 | 	cmp	result1, #0 wz
042f0     A4 01 90 AD |  if_e	jmp	#LR__0294
042f4     53 01 00 FF 
042f8     29 14 06 F6 | 	mov	arg02, ##@LR__4598
042fc     0F 13 02 F6 | 	mov	arg01, local01
04300     3C 6A B1 FD | 	call	#__system___string_cmp
04304     00 FA 0D F2 | 	cmp	result1, #0 wz
04308     94 01 90 AD |  if_e	jmp	#LR__0295
0430c     53 01 00 FF 
04310     2D 14 06 F6 | 	mov	arg02, ##@LR__4599
04314     0F 13 02 F6 | 	mov	arg01, local01
04318     24 6A B1 FD | 	call	#__system___string_cmp
0431c     00 FA 0D F2 | 	cmp	result1, #0 wz
04320     84 01 90 AD |  if_e	jmp	#LR__0296
04324     53 01 00 FF 
04328     3B 14 06 F6 | 	mov	arg02, ##@LR__4600
0432c     0F 13 02 F6 | 	mov	arg01, local01
04330     0C 6A B1 FD | 	call	#__system___string_cmp
04334     00 FA 0D F2 | 	cmp	result1, #0 wz
04338     74 01 90 AD |  if_e	jmp	#LR__0297
0433c     53 01 00 FF 
04340     43 14 06 F6 | 	mov	arg02, ##@LR__4601
04344     0F 13 02 F6 | 	mov	arg01, local01
04348     F4 69 B1 FD | 	call	#__system___string_cmp
0434c     00 FA 0D F2 | 	cmp	result1, #0 wz
04350     64 01 90 AD |  if_e	jmp	#LR__0298
04354     53 01 00 FF 
04358     4A 14 06 F6 | 	mov	arg02, ##@LR__4602
0435c     0F 13 02 F6 | 	mov	arg01, local01
04360     DC 69 B1 FD | 	call	#__system___string_cmp
04364     00 FA 0D F2 | 	cmp	result1, #0 wz
04368     54 01 90 AD |  if_e	jmp	#LR__0299
0436c     53 01 00 FF 
04370     51 14 06 F6 | 	mov	arg02, ##@LR__4603
04374     0F 13 02 F6 | 	mov	arg01, local01
04378     C4 69 B1 FD | 	call	#__system___string_cmp
0437c     00 FA 0D F2 | 	cmp	result1, #0 wz
04380     44 01 90 AD |  if_e	jmp	#LR__0300
04384     53 01 00 FF 
04388     58 14 06 F6 | 	mov	arg02, ##@LR__4604
0438c     0F 13 02 F6 | 	mov	arg01, local01
04390     AC 69 B1 FD | 	call	#__system___string_cmp
04394     00 FA 0D F2 | 	cmp	result1, #0 wz
04398     34 01 90 AD |  if_e	jmp	#LR__0301
0439c     53 01 00 FF 
043a0     5F 14 06 F6 | 	mov	arg02, ##@LR__4605
043a4     0F 13 02 F6 | 	mov	arg01, local01
043a8     94 69 B1 FD | 	call	#__system___string_cmp
043ac     00 FA 0D F2 | 	cmp	result1, #0 wz
043b0     24 01 90 AD |  if_e	jmp	#LR__0302
043b4     53 01 00 FF 
043b8     67 14 06 F6 | 	mov	arg02, ##@LR__4606
043bc     0F 13 02 F6 | 	mov	arg01, local01
043c0     7C 69 B1 FD | 	call	#__system___string_cmp
043c4     00 FA 0D F2 | 	cmp	result1, #0 wz
043c8     14 01 90 AD |  if_e	jmp	#LR__0303
043cc     53 01 00 FF 
043d0     6D 14 06 F6 | 	mov	arg02, ##@LR__4607
043d4     0F 13 02 F6 | 	mov	arg01, local01
043d8     64 69 B1 FD | 	call	#__system___string_cmp
043dc     00 FA 0D F2 | 	cmp	result1, #0 wz
043e0     04 01 90 AD |  if_e	jmp	#LR__0304
043e4     53 01 00 FF 
043e8     73 14 06 F6 | 	mov	arg02, ##@LR__4608
043ec     0F 13 02 F6 | 	mov	arg01, local01
043f0     4C 69 B1 FD | 	call	#__system___string_cmp
043f4     00 FA 0D F2 | 	cmp	result1, #0 wz
043f8     F4 00 90 AD |  if_e	jmp	#LR__0305
043fc     53 01 00 FF 
04400     77 14 06 F6 | 	mov	arg02, ##@LR__4609
04404     0F 13 02 F6 | 	mov	arg01, local01
04408     34 69 B1 FD | 	call	#__system___string_cmp
0440c     00 FA 0D F2 | 	cmp	result1, #0 wz
04410     E4 00 90 AD |  if_e	jmp	#LR__0306
04414     53 01 00 FF 
04418     7B 14 06 F6 | 	mov	arg02, ##@LR__4610
0441c     0F 13 02 F6 | 	mov	arg01, local01
04420     1C 69 B1 FD | 	call	#__system___string_cmp
04424     00 FA 0D F2 | 	cmp	result1, #0 wz
04428     D4 00 90 AD |  if_e	jmp	#LR__0307
0442c     53 01 00 FF 
04430     7F 14 06 F6 | 	mov	arg02, ##@LR__4611
04434     0F 13 02 F6 | 	mov	arg01, local01
04438     04 69 B1 FD | 	call	#__system___string_cmp
0443c     00 FA 0D F2 | 	cmp	result1, #0 wz
04440     C4 00 90 AD |  if_e	jmp	#LR__0308
04444     53 01 00 FF 
04448     85 14 06 F6 | 	mov	arg02, ##@LR__4612
0444c     0F 13 02 F6 | 	mov	arg01, local01
04450     EC 68 B1 FD | 	call	#__system___string_cmp
04454     00 FA 0D F2 | 	cmp	result1, #0 wz
04458     B4 00 90 AD |  if_e	jmp	#LR__0309
0445c     53 01 00 FF 
04460     8B 14 06 F6 | 	mov	arg02, ##@LR__4613
04464     0F 13 02 F6 | 	mov	arg01, local01
04468     D4 68 B1 FD | 	call	#__system___string_cmp
0446c     00 FA 0D F2 | 	cmp	result1, #0 wz
04470     A4 00 90 AD |  if_e	jmp	#LR__0310
04474     A8 00 90 FD | 	jmp	#LR__0311
04478                 | LR__0290
04478     85 FA 05 F6 | 	mov	result1, #133
0447c     A4 00 90 FD | 	jmp	#LR__0312
04480                 | LR__0291
04480     84 FA 05 F6 | 	mov	result1, #132
04484     9C 00 90 FD | 	jmp	#LR__0312
04488                 | LR__0292
04488     86 FA 05 F6 | 	mov	result1, #134
0448c     94 00 90 FD | 	jmp	#LR__0312
04490                 | LR__0293
04490     82 FA 05 F6 | 	mov	result1, #130
04494     8C 00 90 FD | 	jmp	#LR__0312
04498                 | LR__0294
04498     6F FA 05 F6 | 	mov	result1, #111
0449c     84 00 90 FD | 	jmp	#LR__0312
044a0                 | LR__0295
044a0     6F FA 05 F6 | 	mov	result1, #111
044a4     7C 00 90 FD | 	jmp	#LR__0312
044a8                 | LR__0296
044a8     93 FA 05 F6 | 	mov	result1, #147
044ac     74 00 90 FD | 	jmp	#LR__0312
044b0                 | LR__0297
044b0     62 FA 05 F6 | 	mov	result1, #98
044b4     6C 00 90 FD | 	jmp	#LR__0312
044b8                 | LR__0298
044b8     66 FA 05 F6 | 	mov	result1, #102
044bc     64 00 90 FD | 	jmp	#LR__0312
044c0                 | LR__0299
044c0     67 FA 05 F6 | 	mov	result1, #103
044c4     5C 00 90 FD | 	jmp	#LR__0312
044c8                 | LR__0300
044c8     64 FA 05 F6 | 	mov	result1, #100
044cc     54 00 90 FD | 	jmp	#LR__0312
044d0                 | LR__0301
044d0     65 FA 05 F6 | 	mov	result1, #101
044d4     4C 00 90 FD | 	jmp	#LR__0312
044d8                 | LR__0302
044d8     7B FA 05 F6 | 	mov	result1, #123
044dc     44 00 90 FD | 	jmp	#LR__0312
044e0                 | LR__0303
044e0     76 FA 05 F6 | 	mov	result1, #118
044e4     3C 00 90 FD | 	jmp	#LR__0312
044e8                 | LR__0304
044e8     7A FA 05 F6 | 	mov	result1, #122
044ec     34 00 90 FD | 	jmp	#LR__0312
044f0                 | LR__0305
044f0     54 FA 05 F6 | 	mov	result1, #84
044f4     2C 00 90 FD | 	jmp	#LR__0312
044f8                 | LR__0306
044f8     6B FA 05 F6 | 	mov	result1, #107
044fc     24 00 90 FD | 	jmp	#LR__0312
04500                 | LR__0307
04500     87 FA 05 F6 | 	mov	result1, #135
04504     1C 00 90 FD | 	jmp	#LR__0312
04508                 | LR__0308
04508     6A FA 05 F6 | 	mov	result1, #106
0450c     14 00 90 FD | 	jmp	#LR__0312
04510                 | LR__0309
04510     6E FA 05 F6 | 	mov	result1, #110
04514     0C 00 90 FD | 	jmp	#LR__0312
04518                 | LR__0310
04518     83 FA 05 F6 | 	mov	result1, #131
0451c     04 00 90 FD | 	jmp	#LR__0312
04520                 | LR__0311
04520     00 FA 05 F6 | 	mov	result1, #0
04524                 | LR__0312
04524     A7 F0 03 F6 | 	mov	ptra, fp
04528     B2 00 A0 FD | 	call	#popregs_
0452c                 | _isfunction_ret
0452c     2D 00 64 FD | 	ret
04530                 | 
04530                 | ' 
04530                 | ' function isname(s as string) as boolean
04530                 | _isname
04530     0D 4A 05 F6 | 	mov	COUNT_, #13
04534     A8 00 A0 FD | 	call	#pushregs_
04538     09 1F 02 F6 | 	mov	local01, arg01
0453c     09 21 02 F6 | 	mov	local02, arg01
04540     97 06 48 FB | 	callpa	#(@LR__0321-@LR__0320)>>2,fcache_load_ptr_
04544                 | LR__0320
04544     10 FB C9 FA | 	rdbyte	result1, local02 wz
04548     01 20 06 51 |  if_ne	add	local02, #1
0454c     F4 FF 9F 5D |  if_ne	jmp	#LR__0320
04550                 | LR__0321
04550     09 21 82 F1 | 	sub	local02, arg01
04554     10 FB 01 F6 | 	mov	result1, local02
04558     FD 22 0A F6 | 	mov	local03, result1 wz
0455c     00 FA 05 A6 |  if_e	mov	result1, #0
04560     34 02 90 AD |  if_e	jmp	#LR__0333
04564     0F 13 02 F6 | 	mov	arg01, local01
04568     01 14 06 F6 | 	mov	arg02, #1
0456c     01 16 06 F6 | 	mov	arg03, #1
04570     04 89 B1 FD | 	call	#__system__Mid_S
04574     FD 24 02 F6 | 	mov	local04, result1
04578                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04578     53 01 00 FF 
0457c     8F 14 06 F6 | 	mov	arg02, ##@LR__4614
04580     12 13 02 F6 | 	mov	arg01, local04
04584     B8 67 B1 FD | 	call	#__system___string_cmp
04588     00 FA 55 F2 | 	cmps	result1, #0 wc
0458c     18 00 90 CD |  if_b	jmp	#LR__0322
04590     53 01 00 FF 
04594     91 14 06 F6 | 	mov	arg02, ##@LR__4615
04598     12 13 02 F6 | 	mov	arg01, local04
0459c     A0 67 B1 FD | 	call	#__system___string_cmp
045a0     01 FA 55 F2 | 	cmps	result1, #1 wc
045a4     1C 00 90 CD |  if_b	jmp	#LR__0323
045a8                 | LR__0322
045a8     53 01 00 FF 
045ac     93 14 06 F6 | 	mov	arg02, ##@LR__4616
045b0     12 13 02 F6 | 	mov	arg01, local04
045b4     88 67 B1 FD | 	call	#__system___string_cmp
045b8     00 FA 0D F2 | 	cmp	result1, #0 wz
045bc     00 FA 05 56 |  if_ne	mov	result1, #0
045c0     D4 01 90 5D |  if_ne	jmp	#LR__0333
045c4                 | LR__0323
045c4                 | ' if l>2 then 
045c4     03 22 56 F2 | 	cmps	local03, #3 wc
045c8     C8 01 90 CD |  if_b	jmp	#LR__0332
045cc                 | '   for i=2 to l
045cc     02 26 06 F6 | 	mov	local05, #2
045d0     11 29 02 F6 | 	mov	local06, local03
045d4     01 28 06 F1 | 	add	local06, #1
045d8                 | LR__0324
045d8     14 27 52 F2 | 	cmps	local05, local06 wc
045dc     B4 01 90 3D |  if_ae	jmp	#LR__0331
045e0     0F 13 02 F6 | 	mov	arg01, local01
045e4     13 15 02 F6 | 	mov	arg02, local05
045e8     01 16 06 F6 | 	mov	arg03, #1
045ec     88 88 B1 FD | 	call	#__system__Mid_S
045f0     FD 24 02 F6 | 	mov	local04, result1
045f4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
045f4     11 27 52 F2 | 	cmps	local05, local03 wc
045f8     9C 00 90 3D |  if_ae	jmp	#LR__0327
045fc     53 01 00 FF 
04600     95 14 06 F6 | 	mov	arg02, ##@LR__4617
04604     12 13 02 F6 | 	mov	arg01, local04
04608     34 67 B1 FD | 	call	#__system___string_cmp
0460c     00 FA 55 F2 | 	cmps	result1, #0 wc
04610     18 00 90 CD |  if_b	jmp	#LR__0325
04614     53 01 00 FF 
04618     97 14 06 F6 | 	mov	arg02, ##@LR__4618
0461c     12 13 02 F6 | 	mov	arg01, local04
04620     1C 67 B1 FD | 	call	#__system___string_cmp
04624     01 FA 55 F2 | 	cmps	result1, #1 wc
04628     6C 00 90 CD |  if_b	jmp	#LR__0327
0462c                 | LR__0325
0462c     53 01 00 FF 
04630     99 14 06 F6 | 	mov	arg02, ##@LR__4619
04634     12 13 02 F6 | 	mov	arg01, local04
04638     04 67 B1 FD | 	call	#__system___string_cmp
0463c     00 FA 55 F2 | 	cmps	result1, #0 wc
04640     18 00 90 CD |  if_b	jmp	#LR__0326
04644     53 01 00 FF 
04648     9B 14 06 F6 | 	mov	arg02, ##@LR__4620
0464c     12 13 02 F6 | 	mov	arg01, local04
04650     EC 66 B1 FD | 	call	#__system___string_cmp
04654     01 FA 55 F2 | 	cmps	result1, #1 wc
04658     3C 00 90 CD |  if_b	jmp	#LR__0327
0465c                 | LR__0326
0465c     53 01 00 FF 
04660     9D 2A 06 F6 | 	mov	local07, ##@LR__4621
04664     12 13 02 F6 | 	mov	arg01, local04
04668     15 15 02 F6 | 	mov	arg02, local07
0466c     D0 66 B1 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     20 00 90 AD |  if_e	jmp	#LR__0327
04678     53 01 00 FF 
0467c     9F 2C 06 F6 | 	mov	local08, ##@LR__4622
04680     12 13 02 F6 | 	mov	arg01, local04
04684     16 15 02 F6 | 	mov	arg02, local08
04688     B4 66 B1 FD | 	call	#__system___string_cmp
0468c     FD 2E 0A F6 | 	mov	local09, result1 wz
04690     00 FA 05 56 |  if_ne	mov	result1, #0
04694     00 01 90 5D |  if_ne	jmp	#LR__0333
04698                 | LR__0327
04698                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04698     11 27 0A F2 | 	cmp	local05, local03 wz
0469c     EC 00 90 5D |  if_ne	jmp	#LR__0330
046a0     53 01 00 FF 
046a4     A1 30 06 F6 | 	mov	local10, ##@LR__4623
046a8     12 13 02 F6 | 	mov	arg01, local04
046ac     18 15 02 F6 | 	mov	arg02, local10
046b0     8C 66 B1 FD | 	call	#__system___string_cmp
046b4     FD 32 02 F6 | 	mov	local11, result1
046b8     00 32 56 F2 | 	cmps	local11, #0 wc
046bc     1C 00 90 CD |  if_b	jmp	#LR__0328
046c0     53 01 00 FF 
046c4     A3 14 06 F6 | 	mov	arg02, ##@LR__4624
046c8     12 13 02 F6 | 	mov	arg01, local04
046cc     70 66 B1 FD | 	call	#__system___string_cmp
046d0     FD 30 02 F6 | 	mov	local10, result1
046d4     01 30 56 F2 | 	cmps	local10, #1 wc
046d8     B0 00 90 CD |  if_b	jmp	#LR__0330
046dc                 | LR__0328
046dc     53 01 00 FF 
046e0     A5 14 06 F6 | 	mov	arg02, ##@LR__4625
046e4     12 13 02 F6 | 	mov	arg01, local04
046e8     54 66 B1 FD | 	call	#__system___string_cmp
046ec     00 FA 55 F2 | 	cmps	result1, #0 wc
046f0     1C 00 90 CD |  if_b	jmp	#LR__0329
046f4     53 01 00 FF 
046f8     A7 2E 06 F6 | 	mov	local09, ##@LR__4626
046fc     12 13 02 F6 | 	mov	arg01, local04
04700     17 15 02 F6 | 	mov	arg02, local09
04704     38 66 B1 FD | 	call	#__system___string_cmp
04708     01 FA 55 F2 | 	cmps	result1, #1 wc
0470c     7C 00 90 CD |  if_b	jmp	#LR__0330
04710                 | LR__0329
04710     53 01 00 FF 
04714     A9 2E 06 F6 | 	mov	local09, ##@LR__4627
04718     12 13 02 F6 | 	mov	arg01, local04
0471c     17 15 02 F6 | 	mov	arg02, local09
04720     1C 66 B1 FD | 	call	#__system___string_cmp
04724     00 FA 4D F2 | 	cmps	result1, #0 wz
04728     60 00 90 AD |  if_e	jmp	#LR__0330
0472c     53 01 00 FF 
04730     AB 2C 06 F6 | 	mov	local08, ##@LR__4628
04734     12 13 02 F6 | 	mov	arg01, local04
04738     16 15 02 F6 | 	mov	arg02, local08
0473c     00 66 B1 FD | 	call	#__system___string_cmp
04740     FD 2E 0A F6 | 	mov	local09, result1 wz
04744     44 00 90 AD |  if_e	jmp	#LR__0330
04748     53 01 00 FF 
0474c     AD 34 06 F6 | 	mov	local12, ##@LR__4629
04750     1A 2D 02 F6 | 	mov	local08, local12
04754     12 13 02 F6 | 	mov	arg01, local04
04758     16 15 02 F6 | 	mov	arg02, local08
0475c     E0 65 B1 FD | 	call	#__system___string_cmp
04760     FD 2A 0A F6 | 	mov	local07, result1 wz
04764     24 00 90 AD |  if_e	jmp	#LR__0330
04768     53 01 00 FF 
0476c     AF 36 06 F6 | 	mov	local13, ##@LR__4630
04770     1B 35 02 F6 | 	mov	local12, local13
04774     12 13 02 F6 | 	mov	arg01, local04
04778     1A 15 02 F6 | 	mov	arg02, local12
0477c     C0 65 B1 FD | 	call	#__system___string_cmp
04780     FD 2C 0A F6 | 	mov	local08, result1 wz
04784     00 FA 05 56 |  if_ne	mov	result1, #0
04788     0C 00 90 5D |  if_ne	jmp	#LR__0333
0478c                 | LR__0330
0478c     01 26 06 F1 | 	add	local05, #1
04790     44 FE 9F FD | 	jmp	#LR__0324
04794                 | LR__0331
04794                 | LR__0332
04794                 | ' return true
04794     01 FA 65 F6 | 	neg	result1, #1
04798                 | LR__0333
04798     A7 F0 03 F6 | 	mov	ptra, fp
0479c     B2 00 A0 FD | 	call	#popregs_
047a0                 | _isname_ret
047a0     2D 00 64 FD | 	ret
047a4                 | 
047a4                 | ' 
047a4                 | ' function isnum(s as string) as boolean
047a4                 | _isnum
047a4     0D 4A 05 F6 | 	mov	COUNT_, #13
047a8     A8 00 A0 FD | 	call	#pushregs_
047ac     09 1F 02 F6 | 	mov	local01, arg01
047b0     00 20 06 F6 | 	mov	local02, #0
047b4     00 22 06 F6 | 	mov	local03, #0
047b8     0F 13 02 F6 | 	mov	arg01, local01
047bc     09 25 02 F6 | 	mov	local04, arg01
047c0     97 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
047c4                 | LR__0340
047c4     12 FB C9 FA | 	rdbyte	result1, local04 wz
047c8     01 24 06 51 |  if_ne	add	local04, #1
047cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
047d0                 | LR__0341
047d0     09 25 82 F1 | 	sub	local04, arg01
047d4     12 FB 01 F6 | 	mov	result1, local04
047d8     FD 26 0A F6 | 	mov	local05, result1 wz
047dc     00 FA 05 A6 |  if_e	mov	result1, #0
047e0     8C 02 90 AD |  if_e	jmp	#LR__0352
047e4     0F 13 02 F6 | 	mov	arg01, local01
047e8     01 14 06 F6 | 	mov	arg02, #1
047ec     01 16 06 F6 | 	mov	arg03, #1
047f0     84 86 B1 FD | 	call	#__system__Mid_S
047f4     FD 28 02 F6 | 	mov	local06, result1
047f8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
047f8     53 01 00 FF 
047fc     B1 14 06 F6 | 	mov	arg02, ##@LR__4631
04800     14 13 02 F6 | 	mov	arg01, local06
04804     38 65 B1 FD | 	call	#__system___string_cmp
04808     00 FA 55 F2 | 	cmps	result1, #0 wc
0480c     18 00 90 CD |  if_b	jmp	#LR__0342
04810     53 01 00 FF 
04814     B3 14 06 F6 | 	mov	arg02, ##@LR__4632
04818     14 13 02 F6 | 	mov	arg01, local06
0481c     20 65 B1 FD | 	call	#__system___string_cmp
04820     01 FA 55 F2 | 	cmps	result1, #1 wc
04824     78 00 90 CD |  if_b	jmp	#LR__0343
04828                 | LR__0342
04828     53 01 00 FF 
0482c     B5 14 06 F6 | 	mov	arg02, ##@LR__4633
04830     14 13 02 F6 | 	mov	arg01, local06
04834     08 65 B1 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     60 00 90 AD |  if_e	jmp	#LR__0343
04840     53 01 00 FF 
04844     B7 2A 06 F6 | 	mov	local07, ##@LR__4634
04848     14 13 02 F6 | 	mov	arg01, local06
0484c     15 15 02 F6 | 	mov	arg02, local07
04850     EC 64 B1 FD | 	call	#__system___string_cmp
04854     00 FA 0D F2 | 	cmp	result1, #0 wz
04858     44 00 90 AD |  if_e	jmp	#LR__0343
0485c     53 01 00 FF 
04860     B9 2C 06 F6 | 	mov	local08, ##@LR__4635
04864     16 2B 02 F6 | 	mov	local07, local08
04868     14 13 02 F6 | 	mov	arg01, local06
0486c     15 15 02 F6 | 	mov	arg02, local07
04870     CC 64 B1 FD | 	call	#__system___string_cmp
04874     00 FA 4D F2 | 	cmps	result1, #0 wz
04878     24 00 90 AD |  if_e	jmp	#LR__0343
0487c     53 01 00 FF 
04880     BB 2E 06 F6 | 	mov	local09, ##@LR__4636
04884     17 2D 02 F6 | 	mov	local08, local09
04888     14 13 02 F6 | 	mov	arg01, local06
0488c     16 15 02 F6 | 	mov	arg02, local08
04890     AC 64 B1 FD | 	call	#__system___string_cmp
04894     FD 2A 0A F6 | 	mov	local07, result1 wz
04898     00 FA 05 56 |  if_ne	mov	result1, #0
0489c     D0 01 90 5D |  if_ne	jmp	#LR__0352
048a0                 | LR__0343
048a0                 | ' if m$="." then ds=1
048a0     53 01 00 FF 
048a4     BD 14 06 F6 | 	mov	arg02, ##@LR__4637
048a8     14 13 02 F6 | 	mov	arg01, local06
048ac     90 64 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     01 20 06 A6 |  if_e	mov	local02, #1
048b8                 | ' if l>1 then 
048b8     02 26 56 F2 | 	cmps	local05, #2 wc
048bc     AC 01 90 CD |  if_b	jmp	#LR__0351
048c0                 | '   for i=2 to l
048c0     02 30 06 F6 | 	mov	local10, #2
048c4     13 33 02 F6 | 	mov	local11, local05
048c8     01 32 06 F1 | 	add	local11, #1
048cc                 | LR__0344
048cc     19 31 52 F2 | 	cmps	local10, local11 wc
048d0     98 01 90 3D |  if_ae	jmp	#LR__0350
048d4     0F 13 02 F6 | 	mov	arg01, local01
048d8     18 15 02 F6 | 	mov	arg02, local10
048dc     01 16 06 F6 | 	mov	arg03, #1
048e0     94 85 B1 FD | 	call	#__system__Mid_S
048e4     FD 28 02 F6 | 	mov	local06, result1
048e8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
048e8     53 01 00 FF 
048ec     BF 14 06 F6 | 	mov	arg02, ##@LR__4638
048f0     14 13 02 F6 | 	mov	arg01, local06
048f4     48 64 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 55 F2 | 	cmps	result1, #0 wc
048fc     18 00 90 CD |  if_b	jmp	#LR__0345
04900     53 01 00 FF 
04904     C1 14 06 F6 | 	mov	arg02, ##@LR__4639
04908     14 13 02 F6 | 	mov	arg01, local06
0490c     30 64 B1 FD | 	call	#__system___string_cmp
04910     01 FA 55 F2 | 	cmps	result1, #1 wc
04914     98 00 90 CD |  if_b	jmp	#LR__0346
04918                 | LR__0345
04918     53 01 00 FF 
0491c     C3 14 06 F6 | 	mov	arg02, ##@LR__4640
04920     14 13 02 F6 | 	mov	arg01, local06
04924     18 64 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     80 00 90 AD |  if_e	jmp	#LR__0346
04930     53 01 00 FF 
04934     C5 2A 06 F6 | 	mov	local07, ##@LR__4641
04938     14 13 02 F6 | 	mov	arg01, local06
0493c     15 15 02 F6 | 	mov	arg02, local07
04940     FC 63 B1 FD | 	call	#__system___string_cmp
04944     00 FA 4D F2 | 	cmps	result1, #0 wz
04948     64 00 90 AD |  if_e	jmp	#LR__0346
0494c     53 01 00 FF 
04950     C7 2C 06 F6 | 	mov	local08, ##@LR__4642
04954     16 2B 02 F6 | 	mov	local07, local08
04958     14 13 02 F6 | 	mov	arg01, local06
0495c     15 15 02 F6 | 	mov	arg02, local07
04960     DC 63 B1 FD | 	call	#__system___string_cmp
04964     FD 34 0A F6 | 	mov	local12, result1 wz
04968     44 00 90 AD |  if_e	jmp	#LR__0346
0496c     53 01 00 FF 
04970     C9 2E 06 F6 | 	mov	local09, ##@LR__4643
04974     17 2D 02 F6 | 	mov	local08, local09
04978     14 13 02 F6 | 	mov	arg01, local06
0497c     16 15 02 F6 | 	mov	arg02, local08
04980     BC 63 B1 FD | 	call	#__system___string_cmp
04984     FD 2A 0A F6 | 	mov	local07, result1 wz
04988     24 00 90 AD |  if_e	jmp	#LR__0346
0498c     53 01 00 FF 
04990     CB 36 06 F6 | 	mov	local13, ##@LR__4644
04994     1B 2F 02 F6 | 	mov	local09, local13
04998     14 13 02 F6 | 	mov	arg01, local06
0499c     17 15 02 F6 | 	mov	arg02, local09
049a0     9C 63 B1 FD | 	call	#__system___string_cmp
049a4     FD 2C 0A F6 | 	mov	local08, result1 wz
049a8     00 FA 05 56 |  if_ne	mov	result1, #0
049ac     C0 00 90 5D |  if_ne	jmp	#LR__0352
049b0                 | LR__0346
049b0                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
049b0     53 01 00 FF 
049b4     CD 14 06 F6 | 	mov	arg02, ##@LR__4645
049b8     14 13 02 F6 | 	mov	arg01, local06
049bc     80 63 B1 FD | 	call	#__system___string_cmp
049c0     00 FA 0D F2 | 	cmp	result1, #0 wz
049c4     38 00 90 5D |  if_ne	jmp	#LR__0347
049c8     18 15 02 F6 | 	mov	arg02, local10
049cc     01 14 86 F1 | 	sub	arg02, #1
049d0     0F 13 02 F6 | 	mov	arg01, local01
049d4     01 16 06 F6 | 	mov	arg03, #1
049d8     9C 84 B1 FD | 	call	#__system__Mid_S
049dc     FD 12 02 F6 | 	mov	arg01, result1
049e0     30 86 B1 FD | 	call	#__system__LCase_S
049e4     FD 12 02 F6 | 	mov	arg01, result1
049e8     53 01 00 FF 
049ec     CF 14 06 F6 | 	mov	arg02, ##@LR__4646
049f0     4C 63 B1 FD | 	call	#__system___string_cmp
049f4     00 FA 0D F2 | 	cmp	result1, #0 wz
049f8     00 FA 05 56 |  if_ne	mov	result1, #0
049fc     70 00 90 5D |  if_ne	jmp	#LR__0352
04a00                 | LR__0347
04a00                 | '     if m$="." then ds+=1: if ds>1 then return false
04a00     53 01 00 FF 
04a04     D1 14 06 F6 | 	mov	arg02, ##@LR__4647
04a08     14 13 02 F6 | 	mov	arg01, local06
04a0c     30 63 B1 FD | 	call	#__system___string_cmp
04a10     00 FA 0D F2 | 	cmp	result1, #0 wz
04a14     01 20 06 A1 |  if_e	add	local02, #1
04a18     02 20 56 A2 |  if_e	cmps	local02, #2 wc
04a1c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
04a20     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0352
04a24                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
04a24     53 01 00 FF 
04a28     D3 14 06 F6 | 	mov	arg02, ##@LR__4648
04a2c     14 13 02 F6 | 	mov	arg01, local06
04a30     0C 63 B1 FD | 	call	#__system___string_cmp
04a34     00 FA 4D F2 | 	cmps	result1, #0 wz
04a38     18 00 90 AD |  if_e	jmp	#LR__0348
04a3c     53 01 00 FF 
04a40     D5 14 06 F6 | 	mov	arg02, ##@LR__4649
04a44     14 13 02 F6 | 	mov	arg01, local06
04a48     F4 62 B1 FD | 	call	#__system___string_cmp
04a4c     00 FA 4D F2 | 	cmps	result1, #0 wz
04a50     10 00 90 5D |  if_ne	jmp	#LR__0349
04a54                 | LR__0348
04a54     01 22 06 F1 | 	add	local03, #1
04a58     02 22 56 F2 | 	cmps	local03, #2 wc
04a5c     00 FA 05 36 |  if_ae	mov	result1, #0
04a60     0C 00 90 3D |  if_ae	jmp	#LR__0352
04a64                 | LR__0349
04a64     01 30 06 F1 | 	add	local10, #1
04a68     60 FE 9F FD | 	jmp	#LR__0344
04a6c                 | LR__0350
04a6c                 | LR__0351
04a6c                 | ' return true
04a6c     01 FA 65 F6 | 	neg	result1, #1
04a70                 | LR__0352
04a70     A7 F0 03 F6 | 	mov	ptra, fp
04a74     B2 00 A0 FD | 	call	#popregs_
04a78                 | _isnum_ret
04a78     2D 00 64 FD | 	ret
04a7c                 | 
04a7c                 | '   
04a7c                 | ' function isint(s as string) as boolean
04a7c                 | _isint
04a7c     05 4A 05 F6 | 	mov	COUNT_, #5
04a80     A8 00 A0 FD | 	call	#pushregs_
04a84     09 1F 02 F6 | 	mov	local01, arg01
04a88     09 21 02 F6 | 	mov	local02, arg01
04a8c     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
04a90                 | LR__0360
04a90     10 FB C9 FA | 	rdbyte	result1, local02 wz
04a94     01 20 06 51 |  if_ne	add	local02, #1
04a98     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
04a9c                 | LR__0361
04a9c     09 21 82 F1 | 	sub	local02, arg01
04aa0     10 FB 01 F6 | 	mov	result1, local02
04aa4     FD 20 0A F6 | 	mov	local02, result1 wz
04aa8     00 FA 05 A6 |  if_e	mov	result1, #0
04aac     18 01 90 AD |  if_e	jmp	#LR__0369
04ab0     0F 13 02 F6 | 	mov	arg01, local01
04ab4     01 14 06 F6 | 	mov	arg02, #1
04ab8     01 16 06 F6 | 	mov	arg03, #1
04abc     B8 83 B1 FD | 	call	#__system__Mid_S
04ac0     FD 22 02 F6 | 	mov	local03, result1
04ac4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04ac4     53 01 00 FF 
04ac8     D7 14 06 F6 | 	mov	arg02, ##@LR__4650
04acc     11 13 02 F6 | 	mov	arg01, local03
04ad0     6C 62 B1 FD | 	call	#__system___string_cmp
04ad4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ad8     18 00 90 CD |  if_b	jmp	#LR__0362
04adc     53 01 00 FF 
04ae0     D9 14 06 F6 | 	mov	arg02, ##@LR__4651
04ae4     11 13 02 F6 | 	mov	arg01, local03
04ae8     54 62 B1 FD | 	call	#__system___string_cmp
04aec     01 FA 55 F2 | 	cmps	result1, #1 wc
04af0     4C 00 90 CD |  if_b	jmp	#LR__0363
04af4                 | LR__0362
04af4     53 01 00 FF 
04af8     DB 14 06 F6 | 	mov	arg02, ##@LR__4652
04afc     11 13 02 F6 | 	mov	arg01, local03
04b00     3C 62 B1 FD | 	call	#__system___string_cmp
04b04     00 FA 0D F2 | 	cmp	result1, #0 wz
04b08     34 00 90 AD |  if_e	jmp	#LR__0363
04b0c     53 01 00 FF 
04b10     DD 14 06 F6 | 	mov	arg02, ##@LR__4653
04b14     11 13 02 F6 | 	mov	arg01, local03
04b18     24 62 B1 FD | 	call	#__system___string_cmp
04b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b20     1C 00 90 AD |  if_e	jmp	#LR__0363
04b24     53 01 00 FF 
04b28     DF 14 06 F6 | 	mov	arg02, ##@LR__4654
04b2c     11 13 02 F6 | 	mov	arg01, local03
04b30     0C 62 B1 FD | 	call	#__system___string_cmp
04b34     00 FA 0D F2 | 	cmp	result1, #0 wz
04b38     00 FA 05 56 |  if_ne	mov	result1, #0
04b3c     88 00 90 5D |  if_ne	jmp	#LR__0369
04b40                 | LR__0363
04b40                 | ' 
04b40                 | ' if l>1 then 
04b40     02 20 56 F2 | 	cmps	local02, #2 wc
04b44     7C 00 90 CD |  if_b	jmp	#LR__0368
04b48                 | '   for i=2 to l
04b48     02 24 06 F6 | 	mov	local04, #2
04b4c     10 27 02 F6 | 	mov	local05, local02
04b50     01 26 06 F1 | 	add	local05, #1
04b54                 | LR__0364
04b54     13 25 52 F2 | 	cmps	local04, local05 wc
04b58     68 00 90 3D |  if_ae	jmp	#LR__0367
04b5c     0F 13 02 F6 | 	mov	arg01, local01
04b60     12 15 02 F6 | 	mov	arg02, local04
04b64     01 16 06 F6 | 	mov	arg03, #1
04b68     0C 83 B1 FD | 	call	#__system__Mid_S
04b6c     FD 22 02 F6 | 	mov	local03, result1
04b70                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04b70     53 01 00 FF 
04b74     E1 14 06 F6 | 	mov	arg02, ##@LR__4655
04b78     11 13 02 F6 | 	mov	arg01, local03
04b7c     C0 61 B1 FD | 	call	#__system___string_cmp
04b80     00 FA 55 F2 | 	cmps	result1, #0 wc
04b84     18 00 90 CD |  if_b	jmp	#LR__0365
04b88     53 01 00 FF 
04b8c     E3 14 06 F6 | 	mov	arg02, ##@LR__4656
04b90     11 13 02 F6 | 	mov	arg01, local03
04b94     A8 61 B1 FD | 	call	#__system___string_cmp
04b98     01 FA 55 F2 | 	cmps	result1, #1 wc
04b9c     1C 00 90 CD |  if_b	jmp	#LR__0366
04ba0                 | LR__0365
04ba0     53 01 00 FF 
04ba4     E5 14 06 F6 | 	mov	arg02, ##@LR__4657
04ba8     11 13 02 F6 | 	mov	arg01, local03
04bac     90 61 B1 FD | 	call	#__system___string_cmp
04bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb4     00 FA 05 56 |  if_ne	mov	result1, #0
04bb8     0C 00 90 5D |  if_ne	jmp	#LR__0369
04bbc                 | LR__0366
04bbc     01 24 06 F1 | 	add	local04, #1
04bc0     90 FF 9F FD | 	jmp	#LR__0364
04bc4                 | LR__0367
04bc4                 | LR__0368
04bc4                 | ' return true
04bc4     01 FA 65 F6 | 	neg	result1, #1
04bc8                 | LR__0369
04bc8     A7 F0 03 F6 | 	mov	ptra, fp
04bcc     B2 00 A0 FD | 	call	#popregs_
04bd0                 | _isint_ret
04bd0     2D 00 64 FD | 	ret
04bd4                 | 
04bd4                 | ' 
04bd4                 | ' function isdec(s as string) as boolean
04bd4                 | _isdec
04bd4     05 4A 05 F6 | 	mov	COUNT_, #5
04bd8     A8 00 A0 FD | 	call	#pushregs_
04bdc     09 1F 02 F6 | 	mov	local01, arg01
04be0     09 21 02 F6 | 	mov	local02, arg01
04be4     97 06 48 FB | 	callpa	#(@LR__0371-@LR__0370)>>2,fcache_load_ptr_
04be8                 | LR__0370
04be8     10 FB C9 FA | 	rdbyte	result1, local02 wz
04bec     01 20 06 51 |  if_ne	add	local02, #1
04bf0     F4 FF 9F 5D |  if_ne	jmp	#LR__0370
04bf4                 | LR__0371
04bf4     09 21 82 F1 | 	sub	local02, arg01
04bf8     10 FB 01 F6 | 	mov	result1, local02
04bfc     FD 20 0A F6 | 	mov	local02, result1 wz
04c00     00 FA 05 A6 |  if_e	mov	result1, #0
04c04     80 00 90 AD |  if_e	jmp	#LR__0376
04c08                 | ' for i=1 to l
04c08     01 22 06 F6 | 	mov	local03, #1
04c0c     10 25 02 F6 | 	mov	local04, local02
04c10     01 24 06 F1 | 	add	local04, #1
04c14                 | LR__0372
04c14     12 23 52 F2 | 	cmps	local03, local04 wc
04c18     68 00 90 3D |  if_ae	jmp	#LR__0375
04c1c     0F 13 02 F6 | 	mov	arg01, local01
04c20     11 15 02 F6 | 	mov	arg02, local03
04c24     01 16 06 F6 | 	mov	arg03, #1
04c28     4C 82 B1 FD | 	call	#__system__Mid_S
04c2c     FD 26 02 F6 | 	mov	local05, result1
04c30                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04c30     53 01 00 FF 
04c34     E7 14 06 F6 | 	mov	arg02, ##@LR__4658
04c38     13 13 02 F6 | 	mov	arg01, local05
04c3c     00 61 B1 FD | 	call	#__system___string_cmp
04c40     00 FA 55 F2 | 	cmps	result1, #0 wc
04c44     18 00 90 CD |  if_b	jmp	#LR__0373
04c48     53 01 00 FF 
04c4c     E9 14 06 F6 | 	mov	arg02, ##@LR__4659
04c50     13 13 02 F6 | 	mov	arg01, local05
04c54     E8 60 B1 FD | 	call	#__system___string_cmp
04c58     01 FA 55 F2 | 	cmps	result1, #1 wc
04c5c     1C 00 90 CD |  if_b	jmp	#LR__0374
04c60                 | LR__0373
04c60     53 01 00 FF 
04c64     EB 14 06 F6 | 	mov	arg02, ##@LR__4660
04c68     13 13 02 F6 | 	mov	arg01, local05
04c6c     D0 60 B1 FD | 	call	#__system___string_cmp
04c70     00 FA 0D F2 | 	cmp	result1, #0 wz
04c74     00 FA 05 56 |  if_ne	mov	result1, #0
04c78     0C 00 90 5D |  if_ne	jmp	#LR__0376
04c7c                 | LR__0374
04c7c     01 22 06 F1 | 	add	local03, #1
04c80     90 FF 9F FD | 	jmp	#LR__0372
04c84                 | LR__0375
04c84                 | ' return true
04c84     01 FA 65 F6 | 	neg	result1, #1
04c88                 | LR__0376
04c88     A7 F0 03 F6 | 	mov	ptra, fp
04c8c     B2 00 A0 FD | 	call	#popregs_
04c90                 | _isdec_ret
04c90     2D 00 64 FD | 	ret
04c94                 | 
04c94                 | ' 
04c94                 | ' function isstring(s as string) as boolean
04c94                 | _isstring
04c94     01 4A 05 F6 | 	mov	COUNT_, #1
04c98     A8 00 A0 FD | 	call	#pushregs_
04c9c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04c9c     09 1F 02 F6 | 	mov	local01, arg01
04ca0     01 14 06 F6 | 	mov	arg02, #1
04ca4     B8 80 B1 FD | 	call	#__system__Left_S
04ca8     FD 12 02 F6 | 	mov	arg01, result1
04cac     53 01 00 FF 
04cb0     ED 14 06 F6 | 	mov	arg02, ##@LR__4661
04cb4     88 60 B1 FD | 	call	#__system___string_cmp
04cb8     00 FA 4D F2 | 	cmps	result1, #0 wz
04cbc     28 00 90 5D |  if_ne	jmp	#LR__0380
04cc0     0F 13 02 F6 | 	mov	arg01, local01
04cc4     01 14 06 F6 | 	mov	arg02, #1
04cc8     1C 81 B1 FD | 	call	#__system__Right_S
04ccc     FD 12 02 F6 | 	mov	arg01, result1
04cd0     53 01 00 FF 
04cd4     EF 14 06 F6 | 	mov	arg02, ##@LR__4662
04cd8     64 60 B1 FD | 	call	#__system___string_cmp
04cdc     00 FA 4D F2 | 	cmps	result1, #0 wz
04ce0     01 FA 65 A6 |  if_e	neg	result1, #1
04ce4     04 00 90 AD |  if_e	jmp	#LR__0381
04ce8                 | LR__0380
04ce8     00 FA 05 F6 | 	mov	result1, #0
04cec                 | LR__0381
04cec     A7 F0 03 F6 | 	mov	ptra, fp
04cf0     B2 00 A0 FD | 	call	#popregs_
04cf4                 | _isstring_ret
04cf4     2D 00 64 FD | 	ret
04cf8                 | 
04cf8                 | ' 
04cf8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04cf8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04cf8                 | ' 
04cf8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04cf8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04cf8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04cf8                 | ' 
04cf8                 | ' '----- delete a line from a program
04cf8                 | ' 
04cf8                 | ' function deleteline(aline as ulong) as integer
04cf8                 | _deleteline
04cf8     03 4A 05 F6 | 	mov	COUNT_, #3
04cfc     A8 00 A0 FD | 	call	#pushregs_
04d00     2C F0 07 F1 | 	add	ptra, #44
04d04     04 4E 05 F1 | 	add	fp, #4
04d08     A7 12 62 FC | 	wrlong	arg01, fp
04d0c     6A 00 00 FF 
04d10     08 E4 05 F1 | 	add	objptr, ##54280
04d14     F2 1E 02 FB | 	rdlong	local01, objptr
04d18     0C 4E 05 F1 | 	add	fp, #12
04d1c     A7 1E 62 FC | 	wrlong	local01, fp
04d20     10 4E 85 F1 | 	sub	fp, #16
04d24                 | ' 
04d24                 | ' 
04d24                 | ' searchptr=programstart
04d24                 | ' 
04d24                 | ' do
04d24     5E 00 00 FF 
04d28     48 E5 85 F1 | 	sub	objptr, ##48456
04d2c                 | LR__0390
04d2c     14 4E 05 F1 | 	add	fp, #20
04d30     A7 12 02 F6 | 	mov	arg01, fp
04d34     04 4E 85 F1 | 	sub	fp, #4
04d38     A7 14 02 FB | 	rdlong	arg02, fp
04d3c     10 4E 85 F1 | 	sub	fp, #16
04d40     18 16 06 F6 | 	mov	arg03, #24
04d44     68 54 B1 FD | 	call	#_psram_spin2_read1
04d48     10 4E 05 F1 | 	add	fp, #16
04d4c     A7 1E 02 FB | 	rdlong	local01, fp
04d50     08 4E 85 F1 | 	sub	fp, #8
04d54     A7 1E 62 FC | 	wrlong	local01, fp
04d58     20 4E 05 F1 | 	add	fp, #32
04d5c     A7 1E 02 FB | 	rdlong	local01, fp
04d60     18 4E 85 F1 | 	sub	fp, #24
04d64     A7 1E 62 FC | 	wrlong	local01, fp
04d68     04 4E 05 F1 | 	add	fp, #4
04d6c     A7 1E 02 FB | 	rdlong	local01, fp
04d70     10 4E 85 F1 | 	sub	fp, #16
04d74     A7 16 02 FB | 	rdlong	arg03, fp
04d78     04 4E 85 F1 | 	sub	fp, #4
04d7c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04d80     28 4E 05 C1 |  if_b	add	fp, #40
04d84     A7 20 02 CB |  if_b	rdlong	local02, fp
04d88     28 4E 85 C1 |  if_b	sub	fp, #40
04d8c     FF FF 3F CF 
04d90     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04d94     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0390
04d98     0B 00 00 FF 
04d9c     C0 E4 85 F1 | 	sub	objptr, ##5824
04da0                 | ' 
04da0                 | ' 
04da0                 | ' if header(0)<>aline then return -1
04da0     14 4E 05 F1 | 	add	fp, #20
04da4     A7 1E 02 FB | 	rdlong	local01, fp
04da8     10 4E 85 F1 | 	sub	fp, #16
04dac     A7 22 02 FB | 	rdlong	local03, fp
04db0     04 4E 85 F1 | 	sub	fp, #4
04db4     11 1F 0A F2 | 	cmp	local01, local03 wz
04db8     01 FA 65 56 |  if_ne	neg	result1, #1
04dbc     58 03 90 5D |  if_ne	jmp	#LR__0396
04dc0     08 4E 05 F1 | 	add	fp, #8
04dc4     A7 12 02 FB | 	rdlong	arg01, fp
04dc8     08 4E 85 F1 | 	sub	fp, #8
04dcc     01 14 66 F6 | 	neg	arg02, #1
04dd0     01 16 06 F6 | 	mov	arg03, #1
04dd4     00 18 06 F6 | 	mov	arg04, #0
04dd8     0B 00 00 FF 
04ddc     C0 E4 05 F1 | 	add	objptr, ##5824
04de0                 | '     return fill(addr, pattern, count, listPtr, 4)
04de0     04 1A 06 F6 | 	mov	arg05, #4
04de4     00 55 B1 FD | 	call	#_psram_spin2_fill
04de8     0B 00 00 FF 
04dec     C0 E4 85 F1 | 	sub	objptr, ##5824
04df0                 | ' 
04df0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04df0                 | ' 
04df0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
04df0     28 4E 05 F1 | 	add	fp, #40
04df4     A7 1E 02 FB | 	rdlong	local01, fp
04df8     28 4E 85 F1 | 	sub	fp, #40
04dfc     FF FF 3F FF 
04e00     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e04     24 4E 05 A1 |  if_e	add	fp, #36
04e08     A7 22 02 AB |  if_e	rdlong	local03, fp
04e0c     24 4E 85 A1 |  if_e	sub	fp, #36
04e10     FF FF 7F AF 
04e14     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04e18     9C 00 90 5D |  if_ne	jmp	#LR__0391
04e1c     6A 00 00 FF 
04e20     08 E4 05 F1 | 	add	objptr, ##54280
04e24     F2 00 68 FC | 	wrlong	#0, objptr
04e28     07 00 00 FF 
04e2c     28 E4 85 F1 | 	sub	objptr, ##3624
04e30     F2 00 68 FC | 	wrlong	#0, objptr
04e34     07 00 00 FF 
04e38     2C E4 05 F1 | 	add	objptr, ##3628
04e3c     F2 00 68 FC | 	wrlong	#0, objptr
04e40     04 E4 05 F1 | 	add	objptr, #4
04e44     FF FF FF FF 
04e48     F2 FE 6B FC | 	wrlong	##-1, objptr
04e4c     00 12 06 F6 | 	mov	arg01, #0
04e50     01 14 66 F6 | 	neg	arg02, #1
04e54     01 16 06 F6 | 	mov	arg03, #1
04e58     00 18 06 F6 | 	mov	arg04, #0
04e5c     5E 00 00 FF 
04e60     50 E5 85 F1 | 	sub	objptr, ##48464
04e64                 | '     return fill(addr, pattern, count, listPtr, 4)
04e64     04 1A 06 F6 | 	mov	arg05, #4
04e68     7C 54 B1 FD | 	call	#_psram_spin2_fill
04e6c     10 12 06 F6 | 	mov	arg01, #16
04e70     01 14 66 F6 | 	neg	arg02, #1
04e74     01 16 06 F6 | 	mov	arg03, #1
04e78     00 18 06 F6 | 	mov	arg04, #0
04e7c                 | '     return fill(addr, pattern, count, listPtr, 4)
04e7c     04 1A 06 F6 | 	mov	arg05, #4
04e80     64 54 B1 FD | 	call	#_psram_spin2_fill
04e84     14 12 06 F6 | 	mov	arg01, #20
04e88     1E 14 CE F9 | 	bmask	arg02, #30
04e8c     01 16 06 F6 | 	mov	arg03, #1
04e90     00 18 06 F6 | 	mov	arg04, #0
04e94                 | '     return fill(addr, pattern, count, listPtr, 4)
04e94     04 1A 06 F6 | 	mov	arg05, #4
04e98     4C 54 B1 FD | 	call	#_psram_spin2_fill
04e9c     6E 00 00 FF 
04ea0     74 E4 05 F1 | 	add	objptr, ##56436
04ea4     F2 00 68 FC | 	wrlong	#0, objptr
04ea8     04 E4 05 F1 | 	add	objptr, #4
04eac     F2 00 68 FC | 	wrlong	#0, objptr
04eb0     79 00 00 FF 
04eb4     38 E5 85 F1 | 	sub	objptr, ##62264
04eb8                 | LR__0391
04eb8                 | ' 
04eb8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04eb8     28 4E 05 F1 | 	add	fp, #40
04ebc     A7 1E 02 FB | 	rdlong	local01, fp
04ec0     28 4E 85 F1 | 	sub	fp, #40
04ec4     FF FF 3F FF 
04ec8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ecc     88 00 90 5D |  if_ne	jmp	#LR__0392
04ed0     24 4E 05 F1 | 	add	fp, #36
04ed4     A7 22 02 FB | 	rdlong	local03, fp
04ed8     24 4E 85 F1 | 	sub	fp, #36
04edc     FF FF 7F FF 
04ee0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04ee4     70 00 90 AD |  if_e	jmp	#LR__0392
04ee8     24 4E 05 F1 | 	add	fp, #36
04eec     A7 12 02 FB | 	rdlong	arg01, fp
04ef0     24 4E 85 F1 | 	sub	fp, #36
04ef4     14 12 06 F1 | 	add	arg01, #20
04ef8     1E 14 CE F9 | 	bmask	arg02, #30
04efc     01 16 06 F6 | 	mov	arg03, #1
04f00     00 18 06 F6 | 	mov	arg04, #0
04f04     0B 00 00 FF 
04f08     C0 E4 05 F1 | 	add	objptr, ##5824
04f0c                 | '     return fill(addr, pattern, count, listPtr, 4)
04f0c     04 1A 06 F6 | 	mov	arg05, #4
04f10     D4 53 B1 FD | 	call	#_psram_spin2_fill
04f14     24 4E 05 F1 | 	add	fp, #36
04f18     A7 1E 02 FB | 	rdlong	local01, fp
04f1c     5E 00 00 FF 
04f20     50 E5 05 F1 | 	add	objptr, ##48464
04f24     F2 1E 62 FC | 	wrlong	local01, objptr
04f28     6A 00 00 FF 
04f2c     10 E4 85 F1 | 	sub	objptr, ##54288
04f30     A7 12 02 FB | 	rdlong	arg01, fp
04f34     24 4E 85 F1 | 	sub	fp, #36
04f38     88 29 B1 FD | 	call	#_pslpeek
04f3c     6A 00 00 FF 
04f40     0C E4 05 F1 | 	add	objptr, ##54284
04f44     F2 FA 61 FC | 	wrlong	result1, objptr
04f48     6A 00 00 FF 
04f4c     0C E4 85 F1 | 	sub	objptr, ##54284
04f50                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04f50                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04f50                 | '   lastline=pslpeek(header(4))
04f50                 | '   return 0
04f50     00 FA 05 F6 | 	mov	result1, #0
04f54     C0 01 90 FD | 	jmp	#LR__0396
04f58                 | LR__0392
04f58                 | ' 
04f58                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04f58     28 4E 05 F1 | 	add	fp, #40
04f5c     A7 1E 02 FB | 	rdlong	local01, fp
04f60     28 4E 85 F1 | 	sub	fp, #40
04f64     FF FF 3F FF 
04f68     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04f6c     6C 00 90 AD |  if_e	jmp	#LR__0393
04f70     24 4E 05 F1 | 	add	fp, #36
04f74     A7 22 02 FB | 	rdlong	local03, fp
04f78     24 4E 85 F1 | 	sub	fp, #36
04f7c     FF FF 7F FF 
04f80     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04f84     54 00 90 5D |  if_ne	jmp	#LR__0393
04f88     28 4E 05 F1 | 	add	fp, #40
04f8c     A7 12 02 FB | 	rdlong	arg01, fp
04f90     28 4E 85 F1 | 	sub	fp, #40
04f94     10 12 06 F1 | 	add	arg01, #16
04f98     01 14 66 F6 | 	neg	arg02, #1
04f9c     01 16 06 F6 | 	mov	arg03, #1
04fa0     00 18 06 F6 | 	mov	arg04, #0
04fa4     0B 00 00 FF 
04fa8     C0 E4 05 F1 | 	add	objptr, ##5824
04fac                 | '     return fill(addr, pattern, count, listPtr, 4)
04fac     04 1A 06 F6 | 	mov	arg05, #4
04fb0     34 53 B1 FD | 	call	#_psram_spin2_fill
04fb4     28 4E 05 F1 | 	add	fp, #40
04fb8     A7 1E 02 FB | 	rdlong	local01, fp
04fbc     28 4E 85 F1 | 	sub	fp, #40
04fc0     5E 00 00 FF 
04fc4     48 E5 05 F1 | 	add	objptr, ##48456
04fc8     F2 1E 62 FC | 	wrlong	local01, objptr
04fcc     6A 00 00 FF 
04fd0     08 E4 85 F1 | 	sub	objptr, ##54280
04fd4                 | ' '   print "deleted first line"
04fd4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04fd4                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04fd4                 | '   return 0
04fd4     00 FA 05 F6 | 	mov	result1, #0
04fd8     3C 01 90 FD | 	jmp	#LR__0396
04fdc                 | LR__0393
04fdc                 | ' 
04fdc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04fdc     28 4E 05 F1 | 	add	fp, #40
04fe0     A7 1E 02 FB | 	rdlong	local01, fp
04fe4     28 4E 85 F1 | 	sub	fp, #40
04fe8     FF FF 3F FF 
04fec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ff0     24 4E 05 51 |  if_ne	add	fp, #36
04ff4     A7 22 02 5B |  if_ne	rdlong	local03, fp
04ff8     24 4E 85 51 |  if_ne	sub	fp, #36
04ffc     FF FF 7F 5F 
05000     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05004     68 00 90 AD |  if_e	jmp	#LR__0394
05008     28 4E 05 F1 | 	add	fp, #40
0500c     A7 12 02 FB | 	rdlong	arg01, fp
05010     10 12 06 F1 | 	add	arg01, #16
05014     04 4E 85 F1 | 	sub	fp, #4
05018     A7 14 02 FB | 	rdlong	arg02, fp
0501c     24 4E 85 F1 | 	sub	fp, #36
05020     01 16 06 F6 | 	mov	arg03, #1
05024     00 18 06 F6 | 	mov	arg04, #0
05028     0B 00 00 FF 
0502c     C0 E4 05 F1 | 	add	objptr, ##5824
05030                 | '     return fill(addr, pattern, count, listPtr, 4)
05030     04 1A 06 F6 | 	mov	arg05, #4
05034     B0 52 B1 FD | 	call	#_psram_spin2_fill
05038     24 4E 05 F1 | 	add	fp, #36
0503c     A7 12 02 FB | 	rdlong	arg01, fp
05040     14 12 06 F1 | 	add	arg01, #20
05044     04 4E 05 F1 | 	add	fp, #4
05048     A7 14 02 FB | 	rdlong	arg02, fp
0504c     28 4E 85 F1 | 	sub	fp, #40
05050     01 16 06 F6 | 	mov	arg03, #1
05054     00 18 06 F6 | 	mov	arg04, #0
05058                 | '     return fill(addr, pattern, count, listPtr, 4)
05058     04 1A 06 F6 | 	mov	arg05, #4
0505c     88 52 B1 FD | 	call	#_psram_spin2_fill
05060     0B 00 00 FF 
05064     C0 E4 85 F1 | 	sub	objptr, ##5824
05068                 | '    pslpoke(header(5)+16,header(4))  
05068                 | '    pslpoke(header(4)+20, header(5))
05068                 | '    return 0
05068     00 FA 05 F6 | 	mov	result1, #0
0506c     A8 00 90 FD | 	jmp	#LR__0396
05070                 | LR__0394
05070     10 4E 05 F1 | 	add	fp, #16
05074     A7 1E 02 FB | 	rdlong	local01, fp
05078     08 4E 85 F1 | 	sub	fp, #8
0507c     A7 1E 62 FC | 	wrlong	local01, fp
05080     6A 00 00 FF 
05084     08 E4 05 F1 | 	add	objptr, ##54280
05088     F2 1E 02 FB | 	rdlong	local01, objptr
0508c     08 4E 05 F1 | 	add	fp, #8
05090     A7 1E 62 FC | 	wrlong	local01, fp
05094     10 4E 85 F1 | 	sub	fp, #16
05098                 | ' 
05098                 | ' 
05098                 | ' 
05098                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05098                 | ' 
05098                 | ' lineptr2=searchptr
05098                 | ' searchptr=programstart
05098                 | ' 
05098                 | ' do
05098     5E 00 00 FF 
0509c     48 E5 85 F1 | 	sub	objptr, ##48456
050a0                 | LR__0395
050a0     14 4E 05 F1 | 	add	fp, #20
050a4     A7 12 02 F6 | 	mov	arg01, fp
050a8     04 4E 85 F1 | 	sub	fp, #4
050ac     A7 14 02 FB | 	rdlong	arg02, fp
050b0     10 4E 85 F1 | 	sub	fp, #16
050b4     18 16 06 F6 | 	mov	arg03, #24
050b8     F4 50 B1 FD | 	call	#_psram_spin2_read1
050bc     10 4E 05 F1 | 	add	fp, #16
050c0     A7 1E 02 FB | 	rdlong	local01, fp
050c4     08 4E 85 F1 | 	sub	fp, #8
050c8     A7 1E 62 FC | 	wrlong	local01, fp
050cc     20 4E 05 F1 | 	add	fp, #32
050d0     A7 1E 02 FB | 	rdlong	local01, fp
050d4     18 4E 85 F1 | 	sub	fp, #24
050d8     A7 1E 62 FC | 	wrlong	local01, fp
050dc     04 4E 05 F1 | 	add	fp, #4
050e0     A7 1E 02 FB | 	rdlong	local01, fp
050e4     10 4E 85 F1 | 	sub	fp, #16
050e8     A7 22 02 FB | 	rdlong	local03, fp
050ec     04 4E 85 F1 | 	sub	fp, #4
050f0     11 1F 12 F2 | 	cmp	local01, local03 wc
050f4     28 4E 05 C1 |  if_b	add	fp, #40
050f8     A7 20 02 CB |  if_b	rdlong	local02, fp
050fc     28 4E 85 C1 |  if_b	sub	fp, #40
05100     FF FF 3F CF 
05104     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05108     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0395
0510c     0B 00 00 FF 
05110     C0 E4 85 F1 | 	sub	objptr, ##5824
05114     00 FA 05 F6 | 	mov	result1, #0
05118                 | LR__0396
05118     A7 F0 03 F6 | 	mov	ptra, fp
0511c     B2 00 A0 FD | 	call	#popregs_
05120                 | _deleteline_ret
05120     2D 00 64 FD | 	ret
05124                 | 
05124                 | ' 
05124                 | ' sub save_line
05124                 | _save_line
05124     03 4A 05 F6 | 	mov	COUNT_, #3
05128     A8 00 A0 FD | 	call	#pushregs_
0512c     6A 00 00 FF 
05130     00 E4 05 F1 | 	add	objptr, ##54272
05134     F2 16 02 FB | 	rdlong	arg03, objptr
05138     01 16 06 F1 | 	add	arg03, #1
0513c     05 00 00 FF 
05140     18 E4 85 F1 | 	sub	objptr, ##2584
05144     F2 14 02 FB | 	rdlong	arg02, objptr
05148     0B 15 02 FD | 	qmul	arg02, arg03
0514c     0E 00 00 FF 
05150     44 E4 85 F1 | 	sub	objptr, ##7236
05154     F2 12 02 FB | 	rdlong	arg01, objptr
05158     56 00 00 FF 
0515c     A4 E5 85 F1 | 	sub	objptr, ##44452
05160     09 1F 02 F6 | 	mov	local01, arg01
05164     18 20 62 FD | 	getqx	local02
05168     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
0516c                 | LR__0400
0516c     0F FB C9 FA | 	rdbyte	result1, local01 wz
05170     01 1E 06 51 |  if_ne	add	local01, #1
05174     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
05178                 | LR__0401
05178     09 1F 82 F1 | 	sub	local01, arg01
0517c     03 1E CE F7 | 	test	local01, #3 wz
05180     02 1E 46 50 |  if_ne	shr	local01, #2
05184     01 1E 06 51 |  if_ne	add	local01, #1
05188     02 1E 66 50 |  if_ne	shl	local01, #2
0518c     10 23 02 F6 | 	mov	local03, local02
05190     0F 23 02 F1 | 	add	local03, local01
05194     62 00 00 FF 
05198     E0 E5 05 F1 | 	add	objptr, ##50656
0519c     F2 16 02 FB | 	rdlong	arg03, objptr
051a0     10 17 02 F1 | 	add	arg03, local02
051a4     04 00 00 FF 
051a8     28 E4 05 F1 | 	add	objptr, ##2088
051ac     F2 16 62 FC | 	wrlong	arg03, objptr
051b0     04 E4 05 F1 | 	add	objptr, #4
051b4     F2 1E 62 FC | 	wrlong	local01, objptr
051b8     0C E4 85 F1 | 	sub	objptr, #12
051bc     F2 12 02 F6 | 	mov	arg01, objptr
051c0     04 00 00 FF 
051c4     20 E4 85 F1 | 	sub	objptr, ##2080
051c8     F2 14 02 FB | 	rdlong	arg02, objptr
051cc     10 17 02 F6 | 	mov	arg03, local02
051d0     57 00 00 FF 
051d4     20 E5 85 F1 | 	sub	objptr, ##44832
051d8     70 50 B1 FD | 	call	#_psram_spin2_write
051dc     4B 00 00 FF 
051e0     E4 E4 05 F1 | 	add	objptr, ##38628
051e4     F2 12 02 FB | 	rdlong	arg01, objptr
051e8     0C 00 00 FF 
051ec     3C E4 05 F1 | 	add	objptr, ##6204
051f0     F2 14 02 FB | 	rdlong	arg02, objptr
051f4     10 15 02 F1 | 	add	arg02, local02
051f8     0F 17 02 F6 | 	mov	arg03, local01
051fc     57 00 00 FF 
05200     20 E5 85 F1 | 	sub	objptr, ##44832
05204     44 50 B1 FD | 	call	#_psram_spin2_write
05208     57 00 00 FF 
0520c     20 E5 05 F1 | 	add	objptr, ##44832
05210     F2 1E 02 FB | 	rdlong	local01, objptr
05214     11 1F 02 F1 | 	add	local01, local03
05218     F2 1E 62 FC | 	wrlong	local01, objptr
0521c     62 00 00 FF 
05220     E0 E5 85 F1 | 	sub	objptr, ##50656
05224     A7 F0 03 F6 | 	mov	ptra, fp
05228     B2 00 A0 FD | 	call	#popregs_
0522c                 | _save_line_ret
0522c     2D 00 64 FD | 	ret
05230                 | 
05230                 | ' 
05230                 | ' 
05230                 | ' function insertline(aline as ulong) as integer
05230                 | _insertline
05230     02 4A 05 F6 | 	mov	COUNT_, #2
05234     A8 00 A0 FD | 	call	#pushregs_
05238     28 F0 07 F1 | 	add	ptra, #40
0523c     04 4E 05 F1 | 	add	fp, #4
05240     A7 12 62 FC | 	wrlong	arg01, fp
05244     6A 00 00 FF 
05248     08 E4 05 F1 | 	add	objptr, ##54280
0524c     F2 1E 02 FB | 	rdlong	local01, objptr
05250     04 4E 05 F1 | 	add	fp, #4
05254     A7 1E 62 FC | 	wrlong	local01, fp
05258     08 4E 85 F1 | 	sub	fp, #8
0525c                 | ' 
0525c                 | ' do
0525c     5E 00 00 FF 
05260     48 E5 85 F1 | 	sub	objptr, ##48456
05264                 | LR__0410
05264     10 4E 05 F1 | 	add	fp, #16
05268     A7 12 02 F6 | 	mov	arg01, fp
0526c     08 4E 85 F1 | 	sub	fp, #8
05270     A7 14 02 FB | 	rdlong	arg02, fp
05274     08 4E 85 F1 | 	sub	fp, #8
05278     18 16 06 F6 | 	mov	arg03, #24
0527c     30 4F B1 FD | 	call	#_psram_spin2_read1
05280     08 4E 05 F1 | 	add	fp, #8
05284     A7 1E 02 FB | 	rdlong	local01, fp
05288     04 4E 05 F1 | 	add	fp, #4
0528c     A7 1E 62 FC | 	wrlong	local01, fp
05290     18 4E 05 F1 | 	add	fp, #24
05294     A7 1E 02 FB | 	rdlong	local01, fp
05298     1C 4E 85 F1 | 	sub	fp, #28
0529c     A7 1E 62 FC | 	wrlong	local01, fp
052a0     08 4E 05 F1 | 	add	fp, #8
052a4     A7 1E 02 FB | 	rdlong	local01, fp
052a8     0C 4E 85 F1 | 	sub	fp, #12
052ac     A7 16 02 FB | 	rdlong	arg03, fp
052b0     04 4E 85 F1 | 	sub	fp, #4
052b4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
052b8     24 4E 05 C1 |  if_b	add	fp, #36
052bc     A7 20 02 CB |  if_b	rdlong	local02, fp
052c0     24 4E 85 C1 |  if_b	sub	fp, #36
052c4     FF FF 3F CF 
052c8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
052cc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0410
052d0     0B 00 00 FF 
052d4     C0 E4 85 F1 | 	sub	objptr, ##5824
052d8                 | ' 
052d8                 | ' if header(0)=aline then return -1 ' delete it first
052d8     10 4E 05 F1 | 	add	fp, #16
052dc     A7 1E 02 FB | 	rdlong	local01, fp
052e0     0C 4E 85 F1 | 	sub	fp, #12
052e4     A7 20 02 FB | 	rdlong	local02, fp
052e8     04 4E 85 F1 | 	sub	fp, #4
052ec     10 1F 0A F2 | 	cmp	local01, local02 wz
052f0     01 FA 65 A6 |  if_e	neg	result1, #1
052f4     74 01 90 AD |  if_e	jmp	#LR__0413
052f8                 | ' if header(0)<aline then return -2 ' end of program reached
052f8     10 4E 05 F1 | 	add	fp, #16
052fc     A7 1E 02 FB | 	rdlong	local01, fp
05300     0C 4E 85 F1 | 	sub	fp, #12
05304     A7 16 02 FB | 	rdlong	arg03, fp
05308     04 4E 85 F1 | 	sub	fp, #4
0530c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05310     02 FA 65 C6 |  if_b	neg	result1, #2
05314     54 01 90 CD |  if_b	jmp	#LR__0413
05318                 | ' 
05318                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05318     20 4E 05 F1 | 	add	fp, #32
0531c     A7 1E 02 FB | 	rdlong	local01, fp
05320     20 4E 85 F1 | 	sub	fp, #32
05324     FF FF 7F FF 
05328     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0532c     84 00 90 5D |  if_ne	jmp	#LR__0411
05330     62 00 00 FF 
05334     E0 E5 05 F1 | 	add	objptr, ##50656
05338     F2 1E 02 FB | 	rdlong	local01, objptr
0533c     07 00 00 FF 
05340     28 E4 05 F1 | 	add	objptr, ##3624
05344     F2 1E 62 FC | 	wrlong	local01, objptr
05348     0C 4E 05 F1 | 	add	fp, #12
0534c     A7 12 02 FB | 	rdlong	arg01, fp
05350     0C 4E 85 F1 | 	sub	fp, #12
05354     10 12 06 F1 | 	add	arg01, #16
05358     07 00 00 FF 
0535c     28 E4 85 F1 | 	sub	objptr, ##3624
05360     F2 14 02 FB | 	rdlong	arg02, objptr
05364     01 16 06 F6 | 	mov	arg03, #1
05368     00 18 06 F6 | 	mov	arg04, #0
0536c     57 00 00 FF 
05370     20 E5 85 F1 | 	sub	objptr, ##44832
05374                 | '     return fill(addr, pattern, count, listPtr, 4)
05374     04 1A 06 F6 | 	mov	arg05, #4
05378     6C 4F B1 FD | 	call	#_psram_spin2_fill
0537c     5B 00 00 FF 
05380     50 E5 05 F1 | 	add	objptr, ##46928
05384     FF FF FF FF 
05388     F2 FE 6B FC | 	wrlong	##-1, objptr
0538c     0C 4E 05 F1 | 	add	fp, #12
05390     A7 1E 02 FB | 	rdlong	local01, fp
05394     0C 4E 85 F1 | 	sub	fp, #12
05398     04 E4 05 F1 | 	add	objptr, #4
0539c     F2 1E 62 FC | 	wrlong	local01, objptr
053a0     67 00 00 FF 
053a4     14 E4 85 F1 | 	sub	objptr, ##52756
053a8     78 FD BF FD | 	call	#_save_line
053ac                 | '   programstart=programptr
053ac                 | '   pslpoke(lineptr2+16,programptr)
053ac                 | '   ucompiledline(4)=$FFFF_FFFF
053ac                 | '   ucompiledline(5)=lineptr2
053ac                 | '   save_line
053ac                 | '   return 0
053ac     00 FA 05 F6 | 	mov	result1, #0
053b0     B8 00 90 FD | 	jmp	#LR__0413
053b4                 | LR__0411
053b4                 | ' 
053b4                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
053b4     20 4E 05 F1 | 	add	fp, #32
053b8     A7 1E 02 FB | 	rdlong	local01, fp
053bc     20 4E 85 F1 | 	sub	fp, #32
053c0     FF FF 7F FF 
053c4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
053c8     9C 00 90 AD |  if_e	jmp	#LR__0412
053cc     20 4E 05 F1 | 	add	fp, #32
053d0     A7 1E 02 FB | 	rdlong	local01, fp
053d4     67 00 00 FF 
053d8     10 E4 05 F1 | 	add	objptr, ##52752
053dc     F2 1E 62 FC | 	wrlong	local01, objptr
053e0     14 4E 85 F1 | 	sub	fp, #20
053e4     A7 1E 02 FB | 	rdlong	local01, fp
053e8     04 E4 05 F1 | 	add	objptr, #4
053ec     F2 1E 62 FC | 	wrlong	local01, objptr
053f0     A7 12 02 FB | 	rdlong	arg01, fp
053f4     0C 4E 85 F1 | 	sub	fp, #12
053f8     10 12 06 F1 | 	add	arg01, #16
053fc     04 00 00 FF 
05400     34 E4 85 F1 | 	sub	objptr, ##2100
05404     F2 14 02 FB | 	rdlong	arg02, objptr
05408     01 16 06 F6 | 	mov	arg03, #1
0540c     00 18 06 F6 | 	mov	arg04, #0
05410     57 00 00 FF 
05414     20 E5 85 F1 | 	sub	objptr, ##44832
05418                 | '     return fill(addr, pattern, count, listPtr, 4)
05418     04 1A 06 F6 | 	mov	arg05, #4
0541c     C8 4E B1 FD | 	call	#_psram_spin2_fill
05420     20 4E 05 F1 | 	add	fp, #32
05424     A7 12 02 FB | 	rdlong	arg01, fp
05428     20 4E 85 F1 | 	sub	fp, #32
0542c     14 12 06 F1 | 	add	arg01, #20
05430     57 00 00 FF 
05434     20 E5 05 F1 | 	add	objptr, ##44832
05438     F2 14 02 FB | 	rdlong	arg02, objptr
0543c     01 16 06 F6 | 	mov	arg03, #1
05440     00 18 06 F6 | 	mov	arg04, #0
05444     57 00 00 FF 
05448     20 E5 85 F1 | 	sub	objptr, ##44832
0544c                 | '     return fill(addr, pattern, count, listPtr, 4)
0544c     04 1A 06 F6 | 	mov	arg05, #4
05450     94 4E B1 FD | 	call	#_psram_spin2_fill
05454     0B 00 00 FF 
05458     C0 E4 85 F1 | 	sub	objptr, ##5824
0545c     C4 FC BF FD | 	call	#_save_line
05460                 | '   ucompiledline(4)=header(4)
05460                 | '   ucompiledline(5)=lineptr2
05460                 | '   pslpoke(lineptr2+16,programptr)
05460                 | '   pslpoke(header(4)+20,programptr)
05460                 | '   save_line
05460                 | '   return 0
05460     00 FA 05 F6 | 	mov	result1, #0
05464     04 00 90 FD | 	jmp	#LR__0413
05468                 | LR__0412
05468     00 FA 05 F6 | 	mov	result1, #0
0546c                 | LR__0413
0546c     A7 F0 03 F6 | 	mov	ptra, fp
05470     B2 00 A0 FD | 	call	#popregs_
05474                 | _insertline_ret
05474     2D 00 64 FD | 	ret
05478                 | 
05478                 | ' 
05478                 | ' sub add_line_at_end(aline) 
05478                 | _add_line_at_end
05478     6A 00 00 FF 
0547c     0C E4 05 F1 | 	add	objptr, ##54284
05480     F2 12 62 FC | 	wrlong	arg01, objptr
05484     04 E4 05 F1 | 	add	objptr, #4
05488     F2 14 02 FB | 	rdlong	arg02, objptr
0548c     03 00 00 FF 
05490     00 E4 85 F1 | 	sub	objptr, ##1536
05494     F2 14 62 FC | 	wrlong	arg02, objptr
05498     03 00 00 FF 
0549c     00 E4 05 F1 | 	add	objptr, ##1536
054a0     F2 12 02 FB | 	rdlong	arg01, objptr
054a4     14 12 06 F1 | 	add	arg01, #20
054a8     07 00 00 FF 
054ac     30 E4 85 F1 | 	sub	objptr, ##3632
054b0     F2 14 02 FB | 	rdlong	arg02, objptr
054b4     01 16 06 F6 | 	mov	arg03, #1
054b8     00 18 06 F6 | 	mov	arg04, #0
054bc     57 00 00 FF 
054c0     20 E5 85 F1 | 	sub	objptr, ##44832
054c4                 | '     return fill(addr, pattern, count, listPtr, 4)
054c4     04 1A 06 F6 | 	mov	arg05, #4
054c8     1C 4E B1 FD | 	call	#_psram_spin2_fill
054cc     57 00 00 FF 
054d0     20 E5 05 F1 | 	add	objptr, ##44832
054d4     F2 14 02 FB | 	rdlong	arg02, objptr
054d8     07 00 00 FF 
054dc     30 E4 05 F1 | 	add	objptr, ##3632
054e0     F2 14 62 FC | 	wrlong	arg02, objptr
054e4     02 00 00 FF 
054e8     FC E5 85 F1 | 	sub	objptr, ##1532
054ec     FF FF BF FF 
054f0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
054f4                 | ' 
054f4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
054f4                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
054f4     04 00 00 FF 
054f8     34 E4 85 F1 | 	sub	objptr, ##2100
054fc     F2 14 0A FB | 	rdlong	arg02, objptr wz
05500     62 00 00 FF 
05504     E0 E5 85 F1 | 	sub	objptr, ##50656
05508     67 00 00 AF 
0550c     10 E4 05 A1 |  if_e	add	objptr, ##52752
05510     FF FF FF AF 
05514     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05518     67 00 00 AF 
0551c     10 E4 85 A1 |  if_e	sub	objptr, ##52752
05520     00 FC BF FD | 	call	#_save_line
05524     62 00 00 FF 
05528     E0 E5 05 F1 | 	add	objptr, ##50656
0552c     F2 12 02 FB | 	rdlong	arg01, objptr
05530     01 14 66 F6 | 	neg	arg02, #1
05534     01 16 06 F6 | 	mov	arg03, #1
05538     00 18 06 F6 | 	mov	arg04, #0
0553c     57 00 00 FF 
05540     20 E5 85 F1 | 	sub	objptr, ##44832
05544                 | '     return fill(addr, pattern, count, listPtr, 4)
05544     04 1A 06 F6 | 	mov	arg05, #4
05548     9C 4D B1 FD | 	call	#_psram_spin2_fill
0554c     0B 00 00 FF 
05550     C0 E4 85 F1 | 	sub	objptr, ##5824
05554                 | _add_line_at_end_ret
05554     2D 00 64 FD | 	ret
05558                 | 
05558                 | ' 
05558                 | ' function compile_immediate(linetype as ulong) as integer
05558                 | _compile_immediate
05558     09 4A 05 F6 | 	mov	COUNT_, #9
0555c     A8 00 A0 FD | 	call	#pushregs_
05560                 | _compile_immediate_enter
05560     09 25 0A F6 | 	mov	local04, arg01 wz
05564     00 26 06 F6 | 	mov	local05, #0
05568     00 28 06 F6 | 	mov	local06, #0
0556c                 | ' 
0556c                 | ' ' linetype=cont+1, linetype=0 immediate
0556c                 | ' '  : 1: this is the first part of the line that will continue
0556c                 | ' ' 2 - this is the continuation of the line
0556c                 | ' ' 3 - this is the last continued line
0556c                 | ' ' 4 - this is the one and only part
0556c                 | ' 
0556c                 | ' err=0
0556c                 | ' cmd=0
0556c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
0556c     2C 00 90 5D |  if_ne	jmp	#LR__0420
05570     54 00 00 FF 
05574     94 E5 05 F1 | 	add	objptr, ##43412
05578     F2 28 02 FB | 	rdlong	local06, objptr
0557c     02 00 00 FF 
05580     34 E4 05 F1 | 	add	objptr, ##1076
05584     F2 02 68 FC | 	wrlong	#1, objptr
05588     13 00 00 FF 
0558c     38 E4 05 F1 | 	add	objptr, ##9784
05590     F2 00 68 FC | 	wrlong	#0, objptr
05594     6A 00 00 FF 
05598     00 E4 85 F1 | 	sub	objptr, ##54272
0559c                 | LR__0420
0559c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
0559c     02 24 0E F2 | 	cmp	local04, #2 wz
055a0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
055a4     54 00 00 AF 
055a8     94 E5 05 A1 |  if_e	add	objptr, ##43412
055ac     F2 28 02 AB |  if_e	rdlong	local06, objptr
055b0     02 00 00 AF 
055b4     34 E4 05 A1 |  if_e	add	objptr, ##1076
055b8     F2 02 68 AC |  if_e	wrlong	#1, objptr
055bc     56 00 00 AF 
055c0     C8 E5 85 A1 |  if_e	sub	objptr, ##44488
055c4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
055c4     04 24 0E F2 | 	cmp	local04, #4 wz
055c8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
055cc     2C 00 90 5D |  if_ne	jmp	#LR__0421
055d0     54 00 00 FF 
055d4     9C E5 05 F1 | 	add	objptr, ##43420
055d8     F2 28 02 FB | 	rdlong	local06, objptr
055dc     02 00 00 FF 
055e0     2C E4 05 F1 | 	add	objptr, ##1068
055e4     F2 04 68 FC | 	wrlong	#2, objptr
055e8     13 00 00 FF 
055ec     38 E4 05 F1 | 	add	objptr, ##9784
055f0     F2 04 68 FC | 	wrlong	#2, objptr
055f4     6A 00 00 FF 
055f8     00 E4 85 F1 | 	sub	objptr, ##54272
055fc                 | LR__0421
055fc                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
055fc     05 24 0E F2 | 	cmp	local04, #5 wz
05600     40 00 90 5D |  if_ne	jmp	#LR__0422
05604     56 00 00 FF 
05608     C8 E5 05 F1 | 	add	objptr, ##44488
0560c     F2 2A 02 FB | 	rdlong	local07, objptr
05610     15 29 02 F6 | 	mov	local06, local07
05614     03 28 66 F0 | 	shl	local06, #3
05618     02 00 00 FF 
0561c     38 E4 85 F1 | 	sub	objptr, ##1080
05620     F2 28 02 F1 | 	add	local06, objptr
05624     04 28 06 F1 | 	add	local06, #4
05628     14 29 02 FB | 	rdlong	local06, local06
0562c     01 2A 06 F1 | 	add	local07, #1
05630     02 00 00 FF 
05634     38 E4 05 F1 | 	add	objptr, ##1080
05638     F2 2A 62 FC | 	wrlong	local07, objptr
0563c     56 00 00 FF 
05640     C8 E5 85 F1 | 	sub	objptr, ##44488
05644                 | LR__0422
05644     00 2C 06 F6 | 	mov	local08, #0
05648                 | ' vars=0
05648                 | ' 'print  "In compile_immediate cmd=:", cmd
05648                 | ' 451 select case cmd
05648     5C 28 0E F2 | 	cmp	local06, #92 wz
0564c     F0 01 90 AD |  if_e	jmp	#LR__0423
05650     47 28 0E F2 | 	cmp	local06, #71 wz
05654     F4 01 90 AD |  if_e	jmp	#LR__0424
05658     59 28 0E F2 | 	cmp	local06, #89 wz
0565c     F8 01 90 AD |  if_e	jmp	#LR__0425
05660     45 28 0E F2 | 	cmp	local06, #69 wz
05664     FC 01 90 AD |  if_e	jmp	#LR__0426
05668     69 28 0E F2 | 	cmp	local06, #105 wz
0566c     00 02 90 AD |  if_e	jmp	#LR__0427
05670     40 28 0E F2 | 	cmp	local06, #64 wz
05674     4C 04 90 AD |  if_e	jmp	#LR__0479
05678     49 28 0E F2 | 	cmp	local06, #73 wz
0567c     FC 01 90 AD |  if_e	jmp	#LR__0428
05680     50 28 0E F2 | 	cmp	local06, #80 wz
05684     00 02 90 AD |  if_e	jmp	#LR__0429
05688     68 28 0E F2 | 	cmp	local06, #104 wz
0568c     04 02 90 AD |  if_e	jmp	#LR__0430
05690     74 28 0E F2 | 	cmp	local06, #116 wz
05694     08 02 90 AD |  if_e	jmp	#LR__0431
05698     73 28 0E F2 | 	cmp	local06, #115 wz
0569c     0C 02 90 AD |  if_e	jmp	#LR__0432
056a0     6C 28 0E F2 | 	cmp	local06, #108 wz
056a4     10 02 90 AD |  if_e	jmp	#LR__0433
056a8     89 28 0E F2 | 	cmp	local06, #137 wz
056ac     14 04 90 AD |  if_e	jmp	#LR__0479
056b0     72 28 0E F2 | 	cmp	local06, #114 wz
056b4     0C 02 90 AD |  if_e	jmp	#LR__0434
056b8     5D 28 0E F2 | 	cmp	local06, #93 wz
056bc     04 04 90 AD |  if_e	jmp	#LR__0479
056c0     43 28 0E F2 | 	cmp	local06, #67 wz
056c4     04 02 90 AD |  if_e	jmp	#LR__0435
056c8     5A 28 0E F2 | 	cmp	local06, #90 wz
056cc     08 02 90 AD |  if_e	jmp	#LR__0436
056d0     4E 28 0E F2 | 	cmp	local06, #78 wz
056d4     08 02 90 AD |  if_e	jmp	#LR__0437
056d8     46 28 0E F2 | 	cmp	local06, #70 wz
056dc     1C 02 90 AD |  if_e	jmp	#LR__0439
056e0     71 28 0E F2 | 	cmp	local06, #113 wz
056e4     20 02 90 AD |  if_e	jmp	#LR__0440
056e8     60 28 0E F2 | 	cmp	local06, #96 wz
056ec     24 02 90 AD |  if_e	jmp	#LR__0441
056f0     4A 28 0E F2 | 	cmp	local06, #74 wz
056f4     28 02 90 AD |  if_e	jmp	#LR__0442
056f8     48 28 0E F2 | 	cmp	local06, #72 wz
056fc     28 02 90 AD |  if_e	jmp	#LR__0443
05700     58 28 0E F2 | 	cmp	local06, #88 wz
05704     2C 02 90 AD |  if_e	jmp	#LR__0444
05708     5F 28 0E F2 | 	cmp	local06, #95 wz
0570c     2C 02 90 AD |  if_e	jmp	#LR__0445
05710     8A 28 0E F2 | 	cmp	local06, #138 wz
05714     30 02 90 AD |  if_e	jmp	#LR__0446
05718     4C 28 0E F2 | 	cmp	local06, #76 wz
0571c     34 02 90 AD |  if_e	jmp	#LR__0447
05720     52 28 0E F2 | 	cmp	local06, #82 wz
05724     38 02 90 AD |  if_e	jmp	#LR__0448
05728     61 28 0E F2 | 	cmp	local06, #97 wz
0572c     3C 02 90 AD |  if_e	jmp	#LR__0449
05730     63 28 0E F2 | 	cmp	local06, #99 wz
05734     40 02 90 AD |  if_e	jmp	#LR__0450
05738     41 28 0E F2 | 	cmp	local06, #65 wz
0573c     84 03 90 AD |  if_e	jmp	#LR__0479
05740     4B 28 0E F2 | 	cmp	local06, #75 wz
05744     3C 02 90 AD |  if_e	jmp	#LR__0451
05748     5E 28 0E F2 | 	cmp	local06, #94 wz
0574c     3C 02 90 AD |  if_e	jmp	#LR__0452
05750     7C 28 0E F2 | 	cmp	local06, #124 wz
05754     40 02 90 AD |  if_e	jmp	#LR__0453
05758     7D 28 0E F2 | 	cmp	local06, #125 wz
0575c     44 02 90 AD |  if_e	jmp	#LR__0454
05760     7E 28 0E F2 | 	cmp	local06, #126 wz
05764     48 02 90 AD |  if_e	jmp	#LR__0455
05768     7F 28 0E F2 | 	cmp	local06, #127 wz
0576c     4C 02 90 AD |  if_e	jmp	#LR__0456
05770     80 28 0E F2 | 	cmp	local06, #128 wz
05774     50 02 90 AD |  if_e	jmp	#LR__0457
05778     55 28 0E F2 | 	cmp	local06, #85 wz
0577c     54 02 90 AD |  if_e	jmp	#LR__0458
05780     75 28 0E F2 | 	cmp	local06, #117 wz
05784     58 02 90 AD |  if_e	jmp	#LR__0459
05788     42 28 0E F2 | 	cmp	local06, #66 wz
0578c     5C 02 90 AD |  if_e	jmp	#LR__0460
05790     81 28 0E F2 | 	cmp	local06, #129 wz
05794     60 02 90 AD |  if_e	jmp	#LR__0461
05798     44 28 0E F2 | 	cmp	local06, #68 wz
0579c     64 02 90 AD |  if_e	jmp	#LR__0462
057a0     88 28 0E F2 | 	cmp	local06, #136 wz
057a4     1C 03 90 AD |  if_e	jmp	#LR__0479
057a8     92 28 0E F2 | 	cmp	local06, #146 wz
057ac     60 02 90 AD |  if_e	jmp	#LR__0463
057b0     4D 28 0E F2 | 	cmp	local06, #77 wz
057b4     0C 03 90 AD |  if_e	jmp	#LR__0479
057b8     51 28 0E F2 | 	cmp	local06, #81 wz
057bc     58 02 90 AD |  if_e	jmp	#LR__0464
057c0     8E 28 0E F2 | 	cmp	local06, #142 wz
057c4     5C 02 90 AD |  if_e	jmp	#LR__0465
057c8     90 28 0E F2 | 	cmp	local06, #144 wz
057cc     60 02 90 AD |  if_e	jmp	#LR__0466
057d0     8D 28 0E F2 | 	cmp	local06, #141 wz
057d4     64 02 90 AD |  if_e	jmp	#LR__0467
057d8     8C 28 0E F2 | 	cmp	local06, #140 wz
057dc     68 02 90 AD |  if_e	jmp	#LR__0468
057e0     91 28 0E F2 | 	cmp	local06, #145 wz
057e4     6C 02 90 AD |  if_e	jmp	#LR__0469
057e8     8B 28 0E F2 | 	cmp	local06, #139 wz
057ec     70 02 90 AD |  if_e	jmp	#LR__0470
057f0     8F 28 0E F2 | 	cmp	local06, #143 wz
057f4     74 02 90 AD |  if_e	jmp	#LR__0471
057f8     6D 28 0E F2 | 	cmp	local06, #109 wz
057fc     78 02 90 AD |  if_e	jmp	#LR__0472
05800     70 28 0E F2 | 	cmp	local06, #112 wz
05804     BC 02 90 AD |  if_e	jmp	#LR__0479
05808     56 28 0E F2 | 	cmp	local06, #86 wz
0580c     74 02 90 AD |  if_e	jmp	#LR__0473
05810     57 28 0E F2 | 	cmp	local06, #87 wz
05814     AC 02 90 AD |  if_e	jmp	#LR__0479
05818     79 28 0E F2 | 	cmp	local06, #121 wz
0581c     70 02 90 AD |  if_e	jmp	#LR__0474
05820     77 28 0E F2 | 	cmp	local06, #119 wz
05824     74 02 90 AD |  if_e	jmp	#LR__0475
05828     78 28 0E F2 | 	cmp	local06, #120 wz
0582c     78 02 90 AD |  if_e	jmp	#LR__0476
05830     01 00 00 FF 
05834     04 28 0E F2 | 	cmp	local06, ##516 wz
05838     78 02 90 AD |  if_e	jmp	#LR__0477
0583c     7C 02 90 FD | 	jmp	#LR__0478
05840                 | LR__0423
05840     B8 0B B0 FD | 	call	#_compile_fun_2p
05844     FD 26 02 F6 | 	mov	local05, result1
05848     78 02 90 FD | 	jmp	#LR__0479
0584c                 | LR__0424
0584c     EC 0C B0 FD | 	call	#_compile_fun_4p
05850     FD 26 02 F6 | 	mov	local05, result1
05854     6C 02 90 FD | 	jmp	#LR__0479
05858                 | LR__0425
05858     EC 2D B0 FD | 	call	#_expr
0585c                 | ' expr()
0585c                 | ' return 0
0585c     00 26 06 F6 | 	mov	local05, #0
05860     60 02 90 FD | 	jmp	#LR__0479
05864                 | LR__0426
05864     08 0C B0 FD | 	call	#_compile_fun_3p
05868     FD 26 02 F6 | 	mov	local05, result1
0586c     54 02 90 FD | 	jmp	#LR__0479
05870                 | LR__0427
05870     D4 2D B0 FD | 	call	#_expr
05874                 | ' expr()
05874                 | ' return 0
05874     00 26 06 F6 | 	mov	local05, #0
05878     48 02 90 FD | 	jmp	#LR__0479
0587c                 | LR__0428
0587c     C8 2D B0 FD | 	call	#_expr
05880                 | ' expr()
05880                 | ' return 0
05880     00 26 06 F6 | 	mov	local05, #0
05884     3C 02 90 FD | 	jmp	#LR__0479
05888                 | LR__0429
05888     50 0F B0 FD | 	call	#_compile_fun_varp
0588c     FD 2C 02 F6 | 	mov	local08, result1
05890     30 02 90 FD | 	jmp	#LR__0479
05894                 | LR__0430
05894     B0 2D B0 FD | 	call	#_expr
05898                 | ' expr()
05898                 | ' return 0
05898     00 26 06 F6 | 	mov	local05, #0
0589c     24 02 90 FD | 	jmp	#LR__0479
058a0                 | LR__0431
058a0     38 0F B0 FD | 	call	#_compile_fun_varp
058a4     FD 2C 02 F6 | 	mov	local08, result1
058a8     18 02 90 FD | 	jmp	#LR__0479
058ac                 | LR__0432
058ac     2C 0F B0 FD | 	call	#_compile_fun_varp
058b0     FD 2C 02 F6 | 	mov	local08, result1
058b4     0C 02 90 FD | 	jmp	#LR__0479
058b8                 | LR__0433
058b8     A4 0D B0 FD | 	call	#_compile_fun_5p
058bc     FD 26 02 F6 | 	mov	local05, result1
058c0     00 02 90 FD | 	jmp	#LR__0479
058c4                 | LR__0434
058c4     00 19 B0 FD | 	call	#_compile_dim
058c8     B4 02 90 FD | 	jmp	#LR__0480
058cc                 | LR__0435
058cc     2C 0B B0 FD | 	call	#_compile_fun_2p
058d0     FD 26 02 F6 | 	mov	local05, result1
058d4     EC 01 90 FD | 	jmp	#LR__0479
058d8                 | LR__0436
058d8     C4 17 B0 FD | 	call	#_compile_else
058dc     A0 02 90 FD | 	jmp	#LR__0480
058e0                 | LR__0437
058e0     01 24 16 F2 | 	cmp	local04, #1 wc
058e4     08 00 90 CD |  if_b	jmp	#LR__0438
058e8     FC 29 B0 FD | 	call	#_compile_goto
058ec     90 02 90 FD | 	jmp	#LR__0480
058f0                 | LR__0438
058f0     19 12 06 F6 | 	mov	arg01, #25
058f4     10 1E B1 FD | 	call	#_printerror
058f8     84 02 90 FD | 	jmp	#LR__0480
058fc                 | LR__0439
058fc     70 0B B0 FD | 	call	#_compile_fun_3p
05900     FD 26 02 F6 | 	mov	local05, result1
05904     BC 01 90 FD | 	jmp	#LR__0479
05908                 | LR__0440
05908     30 0C B0 FD | 	call	#_compile_fun_4p
0590c     FD 26 02 F6 | 	mov	local05, result1
05910     B0 01 90 FD | 	jmp	#LR__0479
05914                 | LR__0441
05914     30 2D B0 FD | 	call	#_expr
05918                 | ' expr()
05918                 | ' return 0
05918     00 26 06 F6 | 	mov	local05, #0
0591c     A4 01 90 FD | 	jmp	#LR__0479
05920                 | LR__0442
05920     EC 1F B0 FD | 	call	#_compile_for
05924     58 02 90 FD | 	jmp	#LR__0480
05928                 | LR__0443
05928     10 0C B0 FD | 	call	#_compile_fun_4p
0592c     FD 26 02 F6 | 	mov	local05, result1
05930     90 01 90 FD | 	jmp	#LR__0479
05934                 | LR__0444
05934     28 16 B0 FD | 	call	#_compile_if
05938     44 02 90 FD | 	jmp	#LR__0480
0593c                 | LR__0445
0593c     08 2D B0 FD | 	call	#_expr
05940                 | ' expr()
05940                 | ' return 0
05940     00 26 06 F6 | 	mov	local05, #0
05944     7C 01 90 FD | 	jmp	#LR__0479
05948                 | LR__0446
05948     FC 2C B0 FD | 	call	#_expr
0594c                 | ' expr()
0594c                 | ' return 0
0594c     00 26 06 F6 | 	mov	local05, #0
05950     70 01 90 FD | 	jmp	#LR__0479
05954                 | LR__0447
05954     84 0E B0 FD | 	call	#_compile_fun_varp
05958     FD 2C 02 F6 | 	mov	local08, result1
0595c     64 01 90 FD | 	jmp	#LR__0479
05960                 | LR__0448
05960     78 0E B0 FD | 	call	#_compile_fun_varp
05964     FD 2C 02 F6 | 	mov	local08, result1
05968     58 01 90 FD | 	jmp	#LR__0479
0596c                 | LR__0449
0596c     D8 2C B0 FD | 	call	#_expr
05970                 | ' expr()
05970                 | ' return 0
05970     00 26 06 F6 | 	mov	local05, #0
05974     4C 01 90 FD | 	jmp	#LR__0479
05978                 | LR__0450
05978     CC 2C B0 FD | 	call	#_expr
0597c                 | ' expr()
0597c                 | ' return 0
0597c     00 26 06 F6 | 	mov	local05, #0
05980     40 01 90 FD | 	jmp	#LR__0479
05984                 | LR__0451
05984     B0 27 B0 FD | 	call	#_compile_next
05988     F4 01 90 FD | 	jmp	#LR__0480
0598c                 | LR__0452
0598c     B8 2C B0 FD | 	call	#_expr
05990                 | ' expr()
05990                 | ' return 0
05990     00 26 06 F6 | 	mov	local05, #0
05994     2C 01 90 FD | 	jmp	#LR__0479
05998                 | LR__0453
05998     AC 2C B0 FD | 	call	#_expr
0599c                 | ' expr()
0599c                 | ' return 0
0599c     00 26 06 F6 | 	mov	local05, #0
059a0     20 01 90 FD | 	jmp	#LR__0479
059a4                 | LR__0454
059a4     A0 2C B0 FD | 	call	#_expr
059a8                 | ' expr()
059a8                 | ' return 0
059a8     00 26 06 F6 | 	mov	local05, #0
059ac     14 01 90 FD | 	jmp	#LR__0479
059b0                 | LR__0455
059b0     94 2C B0 FD | 	call	#_expr
059b4                 | ' expr()
059b4                 | ' return 0
059b4     00 26 06 F6 | 	mov	local05, #0
059b8     08 01 90 FD | 	jmp	#LR__0479
059bc                 | LR__0456
059bc     7C 0B B0 FD | 	call	#_compile_fun_4p
059c0     FD 26 02 F6 | 	mov	local05, result1
059c4     FC 00 90 FD | 	jmp	#LR__0479
059c8                 | LR__0457
059c8     7C 2C B0 FD | 	call	#_expr
059cc                 | ' expr()
059cc                 | ' return 0
059cc     00 26 06 F6 | 	mov	local05, #0
059d0     F0 00 90 FD | 	jmp	#LR__0479
059d4                 | LR__0458
059d4     24 0A B0 FD | 	call	#_compile_fun_2p
059d8     FD 26 02 F6 | 	mov	local05, result1
059dc     E4 00 90 FD | 	jmp	#LR__0479
059e0                 | LR__0459
059e0     F8 0D B0 FD | 	call	#_compile_fun_varp
059e4     FD 2C 02 F6 | 	mov	local08, result1
059e8     D8 00 90 FD | 	jmp	#LR__0479
059ec                 | LR__0460
059ec     0C 0A B0 FD | 	call	#_compile_fun_2p
059f0     FD 26 02 F6 | 	mov	local05, result1
059f4     CC 00 90 FD | 	jmp	#LR__0479
059f8                 | LR__0461
059f8     00 0A B0 FD | 	call	#_compile_fun_2p
059fc     FD 26 02 F6 | 	mov	local05, result1
05a00     C0 00 90 FD | 	jmp	#LR__0479
05a04                 | LR__0462
05a04     80 0E B0 FD | 	call	#_compile_print
05a08     FD 26 02 F6 | 	mov	local05, result1
05a0c     70 01 90 FD | 	jmp	#LR__0480
05a10                 | LR__0463
05a10     34 2C B0 FD | 	call	#_expr
05a14                 | ' expr()
05a14                 | ' return 0
05a14     AC 00 90 FD | 	jmp	#LR__0479
05a18                 | LR__0464
05a18     C0 0D B0 FD | 	call	#_compile_fun_varp
05a1c     FD 2C 02 F6 | 	mov	local08, result1
05a20     A0 00 90 FD | 	jmp	#LR__0479
05a24                 | LR__0465
05a24     D4 09 B0 FD | 	call	#_compile_fun_2p
05a28     FD 26 02 F6 | 	mov	local05, result1
05a2c     94 00 90 FD | 	jmp	#LR__0479
05a30                 | LR__0466
05a30     C8 09 B0 FD | 	call	#_compile_fun_2p
05a34     FD 26 02 F6 | 	mov	local05, result1
05a38     88 00 90 FD | 	jmp	#LR__0479
05a3c                 | LR__0467
05a3c     BC 09 B0 FD | 	call	#_compile_fun_2p
05a40     FD 26 02 F6 | 	mov	local05, result1
05a44     7C 00 90 FD | 	jmp	#LR__0479
05a48                 | LR__0468
05a48     B0 09 B0 FD | 	call	#_compile_fun_2p
05a4c     FD 26 02 F6 | 	mov	local05, result1
05a50     70 00 90 FD | 	jmp	#LR__0479
05a54                 | LR__0469
05a54     A4 09 B0 FD | 	call	#_compile_fun_2p
05a58     FD 26 02 F6 | 	mov	local05, result1
05a5c     64 00 90 FD | 	jmp	#LR__0479
05a60                 | LR__0470
05a60     98 09 B0 FD | 	call	#_compile_fun_2p
05a64     FD 26 02 F6 | 	mov	local05, result1
05a68     58 00 90 FD | 	jmp	#LR__0479
05a6c                 | LR__0471
05a6c     8C 09 B0 FD | 	call	#_compile_fun_2p
05a70     FD 26 02 F6 | 	mov	local05, result1
05a74     4C 00 90 FD | 	jmp	#LR__0479
05a78                 | LR__0472
05a78     F4 09 B0 FD | 	call	#_compile_fun_3p
05a7c     FD 26 02 F6 | 	mov	local05, result1
05a80     40 00 90 FD | 	jmp	#LR__0479
05a84                 | LR__0473
05a84     C0 2B B0 FD | 	call	#_expr
05a88                 | ' expr()
05a88                 | ' return 0
05a88     00 26 06 F6 | 	mov	local05, #0
05a8c     34 00 90 FD | 	jmp	#LR__0479
05a90                 | LR__0474
05a90     68 09 B0 FD | 	call	#_compile_fun_2p
05a94     FD 26 02 F6 | 	mov	local05, result1
05a98     28 00 90 FD | 	jmp	#LR__0479
05a9c                 | LR__0475
05a9c     5C 09 B0 FD | 	call	#_compile_fun_2p
05aa0     FD 26 02 F6 | 	mov	local05, result1
05aa4     1C 00 90 FD | 	jmp	#LR__0479
05aa8                 | LR__0476
05aa8     50 09 B0 FD | 	call	#_compile_fun_2p
05aac     FD 26 02 F6 | 	mov	local05, result1
05ab0     10 00 90 FD | 	jmp	#LR__0479
05ab4                 | LR__0477
05ab4     20 01 B0 FD | 	call	#_compile_array_assign
05ab8     C4 00 90 FD | 	jmp	#LR__0480
05abc                 | LR__0478
05abc     80 08 B0 FD | 	call	#_compile_unknown
05ac0     BC 00 90 FD | 	jmp	#LR__0480
05ac4                 | LR__0479
05ac4     14 23 02 F6 | 	mov	local03, local06
05ac8     16 1F 02 F6 | 	mov	local01, local08
05acc     0F 2B 02 F6 | 	mov	local07, local01
05ad0     10 2F 02 F6 | 	mov	local09, local02
05ad4     11 1F 02 F6 | 	mov	local01, local03
05ad8     6A 00 00 FF 
05adc     00 E4 05 F1 | 	add	objptr, ##54272
05ae0     F2 2C 02 FB | 	rdlong	local08, objptr
05ae4     16 29 02 F6 | 	mov	local06, local08
05ae8     01 28 66 F0 | 	shl	local06, #1
05aec     16 29 02 F1 | 	add	local06, local08
05af0     02 28 66 F0 | 	shl	local06, #2
05af4     03 00 00 FF 
05af8     00 E4 85 F1 | 	sub	objptr, ##1536
05afc     F2 28 02 F1 | 	add	local06, objptr
05b00     14 2B 62 FC | 	wrlong	local07, local06
05b04     03 00 00 FF 
05b08     00 E4 05 F1 | 	add	objptr, ##1536
05b0c     F2 2C 02 FB | 	rdlong	local08, objptr
05b10     16 2B 02 F6 | 	mov	local07, local08
05b14     01 2A 66 F0 | 	shl	local07, #1
05b18     16 2B 02 F1 | 	add	local07, local08
05b1c     02 2A 66 F0 | 	shl	local07, #2
05b20     03 00 00 FF 
05b24     00 E4 85 F1 | 	sub	objptr, ##1536
05b28     F2 2A 02 F1 | 	add	local07, objptr
05b2c     04 2A 06 F1 | 	add	local07, #4
05b30     15 2F 62 FC | 	wrlong	local09, local07
05b34     03 00 00 FF 
05b38     00 E4 05 F1 | 	add	objptr, ##1536
05b3c     F2 2E 02 FB | 	rdlong	local09, objptr
05b40     17 2D 02 F6 | 	mov	local08, local09
05b44     01 2C 66 F0 | 	shl	local08, #1
05b48     17 2D 02 F1 | 	add	local08, local09
05b4c     02 2C 66 F0 | 	shl	local08, #2
05b50     03 00 00 FF 
05b54     00 E4 85 F1 | 	sub	objptr, ##1536
05b58     F2 2C 02 F1 | 	add	local08, objptr
05b5c     08 2C 06 F1 | 	add	local08, #8
05b60     16 1F 62 FC | 	wrlong	local01, local08
05b64     03 00 00 FF 
05b68     00 E4 05 F1 | 	add	objptr, ##1536
05b6c     F2 2A 02 FB | 	rdlong	local07, objptr
05b70     01 2A 06 F1 | 	add	local07, #1
05b74     F2 2A 62 FC | 	wrlong	local07, objptr
05b78     6A 00 00 FF 
05b7c     00 E4 85 F1 | 	sub	objptr, ##54272
05b80                 | LR__0480
05b80                 | ' 
05b80                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
05b80                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
05b80     00 24 0E F2 | 	cmp	local04, #0 wz
05b84     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05b88     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05b8c     38 00 90 5D |  if_ne	jmp	#LR__0481
05b90     6A 00 00 FF 
05b94     00 E4 05 F1 | 	add	objptr, ##54272
05b98     F2 2E 02 FB | 	rdlong	local09, objptr
05b9c     17 1F 02 F6 | 	mov	local01, local09
05ba0     01 1E 66 F0 | 	shl	local01, #1
05ba4     17 1F 02 F1 | 	add	local01, local09
05ba8     02 1E 66 F0 | 	shl	local01, #2
05bac     03 00 00 FF 
05bb0     00 E4 85 F1 | 	sub	objptr, ##1536
05bb4     F2 1E 02 F1 | 	add	local01, objptr
05bb8     08 1E 06 F1 | 	add	local01, #8
05bbc     0F FD 6B FC | 	wrlong	#510, local01
05bc0     67 00 00 FF 
05bc4     00 E4 85 F1 | 	sub	objptr, ##52736
05bc8                 | LR__0481
05bc8                 | ' 
05bc8                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
05bc8                 | ' return err
05bc8     13 FB 01 F6 | 	mov	result1, local05
05bcc     A7 F0 03 F6 | 	mov	ptra, fp
05bd0     B2 00 A0 FD | 	call	#popregs_
05bd4                 | _compile_immediate_ret
05bd4     2D 00 64 FD | 	ret
05bd8                 | 
05bd8                 | ' 
05bd8                 | ' sub compile_array_assign
05bd8                 | _compile_array_assign
05bd8     0A 4A 05 F6 | 	mov	COUNT_, #10
05bdc     A8 00 A0 FD | 	call	#pushregs_
05be0     00 24 06 F6 | 	mov	local04, #0
05be4     56 00 00 FF 
05be8     C8 E5 05 F1 | 	add	objptr, ##44488
05bec     F2 26 02 FB | 	rdlong	local05, objptr
05bf0     13 FB 01 F6 | 	mov	result1, local05
05bf4     01 FA 85 F1 | 	sub	result1, #1
05bf8     03 FA 65 F0 | 	shl	result1, #3
05bfc     02 00 00 FF 
05c00     38 E4 85 F1 | 	sub	objptr, ##1080
05c04     F2 FA 01 F1 | 	add	result1, objptr
05c08     FD 28 02 FB | 	rdlong	local06, result1
05c0c                 | ' numpar=0
05c0c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
05c0c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
05c0c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
05c0c                 | ' if lparts(ct).token=token_lpar then
05c0c     03 26 66 F0 | 	shl	local05, #3
05c10     F2 26 02 F1 | 	add	local05, objptr
05c14     04 26 06 F1 | 	add	local05, #4
05c18     13 27 02 FB | 	rdlong	local05, local05
05c1c     15 26 0E F2 | 	cmp	local05, #21 wz
05c20     54 00 00 FF 
05c24     90 E5 85 F1 | 	sub	objptr, ##43408
05c28     D4 01 90 5D |  if_ne	jmp	#LR__0494
05c2c     56 00 00 FF 
05c30     C8 E5 05 F1 | 	add	objptr, ##44488
05c34     F2 2A 02 FB | 	rdlong	local07, objptr
05c38     01 2A 06 F1 | 	add	local07, #1
05c3c     F2 2A 62 FC | 	wrlong	local07, objptr
05c40     56 00 00 FF 
05c44     C8 E5 85 F1 | 	sub	objptr, ##44488
05c48                 | '   ct+=1 											' omit this lpar, this is for expr list
05c48                 | '   do
05c48                 | LR__0490
05c48     FC 29 B0 FD | 	call	#_expr
05c4c     56 00 00 FF 
05c50     C8 E5 05 F1 | 	add	objptr, ##44488
05c54     F2 26 02 FB | 	rdlong	local05, objptr
05c58     01 26 06 F1 | 	add	local05, #1
05c5c     F2 26 62 FC | 	wrlong	local05, objptr
05c60     01 24 06 F1 | 	add	local04, #1
05c64     01 26 86 F1 | 	sub	local05, #1
05c68     03 26 66 F0 | 	shl	local05, #3
05c6c     02 00 00 FF 
05c70     38 E4 85 F1 | 	sub	objptr, ##1080
05c74     F2 26 02 F1 | 	add	local05, objptr
05c78     04 26 06 F1 | 	add	local05, #4
05c7c     13 2B 02 FB | 	rdlong	local07, local05
05c80     14 2A 0E F2 | 	cmp	local07, #20 wz
05c84     54 00 00 FF 
05c88     90 E5 85 F1 | 	sub	objptr, ##43408
05c8c     34 00 90 AD |  if_e	jmp	#LR__0491
05c90     56 00 00 FF 
05c94     C8 E5 05 F1 | 	add	objptr, ##44488
05c98     F2 2A 02 FB | 	rdlong	local07, objptr
05c9c     03 2A 66 F0 | 	shl	local07, #3
05ca0     02 00 00 FF 
05ca4     38 E4 85 F1 | 	sub	objptr, ##1080
05ca8     F2 2A 02 F1 | 	add	local07, objptr
05cac     04 2A 06 F1 | 	add	local07, #4
05cb0     15 2B 02 FB | 	rdlong	local07, local07
05cb4     FE 2B 0E F2 | 	cmp	local07, #510 wz
05cb8     54 00 00 FF 
05cbc     90 E5 85 F1 | 	sub	objptr, ##43408
05cc0     84 FF 9F 5D |  if_ne	jmp	#LR__0490
05cc4                 | LR__0491
05cc4     56 00 00 FF 
05cc8     C8 E5 05 F1 | 	add	objptr, ##44488
05ccc     F2 2A 02 FB | 	rdlong	local07, objptr
05cd0     01 2A 06 F1 | 	add	local07, #1
05cd4     F2 2A 62 FC | 	wrlong	local07, objptr
05cd8     56 00 00 FF 
05cdc     C8 E5 85 F1 | 	sub	objptr, ##44488
05ce0     64 29 B0 FD | 	call	#_expr
05ce4     01 2C 66 F6 | 	neg	local08, #1
05ce8     00 2E 06 F6 | 	mov	local09, #0
05cec                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05cec                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05cec                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05cec                 | ' ct+=1 : expr()
05cec                 | ' ' now find the vae
05cec                 | ' 
05cec                 | ' j=-1 : i=0 : do : 
05cec                 | LR__0492
05cec                 | '   if variables(i).name=varname$ then j=i: exit loop
05cec     17 27 02 F6 | 	mov	local05, local09
05cf0     04 26 66 F0 | 	shl	local05, #4
05cf4     34 00 00 FF 
05cf8     8C E5 05 F1 | 	add	objptr, ##27020
05cfc     F2 26 02 F1 | 	add	local05, objptr
05d00     13 13 02 FB | 	rdlong	arg01, local05
05d04     14 15 02 F6 | 	mov	arg02, local06
05d08     34 00 00 FF 
05d0c     8C E5 85 F1 | 	sub	objptr, ##27020
05d10     2C 50 B1 FD | 	call	#__system___string_cmp
05d14     00 FA 0D F2 | 	cmp	result1, #0 wz
05d18     17 2D 02 A6 |  if_e	mov	local08, local09
05d1c     20 00 90 AD |  if_e	jmp	#LR__0493
05d20     01 2E 06 F1 | 	add	local09, #1
05d24     54 00 00 FF 
05d28     8C E5 05 F1 | 	add	objptr, ##43404
05d2c     F2 2A 02 FB | 	rdlong	local07, objptr
05d30     54 00 00 FF 
05d34     8C E5 85 F1 | 	sub	objptr, ##43404
05d38     15 2F 5A F2 | 	cmps	local09, local07 wcz
05d3c     AC FF 9F ED |  if_be	jmp	#LR__0492
05d40                 | LR__0493
05d40     16 1F 02 F6 | 	mov	local01, local08
05d44     12 21 02 F6 | 	mov	local02, local04
05d48     17 22 06 F6 | 	mov	local03, #23
05d4c     0F 2B 02 F6 | 	mov	local07, local01
05d50     10 31 02 F6 | 	mov	local10, local02
05d54     11 2D 02 F6 | 	mov	local08, local03
05d58     6A 00 00 FF 
05d5c     00 E4 05 F1 | 	add	objptr, ##54272
05d60     F2 1E 02 FB | 	rdlong	local01, objptr
05d64     0F 2F 02 F6 | 	mov	local09, local01
05d68     01 2E 66 F0 | 	shl	local09, #1
05d6c     0F 2F 02 F1 | 	add	local09, local01
05d70     02 2E 66 F0 | 	shl	local09, #2
05d74     03 00 00 FF 
05d78     00 E4 85 F1 | 	sub	objptr, ##1536
05d7c     F2 2E 02 F1 | 	add	local09, objptr
05d80     17 2B 62 FC | 	wrlong	local07, local09
05d84     03 00 00 FF 
05d88     00 E4 05 F1 | 	add	objptr, ##1536
05d8c     F2 1E 02 FB | 	rdlong	local01, objptr
05d90     0F 2F 02 F6 | 	mov	local09, local01
05d94     01 2E 66 F0 | 	shl	local09, #1
05d98     0F 2F 02 F1 | 	add	local09, local01
05d9c     02 2E 66 F0 | 	shl	local09, #2
05da0     03 00 00 FF 
05da4     00 E4 85 F1 | 	sub	objptr, ##1536
05da8     F2 2E 02 F1 | 	add	local09, objptr
05dac     04 2E 06 F1 | 	add	local09, #4
05db0     17 31 62 FC | 	wrlong	local10, local09
05db4     03 00 00 FF 
05db8     00 E4 05 F1 | 	add	objptr, ##1536
05dbc     F2 30 02 FB | 	rdlong	local10, objptr
05dc0     18 1F 02 F6 | 	mov	local01, local10
05dc4     01 1E 66 F0 | 	shl	local01, #1
05dc8     18 1F 02 F1 | 	add	local01, local10
05dcc     02 1E 66 F0 | 	shl	local01, #2
05dd0     03 00 00 FF 
05dd4     00 E4 85 F1 | 	sub	objptr, ##1536
05dd8     F2 1E 02 F1 | 	add	local01, objptr
05ddc     08 1E 06 F1 | 	add	local01, #8
05de0     0F 2D 62 FC | 	wrlong	local08, local01
05de4     03 00 00 FF 
05de8     00 E4 05 F1 | 	add	objptr, ##1536
05dec     F2 2A 02 FB | 	rdlong	local07, objptr
05df0     01 2A 06 F1 | 	add	local07, #1
05df4     F2 2A 62 FC | 	wrlong	local07, objptr
05df8     6A 00 00 FF 
05dfc     00 E4 85 F1 | 	sub	objptr, ##54272
05e00                 | LR__0494
05e00     A7 F0 03 F6 | 	mov	ptra, fp
05e04     B2 00 A0 FD | 	call	#popregs_
05e08                 | _compile_array_assign_ret
05e08     2D 00 64 FD | 	ret
05e0c                 | 
05e0c                 | ' 
05e0c                 | ' 
05e0c                 | ' sub compile_immediate_assign(linetype as ulong)
05e0c                 | _compile_immediate_assign
05e0c     09 4A 05 F6 | 	mov	COUNT_, #9
05e10     A8 00 A0 FD | 	call	#pushregs_
05e14     09 25 0A F6 | 	mov	local04, arg01 wz
05e18     FF 22 06 F6 | 	mov	local03, #255
05e1c     01 26 66 F6 | 	neg	local05, #1
05e20                 | ' 
05e20                 | ' t1.result_type=result_error : t1.result.uresult=0
05e20                 | ' i=-1: j=-1
05e20                 | ' 
05e20                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05e20     2C 00 90 5D |  if_ne	jmp	#LR__0500
05e24     54 00 00 FF 
05e28     90 E5 05 F1 | 	add	objptr, ##43408
05e2c     F2 28 02 FB | 	rdlong	local06, objptr
05e30     02 00 00 FF 
05e34     38 E4 05 F1 | 	add	objptr, ##1080
05e38     F2 04 68 FC | 	wrlong	#2, objptr
05e3c     13 00 00 FF 
05e40     38 E4 05 F1 | 	add	objptr, ##9784
05e44     F2 00 68 FC | 	wrlong	#0, objptr
05e48     6A 00 00 FF 
05e4c     00 E4 85 F1 | 	sub	objptr, ##54272
05e50                 | LR__0500
05e50                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05e50     02 24 0E F2 | 	cmp	local04, #2 wz
05e54     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05e58     54 00 00 AF 
05e5c     90 E5 05 A1 |  if_e	add	objptr, ##43408
05e60     F2 28 02 AB |  if_e	rdlong	local06, objptr
05e64     02 00 00 AF 
05e68     38 E4 05 A1 |  if_e	add	objptr, ##1080
05e6c     F2 04 68 AC |  if_e	wrlong	#2, objptr
05e70     56 00 00 AF 
05e74     C8 E5 85 A1 |  if_e	sub	objptr, ##44488
05e78                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05e78     04 24 0E F2 | 	cmp	local04, #4 wz
05e7c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05e80     2C 00 90 5D |  if_ne	jmp	#LR__0501
05e84     54 00 00 FF 
05e88     98 E5 05 F1 | 	add	objptr, ##43416
05e8c     F2 28 02 FB | 	rdlong	local06, objptr
05e90     02 00 00 FF 
05e94     30 E4 05 F1 | 	add	objptr, ##1072
05e98     F2 06 68 FC | 	wrlong	#3, objptr
05e9c     13 00 00 FF 
05ea0     38 E4 05 F1 | 	add	objptr, ##9784
05ea4     F2 04 68 FC | 	wrlong	#2, objptr
05ea8     6A 00 00 FF 
05eac     00 E4 85 F1 | 	sub	objptr, ##54272
05eb0                 | LR__0501
05eb0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05eb0     05 24 0E F2 | 	cmp	local04, #5 wz
05eb4     3C 00 90 5D |  if_ne	jmp	#LR__0502
05eb8     56 00 00 FF 
05ebc     C8 E5 05 F1 | 	add	objptr, ##44488
05ec0     F2 FA 01 FB | 	rdlong	result1, objptr
05ec4     FD 28 02 F6 | 	mov	local06, result1
05ec8     03 28 66 F0 | 	shl	local06, #3
05ecc     02 00 00 FF 
05ed0     38 E4 85 F1 | 	sub	objptr, ##1080
05ed4     F2 28 02 F1 | 	add	local06, objptr
05ed8     14 29 02 FB | 	rdlong	local06, local06
05edc     02 FA 05 F1 | 	add	result1, #2
05ee0     02 00 00 FF 
05ee4     38 E4 05 F1 | 	add	objptr, ##1080
05ee8     F2 FA 61 FC | 	wrlong	result1, objptr
05eec     56 00 00 FF 
05ef0     C8 E5 85 F1 | 	sub	objptr, ##44488
05ef4                 | LR__0502
05ef4     14 13 02 F6 | 	mov	arg01, local06
05ef8     01 14 06 F6 | 	mov	arg02, #1
05efc     E8 6E B1 FD | 	call	#__system__Right_S
05f00     44 27 B0 FD | 	call	#_expr
05f04                 | '  
05f04                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05f04                 | ' 
05f04                 | ' suffix2$=right$(varname2$,1)
05f04                 | ' expr()
05f04                 | ' 
05f04                 | ' 
05f04                 | ' if varnum>0 then
05f04     54 00 00 FF 
05f08     8C E5 05 F1 | 	add	objptr, ##43404
05f0c     F2 2A 02 FB | 	rdlong	local07, objptr
05f10     54 00 00 FF 
05f14     8C E5 85 F1 | 	sub	objptr, ##43404
05f18     01 2A 56 F2 | 	cmps	local07, #1 wc
05f1c     58 00 90 CD |  if_b	jmp	#LR__0505
05f20                 | '   for i=0 to varnum-1
05f20     00 2C 06 F6 | 	mov	local08, #0
05f24     54 00 00 FF 
05f28     8C E5 05 F1 | 	add	objptr, ##43404
05f2c     F2 2E 02 FB | 	rdlong	local09, objptr
05f30     54 00 00 FF 
05f34     8C E5 85 F1 | 	sub	objptr, ##43404
05f38                 | LR__0503
05f38     17 2D 52 F2 | 	cmps	local08, local09 wc
05f3c     38 00 90 3D |  if_ae	jmp	#LR__0504
05f40                 | '     if variables(i).name=varname2$ then j=i : exit
05f40     16 2B 02 F6 | 	mov	local07, local08
05f44     04 2A 66 F0 | 	shl	local07, #4
05f48     34 00 00 FF 
05f4c     8C E5 05 F1 | 	add	objptr, ##27020
05f50     F2 2A 02 F1 | 	add	local07, objptr
05f54     15 13 02 FB | 	rdlong	arg01, local07
05f58     14 15 02 F6 | 	mov	arg02, local06
05f5c     34 00 00 FF 
05f60     8C E5 85 F1 | 	sub	objptr, ##27020
05f64     D8 4D B1 FD | 	call	#__system___string_cmp
05f68     00 FA 0D F2 | 	cmp	result1, #0 wz
05f6c     16 27 02 A6 |  if_e	mov	local05, local08
05f70     01 2C 06 51 |  if_ne	add	local08, #1
05f74     C0 FF 9F 5D |  if_ne	jmp	#LR__0503
05f78                 | LR__0504
05f78                 | LR__0505
05f78                 | ' if  j=-1 andalso varnum<maxvars then   
05f78     FF FF 7F FF 
05f7c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05f80     60 00 90 5D |  if_ne	jmp	#LR__0506
05f84     54 00 00 FF 
05f88     8C E5 05 F1 | 	add	objptr, ##43404
05f8c     F2 2A 02 FB | 	rdlong	local07, objptr
05f90     54 00 00 FF 
05f94     8C E5 85 F1 | 	sub	objptr, ##43404
05f98     01 00 00 FF 
05f9c     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05fa0     40 00 90 3D |  if_ae	jmp	#LR__0506
05fa4     54 00 00 FF 
05fa8     8C E5 05 F1 | 	add	objptr, ##43404
05fac     F2 2E 02 FB | 	rdlong	local09, objptr
05fb0     04 2E 66 F0 | 	shl	local09, #4
05fb4     20 00 00 FF 
05fb8     00 E4 85 F1 | 	sub	objptr, ##16384
05fbc     F2 2E 02 F1 | 	add	local09, objptr
05fc0     17 29 62 FC | 	wrlong	local06, local09
05fc4     20 00 00 FF 
05fc8     00 E4 05 F1 | 	add	objptr, ##16384
05fcc     F2 2A 02 FB | 	rdlong	local07, objptr
05fd0     15 27 02 F6 | 	mov	local05, local07
05fd4     01 2A 06 F1 | 	add	local07, #1
05fd8     F2 2A 62 FC | 	wrlong	local07, objptr
05fdc     54 00 00 FF 
05fe0     8C E5 85 F1 | 	sub	objptr, ##43404
05fe4                 | LR__0506
05fe4     13 1F 02 F6 | 	mov	local01, local05
05fe8     17 22 06 F6 | 	mov	local03, #23
05fec     0F 2B 02 F6 | 	mov	local07, local01
05ff0     10 2F 02 F6 | 	mov	local09, local02
05ff4     11 1F 02 F6 | 	mov	local01, local03
05ff8     6A 00 00 FF 
05ffc     00 E4 05 F1 | 	add	objptr, ##54272
06000     F2 2C 02 FB | 	rdlong	local08, objptr
06004     16 29 02 F6 | 	mov	local06, local08
06008     01 28 66 F0 | 	shl	local06, #1
0600c     16 29 02 F1 | 	add	local06, local08
06010     02 28 66 F0 | 	shl	local06, #2
06014     03 00 00 FF 
06018     00 E4 85 F1 | 	sub	objptr, ##1536
0601c     F2 28 02 F1 | 	add	local06, objptr
06020     14 2B 62 FC | 	wrlong	local07, local06
06024     03 00 00 FF 
06028     00 E4 05 F1 | 	add	objptr, ##1536
0602c     F2 2C 02 FB | 	rdlong	local08, objptr
06030     16 2B 02 F6 | 	mov	local07, local08
06034     01 2A 66 F0 | 	shl	local07, #1
06038     16 2B 02 F1 | 	add	local07, local08
0603c     02 2A 66 F0 | 	shl	local07, #2
06040     03 00 00 FF 
06044     00 E4 85 F1 | 	sub	objptr, ##1536
06048     F2 2A 02 F1 | 	add	local07, objptr
0604c     04 2A 06 F1 | 	add	local07, #4
06050     15 2F 62 FC | 	wrlong	local09, local07
06054     03 00 00 FF 
06058     00 E4 05 F1 | 	add	objptr, ##1536
0605c     F2 2E 02 FB | 	rdlong	local09, objptr
06060     17 2D 02 F6 | 	mov	local08, local09
06064     01 2C 66 F0 | 	shl	local08, #1
06068     17 2D 02 F1 | 	add	local08, local09
0606c     02 2C 66 F0 | 	shl	local08, #2
06070     03 00 00 FF 
06074     00 E4 85 F1 | 	sub	objptr, ##1536
06078     F2 2C 02 F1 | 	add	local08, objptr
0607c     08 2C 06 F1 | 	add	local08, #8
06080     16 1F 62 FC | 	wrlong	local01, local08
06084     03 00 00 FF 
06088     00 E4 05 F1 | 	add	objptr, ##1536
0608c     F2 2A 02 FB | 	rdlong	local07, objptr
06090     01 2A 06 F1 | 	add	local07, #1
06094     F2 2A 62 FC | 	wrlong	local07, objptr
06098     6A 00 00 FF 
0609c     00 E4 85 F1 | 	sub	objptr, ##54272
060a0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
060a0                 | ' 
060a0                 | ' 
060a0                 | ' 
060a0                 | ' 
060a0                 | ' 
060a0                 | ' 
060a0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
060a0                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
060a0     00 24 0E F2 | 	cmp	local04, #0 wz
060a4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
060a8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
060ac     38 00 90 5D |  if_ne	jmp	#LR__0507
060b0     6A 00 00 FF 
060b4     00 E4 05 F1 | 	add	objptr, ##54272
060b8     F2 1E 02 FB | 	rdlong	local01, objptr
060bc     0F 2F 02 F6 | 	mov	local09, local01
060c0     01 2E 66 F0 | 	shl	local09, #1
060c4     0F 2F 02 F1 | 	add	local09, local01
060c8     02 2E 66 F0 | 	shl	local09, #2
060cc     03 00 00 FF 
060d0     00 E4 85 F1 | 	sub	objptr, ##1536
060d4     F2 2E 02 F1 | 	add	local09, objptr
060d8     08 2E 06 F1 | 	add	local09, #8
060dc     17 FD 6B FC | 	wrlong	#510, local09
060e0     67 00 00 FF 
060e4     00 E4 85 F1 | 	sub	objptr, ##52736
060e8                 | LR__0507
060e8     A7 F0 03 F6 | 	mov	ptra, fp
060ec     B2 00 A0 FD | 	call	#popregs_
060f0                 | _compile_immediate_assign_ret
060f0     2D 00 64 FD | 	ret
060f4                 | 
060f4                 | ' 
060f4                 | ' ' ------------------ compile the line that is calling a command 
060f4                 | ' 
060f4                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
060f4                 | _compile
060f4     04 4A 05 F6 | 	mov	COUNT_, #4
060f8     A8 00 A0 FD | 	call	#pushregs_
060fc     09 1F 0A F6 | 	mov	local01, arg01 wz
06100     0A 21 02 F6 | 	mov	local02, arg02
06104     0B 23 02 F6 | 	mov	local03, arg03
06108                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06108                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06108                 | '  
06108                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06108                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06108     0C 00 90 5D |  if_ne	jmp	#LR__0510
0610c     00 12 06 F6 | 	mov	arg01, #0
06110     44 F4 BF FD | 	call	#_compile_immediate
06114     A0 00 90 FD | 	jmp	#LR__0517
06118                 | LR__0510
06118     67 00 00 FF 
0611c     00 E4 05 F1 | 	add	objptr, ##52736
06120     F2 1E 62 FC | 	wrlong	local01, objptr
06124     04 E4 05 F1 | 	add	objptr, #4
06128     F2 20 62 FC | 	wrlong	local02, objptr
0612c     67 00 00 FF 
06130     04 E4 85 F1 | 	sub	objptr, ##52740
06134     11 13 02 F6 | 	mov	arg01, local03
06138     01 12 06 F1 | 	add	arg01, #1
0613c     18 F4 BF FD | 	call	#_compile_immediate
06140     FD 24 0A F6 | 	mov	local04, result1 wz
06144                 | ' 
06144                 | ' ucompiledline(0)=alinemajor
06144                 | ' ucompiledline(1)=alineminor
06144                 | ' 
06144                 | ' 
06144                 | ' ' cont: 0: this is the first part of the line that will continue
06144                 | ' ' 1 - this is the continuation of the line
06144                 | ' ' 2 - this is the last continued line
06144                 | ' ' 3 - this is the ome and only part
06144                 | ' 
06144                 | ' err=compile_immediate(cont+1) 
06144                 | ' if err=0 then
06144     6C 00 90 5D |  if_ne	jmp	#LR__0516
06148                 | '   if cont=3 orelse cont=2 then 
06148     03 22 0E F2 | 	cmp	local03, #3 wz
0614c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06150     60 00 90 5D |  if_ne	jmp	#LR__0515
06154                 | '     if alinemajor >lastline then 
06154     6A 00 00 FF 
06158     0C E4 05 F1 | 	add	objptr, ##54284
0615c     F2 16 02 FB | 	rdlong	arg03, objptr
06160     6A 00 00 FF 
06164     0C E4 85 F1 | 	sub	objptr, ##54284
06168     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0616c     0C 00 90 ED |  if_be	jmp	#LR__0511
06170     0F 13 02 F6 | 	mov	arg01, local01
06174     00 F3 BF FD | 	call	#_add_line_at_end
06178     38 00 90 FD | 	jmp	#LR__0514
0617c                 | LR__0511
0617c     0F 13 02 F6 | 	mov	arg01, local01
06180     74 EB BF FD | 	call	#_deleteline
06184                 | '       deleteline(alinemajor)  
06184                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
06184     6A 00 00 FF 
06188     0C E4 05 F1 | 	add	objptr, ##54284
0618c     F2 16 02 FB | 	rdlong	arg03, objptr
06190     6A 00 00 FF 
06194     0C E4 85 F1 | 	sub	objptr, ##54284
06198     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0619c     0C 00 90 ED |  if_be	jmp	#LR__0512
061a0     0F 13 02 F6 | 	mov	arg01, local01
061a4     D0 F2 BF FD | 	call	#_add_line_at_end
061a8     08 00 90 FD | 	jmp	#LR__0513
061ac                 | LR__0512
061ac     0F 13 02 F6 | 	mov	arg01, local01
061b0     7C F0 BF FD | 	call	#_insertline
061b4                 | LR__0513
061b4                 | LR__0514
061b4                 | LR__0515
061b4                 | LR__0516
061b4                 | ' return err
061b4     12 FB 01 F6 | 	mov	result1, local04
061b8                 | LR__0517
061b8     A7 F0 03 F6 | 	mov	ptra, fp
061bc     B2 00 A0 FD | 	call	#popregs_
061c0                 | _compile_ret
061c0     2D 00 64 FD | 	ret
061c4                 | 
061c4                 | ' 
061c4                 | ' ' ------------------ compile the line that is assigning to a variable
061c4                 | ' 
061c4                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
061c4                 | _compile_assign
061c4     03 4A 05 F6 | 	mov	COUNT_, #3
061c8     A8 00 A0 FD | 	call	#pushregs_
061cc     09 1F 0A F6 | 	mov	local01, arg01 wz
061d0     0A 21 02 F6 | 	mov	local02, arg02
061d4     0B 23 02 F6 | 	mov	local03, arg03
061d8                 | ' 
061d8                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
061d8                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
061d8     0C 00 90 5D |  if_ne	jmp	#LR__0520
061dc     00 12 06 F6 | 	mov	arg01, #0
061e0     28 FC BF FD | 	call	#_compile_immediate_assign
061e4     94 00 90 FD | 	jmp	#LR__0526
061e8                 | LR__0520
061e8     67 00 00 FF 
061ec     00 E4 05 F1 | 	add	objptr, ##52736
061f0     F2 1E 62 FC | 	wrlong	local01, objptr
061f4     04 E4 05 F1 | 	add	objptr, #4
061f8     F2 20 62 FC | 	wrlong	local02, objptr
061fc     67 00 00 FF 
06200     04 E4 85 F1 | 	sub	objptr, ##52740
06204     11 13 02 F6 | 	mov	arg01, local03
06208     01 12 06 F1 | 	add	arg01, #1
0620c     FC FB BF FD | 	call	#_compile_immediate_assign
06210                 | ' 
06210                 | ' ucompiledline(0)=alinemajor
06210                 | ' ucompiledline(1)=alineminor
06210                 | ' 
06210                 | ' compile_immediate_assign(cont+1) 
06210                 | ' 
06210                 | ' if cont=3 orelse cont=2 then 
06210     03 22 0E F2 | 	cmp	local03, #3 wz
06214     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06218     60 00 90 5D |  if_ne	jmp	#LR__0525
0621c                 | '   if alinemajor >lastline then 
0621c     6A 00 00 FF 
06220     0C E4 05 F1 | 	add	objptr, ##54284
06224     F2 16 02 FB | 	rdlong	arg03, objptr
06228     6A 00 00 FF 
0622c     0C E4 85 F1 | 	sub	objptr, ##54284
06230     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06234     0C 00 90 ED |  if_be	jmp	#LR__0521
06238     0F 13 02 F6 | 	mov	arg01, local01
0623c     38 F2 BF FD | 	call	#_add_line_at_end
06240     38 00 90 FD | 	jmp	#LR__0524
06244                 | LR__0521
06244     0F 13 02 F6 | 	mov	arg01, local01
06248     AC EA BF FD | 	call	#_deleteline
0624c                 | '     deleteline(alinemajor)  
0624c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0624c     6A 00 00 FF 
06250     0C E4 05 F1 | 	add	objptr, ##54284
06254     F2 16 02 FB | 	rdlong	arg03, objptr
06258     6A 00 00 FF 
0625c     0C E4 85 F1 | 	sub	objptr, ##54284
06260     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06264     0C 00 90 ED |  if_be	jmp	#LR__0522
06268     0F 13 02 F6 | 	mov	arg01, local01
0626c     08 F2 BF FD | 	call	#_add_line_at_end
06270     08 00 90 FD | 	jmp	#LR__0523
06274                 | LR__0522
06274     0F 13 02 F6 | 	mov	arg01, local01
06278     B4 EF BF FD | 	call	#_insertline
0627c                 | LR__0523
0627c                 | LR__0524
0627c                 | LR__0525
0627c                 | LR__0526
0627c     A7 F0 03 F6 | 	mov	ptra, fp
06280     B2 00 A0 FD | 	call	#popregs_
06284                 | _compile_assign_ret
06284     2D 00 64 FD | 	ret
06288                 | 
06288                 | ' 
06288                 | ' sub compile_error(errno)
06288                 | _compile_error
06288     FF 04 06 F6 | 	mov	_var03, #255
0628c     01 07 02 F6 | 	mov	_var04, _var02
06290     02 09 02 F6 | 	mov	_var05, _var03
06294     6A 00 00 FF 
06298     00 E4 05 F1 | 	add	objptr, ##54272
0629c     F2 0A 02 FB | 	rdlong	_var06, objptr
062a0     05 0D 02 F6 | 	mov	_var07, _var06
062a4     01 0C 66 F0 | 	shl	_var07, #1
062a8     05 0D 02 F1 | 	add	_var07, _var06
062ac     02 0C 66 F0 | 	shl	_var07, #2
062b0     03 00 00 FF 
062b4     00 E4 85 F1 | 	sub	objptr, ##1536
062b8     F2 0C 02 F1 | 	add	_var07, objptr
062bc     06 13 62 FC | 	wrlong	arg01, _var07
062c0     03 00 00 FF 
062c4     00 E4 05 F1 | 	add	objptr, ##1536
062c8     F2 0C 02 FB | 	rdlong	_var07, objptr
062cc     06 0B 02 F6 | 	mov	_var06, _var07
062d0     01 0A 66 F0 | 	shl	_var06, #1
062d4     06 0B 02 F1 | 	add	_var06, _var07
062d8     02 0A 66 F0 | 	shl	_var06, #2
062dc     03 00 00 FF 
062e0     00 E4 85 F1 | 	sub	objptr, ##1536
062e4     F2 0A 02 F1 | 	add	_var06, objptr
062e8     04 0A 06 F1 | 	add	_var06, #4
062ec     05 07 62 FC | 	wrlong	_var04, _var06
062f0     03 00 00 FF 
062f4     00 E4 05 F1 | 	add	objptr, ##1536
062f8     F2 0C 02 FB | 	rdlong	_var07, objptr
062fc     06 0B 02 F6 | 	mov	_var06, _var07
06300     01 0A 66 F0 | 	shl	_var06, #1
06304     06 0B 02 F1 | 	add	_var06, _var07
06308     02 0A 66 F0 | 	shl	_var06, #2
0630c     03 00 00 FF 
06310     00 E4 85 F1 | 	sub	objptr, ##1536
06314     F2 0A 02 F1 | 	add	_var06, objptr
06318     08 0A 06 F1 | 	add	_var06, #8
0631c     05 09 62 FC | 	wrlong	_var05, _var06
06320     03 00 00 FF 
06324     00 E4 05 F1 | 	add	objptr, ##1536
06328     F2 12 02 FB | 	rdlong	arg01, objptr
0632c     01 12 06 F1 | 	add	arg01, #1
06330     F2 12 62 FC | 	wrlong	arg01, objptr
06334     6A 00 00 FF 
06338     00 E4 85 F1 | 	sub	objptr, ##54272
0633c                 | _compile_error_ret
0633c     2D 00 64 FD | 	ret
06340                 | 
06340                 | ' 
06340                 | ' sub compile_unknown() 
06340                 | _compile_unknown
06340     FF 04 06 F6 | 	mov	_var03, #255
06344     17 00 06 F6 | 	mov	_var01, #23
06348     01 07 02 F6 | 	mov	_var04, _var02
0634c     02 01 02 F6 | 	mov	_var01, _var03
06350     6A 00 00 FF 
06354     00 E4 05 F1 | 	add	objptr, ##54272
06358     F2 08 02 FB | 	rdlong	_var05, objptr
0635c     04 0B 02 F6 | 	mov	_var06, _var05
06360     01 0A 66 F0 | 	shl	_var06, #1
06364     04 0B 02 F1 | 	add	_var06, _var05
06368     02 0A 66 F0 | 	shl	_var06, #2
0636c     03 00 00 FF 
06370     00 E4 85 F1 | 	sub	objptr, ##1536
06374     F2 0A 02 F1 | 	add	_var06, objptr
06378     05 2F 68 FC | 	wrlong	#23, _var06
0637c     03 00 00 FF 
06380     00 E4 05 F1 | 	add	objptr, ##1536
06384     F2 0A 02 FB | 	rdlong	_var06, objptr
06388     05 09 02 F6 | 	mov	_var05, _var06
0638c     01 08 66 F0 | 	shl	_var05, #1
06390     05 09 02 F1 | 	add	_var05, _var06
06394     02 08 66 F0 | 	shl	_var05, #2
06398     03 00 00 FF 
0639c     00 E4 85 F1 | 	sub	objptr, ##1536
063a0     F2 08 02 F1 | 	add	_var05, objptr
063a4     04 08 06 F1 | 	add	_var05, #4
063a8     04 07 62 FC | 	wrlong	_var04, _var05
063ac     03 00 00 FF 
063b0     00 E4 05 F1 | 	add	objptr, ##1536
063b4     F2 0A 02 FB | 	rdlong	_var06, objptr
063b8     05 09 02 F6 | 	mov	_var05, _var06
063bc     01 08 66 F0 | 	shl	_var05, #1
063c0     05 09 02 F1 | 	add	_var05, _var06
063c4     02 08 66 F0 | 	shl	_var05, #2
063c8     03 00 00 FF 
063cc     00 E4 85 F1 | 	sub	objptr, ##1536
063d0     F2 08 02 F1 | 	add	_var05, objptr
063d4     08 08 06 F1 | 	add	_var05, #8
063d8     04 01 62 FC | 	wrlong	_var01, _var05
063dc     03 00 00 FF 
063e0     00 E4 05 F1 | 	add	objptr, ##1536
063e4     F2 0A 02 FB | 	rdlong	_var06, objptr
063e8     01 0A 06 F1 | 	add	_var06, #1
063ec     F2 0A 62 FC | 	wrlong	_var06, objptr
063f0     6A 00 00 FF 
063f4     00 E4 85 F1 | 	sub	objptr, ##54272
063f8                 | _compile_unknown_ret
063f8     2D 00 64 FD | 	ret
063fc                 | 
063fc                 | ' 
063fc                 | ' function compile_fun_2p() as ulong
063fc                 | _compile_fun_2p
063fc     01 4A 05 F6 | 	mov	COUNT_, #1
06400     A8 00 A0 FD | 	call	#pushregs_
06404     40 22 B0 FD | 	call	#_expr
06408                 | ' 
06408                 | ' expr()
06408                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06408     56 00 00 FF 
0640c     C8 E5 05 F1 | 	add	objptr, ##44488
06410     F2 1E 02 FB | 	rdlong	local01, objptr
06414     03 1E 66 F0 | 	shl	local01, #3
06418     02 00 00 FF 
0641c     38 E4 85 F1 | 	sub	objptr, ##1080
06420     F2 1E 02 F1 | 	add	local01, objptr
06424     04 1E 06 F1 | 	add	local01, #4
06428     0F 1F 02 FB | 	rdlong	local01, local01
0642c     11 1E 0E F2 | 	cmp	local01, #17 wz
06430     54 00 00 FF 
06434     90 E5 85 F1 | 	sub	objptr, ##43408
06438     15 FA 05 56 |  if_ne	mov	result1, #21
0643c     24 00 90 5D |  if_ne	jmp	#LR__0530
06440     56 00 00 FF 
06444     C8 E5 05 F1 | 	add	objptr, ##44488
06448     F2 1E 02 FB | 	rdlong	local01, objptr
0644c     01 1E 06 F1 | 	add	local01, #1
06450     F2 1E 62 FC | 	wrlong	local01, objptr
06454     56 00 00 FF 
06458     C8 E5 85 F1 | 	sub	objptr, ##44488
0645c     E8 21 B0 FD | 	call	#_expr
06460     00 FA 05 F6 | 	mov	result1, #0
06464                 | LR__0530
06464     A7 F0 03 F6 | 	mov	ptra, fp
06468     B2 00 A0 FD | 	call	#popregs_
0646c                 | _compile_fun_2p_ret
0646c     2D 00 64 FD | 	ret
06470                 | 
06470                 | ' 
06470                 | ' function compile_fun_3p() as ulong
06470                 | _compile_fun_3p
06470     01 4A 05 F6 | 	mov	COUNT_, #1
06474     A8 00 A0 FD | 	call	#pushregs_
06478     CC 21 B0 FD | 	call	#_expr
0647c                 | ' 
0647c                 | ' expr()
0647c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0647c     56 00 00 FF 
06480     C8 E5 05 F1 | 	add	objptr, ##44488
06484     F2 1E 02 FB | 	rdlong	local01, objptr
06488     03 1E 66 F0 | 	shl	local01, #3
0648c     02 00 00 FF 
06490     38 E4 85 F1 | 	sub	objptr, ##1080
06494     F2 1E 02 F1 | 	add	local01, objptr
06498     04 1E 06 F1 | 	add	local01, #4
0649c     0F 1F 02 FB | 	rdlong	local01, local01
064a0     11 1E 0E F2 | 	cmp	local01, #17 wz
064a4     54 00 00 FF 
064a8     90 E5 85 F1 | 	sub	objptr, ##43408
064ac     15 FA 05 56 |  if_ne	mov	result1, #21
064b0     7C 00 90 5D |  if_ne	jmp	#LR__0540
064b4     56 00 00 FF 
064b8     C8 E5 05 F1 | 	add	objptr, ##44488
064bc     F2 1E 02 FB | 	rdlong	local01, objptr
064c0     01 1E 06 F1 | 	add	local01, #1
064c4     F2 1E 62 FC | 	wrlong	local01, objptr
064c8     56 00 00 FF 
064cc     C8 E5 85 F1 | 	sub	objptr, ##44488
064d0     74 21 B0 FD | 	call	#_expr
064d4                 | ' expr()
064d4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064d4     56 00 00 FF 
064d8     C8 E5 05 F1 | 	add	objptr, ##44488
064dc     F2 1E 02 FB | 	rdlong	local01, objptr
064e0     03 1E 66 F0 | 	shl	local01, #3
064e4     02 00 00 FF 
064e8     38 E4 85 F1 | 	sub	objptr, ##1080
064ec     F2 1E 02 F1 | 	add	local01, objptr
064f0     04 1E 06 F1 | 	add	local01, #4
064f4     0F 1F 02 FB | 	rdlong	local01, local01
064f8     11 1E 0E F2 | 	cmp	local01, #17 wz
064fc     54 00 00 FF 
06500     90 E5 85 F1 | 	sub	objptr, ##43408
06504     15 FA 05 56 |  if_ne	mov	result1, #21
06508     24 00 90 5D |  if_ne	jmp	#LR__0540
0650c     56 00 00 FF 
06510     C8 E5 05 F1 | 	add	objptr, ##44488
06514     F2 1E 02 FB | 	rdlong	local01, objptr
06518     01 1E 06 F1 | 	add	local01, #1
0651c     F2 1E 62 FC | 	wrlong	local01, objptr
06520     56 00 00 FF 
06524     C8 E5 85 F1 | 	sub	objptr, ##44488
06528     1C 21 B0 FD | 	call	#_expr
0652c     00 FA 05 F6 | 	mov	result1, #0
06530                 | LR__0540
06530     A7 F0 03 F6 | 	mov	ptra, fp
06534     B2 00 A0 FD | 	call	#popregs_
06538                 | _compile_fun_3p_ret
06538     2D 00 64 FD | 	ret
0653c                 | 
0653c                 | ' 
0653c                 | ' function compile_fun_4p() as ulong
0653c                 | _compile_fun_4p
0653c     01 4A 05 F6 | 	mov	COUNT_, #1
06540     A8 00 A0 FD | 	call	#pushregs_
06544     00 21 B0 FD | 	call	#_expr
06548                 | ' 
06548                 | ' expr()
06548                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06548     56 00 00 FF 
0654c     C8 E5 05 F1 | 	add	objptr, ##44488
06550     F2 1E 02 FB | 	rdlong	local01, objptr
06554     03 1E 66 F0 | 	shl	local01, #3
06558     02 00 00 FF 
0655c     38 E4 85 F1 | 	sub	objptr, ##1080
06560     F2 1E 02 F1 | 	add	local01, objptr
06564     04 1E 06 F1 | 	add	local01, #4
06568     0F 1F 02 FB | 	rdlong	local01, local01
0656c     11 1E 0E F2 | 	cmp	local01, #17 wz
06570     54 00 00 FF 
06574     90 E5 85 F1 | 	sub	objptr, ##43408
06578     15 FA 05 56 |  if_ne	mov	result1, #21
0657c     D4 00 90 5D |  if_ne	jmp	#LR__0550
06580     56 00 00 FF 
06584     C8 E5 05 F1 | 	add	objptr, ##44488
06588     F2 1E 02 FB | 	rdlong	local01, objptr
0658c     01 1E 06 F1 | 	add	local01, #1
06590     F2 1E 62 FC | 	wrlong	local01, objptr
06594     56 00 00 FF 
06598     C8 E5 85 F1 | 	sub	objptr, ##44488
0659c     A8 20 B0 FD | 	call	#_expr
065a0                 | ' expr()
065a0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
065a0     56 00 00 FF 
065a4     C8 E5 05 F1 | 	add	objptr, ##44488
065a8     F2 1E 02 FB | 	rdlong	local01, objptr
065ac     03 1E 66 F0 | 	shl	local01, #3
065b0     02 00 00 FF 
065b4     38 E4 85 F1 | 	sub	objptr, ##1080
065b8     F2 1E 02 F1 | 	add	local01, objptr
065bc     04 1E 06 F1 | 	add	local01, #4
065c0     0F 1F 02 FB | 	rdlong	local01, local01
065c4     11 1E 0E F2 | 	cmp	local01, #17 wz
065c8     54 00 00 FF 
065cc     90 E5 85 F1 | 	sub	objptr, ##43408
065d0     15 FA 05 56 |  if_ne	mov	result1, #21
065d4     7C 00 90 5D |  if_ne	jmp	#LR__0550
065d8     56 00 00 FF 
065dc     C8 E5 05 F1 | 	add	objptr, ##44488
065e0     F2 1E 02 FB | 	rdlong	local01, objptr
065e4     01 1E 06 F1 | 	add	local01, #1
065e8     F2 1E 62 FC | 	wrlong	local01, objptr
065ec     56 00 00 FF 
065f0     C8 E5 85 F1 | 	sub	objptr, ##44488
065f4     50 20 B0 FD | 	call	#_expr
065f8                 | ' expr()
065f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
065f8     56 00 00 FF 
065fc     C8 E5 05 F1 | 	add	objptr, ##44488
06600     F2 1E 02 FB | 	rdlong	local01, objptr
06604     03 1E 66 F0 | 	shl	local01, #3
06608     02 00 00 FF 
0660c     38 E4 85 F1 | 	sub	objptr, ##1080
06610     F2 1E 02 F1 | 	add	local01, objptr
06614     04 1E 06 F1 | 	add	local01, #4
06618     0F 1F 02 FB | 	rdlong	local01, local01
0661c     11 1E 0E F2 | 	cmp	local01, #17 wz
06620     54 00 00 FF 
06624     90 E5 85 F1 | 	sub	objptr, ##43408
06628     15 FA 05 56 |  if_ne	mov	result1, #21
0662c     24 00 90 5D |  if_ne	jmp	#LR__0550
06630     56 00 00 FF 
06634     C8 E5 05 F1 | 	add	objptr, ##44488
06638     F2 1E 02 FB | 	rdlong	local01, objptr
0663c     01 1E 06 F1 | 	add	local01, #1
06640     F2 1E 62 FC | 	wrlong	local01, objptr
06644     56 00 00 FF 
06648     C8 E5 85 F1 | 	sub	objptr, ##44488
0664c     F8 1F B0 FD | 	call	#_expr
06650     00 FA 05 F6 | 	mov	result1, #0
06654                 | LR__0550
06654     A7 F0 03 F6 | 	mov	ptra, fp
06658     B2 00 A0 FD | 	call	#popregs_
0665c                 | _compile_fun_4p_ret
0665c     2D 00 64 FD | 	ret
06660                 | 
06660                 | ' 
06660                 | ' 
06660                 | ' function compile_fun_5p() as ulong
06660                 | _compile_fun_5p
06660     01 4A 05 F6 | 	mov	COUNT_, #1
06664     A8 00 A0 FD | 	call	#pushregs_
06668     DC 1F B0 FD | 	call	#_expr
0666c                 | ' 
0666c                 | ' expr()
0666c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0666c     56 00 00 FF 
06670     C8 E5 05 F1 | 	add	objptr, ##44488
06674     F2 1E 02 FB | 	rdlong	local01, objptr
06678     03 1E 66 F0 | 	shl	local01, #3
0667c     02 00 00 FF 
06680     38 E4 85 F1 | 	sub	objptr, ##1080
06684     F2 1E 02 F1 | 	add	local01, objptr
06688     04 1E 06 F1 | 	add	local01, #4
0668c     0F 1F 02 FB | 	rdlong	local01, local01
06690     11 1E 0E F2 | 	cmp	local01, #17 wz
06694     54 00 00 FF 
06698     90 E5 85 F1 | 	sub	objptr, ##43408
0669c     15 FA 05 56 |  if_ne	mov	result1, #21
066a0     2C 01 90 5D |  if_ne	jmp	#LR__0560
066a4     56 00 00 FF 
066a8     C8 E5 05 F1 | 	add	objptr, ##44488
066ac     F2 1E 02 FB | 	rdlong	local01, objptr
066b0     01 1E 06 F1 | 	add	local01, #1
066b4     F2 1E 62 FC | 	wrlong	local01, objptr
066b8     56 00 00 FF 
066bc     C8 E5 85 F1 | 	sub	objptr, ##44488
066c0     84 1F B0 FD | 	call	#_expr
066c4                 | ' expr()
066c4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
066c4     56 00 00 FF 
066c8     C8 E5 05 F1 | 	add	objptr, ##44488
066cc     F2 1E 02 FB | 	rdlong	local01, objptr
066d0     03 1E 66 F0 | 	shl	local01, #3
066d4     02 00 00 FF 
066d8     38 E4 85 F1 | 	sub	objptr, ##1080
066dc     F2 1E 02 F1 | 	add	local01, objptr
066e0     04 1E 06 F1 | 	add	local01, #4
066e4     0F 1F 02 FB | 	rdlong	local01, local01
066e8     11 1E 0E F2 | 	cmp	local01, #17 wz
066ec     54 00 00 FF 
066f0     90 E5 85 F1 | 	sub	objptr, ##43408
066f4     15 FA 05 56 |  if_ne	mov	result1, #21
066f8     D4 00 90 5D |  if_ne	jmp	#LR__0560
066fc     56 00 00 FF 
06700     C8 E5 05 F1 | 	add	objptr, ##44488
06704     F2 1E 02 FB | 	rdlong	local01, objptr
06708     01 1E 06 F1 | 	add	local01, #1
0670c     F2 1E 62 FC | 	wrlong	local01, objptr
06710     56 00 00 FF 
06714     C8 E5 85 F1 | 	sub	objptr, ##44488
06718     2C 1F B0 FD | 	call	#_expr
0671c                 | ' expr()
0671c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0671c     56 00 00 FF 
06720     C8 E5 05 F1 | 	add	objptr, ##44488
06724     F2 1E 02 FB | 	rdlong	local01, objptr
06728     03 1E 66 F0 | 	shl	local01, #3
0672c     02 00 00 FF 
06730     38 E4 85 F1 | 	sub	objptr, ##1080
06734     F2 1E 02 F1 | 	add	local01, objptr
06738     04 1E 06 F1 | 	add	local01, #4
0673c     0F 1F 02 FB | 	rdlong	local01, local01
06740     11 1E 0E F2 | 	cmp	local01, #17 wz
06744     54 00 00 FF 
06748     90 E5 85 F1 | 	sub	objptr, ##43408
0674c     15 FA 05 56 |  if_ne	mov	result1, #21
06750     7C 00 90 5D |  if_ne	jmp	#LR__0560
06754     56 00 00 FF 
06758     C8 E5 05 F1 | 	add	objptr, ##44488
0675c     F2 1E 02 FB | 	rdlong	local01, objptr
06760     01 1E 06 F1 | 	add	local01, #1
06764     F2 1E 62 FC | 	wrlong	local01, objptr
06768     56 00 00 FF 
0676c     C8 E5 85 F1 | 	sub	objptr, ##44488
06770     D4 1E B0 FD | 	call	#_expr
06774                 | ' expr()
06774                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06774     56 00 00 FF 
06778     C8 E5 05 F1 | 	add	objptr, ##44488
0677c     F2 1E 02 FB | 	rdlong	local01, objptr
06780     03 1E 66 F0 | 	shl	local01, #3
06784     02 00 00 FF 
06788     38 E4 85 F1 | 	sub	objptr, ##1080
0678c     F2 1E 02 F1 | 	add	local01, objptr
06790     04 1E 06 F1 | 	add	local01, #4
06794     0F 1F 02 FB | 	rdlong	local01, local01
06798     11 1E 0E F2 | 	cmp	local01, #17 wz
0679c     54 00 00 FF 
067a0     90 E5 85 F1 | 	sub	objptr, ##43408
067a4     15 FA 05 56 |  if_ne	mov	result1, #21
067a8     24 00 90 5D |  if_ne	jmp	#LR__0560
067ac     56 00 00 FF 
067b0     C8 E5 05 F1 | 	add	objptr, ##44488
067b4     F2 1E 02 FB | 	rdlong	local01, objptr
067b8     01 1E 06 F1 | 	add	local01, #1
067bc     F2 1E 62 FC | 	wrlong	local01, objptr
067c0     56 00 00 FF 
067c4     C8 E5 85 F1 | 	sub	objptr, ##44488
067c8     7C 1E B0 FD | 	call	#_expr
067cc     00 FA 05 F6 | 	mov	result1, #0
067d0                 | LR__0560
067d0     A7 F0 03 F6 | 	mov	ptra, fp
067d4     B2 00 A0 FD | 	call	#popregs_
067d8                 | _compile_fun_5p_ret
067d8     2D 00 64 FD | 	ret
067dc                 | 
067dc                 | ' 
067dc                 | ' function compile_fun_varp() as ulong 
067dc                 | _compile_fun_varp
067dc     02 4A 05 F6 | 	mov	COUNT_, #2
067e0     A8 00 A0 FD | 	call	#pushregs_
067e4     00 1E 06 F6 | 	mov	local01, #0
067e8                 | ' i=0
067e8                 | ' if lparts(ct).token<>token_end then
067e8     56 00 00 FF 
067ec     C8 E5 05 F1 | 	add	objptr, ##44488
067f0     F2 20 02 FB | 	rdlong	local02, objptr
067f4     03 20 66 F0 | 	shl	local02, #3
067f8     02 00 00 FF 
067fc     38 E4 85 F1 | 	sub	objptr, ##1080
06800     F2 20 02 F1 | 	add	local02, objptr
06804     04 20 06 F1 | 	add	local02, #4
06808     10 21 02 FB | 	rdlong	local02, local02
0680c     FE 21 0E F2 | 	cmp	local02, #510 wz
06810     54 00 00 FF 
06814     90 E5 85 F1 | 	sub	objptr, ##43408
06818     5C 00 90 AD |  if_e	jmp	#LR__0572
0681c                 | '   do
0681c                 | LR__0570
0681c     28 1E B0 FD | 	call	#_expr
06820     01 1E 06 F1 | 	add	local01, #1
06824                 | '   expr()
06824                 | '    i+=1
06824                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06824     56 00 00 FF 
06828     C8 E5 05 F1 | 	add	objptr, ##44488
0682c     F2 20 02 FB | 	rdlong	local02, objptr
06830     03 20 66 F0 | 	shl	local02, #3
06834     02 00 00 FF 
06838     38 E4 85 F1 | 	sub	objptr, ##1080
0683c     F2 20 02 F1 | 	add	local02, objptr
06840     04 20 06 F1 | 	add	local02, #4
06844     10 21 02 FB | 	rdlong	local02, local02
06848     11 20 0E F2 | 	cmp	local02, #17 wz
0684c     54 00 00 FF 
06850     90 E5 85 F1 | 	sub	objptr, ##43408
06854     20 00 90 5D |  if_ne	jmp	#LR__0571
06858     56 00 00 FF 
0685c     C8 E5 05 F1 | 	add	objptr, ##44488
06860     F2 20 02 FB | 	rdlong	local02, objptr
06864     01 20 06 F1 | 	add	local02, #1
06868     F2 20 62 FC | 	wrlong	local02, objptr
0686c     56 00 00 FF 
06870     C8 E5 85 F1 | 	sub	objptr, ##44488
06874     A4 FF 9F FD | 	jmp	#LR__0570
06878                 | LR__0571
06878                 | LR__0572
06878                 | ' return i
06878     0F FB 01 F6 | 	mov	result1, local01
0687c     A7 F0 03 F6 | 	mov	ptra, fp
06880     B2 00 A0 FD | 	call	#popregs_
06884                 | _compile_fun_varp_ret
06884     2D 00 64 FD | 	ret
06888                 | 
06888                 | ' 
06888                 | ' 
06888                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06888                 | _compile_print
06888     0B 4A 05 F6 | 	mov	COUNT_, #11
0688c     A8 00 A0 FD | 	call	#pushregs_
06890     00 1E 06 F6 | 	mov	local01, #0
06894     1D 22 06 F6 | 	mov	local03, #29
06898                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06898                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06898     56 00 00 FF 
0689c     C8 E5 05 F1 | 	add	objptr, ##44488
068a0     F2 24 02 FB | 	rdlong	local04, objptr
068a4     03 24 66 F0 | 	shl	local04, #3
068a8     02 00 00 FF 
068ac     38 E4 85 F1 | 	sub	objptr, ##1080
068b0     F2 24 02 F1 | 	add	local04, objptr
068b4     04 24 06 F1 | 	add	local04, #4
068b8     12 25 02 FB | 	rdlong	local04, local04
068bc     FE 25 0E F2 | 	cmp	local04, #510 wz
068c0     54 00 00 FF 
068c4     90 E5 85 F1 | 	sub	objptr, ##43408
068c8     68 01 90 5D |  if_ne	jmp	#LR__0580
068cc     20 22 06 F6 | 	mov	local03, #32
068d0     0F 27 02 F6 | 	mov	local05, local01
068d4     10 29 02 F6 | 	mov	local06, local02
068d8     11 2B 02 F6 | 	mov	local07, local03
068dc     6A 00 00 FF 
068e0     00 E4 05 F1 | 	add	objptr, ##54272
068e4     F2 2C 02 FB | 	rdlong	local08, objptr
068e8     16 2F 02 F6 | 	mov	local09, local08
068ec     01 2E 66 F0 | 	shl	local09, #1
068f0     16 2F 02 F1 | 	add	local09, local08
068f4     02 2E 66 F0 | 	shl	local09, #2
068f8     03 00 00 FF 
068fc     00 E4 85 F1 | 	sub	objptr, ##1536
06900     F2 2E 02 F1 | 	add	local09, objptr
06904     17 27 62 FC | 	wrlong	local05, local09
06908     03 00 00 FF 
0690c     00 E4 05 F1 | 	add	objptr, ##1536
06910     F2 26 02 FB | 	rdlong	local05, objptr
06914     13 31 02 F6 | 	mov	local10, local05
06918     01 30 66 F0 | 	shl	local10, #1
0691c     13 31 02 F1 | 	add	local10, local05
06920     02 30 66 F0 | 	shl	local10, #2
06924     03 00 00 FF 
06928     00 E4 85 F1 | 	sub	objptr, ##1536
0692c     F2 30 02 F1 | 	add	local10, objptr
06930     04 30 06 F1 | 	add	local10, #4
06934     18 29 62 FC | 	wrlong	local06, local10
06938     03 00 00 FF 
0693c     00 E4 05 F1 | 	add	objptr, ##1536
06940     F2 26 02 FB | 	rdlong	local05, objptr
06944     13 33 02 F6 | 	mov	local11, local05
06948     01 32 66 F0 | 	shl	local11, #1
0694c     13 33 02 F1 | 	add	local11, local05
06950     02 32 66 F0 | 	shl	local11, #2
06954     03 00 00 FF 
06958     00 E4 85 F1 | 	sub	objptr, ##1536
0695c     F2 32 02 F1 | 	add	local11, objptr
06960     08 32 06 F1 | 	add	local11, #8
06964     19 2B 62 FC | 	wrlong	local07, local11
06968     03 00 00 FF 
0696c     00 E4 05 F1 | 	add	objptr, ##1536
06970     F2 26 02 FB | 	rdlong	local05, objptr
06974     01 26 06 F1 | 	add	local05, #1
06978     F2 26 62 FC | 	wrlong	local05, objptr
0697c     44 22 06 F6 | 	mov	local03, #68
06980     0F 27 02 F6 | 	mov	local05, local01
06984     10 29 02 F6 | 	mov	local06, local02
06988     11 2B 02 F6 | 	mov	local07, local03
0698c     F2 2C 02 FB | 	rdlong	local08, objptr
06990     16 2F 02 F6 | 	mov	local09, local08
06994     01 2E 66 F0 | 	shl	local09, #1
06998     16 2F 02 F1 | 	add	local09, local08
0699c     02 2E 66 F0 | 	shl	local09, #2
069a0     03 00 00 FF 
069a4     00 E4 85 F1 | 	sub	objptr, ##1536
069a8     F2 2E 02 F1 | 	add	local09, objptr
069ac     17 27 62 FC | 	wrlong	local05, local09
069b0     03 00 00 FF 
069b4     00 E4 05 F1 | 	add	objptr, ##1536
069b8     F2 32 02 FB | 	rdlong	local11, objptr
069bc     19 31 02 F6 | 	mov	local10, local11
069c0     01 30 66 F0 | 	shl	local10, #1
069c4     19 31 02 F1 | 	add	local10, local11
069c8     02 30 66 F0 | 	shl	local10, #2
069cc     03 00 00 FF 
069d0     00 E4 85 F1 | 	sub	objptr, ##1536
069d4     F2 30 02 F1 | 	add	local10, objptr
069d8     04 30 06 F1 | 	add	local10, #4
069dc     18 29 62 FC | 	wrlong	local06, local10
069e0     03 00 00 FF 
069e4     00 E4 05 F1 | 	add	objptr, ##1536
069e8     F2 30 02 FB | 	rdlong	local10, objptr
069ec     18 33 02 F6 | 	mov	local11, local10
069f0     01 32 66 F0 | 	shl	local11, #1
069f4     18 33 02 F1 | 	add	local11, local10
069f8     02 32 66 F0 | 	shl	local11, #2
069fc     03 00 00 FF 
06a00     00 E4 85 F1 | 	sub	objptr, ##1536
06a04     F2 32 02 F1 | 	add	local11, objptr
06a08     08 32 06 F1 | 	add	local11, #8
06a0c     19 2B 62 FC | 	wrlong	local07, local11
06a10     03 00 00 FF 
06a14     00 E4 05 F1 | 	add	objptr, ##1536
06a18     F2 26 02 FB | 	rdlong	local05, objptr
06a1c     01 26 06 F1 | 	add	local05, #1
06a20     F2 26 62 FC | 	wrlong	local05, objptr
06a24     6A 00 00 FF 
06a28     00 E4 85 F1 | 	sub	objptr, ##54272
06a2c     00 FA 05 F6 | 	mov	result1, #0
06a30     20 05 90 FD | 	jmp	#LR__0587
06a34                 | LR__0580
06a34                 | ' do
06a34                 | LR__0581
06a34     10 1C B0 FD | 	call	#_expr
06a38                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
06a38                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06a38     56 00 00 FF 
06a3c     C8 E5 05 F1 | 	add	objptr, ##44488
06a40     F2 24 02 FB | 	rdlong	local04, objptr
06a44     03 24 66 F0 | 	shl	local04, #3
06a48     02 00 00 FF 
06a4c     38 E4 85 F1 | 	sub	objptr, ##1080
06a50     F2 24 02 F1 | 	add	local04, objptr
06a54     04 24 06 F1 | 	add	local04, #4
06a58     12 2D 02 FB | 	rdlong	local08, local04
06a5c     11 2C 0E F2 | 	cmp	local08, #17 wz
06a60     54 00 00 FF 
06a64     90 E5 85 F1 | 	sub	objptr, ##43408
06a68     60 01 90 5D |  if_ne	jmp	#LR__0582
06a6c     21 22 06 F6 | 	mov	local03, #33
06a70     0F 27 02 F6 | 	mov	local05, local01
06a74     10 29 02 F6 | 	mov	local06, local02
06a78     11 2B 02 F6 | 	mov	local07, local03
06a7c     6A 00 00 FF 
06a80     00 E4 05 F1 | 	add	objptr, ##54272
06a84     F2 2C 02 FB | 	rdlong	local08, objptr
06a88     16 2F 02 F6 | 	mov	local09, local08
06a8c     01 2E 66 F0 | 	shl	local09, #1
06a90     16 2F 02 F1 | 	add	local09, local08
06a94     02 2E 66 F0 | 	shl	local09, #2
06a98     03 00 00 FF 
06a9c     00 E4 85 F1 | 	sub	objptr, ##1536
06aa0     F2 2E 02 F1 | 	add	local09, objptr
06aa4     17 27 62 FC | 	wrlong	local05, local09
06aa8     03 00 00 FF 
06aac     00 E4 05 F1 | 	add	objptr, ##1536
06ab0     F2 32 02 FB | 	rdlong	local11, objptr
06ab4     19 31 02 F6 | 	mov	local10, local11
06ab8     01 30 66 F0 | 	shl	local10, #1
06abc     19 31 02 F1 | 	add	local10, local11
06ac0     02 30 66 F0 | 	shl	local10, #2
06ac4     03 00 00 FF 
06ac8     00 E4 85 F1 | 	sub	objptr, ##1536
06acc     F2 30 02 F1 | 	add	local10, objptr
06ad0     04 30 06 F1 | 	add	local10, #4
06ad4     18 29 62 FC | 	wrlong	local06, local10
06ad8     03 00 00 FF 
06adc     00 E4 05 F1 | 	add	objptr, ##1536
06ae0     F2 26 02 FB | 	rdlong	local05, objptr
06ae4     13 33 02 F6 | 	mov	local11, local05
06ae8     01 32 66 F0 | 	shl	local11, #1
06aec     13 33 02 F1 | 	add	local11, local05
06af0     02 32 66 F0 | 	shl	local11, #2
06af4     03 00 00 FF 
06af8     00 E4 85 F1 | 	sub	objptr, ##1536
06afc     F2 32 02 F1 | 	add	local11, objptr
06b00     08 32 06 F1 | 	add	local11, #8
06b04     19 2B 62 FC | 	wrlong	local07, local11
06b08     03 00 00 FF 
06b0c     00 E4 05 F1 | 	add	objptr, ##1536
06b10     F2 26 02 FB | 	rdlong	local05, objptr
06b14     01 26 06 F1 | 	add	local05, #1
06b18     F2 26 62 FC | 	wrlong	local05, objptr
06b1c     44 22 06 F6 | 	mov	local03, #68
06b20     0F 27 02 F6 | 	mov	local05, local01
06b24     10 29 02 F6 | 	mov	local06, local02
06b28     11 2B 02 F6 | 	mov	local07, local03
06b2c     F2 2C 02 FB | 	rdlong	local08, objptr
06b30     16 2F 02 F6 | 	mov	local09, local08
06b34     01 2E 66 F0 | 	shl	local09, #1
06b38     16 2F 02 F1 | 	add	local09, local08
06b3c     02 2E 66 F0 | 	shl	local09, #2
06b40     03 00 00 FF 
06b44     00 E4 85 F1 | 	sub	objptr, ##1536
06b48     F2 2E 02 F1 | 	add	local09, objptr
06b4c     17 27 62 FC | 	wrlong	local05, local09
06b50     03 00 00 FF 
06b54     00 E4 05 F1 | 	add	objptr, ##1536
06b58     F2 32 02 FB | 	rdlong	local11, objptr
06b5c     19 31 02 F6 | 	mov	local10, local11
06b60     01 30 66 F0 | 	shl	local10, #1
06b64     19 31 02 F1 | 	add	local10, local11
06b68     02 30 66 F0 | 	shl	local10, #2
06b6c     03 00 00 FF 
06b70     00 E4 85 F1 | 	sub	objptr, ##1536
06b74     F2 30 02 F1 | 	add	local10, objptr
06b78     04 30 06 F1 | 	add	local10, #4
06b7c     18 29 62 FC | 	wrlong	local06, local10
06b80     03 00 00 FF 
06b84     00 E4 05 F1 | 	add	objptr, ##1536
06b88     F2 30 02 FB | 	rdlong	local10, objptr
06b8c     18 33 02 F6 | 	mov	local11, local10
06b90     01 32 66 F0 | 	shl	local11, #1
06b94     18 33 02 F1 | 	add	local11, local10
06b98     02 32 66 F0 | 	shl	local11, #2
06b9c     03 00 00 FF 
06ba0     00 E4 85 F1 | 	sub	objptr, ##1536
06ba4     F2 32 02 F1 | 	add	local11, objptr
06ba8     08 32 06 F1 | 	add	local11, #8
06bac     19 2B 62 FC | 	wrlong	local07, local11
06bb0     03 00 00 FF 
06bb4     00 E4 05 F1 | 	add	objptr, ##1536
06bb8     F2 26 02 FB | 	rdlong	local05, objptr
06bbc     01 26 06 F1 | 	add	local05, #1
06bc0     F2 26 62 FC | 	wrlong	local05, objptr
06bc4     6A 00 00 FF 
06bc8     00 E4 85 F1 | 	sub	objptr, ##54272
06bcc                 | LR__0582
06bcc                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06bcc     56 00 00 FF 
06bd0     C8 E5 05 F1 | 	add	objptr, ##44488
06bd4     F2 24 02 FB | 	rdlong	local04, objptr
06bd8     03 24 66 F0 | 	shl	local04, #3
06bdc     02 00 00 FF 
06be0     38 E4 85 F1 | 	sub	objptr, ##1080
06be4     F2 24 02 F1 | 	add	local04, objptr
06be8     04 24 06 F1 | 	add	local04, #4
06bec     12 2D 02 FB | 	rdlong	local08, local04
06bf0     12 2C 0E F2 | 	cmp	local08, #18 wz
06bf4     54 00 00 FF 
06bf8     90 E5 85 F1 | 	sub	objptr, ##43408
06bfc     60 01 90 5D |  if_ne	jmp	#LR__0583
06c00     22 22 06 F6 | 	mov	local03, #34
06c04     0F 27 02 F6 | 	mov	local05, local01
06c08     10 29 02 F6 | 	mov	local06, local02
06c0c     11 2B 02 F6 | 	mov	local07, local03
06c10     6A 00 00 FF 
06c14     00 E4 05 F1 | 	add	objptr, ##54272
06c18     F2 2C 02 FB | 	rdlong	local08, objptr
06c1c     16 2F 02 F6 | 	mov	local09, local08
06c20     01 2E 66 F0 | 	shl	local09, #1
06c24     16 2F 02 F1 | 	add	local09, local08
06c28     02 2E 66 F0 | 	shl	local09, #2
06c2c     03 00 00 FF 
06c30     00 E4 85 F1 | 	sub	objptr, ##1536
06c34     F2 2E 02 F1 | 	add	local09, objptr
06c38     17 27 62 FC | 	wrlong	local05, local09
06c3c     03 00 00 FF 
06c40     00 E4 05 F1 | 	add	objptr, ##1536
06c44     F2 32 02 FB | 	rdlong	local11, objptr
06c48     19 31 02 F6 | 	mov	local10, local11
06c4c     01 30 66 F0 | 	shl	local10, #1
06c50     19 31 02 F1 | 	add	local10, local11
06c54     02 30 66 F0 | 	shl	local10, #2
06c58     03 00 00 FF 
06c5c     00 E4 85 F1 | 	sub	objptr, ##1536
06c60     F2 30 02 F1 | 	add	local10, objptr
06c64     04 30 06 F1 | 	add	local10, #4
06c68     18 29 62 FC | 	wrlong	local06, local10
06c6c     03 00 00 FF 
06c70     00 E4 05 F1 | 	add	objptr, ##1536
06c74     F2 26 02 FB | 	rdlong	local05, objptr
06c78     13 33 02 F6 | 	mov	local11, local05
06c7c     01 32 66 F0 | 	shl	local11, #1
06c80     13 33 02 F1 | 	add	local11, local05
06c84     02 32 66 F0 | 	shl	local11, #2
06c88     03 00 00 FF 
06c8c     00 E4 85 F1 | 	sub	objptr, ##1536
06c90     F2 32 02 F1 | 	add	local11, objptr
06c94     08 32 06 F1 | 	add	local11, #8
06c98     19 2B 62 FC | 	wrlong	local07, local11
06c9c     03 00 00 FF 
06ca0     00 E4 05 F1 | 	add	objptr, ##1536
06ca4     F2 26 02 FB | 	rdlong	local05, objptr
06ca8     01 26 06 F1 | 	add	local05, #1
06cac     F2 26 62 FC | 	wrlong	local05, objptr
06cb0     44 22 06 F6 | 	mov	local03, #68
06cb4     0F 27 02 F6 | 	mov	local05, local01
06cb8     10 29 02 F6 | 	mov	local06, local02
06cbc     11 2B 02 F6 | 	mov	local07, local03
06cc0     F2 2C 02 FB | 	rdlong	local08, objptr
06cc4     16 2F 02 F6 | 	mov	local09, local08
06cc8     01 2E 66 F0 | 	shl	local09, #1
06ccc     16 2F 02 F1 | 	add	local09, local08
06cd0     02 2E 66 F0 | 	shl	local09, #2
06cd4     03 00 00 FF 
06cd8     00 E4 85 F1 | 	sub	objptr, ##1536
06cdc     F2 2E 02 F1 | 	add	local09, objptr
06ce0     17 27 62 FC | 	wrlong	local05, local09
06ce4     03 00 00 FF 
06ce8     00 E4 05 F1 | 	add	objptr, ##1536
06cec     F2 32 02 FB | 	rdlong	local11, objptr
06cf0     19 31 02 F6 | 	mov	local10, local11
06cf4     01 30 66 F0 | 	shl	local10, #1
06cf8     19 31 02 F1 | 	add	local10, local11
06cfc     02 30 66 F0 | 	shl	local10, #2
06d00     03 00 00 FF 
06d04     00 E4 85 F1 | 	sub	objptr, ##1536
06d08     F2 30 02 F1 | 	add	local10, objptr
06d0c     04 30 06 F1 | 	add	local10, #4
06d10     18 29 62 FC | 	wrlong	local06, local10
06d14     03 00 00 FF 
06d18     00 E4 05 F1 | 	add	objptr, ##1536
06d1c     F2 30 02 FB | 	rdlong	local10, objptr
06d20     18 33 02 F6 | 	mov	local11, local10
06d24     01 32 66 F0 | 	shl	local11, #1
06d28     18 33 02 F1 | 	add	local11, local10
06d2c     02 32 66 F0 | 	shl	local11, #2
06d30     03 00 00 FF 
06d34     00 E4 85 F1 | 	sub	objptr, ##1536
06d38     F2 32 02 F1 | 	add	local11, objptr
06d3c     08 32 06 F1 | 	add	local11, #8
06d40     19 2B 62 FC | 	wrlong	local07, local11
06d44     03 00 00 FF 
06d48     00 E4 05 F1 | 	add	objptr, ##1536
06d4c     F2 26 02 FB | 	rdlong	local05, objptr
06d50     01 26 06 F1 | 	add	local05, #1
06d54     F2 26 62 FC | 	wrlong	local05, objptr
06d58     6A 00 00 FF 
06d5c     00 E4 85 F1 | 	sub	objptr, ##54272
06d60                 | LR__0583
06d60                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06d60     56 00 00 FF 
06d64     C8 E5 05 F1 | 	add	objptr, ##44488
06d68     F2 24 02 FB | 	rdlong	local04, objptr
06d6c     03 24 66 F0 | 	shl	local04, #3
06d70     02 00 00 FF 
06d74     38 E4 85 F1 | 	sub	objptr, ##1080
06d78     F2 24 02 F1 | 	add	local04, objptr
06d7c     04 24 06 F1 | 	add	local04, #4
06d80     12 2D 02 FB | 	rdlong	local08, local04
06d84     FE 2D 0E F2 | 	cmp	local08, #510 wz
06d88     54 00 00 FF 
06d8c     90 E5 85 F1 | 	sub	objptr, ##43408
06d90     B8 00 90 5D |  if_ne	jmp	#LR__0584
06d94     44 22 06 F6 | 	mov	local03, #68
06d98     0F 27 02 F6 | 	mov	local05, local01
06d9c     10 29 02 F6 | 	mov	local06, local02
06da0     11 2B 02 F6 | 	mov	local07, local03
06da4     6A 00 00 FF 
06da8     00 E4 05 F1 | 	add	objptr, ##54272
06dac     F2 2C 02 FB | 	rdlong	local08, objptr
06db0     16 2F 02 F6 | 	mov	local09, local08
06db4     01 2E 66 F0 | 	shl	local09, #1
06db8     16 2F 02 F1 | 	add	local09, local08
06dbc     02 2E 66 F0 | 	shl	local09, #2
06dc0     03 00 00 FF 
06dc4     00 E4 85 F1 | 	sub	objptr, ##1536
06dc8     F2 2E 02 F1 | 	add	local09, objptr
06dcc     17 27 62 FC | 	wrlong	local05, local09
06dd0     03 00 00 FF 
06dd4     00 E4 05 F1 | 	add	objptr, ##1536
06dd8     F2 32 02 FB | 	rdlong	local11, objptr
06ddc     19 31 02 F6 | 	mov	local10, local11
06de0     01 30 66 F0 | 	shl	local10, #1
06de4     19 31 02 F1 | 	add	local10, local11
06de8     02 30 66 F0 | 	shl	local10, #2
06dec     03 00 00 FF 
06df0     00 E4 85 F1 | 	sub	objptr, ##1536
06df4     F2 30 02 F1 | 	add	local10, objptr
06df8     04 30 06 F1 | 	add	local10, #4
06dfc     18 29 62 FC | 	wrlong	local06, local10
06e00     03 00 00 FF 
06e04     00 E4 05 F1 | 	add	objptr, ##1536
06e08     F2 30 02 FB | 	rdlong	local10, objptr
06e0c     18 33 02 F6 | 	mov	local11, local10
06e10     01 32 66 F0 | 	shl	local11, #1
06e14     18 33 02 F1 | 	add	local11, local10
06e18     02 32 66 F0 | 	shl	local11, #2
06e1c     03 00 00 FF 
06e20     00 E4 85 F1 | 	sub	objptr, ##1536
06e24     F2 32 02 F1 | 	add	local11, objptr
06e28     08 32 06 F1 | 	add	local11, #8
06e2c     19 2B 62 FC | 	wrlong	local07, local11
06e30     03 00 00 FF 
06e34     00 E4 05 F1 | 	add	objptr, ##1536
06e38     F2 26 02 FB | 	rdlong	local05, objptr
06e3c     01 26 06 F1 | 	add	local05, #1
06e40     F2 26 62 FC | 	wrlong	local05, objptr
06e44     6A 00 00 FF 
06e48     00 E4 85 F1 | 	sub	objptr, ##54272
06e4c                 | LR__0584
06e4c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06e4c     56 00 00 FF 
06e50     C8 E5 05 F1 | 	add	objptr, ##44488
06e54     F2 24 02 FB | 	rdlong	local04, objptr
06e58     03 24 66 F0 | 	shl	local04, #3
06e5c     02 00 00 FF 
06e60     38 E4 85 F1 | 	sub	objptr, ##1080
06e64     F2 24 02 F1 | 	add	local04, objptr
06e68     04 24 06 F1 | 	add	local04, #4
06e6c     12 2D 02 FB | 	rdlong	local08, local04
06e70     11 2C 0E F2 | 	cmp	local08, #17 wz
06e74     54 00 00 FF 
06e78     90 E5 85 F1 | 	sub	objptr, ##43408
06e7c     6C 00 90 AD |  if_e	jmp	#LR__0585
06e80     56 00 00 FF 
06e84     C8 E5 05 F1 | 	add	objptr, ##44488
06e88     F2 2C 02 FB | 	rdlong	local08, objptr
06e8c     03 2C 66 F0 | 	shl	local08, #3
06e90     02 00 00 FF 
06e94     38 E4 85 F1 | 	sub	objptr, ##1080
06e98     F2 2C 02 F1 | 	add	local08, objptr
06e9c     04 2C 06 F1 | 	add	local08, #4
06ea0     16 2D 02 FB | 	rdlong	local08, local08
06ea4     12 2C 0E F2 | 	cmp	local08, #18 wz
06ea8     54 00 00 FF 
06eac     90 E5 85 F1 | 	sub	objptr, ##43408
06eb0     38 00 90 AD |  if_e	jmp	#LR__0585
06eb4     56 00 00 FF 
06eb8     C8 E5 05 F1 | 	add	objptr, ##44488
06ebc     F2 32 02 FB | 	rdlong	local11, objptr
06ec0     03 32 66 F0 | 	shl	local11, #3
06ec4     02 00 00 FF 
06ec8     38 E4 85 F1 | 	sub	objptr, ##1080
06ecc     F2 32 02 F1 | 	add	local11, objptr
06ed0     04 32 06 F1 | 	add	local11, #4
06ed4     19 33 02 FB | 	rdlong	local11, local11
06ed8     FE 33 0E F2 | 	cmp	local11, #510 wz
06edc     54 00 00 FF 
06ee0     90 E5 85 F1 | 	sub	objptr, ##43408
06ee4     16 FA 05 56 |  if_ne	mov	result1, #22
06ee8     68 00 90 5D |  if_ne	jmp	#LR__0587
06eec                 | LR__0585
06eec     56 00 00 FF 
06ef0     C8 E5 05 F1 | 	add	objptr, ##44488
06ef4     F2 24 02 FB | 	rdlong	local04, objptr
06ef8     01 24 06 F1 | 	add	local04, #1
06efc     F2 24 62 FC | 	wrlong	local04, objptr
06f00     03 24 66 F0 | 	shl	local04, #3
06f04     02 00 00 FF 
06f08     38 E4 85 F1 | 	sub	objptr, ##1080
06f0c     F2 24 02 F1 | 	add	local04, objptr
06f10     04 24 06 F1 | 	add	local04, #4
06f14     12 2D 02 FB | 	rdlong	local08, local04
06f18     FE 2D 0E F2 | 	cmp	local08, #510 wz
06f1c     54 00 00 FF 
06f20     90 E5 85 F1 | 	sub	objptr, ##43408
06f24     28 00 90 AD |  if_e	jmp	#LR__0586
06f28     56 00 00 FF 
06f2c     C8 E5 05 F1 | 	add	objptr, ##44488
06f30     F2 32 02 FB | 	rdlong	local11, objptr
06f34     0E 00 00 FF 
06f38     1C E4 05 F1 | 	add	objptr, ##7196
06f3c     F2 30 02 FB | 	rdlong	local10, objptr
06f40     64 00 00 FF 
06f44     E4 E5 85 F1 | 	sub	objptr, ##51684
06f48     18 33 52 F2 | 	cmps	local11, local10 wc
06f4c     E4 FA 9F CD |  if_b	jmp	#LR__0581
06f50                 | LR__0586
06f50                 | ' return 0
06f50     00 FA 05 F6 | 	mov	result1, #0
06f54                 | LR__0587
06f54     A7 F0 03 F6 | 	mov	ptra, fp
06f58     B2 00 A0 FD | 	call	#popregs_
06f5c                 | _compile_print_ret
06f5c     2D 00 64 FD | 	ret
06f60                 | 
06f60                 | ' 
06f60                 | ' function compile_if() as ulong  
06f60                 | _compile_if
06f60     05 4A 05 F6 | 	mov	COUNT_, #5
06f64     A8 00 A0 FD | 	call	#pushregs_
06f68                 | _compile_if_enter
06f68     DC 16 B0 FD | 	call	#_expr
06f6c                 | ' expr()
06f6c                 | ' return 0
06f6c     56 00 00 FF 
06f70     C8 E5 05 F1 | 	add	objptr, ##44488
06f74     F2 FA 01 FB | 	rdlong	result1, objptr
06f78     01 FA 05 F1 | 	add	result1, #1
06f7c     F2 FA 61 FC | 	wrlong	result1, objptr
06f80     58 22 06 F6 | 	mov	local03, #88
06f84     0F 25 02 F6 | 	mov	local04, local01
06f88     10 27 02 F6 | 	mov	local05, local02
06f8c     11 1F 02 F6 | 	mov	local01, local03
06f90     13 00 00 FF 
06f94     38 E4 05 F1 | 	add	objptr, ##9784
06f98     F2 12 02 FB | 	rdlong	arg01, objptr
06f9c     09 FB 01 F6 | 	mov	result1, arg01
06fa0     01 FA 65 F0 | 	shl	result1, #1
06fa4     09 FB 01 F1 | 	add	result1, arg01
06fa8     02 FA 65 F0 | 	shl	result1, #2
06fac     03 00 00 FF 
06fb0     00 E4 85 F1 | 	sub	objptr, ##1536
06fb4     F2 FA 01 F1 | 	add	result1, objptr
06fb8     FD 24 62 FC | 	wrlong	local04, result1
06fbc     03 00 00 FF 
06fc0     00 E4 05 F1 | 	add	objptr, ##1536
06fc4     F2 12 02 FB | 	rdlong	arg01, objptr
06fc8     09 25 02 F6 | 	mov	local04, arg01
06fcc     01 24 66 F0 | 	shl	local04, #1
06fd0     09 25 02 F1 | 	add	local04, arg01
06fd4     02 24 66 F0 | 	shl	local04, #2
06fd8     03 00 00 FF 
06fdc     00 E4 85 F1 | 	sub	objptr, ##1536
06fe0     F2 24 02 F1 | 	add	local04, objptr
06fe4     04 24 06 F1 | 	add	local04, #4
06fe8     12 27 62 FC | 	wrlong	local05, local04
06fec     03 00 00 FF 
06ff0     00 E4 05 F1 | 	add	objptr, ##1536
06ff4     F2 24 02 FB | 	rdlong	local04, objptr
06ff8     12 27 02 F6 | 	mov	local05, local04
06ffc     01 26 66 F0 | 	shl	local05, #1
07000     12 27 02 F1 | 	add	local05, local04
07004     02 26 66 F0 | 	shl	local05, #2
07008     03 00 00 FF 
0700c     00 E4 85 F1 | 	sub	objptr, ##1536
07010     F2 26 02 F1 | 	add	local05, objptr
07014     08 26 06 F1 | 	add	local05, #8
07018     13 1F 62 FC | 	wrlong	local01, local05
0701c     03 00 00 FF 
07020     00 E4 05 F1 | 	add	objptr, ##1536
07024     F2 24 02 FB | 	rdlong	local04, objptr
07028     01 24 06 F1 | 	add	local04, #1
0702c     F2 24 62 FC | 	wrlong	local04, objptr
07030                 | ' 
07030                 | ' 'print "In compile_if"
07030                 | ' compile_fun_1p()
07030                 | ' cmd=lparts(ct).token : ct+=1
07030                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07030                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07030                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07030     13 00 00 FF 
07034     38 E4 85 F1 | 	sub	objptr, ##9784
07038     F2 26 02 FB | 	rdlong	local05, objptr
0703c     01 26 06 F1 | 	add	local05, #1
07040     03 26 66 F0 | 	shl	local05, #3
07044     02 00 00 FF 
07048     38 E4 85 F1 | 	sub	objptr, ##1080
0704c     F2 26 02 F1 | 	add	local05, objptr
07050     13 13 02 FB | 	rdlong	arg01, local05
07054     54 00 00 FF 
07058     90 E5 85 F1 | 	sub	objptr, ##43408
0705c                 | ' 
0705c                 | ' select case s
0705c     52 01 00 FF 
07060     31 14 06 F6 | 	mov	arg02, ##@LR__4504
07064     D8 3C B1 FD | 	call	#__system___string_cmp
07068     00 FA 0D F2 | 	cmp	result1, #0 wz
0706c     1B FA 05 A6 |  if_e	mov	result1, #27
07070     00 FA 05 56 |  if_ne	mov	result1, #0
07074     00 FA 0D F2 | 	cmp	result1, #0 wz
07078     0C 00 90 AD |  if_e	jmp	#LR__0590
0707c     05 12 06 F6 | 	mov	arg01, #5
07080     88 ED BF FD | 	call	#_compile_immediate_assign
07084     08 00 90 FD | 	jmp	#LR__0591
07088                 | LR__0590
07088     05 12 06 F6 | 	mov	arg01, #5
0708c     C8 E4 BF FD | 	call	#_compile_immediate
07090                 | LR__0591
07090                 | ' 
07090                 | ' 
07090                 | ' return 0
07090     00 FA 05 F6 | 	mov	result1, #0
07094     A7 F0 03 F6 | 	mov	ptra, fp
07098     B2 00 A0 FD | 	call	#popregs_
0709c                 | _compile_if_ret
0709c     2D 00 64 FD | 	ret
070a0                 | 
070a0                 | ' 
070a0                 | ' function compile_else() as ulong  
070a0                 | _compile_else
070a0     05 4A 05 F6 | 	mov	COUNT_, #5
070a4     A8 00 A0 FD | 	call	#pushregs_
070a8                 | _compile_else_enter
070a8     5A 22 06 F6 | 	mov	local03, #90
070ac     0F 25 02 F6 | 	mov	local04, local01
070b0     10 27 02 F6 | 	mov	local05, local02
070b4     11 1F 02 F6 | 	mov	local01, local03
070b8     6A 00 00 FF 
070bc     00 E4 05 F1 | 	add	objptr, ##54272
070c0     F2 12 02 FB | 	rdlong	arg01, objptr
070c4     09 FB 01 F6 | 	mov	result1, arg01
070c8     01 FA 65 F0 | 	shl	result1, #1
070cc     09 FB 01 F1 | 	add	result1, arg01
070d0     02 FA 65 F0 | 	shl	result1, #2
070d4     03 00 00 FF 
070d8     00 E4 85 F1 | 	sub	objptr, ##1536
070dc     F2 FA 01 F1 | 	add	result1, objptr
070e0     FD 24 62 FC | 	wrlong	local04, result1
070e4     03 00 00 FF 
070e8     00 E4 05 F1 | 	add	objptr, ##1536
070ec     F2 FA 01 FB | 	rdlong	result1, objptr
070f0     FD 24 02 F6 | 	mov	local04, result1
070f4     01 24 66 F0 | 	shl	local04, #1
070f8     FD 24 02 F1 | 	add	local04, result1
070fc     02 24 66 F0 | 	shl	local04, #2
07100     03 00 00 FF 
07104     00 E4 85 F1 | 	sub	objptr, ##1536
07108     F2 24 02 F1 | 	add	local04, objptr
0710c     04 24 06 F1 | 	add	local04, #4
07110     12 27 62 FC | 	wrlong	local05, local04
07114     03 00 00 FF 
07118     00 E4 05 F1 | 	add	objptr, ##1536
0711c     F2 24 02 FB | 	rdlong	local04, objptr
07120     12 27 02 F6 | 	mov	local05, local04
07124     01 26 66 F0 | 	shl	local05, #1
07128     12 27 02 F1 | 	add	local05, local04
0712c     02 26 66 F0 | 	shl	local05, #2
07130     03 00 00 FF 
07134     00 E4 85 F1 | 	sub	objptr, ##1536
07138     F2 26 02 F1 | 	add	local05, objptr
0713c     08 26 06 F1 | 	add	local05, #8
07140     13 1F 62 FC | 	wrlong	local01, local05
07144     03 00 00 FF 
07148     00 E4 05 F1 | 	add	objptr, ##1536
0714c     F2 24 02 FB | 	rdlong	local04, objptr
07150     01 24 06 F1 | 	add	local04, #1
07154     F2 24 62 FC | 	wrlong	local04, objptr
07158                 | ' 
07158                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
07158                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07158     13 00 00 FF 
0715c     38 E4 85 F1 | 	sub	objptr, ##9784
07160     F2 26 02 FB | 	rdlong	local05, objptr
07164     01 26 06 F1 | 	add	local05, #1
07168     03 26 66 F0 | 	shl	local05, #3
0716c     02 00 00 FF 
07170     38 E4 85 F1 | 	sub	objptr, ##1080
07174     F2 26 02 F1 | 	add	local05, objptr
07178     13 13 02 FB | 	rdlong	arg01, local05
0717c     54 00 00 FF 
07180     90 E5 85 F1 | 	sub	objptr, ##43408
07184                 | ' 
07184                 | ' select case s
07184     52 01 00 FF 
07188     31 14 06 F6 | 	mov	arg02, ##@LR__4504
0718c     B0 3B B1 FD | 	call	#__system___string_cmp
07190     00 FA 0D F2 | 	cmp	result1, #0 wz
07194     1B FA 05 A6 |  if_e	mov	result1, #27
07198     00 FA 05 56 |  if_ne	mov	result1, #0
0719c     00 FA 0D F2 | 	cmp	result1, #0 wz
071a0     0C 00 90 AD |  if_e	jmp	#LR__0600
071a4     05 12 06 F6 | 	mov	arg01, #5
071a8     60 EC BF FD | 	call	#_compile_immediate_assign
071ac     08 00 90 FD | 	jmp	#LR__0601
071b0                 | LR__0600
071b0     05 12 06 F6 | 	mov	arg01, #5
071b4     A0 E3 BF FD | 	call	#_compile_immediate
071b8                 | LR__0601
071b8                 | ' 
071b8                 | ' 
071b8                 | ' return 0
071b8     00 FA 05 F6 | 	mov	result1, #0
071bc     A7 F0 03 F6 | 	mov	ptra, fp
071c0     B2 00 A0 FD | 	call	#popregs_
071c4                 | _compile_else_ret
071c4     2D 00 64 FD | 	ret
071c8                 | 
071c8                 | ' 
071c8                 | ' 
071c8                 | ' function compile_dim() as ulong  
071c8                 | _compile_dim
071c8     11 4A 05 F6 | 	mov	COUNT_, #17
071cc     A8 00 A0 FD | 	call	#pushregs_
071d0     01 1E 06 F6 | 	mov	local01, #1
071d4     01 20 06 F6 | 	mov	local02, #1
071d8     01 22 06 F6 | 	mov	local03, #1
071dc                 | ' 
071dc                 | ' dims(0)=1: dims(1)=1: dims(2)=1
071dc                 | ' 
071dc                 | ' if isname(lparts(ct).part$) then 
071dc     56 00 00 FF 
071e0     C8 E5 05 F1 | 	add	objptr, ##44488
071e4     F2 18 02 FB | 	rdlong	arg04, objptr
071e8     03 18 66 F0 | 	shl	arg04, #3
071ec     02 00 00 FF 
071f0     38 E4 85 F1 | 	sub	objptr, ##1080
071f4     F2 18 02 F1 | 	add	arg04, objptr
071f8     0C 13 02 FB | 	rdlong	arg01, arg04
071fc     54 00 00 FF 
07200     90 E5 85 F1 | 	sub	objptr, ##43408
07204     28 D3 BF FD | 	call	#_isname
07208     00 FA 0D F2 | 	cmp	result1, #0 wz
0720c     AC 05 90 AD |  if_e	jmp	#LR__0634
07210     56 00 00 FF 
07214     C8 E5 05 F1 | 	add	objptr, ##44488
07218     F2 24 02 FB | 	rdlong	local04, objptr
0721c     03 24 66 F0 | 	shl	local04, #3
07220     02 00 00 FF 
07224     38 E4 85 F1 | 	sub	objptr, ##1080
07228     F2 24 02 F1 | 	add	local04, objptr
0722c     12 27 02 FB | 	rdlong	local05, local04
07230     01 28 66 F6 | 	neg	local06, #1
07234                 | '   varname2$=lparts(ct).part$ 
07234                 | '   j=-1
07234                 | '   if varnum>0 then
07234     04 E4 85 F1 | 	sub	objptr, #4
07238     F2 2A 02 FB | 	rdlong	local07, objptr
0723c     54 00 00 FF 
07240     8C E5 85 F1 | 	sub	objptr, ##43404
07244     01 2A 56 F2 | 	cmps	local07, #1 wc
07248     58 00 90 CD |  if_b	jmp	#LR__0612
0724c                 | '  '   print "in dim, varnum=";varnum
0724c                 | '     for i=0 to varnum-1
0724c     00 2C 06 F6 | 	mov	local08, #0
07250     54 00 00 FF 
07254     8C E5 05 F1 | 	add	objptr, ##43404
07258     F2 2E 02 FB | 	rdlong	local09, objptr
0725c     54 00 00 FF 
07260     8C E5 85 F1 | 	sub	objptr, ##43404
07264                 | LR__0610
07264     17 2D 52 F2 | 	cmps	local08, local09 wc
07268     38 00 90 3D |  if_ae	jmp	#LR__0611
0726c                 | '       if variables(i).name=varname2$ then j=i : exit
0726c     16 25 02 F6 | 	mov	local04, local08
07270     04 24 66 F0 | 	shl	local04, #4
07274     34 00 00 FF 
07278     8C E5 05 F1 | 	add	objptr, ##27020
0727c     F2 24 02 F1 | 	add	local04, objptr
07280     12 13 02 FB | 	rdlong	arg01, local04
07284     13 15 02 F6 | 	mov	arg02, local05
07288     34 00 00 FF 
0728c     8C E5 85 F1 | 	sub	objptr, ##27020
07290     AC 3A B1 FD | 	call	#__system___string_cmp
07294     00 FA 0D F2 | 	cmp	result1, #0 wz
07298     16 29 02 A6 |  if_e	mov	local06, local08
0729c     01 2C 06 51 |  if_ne	add	local08, #1
072a0     C0 FF 9F 5D |  if_ne	jmp	#LR__0610
072a4                 | LR__0611
072a4                 | LR__0612
072a4                 | ' '  if j<>-1 then printerror (42) : return 42
072a4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
072a4     FF FF 7F FF 
072a8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
072ac     54 00 00 AF 
072b0     8C E5 05 A1 |  if_e	add	objptr, ##43404
072b4     F2 28 02 AB |  if_e	rdlong	local06, objptr
072b8     54 00 00 AF 
072bc     8C E5 85 A1 |  if_e	sub	objptr, ##43404
072c0     78 00 90 AD |  if_e	jmp	#LR__0613
072c4     00 12 06 F6 | 	mov	arg01, #0
072c8     80 93 B1 FD | 	call	#__system___getiolock_0442
072cc     FD 12 02 F6 | 	mov	arg01, result1
072d0     44 3A B1 FD | 	call	#__system___lockmem
072d4     53 01 00 FF 
072d8     F1 14 06 F6 | 	mov	arg02, ##@LR__4663
072dc     00 12 06 F6 | 	mov	arg01, #0
072e0     00 16 06 F6 | 	mov	arg03, #0
072e4     38 47 B1 FD | 	call	#__system___basic_print_string
072e8     7B 00 00 FF 
072ec     14 E4 05 F1 | 	add	objptr, ##62996
072f0     F2 14 02 FB | 	rdlong	arg02, objptr
072f4     7B 00 00 FF 
072f8     14 E4 85 F1 | 	sub	objptr, ##62996
072fc     00 12 06 F6 | 	mov	arg01, #0
07300     00 16 06 F6 | 	mov	arg03, #0
07304     0A 18 06 F6 | 	mov	arg04, #10
07308     98 47 B1 FD | 	call	#__system___basic_print_unsigned
0730c     53 01 00 FF 
07310     FF 14 06 F6 | 	mov	arg02, ##@LR__4664
07314     00 12 06 F6 | 	mov	arg01, #0
07318     00 16 06 F6 | 	mov	arg03, #0
0731c     00 47 B1 FD | 	call	#__system___basic_print_string
07320     00 12 06 F6 | 	mov	arg01, #0
07324     0A 14 06 F6 | 	mov	arg02, #10
07328     00 16 06 F6 | 	mov	arg03, #0
0732c     98 46 B1 FD | 	call	#__system___basic_print_char
07330     00 12 06 F6 | 	mov	arg01, #0
07334     14 93 B1 FD | 	call	#__system___getiolock_0442
07338     FD 00 68 FC | 	wrlong	#0, result1
0733c                 | LR__0613
0733c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
0733c     56 00 00 FF 
07340     C8 E5 05 F1 | 	add	objptr, ##44488
07344     F2 18 02 FB | 	rdlong	arg04, objptr
07348     01 18 06 F1 | 	add	arg04, #1
0734c     03 18 66 F0 | 	shl	arg04, #3
07350     02 00 00 FF 
07354     38 E4 85 F1 | 	sub	objptr, ##1080
07358     F2 18 02 F1 | 	add	arg04, objptr
0735c     0C 13 02 FB | 	rdlong	arg01, arg04
07360     53 01 00 FF 
07364     20 15 06 F6 | 	mov	arg02, ##@LR__4665
07368     54 00 00 FF 
0736c     90 E5 85 F1 | 	sub	objptr, ##43408
07370     CC 39 B1 FD | 	call	#__system___string_cmp
07374     00 FA 0D F2 | 	cmp	result1, #0 wz
07378     50 00 90 AD |  if_e	jmp	#LR__0614
0737c     56 00 00 FF 
07380     C8 E5 05 F1 | 	add	objptr, ##44488
07384     F2 2E 02 FB | 	rdlong	local09, objptr
07388     01 2E 06 F1 | 	add	local09, #1
0738c     03 2E 66 F0 | 	shl	local09, #3
07390     02 00 00 FF 
07394     38 E4 85 F1 | 	sub	objptr, ##1080
07398     F2 2E 02 F1 | 	add	local09, objptr
0739c     17 13 02 FB | 	rdlong	arg01, local09
073a0     53 01 00 FF 
073a4     22 15 06 F6 | 	mov	arg02, ##@LR__4666
073a8     54 00 00 FF 
073ac     90 E5 85 F1 | 	sub	objptr, ##43408
073b0     8C 39 B1 FD | 	call	#__system___string_cmp
073b4     00 FA 0D F2 | 	cmp	result1, #0 wz
073b8     10 00 90 AD |  if_e	jmp	#LR__0614
073bc     2B 12 06 F6 | 	mov	arg01, #43
073c0     44 03 B1 FD | 	call	#_printerror
073c4     2B FA 05 F6 | 	mov	result1, #43
073c8     38 05 90 FD | 	jmp	#LR__0636
073cc                 | LR__0614
073cc                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
073cc     56 00 00 FF 
073d0     C8 E5 05 F1 | 	add	objptr, ##44488
073d4     F2 14 02 FB | 	rdlong	arg02, objptr
073d8     01 14 06 F1 | 	add	arg02, #1
073dc     03 14 66 F0 | 	shl	arg02, #3
073e0     02 00 00 FF 
073e4     38 E4 85 F1 | 	sub	objptr, ##1080
073e8     F2 14 02 F1 | 	add	arg02, objptr
073ec     0A 13 02 FB | 	rdlong	arg01, arg02
073f0     53 01 00 FF 
073f4     25 15 06 F6 | 	mov	arg02, ##@LR__4667
073f8     54 00 00 FF 
073fc     90 E5 85 F1 | 	sub	objptr, ##43408
07400     3C 39 B1 FD | 	call	#__system___string_cmp
07404     00 FA 0D F2 | 	cmp	result1, #0 wz
07408     56 00 00 AF 
0740c     C8 E5 05 A1 |  if_e	add	objptr, ##44488
07410     F2 30 02 AB |  if_e	rdlong	local10, objptr
07414     56 00 00 AF 
07418     C8 E5 85 A1 |  if_e	sub	objptr, ##44488
0741c     01 30 06 A1 |  if_e	add	local10, #1
07420     7C 01 90 AD |  if_e	jmp	#LR__0620
07424     56 00 00 FF 
07428     C8 E5 05 F1 | 	add	objptr, ##44488
0742c     F2 30 02 FB | 	rdlong	local10, objptr
07430     56 00 00 FF 
07434     C8 E5 85 F1 | 	sub	objptr, ##44488
07438     02 30 06 F1 | 	add	local10, #2
0743c     00 32 06 F6 | 	mov	local11, #0
07440                 | '   l=ct+2 : m=0 : do
07440                 | LR__0615
07440                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07440                 | '     if isdec(lparts(l).part$) then 
07440     18 25 02 F6 | 	mov	local04, local10
07444     03 24 66 F0 | 	shl	local04, #3
07448     54 00 00 FF 
0744c     90 E5 05 F1 | 	add	objptr, ##43408
07450     F2 24 02 F1 | 	add	local04, objptr
07454     12 13 02 FB | 	rdlong	arg01, local04
07458     54 00 00 FF 
0745c     90 E5 85 F1 | 	sub	objptr, ##43408
07460     70 D7 BF FD | 	call	#_isdec
07464     00 FA 0D F2 | 	cmp	result1, #0 wz
07468     44 00 90 AD |  if_e	jmp	#LR__0616
0746c     19 35 02 F6 | 	mov	local12, local11
07470     0F 35 06 F1 | 	add	local12, #local01
07474     18 2F 02 F6 | 	mov	local09, local10
07478     03 2E 66 F0 | 	shl	local09, #3
0747c     54 00 00 FF 
07480     90 E5 05 F1 | 	add	objptr, ##43408
07484     F2 2E 02 F1 | 	add	local09, objptr
07488     17 13 02 FB | 	rdlong	arg01, local09
0748c     00 14 06 F6 | 	mov	arg02, #0
07490     54 00 00 FF 
07494     90 E5 85 F1 | 	sub	objptr, ##43408
07498     18 6A B1 FD | 	call	#__system____builtin_atoi
0749c     FD 36 02 F6 | 	mov	local13, result1
074a0                 | 	'.live	local13
074a0                 | 	'.live	local12
074a0     00 34 8E F9 | 	altd	local12, #0
074a4     1B 35 02 F6 | 	mov	local12, local13
074a8     01 32 06 F1 | 	add	local11, #1
074ac     10 00 90 FD | 	jmp	#LR__0617
074b0                 | LR__0616
074b0     11 12 06 F6 | 	mov	arg01, #17
074b4     50 02 B1 FD | 	call	#_printerror
074b8                 | '       printerror (17)  : return(17)
074b8     11 FA 05 F6 | 	mov	result1, #17
074bc     44 04 90 FD | 	jmp	#LR__0636
074c0                 | LR__0617
074c0                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
074c0     18 25 02 F6 | 	mov	local04, local10
074c4     01 24 06 F1 | 	add	local04, #1
074c8     03 24 66 F0 | 	shl	local04, #3
074cc     54 00 00 FF 
074d0     90 E5 05 F1 | 	add	objptr, ##43408
074d4     F2 24 02 F1 | 	add	local04, objptr
074d8     12 13 02 FB | 	rdlong	arg01, local04
074dc     53 01 00 FF 
074e0     28 15 06 F6 | 	mov	arg02, ##@LR__4668
074e4     54 00 00 FF 
074e8     90 E5 85 F1 | 	sub	objptr, ##43408
074ec     50 38 B1 FD | 	call	#__system___string_cmp
074f0     00 FA 0D F2 | 	cmp	result1, #0 wz
074f4     48 00 90 AD |  if_e	jmp	#LR__0618
074f8     18 37 02 F6 | 	mov	local13, local10
074fc     01 36 06 F1 | 	add	local13, #1
07500     03 36 66 F0 | 	shl	local13, #3
07504     54 00 00 FF 
07508     90 E5 05 F1 | 	add	objptr, ##43408
0750c     F2 36 02 F1 | 	add	local13, objptr
07510     1B 13 02 FB | 	rdlong	arg01, local13
07514     53 01 00 FF 
07518     2A 15 06 F6 | 	mov	arg02, ##@LR__4669
0751c     54 00 00 FF 
07520     90 E5 85 F1 | 	sub	objptr, ##43408
07524     18 38 B1 FD | 	call	#__system___string_cmp
07528     00 FA 0D F2 | 	cmp	result1, #0 wz
0752c     10 00 90 AD |  if_e	jmp	#LR__0618
07530     2C 12 06 F6 | 	mov	arg01, #44
07534     D0 01 B1 FD | 	call	#_printerror
07538     2C FA 05 F6 | 	mov	result1, #44
0753c     C4 03 90 FD | 	jmp	#LR__0636
07540                 | LR__0618
07540     02 30 06 F1 | 	add	local10, #2
07544     18 25 02 F6 | 	mov	local04, local10
07548     01 24 86 F1 | 	sub	local04, #1
0754c     03 24 66 F0 | 	shl	local04, #3
07550     54 00 00 FF 
07554     90 E5 05 F1 | 	add	objptr, ##43408
07558     F2 24 02 F1 | 	add	local04, objptr
0755c     12 13 02 FB | 	rdlong	arg01, local04
07560     53 01 00 FF 
07564     2C 15 06 F6 | 	mov	arg02, ##@LR__4670
07568     54 00 00 FF 
0756c     90 E5 85 F1 | 	sub	objptr, ##43408
07570     CC 37 B1 FD | 	call	#__system___string_cmp
07574     00 FA 0D F2 | 	cmp	result1, #0 wz
07578     03 32 56 52 |  if_ne	cmps	local11, #3 wc
0757c     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0615
07580                 | '   if m>3 then printerror(45): return(45)
07580     04 32 56 F2 | 	cmps	local11, #4 wc
07584     10 00 90 CD |  if_b	jmp	#LR__0619
07588     2D 12 06 F6 | 	mov	arg01, #45
0758c     78 01 B1 FD | 	call	#_printerror
07590     2D FA 05 F6 | 	mov	result1, #45
07594     6C 03 90 FD | 	jmp	#LR__0636
07598                 | LR__0619
07598     00 39 06 F6 | 	mov	local14, #256
0759c     0C 3A 06 F6 | 	mov	local15, #12
075a0                 | LR__0620
075a0                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
075a0                 | '   arraytype=array_no_type : esize=12
075a0                 | ' 1350 
075a0                 | '   if lparts(l).part$="as" then
075a0     18 25 02 F6 | 	mov	local04, local10
075a4     03 24 66 F0 | 	shl	local04, #3
075a8     54 00 00 FF 
075ac     90 E5 05 F1 | 	add	objptr, ##43408
075b0     F2 24 02 F1 | 	add	local04, objptr
075b4     12 13 02 FB | 	rdlong	arg01, local04
075b8     53 01 00 FF 
075bc     2E 15 06 F6 | 	mov	arg02, ##@LR__4671
075c0     54 00 00 FF 
075c4     90 E5 85 F1 | 	sub	objptr, ##43408
075c8     74 37 B1 FD | 	call	#__system___string_cmp
075cc     00 FA 0D F2 | 	cmp	result1, #0 wz
075d0     F8 01 90 5D |  if_ne	jmp	#LR__0635
075d4                 | '     select case lparts(l+1).part$
075d4     18 35 02 F6 | 	mov	local12, local10
075d8     01 34 06 F1 | 	add	local12, #1
075dc     03 34 66 F0 | 	shl	local12, #3
075e0     54 00 00 FF 
075e4     90 E5 05 F1 | 	add	objptr, ##43408
075e8     F2 34 02 F1 | 	add	local12, objptr
075ec     1A 3D 02 FB | 	rdlong	local16, local12
075f0     53 01 00 FF 
075f4     31 15 06 F6 | 	mov	arg02, ##@LR__4672
075f8     1E 13 02 F6 | 	mov	arg01, local16
075fc     54 00 00 FF 
07600     90 E5 85 F1 | 	sub	objptr, ##43408
07604     38 37 B1 FD | 	call	#__system___string_cmp
07608     00 FA 0D F2 | 	cmp	result1, #0 wz
0760c     0C 01 90 AD |  if_e	jmp	#LR__0621
07610     53 01 00 FF 
07614     36 15 06 F6 | 	mov	arg02, ##@LR__4673
07618     1E 13 02 F6 | 	mov	arg01, local16
0761c     20 37 B1 FD | 	call	#__system___string_cmp
07620     00 FA 0D F2 | 	cmp	result1, #0 wz
07624     00 01 90 AD |  if_e	jmp	#LR__0622
07628     53 01 00 FF 
0762c     3C 15 06 F6 | 	mov	arg02, ##@LR__4674
07630     1E 13 02 F6 | 	mov	arg01, local16
07634     08 37 B1 FD | 	call	#__system___string_cmp
07638     00 FA 0D F2 | 	cmp	result1, #0 wz
0763c     F4 00 90 AD |  if_e	jmp	#LR__0623
07640     53 01 00 FF 
07644     42 15 06 F6 | 	mov	arg02, ##@LR__4675
07648     1E 13 02 F6 | 	mov	arg01, local16
0764c     F0 36 B1 FD | 	call	#__system___string_cmp
07650     00 FA 0D F2 | 	cmp	result1, #0 wz
07654     E8 00 90 AD |  if_e	jmp	#LR__0624
07658     53 01 00 FF 
0765c     49 15 06 F6 | 	mov	arg02, ##@LR__4676
07660     1E 13 02 F6 | 	mov	arg01, local16
07664     D8 36 B1 FD | 	call	#__system___string_cmp
07668     00 FA 0D F2 | 	cmp	result1, #0 wz
0766c     DC 00 90 AD |  if_e	jmp	#LR__0625
07670     53 01 00 FF 
07674     4E 15 06 F6 | 	mov	arg02, ##@LR__4677
07678     1E 13 02 F6 | 	mov	arg01, local16
0767c     C0 36 B1 FD | 	call	#__system___string_cmp
07680     00 FA 0D F2 | 	cmp	result1, #0 wz
07684     D0 00 90 AD |  if_e	jmp	#LR__0626
07688     53 01 00 FF 
0768c     56 15 06 F6 | 	mov	arg02, ##@LR__4678
07690     1E 13 02 F6 | 	mov	arg01, local16
07694     A8 36 B1 FD | 	call	#__system___string_cmp
07698     00 FA 0D F2 | 	cmp	result1, #0 wz
0769c     C4 00 90 AD |  if_e	jmp	#LR__0627
076a0     53 01 00 FF 
076a4     5C 15 06 F6 | 	mov	arg02, ##@LR__4679
076a8     1E 13 02 F6 | 	mov	arg01, local16
076ac     90 36 B1 FD | 	call	#__system___string_cmp
076b0     00 FA 0D F2 | 	cmp	result1, #0 wz
076b4     B8 00 90 AD |  if_e	jmp	#LR__0628
076b8     53 01 00 FF 
076bc     62 15 06 F6 | 	mov	arg02, ##@LR__4680
076c0     1E 13 02 F6 | 	mov	arg01, local16
076c4     78 36 B1 FD | 	call	#__system___string_cmp
076c8     00 FA 0D F2 | 	cmp	result1, #0 wz
076cc     AC 00 90 AD |  if_e	jmp	#LR__0629
076d0     53 01 00 FF 
076d4     69 15 06 F6 | 	mov	arg02, ##@LR__4681
076d8     1E 13 02 F6 | 	mov	arg01, local16
076dc     60 36 B1 FD | 	call	#__system___string_cmp
076e0     00 FA 0D F2 | 	cmp	result1, #0 wz
076e4     A0 00 90 AD |  if_e	jmp	#LR__0630
076e8     53 01 00 FF 
076ec     70 15 06 F6 | 	mov	arg02, ##@LR__4682
076f0     1E 13 02 F6 | 	mov	arg01, local16
076f4     48 36 B1 FD | 	call	#__system___string_cmp
076f8     00 FA 0D F2 | 	cmp	result1, #0 wz
076fc     94 00 90 AD |  if_e	jmp	#LR__0631
07700     53 01 00 FF 
07704     77 15 06 F6 | 	mov	arg02, ##@LR__4683
07708     1E 13 02 F6 | 	mov	arg01, local16
0770c     30 36 B1 FD | 	call	#__system___string_cmp
07710     00 FA 0D F2 | 	cmp	result1, #0 wz
07714     88 00 90 AD |  if_e	jmp	#LR__0632
07718     90 00 90 FD | 	jmp	#LR__0633
0771c                 | LR__0621
0771c     01 39 06 F6 | 	mov	local14, #257
07720     01 3A 06 F6 | 	mov	local15, #1
07724     A4 00 90 FD | 	jmp	#LR__0635
07728                 | LR__0622
07728     02 39 06 F6 | 	mov	local14, #258
0772c     01 3A 06 F6 | 	mov	local15, #1
07730     98 00 90 FD | 	jmp	#LR__0635
07734                 | LR__0623
07734     03 39 06 F6 | 	mov	local14, #259
07738     02 3A 06 F6 | 	mov	local15, #2
0773c     8C 00 90 FD | 	jmp	#LR__0635
07740                 | LR__0624
07740     04 39 06 F6 | 	mov	local14, #260
07744     02 3A 06 F6 | 	mov	local15, #2
07748     80 00 90 FD | 	jmp	#LR__0635
0774c                 | LR__0625
0774c     05 39 06 F6 | 	mov	local14, #261
07750     04 3A 06 F6 | 	mov	local15, #4
07754     74 00 90 FD | 	jmp	#LR__0635
07758                 | LR__0626
07758     05 39 06 F6 | 	mov	local14, #261
0775c     04 3A 06 F6 | 	mov	local15, #4
07760     68 00 90 FD | 	jmp	#LR__0635
07764                 | LR__0627
07764     06 39 06 F6 | 	mov	local14, #262
07768     04 3A 06 F6 | 	mov	local15, #4
0776c     5C 00 90 FD | 	jmp	#LR__0635
07770                 | LR__0628
07770     07 39 06 F6 | 	mov	local14, #263
07774     08 3A 06 F6 | 	mov	local15, #8
07778     50 00 90 FD | 	jmp	#LR__0635
0777c                 | LR__0629
0777c     08 39 06 F6 | 	mov	local14, #264
07780     08 3A 06 F6 | 	mov	local15, #8
07784     44 00 90 FD | 	jmp	#LR__0635
07788                 | LR__0630
07788     09 39 06 F6 | 	mov	local14, #265
0778c     04 3A 06 F6 | 	mov	local15, #4
07790     38 00 90 FD | 	jmp	#LR__0635
07794                 | LR__0631
07794     0A 39 06 F6 | 	mov	local14, #266
07798     08 3A 06 F6 | 	mov	local15, #8
0779c     2C 00 90 FD | 	jmp	#LR__0635
077a0                 | LR__0632
077a0     0B 39 06 F6 | 	mov	local14, #267
077a4     04 3A 06 F6 | 	mov	local15, #4
077a8     20 00 90 FD | 	jmp	#LR__0635
077ac                 | LR__0633
077ac     2F 12 06 F6 | 	mov	arg01, #47
077b0     54 FF B0 FD | 	call	#_printerror
077b4     2F FA 05 F6 | 	mov	result1, #47
077b8     48 01 90 FD | 	jmp	#LR__0636
077bc                 | LR__0634
077bc     2E 12 06 F6 | 	mov	arg01, #46
077c0     44 FF B0 FD | 	call	#_printerror
077c4                 | '   printerror(46): return 46
077c4     2E FA 05 F6 | 	mov	result1, #46
077c8     38 01 90 FD | 	jmp	#LR__0636
077cc                 | LR__0635
077cc     0F 3B 02 FD | 	qmul	local15, local01
077d0     18 2A 62 FD | 	getqx	local07
077d4     10 2B 02 FD | 	qmul	local07, local02
077d8     18 3C 62 FD | 	getqx	local16
077dc     11 3D 02 FD | 	qmul	local16, local03
077e0     7A 00 00 FF 
077e4     FC E5 05 F1 | 	add	objptr, ##62972
077e8     F2 3E 02 FB | 	rdlong	local17, objptr
077ec     1C 15 02 F6 | 	mov	arg02, local14
077f0     01 16 06 F6 | 	mov	arg03, #1
077f4     00 18 06 F6 | 	mov	arg04, #0
077f8                 | '     return fill(addr, pattern, count, listPtr, 4)
077f8     04 1A 06 F6 | 	mov	arg05, #4
077fc     18 3C 62 FD | 	getqx	local16
07800     1E 3F 82 F1 | 	sub	local17, local16
07804     10 3E 86 F1 | 	sub	local17, #16
07808     F2 3E 62 FC | 	wrlong	local17, objptr
0780c     1F 13 02 F6 | 	mov	arg01, local17
07810     6F 00 00 FF 
07814     3C E5 85 F1 | 	sub	objptr, ##57148
07818     CC 2A B1 FD | 	call	#_psram_spin2_fill
0781c     1F 13 02 F6 | 	mov	arg01, local17
07820     02 12 06 F1 | 	add	arg01, #2
07824     1D 15 02 F6 | 	mov	arg02, local15
07828     01 16 06 F6 | 	mov	arg03, #1
0782c     00 18 06 F6 | 	mov	arg04, #0
07830                 | '     return fill(addr, pattern, count, listPtr, 1)
07830     01 1A 06 F6 | 	mov	arg05, #1
07834     B0 2A B1 FD | 	call	#_psram_spin2_fill
07838     1F 13 02 F6 | 	mov	arg01, local17
0783c     04 12 06 F1 | 	add	arg01, #4
07840     0F 15 02 F6 | 	mov	arg02, local01
07844     01 16 06 F6 | 	mov	arg03, #1
07848     00 18 06 F6 | 	mov	arg04, #0
0784c                 | '     return fill(addr, pattern, count, listPtr, 4)
0784c     04 1A 06 F6 | 	mov	arg05, #4
07850     94 2A B1 FD | 	call	#_psram_spin2_fill
07854     1F 13 02 F6 | 	mov	arg01, local17
07858     08 12 06 F1 | 	add	arg01, #8
0785c     10 15 02 F6 | 	mov	arg02, local02
07860     01 16 06 F6 | 	mov	arg03, #1
07864     00 18 06 F6 | 	mov	arg04, #0
07868                 | '     return fill(addr, pattern, count, listPtr, 4)
07868     04 1A 06 F6 | 	mov	arg05, #4
0786c     78 2A B1 FD | 	call	#_psram_spin2_fill
07870     1F 13 02 F6 | 	mov	arg01, local17
07874     0C 12 06 F1 | 	add	arg01, #12
07878     11 15 02 F6 | 	mov	arg02, local03
0787c     01 16 06 F6 | 	mov	arg03, #1
07880     00 18 06 F6 | 	mov	arg04, #0
07884                 | '     return fill(addr, pattern, count, listPtr, 4)
07884     04 1A 06 F6 | 	mov	arg05, #4
07888     5C 2A B1 FD | 	call	#_psram_spin2_fill
0788c     14 35 02 F6 | 	mov	local12, local06
07890     04 34 66 F0 | 	shl	local12, #4
07894     29 00 00 FF 
07898     CC E4 05 F1 | 	add	objptr, ##21196
0789c     F2 34 02 F1 | 	add	local12, objptr
078a0     1A 27 62 FC | 	wrlong	local05, local12
078a4     14 35 02 F6 | 	mov	local12, local06
078a8     04 34 66 F0 | 	shl	local12, #4
078ac     F2 34 02 F1 | 	add	local12, objptr
078b0     04 34 06 F1 | 	add	local12, #4
078b4     1A 3F 62 FC | 	wrlong	local17, local12
078b8     14 35 02 F6 | 	mov	local12, local06
078bc     04 34 66 F0 | 	shl	local12, #4
078c0     F2 34 02 F1 | 	add	local12, objptr
078c4     0C 34 06 F1 | 	add	local12, #12
078c8     1A 39 62 FC | 	wrlong	local14, local12
078cc                 | ' 'print dims(0),dims(1),dims(2),arraytype
078cc                 | ' 
078cc                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
078cc                 | ' arrayptr=memtop-arraysize-16
078cc                 | ' memtop=arrayptr
078cc                 | ' 
078cc                 | ' pslpoke arrayptr,arraytype
078cc                 | ' pspoke arrayptr+2,esize
078cc                 | ' pslpoke arrayptr+4,dims(0)
078cc                 | ' pslpoke arrayptr+8,dims(1)
078cc                 | ' pslpoke arrayptr+12,dims(2)
078cc                 | ' 
078cc                 | ' variables(j).name=varname2$
078cc                 | ' variables(j).value.uresult=arrayptr
078cc                 | ' variables(j).vartype=arraytype
078cc                 | ' if j=varnum then varnum+=1
078cc     20 00 00 FF 
078d0     00 E4 05 F1 | 	add	objptr, ##16384
078d4     F2 2A 02 FB | 	rdlong	local07, objptr
078d8     54 00 00 FF 
078dc     8C E5 85 F1 | 	sub	objptr, ##43404
078e0     15 29 0A F2 | 	cmp	local06, local07 wz
078e4     54 00 00 AF 
078e8     8C E5 05 A1 |  if_e	add	objptr, ##43404
078ec     F2 2A 02 AB |  if_e	rdlong	local07, objptr
078f0     01 2A 06 A1 |  if_e	add	local07, #1
078f4     F2 2A 62 AC |  if_e	wrlong	local07, objptr
078f8     54 00 00 AF 
078fc     8C E5 85 A1 |  if_e	sub	objptr, ##43404
07900                 | ' 
07900                 | ' return 0
07900     00 FA 05 F6 | 	mov	result1, #0
07904                 | LR__0636
07904     A7 F0 03 F6 | 	mov	ptra, fp
07908     B2 00 A0 FD | 	call	#popregs_
0790c                 | _compile_dim_ret
0790c     2D 00 64 FD | 	ret
07910                 | 
07910                 | ' 
07910                 | ' 
07910                 | ' function compile_for() as ulong  
07910                 | _compile_for
07910     07 4A 05 F6 | 	mov	COUNT_, #7
07914     A8 00 A0 FD | 	call	#pushregs_
07918                 | ' 
07918                 | ' 
07918                 | ' 
07918                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07918     56 00 00 FF 
0791c     C8 E5 05 F1 | 	add	objptr, ##44488
07920     F2 14 02 FB | 	rdlong	arg02, objptr
07924     01 14 06 F1 | 	add	arg02, #1
07928     03 14 66 F0 | 	shl	arg02, #3
0792c     02 00 00 FF 
07930     38 E4 85 F1 | 	sub	objptr, ##1080
07934     F2 14 02 F1 | 	add	arg02, objptr
07938     0A 13 02 FB | 	rdlong	arg01, arg02
0793c     54 00 00 FF 
07940     90 E5 85 F1 | 	sub	objptr, ##43408
07944                 | ' 
07944                 | ' select case s
07944     52 01 00 FF 
07948     31 14 06 F6 | 	mov	arg02, ##@LR__4504
0794c     F0 33 B1 FD | 	call	#__system___string_cmp
07950     00 FA 0D F2 | 	cmp	result1, #0 wz
07954     1B FA 05 A6 |  if_e	mov	result1, #27
07958     00 FA 05 56 |  if_ne	mov	result1, #0
0795c     00 FA 0D F2 | 	cmp	result1, #0 wz
07960     0C 00 90 AD |  if_e	jmp	#LR__0640
07964     05 12 06 F6 | 	mov	arg01, #5
07968     A0 E4 BF FD | 	call	#_compile_immediate_assign
0796c     10 00 90 FD | 	jmp	#LR__0641
07970                 | LR__0640
07970     20 12 06 F6 | 	mov	arg01, #32
07974     10 E9 BF FD | 	call	#_compile_error
07978     20 FA 05 F6 | 	mov	result1, #32
0797c     E8 02 90 FD | 	jmp	#LR__0647
07980                 | LR__0641
07980     6A 00 00 FF 
07984     00 E4 05 F1 | 	add	objptr, ##54272
07988     F2 12 02 FB | 	rdlong	arg01, objptr
0798c     09 25 02 F6 | 	mov	local04, arg01
07990     01 24 86 F1 | 	sub	local04, #1
07994     12 15 02 F6 | 	mov	arg02, local04
07998     01 14 66 F0 | 	shl	arg02, #1
0799c     12 15 02 F1 | 	add	arg02, local04
079a0     02 14 66 F0 | 	shl	arg02, #2
079a4     03 00 00 FF 
079a8     00 E4 85 F1 | 	sub	objptr, ##1536
079ac     F2 14 02 F1 | 	add	arg02, objptr
079b0     0A 1F 02 FB | 	rdlong	local01, arg02
079b4     04 14 06 F1 | 	add	arg02, #4
079b8     0A 27 02 FB | 	rdlong	local05, arg02
079bc     01 12 86 F1 | 	sub	arg01, #1
079c0     09 29 02 F6 | 	mov	local06, arg01
079c4     01 28 66 F0 | 	shl	local06, #1
079c8     09 29 02 F1 | 	add	local06, arg01
079cc     02 28 66 F0 | 	shl	local06, #2
079d0     F2 28 02 F1 | 	add	local06, objptr
079d4     08 28 06 F1 | 	add	local06, #8
079d8     14 13 02 FB | 	rdlong	arg01, local06
079dc     13 21 02 F6 | 	mov	local02, local05
079e0     09 23 02 F6 | 	mov	local03, arg01
079e4                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
079e4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
079e4     17 22 0E F2 | 	cmp	local03, #23 wz
079e8     67 00 00 FF 
079ec     00 E4 85 F1 | 	sub	objptr, ##52736
079f0     10 00 90 AD |  if_e	jmp	#LR__0642
079f4     22 12 06 F6 | 	mov	arg01, #34
079f8     8C E8 BF FD | 	call	#_compile_error
079fc     22 FA 05 F6 | 	mov	result1, #34
07a00     64 02 90 FD | 	jmp	#LR__0647
07a04                 | LR__0642
07a04     0F 2B 02 F6 | 	mov	local07, local01
07a08                 | ' varnum=t1.result.uresult
07a08                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
07a08     56 00 00 FF 
07a0c     C8 E5 05 F1 | 	add	objptr, ##44488
07a10     F2 24 02 FB | 	rdlong	local04, objptr
07a14     03 24 66 F0 | 	shl	local04, #3
07a18     02 00 00 FF 
07a1c     38 E4 85 F1 | 	sub	objptr, ##1080
07a20     F2 24 02 F1 | 	add	local04, objptr
07a24     12 13 02 FB | 	rdlong	arg01, local04
07a28     53 01 00 FF 
07a2c     7E 15 06 F6 | 	mov	arg02, ##@LR__4684
07a30     54 00 00 FF 
07a34     90 E5 85 F1 | 	sub	objptr, ##43408
07a38     04 33 B1 FD | 	call	#__system___string_cmp
07a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
07a40     10 00 90 AD |  if_e	jmp	#LR__0643
07a44     21 12 06 F6 | 	mov	arg01, #33
07a48     3C E8 BF FD | 	call	#_compile_error
07a4c     21 FA 05 F6 | 	mov	result1, #33
07a50     14 02 90 FD | 	jmp	#LR__0647
07a54                 | LR__0643
07a54     56 00 00 FF 
07a58     C8 E5 05 F1 | 	add	objptr, ##44488
07a5c     F2 24 02 FB | 	rdlong	local04, objptr
07a60     01 24 06 F1 | 	add	local04, #1
07a64     F2 24 62 FC | 	wrlong	local04, objptr
07a68     56 00 00 FF 
07a6c     C8 E5 85 F1 | 	sub	objptr, ##44488
07a70     D4 0B B0 FD | 	call	#_expr
07a74                 | ' ct+=1
07a74                 | ' expr()  ' there is "to" value pushed on the stack
07a74                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
07a74     56 00 00 FF 
07a78     C8 E5 05 F1 | 	add	objptr, ##44488
07a7c     F2 24 02 FB | 	rdlong	local04, objptr
07a80     03 24 66 F0 | 	shl	local04, #3
07a84     02 00 00 FF 
07a88     38 E4 85 F1 | 	sub	objptr, ##1080
07a8c     F2 24 02 F1 | 	add	local04, objptr
07a90     12 13 02 FB | 	rdlong	arg01, local04
07a94     53 01 00 FF 
07a98     81 15 06 F6 | 	mov	arg02, ##@LR__4685
07a9c     54 00 00 FF 
07aa0     90 E5 85 F1 | 	sub	objptr, ##43408
07aa4     98 32 B1 FD | 	call	#__system___string_cmp
07aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
07aac     3C 00 90 AD |  if_e	jmp	#LR__0644
07ab0     56 00 00 FF 
07ab4     C8 E5 05 F1 | 	add	objptr, ##44488
07ab8     F2 28 02 FB | 	rdlong	local06, objptr
07abc     03 28 66 F0 | 	shl	local06, #3
07ac0     02 00 00 FF 
07ac4     38 E4 85 F1 | 	sub	objptr, ##1080
07ac8     F2 28 02 F1 | 	add	local06, objptr
07acc     14 13 02 FB | 	rdlong	arg01, local06
07ad0     53 01 00 FF 
07ad4     86 15 06 F6 | 	mov	arg02, ##@LR__4686
07ad8     54 00 00 FF 
07adc     90 E5 85 F1 | 	sub	objptr, ##43408
07ae0     5C 32 B1 FD | 	call	#__system___string_cmp
07ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ae8     24 00 90 5D |  if_ne	jmp	#LR__0645
07aec                 | LR__0644
07aec     56 00 00 FF 
07af0     C8 E5 05 F1 | 	add	objptr, ##44488
07af4     F2 28 02 FB | 	rdlong	local06, objptr
07af8     01 28 06 F1 | 	add	local06, #1
07afc     F2 28 62 FC | 	wrlong	local06, objptr
07b00     56 00 00 FF 
07b04     C8 E5 85 F1 | 	sub	objptr, ##44488
07b08     3C 0B B0 FD | 	call	#_expr
07b0c     78 00 90 FD | 	jmp	#LR__0646
07b10                 | LR__0645
07b10     6A 00 00 FF 
07b14     00 E4 05 F1 | 	add	objptr, ##54272
07b18     F2 28 02 FB | 	rdlong	local06, objptr
07b1c     14 27 02 F6 | 	mov	local05, local06
07b20     01 26 66 F0 | 	shl	local05, #1
07b24     14 27 02 F1 | 	add	local05, local06
07b28     02 26 66 F0 | 	shl	local05, #2
07b2c     03 00 00 FF 
07b30     00 E4 85 F1 | 	sub	objptr, ##1536
07b34     F2 26 02 F1 | 	add	local05, objptr
07b38     08 26 06 F1 | 	add	local05, #8
07b3c     13 39 68 FC | 	wrlong	#28, local05
07b40     03 00 00 FF 
07b44     00 E4 05 F1 | 	add	objptr, ##1536
07b48     F2 28 02 FB | 	rdlong	local06, objptr
07b4c     14 27 02 F6 | 	mov	local05, local06
07b50     01 26 66 F0 | 	shl	local05, #1
07b54     14 27 02 F1 | 	add	local05, local06
07b58     02 26 66 F0 | 	shl	local05, #2
07b5c     03 00 00 FF 
07b60     00 E4 85 F1 | 	sub	objptr, ##1536
07b64     F2 26 02 F1 | 	add	local05, objptr
07b68     13 03 68 FC | 	wrlong	#1, local05
07b6c     03 00 00 FF 
07b70     00 E4 05 F1 | 	add	objptr, ##1536
07b74     F2 28 02 FB | 	rdlong	local06, objptr
07b78     01 28 06 F1 | 	add	local06, #1
07b7c     F2 28 62 FC | 	wrlong	local06, objptr
07b80     6A 00 00 FF 
07b84     00 E4 85 F1 | 	sub	objptr, ##54272
07b88                 | LR__0646
07b88     6A 00 00 FF 
07b8c     00 E4 05 F1 | 	add	objptr, ##54272
07b90     F2 28 02 FB | 	rdlong	local06, objptr
07b94     14 27 02 F6 | 	mov	local05, local06
07b98     01 26 66 F0 | 	shl	local05, #1
07b9c     14 27 02 F1 | 	add	local05, local06
07ba0     02 26 66 F0 | 	shl	local05, #2
07ba4     03 00 00 FF 
07ba8     00 E4 85 F1 | 	sub	objptr, ##1536
07bac     F2 26 02 F1 | 	add	local05, objptr
07bb0     08 26 06 F1 | 	add	local05, #8
07bb4     13 39 68 FC | 	wrlong	#28, local05
07bb8     03 00 00 FF 
07bbc     00 E4 05 F1 | 	add	objptr, ##1536
07bc0     F2 28 02 FB | 	rdlong	local06, objptr
07bc4     14 27 02 F6 | 	mov	local05, local06
07bc8     01 26 66 F0 | 	shl	local05, #1
07bcc     14 27 02 F1 | 	add	local05, local06
07bd0     02 26 66 F0 | 	shl	local05, #2
07bd4     03 00 00 FF 
07bd8     00 E4 85 F1 | 	sub	objptr, ##1536
07bdc     F2 26 02 F1 | 	add	local05, objptr
07be0     13 2B 62 FC | 	wrlong	local07, local05
07be4     03 00 00 FF 
07be8     00 E4 05 F1 | 	add	objptr, ##1536
07bec     F2 2A 02 FB | 	rdlong	local07, objptr
07bf0     01 2A 06 F1 | 	add	local07, #1
07bf4     F2 2A 62 FC | 	wrlong	local07, objptr
07bf8     15 29 02 F6 | 	mov	local06, local07
07bfc     01 28 66 F0 | 	shl	local06, #1
07c00     15 29 02 F1 | 	add	local06, local07
07c04     02 28 66 F0 | 	shl	local06, #2
07c08     03 00 00 FF 
07c0c     00 E4 85 F1 | 	sub	objptr, ##1536
07c10     F2 28 02 F1 | 	add	local06, objptr
07c14     08 28 06 F1 | 	add	local06, #8
07c18     14 95 68 FC | 	wrlong	#74, local06
07c1c     03 00 00 FF 
07c20     00 E4 05 F1 | 	add	objptr, ##1536
07c24     F2 2A 02 FB | 	rdlong	local07, objptr
07c28     15 29 02 F6 | 	mov	local06, local07
07c2c     01 28 66 F0 | 	shl	local06, #1
07c30     15 29 02 F1 | 	add	local06, local07
07c34     02 28 66 F0 | 	shl	local06, #2
07c38     03 00 00 FF 
07c3c     00 E4 85 F1 | 	sub	objptr, ##1536
07c40     F2 28 02 F1 | 	add	local06, objptr
07c44     14 01 68 FC | 	wrlong	#0, local06
07c48     03 00 00 FF 
07c4c     00 E4 05 F1 | 	add	objptr, ##1536
07c50     F2 2A 02 FB | 	rdlong	local07, objptr
07c54     01 2A 06 F1 | 	add	local07, #1
07c58     F2 2A 62 FC | 	wrlong	local07, objptr
07c5c     6A 00 00 FF 
07c60     00 E4 85 F1 | 	sub	objptr, ##54272
07c64                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07c64                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07c64                 | ' 
07c64                 | ' 
07c64                 | ' return 0
07c64     00 FA 05 F6 | 	mov	result1, #0
07c68                 | LR__0647
07c68     A7 F0 03 F6 | 	mov	ptra, fp
07c6c     B2 00 A0 FD | 	call	#popregs_
07c70                 | _compile_for_ret
07c70     2D 00 64 FD | 	ret
07c74                 | 
07c74                 | ' 
07c74                 | ' 
07c74                 | ' sub do_for()
07c74                 | _do_for
07c74     05 4A 05 F6 | 	mov	COUNT_, #5
07c78     A8 00 A0 FD | 	call	#pushregs_
07c7c     79 00 00 FF 
07c80     5C E5 05 F1 | 	add	objptr, ##62300
07c84     F2 24 02 FB | 	rdlong	local04, objptr
07c88     01 24 06 F1 | 	add	local04, #1
07c8c     F2 24 62 FC | 	wrlong	local04, objptr
07c90     79 00 00 FF 
07c94     5C E5 85 F1 | 	sub	objptr, ##62300
07c98     5C 1E B0 FD | 	call	#_pop
07c9c     FD 1E 02 F6 | 	mov	local01, result1
07ca0     FE 20 02 F6 | 	mov	local02, result2
07ca4     FF 22 02 F6 | 	mov	local03, result3
07ca8     79 00 00 FF 
07cac     5C E5 05 F1 | 	add	objptr, ##62300
07cb0     F2 24 02 FB | 	rdlong	local04, objptr
07cb4     12 27 02 F6 | 	mov	local05, local04
07cb8     02 26 66 F0 | 	shl	local05, #2
07cbc     12 27 02 F1 | 	add	local05, local04
07cc0     02 26 66 F0 | 	shl	local05, #2
07cc4     07 00 00 FF 
07cc8     40 E5 85 F1 | 	sub	objptr, ##3904
07ccc     F2 26 02 F1 | 	add	local05, objptr
07cd0     08 26 06 F1 | 	add	local05, #8
07cd4     13 1F 62 FC | 	wrlong	local01, local05
07cd8     72 00 00 FF 
07cdc     1C E4 85 F1 | 	sub	objptr, ##58396
07ce0     14 1E B0 FD | 	call	#_pop
07ce4     FD 1E 02 F6 | 	mov	local01, result1
07ce8     FE 20 02 F6 | 	mov	local02, result2
07cec     FF 22 02 F6 | 	mov	local03, result3
07cf0     79 00 00 FF 
07cf4     5C E5 05 F1 | 	add	objptr, ##62300
07cf8     F2 24 02 FB | 	rdlong	local04, objptr
07cfc     12 27 02 F6 | 	mov	local05, local04
07d00     02 26 66 F0 | 	shl	local05, #2
07d04     12 27 02 F1 | 	add	local05, local04
07d08     02 26 66 F0 | 	shl	local05, #2
07d0c     07 00 00 FF 
07d10     40 E5 85 F1 | 	sub	objptr, ##3904
07d14     F2 26 02 F1 | 	add	local05, objptr
07d18     0C 26 06 F1 | 	add	local05, #12
07d1c     13 1F 62 FC | 	wrlong	local01, local05
07d20     72 00 00 FF 
07d24     1C E4 85 F1 | 	sub	objptr, ##58396
07d28     CC 1D B0 FD | 	call	#_pop
07d2c     FD 1E 02 F6 | 	mov	local01, result1
07d30     FE 20 02 F6 | 	mov	local02, result2
07d34     FF 22 02 F6 | 	mov	local03, result3
07d38     79 00 00 FF 
07d3c     5C E5 05 F1 | 	add	objptr, ##62300
07d40     F2 24 02 FB | 	rdlong	local04, objptr
07d44     12 27 02 F6 | 	mov	local05, local04
07d48     02 26 66 F0 | 	shl	local05, #2
07d4c     12 27 02 F1 | 	add	local05, local04
07d50     02 26 66 F0 | 	shl	local05, #2
07d54     07 00 00 FF 
07d58     40 E5 85 F1 | 	sub	objptr, ##3904
07d5c     F2 26 02 F1 | 	add	local05, objptr
07d60     10 26 06 F1 | 	add	local05, #16
07d64     13 1F 62 FC | 	wrlong	local01, local05
07d68                 | ' fortop+=1
07d68                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07d68                 | ' 'if i> maxfor then printerror(36) : return
07d68                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07d68                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07d68                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07d68                 | ' if compiledline(lineptr_e).result_type=token_end then
07d68     08 00 00 FF 
07d6c     18 E4 85 F1 | 	sub	objptr, ##4120
07d70     F2 1E 02 FB | 	rdlong	local01, objptr
07d74     0F 27 02 F6 | 	mov	local05, local01
07d78     01 26 66 F0 | 	shl	local05, #1
07d7c     0F 27 02 F1 | 	add	local05, local01
07d80     02 26 66 F0 | 	shl	local05, #2
07d84     03 00 00 FF 
07d88     04 E4 85 F1 | 	sub	objptr, ##1540
07d8c     F2 26 02 F1 | 	add	local05, objptr
07d90     08 26 06 F1 | 	add	local05, #8
07d94     13 27 02 FB | 	rdlong	local05, local05
07d98     FE 27 0E F2 | 	cmp	local05, #510 wz
07d9c     67 00 00 FF 
07da0     00 E4 85 F1 | 	sub	objptr, ##52736
07da4     70 00 90 5D |  if_ne	jmp	#LR__0650
07da8     79 00 00 FF 
07dac     5C E5 05 F1 | 	add	objptr, ##62300
07db0     F2 1E 02 FB | 	rdlong	local01, objptr
07db4     0F 27 02 F6 | 	mov	local05, local01
07db8     02 26 66 F0 | 	shl	local05, #2
07dbc     0F 27 02 F1 | 	add	local05, local01
07dc0     02 26 66 F0 | 	shl	local05, #2
07dc4     07 00 00 FF 
07dc8     40 E5 85 F1 | 	sub	objptr, ##3904
07dcc     F2 26 02 F1 | 	add	local05, objptr
07dd0     07 00 00 FF 
07dd4     18 E5 05 F1 | 	add	objptr, ##3864
07dd8     F2 1E 02 FB | 	rdlong	local01, objptr
07ddc     13 1F 62 FC | 	wrlong	local01, local05
07de0     28 E4 05 F1 | 	add	objptr, #40
07de4     F2 1E 02 FB | 	rdlong	local01, objptr
07de8     0F 27 02 F6 | 	mov	local05, local01
07dec     02 26 66 F0 | 	shl	local05, #2
07df0     0F 27 02 F1 | 	add	local05, local01
07df4     02 26 66 F0 | 	shl	local05, #2
07df8     07 00 00 FF 
07dfc     40 E5 85 F1 | 	sub	objptr, ##3904
07e00     F2 26 02 F1 | 	add	local05, objptr
07e04     04 26 06 F1 | 	add	local05, #4
07e08     13 01 68 FC | 	wrlong	#0, local05
07e0c     72 00 00 FF 
07e10     1C E4 85 F1 | 	sub	objptr, ##58396
07e14     7C 00 90 FD | 	jmp	#LR__0651
07e18                 | LR__0650
07e18     79 00 00 FF 
07e1c     5C E5 05 F1 | 	add	objptr, ##62300
07e20     F2 1E 02 FB | 	rdlong	local01, objptr
07e24     0F 27 02 F6 | 	mov	local05, local01
07e28     02 26 66 F0 | 	shl	local05, #2
07e2c     0F 27 02 F1 | 	add	local05, local01
07e30     02 26 66 F0 | 	shl	local05, #2
07e34     07 00 00 FF 
07e38     40 E5 85 F1 | 	sub	objptr, ##3904
07e3c     F2 26 02 F1 | 	add	local05, objptr
07e40     07 00 00 FF 
07e44     20 E5 05 F1 | 	add	objptr, ##3872
07e48     F2 1E 02 FB | 	rdlong	local01, objptr
07e4c     13 1F 62 FC | 	wrlong	local01, local05
07e50     20 E4 05 F1 | 	add	objptr, #32
07e54     F2 1E 02 FB | 	rdlong	local01, objptr
07e58     0F 27 02 F6 | 	mov	local05, local01
07e5c     02 26 66 F0 | 	shl	local05, #2
07e60     0F 27 02 F1 | 	add	local05, local01
07e64     02 26 66 F0 | 	shl	local05, #2
07e68     07 00 00 FF 
07e6c     40 E5 85 F1 | 	sub	objptr, ##3904
07e70     F2 26 02 F1 | 	add	local05, objptr
07e74     08 00 00 FF 
07e78     18 E4 85 F1 | 	sub	objptr, ##4120
07e7c     F2 1E 02 FB | 	rdlong	local01, objptr
07e80     6A 00 00 FF 
07e84     04 E4 85 F1 | 	sub	objptr, ##54276
07e88     01 1E 06 F1 | 	add	local01, #1
07e8c     04 26 06 F1 | 	add	local05, #4
07e90     13 1F 62 FC | 	wrlong	local01, local05
07e94                 | LR__0651
07e94     A7 F0 03 F6 | 	mov	ptra, fp
07e98     B2 00 A0 FD | 	call	#popregs_
07e9c                 | _do_for_ret
07e9c     2D 00 64 FD | 	ret
07ea0                 | 
07ea0                 | ' 
07ea0                 | ' ' now do_next todo
07ea0                 | ' 
07ea0                 | ' sub do_next()
07ea0                 | _do_next
07ea0     04 4A 05 F6 | 	mov	COUNT_, #4
07ea4     A8 00 A0 FD | 	call	#pushregs_
07ea8     4C 1C B0 FD | 	call	#_pop
07eac     FD 1E 02 F6 | 	mov	local01, result1
07eb0     FE 20 02 F6 | 	mov	local02, result2
07eb4     FF 22 02 F6 | 	mov	local03, result3
07eb8                 | ' 
07eb8                 | ' t1=pop() :varnum=t1.result.uresult
07eb8                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07eb8     79 00 00 FF 
07ebc     5C E5 05 F1 | 	add	objptr, ##62300
07ec0     F2 12 02 FB | 	rdlong	arg01, objptr
07ec4     09 25 02 F6 | 	mov	local04, arg01
07ec8     02 24 66 F0 | 	shl	local04, #2
07ecc     09 25 02 F1 | 	add	local04, arg01
07ed0     02 24 66 F0 | 	shl	local04, #2
07ed4     07 00 00 FF 
07ed8     40 E5 85 F1 | 	sub	objptr, ##3904
07edc     F2 24 02 F1 | 	add	local04, objptr
07ee0     08 24 06 F1 | 	add	local04, #8
07ee4     12 25 02 FB | 	rdlong	local04, local04
07ee8     0F 25 0A F2 | 	cmp	local04, local01 wz
07eec     72 00 00 FF 
07ef0     1C E4 85 F1 | 	sub	objptr, ##58396
07ef4     0C 00 90 AD |  if_e	jmp	#LR__0660
07ef8     25 12 06 F6 | 	mov	arg01, #37
07efc     08 F8 B0 FD | 	call	#_printerror
07f00     28 02 90 FD | 	jmp	#LR__0664
07f04                 | LR__0660
07f04     79 00 00 FF 
07f08     5C E5 05 F1 | 	add	objptr, ##62300
07f0c     F2 12 02 FB | 	rdlong	arg01, objptr
07f10     09 25 02 F6 | 	mov	local04, arg01
07f14     02 24 66 F0 | 	shl	local04, #2
07f18     09 25 02 F1 | 	add	local04, arg01
07f1c     02 24 66 F0 | 	shl	local04, #2
07f20     07 00 00 FF 
07f24     40 E5 85 F1 | 	sub	objptr, ##3904
07f28     F2 24 02 F1 | 	add	local04, objptr
07f2c     0C 24 06 F1 | 	add	local04, #12
07f30     12 25 02 FB | 	rdlong	local04, local04
07f34     0F 13 02 F6 | 	mov	arg01, local01
07f38     04 12 66 F0 | 	shl	arg01, #4
07f3c     3D 00 00 FF 
07f40     90 E4 85 F1 | 	sub	objptr, ##31376
07f44     F2 12 02 F1 | 	add	arg01, objptr
07f48     0F FF 01 F6 | 	mov	result3, local01
07f4c     04 FE 65 F0 | 	shl	result3, #4
07f50     F2 FE 01 F1 | 	add	result3, objptr
07f54     04 FE 05 F1 | 	add	result3, #4
07f58     FF FE 01 FB | 	rdlong	result3, result3
07f5c     12 FF 01 F1 | 	add	result3, local04
07f60     04 12 06 F1 | 	add	arg01, #4
07f64     09 FF 61 FC | 	wrlong	result3, arg01
07f68                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07f68                 | ' if fortable(fortop).stepval>=0 then
07f68     44 00 00 FF 
07f6c     D0 E5 05 F1 | 	add	objptr, ##35280
07f70     F2 12 02 FB | 	rdlong	arg01, objptr
07f74     09 25 02 F6 | 	mov	local04, arg01
07f78     02 24 66 F0 | 	shl	local04, #2
07f7c     09 25 02 F1 | 	add	local04, arg01
07f80     02 24 66 F0 | 	shl	local04, #2
07f84     07 00 00 FF 
07f88     40 E5 85 F1 | 	sub	objptr, ##3904
07f8c     F2 24 02 F1 | 	add	local04, objptr
07f90     0C 24 06 F1 | 	add	local04, #12
07f94     12 25 02 FB | 	rdlong	local04, local04
07f98     00 24 56 F2 | 	cmps	local04, #0 wc
07f9c     72 00 00 FF 
07fa0     1C E4 85 F1 | 	sub	objptr, ##58396
07fa4     78 00 90 CD |  if_b	jmp	#LR__0661
07fa8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07fa8     04 1E 66 F0 | 	shl	local01, #4
07fac     34 00 00 FF 
07fb0     8C E5 05 F1 | 	add	objptr, ##27020
07fb4     F2 1E 02 F1 | 	add	local01, objptr
07fb8     44 00 00 FF 
07fbc     D0 E5 05 F1 | 	add	objptr, ##35280
07fc0     F2 24 02 FB | 	rdlong	local04, objptr
07fc4     12 13 02 F6 | 	mov	arg01, local04
07fc8     02 12 66 F0 | 	shl	arg01, #2
07fcc     12 13 02 F1 | 	add	arg01, local04
07fd0     02 12 66 F0 | 	shl	arg01, #2
07fd4     07 00 00 FF 
07fd8     40 E5 85 F1 | 	sub	objptr, ##3904
07fdc     F2 12 02 F1 | 	add	arg01, objptr
07fe0     04 1E 06 F1 | 	add	local01, #4
07fe4     0F 25 02 FB | 	rdlong	local04, local01
07fe8     10 12 06 F1 | 	add	arg01, #16
07fec     09 13 02 FB | 	rdlong	arg01, arg01
07ff0     09 25 5A F2 | 	cmps	local04, arg01 wcz
07ff4     72 00 00 FF 
07ff8     1C E4 85 F1 | 	sub	objptr, ##58396
07ffc     9C 00 90 ED |  if_be	jmp	#LR__0663
08000     79 00 00 FF 
08004     5C E5 05 F1 | 	add	objptr, ##62300
08008     F2 24 02 FB | 	rdlong	local04, objptr
0800c     01 24 86 F1 | 	sub	local04, #1
08010     F2 24 62 FC | 	wrlong	local04, objptr
08014     79 00 00 FF 
08018     5C E5 85 F1 | 	sub	objptr, ##62300
0801c     0C 01 90 FD | 	jmp	#LR__0664
08020                 | LR__0661
08020                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08020     0F 13 02 F6 | 	mov	arg01, local01
08024     04 12 66 F0 | 	shl	arg01, #4
08028     34 00 00 FF 
0802c     8C E5 05 F1 | 	add	objptr, ##27020
08030     F2 12 02 F1 | 	add	arg01, objptr
08034     44 00 00 FF 
08038     D0 E5 05 F1 | 	add	objptr, ##35280
0803c     F2 24 02 FB | 	rdlong	local04, objptr
08040     12 1F 02 F6 | 	mov	local01, local04
08044     02 1E 66 F0 | 	shl	local01, #2
08048     12 1F 02 F1 | 	add	local01, local04
0804c     02 1E 66 F0 | 	shl	local01, #2
08050     07 00 00 FF 
08054     40 E5 85 F1 | 	sub	objptr, ##3904
08058     F2 1E 02 F1 | 	add	local01, objptr
0805c     04 12 06 F1 | 	add	arg01, #4
08060     09 13 02 FB | 	rdlong	arg01, arg01
08064     10 1E 06 F1 | 	add	local01, #16
08068     0F 1F 02 FB | 	rdlong	local01, local01
0806c     0F 13 52 F2 | 	cmps	arg01, local01 wc
08070     72 00 00 FF 
08074     1C E4 85 F1 | 	sub	objptr, ##58396
08078     20 00 90 3D |  if_ae	jmp	#LR__0662
0807c     79 00 00 FF 
08080     5C E5 05 F1 | 	add	objptr, ##62300
08084     F2 24 02 FB | 	rdlong	local04, objptr
08088     01 24 86 F1 | 	sub	local04, #1
0808c     F2 24 62 FC | 	wrlong	local04, objptr
08090     79 00 00 FF 
08094     5C E5 85 F1 | 	sub	objptr, ##62300
08098     90 00 90 FD | 	jmp	#LR__0664
0809c                 | LR__0662
0809c                 | LR__0663
0809c     79 00 00 FF 
080a0     5C E5 05 F1 | 	add	objptr, ##62300
080a4     F2 1E 02 FB | 	rdlong	local01, objptr
080a8     0F 25 02 F6 | 	mov	local04, local01
080ac     02 24 66 F0 | 	shl	local04, #2
080b0     0F 25 02 F1 | 	add	local04, local01
080b4     02 24 66 F0 | 	shl	local04, #2
080b8     07 00 00 FF 
080bc     40 E5 85 F1 | 	sub	objptr, ##3904
080c0     F2 24 02 F1 | 	add	local04, objptr
080c4     12 25 02 FB | 	rdlong	local04, local04
080c8     07 00 00 FF 
080cc     18 E5 05 F1 | 	add	objptr, ##3864
080d0     F2 24 62 FC | 	wrlong	local04, objptr
080d4     28 E4 05 F1 | 	add	objptr, #40
080d8     F2 1E 02 FB | 	rdlong	local01, objptr
080dc     0F 25 02 F6 | 	mov	local04, local01
080e0     02 24 66 F0 | 	shl	local04, #2
080e4     0F 25 02 F1 | 	add	local04, local01
080e8     02 24 66 F0 | 	shl	local04, #2
080ec     07 00 00 FF 
080f0     40 E5 85 F1 | 	sub	objptr, ##3904
080f4     F2 24 02 F1 | 	add	local04, objptr
080f8     04 24 06 F1 | 	add	local04, #4
080fc     12 25 02 FB | 	rdlong	local04, local04
08100     07 00 00 FF 
08104     1C E5 05 F1 | 	add	objptr, ##3868
08108     F2 24 62 FC | 	wrlong	local04, objptr
0810c     0F 00 00 FF 
08110     38 E5 85 F1 | 	sub	objptr, ##7992
08114     F2 24 02 FB | 	rdlong	local04, objptr
08118     01 24 86 F1 | 	sub	local04, #1
0811c     04 E4 05 F1 | 	add	objptr, #4
08120     F2 24 62 FC | 	wrlong	local04, objptr
08124     6A 00 00 FF 
08128     04 E4 85 F1 | 	sub	objptr, ##54276
0812c                 | LR__0664
0812c     A7 F0 03 F6 | 	mov	ptra, fp
08130     B2 00 A0 FD | 	call	#popregs_
08134                 | _do_next_ret
08134     2D 00 64 FD | 	ret
08138                 | 
08138                 | ' 
08138                 | ' 
08138                 | ' function compile_next() as ulong
08138                 | _compile_next
08138     04 4A 05 F6 | 	mov	COUNT_, #4
0813c     A8 00 A0 FD | 	call	#pushregs_
08140     56 00 00 FF 
08144     C8 E5 05 F1 | 	add	objptr, ##44488
08148     F2 12 02 FB | 	rdlong	arg01, objptr
0814c     03 12 66 F0 | 	shl	arg01, #3
08150     02 00 00 FF 
08154     38 E4 85 F1 | 	sub	objptr, ##1080
08158     F2 12 02 F1 | 	add	arg01, objptr
0815c     09 1F 02 FB | 	rdlong	local01, arg01
08160                 | ' 
08160                 | ' varname$=lparts(ct).part$ 
08160                 | ' 'suffix$=right$(varname$,1)
08160                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08160                 | ' if varnum=0 then compile_error(35)  : return 35
08160     04 E4 85 F1 | 	sub	objptr, #4
08164     F2 14 0A FB | 	rdlong	arg02, objptr wz
08168     54 00 00 FF 
0816c     8C E5 85 F1 | 	sub	objptr, ##43404
08170     10 00 90 5D |  if_ne	jmp	#LR__0670
08174     23 12 06 F6 | 	mov	arg01, #35
08178     0C E1 BF FD | 	call	#_compile_error
0817c     23 FA 05 F6 | 	mov	result1, #35
08180     58 01 90 FD | 	jmp	#LR__0674
08184                 | LR__0670
08184     01 20 66 F6 | 	neg	local02, #1
08188                 | ' j=-1
08188                 | ' for i=0 to varnum-1
08188     00 22 06 F6 | 	mov	local03, #0
0818c     54 00 00 FF 
08190     8C E5 05 F1 | 	add	objptr, ##43404
08194     F2 24 02 FB | 	rdlong	local04, objptr
08198     54 00 00 FF 
0819c     8C E5 85 F1 | 	sub	objptr, ##43404
081a0                 | LR__0671
081a0     12 23 12 F2 | 	cmp	local03, local04 wc
081a4     38 00 90 3D |  if_ae	jmp	#LR__0672
081a8                 | '   if variables(i).name=varname$ then j=i : exit
081a8     11 15 02 F6 | 	mov	arg02, local03
081ac     04 14 66 F0 | 	shl	arg02, #4
081b0     34 00 00 FF 
081b4     8C E5 05 F1 | 	add	objptr, ##27020
081b8     F2 14 02 F1 | 	add	arg02, objptr
081bc     0A 13 02 FB | 	rdlong	arg01, arg02
081c0     0F 15 02 F6 | 	mov	arg02, local01
081c4     34 00 00 FF 
081c8     8C E5 85 F1 | 	sub	objptr, ##27020
081cc     70 2B B1 FD | 	call	#__system___string_cmp
081d0     00 FA 0D F2 | 	cmp	result1, #0 wz
081d4     11 21 02 A6 |  if_e	mov	local02, local03
081d8     01 22 06 51 |  if_ne	add	local03, #1
081dc     C0 FF 9F 5D |  if_ne	jmp	#LR__0671
081e0                 | LR__0672
081e0                 | ' if j=-1 then compile_error(35) : return 35
081e0     FF FF 7F FF 
081e4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
081e8     10 00 90 5D |  if_ne	jmp	#LR__0673
081ec     23 12 06 F6 | 	mov	arg01, #35
081f0     94 E0 BF FD | 	call	#_compile_error
081f4     23 FA 05 F6 | 	mov	result1, #35
081f8     E0 00 90 FD | 	jmp	#LR__0674
081fc                 | LR__0673
081fc     6A 00 00 FF 
08200     00 E4 05 F1 | 	add	objptr, ##54272
08204     F2 24 02 FB | 	rdlong	local04, objptr
08208     12 23 02 F6 | 	mov	local03, local04
0820c     01 22 66 F0 | 	shl	local03, #1
08210     12 23 02 F1 | 	add	local03, local04
08214     02 22 66 F0 | 	shl	local03, #2
08218     03 00 00 FF 
0821c     00 E4 85 F1 | 	sub	objptr, ##1536
08220     F2 22 02 F1 | 	add	local03, objptr
08224     08 22 06 F1 | 	add	local03, #8
08228     11 39 68 FC | 	wrlong	#28, local03
0822c     03 00 00 FF 
08230     00 E4 05 F1 | 	add	objptr, ##1536
08234     F2 24 02 FB | 	rdlong	local04, objptr
08238     12 23 02 F6 | 	mov	local03, local04
0823c     01 22 66 F0 | 	shl	local03, #1
08240     12 23 02 F1 | 	add	local03, local04
08244     02 22 66 F0 | 	shl	local03, #2
08248     03 00 00 FF 
0824c     00 E4 85 F1 | 	sub	objptr, ##1536
08250     F2 22 02 F1 | 	add	local03, objptr
08254     11 21 62 FC | 	wrlong	local02, local03
08258     03 00 00 FF 
0825c     00 E4 05 F1 | 	add	objptr, ##1536
08260     F2 24 02 FB | 	rdlong	local04, objptr
08264     01 24 06 F1 | 	add	local04, #1
08268     F2 24 62 FC | 	wrlong	local04, objptr
0826c     12 23 02 F6 | 	mov	local03, local04
08270     01 22 66 F0 | 	shl	local03, #1
08274     12 23 02 F1 | 	add	local03, local04
08278     02 22 66 F0 | 	shl	local03, #2
0827c     03 00 00 FF 
08280     00 E4 85 F1 | 	sub	objptr, ##1536
08284     F2 22 02 F1 | 	add	local03, objptr
08288     08 22 06 F1 | 	add	local03, #8
0828c     11 97 68 FC | 	wrlong	#75, local03
08290     03 00 00 FF 
08294     00 E4 05 F1 | 	add	objptr, ##1536
08298     F2 24 02 FB | 	rdlong	local04, objptr
0829c     12 23 02 F6 | 	mov	local03, local04
082a0     01 22 66 F0 | 	shl	local03, #1
082a4     12 23 02 F1 | 	add	local03, local04
082a8     02 22 66 F0 | 	shl	local03, #2
082ac     03 00 00 FF 
082b0     00 E4 85 F1 | 	sub	objptr, ##1536
082b4     F2 22 02 F1 | 	add	local03, objptr
082b8     11 01 68 FC | 	wrlong	#0, local03
082bc     03 00 00 FF 
082c0     00 E4 05 F1 | 	add	objptr, ##1536
082c4     F2 24 02 FB | 	rdlong	local04, objptr
082c8     01 24 06 F1 | 	add	local04, #1
082cc     F2 24 62 FC | 	wrlong	local04, objptr
082d0     6A 00 00 FF 
082d4     00 E4 85 F1 | 	sub	objptr, ##54272
082d8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
082d8                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
082d8                 | ' return 0
082d8     00 FA 05 F6 | 	mov	result1, #0
082dc                 | LR__0674
082dc     A7 F0 03 F6 | 	mov	ptra, fp
082e0     B2 00 A0 FD | 	call	#popregs_
082e4                 | _compile_next_ret
082e4     2D 00 64 FD | 	ret
082e8                 | 
082e8                 | ' 
082e8                 | ' 
082e8                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
082e8                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
082e8                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
082e8                 | ' 
082e8                 | ' 
082e8                 | ' function compile_goto( ) as ulong
082e8                 | _compile_goto
082e8     03 4A 05 F6 | 	mov	COUNT_, #3
082ec     A8 00 A0 FD | 	call	#pushregs_
082f0     28 F0 07 F1 | 	add	ptra, #40
082f4                 | ' 
082f4                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
082f4     56 00 00 FF 
082f8     C8 E5 05 F1 | 	add	objptr, ##44488
082fc     F2 16 02 FB | 	rdlong	arg03, objptr
08300     03 16 66 F0 | 	shl	arg03, #3
08304     02 00 00 FF 
08308     38 E4 85 F1 | 	sub	objptr, ##1080
0830c     F2 16 02 F1 | 	add	arg03, objptr
08310     04 16 06 F1 | 	add	arg03, #4
08314     0B 17 02 FB | 	rdlong	arg03, arg03
08318     01 00 00 FF 
0831c     00 16 0E F2 | 	cmp	arg03, ##512 wz
08320     54 00 00 FF 
08324     90 E5 85 F1 | 	sub	objptr, ##43408
08328     CC 02 90 5D |  if_ne	jmp	#LR__0685
0832c     56 00 00 FF 
08330     C8 E5 05 F1 | 	add	objptr, ##44488
08334     F2 16 02 FB | 	rdlong	arg03, objptr
08338     01 16 06 F1 | 	add	arg03, #1
0833c     03 16 66 F0 | 	shl	arg03, #3
08340     02 00 00 FF 
08344     38 E4 85 F1 | 	sub	objptr, ##1080
08348     F2 16 02 F1 | 	add	arg03, objptr
0834c     04 16 06 F1 | 	add	arg03, #4
08350     0B 17 02 FB | 	rdlong	arg03, arg03
08354     FE 17 0E F2 | 	cmp	arg03, #510 wz
08358     54 00 00 FF 
0835c     90 E5 85 F1 | 	sub	objptr, ##43408
08360     94 02 90 5D |  if_ne	jmp	#LR__0685
08364     56 00 00 FF 
08368     C8 E5 05 F1 | 	add	objptr, ##44488
0836c     F2 16 02 FB | 	rdlong	arg03, objptr
08370     03 16 66 F0 | 	shl	arg03, #3
08374     02 00 00 FF 
08378     38 E4 85 F1 | 	sub	objptr, ##1080
0837c     F2 16 02 F1 | 	add	arg03, objptr
08380     0B 13 02 FB | 	rdlong	arg01, arg03
08384     00 14 06 F6 | 	mov	arg02, #0
08388     54 00 00 FF 
0838c     90 E5 85 F1 | 	sub	objptr, ##43408
08390     20 5B B1 FD | 	call	#__system____builtin_atoi
08394     04 4E 05 F1 | 	add	fp, #4
08398     A7 FA 61 FC | 	wrlong	result1, fp
0839c     6A 00 00 FF 
083a0     00 E4 05 F1 | 	add	objptr, ##54272
083a4     F2 1E 02 FB | 	rdlong	local01, objptr
083a8     0F 21 02 F6 | 	mov	local02, local01
083ac     01 20 66 F0 | 	shl	local02, #1
083b0     0F 21 02 F1 | 	add	local02, local01
083b4     02 20 66 F0 | 	shl	local02, #2
083b8     03 00 00 FF 
083bc     00 E4 85 F1 | 	sub	objptr, ##1536
083c0     F2 20 02 F1 | 	add	local02, objptr
083c4     08 20 06 F1 | 	add	local02, #8
083c8     10 9D 68 FC | 	wrlong	#78, local02
083cc     03 00 00 FF 
083d0     08 E4 05 F1 | 	add	objptr, ##1544
083d4     F2 22 02 FB | 	rdlong	local03, objptr
083d8     6A 00 00 FF 
083dc     08 E4 85 F1 | 	sub	objptr, ##54280
083e0     04 4E 05 F1 | 	add	fp, #4
083e4     A7 22 62 FC | 	wrlong	local03, fp
083e8     08 4E 85 F1 | 	sub	fp, #8
083ec                 | ' 
083ec                 | '   gotoline=val%(lparts(ct).part$) 
083ec                 | '   compiledline(lineptr).result_type=token_fast_goto
083ec                 | ' ' now find a pointer to goto
083ec                 | '   gotoptr=programstart
083ec                 | '   do
083ec                 | LR__0680
083ec     10 4E 05 F1 | 	add	fp, #16
083f0     A7 12 02 F6 | 	mov	arg01, fp
083f4     08 4E 85 F1 | 	sub	fp, #8
083f8     A7 14 02 FB | 	rdlong	arg02, fp
083fc     08 4E 85 F1 | 	sub	fp, #8
08400     18 16 06 F6 | 	mov	arg03, #24
08404     0B 00 00 FF 
08408     C0 E4 05 F1 | 	add	objptr, ##5824
0840c     A0 1D B1 FD | 	call	#_psram_spin2_read1
08410     0B 00 00 FF 
08414     C0 E4 85 F1 | 	sub	objptr, ##5824
08418                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08418                 | '     if gotoheader(0)<>$FFFFFFFF then
08418     10 4E 05 F1 | 	add	fp, #16
0841c     A7 22 02 FB | 	rdlong	local03, fp
08420     10 4E 85 F1 | 	sub	fp, #16
08424     FF FF 7F FF 
08428     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0842c     24 00 90 AD |  if_e	jmp	#LR__0681
08430     08 4E 05 F1 | 	add	fp, #8
08434     A7 22 02 FB | 	rdlong	local03, fp
08438     04 4E 05 F1 | 	add	fp, #4
0843c     A7 22 62 FC | 	wrlong	local03, fp
08440     18 4E 05 F1 | 	add	fp, #24
08444     A7 22 02 FB | 	rdlong	local03, fp
08448     1C 4E 85 F1 | 	sub	fp, #28
0844c     A7 22 62 FC | 	wrlong	local03, fp
08450     08 4E 85 F1 | 	sub	fp, #8
08454                 | LR__0681
08454     24 4E 05 F1 | 	add	fp, #36
08458     A7 22 02 FB | 	rdlong	local03, fp
0845c     24 4E 85 F1 | 	sub	fp, #36
08460     FF FF 3F FF 
08464     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08468     10 4E 05 51 |  if_ne	add	fp, #16
0846c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08470     10 4E 85 51 |  if_ne	sub	fp, #16
08474     FF FF 7F 5F 
08478     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0847c     1C 00 90 AD |  if_e	jmp	#LR__0682
08480     10 4E 05 F1 | 	add	fp, #16
08484     A7 22 02 FB | 	rdlong	local03, fp
08488     0C 4E 85 F1 | 	sub	fp, #12
0848c     A7 20 02 FB | 	rdlong	local02, fp
08490     04 4E 85 F1 | 	sub	fp, #4
08494     10 23 0A F2 | 	cmp	local03, local02 wz
08498     50 FF 9F 5D |  if_ne	jmp	#LR__0680
0849c                 | LR__0682
0849c                 | '   if gotoheader(0)=gotoline then
0849c     10 4E 05 F1 | 	add	fp, #16
084a0     A7 22 02 FB | 	rdlong	local03, fp
084a4     0C 4E 85 F1 | 	sub	fp, #12
084a8     A7 1E 02 FB | 	rdlong	local01, fp
084ac     04 4E 85 F1 | 	sub	fp, #4
084b0     0F 23 0A F2 | 	cmp	local03, local01 wz
084b4     7C 00 90 5D |  if_ne	jmp	#LR__0683
084b8     6A 00 00 FF 
084bc     00 E4 05 F1 | 	add	objptr, ##54272
084c0     F2 1E 02 FB | 	rdlong	local01, objptr
084c4     0F 21 02 F6 | 	mov	local02, local01
084c8     01 20 66 F0 | 	shl	local02, #1
084cc     0F 21 02 F1 | 	add	local02, local01
084d0     02 20 66 F0 | 	shl	local02, #2
084d4     03 00 00 FF 
084d8     00 E4 85 F1 | 	sub	objptr, ##1536
084dc     F2 20 02 F1 | 	add	local02, objptr
084e0     0C 4E 05 F1 | 	add	fp, #12
084e4     A7 22 02 FB | 	rdlong	local03, fp
084e8     10 23 62 FC | 	wrlong	local03, local02
084ec     03 00 00 FF 
084f0     00 E4 05 F1 | 	add	objptr, ##1536
084f4     F2 1E 02 FB | 	rdlong	local01, objptr
084f8     0F 21 02 F6 | 	mov	local02, local01
084fc     01 20 66 F0 | 	shl	local02, #1
08500     0F 21 02 F1 | 	add	local02, local01
08504     02 20 66 F0 | 	shl	local02, #2
08508     03 00 00 FF 
0850c     00 E4 85 F1 | 	sub	objptr, ##1536
08510     F2 20 02 F1 | 	add	local02, objptr
08514     08 4E 85 F1 | 	sub	fp, #8
08518     A7 22 02 FB | 	rdlong	local03, fp
0851c     04 4E 85 F1 | 	sub	fp, #4
08520     04 20 06 F1 | 	add	local02, #4
08524     10 23 62 FC | 	wrlong	local03, local02
08528     67 00 00 FF 
0852c     00 E4 85 F1 | 	sub	objptr, ##52736
08530     A4 00 90 FD | 	jmp	#LR__0684
08534                 | LR__0683
08534     6A 00 00 FF 
08538     00 E4 05 F1 | 	add	objptr, ##54272
0853c     F2 1E 02 FB | 	rdlong	local01, objptr
08540     0F 21 02 F6 | 	mov	local02, local01
08544     01 20 66 F0 | 	shl	local02, #1
08548     0F 21 02 F1 | 	add	local02, local01
0854c     02 20 66 F0 | 	shl	local02, #2
08550     03 00 00 FF 
08554     00 E4 85 F1 | 	sub	objptr, ##1536
08558     F2 20 02 F1 | 	add	local02, objptr
0855c     00 00 C0 FF 
08560     10 01 68 FC | 	wrlong	##-2147483648, local02
08564     03 00 00 FF 
08568     00 E4 05 F1 | 	add	objptr, ##1536
0856c     F2 1E 02 FB | 	rdlong	local01, objptr
08570     0F 21 02 F6 | 	mov	local02, local01
08574     01 20 66 F0 | 	shl	local02, #1
08578     0F 21 02 F1 | 	add	local02, local01
0857c     02 20 66 F0 | 	shl	local02, #2
08580     03 00 00 FF 
08584     00 E4 85 F1 | 	sub	objptr, ##1536
08588     F2 20 02 F1 | 	add	local02, objptr
0858c     04 4E 05 F1 | 	add	fp, #4
08590     A7 22 02 FB | 	rdlong	local03, fp
08594     04 4E 85 F1 | 	sub	fp, #4
08598     04 20 06 F1 | 	add	local02, #4
0859c     10 23 62 FC | 	wrlong	local03, local02
085a0     03 00 00 FF 
085a4     00 E4 05 F1 | 	add	objptr, ##1536
085a8     F2 1E 02 FB | 	rdlong	local01, objptr
085ac     0F 21 02 F6 | 	mov	local02, local01
085b0     01 20 66 F0 | 	shl	local02, #1
085b4     0F 21 02 F1 | 	add	local02, local01
085b8     02 20 66 F0 | 	shl	local02, #2
085bc     03 00 00 FF 
085c0     00 E4 85 F1 | 	sub	objptr, ##1536
085c4     F2 20 02 F1 | 	add	local02, objptr
085c8     08 20 06 F1 | 	add	local02, #8
085cc     10 A7 68 FC | 	wrlong	#83, local02
085d0     67 00 00 FF 
085d4     00 E4 85 F1 | 	sub	objptr, ##52736
085d8                 | LR__0684
085d8     6A 00 00 FF 
085dc     00 E4 05 F1 | 	add	objptr, ##54272
085e0     F2 22 02 FB | 	rdlong	local03, objptr
085e4     01 22 06 F1 | 	add	local03, #1
085e8     F2 22 62 FC | 	wrlong	local03, objptr
085ec     6A 00 00 FF 
085f0     00 E4 85 F1 | 	sub	objptr, ##54272
085f4     40 00 90 FD | 	jmp	#LR__0686
085f8                 | LR__0685
085f8                 | '    print "We have a slow goto, todo  "
085f8     00 12 06 F6 | 	mov	arg01, #0
085fc     4C 80 B1 FD | 	call	#__system___getiolock_0442
08600     FD 12 02 F6 | 	mov	arg01, result1
08604     10 27 B1 FD | 	call	#__system___lockmem
08608     53 01 00 FF 
0860c     89 15 06 F6 | 	mov	arg02, ##@LR__4687
08610     00 12 06 F6 | 	mov	arg01, #0
08614     00 16 06 F6 | 	mov	arg03, #0
08618     04 34 B1 FD | 	call	#__system___basic_print_string
0861c     00 12 06 F6 | 	mov	arg01, #0
08620     0A 14 06 F6 | 	mov	arg02, #10
08624     00 16 06 F6 | 	mov	arg03, #0
08628     9C 33 B1 FD | 	call	#__system___basic_print_char
0862c     00 12 06 F6 | 	mov	arg01, #0
08630     18 80 B1 FD | 	call	#__system___getiolock_0442
08634     FD 00 68 FC | 	wrlong	#0, result1
08638                 | LR__0686
08638                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08638                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08638                 | ' return 0
08638     00 FA 05 F6 | 	mov	result1, #0
0863c     A7 F0 03 F6 | 	mov	ptra, fp
08640     B2 00 A0 FD | 	call	#popregs_
08644                 | _compile_goto_ret
08644     2D 00 64 FD | 	ret
08648                 | 
08648                 | ' 
08648                 | ' 
08648                 | ' 
08648                 | ' 
08648                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08648                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08648                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08648                 | ' 
08648                 | ' 
08648                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08648                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08648                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08648                 | ' 
08648                 | ' 
08648                 | ' function expr() as integer 
08648                 | _expr
08648     07 4A 05 F6 | 	mov	COUNT_, #7
0864c     A8 00 A0 FD | 	call	#pushregs_
08650                 | _expr_enter
08650     56 00 00 FF 
08654     C8 E5 05 F1 | 	add	objptr, ##44488
08658     F2 24 02 FB | 	rdlong	local04, objptr
0865c     03 24 66 F0 | 	shl	local04, #3
08660     02 00 00 FF 
08664     38 E4 85 F1 | 	sub	objptr, ##1080
08668     F2 24 02 F1 | 	add	local04, objptr
0866c     04 24 06 F1 | 	add	local04, #4
08670     12 27 02 FB | 	rdlong	local05, local04
08674                 | ' 
08674                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08674     FE 27 0E F2 | 	cmp	local05, #510 wz
08678     54 00 00 FF 
0867c     90 E5 85 F1 | 	sub	objptr, ##43408
08680     C4 00 90 5D |  if_ne	jmp	#LR__0690
08684     1D 1E 06 F6 | 	mov	local01, #29
08688     FF 22 06 F6 | 	mov	local03, #255
0868c     0F 29 02 F6 | 	mov	local06, local01
08690     10 2B 02 F6 | 	mov	local07, local02
08694     11 1F 02 F6 | 	mov	local01, local03
08698     6A 00 00 FF 
0869c     00 E4 05 F1 | 	add	objptr, ##54272
086a0     F2 26 02 FB | 	rdlong	local05, objptr
086a4     13 25 02 F6 | 	mov	local04, local05
086a8     01 24 66 F0 | 	shl	local04, #1
086ac     13 25 02 F1 | 	add	local04, local05
086b0     02 24 66 F0 | 	shl	local04, #2
086b4     03 00 00 FF 
086b8     00 E4 85 F1 | 	sub	objptr, ##1536
086bc     F2 24 02 F1 | 	add	local04, objptr
086c0     12 29 62 FC | 	wrlong	local06, local04
086c4     03 00 00 FF 
086c8     00 E4 05 F1 | 	add	objptr, ##1536
086cc     F2 28 02 FB | 	rdlong	local06, objptr
086d0     14 27 02 F6 | 	mov	local05, local06
086d4     01 26 66 F0 | 	shl	local05, #1
086d8     14 27 02 F1 | 	add	local05, local06
086dc     02 26 66 F0 | 	shl	local05, #2
086e0     03 00 00 FF 
086e4     00 E4 85 F1 | 	sub	objptr, ##1536
086e8     F2 26 02 F1 | 	add	local05, objptr
086ec     04 26 06 F1 | 	add	local05, #4
086f0     13 2B 62 FC | 	wrlong	local07, local05
086f4     03 00 00 FF 
086f8     00 E4 05 F1 | 	add	objptr, ##1536
086fc     F2 2A 02 FB | 	rdlong	local07, objptr
08700     15 29 02 F6 | 	mov	local06, local07
08704     01 28 66 F0 | 	shl	local06, #1
08708     15 29 02 F1 | 	add	local06, local07
0870c     02 28 66 F0 | 	shl	local06, #2
08710     03 00 00 FF 
08714     00 E4 85 F1 | 	sub	objptr, ##1536
08718     F2 28 02 F1 | 	add	local06, objptr
0871c     08 28 06 F1 | 	add	local06, #8
08720     14 1F 62 FC | 	wrlong	local01, local06
08724     03 00 00 FF 
08728     00 E4 05 F1 | 	add	objptr, ##1536
0872c     F2 28 02 FB | 	rdlong	local06, objptr
08730     01 28 06 F1 | 	add	local06, #1
08734     F2 28 62 FC | 	wrlong	local06, objptr
08738     6A 00 00 FF 
0873c     00 E4 85 F1 | 	sub	objptr, ##54272
08740     1D FA 05 F6 | 	mov	result1, #29
08744     54 01 90 FD | 	jmp	#LR__0693
08748                 | LR__0690
08748     00 1E 06 F6 | 	mov	local01, #0
0874c     58 01 B0 FD | 	call	#_addsub
08750     56 00 00 FF 
08754     C8 E5 05 F1 | 	add	objptr, ##44488
08758     F2 24 02 FB | 	rdlong	local04, objptr
0875c     03 24 66 F0 | 	shl	local04, #3
08760     02 00 00 FF 
08764     38 E4 85 F1 | 	sub	objptr, ##1080
08768     F2 24 02 F1 | 	add	local04, objptr
0876c     04 24 06 F1 | 	add	local04, #4
08770     12 27 02 FB | 	rdlong	local05, local04
08774                 | ' t3.result.uresult=0
08774                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08774                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08774                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08774     54 00 00 FF 
08778     90 E5 85 F1 | 	sub	objptr, ##43408
0877c                 | LR__0691
0877c     1B 26 0E F2 | 	cmp	local05, #27 wz
08780     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08784     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08788     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0878c     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08790     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08794     00 01 90 5D |  if_ne	jmp	#LR__0692
08798     56 00 00 FF 
0879c     C8 E5 05 F1 | 	add	objptr, ##44488
087a0     F2 28 02 FB | 	rdlong	local06, objptr
087a4     01 28 06 F1 | 	add	local06, #1
087a8     F2 28 62 FC | 	wrlong	local06, objptr
087ac     56 00 00 FF 
087b0     C8 E5 85 F1 | 	sub	objptr, ##44488
087b4     F0 00 B0 FD | 	call	#_addsub
087b8     13 23 02 F6 | 	mov	local03, local05
087bc     0F 29 02 F6 | 	mov	local06, local01
087c0     10 2B 02 F6 | 	mov	local07, local02
087c4     11 27 02 F6 | 	mov	local05, local03
087c8     6A 00 00 FF 
087cc     00 E4 05 F1 | 	add	objptr, ##54272
087d0     F2 24 02 FB | 	rdlong	local04, objptr
087d4     12 FB 01 F6 | 	mov	result1, local04
087d8     01 FA 65 F0 | 	shl	result1, #1
087dc     12 FB 01 F1 | 	add	result1, local04
087e0     02 FA 65 F0 | 	shl	result1, #2
087e4     03 00 00 FF 
087e8     00 E4 85 F1 | 	sub	objptr, ##1536
087ec     F2 FA 01 F1 | 	add	result1, objptr
087f0     FD 28 62 FC | 	wrlong	local06, result1
087f4     03 00 00 FF 
087f8     00 E4 05 F1 | 	add	objptr, ##1536
087fc     F2 28 02 FB | 	rdlong	local06, objptr
08800     14 25 02 F6 | 	mov	local04, local06
08804     01 24 66 F0 | 	shl	local04, #1
08808     14 25 02 F1 | 	add	local04, local06
0880c     02 24 66 F0 | 	shl	local04, #2
08810     03 00 00 FF 
08814     00 E4 85 F1 | 	sub	objptr, ##1536
08818     F2 24 02 F1 | 	add	local04, objptr
0881c     04 24 06 F1 | 	add	local04, #4
08820     12 2B 62 FC | 	wrlong	local07, local04
08824     03 00 00 FF 
08828     00 E4 05 F1 | 	add	objptr, ##1536
0882c     F2 2A 02 FB | 	rdlong	local07, objptr
08830     15 29 02 F6 | 	mov	local06, local07
08834     01 28 66 F0 | 	shl	local06, #1
08838     15 29 02 F1 | 	add	local06, local07
0883c     02 28 66 F0 | 	shl	local06, #2
08840     03 00 00 FF 
08844     00 E4 85 F1 | 	sub	objptr, ##1536
08848     F2 28 02 F1 | 	add	local06, objptr
0884c     08 28 06 F1 | 	add	local06, #8
08850     14 27 62 FC | 	wrlong	local05, local06
08854     03 00 00 FF 
08858     00 E4 05 F1 | 	add	objptr, ##1536
0885c     F2 28 02 FB | 	rdlong	local06, objptr
08860     01 28 06 F1 | 	add	local06, #1
08864     F2 28 62 FC | 	wrlong	local06, objptr
08868     13 00 00 FF 
0886c     38 E4 85 F1 | 	sub	objptr, ##9784
08870     F2 24 02 FB | 	rdlong	local04, objptr
08874     03 24 66 F0 | 	shl	local04, #3
08878     02 00 00 FF 
0887c     38 E4 85 F1 | 	sub	objptr, ##1080
08880     F2 24 02 F1 | 	add	local04, objptr
08884     04 24 06 F1 | 	add	local04, #4
08888     12 27 02 FB | 	rdlong	local05, local04
0888c     54 00 00 FF 
08890     90 E5 85 F1 | 	sub	objptr, ##43408
08894     E4 FE 9F FD | 	jmp	#LR__0691
08898                 | LR__0692
08898                 | ' return 0  
08898     00 FA 05 F6 | 	mov	result1, #0
0889c                 | LR__0693
0889c     A7 F0 03 F6 | 	mov	ptra, fp
088a0     B2 00 A0 FD | 	call	#popregs_
088a4                 | _expr_ret
088a4     2D 00 64 FD | 	ret
088a8                 | 
088a8                 | ' 
088a8                 | ' 
088a8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
088a8                 | ' 
088a8                 | ' function addsub() as integer 
088a8                 | _addsub
088a8     07 4A 05 F6 | 	mov	COUNT_, #7
088ac     A8 00 A0 FD | 	call	#pushregs_
088b0                 | _addsub_enter
088b0     00 1E 06 F6 | 	mov	local01, #0
088b4     50 01 B0 FD | 	call	#_muldiv
088b8     56 00 00 FF 
088bc     C8 E5 05 F1 | 	add	objptr, ##44488
088c0     F2 24 02 FB | 	rdlong	local04, objptr
088c4     03 24 66 F0 | 	shl	local04, #3
088c8     02 00 00 FF 
088cc     38 E4 85 F1 | 	sub	objptr, ##1080
088d0     F2 24 02 F1 | 	add	local04, objptr
088d4     04 24 06 F1 | 	add	local04, #4
088d8     12 27 02 FB | 	rdlong	local05, local04
088dc                 | ' t3.result.uresult=0
088dc                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
088dc                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
088dc                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
088dc     54 00 00 FF 
088e0     90 E5 85 F1 | 	sub	objptr, ##43408
088e4                 | LR__0700
088e4     01 26 0E F2 | 	cmp	local05, #1 wz
088e8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
088ec     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
088f0     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
088f4     00 01 90 5D |  if_ne	jmp	#LR__0701
088f8     56 00 00 FF 
088fc     C8 E5 05 F1 | 	add	objptr, ##44488
08900     F2 24 02 FB | 	rdlong	local04, objptr
08904     01 24 06 F1 | 	add	local04, #1
08908     F2 24 62 FC | 	wrlong	local04, objptr
0890c     56 00 00 FF 
08910     C8 E5 85 F1 | 	sub	objptr, ##44488
08914     F0 00 B0 FD | 	call	#_muldiv
08918     13 23 02 F6 | 	mov	local03, local05
0891c     0F 29 02 F6 | 	mov	local06, local01
08920     10 2B 02 F6 | 	mov	local07, local02
08924     11 27 02 F6 | 	mov	local05, local03
08928     6A 00 00 FF 
0892c     00 E4 05 F1 | 	add	objptr, ##54272
08930     F2 24 02 FB | 	rdlong	local04, objptr
08934     12 FB 01 F6 | 	mov	result1, local04
08938     01 FA 65 F0 | 	shl	result1, #1
0893c     12 FB 01 F1 | 	add	result1, local04
08940     02 FA 65 F0 | 	shl	result1, #2
08944     03 00 00 FF 
08948     00 E4 85 F1 | 	sub	objptr, ##1536
0894c     F2 FA 01 F1 | 	add	result1, objptr
08950     FD 28 62 FC | 	wrlong	local06, result1
08954     03 00 00 FF 
08958     00 E4 05 F1 | 	add	objptr, ##1536
0895c     F2 28 02 FB | 	rdlong	local06, objptr
08960     14 25 02 F6 | 	mov	local04, local06
08964     01 24 66 F0 | 	shl	local04, #1
08968     14 25 02 F1 | 	add	local04, local06
0896c     02 24 66 F0 | 	shl	local04, #2
08970     03 00 00 FF 
08974     00 E4 85 F1 | 	sub	objptr, ##1536
08978     F2 24 02 F1 | 	add	local04, objptr
0897c     04 24 06 F1 | 	add	local04, #4
08980     12 2B 62 FC | 	wrlong	local07, local04
08984     03 00 00 FF 
08988     00 E4 05 F1 | 	add	objptr, ##1536
0898c     F2 2A 02 FB | 	rdlong	local07, objptr
08990     15 29 02 F6 | 	mov	local06, local07
08994     01 28 66 F0 | 	shl	local06, #1
08998     15 29 02 F1 | 	add	local06, local07
0899c     02 28 66 F0 | 	shl	local06, #2
089a0     03 00 00 FF 
089a4     00 E4 85 F1 | 	sub	objptr, ##1536
089a8     F2 28 02 F1 | 	add	local06, objptr
089ac     08 28 06 F1 | 	add	local06, #8
089b0     14 27 62 FC | 	wrlong	local05, local06
089b4     03 00 00 FF 
089b8     00 E4 05 F1 | 	add	objptr, ##1536
089bc     F2 28 02 FB | 	rdlong	local06, objptr
089c0     01 28 06 F1 | 	add	local06, #1
089c4     F2 28 62 FC | 	wrlong	local06, objptr
089c8     13 00 00 FF 
089cc     38 E4 85 F1 | 	sub	objptr, ##9784
089d0     F2 24 02 FB | 	rdlong	local04, objptr
089d4     03 24 66 F0 | 	shl	local04, #3
089d8     02 00 00 FF 
089dc     38 E4 85 F1 | 	sub	objptr, ##1080
089e0     F2 24 02 F1 | 	add	local04, objptr
089e4     04 24 06 F1 | 	add	local04, #4
089e8     12 27 02 FB | 	rdlong	local05, local04
089ec     54 00 00 FF 
089f0     90 E5 85 F1 | 	sub	objptr, ##43408
089f4     EC FE 9F FD | 	jmp	#LR__0700
089f8                 | LR__0701
089f8                 | '   return 0
089f8     00 FA 05 F6 | 	mov	result1, #0
089fc     A7 F0 03 F6 | 	mov	ptra, fp
08a00     B2 00 A0 FD | 	call	#popregs_
08a04                 | _addsub_ret
08a04     2D 00 64 FD | 	ret
08a08                 | 
08a08                 | ' 
08a08                 | ' sub muldiv()
08a08                 | _muldiv
08a08     08 4A 05 F6 | 	mov	COUNT_, #8
08a0c     A8 00 A0 FD | 	call	#pushregs_
08a10                 | _muldiv_enter
08a10     00 1E 06 F6 | 	mov	local01, #0
08a14     58 01 B0 FD | 	call	#_getvalue
08a18     56 00 00 FF 
08a1c     C8 E5 05 F1 | 	add	objptr, ##44488
08a20     F2 24 02 FB | 	rdlong	local04, objptr
08a24     03 24 66 F0 | 	shl	local04, #3
08a28     02 00 00 FF 
08a2c     38 E4 85 F1 | 	sub	objptr, ##1080
08a30     F2 24 02 F1 | 	add	local04, objptr
08a34     04 24 06 F1 | 	add	local04, #4
08a38     12 27 02 FB | 	rdlong	local05, local04
08a3c                 | ' t3.result.uresult=0
08a3c                 | ' getvalue()    
08a3c                 | ' op = lparts(ct).token
08a3c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08a3c     54 00 00 FF 
08a40     90 E5 85 F1 | 	sub	objptr, ##43408
08a44                 | LR__0710
08a44     05 26 0E F2 | 	cmp	local05, #5 wz
08a48     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
08a4c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
08a50     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08a54     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08a58     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
08a5c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
08a60     00 01 90 5D |  if_ne	jmp	#LR__0711
08a64     56 00 00 FF 
08a68     C8 E5 05 F1 | 	add	objptr, ##44488
08a6c     F2 24 02 FB | 	rdlong	local04, objptr
08a70     01 24 06 F1 | 	add	local04, #1
08a74     F2 24 62 FC | 	wrlong	local04, objptr
08a78     56 00 00 FF 
08a7c     C8 E5 85 F1 | 	sub	objptr, ##44488
08a80     EC 00 B0 FD | 	call	#_getvalue
08a84     13 23 02 F6 | 	mov	local03, local05
08a88     0F 29 02 F6 | 	mov	local06, local01
08a8c     10 2B 02 F6 | 	mov	local07, local02
08a90     11 27 02 F6 | 	mov	local05, local03
08a94     6A 00 00 FF 
08a98     00 E4 05 F1 | 	add	objptr, ##54272
08a9c     F2 24 02 FB | 	rdlong	local04, objptr
08aa0     12 2D 02 F6 | 	mov	local08, local04
08aa4     01 2C 66 F0 | 	shl	local08, #1
08aa8     12 2D 02 F1 | 	add	local08, local04
08aac     02 2C 66 F0 | 	shl	local08, #2
08ab0     03 00 00 FF 
08ab4     00 E4 85 F1 | 	sub	objptr, ##1536
08ab8     F2 2C 02 F1 | 	add	local08, objptr
08abc     16 29 62 FC | 	wrlong	local06, local08
08ac0     03 00 00 FF 
08ac4     00 E4 05 F1 | 	add	objptr, ##1536
08ac8     F2 2C 02 FB | 	rdlong	local08, objptr
08acc     16 29 02 F6 | 	mov	local06, local08
08ad0     01 28 66 F0 | 	shl	local06, #1
08ad4     16 29 02 F1 | 	add	local06, local08
08ad8     02 28 66 F0 | 	shl	local06, #2
08adc     03 00 00 FF 
08ae0     00 E4 85 F1 | 	sub	objptr, ##1536
08ae4     F2 28 02 F1 | 	add	local06, objptr
08ae8     04 28 06 F1 | 	add	local06, #4
08aec     14 2B 62 FC | 	wrlong	local07, local06
08af0     03 00 00 FF 
08af4     00 E4 05 F1 | 	add	objptr, ##1536
08af8     F2 2C 02 FB | 	rdlong	local08, objptr
08afc     16 2B 02 F6 | 	mov	local07, local08
08b00     01 2A 66 F0 | 	shl	local07, #1
08b04     16 2B 02 F1 | 	add	local07, local08
08b08     02 2A 66 F0 | 	shl	local07, #2
08b0c     03 00 00 FF 
08b10     00 E4 85 F1 | 	sub	objptr, ##1536
08b14     F2 2A 02 F1 | 	add	local07, objptr
08b18     08 2A 06 F1 | 	add	local07, #8
08b1c     15 27 62 FC | 	wrlong	local05, local07
08b20     03 00 00 FF 
08b24     00 E4 05 F1 | 	add	objptr, ##1536
08b28     F2 28 02 FB | 	rdlong	local06, objptr
08b2c     01 28 06 F1 | 	add	local06, #1
08b30     F2 28 62 FC | 	wrlong	local06, objptr
08b34     13 00 00 FF 
08b38     38 E4 85 F1 | 	sub	objptr, ##9784
08b3c     F2 24 02 FB | 	rdlong	local04, objptr
08b40     03 24 66 F0 | 	shl	local04, #3
08b44     02 00 00 FF 
08b48     38 E4 85 F1 | 	sub	objptr, ##1080
08b4c     F2 24 02 F1 | 	add	local04, objptr
08b50     04 24 06 F1 | 	add	local04, #4
08b54     12 27 02 FB | 	rdlong	local05, local04
08b58     54 00 00 FF 
08b5c     90 E5 85 F1 | 	sub	objptr, ##43408
08b60     E0 FE 9F FD | 	jmp	#LR__0710
08b64                 | LR__0711
08b64     A7 F0 03 F6 | 	mov	ptra, fp
08b68     B2 00 A0 FD | 	call	#popregs_
08b6c                 | _muldiv_ret
08b6c     2D 00 64 FD | 	ret
08b70                 | 
08b70                 | ' 
08b70                 | ' sub getvalue() 
08b70                 | _getvalue
08b70     0B 4A 05 F6 | 	mov	COUNT_, #11
08b74     A8 00 A0 FD | 	call	#pushregs_
08b78                 | _getvalue_enter
08b78     01 24 06 F6 | 	mov	local04, #1
08b7c     00 1E 06 F6 | 	mov	local01, #0
08b80     1D 22 06 F6 | 	mov	local03, #29
08b84     56 00 00 FF 
08b88     C8 E5 05 F1 | 	add	objptr, ##44488
08b8c     F2 16 02 FB | 	rdlong	arg03, objptr
08b90     03 16 66 F0 | 	shl	arg03, #3
08b94     02 00 00 FF 
08b98     38 E4 85 F1 | 	sub	objptr, ##1080
08b9c     F2 16 02 F1 | 	add	arg03, objptr
08ba0     04 16 06 F1 | 	add	arg03, #4
08ba4     0B 27 02 FB | 	rdlong	local05, arg03
08ba8                 | ' m=1
08ba8                 | ' t1.result.uresult=0: t1.result_type=result_uint
08ba8                 | ' op=lparts(ct).token
08ba8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
08ba8     02 26 0E F2 | 	cmp	local05, #2 wz
08bac     54 00 00 FF 
08bb0     90 E5 85 F1 | 	sub	objptr, ##43408
08bb4     38 00 90 5D |  if_ne	jmp	#LR__0720
08bb8     01 24 66 F6 | 	neg	local04, #1
08bbc     56 00 00 FF 
08bc0     C8 E5 05 F1 | 	add	objptr, ##44488
08bc4     F2 26 02 FB | 	rdlong	local05, objptr
08bc8     01 26 06 F1 | 	add	local05, #1
08bcc     F2 26 62 FC | 	wrlong	local05, objptr
08bd0     03 26 66 F0 | 	shl	local05, #3
08bd4     02 00 00 FF 
08bd8     38 E4 85 F1 | 	sub	objptr, ##1080
08bdc     F2 26 02 F1 | 	add	local05, objptr
08be0     04 26 06 F1 | 	add	local05, #4
08be4     13 27 02 FB | 	rdlong	local05, local05
08be8     54 00 00 FF 
08bec     90 E5 85 F1 | 	sub	objptr, ##43408
08bf0                 | LR__0720
08bf0                 | ' select case op
08bf0     01 00 00 FF 
08bf4     00 26 0E F2 | 	cmp	local05, ##512 wz
08bf8     3C 00 90 AD |  if_e	jmp	#LR__0721
08bfc     01 00 00 FF 
08c00     01 26 0E F2 | 	cmp	local05, ##513 wz
08c04     88 01 90 AD |  if_e	jmp	#LR__0724
08c08     01 00 00 FF 
08c0c     02 26 0E F2 | 	cmp	local05, ##514 wz
08c10     84 02 90 AD |  if_e	jmp	#LR__0725
08c14     01 00 00 FF 
08c18     03 26 0E F2 | 	cmp	local05, ##515 wz
08c1c     E8 03 90 AD |  if_e	jmp	#LR__0728
08c20     01 00 00 FF 
08c24     04 26 0E F2 | 	cmp	local05, ##516 wz
08c28     E0 05 90 AD |  if_e	jmp	#LR__0733
08c2c     15 26 0E F2 | 	cmp	local05, #21 wz
08c30     00 06 90 AD |  if_e	jmp	#LR__0734
08c34     70 06 90 FD | 	jmp	#LR__0735
08c38                 | LR__0721
08c38                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08c38     01 24 0E F2 | 	cmp	local04, #1 wz
08c3c     3C 00 90 5D |  if_ne	jmp	#LR__0722
08c40     56 00 00 FF 
08c44     C8 E5 05 F1 | 	add	objptr, ##44488
08c48     F2 26 02 FB | 	rdlong	local05, objptr
08c4c     03 26 66 F0 | 	shl	local05, #3
08c50     02 00 00 FF 
08c54     38 E4 85 F1 | 	sub	objptr, ##1080
08c58     F2 26 02 F1 | 	add	local05, objptr
08c5c     13 13 02 FB | 	rdlong	arg01, local05
08c60     00 14 06 F6 | 	mov	arg02, #0
08c64     54 00 00 FF 
08c68     90 E5 85 F1 | 	sub	objptr, ##43408
08c6c     44 52 B1 FD | 	call	#__system____builtin_atoi
08c70     FD 24 02 FD | 	qmul	local04, result1
08c74     18 1E 62 FD | 	getqx	local01
08c78     1C 22 06 F6 | 	mov	local03, #28
08c7c                 | LR__0722
08c7c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08c7c     FF FF 7F FF 
08c80     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08c84     3C 00 90 5D |  if_ne	jmp	#LR__0723
08c88     56 00 00 FF 
08c8c     C8 E5 05 F1 | 	add	objptr, ##44488
08c90     F2 26 02 FB | 	rdlong	local05, objptr
08c94     03 26 66 F0 | 	shl	local05, #3
08c98     02 00 00 FF 
08c9c     38 E4 85 F1 | 	sub	objptr, ##1080
08ca0     F2 26 02 F1 | 	add	local05, objptr
08ca4     13 13 02 FB | 	rdlong	arg01, local05
08ca8     00 14 06 F6 | 	mov	arg02, #0
08cac     54 00 00 FF 
08cb0     90 E5 85 F1 | 	sub	objptr, ##43408
08cb4     FC 51 B1 FD | 	call	#__system____builtin_atoi
08cb8     FD 24 02 FD | 	qmul	local04, result1
08cbc     18 1E 62 FD | 	getqx	local01
08cc0     1C 22 06 F6 | 	mov	local03, #28
08cc4                 | LR__0723
08cc4     0F 29 02 F6 | 	mov	local06, local01
08cc8     10 2B 02 F6 | 	mov	local07, local02
08ccc     11 27 02 F6 | 	mov	local05, local03
08cd0     6A 00 00 FF 
08cd4     00 E4 05 F1 | 	add	objptr, ##54272
08cd8     F2 1E 02 FB | 	rdlong	local01, objptr
08cdc     0F 25 02 F6 | 	mov	local04, local01
08ce0     01 24 66 F0 | 	shl	local04, #1
08ce4     0F 25 02 F1 | 	add	local04, local01
08ce8     02 24 66 F0 | 	shl	local04, #2
08cec     03 00 00 FF 
08cf0     00 E4 85 F1 | 	sub	objptr, ##1536
08cf4     F2 24 02 F1 | 	add	local04, objptr
08cf8     12 29 62 FC | 	wrlong	local06, local04
08cfc     03 00 00 FF 
08d00     00 E4 05 F1 | 	add	objptr, ##1536
08d04     F2 28 02 FB | 	rdlong	local06, objptr
08d08     14 1F 02 F6 | 	mov	local01, local06
08d0c     01 1E 66 F0 | 	shl	local01, #1
08d10     14 1F 02 F1 | 	add	local01, local06
08d14     02 1E 66 F0 | 	shl	local01, #2
08d18     03 00 00 FF 
08d1c     00 E4 85 F1 | 	sub	objptr, ##1536
08d20     F2 1E 02 F1 | 	add	local01, objptr
08d24     04 1E 06 F1 | 	add	local01, #4
08d28     0F 2B 62 FC | 	wrlong	local07, local01
08d2c     03 00 00 FF 
08d30     00 E4 05 F1 | 	add	objptr, ##1536
08d34     F2 2A 02 FB | 	rdlong	local07, objptr
08d38     15 29 02 F6 | 	mov	local06, local07
08d3c     01 28 66 F0 | 	shl	local06, #1
08d40     15 29 02 F1 | 	add	local06, local07
08d44     02 28 66 F0 | 	shl	local06, #2
08d48     03 00 00 FF 
08d4c     00 E4 85 F1 | 	sub	objptr, ##1536
08d50     F2 28 02 F1 | 	add	local06, objptr
08d54     08 28 06 F1 | 	add	local06, #8
08d58     14 27 62 FC | 	wrlong	local05, local06
08d5c     03 00 00 FF 
08d60     00 E4 05 F1 | 	add	objptr, ##1536
08d64     F2 28 02 FB | 	rdlong	local06, objptr
08d68     01 28 06 F1 | 	add	local06, #1
08d6c     F2 28 62 FC | 	wrlong	local06, objptr
08d70     13 00 00 FF 
08d74     38 E4 85 F1 | 	sub	objptr, ##9784
08d78     F2 28 02 FB | 	rdlong	local06, objptr
08d7c     01 28 06 F1 | 	add	local06, #1
08d80     F2 28 62 FC | 	wrlong	local06, objptr
08d84     56 00 00 FF 
08d88     C8 E5 85 F1 | 	sub	objptr, ##44488
08d8c     3C 05 90 FD | 	jmp	#LR__0736
08d90                 | LR__0724
08d90     56 00 00 FF 
08d94     C8 E5 05 F1 | 	add	objptr, ##44488
08d98     F2 28 02 FB | 	rdlong	local06, objptr
08d9c     03 28 66 F0 | 	shl	local06, #3
08da0     02 00 00 FF 
08da4     38 E4 85 F1 | 	sub	objptr, ##1080
08da8     F2 28 02 F1 | 	add	local06, objptr
08dac     14 13 02 FB | 	rdlong	arg01, local06
08db0     00 14 06 F6 | 	mov	arg02, #0
08db4     54 00 00 FF 
08db8     90 E5 85 F1 | 	sub	objptr, ##43408
08dbc     F4 50 B1 FD | 	call	#__system____builtin_atoi
08dc0     FD 24 02 FD | 	qmul	local04, result1
08dc4     6A 00 00 FF 
08dc8     00 E4 05 F1 | 	add	objptr, ##54272
08dcc     F2 28 02 FB | 	rdlong	local06, objptr
08dd0     14 2D 02 F6 | 	mov	local08, local06
08dd4     01 2C 66 F0 | 	shl	local08, #1
08dd8     14 2D 02 F1 | 	add	local08, local06
08ddc     02 2C 66 F0 | 	shl	local08, #2
08de0     03 00 00 FF 
08de4     00 E4 85 F1 | 	sub	objptr, ##1536
08de8     F2 2C 02 F1 | 	add	local08, objptr
08dec     03 00 00 FF 
08df0     00 E4 05 F1 | 	add	objptr, ##1536
08df4     18 1E 62 FD | 	getqx	local01
08df8     1C 22 06 F6 | 	mov	local03, #28
08dfc     0F 29 02 F6 | 	mov	local06, local01
08e00     10 2B 02 F6 | 	mov	local07, local02
08e04     16 29 62 FC | 	wrlong	local06, local08
08e08     11 2D 02 F6 | 	mov	local08, local03
08e0c     F2 28 02 FB | 	rdlong	local06, objptr
08e10     14 27 02 F6 | 	mov	local05, local06
08e14     01 26 66 F0 | 	shl	local05, #1
08e18     14 27 02 F1 | 	add	local05, local06
08e1c     02 26 66 F0 | 	shl	local05, #2
08e20     03 00 00 FF 
08e24     00 E4 85 F1 | 	sub	objptr, ##1536
08e28     F2 26 02 F1 | 	add	local05, objptr
08e2c     04 26 06 F1 | 	add	local05, #4
08e30     13 2B 62 FC | 	wrlong	local07, local05
08e34     03 00 00 FF 
08e38     00 E4 05 F1 | 	add	objptr, ##1536
08e3c     F2 2A 02 FB | 	rdlong	local07, objptr
08e40     15 29 02 F6 | 	mov	local06, local07
08e44     01 28 66 F0 | 	shl	local06, #1
08e48     15 29 02 F1 | 	add	local06, local07
08e4c     02 28 66 F0 | 	shl	local06, #2
08e50     03 00 00 FF 
08e54     00 E4 85 F1 | 	sub	objptr, ##1536
08e58     F2 28 02 F1 | 	add	local06, objptr
08e5c     08 28 06 F1 | 	add	local06, #8
08e60     14 2D 62 FC | 	wrlong	local08, local06
08e64     03 00 00 FF 
08e68     00 E4 05 F1 | 	add	objptr, ##1536
08e6c     F2 28 02 FB | 	rdlong	local06, objptr
08e70     01 28 06 F1 | 	add	local06, #1
08e74     F2 28 62 FC | 	wrlong	local06, objptr
08e78     13 00 00 FF 
08e7c     38 E4 85 F1 | 	sub	objptr, ##9784
08e80     F2 28 02 FB | 	rdlong	local06, objptr
08e84     01 28 06 F1 | 	add	local06, #1
08e88     F2 28 62 FC | 	wrlong	local06, objptr
08e8c     56 00 00 FF 
08e90     C8 E5 85 F1 | 	sub	objptr, ##44488
08e94     34 04 90 FD | 	jmp	#LR__0736
08e98                 | LR__0725
08e98                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08e98     01 24 0E F2 | 	cmp	local04, #1 wz
08e9c     48 00 90 5D |  if_ne	jmp	#LR__0726
08ea0     00 C0 1F FF 
08ea4     00 28 06 F6 | 	mov	local06, ##1065353216
08ea8     56 00 00 FF 
08eac     C8 E5 05 F1 | 	add	objptr, ##44488
08eb0     F2 2C 02 FB | 	rdlong	local08, objptr
08eb4     03 2C 66 F0 | 	shl	local08, #3
08eb8     02 00 00 FF 
08ebc     38 E4 85 F1 | 	sub	objptr, ##1080
08ec0     F2 2C 02 F1 | 	add	local08, objptr
08ec4     16 13 02 FB | 	rdlong	arg01, local08
08ec8     54 00 00 FF 
08ecc     90 E5 85 F1 | 	sub	objptr, ##43408
08ed0     50 51 B1 FD | 	call	#__system____builtin_atof
08ed4     FD 14 02 F6 | 	mov	arg02, result1
08ed8     14 13 02 F6 | 	mov	arg01, local06
08edc     5C 49 B1 FD | 	call	#__system___float_mul
08ee0     FD 1E 02 F6 | 	mov	local01, result1
08ee4     1E 22 06 F6 | 	mov	local03, #30
08ee8                 | LR__0726
08ee8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08ee8     FF FF 7F FF 
08eec     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08ef0     48 00 90 5D |  if_ne	jmp	#LR__0727
08ef4     00 C0 5F FF 
08ef8     00 28 06 F6 | 	mov	local06, ##-1082130432
08efc     56 00 00 FF 
08f00     C8 E5 05 F1 | 	add	objptr, ##44488
08f04     F2 2C 02 FB | 	rdlong	local08, objptr
08f08     03 2C 66 F0 | 	shl	local08, #3
08f0c     02 00 00 FF 
08f10     38 E4 85 F1 | 	sub	objptr, ##1080
08f14     F2 2C 02 F1 | 	add	local08, objptr
08f18     16 13 02 FB | 	rdlong	arg01, local08
08f1c     54 00 00 FF 
08f20     90 E5 85 F1 | 	sub	objptr, ##43408
08f24     FC 50 B1 FD | 	call	#__system____builtin_atof
08f28     FD 14 02 F6 | 	mov	arg02, result1
08f2c     14 13 02 F6 | 	mov	arg01, local06
08f30     08 49 B1 FD | 	call	#__system___float_mul
08f34     FD 1E 02 F6 | 	mov	local01, result1
08f38     1E 22 06 F6 | 	mov	local03, #30
08f3c                 | LR__0727
08f3c     0F 29 02 F6 | 	mov	local06, local01
08f40     10 2B 02 F6 | 	mov	local07, local02
08f44     11 27 02 F6 | 	mov	local05, local03
08f48     6A 00 00 FF 
08f4c     00 E4 05 F1 | 	add	objptr, ##54272
08f50     F2 1E 02 FB | 	rdlong	local01, objptr
08f54     0F 2D 02 F6 | 	mov	local08, local01
08f58     01 2C 66 F0 | 	shl	local08, #1
08f5c     0F 2D 02 F1 | 	add	local08, local01
08f60     02 2C 66 F0 | 	shl	local08, #2
08f64     03 00 00 FF 
08f68     00 E4 85 F1 | 	sub	objptr, ##1536
08f6c     F2 2C 02 F1 | 	add	local08, objptr
08f70     16 29 62 FC | 	wrlong	local06, local08
08f74     03 00 00 FF 
08f78     00 E4 05 F1 | 	add	objptr, ##1536
08f7c     F2 2C 02 FB | 	rdlong	local08, objptr
08f80     16 29 02 F6 | 	mov	local06, local08
08f84     01 28 66 F0 | 	shl	local06, #1
08f88     16 29 02 F1 | 	add	local06, local08
08f8c     02 28 66 F0 | 	shl	local06, #2
08f90     03 00 00 FF 
08f94     00 E4 85 F1 | 	sub	objptr, ##1536
08f98     F2 28 02 F1 | 	add	local06, objptr
08f9c     04 28 06 F1 | 	add	local06, #4
08fa0     14 2B 62 FC | 	wrlong	local07, local06
08fa4     03 00 00 FF 
08fa8     00 E4 05 F1 | 	add	objptr, ##1536
08fac     F2 2C 02 FB | 	rdlong	local08, objptr
08fb0     16 2B 02 F6 | 	mov	local07, local08
08fb4     01 2A 66 F0 | 	shl	local07, #1
08fb8     16 2B 02 F1 | 	add	local07, local08
08fbc     02 2A 66 F0 | 	shl	local07, #2
08fc0     03 00 00 FF 
08fc4     00 E4 85 F1 | 	sub	objptr, ##1536
08fc8     F2 2A 02 F1 | 	add	local07, objptr
08fcc     08 2A 06 F1 | 	add	local07, #8
08fd0     15 27 62 FC | 	wrlong	local05, local07
08fd4     03 00 00 FF 
08fd8     00 E4 05 F1 | 	add	objptr, ##1536
08fdc     F2 28 02 FB | 	rdlong	local06, objptr
08fe0     01 28 06 F1 | 	add	local06, #1
08fe4     F2 28 62 FC | 	wrlong	local06, objptr
08fe8     13 00 00 FF 
08fec     38 E4 85 F1 | 	sub	objptr, ##9784
08ff0     F2 28 02 FB | 	rdlong	local06, objptr
08ff4     01 28 06 F1 | 	add	local06, #1
08ff8     F2 28 62 FC | 	wrlong	local06, objptr
08ffc     56 00 00 FF 
09000     C8 E5 85 F1 | 	sub	objptr, ##44488
09004     C4 02 90 FD | 	jmp	#LR__0736
09008                 | LR__0728
09008     1F 22 06 F6 | 	mov	local03, #31
0900c     56 00 00 FF 
09010     C8 E5 05 F1 | 	add	objptr, ##44488
09014     F2 16 02 FB | 	rdlong	arg03, objptr
09018     03 16 66 F0 | 	shl	arg03, #3
0901c     02 00 00 FF 
09020     38 E4 85 F1 | 	sub	objptr, ##1080
09024     F2 16 02 F1 | 	add	arg03, objptr
09028     0B 13 02 FB | 	rdlong	arg01, arg03
0902c     54 00 00 FF 
09030     90 E5 85 F1 | 	sub	objptr, ##43408
09034     09 2F 02 F6 | 	mov	local09, arg01
09038     97 06 48 FB | 	callpa	#(@LR__0730-@LR__0729)>>2,fcache_load_ptr_
0903c                 | LR__0729
0903c     17 FB C9 FA | 	rdbyte	result1, local09 wz
09040     01 2E 06 51 |  if_ne	add	local09, #1
09044     F4 FF 9F 5D |  if_ne	jmp	#LR__0729
09048                 | LR__0730
09048     09 2F 82 F1 | 	sub	local09, arg01
0904c     17 FB 01 F6 | 	mov	result1, local09
09050     7B 00 00 FF 
09054     48 E4 05 F1 | 	add	objptr, ##63048
09058     F2 FA 61 FC | 	wrlong	result1, objptr
0905c     4C E4 85 F1 | 	sub	objptr, #76
09060     F2 12 02 FB | 	rdlong	arg01, objptr
09064     FD 12 82 F1 | 	sub	arg01, result1
09068     04 12 86 F1 | 	sub	arg01, #4
0906c     03 12 26 F5 | 	andn	arg01, #3
09070     F2 12 62 FC | 	wrlong	arg01, objptr
09074     4C E4 05 F1 | 	add	objptr, #76
09078     F2 14 02 FB | 	rdlong	arg02, objptr
0907c     01 16 06 F6 | 	mov	arg03, #1
09080     00 18 06 F6 | 	mov	arg04, #0
09084     6F 00 00 FF 
09088     88 E5 85 F1 | 	sub	objptr, ##57224
0908c                 | '     return fill(addr, pattern, count, listPtr, 4)
0908c     04 1A 06 F6 | 	mov	arg05, #4
09090     54 12 B1 FD | 	call	#_psram_spin2_fill
09094                 | '     pslpoke memtop,l
09094                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09094     01 30 06 F6 | 	mov	local10, #1
09098     6F 00 00 FF 
0909c     88 E5 05 F1 | 	add	objptr, ##57224
090a0     F2 32 02 FB | 	rdlong	local11, objptr
090a4     7B 00 00 FF 
090a8     48 E4 85 F1 | 	sub	objptr, ##63048
090ac     01 32 06 F1 | 	add	local11, #1
090b0                 | LR__0731
090b0     19 31 52 F2 | 	cmps	local10, local11 wc
090b4     78 00 90 3D |  if_ae	jmp	#LR__0732
090b8     7A 00 00 FF 
090bc     FC E5 05 F1 | 	add	objptr, ##62972
090c0     F2 2A 02 FB | 	rdlong	local07, objptr
090c4     03 2A 06 F1 | 	add	local07, #3
090c8     18 2B 02 F1 | 	add	local07, local10
090cc     24 00 00 FF 
090d0     34 E4 85 F1 | 	sub	objptr, ##18484
090d4     F2 2C 02 FB | 	rdlong	local08, objptr
090d8     03 2C 66 F0 | 	shl	local08, #3
090dc     02 00 00 FF 
090e0     38 E4 85 F1 | 	sub	objptr, ##1080
090e4     F2 2C 02 F1 | 	add	local08, objptr
090e8     16 13 02 FB | 	rdlong	arg01, local08
090ec     18 15 02 F6 | 	mov	arg02, local10
090f0     01 16 06 F6 | 	mov	arg03, #1
090f4     54 00 00 FF 
090f8     90 E5 85 F1 | 	sub	objptr, ##43408
090fc     78 3D B1 FD | 	call	#__system__Mid_S
09100     FD 14 C2 FA | 	rdbyte	arg02, result1
09104     15 13 02 F6 | 	mov	arg01, local07
09108     01 16 06 F6 | 	mov	arg03, #1
0910c     00 18 06 F6 | 	mov	arg04, #0
09110     0B 00 00 FF 
09114     C0 E4 05 F1 | 	add	objptr, ##5824
09118                 | '     return fill(addr, pattern, count, listPtr, 1)
09118     01 1A 06 F6 | 	mov	arg05, #1
0911c     C8 11 B1 FD | 	call	#_psram_spin2_fill
09120     0B 00 00 FF 
09124     C0 E4 85 F1 | 	sub	objptr, ##5824
09128     01 30 06 F1 | 	add	local10, #1
0912c     80 FF 9F FD | 	jmp	#LR__0731
09130                 | LR__0732
09130     7A 00 00 FF 
09134     FC E5 05 F1 | 	add	objptr, ##62972
09138     F2 1E 02 FB | 	rdlong	local01, objptr
0913c     2B 22 06 F6 | 	mov	local03, #43
09140     0F 29 02 F6 | 	mov	local06, local01
09144     10 2B 02 F6 | 	mov	local07, local02
09148     11 33 02 F6 | 	mov	local11, local03
0914c     10 00 00 FF 
09150     FC E5 85 F1 | 	sub	objptr, ##8700
09154     F2 30 02 FB | 	rdlong	local10, objptr
09158     18 2D 02 F6 | 	mov	local08, local10
0915c     01 2C 66 F0 | 	shl	local08, #1
09160     18 2D 02 F1 | 	add	local08, local10
09164     02 2C 66 F0 | 	shl	local08, #2
09168     03 00 00 FF 
0916c     00 E4 85 F1 | 	sub	objptr, ##1536
09170     F2 2C 02 F1 | 	add	local08, objptr
09174     16 29 62 FC | 	wrlong	local06, local08
09178     03 00 00 FF 
0917c     00 E4 05 F1 | 	add	objptr, ##1536
09180     F2 30 02 FB | 	rdlong	local10, objptr
09184     18 2D 02 F6 | 	mov	local08, local10
09188     01 2C 66 F0 | 	shl	local08, #1
0918c     18 2D 02 F1 | 	add	local08, local10
09190     02 2C 66 F0 | 	shl	local08, #2
09194     03 00 00 FF 
09198     00 E4 85 F1 | 	sub	objptr, ##1536
0919c     F2 2C 02 F1 | 	add	local08, objptr
091a0     04 2C 06 F1 | 	add	local08, #4
091a4     16 2B 62 FC | 	wrlong	local07, local08
091a8     03 00 00 FF 
091ac     00 E4 05 F1 | 	add	objptr, ##1536
091b0     F2 30 02 FB | 	rdlong	local10, objptr
091b4     18 2D 02 F6 | 	mov	local08, local10
091b8     01 2C 66 F0 | 	shl	local08, #1
091bc     18 2D 02 F1 | 	add	local08, local10
091c0     02 2C 66 F0 | 	shl	local08, #2
091c4     03 00 00 FF 
091c8     00 E4 85 F1 | 	sub	objptr, ##1536
091cc     F2 2C 02 F1 | 	add	local08, objptr
091d0     08 2C 06 F1 | 	add	local08, #8
091d4     16 33 62 FC | 	wrlong	local11, local08
091d8     03 00 00 FF 
091dc     00 E4 05 F1 | 	add	objptr, ##1536
091e0     F2 28 02 FB | 	rdlong	local06, objptr
091e4     01 28 06 F1 | 	add	local06, #1
091e8     F2 28 62 FC | 	wrlong	local06, objptr
091ec     13 00 00 FF 
091f0     38 E4 85 F1 | 	sub	objptr, ##9784
091f4     F2 28 02 FB | 	rdlong	local06, objptr
091f8     01 28 06 F1 | 	add	local06, #1
091fc     F2 28 62 FC | 	wrlong	local06, objptr
09200     56 00 00 FF 
09204     C8 E5 85 F1 | 	sub	objptr, ##44488
09208     C0 00 90 FD | 	jmp	#LR__0736
0920c                 | LR__0733
0920c     12 13 02 F6 | 	mov	arg01, local04
09210     B8 03 B0 FD | 	call	#_getvar
09214     56 00 00 FF 
09218     C8 E5 05 F1 | 	add	objptr, ##44488
0921c     F2 28 02 FB | 	rdlong	local06, objptr
09220     01 28 06 F1 | 	add	local06, #1
09224     F2 28 62 FC | 	wrlong	local06, objptr
09228     56 00 00 FF 
0922c     C8 E5 85 F1 | 	sub	objptr, ##44488
09230     98 00 90 FD | 	jmp	#LR__0736
09234                 | LR__0734
09234     56 00 00 FF 
09238     C8 E5 05 F1 | 	add	objptr, ##44488
0923c     F2 28 02 FB | 	rdlong	local06, objptr
09240     01 28 06 F1 | 	add	local06, #1
09244     F2 28 62 FC | 	wrlong	local06, objptr
09248     56 00 00 FF 
0924c     C8 E5 85 F1 | 	sub	objptr, ##44488
09250     F4 F3 BF FD | 	call	#_expr
09254                 | '     ct+=1
09254                 | '     expr() 
09254                 | '     if lparts(ct).token=token_rpar then ct+=1
09254     56 00 00 FF 
09258     C8 E5 05 F1 | 	add	objptr, ##44488
0925c     F2 32 02 FB | 	rdlong	local11, objptr
09260     03 32 66 F0 | 	shl	local11, #3
09264     02 00 00 FF 
09268     38 E4 85 F1 | 	sub	objptr, ##1080
0926c     F2 32 02 F1 | 	add	local11, objptr
09270     04 32 06 F1 | 	add	local11, #4
09274     19 33 02 FB | 	rdlong	local11, local11
09278     14 32 0E F2 | 	cmp	local11, #20 wz
0927c     54 00 00 FF 
09280     90 E5 85 F1 | 	sub	objptr, ##43408
09284     44 00 90 5D |  if_ne	jmp	#LR__0736
09288     56 00 00 FF 
0928c     C8 E5 05 F1 | 	add	objptr, ##44488
09290     F2 28 02 FB | 	rdlong	local06, objptr
09294     01 28 06 F1 | 	add	local06, #1
09298     F2 28 62 FC | 	wrlong	local06, objptr
0929c     56 00 00 FF 
092a0     C8 E5 85 F1 | 	sub	objptr, ##44488
092a4     24 00 90 FD | 	jmp	#LR__0736
092a8                 | LR__0735
092a8     12 13 02 F6 | 	mov	arg01, local04
092ac     28 00 B0 FD | 	call	#_getfun
092b0     56 00 00 FF 
092b4     C8 E5 05 F1 | 	add	objptr, ##44488
092b8     F2 28 02 FB | 	rdlong	local06, objptr
092bc     01 28 06 F1 | 	add	local06, #1
092c0     F2 28 62 FC | 	wrlong	local06, objptr
092c4     56 00 00 FF 
092c8     C8 E5 85 F1 | 	sub	objptr, ##44488
092cc                 | LR__0736
092cc     A7 F0 03 F6 | 	mov	ptra, fp
092d0     B2 00 A0 FD | 	call	#popregs_
092d4                 | _getvalue_ret
092d4     2D 00 64 FD | 	ret
092d8                 | 
092d8                 | ' 
092d8                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
092d8                 | _getfun
092d8     0A 4A 05 F6 | 	mov	COUNT_, #10
092dc     A8 00 A0 FD | 	call	#pushregs_
092e0                 | _getfun_enter
092e0     09 25 02 F6 | 	mov	local04, arg01
092e4     56 00 00 FF 
092e8     C8 E5 05 F1 | 	add	objptr, ##44488
092ec     F2 26 02 FB | 	rdlong	local05, objptr
092f0     13 29 02 F6 | 	mov	local06, local05
092f4     00 2A 06 F6 | 	mov	local07, #0
092f8                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
092f8                 | ' oldct=ct
092f8                 | ' numpar=0
092f8                 | '   
092f8                 | ' if lparts(ct+1).token=token_lpar then
092f8     01 26 06 F1 | 	add	local05, #1
092fc     03 26 66 F0 | 	shl	local05, #3
09300     02 00 00 FF 
09304     38 E4 85 F1 | 	sub	objptr, ##1080
09308     F2 26 02 F1 | 	add	local05, objptr
0930c     04 26 06 F1 | 	add	local05, #4
09310     13 27 02 FB | 	rdlong	local05, local05
09314     15 26 0E F2 | 	cmp	local05, #21 wz
09318     54 00 00 FF 
0931c     90 E5 85 F1 | 	sub	objptr, ##43408
09320     08 01 90 5D |  if_ne	jmp	#LR__0744
09324     56 00 00 FF 
09328     C8 E5 05 F1 | 	add	objptr, ##44488
0932c     F2 2C 02 FB | 	rdlong	local08, objptr
09330     01 2C 06 F1 | 	add	local08, #1
09334     F2 2C 62 FC | 	wrlong	local08, objptr
09338     56 00 00 FF 
0933c     C8 E5 85 F1 | 	sub	objptr, ##44488
09340                 | '   ct+=1 											' omit this lpar, this is for expr list
09340                 | '   do
09340                 | LR__0740
09340     56 00 00 FF 
09344     C8 E5 05 F1 | 	add	objptr, ##44488
09348     F2 26 02 FB | 	rdlong	local05, objptr
0934c     01 26 06 F1 | 	add	local05, #1
09350     F2 26 62 FC | 	wrlong	local05, objptr
09354                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09354                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09354     03 26 66 F0 | 	shl	local05, #3
09358     02 00 00 FF 
0935c     38 E4 85 F1 | 	sub	objptr, ##1080
09360     F2 26 02 F1 | 	add	local05, objptr
09364     04 26 06 F1 | 	add	local05, #4
09368     13 2D 02 FB | 	rdlong	local08, local05
0936c     15 2C 0E F2 | 	cmp	local08, #21 wz
09370     54 00 00 FF 
09374     90 E5 85 F1 | 	sub	objptr, ##43408
09378     40 00 90 5D |  if_ne	jmp	#LR__0741
0937c     56 00 00 FF 
09380     C8 E5 05 F1 | 	add	objptr, ##44488
09384     F2 2C 02 FB | 	rdlong	local08, objptr
09388     01 2C 06 F1 | 	add	local08, #1
0938c     F2 2C 62 FC | 	wrlong	local08, objptr
09390     56 00 00 FF 
09394     C8 E5 85 F1 | 	sub	objptr, ##44488
09398     AC F2 BF FD | 	call	#_expr
0939c     56 00 00 FF 
093a0     C8 E5 05 F1 | 	add	objptr, ##44488
093a4     F2 2C 02 FB | 	rdlong	local08, objptr
093a8     01 2C 06 F1 | 	add	local08, #1
093ac     F2 2C 62 FC | 	wrlong	local08, objptr
093b0     56 00 00 FF 
093b4     C8 E5 85 F1 | 	sub	objptr, ##44488
093b8     04 00 90 FD | 	jmp	#LR__0742
093bc                 | LR__0741
093bc     88 F2 BF FD | 	call	#_expr
093c0                 | LR__0742
093c0     01 2A 06 F1 | 	add	local07, #1
093c4     56 00 00 FF 
093c8     C8 E5 05 F1 | 	add	objptr, ##44488
093cc     F2 26 02 FB | 	rdlong	local05, objptr
093d0     03 26 66 F0 | 	shl	local05, #3
093d4     02 00 00 FF 
093d8     38 E4 85 F1 | 	sub	objptr, ##1080
093dc     F2 26 02 F1 | 	add	local05, objptr
093e0     04 26 06 F1 | 	add	local05, #4
093e4     13 2D 02 FB | 	rdlong	local08, local05
093e8     14 2C 0E F2 | 	cmp	local08, #20 wz
093ec     54 00 00 FF 
093f0     90 E5 85 F1 | 	sub	objptr, ##43408
093f4     34 00 90 AD |  if_e	jmp	#LR__0743
093f8     56 00 00 FF 
093fc     C8 E5 05 F1 | 	add	objptr, ##44488
09400     F2 2C 02 FB | 	rdlong	local08, objptr
09404     03 2C 66 F0 | 	shl	local08, #3
09408     02 00 00 FF 
0940c     38 E4 85 F1 | 	sub	objptr, ##1080
09410     F2 2C 02 F1 | 	add	local08, objptr
09414     04 2C 06 F1 | 	add	local08, #4
09418     16 2D 02 FB | 	rdlong	local08, local08
0941c     FE 2D 0E F2 | 	cmp	local08, #510 wz
09420     54 00 00 FF 
09424     90 E5 85 F1 | 	sub	objptr, ##43408
09428     14 FF 9F 5D |  if_ne	jmp	#LR__0740
0942c                 | LR__0743
0942c                 | LR__0744
0942c     15 1F 02 F6 | 	mov	local01, local07
09430     03 28 66 F0 | 	shl	local06, #3
09434     54 00 00 FF 
09438     90 E5 05 F1 | 	add	objptr, ##43408
0943c     F2 28 02 F1 | 	add	local06, objptr
09440     04 28 06 F1 | 	add	local06, #4
09444     14 23 02 FB | 	rdlong	local03, local06
09448     0F 2D 02 F6 | 	mov	local08, local01
0944c     10 2B 02 F6 | 	mov	local07, local02
09450     11 29 02 F6 | 	mov	local06, local03
09454     15 00 00 FF 
09458     70 E4 05 F1 | 	add	objptr, ##10864
0945c     F2 26 02 FB | 	rdlong	local05, objptr
09460     13 13 02 F6 | 	mov	arg01, local05
09464     01 12 66 F0 | 	shl	arg01, #1
09468     13 13 02 F1 | 	add	arg01, local05
0946c     02 12 66 F0 | 	shl	arg01, #2
09470     03 00 00 FF 
09474     00 E4 85 F1 | 	sub	objptr, ##1536
09478     F2 12 02 F1 | 	add	arg01, objptr
0947c     09 2D 62 FC | 	wrlong	local08, arg01
09480     03 00 00 FF 
09484     00 E4 05 F1 | 	add	objptr, ##1536
09488     F2 2C 02 FB | 	rdlong	local08, objptr
0948c     16 2F 02 F6 | 	mov	local09, local08
09490     01 2E 66 F0 | 	shl	local09, #1
09494     16 2F 02 F1 | 	add	local09, local08
09498     02 2E 66 F0 | 	shl	local09, #2
0949c     03 00 00 FF 
094a0     00 E4 85 F1 | 	sub	objptr, ##1536
094a4     F2 2E 02 F1 | 	add	local09, objptr
094a8     04 2E 06 F1 | 	add	local09, #4
094ac     17 2B 62 FC | 	wrlong	local07, local09
094b0     03 00 00 FF 
094b4     00 E4 05 F1 | 	add	objptr, ##1536
094b8     F2 2C 02 FB | 	rdlong	local08, objptr
094bc     16 31 02 F6 | 	mov	local10, local08
094c0     01 30 66 F0 | 	shl	local10, #1
094c4     16 31 02 F1 | 	add	local10, local08
094c8     02 30 66 F0 | 	shl	local10, #2
094cc     03 00 00 FF 
094d0     00 E4 85 F1 | 	sub	objptr, ##1536
094d4     F2 30 02 F1 | 	add	local10, objptr
094d8     08 30 06 F1 | 	add	local10, #8
094dc     18 29 62 FC | 	wrlong	local06, local10
094e0     03 00 00 FF 
094e4     00 E4 05 F1 | 	add	objptr, ##1536
094e8     F2 2C 02 FB | 	rdlong	local08, objptr
094ec     01 2C 06 F1 | 	add	local08, #1
094f0     F2 2C 62 FC | 	wrlong	local08, objptr
094f4     6A 00 00 FF 
094f8     00 E4 85 F1 | 	sub	objptr, ##54272
094fc                 | ' 
094fc                 | ' t2.result.uresult=numpar
094fc                 | ' 
094fc                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
094fc                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
094fc                 | ' 
094fc                 | '   
094fc                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
094fc     FF FF 7F FF 
09500     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09504     B8 00 90 5D |  if_ne	jmp	#LR__0745
09508     15 22 06 F6 | 	mov	local03, #21
0950c     0F 2D 02 F6 | 	mov	local08, local01
09510     10 2B 02 F6 | 	mov	local07, local02
09514     11 29 02 F6 | 	mov	local06, local03
09518     6A 00 00 FF 
0951c     00 E4 05 F1 | 	add	objptr, ##54272
09520     F2 26 02 FB | 	rdlong	local05, objptr
09524     13 13 02 F6 | 	mov	arg01, local05
09528     01 12 66 F0 | 	shl	arg01, #1
0952c     13 13 02 F1 | 	add	arg01, local05
09530     02 12 66 F0 | 	shl	arg01, #2
09534     03 00 00 FF 
09538     00 E4 85 F1 | 	sub	objptr, ##1536
0953c     F2 12 02 F1 | 	add	arg01, objptr
09540     09 2D 62 FC | 	wrlong	local08, arg01
09544     03 00 00 FF 
09548     00 E4 05 F1 | 	add	objptr, ##1536
0954c     F2 30 02 FB | 	rdlong	local10, objptr
09550     18 2F 02 F6 | 	mov	local09, local10
09554     01 2E 66 F0 | 	shl	local09, #1
09558     18 2F 02 F1 | 	add	local09, local10
0955c     02 2E 66 F0 | 	shl	local09, #2
09560     03 00 00 FF 
09564     00 E4 85 F1 | 	sub	objptr, ##1536
09568     F2 2E 02 F1 | 	add	local09, objptr
0956c     04 2E 06 F1 | 	add	local09, #4
09570     17 2B 62 FC | 	wrlong	local07, local09
09574     03 00 00 FF 
09578     00 E4 05 F1 | 	add	objptr, ##1536
0957c     F2 2E 02 FB | 	rdlong	local09, objptr
09580     17 31 02 F6 | 	mov	local10, local09
09584     01 30 66 F0 | 	shl	local10, #1
09588     17 31 02 F1 | 	add	local10, local09
0958c     02 30 66 F0 | 	shl	local10, #2
09590     03 00 00 FF 
09594     00 E4 85 F1 | 	sub	objptr, ##1536
09598     F2 30 02 F1 | 	add	local10, objptr
0959c     08 30 06 F1 | 	add	local10, #8
095a0     18 29 62 FC | 	wrlong	local06, local10
095a4     03 00 00 FF 
095a8     00 E4 05 F1 | 	add	objptr, ##1536
095ac     F2 2C 02 FB | 	rdlong	local08, objptr
095b0     01 2C 06 F1 | 	add	local08, #1
095b4     F2 2C 62 FC | 	wrlong	local08, objptr
095b8     6A 00 00 FF 
095bc     00 E4 85 F1 | 	sub	objptr, ##54272
095c0                 | LR__0745
095c0     A7 F0 03 F6 | 	mov	ptra, fp
095c4     B2 00 A0 FD | 	call	#popregs_
095c8                 | _getfun_ret
095c8     2D 00 64 FD | 	ret
095cc                 | 
095cc                 | '   
095cc                 | '   
095cc                 | ' sub getvar(m as integer) 
095cc                 | _getvar
095cc     0A 4A 05 F6 | 	mov	COUNT_, #10
095d0     A8 00 A0 FD | 	call	#pushregs_
095d4                 | _getvar_enter
095d4     09 25 02 F6 | 	mov	local04, arg01
095d8     56 00 00 FF 
095dc     C8 E5 05 F1 | 	add	objptr, ##44488
095e0     F2 14 02 FB | 	rdlong	arg02, objptr
095e4     03 14 66 F0 | 	shl	arg02, #3
095e8     02 00 00 FF 
095ec     38 E4 85 F1 | 	sub	objptr, ##1080
095f0     F2 14 02 F1 | 	add	arg02, objptr
095f4     0A 27 02 FB | 	rdlong	local05, arg02
095f8     13 13 02 F6 | 	mov	arg01, local05
095fc     01 14 06 F6 | 	mov	arg02, #1
09600     54 00 00 FF 
09604     90 E5 85 F1 | 	sub	objptr, ##43408
09608     DC 37 B1 FD | 	call	#__system__Right_S
0960c     FD 28 02 F6 | 	mov	local06, result1
09610     01 2A 66 F6 | 	neg	local07, #1
09614                 | ' 
09614                 | ' varname$=lparts(ct).part$
09614                 | ' suffix$=right$(varname$,1)
09614                 | ' j=-1
09614                 | ' 
09614                 | ' for i=0 to varnum-1
09614     00 2C 06 F6 | 	mov	local08, #0
09618     54 00 00 FF 
0961c     8C E5 05 F1 | 	add	objptr, ##43404
09620     F2 2E 02 FB | 	rdlong	local09, objptr
09624     54 00 00 FF 
09628     8C E5 85 F1 | 	sub	objptr, ##43404
0962c                 | LR__0750
0962c     17 2D 52 F2 | 	cmps	local08, local09 wc
09630     38 00 90 3D |  if_ae	jmp	#LR__0751
09634                 | '   if variables(i).name=varname$ then j=i : exit
09634     16 15 02 F6 | 	mov	arg02, local08
09638     04 14 66 F0 | 	shl	arg02, #4
0963c     34 00 00 FF 
09640     8C E5 05 F1 | 	add	objptr, ##27020
09644     F2 14 02 F1 | 	add	arg02, objptr
09648     0A 13 02 FB | 	rdlong	arg01, arg02
0964c     13 15 02 F6 | 	mov	arg02, local05
09650     34 00 00 FF 
09654     8C E5 85 F1 | 	sub	objptr, ##27020
09658     E4 16 B1 FD | 	call	#__system___string_cmp
0965c     00 FA 0D F2 | 	cmp	result1, #0 wz
09660     16 2B 02 A6 |  if_e	mov	local07, local08
09664     01 2C 06 51 |  if_ne	add	local08, #1
09668     C0 FF 9F 5D |  if_ne	jmp	#LR__0750
0966c                 | LR__0751
0966c                 | ' if  j=-1 andalso varnum<maxvars then   
0966c     FF FF 7F FF 
09670     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09674     A8 00 90 5D |  if_ne	jmp	#LR__0752
09678     54 00 00 FF 
0967c     8C E5 05 F1 | 	add	objptr, ##43404
09680     F2 2E 02 FB | 	rdlong	local09, objptr
09684     54 00 00 FF 
09688     8C E5 85 F1 | 	sub	objptr, ##43404
0968c     01 00 00 FF 
09690     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09694     88 00 90 3D |  if_ae	jmp	#LR__0752
09698     54 00 00 FF 
0969c     8C E5 05 F1 | 	add	objptr, ##43404
096a0     F2 2E 02 FB | 	rdlong	local09, objptr
096a4     04 2E 66 F0 | 	shl	local09, #4
096a8     20 00 00 FF 
096ac     00 E4 85 F1 | 	sub	objptr, ##16384
096b0     F2 2E 02 F1 | 	add	local09, objptr
096b4     17 27 62 FC | 	wrlong	local05, local09
096b8     20 00 00 FF 
096bc     00 E4 05 F1 | 	add	objptr, ##16384
096c0     F2 2E 02 FB | 	rdlong	local09, objptr
096c4     04 2E 66 F0 | 	shl	local09, #4
096c8     20 00 00 FF 
096cc     00 E4 85 F1 | 	sub	objptr, ##16384
096d0     F2 2E 02 F1 | 	add	local09, objptr
096d4     04 2E 06 F1 | 	add	local09, #4
096d8     17 01 68 FC | 	wrlong	#0, local09
096dc     20 00 00 FF 
096e0     00 E4 05 F1 | 	add	objptr, ##16384
096e4     F2 2E 02 FB | 	rdlong	local09, objptr
096e8     04 2E 66 F0 | 	shl	local09, #4
096ec     20 00 00 FF 
096f0     00 E4 85 F1 | 	sub	objptr, ##16384
096f4     F2 2E 02 F1 | 	add	local09, objptr
096f8     0C 2E 06 F1 | 	add	local09, #12
096fc     17 39 68 FC | 	wrlong	#28, local09
09700     20 00 00 FF 
09704     00 E4 05 F1 | 	add	objptr, ##16384
09708     F2 2E 02 FB | 	rdlong	local09, objptr
0970c     17 2B 02 F6 | 	mov	local07, local09
09710     01 2E 06 F1 | 	add	local09, #1
09714     F2 2E 62 FC | 	wrlong	local09, objptr
09718     54 00 00 FF 
0971c     8C E5 85 F1 | 	sub	objptr, ##43404
09720                 | LR__0752
09720     00 2E 06 F6 | 	mov	local09, #0
09724                 | ' numpar=0
09724                 | ' ' check if it is an array
09724                 | ' 
09724                 | ' if lparts(ct+1).token=token_lpar then
09724     56 00 00 FF 
09728     C8 E5 05 F1 | 	add	objptr, ##44488
0972c     F2 2C 02 FB | 	rdlong	local08, objptr
09730     01 2C 06 F1 | 	add	local08, #1
09734     03 2C 66 F0 | 	shl	local08, #3
09738     02 00 00 FF 
0973c     38 E4 85 F1 | 	sub	objptr, ##1080
09740     F2 2C 02 F1 | 	add	local08, objptr
09744     04 2C 06 F1 | 	add	local08, #4
09748     16 2D 02 FB | 	rdlong	local08, local08
0974c     15 2C 0E F2 | 	cmp	local08, #21 wz
09750     54 00 00 FF 
09754     90 E5 85 F1 | 	sub	objptr, ##43408
09758     08 01 90 5D |  if_ne	jmp	#LR__0757
0975c     56 00 00 FF 
09760     C8 E5 05 F1 | 	add	objptr, ##44488
09764     F2 30 02 FB | 	rdlong	local10, objptr
09768     01 30 06 F1 | 	add	local10, #1
0976c     F2 30 62 FC | 	wrlong	local10, objptr
09770     56 00 00 FF 
09774     C8 E5 85 F1 | 	sub	objptr, ##44488
09778                 | '   ct+=1 											' omit this lpar, this is for expr list
09778                 | '   do
09778                 | LR__0753
09778     56 00 00 FF 
0977c     C8 E5 05 F1 | 	add	objptr, ##44488
09780     F2 2C 02 FB | 	rdlong	local08, objptr
09784     01 2C 06 F1 | 	add	local08, #1
09788     F2 2C 62 FC | 	wrlong	local08, objptr
0978c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0978c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0978c     03 2C 66 F0 | 	shl	local08, #3
09790     02 00 00 FF 
09794     38 E4 85 F1 | 	sub	objptr, ##1080
09798     F2 2C 02 F1 | 	add	local08, objptr
0979c     04 2C 06 F1 | 	add	local08, #4
097a0     16 31 02 FB | 	rdlong	local10, local08
097a4     15 30 0E F2 | 	cmp	local10, #21 wz
097a8     54 00 00 FF 
097ac     90 E5 85 F1 | 	sub	objptr, ##43408
097b0     40 00 90 5D |  if_ne	jmp	#LR__0754
097b4     56 00 00 FF 
097b8     C8 E5 05 F1 | 	add	objptr, ##44488
097bc     F2 30 02 FB | 	rdlong	local10, objptr
097c0     01 30 06 F1 | 	add	local10, #1
097c4     F2 30 62 FC | 	wrlong	local10, objptr
097c8     56 00 00 FF 
097cc     C8 E5 85 F1 | 	sub	objptr, ##44488
097d0     74 EE BF FD | 	call	#_expr
097d4     56 00 00 FF 
097d8     C8 E5 05 F1 | 	add	objptr, ##44488
097dc     F2 30 02 FB | 	rdlong	local10, objptr
097e0     01 30 06 F1 | 	add	local10, #1
097e4     F2 30 62 FC | 	wrlong	local10, objptr
097e8     56 00 00 FF 
097ec     C8 E5 85 F1 | 	sub	objptr, ##44488
097f0     04 00 90 FD | 	jmp	#LR__0755
097f4                 | LR__0754
097f4     50 EE BF FD | 	call	#_expr
097f8                 | LR__0755
097f8     01 2E 06 F1 | 	add	local09, #1
097fc     56 00 00 FF 
09800     C8 E5 05 F1 | 	add	objptr, ##44488
09804     F2 2C 02 FB | 	rdlong	local08, objptr
09808     03 2C 66 F0 | 	shl	local08, #3
0980c     02 00 00 FF 
09810     38 E4 85 F1 | 	sub	objptr, ##1080
09814     F2 2C 02 F1 | 	add	local08, objptr
09818     04 2C 06 F1 | 	add	local08, #4
0981c     16 31 02 FB | 	rdlong	local10, local08
09820     14 30 0E F2 | 	cmp	local10, #20 wz
09824     54 00 00 FF 
09828     90 E5 85 F1 | 	sub	objptr, ##43408
0982c     34 00 90 AD |  if_e	jmp	#LR__0756
09830     56 00 00 FF 
09834     C8 E5 05 F1 | 	add	objptr, ##44488
09838     F2 30 02 FB | 	rdlong	local10, objptr
0983c     03 30 66 F0 | 	shl	local10, #3
09840     02 00 00 FF 
09844     38 E4 85 F1 | 	sub	objptr, ##1080
09848     F2 30 02 F1 | 	add	local10, objptr
0984c     04 30 06 F1 | 	add	local10, #4
09850     18 31 02 FB | 	rdlong	local10, local10
09854     FE 31 0E F2 | 	cmp	local10, #510 wz
09858     54 00 00 FF 
0985c     90 E5 85 F1 | 	sub	objptr, ##43408
09860     14 FF 9F 5D |  if_ne	jmp	#LR__0753
09864                 | LR__0756
09864                 | LR__0757
09864     17 21 02 F6 | 	mov	local02, local09
09868     11 22 06 F6 | 	mov	local03, #17
0986c     15 1F 02 F6 | 	mov	local01, local07
09870     0F 31 02 F6 | 	mov	local10, local01
09874     10 2F 02 F6 | 	mov	local09, local02
09878     11 2D 02 F6 | 	mov	local08, local03
0987c     6A 00 00 FF 
09880     00 E4 05 F1 | 	add	objptr, ##54272
09884     F2 2A 02 FB | 	rdlong	local07, objptr
09888     15 29 02 F6 | 	mov	local06, local07
0988c     01 28 66 F0 | 	shl	local06, #1
09890     15 29 02 F1 | 	add	local06, local07
09894     02 28 66 F0 | 	shl	local06, #2
09898     03 00 00 FF 
0989c     00 E4 85 F1 | 	sub	objptr, ##1536
098a0     F2 28 02 F1 | 	add	local06, objptr
098a4     14 31 62 FC | 	wrlong	local10, local06
098a8     03 00 00 FF 
098ac     00 E4 05 F1 | 	add	objptr, ##1536
098b0     F2 30 02 FB | 	rdlong	local10, objptr
098b4     18 27 02 F6 | 	mov	local05, local10
098b8     01 26 66 F0 | 	shl	local05, #1
098bc     18 27 02 F1 | 	add	local05, local10
098c0     02 26 66 F0 | 	shl	local05, #2
098c4     03 00 00 FF 
098c8     00 E4 85 F1 | 	sub	objptr, ##1536
098cc     F2 26 02 F1 | 	add	local05, objptr
098d0     04 26 06 F1 | 	add	local05, #4
098d4     13 2F 62 FC | 	wrlong	local09, local05
098d8     03 00 00 FF 
098dc     00 E4 05 F1 | 	add	objptr, ##1536
098e0     F2 30 02 FB | 	rdlong	local10, objptr
098e4     18 FB 01 F6 | 	mov	result1, local10
098e8     01 FA 65 F0 | 	shl	result1, #1
098ec     18 FB 01 F1 | 	add	result1, local10
098f0     02 FA 65 F0 | 	shl	result1, #2
098f4     03 00 00 FF 
098f8     00 E4 85 F1 | 	sub	objptr, ##1536
098fc     F2 FA 01 F1 | 	add	result1, objptr
09900     08 FA 05 F1 | 	add	result1, #8
09904     FD 2C 62 FC | 	wrlong	local08, result1
09908     03 00 00 FF 
0990c     00 E4 05 F1 | 	add	objptr, ##1536
09910     F2 30 02 FB | 	rdlong	local10, objptr
09914     01 30 06 F1 | 	add	local10, #1
09918     F2 30 62 FC | 	wrlong	local10, objptr
0991c     6A 00 00 FF 
09920     00 E4 85 F1 | 	sub	objptr, ##54272
09924                 | ' 
09924                 | ' t2.result.twowords(1)=numpar
09924                 | ' 
09924                 | ' 
09924                 | ' 
09924                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09924                 | ' 
09924                 | ' 
09924                 | '  
09924                 | ' 
09924                 | ' 701 
09924                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09924                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09924     FF FF 7F FF 
09928     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0992c     B8 00 90 5D |  if_ne	jmp	#LR__0758
09930     15 22 06 F6 | 	mov	local03, #21
09934     0F 31 02 F6 | 	mov	local10, local01
09938     10 2F 02 F6 | 	mov	local09, local02
0993c     11 2D 02 F6 | 	mov	local08, local03
09940     6A 00 00 FF 
09944     00 E4 05 F1 | 	add	objptr, ##54272
09948     F2 2A 02 FB | 	rdlong	local07, objptr
0994c     15 29 02 F6 | 	mov	local06, local07
09950     01 28 66 F0 | 	shl	local06, #1
09954     15 29 02 F1 | 	add	local06, local07
09958     02 28 66 F0 | 	shl	local06, #2
0995c     03 00 00 FF 
09960     00 E4 85 F1 | 	sub	objptr, ##1536
09964     F2 28 02 F1 | 	add	local06, objptr
09968     14 31 62 FC | 	wrlong	local10, local06
0996c     03 00 00 FF 
09970     00 E4 05 F1 | 	add	objptr, ##1536
09974     F2 1E 02 FB | 	rdlong	local01, objptr
09978     0F 27 02 F6 | 	mov	local05, local01
0997c     01 26 66 F0 | 	shl	local05, #1
09980     0F 27 02 F1 | 	add	local05, local01
09984     02 26 66 F0 | 	shl	local05, #2
09988     03 00 00 FF 
0998c     00 E4 85 F1 | 	sub	objptr, ##1536
09990     F2 26 02 F1 | 	add	local05, objptr
09994     04 26 06 F1 | 	add	local05, #4
09998     13 2F 62 FC | 	wrlong	local09, local05
0999c     03 00 00 FF 
099a0     00 E4 05 F1 | 	add	objptr, ##1536
099a4     F2 1E 02 FB | 	rdlong	local01, objptr
099a8     0F FB 01 F6 | 	mov	result1, local01
099ac     01 FA 65 F0 | 	shl	result1, #1
099b0     0F FB 01 F1 | 	add	result1, local01
099b4     02 FA 65 F0 | 	shl	result1, #2
099b8     03 00 00 FF 
099bc     00 E4 85 F1 | 	sub	objptr, ##1536
099c0     F2 FA 01 F1 | 	add	result1, objptr
099c4     08 FA 05 F1 | 	add	result1, #8
099c8     FD 2C 62 FC | 	wrlong	local08, result1
099cc     03 00 00 FF 
099d0     00 E4 05 F1 | 	add	objptr, ##1536
099d4     F2 30 02 FB | 	rdlong	local10, objptr
099d8     01 30 06 F1 | 	add	local10, #1
099dc     F2 30 62 FC | 	wrlong	local10, objptr
099e0     6A 00 00 FF 
099e4     00 E4 85 F1 | 	sub	objptr, ##54272
099e8                 | LR__0758
099e8     A7 F0 03 F6 | 	mov	ptra, fp
099ec     B2 00 A0 FD | 	call	#popregs_
099f0                 | _getvar_ret
099f0     2D 00 64 FD | 	ret
099f4                 | 
099f4                 | ' 
099f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
099f4                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
099f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
099f4                 | ' 
099f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
099f4                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
099f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
099f4                 | ' 
099f4                 | ' function execute_line (astart=0 as integer) as integer
099f4                 | _execute_line
099f4     04 4A 05 F6 | 	mov	COUNT_, #4
099f8     A8 00 A0 FD | 	call	#pushregs_
099fc     79 00 00 FF 
09a00     38 E5 05 F1 | 	add	objptr, ##62264
09a04     F2 00 68 FC | 	wrlong	#0, objptr
09a08                 | ' runptr2=0
09a08                 | ' for lineptr_e=astart to lineptr-1
09a08     0F 00 00 FF 
09a0c     34 E5 85 F1 | 	sub	objptr, ##7988
09a10     F2 12 62 FC | 	wrlong	arg01, objptr
09a14     04 E4 85 F1 | 	sub	objptr, #4
09a18     F2 1E 02 FB | 	rdlong	local01, objptr
09a1c     6A 00 00 FF 
09a20     00 E4 85 F1 | 	sub	objptr, ##54272
09a24                 | LR__0760
09a24     6A 00 00 FF 
09a28     04 E4 05 F1 | 	add	objptr, ##54276
09a2c     F2 FA 01 FB | 	rdlong	result1, objptr
09a30     6A 00 00 FF 
09a34     04 E4 85 F1 | 	sub	objptr, ##54276
09a38     0F FB 51 F2 | 	cmps	result1, local01 wc
09a3c     98 00 90 3D |  if_ae	jmp	#LR__0761
09a40     6A 00 00 FF 
09a44     04 E4 05 F1 | 	add	objptr, ##54276
09a48     F2 FA 01 FB | 	rdlong	result1, objptr
09a4c     FD 20 02 F6 | 	mov	local02, result1
09a50     01 20 66 F0 | 	shl	local02, #1
09a54     FD 20 02 F1 | 	add	local02, result1
09a58     02 20 66 F0 | 	shl	local02, #2
09a5c     03 00 00 FF 
09a60     04 E4 85 F1 | 	sub	objptr, ##1540
09a64     F2 20 02 F1 | 	add	local02, objptr
09a68     08 20 06 F1 | 	add	local02, #8
09a6c     10 21 02 FB | 	rdlong	local02, local02
09a70     10 21 E2 F8 | 	getbyte	local02, local02, #0
09a74     02 20 66 F0 | 	shl	local02, #2
09a78     04 00 00 FF 
09a7c     1C E4 85 F1 | 	sub	objptr, ##2076
09a80     F2 20 02 F1 | 	add	local02, objptr
09a84     10 21 02 FB | 	rdlong	local02, local02
09a88     10 23 02 F6 | 	mov	local03, local02
09a8c     13 20 46 F7 | 	zerox	local02, #19
09a90     14 22 46 F0 | 	shr	local03, #20
09a94     02 22 66 F0 | 	shl	local03, #2
09a98     ED 22 02 F1 | 	add	local03, __methods__
09a9c     11 23 02 FB | 	rdlong	local03, local03
09aa0     62 00 00 FF 
09aa4     E4 E5 85 F1 | 	sub	objptr, ##50660
09aa8     F2 24 02 F6 | 	mov	local04, objptr
09aac     10 E5 01 F6 | 	mov	objptr, local02
09ab0     2D 22 62 FD | 	call	local03
09ab4     12 E5 01 F6 | 	mov	objptr, local04
09ab8     6A 00 00 FF 
09abc     04 E4 05 F1 | 	add	objptr, ##54276
09ac0     F2 24 02 FB | 	rdlong	local04, objptr
09ac4     01 24 06 F1 | 	add	local04, #1
09ac8     F2 24 62 FC | 	wrlong	local04, objptr
09acc     6A 00 00 FF 
09ad0     04 E4 85 F1 | 	sub	objptr, ##54276
09ad4     4C FF 9F FD | 	jmp	#LR__0760
09ad8                 | LR__0761
09ad8                 | ' return runptr2
09ad8     79 00 00 FF 
09adc     38 E5 05 F1 | 	add	objptr, ##62264
09ae0     F2 FA 01 FB | 	rdlong	result1, objptr
09ae4     79 00 00 FF 
09ae8     38 E5 85 F1 | 	sub	objptr, ##62264
09aec     A7 F0 03 F6 | 	mov	ptra, fp
09af0     B2 00 A0 FD | 	call	#popregs_
09af4                 | _execute_line_ret
09af4     2D 00 64 FD | 	ret
09af8                 | 
09af8                 | ' 
09af8                 | ' 
09af8                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
09af8                 | ' 
09af8                 | ' function pop() as expr_result
09af8                 | _pop
09af8                 | ' 
09af8                 | ' if stackpointer=0 then
09af8     62 00 00 FF 
09afc     DC E5 05 F1 | 	add	objptr, ##50652
09b00     F2 FA 09 FB | 	rdlong	result1, objptr wz
09b04     62 00 00 FF 
09b08     DC E5 85 F1 | 	sub	objptr, ##50652
09b0c     FF 04 06 A6 |  if_e	mov	_var03, #255
09b10     18 00 06 A6 |  if_e	mov	_var01, #24
09b14     68 00 90 AD |  if_e	jmp	#LR__0770
09b18     62 00 00 FF 
09b1c     DC E5 05 F1 | 	add	objptr, ##50652
09b20     F2 FA 01 FB | 	rdlong	result1, objptr
09b24     01 FA 85 F1 | 	sub	result1, #1
09b28     F2 FA 61 FC | 	wrlong	result1, objptr
09b2c     FD FE 01 F6 | 	mov	result3, result1
09b30     01 FE 65 F0 | 	shl	result3, #1
09b34     FD FE 01 F1 | 	add	result3, result1
09b38     02 FE 65 F0 | 	shl	result3, #2
09b3c     0C 00 00 FF 
09b40     0C E4 85 F1 | 	sub	objptr, ##6156
09b44     F2 FE 01 F1 | 	add	result3, objptr
09b48     FF 00 02 FB | 	rdlong	_var01, result3
09b4c     04 FE 05 F1 | 	add	result3, #4
09b50     FF FE 01 FB | 	rdlong	result3, result3
09b54     FD FC 01 F6 | 	mov	result2, result1
09b58     01 FC 65 F0 | 	shl	result2, #1
09b5c     FD FC 01 F1 | 	add	result2, result1
09b60     02 FC 65 F0 | 	shl	result2, #2
09b64     F2 FC 01 F1 | 	add	result2, objptr
09b68     08 FC 05 F1 | 	add	result2, #8
09b6c     FE FA 01 FB | 	rdlong	result1, result2
09b70     FF 02 02 F6 | 	mov	_var02, result3
09b74     FD 04 02 F6 | 	mov	_var03, result1
09b78     56 00 00 FF 
09b7c     D0 E5 85 F1 | 	sub	objptr, ##44496
09b80                 | LR__0770
09b80                 | ' return t1
09b80     01 FD 01 F6 | 	mov	result2, _var02
09b84     02 FF 01 F6 | 	mov	result3, _var03
09b88     00 FB 01 F6 | 	mov	result1, _var01
09b8c                 | _pop_ret
09b8c     2D 00 64 FD | 	ret
09b90                 | 
09b90                 | ' 
09b90                 | ' sub push(t1 as expr_result )
09b90                 | _push
09b90                 | ' 
09b90                 | ' 'print "In push: "; t1.result_type
09b90                 | ' 'print "In push: "; t1.result.uresult
09b90                 | ' 
09b90                 | ' if stackpointer<maxstack then 
09b90     62 00 00 FF 
09b94     DC E5 05 F1 | 	add	objptr, ##50652
09b98     F2 00 02 FB | 	rdlong	_var01, objptr
09b9c     62 00 00 FF 
09ba0     DC E5 85 F1 | 	sub	objptr, ##50652
09ba4     01 00 00 FF 
09ba8     00 00 56 F2 | 	cmps	_var01, ##512 wc
09bac     BC 00 90 3D |  if_ae	jmp	#LR__0780
09bb0     09 01 02 FB | 	rdlong	_var01, arg01
09bb4     04 12 06 F1 | 	add	arg01, #4
09bb8     09 03 02 FB | 	rdlong	_var02, arg01
09bbc     04 12 06 F1 | 	add	arg01, #4
09bc0     09 13 02 FB | 	rdlong	arg01, arg01
09bc4     62 00 00 FF 
09bc8     DC E5 05 F1 | 	add	objptr, ##50652
09bcc     F2 04 02 FB | 	rdlong	_var03, objptr
09bd0     02 07 02 F6 | 	mov	_var04, _var03
09bd4     01 06 66 F0 | 	shl	_var04, #1
09bd8     02 07 02 F1 | 	add	_var04, _var03
09bdc     02 06 66 F0 | 	shl	_var04, #2
09be0     0C 00 00 FF 
09be4     0C E4 85 F1 | 	sub	objptr, ##6156
09be8     F2 06 02 F1 | 	add	_var04, objptr
09bec     03 01 62 FC | 	wrlong	_var01, _var04
09bf0     0C 00 00 FF 
09bf4     0C E4 05 F1 | 	add	objptr, ##6156
09bf8     F2 06 02 FB | 	rdlong	_var04, objptr
09bfc     03 05 02 F6 | 	mov	_var03, _var04
09c00     01 04 66 F0 | 	shl	_var03, #1
09c04     03 05 02 F1 | 	add	_var03, _var04
09c08     02 04 66 F0 | 	shl	_var03, #2
09c0c     0C 00 00 FF 
09c10     0C E4 85 F1 | 	sub	objptr, ##6156
09c14     F2 04 02 F1 | 	add	_var03, objptr
09c18     04 04 06 F1 | 	add	_var03, #4
09c1c     02 03 62 FC | 	wrlong	_var02, _var03
09c20     0C 00 00 FF 
09c24     0C E4 05 F1 | 	add	objptr, ##6156
09c28     F2 06 02 FB | 	rdlong	_var04, objptr
09c2c     03 05 02 F6 | 	mov	_var03, _var04
09c30     01 04 66 F0 | 	shl	_var03, #1
09c34     03 05 02 F1 | 	add	_var03, _var04
09c38     02 04 66 F0 | 	shl	_var03, #2
09c3c     0C 00 00 FF 
09c40     0C E4 85 F1 | 	sub	objptr, ##6156
09c44     F2 04 02 F1 | 	add	_var03, objptr
09c48     08 04 06 F1 | 	add	_var03, #8
09c4c     02 13 62 FC | 	wrlong	arg01, _var03
09c50     0C 00 00 FF 
09c54     0C E4 05 F1 | 	add	objptr, ##6156
09c58     F2 00 02 FB | 	rdlong	_var01, objptr
09c5c     01 00 06 F1 | 	add	_var01, #1
09c60     F2 00 62 FC | 	wrlong	_var01, objptr
09c64     62 00 00 FF 
09c68     DC E5 85 F1 | 	sub	objptr, ##50652
09c6c                 | LR__0780
09c6c                 | _push_ret
09c6c     2D 00 64 FD | 	ret
09c70                 | 
09c70                 | ' 
09c70                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
09c70                 | ' 
09c70                 | ' sub do_push
09c70                 | _do_push
09c70                 | ' if stackpointer<maxstack then 
09c70     62 00 00 FF 
09c74     DC E5 05 F1 | 	add	objptr, ##50652
09c78     F2 00 02 FB | 	rdlong	_var01, objptr
09c7c     62 00 00 FF 
09c80     DC E5 85 F1 | 	sub	objptr, ##50652
09c84     01 00 00 FF 
09c88     00 00 56 F2 | 	cmps	_var01, ##512 wc
09c8c     F8 00 90 3D |  if_ae	jmp	#LR__0790
09c90     6A 00 00 FF 
09c94     04 E4 05 F1 | 	add	objptr, ##54276
09c98     F2 02 02 FB | 	rdlong	_var02, objptr
09c9c     01 05 02 F6 | 	mov	_var03, _var02
09ca0     01 04 66 F0 | 	shl	_var03, #1
09ca4     01 05 02 F1 | 	add	_var03, _var02
09ca8     02 04 66 F0 | 	shl	_var03, #2
09cac     03 00 00 FF 
09cb0     04 E4 85 F1 | 	sub	objptr, ##1540
09cb4     F2 04 02 F1 | 	add	_var03, objptr
09cb8     02 01 02 FB | 	rdlong	_var01, _var03
09cbc     04 04 06 F1 | 	add	_var03, #4
09cc0     02 07 02 FB | 	rdlong	_var04, _var03
09cc4     01 05 02 F6 | 	mov	_var03, _var02
09cc8     01 04 66 F0 | 	shl	_var03, #1
09ccc     01 05 02 F1 | 	add	_var03, _var02
09cd0     02 04 66 F0 | 	shl	_var03, #2
09cd4     F2 04 02 F1 | 	add	_var03, objptr
09cd8     08 04 06 F1 | 	add	_var03, #8
09cdc     02 03 02 FB | 	rdlong	_var02, _var03
09ce0     04 00 00 FF 
09ce4     24 E4 85 F1 | 	sub	objptr, ##2084
09ce8     F2 04 02 FB | 	rdlong	_var03, objptr
09cec     02 09 02 F6 | 	mov	_var05, _var03
09cf0     01 08 66 F0 | 	shl	_var05, #1
09cf4     02 09 02 F1 | 	add	_var05, _var03
09cf8     02 08 66 F0 | 	shl	_var05, #2
09cfc     0C 00 00 FF 
09d00     0C E4 85 F1 | 	sub	objptr, ##6156
09d04     F2 08 02 F1 | 	add	_var05, objptr
09d08     04 01 62 FC | 	wrlong	_var01, _var05
09d0c     0C 00 00 FF 
09d10     0C E4 05 F1 | 	add	objptr, ##6156
09d14     F2 08 02 FB | 	rdlong	_var05, objptr
09d18     04 05 02 F6 | 	mov	_var03, _var05
09d1c     01 04 66 F0 | 	shl	_var03, #1
09d20     04 05 02 F1 | 	add	_var03, _var05
09d24     02 04 66 F0 | 	shl	_var03, #2
09d28     0C 00 00 FF 
09d2c     0C E4 85 F1 | 	sub	objptr, ##6156
09d30     F2 04 02 F1 | 	add	_var03, objptr
09d34     04 04 06 F1 | 	add	_var03, #4
09d38     02 07 62 FC | 	wrlong	_var04, _var03
09d3c     0C 00 00 FF 
09d40     0C E4 05 F1 | 	add	objptr, ##6156
09d44     F2 08 02 FB | 	rdlong	_var05, objptr
09d48     04 07 02 F6 | 	mov	_var04, _var05
09d4c     01 06 66 F0 | 	shl	_var04, #1
09d50     04 07 02 F1 | 	add	_var04, _var05
09d54     02 06 66 F0 | 	shl	_var04, #2
09d58     0C 00 00 FF 
09d5c     0C E4 85 F1 | 	sub	objptr, ##6156
09d60     F2 06 02 F1 | 	add	_var04, objptr
09d64     08 06 06 F1 | 	add	_var04, #8
09d68     03 03 62 FC | 	wrlong	_var02, _var04
09d6c     0C 00 00 FF 
09d70     0C E4 05 F1 | 	add	objptr, ##6156
09d74     F2 00 02 FB | 	rdlong	_var01, objptr
09d78     01 00 06 F1 | 	add	_var01, #1
09d7c     F2 00 62 FC | 	wrlong	_var01, objptr
09d80     62 00 00 FF 
09d84     DC E5 85 F1 | 	sub	objptr, ##50652
09d88                 | LR__0790
09d88                 | _do_push_ret
09d88     2D 00 64 FD | 	ret
09d8c                 | 
09d8c                 | ' 
09d8c                 | '   
09d8c                 | ' sub csave_block(address as ulong)
09d8c                 | _csave_block
09d8c     09 01 02 F6 | 	mov	_var01, arg01
09d90                 | ' 
09d90                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09d90                 | ' ' we enter it at the state of playing 1 kHz header tone
09d90                 | ' 
09d90                 | ' for i=0 to 63 step 2
09d90     00 02 06 F6 | 	mov	_var02, #0
09d94                 | LR__0800
09d94                 | '   do: loop until lpeek(base+32*7)>32768
09d94     56 00 00 FF 
09d98     94 E5 05 F1 | 	add	objptr, ##44436
09d9c     97 0C 48 FB | 	callpa	#(@LR__0802-@LR__0801)>>2,fcache_load_ptr_
09da0                 | LR__0801
09da0     F2 12 02 FB | 	rdlong	arg01, objptr
09da4     E0 12 06 F1 | 	add	arg01, #224
09da8     09 FB 01 FB | 	rdlong	result1, arg01
09dac     40 00 00 FF 
09db0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09db4     E8 FF 9F CD |  if_b	jmp	#LR__0801
09db8                 | LR__0802
09db8     00 13 02 F6 | 	mov	arg01, _var01
09dbc     01 05 02 F6 | 	mov	_var03, _var02
09dc0     02 04 66 F0 | 	shl	_var03, #2
09dc4     02 13 02 F1 | 	add	arg01, _var03
09dc8     09 07 02 FB | 	rdlong	_var04, arg01
09dcc     24 00 00 FF 
09dd0     D4 E4 05 F1 | 	add	objptr, ##18644
09dd4     F2 06 62 FC | 	wrlong	_var04, objptr
09dd8     7B 00 00 FF 
09ddc     68 E4 85 F1 | 	sub	objptr, ##63080
09de0                 | '   q=lpeek(address+4*i)
09de0                 | '      for bit=0 to 31
09de0     00 08 06 F6 | 	mov	_var05, #0
09de4     97 84 48 FB | 	callpa	#(@LR__0807-@LR__0803)>>2,fcache_load_ptr_
09de8                 | LR__0803
09de8                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09de8     7B 00 00 FF 
09dec     68 E4 05 F1 | 	add	objptr, ##63080
09df0     F2 06 02 FB | 	rdlong	_var04, objptr
09df4     7B 00 00 FF 
09df8     68 E4 85 F1 | 	sub	objptr, ##63080
09dfc     04 05 C2 F9 | 	decod	_var03, _var05
09e00     02 07 CA F7 | 	test	_var04, _var03 wz
09e04     60 00 90 AD |  if_e	jmp	#LR__0804
09e08     04 05 02 F6 | 	mov	_var03, _var05
09e0c     02 04 66 F0 | 	shl	_var03, #2
09e10     77 00 00 FF 
09e14     30 E4 05 F1 | 	add	objptr, ##60976
09e18     F2 04 02 F1 | 	add	_var03, objptr
09e1c     02 FF 48 FC | 	wrbyte	#127, _var03
09e20     04 05 02 F6 | 	mov	_var03, _var05
09e24     02 04 66 F0 | 	shl	_var03, #2
09e28     01 04 06 F1 | 	add	_var03, #1
09e2c     F2 04 02 F1 | 	add	_var03, objptr
09e30     02 01 49 FC | 	wrbyte	#128, _var03
09e34     04 05 02 F6 | 	mov	_var03, _var05
09e38     02 04 66 F0 | 	shl	_var03, #2
09e3c     02 04 06 F1 | 	add	_var03, #2
09e40     F2 04 02 F1 | 	add	_var03, objptr
09e44     02 FF 48 FC | 	wrbyte	#127, _var03
09e48     04 05 02 F6 | 	mov	_var03, _var05
09e4c     02 04 66 F0 | 	shl	_var03, #2
09e50     03 04 06 F1 | 	add	_var03, #3
09e54     F2 04 02 F1 | 	add	_var03, objptr
09e58     02 01 49 FC | 	wrbyte	#128, _var03
09e5c     77 00 00 FF 
09e60     30 E4 85 F1 | 	sub	objptr, ##60976
09e64     5C 00 90 FD | 	jmp	#LR__0805
09e68                 | LR__0804
09e68     04 05 02 F6 | 	mov	_var03, _var05
09e6c     02 04 66 F0 | 	shl	_var03, #2
09e70     77 00 00 FF 
09e74     30 E4 05 F1 | 	add	objptr, ##60976
09e78     F2 04 02 F1 | 	add	_var03, objptr
09e7c     02 01 49 FC | 	wrbyte	#128, _var03
09e80     04 05 02 F6 | 	mov	_var03, _var05
09e84     02 04 66 F0 | 	shl	_var03, #2
09e88     01 04 06 F1 | 	add	_var03, #1
09e8c     F2 04 02 F1 | 	add	_var03, objptr
09e90     02 01 49 FC | 	wrbyte	#128, _var03
09e94     04 05 02 F6 | 	mov	_var03, _var05
09e98     02 04 66 F0 | 	shl	_var03, #2
09e9c     02 04 06 F1 | 	add	_var03, #2
09ea0     F2 04 02 F1 | 	add	_var03, objptr
09ea4     02 FF 48 FC | 	wrbyte	#127, _var03
09ea8     04 05 02 F6 | 	mov	_var03, _var05
09eac     02 04 66 F0 | 	shl	_var03, #2
09eb0     03 04 06 F1 | 	add	_var03, #3
09eb4     F2 04 02 F1 | 	add	_var03, objptr
09eb8     02 FF 48 FC | 	wrbyte	#127, _var03
09ebc     77 00 00 FF 
09ec0     30 E4 85 F1 | 	sub	objptr, ##60976
09ec4                 | LR__0805
09ec4     01 08 06 F1 | 	add	_var05, #1
09ec8     20 08 56 F2 | 	cmps	_var05, #32 wc
09ecc     18 FF 9F CD |  if_b	jmp	#LR__0803
09ed0                 | '   do: loop until lpeek(base+32*7)<32768
09ed0     56 00 00 FF 
09ed4     94 E5 05 F1 | 	add	objptr, ##44436
09ed8                 | LR__0806
09ed8     F2 12 02 FB | 	rdlong	arg01, objptr
09edc     E0 12 06 F1 | 	add	arg01, #224
09ee0     09 FB 01 FB | 	rdlong	result1, arg01
09ee4     40 00 00 FF 
09ee8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09eec     E8 FF 9F 3D |  if_ae	jmp	#LR__0806
09ef0                 | LR__0807
09ef0     00 13 02 F6 | 	mov	arg01, _var01
09ef4     04 12 06 F1 | 	add	arg01, #4
09ef8     01 05 02 F6 | 	mov	_var03, _var02
09efc     02 04 66 F0 | 	shl	_var03, #2
09f00     02 13 02 F1 | 	add	arg01, _var03
09f04     09 07 02 FB | 	rdlong	_var04, arg01
09f08     24 00 00 FF 
09f0c     D4 E4 05 F1 | 	add	objptr, ##18644
09f10     F2 06 62 FC | 	wrlong	_var04, objptr
09f14     7B 00 00 FF 
09f18     68 E4 85 F1 | 	sub	objptr, ##63080
09f1c                 | '   q=lpeek(address+4+4*i)
09f1c                 | '      for bit=0 to 31
09f1c     00 08 06 F6 | 	mov	_var05, #0
09f20     97 94 48 FB | 	callpa	#(@LR__0811-@LR__0808)>>2,fcache_load_ptr_
09f24                 | LR__0808
09f24                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09f24     7B 00 00 FF 
09f28     68 E4 05 F1 | 	add	objptr, ##63080
09f2c     F2 06 02 FB | 	rdlong	_var04, objptr
09f30     7B 00 00 FF 
09f34     68 E4 85 F1 | 	sub	objptr, ##63080
09f38     04 05 C2 F9 | 	decod	_var03, _var05
09f3c     02 07 CA F7 | 	test	_var04, _var03 wz
09f40     80 00 90 AD |  if_e	jmp	#LR__0809
09f44     04 0B 02 F6 | 	mov	_var06, _var05
09f48     02 0A 66 F0 | 	shl	_var06, #2
09f4c     80 04 06 F6 | 	mov	_var03, #128
09f50     05 05 02 F1 | 	add	_var03, _var06
09f54     77 00 00 FF 
09f58     30 E4 05 F1 | 	add	objptr, ##60976
09f5c     F2 04 02 F1 | 	add	_var03, objptr
09f60     02 FF 48 FC | 	wrbyte	#127, _var03
09f64     04 0B 02 F6 | 	mov	_var06, _var05
09f68     02 0A 66 F0 | 	shl	_var06, #2
09f6c     80 04 06 F6 | 	mov	_var03, #128
09f70     05 05 02 F1 | 	add	_var03, _var06
09f74     01 04 06 F1 | 	add	_var03, #1
09f78     F2 04 02 F1 | 	add	_var03, objptr
09f7c     02 01 49 FC | 	wrbyte	#128, _var03
09f80     04 0B 02 F6 | 	mov	_var06, _var05
09f84     02 0A 66 F0 | 	shl	_var06, #2
09f88     80 04 06 F6 | 	mov	_var03, #128
09f8c     05 05 02 F1 | 	add	_var03, _var06
09f90     02 04 06 F1 | 	add	_var03, #2
09f94     F2 04 02 F1 | 	add	_var03, objptr
09f98     02 FF 48 FC | 	wrbyte	#127, _var03
09f9c     04 0B 02 F6 | 	mov	_var06, _var05
09fa0     02 0A 66 F0 | 	shl	_var06, #2
09fa4     80 04 06 F6 | 	mov	_var03, #128
09fa8     05 05 02 F1 | 	add	_var03, _var06
09fac     03 04 06 F1 | 	add	_var03, #3
09fb0     F2 04 02 F1 | 	add	_var03, objptr
09fb4     02 01 49 FC | 	wrbyte	#128, _var03
09fb8     77 00 00 FF 
09fbc     30 E4 85 F1 | 	sub	objptr, ##60976
09fc0     7C 00 90 FD | 	jmp	#LR__0810
09fc4                 | LR__0809
09fc4     04 0B 02 F6 | 	mov	_var06, _var05
09fc8     02 0A 66 F0 | 	shl	_var06, #2
09fcc     80 04 06 F6 | 	mov	_var03, #128
09fd0     05 05 02 F1 | 	add	_var03, _var06
09fd4     77 00 00 FF 
09fd8     30 E4 05 F1 | 	add	objptr, ##60976
09fdc     F2 04 02 F1 | 	add	_var03, objptr
09fe0     02 01 49 FC | 	wrbyte	#128, _var03
09fe4     04 0B 02 F6 | 	mov	_var06, _var05
09fe8     02 0A 66 F0 | 	shl	_var06, #2
09fec     80 04 06 F6 | 	mov	_var03, #128
09ff0     05 05 02 F1 | 	add	_var03, _var06
09ff4     01 04 06 F1 | 	add	_var03, #1
09ff8     F2 04 02 F1 | 	add	_var03, objptr
09ffc     02 01 49 FC | 	wrbyte	#128, _var03
0a000     04 0B 02 F6 | 	mov	_var06, _var05
0a004     02 0A 66 F0 | 	shl	_var06, #2
0a008     80 04 06 F6 | 	mov	_var03, #128
0a00c     05 05 02 F1 | 	add	_var03, _var06
0a010     02 04 06 F1 | 	add	_var03, #2
0a014     F2 04 02 F1 | 	add	_var03, objptr
0a018     02 FF 48 FC | 	wrbyte	#127, _var03
0a01c     04 0B 02 F6 | 	mov	_var06, _var05
0a020     02 0A 66 F0 | 	shl	_var06, #2
0a024     80 04 06 F6 | 	mov	_var03, #128
0a028     05 05 02 F1 | 	add	_var03, _var06
0a02c     03 04 06 F1 | 	add	_var03, #3
0a030     F2 04 02 F1 | 	add	_var03, objptr
0a034     02 FF 48 FC | 	wrbyte	#127, _var03
0a038     77 00 00 FF 
0a03c     30 E4 85 F1 | 	sub	objptr, ##60976
0a040                 | LR__0810
0a040     01 08 06 F1 | 	add	_var05, #1
0a044     20 08 56 F2 | 	cmps	_var05, #32 wc
0a048     D8 FE 9F CD |  if_b	jmp	#LR__0808
0a04c                 | LR__0811
0a04c     02 02 06 F1 | 	add	_var02, #2
0a050     40 02 56 F2 | 	cmps	_var02, #64 wc
0a054     3C FD 9F CD |  if_b	jmp	#LR__0800
0a058                 | ' do: loop until lpeek(base+32*7)>32768
0a058     56 00 00 FF 
0a05c     94 E5 05 F1 | 	add	objptr, ##44436
0a060     97 84 48 FB | 	callpa	#(@LR__0820-@LR__0812)>>2,fcache_load_ptr_
0a064                 | LR__0812
0a064     F2 12 02 FB | 	rdlong	arg01, objptr
0a068     E0 12 06 F1 | 	add	arg01, #224
0a06c     09 FB 01 FB | 	rdlong	result1, arg01
0a070     40 00 00 FF 
0a074     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a078     E8 FF 9F CD |  if_b	jmp	#LR__0812
0a07c     56 00 00 FF 
0a080     94 E5 85 F1 | 	sub	objptr, ##44436
0a084                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a084     00 02 06 F6 | 	mov	_var02, #0
0a088                 | LR__0813
0a088     01 07 52 F6 | 	abs	_var04, _var02 wc
0a08c     07 06 06 F5 | 	and	_var04, #7
0a090     03 07 82 F6 | 	negc	_var04, _var04
0a094     04 06 56 F2 | 	cmps	_var04, #4 wc
0a098     20 00 90 3D |  if_ae	jmp	#LR__0814
0a09c     01 0B 02 F6 | 	mov	_var06, _var02
0a0a0     77 00 00 FF 
0a0a4     30 E4 05 F1 | 	add	objptr, ##60976
0a0a8     F2 0A 02 F1 | 	add	_var06, objptr
0a0ac     05 FF 48 FC | 	wrbyte	#127, _var06
0a0b0     77 00 00 FF 
0a0b4     30 E4 85 F1 | 	sub	objptr, ##60976
0a0b8     1C 00 90 FD | 	jmp	#LR__0815
0a0bc                 | LR__0814
0a0bc     01 0B 02 F6 | 	mov	_var06, _var02
0a0c0     77 00 00 FF 
0a0c4     30 E4 05 F1 | 	add	objptr, ##60976
0a0c8     F2 0A 02 F1 | 	add	_var06, objptr
0a0cc     05 01 49 FC | 	wrbyte	#128, _var06
0a0d0     77 00 00 FF 
0a0d4     30 E4 85 F1 | 	sub	objptr, ##60976
0a0d8                 | LR__0815
0a0d8     01 02 06 F1 | 	add	_var02, #1
0a0dc     80 02 56 F2 | 	cmps	_var02, #128 wc
0a0e0     A4 FF 9F CD |  if_b	jmp	#LR__0813
0a0e4                 | ' 
0a0e4                 | ' do: loop until lpeek(base+32*7)<32768
0a0e4     56 00 00 FF 
0a0e8     94 E5 05 F1 | 	add	objptr, ##44436
0a0ec                 | LR__0816
0a0ec     F2 12 02 FB | 	rdlong	arg01, objptr
0a0f0     E0 12 06 F1 | 	add	arg01, #224
0a0f4     09 FB 01 FB | 	rdlong	result1, arg01
0a0f8     40 00 00 FF 
0a0fc     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a100     E8 FF 9F 3D |  if_ae	jmp	#LR__0816
0a104     56 00 00 FF 
0a108     94 E5 85 F1 | 	sub	objptr, ##44436
0a10c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a10c     80 02 06 F6 | 	mov	_var02, #128
0a110                 | LR__0817
0a110     01 07 52 F6 | 	abs	_var04, _var02 wc
0a114     07 06 06 F5 | 	and	_var04, #7
0a118     03 07 82 F6 | 	negc	_var04, _var04
0a11c     04 06 56 F2 | 	cmps	_var04, #4 wc
0a120     20 00 90 3D |  if_ae	jmp	#LR__0818
0a124     01 0B 02 F6 | 	mov	_var06, _var02
0a128     77 00 00 FF 
0a12c     30 E4 05 F1 | 	add	objptr, ##60976
0a130     F2 0A 02 F1 | 	add	_var06, objptr
0a134     05 FF 48 FC | 	wrbyte	#127, _var06
0a138     77 00 00 FF 
0a13c     30 E4 85 F1 | 	sub	objptr, ##60976
0a140     1C 00 90 FD | 	jmp	#LR__0819
0a144                 | LR__0818
0a144     01 0B 02 F6 | 	mov	_var06, _var02
0a148     77 00 00 FF 
0a14c     30 E4 05 F1 | 	add	objptr, ##60976
0a150     F2 0A 02 F1 | 	add	_var06, objptr
0a154     05 01 49 FC | 	wrbyte	#128, _var06
0a158     77 00 00 FF 
0a15c     30 E4 85 F1 | 	sub	objptr, ##60976
0a160                 | LR__0819
0a160     01 02 06 F1 | 	add	_var02, #1
0a164     00 03 16 F2 | 	cmp	_var02, #256 wc
0a168     A4 FF 9F CD |  if_b	jmp	#LR__0817
0a16c                 | LR__0820
0a16c                 | _csave_block_ret
0a16c     2D 00 64 FD | 	ret
0a170                 | 
0a170                 | ' 
0a170                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0a170                 | _csave_addtoblock
0a170     04 4A 05 F6 | 	mov	COUNT_, #4
0a174     A8 00 A0 FD | 	call	#pushregs_
0a178     09 1F 02 F6 | 	mov	local01, arg01
0a17c                 | ' 
0a17c                 | ' 
0a17c                 | ' if force=0 then
0a17c     07 14 4E F7 | 	zerox	arg02, #7 wz
0a180     78 00 90 5D |  if_ne	jmp	#LR__0830
0a184     79 00 00 FF 
0a188     30 E5 05 F1 | 	add	objptr, ##62256
0a18c     F2 14 02 FB | 	rdlong	arg02, objptr
0a190     02 00 00 FF 
0a194     00 E4 85 F1 | 	sub	objptr, ##1024
0a198     F2 14 02 F1 | 	add	arg02, objptr
0a19c     0A 1F 42 FC | 	wrbyte	local01, arg02
0a1a0     02 00 00 FF 
0a1a4     00 E4 05 F1 | 	add	objptr, ##1024
0a1a8     F2 1E 02 FB | 	rdlong	local01, objptr
0a1ac     01 1E 06 F1 | 	add	local01, #1
0a1b0     F2 1E 62 FC | 	wrlong	local01, objptr
0a1b4                 | '   block(blockptr)=d
0a1b4                 | '   blockptr+=1
0a1b4                 | '   if blockptr>=255 then
0a1b4     79 00 00 FF 
0a1b8     30 E5 85 F1 | 	sub	objptr, ##62256
0a1bc     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a1c0     E4 00 90 CD |  if_b	jmp	#LR__0834
0a1c4     77 00 00 FF 
0a1c8     30 E5 05 F1 | 	add	objptr, ##61232
0a1cc     F2 12 02 F6 | 	mov	arg01, objptr
0a1d0     77 00 00 FF 
0a1d4     30 E5 85 F1 | 	sub	objptr, ##61232
0a1d8     B0 FB BF FD | 	call	#_csave_block
0a1dc     79 00 00 FF 
0a1e0     30 E5 05 F1 | 	add	objptr, ##62256
0a1e4     F2 00 68 FC | 	wrlong	#0, objptr
0a1e8     79 00 00 FF 
0a1ec     30 E5 85 F1 | 	sub	objptr, ##62256
0a1f0     2C 13 06 F6 | 	mov	arg01, #300
0a1f4     14 0E B1 FD | 	call	#__system___waitms
0a1f8     AC 00 90 FD | 	jmp	#LR__0834
0a1fc                 | LR__0830
0a1fc     79 00 00 FF 
0a200     30 E5 05 F1 | 	add	objptr, ##62256
0a204     F2 20 02 FB | 	rdlong	local02, objptr
0a208     02 00 00 FF 
0a20c     00 E4 85 F1 | 	sub	objptr, ##1024
0a210     F2 20 02 F1 | 	add	local02, objptr
0a214     10 1F 42 FC | 	wrbyte	local01, local02
0a218                 | '   block(blockptr)=d
0a218                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a218     02 00 00 FF 
0a21c     00 E4 05 F1 | 	add	objptr, ##1024
0a220     F2 22 02 FB | 	rdlong	local03, objptr
0a224     79 00 00 FF 
0a228     30 E5 85 F1 | 	sub	objptr, ##62256
0a22c     FF 22 16 F2 | 	cmp	local03, #255 wc
0a230     40 00 90 3D |  if_ae	jmp	#LR__0833
0a234     79 00 00 FF 
0a238     30 E5 05 F1 | 	add	objptr, ##62256
0a23c     F2 24 02 FB | 	rdlong	local04, objptr
0a240     79 00 00 FF 
0a244     30 E5 85 F1 | 	sub	objptr, ##62256
0a248                 | LR__0831
0a248     00 25 56 F2 | 	cmps	local04, #256 wc
0a24c     24 00 90 3D |  if_ae	jmp	#LR__0832
0a250     12 21 02 F6 | 	mov	local02, local04
0a254     77 00 00 FF 
0a258     30 E5 05 F1 | 	add	objptr, ##61232
0a25c     F2 20 02 F1 | 	add	local02, objptr
0a260     10 01 48 FC | 	wrbyte	#0, local02
0a264     01 24 06 F1 | 	add	local04, #1
0a268     77 00 00 FF 
0a26c     30 E5 85 F1 | 	sub	objptr, ##61232
0a270     D4 FF 9F FD | 	jmp	#LR__0831
0a274                 | LR__0832
0a274                 | LR__0833
0a274     77 00 00 FF 
0a278     30 E5 05 F1 | 	add	objptr, ##61232
0a27c     F2 12 02 F6 | 	mov	arg01, objptr
0a280     77 00 00 FF 
0a284     30 E5 85 F1 | 	sub	objptr, ##61232
0a288     00 FB BF FD | 	call	#_csave_block
0a28c     79 00 00 FF 
0a290     30 E5 05 F1 | 	add	objptr, ##62256
0a294     F2 00 68 FC | 	wrlong	#0, objptr
0a298     79 00 00 FF 
0a29c     30 E5 85 F1 | 	sub	objptr, ##62256
0a2a0     2C 13 06 F6 | 	mov	arg01, #300
0a2a4     64 0D B1 FD | 	call	#__system___waitms
0a2a8                 | LR__0834
0a2a8     A7 F0 03 F6 | 	mov	ptra, fp
0a2ac     B2 00 A0 FD | 	call	#popregs_
0a2b0                 | _csave_addtoblock_ret
0a2b0     2D 00 64 FD | 	ret
0a2b4                 | 
0a2b4                 | ' 
0a2b4                 | ' sub test_csave
0a2b4                 | _test_csave
0a2b4     04 4A 05 F6 | 	mov	COUNT_, #4
0a2b8     A8 00 A0 FD | 	call	#pushregs_
0a2bc     C0 F0 07 F1 | 	add	ptra, #192
0a2c0                 | ' 'dim fileheader,savestart, saveptr as ulong
0a2c0                 | ' 
0a2c0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a2c0     6A 00 00 FF 
0a2c4     08 E4 05 F1 | 	add	objptr, ##54280
0a2c8     F2 12 02 FB | 	rdlong	arg01, objptr
0a2cc     6A 00 00 FF 
0a2d0     08 E4 85 F1 | 	sub	objptr, ##54280
0a2d4     EC D5 B0 FD | 	call	#_pslpeek
0a2d8     FF FF 7F FF 
0a2dc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a2e0     0C 00 90 5D |  if_ne	jmp	#LR__0840
0a2e4     1B 12 06 F6 | 	mov	arg01, #27
0a2e8     1C D4 B0 FD | 	call	#_printerror
0a2ec     0C 03 90 FD | 	jmp	#LR__0852
0a2f0                 | LR__0840
0a2f0     04 F8 BF FD | 	call	#_pop
0a2f4     FF 1E 02 F6 | 	mov	local01, result3
0a2f8     90 4E 05 F1 | 	add	fp, #144
0a2fc     A7 FA 61 FC | 	wrlong	result1, fp
0a300     04 4E 05 F1 | 	add	fp, #4
0a304     A7 FC 61 FC | 	wrlong	result2, fp
0a308     04 4E 05 F1 | 	add	fp, #4
0a30c     A7 1E 62 FC | 	wrlong	local01, fp
0a310                 | ' t1=pop()
0a310                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a310     98 4E 85 F1 | 	sub	fp, #152
0a314     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a318     53 01 00 5F 
0a31c     A5 1F 06 56 |  if_ne	mov	local01, ##@LR__4688
0a320     8C 4E 05 51 |  if_ne	add	fp, #140
0a324     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a328     8C 4E 85 51 |  if_ne	sub	fp, #140
0a32c     90 4E 05 A1 |  if_e	add	fp, #144
0a330     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a334     04 4E 85 A1 |  if_e	sub	fp, #4
0a338     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a33c     8C 4E 85 A1 |  if_e	sub	fp, #140
0a340                 | ' 
0a340                 | ' ' prepare 1 kHz header wave
0a340                 | ' 
0a340                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a340     A7 00 68 FC | 	wrlong	#0, fp
0a344     97 34 48 FB | 	callpa	#(@LR__0844-@LR__0841)>>2,fcache_load_ptr_
0a348                 | LR__0841
0a348     A7 1E 02 FB | 	rdlong	local01, fp
0a34c     0F 1F 52 F6 | 	abs	local01, local01 wc
0a350     07 1E 06 F5 | 	and	local01, #7
0a354     0F 1F 82 F6 | 	negc	local01, local01
0a358     04 1E 56 F2 | 	cmps	local01, #4 wc
0a35c     20 00 90 3D |  if_ae	jmp	#LR__0842
0a360     A7 1E 02 FB | 	rdlong	local01, fp
0a364     77 00 00 FF 
0a368     30 E4 05 F1 | 	add	objptr, ##60976
0a36c     F2 1E 02 F1 | 	add	local01, objptr
0a370     0F FF 48 FC | 	wrbyte	#127, local01
0a374     77 00 00 FF 
0a378     30 E4 85 F1 | 	sub	objptr, ##60976
0a37c     1C 00 90 FD | 	jmp	#LR__0843
0a380                 | LR__0842
0a380     A7 1E 02 FB | 	rdlong	local01, fp
0a384     77 00 00 FF 
0a388     30 E4 05 F1 | 	add	objptr, ##60976
0a38c     F2 1E 02 F1 | 	add	local01, objptr
0a390     0F 01 49 FC | 	wrbyte	#128, local01
0a394     77 00 00 FF 
0a398     30 E4 85 F1 | 	sub	objptr, ##60976
0a39c                 | LR__0843
0a39c     A7 1E 02 FB | 	rdlong	local01, fp
0a3a0     01 1E 06 F1 | 	add	local01, #1
0a3a4     A7 1E 62 FC | 	wrlong	local01, fp
0a3a8     00 1F 56 F2 | 	cmps	local01, #256 wc
0a3ac     98 FF 9F CD |  if_b	jmp	#LR__0841
0a3b0                 | LR__0844
0a3b0     77 00 00 FF 
0a3b4     30 E4 05 F1 | 	add	objptr, ##60976
0a3b8     F2 14 02 F6 | 	mov	arg02, objptr
0a3bc     07 12 06 F6 | 	mov	arg01, #7
0a3c0     0F 00 00 FF 
0a3c4     40 17 06 F6 | 	mov	arg03, ##8000
0a3c8     0E 18 C6 F9 | 	decod	arg04, #14
0a3cc     00 1B 06 F6 | 	mov	arg05, #256
0a3d0     00 1C 06 F6 | 	mov	arg06, #0
0a3d4     6B 00 00 FF 
0a3d8     70 E5 85 F1 | 	sub	objptr, ##55152
0a3dc     84 05 B1 FD | 	call	#_audio096_spin2_play8
0a3e0     0B 00 00 FF 
0a3e4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a3e8     05 00 00 FF 
0a3ec     B8 13 06 F6 | 	mov	arg01, ##3000
0a3f0     18 0C B1 FD | 	call	#__system___waitms
0a3f4     79 00 00 FF 
0a3f8     30 E5 05 F1 | 	add	objptr, ##62256
0a3fc     F2 00 68 FC | 	wrlong	#0, objptr
0a400     79 00 00 FF 
0a404     30 E5 85 F1 | 	sub	objptr, ##62256
0a408     72 12 06 F6 | 	mov	arg01, #114
0a40c     00 14 06 F6 | 	mov	arg02, #0
0a410     5C FD BF FD | 	call	#_csave_addtoblock
0a414     62 12 06 F6 | 	mov	arg01, #98
0a418     00 14 06 F6 | 	mov	arg02, #0
0a41c     50 FD BF FD | 	call	#_csave_addtoblock
0a420     61 12 06 F6 | 	mov	arg01, #97
0a424     00 14 06 F6 | 	mov	arg02, #0
0a428     44 FD BF FD | 	call	#_csave_addtoblock
0a42c     0D 12 06 F6 | 	mov	arg01, #13
0a430     00 14 06 F6 | 	mov	arg02, #0
0a434     38 FD BF FD | 	call	#_csave_addtoblock
0a438                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a438                 | ' waitms 3000 
0a438                 | ' 
0a438                 | ' blockptr=0
0a438                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a438                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a438     A7 02 68 FC | 	wrlong	#1, fp
0a43c     8C 4E 05 F1 | 	add	fp, #140
0a440     A7 12 02 FB | 	rdlong	arg01, fp
0a444     8C 4E 85 F1 | 	sub	fp, #140
0a448     09 21 02 F6 | 	mov	local02, arg01
0a44c     97 06 48 FB | 	callpa	#(@LR__0846-@LR__0845)>>2,fcache_load_ptr_
0a450                 | LR__0845
0a450     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a454     01 20 06 51 |  if_ne	add	local02, #1
0a458     F4 FF 9F 5D |  if_ne	jmp	#LR__0845
0a45c                 | LR__0846
0a45c     09 21 82 F1 | 	sub	local02, arg01
0a460     10 23 02 F6 | 	mov	local03, local02
0a464     01 22 06 F1 | 	add	local03, #1
0a468                 | LR__0847
0a468     A7 1E 02 FB | 	rdlong	local01, fp
0a46c     11 1F 52 F2 | 	cmps	local01, local03 wc
0a470     34 00 90 3D |  if_ae	jmp	#LR__0848
0a474     8C 4E 05 F1 | 	add	fp, #140
0a478     A7 12 02 FB | 	rdlong	arg01, fp
0a47c     8C 4E 85 F1 | 	sub	fp, #140
0a480     A7 14 02 FB | 	rdlong	arg02, fp
0a484     01 16 06 F6 | 	mov	arg03, #1
0a488     EC 29 B1 FD | 	call	#__system__Mid_S
0a48c     FD 12 C2 FA | 	rdbyte	arg01, result1
0a490     00 14 06 F6 | 	mov	arg02, #0
0a494     D8 FC BF FD | 	call	#_csave_addtoblock
0a498     A7 1E 02 FB | 	rdlong	local01, fp
0a49c     01 1E 06 F1 | 	add	local01, #1
0a4a0     A7 1E 62 FC | 	wrlong	local01, fp
0a4a4     C0 FF 9F FD | 	jmp	#LR__0847
0a4a8                 | LR__0848
0a4a8     00 12 06 F6 | 	mov	arg01, #0
0a4ac     00 14 06 F6 | 	mov	arg02, #0
0a4b0     BC FC BF FD | 	call	#_csave_addtoblock
0a4b4     72 12 06 F6 | 	mov	arg01, #114
0a4b8     00 14 06 F6 | 	mov	arg02, #0
0a4bc     B0 FC BF FD | 	call	#_csave_addtoblock
0a4c0     62 12 06 F6 | 	mov	arg01, #98
0a4c4     00 14 06 F6 | 	mov	arg02, #0
0a4c8     A4 FC BF FD | 	call	#_csave_addtoblock
0a4cc     73 12 06 F6 | 	mov	arg01, #115
0a4d0     00 14 06 F6 | 	mov	arg02, #0
0a4d4     98 FC BF FD | 	call	#_csave_addtoblock
0a4d8     0D 12 06 F6 | 	mov	arg01, #13
0a4dc     00 14 06 F6 | 	mov	arg02, #0
0a4e0     8C FC BF FD | 	call	#_csave_addtoblock
0a4e4     6A 00 00 FF 
0a4e8     08 E4 05 F1 | 	add	objptr, ##54280
0a4ec     F2 1E 02 FB | 	rdlong	local01, objptr
0a4f0     6A 00 00 FF 
0a4f4     08 E4 85 F1 | 	sub	objptr, ##54280
0a4f8     9C 4E 05 F1 | 	add	fp, #156
0a4fc     A7 1E 62 FC | 	wrlong	local01, fp
0a500     9C 4E 85 F1 | 	sub	fp, #156
0a504                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a504                 | ' 
0a504                 | ' saveptr=programstart
0a504                 | ' do
0a504                 | LR__0849
0a504     A0 4E 05 F1 | 	add	fp, #160
0a508     A7 12 02 F6 | 	mov	arg01, fp
0a50c     04 4E 85 F1 | 	sub	fp, #4
0a510     A7 14 02 FB | 	rdlong	arg02, fp
0a514     9C 4E 85 F1 | 	sub	fp, #156
0a518     18 16 06 F6 | 	mov	arg03, #24
0a51c     0B 00 00 FF 
0a520     C0 E4 05 F1 | 	add	objptr, ##5824
0a524     88 FC B0 FD | 	call	#_psram_spin2_read1
0a528     0C 4E 05 F1 | 	add	fp, #12
0a52c     A7 12 02 F6 | 	mov	arg01, fp
0a530     9C 4E 05 F1 | 	add	fp, #156
0a534     A7 14 02 FB | 	rdlong	arg02, fp
0a538     04 4E 05 F1 | 	add	fp, #4
0a53c     A7 16 02 FB | 	rdlong	arg03, fp
0a540     AC 4E 85 F1 | 	sub	fp, #172
0a544     68 FC B0 FD | 	call	#_psram_spin2_read1
0a548     0B 00 00 FF 
0a54c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a550     AC 4E 05 F1 | 	add	fp, #172
0a554     A7 12 02 FB | 	rdlong	arg01, fp
0a558     AC 4E 85 F1 | 	sub	fp, #172
0a55c     00 14 06 F6 | 	mov	arg02, #0
0a560     0C FC BF FD | 	call	#_csave_addtoblock
0a564                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a564                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a564                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a564                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a564     A7 00 68 FC | 	wrlong	#0, fp
0a568     AC 4E 05 F1 | 	add	fp, #172
0a56c     A7 24 02 FB | 	rdlong	local04, fp
0a570     AC 4E 85 F1 | 	sub	fp, #172
0a574                 | LR__0850
0a574     A7 1E 02 FB | 	rdlong	local01, fp
0a578     12 1F 52 F2 | 	cmps	local01, local04 wc
0a57c     2C 00 90 3D |  if_ae	jmp	#LR__0851
0a580     A7 22 02 FB | 	rdlong	local03, fp
0a584     0C 4E 05 F1 | 	add	fp, #12
0a588     A7 22 02 F1 | 	add	local03, fp
0a58c     11 13 C2 FA | 	rdbyte	arg01, local03
0a590     00 14 06 F6 | 	mov	arg02, #0
0a594     0C 4E 85 F1 | 	sub	fp, #12
0a598     D4 FB BF FD | 	call	#_csave_addtoblock
0a59c     A7 22 02 FB | 	rdlong	local03, fp
0a5a0     01 22 06 F1 | 	add	local03, #1
0a5a4     A7 22 62 FC | 	wrlong	local03, fp
0a5a8     C8 FF 9F FD | 	jmp	#LR__0850
0a5ac                 | LR__0851
0a5ac     B4 4E 05 F1 | 	add	fp, #180
0a5b0     A7 1E 02 FB | 	rdlong	local01, fp
0a5b4     18 4E 85 F1 | 	sub	fp, #24
0a5b8     A7 1E 62 FC | 	wrlong	local01, fp
0a5bc     18 4E 05 F1 | 	add	fp, #24
0a5c0     A7 1E 02 FB | 	rdlong	local01, fp
0a5c4     B4 4E 85 F1 | 	sub	fp, #180
0a5c8     FF FF 3F FF 
0a5cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a5d0     30 FF 9F 5D |  if_ne	jmp	#LR__0849
0a5d4     00 12 06 F6 | 	mov	arg01, #0
0a5d8     01 14 06 F6 | 	mov	arg02, #1
0a5dc     90 FB BF FD | 	call	#_csave_addtoblock
0a5e0     56 00 00 FF 
0a5e4     94 E5 05 F1 | 	add	objptr, ##44436
0a5e8     F2 12 02 FB | 	rdlong	arg01, objptr
0a5ec     56 00 00 FF 
0a5f0     94 E5 85 F1 | 	sub	objptr, ##44436
0a5f4     F4 12 06 F1 | 	add	arg01, #244
0a5f8     09 01 58 FC | 	wrword	#0, arg01
0a5fc                 | LR__0852
0a5fc     A7 F0 03 F6 | 	mov	ptra, fp
0a600     B2 00 A0 FD | 	call	#popregs_
0a604                 | _test_csave_ret
0a604     2D 00 64 FD | 	ret
0a608                 | 
0a608                 | ' 
0a608                 | ' ' ----------------- Save the program
0a608                 | ' 
0a608                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a608                 | _do_save
0a608     02 4A 05 F6 | 	mov	COUNT_, #2
0a60c     A8 00 A0 FD | 	call	#pushregs_
0a610     01 00 00 FF 
0a614     BC F0 07 F1 | 	add	ptra, ##700
0a618     01 00 00 FF 
0a61c     10 4E 05 F1 | 	add	fp, ##528
0a620     B1 B0 86 FF 
0a624     A7 E4 68 FC | 	wrlong	##224486002, fp
0a628     01 00 00 FF 
0a62c     10 4E 85 F1 | 	sub	fp, ##528
0a630     C4 F4 BF FD | 	call	#_pop
0a634     FF 16 02 F6 | 	mov	arg03, result3
0a638     A7 FA 61 FC | 	wrlong	result1, fp
0a63c     04 4E 05 F1 | 	add	fp, #4
0a640     A7 FC 61 FC | 	wrlong	result2, fp
0a644     04 4E 05 F1 | 	add	fp, #4
0a648     A7 16 62 FC | 	wrlong	arg03, fp
0a64c     08 4E 85 F1 | 	sub	fp, #8
0a650                 | ' 
0a650                 | ' fileheader=$0D616272' rba+ver'
0a650                 | ' 
0a650                 | ' t1=pop() 
0a650                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a650     6A 00 00 FF 
0a654     08 E4 05 F1 | 	add	objptr, ##54280
0a658     F2 12 02 FB | 	rdlong	arg01, objptr
0a65c     6A 00 00 FF 
0a660     08 E4 85 F1 | 	sub	objptr, ##54280
0a664     5C D2 B0 FD | 	call	#_pslpeek
0a668     FF FF 7F FF 
0a66c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a670     0C 00 90 5D |  if_ne	jmp	#LR__0860
0a674     1B 12 06 F6 | 	mov	arg01, #27
0a678     8C D0 B0 FD | 	call	#_printerror
0a67c     68 02 90 FD | 	jmp	#LR__0866
0a680                 | LR__0860
0a680                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a680     08 4E 05 F1 | 	add	fp, #8
0a684     A7 16 02 FB | 	rdlong	arg03, fp
0a688     08 4E 85 F1 | 	sub	fp, #8
0a68c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a690     18 00 90 5D |  if_ne	jmp	#LR__0861
0a694     A7 12 02 FB | 	rdlong	arg01, fp
0a698     EC 33 B0 FD | 	call	#_convertstring
0a69c     A7 FA 61 FC | 	wrlong	result1, fp
0a6a0     08 4E 05 F1 | 	add	fp, #8
0a6a4     A7 3E 68 FC | 	wrlong	#31, fp
0a6a8     08 4E 85 F1 | 	sub	fp, #8
0a6ac                 | LR__0861
0a6ac                 | ' if t1.result_type=result_string then
0a6ac     08 4E 05 F1 | 	add	fp, #8
0a6b0     A7 1E 02 FB | 	rdlong	local01, fp
0a6b4     08 4E 85 F1 | 	sub	fp, #8
0a6b8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a6bc     28 02 90 5D |  if_ne	jmp	#LR__0865
0a6c0                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a6c0     A7 12 02 FB | 	rdlong	arg01, fp
0a6c4     53 01 00 FF 
0a6c8     B0 15 06 F6 | 	mov	arg02, ##@LR__4689
0a6cc     70 06 B1 FD | 	call	#__system___string_cmp
0a6d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6d4     53 01 00 AF 
0a6d8     B1 1F 06 A6 |  if_e	mov	local01, ##@LR__4690
0a6dc     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a6e0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a6e0     09 12 06 F6 | 	mov	arg01, #9
0a6e4     98 55 B1 FD | 	call	#__system__close
0a6e8     09 1E 06 F6 | 	mov	local01, #9
0a6ec     72 00 00 FF 
0a6f0     18 E4 05 F1 | 	add	objptr, ##58392
0a6f4     F2 12 02 FB | 	rdlong	arg01, objptr
0a6f8     72 00 00 FF 
0a6fc     18 E4 85 F1 | 	sub	objptr, ##58392
0a700     53 01 00 FF 
0a704     BC 15 06 F6 | 	mov	arg02, ##@LR__4691
0a708     68 06 B1 FD | 	call	#__system___string_concat
0a70c     FD 12 02 F6 | 	mov	arg01, result1
0a710     A7 14 02 FB | 	rdlong	arg02, fp
0a714     5C 06 B1 FD | 	call	#__system___string_concat
0a718     FD 14 02 F6 | 	mov	arg02, result1
0a71c     0F 13 02 F6 | 	mov	arg01, local01
0a720     0D 16 06 F6 | 	mov	arg03, #13
0a724     F4 11 B1 FD | 	call	#__system___basic_open_string
0a728     01 00 00 FF 
0a72c     0C 4E 05 F1 | 	add	fp, ##524
0a730     A7 0A 68 FC | 	wrlong	#5, fp
0a734     6A 00 00 FF 
0a738     08 E4 05 F1 | 	add	objptr, ##54280
0a73c     F2 1E 02 FB | 	rdlong	local01, objptr
0a740     6A 00 00 FF 
0a744     08 E4 85 F1 | 	sub	objptr, ##54280
0a748     0C 4E 05 F1 | 	add	fp, #12
0a74c     A7 1E 62 FC | 	wrlong	local01, fp
0a750     01 00 00 FF 
0a754     18 4E 85 F1 | 	sub	fp, ##536
0a758                 | ' '  put #9,1,fileheader,1
0a758                 | '   i=5
0a758                 | '   saveptr=programstart
0a758                 | '   do
0a758                 | LR__0862
0a758     01 00 00 FF 
0a75c     1C 4E 05 F1 | 	add	fp, ##540
0a760     A7 12 02 F6 | 	mov	arg01, fp
0a764     04 4E 85 F1 | 	sub	fp, #4
0a768     A7 14 02 FB | 	rdlong	arg02, fp
0a76c     01 00 00 FF 
0a770     18 4E 85 F1 | 	sub	fp, ##536
0a774     18 16 06 F6 | 	mov	arg03, #24
0a778     0B 00 00 FF 
0a77c     C0 E4 05 F1 | 	add	objptr, ##5824
0a780     2C FA B0 FD | 	call	#_psram_spin2_read1
0a784     01 00 00 FF 
0a788     34 4E 05 F1 | 	add	fp, ##564
0a78c     A7 12 02 F6 | 	mov	arg01, fp
0a790     10 4E 85 F1 | 	sub	fp, #16
0a794     A7 14 02 FB | 	rdlong	arg02, fp
0a798     04 4E 05 F1 | 	add	fp, #4
0a79c     A7 16 02 FB | 	rdlong	arg03, fp
0a7a0     01 00 00 FF 
0a7a4     28 4E 85 F1 | 	sub	fp, ##552
0a7a8     04 FA B0 FD | 	call	#_psram_spin2_read1
0a7ac     0B 00 00 FF 
0a7b0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a7b4     53 01 00 FF 
0a7b8     BE 1F 06 F6 | 	mov	local01, ##@LR__4692
0a7bc     01 00 00 FF 
0a7c0     B4 4E 05 F1 | 	add	fp, ##692
0a7c4     A7 1E 62 FC | 	wrlong	local01, fp
0a7c8                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a7c8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a7c8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a7c8     A8 4E 85 F1 | 	sub	fp, #168
0a7cc     A7 02 68 FC | 	wrlong	#1, fp
0a7d0     1C 4E 05 F1 | 	add	fp, #28
0a7d4     A7 20 02 FB | 	rdlong	local02, fp
0a7d8     01 00 00 FF 
0a7dc     28 4E 85 F1 | 	sub	fp, ##552
0a7e0     01 20 06 F1 | 	add	local02, #1
0a7e4                 | LR__0863
0a7e4     01 00 00 FF 
0a7e8     0C 4E 05 F1 | 	add	fp, ##524
0a7ec     A7 1E 02 FB | 	rdlong	local01, fp
0a7f0     01 00 00 FF 
0a7f4     0C 4E 85 F1 | 	sub	fp, ##524
0a7f8     10 1F 52 F2 | 	cmps	local01, local02 wc
0a7fc     64 00 90 3D |  if_ae	jmp	#LR__0864
0a800     01 00 00 FF 
0a804     B4 4E 05 F1 | 	add	fp, ##692
0a808     A7 1E 02 FB | 	rdlong	local01, fp
0a80c     A8 4E 85 F1 | 	sub	fp, #168
0a810     A7 16 02 FB | 	rdlong	arg03, fp
0a814     01 16 86 F1 | 	sub	arg03, #1
0a818     28 4E 05 F1 | 	add	fp, #40
0a81c     A7 16 02 F1 | 	add	arg03, fp
0a820     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a824     01 00 00 FF 
0a828     34 4E 85 F1 | 	sub	fp, ##564
0a82c     F4 26 B1 FD | 	call	#__system__Chr_S
0a830     FD 14 02 F6 | 	mov	arg02, result1
0a834     0F 13 02 F6 | 	mov	arg01, local01
0a838     38 05 B1 FD | 	call	#__system___string_concat
0a83c     01 00 00 FF 
0a840     B4 4E 05 F1 | 	add	fp, ##692
0a844     A7 FA 61 FC | 	wrlong	result1, fp
0a848     A8 4E 85 F1 | 	sub	fp, #168
0a84c     A7 1E 02 FB | 	rdlong	local01, fp
0a850     01 1E 06 F1 | 	add	local01, #1
0a854     A7 1E 62 FC | 	wrlong	local01, fp
0a858     01 00 00 FF 
0a85c     0C 4E 85 F1 | 	sub	fp, ##524
0a860     80 FF 9F FD | 	jmp	#LR__0863
0a864                 | LR__0864
0a864                 | '  '   put #9,i,header(3),1 : i+=4
0a864                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a864                 | '      print #9, saveline$
0a864     09 12 06 F6 | 	mov	arg01, #9
0a868     E0 5D B1 FD | 	call	#__system___getiolock_0442
0a86c     FD 12 02 F6 | 	mov	arg01, result1
0a870     A4 04 B1 FD | 	call	#__system___lockmem
0a874     01 00 00 FF 
0a878     B4 4E 05 F1 | 	add	fp, ##692
0a87c     A7 14 02 FB | 	rdlong	arg02, fp
0a880     01 00 00 FF 
0a884     B4 4E 85 F1 | 	sub	fp, ##692
0a888     09 12 06 F6 | 	mov	arg01, #9
0a88c     00 16 06 F6 | 	mov	arg03, #0
0a890     8C 11 B1 FD | 	call	#__system___basic_print_string
0a894     09 12 06 F6 | 	mov	arg01, #9
0a898     0A 14 06 F6 | 	mov	arg02, #10
0a89c     00 16 06 F6 | 	mov	arg03, #0
0a8a0     24 11 B1 FD | 	call	#__system___basic_print_char
0a8a4     09 12 06 F6 | 	mov	arg01, #9
0a8a8     A0 5D B1 FD | 	call	#__system___getiolock_0442
0a8ac     FD 00 68 FC | 	wrlong	#0, result1
0a8b0     01 00 00 FF 
0a8b4     30 4E 05 F1 | 	add	fp, ##560
0a8b8     A7 1E 02 FB | 	rdlong	local01, fp
0a8bc     18 4E 85 F1 | 	sub	fp, #24
0a8c0     A7 1E 62 FC | 	wrlong	local01, fp
0a8c4     18 4E 05 F1 | 	add	fp, #24
0a8c8     A7 1E 02 FB | 	rdlong	local01, fp
0a8cc     01 00 00 FF 
0a8d0     30 4E 85 F1 | 	sub	fp, ##560
0a8d4     FF FF 3F FF 
0a8d8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a8dc     78 FE 9F 5D |  if_ne	jmp	#LR__0862
0a8e0                 | '   close #9  
0a8e0     09 12 06 F6 | 	mov	arg01, #9
0a8e4     98 53 B1 FD | 	call	#__system__close
0a8e8                 | LR__0865
0a8e8                 | LR__0866
0a8e8     A7 F0 03 F6 | 	mov	ptra, fp
0a8ec     B2 00 A0 FD | 	call	#popregs_
0a8f0                 | _do_save_ret
0a8f0     2D 00 64 FD | 	ret
0a8f4                 | 
0a8f4                 | ' 
0a8f4                 | ' '----------------- Load the program
0a8f4                 | ' 'lo todo: errors while loading
0a8f4                 | ' sub do_load
0a8f4                 | _do_load
0a8f4     01 4A 05 F6 | 	mov	COUNT_, #1
0a8f8     A8 00 A0 FD | 	call	#pushregs_
0a8fc     A4 F0 07 F1 | 	add	ptra, #164
0a900     A0 4E 05 F1 | 	add	fp, #160
0a904     A7 12 02 F6 | 	mov	arg01, fp
0a908     80 4E 85 F1 | 	sub	fp, #128
0a90c     A7 14 02 F6 | 	mov	arg02, fp
0a910     20 4E 85 F1 | 	sub	fp, #32
0a914     09 15 62 FC | 	wrlong	arg02, arg01
0a918     DC F1 BF FD | 	call	#_pop
0a91c     FF 1A 02 F6 | 	mov	arg05, result3
0a920     A7 FA 61 FC | 	wrlong	result1, fp
0a924     04 4E 05 F1 | 	add	fp, #4
0a928     A7 FC 61 FC | 	wrlong	result2, fp
0a92c     04 4E 05 F1 | 	add	fp, #4
0a930     A7 1A 62 FC | 	wrlong	arg05, fp
0a934                 | ' 
0a934                 | ' lpoke varptr(line2$),varptr(line2)
0a934                 | ' t1=pop() 
0a934                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a934                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a934     08 4E 85 F1 | 	sub	fp, #8
0a938     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a93c     18 00 90 5D |  if_ne	jmp	#LR__0870
0a940     A7 12 02 FB | 	rdlong	arg01, fp
0a944     40 31 B0 FD | 	call	#_convertstring
0a948     A7 FA 61 FC | 	wrlong	result1, fp
0a94c     08 4E 05 F1 | 	add	fp, #8
0a950     A7 3E 68 FC | 	wrlong	#31, fp
0a954     08 4E 85 F1 | 	sub	fp, #8
0a958                 | LR__0870
0a958                 | ' if t1.result_type=result_string then
0a958     08 4E 05 F1 | 	add	fp, #8
0a95c     A7 1E 02 FB | 	rdlong	local01, fp
0a960     08 4E 85 F1 | 	sub	fp, #8
0a964     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a968     40 03 90 5D |  if_ne	jmp	#LR__0877
0a96c     7C 2B B0 FD | 	call	#_do_new
0a970                 | '   do_new
0a970                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a970     A7 12 02 FB | 	rdlong	arg01, fp
0a974     53 01 00 FF 
0a978     BF 15 06 F6 | 	mov	arg02, ##@LR__4693
0a97c     C0 03 B1 FD | 	call	#__system___string_cmp
0a980     00 FA 0D F2 | 	cmp	result1, #0 wz
0a984     53 01 00 AF 
0a988     C0 1F 06 A6 |  if_e	mov	local01, ##@LR__4694
0a98c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a990                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a990     09 12 06 F6 | 	mov	arg01, #9
0a994     E8 52 B1 FD | 	call	#__system__close
0a998     09 1E 06 F6 | 	mov	local01, #9
0a99c     72 00 00 FF 
0a9a0     18 E4 05 F1 | 	add	objptr, ##58392
0a9a4     F2 12 02 FB | 	rdlong	arg01, objptr
0a9a8     72 00 00 FF 
0a9ac     18 E4 85 F1 | 	sub	objptr, ##58392
0a9b0     53 01 00 FF 
0a9b4     CB 15 06 F6 | 	mov	arg02, ##@LR__4695
0a9b8     B8 03 B1 FD | 	call	#__system___string_concat
0a9bc     FD 12 02 F6 | 	mov	arg01, result1
0a9c0     A7 14 02 FB | 	rdlong	arg02, fp
0a9c4     AC 03 B1 FD | 	call	#__system___string_concat
0a9c8     FD 14 02 F6 | 	mov	arg02, result1
0a9cc     0F 13 02 F6 | 	mov	arg01, local01
0a9d0     00 16 06 F6 | 	mov	arg03, #0
0a9d4     44 0F B1 FD | 	call	#__system___basic_open_string
0a9d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0a9dc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a9e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0a9e4     10 4E 05 F1 | 	add	fp, #16
0a9e8     A7 FA 61 FC | 	wrlong	result1, fp
0a9ec                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a9ec     10 4E 85 F1 | 	sub	fp, #16
0a9f0     9C 00 90 AD |  if_e	jmp	#LR__0871
0a9f4     00 12 06 F6 | 	mov	arg01, #0
0a9f8     50 5C B1 FD | 	call	#__system___getiolock_0442
0a9fc     FD 12 02 F6 | 	mov	arg01, result1
0aa00     14 03 B1 FD | 	call	#__system___lockmem
0aa04     53 01 00 FF 
0aa08     CD 15 06 F6 | 	mov	arg02, ##@LR__4696
0aa0c     00 12 06 F6 | 	mov	arg01, #0
0aa10     00 16 06 F6 | 	mov	arg03, #0
0aa14     08 10 B1 FD | 	call	#__system___basic_print_string
0aa18     10 4E 05 F1 | 	add	fp, #16
0aa1c     A7 14 02 FB | 	rdlong	arg02, fp
0aa20     10 4E 85 F1 | 	sub	fp, #16
0aa24     00 12 06 F6 | 	mov	arg01, #0
0aa28     00 16 06 F6 | 	mov	arg03, #0
0aa2c     0A 18 06 F6 | 	mov	arg04, #10
0aa30     30 10 B1 FD | 	call	#__system___basic_print_integer
0aa34     53 01 00 FF 
0aa38     DB 15 06 F6 | 	mov	arg02, ##@LR__4697
0aa3c     00 12 06 F6 | 	mov	arg01, #0
0aa40     00 16 06 F6 | 	mov	arg03, #0
0aa44     D8 0F B1 FD | 	call	#__system___basic_print_string
0aa48     10 4E 05 F1 | 	add	fp, #16
0aa4c     A7 12 02 FB | 	rdlong	arg01, fp
0aa50     10 4E 85 F1 | 	sub	fp, #16
0aa54     F8 28 B1 FD | 	call	#__system___strerror
0aa58     FD 14 02 F6 | 	mov	arg02, result1
0aa5c     00 12 06 F6 | 	mov	arg01, #0
0aa60     00 16 06 F6 | 	mov	arg03, #0
0aa64     B8 0F B1 FD | 	call	#__system___basic_print_string
0aa68     00 12 06 F6 | 	mov	arg01, #0
0aa6c     0A 14 06 F6 | 	mov	arg02, #10
0aa70     00 16 06 F6 | 	mov	arg03, #0
0aa74     50 0F B1 FD | 	call	#__system___basic_print_char
0aa78     00 12 06 F6 | 	mov	arg01, #0
0aa7c     CC 5B B1 FD | 	call	#__system___getiolock_0442
0aa80     FD 00 68 FC | 	wrlong	#0, result1
0aa84     09 12 06 F6 | 	mov	arg01, #9
0aa88     F4 51 B1 FD | 	call	#__system__close
0aa8c     24 02 90 FD | 	jmp	#LR__0879
0aa90                 | LR__0871
0aa90     0C 4E 05 F1 | 	add	fp, #12
0aa94     A7 0A 68 FC | 	wrlong	#5, fp
0aa98                 | '   i=5
0aa98                 | '   get #9,1,header,1
0aa98     0C 4E 05 F1 | 	add	fp, #12
0aa9c     A7 16 02 F6 | 	mov	arg03, fp
0aaa0     18 4E 85 F1 | 	sub	fp, #24
0aaa4     09 12 06 F6 | 	mov	arg01, #9
0aaa8     01 14 06 F6 | 	mov	arg02, #1
0aaac     01 18 06 F6 | 	mov	arg04, #1
0aab0     04 1A 06 F6 | 	mov	arg05, #4
0aab4     78 10 B1 FD | 	call	#__system___basic_get
0aab8                 | '   
0aab8                 | '   if header<>$0D616272 then 
0aab8     18 4E 05 F1 | 	add	fp, #24
0aabc     A7 1E 02 FB | 	rdlong	local01, fp
0aac0     18 4E 85 F1 | 	sub	fp, #24
0aac4     B1 B0 06 FF 
0aac8     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0aacc     F0 00 90 AD |  if_e	jmp	#LR__0874
0aad0                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0aad0     09 12 06 F6 | 	mov	arg01, #9
0aad4     A8 51 B1 FD | 	call	#__system__close
0aad8     09 1E 06 F6 | 	mov	local01, #9
0aadc     72 00 00 FF 
0aae0     18 E4 05 F1 | 	add	objptr, ##58392
0aae4     F2 12 02 FB | 	rdlong	arg01, objptr
0aae8     72 00 00 FF 
0aaec     18 E4 85 F1 | 	sub	objptr, ##58392
0aaf0     53 01 00 FF 
0aaf4     DE 15 06 F6 | 	mov	arg02, ##@LR__4698
0aaf8     78 02 B1 FD | 	call	#__system___string_concat
0aafc     FD 12 02 F6 | 	mov	arg01, result1
0ab00     A7 14 02 FB | 	rdlong	arg02, fp
0ab04     6C 02 B1 FD | 	call	#__system___string_concat
0ab08     FD 14 02 F6 | 	mov	arg02, result1
0ab0c     0F 13 02 F6 | 	mov	arg01, local01
0ab10     00 16 06 F6 | 	mov	arg03, #0
0ab14     04 0E B1 FD | 	call	#__system___basic_open_string
0ab18                 | '     do
0ab18                 | LR__0872
0ab18     09 12 06 F6 | 	mov	arg01, #9
0ab1c     04 04 B1 FD | 	call	#__system___basic_read_line
0ab20     56 00 00 FF 
0ab24     A0 E5 05 F1 | 	add	objptr, ##44448
0ab28     F2 FA 61 FC | 	wrlong	result1, objptr
0ab2c                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0ab2c     56 00 00 FF 
0ab30     A0 E5 85 F1 | 	sub	objptr, ##44448
0ab34     FD 12 02 F6 | 	mov	arg01, result1
0ab38     01 14 06 F6 | 	mov	arg02, #1
0ab3c     20 22 B1 FD | 	call	#__system__Left_S
0ab40     FD 12 02 F6 | 	mov	arg01, result1
0ab44     53 01 00 FF 
0ab48     E0 15 06 F6 | 	mov	arg02, ##@LR__4699
0ab4c     F0 01 B1 FD | 	call	#__system___string_cmp
0ab50     00 FA 55 F2 | 	cmps	result1, #0 wc
0ab54     34 00 90 CD |  if_b	jmp	#LR__0873
0ab58     56 00 00 FF 
0ab5c     A0 E5 05 F1 | 	add	objptr, ##44448
0ab60     F2 12 02 FB | 	rdlong	arg01, objptr
0ab64     56 00 00 FF 
0ab68     A0 E5 85 F1 | 	sub	objptr, ##44448
0ab6c     01 14 06 F6 | 	mov	arg02, #1
0ab70     EC 21 B1 FD | 	call	#__system__Left_S
0ab74     FD 12 02 F6 | 	mov	arg01, result1
0ab78     53 01 00 FF 
0ab7c     E2 15 06 F6 | 	mov	arg02, ##@LR__4700
0ab80     BC 01 B1 FD | 	call	#__system___string_cmp
0ab84     01 FA 55 F2 | 	cmps	result1, #1 wc
0ab88     90 5E BF CD |  if_b	call	#_interpret
0ab8c                 | LR__0873
0ab8c     56 00 00 FF 
0ab90     A0 E5 05 F1 | 	add	objptr, ##44448
0ab94     F2 12 02 FB | 	rdlong	arg01, objptr
0ab98     56 00 00 FF 
0ab9c     A0 E5 85 F1 | 	sub	objptr, ##44448
0aba0     53 01 00 FF 
0aba4     E4 15 06 F6 | 	mov	arg02, ##@LR__4701
0aba8     94 01 B1 FD | 	call	#__system___string_cmp
0abac     00 FA 0D F2 | 	cmp	result1, #0 wz
0abb0     64 FF 9F 5D |  if_ne	jmp	#LR__0872
0abb4                 | '     close #9
0abb4     09 12 06 F6 | 	mov	arg01, #9
0abb8     C4 50 B1 FD | 	call	#__system__close
0abbc     F4 00 90 FD | 	jmp	#LR__0878
0abc0                 | LR__0874
0abc0                 | '   'printerror(26) : close #9 : return
0abc0                 | '     do
0abc0                 | LR__0875
0abc0                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0abc0     0C 4E 05 F1 | 	add	fp, #12
0abc4     A7 14 02 FB | 	rdlong	arg02, fp
0abc8     10 4E 05 F1 | 	add	fp, #16
0abcc     A7 16 02 F6 | 	mov	arg03, fp
0abd0     1C 4E 85 F1 | 	sub	fp, #28
0abd4     09 12 06 F6 | 	mov	arg01, #9
0abd8     01 18 06 F6 | 	mov	arg04, #1
0abdc     04 1A 06 F6 | 	mov	arg05, #4
0abe0     4C 0F B1 FD | 	call	#__system___basic_get
0abe4     14 4E 05 F1 | 	add	fp, #20
0abe8     A7 FA 61 FC | 	wrlong	result1, fp
0abec     08 4E 85 F1 | 	sub	fp, #8
0abf0     A7 1E 02 FB | 	rdlong	local01, fp
0abf4     04 1E 06 F1 | 	add	local01, #4
0abf8     A7 1E 62 FC | 	wrlong	local01, fp
0abfc     10 4E 05 F1 | 	add	fp, #16
0ac00     A7 1E 02 FB | 	rdlong	local01, fp
0ac04     04 4E 05 F1 | 	add	fp, #4
0ac08     A7 1E 02 F1 | 	add	local01, fp
0ac0c     0F 01 48 FC | 	wrbyte	#0, local01
0ac10                 | '       if amount=1 then  
0ac10     0C 4E 85 F1 | 	sub	fp, #12
0ac14     A7 1E 02 FB | 	rdlong	local01, fp
0ac18     14 4E 85 F1 | 	sub	fp, #20
0ac1c     01 1E 0E F2 | 	cmp	local01, #1 wz
0ac20     68 00 90 5D |  if_ne	jmp	#LR__0876
0ac24                 | '         get #9,i,line2(0),linelength : i+=linelength
0ac24     0C 4E 05 F1 | 	add	fp, #12
0ac28     A7 14 02 FB | 	rdlong	arg02, fp
0ac2c     14 4E 05 F1 | 	add	fp, #20
0ac30     A7 16 02 F6 | 	mov	arg03, fp
0ac34     04 4E 85 F1 | 	sub	fp, #4
0ac38     A7 18 02 FB | 	rdlong	arg04, fp
0ac3c     1C 4E 85 F1 | 	sub	fp, #28
0ac40     09 12 06 F6 | 	mov	arg01, #9
0ac44     01 1A 06 F6 | 	mov	arg05, #1
0ac48     E4 0E B1 FD | 	call	#__system___basic_get
0ac4c     0C 4E 05 F1 | 	add	fp, #12
0ac50     A7 1E 02 FB | 	rdlong	local01, fp
0ac54     10 4E 05 F1 | 	add	fp, #16
0ac58     A7 1A 02 FB | 	rdlong	arg05, fp
0ac5c     0D 1F 02 F1 | 	add	local01, arg05
0ac60     10 4E 85 F1 | 	sub	fp, #16
0ac64     A7 1E 62 FC | 	wrlong	local01, fp
0ac68     94 4E 05 F1 | 	add	fp, #148
0ac6c     A7 1E 02 FB | 	rdlong	local01, fp
0ac70     A0 4E 85 F1 | 	sub	fp, #160
0ac74     56 00 00 FF 
0ac78     A0 E5 05 F1 | 	add	objptr, ##44448
0ac7c     F2 1E 62 FC | 	wrlong	local01, objptr
0ac80     56 00 00 FF 
0ac84     A0 E5 85 F1 | 	sub	objptr, ##44448
0ac88     90 5D BF FD | 	call	#_interpret
0ac8c                 | LR__0876
0ac8c     14 4E 05 F1 | 	add	fp, #20
0ac90     A7 1E 02 FB | 	rdlong	local01, fp
0ac94     14 4E 85 F1 | 	sub	fp, #20
0ac98     01 1E 56 F2 | 	cmps	local01, #1 wc
0ac9c     20 FF 9F 3D |  if_ae	jmp	#LR__0875
0aca0                 | '     close #9 
0aca0     09 12 06 F6 | 	mov	arg01, #9
0aca4     D8 4F B1 FD | 	call	#__system__close
0aca8     08 00 90 FD | 	jmp	#LR__0878
0acac                 | LR__0877
0acac     1E 12 06 F6 | 	mov	arg01, #30
0acb0     54 CA B0 FD | 	call	#_printerror
0acb4                 | LR__0878
0acb4                 | LR__0879
0acb4     A7 F0 03 F6 | 	mov	ptra, fp
0acb8     B2 00 A0 FD | 	call	#popregs_
0acbc                 | _do_load_ret
0acbc     2D 00 64 FD | 	ret
0acc0                 | 
0acc0                 | ' 
0acc0                 | ' '----------------- Run the program 
0acc0                 | ' 
0acc0                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0acc0                 | ' 
0acc0                 | ' sub do_run
0acc0                 | _do_run
0acc0     01 4A 05 F6 | 	mov	COUNT_, #1
0acc4     A8 00 A0 FD | 	call	#pushregs_
0acc8     6A 00 00 FF 
0accc     08 E4 05 F1 | 	add	objptr, ##54280
0acd0     F2 1C 02 FB | 	rdlong	arg06, objptr
0acd4     0F 00 00 FF 
0acd8     2C E5 05 F1 | 	add	objptr, ##7980
0acdc     F2 1C 62 FC | 	wrlong	arg06, objptr
0ace0     04 E4 05 F1 | 	add	objptr, #4
0ace4     F2 00 68 FC | 	wrlong	#0, objptr
0ace8     04 E4 05 F1 | 	add	objptr, #4
0acec     FF FF FF FF 
0acf0     F2 FE 6B FC | 	wrlong	##-1, objptr
0acf4                 | ' if inrun>0 then 
0acf4     04 E4 05 F1 | 	add	objptr, #4
0acf8     F2 1C 02 FB | 	rdlong	arg06, objptr
0acfc     79 00 00 FF 
0ad00     40 E5 85 F1 | 	sub	objptr, ##62272
0ad04     01 1C 16 F2 | 	cmp	arg06, #1 wc
0ad08     30 00 90 CD |  if_b	jmp	#LR__0880
0ad0c     79 00 00 FF 
0ad10     44 E5 05 F1 | 	add	objptr, ##62276
0ad14     F2 12 02 F6 | 	mov	arg01, objptr
0ad18     10 E4 85 F1 | 	sub	objptr, #16
0ad1c     F2 14 02 FB | 	rdlong	arg02, objptr
0ad20     18 16 06 F6 | 	mov	arg03, #24
0ad24     6E 00 00 FF 
0ad28     74 E4 85 F1 | 	sub	objptr, ##56436
0ad2c     80 F4 B0 FD | 	call	#_psram_spin2_read1
0ad30     0B 00 00 FF 
0ad34     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad38                 | '   psram.read1(varptr(runheader),runptr,24)  
0ad38                 | '   return
0ad38     9C 02 90 FD | 	jmp	#LR__0886
0ad3c                 | LR__0880
0ad3c     79 00 00 FF 
0ad40     40 E5 05 F1 | 	add	objptr, ##62272
0ad44     F2 02 68 FC | 	wrlong	#1, objptr
0ad48     04 E4 05 F1 | 	add	objptr, #4
0ad4c     F2 12 02 F6 | 	mov	arg01, objptr
0ad50     10 E4 85 F1 | 	sub	objptr, #16
0ad54     F2 14 02 FB | 	rdlong	arg02, objptr
0ad58     18 16 06 F6 | 	mov	arg03, #24
0ad5c     6E 00 00 FF 
0ad60     74 E4 85 F1 | 	sub	objptr, ##56436
0ad64     48 F4 B0 FD | 	call	#_psram_spin2_read1
0ad68                 | ' inrun=1
0ad68                 | ' psram.read1(varptr(runheader),runptr,24) 
0ad68                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0ad68     6E 00 00 FF 
0ad6c     84 E4 05 F1 | 	add	objptr, ##56452
0ad70     F2 1E 02 FB | 	rdlong	local01, objptr
0ad74     79 00 00 FF 
0ad78     44 E5 85 F1 | 	sub	objptr, ##62276
0ad7c     FF FF 7F FF 
0ad80     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0ad84     79 00 00 AF 
0ad88     40 E5 05 A1 |  if_e	add	objptr, ##62272
0ad8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ad90     79 00 00 AF 
0ad94     40 E5 85 A1 |  if_e	sub	objptr, ##62272
0ad98     3C 02 90 AD |  if_e	jmp	#LR__0886
0ad9c                 | ' do 
0ad9c                 | LR__0881
0ad9c                 | '   if runptr<>oldrunptr then
0ad9c     79 00 00 FF 
0ada0     34 E5 05 F1 | 	add	objptr, ##62260
0ada4     F2 1E 02 FB | 	rdlong	local01, objptr
0ada8     08 E4 05 F1 | 	add	objptr, #8
0adac     F2 1C 02 FB | 	rdlong	arg06, objptr
0adb0     79 00 00 FF 
0adb4     3C E5 85 F1 | 	sub	objptr, ##62268
0adb8     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0adbc     CC 00 90 AD |  if_e	jmp	#LR__0882
0adc0     79 00 00 FF 
0adc4     44 E5 05 F1 | 	add	objptr, ##62276
0adc8     F2 12 02 F6 | 	mov	arg01, objptr
0adcc     10 E4 85 F1 | 	sub	objptr, #16
0add0     F2 14 02 FB | 	rdlong	arg02, objptr
0add4     18 16 06 F6 | 	mov	arg03, #24
0add8     6E 00 00 FF 
0addc     74 E4 85 F1 | 	sub	objptr, ##56436
0ade0     CC F3 B0 FD | 	call	#_psram_spin2_read1
0ade4     5B 00 00 FF 
0ade8     40 E5 05 F1 | 	add	objptr, ##46912
0adec     F2 12 02 F6 | 	mov	arg01, objptr
0adf0     12 00 00 FF 
0adf4     34 E5 05 F1 | 	add	objptr, ##9524
0adf8     F2 14 02 FB | 	rdlong	arg02, objptr
0adfc     14 00 00 FF 
0ae00     4C E5 85 F1 | 	sub	objptr, ##10572
0ae04     F2 1E 02 FB | 	rdlong	local01, objptr
0ae08     01 1E 66 F0 | 	shl	local01, #1
0ae0c     0F 15 02 F1 | 	add	arg02, local01
0ae10     14 00 00 FF 
0ae14     64 E5 05 F1 | 	add	objptr, ##10596
0ae18     F2 16 02 FB | 	rdlong	arg03, objptr
0ae1c     18 E4 85 F1 | 	sub	objptr, #24
0ae20     F2 1E 02 FB | 	rdlong	local01, objptr
0ae24     0F 17 82 F1 | 	sub	arg03, local01
0ae28     6E 00 00 FF 
0ae2c     74 E4 85 F1 | 	sub	objptr, ##56436
0ae30     7C F3 B0 FD | 	call	#_psram_spin2_read1
0ae34     6E 00 00 FF 
0ae38     8C E4 05 F1 | 	add	objptr, ##56460
0ae3c     F2 1E 02 FB | 	rdlong	local01, objptr
0ae40     18 E4 85 F1 | 	sub	objptr, #24
0ae44     F2 1C 02 FB | 	rdlong	arg06, objptr
0ae48     0E 1F 82 F1 | 	sub	local01, arg06
0ae4c     14 00 00 FF 
0ae50     4C E5 85 F1 | 	sub	objptr, ##10572
0ae54     F2 1C 02 FB | 	rdlong	arg06, objptr
0ae58     0E 1F 12 FD | 	qdiv	local01, arg06
0ae5c     05 00 00 FF 
0ae60     18 E4 05 F1 | 	add	objptr, ##2584
0ae64     18 1E 62 FD | 	getqx	local01
0ae68     03 1E 86 F1 | 	sub	local01, #3
0ae6c     F2 1E 62 FC | 	wrlong	local01, objptr
0ae70     0F 00 00 FF 
0ae74     34 E5 05 F1 | 	add	objptr, ##7988
0ae78     F2 1E 02 FB | 	rdlong	local01, objptr
0ae7c     08 E4 05 F1 | 	add	objptr, #8
0ae80     F2 1E 62 FC | 	wrlong	local01, objptr
0ae84     79 00 00 FF 
0ae88     3C E5 85 F1 | 	sub	objptr, ##62268
0ae8c                 | LR__0882
0ae8c     79 00 00 FF 
0ae90     58 E5 05 F1 | 	add	objptr, ##62296
0ae94     F2 1E 02 FB | 	rdlong	local01, objptr
0ae98     24 E4 85 F1 | 	sub	objptr, #36
0ae9c     F2 1E 62 FC | 	wrlong	local01, objptr
0aea0     04 E4 05 F1 | 	add	objptr, #4
0aea4     F2 12 02 FB | 	rdlong	arg01, objptr
0aea8     79 00 00 FF 
0aeac     38 E5 85 F1 | 	sub	objptr, ##62264
0aeb0     40 EB BF FD | 	call	#_execute_line
0aeb4     79 00 00 FF 
0aeb8     38 E5 05 F1 | 	add	objptr, ##62264
0aebc     F2 FA 61 FC | 	wrlong	result1, objptr
0aec0     04 E4 85 F1 | 	sub	objptr, #4
0aec4     F2 1E 02 FB | 	rdlong	local01, objptr
0aec8     79 00 00 FF 
0aecc     34 E5 85 F1 | 	sub	objptr, ##62260
0aed0     FF FF 3F FF 
0aed4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0aed8     0C 00 90 AD |  if_e	jmp	#LR__0883
0aedc     60 F6 B0 FD | 	call	#_usbnew_spin2_get_key
0aee0     06 FB 0D F2 | 	cmp	result1, #262 wz
0aee4     B4 FE 9F 5D |  if_ne	jmp	#LR__0881
0aee8                 | LR__0883
0aee8                 | ' if runheader(5)<>$7FFF_FFFF then 
0aee8     79 00 00 FF 
0aeec     58 E5 05 F1 | 	add	objptr, ##62296
0aef0     F2 1E 02 FB | 	rdlong	local01, objptr
0aef4     79 00 00 FF 
0aef8     58 E5 85 F1 | 	sub	objptr, ##62296
0aefc     FF FF 3F FF 
0af00     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0af04     BC 00 90 AD |  if_e	jmp	#LR__0885
0af08                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0af08     79 00 00 FF 
0af0c     64 E5 05 F1 | 	add	objptr, ##62308
0af10     F2 1E 02 FB | 	rdlong	local01, objptr
0af14     79 00 00 FF 
0af18     64 E5 85 F1 | 	sub	objptr, ##62308
0af1c     01 1E 0E F2 | 	cmp	local01, #1 wz
0af20     3C 00 90 5D |  if_ne	jmp	#LR__0884
0af24     7B 00 00 FF 
0af28     08 E4 05 F1 | 	add	objptr, ##62984
0af2c     F2 14 02 FB | 	rdlong	arg02, objptr
0af30     04 E4 85 F1 | 	sub	objptr, #4
0af34     F2 1A 02 FB | 	rdlong	arg05, objptr
0af38     07 12 06 F6 | 	mov	arg01, #7
0af3c     56 00 00 FF 
0af40     44 16 06 F6 | 	mov	arg03, ##44100
0af44     0E 18 C6 F9 | 	decod	arg04, #14
0af48     01 1C 66 F6 | 	neg	arg06, #1
0af4c     6F 00 00 FF 
0af50     44 E5 85 F1 | 	sub	objptr, ##57156
0af54     70 F9 B0 FD | 	call	#_audio096_spin2_play
0af58     0B 00 00 FF 
0af5c     C0 E4 85 F1 | 	sub	objptr, ##5824
0af60                 | LR__0884
0af60                 | '   print "Stopped at line ";runheader(0)
0af60     00 12 06 F6 | 	mov	arg01, #0
0af64     E4 56 B1 FD | 	call	#__system___getiolock_0442
0af68     FD 12 02 F6 | 	mov	arg01, result1
0af6c     A8 FD B0 FD | 	call	#__system___lockmem
0af70     53 01 00 FF 
0af74     E5 15 06 F6 | 	mov	arg02, ##@LR__4702
0af78     00 12 06 F6 | 	mov	arg01, #0
0af7c     00 16 06 F6 | 	mov	arg03, #0
0af80     9C 0A B1 FD | 	call	#__system___basic_print_string
0af84     79 00 00 FF 
0af88     44 E5 05 F1 | 	add	objptr, ##62276
0af8c     F2 14 02 FB | 	rdlong	arg02, objptr
0af90     79 00 00 FF 
0af94     44 E5 85 F1 | 	sub	objptr, ##62276
0af98     00 12 06 F6 | 	mov	arg01, #0
0af9c     00 16 06 F6 | 	mov	arg03, #0
0afa0     0A 18 06 F6 | 	mov	arg04, #10
0afa4     FC 0A B1 FD | 	call	#__system___basic_print_unsigned
0afa8     00 12 06 F6 | 	mov	arg01, #0
0afac     0A 14 06 F6 | 	mov	arg02, #10
0afb0     00 16 06 F6 | 	mov	arg03, #0
0afb4     10 0A B1 FD | 	call	#__system___basic_print_char
0afb8     00 12 06 F6 | 	mov	arg01, #0
0afbc     8C 56 B1 FD | 	call	#__system___getiolock_0442
0afc0     FD 00 68 FC | 	wrlong	#0, result1
0afc4                 | LR__0885
0afc4     79 00 00 FF 
0afc8     40 E5 05 F1 | 	add	objptr, ##62272
0afcc     F2 00 68 FC | 	wrlong	#0, objptr
0afd0     79 00 00 FF 
0afd4     40 E5 85 F1 | 	sub	objptr, ##62272
0afd8                 | LR__0886
0afd8     A7 F0 03 F6 | 	mov	ptra, fp
0afdc     B2 00 A0 FD | 	call	#popregs_
0afe0                 | _do_run_ret
0afe0     2D 00 64 FD | 	ret
0afe4                 | 
0afe4                 | ' 
0afe4                 | ' sub do_defenv
0afe4                 | _do_defenv
0afe4     09 4A 05 F6 | 	mov	COUNT_, #9
0afe8     A8 00 A0 FD | 	call	#pushregs_
0afec     B4 F0 07 F1 | 	add	ptra, #180
0aff0     6A 00 00 FF 
0aff4     04 E4 05 F1 | 	add	objptr, ##54276
0aff8     F2 1E 02 FB | 	rdlong	local01, objptr
0affc     0F 1B 02 F6 | 	mov	arg05, local01
0b000     01 1A 66 F0 | 	shl	arg05, #1
0b004     0F 1B 02 F1 | 	add	arg05, local01
0b008     02 1A 66 F0 | 	shl	arg05, #2
0b00c     03 00 00 FF 
0b010     04 E4 85 F1 | 	sub	objptr, ##1540
0b014     F2 20 02 F6 | 	mov	local02, objptr
0b018     F2 1A 02 F1 | 	add	arg05, objptr
0b01c     0D 1B 02 FB | 	rdlong	arg05, arg05
0b020     10 4E 05 F1 | 	add	fp, #16
0b024     A7 1A 62 FC | 	wrlong	arg05, fp
0b028                 | ' 
0b028                 | ' numpar=compiledline(lineptr_e).result.uresult
0b028                 | ' 
0b028                 | ' 
0b028                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0b028                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0b028                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0b028                 | ' 
0b028                 | ' 
0b028                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0b028     10 4E 85 F1 | 	sub	fp, #16
0b02c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b030     67 00 00 FF 
0b034     00 E4 85 F1 | 	sub	objptr, ##52736
0b038     10 4E 05 51 |  if_ne	add	fp, #16
0b03c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b040     10 4E 85 51 |  if_ne	sub	fp, #16
0b044     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0b048     10 4E 05 51 |  if_ne	add	fp, #16
0b04c     0F 21 02 56 |  if_ne	mov	local02, local01
0b050     10 4E 85 51 |  if_ne	sub	fp, #16
0b054     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0b058     24 0C 90 5D |  if_ne	jmp	#LR__0911
0b05c                 | ' 
0b05c                 | '  
0b05c                 | ' if numpar=2 then
0b05c     10 4E 05 F1 | 	add	fp, #16
0b060     A7 20 02 FB | 	rdlong	local02, fp
0b064     10 4E 85 F1 | 	sub	fp, #16
0b068     02 20 0E F2 | 	cmp	local02, #2 wz
0b06c     CC 03 90 5D |  if_ne	jmp	#LR__0902
0b070     84 EA BF FD | 	call	#_pop
0b074     FF 1A 02 F6 | 	mov	arg05, result3
0b078     5C 4E 05 F1 | 	add	fp, #92
0b07c     A7 FA 61 FC | 	wrlong	result1, fp
0b080     04 4E 05 F1 | 	add	fp, #4
0b084     A7 FC 61 FC | 	wrlong	result2, fp
0b088     04 4E 05 F1 | 	add	fp, #4
0b08c     A7 1A 62 FC | 	wrlong	arg05, fp
0b090                 | '   t1=pop()
0b090                 | '   if t1.result_type=result_string2 then 
0b090     64 4E 85 F1 | 	sub	fp, #100
0b094     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b098     20 00 90 5D |  if_ne	jmp	#LR__0890
0b09c     5C 4E 05 F1 | 	add	fp, #92
0b0a0     A7 12 02 FB | 	rdlong	arg01, fp
0b0a4     5C 4E 85 F1 | 	sub	fp, #92
0b0a8     DC 29 B0 FD | 	call	#_convertstring
0b0ac     68 4E 05 F1 | 	add	fp, #104
0b0b0     A7 FA 61 FC | 	wrlong	result1, fp
0b0b4     68 4E 85 F1 | 	sub	fp, #104
0b0b8     58 00 90 FD | 	jmp	#LR__0893
0b0bc                 | LR__0890
0b0bc     64 4E 05 F1 | 	add	fp, #100
0b0c0     A7 20 02 FB | 	rdlong	local02, fp
0b0c4     64 4E 85 F1 | 	sub	fp, #100
0b0c8     1F 20 0E F2 | 	cmp	local02, #31 wz
0b0cc     18 00 90 5D |  if_ne	jmp	#LR__0891
0b0d0     5C 4E 05 F1 | 	add	fp, #92
0b0d4     A7 20 02 FB | 	rdlong	local02, fp
0b0d8     0C 4E 05 F1 | 	add	fp, #12
0b0dc     A7 20 62 FC | 	wrlong	local02, fp
0b0e0     68 4E 85 F1 | 	sub	fp, #104
0b0e4     2C 00 90 FD | 	jmp	#LR__0892
0b0e8                 | LR__0891
0b0e8     53 01 00 FF 
0b0ec     F6 21 06 F6 | 	mov	local02, ##@LR__4703
0b0f0     68 4E 05 F1 | 	add	fp, #104
0b0f4     A7 20 62 FC | 	wrlong	local02, fp
0b0f8     0C 4E 85 F1 | 	sub	fp, #12
0b0fc     A7 12 02 F6 | 	mov	arg01, fp
0b100     5C 4E 85 F1 | 	sub	fp, #92
0b104     B4 6D B0 FD | 	call	#_converttoint
0b108     24 4E 05 F1 | 	add	fp, #36
0b10c     A7 FA 61 FC | 	wrlong	result1, fp
0b110     24 4E 85 F1 | 	sub	fp, #36
0b114                 | LR__0892
0b114                 | LR__0893
0b114                 | ' 
0b114                 | '     
0b114                 | '   if s1<>"" then 
0b114     68 4E 05 F1 | 	add	fp, #104
0b118     A7 12 02 FB | 	rdlong	arg01, fp
0b11c     68 4E 85 F1 | 	sub	fp, #104
0b120     53 01 00 FF 
0b124     F7 15 06 F6 | 	mov	arg02, ##@LR__4704
0b128     14 FC B0 FD | 	call	#__system___string_cmp
0b12c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b130     F8 01 90 AD |  if_e	jmp	#LR__0897
0b134     C0 E9 BF FD | 	call	#_pop
0b138     FF 1E 02 F6 | 	mov	local01, result3
0b13c     5C 4E 05 F1 | 	add	fp, #92
0b140     A7 FA 61 FC | 	wrlong	result1, fp
0b144     04 4E 05 F1 | 	add	fp, #4
0b148     A7 FC 61 FC | 	wrlong	result2, fp
0b14c     04 4E 05 F1 | 	add	fp, #4
0b150     A7 1E 62 FC | 	wrlong	local01, fp
0b154     08 4E 85 F1 | 	sub	fp, #8
0b158     A7 12 02 F6 | 	mov	arg01, fp
0b15c     5C 4E 85 F1 | 	sub	fp, #92
0b160     58 6D B0 FD | 	call	#_converttoint
0b164     20 4E 05 F1 | 	add	fp, #32
0b168     A7 FA 61 FC | 	wrlong	result1, fp
0b16c     20 4E 85 F1 | 	sub	fp, #32
0b170                 | '     t1=pop()
0b170                 | '     channel=converttoint(t1) 
0b170                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0b170     09 12 06 F6 | 	mov	arg01, #9
0b174     08 4B B1 FD | 	call	#__system__close
0b178     09 20 06 F6 | 	mov	local02, #9
0b17c     53 01 00 FF 
0b180     F8 13 06 F6 | 	mov	arg01, ##@LR__4705
0b184     68 4E 05 F1 | 	add	fp, #104
0b188     A7 14 02 FB | 	rdlong	arg02, fp
0b18c     68 4E 85 F1 | 	sub	fp, #104
0b190     E0 FB B0 FD | 	call	#__system___string_concat
0b194     FD 14 02 F6 | 	mov	arg02, result1
0b198     10 13 02 F6 | 	mov	arg01, local02
0b19c     00 16 06 F6 | 	mov	arg03, #0
0b1a0     78 07 B1 FD | 	call	#__system___basic_open_string
0b1a4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b1a8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b1ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b1b0     0C 4E 05 F1 | 	add	fp, #12
0b1b4     A7 FA 61 FC | 	wrlong	result1, fp
0b1b8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b1b8     0C 4E 85 F1 | 	sub	fp, #12
0b1bc     A0 00 90 AD |  if_e	jmp	#LR__0894
0b1c0     00 12 06 F6 | 	mov	arg01, #0
0b1c4     84 54 B1 FD | 	call	#__system___getiolock_0442
0b1c8     FD 12 02 F6 | 	mov	arg01, result1
0b1cc     48 FB B0 FD | 	call	#__system___lockmem
0b1d0     54 01 00 FF 
0b1d4     05 14 06 F6 | 	mov	arg02, ##@LR__4706
0b1d8     00 12 06 F6 | 	mov	arg01, #0
0b1dc     00 16 06 F6 | 	mov	arg03, #0
0b1e0     3C 08 B1 FD | 	call	#__system___basic_print_string
0b1e4     0C 4E 05 F1 | 	add	fp, #12
0b1e8     A7 14 02 FB | 	rdlong	arg02, fp
0b1ec     0C 4E 85 F1 | 	sub	fp, #12
0b1f0     00 12 06 F6 | 	mov	arg01, #0
0b1f4     00 16 06 F6 | 	mov	arg03, #0
0b1f8     0A 18 06 F6 | 	mov	arg04, #10
0b1fc     64 08 B1 FD | 	call	#__system___basic_print_integer
0b200     54 01 00 FF 
0b204     13 14 06 F6 | 	mov	arg02, ##@LR__4707
0b208     00 12 06 F6 | 	mov	arg01, #0
0b20c     00 16 06 F6 | 	mov	arg03, #0
0b210     0C 08 B1 FD | 	call	#__system___basic_print_string
0b214     00 20 06 F6 | 	mov	local02, #0
0b218     0C 4E 05 F1 | 	add	fp, #12
0b21c     A7 12 02 FB | 	rdlong	arg01, fp
0b220     0C 4E 85 F1 | 	sub	fp, #12
0b224     28 21 B1 FD | 	call	#__system___strerror
0b228     FD 14 02 F6 | 	mov	arg02, result1
0b22c     10 13 02 F6 | 	mov	arg01, local02
0b230     00 16 06 F6 | 	mov	arg03, #0
0b234     E8 07 B1 FD | 	call	#__system___basic_print_string
0b238     00 12 06 F6 | 	mov	arg01, #0
0b23c     0A 14 06 F6 | 	mov	arg02, #10
0b240     00 16 06 F6 | 	mov	arg03, #0
0b244     80 07 B1 FD | 	call	#__system___basic_print_char
0b248     00 12 06 F6 | 	mov	arg01, #0
0b24c     FC 53 B1 FD | 	call	#__system___getiolock_0442
0b250     FD 00 68 FC | 	wrlong	#0, result1
0b254     09 12 06 F6 | 	mov	arg01, #9
0b258     24 4A B1 FD | 	call	#__system__close
0b25c     20 0A 90 FD | 	jmp	#LR__0911
0b260                 | LR__0894
0b260                 | '     get #9,17,envbuf8(channel,0),256
0b260     20 4E 05 F1 | 	add	fp, #32
0b264     A7 1A 02 FB | 	rdlong	arg05, fp
0b268     20 4E 85 F1 | 	sub	fp, #32
0b26c     0D 17 02 F6 | 	mov	arg03, arg05
0b270     09 16 66 F0 | 	shl	arg03, #9
0b274     0D 17 02 F1 | 	add	arg03, arg05
0b278     2C 00 00 FF 
0b27c     CC E4 05 F1 | 	add	objptr, ##22732
0b280     F2 16 02 F1 | 	add	arg03, objptr
0b284     09 12 06 F6 | 	mov	arg01, #9
0b288     11 14 06 F6 | 	mov	arg02, #17
0b28c     00 19 06 F6 | 	mov	arg04, #256
0b290     01 1A 06 F6 | 	mov	arg05, #1
0b294     2C 00 00 FF 
0b298     CC E4 85 F1 | 	sub	objptr, ##22732
0b29c     90 08 B1 FD | 	call	#__system___basic_get
0b2a0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b2a0     14 4E 05 F1 | 	add	fp, #20
0b2a4     A7 FE 69 FC | 	wrlong	#255, fp
0b2a8     14 4E 85 F1 | 	sub	fp, #20
0b2ac     2C 00 00 FF 
0b2b0     CC E4 05 F1 | 	add	objptr, ##22732
0b2b4     97 30 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0b2b8                 | LR__0895
0b2b8     20 4E 05 F1 | 	add	fp, #32
0b2bc     A7 18 02 FB | 	rdlong	arg04, fp
0b2c0     0C 21 02 F6 | 	mov	local02, arg04
0b2c4     09 20 66 F0 | 	shl	local02, #9
0b2c8     F2 20 02 F1 | 	add	local02, objptr
0b2cc     0C 4E 85 F1 | 	sub	fp, #12
0b2d0     A7 1E 02 FB | 	rdlong	local01, fp
0b2d4     0F 1B 02 F6 | 	mov	arg05, local01
0b2d8     01 1A 66 F0 | 	shl	arg05, #1
0b2dc     10 1B 02 F1 | 	add	arg05, local02
0b2e0     0C 21 02 F6 | 	mov	local02, arg04
0b2e4     09 20 66 F0 | 	shl	local02, #9
0b2e8     0C 21 02 F1 | 	add	local02, arg04
0b2ec     F2 20 02 F1 | 	add	local02, objptr
0b2f0     10 1F 02 F1 | 	add	local01, local02
0b2f4     0F 21 C2 FA | 	rdbyte	local02, local01
0b2f8     00 21 06 FA | 	mul	local02, #256
0b2fc     0D 21 52 FC | 	wrword	local02, arg05
0b300     A7 20 02 FB | 	rdlong	local02, fp
0b304     01 20 86 F1 | 	sub	local02, #1
0b308     A7 20 62 FC | 	wrlong	local02, fp
0b30c     14 4E 85 F1 | 	sub	fp, #20
0b310     00 20 56 F2 | 	cmps	local02, #0 wc
0b314     A0 FF 9F 3D |  if_ae	jmp	#LR__0895
0b318                 | LR__0896
0b318     2C 00 00 FF 
0b31c     CC E4 85 F1 | 	sub	objptr, ##22732
0b320                 | '     close #9
0b320     09 12 06 F6 | 	mov	arg01, #9
0b324     58 49 B1 FD | 	call	#__system__close
0b328                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b328                 | '     return
0b328     54 09 90 FD | 	jmp	#LR__0911
0b32c                 | LR__0897
0b32c                 | '     if wptr < ($80000 - 2048) then 
0b32c     24 4E 05 F1 | 	add	fp, #36
0b330     A7 22 02 FB | 	rdlong	local03, fp
0b334     24 4E 85 F1 | 	sub	fp, #36
0b338     FC 03 00 FF 
0b33c     00 22 56 F2 | 	cmps	local03, ##522240 wc
0b340     7C 00 90 3D |  if_ae	jmp	#LR__0900
0b344                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0b344     14 4E 05 F1 | 	add	fp, #20
0b348     A7 00 68 FC | 	wrlong	#0, fp
0b34c     14 4E 85 F1 | 	sub	fp, #20
0b350     2C 00 00 FF 
0b354     CC E4 05 F1 | 	add	objptr, ##22732
0b358     97 2C 48 FB | 	callpa	#(@LR__0899-@LR__0898)>>2,fcache_load_ptr_
0b35c                 | LR__0898
0b35c     20 4E 05 F1 | 	add	fp, #32
0b360     A7 22 02 FB | 	rdlong	local03, fp
0b364     09 22 66 F0 | 	shl	local03, #9
0b368     F2 22 02 F1 | 	add	local03, objptr
0b36c     0C 4E 85 F1 | 	sub	fp, #12
0b370     A7 20 02 FB | 	rdlong	local02, fp
0b374     10 1F 02 F6 | 	mov	local01, local02
0b378     01 1E 66 F0 | 	shl	local01, #1
0b37c     11 1F 02 F1 | 	add	local01, local03
0b380     10 4E 05 F1 | 	add	fp, #16
0b384     A7 12 02 FB | 	rdlong	arg01, fp
0b388     01 20 66 F0 | 	shl	local02, #1
0b38c     10 13 02 F1 | 	add	arg01, local02
0b390     09 FB E1 FA | 	rdword	result1, arg01
0b394     0F FB 51 FC | 	wrword	result1, local01
0b398     10 4E 85 F1 | 	sub	fp, #16
0b39c     A7 22 02 FB | 	rdlong	local03, fp
0b3a0     01 22 06 F1 | 	add	local03, #1
0b3a4     A7 22 62 FC | 	wrlong	local03, fp
0b3a8     14 4E 85 F1 | 	sub	fp, #20
0b3ac     00 23 56 F2 | 	cmps	local03, #256 wc
0b3b0     A8 FF 9F CD |  if_b	jmp	#LR__0898
0b3b4                 | LR__0899
0b3b4     2C 00 00 FF 
0b3b8     CC E4 85 F1 | 	sub	objptr, ##22732
0b3bc     C0 08 90 FD | 	jmp	#LR__0911
0b3c0                 | LR__0900
0b3c0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0b3c0     14 4E 05 F1 | 	add	fp, #20
0b3c4     A7 00 68 FC | 	wrlong	#0, fp
0b3c8     14 4E 85 F1 | 	sub	fp, #20
0b3cc                 | LR__0901
0b3cc     20 4E 05 F1 | 	add	fp, #32
0b3d0     A7 22 02 FB | 	rdlong	local03, fp
0b3d4     09 22 66 F0 | 	shl	local03, #9
0b3d8     2C 00 00 FF 
0b3dc     CC E4 05 F1 | 	add	objptr, ##22732
0b3e0     F2 22 02 F1 | 	add	local03, objptr
0b3e4     0C 4E 85 F1 | 	sub	fp, #12
0b3e8     A7 20 02 FB | 	rdlong	local02, fp
0b3ec     10 1F 02 F6 | 	mov	local01, local02
0b3f0     01 1E 66 F0 | 	shl	local01, #1
0b3f4     11 1F 02 F1 | 	add	local01, local03
0b3f8     10 4E 05 F1 | 	add	fp, #16
0b3fc     A7 12 02 FB | 	rdlong	arg01, fp
0b400     24 4E 85 F1 | 	sub	fp, #36
0b404     01 20 66 F0 | 	shl	local02, #1
0b408     10 13 02 F1 | 	add	arg01, local02
0b40c     2C 00 00 FF 
0b410     CC E4 85 F1 | 	sub	objptr, ##22732
0b414     04 C5 B0 FD | 	call	#_psdpeek
0b418     0F FB 51 FC | 	wrword	result1, local01
0b41c     14 4E 05 F1 | 	add	fp, #20
0b420     A7 24 02 FB | 	rdlong	local04, fp
0b424     01 24 06 F1 | 	add	local04, #1
0b428     A7 24 62 FC | 	wrlong	local04, fp
0b42c     14 4E 85 F1 | 	sub	fp, #20
0b430     00 25 56 F2 | 	cmps	local04, #256 wc
0b434     94 FF 9F CD |  if_b	jmp	#LR__0901
0b438                 | '     return   
0b438     44 08 90 FD | 	jmp	#LR__0911
0b43c                 | LR__0902
0b43c                 | ' 
0b43c                 | ' if numpar=5 then    'simple adsr
0b43c     10 4E 05 F1 | 	add	fp, #16
0b440     A7 22 02 FB | 	rdlong	local03, fp
0b444     10 4E 85 F1 | 	sub	fp, #16
0b448     05 22 0E F2 | 	cmp	local03, #5 wz
0b44c     30 08 90 5D |  if_ne	jmp	#LR__0910
0b450     A4 E6 BF FD | 	call	#_pop
0b454     FF 1E 02 F6 | 	mov	local01, result3
0b458     5C 4E 05 F1 | 	add	fp, #92
0b45c     A7 FA 61 FC | 	wrlong	result1, fp
0b460     04 4E 05 F1 | 	add	fp, #4
0b464     A7 FC 61 FC | 	wrlong	result2, fp
0b468     04 4E 05 F1 | 	add	fp, #4
0b46c     A7 1E 62 FC | 	wrlong	local01, fp
0b470     08 4E 85 F1 | 	sub	fp, #8
0b474     A7 12 02 F6 | 	mov	arg01, fp
0b478     5C 4E 85 F1 | 	sub	fp, #92
0b47c     E8 6A B0 FD | 	call	#_converttofloat
0b480     FD 22 02 F6 | 	mov	local03, result1
0b484     34 4E 05 F1 | 	add	fp, #52
0b488     A7 22 62 FC | 	wrlong	local03, fp
0b48c     34 4E 85 F1 | 	sub	fp, #52
0b490     64 E6 BF FD | 	call	#_pop
0b494     FF 1E 02 F6 | 	mov	local01, result3
0b498     5C 4E 05 F1 | 	add	fp, #92
0b49c     A7 FA 61 FC | 	wrlong	result1, fp
0b4a0     04 4E 05 F1 | 	add	fp, #4
0b4a4     A7 FC 61 FC | 	wrlong	result2, fp
0b4a8     04 4E 05 F1 | 	add	fp, #4
0b4ac     A7 1E 62 FC | 	wrlong	local01, fp
0b4b0     08 4E 85 F1 | 	sub	fp, #8
0b4b4     A7 12 02 F6 | 	mov	arg01, fp
0b4b8     5C 4E 85 F1 | 	sub	fp, #92
0b4bc     A8 6A B0 FD | 	call	#_converttofloat
0b4c0     FD 22 02 F6 | 	mov	local03, result1
0b4c4     30 4E 05 F1 | 	add	fp, #48
0b4c8     A7 22 62 FC | 	wrlong	local03, fp
0b4cc     30 4E 85 F1 | 	sub	fp, #48
0b4d0     24 E6 BF FD | 	call	#_pop
0b4d4     FF 1E 02 F6 | 	mov	local01, result3
0b4d8     5C 4E 05 F1 | 	add	fp, #92
0b4dc     A7 FA 61 FC | 	wrlong	result1, fp
0b4e0     04 4E 05 F1 | 	add	fp, #4
0b4e4     A7 FC 61 FC | 	wrlong	result2, fp
0b4e8     04 4E 05 F1 | 	add	fp, #4
0b4ec     A7 1E 62 FC | 	wrlong	local01, fp
0b4f0     08 4E 85 F1 | 	sub	fp, #8
0b4f4     A7 12 02 F6 | 	mov	arg01, fp
0b4f8     5C 4E 85 F1 | 	sub	fp, #92
0b4fc     68 6A B0 FD | 	call	#_converttofloat
0b500     FD 22 02 F6 | 	mov	local03, result1
0b504     2C 4E 05 F1 | 	add	fp, #44
0b508     A7 22 62 FC | 	wrlong	local03, fp
0b50c     2C 4E 85 F1 | 	sub	fp, #44
0b510     E4 E5 BF FD | 	call	#_pop
0b514     FF 1E 02 F6 | 	mov	local01, result3
0b518     5C 4E 05 F1 | 	add	fp, #92
0b51c     A7 FA 61 FC | 	wrlong	result1, fp
0b520     04 4E 05 F1 | 	add	fp, #4
0b524     A7 FC 61 FC | 	wrlong	result2, fp
0b528     04 4E 05 F1 | 	add	fp, #4
0b52c     A7 1E 62 FC | 	wrlong	local01, fp
0b530     08 4E 85 F1 | 	sub	fp, #8
0b534     A7 12 02 F6 | 	mov	arg01, fp
0b538     5C 4E 85 F1 | 	sub	fp, #92
0b53c     28 6A B0 FD | 	call	#_converttofloat
0b540     FD 22 02 F6 | 	mov	local03, result1
0b544     28 4E 05 F1 | 	add	fp, #40
0b548     A7 22 62 FC | 	wrlong	local03, fp
0b54c     28 4E 85 F1 | 	sub	fp, #40
0b550     A4 E5 BF FD | 	call	#_pop
0b554     FF 1E 02 F6 | 	mov	local01, result3
0b558     5C 4E 05 F1 | 	add	fp, #92
0b55c     A7 FA 61 FC | 	wrlong	result1, fp
0b560     04 4E 05 F1 | 	add	fp, #4
0b564     A7 FC 61 FC | 	wrlong	result2, fp
0b568     04 4E 05 F1 | 	add	fp, #4
0b56c     A7 1E 62 FC | 	wrlong	local01, fp
0b570     08 4E 85 F1 | 	sub	fp, #8
0b574     A7 12 02 F6 | 	mov	arg01, fp
0b578     5C 4E 85 F1 | 	sub	fp, #92
0b57c     3C 69 B0 FD | 	call	#_converttoint
0b580     20 4E 05 F1 | 	add	fp, #32
0b584     A7 FA 61 FC | 	wrlong	result1, fp
0b588                 | ' 
0b588                 | '   t1=pop() : rr=converttofloat(t1)
0b588                 | '   t1=pop() : ss=converttofloat(t1) 
0b588                 | '   t1=pop() : dd=converttofloat(t1)
0b588                 | '   t1=pop() : aa=converttofloat(t1)
0b588                 | '   t1=pop() : channel=converttoint(t1)
0b588                 | '   if ss<0.0 then ss=0.0 
0b588     10 4E 05 F1 | 	add	fp, #16
0b58c     A7 12 02 FB | 	rdlong	arg01, fp
0b590     30 4E 85 F1 | 	sub	fp, #48
0b594     00 14 06 F6 | 	mov	arg02, #0
0b598     01 16 06 F6 | 	mov	arg03, #1
0b59c     D0 26 B1 FD | 	call	#__system___float_cmp
0b5a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0b5a4     30 4E 05 C1 |  if_b	add	fp, #48
0b5a8     A7 00 68 CC |  if_b	wrlong	#0, fp
0b5ac     30 4E 85 C1 |  if_b	sub	fp, #48
0b5b0                 | '   if ss>1.0 then ss=1.0
0b5b0     30 4E 05 F1 | 	add	fp, #48
0b5b4     A7 12 02 FB | 	rdlong	arg01, fp
0b5b8     30 4E 85 F1 | 	sub	fp, #48
0b5bc     00 C0 1F FF 
0b5c0     00 14 06 F6 | 	mov	arg02, ##1065353216
0b5c4     01 16 66 F6 | 	neg	arg03, #1
0b5c8     A4 26 B1 FD | 	call	#__system___float_cmp
0b5cc     01 FA 55 F2 | 	cmps	result1, #1 wc
0b5d0     30 4E 05 31 |  if_ae	add	fp, #48
0b5d4     00 C0 9F 3F 
0b5d8     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0b5dc     30 4E 85 31 |  if_ae	sub	fp, #48
0b5e0     28 4E 05 F1 | 	add	fp, #40
0b5e4     A7 12 02 FB | 	rdlong	arg01, fp
0b5e8     04 4E 05 F1 | 	add	fp, #4
0b5ec     A7 14 02 FB | 	rdlong	arg02, fp
0b5f0     2C 4E 85 F1 | 	sub	fp, #44
0b5f4     74 1E B1 FD | 	call	#__system___float_add
0b5f8     FD 12 02 F6 | 	mov	arg01, result1
0b5fc     34 4E 05 F1 | 	add	fp, #52
0b600     A7 14 02 FB | 	rdlong	arg02, fp
0b604     34 4E 85 F1 | 	sub	fp, #52
0b608     60 1E B1 FD | 	call	#__system___float_add
0b60c     4C 4E 05 F1 | 	add	fp, #76
0b610     A7 FA 61 FC | 	wrlong	result1, fp
0b614     FD 14 02 F6 | 	mov	arg02, result1
0b618     4C 4E 85 F1 | 	sub	fp, #76
0b61c     00 C0 21 FF 
0b620     00 12 06 F6 | 	mov	arg01, ##1132462080
0b624     18 24 B1 FD | 	call	#__system___float_div
0b628     50 4E 05 F1 | 	add	fp, #80
0b62c     A7 FA 61 FC | 	wrlong	result1, fp
0b630     28 4E 85 F1 | 	sub	fp, #40
0b634     A7 12 02 FB | 	rdlong	arg01, fp
0b638     FD 14 02 F6 | 	mov	arg02, result1
0b63c     28 4E 85 F1 | 	sub	fp, #40
0b640     F8 21 B1 FD | 	call	#__system___float_mul
0b644     FD 12 02 F6 | 	mov	arg01, result1
0b648     01 14 06 F6 | 	mov	arg02, #1
0b64c     B4 26 B1 FD | 	call	#__system___float_tointeger
0b650     A7 FA 61 FC | 	wrlong	result1, fp
0b654     2C 4E 05 F1 | 	add	fp, #44
0b658     A7 12 02 FB | 	rdlong	arg01, fp
0b65c     24 4E 05 F1 | 	add	fp, #36
0b660     A7 14 02 FB | 	rdlong	arg02, fp
0b664     50 4E 85 F1 | 	sub	fp, #80
0b668     D0 21 B1 FD | 	call	#__system___float_mul
0b66c     FD 12 02 F6 | 	mov	arg01, result1
0b670     01 14 06 F6 | 	mov	arg02, #1
0b674     8C 26 B1 FD | 	call	#__system___float_tointeger
0b678     04 4E 05 F1 | 	add	fp, #4
0b67c     A7 FA 61 FC | 	wrlong	result1, fp
0b680     30 4E 05 F1 | 	add	fp, #48
0b684     A7 12 02 FB | 	rdlong	arg01, fp
0b688     1C 4E 05 F1 | 	add	fp, #28
0b68c     A7 14 02 FB | 	rdlong	arg02, fp
0b690     50 4E 85 F1 | 	sub	fp, #80
0b694     A4 21 B1 FD | 	call	#__system___float_mul
0b698     FD 12 02 F6 | 	mov	arg01, result1
0b69c     01 14 06 F6 | 	mov	arg02, #1
0b6a0     60 26 B1 FD | 	call	#__system___float_tointeger
0b6a4     FD 22 02 F6 | 	mov	local03, result1
0b6a8     0C 4E 05 F1 | 	add	fp, #12
0b6ac     A7 22 62 FC | 	wrlong	local03, fp
0b6b0     0C 4E 85 F1 | 	sub	fp, #12
0b6b4                 | '   fulltime=aa+dd+rr
0b6b4                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0b6b4     00 12 06 F6 | 	mov	arg01, #0
0b6b8     90 4F B1 FD | 	call	#__system___getiolock_0442
0b6bc     FD 12 02 F6 | 	mov	arg01, result1
0b6c0     54 F6 B0 FD | 	call	#__system___lockmem
0b6c4     A7 14 02 FB | 	rdlong	arg02, fp
0b6c8     00 12 06 F6 | 	mov	arg01, #0
0b6cc     00 16 06 F6 | 	mov	arg03, #0
0b6d0     0A 18 06 F6 | 	mov	arg04, #10
0b6d4     8C 03 B1 FD | 	call	#__system___basic_print_integer
0b6d8     00 12 06 F6 | 	mov	arg01, #0
0b6dc     09 14 06 F6 | 	mov	arg02, #9
0b6e0     00 16 06 F6 | 	mov	arg03, #0
0b6e4     E0 02 B1 FD | 	call	#__system___basic_print_char
0b6e8     04 4E 05 F1 | 	add	fp, #4
0b6ec     A7 14 02 FB | 	rdlong	arg02, fp
0b6f0     04 4E 85 F1 | 	sub	fp, #4
0b6f4     00 12 06 F6 | 	mov	arg01, #0
0b6f8     00 16 06 F6 | 	mov	arg03, #0
0b6fc     0A 18 06 F6 | 	mov	arg04, #10
0b700     60 03 B1 FD | 	call	#__system___basic_print_integer
0b704     00 12 06 F6 | 	mov	arg01, #0
0b708     09 14 06 F6 | 	mov	arg02, #9
0b70c     00 16 06 F6 | 	mov	arg03, #0
0b710     B4 02 B1 FD | 	call	#__system___basic_print_char
0b714     0C 4E 05 F1 | 	add	fp, #12
0b718     A7 14 02 FB | 	rdlong	arg02, fp
0b71c     0C 4E 85 F1 | 	sub	fp, #12
0b720     00 12 06 F6 | 	mov	arg01, #0
0b724     00 16 06 F6 | 	mov	arg03, #0
0b728     0A 18 06 F6 | 	mov	arg04, #10
0b72c     34 03 B1 FD | 	call	#__system___basic_print_integer
0b730     00 12 06 F6 | 	mov	arg01, #0
0b734     09 14 06 F6 | 	mov	arg02, #9
0b738     00 16 06 F6 | 	mov	arg03, #0
0b73c     88 02 B1 FD | 	call	#__system___basic_print_char
0b740     A7 14 02 FB | 	rdlong	arg02, fp
0b744     04 4E 05 F1 | 	add	fp, #4
0b748     A7 22 02 FB | 	rdlong	local03, fp
0b74c     11 15 02 F1 | 	add	arg02, local03
0b750     08 4E 05 F1 | 	add	fp, #8
0b754     A7 22 02 FB | 	rdlong	local03, fp
0b758     0C 4E 85 F1 | 	sub	fp, #12
0b75c     11 15 02 F1 | 	add	arg02, local03
0b760     00 12 06 F6 | 	mov	arg01, #0
0b764     00 16 06 F6 | 	mov	arg03, #0
0b768     0A 18 06 F6 | 	mov	arg04, #10
0b76c     F4 02 B1 FD | 	call	#__system___basic_print_integer
0b770     00 12 06 F6 | 	mov	arg01, #0
0b774     0A 14 06 F6 | 	mov	arg02, #10
0b778     00 16 06 F6 | 	mov	arg03, #0
0b77c     48 02 B1 FD | 	call	#__system___basic_print_char
0b780     00 12 06 F6 | 	mov	arg01, #0
0b784     C4 4E B1 FD | 	call	#__system___getiolock_0442
0b788     FD 00 68 FC | 	wrlong	#0, result1
0b78c     F8 BF 23 FF 
0b790     00 22 06 F6 | 	mov	local03, ##1199566848
0b794     A7 12 02 FB | 	rdlong	arg01, fp
0b798     09 13 52 F6 | 	abs	arg01, arg01 wc
0b79c     1F 26 C6 C9 |  if_b	decod	local05, #31
0b7a0     00 26 06 36 |  if_ae	mov	local05, #0
0b7a4     90 1C B1 FD | 	call	#__system___float_fromuns
0b7a8     13 FB 61 F5 | 	xor	result1, local05
0b7ac     FD 14 02 F6 | 	mov	arg02, result1
0b7b0     11 13 02 F6 | 	mov	arg01, local03
0b7b4     88 22 B1 FD | 	call	#__system___float_div
0b7b8     54 4E 05 F1 | 	add	fp, #84
0b7bc     A7 FA 61 FC | 	wrlong	result1, fp
0b7c0     F8 BF 23 FF 
0b7c4     00 22 06 F6 | 	mov	local03, ##1199566848
0b7c8     24 4E 85 F1 | 	sub	fp, #36
0b7cc     A7 14 02 FB | 	rdlong	arg02, fp
0b7d0     30 4E 85 F1 | 	sub	fp, #48
0b7d4     F8 BF 23 FF 
0b7d8     00 12 06 F6 | 	mov	arg01, ##1199566848
0b7dc     5C 20 B1 FD | 	call	#__system___float_mul
0b7e0     FD 14 02 F6 | 	mov	arg02, result1
0b7e4     11 13 02 F6 | 	mov	arg01, local03
0b7e8     1F 14 E6 F4 | 	bitnot	arg02, #31
0b7ec     7C 1C B1 FD | 	call	#__system___float_add
0b7f0     FD 22 02 F6 | 	mov	local03, result1
0b7f4     04 4E 05 F1 | 	add	fp, #4
0b7f8     A7 12 02 FB | 	rdlong	arg01, fp
0b7fc     04 4E 85 F1 | 	sub	fp, #4
0b800     09 13 52 F6 | 	abs	arg01, arg01 wc
0b804     1F 26 C6 C9 |  if_b	decod	local05, #31
0b808     00 26 06 36 |  if_ae	mov	local05, #0
0b80c     28 1C B1 FD | 	call	#__system___float_fromuns
0b810     13 FB 61 F5 | 	xor	result1, local05
0b814     FD 14 02 F6 | 	mov	arg02, result1
0b818     11 13 02 F6 | 	mov	arg01, local03
0b81c     20 22 B1 FD | 	call	#__system___float_div
0b820     2C 4E 05 F1 | 	add	fp, #44
0b824     A7 FA 61 FC | 	wrlong	result1, fp
0b828     04 4E 05 F1 | 	add	fp, #4
0b82c     A7 14 02 FB | 	rdlong	arg02, fp
0b830     30 4E 85 F1 | 	sub	fp, #48
0b834     F8 BF 23 FF 
0b838     00 12 06 F6 | 	mov	arg01, ##1199566848
0b83c     FC 1F B1 FD | 	call	#__system___float_mul
0b840     FD 22 02 F6 | 	mov	local03, result1
0b844     0C 4E 05 F1 | 	add	fp, #12
0b848     A7 12 02 FB | 	rdlong	arg01, fp
0b84c     0C 4E 85 F1 | 	sub	fp, #12
0b850     09 13 52 F6 | 	abs	arg01, arg01 wc
0b854     1F 26 C6 C9 |  if_b	decod	local05, #31
0b858     00 26 06 36 |  if_ae	mov	local05, #0
0b85c     D8 1B B1 FD | 	call	#__system___float_fromuns
0b860     13 FB 61 F5 | 	xor	result1, local05
0b864     FD 14 02 F6 | 	mov	arg02, result1
0b868     11 13 02 F6 | 	mov	arg01, local03
0b86c     D0 21 B1 FD | 	call	#__system___float_div
0b870     FD 22 02 F6 | 	mov	local03, result1
0b874     58 4E 05 F1 | 	add	fp, #88
0b878     A7 22 62 FC | 	wrlong	local03, fp
0b87c     58 4E 85 F1 | 	sub	fp, #88
0b880                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0b880     00 12 06 F6 | 	mov	arg01, #0
0b884     C4 4D B1 FD | 	call	#__system___getiolock_0442
0b888     FD 12 02 F6 | 	mov	arg01, result1
0b88c     88 F4 B0 FD | 	call	#__system___lockmem
0b890     54 4E 05 F1 | 	add	fp, #84
0b894     A7 14 02 FB | 	rdlong	arg02, fp
0b898     54 4E 85 F1 | 	sub	fp, #84
0b89c     00 12 06 F6 | 	mov	arg01, #0
0b8a0     00 16 06 F6 | 	mov	arg03, #0
0b8a4     23 18 06 F6 | 	mov	arg04, #35
0b8a8     A8 25 B1 FD | 	call	#__system___basic_print_float
0b8ac     00 12 06 F6 | 	mov	arg01, #0
0b8b0     09 14 06 F6 | 	mov	arg02, #9
0b8b4     00 16 06 F6 | 	mov	arg03, #0
0b8b8     0C 01 B1 FD | 	call	#__system___basic_print_char
0b8bc     2C 4E 05 F1 | 	add	fp, #44
0b8c0     A7 14 02 FB | 	rdlong	arg02, fp
0b8c4     2C 4E 85 F1 | 	sub	fp, #44
0b8c8     00 12 06 F6 | 	mov	arg01, #0
0b8cc     00 16 06 F6 | 	mov	arg03, #0
0b8d0     23 18 06 F6 | 	mov	arg04, #35
0b8d4     7C 25 B1 FD | 	call	#__system___basic_print_float
0b8d8     00 12 06 F6 | 	mov	arg01, #0
0b8dc     09 14 06 F6 | 	mov	arg02, #9
0b8e0     00 16 06 F6 | 	mov	arg03, #0
0b8e4     E0 00 B1 FD | 	call	#__system___basic_print_char
0b8e8     58 4E 05 F1 | 	add	fp, #88
0b8ec     A7 14 02 FB | 	rdlong	arg02, fp
0b8f0     58 4E 85 F1 | 	sub	fp, #88
0b8f4     00 12 06 F6 | 	mov	arg01, #0
0b8f8     00 16 06 F6 | 	mov	arg03, #0
0b8fc     23 18 06 F6 | 	mov	arg04, #35
0b900     50 25 B1 FD | 	call	#__system___basic_print_float
0b904     00 12 06 F6 | 	mov	arg01, #0
0b908     0A 14 06 F6 | 	mov	arg02, #10
0b90c     00 16 06 F6 | 	mov	arg03, #0
0b910     B4 00 B1 FD | 	call	#__system___basic_print_char
0b914     00 12 06 F6 | 	mov	arg01, #0
0b918     30 4D B1 FD | 	call	#__system___getiolock_0442
0b91c     FD 00 68 FC | 	wrlong	#0, result1
0b920     20 4E 05 F1 | 	add	fp, #32
0b924     A7 28 02 FB | 	rdlong	local06, fp
0b928     20 4E 85 F1 | 	sub	fp, #32
0b92c     01 28 66 F0 | 	shl	local06, #1
0b930     7B 00 00 FF 
0b934     18 E4 05 F1 | 	add	objptr, ##63000
0b938     F2 28 02 F1 | 	add	local06, objptr
0b93c     A7 2A 02 FB | 	rdlong	local07, fp
0b940     04 4E 05 F1 | 	add	fp, #4
0b944     A7 22 02 FB | 	rdlong	local03, fp
0b948     11 2B 02 F1 | 	add	local07, local03
0b94c     14 2B 52 FC | 	wrword	local07, local06
0b950     24 4E 05 F1 | 	add	fp, #36
0b954     A7 00 68 FC | 	wrlong	#0, fp
0b958                 | '   suspoints(channel)=a+d
0b958                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0b958     14 4E 85 F1 | 	sub	fp, #20
0b95c     A7 00 68 FC | 	wrlong	#0, fp
0b960     14 4E 85 F1 | 	sub	fp, #20
0b964     A7 2C 02 FB | 	rdlong	local08, fp
0b968     7B 00 00 FF 
0b96c     18 E4 85 F1 | 	sub	objptr, ##63000
0b970                 | LR__0903
0b970     14 4E 05 F1 | 	add	fp, #20
0b974     A7 22 02 FB | 	rdlong	local03, fp
0b978     14 4E 85 F1 | 	sub	fp, #20
0b97c     16 23 52 F2 | 	cmps	local03, local08 wc
0b980     80 00 90 3D |  if_ae	jmp	#LR__0904
0b984     20 4E 05 F1 | 	add	fp, #32
0b988     A7 28 02 FB | 	rdlong	local06, fp
0b98c     09 28 66 F0 | 	shl	local06, #9
0b990     2C 00 00 FF 
0b994     CC E4 05 F1 | 	add	objptr, ##22732
0b998     F2 28 02 F1 | 	add	local06, objptr
0b99c     0C 4E 85 F1 | 	sub	fp, #12
0b9a0     A7 22 02 FB | 	rdlong	local03, fp
0b9a4     01 22 66 F0 | 	shl	local03, #1
0b9a8     14 23 02 F1 | 	add	local03, local06
0b9ac     14 4E 05 F1 | 	add	fp, #20
0b9b0     A7 12 02 FB | 	rdlong	arg01, fp
0b9b4     28 4E 85 F1 | 	sub	fp, #40
0b9b8     2C 00 00 FF 
0b9bc     CC E4 85 F1 | 	sub	objptr, ##22732
0b9c0     01 14 06 F6 | 	mov	arg02, #1
0b9c4     3C 23 B1 FD | 	call	#__system___float_tointeger
0b9c8     11 FB 51 FC | 	wrword	result1, local03
0b9cc     28 4E 05 F1 | 	add	fp, #40
0b9d0     A7 12 02 FB | 	rdlong	arg01, fp
0b9d4     2C 4E 05 F1 | 	add	fp, #44
0b9d8     A7 14 02 FB | 	rdlong	arg02, fp
0b9dc     54 4E 85 F1 | 	sub	fp, #84
0b9e0     88 1A B1 FD | 	call	#__system___float_add
0b9e4     28 4E 05 F1 | 	add	fp, #40
0b9e8     A7 FA 61 FC | 	wrlong	result1, fp
0b9ec     14 4E 85 F1 | 	sub	fp, #20
0b9f0     A7 20 02 FB | 	rdlong	local02, fp
0b9f4     01 20 06 F1 | 	add	local02, #1
0b9f8     A7 20 62 FC | 	wrlong	local02, fp
0b9fc     14 4E 85 F1 | 	sub	fp, #20
0ba00     6C FF 9F FD | 	jmp	#LR__0903
0ba04                 | LR__0904
0ba04                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0ba04     A7 22 02 FB | 	rdlong	local03, fp
0ba08     14 4E 05 F1 | 	add	fp, #20
0ba0c     A7 22 62 FC | 	wrlong	local03, fp
0ba10     14 4E 85 F1 | 	sub	fp, #20
0ba14     A7 2E 02 FB | 	rdlong	local09, fp
0ba18     04 4E 05 F1 | 	add	fp, #4
0ba1c     A7 22 02 FB | 	rdlong	local03, fp
0ba20     04 4E 85 F1 | 	sub	fp, #4
0ba24     11 2F 02 F1 | 	add	local09, local03
0ba28                 | LR__0905
0ba28     14 4E 05 F1 | 	add	fp, #20
0ba2c     A7 22 02 FB | 	rdlong	local03, fp
0ba30     14 4E 85 F1 | 	sub	fp, #20
0ba34     17 23 52 F2 | 	cmps	local03, local09 wc
0ba38     A8 00 90 3D |  if_ae	jmp	#LR__0906
0ba3c     20 4E 05 F1 | 	add	fp, #32
0ba40     A7 2C 02 FB | 	rdlong	local08, fp
0ba44     09 2C 66 F0 | 	shl	local08, #9
0ba48     2C 00 00 FF 
0ba4c     CC E4 05 F1 | 	add	objptr, ##22732
0ba50     F2 2C 02 F1 | 	add	local08, objptr
0ba54     0C 4E 85 F1 | 	sub	fp, #12
0ba58     A7 2A 02 FB | 	rdlong	local07, fp
0ba5c     01 2A 66 F0 | 	shl	local07, #1
0ba60     16 2B 02 F1 | 	add	local07, local08
0ba64     14 4E 05 F1 | 	add	fp, #20
0ba68     A7 12 02 FB | 	rdlong	arg01, fp
0ba6c     28 4E 85 F1 | 	sub	fp, #40
0ba70     2C 00 00 FF 
0ba74     CC E4 85 F1 | 	sub	objptr, ##22732
0ba78     01 14 06 F6 | 	mov	arg02, #1
0ba7c     84 22 B1 FD | 	call	#__system___float_tointeger
0ba80     15 FB 51 FC | 	wrword	result1, local07
0ba84     28 4E 05 F1 | 	add	fp, #40
0ba88     A7 12 02 FB | 	rdlong	arg01, fp
0ba8c     04 4E 05 F1 | 	add	fp, #4
0ba90     A7 14 02 FB | 	rdlong	arg02, fp
0ba94     2C 4E 85 F1 | 	sub	fp, #44
0ba98     1F 14 E6 F4 | 	bitnot	arg02, #31
0ba9c     CC 19 B1 FD | 	call	#__system___float_add
0baa0     28 4E 05 F1 | 	add	fp, #40
0baa4     A7 FA 61 FC | 	wrlong	result1, fp
0baa8     28 4E 85 F1 | 	sub	fp, #40
0baac     FD 12 02 F6 | 	mov	arg01, result1
0bab0     00 14 06 F6 | 	mov	arg02, #0
0bab4     01 16 06 F6 | 	mov	arg03, #1
0bab8     B4 21 B1 FD | 	call	#__system___float_cmp
0babc     00 FA 55 F2 | 	cmps	result1, #0 wc
0bac0     28 4E 05 C1 |  if_b	add	fp, #40
0bac4     A7 00 68 CC |  if_b	wrlong	#0, fp
0bac8     28 4E 85 C1 |  if_b	sub	fp, #40
0bacc     14 4E 05 F1 | 	add	fp, #20
0bad0     A7 20 02 FB | 	rdlong	local02, fp
0bad4     01 20 06 F1 | 	add	local02, #1
0bad8     A7 20 62 FC | 	wrlong	local02, fp
0badc     14 4E 85 F1 | 	sub	fp, #20
0bae0     44 FF 9F FD | 	jmp	#LR__0905
0bae4                 | LR__0906
0bae4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0bae4     A7 22 02 FB | 	rdlong	local03, fp
0bae8     04 4E 05 F1 | 	add	fp, #4
0baec     A7 2E 02 FB | 	rdlong	local09, fp
0baf0     17 23 02 F1 | 	add	local03, local09
0baf4     10 4E 05 F1 | 	add	fp, #16
0baf8     A7 22 62 FC | 	wrlong	local03, fp
0bafc     14 4E 85 F1 | 	sub	fp, #20
0bb00                 | LR__0907
0bb00     14 4E 05 F1 | 	add	fp, #20
0bb04     A7 28 02 FB | 	rdlong	local06, fp
0bb08     14 4E 85 F1 | 	sub	fp, #20
0bb0c     00 29 56 F2 | 	cmps	local06, #256 wc
0bb10     A8 00 90 3D |  if_ae	jmp	#LR__0908
0bb14     20 4E 05 F1 | 	add	fp, #32
0bb18     A7 2E 02 FB | 	rdlong	local09, fp
0bb1c     09 2E 66 F0 | 	shl	local09, #9
0bb20     2C 00 00 FF 
0bb24     CC E4 05 F1 | 	add	objptr, ##22732
0bb28     F2 2E 02 F1 | 	add	local09, objptr
0bb2c     0C 4E 85 F1 | 	sub	fp, #12
0bb30     A7 2C 02 FB | 	rdlong	local08, fp
0bb34     01 2C 66 F0 | 	shl	local08, #1
0bb38     17 2D 02 F1 | 	add	local08, local09
0bb3c     14 4E 05 F1 | 	add	fp, #20
0bb40     A7 12 02 FB | 	rdlong	arg01, fp
0bb44     28 4E 85 F1 | 	sub	fp, #40
0bb48     2C 00 00 FF 
0bb4c     CC E4 85 F1 | 	sub	objptr, ##22732
0bb50     01 14 06 F6 | 	mov	arg02, #1
0bb54     AC 21 B1 FD | 	call	#__system___float_tointeger
0bb58     16 FB 51 FC | 	wrword	result1, local08
0bb5c     28 4E 05 F1 | 	add	fp, #40
0bb60     A7 12 02 FB | 	rdlong	arg01, fp
0bb64     30 4E 05 F1 | 	add	fp, #48
0bb68     A7 14 02 FB | 	rdlong	arg02, fp
0bb6c     58 4E 85 F1 | 	sub	fp, #88
0bb70     1F 14 E6 F4 | 	bitnot	arg02, #31
0bb74     F4 18 B1 FD | 	call	#__system___float_add
0bb78     28 4E 05 F1 | 	add	fp, #40
0bb7c     A7 FA 61 FC | 	wrlong	result1, fp
0bb80     28 4E 85 F1 | 	sub	fp, #40
0bb84     FD 12 02 F6 | 	mov	arg01, result1
0bb88     00 14 06 F6 | 	mov	arg02, #0
0bb8c     01 16 06 F6 | 	mov	arg03, #1
0bb90     DC 20 B1 FD | 	call	#__system___float_cmp
0bb94     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb98     28 4E 05 C1 |  if_b	add	fp, #40
0bb9c     A7 00 68 CC |  if_b	wrlong	#0, fp
0bba0     28 4E 85 C1 |  if_b	sub	fp, #40
0bba4     14 4E 05 F1 | 	add	fp, #20
0bba8     A7 2E 02 FB | 	rdlong	local09, fp
0bbac     01 2E 06 F1 | 	add	local09, #1
0bbb0     A7 2E 62 FC | 	wrlong	local09, fp
0bbb4     14 4E 85 F1 | 	sub	fp, #20
0bbb8     44 FF 9F FD | 	jmp	#LR__0907
0bbbc                 | LR__0908
0bbbc     20 4E 05 F1 | 	add	fp, #32
0bbc0     A7 28 02 FB | 	rdlong	local06, fp
0bbc4     09 28 66 F0 | 	shl	local06, #9
0bbc8     2C 00 00 FF 
0bbcc     CC E4 05 F1 | 	add	objptr, ##22732
0bbd0     F2 28 02 F1 | 	add	local06, objptr
0bbd4     FE 29 06 F1 | 	add	local06, #510
0bbd8     14 01 58 FC | 	wrword	#0, local06
0bbdc                 | '   envbuf(channel,255)=0
0bbdc                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0bbdc     0C 4E 85 F1 | 	sub	fp, #12
0bbe0     A7 00 68 FC | 	wrlong	#0, fp
0bbe4     14 4E 85 F1 | 	sub	fp, #20
0bbe8     2C 00 00 FF 
0bbec     CC E4 85 F1 | 	sub	objptr, ##22732
0bbf0                 | LR__0909
0bbf0     00 12 06 F6 | 	mov	arg01, #0
0bbf4     54 4A B1 FD | 	call	#__system___getiolock_0442
0bbf8     FD 12 02 F6 | 	mov	arg01, result1
0bbfc     18 F1 B0 FD | 	call	#__system___lockmem
0bc00     20 4E 05 F1 | 	add	fp, #32
0bc04     A7 2E 02 FB | 	rdlong	local09, fp
0bc08     09 2E 66 F0 | 	shl	local09, #9
0bc0c     2C 00 00 FF 
0bc10     CC E4 05 F1 | 	add	objptr, ##22732
0bc14     F2 2E 02 F1 | 	add	local09, objptr
0bc18     0C 4E 85 F1 | 	sub	fp, #12
0bc1c     A7 2C 02 FB | 	rdlong	local08, fp
0bc20     14 4E 85 F1 | 	sub	fp, #20
0bc24     01 2C 66 F0 | 	shl	local08, #1
0bc28     17 2D 02 F1 | 	add	local08, local09
0bc2c     16 15 E2 FA | 	rdword	arg02, local08
0bc30     00 12 06 F6 | 	mov	arg01, #0
0bc34     00 16 06 F6 | 	mov	arg03, #0
0bc38     0A 18 06 F6 | 	mov	arg04, #10
0bc3c     2C 00 00 FF 
0bc40     CC E4 85 F1 | 	sub	objptr, ##22732
0bc44     5C FE B0 FD | 	call	#__system___basic_print_unsigned
0bc48     00 12 06 F6 | 	mov	arg01, #0
0bc4c     09 14 06 F6 | 	mov	arg02, #9
0bc50     00 16 06 F6 | 	mov	arg03, #0
0bc54     70 FD B0 FD | 	call	#__system___basic_print_char
0bc58     00 12 06 F6 | 	mov	arg01, #0
0bc5c     EC 49 B1 FD | 	call	#__system___getiolock_0442
0bc60     FD 00 68 FC | 	wrlong	#0, result1
0bc64     14 4E 05 F1 | 	add	fp, #20
0bc68     A7 2E 02 FB | 	rdlong	local09, fp
0bc6c     01 2E 06 F1 | 	add	local09, #1
0bc70     A7 2E 62 FC | 	wrlong	local09, fp
0bc74     14 4E 85 F1 | 	sub	fp, #20
0bc78     00 2F 56 F2 | 	cmps	local09, #256 wc
0bc7c     70 FF 9F CD |  if_b	jmp	#LR__0909
0bc80                 | LR__0910
0bc80                 | LR__0911
0bc80     A7 F0 03 F6 | 	mov	ptra, fp
0bc84     B2 00 A0 FD | 	call	#popregs_
0bc88                 | _do_defenv_ret
0bc88     2D 00 64 FD | 	ret
0bc8c                 | 
0bc8c                 | ' 
0bc8c                 | ' 
0bc8c                 | ' sub do_play
0bc8c                 | _do_play
0bc8c     05 4A 05 F6 | 	mov	COUNT_, #5
0bc90     A8 00 A0 FD | 	call	#pushregs_
0bc94     74 F0 07 F1 | 	add	ptra, #116
0bc98     60 4E 05 F1 | 	add	fp, #96
0bc9c     F5 25 A2 FF 
0bca0     A7 AA 68 FC | 	wrlong	##1145825877, fp
0bca4                 | ' speed_coeff=815.6614449376854599406528189911
0bca4                 | ' 
0bca4                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0bca4     5C 4E 85 F1 | 	sub	fp, #92
0bca8     A7 00 68 FC | 	wrlong	#0, fp
0bcac     97 18 48 FB | 	callpa	#(@LR__0921-@LR__0920)>>2,fcache_load_ptr_
0bcb0                 | LR__0920
0bcb0     A7 18 02 FB | 	rdlong	arg04, fp
0bcb4     02 18 66 F0 | 	shl	arg04, #2
0bcb8     2C 4E 05 F1 | 	add	fp, #44
0bcbc     A7 18 02 F1 | 	add	arg04, fp
0bcc0     00 00 E0 FF 
0bcc4     0C 01 68 FC | 	wrlong	##-1073741824, arg04
0bcc8     2C 4E 85 F1 | 	sub	fp, #44
0bccc     A7 1E 02 FB | 	rdlong	local01, fp
0bcd0     01 1E 06 F1 | 	add	local01, #1
0bcd4     A7 1E 62 FC | 	wrlong	local01, fp
0bcd8     09 1E 56 F2 | 	cmps	local01, #9 wc
0bcdc     D0 FF 9F CD |  if_b	jmp	#LR__0920
0bce0                 | LR__0921
0bce0     04 4E 85 F1 | 	sub	fp, #4
0bce4     6A 00 00 FF 
0bce8     04 E4 05 F1 | 	add	objptr, ##54276
0bcec     F2 20 02 FB | 	rdlong	local02, objptr
0bcf0     10 23 02 F6 | 	mov	local03, local02
0bcf4     01 22 66 F0 | 	shl	local03, #1
0bcf8     10 23 02 F1 | 	add	local03, local02
0bcfc     02 22 66 F0 | 	shl	local03, #2
0bd00     03 00 00 FF 
0bd04     04 E4 85 F1 | 	sub	objptr, ##1540
0bd08     F2 22 02 F1 | 	add	local03, objptr
0bd0c     11 25 02 FB | 	rdlong	local04, local03
0bd10     A7 24 62 FC | 	wrlong	local04, fp
0bd14                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0bd14                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0bd14                 | ' numpar=compiledline(lineptr_e).result.uresult
0bd14                 | ' for i=numpar to 1 step -1 
0bd14     04 4E 05 F1 | 	add	fp, #4
0bd18     A7 24 62 FC | 	wrlong	local04, fp
0bd1c     04 4E 85 F1 | 	sub	fp, #4
0bd20     67 00 00 FF 
0bd24     00 E4 85 F1 | 	sub	objptr, ##52736
0bd28                 | LR__0922
0bd28     CC DD BF FD | 	call	#_pop
0bd2c     54 4E 05 F1 | 	add	fp, #84
0bd30     A7 FA 61 FC | 	wrlong	result1, fp
0bd34     04 4E 05 F1 | 	add	fp, #4
0bd38     A7 FC 61 FC | 	wrlong	result2, fp
0bd3c     04 4E 05 F1 | 	add	fp, #4
0bd40     A7 FE 61 FC | 	wrlong	result3, fp
0bd44     58 4E 85 F1 | 	sub	fp, #88
0bd48     A7 22 02 FB | 	rdlong	local03, fp
0bd4c     01 22 86 F1 | 	sub	local03, #1
0bd50     02 22 66 F0 | 	shl	local03, #2
0bd54     2C 4E 05 F1 | 	add	fp, #44
0bd58     A7 22 02 F1 | 	add	local03, fp
0bd5c     24 4E 05 F1 | 	add	fp, #36
0bd60     A7 26 02 F6 | 	mov	local05, fp
0bd64     13 13 02 F6 | 	mov	arg01, local05
0bd68     54 4E 85 F1 | 	sub	fp, #84
0bd6c     F8 61 B0 FD | 	call	#_converttofloat
0bd70     11 FB 61 FC | 	wrlong	result1, local03
0bd74     04 4E 05 F1 | 	add	fp, #4
0bd78     A7 1E 02 FB | 	rdlong	local01, fp
0bd7c     01 1E 86 F1 | 	sub	local01, #1
0bd80     A7 1E 62 FC | 	wrlong	local01, fp
0bd84     04 4E 85 F1 | 	sub	fp, #4
0bd88     01 1E 56 F2 | 	cmps	local01, #1 wc
0bd8c     98 FF 9F 3D |  if_ae	jmp	#LR__0922
0bd90                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0bd90     30 4E 05 F1 | 	add	fp, #48
0bd94     A7 12 02 FB | 	rdlong	arg01, fp
0bd98     30 4E 85 F1 | 	sub	fp, #48
0bd9c     00 14 06 F6 | 	mov	arg02, #0
0bda0     01 16 06 F6 | 	mov	arg03, #1
0bda4     C8 1E B1 FD | 	call	#__system___float_cmp
0bda8     00 FA 55 F2 | 	cmps	result1, #0 wc
0bdac     0C 4E 05 C1 |  if_b	add	fp, #12
0bdb0     A7 00 68 CC |  if_b	wrlong	#0, fp
0bdb4     0C 4E 85 C1 |  if_b	sub	fp, #12
0bdb8     20 00 90 CD |  if_b	jmp	#LR__0923
0bdbc     30 4E 05 F1 | 	add	fp, #48
0bdc0     A7 12 02 FB | 	rdlong	arg01, fp
0bdc4     30 4E 85 F1 | 	sub	fp, #48
0bdc8     01 14 06 F6 | 	mov	arg02, #1
0bdcc     34 1F B1 FD | 	call	#__system___float_tointeger
0bdd0     0C 4E 05 F1 | 	add	fp, #12
0bdd4     A7 FA 61 FC | 	wrlong	result1, fp
0bdd8     0C 4E 85 F1 | 	sub	fp, #12
0bddc                 | LR__0923
0bddc                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0bddc     34 4E 05 F1 | 	add	fp, #52
0bde0     A7 12 02 FB | 	rdlong	arg01, fp
0bde4     34 4E 85 F1 | 	sub	fp, #52
0bde8     00 14 06 F6 | 	mov	arg02, #0
0bdec     01 16 06 F6 | 	mov	arg03, #1
0bdf0     7C 1E B1 FD | 	call	#__system___float_cmp
0bdf4     00 FA 55 F2 | 	cmps	result1, #0 wc
0bdf8     40 00 90 3D |  if_ae	jmp	#LR__0924
0bdfc     0C 4E 05 F1 | 	add	fp, #12
0be00     A7 20 02 FB | 	rdlong	local02, fp
0be04     10 23 02 F6 | 	mov	local03, local02
0be08     01 22 66 F0 | 	shl	local03, #1
0be0c     10 23 02 F1 | 	add	local03, local02
0be10     03 22 66 F0 | 	shl	local03, #3
0be14     34 00 00 FF 
0be18     CC E4 05 F1 | 	add	objptr, ##26828
0be1c     F2 22 02 F1 | 	add	local03, objptr
0be20     11 23 02 FB | 	rdlong	local03, local03
0be24     58 4E 05 F1 | 	add	fp, #88
0be28     A7 22 62 FC | 	wrlong	local03, fp
0be2c     64 4E 85 F1 | 	sub	fp, #100
0be30     34 00 00 FF 
0be34     CC E4 85 F1 | 	sub	objptr, ##26828
0be38     44 00 90 FD | 	jmp	#LR__0925
0be3c                 | LR__0924
0be3c     34 4E 05 F1 | 	add	fp, #52
0be40     A7 24 02 FB | 	rdlong	local04, fp
0be44     30 4E 05 F1 | 	add	fp, #48
0be48     A7 24 62 FC | 	wrlong	local04, fp
0be4c     58 4E 85 F1 | 	sub	fp, #88
0be50     A7 20 02 FB | 	rdlong	local02, fp
0be54     10 23 02 F6 | 	mov	local03, local02
0be58     01 22 66 F0 | 	shl	local03, #1
0be5c     10 23 02 F1 | 	add	local03, local02
0be60     03 22 66 F0 | 	shl	local03, #3
0be64     34 00 00 FF 
0be68     CC E4 05 F1 | 	add	objptr, ##26828
0be6c     F2 22 02 F1 | 	add	local03, objptr
0be70     0C 4E 85 F1 | 	sub	fp, #12
0be74     11 25 62 FC | 	wrlong	local04, local03
0be78     34 00 00 FF 
0be7c     CC E4 85 F1 | 	sub	objptr, ##26828
0be80                 | LR__0925
0be80                 | ' if params(2)<0 orelse params(2)>16.384 then vol=channels(channel).vol else vol=params(2) : channels(channel).vol=vol
0be80     38 4E 05 F1 | 	add	fp, #56
0be84     A7 12 02 FB | 	rdlong	arg01, fp
0be88     38 4E 85 F1 | 	sub	fp, #56
0be8c     00 14 06 F6 | 	mov	arg02, #0
0be90     01 16 06 F6 | 	mov	arg03, #1
0be94     D8 1D B1 FD | 	call	#__system___float_cmp
0be98     00 FA 55 F2 | 	cmps	result1, #0 wc
0be9c     24 00 90 CD |  if_b	jmp	#LR__0926
0bea0     38 4E 05 F1 | 	add	fp, #56
0bea4     A7 12 02 FB | 	rdlong	arg01, fp
0bea8     38 4E 85 F1 | 	sub	fp, #56
0beac     89 C1 20 FF 
0beb0     6F 14 06 F6 | 	mov	arg02, ##1099108975
0beb4     01 16 66 F6 | 	neg	arg03, #1
0beb8     B4 1D B1 FD | 	call	#__system___float_cmp
0bebc     01 FA 55 F2 | 	cmps	result1, #1 wc
0bec0     44 00 90 CD |  if_b	jmp	#LR__0927
0bec4                 | LR__0926
0bec4     0C 4E 05 F1 | 	add	fp, #12
0bec8     A7 20 02 FB | 	rdlong	local02, fp
0becc     10 23 02 F6 | 	mov	local03, local02
0bed0     01 22 66 F0 | 	shl	local03, #1
0bed4     10 23 02 F1 | 	add	local03, local02
0bed8     03 22 66 F0 | 	shl	local03, #3
0bedc     34 00 00 FF 
0bee0     CC E4 05 F1 | 	add	objptr, ##26828
0bee4     F2 22 02 F1 | 	add	local03, objptr
0bee8     0C 22 06 F1 | 	add	local03, #12
0beec     11 23 02 FB | 	rdlong	local03, local03
0bef0     60 4E 05 F1 | 	add	fp, #96
0bef4     A7 22 62 FC | 	wrlong	local03, fp
0bef8     6C 4E 85 F1 | 	sub	fp, #108
0befc     34 00 00 FF 
0bf00     CC E4 85 F1 | 	sub	objptr, ##26828
0bf04     48 00 90 FD | 	jmp	#LR__0928
0bf08                 | LR__0927
0bf08     38 4E 05 F1 | 	add	fp, #56
0bf0c     A7 24 02 FB | 	rdlong	local04, fp
0bf10     34 4E 05 F1 | 	add	fp, #52
0bf14     A7 24 62 FC | 	wrlong	local04, fp
0bf18     60 4E 85 F1 | 	sub	fp, #96
0bf1c     A7 20 02 FB | 	rdlong	local02, fp
0bf20     10 23 02 F6 | 	mov	local03, local02
0bf24     01 22 66 F0 | 	shl	local03, #1
0bf28     10 23 02 F1 | 	add	local03, local02
0bf2c     03 22 66 F0 | 	shl	local03, #3
0bf30     34 00 00 FF 
0bf34     CC E4 05 F1 | 	add	objptr, ##26828
0bf38     F2 22 02 F1 | 	add	local03, objptr
0bf3c     0C 4E 85 F1 | 	sub	fp, #12
0bf40     0C 22 06 F1 | 	add	local03, #12
0bf44     11 25 62 FC | 	wrlong	local04, local03
0bf48     34 00 00 FF 
0bf4c     CC E4 85 F1 | 	sub	objptr, ##26828
0bf50                 | LR__0928
0bf50                 | ' if params(3)<0 orelse params(3)>8.0 then wave=channels(channel).wave else wave=round(params(3)) : channels(channel).wave=wave
0bf50     3C 4E 05 F1 | 	add	fp, #60
0bf54     A7 12 02 FB | 	rdlong	arg01, fp
0bf58     3C 4E 85 F1 | 	sub	fp, #60
0bf5c     00 14 06 F6 | 	mov	arg02, #0
0bf60     01 16 06 F6 | 	mov	arg03, #1
0bf64     08 1D B1 FD | 	call	#__system___float_cmp
0bf68     00 FA 55 F2 | 	cmps	result1, #0 wc
0bf6c     24 00 90 CD |  if_b	jmp	#LR__0929
0bf70     3C 4E 05 F1 | 	add	fp, #60
0bf74     A7 12 02 FB | 	rdlong	arg01, fp
0bf78     3C 4E 85 F1 | 	sub	fp, #60
0bf7c     00 80 20 FF 
0bf80     00 14 06 F6 | 	mov	arg02, ##1090519040
0bf84     01 16 66 F6 | 	neg	arg03, #1
0bf88     E4 1C B1 FD | 	call	#__system___float_cmp
0bf8c     01 FA 55 F2 | 	cmps	result1, #1 wc
0bf90     48 00 90 CD |  if_b	jmp	#LR__0930
0bf94                 | LR__0929
0bf94     0C 4E 05 F1 | 	add	fp, #12
0bf98     A7 22 02 FB | 	rdlong	local03, fp
0bf9c     11 27 02 F6 | 	mov	local05, local03
0bfa0     01 26 66 F0 | 	shl	local05, #1
0bfa4     11 27 02 F1 | 	add	local05, local03
0bfa8     03 26 66 F0 | 	shl	local05, #3
0bfac     34 00 00 FF 
0bfb0     CC E4 05 F1 | 	add	objptr, ##26828
0bfb4     F2 26 02 F1 | 	add	local05, objptr
0bfb8     04 26 06 F1 | 	add	local05, #4
0bfbc     13 27 C2 FA | 	rdbyte	local05, local05
0bfc0     13 25 E2 F8 | 	getbyte	local04, local05, #0
0bfc4     14 4E 05 F1 | 	add	fp, #20
0bfc8     A7 24 62 FC | 	wrlong	local04, fp
0bfcc     20 4E 85 F1 | 	sub	fp, #32
0bfd0     34 00 00 FF 
0bfd4     CC E4 85 F1 | 	sub	objptr, ##26828
0bfd8     54 00 90 FD | 	jmp	#LR__0931
0bfdc                 | LR__0930
0bfdc     3C 4E 05 F1 | 	add	fp, #60
0bfe0     A7 12 02 FB | 	rdlong	arg01, fp
0bfe4     3C 4E 85 F1 | 	sub	fp, #60
0bfe8     01 14 06 F6 | 	mov	arg02, #1
0bfec     14 1D B1 FD | 	call	#__system___float_tointeger
0bff0     20 4E 05 F1 | 	add	fp, #32
0bff4     A7 FA 61 FC | 	wrlong	result1, fp
0bff8     14 4E 85 F1 | 	sub	fp, #20
0bffc     A7 20 02 FB | 	rdlong	local02, fp
0c000     10 23 02 F6 | 	mov	local03, local02
0c004     01 22 66 F0 | 	shl	local03, #1
0c008     10 23 02 F1 | 	add	local03, local02
0c00c     03 22 66 F0 | 	shl	local03, #3
0c010     34 00 00 FF 
0c014     CC E4 05 F1 | 	add	objptr, ##26828
0c018     F2 22 02 F1 | 	add	local03, objptr
0c01c     0C 4E 85 F1 | 	sub	fp, #12
0c020     04 22 06 F1 | 	add	local03, #4
0c024     11 FB 41 FC | 	wrbyte	result1, local03
0c028     34 00 00 FF 
0c02c     CC E4 85 F1 | 	sub	objptr, ##26828
0c030                 | LR__0931
0c030                 | ' if params(4)<0 orelse params(4)>8.0 then env=channels(channel).env else env=round(params(4)) : channels(channel).env=env
0c030     40 4E 05 F1 | 	add	fp, #64
0c034     A7 12 02 FB | 	rdlong	arg01, fp
0c038     40 4E 85 F1 | 	sub	fp, #64
0c03c     00 14 06 F6 | 	mov	arg02, #0
0c040     01 16 06 F6 | 	mov	arg03, #1
0c044     28 1C B1 FD | 	call	#__system___float_cmp
0c048     00 FA 55 F2 | 	cmps	result1, #0 wc
0c04c     24 00 90 CD |  if_b	jmp	#LR__0932
0c050     40 4E 05 F1 | 	add	fp, #64
0c054     A7 12 02 FB | 	rdlong	arg01, fp
0c058     40 4E 85 F1 | 	sub	fp, #64
0c05c     00 80 20 FF 
0c060     00 14 06 F6 | 	mov	arg02, ##1090519040
0c064     01 16 66 F6 | 	neg	arg03, #1
0c068     04 1C B1 FD | 	call	#__system___float_cmp
0c06c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c070     48 00 90 CD |  if_b	jmp	#LR__0933
0c074                 | LR__0932
0c074     0C 4E 05 F1 | 	add	fp, #12
0c078     A7 22 02 FB | 	rdlong	local03, fp
0c07c     11 27 02 F6 | 	mov	local05, local03
0c080     01 26 66 F0 | 	shl	local05, #1
0c084     11 27 02 F1 | 	add	local05, local03
0c088     03 26 66 F0 | 	shl	local05, #3
0c08c     34 00 00 FF 
0c090     CC E4 05 F1 | 	add	objptr, ##26828
0c094     F2 26 02 F1 | 	add	local05, objptr
0c098     05 26 06 F1 | 	add	local05, #5
0c09c     13 27 C2 FA | 	rdbyte	local05, local05
0c0a0     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c0a4     18 4E 05 F1 | 	add	fp, #24
0c0a8     A7 24 62 FC | 	wrlong	local04, fp
0c0ac     24 4E 85 F1 | 	sub	fp, #36
0c0b0     34 00 00 FF 
0c0b4     CC E4 85 F1 | 	sub	objptr, ##26828
0c0b8     54 00 90 FD | 	jmp	#LR__0934
0c0bc                 | LR__0933
0c0bc     40 4E 05 F1 | 	add	fp, #64
0c0c0     A7 12 02 FB | 	rdlong	arg01, fp
0c0c4     40 4E 85 F1 | 	sub	fp, #64
0c0c8     01 14 06 F6 | 	mov	arg02, #1
0c0cc     34 1C B1 FD | 	call	#__system___float_tointeger
0c0d0     24 4E 05 F1 | 	add	fp, #36
0c0d4     A7 FA 61 FC | 	wrlong	result1, fp
0c0d8     18 4E 85 F1 | 	sub	fp, #24
0c0dc     A7 20 02 FB | 	rdlong	local02, fp
0c0e0     10 23 02 F6 | 	mov	local03, local02
0c0e4     01 22 66 F0 | 	shl	local03, #1
0c0e8     10 23 02 F1 | 	add	local03, local02
0c0ec     03 22 66 F0 | 	shl	local03, #3
0c0f0     34 00 00 FF 
0c0f4     CC E4 05 F1 | 	add	objptr, ##26828
0c0f8     F2 22 02 F1 | 	add	local03, objptr
0c0fc     0C 4E 85 F1 | 	sub	fp, #12
0c100     05 22 06 F1 | 	add	local03, #5
0c104     11 FB 41 FC | 	wrbyte	result1, local03
0c108     34 00 00 FF 
0c10c     CC E4 85 F1 | 	sub	objptr, ##26828
0c110                 | LR__0934
0c110                 | ' if params(5)<0 orelse params(5)>1000.0 then slen=channels(channel).length else slen=params(5) : channels(channel).length=slen
0c110     44 4E 05 F1 | 	add	fp, #68
0c114     A7 12 02 FB | 	rdlong	arg01, fp
0c118     44 4E 85 F1 | 	sub	fp, #68
0c11c     00 14 06 F6 | 	mov	arg02, #0
0c120     01 16 06 F6 | 	mov	arg03, #1
0c124     48 1B B1 FD | 	call	#__system___float_cmp
0c128     00 FA 55 F2 | 	cmps	result1, #0 wc
0c12c     24 00 90 CD |  if_b	jmp	#LR__0935
0c130     44 4E 05 F1 | 	add	fp, #68
0c134     A7 12 02 FB | 	rdlong	arg01, fp
0c138     44 4E 85 F1 | 	sub	fp, #68
0c13c     00 3D 22 FF 
0c140     00 14 06 F6 | 	mov	arg02, ##1148846080
0c144     01 16 66 F6 | 	neg	arg03, #1
0c148     24 1B B1 FD | 	call	#__system___float_cmp
0c14c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c150     44 00 90 CD |  if_b	jmp	#LR__0936
0c154                 | LR__0935
0c154     0C 4E 05 F1 | 	add	fp, #12
0c158     A7 20 02 FB | 	rdlong	local02, fp
0c15c     10 23 02 F6 | 	mov	local03, local02
0c160     01 22 66 F0 | 	shl	local03, #1
0c164     10 23 02 F1 | 	add	local03, local02
0c168     03 22 66 F0 | 	shl	local03, #3
0c16c     34 00 00 FF 
0c170     CC E4 05 F1 | 	add	objptr, ##26828
0c174     F2 22 02 F1 | 	add	local03, objptr
0c178     08 22 06 F1 | 	add	local03, #8
0c17c     11 25 02 FB | 	rdlong	local04, local03
0c180     64 4E 05 F1 | 	add	fp, #100
0c184     A7 24 62 FC | 	wrlong	local04, fp
0c188     70 4E 85 F1 | 	sub	fp, #112
0c18c     34 00 00 FF 
0c190     CC E4 85 F1 | 	sub	objptr, ##26828
0c194     48 00 90 FD | 	jmp	#LR__0937
0c198                 | LR__0936
0c198     44 4E 05 F1 | 	add	fp, #68
0c19c     A7 24 02 FB | 	rdlong	local04, fp
0c1a0     2C 4E 05 F1 | 	add	fp, #44
0c1a4     A7 24 62 FC | 	wrlong	local04, fp
0c1a8     64 4E 85 F1 | 	sub	fp, #100
0c1ac     A7 20 02 FB | 	rdlong	local02, fp
0c1b0     10 23 02 F6 | 	mov	local03, local02
0c1b4     01 22 66 F0 | 	shl	local03, #1
0c1b8     10 23 02 F1 | 	add	local03, local02
0c1bc     03 22 66 F0 | 	shl	local03, #3
0c1c0     34 00 00 FF 
0c1c4     CC E4 05 F1 | 	add	objptr, ##26828
0c1c8     F2 22 02 F1 | 	add	local03, objptr
0c1cc     0C 4E 85 F1 | 	sub	fp, #12
0c1d0     08 22 06 F1 | 	add	local03, #8
0c1d4     11 25 62 FC | 	wrlong	local04, local03
0c1d8     34 00 00 FF 
0c1dc     CC E4 85 F1 | 	sub	objptr, ##26828
0c1e0                 | LR__0937
0c1e0                 | ' if params(6)<0 orelse params(6)>10000.0 then delay=channels(channel).delay else delay=round(params(6)) : channels(channel).delay=delay
0c1e0     48 4E 05 F1 | 	add	fp, #72
0c1e4     A7 12 02 FB | 	rdlong	arg01, fp
0c1e8     48 4E 85 F1 | 	sub	fp, #72
0c1ec     00 14 06 F6 | 	mov	arg02, #0
0c1f0     01 16 06 F6 | 	mov	arg03, #1
0c1f4     78 1A B1 FD | 	call	#__system___float_cmp
0c1f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c1fc     24 00 90 CD |  if_b	jmp	#LR__0938
0c200     48 4E 05 F1 | 	add	fp, #72
0c204     A7 12 02 FB | 	rdlong	arg01, fp
0c208     48 4E 85 F1 | 	sub	fp, #72
0c20c     20 0E 23 FF 
0c210     00 14 06 F6 | 	mov	arg02, ##1176256512
0c214     01 16 66 F6 | 	neg	arg03, #1
0c218     54 1A B1 FD | 	call	#__system___float_cmp
0c21c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c220     48 00 90 CD |  if_b	jmp	#LR__0939
0c224                 | LR__0938
0c224     0C 4E 05 F1 | 	add	fp, #12
0c228     A7 22 02 FB | 	rdlong	local03, fp
0c22c     11 27 02 F6 | 	mov	local05, local03
0c230     01 26 66 F0 | 	shl	local05, #1
0c234     11 27 02 F1 | 	add	local05, local03
0c238     03 26 66 F0 | 	shl	local05, #3
0c23c     34 00 00 FF 
0c240     CC E4 05 F1 | 	add	objptr, ##26828
0c244     F2 26 02 F1 | 	add	local05, objptr
0c248     06 26 06 F1 | 	add	local05, #6
0c24c     13 27 E2 FA | 	rdword	local05, local05
0c250     13 25 32 F9 | 	getword	local04, local05, #0
0c254     1C 4E 05 F1 | 	add	fp, #28
0c258     A7 24 62 FC | 	wrlong	local04, fp
0c25c     28 4E 85 F1 | 	sub	fp, #40
0c260     34 00 00 FF 
0c264     CC E4 85 F1 | 	sub	objptr, ##26828
0c268     54 00 90 FD | 	jmp	#LR__0940
0c26c                 | LR__0939
0c26c     48 4E 05 F1 | 	add	fp, #72
0c270     A7 12 02 FB | 	rdlong	arg01, fp
0c274     48 4E 85 F1 | 	sub	fp, #72
0c278     01 14 06 F6 | 	mov	arg02, #1
0c27c     84 1A B1 FD | 	call	#__system___float_tointeger
0c280     28 4E 05 F1 | 	add	fp, #40
0c284     A7 FA 61 FC | 	wrlong	result1, fp
0c288     1C 4E 85 F1 | 	sub	fp, #28
0c28c     A7 20 02 FB | 	rdlong	local02, fp
0c290     10 23 02 F6 | 	mov	local03, local02
0c294     01 22 66 F0 | 	shl	local03, #1
0c298     10 23 02 F1 | 	add	local03, local02
0c29c     03 22 66 F0 | 	shl	local03, #3
0c2a0     34 00 00 FF 
0c2a4     CC E4 05 F1 | 	add	objptr, ##26828
0c2a8     F2 22 02 F1 | 	add	local03, objptr
0c2ac     0C 4E 85 F1 | 	sub	fp, #12
0c2b0     06 22 06 F1 | 	add	local03, #6
0c2b4     11 FB 51 FC | 	wrword	result1, local03
0c2b8     34 00 00 FF 
0c2bc     CC E4 85 F1 | 	sub	objptr, ##26828
0c2c0                 | LR__0940
0c2c0                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0c2c0     4C 4E 05 F1 | 	add	fp, #76
0c2c4     A7 12 02 FB | 	rdlong	arg01, fp
0c2c8     4C 4E 85 F1 | 	sub	fp, #76
0c2cc     00 C0 5F FF 
0c2d0     00 14 06 F6 | 	mov	arg02, ##-1082130432
0c2d4     01 16 06 F6 | 	mov	arg03, #1
0c2d8     94 19 B1 FD | 	call	#__system___float_cmp
0c2dc     00 FA 55 F2 | 	cmps	result1, #0 wc
0c2e0     24 00 90 CD |  if_b	jmp	#LR__0941
0c2e4     4C 4E 05 F1 | 	add	fp, #76
0c2e8     A7 12 02 FB | 	rdlong	arg01, fp
0c2ec     4C 4E 85 F1 | 	sub	fp, #76
0c2f0     00 C0 1F FF 
0c2f4     00 14 06 F6 | 	mov	arg02, ##1065353216
0c2f8     01 16 66 F6 | 	neg	arg03, #1
0c2fc     70 19 B1 FD | 	call	#__system___float_cmp
0c300     01 FA 55 F2 | 	cmps	result1, #1 wc
0c304     44 00 90 CD |  if_b	jmp	#LR__0942
0c308                 | LR__0941
0c308     0C 4E 05 F1 | 	add	fp, #12
0c30c     A7 20 02 FB | 	rdlong	local02, fp
0c310     10 23 02 F6 | 	mov	local03, local02
0c314     01 22 66 F0 | 	shl	local03, #1
0c318     10 23 02 F1 | 	add	local03, local02
0c31c     03 22 66 F0 | 	shl	local03, #3
0c320     34 00 00 FF 
0c324     CC E4 05 F1 | 	add	objptr, ##26828
0c328     F2 22 02 F1 | 	add	local03, objptr
0c32c     10 22 06 F1 | 	add	local03, #16
0c330     11 27 02 FB | 	rdlong	local05, local03
0c334     5C 4E 05 F1 | 	add	fp, #92
0c338     A7 26 62 FC | 	wrlong	local05, fp
0c33c     68 4E 85 F1 | 	sub	fp, #104
0c340     34 00 00 FF 
0c344     CC E4 85 F1 | 	sub	objptr, ##26828
0c348     48 00 90 FD | 	jmp	#LR__0943
0c34c                 | LR__0942
0c34c     4C 4E 05 F1 | 	add	fp, #76
0c350     A7 26 02 FB | 	rdlong	local05, fp
0c354     1C 4E 05 F1 | 	add	fp, #28
0c358     A7 26 62 FC | 	wrlong	local05, fp
0c35c     5C 4E 85 F1 | 	sub	fp, #92
0c360     A7 20 02 FB | 	rdlong	local02, fp
0c364     10 23 02 F6 | 	mov	local03, local02
0c368     01 22 66 F0 | 	shl	local03, #1
0c36c     10 23 02 F1 | 	add	local03, local02
0c370     03 22 66 F0 | 	shl	local03, #3
0c374     34 00 00 FF 
0c378     CC E4 05 F1 | 	add	objptr, ##26828
0c37c     F2 22 02 F1 | 	add	local03, objptr
0c380     0C 4E 85 F1 | 	sub	fp, #12
0c384     10 22 06 F1 | 	add	local03, #16
0c388     11 27 62 FC | 	wrlong	local05, local03
0c38c     34 00 00 FF 
0c390     CC E4 85 F1 | 	sub	objptr, ##26828
0c394                 | LR__0943
0c394                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0c394     50 4E 05 F1 | 	add	fp, #80
0c398     A7 12 02 FB | 	rdlong	arg01, fp
0c39c     50 4E 85 F1 | 	sub	fp, #80
0c3a0     00 14 06 F6 | 	mov	arg02, #0
0c3a4     01 16 06 F6 | 	mov	arg03, #1
0c3a8     C4 18 B1 FD | 	call	#__system___float_cmp
0c3ac     00 FA 55 F2 | 	cmps	result1, #0 wc
0c3b0     24 00 90 CD |  if_b	jmp	#LR__0944
0c3b4     50 4E 05 F1 | 	add	fp, #80
0c3b8     A7 12 02 FB | 	rdlong	arg01, fp
0c3bc     50 4E 85 F1 | 	sub	fp, #80
0c3c0     80 BF 21 FF 
0c3c4     00 14 06 F6 | 	mov	arg02, ##1132396544
0c3c8     01 16 66 F6 | 	neg	arg03, #1
0c3cc     A0 18 B1 FD | 	call	#__system___float_cmp
0c3d0     01 FA 55 F2 | 	cmps	result1, #1 wc
0c3d4     44 00 90 CD |  if_b	jmp	#LR__0945
0c3d8                 | LR__0944
0c3d8     0C 4E 05 F1 | 	add	fp, #12
0c3dc     A7 22 02 FB | 	rdlong	local03, fp
0c3e0     11 27 02 F6 | 	mov	local05, local03
0c3e4     01 26 66 F0 | 	shl	local05, #1
0c3e8     11 27 02 F1 | 	add	local05, local03
0c3ec     03 26 66 F0 | 	shl	local05, #3
0c3f0     34 00 00 FF 
0c3f4     CC E4 05 F1 | 	add	objptr, ##26828
0c3f8     F2 26 02 F1 | 	add	local05, objptr
0c3fc     14 26 06 F1 | 	add	local05, #20
0c400     13 25 E2 FA | 	rdword	local04, local05
0c404     20 4E 05 F1 | 	add	fp, #32
0c408     A7 24 62 FC | 	wrlong	local04, fp
0c40c     2C 4E 85 F1 | 	sub	fp, #44
0c410     34 00 00 FF 
0c414     CC E4 85 F1 | 	sub	objptr, ##26828
0c418     54 00 90 FD | 	jmp	#LR__0946
0c41c                 | LR__0945
0c41c     50 4E 05 F1 | 	add	fp, #80
0c420     A7 12 02 FB | 	rdlong	arg01, fp
0c424     50 4E 85 F1 | 	sub	fp, #80
0c428     01 14 06 F6 | 	mov	arg02, #1
0c42c     D4 18 B1 FD | 	call	#__system___float_tointeger
0c430     2C 4E 05 F1 | 	add	fp, #44
0c434     A7 FA 61 FC | 	wrlong	result1, fp
0c438     20 4E 85 F1 | 	sub	fp, #32
0c43c     A7 20 02 FB | 	rdlong	local02, fp
0c440     10 23 02 F6 | 	mov	local03, local02
0c444     01 22 66 F0 | 	shl	local03, #1
0c448     10 23 02 F1 | 	add	local03, local02
0c44c     03 22 66 F0 | 	shl	local03, #3
0c450     34 00 00 FF 
0c454     CC E4 05 F1 | 	add	objptr, ##26828
0c458     F2 22 02 F1 | 	add	local03, objptr
0c45c     0C 4E 85 F1 | 	sub	fp, #12
0c460     14 22 06 F1 | 	add	local03, #20
0c464     11 FB 51 FC | 	wrword	result1, local03
0c468     34 00 00 FF 
0c46c     CC E4 85 F1 | 	sub	objptr, ##26828
0c470                 | LR__0946
0c470     60 4E 05 F1 | 	add	fp, #96
0c474     A7 12 02 FB | 	rdlong	arg01, fp
0c478     10 4E 05 F1 | 	add	fp, #16
0c47c     A7 14 02 FB | 	rdlong	arg02, fp
0c480     70 4E 85 F1 | 	sub	fp, #112
0c484     B8 15 B1 FD | 	call	#__system___float_div
0c488     FD 12 02 F6 | 	mov	arg01, result1
0c48c     01 14 06 F6 | 	mov	arg02, #1
0c490     70 18 B1 FD | 	call	#__system___float_tointeger
0c494     FD 24 02 F6 | 	mov	local04, result1
0c498     14 4E 05 F1 | 	add	fp, #20
0c49c     A7 24 62 FC | 	wrlong	local04, fp
0c4a0     54 4E 05 F1 | 	add	fp, #84
0c4a4     A7 14 02 FB | 	rdlong	arg02, fp
0c4a8     68 4E 85 F1 | 	sub	fp, #104
0c4ac     00 00 23 FF 
0c4b0     00 12 06 F6 | 	mov	arg01, ##1174405120
0c4b4     84 13 B1 FD | 	call	#__system___float_mul
0c4b8     FD 12 02 F6 | 	mov	arg01, result1
0c4bc     01 14 06 F6 | 	mov	arg02, #1
0c4c0     40 18 B1 FD | 	call	#__system___float_tointeger
0c4c4     0D 24 C6 F9 | 	decod	local04, #13
0c4c8     FD 24 02 F1 | 	add	local04, result1
0c4cc     18 4E 05 F1 | 	add	fp, #24
0c4d0     A7 24 62 FC | 	wrlong	local04, fp
0c4d4     54 4E 05 F1 | 	add	fp, #84
0c4d8     A7 14 02 FB | 	rdlong	arg02, fp
0c4dc     6C 4E 85 F1 | 	sub	fp, #108
0c4e0     00 3D 22 FF 
0c4e4     00 12 06 F6 | 	mov	arg01, ##1148846080
0c4e8     50 13 B1 FD | 	call	#__system___float_mul
0c4ec     FD 12 02 F6 | 	mov	arg01, result1
0c4f0     01 14 06 F6 | 	mov	arg02, #1
0c4f4     0C 18 B1 FD | 	call	#__system___float_tointeger
0c4f8     1C 4E 05 F1 | 	add	fp, #28
0c4fc     A7 FA 61 FC | 	wrlong	result1, fp
0c500     56 00 00 FF 
0c504     94 E5 05 F1 | 	add	objptr, ##44436
0c508     F2 24 02 FB | 	rdlong	local04, objptr
0c50c     56 00 00 FF 
0c510     94 E5 85 F1 | 	sub	objptr, ##44436
0c514     10 4E 85 F1 | 	sub	fp, #16
0c518     A7 20 02 FB | 	rdlong	local02, fp
0c51c     06 20 66 F0 | 	shl	local02, #6
0c520     10 25 02 F1 | 	add	local04, local02
0c524     04 4E 85 F1 | 	sub	fp, #4
0c528     A7 24 62 FC | 	wrlong	local04, fp
0c52c     5C 4E 05 F1 | 	add	fp, #92
0c530     A7 12 02 FB | 	rdlong	arg01, fp
0c534     64 4E 85 F1 | 	sub	fp, #100
0c538     72 3F 20 FF 
0c53c     EA 14 06 F6 | 	mov	arg02, ##1082057962
0c540     F8 12 B1 FD | 	call	#__system___float_mul
0c544     FD 12 02 F6 | 	mov	arg01, result1
0c548     01 14 06 F6 | 	mov	arg02, #1
0c54c     B4 17 B1 FD | 	call	#__system___float_tointeger
0c550     10 4E 05 F1 | 	add	fp, #16
0c554     A7 FA 61 FC | 	wrlong	result1, fp
0c558                 | ' 
0c558                 | ' speed=round(speed_coeff/slen)
0c558                 | ' ipan=8192+round(8192*pan)
0c558                 | ' ivol=round(1000.0*vol)
0c558                 | ' base2=base+64*channel
0c558                 | ' skip=round(freq*3.9827219) 
0c558                 | ' if wave <8 then 
0c558     10 4E 05 F1 | 	add	fp, #16
0c55c     A7 24 02 FB | 	rdlong	local04, fp
0c560     20 4E 85 F1 | 	sub	fp, #32
0c564     08 24 56 F2 | 	cmps	local04, #8 wc
0c568     40 00 90 3D |  if_ae	jmp	#LR__0947
0c56c     08 4E 05 F1 | 	add	fp, #8
0c570     A7 12 02 FB | 	rdlong	arg01, fp
0c574     08 12 06 F1 | 	add	arg01, #8
0c578     18 4E 05 F1 | 	add	fp, #24
0c57c     A7 14 02 FB | 	rdlong	arg02, fp
0c580     20 4E 85 F1 | 	sub	fp, #32
0c584     0B 14 66 F0 | 	shl	arg02, #11
0c588     0C 00 00 FF 
0c58c     CC E4 05 F1 | 	add	objptr, ##6348
0c590     F2 14 02 F1 | 	add	arg02, objptr
0c594     0C 00 00 FF 
0c598     CC E4 85 F1 | 	sub	objptr, ##6348
0c59c     00 00 60 FF 
0c5a0     00 14 06 F1 | 	add	arg02, ##-1073741824
0c5a4     09 15 62 FC | 	wrlong	arg02, arg01
0c5a8     18 00 90 FD | 	jmp	#LR__0948
0c5ac                 | LR__0947
0c5ac     08 4E 05 F1 | 	add	fp, #8
0c5b0     A7 12 02 FB | 	rdlong	arg01, fp
0c5b4     08 4E 85 F1 | 	sub	fp, #8
0c5b8     08 12 06 F1 | 	add	arg01, #8
0c5bc     00 00 E4 FF 
0c5c0     09 01 68 FC | 	wrlong	##-939524096, arg01
0c5c4                 | LR__0948
0c5c4     08 4E 05 F1 | 	add	fp, #8
0c5c8     A7 12 02 FB | 	rdlong	arg01, fp
0c5cc     10 12 06 F1 | 	add	arg01, #16
0c5d0     04 00 80 FF 
0c5d4     09 01 68 FC | 	wrlong	##2048, arg01
0c5d8     A7 12 02 FB | 	rdlong	arg01, fp
0c5dc     0C 12 06 F1 | 	add	arg01, #12
0c5e0     09 01 68 FC | 	wrlong	#0, arg01
0c5e4     A7 12 02 FB | 	rdlong	arg01, fp
0c5e8     14 12 06 F1 | 	add	arg01, #20
0c5ec     14 4E 05 F1 | 	add	fp, #20
0c5f0     A7 14 02 FB | 	rdlong	arg02, fp
0c5f4     09 15 52 FC | 	wrword	arg02, arg01
0c5f8     14 4E 85 F1 | 	sub	fp, #20
0c5fc     A7 12 02 FB | 	rdlong	arg01, fp
0c600     16 12 06 F1 | 	add	arg01, #22
0c604     10 4E 05 F1 | 	add	fp, #16
0c608     A7 14 02 FB | 	rdlong	arg02, fp
0c60c     09 15 52 FC | 	wrword	arg02, arg01
0c610                 | '   
0c610                 | ' lpoke base2+16,2048
0c610                 | ' lpoke base2+12,0
0c610                 | ' dpoke base2+20,ivol 
0c610                 | ' dpoke base2+22,ipan 
0c610                 | ' if wave<8 then
0c610     08 4E 05 F1 | 	add	fp, #8
0c614     A7 24 02 FB | 	rdlong	local04, fp
0c618     20 4E 85 F1 | 	sub	fp, #32
0c61c     08 24 56 F2 | 	cmps	local04, #8 wc
0c620     2C 00 90 3D |  if_ae	jmp	#LR__0949
0c624     08 4E 05 F1 | 	add	fp, #8
0c628     A7 12 02 FB | 	rdlong	arg01, fp
0c62c     18 12 06 F1 | 	add	arg01, #24
0c630     09 29 58 FC | 	wrword	#20, arg01
0c634     A7 12 02 FB | 	rdlong	arg01, fp
0c638     1A 12 06 F1 | 	add	arg01, #26
0c63c     08 4E 05 F1 | 	add	fp, #8
0c640     A7 14 02 FB | 	rdlong	arg02, fp
0c644     10 4E 85 F1 | 	sub	fp, #16
0c648     09 15 52 FC | 	wrword	arg02, arg01
0c64c     A4 00 90 FD | 	jmp	#LR__0950
0c650                 | LR__0949
0c650     08 4E 05 F1 | 	add	fp, #8
0c654     A7 24 02 FB | 	rdlong	local04, fp
0c658     18 24 06 F1 | 	add	local04, #24
0c65c     5C 4E 05 F1 | 	add	fp, #92
0c660     A7 14 02 FB | 	rdlong	arg02, fp
0c664     64 4E 85 F1 | 	sub	fp, #100
0c668     58 D0 24 FF 
0c66c     B0 13 06 F6 | 	mov	arg01, ##1235268016
0c670     CC 13 B1 FD | 	call	#__system___float_div
0c674     FD 12 02 F6 | 	mov	arg01, result1
0c678     01 14 06 F6 | 	mov	arg02, #1
0c67c     84 16 B1 FD | 	call	#__system___float_tointeger
0c680     12 FB 51 FC | 	wrword	result1, local04
0c684                 | '   dpoke base2+24,round(1316406/freq)  : print 1316406/freq
0c684     00 12 06 F6 | 	mov	arg01, #0
0c688     C0 3F B1 FD | 	call	#__system___getiolock_0442
0c68c     FD 12 02 F6 | 	mov	arg01, result1
0c690     84 E6 B0 FD | 	call	#__system___lockmem
0c694     00 20 06 F6 | 	mov	local02, #0
0c698     64 4E 05 F1 | 	add	fp, #100
0c69c     A7 14 02 FB | 	rdlong	arg02, fp
0c6a0     64 4E 85 F1 | 	sub	fp, #100
0c6a4     58 D0 24 FF 
0c6a8     B0 13 06 F6 | 	mov	arg01, ##1235268016
0c6ac     90 13 B1 FD | 	call	#__system___float_div
0c6b0     FD 14 02 F6 | 	mov	arg02, result1
0c6b4     10 13 02 F6 | 	mov	arg01, local02
0c6b8     00 16 06 F6 | 	mov	arg03, #0
0c6bc     23 18 06 F6 | 	mov	arg04, #35
0c6c0     90 17 B1 FD | 	call	#__system___basic_print_float
0c6c4     00 12 06 F6 | 	mov	arg01, #0
0c6c8     0A 14 06 F6 | 	mov	arg02, #10
0c6cc     00 16 06 F6 | 	mov	arg03, #0
0c6d0     F4 F2 B0 FD | 	call	#__system___basic_print_char
0c6d4     00 12 06 F6 | 	mov	arg01, #0
0c6d8     70 3F B1 FD | 	call	#__system___getiolock_0442
0c6dc     FD 00 68 FC | 	wrlong	#0, result1
0c6e0     08 4E 05 F1 | 	add	fp, #8
0c6e4     A7 12 02 FB | 	rdlong	arg01, fp
0c6e8     08 4E 85 F1 | 	sub	fp, #8
0c6ec     1A 12 06 F1 | 	add	arg01, #26
0c6f0     09 01 5A FC | 	wrword	#256, arg01
0c6f4                 | LR__0950
0c6f4     08 4E 05 F1 | 	add	fp, #8
0c6f8     A7 12 02 FB | 	rdlong	arg01, fp
0c6fc     20 12 06 F1 | 	add	arg01, #32
0c700     09 01 68 FC | 	wrlong	#0, arg01
0c704                 | ' 'dpoke base2+28,$4000_0000
0c704                 | ' lpoke base2+32,0 
0c704                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0c704     1C 4E 05 F1 | 	add	fp, #28
0c708     A7 24 02 FB | 	rdlong	local04, fp
0c70c     24 4E 85 F1 | 	sub	fp, #36
0c710     08 24 0E F2 | 	cmp	local04, #8 wz
0c714     18 00 90 5D |  if_ne	jmp	#LR__0951
0c718     08 4E 05 F1 | 	add	fp, #8
0c71c     A7 12 02 FB | 	rdlong	arg01, fp
0c720     08 4E 85 F1 | 	sub	fp, #8
0c724     24 12 06 F1 | 	add	arg01, #36
0c728     09 01 68 FC | 	wrlong	#0, arg01
0c72c     34 00 90 FD | 	jmp	#LR__0952
0c730                 | LR__0951
0c730     08 4E 05 F1 | 	add	fp, #8
0c734     A7 12 02 FB | 	rdlong	arg01, fp
0c738     24 12 06 F1 | 	add	arg01, #36
0c73c     1C 4E 05 F1 | 	add	fp, #28
0c740     A7 14 02 FB | 	rdlong	arg02, fp
0c744     24 4E 85 F1 | 	sub	fp, #36
0c748     09 14 66 F0 | 	shl	arg02, #9
0c74c     2C 00 00 FF 
0c750     CC E4 05 F1 | 	add	objptr, ##22732
0c754     F2 14 02 F1 | 	add	arg02, objptr
0c758     2C 00 00 FF 
0c75c     CC E4 85 F1 | 	sub	objptr, ##22732
0c760     09 15 62 FC | 	wrlong	arg02, arg01
0c764                 | LR__0952
0c764     08 4E 05 F1 | 	add	fp, #8
0c768     A7 12 02 FB | 	rdlong	arg01, fp
0c76c     28 12 06 F1 | 	add	arg01, #40
0c770     0C 4E 05 F1 | 	add	fp, #12
0c774     A7 14 02 FB | 	rdlong	arg02, fp
0c778     09 15 62 FC | 	wrlong	arg02, arg01
0c77c     0C 4E 85 F1 | 	sub	fp, #12
0c780     A7 12 02 FB | 	rdlong	arg01, fp
0c784     2C 12 06 F1 | 	add	arg01, #44
0c788     24 4E 05 F1 | 	add	fp, #36
0c78c     A7 14 02 FB | 	rdlong	arg02, fp
0c790     09 15 62 FC | 	wrlong	arg02, arg01
0c794                 | ' lpoke base2+40,speed' speed
0c794                 | ' lpoke base2+44,sus 'len
0c794                 | ' 
0c794                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0c794     04 4E 85 F1 | 	sub	fp, #4
0c798     A7 24 02 FB | 	rdlong	local04, fp
0c79c     28 4E 85 F1 | 	sub	fp, #40
0c7a0     01 24 56 F2 | 	cmps	local04, #1 wc
0c7a4     28 4E 05 31 |  if_ae	add	fp, #40
0c7a8     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0c7ac     28 4E 85 31 |  if_ae	sub	fp, #40
0c7b0     58 E8 B0 3D |  if_ae	call	#__system___waitms
0c7b4     A7 F0 03 F6 | 	mov	ptra, fp
0c7b8     B2 00 A0 FD | 	call	#popregs_
0c7bc                 | _do_play_ret
0c7bc     2D 00 64 FD | 	ret
0c7c0                 | 
0c7c0                 | ' 
0c7c0                 | ' sub do_release
0c7c0                 | _do_release
0c7c0     00 4A 05 F6 | 	mov	COUNT_, #0
0c7c4     A8 00 A0 FD | 	call	#pushregs_
0c7c8     10 F0 07 F1 | 	add	ptra, #16
0c7cc     28 D3 BF FD | 	call	#_pop
0c7d0     FF 14 02 F6 | 	mov	arg02, result3
0c7d4     A7 FA 61 FC | 	wrlong	result1, fp
0c7d8     04 4E 05 F1 | 	add	fp, #4
0c7dc     A7 FC 61 FC | 	wrlong	result2, fp
0c7e0     04 4E 05 F1 | 	add	fp, #4
0c7e4     A7 14 62 FC | 	wrlong	arg02, fp
0c7e8     08 4E 85 F1 | 	sub	fp, #8
0c7ec     A7 12 02 F6 | 	mov	arg01, fp
0c7f0     C8 56 B0 FD | 	call	#_converttoint
0c7f4     0C 4E 05 F1 | 	add	fp, #12
0c7f8     A7 FA 61 FC | 	wrlong	result1, fp
0c7fc                 | ' t1=pop()
0c7fc                 | ' channel=converttoint(t1)
0c7fc                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0c7fc     0C 4E 85 F1 | 	sub	fp, #12
0c800     00 FA 55 F2 | 	cmps	result1, #0 wc
0c804     44 00 90 CD |  if_b	jmp	#LR__0960
0c808     0C 4E 05 F1 | 	add	fp, #12
0c80c     A7 14 02 FB | 	rdlong	arg02, fp
0c810     0C 4E 85 F1 | 	sub	fp, #12
0c814     08 14 56 F2 | 	cmps	arg02, #8 wc
0c818     30 00 90 3D |  if_ae	jmp	#LR__0960
0c81c     56 00 00 FF 
0c820     94 E5 05 F1 | 	add	objptr, ##44436
0c824     F2 12 02 FB | 	rdlong	arg01, objptr
0c828     56 00 00 FF 
0c82c     94 E5 85 F1 | 	sub	objptr, ##44436
0c830     0C 4E 05 F1 | 	add	fp, #12
0c834     A7 14 02 FB | 	rdlong	arg02, fp
0c838     0C 4E 85 F1 | 	sub	fp, #12
0c83c     06 14 66 F0 | 	shl	arg02, #6
0c840     0A 13 02 F1 | 	add	arg01, arg02
0c844     2C 12 06 F1 | 	add	arg01, #44
0c848     09 FF 69 FC | 	wrlong	#255, arg01
0c84c                 | LR__0960
0c84c     A7 F0 03 F6 | 	mov	ptra, fp
0c850     B2 00 A0 FD | 	call	#popregs_
0c854                 | _do_release_ret
0c854     2D 00 64 FD | 	ret
0c858                 | 
0c858                 | ' 
0c858                 | ' 
0c858                 | ' sub do_defsnd
0c858                 | _do_defsnd
0c858     05 4A 05 F6 | 	mov	COUNT_, #5
0c85c     A8 00 A0 FD | 	call	#pushregs_
0c860     88 F0 07 F1 | 	add	ptra, #136
0c864     6A 00 00 FF 
0c868     04 E4 05 F1 | 	add	objptr, ##54276
0c86c     F2 1A 02 FB | 	rdlong	arg05, objptr
0c870     0D 19 02 F6 | 	mov	arg04, arg05
0c874     01 18 66 F0 | 	shl	arg04, #1
0c878     0D 19 02 F1 | 	add	arg04, arg05
0c87c     02 18 66 F0 | 	shl	arg04, #2
0c880     03 00 00 FF 
0c884     04 E4 85 F1 | 	sub	objptr, ##1540
0c888     F2 18 02 F1 | 	add	arg04, objptr
0c88c     0C 1B 02 FB | 	rdlong	arg05, arg04
0c890     A7 1A 62 FC | 	wrlong	arg05, fp
0c894                 | ' 
0c894                 | ' numpar=compiledline(lineptr_e).result.uresult
0c894                 | ' 
0c894                 | ' 
0c894                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0c894                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0c894                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0c894                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0c894                 | ' 
0c894                 | ' if numpar<2 then return
0c894     02 1A 56 F2 | 	cmps	arg05, #2 wc
0c898     67 00 00 FF 
0c89c     00 E4 85 F1 | 	sub	objptr, ##52736
0c8a0     A0 09 90 CD |  if_b	jmp	#LR__0998
0c8a4                 | ' 
0c8a4                 | '   
0c8a4                 | ' if numpar=2 then
0c8a4     A7 1A 02 FB | 	rdlong	arg05, fp
0c8a8     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c8ac     0C 04 90 5D |  if_ne	jmp	#LR__0981
0c8b0     44 D2 BF FD | 	call	#_pop
0c8b4     FF 1A 02 F6 | 	mov	arg05, result3
0c8b8     2C 4E 05 F1 | 	add	fp, #44
0c8bc     A7 FA 61 FC | 	wrlong	result1, fp
0c8c0     04 4E 05 F1 | 	add	fp, #4
0c8c4     A7 FC 61 FC | 	wrlong	result2, fp
0c8c8     04 4E 05 F1 | 	add	fp, #4
0c8cc     A7 1A 62 FC | 	wrlong	arg05, fp
0c8d0                 | '   t1=pop()
0c8d0                 | '   if t1.result_type=result_string2 then 
0c8d0     34 4E 85 F1 | 	sub	fp, #52
0c8d4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c8d8     20 00 90 5D |  if_ne	jmp	#LR__0970
0c8dc     2C 4E 05 F1 | 	add	fp, #44
0c8e0     A7 12 02 FB | 	rdlong	arg01, fp
0c8e4     2C 4E 85 F1 | 	sub	fp, #44
0c8e8     9C 11 B0 FD | 	call	#_convertstring
0c8ec     38 4E 05 F1 | 	add	fp, #56
0c8f0     A7 FA 61 FC | 	wrlong	result1, fp
0c8f4     38 4E 85 F1 | 	sub	fp, #56
0c8f8     58 00 90 FD | 	jmp	#LR__0973
0c8fc                 | LR__0970
0c8fc     34 4E 05 F1 | 	add	fp, #52
0c900     A7 1A 02 FB | 	rdlong	arg05, fp
0c904     34 4E 85 F1 | 	sub	fp, #52
0c908     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0c90c     18 00 90 5D |  if_ne	jmp	#LR__0971
0c910     2C 4E 05 F1 | 	add	fp, #44
0c914     A7 1A 02 FB | 	rdlong	arg05, fp
0c918     0C 4E 05 F1 | 	add	fp, #12
0c91c     A7 1A 62 FC | 	wrlong	arg05, fp
0c920     38 4E 85 F1 | 	sub	fp, #56
0c924     2C 00 90 FD | 	jmp	#LR__0972
0c928                 | LR__0971
0c928     54 01 00 FF 
0c92c     16 1A 06 F6 | 	mov	arg05, ##@LR__4708
0c930     38 4E 05 F1 | 	add	fp, #56
0c934     A7 1A 62 FC | 	wrlong	arg05, fp
0c938     0C 4E 85 F1 | 	sub	fp, #12
0c93c     A7 12 02 F6 | 	mov	arg01, fp
0c940     2C 4E 85 F1 | 	sub	fp, #44
0c944     74 55 B0 FD | 	call	#_converttoint
0c948     14 4E 05 F1 | 	add	fp, #20
0c94c     A7 FA 61 FC | 	wrlong	result1, fp
0c950     14 4E 85 F1 | 	sub	fp, #20
0c954                 | LR__0972
0c954                 | LR__0973
0c954                 | ' 
0c954                 | '     
0c954                 | '   if s<>"" then 
0c954     38 4E 05 F1 | 	add	fp, #56
0c958     A7 12 02 FB | 	rdlong	arg01, fp
0c95c     38 4E 85 F1 | 	sub	fp, #56
0c960     54 01 00 FF 
0c964     17 14 06 F6 | 	mov	arg02, ##@LR__4709
0c968     D4 E3 B0 FD | 	call	#__system___string_cmp
0c96c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c970     88 01 90 AD |  if_e	jmp	#LR__0975
0c974     80 D1 BF FD | 	call	#_pop
0c978     FF 1A 02 F6 | 	mov	arg05, result3
0c97c     2C 4E 05 F1 | 	add	fp, #44
0c980     A7 FA 61 FC | 	wrlong	result1, fp
0c984     04 4E 05 F1 | 	add	fp, #4
0c988     A7 FC 61 FC | 	wrlong	result2, fp
0c98c     04 4E 05 F1 | 	add	fp, #4
0c990     A7 1A 62 FC | 	wrlong	arg05, fp
0c994     08 4E 85 F1 | 	sub	fp, #8
0c998     A7 12 02 F6 | 	mov	arg01, fp
0c99c     2C 4E 85 F1 | 	sub	fp, #44
0c9a0     18 55 B0 FD | 	call	#_converttoint
0c9a4     10 4E 05 F1 | 	add	fp, #16
0c9a8     A7 FA 61 FC | 	wrlong	result1, fp
0c9ac     10 4E 85 F1 | 	sub	fp, #16
0c9b0                 | '     t1=pop()
0c9b0                 | '     channel=converttoint(t1) 
0c9b0                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0c9b0     09 12 06 F6 | 	mov	arg01, #9
0c9b4     C8 32 B1 FD | 	call	#__system__close
0c9b8     09 1E 06 F6 | 	mov	local01, #9
0c9bc     54 01 00 FF 
0c9c0     18 12 06 F6 | 	mov	arg01, ##@LR__4710
0c9c4     38 4E 05 F1 | 	add	fp, #56
0c9c8     A7 14 02 FB | 	rdlong	arg02, fp
0c9cc     38 4E 85 F1 | 	sub	fp, #56
0c9d0     A0 E3 B0 FD | 	call	#__system___string_concat
0c9d4     FD 14 02 F6 | 	mov	arg02, result1
0c9d8     0F 13 02 F6 | 	mov	arg01, local01
0c9dc     00 16 06 F6 | 	mov	arg03, #0
0c9e0     38 EF B0 FD | 	call	#__system___basic_open_string
0c9e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c9e8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c9ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c9f0     7B 00 00 FF 
0c9f4     94 E4 05 F1 | 	add	objptr, ##63124
0c9f8     F2 FA 61 FC | 	wrlong	result1, objptr
0c9fc                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c9fc     7B 00 00 FF 
0ca00     94 E4 85 F1 | 	sub	objptr, ##63124
0ca04     B0 00 90 AD |  if_e	jmp	#LR__0974
0ca08     00 12 06 F6 | 	mov	arg01, #0
0ca0c     3C 3C B1 FD | 	call	#__system___getiolock_0442
0ca10     FD 12 02 F6 | 	mov	arg01, result1
0ca14     00 E3 B0 FD | 	call	#__system___lockmem
0ca18     54 01 00 FF 
0ca1c     25 14 06 F6 | 	mov	arg02, ##@LR__4711
0ca20     00 12 06 F6 | 	mov	arg01, #0
0ca24     00 16 06 F6 | 	mov	arg03, #0
0ca28     F4 EF B0 FD | 	call	#__system___basic_print_string
0ca2c     7B 00 00 FF 
0ca30     94 E4 05 F1 | 	add	objptr, ##63124
0ca34     F2 14 02 FB | 	rdlong	arg02, objptr
0ca38     7B 00 00 FF 
0ca3c     94 E4 85 F1 | 	sub	objptr, ##63124
0ca40     00 12 06 F6 | 	mov	arg01, #0
0ca44     00 16 06 F6 | 	mov	arg03, #0
0ca48     0A 18 06 F6 | 	mov	arg04, #10
0ca4c     14 F0 B0 FD | 	call	#__system___basic_print_integer
0ca50     54 01 00 FF 
0ca54     33 14 06 F6 | 	mov	arg02, ##@LR__4712
0ca58     00 12 06 F6 | 	mov	arg01, #0
0ca5c     00 16 06 F6 | 	mov	arg03, #0
0ca60     BC EF B0 FD | 	call	#__system___basic_print_string
0ca64     00 1E 06 F6 | 	mov	local01, #0
0ca68     7B 00 00 FF 
0ca6c     94 E4 05 F1 | 	add	objptr, ##63124
0ca70     F2 12 02 FB | 	rdlong	arg01, objptr
0ca74     7B 00 00 FF 
0ca78     94 E4 85 F1 | 	sub	objptr, ##63124
0ca7c     D0 08 B1 FD | 	call	#__system___strerror
0ca80     FD 14 02 F6 | 	mov	arg02, result1
0ca84     0F 13 02 F6 | 	mov	arg01, local01
0ca88     00 16 06 F6 | 	mov	arg03, #0
0ca8c     90 EF B0 FD | 	call	#__system___basic_print_string
0ca90     00 12 06 F6 | 	mov	arg01, #0
0ca94     0A 14 06 F6 | 	mov	arg02, #10
0ca98     00 16 06 F6 | 	mov	arg03, #0
0ca9c     28 EF B0 FD | 	call	#__system___basic_print_char
0caa0     00 12 06 F6 | 	mov	arg01, #0
0caa4     A4 3B B1 FD | 	call	#__system___getiolock_0442
0caa8     FD 00 68 FC | 	wrlong	#0, result1
0caac     09 12 06 F6 | 	mov	arg01, #9
0cab0     CC 31 B1 FD | 	call	#__system__close
0cab4     8C 07 90 FD | 	jmp	#LR__0998
0cab8                 | LR__0974
0cab8                 | '     get #9,17,samplebuf(channel,0),1024
0cab8     10 4E 05 F1 | 	add	fp, #16
0cabc     A7 16 02 FB | 	rdlong	arg03, fp
0cac0     10 4E 85 F1 | 	sub	fp, #16
0cac4     0B 16 66 F0 | 	shl	arg03, #11
0cac8     0C 00 00 FF 
0cacc     CC E4 05 F1 | 	add	objptr, ##6348
0cad0     F2 16 02 F1 | 	add	arg03, objptr
0cad4     09 12 06 F6 | 	mov	arg01, #9
0cad8     11 14 06 F6 | 	mov	arg02, #17
0cadc     0A 18 C6 F9 | 	decod	arg04, #10
0cae0     02 1A 06 F6 | 	mov	arg05, #2
0cae4     0C 00 00 FF 
0cae8     CC E4 85 F1 | 	sub	objptr, ##6348
0caec     40 F0 B0 FD | 	call	#__system___basic_get
0caf0                 | '     close #9
0caf0     09 12 06 F6 | 	mov	arg01, #9
0caf4     88 31 B1 FD | 	call	#__system__close
0caf8                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0caf8                 | '     return
0caf8     48 07 90 FD | 	jmp	#LR__0998
0cafc                 | LR__0975
0cafc                 | '     if wptr < ($80000 - 2048) then 
0cafc     14 4E 05 F1 | 	add	fp, #20
0cb00     A7 1E 02 FB | 	rdlong	local01, fp
0cb04     14 4E 85 F1 | 	sub	fp, #20
0cb08     FC 03 00 FF 
0cb0c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0cb10     80 00 90 3D |  if_ae	jmp	#LR__0978
0cb14                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0cb14     04 4E 05 F1 | 	add	fp, #4
0cb18     A7 00 68 FC | 	wrlong	#0, fp
0cb1c     04 4E 85 F1 | 	sub	fp, #4
0cb20     0C 00 00 FF 
0cb24     CC E4 05 F1 | 	add	objptr, ##6348
0cb28     97 2E 48 FB | 	callpa	#(@LR__0977-@LR__0976)>>2,fcache_load_ptr_
0cb2c                 | LR__0976
0cb2c     10 4E 05 F1 | 	add	fp, #16
0cb30     A7 1E 02 FB | 	rdlong	local01, fp
0cb34     0B 1E 66 F0 | 	shl	local01, #11
0cb38     F2 1E 02 F1 | 	add	local01, objptr
0cb3c     0C 4E 85 F1 | 	sub	fp, #12
0cb40     A7 1A 02 FB | 	rdlong	arg05, fp
0cb44     0D 19 02 F6 | 	mov	arg04, arg05
0cb48     01 18 66 F0 | 	shl	arg04, #1
0cb4c     0F 19 02 F1 | 	add	arg04, local01
0cb50     10 4E 05 F1 | 	add	fp, #16
0cb54     A7 12 02 FB | 	rdlong	arg01, fp
0cb58     01 1A 66 F0 | 	shl	arg05, #1
0cb5c     0D 13 02 F1 | 	add	arg01, arg05
0cb60     09 FB E1 FA | 	rdword	result1, arg01
0cb64     0C FB 51 FC | 	wrword	result1, arg04
0cb68     10 4E 85 F1 | 	sub	fp, #16
0cb6c     A7 1E 02 FB | 	rdlong	local01, fp
0cb70     01 1E 06 F1 | 	add	local01, #1
0cb74     A7 1E 62 FC | 	wrlong	local01, fp
0cb78     04 4E 85 F1 | 	sub	fp, #4
0cb7c     02 00 00 FF 
0cb80     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0cb84     A4 FF 9F CD |  if_b	jmp	#LR__0976
0cb88                 | LR__0977
0cb88     0C 00 00 FF 
0cb8c     CC E4 85 F1 | 	sub	objptr, ##6348
0cb90     B0 06 90 FD | 	jmp	#LR__0998
0cb94                 | LR__0978
0cb94                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0cb94     04 4E 05 F1 | 	add	fp, #4
0cb98     A7 00 68 FC | 	wrlong	#0, fp
0cb9c     04 4E 85 F1 | 	sub	fp, #4
0cba0                 | LR__0979
0cba0     10 4E 05 F1 | 	add	fp, #16
0cba4     A7 1A 02 FB | 	rdlong	arg05, fp
0cba8     0B 1A 66 F0 | 	shl	arg05, #11
0cbac     0C 00 00 FF 
0cbb0     CC E4 05 F1 | 	add	objptr, ##6348
0cbb4     F2 1A 02 F1 | 	add	arg05, objptr
0cbb8     0C 4E 85 F1 | 	sub	fp, #12
0cbbc     A7 18 02 FB | 	rdlong	arg04, fp
0cbc0     0C 21 02 F6 | 	mov	local02, arg04
0cbc4     01 20 66 F0 | 	shl	local02, #1
0cbc8     0D 21 02 F1 | 	add	local02, arg05
0cbcc     10 4E 05 F1 | 	add	fp, #16
0cbd0     A7 12 02 FB | 	rdlong	arg01, fp
0cbd4     14 4E 85 F1 | 	sub	fp, #20
0cbd8     01 18 66 F0 | 	shl	arg04, #1
0cbdc     0C 13 02 F1 | 	add	arg01, arg04
0cbe0     0C 00 00 FF 
0cbe4     CC E4 85 F1 | 	sub	objptr, ##6348
0cbe8     30 AD B0 FD | 	call	#_psdpeek
0cbec     10 FB 51 FC | 	wrword	result1, local02
0cbf0     04 4E 05 F1 | 	add	fp, #4
0cbf4     A7 22 02 FB | 	rdlong	local03, fp
0cbf8     01 22 06 F1 | 	add	local03, #1
0cbfc     A7 22 62 FC | 	wrlong	local03, fp
0cc00     04 4E 85 F1 | 	sub	fp, #4
0cc04     02 00 00 FF 
0cc08     00 22 56 F2 | 	cmps	local03, ##1024 wc
0cc0c     90 FF 9F CD |  if_b	jmp	#LR__0979
0cc10                 | '     return 
0cc10     30 06 90 FD | 	jmp	#LR__0998
0cc14                 | '   
0cc14                 | '   par=converttoint(t1)  : print par
0cc14                 | '   t1=pop()
0cc14                 | '   channel=converttoint(t1)  
0cc14                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0cc14                 | LR__0980
0cc14     10 4E 05 F1 | 	add	fp, #16
0cc18     A7 22 02 FB | 	rdlong	local03, fp
0cc1c     0B 22 66 F0 | 	shl	local03, #11
0cc20     0C 00 00 FF 
0cc24     CC E4 05 F1 | 	add	objptr, ##6348
0cc28     F2 22 02 F1 | 	add	local03, objptr
0cc2c     0C 4E 85 F1 | 	sub	fp, #12
0cc30     A7 12 02 FB | 	rdlong	arg01, fp
0cc34     09 21 02 F6 | 	mov	local02, arg01
0cc38     01 20 66 F0 | 	shl	local02, #1
0cc3c     11 21 02 F1 | 	add	local02, local03
0cc40     04 4E 85 F1 | 	sub	fp, #4
0cc44     0C 00 00 FF 
0cc48     CC E4 85 F1 | 	sub	objptr, ##6348
0cc4c     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc50     1F 24 C6 C9 |  if_b	decod	local04, #31
0cc54     00 24 06 36 |  if_ae	mov	local04, #0
0cc58     DC 07 B1 FD | 	call	#__system___float_fromuns
0cc5c     12 FB 61 F5 | 	xor	result1, local04
0cc60     FD 14 02 F6 | 	mov	arg02, result1
0cc64     87 E4 1D FF 
0cc68     DB 13 06 F6 | 	mov	arg01, ##1003032539
0cc6c     CC 0B B1 FD | 	call	#__system___float_mul
0cc70     FD 12 02 F6 | 	mov	arg01, result1
0cc74     00 15 B1 FD | 	call	#__system____builtin_sinf
0cc78     FD 14 02 F6 | 	mov	arg02, result1
0cc7c     58 7F 23 FF 
0cc80     00 12 06 F6 | 	mov	arg01, ##1191096320
0cc84     B4 0B B1 FD | 	call	#__system___float_mul
0cc88     FD 12 02 F6 | 	mov	arg01, result1
0cc8c     01 14 06 F6 | 	mov	arg02, #1
0cc90     70 10 B1 FD | 	call	#__system___float_tointeger
0cc94     10 FB 51 FC | 	wrword	result1, local02
0cc98     04 4E 05 F1 | 	add	fp, #4
0cc9c     A7 22 02 FB | 	rdlong	local03, fp
0cca0     01 22 06 F1 | 	add	local03, #1
0cca4     A7 22 62 FC | 	wrlong	local03, fp
0cca8     04 4E 85 F1 | 	sub	fp, #4
0ccac     02 00 00 FF 
0ccb0     00 22 56 F2 | 	cmps	local03, ##1024 wc
0ccb4     5C FF 9F CD |  if_b	jmp	#LR__0980
0ccb8                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0ccb8                 | '   return
0ccb8     88 05 90 FD | 	jmp	#LR__0998
0ccbc                 | LR__0981
0ccbc                 | ' for i=0 to 15 : harm(i)=0: next i  
0ccbc     04 4E 05 F1 | 	add	fp, #4
0ccc0     A7 00 68 FC | 	wrlong	#0, fp
0ccc4     97 16 48 FB | 	callpa	#(@LR__0983-@LR__0982)>>2,fcache_load_ptr_
0ccc8                 | LR__0982
0ccc8     A7 22 02 FB | 	rdlong	local03, fp
0cccc     02 22 66 F0 | 	shl	local03, #2
0ccd0     38 4E 05 F1 | 	add	fp, #56
0ccd4     A7 22 02 F1 | 	add	local03, fp
0ccd8     11 01 68 FC | 	wrlong	#0, local03
0ccdc     38 4E 85 F1 | 	sub	fp, #56
0cce0     A7 22 02 FB | 	rdlong	local03, fp
0cce4     01 22 06 F1 | 	add	local03, #1
0cce8     A7 22 62 FC | 	wrlong	local03, fp
0ccec     10 22 56 F2 | 	cmps	local03, #16 wc
0ccf0     D4 FF 9F CD |  if_b	jmp	#LR__0982
0ccf4                 | LR__0983
0ccf4     04 4E 85 F1 | 	sub	fp, #4
0ccf8                 | ' for i=numpar to 2 step -1 
0ccf8     A7 1E 02 FB | 	rdlong	local01, fp
0ccfc     04 4E 05 F1 | 	add	fp, #4
0cd00     A7 1E 62 FC | 	wrlong	local01, fp
0cd04     04 4E 85 F1 | 	sub	fp, #4
0cd08                 | LR__0984
0cd08     EC CD BF FD | 	call	#_pop
0cd0c     2C 4E 05 F1 | 	add	fp, #44
0cd10     A7 FA 61 FC | 	wrlong	result1, fp
0cd14     04 4E 05 F1 | 	add	fp, #4
0cd18     A7 FC 61 FC | 	wrlong	result2, fp
0cd1c     04 4E 05 F1 | 	add	fp, #4
0cd20     A7 FE 61 FC | 	wrlong	result3, fp
0cd24     30 4E 85 F1 | 	sub	fp, #48
0cd28     A7 22 02 FB | 	rdlong	local03, fp
0cd2c     02 22 86 F1 | 	sub	local03, #2
0cd30     02 22 66 F0 | 	shl	local03, #2
0cd34     38 4E 05 F1 | 	add	fp, #56
0cd38     A7 22 02 F1 | 	add	local03, fp
0cd3c     10 4E 85 F1 | 	sub	fp, #16
0cd40     A7 12 02 F6 | 	mov	arg01, fp
0cd44     2C 4E 85 F1 | 	sub	fp, #44
0cd48     1C 52 B0 FD | 	call	#_converttofloat
0cd4c     11 FB 61 FC | 	wrlong	result1, local03
0cd50     04 4E 05 F1 | 	add	fp, #4
0cd54     A7 22 02 FB | 	rdlong	local03, fp
0cd58     01 22 86 F1 | 	sub	local03, #1
0cd5c     A7 22 62 FC | 	wrlong	local03, fp
0cd60     04 4E 85 F1 | 	sub	fp, #4
0cd64     02 22 56 F2 | 	cmps	local03, #2 wc
0cd68     9C FF 9F 3D |  if_ae	jmp	#LR__0984
0cd6c     88 CD BF FD | 	call	#_pop
0cd70     FF 1E 02 F6 | 	mov	local01, result3
0cd74     2C 4E 05 F1 | 	add	fp, #44
0cd78     A7 FA 61 FC | 	wrlong	result1, fp
0cd7c     04 4E 05 F1 | 	add	fp, #4
0cd80     A7 FC 61 FC | 	wrlong	result2, fp
0cd84     04 4E 05 F1 | 	add	fp, #4
0cd88     A7 1E 62 FC | 	wrlong	local01, fp
0cd8c     08 4E 85 F1 | 	sub	fp, #8
0cd90     A7 12 02 F6 | 	mov	arg01, fp
0cd94     2C 4E 85 F1 | 	sub	fp, #44
0cd98     20 51 B0 FD | 	call	#_converttoint
0cd9c     FD 1E 02 F6 | 	mov	local01, result1
0cda0     10 4E 05 F1 | 	add	fp, #16
0cda4     A7 1E 62 FC | 	wrlong	local01, fp
0cda8     10 4E 85 F1 | 	sub	fp, #16
0cdac                 | ' t1=pop()
0cdac                 | ' channel=converttoint(t1) : print channel
0cdac     00 12 06 F6 | 	mov	arg01, #0
0cdb0     98 38 B1 FD | 	call	#__system___getiolock_0442
0cdb4     FD 12 02 F6 | 	mov	arg01, result1
0cdb8     5C DF B0 FD | 	call	#__system___lockmem
0cdbc     10 4E 05 F1 | 	add	fp, #16
0cdc0     A7 14 02 FB | 	rdlong	arg02, fp
0cdc4     10 4E 85 F1 | 	sub	fp, #16
0cdc8     00 12 06 F6 | 	mov	arg01, #0
0cdcc     00 16 06 F6 | 	mov	arg03, #0
0cdd0     0A 18 06 F6 | 	mov	arg04, #10
0cdd4     8C EC B0 FD | 	call	#__system___basic_print_integer
0cdd8     00 12 06 F6 | 	mov	arg01, #0
0cddc     0A 14 06 F6 | 	mov	arg02, #10
0cde0     00 16 06 F6 | 	mov	arg03, #0
0cde4     E0 EB B0 FD | 	call	#__system___basic_print_char
0cde8     00 12 06 F6 | 	mov	arg01, #0
0cdec     5C 38 B1 FD | 	call	#__system___getiolock_0442
0cdf0     FD 00 68 FC | 	wrlong	#0, result1
0cdf4                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0cdf4     08 4E 05 F1 | 	add	fp, #8
0cdf8     02 00 80 FF 
0cdfc     A7 00 68 FC | 	wrlong	##1024, fp
0ce00     08 4E 85 F1 | 	sub	fp, #8
0ce04     0C 00 00 FF 
0ce08     CC E4 05 F1 | 	add	objptr, ##6348
0ce0c     97 18 48 FB | 	callpa	#(@LR__0987-@LR__0985)>>2,fcache_load_ptr_
0ce10                 | LR__0985
0ce10     02 00 00 FF 
0ce14     00 14 DC FC | 	rep	@LR__0988, ##1024
0ce18                 | LR__0986
0ce18     10 4E 05 F1 | 	add	fp, #16
0ce1c     A7 20 02 FB | 	rdlong	local02, fp
0ce20     0B 20 66 F0 | 	shl	local02, #11
0ce24     F2 20 02 F1 | 	add	local02, objptr
0ce28     0C 4E 85 F1 | 	sub	fp, #12
0ce2c     A7 22 02 FB | 	rdlong	local03, fp
0ce30     04 4E 85 F1 | 	sub	fp, #4
0ce34     01 22 66 F0 | 	shl	local03, #1
0ce38     10 23 02 F1 | 	add	local03, local02
0ce3c     11 01 58 FC | 	wrword	#0, local03
0ce40                 | LR__0987
0ce40                 | LR__0988
0ce40     0C 00 00 FF 
0ce44     CC E4 85 F1 | 	sub	objptr, ##6348
0ce48     20 4E 05 F1 | 	add	fp, #32
0ce4c     A7 00 68 FC | 	wrlong	#0, fp
0ce50                 | ' max=0
0ce50                 | ' if harm(0)<0 then
0ce50     1C 4E 05 F1 | 	add	fp, #28
0ce54     A7 12 02 FB | 	rdlong	arg01, fp
0ce58     3C 4E 85 F1 | 	sub	fp, #60
0ce5c     00 14 06 F6 | 	mov	arg02, #0
0ce60     01 16 06 F6 | 	mov	arg03, #1
0ce64     08 0E B1 FD | 	call	#__system___float_cmp
0ce68     00 FA 55 F2 | 	cmps	result1, #0 wc
0ce6c     04 01 90 3D |  if_ae	jmp	#LR__0991
0ce70     3C 4E 05 F1 | 	add	fp, #60
0ce74     A7 FA 01 FB | 	rdlong	result1, fp
0ce78     1F FA 05 F4 | 	bitl	result1, #31
0ce7c     24 4E 85 F1 | 	sub	fp, #36
0ce80     A7 FA 61 FC | 	wrlong	result1, fp
0ce84     28 4E 05 F1 | 	add	fp, #40
0ce88     A7 FA 01 FB | 	rdlong	result1, fp
0ce8c     1F FA 05 F4 | 	bitl	result1, #31
0ce90     24 4E 85 F1 | 	sub	fp, #36
0ce94     A7 FA 61 FC | 	wrlong	result1, fp
0ce98     20 4E 05 F1 | 	add	fp, #32
0ce9c     00 C0 9F FF 
0cea0     A7 00 68 FC | 	wrlong	##1065353216, fp
0cea4     24 4E 85 F1 | 	sub	fp, #36
0cea8     A7 1E 02 FB | 	rdlong	local01, fp
0ceac     28 4E 05 F1 | 	add	fp, #40
0ceb0     A7 1E 62 FC | 	wrlong	local01, fp
0ceb4     24 4E 85 F1 | 	sub	fp, #36
0ceb8     A7 1E 02 FB | 	rdlong	local01, fp
0cebc     28 4E 05 F1 | 	add	fp, #40
0cec0     A7 1E 62 FC | 	wrlong	local01, fp
0cec4                 | '   harm(0)=1
0cec4                 | '   harm(1)=even
0cec4                 | '   harm(2)=odd
0cec4                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0cec4     40 4E 85 F1 | 	sub	fp, #64
0cec8     A7 06 68 FC | 	wrlong	#3, fp
0cecc                 | LR__0989
0cecc     A7 22 02 FB | 	rdlong	local03, fp
0ced0     11 27 02 F6 | 	mov	local05, local03
0ced4     02 26 66 F0 | 	shl	local05, #2
0ced8     38 4E 05 F1 | 	add	fp, #56
0cedc     A7 26 02 F1 | 	add	local05, fp
0cee0     02 22 86 F1 | 	sub	local03, #2
0cee4     02 22 66 F0 | 	shl	local03, #2
0cee8     A7 22 02 F1 | 	add	local03, fp
0ceec     11 13 02 FB | 	rdlong	arg01, local03
0cef0     24 4E 85 F1 | 	sub	fp, #36
0cef4     A7 14 02 FB | 	rdlong	arg02, fp
0cef8     18 4E 85 F1 | 	sub	fp, #24
0cefc     3C 09 B1 FD | 	call	#__system___float_mul
0cf00     13 FB 61 FC | 	wrlong	result1, local05
0cf04     04 4E 05 F1 | 	add	fp, #4
0cf08     A7 22 02 FB | 	rdlong	local03, fp
0cf0c     02 22 06 F1 | 	add	local03, #2
0cf10     A7 22 62 FC | 	wrlong	local03, fp
0cf14     10 22 56 F2 | 	cmps	local03, #16 wc
0cf18     B0 FF 9F CD |  if_b	jmp	#LR__0989
0cf1c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0cf1c     A7 08 68 FC | 	wrlong	#4, fp
0cf20                 | LR__0990
0cf20     A7 22 02 FB | 	rdlong	local03, fp
0cf24     11 27 02 F6 | 	mov	local05, local03
0cf28     02 26 66 F0 | 	shl	local05, #2
0cf2c     38 4E 05 F1 | 	add	fp, #56
0cf30     A7 26 02 F1 | 	add	local05, fp
0cf34     02 22 86 F1 | 	sub	local03, #2
0cf38     02 22 66 F0 | 	shl	local03, #2
0cf3c     A7 22 02 F1 | 	add	local03, fp
0cf40     11 13 02 FB | 	rdlong	arg01, local03
0cf44     20 4E 85 F1 | 	sub	fp, #32
0cf48     A7 14 02 FB | 	rdlong	arg02, fp
0cf4c     1C 4E 85 F1 | 	sub	fp, #28
0cf50     E8 08 B1 FD | 	call	#__system___float_mul
0cf54     13 FB 61 FC | 	wrlong	result1, local05
0cf58     04 4E 05 F1 | 	add	fp, #4
0cf5c     A7 22 02 FB | 	rdlong	local03, fp
0cf60     02 22 06 F1 | 	add	local03, #2
0cf64     A7 22 62 FC | 	wrlong	local03, fp
0cf68     0F 22 56 F2 | 	cmps	local03, #15 wc
0cf6c     B0 FF 9F CD |  if_b	jmp	#LR__0990
0cf70     04 4E 85 F1 | 	sub	fp, #4
0cf74                 | LR__0991
0cf74                 | ' if harm(0)>=0 then ' synthesize with harmonics
0cf74     3C 4E 05 F1 | 	add	fp, #60
0cf78     A7 12 02 FB | 	rdlong	arg01, fp
0cf7c     3C 4E 85 F1 | 	sub	fp, #60
0cf80     00 14 06 F6 | 	mov	arg02, #0
0cf84     01 16 66 F6 | 	neg	arg03, #1
0cf88     E4 0C B1 FD | 	call	#__system___float_cmp
0cf8c     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf90     B0 02 90 CD |  if_b	jmp	#LR__0997
0cf94                 | '   for i=0 to 1023
0cf94     04 4E 05 F1 | 	add	fp, #4
0cf98     A7 00 68 FC | 	wrlong	#0, fp
0cf9c     04 4E 85 F1 | 	sub	fp, #4
0cfa0                 | LR__0992
0cfa0     24 4E 05 F1 | 	add	fp, #36
0cfa4     A7 00 68 FC | 	wrlong	#0, fp
0cfa8                 | '     spl=0
0cfa8                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0cfa8     1C 4E 85 F1 | 	sub	fp, #28
0cfac     A7 00 68 FC | 	wrlong	#0, fp
0cfb0                 | LR__0993
0cfb0     A7 26 02 FB | 	rdlong	local05, fp
0cfb4     02 26 66 F0 | 	shl	local05, #2
0cfb8     34 4E 05 F1 | 	add	fp, #52
0cfbc     A7 26 02 F1 | 	add	local05, fp
0cfc0     13 23 02 FB | 	rdlong	local03, local05
0cfc4     87 E4 1D FF 
0cfc8     DB 27 06 F6 | 	mov	local05, ##1003032539
0cfcc     38 4E 85 F1 | 	sub	fp, #56
0cfd0     A7 12 02 FB | 	rdlong	arg01, fp
0cfd4     04 4E 85 F1 | 	sub	fp, #4
0cfd8     09 13 52 F6 | 	abs	arg01, arg01 wc
0cfdc     1F 24 C6 C9 |  if_b	decod	local04, #31
0cfe0     00 24 06 36 |  if_ae	mov	local04, #0
0cfe4     50 04 B1 FD | 	call	#__system___float_fromuns
0cfe8     12 FB 61 F5 | 	xor	result1, local04
0cfec     FD 14 02 F6 | 	mov	arg02, result1
0cff0     13 13 02 F6 | 	mov	arg01, local05
0cff4     44 08 B1 FD | 	call	#__system___float_mul
0cff8     FD 26 02 F6 | 	mov	local05, result1
0cffc     08 4E 05 F1 | 	add	fp, #8
0d000     A7 12 02 FB | 	rdlong	arg01, fp
0d004     08 4E 85 F1 | 	sub	fp, #8
0d008     01 12 06 F1 | 	add	arg01, #1
0d00c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d010     1F 24 C6 C9 |  if_b	decod	local04, #31
0d014     00 24 06 36 |  if_ae	mov	local04, #0
0d018     1C 04 B1 FD | 	call	#__system___float_fromuns
0d01c     12 FB 61 F5 | 	xor	result1, local04
0d020     FD 14 02 F6 | 	mov	arg02, result1
0d024     13 13 02 F6 | 	mov	arg01, local05
0d028     10 08 B1 FD | 	call	#__system___float_mul
0d02c     FD 12 02 F6 | 	mov	arg01, result1
0d030     44 11 B1 FD | 	call	#__system____builtin_sinf
0d034     FD 14 02 F6 | 	mov	arg02, result1
0d038     11 13 02 F6 | 	mov	arg01, local03
0d03c     FC 07 B1 FD | 	call	#__system___float_mul
0d040     FD 14 02 F6 | 	mov	arg02, result1
0d044     24 4E 05 F1 | 	add	fp, #36
0d048     A7 12 02 FB | 	rdlong	arg01, fp
0d04c     24 4E 85 F1 | 	sub	fp, #36
0d050     18 04 B1 FD | 	call	#__system___float_add
0d054     24 4E 05 F1 | 	add	fp, #36
0d058     A7 FA 61 FC | 	wrlong	result1, fp
0d05c     1C 4E 85 F1 | 	sub	fp, #28
0d060     A7 16 02 FB | 	rdlong	arg03, fp
0d064     01 16 06 F1 | 	add	arg03, #1
0d068     A7 16 62 FC | 	wrlong	arg03, fp
0d06c     10 16 56 F2 | 	cmps	arg03, #16 wc
0d070     3C FF 9F CD |  if_b	jmp	#LR__0993
0d074                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0d074     1C 4E 05 F1 | 	add	fp, #28
0d078     A7 12 02 FB | 	rdlong	arg01, fp
0d07c     1F 12 06 F4 | 	bitl	arg01, #31
0d080     04 4E 85 F1 | 	sub	fp, #4
0d084     A7 14 02 FB | 	rdlong	arg02, fp
0d088     20 4E 85 F1 | 	sub	fp, #32
0d08c     01 16 66 F6 | 	neg	arg03, #1
0d090     DC 0B B1 FD | 	call	#__system___float_cmp
0d094     01 FA 55 F2 | 	cmps	result1, #1 wc
0d098     18 00 90 CD |  if_b	jmp	#LR__0994
0d09c     24 4E 05 F1 | 	add	fp, #36
0d0a0     A7 FA 01 FB | 	rdlong	result1, fp
0d0a4     1F FA 05 F4 | 	bitl	result1, #31
0d0a8     04 4E 85 F1 | 	sub	fp, #4
0d0ac     A7 FA 61 FC | 	wrlong	result1, fp
0d0b0     20 4E 85 F1 | 	sub	fp, #32
0d0b4                 | LR__0994
0d0b4     04 4E 05 F1 | 	add	fp, #4
0d0b8     A7 22 02 FB | 	rdlong	local03, fp
0d0bc     01 22 06 F1 | 	add	local03, #1
0d0c0     A7 22 62 FC | 	wrlong	local03, fp
0d0c4     04 4E 85 F1 | 	sub	fp, #4
0d0c8     02 00 00 FF 
0d0cc     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d0d0     CC FE 9F CD |  if_b	jmp	#LR__0992
0d0d4                 | '   for i=0 to 1023
0d0d4     04 4E 05 F1 | 	add	fp, #4
0d0d8     A7 00 68 FC | 	wrlong	#0, fp
0d0dc     04 4E 85 F1 | 	sub	fp, #4
0d0e0                 | LR__0995
0d0e0     24 4E 05 F1 | 	add	fp, #36
0d0e4     A7 00 68 FC | 	wrlong	#0, fp
0d0e8                 | '     spl=0
0d0e8                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0d0e8     1C 4E 85 F1 | 	sub	fp, #28
0d0ec     A7 00 68 FC | 	wrlong	#0, fp
0d0f0                 | LR__0996
0d0f0     A7 26 02 FB | 	rdlong	local05, fp
0d0f4     02 26 66 F0 | 	shl	local05, #2
0d0f8     34 4E 05 F1 | 	add	fp, #52
0d0fc     A7 26 02 F1 | 	add	local05, fp
0d100     13 27 02 FB | 	rdlong	local05, local05
0d104     1C 4E 85 F1 | 	sub	fp, #28
0d108     A7 14 02 FB | 	rdlong	arg02, fp
0d10c     20 4E 85 F1 | 	sub	fp, #32
0d110     58 7F 23 FF 
0d114     00 12 06 F6 | 	mov	arg01, ##1191096320
0d118     24 09 B1 FD | 	call	#__system___float_div
0d11c     FD 14 02 F6 | 	mov	arg02, result1
0d120     13 13 02 F6 | 	mov	arg01, local05
0d124     14 07 B1 FD | 	call	#__system___float_mul
0d128     FD 22 02 F6 | 	mov	local03, result1
0d12c     87 E4 1D FF 
0d130     DB 27 06 F6 | 	mov	local05, ##1003032539
0d134     04 4E 05 F1 | 	add	fp, #4
0d138     A7 12 02 FB | 	rdlong	arg01, fp
0d13c     04 4E 85 F1 | 	sub	fp, #4
0d140     09 13 52 F6 | 	abs	arg01, arg01 wc
0d144     1F 24 C6 C9 |  if_b	decod	local04, #31
0d148     00 24 06 36 |  if_ae	mov	local04, #0
0d14c     E8 02 B1 FD | 	call	#__system___float_fromuns
0d150     12 FB 61 F5 | 	xor	result1, local04
0d154     FD 14 02 F6 | 	mov	arg02, result1
0d158     13 13 02 F6 | 	mov	arg01, local05
0d15c     DC 06 B1 FD | 	call	#__system___float_mul
0d160     FD 26 02 F6 | 	mov	local05, result1
0d164     08 4E 05 F1 | 	add	fp, #8
0d168     A7 12 02 FB | 	rdlong	arg01, fp
0d16c     08 4E 85 F1 | 	sub	fp, #8
0d170     01 12 06 F1 | 	add	arg01, #1
0d174     09 13 52 F6 | 	abs	arg01, arg01 wc
0d178     1F 24 C6 C9 |  if_b	decod	local04, #31
0d17c     00 24 06 36 |  if_ae	mov	local04, #0
0d180     B4 02 B1 FD | 	call	#__system___float_fromuns
0d184     12 FB 61 F5 | 	xor	result1, local04
0d188     FD 14 02 F6 | 	mov	arg02, result1
0d18c     13 13 02 F6 | 	mov	arg01, local05
0d190     A8 06 B1 FD | 	call	#__system___float_mul
0d194     FD 12 02 F6 | 	mov	arg01, result1
0d198     DC 0F B1 FD | 	call	#__system____builtin_sinf
0d19c     FD 14 02 F6 | 	mov	arg02, result1
0d1a0     11 13 02 F6 | 	mov	arg01, local03
0d1a4     94 06 B1 FD | 	call	#__system___float_mul
0d1a8     FD 14 02 F6 | 	mov	arg02, result1
0d1ac     24 4E 05 F1 | 	add	fp, #36
0d1b0     A7 12 02 FB | 	rdlong	arg01, fp
0d1b4     24 4E 85 F1 | 	sub	fp, #36
0d1b8     B0 02 B1 FD | 	call	#__system___float_add
0d1bc     24 4E 05 F1 | 	add	fp, #36
0d1c0     A7 FA 61 FC | 	wrlong	result1, fp
0d1c4     1C 4E 85 F1 | 	sub	fp, #28
0d1c8     A7 26 02 FB | 	rdlong	local05, fp
0d1cc     01 26 06 F1 | 	add	local05, #1
0d1d0     A7 26 62 FC | 	wrlong	local05, fp
0d1d4     10 26 56 F2 | 	cmps	local05, #16 wc
0d1d8     14 FF 9F CD |  if_b	jmp	#LR__0996
0d1dc     08 4E 05 F1 | 	add	fp, #8
0d1e0     A7 26 02 FB | 	rdlong	local05, fp
0d1e4     0B 26 66 F0 | 	shl	local05, #11
0d1e8     0C 00 00 FF 
0d1ec     CC E4 05 F1 | 	add	objptr, ##6348
0d1f0     F2 26 02 F1 | 	add	local05, objptr
0d1f4     0C 4E 85 F1 | 	sub	fp, #12
0d1f8     A7 20 02 FB | 	rdlong	local02, fp
0d1fc     01 20 66 F0 | 	shl	local02, #1
0d200     13 21 02 F1 | 	add	local02, local05
0d204     20 4E 05 F1 | 	add	fp, #32
0d208     A7 12 02 FB | 	rdlong	arg01, fp
0d20c     24 4E 85 F1 | 	sub	fp, #36
0d210     0C 00 00 FF 
0d214     CC E4 85 F1 | 	sub	objptr, ##6348
0d218     01 14 06 F6 | 	mov	arg02, #1
0d21c     E4 0A B1 FD | 	call	#__system___float_tointeger
0d220     10 FB 51 FC | 	wrword	result1, local02
0d224     04 4E 05 F1 | 	add	fp, #4
0d228     A7 22 02 FB | 	rdlong	local03, fp
0d22c     01 22 06 F1 | 	add	local03, #1
0d230     A7 22 62 FC | 	wrlong	local03, fp
0d234     04 4E 85 F1 | 	sub	fp, #4
0d238     02 00 00 FF 
0d23c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d240     9C FE 9F CD |  if_b	jmp	#LR__0995
0d244                 | LR__0997
0d244                 | LR__0998
0d244     A7 F0 03 F6 | 	mov	ptra, fp
0d248     B2 00 A0 FD | 	call	#popregs_
0d24c                 | _do_defsnd_ret
0d24c     2D 00 64 FD | 	ret
0d250                 | 
0d250                 | ' 
0d250                 | ' ' ---------------  List the program. 
0d250                 | ' 
0d250                 | ' sub do_list
0d250                 | _do_list
0d250     02 4A 05 F6 | 	mov	COUNT_, #2
0d254     A8 00 A0 FD | 	call	#pushregs_
0d258     B8 F0 07 F1 | 	add	ptra, #184
0d25c     04 4E 05 F1 | 	add	fp, #4
0d260     A7 00 68 FC | 	wrlong	#0, fp
0d264     04 4E 05 F1 | 	add	fp, #4
0d268     FF FF BF FF 
0d26c     A7 FE 6B FC | 	wrlong	##2147483647, fp
0d270     08 4E 85 F1 | 	sub	fp, #8
0d274     6A 00 00 FF 
0d278     04 E4 05 F1 | 	add	objptr, ##54276
0d27c     F2 1E 02 FB | 	rdlong	local01, objptr
0d280     0F 17 02 F6 | 	mov	arg03, local01
0d284     01 16 66 F0 | 	shl	arg03, #1
0d288     0F 17 02 F1 | 	add	arg03, local01
0d28c     02 16 66 F0 | 	shl	arg03, #2
0d290     03 00 00 FF 
0d294     04 E4 85 F1 | 	sub	objptr, ##1540
0d298     F2 16 02 F1 | 	add	arg03, objptr
0d29c     0B 17 02 FB | 	rdlong	arg03, arg03
0d2a0     A7 16 62 FC | 	wrlong	arg03, fp
0d2a4                 | ' 
0d2a4                 | ' startline=0 : endline=$7FFFFFFF
0d2a4                 | ' numpar=compiledline(lineptr_e).result.uresult
0d2a4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0d2a4     01 16 0E F2 | 	cmp	arg03, #1 wz
0d2a8     67 00 00 FF 
0d2ac     00 E4 85 F1 | 	sub	objptr, ##52736
0d2b0     3C 00 90 5D |  if_ne	jmp	#LR__1000
0d2b4     40 C8 BF FD | 	call	#_pop
0d2b8     FF 1E 02 F6 | 	mov	local01, result3
0d2bc     0C 4E 05 F1 | 	add	fp, #12
0d2c0     A7 FA 61 FC | 	wrlong	result1, fp
0d2c4     04 4E 05 F1 | 	add	fp, #4
0d2c8     A7 FC 61 FC | 	wrlong	result2, fp
0d2cc     04 4E 05 F1 | 	add	fp, #4
0d2d0     A7 1E 62 FC | 	wrlong	local01, fp
0d2d4     08 4E 85 F1 | 	sub	fp, #8
0d2d8     A7 12 02 F6 | 	mov	arg01, fp
0d2dc     0C 4E 85 F1 | 	sub	fp, #12
0d2e0     D8 4B B0 FD | 	call	#_converttoint
0d2e4     04 4E 05 F1 | 	add	fp, #4
0d2e8     A7 FA 61 FC | 	wrlong	result1, fp
0d2ec     04 4E 85 F1 | 	sub	fp, #4
0d2f0                 | LR__1000
0d2f0                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0d2f0     A7 16 02 FB | 	rdlong	arg03, fp
0d2f4     02 16 0E F2 | 	cmp	arg03, #2 wz
0d2f8     7C 00 90 5D |  if_ne	jmp	#LR__1001
0d2fc     F8 C7 BF FD | 	call	#_pop
0d300     FF 1E 02 F6 | 	mov	local01, result3
0d304     0C 4E 05 F1 | 	add	fp, #12
0d308     A7 FA 61 FC | 	wrlong	result1, fp
0d30c     04 4E 05 F1 | 	add	fp, #4
0d310     A7 FC 61 FC | 	wrlong	result2, fp
0d314     04 4E 05 F1 | 	add	fp, #4
0d318     A7 1E 62 FC | 	wrlong	local01, fp
0d31c     08 4E 85 F1 | 	sub	fp, #8
0d320     A7 12 02 F6 | 	mov	arg01, fp
0d324     0C 4E 85 F1 | 	sub	fp, #12
0d328     90 4B B0 FD | 	call	#_converttoint
0d32c     FD 1E 02 F6 | 	mov	local01, result1
0d330     08 4E 05 F1 | 	add	fp, #8
0d334     A7 1E 62 FC | 	wrlong	local01, fp
0d338     08 4E 85 F1 | 	sub	fp, #8
0d33c     B8 C7 BF FD | 	call	#_pop
0d340     FF 1E 02 F6 | 	mov	local01, result3
0d344     0C 4E 05 F1 | 	add	fp, #12
0d348     A7 FA 61 FC | 	wrlong	result1, fp
0d34c     04 4E 05 F1 | 	add	fp, #4
0d350     A7 FC 61 FC | 	wrlong	result2, fp
0d354     04 4E 05 F1 | 	add	fp, #4
0d358     A7 1E 62 FC | 	wrlong	local01, fp
0d35c     08 4E 85 F1 | 	sub	fp, #8
0d360     A7 12 02 F6 | 	mov	arg01, fp
0d364     0C 4E 85 F1 | 	sub	fp, #12
0d368     50 4B B0 FD | 	call	#_converttoint
0d36c     04 4E 05 F1 | 	add	fp, #4
0d370     A7 FA 61 FC | 	wrlong	result1, fp
0d374     04 4E 85 F1 | 	sub	fp, #4
0d378                 | LR__1001
0d378                 | ' 
0d378                 | ' 
0d378                 | ' print
0d378     00 12 06 F6 | 	mov	arg01, #0
0d37c     CC 32 B1 FD | 	call	#__system___getiolock_0442
0d380     FD 12 02 F6 | 	mov	arg01, result1
0d384     90 D9 B0 FD | 	call	#__system___lockmem
0d388     00 12 06 F6 | 	mov	arg01, #0
0d38c     0A 14 06 F6 | 	mov	arg02, #10
0d390     00 16 06 F6 | 	mov	arg03, #0
0d394     30 E6 B0 FD | 	call	#__system___basic_print_char
0d398     00 12 06 F6 | 	mov	arg01, #0
0d39c     AC 32 B1 FD | 	call	#__system___getiolock_0442
0d3a0     FD 00 68 FC | 	wrlong	#0, result1
0d3a4     6A 00 00 FF 
0d3a8     08 E4 05 F1 | 	add	objptr, ##54280
0d3ac     F2 20 02 FB | 	rdlong	local02, objptr
0d3b0     11 00 00 FF 
0d3b4     84 E4 05 F1 | 	add	objptr, ##8836
0d3b8     F2 20 62 FC | 	wrlong	local02, objptr
0d3bc     7B 00 00 FF 
0d3c0     8C E4 85 F1 | 	sub	objptr, ##63116
0d3c4                 | ' do 
0d3c4                 | LR__1002
0d3c4     20 4E 05 F1 | 	add	fp, #32
0d3c8     A7 12 02 F6 | 	mov	arg01, fp
0d3cc     20 4E 85 F1 | 	sub	fp, #32
0d3d0     7B 00 00 FF 
0d3d4     8C E4 05 F1 | 	add	objptr, ##63116
0d3d8     F2 14 02 FB | 	rdlong	arg02, objptr
0d3dc     18 16 06 F6 | 	mov	arg03, #24
0d3e0     6F 00 00 FF 
0d3e4     CC E5 85 F1 | 	sub	objptr, ##57292
0d3e8     C4 CD B0 FD | 	call	#_psram_spin2_read1
0d3ec     0B 00 00 FF 
0d3f0     C0 E4 85 F1 | 	sub	objptr, ##5824
0d3f4                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0d3f4                 | '   
0d3f4                 | '   if header(0)<> $FFFFFFFF then
0d3f4     20 4E 05 F1 | 	add	fp, #32
0d3f8     A7 20 02 FB | 	rdlong	local02, fp
0d3fc     20 4E 85 F1 | 	sub	fp, #32
0d400     FF FF 7F FF 
0d404     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0d408     A8 00 90 AD |  if_e	jmp	#LR__1004
0d40c     38 4E 05 F1 | 	add	fp, #56
0d410     3F 16 06 F6 | 	mov	arg03, #63
0d414     28 16 62 FD | 	setq	arg03
0d418     A7 00 68 FC | 	wrlong	#0, fp
0d41c     A7 12 02 F6 | 	mov	arg01, fp
0d420     10 4E 85 F1 | 	sub	fp, #16
0d424     A7 14 02 FB | 	rdlong	arg02, fp
0d428     04 4E 05 F1 | 	add	fp, #4
0d42c     A7 16 02 FB | 	rdlong	arg03, fp
0d430     2C 4E 85 F1 | 	sub	fp, #44
0d434     0B 00 00 FF 
0d438     C0 E4 05 F1 | 	add	objptr, ##5824
0d43c     70 CD B0 FD | 	call	#_psram_spin2_read1
0d440     0B 00 00 FF 
0d444     C0 E4 85 F1 | 	sub	objptr, ##5824
0d448                 | '     longfill(linebuf,0,64)
0d448                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0d448                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0d448     20 4E 05 F1 | 	add	fp, #32
0d44c     A7 20 02 FB | 	rdlong	local02, fp
0d450     1C 4E 85 F1 | 	sub	fp, #28
0d454     A7 1E 02 FB | 	rdlong	local01, fp
0d458     04 4E 85 F1 | 	sub	fp, #4
0d45c     0F 21 52 F2 | 	cmps	local02, local01 wc
0d460     30 00 90 CD |  if_b	jmp	#LR__1003
0d464     20 4E 05 F1 | 	add	fp, #32
0d468     A7 20 02 FB | 	rdlong	local02, fp
0d46c     18 4E 85 F1 | 	sub	fp, #24
0d470     A7 16 02 FB | 	rdlong	arg03, fp
0d474     08 4E 85 F1 | 	sub	fp, #8
0d478     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0d47c     14 00 90 1D |  if_a	jmp	#LR__1003
0d480     38 4E 05 F1 | 	add	fp, #56
0d484     A7 12 02 F6 | 	mov	arg01, fp
0d488     38 4E 85 F1 | 	sub	fp, #56
0d48c                 | ' 
0d48c                 | ' write(text)
0d48c     E8 C7 B0 FD | 	call	#_hg010b_spin2_write
0d490                 | ' crlf
0d490     44 C9 B0 FD | 	call	#_hg010b_spin2_crlf
0d494                 | LR__1003
0d494     34 4E 05 F1 | 	add	fp, #52
0d498     A7 20 02 FB | 	rdlong	local02, fp
0d49c     34 4E 85 F1 | 	sub	fp, #52
0d4a0     7B 00 00 FF 
0d4a4     8C E4 05 F1 | 	add	objptr, ##63116
0d4a8     F2 20 62 FC | 	wrlong	local02, objptr
0d4ac     7B 00 00 FF 
0d4b0     8C E4 85 F1 | 	sub	objptr, ##63116
0d4b4                 | LR__1004
0d4b4     34 4E 05 F1 | 	add	fp, #52
0d4b8     A7 20 02 FB | 	rdlong	local02, fp
0d4bc     34 4E 85 F1 | 	sub	fp, #52
0d4c0     FF FF 3F FF 
0d4c4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0d4c8     20 4E 05 51 |  if_ne	add	fp, #32
0d4cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d4d0     20 4E 85 51 |  if_ne	sub	fp, #32
0d4d4     FF FF 7F 5F 
0d4d8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0d4dc     E4 FE 9F 5D |  if_ne	jmp	#LR__1002
0d4e0     A7 F0 03 F6 | 	mov	ptra, fp
0d4e4     B2 00 A0 FD | 	call	#popregs_
0d4e8                 | _do_list_ret
0d4e8     2D 00 64 FD | 	ret
0d4ec                 | 
0d4ec                 | ' 
0d4ec                 | ' '---------------- Clear the program
0d4ec                 | ' 
0d4ec                 | ' sub do_new
0d4ec                 | _do_new
0d4ec     03 4A 05 F6 | 	mov	COUNT_, #3
0d4f0     A8 00 A0 FD | 	call	#pushregs_
0d4f4     00 12 06 F6 | 	mov	arg01, #0
0d4f8     01 14 66 F6 | 	neg	arg02, #1
0d4fc     01 16 06 F6 | 	mov	arg03, #1
0d500     00 18 06 F6 | 	mov	arg04, #0
0d504     0B 00 00 FF 
0d508     C0 E4 05 F1 | 	add	objptr, ##5824
0d50c                 | '     return fill(addr, pattern, count, listPtr, 4)
0d50c     04 1A 06 F6 | 	mov	arg05, #4
0d510     D4 CD B0 FD | 	call	#_psram_spin2_fill
0d514     49 00 00 FF 
0d518     CC E4 05 F1 | 	add	objptr, ##37580
0d51c     F2 00 68 FC | 	wrlong	#0, objptr
0d520     15 00 00 FF 
0d524     7C E4 05 F1 | 	add	objptr, ##10876
0d528     F2 00 68 FC | 	wrlong	#0, objptr
0d52c     0F 00 00 FF 
0d530     2C E5 05 F1 | 	add	objptr, ##7980
0d534     F2 00 68 FC | 	wrlong	#0, objptr
0d538     04 E4 05 F1 | 	add	objptr, #4
0d53c     F2 00 68 FC | 	wrlong	#0, objptr
0d540     16 00 00 FF 
0d544     5C E5 85 F1 | 	sub	objptr, ##11612
0d548     F2 00 68 FC | 	wrlong	#0, objptr
0d54c     07 00 00 FF 
0d550     24 E4 05 F1 | 	add	objptr, ##3620
0d554     F2 00 68 FC | 	wrlong	#0, objptr
0d558     07 00 00 FF 
0d55c     20 E4 85 F1 | 	sub	objptr, ##3616
0d560     F2 00 68 FC | 	wrlong	#0, objptr
0d564     0F 00 00 FF 
0d568     34 E4 05 F1 | 	add	objptr, ##7732
0d56c     F2 00 68 FC | 	wrlong	#0, objptr
0d570     08 00 00 FF 
0d574     08 E4 85 F1 | 	sub	objptr, ##4104
0d578     F2 00 68 FC | 	wrlong	#0, objptr
0d57c     04 E4 05 F1 | 	add	objptr, #4
0d580     FF FF FF FF 
0d584     F2 FE 6B FC | 	wrlong	##-1, objptr
0d588     0F 00 00 FF 
0d58c     4C E5 05 F1 | 	add	objptr, ##8012
0d590     F2 00 68 FC | 	wrlong	#0, objptr
0d594                 | ' 
0d594                 | ' pslpoke(0,$FFFFFFFF)
0d594                 | ' varnum=0
0d594                 | ' programstart=0 :runptr=0 : runptr2=0
0d594                 | ' stackpointer=0
0d594                 | ' lineptr=0 
0d594                 | ' programptr=0 : stringptr=0
0d594                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0d594                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0d594     00 1E 06 F6 | 	mov	local01, #0
0d598     07 00 00 FF 
0d59c     40 E5 85 F1 | 	sub	objptr, ##3904
0d5a0     97 16 48 FB | 	callpa	#(@LR__1011-@LR__1010)>>2,fcache_load_ptr_
0d5a4                 | LR__1010
0d5a4     0F 21 02 F6 | 	mov	local02, local01
0d5a8     02 20 66 F0 | 	shl	local02, #2
0d5ac     0F 21 02 F1 | 	add	local02, local01
0d5b0     02 20 66 F0 | 	shl	local02, #2
0d5b4     F2 20 02 F1 | 	add	local02, objptr
0d5b8     08 20 06 F1 | 	add	local02, #8
0d5bc     FF FF FF FF 
0d5c0     10 FF 6B FC | 	wrlong	##-1, local02
0d5c4     01 1E 06 F1 | 	add	local01, #1
0d5c8     81 1E 56 F2 | 	cmps	local01, #129 wc
0d5cc     D4 FF 9F CD |  if_b	jmp	#LR__1010
0d5d0                 | LR__1011
0d5d0     72 00 00 FF 
0d5d4     1C E4 85 F1 | 	sub	objptr, ##58396
0d5d8                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0d5d8     00 1E 06 F6 | 	mov	local01, #0
0d5dc                 | LR__1012
0d5dc     0F 21 02 F6 | 	mov	local02, local01
0d5e0     02 20 66 F0 | 	shl	local02, #2
0d5e4     7A 00 00 FF 
0d5e8     B8 E5 05 F1 | 	add	objptr, ##62904
0d5ec     F2 20 02 F1 | 	add	local02, objptr
0d5f0     10 21 0A FB | 	rdlong	local02, local02 wz
0d5f4     7A 00 00 FF 
0d5f8     B8 E5 85 F1 | 	sub	objptr, ##62904
0d5fc     34 00 90 AD |  if_e	jmp	#LR__1013
0d600     0F 13 02 F6 | 	mov	arg01, local01
0d604     00 14 06 F6 | 	mov	arg02, #0
0d608     00 16 06 F6 | 	mov	arg03, #0
0d60c     F4 B6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0d610     0F 21 02 F6 | 	mov	local02, local01
0d614     02 20 66 F0 | 	shl	local02, #2
0d618     7A 00 00 FF 
0d61c     B8 E5 05 F1 | 	add	objptr, ##62904
0d620     F2 20 02 F1 | 	add	local02, objptr
0d624     10 13 02 FB | 	rdlong	arg01, local02
0d628     7A 00 00 FF 
0d62c     B8 E5 85 F1 | 	sub	objptr, ##62904
0d630     10 16 B1 FD | 	call	#__system___gc_free
0d634                 | LR__1013
0d634     7B 00 00 FF 
0d638     0C E4 05 F1 | 	add	objptr, ##62988
0d63c     00 C0 9F FF 
0d640     F2 00 68 FC | 	wrlong	##1065353216, objptr
0d644     04 E4 05 F1 | 	add	objptr, #4
0d648     00 C0 9F FF 
0d64c     F2 00 68 FC | 	wrlong	##1065353216, objptr
0d650     7B 00 00 FF 
0d654     10 E4 85 F1 | 	sub	objptr, ##62992
0d658     F2 22 02 FB | 	rdlong	local03, objptr
0d65c     7A 00 00 FF 
0d660     FC E5 05 F1 | 	add	objptr, ##62972
0d664     F2 22 62 FC | 	wrlong	local03, objptr
0d668     7A 00 00 FF 
0d66c     FC E5 85 F1 | 	sub	objptr, ##62972
0d670     11 12 06 F6 | 	mov	arg01, #17
0d674     08 14 06 F6 | 	mov	arg02, #8
0d678     10 16 06 F6 | 	mov	arg03, #16
0d67c     84 B6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0d680     10 12 06 F6 | 	mov	arg01, #16
0d684     20 14 06 F6 | 	mov	arg02, #32
0d688     20 16 06 F6 | 	mov	arg03, #32
0d68c     74 B6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0d690     DC 95 B0 FD | 	call	#_init_audio
0d694     01 1E 06 F1 | 	add	local01, #1
0d698     10 1E 56 F2 | 	cmps	local01, #16 wc
0d69c     3C FF 9F CD |  if_b	jmp	#LR__1012
0d6a0     A7 F0 03 F6 | 	mov	ptra, fp
0d6a4     B2 00 A0 FD | 	call	#popregs_
0d6a8                 | _do_new_ret
0d6a8     2D 00 64 FD | 	ret
0d6ac                 | 
0d6ac                 | ' 
0d6ac                 | ' '----------------------- goto
0d6ac                 | ' sub do_fast_goto
0d6ac                 | _do_fast_goto
0d6ac     02 4A 05 F6 | 	mov	COUNT_, #2
0d6b0     A8 00 A0 FD | 	call	#pushregs_
0d6b4                 | _do_fast_goto_enter
0d6b4     6A 00 00 FF 
0d6b8     04 E4 05 F1 | 	add	objptr, ##54276
0d6bc     F2 12 02 FB | 	rdlong	arg01, objptr
0d6c0     09 1F 02 F6 | 	mov	local01, arg01
0d6c4     01 1E 66 F0 | 	shl	local01, #1
0d6c8     09 1F 02 F1 | 	add	local01, arg01
0d6cc     02 1E 66 F0 | 	shl	local01, #2
0d6d0     03 00 00 FF 
0d6d4     04 E4 85 F1 | 	sub	objptr, ##1540
0d6d8     F2 1E 02 F1 | 	add	local01, objptr
0d6dc     0F 21 02 FB | 	rdlong	local02, local01
0d6e0     10 13 02 F6 | 	mov	arg01, local02
0d6e4     67 00 00 FF 
0d6e8     00 E4 85 F1 | 	sub	objptr, ##52736
0d6ec     D4 A1 B0 FD | 	call	#_pslpeek
0d6f0     FD 12 02 F6 | 	mov	arg01, result1
0d6f4                 | ' 
0d6f4                 | ' testptr=compiledline(lineptr_e).result.uresult
0d6f4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0d6f4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0d6f4     6A 00 00 FF 
0d6f8     04 E4 05 F1 | 	add	objptr, ##54276
0d6fc     F2 FA 01 FB | 	rdlong	result1, objptr
0d700     FD 1E 02 F6 | 	mov	local01, result1
0d704     01 1E 66 F0 | 	shl	local01, #1
0d708     FD 1E 02 F1 | 	add	local01, result1
0d70c     02 1E 66 F0 | 	shl	local01, #2
0d710     03 00 00 FF 
0d714     04 E4 85 F1 | 	sub	objptr, ##1540
0d718     F2 1E 02 F1 | 	add	local01, objptr
0d71c     04 1E 06 F1 | 	add	local01, #4
0d720     0F 1F 02 FB | 	rdlong	local01, local01
0d724     0F 13 0A F2 | 	cmp	arg01, local01 wz
0d728     67 00 00 FF 
0d72c     00 E4 85 F1 | 	sub	objptr, ##52736
0d730     58 00 90 5D |  if_ne	jmp	#LR__1020
0d734     79 00 00 FF 
0d738     34 E5 05 F1 | 	add	objptr, ##62260
0d73c     F2 20 62 FC | 	wrlong	local02, objptr
0d740     0F 00 00 FF 
0d744     34 E5 85 F1 | 	sub	objptr, ##7988
0d748     F2 20 02 FB | 	rdlong	local02, objptr
0d74c     01 20 86 F1 | 	sub	local02, #1
0d750     04 E4 05 F1 | 	add	objptr, #4
0d754     F2 20 62 FC | 	wrlong	local02, objptr
0d758                 | '   runptr=testptr
0d758                 | '   lineptr_e=lineptr-1
0d758                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0d758     0F 00 00 FF 
0d75c     54 E5 05 F1 | 	add	objptr, ##8020
0d760     F2 20 02 FB | 	rdlong	local02, objptr
0d764     79 00 00 FF 
0d768     58 E5 85 F1 | 	sub	objptr, ##62296
0d76c     FF FF 3F FF 
0d770     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0d774     79 00 00 AF 
0d778     58 E5 05 A1 |  if_e	add	objptr, ##62296
0d77c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0d780     79 00 00 AF 
0d784     58 E5 85 A1 |  if_e	sub	objptr, ##62296
0d788     04 00 90 FD | 	jmp	#LR__1021
0d78c                 | LR__1020
0d78c     0C 00 B0 FD | 	call	#_do_find_goto
0d790                 | LR__1021
0d790     A7 F0 03 F6 | 	mov	ptra, fp
0d794     B2 00 A0 FD | 	call	#popregs_
0d798                 | _do_fast_goto_ret
0d798     2D 00 64 FD | 	ret
0d79c                 | 
0d79c                 | ' 
0d79c                 | ' 
0d79c                 | ' 
0d79c                 | ' 
0d79c                 | ' sub do_find_goto
0d79c                 | _do_find_goto
0d79c     03 4A 05 F6 | 	mov	COUNT_, #3
0d7a0     A8 00 A0 FD | 	call	#pushregs_
0d7a4     24 F0 07 F1 | 	add	ptra, #36
0d7a8                 | _do_find_goto_enter
0d7a8     6A 00 00 FF 
0d7ac     04 E4 05 F1 | 	add	objptr, ##54276
0d7b0     F2 1E 02 FB | 	rdlong	local01, objptr
0d7b4     0F 21 02 F6 | 	mov	local02, local01
0d7b8     01 20 66 F0 | 	shl	local02, #1
0d7bc     0F 21 02 F1 | 	add	local02, local01
0d7c0     02 20 66 F0 | 	shl	local02, #2
0d7c4     03 00 00 FF 
0d7c8     04 E4 85 F1 | 	sub	objptr, ##1540
0d7cc     F2 20 02 F1 | 	add	local02, objptr
0d7d0     04 20 06 F1 | 	add	local02, #4
0d7d4     10 21 02 FB | 	rdlong	local02, local02
0d7d8     A7 20 62 FC | 	wrlong	local02, fp
0d7dc     03 00 00 FF 
0d7e0     08 E4 05 F1 | 	add	objptr, ##1544
0d7e4     F2 22 02 FB | 	rdlong	local03, objptr
0d7e8     6A 00 00 FF 
0d7ec     08 E4 85 F1 | 	sub	objptr, ##54280
0d7f0     04 4E 05 F1 | 	add	fp, #4
0d7f4     A7 22 62 FC | 	wrlong	local03, fp
0d7f8     04 4E 85 F1 | 	sub	fp, #4
0d7fc                 | ' 
0d7fc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0d7fc                 | '  ' print "find goto"                                                                     'print gotoline 
0d7fc                 | ' gotoptr=programstart
0d7fc                 | ' do
0d7fc                 | LR__1030
0d7fc     0C 4E 05 F1 | 	add	fp, #12
0d800     A7 12 02 F6 | 	mov	arg01, fp
0d804     08 4E 85 F1 | 	sub	fp, #8
0d808     A7 14 02 FB | 	rdlong	arg02, fp
0d80c     04 4E 85 F1 | 	sub	fp, #4
0d810     18 16 06 F6 | 	mov	arg03, #24
0d814     0B 00 00 FF 
0d818     C0 E4 05 F1 | 	add	objptr, ##5824
0d81c     90 C9 B0 FD | 	call	#_psram_spin2_read1
0d820     0B 00 00 FF 
0d824     C0 E4 85 F1 | 	sub	objptr, ##5824
0d828                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0d828                 | '   if gotoheader(0)<>$FFFFFFFF then
0d828     0C 4E 05 F1 | 	add	fp, #12
0d82c     A7 22 02 FB | 	rdlong	local03, fp
0d830     0C 4E 85 F1 | 	sub	fp, #12
0d834     FF FF 7F FF 
0d838     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0d83c     24 00 90 AD |  if_e	jmp	#LR__1031
0d840     04 4E 05 F1 | 	add	fp, #4
0d844     A7 22 02 FB | 	rdlong	local03, fp
0d848     04 4E 05 F1 | 	add	fp, #4
0d84c     A7 22 62 FC | 	wrlong	local03, fp
0d850     18 4E 05 F1 | 	add	fp, #24
0d854     A7 22 02 FB | 	rdlong	local03, fp
0d858     1C 4E 85 F1 | 	sub	fp, #28
0d85c     A7 22 62 FC | 	wrlong	local03, fp
0d860     04 4E 85 F1 | 	sub	fp, #4
0d864                 | LR__1031
0d864     20 4E 05 F1 | 	add	fp, #32
0d868     A7 22 02 FB | 	rdlong	local03, fp
0d86c     20 4E 85 F1 | 	sub	fp, #32
0d870     FF FF 3F FF 
0d874     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0d878     0C 4E 05 51 |  if_ne	add	fp, #12
0d87c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d880     0C 4E 85 51 |  if_ne	sub	fp, #12
0d884     FF FF 7F 5F 
0d888     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0d88c     18 00 90 AD |  if_e	jmp	#LR__1032
0d890     0C 4E 05 F1 | 	add	fp, #12
0d894     A7 22 02 FB | 	rdlong	local03, fp
0d898     0C 4E 85 F1 | 	sub	fp, #12
0d89c     A7 20 02 FB | 	rdlong	local02, fp
0d8a0     10 23 0A F2 | 	cmp	local03, local02 wz
0d8a4     54 FF 9F 5D |  if_ne	jmp	#LR__1030
0d8a8                 | LR__1032
0d8a8                 | ' 
0d8a8                 | ' if gotoheader(0)=gotoline then
0d8a8     0C 4E 05 F1 | 	add	fp, #12
0d8ac     A7 22 02 FB | 	rdlong	local03, fp
0d8b0     0C 4E 85 F1 | 	sub	fp, #12
0d8b4     A7 1E 02 FB | 	rdlong	local01, fp
0d8b8     0F 23 0A F2 | 	cmp	local03, local01 wz
0d8bc     D8 00 90 5D |  if_ne	jmp	#LR__1033
0d8c0     6A 00 00 FF 
0d8c4     04 E4 05 F1 | 	add	objptr, ##54276
0d8c8     F2 1E 02 FB | 	rdlong	local01, objptr
0d8cc     0F 21 02 F6 | 	mov	local02, local01
0d8d0     01 20 66 F0 | 	shl	local02, #1
0d8d4     0F 21 02 F1 | 	add	local02, local01
0d8d8     02 20 66 F0 | 	shl	local02, #2
0d8dc     03 00 00 FF 
0d8e0     04 E4 85 F1 | 	sub	objptr, ##1540
0d8e4     F2 20 02 F1 | 	add	local02, objptr
0d8e8     08 4E 05 F1 | 	add	fp, #8
0d8ec     A7 22 02 FB | 	rdlong	local03, fp
0d8f0     10 23 62 FC | 	wrlong	local03, local02
0d8f4     03 00 00 FF 
0d8f8     04 E4 05 F1 | 	add	objptr, ##1540
0d8fc     F2 1E 02 FB | 	rdlong	local01, objptr
0d900     0F 21 02 F6 | 	mov	local02, local01
0d904     01 20 66 F0 | 	shl	local02, #1
0d908     0F 21 02 F1 | 	add	local02, local01
0d90c     02 20 66 F0 | 	shl	local02, #2
0d910     03 00 00 FF 
0d914     04 E4 85 F1 | 	sub	objptr, ##1540
0d918     F2 20 02 F1 | 	add	local02, objptr
0d91c     08 20 06 F1 | 	add	local02, #8
0d920     10 9D 68 FC | 	wrlong	#78, local02
0d924     03 00 00 FF 
0d928     04 E4 05 F1 | 	add	objptr, ##1540
0d92c     F2 20 02 FB | 	rdlong	local02, objptr
0d930     10 13 02 F6 | 	mov	arg01, local02
0d934     01 12 66 F0 | 	shl	arg01, #1
0d938     10 13 02 F1 | 	add	arg01, local02
0d93c     02 12 66 F0 | 	shl	arg01, #2
0d940     03 00 00 FF 
0d944     04 E4 85 F1 | 	sub	objptr, ##1540
0d948     F2 12 02 F1 | 	add	arg01, objptr
0d94c     12 00 00 FF 
0d950     3C E5 05 F1 | 	add	objptr, ##9532
0d954     F2 14 02 FB | 	rdlong	arg02, objptr
0d958     02 22 06 F6 | 	mov	local03, #2
0d95c     10 23 02 F1 | 	add	local03, local02
0d960     14 00 00 FF 
0d964     54 E5 85 F1 | 	sub	objptr, ##10580
0d968     F2 16 02 FB | 	rdlong	arg03, objptr
0d96c     0B 23 02 FD | 	qmul	local03, arg03
0d970     08 4E 85 F1 | 	sub	fp, #8
0d974     59 00 00 FF 
0d978     28 E5 85 F1 | 	sub	objptr, ##45864
0d97c     18 22 62 FD | 	getqx	local03
0d980     11 15 02 F1 | 	add	arg02, local03
0d984     C4 C8 B0 FD | 	call	#_psram_spin2_write
0d988     0B 00 00 FF 
0d98c     C0 E4 85 F1 | 	sub	objptr, ##5824
0d990     18 FD BF FD | 	call	#_do_fast_goto
0d994     08 00 90 FD | 	jmp	#LR__1034
0d998                 | LR__1033
0d998     26 12 06 F6 | 	mov	arg01, #38
0d99c     68 9D B0 FD | 	call	#_printerror
0d9a0                 | LR__1034
0d9a0     A7 F0 03 F6 | 	mov	ptra, fp
0d9a4     B2 00 A0 FD | 	call	#popregs_
0d9a8                 | _do_find_goto_ret
0d9a8     2D 00 64 FD | 	ret
0d9ac                 | 
0d9ac                 | ' 
0d9ac                 | ' sub do_slow_goto
0d9ac                 | _do_slow_goto
0d9ac                 | _do_slow_goto_ret
0d9ac     2D 00 64 FD | 	ret
0d9b0                 | 
0d9b0                 | ' 
0d9b0                 | ' '----------------------- Error processing
0d9b0                 | ' 
0d9b0                 | ' sub do_error
0d9b0                 | _do_error
0d9b0     01 4A 05 F6 | 	mov	COUNT_, #1
0d9b4     A8 00 A0 FD | 	call	#pushregs_
0d9b8     6A 00 00 FF 
0d9bc     04 E4 05 F1 | 	add	objptr, ##54276
0d9c0     F2 18 02 FB | 	rdlong	arg04, objptr
0d9c4     0C 17 02 F6 | 	mov	arg03, arg04
0d9c8     01 16 66 F0 | 	shl	arg03, #1
0d9cc     0C 17 02 F1 | 	add	arg03, arg04
0d9d0     02 16 66 F0 | 	shl	arg03, #2
0d9d4     03 00 00 FF 
0d9d8     04 E4 85 F1 | 	sub	objptr, ##1540
0d9dc     F2 16 02 F1 | 	add	arg03, objptr
0d9e0     0B 1F 02 FB | 	rdlong	local01, arg03
0d9e4                 | ' r=compiledline(lineptr_e).result.uresult
0d9e4                 | ' print "Error ";r;": ";errors$(r)
0d9e4     00 12 06 F6 | 	mov	arg01, #0
0d9e8     67 00 00 FF 
0d9ec     00 E4 85 F1 | 	sub	objptr, ##52736
0d9f0     58 2C B1 FD | 	call	#__system___getiolock_0442
0d9f4     FD 12 02 F6 | 	mov	arg01, result1
0d9f8     1C D3 B0 FD | 	call	#__system___lockmem
0d9fc     54 01 00 FF 
0da00     36 14 06 F6 | 	mov	arg02, ##@LR__4713
0da04     00 12 06 F6 | 	mov	arg01, #0
0da08     00 16 06 F6 | 	mov	arg03, #0
0da0c     10 E0 B0 FD | 	call	#__system___basic_print_string
0da10     00 12 06 F6 | 	mov	arg01, #0
0da14     0F 15 02 F6 | 	mov	arg02, local01
0da18     00 16 06 F6 | 	mov	arg03, #0
0da1c     0A 18 06 F6 | 	mov	arg04, #10
0da20     80 E0 B0 FD | 	call	#__system___basic_print_unsigned
0da24     54 01 00 FF 
0da28     3D 14 06 F6 | 	mov	arg02, ##@LR__4714
0da2c     00 12 06 F6 | 	mov	arg01, #0
0da30     00 16 06 F6 | 	mov	arg03, #0
0da34     E8 DF B0 FD | 	call	#__system___basic_print_string
0da38     02 1E 66 F0 | 	shl	local01, #2
0da3c     65 00 00 FF 
0da40     00 E4 05 F1 | 	add	objptr, ##51712
0da44     F2 1E 02 F1 | 	add	local01, objptr
0da48     0F 15 02 FB | 	rdlong	arg02, local01
0da4c     00 12 06 F6 | 	mov	arg01, #0
0da50     00 16 06 F6 | 	mov	arg03, #0
0da54     65 00 00 FF 
0da58     00 E4 85 F1 | 	sub	objptr, ##51712
0da5c     C0 DF B0 FD | 	call	#__system___basic_print_string
0da60     00 12 06 F6 | 	mov	arg01, #0
0da64     0A 14 06 F6 | 	mov	arg02, #10
0da68     00 16 06 F6 | 	mov	arg03, #0
0da6c     58 DF B0 FD | 	call	#__system___basic_print_char
0da70     00 12 06 F6 | 	mov	arg01, #0
0da74     D4 2B B1 FD | 	call	#__system___getiolock_0442
0da78     FD 00 68 FC | 	wrlong	#0, result1
0da7c     A7 F0 03 F6 | 	mov	ptra, fp
0da80     B2 00 A0 FD | 	call	#popregs_
0da84                 | _do_error_ret
0da84     2D 00 64 FD | 	ret
0da88                 | 
0da88                 | ' 
0da88                 | ' 
0da88                 | ' '------------------ Assigning to a variable  
0da88                 | ' 
0da88                 | ' function  convertstring(psaddr as ulong) as string
0da88                 | _convertstring
0da88     04 4A 05 F6 | 	mov	COUNT_, #4
0da8c     A8 00 A0 FD | 	call	#pushregs_
0da90     09 1F 02 F6 | 	mov	local01, arg01
0da94     2C 9E B0 FD | 	call	#_pslpeek
0da98     FD 20 02 F6 | 	mov	local02, result1
0da9c     54 01 00 FF 
0daa0     40 22 06 F6 | 	mov	local03, ##@LR__4715
0daa4                 | ' 'print "in convertstring: psaddr=";psaddr
0daa4                 | ' l=pslpeek(psaddr)
0daa4                 | ' 'print "in convertstring: len=";l
0daa4                 | ' s="" 
0daa4                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0daa4     01 24 06 F6 | 	mov	local04, #1
0daa8     01 20 06 F1 | 	add	local02, #1
0daac                 | LR__1040
0daac     10 25 52 F2 | 	cmps	local04, local02 wc
0dab0     30 00 90 3D |  if_ae	jmp	#LR__1041
0dab4     0F 13 02 F6 | 	mov	arg01, local01
0dab8     03 12 06 F1 | 	add	arg01, #3
0dabc     12 13 02 F1 | 	add	arg01, local04
0dac0     A8 9D B0 FD | 	call	#_pspeek
0dac4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0dac8     58 F4 B0 FD | 	call	#__system__Chr_S
0dacc     FD 14 02 F6 | 	mov	arg02, result1
0dad0     11 13 02 F6 | 	mov	arg01, local03
0dad4     9C D2 B0 FD | 	call	#__system___string_concat
0dad8     FD 22 02 F6 | 	mov	local03, result1
0dadc     01 24 06 F1 | 	add	local04, #1
0dae0     C8 FF 9F FD | 	jmp	#LR__1040
0dae4                 | LR__1041
0dae4                 | ' 'print "in convertstring: str=";s
0dae4                 | ' return s
0dae4     11 FB 01 F6 | 	mov	result1, local03
0dae8     A7 F0 03 F6 | 	mov	ptra, fp
0daec     B2 00 A0 FD | 	call	#popregs_
0daf0                 | _convertstring_ret
0daf0     2D 00 64 FD | 	ret
0daf4                 | 
0daf4                 | ' 
0daf4                 | ' sub do_assign
0daf4                 | _do_assign
0daf4     05 4A 05 F6 | 	mov	COUNT_, #5
0daf8     A8 00 A0 FD | 	call	#pushregs_
0dafc     44 F0 07 F1 | 	add	ptra, #68
0db00     6A 00 00 FF 
0db04     04 E4 05 F1 | 	add	objptr, ##54276
0db08     F2 16 02 FB | 	rdlong	arg03, objptr
0db0c     0B 15 02 F6 | 	mov	arg02, arg03
0db10     01 14 66 F0 | 	shl	arg02, #1
0db14     0B 15 02 F1 | 	add	arg02, arg03
0db18     02 14 66 F0 | 	shl	arg02, #2
0db1c     03 00 00 FF 
0db20     04 E4 85 F1 | 	sub	objptr, ##1540
0db24     F2 14 02 F1 | 	add	arg02, objptr
0db28     0A 15 02 FB | 	rdlong	arg02, arg02
0db2c     18 4E 05 F1 | 	add	fp, #24
0db30     A7 14 62 FC | 	wrlong	arg02, fp
0db34                 | ' 
0db34                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0db34                 | ' 
0db34                 | ' if variables(varnum).vartype<array_no_type then 
0db34     18 4E 85 F1 | 	sub	fp, #24
0db38     04 14 66 F0 | 	shl	arg02, #4
0db3c     32 00 00 FF 
0db40     74 E4 85 F1 | 	sub	objptr, ##25716
0db44     F2 14 02 F1 | 	add	arg02, objptr
0db48     0C 14 06 F1 | 	add	arg02, #12
0db4c     0A 17 02 FB | 	rdlong	arg03, arg02
0db50     00 17 16 F2 | 	cmp	arg03, #256 wc
0db54     34 00 00 FF 
0db58     8C E5 85 F1 | 	sub	objptr, ##27020
0db5c     18 01 90 3D |  if_ae	jmp	#LR__1050
0db60     94 BF BF FD | 	call	#_pop
0db64     A7 FA 61 FC | 	wrlong	result1, fp
0db68     04 4E 05 F1 | 	add	fp, #4
0db6c     A7 FC 61 FC | 	wrlong	result2, fp
0db70     04 4E 05 F1 | 	add	fp, #4
0db74     A7 FE 61 FC | 	wrlong	result3, fp
0db78     08 4E 85 F1 | 	sub	fp, #8
0db7c     A7 16 02 FB | 	rdlong	arg03, fp
0db80     04 4E 05 F1 | 	add	fp, #4
0db84     A7 14 02 FB | 	rdlong	arg02, fp
0db88     14 4E 05 F1 | 	add	fp, #20
0db8c     A7 12 02 FB | 	rdlong	arg01, fp
0db90     04 12 66 F0 | 	shl	arg01, #4
0db94     34 00 00 FF 
0db98     8C E5 05 F1 | 	add	objptr, ##27020
0db9c     F2 12 02 F1 | 	add	arg01, objptr
0dba0     04 12 06 F1 | 	add	arg01, #4
0dba4     09 17 62 FC | 	wrlong	arg03, arg01
0dba8     A7 16 02 FB | 	rdlong	arg03, fp
0dbac     04 16 66 F0 | 	shl	arg03, #4
0dbb0     F2 16 02 F1 | 	add	arg03, objptr
0dbb4     08 16 06 F1 | 	add	arg03, #8
0dbb8     0B 15 62 FC | 	wrlong	arg02, arg03
0dbbc     A7 16 02 FB | 	rdlong	arg03, fp
0dbc0     04 16 66 F0 | 	shl	arg03, #4
0dbc4     F2 16 02 F1 | 	add	arg03, objptr
0dbc8     10 4E 85 F1 | 	sub	fp, #16
0dbcc     A7 14 02 FB | 	rdlong	arg02, fp
0dbd0     0C 16 06 F1 | 	add	arg03, #12
0dbd4     0B 15 62 FC | 	wrlong	arg02, arg03
0dbd8                 | '   t1=pop() 
0dbd8                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0dbd8                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0dbd8                 | '   if variables(varnum).vartype<>result_string2 then return
0dbd8     10 4E 05 F1 | 	add	fp, #16
0dbdc     A7 16 02 FB | 	rdlong	arg03, fp
0dbe0     18 4E 85 F1 | 	sub	fp, #24
0dbe4     04 16 66 F0 | 	shl	arg03, #4
0dbe8     F2 16 02 F1 | 	add	arg03, objptr
0dbec     0C 16 06 F1 | 	add	arg03, #12
0dbf0     0B 17 02 FB | 	rdlong	arg03, arg03
0dbf4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0dbf8     34 00 00 FF 
0dbfc     8C E5 85 F1 | 	sub	objptr, ##27020
0dc00     30 06 90 5D |  if_ne	jmp	#LR__1073
0dc04     18 4E 05 F1 | 	add	fp, #24
0dc08     A7 16 02 FB | 	rdlong	arg03, fp
0dc0c     0B 1F 02 F6 | 	mov	local01, arg03
0dc10     04 1E 66 F0 | 	shl	local01, #4
0dc14     34 00 00 FF 
0dc18     8C E5 05 F1 | 	add	objptr, ##27020
0dc1c     F2 1E 02 F1 | 	add	local01, objptr
0dc20     18 4E 85 F1 | 	sub	fp, #24
0dc24     04 16 66 F0 | 	shl	arg03, #4
0dc28     F2 16 02 F1 | 	add	arg03, objptr
0dc2c     04 16 06 F1 | 	add	arg03, #4
0dc30     0B 13 02 FB | 	rdlong	arg01, arg03
0dc34     34 00 00 FF 
0dc38     8C E5 85 F1 | 	sub	objptr, ##27020
0dc3c     48 FE BF FD | 	call	#_convertstring
0dc40     04 1E 06 F1 | 	add	local01, #4
0dc44     0F FB 61 FC | 	wrlong	result1, local01
0dc48     18 4E 05 F1 | 	add	fp, #24
0dc4c     A7 1E 02 FB | 	rdlong	local01, fp
0dc50     18 4E 85 F1 | 	sub	fp, #24
0dc54     04 1E 66 F0 | 	shl	local01, #4
0dc58     34 00 00 FF 
0dc5c     8C E5 05 F1 | 	add	objptr, ##27020
0dc60     F2 1E 02 F1 | 	add	local01, objptr
0dc64     0C 1E 06 F1 | 	add	local01, #12
0dc68     0F 3F 68 FC | 	wrlong	#31, local01
0dc6c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0dc6c                 | '   variables(varnum).vartype=result_string
0dc6c                 | '   return
0dc6c     34 00 00 FF 
0dc70     8C E5 85 F1 | 	sub	objptr, ##27020
0dc74     BC 05 90 FD | 	jmp	#LR__1073
0dc78                 | LR__1050
0dc78                 | ' for i=0 to 2 : arrid(i)=0 : next i
0dc78     1C 4E 05 F1 | 	add	fp, #28
0dc7c     A7 00 68 FC | 	wrlong	#0, fp
0dc80     97 16 48 FB | 	callpa	#(@LR__1052-@LR__1051)>>2,fcache_load_ptr_
0dc84                 | LR__1051
0dc84     A7 1E 02 FB | 	rdlong	local01, fp
0dc88     02 1E 66 F0 | 	shl	local01, #2
0dc8c     18 4E 05 F1 | 	add	fp, #24
0dc90     A7 1E 02 F1 | 	add	local01, fp
0dc94     0F 01 68 FC | 	wrlong	#0, local01
0dc98     18 4E 85 F1 | 	sub	fp, #24
0dc9c     A7 1E 02 FB | 	rdlong	local01, fp
0dca0     01 1E 06 F1 | 	add	local01, #1
0dca4     A7 1E 62 FC | 	wrlong	local01, fp
0dca8     03 1E 16 F2 | 	cmp	local01, #3 wc
0dcac     D4 FF 9F CD |  if_b	jmp	#LR__1051
0dcb0                 | LR__1052
0dcb0     6A 00 00 FF 
0dcb4     04 E4 05 F1 | 	add	objptr, ##54276
0dcb8     F2 16 02 FB | 	rdlong	arg03, objptr
0dcbc     0B 1F 02 F6 | 	mov	local01, arg03
0dcc0     01 1E 66 F0 | 	shl	local01, #1
0dcc4     0B 1F 02 F1 | 	add	local01, arg03
0dcc8     02 1E 66 F0 | 	shl	local01, #2
0dccc     03 00 00 FF 
0dcd0     04 E4 85 F1 | 	sub	objptr, ##1540
0dcd4     F2 1E 02 F1 | 	add	local01, objptr
0dcd8     04 1E 06 F1 | 	add	local01, #4
0dcdc     0F 21 02 FB | 	rdlong	local02, local01
0dce0     04 4E 05 F1 | 	add	fp, #4
0dce4     A7 20 62 FC | 	wrlong	local02, fp
0dce8     20 4E 85 F1 | 	sub	fp, #32
0dcec     67 00 00 FF 
0dcf0     00 E4 85 F1 | 	sub	objptr, ##52736
0dcf4     00 BE BF FD | 	call	#_pop
0dcf8     A7 FA 61 FC | 	wrlong	result1, fp
0dcfc     04 4E 05 F1 | 	add	fp, #4
0dd00     A7 FC 61 FC | 	wrlong	result2, fp
0dd04     04 4E 05 F1 | 	add	fp, #4
0dd08     A7 FE 61 FC | 	wrlong	result3, fp
0dd0c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0dd0c                 | ' t1=pop() ' var value
0dd0c                 | ' if numpar>0 then
0dd0c     18 4E 05 F1 | 	add	fp, #24
0dd10     A7 22 02 FB | 	rdlong	local03, fp
0dd14     20 4E 85 F1 | 	sub	fp, #32
0dd18     01 22 16 F2 | 	cmp	local03, #1 wc
0dd1c     78 00 90 CD |  if_b	jmp	#LR__1055
0dd20                 | '   for i=numpar to 1 step -1
0dd20     20 4E 05 F1 | 	add	fp, #32
0dd24     A7 24 0A FB | 	rdlong	local04, fp wz
0dd28     04 4E 85 F1 | 	sub	fp, #4
0dd2c     A7 24 62 FC | 	wrlong	local04, fp
0dd30     1C 4E 85 F1 | 	sub	fp, #28
0dd34     60 00 90 AD |  if_e	jmp	#LR__1054
0dd38                 | LR__1053
0dd38     BC BD BF FD | 	call	#_pop
0dd3c     0C 4E 05 F1 | 	add	fp, #12
0dd40     A7 FA 61 FC | 	wrlong	result1, fp
0dd44     04 4E 05 F1 | 	add	fp, #4
0dd48     A7 FC 61 FC | 	wrlong	result2, fp
0dd4c     04 4E 05 F1 | 	add	fp, #4
0dd50     A7 FE 61 FC | 	wrlong	result3, fp
0dd54     08 4E 05 F1 | 	add	fp, #8
0dd58     A7 22 02 FB | 	rdlong	local03, fp
0dd5c     01 22 86 F1 | 	sub	local03, #1
0dd60     02 22 66 F0 | 	shl	local03, #2
0dd64     18 4E 05 F1 | 	add	fp, #24
0dd68     A7 22 02 F1 | 	add	local03, fp
0dd6c     28 4E 85 F1 | 	sub	fp, #40
0dd70     A7 12 02 F6 | 	mov	arg01, fp
0dd74     0C 4E 85 F1 | 	sub	fp, #12
0dd78     40 41 B0 FD | 	call	#_converttoint
0dd7c     11 FB 61 FC | 	wrlong	result1, local03
0dd80     1C 4E 05 F1 | 	add	fp, #28
0dd84     A7 24 02 FB | 	rdlong	local04, fp
0dd88     01 24 8E F1 | 	sub	local04, #1 wz
0dd8c     A7 24 62 FC | 	wrlong	local04, fp
0dd90     1C 4E 85 F1 | 	sub	fp, #28
0dd94     A0 FF 9F 5D |  if_ne	jmp	#LR__1053
0dd98                 | LR__1054
0dd98                 | LR__1055
0dd98     18 4E 05 F1 | 	add	fp, #24
0dd9c     A7 1E 02 FB | 	rdlong	local01, fp
0dda0     04 1E 66 F0 | 	shl	local01, #4
0dda4     34 00 00 FF 
0dda8     8C E5 05 F1 | 	add	objptr, ##27020
0ddac     F2 1E 02 F1 | 	add	local01, objptr
0ddb0     04 1E 06 F1 | 	add	local01, #4
0ddb4     0F 13 02 FB | 	rdlong	arg01, local01
0ddb8     0C 4E 05 F1 | 	add	fp, #12
0ddbc     A7 12 62 FC | 	wrlong	arg01, fp
0ddc0     24 4E 85 F1 | 	sub	fp, #36
0ddc4     34 00 00 FF 
0ddc8     8C E5 85 F1 | 	sub	objptr, ##27020
0ddcc     F4 9A B0 FD | 	call	#_pslpeek
0ddd0     FD 24 32 F9 | 	getword	local04, result1, #0
0ddd4     28 4E 05 F1 | 	add	fp, #40
0ddd8     A7 24 62 FC | 	wrlong	local04, fp
0dddc     04 4E 85 F1 | 	sub	fp, #4
0dde0     A7 12 02 FB | 	rdlong	arg01, fp
0dde4     24 4E 85 F1 | 	sub	fp, #36
0dde8     02 12 06 F1 | 	add	arg01, #2
0ddec     7C 9A B0 FD | 	call	#_pspeek
0ddf0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ddf4     2C 4E 05 F1 | 	add	fp, #44
0ddf8     A7 FA 61 FC | 	wrlong	result1, fp
0ddfc                 | ' esize=pspeek(arrptr+2)
0ddfc                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0ddfc     08 4E 85 F1 | 	sub	fp, #8
0de00     A7 12 02 FB | 	rdlong	arg01, fp
0de04     24 4E 85 F1 | 	sub	fp, #36
0de08     04 12 06 F1 | 	add	arg01, #4
0de0c     B4 9A B0 FD | 	call	#_pslpeek
0de10     FD 24 02 F6 | 	mov	local04, result1
0de14     34 4E 05 F1 | 	add	fp, #52
0de18     A7 1E 02 FB | 	rdlong	local01, fp
0de1c     34 4E 85 F1 | 	sub	fp, #52
0de20     12 1F 12 F2 | 	cmp	local01, local04 wc
0de24     54 00 90 3D |  if_ae	jmp	#LR__1056
0de28     24 4E 05 F1 | 	add	fp, #36
0de2c     A7 12 02 FB | 	rdlong	arg01, fp
0de30     24 4E 85 F1 | 	sub	fp, #36
0de34     08 12 06 F1 | 	add	arg01, #8
0de38     88 9A B0 FD | 	call	#_pslpeek
0de3c     FD 1E 02 F6 | 	mov	local01, result1
0de40     38 4E 05 F1 | 	add	fp, #56
0de44     A7 24 02 FB | 	rdlong	local04, fp
0de48     38 4E 85 F1 | 	sub	fp, #56
0de4c     0F 25 12 F2 | 	cmp	local04, local01 wc
0de50     28 00 90 3D |  if_ae	jmp	#LR__1056
0de54     24 4E 05 F1 | 	add	fp, #36
0de58     A7 12 02 FB | 	rdlong	arg01, fp
0de5c     24 4E 85 F1 | 	sub	fp, #36
0de60     0C 12 06 F1 | 	add	arg01, #12
0de64     5C 9A B0 FD | 	call	#_pslpeek
0de68     3C 4E 05 F1 | 	add	fp, #60
0de6c     A7 24 02 FB | 	rdlong	local04, fp
0de70     3C 4E 85 F1 | 	sub	fp, #60
0de74     FD 24 12 F2 | 	cmp	local04, result1 wc
0de78     0C 00 90 CD |  if_b	jmp	#LR__1057
0de7c                 | LR__1056
0de7c     31 12 06 F6 | 	mov	arg01, #49
0de80     84 98 B0 FD | 	call	#_printerror
0de84     AC 03 90 FD | 	jmp	#LR__1073
0de88                 | LR__1057
0de88     24 4E 05 F1 | 	add	fp, #36
0de8c     A7 12 02 FB | 	rdlong	arg01, fp
0de90     09 25 02 F6 | 	mov	local04, arg01
0de94     10 24 06 F1 | 	add	local04, #16
0de98     24 4E 85 F1 | 	sub	fp, #36
0de9c     04 12 06 F1 | 	add	arg01, #4
0dea0     20 9A B0 FD | 	call	#_pslpeek
0dea4     FD 1E 02 F6 | 	mov	local01, result1
0dea8     38 4E 05 F1 | 	add	fp, #56
0deac     A7 20 02 FB | 	rdlong	local02, fp
0deb0     10 1F 02 FD | 	qmul	local01, local02
0deb4     04 4E 85 F1 | 	sub	fp, #4
0deb8     A7 22 02 FB | 	rdlong	local03, fp
0debc     10 4E 85 F1 | 	sub	fp, #16
0dec0     A7 12 02 FB | 	rdlong	arg01, fp
0dec4     24 4E 85 F1 | 	sub	fp, #36
0dec8     08 12 06 F1 | 	add	arg01, #8
0decc     18 20 62 FD | 	getqx	local02
0ded0     10 23 02 F1 | 	add	local03, local02
0ded4     EC 99 B0 FD | 	call	#_pslpeek
0ded8     FD 20 02 F6 | 	mov	local02, result1
0dedc     24 4E 05 F1 | 	add	fp, #36
0dee0     A7 12 02 FB | 	rdlong	arg01, fp
0dee4     24 4E 85 F1 | 	sub	fp, #36
0dee8     04 12 06 F1 | 	add	arg01, #4
0deec     D4 99 B0 FD | 	call	#_pslpeek
0def0     FD 20 02 FD | 	qmul	local02, result1
0def4     3C 4E 05 F1 | 	add	fp, #60
0def8     A7 20 02 FB | 	rdlong	local02, fp
0defc     18 1E 62 FD | 	getqx	local01
0df00     10 1F 02 FD | 	qmul	local01, local02
0df04     10 4E 85 F1 | 	sub	fp, #16
0df08     A7 20 02 FB | 	rdlong	local02, fp
0df0c     18 1E 62 FD | 	getqx	local01
0df10     0F 23 02 F1 | 	add	local03, local01
0df14     11 21 02 FD | 	qmul	local02, local03
0df18     04 4E 05 F1 | 	add	fp, #4
0df1c                 | ' 
0df1c                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0df1c                 | ' select case arrtype
0df1c     18 22 62 FD | 	getqx	local03
0df20     11 25 02 F1 | 	add	local04, local03
0df24     A7 24 62 FC | 	wrlong	local04, fp
0df28     08 4E 85 F1 | 	sub	fp, #8
0df2c     A7 26 02 FB | 	rdlong	local05, fp
0df30     28 4E 85 F1 | 	sub	fp, #40
0df34     00 27 86 F1 | 	sub	local05, #256
0df38     0C 26 26 F3 | 	fle	local05, #12
0df3c     30 26 62 FD | 	jmprel	local05
0df40                 | LR__1058
0df40     30 00 90 FD | 	jmp	#LR__1059
0df44     58 00 90 FD | 	jmp	#LR__1060
0df48     88 00 90 FD | 	jmp	#LR__1061
0df4c     B8 00 90 FD | 	jmp	#LR__1062
0df50     10 01 90 FD | 	jmp	#LR__1063
0df54     68 01 90 FD | 	jmp	#LR__1064
0df58     98 01 90 FD | 	jmp	#LR__1065
0df5c     C8 01 90 FD | 	jmp	#LR__1066
0df60     F8 01 90 FD | 	jmp	#LR__1067
0df64     28 02 90 FD | 	jmp	#LR__1068
0df68     58 02 90 FD | 	jmp	#LR__1069
0df6c     88 02 90 FD | 	jmp	#LR__1070
0df70     B8 02 90 FD | 	jmp	#LR__1071
0df74                 | LR__1059
0df74     A7 12 02 F6 | 	mov	arg01, fp
0df78     30 4E 05 F1 | 	add	fp, #48
0df7c     A7 14 02 FB | 	rdlong	arg02, fp
0df80     30 4E 85 F1 | 	sub	fp, #48
0df84     0C 16 06 F6 | 	mov	arg03, #12
0df88     0B 00 00 FF 
0df8c     C0 E4 05 F1 | 	add	objptr, ##5824
0df90     B8 C2 B0 FD | 	call	#_psram_spin2_write
0df94     0B 00 00 FF 
0df98     C0 E4 85 F1 | 	sub	objptr, ##5824
0df9c     94 02 90 FD | 	jmp	#LR__1072
0dfa0                 | LR__1060
0dfa0     30 4E 05 F1 | 	add	fp, #48
0dfa4     A7 12 02 FB | 	rdlong	arg01, fp
0dfa8     30 4E 85 F1 | 	sub	fp, #48
0dfac     A7 14 02 FB | 	rdlong	arg02, fp
0dfb0     01 16 06 F6 | 	mov	arg03, #1
0dfb4     00 18 06 F6 | 	mov	arg04, #0
0dfb8     0B 00 00 FF 
0dfbc     C0 E4 05 F1 | 	add	objptr, ##5824
0dfc0                 | '     return fill(addr, pattern, count, listPtr, 1)
0dfc0     01 1A 06 F6 | 	mov	arg05, #1
0dfc4     20 C3 B0 FD | 	call	#_psram_spin2_fill
0dfc8     0B 00 00 FF 
0dfcc     C0 E4 85 F1 | 	sub	objptr, ##5824
0dfd0     60 02 90 FD | 	jmp	#LR__1072
0dfd4                 | LR__1061
0dfd4     30 4E 05 F1 | 	add	fp, #48
0dfd8     A7 12 02 FB | 	rdlong	arg01, fp
0dfdc     30 4E 85 F1 | 	sub	fp, #48
0dfe0     A7 14 02 FB | 	rdlong	arg02, fp
0dfe4     01 16 06 F6 | 	mov	arg03, #1
0dfe8     00 18 06 F6 | 	mov	arg04, #0
0dfec     0B 00 00 FF 
0dff0     C0 E4 05 F1 | 	add	objptr, ##5824
0dff4                 | '     return fill(addr, pattern, count, listPtr, 1)
0dff4     01 1A 06 F6 | 	mov	arg05, #1
0dff8     EC C2 B0 FD | 	call	#_psram_spin2_fill
0dffc     0B 00 00 FF 
0e000     C0 E4 85 F1 | 	sub	objptr, ##5824
0e004     2C 02 90 FD | 	jmp	#LR__1072
0e008                 | LR__1062
0e008     30 4E 05 F1 | 	add	fp, #48
0e00c     A7 12 02 FB | 	rdlong	arg01, fp
0e010     30 4E 85 F1 | 	sub	fp, #48
0e014     A7 14 02 FB | 	rdlong	arg02, fp
0e018     01 16 06 F6 | 	mov	arg03, #1
0e01c     00 18 06 F6 | 	mov	arg04, #0
0e020     0B 00 00 FF 
0e024     C0 E4 05 F1 | 	add	objptr, ##5824
0e028                 | '     return fill(addr, pattern, count, listPtr, 1)
0e028     01 1A 06 F6 | 	mov	arg05, #1
0e02c     B8 C2 B0 FD | 	call	#_psram_spin2_fill
0e030     30 4E 05 F1 | 	add	fp, #48
0e034     A7 12 02 FB | 	rdlong	arg01, fp
0e038     30 4E 85 F1 | 	sub	fp, #48
0e03c     01 12 06 F1 | 	add	arg01, #1
0e040     A7 14 02 FB | 	rdlong	arg02, fp
0e044     08 14 46 F0 | 	shr	arg02, #8
0e048     01 16 06 F6 | 	mov	arg03, #1
0e04c     00 18 06 F6 | 	mov	arg04, #0
0e050                 | '     return fill(addr, pattern, count, listPtr, 1)
0e050     01 1A 06 F6 | 	mov	arg05, #1
0e054     90 C2 B0 FD | 	call	#_psram_spin2_fill
0e058     0B 00 00 FF 
0e05c     C0 E4 85 F1 | 	sub	objptr, ##5824
0e060     D0 01 90 FD | 	jmp	#LR__1072
0e064                 | LR__1063
0e064     30 4E 05 F1 | 	add	fp, #48
0e068     A7 12 02 FB | 	rdlong	arg01, fp
0e06c     30 4E 85 F1 | 	sub	fp, #48
0e070     A7 14 02 FB | 	rdlong	arg02, fp
0e074     01 16 06 F6 | 	mov	arg03, #1
0e078     00 18 06 F6 | 	mov	arg04, #0
0e07c     0B 00 00 FF 
0e080     C0 E4 05 F1 | 	add	objptr, ##5824
0e084                 | '     return fill(addr, pattern, count, listPtr, 1)
0e084     01 1A 06 F6 | 	mov	arg05, #1
0e088     5C C2 B0 FD | 	call	#_psram_spin2_fill
0e08c     30 4E 05 F1 | 	add	fp, #48
0e090     A7 12 02 FB | 	rdlong	arg01, fp
0e094     30 4E 85 F1 | 	sub	fp, #48
0e098     01 12 06 F1 | 	add	arg01, #1
0e09c     A7 14 02 FB | 	rdlong	arg02, fp
0e0a0     08 14 46 F0 | 	shr	arg02, #8
0e0a4     01 16 06 F6 | 	mov	arg03, #1
0e0a8     00 18 06 F6 | 	mov	arg04, #0
0e0ac                 | '     return fill(addr, pattern, count, listPtr, 1)
0e0ac     01 1A 06 F6 | 	mov	arg05, #1
0e0b0     34 C2 B0 FD | 	call	#_psram_spin2_fill
0e0b4     0B 00 00 FF 
0e0b8     C0 E4 85 F1 | 	sub	objptr, ##5824
0e0bc     74 01 90 FD | 	jmp	#LR__1072
0e0c0                 | LR__1064
0e0c0     30 4E 05 F1 | 	add	fp, #48
0e0c4     A7 12 02 FB | 	rdlong	arg01, fp
0e0c8     30 4E 85 F1 | 	sub	fp, #48
0e0cc     A7 14 02 FB | 	rdlong	arg02, fp
0e0d0     01 16 06 F6 | 	mov	arg03, #1
0e0d4     00 18 06 F6 | 	mov	arg04, #0
0e0d8     0B 00 00 FF 
0e0dc     C0 E4 05 F1 | 	add	objptr, ##5824
0e0e0                 | '     return fill(addr, pattern, count, listPtr, 4)
0e0e0     04 1A 06 F6 | 	mov	arg05, #4
0e0e4     00 C2 B0 FD | 	call	#_psram_spin2_fill
0e0e8     0B 00 00 FF 
0e0ec     C0 E4 85 F1 | 	sub	objptr, ##5824
0e0f0     40 01 90 FD | 	jmp	#LR__1072
0e0f4                 | LR__1065
0e0f4     30 4E 05 F1 | 	add	fp, #48
0e0f8     A7 12 02 FB | 	rdlong	arg01, fp
0e0fc     30 4E 85 F1 | 	sub	fp, #48
0e100     A7 14 02 FB | 	rdlong	arg02, fp
0e104     01 16 06 F6 | 	mov	arg03, #1
0e108     00 18 06 F6 | 	mov	arg04, #0
0e10c     0B 00 00 FF 
0e110     C0 E4 05 F1 | 	add	objptr, ##5824
0e114                 | '     return fill(addr, pattern, count, listPtr, 4)
0e114     04 1A 06 F6 | 	mov	arg05, #4
0e118     CC C1 B0 FD | 	call	#_psram_spin2_fill
0e11c     0B 00 00 FF 
0e120     C0 E4 85 F1 | 	sub	objptr, ##5824
0e124     0C 01 90 FD | 	jmp	#LR__1072
0e128                 | LR__1066
0e128     30 4E 05 F1 | 	add	fp, #48
0e12c     A7 12 02 FB | 	rdlong	arg01, fp
0e130     30 4E 85 F1 | 	sub	fp, #48
0e134     A7 14 02 FB | 	rdlong	arg02, fp
0e138     01 16 06 F6 | 	mov	arg03, #1
0e13c     00 18 06 F6 | 	mov	arg04, #0
0e140     0B 00 00 FF 
0e144     C0 E4 05 F1 | 	add	objptr, ##5824
0e148                 | '     return fill(addr, pattern, count, listPtr, 4)
0e148     04 1A 06 F6 | 	mov	arg05, #4
0e14c     98 C1 B0 FD | 	call	#_psram_spin2_fill
0e150     0B 00 00 FF 
0e154     C0 E4 85 F1 | 	sub	objptr, ##5824
0e158     D8 00 90 FD | 	jmp	#LR__1072
0e15c                 | LR__1067
0e15c     30 4E 05 F1 | 	add	fp, #48
0e160     A7 12 02 FB | 	rdlong	arg01, fp
0e164     30 4E 85 F1 | 	sub	fp, #48
0e168     A7 14 02 FB | 	rdlong	arg02, fp
0e16c     01 16 06 F6 | 	mov	arg03, #1
0e170     00 18 06 F6 | 	mov	arg04, #0
0e174     0B 00 00 FF 
0e178     C0 E4 05 F1 | 	add	objptr, ##5824
0e17c                 | '     return fill(addr, pattern, count, listPtr, 4)
0e17c     04 1A 06 F6 | 	mov	arg05, #4
0e180     64 C1 B0 FD | 	call	#_psram_spin2_fill
0e184     0B 00 00 FF 
0e188     C0 E4 85 F1 | 	sub	objptr, ##5824
0e18c     A4 00 90 FD | 	jmp	#LR__1072
0e190                 | LR__1068
0e190     30 4E 05 F1 | 	add	fp, #48
0e194     A7 12 02 FB | 	rdlong	arg01, fp
0e198     30 4E 85 F1 | 	sub	fp, #48
0e19c     A7 14 02 FB | 	rdlong	arg02, fp
0e1a0     01 16 06 F6 | 	mov	arg03, #1
0e1a4     00 18 06 F6 | 	mov	arg04, #0
0e1a8     0B 00 00 FF 
0e1ac     C0 E4 05 F1 | 	add	objptr, ##5824
0e1b0                 | '     return fill(addr, pattern, count, listPtr, 4)
0e1b0     04 1A 06 F6 | 	mov	arg05, #4
0e1b4     30 C1 B0 FD | 	call	#_psram_spin2_fill
0e1b8     0B 00 00 FF 
0e1bc     C0 E4 85 F1 | 	sub	objptr, ##5824
0e1c0     70 00 90 FD | 	jmp	#LR__1072
0e1c4                 | LR__1069
0e1c4     30 4E 05 F1 | 	add	fp, #48
0e1c8     A7 12 02 FB | 	rdlong	arg01, fp
0e1cc     30 4E 85 F1 | 	sub	fp, #48
0e1d0     A7 14 02 FB | 	rdlong	arg02, fp
0e1d4     01 16 06 F6 | 	mov	arg03, #1
0e1d8     00 18 06 F6 | 	mov	arg04, #0
0e1dc     0B 00 00 FF 
0e1e0     C0 E4 05 F1 | 	add	objptr, ##5824
0e1e4                 | '     return fill(addr, pattern, count, listPtr, 4)
0e1e4     04 1A 06 F6 | 	mov	arg05, #4
0e1e8     FC C0 B0 FD | 	call	#_psram_spin2_fill
0e1ec     0B 00 00 FF 
0e1f0     C0 E4 85 F1 | 	sub	objptr, ##5824
0e1f4     3C 00 90 FD | 	jmp	#LR__1072
0e1f8                 | LR__1070
0e1f8     30 4E 05 F1 | 	add	fp, #48
0e1fc     A7 12 02 FB | 	rdlong	arg01, fp
0e200     30 4E 85 F1 | 	sub	fp, #48
0e204     A7 14 02 FB | 	rdlong	arg02, fp
0e208     01 16 06 F6 | 	mov	arg03, #1
0e20c     00 18 06 F6 | 	mov	arg04, #0
0e210     0B 00 00 FF 
0e214     C0 E4 05 F1 | 	add	objptr, ##5824
0e218                 | '     return fill(addr, pattern, count, listPtr, 4)
0e218     04 1A 06 F6 | 	mov	arg05, #4
0e21c     C8 C0 B0 FD | 	call	#_psram_spin2_fill
0e220     0B 00 00 FF 
0e224     C0 E4 85 F1 | 	sub	objptr, ##5824
0e228     08 00 90 FD | 	jmp	#LR__1072
0e22c                 | LR__1071
0e22c     2F 12 06 F6 | 	mov	arg01, #47
0e230     D4 94 B0 FD | 	call	#_printerror
0e234                 | LR__1072
0e234                 | LR__1073
0e234     A7 F0 03 F6 | 	mov	ptra, fp
0e238     B2 00 A0 FD | 	call	#popregs_
0e23c                 | _do_assign_ret
0e23c     2D 00 64 FD | 	ret
0e240                 | 
0e240                 | ' 
0e240                 | ' 
0e240                 | ' ' --------------------- Read a variable and push to the stack
0e240                 | ' 
0e240                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0e240                 | ' 
0e240                 | ' sub do_getvar
0e240                 | _do_getvar
0e240     04 4A 05 F6 | 	mov	COUNT_, #4
0e244     A8 00 A0 FD | 	call	#pushregs_
0e248     3C F0 07 F1 | 	add	ptra, #60
0e24c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0e24c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0e24c     6A 00 00 FF 
0e250     04 E4 05 F1 | 	add	objptr, ##54276
0e254     F2 1E 02 FB | 	rdlong	local01, objptr
0e258     0F 17 02 F6 | 	mov	arg03, local01
0e25c     01 16 66 F0 | 	shl	arg03, #1
0e260     0F 17 02 F1 | 	add	arg03, local01
0e264     02 16 66 F0 | 	shl	arg03, #2
0e268     03 00 00 FF 
0e26c     04 E4 85 F1 | 	sub	objptr, ##1540
0e270     F2 16 02 F1 | 	add	arg03, objptr
0e274     04 16 06 F1 | 	add	arg03, #4
0e278     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0e27c     67 00 00 FF 
0e280     00 E4 85 F1 | 	sub	objptr, ##52736
0e284     C4 00 90 5D |  if_ne	jmp	#LR__1081
0e288     6A 00 00 FF 
0e28c     04 E4 05 F1 | 	add	objptr, ##54276
0e290     F2 1E 02 FB | 	rdlong	local01, objptr
0e294     0F 13 02 F6 | 	mov	arg01, local01
0e298     01 12 66 F0 | 	shl	arg01, #1
0e29c     0F 13 02 F1 | 	add	arg01, local01
0e2a0     02 12 66 F0 | 	shl	arg01, #2
0e2a4     03 00 00 FF 
0e2a8     04 E4 85 F1 | 	sub	objptr, ##1540
0e2ac     F2 12 02 F1 | 	add	arg01, objptr
0e2b0     09 1F 02 FB | 	rdlong	local01, arg01
0e2b4     04 1E 66 F0 | 	shl	local01, #4
0e2b8     32 00 00 FF 
0e2bc     74 E4 85 F1 | 	sub	objptr, ##25716
0e2c0     F2 1E 02 F1 | 	add	local01, objptr
0e2c4     04 1E 06 F1 | 	add	local01, #4
0e2c8     0F 13 02 FB | 	rdlong	arg01, local01
0e2cc     04 1E 06 F1 | 	add	local01, #4
0e2d0     0F 1F 02 FB | 	rdlong	local01, local01
0e2d4     A7 12 62 FC | 	wrlong	arg01, fp
0e2d8     04 4E 05 F1 | 	add	fp, #4
0e2dc     A7 1E 62 FC | 	wrlong	local01, fp
0e2e0     35 00 00 FF 
0e2e4     78 E4 05 F1 | 	add	objptr, ##27256
0e2e8     F2 1E 02 FB | 	rdlong	local01, objptr
0e2ec     0F 13 02 F6 | 	mov	arg01, local01
0e2f0     01 12 66 F0 | 	shl	arg01, #1
0e2f4     0F 13 02 F1 | 	add	arg01, local01
0e2f8     02 12 66 F0 | 	shl	arg01, #2
0e2fc     03 00 00 FF 
0e300     04 E4 85 F1 | 	sub	objptr, ##1540
0e304     F2 12 02 F1 | 	add	arg01, objptr
0e308     09 1F 02 FB | 	rdlong	local01, arg01
0e30c     04 1E 66 F0 | 	shl	local01, #4
0e310     32 00 00 FF 
0e314     74 E4 85 F1 | 	sub	objptr, ##25716
0e318     F2 1E 02 F1 | 	add	local01, objptr
0e31c     0C 1E 06 F1 | 	add	local01, #12
0e320     0F 1F 02 FB | 	rdlong	local01, local01
0e324     04 4E 05 F1 | 	add	fp, #4
0e328     A7 1E 62 FC | 	wrlong	local01, fp
0e32c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0e32c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0e32c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0e32c     08 4E 85 F1 | 	sub	fp, #8
0e330     00 1F 16 F2 | 	cmp	local01, #256 wc
0e334     34 00 00 FF 
0e338     8C E5 85 F1 | 	sub	objptr, ##27020
0e33c     0C 00 90 3D |  if_ae	jmp	#LR__1080
0e340     A7 12 02 F6 | 	mov	arg01, fp
0e344     48 B8 BF FD | 	call	#_push
0e348     A0 04 90 FD | 	jmp	#LR__1102
0e34c                 | LR__1080
0e34c                 | LR__1081
0e34c     6A 00 00 FF 
0e350     04 E4 05 F1 | 	add	objptr, ##54276
0e354     F2 16 02 FB | 	rdlong	arg03, objptr
0e358     0B 15 02 F6 | 	mov	arg02, arg03
0e35c     01 14 66 F0 | 	shl	arg02, #1
0e360     0B 15 02 F1 | 	add	arg02, arg03
0e364     02 14 66 F0 | 	shl	arg02, #2
0e368     03 00 00 FF 
0e36c     04 E4 85 F1 | 	sub	objptr, ##1540
0e370     F2 14 02 F1 | 	add	arg02, objptr
0e374     0A 17 02 FB | 	rdlong	arg03, arg02
0e378     04 16 66 F0 | 	shl	arg03, #4
0e37c     32 00 00 FF 
0e380     74 E4 85 F1 | 	sub	objptr, ##25716
0e384     F2 16 02 F1 | 	add	arg03, objptr
0e388     04 16 06 F1 | 	add	arg03, #4
0e38c     0B 13 02 FB | 	rdlong	arg01, arg03
0e390     0C 4E 05 F1 | 	add	fp, #12
0e394     A7 12 62 FC | 	wrlong	arg01, fp
0e398     0C 4E 85 F1 | 	sub	fp, #12
0e39c     34 00 00 FF 
0e3a0     8C E5 85 F1 | 	sub	objptr, ##27020
0e3a4     1C 95 B0 FD | 	call	#_pslpeek
0e3a8     FD FA 31 F9 | 	getword	result1, result1, #0
0e3ac     10 4E 05 F1 | 	add	fp, #16
0e3b0     A7 FA 61 FC | 	wrlong	result1, fp
0e3b4     6A 00 00 FF 
0e3b8     04 E4 05 F1 | 	add	objptr, ##54276
0e3bc     F2 16 02 FB | 	rdlong	arg03, objptr
0e3c0     0B 15 02 F6 | 	mov	arg02, arg03
0e3c4     01 14 66 F0 | 	shl	arg02, #1
0e3c8     0B 15 02 F1 | 	add	arg02, arg03
0e3cc     02 14 66 F0 | 	shl	arg02, #2
0e3d0     03 00 00 FF 
0e3d4     04 E4 85 F1 | 	sub	objptr, ##1540
0e3d8     F2 14 02 F1 | 	add	arg02, objptr
0e3dc     04 14 06 F1 | 	add	arg02, #4
0e3e0     0A 17 02 FB | 	rdlong	arg03, arg02
0e3e4     04 4E 05 F1 | 	add	fp, #4
0e3e8     A7 16 62 FC | 	wrlong	arg03, fp
0e3ec     08 4E 85 F1 | 	sub	fp, #8
0e3f0     A7 12 02 FB | 	rdlong	arg01, fp
0e3f4     0C 4E 85 F1 | 	sub	fp, #12
0e3f8     02 12 06 F1 | 	add	arg01, #2
0e3fc     67 00 00 FF 
0e400     00 E4 85 F1 | 	sub	objptr, ##52736
0e404     64 94 B0 FD | 	call	#_pspeek
0e408     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e40c     18 4E 05 F1 | 	add	fp, #24
0e410     A7 FA 61 FC | 	wrlong	result1, fp
0e414     0C 4E 85 F1 | 	sub	fp, #12
0e418     A7 12 02 FB | 	rdlong	arg01, fp
0e41c     0C 4E 85 F1 | 	sub	fp, #12
0e420     04 12 06 F1 | 	add	arg01, #4
0e424     9C 94 B0 FD | 	call	#_pslpeek
0e428     1C 4E 05 F1 | 	add	fp, #28
0e42c     A7 FA 61 FC | 	wrlong	result1, fp
0e430     10 4E 85 F1 | 	sub	fp, #16
0e434     A7 12 02 FB | 	rdlong	arg01, fp
0e438     0C 4E 85 F1 | 	sub	fp, #12
0e43c     08 12 06 F1 | 	add	arg01, #8
0e440     80 94 B0 FD | 	call	#_pslpeek
0e444     20 4E 05 F1 | 	add	fp, #32
0e448     A7 FA 61 FC | 	wrlong	result1, fp
0e44c     14 4E 85 F1 | 	sub	fp, #20
0e450     A7 12 02 FB | 	rdlong	arg01, fp
0e454     0C 4E 85 F1 | 	sub	fp, #12
0e458     0C 12 06 F1 | 	add	arg01, #12
0e45c     64 94 B0 FD | 	call	#_pslpeek
0e460     24 4E 05 F1 | 	add	fp, #36
0e464     A7 FA 61 FC | 	wrlong	result1, fp
0e468                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0e468                 | ' esize=pspeek(arrptr+2)
0e468                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0e468                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0e468                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0e468                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0e468     10 4E 85 F1 | 	sub	fp, #16
0e46c     A7 16 02 FB | 	rdlong	arg03, fp
0e470     14 4E 85 F1 | 	sub	fp, #20
0e474     03 16 16 F2 | 	cmp	arg03, #3 wc
0e478     38 00 90 CD |  if_b	jmp	#LR__1082
0e47c     78 B6 BF FD | 	call	#_pop
0e480     FF 16 02 F6 | 	mov	arg03, result3
0e484     A7 FA 61 FC | 	wrlong	result1, fp
0e488     04 4E 05 F1 | 	add	fp, #4
0e48c     A7 FC 61 FC | 	wrlong	result2, fp
0e490     04 4E 05 F1 | 	add	fp, #4
0e494     A7 16 62 FC | 	wrlong	arg03, fp
0e498     08 4E 85 F1 | 	sub	fp, #8
0e49c     A7 12 02 F6 | 	mov	arg01, fp
0e4a0     18 3A B0 FD | 	call	#_converttoint
0e4a4     30 4E 05 F1 | 	add	fp, #48
0e4a8     A7 FA 61 FC | 	wrlong	result1, fp
0e4ac     30 4E 85 F1 | 	sub	fp, #48
0e4b0     0C 00 90 FD | 	jmp	#LR__1083
0e4b4                 | LR__1082
0e4b4     30 4E 05 F1 | 	add	fp, #48
0e4b8     A7 00 68 FC | 	wrlong	#0, fp
0e4bc     30 4E 85 F1 | 	sub	fp, #48
0e4c0                 | LR__1083
0e4c0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0e4c0     14 4E 05 F1 | 	add	fp, #20
0e4c4     A7 16 02 FB | 	rdlong	arg03, fp
0e4c8     14 4E 85 F1 | 	sub	fp, #20
0e4cc     02 16 16 F2 | 	cmp	arg03, #2 wc
0e4d0     38 00 90 CD |  if_b	jmp	#LR__1084
0e4d4     20 B6 BF FD | 	call	#_pop
0e4d8     FF 16 02 F6 | 	mov	arg03, result3
0e4dc     A7 FA 61 FC | 	wrlong	result1, fp
0e4e0     04 4E 05 F1 | 	add	fp, #4
0e4e4     A7 FC 61 FC | 	wrlong	result2, fp
0e4e8     04 4E 05 F1 | 	add	fp, #4
0e4ec     A7 16 62 FC | 	wrlong	arg03, fp
0e4f0     08 4E 85 F1 | 	sub	fp, #8
0e4f4     A7 12 02 F6 | 	mov	arg01, fp
0e4f8     C0 39 B0 FD | 	call	#_converttoint
0e4fc     2C 4E 05 F1 | 	add	fp, #44
0e500     A7 FA 61 FC | 	wrlong	result1, fp
0e504     2C 4E 85 F1 | 	sub	fp, #44
0e508     0C 00 90 FD | 	jmp	#LR__1085
0e50c                 | LR__1084
0e50c     2C 4E 05 F1 | 	add	fp, #44
0e510     A7 00 68 FC | 	wrlong	#0, fp
0e514     2C 4E 85 F1 | 	sub	fp, #44
0e518                 | LR__1085
0e518                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0e518     14 4E 05 F1 | 	add	fp, #20
0e51c     A7 16 02 FB | 	rdlong	arg03, fp
0e520     14 4E 85 F1 | 	sub	fp, #20
0e524     01 16 16 F2 | 	cmp	arg03, #1 wc
0e528     38 00 90 CD |  if_b	jmp	#LR__1086
0e52c     C8 B5 BF FD | 	call	#_pop
0e530     FF 16 02 F6 | 	mov	arg03, result3
0e534     A7 FA 61 FC | 	wrlong	result1, fp
0e538     04 4E 05 F1 | 	add	fp, #4
0e53c     A7 FC 61 FC | 	wrlong	result2, fp
0e540     04 4E 05 F1 | 	add	fp, #4
0e544     A7 16 62 FC | 	wrlong	arg03, fp
0e548     08 4E 85 F1 | 	sub	fp, #8
0e54c     A7 12 02 F6 | 	mov	arg01, fp
0e550     68 39 B0 FD | 	call	#_converttoint
0e554     28 4E 05 F1 | 	add	fp, #40
0e558     A7 FA 61 FC | 	wrlong	result1, fp
0e55c     28 4E 85 F1 | 	sub	fp, #40
0e560     0C 00 90 FD | 	jmp	#LR__1087
0e564                 | LR__1086
0e564     28 4E 05 F1 | 	add	fp, #40
0e568     A7 00 68 FC | 	wrlong	#0, fp
0e56c     28 4E 85 F1 | 	sub	fp, #40
0e570                 | LR__1087
0e570     0C 4E 05 F1 | 	add	fp, #12
0e574     A7 20 02 FB | 	rdlong	local02, fp
0e578     1C 4E 05 F1 | 	add	fp, #28
0e57c     A7 22 02 FB | 	rdlong	local03, fp
0e580     04 4E 05 F1 | 	add	fp, #4
0e584     A7 FC 01 FB | 	rdlong	result2, fp
0e588     10 4E 85 F1 | 	sub	fp, #16
0e58c     A7 FE 01 FB | 	rdlong	result3, fp
0e590     FF FC 01 FD | 	qmul	result2, result3
0e594     10 20 06 F1 | 	add	local02, #16
0e598     14 4E 05 F1 | 	add	fp, #20
0e59c     A7 FC 01 FB | 	rdlong	result2, fp
0e5a0     18 FA 61 FD | 	getqx	result1
0e5a4     FF FC 01 FD | 	qmul	result2, result3
0e5a8     FD 22 02 F1 | 	add	local03, result1
0e5ac     10 4E 85 F1 | 	sub	fp, #16
0e5b0     A7 FE 01 FB | 	rdlong	result3, fp
0e5b4     18 FC 61 FD | 	getqx	result2
0e5b8     FF FC 01 FD | 	qmul	result2, result3
0e5bc     08 4E 85 F1 | 	sub	fp, #8
0e5c0     A7 FE 01 FB | 	rdlong	result3, fp
0e5c4     18 FC 61 FD | 	getqx	result2
0e5c8     FE 22 02 F1 | 	add	local03, result2
0e5cc     FF 22 02 FD | 	qmul	local03, result3
0e5d0     1C 4E 05 F1 | 	add	fp, #28
0e5d4                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0e5d4                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0e5d4                 | ' 
0e5d4                 | ' select case vartype
0e5d4     18 FC 61 FD | 	getqx	result2
0e5d8     FE 20 02 F1 | 	add	local02, result2
0e5dc     A7 20 62 FC | 	wrlong	local02, fp
0e5e0     24 4E 85 F1 | 	sub	fp, #36
0e5e4     A7 24 02 FB | 	rdlong	local04, fp
0e5e8     10 4E 85 F1 | 	sub	fp, #16
0e5ec     00 25 86 F1 | 	sub	local04, #256
0e5f0     0C 24 26 F3 | 	fle	local04, #12
0e5f4     30 24 62 FD | 	jmprel	local04
0e5f8                 | LR__1088
0e5f8     30 00 90 FD | 	jmp	#LR__1089
0e5fc     58 00 90 FD | 	jmp	#LR__1090
0e600     8C 00 90 FD | 	jmp	#LR__1091
0e604     AC 00 90 FD | 	jmp	#LR__1092
0e608     E8 00 90 FD | 	jmp	#LR__1093
0e60c     08 01 90 FD | 	jmp	#LR__1094
0e610     24 01 90 FD | 	jmp	#LR__1095
0e614     40 01 90 FD | 	jmp	#LR__1096
0e618     50 01 90 FD | 	jmp	#LR__1097
0e61c     60 01 90 FD | 	jmp	#LR__1098
0e620     7C 01 90 FD | 	jmp	#LR__1099
0e624     8C 01 90 FD | 	jmp	#LR__1100
0e628     B8 01 90 FD | 	jmp	#LR__1101
0e62c                 | LR__1089
0e62c     A7 12 02 F6 | 	mov	arg01, fp
0e630     34 4E 05 F1 | 	add	fp, #52
0e634     A7 14 02 FB | 	rdlong	arg02, fp
0e638     34 4E 85 F1 | 	sub	fp, #52
0e63c     0C 16 06 F6 | 	mov	arg03, #12
0e640     0B 00 00 FF 
0e644     C0 E4 05 F1 | 	add	objptr, ##5824
0e648     64 BB B0 FD | 	call	#_psram_spin2_read1
0e64c     0B 00 00 FF 
0e650     C0 E4 85 F1 | 	sub	objptr, ##5824
0e654     8C 01 90 FD | 	jmp	#LR__1101
0e658                 | LR__1090
0e658     08 4E 05 F1 | 	add	fp, #8
0e65c     A7 38 68 FC | 	wrlong	#28, fp
0e660     2C 4E 05 F1 | 	add	fp, #44
0e664     A7 12 02 FB | 	rdlong	arg01, fp
0e668     34 4E 85 F1 | 	sub	fp, #52
0e66c     FC 91 B0 FD | 	call	#_pspeek
0e670     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e674     A7 FA 61 FC | 	wrlong	result1, fp
0e678     80 FA 15 F2 | 	cmp	result1, #128 wc
0e67c     00 1F 66 36 |  if_ae	neg	local01, #256
0e680     A7 22 02 3B |  if_ae	rdlong	local03, fp
0e684     11 1F 42 35 |  if_ae	or	local01, local03
0e688     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0e68c     54 01 90 FD | 	jmp	#LR__1101
0e690                 | LR__1091
0e690     08 4E 05 F1 | 	add	fp, #8
0e694     A7 3A 68 FC | 	wrlong	#29, fp
0e698     2C 4E 05 F1 | 	add	fp, #44
0e69c     A7 12 02 FB | 	rdlong	arg01, fp
0e6a0     34 4E 85 F1 | 	sub	fp, #52
0e6a4     C4 91 B0 FD | 	call	#_pspeek
0e6a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e6ac     A7 FA 61 FC | 	wrlong	result1, fp
0e6b0     30 01 90 FD | 	jmp	#LR__1101
0e6b4                 | LR__1092
0e6b4     08 4E 05 F1 | 	add	fp, #8
0e6b8     A7 38 68 FC | 	wrlong	#28, fp
0e6bc     2C 4E 05 F1 | 	add	fp, #44
0e6c0     A7 12 02 FB | 	rdlong	arg01, fp
0e6c4     34 4E 85 F1 | 	sub	fp, #52
0e6c8     F8 91 B0 FD | 	call	#_pslpeek
0e6cc     FD FA 31 F9 | 	getword	result1, result1, #0
0e6d0     A7 FA 61 FC | 	wrlong	result1, fp
0e6d4     40 00 00 FF 
0e6d8     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0e6dc     FF 7F 00 3F 
0e6e0     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0e6e4     A7 22 02 3B |  if_ae	rdlong	local03, fp
0e6e8     11 1F 42 35 |  if_ae	or	local01, local03
0e6ec     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0e6f0     F0 00 90 FD | 	jmp	#LR__1101
0e6f4                 | LR__1093
0e6f4     08 4E 05 F1 | 	add	fp, #8
0e6f8     A7 3A 68 FC | 	wrlong	#29, fp
0e6fc     2C 4E 05 F1 | 	add	fp, #44
0e700     A7 12 02 FB | 	rdlong	arg01, fp
0e704     34 4E 85 F1 | 	sub	fp, #52
0e708     B8 91 B0 FD | 	call	#_pslpeek
0e70c     FD FA 31 F9 | 	getword	result1, result1, #0
0e710     A7 FA 61 FC | 	wrlong	result1, fp
0e714     CC 00 90 FD | 	jmp	#LR__1101
0e718                 | LR__1094
0e718     08 4E 05 F1 | 	add	fp, #8
0e71c     A7 38 68 FC | 	wrlong	#28, fp
0e720     2C 4E 05 F1 | 	add	fp, #44
0e724     A7 12 02 FB | 	rdlong	arg01, fp
0e728     34 4E 85 F1 | 	sub	fp, #52
0e72c     94 91 B0 FD | 	call	#_pslpeek
0e730     A7 FA 61 FC | 	wrlong	result1, fp
0e734     AC 00 90 FD | 	jmp	#LR__1101
0e738                 | LR__1095
0e738     08 4E 05 F1 | 	add	fp, #8
0e73c     A7 3A 68 FC | 	wrlong	#29, fp
0e740     2C 4E 05 F1 | 	add	fp, #44
0e744     A7 12 02 FB | 	rdlong	arg01, fp
0e748     34 4E 85 F1 | 	sub	fp, #52
0e74c     74 91 B0 FD | 	call	#_pslpeek
0e750     A7 FA 61 FC | 	wrlong	result1, fp
0e754     8C 00 90 FD | 	jmp	#LR__1101
0e758                 | LR__1096
0e758     08 4E 05 F1 | 	add	fp, #8
0e75c     A7 FE 69 FC | 	wrlong	#255, fp
0e760     08 4E 85 F1 | 	sub	fp, #8
0e764     A7 60 68 FC | 	wrlong	#48, fp
0e768     78 00 90 FD | 	jmp	#LR__1101
0e76c                 | LR__1097
0e76c     08 4E 05 F1 | 	add	fp, #8
0e770     A7 FE 69 FC | 	wrlong	#255, fp
0e774     08 4E 85 F1 | 	sub	fp, #8
0e778     A7 60 68 FC | 	wrlong	#48, fp
0e77c     64 00 90 FD | 	jmp	#LR__1101
0e780                 | LR__1098
0e780     08 4E 05 F1 | 	add	fp, #8
0e784     A7 3C 68 FC | 	wrlong	#30, fp
0e788     2C 4E 05 F1 | 	add	fp, #44
0e78c     A7 12 02 FB | 	rdlong	arg01, fp
0e790     34 4E 85 F1 | 	sub	fp, #52
0e794     2C 91 B0 FD | 	call	#_pslpeek
0e798     A7 FA 61 FC | 	wrlong	result1, fp
0e79c     44 00 90 FD | 	jmp	#LR__1101
0e7a0                 | LR__1099
0e7a0     08 4E 05 F1 | 	add	fp, #8
0e7a4     A7 FE 69 FC | 	wrlong	#255, fp
0e7a8     08 4E 85 F1 | 	sub	fp, #8
0e7ac     A7 60 68 FC | 	wrlong	#48, fp
0e7b0     30 00 90 FD | 	jmp	#LR__1101
0e7b4                 | LR__1100
0e7b4     08 4E 05 F1 | 	add	fp, #8
0e7b8     A7 3E 68 FC | 	wrlong	#31, fp
0e7bc     2C 4E 05 F1 | 	add	fp, #44
0e7c0     A7 12 02 FB | 	rdlong	arg01, fp
0e7c4     34 4E 85 F1 | 	sub	fp, #52
0e7c8     F8 90 B0 FD | 	call	#_pslpeek
0e7cc     A7 FA 61 FC | 	wrlong	result1, fp
0e7d0     00 04 00 FF 
0e7d4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0e7d8     08 4E 05 31 |  if_ae	add	fp, #8
0e7dc     A7 56 68 3C |  if_ae	wrlong	#43, fp
0e7e0     08 4E 85 31 |  if_ae	sub	fp, #8
0e7e4                 | LR__1101
0e7e4     A7 12 02 F6 | 	mov	arg01, fp
0e7e8     A4 B3 BF FD | 	call	#_push
0e7ec                 | LR__1102
0e7ec     A7 F0 03 F6 | 	mov	ptra, fp
0e7f0     B2 00 A0 FD | 	call	#popregs_
0e7f4                 | _do_getvar_ret
0e7f4     2D 00 64 FD | 	ret
0e7f8                 | 
0e7f8                 | ' 
0e7f8                 | ' '------------------------ Operators 
0e7f8                 | ' 
0e7f8                 | ' sub do_plus 
0e7f8                 | _do_plus
0e7f8     05 4A 05 F6 | 	mov	COUNT_, #5
0e7fc     A8 00 A0 FD | 	call	#pushregs_
0e800     18 F0 07 F1 | 	add	ptra, #24
0e804     F0 B2 BF FD | 	call	#_pop
0e808     FD 1E 02 F6 | 	mov	local01, result1
0e80c     FE 20 02 F6 | 	mov	local02, result2
0e810     FF 22 02 F6 | 	mov	local03, result3
0e814     0C 4E 05 F1 | 	add	fp, #12
0e818     A7 1E 62 FC | 	wrlong	local01, fp
0e81c     04 4E 05 F1 | 	add	fp, #4
0e820     A7 20 62 FC | 	wrlong	local02, fp
0e824     04 4E 05 F1 | 	add	fp, #4
0e828     A7 22 62 FC | 	wrlong	local03, fp
0e82c     14 4E 85 F1 | 	sub	fp, #20
0e830     C4 B2 BF FD | 	call	#_pop
0e834     FF 22 02 F6 | 	mov	local03, result3
0e838     A7 FA 61 FC | 	wrlong	result1, fp
0e83c     04 4E 05 F1 | 	add	fp, #4
0e840     A7 FC 61 FC | 	wrlong	result2, fp
0e844     04 4E 05 F1 | 	add	fp, #4
0e848     A7 22 62 FC | 	wrlong	local03, fp
0e84c                 | ' 
0e84c                 | ' t2=pop()
0e84c                 | ' t1=pop()
0e84c                 | ' 
0e84c                 | ' 
0e84c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0e84c     08 4E 85 F1 | 	sub	fp, #8
0e850     1D 22 0E F2 | 	cmp	local03, #29 wz
0e854     14 4E 05 A1 |  if_e	add	fp, #20
0e858     A7 24 02 AB |  if_e	rdlong	local04, fp
0e85c     14 4E 85 A1 |  if_e	sub	fp, #20
0e860     12 23 02 A6 |  if_e	mov	local03, local04
0e864     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e868     1C 00 90 5D |  if_ne	jmp	#LR__1110
0e86c     A7 1E 02 FB | 	rdlong	local01, fp
0e870     0C 4E 05 F1 | 	add	fp, #12
0e874     A7 20 02 FB | 	rdlong	local02, fp
0e878     0C 4E 85 F1 | 	sub	fp, #12
0e87c     10 1F 02 F1 | 	add	local01, local02
0e880     A7 1E 62 FC | 	wrlong	local01, fp
0e884     48 04 90 FD | 	jmp	#LR__1125
0e888                 | LR__1110
0e888                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0e888     08 4E 05 F1 | 	add	fp, #8
0e88c     A7 1E 02 FB | 	rdlong	local01, fp
0e890     08 4E 85 F1 | 	sub	fp, #8
0e894     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e898     14 4E 05 A1 |  if_e	add	fp, #20
0e89c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e8a0     14 4E 85 A1 |  if_e	sub	fp, #20
0e8a4     12 23 02 A6 |  if_e	mov	local03, local04
0e8a8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e8ac     28 00 90 5D |  if_ne	jmp	#LR__1111
0e8b0     A7 1E 02 FB | 	rdlong	local01, fp
0e8b4     0C 4E 05 F1 | 	add	fp, #12
0e8b8     A7 20 02 FB | 	rdlong	local02, fp
0e8bc     0C 4E 85 F1 | 	sub	fp, #12
0e8c0     10 1F 02 F1 | 	add	local01, local02
0e8c4     A7 1E 62 FC | 	wrlong	local01, fp
0e8c8     08 4E 05 F1 | 	add	fp, #8
0e8cc     A7 38 68 FC | 	wrlong	#28, fp
0e8d0     08 4E 85 F1 | 	sub	fp, #8
0e8d4     F8 03 90 FD | 	jmp	#LR__1125
0e8d8                 | LR__1111
0e8d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0e8d8     08 4E 05 F1 | 	add	fp, #8
0e8dc     A7 1E 02 FB | 	rdlong	local01, fp
0e8e0     08 4E 85 F1 | 	sub	fp, #8
0e8e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e8e8     14 4E 05 A1 |  if_e	add	fp, #20
0e8ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0e8f0     14 4E 85 A1 |  if_e	sub	fp, #20
0e8f4     12 23 02 A6 |  if_e	mov	local03, local04
0e8f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e8fc     30 00 90 5D |  if_ne	jmp	#LR__1112
0e900     A7 12 02 FB | 	rdlong	arg01, fp
0e904     30 EB B0 FD | 	call	#__system___float_fromuns
0e908     FD 12 02 F6 | 	mov	arg01, result1
0e90c     0C 4E 05 F1 | 	add	fp, #12
0e910     A7 14 02 FB | 	rdlong	arg02, fp
0e914     0C 4E 85 F1 | 	sub	fp, #12
0e918     50 EB B0 FD | 	call	#__system___float_add
0e91c     A7 FA 61 FC | 	wrlong	result1, fp
0e920     08 4E 05 F1 | 	add	fp, #8
0e924     A7 3C 68 FC | 	wrlong	#30, fp
0e928     08 4E 85 F1 | 	sub	fp, #8
0e92c     A0 03 90 FD | 	jmp	#LR__1125
0e930                 | LR__1112
0e930                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0e930     08 4E 05 F1 | 	add	fp, #8
0e934     A7 1E 02 FB | 	rdlong	local01, fp
0e938     08 4E 85 F1 | 	sub	fp, #8
0e93c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e940     14 4E 05 A1 |  if_e	add	fp, #20
0e944     A7 24 02 AB |  if_e	rdlong	local04, fp
0e948     14 4E 85 A1 |  if_e	sub	fp, #20
0e94c     12 23 02 A6 |  if_e	mov	local03, local04
0e950     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e954     1C 00 90 5D |  if_ne	jmp	#LR__1113
0e958     A7 1E 02 FB | 	rdlong	local01, fp
0e95c     0C 4E 05 F1 | 	add	fp, #12
0e960     A7 20 02 FB | 	rdlong	local02, fp
0e964     0C 4E 85 F1 | 	sub	fp, #12
0e968     10 1F 02 F1 | 	add	local01, local02
0e96c     A7 1E 62 FC | 	wrlong	local01, fp
0e970     5C 03 90 FD | 	jmp	#LR__1125
0e974                 | LR__1113
0e974                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0e974     08 4E 05 F1 | 	add	fp, #8
0e978     A7 1E 02 FB | 	rdlong	local01, fp
0e97c     08 4E 85 F1 | 	sub	fp, #8
0e980     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e984     14 4E 05 A1 |  if_e	add	fp, #20
0e988     A7 24 02 AB |  if_e	rdlong	local04, fp
0e98c     14 4E 85 A1 |  if_e	sub	fp, #20
0e990     12 23 02 A6 |  if_e	mov	local03, local04
0e994     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e998     1C 00 90 5D |  if_ne	jmp	#LR__1114
0e99c     A7 1E 02 FB | 	rdlong	local01, fp
0e9a0     0C 4E 05 F1 | 	add	fp, #12
0e9a4     A7 20 02 FB | 	rdlong	local02, fp
0e9a8     0C 4E 85 F1 | 	sub	fp, #12
0e9ac     10 1F 02 F1 | 	add	local01, local02
0e9b0     A7 1E 62 FC | 	wrlong	local01, fp
0e9b4     18 03 90 FD | 	jmp	#LR__1125
0e9b8                 | LR__1114
0e9b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0e9b8     08 4E 05 F1 | 	add	fp, #8
0e9bc     A7 1E 02 FB | 	rdlong	local01, fp
0e9c0     08 4E 85 F1 | 	sub	fp, #8
0e9c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e9c8     14 4E 05 A1 |  if_e	add	fp, #20
0e9cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e9d0     14 4E 85 A1 |  if_e	sub	fp, #20
0e9d4     12 23 02 A6 |  if_e	mov	local03, local04
0e9d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e9dc     40 00 90 5D |  if_ne	jmp	#LR__1115
0e9e0     A7 12 02 FB | 	rdlong	arg01, fp
0e9e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e9e8     1F 26 C6 C9 |  if_b	decod	local05, #31
0e9ec     00 26 06 36 |  if_ae	mov	local05, #0
0e9f0     44 EA B0 FD | 	call	#__system___float_fromuns
0e9f4     13 FB 61 F5 | 	xor	result1, local05
0e9f8     FD 12 02 F6 | 	mov	arg01, result1
0e9fc     0C 4E 05 F1 | 	add	fp, #12
0ea00     A7 14 02 FB | 	rdlong	arg02, fp
0ea04     0C 4E 85 F1 | 	sub	fp, #12
0ea08     60 EA B0 FD | 	call	#__system___float_add
0ea0c     A7 FA 61 FC | 	wrlong	result1, fp
0ea10     08 4E 05 F1 | 	add	fp, #8
0ea14     A7 3C 68 FC | 	wrlong	#30, fp
0ea18     08 4E 85 F1 | 	sub	fp, #8
0ea1c     B0 02 90 FD | 	jmp	#LR__1125
0ea20                 | LR__1115
0ea20                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0ea20     08 4E 05 F1 | 	add	fp, #8
0ea24     A7 1E 02 FB | 	rdlong	local01, fp
0ea28     08 4E 85 F1 | 	sub	fp, #8
0ea2c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ea30     14 4E 05 A1 |  if_e	add	fp, #20
0ea34     A7 24 02 AB |  if_e	rdlong	local04, fp
0ea38     14 4E 85 A1 |  if_e	sub	fp, #20
0ea3c     12 23 02 A6 |  if_e	mov	local03, local04
0ea40     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ea44     28 00 90 5D |  if_ne	jmp	#LR__1116
0ea48     A7 1E 02 FB | 	rdlong	local01, fp
0ea4c     0C 4E 05 F1 | 	add	fp, #12
0ea50     A7 12 02 FB | 	rdlong	arg01, fp
0ea54     0C 4E 85 F1 | 	sub	fp, #12
0ea58     DC E9 B0 FD | 	call	#__system___float_fromuns
0ea5c     FD 14 02 F6 | 	mov	arg02, result1
0ea60     0F 13 02 F6 | 	mov	arg01, local01
0ea64     04 EA B0 FD | 	call	#__system___float_add
0ea68     A7 FA 61 FC | 	wrlong	result1, fp
0ea6c     60 02 90 FD | 	jmp	#LR__1125
0ea70                 | LR__1116
0ea70                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0ea70     08 4E 05 F1 | 	add	fp, #8
0ea74     A7 1E 02 FB | 	rdlong	local01, fp
0ea78     08 4E 85 F1 | 	sub	fp, #8
0ea7c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ea80     14 4E 05 A1 |  if_e	add	fp, #20
0ea84     A7 24 02 AB |  if_e	rdlong	local04, fp
0ea88     14 4E 85 A1 |  if_e	sub	fp, #20
0ea8c     12 23 02 A6 |  if_e	mov	local03, local04
0ea90     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ea94     38 00 90 5D |  if_ne	jmp	#LR__1117
0ea98     A7 1E 02 FB | 	rdlong	local01, fp
0ea9c     0C 4E 05 F1 | 	add	fp, #12
0eaa0     A7 12 02 FB | 	rdlong	arg01, fp
0eaa4     0C 4E 85 F1 | 	sub	fp, #12
0eaa8     09 13 52 F6 | 	abs	arg01, arg01 wc
0eaac     1F 26 C6 C9 |  if_b	decod	local05, #31
0eab0     00 26 06 36 |  if_ae	mov	local05, #0
0eab4     80 E9 B0 FD | 	call	#__system___float_fromuns
0eab8     13 FB 61 F5 | 	xor	result1, local05
0eabc     FD 14 02 F6 | 	mov	arg02, result1
0eac0     0F 13 02 F6 | 	mov	arg01, local01
0eac4     A4 E9 B0 FD | 	call	#__system___float_add
0eac8     A7 FA 61 FC | 	wrlong	result1, fp
0eacc     00 02 90 FD | 	jmp	#LR__1125
0ead0                 | LR__1117
0ead0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0ead0     08 4E 05 F1 | 	add	fp, #8
0ead4     A7 1E 02 FB | 	rdlong	local01, fp
0ead8     08 4E 85 F1 | 	sub	fp, #8
0eadc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0eae0     14 4E 05 A1 |  if_e	add	fp, #20
0eae4     A7 24 02 AB |  if_e	rdlong	local04, fp
0eae8     14 4E 85 A1 |  if_e	sub	fp, #20
0eaec     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0eaf0     1C 00 90 5D |  if_ne	jmp	#LR__1118
0eaf4     A7 12 02 FB | 	rdlong	arg01, fp
0eaf8     0C 4E 05 F1 | 	add	fp, #12
0eafc     A7 14 02 FB | 	rdlong	arg02, fp
0eb00     0C 4E 85 F1 | 	sub	fp, #12
0eb04     64 E9 B0 FD | 	call	#__system___float_add
0eb08     A7 FA 61 FC | 	wrlong	result1, fp
0eb0c     C0 01 90 FD | 	jmp	#LR__1125
0eb10                 | LR__1118
0eb10                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0eb10     08 4E 05 F1 | 	add	fp, #8
0eb14     A7 1E 02 FB | 	rdlong	local01, fp
0eb18     08 4E 85 F1 | 	sub	fp, #8
0eb1c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0eb20     24 00 90 5D |  if_ne	jmp	#LR__1119
0eb24     14 4E 05 F1 | 	add	fp, #20
0eb28     A7 22 02 FB | 	rdlong	local03, fp
0eb2c     14 4E 85 F1 | 	sub	fp, #20
0eb30     1F 22 0E F2 | 	cmp	local03, #31 wz
0eb34     A7 04 68 5C |  if_ne	wrlong	#2, fp
0eb38     08 4E 05 51 |  if_ne	add	fp, #8
0eb3c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0eb40     08 4E 85 51 |  if_ne	sub	fp, #8
0eb44     88 01 90 5D |  if_ne	jmp	#LR__1125
0eb48                 | LR__1119
0eb48                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0eb48     14 4E 05 F1 | 	add	fp, #20
0eb4c     A7 1E 02 FB | 	rdlong	local01, fp
0eb50     14 4E 85 F1 | 	sub	fp, #20
0eb54     1F 1E 0E F2 | 	cmp	local01, #31 wz
0eb58     24 00 90 5D |  if_ne	jmp	#LR__1120
0eb5c     08 4E 05 F1 | 	add	fp, #8
0eb60     A7 22 02 FB | 	rdlong	local03, fp
0eb64     08 4E 85 F1 | 	sub	fp, #8
0eb68     1F 22 0E F2 | 	cmp	local03, #31 wz
0eb6c     A7 04 68 5C |  if_ne	wrlong	#2, fp
0eb70     08 4E 05 51 |  if_ne	add	fp, #8
0eb74     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0eb78     08 4E 85 51 |  if_ne	sub	fp, #8
0eb7c     50 01 90 5D |  if_ne	jmp	#LR__1125
0eb80                 | LR__1120
0eb80                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0eb80     08 4E 05 F1 | 	add	fp, #8
0eb84     A7 1E 02 FB | 	rdlong	local01, fp
0eb88     08 4E 85 F1 | 	sub	fp, #8
0eb8c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0eb90     14 4E 05 A1 |  if_e	add	fp, #20
0eb94     A7 22 02 AB |  if_e	rdlong	local03, fp
0eb98     14 4E 85 A1 |  if_e	sub	fp, #20
0eb9c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0eba0     1C 00 90 5D |  if_ne	jmp	#LR__1121
0eba4     A7 12 02 FB | 	rdlong	arg01, fp
0eba8     0C 4E 05 F1 | 	add	fp, #12
0ebac     A7 14 02 FB | 	rdlong	arg02, fp
0ebb0     0C 4E 85 F1 | 	sub	fp, #12
0ebb4     BC C1 B0 FD | 	call	#__system___string_concat
0ebb8     A7 FA 61 FC | 	wrlong	result1, fp
0ebbc     10 01 90 FD | 	jmp	#LR__1125
0ebc0                 | LR__1121
0ebc0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0ebc0     08 4E 05 F1 | 	add	fp, #8
0ebc4     A7 1E 02 FB | 	rdlong	local01, fp
0ebc8     08 4E 85 F1 | 	sub	fp, #8
0ebcc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ebd0     14 4E 05 A1 |  if_e	add	fp, #20
0ebd4     A7 22 02 AB |  if_e	rdlong	local03, fp
0ebd8     14 4E 85 A1 |  if_e	sub	fp, #20
0ebdc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ebe0     30 00 90 5D |  if_ne	jmp	#LR__1122
0ebe4     A7 12 02 FB | 	rdlong	arg01, fp
0ebe8     9C EE BF FD | 	call	#_convertstring
0ebec     FD 12 02 F6 | 	mov	arg01, result1
0ebf0     0C 4E 05 F1 | 	add	fp, #12
0ebf4     A7 14 02 FB | 	rdlong	arg02, fp
0ebf8     0C 4E 85 F1 | 	sub	fp, #12
0ebfc     74 C1 B0 FD | 	call	#__system___string_concat
0ec00     A7 FA 61 FC | 	wrlong	result1, fp
0ec04     08 4E 05 F1 | 	add	fp, #8
0ec08     A7 3E 68 FC | 	wrlong	#31, fp
0ec0c     08 4E 85 F1 | 	sub	fp, #8
0ec10     BC 00 90 FD | 	jmp	#LR__1125
0ec14                 | LR__1122
0ec14                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0ec14     08 4E 05 F1 | 	add	fp, #8
0ec18     A7 1E 02 FB | 	rdlong	local01, fp
0ec1c     08 4E 85 F1 | 	sub	fp, #8
0ec20     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ec24     14 4E 05 A1 |  if_e	add	fp, #20
0ec28     A7 22 02 AB |  if_e	rdlong	local03, fp
0ec2c     14 4E 85 A1 |  if_e	sub	fp, #20
0ec30     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ec34     28 00 90 5D |  if_ne	jmp	#LR__1123
0ec38     A7 1E 02 FB | 	rdlong	local01, fp
0ec3c     0C 4E 05 F1 | 	add	fp, #12
0ec40     A7 12 02 FB | 	rdlong	arg01, fp
0ec44     0C 4E 85 F1 | 	sub	fp, #12
0ec48     3C EE BF FD | 	call	#_convertstring
0ec4c     FD 14 02 F6 | 	mov	arg02, result1
0ec50     0F 13 02 F6 | 	mov	arg01, local01
0ec54     1C C1 B0 FD | 	call	#__system___string_concat
0ec58     A7 FA 61 FC | 	wrlong	result1, fp
0ec5c     70 00 90 FD | 	jmp	#LR__1125
0ec60                 | LR__1123
0ec60                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0ec60     08 4E 05 F1 | 	add	fp, #8
0ec64     A7 1E 02 FB | 	rdlong	local01, fp
0ec68     08 4E 85 F1 | 	sub	fp, #8
0ec6c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ec70     14 4E 05 A1 |  if_e	add	fp, #20
0ec74     A7 22 02 AB |  if_e	rdlong	local03, fp
0ec78     14 4E 85 A1 |  if_e	sub	fp, #20
0ec7c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ec80     3C 00 90 5D |  if_ne	jmp	#LR__1124
0ec84     A7 12 02 FB | 	rdlong	arg01, fp
0ec88     FC ED BF FD | 	call	#_convertstring
0ec8c     FD 1E 02 F6 | 	mov	local01, result1
0ec90     0C 4E 05 F1 | 	add	fp, #12
0ec94     A7 12 02 FB | 	rdlong	arg01, fp
0ec98     0C 4E 85 F1 | 	sub	fp, #12
0ec9c     E8 ED BF FD | 	call	#_convertstring
0eca0     FD 14 02 F6 | 	mov	arg02, result1
0eca4     0F 13 02 F6 | 	mov	arg01, local01
0eca8     C8 C0 B0 FD | 	call	#__system___string_concat
0ecac     A7 FA 61 FC | 	wrlong	result1, fp
0ecb0     08 4E 05 F1 | 	add	fp, #8
0ecb4     A7 3E 68 FC | 	wrlong	#31, fp
0ecb8     08 4E 85 F1 | 	sub	fp, #8
0ecbc     10 00 90 FD | 	jmp	#LR__1125
0ecc0                 | LR__1124
0ecc0     A7 08 68 FC | 	wrlong	#4, fp
0ecc4     08 4E 05 F1 | 	add	fp, #8
0ecc8     A7 FE 69 FC | 	wrlong	#255, fp
0eccc     08 4E 85 F1 | 	sub	fp, #8
0ecd0                 | LR__1125
0ecd0     A7 12 02 F6 | 	mov	arg01, fp
0ecd4     B8 AE BF FD | 	call	#_push
0ecd8     A7 F0 03 F6 | 	mov	ptra, fp
0ecdc     B2 00 A0 FD | 	call	#popregs_
0ece0                 | _do_plus_ret
0ece0     2D 00 64 FD | 	ret
0ece4                 | 
0ece4                 | ' 
0ece4                 | ' sub do_minus
0ece4                 | _do_minus
0ece4     05 4A 05 F6 | 	mov	COUNT_, #5
0ece8     A8 00 A0 FD | 	call	#pushregs_
0ecec     18 F0 07 F1 | 	add	ptra, #24
0ecf0     04 AE BF FD | 	call	#_pop
0ecf4     FD 1E 02 F6 | 	mov	local01, result1
0ecf8     FE 20 02 F6 | 	mov	local02, result2
0ecfc     FF 22 02 F6 | 	mov	local03, result3
0ed00     0C 4E 05 F1 | 	add	fp, #12
0ed04     A7 1E 62 FC | 	wrlong	local01, fp
0ed08     04 4E 05 F1 | 	add	fp, #4
0ed0c     A7 20 62 FC | 	wrlong	local02, fp
0ed10     04 4E 05 F1 | 	add	fp, #4
0ed14     A7 22 62 FC | 	wrlong	local03, fp
0ed18     14 4E 85 F1 | 	sub	fp, #20
0ed1c     D8 AD BF FD | 	call	#_pop
0ed20     FF 22 02 F6 | 	mov	local03, result3
0ed24     A7 FA 61 FC | 	wrlong	result1, fp
0ed28     04 4E 05 F1 | 	add	fp, #4
0ed2c     A7 FC 61 FC | 	wrlong	result2, fp
0ed30     04 4E 05 F1 | 	add	fp, #4
0ed34     A7 22 62 FC | 	wrlong	local03, fp
0ed38                 | ' 
0ed38                 | ' t2=pop()
0ed38                 | ' t1=pop()
0ed38                 | ' 
0ed38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0ed38     08 4E 85 F1 | 	sub	fp, #8
0ed3c     1D 22 0E F2 | 	cmp	local03, #29 wz
0ed40     14 4E 05 A1 |  if_e	add	fp, #20
0ed44     A7 24 02 AB |  if_e	rdlong	local04, fp
0ed48     14 4E 85 A1 |  if_e	sub	fp, #20
0ed4c     12 23 02 A6 |  if_e	mov	local03, local04
0ed50     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ed54     5C 00 90 5D |  if_ne	jmp	#LR__1131
0ed58                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0ed58     0C 4E 05 F1 | 	add	fp, #12
0ed5c     A7 1E 02 FB | 	rdlong	local01, fp
0ed60     0C 4E 85 F1 | 	sub	fp, #12
0ed64     A7 22 02 FB | 	rdlong	local03, fp
0ed68     11 1F 12 F2 | 	cmp	local01, local03 wc
0ed6c     1C 00 90 3D |  if_ae	jmp	#LR__1130
0ed70     A7 1E 02 FB | 	rdlong	local01, fp
0ed74     0C 4E 05 F1 | 	add	fp, #12
0ed78     A7 20 02 FB | 	rdlong	local02, fp
0ed7c     0C 4E 85 F1 | 	sub	fp, #12
0ed80     10 1F 82 F1 | 	sub	local01, local02
0ed84     A7 1E 62 FC | 	wrlong	local01, fp
0ed88     F4 02 90 FD | 	jmp	#LR__1140
0ed8c                 | LR__1130
0ed8c     A7 1E 02 FB | 	rdlong	local01, fp
0ed90     0C 4E 05 F1 | 	add	fp, #12
0ed94     A7 20 02 FB | 	rdlong	local02, fp
0ed98     0C 4E 85 F1 | 	sub	fp, #12
0ed9c     10 1F 82 F1 | 	sub	local01, local02
0eda0     A7 1E 62 FC | 	wrlong	local01, fp
0eda4     08 4E 05 F1 | 	add	fp, #8
0eda8     A7 38 68 FC | 	wrlong	#28, fp
0edac     08 4E 85 F1 | 	sub	fp, #8
0edb0     CC 02 90 FD | 	jmp	#LR__1140
0edb4                 | LR__1131
0edb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0edb4     08 4E 05 F1 | 	add	fp, #8
0edb8     A7 1E 02 FB | 	rdlong	local01, fp
0edbc     08 4E 85 F1 | 	sub	fp, #8
0edc0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0edc4     14 4E 05 A1 |  if_e	add	fp, #20
0edc8     A7 24 02 AB |  if_e	rdlong	local04, fp
0edcc     14 4E 85 A1 |  if_e	sub	fp, #20
0edd0     12 23 02 A6 |  if_e	mov	local03, local04
0edd4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0edd8     28 00 90 5D |  if_ne	jmp	#LR__1132
0eddc     A7 1E 02 FB | 	rdlong	local01, fp
0ede0     0C 4E 05 F1 | 	add	fp, #12
0ede4     A7 20 02 FB | 	rdlong	local02, fp
0ede8     0C 4E 85 F1 | 	sub	fp, #12
0edec     10 1F 82 F1 | 	sub	local01, local02
0edf0     A7 1E 62 FC | 	wrlong	local01, fp
0edf4     08 4E 05 F1 | 	add	fp, #8
0edf8     A7 38 68 FC | 	wrlong	#28, fp
0edfc     08 4E 85 F1 | 	sub	fp, #8
0ee00     7C 02 90 FD | 	jmp	#LR__1140
0ee04                 | LR__1132
0ee04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0ee04     08 4E 05 F1 | 	add	fp, #8
0ee08     A7 1E 02 FB | 	rdlong	local01, fp
0ee0c     08 4E 85 F1 | 	sub	fp, #8
0ee10     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ee14     14 4E 05 A1 |  if_e	add	fp, #20
0ee18     A7 24 02 AB |  if_e	rdlong	local04, fp
0ee1c     14 4E 85 A1 |  if_e	sub	fp, #20
0ee20     12 23 02 A6 |  if_e	mov	local03, local04
0ee24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ee28     34 00 90 5D |  if_ne	jmp	#LR__1133
0ee2c     A7 12 02 FB | 	rdlong	arg01, fp
0ee30     04 E6 B0 FD | 	call	#__system___float_fromuns
0ee34     FD 12 02 F6 | 	mov	arg01, result1
0ee38     0C 4E 05 F1 | 	add	fp, #12
0ee3c     A7 14 02 FB | 	rdlong	arg02, fp
0ee40     0C 4E 85 F1 | 	sub	fp, #12
0ee44     1F 14 E6 F4 | 	bitnot	arg02, #31
0ee48     20 E6 B0 FD | 	call	#__system___float_add
0ee4c     A7 FA 61 FC | 	wrlong	result1, fp
0ee50     08 4E 05 F1 | 	add	fp, #8
0ee54     A7 3C 68 FC | 	wrlong	#30, fp
0ee58     08 4E 85 F1 | 	sub	fp, #8
0ee5c     20 02 90 FD | 	jmp	#LR__1140
0ee60                 | LR__1133
0ee60                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0ee60     08 4E 05 F1 | 	add	fp, #8
0ee64     A7 1E 02 FB | 	rdlong	local01, fp
0ee68     08 4E 85 F1 | 	sub	fp, #8
0ee6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ee70     14 4E 05 A1 |  if_e	add	fp, #20
0ee74     A7 24 02 AB |  if_e	rdlong	local04, fp
0ee78     14 4E 85 A1 |  if_e	sub	fp, #20
0ee7c     12 23 02 A6 |  if_e	mov	local03, local04
0ee80     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ee84     1C 00 90 5D |  if_ne	jmp	#LR__1134
0ee88     A7 1E 02 FB | 	rdlong	local01, fp
0ee8c     0C 4E 05 F1 | 	add	fp, #12
0ee90     A7 20 02 FB | 	rdlong	local02, fp
0ee94     0C 4E 85 F1 | 	sub	fp, #12
0ee98     10 1F 82 F1 | 	sub	local01, local02
0ee9c     A7 1E 62 FC | 	wrlong	local01, fp
0eea0     DC 01 90 FD | 	jmp	#LR__1140
0eea4                 | LR__1134
0eea4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0eea4     08 4E 05 F1 | 	add	fp, #8
0eea8     A7 1E 02 FB | 	rdlong	local01, fp
0eeac     08 4E 85 F1 | 	sub	fp, #8
0eeb0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0eeb4     14 4E 05 A1 |  if_e	add	fp, #20
0eeb8     A7 24 02 AB |  if_e	rdlong	local04, fp
0eebc     14 4E 85 A1 |  if_e	sub	fp, #20
0eec0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0eec4     1C 00 90 5D |  if_ne	jmp	#LR__1135
0eec8     A7 1E 02 FB | 	rdlong	local01, fp
0eecc     0C 4E 05 F1 | 	add	fp, #12
0eed0     A7 20 02 FB | 	rdlong	local02, fp
0eed4     0C 4E 85 F1 | 	sub	fp, #12
0eed8     10 1F 82 F1 | 	sub	local01, local02
0eedc     A7 1E 62 FC | 	wrlong	local01, fp
0eee0     9C 01 90 FD | 	jmp	#LR__1140
0eee4                 | LR__1135
0eee4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0eee4     08 4E 05 F1 | 	add	fp, #8
0eee8     A7 1E 02 FB | 	rdlong	local01, fp
0eeec     08 4E 85 F1 | 	sub	fp, #8
0eef0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0eef4     14 4E 05 A1 |  if_e	add	fp, #20
0eef8     A7 22 02 AB |  if_e	rdlong	local03, fp
0eefc     14 4E 85 A1 |  if_e	sub	fp, #20
0ef00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ef04     44 00 90 5D |  if_ne	jmp	#LR__1136
0ef08     A7 12 02 FB | 	rdlong	arg01, fp
0ef0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef10     1F 26 C6 C9 |  if_b	decod	local05, #31
0ef14     00 26 06 36 |  if_ae	mov	local05, #0
0ef18     1C E5 B0 FD | 	call	#__system___float_fromuns
0ef1c     13 FB 61 F5 | 	xor	result1, local05
0ef20     FD 12 02 F6 | 	mov	arg01, result1
0ef24     0C 4E 05 F1 | 	add	fp, #12
0ef28     A7 14 02 FB | 	rdlong	arg02, fp
0ef2c     0C 4E 85 F1 | 	sub	fp, #12
0ef30     1F 14 E6 F4 | 	bitnot	arg02, #31
0ef34     34 E5 B0 FD | 	call	#__system___float_add
0ef38     A7 FA 61 FC | 	wrlong	result1, fp
0ef3c     08 4E 05 F1 | 	add	fp, #8
0ef40     A7 3C 68 FC | 	wrlong	#30, fp
0ef44     08 4E 85 F1 | 	sub	fp, #8
0ef48     34 01 90 FD | 	jmp	#LR__1140
0ef4c                 | LR__1136
0ef4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0ef4c     08 4E 05 F1 | 	add	fp, #8
0ef50     A7 1E 02 FB | 	rdlong	local01, fp
0ef54     08 4E 85 F1 | 	sub	fp, #8
0ef58     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ef5c     14 4E 05 A1 |  if_e	add	fp, #20
0ef60     A7 22 02 AB |  if_e	rdlong	local03, fp
0ef64     14 4E 85 A1 |  if_e	sub	fp, #20
0ef68     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ef6c     2C 00 90 5D |  if_ne	jmp	#LR__1137
0ef70     A7 1E 02 FB | 	rdlong	local01, fp
0ef74     0C 4E 05 F1 | 	add	fp, #12
0ef78     A7 12 02 FB | 	rdlong	arg01, fp
0ef7c     0C 4E 85 F1 | 	sub	fp, #12
0ef80     B4 E4 B0 FD | 	call	#__system___float_fromuns
0ef84     FD 14 02 F6 | 	mov	arg02, result1
0ef88     0F 13 02 F6 | 	mov	arg01, local01
0ef8c     1F 14 E6 F4 | 	bitnot	arg02, #31
0ef90     D8 E4 B0 FD | 	call	#__system___float_add
0ef94     A7 FA 61 FC | 	wrlong	result1, fp
0ef98     E4 00 90 FD | 	jmp	#LR__1140
0ef9c                 | LR__1137
0ef9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0ef9c     08 4E 05 F1 | 	add	fp, #8
0efa0     A7 1E 02 FB | 	rdlong	local01, fp
0efa4     08 4E 85 F1 | 	sub	fp, #8
0efa8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0efac     14 4E 05 A1 |  if_e	add	fp, #20
0efb0     A7 22 02 AB |  if_e	rdlong	local03, fp
0efb4     14 4E 85 A1 |  if_e	sub	fp, #20
0efb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0efbc     3C 00 90 5D |  if_ne	jmp	#LR__1138
0efc0     A7 1E 02 FB | 	rdlong	local01, fp
0efc4     0C 4E 05 F1 | 	add	fp, #12
0efc8     A7 12 02 FB | 	rdlong	arg01, fp
0efcc     0C 4E 85 F1 | 	sub	fp, #12
0efd0     09 13 52 F6 | 	abs	arg01, arg01 wc
0efd4     1F 26 C6 C9 |  if_b	decod	local05, #31
0efd8     00 26 06 36 |  if_ae	mov	local05, #0
0efdc     58 E4 B0 FD | 	call	#__system___float_fromuns
0efe0     13 FB 61 F5 | 	xor	result1, local05
0efe4     FD 14 02 F6 | 	mov	arg02, result1
0efe8     0F 13 02 F6 | 	mov	arg01, local01
0efec     1F 14 E6 F4 | 	bitnot	arg02, #31
0eff0     78 E4 B0 FD | 	call	#__system___float_add
0eff4     A7 FA 61 FC | 	wrlong	result1, fp
0eff8     84 00 90 FD | 	jmp	#LR__1140
0effc                 | LR__1138
0effc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0effc     08 4E 05 F1 | 	add	fp, #8
0f000     A7 1E 02 FB | 	rdlong	local01, fp
0f004     08 4E 85 F1 | 	sub	fp, #8
0f008     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f00c     14 4E 05 A1 |  if_e	add	fp, #20
0f010     A7 22 02 AB |  if_e	rdlong	local03, fp
0f014     14 4E 85 A1 |  if_e	sub	fp, #20
0f018     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f01c     20 00 90 5D |  if_ne	jmp	#LR__1139
0f020     A7 12 02 FB | 	rdlong	arg01, fp
0f024     0C 4E 05 F1 | 	add	fp, #12
0f028     A7 14 02 FB | 	rdlong	arg02, fp
0f02c     0C 4E 85 F1 | 	sub	fp, #12
0f030     1F 14 E6 F4 | 	bitnot	arg02, #31
0f034     34 E4 B0 FD | 	call	#__system___float_add
0f038     A7 FA 61 FC | 	wrlong	result1, fp
0f03c     40 00 90 FD | 	jmp	#LR__1140
0f040                 | LR__1139
0f040                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0f040     08 4E 05 F1 | 	add	fp, #8
0f044     A7 1E 02 FB | 	rdlong	local01, fp
0f048     08 4E 85 F1 | 	sub	fp, #8
0f04c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f050     14 4E 05 51 |  if_ne	add	fp, #20
0f054     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f058     14 4E 85 51 |  if_ne	sub	fp, #20
0f05c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0f060     A7 06 68 AC |  if_e	wrlong	#3, fp
0f064     08 4E 05 A1 |  if_e	add	fp, #8
0f068     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f06c     08 4E 85 A1 |  if_e	sub	fp, #8
0f070     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0f074     08 4E 05 51 |  if_ne	add	fp, #8
0f078     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f07c     08 4E 85 51 |  if_ne	sub	fp, #8
0f080                 | LR__1140
0f080     A7 12 02 F6 | 	mov	arg01, fp
0f084     08 AB BF FD | 	call	#_push
0f088     A7 F0 03 F6 | 	mov	ptra, fp
0f08c     B2 00 A0 FD | 	call	#popregs_
0f090                 | _do_minus_ret
0f090     2D 00 64 FD | 	ret
0f094                 | 
0f094                 | ' 
0f094                 | ' sub do_and 
0f094                 | _do_and
0f094     03 4A 05 F6 | 	mov	COUNT_, #3
0f098     A8 00 A0 FD | 	call	#pushregs_
0f09c     18 F0 07 F1 | 	add	ptra, #24
0f0a0     54 AA BF FD | 	call	#_pop
0f0a4     FD 12 02 F6 | 	mov	arg01, result1
0f0a8     FE 1E 02 F6 | 	mov	local01, result2
0f0ac     FF 20 02 F6 | 	mov	local02, result3
0f0b0     0C 4E 05 F1 | 	add	fp, #12
0f0b4     A7 12 62 FC | 	wrlong	arg01, fp
0f0b8     04 4E 05 F1 | 	add	fp, #4
0f0bc     A7 1E 62 FC | 	wrlong	local01, fp
0f0c0     04 4E 05 F1 | 	add	fp, #4
0f0c4     A7 20 62 FC | 	wrlong	local02, fp
0f0c8     14 4E 85 F1 | 	sub	fp, #20
0f0cc     28 AA BF FD | 	call	#_pop
0f0d0     FF 22 02 F6 | 	mov	local03, result3
0f0d4     A7 FA 61 FC | 	wrlong	result1, fp
0f0d8     04 4E 05 F1 | 	add	fp, #4
0f0dc     A7 FC 61 FC | 	wrlong	result2, fp
0f0e0     04 4E 05 F1 | 	add	fp, #4
0f0e4     A7 22 62 FC | 	wrlong	local03, fp
0f0e8                 | ' 
0f0e8                 | ' t2=pop()
0f0e8                 | ' t1=pop()
0f0e8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0f0e8     08 4E 85 F1 | 	sub	fp, #8
0f0ec     1C 22 0E F2 | 	cmp	local03, #28 wz
0f0f0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f0f4     A7 22 62 AC |  if_e	wrlong	local03, fp
0f0f8     08 4E 05 A1 |  if_e	add	fp, #8
0f0fc     A7 3A 68 AC |  if_e	wrlong	#29, fp
0f100     08 4E 85 A1 |  if_e	sub	fp, #8
0f104                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0f104     14 4E 05 F1 | 	add	fp, #20
0f108     A7 22 02 FB | 	rdlong	local03, fp
0f10c     14 4E 85 F1 | 	sub	fp, #20
0f110     1C 22 0E F2 | 	cmp	local03, #28 wz
0f114     18 00 90 5D |  if_ne	jmp	#LR__1150
0f118     0C 4E 05 F1 | 	add	fp, #12
0f11c     A7 22 02 FB | 	rdlong	local03, fp
0f120     A7 22 62 FC | 	wrlong	local03, fp
0f124     08 4E 05 F1 | 	add	fp, #8
0f128     A7 3A 68 FC | 	wrlong	#29, fp
0f12c     14 4E 85 F1 | 	sub	fp, #20
0f130                 | LR__1150
0f130                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0f130     08 4E 05 F1 | 	add	fp, #8
0f134     A7 22 02 FB | 	rdlong	local03, fp
0f138     08 4E 85 F1 | 	sub	fp, #8
0f13c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f140     14 4E 05 51 |  if_ne	add	fp, #20
0f144     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f148     14 4E 85 51 |  if_ne	sub	fp, #20
0f14c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0f150     08 4E 05 51 |  if_ne	add	fp, #8
0f154     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f158     08 4E 85 51 |  if_ne	sub	fp, #8
0f15c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0f160     14 4E 05 51 |  if_ne	add	fp, #20
0f164     14 4E 85 51 |  if_ne	sub	fp, #20
0f168     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0f16c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0f170     08 4E 05 A1 |  if_e	add	fp, #8
0f174     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f178     08 4E 85 A1 |  if_e	sub	fp, #8
0f17c     18 00 90 AD |  if_e	jmp	#LR__1151
0f180     A7 22 02 FB | 	rdlong	local03, fp
0f184     0C 4E 05 F1 | 	add	fp, #12
0f188     A7 1E 02 FB | 	rdlong	local01, fp
0f18c     0C 4E 85 F1 | 	sub	fp, #12
0f190     0F 23 02 F5 | 	and	local03, local01
0f194     A7 22 62 FC | 	wrlong	local03, fp
0f198                 | LR__1151
0f198     A7 12 02 F6 | 	mov	arg01, fp
0f19c     F0 A9 BF FD | 	call	#_push
0f1a0     A7 F0 03 F6 | 	mov	ptra, fp
0f1a4     B2 00 A0 FD | 	call	#popregs_
0f1a8                 | _do_and_ret
0f1a8     2D 00 64 FD | 	ret
0f1ac                 | 
0f1ac                 | ' 
0f1ac                 | ' sub do_or 
0f1ac                 | _do_or
0f1ac     03 4A 05 F6 | 	mov	COUNT_, #3
0f1b0     A8 00 A0 FD | 	call	#pushregs_
0f1b4     18 F0 07 F1 | 	add	ptra, #24
0f1b8     3C A9 BF FD | 	call	#_pop
0f1bc     FD 12 02 F6 | 	mov	arg01, result1
0f1c0     FE 1E 02 F6 | 	mov	local01, result2
0f1c4     FF 20 02 F6 | 	mov	local02, result3
0f1c8     0C 4E 05 F1 | 	add	fp, #12
0f1cc     A7 12 62 FC | 	wrlong	arg01, fp
0f1d0     04 4E 05 F1 | 	add	fp, #4
0f1d4     A7 1E 62 FC | 	wrlong	local01, fp
0f1d8     04 4E 05 F1 | 	add	fp, #4
0f1dc     A7 20 62 FC | 	wrlong	local02, fp
0f1e0     14 4E 85 F1 | 	sub	fp, #20
0f1e4     10 A9 BF FD | 	call	#_pop
0f1e8     FF 22 02 F6 | 	mov	local03, result3
0f1ec     A7 FA 61 FC | 	wrlong	result1, fp
0f1f0     04 4E 05 F1 | 	add	fp, #4
0f1f4     A7 FC 61 FC | 	wrlong	result2, fp
0f1f8     04 4E 05 F1 | 	add	fp, #4
0f1fc     A7 22 62 FC | 	wrlong	local03, fp
0f200                 | ' 
0f200                 | ' t2=pop()
0f200                 | ' t1=pop()
0f200                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0f200     08 4E 85 F1 | 	sub	fp, #8
0f204     1C 22 0E F2 | 	cmp	local03, #28 wz
0f208     A7 22 02 AB |  if_e	rdlong	local03, fp
0f20c     A7 22 62 AC |  if_e	wrlong	local03, fp
0f210     08 4E 05 A1 |  if_e	add	fp, #8
0f214     A7 3A 68 AC |  if_e	wrlong	#29, fp
0f218     08 4E 85 A1 |  if_e	sub	fp, #8
0f21c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0f21c     14 4E 05 F1 | 	add	fp, #20
0f220     A7 22 02 FB | 	rdlong	local03, fp
0f224     14 4E 85 F1 | 	sub	fp, #20
0f228     1C 22 0E F2 | 	cmp	local03, #28 wz
0f22c     18 00 90 5D |  if_ne	jmp	#LR__1160
0f230     0C 4E 05 F1 | 	add	fp, #12
0f234     A7 22 02 FB | 	rdlong	local03, fp
0f238     A7 22 62 FC | 	wrlong	local03, fp
0f23c     08 4E 05 F1 | 	add	fp, #8
0f240     A7 3A 68 FC | 	wrlong	#29, fp
0f244     14 4E 85 F1 | 	sub	fp, #20
0f248                 | LR__1160
0f248                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0f248     08 4E 05 F1 | 	add	fp, #8
0f24c     A7 22 02 FB | 	rdlong	local03, fp
0f250     08 4E 85 F1 | 	sub	fp, #8
0f254     1F 22 0E F2 | 	cmp	local03, #31 wz
0f258     14 4E 05 51 |  if_ne	add	fp, #20
0f25c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f260     14 4E 85 51 |  if_ne	sub	fp, #20
0f264     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0f268     08 4E 05 51 |  if_ne	add	fp, #8
0f26c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f270     08 4E 85 51 |  if_ne	sub	fp, #8
0f274     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0f278     14 4E 05 51 |  if_ne	add	fp, #20
0f27c     14 4E 85 51 |  if_ne	sub	fp, #20
0f280     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0f284     A7 0C 68 AC |  if_e	wrlong	#6, fp
0f288     08 4E 05 A1 |  if_e	add	fp, #8
0f28c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f290     08 4E 85 A1 |  if_e	sub	fp, #8
0f294     18 00 90 AD |  if_e	jmp	#LR__1161
0f298     A7 22 02 FB | 	rdlong	local03, fp
0f29c     0C 4E 05 F1 | 	add	fp, #12
0f2a0     A7 1E 02 FB | 	rdlong	local01, fp
0f2a4     0C 4E 85 F1 | 	sub	fp, #12
0f2a8     0F 23 42 F5 | 	or	local03, local01
0f2ac     A7 22 62 FC | 	wrlong	local03, fp
0f2b0                 | LR__1161
0f2b0     A7 12 02 F6 | 	mov	arg01, fp
0f2b4     D8 A8 BF FD | 	call	#_push
0f2b8     A7 F0 03 F6 | 	mov	ptra, fp
0f2bc     B2 00 A0 FD | 	call	#popregs_
0f2c0                 | _do_or_ret
0f2c0     2D 00 64 FD | 	ret
0f2c4                 | 
0f2c4                 | ' 
0f2c4                 | ' sub do_mul
0f2c4                 | _do_mul
0f2c4     05 4A 05 F6 | 	mov	COUNT_, #5
0f2c8     A8 00 A0 FD | 	call	#pushregs_
0f2cc     18 F0 07 F1 | 	add	ptra, #24
0f2d0     24 A8 BF FD | 	call	#_pop
0f2d4     FD 1E 02 F6 | 	mov	local01, result1
0f2d8     FE 20 02 F6 | 	mov	local02, result2
0f2dc     FF 22 02 F6 | 	mov	local03, result3
0f2e0     0C 4E 05 F1 | 	add	fp, #12
0f2e4     A7 1E 62 FC | 	wrlong	local01, fp
0f2e8     04 4E 05 F1 | 	add	fp, #4
0f2ec     A7 20 62 FC | 	wrlong	local02, fp
0f2f0     04 4E 05 F1 | 	add	fp, #4
0f2f4     A7 22 62 FC | 	wrlong	local03, fp
0f2f8     14 4E 85 F1 | 	sub	fp, #20
0f2fc     F8 A7 BF FD | 	call	#_pop
0f300     FF 22 02 F6 | 	mov	local03, result3
0f304     A7 FA 61 FC | 	wrlong	result1, fp
0f308     04 4E 05 F1 | 	add	fp, #4
0f30c     A7 FC 61 FC | 	wrlong	result2, fp
0f310     04 4E 05 F1 | 	add	fp, #4
0f314     A7 22 62 FC | 	wrlong	local03, fp
0f318                 | ' 
0f318                 | ' t2=pop()
0f318                 | ' t1=pop()
0f318                 | ' 
0f318                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0f318     08 4E 85 F1 | 	sub	fp, #8
0f31c     1D 22 0E F2 | 	cmp	local03, #29 wz
0f320     14 4E 05 A1 |  if_e	add	fp, #20
0f324     A7 24 02 AB |  if_e	rdlong	local04, fp
0f328     14 4E 85 A1 |  if_e	sub	fp, #20
0f32c     12 23 02 A6 |  if_e	mov	local03, local04
0f330     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f334     20 00 90 5D |  if_ne	jmp	#LR__1170
0f338     A7 20 02 FB | 	rdlong	local02, fp
0f33c     0C 4E 05 F1 | 	add	fp, #12
0f340     A7 22 02 FB | 	rdlong	local03, fp
0f344     11 21 02 FD | 	qmul	local02, local03
0f348     0C 4E 85 F1 | 	sub	fp, #12
0f34c     18 1E 62 FD | 	getqx	local01
0f350     A7 1E 62 FC | 	wrlong	local01, fp
0f354     C4 02 90 FD | 	jmp	#LR__1179
0f358                 | LR__1170
0f358                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0f358     08 4E 05 F1 | 	add	fp, #8
0f35c     A7 1E 02 FB | 	rdlong	local01, fp
0f360     08 4E 85 F1 | 	sub	fp, #8
0f364     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f368     14 4E 05 A1 |  if_e	add	fp, #20
0f36c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f370     14 4E 85 A1 |  if_e	sub	fp, #20
0f374     12 23 02 A6 |  if_e	mov	local03, local04
0f378     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f37c     2C 00 90 5D |  if_ne	jmp	#LR__1171
0f380     A7 20 02 FB | 	rdlong	local02, fp
0f384     0C 4E 05 F1 | 	add	fp, #12
0f388     A7 22 02 FB | 	rdlong	local03, fp
0f38c     11 21 02 FD | 	qmul	local02, local03
0f390     0C 4E 85 F1 | 	sub	fp, #12
0f394     18 1E 62 FD | 	getqx	local01
0f398     A7 1E 62 FC | 	wrlong	local01, fp
0f39c     08 4E 05 F1 | 	add	fp, #8
0f3a0     A7 38 68 FC | 	wrlong	#28, fp
0f3a4     08 4E 85 F1 | 	sub	fp, #8
0f3a8     70 02 90 FD | 	jmp	#LR__1179
0f3ac                 | LR__1171
0f3ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0f3ac     08 4E 05 F1 | 	add	fp, #8
0f3b0     A7 1E 02 FB | 	rdlong	local01, fp
0f3b4     08 4E 85 F1 | 	sub	fp, #8
0f3b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f3bc     14 4E 05 A1 |  if_e	add	fp, #20
0f3c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f3c4     14 4E 85 A1 |  if_e	sub	fp, #20
0f3c8     12 23 02 A6 |  if_e	mov	local03, local04
0f3cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f3d0     30 00 90 5D |  if_ne	jmp	#LR__1172
0f3d4     A7 12 02 FB | 	rdlong	arg01, fp
0f3d8     5C E0 B0 FD | 	call	#__system___float_fromuns
0f3dc     FD 12 02 F6 | 	mov	arg01, result1
0f3e0     0C 4E 05 F1 | 	add	fp, #12
0f3e4     A7 14 02 FB | 	rdlong	arg02, fp
0f3e8     0C 4E 85 F1 | 	sub	fp, #12
0f3ec     4C E4 B0 FD | 	call	#__system___float_mul
0f3f0     A7 FA 61 FC | 	wrlong	result1, fp
0f3f4     08 4E 05 F1 | 	add	fp, #8
0f3f8     A7 3C 68 FC | 	wrlong	#30, fp
0f3fc     08 4E 85 F1 | 	sub	fp, #8
0f400     18 02 90 FD | 	jmp	#LR__1179
0f404                 | LR__1172
0f404                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0f404     08 4E 05 F1 | 	add	fp, #8
0f408     A7 1E 02 FB | 	rdlong	local01, fp
0f40c     08 4E 85 F1 | 	sub	fp, #8
0f410     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f414     14 4E 05 A1 |  if_e	add	fp, #20
0f418     A7 24 02 AB |  if_e	rdlong	local04, fp
0f41c     14 4E 85 A1 |  if_e	sub	fp, #20
0f420     12 23 02 A6 |  if_e	mov	local03, local04
0f424     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f428     20 00 90 5D |  if_ne	jmp	#LR__1173
0f42c     A7 20 02 FB | 	rdlong	local02, fp
0f430     0C 4E 05 F1 | 	add	fp, #12
0f434     A7 22 02 FB | 	rdlong	local03, fp
0f438     11 21 02 FD | 	qmul	local02, local03
0f43c     0C 4E 85 F1 | 	sub	fp, #12
0f440     18 1E 62 FD | 	getqx	local01
0f444     A7 1E 62 FC | 	wrlong	local01, fp
0f448     D0 01 90 FD | 	jmp	#LR__1179
0f44c                 | LR__1173
0f44c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0f44c     08 4E 05 F1 | 	add	fp, #8
0f450     A7 1E 02 FB | 	rdlong	local01, fp
0f454     08 4E 85 F1 | 	sub	fp, #8
0f458     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f45c     14 4E 05 A1 |  if_e	add	fp, #20
0f460     A7 24 02 AB |  if_e	rdlong	local04, fp
0f464     14 4E 85 A1 |  if_e	sub	fp, #20
0f468     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0f46c     20 00 90 5D |  if_ne	jmp	#LR__1174
0f470     A7 20 02 FB | 	rdlong	local02, fp
0f474     0C 4E 05 F1 | 	add	fp, #12
0f478     A7 22 02 FB | 	rdlong	local03, fp
0f47c     11 21 02 FD | 	qmul	local02, local03
0f480     0C 4E 85 F1 | 	sub	fp, #12
0f484     18 1E 62 FD | 	getqx	local01
0f488     A7 1E 62 FC | 	wrlong	local01, fp
0f48c     8C 01 90 FD | 	jmp	#LR__1179
0f490                 | LR__1174
0f490                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0f490     08 4E 05 F1 | 	add	fp, #8
0f494     A7 1E 02 FB | 	rdlong	local01, fp
0f498     08 4E 85 F1 | 	sub	fp, #8
0f49c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f4a0     14 4E 05 A1 |  if_e	add	fp, #20
0f4a4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f4a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f4ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f4b0     40 00 90 5D |  if_ne	jmp	#LR__1175
0f4b4     A7 12 02 FB | 	rdlong	arg01, fp
0f4b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f4bc     1F 26 C6 C9 |  if_b	decod	local05, #31
0f4c0     00 26 06 36 |  if_ae	mov	local05, #0
0f4c4     70 DF B0 FD | 	call	#__system___float_fromuns
0f4c8     13 FB 61 F5 | 	xor	result1, local05
0f4cc     FD 12 02 F6 | 	mov	arg01, result1
0f4d0     0C 4E 05 F1 | 	add	fp, #12
0f4d4     A7 14 02 FB | 	rdlong	arg02, fp
0f4d8     0C 4E 85 F1 | 	sub	fp, #12
0f4dc     5C E3 B0 FD | 	call	#__system___float_mul
0f4e0     A7 FA 61 FC | 	wrlong	result1, fp
0f4e4     08 4E 05 F1 | 	add	fp, #8
0f4e8     A7 3C 68 FC | 	wrlong	#30, fp
0f4ec     08 4E 85 F1 | 	sub	fp, #8
0f4f0     28 01 90 FD | 	jmp	#LR__1179
0f4f4                 | LR__1175
0f4f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0f4f4     08 4E 05 F1 | 	add	fp, #8
0f4f8     A7 1E 02 FB | 	rdlong	local01, fp
0f4fc     08 4E 85 F1 | 	sub	fp, #8
0f500     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f504     14 4E 05 A1 |  if_e	add	fp, #20
0f508     A7 22 02 AB |  if_e	rdlong	local03, fp
0f50c     14 4E 85 A1 |  if_e	sub	fp, #20
0f510     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f514     28 00 90 5D |  if_ne	jmp	#LR__1176
0f518     A7 1E 02 FB | 	rdlong	local01, fp
0f51c     0C 4E 05 F1 | 	add	fp, #12
0f520     A7 12 02 FB | 	rdlong	arg01, fp
0f524     0C 4E 85 F1 | 	sub	fp, #12
0f528     0C DF B0 FD | 	call	#__system___float_fromuns
0f52c     FD 14 02 F6 | 	mov	arg02, result1
0f530     0F 13 02 F6 | 	mov	arg01, local01
0f534     04 E3 B0 FD | 	call	#__system___float_mul
0f538     A7 FA 61 FC | 	wrlong	result1, fp
0f53c     DC 00 90 FD | 	jmp	#LR__1179
0f540                 | LR__1176
0f540                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0f540     08 4E 05 F1 | 	add	fp, #8
0f544     A7 1E 02 FB | 	rdlong	local01, fp
0f548     08 4E 85 F1 | 	sub	fp, #8
0f54c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f550     14 4E 05 A1 |  if_e	add	fp, #20
0f554     A7 22 02 AB |  if_e	rdlong	local03, fp
0f558     14 4E 85 A1 |  if_e	sub	fp, #20
0f55c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f560     38 00 90 5D |  if_ne	jmp	#LR__1177
0f564     A7 1E 02 FB | 	rdlong	local01, fp
0f568     0C 4E 05 F1 | 	add	fp, #12
0f56c     A7 12 02 FB | 	rdlong	arg01, fp
0f570     0C 4E 85 F1 | 	sub	fp, #12
0f574     09 13 52 F6 | 	abs	arg01, arg01 wc
0f578     1F 26 C6 C9 |  if_b	decod	local05, #31
0f57c     00 26 06 36 |  if_ae	mov	local05, #0
0f580     B4 DE B0 FD | 	call	#__system___float_fromuns
0f584     13 FB 61 F5 | 	xor	result1, local05
0f588     FD 14 02 F6 | 	mov	arg02, result1
0f58c     0F 13 02 F6 | 	mov	arg01, local01
0f590     A8 E2 B0 FD | 	call	#__system___float_mul
0f594     A7 FA 61 FC | 	wrlong	result1, fp
0f598     80 00 90 FD | 	jmp	#LR__1179
0f59c                 | LR__1177
0f59c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0f59c     08 4E 05 F1 | 	add	fp, #8
0f5a0     A7 1E 02 FB | 	rdlong	local01, fp
0f5a4     08 4E 85 F1 | 	sub	fp, #8
0f5a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5ac     14 4E 05 A1 |  if_e	add	fp, #20
0f5b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f5b4     14 4E 85 A1 |  if_e	sub	fp, #20
0f5b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f5bc     1C 00 90 5D |  if_ne	jmp	#LR__1178
0f5c0     A7 12 02 FB | 	rdlong	arg01, fp
0f5c4     0C 4E 05 F1 | 	add	fp, #12
0f5c8     A7 14 02 FB | 	rdlong	arg02, fp
0f5cc     0C 4E 85 F1 | 	sub	fp, #12
0f5d0     68 E2 B0 FD | 	call	#__system___float_mul
0f5d4     A7 FA 61 FC | 	wrlong	result1, fp
0f5d8     40 00 90 FD | 	jmp	#LR__1179
0f5dc                 | LR__1178
0f5dc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0f5dc     08 4E 05 F1 | 	add	fp, #8
0f5e0     A7 1E 02 FB | 	rdlong	local01, fp
0f5e4     08 4E 85 F1 | 	sub	fp, #8
0f5e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f5ec     14 4E 05 51 |  if_ne	add	fp, #20
0f5f0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f5f4     14 4E 85 51 |  if_ne	sub	fp, #20
0f5f8     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0f5fc     A7 10 68 AC |  if_e	wrlong	#8, fp
0f600     08 4E 05 A1 |  if_e	add	fp, #8
0f604     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f608     08 4E 85 A1 |  if_e	sub	fp, #8
0f60c     A7 12 68 5C |  if_ne	wrlong	#9, fp
0f610     08 4E 05 51 |  if_ne	add	fp, #8
0f614     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f618     08 4E 85 51 |  if_ne	sub	fp, #8
0f61c                 | LR__1179
0f61c     A7 12 02 F6 | 	mov	arg01, fp
0f620     6C A5 BF FD | 	call	#_push
0f624     A7 F0 03 F6 | 	mov	ptra, fp
0f628     B2 00 A0 FD | 	call	#popregs_
0f62c                 | _do_mul_ret
0f62c     2D 00 64 FD | 	ret
0f630                 | 
0f630                 | ' 
0f630                 | ' sub do_div 
0f630                 | _do_div
0f630     01 4A 05 F6 | 	mov	COUNT_, #1
0f634     A8 00 A0 FD | 	call	#pushregs_
0f638     18 F0 07 F1 | 	add	ptra, #24
0f63c     B8 A4 BF FD | 	call	#_pop
0f640     FD 64 02 F6 | 	mov	muldivb_, result1
0f644     FE 62 02 F6 | 	mov	muldiva_, result2
0f648     FF 1E 02 F6 | 	mov	local01, result3
0f64c     0C 4E 05 F1 | 	add	fp, #12
0f650     A7 64 62 FC | 	wrlong	muldivb_, fp
0f654     04 4E 05 F1 | 	add	fp, #4
0f658     A7 62 62 FC | 	wrlong	muldiva_, fp
0f65c     04 4E 05 F1 | 	add	fp, #4
0f660     A7 1E 62 FC | 	wrlong	local01, fp
0f664     14 4E 85 F1 | 	sub	fp, #20
0f668     8C A4 BF FD | 	call	#_pop
0f66c     A7 FA 61 FC | 	wrlong	result1, fp
0f670     04 4E 05 F1 | 	add	fp, #4
0f674     A7 FC 61 FC | 	wrlong	result2, fp
0f678     04 4E 05 F1 | 	add	fp, #4
0f67c     A7 FE 61 FC | 	wrlong	result3, fp
0f680                 | ' 
0f680                 | ' t2=pop()
0f680                 | ' t1=pop()
0f680                 | ' 
0f680                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0f680     08 4E 85 F1 | 	sub	fp, #8
0f684     1F FE 0D F2 | 	cmp	result3, #31 wz
0f688     14 4E 05 51 |  if_ne	add	fp, #20
0f68c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0f690     14 4E 85 51 |  if_ne	sub	fp, #20
0f694     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0f698     A7 14 68 AC |  if_e	wrlong	#10, fp
0f69c     08 4E 05 A1 |  if_e	add	fp, #8
0f6a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f6a4     08 4E 85 A1 |  if_e	sub	fp, #8
0f6a8     90 01 90 AD |  if_e	jmp	#LR__1186
0f6ac                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0f6ac     08 4E 05 F1 | 	add	fp, #8
0f6b0     A7 64 02 FB | 	rdlong	muldivb_, fp
0f6b4     08 4E 85 F1 | 	sub	fp, #8
0f6b8     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0f6bc     1C 00 90 5D |  if_ne	jmp	#LR__1180
0f6c0     08 4E 05 F1 | 	add	fp, #8
0f6c4     A7 38 68 FC | 	wrlong	#28, fp
0f6c8     08 4E 85 F1 | 	sub	fp, #8
0f6cc     A7 12 02 FB | 	rdlong	arg01, fp
0f6d0     00 14 06 F6 | 	mov	arg02, #0
0f6d4     2C E6 B0 FD | 	call	#__system___float_tointeger
0f6d8     A7 FA 61 FC | 	wrlong	result1, fp
0f6dc                 | LR__1180
0f6dc                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0f6dc     14 4E 05 F1 | 	add	fp, #20
0f6e0     A7 64 02 FB | 	rdlong	muldivb_, fp
0f6e4     14 4E 85 F1 | 	sub	fp, #20
0f6e8     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0f6ec     28 00 90 5D |  if_ne	jmp	#LR__1181
0f6f0     14 4E 05 F1 | 	add	fp, #20
0f6f4     A7 38 68 FC | 	wrlong	#28, fp
0f6f8     08 4E 85 F1 | 	sub	fp, #8
0f6fc     A7 12 02 FB | 	rdlong	arg01, fp
0f700     0C 4E 85 F1 | 	sub	fp, #12
0f704     00 14 06 F6 | 	mov	arg02, #0
0f708     F8 E5 B0 FD | 	call	#__system___float_tointeger
0f70c     0C 4E 05 F1 | 	add	fp, #12
0f710     A7 FA 61 FC | 	wrlong	result1, fp
0f714     0C 4E 85 F1 | 	sub	fp, #12
0f718                 | LR__1181
0f718                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0f718     08 4E 05 F1 | 	add	fp, #8
0f71c     A7 64 02 FB | 	rdlong	muldivb_, fp
0f720     08 4E 85 F1 | 	sub	fp, #8
0f724     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0f728     14 4E 05 A1 |  if_e	add	fp, #20
0f72c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f730     14 4E 85 A1 |  if_e	sub	fp, #20
0f734     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0f738     20 00 90 5D |  if_ne	jmp	#LR__1182
0f73c     0C 4E 05 F1 | 	add	fp, #12
0f740     A7 1E 02 FB | 	rdlong	local01, fp
0f744     0C 4E 85 F1 | 	sub	fp, #12
0f748     A7 64 02 FB | 	rdlong	muldivb_, fp
0f74c     0F 65 12 FD | 	qdiv	muldivb_, local01
0f750     18 1E 62 FD | 	getqx	local01
0f754     A7 1E 62 FC | 	wrlong	local01, fp
0f758     E0 00 90 FD | 	jmp	#LR__1186
0f75c                 | LR__1182
0f75c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0f75c     08 4E 05 F1 | 	add	fp, #8
0f760     A7 64 02 FB | 	rdlong	muldivb_, fp
0f764     08 4E 85 F1 | 	sub	fp, #8
0f768     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0f76c     14 4E 05 A1 |  if_e	add	fp, #20
0f770     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f774     14 4E 85 A1 |  if_e	sub	fp, #20
0f778     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0f77c     2C 00 90 5D |  if_ne	jmp	#LR__1183
0f780     0C 4E 05 F1 | 	add	fp, #12
0f784     A7 1E 02 FB | 	rdlong	local01, fp
0f788     0C 4E 85 F1 | 	sub	fp, #12
0f78c     A7 64 02 FB | 	rdlong	muldivb_, fp
0f790     0F 65 12 FD | 	qdiv	muldivb_, local01
0f794     18 1E 62 FD | 	getqx	local01
0f798     A7 1E 62 FC | 	wrlong	local01, fp
0f79c     08 4E 05 F1 | 	add	fp, #8
0f7a0     A7 38 68 FC | 	wrlong	#28, fp
0f7a4     08 4E 85 F1 | 	sub	fp, #8
0f7a8     90 00 90 FD | 	jmp	#LR__1186
0f7ac                 | LR__1183
0f7ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0f7ac     08 4E 05 F1 | 	add	fp, #8
0f7b0     A7 64 02 FB | 	rdlong	muldivb_, fp
0f7b4     08 4E 85 F1 | 	sub	fp, #8
0f7b8     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0f7bc     14 4E 05 A1 |  if_e	add	fp, #20
0f7c0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f7c4     14 4E 85 A1 |  if_e	sub	fp, #20
0f7c8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0f7cc     1C 00 90 5D |  if_ne	jmp	#LR__1184
0f7d0     A7 62 02 FB | 	rdlong	muldiva_, fp
0f7d4     0C 4E 05 F1 | 	add	fp, #12
0f7d8     A7 64 02 FB | 	rdlong	muldivb_, fp
0f7dc     0C 4E 85 F1 | 	sub	fp, #12
0f7e0     BA 00 A0 FD | 	call	#divide_
0f7e4     A7 64 62 FC | 	wrlong	muldivb_, fp
0f7e8     50 00 90 FD | 	jmp	#LR__1186
0f7ec                 | LR__1184
0f7ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0f7ec     08 4E 05 F1 | 	add	fp, #8
0f7f0     A7 64 02 FB | 	rdlong	muldivb_, fp
0f7f4     08 4E 85 F1 | 	sub	fp, #8
0f7f8     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0f7fc     14 4E 05 A1 |  if_e	add	fp, #20
0f800     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f804     14 4E 85 A1 |  if_e	sub	fp, #20
0f808     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0f80c     1C 00 90 5D |  if_ne	jmp	#LR__1185
0f810     A7 62 02 FB | 	rdlong	muldiva_, fp
0f814     0C 4E 05 F1 | 	add	fp, #12
0f818     A7 64 02 FB | 	rdlong	muldivb_, fp
0f81c     0C 4E 85 F1 | 	sub	fp, #12
0f820     BA 00 A0 FD | 	call	#divide_
0f824     A7 64 62 FC | 	wrlong	muldivb_, fp
0f828     10 00 90 FD | 	jmp	#LR__1186
0f82c                 | LR__1185
0f82c     A7 16 68 FC | 	wrlong	#11, fp
0f830     08 4E 05 F1 | 	add	fp, #8
0f834     A7 FE 69 FC | 	wrlong	#255, fp
0f838     08 4E 85 F1 | 	sub	fp, #8
0f83c                 | LR__1186
0f83c     A7 12 02 F6 | 	mov	arg01, fp
0f840     4C A3 BF FD | 	call	#_push
0f844     A7 F0 03 F6 | 	mov	ptra, fp
0f848     B2 00 A0 FD | 	call	#popregs_
0f84c                 | _do_div_ret
0f84c     2D 00 64 FD | 	ret
0f850                 | 
0f850                 | ' 
0f850                 | ' sub do_fdiv 
0f850                 | _do_fdiv
0f850     02 4A 05 F6 | 	mov	COUNT_, #2
0f854     A8 00 A0 FD | 	call	#pushregs_
0f858     18 F0 07 F1 | 	add	ptra, #24
0f85c     98 A2 BF FD | 	call	#_pop
0f860     FD 14 02 F6 | 	mov	arg02, result1
0f864     FE 12 02 F6 | 	mov	arg01, result2
0f868     FF 1E 02 F6 | 	mov	local01, result3
0f86c     0C 4E 05 F1 | 	add	fp, #12
0f870     A7 14 62 FC | 	wrlong	arg02, fp
0f874     04 4E 05 F1 | 	add	fp, #4
0f878     A7 12 62 FC | 	wrlong	arg01, fp
0f87c     04 4E 05 F1 | 	add	fp, #4
0f880     A7 1E 62 FC | 	wrlong	local01, fp
0f884     14 4E 85 F1 | 	sub	fp, #20
0f888     6C A2 BF FD | 	call	#_pop
0f88c     A7 FA 61 FC | 	wrlong	result1, fp
0f890     04 4E 05 F1 | 	add	fp, #4
0f894     A7 FC 61 FC | 	wrlong	result2, fp
0f898     04 4E 05 F1 | 	add	fp, #4
0f89c     A7 FE 61 FC | 	wrlong	result3, fp
0f8a0                 | ' 
0f8a0                 | ' t2=pop()
0f8a0                 | ' t1=pop()
0f8a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0f8a0     08 4E 85 F1 | 	sub	fp, #8
0f8a4     1F FE 0D F2 | 	cmp	result3, #31 wz
0f8a8     14 4E 05 51 |  if_ne	add	fp, #20
0f8ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f8b0     14 4E 85 51 |  if_ne	sub	fp, #20
0f8b4     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0f8b8     A7 14 68 AC |  if_e	wrlong	#10, fp
0f8bc     08 4E 05 A1 |  if_e	add	fp, #8
0f8c0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f8c4     08 4E 85 A1 |  if_e	sub	fp, #8
0f8c8     38 01 90 AD |  if_e	jmp	#LR__1195
0f8cc                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0f8cc     08 4E 05 F1 | 	add	fp, #8
0f8d0     A7 14 02 FB | 	rdlong	arg02, fp
0f8d4     08 4E 85 F1 | 	sub	fp, #8
0f8d8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0f8dc     28 00 90 5D |  if_ne	jmp	#LR__1190
0f8e0     08 4E 05 F1 | 	add	fp, #8
0f8e4     A7 3C 68 FC | 	wrlong	#30, fp
0f8e8     08 4E 85 F1 | 	sub	fp, #8
0f8ec     A7 12 02 FB | 	rdlong	arg01, fp
0f8f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8f4     1F 20 C6 C9 |  if_b	decod	local02, #31
0f8f8     00 20 06 36 |  if_ae	mov	local02, #0
0f8fc     38 DB B0 FD | 	call	#__system___float_fromuns
0f900     10 FB 61 F5 | 	xor	result1, local02
0f904     A7 FA 61 FC | 	wrlong	result1, fp
0f908                 | LR__1190
0f908                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0f908     08 4E 05 F1 | 	add	fp, #8
0f90c     A7 14 02 FB | 	rdlong	arg02, fp
0f910     08 4E 85 F1 | 	sub	fp, #8
0f914     1D 14 0E F2 | 	cmp	arg02, #29 wz
0f918     18 00 90 5D |  if_ne	jmp	#LR__1191
0f91c     08 4E 05 F1 | 	add	fp, #8
0f920     A7 3C 68 FC | 	wrlong	#30, fp
0f924     08 4E 85 F1 | 	sub	fp, #8
0f928     A7 12 02 FB | 	rdlong	arg01, fp
0f92c     08 DB B0 FD | 	call	#__system___float_fromuns
0f930     A7 FA 61 FC | 	wrlong	result1, fp
0f934                 | LR__1191
0f934                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0f934     14 4E 05 F1 | 	add	fp, #20
0f938     A7 14 02 FB | 	rdlong	arg02, fp
0f93c     14 4E 85 F1 | 	sub	fp, #20
0f940     1C 14 0E F2 | 	cmp	arg02, #28 wz
0f944     34 00 90 5D |  if_ne	jmp	#LR__1192
0f948     14 4E 05 F1 | 	add	fp, #20
0f94c     A7 3C 68 FC | 	wrlong	#30, fp
0f950     08 4E 85 F1 | 	sub	fp, #8
0f954     A7 12 02 FB | 	rdlong	arg01, fp
0f958     0C 4E 85 F1 | 	sub	fp, #12
0f95c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f960     1F 20 C6 C9 |  if_b	decod	local02, #31
0f964     00 20 06 36 |  if_ae	mov	local02, #0
0f968     CC DA B0 FD | 	call	#__system___float_fromuns
0f96c     10 FB 61 F5 | 	xor	result1, local02
0f970     0C 4E 05 F1 | 	add	fp, #12
0f974     A7 FA 61 FC | 	wrlong	result1, fp
0f978     0C 4E 85 F1 | 	sub	fp, #12
0f97c                 | LR__1192
0f97c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0f97c     14 4E 05 F1 | 	add	fp, #20
0f980     A7 14 02 FB | 	rdlong	arg02, fp
0f984     14 4E 85 F1 | 	sub	fp, #20
0f988     1D 14 0E F2 | 	cmp	arg02, #29 wz
0f98c     24 00 90 5D |  if_ne	jmp	#LR__1193
0f990     14 4E 05 F1 | 	add	fp, #20
0f994     A7 3C 68 FC | 	wrlong	#30, fp
0f998     08 4E 85 F1 | 	sub	fp, #8
0f99c     A7 12 02 FB | 	rdlong	arg01, fp
0f9a0     0C 4E 85 F1 | 	sub	fp, #12
0f9a4     90 DA B0 FD | 	call	#__system___float_fromuns
0f9a8     0C 4E 05 F1 | 	add	fp, #12
0f9ac     A7 FA 61 FC | 	wrlong	result1, fp
0f9b0     0C 4E 85 F1 | 	sub	fp, #12
0f9b4                 | LR__1193
0f9b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0f9b4     08 4E 05 F1 | 	add	fp, #8
0f9b8     A7 14 02 FB | 	rdlong	arg02, fp
0f9bc     08 4E 85 F1 | 	sub	fp, #8
0f9c0     1E 14 0E F2 | 	cmp	arg02, #30 wz
0f9c4     14 4E 05 A1 |  if_e	add	fp, #20
0f9c8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f9cc     14 4E 85 A1 |  if_e	sub	fp, #20
0f9d0     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0f9d4     1C 00 90 5D |  if_ne	jmp	#LR__1194
0f9d8     A7 12 02 FB | 	rdlong	arg01, fp
0f9dc     0C 4E 05 F1 | 	add	fp, #12
0f9e0     A7 14 02 FB | 	rdlong	arg02, fp
0f9e4     0C 4E 85 F1 | 	sub	fp, #12
0f9e8     54 E0 B0 FD | 	call	#__system___float_div
0f9ec     A7 FA 61 FC | 	wrlong	result1, fp
0f9f0     10 00 90 FD | 	jmp	#LR__1195
0f9f4                 | LR__1194
0f9f4     A7 16 68 FC | 	wrlong	#11, fp
0f9f8     08 4E 05 F1 | 	add	fp, #8
0f9fc     A7 FE 69 FC | 	wrlong	#255, fp
0fa00     08 4E 85 F1 | 	sub	fp, #8
0fa04                 | LR__1195
0fa04     A7 12 02 F6 | 	mov	arg01, fp
0fa08     84 A1 BF FD | 	call	#_push
0fa0c     A7 F0 03 F6 | 	mov	ptra, fp
0fa10     B2 00 A0 FD | 	call	#popregs_
0fa14                 | _do_fdiv_ret
0fa14     2D 00 64 FD | 	ret
0fa18                 | 
0fa18                 | ' 
0fa18                 | ' 
0fa18                 | ' sub do_mod 
0fa18                 | _do_mod
0fa18     01 4A 05 F6 | 	mov	COUNT_, #1
0fa1c     A8 00 A0 FD | 	call	#pushregs_
0fa20     18 F0 07 F1 | 	add	ptra, #24
0fa24     D0 A0 BF FD | 	call	#_pop
0fa28     FD 64 02 F6 | 	mov	muldivb_, result1
0fa2c     FE 62 02 F6 | 	mov	muldiva_, result2
0fa30     FF 1E 02 F6 | 	mov	local01, result3
0fa34     0C 4E 05 F1 | 	add	fp, #12
0fa38     A7 64 62 FC | 	wrlong	muldivb_, fp
0fa3c     04 4E 05 F1 | 	add	fp, #4
0fa40     A7 62 62 FC | 	wrlong	muldiva_, fp
0fa44     04 4E 05 F1 | 	add	fp, #4
0fa48     A7 1E 62 FC | 	wrlong	local01, fp
0fa4c     14 4E 85 F1 | 	sub	fp, #20
0fa50     A4 A0 BF FD | 	call	#_pop
0fa54     A7 FA 61 FC | 	wrlong	result1, fp
0fa58     04 4E 05 F1 | 	add	fp, #4
0fa5c     A7 FC 61 FC | 	wrlong	result2, fp
0fa60     04 4E 05 F1 | 	add	fp, #4
0fa64     A7 FE 61 FC | 	wrlong	result3, fp
0fa68                 | ' 
0fa68                 | ' t2=pop()
0fa68                 | ' t1=pop()
0fa68                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0fa68     08 4E 85 F1 | 	sub	fp, #8
0fa6c     1F FE 0D F2 | 	cmp	result3, #31 wz
0fa70     14 4E 05 51 |  if_ne	add	fp, #20
0fa74     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0fa78     14 4E 85 51 |  if_ne	sub	fp, #20
0fa7c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0fa80     A7 14 68 AC |  if_e	wrlong	#10, fp
0fa84     08 4E 05 A1 |  if_e	add	fp, #8
0fa88     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fa8c     08 4E 85 A1 |  if_e	sub	fp, #8
0fa90     90 01 90 AD |  if_e	jmp	#LR__1206
0fa94                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0fa94     08 4E 05 F1 | 	add	fp, #8
0fa98     A7 64 02 FB | 	rdlong	muldivb_, fp
0fa9c     08 4E 85 F1 | 	sub	fp, #8
0faa0     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0faa4     1C 00 90 5D |  if_ne	jmp	#LR__1200
0faa8     08 4E 05 F1 | 	add	fp, #8
0faac     A7 38 68 FC | 	wrlong	#28, fp
0fab0     08 4E 85 F1 | 	sub	fp, #8
0fab4     A7 12 02 FB | 	rdlong	arg01, fp
0fab8     00 14 06 F6 | 	mov	arg02, #0
0fabc     44 E2 B0 FD | 	call	#__system___float_tointeger
0fac0     A7 FA 61 FC | 	wrlong	result1, fp
0fac4                 | LR__1200
0fac4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0fac4     14 4E 05 F1 | 	add	fp, #20
0fac8     A7 64 02 FB | 	rdlong	muldivb_, fp
0facc     14 4E 85 F1 | 	sub	fp, #20
0fad0     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0fad4     28 00 90 5D |  if_ne	jmp	#LR__1201
0fad8     14 4E 05 F1 | 	add	fp, #20
0fadc     A7 38 68 FC | 	wrlong	#28, fp
0fae0     08 4E 85 F1 | 	sub	fp, #8
0fae4     A7 12 02 FB | 	rdlong	arg01, fp
0fae8     0C 4E 85 F1 | 	sub	fp, #12
0faec     00 14 06 F6 | 	mov	arg02, #0
0faf0     10 E2 B0 FD | 	call	#__system___float_tointeger
0faf4     0C 4E 05 F1 | 	add	fp, #12
0faf8     A7 FA 61 FC | 	wrlong	result1, fp
0fafc     0C 4E 85 F1 | 	sub	fp, #12
0fb00                 | LR__1201
0fb00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0fb00     08 4E 05 F1 | 	add	fp, #8
0fb04     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb08     08 4E 85 F1 | 	sub	fp, #8
0fb0c     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0fb10     14 4E 05 A1 |  if_e	add	fp, #20
0fb14     A7 1E 02 AB |  if_e	rdlong	local01, fp
0fb18     14 4E 85 A1 |  if_e	sub	fp, #20
0fb1c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0fb20     20 00 90 5D |  if_ne	jmp	#LR__1202
0fb24     0C 4E 05 F1 | 	add	fp, #12
0fb28     A7 1E 02 FB | 	rdlong	local01, fp
0fb2c     0C 4E 85 F1 | 	sub	fp, #12
0fb30     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb34     0F 65 12 FD | 	qdiv	muldivb_, local01
0fb38     19 1E 62 FD | 	getqy	local01
0fb3c     A7 1E 62 FC | 	wrlong	local01, fp
0fb40     E0 00 90 FD | 	jmp	#LR__1206
0fb44                 | LR__1202
0fb44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0fb44     08 4E 05 F1 | 	add	fp, #8
0fb48     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb4c     08 4E 85 F1 | 	sub	fp, #8
0fb50     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0fb54     14 4E 05 A1 |  if_e	add	fp, #20
0fb58     A7 1E 02 AB |  if_e	rdlong	local01, fp
0fb5c     14 4E 85 A1 |  if_e	sub	fp, #20
0fb60     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0fb64     2C 00 90 5D |  if_ne	jmp	#LR__1203
0fb68     0C 4E 05 F1 | 	add	fp, #12
0fb6c     A7 1E 02 FB | 	rdlong	local01, fp
0fb70     0C 4E 85 F1 | 	sub	fp, #12
0fb74     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb78     0F 65 12 FD | 	qdiv	muldivb_, local01
0fb7c     19 1E 62 FD | 	getqy	local01
0fb80     A7 1E 62 FC | 	wrlong	local01, fp
0fb84     08 4E 05 F1 | 	add	fp, #8
0fb88     A7 38 68 FC | 	wrlong	#28, fp
0fb8c     08 4E 85 F1 | 	sub	fp, #8
0fb90     90 00 90 FD | 	jmp	#LR__1206
0fb94                 | LR__1203
0fb94                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0fb94     08 4E 05 F1 | 	add	fp, #8
0fb98     A7 64 02 FB | 	rdlong	muldivb_, fp
0fb9c     08 4E 85 F1 | 	sub	fp, #8
0fba0     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0fba4     14 4E 05 A1 |  if_e	add	fp, #20
0fba8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0fbac     14 4E 85 A1 |  if_e	sub	fp, #20
0fbb0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0fbb4     1C 00 90 5D |  if_ne	jmp	#LR__1204
0fbb8     A7 62 02 FB | 	rdlong	muldiva_, fp
0fbbc     0C 4E 05 F1 | 	add	fp, #12
0fbc0     A7 64 02 FB | 	rdlong	muldivb_, fp
0fbc4     0C 4E 85 F1 | 	sub	fp, #12
0fbc8     BA 00 A0 FD | 	call	#divide_
0fbcc     A7 62 62 FC | 	wrlong	muldiva_, fp
0fbd0     50 00 90 FD | 	jmp	#LR__1206
0fbd4                 | LR__1204
0fbd4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0fbd4     08 4E 05 F1 | 	add	fp, #8
0fbd8     A7 64 02 FB | 	rdlong	muldivb_, fp
0fbdc     08 4E 85 F1 | 	sub	fp, #8
0fbe0     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0fbe4     14 4E 05 A1 |  if_e	add	fp, #20
0fbe8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0fbec     14 4E 85 A1 |  if_e	sub	fp, #20
0fbf0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0fbf4     1C 00 90 5D |  if_ne	jmp	#LR__1205
0fbf8     A7 62 02 FB | 	rdlong	muldiva_, fp
0fbfc     0C 4E 05 F1 | 	add	fp, #12
0fc00     A7 64 02 FB | 	rdlong	muldivb_, fp
0fc04     0C 4E 85 F1 | 	sub	fp, #12
0fc08     BA 00 A0 FD | 	call	#divide_
0fc0c     A7 62 62 FC | 	wrlong	muldiva_, fp
0fc10     10 00 90 FD | 	jmp	#LR__1206
0fc14                 | LR__1205
0fc14     A7 16 68 FC | 	wrlong	#11, fp
0fc18     08 4E 05 F1 | 	add	fp, #8
0fc1c     A7 FE 69 FC | 	wrlong	#255, fp
0fc20     08 4E 85 F1 | 	sub	fp, #8
0fc24                 | LR__1206
0fc24     A7 12 02 F6 | 	mov	arg01, fp
0fc28     64 9F BF FD | 	call	#_push
0fc2c     A7 F0 03 F6 | 	mov	ptra, fp
0fc30     B2 00 A0 FD | 	call	#popregs_
0fc34                 | _do_mod_ret
0fc34     2D 00 64 FD | 	ret
0fc38                 | 
0fc38                 | ' 
0fc38                 | ' sub do_shl 
0fc38                 | _do_shl
0fc38     03 4A 05 F6 | 	mov	COUNT_, #3
0fc3c     A8 00 A0 FD | 	call	#pushregs_
0fc40     18 F0 07 F1 | 	add	ptra, #24
0fc44     B0 9E BF FD | 	call	#_pop
0fc48     FD 12 02 F6 | 	mov	arg01, result1
0fc4c     FE 1E 02 F6 | 	mov	local01, result2
0fc50     FF 20 02 F6 | 	mov	local02, result3
0fc54     0C 4E 05 F1 | 	add	fp, #12
0fc58     A7 12 62 FC | 	wrlong	arg01, fp
0fc5c     04 4E 05 F1 | 	add	fp, #4
0fc60     A7 1E 62 FC | 	wrlong	local01, fp
0fc64     04 4E 05 F1 | 	add	fp, #4
0fc68     A7 20 62 FC | 	wrlong	local02, fp
0fc6c     14 4E 85 F1 | 	sub	fp, #20
0fc70     84 9E BF FD | 	call	#_pop
0fc74     FF 22 02 F6 | 	mov	local03, result3
0fc78     A7 FA 61 FC | 	wrlong	result1, fp
0fc7c     04 4E 05 F1 | 	add	fp, #4
0fc80     A7 FC 61 FC | 	wrlong	result2, fp
0fc84     04 4E 05 F1 | 	add	fp, #4
0fc88     A7 22 62 FC | 	wrlong	local03, fp
0fc8c                 | ' 
0fc8c                 | ' t2=pop()
0fc8c                 | ' t1=pop()
0fc8c                 | ' 
0fc8c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fc8c     08 4E 85 F1 | 	sub	fp, #8
0fc90     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc94     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc98     A7 22 62 AC |  if_e	wrlong	local03, fp
0fc9c     08 4E 05 A1 |  if_e	add	fp, #8
0fca0     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fca4     08 4E 85 A1 |  if_e	sub	fp, #8
0fca8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fca8     14 4E 05 F1 | 	add	fp, #20
0fcac     A7 22 02 FB | 	rdlong	local03, fp
0fcb0     14 4E 85 F1 | 	sub	fp, #20
0fcb4     1C 22 0E F2 | 	cmp	local03, #28 wz
0fcb8     18 00 90 5D |  if_ne	jmp	#LR__1210
0fcbc     0C 4E 05 F1 | 	add	fp, #12
0fcc0     A7 22 02 FB | 	rdlong	local03, fp
0fcc4     A7 22 62 FC | 	wrlong	local03, fp
0fcc8     08 4E 05 F1 | 	add	fp, #8
0fccc     A7 3A 68 FC | 	wrlong	#29, fp
0fcd0     14 4E 85 F1 | 	sub	fp, #20
0fcd4                 | LR__1210
0fcd4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0fcd4     08 4E 05 F1 | 	add	fp, #8
0fcd8     A7 22 02 FB | 	rdlong	local03, fp
0fcdc     08 4E 85 F1 | 	sub	fp, #8
0fce0     1F 22 0E F2 | 	cmp	local03, #31 wz
0fce4     14 4E 05 51 |  if_ne	add	fp, #20
0fce8     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fcec     14 4E 85 51 |  if_ne	sub	fp, #20
0fcf0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fcf4     08 4E 05 51 |  if_ne	add	fp, #8
0fcf8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fcfc     08 4E 85 51 |  if_ne	sub	fp, #8
0fd00     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fd04     14 4E 05 51 |  if_ne	add	fp, #20
0fd08     14 4E 85 51 |  if_ne	sub	fp, #20
0fd0c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fd10     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fd14     08 4E 05 A1 |  if_e	add	fp, #8
0fd18     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fd1c     08 4E 85 A1 |  if_e	sub	fp, #8
0fd20     18 00 90 AD |  if_e	jmp	#LR__1211
0fd24     A7 22 02 FB | 	rdlong	local03, fp
0fd28     0C 4E 05 F1 | 	add	fp, #12
0fd2c     A7 1E 02 FB | 	rdlong	local01, fp
0fd30     0C 4E 85 F1 | 	sub	fp, #12
0fd34     0F 23 62 F0 | 	shl	local03, local01
0fd38     A7 22 62 FC | 	wrlong	local03, fp
0fd3c                 | LR__1211
0fd3c     A7 12 02 F6 | 	mov	arg01, fp
0fd40     4C 9E BF FD | 	call	#_push
0fd44     A7 F0 03 F6 | 	mov	ptra, fp
0fd48     B2 00 A0 FD | 	call	#popregs_
0fd4c                 | _do_shl_ret
0fd4c     2D 00 64 FD | 	ret
0fd50                 | 
0fd50                 | ' 
0fd50                 | ' sub do_shr 
0fd50                 | _do_shr
0fd50     03 4A 05 F6 | 	mov	COUNT_, #3
0fd54     A8 00 A0 FD | 	call	#pushregs_
0fd58     18 F0 07 F1 | 	add	ptra, #24
0fd5c     98 9D BF FD | 	call	#_pop
0fd60     FD 12 02 F6 | 	mov	arg01, result1
0fd64     FE 1E 02 F6 | 	mov	local01, result2
0fd68     FF 20 02 F6 | 	mov	local02, result3
0fd6c     0C 4E 05 F1 | 	add	fp, #12
0fd70     A7 12 62 FC | 	wrlong	arg01, fp
0fd74     04 4E 05 F1 | 	add	fp, #4
0fd78     A7 1E 62 FC | 	wrlong	local01, fp
0fd7c     04 4E 05 F1 | 	add	fp, #4
0fd80     A7 20 62 FC | 	wrlong	local02, fp
0fd84     14 4E 85 F1 | 	sub	fp, #20
0fd88     6C 9D BF FD | 	call	#_pop
0fd8c     FF 22 02 F6 | 	mov	local03, result3
0fd90     A7 FA 61 FC | 	wrlong	result1, fp
0fd94     04 4E 05 F1 | 	add	fp, #4
0fd98     A7 FC 61 FC | 	wrlong	result2, fp
0fd9c     04 4E 05 F1 | 	add	fp, #4
0fda0     A7 22 62 FC | 	wrlong	local03, fp
0fda4                 | ' t2=pop()
0fda4                 | ' t1=pop()
0fda4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fda4     08 4E 85 F1 | 	sub	fp, #8
0fda8     1C 22 0E F2 | 	cmp	local03, #28 wz
0fdac     A7 22 02 AB |  if_e	rdlong	local03, fp
0fdb0     A7 22 62 AC |  if_e	wrlong	local03, fp
0fdb4     08 4E 05 A1 |  if_e	add	fp, #8
0fdb8     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fdbc     08 4E 85 A1 |  if_e	sub	fp, #8
0fdc0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fdc0     14 4E 05 F1 | 	add	fp, #20
0fdc4     A7 22 02 FB | 	rdlong	local03, fp
0fdc8     14 4E 85 F1 | 	sub	fp, #20
0fdcc     1C 22 0E F2 | 	cmp	local03, #28 wz
0fdd0     18 00 90 5D |  if_ne	jmp	#LR__1220
0fdd4     0C 4E 05 F1 | 	add	fp, #12
0fdd8     A7 22 02 FB | 	rdlong	local03, fp
0fddc     A7 22 62 FC | 	wrlong	local03, fp
0fde0     08 4E 05 F1 | 	add	fp, #8
0fde4     A7 3A 68 FC | 	wrlong	#29, fp
0fde8     14 4E 85 F1 | 	sub	fp, #20
0fdec                 | LR__1220
0fdec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0fdec     08 4E 05 F1 | 	add	fp, #8
0fdf0     A7 22 02 FB | 	rdlong	local03, fp
0fdf4     08 4E 85 F1 | 	sub	fp, #8
0fdf8     1F 22 0E F2 | 	cmp	local03, #31 wz
0fdfc     14 4E 05 51 |  if_ne	add	fp, #20
0fe00     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fe04     14 4E 85 51 |  if_ne	sub	fp, #20
0fe08     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fe0c     08 4E 05 51 |  if_ne	add	fp, #8
0fe10     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fe14     08 4E 85 51 |  if_ne	sub	fp, #8
0fe18     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fe1c     14 4E 05 51 |  if_ne	add	fp, #20
0fe20     14 4E 85 51 |  if_ne	sub	fp, #20
0fe24     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fe28     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fe2c     08 4E 05 A1 |  if_e	add	fp, #8
0fe30     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fe34     08 4E 85 A1 |  if_e	sub	fp, #8
0fe38     18 00 90 AD |  if_e	jmp	#LR__1221
0fe3c     A7 22 02 FB | 	rdlong	local03, fp
0fe40     0C 4E 05 F1 | 	add	fp, #12
0fe44     A7 1E 02 FB | 	rdlong	local01, fp
0fe48     0C 4E 85 F1 | 	sub	fp, #12
0fe4c     0F 23 42 F0 | 	shr	local03, local01
0fe50     A7 22 62 FC | 	wrlong	local03, fp
0fe54                 | LR__1221
0fe54     A7 12 02 F6 | 	mov	arg01, fp
0fe58     34 9D BF FD | 	call	#_push
0fe5c     A7 F0 03 F6 | 	mov	ptra, fp
0fe60     B2 00 A0 FD | 	call	#popregs_
0fe64                 | _do_shr_ret
0fe64     2D 00 64 FD | 	ret
0fe68                 | 
0fe68                 | ' 
0fe68                 | ' sub do_power 
0fe68                 | _do_power
0fe68     02 4A 05 F6 | 	mov	COUNT_, #2
0fe6c     A8 00 A0 FD | 	call	#pushregs_
0fe70     18 F0 07 F1 | 	add	ptra, #24
0fe74     80 9C BF FD | 	call	#_pop
0fe78     FD 14 02 F6 | 	mov	arg02, result1
0fe7c     FE 12 02 F6 | 	mov	arg01, result2
0fe80     FF 1E 02 F6 | 	mov	local01, result3
0fe84     0C 4E 05 F1 | 	add	fp, #12
0fe88     A7 14 62 FC | 	wrlong	arg02, fp
0fe8c     04 4E 05 F1 | 	add	fp, #4
0fe90     A7 12 62 FC | 	wrlong	arg01, fp
0fe94     04 4E 05 F1 | 	add	fp, #4
0fe98     A7 1E 62 FC | 	wrlong	local01, fp
0fe9c     14 4E 85 F1 | 	sub	fp, #20
0fea0     54 9C BF FD | 	call	#_pop
0fea4     A7 FA 61 FC | 	wrlong	result1, fp
0fea8     04 4E 05 F1 | 	add	fp, #4
0feac     A7 FC 61 FC | 	wrlong	result2, fp
0feb0     04 4E 05 F1 | 	add	fp, #4
0feb4     A7 FE 61 FC | 	wrlong	result3, fp
0feb8                 | ' t2=pop()
0feb8                 | ' t1=pop()
0feb8                 | ' 
0feb8                 | ' 
0feb8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0feb8     08 4E 85 F1 | 	sub	fp, #8
0febc     1F FE 0D F2 | 	cmp	result3, #31 wz
0fec0     14 4E 05 51 |  if_ne	add	fp, #20
0fec4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fec8     14 4E 85 51 |  if_ne	sub	fp, #20
0fecc     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0fed0     A7 18 68 AC |  if_e	wrlong	#12, fp
0fed4     08 4E 05 A1 |  if_e	add	fp, #8
0fed8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fedc     08 4E 85 A1 |  if_e	sub	fp, #8
0fee0     38 01 90 AD |  if_e	jmp	#LR__1235
0fee4                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0fee4     08 4E 05 F1 | 	add	fp, #8
0fee8     A7 14 02 FB | 	rdlong	arg02, fp
0feec     08 4E 85 F1 | 	sub	fp, #8
0fef0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0fef4     28 00 90 5D |  if_ne	jmp	#LR__1230
0fef8     08 4E 05 F1 | 	add	fp, #8
0fefc     A7 3C 68 FC | 	wrlong	#30, fp
0ff00     08 4E 85 F1 | 	sub	fp, #8
0ff04     A7 12 02 FB | 	rdlong	arg01, fp
0ff08     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff0c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ff10     00 20 06 36 |  if_ae	mov	local02, #0
0ff14     20 D5 B0 FD | 	call	#__system___float_fromuns
0ff18     10 FB 61 F5 | 	xor	result1, local02
0ff1c     A7 FA 61 FC | 	wrlong	result1, fp
0ff20                 | LR__1230
0ff20                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0ff20     08 4E 05 F1 | 	add	fp, #8
0ff24     A7 14 02 FB | 	rdlong	arg02, fp
0ff28     08 4E 85 F1 | 	sub	fp, #8
0ff2c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ff30     18 00 90 5D |  if_ne	jmp	#LR__1231
0ff34     08 4E 05 F1 | 	add	fp, #8
0ff38     A7 3C 68 FC | 	wrlong	#30, fp
0ff3c     08 4E 85 F1 | 	sub	fp, #8
0ff40     A7 12 02 FB | 	rdlong	arg01, fp
0ff44     F0 D4 B0 FD | 	call	#__system___float_fromuns
0ff48     A7 FA 61 FC | 	wrlong	result1, fp
0ff4c                 | LR__1231
0ff4c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0ff4c     14 4E 05 F1 | 	add	fp, #20
0ff50     A7 14 02 FB | 	rdlong	arg02, fp
0ff54     14 4E 85 F1 | 	sub	fp, #20
0ff58     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ff5c     34 00 90 5D |  if_ne	jmp	#LR__1232
0ff60     14 4E 05 F1 | 	add	fp, #20
0ff64     A7 3C 68 FC | 	wrlong	#30, fp
0ff68     08 4E 85 F1 | 	sub	fp, #8
0ff6c     A7 12 02 FB | 	rdlong	arg01, fp
0ff70     0C 4E 85 F1 | 	sub	fp, #12
0ff74     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff78     1F 20 C6 C9 |  if_b	decod	local02, #31
0ff7c     00 20 06 36 |  if_ae	mov	local02, #0
0ff80     B4 D4 B0 FD | 	call	#__system___float_fromuns
0ff84     10 FB 61 F5 | 	xor	result1, local02
0ff88     0C 4E 05 F1 | 	add	fp, #12
0ff8c     A7 FA 61 FC | 	wrlong	result1, fp
0ff90     0C 4E 85 F1 | 	sub	fp, #12
0ff94                 | LR__1232
0ff94                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ff94     14 4E 05 F1 | 	add	fp, #20
0ff98     A7 14 02 FB | 	rdlong	arg02, fp
0ff9c     14 4E 85 F1 | 	sub	fp, #20
0ffa0     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ffa4     24 00 90 5D |  if_ne	jmp	#LR__1233
0ffa8     14 4E 05 F1 | 	add	fp, #20
0ffac     A7 3C 68 FC | 	wrlong	#30, fp
0ffb0     08 4E 85 F1 | 	sub	fp, #8
0ffb4     A7 12 02 FB | 	rdlong	arg01, fp
0ffb8     0C 4E 85 F1 | 	sub	fp, #12
0ffbc     78 D4 B0 FD | 	call	#__system___float_fromuns
0ffc0     0C 4E 05 F1 | 	add	fp, #12
0ffc4     A7 FA 61 FC | 	wrlong	result1, fp
0ffc8     0C 4E 85 F1 | 	sub	fp, #12
0ffcc                 | LR__1233
0ffcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0ffcc     08 4E 05 F1 | 	add	fp, #8
0ffd0     A7 14 02 FB | 	rdlong	arg02, fp
0ffd4     08 4E 85 F1 | 	sub	fp, #8
0ffd8     1E 14 0E F2 | 	cmp	arg02, #30 wz
0ffdc     14 4E 05 A1 |  if_e	add	fp, #20
0ffe0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ffe4     14 4E 85 A1 |  if_e	sub	fp, #20
0ffe8     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ffec     1C 00 90 5D |  if_ne	jmp	#LR__1234
0fff0     A7 12 02 FB | 	rdlong	arg01, fp
0fff4     0C 4E 05 F1 | 	add	fp, #12
0fff8     A7 14 02 FB | 	rdlong	arg02, fp
0fffc     0C 4E 85 F1 | 	sub	fp, #12
10000     1C E7 B0 FD | 	call	#__system____builtin_powf
10004     A7 FA 61 FC | 	wrlong	result1, fp
10008     10 00 90 FD | 	jmp	#LR__1235
1000c                 | LR__1234
1000c     A7 1A 68 FC | 	wrlong	#13, fp
10010     08 4E 05 F1 | 	add	fp, #8
10014     A7 FE 69 FC | 	wrlong	#255, fp
10018     08 4E 85 F1 | 	sub	fp, #8
1001c                 | LR__1235
1001c     A7 12 02 F6 | 	mov	arg01, fp
10020     6C 9B BF FD | 	call	#_push
10024     A7 F0 03 F6 | 	mov	ptra, fp
10028     B2 00 A0 FD | 	call	#popregs_
1002c                 | _do_power_ret
1002c     2D 00 64 FD | 	ret
10030                 | 
10030                 | ' 
10030                 | ' 
10030                 | ' sub do_eq
10030                 | _do_eq
10030     05 4A 05 F6 | 	mov	COUNT_, #5
10034     A8 00 A0 FD | 	call	#pushregs_
10038     18 F0 07 F1 | 	add	ptra, #24
1003c     B8 9A BF FD | 	call	#_pop
10040     FD 1E 02 F6 | 	mov	local01, result1
10044     FE 20 02 F6 | 	mov	local02, result2
10048     FF 22 02 F6 | 	mov	local03, result3
1004c     0C 4E 05 F1 | 	add	fp, #12
10050     A7 1E 62 FC | 	wrlong	local01, fp
10054     04 4E 05 F1 | 	add	fp, #4
10058     A7 20 62 FC | 	wrlong	local02, fp
1005c     04 4E 05 F1 | 	add	fp, #4
10060     A7 22 62 FC | 	wrlong	local03, fp
10064     14 4E 85 F1 | 	sub	fp, #20
10068     8C 9A BF FD | 	call	#_pop
1006c     FF 22 02 F6 | 	mov	local03, result3
10070     A7 FA 61 FC | 	wrlong	result1, fp
10074     04 4E 05 F1 | 	add	fp, #4
10078     A7 FC 61 FC | 	wrlong	result2, fp
1007c     04 4E 05 F1 | 	add	fp, #4
10080     A7 22 62 FC | 	wrlong	local03, fp
10084                 | ' t2=pop()
10084                 | ' t1=pop()
10084                 | ' 
10084                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
10084     08 4E 85 F1 | 	sub	fp, #8
10088     1F 22 0E F2 | 	cmp	local03, #31 wz
1008c     14 4E 05 A1 |  if_e	add	fp, #20
10090     A7 24 02 AB |  if_e	rdlong	local04, fp
10094     14 4E 85 A1 |  if_e	sub	fp, #20
10098     12 23 02 A6 |  if_e	mov	local03, local04
1009c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
100a0     28 00 90 5D |  if_ne	jmp	#LR__1240
100a4     00 1E 06 F6 | 	mov	local01, #0
100a8     A7 12 02 FB | 	rdlong	arg01, fp
100ac     0C 4E 05 F1 | 	add	fp, #12
100b0     A7 14 02 FB | 	rdlong	arg02, fp
100b4     0C 4E 85 F1 | 	sub	fp, #12
100b8     84 AC B0 FD | 	call	#__system___string_cmp
100bc     00 FA 0D F2 | 	cmp	result1, #0 wz
100c0     00 1E 26 A6 |  if_e	not	local01, #0
100c4     A7 1E 62 FC | 	wrlong	local01, fp
100c8     1C 04 90 FD | 	jmp	#LR__1253
100cc                 | LR__1240
100cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
100cc     08 4E 05 F1 | 	add	fp, #8
100d0     A7 1E 02 FB | 	rdlong	local01, fp
100d4     08 4E 85 F1 | 	sub	fp, #8
100d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
100dc     14 4E 05 A1 |  if_e	add	fp, #20
100e0     A7 24 02 AB |  if_e	rdlong	local04, fp
100e4     14 4E 85 A1 |  if_e	sub	fp, #20
100e8     12 23 02 A6 |  if_e	mov	local03, local04
100ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
100f0     2C 00 90 5D |  if_ne	jmp	#LR__1241
100f4     00 1E 06 F6 | 	mov	local01, #0
100f8     A7 12 02 FB | 	rdlong	arg01, fp
100fc     0C 4E 05 F1 | 	add	fp, #12
10100     A7 14 02 FB | 	rdlong	arg02, fp
10104     0C 4E 85 F1 | 	sub	fp, #12
10108     01 16 06 F6 | 	mov	arg03, #1
1010c     60 DB B0 FD | 	call	#__system___float_cmp
10110     00 FA 0D F2 | 	cmp	result1, #0 wz
10114     00 1E 26 A6 |  if_e	not	local01, #0
10118     A7 1E 62 FC | 	wrlong	local01, fp
1011c     C8 03 90 FD | 	jmp	#LR__1253
10120                 | LR__1241
10120                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
10120     08 4E 05 F1 | 	add	fp, #8
10124     A7 1E 02 FB | 	rdlong	local01, fp
10128     08 4E 85 F1 | 	sub	fp, #8
1012c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10130     14 4E 05 A1 |  if_e	add	fp, #20
10134     A7 24 02 AB |  if_e	rdlong	local04, fp
10138     14 4E 85 A1 |  if_e	sub	fp, #20
1013c     12 23 02 A6 |  if_e	mov	local03, local04
10140     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10144     48 00 90 5D |  if_ne	jmp	#LR__1242
10148     00 1E 06 F6 | 	mov	local01, #0
1014c     A7 20 02 FB | 	rdlong	local02, fp
10150     0C 4E 05 F1 | 	add	fp, #12
10154     A7 12 02 FB | 	rdlong	arg01, fp
10158     0C 4E 85 F1 | 	sub	fp, #12
1015c     09 13 52 F6 | 	abs	arg01, arg01 wc
10160     1F 26 C6 C9 |  if_b	decod	local05, #31
10164     00 26 06 36 |  if_ae	mov	local05, #0
10168     CC D2 B0 FD | 	call	#__system___float_fromuns
1016c     13 FB 61 F5 | 	xor	result1, local05
10170     FD 14 02 F6 | 	mov	arg02, result1
10174     10 13 02 F6 | 	mov	arg01, local02
10178     01 16 06 F6 | 	mov	arg03, #1
1017c     F0 DA B0 FD | 	call	#__system___float_cmp
10180     00 FA 0D F2 | 	cmp	result1, #0 wz
10184     00 1E 26 A6 |  if_e	not	local01, #0
10188     A7 1E 62 FC | 	wrlong	local01, fp
1018c     58 03 90 FD | 	jmp	#LR__1253
10190                 | LR__1242
10190                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
10190     08 4E 05 F1 | 	add	fp, #8
10194     A7 1E 02 FB | 	rdlong	local01, fp
10198     08 4E 85 F1 | 	sub	fp, #8
1019c     1E 1E 0E F2 | 	cmp	local01, #30 wz
101a0     14 4E 05 A1 |  if_e	add	fp, #20
101a4     A7 24 02 AB |  if_e	rdlong	local04, fp
101a8     14 4E 85 A1 |  if_e	sub	fp, #20
101ac     12 23 02 A6 |  if_e	mov	local03, local04
101b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
101b4     38 00 90 5D |  if_ne	jmp	#LR__1243
101b8     00 1E 06 F6 | 	mov	local01, #0
101bc     A7 20 02 FB | 	rdlong	local02, fp
101c0     0C 4E 05 F1 | 	add	fp, #12
101c4     A7 12 02 FB | 	rdlong	arg01, fp
101c8     0C 4E 85 F1 | 	sub	fp, #12
101cc     68 D2 B0 FD | 	call	#__system___float_fromuns
101d0     FD 14 02 F6 | 	mov	arg02, result1
101d4     10 13 02 F6 | 	mov	arg01, local02
101d8     01 16 06 F6 | 	mov	arg03, #1
101dc     90 DA B0 FD | 	call	#__system___float_cmp
101e0     00 FA 0D F2 | 	cmp	result1, #0 wz
101e4     00 1E 26 A6 |  if_e	not	local01, #0
101e8     A7 1E 62 FC | 	wrlong	local01, fp
101ec     F8 02 90 FD | 	jmp	#LR__1253
101f0                 | LR__1243
101f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
101f0     08 4E 05 F1 | 	add	fp, #8
101f4     A7 1E 02 FB | 	rdlong	local01, fp
101f8     08 4E 85 F1 | 	sub	fp, #8
101fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
10200     14 4E 05 A1 |  if_e	add	fp, #20
10204     A7 24 02 AB |  if_e	rdlong	local04, fp
10208     14 4E 85 A1 |  if_e	sub	fp, #20
1020c     12 23 02 A6 |  if_e	mov	local03, local04
10210     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10214     44 00 90 5D |  if_ne	jmp	#LR__1244
10218     00 1E 06 F6 | 	mov	local01, #0
1021c     A7 12 02 FB | 	rdlong	arg01, fp
10220     09 13 52 F6 | 	abs	arg01, arg01 wc
10224     1F 26 C6 C9 |  if_b	decod	local05, #31
10228     00 26 06 36 |  if_ae	mov	local05, #0
1022c     08 D2 B0 FD | 	call	#__system___float_fromuns
10230     13 FB 61 F5 | 	xor	result1, local05
10234     FD 12 02 F6 | 	mov	arg01, result1
10238     0C 4E 05 F1 | 	add	fp, #12
1023c     A7 14 02 FB | 	rdlong	arg02, fp
10240     0C 4E 85 F1 | 	sub	fp, #12
10244     01 16 06 F6 | 	mov	arg03, #1
10248     24 DA B0 FD | 	call	#__system___float_cmp
1024c     00 FA 0D F2 | 	cmp	result1, #0 wz
10250     00 1E 26 A6 |  if_e	not	local01, #0
10254     A7 1E 62 FC | 	wrlong	local01, fp
10258     8C 02 90 FD | 	jmp	#LR__1253
1025c                 | LR__1244
1025c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1025c     08 4E 05 F1 | 	add	fp, #8
10260     A7 1E 02 FB | 	rdlong	local01, fp
10264     08 4E 85 F1 | 	sub	fp, #8
10268     1C 1E 0E F2 | 	cmp	local01, #28 wz
1026c     14 4E 05 A1 |  if_e	add	fp, #20
10270     A7 24 02 AB |  if_e	rdlong	local04, fp
10274     14 4E 85 A1 |  if_e	sub	fp, #20
10278     12 23 02 A6 |  if_e	mov	local03, local04
1027c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10280     24 00 90 5D |  if_ne	jmp	#LR__1245
10284     00 1E 06 F6 | 	mov	local01, #0
10288     A7 20 02 FB | 	rdlong	local02, fp
1028c     0C 4E 05 F1 | 	add	fp, #12
10290     A7 22 02 FB | 	rdlong	local03, fp
10294     0C 4E 85 F1 | 	sub	fp, #12
10298     11 21 0A F2 | 	cmp	local02, local03 wz
1029c     01 1E 66 A6 |  if_e	neg	local01, #1
102a0     A7 1E 62 FC | 	wrlong	local01, fp
102a4     40 02 90 FD | 	jmp	#LR__1253
102a8                 | LR__1245
102a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
102a8     08 4E 05 F1 | 	add	fp, #8
102ac     A7 1E 02 FB | 	rdlong	local01, fp
102b0     08 4E 85 F1 | 	sub	fp, #8
102b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
102b8     14 4E 05 A1 |  if_e	add	fp, #20
102bc     A7 24 02 AB |  if_e	rdlong	local04, fp
102c0     14 4E 85 A1 |  if_e	sub	fp, #20
102c4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
102c8     24 00 90 5D |  if_ne	jmp	#LR__1246
102cc     00 1E 06 F6 | 	mov	local01, #0
102d0     A7 20 02 FB | 	rdlong	local02, fp
102d4     0C 4E 05 F1 | 	add	fp, #12
102d8     A7 22 02 FB | 	rdlong	local03, fp
102dc     0C 4E 85 F1 | 	sub	fp, #12
102e0     11 21 0A F2 | 	cmp	local02, local03 wz
102e4     01 1E 66 A6 |  if_e	neg	local01, #1
102e8     A7 1E 62 FC | 	wrlong	local01, fp
102ec     F8 01 90 FD | 	jmp	#LR__1253
102f0                 | LR__1246
102f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
102f0     08 4E 05 F1 | 	add	fp, #8
102f4     A7 1E 02 FB | 	rdlong	local01, fp
102f8     08 4E 85 F1 | 	sub	fp, #8
102fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10300     14 4E 05 A1 |  if_e	add	fp, #20
10304     A7 22 02 AB |  if_e	rdlong	local03, fp
10308     14 4E 85 A1 |  if_e	sub	fp, #20
1030c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10310     34 00 90 5D |  if_ne	jmp	#LR__1247
10314     00 1E 06 F6 | 	mov	local01, #0
10318     A7 12 02 FB | 	rdlong	arg01, fp
1031c     18 D1 B0 FD | 	call	#__system___float_fromuns
10320     FD 12 02 F6 | 	mov	arg01, result1
10324     0C 4E 05 F1 | 	add	fp, #12
10328     A7 14 02 FB | 	rdlong	arg02, fp
1032c     0C 4E 85 F1 | 	sub	fp, #12
10330     01 16 06 F6 | 	mov	arg03, #1
10334     38 D9 B0 FD | 	call	#__system___float_cmp
10338     00 FA 0D F2 | 	cmp	result1, #0 wz
1033c     00 1E 26 A6 |  if_e	not	local01, #0
10340     A7 1E 62 FC | 	wrlong	local01, fp
10344     A0 01 90 FD | 	jmp	#LR__1253
10348                 | LR__1247
10348                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
10348     08 4E 05 F1 | 	add	fp, #8
1034c     A7 1E 02 FB | 	rdlong	local01, fp
10350     08 4E 85 F1 | 	sub	fp, #8
10354     1D 1E 0E F2 | 	cmp	local01, #29 wz
10358     14 4E 05 A1 |  if_e	add	fp, #20
1035c     A7 22 02 AB |  if_e	rdlong	local03, fp
10360     14 4E 85 A1 |  if_e	sub	fp, #20
10364     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10368     24 00 90 5D |  if_ne	jmp	#LR__1248
1036c     00 1E 06 F6 | 	mov	local01, #0
10370     A7 20 02 FB | 	rdlong	local02, fp
10374     0C 4E 05 F1 | 	add	fp, #12
10378     A7 22 02 FB | 	rdlong	local03, fp
1037c     0C 4E 85 F1 | 	sub	fp, #12
10380     11 21 0A F2 | 	cmp	local02, local03 wz
10384     01 1E 66 A6 |  if_e	neg	local01, #1
10388     A7 1E 62 FC | 	wrlong	local01, fp
1038c     58 01 90 FD | 	jmp	#LR__1253
10390                 | LR__1248
10390                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
10390     08 4E 05 F1 | 	add	fp, #8
10394     A7 1E 02 FB | 	rdlong	local01, fp
10398     08 4E 85 F1 | 	sub	fp, #8
1039c     1D 1E 0E F2 | 	cmp	local01, #29 wz
103a0     14 4E 05 A1 |  if_e	add	fp, #20
103a4     A7 22 02 AB |  if_e	rdlong	local03, fp
103a8     14 4E 85 A1 |  if_e	sub	fp, #20
103ac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
103b0     24 00 90 5D |  if_ne	jmp	#LR__1249
103b4     00 1E 06 F6 | 	mov	local01, #0
103b8     A7 20 02 FB | 	rdlong	local02, fp
103bc     0C 4E 05 F1 | 	add	fp, #12
103c0     A7 22 02 FB | 	rdlong	local03, fp
103c4     0C 4E 85 F1 | 	sub	fp, #12
103c8     11 21 0A F2 | 	cmp	local02, local03 wz
103cc     01 1E 66 A6 |  if_e	neg	local01, #1
103d0     A7 1E 62 FC | 	wrlong	local01, fp
103d4     10 01 90 FD | 	jmp	#LR__1253
103d8                 | LR__1249
103d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
103d8     08 4E 05 F1 | 	add	fp, #8
103dc     A7 1E 02 FB | 	rdlong	local01, fp
103e0     08 4E 85 F1 | 	sub	fp, #8
103e4     2B 1E 0E F2 | 	cmp	local01, #43 wz
103e8     14 4E 05 A1 |  if_e	add	fp, #20
103ec     A7 22 02 AB |  if_e	rdlong	local03, fp
103f0     14 4E 85 A1 |  if_e	sub	fp, #20
103f4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
103f8     30 00 90 5D |  if_ne	jmp	#LR__1250
103fc     00 1E 06 F6 | 	mov	local01, #0
10400     A7 12 02 FB | 	rdlong	arg01, fp
10404     80 D6 BF FD | 	call	#_convertstring
10408     FD 12 02 F6 | 	mov	arg01, result1
1040c     0C 4E 05 F1 | 	add	fp, #12
10410     A7 14 02 FB | 	rdlong	arg02, fp
10414     0C 4E 85 F1 | 	sub	fp, #12
10418     24 A9 B0 FD | 	call	#__system___string_cmp
1041c     00 FA 0D F2 | 	cmp	result1, #0 wz
10420     00 1E 26 A6 |  if_e	not	local01, #0
10424     A7 1E 62 FC | 	wrlong	local01, fp
10428     BC 00 90 FD | 	jmp	#LR__1253
1042c                 | LR__1250
1042c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1042c     08 4E 05 F1 | 	add	fp, #8
10430     A7 1E 02 FB | 	rdlong	local01, fp
10434     08 4E 85 F1 | 	sub	fp, #8
10438     1F 1E 0E F2 | 	cmp	local01, #31 wz
1043c     14 4E 05 A1 |  if_e	add	fp, #20
10440     A7 22 02 AB |  if_e	rdlong	local03, fp
10444     14 4E 85 A1 |  if_e	sub	fp, #20
10448     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1044c     34 00 90 5D |  if_ne	jmp	#LR__1251
10450     00 1E 06 F6 | 	mov	local01, #0
10454     A7 20 02 FB | 	rdlong	local02, fp
10458     0C 4E 05 F1 | 	add	fp, #12
1045c     A7 12 02 FB | 	rdlong	arg01, fp
10460     0C 4E 85 F1 | 	sub	fp, #12
10464     20 D6 BF FD | 	call	#_convertstring
10468     FD 14 02 F6 | 	mov	arg02, result1
1046c     10 13 02 F6 | 	mov	arg01, local02
10470     CC A8 B0 FD | 	call	#__system___string_cmp
10474     00 FA 0D F2 | 	cmp	result1, #0 wz
10478     00 1E 26 A6 |  if_e	not	local01, #0
1047c     A7 1E 62 FC | 	wrlong	local01, fp
10480     64 00 90 FD | 	jmp	#LR__1253
10484                 | LR__1251
10484                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
10484     08 4E 05 F1 | 	add	fp, #8
10488     A7 1E 02 FB | 	rdlong	local01, fp
1048c     08 4E 85 F1 | 	sub	fp, #8
10490     2B 1E 0E F2 | 	cmp	local01, #43 wz
10494     14 4E 05 A1 |  if_e	add	fp, #20
10498     A7 22 02 AB |  if_e	rdlong	local03, fp
1049c     14 4E 85 A1 |  if_e	sub	fp, #20
104a0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
104a4     3C 00 90 5D |  if_ne	jmp	#LR__1252
104a8     00 1E 06 F6 | 	mov	local01, #0
104ac     A7 12 02 FB | 	rdlong	arg01, fp
104b0     D4 D5 BF FD | 	call	#_convertstring
104b4     FD 20 02 F6 | 	mov	local02, result1
104b8     0C 4E 05 F1 | 	add	fp, #12
104bc     A7 12 02 FB | 	rdlong	arg01, fp
104c0     0C 4E 85 F1 | 	sub	fp, #12
104c4     C0 D5 BF FD | 	call	#_convertstring
104c8     FD 14 02 F6 | 	mov	arg02, result1
104cc     10 13 02 F6 | 	mov	arg01, local02
104d0     6C A8 B0 FD | 	call	#__system___string_cmp
104d4     00 FA 0D F2 | 	cmp	result1, #0 wz
104d8     00 1E 26 A6 |  if_e	not	local01, #0
104dc     A7 1E 62 FC | 	wrlong	local01, fp
104e0     04 00 90 FD | 	jmp	#LR__1253
104e4                 | LR__1252
104e4     A7 00 68 FC | 	wrlong	#0, fp
104e8                 | LR__1253
104e8     08 4E 05 F1 | 	add	fp, #8
104ec     A7 38 68 FC | 	wrlong	#28, fp
104f0     08 4E 85 F1 | 	sub	fp, #8
104f4     A7 12 02 F6 | 	mov	arg01, fp
104f8     94 96 BF FD | 	call	#_push
104fc     A7 F0 03 F6 | 	mov	ptra, fp
10500     B2 00 A0 FD | 	call	#popregs_
10504                 | _do_eq_ret
10504     2D 00 64 FD | 	ret
10508                 | 
10508                 | ' 
10508                 | ' sub do_gt
10508                 | _do_gt
10508     05 4A 05 F6 | 	mov	COUNT_, #5
1050c     A8 00 A0 FD | 	call	#pushregs_
10510     18 F0 07 F1 | 	add	ptra, #24
10514     E0 95 BF FD | 	call	#_pop
10518     FD 1E 02 F6 | 	mov	local01, result1
1051c     FE 20 02 F6 | 	mov	local02, result2
10520     FF 22 02 F6 | 	mov	local03, result3
10524     0C 4E 05 F1 | 	add	fp, #12
10528     A7 1E 62 FC | 	wrlong	local01, fp
1052c     04 4E 05 F1 | 	add	fp, #4
10530     A7 20 62 FC | 	wrlong	local02, fp
10534     04 4E 05 F1 | 	add	fp, #4
10538     A7 22 62 FC | 	wrlong	local03, fp
1053c     14 4E 85 F1 | 	sub	fp, #20
10540     B4 95 BF FD | 	call	#_pop
10544     FF 22 02 F6 | 	mov	local03, result3
10548     A7 FA 61 FC | 	wrlong	result1, fp
1054c     04 4E 05 F1 | 	add	fp, #4
10550     A7 FC 61 FC | 	wrlong	result2, fp
10554     04 4E 05 F1 | 	add	fp, #4
10558     A7 22 62 FC | 	wrlong	local03, fp
1055c                 | ' t2=pop()
1055c                 | ' t1=pop()
1055c                 | ' 
1055c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1055c     08 4E 85 F1 | 	sub	fp, #8
10560     1F 22 0E F2 | 	cmp	local03, #31 wz
10564     14 4E 05 A1 |  if_e	add	fp, #20
10568     A7 24 02 AB |  if_e	rdlong	local04, fp
1056c     14 4E 85 A1 |  if_e	sub	fp, #20
10570     12 23 02 A6 |  if_e	mov	local03, local04
10574     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10578     28 00 90 5D |  if_ne	jmp	#LR__1260
1057c     00 1E 06 F6 | 	mov	local01, #0
10580     A7 12 02 FB | 	rdlong	arg01, fp
10584     0C 4E 05 F1 | 	add	fp, #12
10588     A7 14 02 FB | 	rdlong	arg02, fp
1058c     0C 4E 85 F1 | 	sub	fp, #12
10590     AC A7 B0 FD | 	call	#__system___string_cmp
10594     01 FA 55 F2 | 	cmps	result1, #1 wc
10598     00 1E 26 36 |  if_ae	not	local01, #0
1059c     A7 1E 62 FC | 	wrlong	local01, fp
105a0     1C 04 90 FD | 	jmp	#LR__1273
105a4                 | LR__1260
105a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
105a4     08 4E 05 F1 | 	add	fp, #8
105a8     A7 1E 02 FB | 	rdlong	local01, fp
105ac     08 4E 85 F1 | 	sub	fp, #8
105b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
105b4     14 4E 05 A1 |  if_e	add	fp, #20
105b8     A7 24 02 AB |  if_e	rdlong	local04, fp
105bc     14 4E 85 A1 |  if_e	sub	fp, #20
105c0     12 23 02 A6 |  if_e	mov	local03, local04
105c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
105c8     2C 00 90 5D |  if_ne	jmp	#LR__1261
105cc     00 1E 06 F6 | 	mov	local01, #0
105d0     A7 12 02 FB | 	rdlong	arg01, fp
105d4     0C 4E 05 F1 | 	add	fp, #12
105d8     A7 14 02 FB | 	rdlong	arg02, fp
105dc     0C 4E 85 F1 | 	sub	fp, #12
105e0     01 16 66 F6 | 	neg	arg03, #1
105e4     88 D6 B0 FD | 	call	#__system___float_cmp
105e8     01 FA 55 F2 | 	cmps	result1, #1 wc
105ec     00 1E 26 36 |  if_ae	not	local01, #0
105f0     A7 1E 62 FC | 	wrlong	local01, fp
105f4     C8 03 90 FD | 	jmp	#LR__1273
105f8                 | LR__1261
105f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
105f8     08 4E 05 F1 | 	add	fp, #8
105fc     A7 1E 02 FB | 	rdlong	local01, fp
10600     08 4E 85 F1 | 	sub	fp, #8
10604     1E 1E 0E F2 | 	cmp	local01, #30 wz
10608     14 4E 05 A1 |  if_e	add	fp, #20
1060c     A7 24 02 AB |  if_e	rdlong	local04, fp
10610     14 4E 85 A1 |  if_e	sub	fp, #20
10614     12 23 02 A6 |  if_e	mov	local03, local04
10618     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1061c     48 00 90 5D |  if_ne	jmp	#LR__1262
10620     00 1E 06 F6 | 	mov	local01, #0
10624     A7 20 02 FB | 	rdlong	local02, fp
10628     0C 4E 05 F1 | 	add	fp, #12
1062c     A7 12 02 FB | 	rdlong	arg01, fp
10630     0C 4E 85 F1 | 	sub	fp, #12
10634     09 13 52 F6 | 	abs	arg01, arg01 wc
10638     1F 26 C6 C9 |  if_b	decod	local05, #31
1063c     00 26 06 36 |  if_ae	mov	local05, #0
10640     F4 CD B0 FD | 	call	#__system___float_fromuns
10644     13 FB 61 F5 | 	xor	result1, local05
10648     FD 14 02 F6 | 	mov	arg02, result1
1064c     10 13 02 F6 | 	mov	arg01, local02
10650     01 16 66 F6 | 	neg	arg03, #1
10654     18 D6 B0 FD | 	call	#__system___float_cmp
10658     01 FA 55 F2 | 	cmps	result1, #1 wc
1065c     00 1E 26 36 |  if_ae	not	local01, #0
10660     A7 1E 62 FC | 	wrlong	local01, fp
10664     58 03 90 FD | 	jmp	#LR__1273
10668                 | LR__1262
10668                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
10668     08 4E 05 F1 | 	add	fp, #8
1066c     A7 1E 02 FB | 	rdlong	local01, fp
10670     08 4E 85 F1 | 	sub	fp, #8
10674     1E 1E 0E F2 | 	cmp	local01, #30 wz
10678     14 4E 05 A1 |  if_e	add	fp, #20
1067c     A7 24 02 AB |  if_e	rdlong	local04, fp
10680     14 4E 85 A1 |  if_e	sub	fp, #20
10684     12 23 02 A6 |  if_e	mov	local03, local04
10688     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1068c     38 00 90 5D |  if_ne	jmp	#LR__1263
10690     00 1E 06 F6 | 	mov	local01, #0
10694     A7 20 02 FB | 	rdlong	local02, fp
10698     0C 4E 05 F1 | 	add	fp, #12
1069c     A7 12 02 FB | 	rdlong	arg01, fp
106a0     0C 4E 85 F1 | 	sub	fp, #12
106a4     90 CD B0 FD | 	call	#__system___float_fromuns
106a8     FD 14 02 F6 | 	mov	arg02, result1
106ac     10 13 02 F6 | 	mov	arg01, local02
106b0     01 16 66 F6 | 	neg	arg03, #1
106b4     B8 D5 B0 FD | 	call	#__system___float_cmp
106b8     01 FA 55 F2 | 	cmps	result1, #1 wc
106bc     00 1E 26 36 |  if_ae	not	local01, #0
106c0     A7 1E 62 FC | 	wrlong	local01, fp
106c4     F8 02 90 FD | 	jmp	#LR__1273
106c8                 | LR__1263
106c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
106c8     08 4E 05 F1 | 	add	fp, #8
106cc     A7 1E 02 FB | 	rdlong	local01, fp
106d0     08 4E 85 F1 | 	sub	fp, #8
106d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
106d8     14 4E 05 A1 |  if_e	add	fp, #20
106dc     A7 24 02 AB |  if_e	rdlong	local04, fp
106e0     14 4E 85 A1 |  if_e	sub	fp, #20
106e4     12 23 02 A6 |  if_e	mov	local03, local04
106e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
106ec     44 00 90 5D |  if_ne	jmp	#LR__1264
106f0     00 1E 06 F6 | 	mov	local01, #0
106f4     A7 12 02 FB | 	rdlong	arg01, fp
106f8     09 13 52 F6 | 	abs	arg01, arg01 wc
106fc     1F 26 C6 C9 |  if_b	decod	local05, #31
10700     00 26 06 36 |  if_ae	mov	local05, #0
10704     30 CD B0 FD | 	call	#__system___float_fromuns
10708     13 FB 61 F5 | 	xor	result1, local05
1070c     FD 12 02 F6 | 	mov	arg01, result1
10710     0C 4E 05 F1 | 	add	fp, #12
10714     A7 14 02 FB | 	rdlong	arg02, fp
10718     0C 4E 85 F1 | 	sub	fp, #12
1071c     01 16 66 F6 | 	neg	arg03, #1
10720     4C D5 B0 FD | 	call	#__system___float_cmp
10724     01 FA 55 F2 | 	cmps	result1, #1 wc
10728     00 1E 26 36 |  if_ae	not	local01, #0
1072c     A7 1E 62 FC | 	wrlong	local01, fp
10730     8C 02 90 FD | 	jmp	#LR__1273
10734                 | LR__1264
10734                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
10734     08 4E 05 F1 | 	add	fp, #8
10738     A7 1E 02 FB | 	rdlong	local01, fp
1073c     08 4E 85 F1 | 	sub	fp, #8
10740     1C 1E 0E F2 | 	cmp	local01, #28 wz
10744     14 4E 05 A1 |  if_e	add	fp, #20
10748     A7 24 02 AB |  if_e	rdlong	local04, fp
1074c     14 4E 85 A1 |  if_e	sub	fp, #20
10750     12 23 02 A6 |  if_e	mov	local03, local04
10754     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10758     24 00 90 5D |  if_ne	jmp	#LR__1265
1075c     00 1E 06 F6 | 	mov	local01, #0
10760     A7 20 02 FB | 	rdlong	local02, fp
10764     0C 4E 05 F1 | 	add	fp, #12
10768     A7 22 02 FB | 	rdlong	local03, fp
1076c     0C 4E 85 F1 | 	sub	fp, #12
10770     11 21 5A F2 | 	cmps	local02, local03 wcz
10774     01 1E 66 16 |  if_a	neg	local01, #1
10778     A7 1E 62 FC | 	wrlong	local01, fp
1077c     40 02 90 FD | 	jmp	#LR__1273
10780                 | LR__1265
10780                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
10780     08 4E 05 F1 | 	add	fp, #8
10784     A7 1E 02 FB | 	rdlong	local01, fp
10788     08 4E 85 F1 | 	sub	fp, #8
1078c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10790     14 4E 05 A1 |  if_e	add	fp, #20
10794     A7 24 02 AB |  if_e	rdlong	local04, fp
10798     14 4E 85 A1 |  if_e	sub	fp, #20
1079c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
107a0     24 00 90 5D |  if_ne	jmp	#LR__1266
107a4     00 1E 06 F6 | 	mov	local01, #0
107a8     A7 20 02 FB | 	rdlong	local02, fp
107ac     0C 4E 05 F1 | 	add	fp, #12
107b0     A7 22 02 FB | 	rdlong	local03, fp
107b4     0C 4E 85 F1 | 	sub	fp, #12
107b8     11 21 5A F2 | 	cmps	local02, local03 wcz
107bc     01 1E 66 16 |  if_a	neg	local01, #1
107c0     A7 1E 62 FC | 	wrlong	local01, fp
107c4     F8 01 90 FD | 	jmp	#LR__1273
107c8                 | LR__1266
107c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
107c8     08 4E 05 F1 | 	add	fp, #8
107cc     A7 1E 02 FB | 	rdlong	local01, fp
107d0     08 4E 85 F1 | 	sub	fp, #8
107d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
107d8     14 4E 05 A1 |  if_e	add	fp, #20
107dc     A7 22 02 AB |  if_e	rdlong	local03, fp
107e0     14 4E 85 A1 |  if_e	sub	fp, #20
107e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
107e8     34 00 90 5D |  if_ne	jmp	#LR__1267
107ec     00 1E 06 F6 | 	mov	local01, #0
107f0     A7 12 02 FB | 	rdlong	arg01, fp
107f4     40 CC B0 FD | 	call	#__system___float_fromuns
107f8     FD 12 02 F6 | 	mov	arg01, result1
107fc     0C 4E 05 F1 | 	add	fp, #12
10800     A7 14 02 FB | 	rdlong	arg02, fp
10804     0C 4E 85 F1 | 	sub	fp, #12
10808     01 16 66 F6 | 	neg	arg03, #1
1080c     60 D4 B0 FD | 	call	#__system___float_cmp
10810     01 FA 55 F2 | 	cmps	result1, #1 wc
10814     00 1E 26 36 |  if_ae	not	local01, #0
10818     A7 1E 62 FC | 	wrlong	local01, fp
1081c     A0 01 90 FD | 	jmp	#LR__1273
10820                 | LR__1267
10820                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
10820     08 4E 05 F1 | 	add	fp, #8
10824     A7 1E 02 FB | 	rdlong	local01, fp
10828     08 4E 85 F1 | 	sub	fp, #8
1082c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10830     14 4E 05 A1 |  if_e	add	fp, #20
10834     A7 22 02 AB |  if_e	rdlong	local03, fp
10838     14 4E 85 A1 |  if_e	sub	fp, #20
1083c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10840     24 00 90 5D |  if_ne	jmp	#LR__1268
10844     00 1E 06 F6 | 	mov	local01, #0
10848     A7 20 02 FB | 	rdlong	local02, fp
1084c     0C 4E 05 F1 | 	add	fp, #12
10850     A7 22 02 FB | 	rdlong	local03, fp
10854     0C 4E 85 F1 | 	sub	fp, #12
10858     11 21 5A F2 | 	cmps	local02, local03 wcz
1085c     01 1E 66 16 |  if_a	neg	local01, #1
10860     A7 1E 62 FC | 	wrlong	local01, fp
10864     58 01 90 FD | 	jmp	#LR__1273
10868                 | LR__1268
10868                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
10868     08 4E 05 F1 | 	add	fp, #8
1086c     A7 1E 02 FB | 	rdlong	local01, fp
10870     08 4E 85 F1 | 	sub	fp, #8
10874     1D 1E 0E F2 | 	cmp	local01, #29 wz
10878     14 4E 05 A1 |  if_e	add	fp, #20
1087c     A7 22 02 AB |  if_e	rdlong	local03, fp
10880     14 4E 85 A1 |  if_e	sub	fp, #20
10884     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10888     24 00 90 5D |  if_ne	jmp	#LR__1269
1088c     00 1E 06 F6 | 	mov	local01, #0
10890     A7 20 02 FB | 	rdlong	local02, fp
10894     0C 4E 05 F1 | 	add	fp, #12
10898     A7 22 02 FB | 	rdlong	local03, fp
1089c     0C 4E 85 F1 | 	sub	fp, #12
108a0     11 21 1A F2 | 	cmp	local02, local03 wcz
108a4     01 1E 66 16 |  if_a	neg	local01, #1
108a8     A7 1E 62 FC | 	wrlong	local01, fp
108ac     10 01 90 FD | 	jmp	#LR__1273
108b0                 | LR__1269
108b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
108b0     08 4E 05 F1 | 	add	fp, #8
108b4     A7 1E 02 FB | 	rdlong	local01, fp
108b8     08 4E 85 F1 | 	sub	fp, #8
108bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
108c0     14 4E 05 A1 |  if_e	add	fp, #20
108c4     A7 22 02 AB |  if_e	rdlong	local03, fp
108c8     14 4E 85 A1 |  if_e	sub	fp, #20
108cc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
108d0     30 00 90 5D |  if_ne	jmp	#LR__1270
108d4     00 1E 06 F6 | 	mov	local01, #0
108d8     A7 12 02 FB | 	rdlong	arg01, fp
108dc     A8 D1 BF FD | 	call	#_convertstring
108e0     FD 12 02 F6 | 	mov	arg01, result1
108e4     0C 4E 05 F1 | 	add	fp, #12
108e8     A7 14 02 FB | 	rdlong	arg02, fp
108ec     0C 4E 85 F1 | 	sub	fp, #12
108f0     4C A4 B0 FD | 	call	#__system___string_cmp
108f4     01 FA 55 F2 | 	cmps	result1, #1 wc
108f8     00 1E 26 36 |  if_ae	not	local01, #0
108fc     A7 1E 62 FC | 	wrlong	local01, fp
10900     BC 00 90 FD | 	jmp	#LR__1273
10904                 | LR__1270
10904                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
10904     08 4E 05 F1 | 	add	fp, #8
10908     A7 1E 02 FB | 	rdlong	local01, fp
1090c     08 4E 85 F1 | 	sub	fp, #8
10910     1F 1E 0E F2 | 	cmp	local01, #31 wz
10914     14 4E 05 A1 |  if_e	add	fp, #20
10918     A7 22 02 AB |  if_e	rdlong	local03, fp
1091c     14 4E 85 A1 |  if_e	sub	fp, #20
10920     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10924     34 00 90 5D |  if_ne	jmp	#LR__1271
10928     00 1E 06 F6 | 	mov	local01, #0
1092c     A7 20 02 FB | 	rdlong	local02, fp
10930     0C 4E 05 F1 | 	add	fp, #12
10934     A7 12 02 FB | 	rdlong	arg01, fp
10938     0C 4E 85 F1 | 	sub	fp, #12
1093c     48 D1 BF FD | 	call	#_convertstring
10940     FD 14 02 F6 | 	mov	arg02, result1
10944     10 13 02 F6 | 	mov	arg01, local02
10948     F4 A3 B0 FD | 	call	#__system___string_cmp
1094c     01 FA 55 F2 | 	cmps	result1, #1 wc
10950     00 1E 26 36 |  if_ae	not	local01, #0
10954     A7 1E 62 FC | 	wrlong	local01, fp
10958     64 00 90 FD | 	jmp	#LR__1273
1095c                 | LR__1271
1095c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1095c     08 4E 05 F1 | 	add	fp, #8
10960     A7 1E 02 FB | 	rdlong	local01, fp
10964     08 4E 85 F1 | 	sub	fp, #8
10968     2B 1E 0E F2 | 	cmp	local01, #43 wz
1096c     14 4E 05 A1 |  if_e	add	fp, #20
10970     A7 22 02 AB |  if_e	rdlong	local03, fp
10974     14 4E 85 A1 |  if_e	sub	fp, #20
10978     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1097c     3C 00 90 5D |  if_ne	jmp	#LR__1272
10980     00 1E 06 F6 | 	mov	local01, #0
10984     A7 12 02 FB | 	rdlong	arg01, fp
10988     FC D0 BF FD | 	call	#_convertstring
1098c     FD 20 02 F6 | 	mov	local02, result1
10990     0C 4E 05 F1 | 	add	fp, #12
10994     A7 12 02 FB | 	rdlong	arg01, fp
10998     0C 4E 85 F1 | 	sub	fp, #12
1099c     E8 D0 BF FD | 	call	#_convertstring
109a0     FD 14 02 F6 | 	mov	arg02, result1
109a4     10 13 02 F6 | 	mov	arg01, local02
109a8     94 A3 B0 FD | 	call	#__system___string_cmp
109ac     01 FA 55 F2 | 	cmps	result1, #1 wc
109b0     00 1E 26 36 |  if_ae	not	local01, #0
109b4     A7 1E 62 FC | 	wrlong	local01, fp
109b8     04 00 90 FD | 	jmp	#LR__1273
109bc                 | LR__1272
109bc     A7 00 68 FC | 	wrlong	#0, fp
109c0                 | LR__1273
109c0     08 4E 05 F1 | 	add	fp, #8
109c4     A7 38 68 FC | 	wrlong	#28, fp
109c8     08 4E 85 F1 | 	sub	fp, #8
109cc     A7 12 02 F6 | 	mov	arg01, fp
109d0     BC 91 BF FD | 	call	#_push
109d4     A7 F0 03 F6 | 	mov	ptra, fp
109d8     B2 00 A0 FD | 	call	#popregs_
109dc                 | _do_gt_ret
109dc     2D 00 64 FD | 	ret
109e0                 | 
109e0                 | ' 
109e0                 | ' sub do_lt
109e0                 | _do_lt
109e0     05 4A 05 F6 | 	mov	COUNT_, #5
109e4     A8 00 A0 FD | 	call	#pushregs_
109e8     18 F0 07 F1 | 	add	ptra, #24
109ec     08 91 BF FD | 	call	#_pop
109f0     FD 1E 02 F6 | 	mov	local01, result1
109f4     FE 20 02 F6 | 	mov	local02, result2
109f8     FF 22 02 F6 | 	mov	local03, result3
109fc     0C 4E 05 F1 | 	add	fp, #12
10a00     A7 1E 62 FC | 	wrlong	local01, fp
10a04     04 4E 05 F1 | 	add	fp, #4
10a08     A7 20 62 FC | 	wrlong	local02, fp
10a0c     04 4E 05 F1 | 	add	fp, #4
10a10     A7 22 62 FC | 	wrlong	local03, fp
10a14     14 4E 85 F1 | 	sub	fp, #20
10a18     DC 90 BF FD | 	call	#_pop
10a1c     FF 22 02 F6 | 	mov	local03, result3
10a20     A7 FA 61 FC | 	wrlong	result1, fp
10a24     04 4E 05 F1 | 	add	fp, #4
10a28     A7 FC 61 FC | 	wrlong	result2, fp
10a2c     04 4E 05 F1 | 	add	fp, #4
10a30     A7 22 62 FC | 	wrlong	local03, fp
10a34                 | ' t2=pop()
10a34                 | ' t1=pop()
10a34                 | ' 
10a34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
10a34     08 4E 85 F1 | 	sub	fp, #8
10a38     1F 22 0E F2 | 	cmp	local03, #31 wz
10a3c     14 4E 05 A1 |  if_e	add	fp, #20
10a40     A7 24 02 AB |  if_e	rdlong	local04, fp
10a44     14 4E 85 A1 |  if_e	sub	fp, #20
10a48     12 23 02 A6 |  if_e	mov	local03, local04
10a4c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10a50     28 00 90 5D |  if_ne	jmp	#LR__1280
10a54     00 1E 06 F6 | 	mov	local01, #0
10a58     A7 12 02 FB | 	rdlong	arg01, fp
10a5c     0C 4E 05 F1 | 	add	fp, #12
10a60     A7 14 02 FB | 	rdlong	arg02, fp
10a64     0C 4E 85 F1 | 	sub	fp, #12
10a68     D4 A2 B0 FD | 	call	#__system___string_cmp
10a6c     00 FA 55 F2 | 	cmps	result1, #0 wc
10a70     00 1E 26 C6 |  if_b	not	local01, #0
10a74     A7 1E 62 FC | 	wrlong	local01, fp
10a78     0C 04 90 FD | 	jmp	#LR__1293
10a7c                 | LR__1280
10a7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
10a7c     08 4E 05 F1 | 	add	fp, #8
10a80     A7 1E 02 FB | 	rdlong	local01, fp
10a84     08 4E 85 F1 | 	sub	fp, #8
10a88     1E 1E 0E F2 | 	cmp	local01, #30 wz
10a8c     14 4E 05 A1 |  if_e	add	fp, #20
10a90     A7 24 02 AB |  if_e	rdlong	local04, fp
10a94     14 4E 85 A1 |  if_e	sub	fp, #20
10a98     12 23 02 A6 |  if_e	mov	local03, local04
10a9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10aa0     2C 00 90 5D |  if_ne	jmp	#LR__1281
10aa4     00 1E 06 F6 | 	mov	local01, #0
10aa8     A7 12 02 FB | 	rdlong	arg01, fp
10aac     0C 4E 05 F1 | 	add	fp, #12
10ab0     A7 14 02 FB | 	rdlong	arg02, fp
10ab4     0C 4E 85 F1 | 	sub	fp, #12
10ab8     01 16 06 F6 | 	mov	arg03, #1
10abc     B0 D1 B0 FD | 	call	#__system___float_cmp
10ac0     00 FA 55 F2 | 	cmps	result1, #0 wc
10ac4     00 1E 26 C6 |  if_b	not	local01, #0
10ac8     A7 1E 62 FC | 	wrlong	local01, fp
10acc     B8 03 90 FD | 	jmp	#LR__1293
10ad0                 | LR__1281
10ad0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
10ad0     08 4E 05 F1 | 	add	fp, #8
10ad4     A7 1E 02 FB | 	rdlong	local01, fp
10ad8     08 4E 85 F1 | 	sub	fp, #8
10adc     1E 1E 0E F2 | 	cmp	local01, #30 wz
10ae0     14 4E 05 A1 |  if_e	add	fp, #20
10ae4     A7 24 02 AB |  if_e	rdlong	local04, fp
10ae8     14 4E 85 A1 |  if_e	sub	fp, #20
10aec     12 23 02 A6 |  if_e	mov	local03, local04
10af0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10af4     48 00 90 5D |  if_ne	jmp	#LR__1282
10af8     00 1E 06 F6 | 	mov	local01, #0
10afc     A7 20 02 FB | 	rdlong	local02, fp
10b00     0C 4E 05 F1 | 	add	fp, #12
10b04     A7 12 02 FB | 	rdlong	arg01, fp
10b08     0C 4E 85 F1 | 	sub	fp, #12
10b0c     09 13 52 F6 | 	abs	arg01, arg01 wc
10b10     1F 26 C6 C9 |  if_b	decod	local05, #31
10b14     00 26 06 36 |  if_ae	mov	local05, #0
10b18     1C C9 B0 FD | 	call	#__system___float_fromuns
10b1c     13 FB 61 F5 | 	xor	result1, local05
10b20     FD 14 02 F6 | 	mov	arg02, result1
10b24     10 13 02 F6 | 	mov	arg01, local02
10b28     01 16 06 F6 | 	mov	arg03, #1
10b2c     40 D1 B0 FD | 	call	#__system___float_cmp
10b30     00 FA 55 F2 | 	cmps	result1, #0 wc
10b34     00 1E 26 C6 |  if_b	not	local01, #0
10b38     A7 1E 62 FC | 	wrlong	local01, fp
10b3c     48 03 90 FD | 	jmp	#LR__1293
10b40                 | LR__1282
10b40                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
10b40     08 4E 05 F1 | 	add	fp, #8
10b44     A7 1E 02 FB | 	rdlong	local01, fp
10b48     08 4E 85 F1 | 	sub	fp, #8
10b4c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10b50     14 4E 05 A1 |  if_e	add	fp, #20
10b54     A7 24 02 AB |  if_e	rdlong	local04, fp
10b58     14 4E 85 A1 |  if_e	sub	fp, #20
10b5c     12 23 02 A6 |  if_e	mov	local03, local04
10b60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10b64     38 00 90 5D |  if_ne	jmp	#LR__1283
10b68     00 1E 06 F6 | 	mov	local01, #0
10b6c     A7 20 02 FB | 	rdlong	local02, fp
10b70     0C 4E 05 F1 | 	add	fp, #12
10b74     A7 12 02 FB | 	rdlong	arg01, fp
10b78     0C 4E 85 F1 | 	sub	fp, #12
10b7c     B8 C8 B0 FD | 	call	#__system___float_fromuns
10b80     FD 14 02 F6 | 	mov	arg02, result1
10b84     10 13 02 F6 | 	mov	arg01, local02
10b88     01 16 06 F6 | 	mov	arg03, #1
10b8c     E0 D0 B0 FD | 	call	#__system___float_cmp
10b90     00 FA 55 F2 | 	cmps	result1, #0 wc
10b94     00 1E 26 C6 |  if_b	not	local01, #0
10b98     A7 1E 62 FC | 	wrlong	local01, fp
10b9c     E8 02 90 FD | 	jmp	#LR__1293
10ba0                 | LR__1283
10ba0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
10ba0     08 4E 05 F1 | 	add	fp, #8
10ba4     A7 1E 02 FB | 	rdlong	local01, fp
10ba8     08 4E 85 F1 | 	sub	fp, #8
10bac     1C 1E 0E F2 | 	cmp	local01, #28 wz
10bb0     14 4E 05 A1 |  if_e	add	fp, #20
10bb4     A7 24 02 AB |  if_e	rdlong	local04, fp
10bb8     14 4E 85 A1 |  if_e	sub	fp, #20
10bbc     12 23 02 A6 |  if_e	mov	local03, local04
10bc0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10bc4     44 00 90 5D |  if_ne	jmp	#LR__1284
10bc8     00 1E 06 F6 | 	mov	local01, #0
10bcc     A7 12 02 FB | 	rdlong	arg01, fp
10bd0     09 13 52 F6 | 	abs	arg01, arg01 wc
10bd4     1F 26 C6 C9 |  if_b	decod	local05, #31
10bd8     00 26 06 36 |  if_ae	mov	local05, #0
10bdc     58 C8 B0 FD | 	call	#__system___float_fromuns
10be0     13 FB 61 F5 | 	xor	result1, local05
10be4     FD 12 02 F6 | 	mov	arg01, result1
10be8     0C 4E 05 F1 | 	add	fp, #12
10bec     A7 14 02 FB | 	rdlong	arg02, fp
10bf0     0C 4E 85 F1 | 	sub	fp, #12
10bf4     01 16 06 F6 | 	mov	arg03, #1
10bf8     74 D0 B0 FD | 	call	#__system___float_cmp
10bfc     00 FA 55 F2 | 	cmps	result1, #0 wc
10c00     00 1E 26 C6 |  if_b	not	local01, #0
10c04     A7 1E 62 FC | 	wrlong	local01, fp
10c08     7C 02 90 FD | 	jmp	#LR__1293
10c0c                 | LR__1284
10c0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
10c0c     08 4E 05 F1 | 	add	fp, #8
10c10     A7 1E 02 FB | 	rdlong	local01, fp
10c14     08 4E 85 F1 | 	sub	fp, #8
10c18     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c1c     14 4E 05 A1 |  if_e	add	fp, #20
10c20     A7 24 02 AB |  if_e	rdlong	local04, fp
10c24     14 4E 85 A1 |  if_e	sub	fp, #20
10c28     12 23 02 A6 |  if_e	mov	local03, local04
10c2c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10c30     20 00 90 5D |  if_ne	jmp	#LR__1285
10c34     A7 20 02 FB | 	rdlong	local02, fp
10c38     0C 4E 05 F1 | 	add	fp, #12
10c3c     A7 22 02 FB | 	rdlong	local03, fp
10c40     0C 4E 85 F1 | 	sub	fp, #12
10c44     11 21 52 F2 | 	cmps	local02, local03 wc
10c48     0F 1F A2 F1 | 	subx	local01, local01
10c4c     A7 1E 62 FC | 	wrlong	local01, fp
10c50     34 02 90 FD | 	jmp	#LR__1293
10c54                 | LR__1285
10c54                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
10c54     08 4E 05 F1 | 	add	fp, #8
10c58     A7 1E 02 FB | 	rdlong	local01, fp
10c5c     08 4E 85 F1 | 	sub	fp, #8
10c60     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c64     14 4E 05 A1 |  if_e	add	fp, #20
10c68     A7 24 02 AB |  if_e	rdlong	local04, fp
10c6c     14 4E 85 A1 |  if_e	sub	fp, #20
10c70     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10c74     20 00 90 5D |  if_ne	jmp	#LR__1286
10c78     A7 20 02 FB | 	rdlong	local02, fp
10c7c     0C 4E 05 F1 | 	add	fp, #12
10c80     A7 22 02 FB | 	rdlong	local03, fp
10c84     0C 4E 85 F1 | 	sub	fp, #12
10c88     11 21 52 F2 | 	cmps	local02, local03 wc
10c8c     0F 1F A2 F1 | 	subx	local01, local01
10c90     A7 1E 62 FC | 	wrlong	local01, fp
10c94     F0 01 90 FD | 	jmp	#LR__1293
10c98                 | LR__1286
10c98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
10c98     08 4E 05 F1 | 	add	fp, #8
10c9c     A7 1E 02 FB | 	rdlong	local01, fp
10ca0     08 4E 85 F1 | 	sub	fp, #8
10ca4     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ca8     14 4E 05 A1 |  if_e	add	fp, #20
10cac     A7 22 02 AB |  if_e	rdlong	local03, fp
10cb0     14 4E 85 A1 |  if_e	sub	fp, #20
10cb4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10cb8     34 00 90 5D |  if_ne	jmp	#LR__1287
10cbc     00 1E 06 F6 | 	mov	local01, #0
10cc0     A7 12 02 FB | 	rdlong	arg01, fp
10cc4     70 C7 B0 FD | 	call	#__system___float_fromuns
10cc8     FD 12 02 F6 | 	mov	arg01, result1
10ccc     0C 4E 05 F1 | 	add	fp, #12
10cd0     A7 14 02 FB | 	rdlong	arg02, fp
10cd4     0C 4E 85 F1 | 	sub	fp, #12
10cd8     01 16 06 F6 | 	mov	arg03, #1
10cdc     90 CF B0 FD | 	call	#__system___float_cmp
10ce0     00 FA 55 F2 | 	cmps	result1, #0 wc
10ce4     00 1E 26 C6 |  if_b	not	local01, #0
10ce8     A7 1E 62 FC | 	wrlong	local01, fp
10cec     98 01 90 FD | 	jmp	#LR__1293
10cf0                 | LR__1287
10cf0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
10cf0     08 4E 05 F1 | 	add	fp, #8
10cf4     A7 1E 02 FB | 	rdlong	local01, fp
10cf8     08 4E 85 F1 | 	sub	fp, #8
10cfc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10d00     14 4E 05 A1 |  if_e	add	fp, #20
10d04     A7 22 02 AB |  if_e	rdlong	local03, fp
10d08     14 4E 85 A1 |  if_e	sub	fp, #20
10d0c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10d10     20 00 90 5D |  if_ne	jmp	#LR__1288
10d14     A7 20 02 FB | 	rdlong	local02, fp
10d18     0C 4E 05 F1 | 	add	fp, #12
10d1c     A7 22 02 FB | 	rdlong	local03, fp
10d20     0C 4E 85 F1 | 	sub	fp, #12
10d24     11 21 52 F2 | 	cmps	local02, local03 wc
10d28     0F 1F A2 F1 | 	subx	local01, local01
10d2c     A7 1E 62 FC | 	wrlong	local01, fp
10d30     54 01 90 FD | 	jmp	#LR__1293
10d34                 | LR__1288
10d34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
10d34     08 4E 05 F1 | 	add	fp, #8
10d38     A7 1E 02 FB | 	rdlong	local01, fp
10d3c     08 4E 85 F1 | 	sub	fp, #8
10d40     1D 1E 0E F2 | 	cmp	local01, #29 wz
10d44     14 4E 05 A1 |  if_e	add	fp, #20
10d48     A7 22 02 AB |  if_e	rdlong	local03, fp
10d4c     14 4E 85 A1 |  if_e	sub	fp, #20
10d50     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10d54     20 00 90 5D |  if_ne	jmp	#LR__1289
10d58     A7 20 02 FB | 	rdlong	local02, fp
10d5c     0C 4E 05 F1 | 	add	fp, #12
10d60     A7 22 02 FB | 	rdlong	local03, fp
10d64     0C 4E 85 F1 | 	sub	fp, #12
10d68     11 21 12 F2 | 	cmp	local02, local03 wc
10d6c     0F 1F A2 F1 | 	subx	local01, local01
10d70     A7 1E 62 FC | 	wrlong	local01, fp
10d74     10 01 90 FD | 	jmp	#LR__1293
10d78                 | LR__1289
10d78                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
10d78     08 4E 05 F1 | 	add	fp, #8
10d7c     A7 1E 02 FB | 	rdlong	local01, fp
10d80     08 4E 85 F1 | 	sub	fp, #8
10d84     2B 1E 0E F2 | 	cmp	local01, #43 wz
10d88     14 4E 05 A1 |  if_e	add	fp, #20
10d8c     A7 22 02 AB |  if_e	rdlong	local03, fp
10d90     14 4E 85 A1 |  if_e	sub	fp, #20
10d94     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10d98     30 00 90 5D |  if_ne	jmp	#LR__1290
10d9c     00 1E 06 F6 | 	mov	local01, #0
10da0     A7 12 02 FB | 	rdlong	arg01, fp
10da4     E0 CC BF FD | 	call	#_convertstring
10da8     FD 12 02 F6 | 	mov	arg01, result1
10dac     0C 4E 05 F1 | 	add	fp, #12
10db0     A7 14 02 FB | 	rdlong	arg02, fp
10db4     0C 4E 85 F1 | 	sub	fp, #12
10db8     84 9F B0 FD | 	call	#__system___string_cmp
10dbc     00 FA 55 F2 | 	cmps	result1, #0 wc
10dc0     00 1E 26 C6 |  if_b	not	local01, #0
10dc4     A7 1E 62 FC | 	wrlong	local01, fp
10dc8     BC 00 90 FD | 	jmp	#LR__1293
10dcc                 | LR__1290
10dcc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
10dcc     08 4E 05 F1 | 	add	fp, #8
10dd0     A7 1E 02 FB | 	rdlong	local01, fp
10dd4     08 4E 85 F1 | 	sub	fp, #8
10dd8     1F 1E 0E F2 | 	cmp	local01, #31 wz
10ddc     14 4E 05 A1 |  if_e	add	fp, #20
10de0     A7 22 02 AB |  if_e	rdlong	local03, fp
10de4     14 4E 85 A1 |  if_e	sub	fp, #20
10de8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10dec     34 00 90 5D |  if_ne	jmp	#LR__1291
10df0     00 1E 06 F6 | 	mov	local01, #0
10df4     A7 20 02 FB | 	rdlong	local02, fp
10df8     0C 4E 05 F1 | 	add	fp, #12
10dfc     A7 12 02 FB | 	rdlong	arg01, fp
10e00     0C 4E 85 F1 | 	sub	fp, #12
10e04     80 CC BF FD | 	call	#_convertstring
10e08     FD 14 02 F6 | 	mov	arg02, result1
10e0c     10 13 02 F6 | 	mov	arg01, local02
10e10     2C 9F B0 FD | 	call	#__system___string_cmp
10e14     00 FA 55 F2 | 	cmps	result1, #0 wc
10e18     00 1E 26 C6 |  if_b	not	local01, #0
10e1c     A7 1E 62 FC | 	wrlong	local01, fp
10e20     64 00 90 FD | 	jmp	#LR__1293
10e24                 | LR__1291
10e24                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
10e24     08 4E 05 F1 | 	add	fp, #8
10e28     A7 1E 02 FB | 	rdlong	local01, fp
10e2c     08 4E 85 F1 | 	sub	fp, #8
10e30     2B 1E 0E F2 | 	cmp	local01, #43 wz
10e34     14 4E 05 A1 |  if_e	add	fp, #20
10e38     A7 22 02 AB |  if_e	rdlong	local03, fp
10e3c     14 4E 85 A1 |  if_e	sub	fp, #20
10e40     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10e44     3C 00 90 5D |  if_ne	jmp	#LR__1292
10e48     00 1E 06 F6 | 	mov	local01, #0
10e4c     A7 12 02 FB | 	rdlong	arg01, fp
10e50     34 CC BF FD | 	call	#_convertstring
10e54     FD 20 02 F6 | 	mov	local02, result1
10e58     0C 4E 05 F1 | 	add	fp, #12
10e5c     A7 12 02 FB | 	rdlong	arg01, fp
10e60     0C 4E 85 F1 | 	sub	fp, #12
10e64     20 CC BF FD | 	call	#_convertstring
10e68     FD 14 02 F6 | 	mov	arg02, result1
10e6c     10 13 02 F6 | 	mov	arg01, local02
10e70     CC 9E B0 FD | 	call	#__system___string_cmp
10e74     00 FA 55 F2 | 	cmps	result1, #0 wc
10e78     00 1E 26 C6 |  if_b	not	local01, #0
10e7c     A7 1E 62 FC | 	wrlong	local01, fp
10e80     04 00 90 FD | 	jmp	#LR__1293
10e84                 | LR__1292
10e84     A7 00 68 FC | 	wrlong	#0, fp
10e88                 | LR__1293
10e88     08 4E 05 F1 | 	add	fp, #8
10e8c     A7 38 68 FC | 	wrlong	#28, fp
10e90     08 4E 85 F1 | 	sub	fp, #8
10e94     A7 12 02 F6 | 	mov	arg01, fp
10e98     F4 8C BF FD | 	call	#_push
10e9c     A7 F0 03 F6 | 	mov	ptra, fp
10ea0     B2 00 A0 FD | 	call	#popregs_
10ea4                 | _do_lt_ret
10ea4     2D 00 64 FD | 	ret
10ea8                 | 
10ea8                 | ' 
10ea8                 | ' sub do_ge
10ea8                 | _do_ge
10ea8     05 4A 05 F6 | 	mov	COUNT_, #5
10eac     A8 00 A0 FD | 	call	#pushregs_
10eb0     18 F0 07 F1 | 	add	ptra, #24
10eb4     40 8C BF FD | 	call	#_pop
10eb8     FD 1E 02 F6 | 	mov	local01, result1
10ebc     FE 20 02 F6 | 	mov	local02, result2
10ec0     FF 22 02 F6 | 	mov	local03, result3
10ec4     0C 4E 05 F1 | 	add	fp, #12
10ec8     A7 1E 62 FC | 	wrlong	local01, fp
10ecc     04 4E 05 F1 | 	add	fp, #4
10ed0     A7 20 62 FC | 	wrlong	local02, fp
10ed4     04 4E 05 F1 | 	add	fp, #4
10ed8     A7 22 62 FC | 	wrlong	local03, fp
10edc     14 4E 85 F1 | 	sub	fp, #20
10ee0     14 8C BF FD | 	call	#_pop
10ee4     FF 22 02 F6 | 	mov	local03, result3
10ee8     A7 FA 61 FC | 	wrlong	result1, fp
10eec     04 4E 05 F1 | 	add	fp, #4
10ef0     A7 FC 61 FC | 	wrlong	result2, fp
10ef4     04 4E 05 F1 | 	add	fp, #4
10ef8     A7 22 62 FC | 	wrlong	local03, fp
10efc                 | ' t2=pop()
10efc                 | ' t1=pop()
10efc                 | ' 
10efc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
10efc     08 4E 85 F1 | 	sub	fp, #8
10f00     1F 22 0E F2 | 	cmp	local03, #31 wz
10f04     14 4E 05 A1 |  if_e	add	fp, #20
10f08     A7 24 02 AB |  if_e	rdlong	local04, fp
10f0c     14 4E 85 A1 |  if_e	sub	fp, #20
10f10     12 23 02 A6 |  if_e	mov	local03, local04
10f14     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10f18     28 00 90 5D |  if_ne	jmp	#LR__1300
10f1c     00 1E 06 F6 | 	mov	local01, #0
10f20     A7 12 02 FB | 	rdlong	arg01, fp
10f24     0C 4E 05 F1 | 	add	fp, #12
10f28     A7 14 02 FB | 	rdlong	arg02, fp
10f2c     0C 4E 85 F1 | 	sub	fp, #12
10f30     0C 9E B0 FD | 	call	#__system___string_cmp
10f34     00 FA 55 F2 | 	cmps	result1, #0 wc
10f38     00 1E 26 36 |  if_ae	not	local01, #0
10f3c     A7 1E 62 FC | 	wrlong	local01, fp
10f40     1C 04 90 FD | 	jmp	#LR__1313
10f44                 | LR__1300
10f44                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
10f44     08 4E 05 F1 | 	add	fp, #8
10f48     A7 1E 02 FB | 	rdlong	local01, fp
10f4c     08 4E 85 F1 | 	sub	fp, #8
10f50     1E 1E 0E F2 | 	cmp	local01, #30 wz
10f54     14 4E 05 A1 |  if_e	add	fp, #20
10f58     A7 24 02 AB |  if_e	rdlong	local04, fp
10f5c     14 4E 85 A1 |  if_e	sub	fp, #20
10f60     12 23 02 A6 |  if_e	mov	local03, local04
10f64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10f68     2C 00 90 5D |  if_ne	jmp	#LR__1301
10f6c     00 1E 06 F6 | 	mov	local01, #0
10f70     A7 12 02 FB | 	rdlong	arg01, fp
10f74     0C 4E 05 F1 | 	add	fp, #12
10f78     A7 14 02 FB | 	rdlong	arg02, fp
10f7c     0C 4E 85 F1 | 	sub	fp, #12
10f80     01 16 66 F6 | 	neg	arg03, #1
10f84     E8 CC B0 FD | 	call	#__system___float_cmp
10f88     00 FA 55 F2 | 	cmps	result1, #0 wc
10f8c     00 1E 26 36 |  if_ae	not	local01, #0
10f90     A7 1E 62 FC | 	wrlong	local01, fp
10f94     C8 03 90 FD | 	jmp	#LR__1313
10f98                 | LR__1301
10f98                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
10f98     08 4E 05 F1 | 	add	fp, #8
10f9c     A7 1E 02 FB | 	rdlong	local01, fp
10fa0     08 4E 85 F1 | 	sub	fp, #8
10fa4     1E 1E 0E F2 | 	cmp	local01, #30 wz
10fa8     14 4E 05 A1 |  if_e	add	fp, #20
10fac     A7 24 02 AB |  if_e	rdlong	local04, fp
10fb0     14 4E 85 A1 |  if_e	sub	fp, #20
10fb4     12 23 02 A6 |  if_e	mov	local03, local04
10fb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10fbc     48 00 90 5D |  if_ne	jmp	#LR__1302
10fc0     00 1E 06 F6 | 	mov	local01, #0
10fc4     A7 20 02 FB | 	rdlong	local02, fp
10fc8     0C 4E 05 F1 | 	add	fp, #12
10fcc     A7 12 02 FB | 	rdlong	arg01, fp
10fd0     0C 4E 85 F1 | 	sub	fp, #12
10fd4     09 13 52 F6 | 	abs	arg01, arg01 wc
10fd8     1F 26 C6 C9 |  if_b	decod	local05, #31
10fdc     00 26 06 36 |  if_ae	mov	local05, #0
10fe0     54 C4 B0 FD | 	call	#__system___float_fromuns
10fe4     13 FB 61 F5 | 	xor	result1, local05
10fe8     FD 14 02 F6 | 	mov	arg02, result1
10fec     10 13 02 F6 | 	mov	arg01, local02
10ff0     01 16 66 F6 | 	neg	arg03, #1
10ff4     78 CC B0 FD | 	call	#__system___float_cmp
10ff8     00 FA 55 F2 | 	cmps	result1, #0 wc
10ffc     00 1E 26 36 |  if_ae	not	local01, #0
11000     A7 1E 62 FC | 	wrlong	local01, fp
11004     58 03 90 FD | 	jmp	#LR__1313
11008                 | LR__1302
11008                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
11008     08 4E 05 F1 | 	add	fp, #8
1100c     A7 1E 02 FB | 	rdlong	local01, fp
11010     08 4E 85 F1 | 	sub	fp, #8
11014     1E 1E 0E F2 | 	cmp	local01, #30 wz
11018     14 4E 05 A1 |  if_e	add	fp, #20
1101c     A7 24 02 AB |  if_e	rdlong	local04, fp
11020     14 4E 85 A1 |  if_e	sub	fp, #20
11024     12 23 02 A6 |  if_e	mov	local03, local04
11028     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1102c     38 00 90 5D |  if_ne	jmp	#LR__1303
11030     00 1E 06 F6 | 	mov	local01, #0
11034     A7 20 02 FB | 	rdlong	local02, fp
11038     0C 4E 05 F1 | 	add	fp, #12
1103c     A7 12 02 FB | 	rdlong	arg01, fp
11040     0C 4E 85 F1 | 	sub	fp, #12
11044     F0 C3 B0 FD | 	call	#__system___float_fromuns
11048     FD 14 02 F6 | 	mov	arg02, result1
1104c     10 13 02 F6 | 	mov	arg01, local02
11050     01 16 66 F6 | 	neg	arg03, #1
11054     18 CC B0 FD | 	call	#__system___float_cmp
11058     00 FA 55 F2 | 	cmps	result1, #0 wc
1105c     00 1E 26 36 |  if_ae	not	local01, #0
11060     A7 1E 62 FC | 	wrlong	local01, fp
11064     F8 02 90 FD | 	jmp	#LR__1313
11068                 | LR__1303
11068                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
11068     08 4E 05 F1 | 	add	fp, #8
1106c     A7 1E 02 FB | 	rdlong	local01, fp
11070     08 4E 85 F1 | 	sub	fp, #8
11074     1C 1E 0E F2 | 	cmp	local01, #28 wz
11078     14 4E 05 A1 |  if_e	add	fp, #20
1107c     A7 24 02 AB |  if_e	rdlong	local04, fp
11080     14 4E 85 A1 |  if_e	sub	fp, #20
11084     12 23 02 A6 |  if_e	mov	local03, local04
11088     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1108c     44 00 90 5D |  if_ne	jmp	#LR__1304
11090     00 1E 06 F6 | 	mov	local01, #0
11094     A7 12 02 FB | 	rdlong	arg01, fp
11098     09 13 52 F6 | 	abs	arg01, arg01 wc
1109c     1F 26 C6 C9 |  if_b	decod	local05, #31
110a0     00 26 06 36 |  if_ae	mov	local05, #0
110a4     90 C3 B0 FD | 	call	#__system___float_fromuns
110a8     13 FB 61 F5 | 	xor	result1, local05
110ac     FD 12 02 F6 | 	mov	arg01, result1
110b0     0C 4E 05 F1 | 	add	fp, #12
110b4     A7 14 02 FB | 	rdlong	arg02, fp
110b8     0C 4E 85 F1 | 	sub	fp, #12
110bc     01 16 66 F6 | 	neg	arg03, #1
110c0     AC CB B0 FD | 	call	#__system___float_cmp
110c4     00 FA 55 F2 | 	cmps	result1, #0 wc
110c8     00 1E 26 36 |  if_ae	not	local01, #0
110cc     A7 1E 62 FC | 	wrlong	local01, fp
110d0     8C 02 90 FD | 	jmp	#LR__1313
110d4                 | LR__1304
110d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
110d4     08 4E 05 F1 | 	add	fp, #8
110d8     A7 1E 02 FB | 	rdlong	local01, fp
110dc     08 4E 85 F1 | 	sub	fp, #8
110e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
110e4     14 4E 05 A1 |  if_e	add	fp, #20
110e8     A7 24 02 AB |  if_e	rdlong	local04, fp
110ec     14 4E 85 A1 |  if_e	sub	fp, #20
110f0     12 23 02 A6 |  if_e	mov	local03, local04
110f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
110f8     24 00 90 5D |  if_ne	jmp	#LR__1305
110fc     00 1E 06 F6 | 	mov	local01, #0
11100     A7 20 02 FB | 	rdlong	local02, fp
11104     0C 4E 05 F1 | 	add	fp, #12
11108     A7 22 02 FB | 	rdlong	local03, fp
1110c     0C 4E 85 F1 | 	sub	fp, #12
11110     11 21 52 F2 | 	cmps	local02, local03 wc
11114     01 1E 66 36 |  if_ae	neg	local01, #1
11118     A7 1E 62 FC | 	wrlong	local01, fp
1111c     40 02 90 FD | 	jmp	#LR__1313
11120                 | LR__1305
11120                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
11120     08 4E 05 F1 | 	add	fp, #8
11124     A7 1E 02 FB | 	rdlong	local01, fp
11128     08 4E 85 F1 | 	sub	fp, #8
1112c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11130     14 4E 05 A1 |  if_e	add	fp, #20
11134     A7 24 02 AB |  if_e	rdlong	local04, fp
11138     14 4E 85 A1 |  if_e	sub	fp, #20
1113c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11140     24 00 90 5D |  if_ne	jmp	#LR__1306
11144     00 1E 06 F6 | 	mov	local01, #0
11148     A7 20 02 FB | 	rdlong	local02, fp
1114c     0C 4E 05 F1 | 	add	fp, #12
11150     A7 22 02 FB | 	rdlong	local03, fp
11154     0C 4E 85 F1 | 	sub	fp, #12
11158     11 21 52 F2 | 	cmps	local02, local03 wc
1115c     01 1E 66 36 |  if_ae	neg	local01, #1
11160     A7 1E 62 FC | 	wrlong	local01, fp
11164     F8 01 90 FD | 	jmp	#LR__1313
11168                 | LR__1306
11168                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
11168     08 4E 05 F1 | 	add	fp, #8
1116c     A7 1E 02 FB | 	rdlong	local01, fp
11170     08 4E 85 F1 | 	sub	fp, #8
11174     1D 1E 0E F2 | 	cmp	local01, #29 wz
11178     14 4E 05 A1 |  if_e	add	fp, #20
1117c     A7 22 02 AB |  if_e	rdlong	local03, fp
11180     14 4E 85 A1 |  if_e	sub	fp, #20
11184     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11188     34 00 90 5D |  if_ne	jmp	#LR__1307
1118c     00 1E 06 F6 | 	mov	local01, #0
11190     A7 12 02 FB | 	rdlong	arg01, fp
11194     A0 C2 B0 FD | 	call	#__system___float_fromuns
11198     FD 12 02 F6 | 	mov	arg01, result1
1119c     0C 4E 05 F1 | 	add	fp, #12
111a0     A7 14 02 FB | 	rdlong	arg02, fp
111a4     0C 4E 85 F1 | 	sub	fp, #12
111a8     01 16 66 F6 | 	neg	arg03, #1
111ac     C0 CA B0 FD | 	call	#__system___float_cmp
111b0     00 FA 55 F2 | 	cmps	result1, #0 wc
111b4     00 1E 26 36 |  if_ae	not	local01, #0
111b8     A7 1E 62 FC | 	wrlong	local01, fp
111bc     A0 01 90 FD | 	jmp	#LR__1313
111c0                 | LR__1307
111c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
111c0     08 4E 05 F1 | 	add	fp, #8
111c4     A7 1E 02 FB | 	rdlong	local01, fp
111c8     08 4E 85 F1 | 	sub	fp, #8
111cc     1D 1E 0E F2 | 	cmp	local01, #29 wz
111d0     14 4E 05 A1 |  if_e	add	fp, #20
111d4     A7 22 02 AB |  if_e	rdlong	local03, fp
111d8     14 4E 85 A1 |  if_e	sub	fp, #20
111dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
111e0     24 00 90 5D |  if_ne	jmp	#LR__1308
111e4     00 1E 06 F6 | 	mov	local01, #0
111e8     A7 20 02 FB | 	rdlong	local02, fp
111ec     0C 4E 05 F1 | 	add	fp, #12
111f0     A7 22 02 FB | 	rdlong	local03, fp
111f4     0C 4E 85 F1 | 	sub	fp, #12
111f8     11 21 52 F2 | 	cmps	local02, local03 wc
111fc     01 1E 66 36 |  if_ae	neg	local01, #1
11200     A7 1E 62 FC | 	wrlong	local01, fp
11204     58 01 90 FD | 	jmp	#LR__1313
11208                 | LR__1308
11208                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
11208     08 4E 05 F1 | 	add	fp, #8
1120c     A7 1E 02 FB | 	rdlong	local01, fp
11210     08 4E 85 F1 | 	sub	fp, #8
11214     1D 1E 0E F2 | 	cmp	local01, #29 wz
11218     14 4E 05 A1 |  if_e	add	fp, #20
1121c     A7 22 02 AB |  if_e	rdlong	local03, fp
11220     14 4E 85 A1 |  if_e	sub	fp, #20
11224     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11228     24 00 90 5D |  if_ne	jmp	#LR__1309
1122c     00 1E 06 F6 | 	mov	local01, #0
11230     A7 20 02 FB | 	rdlong	local02, fp
11234     0C 4E 05 F1 | 	add	fp, #12
11238     A7 22 02 FB | 	rdlong	local03, fp
1123c     0C 4E 85 F1 | 	sub	fp, #12
11240     11 21 12 F2 | 	cmp	local02, local03 wc
11244     01 1E 66 36 |  if_ae	neg	local01, #1
11248     A7 1E 62 FC | 	wrlong	local01, fp
1124c     10 01 90 FD | 	jmp	#LR__1313
11250                 | LR__1309
11250                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
11250     08 4E 05 F1 | 	add	fp, #8
11254     A7 1E 02 FB | 	rdlong	local01, fp
11258     08 4E 85 F1 | 	sub	fp, #8
1125c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11260     14 4E 05 A1 |  if_e	add	fp, #20
11264     A7 22 02 AB |  if_e	rdlong	local03, fp
11268     14 4E 85 A1 |  if_e	sub	fp, #20
1126c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11270     30 00 90 5D |  if_ne	jmp	#LR__1310
11274     00 1E 06 F6 | 	mov	local01, #0
11278     A7 12 02 FB | 	rdlong	arg01, fp
1127c     08 C8 BF FD | 	call	#_convertstring
11280     FD 12 02 F6 | 	mov	arg01, result1
11284     0C 4E 05 F1 | 	add	fp, #12
11288     A7 14 02 FB | 	rdlong	arg02, fp
1128c     0C 4E 85 F1 | 	sub	fp, #12
11290     AC 9A B0 FD | 	call	#__system___string_cmp
11294     00 FA 55 F2 | 	cmps	result1, #0 wc
11298     00 1E 26 36 |  if_ae	not	local01, #0
1129c     A7 1E 62 FC | 	wrlong	local01, fp
112a0     BC 00 90 FD | 	jmp	#LR__1313
112a4                 | LR__1310
112a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
112a4     08 4E 05 F1 | 	add	fp, #8
112a8     A7 1E 02 FB | 	rdlong	local01, fp
112ac     08 4E 85 F1 | 	sub	fp, #8
112b0     1F 1E 0E F2 | 	cmp	local01, #31 wz
112b4     14 4E 05 A1 |  if_e	add	fp, #20
112b8     A7 22 02 AB |  if_e	rdlong	local03, fp
112bc     14 4E 85 A1 |  if_e	sub	fp, #20
112c0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
112c4     34 00 90 5D |  if_ne	jmp	#LR__1311
112c8     00 1E 06 F6 | 	mov	local01, #0
112cc     A7 20 02 FB | 	rdlong	local02, fp
112d0     0C 4E 05 F1 | 	add	fp, #12
112d4     A7 12 02 FB | 	rdlong	arg01, fp
112d8     0C 4E 85 F1 | 	sub	fp, #12
112dc     A8 C7 BF FD | 	call	#_convertstring
112e0     FD 14 02 F6 | 	mov	arg02, result1
112e4     10 13 02 F6 | 	mov	arg01, local02
112e8     54 9A B0 FD | 	call	#__system___string_cmp
112ec     00 FA 55 F2 | 	cmps	result1, #0 wc
112f0     00 1E 26 36 |  if_ae	not	local01, #0
112f4     A7 1E 62 FC | 	wrlong	local01, fp
112f8     64 00 90 FD | 	jmp	#LR__1313
112fc                 | LR__1311
112fc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
112fc     08 4E 05 F1 | 	add	fp, #8
11300     A7 1E 02 FB | 	rdlong	local01, fp
11304     08 4E 85 F1 | 	sub	fp, #8
11308     2B 1E 0E F2 | 	cmp	local01, #43 wz
1130c     14 4E 05 A1 |  if_e	add	fp, #20
11310     A7 22 02 AB |  if_e	rdlong	local03, fp
11314     14 4E 85 A1 |  if_e	sub	fp, #20
11318     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1131c     3C 00 90 5D |  if_ne	jmp	#LR__1312
11320     00 1E 06 F6 | 	mov	local01, #0
11324     A7 12 02 FB | 	rdlong	arg01, fp
11328     5C C7 BF FD | 	call	#_convertstring
1132c     FD 20 02 F6 | 	mov	local02, result1
11330     0C 4E 05 F1 | 	add	fp, #12
11334     A7 12 02 FB | 	rdlong	arg01, fp
11338     0C 4E 85 F1 | 	sub	fp, #12
1133c     48 C7 BF FD | 	call	#_convertstring
11340     FD 14 02 F6 | 	mov	arg02, result1
11344     10 13 02 F6 | 	mov	arg01, local02
11348     F4 99 B0 FD | 	call	#__system___string_cmp
1134c     00 FA 55 F2 | 	cmps	result1, #0 wc
11350     00 1E 26 36 |  if_ae	not	local01, #0
11354     A7 1E 62 FC | 	wrlong	local01, fp
11358     04 00 90 FD | 	jmp	#LR__1313
1135c                 | LR__1312
1135c     A7 00 68 FC | 	wrlong	#0, fp
11360                 | LR__1313
11360     08 4E 05 F1 | 	add	fp, #8
11364     A7 38 68 FC | 	wrlong	#28, fp
11368     08 4E 85 F1 | 	sub	fp, #8
1136c     A7 12 02 F6 | 	mov	arg01, fp
11370     1C 88 BF FD | 	call	#_push
11374     A7 F0 03 F6 | 	mov	ptra, fp
11378     B2 00 A0 FD | 	call	#popregs_
1137c                 | _do_ge_ret
1137c     2D 00 64 FD | 	ret
11380                 | 
11380                 | ' 
11380                 | ' sub do_le
11380                 | _do_le
11380     05 4A 05 F6 | 	mov	COUNT_, #5
11384     A8 00 A0 FD | 	call	#pushregs_
11388     18 F0 07 F1 | 	add	ptra, #24
1138c     68 87 BF FD | 	call	#_pop
11390     FD 1E 02 F6 | 	mov	local01, result1
11394     FE 20 02 F6 | 	mov	local02, result2
11398     FF 22 02 F6 | 	mov	local03, result3
1139c     0C 4E 05 F1 | 	add	fp, #12
113a0     A7 1E 62 FC | 	wrlong	local01, fp
113a4     04 4E 05 F1 | 	add	fp, #4
113a8     A7 20 62 FC | 	wrlong	local02, fp
113ac     04 4E 05 F1 | 	add	fp, #4
113b0     A7 22 62 FC | 	wrlong	local03, fp
113b4     14 4E 85 F1 | 	sub	fp, #20
113b8     3C 87 BF FD | 	call	#_pop
113bc     FF 22 02 F6 | 	mov	local03, result3
113c0     A7 FA 61 FC | 	wrlong	result1, fp
113c4     04 4E 05 F1 | 	add	fp, #4
113c8     A7 FC 61 FC | 	wrlong	result2, fp
113cc     04 4E 05 F1 | 	add	fp, #4
113d0     A7 22 62 FC | 	wrlong	local03, fp
113d4                 | ' t2=pop()
113d4                 | ' t1=pop()
113d4                 | ' 
113d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
113d4     08 4E 85 F1 | 	sub	fp, #8
113d8     1F 22 0E F2 | 	cmp	local03, #31 wz
113dc     14 4E 05 A1 |  if_e	add	fp, #20
113e0     A7 24 02 AB |  if_e	rdlong	local04, fp
113e4     14 4E 85 A1 |  if_e	sub	fp, #20
113e8     12 23 02 A6 |  if_e	mov	local03, local04
113ec     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
113f0     28 00 90 5D |  if_ne	jmp	#LR__1320
113f4     00 1E 06 F6 | 	mov	local01, #0
113f8     A7 12 02 FB | 	rdlong	arg01, fp
113fc     0C 4E 05 F1 | 	add	fp, #12
11400     A7 14 02 FB | 	rdlong	arg02, fp
11404     0C 4E 85 F1 | 	sub	fp, #12
11408     34 99 B0 FD | 	call	#__system___string_cmp
1140c     01 FA 55 F2 | 	cmps	result1, #1 wc
11410     00 1E 26 C6 |  if_b	not	local01, #0
11414     A7 1E 62 FC | 	wrlong	local01, fp
11418     1C 04 90 FD | 	jmp	#LR__1333
1141c                 | LR__1320
1141c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1141c     08 4E 05 F1 | 	add	fp, #8
11420     A7 1E 02 FB | 	rdlong	local01, fp
11424     08 4E 85 F1 | 	sub	fp, #8
11428     1E 1E 0E F2 | 	cmp	local01, #30 wz
1142c     14 4E 05 A1 |  if_e	add	fp, #20
11430     A7 24 02 AB |  if_e	rdlong	local04, fp
11434     14 4E 85 A1 |  if_e	sub	fp, #20
11438     12 23 02 A6 |  if_e	mov	local03, local04
1143c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11440     2C 00 90 5D |  if_ne	jmp	#LR__1321
11444     00 1E 06 F6 | 	mov	local01, #0
11448     A7 12 02 FB | 	rdlong	arg01, fp
1144c     0C 4E 05 F1 | 	add	fp, #12
11450     A7 14 02 FB | 	rdlong	arg02, fp
11454     0C 4E 85 F1 | 	sub	fp, #12
11458     01 16 06 F6 | 	mov	arg03, #1
1145c     10 C8 B0 FD | 	call	#__system___float_cmp
11460     01 FA 55 F2 | 	cmps	result1, #1 wc
11464     00 1E 26 C6 |  if_b	not	local01, #0
11468     A7 1E 62 FC | 	wrlong	local01, fp
1146c     C8 03 90 FD | 	jmp	#LR__1333
11470                 | LR__1321
11470                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
11470     08 4E 05 F1 | 	add	fp, #8
11474     A7 1E 02 FB | 	rdlong	local01, fp
11478     08 4E 85 F1 | 	sub	fp, #8
1147c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11480     14 4E 05 A1 |  if_e	add	fp, #20
11484     A7 24 02 AB |  if_e	rdlong	local04, fp
11488     14 4E 85 A1 |  if_e	sub	fp, #20
1148c     12 23 02 A6 |  if_e	mov	local03, local04
11490     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11494     48 00 90 5D |  if_ne	jmp	#LR__1322
11498     00 1E 06 F6 | 	mov	local01, #0
1149c     A7 20 02 FB | 	rdlong	local02, fp
114a0     0C 4E 05 F1 | 	add	fp, #12
114a4     A7 12 02 FB | 	rdlong	arg01, fp
114a8     0C 4E 85 F1 | 	sub	fp, #12
114ac     09 13 52 F6 | 	abs	arg01, arg01 wc
114b0     1F 26 C6 C9 |  if_b	decod	local05, #31
114b4     00 26 06 36 |  if_ae	mov	local05, #0
114b8     7C BF B0 FD | 	call	#__system___float_fromuns
114bc     13 FB 61 F5 | 	xor	result1, local05
114c0     FD 14 02 F6 | 	mov	arg02, result1
114c4     10 13 02 F6 | 	mov	arg01, local02
114c8     01 16 06 F6 | 	mov	arg03, #1
114cc     A0 C7 B0 FD | 	call	#__system___float_cmp
114d0     01 FA 55 F2 | 	cmps	result1, #1 wc
114d4     00 1E 26 C6 |  if_b	not	local01, #0
114d8     A7 1E 62 FC | 	wrlong	local01, fp
114dc     58 03 90 FD | 	jmp	#LR__1333
114e0                 | LR__1322
114e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
114e0     08 4E 05 F1 | 	add	fp, #8
114e4     A7 1E 02 FB | 	rdlong	local01, fp
114e8     08 4E 85 F1 | 	sub	fp, #8
114ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
114f0     14 4E 05 A1 |  if_e	add	fp, #20
114f4     A7 24 02 AB |  if_e	rdlong	local04, fp
114f8     14 4E 85 A1 |  if_e	sub	fp, #20
114fc     12 23 02 A6 |  if_e	mov	local03, local04
11500     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11504     38 00 90 5D |  if_ne	jmp	#LR__1323
11508     00 1E 06 F6 | 	mov	local01, #0
1150c     A7 20 02 FB | 	rdlong	local02, fp
11510     0C 4E 05 F1 | 	add	fp, #12
11514     A7 12 02 FB | 	rdlong	arg01, fp
11518     0C 4E 85 F1 | 	sub	fp, #12
1151c     18 BF B0 FD | 	call	#__system___float_fromuns
11520     FD 14 02 F6 | 	mov	arg02, result1
11524     10 13 02 F6 | 	mov	arg01, local02
11528     01 16 06 F6 | 	mov	arg03, #1
1152c     40 C7 B0 FD | 	call	#__system___float_cmp
11530     01 FA 55 F2 | 	cmps	result1, #1 wc
11534     00 1E 26 C6 |  if_b	not	local01, #0
11538     A7 1E 62 FC | 	wrlong	local01, fp
1153c     F8 02 90 FD | 	jmp	#LR__1333
11540                 | LR__1323
11540                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
11540     08 4E 05 F1 | 	add	fp, #8
11544     A7 1E 02 FB | 	rdlong	local01, fp
11548     08 4E 85 F1 | 	sub	fp, #8
1154c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11550     14 4E 05 A1 |  if_e	add	fp, #20
11554     A7 24 02 AB |  if_e	rdlong	local04, fp
11558     14 4E 85 A1 |  if_e	sub	fp, #20
1155c     12 23 02 A6 |  if_e	mov	local03, local04
11560     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11564     44 00 90 5D |  if_ne	jmp	#LR__1324
11568     00 1E 06 F6 | 	mov	local01, #0
1156c     A7 12 02 FB | 	rdlong	arg01, fp
11570     09 13 52 F6 | 	abs	arg01, arg01 wc
11574     1F 26 C6 C9 |  if_b	decod	local05, #31
11578     00 26 06 36 |  if_ae	mov	local05, #0
1157c     B8 BE B0 FD | 	call	#__system___float_fromuns
11580     13 FB 61 F5 | 	xor	result1, local05
11584     FD 12 02 F6 | 	mov	arg01, result1
11588     0C 4E 05 F1 | 	add	fp, #12
1158c     A7 14 02 FB | 	rdlong	arg02, fp
11590     0C 4E 85 F1 | 	sub	fp, #12
11594     01 16 06 F6 | 	mov	arg03, #1
11598     D4 C6 B0 FD | 	call	#__system___float_cmp
1159c     01 FA 55 F2 | 	cmps	result1, #1 wc
115a0     00 1E 26 C6 |  if_b	not	local01, #0
115a4     A7 1E 62 FC | 	wrlong	local01, fp
115a8     8C 02 90 FD | 	jmp	#LR__1333
115ac                 | LR__1324
115ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
115ac     08 4E 05 F1 | 	add	fp, #8
115b0     A7 1E 02 FB | 	rdlong	local01, fp
115b4     08 4E 85 F1 | 	sub	fp, #8
115b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
115bc     14 4E 05 A1 |  if_e	add	fp, #20
115c0     A7 24 02 AB |  if_e	rdlong	local04, fp
115c4     14 4E 85 A1 |  if_e	sub	fp, #20
115c8     12 23 02 A6 |  if_e	mov	local03, local04
115cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
115d0     24 00 90 5D |  if_ne	jmp	#LR__1325
115d4     00 1E 06 F6 | 	mov	local01, #0
115d8     A7 20 02 FB | 	rdlong	local02, fp
115dc     0C 4E 05 F1 | 	add	fp, #12
115e0     A7 22 02 FB | 	rdlong	local03, fp
115e4     0C 4E 85 F1 | 	sub	fp, #12
115e8     11 21 5A F2 | 	cmps	local02, local03 wcz
115ec     01 1E 66 E6 |  if_be	neg	local01, #1
115f0     A7 1E 62 FC | 	wrlong	local01, fp
115f4     40 02 90 FD | 	jmp	#LR__1333
115f8                 | LR__1325
115f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
115f8     08 4E 05 F1 | 	add	fp, #8
115fc     A7 1E 02 FB | 	rdlong	local01, fp
11600     08 4E 85 F1 | 	sub	fp, #8
11604     1C 1E 0E F2 | 	cmp	local01, #28 wz
11608     14 4E 05 A1 |  if_e	add	fp, #20
1160c     A7 24 02 AB |  if_e	rdlong	local04, fp
11610     14 4E 85 A1 |  if_e	sub	fp, #20
11614     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11618     24 00 90 5D |  if_ne	jmp	#LR__1326
1161c     00 1E 06 F6 | 	mov	local01, #0
11620     A7 20 02 FB | 	rdlong	local02, fp
11624     0C 4E 05 F1 | 	add	fp, #12
11628     A7 22 02 FB | 	rdlong	local03, fp
1162c     0C 4E 85 F1 | 	sub	fp, #12
11630     11 21 5A F2 | 	cmps	local02, local03 wcz
11634     01 1E 66 E6 |  if_be	neg	local01, #1
11638     A7 1E 62 FC | 	wrlong	local01, fp
1163c     F8 01 90 FD | 	jmp	#LR__1333
11640                 | LR__1326
11640                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
11640     08 4E 05 F1 | 	add	fp, #8
11644     A7 1E 02 FB | 	rdlong	local01, fp
11648     08 4E 85 F1 | 	sub	fp, #8
1164c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11650     14 4E 05 A1 |  if_e	add	fp, #20
11654     A7 22 02 AB |  if_e	rdlong	local03, fp
11658     14 4E 85 A1 |  if_e	sub	fp, #20
1165c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11660     34 00 90 5D |  if_ne	jmp	#LR__1327
11664     00 1E 06 F6 | 	mov	local01, #0
11668     A7 12 02 FB | 	rdlong	arg01, fp
1166c     C8 BD B0 FD | 	call	#__system___float_fromuns
11670     FD 12 02 F6 | 	mov	arg01, result1
11674     0C 4E 05 F1 | 	add	fp, #12
11678     A7 14 02 FB | 	rdlong	arg02, fp
1167c     0C 4E 85 F1 | 	sub	fp, #12
11680     01 16 06 F6 | 	mov	arg03, #1
11684     E8 C5 B0 FD | 	call	#__system___float_cmp
11688     01 FA 55 F2 | 	cmps	result1, #1 wc
1168c     00 1E 26 C6 |  if_b	not	local01, #0
11690     A7 1E 62 FC | 	wrlong	local01, fp
11694     A0 01 90 FD | 	jmp	#LR__1333
11698                 | LR__1327
11698                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
11698     08 4E 05 F1 | 	add	fp, #8
1169c     A7 1E 02 FB | 	rdlong	local01, fp
116a0     08 4E 85 F1 | 	sub	fp, #8
116a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
116a8     14 4E 05 A1 |  if_e	add	fp, #20
116ac     A7 22 02 AB |  if_e	rdlong	local03, fp
116b0     14 4E 85 A1 |  if_e	sub	fp, #20
116b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
116b8     24 00 90 5D |  if_ne	jmp	#LR__1328
116bc     00 1E 06 F6 | 	mov	local01, #0
116c0     A7 20 02 FB | 	rdlong	local02, fp
116c4     0C 4E 05 F1 | 	add	fp, #12
116c8     A7 22 02 FB | 	rdlong	local03, fp
116cc     0C 4E 85 F1 | 	sub	fp, #12
116d0     11 21 5A F2 | 	cmps	local02, local03 wcz
116d4     01 1E 66 E6 |  if_be	neg	local01, #1
116d8     A7 1E 62 FC | 	wrlong	local01, fp
116dc     58 01 90 FD | 	jmp	#LR__1333
116e0                 | LR__1328
116e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
116e0     08 4E 05 F1 | 	add	fp, #8
116e4     A7 1E 02 FB | 	rdlong	local01, fp
116e8     08 4E 85 F1 | 	sub	fp, #8
116ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
116f0     14 4E 05 A1 |  if_e	add	fp, #20
116f4     A7 22 02 AB |  if_e	rdlong	local03, fp
116f8     14 4E 85 A1 |  if_e	sub	fp, #20
116fc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11700     24 00 90 5D |  if_ne	jmp	#LR__1329
11704     00 1E 06 F6 | 	mov	local01, #0
11708     A7 20 02 FB | 	rdlong	local02, fp
1170c     0C 4E 05 F1 | 	add	fp, #12
11710     A7 22 02 FB | 	rdlong	local03, fp
11714     0C 4E 85 F1 | 	sub	fp, #12
11718     11 21 1A F2 | 	cmp	local02, local03 wcz
1171c     01 1E 66 E6 |  if_be	neg	local01, #1
11720     A7 1E 62 FC | 	wrlong	local01, fp
11724     10 01 90 FD | 	jmp	#LR__1333
11728                 | LR__1329
11728                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
11728     08 4E 05 F1 | 	add	fp, #8
1172c     A7 1E 02 FB | 	rdlong	local01, fp
11730     08 4E 85 F1 | 	sub	fp, #8
11734     2B 1E 0E F2 | 	cmp	local01, #43 wz
11738     14 4E 05 A1 |  if_e	add	fp, #20
1173c     A7 22 02 AB |  if_e	rdlong	local03, fp
11740     14 4E 85 A1 |  if_e	sub	fp, #20
11744     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11748     30 00 90 5D |  if_ne	jmp	#LR__1330
1174c     00 1E 06 F6 | 	mov	local01, #0
11750     A7 12 02 FB | 	rdlong	arg01, fp
11754     30 C3 BF FD | 	call	#_convertstring
11758     FD 12 02 F6 | 	mov	arg01, result1
1175c     0C 4E 05 F1 | 	add	fp, #12
11760     A7 14 02 FB | 	rdlong	arg02, fp
11764     0C 4E 85 F1 | 	sub	fp, #12
11768     D4 95 B0 FD | 	call	#__system___string_cmp
1176c     01 FA 55 F2 | 	cmps	result1, #1 wc
11770     00 1E 26 C6 |  if_b	not	local01, #0
11774     A7 1E 62 FC | 	wrlong	local01, fp
11778     BC 00 90 FD | 	jmp	#LR__1333
1177c                 | LR__1330
1177c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1177c     08 4E 05 F1 | 	add	fp, #8
11780     A7 1E 02 FB | 	rdlong	local01, fp
11784     08 4E 85 F1 | 	sub	fp, #8
11788     1F 1E 0E F2 | 	cmp	local01, #31 wz
1178c     14 4E 05 A1 |  if_e	add	fp, #20
11790     A7 22 02 AB |  if_e	rdlong	local03, fp
11794     14 4E 85 A1 |  if_e	sub	fp, #20
11798     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1179c     34 00 90 5D |  if_ne	jmp	#LR__1331
117a0     00 1E 06 F6 | 	mov	local01, #0
117a4     A7 20 02 FB | 	rdlong	local02, fp
117a8     0C 4E 05 F1 | 	add	fp, #12
117ac     A7 12 02 FB | 	rdlong	arg01, fp
117b0     0C 4E 85 F1 | 	sub	fp, #12
117b4     D0 C2 BF FD | 	call	#_convertstring
117b8     FD 14 02 F6 | 	mov	arg02, result1
117bc     10 13 02 F6 | 	mov	arg01, local02
117c0     7C 95 B0 FD | 	call	#__system___string_cmp
117c4     01 FA 55 F2 | 	cmps	result1, #1 wc
117c8     00 1E 26 C6 |  if_b	not	local01, #0
117cc     A7 1E 62 FC | 	wrlong	local01, fp
117d0     64 00 90 FD | 	jmp	#LR__1333
117d4                 | LR__1331
117d4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
117d4     08 4E 05 F1 | 	add	fp, #8
117d8     A7 1E 02 FB | 	rdlong	local01, fp
117dc     08 4E 85 F1 | 	sub	fp, #8
117e0     2B 1E 0E F2 | 	cmp	local01, #43 wz
117e4     14 4E 05 A1 |  if_e	add	fp, #20
117e8     A7 22 02 AB |  if_e	rdlong	local03, fp
117ec     14 4E 85 A1 |  if_e	sub	fp, #20
117f0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
117f4     3C 00 90 5D |  if_ne	jmp	#LR__1332
117f8     00 1E 06 F6 | 	mov	local01, #0
117fc     A7 12 02 FB | 	rdlong	arg01, fp
11800     84 C2 BF FD | 	call	#_convertstring
11804     FD 20 02 F6 | 	mov	local02, result1
11808     0C 4E 05 F1 | 	add	fp, #12
1180c     A7 12 02 FB | 	rdlong	arg01, fp
11810     0C 4E 85 F1 | 	sub	fp, #12
11814     70 C2 BF FD | 	call	#_convertstring
11818     FD 14 02 F6 | 	mov	arg02, result1
1181c     10 13 02 F6 | 	mov	arg01, local02
11820     1C 95 B0 FD | 	call	#__system___string_cmp
11824     01 FA 55 F2 | 	cmps	result1, #1 wc
11828     00 1E 26 C6 |  if_b	not	local01, #0
1182c     A7 1E 62 FC | 	wrlong	local01, fp
11830     04 00 90 FD | 	jmp	#LR__1333
11834                 | LR__1332
11834     A7 00 68 FC | 	wrlong	#0, fp
11838                 | LR__1333
11838     08 4E 05 F1 | 	add	fp, #8
1183c     A7 38 68 FC | 	wrlong	#28, fp
11840     08 4E 85 F1 | 	sub	fp, #8
11844     A7 12 02 F6 | 	mov	arg01, fp
11848     44 83 BF FD | 	call	#_push
1184c     A7 F0 03 F6 | 	mov	ptra, fp
11850     B2 00 A0 FD | 	call	#popregs_
11854                 | _do_le_ret
11854     2D 00 64 FD | 	ret
11858                 | 
11858                 | ' 
11858                 | ' 
11858                 | ' sub do_ne
11858                 | _do_ne
11858     05 4A 05 F6 | 	mov	COUNT_, #5
1185c     A8 00 A0 FD | 	call	#pushregs_
11860     18 F0 07 F1 | 	add	ptra, #24
11864     90 82 BF FD | 	call	#_pop
11868     FD 1E 02 F6 | 	mov	local01, result1
1186c     FE 20 02 F6 | 	mov	local02, result2
11870     FF 22 02 F6 | 	mov	local03, result3
11874     0C 4E 05 F1 | 	add	fp, #12
11878     A7 1E 62 FC | 	wrlong	local01, fp
1187c     04 4E 05 F1 | 	add	fp, #4
11880     A7 20 62 FC | 	wrlong	local02, fp
11884     04 4E 05 F1 | 	add	fp, #4
11888     A7 22 62 FC | 	wrlong	local03, fp
1188c     14 4E 85 F1 | 	sub	fp, #20
11890     64 82 BF FD | 	call	#_pop
11894     FF 22 02 F6 | 	mov	local03, result3
11898     A7 FA 61 FC | 	wrlong	result1, fp
1189c     04 4E 05 F1 | 	add	fp, #4
118a0     A7 FC 61 FC | 	wrlong	result2, fp
118a4     04 4E 05 F1 | 	add	fp, #4
118a8     A7 22 62 FC | 	wrlong	local03, fp
118ac                 | ' t2=pop()
118ac                 | ' t1=pop()
118ac                 | ' 
118ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
118ac     08 4E 85 F1 | 	sub	fp, #8
118b0     1F 22 0E F2 | 	cmp	local03, #31 wz
118b4     14 4E 05 A1 |  if_e	add	fp, #20
118b8     A7 24 02 AB |  if_e	rdlong	local04, fp
118bc     14 4E 85 A1 |  if_e	sub	fp, #20
118c0     12 23 02 A6 |  if_e	mov	local03, local04
118c4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
118c8     28 00 90 5D |  if_ne	jmp	#LR__1340
118cc     00 1E 06 F6 | 	mov	local01, #0
118d0     A7 12 02 FB | 	rdlong	arg01, fp
118d4     0C 4E 05 F1 | 	add	fp, #12
118d8     A7 14 02 FB | 	rdlong	arg02, fp
118dc     0C 4E 85 F1 | 	sub	fp, #12
118e0     5C 94 B0 FD | 	call	#__system___string_cmp
118e4     00 FA 0D F2 | 	cmp	result1, #0 wz
118e8     00 1E 26 56 |  if_ne	not	local01, #0
118ec     A7 1E 62 FC | 	wrlong	local01, fp
118f0     1C 04 90 FD | 	jmp	#LR__1353
118f4                 | LR__1340
118f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
118f4     08 4E 05 F1 | 	add	fp, #8
118f8     A7 1E 02 FB | 	rdlong	local01, fp
118fc     08 4E 85 F1 | 	sub	fp, #8
11900     1E 1E 0E F2 | 	cmp	local01, #30 wz
11904     14 4E 05 A1 |  if_e	add	fp, #20
11908     A7 24 02 AB |  if_e	rdlong	local04, fp
1190c     14 4E 85 A1 |  if_e	sub	fp, #20
11910     12 23 02 A6 |  if_e	mov	local03, local04
11914     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11918     2C 00 90 5D |  if_ne	jmp	#LR__1341
1191c     00 1E 06 F6 | 	mov	local01, #0
11920     A7 12 02 FB | 	rdlong	arg01, fp
11924     0C 4E 05 F1 | 	add	fp, #12
11928     A7 14 02 FB | 	rdlong	arg02, fp
1192c     0C 4E 85 F1 | 	sub	fp, #12
11930     01 16 06 F6 | 	mov	arg03, #1
11934     38 C3 B0 FD | 	call	#__system___float_cmp
11938     00 FA 0D F2 | 	cmp	result1, #0 wz
1193c     00 1E 26 56 |  if_ne	not	local01, #0
11940     A7 1E 62 FC | 	wrlong	local01, fp
11944     C8 03 90 FD | 	jmp	#LR__1353
11948                 | LR__1341
11948                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
11948     08 4E 05 F1 | 	add	fp, #8
1194c     A7 1E 02 FB | 	rdlong	local01, fp
11950     08 4E 85 F1 | 	sub	fp, #8
11954     1E 1E 0E F2 | 	cmp	local01, #30 wz
11958     14 4E 05 A1 |  if_e	add	fp, #20
1195c     A7 24 02 AB |  if_e	rdlong	local04, fp
11960     14 4E 85 A1 |  if_e	sub	fp, #20
11964     12 23 02 A6 |  if_e	mov	local03, local04
11968     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1196c     48 00 90 5D |  if_ne	jmp	#LR__1342
11970     00 1E 06 F6 | 	mov	local01, #0
11974     A7 20 02 FB | 	rdlong	local02, fp
11978     0C 4E 05 F1 | 	add	fp, #12
1197c     A7 12 02 FB | 	rdlong	arg01, fp
11980     0C 4E 85 F1 | 	sub	fp, #12
11984     09 13 52 F6 | 	abs	arg01, arg01 wc
11988     1F 26 C6 C9 |  if_b	decod	local05, #31
1198c     00 26 06 36 |  if_ae	mov	local05, #0
11990     A4 BA B0 FD | 	call	#__system___float_fromuns
11994     13 FB 61 F5 | 	xor	result1, local05
11998     FD 14 02 F6 | 	mov	arg02, result1
1199c     10 13 02 F6 | 	mov	arg01, local02
119a0     01 16 06 F6 | 	mov	arg03, #1
119a4     C8 C2 B0 FD | 	call	#__system___float_cmp
119a8     00 FA 0D F2 | 	cmp	result1, #0 wz
119ac     00 1E 26 56 |  if_ne	not	local01, #0
119b0     A7 1E 62 FC | 	wrlong	local01, fp
119b4     58 03 90 FD | 	jmp	#LR__1353
119b8                 | LR__1342
119b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
119b8     08 4E 05 F1 | 	add	fp, #8
119bc     A7 1E 02 FB | 	rdlong	local01, fp
119c0     08 4E 85 F1 | 	sub	fp, #8
119c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
119c8     14 4E 05 A1 |  if_e	add	fp, #20
119cc     A7 24 02 AB |  if_e	rdlong	local04, fp
119d0     14 4E 85 A1 |  if_e	sub	fp, #20
119d4     12 23 02 A6 |  if_e	mov	local03, local04
119d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
119dc     38 00 90 5D |  if_ne	jmp	#LR__1343
119e0     00 1E 06 F6 | 	mov	local01, #0
119e4     A7 20 02 FB | 	rdlong	local02, fp
119e8     0C 4E 05 F1 | 	add	fp, #12
119ec     A7 12 02 FB | 	rdlong	arg01, fp
119f0     0C 4E 85 F1 | 	sub	fp, #12
119f4     40 BA B0 FD | 	call	#__system___float_fromuns
119f8     FD 14 02 F6 | 	mov	arg02, result1
119fc     10 13 02 F6 | 	mov	arg01, local02
11a00     01 16 06 F6 | 	mov	arg03, #1
11a04     68 C2 B0 FD | 	call	#__system___float_cmp
11a08     00 FA 0D F2 | 	cmp	result1, #0 wz
11a0c     00 1E 26 56 |  if_ne	not	local01, #0
11a10     A7 1E 62 FC | 	wrlong	local01, fp
11a14     F8 02 90 FD | 	jmp	#LR__1353
11a18                 | LR__1343
11a18                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
11a18     08 4E 05 F1 | 	add	fp, #8
11a1c     A7 1E 02 FB | 	rdlong	local01, fp
11a20     08 4E 85 F1 | 	sub	fp, #8
11a24     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a28     14 4E 05 A1 |  if_e	add	fp, #20
11a2c     A7 24 02 AB |  if_e	rdlong	local04, fp
11a30     14 4E 85 A1 |  if_e	sub	fp, #20
11a34     12 23 02 A6 |  if_e	mov	local03, local04
11a38     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11a3c     44 00 90 5D |  if_ne	jmp	#LR__1344
11a40     00 1E 06 F6 | 	mov	local01, #0
11a44     A7 12 02 FB | 	rdlong	arg01, fp
11a48     09 13 52 F6 | 	abs	arg01, arg01 wc
11a4c     1F 26 C6 C9 |  if_b	decod	local05, #31
11a50     00 26 06 36 |  if_ae	mov	local05, #0
11a54     E0 B9 B0 FD | 	call	#__system___float_fromuns
11a58     13 FB 61 F5 | 	xor	result1, local05
11a5c     FD 12 02 F6 | 	mov	arg01, result1
11a60     0C 4E 05 F1 | 	add	fp, #12
11a64     A7 14 02 FB | 	rdlong	arg02, fp
11a68     0C 4E 85 F1 | 	sub	fp, #12
11a6c     01 16 06 F6 | 	mov	arg03, #1
11a70     FC C1 B0 FD | 	call	#__system___float_cmp
11a74     00 FA 0D F2 | 	cmp	result1, #0 wz
11a78     00 1E 26 56 |  if_ne	not	local01, #0
11a7c     A7 1E 62 FC | 	wrlong	local01, fp
11a80     8C 02 90 FD | 	jmp	#LR__1353
11a84                 | LR__1344
11a84                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
11a84     08 4E 05 F1 | 	add	fp, #8
11a88     A7 1E 02 FB | 	rdlong	local01, fp
11a8c     08 4E 85 F1 | 	sub	fp, #8
11a90     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a94     14 4E 05 A1 |  if_e	add	fp, #20
11a98     A7 24 02 AB |  if_e	rdlong	local04, fp
11a9c     14 4E 85 A1 |  if_e	sub	fp, #20
11aa0     12 23 02 A6 |  if_e	mov	local03, local04
11aa4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11aa8     24 00 90 5D |  if_ne	jmp	#LR__1345
11aac     00 1E 06 F6 | 	mov	local01, #0
11ab0     A7 20 02 FB | 	rdlong	local02, fp
11ab4     0C 4E 05 F1 | 	add	fp, #12
11ab8     A7 22 02 FB | 	rdlong	local03, fp
11abc     0C 4E 85 F1 | 	sub	fp, #12
11ac0     11 21 0A F2 | 	cmp	local02, local03 wz
11ac4     01 1E 66 56 |  if_ne	neg	local01, #1
11ac8     A7 1E 62 FC | 	wrlong	local01, fp
11acc     40 02 90 FD | 	jmp	#LR__1353
11ad0                 | LR__1345
11ad0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
11ad0     08 4E 05 F1 | 	add	fp, #8
11ad4     A7 1E 02 FB | 	rdlong	local01, fp
11ad8     08 4E 85 F1 | 	sub	fp, #8
11adc     1C 1E 0E F2 | 	cmp	local01, #28 wz
11ae0     14 4E 05 A1 |  if_e	add	fp, #20
11ae4     A7 24 02 AB |  if_e	rdlong	local04, fp
11ae8     14 4E 85 A1 |  if_e	sub	fp, #20
11aec     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11af0     24 00 90 5D |  if_ne	jmp	#LR__1346
11af4     00 1E 06 F6 | 	mov	local01, #0
11af8     A7 20 02 FB | 	rdlong	local02, fp
11afc     0C 4E 05 F1 | 	add	fp, #12
11b00     A7 22 02 FB | 	rdlong	local03, fp
11b04     0C 4E 85 F1 | 	sub	fp, #12
11b08     11 21 0A F2 | 	cmp	local02, local03 wz
11b0c     01 1E 66 56 |  if_ne	neg	local01, #1
11b10     A7 1E 62 FC | 	wrlong	local01, fp
11b14     F8 01 90 FD | 	jmp	#LR__1353
11b18                 | LR__1346
11b18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
11b18     08 4E 05 F1 | 	add	fp, #8
11b1c     A7 1E 02 FB | 	rdlong	local01, fp
11b20     08 4E 85 F1 | 	sub	fp, #8
11b24     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b28     14 4E 05 A1 |  if_e	add	fp, #20
11b2c     A7 22 02 AB |  if_e	rdlong	local03, fp
11b30     14 4E 85 A1 |  if_e	sub	fp, #20
11b34     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11b38     34 00 90 5D |  if_ne	jmp	#LR__1347
11b3c     00 1E 06 F6 | 	mov	local01, #0
11b40     A7 12 02 FB | 	rdlong	arg01, fp
11b44     F0 B8 B0 FD | 	call	#__system___float_fromuns
11b48     FD 12 02 F6 | 	mov	arg01, result1
11b4c     0C 4E 05 F1 | 	add	fp, #12
11b50     A7 14 02 FB | 	rdlong	arg02, fp
11b54     0C 4E 85 F1 | 	sub	fp, #12
11b58     01 16 06 F6 | 	mov	arg03, #1
11b5c     10 C1 B0 FD | 	call	#__system___float_cmp
11b60     00 FA 0D F2 | 	cmp	result1, #0 wz
11b64     00 1E 26 56 |  if_ne	not	local01, #0
11b68     A7 1E 62 FC | 	wrlong	local01, fp
11b6c     A0 01 90 FD | 	jmp	#LR__1353
11b70                 | LR__1347
11b70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
11b70     08 4E 05 F1 | 	add	fp, #8
11b74     A7 1E 02 FB | 	rdlong	local01, fp
11b78     08 4E 85 F1 | 	sub	fp, #8
11b7c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b80     14 4E 05 A1 |  if_e	add	fp, #20
11b84     A7 22 02 AB |  if_e	rdlong	local03, fp
11b88     14 4E 85 A1 |  if_e	sub	fp, #20
11b8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b90     24 00 90 5D |  if_ne	jmp	#LR__1348
11b94     00 1E 06 F6 | 	mov	local01, #0
11b98     A7 20 02 FB | 	rdlong	local02, fp
11b9c     0C 4E 05 F1 | 	add	fp, #12
11ba0     A7 22 02 FB | 	rdlong	local03, fp
11ba4     0C 4E 85 F1 | 	sub	fp, #12
11ba8     11 21 0A F2 | 	cmp	local02, local03 wz
11bac     01 1E 66 56 |  if_ne	neg	local01, #1
11bb0     A7 1E 62 FC | 	wrlong	local01, fp
11bb4     58 01 90 FD | 	jmp	#LR__1353
11bb8                 | LR__1348
11bb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
11bb8     08 4E 05 F1 | 	add	fp, #8
11bbc     A7 1E 02 FB | 	rdlong	local01, fp
11bc0     08 4E 85 F1 | 	sub	fp, #8
11bc4     1D 1E 0E F2 | 	cmp	local01, #29 wz
11bc8     14 4E 05 A1 |  if_e	add	fp, #20
11bcc     A7 22 02 AB |  if_e	rdlong	local03, fp
11bd0     14 4E 85 A1 |  if_e	sub	fp, #20
11bd4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11bd8     24 00 90 5D |  if_ne	jmp	#LR__1349
11bdc     00 1E 06 F6 | 	mov	local01, #0
11be0     A7 20 02 FB | 	rdlong	local02, fp
11be4     0C 4E 05 F1 | 	add	fp, #12
11be8     A7 22 02 FB | 	rdlong	local03, fp
11bec     0C 4E 85 F1 | 	sub	fp, #12
11bf0     11 21 0A F2 | 	cmp	local02, local03 wz
11bf4     01 1E 66 56 |  if_ne	neg	local01, #1
11bf8     A7 1E 62 FC | 	wrlong	local01, fp
11bfc     10 01 90 FD | 	jmp	#LR__1353
11c00                 | LR__1349
11c00                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
11c00     08 4E 05 F1 | 	add	fp, #8
11c04     A7 1E 02 FB | 	rdlong	local01, fp
11c08     08 4E 85 F1 | 	sub	fp, #8
11c0c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11c10     14 4E 05 A1 |  if_e	add	fp, #20
11c14     A7 22 02 AB |  if_e	rdlong	local03, fp
11c18     14 4E 85 A1 |  if_e	sub	fp, #20
11c1c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11c20     30 00 90 5D |  if_ne	jmp	#LR__1350
11c24     00 1E 06 F6 | 	mov	local01, #0
11c28     A7 12 02 FB | 	rdlong	arg01, fp
11c2c     58 BE BF FD | 	call	#_convertstring
11c30     FD 12 02 F6 | 	mov	arg01, result1
11c34     0C 4E 05 F1 | 	add	fp, #12
11c38     A7 14 02 FB | 	rdlong	arg02, fp
11c3c     0C 4E 85 F1 | 	sub	fp, #12
11c40     FC 90 B0 FD | 	call	#__system___string_cmp
11c44     00 FA 0D F2 | 	cmp	result1, #0 wz
11c48     00 1E 26 56 |  if_ne	not	local01, #0
11c4c     A7 1E 62 FC | 	wrlong	local01, fp
11c50     BC 00 90 FD | 	jmp	#LR__1353
11c54                 | LR__1350
11c54                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
11c54     08 4E 05 F1 | 	add	fp, #8
11c58     A7 1E 02 FB | 	rdlong	local01, fp
11c5c     08 4E 85 F1 | 	sub	fp, #8
11c60     1F 1E 0E F2 | 	cmp	local01, #31 wz
11c64     14 4E 05 A1 |  if_e	add	fp, #20
11c68     A7 22 02 AB |  if_e	rdlong	local03, fp
11c6c     14 4E 85 A1 |  if_e	sub	fp, #20
11c70     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11c74     34 00 90 5D |  if_ne	jmp	#LR__1351
11c78     00 1E 06 F6 | 	mov	local01, #0
11c7c     A7 20 02 FB | 	rdlong	local02, fp
11c80     0C 4E 05 F1 | 	add	fp, #12
11c84     A7 12 02 FB | 	rdlong	arg01, fp
11c88     0C 4E 85 F1 | 	sub	fp, #12
11c8c     F8 BD BF FD | 	call	#_convertstring
11c90     FD 14 02 F6 | 	mov	arg02, result1
11c94     10 13 02 F6 | 	mov	arg01, local02
11c98     A4 90 B0 FD | 	call	#__system___string_cmp
11c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
11ca0     00 1E 26 56 |  if_ne	not	local01, #0
11ca4     A7 1E 62 FC | 	wrlong	local01, fp
11ca8     64 00 90 FD | 	jmp	#LR__1353
11cac                 | LR__1351
11cac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
11cac     08 4E 05 F1 | 	add	fp, #8
11cb0     A7 1E 02 FB | 	rdlong	local01, fp
11cb4     08 4E 85 F1 | 	sub	fp, #8
11cb8     2B 1E 0E F2 | 	cmp	local01, #43 wz
11cbc     14 4E 05 A1 |  if_e	add	fp, #20
11cc0     A7 22 02 AB |  if_e	rdlong	local03, fp
11cc4     14 4E 85 A1 |  if_e	sub	fp, #20
11cc8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11ccc     3C 00 90 5D |  if_ne	jmp	#LR__1352
11cd0     00 1E 06 F6 | 	mov	local01, #0
11cd4     A7 12 02 FB | 	rdlong	arg01, fp
11cd8     AC BD BF FD | 	call	#_convertstring
11cdc     FD 20 02 F6 | 	mov	local02, result1
11ce0     0C 4E 05 F1 | 	add	fp, #12
11ce4     A7 12 02 FB | 	rdlong	arg01, fp
11ce8     0C 4E 85 F1 | 	sub	fp, #12
11cec     98 BD BF FD | 	call	#_convertstring
11cf0     FD 14 02 F6 | 	mov	arg02, result1
11cf4     10 13 02 F6 | 	mov	arg01, local02
11cf8     44 90 B0 FD | 	call	#__system___string_cmp
11cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
11d00     00 1E 26 56 |  if_ne	not	local01, #0
11d04     A7 1E 62 FC | 	wrlong	local01, fp
11d08     04 00 90 FD | 	jmp	#LR__1353
11d0c                 | LR__1352
11d0c     A7 00 68 FC | 	wrlong	#0, fp
11d10                 | LR__1353
11d10     08 4E 05 F1 | 	add	fp, #8
11d14     A7 38 68 FC | 	wrlong	#28, fp
11d18     08 4E 85 F1 | 	sub	fp, #8
11d1c     A7 12 02 F6 | 	mov	arg01, fp
11d20     6C 7E BF FD | 	call	#_push
11d24     A7 F0 03 F6 | 	mov	ptra, fp
11d28     B2 00 A0 FD | 	call	#popregs_
11d2c                 | _do_ne_ret
11d2c     2D 00 64 FD | 	ret
11d30                 | 
11d30                 | ' 
11d30                 | ' 
11d30                 | ' 
11d30                 | ' ' -------------------   convert a variable on the top of stack to integer
11d30                 | ' 
11d30                 | ' sub do_converttoint
11d30                 | _do_converttoint
11d30     02 4A 05 F6 | 	mov	COUNT_, #2
11d34     A8 00 A0 FD | 	call	#pushregs_
11d38     18 F0 07 F1 | 	add	ptra, #24
11d3c     B8 7D BF FD | 	call	#_pop
11d40     FE 1E 02 F6 | 	mov	local01, result2
11d44     FF 20 02 F6 | 	mov	local02, result3
11d48     A7 FA 61 FC | 	wrlong	result1, fp
11d4c     04 4E 05 F1 | 	add	fp, #4
11d50     A7 1E 62 FC | 	wrlong	local01, fp
11d54     04 4E 05 F1 | 	add	fp, #4
11d58     A7 20 62 FC | 	wrlong	local02, fp
11d5c                 | ' t1=pop() 
11d5c                 | ' select case t1.result_type
11d5c     08 4E 85 F1 | 	sub	fp, #8
11d60     1C 20 0E F2 | 	cmp	local02, #28 wz
11d64     2C 00 90 AD |  if_e	jmp	#LR__1360
11d68     1D 20 0E F2 | 	cmp	local02, #29 wz
11d6c     40 00 90 AD |  if_e	jmp	#LR__1361
11d70     1E 20 0E F2 | 	cmp	local02, #30 wz
11d74     54 00 90 AD |  if_e	jmp	#LR__1362
11d78     1F 20 0E F2 | 	cmp	local02, #31 wz
11d7c     70 00 90 AD |  if_e	jmp	#LR__1363
11d80     2B 20 0E F2 | 	cmp	local02, #43 wz
11d84     94 00 90 AD |  if_e	jmp	#LR__1364
11d88     FF 20 0E F2 | 	cmp	local02, #255 wz
11d8c     C0 00 90 AD |  if_e	jmp	#LR__1365
11d90     DC 00 90 FD | 	jmp	#LR__1366
11d94                 | LR__1360
11d94     A7 20 02 FB | 	rdlong	local02, fp
11d98     0C 4E 05 F1 | 	add	fp, #12
11d9c     A7 20 62 FC | 	wrlong	local02, fp
11da0     04 4E 05 F1 | 	add	fp, #4
11da4     A7 38 68 FC | 	wrlong	#28, fp
11da8     10 4E 85 F1 | 	sub	fp, #16
11dac     D4 00 90 FD | 	jmp	#LR__1367
11db0                 | LR__1361
11db0     A7 20 02 FB | 	rdlong	local02, fp
11db4     0C 4E 05 F1 | 	add	fp, #12
11db8     A7 20 62 FC | 	wrlong	local02, fp
11dbc     04 4E 05 F1 | 	add	fp, #4
11dc0     A7 38 68 FC | 	wrlong	#28, fp
11dc4     10 4E 85 F1 | 	sub	fp, #16
11dc8     B8 00 90 FD | 	jmp	#LR__1367
11dcc                 | LR__1362
11dcc     A7 12 02 FB | 	rdlong	arg01, fp
11dd0     01 14 06 F6 | 	mov	arg02, #1
11dd4     2C BF B0 FD | 	call	#__system___float_tointeger
11dd8     0C 4E 05 F1 | 	add	fp, #12
11ddc     A7 FA 61 FC | 	wrlong	result1, fp
11de0     04 4E 05 F1 | 	add	fp, #4
11de4     A7 38 68 FC | 	wrlong	#28, fp
11de8     10 4E 85 F1 | 	sub	fp, #16
11dec     94 00 90 FD | 	jmp	#LR__1367
11df0                 | LR__1363
11df0     A7 12 02 FB | 	rdlong	arg01, fp
11df4     2C C2 B0 FD | 	call	#__system____builtin_atof
11df8     FD 12 02 F6 | 	mov	arg01, result1
11dfc     00 14 06 F6 | 	mov	arg02, #0
11e00     00 BF B0 FD | 	call	#__system___float_tointeger
11e04     0C 4E 05 F1 | 	add	fp, #12
11e08     A7 FA 61 FC | 	wrlong	result1, fp
11e0c     04 4E 05 F1 | 	add	fp, #4
11e10     A7 38 68 FC | 	wrlong	#28, fp
11e14     10 4E 85 F1 | 	sub	fp, #16
11e18     68 00 90 FD | 	jmp	#LR__1367
11e1c                 | LR__1364
11e1c     A7 12 02 FB | 	rdlong	arg01, fp
11e20     64 BC BF FD | 	call	#_convertstring
11e24     FD 12 02 F6 | 	mov	arg01, result1
11e28     F8 C1 B0 FD | 	call	#__system____builtin_atof
11e2c     FD 12 02 F6 | 	mov	arg01, result1
11e30     00 14 06 F6 | 	mov	arg02, #0
11e34     CC BE B0 FD | 	call	#__system___float_tointeger
11e38     0C 4E 05 F1 | 	add	fp, #12
11e3c     A7 FA 61 FC | 	wrlong	result1, fp
11e40     04 4E 05 F1 | 	add	fp, #4
11e44     A7 38 68 FC | 	wrlong	#28, fp
11e48     10 4E 85 F1 | 	sub	fp, #16
11e4c     34 00 90 FD | 	jmp	#LR__1367
11e50                 | LR__1365
11e50     0C 4E 05 F1 | 	add	fp, #12
11e54     A7 00 68 FC | 	wrlong	#0, fp
11e58     0C 4E 85 F1 | 	sub	fp, #12
11e5c     A7 20 02 FB | 	rdlong	local02, fp
11e60     10 4E 05 F1 | 	add	fp, #16
11e64     A7 20 62 FC | 	wrlong	local02, fp
11e68     10 4E 85 F1 | 	sub	fp, #16
11e6c     14 00 90 FD | 	jmp	#LR__1367
11e70                 | LR__1366
11e70     0C 4E 05 F1 | 	add	fp, #12
11e74     A7 00 68 FC | 	wrlong	#0, fp
11e78     04 4E 05 F1 | 	add	fp, #4
11e7c     A7 02 68 FC | 	wrlong	#1, fp
11e80     10 4E 85 F1 | 	sub	fp, #16
11e84                 | LR__1367
11e84     0C 4E 05 F1 | 	add	fp, #12
11e88     A7 20 02 FB | 	rdlong	local02, fp
11e8c     0C 4E 85 F1 | 	sub	fp, #12
11e90     A7 20 62 FC | 	wrlong	local02, fp
11e94     10 4E 05 F1 | 	add	fp, #16
11e98     A7 20 02 FB | 	rdlong	local02, fp
11e9c     08 4E 85 F1 | 	sub	fp, #8
11ea0     A7 20 62 FC | 	wrlong	local02, fp
11ea4     08 4E 85 F1 | 	sub	fp, #8
11ea8     A7 12 02 F6 | 	mov	arg01, fp
11eac     E0 7C BF FD | 	call	#_push
11eb0     A7 F0 03 F6 | 	mov	ptra, fp
11eb4     B2 00 A0 FD | 	call	#popregs_
11eb8                 | _do_converttoint_ret
11eb8     2D 00 64 FD | 	ret
11ebc                 | 
11ebc                 | ' 
11ebc                 | ' function converttoint (t1 as expr_result) as integer
11ebc                 | _converttoint
11ebc     02 4A 05 F6 | 	mov	COUNT_, #2
11ec0     A8 00 A0 FD | 	call	#pushregs_
11ec4     09 1F 02 F6 | 	mov	local01, arg01
11ec8                 | ' 
11ec8                 | ' select case t1.result_type
11ec8     08 1E 06 F1 | 	add	local01, #8
11ecc     0F 21 02 FB | 	rdlong	local02, local01
11ed0     08 1E 86 F1 | 	sub	local01, #8
11ed4     1C 20 0E F2 | 	cmp	local02, #28 wz
11ed8     24 00 90 AD |  if_e	jmp	#LR__1370
11edc     1D 20 0E F2 | 	cmp	local02, #29 wz
11ee0     24 00 90 AD |  if_e	jmp	#LR__1371
11ee4     1E 20 0E F2 | 	cmp	local02, #30 wz
11ee8     24 00 90 AD |  if_e	jmp	#LR__1372
11eec     1F 20 0E F2 | 	cmp	local02, #31 wz
11ef0     2C 00 90 AD |  if_e	jmp	#LR__1373
11ef4     2B 20 0E F2 | 	cmp	local02, #43 wz
11ef8     3C 00 90 AD |  if_e	jmp	#LR__1374
11efc     58 00 90 FD | 	jmp	#LR__1375
11f00                 | LR__1370
11f00     0F FB 01 FB | 	rdlong	result1, local01
11f04     54 00 90 FD | 	jmp	#LR__1376
11f08                 | LR__1371
11f08     0F FB 01 FB | 	rdlong	result1, local01
11f0c     4C 00 90 FD | 	jmp	#LR__1376
11f10                 | LR__1372
11f10     0F 13 02 FB | 	rdlong	arg01, local01
11f14     01 14 06 F6 | 	mov	arg02, #1
11f18     E8 BD B0 FD | 	call	#__system___float_tointeger
11f1c     3C 00 90 FD | 	jmp	#LR__1376
11f20                 | LR__1373
11f20     0F 13 02 FB | 	rdlong	arg01, local01
11f24     FC C0 B0 FD | 	call	#__system____builtin_atof
11f28     FD 12 02 F6 | 	mov	arg01, result1
11f2c     00 14 06 F6 | 	mov	arg02, #0
11f30     D0 BD B0 FD | 	call	#__system___float_tointeger
11f34     24 00 90 FD | 	jmp	#LR__1376
11f38                 | LR__1374
11f38     0F 13 02 FB | 	rdlong	arg01, local01
11f3c     48 BB BF FD | 	call	#_convertstring
11f40     FD 12 02 F6 | 	mov	arg01, result1
11f44     DC C0 B0 FD | 	call	#__system____builtin_atof
11f48     FD 12 02 F6 | 	mov	arg01, result1
11f4c     00 14 06 F6 | 	mov	arg02, #0
11f50     B0 BD B0 FD | 	call	#__system___float_tointeger
11f54     04 00 90 FD | 	jmp	#LR__1376
11f58                 | LR__1375
11f58     00 FA 05 F6 | 	mov	result1, #0
11f5c                 | LR__1376
11f5c     A7 F0 03 F6 | 	mov	ptra, fp
11f60     B2 00 A0 FD | 	call	#popregs_
11f64                 | _converttoint_ret
11f64     2D 00 64 FD | 	ret
11f68                 | 
11f68                 | ' 
11f68                 | ' function converttofloat (t1 as expr_result) as single
11f68                 | _converttofloat
11f68     03 4A 05 F6 | 	mov	COUNT_, #3
11f6c     A8 00 A0 FD | 	call	#pushregs_
11f70     09 1F 02 F6 | 	mov	local01, arg01
11f74                 | ' 
11f74                 | ' select case t1.result_type
11f74     08 1E 06 F1 | 	add	local01, #8
11f78     0F 21 02 FB | 	rdlong	local02, local01
11f7c     08 1E 86 F1 | 	sub	local01, #8
11f80     1C 20 0E F2 | 	cmp	local02, #28 wz
11f84     24 00 90 AD |  if_e	jmp	#LR__1380
11f88     1D 20 0E F2 | 	cmp	local02, #29 wz
11f8c     38 00 90 AD |  if_e	jmp	#LR__1381
11f90     1E 20 0E F2 | 	cmp	local02, #30 wz
11f94     3C 00 90 AD |  if_e	jmp	#LR__1382
11f98     1F 20 0E F2 | 	cmp	local02, #31 wz
11f9c     3C 00 90 AD |  if_e	jmp	#LR__1383
11fa0     2B 20 0E F2 | 	cmp	local02, #43 wz
11fa4     40 00 90 AD |  if_e	jmp	#LR__1384
11fa8     50 00 90 FD | 	jmp	#LR__1385
11fac                 | LR__1380
11fac     0F 13 02 FB | 	rdlong	arg01, local01
11fb0     09 13 52 F6 | 	abs	arg01, arg01 wc
11fb4     1F 22 C6 C9 |  if_b	decod	local03, #31
11fb8     00 22 06 36 |  if_ae	mov	local03, #0
11fbc     78 B4 B0 FD | 	call	#__system___float_fromuns
11fc0     11 FB 61 F5 | 	xor	result1, local03
11fc4     38 00 90 FD | 	jmp	#LR__1386
11fc8                 | LR__1381
11fc8     0F 13 02 FB | 	rdlong	arg01, local01
11fcc     68 B4 B0 FD | 	call	#__system___float_fromuns
11fd0     2C 00 90 FD | 	jmp	#LR__1386
11fd4                 | LR__1382
11fd4     0F FB 01 FB | 	rdlong	result1, local01
11fd8     24 00 90 FD | 	jmp	#LR__1386
11fdc                 | LR__1383
11fdc     0F 13 02 FB | 	rdlong	arg01, local01
11fe0     40 C0 B0 FD | 	call	#__system____builtin_atof
11fe4     18 00 90 FD | 	jmp	#LR__1386
11fe8                 | LR__1384
11fe8     0F 13 02 FB | 	rdlong	arg01, local01
11fec     98 BA BF FD | 	call	#_convertstring
11ff0     FD 12 02 F6 | 	mov	arg01, result1
11ff4     2C C0 B0 FD | 	call	#__system____builtin_atof
11ff8     04 00 90 FD | 	jmp	#LR__1386
11ffc                 | LR__1385
11ffc     00 FA 05 F6 | 	mov	result1, #0
12000                 | LR__1386
12000     A7 F0 03 F6 | 	mov	ptra, fp
12004     B2 00 A0 FD | 	call	#popregs_
12008                 | _converttofloat_ret
12008     2D 00 64 FD | 	ret
1200c                 | 
1200c                 | ' 
1200c                 | ' sub do_rnd
1200c                 | _do_rnd
1200c     01 4A 05 F6 | 	mov	COUNT_, #1
12010     A8 00 A0 FD | 	call	#pushregs_
12014     10 F0 07 F1 | 	add	ptra, #16
12018     6A 00 00 FF 
1201c     04 E4 05 F1 | 	add	objptr, ##54276
12020     F2 1E 02 FB | 	rdlong	local01, objptr
12024     0F 17 02 F6 | 	mov	arg03, local01
12028     01 16 66 F0 | 	shl	arg03, #1
1202c     0F 17 02 F1 | 	add	arg03, local01
12030     02 16 66 F0 | 	shl	arg03, #2
12034     03 00 00 FF 
12038     04 E4 85 F1 | 	sub	objptr, ##1540
1203c     F2 16 02 F1 | 	add	arg03, objptr
12040     0B 17 02 FB | 	rdlong	arg03, arg03
12044     0C 4E 05 F1 | 	add	fp, #12
12048     A7 16 62 FC | 	wrlong	arg03, fp
1204c                 | ' 
1204c                 | ' numpar=compiledline(lineptr_e).result.uresult
1204c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1204c     0C 4E 85 F1 | 	sub	fp, #12
12050     02 16 16 F2 | 	cmp	arg03, #2 wc
12054     67 00 00 FF 
12058     00 E4 85 F1 | 	sub	objptr, ##52736
1205c     3C 00 90 CD |  if_b	jmp	#LR__1390
12060     00 12 06 F6 | 	mov	arg01, #0
12064     E4 E5 B0 FD | 	call	#__system___getiolock_0442
12068     FD 12 02 F6 | 	mov	arg01, result1
1206c     A8 8C B0 FD | 	call	#__system___lockmem
12070     54 01 00 FF 
12074     41 14 06 F6 | 	mov	arg02, ##@LR__4716
12078     00 12 06 F6 | 	mov	arg01, #0
1207c     00 16 06 F6 | 	mov	arg03, #0
12080     9C 99 B0 FD | 	call	#__system___basic_print_string
12084     00 12 06 F6 | 	mov	arg01, #0
12088     C0 E5 B0 FD | 	call	#__system___getiolock_0442
1208c     FD 00 68 FC | 	wrlong	#0, result1
12090     27 12 06 F6 | 	mov	arg01, #39
12094     70 56 B0 FD | 	call	#_printerror
12098     2C 01 90 FD | 	jmp	#LR__1397
1209c                 | LR__1390
1209c                 | ' if numpar=0 then
1209c     0C 4E 05 F1 | 	add	fp, #12
120a0     A7 FE 09 FB | 	rdlong	result3, fp wz
120a4     0C 4E 85 F1 | 	sub	fp, #12
120a8     20 00 90 5D |  if_ne	jmp	#LR__1391
120ac     08 4E 05 F1 | 	add	fp, #8
120b0     A7 3A 68 FC | 	wrlong	#29, fp
120b4     08 4E 85 F1 | 	sub	fp, #8
120b8     1B FA 61 FD | 	getrnd	result1
120bc     A7 FA 61 FC | 	wrlong	result1, fp
120c0     A7 12 02 F6 | 	mov	arg01, fp
120c4     C8 7A BF FD | 	call	#_push
120c8     FC 00 90 FD | 	jmp	#LR__1396
120cc                 | LR__1391
120cc     28 7A BF FD | 	call	#_pop
120d0     A7 FA 61 FC | 	wrlong	result1, fp
120d4     04 4E 05 F1 | 	add	fp, #4
120d8     A7 FC 61 FC | 	wrlong	result2, fp
120dc     04 4E 05 F1 | 	add	fp, #4
120e0     A7 FE 61 FC | 	wrlong	result3, fp
120e4                 | '   t1=pop()
120e4                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
120e4     08 4E 85 F1 | 	sub	fp, #8
120e8     1C FE 0D F2 | 	cmp	result3, #28 wz
120ec     08 4E 05 51 |  if_ne	add	fp, #8
120f0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
120f4     08 4E 85 51 |  if_ne	sub	fp, #8
120f8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
120fc     2C 00 90 5D |  if_ne	jmp	#LR__1392
12100     1B FA 61 FD | 	getrnd	result1
12104     A7 1E 02 FB | 	rdlong	local01, fp
12108     0F FB 11 FD | 	qdiv	result1, local01
1210c     A7 12 02 F6 | 	mov	arg01, fp
12110     19 1E 62 FD | 	getqy	local01
12114     A7 1E 62 FC | 	wrlong	local01, fp
12118     08 4E 05 F1 | 	add	fp, #8
1211c     A7 3A 68 FC | 	wrlong	#29, fp
12120     08 4E 85 F1 | 	sub	fp, #8
12124     68 7A BF FD | 	call	#_push
12128     9C 00 90 FD | 	jmp	#LR__1395
1212c                 | LR__1392
1212c     08 4E 05 F1 | 	add	fp, #8
12130     A7 1E 02 FB | 	rdlong	local01, fp
12134     08 4E 85 F1 | 	sub	fp, #8
12138     1E 1E 0E F2 | 	cmp	local01, #30 wz
1213c     48 00 90 5D |  if_ne	jmp	#LR__1393
12140     A7 12 02 FB | 	rdlong	arg01, fp
12144     00 C0 24 FF 
12148     00 14 06 F6 | 	mov	arg02, ##1233125376
1214c     F0 B8 B0 FD | 	call	#__system___float_div
12150     FD 1E 02 F6 | 	mov	local01, result1
12154     1B 12 62 FD | 	getrnd	arg01
12158     74 13 06 F4 | 	bitl	arg01, #372
1215c     D8 B2 B0 FD | 	call	#__system___float_fromuns
12160     FD 14 02 F6 | 	mov	arg02, result1
12164     0F 13 02 F6 | 	mov	arg01, local01
12168     D0 B6 B0 FD | 	call	#__system___float_mul
1216c     A7 FA 61 FC | 	wrlong	result1, fp
12170     08 4E 05 F1 | 	add	fp, #8
12174     A7 3C 68 FC | 	wrlong	#30, fp
12178     08 4E 85 F1 | 	sub	fp, #8
1217c     A7 12 02 F6 | 	mov	arg01, fp
12180     0C 7A BF FD | 	call	#_push
12184     40 00 90 FD | 	jmp	#LR__1394
12188                 | LR__1393
12188                 | '     print "rnd: "; : printerror(40) 
12188     00 12 06 F6 | 	mov	arg01, #0
1218c     BC E4 B0 FD | 	call	#__system___getiolock_0442
12190     FD 12 02 F6 | 	mov	arg01, result1
12194     80 8B B0 FD | 	call	#__system___lockmem
12198     54 01 00 FF 
1219c     47 14 06 F6 | 	mov	arg02, ##@LR__4717
121a0     00 12 06 F6 | 	mov	arg01, #0
121a4     00 16 06 F6 | 	mov	arg03, #0
121a8     74 98 B0 FD | 	call	#__system___basic_print_string
121ac     00 12 06 F6 | 	mov	arg01, #0
121b0     98 E4 B0 FD | 	call	#__system___getiolock_0442
121b4     FD 00 68 FC | 	wrlong	#0, result1
121b8     28 12 06 F6 | 	mov	arg01, #40
121bc     48 55 B0 FD | 	call	#_printerror
121c0     A7 12 02 F6 | 	mov	arg01, fp
121c4     C8 79 BF FD | 	call	#_push
121c8                 | LR__1394
121c8                 | LR__1395
121c8                 | LR__1396
121c8                 | LR__1397
121c8     A7 F0 03 F6 | 	mov	ptra, fp
121cc     B2 00 A0 FD | 	call	#popregs_
121d0                 | _do_rnd_ret
121d0     2D 00 64 FD | 	ret
121d4                 | 
121d4                 | ' 
121d4                 | ' sub do_getenvsustain
121d4                 | _do_getenvsustain
121d4     01 4A 05 F6 | 	mov	COUNT_, #1
121d8     A8 00 A0 FD | 	call	#pushregs_
121dc     10 F0 07 F1 | 	add	ptra, #16
121e0     6A 00 00 FF 
121e4     04 E4 05 F1 | 	add	objptr, ##54276
121e8     F2 1E 02 FB | 	rdlong	local01, objptr
121ec     0F 17 02 F6 | 	mov	arg03, local01
121f0     01 16 66 F0 | 	shl	arg03, #1
121f4     0F 17 02 F1 | 	add	arg03, local01
121f8     02 16 66 F0 | 	shl	arg03, #2
121fc     03 00 00 FF 
12200     04 E4 85 F1 | 	sub	objptr, ##1540
12204     F2 16 02 F1 | 	add	arg03, objptr
12208     0B 17 02 FB | 	rdlong	arg03, arg03
1220c     0C 4E 05 F1 | 	add	fp, #12
12210     A7 16 62 FC | 	wrlong	arg03, fp
12214                 | ' 
12214                 | ' numpar=compiledline(lineptr_e).result.uresult
12214                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12214     0C 4E 85 F1 | 	sub	fp, #12
12218     02 16 16 F2 | 	cmp	arg03, #2 wc
1221c     67 00 00 FF 
12220     00 E4 85 F1 | 	sub	objptr, ##52736
12224     0C 4E 05 C1 |  if_b	add	fp, #12
12228     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1222c     0C 4E 85 C1 |  if_b	sub	fp, #12
12230     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1400
12234     00 12 06 F6 | 	mov	arg01, #0
12238     10 E4 B0 FD | 	call	#__system___getiolock_0442
1223c     FD 12 02 F6 | 	mov	arg01, result1
12240     D4 8A B0 FD | 	call	#__system___lockmem
12244     54 01 00 FF 
12248     4D 14 06 F6 | 	mov	arg02, ##@LR__4718
1224c     00 12 06 F6 | 	mov	arg01, #0
12250     00 16 06 F6 | 	mov	arg03, #0
12254     C8 97 B0 FD | 	call	#__system___basic_print_string
12258     00 12 06 F6 | 	mov	arg01, #0
1225c     EC E3 B0 FD | 	call	#__system___getiolock_0442
12260     FD 00 68 FC | 	wrlong	#0, result1
12264     27 12 06 F6 | 	mov	arg01, #39
12268     9C 54 B0 FD | 	call	#_printerror
1226c     64 00 90 FD | 	jmp	#LR__1401
12270                 | LR__1400
12270     84 78 BF FD | 	call	#_pop
12274     FD 1E 02 F6 | 	mov	local01, result1
12278     FE 16 02 F6 | 	mov	arg03, result2
1227c     A7 1E 62 FC | 	wrlong	local01, fp
12280     04 4E 05 F1 | 	add	fp, #4
12284     A7 16 62 FC | 	wrlong	arg03, fp
12288     04 4E 05 F1 | 	add	fp, #4
1228c     A7 FE 61 FC | 	wrlong	result3, fp
12290     08 4E 85 F1 | 	sub	fp, #8
12294     A7 12 02 F6 | 	mov	arg01, fp
12298     20 FC BF FD | 	call	#_converttoint
1229c     FD 1E 02 F6 | 	mov	local01, result1
122a0     01 1E 66 F0 | 	shl	local01, #1
122a4     7B 00 00 FF 
122a8     18 E4 05 F1 | 	add	objptr, ##63000
122ac     F2 1E 02 F1 | 	add	local01, objptr
122b0     0F 1F E2 FA | 	rdword	local01, local01
122b4     A7 1E 62 FC | 	wrlong	local01, fp
122b8     08 4E 05 F1 | 	add	fp, #8
122bc     A7 38 68 FC | 	wrlong	#28, fp
122c0     08 4E 85 F1 | 	sub	fp, #8
122c4     A7 12 02 F6 | 	mov	arg01, fp
122c8     7B 00 00 FF 
122cc     18 E4 85 F1 | 	sub	objptr, ##63000
122d0     BC 78 BF FD | 	call	#_push
122d4                 | LR__1401
122d4     A7 F0 03 F6 | 	mov	ptra, fp
122d8     B2 00 A0 FD | 	call	#popregs_
122dc                 | _do_getenvsustain_ret
122dc     2D 00 64 FD | 	ret
122e0                 | 
122e0                 | ' 
122e0                 | ' sub do_sin
122e0                 | _do_sin
122e0     01 4A 05 F6 | 	mov	COUNT_, #1
122e4     A8 00 A0 FD | 	call	#pushregs_
122e8     10 F0 07 F1 | 	add	ptra, #16
122ec     6A 00 00 FF 
122f0     04 E4 05 F1 | 	add	objptr, ##54276
122f4     F2 1E 02 FB | 	rdlong	local01, objptr
122f8     0F 17 02 F6 | 	mov	arg03, local01
122fc     01 16 66 F0 | 	shl	arg03, #1
12300     0F 17 02 F1 | 	add	arg03, local01
12304     02 16 66 F0 | 	shl	arg03, #2
12308     03 00 00 FF 
1230c     04 E4 85 F1 | 	sub	objptr, ##1540
12310     F2 16 02 F1 | 	add	arg03, objptr
12314     0B 17 02 FB | 	rdlong	arg03, arg03
12318     0C 4E 05 F1 | 	add	fp, #12
1231c     A7 16 62 FC | 	wrlong	arg03, fp
12320                 | ' 
12320                 | ' numpar=compiledline(lineptr_e).result.uresult
12320                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
12320     0C 4E 85 F1 | 	sub	fp, #12
12324     02 16 16 F2 | 	cmp	arg03, #2 wc
12328     67 00 00 FF 
1232c     00 E4 85 F1 | 	sub	objptr, ##52736
12330     0C 4E 05 C1 |  if_b	add	fp, #12
12334     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12338     0C 4E 85 C1 |  if_b	sub	fp, #12
1233c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1410
12340     00 12 06 F6 | 	mov	arg01, #0
12344     04 E3 B0 FD | 	call	#__system___getiolock_0442
12348     FD 12 02 F6 | 	mov	arg01, result1
1234c     C8 89 B0 FD | 	call	#__system___lockmem
12350     54 01 00 FF 
12354     5D 14 06 F6 | 	mov	arg02, ##@LR__4719
12358     00 12 06 F6 | 	mov	arg01, #0
1235c     00 16 06 F6 | 	mov	arg03, #0
12360     BC 96 B0 FD | 	call	#__system___basic_print_string
12364     00 12 06 F6 | 	mov	arg01, #0
12368     E0 E2 B0 FD | 	call	#__system___getiolock_0442
1236c     FD 00 68 FC | 	wrlong	#0, result1
12370     27 12 06 F6 | 	mov	arg01, #39
12374     90 53 B0 FD | 	call	#_printerror
12378     64 00 90 FD | 	jmp	#LR__1411
1237c                 | LR__1410
1237c     78 77 BF FD | 	call	#_pop
12380     A7 FA 61 FC | 	wrlong	result1, fp
12384     04 4E 05 F1 | 	add	fp, #4
12388     A7 FC 61 FC | 	wrlong	result2, fp
1238c     04 4E 05 F1 | 	add	fp, #4
12390     A7 FE 61 FC | 	wrlong	result3, fp
12394     08 4E 85 F1 | 	sub	fp, #8
12398     7B 00 00 FF 
1239c     0C E4 05 F1 | 	add	objptr, ##62988
123a0     F2 1E 02 FB | 	rdlong	local01, objptr
123a4     7B 00 00 FF 
123a8     0C E4 85 F1 | 	sub	objptr, ##62988
123ac     A7 12 02 F6 | 	mov	arg01, fp
123b0     B4 FB BF FD | 	call	#_converttofloat
123b4     FD 14 02 F6 | 	mov	arg02, result1
123b8     0F 13 02 F6 | 	mov	arg01, local01
123bc     7C B4 B0 FD | 	call	#__system___float_mul
123c0     FD 12 02 F6 | 	mov	arg01, result1
123c4     B0 BD B0 FD | 	call	#__system____builtin_sinf
123c8     A7 FA 61 FC | 	wrlong	result1, fp
123cc     08 4E 05 F1 | 	add	fp, #8
123d0     A7 3C 68 FC | 	wrlong	#30, fp
123d4     08 4E 85 F1 | 	sub	fp, #8
123d8     A7 12 02 F6 | 	mov	arg01, fp
123dc     B0 77 BF FD | 	call	#_push
123e0                 | LR__1411
123e0     A7 F0 03 F6 | 	mov	ptra, fp
123e4     B2 00 A0 FD | 	call	#popregs_
123e8                 | _do_sin_ret
123e8     2D 00 64 FD | 	ret
123ec                 | 
123ec                 | ' 
123ec                 | ' sub do_cos
123ec                 | _do_cos
123ec     01 4A 05 F6 | 	mov	COUNT_, #1
123f0     A8 00 A0 FD | 	call	#pushregs_
123f4     10 F0 07 F1 | 	add	ptra, #16
123f8     6A 00 00 FF 
123fc     04 E4 05 F1 | 	add	objptr, ##54276
12400     F2 1E 02 FB | 	rdlong	local01, objptr
12404     0F 17 02 F6 | 	mov	arg03, local01
12408     01 16 66 F0 | 	shl	arg03, #1
1240c     0F 17 02 F1 | 	add	arg03, local01
12410     02 16 66 F0 | 	shl	arg03, #2
12414     03 00 00 FF 
12418     04 E4 85 F1 | 	sub	objptr, ##1540
1241c     F2 16 02 F1 | 	add	arg03, objptr
12420     0B 17 02 FB | 	rdlong	arg03, arg03
12424     0C 4E 05 F1 | 	add	fp, #12
12428     A7 16 62 FC | 	wrlong	arg03, fp
1242c                 | ' 
1242c                 | ' numpar=compiledline(lineptr_e).result.uresult
1242c                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
1242c     0C 4E 85 F1 | 	sub	fp, #12
12430     02 16 16 F2 | 	cmp	arg03, #2 wc
12434     67 00 00 FF 
12438     00 E4 85 F1 | 	sub	objptr, ##52736
1243c     0C 4E 05 C1 |  if_b	add	fp, #12
12440     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12444     0C 4E 85 C1 |  if_b	sub	fp, #12
12448     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1420
1244c     00 12 06 F6 | 	mov	arg01, #0
12450     F8 E1 B0 FD | 	call	#__system___getiolock_0442
12454     FD 12 02 F6 | 	mov	arg01, result1
12458     BC 88 B0 FD | 	call	#__system___lockmem
1245c     54 01 00 FF 
12460     63 14 06 F6 | 	mov	arg02, ##@LR__4720
12464     00 12 06 F6 | 	mov	arg01, #0
12468     00 16 06 F6 | 	mov	arg03, #0
1246c     B0 95 B0 FD | 	call	#__system___basic_print_string
12470     00 12 06 F6 | 	mov	arg01, #0
12474     D4 E1 B0 FD | 	call	#__system___getiolock_0442
12478     FD 00 68 FC | 	wrlong	#0, result1
1247c     27 12 06 F6 | 	mov	arg01, #39
12480     84 52 B0 FD | 	call	#_printerror
12484     78 00 90 FD | 	jmp	#LR__1421
12488                 | LR__1420
12488     6C 76 BF FD | 	call	#_pop
1248c     A7 FA 61 FC | 	wrlong	result1, fp
12490     04 4E 05 F1 | 	add	fp, #4
12494     A7 FC 61 FC | 	wrlong	result2, fp
12498     04 4E 05 F1 | 	add	fp, #4
1249c     A7 FE 61 FC | 	wrlong	result3, fp
124a0     08 4E 85 F1 | 	sub	fp, #8
124a4     7B 00 00 FF 
124a8     0C E4 05 F1 | 	add	objptr, ##62988
124ac     F2 1E 02 FB | 	rdlong	local01, objptr
124b0     7B 00 00 FF 
124b4     0C E4 85 F1 | 	sub	objptr, ##62988
124b8     A7 12 02 F6 | 	mov	arg01, fp
124bc     A8 FA BF FD | 	call	#_converttofloat
124c0     FD 14 02 F6 | 	mov	arg02, result1
124c4     0F 13 02 F6 | 	mov	arg01, local01
124c8     70 B3 B0 FD | 	call	#__system___float_mul
124cc     FD 14 02 F6 | 	mov	arg02, result1
124d0     87 E4 1F FF 
124d4     DB 13 06 F6 | 	mov	arg01, ##1070141403
124d8     1F 14 E6 F4 | 	bitnot	arg02, #31
124dc     8C AF B0 FD | 	call	#__system___float_add
124e0     FD 12 02 F6 | 	mov	arg01, result1
124e4     90 BC B0 FD | 	call	#__system____builtin_sinf
124e8     A7 FA 61 FC | 	wrlong	result1, fp
124ec     08 4E 05 F1 | 	add	fp, #8
124f0     A7 3C 68 FC | 	wrlong	#30, fp
124f4     08 4E 85 F1 | 	sub	fp, #8
124f8     A7 12 02 F6 | 	mov	arg01, fp
124fc     90 76 BF FD | 	call	#_push
12500                 | LR__1421
12500     A7 F0 03 F6 | 	mov	ptra, fp
12504     B2 00 A0 FD | 	call	#popregs_
12508                 | _do_cos_ret
12508     2D 00 64 FD | 	ret
1250c                 | 
1250c                 | ' 
1250c                 | ' sub do_tan
1250c                 | _do_tan
1250c     01 4A 05 F6 | 	mov	COUNT_, #1
12510     A8 00 A0 FD | 	call	#pushregs_
12514     10 F0 07 F1 | 	add	ptra, #16
12518     6A 00 00 FF 
1251c     04 E4 05 F1 | 	add	objptr, ##54276
12520     F2 1E 02 FB | 	rdlong	local01, objptr
12524     0F 17 02 F6 | 	mov	arg03, local01
12528     01 16 66 F0 | 	shl	arg03, #1
1252c     0F 17 02 F1 | 	add	arg03, local01
12530     02 16 66 F0 | 	shl	arg03, #2
12534     03 00 00 FF 
12538     04 E4 85 F1 | 	sub	objptr, ##1540
1253c     F2 16 02 F1 | 	add	arg03, objptr
12540     0B 17 02 FB | 	rdlong	arg03, arg03
12544     0C 4E 05 F1 | 	add	fp, #12
12548     A7 16 62 FC | 	wrlong	arg03, fp
1254c                 | ' 
1254c                 | ' numpar=compiledline(lineptr_e).result.uresult
1254c                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1254c     0C 4E 85 F1 | 	sub	fp, #12
12550     02 16 16 F2 | 	cmp	arg03, #2 wc
12554     67 00 00 FF 
12558     00 E4 85 F1 | 	sub	objptr, ##52736
1255c     0C 4E 05 C1 |  if_b	add	fp, #12
12560     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12564     0C 4E 85 C1 |  if_b	sub	fp, #12
12568     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1430
1256c     00 12 06 F6 | 	mov	arg01, #0
12570     D8 E0 B0 FD | 	call	#__system___getiolock_0442
12574     FD 12 02 F6 | 	mov	arg01, result1
12578     9C 87 B0 FD | 	call	#__system___lockmem
1257c     54 01 00 FF 
12580     69 14 06 F6 | 	mov	arg02, ##@LR__4721
12584     00 12 06 F6 | 	mov	arg01, #0
12588     00 16 06 F6 | 	mov	arg03, #0
1258c     90 94 B0 FD | 	call	#__system___basic_print_string
12590     00 12 06 F6 | 	mov	arg01, #0
12594     B4 E0 B0 FD | 	call	#__system___getiolock_0442
12598     FD 00 68 FC | 	wrlong	#0, result1
1259c     27 12 06 F6 | 	mov	arg01, #39
125a0     64 51 B0 FD | 	call	#_printerror
125a4     64 00 90 FD | 	jmp	#LR__1431
125a8                 | LR__1430
125a8     4C 75 BF FD | 	call	#_pop
125ac     A7 FA 61 FC | 	wrlong	result1, fp
125b0     04 4E 05 F1 | 	add	fp, #4
125b4     A7 FC 61 FC | 	wrlong	result2, fp
125b8     04 4E 05 F1 | 	add	fp, #4
125bc     A7 FE 61 FC | 	wrlong	result3, fp
125c0     08 4E 85 F1 | 	sub	fp, #8
125c4     7B 00 00 FF 
125c8     0C E4 05 F1 | 	add	objptr, ##62988
125cc     F2 1E 02 FB | 	rdlong	local01, objptr
125d0     7B 00 00 FF 
125d4     0C E4 85 F1 | 	sub	objptr, ##62988
125d8     A7 12 02 F6 | 	mov	arg01, fp
125dc     88 F9 BF FD | 	call	#_converttofloat
125e0     FD 14 02 F6 | 	mov	arg02, result1
125e4     0F 13 02 F6 | 	mov	arg01, local01
125e8     50 B2 B0 FD | 	call	#__system___float_mul
125ec     FD 12 02 F6 | 	mov	arg01, result1
125f0     D0 BC B0 FD | 	call	#__system____builtin_tanf
125f4     A7 FA 61 FC | 	wrlong	result1, fp
125f8     08 4E 05 F1 | 	add	fp, #8
125fc     A7 3C 68 FC | 	wrlong	#30, fp
12600     08 4E 85 F1 | 	sub	fp, #8
12604     A7 12 02 F6 | 	mov	arg01, fp
12608     84 75 BF FD | 	call	#_push
1260c                 | LR__1431
1260c     A7 F0 03 F6 | 	mov	ptra, fp
12610     B2 00 A0 FD | 	call	#popregs_
12614                 | _do_tan_ret
12614     2D 00 64 FD | 	ret
12618                 | 
12618                 | ' 
12618                 | ' sub do_asin
12618                 | _do_asin
12618     01 4A 05 F6 | 	mov	COUNT_, #1
1261c     A8 00 A0 FD | 	call	#pushregs_
12620     10 F0 07 F1 | 	add	ptra, #16
12624     6A 00 00 FF 
12628     04 E4 05 F1 | 	add	objptr, ##54276
1262c     F2 1E 02 FB | 	rdlong	local01, objptr
12630     0F 17 02 F6 | 	mov	arg03, local01
12634     01 16 66 F0 | 	shl	arg03, #1
12638     0F 17 02 F1 | 	add	arg03, local01
1263c     02 16 66 F0 | 	shl	arg03, #2
12640     03 00 00 FF 
12644     04 E4 85 F1 | 	sub	objptr, ##1540
12648     F2 16 02 F1 | 	add	arg03, objptr
1264c     0B 17 02 FB | 	rdlong	arg03, arg03
12650     0C 4E 05 F1 | 	add	fp, #12
12654     A7 16 62 FC | 	wrlong	arg03, fp
12658                 | ' 
12658                 | ' numpar=compiledline(lineptr_e).result.uresult
12658                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
12658     0C 4E 85 F1 | 	sub	fp, #12
1265c     02 16 16 F2 | 	cmp	arg03, #2 wc
12660     67 00 00 FF 
12664     00 E4 85 F1 | 	sub	objptr, ##52736
12668     0C 4E 05 C1 |  if_b	add	fp, #12
1266c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12670     0C 4E 85 C1 |  if_b	sub	fp, #12
12674     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1440
12678     00 12 06 F6 | 	mov	arg01, #0
1267c     CC DF B0 FD | 	call	#__system___getiolock_0442
12680     FD 12 02 F6 | 	mov	arg01, result1
12684     90 86 B0 FD | 	call	#__system___lockmem
12688     54 01 00 FF 
1268c     6F 14 06 F6 | 	mov	arg02, ##@LR__4722
12690     00 12 06 F6 | 	mov	arg01, #0
12694     00 16 06 F6 | 	mov	arg03, #0
12698     84 93 B0 FD | 	call	#__system___basic_print_string
1269c     00 12 06 F6 | 	mov	arg01, #0
126a0     A8 DF B0 FD | 	call	#__system___getiolock_0442
126a4     FD 00 68 FC | 	wrlong	#0, result1
126a8     27 12 06 F6 | 	mov	arg01, #39
126ac     58 50 B0 FD | 	call	#_printerror
126b0     64 00 90 FD | 	jmp	#LR__1441
126b4                 | LR__1440
126b4     40 74 BF FD | 	call	#_pop
126b8     FF 1E 02 F6 | 	mov	local01, result3
126bc     A7 FA 61 FC | 	wrlong	result1, fp
126c0     04 4E 05 F1 | 	add	fp, #4
126c4     A7 FC 61 FC | 	wrlong	result2, fp
126c8     04 4E 05 F1 | 	add	fp, #4
126cc     A7 1E 62 FC | 	wrlong	local01, fp
126d0     08 4E 85 F1 | 	sub	fp, #8
126d4     A7 12 02 F6 | 	mov	arg01, fp
126d8     8C F8 BF FD | 	call	#_converttofloat
126dc     FD 12 02 F6 | 	mov	arg01, result1
126e0     28 BC B0 FD | 	call	#__system____builtin_asinf
126e4     FD 12 02 F6 | 	mov	arg01, result1
126e8     7B 00 00 FF 
126ec     10 E4 05 F1 | 	add	objptr, ##62992
126f0     F2 14 02 FB | 	rdlong	arg02, objptr
126f4     7B 00 00 FF 
126f8     10 E4 85 F1 | 	sub	objptr, ##62992
126fc     3C B1 B0 FD | 	call	#__system___float_mul
12700     A7 FA 61 FC | 	wrlong	result1, fp
12704     08 4E 05 F1 | 	add	fp, #8
12708     A7 3C 68 FC | 	wrlong	#30, fp
1270c     08 4E 85 F1 | 	sub	fp, #8
12710     A7 12 02 F6 | 	mov	arg01, fp
12714     78 74 BF FD | 	call	#_push
12718                 | LR__1441
12718     A7 F0 03 F6 | 	mov	ptra, fp
1271c     B2 00 A0 FD | 	call	#popregs_
12720                 | _do_asin_ret
12720     2D 00 64 FD | 	ret
12724                 | 
12724                 | ' 
12724                 | ' sub do_acos
12724                 | _do_acos
12724     01 4A 05 F6 | 	mov	COUNT_, #1
12728     A8 00 A0 FD | 	call	#pushregs_
1272c     10 F0 07 F1 | 	add	ptra, #16
12730     6A 00 00 FF 
12734     04 E4 05 F1 | 	add	objptr, ##54276
12738     F2 1E 02 FB | 	rdlong	local01, objptr
1273c     0F 17 02 F6 | 	mov	arg03, local01
12740     01 16 66 F0 | 	shl	arg03, #1
12744     0F 17 02 F1 | 	add	arg03, local01
12748     02 16 66 F0 | 	shl	arg03, #2
1274c     03 00 00 FF 
12750     04 E4 85 F1 | 	sub	objptr, ##1540
12754     F2 16 02 F1 | 	add	arg03, objptr
12758     0B 17 02 FB | 	rdlong	arg03, arg03
1275c     0C 4E 05 F1 | 	add	fp, #12
12760     A7 16 62 FC | 	wrlong	arg03, fp
12764                 | ' 
12764                 | ' numpar=compiledline(lineptr_e).result.uresult
12764                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
12764     0C 4E 85 F1 | 	sub	fp, #12
12768     02 16 16 F2 | 	cmp	arg03, #2 wc
1276c     67 00 00 FF 
12770     00 E4 85 F1 | 	sub	objptr, ##52736
12774     0C 4E 05 C1 |  if_b	add	fp, #12
12778     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1277c     0C 4E 85 C1 |  if_b	sub	fp, #12
12780     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1450
12784     00 12 06 F6 | 	mov	arg01, #0
12788     C0 DE B0 FD | 	call	#__system___getiolock_0442
1278c     FD 12 02 F6 | 	mov	arg01, result1
12790     84 85 B0 FD | 	call	#__system___lockmem
12794     54 01 00 FF 
12798     76 14 06 F6 | 	mov	arg02, ##@LR__4723
1279c     00 12 06 F6 | 	mov	arg01, #0
127a0     00 16 06 F6 | 	mov	arg03, #0
127a4     78 92 B0 FD | 	call	#__system___basic_print_string
127a8     00 12 06 F6 | 	mov	arg01, #0
127ac     9C DE B0 FD | 	call	#__system___getiolock_0442
127b0     FD 00 68 FC | 	wrlong	#0, result1
127b4     27 12 06 F6 | 	mov	arg01, #39
127b8     4C 4F B0 FD | 	call	#_printerror
127bc     64 00 90 FD | 	jmp	#LR__1451
127c0                 | LR__1450
127c0     34 73 BF FD | 	call	#_pop
127c4     FF 1E 02 F6 | 	mov	local01, result3
127c8     A7 FA 61 FC | 	wrlong	result1, fp
127cc     04 4E 05 F1 | 	add	fp, #4
127d0     A7 FC 61 FC | 	wrlong	result2, fp
127d4     04 4E 05 F1 | 	add	fp, #4
127d8     A7 1E 62 FC | 	wrlong	local01, fp
127dc     08 4E 85 F1 | 	sub	fp, #8
127e0     A7 12 02 F6 | 	mov	arg01, fp
127e4     80 F7 BF FD | 	call	#_converttofloat
127e8     FD 12 02 F6 | 	mov	arg01, result1
127ec     68 BB B0 FD | 	call	#__system____builtin_acosf
127f0     FD 12 02 F6 | 	mov	arg01, result1
127f4     7B 00 00 FF 
127f8     10 E4 05 F1 | 	add	objptr, ##62992
127fc     F2 14 02 FB | 	rdlong	arg02, objptr
12800     7B 00 00 FF 
12804     10 E4 85 F1 | 	sub	objptr, ##62992
12808     30 B0 B0 FD | 	call	#__system___float_mul
1280c     A7 FA 61 FC | 	wrlong	result1, fp
12810     08 4E 05 F1 | 	add	fp, #8
12814     A7 3C 68 FC | 	wrlong	#30, fp
12818     08 4E 85 F1 | 	sub	fp, #8
1281c     A7 12 02 F6 | 	mov	arg01, fp
12820     6C 73 BF FD | 	call	#_push
12824                 | LR__1451
12824     A7 F0 03 F6 | 	mov	ptra, fp
12828     B2 00 A0 FD | 	call	#popregs_
1282c                 | _do_acos_ret
1282c     2D 00 64 FD | 	ret
12830                 | 
12830                 | ' 
12830                 | ' sub do_atn
12830                 | _do_atn
12830     01 4A 05 F6 | 	mov	COUNT_, #1
12834     A8 00 A0 FD | 	call	#pushregs_
12838     10 F0 07 F1 | 	add	ptra, #16
1283c     6A 00 00 FF 
12840     04 E4 05 F1 | 	add	objptr, ##54276
12844     F2 1E 02 FB | 	rdlong	local01, objptr
12848     0F 17 02 F6 | 	mov	arg03, local01
1284c     01 16 66 F0 | 	shl	arg03, #1
12850     0F 17 02 F1 | 	add	arg03, local01
12854     02 16 66 F0 | 	shl	arg03, #2
12858     03 00 00 FF 
1285c     04 E4 85 F1 | 	sub	objptr, ##1540
12860     F2 16 02 F1 | 	add	arg03, objptr
12864     0B 17 02 FB | 	rdlong	arg03, arg03
12868     0C 4E 05 F1 | 	add	fp, #12
1286c     A7 16 62 FC | 	wrlong	arg03, fp
12870                 | ' 
12870                 | ' numpar=compiledline(lineptr_e).result.uresult
12870                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
12870     0C 4E 85 F1 | 	sub	fp, #12
12874     02 16 16 F2 | 	cmp	arg03, #2 wc
12878     67 00 00 FF 
1287c     00 E4 85 F1 | 	sub	objptr, ##52736
12880     0C 4E 05 C1 |  if_b	add	fp, #12
12884     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12888     0C 4E 85 C1 |  if_b	sub	fp, #12
1288c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1460
12890     00 12 06 F6 | 	mov	arg01, #0
12894     B4 DD B0 FD | 	call	#__system___getiolock_0442
12898     FD 12 02 F6 | 	mov	arg01, result1
1289c     78 84 B0 FD | 	call	#__system___lockmem
128a0     54 01 00 FF 
128a4     7D 14 06 F6 | 	mov	arg02, ##@LR__4724
128a8     00 12 06 F6 | 	mov	arg01, #0
128ac     00 16 06 F6 | 	mov	arg03, #0
128b0     6C 91 B0 FD | 	call	#__system___basic_print_string
128b4     00 12 06 F6 | 	mov	arg01, #0
128b8     90 DD B0 FD | 	call	#__system___getiolock_0442
128bc     FD 00 68 FC | 	wrlong	#0, result1
128c0     27 12 06 F6 | 	mov	arg01, #39
128c4     40 4E B0 FD | 	call	#_printerror
128c8     6C 00 90 FD | 	jmp	#LR__1461
128cc                 | LR__1460
128cc     28 72 BF FD | 	call	#_pop
128d0     FF 1E 02 F6 | 	mov	local01, result3
128d4     A7 FA 61 FC | 	wrlong	result1, fp
128d8     04 4E 05 F1 | 	add	fp, #4
128dc     A7 FC 61 FC | 	wrlong	result2, fp
128e0     04 4E 05 F1 | 	add	fp, #4
128e4     A7 1E 62 FC | 	wrlong	local01, fp
128e8     08 4E 85 F1 | 	sub	fp, #8
128ec     A7 12 02 F6 | 	mov	arg01, fp
128f0     74 F6 BF FD | 	call	#_converttofloat
128f4     FD 12 02 F6 | 	mov	arg01, result1
128f8     00 C0 1F FF 
128fc     00 14 06 F6 | 	mov	arg02, ##1065353216
12900     A0 BA B0 FD | 	call	#__system____builtin_atan2f
12904     FD 12 02 F6 | 	mov	arg01, result1
12908     7B 00 00 FF 
1290c     10 E4 05 F1 | 	add	objptr, ##62992
12910     F2 14 02 FB | 	rdlong	arg02, objptr
12914     7B 00 00 FF 
12918     10 E4 85 F1 | 	sub	objptr, ##62992
1291c     1C AF B0 FD | 	call	#__system___float_mul
12920     A7 FA 61 FC | 	wrlong	result1, fp
12924     08 4E 05 F1 | 	add	fp, #8
12928     A7 3C 68 FC | 	wrlong	#30, fp
1292c     08 4E 85 F1 | 	sub	fp, #8
12930     A7 12 02 F6 | 	mov	arg01, fp
12934     58 72 BF FD | 	call	#_push
12938                 | LR__1461
12938     A7 F0 03 F6 | 	mov	ptra, fp
1293c     B2 00 A0 FD | 	call	#popregs_
12940                 | _do_atn_ret
12940     2D 00 64 FD | 	ret
12944                 | 
12944                 | ' 
12944                 | ' sub do_sqr
12944                 | _do_sqr
12944     01 4A 05 F6 | 	mov	COUNT_, #1
12948     A8 00 A0 FD | 	call	#pushregs_
1294c     10 F0 07 F1 | 	add	ptra, #16
12950     6A 00 00 FF 
12954     04 E4 05 F1 | 	add	objptr, ##54276
12958     F2 1E 02 FB | 	rdlong	local01, objptr
1295c     0F 17 02 F6 | 	mov	arg03, local01
12960     01 16 66 F0 | 	shl	arg03, #1
12964     0F 17 02 F1 | 	add	arg03, local01
12968     02 16 66 F0 | 	shl	arg03, #2
1296c     03 00 00 FF 
12970     04 E4 85 F1 | 	sub	objptr, ##1540
12974     F2 16 02 F1 | 	add	arg03, objptr
12978     0B 17 02 FB | 	rdlong	arg03, arg03
1297c     0C 4E 05 F1 | 	add	fp, #12
12980     A7 16 62 FC | 	wrlong	arg03, fp
12984                 | ' 
12984                 | ' numpar=compiledline(lineptr_e).result.uresult
12984                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
12984     0C 4E 85 F1 | 	sub	fp, #12
12988     02 16 16 F2 | 	cmp	arg03, #2 wc
1298c     67 00 00 FF 
12990     00 E4 85 F1 | 	sub	objptr, ##52736
12994     0C 4E 05 C1 |  if_b	add	fp, #12
12998     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1299c     0C 4E 85 C1 |  if_b	sub	fp, #12
129a0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1470
129a4     00 12 06 F6 | 	mov	arg01, #0
129a8     A0 DC B0 FD | 	call	#__system___getiolock_0442
129ac     FD 12 02 F6 | 	mov	arg01, result1
129b0     64 83 B0 FD | 	call	#__system___lockmem
129b4     54 01 00 FF 
129b8     83 14 06 F6 | 	mov	arg02, ##@LR__4725
129bc     00 12 06 F6 | 	mov	arg01, #0
129c0     00 16 06 F6 | 	mov	arg03, #0
129c4     58 90 B0 FD | 	call	#__system___basic_print_string
129c8     00 12 06 F6 | 	mov	arg01, #0
129cc     7C DC B0 FD | 	call	#__system___getiolock_0442
129d0     FD 00 68 FC | 	wrlong	#0, result1
129d4     27 12 06 F6 | 	mov	arg01, #39
129d8     2C 4D B0 FD | 	call	#_printerror
129dc     48 00 90 FD | 	jmp	#LR__1471
129e0                 | LR__1470
129e0     14 71 BF FD | 	call	#_pop
129e4     FF 1E 02 F6 | 	mov	local01, result3
129e8     A7 FA 61 FC | 	wrlong	result1, fp
129ec     04 4E 05 F1 | 	add	fp, #4
129f0     A7 FC 61 FC | 	wrlong	result2, fp
129f4     04 4E 05 F1 | 	add	fp, #4
129f8     A7 1E 62 FC | 	wrlong	local01, fp
129fc     08 4E 85 F1 | 	sub	fp, #8
12a00     A7 12 02 F6 | 	mov	arg01, fp
12a04     60 F5 BF FD | 	call	#_converttofloat
12a08     FD 12 02 F6 | 	mov	arg01, result1
12a0c     54 AD B0 FD | 	call	#__system___float_sqrt
12a10     A7 FA 61 FC | 	wrlong	result1, fp
12a14     08 4E 05 F1 | 	add	fp, #8
12a18     A7 3C 68 FC | 	wrlong	#30, fp
12a1c     08 4E 85 F1 | 	sub	fp, #8
12a20     A7 12 02 F6 | 	mov	arg01, fp
12a24     68 71 BF FD | 	call	#_push
12a28                 | LR__1471
12a28     A7 F0 03 F6 | 	mov	ptra, fp
12a2c     B2 00 A0 FD | 	call	#popregs_
12a30                 | _do_sqr_ret
12a30     2D 00 64 FD | 	ret
12a34                 | 
12a34                 | ' 
12a34                 | ' sub do_stick
12a34                 | _do_stick
12a34     01 4A 05 F6 | 	mov	COUNT_, #1
12a38     A8 00 A0 FD | 	call	#pushregs_
12a3c     10 F0 07 F1 | 	add	ptra, #16
12a40     6A 00 00 FF 
12a44     04 E4 05 F1 | 	add	objptr, ##54276
12a48     F2 1E 02 FB | 	rdlong	local01, objptr
12a4c     0F 17 02 F6 | 	mov	arg03, local01
12a50     01 16 66 F0 | 	shl	arg03, #1
12a54     0F 17 02 F1 | 	add	arg03, local01
12a58     02 16 66 F0 | 	shl	arg03, #2
12a5c     03 00 00 FF 
12a60     04 E4 85 F1 | 	sub	objptr, ##1540
12a64     F2 16 02 F1 | 	add	arg03, objptr
12a68     0B 17 02 FB | 	rdlong	arg03, arg03
12a6c     0C 4E 05 F1 | 	add	fp, #12
12a70     A7 16 62 FC | 	wrlong	arg03, fp
12a74                 | ' 
12a74                 | ' numpar=compiledline(lineptr_e).result.uresult
12a74                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
12a74     0C 4E 85 F1 | 	sub	fp, #12
12a78     02 16 16 F2 | 	cmp	arg03, #2 wc
12a7c     67 00 00 FF 
12a80     00 E4 85 F1 | 	sub	objptr, ##52736
12a84     3C 00 90 CD |  if_b	jmp	#LR__1480
12a88     00 12 06 F6 | 	mov	arg01, #0
12a8c     BC DB B0 FD | 	call	#__system___getiolock_0442
12a90     FD 12 02 F6 | 	mov	arg01, result1
12a94     80 82 B0 FD | 	call	#__system___lockmem
12a98     54 01 00 FF 
12a9c     89 14 06 F6 | 	mov	arg02, ##@LR__4726
12aa0     00 12 06 F6 | 	mov	arg01, #0
12aa4     00 16 06 F6 | 	mov	arg03, #0
12aa8     74 8F B0 FD | 	call	#__system___basic_print_string
12aac     00 12 06 F6 | 	mov	arg01, #0
12ab0     98 DB B0 FD | 	call	#__system___getiolock_0442
12ab4     FD 00 68 FC | 	wrlong	#0, result1
12ab8     27 12 06 F6 | 	mov	arg01, #39
12abc     48 4C B0 FD | 	call	#_printerror
12ac0     E8 00 90 FD | 	jmp	#LR__1484
12ac4                 | LR__1480
12ac4                 | ' 
12ac4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
12ac4     0C 4E 05 F1 | 	add	fp, #12
12ac8     A7 FE 09 FB | 	rdlong	result3, fp wz
12acc     0C 4E 85 F1 | 	sub	fp, #12
12ad0     30 00 90 5D |  if_ne	jmp	#LR__1481
12ad4     7A 00 00 FF 
12ad8     80 E5 05 F1 | 	add	objptr, ##62848
12adc     F2 1E 02 FB | 	rdlong	local01, objptr
12ae0     7A 00 00 FF 
12ae4     80 E5 85 F1 | 	sub	objptr, ##62848
12ae8     A7 1E 62 FC | 	wrlong	local01, fp
12aec     08 4E 05 F1 | 	add	fp, #8
12af0     A7 3A 68 FC | 	wrlong	#29, fp
12af4     08 4E 85 F1 | 	sub	fp, #8
12af8     A7 12 02 F6 | 	mov	arg01, fp
12afc     90 70 BF FD | 	call	#_push
12b00     A8 00 90 FD | 	jmp	#LR__1484
12b04                 | LR__1481
12b04     F0 6F BF FD | 	call	#_pop
12b08     A7 FA 61 FC | 	wrlong	result1, fp
12b0c     04 4E 05 F1 | 	add	fp, #4
12b10     A7 FC 61 FC | 	wrlong	result2, fp
12b14     04 4E 05 F1 | 	add	fp, #4
12b18     A7 FE 61 FC | 	wrlong	result3, fp
12b1c                 | ' 
12b1c                 | ' t1=pop()
12b1c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
12b1c     08 4E 85 F1 | 	sub	fp, #8
12b20     1C FE 0D F2 | 	cmp	result3, #28 wz
12b24     08 4E 05 51 |  if_ne	add	fp, #8
12b28     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12b2c     08 4E 85 51 |  if_ne	sub	fp, #8
12b30     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12b34     6C 00 90 5D |  if_ne	jmp	#LR__1483
12b38     A7 1E 02 FB | 	rdlong	local01, fp
12b3c     7B 00 00 FF 
12b40     68 E4 05 F1 | 	add	objptr, ##63080
12b44     F2 1E 62 FC | 	wrlong	local01, objptr
12b48                 | '   q=t1.result.uresult
12b48                 | '   if q<7 then 
12b48     7B 00 00 FF 
12b4c     68 E4 85 F1 | 	sub	objptr, ##63080
12b50     07 1E 56 F2 | 	cmps	local01, #7 wc
12b54     40 00 90 3D |  if_ae	jmp	#LR__1482
12b58     7B 00 00 FF 
12b5c     68 E4 05 F1 | 	add	objptr, ##63080
12b60     F2 1E 02 FB | 	rdlong	local01, objptr
12b64     02 1E 66 F0 | 	shl	local01, #2
12b68     E8 E4 85 F1 | 	sub	objptr, #232
12b6c     F2 1E 02 F1 | 	add	local01, objptr
12b70     0F 1F 02 FB | 	rdlong	local01, local01
12b74     A7 1E 62 FC | 	wrlong	local01, fp
12b78     08 4E 05 F1 | 	add	fp, #8
12b7c     A7 3A 68 FC | 	wrlong	#29, fp
12b80     08 4E 85 F1 | 	sub	fp, #8
12b84     A7 12 02 F6 | 	mov	arg01, fp
12b88     7A 00 00 FF 
12b8c     80 E5 85 F1 | 	sub	objptr, ##62848
12b90     FC 6F BF FD | 	call	#_push
12b94                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
12b94     14 00 90 FD | 	jmp	#LR__1484
12b98                 | LR__1482
12b98     29 12 06 F6 | 	mov	arg01, #41
12b9c     68 4B B0 FD | 	call	#_printerror
12ba0                 | '      printerror(41) : return
12ba0     08 00 90 FD | 	jmp	#LR__1484
12ba4                 | LR__1483
12ba4     29 12 06 F6 | 	mov	arg01, #41
12ba8     5C 4B B0 FD | 	call	#_printerror
12bac                 | LR__1484
12bac     A7 F0 03 F6 | 	mov	ptra, fp
12bb0     B2 00 A0 FD | 	call	#popregs_
12bb4                 | _do_stick_ret
12bb4     2D 00 64 FD | 	ret
12bb8                 | 
12bb8                 | ' 
12bb8                 | ' sub do_strig
12bb8                 | _do_strig
12bb8     01 4A 05 F6 | 	mov	COUNT_, #1
12bbc     A8 00 A0 FD | 	call	#pushregs_
12bc0     10 F0 07 F1 | 	add	ptra, #16
12bc4     6A 00 00 FF 
12bc8     04 E4 05 F1 | 	add	objptr, ##54276
12bcc     F2 1E 02 FB | 	rdlong	local01, objptr
12bd0     0F 17 02 F6 | 	mov	arg03, local01
12bd4     01 16 66 F0 | 	shl	arg03, #1
12bd8     0F 17 02 F1 | 	add	arg03, local01
12bdc     02 16 66 F0 | 	shl	arg03, #2
12be0     03 00 00 FF 
12be4     04 E4 85 F1 | 	sub	objptr, ##1540
12be8     F2 16 02 F1 | 	add	arg03, objptr
12bec     0B 17 02 FB | 	rdlong	arg03, arg03
12bf0     0C 4E 05 F1 | 	add	fp, #12
12bf4     A7 16 62 FC | 	wrlong	arg03, fp
12bf8                 | ' 
12bf8                 | ' numpar=compiledline(lineptr_e).result.uresult
12bf8                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
12bf8     0C 4E 85 F1 | 	sub	fp, #12
12bfc     02 16 16 F2 | 	cmp	arg03, #2 wc
12c00     67 00 00 FF 
12c04     00 E4 85 F1 | 	sub	objptr, ##52736
12c08     3C 00 90 CD |  if_b	jmp	#LR__1490
12c0c     00 12 06 F6 | 	mov	arg01, #0
12c10     38 DA B0 FD | 	call	#__system___getiolock_0442
12c14     FD 12 02 F6 | 	mov	arg01, result1
12c18     FC 80 B0 FD | 	call	#__system___lockmem
12c1c     54 01 00 FF 
12c20     91 14 06 F6 | 	mov	arg02, ##@LR__4727
12c24     00 12 06 F6 | 	mov	arg01, #0
12c28     00 16 06 F6 | 	mov	arg03, #0
12c2c     F0 8D B0 FD | 	call	#__system___basic_print_string
12c30     00 12 06 F6 | 	mov	arg01, #0
12c34     14 DA B0 FD | 	call	#__system___getiolock_0442
12c38     FD 00 68 FC | 	wrlong	#0, result1
12c3c     27 12 06 F6 | 	mov	arg01, #39
12c40     C4 4A B0 FD | 	call	#_printerror
12c44     E8 00 90 FD | 	jmp	#LR__1494
12c48                 | LR__1490
12c48                 | ' 
12c48                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
12c48     0C 4E 05 F1 | 	add	fp, #12
12c4c     A7 FE 09 FB | 	rdlong	result3, fp wz
12c50     0C 4E 85 F1 | 	sub	fp, #12
12c54     30 00 90 5D |  if_ne	jmp	#LR__1491
12c58     7A 00 00 FF 
12c5c     9C E5 05 F1 | 	add	objptr, ##62876
12c60     F2 1E 02 FB | 	rdlong	local01, objptr
12c64     7A 00 00 FF 
12c68     9C E5 85 F1 | 	sub	objptr, ##62876
12c6c     A7 1E 62 FC | 	wrlong	local01, fp
12c70     08 4E 05 F1 | 	add	fp, #8
12c74     A7 3A 68 FC | 	wrlong	#29, fp
12c78     08 4E 85 F1 | 	sub	fp, #8
12c7c     A7 12 02 F6 | 	mov	arg01, fp
12c80     0C 6F BF FD | 	call	#_push
12c84     A8 00 90 FD | 	jmp	#LR__1494
12c88                 | LR__1491
12c88     6C 6E BF FD | 	call	#_pop
12c8c     A7 FA 61 FC | 	wrlong	result1, fp
12c90     04 4E 05 F1 | 	add	fp, #4
12c94     A7 FC 61 FC | 	wrlong	result2, fp
12c98     04 4E 05 F1 | 	add	fp, #4
12c9c     A7 FE 61 FC | 	wrlong	result3, fp
12ca0                 | ' 
12ca0                 | ' t1=pop()
12ca0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
12ca0     08 4E 85 F1 | 	sub	fp, #8
12ca4     1C FE 0D F2 | 	cmp	result3, #28 wz
12ca8     08 4E 05 51 |  if_ne	add	fp, #8
12cac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12cb0     08 4E 85 51 |  if_ne	sub	fp, #8
12cb4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12cb8     6C 00 90 5D |  if_ne	jmp	#LR__1493
12cbc     A7 1E 02 FB | 	rdlong	local01, fp
12cc0     7B 00 00 FF 
12cc4     68 E4 05 F1 | 	add	objptr, ##63080
12cc8     F2 1E 62 FC | 	wrlong	local01, objptr
12ccc                 | '   q=t1.result.uresult
12ccc                 | '   if q<7 then 
12ccc     7B 00 00 FF 
12cd0     68 E4 85 F1 | 	sub	objptr, ##63080
12cd4     07 1E 56 F2 | 	cmps	local01, #7 wc
12cd8     40 00 90 3D |  if_ae	jmp	#LR__1492
12cdc     7B 00 00 FF 
12ce0     68 E4 05 F1 | 	add	objptr, ##63080
12ce4     F2 1E 02 FB | 	rdlong	local01, objptr
12ce8     02 1E 66 F0 | 	shl	local01, #2
12cec     CC E4 85 F1 | 	sub	objptr, #204
12cf0     F2 1E 02 F1 | 	add	local01, objptr
12cf4     0F 1F 02 FB | 	rdlong	local01, local01
12cf8     A7 1E 62 FC | 	wrlong	local01, fp
12cfc     08 4E 05 F1 | 	add	fp, #8
12d00     A7 3A 68 FC | 	wrlong	#29, fp
12d04     08 4E 85 F1 | 	sub	fp, #8
12d08     A7 12 02 F6 | 	mov	arg01, fp
12d0c     7A 00 00 FF 
12d10     9C E5 85 F1 | 	sub	objptr, ##62876
12d14     78 6E BF FD | 	call	#_push
12d18                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
12d18     14 00 90 FD | 	jmp	#LR__1494
12d1c                 | LR__1492
12d1c     29 12 06 F6 | 	mov	arg01, #41
12d20     E4 49 B0 FD | 	call	#_printerror
12d24                 | '      printerror(41) : return
12d24     08 00 90 FD | 	jmp	#LR__1494
12d28                 | LR__1493
12d28     29 12 06 F6 | 	mov	arg01, #41
12d2c     D8 49 B0 FD | 	call	#_printerror
12d30                 | LR__1494
12d30     A7 F0 03 F6 | 	mov	ptra, fp
12d34     B2 00 A0 FD | 	call	#popregs_
12d38                 | _do_strig_ret
12d38     2D 00 64 FD | 	ret
12d3c                 | 
12d3c                 | ' 
12d3c                 | ' sub do_getpixel
12d3c                 | _do_getpixel
12d3c     00 4A 05 F6 | 	mov	COUNT_, #0
12d40     A8 00 A0 FD | 	call	#pushregs_
12d44     24 F0 07 F1 | 	add	ptra, #36
12d48     6A 00 00 FF 
12d4c     04 E4 05 F1 | 	add	objptr, ##54276
12d50     F2 16 02 FB | 	rdlong	arg03, objptr
12d54     0B 15 02 F6 | 	mov	arg02, arg03
12d58     01 14 66 F0 | 	shl	arg02, #1
12d5c     0B 15 02 F1 | 	add	arg02, arg03
12d60     02 14 66 F0 | 	shl	arg02, #2
12d64     03 00 00 FF 
12d68     04 E4 85 F1 | 	sub	objptr, ##1540
12d6c     F2 14 02 F1 | 	add	arg02, objptr
12d70     0A 17 02 FB | 	rdlong	arg03, arg02
12d74     18 4E 05 F1 | 	add	fp, #24
12d78     A7 16 62 FC | 	wrlong	arg03, fp
12d7c                 | ' 
12d7c                 | ' numpar=compiledline(lineptr_e).result.uresult
12d7c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12d7c     18 4E 85 F1 | 	sub	fp, #24
12d80     02 16 0E F2 | 	cmp	arg03, #2 wz
12d84     67 00 00 FF 
12d88     00 E4 85 F1 | 	sub	objptr, ##52736
12d8c     3C 00 90 AD |  if_e	jmp	#LR__1500
12d90     00 12 06 F6 | 	mov	arg01, #0
12d94     B4 D8 B0 FD | 	call	#__system___getiolock_0442
12d98     FD 12 02 F6 | 	mov	arg01, result1
12d9c     78 7F B0 FD | 	call	#__system___lockmem
12da0     54 01 00 FF 
12da4     99 14 06 F6 | 	mov	arg02, ##@LR__4728
12da8     00 12 06 F6 | 	mov	arg01, #0
12dac     00 16 06 F6 | 	mov	arg03, #0
12db0     6C 8C B0 FD | 	call	#__system___basic_print_string
12db4     00 12 06 F6 | 	mov	arg01, #0
12db8     90 D8 B0 FD | 	call	#__system___getiolock_0442
12dbc     FD 00 68 FC | 	wrlong	#0, result1
12dc0     27 12 06 F6 | 	mov	arg01, #39
12dc4     40 49 B0 FD | 	call	#_printerror
12dc8     B4 00 90 FD | 	jmp	#LR__1501
12dcc                 | LR__1500
12dcc     28 6D BF FD | 	call	#_pop
12dd0     FD 16 02 F6 | 	mov	arg03, result1
12dd4     FE 14 02 F6 | 	mov	arg02, result2
12dd8     FF 12 02 F6 | 	mov	arg01, result3
12ddc     0C 4E 05 F1 | 	add	fp, #12
12de0     A7 16 62 FC | 	wrlong	arg03, fp
12de4     04 4E 05 F1 | 	add	fp, #4
12de8     A7 14 62 FC | 	wrlong	arg02, fp
12dec     04 4E 05 F1 | 	add	fp, #4
12df0     A7 12 62 FC | 	wrlong	arg01, fp
12df4     14 4E 85 F1 | 	sub	fp, #20
12df8     FC 6C BF FD | 	call	#_pop
12dfc     FF 16 02 F6 | 	mov	arg03, result3
12e00     A7 FA 61 FC | 	wrlong	result1, fp
12e04     04 4E 05 F1 | 	add	fp, #4
12e08     A7 FC 61 FC | 	wrlong	result2, fp
12e0c     04 4E 05 F1 | 	add	fp, #4
12e10     A7 16 62 FC | 	wrlong	arg03, fp
12e14     08 4E 85 F1 | 	sub	fp, #8
12e18     A7 12 02 F6 | 	mov	arg01, fp
12e1c     9C F0 BF FD | 	call	#_converttoint
12e20     1C 4E 05 F1 | 	add	fp, #28
12e24     A7 FA 61 FC | 	wrlong	result1, fp
12e28     10 4E 85 F1 | 	sub	fp, #16
12e2c     A7 12 02 F6 | 	mov	arg01, fp
12e30     0C 4E 85 F1 | 	sub	fp, #12
12e34     84 F0 BF FD | 	call	#_converttoint
12e38     FD 16 02 F6 | 	mov	arg03, result1
12e3c     20 4E 05 F1 | 	add	fp, #32
12e40     A7 16 62 FC | 	wrlong	arg03, fp
12e44     F2 12 02 FB | 	rdlong	arg01, objptr
12e48     04 4E 85 F1 | 	sub	fp, #4
12e4c     A7 FE 01 FB | 	rdlong	result3, fp
12e50     FF 12 02 F1 | 	add	arg01, result3
12e54     1C 4E 85 F1 | 	sub	fp, #28
12e58     0A 16 66 F0 | 	shl	arg03, #10
12e5c     0B 13 02 F1 | 	add	arg01, arg03
12e60     08 4A B0 FD | 	call	#_pspeek
12e64     FD FA E1 F8 | 	getbyte	result1, result1, #0
12e68     A7 FA 61 FC | 	wrlong	result1, fp
12e6c     08 4E 05 F1 | 	add	fp, #8
12e70     A7 3A 68 FC | 	wrlong	#29, fp
12e74     08 4E 85 F1 | 	sub	fp, #8
12e78     A7 12 02 F6 | 	mov	arg01, fp
12e7c     10 6D BF FD | 	call	#_push
12e80                 | LR__1501
12e80     A7 F0 03 F6 | 	mov	ptra, fp
12e84     B2 00 A0 FD | 	call	#popregs_
12e88                 | _do_getpixel_ret
12e88     2D 00 64 FD | 	ret
12e8c                 | 
12e8c                 | ' 
12e8c                 | ' 
12e8c                 | ' 
12e8c                 | ' sub do_defsprite
12e8c                 | _do_defsprite
12e8c     07 4A 05 F6 | 	mov	COUNT_, #7
12e90     A8 00 A0 FD | 	call	#pushregs_
12e94     5C F0 07 F1 | 	add	ptra, #92
12e98     5C 6C BF FD | 	call	#_pop
12e9c     FD 16 02 F6 | 	mov	arg03, result1
12ea0     FE 14 02 F6 | 	mov	arg02, result2
12ea4     FF 12 02 F6 | 	mov	arg01, result3
12ea8     30 4E 05 F1 | 	add	fp, #48
12eac     A7 16 62 FC | 	wrlong	arg03, fp
12eb0     04 4E 05 F1 | 	add	fp, #4
12eb4     A7 14 62 FC | 	wrlong	arg02, fp
12eb8     04 4E 05 F1 | 	add	fp, #4
12ebc     A7 12 62 FC | 	wrlong	arg01, fp
12ec0     38 4E 85 F1 | 	sub	fp, #56
12ec4     30 6C BF FD | 	call	#_pop
12ec8     FD 16 02 F6 | 	mov	arg03, result1
12ecc     FE 14 02 F6 | 	mov	arg02, result2
12ed0     FF 12 02 F6 | 	mov	arg01, result3
12ed4     24 4E 05 F1 | 	add	fp, #36
12ed8     A7 16 62 FC | 	wrlong	arg03, fp
12edc     04 4E 05 F1 | 	add	fp, #4
12ee0     A7 14 62 FC | 	wrlong	arg02, fp
12ee4     04 4E 05 F1 | 	add	fp, #4
12ee8     A7 12 62 FC | 	wrlong	arg01, fp
12eec     2C 4E 85 F1 | 	sub	fp, #44
12ef0     04 6C BF FD | 	call	#_pop
12ef4     FD 16 02 F6 | 	mov	arg03, result1
12ef8     FE 14 02 F6 | 	mov	arg02, result2
12efc     FF 12 02 F6 | 	mov	arg01, result3
12f00     18 4E 05 F1 | 	add	fp, #24
12f04     A7 16 62 FC | 	wrlong	arg03, fp
12f08     04 4E 05 F1 | 	add	fp, #4
12f0c     A7 14 62 FC | 	wrlong	arg02, fp
12f10     04 4E 05 F1 | 	add	fp, #4
12f14     A7 12 62 FC | 	wrlong	arg01, fp
12f18     20 4E 85 F1 | 	sub	fp, #32
12f1c     D8 6B BF FD | 	call	#_pop
12f20     FD 16 02 F6 | 	mov	arg03, result1
12f24     FE 14 02 F6 | 	mov	arg02, result2
12f28     FF 12 02 F6 | 	mov	arg01, result3
12f2c     0C 4E 05 F1 | 	add	fp, #12
12f30     A7 16 62 FC | 	wrlong	arg03, fp
12f34     04 4E 05 F1 | 	add	fp, #4
12f38     A7 14 62 FC | 	wrlong	arg02, fp
12f3c     04 4E 05 F1 | 	add	fp, #4
12f40     A7 12 62 FC | 	wrlong	arg01, fp
12f44     14 4E 85 F1 | 	sub	fp, #20
12f48     AC 6B BF FD | 	call	#_pop
12f4c     FF 16 02 F6 | 	mov	arg03, result3
12f50     A7 FA 61 FC | 	wrlong	result1, fp
12f54     04 4E 05 F1 | 	add	fp, #4
12f58     A7 FC 61 FC | 	wrlong	result2, fp
12f5c     04 4E 05 F1 | 	add	fp, #4
12f60     A7 16 62 FC | 	wrlong	arg03, fp
12f64     08 4E 85 F1 | 	sub	fp, #8
12f68     A7 12 02 F6 | 	mov	arg01, fp
12f6c     4C EF BF FD | 	call	#_converttoint
12f70     3C 4E 05 F1 | 	add	fp, #60
12f74     A7 FA 61 FC | 	wrlong	result1, fp
12f78     30 4E 85 F1 | 	sub	fp, #48
12f7c     A7 12 02 F6 | 	mov	arg01, fp
12f80     0C 4E 85 F1 | 	sub	fp, #12
12f84     34 EF BF FD | 	call	#_converttoint
12f88     40 4E 05 F1 | 	add	fp, #64
12f8c     A7 FA 61 FC | 	wrlong	result1, fp
12f90     28 4E 85 F1 | 	sub	fp, #40
12f94     A7 12 02 F6 | 	mov	arg01, fp
12f98     18 4E 85 F1 | 	sub	fp, #24
12f9c     1C EF BF FD | 	call	#_converttoint
12fa0     44 4E 05 F1 | 	add	fp, #68
12fa4     A7 FA 61 FC | 	wrlong	result1, fp
12fa8     20 4E 85 F1 | 	sub	fp, #32
12fac     A7 12 02 F6 | 	mov	arg01, fp
12fb0     24 4E 85 F1 | 	sub	fp, #36
12fb4     04 EF BF FD | 	call	#_converttoint
12fb8     48 4E 05 F1 | 	add	fp, #72
12fbc     A7 FA 61 FC | 	wrlong	result1, fp
12fc0     18 4E 85 F1 | 	sub	fp, #24
12fc4     A7 12 02 F6 | 	mov	arg01, fp
12fc8     30 4E 85 F1 | 	sub	fp, #48
12fcc     EC EE BF FD | 	call	#_converttoint
12fd0     4C 4E 05 F1 | 	add	fp, #76
12fd4     A7 FA 61 FC | 	wrlong	result1, fp
12fd8                 | ' 
12fd8                 | ' t5=pop()
12fd8                 | ' t4=pop()
12fd8                 | ' t3=pop()
12fd8                 | ' t2=pop()
12fd8                 | ' t1=pop()
12fd8                 | ' 
12fd8                 | ' ' do convert, defsprite is not a racing command
12fd8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
12fd8                 | '  
12fd8                 | ' ' todo: check parameters for linits
12fd8                 | ' if sprite(a1)<> nil then delete(sprite(a1))
12fd8     10 4E 85 F1 | 	sub	fp, #16
12fdc     A7 16 02 FB | 	rdlong	arg03, fp
12fe0     3C 4E 85 F1 | 	sub	fp, #60
12fe4     02 16 66 F0 | 	shl	arg03, #2
12fe8     7A 00 00 FF 
12fec     B8 E5 05 F1 | 	add	objptr, ##62904
12ff0     F2 16 02 F1 | 	add	arg03, objptr
12ff4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
12ff8     7A 00 00 FF 
12ffc     B8 E5 85 F1 | 	sub	objptr, ##62904
13000     2C 00 90 AD |  if_e	jmp	#LR__1510
13004     3C 4E 05 F1 | 	add	fp, #60
13008     A7 16 02 FB | 	rdlong	arg03, fp
1300c     3C 4E 85 F1 | 	sub	fp, #60
13010     02 16 66 F0 | 	shl	arg03, #2
13014     7A 00 00 FF 
13018     B8 E5 05 F1 | 	add	objptr, ##62904
1301c     F2 16 02 F1 | 	add	arg03, objptr
13020     0B 13 02 FB | 	rdlong	arg01, arg03
13024     7A 00 00 FF 
13028     B8 E5 85 F1 | 	sub	objptr, ##62904
1302c     14 BC B0 FD | 	call	#__system___gc_free
13030                 | LR__1510
13030     3C 4E 05 F1 | 	add	fp, #60
13034     A7 1E 02 FB | 	rdlong	local01, fp
13038     0C 4E 05 F1 | 	add	fp, #12
1303c     A7 16 02 FB | 	rdlong	arg03, fp
13040     04 4E 05 F1 | 	add	fp, #4
13044     A7 14 02 FB | 	rdlong	arg02, fp
13048     0A 17 02 FD | 	qmul	arg03, arg02
1304c     02 1E 66 F0 | 	shl	local01, #2
13050     7A 00 00 FF 
13054     B8 E5 05 F1 | 	add	objptr, ##62904
13058     F2 1E 02 F1 | 	add	local01, objptr
1305c     4C 4E 85 F1 | 	sub	fp, #76
13060     7A 00 00 FF 
13064     B8 E5 85 F1 | 	sub	objptr, ##62904
13068     18 12 62 FD | 	getqx	arg01
1306c     98 BA B0 FD | 	call	#__system___gc_alloc_managed
13070     0F FB 61 FC | 	wrlong	result1, local01
13074                 | ' for y=a3 to a3+a5-1
13074     44 4E 05 F1 | 	add	fp, #68
13078     A7 20 02 FB | 	rdlong	local02, fp
1307c     0C 4E 05 F1 | 	add	fp, #12
13080     A7 20 62 FC | 	wrlong	local02, fp
13084     0C 4E 85 F1 | 	sub	fp, #12
13088     A7 22 02 FB | 	rdlong	local03, fp
1308c     08 4E 05 F1 | 	add	fp, #8
13090     A7 24 02 FB | 	rdlong	local04, fp
13094     4C 4E 85 F1 | 	sub	fp, #76
13098     12 23 02 F1 | 	add	local03, local04
1309c                 | LR__1511
1309c     50 4E 05 F1 | 	add	fp, #80
130a0     A7 20 02 FB | 	rdlong	local02, fp
130a4     50 4E 85 F1 | 	sub	fp, #80
130a8     11 21 52 F2 | 	cmps	local02, local03 wc
130ac     10 01 90 3D |  if_ae	jmp	#LR__1514
130b0                 | '   for x=a2 to a4+a2-1
130b0     40 4E 05 F1 | 	add	fp, #64
130b4     A7 1E 02 FB | 	rdlong	local01, fp
130b8     7B 00 00 FF 
130bc     3C E4 05 F1 | 	add	objptr, ##63036
130c0     F2 1E 62 FC | 	wrlong	local01, objptr
130c4     7B 00 00 FF 
130c8     3C E4 85 F1 | 	sub	objptr, ##63036
130cc     08 4E 05 F1 | 	add	fp, #8
130d0     A7 26 02 FB | 	rdlong	local05, fp
130d4     08 4E 85 F1 | 	sub	fp, #8
130d8     A7 28 02 FB | 	rdlong	local06, fp
130dc     40 4E 85 F1 | 	sub	fp, #64
130e0     14 27 02 F1 | 	add	local05, local06
130e4                 | LR__1512
130e4     7B 00 00 FF 
130e8     3C E4 05 F1 | 	add	objptr, ##63036
130ec     F2 1E 02 FB | 	rdlong	local01, objptr
130f0     7B 00 00 FF 
130f4     3C E4 85 F1 | 	sub	objptr, ##63036
130f8     13 1F 52 F2 | 	cmps	local01, local05 wc
130fc     A8 00 90 3D |  if_ae	jmp	#LR__1513
13100     3C 4E 05 F1 | 	add	fp, #60
13104     A7 28 02 FB | 	rdlong	local06, fp
13108     04 4E 05 F1 | 	add	fp, #4
1310c     A7 24 02 FB | 	rdlong	local04, fp
13110     10 4E 05 F1 | 	add	fp, #16
13114     A7 20 02 FB | 	rdlong	local02, fp
13118     10 1F 02 F6 | 	mov	local01, local02
1311c     0C 4E 85 F1 | 	sub	fp, #12
13120     A7 16 02 FB | 	rdlong	arg03, fp
13124     0B 1F 82 F1 | 	sub	local01, arg03
13128     04 4E 05 F1 | 	add	fp, #4
1312c     A7 16 02 FB | 	rdlong	arg03, fp
13130     0B 1F 02 FD | 	qmul	local01, arg03
13134     02 28 66 F0 | 	shl	local06, #2
13138     7A 00 00 FF 
1313c     B8 E5 05 F1 | 	add	objptr, ##62904
13140     F2 28 02 F1 | 	add	local06, objptr
13144     14 29 02 FB | 	rdlong	local06, local06
13148     84 E4 05 F1 | 	add	objptr, #132
1314c     F2 1E 02 FB | 	rdlong	local01, objptr
13150     7B 00 00 FF 
13154     3C E4 85 F1 | 	sub	objptr, ##63036
13158     0F 2B 02 F6 | 	mov	local07, local01
1315c     12 2B 82 F1 | 	sub	local07, local04
13160     F2 12 02 FB | 	rdlong	arg01, objptr
13164     0F 13 02 F1 | 	add	arg01, local01
13168     48 4E 85 F1 | 	sub	fp, #72
1316c     0A 20 66 F0 | 	shl	local02, #10
13170     10 13 02 F1 | 	add	arg01, local02
13174     18 24 62 FD | 	getqx	local04
13178     12 2B 02 F1 | 	add	local07, local04
1317c     14 2B 02 F1 | 	add	local07, local06
13180     E8 46 B0 FD | 	call	#_pspeek
13184     15 FB 41 FC | 	wrbyte	result1, local07
13188     7B 00 00 FF 
1318c     3C E4 05 F1 | 	add	objptr, ##63036
13190     F2 2A 02 FB | 	rdlong	local07, objptr
13194     01 2A 06 F1 | 	add	local07, #1
13198     F2 2A 62 FC | 	wrlong	local07, objptr
1319c     7B 00 00 FF 
131a0     3C E4 85 F1 | 	sub	objptr, ##63036
131a4     3C FF 9F FD | 	jmp	#LR__1512
131a8                 | LR__1513
131a8     50 4E 05 F1 | 	add	fp, #80
131ac     A7 2A 02 FB | 	rdlong	local07, fp
131b0     01 2A 06 F1 | 	add	local07, #1
131b4     A7 2A 62 FC | 	wrlong	local07, fp
131b8     50 4E 85 F1 | 	sub	fp, #80
131bc     DC FE 9F FD | 	jmp	#LR__1511
131c0                 | LR__1514
131c0     3C 4E 05 F1 | 	add	fp, #60
131c4     A7 2A 02 FB | 	rdlong	local07, fp
131c8     15 13 02 F6 | 	mov	arg01, local07
131cc     3C 4E 85 F1 | 	sub	fp, #60
131d0     02 2A 66 F0 | 	shl	local07, #2
131d4     7A 00 00 FF 
131d8     B8 E5 05 F1 | 	add	objptr, ##62904
131dc     F2 2A 02 F1 | 	add	local07, objptr
131e0     15 15 02 FB | 	rdlong	arg02, local07
131e4     7A 00 00 FF 
131e8     B8 E5 85 F1 | 	sub	objptr, ##62904
131ec     A0 5A B0 FD | 	call	#_hg010b_spin2_setspriteptr
131f0     3C 4E 05 F1 | 	add	fp, #60
131f4     A7 12 02 FB | 	rdlong	arg01, fp
131f8     0C 4E 05 F1 | 	add	fp, #12
131fc     A7 14 02 FB | 	rdlong	arg02, fp
13200     04 4E 05 F1 | 	add	fp, #4
13204     A7 16 02 FB | 	rdlong	arg03, fp
13208     4C 4E 85 F1 | 	sub	fp, #76
1320c     F4 5A B0 FD | 	call	#_hg010b_spin2_setspritesize
13210     A7 F0 03 F6 | 	mov	ptra, fp
13214     B2 00 A0 FD | 	call	#popregs_
13218                 | _do_defsprite_ret
13218     2D 00 64 FD | 	ret
1321c                 | 
1321c                 | ' 
1321c                 | ' sub do_sprite
1321c                 | _do_sprite
1321c     00 4A 05 F6 | 	mov	COUNT_, #0
13220     A8 00 A0 FD | 	call	#pushregs_
13224     30 F0 07 F1 | 	add	ptra, #48
13228     CC 68 BF FD | 	call	#_pop
1322c     FD 16 02 F6 | 	mov	arg03, result1
13230     FE 14 02 F6 | 	mov	arg02, result2
13234     FF 12 02 F6 | 	mov	arg01, result3
13238     18 4E 05 F1 | 	add	fp, #24
1323c     A7 16 62 FC | 	wrlong	arg03, fp
13240     04 4E 05 F1 | 	add	fp, #4
13244     A7 14 62 FC | 	wrlong	arg02, fp
13248     04 4E 05 F1 | 	add	fp, #4
1324c     A7 12 62 FC | 	wrlong	arg01, fp
13250     20 4E 85 F1 | 	sub	fp, #32
13254     A0 68 BF FD | 	call	#_pop
13258     FD 16 02 F6 | 	mov	arg03, result1
1325c     FE 14 02 F6 | 	mov	arg02, result2
13260     FF 12 02 F6 | 	mov	arg01, result3
13264     0C 4E 05 F1 | 	add	fp, #12
13268     A7 16 62 FC | 	wrlong	arg03, fp
1326c     04 4E 05 F1 | 	add	fp, #4
13270     A7 14 62 FC | 	wrlong	arg02, fp
13274     04 4E 05 F1 | 	add	fp, #4
13278     A7 12 62 FC | 	wrlong	arg01, fp
1327c     14 4E 85 F1 | 	sub	fp, #20
13280     74 68 BF FD | 	call	#_pop
13284     FF 16 02 F6 | 	mov	arg03, result3
13288     A7 FA 61 FC | 	wrlong	result1, fp
1328c     04 4E 05 F1 | 	add	fp, #4
13290     A7 FC 61 FC | 	wrlong	result2, fp
13294     04 4E 05 F1 | 	add	fp, #4
13298     A7 16 62 FC | 	wrlong	arg03, fp
1329c     08 4E 85 F1 | 	sub	fp, #8
132a0     A7 12 02 F6 | 	mov	arg01, fp
132a4     14 EC BF FD | 	call	#_converttoint
132a8     24 4E 05 F1 | 	add	fp, #36
132ac     A7 FA 61 FC | 	wrlong	result1, fp
132b0     18 4E 85 F1 | 	sub	fp, #24
132b4     A7 12 02 F6 | 	mov	arg01, fp
132b8     0C 4E 85 F1 | 	sub	fp, #12
132bc     FC EB BF FD | 	call	#_converttoint
132c0     28 4E 05 F1 | 	add	fp, #40
132c4     A7 FA 61 FC | 	wrlong	result1, fp
132c8     10 4E 85 F1 | 	sub	fp, #16
132cc     A7 12 02 F6 | 	mov	arg01, fp
132d0     18 4E 85 F1 | 	sub	fp, #24
132d4     E4 EB BF FD | 	call	#_converttoint
132d8     2C 4E 05 F1 | 	add	fp, #44
132dc     A7 FA 61 FC | 	wrlong	result1, fp
132e0     08 4E 85 F1 | 	sub	fp, #8
132e4     A7 12 02 FB | 	rdlong	arg01, fp
132e8     04 4E 05 F1 | 	add	fp, #4
132ec     A7 14 02 FB | 	rdlong	arg02, fp
132f0     FD 16 02 F6 | 	mov	arg03, result1
132f4     28 4E 85 F1 | 	sub	fp, #40
132f8     BC 59 B0 FD | 	call	#_hg010b_spin2_setspritepos
132fc     A7 F0 03 F6 | 	mov	ptra, fp
13300     B2 00 A0 FD | 	call	#popregs_
13304                 | _do_sprite_ret
13304     2D 00 64 FD | 	ret
13308                 | 
13308                 | ' 
13308                 | ' sub do_mousex
13308                 | _do_mousex
13308     00 4A 05 F6 | 	mov	COUNT_, #0
1330c     A8 00 A0 FD | 	call	#pushregs_
13310     0C F0 07 F1 | 	add	ptra, #12
13314     08 4E 05 F1 | 	add	fp, #8
13318     A7 3A 68 FC | 	wrlong	#29, fp
1331c     08 4E 85 F1 | 	sub	fp, #8
13320     7A 00 00 FF 
13324     70 E5 05 F1 | 	add	objptr, ##62832
13328     F2 12 02 FB | 	rdlong	arg01, objptr
1332c     7A 00 00 FF 
13330     70 E5 85 F1 | 	sub	objptr, ##62832
13334     A7 12 62 FC | 	wrlong	arg01, fp
13338     A7 12 02 F6 | 	mov	arg01, fp
1333c     50 68 BF FD | 	call	#_push
13340     A7 F0 03 F6 | 	mov	ptra, fp
13344     B2 00 A0 FD | 	call	#popregs_
13348                 | _do_mousex_ret
13348     2D 00 64 FD | 	ret
1334c                 | 
1334c                 | ' 
1334c                 | ' sub do_mousey
1334c                 | _do_mousey
1334c     00 4A 05 F6 | 	mov	COUNT_, #0
13350     A8 00 A0 FD | 	call	#pushregs_
13354     0C F0 07 F1 | 	add	ptra, #12
13358     08 4E 05 F1 | 	add	fp, #8
1335c     A7 3A 68 FC | 	wrlong	#29, fp
13360     08 4E 85 F1 | 	sub	fp, #8
13364     7A 00 00 FF 
13368     74 E5 05 F1 | 	add	objptr, ##62836
1336c     F2 12 02 FB | 	rdlong	arg01, objptr
13370     7A 00 00 FF 
13374     74 E5 85 F1 | 	sub	objptr, ##62836
13378     A7 12 62 FC | 	wrlong	arg01, fp
1337c     A7 12 02 F6 | 	mov	arg01, fp
13380     0C 68 BF FD | 	call	#_push
13384     A7 F0 03 F6 | 	mov	ptra, fp
13388     B2 00 A0 FD | 	call	#popregs_
1338c                 | _do_mousey_ret
1338c     2D 00 64 FD | 	ret
13390                 | 
13390                 | ' 
13390                 | ' sub do_mousew
13390                 | _do_mousew
13390     00 4A 05 F6 | 	mov	COUNT_, #0
13394     A8 00 A0 FD | 	call	#pushregs_
13398     0C F0 07 F1 | 	add	ptra, #12
1339c     08 4E 05 F1 | 	add	fp, #8
133a0     A7 38 68 FC | 	wrlong	#28, fp
133a4     08 4E 85 F1 | 	sub	fp, #8
133a8     7A 00 00 FF 
133ac     7C E5 05 F1 | 	add	objptr, ##62844
133b0     F2 12 02 FB | 	rdlong	arg01, objptr
133b4     7A 00 00 FF 
133b8     7C E5 85 F1 | 	sub	objptr, ##62844
133bc     A7 12 62 FC | 	wrlong	arg01, fp
133c0     A7 12 02 F6 | 	mov	arg01, fp
133c4     C8 67 BF FD | 	call	#_push
133c8     A7 F0 03 F6 | 	mov	ptra, fp
133cc     B2 00 A0 FD | 	call	#popregs_
133d0                 | _do_mousew_ret
133d0     2D 00 64 FD | 	ret
133d4                 | 
133d4                 | ' 
133d4                 | ' sub do_mousek
133d4                 | _do_mousek
133d4     00 4A 05 F6 | 	mov	COUNT_, #0
133d8     A8 00 A0 FD | 	call	#pushregs_
133dc     0C F0 07 F1 | 	add	ptra, #12
133e0     08 4E 05 F1 | 	add	fp, #8
133e4     A7 3A 68 FC | 	wrlong	#29, fp
133e8     08 4E 85 F1 | 	sub	fp, #8
133ec     7A 00 00 FF 
133f0     78 E5 05 F1 | 	add	objptr, ##62840
133f4     F2 12 02 FB | 	rdlong	arg01, objptr
133f8     7A 00 00 FF 
133fc     78 E5 85 F1 | 	sub	objptr, ##62840
13400     A7 12 62 FC | 	wrlong	arg01, fp
13404     A7 12 02 F6 | 	mov	arg01, fp
13408     84 67 BF FD | 	call	#_push
1340c     A7 F0 03 F6 | 	mov	ptra, fp
13410     B2 00 A0 FD | 	call	#popregs_
13414                 | _do_mousek_ret
13414     2D 00 64 FD | 	ret
13418                 | 
13418                 | ' 
13418                 | ' 
13418                 | ' sub do_rdpin
13418                 | _do_rdpin
13418     00 4A 05 F6 | 	mov	COUNT_, #0
1341c     A8 00 A0 FD | 	call	#pushregs_
13420     0C F0 07 F1 | 	add	ptra, #12
13424     D0 66 BF FD | 	call	#_pop
13428     A7 FA 61 FC | 	wrlong	result1, fp
1342c     04 4E 05 F1 | 	add	fp, #4
13430     A7 FC 61 FC | 	wrlong	result2, fp
13434     04 4E 05 F1 | 	add	fp, #4
13438     A7 FE 61 FC | 	wrlong	result3, fp
1343c     08 4E 85 F1 | 	sub	fp, #8
13440     A7 12 02 F6 | 	mov	arg01, fp
13444     74 EA BF FD | 	call	#_converttoint
13448     FD FA 89 FA | 	rdpin	result1, result1
1344c     7B 00 00 FF 
13450     94 E4 05 F1 | 	add	objptr, ##63124
13454     F2 FA 61 FC | 	wrlong	result1, objptr
13458     7B 00 00 FF 
1345c     94 E4 85 F1 | 	sub	objptr, ##63124
13460     08 4E 05 F1 | 	add	fp, #8
13464     A7 3A 68 FC | 	wrlong	#29, fp
13468     08 4E 85 F1 | 	sub	fp, #8
1346c     A7 08 68 FC | 	wrlong	#4, fp
13470     A7 12 02 F6 | 	mov	arg01, fp
13474     18 67 BF FD | 	call	#_push
13478     A7 F0 03 F6 | 	mov	ptra, fp
1347c     B2 00 A0 FD | 	call	#popregs_
13480                 | _do_rdpin_ret
13480     2D 00 64 FD | 	ret
13484                 | 
13484                 | ' 
13484                 | ' sub do_rqpin
13484                 | _do_rqpin
13484     00 4A 05 F6 | 	mov	COUNT_, #0
13488     A8 00 A0 FD | 	call	#pushregs_
1348c     0C F0 07 F1 | 	add	ptra, #12
13490     64 66 BF FD | 	call	#_pop
13494     A7 FA 61 FC | 	wrlong	result1, fp
13498     04 4E 05 F1 | 	add	fp, #4
1349c     A7 FC 61 FC | 	wrlong	result2, fp
134a0     04 4E 05 F1 | 	add	fp, #4
134a4     A7 FE 61 FC | 	wrlong	result3, fp
134a8     08 4E 85 F1 | 	sub	fp, #8
134ac     A7 12 02 F6 | 	mov	arg01, fp
134b0     08 EA BF FD | 	call	#_converttoint
134b4     FD 12 02 F6 | 	mov	arg01, result1
134b8     00 FA 05 F6 | 	mov	result1, #0
134bc     09 FB 81 FA | 	rqpin	result1, arg01
134c0     7B 00 00 FF 
134c4     94 E4 05 F1 | 	add	objptr, ##63124
134c8     F2 FA 61 FC | 	wrlong	result1, objptr
134cc     7B 00 00 FF 
134d0     94 E4 85 F1 | 	sub	objptr, ##63124
134d4     08 4E 05 F1 | 	add	fp, #8
134d8     A7 3A 68 FC | 	wrlong	#29, fp
134dc     08 4E 85 F1 | 	sub	fp, #8
134e0     A7 08 68 FC | 	wrlong	#4, fp
134e4     A7 12 02 F6 | 	mov	arg01, fp
134e8     A4 66 BF FD | 	call	#_push
134ec     A7 F0 03 F6 | 	mov	ptra, fp
134f0     B2 00 A0 FD | 	call	#popregs_
134f4                 | _do_rqpin_ret
134f4     2D 00 64 FD | 	ret
134f8                 | 
134f8                 | ' 
134f8                 | ' sub do_pinread
134f8                 | _do_pinread
134f8     00 4A 05 F6 | 	mov	COUNT_, #0
134fc     A8 00 A0 FD | 	call	#pushregs_
13500     0C F0 07 F1 | 	add	ptra, #12
13504     F0 65 BF FD | 	call	#_pop
13508     A7 FA 61 FC | 	wrlong	result1, fp
1350c     04 4E 05 F1 | 	add	fp, #4
13510     A7 FC 61 FC | 	wrlong	result2, fp
13514     04 4E 05 F1 | 	add	fp, #4
13518     A7 FE 61 FC | 	wrlong	result3, fp
1351c     08 4E 85 F1 | 	sub	fp, #8
13520     A7 12 02 F6 | 	mov	arg01, fp
13524     94 E9 BF FD | 	call	#_converttoint
13528     FD 12 02 F6 | 	mov	arg01, result1
1352c     20 12 CE F7 | 	test	arg01, #32 wz
13530     FF FB 01 56 |  if_ne	mov	result1, inb
13534     FE FB 01 A6 |  if_e	mov	result1, ina
13538     09 FB 41 F0 | 	shr	result1, arg01
1353c     06 12 46 F0 | 	shr	arg01, #6
13540     09 FB 41 F7 | 	zerox	result1, arg01
13544     7B 00 00 FF 
13548     94 E4 05 F1 | 	add	objptr, ##63124
1354c     F2 FA 61 FC | 	wrlong	result1, objptr
13550     7B 00 00 FF 
13554     94 E4 85 F1 | 	sub	objptr, ##63124
13558     08 4E 05 F1 | 	add	fp, #8
1355c     A7 3A 68 FC | 	wrlong	#29, fp
13560     08 4E 85 F1 | 	sub	fp, #8
13564     A7 08 68 FC | 	wrlong	#4, fp
13568     A7 12 02 F6 | 	mov	arg01, fp
1356c     20 66 BF FD | 	call	#_push
13570     A7 F0 03 F6 | 	mov	ptra, fp
13574     B2 00 A0 FD | 	call	#popregs_
13578                 | _do_pinread_ret
13578     2D 00 64 FD | 	ret
1357c                 | 
1357c                 | ' 
1357c                 | ' sub do_gettime
1357c                 | _do_gettime
1357c     02 4A 05 F6 | 	mov	COUNT_, #2
13580     A8 00 A0 FD | 	call	#pushregs_
13584     14 F0 07 F1 | 	add	ptra, #20
13588                 | ' 
13588                 | ' const asm 
13588     1A 1E 72 FD | 	getct	local01 wc
1358c     1A 20 62 FD | 	getct	local02
13590                 | ' 
13590                 | ' return hi1, lo1
13590     10 FD 01 F6 | 	mov	result2, local02
13594     A7 1E 62 FC | 	wrlong	local01, fp
13598     04 4E 05 F1 | 	add	fp, #4
1359c     A7 FC 61 FC | 	wrlong	result2, fp
135a0     0C 4E 05 F1 | 	add	fp, #12
135a4     A7 3A 68 FC | 	wrlong	#29, fp
135a8     0C 4E 85 F1 | 	sub	fp, #12
135ac     A7 12 02 FB | 	rdlong	arg01, fp
135b0     04 4E 05 F1 | 	add	fp, #4
135b4     A7 12 62 FC | 	wrlong	arg01, fp
135b8     08 4E 85 F1 | 	sub	fp, #8
135bc     A7 12 02 FB | 	rdlong	arg01, fp
135c0     0C 4E 05 F1 | 	add	fp, #12
135c4     A7 12 62 FC | 	wrlong	arg01, fp
135c8     04 4E 85 F1 | 	sub	fp, #4
135cc     A7 12 02 F6 | 	mov	arg01, fp
135d0     08 4E 85 F1 | 	sub	fp, #8
135d4     B8 65 BF FD | 	call	#_push
135d8     A7 F0 03 F6 | 	mov	ptra, fp
135dc     B2 00 A0 FD | 	call	#popregs_
135e0                 | _do_gettime_ret
135e0     2D 00 64 FD | 	ret
135e4                 | 
135e4                 | '    
135e4                 | ' 
135e4                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
135e4                 | ' 
135e4                 | ' '' ----------------------------- Clear the screen
135e4                 | ' 
135e4                 | ' sub do_cls
135e4                 | _do_cls
135e4     56 00 00 FF 
135e8     C0 E5 05 F1 | 	add	objptr, ##44480
135ec     F2 12 02 FB | 	rdlong	arg01, objptr
135f0     04 E4 85 F1 | 	sub	objptr, #4
135f4     F2 14 02 FB | 	rdlong	arg02, objptr
135f8     56 00 00 FF 
135fc     BC E5 85 F1 | 	sub	objptr, ##44476
13600     B8 63 B0 FD | 	call	#_hg010b_spin2_cls
13604     56 00 00 FF 
13608     C0 E5 05 F1 | 	add	objptr, ##44480
1360c     F2 14 02 FB | 	rdlong	arg02, objptr
13610     14 E4 85 F1 | 	sub	objptr, #20
13614     F2 14 62 FC | 	wrlong	arg02, objptr
13618     56 00 00 FF 
1361c     AC E5 85 F1 | 	sub	objptr, ##44460
13620                 | ' cls(ink,paper): plot_color=ink: print
13620     00 12 06 F6 | 	mov	arg01, #0
13624     24 D0 B0 FD | 	call	#__system___getiolock_0442
13628     FD 12 02 F6 | 	mov	arg01, result1
1362c     E8 76 B0 FD | 	call	#__system___lockmem
13630     00 12 06 F6 | 	mov	arg01, #0
13634     0A 14 06 F6 | 	mov	arg02, #10
13638     00 16 06 F6 | 	mov	arg03, #0
1363c     88 83 B0 FD | 	call	#__system___basic_print_char
13640     00 12 06 F6 | 	mov	arg01, #0
13644     04 D0 B0 FD | 	call	#__system___getiolock_0442
13648     FD 00 68 FC | 	wrlong	#0, result1
1364c                 | _do_cls_ret
1364c     2D 00 64 FD | 	ret
13650                 | 
13650                 | ' 
13650                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
13650                 | ' 
13650                 | ' sub do_color
13650                 | _do_color
13650     03 4A 05 F6 | 	mov	COUNT_, #3
13654     A8 00 A0 FD | 	call	#pushregs_
13658     9C 64 BF FD | 	call	#_pop
1365c     FD 1E 02 F6 | 	mov	local01, result1
13660     FE 20 02 F6 | 	mov	local02, result2
13664     FF 22 02 F6 | 	mov	local03, result3
13668     56 00 00 FF 
1366c     AC E5 05 F1 | 	add	objptr, ##44460
13670     F2 1E 62 FC | 	wrlong	local01, objptr
13674     56 00 00 FF 
13678     AC E5 85 F1 | 	sub	objptr, ##44460
1367c     A7 F0 03 F6 | 	mov	ptra, fp
13680     B2 00 A0 FD | 	call	#popregs_
13684                 | _do_color_ret
13684     2D 00 64 FD | 	ret
13688                 | 
13688                 | ' 
13688                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
13688                 | ' 
13688                 | ' sub do_plot
13688                 | _do_plot
13688     00 4A 05 F6 | 	mov	COUNT_, #0
1368c     A8 00 A0 FD | 	call	#pushregs_
13690     20 F0 07 F1 | 	add	ptra, #32
13694     60 64 BF FD | 	call	#_pop
13698     FD 16 02 F6 | 	mov	arg03, result1
1369c     FE 14 02 F6 | 	mov	arg02, result2
136a0     FF 12 02 F6 | 	mov	arg01, result3
136a4     0C 4E 05 F1 | 	add	fp, #12
136a8     A7 16 62 FC | 	wrlong	arg03, fp
136ac     04 4E 05 F1 | 	add	fp, #4
136b0     A7 14 62 FC | 	wrlong	arg02, fp
136b4     04 4E 05 F1 | 	add	fp, #4
136b8     A7 12 62 FC | 	wrlong	arg01, fp
136bc     14 4E 85 F1 | 	sub	fp, #20
136c0     34 64 BF FD | 	call	#_pop
136c4     FF 16 02 F6 | 	mov	arg03, result3
136c8     A7 FA 61 FC | 	wrlong	result1, fp
136cc     04 4E 05 F1 | 	add	fp, #4
136d0     A7 FC 61 FC | 	wrlong	result2, fp
136d4     04 4E 05 F1 | 	add	fp, #4
136d8     A7 16 62 FC | 	wrlong	arg03, fp
136dc     08 4E 85 F1 | 	sub	fp, #8
136e0     A7 12 02 F6 | 	mov	arg01, fp
136e4     D4 E7 BF FD | 	call	#_converttoint
136e8     18 4E 05 F1 | 	add	fp, #24
136ec     A7 FA 61 FC | 	wrlong	result1, fp
136f0     0C 4E 85 F1 | 	sub	fp, #12
136f4     A7 12 02 F6 | 	mov	arg01, fp
136f8     0C 4E 85 F1 | 	sub	fp, #12
136fc     BC E7 BF FD | 	call	#_converttoint
13700     1C 4E 05 F1 | 	add	fp, #28
13704     A7 FA 61 FC | 	wrlong	result1, fp
13708     04 4E 85 F1 | 	sub	fp, #4
1370c     A7 16 02 FB | 	rdlong	arg03, fp
13710     56 00 00 FF 
13714     B0 E5 05 F1 | 	add	objptr, ##44464
13718     F2 16 62 FC | 	wrlong	arg03, objptr
1371c     04 4E 05 F1 | 	add	fp, #4
13720     A7 14 02 FB | 	rdlong	arg02, fp
13724     1C 4E 85 F1 | 	sub	fp, #28
13728     04 E4 05 F1 | 	add	objptr, #4
1372c     F2 14 62 FC | 	wrlong	arg02, objptr
13730     04 E4 85 F1 | 	sub	objptr, #4
13734     F2 12 02 FB | 	rdlong	arg01, objptr
13738     04 E4 85 F1 | 	sub	objptr, #4
1373c     F2 16 02 FB | 	rdlong	arg03, objptr
13740     56 00 00 FF 
13744     AC E5 85 F1 | 	sub	objptr, ##44460
13748     04 56 B0 FD | 	call	#_hg010b_spin2_putpixel
1374c     A7 F0 03 F6 | 	mov	ptra, fp
13750     B2 00 A0 FD | 	call	#popregs_
13754                 | _do_plot_ret
13754     2D 00 64 FD | 	ret
13758                 | 
13758                 | ' 
13758                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
13758                 | ' 
13758                 | ' sub do_draw
13758                 | _do_draw
13758     00 4A 05 F6 | 	mov	COUNT_, #0
1375c     A8 00 A0 FD | 	call	#pushregs_
13760     20 F0 07 F1 | 	add	ptra, #32
13764     90 63 BF FD | 	call	#_pop
13768     FD 1A 02 F6 | 	mov	arg05, result1
1376c     FE 18 02 F6 | 	mov	arg04, result2
13770     FF 16 02 F6 | 	mov	arg03, result3
13774     0C 4E 05 F1 | 	add	fp, #12
13778     A7 1A 62 FC | 	wrlong	arg05, fp
1377c     04 4E 05 F1 | 	add	fp, #4
13780     A7 18 62 FC | 	wrlong	arg04, fp
13784     04 4E 05 F1 | 	add	fp, #4
13788     A7 16 62 FC | 	wrlong	arg03, fp
1378c     14 4E 85 F1 | 	sub	fp, #20
13790     64 63 BF FD | 	call	#_pop
13794     FF 1A 02 F6 | 	mov	arg05, result3
13798     A7 FA 61 FC | 	wrlong	result1, fp
1379c     04 4E 05 F1 | 	add	fp, #4
137a0     A7 FC 61 FC | 	wrlong	result2, fp
137a4     04 4E 05 F1 | 	add	fp, #4
137a8     A7 1A 62 FC | 	wrlong	arg05, fp
137ac     08 4E 85 F1 | 	sub	fp, #8
137b0     A7 12 02 F6 | 	mov	arg01, fp
137b4     04 E7 BF FD | 	call	#_converttoint
137b8     18 4E 05 F1 | 	add	fp, #24
137bc     A7 FA 61 FC | 	wrlong	result1, fp
137c0     0C 4E 85 F1 | 	sub	fp, #12
137c4     A7 12 02 F6 | 	mov	arg01, fp
137c8     0C 4E 85 F1 | 	sub	fp, #12
137cc     EC E6 BF FD | 	call	#_converttoint
137d0     1C 4E 05 F1 | 	add	fp, #28
137d4     A7 FA 61 FC | 	wrlong	result1, fp
137d8     56 00 00 FF 
137dc     B0 E5 05 F1 | 	add	objptr, ##44464
137e0     F2 12 02 FB | 	rdlong	arg01, objptr
137e4     04 E4 05 F1 | 	add	objptr, #4
137e8     F2 14 02 FB | 	rdlong	arg02, objptr
137ec     04 4E 85 F1 | 	sub	fp, #4
137f0     A7 16 02 FB | 	rdlong	arg03, fp
137f4     FD 18 02 F6 | 	mov	arg04, result1
137f8     18 4E 85 F1 | 	sub	fp, #24
137fc     08 E4 85 F1 | 	sub	objptr, #8
13800     F2 1A 02 FB | 	rdlong	arg05, objptr
13804     56 00 00 FF 
13808     AC E5 85 F1 | 	sub	objptr, ##44460
1380c     F0 57 B0 FD | 	call	#_hg010b_spin2_draw
13810     18 4E 05 F1 | 	add	fp, #24
13814     A7 1A 02 FB | 	rdlong	arg05, fp
13818     56 00 00 FF 
1381c     B0 E5 05 F1 | 	add	objptr, ##44464
13820     F2 1A 62 FC | 	wrlong	arg05, objptr
13824     04 4E 05 F1 | 	add	fp, #4
13828     A7 1A 02 FB | 	rdlong	arg05, fp
1382c     1C 4E 85 F1 | 	sub	fp, #28
13830     04 E4 05 F1 | 	add	objptr, #4
13834     F2 1A 62 FC | 	wrlong	arg05, objptr
13838     56 00 00 FF 
1383c     B4 E5 85 F1 | 	sub	objptr, ##44468
13840     A7 F0 03 F6 | 	mov	ptra, fp
13844     B2 00 A0 FD | 	call	#popregs_
13848                 | _do_draw_ret
13848     2D 00 64 FD | 	ret
1384c                 | 
1384c                 | ' 
1384c                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
1384c                 | ' 
1384c                 | ' sub do_fcircle
1384c                 | _do_fcircle
1384c     02 4A 05 F6 | 	mov	COUNT_, #2
13850     A8 00 A0 FD | 	call	#pushregs_
13854     24 F0 07 F1 | 	add	ptra, #36
13858     9C 62 BF FD | 	call	#_pop
1385c     FD 18 02 F6 | 	mov	arg04, result1
13860     FE 16 02 F6 | 	mov	arg03, result2
13864     FF 14 02 F6 | 	mov	arg02, result3
13868     18 4E 05 F1 | 	add	fp, #24
1386c     A7 18 62 FC | 	wrlong	arg04, fp
13870     04 4E 05 F1 | 	add	fp, #4
13874     A7 16 62 FC | 	wrlong	arg03, fp
13878     04 4E 05 F1 | 	add	fp, #4
1387c     A7 14 62 FC | 	wrlong	arg02, fp
13880     20 4E 85 F1 | 	sub	fp, #32
13884     70 62 BF FD | 	call	#_pop
13888     FD 18 02 F6 | 	mov	arg04, result1
1388c     FE 16 02 F6 | 	mov	arg03, result2
13890     FF 1E 02 F6 | 	mov	local01, result3
13894     0C 4E 05 F1 | 	add	fp, #12
13898     A7 18 62 FC | 	wrlong	arg04, fp
1389c     04 4E 05 F1 | 	add	fp, #4
138a0     A7 16 62 FC | 	wrlong	arg03, fp
138a4     04 4E 05 F1 | 	add	fp, #4
138a8     A7 1E 62 FC | 	wrlong	local01, fp
138ac     14 4E 85 F1 | 	sub	fp, #20
138b0     44 62 BF FD | 	call	#_pop
138b4     A7 FA 61 FC | 	wrlong	result1, fp
138b8     04 4E 05 F1 | 	add	fp, #4
138bc     A7 FC 61 FC | 	wrlong	result2, fp
138c0     04 4E 05 F1 | 	add	fp, #4
138c4     A7 FE 61 FC | 	wrlong	result3, fp
138c8                 | ' 
138c8                 | ' t3=pop()
138c8                 | ' t2=pop()
138c8                 | ' t1=pop()
138c8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
138c8     FF 18 02 F6 | 	mov	arg04, result3
138cc     08 4E 85 F1 | 	sub	fp, #8
138d0     1C 18 0E F2 | 	cmp	arg04, #28 wz
138d4     08 4E 05 51 |  if_ne	add	fp, #8
138d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
138dc     08 4E 85 51 |  if_ne	sub	fp, #8
138e0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
138e4     7C 00 90 5D |  if_ne	jmp	#LR__1520
138e8     14 4E 05 F1 | 	add	fp, #20
138ec     A7 1E 02 FB | 	rdlong	local01, fp
138f0     14 4E 85 F1 | 	sub	fp, #20
138f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
138f8     14 4E 05 51 |  if_ne	add	fp, #20
138fc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13900     14 4E 85 51 |  if_ne	sub	fp, #20
13904     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13908     58 00 90 5D |  if_ne	jmp	#LR__1520
1390c     20 4E 05 F1 | 	add	fp, #32
13910     A7 1E 02 FB | 	rdlong	local01, fp
13914     20 4E 85 F1 | 	sub	fp, #32
13918     1C 1E 0E F2 | 	cmp	local01, #28 wz
1391c     20 4E 05 51 |  if_ne	add	fp, #32
13920     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13924     20 4E 85 51 |  if_ne	sub	fp, #32
13928     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1392c     34 00 90 5D |  if_ne	jmp	#LR__1520
13930     A7 12 02 FB | 	rdlong	arg01, fp
13934     0C 4E 05 F1 | 	add	fp, #12
13938     A7 14 02 FB | 	rdlong	arg02, fp
1393c     0C 4E 05 F1 | 	add	fp, #12
13940     A7 16 02 FB | 	rdlong	arg03, fp
13944     18 4E 85 F1 | 	sub	fp, #24
13948     56 00 00 FF 
1394c     AC E5 05 F1 | 	add	objptr, ##44460
13950     F2 18 02 FB | 	rdlong	arg04, objptr
13954     56 00 00 FF 
13958     AC E5 85 F1 | 	sub	objptr, ##44460
1395c     24 5B B0 FD | 	call	#_hg010b_spin2_fcircle
13960                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
13960     54 00 90 FD | 	jmp	#LR__1521
13964                 | LR__1520
13964     A7 12 02 F6 | 	mov	arg01, fp
13968     50 E5 BF FD | 	call	#_converttoint
1396c     FD 1E 02 F6 | 	mov	local01, result1
13970     0C 4E 05 F1 | 	add	fp, #12
13974     A7 12 02 F6 | 	mov	arg01, fp
13978     0C 4E 85 F1 | 	sub	fp, #12
1397c     3C E5 BF FD | 	call	#_converttoint
13980     FD 20 02 F6 | 	mov	local02, result1
13984     18 4E 05 F1 | 	add	fp, #24
13988     A7 12 02 F6 | 	mov	arg01, fp
1398c     18 4E 85 F1 | 	sub	fp, #24
13990     28 E5 BF FD | 	call	#_converttoint
13994     FD 16 02 F6 | 	mov	arg03, result1
13998     56 00 00 FF 
1399c     AC E5 05 F1 | 	add	objptr, ##44460
139a0     F2 18 02 FB | 	rdlong	arg04, objptr
139a4     56 00 00 FF 
139a8     AC E5 85 F1 | 	sub	objptr, ##44460
139ac     0F 13 02 F6 | 	mov	arg01, local01
139b0     10 15 02 F6 | 	mov	arg02, local02
139b4     CC 5A B0 FD | 	call	#_hg010b_spin2_fcircle
139b8                 | LR__1521
139b8     A7 F0 03 F6 | 	mov	ptra, fp
139bc     B2 00 A0 FD | 	call	#popregs_
139c0                 | _do_fcircle_ret
139c0     2D 00 64 FD | 	ret
139c4                 | 
139c4                 | ' 
139c4                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
139c4                 | ' 
139c4                 | ' sub do_circle
139c4                 | _do_circle
139c4     02 4A 05 F6 | 	mov	COUNT_, #2
139c8     A8 00 A0 FD | 	call	#pushregs_
139cc     24 F0 07 F1 | 	add	ptra, #36
139d0     24 61 BF FD | 	call	#_pop
139d4     FD 18 02 F6 | 	mov	arg04, result1
139d8     FE 16 02 F6 | 	mov	arg03, result2
139dc     FF 14 02 F6 | 	mov	arg02, result3
139e0     18 4E 05 F1 | 	add	fp, #24
139e4     A7 18 62 FC | 	wrlong	arg04, fp
139e8     04 4E 05 F1 | 	add	fp, #4
139ec     A7 16 62 FC | 	wrlong	arg03, fp
139f0     04 4E 05 F1 | 	add	fp, #4
139f4     A7 14 62 FC | 	wrlong	arg02, fp
139f8     20 4E 85 F1 | 	sub	fp, #32
139fc     F8 60 BF FD | 	call	#_pop
13a00     FD 18 02 F6 | 	mov	arg04, result1
13a04     FE 16 02 F6 | 	mov	arg03, result2
13a08     FF 1E 02 F6 | 	mov	local01, result3
13a0c     0C 4E 05 F1 | 	add	fp, #12
13a10     A7 18 62 FC | 	wrlong	arg04, fp
13a14     04 4E 05 F1 | 	add	fp, #4
13a18     A7 16 62 FC | 	wrlong	arg03, fp
13a1c     04 4E 05 F1 | 	add	fp, #4
13a20     A7 1E 62 FC | 	wrlong	local01, fp
13a24     14 4E 85 F1 | 	sub	fp, #20
13a28     CC 60 BF FD | 	call	#_pop
13a2c     A7 FA 61 FC | 	wrlong	result1, fp
13a30     04 4E 05 F1 | 	add	fp, #4
13a34     A7 FC 61 FC | 	wrlong	result2, fp
13a38     04 4E 05 F1 | 	add	fp, #4
13a3c     A7 FE 61 FC | 	wrlong	result3, fp
13a40                 | ' 
13a40                 | ' t3=pop()
13a40                 | ' t2=pop()
13a40                 | ' t1=pop()
13a40                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
13a40     FF 18 02 F6 | 	mov	arg04, result3
13a44     08 4E 85 F1 | 	sub	fp, #8
13a48     1C 18 0E F2 | 	cmp	arg04, #28 wz
13a4c     08 4E 05 51 |  if_ne	add	fp, #8
13a50     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13a54     08 4E 85 51 |  if_ne	sub	fp, #8
13a58     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13a5c     7C 00 90 5D |  if_ne	jmp	#LR__1530
13a60     14 4E 05 F1 | 	add	fp, #20
13a64     A7 1E 02 FB | 	rdlong	local01, fp
13a68     14 4E 85 F1 | 	sub	fp, #20
13a6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
13a70     14 4E 05 51 |  if_ne	add	fp, #20
13a74     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13a78     14 4E 85 51 |  if_ne	sub	fp, #20
13a7c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13a80     58 00 90 5D |  if_ne	jmp	#LR__1530
13a84     20 4E 05 F1 | 	add	fp, #32
13a88     A7 1E 02 FB | 	rdlong	local01, fp
13a8c     20 4E 85 F1 | 	sub	fp, #32
13a90     1C 1E 0E F2 | 	cmp	local01, #28 wz
13a94     20 4E 05 51 |  if_ne	add	fp, #32
13a98     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13a9c     20 4E 85 51 |  if_ne	sub	fp, #32
13aa0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13aa4     34 00 90 5D |  if_ne	jmp	#LR__1530
13aa8     A7 12 02 FB | 	rdlong	arg01, fp
13aac     0C 4E 05 F1 | 	add	fp, #12
13ab0     A7 14 02 FB | 	rdlong	arg02, fp
13ab4     0C 4E 05 F1 | 	add	fp, #12
13ab8     A7 16 02 FB | 	rdlong	arg03, fp
13abc     18 4E 85 F1 | 	sub	fp, #24
13ac0     56 00 00 FF 
13ac4     AC E5 05 F1 | 	add	objptr, ##44460
13ac8     F2 18 02 FB | 	rdlong	arg04, objptr
13acc     56 00 00 FF 
13ad0     AC E5 85 F1 | 	sub	objptr, ##44460
13ad4     B8 5A B0 FD | 	call	#_hg010b_spin2_circle
13ad8                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
13ad8     54 00 90 FD | 	jmp	#LR__1531
13adc                 | LR__1530
13adc     A7 12 02 F6 | 	mov	arg01, fp
13ae0     D8 E3 BF FD | 	call	#_converttoint
13ae4     FD 1E 02 F6 | 	mov	local01, result1
13ae8     0C 4E 05 F1 | 	add	fp, #12
13aec     A7 12 02 F6 | 	mov	arg01, fp
13af0     0C 4E 85 F1 | 	sub	fp, #12
13af4     C4 E3 BF FD | 	call	#_converttoint
13af8     FD 20 02 F6 | 	mov	local02, result1
13afc     18 4E 05 F1 | 	add	fp, #24
13b00     A7 12 02 F6 | 	mov	arg01, fp
13b04     18 4E 85 F1 | 	sub	fp, #24
13b08     B0 E3 BF FD | 	call	#_converttoint
13b0c     FD 16 02 F6 | 	mov	arg03, result1
13b10     56 00 00 FF 
13b14     AC E5 05 F1 | 	add	objptr, ##44460
13b18     F2 18 02 FB | 	rdlong	arg04, objptr
13b1c     56 00 00 FF 
13b20     AC E5 85 F1 | 	sub	objptr, ##44460
13b24     0F 13 02 F6 | 	mov	arg01, local01
13b28     10 15 02 F6 | 	mov	arg02, local02
13b2c     60 5A B0 FD | 	call	#_hg010b_spin2_circle
13b30                 | LR__1531
13b30     A7 F0 03 F6 | 	mov	ptra, fp
13b34     B2 00 A0 FD | 	call	#popregs_
13b38                 | _do_circle_ret
13b38     2D 00 64 FD | 	ret
13b3c                 | 
13b3c                 | ' 
13b3c                 | ' ' -------------------------- Draw a rectangle
13b3c                 | ' 
13b3c                 | ' sub do_box
13b3c                 | _do_box
13b3c     03 4A 05 F6 | 	mov	COUNT_, #3
13b40     A8 00 A0 FD | 	call	#pushregs_
13b44     30 F0 07 F1 | 	add	ptra, #48
13b48     AC 5F BF FD | 	call	#_pop
13b4c     FD 1A 02 F6 | 	mov	arg05, result1
13b50     FE 18 02 F6 | 	mov	arg04, result2
13b54     FF 16 02 F6 | 	mov	arg03, result3
13b58     24 4E 05 F1 | 	add	fp, #36
13b5c     A7 1A 62 FC | 	wrlong	arg05, fp
13b60     04 4E 05 F1 | 	add	fp, #4
13b64     A7 18 62 FC | 	wrlong	arg04, fp
13b68     04 4E 05 F1 | 	add	fp, #4
13b6c     A7 16 62 FC | 	wrlong	arg03, fp
13b70     2C 4E 85 F1 | 	sub	fp, #44
13b74     80 5F BF FD | 	call	#_pop
13b78     FD 1A 02 F6 | 	mov	arg05, result1
13b7c     FE 18 02 F6 | 	mov	arg04, result2
13b80     FF 16 02 F6 | 	mov	arg03, result3
13b84     18 4E 05 F1 | 	add	fp, #24
13b88     A7 1A 62 FC | 	wrlong	arg05, fp
13b8c     04 4E 05 F1 | 	add	fp, #4
13b90     A7 18 62 FC | 	wrlong	arg04, fp
13b94     04 4E 05 F1 | 	add	fp, #4
13b98     A7 16 62 FC | 	wrlong	arg03, fp
13b9c     20 4E 85 F1 | 	sub	fp, #32
13ba0     54 5F BF FD | 	call	#_pop
13ba4     FD 1A 02 F6 | 	mov	arg05, result1
13ba8     FE 18 02 F6 | 	mov	arg04, result2
13bac     FF 1E 02 F6 | 	mov	local01, result3
13bb0     0C 4E 05 F1 | 	add	fp, #12
13bb4     A7 1A 62 FC | 	wrlong	arg05, fp
13bb8     04 4E 05 F1 | 	add	fp, #4
13bbc     A7 18 62 FC | 	wrlong	arg04, fp
13bc0     04 4E 05 F1 | 	add	fp, #4
13bc4     A7 1E 62 FC | 	wrlong	local01, fp
13bc8     14 4E 85 F1 | 	sub	fp, #20
13bcc     28 5F BF FD | 	call	#_pop
13bd0     A7 FA 61 FC | 	wrlong	result1, fp
13bd4     04 4E 05 F1 | 	add	fp, #4
13bd8     A7 FC 61 FC | 	wrlong	result2, fp
13bdc     04 4E 05 F1 | 	add	fp, #4
13be0     A7 FE 61 FC | 	wrlong	result3, fp
13be4                 | ' 
13be4                 | ' t4=pop()
13be4                 | ' t3=pop()
13be4                 | ' t2=pop()
13be4                 | ' t1=pop()
13be4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
13be4     FF 1A 02 F6 | 	mov	arg05, result3
13be8     08 4E 85 F1 | 	sub	fp, #8
13bec     1C 1A 0E F2 | 	cmp	arg05, #28 wz
13bf0     08 4E 05 51 |  if_ne	add	fp, #8
13bf4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13bf8     08 4E 85 51 |  if_ne	sub	fp, #8
13bfc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13c00     A8 00 90 5D |  if_ne	jmp	#LR__1540
13c04     14 4E 05 F1 | 	add	fp, #20
13c08     A7 1E 02 FB | 	rdlong	local01, fp
13c0c     14 4E 85 F1 | 	sub	fp, #20
13c10     1C 1E 0E F2 | 	cmp	local01, #28 wz
13c14     14 4E 05 51 |  if_ne	add	fp, #20
13c18     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13c1c     14 4E 85 51 |  if_ne	sub	fp, #20
13c20     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13c24     84 00 90 5D |  if_ne	jmp	#LR__1540
13c28     20 4E 05 F1 | 	add	fp, #32
13c2c     A7 1E 02 FB | 	rdlong	local01, fp
13c30     20 4E 85 F1 | 	sub	fp, #32
13c34     1C 1E 0E F2 | 	cmp	local01, #28 wz
13c38     20 4E 05 51 |  if_ne	add	fp, #32
13c3c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13c40     20 4E 85 51 |  if_ne	sub	fp, #32
13c44     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13c48     60 00 90 5D |  if_ne	jmp	#LR__1540
13c4c     2C 4E 05 F1 | 	add	fp, #44
13c50     A7 1E 02 FB | 	rdlong	local01, fp
13c54     2C 4E 85 F1 | 	sub	fp, #44
13c58     1C 1E 0E F2 | 	cmp	local01, #28 wz
13c5c     2C 4E 05 51 |  if_ne	add	fp, #44
13c60     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13c64     2C 4E 85 51 |  if_ne	sub	fp, #44
13c68     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13c6c     3C 00 90 5D |  if_ne	jmp	#LR__1540
13c70     A7 12 02 FB | 	rdlong	arg01, fp
13c74     0C 4E 05 F1 | 	add	fp, #12
13c78     A7 14 02 FB | 	rdlong	arg02, fp
13c7c     0C 4E 05 F1 | 	add	fp, #12
13c80     A7 16 02 FB | 	rdlong	arg03, fp
13c84     0C 4E 05 F1 | 	add	fp, #12
13c88     A7 18 02 FB | 	rdlong	arg04, fp
13c8c     24 4E 85 F1 | 	sub	fp, #36
13c90     56 00 00 FF 
13c94     AC E5 05 F1 | 	add	objptr, ##44460
13c98     F2 1A 02 FB | 	rdlong	arg05, objptr
13c9c     56 00 00 FF 
13ca0     AC E5 85 F1 | 	sub	objptr, ##44460
13ca4     B4 5A B0 FD | 	call	#_hg010b_spin2_box
13ca8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
13ca8     6C 00 90 FD | 	jmp	#LR__1541
13cac                 | LR__1540
13cac     A7 12 02 F6 | 	mov	arg01, fp
13cb0     08 E2 BF FD | 	call	#_converttoint
13cb4     FD 20 02 F6 | 	mov	local02, result1
13cb8     0C 4E 05 F1 | 	add	fp, #12
13cbc     A7 12 02 F6 | 	mov	arg01, fp
13cc0     0C 4E 85 F1 | 	sub	fp, #12
13cc4     F4 E1 BF FD | 	call	#_converttoint
13cc8     FD 22 02 F6 | 	mov	local03, result1
13ccc     18 4E 05 F1 | 	add	fp, #24
13cd0     A7 12 02 F6 | 	mov	arg01, fp
13cd4     18 4E 85 F1 | 	sub	fp, #24
13cd8     E0 E1 BF FD | 	call	#_converttoint
13cdc     FD 1E 02 F6 | 	mov	local01, result1
13ce0     24 4E 05 F1 | 	add	fp, #36
13ce4     A7 12 02 F6 | 	mov	arg01, fp
13ce8     24 4E 85 F1 | 	sub	fp, #36
13cec     CC E1 BF FD | 	call	#_converttoint
13cf0     FD 18 02 F6 | 	mov	arg04, result1
13cf4     56 00 00 FF 
13cf8     AC E5 05 F1 | 	add	objptr, ##44460
13cfc     F2 1A 02 FB | 	rdlong	arg05, objptr
13d00     56 00 00 FF 
13d04     AC E5 85 F1 | 	sub	objptr, ##44460
13d08     10 13 02 F6 | 	mov	arg01, local02
13d0c     11 15 02 F6 | 	mov	arg02, local03
13d10     0F 17 02 F6 | 	mov	arg03, local01
13d14     44 5A B0 FD | 	call	#_hg010b_spin2_box
13d18                 | LR__1541
13d18     A7 F0 03 F6 | 	mov	ptra, fp
13d1c     B2 00 A0 FD | 	call	#popregs_
13d20                 | _do_box_ret
13d20     2D 00 64 FD | 	ret
13d24                 | 
13d24                 | ' 
13d24                 | ' sub do_fill
13d24                 | _do_fill
13d24     03 4A 05 F6 | 	mov	COUNT_, #3
13d28     A8 00 A0 FD | 	call	#pushregs_
13d2c     30 F0 07 F1 | 	add	ptra, #48
13d30     C4 5D BF FD | 	call	#_pop
13d34     FD 18 02 F6 | 	mov	arg04, result1
13d38     FE 16 02 F6 | 	mov	arg03, result2
13d3c     FF 14 02 F6 | 	mov	arg02, result3
13d40     24 4E 05 F1 | 	add	fp, #36
13d44     A7 18 62 FC | 	wrlong	arg04, fp
13d48     04 4E 05 F1 | 	add	fp, #4
13d4c     A7 16 62 FC | 	wrlong	arg03, fp
13d50     04 4E 05 F1 | 	add	fp, #4
13d54     A7 14 62 FC | 	wrlong	arg02, fp
13d58     2C 4E 85 F1 | 	sub	fp, #44
13d5c     98 5D BF FD | 	call	#_pop
13d60     FD 18 02 F6 | 	mov	arg04, result1
13d64     FE 16 02 F6 | 	mov	arg03, result2
13d68     FF 14 02 F6 | 	mov	arg02, result3
13d6c     18 4E 05 F1 | 	add	fp, #24
13d70     A7 18 62 FC | 	wrlong	arg04, fp
13d74     04 4E 05 F1 | 	add	fp, #4
13d78     A7 16 62 FC | 	wrlong	arg03, fp
13d7c     04 4E 05 F1 | 	add	fp, #4
13d80     A7 14 62 FC | 	wrlong	arg02, fp
13d84     20 4E 85 F1 | 	sub	fp, #32
13d88     6C 5D BF FD | 	call	#_pop
13d8c     FD 18 02 F6 | 	mov	arg04, result1
13d90     FE 16 02 F6 | 	mov	arg03, result2
13d94     FF 1E 02 F6 | 	mov	local01, result3
13d98     0C 4E 05 F1 | 	add	fp, #12
13d9c     A7 18 62 FC | 	wrlong	arg04, fp
13da0     04 4E 05 F1 | 	add	fp, #4
13da4     A7 16 62 FC | 	wrlong	arg03, fp
13da8     04 4E 05 F1 | 	add	fp, #4
13dac     A7 1E 62 FC | 	wrlong	local01, fp
13db0     14 4E 85 F1 | 	sub	fp, #20
13db4     40 5D BF FD | 	call	#_pop
13db8     A7 FA 61 FC | 	wrlong	result1, fp
13dbc     04 4E 05 F1 | 	add	fp, #4
13dc0     A7 FC 61 FC | 	wrlong	result2, fp
13dc4     04 4E 05 F1 | 	add	fp, #4
13dc8     A7 FE 61 FC | 	wrlong	result3, fp
13dcc                 | ' 
13dcc                 | ' t4=pop()
13dcc                 | ' t3=pop()
13dcc                 | ' t2=pop()
13dcc                 | ' t1=pop()
13dcc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
13dcc     FF 18 02 F6 | 	mov	arg04, result3
13dd0     08 4E 85 F1 | 	sub	fp, #8
13dd4     1C 18 0E F2 | 	cmp	arg04, #28 wz
13dd8     08 4E 05 51 |  if_ne	add	fp, #8
13ddc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13de0     08 4E 85 51 |  if_ne	sub	fp, #8
13de4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13de8     94 00 90 5D |  if_ne	jmp	#LR__1550
13dec     14 4E 05 F1 | 	add	fp, #20
13df0     A7 1E 02 FB | 	rdlong	local01, fp
13df4     14 4E 85 F1 | 	sub	fp, #20
13df8     1C 1E 0E F2 | 	cmp	local01, #28 wz
13dfc     14 4E 05 51 |  if_ne	add	fp, #20
13e00     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13e04     14 4E 85 51 |  if_ne	sub	fp, #20
13e08     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13e0c     70 00 90 5D |  if_ne	jmp	#LR__1550
13e10     20 4E 05 F1 | 	add	fp, #32
13e14     A7 1E 02 FB | 	rdlong	local01, fp
13e18     20 4E 85 F1 | 	sub	fp, #32
13e1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
13e20     20 4E 05 51 |  if_ne	add	fp, #32
13e24     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13e28     20 4E 85 51 |  if_ne	sub	fp, #32
13e2c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13e30     4C 00 90 5D |  if_ne	jmp	#LR__1550
13e34     2C 4E 05 F1 | 	add	fp, #44
13e38     A7 1E 02 FB | 	rdlong	local01, fp
13e3c     2C 4E 85 F1 | 	sub	fp, #44
13e40     1C 1E 0E F2 | 	cmp	local01, #28 wz
13e44     2C 4E 05 51 |  if_ne	add	fp, #44
13e48     A7 18 02 5B |  if_ne	rdlong	arg04, fp
13e4c     2C 4E 85 51 |  if_ne	sub	fp, #44
13e50     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
13e54     28 00 90 5D |  if_ne	jmp	#LR__1550
13e58     A7 12 02 FB | 	rdlong	arg01, fp
13e5c     0C 4E 05 F1 | 	add	fp, #12
13e60     A7 14 02 FB | 	rdlong	arg02, fp
13e64     0C 4E 05 F1 | 	add	fp, #12
13e68     A7 16 02 FB | 	rdlong	arg03, fp
13e6c     0C 4E 05 F1 | 	add	fp, #12
13e70     A7 18 02 FB | 	rdlong	arg04, fp
13e74     24 4E 85 F1 | 	sub	fp, #36
13e78     74 53 B0 FD | 	call	#_hg010b_spin2_fill
13e7c                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
13e7c     58 00 90 FD | 	jmp	#LR__1551
13e80                 | LR__1550
13e80     A7 12 02 F6 | 	mov	arg01, fp
13e84     34 E0 BF FD | 	call	#_converttoint
13e88     FD 20 02 F6 | 	mov	local02, result1
13e8c     0C 4E 05 F1 | 	add	fp, #12
13e90     A7 12 02 F6 | 	mov	arg01, fp
13e94     0C 4E 85 F1 | 	sub	fp, #12
13e98     20 E0 BF FD | 	call	#_converttoint
13e9c     FD 22 02 F6 | 	mov	local03, result1
13ea0     18 4E 05 F1 | 	add	fp, #24
13ea4     A7 12 02 F6 | 	mov	arg01, fp
13ea8     18 4E 85 F1 | 	sub	fp, #24
13eac     0C E0 BF FD | 	call	#_converttoint
13eb0     FD 1E 02 F6 | 	mov	local01, result1
13eb4     24 4E 05 F1 | 	add	fp, #36
13eb8     A7 12 02 F6 | 	mov	arg01, fp
13ebc     24 4E 85 F1 | 	sub	fp, #36
13ec0     F8 DF BF FD | 	call	#_converttoint
13ec4     FD 18 02 F6 | 	mov	arg04, result1
13ec8     10 13 02 F6 | 	mov	arg01, local02
13ecc     11 15 02 F6 | 	mov	arg02, local03
13ed0     0F 17 02 F6 | 	mov	arg03, local01
13ed4     18 53 B0 FD | 	call	#_hg010b_spin2_fill
13ed8                 | LR__1551
13ed8     A7 F0 03 F6 | 	mov	ptra, fp
13edc     B2 00 A0 FD | 	call	#popregs_
13ee0                 | _do_fill_ret
13ee0     2D 00 64 FD | 	ret
13ee4                 | 
13ee4                 | ' 
13ee4                 | ' ' -------------------------- Draw a frane
13ee4                 | ' 
13ee4                 | ' sub do_frame
13ee4                 | _do_frame
13ee4     03 4A 05 F6 | 	mov	COUNT_, #3
13ee8     A8 00 A0 FD | 	call	#pushregs_
13eec     30 F0 07 F1 | 	add	ptra, #48
13ef0     04 5C BF FD | 	call	#_pop
13ef4     FD 1A 02 F6 | 	mov	arg05, result1
13ef8     FE 18 02 F6 | 	mov	arg04, result2
13efc     FF 16 02 F6 | 	mov	arg03, result3
13f00     24 4E 05 F1 | 	add	fp, #36
13f04     A7 1A 62 FC | 	wrlong	arg05, fp
13f08     04 4E 05 F1 | 	add	fp, #4
13f0c     A7 18 62 FC | 	wrlong	arg04, fp
13f10     04 4E 05 F1 | 	add	fp, #4
13f14     A7 16 62 FC | 	wrlong	arg03, fp
13f18     2C 4E 85 F1 | 	sub	fp, #44
13f1c     D8 5B BF FD | 	call	#_pop
13f20     FD 1A 02 F6 | 	mov	arg05, result1
13f24     FE 18 02 F6 | 	mov	arg04, result2
13f28     FF 16 02 F6 | 	mov	arg03, result3
13f2c     18 4E 05 F1 | 	add	fp, #24
13f30     A7 1A 62 FC | 	wrlong	arg05, fp
13f34     04 4E 05 F1 | 	add	fp, #4
13f38     A7 18 62 FC | 	wrlong	arg04, fp
13f3c     04 4E 05 F1 | 	add	fp, #4
13f40     A7 16 62 FC | 	wrlong	arg03, fp
13f44     20 4E 85 F1 | 	sub	fp, #32
13f48     AC 5B BF FD | 	call	#_pop
13f4c     FD 1A 02 F6 | 	mov	arg05, result1
13f50     FE 18 02 F6 | 	mov	arg04, result2
13f54     FF 1E 02 F6 | 	mov	local01, result3
13f58     0C 4E 05 F1 | 	add	fp, #12
13f5c     A7 1A 62 FC | 	wrlong	arg05, fp
13f60     04 4E 05 F1 | 	add	fp, #4
13f64     A7 18 62 FC | 	wrlong	arg04, fp
13f68     04 4E 05 F1 | 	add	fp, #4
13f6c     A7 1E 62 FC | 	wrlong	local01, fp
13f70     14 4E 85 F1 | 	sub	fp, #20
13f74     80 5B BF FD | 	call	#_pop
13f78     A7 FA 61 FC | 	wrlong	result1, fp
13f7c     04 4E 05 F1 | 	add	fp, #4
13f80     A7 FC 61 FC | 	wrlong	result2, fp
13f84     04 4E 05 F1 | 	add	fp, #4
13f88     A7 FE 61 FC | 	wrlong	result3, fp
13f8c                 | ' 
13f8c                 | ' t4=pop()
13f8c                 | ' t3=pop()
13f8c                 | ' t2=pop()
13f8c                 | ' t1=pop()
13f8c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
13f8c     FF 1A 02 F6 | 	mov	arg05, result3
13f90     08 4E 85 F1 | 	sub	fp, #8
13f94     1C 1A 0E F2 | 	cmp	arg05, #28 wz
13f98     08 4E 05 51 |  if_ne	add	fp, #8
13f9c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13fa0     08 4E 85 51 |  if_ne	sub	fp, #8
13fa4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13fa8     A8 00 90 5D |  if_ne	jmp	#LR__1560
13fac     14 4E 05 F1 | 	add	fp, #20
13fb0     A7 1E 02 FB | 	rdlong	local01, fp
13fb4     14 4E 85 F1 | 	sub	fp, #20
13fb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
13fbc     14 4E 05 51 |  if_ne	add	fp, #20
13fc0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13fc4     14 4E 85 51 |  if_ne	sub	fp, #20
13fc8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13fcc     84 00 90 5D |  if_ne	jmp	#LR__1560
13fd0     20 4E 05 F1 | 	add	fp, #32
13fd4     A7 1E 02 FB | 	rdlong	local01, fp
13fd8     20 4E 85 F1 | 	sub	fp, #32
13fdc     1C 1E 0E F2 | 	cmp	local01, #28 wz
13fe0     20 4E 05 51 |  if_ne	add	fp, #32
13fe4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13fe8     20 4E 85 51 |  if_ne	sub	fp, #32
13fec     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
13ff0     60 00 90 5D |  if_ne	jmp	#LR__1560
13ff4     2C 4E 05 F1 | 	add	fp, #44
13ff8     A7 1E 02 FB | 	rdlong	local01, fp
13ffc     2C 4E 85 F1 | 	sub	fp, #44
14000     1C 1E 0E F2 | 	cmp	local01, #28 wz
14004     2C 4E 05 51 |  if_ne	add	fp, #44
14008     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1400c     2C 4E 85 51 |  if_ne	sub	fp, #44
14010     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14014     3C 00 90 5D |  if_ne	jmp	#LR__1560
14018     A7 12 02 FB | 	rdlong	arg01, fp
1401c     0C 4E 05 F1 | 	add	fp, #12
14020     A7 14 02 FB | 	rdlong	arg02, fp
14024     0C 4E 05 F1 | 	add	fp, #12
14028     A7 16 02 FB | 	rdlong	arg03, fp
1402c     0C 4E 05 F1 | 	add	fp, #12
14030     A7 18 02 FB | 	rdlong	arg04, fp
14034     24 4E 85 F1 | 	sub	fp, #36
14038     56 00 00 FF 
1403c     AC E5 05 F1 | 	add	objptr, ##44460
14040     F2 1A 02 FB | 	rdlong	arg05, objptr
14044     56 00 00 FF 
14048     AC E5 85 F1 | 	sub	objptr, ##44460
1404c     8C 56 B0 FD | 	call	#_hg010b_spin2_frame
14050                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14050     6C 00 90 FD | 	jmp	#LR__1561
14054                 | LR__1560
14054     A7 12 02 F6 | 	mov	arg01, fp
14058     60 DE BF FD | 	call	#_converttoint
1405c     FD 20 02 F6 | 	mov	local02, result1
14060     0C 4E 05 F1 | 	add	fp, #12
14064     A7 12 02 F6 | 	mov	arg01, fp
14068     0C 4E 85 F1 | 	sub	fp, #12
1406c     4C DE BF FD | 	call	#_converttoint
14070     FD 22 02 F6 | 	mov	local03, result1
14074     18 4E 05 F1 | 	add	fp, #24
14078     A7 12 02 F6 | 	mov	arg01, fp
1407c     18 4E 85 F1 | 	sub	fp, #24
14080     38 DE BF FD | 	call	#_converttoint
14084     FD 1E 02 F6 | 	mov	local01, result1
14088     24 4E 05 F1 | 	add	fp, #36
1408c     A7 12 02 F6 | 	mov	arg01, fp
14090     24 4E 85 F1 | 	sub	fp, #36
14094     24 DE BF FD | 	call	#_converttoint
14098     FD 18 02 F6 | 	mov	arg04, result1
1409c     56 00 00 FF 
140a0     AC E5 05 F1 | 	add	objptr, ##44460
140a4     F2 1A 02 FB | 	rdlong	arg05, objptr
140a8     56 00 00 FF 
140ac     AC E5 85 F1 | 	sub	objptr, ##44460
140b0     10 13 02 F6 | 	mov	arg01, local02
140b4     11 15 02 F6 | 	mov	arg02, local03
140b8     0F 17 02 F6 | 	mov	arg03, local01
140bc     1C 56 B0 FD | 	call	#_hg010b_spin2_frame
140c0                 | LR__1561
140c0     A7 F0 03 F6 | 	mov	ptra, fp
140c4     B2 00 A0 FD | 	call	#popregs_
140c8                 | _do_frame_ret
140c8     2D 00 64 FD | 	ret
140cc                 | 
140cc                 | ' 
140cc                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
140cc                 | ' 
140cc                 | ' ' ------------------------- Print to the screem
140cc                 | ' 
140cc                 | ' sub do_print  
140cc                 | _do_print
140cc     0A 4A 05 F6 | 	mov	COUNT_, #10
140d0     A8 00 A0 FD | 	call	#pushregs_
140d4     00 24 06 F6 | 	mov	local04, #0
140d8     1C 5A BF FD | 	call	#_pop
140dc     FD 26 02 F6 | 	mov	local05, result1
140e0     FE 28 02 F6 | 	mov	local06, result2
140e4     FF 2A 02 F6 | 	mov	local07, result3
140e8     13 1F 02 F6 | 	mov	local01, local05
140ec     14 21 02 F6 | 	mov	local02, local06
140f0     15 23 02 F6 | 	mov	local03, local07
140f4                 | '  
140f4                 | ' r=0
140f4                 | ' t1=pop() 
140f4                 | ' 'print t1.result_type,t1.result.uresult
140f4                 | ' 
140f4                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
140f4     21 22 0E F2 | 	cmp	local03, #33 wz
140f8     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
140fc     20 00 90 5D |  if_ne	jmp	#LR__1570
14100     11 25 02 F6 | 	mov	local04, local03
14104     F0 59 BF FD | 	call	#_pop
14108     FD 26 02 F6 | 	mov	local05, result1
1410c     FE 28 02 F6 | 	mov	local06, result2
14110     FF 2A 02 F6 | 	mov	local07, result3
14114     13 1F 02 F6 | 	mov	local01, local05
14118     14 21 02 F6 | 	mov	local02, local06
1411c     15 23 02 F6 | 	mov	local03, local07
14120                 | LR__1570
14120                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14120     20 22 0E F2 | 	cmp	local03, #32 wz
14124     11 25 02 A6 |  if_e	mov	local04, local03
14128                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
14128     FF 22 0E F2 | 	cmp	local03, #255 wz
1412c     0C 00 90 5D |  if_ne	jmp	#LR__1571
14130     0F 13 02 F6 | 	mov	arg01, local01
14134     D0 35 B0 FD | 	call	#_printerror
14138     4C 04 90 FD | 	jmp	#LR__1589
1413c                 | LR__1571
1413c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
1413c     2B 22 0E F2 | 	cmp	local03, #43 wz
14140     14 00 90 5D |  if_ne	jmp	#LR__1572
14144     0F 13 02 F6 | 	mov	arg01, local01
14148     3C 99 BF FD | 	call	#_convertstring
1414c     FD 26 02 F6 | 	mov	local05, result1
14150     13 1F 02 F6 | 	mov	local01, local05
14154     1F 22 06 F6 | 	mov	local03, #31
14158                 | LR__1572
14158                 | ' 
14158                 | ' if r=print_mod_comma  then
14158     21 24 0E F2 | 	cmp	local04, #33 wz
1415c     AC 01 90 5D |  if_ne	jmp	#LR__1577
14160                 | '   if t1.result_type=result_int then print t1.result.iresult,
14160     1C 22 0E F2 | 	cmp	local03, #28 wz
14164     64 00 90 5D |  if_ne	jmp	#LR__1573
14168     00 12 06 F6 | 	mov	arg01, #0
1416c     DC C4 B0 FD | 	call	#__system___getiolock_0442
14170     FD 12 02 F6 | 	mov	arg01, result1
14174     A0 6B B0 FD | 	call	#__system___lockmem
14178     00 28 06 F6 | 	mov	local06, #0
1417c     00 12 06 F6 | 	mov	arg01, #0
14180     0F 15 02 F6 | 	mov	arg02, local01
14184     00 16 06 F6 | 	mov	arg03, #0
14188     0A 18 06 F6 | 	mov	arg04, #10
1418c     D4 78 B0 FD | 	call	#__system___basic_print_integer
14190     FD 2A 02 F6 | 	mov	local07, result1
14194     14 27 02 F6 | 	mov	local05, local06
14198     15 27 02 F1 | 	add	local05, local07
1419c     00 2C 06 F6 | 	mov	local08, #0
141a0     00 12 06 F6 | 	mov	arg01, #0
141a4     09 14 06 F6 | 	mov	arg02, #9
141a8     00 16 06 F6 | 	mov	arg03, #0
141ac     18 78 B0 FD | 	call	#__system___basic_print_char
141b0     FD 2E 02 F6 | 	mov	local09, result1
141b4     FD 26 02 F1 | 	add	local05, result1
141b8     00 12 06 F6 | 	mov	arg01, #0
141bc     8C C4 B0 FD | 	call	#__system___getiolock_0442
141c0     FD 00 68 FC | 	wrlong	#0, result1
141c4     00 FA 05 F6 | 	mov	result1, #0
141c8     00 30 06 F6 | 	mov	local10, #0
141cc                 | LR__1573
141cc                 | '   if t1.result_type=result_uint then print t1.result.uresult,
141cc     1D 22 0E F2 | 	cmp	local03, #29 wz
141d0     64 00 90 5D |  if_ne	jmp	#LR__1574
141d4     00 12 06 F6 | 	mov	arg01, #0
141d8     70 C4 B0 FD | 	call	#__system___getiolock_0442
141dc     FD 12 02 F6 | 	mov	arg01, result1
141e0     34 6B B0 FD | 	call	#__system___lockmem
141e4     00 28 06 F6 | 	mov	local06, #0
141e8     00 12 06 F6 | 	mov	arg01, #0
141ec     0F 15 02 F6 | 	mov	arg02, local01
141f0     00 16 06 F6 | 	mov	arg03, #0
141f4     0A 18 06 F6 | 	mov	arg04, #10
141f8     A8 78 B0 FD | 	call	#__system___basic_print_unsigned
141fc     FD 2A 02 F6 | 	mov	local07, result1
14200     14 27 02 F6 | 	mov	local05, local06
14204     15 27 02 F1 | 	add	local05, local07
14208     00 2C 06 F6 | 	mov	local08, #0
1420c     00 12 06 F6 | 	mov	arg01, #0
14210     09 14 06 F6 | 	mov	arg02, #9
14214     00 16 06 F6 | 	mov	arg03, #0
14218     AC 77 B0 FD | 	call	#__system___basic_print_char
1421c     FD 2E 02 F6 | 	mov	local09, result1
14220     FD 26 02 F1 | 	add	local05, result1
14224     00 12 06 F6 | 	mov	arg01, #0
14228     20 C4 B0 FD | 	call	#__system___getiolock_0442
1422c     FD 00 68 FC | 	wrlong	#0, result1
14230     00 FA 05 F6 | 	mov	result1, #0
14234     00 30 06 F6 | 	mov	local10, #0
14238                 | LR__1574
14238                 | '   if t1.result_type=result_float then print t1.result.fresult,
14238     1E 22 0E F2 | 	cmp	local03, #30 wz
1423c     64 00 90 5D |  if_ne	jmp	#LR__1575
14240     00 12 06 F6 | 	mov	arg01, #0
14244     04 C4 B0 FD | 	call	#__system___getiolock_0442
14248     FD 12 02 F6 | 	mov	arg01, result1
1424c     C8 6A B0 FD | 	call	#__system___lockmem
14250     00 28 06 F6 | 	mov	local06, #0
14254     00 12 06 F6 | 	mov	arg01, #0
14258     0F 15 02 F6 | 	mov	arg02, local01
1425c     00 16 06 F6 | 	mov	arg03, #0
14260     23 18 06 F6 | 	mov	arg04, #35
14264     EC 9B B0 FD | 	call	#__system___basic_print_float
14268     FD 2A 02 F6 | 	mov	local07, result1
1426c     14 27 02 F6 | 	mov	local05, local06
14270     15 27 02 F1 | 	add	local05, local07
14274     00 2C 06 F6 | 	mov	local08, #0
14278     00 12 06 F6 | 	mov	arg01, #0
1427c     09 14 06 F6 | 	mov	arg02, #9
14280     00 16 06 F6 | 	mov	arg03, #0
14284     40 77 B0 FD | 	call	#__system___basic_print_char
14288     FD 2E 02 F6 | 	mov	local09, result1
1428c     FD 26 02 F1 | 	add	local05, result1
14290     00 12 06 F6 | 	mov	arg01, #0
14294     B4 C3 B0 FD | 	call	#__system___getiolock_0442
14298     FD 00 68 FC | 	wrlong	#0, result1
1429c     00 FA 05 F6 | 	mov	result1, #0
142a0     00 30 06 F6 | 	mov	local10, #0
142a4                 | LR__1575
142a4                 | '   if t1.result_type=result_string then print t1.result.sresult,
142a4     1F 22 0E F2 | 	cmp	local03, #31 wz
142a8     60 00 90 5D |  if_ne	jmp	#LR__1576
142ac     00 12 06 F6 | 	mov	arg01, #0
142b0     98 C3 B0 FD | 	call	#__system___getiolock_0442
142b4     FD 12 02 F6 | 	mov	arg01, result1
142b8     5C 6A B0 FD | 	call	#__system___lockmem
142bc     00 28 06 F6 | 	mov	local06, #0
142c0     00 12 06 F6 | 	mov	arg01, #0
142c4     0F 15 02 F6 | 	mov	arg02, local01
142c8     00 16 06 F6 | 	mov	arg03, #0
142cc     50 77 B0 FD | 	call	#__system___basic_print_string
142d0     FD 2A 02 F6 | 	mov	local07, result1
142d4     14 27 02 F6 | 	mov	local05, local06
142d8     15 27 02 F1 | 	add	local05, local07
142dc     00 2C 06 F6 | 	mov	local08, #0
142e0     00 12 06 F6 | 	mov	arg01, #0
142e4     09 14 06 F6 | 	mov	arg02, #9
142e8     00 16 06 F6 | 	mov	arg03, #0
142ec     D8 76 B0 FD | 	call	#__system___basic_print_char
142f0     FD 2E 02 F6 | 	mov	local09, result1
142f4     FD 26 02 F1 | 	add	local05, result1
142f8     00 12 06 F6 | 	mov	arg01, #0
142fc     4C C3 B0 FD | 	call	#__system___getiolock_0442
14300     FD 00 68 FC | 	wrlong	#0, result1
14304     00 FA 05 F6 | 	mov	result1, #0
14308     00 30 06 F6 | 	mov	local10, #0
1430c                 | LR__1576
1430c                 | LR__1577
1430c                 | ' if r=print_mod_semicolon then 
1430c     22 24 0E F2 | 	cmp	local04, #34 wz
14310     1C 01 90 5D |  if_ne	jmp	#LR__1582
14314                 | '   if t1.result_type=result_int then print t1.result.iresult;
14314     1C 22 0E F2 | 	cmp	local03, #28 wz
14318     50 00 90 5D |  if_ne	jmp	#LR__1578
1431c     00 12 06 F6 | 	mov	arg01, #0
14320     28 C3 B0 FD | 	call	#__system___getiolock_0442
14324     FD 12 02 F6 | 	mov	arg01, result1
14328     EC 69 B0 FD | 	call	#__system___lockmem
1432c     00 28 06 F6 | 	mov	local06, #0
14330     00 30 06 F6 | 	mov	local10, #0
14334     0A 2C 06 F6 | 	mov	local08, #10
14338     00 12 06 F6 | 	mov	arg01, #0
1433c     0F 15 02 F6 | 	mov	arg02, local01
14340     00 16 06 F6 | 	mov	arg03, #0
14344     0A 18 06 F6 | 	mov	arg04, #10
14348     18 77 B0 FD | 	call	#__system___basic_print_integer
1434c     FD 2A 02 F6 | 	mov	local07, result1
14350     14 27 02 F6 | 	mov	local05, local06
14354     15 27 02 F1 | 	add	local05, local07
14358     00 12 06 F6 | 	mov	arg01, #0
1435c     EC C2 B0 FD | 	call	#__system___getiolock_0442
14360     FD 00 68 FC | 	wrlong	#0, result1
14364     00 FA 05 F6 | 	mov	result1, #0
14368     00 2E 06 F6 | 	mov	local09, #0
1436c                 | LR__1578
1436c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1436c     1D 22 0E F2 | 	cmp	local03, #29 wz
14370     50 00 90 5D |  if_ne	jmp	#LR__1579
14374     00 12 06 F6 | 	mov	arg01, #0
14378     D0 C2 B0 FD | 	call	#__system___getiolock_0442
1437c     FD 12 02 F6 | 	mov	arg01, result1
14380     94 69 B0 FD | 	call	#__system___lockmem
14384     00 28 06 F6 | 	mov	local06, #0
14388     00 30 06 F6 | 	mov	local10, #0
1438c     0A 2C 06 F6 | 	mov	local08, #10
14390     00 12 06 F6 | 	mov	arg01, #0
14394     0F 15 02 F6 | 	mov	arg02, local01
14398     00 16 06 F6 | 	mov	arg03, #0
1439c     0A 18 06 F6 | 	mov	arg04, #10
143a0     00 77 B0 FD | 	call	#__system___basic_print_unsigned
143a4     FD 2A 02 F6 | 	mov	local07, result1
143a8     14 27 02 F6 | 	mov	local05, local06
143ac     15 27 02 F1 | 	add	local05, local07
143b0     00 12 06 F6 | 	mov	arg01, #0
143b4     94 C2 B0 FD | 	call	#__system___getiolock_0442
143b8     FD 00 68 FC | 	wrlong	#0, result1
143bc     00 FA 05 F6 | 	mov	result1, #0
143c0     00 2E 06 F6 | 	mov	local09, #0
143c4                 | LR__1579
143c4                 | '   if t1.result_type=result_float then print t1.result.fresult;
143c4     1E 22 0E F2 | 	cmp	local03, #30 wz
143c8     30 00 90 5D |  if_ne	jmp	#LR__1580
143cc     00 12 06 F6 | 	mov	arg01, #0
143d0     78 C2 B0 FD | 	call	#__system___getiolock_0442
143d4     FD 12 02 F6 | 	mov	arg01, result1
143d8     3C 69 B0 FD | 	call	#__system___lockmem
143dc     00 12 06 F6 | 	mov	arg01, #0
143e0     0F 15 02 F6 | 	mov	arg02, local01
143e4     00 16 06 F6 | 	mov	arg03, #0
143e8     23 18 06 F6 | 	mov	arg04, #35
143ec     64 9A B0 FD | 	call	#__system___basic_print_float
143f0     00 12 06 F6 | 	mov	arg01, #0
143f4     54 C2 B0 FD | 	call	#__system___getiolock_0442
143f8     FD 00 68 FC | 	wrlong	#0, result1
143fc                 | LR__1580
143fc                 | '   if t1.result_type=result_string then print t1.result.sresult;
143fc     1F 22 0E F2 | 	cmp	local03, #31 wz
14400     2C 00 90 5D |  if_ne	jmp	#LR__1581
14404     00 12 06 F6 | 	mov	arg01, #0
14408     40 C2 B0 FD | 	call	#__system___getiolock_0442
1440c     FD 12 02 F6 | 	mov	arg01, result1
14410     04 69 B0 FD | 	call	#__system___lockmem
14414     00 12 06 F6 | 	mov	arg01, #0
14418     0F 15 02 F6 | 	mov	arg02, local01
1441c     00 16 06 F6 | 	mov	arg03, #0
14420     FC 75 B0 FD | 	call	#__system___basic_print_string
14424     00 12 06 F6 | 	mov	arg01, #0
14428     20 C2 B0 FD | 	call	#__system___getiolock_0442
1442c     FD 00 68 FC | 	wrlong	#0, result1
14430                 | LR__1581
14430                 | LR__1582
14430                 | ' if r=0 then 
14430     00 24 0E F2 | 	cmp	local04, #0 wz
14434     1C 01 90 5D |  if_ne	jmp	#LR__1587
14438                 | '   if t1.result_type=result_int then print t1.result.iresult
14438     1C 22 0E F2 | 	cmp	local03, #28 wz
1443c     40 00 90 5D |  if_ne	jmp	#LR__1583
14440     00 12 06 F6 | 	mov	arg01, #0
14444     04 C2 B0 FD | 	call	#__system___getiolock_0442
14448     FD 12 02 F6 | 	mov	arg01, result1
1444c     C8 68 B0 FD | 	call	#__system___lockmem
14450     00 12 06 F6 | 	mov	arg01, #0
14454     0F 15 02 F6 | 	mov	arg02, local01
14458     00 16 06 F6 | 	mov	arg03, #0
1445c     0A 18 06 F6 | 	mov	arg04, #10
14460     00 76 B0 FD | 	call	#__system___basic_print_integer
14464     00 12 06 F6 | 	mov	arg01, #0
14468     0A 14 06 F6 | 	mov	arg02, #10
1446c     00 16 06 F6 | 	mov	arg03, #0
14470     54 75 B0 FD | 	call	#__system___basic_print_char
14474     00 12 06 F6 | 	mov	arg01, #0
14478     D0 C1 B0 FD | 	call	#__system___getiolock_0442
1447c     FD 00 68 FC | 	wrlong	#0, result1
14480                 | LR__1583
14480                 | '   if t1.result_type=result_uint then print t1.result.uresult
14480     1D 22 0E F2 | 	cmp	local03, #29 wz
14484     40 00 90 5D |  if_ne	jmp	#LR__1584
14488     00 12 06 F6 | 	mov	arg01, #0
1448c     BC C1 B0 FD | 	call	#__system___getiolock_0442
14490     FD 12 02 F6 | 	mov	arg01, result1
14494     80 68 B0 FD | 	call	#__system___lockmem
14498     00 12 06 F6 | 	mov	arg01, #0
1449c     0F 15 02 F6 | 	mov	arg02, local01
144a0     00 16 06 F6 | 	mov	arg03, #0
144a4     0A 18 06 F6 | 	mov	arg04, #10
144a8     F8 75 B0 FD | 	call	#__system___basic_print_unsigned
144ac     00 12 06 F6 | 	mov	arg01, #0
144b0     0A 14 06 F6 | 	mov	arg02, #10
144b4     00 16 06 F6 | 	mov	arg03, #0
144b8     0C 75 B0 FD | 	call	#__system___basic_print_char
144bc     00 12 06 F6 | 	mov	arg01, #0
144c0     88 C1 B0 FD | 	call	#__system___getiolock_0442
144c4     FD 00 68 FC | 	wrlong	#0, result1
144c8                 | LR__1584
144c8                 | '   if t1.result_type=result_float then print t1.result.fresult
144c8     1E 22 0E F2 | 	cmp	local03, #30 wz
144cc     40 00 90 5D |  if_ne	jmp	#LR__1585
144d0     00 12 06 F6 | 	mov	arg01, #0
144d4     74 C1 B0 FD | 	call	#__system___getiolock_0442
144d8     FD 12 02 F6 | 	mov	arg01, result1
144dc     38 68 B0 FD | 	call	#__system___lockmem
144e0     00 12 06 F6 | 	mov	arg01, #0
144e4     0F 15 02 F6 | 	mov	arg02, local01
144e8     00 16 06 F6 | 	mov	arg03, #0
144ec     23 18 06 F6 | 	mov	arg04, #35
144f0     60 99 B0 FD | 	call	#__system___basic_print_float
144f4     00 12 06 F6 | 	mov	arg01, #0
144f8     0A 14 06 F6 | 	mov	arg02, #10
144fc     00 16 06 F6 | 	mov	arg03, #0
14500     C4 74 B0 FD | 	call	#__system___basic_print_char
14504     00 12 06 F6 | 	mov	arg01, #0
14508     40 C1 B0 FD | 	call	#__system___getiolock_0442
1450c     FD 00 68 FC | 	wrlong	#0, result1
14510                 | LR__1585
14510                 | '   if t1.result_type=result_string then print t1.result.sresult
14510     1F 22 0E F2 | 	cmp	local03, #31 wz
14514     3C 00 90 5D |  if_ne	jmp	#LR__1586
14518     00 12 06 F6 | 	mov	arg01, #0
1451c     2C C1 B0 FD | 	call	#__system___getiolock_0442
14520     FD 12 02 F6 | 	mov	arg01, result1
14524     F0 67 B0 FD | 	call	#__system___lockmem
14528     00 12 06 F6 | 	mov	arg01, #0
1452c     0F 15 02 F6 | 	mov	arg02, local01
14530     00 16 06 F6 | 	mov	arg03, #0
14534     E8 74 B0 FD | 	call	#__system___basic_print_string
14538     00 12 06 F6 | 	mov	arg01, #0
1453c     0A 14 06 F6 | 	mov	arg02, #10
14540     00 16 06 F6 | 	mov	arg03, #0
14544     80 74 B0 FD | 	call	#__system___basic_print_char
14548     00 12 06 F6 | 	mov	arg01, #0
1454c     FC C0 B0 FD | 	call	#__system___getiolock_0442
14550     FD 00 68 FC | 	wrlong	#0, result1
14554                 | LR__1586
14554                 | LR__1587
14554                 | ' if r=print_mod_empty then print
14554     20 24 0E F2 | 	cmp	local04, #32 wz
14558     2C 00 90 5D |  if_ne	jmp	#LR__1588
1455c     00 12 06 F6 | 	mov	arg01, #0
14560     E8 C0 B0 FD | 	call	#__system___getiolock_0442
14564     FD 12 02 F6 | 	mov	arg01, result1
14568     AC 67 B0 FD | 	call	#__system___lockmem
1456c     00 12 06 F6 | 	mov	arg01, #0
14570     0A 14 06 F6 | 	mov	arg02, #10
14574     00 16 06 F6 | 	mov	arg03, #0
14578     4C 74 B0 FD | 	call	#__system___basic_print_char
1457c     00 12 06 F6 | 	mov	arg01, #0
14580     C8 C0 B0 FD | 	call	#__system___getiolock_0442
14584     FD 00 68 FC | 	wrlong	#0, result1
14588                 | LR__1588
14588                 | LR__1589
14588     A7 F0 03 F6 | 	mov	ptra, fp
1458c     B2 00 A0 FD | 	call	#popregs_
14590                 | _do_print_ret
14590     2D 00 64 FD | 	ret
14594                 | 
14594                 | ' 
14594                 | ' 
14594                 | ' sub do_paper
14594                 | _do_paper
14594     03 4A 05 F6 | 	mov	COUNT_, #3
14598     A8 00 A0 FD | 	call	#pushregs_
1459c     58 55 BF FD | 	call	#_pop
145a0     FD 1E 02 F6 | 	mov	local01, result1
145a4     FE 20 02 F6 | 	mov	local02, result2
145a8     FF 22 02 F6 | 	mov	local03, result3
145ac                 | ' t1=pop() 
145ac                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
145ac     1E 22 0E F2 | 	cmp	local03, #30 wz
145b0     10 00 90 5D |  if_ne	jmp	#LR__1590
145b4     0F 13 02 F6 | 	mov	arg01, local01
145b8     00 14 06 F6 | 	mov	arg02, #0
145bc     44 97 B0 FD | 	call	#__system___float_tointeger
145c0     FD 1E 02 F6 | 	mov	local01, result1
145c4                 | LR__1590
145c4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
145c4     1F 22 0E F2 | 	cmp	local03, #31 wz
145c8     18 00 90 5D |  if_ne	jmp	#LR__1591
145cc     0F 13 02 F6 | 	mov	arg01, local01
145d0     50 9A B0 FD | 	call	#__system____builtin_atof
145d4     FD 12 02 F6 | 	mov	arg01, result1
145d8     00 14 06 F6 | 	mov	arg02, #0
145dc     24 97 B0 FD | 	call	#__system___float_tointeger
145e0     FD 1E 02 F6 | 	mov	local01, result1
145e4                 | LR__1591
145e4     56 00 00 FF 
145e8     BC E5 05 F1 | 	add	objptr, ##44476
145ec     F2 1E 62 FC | 	wrlong	local01, objptr
145f0     04 E4 05 F1 | 	add	objptr, #4
145f4     F2 12 02 FB | 	rdlong	arg01, objptr
145f8                 | ' 
145f8                 | ' write_color:=ff
145f8     56 00 00 FF 
145fc     83 E5 85 F1 | 	sub	objptr, ##44419
14600     F2 12 62 FC | 	wrlong	arg01, objptr
14604                 | ' write_background:=bb
14604     04 E4 05 F1 | 	add	objptr, #4
14608     F2 1E 62 FC | 	wrlong	local01, objptr
1460c     41 E4 85 F1 | 	sub	objptr, #65
14610     A7 F0 03 F6 | 	mov	ptra, fp
14614     B2 00 A0 FD | 	call	#popregs_
14618                 | _do_paper_ret
14618     2D 00 64 FD | 	ret
1461c                 | 
1461c                 | ' 
1461c                 | ' sub do_ink
1461c                 | _do_ink
1461c     03 4A 05 F6 | 	mov	COUNT_, #3
14620     A8 00 A0 FD | 	call	#pushregs_
14624     D0 54 BF FD | 	call	#_pop
14628     FD 1E 02 F6 | 	mov	local01, result1
1462c     FE 20 02 F6 | 	mov	local02, result2
14630     FF 22 02 F6 | 	mov	local03, result3
14634                 | ' t1=pop() 
14634                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14634     1E 22 0E F2 | 	cmp	local03, #30 wz
14638     10 00 90 5D |  if_ne	jmp	#LR__1600
1463c     0F 13 02 F6 | 	mov	arg01, local01
14640     00 14 06 F6 | 	mov	arg02, #0
14644     BC 96 B0 FD | 	call	#__system___float_tointeger
14648     FD 1E 02 F6 | 	mov	local01, result1
1464c                 | LR__1600
1464c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1464c     1F 22 0E F2 | 	cmp	local03, #31 wz
14650     18 00 90 5D |  if_ne	jmp	#LR__1601
14654     0F 13 02 F6 | 	mov	arg01, local01
14658     C8 99 B0 FD | 	call	#__system____builtin_atof
1465c     FD 12 02 F6 | 	mov	arg01, result1
14660     00 14 06 F6 | 	mov	arg02, #0
14664     9C 96 B0 FD | 	call	#__system___float_tointeger
14668     FD 1E 02 F6 | 	mov	local01, result1
1466c                 | LR__1601
1466c     56 00 00 FF 
14670     C0 E5 05 F1 | 	add	objptr, ##44480
14674     F2 1E 62 FC | 	wrlong	local01, objptr
14678     04 E4 85 F1 | 	sub	objptr, #4
1467c     F2 14 02 FB | 	rdlong	arg02, objptr
14680                 | ' 
14680                 | ' write_color:=ff
14680     56 00 00 FF 
14684     7F E5 85 F1 | 	sub	objptr, ##44415
14688     F2 1E 62 FC | 	wrlong	local01, objptr
1468c                 | ' write_background:=bb
1468c     04 E4 05 F1 | 	add	objptr, #4
14690     F2 14 62 FC | 	wrlong	arg02, objptr
14694     56 00 00 FF 
14698     7F E5 05 F1 | 	add	objptr, ##44415
1469c     F2 12 02 FB | 	rdlong	arg01, objptr
146a0     56 00 00 FF 
146a4     C0 E5 85 F1 | 	sub	objptr, ##44480
146a8     C8 42 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
146ac     A7 F0 03 F6 | 	mov	ptra, fp
146b0     B2 00 A0 FD | 	call	#popregs_
146b4                 | _do_ink_ret
146b4     2D 00 64 FD | 	ret
146b8                 | 
146b8                 | ' 
146b8                 | ' 
146b8                 | ' sub do_font
146b8                 | _do_font
146b8     03 4A 05 F6 | 	mov	COUNT_, #3
146bc     A8 00 A0 FD | 	call	#pushregs_
146c0     34 54 BF FD | 	call	#_pop
146c4     FD 1E 02 F6 | 	mov	local01, result1
146c8     FE 20 02 F6 | 	mov	local02, result2
146cc     FF 22 02 F6 | 	mov	local03, result3
146d0                 | ' t1=pop() 
146d0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
146d0     1E 22 0E F2 | 	cmp	local03, #30 wz
146d4     10 00 90 5D |  if_ne	jmp	#LR__1610
146d8     0F 13 02 F6 | 	mov	arg01, local01
146dc     00 14 06 F6 | 	mov	arg02, #0
146e0     20 96 B0 FD | 	call	#__system___float_tointeger
146e4     FD 1E 02 F6 | 	mov	local01, result1
146e8                 | LR__1610
146e8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
146e8     1F 22 0E F2 | 	cmp	local03, #31 wz
146ec     18 00 90 5D |  if_ne	jmp	#LR__1611
146f0     0F 13 02 F6 | 	mov	arg01, local01
146f4     2C 99 B0 FD | 	call	#__system____builtin_atof
146f8     FD 12 02 F6 | 	mov	arg01, result1
146fc     00 14 06 F6 | 	mov	arg02, #0
14700     00 96 B0 FD | 	call	#__system___float_tointeger
14704     FD 1E 02 F6 | 	mov	local01, result1
14708                 | LR__1611
14708     56 00 00 FF 
1470c     C4 E5 05 F1 | 	add	objptr, ##44484
14710     F2 1E 62 FC | 	wrlong	local01, objptr
14714     56 00 00 FF 
14718     C4 E5 85 F1 | 	sub	objptr, ##44484
1471c     02 1E 66 F0 | 	shl	local01, #2
14720     0F 13 02 F6 | 	mov	arg01, local01
14724     AC 51 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14728     A7 F0 03 F6 | 	mov	ptra, fp
1472c     B2 00 A0 FD | 	call	#popregs_
14730                 | _do_font_ret
14730     2D 00 64 FD | 	ret
14734                 | 
14734                 | ' 
14734                 | ' sub do_mode
14734                 | _do_mode
14734     04 4A 05 F6 | 	mov	COUNT_, #4
14738     A8 00 A0 FD | 	call	#pushregs_
1473c     B8 53 BF FD | 	call	#_pop
14740     FD 1E 02 F6 | 	mov	local01, result1
14744     FE 20 02 F6 | 	mov	local02, result2
14748     FF 22 02 F6 | 	mov	local03, result3
1474c                 | ' t1=pop() 
1474c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1474c     1E 22 0E F2 | 	cmp	local03, #30 wz
14750     10 00 90 5D |  if_ne	jmp	#LR__1620
14754     0F 13 02 F6 | 	mov	arg01, local01
14758     00 14 06 F6 | 	mov	arg02, #0
1475c     A4 95 B0 FD | 	call	#__system___float_tointeger
14760     FD 1E 02 F6 | 	mov	local01, result1
14764                 | LR__1620
14764                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14764     1F 22 0E F2 | 	cmp	local03, #31 wz
14768     18 00 90 5D |  if_ne	jmp	#LR__1621
1476c     0F 13 02 F6 | 	mov	arg01, local01
14770     B0 98 B0 FD | 	call	#__system____builtin_atof
14774     FD 12 02 F6 | 	mov	arg01, result1
14778     00 14 06 F6 | 	mov	arg02, #0
1477c     84 95 B0 FD | 	call	#__system___float_tointeger
14780     FD 1E 02 F6 | 	mov	local01, result1
14784                 | LR__1621
14784                 | ' select case t1.result.iresult
14784     0F 25 02 F6 | 	mov	local04, local01
14788     05 24 26 F3 | 	fle	local04, #5
1478c     30 24 62 FD | 	jmprel	local04
14790                 | LR__1622
14790     14 00 90 FD | 	jmp	#LR__1623
14794     A8 00 90 FD | 	jmp	#LR__1624
14798     10 01 90 FD | 	jmp	#LR__1625
1479c     78 01 90 FD | 	jmp	#LR__1626
147a0     E0 01 90 FD | 	jmp	#LR__1627
147a4     70 02 90 FD | 	jmp	#LR__1628
147a8                 | LR__1623
147a8     56 00 00 FF 
147ac     C4 E5 05 F1 | 	add	objptr, ##44484
147b0     F2 02 68 FC | 	wrlong	#1, objptr
147b4     04 E4 85 F1 | 	sub	objptr, #4
147b8     F2 34 69 FC | 	wrlong	#154, objptr
147bc     22 00 00 FF 
147c0     A4 E5 05 F1 | 	add	objptr, ##17828
147c4     F2 02 68 FC | 	wrlong	#1, objptr
147c8     22 00 00 FF 
147cc     A8 E5 85 F1 | 	sub	objptr, ##17832
147d0     F2 26 69 FC | 	wrlong	#147, objptr
147d4     56 00 00 FF 
147d8     BC E5 85 F1 | 	sub	objptr, ##44476
147dc     04 12 06 F6 | 	mov	arg01, #4
147e0     F0 50 B0 FD | 	call	#_hg010b_spin2_setfontfamily
147e4     56 00 00 FF 
147e8     C0 E5 05 F1 | 	add	objptr, ##44480
147ec     F2 12 02 FB | 	rdlong	arg01, objptr
147f0     04 E4 85 F1 | 	sub	objptr, #4
147f4     F2 14 02 FB | 	rdlong	arg02, objptr
147f8                 | ' 
147f8                 | ' write_color:=ff
147f8     56 00 00 FF 
147fc     7F E5 85 F1 | 	sub	objptr, ##44415
14800     F2 12 62 FC | 	wrlong	arg01, objptr
14804                 | ' write_background:=bb
14804     04 E4 05 F1 | 	add	objptr, #4
14808     F2 14 62 FC | 	wrlong	arg02, objptr
1480c     01 00 00 FF 
14810     00 EA 05 F1 | 	add	ptr__dat__, ##512
14814     7A 00 00 FF 
14818     C7 E5 05 F1 | 	add	objptr, ##62919
1481c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
14820     04 E4 85 F1 | 	sub	objptr, #4
14824     03 00 80 FF 
14828     F2 30 69 FC | 	wrlong	##1688, objptr
1482c     7B 00 00 FF 
14830     04 E4 85 F1 | 	sub	objptr, ##62980
14834     01 00 00 FF 
14838     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1483c     D8 01 90 FD | 	jmp	#LR__1628
14840                 | LR__1624
14840     56 00 00 FF 
14844     C4 E5 05 F1 | 	add	objptr, ##44484
14848     F2 00 68 FC | 	wrlong	#0, objptr
1484c     04 E4 85 F1 | 	sub	objptr, #4
14850     F2 2E 68 FC | 	wrlong	#23, objptr
14854     22 00 00 FF 
14858     A4 E5 05 F1 | 	add	objptr, ##17828
1485c     F2 00 68 FC | 	wrlong	#0, objptr
14860     22 00 00 FF 
14864     A8 E5 85 F1 | 	sub	objptr, ##17832
14868     F2 00 68 FC | 	wrlong	#0, objptr
1486c     56 00 00 FF 
14870     BC E5 85 F1 | 	sub	objptr, ##44476
14874     00 12 06 F6 | 	mov	arg01, #0
14878     58 50 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1487c     56 00 00 FF 
14880     C0 E5 05 F1 | 	add	objptr, ##44480
14884     F2 12 02 FB | 	rdlong	arg01, objptr
14888     04 E4 85 F1 | 	sub	objptr, #4
1488c     F2 14 02 FB | 	rdlong	arg02, objptr
14890                 | ' 
14890                 | ' write_color:=ff
14890     56 00 00 FF 
14894     7F E5 85 F1 | 	sub	objptr, ##44415
14898     F2 12 62 FC | 	wrlong	arg01, objptr
1489c                 | ' write_background:=bb
1489c     04 E4 05 F1 | 	add	objptr, #4
148a0     F2 14 62 FC | 	wrlong	arg02, objptr
148a4     41 E4 85 F1 | 	sub	objptr, #65
148a8     6C 01 90 FD | 	jmp	#LR__1628
148ac                 | LR__1625
148ac     56 00 00 FF 
148b0     C4 E5 05 F1 | 	add	objptr, ##44484
148b4     F2 00 68 FC | 	wrlong	#0, objptr
148b8     04 E4 85 F1 | 	sub	objptr, #4
148bc     F2 6A 69 FC | 	wrlong	#181, objptr
148c0     22 00 00 FF 
148c4     A4 E5 05 F1 | 	add	objptr, ##17828
148c8     F2 00 68 FC | 	wrlong	#0, objptr
148cc     22 00 00 FF 
148d0     A8 E5 85 F1 | 	sub	objptr, ##17832
148d4     F2 00 68 FC | 	wrlong	#0, objptr
148d8     56 00 00 FF 
148dc     BC E5 85 F1 | 	sub	objptr, ##44476
148e0     00 12 06 F6 | 	mov	arg01, #0
148e4     EC 4F B0 FD | 	call	#_hg010b_spin2_setfontfamily
148e8     56 00 00 FF 
148ec     C0 E5 05 F1 | 	add	objptr, ##44480
148f0     F2 12 02 FB | 	rdlong	arg01, objptr
148f4     04 E4 85 F1 | 	sub	objptr, #4
148f8     F2 14 02 FB | 	rdlong	arg02, objptr
148fc                 | ' 
148fc                 | ' write_color:=ff
148fc     56 00 00 FF 
14900     7F E5 85 F1 | 	sub	objptr, ##44415
14904     F2 12 62 FC | 	wrlong	arg01, objptr
14908                 | ' write_background:=bb
14908     04 E4 05 F1 | 	add	objptr, #4
1490c     F2 14 62 FC | 	wrlong	arg02, objptr
14910     41 E4 85 F1 | 	sub	objptr, #65
14914     00 01 90 FD | 	jmp	#LR__1628
14918                 | LR__1626
14918     56 00 00 FF 
1491c     C4 E5 05 F1 | 	add	objptr, ##44484
14920     F2 00 68 FC | 	wrlong	#0, objptr
14924     04 E4 85 F1 | 	sub	objptr, #4
14928     F2 1E 68 FC | 	wrlong	#15, objptr
1492c     22 00 00 FF 
14930     A4 E5 05 F1 | 	add	objptr, ##17828
14934     F2 00 68 FC | 	wrlong	#0, objptr
14938     22 00 00 FF 
1493c     A8 E5 85 F1 | 	sub	objptr, ##17832
14940     F2 00 68 FC | 	wrlong	#0, objptr
14944     56 00 00 FF 
14948     BC E5 85 F1 | 	sub	objptr, ##44476
1494c     00 12 06 F6 | 	mov	arg01, #0
14950     80 4F B0 FD | 	call	#_hg010b_spin2_setfontfamily
14954     56 00 00 FF 
14958     C0 E5 05 F1 | 	add	objptr, ##44480
1495c     F2 12 02 FB | 	rdlong	arg01, objptr
14960     04 E4 85 F1 | 	sub	objptr, #4
14964     F2 14 02 FB | 	rdlong	arg02, objptr
14968                 | ' 
14968                 | ' write_color:=ff
14968     56 00 00 FF 
1496c     7F E5 85 F1 | 	sub	objptr, ##44415
14970     F2 12 62 FC | 	wrlong	arg01, objptr
14974                 | ' write_background:=bb
14974     04 E4 05 F1 | 	add	objptr, #4
14978     F2 14 62 FC | 	wrlong	arg02, objptr
1497c     41 E4 85 F1 | 	sub	objptr, #65
14980     94 00 90 FD | 	jmp	#LR__1628
14984                 | LR__1627
14984     56 00 00 FF 
14988     C4 E5 05 F1 | 	add	objptr, ##44484
1498c     F2 02 68 FC | 	wrlong	#1, objptr
14990     04 E4 85 F1 | 	sub	objptr, #4
14994     F2 02 68 FC | 	wrlong	#1, objptr
14998     22 00 00 FF 
1499c     A4 E5 05 F1 | 	add	objptr, ##17828
149a0     F2 02 68 FC | 	wrlong	#1, objptr
149a4     22 00 00 FF 
149a8     A8 E5 85 F1 | 	sub	objptr, ##17832
149ac     F2 1C 68 FC | 	wrlong	#14, objptr
149b0     56 00 00 FF 
149b4     BC E5 85 F1 | 	sub	objptr, ##44476
149b8     04 12 06 F6 | 	mov	arg01, #4
149bc     14 4F B0 FD | 	call	#_hg010b_spin2_setfontfamily
149c0     56 00 00 FF 
149c4     C0 E5 05 F1 | 	add	objptr, ##44480
149c8     F2 12 02 FB | 	rdlong	arg01, objptr
149cc     04 E4 85 F1 | 	sub	objptr, #4
149d0     F2 14 02 FB | 	rdlong	arg02, objptr
149d4                 | ' 
149d4                 | ' write_color:=ff
149d4     56 00 00 FF 
149d8     7F E5 85 F1 | 	sub	objptr, ##44415
149dc     F2 12 62 FC | 	wrlong	arg01, objptr
149e0                 | ' write_background:=bb
149e0     04 E4 05 F1 | 	add	objptr, #4
149e4     F2 14 62 FC | 	wrlong	arg02, objptr
149e8     07 00 00 FF 
149ec     8A EB 05 F1 | 	add	ptr__dat__, ##3978
149f0     7A 00 00 FF 
149f4     C7 E5 05 F1 | 	add	objptr, ##62919
149f8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
149fc     04 E4 85 F1 | 	sub	objptr, #4
14a00     03 00 80 FF 
14a04     F2 30 69 FC | 	wrlong	##1688, objptr
14a08     7B 00 00 FF 
14a0c     04 E4 85 F1 | 	sub	objptr, ##62980
14a10     07 00 00 FF 
14a14     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
14a18                 | LR__1628
14a18     7B 00 00 FF 
14a1c     00 E4 05 F1 | 	add	objptr, ##62976
14a20     F2 1E 62 FC | 	wrlong	local01, objptr
14a24     24 00 00 FF 
14a28     40 E4 85 F1 | 	sub	objptr, ##18496
14a2c     F2 12 02 FB | 	rdlong	arg01, objptr
14a30     04 E4 85 F1 | 	sub	objptr, #4
14a34     F2 14 02 FB | 	rdlong	arg02, objptr
14a38     56 00 00 FF 
14a3c     BC E5 85 F1 | 	sub	objptr, ##44476
14a40     78 4F B0 FD | 	call	#_hg010b_spin2_cls
14a44     54 01 00 FF 
14a48     A4 12 06 F6 | 	mov	arg01, ##@LR__4729
14a4c                 | ' 
14a4c                 | ' write(text)
14a4c     28 52 B0 FD | 	call	#_hg010b_spin2_write
14a50                 | ' crlf
14a50     84 53 B0 FD | 	call	#_hg010b_spin2_crlf
14a54     18 00 00 FF 
14a58     4C EB 05 F1 | 	add	ptr__dat__, ##12620
14a5c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
14a60     18 00 00 FF 
14a64     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
14a68                 | ' 
14a68                 | ' write(text)
14a68     0C 52 B0 FD | 	call	#_hg010b_spin2_write
14a6c                 | ' crlf
14a6c     68 53 B0 FD | 	call	#_hg010b_spin2_crlf
14a70     79 00 00 FF 
14a74     60 E5 05 F1 | 	add	objptr, ##62304
14a78     F2 12 02 FB | 	rdlong	arg01, objptr
14a7c     79 00 00 FF 
14a80     60 E5 85 F1 | 	sub	objptr, ##62304
14a84                 | ' 
14a84                 | ' write(text)
14a84     F0 51 B0 FD | 	call	#_hg010b_spin2_write
14a88                 | ' crlf
14a88     4C 53 B0 FD | 	call	#_hg010b_spin2_crlf
14a8c     A7 F0 03 F6 | 	mov	ptra, fp
14a90     B2 00 A0 FD | 	call	#popregs_
14a94                 | _do_mode_ret
14a94     2D 00 64 FD | 	ret
14a98                 | 
14a98                 | ' 
14a98                 | ' sub do_setwave
14a98                 | _do_setwave
14a98     02 4A 05 F6 | 	mov	COUNT_, #2
14a9c     A8 00 A0 FD | 	call	#pushregs_
14aa0     18 F0 07 F1 | 	add	ptra, #24
14aa4     50 50 BF FD | 	call	#_pop
14aa8     FD 12 02 F6 | 	mov	arg01, result1
14aac     FE 1E 02 F6 | 	mov	local01, result2
14ab0     FF 20 02 F6 | 	mov	local02, result3
14ab4     A7 12 62 FC | 	wrlong	arg01, fp
14ab8     04 4E 05 F1 | 	add	fp, #4
14abc     A7 1E 62 FC | 	wrlong	local01, fp
14ac0     04 4E 05 F1 | 	add	fp, #4
14ac4     A7 20 62 FC | 	wrlong	local02, fp
14ac8     08 4E 85 F1 | 	sub	fp, #8
14acc     28 50 BF FD | 	call	#_pop
14ad0     FD 20 02 F6 | 	mov	local02, result1
14ad4     0C 4E 05 F1 | 	add	fp, #12
14ad8     A7 20 62 FC | 	wrlong	local02, fp
14adc     04 4E 05 F1 | 	add	fp, #4
14ae0     A7 FC 61 FC | 	wrlong	result2, fp
14ae4     04 4E 05 F1 | 	add	fp, #4
14ae8     A7 FE 61 FC | 	wrlong	result3, fp
14aec     08 4E 85 F1 | 	sub	fp, #8
14af0     A7 12 02 F6 | 	mov	arg01, fp
14af4     0C 4E 85 F1 | 	sub	fp, #12
14af8     C0 D3 BF FD | 	call	#_converttoint
14afc     FD 20 02 F6 | 	mov	local02, result1
14b00     10 1F 02 F6 | 	mov	local01, local02
14b04     01 1E 66 F0 | 	shl	local01, #1
14b08     10 1F 02 F1 | 	add	local01, local02
14b0c     03 1E 66 F0 | 	shl	local01, #3
14b10     34 00 00 FF 
14b14     CC E4 05 F1 | 	add	objptr, ##26828
14b18     F2 1E 02 F1 | 	add	local01, objptr
14b1c     A7 12 02 F6 | 	mov	arg01, fp
14b20     34 00 00 FF 
14b24     CC E4 85 F1 | 	sub	objptr, ##26828
14b28     90 D3 BF FD | 	call	#_converttoint
14b2c     04 1E 06 F1 | 	add	local01, #4
14b30     0F FB 41 FC | 	wrbyte	result1, local01
14b34     A7 F0 03 F6 | 	mov	ptra, fp
14b38     B2 00 A0 FD | 	call	#popregs_
14b3c                 | _do_setwave_ret
14b3c     2D 00 64 FD | 	ret
14b40                 | 
14b40                 | ' 
14b40                 | ' sub do_setsustain
14b40                 | _do_setsustain
14b40     02 4A 05 F6 | 	mov	COUNT_, #2
14b44     A8 00 A0 FD | 	call	#pushregs_
14b48     18 F0 07 F1 | 	add	ptra, #24
14b4c     A8 4F BF FD | 	call	#_pop
14b50     FD 12 02 F6 | 	mov	arg01, result1
14b54     FE 1E 02 F6 | 	mov	local01, result2
14b58     FF 20 02 F6 | 	mov	local02, result3
14b5c     A7 12 62 FC | 	wrlong	arg01, fp
14b60     04 4E 05 F1 | 	add	fp, #4
14b64     A7 1E 62 FC | 	wrlong	local01, fp
14b68     04 4E 05 F1 | 	add	fp, #4
14b6c     A7 20 62 FC | 	wrlong	local02, fp
14b70     08 4E 85 F1 | 	sub	fp, #8
14b74     80 4F BF FD | 	call	#_pop
14b78     FD 20 02 F6 | 	mov	local02, result1
14b7c     0C 4E 05 F1 | 	add	fp, #12
14b80     A7 20 62 FC | 	wrlong	local02, fp
14b84     04 4E 05 F1 | 	add	fp, #4
14b88     A7 FC 61 FC | 	wrlong	result2, fp
14b8c     04 4E 05 F1 | 	add	fp, #4
14b90     A7 FE 61 FC | 	wrlong	result3, fp
14b94     08 4E 85 F1 | 	sub	fp, #8
14b98     A7 12 02 F6 | 	mov	arg01, fp
14b9c     0C 4E 85 F1 | 	sub	fp, #12
14ba0     18 D3 BF FD | 	call	#_converttoint
14ba4     FD 20 02 F6 | 	mov	local02, result1
14ba8     10 1F 02 F6 | 	mov	local01, local02
14bac     01 1E 66 F0 | 	shl	local01, #1
14bb0     10 1F 02 F1 | 	add	local01, local02
14bb4     03 1E 66 F0 | 	shl	local01, #3
14bb8     34 00 00 FF 
14bbc     CC E4 05 F1 | 	add	objptr, ##26828
14bc0     F2 1E 02 F1 | 	add	local01, objptr
14bc4     A7 12 02 F6 | 	mov	arg01, fp
14bc8     34 00 00 FF 
14bcc     CC E4 85 F1 | 	sub	objptr, ##26828
14bd0     E8 D2 BF FD | 	call	#_converttoint
14bd4     14 1E 06 F1 | 	add	local01, #20
14bd8     0F FB 51 FC | 	wrword	result1, local01
14bdc     A7 F0 03 F6 | 	mov	ptra, fp
14be0     B2 00 A0 FD | 	call	#popregs_
14be4                 | _do_setsustain_ret
14be4     2D 00 64 FD | 	ret
14be8                 | 
14be8                 | ' 
14be8                 | ' sub do_setenv
14be8                 | _do_setenv
14be8     02 4A 05 F6 | 	mov	COUNT_, #2
14bec     A8 00 A0 FD | 	call	#pushregs_
14bf0     18 F0 07 F1 | 	add	ptra, #24
14bf4     00 4F BF FD | 	call	#_pop
14bf8     FD 12 02 F6 | 	mov	arg01, result1
14bfc     FE 1E 02 F6 | 	mov	local01, result2
14c00     FF 20 02 F6 | 	mov	local02, result3
14c04     A7 12 62 FC | 	wrlong	arg01, fp
14c08     04 4E 05 F1 | 	add	fp, #4
14c0c     A7 1E 62 FC | 	wrlong	local01, fp
14c10     04 4E 05 F1 | 	add	fp, #4
14c14     A7 20 62 FC | 	wrlong	local02, fp
14c18     08 4E 85 F1 | 	sub	fp, #8
14c1c     D8 4E BF FD | 	call	#_pop
14c20     FD 20 02 F6 | 	mov	local02, result1
14c24     0C 4E 05 F1 | 	add	fp, #12
14c28     A7 20 62 FC | 	wrlong	local02, fp
14c2c     04 4E 05 F1 | 	add	fp, #4
14c30     A7 FC 61 FC | 	wrlong	result2, fp
14c34     04 4E 05 F1 | 	add	fp, #4
14c38     A7 FE 61 FC | 	wrlong	result3, fp
14c3c     08 4E 85 F1 | 	sub	fp, #8
14c40     A7 12 02 F6 | 	mov	arg01, fp
14c44     0C 4E 85 F1 | 	sub	fp, #12
14c48     70 D2 BF FD | 	call	#_converttoint
14c4c     FD 20 02 F6 | 	mov	local02, result1
14c50     10 1F 02 F6 | 	mov	local01, local02
14c54     01 1E 66 F0 | 	shl	local01, #1
14c58     10 1F 02 F1 | 	add	local01, local02
14c5c     03 1E 66 F0 | 	shl	local01, #3
14c60     34 00 00 FF 
14c64     CC E4 05 F1 | 	add	objptr, ##26828
14c68     F2 1E 02 F1 | 	add	local01, objptr
14c6c     A7 12 02 F6 | 	mov	arg01, fp
14c70     34 00 00 FF 
14c74     CC E4 85 F1 | 	sub	objptr, ##26828
14c78     40 D2 BF FD | 	call	#_converttoint
14c7c     05 1E 06 F1 | 	add	local01, #5
14c80     0F FB 41 FC | 	wrbyte	result1, local01
14c84     A7 F0 03 F6 | 	mov	ptra, fp
14c88     B2 00 A0 FD | 	call	#popregs_
14c8c                 | _do_setenv_ret
14c8c     2D 00 64 FD | 	ret
14c90                 | 
14c90                 | ' 
14c90                 | ' sub do_setdelay
14c90                 | _do_setdelay
14c90     02 4A 05 F6 | 	mov	COUNT_, #2
14c94     A8 00 A0 FD | 	call	#pushregs_
14c98     18 F0 07 F1 | 	add	ptra, #24
14c9c     58 4E BF FD | 	call	#_pop
14ca0     FD 12 02 F6 | 	mov	arg01, result1
14ca4     FE 1E 02 F6 | 	mov	local01, result2
14ca8     FF 20 02 F6 | 	mov	local02, result3
14cac     A7 12 62 FC | 	wrlong	arg01, fp
14cb0     04 4E 05 F1 | 	add	fp, #4
14cb4     A7 1E 62 FC | 	wrlong	local01, fp
14cb8     04 4E 05 F1 | 	add	fp, #4
14cbc     A7 20 62 FC | 	wrlong	local02, fp
14cc0     08 4E 85 F1 | 	sub	fp, #8
14cc4     30 4E BF FD | 	call	#_pop
14cc8     FD 20 02 F6 | 	mov	local02, result1
14ccc     0C 4E 05 F1 | 	add	fp, #12
14cd0     A7 20 62 FC | 	wrlong	local02, fp
14cd4     04 4E 05 F1 | 	add	fp, #4
14cd8     A7 FC 61 FC | 	wrlong	result2, fp
14cdc     04 4E 05 F1 | 	add	fp, #4
14ce0     A7 FE 61 FC | 	wrlong	result3, fp
14ce4     08 4E 85 F1 | 	sub	fp, #8
14ce8     A7 12 02 F6 | 	mov	arg01, fp
14cec     0C 4E 85 F1 | 	sub	fp, #12
14cf0     C8 D1 BF FD | 	call	#_converttoint
14cf4     FD 20 02 F6 | 	mov	local02, result1
14cf8     10 1F 02 F6 | 	mov	local01, local02
14cfc     01 1E 66 F0 | 	shl	local01, #1
14d00     10 1F 02 F1 | 	add	local01, local02
14d04     03 1E 66 F0 | 	shl	local01, #3
14d08     34 00 00 FF 
14d0c     CC E4 05 F1 | 	add	objptr, ##26828
14d10     F2 1E 02 F1 | 	add	local01, objptr
14d14     A7 12 02 F6 | 	mov	arg01, fp
14d18     34 00 00 FF 
14d1c     CC E4 85 F1 | 	sub	objptr, ##26828
14d20     98 D1 BF FD | 	call	#_converttoint
14d24     06 1E 06 F1 | 	add	local01, #6
14d28     0F FB 51 FC | 	wrword	result1, local01
14d2c     A7 F0 03 F6 | 	mov	ptra, fp
14d30     B2 00 A0 FD | 	call	#popregs_
14d34                 | _do_setdelay_ret
14d34     2D 00 64 FD | 	ret
14d38                 | 
14d38                 | ' 
14d38                 | ' sub do_setlen
14d38                 | _do_setlen
14d38     02 4A 05 F6 | 	mov	COUNT_, #2
14d3c     A8 00 A0 FD | 	call	#pushregs_
14d40     18 F0 07 F1 | 	add	ptra, #24
14d44     B0 4D BF FD | 	call	#_pop
14d48     FD 12 02 F6 | 	mov	arg01, result1
14d4c     FE 1E 02 F6 | 	mov	local01, result2
14d50     FF 20 02 F6 | 	mov	local02, result3
14d54     A7 12 62 FC | 	wrlong	arg01, fp
14d58     04 4E 05 F1 | 	add	fp, #4
14d5c     A7 1E 62 FC | 	wrlong	local01, fp
14d60     04 4E 05 F1 | 	add	fp, #4
14d64     A7 20 62 FC | 	wrlong	local02, fp
14d68     08 4E 85 F1 | 	sub	fp, #8
14d6c     88 4D BF FD | 	call	#_pop
14d70     FD 20 02 F6 | 	mov	local02, result1
14d74     0C 4E 05 F1 | 	add	fp, #12
14d78     A7 20 62 FC | 	wrlong	local02, fp
14d7c     04 4E 05 F1 | 	add	fp, #4
14d80     A7 FC 61 FC | 	wrlong	result2, fp
14d84     04 4E 05 F1 | 	add	fp, #4
14d88     A7 FE 61 FC | 	wrlong	result3, fp
14d8c     08 4E 85 F1 | 	sub	fp, #8
14d90     A7 12 02 F6 | 	mov	arg01, fp
14d94     0C 4E 85 F1 | 	sub	fp, #12
14d98     20 D1 BF FD | 	call	#_converttoint
14d9c     FD 20 02 F6 | 	mov	local02, result1
14da0     10 1F 02 F6 | 	mov	local01, local02
14da4     01 1E 66 F0 | 	shl	local01, #1
14da8     10 1F 02 F1 | 	add	local01, local02
14dac     03 1E 66 F0 | 	shl	local01, #3
14db0     34 00 00 FF 
14db4     CC E4 05 F1 | 	add	objptr, ##26828
14db8     F2 1E 02 F1 | 	add	local01, objptr
14dbc     A7 12 02 F6 | 	mov	arg01, fp
14dc0     34 00 00 FF 
14dc4     CC E4 85 F1 | 	sub	objptr, ##26828
14dc8     9C D1 BF FD | 	call	#_converttofloat
14dcc     08 1E 06 F1 | 	add	local01, #8
14dd0     0F FB 61 FC | 	wrlong	result1, local01
14dd4     A7 F0 03 F6 | 	mov	ptra, fp
14dd8     B2 00 A0 FD | 	call	#popregs_
14ddc                 | _do_setlen_ret
14ddc     2D 00 64 FD | 	ret
14de0                 | 
14de0                 | ' 
14de0                 | ' sub do_setvol
14de0                 | _do_setvol
14de0     02 4A 05 F6 | 	mov	COUNT_, #2
14de4     A8 00 A0 FD | 	call	#pushregs_
14de8     18 F0 07 F1 | 	add	ptra, #24
14dec     08 4D BF FD | 	call	#_pop
14df0     FD 12 02 F6 | 	mov	arg01, result1
14df4     FE 1E 02 F6 | 	mov	local01, result2
14df8     FF 20 02 F6 | 	mov	local02, result3
14dfc     A7 12 62 FC | 	wrlong	arg01, fp
14e00     04 4E 05 F1 | 	add	fp, #4
14e04     A7 1E 62 FC | 	wrlong	local01, fp
14e08     04 4E 05 F1 | 	add	fp, #4
14e0c     A7 20 62 FC | 	wrlong	local02, fp
14e10     08 4E 85 F1 | 	sub	fp, #8
14e14     E0 4C BF FD | 	call	#_pop
14e18     FD 20 02 F6 | 	mov	local02, result1
14e1c     0C 4E 05 F1 | 	add	fp, #12
14e20     A7 20 62 FC | 	wrlong	local02, fp
14e24     04 4E 05 F1 | 	add	fp, #4
14e28     A7 FC 61 FC | 	wrlong	result2, fp
14e2c     04 4E 05 F1 | 	add	fp, #4
14e30     A7 FE 61 FC | 	wrlong	result3, fp
14e34     08 4E 85 F1 | 	sub	fp, #8
14e38     A7 12 02 F6 | 	mov	arg01, fp
14e3c     0C 4E 85 F1 | 	sub	fp, #12
14e40     78 D0 BF FD | 	call	#_converttoint
14e44     FD 20 02 F6 | 	mov	local02, result1
14e48     10 1F 02 F6 | 	mov	local01, local02
14e4c     01 1E 66 F0 | 	shl	local01, #1
14e50     10 1F 02 F1 | 	add	local01, local02
14e54     03 1E 66 F0 | 	shl	local01, #3
14e58     34 00 00 FF 
14e5c     CC E4 05 F1 | 	add	objptr, ##26828
14e60     F2 1E 02 F1 | 	add	local01, objptr
14e64     A7 12 02 F6 | 	mov	arg01, fp
14e68     34 00 00 FF 
14e6c     CC E4 85 F1 | 	sub	objptr, ##26828
14e70     F4 D0 BF FD | 	call	#_converttofloat
14e74     0C 1E 06 F1 | 	add	local01, #12
14e78     0F FB 61 FC | 	wrlong	result1, local01
14e7c     A7 F0 03 F6 | 	mov	ptra, fp
14e80     B2 00 A0 FD | 	call	#popregs_
14e84                 | _do_setvol_ret
14e84     2D 00 64 FD | 	ret
14e88                 | 
14e88                 | ' 
14e88                 | ' sub do_setpan
14e88                 | _do_setpan
14e88     02 4A 05 F6 | 	mov	COUNT_, #2
14e8c     A8 00 A0 FD | 	call	#pushregs_
14e90     18 F0 07 F1 | 	add	ptra, #24
14e94     60 4C BF FD | 	call	#_pop
14e98     FD 12 02 F6 | 	mov	arg01, result1
14e9c     FE 1E 02 F6 | 	mov	local01, result2
14ea0     FF 20 02 F6 | 	mov	local02, result3
14ea4     A7 12 62 FC | 	wrlong	arg01, fp
14ea8     04 4E 05 F1 | 	add	fp, #4
14eac     A7 1E 62 FC | 	wrlong	local01, fp
14eb0     04 4E 05 F1 | 	add	fp, #4
14eb4     A7 20 62 FC | 	wrlong	local02, fp
14eb8     08 4E 85 F1 | 	sub	fp, #8
14ebc     38 4C BF FD | 	call	#_pop
14ec0     FD 20 02 F6 | 	mov	local02, result1
14ec4     0C 4E 05 F1 | 	add	fp, #12
14ec8     A7 20 62 FC | 	wrlong	local02, fp
14ecc     04 4E 05 F1 | 	add	fp, #4
14ed0     A7 FC 61 FC | 	wrlong	result2, fp
14ed4     04 4E 05 F1 | 	add	fp, #4
14ed8     A7 FE 61 FC | 	wrlong	result3, fp
14edc     08 4E 85 F1 | 	sub	fp, #8
14ee0     A7 12 02 F6 | 	mov	arg01, fp
14ee4     0C 4E 85 F1 | 	sub	fp, #12
14ee8     D0 CF BF FD | 	call	#_converttoint
14eec     FD 20 02 F6 | 	mov	local02, result1
14ef0     10 1F 02 F6 | 	mov	local01, local02
14ef4     01 1E 66 F0 | 	shl	local01, #1
14ef8     10 1F 02 F1 | 	add	local01, local02
14efc     03 1E 66 F0 | 	shl	local01, #3
14f00     34 00 00 FF 
14f04     CC E4 05 F1 | 	add	objptr, ##26828
14f08     F2 1E 02 F1 | 	add	local01, objptr
14f0c     A7 12 02 F6 | 	mov	arg01, fp
14f10     34 00 00 FF 
14f14     CC E4 85 F1 | 	sub	objptr, ##26828
14f18     4C D0 BF FD | 	call	#_converttofloat
14f1c     10 1E 06 F1 | 	add	local01, #16
14f20     0F FB 61 FC | 	wrlong	result1, local01
14f24     A7 F0 03 F6 | 	mov	ptra, fp
14f28     B2 00 A0 FD | 	call	#popregs_
14f2c                 | _do_setpan_ret
14f2c     2D 00 64 FD | 	ret
14f30                 | 
14f30                 | ' 
14f30                 | ' 
14f30                 | ' sub do_pinwrite
14f30                 | _do_pinwrite
14f30     01 4A 05 F6 | 	mov	COUNT_, #1
14f34     A8 00 A0 FD | 	call	#pushregs_
14f38     18 F0 07 F1 | 	add	ptra, #24
14f3c     B8 4B BF FD | 	call	#_pop
14f40     FD 14 02 F6 | 	mov	arg02, result1
14f44     FE 12 02 F6 | 	mov	arg01, result2
14f48     FF 1E 02 F6 | 	mov	local01, result3
14f4c     A7 14 62 FC | 	wrlong	arg02, fp
14f50     04 4E 05 F1 | 	add	fp, #4
14f54     A7 12 62 FC | 	wrlong	arg01, fp
14f58     04 4E 05 F1 | 	add	fp, #4
14f5c     A7 1E 62 FC | 	wrlong	local01, fp
14f60     08 4E 85 F1 | 	sub	fp, #8
14f64     90 4B BF FD | 	call	#_pop
14f68     FF 1E 02 F6 | 	mov	local01, result3
14f6c     0C 4E 05 F1 | 	add	fp, #12
14f70     A7 FA 61 FC | 	wrlong	result1, fp
14f74     04 4E 05 F1 | 	add	fp, #4
14f78     A7 FC 61 FC | 	wrlong	result2, fp
14f7c     04 4E 05 F1 | 	add	fp, #4
14f80     A7 1E 62 FC | 	wrlong	local01, fp
14f84     08 4E 85 F1 | 	sub	fp, #8
14f88     A7 12 02 F6 | 	mov	arg01, fp
14f8c     0C 4E 85 F1 | 	sub	fp, #12
14f90     28 CF BF FD | 	call	#_converttoint
14f94     FD 1E 02 F6 | 	mov	local01, result1
14f98     A7 12 02 F6 | 	mov	arg01, fp
14f9c     1C CF BF FD | 	call	#_converttoint
14fa0     FD 14 02 F6 | 	mov	arg02, result1
14fa4     0F 13 02 F6 | 	mov	arg01, local01
14fa8     20 5F B0 FD | 	call	#__system___pinwrite
14fac     A7 F0 03 F6 | 	mov	ptra, fp
14fb0     B2 00 A0 FD | 	call	#popregs_
14fb4                 | _do_pinwrite_ret
14fb4     2D 00 64 FD | 	ret
14fb8                 | 
14fb8                 | ' 
14fb8                 | ' sub do_pinfloat
14fb8                 | _do_pinfloat
14fb8     00 4A 05 F6 | 	mov	COUNT_, #0
14fbc     A8 00 A0 FD | 	call	#pushregs_
14fc0     0C F0 07 F1 | 	add	ptra, #12
14fc4     30 4B BF FD | 	call	#_pop
14fc8     A7 FA 61 FC | 	wrlong	result1, fp
14fcc     04 4E 05 F1 | 	add	fp, #4
14fd0     A7 FC 61 FC | 	wrlong	result2, fp
14fd4     04 4E 05 F1 | 	add	fp, #4
14fd8     A7 FE 61 FC | 	wrlong	result3, fp
14fdc     08 4E 85 F1 | 	sub	fp, #8
14fe0     A7 12 02 F6 | 	mov	arg01, fp
14fe4     D4 CE BF FD | 	call	#_converttoint
14fe8     50 FA 61 FD | 	fltl	result1
14fec     A7 F0 03 F6 | 	mov	ptra, fp
14ff0     B2 00 A0 FD | 	call	#popregs_
14ff4                 | _do_pinfloat_ret
14ff4     2D 00 64 FD | 	ret
14ff8                 | 
14ff8                 | ' 
14ff8                 | ' sub do_pinlo
14ff8                 | _do_pinlo
14ff8     00 4A 05 F6 | 	mov	COUNT_, #0
14ffc     A8 00 A0 FD | 	call	#pushregs_
15000     0C F0 07 F1 | 	add	ptra, #12
15004     F0 4A BF FD | 	call	#_pop
15008     A7 FA 61 FC | 	wrlong	result1, fp
1500c     04 4E 05 F1 | 	add	fp, #4
15010     A7 FC 61 FC | 	wrlong	result2, fp
15014     04 4E 05 F1 | 	add	fp, #4
15018     A7 FE 61 FC | 	wrlong	result3, fp
1501c     08 4E 85 F1 | 	sub	fp, #8
15020     A7 12 02 F6 | 	mov	arg01, fp
15024     94 CE BF FD | 	call	#_converttoint
15028     58 FA 61 FD | 	drvl	result1
1502c     A7 F0 03 F6 | 	mov	ptra, fp
15030     B2 00 A0 FD | 	call	#popregs_
15034                 | _do_pinlo_ret
15034     2D 00 64 FD | 	ret
15038                 | 
15038                 | ' 
15038                 | ' sub do_pinhi
15038                 | _do_pinhi
15038     00 4A 05 F6 | 	mov	COUNT_, #0
1503c     A8 00 A0 FD | 	call	#pushregs_
15040     0C F0 07 F1 | 	add	ptra, #12
15044     B0 4A BF FD | 	call	#_pop
15048     A7 FA 61 FC | 	wrlong	result1, fp
1504c     04 4E 05 F1 | 	add	fp, #4
15050     A7 FC 61 FC | 	wrlong	result2, fp
15054     04 4E 05 F1 | 	add	fp, #4
15058     A7 FE 61 FC | 	wrlong	result3, fp
1505c     08 4E 85 F1 | 	sub	fp, #8
15060     A7 12 02 F6 | 	mov	arg01, fp
15064     54 CE BF FD | 	call	#_converttoint
15068     59 FA 61 FD | 	drvh	result1
1506c     A7 F0 03 F6 | 	mov	ptra, fp
15070     B2 00 A0 FD | 	call	#popregs_
15074                 | _do_pinhi_ret
15074     2D 00 64 FD | 	ret
15078                 | 
15078                 | ' 
15078                 | ' sub do_pintoggle
15078                 | _do_pintoggle
15078     00 4A 05 F6 | 	mov	COUNT_, #0
1507c     A8 00 A0 FD | 	call	#pushregs_
15080     0C F0 07 F1 | 	add	ptra, #12
15084     70 4A BF FD | 	call	#_pop
15088     A7 FA 61 FC | 	wrlong	result1, fp
1508c     04 4E 05 F1 | 	add	fp, #4
15090     A7 FC 61 FC | 	wrlong	result2, fp
15094     04 4E 05 F1 | 	add	fp, #4
15098     A7 FE 61 FC | 	wrlong	result3, fp
1509c     08 4E 85 F1 | 	sub	fp, #8
150a0     A7 12 02 F6 | 	mov	arg01, fp
150a4     14 CE BF FD | 	call	#_converttoint
150a8     5F FA 61 FD | 	drvnot	result1
150ac     A7 F0 03 F6 | 	mov	ptra, fp
150b0     B2 00 A0 FD | 	call	#popregs_
150b4                 | _do_pintoggle_ret
150b4     2D 00 64 FD | 	ret
150b8                 | 
150b8                 | ' 
150b8                 | ' 
150b8                 | ' sub do_pinstart
150b8                 | _do_pinstart
150b8     03 4A 05 F6 | 	mov	COUNT_, #3
150bc     A8 00 A0 FD | 	call	#pushregs_
150c0     30 F0 07 F1 | 	add	ptra, #48
150c4     30 4A BF FD | 	call	#_pop
150c8     FD 16 02 F6 | 	mov	arg03, result1
150cc     FE 14 02 F6 | 	mov	arg02, result2
150d0     FF 18 02 F6 | 	mov	arg04, result3
150d4     A7 16 62 FC | 	wrlong	arg03, fp
150d8     04 4E 05 F1 | 	add	fp, #4
150dc     A7 14 62 FC | 	wrlong	arg02, fp
150e0     04 4E 05 F1 | 	add	fp, #4
150e4     A7 18 62 FC | 	wrlong	arg04, fp
150e8     08 4E 85 F1 | 	sub	fp, #8
150ec     08 4A BF FD | 	call	#_pop
150f0     FD 16 02 F6 | 	mov	arg03, result1
150f4     FE 14 02 F6 | 	mov	arg02, result2
150f8     FF 18 02 F6 | 	mov	arg04, result3
150fc     0C 4E 05 F1 | 	add	fp, #12
15100     A7 16 62 FC | 	wrlong	arg03, fp
15104     04 4E 05 F1 | 	add	fp, #4
15108     A7 14 62 FC | 	wrlong	arg02, fp
1510c     04 4E 05 F1 | 	add	fp, #4
15110     A7 18 62 FC | 	wrlong	arg04, fp
15114     14 4E 85 F1 | 	sub	fp, #20
15118     DC 49 BF FD | 	call	#_pop
1511c     FD 16 02 F6 | 	mov	arg03, result1
15120     FE 14 02 F6 | 	mov	arg02, result2
15124     FF 18 02 F6 | 	mov	arg04, result3
15128     18 4E 05 F1 | 	add	fp, #24
1512c     A7 16 62 FC | 	wrlong	arg03, fp
15130     04 4E 05 F1 | 	add	fp, #4
15134     A7 14 62 FC | 	wrlong	arg02, fp
15138     04 4E 05 F1 | 	add	fp, #4
1513c     A7 18 62 FC | 	wrlong	arg04, fp
15140     20 4E 85 F1 | 	sub	fp, #32
15144     B0 49 BF FD | 	call	#_pop
15148     FF 16 02 F6 | 	mov	arg03, result3
1514c     24 4E 05 F1 | 	add	fp, #36
15150     A7 FA 61 FC | 	wrlong	result1, fp
15154     04 4E 05 F1 | 	add	fp, #4
15158     A7 FC 61 FC | 	wrlong	result2, fp
1515c     04 4E 05 F1 | 	add	fp, #4
15160     A7 16 62 FC | 	wrlong	arg03, fp
15164     08 4E 85 F1 | 	sub	fp, #8
15168     A7 12 02 F6 | 	mov	arg01, fp
1516c     24 4E 85 F1 | 	sub	fp, #36
15170     48 CD BF FD | 	call	#_converttoint
15174     FD 1E 02 F6 | 	mov	local01, result1
15178     18 4E 05 F1 | 	add	fp, #24
1517c     A7 12 02 F6 | 	mov	arg01, fp
15180     18 4E 85 F1 | 	sub	fp, #24
15184     34 CD BF FD | 	call	#_converttoint
15188     FD 20 02 F6 | 	mov	local02, result1
1518c     0C 4E 05 F1 | 	add	fp, #12
15190     A7 12 02 F6 | 	mov	arg01, fp
15194     0C 4E 85 F1 | 	sub	fp, #12
15198     20 CD BF FD | 	call	#_converttoint
1519c     FD 22 02 F6 | 	mov	local03, result1
151a0     A7 12 02 F6 | 	mov	arg01, fp
151a4     14 CD BF FD | 	call	#_converttoint
151a8     40 1E 62 FD | 	dirl	local01
151ac     0F 21 02 FC | 	wrpin	local02, local01
151b0     0F 23 12 FC | 	wxpin	local03, local01
151b4     0F FB 21 FC | 	wypin	result1, local01
151b8     41 1E 62 FD | 	dirh	local01
151bc     A7 F0 03 F6 | 	mov	ptra, fp
151c0     B2 00 A0 FD | 	call	#popregs_
151c4                 | _do_pinstart_ret
151c4     2D 00 64 FD | 	ret
151c8                 | 
151c8                 | ' 
151c8                 | ' 
151c8                 | ' sub do_wrpin
151c8                 | _do_wrpin
151c8     01 4A 05 F6 | 	mov	COUNT_, #1
151cc     A8 00 A0 FD | 	call	#pushregs_
151d0     18 F0 07 F1 | 	add	ptra, #24
151d4     20 49 BF FD | 	call	#_pop
151d8     FD 14 02 F6 | 	mov	arg02, result1
151dc     FE 12 02 F6 | 	mov	arg01, result2
151e0     FF 1E 02 F6 | 	mov	local01, result3
151e4     A7 14 62 FC | 	wrlong	arg02, fp
151e8     04 4E 05 F1 | 	add	fp, #4
151ec     A7 12 62 FC | 	wrlong	arg01, fp
151f0     04 4E 05 F1 | 	add	fp, #4
151f4     A7 1E 62 FC | 	wrlong	local01, fp
151f8     08 4E 85 F1 | 	sub	fp, #8
151fc     F8 48 BF FD | 	call	#_pop
15200     FF 1E 02 F6 | 	mov	local01, result3
15204     0C 4E 05 F1 | 	add	fp, #12
15208     A7 FA 61 FC | 	wrlong	result1, fp
1520c     04 4E 05 F1 | 	add	fp, #4
15210     A7 FC 61 FC | 	wrlong	result2, fp
15214     04 4E 05 F1 | 	add	fp, #4
15218     A7 1E 62 FC | 	wrlong	local01, fp
1521c     08 4E 85 F1 | 	sub	fp, #8
15220     A7 12 02 F6 | 	mov	arg01, fp
15224     0C 4E 85 F1 | 	sub	fp, #12
15228     90 CC BF FD | 	call	#_converttoint
1522c     FD 1E 02 F6 | 	mov	local01, result1
15230     A7 12 02 F6 | 	mov	arg01, fp
15234     84 CC BF FD | 	call	#_converttoint
15238     0F FB 01 FC | 	wrpin	result1, local01
1523c     A7 F0 03 F6 | 	mov	ptra, fp
15240     B2 00 A0 FD | 	call	#popregs_
15244                 | _do_wrpin_ret
15244     2D 00 64 FD | 	ret
15248                 | 
15248                 | ' 
15248                 | ' sub do_wxpin
15248                 | _do_wxpin
15248     01 4A 05 F6 | 	mov	COUNT_, #1
1524c     A8 00 A0 FD | 	call	#pushregs_
15250     18 F0 07 F1 | 	add	ptra, #24
15254     A0 48 BF FD | 	call	#_pop
15258     FD 14 02 F6 | 	mov	arg02, result1
1525c     FE 12 02 F6 | 	mov	arg01, result2
15260     FF 1E 02 F6 | 	mov	local01, result3
15264     A7 14 62 FC | 	wrlong	arg02, fp
15268     04 4E 05 F1 | 	add	fp, #4
1526c     A7 12 62 FC | 	wrlong	arg01, fp
15270     04 4E 05 F1 | 	add	fp, #4
15274     A7 1E 62 FC | 	wrlong	local01, fp
15278     08 4E 85 F1 | 	sub	fp, #8
1527c     78 48 BF FD | 	call	#_pop
15280     FF 1E 02 F6 | 	mov	local01, result3
15284     0C 4E 05 F1 | 	add	fp, #12
15288     A7 FA 61 FC | 	wrlong	result1, fp
1528c     04 4E 05 F1 | 	add	fp, #4
15290     A7 FC 61 FC | 	wrlong	result2, fp
15294     04 4E 05 F1 | 	add	fp, #4
15298     A7 1E 62 FC | 	wrlong	local01, fp
1529c     08 4E 85 F1 | 	sub	fp, #8
152a0     A7 12 02 F6 | 	mov	arg01, fp
152a4     0C 4E 85 F1 | 	sub	fp, #12
152a8     10 CC BF FD | 	call	#_converttoint
152ac     FD 1E 02 F6 | 	mov	local01, result1
152b0     A7 12 02 F6 | 	mov	arg01, fp
152b4     04 CC BF FD | 	call	#_converttoint
152b8     0F FB 11 FC | 	wxpin	result1, local01
152bc     A7 F0 03 F6 | 	mov	ptra, fp
152c0     B2 00 A0 FD | 	call	#popregs_
152c4                 | _do_wxpin_ret
152c4     2D 00 64 FD | 	ret
152c8                 | 
152c8                 | ' 
152c8                 | ' sub do_wypin
152c8                 | _do_wypin
152c8     01 4A 05 F6 | 	mov	COUNT_, #1
152cc     A8 00 A0 FD | 	call	#pushregs_
152d0     18 F0 07 F1 | 	add	ptra, #24
152d4     20 48 BF FD | 	call	#_pop
152d8     FD 14 02 F6 | 	mov	arg02, result1
152dc     FE 12 02 F6 | 	mov	arg01, result2
152e0     FF 1E 02 F6 | 	mov	local01, result3
152e4     A7 14 62 FC | 	wrlong	arg02, fp
152e8     04 4E 05 F1 | 	add	fp, #4
152ec     A7 12 62 FC | 	wrlong	arg01, fp
152f0     04 4E 05 F1 | 	add	fp, #4
152f4     A7 1E 62 FC | 	wrlong	local01, fp
152f8     08 4E 85 F1 | 	sub	fp, #8
152fc     F8 47 BF FD | 	call	#_pop
15300     FF 1E 02 F6 | 	mov	local01, result3
15304     0C 4E 05 F1 | 	add	fp, #12
15308     A7 FA 61 FC | 	wrlong	result1, fp
1530c     04 4E 05 F1 | 	add	fp, #4
15310     A7 FC 61 FC | 	wrlong	result2, fp
15314     04 4E 05 F1 | 	add	fp, #4
15318     A7 1E 62 FC | 	wrlong	local01, fp
1531c     08 4E 85 F1 | 	sub	fp, #8
15320     A7 12 02 F6 | 	mov	arg01, fp
15324     0C 4E 85 F1 | 	sub	fp, #12
15328     90 CB BF FD | 	call	#_converttoint
1532c     FD 1E 02 F6 | 	mov	local01, result1
15330     A7 12 02 F6 | 	mov	arg01, fp
15334     84 CB BF FD | 	call	#_converttoint
15338     0F FB 21 FC | 	wypin	result1, local01
1533c     A7 F0 03 F6 | 	mov	ptra, fp
15340     B2 00 A0 FD | 	call	#popregs_
15344                 | _do_wypin_ret
15344     2D 00 64 FD | 	ret
15348                 | 
15348                 | ' 
15348                 | ' sub do_position
15348                 | _do_position
15348     01 4A 05 F6 | 	mov	COUNT_, #1
1534c     A8 00 A0 FD | 	call	#pushregs_
15350     18 F0 07 F1 | 	add	ptra, #24
15354     A0 47 BF FD | 	call	#_pop
15358     FD 14 02 F6 | 	mov	arg02, result1
1535c     FE 12 02 F6 | 	mov	arg01, result2
15360     FF 1E 02 F6 | 	mov	local01, result3
15364     A7 14 62 FC | 	wrlong	arg02, fp
15368     04 4E 05 F1 | 	add	fp, #4
1536c     A7 12 62 FC | 	wrlong	arg01, fp
15370     04 4E 05 F1 | 	add	fp, #4
15374     A7 1E 62 FC | 	wrlong	local01, fp
15378     08 4E 85 F1 | 	sub	fp, #8
1537c     78 47 BF FD | 	call	#_pop
15380     FF 1E 02 F6 | 	mov	local01, result3
15384     0C 4E 05 F1 | 	add	fp, #12
15388     A7 FA 61 FC | 	wrlong	result1, fp
1538c     04 4E 05 F1 | 	add	fp, #4
15390     A7 FC 61 FC | 	wrlong	result2, fp
15394     04 4E 05 F1 | 	add	fp, #4
15398     A7 1E 62 FC | 	wrlong	local01, fp
1539c     08 4E 85 F1 | 	sub	fp, #8
153a0     A7 12 02 F6 | 	mov	arg01, fp
153a4     0C 4E 85 F1 | 	sub	fp, #12
153a8     10 CB BF FD | 	call	#_converttoint
153ac     FD 1E 02 F6 | 	mov	local01, result1
153b0     A7 12 02 F6 | 	mov	arg01, fp
153b4     04 CB BF FD | 	call	#_converttoint
153b8     FD 14 02 F6 | 	mov	arg02, result1
153bc     0F 13 02 F6 | 	mov	arg01, local01
153c0     50 45 B0 FD | 	call	#_hg010b_spin2_setcursorpos
153c4     A7 F0 03 F6 | 	mov	ptra, fp
153c8     B2 00 A0 FD | 	call	#popregs_
153cc                 | _do_position_ret
153cc     2D 00 64 FD | 	ret
153d0                 | 
153d0                 | ' 
153d0                 | ' sub do_waitms
153d0                 | _do_waitms
153d0     01 4A 05 F6 | 	mov	COUNT_, #1
153d4     A8 00 A0 FD | 	call	#pushregs_
153d8     18 F0 07 F1 | 	add	ptra, #24
153dc     18 47 BF FD | 	call	#_pop
153e0     A7 FA 61 FC | 	wrlong	result1, fp
153e4     04 4E 05 F1 | 	add	fp, #4
153e8     A7 FC 61 FC | 	wrlong	result2, fp
153ec     04 4E 05 F1 | 	add	fp, #4
153f0     A7 FE 61 FC | 	wrlong	result3, fp
153f4                 | ' 
153f4                 | ' t1=pop() 'value
153f4                 | ' 
153f4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
153f4     08 4E 85 F1 | 	sub	fp, #8
153f8     1C FE 0D F2 | 	cmp	result3, #28 wz
153fc     08 4E 05 51 |  if_ne	add	fp, #8
15400     A7 12 02 5B |  if_ne	rdlong	arg01, fp
15404     08 4E 85 51 |  if_ne	sub	fp, #8
15408     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1540c     A7 12 02 AB |  if_e	rdlong	arg01, fp
15410     0C 4E 05 A1 |  if_e	add	fp, #12
15414     A7 12 62 AC |  if_e	wrlong	arg01, fp
15418     0C 4E 85 A1 |  if_e	sub	fp, #12
1541c     14 00 90 AD |  if_e	jmp	#LR__1630
15420     A7 12 02 F6 | 	mov	arg01, fp
15424     94 CA BF FD | 	call	#_converttoint
15428     0C 4E 05 F1 | 	add	fp, #12
1542c     A7 FA 61 FC | 	wrlong	result1, fp
15430     0C 4E 85 F1 | 	sub	fp, #12
15434                 | LR__1630
15434                 | ' if t<0 then return
15434     0C 4E 05 F1 | 	add	fp, #12
15438     A7 12 02 FB | 	rdlong	arg01, fp
1543c     0C 4E 85 F1 | 	sub	fp, #12
15440     00 12 56 F2 | 	cmps	arg01, #0 wc
15444     B8 00 90 CD |  if_b	jmp	#LR__1635
15448                 | ' if t < 5000 then 
15448     0C 4E 05 F1 | 	add	fp, #12
1544c     A7 12 02 FB | 	rdlong	arg01, fp
15450     0C 4E 85 F1 | 	sub	fp, #12
15454     09 00 00 FF 
15458     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1545c     14 00 90 3D |  if_ae	jmp	#LR__1631
15460     0C 4E 05 F1 | 	add	fp, #12
15464     A7 12 02 FB | 	rdlong	arg01, fp
15468     0C 4E 85 F1 | 	sub	fp, #12
1546c     9C 5B B0 FD | 	call	#__system___waitms
15470     8C 00 90 FD | 	jmp	#LR__1634
15474                 | LR__1631
15474     10 4E 05 F1 | 	add	fp, #16
15478     A7 02 68 FC | 	wrlong	#1, fp
1547c     04 4E 85 F1 | 	sub	fp, #4
15480     A7 12 02 FB | 	rdlong	arg01, fp
15484     09 13 52 F6 | 	abs	arg01, arg01 wc
15488     09 00 00 FF 
1548c     88 13 16 FD | 	qdiv	arg01, ##5000
15490                 | '   for i=1 to t/5000
15490     0C 4E 85 F1 | 	sub	fp, #12
15494     18 1E 62 FD | 	getqx	local01
15498     0F 1F 82 F6 | 	negc	local01, local01
1549c     01 1E 06 F1 | 	add	local01, #1
154a0                 | LR__1632
154a0     10 4E 05 F1 | 	add	fp, #16
154a4     A7 12 02 FB | 	rdlong	arg01, fp
154a8     10 4E 85 F1 | 	sub	fp, #16
154ac     0F 13 52 F2 | 	cmps	arg01, local01 wc
154b0     28 00 90 3D |  if_ae	jmp	#LR__1633
154b4     0C 4E 05 F1 | 	add	fp, #12
154b8     A7 12 02 FB | 	rdlong	arg01, fp
154bc     0C 4E 85 F1 | 	sub	fp, #12
154c0     48 5B B0 FD | 	call	#__system___waitms
154c4     10 4E 05 F1 | 	add	fp, #16
154c8     A7 12 02 FB | 	rdlong	arg01, fp
154cc     01 12 06 F1 | 	add	arg01, #1
154d0     A7 12 62 FC | 	wrlong	arg01, fp
154d4     10 4E 85 F1 | 	sub	fp, #16
154d8     C4 FF 9F FD | 	jmp	#LR__1632
154dc                 | LR__1633
154dc     0C 4E 05 F1 | 	add	fp, #12
154e0     A7 1E 02 FB | 	rdlong	local01, fp
154e4     0F 1F 52 F6 | 	abs	local01, local01 wc
154e8     09 00 00 FF 
154ec     88 1F 16 FD | 	qdiv	local01, ##5000
154f0     0C 4E 85 F1 | 	sub	fp, #12
154f4     19 1E 62 FD | 	getqy	local01
154f8     0F 13 82 F6 | 	negc	arg01, local01
154fc     0C 5B B0 FD | 	call	#__system___waitms
15500                 | LR__1634
15500                 | LR__1635
15500     A7 F0 03 F6 | 	mov	ptra, fp
15504     B2 00 A0 FD | 	call	#popregs_
15508                 | _do_waitms_ret
15508     2D 00 64 FD | 	ret
1550c                 | 
1550c                 | ' 
1550c                 | ' sub do_waitvbl
1550c                 | _do_waitvbl
1550c     01 12 06 F6 | 	mov	arg01, #1
15510     38 44 B0 FD | 	call	#_hg010b_spin2_waitvbl
15514                 | _do_waitvbl_ret
15514     2D 00 64 FD | 	ret
15518                 | 
15518                 | ' 
15518                 | ' sub do_waitclock
15518                 | _do_waitclock
15518     7A 00 00 FF 
1551c     F8 E5 05 F1 | 	add	objptr, ##62968
15520     F2 00 02 FB | 	rdlong	_var01, objptr
15524                 | ' c=hkcnt
15524                 | ' do: loop until hkcnt<>c
15524                 | LR__1640
15524     F2 02 02 FB | 	rdlong	_var02, objptr
15528     00 03 0A F2 | 	cmp	_var02, _var01 wz
1552c     F4 FF 9F AD |  if_e	jmp	#LR__1640
15530     7A 00 00 FF 
15534     F8 E5 85 F1 | 	sub	objptr, ##62968
15538                 | _do_waitclock_ret
15538     2D 00 64 FD | 	ret
1553c                 | 
1553c                 | ' 
1553c                 | ' sub do_dir
1553c                 | _do_dir
1553c     03 4A 05 F6 | 	mov	COUNT_, #3
15540     A8 00 A0 FD | 	call	#pushregs_
15544     54 01 00 FF 
15548     A5 12 06 F6 | 	mov	arg01, ##@LR__4730
1554c     54 5E B0 FD | 	call	#__system___chdir
15550                 | ' chdir("/sd/bas")       ' set working directory
15550                 | ' print "Working directory: "; currentdir$ 
15550     00 12 06 F6 | 	mov	arg01, #0
15554     F4 B0 B0 FD | 	call	#__system___getiolock_0442
15558     FD 12 02 F6 | 	mov	arg01, result1
1555c     B8 57 B0 FD | 	call	#__system___lockmem
15560     54 01 00 FF 
15564     AD 14 06 F6 | 	mov	arg02, ##@LR__4731
15568     00 12 06 F6 | 	mov	arg01, #0
1556c     00 16 06 F6 | 	mov	arg03, #0
15570     AC 64 B0 FD | 	call	#__system___basic_print_string
15574     72 00 00 FF 
15578     18 E4 05 F1 | 	add	objptr, ##58392
1557c     F2 14 02 FB | 	rdlong	arg02, objptr
15580     72 00 00 FF 
15584     18 E4 85 F1 | 	sub	objptr, ##58392
15588     00 12 06 F6 | 	mov	arg01, #0
1558c     00 16 06 F6 | 	mov	arg03, #0
15590     8C 64 B0 FD | 	call	#__system___basic_print_string
15594     00 12 06 F6 | 	mov	arg01, #0
15598     0A 14 06 F6 | 	mov	arg02, #10
1559c     00 16 06 F6 | 	mov	arg03, #0
155a0     24 64 B0 FD | 	call	#__system___basic_print_char
155a4     00 12 06 F6 | 	mov	arg01, #0
155a8     A0 B0 B0 FD | 	call	#__system___getiolock_0442
155ac     FD 00 68 FC | 	wrlong	#0, result1
155b0     54 01 00 FF 
155b4     C1 12 06 F6 | 	mov	arg01, ##@LR__4732
155b8     10 14 06 F6 | 	mov	arg02, #16
155bc     C4 B1 B0 FD | 	call	#__system___basic_dir
155c0     FD 1E 02 F6 | 	mov	local01, result1
155c4                 | ' 
155c4                 | ' filename=dir$("*", fbDirectory)
155c4                 | ' while filename <> "" and filename <> nil
155c4                 | LR__1650
155c4     00 20 06 F6 | 	mov	local02, #0
155c8     54 01 00 FF 
155cc     C3 14 06 F6 | 	mov	arg02, ##@LR__4733
155d0     0F 13 02 F6 | 	mov	arg01, local01
155d4     68 57 B0 FD | 	call	#__system___string_cmp
155d8     00 FA 0D F2 | 	cmp	result1, #0 wz
155dc     00 20 26 56 |  if_ne	not	local02, #0
155e0     00 22 06 F6 | 	mov	local03, #0
155e4     0F 13 02 F6 | 	mov	arg01, local01
155e8     00 14 06 F6 | 	mov	arg02, #0
155ec     50 57 B0 FD | 	call	#__system___string_cmp
155f0     00 FA 0D F2 | 	cmp	result1, #0 wz
155f4     00 22 26 56 |  if_ne	not	local03, #0
155f8     11 21 CA F7 | 	test	local02, local03 wz
155fc     64 00 90 AD |  if_e	jmp	#LR__1651
15600                 | '   print "[dir] ";filename
15600     00 12 06 F6 | 	mov	arg01, #0
15604     44 B0 B0 FD | 	call	#__system___getiolock_0442
15608     FD 12 02 F6 | 	mov	arg01, result1
1560c     08 57 B0 FD | 	call	#__system___lockmem
15610     54 01 00 FF 
15614     C4 14 06 F6 | 	mov	arg02, ##@LR__4734
15618     00 12 06 F6 | 	mov	arg01, #0
1561c     00 16 06 F6 | 	mov	arg03, #0
15620     FC 63 B0 FD | 	call	#__system___basic_print_string
15624     00 12 06 F6 | 	mov	arg01, #0
15628     0F 15 02 F6 | 	mov	arg02, local01
1562c     00 16 06 F6 | 	mov	arg03, #0
15630     EC 63 B0 FD | 	call	#__system___basic_print_string
15634     00 12 06 F6 | 	mov	arg01, #0
15638     0A 14 06 F6 | 	mov	arg02, #10
1563c     00 16 06 F6 | 	mov	arg03, #0
15640     84 63 B0 FD | 	call	#__system___basic_print_char
15644     00 12 06 F6 | 	mov	arg01, #0
15648     00 B0 B0 FD | 	call	#__system___getiolock_0442
1564c     FD 00 68 FC | 	wrlong	#0, result1
15650     00 12 06 F6 | 	mov	arg01, #0
15654     00 14 06 F6 | 	mov	arg02, #0
15658     28 B1 B0 FD | 	call	#__system___basic_dir
1565c     FD 1E 02 F6 | 	mov	local01, result1
15660     60 FF 9F FD | 	jmp	#LR__1650
15664                 | LR__1651
15664     54 01 00 FF 
15668     CB 12 06 F6 | 	mov	arg01, ##@LR__4735
1566c     21 14 06 F6 | 	mov	arg02, #33
15670     10 B1 B0 FD | 	call	#__system___basic_dir
15674     FD 1E 02 F6 | 	mov	local01, result1
15678                 | ' 
15678                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
15678                 | ' do while filename <> "" and filename <> nil
15678                 | LR__1652
15678     00 20 06 F6 | 	mov	local02, #0
1567c     54 01 00 FF 
15680     CD 14 06 F6 | 	mov	arg02, ##@LR__4736
15684     0F 13 02 F6 | 	mov	arg01, local01
15688     B4 56 B0 FD | 	call	#__system___string_cmp
1568c     00 FA 0D F2 | 	cmp	result1, #0 wz
15690     00 20 26 56 |  if_ne	not	local02, #0
15694     00 22 06 F6 | 	mov	local03, #0
15698     0F 13 02 F6 | 	mov	arg01, local01
1569c     00 14 06 F6 | 	mov	arg02, #0
156a0     9C 56 B0 FD | 	call	#__system___string_cmp
156a4     00 FA 0D F2 | 	cmp	result1, #0 wz
156a8     00 22 26 56 |  if_ne	not	local03, #0
156ac     11 21 CA F7 | 	test	local02, local03 wz
156b0     4C 01 90 AD |  if_e	jmp	#LR__1656
156b4                 | '   print filename
156b4     00 12 06 F6 | 	mov	arg01, #0
156b8     90 AF B0 FD | 	call	#__system___getiolock_0442
156bc     FD 12 02 F6 | 	mov	arg01, result1
156c0     54 56 B0 FD | 	call	#__system___lockmem
156c4     00 12 06 F6 | 	mov	arg01, #0
156c8     0F 15 02 F6 | 	mov	arg02, local01
156cc     00 16 06 F6 | 	mov	arg03, #0
156d0     4C 63 B0 FD | 	call	#__system___basic_print_string
156d4     00 12 06 F6 | 	mov	arg01, #0
156d8     0A 14 06 F6 | 	mov	arg02, #10
156dc     00 16 06 F6 | 	mov	arg03, #0
156e0     E4 62 B0 FD | 	call	#__system___basic_print_char
156e4     00 12 06 F6 | 	mov	arg01, #0
156e8     60 AF B0 FD | 	call	#__system___getiolock_0442
156ec     FD 00 68 FC | 	wrlong	#0, result1
156f0     00 12 06 F6 | 	mov	arg01, #0
156f4     00 14 06 F6 | 	mov	arg02, #0
156f8     88 B0 B0 FD | 	call	#__system___basic_dir
156fc     FD 1E 02 F6 | 	mov	local01, result1
15700                 | '   filename = dir$()      ' continue scan
15700                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
15700                 | ' return cursor_y
15700     3A E4 05 F1 | 	add	objptr, #58
15704     F2 FA C1 FA | 	rdbyte	result1, objptr
15708     3A E4 85 F1 | 	sub	objptr, #58
1570c     22 FA 0D F2 | 	cmp	result1, #34 wz
15710     64 FF 9F 5D |  if_ne	jmp	#LR__1652
15714                 | '     print "-----more, press any key";
15714     00 12 06 F6 | 	mov	arg01, #0
15718     30 AF B0 FD | 	call	#__system___getiolock_0442
1571c     FD 12 02 F6 | 	mov	arg01, result1
15720     F4 55 B0 FD | 	call	#__system___lockmem
15724     54 01 00 FF 
15728     CE 14 06 F6 | 	mov	arg02, ##@LR__4737
1572c     00 12 06 F6 | 	mov	arg01, #0
15730     00 16 06 F6 | 	mov	arg03, #0
15734     E8 62 B0 FD | 	call	#__system___basic_print_string
15738     00 12 06 F6 | 	mov	arg01, #0
1573c     0C AF B0 FD | 	call	#__system___getiolock_0442
15740     FD 00 68 FC | 	wrlong	#0, result1
15744                 | '     do 
15744                 | LR__1653
15744     F8 4D B0 FD | 	call	#_usbnew_spin2_get_key
15748     00 FA 0D F2 | 	cmp	result1, #0 wz
1574c     F4 FF 9F 5D |  if_ne	jmp	#LR__1653
15750                 | '     do
15750                 | LR__1654
15750     EC 4D B0 FD | 	call	#_usbnew_spin2_get_key
15754     00 FA 0D F2 | 	cmp	result1, #0 wz
15758     F4 FF 9F AD |  if_e	jmp	#LR__1654
1575c                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
1575c     79 00 00 FF 
15760     64 E5 05 F1 | 	add	objptr, ##62308
15764     F2 20 02 FB | 	rdlong	local02, objptr
15768     79 00 00 FF 
1576c     64 E5 85 F1 | 	sub	objptr, ##62308
15770     01 20 0E F2 | 	cmp	local02, #1 wz
15774     3C 00 90 5D |  if_ne	jmp	#LR__1655
15778     7B 00 00 FF 
1577c     08 E4 05 F1 | 	add	objptr, ##62984
15780     F2 14 02 FB | 	rdlong	arg02, objptr
15784     04 E4 85 F1 | 	sub	objptr, #4
15788     F2 1A 02 FB | 	rdlong	arg05, objptr
1578c     07 12 06 F6 | 	mov	arg01, #7
15790     56 00 00 FF 
15794     44 16 06 F6 | 	mov	arg03, ##44100
15798     0E 18 C6 F9 | 	decod	arg04, #14
1579c     01 1C 66 F6 | 	neg	arg06, #1
157a0     6F 00 00 FF 
157a4     44 E5 85 F1 | 	sub	objptr, ##57156
157a8     1C 51 B0 FD | 	call	#_audio096_spin2_play
157ac     0B 00 00 FF 
157b0     C0 E4 85 F1 | 	sub	objptr, ##5824
157b4                 | LR__1655
157b4     00 12 06 F6 | 	mov	arg01, #0
157b8     23 14 06 F6 | 	mov	arg02, #35
157bc     54 41 B0 FD | 	call	#_hg010b_spin2_setcursorpos
157c0                 | '     position 0,35: print "                             ";: position 4,35  
157c0     00 12 06 F6 | 	mov	arg01, #0
157c4     84 AE B0 FD | 	call	#__system___getiolock_0442
157c8     FD 12 02 F6 | 	mov	arg01, result1
157cc     48 55 B0 FD | 	call	#__system___lockmem
157d0     54 01 00 FF 
157d4     E7 14 06 F6 | 	mov	arg02, ##@LR__4738
157d8     00 12 06 F6 | 	mov	arg01, #0
157dc     00 16 06 F6 | 	mov	arg03, #0
157e0     3C 62 B0 FD | 	call	#__system___basic_print_string
157e4     00 12 06 F6 | 	mov	arg01, #0
157e8     60 AE B0 FD | 	call	#__system___getiolock_0442
157ec     FD 00 68 FC | 	wrlong	#0, result1
157f0     04 12 06 F6 | 	mov	arg01, #4
157f4     23 14 06 F6 | 	mov	arg02, #35
157f8     18 41 B0 FD | 	call	#_hg010b_spin2_setcursorpos
157fc     78 FE 9F FD | 	jmp	#LR__1652
15800                 | LR__1656
15800     A7 F0 03 F6 | 	mov	ptra, fp
15804     B2 00 A0 FD | 	call	#popregs_
15808                 | _do_dir_ret
15808     2D 00 64 FD | 	ret
1580c                 | 
1580c                 | ' 
1580c                 | ' sub do_if
1580c                 | _do_if
1580c     05 4A 05 F6 | 	mov	COUNT_, #5
15810     A8 00 A0 FD | 	call	#pushregs_
15814     E0 42 BF FD | 	call	#_pop
15818     FD 1E 0A F6 | 	mov	local01, result1 wz
1581c     FE 20 02 F6 | 	mov	local02, result2
15820     FF 22 02 F6 | 	mov	local03, result3
15824                 | ' t1=pop()
15824                 | ' ' if uresult=0, jump over else
15824                 | ' if t1.result.uresult = 0 then 
15824     BC 00 90 5D |  if_ne	jmp	#LR__1662
15828                 | '   for i=lineptr_e to lineptr-1
15828     6A 00 00 FF 
1582c     04 E4 05 F1 | 	add	objptr, ##54276
15830     F2 24 02 FB | 	rdlong	local04, objptr
15834     04 E4 85 F1 | 	sub	objptr, #4
15838     F2 26 02 FB | 	rdlong	local05, objptr
1583c     6A 00 00 FF 
15840     00 E4 85 F1 | 	sub	objptr, ##54272
15844                 | LR__1660
15844     13 25 52 F2 | 	cmps	local04, local05 wc
15848     78 00 90 3D |  if_ae	jmp	#LR__1661
1584c     12 FF 01 F6 | 	mov	result3, local04
15850     01 FE 65 F0 | 	shl	result3, #1
15854     12 FF 01 F1 | 	add	result3, local04
15858     02 FE 65 F0 | 	shl	result3, #2
1585c     67 00 00 FF 
15860     00 E4 05 F1 | 	add	objptr, ##52736
15864     F2 FE 01 F1 | 	add	result3, objptr
15868     FF 1E 02 FB | 	rdlong	local01, result3
1586c     04 FE 05 F1 | 	add	result3, #4
15870     FF FC 01 FB | 	rdlong	result2, result3
15874     12 FF 01 F6 | 	mov	result3, local04
15878     01 FE 65 F0 | 	shl	result3, #1
1587c     12 FF 01 F1 | 	add	result3, local04
15880     02 FE 65 F0 | 	shl	result3, #2
15884     F2 FE 01 F1 | 	add	result3, objptr
15888     08 FE 05 F1 | 	add	result3, #8
1588c     FF FE 01 FB | 	rdlong	result3, result3
15890     FE 20 02 F6 | 	mov	local02, result2
15894     FF 22 02 F6 | 	mov	local03, result3
15898                 | '     t1=compiledline(i)
15898                 | '     if t1.result_type=token_else then lineptr_e=i : return
15898     5A 22 0E F2 | 	cmp	local03, #90 wz
1589c     67 00 00 FF 
158a0     00 E4 85 F1 | 	sub	objptr, ##52736
158a4     6A 00 00 AF 
158a8     04 E4 05 A1 |  if_e	add	objptr, ##54276
158ac     F2 24 62 AC |  if_e	wrlong	local04, objptr
158b0     6A 00 00 AF 
158b4     04 E4 85 A1 |  if_e	sub	objptr, ##54276
158b8     28 00 90 AD |  if_e	jmp	#LR__1663
158bc     01 24 06 F1 | 	add	local04, #1
158c0     80 FF 9F FD | 	jmp	#LR__1660
158c4                 | LR__1661
158c4     6A 00 00 FF 
158c8     00 E4 05 F1 | 	add	objptr, ##54272
158cc     F2 26 02 FB | 	rdlong	local05, objptr
158d0     01 26 86 F1 | 	sub	local05, #1
158d4     04 E4 05 F1 | 	add	objptr, #4
158d8     F2 26 62 FC | 	wrlong	local05, objptr
158dc     6A 00 00 FF 
158e0     04 E4 85 F1 | 	sub	objptr, ##54276
158e4                 | LR__1662
158e4                 | LR__1663
158e4     A7 F0 03 F6 | 	mov	ptra, fp
158e8     B2 00 A0 FD | 	call	#popregs_
158ec                 | _do_if_ret
158ec     2D 00 64 FD | 	ret
158f0                 | 
158f0                 | ' 
158f0                 | ' sub do_else
158f0                 | _do_else
158f0     6A 00 00 FF 
158f4     00 E4 05 F1 | 	add	objptr, ##54272
158f8     F2 00 02 FB | 	rdlong	_var01, objptr
158fc     01 00 86 F1 | 	sub	_var01, #1
15900     04 E4 05 F1 | 	add	objptr, #4
15904     F2 00 62 FC | 	wrlong	_var01, objptr
15908     6A 00 00 FF 
1590c     04 E4 85 F1 | 	sub	objptr, ##54276
15910                 | _do_else_ret
15910     2D 00 64 FD | 	ret
15914                 | 
15914                 | ' 
15914                 | ' sub do_rad
15914                 | _do_rad
15914     7B 00 00 FF 
15918     0C E4 05 F1 | 	add	objptr, ##62988
1591c     00 C0 9F FF 
15920     F2 00 68 FC | 	wrlong	##1065353216, objptr
15924     04 E4 05 F1 | 	add	objptr, #4
15928     00 C0 9F FF 
1592c     F2 00 68 FC | 	wrlong	##1065353216, objptr
15930     7B 00 00 FF 
15934     10 E4 85 F1 | 	sub	objptr, ##62992
15938                 | _do_rad_ret
15938     2D 00 64 FD | 	ret
1593c                 | 
1593c                 | ' 
1593c                 | ' sub do_deg
1593c                 | _do_deg
1593c     7B 00 00 FF 
15940     0C E4 05 F1 | 	add	objptr, ##62988
15944     7D 47 9E FF 
15948     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1594c     04 E4 05 F1 | 	add	objptr, #4
15950     97 32 A1 FF 
15954     F2 C2 69 FC | 	wrlong	##1113927393, objptr
15958     7B 00 00 FF 
1595c     10 E4 85 F1 | 	sub	objptr, ##62992
15960                 | _do_deg_ret
15960     2D 00 64 FD | 	ret
15964                 | 
15964                 | ' 
15964                 | ' sub do_int
15964                 | _do_int
15964     00 4A 05 F6 | 	mov	COUNT_, #0
15968     A8 00 A0 FD | 	call	#pushregs_
1596c     0C F0 07 F1 | 	add	ptra, #12
15970     84 41 BF FD | 	call	#_pop
15974     A7 FA 61 FC | 	wrlong	result1, fp
15978     04 4E 05 F1 | 	add	fp, #4
1597c     A7 FC 61 FC | 	wrlong	result2, fp
15980     04 4E 05 F1 | 	add	fp, #4
15984     A7 FE 61 FC | 	wrlong	result3, fp
15988     08 4E 85 F1 | 	sub	fp, #8
1598c     A7 12 02 F6 | 	mov	arg01, fp
15990     28 C5 BF FD | 	call	#_converttoint
15994     A7 FA 61 FC | 	wrlong	result1, fp
15998     08 4E 05 F1 | 	add	fp, #8
1599c     A7 38 68 FC | 	wrlong	#28, fp
159a0     08 4E 85 F1 | 	sub	fp, #8
159a4     A7 12 02 F6 | 	mov	arg01, fp
159a8     E4 41 BF FD | 	call	#_push
159ac     A7 F0 03 F6 | 	mov	ptra, fp
159b0     B2 00 A0 FD | 	call	#popregs_
159b4                 | _do_int_ret
159b4     2D 00 64 FD | 	ret
159b8                 | 
159b8                 | ' 
159b8                 | ' sub do_nothing
159b8                 | _do_nothing
159b8                 | _do_nothing_ret
159b8     2D 00 64 FD | 	ret
159bc                 | 
159bc                 | ' 
159bc                 | ' sub do_brun
159bc                 | _do_brun
159bc     08 4A 05 F6 | 	mov	COUNT_, #8
159c0     A8 00 A0 FD | 	call	#pushregs_
159c4     30 41 BF FD | 	call	#_pop
159c8     FE 1A 02 F6 | 	mov	arg05, result2
159cc     FF 18 02 F6 | 	mov	arg04, result3
159d0     FD 1E 02 F6 | 	mov	local01, result1
159d4     0D 21 02 F6 | 	mov	local02, arg05
159d8     0C 23 02 F6 | 	mov	local03, arg04
159dc                 | ' 
159dc                 | ' t1=pop() 
159dc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
159dc     2B 22 0E F2 | 	cmp	local03, #43 wz
159e0     10 00 90 5D |  if_ne	jmp	#LR__1670
159e4     0F 13 02 F6 | 	mov	arg01, local01
159e8     9C 80 BF FD | 	call	#_convertstring
159ec     FD 1E 02 F6 | 	mov	local01, result1
159f0     1F 22 06 F6 | 	mov	local03, #31
159f4                 | LR__1670
159f4                 | ' if t1.result_type=result_string then
159f4     1F 22 0E F2 | 	cmp	local03, #31 wz
159f8     EC 01 90 5D |  if_ne	jmp	#LR__1674
159fc     0F 25 02 F6 | 	mov	local04, local01
15a00                 | '   filename=t1.result.sresult
15a00                 | '   if left$(filename,1)="/" then 
15a00     12 13 02 F6 | 	mov	arg01, local04
15a04     01 14 06 F6 | 	mov	arg02, #1
15a08     54 73 B0 FD | 	call	#__system__Left_S
15a0c     FD 12 02 F6 | 	mov	arg01, result1
15a10     54 01 00 FF 
15a14     05 15 06 F6 | 	mov	arg02, ##@LR__4739
15a18     24 53 B0 FD | 	call	#__system___string_cmp
15a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
15a20     12 27 02 A6 |  if_e	mov	local05, local04
15a24     14 00 90 AD |  if_e	jmp	#LR__1671
15a28     54 01 00 FF 
15a2c     07 13 06 F6 | 	mov	arg01, ##@LR__4740
15a30     12 15 02 F6 | 	mov	arg02, local04
15a34     3C 53 B0 FD | 	call	#__system___string_concat
15a38     FD 26 02 F6 | 	mov	local05, result1
15a3c                 | LR__1671
15a3c                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
15a3c                 | '   open fullfilename for input as #9
15a3c     09 12 06 F6 | 	mov	arg01, #9
15a40     13 15 02 F6 | 	mov	arg02, local05
15a44     00 16 06 F6 | 	mov	arg03, #0
15a48     D0 5E B0 FD | 	call	#__system___basic_open_string
15a4c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15a50     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
15a54     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15a58     FD 28 0A F6 | 	mov	local06, result1 wz
15a5c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
15a5c     8C 00 90 AD |  if_e	jmp	#LR__1672
15a60     00 12 06 F6 | 	mov	arg01, #0
15a64     E4 AB B0 FD | 	call	#__system___getiolock_0442
15a68     FD 12 02 F6 | 	mov	arg01, result1
15a6c     A8 52 B0 FD | 	call	#__system___lockmem
15a70     54 01 00 FF 
15a74     10 15 06 F6 | 	mov	arg02, ##@LR__4741
15a78     00 12 06 F6 | 	mov	arg01, #0
15a7c     00 16 06 F6 | 	mov	arg03, #0
15a80     9C 5F B0 FD | 	call	#__system___basic_print_string
15a84     00 12 06 F6 | 	mov	arg01, #0
15a88     14 15 02 F6 | 	mov	arg02, local06
15a8c     00 16 06 F6 | 	mov	arg03, #0
15a90     0A 18 06 F6 | 	mov	arg04, #10
15a94     CC 5F B0 FD | 	call	#__system___basic_print_integer
15a98     54 01 00 FF 
15a9c     1E 15 06 F6 | 	mov	arg02, ##@LR__4742
15aa0     00 12 06 F6 | 	mov	arg01, #0
15aa4     00 16 06 F6 | 	mov	arg03, #0
15aa8     74 5F B0 FD | 	call	#__system___basic_print_string
15aac     14 13 02 F6 | 	mov	arg01, local06
15ab0     9C 78 B0 FD | 	call	#__system___strerror
15ab4     FD 14 02 F6 | 	mov	arg02, result1
15ab8     00 12 06 F6 | 	mov	arg01, #0
15abc     00 16 06 F6 | 	mov	arg03, #0
15ac0     5C 5F B0 FD | 	call	#__system___basic_print_string
15ac4     00 12 06 F6 | 	mov	arg01, #0
15ac8     0A 14 06 F6 | 	mov	arg02, #10
15acc     00 16 06 F6 | 	mov	arg03, #0
15ad0     F4 5E B0 FD | 	call	#__system___basic_print_char
15ad4     00 12 06 F6 | 	mov	arg01, #0
15ad8     70 AB B0 FD | 	call	#__system___getiolock_0442
15adc     FD 00 68 FC | 	wrlong	#0, result1
15ae0     09 12 06 F6 | 	mov	arg01, #9
15ae4     98 A1 B0 FD | 	call	#__system__close
15ae8     FC 00 90 FD | 	jmp	#LR__1675
15aec                 | LR__1672
15aec     01 2A 06 F6 | 	mov	local07, #1
15af0     00 2C 06 F6 | 	mov	local08, #0
15af4                 | '   do
15af4                 | LR__1673
15af4                 | '     get #9,pos,block(0),1024,r : pos+=r	
15af4     77 00 00 FF 
15af8     30 E5 05 F1 | 	add	objptr, ##61232
15afc     F2 16 02 F6 | 	mov	arg03, objptr
15b00     77 00 00 FF 
15b04     30 E5 85 F1 | 	sub	objptr, ##61232
15b08     09 12 06 F6 | 	mov	arg01, #9
15b0c     15 15 02 F6 | 	mov	arg02, local07
15b10     0A 18 C6 F9 | 	decod	arg04, #10
15b14     01 1A 06 F6 | 	mov	arg05, #1
15b18     14 60 B0 FD | 	call	#__system___basic_get
15b1c     FD 28 02 F6 | 	mov	local06, result1
15b20     FD 2A 02 F1 | 	add	local07, result1
15b24     77 00 00 FF 
15b28     30 E5 05 F1 | 	add	objptr, ##61232
15b2c     F2 12 02 F6 | 	mov	arg01, objptr
15b30     16 15 02 F6 | 	mov	arg02, local08
15b34     0A 16 C6 F9 | 	decod	arg03, #10
15b38     6C 00 00 FF 
15b3c     70 E4 85 F1 | 	sub	objptr, ##55408
15b40     08 47 B0 FD | 	call	#_psram_spin2_write
15b44     0B 00 00 FF 
15b48     C0 E4 85 F1 | 	sub	objptr, ##5824
15b4c     14 2D 02 F1 | 	add	local08, local06
15b50     02 00 00 FF 
15b54     00 28 0E F2 | 	cmp	local06, ##1024 wz
15b58     E0 03 00 AF 
15b5c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
15b60     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1673
15b64     56 00 00 FF 
15b68     80 E5 05 F1 | 	add	objptr, ##44416
15b6c     F2 12 02 FB | 	rdlong	arg01, objptr
15b70     03 12 62 FD | 	cogstop	arg01
15b74     04 E4 05 F1 | 	add	objptr, #4
15b78     F2 12 02 FB | 	rdlong	arg01, objptr
15b7c     03 12 62 FD | 	cogstop	arg01
15b80     04 E4 05 F1 | 	add	objptr, #4
15b84     F2 12 02 FB | 	rdlong	arg01, objptr
15b88     03 12 62 FD | 	cogstop	arg01
15b8c     22 00 00 FF 
15b90     E0 E5 05 F1 | 	add	objptr, ##17888
15b94     F2 12 02 FB | 	rdlong	arg01, objptr
15b98     03 12 62 FD | 	cogstop	arg01
15b9c     18 00 00 FF 
15ba0     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
15ba4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15ba8     18 00 00 FF 
15bac     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
15bb0     22 00 00 FF 
15bb4     D8 E5 85 F1 | 	sub	objptr, ##17880
15bb8     1E 2C 06 F6 | 	mov	local08, #30
15bbc     28 E4 61 FD | 	setq	objptr
15bc0     0A 2D F2 FC | 	coginit	local08, arg02 wc
15bc4     01 2C 66 C6 |  if_b	neg	local08, #1
15bc8     24 00 00 FF 
15bcc     0C E5 05 F1 | 	add	objptr, ##18700
15bd0     F2 2C 62 FC | 	wrlong	local08, objptr
15bd4     7B 00 00 FF 
15bd8     9C E4 85 F1 | 	sub	objptr, ##63132
15bdc     00 12 06 F6 | 	mov	arg01, #0
15be0     01 12 62 FD | 	cogid	arg01
15be4     03 12 62 FD | 	cogstop	arg01
15be8                 | LR__1674
15be8                 | LR__1675
15be8     A7 F0 03 F6 | 	mov	ptra, fp
15bec     B2 00 A0 FD | 	call	#popregs_
15bf0                 | _do_brun_ret
15bf0     2D 00 64 FD | 	ret
15bf4                 | 
15bf4                 | ' 
15bf4                 | ' 
15bf4                 | ' sub do_mouse
15bf4                 | _do_mouse
15bf4     00 3F BF FD | 	call	#_pop
15bf8     00 FA 4D F2 | 	cmps	result1, #0 wz
15bfc                 | ' 
15bfc                 | ' t1=pop()
15bfc                 | ' 
15bfc                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15bfc     14 00 90 5D |  if_ne	jmp	#LR__1680
15c00     10 12 06 F6 | 	mov	arg01, #16
15c04     00 14 06 F6 | 	mov	arg02, #0
15c08     00 16 06 F6 | 	mov	arg03, #0
15c0c     F4 30 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c10     10 00 90 FD | 	jmp	#LR__1681
15c14                 | LR__1680
15c14     10 12 06 F6 | 	mov	arg01, #16
15c18     20 14 06 F6 | 	mov	arg02, #32
15c1c     20 16 06 F6 | 	mov	arg03, #32
15c20     E0 30 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c24                 | LR__1681
15c24                 | _do_mouse_ret
15c24     2D 00 64 FD | 	ret
15c28                 | 
15c28                 | ' 
15c28                 | ' sub do_cursor
15c28                 | _do_cursor
15c28     CC 3E BF FD | 	call	#_pop
15c2c     00 FA 4D F2 | 	cmps	result1, #0 wz
15c30                 | ' 
15c30                 | ' t1=pop()
15c30                 | ' 
15c30                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
15c30     14 00 90 5D |  if_ne	jmp	#LR__1690
15c34     11 12 06 F6 | 	mov	arg01, #17
15c38     00 14 06 F6 | 	mov	arg02, #0
15c3c     00 16 06 F6 | 	mov	arg03, #0
15c40     C0 30 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c44     10 00 90 FD | 	jmp	#LR__1691
15c48                 | LR__1690
15c48     11 12 06 F6 | 	mov	arg01, #17
15c4c     08 14 06 F6 | 	mov	arg02, #8
15c50     10 16 06 F6 | 	mov	arg03, #16
15c54     AC 30 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c58                 | LR__1691
15c58                 | _do_cursor_ret
15c58     2D 00 64 FD | 	ret
15c5c                 | 
15c5c                 | ' 
15c5c                 | ' 
15c5c                 | ' sub do_click
15c5c                 | _do_click
15c5c     98 3E BF FD | 	call	#_pop
15c60     00 FA 4D F2 | 	cmps	result1, #0 wz
15c64                 | ' 
15c64                 | ' t1=pop()
15c64                 | ' 
15c64                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
15c64     79 00 00 AF 
15c68     64 E5 05 A1 |  if_e	add	objptr, ##62308
15c6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
15c70     79 00 00 FF 
15c74     64 E5 C5 F3 | 	sumz	objptr, ##62308
15c78     F2 02 68 5C |  if_ne	wrlong	#1, objptr
15c7c     79 00 00 5F 
15c80     64 E5 85 51 |  if_ne	sub	objptr, ##62308
15c84                 | _do_click_ret
15c84     2D 00 64 FD | 	ret
15c88                 | 
15c88                 | ' 
15c88                 | ' 
15c88                 | ' sub do_beep
15c88                 | _do_beep
15c88     02 4A 05 F6 | 	mov	COUNT_, #2
15c8c     A8 00 A0 FD | 	call	#pushregs_
15c90     20 F0 07 F1 | 	add	ptra, #32
15c94     60 3E BF FD | 	call	#_pop
15c98     FD 1E 02 F6 | 	mov	local01, result1
15c9c     FE 1C 02 F6 | 	mov	arg06, result2
15ca0     FF 20 02 F6 | 	mov	local02, result3
15ca4     0C 4E 05 F1 | 	add	fp, #12
15ca8     A7 1E 62 FC | 	wrlong	local01, fp
15cac     04 4E 05 F1 | 	add	fp, #4
15cb0     A7 1C 62 FC | 	wrlong	arg06, fp
15cb4     04 4E 05 F1 | 	add	fp, #4
15cb8     A7 20 62 FC | 	wrlong	local02, fp
15cbc     14 4E 85 F1 | 	sub	fp, #20
15cc0     34 3E BF FD | 	call	#_pop
15cc4     A7 FA 61 FC | 	wrlong	result1, fp
15cc8     04 4E 05 F1 | 	add	fp, #4
15ccc     A7 FC 61 FC | 	wrlong	result2, fp
15cd0     04 4E 05 F1 | 	add	fp, #4
15cd4     A7 FE 61 FC | 	wrlong	result3, fp
15cd8                 | ' 
15cd8                 | ' 
15cd8                 | ' 
15cd8                 | ' t2=pop()
15cd8                 | ' t1=pop()
15cd8                 | ' 
15cd8                 | ' 
15cd8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
15cd8     08 4E 85 F1 | 	sub	fp, #8
15cdc     1C FE 0D F2 | 	cmp	result3, #28 wz
15ce0     08 4E 05 51 |  if_ne	add	fp, #8
15ce4     A7 20 02 5B |  if_ne	rdlong	local02, fp
15ce8     08 4E 85 51 |  if_ne	sub	fp, #8
15cec     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
15cf0     A7 1E 02 AB |  if_e	rdlong	local01, fp
15cf4     18 4E 05 A1 |  if_e	add	fp, #24
15cf8     A7 1E 62 AC |  if_e	wrlong	local01, fp
15cfc     18 4E 85 A1 |  if_e	sub	fp, #24
15d00     14 00 90 AD |  if_e	jmp	#LR__1700
15d04     A7 12 02 F6 | 	mov	arg01, fp
15d08     B0 C1 BF FD | 	call	#_converttoint
15d0c     18 4E 05 F1 | 	add	fp, #24
15d10     A7 FA 61 FC | 	wrlong	result1, fp
15d14     18 4E 85 F1 | 	sub	fp, #24
15d18                 | LR__1700
15d18     1C 4E 05 F1 | 	add	fp, #28
15d1c     A7 FE 48 FC | 	wrbyte	#127, fp
15d20     01 4E 05 F1 | 	add	fp, #1
15d24     A7 00 49 FC | 	wrbyte	#128, fp
15d28     01 4E 85 F1 | 	sub	fp, #1
15d2c     A7 14 02 F6 | 	mov	arg02, fp
15d30     04 4E 85 F1 | 	sub	fp, #4
15d34     A7 16 02 FB | 	rdlong	arg03, fp
15d38     18 4E 85 F1 | 	sub	fp, #24
15d3c     01 16 66 F0 | 	shl	arg03, #1
15d40     07 12 06 F6 | 	mov	arg01, #7
15d44     0E 18 C6 F9 | 	decod	arg04, #14
15d48     02 1A 06 F6 | 	mov	arg05, #2
15d4c     00 1C 06 F6 | 	mov	arg06, #0
15d50     0B 00 00 FF 
15d54     C0 E4 05 F1 | 	add	objptr, ##5824
15d58     08 4C B0 FD | 	call	#_audio096_spin2_play8
15d5c     0B 00 00 FF 
15d60     C0 E4 85 F1 | 	sub	objptr, ##5824
15d64     0C 4E 05 F1 | 	add	fp, #12
15d68     A7 12 02 F6 | 	mov	arg01, fp
15d6c     0C 4E 85 F1 | 	sub	fp, #12
15d70     1C 3E BF FD | 	call	#_push
15d74     58 F6 BF FD | 	call	#_do_waitms
15d78     07 12 06 F6 | 	mov	arg01, #7
15d7c     0B 00 00 FF 
15d80     C0 E4 05 F1 | 	add	objptr, ##5824
15d84     90 4C B0 FD | 	call	#_audio096_spin2_stop
15d88     0B 00 00 FF 
15d8c     C0 E4 85 F1 | 	sub	objptr, ##5824
15d90     A7 F0 03 F6 | 	mov	ptra, fp
15d94     B2 00 A0 FD | 	call	#popregs_
15d98                 | _do_beep_ret
15d98     2D 00 64 FD | 	ret
15d9c                 | 
15d9c                 | ' 
15d9c                 | ' sub do_no_command
15d9c                 | _do_no_command
15d9c     17 12 06 F6 | 	mov	arg01, #23
15da0     64 19 B0 FD | 	call	#_printerror
15da4                 | _do_no_command_ret
15da4     2D 00 64 FD | 	ret
15da8                 | 
15da8                 | ' 
15da8                 | ' sub do_negative
15da8                 | _do_negative
15da8     02 4A 05 F6 | 	mov	COUNT_, #2
15dac     A8 00 A0 FD | 	call	#pushregs_
15db0     0C F0 07 F1 | 	add	ptra, #12
15db4     40 3D BF FD | 	call	#_pop
15db8     FF 1E 02 F6 | 	mov	local01, result3
15dbc     A7 FA 61 FC | 	wrlong	result1, fp
15dc0     04 4E 05 F1 | 	add	fp, #4
15dc4     A7 FC 61 FC | 	wrlong	result2, fp
15dc8     04 4E 05 F1 | 	add	fp, #4
15dcc     A7 1E 62 FC | 	wrlong	local01, fp
15dd0                 | ' t1=pop()
15dd0                 | ' if t1.result_type=result_int then 
15dd0     08 4E 85 F1 | 	sub	fp, #8
15dd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
15dd8     A7 20 02 AB |  if_e	rdlong	local02, fp
15ddc     10 1F 62 A6 |  if_e	neg	local01, local02
15de0     A7 1E 62 AC |  if_e	wrlong	local01, fp
15de4     5C 00 90 AD |  if_e	jmp	#LR__1712
15de8     08 4E 05 F1 | 	add	fp, #8
15dec     A7 1E 02 FB | 	rdlong	local01, fp
15df0     08 4E 85 F1 | 	sub	fp, #8
15df4     1D 1E 0E F2 | 	cmp	local01, #29 wz
15df8     1C 00 90 5D |  if_ne	jmp	#LR__1710
15dfc     A7 20 02 FB | 	rdlong	local02, fp
15e00     10 1F 62 F6 | 	neg	local01, local02
15e04     A7 1E 62 FC | 	wrlong	local01, fp
15e08     08 4E 05 F1 | 	add	fp, #8
15e0c     A7 38 68 FC | 	wrlong	#28, fp
15e10     08 4E 85 F1 | 	sub	fp, #8
15e14     2C 00 90 FD | 	jmp	#LR__1711
15e18                 | LR__1710
15e18     08 4E 05 F1 | 	add	fp, #8
15e1c     A7 1E 02 FB | 	rdlong	local01, fp
15e20     08 4E 85 F1 | 	sub	fp, #8
15e24     1E 1E 0E F2 | 	cmp	local01, #30 wz
15e28     A7 FA 01 AB |  if_e	rdlong	result1, fp
15e2c     1F FA E5 A4 |  if_e	bitnot	result1, #31
15e30     A7 FA 61 AC |  if_e	wrlong	result1, fp
15e34     08 4E 05 51 |  if_ne	add	fp, #8
15e38     A7 FE 69 5C |  if_ne	wrlong	#255, fp
15e3c     08 4E 85 51 |  if_ne	sub	fp, #8
15e40     A7 50 68 5C |  if_ne	wrlong	#40, fp
15e44                 | LR__1711
15e44                 | LR__1712
15e44     A7 12 02 F6 | 	mov	arg01, fp
15e48     44 3D BF FD | 	call	#_push
15e4c     A7 F0 03 F6 | 	mov	ptra, fp
15e50     B2 00 A0 FD | 	call	#popregs_
15e54                 | _do_negative_ret
15e54     2D 00 64 FD | 	ret
15e58                 | 
15e58                 | ' 
15e58                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
15e58                 | ' 
15e58                 | ' ''----------------------------------------------------------------------------------------------------
15e58                 | ' ''------------------ Initialization procedures -------------------------------------------------------
15e58                 | ' ''----------------------------------------------------------------------------------------------------
15e58                 | ' 
15e58                 | ' ''--------------------------- Command function pointers
15e58                 | ' 
15e58                 | ' sub init_commands
15e58                 | _init_commands
15e58                 | ' 
15e58                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
15e58     00 00 06 F6 | 	mov	_var01, #0
15e5c     97 16 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
15e60                 | LR__1720
15e60     00 FB 01 F6 | 	mov	result1, _var01
15e64     02 FA 65 F0 | 	shl	result1, #2
15e68     62 00 00 FF 
15e6c     E4 E5 05 F1 | 	add	objptr, ##50660
15e70     F2 FA 01 F1 | 	add	result1, objptr
15e74     62 00 00 FF 
15e78     E4 E5 85 F1 | 	sub	objptr, ##50660
15e7c     FD E4 61 FC | 	wrlong	objptr, result1
15e80     01 00 06 F1 | 	add	_var01, #1
15e84     00 01 56 F2 | 	cmps	_var01, #256 wc
15e88     D4 FF 9F CD |  if_b	jmp	#LR__1720
15e8c                 | LR__1721
15e8c     F2 FA 01 F6 | 	mov	result1, objptr
15e90     14 FA 25 F4 | 	bith	result1, #20
15e94     62 00 00 FF 
15e98     E8 E5 05 F1 | 	add	objptr, ##50664
15e9c     F2 FA 61 FC | 	wrlong	result1, objptr
15ea0     62 00 00 FF 
15ea4     E8 E5 85 F1 | 	sub	objptr, ##50664
15ea8     F2 FA 01 F6 | 	mov	result1, objptr
15eac     15 FA 25 F4 | 	bith	result1, #21
15eb0     62 00 00 FF 
15eb4     EC E5 05 F1 | 	add	objptr, ##50668
15eb8     F2 FA 61 FC | 	wrlong	result1, objptr
15ebc     62 00 00 FF 
15ec0     EC E5 85 F1 | 	sub	objptr, ##50668
15ec4     F2 FA 01 F6 | 	mov	result1, objptr
15ec8     34 FA 25 F4 | 	bith	result1, #52
15ecc     62 00 00 FF 
15ed0     F0 E5 05 F1 | 	add	objptr, ##50672
15ed4     F2 FA 61 FC | 	wrlong	result1, objptr
15ed8     62 00 00 FF 
15edc     F0 E5 85 F1 | 	sub	objptr, ##50672
15ee0     F2 FA 01 F6 | 	mov	result1, objptr
15ee4     16 FA 25 F4 | 	bith	result1, #22
15ee8     62 00 00 FF 
15eec     F8 E5 05 F1 | 	add	objptr, ##50680
15ef0     F2 FA 61 FC | 	wrlong	result1, objptr
15ef4     62 00 00 FF 
15ef8     F8 E5 85 F1 | 	sub	objptr, ##50680
15efc     F2 FA 01 F6 | 	mov	result1, objptr
15f00     00 28 00 FF 
15f04     00 FA 45 F5 | 	or	result1, ##5242880
15f08     62 00 00 FF 
15f0c     FC E5 05 F1 | 	add	objptr, ##50684
15f10     F2 FA 61 FC | 	wrlong	result1, objptr
15f14     62 00 00 FF 
15f18     FC E5 85 F1 | 	sub	objptr, ##50684
15f1c     F2 FA 01 F6 | 	mov	result1, objptr
15f20     35 FA 25 F4 | 	bith	result1, #53
15f24     63 00 00 FF 
15f28     00 E4 05 F1 | 	add	objptr, ##50688
15f2c     F2 FA 61 FC | 	wrlong	result1, objptr
15f30     63 00 00 FF 
15f34     00 E4 85 F1 | 	sub	objptr, ##50688
15f38     F2 FA 01 F6 | 	mov	result1, objptr
15f3c     54 FA 25 F4 | 	bith	result1, #84
15f40     63 00 00 FF 
15f44     04 E4 05 F1 | 	add	objptr, ##50692
15f48     F2 FA 61 FC | 	wrlong	result1, objptr
15f4c     63 00 00 FF 
15f50     04 E4 85 F1 | 	sub	objptr, ##50692
15f54     F2 FA 01 F6 | 	mov	result1, objptr
15f58     17 FA 25 F4 | 	bith	result1, #23
15f5c     63 00 00 FF 
15f60     08 E4 05 F1 | 	add	objptr, ##50696
15f64     F2 FA 61 FC | 	wrlong	result1, objptr
15f68     63 00 00 FF 
15f6c     08 E4 85 F1 | 	sub	objptr, ##50696
15f70     F2 FA 01 F6 | 	mov	result1, objptr
15f74     00 48 00 FF 
15f78     00 FA 45 F5 | 	or	result1, ##9437184
15f7c     63 00 00 FF 
15f80     0C E4 05 F1 | 	add	objptr, ##50700
15f84     F2 FA 61 FC | 	wrlong	result1, objptr
15f88     63 00 00 FF 
15f8c     0C E4 85 F1 | 	sub	objptr, ##50700
15f90     F2 FA 01 F6 | 	mov	result1, objptr
15f94     00 50 00 FF 
15f98     00 FA 45 F5 | 	or	result1, ##10485760
15f9c     63 00 00 FF 
15fa0     10 E4 05 F1 | 	add	objptr, ##50704
15fa4     F2 FA 61 FC | 	wrlong	result1, objptr
15fa8     63 00 00 FF 
15fac     10 E4 85 F1 | 	sub	objptr, ##50704
15fb0     F2 FA 01 F6 | 	mov	result1, objptr
15fb4     00 58 00 FF 
15fb8     00 FA 45 F5 | 	or	result1, ##11534336
15fbc     63 00 00 FF 
15fc0     14 E4 05 F1 | 	add	objptr, ##50708
15fc4     F2 FA 61 FC | 	wrlong	result1, objptr
15fc8     63 00 00 FF 
15fcc     14 E4 85 F1 | 	sub	objptr, ##50708
15fd0     F2 FA 01 F6 | 	mov	result1, objptr
15fd4     36 FA 25 F4 | 	bith	result1, #54
15fd8     63 00 00 FF 
15fdc     28 E4 05 F1 | 	add	objptr, ##50728
15fe0     F2 FA 61 FC | 	wrlong	result1, objptr
15fe4     63 00 00 FF 
15fe8     28 E4 85 F1 | 	sub	objptr, ##50728
15fec     F2 FA 01 F6 | 	mov	result1, objptr
15ff0     00 68 00 FF 
15ff4     00 FA 45 F5 | 	or	result1, ##13631488
15ff8     63 00 00 FF 
15ffc     58 E4 05 F1 | 	add	objptr, ##50776
16000     F2 FA 61 FC | 	wrlong	result1, objptr
16004     63 00 00 FF 
16008     58 E4 85 F1 | 	sub	objptr, ##50776
1600c     F2 FA 01 F6 | 	mov	result1, objptr
16010     00 68 00 FF 
16014     00 FA 45 F5 | 	or	result1, ##13631488
16018     63 00 00 FF 
1601c     54 E4 05 F1 | 	add	objptr, ##50772
16020     F2 FA 61 FC | 	wrlong	result1, objptr
16024     63 00 00 FF 
16028     54 E4 85 F1 | 	sub	objptr, ##50772
1602c     F2 FA 01 F6 | 	mov	result1, objptr
16030     00 68 00 FF 
16034     00 FA 45 F5 | 	or	result1, ##13631488
16038     63 00 00 FF 
1603c     5C E4 05 F1 | 	add	objptr, ##50780
16040     F2 FA 61 FC | 	wrlong	result1, objptr
16044     63 00 00 FF 
16048     5C E4 85 F1 | 	sub	objptr, ##50780
1604c     F2 FA 01 F6 | 	mov	result1, objptr
16050     00 68 00 FF 
16054     00 FA 45 F5 | 	or	result1, ##13631488
16058     63 00 00 FF 
1605c     60 E4 05 F1 | 	add	objptr, ##50784
16060     F2 FA 61 FC | 	wrlong	result1, objptr
16064     63 00 00 FF 
16068     60 E4 85 F1 | 	sub	objptr, ##50784
1606c     F2 FA 01 F6 | 	mov	result1, objptr
16070     00 68 00 FF 
16074     00 FA 45 F5 | 	or	result1, ##13631488
16078     63 00 00 FF 
1607c     90 E4 05 F1 | 	add	objptr, ##50832
16080     F2 FA 61 FC | 	wrlong	result1, objptr
16084     63 00 00 FF 
16088     90 E4 85 F1 | 	sub	objptr, ##50832
1608c     F2 FA 01 F6 | 	mov	result1, objptr
16090     55 FA 25 F4 | 	bith	result1, #85
16094     63 00 00 FF 
16098     40 E4 05 F1 | 	add	objptr, ##50752
1609c     F2 FA 61 FC | 	wrlong	result1, objptr
160a0     63 00 00 FF 
160a4     40 E4 85 F1 | 	sub	objptr, ##50752
160a8     F2 FA 01 F6 | 	mov	result1, objptr
160ac     00 68 00 FF 
160b0     00 FA 45 F5 | 	or	result1, ##13631488
160b4     63 00 00 FF 
160b8     64 E4 05 F1 | 	add	objptr, ##50788
160bc     F2 FA 61 FC | 	wrlong	result1, objptr
160c0     63 00 00 FF 
160c4     64 E4 85 F1 | 	sub	objptr, ##50788
160c8     F2 FA 01 F6 | 	mov	result1, objptr
160cc     00 68 00 FF 
160d0     00 FA 45 F5 | 	or	result1, ##13631488
160d4     63 00 00 FF 
160d8     68 E4 05 F1 | 	add	objptr, ##50792
160dc     F2 FA 61 FC | 	wrlong	result1, objptr
160e0     63 00 00 FF 
160e4     68 E4 85 F1 | 	sub	objptr, ##50792
160e8     F2 FA 01 F6 | 	mov	result1, objptr
160ec     00 68 00 FF 
160f0     00 FA 45 F5 | 	or	result1, ##13631488
160f4     63 00 00 FF 
160f8     6C E4 05 F1 | 	add	objptr, ##50796
160fc     F2 FA 61 FC | 	wrlong	result1, objptr
16100     63 00 00 FF 
16104     6C E4 85 F1 | 	sub	objptr, ##50796
16108     F2 FA 01 F6 | 	mov	result1, objptr
1610c     74 FA 25 F4 | 	bith	result1, #116
16110     63 00 00 FF 
16114     E4 E4 05 F1 | 	add	objptr, ##50916
16118     F2 FA 61 FC | 	wrlong	result1, objptr
1611c     63 00 00 FF 
16120     E4 E4 85 F1 | 	sub	objptr, ##50916
16124     F2 FA 01 F6 | 	mov	result1, objptr
16128     18 FA 25 F4 | 	bith	result1, #24
1612c     63 00 00 FF 
16130     E8 E4 05 F1 | 	add	objptr, ##50920
16134     F2 FA 61 FC | 	wrlong	result1, objptr
16138     63 00 00 FF 
1613c     E8 E4 85 F1 | 	sub	objptr, ##50920
16140     F2 FA 01 F6 | 	mov	result1, objptr
16144     00 88 00 FF 
16148     00 FA 45 F5 | 	or	result1, ##17825792
1614c     63 00 00 FF 
16150     EC E4 05 F1 | 	add	objptr, ##50924
16154     F2 FA 61 FC | 	wrlong	result1, objptr
16158     63 00 00 FF 
1615c     EC E4 85 F1 | 	sub	objptr, ##50924
16160     F2 FA 01 F6 | 	mov	result1, objptr
16164     00 90 00 FF 
16168     00 FA 45 F5 | 	or	result1, ##18874368
1616c     63 00 00 FF 
16170     F0 E4 05 F1 | 	add	objptr, ##50928
16174     F2 FA 61 FC | 	wrlong	result1, objptr
16178     63 00 00 FF 
1617c     F0 E4 85 F1 | 	sub	objptr, ##50928
16180     F2 FA 01 F6 | 	mov	result1, objptr
16184     00 98 00 FF 
16188     00 FA 45 F5 | 	or	result1, ##19922944
1618c     63 00 00 FF 
16190     F4 E4 05 F1 | 	add	objptr, ##50932
16194     F2 FA 61 FC | 	wrlong	result1, objptr
16198     63 00 00 FF 
1619c     F4 E4 85 F1 | 	sub	objptr, ##50932
161a0     F2 FA 01 F6 | 	mov	result1, objptr
161a4     00 A0 00 FF 
161a8     00 FA 45 F5 | 	or	result1, ##20971520
161ac     63 00 00 FF 
161b0     F8 E4 05 F1 | 	add	objptr, ##50936
161b4     F2 FA 61 FC | 	wrlong	result1, objptr
161b8     63 00 00 FF 
161bc     F8 E4 85 F1 | 	sub	objptr, ##50936
161c0     F2 FA 01 F6 | 	mov	result1, objptr
161c4     00 A8 00 FF 
161c8     00 FA 45 F5 | 	or	result1, ##22020096
161cc     63 00 00 FF 
161d0     FC E4 05 F1 | 	add	objptr, ##50940
161d4     F2 FA 61 FC | 	wrlong	result1, objptr
161d8     63 00 00 FF 
161dc     FC E4 85 F1 | 	sub	objptr, ##50940
161e0     F2 FA 01 F6 | 	mov	result1, objptr
161e4     00 B0 00 FF 
161e8     00 FA 45 F5 | 	or	result1, ##23068672
161ec     63 00 00 FF 
161f0     00 E5 05 F1 | 	add	objptr, ##50944
161f4     F2 FA 61 FC | 	wrlong	result1, objptr
161f8     63 00 00 FF 
161fc     00 E5 85 F1 | 	sub	objptr, ##50944
16200     F2 FA 01 F6 | 	mov	result1, objptr
16204     00 B8 00 FF 
16208     00 FA 45 F5 | 	or	result1, ##24117248
1620c     63 00 00 FF 
16210     04 E5 05 F1 | 	add	objptr, ##50948
16214     F2 FA 61 FC | 	wrlong	result1, objptr
16218     63 00 00 FF 
1621c     04 E5 85 F1 | 	sub	objptr, ##50948
16220     F2 FA 01 F6 | 	mov	result1, objptr
16224     37 FA 25 F4 | 	bith	result1, #55
16228     63 00 00 FF 
1622c     08 E5 05 F1 | 	add	objptr, ##50952
16230     F2 FA 61 FC | 	wrlong	result1, objptr
16234     63 00 00 FF 
16238     08 E5 85 F1 | 	sub	objptr, ##50952
1623c     F2 FA 01 F6 | 	mov	result1, objptr
16240     00 C8 00 FF 
16244     00 FA 45 F5 | 	or	result1, ##26214400
16248     63 00 00 FF 
1624c     0C E5 05 F1 | 	add	objptr, ##50956
16250     F2 FA 61 FC | 	wrlong	result1, objptr
16254     63 00 00 FF 
16258     0C E5 85 F1 | 	sub	objptr, ##50956
1625c     F2 FA 01 F6 | 	mov	result1, objptr
16260     00 D0 00 FF 
16264     00 FA 45 F5 | 	or	result1, ##27262976
16268     63 00 00 FF 
1626c     10 E5 05 F1 | 	add	objptr, ##50960
16270     F2 FA 61 FC | 	wrlong	result1, objptr
16274     63 00 00 FF 
16278     10 E5 85 F1 | 	sub	objptr, ##50960
1627c     F2 FA 01 F6 | 	mov	result1, objptr
16280     00 D8 00 FF 
16284     00 FA 45 F5 | 	or	result1, ##28311552
16288     63 00 00 FF 
1628c     14 E5 05 F1 | 	add	objptr, ##50964
16290     F2 FA 61 FC | 	wrlong	result1, objptr
16294     63 00 00 FF 
16298     14 E5 85 F1 | 	sub	objptr, ##50964
1629c     F2 FA 01 F6 | 	mov	result1, objptr
162a0     56 FA 25 F4 | 	bith	result1, #86
162a4     63 00 00 FF 
162a8     18 E5 05 F1 | 	add	objptr, ##50968
162ac     F2 FA 61 FC | 	wrlong	result1, objptr
162b0     63 00 00 FF 
162b4     18 E5 85 F1 | 	sub	objptr, ##50968
162b8     F2 FA 01 F6 | 	mov	result1, objptr
162bc     00 E8 00 FF 
162c0     00 FA 45 F5 | 	or	result1, ##30408704
162c4     64 00 00 FF 
162c8     E0 E5 05 F1 | 	add	objptr, ##51680
162cc     F2 FA 61 FC | 	wrlong	result1, objptr
162d0     64 00 00 FF 
162d4     E0 E5 85 F1 | 	sub	objptr, ##51680
162d8     F2 FA 01 F6 | 	mov	result1, objptr
162dc     75 FA 25 F4 | 	bith	result1, #117
162e0     63 00 00 FF 
162e4     1C E5 05 F1 | 	add	objptr, ##50972
162e8     F2 FA 61 FC | 	wrlong	result1, objptr
162ec     63 00 00 FF 
162f0     1C E5 85 F1 | 	sub	objptr, ##50972
162f4     F2 FA 01 F6 | 	mov	result1, objptr
162f8     94 FA 25 F4 | 	bith	result1, #148
162fc     63 00 00 FF 
16300     30 E5 05 F1 | 	add	objptr, ##50992
16304     F2 FA 61 FC | 	wrlong	result1, objptr
16308     63 00 00 FF 
1630c     30 E5 85 F1 | 	sub	objptr, ##50992
16310     F2 FA 01 F6 | 	mov	result1, objptr
16314     19 FA 25 F4 | 	bith	result1, #25
16318     63 00 00 FF 
1631c     20 E5 05 F1 | 	add	objptr, ##50976
16320     F2 FA 61 FC | 	wrlong	result1, objptr
16324     63 00 00 FF 
16328     20 E5 85 F1 | 	sub	objptr, ##50976
1632c     F2 FA 01 F6 | 	mov	result1, objptr
16330     00 08 01 FF 
16334     00 FA 45 F5 | 	or	result1, ##34603008
16338     63 00 00 FF 
1633c     3C E4 05 F1 | 	add	objptr, ##50748
16340     F2 FA 61 FC | 	wrlong	result1, objptr
16344     63 00 00 FF 
16348     3C E4 85 F1 | 	sub	objptr, ##50748
1634c     F2 FA 01 F6 | 	mov	result1, objptr
16350     00 10 01 FF 
16354     00 FA 45 F5 | 	or	result1, ##35651584
16358     63 00 00 FF 
1635c     24 E5 05 F1 | 	add	objptr, ##50980
16360     F2 FA 61 FC | 	wrlong	result1, objptr
16364     63 00 00 FF 
16368     24 E5 85 F1 | 	sub	objptr, ##50980
1636c     F2 FA 01 F6 | 	mov	result1, objptr
16370     00 18 01 FF 
16374     00 FA 45 F5 | 	or	result1, ##36700160
16378     63 00 00 FF 
1637c     28 E5 05 F1 | 	add	objptr, ##50984
16380     F2 FA 61 FC | 	wrlong	result1, objptr
16384     63 00 00 FF 
16388     28 E5 85 F1 | 	sub	objptr, ##50984
1638c     F2 FA 01 F6 | 	mov	result1, objptr
16390     00 20 01 FF 
16394     00 FA 45 F5 | 	or	result1, ##37748736
16398     63 00 00 FF 
1639c     2C E5 05 F1 | 	add	objptr, ##50988
163a0     F2 FA 61 FC | 	wrlong	result1, objptr
163a4     63 00 00 FF 
163a8     2C E5 85 F1 | 	sub	objptr, ##50988
163ac     F2 FA 01 F6 | 	mov	result1, objptr
163b0     00 28 01 FF 
163b4     00 FA 45 F5 | 	or	result1, ##38797312
163b8     63 00 00 FF 
163bc     38 E5 05 F1 | 	add	objptr, ##51000
163c0     F2 FA 61 FC | 	wrlong	result1, objptr
163c4     63 00 00 FF 
163c8     38 E5 85 F1 | 	sub	objptr, ##51000
163cc     F2 FA 01 F6 | 	mov	result1, objptr
163d0     00 30 01 FF 
163d4     00 FA 45 F5 | 	or	result1, ##39845888
163d8     63 00 00 FF 
163dc     3C E5 05 F1 | 	add	objptr, ##51004
163e0     F2 FA 61 FC | 	wrlong	result1, objptr
163e4     63 00 00 FF 
163e8     3C E5 85 F1 | 	sub	objptr, ##51004
163ec     F2 FA 01 F6 | 	mov	result1, objptr
163f0     00 38 01 FF 
163f4     00 FA 45 F5 | 	or	result1, ##40894464
163f8     63 00 00 FF 
163fc     40 E5 05 F1 | 	add	objptr, ##51008
16400     F2 FA 61 FC | 	wrlong	result1, objptr
16404     63 00 00 FF 
16408     40 E5 85 F1 | 	sub	objptr, ##51008
1640c     F2 FA 01 F6 | 	mov	result1, objptr
16410     00 40 01 FF 
16414     00 FA 45 F5 | 	or	result1, ##41943040
16418     63 00 00 FF 
1641c     44 E5 05 F1 | 	add	objptr, ##51012
16420     F2 FA 61 FC | 	wrlong	result1, objptr
16424     63 00 00 FF 
16428     44 E5 85 F1 | 	sub	objptr, ##51012
1642c     F2 FA 01 F6 | 	mov	result1, objptr
16430     00 48 01 FF 
16434     00 FA 45 F5 | 	or	result1, ##42991616
16438     63 00 00 FF 
1643c     4C E5 05 F1 | 	add	objptr, ##51020
16440     F2 FA 61 FC | 	wrlong	result1, objptr
16444     63 00 00 FF 
16448     4C E5 85 F1 | 	sub	objptr, ##51020
1644c     F2 FA 01 F6 | 	mov	result1, objptr
16450     00 50 01 FF 
16454     00 FA 45 F5 | 	or	result1, ##44040192
16458     63 00 00 FF 
1645c     50 E5 05 F1 | 	add	objptr, ##51024
16460     F2 FA 61 FC | 	wrlong	result1, objptr
16464     63 00 00 FF 
16468     50 E5 85 F1 | 	sub	objptr, ##51024
1646c     F2 FA 01 F6 | 	mov	result1, objptr
16470     00 58 01 FF 
16474     00 FA 45 F5 | 	or	result1, ##45088768
16478     63 00 00 FF 
1647c     50 E4 05 F1 | 	add	objptr, ##50768
16480     F2 FA 61 FC | 	wrlong	result1, objptr
16484     63 00 00 FF 
16488     50 E4 85 F1 | 	sub	objptr, ##50768
1648c     F2 FA 01 F6 | 	mov	result1, objptr
16490     00 60 01 FF 
16494     00 FA 45 F5 | 	or	result1, ##46137344
16498     63 00 00 FF 
1649c     80 E4 05 F1 | 	add	objptr, ##50816
164a0     F2 FA 61 FC | 	wrlong	result1, objptr
164a4     63 00 00 FF 
164a8     80 E4 85 F1 | 	sub	objptr, ##50816
164ac     F2 FA 01 F6 | 	mov	result1, objptr
164b0     00 68 01 FF 
164b4     00 FA 45 F5 | 	or	result1, ##47185920
164b8     63 00 00 FF 
164bc     7C E4 05 F1 | 	add	objptr, ##50812
164c0     F2 FA 61 FC | 	wrlong	result1, objptr
164c4     63 00 00 FF 
164c8     7C E4 85 F1 | 	sub	objptr, ##50812
164cc     F2 FA 01 F6 | 	mov	result1, objptr
164d0     00 70 01 FF 
164d4     00 FA 45 F5 | 	or	result1, ##48234496
164d8     63 00 00 FF 
164dc     20 E4 05 F1 | 	add	objptr, ##50720
164e0     F2 FA 61 FC | 	wrlong	result1, objptr
164e4     63 00 00 FF 
164e8     20 E4 85 F1 | 	sub	objptr, ##50720
164ec     F2 FA 01 F6 | 	mov	result1, objptr
164f0     00 78 01 FF 
164f4     00 FA 45 F5 | 	or	result1, ##49283072
164f8     63 00 00 FF 
164fc     24 E4 05 F1 | 	add	objptr, ##50724
16500     F2 FA 61 FC | 	wrlong	result1, objptr
16504     63 00 00 FF 
16508     24 E4 85 F1 | 	sub	objptr, ##50724
1650c     F2 FA 01 F6 | 	mov	result1, objptr
16510     38 FA 25 F4 | 	bith	result1, #56
16514     63 00 00 FF 
16518     8C E4 05 F1 | 	add	objptr, ##50828
1651c     F2 FA 61 FC | 	wrlong	result1, objptr
16520     63 00 00 FF 
16524     8C E4 85 F1 | 	sub	objptr, ##50828
16528     F2 FA 01 F6 | 	mov	result1, objptr
1652c     00 88 01 FF 
16530     00 FA 45 F5 | 	or	result1, ##51380224
16534     63 00 00 FF 
16538     34 E5 05 F1 | 	add	objptr, ##50996
1653c     F2 FA 61 FC | 	wrlong	result1, objptr
16540     63 00 00 FF 
16544     34 E5 85 F1 | 	sub	objptr, ##50996
16548     F2 FA 01 F6 | 	mov	result1, objptr
1654c     00 90 01 FF 
16550     00 FA 45 F5 | 	or	result1, ##52428800
16554     63 00 00 FF 
16558     48 E5 05 F1 | 	add	objptr, ##51016
1655c     F2 FA 61 FC | 	wrlong	result1, objptr
16560     63 00 00 FF 
16564     48 E5 85 F1 | 	sub	objptr, ##51016
16568     F2 FA 01 F6 | 	mov	result1, objptr
1656c     00 98 01 FF 
16570     00 FA 45 F5 | 	or	result1, ##53477376
16574     63 00 00 FF 
16578     54 E5 05 F1 | 	add	objptr, ##51028
1657c     F2 FA 61 FC | 	wrlong	result1, objptr
16580     63 00 00 FF 
16584     54 E5 85 F1 | 	sub	objptr, ##51028
16588     F2 FA 01 F6 | 	mov	result1, objptr
1658c     00 A0 01 FF 
16590     00 FA 45 F5 | 	or	result1, ##54525952
16594     63 00 00 FF 
16598     58 E5 05 F1 | 	add	objptr, ##51032
1659c     F2 FA 61 FC | 	wrlong	result1, objptr
165a0     63 00 00 FF 
165a4     58 E5 85 F1 | 	sub	objptr, ##51032
165a8     F2 FA 01 F6 | 	mov	result1, objptr
165ac     00 A8 01 FF 
165b0     00 FA 45 F5 | 	or	result1, ##55574528
165b4     63 00 00 FF 
165b8     5C E5 05 F1 | 	add	objptr, ##51036
165bc     F2 FA 61 FC | 	wrlong	result1, objptr
165c0     63 00 00 FF 
165c4     5C E5 85 F1 | 	sub	objptr, ##51036
165c8     F2 FA 01 F6 | 	mov	result1, objptr
165cc     00 B0 01 FF 
165d0     00 FA 45 F5 | 	or	result1, ##56623104
165d4     63 00 00 FF 
165d8     60 E5 05 F1 | 	add	objptr, ##51040
165dc     F2 FA 61 FC | 	wrlong	result1, objptr
165e0     63 00 00 FF 
165e4     60 E5 85 F1 | 	sub	objptr, ##51040
165e8     F2 FA 01 F6 | 	mov	result1, objptr
165ec     00 B8 01 FF 
165f0     00 FA 45 F5 | 	or	result1, ##57671680
165f4     63 00 00 FF 
165f8     64 E5 05 F1 | 	add	objptr, ##51044
165fc     F2 FA 61 FC | 	wrlong	result1, objptr
16600     63 00 00 FF 
16604     64 E5 85 F1 | 	sub	objptr, ##51044
16608     F2 FA 01 F6 | 	mov	result1, objptr
1660c     57 FA 25 F4 | 	bith	result1, #87
16610     63 00 00 FF 
16614     68 E5 05 F1 | 	add	objptr, ##51048
16618     F2 FA 61 FC | 	wrlong	result1, objptr
1661c     63 00 00 FF 
16620     68 E5 85 F1 | 	sub	objptr, ##51048
16624     F2 FA 01 F6 | 	mov	result1, objptr
16628     94 FA 25 F4 | 	bith	result1, #148
1662c     63 00 00 FF 
16630     30 E5 05 F1 | 	add	objptr, ##50992
16634     F2 FA 61 FC | 	wrlong	result1, objptr
16638     63 00 00 FF 
1663c     30 E5 85 F1 | 	sub	objptr, ##50992
16640     F2 FA 01 F6 | 	mov	result1, objptr
16644     00 C8 01 FF 
16648     00 FA 45 F5 | 	or	result1, ##59768832
1664c     63 00 00 FF 
16650     70 E5 05 F1 | 	add	objptr, ##51056
16654     F2 FA 61 FC | 	wrlong	result1, objptr
16658     63 00 00 FF 
1665c     70 E5 85 F1 | 	sub	objptr, ##51056
16660     F2 FA 01 F6 | 	mov	result1, objptr
16664     00 D0 01 FF 
16668     00 FA 45 F5 | 	or	result1, ##60817408
1666c     63 00 00 FF 
16670     6C E5 05 F1 | 	add	objptr, ##51052
16674     F2 FA 61 FC | 	wrlong	result1, objptr
16678     63 00 00 FF 
1667c     6C E5 85 F1 | 	sub	objptr, ##51052
16680     F2 FA 01 F6 | 	mov	result1, objptr
16684     00 D8 01 FF 
16688     00 FA 45 F5 | 	or	result1, ##61865984
1668c     63 00 00 FF 
16690     84 E5 05 F1 | 	add	objptr, ##51076
16694     F2 FA 61 FC | 	wrlong	result1, objptr
16698     63 00 00 FF 
1669c     84 E5 85 F1 | 	sub	objptr, ##51076
166a0     F2 FA 01 F6 | 	mov	result1, objptr
166a4     76 FA 25 F4 | 	bith	result1, #118
166a8     63 00 00 FF 
166ac     88 E5 05 F1 | 	add	objptr, ##51080
166b0     F2 FA 61 FC | 	wrlong	result1, objptr
166b4     63 00 00 FF 
166b8     88 E5 85 F1 | 	sub	objptr, ##51080
166bc     F2 FA 01 F6 | 	mov	result1, objptr
166c0     00 E8 01 FF 
166c4     00 FA 45 F5 | 	or	result1, ##63963136
166c8     63 00 00 FF 
166cc     74 E5 05 F1 | 	add	objptr, ##51060
166d0     F2 FA 61 FC | 	wrlong	result1, objptr
166d4     63 00 00 FF 
166d8     74 E5 85 F1 | 	sub	objptr, ##51060
166dc     F2 FA 01 F6 | 	mov	result1, objptr
166e0     95 FA 25 F4 | 	bith	result1, #149
166e4     63 00 00 FF 
166e8     78 E5 05 F1 | 	add	objptr, ##51064
166ec     F2 FA 61 FC | 	wrlong	result1, objptr
166f0     63 00 00 FF 
166f4     78 E5 85 F1 | 	sub	objptr, ##51064
166f8     F2 FA 01 F6 | 	mov	result1, objptr
166fc     B4 FA 25 F4 | 	bith	result1, #180
16700     63 00 00 FF 
16704     7C E5 05 F1 | 	add	objptr, ##51068
16708     F2 FA 61 FC | 	wrlong	result1, objptr
1670c     63 00 00 FF 
16710     7C E5 85 F1 | 	sub	objptr, ##51068
16714     F2 FA 01 F6 | 	mov	result1, objptr
16718     1A FA 25 F4 | 	bith	result1, #26
1671c     63 00 00 FF 
16720     80 E5 05 F1 | 	add	objptr, ##51072
16724     F2 FA 61 FC | 	wrlong	result1, objptr
16728     63 00 00 FF 
1672c     80 E5 85 F1 | 	sub	objptr, ##51072
16730     F2 FA 01 F6 | 	mov	result1, objptr
16734     00 08 02 FF 
16738     00 FA 45 F5 | 	or	result1, ##68157440
1673c     63 00 00 FF 
16740     90 E5 05 F1 | 	add	objptr, ##51088
16744     F2 FA 61 FC | 	wrlong	result1, objptr
16748     63 00 00 FF 
1674c     90 E5 85 F1 | 	sub	objptr, ##51088
16750     F2 FA 01 F6 | 	mov	result1, objptr
16754     00 10 02 FF 
16758     00 FA 45 F5 | 	or	result1, ##69206016
1675c     63 00 00 FF 
16760     8C E5 05 F1 | 	add	objptr, ##51084
16764     F2 FA 61 FC | 	wrlong	result1, objptr
16768     63 00 00 FF 
1676c     8C E5 85 F1 | 	sub	objptr, ##51084
16770     F2 FA 01 F6 | 	mov	result1, objptr
16774     00 18 02 FF 
16778     00 FA 45 F5 | 	or	result1, ##70254592
1677c     63 00 00 FF 
16780     9C E5 05 F1 | 	add	objptr, ##51100
16784     F2 FA 61 FC | 	wrlong	result1, objptr
16788     63 00 00 FF 
1678c     9C E5 85 F1 | 	sub	objptr, ##51100
16790     F2 FA 01 F6 | 	mov	result1, objptr
16794     00 20 02 FF 
16798     00 FA 45 F5 | 	or	result1, ##71303168
1679c     63 00 00 FF 
167a0     98 E5 05 F1 | 	add	objptr, ##51096
167a4     F2 FA 61 FC | 	wrlong	result1, objptr
167a8     63 00 00 FF 
167ac     98 E5 85 F1 | 	sub	objptr, ##51096
167b0     F2 FA 01 F6 | 	mov	result1, objptr
167b4     00 28 02 FF 
167b8     00 FA 45 F5 | 	or	result1, ##72351744
167bc     63 00 00 FF 
167c0     94 E5 05 F1 | 	add	objptr, ##51092
167c4     F2 FA 61 FC | 	wrlong	result1, objptr
167c8     63 00 00 FF 
167cc     94 E5 85 F1 | 	sub	objptr, ##51092
167d0     F2 FA 01 F6 | 	mov	result1, objptr
167d4     00 30 02 FF 
167d8     00 FA 45 F5 | 	or	result1, ##73400320
167dc     63 00 00 FF 
167e0     A0 E5 05 F1 | 	add	objptr, ##51104
167e4     F2 FA 61 FC | 	wrlong	result1, objptr
167e8     63 00 00 FF 
167ec     A0 E5 85 F1 | 	sub	objptr, ##51104
167f0     F2 FA 01 F6 | 	mov	result1, objptr
167f4     00 38 02 FF 
167f8     00 FA 45 F5 | 	or	result1, ##74448896
167fc     63 00 00 FF 
16800     A4 E5 05 F1 | 	add	objptr, ##51108
16804     F2 FA 61 FC | 	wrlong	result1, objptr
16808     63 00 00 FF 
1680c     A4 E5 85 F1 | 	sub	objptr, ##51108
16810     F2 FA 01 F6 | 	mov	result1, objptr
16814     00 40 02 FF 
16818     00 FA 45 F5 | 	or	result1, ##75497472
1681c     63 00 00 FF 
16820     38 E4 05 F1 | 	add	objptr, ##50744
16824     F2 FA 61 FC | 	wrlong	result1, objptr
16828     63 00 00 FF 
1682c     38 E4 85 F1 | 	sub	objptr, ##50744
16830     F2 FA 01 F6 | 	mov	result1, objptr
16834     00 48 02 FF 
16838     00 FA 45 F5 | 	or	result1, ##76546048
1683c     63 00 00 FF 
16840     BC E5 05 F1 | 	add	objptr, ##51132
16844     F2 FA 61 FC | 	wrlong	result1, objptr
16848     63 00 00 FF 
1684c     BC E5 85 F1 | 	sub	objptr, ##51132
16850     F2 FA 01 F6 | 	mov	result1, objptr
16854     00 50 02 FF 
16858     00 FA 45 F5 | 	or	result1, ##77594624
1685c     63 00 00 FF 
16860     CC E5 05 F1 | 	add	objptr, ##51148
16864     F2 FA 61 FC | 	wrlong	result1, objptr
16868     63 00 00 FF 
1686c     CC E5 85 F1 | 	sub	objptr, ##51148
16870     F2 FA 01 F6 | 	mov	result1, objptr
16874     00 58 02 FF 
16878     00 FA 45 F5 | 	or	result1, ##78643200
1687c     63 00 00 FF 
16880     D0 E5 05 F1 | 	add	objptr, ##51152
16884     F2 FA 61 FC | 	wrlong	result1, objptr
16888     63 00 00 FF 
1688c     D0 E5 85 F1 | 	sub	objptr, ##51152
16890     F2 FA 01 F6 | 	mov	result1, objptr
16894     00 60 02 FF 
16898     00 FA 45 F5 | 	or	result1, ##79691776
1689c     63 00 00 FF 
168a0     C8 E5 05 F1 | 	add	objptr, ##51144
168a4     F2 FA 61 FC | 	wrlong	result1, objptr
168a8     63 00 00 FF 
168ac     C8 E5 85 F1 | 	sub	objptr, ##51144
168b0     F2 FA 01 F6 | 	mov	result1, objptr
168b4     00 68 02 FF 
168b8     00 FA 45 F5 | 	or	result1, ##80740352
168bc     63 00 00 FF 
168c0     C0 E5 05 F1 | 	add	objptr, ##51136
168c4     F2 FA 61 FC | 	wrlong	result1, objptr
168c8     63 00 00 FF 
168cc     C0 E5 85 F1 | 	sub	objptr, ##51136
168d0     F2 FA 01 F6 | 	mov	result1, objptr
168d4     00 70 02 FF 
168d8     00 FA 45 F5 | 	or	result1, ##81788928
168dc     63 00 00 FF 
168e0     C4 E5 05 F1 | 	add	objptr, ##51140
168e4     F2 FA 61 FC | 	wrlong	result1, objptr
168e8     63 00 00 FF 
168ec     C4 E5 85 F1 | 	sub	objptr, ##51140
168f0     F2 FA 01 F6 | 	mov	result1, objptr
168f4     00 78 02 FF 
168f8     00 FA 45 F5 | 	or	result1, ##82837504
168fc     63 00 00 FF 
16900     D4 E5 05 F1 | 	add	objptr, ##51156
16904     F2 FA 61 FC | 	wrlong	result1, objptr
16908     63 00 00 FF 
1690c     D4 E5 85 F1 | 	sub	objptr, ##51156
16910     F2 FA 01 F6 | 	mov	result1, objptr
16914     00 80 02 FF 
16918     00 FA 45 F5 | 	or	result1, ##83886080
1691c     63 00 00 FF 
16920     D8 E5 05 F1 | 	add	objptr, ##51160
16924     F2 FA 61 FC | 	wrlong	result1, objptr
16928     63 00 00 FF 
1692c     D8 E5 85 F1 | 	sub	objptr, ##51160
16930     F2 FA 01 F6 | 	mov	result1, objptr
16934     00 88 02 FF 
16938     00 FA 45 F5 | 	or	result1, ##84934656
1693c     63 00 00 FF 
16940     DC E5 05 F1 | 	add	objptr, ##51164
16944     F2 FA 61 FC | 	wrlong	result1, objptr
16948     63 00 00 FF 
1694c     DC E5 85 F1 | 	sub	objptr, ##51164
16950     F2 FA 01 F6 | 	mov	result1, objptr
16954     00 90 02 FF 
16958     00 FA 45 F5 | 	or	result1, ##85983232
1695c     63 00 00 FF 
16960     E0 E5 05 F1 | 	add	objptr, ##51168
16964     F2 FA 61 FC | 	wrlong	result1, objptr
16968     63 00 00 FF 
1696c     E0 E5 85 F1 | 	sub	objptr, ##51168
16970     F2 FA 01 F6 | 	mov	result1, objptr
16974     00 98 02 FF 
16978     00 FA 45 F5 | 	or	result1, ##87031808
1697c     63 00 00 FF 
16980     E4 E5 05 F1 | 	add	objptr, ##51172
16984     F2 FA 61 FC | 	wrlong	result1, objptr
16988     63 00 00 FF 
1698c     E4 E5 85 F1 | 	sub	objptr, ##51172
16990     F2 FA 01 F6 | 	mov	result1, objptr
16994     00 A0 02 FF 
16998     00 FA 45 F5 | 	or	result1, ##88080384
1699c     63 00 00 FF 
169a0     E8 E5 05 F1 | 	add	objptr, ##51176
169a4     F2 FA 61 FC | 	wrlong	result1, objptr
169a8     63 00 00 FF 
169ac     E8 E5 85 F1 | 	sub	objptr, ##51176
169b0     F2 FA 01 F6 | 	mov	result1, objptr
169b4     00 A8 02 FF 
169b8     00 FA 45 F5 | 	or	result1, ##89128960
169bc     63 00 00 FF 
169c0     EC E5 05 F1 | 	add	objptr, ##51180
169c4     F2 FA 61 FC | 	wrlong	result1, objptr
169c8     63 00 00 FF 
169cc     EC E5 85 F1 | 	sub	objptr, ##51180
169d0     F2 FA 01 F6 | 	mov	result1, objptr
169d4     00 B0 02 FF 
169d8     00 FA 45 F5 | 	or	result1, ##90177536
169dc     63 00 00 FF 
169e0     F0 E5 05 F1 | 	add	objptr, ##51184
169e4     F2 FA 61 FC | 	wrlong	result1, objptr
169e8     63 00 00 FF 
169ec     F0 E5 85 F1 | 	sub	objptr, ##51184
169f0     F2 FA 01 F6 | 	mov	result1, objptr
169f4     00 B8 02 FF 
169f8     00 FA 45 F5 | 	or	result1, ##91226112
169fc     63 00 00 FF 
16a00     FC E5 05 F1 | 	add	objptr, ##51196
16a04     F2 FA 61 FC | 	wrlong	result1, objptr
16a08     63 00 00 FF 
16a0c     FC E5 85 F1 | 	sub	objptr, ##51196
16a10     F2 FA 01 F6 | 	mov	result1, objptr
16a14     00 C0 02 FF 
16a18     00 FA 45 F5 | 	or	result1, ##92274688
16a1c     63 00 00 FF 
16a20     F4 E5 05 F1 | 	add	objptr, ##51188
16a24     F2 FA 61 FC | 	wrlong	result1, objptr
16a28     63 00 00 FF 
16a2c     F4 E5 85 F1 | 	sub	objptr, ##51188
16a30     F2 FA 01 F6 | 	mov	result1, objptr
16a34     00 C8 02 FF 
16a38     00 FA 45 F5 | 	or	result1, ##93323264
16a3c     63 00 00 FF 
16a40     F8 E5 05 F1 | 	add	objptr, ##51192
16a44     F2 FA 61 FC | 	wrlong	result1, objptr
16a48     63 00 00 FF 
16a4c     F8 E5 85 F1 | 	sub	objptr, ##51192
16a50     F2 FA 01 F6 | 	mov	result1, objptr
16a54     00 D0 02 FF 
16a58     00 FA 45 F5 | 	or	result1, ##94371840
16a5c     64 00 00 FF 
16a60     00 E4 05 F1 | 	add	objptr, ##51200
16a64     F2 FA 61 FC | 	wrlong	result1, objptr
16a68     64 00 00 FF 
16a6c     00 E4 85 F1 | 	sub	objptr, ##51200
16a70     F2 FA 01 F6 | 	mov	result1, objptr
16a74     00 D8 02 FF 
16a78     00 FA 45 F5 | 	or	result1, ##95420416
16a7c     63 00 00 FF 
16a80     A8 E5 05 F1 | 	add	objptr, ##51112
16a84     F2 FA 61 FC | 	wrlong	result1, objptr
16a88     63 00 00 FF 
16a8c     A8 E5 85 F1 | 	sub	objptr, ##51112
16a90     F2 FA 01 F6 | 	mov	result1, objptr
16a94     00 E0 02 FF 
16a98     00 FA 45 F5 | 	or	result1, ##96468992
16a9c     63 00 00 FF 
16aa0     B0 E5 05 F1 | 	add	objptr, ##51120
16aa4     F2 FA 61 FC | 	wrlong	result1, objptr
16aa8     63 00 00 FF 
16aac     B0 E5 85 F1 | 	sub	objptr, ##51120
16ab0     F2 FA 01 F6 | 	mov	result1, objptr
16ab4     00 E8 02 FF 
16ab8     00 FA 45 F5 | 	or	result1, ##97517568
16abc     63 00 00 FF 
16ac0     B4 E5 05 F1 | 	add	objptr, ##51124
16ac4     F2 FA 61 FC | 	wrlong	result1, objptr
16ac8     63 00 00 FF 
16acc     B4 E5 85 F1 | 	sub	objptr, ##51124
16ad0     F2 FA 01 F6 | 	mov	result1, objptr
16ad4     00 F0 02 FF 
16ad8     00 FA 45 F5 | 	or	result1, ##98566144
16adc     64 00 00 FF 
16ae0     04 E4 05 F1 | 	add	objptr, ##51204
16ae4     F2 FA 61 FC | 	wrlong	result1, objptr
16ae8     64 00 00 FF 
16aec     04 E4 85 F1 | 	sub	objptr, ##51204
16af0     F2 FA 01 F6 | 	mov	result1, objptr
16af4     00 F8 02 FF 
16af8     00 FA 45 F5 | 	or	result1, ##99614720
16afc     64 00 00 FF 
16b00     08 E4 05 F1 | 	add	objptr, ##51208
16b04     F2 FA 61 FC | 	wrlong	result1, objptr
16b08     64 00 00 FF 
16b0c     08 E4 85 F1 | 	sub	objptr, ##51208
16b10     F2 FA 01 F6 | 	mov	result1, objptr
16b14     39 FA 25 F4 | 	bith	result1, #57
16b18     64 00 00 FF 
16b1c     0C E4 05 F1 | 	add	objptr, ##51212
16b20     F2 FA 61 FC | 	wrlong	result1, objptr
16b24     64 00 00 FF 
16b28     0C E4 85 F1 | 	sub	objptr, ##51212
16b2c     F2 FA 01 F6 | 	mov	result1, objptr
16b30     00 08 03 FF 
16b34     00 FA 45 F5 | 	or	result1, ##101711872
16b38     63 00 00 FF 
16b3c     B8 E5 05 F1 | 	add	objptr, ##51128
16b40     F2 FA 61 FC | 	wrlong	result1, objptr
16b44     63 00 00 FF 
16b48     B8 E5 85 F1 | 	sub	objptr, ##51128
16b4c     F2 FA 01 F6 | 	mov	result1, objptr
16b50     00 10 03 FF 
16b54     00 FA 45 F5 | 	or	result1, ##102760448
16b58     64 00 00 FF 
16b5c     1C E4 05 F1 | 	add	objptr, ##51228
16b60     F2 FA 61 FC | 	wrlong	result1, objptr
16b64     64 00 00 FF 
16b68     1C E4 85 F1 | 	sub	objptr, ##51228
16b6c     F2 FA 01 F6 | 	mov	result1, objptr
16b70     00 18 03 FF 
16b74     00 FA 45 F5 | 	or	result1, ##103809024
16b78     64 00 00 FF 
16b7c     24 E4 05 F1 | 	add	objptr, ##51236
16b80     F2 FA 61 FC | 	wrlong	result1, objptr
16b84     64 00 00 FF 
16b88     24 E4 85 F1 | 	sub	objptr, ##51236
16b8c     F2 FA 01 F6 | 	mov	result1, objptr
16b90     00 20 03 FF 
16b94     00 FA 45 F5 | 	or	result1, ##104857600
16b98     64 00 00 FF 
16b9c     18 E4 05 F1 | 	add	objptr, ##51224
16ba0     F2 FA 61 FC | 	wrlong	result1, objptr
16ba4     64 00 00 FF 
16ba8     18 E4 85 F1 | 	sub	objptr, ##51224
16bac     F2 FA 01 F6 | 	mov	result1, objptr
16bb0     00 28 03 FF 
16bb4     00 FA 45 F5 | 	or	result1, ##105906176
16bb8     64 00 00 FF 
16bbc     14 E4 05 F1 | 	add	objptr, ##51220
16bc0     F2 FA 61 FC | 	wrlong	result1, objptr
16bc4     64 00 00 FF 
16bc8     14 E4 85 F1 | 	sub	objptr, ##51220
16bcc     F2 FA 01 F6 | 	mov	result1, objptr
16bd0     00 30 03 FF 
16bd4     00 FA 45 F5 | 	or	result1, ##106954752
16bd8     64 00 00 FF 
16bdc     10 E4 05 F1 | 	add	objptr, ##51216
16be0     F2 FA 61 FC | 	wrlong	result1, objptr
16be4     64 00 00 FF 
16be8     10 E4 85 F1 | 	sub	objptr, ##51216
16bec     F2 FA 01 F6 | 	mov	result1, objptr
16bf0     00 38 03 FF 
16bf4     00 FA 45 F5 | 	or	result1, ##108003328
16bf8     64 00 00 FF 
16bfc     20 E4 05 F1 | 	add	objptr, ##51232
16c00     F2 FA 61 FC | 	wrlong	result1, objptr
16c04     64 00 00 FF 
16c08     20 E4 85 F1 | 	sub	objptr, ##51232
16c0c     F2 FA 01 F6 | 	mov	result1, objptr
16c10     00 40 03 FF 
16c14     00 FA 45 F5 | 	or	result1, ##109051904
16c18     64 00 00 FF 
16c1c     28 E4 05 F1 | 	add	objptr, ##51240
16c20     F2 FA 61 FC | 	wrlong	result1, objptr
16c24     64 00 00 FF 
16c28     28 E4 85 F1 | 	sub	objptr, ##51240
16c2c     F2 FA 01 F6 | 	mov	result1, objptr
16c30     00 48 03 FF 
16c34     00 FA 45 F5 | 	or	result1, ##110100480
16c38     64 00 00 FF 
16c3c     2C E4 05 F1 | 	add	objptr, ##51244
16c40     F2 FA 61 FC | 	wrlong	result1, objptr
16c44     64 00 00 FF 
16c48     2C E4 85 F1 | 	sub	objptr, ##51244
16c4c     F2 FA 01 F6 | 	mov	result1, objptr
16c50     00 50 03 FF 
16c54     00 FA 45 F5 | 	or	result1, ##111149056
16c58     64 00 00 FF 
16c5c     30 E4 05 F1 | 	add	objptr, ##51248
16c60     F2 FA 61 FC | 	wrlong	result1, objptr
16c64     64 00 00 FF 
16c68     30 E4 85 F1 | 	sub	objptr, ##51248
16c6c                 | _init_commands_ret
16c6c     2D 00 64 FD | 	ret
16c70                 | 
16c70                 | ' 
16c70                 | ' ''--------------------------------Error strings -------------------------------------
16c70                 | ' sub init_audio
16c70                 | _init_audio
16c70     05 4A 05 F6 | 	mov	COUNT_, #5
16c74     A8 00 A0 FD | 	call	#pushregs_
16c78     00 C0 1F FF 
16c7c     00 1E 06 F6 | 	mov	local01, ##1065353216
16c80                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
16c80     00 20 06 F6 | 	mov	local02, #0
16c84                 | LR__1730
16c84     10 23 02 F6 | 	mov	local03, local02
16c88     01 22 66 F0 | 	shl	local03, #1
16c8c     0C 00 00 FF 
16c90     CC E4 05 F1 | 	add	objptr, ##6348
16c94     F2 22 02 F1 | 	add	local03, objptr
16c98     58 7F 23 FF 
16c9c     00 24 06 F6 | 	mov	local04, ##1191096320
16ca0     0C 00 00 FF 
16ca4     CC E4 85 F1 | 	sub	objptr, ##6348
16ca8     10 13 52 F6 | 	abs	arg01, local02 wc
16cac     1F 26 C6 C9 |  if_b	decod	local05, #31
16cb0     00 26 06 36 |  if_ae	mov	local05, #0
16cb4     80 67 B0 FD | 	call	#__system___float_fromuns
16cb8     13 FB 61 F5 | 	xor	result1, local05
16cbc     FD 12 02 F6 | 	mov	arg01, result1
16cc0     87 24 20 FF 
16cc4     DB 15 06 F6 | 	mov	arg02, ##1078530011
16cc8     70 6B B0 FD | 	call	#__system___float_mul
16ccc     FD 12 02 F6 | 	mov	arg01, result1
16cd0     00 00 22 FF 
16cd4     00 14 06 F6 | 	mov	arg02, ##1140850688
16cd8     64 6D B0 FD | 	call	#__system___float_div
16cdc     FD 12 02 F6 | 	mov	arg01, result1
16ce0     94 74 B0 FD | 	call	#__system____builtin_sinf
16ce4     FD 14 02 F6 | 	mov	arg02, result1
16ce8     12 13 02 F6 | 	mov	arg01, local04
16cec     4C 6B B0 FD | 	call	#__system___float_mul
16cf0     FD 12 02 F6 | 	mov	arg01, result1
16cf4     01 14 06 F6 | 	mov	arg02, #1
16cf8     08 70 B0 FD | 	call	#__system___float_tointeger
16cfc     11 FB 51 FC | 	wrword	result1, local03
16d00     01 20 06 F1 | 	add	local02, #1
16d04     02 00 00 FF 
16d08     00 20 56 F2 | 	cmps	local02, ##1024 wc
16d0c     74 FF 9F CD |  if_b	jmp	#LR__1730
16d10                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
16d10     00 20 06 F6 | 	mov	local02, #0
16d14     10 00 00 FF 
16d18     CC E4 05 F1 | 	add	objptr, ##8396
16d1c     97 6A 48 FB | 	callpa	#(@LR__1734-@LR__1731)>>2,fcache_load_ptr_
16d20                 | LR__1731
16d20     10 23 02 F6 | 	mov	local03, local02
16d24     01 22 66 F0 | 	shl	local03, #1
16d28     F2 22 02 F1 | 	add	local03, objptr
16d2c     10 27 02 F6 | 	mov	local05, local02
16d30     07 26 66 F0 | 	shl	local05, #7
16d34     10 27 82 F1 | 	sub	local05, local02
16d38     C0 FF 7F FF 
16d3c     00 25 06 F6 | 	mov	local04, ##-32512
16d40     13 25 02 F1 | 	add	local04, local05
16d44     11 25 52 FC | 	wrword	local04, local03
16d48     09 22 C6 F9 | 	decod	local03, #9
16d4c     10 23 02 F1 | 	add	local03, local02
16d50     01 22 66 F0 | 	shl	local03, #1
16d54     F2 22 02 F1 | 	add	local03, objptr
16d58     10 25 02 F6 | 	mov	local04, local02
16d5c     01 24 66 F0 | 	shl	local04, #1
16d60     F2 24 02 F1 | 	add	local04, objptr
16d64     12 25 E2 FA | 	rdword	local04, local04
16d68     0F 24 66 F7 | 	signx	local04, #15
16d6c     12 25 62 F6 | 	neg	local04, local04
16d70     11 25 52 FC | 	wrword	local04, local03
16d74     01 20 06 F1 | 	add	local02, #1
16d78     01 00 00 FF 
16d7c     00 20 56 F2 | 	cmps	local02, ##512 wc
16d80     9C FF 9F CD |  if_b	jmp	#LR__1731
16d84                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
16d84     00 20 06 F6 | 	mov	local02, #0
16d88     04 00 00 FF 
16d8c     00 E4 05 F1 | 	add	objptr, ##2048
16d90                 | LR__1732
16d90     10 23 02 F6 | 	mov	local03, local02
16d94     01 22 66 F0 | 	shl	local03, #1
16d98     F2 22 02 F1 | 	add	local03, objptr
16d9c     10 27 02 F6 | 	mov	local05, local02
16da0     06 26 66 F0 | 	shl	local05, #6
16da4     10 27 82 F1 | 	sub	local05, local02
16da8     C1 FF 7F FF 
16dac     00 24 06 F6 | 	mov	local04, ##-32256
16db0     13 25 02 F1 | 	add	local04, local05
16db4     11 25 52 FC | 	wrword	local04, local03
16db8     01 20 06 F1 | 	add	local02, #1
16dbc     02 00 00 FF 
16dc0     00 20 56 F2 | 	cmps	local02, ##1024 wc
16dc4     C8 FF 9F CD |  if_b	jmp	#LR__1732
16dc8                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
16dc8     00 20 06 F6 | 	mov	local02, #0
16dcc     04 00 00 FF 
16dd0     00 E4 05 F1 | 	add	objptr, ##2048
16dd4                 | LR__1733
16dd4     10 23 02 F6 | 	mov	local03, local02
16dd8     01 22 66 F0 | 	shl	local03, #1
16ddc     F2 22 02 F1 | 	add	local03, objptr
16de0     40 00 80 FF 
16de4     11 51 59 FC | 	wrword	##32936, local03
16de8     01 20 06 F1 | 	add	local02, #1
16dec     80 20 56 F2 | 	cmps	local02, #128 wc
16df0     E0 FF 9F CD |  if_b	jmp	#LR__1733
16df4                 | LR__1734
16df4     80 20 06 F6 | 	mov	local02, #128
16df8     97 68 48 FB | 	callpa	#(@LR__1740-@LR__1735)>>2,fcache_load_ptr_
16dfc                 | LR__1735
16dfc     10 23 02 F6 | 	mov	local03, local02
16e00     01 22 66 F0 | 	shl	local03, #1
16e04     F2 22 02 F1 | 	add	local03, objptr
16e08     3F 00 80 FF 
16e0c     11 B1 5A FC | 	wrword	##32600, local03
16e10     01 20 06 F1 | 	add	local02, #1
16e14     02 00 00 FF 
16e18     00 20 16 F2 | 	cmp	local02, ##1024 wc
16e1c     DC FF 9F CD |  if_b	jmp	#LR__1735
16e20                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
16e20     00 20 06 F6 | 	mov	local02, #0
16e24     04 00 00 FF 
16e28     00 E4 05 F1 | 	add	objptr, ##2048
16e2c                 | LR__1736
16e2c     10 23 02 F6 | 	mov	local03, local02
16e30     01 22 66 F0 | 	shl	local03, #1
16e34     F2 22 02 F1 | 	add	local03, objptr
16e38     40 00 80 FF 
16e3c     11 51 59 FC | 	wrword	##32936, local03
16e40     01 20 06 F1 | 	add	local02, #1
16e44     01 00 00 FF 
16e48     00 20 56 F2 | 	cmps	local02, ##512 wc
16e4c     DC FF 9F CD |  if_b	jmp	#LR__1736
16e50     09 20 C6 F9 | 	decod	local02, #9
16e54                 | LR__1737
16e54     10 23 02 F6 | 	mov	local03, local02
16e58     01 22 66 F0 | 	shl	local03, #1
16e5c     F2 22 02 F1 | 	add	local03, objptr
16e60     3F 00 80 FF 
16e64     11 B1 5A FC | 	wrword	##32600, local03
16e68     01 20 06 F1 | 	add	local02, #1
16e6c     02 00 00 FF 
16e70     00 20 16 F2 | 	cmp	local02, ##1024 wc
16e74     DC FF 9F CD |  if_b	jmp	#LR__1737
16e78                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
16e78     00 20 06 F6 | 	mov	local02, #0
16e7c     04 00 00 FF 
16e80     00 E4 05 F1 | 	add	objptr, ##2048
16e84                 | LR__1738
16e84     10 23 02 F6 | 	mov	local03, local02
16e88     01 22 66 F0 | 	shl	local03, #1
16e8c     F2 22 02 F1 | 	add	local03, objptr
16e90     40 00 80 FF 
16e94     11 51 59 FC | 	wrword	##32936, local03
16e98     01 20 06 F1 | 	add	local02, #1
16e9c     00 21 56 F2 | 	cmps	local02, #256 wc
16ea0     E0 FF 9F CD |  if_b	jmp	#LR__1738
16ea4     00 21 06 F6 | 	mov	local02, #256
16ea8                 | LR__1739
16ea8     10 23 02 F6 | 	mov	local03, local02
16eac     01 22 66 F0 | 	shl	local03, #1
16eb0     F2 22 02 F1 | 	add	local03, objptr
16eb4     3F 00 80 FF 
16eb8     11 B1 5A FC | 	wrword	##32600, local03
16ebc     01 20 06 F1 | 	add	local02, #1
16ec0     02 00 00 FF 
16ec4     00 20 16 F2 | 	cmp	local02, ##1024 wc
16ec8     DC FF 9F CD |  if_b	jmp	#LR__1739
16ecc                 | LR__1740
16ecc                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
16ecc     00 20 06 F6 | 	mov	local02, #0
16ed0     04 00 00 FF 
16ed4     00 E4 05 F1 | 	add	objptr, ##2048
16ed8     14 00 00 FF 
16edc     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
16ee0     97 1C 48 FB | 	callpa	#(@LR__1742-@LR__1741)>>2,fcache_load_ptr_
16ee4                 | LR__1741
16ee4     10 23 02 F6 | 	mov	local03, local02
16ee8     01 22 66 F0 | 	shl	local03, #1
16eec     F2 22 02 F1 | 	add	local03, objptr
16ef0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
16ef4     10 12 06 F1 | 	add	arg01, #16
16ef8     10 FB 01 F6 | 	mov	result1, local02
16efc     01 FA 65 F0 | 	shl	result1, #1
16f00     FD 12 02 F1 | 	add	arg01, result1
16f04     09 FB E1 FA | 	rdword	result1, arg01
16f08     11 FB 51 FC | 	wrword	result1, local03
16f0c     01 20 06 F1 | 	add	local02, #1
16f10     02 00 00 FF 
16f14     00 20 56 F2 | 	cmps	local02, ##1024 wc
16f18     C8 FF 9F CD |  if_b	jmp	#LR__1741
16f1c                 | LR__1742
16f1c                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
16f1c     00 20 06 F6 | 	mov	local02, #0
16f20     04 00 00 FF 
16f24     00 E4 05 F1 | 	add	objptr, ##2048
16f28     04 00 00 FF 
16f2c     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
16f30     97 1C 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
16f34                 | LR__1743
16f34     10 23 02 F6 | 	mov	local03, local02
16f38     01 22 66 F0 | 	shl	local03, #1
16f3c     F2 22 02 F1 | 	add	local03, objptr
16f40     F5 12 02 F6 | 	mov	arg01, ptr__dat__
16f44     10 12 06 F1 | 	add	arg01, #16
16f48     10 FB 01 F6 | 	mov	result1, local02
16f4c     01 FA 65 F0 | 	shl	result1, #1
16f50     FD 12 02 F1 | 	add	arg01, result1
16f54     09 FB E1 FA | 	rdword	result1, arg01
16f58     11 FB 51 FC | 	wrword	result1, local03
16f5c     01 20 06 F1 | 	add	local02, #1
16f60     02 00 00 FF 
16f64     00 20 56 F2 | 	cmps	local02, ##1024 wc
16f68     C8 FF 9F CD |  if_b	jmp	#LR__1743
16f6c                 | LR__1744
16f6c     10 00 00 FF 
16f70     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
16f74                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
16f74     00 20 06 F6 | 	mov	local02, #0
16f78     04 00 00 FF 
16f7c     00 E4 05 F1 | 	add	objptr, ##2048
16f80     97 18 48 FB | 	callpa	#(@LR__1746-@LR__1745)>>2,fcache_load_ptr_
16f84                 | LR__1745
16f84     10 23 02 F6 | 	mov	local03, local02
16f88     01 22 66 F0 | 	shl	local03, #1
16f8c     F2 22 02 F1 | 	add	local03, objptr
16f90     10 27 02 F6 | 	mov	local05, local02
16f94     08 26 66 F0 | 	shl	local05, #8
16f98     7F 00 00 FF 
16f9c     00 25 06 F6 | 	mov	local04, ##65280
16fa0     13 25 82 F1 | 	sub	local04, local05
16fa4     11 25 52 FC | 	wrword	local04, local03
16fa8     01 20 06 F1 | 	add	local02, #1
16fac     00 21 56 F2 | 	cmps	local02, #256 wc
16fb0     D0 FF 9F CD |  if_b	jmp	#LR__1745
16fb4                 | LR__1746
16fb4     2C 00 00 FF 
16fb8     CC E4 85 F1 | 	sub	objptr, ##22732
16fbc                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
16fbc     00 20 06 F6 | 	mov	local02, #0
16fc0                 | LR__1747
16fc0     10 23 02 F6 | 	mov	local03, local02
16fc4     01 22 66 F0 | 	shl	local03, #1
16fc8     2D 00 00 FF 
16fcc     CC E4 05 F1 | 	add	objptr, ##23244
16fd0     F2 22 02 F1 | 	add	local03, objptr
16fd4     80 BF 23 FF 
16fd8     00 12 06 F6 | 	mov	arg01, ##1199505408
16fdc     0F 15 02 F6 | 	mov	arg02, local01
16fe0     2D 00 00 FF 
16fe4     CC E4 85 F1 | 	sub	objptr, ##23244
16fe8     50 68 B0 FD | 	call	#__system___float_mul
16fec     FD 12 02 F6 | 	mov	arg01, result1
16ff0     01 14 06 F6 | 	mov	arg02, #1
16ff4     0C 6D B0 FD | 	call	#__system___float_tointeger
16ff8     11 FB 51 FC | 	wrword	result1, local03
16ffc     0F 13 02 F6 | 	mov	arg01, local01
17000     CC BC 1F FF 
17004     9A 15 06 F6 | 	mov	arg02, ##1064933786
17008     30 68 B0 FD | 	call	#__system___float_mul
1700c     FD 1E 02 F6 | 	mov	local01, result1
17010     01 20 06 F1 | 	add	local02, #1
17014     00 21 56 F2 | 	cmps	local02, #256 wc
17018     A4 FF 9F CD |  if_b	jmp	#LR__1747
1701c     2E 00 00 FF 
17020     CA E4 05 F1 | 	add	objptr, ##23754
17024     F2 00 58 FC | 	wrword	#0, objptr
17028                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
17028     00 20 06 F6 | 	mov	local02, #0
1702c     02 E4 05 F1 | 	add	objptr, #2
17030     97 10 48 FB | 	callpa	#(@LR__1749-@LR__1748)>>2,fcache_load_ptr_
17034                 | LR__1748
17034     10 23 02 F6 | 	mov	local03, local02
17038     01 22 66 F0 | 	shl	local03, #1
1703c     F2 22 02 F1 | 	add	local03, objptr
17040     7F 00 80 FF 
17044     11 01 5A FC | 	wrword	##65280, local03
17048     01 20 06 F1 | 	add	local02, #1
1704c     FF 20 56 F2 | 	cmps	local02, #255 wc
17050     E0 FF 9F CD |  if_b	jmp	#LR__1748
17054                 | LR__1749
17054     FE E5 05 F1 | 	add	objptr, #510
17058     F2 00 58 FC | 	wrword	#0, objptr
1705c                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1705c     00 20 06 F6 | 	mov	local02, #0
17060     02 E4 05 F1 | 	add	objptr, #2
17064     97 52 48 FB | 	callpa	#(@LR__1754-@LR__1750)>>2,fcache_load_ptr_
17068                 | LR__1750
17068     10 23 02 F6 | 	mov	local03, local02
1706c     01 22 66 F0 | 	shl	local03, #1
17070     F2 22 02 F1 | 	add	local03, objptr
17074     10 25 02 F6 | 	mov	local04, local02
17078     0C 24 66 F0 | 	shl	local04, #12
1707c     11 25 52 FC | 	wrword	local04, local03
17080     01 20 06 F1 | 	add	local02, #1
17084     10 20 56 F2 | 	cmps	local02, #16 wc
17088     DC FF 9F CD |  if_b	jmp	#LR__1750
1708c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1708c     10 20 06 F6 | 	mov	local02, #16
17090                 | LR__1751
17090     10 23 02 F6 | 	mov	local03, local02
17094     01 22 66 F0 | 	shl	local03, #1
17098     F2 22 02 F1 | 	add	local03, objptr
1709c     7F 00 80 FF 
170a0     11 01 5A FC | 	wrword	##65280, local03
170a4     01 20 06 F1 | 	add	local02, #1
170a8     F0 20 16 F2 | 	cmp	local02, #240 wc
170ac     E0 FF 9F CD |  if_b	jmp	#LR__1751
170b0                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
170b0     F0 20 06 F6 | 	mov	local02, #240
170b4                 | LR__1752
170b4     10 23 02 F6 | 	mov	local03, local02
170b8     01 22 66 F0 | 	shl	local03, #1
170bc     F2 22 02 F1 | 	add	local03, objptr
170c0     FF 26 06 F6 | 	mov	local05, #255
170c4     10 27 82 F1 | 	sub	local05, local02
170c8     0C 26 66 F0 | 	shl	local05, #12
170cc     11 27 52 FC | 	wrword	local05, local03
170d0     01 20 06 F1 | 	add	local02, #1
170d4     00 21 16 F2 | 	cmp	local02, #256 wc
170d8     D8 FF 9F CD |  if_b	jmp	#LR__1752
170dc                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
170dc     00 20 06 F6 | 	mov	local02, #0
170e0     01 00 00 FF 
170e4     00 E4 05 F1 | 	add	objptr, ##512
170e8                 | LR__1753
170e8     10 23 02 F6 | 	mov	local03, local02
170ec     01 22 66 F0 | 	shl	local03, #1
170f0     F2 22 02 F1 | 	add	local03, objptr
170f4     10 25 02 F6 | 	mov	local04, local02
170f8     08 24 66 F0 | 	shl	local04, #8
170fc     11 25 52 FC | 	wrword	local04, local03
17100     01 20 06 F1 | 	add	local02, #1
17104     00 21 56 F2 | 	cmps	local02, #256 wc
17108     DC FF 9F CD |  if_b	jmp	#LR__1753
1710c                 | LR__1754
1710c     FE E5 05 F1 | 	add	objptr, #510
17110     F2 00 58 FC | 	wrword	#0, objptr
17114                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
17114     00 20 06 F6 | 	mov	local02, #0
17118     02 E4 05 F1 | 	add	objptr, #2
1711c     97 6A 48 FB | 	callpa	#(@LR__1759-@LR__1755)>>2,fcache_load_ptr_
17120                 | LR__1755
17120     10 23 02 F6 | 	mov	local03, local02
17124     01 22 66 F0 | 	shl	local03, #1
17128     F2 22 02 F1 | 	add	local03, objptr
1712c     10 25 02 F6 | 	mov	local04, local02
17130     04 24 66 F0 | 	shl	local04, #4
17134     10 25 02 F1 | 	add	local04, local02
17138     04 24 66 F0 | 	shl	local04, #4
1713c     11 25 52 FC | 	wrword	local04, local03
17140     01 20 06 F1 | 	add	local02, #1
17144     F0 20 56 F2 | 	cmps	local02, #240 wc
17148     D4 FF 9F CD |  if_b	jmp	#LR__1755
1714c     F0 20 06 F6 | 	mov	local02, #240
17150                 | LR__1756
17150     10 23 02 F6 | 	mov	local03, local02
17154     01 22 66 F0 | 	shl	local03, #1
17158     F2 22 02 F1 | 	add	local03, objptr
1715c     FF 26 06 F6 | 	mov	local05, #255
17160     10 27 82 F1 | 	sub	local05, local02
17164     0C 26 66 F0 | 	shl	local05, #12
17168     11 27 52 FC | 	wrword	local05, local03
1716c     01 20 06 F1 | 	add	local02, #1
17170     00 21 16 F2 | 	cmp	local02, #256 wc
17174     D8 FF 9F CD |  if_b	jmp	#LR__1756
17178                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
17178     00 20 06 F6 | 	mov	local02, #0
1717c     01 00 00 FF 
17180     00 E4 05 F1 | 	add	objptr, ##512
17184                 | LR__1757
17184     10 23 02 F6 | 	mov	local03, local02
17188     01 22 66 F0 | 	shl	local03, #1
1718c     F2 22 02 F1 | 	add	local03, objptr
17190     10 25 02 F6 | 	mov	local04, local02
17194     09 24 66 F0 | 	shl	local04, #9
17198     11 25 52 FC | 	wrword	local04, local03
1719c     FF 22 06 F6 | 	mov	local03, #255
171a0     10 23 82 F1 | 	sub	local03, local02
171a4     01 22 66 F0 | 	shl	local03, #1
171a8     F2 22 02 F1 | 	add	local03, objptr
171ac     10 25 02 F6 | 	mov	local04, local02
171b0     09 24 66 F0 | 	shl	local04, #9
171b4     11 25 52 FC | 	wrword	local04, local03
171b8     01 20 06 F1 | 	add	local02, #1
171bc     80 20 56 F2 | 	cmps	local02, #128 wc
171c0     C0 FF 9F CD |  if_b	jmp	#LR__1757
171c4                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
171c4     00 20 06 F6 | 	mov	local02, #0
171c8     01 00 00 FF 
171cc     00 E4 05 F1 | 	add	objptr, ##512
171d0                 | LR__1758
171d0     10 23 02 F6 | 	mov	local03, local02
171d4     01 22 66 F0 | 	shl	local03, #1
171d8     F2 22 02 F1 | 	add	local03, objptr
171dc     10 25 02 F6 | 	mov	local04, local02
171e0     0D 24 66 F0 | 	shl	local04, #13
171e4     11 25 52 FC | 	wrword	local04, local03
171e8     01 20 06 F1 | 	add	local02, #1
171ec     08 20 56 F2 | 	cmps	local02, #8 wc
171f0     DC FF 9F CD |  if_b	jmp	#LR__1758
171f4                 | LR__1759
171f4                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
171f4     08 20 06 F6 | 	mov	local02, #8
171f8     97 42 48 FB | 	callpa	#(@LR__1763-@LR__1760)>>2,fcache_load_ptr_
171fc                 | LR__1760
171fc     10 23 02 F6 | 	mov	local03, local02
17200     01 22 66 F0 | 	shl	local03, #1
17204     F2 22 02 F1 | 	add	local03, objptr
17208     10 1F 02 F6 | 	mov	local01, local02
1720c     08 1E 86 F1 | 	sub	local01, #8
17210     0B 1E 66 F0 | 	shl	local01, #11
17214     7F 00 00 FF 
17218     00 25 06 F6 | 	mov	local04, ##65280
1721c     0F 25 82 F1 | 	sub	local04, local01
17220     11 25 52 FC | 	wrword	local04, local03
17224     01 20 06 F1 | 	add	local02, #1
17228     18 20 16 F2 | 	cmp	local02, #24 wc
1722c     CC FF 9F CD |  if_b	jmp	#LR__1760
17230                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
17230     18 20 06 F6 | 	mov	local02, #24
17234                 | LR__1761
17234     10 23 02 F6 | 	mov	local03, local02
17238     01 22 66 F0 | 	shl	local03, #1
1723c     F2 22 02 F1 | 	add	local03, objptr
17240     40 00 80 FF 
17244     11 01 58 FC | 	wrword	##32768, local03
17248     01 20 06 F1 | 	add	local02, #1
1724c     81 20 16 F2 | 	cmp	local02, #129 wc
17250     E0 FF 9F CD |  if_b	jmp	#LR__1761
17254                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
17254     81 20 06 F6 | 	mov	local02, #129
17258                 | LR__1762
17258     10 23 02 F6 | 	mov	local03, local02
1725c     01 22 66 F0 | 	shl	local03, #1
17260     F2 22 02 F1 | 	add	local03, objptr
17264     FF 26 06 F6 | 	mov	local05, #255
17268     10 27 82 F1 | 	sub	local05, local02
1726c     08 26 66 F0 | 	shl	local05, #8
17270     11 27 52 FC | 	wrword	local05, local03
17274     01 20 06 F1 | 	add	local02, #1
17278     00 21 16 F2 | 	cmp	local02, #256 wc
1727c     D8 FF 9F CD |  if_b	jmp	#LR__1762
17280                 | LR__1763
17280     47 00 00 FF 
17284     5A E5 05 F1 | 	add	objptr, ##36698
17288     F2 00 59 FC | 	wrword	#128, objptr
1728c     7B 00 00 FF 
17290     26 E4 85 F1 | 	sub	objptr, ##63014
17294                 | ' for i=0 to 7
17294     00 20 06 F6 | 	mov	local02, #0
17298     97 8E 48 FB | 	callpa	#(@LR__1765-@LR__1764)>>2,fcache_load_ptr_
1729c                 | LR__1764
1729c     10 23 02 F6 | 	mov	local03, local02
172a0     01 22 66 F0 | 	shl	local03, #1
172a4     10 23 02 F1 | 	add	local03, local02
172a8     03 22 66 F0 | 	shl	local03, #3
172ac     34 00 00 FF 
172b0     CC E4 05 F1 | 	add	objptr, ##26828
172b4     F2 22 02 F1 | 	add	local03, objptr
172b8     00 EE A1 FF 
172bc     11 01 68 FC | 	wrlong	##1138491392, local03
172c0     10 23 02 F6 | 	mov	local03, local02
172c4     01 22 66 F0 | 	shl	local03, #1
172c8     10 23 02 F1 | 	add	local03, local02
172cc     03 22 66 F0 | 	shl	local03, #3
172d0     F2 22 02 F1 | 	add	local03, objptr
172d4     04 22 06 F1 | 	add	local03, #4
172d8     11 21 42 FC | 	wrbyte	local02, local03
172dc     10 23 02 F6 | 	mov	local03, local02
172e0     01 22 66 F0 | 	shl	local03, #1
172e4     10 23 02 F1 | 	add	local03, local02
172e8     03 22 66 F0 | 	shl	local03, #3
172ec     F2 22 02 F1 | 	add	local03, objptr
172f0     05 22 06 F1 | 	add	local03, #5
172f4     11 21 42 FC | 	wrbyte	local02, local03
172f8     10 23 02 F6 | 	mov	local03, local02
172fc     01 22 66 F0 | 	shl	local03, #1
17300     10 23 02 F1 | 	add	local03, local02
17304     03 22 66 F0 | 	shl	local03, #3
17308     F2 22 02 F1 | 	add	local03, objptr
1730c     06 22 06 F1 | 	add	local03, #6
17310     11 01 58 FC | 	wrword	#0, local03
17314     10 23 02 F6 | 	mov	local03, local02
17318     01 22 66 F0 | 	shl	local03, #1
1731c     10 23 02 F1 | 	add	local03, local02
17320     03 22 66 F0 | 	shl	local03, #3
17324     F2 22 02 F1 | 	add	local03, objptr
17328     08 22 06 F1 | 	add	local03, #8
1732c     00 C0 9F FF 
17330     11 01 68 FC | 	wrlong	##1065353216, local03
17334     10 23 02 F6 | 	mov	local03, local02
17338     01 22 66 F0 | 	shl	local03, #1
1733c     10 23 02 F1 | 	add	local03, local02
17340     03 22 66 F0 | 	shl	local03, #3
17344     F2 22 02 F1 | 	add	local03, objptr
17348     0C 22 06 F1 | 	add	local03, #12
1734c     00 40 A0 FF 
17350     11 01 68 FC | 	wrlong	##1082130432, local03
17354     10 23 02 F6 | 	mov	local03, local02
17358     01 22 66 F0 | 	shl	local03, #1
1735c     10 23 02 F1 | 	add	local03, local02
17360     03 22 66 F0 | 	shl	local03, #3
17364     F2 22 02 F1 | 	add	local03, objptr
17368     10 22 06 F1 | 	add	local03, #16
1736c     11 01 68 FC | 	wrlong	#0, local03
17370     10 23 02 F6 | 	mov	local03, local02
17374     01 22 66 F0 | 	shl	local03, #1
17378     10 23 02 F1 | 	add	local03, local02
1737c     03 22 66 F0 | 	shl	local03, #3
17380     F2 22 02 F1 | 	add	local03, objptr
17384     14 22 06 F1 | 	add	local03, #20
17388     11 FF 59 FC | 	wrword	#255, local03
1738c     10 23 02 F6 | 	mov	local03, local02
17390     01 22 66 F0 | 	shl	local03, #1
17394     46 00 00 FF 
17398     4C E5 05 F1 | 	add	objptr, ##36172
1739c     F2 22 02 F1 | 	add	local03, objptr
173a0     11 FF 59 FC | 	wrword	#255, local03
173a4     01 20 06 F1 | 	add	local02, #1
173a8     08 20 56 F2 | 	cmps	local02, #8 wc
173ac     7B 00 00 FF 
173b0     18 E4 85 F1 | 	sub	objptr, ##63000
173b4     E4 FE 9F CD |  if_b	jmp	#LR__1764
173b8                 | LR__1765
173b8     7B 00 00 FF 
173bc     26 E4 05 F1 | 	add	objptr, ##63014
173c0     F2 00 59 FC | 	wrword	#128, objptr
173c4     7B 00 00 FF 
173c8     26 E4 85 F1 | 	sub	objptr, ##63014
173cc     A7 F0 03 F6 | 	mov	ptra, fp
173d0     B2 00 A0 FD | 	call	#popregs_
173d4                 | _init_audio_ret
173d4     2D 00 64 FD | 	ret
173d8                 | 
173d8                 | ' 
173d8                 | ' sub init_error_strings
173d8                 | _init_error_strings
173d8     54 01 00 FF 
173dc     21 01 06 F6 | 	mov	_var01, ##@LR__4743
173e0     65 00 00 FF 
173e4     00 E4 05 F1 | 	add	objptr, ##51712
173e8     F2 00 62 FC | 	wrlong	_var01, objptr
173ec     54 01 00 FF 
173f0     22 01 06 F6 | 	mov	_var01, ##@LR__4744
173f4     04 E4 05 F1 | 	add	objptr, #4
173f8     F2 00 62 FC | 	wrlong	_var01, objptr
173fc     54 01 00 FF 
17400     47 01 06 F6 | 	mov	_var01, ##@LR__4745
17404     04 E4 05 F1 | 	add	objptr, #4
17408     F2 00 62 FC | 	wrlong	_var01, objptr
1740c     54 01 00 FF 
17410     68 01 06 F6 | 	mov	_var01, ##@LR__4746
17414     04 E4 05 F1 | 	add	objptr, #4
17418     F2 00 62 FC | 	wrlong	_var01, objptr
1741c     54 01 00 FF 
17420     82 01 06 F6 | 	mov	_var01, ##@LR__4747
17424     04 E4 05 F1 | 	add	objptr, #4
17428     F2 00 62 FC | 	wrlong	_var01, objptr
1742c     54 01 00 FF 
17430     9E 01 06 F6 | 	mov	_var01, ##@LR__4748
17434     04 E4 05 F1 | 	add	objptr, #4
17438     F2 00 62 FC | 	wrlong	_var01, objptr
1743c     54 01 00 FF 
17440     C0 01 06 F6 | 	mov	_var01, ##@LR__4749
17444     04 E4 05 F1 | 	add	objptr, #4
17448     F2 00 62 FC | 	wrlong	_var01, objptr
1744c     54 01 00 FF 
17450     EE 01 06 F6 | 	mov	_var01, ##@LR__4750
17454     04 E4 05 F1 | 	add	objptr, #4
17458     F2 00 62 FC | 	wrlong	_var01, objptr
1745c     55 01 00 FF 
17460     19 00 06 F6 | 	mov	_var01, ##@LR__4751
17464     04 E4 05 F1 | 	add	objptr, #4
17468     F2 00 62 FC | 	wrlong	_var01, objptr
1746c     55 01 00 FF 
17470     32 00 06 F6 | 	mov	_var01, ##@LR__4752
17474     04 E4 05 F1 | 	add	objptr, #4
17478     F2 00 62 FC | 	wrlong	_var01, objptr
1747c     55 01 00 FF 
17480     53 00 06 F6 | 	mov	_var01, ##@LR__4753
17484     04 E4 05 F1 | 	add	objptr, #4
17488     F2 00 62 FC | 	wrlong	_var01, objptr
1748c     55 01 00 FF 
17490     6A 00 06 F6 | 	mov	_var01, ##@LR__4754
17494     04 E4 05 F1 | 	add	objptr, #4
17498     F2 00 62 FC | 	wrlong	_var01, objptr
1749c     55 01 00 FF 
174a0     88 00 06 F6 | 	mov	_var01, ##@LR__4755
174a4     04 E4 05 F1 | 	add	objptr, #4
174a8     F2 00 62 FC | 	wrlong	_var01, objptr
174ac     55 01 00 FF 
174b0     AC 00 06 F6 | 	mov	_var01, ##@LR__4756
174b4     04 E4 05 F1 | 	add	objptr, #4
174b8     F2 00 62 FC | 	wrlong	_var01, objptr
174bc     55 01 00 FF 
174c0     D3 00 06 F6 | 	mov	_var01, ##@LR__4757
174c4     04 E4 05 F1 | 	add	objptr, #4
174c8     F2 00 62 FC | 	wrlong	_var01, objptr
174cc     55 01 00 FF 
174d0     EF 00 06 F6 | 	mov	_var01, ##@LR__4758
174d4     04 E4 05 F1 | 	add	objptr, #4
174d8     F2 00 62 FC | 	wrlong	_var01, objptr
174dc     55 01 00 FF 
174e0     00 01 06 F6 | 	mov	_var01, ##@LR__4759
174e4     04 E4 05 F1 | 	add	objptr, #4
174e8     F2 00 62 FC | 	wrlong	_var01, objptr
174ec     55 01 00 FF 
174f0     10 01 06 F6 | 	mov	_var01, ##@LR__4760
174f4     04 E4 05 F1 | 	add	objptr, #4
174f8     F2 00 62 FC | 	wrlong	_var01, objptr
174fc     55 01 00 FF 
17500     2B 01 06 F6 | 	mov	_var01, ##@LR__4761
17504     04 E4 05 F1 | 	add	objptr, #4
17508     F2 00 62 FC | 	wrlong	_var01, objptr
1750c     55 01 00 FF 
17510     3D 01 06 F6 | 	mov	_var01, ##@LR__4762
17514     04 E4 05 F1 | 	add	objptr, #4
17518     F2 00 62 FC | 	wrlong	_var01, objptr
1751c     55 01 00 FF 
17520     55 01 06 F6 | 	mov	_var01, ##@LR__4763
17524     04 E4 05 F1 | 	add	objptr, #4
17528     F2 00 62 FC | 	wrlong	_var01, objptr
1752c     55 01 00 FF 
17530     69 01 06 F6 | 	mov	_var01, ##@LR__4764
17534     04 E4 05 F1 | 	add	objptr, #4
17538     F2 00 62 FC | 	wrlong	_var01, objptr
1753c     55 01 00 FF 
17540     79 01 06 F6 | 	mov	_var01, ##@LR__4765
17544     04 E4 05 F1 | 	add	objptr, #4
17548     F2 00 62 FC | 	wrlong	_var01, objptr
1754c     55 01 00 FF 
17550     96 01 06 F6 | 	mov	_var01, ##@LR__4766
17554     04 E4 05 F1 | 	add	objptr, #4
17558     F2 00 62 FC | 	wrlong	_var01, objptr
1755c     55 01 00 FF 
17560     A7 01 06 F6 | 	mov	_var01, ##@LR__4767
17564     04 E4 05 F1 | 	add	objptr, #4
17568     F2 00 62 FC | 	wrlong	_var01, objptr
1756c     55 01 00 FF 
17570     B8 01 06 F6 | 	mov	_var01, ##@LR__4768
17574     04 E4 05 F1 | 	add	objptr, #4
17578     F2 00 62 FC | 	wrlong	_var01, objptr
1757c     55 01 00 FF 
17580     E3 01 06 F6 | 	mov	_var01, ##@LR__4769
17584     04 E4 05 F1 | 	add	objptr, #4
17588     F2 00 62 FC | 	wrlong	_var01, objptr
1758c     55 01 00 FF 
17590     FF 01 06 F6 | 	mov	_var01, ##@LR__4770
17594     04 E4 05 F1 | 	add	objptr, #4
17598     F2 00 62 FC | 	wrlong	_var01, objptr
1759c     56 01 00 FF 
175a0     15 00 06 F6 | 	mov	_var01, ##@LR__4771
175a4     04 E4 05 F1 | 	add	objptr, #4
175a8     F2 00 62 FC | 	wrlong	_var01, objptr
175ac     56 01 00 FF 
175b0     22 00 06 F6 | 	mov	_var01, ##@LR__4772
175b4     04 E4 05 F1 | 	add	objptr, #4
175b8     F2 00 62 FC | 	wrlong	_var01, objptr
175bc     56 01 00 FF 
175c0     34 00 06 F6 | 	mov	_var01, ##@LR__4773
175c4     04 E4 05 F1 | 	add	objptr, #4
175c8     F2 00 62 FC | 	wrlong	_var01, objptr
175cc     56 01 00 FF 
175d0     45 00 06 F6 | 	mov	_var01, ##@LR__4774
175d4     04 E4 05 F1 | 	add	objptr, #4
175d8     F2 00 62 FC | 	wrlong	_var01, objptr
175dc     56 01 00 FF 
175e0     61 00 06 F6 | 	mov	_var01, ##@LR__4775
175e4     04 E4 05 F1 | 	add	objptr, #4
175e8     F2 00 62 FC | 	wrlong	_var01, objptr
175ec     56 01 00 FF 
175f0     72 00 06 F6 | 	mov	_var01, ##@LR__4776
175f4     04 E4 05 F1 | 	add	objptr, #4
175f8     F2 00 62 FC | 	wrlong	_var01, objptr
175fc     56 01 00 FF 
17600     81 00 06 F6 | 	mov	_var01, ##@LR__4777
17604     04 E4 05 F1 | 	add	objptr, #4
17608     F2 00 62 FC | 	wrlong	_var01, objptr
1760c     56 01 00 FF 
17610     9C 00 06 F6 | 	mov	_var01, ##@LR__4778
17614     04 E4 05 F1 | 	add	objptr, #4
17618     F2 00 62 FC | 	wrlong	_var01, objptr
1761c     56 01 00 FF 
17620     D0 00 06 F6 | 	mov	_var01, ##@LR__4779
17624     04 E4 05 F1 | 	add	objptr, #4
17628     F2 00 62 FC | 	wrlong	_var01, objptr
1762c     56 01 00 FF 
17630     E9 00 06 F6 | 	mov	_var01, ##@LR__4780
17634     04 E4 05 F1 | 	add	objptr, #4
17638     F2 00 62 FC | 	wrlong	_var01, objptr
1763c     56 01 00 FF 
17640     05 01 06 F6 | 	mov	_var01, ##@LR__4781
17644     04 E4 05 F1 | 	add	objptr, #4
17648     F2 00 62 FC | 	wrlong	_var01, objptr
1764c     56 01 00 FF 
17650     23 01 06 F6 | 	mov	_var01, ##@LR__4782
17654     04 E4 05 F1 | 	add	objptr, #4
17658     F2 00 62 FC | 	wrlong	_var01, objptr
1765c     56 01 00 FF 
17660     3C 01 06 F6 | 	mov	_var01, ##@LR__4783
17664     04 E4 05 F1 | 	add	objptr, #4
17668     F2 00 62 FC | 	wrlong	_var01, objptr
1766c     56 01 00 FF 
17670     5B 01 06 F6 | 	mov	_var01, ##@LR__4784
17674     04 E4 05 F1 | 	add	objptr, #4
17678     F2 00 62 FC | 	wrlong	_var01, objptr
1767c     56 01 00 FF 
17680     6A 01 06 F6 | 	mov	_var01, ##@LR__4785
17684     04 E4 05 F1 | 	add	objptr, #4
17688     F2 00 62 FC | 	wrlong	_var01, objptr
1768c     56 01 00 FF 
17690     98 01 06 F6 | 	mov	_var01, ##@LR__4786
17694     04 E4 05 F1 | 	add	objptr, #4
17698     F2 00 62 FC | 	wrlong	_var01, objptr
1769c     56 01 00 FF 
176a0     A6 01 06 F6 | 	mov	_var01, ##@LR__4787
176a4     04 E4 05 F1 | 	add	objptr, #4
176a8     F2 00 62 FC | 	wrlong	_var01, objptr
176ac     56 01 00 FF 
176b0     BB 01 06 F6 | 	mov	_var01, ##@LR__4788
176b4     04 E4 05 F1 | 	add	objptr, #4
176b8     F2 00 62 FC | 	wrlong	_var01, objptr
176bc     56 01 00 FF 
176c0     DF 01 06 F6 | 	mov	_var01, ##@LR__4789
176c4     04 E4 05 F1 | 	add	objptr, #4
176c8     F2 00 62 FC | 	wrlong	_var01, objptr
176cc     56 01 00 FF 
176d0     F6 01 06 F6 | 	mov	_var01, ##@LR__4790
176d4     04 E4 05 F1 | 	add	objptr, #4
176d8     F2 00 62 FC | 	wrlong	_var01, objptr
176dc     57 01 00 FF 
176e0     09 00 06 F6 | 	mov	_var01, ##@LR__4791
176e4     04 E4 05 F1 | 	add	objptr, #4
176e8     F2 00 62 FC | 	wrlong	_var01, objptr
176ec     57 01 00 FF 
176f0     20 00 06 F6 | 	mov	_var01, ##@LR__4792
176f4     04 E4 05 F1 | 	add	objptr, #4
176f8     F2 00 62 FC | 	wrlong	_var01, objptr
176fc     65 00 00 FF 
17700     C4 E4 85 F1 | 	sub	objptr, ##51908
17704                 | _init_error_strings_ret
17704     2D 00 64 FD | 	ret
17708                 | 
17708                 | '         
17708                 | ' sub printerror(err as integer)
17708                 | _printerror
17708     01 4A 05 F6 | 	mov	COUNT_, #1
1770c     A8 00 A0 FD | 	call	#pushregs_
17710     09 1F 02 F6 | 	mov	local01, arg01
17714     57 01 00 FF 
17718     39 12 06 F6 | 	mov	arg01, ##@LR__4793
1771c     58 25 B0 FD | 	call	#_hg010b_spin2_write
17720     0F 13 02 F6 | 	mov	arg01, local01
17724     50 27 B0 FD | 	call	#_hg010b_spin2_inttostr
17728     FD 12 02 F6 | 	mov	arg01, result1
1772c     48 25 B0 FD | 	call	#_hg010b_spin2_write
17730     57 01 00 FF 
17734     40 12 06 F6 | 	mov	arg01, ##@LR__4794
17738     3C 25 B0 FD | 	call	#_hg010b_spin2_write
1773c     02 1E 66 F0 | 	shl	local01, #2
17740     65 00 00 FF 
17744     00 E4 05 F1 | 	add	objptr, ##51712
17748     F2 1E 02 F1 | 	add	local01, objptr
1774c     0F 13 02 FB | 	rdlong	arg01, local01
17750     65 00 00 FF 
17754     00 E4 85 F1 | 	sub	objptr, ##51712
17758                 | ' 
17758                 | ' write(text)
17758     1C 25 B0 FD | 	call	#_hg010b_spin2_write
1775c                 | ' crlf
1775c     78 26 B0 FD | 	call	#_hg010b_spin2_crlf
17760     A7 F0 03 F6 | 	mov	ptra, fp
17764     B2 00 A0 FD | 	call	#popregs_
17768                 | _printerror_ret
17768     2D 00 64 FD | 	ret
1776c                 | 
1776c                 | ' 
1776c                 | ' '' ------------------------------- Hardware start/stop/initialization 
1776c                 | ' 
1776c                 | ' sub startpsram
1776c                 | _startpsram
1776c     00 12 06 F6 | 	mov	arg01, #0
17770     0A 14 C6 F9 | 	decod	arg02, #10
17774     0B 16 06 F6 | 	mov	arg03, #11
17778     07 18 06 F6 | 	mov	arg04, #7
1777c     0B 00 00 FF 
17780     C0 E4 05 F1 | 	add	objptr, ##5824
17784     FC 27 B0 FD | 	call	#_psram_spin2_startx
17788     4B 00 00 FF 
1778c     CC E4 05 F1 | 	add	objptr, ##38604
17790     F2 FA 61 FC | 	wrlong	result1, objptr
17794                 | '     return $7FF00 + cog*12
17794     0C E4 05 F1 | 	add	objptr, #12
17798     FF 03 80 FF 
1779c     F2 00 6A FC | 	wrlong	##524032, objptr
177a0     56 00 00 FF 
177a4     98 E5 85 F1 | 	sub	objptr, ##44440
177a8                 | _startpsram_ret
177a8     2D 00 64 FD | 	ret
177ac                 | 
177ac                 | ' 
177ac                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
177ac                 | _startvideo
177ac     01 4A 05 F6 | 	mov	COUNT_, #1
177b0     A8 00 A0 FD | 	call	#pushregs_
177b4     56 00 00 FF 
177b8     98 E5 05 F1 | 	add	objptr, ##44440
177bc     F2 18 02 FB | 	rdlong	arg04, objptr
177c0     56 00 00 FF 
177c4     98 E5 85 F1 | 	sub	objptr, ##44440
177c8     0A 13 02 F6 | 	mov	arg01, arg02
177cc     0C 15 02 F6 | 	mov	arg02, arg04
177d0     C4 0F B0 FD | 	call	#_hg010b_spin2_start
177d4     56 00 00 FF 
177d8     84 E5 05 F1 | 	add	objptr, ##44420
177dc     F2 FA 61 FC | 	wrlong	result1, objptr
177e0                 | ' 
177e0                 | ' videocog=v.start(pin,mbox)
177e0                 | ' 
177e0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
177e0     00 1E 06 F6 | 	mov	local01, #0
177e4     4B 00 00 FF 
177e8     C4 E4 85 F1 | 	sub	objptr, ##38596
177ec                 | LR__1770
177ec     0F 13 02 F6 | 	mov	arg01, local01
177f0     00 28 00 FF 
177f4     00 14 06 F6 | 	mov	arg02, ##5242880
177f8     E0 2B B0 FD | 	call	#_psram_spin2_setQos
177fc     01 1E 06 F1 | 	add	local01, #1
17800     08 1E 56 F2 | 	cmps	local01, #8 wc
17804     E4 FF 9F CD |  if_b	jmp	#LR__1770
17808     4B 00 00 FF 
1780c     C4 E4 05 F1 | 	add	objptr, ##38596
17810     F2 12 02 FB | 	rdlong	arg01, objptr
17814     7A 00 02 FF 
17818     00 14 06 F6 | 	mov	arg02, ##67171328
1781c     4B 00 00 FF 
17820     C4 E4 85 F1 | 	sub	objptr, ##38596
17824     B4 2B B0 FD | 	call	#_psram_spin2_setQos
17828     0B 00 00 FF 
1782c     C0 E4 85 F1 | 	sub	objptr, ##5824
17830                 | ' psram.setQoS(videocog, $0400f400) 
17830                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
17830     F2 14 02 F6 | 	mov	arg02, objptr
17834     00 58 03 FF 
17838     00 14 46 F5 | 	or	arg02, ##112197632
1783c     00 16 06 F6 | 	mov	arg03, #0
17840     00 18 06 F6 | 	mov	arg04, #0
17844     00 12 06 F6 | 	mov	arg01, #0
17848     74 3F B0 FD | 	call	#__system___basic_open
1784c                 | ' return videocog
1784c     56 00 00 FF 
17850     84 E5 05 F1 | 	add	objptr, ##44420
17854     F2 FA 01 FB | 	rdlong	result1, objptr
17858     56 00 00 FF 
1785c     84 E5 85 F1 | 	sub	objptr, ##44420
17860     A7 F0 03 F6 | 	mov	ptra, fp
17864     B2 00 A0 FD | 	call	#popregs_
17868                 | _startvideo_ret
17868     2D 00 64 FD | 	ret
1786c                 | 
1786c                 | ' 
1786c                 | ' function pspeek(adr as ulong) as ubyte
1786c                 | _pspeek
1786c     00 4A 05 F6 | 	mov	COUNT_, #0
17870     A8 00 A0 FD | 	call	#pushregs_
17874     0C F0 07 F1 | 	add	ptra, #12
17878     04 4E 05 F1 | 	add	fp, #4
1787c     A7 12 62 FC | 	wrlong	arg01, fp
17880     04 4E 05 F1 | 	add	fp, #4
17884     A7 12 02 F6 | 	mov	arg01, fp
17888     04 4E 85 F1 | 	sub	fp, #4
1788c     A7 14 02 FB | 	rdlong	arg02, fp
17890     04 4E 85 F1 | 	sub	fp, #4
17894     01 16 06 F6 | 	mov	arg03, #1
17898     0B 00 00 FF 
1789c     C0 E4 05 F1 | 	add	objptr, ##5824
178a0     0C 29 B0 FD | 	call	#_psram_spin2_read1
178a4     0B 00 00 FF 
178a8     C0 E4 85 F1 | 	sub	objptr, ##5824
178ac                 | ' psram.read1(varptr(res),adr,1)
178ac                 | ' return res
178ac     08 4E 05 F1 | 	add	fp, #8
178b0     A7 FA C1 FA | 	rdbyte	result1, fp
178b4     08 4E 85 F1 | 	sub	fp, #8
178b8     A7 F0 03 F6 | 	mov	ptra, fp
178bc     B2 00 A0 FD | 	call	#popregs_
178c0                 | _pspeek_ret
178c0     2D 00 64 FD | 	ret
178c4                 | 
178c4                 | ' 
178c4                 | ' function pslpeek(adr as ulong) as ulong
178c4                 | _pslpeek
178c4     00 4A 05 F6 | 	mov	COUNT_, #0
178c8     A8 00 A0 FD | 	call	#pushregs_
178cc     0C F0 07 F1 | 	add	ptra, #12
178d0     04 4E 05 F1 | 	add	fp, #4
178d4     A7 12 62 FC | 	wrlong	arg01, fp
178d8     04 4E 05 F1 | 	add	fp, #4
178dc     A7 12 02 F6 | 	mov	arg01, fp
178e0     04 4E 85 F1 | 	sub	fp, #4
178e4     A7 14 02 FB | 	rdlong	arg02, fp
178e8     04 4E 85 F1 | 	sub	fp, #4
178ec     04 16 06 F6 | 	mov	arg03, #4
178f0     0B 00 00 FF 
178f4     C0 E4 05 F1 | 	add	objptr, ##5824
178f8     B4 28 B0 FD | 	call	#_psram_spin2_read1
178fc     0B 00 00 FF 
17900     C0 E4 85 F1 | 	sub	objptr, ##5824
17904                 | ' psram.read1(varptr(res),adr,4)
17904                 | ' return res
17904     08 4E 05 F1 | 	add	fp, #8
17908     A7 FA 01 FB | 	rdlong	result1, fp
1790c     08 4E 85 F1 | 	sub	fp, #8
17910     A7 F0 03 F6 | 	mov	ptra, fp
17914     B2 00 A0 FD | 	call	#popregs_
17918                 | _pslpeek_ret
17918     2D 00 64 FD | 	ret
1791c                 | 
1791c                 | ' 
1791c                 | ' function psdpeek(adr as ulong) as ulong
1791c                 | _psdpeek
1791c     00 4A 05 F6 | 	mov	COUNT_, #0
17920     A8 00 A0 FD | 	call	#pushregs_
17924     0C F0 07 F1 | 	add	ptra, #12
17928     04 4E 05 F1 | 	add	fp, #4
1792c     A7 12 62 FC | 	wrlong	arg01, fp
17930     04 4E 05 F1 | 	add	fp, #4
17934     A7 12 02 F6 | 	mov	arg01, fp
17938     04 4E 85 F1 | 	sub	fp, #4
1793c     A7 14 02 FB | 	rdlong	arg02, fp
17940     04 4E 85 F1 | 	sub	fp, #4
17944     02 16 06 F6 | 	mov	arg03, #2
17948     0B 00 00 FF 
1794c     C0 E4 05 F1 | 	add	objptr, ##5824
17950     5C 28 B0 FD | 	call	#_psram_spin2_read1
17954     0B 00 00 FF 
17958     C0 E4 85 F1 | 	sub	objptr, ##5824
1795c                 | ' psram.read1(varptr(res),adr,2)
1795c                 | ' return res
1795c     08 4E 05 F1 | 	add	fp, #8
17960     A7 FA E1 FA | 	rdword	result1, fp
17964     08 4E 85 F1 | 	sub	fp, #8
17968     A7 F0 03 F6 | 	mov	ptra, fp
1796c     B2 00 A0 FD | 	call	#popregs_
17970                 | _psdpeek_ret
17970     2D 00 64 FD | 	ret
17974                 | 
17974                 | ' 
17974                 | ' '' ------------------------------- USB keyboard scan to char translator
17974                 | ' 
17974                 | ' function scantochar(key)
17974                 | _scantochar
17974                 | ' 
17974                 | ' select case (key shr 8) and 255
17974     09 01 02 F6 | 	mov	_var01, arg01
17978     08 00 C6 F0 | 	sar	_var01, #8
1797c     FF 00 0E F5 | 	and	_var01, #255 wz
17980     24 00 90 AD |  if_e	jmp	#LR__1780
17984     02 00 0E F2 | 	cmp	_var01, #2 wz
17988     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1798c     30 00 90 AD |  if_e	jmp	#LR__1781
17990     40 00 0E F2 | 	cmp	_var01, #64 wz
17994     44 00 90 AD |  if_e	jmp	#LR__1782
17998     42 00 0E F2 | 	cmp	_var01, #66 wz
1799c     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
179a0     70 00 90 5D |  if_ne	jmp	#LR__1784
179a4     50 00 90 FD | 	jmp	#LR__1783
179a8                 | LR__1780
179a8     09 FB 01 F6 | 	mov	result1, arg01
179ac     7F FA 05 F5 | 	and	result1, #127
179b0     02 FA 65 F0 | 	shl	result1, #2
179b4     F5 FA 01 F1 | 	add	result1, ptr__dat__
179b8     FD FA C1 FA | 	rdbyte	result1, result1
179bc     54 00 90 FD | 	jmp	#_scantochar_ret
179c0                 | LR__1781
179c0     09 FB 01 F6 | 	mov	result1, arg01
179c4     7F FA 05 F5 | 	and	result1, #127
179c8     02 FA 65 F0 | 	shl	result1, #2
179cc     01 FA 05 F1 | 	add	result1, #1
179d0     F5 FA 01 F1 | 	add	result1, ptr__dat__
179d4     FD FA C1 FA | 	rdbyte	result1, result1
179d8     38 00 90 FD | 	jmp	#_scantochar_ret
179dc                 | LR__1782
179dc     09 FB 01 F6 | 	mov	result1, arg01
179e0     7F FA 05 F5 | 	and	result1, #127
179e4     02 FA 65 F0 | 	shl	result1, #2
179e8     02 FA 05 F1 | 	add	result1, #2
179ec     F5 FA 01 F1 | 	add	result1, ptr__dat__
179f0     FD FA C1 FA | 	rdbyte	result1, result1
179f4     1C 00 90 FD | 	jmp	#_scantochar_ret
179f8                 | LR__1783
179f8     09 FB 01 F6 | 	mov	result1, arg01
179fc     7F FA 05 F5 | 	and	result1, #127
17a00     02 FA 65 F0 | 	shl	result1, #2
17a04     03 FA 05 F1 | 	add	result1, #3
17a08     F5 FA 01 F1 | 	add	result1, ptr__dat__
17a0c     FD FA C1 FA | 	rdbyte	result1, result1
17a10     00 00 90 FD | 	jmp	#_scantochar_ret
17a14                 | LR__1784
17a14                 | _scantochar_ret
17a14     2D 00 64 FD | 	ret
17a18                 | 
17a18                 | _program
17a18     0B 4A 05 F6 | 	mov	COUNT_, #11
17a1c     A8 00 A0 FD | 	call	#pushregs_
17a20     48 FD BF FD | 	call	#_startpsram
17a24     40 12 06 F6 | 	mov	arg01, #64
17a28     00 14 06 F6 | 	mov	arg02, #0
17a2c     00 16 06 F6 | 	mov	arg03, #0
17a30     78 FD BF FD | 	call	#_startvideo
17a34     00 12 06 F6 | 	mov	arg01, #0
17a38     00 14 06 F6 | 	mov	arg02, #0
17a3c     00 16 06 F6 | 	mov	arg03, #0
17a40     0B 00 00 FF 
17a44     C0 E4 05 F1 | 	add	objptr, ##5824
17a48     A4 2C B0 FD | 	call	#_audio096_spin2_start
17a4c     FE 1C 02 F6 | 	mov	arg06, result2
17a50     4B 00 00 FF 
17a54     C0 E4 05 F1 | 	add	objptr, ##38592
17a58     F2 FA 61 FC | 	wrlong	result1, objptr
17a5c     14 E4 05 F1 | 	add	objptr, #20
17a60     F2 1C 62 FC | 	wrlong	arg06, objptr
17a64     56 00 00 FF 
17a68     94 E5 85 F1 | 	sub	objptr, ##44436
17a6c     32 12 06 F6 | 	mov	arg01, #50
17a70     98 35 B0 FD | 	call	#__system___waitms
17a74     56 00 00 FF 
17a78     94 E5 05 F1 | 	add	objptr, ##44436
17a7c     F2 12 02 FB | 	rdlong	arg01, objptr
17a80     56 00 00 FF 
17a84     94 E5 85 F1 | 	sub	objptr, ##44436
17a88     14 12 06 F1 | 	add	arg01, #20
17a8c     20 00 80 FF 
17a90     09 01 58 FC | 	wrword	##16384, arg01
17a94     4C 2A B0 FD | 	call	#_usbnew_spin2_start
17a98     56 00 00 FF 
17a9c     88 E5 05 F1 | 	add	objptr, ##44424
17aa0     F2 FA 61 FC | 	wrlong	result1, objptr
17aa4                 | '   mouse_limits[0] := xlim
17aa4     0F 00 00 FF 
17aa8     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
17aac     01 00 80 FF 
17ab0     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
17ab4                 | '   mouse_limits[1] := ylim
17ab4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
17ab8     01 00 80 FF 
17abc     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
17ac0     56 00 00 FF 
17ac4     7B E4 85 F1 | 	sub	objptr, ##44155
17ac8     F2 12 02 F6 | 	mov	arg01, objptr
17acc     0D E5 85 F1 | 	sub	objptr, #269
17ad0     C4 12 06 F1 | 	add	arg01, #196
17ad4                 | '   mouse_outptr := ptr
17ad4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
17ad8     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
17adc     0F 00 00 FF 
17ae0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
17ae4     0E 00 00 FF 
17ae8     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
17aec     F5 14 02 F6 | 	mov	arg02, ptr__dat__
17af0     0E 00 00 FF 
17af4     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
17af8     10 12 06 F6 | 	mov	arg01, #16
17afc     90 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17b00     10 12 06 F6 | 	mov	arg01, #16
17b04     20 14 06 F6 | 	mov	arg02, #32
17b08     20 16 06 F6 | 	mov	arg03, #32
17b0c     F4 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
17b10     09 12 C6 F9 | 	decod	arg01, #9
17b14     20 15 06 F6 | 	mov	arg02, #288
17b18     84 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
17b1c     F2 1C 02 F6 | 	mov	arg06, objptr
17b20     79 00 00 FF 
17b24     6C E5 05 F1 | 	add	objptr, ##62316
17b28     F2 1A 02 F6 | 	mov	arg05, objptr
17b2c     0D 1D 62 FC | 	wrlong	arg06, arg05
17b30     04 1A 06 F1 | 	add	arg05, #4
17b34     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
17b38     EF 14 02 F6 | 	mov	arg02, entryptr__
17b3c     F2 1E 02 F6 | 	mov	local01, objptr
17b40     1E FA 05 F6 | 	mov	result1, #30
17b44     28 1E 62 FD | 	setq	local01
17b48     0A FB F1 FC | 	coginit	result1, arg02 wc
17b4c     01 FA 65 C6 |  if_b	neg	result1, #1
17b50     04 E4 85 F1 | 	sub	objptr, #4
17b54     F2 FA 61 FC | 	wrlong	result1, objptr
17b58     01 00 00 FF 
17b5c     90 E4 05 F1 | 	add	objptr, ##656
17b60     F2 00 68 FC | 	wrlong	#0, objptr
17b64     24 00 00 FF 
17b68     40 E4 85 F1 | 	sub	objptr, ##18496
17b6c     F2 04 68 FC | 	wrlong	#2, objptr
17b70     04 E4 05 F1 | 	add	objptr, #4
17b74     F2 26 69 FC | 	wrlong	#147, objptr
17b78     04 E4 05 F1 | 	add	objptr, #4
17b7c     F2 34 69 FC | 	wrlong	#154, objptr
17b80     04 E4 05 F1 | 	add	objptr, #4
17b84     F2 08 68 FC | 	wrlong	#4, objptr
17b88     04 E4 85 F1 | 	sub	objptr, #4
17b8c     F2 1C 02 FB | 	rdlong	arg06, objptr
17b90     14 E4 85 F1 | 	sub	objptr, #20
17b94     F2 1C 62 FC | 	wrlong	arg06, objptr
17b98     04 E4 05 F1 | 	add	objptr, #4
17b9c     F2 00 68 FC | 	wrlong	#0, objptr
17ba0     04 E4 05 F1 | 	add	objptr, #4
17ba4     F2 00 68 FC | 	wrlong	#0, objptr
17ba8     22 00 00 FF 
17bac     B0 E5 05 F1 | 	add	objptr, ##17840
17bb0     F2 02 68 FC | 	wrlong	#1, objptr
17bb4     01 00 00 FF 
17bb8     9C E4 05 F1 | 	add	objptr, ##668
17bbc     F2 00 68 FC | 	wrlong	#0, objptr
17bc0     01 00 00 FF 
17bc4     00 EA 05 F1 | 	add	ptr__dat__, ##512
17bc8     08 E4 05 F1 | 	add	objptr, #8
17bcc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
17bd0     04 E4 85 F1 | 	sub	objptr, #4
17bd4     03 00 80 FF 
17bd8     F2 3C 69 FC | 	wrlong	##1694, objptr
17bdc     16 00 00 FF 
17be0     1C E4 85 F1 | 	sub	objptr, ##11292
17be4     F2 18 68 FC | 	wrlong	#12, objptr
17be8     64 00 00 FF 
17bec     E8 E5 85 F1 | 	sub	objptr, ##51688
17bf0     01 00 00 FF 
17bf4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
17bf8     5C E2 BF FD | 	call	#_init_commands
17bfc     D8 F7 BF FD | 	call	#_init_error_strings
17c00     6C F0 BF FD | 	call	#_init_audio
17c04     E4 58 BF FD | 	call	#_do_new
17c08     56 00 00 FF 
17c0c     C0 E5 05 F1 | 	add	objptr, ##44480
17c10     F2 12 02 FB | 	rdlong	arg01, objptr
17c14     04 E4 85 F1 | 	sub	objptr, #4
17c18     F2 14 02 FB | 	rdlong	arg02, objptr
17c1c     56 00 00 FF 
17c20     BC E5 85 F1 | 	sub	objptr, ##44476
17c24     94 1D B0 FD | 	call	#_hg010b_spin2_cls
17c28     56 00 00 FF 
17c2c     C4 E5 05 F1 | 	add	objptr, ##44484
17c30     F2 12 02 FB | 	rdlong	arg01, objptr
17c34     56 00 00 FF 
17c38     C4 E5 85 F1 | 	sub	objptr, ##44484
17c3c     94 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
17c40                 | ' 
17c40                 | ' leading_spaces:=amount
17c40     01 00 00 FF 
17c44     B2 E4 05 F1 | 	add	objptr, ##690
17c48     F2 04 68 FC | 	wrlong	#2, objptr
17c4c     01 00 00 FF 
17c50     B2 E4 85 F1 | 	sub	objptr, ##690
17c54     57 01 00 FF 
17c58     43 20 06 F6 | 	mov	local02, ##@LR__4795
17c5c     3D 12 06 F6 | 	mov	arg01, #61
17c60     3C 14 06 F6 | 	mov	arg02, #60
17c64     3B 16 06 F6 | 	mov	arg03, #59
17c68     3A 18 06 F6 | 	mov	arg04, #58
17c6c     78 7A B0 FD | 	call	#__system___vfs_open_sdcardx
17c70     FD 14 02 F6 | 	mov	arg02, result1
17c74     10 13 02 F6 | 	mov	arg01, local02
17c78     68 34 B0 FD | 	call	#__system___mount
17c7c     57 01 00 FF 
17c80     47 12 06 F6 | 	mov	arg01, ##@LR__4796
17c84     1C 37 B0 FD | 	call	#__system___chdir
17c88     57 01 00 FF 
17c8c     4F 20 06 F6 | 	mov	local02, ##@LR__4797
17c90     72 00 00 FF 
17c94     18 E4 05 F1 | 	add	objptr, ##58392
17c98     F2 20 62 FC | 	wrlong	local02, objptr
17c9c     1B 00 00 FF 
17ca0     60 E4 85 F1 | 	sub	objptr, ##13920
17ca4     F2 12 02 FB | 	rdlong	arg01, objptr
17ca8     56 00 00 FF 
17cac     B8 E5 85 F1 | 	sub	objptr, ##44472
17cb0     01 12 66 F0 | 	shl	arg01, #1
17cb4     01 14 06 F6 | 	mov	arg02, #1
17cb8     58 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
17cbc                 | ' 
17cbc                 | ' init_commands
17cbc                 | ' init_error_strings
17cbc                 | ' init_audio
17cbc                 | ' do_new
17cbc                 | ' 
17cbc                 | ' 
17cbc                 | ' cls(ink, paper)
17cbc                 | ' v.setfontfamily(font) 				' use ST Mono font
17cbc                 | ' v.setleadingspaces(2)
17cbc                 | ' mount "/sd", _vfs_open_sdcard()
17cbc                 | ' chdir "/sd/bas"
17cbc                 | ' 
17cbc                 | ' currentdir$="/sd/bas"
17cbc                 | ' 
17cbc                 | ' position 2*editor_spaces,1 : print ver$
17cbc     00 12 06 F6 | 	mov	arg01, #0
17cc0     88 89 B0 FD | 	call	#__system___getiolock_0442
17cc4     FD 12 02 F6 | 	mov	arg01, result1
17cc8     4C 30 B0 FD | 	call	#__system___lockmem
17ccc     18 00 00 FF 
17cd0     4C EB 05 F1 | 	add	ptr__dat__, ##12620
17cd4     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
17cd8     18 00 00 FF 
17cdc     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
17ce0     00 12 06 F6 | 	mov	arg01, #0
17ce4     00 16 06 F6 | 	mov	arg03, #0
17ce8     34 3D B0 FD | 	call	#__system___basic_print_string
17cec     00 12 06 F6 | 	mov	arg01, #0
17cf0     0A 14 06 F6 | 	mov	arg02, #10
17cf4     00 16 06 F6 | 	mov	arg03, #0
17cf8     CC 3C B0 FD | 	call	#__system___basic_print_char
17cfc     00 12 06 F6 | 	mov	arg01, #0
17d00     48 89 B0 FD | 	call	#__system___getiolock_0442
17d04     FD 00 68 FC | 	wrlong	#0, result1
17d08     F2 12 02 FB | 	rdlong	arg01, objptr
17d0c     00 14 06 F6 | 	mov	arg02, #0
17d10     0A 16 06 F6 | 	mov	arg03, #10
17d14     40 52 B0 FD | 	call	#__system__Number_S
17d18     FD 12 02 F6 | 	mov	arg01, result1
17d1c     57 01 00 FF 
17d20     57 14 06 F6 | 	mov	arg02, ##@LR__4798
17d24     4C 30 B0 FD | 	call	#__system___string_concat
17d28     FD 20 02 F6 | 	mov	local02, result1
17d2c     79 00 00 FF 
17d30     60 E5 05 F1 | 	add	objptr, ##62304
17d34     F2 20 62 FC | 	wrlong	local02, objptr
17d38     79 00 00 FF 
17d3c     60 E5 85 F1 | 	sub	objptr, ##62304
17d40                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
17d40     00 12 06 F6 | 	mov	arg01, #0
17d44     04 89 B0 FD | 	call	#__system___getiolock_0442
17d48     FD 12 02 F6 | 	mov	arg01, result1
17d4c     C8 2F B0 FD | 	call	#__system___lockmem
17d50     79 00 00 FF 
17d54     60 E5 05 F1 | 	add	objptr, ##62304
17d58     F2 14 02 FB | 	rdlong	arg02, objptr
17d5c     79 00 00 FF 
17d60     60 E5 85 F1 | 	sub	objptr, ##62304
17d64     00 12 06 F6 | 	mov	arg01, #0
17d68     00 16 06 F6 | 	mov	arg03, #0
17d6c     B0 3C B0 FD | 	call	#__system___basic_print_string
17d70     00 12 06 F6 | 	mov	arg01, #0
17d74     0A 14 06 F6 | 	mov	arg02, #10
17d78     00 16 06 F6 | 	mov	arg03, #0
17d7c     48 3C B0 FD | 	call	#__system___basic_print_char
17d80     00 12 06 F6 | 	mov	arg01, #0
17d84     C4 88 B0 FD | 	call	#__system___getiolock_0442
17d88     FD 00 68 FC | 	wrlong	#0, result1
17d8c     56 00 00 FF 
17d90     B8 E5 05 F1 | 	add	objptr, ##44472
17d94     F2 12 02 FB | 	rdlong	arg01, objptr
17d98     56 00 00 FF 
17d9c     B8 E5 85 F1 | 	sub	objptr, ##44472
17da0     01 12 66 F0 | 	shl	arg01, #1
17da4     04 14 06 F6 | 	mov	arg02, #4
17da8     68 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
17dac                 | ' position 2*editor_spaces,4 : print "Ready"
17dac     00 12 06 F6 | 	mov	arg01, #0
17db0     98 88 B0 FD | 	call	#__system___getiolock_0442
17db4     FD 12 02 F6 | 	mov	arg01, result1
17db8     5C 2F B0 FD | 	call	#__system___lockmem
17dbc     57 01 00 FF 
17dc0     69 14 06 F6 | 	mov	arg02, ##@LR__4799
17dc4     00 12 06 F6 | 	mov	arg01, #0
17dc8     00 16 06 F6 | 	mov	arg03, #0
17dcc     50 3C B0 FD | 	call	#__system___basic_print_string
17dd0     FD 22 02 F6 | 	mov	local03, result1
17dd4     00 12 06 F6 | 	mov	arg01, #0
17dd8     0A 14 06 F6 | 	mov	arg02, #10
17ddc     00 16 06 F6 | 	mov	arg03, #0
17de0     E4 3B B0 FD | 	call	#__system___basic_print_char
17de4     01 24 06 F6 | 	mov	local04, #1
17de8     00 12 06 F6 | 	mov	arg01, #0
17dec     5C 88 B0 FD | 	call	#__system___getiolock_0442
17df0     FD 00 68 FC | 	wrlong	#0, result1
17df4     00 26 06 F6 | 	mov	local05, #0
17df8     00 14 06 F6 | 	mov	arg02, #0
17dfc     01 14 D6 F7 | 	test	arg02, #1 wc
17e00     5A 4C 64 FD | 	drvc	#38
17e04     01 14 D6 F7 | 	test	arg02, #1 wc
17e08     5A 4E 64 FD | 	drvc	#39
17e0c                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
17e0c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
17e0c                 | ' 
17e0c                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
17e0c                 | ' 
17e0c                 | ' 'base2:=@channel1[0]+64*channel
17e0c                 | ' 'long[base2+8]:=sample+$C0000000 
17e0c                 | ' 'long[base2+12]:= len
17e0c                 | ' 'if loop >=0 
17e0c                 | ' '  long[base2+16]:= loop
17e0c                 | ' 'else
17e0c                 | ' '  long[base2+16]:= len+2
17e0c                 | ' 'word[base2+20]:=vol
17e0c                 | ' 'word[base2+24]:= 3546911/splfreq 
17e0c                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
17e0c                 | ' 'long[base2+28]:=$40000000
17e0c                 | ' 
17e0c                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
17e0c                 | ' 'lpoke base+16,2048
17e0c                 | ' 'lpoke base+12,0
17e0c                 | ' 'dpoke base+20,16383
17e0c                 | ' 'dpoke base+22,8192
17e0c                 | ' 'dpoke base+24,60
17e0c                 | ' 'dpoke base+26,256 ' todo: use skip to make accurate sample rate
17e0c                 | ' 'dpoke base+28,$4000_0000
17e0c                 | ' 'lpoke base+32,0 
17e0c                 | ' 'lpoke base+36, 0
17e0c                 | ' 'lpoke base+40,25600' speed
17e0c                 | ' 'lpoke base+44,1023 'len
17e0c                 | ' 
17e0c                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
17e0c                 | ' 
17e0c                 | ' '-------------------------------------------------------------------------------------------------------- 
17e0c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
17e0c                 | ' '--------------------------------------------------------------------------------------------------------
17e0c                 | ' 
17e0c                 | ' do
17e0c                 | LR__1790
17e0c     01 12 06 F6 | 	mov	arg01, #1
17e10     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
17e14     06 12 06 F6 | 	mov	arg01, #6
17e18     0B 00 00 FF 
17e1c     C0 E4 05 F1 | 	add	objptr, ##5824
17e20     F4 2B B0 FD | 	call	#_audio096_spin2_stop
17e24     0B 00 00 FF 
17e28     C0 E4 85 F1 | 	sub	objptr, ##5824
17e2c     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
17e30     64 00 00 FF 
17e34     F8 E5 05 F1 | 	add	objptr, ##51704
17e38     F2 FA 61 FC | 	wrlong	result1, objptr
17e3c                 | '   return hkbd_led_rep
17e3c     13 00 00 FF 
17e40     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
17e44     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
17e48     13 00 00 FF 
17e4c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
17e50     16 00 00 FF 
17e54     30 E4 05 F1 | 	add	objptr, ##11312
17e58     F2 FA 61 FC | 	wrlong	result1, objptr
17e5c                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
17e5c     16 00 00 FF 
17e60     30 E4 85 F1 | 	sub	objptr, ##11312
17e64     F2 20 02 FB | 	rdlong	local02, objptr
17e68     64 00 00 FF 
17e6c     F8 E5 85 F1 | 	sub	objptr, ##51704
17e70     01 20 16 F2 | 	cmp	local02, #1 wc
17e74     BC 00 90 CD |  if_b	jmp	#LR__1791
17e78     64 00 00 FF 
17e7c     F8 E5 05 F1 | 	add	objptr, ##51704
17e80     F2 24 02 FB | 	rdlong	local04, objptr
17e84     64 00 00 FF 
17e88     F8 E5 85 F1 | 	sub	objptr, ##51704
17e8c     12 23 02 F6 | 	mov	local03, local04
17e90     04 22 16 F2 | 	cmp	local03, #4 wc
17e94     9C 00 90 3D |  if_ae	jmp	#LR__1791
17e98     79 00 00 FF 
17e9c     64 E5 05 F1 | 	add	objptr, ##62308
17ea0     F2 1E 02 FB | 	rdlong	local01, objptr
17ea4     79 00 00 FF 
17ea8     64 E5 85 F1 | 	sub	objptr, ##62308
17eac     0F 27 02 F6 | 	mov	local05, local01
17eb0     01 26 0E F2 | 	cmp	local05, #1 wz
17eb4     7C 00 90 5D |  if_ne	jmp	#LR__1791
17eb8     04 00 00 FF 
17ebc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
17ec0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
17ec4     04 00 00 FF 
17ec8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
17ecc     56 00 00 FF 
17ed0     44 22 06 F6 | 	mov	local03, ##44100
17ed4     0C 24 C6 F9 | 	decod	local04, #12
17ed8     00 26 06 F6 | 	mov	local05, #0
17edc     03 00 00 FF 
17ee0     DE 1E 06 F6 | 	mov	local01, ##1758
17ee4     07 12 06 F6 | 	mov	arg01, #7
17ee8     56 00 00 FF 
17eec     44 16 06 F6 | 	mov	arg03, ##44100
17ef0     0C 18 C6 F9 | 	decod	arg04, #12
17ef4     00 1A 06 F6 | 	mov	arg05, #0
17ef8     03 00 00 FF 
17efc     DE 1C 06 F6 | 	mov	arg06, ##1758
17f00     0B 00 00 FF 
17f04     C0 E4 05 F1 | 	add	objptr, ##5824
17f08     BC 29 B0 FD | 	call	#_audio096_spin2_play
17f0c     0B 00 00 FF 
17f10     C0 E4 85 F1 | 	sub	objptr, ##5824
17f14     0A 12 06 F6 | 	mov	arg01, #10
17f18     F0 30 B0 FD | 	call	#__system___waitms
17f1c     07 12 06 F6 | 	mov	arg01, #7
17f20     0B 00 00 FF 
17f24     C0 E4 05 F1 | 	add	objptr, ##5824
17f28     EC 2A B0 FD | 	call	#_audio096_spin2_stop
17f2c     0B 00 00 FF 
17f30     C0 E4 85 F1 | 	sub	objptr, ##5824
17f34                 | LR__1791
17f34                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
17f34     64 00 00 FF 
17f38     F8 E5 05 F1 | 	add	objptr, ##51704
17f3c     F2 20 02 FB | 	rdlong	local02, objptr
17f40     64 00 00 FF 
17f44     F8 E5 85 F1 | 	sub	objptr, ##51704
17f48     04 20 16 F2 | 	cmp	local02, #4 wc
17f4c     80 00 90 CD |  if_b	jmp	#LR__1792
17f50     64 00 00 FF 
17f54     F8 E5 05 F1 | 	add	objptr, ##51704
17f58     F2 24 02 FB | 	rdlong	local04, objptr
17f5c     64 00 00 FF 
17f60     F8 E5 85 F1 | 	sub	objptr, ##51704
17f64     12 23 02 F6 | 	mov	local03, local04
17f68     00 00 40 FF 
17f6c     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
17f70     64 00 00 CF 
17f74     F8 E5 05 C1 |  if_b	add	objptr, ##51704
17f78     F2 1E 02 CB |  if_b	rdlong	local01, objptr
17f7c     64 00 00 CF 
17f80     F8 E5 85 C1 |  if_b	sub	objptr, ##51704
17f84     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
17f88     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
17f8c     40 00 90 3D |  if_ae	jmp	#LR__1792
17f90     64 00 00 FF 
17f94     F8 E5 05 F1 | 	add	objptr, ##51704
17f98     F2 20 02 FB | 	rdlong	local02, objptr
17f9c     04 E4 05 F1 | 	add	objptr, #4
17fa0     F2 20 62 FC | 	wrlong	local02, objptr
17fa4     16 00 00 FF 
17fa8     30 E4 05 F1 | 	add	objptr, ##11312
17fac     F2 02 68 FC | 	wrlong	#1, objptr
17fb0     16 00 00 FF 
17fb4     30 E4 85 F1 | 	sub	objptr, ##11312
17fb8     F2 20 02 FB | 	rdlong	local02, objptr
17fbc     16 00 00 FF 
17fc0     34 E4 05 F1 | 	add	objptr, ##11316
17fc4     F2 20 62 FC | 	wrlong	local02, objptr
17fc8     7B 00 00 FF 
17fcc     30 E4 85 F1 | 	sub	objptr, ##63024
17fd0                 | LR__1792
17fd0                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
17fd0     64 00 00 FF 
17fd4     F8 E5 05 F1 | 	add	objptr, ##51704
17fd8     F2 20 02 FB | 	rdlong	local02, objptr
17fdc     64 00 00 FF 
17fe0     F8 E5 85 F1 | 	sub	objptr, ##51704
17fe4     00 00 40 FF 
17fe8     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
17fec     7B 00 00 3F 
17ff0     34 E4 05 31 |  if_ae	add	objptr, ##63028
17ff4     F2 00 68 3C |  if_ae	wrlong	#0, objptr
17ff8     08 E4 85 31 |  if_ae	sub	objptr, #8
17ffc     F2 00 68 3C |  if_ae	wrlong	#0, objptr
18000     7B 00 00 3F 
18004     2C E4 85 31 |  if_ae	sub	objptr, ##63020
18008                 | ' if key=0 andalso rpt=1 then rptcnt+=1
18008     64 00 00 FF 
1800c     F8 E5 05 F1 | 	add	objptr, ##51704
18010     F2 20 0A FB | 	rdlong	local02, objptr wz
18014     64 00 00 FF 
18018     F8 E5 85 F1 | 	sub	objptr, ##51704
1801c     7B 00 00 AF 
18020     2C E4 05 A1 |  if_e	add	objptr, ##63020
18024     F2 24 02 AB |  if_e	rdlong	local04, objptr
18028     7B 00 00 AF 
1802c     2C E4 85 A1 |  if_e	sub	objptr, ##63020
18030     12 23 02 A6 |  if_e	mov	local03, local04
18034     01 22 0E A2 |  if_e	cmp	local03, #1 wz
18038     7B 00 00 AF 
1803c     34 E4 05 A1 |  if_e	add	objptr, ##63028
18040     F2 20 02 AB |  if_e	rdlong	local02, objptr
18044     01 20 06 A1 |  if_e	add	local02, #1
18048     F2 20 62 AC |  if_e	wrlong	local02, objptr
1804c     7B 00 00 AF 
18050     34 E4 85 A1 |  if_e	sub	objptr, ##63028
18054                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
18054     64 00 00 FF 
18058     F8 E5 05 F1 | 	add	objptr, ##51704
1805c     F2 20 02 FB | 	rdlong	local02, objptr
18060     64 00 00 FF 
18064     F8 E5 85 F1 | 	sub	objptr, ##51704
18068     00 00 40 FF 
1806c     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
18070     44 00 90 3D |  if_ae	jmp	#LR__1794
18074     7B 00 00 FF 
18078     34 E4 05 F1 | 	add	objptr, ##63028
1807c     F2 20 02 FB | 	rdlong	local02, objptr
18080     7B 00 00 FF 
18084     34 E4 85 F1 | 	sub	objptr, ##63028
18088     19 20 0E F2 | 	cmp	local02, #25 wz
1808c     28 00 90 5D |  if_ne	jmp	#LR__1793
18090     64 00 00 FF 
18094     FC E5 05 F1 | 	add	objptr, ##51708
18098     F2 20 02 FB | 	rdlong	local02, objptr
1809c     16 00 00 FF 
180a0     34 E4 05 F1 | 	add	objptr, ##11316
180a4     F2 20 62 FC | 	wrlong	local02, objptr
180a8     04 E4 05 F1 | 	add	objptr, #4
180ac     F2 2A 68 FC | 	wrlong	#21, objptr
180b0     7B 00 00 FF 
180b4     34 E4 85 F1 | 	sub	objptr, ##63028
180b8                 | LR__1793
180b8                 | LR__1794
180b8                 | ' 
180b8                 | ' 
180b8                 | ' if key3<>0 then
180b8     7B 00 00 FF 
180bc     30 E4 05 F1 | 	add	objptr, ##63024
180c0     F2 28 0A FB | 	rdlong	local06, objptr wz
180c4     7B 00 00 FF 
180c8     30 E4 85 F1 | 	sub	objptr, ##63024
180cc     3C FD 9F AD |  if_e	jmp	#LR__1790
180d0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
180d0     79 00 00 FF 
180d4     64 E5 05 F1 | 	add	objptr, ##62308
180d8     F2 20 02 FB | 	rdlong	local02, objptr
180dc     79 00 00 FF 
180e0     64 E5 85 F1 | 	sub	objptr, ##62308
180e4     01 20 0E F2 | 	cmp	local02, #1 wz
180e8     50 00 90 5D |  if_ne	jmp	#LR__1795
180ec     7B 00 00 FF 
180f0     08 E4 05 F1 | 	add	objptr, ##62984
180f4     F2 14 02 FB | 	rdlong	arg02, objptr
180f8     56 00 00 FF 
180fc     44 22 06 F6 | 	mov	local03, ##44100
18100     0C 24 C6 F9 | 	decod	local04, #12
18104     04 E4 85 F1 | 	sub	objptr, #4
18108     F2 26 02 FB | 	rdlong	local05, objptr
1810c     01 1E 66 F6 | 	neg	local01, #1
18110     07 12 06 F6 | 	mov	arg01, #7
18114     56 00 00 FF 
18118     44 16 06 F6 | 	mov	arg03, ##44100
1811c     0C 18 C6 F9 | 	decod	arg04, #12
18120     13 1B 02 F6 | 	mov	arg05, local05
18124     01 1C 66 F6 | 	neg	arg06, #1
18128     6F 00 00 FF 
1812c     44 E5 85 F1 | 	sub	objptr, ##57156
18130     94 27 B0 FD | 	call	#_audio096_spin2_play
18134     0B 00 00 FF 
18138     C0 E4 85 F1 | 	sub	objptr, ##5824
1813c                 | LR__1795
1813c     7B 00 00 FF 
18140     30 E4 05 F1 | 	add	objptr, ##63024
18144     F2 12 02 FB | 	rdlong	arg01, objptr
18148     7B 00 00 FF 
1814c     30 E4 85 F1 | 	sub	objptr, ##63024
18150     20 F8 BF FD | 	call	#_scantochar
18154     7B 00 00 FF 
18158     38 E4 05 F1 | 	add	objptr, ##63032
1815c     F2 FA 61 FC | 	wrlong	result1, objptr
18160                 | '   if leds and 2 = 2 then 
18160     10 E4 85 F1 | 	sub	objptr, #16
18164     F2 20 0A FB | 	rdlong	local02, objptr wz
18168     7B 00 00 FF 
1816c     28 E4 85 F1 | 	sub	objptr, ##63016
18170     68 01 90 AD |  if_e	jmp	#LR__1803
18174                 | '     if key4>96 andalso key4<123 then
18174     7B 00 00 FF 
18178     38 E4 05 F1 | 	add	objptr, ##63032
1817c     F2 20 02 FB | 	rdlong	local02, objptr
18180     7B 00 00 FF 
18184     38 E4 85 F1 | 	sub	objptr, ##63032
18188     61 20 56 F2 | 	cmps	local02, #97 wc
1818c     40 00 90 CD |  if_b	jmp	#LR__1796
18190     7B 00 00 FF 
18194     38 E4 05 F1 | 	add	objptr, ##63032
18198     F2 24 02 FB | 	rdlong	local04, objptr
1819c     7B 00 00 FF 
181a0     38 E4 85 F1 | 	sub	objptr, ##63032
181a4     12 23 02 F6 | 	mov	local03, local04
181a8     7B 22 56 F2 | 	cmps	local03, #123 wc
181ac     20 00 90 3D |  if_ae	jmp	#LR__1796
181b0     7B 00 00 FF 
181b4     38 E4 05 F1 | 	add	objptr, ##63032
181b8     F2 20 02 FB | 	rdlong	local02, objptr
181bc     20 20 86 F1 | 	sub	local02, #32
181c0     F2 20 62 FC | 	wrlong	local02, objptr
181c4     7B 00 00 FF 
181c8     38 E4 85 F1 | 	sub	objptr, ##63032
181cc     0C 01 90 FD | 	jmp	#LR__1802
181d0                 | LR__1796
181d0     7B 00 00 FF 
181d4     38 E4 05 F1 | 	add	objptr, ##63032
181d8     F2 20 02 FB | 	rdlong	local02, objptr
181dc     7B 00 00 FF 
181e0     38 E4 85 F1 | 	sub	objptr, ##63032
181e4     41 20 56 F2 | 	cmps	local02, #65 wc
181e8     40 00 90 CD |  if_b	jmp	#LR__1797
181ec     7B 00 00 FF 
181f0     38 E4 05 F1 | 	add	objptr, ##63032
181f4     F2 24 02 FB | 	rdlong	local04, objptr
181f8     7B 00 00 FF 
181fc     38 E4 85 F1 | 	sub	objptr, ##63032
18200     12 23 02 F6 | 	mov	local03, local04
18204     5B 22 56 F2 | 	cmps	local03, #91 wc
18208     20 00 90 3D |  if_ae	jmp	#LR__1797
1820c     7B 00 00 FF 
18210     38 E4 05 F1 | 	add	objptr, ##63032
18214     F2 20 02 FB | 	rdlong	local02, objptr
18218     20 20 06 F1 | 	add	local02, #32
1821c     F2 20 62 FC | 	wrlong	local02, objptr
18220     7B 00 00 FF 
18224     38 E4 85 F1 | 	sub	objptr, ##63032
18228     B0 00 90 FD | 	jmp	#LR__1801
1822c                 | LR__1797
1822c     7B 00 00 FF 
18230     38 E4 05 F1 | 	add	objptr, ##63032
18234     F2 20 02 FB | 	rdlong	local02, objptr
18238     7B 00 00 FF 
1823c     38 E4 85 F1 | 	sub	objptr, ##63032
18240     17 20 56 F2 | 	cmps	local02, #23 wc
18244     40 00 90 CD |  if_b	jmp	#LR__1798
18248     7B 00 00 FF 
1824c     38 E4 05 F1 | 	add	objptr, ##63032
18250     F2 24 02 FB | 	rdlong	local04, objptr
18254     7B 00 00 FF 
18258     38 E4 85 F1 | 	sub	objptr, ##63032
1825c     12 23 02 F6 | 	mov	local03, local04
18260     20 22 56 F2 | 	cmps	local03, #32 wc
18264     20 00 90 3D |  if_ae	jmp	#LR__1798
18268     7B 00 00 FF 
1826c     38 E4 05 F1 | 	add	objptr, ##63032
18270     F2 20 02 FB | 	rdlong	local02, objptr
18274     09 20 86 F1 | 	sub	local02, #9
18278     F2 20 62 FC | 	wrlong	local02, objptr
1827c     7B 00 00 FF 
18280     38 E4 85 F1 | 	sub	objptr, ##63032
18284     54 00 90 FD | 	jmp	#LR__1800
18288                 | LR__1798
18288     7B 00 00 FF 
1828c     38 E4 05 F1 | 	add	objptr, ##63032
18290     F2 20 02 FB | 	rdlong	local02, objptr
18294     7B 00 00 FF 
18298     38 E4 85 F1 | 	sub	objptr, ##63032
1829c     0E 20 56 F2 | 	cmps	local02, #14 wc
182a0     38 00 90 CD |  if_b	jmp	#LR__1799
182a4     7B 00 00 FF 
182a8     38 E4 05 F1 | 	add	objptr, ##63032
182ac     F2 24 02 FB | 	rdlong	local04, objptr
182b0     7B 00 00 FF 
182b4     38 E4 85 F1 | 	sub	objptr, ##63032
182b8     12 23 02 F6 | 	mov	local03, local04
182bc     17 22 56 F2 | 	cmps	local03, #23 wc
182c0     7B 00 00 CF 
182c4     38 E4 05 C1 |  if_b	add	objptr, ##63032
182c8     F2 20 02 CB |  if_b	rdlong	local02, objptr
182cc     27 20 06 C1 |  if_b	add	local02, #39
182d0     F2 20 62 CC |  if_b	wrlong	local02, objptr
182d4     7B 00 00 CF 
182d8     38 E4 85 C1 |  if_b	sub	objptr, ##63032
182dc                 | LR__1799
182dc                 | LR__1800
182dc                 | LR__1801
182dc                 | LR__1802
182dc                 | LR__1803
182dc                 | '  
182dc                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
182dc     7B 00 00 FF 
182e0     38 E4 05 F1 | 	add	objptr, ##63032
182e4     F2 20 02 FB | 	rdlong	local02, objptr
182e8     7B 00 00 FF 
182ec     38 E4 85 F1 | 	sub	objptr, ##63032
182f0     01 20 56 F2 | 	cmps	local02, #1 wc
182f4     90 00 90 CD |  if_b	jmp	#LR__1804
182f8     7B 00 00 FF 
182fc     38 E4 05 F1 | 	add	objptr, ##63032
18300     F2 24 02 FB | 	rdlong	local04, objptr
18304     7B 00 00 FF 
18308     38 E4 85 F1 | 	sub	objptr, ##63032
1830c     12 23 02 F6 | 	mov	local03, local04
18310     7F 22 56 F2 | 	cmps	local03, #127 wc
18314     38 E4 05 C1 |  if_b	add	objptr, #56
18318     F2 1E E2 CA |  if_b	rdword	local01, objptr
1831c     38 E4 85 C1 |  if_b	sub	objptr, #56
18320     0F 27 32 C9 |  if_b	getword	local05, local01, #0
18324     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
18328     5C 00 90 3D |  if_ae	jmp	#LR__1804
1832c     7B 00 00 FF 
18330     38 E4 05 F1 | 	add	objptr, ##63032
18334     F2 12 02 FB | 	rdlong	arg01, objptr
18338     7B 00 00 FF 
1833c     38 E4 85 F1 | 	sub	objptr, ##63032
18340     E0 4B B0 FD | 	call	#__system__Chr_S
18344     FD 2A 02 F6 | 	mov	local07, result1
18348     56 00 00 FF 
1834c     A0 E5 05 F1 | 	add	objptr, ##44448
18350     F2 12 02 FB | 	rdlong	arg01, objptr
18354     56 00 00 FF 
18358     A0 E5 85 F1 | 	sub	objptr, ##44448
1835c     15 15 02 F6 | 	mov	arg02, local07
18360     10 2A B0 FD | 	call	#__system___string_concat
18364     56 00 00 FF 
18368     A0 E5 05 F1 | 	add	objptr, ##44448
1836c     F2 FA 61 FC | 	wrlong	result1, objptr
18370     24 00 00 FF 
18374     98 E4 05 F1 | 	add	objptr, ##18584
18378     F2 12 02 FB | 	rdlong	arg01, objptr
1837c     7B 00 00 FF 
18380     38 E4 85 F1 | 	sub	objptr, ##63032
18384     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
18388                 | LR__1804
18388                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
18388     7B 00 00 FF 
1838c     38 E4 05 F1 | 	add	objptr, ##63032
18390     F2 20 02 FB | 	rdlong	local02, objptr
18394     7B 00 00 FF 
18398     38 E4 85 F1 | 	sub	objptr, ##63032
1839c     01 20 56 F2 | 	cmps	local02, #1 wc
183a0     D0 00 90 CD |  if_b	jmp	#LR__1805
183a4     7B 00 00 FF 
183a8     38 E4 05 F1 | 	add	objptr, ##63032
183ac     F2 24 02 FB | 	rdlong	local04, objptr
183b0     7B 00 00 FF 
183b4     38 E4 85 F1 | 	sub	objptr, ##63032
183b8     12 23 02 F6 | 	mov	local03, local04
183bc     7F 22 56 F2 | 	cmps	local03, #127 wc
183c0     B0 00 90 3D |  if_ae	jmp	#LR__1805
183c4     38 E4 05 F1 | 	add	objptr, #56
183c8     F2 1E E2 FA | 	rdword	local01, objptr
183cc     38 E4 85 F1 | 	sub	objptr, #56
183d0     0F 27 32 F9 | 	getword	local05, local01, #0
183d4     FE 26 0E F2 | 	cmp	local05, #254 wz
183d8     79 00 00 AF 
183dc     64 E5 05 A1 |  if_e	add	objptr, ##62308
183e0     F2 2C 02 AB |  if_e	rdlong	local08, objptr
183e4     79 00 00 AF 
183e8     64 E5 85 A1 |  if_e	sub	objptr, ##62308
183ec     16 2F 02 A6 |  if_e	mov	local09, local08
183f0     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
183f4     7C 00 90 5D |  if_ne	jmp	#LR__1805
183f8     04 00 00 FF 
183fc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
18400     F5 14 02 F6 | 	mov	arg02, ptr__dat__
18404     04 00 00 FF 
18408     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1840c     56 00 00 FF 
18410     44 22 06 F6 | 	mov	local03, ##44100
18414     0C 24 C6 F9 | 	decod	local04, #12
18418     00 26 06 F6 | 	mov	local05, #0
1841c     03 00 00 FF 
18420     DE 1E 06 F6 | 	mov	local01, ##1758
18424     07 12 06 F6 | 	mov	arg01, #7
18428     56 00 00 FF 
1842c     44 16 06 F6 | 	mov	arg03, ##44100
18430     0C 18 C6 F9 | 	decod	arg04, #12
18434     00 1A 06 F6 | 	mov	arg05, #0
18438     03 00 00 FF 
1843c     DE 1C 06 F6 | 	mov	arg06, ##1758
18440     0B 00 00 FF 
18444     C0 E4 05 F1 | 	add	objptr, ##5824
18448     7C 24 B0 FD | 	call	#_audio096_spin2_play
1844c     0B 00 00 FF 
18450     C0 E4 85 F1 | 	sub	objptr, ##5824
18454     2C 13 06 F6 | 	mov	arg01, #300
18458     B0 2B B0 FD | 	call	#__system___waitms
1845c     07 12 06 F6 | 	mov	arg01, #7
18460     0B 00 00 FF 
18464     C0 E4 05 F1 | 	add	objptr, ##5824
18468     AC 25 B0 FD | 	call	#_audio096_spin2_stop
1846c     0B 00 00 FF 
18470     C0 E4 85 F1 | 	sub	objptr, ##5824
18474                 | LR__1805
18474                 | '  
18474                 | '   'tab
18474                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
18474     7B 00 00 FF 
18478     30 E4 05 F1 | 	add	objptr, ##63024
1847c     F2 20 02 FB | 	rdlong	local02, objptr
18480     7B 00 00 FF 
18484     30 E4 85 F1 | 	sub	objptr, ##63024
18488     10 21 E2 F8 | 	getbyte	local02, local02, #0
1848c     2B 20 0E F2 | 	cmp	local02, #43 wz
18490     B4 00 90 5D |  if_ne	jmp	#LR__1806
18494     38 E4 05 F1 | 	add	objptr, #56
18498     F2 24 E2 FA | 	rdword	local04, objptr
1849c     38 E4 85 F1 | 	sub	objptr, #56
184a0     12 23 32 F9 | 	getword	local03, local04, #0
184a4     F0 22 16 F2 | 	cmp	local03, #240 wc
184a8     9C 00 90 CD |  if_b	jmp	#LR__1806
184ac     79 00 00 FF 
184b0     64 E5 05 F1 | 	add	objptr, ##62308
184b4     F2 1E 02 FB | 	rdlong	local01, objptr
184b8     79 00 00 FF 
184bc     64 E5 85 F1 | 	sub	objptr, ##62308
184c0     0F 27 02 F6 | 	mov	local05, local01
184c4     01 26 0E F2 | 	cmp	local05, #1 wz
184c8     7C 00 90 5D |  if_ne	jmp	#LR__1806
184cc     04 00 00 FF 
184d0     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
184d4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
184d8     04 00 00 FF 
184dc     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
184e0     56 00 00 FF 
184e4     44 22 06 F6 | 	mov	local03, ##44100
184e8     0E 24 C6 F9 | 	decod	local04, #14
184ec     00 26 06 F6 | 	mov	local05, #0
184f0     03 00 00 FF 
184f4     DE 1E 06 F6 | 	mov	local01, ##1758
184f8     00 12 06 F6 | 	mov	arg01, #0
184fc     56 00 00 FF 
18500     44 16 06 F6 | 	mov	arg03, ##44100
18504     0E 18 C6 F9 | 	decod	arg04, #14
18508     00 1A 06 F6 | 	mov	arg05, #0
1850c     03 00 00 FF 
18510     DE 1C 06 F6 | 	mov	arg06, ##1758
18514     0B 00 00 FF 
18518     C0 E4 05 F1 | 	add	objptr, ##5824
1851c     A8 23 B0 FD | 	call	#_audio096_spin2_play
18520     0B 00 00 FF 
18524     C0 E4 85 F1 | 	sub	objptr, ##5824
18528     2C 13 06 F6 | 	mov	arg01, #300
1852c     DC 2A B0 FD | 	call	#__system___waitms
18530     00 12 06 F6 | 	mov	arg01, #0
18534     0B 00 00 FF 
18538     C0 E4 05 F1 | 	add	objptr, ##5824
1853c     D8 24 B0 FD | 	call	#_audio096_spin2_stop
18540     0B 00 00 FF 
18544     C0 E4 85 F1 | 	sub	objptr, ##5824
18548                 | LR__1806
18548                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
18548     7B 00 00 FF 
1854c     30 E4 05 F1 | 	add	objptr, ##63024
18550     F2 20 02 FB | 	rdlong	local02, objptr
18554     7B 00 00 FF 
18558     30 E4 85 F1 | 	sub	objptr, ##63024
1855c     10 21 E2 F8 | 	getbyte	local02, local02, #0
18560     2B 20 0E F2 | 	cmp	local02, #43 wz
18564     AC 00 90 5D |  if_ne	jmp	#LR__1809
18568     38 E4 05 F1 | 	add	objptr, #56
1856c     F2 24 E2 FA | 	rdword	local04, objptr
18570     38 E4 85 F1 | 	sub	objptr, #56
18574     12 23 32 F9 | 	getword	local03, local04, #0
18578     F0 22 16 F2 | 	cmp	local03, #240 wc
1857c     94 00 90 3D |  if_ae	jmp	#LR__1809
18580     38 E4 05 F1 | 	add	objptr, #56
18584     F2 20 E2 FA | 	rdword	local02, objptr
18588     10 23 52 F6 | 	abs	local03, local02 wc
1858c     11 23 42 F8 | 	getnib	local03, local03, #0
18590     11 23 82 F6 | 	negc	local03, local03
18594     11 25 52 F6 | 	abs	local04, local03 wc
18598     01 24 46 F0 | 	shr	local04, #1
1859c     12 25 82 F6 | 	negc	local04, local04
185a0     7B 00 00 FF 
185a4     04 E4 05 F1 | 	add	objptr, ##62980
185a8     F2 24 62 FC | 	wrlong	local04, objptr
185ac     12 31 02 F6 | 	mov	local10, local04
185b0     7B 00 00 FF 
185b4     3C E4 85 F1 | 	sub	objptr, ##63036
185b8                 | LR__1807
185b8     08 30 56 F2 | 	cmps	local10, #8 wc
185bc     54 00 90 3D |  if_ae	jmp	#LR__1808
185c0     56 00 00 FF 
185c4     A0 E5 05 F1 | 	add	objptr, ##44448
185c8     F2 12 02 FB | 	rdlong	arg01, objptr
185cc     56 00 00 FF 
185d0     A0 E5 85 F1 | 	sub	objptr, ##44448
185d4     57 01 00 FF 
185d8     6F 24 06 F6 | 	mov	local04, ##@LR__4800
185dc     12 15 02 F6 | 	mov	arg02, local04
185e0     90 27 B0 FD | 	call	#__system___string_concat
185e4     56 00 00 FF 
185e8     A0 E5 05 F1 | 	add	objptr, ##44448
185ec     F2 FA 61 FC | 	wrlong	result1, objptr
185f0     56 00 00 FF 
185f4     A0 E5 85 F1 | 	sub	objptr, ##44448
185f8     57 01 00 FF 
185fc     71 12 06 F6 | 	mov	arg01, ##@LR__4801
18600     74 16 B0 FD | 	call	#_hg010b_spin2_write
18604     18 23 02 F6 | 	mov	local03, local10
18608     01 22 06 F1 | 	add	local03, #1
1860c     11 31 02 F6 | 	mov	local10, local03
18610     A4 FF 9F FD | 	jmp	#LR__1807
18614                 | LR__1808
18614                 | LR__1809
18614                 | '  
18614                 | '   'backspace
18614                 | '   if (key3 and 255) = 42 then 
18614     7B 00 00 FF 
18618     30 E4 05 F1 | 	add	objptr, ##63024
1861c     F2 20 02 FB | 	rdlong	local02, objptr
18620     7B 00 00 FF 
18624     30 E4 85 F1 | 	sub	objptr, ##63024
18628     10 21 E2 F8 | 	getbyte	local02, local02, #0
1862c     2A 20 0E F2 | 	cmp	local02, #42 wz
18630     D4 00 90 5D |  if_ne	jmp	#LR__1814
18634                 | '       if v.cursor_x>4 then 
18634     38 E4 05 F1 | 	add	objptr, #56
18638     F2 20 E2 FA | 	rdword	local02, objptr
1863c     38 E4 85 F1 | 	sub	objptr, #56
18640     05 20 16 F2 | 	cmp	local02, #5 wc
18644     9C 00 90 CD |  if_b	jmp	#LR__1812
18648     56 00 00 FF 
1864c     A0 E5 05 F1 | 	add	objptr, ##44448
18650     F2 26 02 FB | 	rdlong	local05, objptr
18654     56 00 00 FF 
18658     A0 E5 85 F1 | 	sub	objptr, ##44448
1865c     13 13 02 F6 | 	mov	arg01, local05
18660     09 33 02 F6 | 	mov	local11, arg01
18664     97 06 48 FB | 	callpa	#(@LR__1811-@LR__1810)>>2,fcache_load_ptr_
18668                 | LR__1810
18668     19 FB C9 FA | 	rdbyte	result1, local11 wz
1866c     01 32 06 51 |  if_ne	add	local11, #1
18670     F4 FF 9F 5D |  if_ne	jmp	#LR__1810
18674                 | LR__1811
18674     09 33 82 F1 | 	sub	local11, arg01
18678     19 15 02 F6 | 	mov	arg02, local11
1867c     01 14 86 F1 | 	sub	arg02, #1
18680     13 13 02 F6 | 	mov	arg01, local05
18684     D8 46 B0 FD | 	call	#__system__Left_S
18688     56 00 00 FF 
1868c     A0 E5 05 F1 | 	add	objptr, ##44448
18690     F2 FA 61 FC | 	wrlong	result1, objptr
18694     56 00 00 FF 
18698     68 E5 85 F1 | 	sub	objptr, ##44392
1869c     F2 12 E2 FA | 	rdword	arg01, objptr
186a0     02 12 86 F1 | 	sub	arg01, #2
186a4     02 E4 05 F1 | 	add	objptr, #2
186a8     F2 14 C2 FA | 	rdbyte	arg02, objptr
186ac     3A E4 85 F1 | 	sub	objptr, #58
186b0     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
186b4     20 12 06 F6 | 	mov	arg01, #32
186b8     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
186bc     38 E4 05 F1 | 	add	objptr, #56
186c0     F2 12 E2 FA | 	rdword	arg01, objptr
186c4     02 12 86 F1 | 	sub	arg01, #2
186c8     02 E4 05 F1 | 	add	objptr, #2
186cc     F2 24 C2 FA | 	rdbyte	local04, objptr
186d0     3A E4 85 F1 | 	sub	objptr, #58
186d4     12 23 E2 F8 | 	getbyte	local03, local04, #0
186d8     11 15 02 F6 | 	mov	arg02, local03
186dc     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
186e0     24 00 90 FD | 	jmp	#LR__1813
186e4                 | LR__1812
186e4     57 01 00 FF 
186e8     73 20 06 F6 | 	mov	local02, ##@LR__4802
186ec     56 00 00 FF 
186f0     A0 E5 05 F1 | 	add	objptr, ##44448
186f4     F2 20 62 FC | 	wrlong	local02, objptr
186f8     56 00 00 FF 
186fc     68 E5 85 F1 | 	sub	objptr, ##44392
18700     F2 08 58 FC | 	wrword	#4, objptr
18704     38 E4 85 F1 | 	sub	objptr, #56
18708                 | LR__1813
18708                 | LR__1814
18708                 | '    
18708                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
18708                 | '  
18708                 | '   if key4=key_enter then 
18708     7B 00 00 FF 
1870c     38 E4 05 F1 | 	add	objptr, ##63032
18710     F2 28 02 FB | 	rdlong	local06, objptr
18714     7B 00 00 FF 
18718     38 E4 85 F1 | 	sub	objptr, ##63032
1871c     8D 28 0E F2 | 	cmp	local06, #141 wz
18720     50 00 90 5D |  if_ne	jmp	#LR__1815
18724     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
18728     F0 82 BE FD | 	call	#_interpret
1872c     57 01 00 FF 
18730     74 20 06 F6 | 	mov	local02, ##@LR__4803
18734     56 00 00 FF 
18738     A0 E5 05 F1 | 	add	objptr, ##44448
1873c     F2 20 62 FC | 	wrlong	local02, objptr
18740     1A FA 61 FD | 	getct	result1
18744     24 00 00 FF 
18748     A0 E4 05 F1 | 	add	objptr, ##18592
1874c     F2 24 02 FB | 	rdlong	local04, objptr
18750     12 23 02 F6 | 	mov	local03, local04
18754     11 FB 81 F1 | 	sub	result1, local03
18758     F2 FA 61 FC | 	wrlong	result1, objptr
1875c     14 E4 85 F1 | 	sub	objptr, #20
18760     F2 00 68 FC | 	wrlong	#0, objptr
18764     08 E4 05 F1 | 	add	objptr, #8
18768     F2 00 68 FC | 	wrlong	#0, objptr
1876c     7B 00 00 FF 
18770     34 E4 85 F1 | 	sub	objptr, ##63028
18774                 | LR__1815
18774     7B 00 00 FF 
18778     30 E4 05 F1 | 	add	objptr, ##63024
1877c     F2 00 68 FC | 	wrlong	#0, objptr
18780     7B 00 00 FF 
18784     30 E4 85 F1 | 	sub	objptr, ##63024
18788     80 F6 9F FD | 	jmp	#LR__1790
1878c     A7 F0 03 F6 | 	mov	ptra, fp
18790     B2 00 A0 FD | 	call	#popregs_
18794                 | _program_ret
18794     2D 00 64 FD | 	ret
18798                 | 
18798                 | ' '' this is not a main program.
18798                 | ' 
18798                 | ' '****************************************************************************************************************
18798                 | ' '                                                                                                             	*
18798                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
18798                 | ' '                                                                                                            	*
18798                 | ' ' mode - mode #, see below											*
18798                 | ' ' base - HDMI base pin												*
18798                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
18798                 | ' '														*
18798                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
18798                 | ' '' set bit #15 for custom timings														*
18798                 | ' '' p - 1 - psram, 0 - hub											*
18798                 | ' '' t - 1 - graphics, 0 - text											*
18798                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
18798                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
18798                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
18798                 | ' '														*
18798                 | ' '****************************************************************************************************************
18798                 | ' 
18798                 | ' pub start(base,mb):result |i
18798                 | _hg010b_spin2_start
18798                 | ' 
18798                 | ' '--------------------------- initialize pointers and variables
18798                 | ' 
18798                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
18798     30 E4 05 F1 | 	add	objptr, #48
1879c     F2 FA 01 F6 | 	mov	result1, objptr
187a0     28 E4 85 F1 | 	sub	objptr, #40
187a4     F2 FA 61 FC | 	wrlong	result1, objptr
187a8                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
187a8                 | ' hdmibase:=base							' HDMI base pin, 8*n
187a8     18 E4 05 F1 | 	add	objptr, #24
187ac     F2 12 62 FC | 	wrlong	arg01, objptr
187b0                 | ' mailbox_ptr:=mb		
187b0     04 E4 05 F1 | 	add	objptr, #4
187b4     F2 14 62 FC | 	wrlong	arg02, objptr
187b8                 | ' mailbox0:=mb				' PSRAM mailbox pointer
187b8     C1 E5 05 F1 | 	add	objptr, #449
187bc     F2 14 62 FC | 	wrlong	arg02, objptr
187c0                 | ' sprite_ptr:=@spr1ptr
187c0     D8 E4 85 F1 | 	sub	objptr, #216
187c4     F2 FA 01 F6 | 	mov	result1, objptr
187c8     E5 E4 85 F1 | 	sub	objptr, #229
187cc     F2 FA 61 FC | 	wrlong	result1, objptr
187d0                 | ' 
187d0                 | ' 		'
187d0                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
187d0     E5 E4 05 F1 | 	add	objptr, #229
187d4     F2 FA 01 FB | 	rdlong	result1, objptr
187d8     D0 FA 05 F1 | 	add	result1, #208
187dc     FD 10 58 FC | 	wrword	#8, result1
187e0                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
187e0     F2 16 02 FB | 	rdlong	arg03, objptr
187e4     D2 16 06 F1 | 	add	arg03, #210
187e8     0B 21 58 FC | 	wrword	#16, arg03
187ec                 | ' leading_spaces:=0				'
187ec     A5 E5 05 F1 | 	add	objptr, #421
187f0     F2 00 68 FC | 	wrlong	#0, objptr
187f4                 | ' 
187f4                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
187f4     99 E4 85 F1 | 	sub	objptr, #153
187f8     00 00 A0 FF 
187fc     F2 0E 68 FC | 	wrlong	##1073741831, objptr
18800                 | ' emptydl[1]:=0
18800     04 E4 05 F1 | 	add	objptr, #4
18804     F2 00 68 FC | 	wrlong	#0, objptr
18808                 | ' 
18808                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
18808                 | ' 
18808                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
18808     28 E5 85 F1 | 	sub	objptr, #296
1880c     F2 02 68 FC | 	wrlong	#1, objptr
18810                 | ' if s_debug<>0
18810                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
18810     20 00 80 FF 
18814     F2 00 68 FC | 	wrlong	##16384, objptr
18818     F5 E4 85 F1 | 	sub	objptr, #245
1881c                 | ' setmode()							' set the mode, see below
1881c     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
18820                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
18820     45 E4 05 F1 | 	add	objptr, #69
18824     F2 FA 01 F6 | 	mov	result1, objptr
18828     35 E4 85 F1 | 	sub	objptr, #53
1882c     F2 FA 61 FC | 	wrlong	result1, objptr
18830                 | ' cursor_ptr:=@cursor_x						
18830     28 E4 05 F1 | 	add	objptr, #40
18834     F2 16 02 F6 | 	mov	arg03, objptr
18838     2C E4 85 F1 | 	sub	objptr, #44
1883c     F2 16 62 FC | 	wrlong	arg03, objptr
18840                 | ' fontnum:=0  							' start with a PC type font 
18840     55 E4 05 F1 | 	add	objptr, #85
18844     F2 00 68 FC | 	wrlong	#0, objptr
18848                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
18848     1C E4 05 F1 | 	add	objptr, #28
1884c     F2 12 02 F6 | 	mov	arg01, objptr
18850     7D E4 85 F1 | 	sub	objptr, #125
18854     10 00 00 FF 
18858     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1885c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
18860     10 00 00 FF 
18864     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
18868     10 16 06 F6 | 	mov	arg03, #16
1886c     C8 23 B0 FD | 	call	#__system____builtin_memmove
18870                 | ' leading_spaces:=0
18870     01 00 00 FF 
18874     B2 E4 05 F1 | 	add	objptr, ##690
18878     F2 00 68 FC | 	wrlong	#0, objptr
1887c     01 00 00 FF 
18880     B2 E4 85 F1 | 	sub	objptr, ##690
18884                 | ' '---------------------------- initialize a cursor (MSDOS type)
18884                 | ' 
18884                 | ' initcursor(154)
18884     9A 12 06 F6 | 	mov	arg01, #154
18888     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1888c                 | ' 
1888c                 | ' '---------------------------- start the cog
1888c                 | ' 
1888c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1888c     10 00 00 FF 
18890     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
18894     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
18898     10 00 00 FF 
1889c     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
188a0     10 E4 05 F1 | 	add	objptr, #16
188a4     10 FA 05 F6 | 	mov	result1, #16
188a8     28 E4 61 FD | 	setq	objptr
188ac     0A FB F1 FC | 	coginit	result1, arg02 wc
188b0     01 FA 65 C6 |  if_b	neg	result1, #1
188b4     1C E4 05 F1 | 	add	objptr, #28
188b8     F2 FA 61 FC | 	wrlong	result1, objptr
188bc     2C E4 85 F1 | 	sub	objptr, #44
188c0                 | ' waitms(40)							' wait for stabilize
188c0     28 12 06 F6 | 	mov	arg01, #40
188c4     44 27 B0 FD | 	call	#__system___waitms
188c8                 | ' return cog							' return the driver's cog #
188c8     2C E4 05 F1 | 	add	objptr, #44
188cc     F2 FA 01 FB | 	rdlong	result1, objptr
188d0     2C E4 85 F1 | 	sub	objptr, #44
188d4                 | _hg010b_spin2_start_ret
188d4     2D 00 64 FD | 	ret
188d8                 | 
188d8                 | ' 
188d8                 | ' 
188d8                 | ' '**************************************************************************************************************** 
188d8                 | ' '                                                                                                             	*
188d8                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
188d8                 | ' '  Mode number - see start() above or bits below								*
188d8                 | ' '                                                                                                             	*
188d8                 | ' '****************************************************************************************************************
188d8                 | ' 
188d8                 | ' '---------------------------- initialize a cursor (MSDOS type)
188d8                 | ' pub initcursor(color) |i
188d8                 | _hg010b_spin2_initcursor
188d8     03 4A 05 F6 | 	mov	COUNT_, #3
188dc     A8 00 A0 FD | 	call	#pushregs_
188e0     09 1F 02 F6 | 	mov	local01, arg01
188e4                 | ' 
188e4                 | ' cursor_x:=0							' place the cursor at 0:0
188e4     38 E4 05 F1 | 	add	objptr, #56
188e8     F2 00 58 FC | 	wrword	#0, objptr
188ec                 | ' cursor_y:=0
188ec     02 E4 05 F1 | 	add	objptr, #2
188f0     F2 00 48 FC | 	wrbyte	#0, objptr
188f4                 | ' repeat i from 0 to 111
188f4     00 20 06 F6 | 	mov	local02, #0
188f8     F8 E5 05 F1 | 	add	objptr, #504
188fc     97 1A 48 FB | 	callpa	#(@LR__1822-@LR__1820)>>2,fcache_load_ptr_
18900                 | LR__1820
18900                 | '   cursor[i]:=0
18900     10 23 02 F6 | 	mov	local03, local02
18904     F2 22 02 F1 | 	add	local03, objptr
18908     11 01 48 FC | 	wrbyte	#0, local03
1890c     01 20 06 F1 | 	add	local02, #1
18910     70 20 56 F2 | 	cmps	local02, #112 wc
18914     E8 FF 9F CD |  if_b	jmp	#LR__1820
18918                 | ' repeat i from 112 to 127
18918     70 20 06 F6 | 	mov	local02, #112
1891c                 | LR__1821
1891c                 | '   cursor[i]:=color  
1891c     10 23 02 F6 | 	mov	local03, local02
18920     F2 22 02 F1 | 	add	local03, objptr
18924     11 1F 42 FC | 	wrbyte	local01, local03
18928     01 20 06 F1 | 	add	local02, #1
1892c     80 20 16 F2 | 	cmp	local02, #128 wc
18930     E8 FF 9F CD |  if_b	jmp	#LR__1821
18934                 | LR__1822
18934                 | ' 'repeat i from 0 to 127
18934                 | ' '  if ((i/8)//2)
18934                 | ' '    cursor[i]:=15
18934                 | ' '  else
18934                 | ' '    cursor[i]:=0
18934                 | ' '  if i>=120    
18934                 | ' '    cursor[i]:=40
18934                 | ' setspriteptr(17,@cursor)
18934     F2 14 02 F6 | 	mov	arg02, objptr
18938     01 00 00 FF 
1893c     32 E4 85 F1 | 	sub	objptr, ##562
18940     11 12 06 F6 | 	mov	arg01, #17
18944     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
18948                 | ' setspritesize(17,8,16)
18948     11 12 06 F6 | 	mov	arg01, #17
1894c     08 14 06 F6 | 	mov	arg02, #8
18950     10 16 06 F6 | 	mov	arg03, #16
18954     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
18958                 | ' setspritepos(17,0,0)
18958     11 12 06 F6 | 	mov	arg01, #17
1895c     00 14 06 F6 | 	mov	arg02, #0
18960     00 16 06 F6 | 	mov	arg03, #0
18964     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
18968     A7 F0 03 F6 | 	mov	ptra, fp
1896c     B2 00 A0 FD | 	call	#popregs_
18970                 | _hg010b_spin2_initcursor_ret
18970     2D 00 64 FD | 	ret
18974                 | 
18974                 | ' 
18974                 | '  
18974                 | ' pub setcursorcolor(color) |i
18974                 | _hg010b_spin2_setcursorcolor
18974                 | ' 
18974                 | ' 
18974                 | ' repeat i from 0 to 111
18974     00 00 06 F6 | 	mov	_var01, #0
18978     01 00 00 FF 
1897c     32 E4 05 F1 | 	add	objptr, ##562
18980     97 1A 48 FB | 	callpa	#(@LR__1832-@LR__1830)>>2,fcache_load_ptr_
18984                 | LR__1830
18984                 | '   cursor[i]:=0
18984     00 03 02 F6 | 	mov	_var02, _var01
18988     F2 02 02 F1 | 	add	_var02, objptr
1898c     01 01 48 FC | 	wrbyte	#0, _var02
18990     01 00 06 F1 | 	add	_var01, #1
18994     70 00 56 F2 | 	cmps	_var01, #112 wc
18998     E8 FF 9F CD |  if_b	jmp	#LR__1830
1899c                 | ' repeat i from 112 to 127
1899c     70 00 06 F6 | 	mov	_var01, #112
189a0                 | LR__1831
189a0                 | '   cursor[i]:=color  
189a0     00 03 02 F6 | 	mov	_var02, _var01
189a4     F2 02 02 F1 | 	add	_var02, objptr
189a8     01 13 42 FC | 	wrbyte	arg01, _var02
189ac     01 00 06 F1 | 	add	_var01, #1
189b0     80 00 16 F2 | 	cmp	_var01, #128 wc
189b4     E8 FF 9F CD |  if_b	jmp	#LR__1831
189b8                 | LR__1832
189b8     01 00 00 FF 
189bc     32 E4 85 F1 | 	sub	objptr, ##562
189c0                 | _hg010b_spin2_setcursorcolor_ret
189c0     2D 00 64 FD | 	ret
189c4                 | 
189c4                 | '  
189c4                 | ' 
189c4                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
189c4                 | _hg010b_spin2_setmode
189c4     02 4A 05 F6 | 	mov	COUNT_, #2
189c8     A8 00 A0 FD | 	call	#pushregs_
189cc                 | ' 
189cc                 | ' 
189cc                 | ' dl_ptr:=@emptydl[0]
189cc     01 00 00 FF 
189d0     19 E4 05 F1 | 	add	objptr, ##537
189d4     F2 64 02 F6 | 	mov	muldivb_, objptr
189d8     FD E5 85 F1 | 	sub	objptr, #509
189dc     F2 64 62 FC | 	wrlong	muldivb_, objptr
189e0                 | ' 
189e0                 | ' if cog>0 
189e0     10 E4 05 F1 | 	add	objptr, #16
189e4     F2 64 02 FB | 	rdlong	muldivb_, objptr
189e8     2C E4 85 F1 | 	sub	objptr, #44
189ec     01 64 56 F2 | 	cmps	muldivb_, #1 wc
189f0                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
189f0     01 12 06 36 |  if_ae	mov	arg01, #1
189f4     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
189f8                 | ' xres:=1024
189f8     01 00 00 FF 
189fc     22 E4 05 F1 | 	add	objptr, ##546
18a00     02 00 80 FF 
18a04     F2 00 68 FC | 	wrlong	##1024, objptr
18a08                 | ' yres:=576  
18a08     04 E4 05 F1 | 	add	objptr, #4
18a0c     01 00 80 FF 
18a10     F2 80 68 FC | 	wrlong	##576, objptr
18a14                 | ' ppl:=(timings[3])
18a14     10 00 00 FF 
18a18     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
18a1c     F7 64 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
18a20     51 E5 85 F1 | 	sub	objptr, #337
18a24     F2 64 62 FC | 	wrlong	muldivb_, objptr
18a28                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
18a28     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
18a2c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
18a30     01 1E 66 F0 | 	shl	local01, #1
18a34     80 E4 85 F1 | 	sub	objptr, #128
18a38     F2 1E 62 FC | 	wrlong	local01, objptr
18a3c                 | ' cpl1:=cpl '' todo remove
18a3c     04 E4 05 F1 | 	add	objptr, #4
18a40     F2 1E 62 FC | 	wrlong	local01, objptr
18a44                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
18a44     02 00 00 FF 
18a48     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
18a4c     41 E4 85 F1 | 	sub	objptr, #65
18a50     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
18a54                 | ' repeat i from 0 to 3
18a54     00 20 06 F6 | 	mov	local02, #0
18a58     02 00 00 FF 
18a5c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
18a60     08 E4 05 F1 | 	add	objptr, #8
18a64     97 20 48 FB | 	callpa	#(@LR__1841-@LR__1840)>>2,fcache_load_ptr_
18a68                 | LR__1840
18a68                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
18a68     10 1F 02 F6 | 	mov	local01, local02
18a6c     02 1E 66 F0 | 	shl	local01, #2
18a70     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
18a74     F2 64 02 FB | 	rdlong	muldivb_, objptr
18a78     11 64 66 F0 | 	shl	muldivb_, #17
18a7c     0F 1F 02 FB | 	rdlong	local01, local01
18a80     32 1F 02 F1 | 	add	local01, muldivb_
18a84     80 40 38 FF 
18a88     00 1E 06 F1 | 	add	local01, ##1887502336
18a8c     10 65 02 F6 | 	mov	muldivb_, local02
18a90     02 64 66 F0 | 	shl	muldivb_, #2
18a94     F7 64 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
18a98     32 1F 62 FC | 	wrlong	local01, muldivb_
18a9c     01 20 06 F1 | 	add	local02, #1
18aa0     04 20 56 F2 | 	cmps	local02, #4 wc
18aa4     C0 FF 9F CD |  if_b	jmp	#LR__1840
18aa8                 | LR__1841
18aa8     20 E4 85 F1 | 	sub	objptr, #32
18aac                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
18aac     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
18ab0     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
18ab4     14 1E 66 FC | 	wrlong	local01, #20
18ab8                 | ' hubset(timings[10])
18ab8     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
18abc     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
18ac0     10 00 00 FF 
18ac4     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
18ac8     00 12 62 FD | 	hubset	arg01
18acc                 | ' waitms(1)                                                   	' wait for stabilization
18acc     01 12 06 F6 | 	mov	arg01, #1
18ad0     38 25 B0 FD | 	call	#__system___waitms
18ad4     10 00 00 FF 
18ad8     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
18adc     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
18ae0     5D E4 05 F1 | 	add	objptr, #93
18ae4     F2 20 62 FC | 	wrlong	local02, objptr
18ae8     10 1F 52 F6 | 	abs	local01, local02 wc
18aec     04 1E 46 F0 | 	shr	local01, #4
18af0     0F 1F 82 F6 | 	negc	local01, local01
18af4     9C E4 05 F1 | 	add	objptr, #156
18af8     F2 1E 62 FC | 	wrlong	local01, objptr
18afc     A4 E4 85 F1 | 	sub	objptr, #164
18b00     F2 20 02 FB | 	rdlong	local02, objptr
18b04     08 E4 05 F1 | 	add	objptr, #8
18b08     F2 1E 02 FB | 	rdlong	local01, objptr
18b0c     0F 21 02 FD | 	qmul	local02, local01
18b10                 | ' lines:=timings[11]
18b10                 | ' t_lines:=lines/16
18b10                 | ' buflen:=cpl*lines						' framebuffer length in longs
18b10     29 E4 85 F1 | 	sub	objptr, #41
18b14                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
18b14     19 1E C6 F9 | 	decod	local01, #25
18b18                 | ' mode_ptr:=@timings						' set pointers to timings
18b18     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
18b1c                 | ' graphmode:=1024+512+192+48							' det global variable
18b1c                 | ' makedl(graphmode)							' make a DL for the mode
18b1c     03 00 00 FF 
18b20     F0 12 06 F6 | 	mov	arg01, ##1776
18b24     18 20 62 FD | 	getqx	local02
18b28     F2 20 62 FC | 	wrlong	local02, objptr
18b2c     34 E4 85 F1 | 	sub	objptr, #52
18b30     02 20 66 F0 | 	shl	local02, #2
18b34     10 1F 82 F1 | 	sub	local01, local02
18b38     F2 1E 62 FC | 	wrlong	local01, objptr
18b3c     14 E4 05 F1 | 	add	objptr, #20
18b40     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
18b44     79 E4 05 F1 | 	add	objptr, #121
18b48     03 00 80 FF 
18b4c     F2 E0 69 FC | 	wrlong	##1776, objptr
18b50     8D E4 85 F1 | 	sub	objptr, #141
18b54     10 00 00 FF 
18b58     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
18b5c     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
18b60                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
18b60     F2 1E 02 FB | 	rdlong	local01, objptr
18b64     D9 E4 05 F1 | 	add	objptr, #217
18b68     F2 1E 62 FC | 	wrlong	local01, objptr
18b6c                 | ' s_font_ptr:=font_ptr
18b6c     D5 E4 85 F1 | 	sub	objptr, #213
18b70     F2 1E 02 FB | 	rdlong	local01, objptr
18b74     D9 E4 05 F1 | 	add	objptr, #217
18b78     F2 1E 62 FC | 	wrlong	local01, objptr
18b7c                 | ' s_lines:=lines
18b7c     80 E4 85 F1 | 	sub	objptr, #128
18b80     F2 1E 02 FB | 	rdlong	local01, objptr
18b84     84 E4 05 F1 | 	add	objptr, #132
18b88     F2 1E 62 FC | 	wrlong	local01, objptr
18b8c                 | ' s_buflen:=buflen
18b8c     AD E4 85 F1 | 	sub	objptr, #173
18b90     F2 1E 02 FB | 	rdlong	local01, objptr
18b94     B5 E4 05 F1 | 	add	objptr, #181
18b98     F2 1E 62 FC | 	wrlong	local01, objptr
18b9c                 | ' s_cpl:=cpl
18b9c     94 E4 85 F1 | 	sub	objptr, #148
18ba0     F2 1E 02 FB | 	rdlong	local01, objptr
18ba4     90 E4 05 F1 | 	add	objptr, #144
18ba8     F2 1E 62 FC | 	wrlong	local01, objptr
18bac                 | ' s_cpl1:=cpl
18bac     90 E4 85 F1 | 	sub	objptr, #144
18bb0     F2 1E 02 FB | 	rdlong	local01, objptr
18bb4     98 E4 05 F1 | 	add	objptr, #152
18bb8     F2 1E 62 FC | 	wrlong	local01, objptr
18bbc                 | ' st_lines:=t_lines
18bbc     0C E4 05 F1 | 	add	objptr, #12
18bc0     F2 1E 02 FB | 	rdlong	local01, objptr
18bc4     04 E4 05 F1 | 	add	objptr, #4
18bc8     F2 1E 62 FC | 	wrlong	local01, objptr
18bcc                 | ' ppl:=ppl/xzoom  
18bcc     28 E4 85 F1 | 	sub	objptr, #40
18bd0     F2 62 02 FB | 	rdlong	muldiva_, objptr
18bd4     2C E4 05 F1 | 	add	objptr, #44
18bd8     F2 64 02 FB | 	rdlong	muldivb_, objptr
18bdc     01 E5 85 F1 | 	sub	objptr, #257
18be0     BA 00 A0 FD | 	call	#divide_
18be4     D5 E4 05 F1 | 	add	objptr, #213
18be8     F2 64 62 FC | 	wrlong	muldivb_, objptr
18bec                 | ' s_ppl:=ppl
18bec     1C E4 05 F1 | 	add	objptr, #28
18bf0     F2 64 62 FC | 	wrlong	muldivb_, objptr
18bf4     F1 E4 85 F1 | 	sub	objptr, #241
18bf8                 | ' waitms(20)							' wait 
18bf8     14 12 06 F6 | 	mov	arg01, #20
18bfc     0C 24 B0 FD | 	call	#__system___waitms
18c00     A7 F0 03 F6 | 	mov	ptra, fp
18c04     B2 00 A0 FD | 	call	#popregs_
18c08                 | _hg010b_spin2_setmode_ret
18c08     2D 00 64 FD | 	ret
18c0c                 | 
18c0c                 | ' 
18c0c                 | ' 
18c0c                 | ' '****************************************************************************************************************
18c0c                 | ' '                                                                                                             	*
18c0c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
18c0c                 | ' '                                                                                                             	*
18c0c                 | ' '****************************************************************************************************************
18c0c                 | ' 
18c0c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
18c0c                 | _hg010b_spin2_makedl
18c0c                 | ' 
18c0c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
18c0c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
18c0c                 | ' repeat i from 0 to 11                                                           ' clear DL
18c0c     00 00 06 F6 | 	mov	_var01, #0
18c10     E9 E5 05 F1 | 	add	objptr, #489
18c14     97 0E 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
18c18                 | LR__1850
18c18                 | '   displaylist[i]:=0 
18c18     00 03 02 F6 | 	mov	_var02, _var01
18c1c     02 02 66 F0 | 	shl	_var02, #2
18c20     F2 02 02 F1 | 	add	_var02, objptr
18c24     01 01 68 FC | 	wrlong	#0, _var02
18c28     01 00 06 F1 | 	add	_var01, #1
18c2c     0C 00 56 F2 | 	cmps	_var01, #12 wc
18c30     E4 FF 9F CD |  if_b	jmp	#LR__1850
18c34                 | LR__1851
18c34                 | '                         ' 
18c34                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
18c34     8C E5 85 F1 | 	sub	objptr, #396
18c38     F2 02 02 FB | 	rdlong	_var02, objptr
18c3c     14 02 66 F0 | 	shl	_var02, #20
18c40     01 02 06 F1 | 	add	_var02, #1
18c44     04 E4 85 F1 | 	sub	objptr, #4
18c48     F2 00 02 FB | 	rdlong	_var01, objptr
18c4c     02 00 66 F0 | 	shl	_var01, #2
18c50     04 00 66 F0 | 	shl	_var01, #4
18c54     00 03 02 F1 | 	add	_var02, _var01
18c58     90 E5 05 F1 | 	add	objptr, #400
18c5c     F2 02 62 FC | 	wrlong	_var02, objptr
18c60     E9 E5 85 F1 | 	sub	objptr, #489
18c64                 | ' displaylist[1]:=buf_ptr<<4+%10  
18c64     F2 02 02 FB | 	rdlong	_var02, objptr
18c68     04 02 66 F0 | 	shl	_var02, #4
18c6c     02 02 06 F1 | 	add	_var02, #2
18c70     ED E5 05 F1 | 	add	objptr, #493
18c74     F2 02 62 FC | 	wrlong	_var02, objptr
18c78                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
18c78     04 E4 85 F1 | 	sub	objptr, #4
18c7c     F2 02 02 F6 | 	mov	_var02, objptr
18c80     CD E5 85 F1 | 	sub	objptr, #461
18c84     F2 02 62 FC | 	wrlong	_var02, objptr
18c88     1C E4 85 F1 | 	sub	objptr, #28
18c8c                 | _hg010b_spin2_makedl_ret
18c8c     2D 00 64 FD | 	ret
18c90                 | 
18c90                 | ' 
18c90                 | ' 
18c90                 | ' '****************************************************************************************************************
18c90                 | ' '                                                                        					*
18c90                 | ' '  Graphic primitives                                                    					*
18c90                 | ' '                                                                        					*
18c90                 | ' '****************************************************************************************************************
18c90                 | ' 
18c90                 | ' pub setspriteptr(num,ptr)
18c90                 | _hg010b_spin2_setspriteptr
18c90                 | ' long[@spr1ptr+12*num]:=ptr
18c90     0D E5 05 F1 | 	add	objptr, #269
18c94     F2 00 02 F6 | 	mov	_var01, objptr
18c98     09 03 02 F6 | 	mov	_var02, arg01
18c9c     01 02 66 F0 | 	shl	_var02, #1
18ca0     09 03 02 F1 | 	add	_var02, arg01
18ca4     02 02 66 F0 | 	shl	_var02, #2
18ca8     01 01 02 F1 | 	add	_var01, _var02
18cac     00 15 62 FC | 	wrlong	arg02, _var01
18cb0     0D E5 85 F1 | 	sub	objptr, #269
18cb4                 | _hg010b_spin2_setspriteptr_ret
18cb4     2D 00 64 FD | 	ret
18cb8                 | 
18cb8                 | ' 
18cb8                 | ' pub setspritepos(num,x,y)
18cb8                 | _hg010b_spin2_setspritepos
18cb8                 | ' word[@spr1ptr+12*num+4]:=x
18cb8     0D E5 05 F1 | 	add	objptr, #269
18cbc     F2 00 02 F6 | 	mov	_var01, objptr
18cc0     09 03 02 F6 | 	mov	_var02, arg01
18cc4     01 02 66 F0 | 	shl	_var02, #1
18cc8     09 03 02 F1 | 	add	_var02, arg01
18ccc     02 02 66 F0 | 	shl	_var02, #2
18cd0     01 01 02 F1 | 	add	_var01, _var02
18cd4     04 00 06 F1 | 	add	_var01, #4
18cd8     00 15 52 FC | 	wrword	arg02, _var01
18cdc                 | ' word[@spr1ptr+12*num+6]:=y
18cdc     F2 00 02 F6 | 	mov	_var01, objptr
18ce0     09 03 02 F6 | 	mov	_var02, arg01
18ce4     01 02 66 F0 | 	shl	_var02, #1
18ce8     09 03 02 F1 | 	add	_var02, arg01
18cec     02 02 66 F0 | 	shl	_var02, #2
18cf0     01 01 02 F1 | 	add	_var01, _var02
18cf4     06 00 06 F1 | 	add	_var01, #6
18cf8     00 17 52 FC | 	wrword	arg03, _var01
18cfc     0D E5 85 F1 | 	sub	objptr, #269
18d00                 | _hg010b_spin2_setspritepos_ret
18d00     2D 00 64 FD | 	ret
18d04                 | 
18d04                 | ' 
18d04                 | ' pub setspritesize(num,w,h)
18d04                 | _hg010b_spin2_setspritesize
18d04                 | ' word[@spr1ptr+12*num+8]:=w
18d04     0D E5 05 F1 | 	add	objptr, #269
18d08     F2 00 02 F6 | 	mov	_var01, objptr
18d0c     09 03 02 F6 | 	mov	_var02, arg01
18d10     01 02 66 F0 | 	shl	_var02, #1
18d14     09 03 02 F1 | 	add	_var02, arg01
18d18     02 02 66 F0 | 	shl	_var02, #2
18d1c     01 01 02 F1 | 	add	_var01, _var02
18d20     08 00 06 F1 | 	add	_var01, #8
18d24     00 15 52 FC | 	wrword	arg02, _var01
18d28                 | ' word[@spr1ptr+12*num+10]:=h
18d28     F2 00 02 F6 | 	mov	_var01, objptr
18d2c     09 03 02 F6 | 	mov	_var02, arg01
18d30     01 02 66 F0 | 	shl	_var02, #1
18d34     09 03 02 F1 | 	add	_var02, arg01
18d38     02 02 66 F0 | 	shl	_var02, #2
18d3c     01 01 02 F1 | 	add	_var01, _var02
18d40     0A 00 06 F1 | 	add	_var01, #10
18d44     00 17 52 FC | 	wrword	arg03, _var01
18d48     0D E5 85 F1 | 	sub	objptr, #269
18d4c                 | _hg010b_spin2_setspritesize_ret
18d4c     2D 00 64 FD | 	ret
18d50                 | 
18d50                 | ' 
18d50                 | ' 
18d50                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
18d50                 | ' 
18d50                 | ' 
18d50                 | ' pub putpixel(x,y,c)
18d50                 | _hg010b_spin2_putpixel
18d50     04 4A 05 F6 | 	mov	COUNT_, #4
18d54     A8 00 A0 FD | 	call	#pushregs_
18d58     09 1F 02 F6 | 	mov	local01, arg01
18d5c                 | ' 
18d5c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
18d5c     00 20 06 F6 | 	mov	local02, #0
18d60     00 1E 56 F2 | 	cmps	local01, #0 wc
18d64     01 20 66 36 |  if_ae	neg	local02, #1
18d68     E5 E4 05 F1 | 	add	objptr, #229
18d6c     F2 1A 02 FB | 	rdlong	arg05, objptr
18d70     02 1A 66 F0 | 	shl	arg05, #2
18d74     0D 1F 52 F2 | 	cmps	local01, arg05 wc
18d78     11 23 A2 F1 | 	subx	local03, local03
18d7c     11 21 02 F5 | 	and	local02, local03
18d80     00 22 06 F6 | 	mov	local03, #0
18d84     00 14 56 F2 | 	cmps	arg02, #0 wc
18d88     01 22 66 36 |  if_ae	neg	local03, #1
18d8c     11 21 02 F5 | 	and	local02, local03
18d90     04 E4 85 F1 | 	sub	objptr, #4
18d94     F2 22 02 FB | 	rdlong	local03, objptr
18d98     E1 E4 85 F1 | 	sub	objptr, #225
18d9c     11 15 52 F2 | 	cmps	arg02, local03 wc
18da0     12 25 A2 F1 | 	subx	local04, local04
18da4     12 21 CA F7 | 	test	local02, local04 wz
18da8     48 00 90 AD |  if_e	jmp	#LR__1860
18dac     D9 E4 05 F1 | 	add	objptr, #217
18db0     F2 12 02 FB | 	rdlong	arg01, objptr
18db4     14 E4 05 F1 | 	add	objptr, #20
18db8     F2 24 02 FB | 	rdlong	local04, objptr
18dbc     02 24 66 F0 | 	shl	local04, #2
18dc0     0A 25 02 FD | 	qmul	local04, arg02
18dc4                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
18dc4     0B 15 02 F6 | 	mov	arg02, arg03
18dc8     01 16 06 F6 | 	mov	arg03, #1
18dcc     00 18 06 F6 | 	mov	arg04, #0
18dd0     01 1A 06 F6 | 	mov	arg05, #1
18dd4     0A 00 00 FF 
18dd8     D3 E5 05 F1 | 	add	objptr, ##5587
18ddc     18 24 62 FD | 	getqx	local04
18de0     0F 25 02 F1 | 	add	local04, local01
18de4     12 13 02 F1 | 	add	arg01, local04
18de8     FC 14 B0 FD | 	call	#_psram_spin2_fill
18dec     0B 00 00 FF 
18df0     C0 E4 85 F1 | 	sub	objptr, ##5824
18df4                 | LR__1860
18df4     A7 F0 03 F6 | 	mov	ptra, fp
18df8     B2 00 A0 FD | 	call	#popregs_
18dfc                 | _hg010b_spin2_putpixel_ret
18dfc     2D 00 64 FD | 	ret
18e00                 | 
18e00                 | ' 
18e00                 | ' pub putpixel2(x,y,c)
18e00                 | _hg010b_spin2_putpixel2
18e00     02 4A 05 F6 | 	mov	COUNT_, #2
18e04     A8 00 A0 FD | 	call	#pushregs_
18e08     D9 E4 05 F1 | 	add	objptr, #217
18e0c     F2 1E 02 FB | 	rdlong	local01, objptr
18e10     14 E4 05 F1 | 	add	objptr, #20
18e14     F2 1A 02 FB | 	rdlong	arg05, objptr
18e18     02 1A 66 F0 | 	shl	arg05, #2
18e1c     0A 1B 02 FD | 	qmul	arg05, arg02
18e20                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
18e20     0B 15 02 F6 | 	mov	arg02, arg03
18e24     01 16 06 F6 | 	mov	arg03, #1
18e28     00 18 06 F6 | 	mov	arg04, #0
18e2c     01 1A 06 F6 | 	mov	arg05, #1
18e30     0A 00 00 FF 
18e34     D3 E5 05 F1 | 	add	objptr, ##5587
18e38     18 20 62 FD | 	getqx	local02
18e3c     09 21 02 F1 | 	add	local02, arg01
18e40     10 1F 02 F1 | 	add	local01, local02
18e44     0F 13 02 F6 | 	mov	arg01, local01
18e48     9C 14 B0 FD | 	call	#_psram_spin2_fill
18e4c     0B 00 00 FF 
18e50     C0 E4 85 F1 | 	sub	objptr, ##5824
18e54     A7 F0 03 F6 | 	mov	ptra, fp
18e58     B2 00 A0 FD | 	call	#popregs_
18e5c                 | _hg010b_spin2_putpixel2_ret
18e5c     2D 00 64 FD | 	ret
18e60                 | 
18e60                 | ' 
18e60                 | ' pub getpixel2(x,y): c 
18e60                 | _hg010b_spin2_getpixel2
18e60     02 4A 05 F6 | 	mov	COUNT_, #2
18e64     A8 00 A0 FD | 	call	#pushregs_
18e68     0C F0 07 F1 | 	add	ptra, #12
18e6c     04 4E 05 F1 | 	add	fp, #4
18e70     A7 12 62 FC | 	wrlong	arg01, fp
18e74     04 4E 05 F1 | 	add	fp, #4
18e78     A7 14 62 FC | 	wrlong	arg02, fp
18e7c     08 4E 85 F1 | 	sub	fp, #8
18e80     A7 00 68 FC | 	wrlong	#0, fp
18e84     A7 12 02 F6 | 	mov	arg01, fp
18e88     D9 E4 05 F1 | 	add	objptr, #217
18e8c     F2 14 02 FB | 	rdlong	arg02, objptr
18e90     14 E4 05 F1 | 	add	objptr, #20
18e94     F2 16 02 FB | 	rdlong	arg03, objptr
18e98     02 16 66 F0 | 	shl	arg03, #2
18e9c     08 4E 05 F1 | 	add	fp, #8
18ea0     A7 FA 01 FB | 	rdlong	result1, fp
18ea4     FD 16 02 FD | 	qmul	arg03, result1
18ea8                 | ' 
18ea8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
18ea8     04 4E 85 F1 | 	sub	fp, #4
18eac     A7 1E 02 FB | 	rdlong	local01, fp
18eb0     04 4E 85 F1 | 	sub	fp, #4
18eb4     01 16 06 F6 | 	mov	arg03, #1
18eb8     0A 00 00 FF 
18ebc     D3 E5 05 F1 | 	add	objptr, ##5587
18ec0     18 20 62 FD | 	getqx	local02
18ec4     0F 21 02 F1 | 	add	local02, local01
18ec8     10 15 02 F1 | 	add	arg02, local02
18ecc     E0 12 B0 FD | 	call	#_psram_spin2_read1
18ed0     0B 00 00 FF 
18ed4     C0 E4 85 F1 | 	sub	objptr, ##5824
18ed8                 | ' return c
18ed8     A7 FA 01 FB | 	rdlong	result1, fp
18edc     A7 F0 03 F6 | 	mov	ptra, fp
18ee0     B2 00 A0 FD | 	call	#popregs_
18ee4                 | _hg010b_spin2_getpixel2_ret
18ee4     2D 00 64 FD | 	ret
18ee8                 | 
18ee8                 | '   
18ee8                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
18ee8                 | ' 
18ee8                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
18ee8                 | _hg010b_spin2_fastline
18ee8     02 4A 05 F6 | 	mov	COUNT_, #2
18eec     A8 00 A0 FD | 	call	#pushregs_
18ef0     09 1F 02 F6 | 	mov	local01, arg01
18ef4     0A 21 02 F6 | 	mov	local02, arg02
18ef8                 | ' 
18ef8                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
18ef8     00 16 56 F2 | 	cmps	arg03, #0 wc
18efc     F4 00 90 CD |  if_b	jmp	#LR__1870
18f00     01 00 00 FF 
18f04     26 E4 05 F1 | 	add	objptr, ##550
18f08     F2 1A 02 FB | 	rdlong	arg05, objptr
18f0c     01 00 00 FF 
18f10     26 E4 85 F1 | 	sub	objptr, ##550
18f14     0D 17 52 F2 | 	cmps	arg03, arg05 wc
18f18     D8 00 90 3D |  if_ae	jmp	#LR__1870
18f1c     00 1E 56 F2 | 	cmps	local01, #0 wc
18f20     00 20 56 C2 |  if_b	cmps	local02, #0 wc
18f24     CC 00 90 CD |  if_b	jmp	#LR__1870
18f28     01 00 00 FF 
18f2c     22 E4 05 F1 | 	add	objptr, ##546
18f30     F2 1A 02 FB | 	rdlong	arg05, objptr
18f34     01 00 00 FF 
18f38     22 E4 85 F1 | 	sub	objptr, ##546
18f3c     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
18f40     01 00 00 1F 
18f44     22 E4 05 11 |  if_a	add	objptr, ##546
18f48     F2 12 02 1B |  if_a	rdlong	arg01, objptr
18f4c     01 00 00 1F 
18f50     22 E4 85 11 |  if_a	sub	objptr, ##546
18f54     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
18f58                 | '   return
18f58     98 00 90 1D |  if_a	jmp	#LR__1870
18f5c     10 1F 5A F2 | 	cmps	local01, local02 wcz
18f60     0F 1B 02 16 |  if_a	mov	arg05, local01
18f64     10 1F 02 16 |  if_a	mov	local01, local02
18f68     0D 21 02 16 |  if_a	mov	local02, arg05
18f6c     00 1E 56 F2 | 	cmps	local01, #0 wc
18f70     00 1E 06 C6 |  if_b	mov	local01, #0
18f74     01 00 00 FF 
18f78     22 E4 05 F1 | 	add	objptr, ##546
18f7c     F2 1A 02 FB | 	rdlong	arg05, objptr
18f80     01 00 00 FF 
18f84     22 E4 85 F1 | 	sub	objptr, ##546
18f88     0D 21 52 F2 | 	cmps	local02, arg05 wc
18f8c     01 00 00 3F 
18f90     22 E4 05 31 |  if_ae	add	objptr, ##546
18f94     F2 20 02 3B |  if_ae	rdlong	local02, objptr
18f98     01 00 00 3F 
18f9c     22 E4 85 31 |  if_ae	sub	objptr, ##546
18fa0     D9 E4 05 F1 | 	add	objptr, #217
18fa4     F2 12 02 FB | 	rdlong	arg01, objptr
18fa8     14 E4 05 F1 | 	add	objptr, #20
18fac     F2 1A 02 FB | 	rdlong	arg05, objptr
18fb0     02 1A 66 F0 | 	shl	arg05, #2
18fb4     0B 1B 02 FD | 	qmul	arg05, arg03
18fb8                 | ' if x1>x2
18fb8                 | '   x1,x2:=x2,x1
18fb8                 | ' if x1<0 
18fb8                 | '   x1:=0
18fb8                 | ' if x2>=xres
18fb8                 | '   x2:=xres-1  
18fb8     01 20 86 31 |  if_ae	sub	local02, #1
18fbc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
18fbc     01 16 06 F6 | 	mov	arg03, #1
18fc0     10 17 02 F1 | 	add	arg03, local02
18fc4     0F 17 82 F1 | 	sub	arg03, local01
18fc8     0C 15 02 F6 | 	mov	arg02, arg04
18fcc     00 18 06 F6 | 	mov	arg04, #0
18fd0     01 1A 06 F6 | 	mov	arg05, #1
18fd4     0A 00 00 FF 
18fd8     D3 E5 05 F1 | 	add	objptr, ##5587
18fdc     18 20 62 FD | 	getqx	local02
18fe0     0F 21 02 F1 | 	add	local02, local01
18fe4     10 13 02 F1 | 	add	arg01, local02
18fe8     FC 12 B0 FD | 	call	#_psram_spin2_fill
18fec     0B 00 00 FF 
18ff0     C0 E4 85 F1 | 	sub	objptr, ##5824
18ff4                 | LR__1870
18ff4     A7 F0 03 F6 | 	mov	ptra, fp
18ff8     B2 00 A0 FD | 	call	#popregs_
18ffc                 | _hg010b_spin2_fastline_ret
18ffc     2D 00 64 FD | 	ret
19000                 | 
19000                 | ' 
19000                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
19000                 | _hg010b_spin2_draw
19000     0E 4A 05 F6 | 	mov	COUNT_, #14
19004     A8 00 A0 FD | 	call	#pushregs_
19008     09 1F 02 F6 | 	mov	local01, arg01
1900c     0A 21 02 F6 | 	mov	local02, arg02
19010     0B 23 02 F6 | 	mov	local03, arg03
19014     0C 25 02 F6 | 	mov	local04, arg04
19018     0D 27 02 F6 | 	mov	local05, arg05
1901c                 | ' 
1901c                 | ' if (y1==y2)
1901c     12 21 0A F2 | 	cmp	local02, local04 wz
19020     18 00 90 5D |  if_ne	jmp	#LR__1880
19024                 | '   fastline(x1,x2,y1,c)
19024     0F 13 02 F6 | 	mov	arg01, local01
19028     11 15 02 F6 | 	mov	arg02, local03
1902c     10 17 02 F6 | 	mov	arg03, local02
19030     13 19 02 F6 | 	mov	arg04, local05
19034     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
19038     F8 00 90 FD | 	jmp	#LR__1886
1903c                 | LR__1880
1903c                 | ' else  
1903c                 | '   x:=x1
1903c     0F 29 02 F6 | 	mov	local06, local01
19040                 | '   y:=y1
19040     10 2B 02 F6 | 	mov	local07, local02
19044                 | ' 
19044                 | '   if (x1<x2) 
19044     11 1F 52 F2 | 	cmps	local01, local03 wc
19048                 | '     xi:=1
19048     01 2C 06 C6 |  if_b	mov	local08, #1
1904c                 | '     dx:=x2-x1
1904c     11 2F 02 C6 |  if_b	mov	local09, local03
19050     0F 2F 82 C1 |  if_b	sub	local09, local01
19054                 | '   else
19054                 | '     xi:=-1
19054     01 2C 66 36 |  if_ae	neg	local08, #1
19058                 | '     dx:=x1-x2
19058     11 1F 82 31 |  if_ae	sub	local01, local03
1905c     0F 2F 02 36 |  if_ae	mov	local09, local01
19060                 | '   
19060                 | '   if (y1<y2) 
19060     12 21 52 F2 | 	cmps	local02, local04 wc
19064                 | '     yi:=1
19064     01 30 06 C6 |  if_b	mov	local10, #1
19068                 | '     dy:=y2-y1
19068     12 33 02 C6 |  if_b	mov	local11, local04
1906c     10 33 82 C1 |  if_b	sub	local11, local02
19070                 | '   else
19070                 | '     yi:=-1
19070     01 30 66 36 |  if_ae	neg	local10, #1
19074                 | '     dy:=y1-y2
19074     12 21 82 31 |  if_ae	sub	local02, local04
19078     10 33 02 36 |  if_ae	mov	local11, local02
1907c                 | ' 
1907c                 | '   putpixel(x,y,c)
1907c     13 17 02 F6 | 	mov	arg03, local05
19080     14 13 02 F6 | 	mov	arg01, local06
19084     15 15 02 F6 | 	mov	arg02, local07
19088     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1908c                 | ' 
1908c                 | '   if (dx>dy)
1908c     19 2F 5A F2 | 	cmps	local09, local11 wcz
19090     50 00 90 ED |  if_be	jmp	#LR__1882
19094                 | '     ai:=(dy-dx)*2
19094     19 35 02 F6 | 	mov	local12, local11
19098     17 35 82 F1 | 	sub	local12, local09
1909c     01 34 66 F0 | 	shl	local12, #1
190a0                 | '     bi:=dy*2
190a0     01 32 66 F0 | 	shl	local11, #1
190a4     19 37 02 F6 | 	mov	local13, local11
190a8                 | '     d:= bi-dx
190a8     1B 39 02 F6 | 	mov	local14, local13
190ac     17 39 82 F1 | 	sub	local14, local09
190b0                 | '     repeat while (x<>x2) 
190b0                 | LR__1881
190b0     11 29 0A F2 | 	cmp	local06, local03 wz
190b4     7C 00 90 AD |  if_e	jmp	#LR__1885
190b8                 | '       if (d>=0) 
190b8     00 38 56 F2 | 	cmps	local14, #0 wc
190bc                 | '         x+=xi
190bc     16 29 02 31 |  if_ae	add	local06, local08
190c0                 | '         y+=yi
190c0     18 2B 02 31 |  if_ae	add	local07, local10
190c4                 | '         d+=ai
190c4     1A 39 02 31 |  if_ae	add	local14, local12
190c8                 | '       else
190c8                 | '         d+=bi
190c8     1B 39 02 C1 |  if_b	add	local14, local13
190cc                 | '         x+=xi
190cc     16 29 02 C1 |  if_b	add	local06, local08
190d0                 | '       putpixel(x,y,c)
190d0     14 13 02 F6 | 	mov	arg01, local06
190d4     15 15 02 F6 | 	mov	arg02, local07
190d8     13 17 02 F6 | 	mov	arg03, local05
190dc     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
190e0     CC FF 9F FD | 	jmp	#LR__1881
190e4                 | LR__1882
190e4                 | '   else
190e4                 | '     ai:=(dx-dy)*2
190e4     17 35 02 F6 | 	mov	local12, local09
190e8     19 35 82 F1 | 	sub	local12, local11
190ec     01 34 66 F0 | 	shl	local12, #1
190f0                 | '     bi:=dx*2
190f0     01 2E 66 F0 | 	shl	local09, #1
190f4     17 37 02 F6 | 	mov	local13, local09
190f8                 | '     d:=bi-dy
190f8     1B 39 02 F6 | 	mov	local14, local13
190fc     19 39 82 F1 | 	sub	local14, local11
19100                 | '     repeat while (y<>y2)
19100                 | LR__1883
19100     12 2B 0A F2 | 	cmp	local07, local04 wz
19104     2C 00 90 AD |  if_e	jmp	#LR__1884
19108                 | '       if (d>=0)
19108     00 38 56 F2 | 	cmps	local14, #0 wc
1910c                 | '         x+=xi
1910c     16 29 02 31 |  if_ae	add	local06, local08
19110                 | '         y+=yi
19110     18 2B 02 31 |  if_ae	add	local07, local10
19114                 | '         d+=ai
19114     1A 39 02 31 |  if_ae	add	local14, local12
19118                 | '       else
19118                 | '         d+=bi
19118     1B 39 02 C1 |  if_b	add	local14, local13
1911c                 | '         y+=yi
1911c     18 2B 02 C1 |  if_b	add	local07, local10
19120                 | '       putpixel(x, y,c)
19120     14 13 02 F6 | 	mov	arg01, local06
19124     15 15 02 F6 | 	mov	arg02, local07
19128     13 17 02 F6 | 	mov	arg03, local05
1912c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
19130     CC FF 9F FD | 	jmp	#LR__1883
19134                 | LR__1884
19134                 | LR__1885
19134                 | LR__1886
19134     A7 F0 03 F6 | 	mov	ptra, fp
19138     B2 00 A0 FD | 	call	#popregs_
1913c                 | _hg010b_spin2_draw_ret
1913c     2D 00 64 FD | 	ret
19140                 | 
19140                 | '  
19140                 | ' pub fillpush(val) 
19140                 | _hg010b_spin2_fillpush
19140                 | ' fillstack[fillptr]:=val
19140     0B 00 00 FF 
19144     B6 E4 05 F1 | 	add	objptr, ##5814
19148     F2 00 02 FB | 	rdlong	_var01, objptr
1914c     02 00 66 F0 | 	shl	_var01, #2
19150     0A 00 00 FF 
19154     00 E4 85 F1 | 	sub	objptr, ##5120
19158     F2 00 02 F1 | 	add	_var01, objptr
1915c     00 13 62 FC | 	wrlong	arg01, _var01
19160                 | ' fillptr+=1   
19160     0A 00 00 FF 
19164     00 E4 05 F1 | 	add	objptr, ##5120
19168     F2 00 02 FB | 	rdlong	_var01, objptr
1916c     01 00 06 F1 | 	add	_var01, #1
19170     F2 00 62 FC | 	wrlong	_var01, objptr
19174     0B 00 00 FF 
19178     B6 E4 85 F1 | 	sub	objptr, ##5814
1917c                 | _hg010b_spin2_fillpush_ret
1917c     2D 00 64 FD | 	ret
19180                 | 
19180                 | ' 
19180                 | '     
19180                 | ' pub fillpop() : val
19180                 | _hg010b_spin2_fillpop
19180                 | ' 
19180                 | ' fillptr-=1
19180     0B 00 00 FF 
19184     B6 E4 05 F1 | 	add	objptr, ##5814
19188     F2 FA 01 FB | 	rdlong	result1, objptr
1918c     01 FA 85 F1 | 	sub	result1, #1
19190     F2 FA 61 FC | 	wrlong	result1, objptr
19194                 | ' if fillptr<0
19194     0B 00 00 FF 
19198     B6 E4 85 F1 | 	sub	objptr, ##5814
1919c     00 FA 55 F2 | 	cmps	result1, #0 wc
191a0                 | '   fillptr:=0
191a0     0B 00 00 CF 
191a4     B6 E4 05 C1 |  if_b	add	objptr, ##5814
191a8     F2 00 68 CC |  if_b	wrlong	#0, objptr
191ac     0B 00 00 CF 
191b0     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
191b4                 | '   val:=-12345
191b4     E7 FF 7F CF 
191b8     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
191bc     28 00 90 CD |  if_b	jmp	#LR__1890
191c0                 | ' else 
191c0                 | '   val:=fillstack[fillptr]
191c0     0B 00 00 FF 
191c4     B6 E4 05 F1 | 	add	objptr, ##5814
191c8     F2 00 02 FB | 	rdlong	_var01, objptr
191cc     02 00 66 F0 | 	shl	_var01, #2
191d0     0A 00 00 FF 
191d4     00 E4 85 F1 | 	sub	objptr, ##5120
191d8     F2 00 02 F1 | 	add	_var01, objptr
191dc     00 01 02 FB | 	rdlong	_var01, _var01
191e0     01 00 00 FF 
191e4     B6 E4 85 F1 | 	sub	objptr, ##694
191e8                 | LR__1890
191e8                 | ' return val
191e8     00 FB 01 F6 | 	mov	result1, _var01
191ec                 | _hg010b_spin2_fillpop_ret
191ec     2D 00 64 FD | 	ret
191f0                 | 
191f0                 | ' 
191f0                 | '       
191f0                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
191f0                 | _hg010b_spin2_fill
191f0     0B 4A 05 F6 | 	mov	COUNT_, #11
191f4     A8 00 A0 FD | 	call	#pushregs_
191f8                 | ' 
191f8                 | ' newcolor:=newcolor & 255
191f8     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
191fc                 | ' oldcolor:=oldcolor & 255
191fc     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
19200                 | ' 
19200                 | ' if (oldcolor == newcolor) 
19200     0F 21 0A F2 | 	cmp	local02, local01 wz
19204                 | '   return
19204     70 02 90 AD |  if_e	jmp	#LR__1909
19208                 | ' 
19208                 | ' fillptr:=0
19208     0B 00 00 FF 
1920c     B6 E4 05 F1 | 	add	objptr, ##5814
19210     F2 00 68 FC | 	wrlong	#0, objptr
19214                 | ' fillmax:=0
19214     04 E4 05 F1 | 	add	objptr, #4
19218     F2 00 68 FC | 	wrlong	#0, objptr
1921c     0B 00 00 FF 
19220     BA E4 85 F1 | 	sub	objptr, ##5818
19224                 | ' fillpush(x)
19224     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
19228                 | ' fillpush(y)
19228     0A 13 02 F6 | 	mov	arg01, arg02
1922c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
19230                 | ' y:=fillpop()
19230     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
19234     FD 22 02 F6 | 	mov	local03, result1
19238                 | ' x:=fillpop()
19238     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1923c     FD 24 02 F6 | 	mov	local04, result1
19240                 | ' 'pinhigh(38)
19240                 | ' repeat while (x>-1)       
19240                 | LR__1900
19240     00 24 56 F2 | 	cmps	local04, #0 wc
19244     30 02 90 CD |  if_b	jmp	#LR__1908
19248                 | '  ' pintoggle(39)
19248                 | '   x1 := x
19248     12 27 02 F6 | 	mov	local05, local04
1924c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1924c                 | LR__1901
1924c     00 28 06 F6 | 	mov	local06, #0
19250     00 2A 06 F6 | 	mov	local07, #0
19254     00 26 56 F2 | 	cmps	local05, #0 wc
19258     01 2A 66 36 |  if_ae	neg	local07, #1
1925c     00 2A 0E F2 | 	cmp	local07, #0 wz
19260     00 28 26 56 |  if_ne	not	local06, #0
19264     00 2C 06 F6 | 	mov	local08, #0
19268     00 2E 06 F6 | 	mov	local09, #0
1926c     11 15 02 F6 | 	mov	arg02, local03
19270     13 13 02 F6 | 	mov	arg01, local05
19274     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
19278     10 FB 09 F2 | 	cmp	result1, local02 wz
1927c     00 2E 26 A6 |  if_e	not	local09, #0
19280     00 2E 0E F2 | 	cmp	local09, #0 wz
19284     00 2C 26 56 |  if_ne	not	local08, #0
19288     16 29 CA F7 | 	test	local06, local08 wz
1928c                 | '     x1--
1928c     01 26 86 51 |  if_ne	sub	local05, #1
19290     B8 FF 9F 5D |  if_ne	jmp	#LR__1901
19294                 | '   x1++
19294     01 26 06 F1 | 	add	local05, #1
19298                 | '   spanabove := 0
19298     00 30 06 F6 | 	mov	local10, #0
1929c                 | '   spanbelow := 0
1929c     00 32 06 F6 | 	mov	local11, #0
192a0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
192a0                 | LR__1902
192a0     00 28 06 F6 | 	mov	local06, #0
192a4     02 00 00 FF 
192a8     00 26 56 F2 | 	cmps	local05, ##1024 wc
192ac     00 28 26 C6 |  if_b	not	local06, #0
192b0     00 2C 06 F6 | 	mov	local08, #0
192b4     00 2E 06 F6 | 	mov	local09, #0
192b8     11 15 02 F6 | 	mov	arg02, local03
192bc     13 13 02 F6 | 	mov	arg01, local05
192c0     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
192c4     10 FB 09 F2 | 	cmp	result1, local02 wz
192c8     00 2E 26 A6 |  if_e	not	local09, #0
192cc     00 2E 0E F2 | 	cmp	local09, #0 wz
192d0     00 2C 26 56 |  if_ne	not	local08, #0
192d4     16 29 CA F7 | 	test	local06, local08 wz
192d8     88 01 90 AD |  if_e	jmp	#LR__1907
192dc                 | '     putpixel2 (x1,y, newcolor & 255)
192dc     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
192e0     13 13 02 F6 | 	mov	arg01, local05
192e4     11 15 02 F6 | 	mov	arg02, local03
192e8     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
192ec                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
192ec     00 28 06 F6 | 	mov	local06, #0
192f0     00 2A 06 F6 | 	mov	local07, #0
192f4     00 30 0E F2 | 	cmp	local10, #0 wz
192f8     01 22 56 A2 |  if_e	cmps	local03, #1 wc
192fc     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
19300     00 2A 0E F2 | 	cmp	local07, #0 wz
19304     00 28 26 56 |  if_ne	not	local06, #0
19308     00 2C 06 F6 | 	mov	local08, #0
1930c     00 2E 06 F6 | 	mov	local09, #0
19310     11 15 02 F6 | 	mov	arg02, local03
19314     01 14 86 F1 | 	sub	arg02, #1
19318     13 13 02 F6 | 	mov	arg01, local05
1931c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
19320     10 FB 09 F2 | 	cmp	result1, local02 wz
19324     00 2E 26 A6 |  if_e	not	local09, #0
19328     00 2E 0E F2 | 	cmp	local09, #0 wz
1932c     00 2C 26 56 |  if_ne	not	local08, #0
19330     16 29 CA F7 | 	test	local06, local08 wz
19334     1C 00 90 AD |  if_e	jmp	#LR__1903
19338                 | '       fillpush(x1)
19338     13 13 02 F6 | 	mov	arg01, local05
1933c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
19340                 | '       fillpush(y-1)
19340     11 13 02 F6 | 	mov	arg01, local03
19344     01 12 86 F1 | 	sub	arg01, #1
19348     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1934c                 | '       spanabove := 1 
1934c     01 30 06 F6 | 	mov	local10, #1
19350     4C 00 90 FD | 	jmp	#LR__1904
19354                 | LR__1903
19354                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
19354     00 28 06 F6 | 	mov	local06, #0
19358     00 2A 06 F6 | 	mov	local07, #0
1935c     00 30 0E F2 | 	cmp	local10, #0 wz
19360     01 22 56 52 |  if_ne	cmps	local03, #1 wc
19364     01 2A 66 16 |  if_a	neg	local07, #1
19368     00 2A 0E F2 | 	cmp	local07, #0 wz
1936c     00 28 26 56 |  if_ne	not	local06, #0
19370     00 2C 06 F6 | 	mov	local08, #0
19374     00 2E 06 F6 | 	mov	local09, #0
19378     11 15 02 F6 | 	mov	arg02, local03
1937c     01 14 86 F1 | 	sub	arg02, #1
19380     13 13 02 F6 | 	mov	arg01, local05
19384     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
19388     10 FB 09 F2 | 	cmp	result1, local02 wz
1938c     00 2E 26 56 |  if_ne	not	local09, #0
19390     00 2E 0E F2 | 	cmp	local09, #0 wz
19394     00 2C 26 56 |  if_ne	not	local08, #0
19398     16 29 CA F7 | 	test	local06, local08 wz
1939c                 | '       spanabove := 0 
1939c     00 30 06 56 |  if_ne	mov	local10, #0
193a0                 | LR__1904
193a0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
193a0     00 28 06 F6 | 	mov	local06, #0
193a4     00 2A 06 F6 | 	mov	local07, #0
193a8     00 32 0E F2 | 	cmp	local11, #0 wz
193ac     01 00 00 AF 
193b0     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
193b4     01 2A 66 86 |  if_c_and_z	neg	local07, #1
193b8     00 2A 0E F2 | 	cmp	local07, #0 wz
193bc     00 28 26 56 |  if_ne	not	local06, #0
193c0     00 2C 06 F6 | 	mov	local08, #0
193c4     00 2E 06 F6 | 	mov	local09, #0
193c8     11 15 02 F6 | 	mov	arg02, local03
193cc     01 14 06 F1 | 	add	arg02, #1
193d0     13 13 02 F6 | 	mov	arg01, local05
193d4     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
193d8     10 FB 09 F2 | 	cmp	result1, local02 wz
193dc     00 2E 26 A6 |  if_e	not	local09, #0
193e0     00 2E 0E F2 | 	cmp	local09, #0 wz
193e4     00 2C 26 56 |  if_ne	not	local08, #0
193e8     16 29 CA F7 | 	test	local06, local08 wz
193ec     1C 00 90 AD |  if_e	jmp	#LR__1905
193f0                 | '       fillpush(x1)
193f0     13 13 02 F6 | 	mov	arg01, local05
193f4     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
193f8                 | '       fillpush(y + 1)
193f8     11 13 02 F6 | 	mov	arg01, local03
193fc     01 12 06 F1 | 	add	arg01, #1
19400     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
19404                 | '       spanBelow := 1
19404     01 32 06 F6 | 	mov	local11, #1
19408     50 00 90 FD | 	jmp	#LR__1906
1940c                 | LR__1905
1940c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1940c     00 28 06 F6 | 	mov	local06, #0
19410     00 2A 06 F6 | 	mov	local07, #0
19414     00 32 0E F2 | 	cmp	local11, #0 wz
19418     01 00 00 5F 
1941c     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
19420     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
19424     00 2A 0E F2 | 	cmp	local07, #0 wz
19428     00 28 26 56 |  if_ne	not	local06, #0
1942c     00 2C 06 F6 | 	mov	local08, #0
19430     00 2E 06 F6 | 	mov	local09, #0
19434     11 15 02 F6 | 	mov	arg02, local03
19438     01 14 06 F1 | 	add	arg02, #1
1943c     13 13 02 F6 | 	mov	arg01, local05
19440     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
19444     10 FB 09 F2 | 	cmp	result1, local02 wz
19448     00 2E 26 56 |  if_ne	not	local09, #0
1944c     00 2E 0E F2 | 	cmp	local09, #0 wz
19450     00 2C 26 56 |  if_ne	not	local08, #0
19454     16 29 CA F7 | 	test	local06, local08 wz
19458                 | '       spanbelow := 0
19458     00 32 06 56 |  if_ne	mov	local11, #0
1945c                 | LR__1906
1945c                 | '     x1++
1945c     01 26 06 F1 | 	add	local05, #1
19460     3C FE 9F FD | 	jmp	#LR__1902
19464                 | LR__1907
19464                 | '   y:=fillpop()
19464     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
19468     FD 22 02 F6 | 	mov	local03, result1
1946c                 | '   x:=fillpop()
1946c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
19470     FD 24 02 F6 | 	mov	local04, result1
19474     C8 FD 9F FD | 	jmp	#LR__1900
19478                 | LR__1908
19478                 | LR__1909
19478     A7 F0 03 F6 | 	mov	ptra, fp
1947c     B2 00 A0 FD | 	call	#popregs_
19480                 | _hg010b_spin2_fill_ret
19480     2D 00 64 FD | 	ret
19484                 | 
19484                 | ' 'pinlow(38)    
19484                 | ' 
19484                 | ' '-- A filled circle -----------------------------------------------------
19484                 | ' 
19484                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
19484                 | _hg010b_spin2_fcircle
19484     08 4A 05 F6 | 	mov	COUNT_, #8
19488     A8 00 A0 FD | 	call	#pushregs_
1948c     0B 1F 02 F6 | 	mov	local01, arg03
19490     FF FF 7F FF 
19494     FE 1F 06 FD | 	qmul	local01, ##-2
19498     09 21 02 F6 | 	mov	local02, arg01
1949c     0A 23 02 F6 | 	mov	local03, arg02
194a0     0C 25 02 F6 | 	mov	local04, arg04
194a4                 | ' 
194a4                 | ' d:=5-4*r
194a4     0F 19 02 F6 | 	mov	arg04, local01
194a8     02 18 66 F0 | 	shl	arg04, #2
194ac     05 26 06 F6 | 	mov	local05, #5
194b0     0C 27 82 F1 | 	sub	local05, arg04
194b4                 | ' x:=0
194b4     00 28 06 F6 | 	mov	local06, #0
194b8                 | ' y:=r
194b8                 | ' da:=(-2*r+5)*4
194b8                 | ' db:=3*4
194b8     0C 2A 06 F6 | 	mov	local07, #12
194bc                 | ' repeat while (x<=y) 
194bc     18 2C 62 FD | 	getqx	local08
194c0     05 2C 06 F1 | 	add	local08, #5
194c4     02 2C 66 F0 | 	shl	local08, #2
194c8                 | LR__1910
194c8     0F 29 5A F2 | 	cmps	local06, local01 wcz
194cc     B4 00 90 1D |  if_a	jmp	#LR__1912
194d0                 | '   fastline(x0-x,x0+x,y0-y,c)
194d0     10 13 02 F6 | 	mov	arg01, local02
194d4     14 13 82 F1 | 	sub	arg01, local06
194d8     10 15 02 F6 | 	mov	arg02, local02
194dc     14 15 02 F1 | 	add	arg02, local06
194e0     11 17 02 F6 | 	mov	arg03, local03
194e4     0F 17 82 F1 | 	sub	arg03, local01
194e8     12 19 02 F6 | 	mov	arg04, local04
194ec     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
194f0                 | '   fastline(x0-x,x0+x,y0+y,c)
194f0     10 13 02 F6 | 	mov	arg01, local02
194f4     14 13 82 F1 | 	sub	arg01, local06
194f8     10 15 02 F6 | 	mov	arg02, local02
194fc     14 15 02 F1 | 	add	arg02, local06
19500     11 17 02 F6 | 	mov	arg03, local03
19504     0F 17 02 F1 | 	add	arg03, local01
19508     12 19 02 F6 | 	mov	arg04, local04
1950c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
19510                 | '   fastline(x0-y,x0+y,y0-x,c)
19510     10 13 02 F6 | 	mov	arg01, local02
19514     0F 13 82 F1 | 	sub	arg01, local01
19518     10 15 02 F6 | 	mov	arg02, local02
1951c     0F 15 02 F1 | 	add	arg02, local01
19520     11 17 02 F6 | 	mov	arg03, local03
19524     14 17 82 F1 | 	sub	arg03, local06
19528     12 19 02 F6 | 	mov	arg04, local04
1952c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
19530                 | '   fastline(x0-y,x0+y,y0+x,c)
19530     10 13 02 F6 | 	mov	arg01, local02
19534     0F 13 82 F1 | 	sub	arg01, local01
19538     10 15 02 F6 | 	mov	arg02, local02
1953c     0F 15 02 F1 | 	add	arg02, local01
19540     11 17 02 F6 | 	mov	arg03, local03
19544     14 17 02 F1 | 	add	arg03, local06
19548     12 19 02 F6 | 	mov	arg04, local04
1954c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
19550                 | '   if d>0 
19550     01 26 56 F2 | 	cmps	local05, #1 wc
19554     18 00 90 CD |  if_b	jmp	#LR__1911
19558                 | '     d+=da
19558     16 27 02 F1 | 	add	local05, local08
1955c                 | '     y-=1
1955c     01 1E 86 F1 | 	sub	local01, #1
19560                 | '     x+=1
19560     01 28 06 F1 | 	add	local06, #1
19564                 | '     da+=4*4
19564     10 2C 06 F1 | 	add	local08, #16
19568                 | '     db+=2*4
19568     08 2A 06 F1 | 	add	local07, #8
1956c     58 FF 9F FD | 	jmp	#LR__1910
19570                 | LR__1911
19570                 | '   else
19570                 | '     d+=db
19570     15 27 02 F1 | 	add	local05, local07
19574                 | '     x+=1
19574     01 28 06 F1 | 	add	local06, #1
19578                 | '     da+=2*4
19578     08 2C 06 F1 | 	add	local08, #8
1957c                 | '     db+=2*4
1957c     08 2A 06 F1 | 	add	local07, #8
19580     44 FF 9F FD | 	jmp	#LR__1910
19584                 | LR__1912
19584     A7 F0 03 F6 | 	mov	ptra, fp
19588     B2 00 A0 FD | 	call	#popregs_
1958c                 | _hg010b_spin2_fcircle_ret
1958c     2D 00 64 FD | 	ret
19590                 | 
19590                 | '  
19590                 | ' '-- A circle ------------------------------------------------------------ 
19590                 | '  
19590                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
19590                 | _hg010b_spin2_circle
19590     08 4A 05 F6 | 	mov	COUNT_, #8
19594     A8 00 A0 FD | 	call	#pushregs_
19598     0B 1F 02 F6 | 	mov	local01, arg03
1959c     FF FF 7F FF 
195a0     FE 1F 06 FD | 	qmul	local01, ##-2
195a4     09 21 02 F6 | 	mov	local02, arg01
195a8     0A 23 02 F6 | 	mov	local03, arg02
195ac     0C 25 02 F6 | 	mov	local04, arg04
195b0                 | ' 
195b0                 | '  
195b0                 | ' d:=5-4*r
195b0     0F 19 02 F6 | 	mov	arg04, local01
195b4     02 18 66 F0 | 	shl	arg04, #2
195b8     05 26 06 F6 | 	mov	local05, #5
195bc     0C 27 82 F1 | 	sub	local05, arg04
195c0                 | ' x:=0
195c0     00 28 06 F6 | 	mov	local06, #0
195c4                 | ' y:=r
195c4                 | ' da:=(-2*r+5)*4
195c4                 | ' db:=3*4
195c4     0C 2A 06 F6 | 	mov	local07, #12
195c8                 | ' repeat while (x<=y) 
195c8     18 2C 62 FD | 	getqx	local08
195cc     05 2C 06 F1 | 	add	local08, #5
195d0     02 2C 66 F0 | 	shl	local08, #2
195d4                 | LR__1920
195d4     0F 29 5A F2 | 	cmps	local06, local01 wcz
195d8     F4 00 90 1D |  if_a	jmp	#LR__1922
195dc                 | '   putpixel(x0-x,y0-y,c)
195dc     10 13 02 F6 | 	mov	arg01, local02
195e0     14 13 82 F1 | 	sub	arg01, local06
195e4     11 15 02 F6 | 	mov	arg02, local03
195e8     0F 15 82 F1 | 	sub	arg02, local01
195ec     12 17 02 F6 | 	mov	arg03, local04
195f0     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
195f4                 | '   putpixel(x0-x,y0+y,c)
195f4     10 13 02 F6 | 	mov	arg01, local02
195f8     14 13 82 F1 | 	sub	arg01, local06
195fc     11 15 02 F6 | 	mov	arg02, local03
19600     0F 15 02 F1 | 	add	arg02, local01
19604     12 17 02 F6 | 	mov	arg03, local04
19608     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1960c                 | '   putpixel(x0+x,y0-y,c)
1960c     10 13 02 F6 | 	mov	arg01, local02
19610     14 13 02 F1 | 	add	arg01, local06
19614     11 15 02 F6 | 	mov	arg02, local03
19618     0F 15 82 F1 | 	sub	arg02, local01
1961c     12 17 02 F6 | 	mov	arg03, local04
19620     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
19624                 | '   putpixel(x0+x,y0+y,c)
19624     10 13 02 F6 | 	mov	arg01, local02
19628     14 13 02 F1 | 	add	arg01, local06
1962c     11 15 02 F6 | 	mov	arg02, local03
19630     0F 15 02 F1 | 	add	arg02, local01
19634     12 17 02 F6 | 	mov	arg03, local04
19638     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1963c                 | '   putpixel(x0-y,y0-x,c)
1963c     10 13 02 F6 | 	mov	arg01, local02
19640     0F 13 82 F1 | 	sub	arg01, local01
19644     11 15 02 F6 | 	mov	arg02, local03
19648     14 15 82 F1 | 	sub	arg02, local06
1964c     12 17 02 F6 | 	mov	arg03, local04
19650     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
19654                 | '   putpixel(x0-y,y0+x,c)
19654     10 13 02 F6 | 	mov	arg01, local02
19658     0F 13 82 F1 | 	sub	arg01, local01
1965c     11 15 02 F6 | 	mov	arg02, local03
19660     14 15 02 F1 | 	add	arg02, local06
19664     12 17 02 F6 | 	mov	arg03, local04
19668     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1966c                 | '   putpixel(x0+y,y0-x,c)
1966c     10 13 02 F6 | 	mov	arg01, local02
19670     0F 13 02 F1 | 	add	arg01, local01
19674     11 15 02 F6 | 	mov	arg02, local03
19678     14 15 82 F1 | 	sub	arg02, local06
1967c     12 17 02 F6 | 	mov	arg03, local04
19680     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
19684                 | '   putpixel(x0+y,y0+x,c)
19684     10 13 02 F6 | 	mov	arg01, local02
19688     0F 13 02 F1 | 	add	arg01, local01
1968c     11 15 02 F6 | 	mov	arg02, local03
19690     14 15 02 F1 | 	add	arg02, local06
19694     12 17 02 F6 | 	mov	arg03, local04
19698     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1969c                 | '   if d>0 
1969c     01 26 56 F2 | 	cmps	local05, #1 wc
196a0     18 00 90 CD |  if_b	jmp	#LR__1921
196a4                 | '     d+=da
196a4     16 27 02 F1 | 	add	local05, local08
196a8                 | '     y-=1
196a8     01 1E 86 F1 | 	sub	local01, #1
196ac                 | '     x+=1
196ac     01 28 06 F1 | 	add	local06, #1
196b0                 | '     da+=4*4
196b0     10 2C 06 F1 | 	add	local08, #16
196b4                 | '     db+=2*4
196b4     08 2A 06 F1 | 	add	local07, #8
196b8     18 FF 9F FD | 	jmp	#LR__1920
196bc                 | LR__1921
196bc                 | '   else
196bc                 | '     d+=db
196bc     15 27 02 F1 | 	add	local05, local07
196c0                 | '     x+=1
196c0     01 28 06 F1 | 	add	local06, #1
196c4                 | '     da+=2*4
196c4     08 2C 06 F1 | 	add	local08, #8
196c8                 | '     db+=2*4
196c8     08 2A 06 F1 | 	add	local07, #8
196cc     04 FF 9F FD | 	jmp	#LR__1920
196d0                 | LR__1922
196d0     A7 F0 03 F6 | 	mov	ptra, fp
196d4     B2 00 A0 FD | 	call	#popregs_
196d8                 | _hg010b_spin2_circle_ret
196d8     2D 00 64 FD | 	ret
196dc                 | 
196dc                 | '     
196dc                 | ' '-- A frame (an empty rectangle) ---------------------------------------
196dc                 | ' 
196dc                 | ' pub frame(x1,y1,x2,y2,c)
196dc                 | _hg010b_spin2_frame
196dc     05 4A 05 F6 | 	mov	COUNT_, #5
196e0     A8 00 A0 FD | 	call	#pushregs_
196e4     09 1F 02 F6 | 	mov	local01, arg01
196e8     0A 21 02 F6 | 	mov	local02, arg02
196ec     0B 23 02 F6 | 	mov	local03, arg03
196f0     0C 25 02 F6 | 	mov	local04, arg04
196f4     0D 27 02 F6 | 	mov	local05, arg05
196f8                 | ' 
196f8                 | ' fastline(x1,x2,y1,c)
196f8     0F 13 02 F6 | 	mov	arg01, local01
196fc     11 15 02 F6 | 	mov	arg02, local03
19700     10 17 02 F6 | 	mov	arg03, local02
19704     13 19 02 F6 | 	mov	arg04, local05
19708     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1970c                 | ' fastline(x1,x2,y2,c)
1970c     0F 13 02 F6 | 	mov	arg01, local01
19710     11 15 02 F6 | 	mov	arg02, local03
19714     12 17 02 F6 | 	mov	arg03, local04
19718     13 19 02 F6 | 	mov	arg04, local05
1971c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
19720                 | ' line(x1,y1,x1,y2,c)
19720     0F 13 02 F6 | 	mov	arg01, local01
19724     10 15 02 F6 | 	mov	arg02, local02
19728     0F 17 02 F6 | 	mov	arg03, local01
1972c     12 19 02 F6 | 	mov	arg04, local04
19730     13 1B 02 F6 | 	mov	arg05, local05
19734                 | ' draw(x1,y1,x2,y2,c)
19734     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
19738                 | ' line(x2,y1,x2,y2,c)
19738     11 13 02 F6 | 	mov	arg01, local03
1973c     10 15 02 F6 | 	mov	arg02, local02
19740     11 17 02 F6 | 	mov	arg03, local03
19744     12 19 02 F6 | 	mov	arg04, local04
19748     13 1B 02 F6 | 	mov	arg05, local05
1974c                 | ' draw(x1,y1,x2,y2,c)
1974c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
19750     A7 F0 03 F6 | 	mov	ptra, fp
19754     B2 00 A0 FD | 	call	#popregs_
19758                 | _hg010b_spin2_frame_ret
19758     2D 00 64 FD | 	ret
1975c                 | 
1975c                 | ' 
1975c                 | ' '-- A box (a filled rectangle) ----------------------------------------
1975c                 | ' 
1975c                 | ' pub box(x1,y1,x2,y2,c) |yy
1975c                 | _hg010b_spin2_box
1975c     06 4A 05 F6 | 	mov	COUNT_, #6
19760     A8 00 A0 FD | 	call	#pushregs_
19764     09 1F 02 F6 | 	mov	local01, arg01
19768     0A 21 02 F6 | 	mov	local02, arg02
1976c     0B 23 02 F6 | 	mov	local03, arg03
19770     0C 25 02 F6 | 	mov	local04, arg04
19774     0D 27 02 F6 | 	mov	local05, arg05
19778                 | ' 
19778                 | ' repeat yy from y1 to y2
19778     10 25 52 F2 | 	cmps	local04, local02 wc
1977c     01 28 86 F6 | 	negc	local06, #1
19780     14 25 02 F1 | 	add	local04, local06
19784                 | LR__1930
19784                 | '   fastline(x1,x2,yy,c)
19784     0F 13 02 F6 | 	mov	arg01, local01
19788     11 15 02 F6 | 	mov	arg02, local03
1978c     13 19 02 F6 | 	mov	arg04, local05
19790     10 17 02 F6 | 	mov	arg03, local02
19794     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
19798     14 21 02 F1 | 	add	local02, local06
1979c     12 21 0A F2 | 	cmp	local02, local04 wz
197a0     E0 FF 9F 5D |  if_ne	jmp	#LR__1930
197a4     A7 F0 03 F6 | 	mov	ptra, fp
197a8     B2 00 A0 FD | 	call	#popregs_
197ac                 | _hg010b_spin2_box_ret
197ac     2D 00 64 FD | 	ret
197b0                 | 
197b0                 | '       
197b0                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
197b0                 | _hg010b_spin2_putcharxycgf
197b0                 | ' 
197b0                 | '  
197b0                 | ' repeat yy from 0 to 15
197b0     00 00 06 F6 | 	mov	_var01, #0
197b4     97 8C 48 FB | 	callpa	#(@LR__1942-@LR__1940)>>2,fcache_load_ptr_
197b8                 | LR__1940
197b8                 | ' 
197b8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
197b8     91 E4 05 F1 | 	add	objptr, #145
197bc     F2 02 02 FB | 	rdlong	_var02, objptr
197c0     0A 02 66 F0 | 	shl	_var02, #10
197c4     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
197c8     01 05 02 F1 | 	add	_var03, _var02
197cc     0B 03 02 F6 | 	mov	_var02, arg03
197d0     04 02 66 F0 | 	shl	_var02, #4
197d4     01 05 02 F1 | 	add	_var03, _var02
197d8     00 05 02 F1 | 	add	_var03, _var01
197dc     02 05 C2 FA | 	rdbyte	_var03, _var03
197e0                 | '   asm
197e0     00 04 0E F4 | 	testb	_var03, #0 wz
197e4     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
197e8     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
197ec     01 04 0E F4 | 	testb	_var03, #1 wz
197f0     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
197f4     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
197f8     02 04 0E F4 | 	testb	_var03, #2 wz
197fc     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
19800     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
19804     03 04 0E F4 | 	testb	_var03, #3 wz
19808     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1980c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
19810     04 04 0E F4 | 	testb	_var03, #4 wz
19814     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
19818     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1981c     05 04 0E F4 | 	testb	_var03, #5 wz
19820     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
19824     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
19828     06 04 0E F4 | 	testb	_var03, #6 wz
1982c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
19830     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
19834     07 04 0E F4 | 	testb	_var03, #7 wz
19838     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1983c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
19840                 | '   
19840                 | '   ccc[0]:=c1
19840     99 E5 05 F1 | 	add	objptr, #409
19844     F2 06 62 FC | 	wrlong	_var04, objptr
19848                 | '   ccc[1]:=c2 
19848     04 E4 05 F1 | 	add	objptr, #4
1984c     F2 08 62 FC | 	wrlong	_var05, objptr
19850                 | '   long[mailbox0][2]:=8
19850     49 E4 85 F1 | 	sub	objptr, #73
19854     F2 04 02 FB | 	rdlong	_var03, objptr
19858     08 04 06 F1 | 	add	_var03, #8
1985c     02 11 68 FC | 	wrlong	#8, _var03
19860                 | '   long[mailbox0][1]:=@ccc
19860     45 E4 05 F1 | 	add	objptr, #69
19864     F2 04 02 F6 | 	mov	_var03, objptr
19868     45 E4 85 F1 | 	sub	objptr, #69
1986c     F2 02 02 FB | 	rdlong	_var02, objptr
19870     04 02 06 F1 | 	add	_var02, #4
19874     01 05 62 FC | 	wrlong	_var03, _var02
19878                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
19878     0C E5 85 F1 | 	sub	objptr, #268
1987c     F2 04 02 FB | 	rdlong	_var03, objptr
19880     0A 03 02 F6 | 	mov	_var02, arg02
19884     00 03 02 F1 | 	add	_var02, _var01
19888     0A 02 66 F0 | 	shl	_var02, #10
1988c     09 0B 02 F6 | 	mov	_var06, arg01
19890     02 0A 66 F0 | 	shl	_var06, #2
19894     05 03 02 F1 | 	add	_var02, _var06
19898     01 05 02 F1 | 	add	_var03, _var02
1989c     00 00 78 FF 
198a0     00 04 06 F1 | 	add	_var03, ##-268435456
198a4     0C E5 05 F1 | 	add	objptr, #268
198a8     F2 0A 02 FB | 	rdlong	_var06, objptr
198ac     05 05 62 FC | 	wrlong	_var03, _var06
198b0                 | '   repeat
198b0                 | LR__1941
198b0     F2 04 02 FB | 	rdlong	_var03, objptr
198b4     02 03 02 FB | 	rdlong	_var02, _var03
198b8     00 02 56 F2 | 	cmps	_var02, #0 wc
198bc     F0 FF 9F CD |  if_b	jmp	#LR__1941
198c0     E5 E5 85 F1 | 	sub	objptr, #485
198c4     01 00 06 F1 | 	add	_var01, #1
198c8     10 00 56 F2 | 	cmps	_var01, #16 wc
198cc     E8 FE 9F CD |  if_b	jmp	#LR__1940
198d0                 | LR__1942
198d0                 | _hg010b_spin2_putcharxycgf_ret
198d0     2D 00 64 FD | 	ret
198d4                 | 
198d4                 | ' 
198d4                 | ' 
198d4                 | ' '**********************************************************************r***
198d4                 | ' '                                                                        *
198d4                 | ' ' Font related functions                                                 *
198d4                 | ' '                                                                        *
198d4                 | ' '*************************************************************************
198d4                 | ' 
198d4                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
198d4                 | ' 
198d4                 | ' pub setfontfamily(afontnum)
198d4                 | _hg010b_spin2_setfontfamily
198d4                 | ' 
198d4                 | ' font_family:=afontnum
198d4     91 E4 05 F1 | 	add	objptr, #145
198d8     F2 12 62 FC | 	wrlong	arg01, objptr
198dc     91 E4 85 F1 | 	sub	objptr, #145
198e0                 | ' 'if afontnum==8
198e0                 | ' '  font_ptr:=@amiga_font
198e0                 | ' 
198e0                 | ' if afontnum==4
198e0     04 12 0E F2 | 	cmp	arg01, #4 wz
198e4                 | '   font_ptr:=@st_font
198e4     08 00 00 AF 
198e8     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
198ec     04 E4 05 A1 |  if_e	add	objptr, #4
198f0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
198f4     04 E4 85 A1 |  if_e	sub	objptr, #4
198f8     08 00 00 AF 
198fc     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
19900                 | ' if afontnum==0
19900     00 12 0E F2 | 	cmp	arg01, #0 wz
19904                 | '   font_ptr:=@vga_font
19904     04 E4 05 A1 |  if_e	add	objptr, #4
19908     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1990c     04 E4 85 A1 |  if_e	sub	objptr, #4
19910                 | _hg010b_spin2_setfontfamily_ret
19910     2D 00 64 FD | 	ret
19914                 | 
19914                 | ' 
19914                 | ' '*************************************************************************
19914                 | ' '                                                                        *
19914                 | ' '  Cursor functions                                                      *
19914                 | ' '                                                                        *
19914                 | ' '*************************************************************************
19914                 | ' 
19914                 | ' 
19914                 | ' pub setcursorpos(x,y)
19914                 | _hg010b_spin2_setcursorpos
19914                 | ' 
19914                 | ' ''---------- Set the (x,y) position of cursor
19914                 | ' 
19914                 | ' cursor_x:=x
19914     38 E4 05 F1 | 	add	objptr, #56
19918     F2 12 52 FC | 	wrword	arg01, objptr
1991c                 | ' cursor_y:=y
1991c     02 E4 05 F1 | 	add	objptr, #2
19920     F2 14 42 FC | 	wrbyte	arg02, objptr
19924                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
19924     02 E4 85 F1 | 	sub	objptr, #2
19928     F2 14 E2 FA | 	rdword	arg02, objptr
1992c     02 14 66 F0 | 	shl	arg02, #2
19930     02 E4 05 F1 | 	add	objptr, #2
19934     F2 16 C2 FA | 	rdbyte	arg03, objptr
19938     3A E4 85 F1 | 	sub	objptr, #58
1993c     04 16 66 F0 | 	shl	arg03, #4
19940     11 12 06 F6 | 	mov	arg01, #17
19944     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
19948                 | _hg010b_spin2_setcursorpos_ret
19948     2D 00 64 FD | 	ret
1994c                 | 
1994c                 | ' 
1994c                 | ' '*************************************************************************
1994c                 | ' '                                                                        *
1994c                 | ' '  VBlank functions                                                      *
1994c                 | ' '                                                                        *
1994c                 | ' '*************************************************************************
1994c                 | ' 
1994c                 | ' pub waitvbl(amount) | i
1994c                 | _hg010b_spin2_waitvbl
1994c     03 4A 05 F6 | 	mov	COUNT_, #3
19950     A8 00 A0 FD | 	call	#pushregs_
19954     09 1F 02 F6 | 	mov	local01, arg01
19958                 | ' 
19958                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
19958                 | ' 
19958                 | ' repeat i from 1 to amount
19958     01 20 06 F6 | 	mov	local02, #1
1995c     01 1E 56 F2 | 	cmps	local01, #1 wc
19960     01 22 86 F6 | 	negc	local03, #1
19964     11 1F 02 F1 | 	add	local01, local03
19968                 | LR__1950
19968                 | '   repeat until vblank==0
19968                 | LR__1951
19968     45 E4 05 F1 | 	add	objptr, #69
1996c     F2 12 0A FB | 	rdlong	arg01, objptr wz
19970     45 E4 85 F1 | 	sub	objptr, #69
19974     0C 00 90 AD |  if_e	jmp	#LR__1952
19978                 | '     waitus(100)
19978     64 12 06 F6 | 	mov	arg01, #100
1997c     F8 16 B0 FD | 	call	#__system___waitus
19980     E4 FF 9F FD | 	jmp	#LR__1951
19984                 | LR__1952
19984                 | '   repeat until vblank==1
19984                 | LR__1953
19984     45 E4 05 F1 | 	add	objptr, #69
19988     F2 12 02 FB | 	rdlong	arg01, objptr
1998c     45 E4 85 F1 | 	sub	objptr, #69
19990     01 12 0E F2 | 	cmp	arg01, #1 wz
19994     0C 00 90 AD |  if_e	jmp	#LR__1954
19998                 | '     waitus(100)
19998     64 12 06 F6 | 	mov	arg01, #100
1999c     D8 16 B0 FD | 	call	#__system___waitus
199a0     E0 FF 9F FD | 	jmp	#LR__1953
199a4                 | LR__1954
199a4     11 21 02 F1 | 	add	local02, local03
199a8     0F 21 0A F2 | 	cmp	local02, local01 wz
199ac     B8 FF 9F 5D |  if_ne	jmp	#LR__1950
199b0     A7 F0 03 F6 | 	mov	ptra, fp
199b4     B2 00 A0 FD | 	call	#popregs_
199b8                 | _hg010b_spin2_waitvbl_ret
199b8     2D 00 64 FD | 	ret
199bc                 | 
199bc                 | ' 
199bc                 | ' 
199bc                 | ' pub cls(fc,bc)   :c,i
199bc                 | _hg010b_spin2_cls
199bc     02 4A 05 F6 | 	mov	COUNT_, #2
199c0     A8 00 A0 FD | 	call	#pushregs_
199c4     09 1F 02 F6 | 	mov	local01, arg01
199c8     0A 21 02 F6 | 	mov	local02, arg02
199cc                 | ' 
199cc                 | ' c:=bc
199cc                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
199cc     D9 E4 05 F1 | 	add	objptr, #217
199d0     F2 12 02 FB | 	rdlong	arg01, objptr
199d4     A5 E4 85 F1 | 	sub	objptr, #165
199d8     F2 16 02 FB | 	rdlong	arg03, objptr
199dc     02 16 66 F0 | 	shl	arg03, #2
199e0     10 15 02 F6 | 	mov	arg02, local02
199e4     00 18 06 F6 | 	mov	arg04, #0
199e8     01 1A 06 F6 | 	mov	arg05, #1
199ec     0B 00 00 FF 
199f0     8C E4 05 F1 | 	add	objptr, ##5772
199f4     F0 08 B0 FD | 	call	#_psram_spin2_fill
199f8                 | ' setwritecolors(fc,bc)
199f8                 | ' 
199f8                 | ' write_color:=ff
199f8     0B 00 00 FF 
199fc     83 E4 85 F1 | 	sub	objptr, ##5763
19a00     F2 1E 62 FC | 	wrlong	local01, objptr
19a04                 | ' write_background:=bb
19a04     04 E4 05 F1 | 	add	objptr, #4
19a08     F2 20 62 FC | 	wrlong	local02, objptr
19a0c                 | ' cursor_x:=0
19a0c     09 E4 85 F1 | 	sub	objptr, #9
19a10     F2 00 58 FC | 	wrword	#0, objptr
19a14                 | ' cursor_y:=0
19a14     02 E4 05 F1 | 	add	objptr, #2
19a18     F2 00 48 FC | 	wrbyte	#0, objptr
19a1c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
19a1c     02 E4 85 F1 | 	sub	objptr, #2
19a20     F2 14 E2 FA | 	rdword	arg02, objptr
19a24     02 14 66 F0 | 	shl	arg02, #2
19a28     02 E4 05 F1 | 	add	objptr, #2
19a2c     F2 16 C2 FA | 	rdbyte	arg03, objptr
19a30     3A E4 85 F1 | 	sub	objptr, #58
19a34     04 16 66 F0 | 	shl	arg03, #4
19a38     11 12 06 F6 | 	mov	arg01, #17
19a3c     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
19a40                 | ' setcursorcolor(fc)
19a40     0F 13 02 F6 | 	mov	arg01, local01
19a44     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
19a48     10 FB 01 F6 | 	mov	result1, local02
19a4c     00 FC 05 F6 | 	mov	result2, #0
19a50     A7 F0 03 F6 | 	mov	ptra, fp
19a54     B2 00 A0 FD | 	call	#popregs_
19a58                 | _hg010b_spin2_cls_ret
19a58     2D 00 64 FD | 	ret
19a5c                 | 
19a5c                 | ' 
19a5c                 | ' ''---------- Output a char at the cursor position, move the cursor 
19a5c                 | ' 
19a5c                 | ' pub putchar(achar) | c,x,y,l,newcpl
19a5c                 | _hg010b_spin2_putchar
19a5c     01 4A 05 F6 | 	mov	COUNT_, #1
19a60     A8 00 A0 FD | 	call	#pushregs_
19a64     09 1F 02 F6 | 	mov	local01, arg01
19a68                 | ' 
19a68                 | ' if achar==10
19a68     0A 1E 0E F2 | 	cmp	local01, #10 wz
19a6c                 | '   crlf()
19a6c     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
19a70                 | ' if achar==9
19a70     09 1E 0E F2 | 	cmp	local01, #9 wz
19a74     18 00 90 5D |  if_ne	jmp	#LR__1960
19a78                 | '   cursor_x:=(cursor_x& %11110000)+16
19a78     38 E4 05 F1 | 	add	objptr, #56
19a7c     F2 16 E2 FA | 	rdword	arg03, objptr
19a80     F0 16 06 F5 | 	and	arg03, #240
19a84     10 16 06 F1 | 	add	arg03, #16
19a88     F2 16 52 FC | 	wrword	arg03, objptr
19a8c     38 E4 85 F1 | 	sub	objptr, #56
19a90                 | LR__1960
19a90                 | '   
19a90                 | ' if (achar<>9) && (achar<>10) 
19a90     09 1E 0E F2 | 	cmp	local01, #9 wz
19a94     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
19a98     44 00 90 AD |  if_e	jmp	#LR__1961
19a9c                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
19a9c     38 E4 05 F1 | 	add	objptr, #56
19aa0     F2 12 E2 FA | 	rdword	arg01, objptr
19aa4     02 E4 05 F1 | 	add	objptr, #2
19aa8     F2 14 C2 FA | 	rdbyte	arg02, objptr
19aac     04 14 66 F0 | 	shl	arg02, #4
19ab0     03 E4 05 F1 | 	add	objptr, #3
19ab4     F2 18 02 FB | 	rdlong	arg04, objptr
19ab8     04 E4 05 F1 | 	add	objptr, #4
19abc     F2 1A 02 FB | 	rdlong	arg05, objptr
19ac0     41 E4 85 F1 | 	sub	objptr, #65
19ac4     0F 17 02 F6 | 	mov	arg03, local01
19ac8     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
19acc                 | '   cursor_x+=2
19acc     38 E4 05 F1 | 	add	objptr, #56
19ad0     F2 1E E2 FA | 	rdword	local01, objptr
19ad4     02 1E 06 F1 | 	add	local01, #2
19ad8     F2 1E 52 FC | 	wrword	local01, objptr
19adc     38 E4 85 F1 | 	sub	objptr, #56
19ae0                 | LR__1961
19ae0                 | ' 
19ae0                 | ' if cursor_x>=256
19ae0     38 E4 05 F1 | 	add	objptr, #56
19ae4     F2 1E E2 FA | 	rdword	local01, objptr
19ae8     38 E4 85 F1 | 	sub	objptr, #56
19aec     00 1F 56 F2 | 	cmps	local01, #256 wc
19af0     64 00 90 CD |  if_b	jmp	#LR__1963
19af4                 | '   cursor_x:=0
19af4     38 E4 05 F1 | 	add	objptr, #56
19af8     F2 00 58 FC | 	wrword	#0, objptr
19afc                 | '   cursor_y+=1
19afc     02 E4 05 F1 | 	add	objptr, #2
19b00     F2 1E C2 FA | 	rdbyte	local01, objptr
19b04     01 1E 06 F1 | 	add	local01, #1
19b08     F2 1E 42 FC | 	wrbyte	local01, objptr
19b0c                 | '   if cursor_y>st_lines-1
19b0c     C3 E4 05 F1 | 	add	objptr, #195
19b10     F2 1E 02 FB | 	rdlong	local01, objptr
19b14     01 1E 86 F1 | 	sub	local01, #1
19b18     C3 E4 85 F1 | 	sub	objptr, #195
19b1c     F2 16 C2 FA | 	rdbyte	arg03, objptr
19b20     3A E4 85 F1 | 	sub	objptr, #58
19b24     0F 17 5A F2 | 	cmps	arg03, local01 wcz
19b28     2C 00 90 ED |  if_be	jmp	#LR__1962
19b2c                 | '     scrollup()
19b2c     00 12 06 F6 | 	mov	arg01, #0
19b30     01 00 00 FF 
19b34     40 14 06 F6 | 	mov	arg02, ##576
19b38     10 16 06 F6 | 	mov	arg03, #16
19b3c     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
19b40                 | '     cursor_y:=st_lines-1
19b40     FD E4 05 F1 | 	add	objptr, #253
19b44     F2 1E 02 FB | 	rdlong	local01, objptr
19b48     01 1E 86 F1 | 	sub	local01, #1
19b4c     C3 E4 85 F1 | 	sub	objptr, #195
19b50     F2 1E 42 FC | 	wrbyte	local01, objptr
19b54     3A E4 85 F1 | 	sub	objptr, #58
19b58                 | LR__1962
19b58                 | LR__1963
19b58                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
19b58     38 E4 05 F1 | 	add	objptr, #56
19b5c     F2 14 E2 FA | 	rdword	arg02, objptr
19b60     02 14 66 F0 | 	shl	arg02, #2
19b64     02 E4 05 F1 | 	add	objptr, #2
19b68     F2 16 C2 FA | 	rdbyte	arg03, objptr
19b6c     3A E4 85 F1 | 	sub	objptr, #58
19b70     04 16 66 F0 | 	shl	arg03, #4
19b74     11 12 06 F6 | 	mov	arg01, #17
19b78     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
19b7c     A7 F0 03 F6 | 	mov	ptra, fp
19b80     B2 00 A0 FD | 	call	#popregs_
19b84                 | _hg010b_spin2_putchar_ret
19b84     2D 00 64 FD | 	ret
19b88                 | 
19b88                 | '     
19b88                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
19b88                 | ' 
19b88                 | ' pub putchar2(achar) | c,x,y,l,newcpl
19b88                 | _hg010b_spin2_putchar2
19b88     01 4A 05 F6 | 	mov	COUNT_, #1
19b8c     A8 00 A0 FD | 	call	#pushregs_
19b90                 | ' 
19b90                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
19b90     38 E4 05 F1 | 	add	objptr, #56
19b94     F2 1E E2 FA | 	rdword	local01, objptr
19b98     02 E4 05 F1 | 	add	objptr, #2
19b9c     F2 14 C2 FA | 	rdbyte	arg02, objptr
19ba0     04 14 66 F0 | 	shl	arg02, #4
19ba4     09 17 02 F6 | 	mov	arg03, arg01
19ba8     03 E4 05 F1 | 	add	objptr, #3
19bac     F2 18 02 FB | 	rdlong	arg04, objptr
19bb0     04 E4 05 F1 | 	add	objptr, #4
19bb4     F2 1A 02 FB | 	rdlong	arg05, objptr
19bb8     41 E4 85 F1 | 	sub	objptr, #65
19bbc     0F 13 02 F6 | 	mov	arg01, local01
19bc0     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
19bc4                 | ' cursor_x+=2
19bc4     38 E4 05 F1 | 	add	objptr, #56
19bc8     F2 1E E2 FA | 	rdword	local01, objptr
19bcc     02 1E 06 F1 | 	add	local01, #2
19bd0     F2 1E 52 FC | 	wrword	local01, objptr
19bd4                 | ' if cursor_x>=256
19bd4     F2 1E E2 FA | 	rdword	local01, objptr
19bd8     38 E4 85 F1 | 	sub	objptr, #56
19bdc     00 1F 56 F2 | 	cmps	local01, #256 wc
19be0     64 00 90 CD |  if_b	jmp	#LR__1971
19be4                 | '   cursor_x:=0
19be4     38 E4 05 F1 | 	add	objptr, #56
19be8     F2 00 58 FC | 	wrword	#0, objptr
19bec                 | '   cursor_y+=1
19bec     02 E4 05 F1 | 	add	objptr, #2
19bf0     F2 1E C2 FA | 	rdbyte	local01, objptr
19bf4     01 1E 06 F1 | 	add	local01, #1
19bf8     F2 1E 42 FC | 	wrbyte	local01, objptr
19bfc                 | '   if cursor_y>st_lines-1
19bfc     C3 E4 05 F1 | 	add	objptr, #195
19c00     F2 1E 02 FB | 	rdlong	local01, objptr
19c04     01 1E 86 F1 | 	sub	local01, #1
19c08     C3 E4 85 F1 | 	sub	objptr, #195
19c0c     F2 1A C2 FA | 	rdbyte	arg05, objptr
19c10     3A E4 85 F1 | 	sub	objptr, #58
19c14     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
19c18     2C 00 90 ED |  if_be	jmp	#LR__1970
19c1c                 | '     scrollup()
19c1c     00 12 06 F6 | 	mov	arg01, #0
19c20     01 00 00 FF 
19c24     40 14 06 F6 | 	mov	arg02, ##576
19c28     10 16 06 F6 | 	mov	arg03, #16
19c2c     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
19c30                 | '     cursor_y:=st_lines-1
19c30     FD E4 05 F1 | 	add	objptr, #253
19c34     F2 1E 02 FB | 	rdlong	local01, objptr
19c38     01 1E 86 F1 | 	sub	local01, #1
19c3c     C3 E4 85 F1 | 	sub	objptr, #195
19c40     F2 1E 42 FC | 	wrbyte	local01, objptr
19c44     3A E4 85 F1 | 	sub	objptr, #58
19c48                 | LR__1970
19c48                 | LR__1971
19c48                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
19c48     38 E4 05 F1 | 	add	objptr, #56
19c4c     F2 14 E2 FA | 	rdword	arg02, objptr
19c50     02 14 66 F0 | 	shl	arg02, #2
19c54     02 E4 05 F1 | 	add	objptr, #2
19c58     F2 16 C2 FA | 	rdbyte	arg03, objptr
19c5c     3A E4 85 F1 | 	sub	objptr, #58
19c60     04 16 66 F0 | 	shl	arg03, #4
19c64     11 12 06 F6 | 	mov	arg01, #17
19c68     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
19c6c     A7 F0 03 F6 | 	mov	ptra, fp
19c70     B2 00 A0 FD | 	call	#popregs_
19c74                 | _hg010b_spin2_putchar2_ret
19c74     2D 00 64 FD | 	ret
19c78                 | 
19c78                 | ' ''--------- Output a string at the cursor position, move the cursor  
19c78                 | ' 
19c78                 | ' pub write(text) | iii,c,ncx,ncy
19c78                 | _hg010b_spin2_write
19c78     04 4A 05 F6 | 	mov	COUNT_, #4
19c7c     A8 00 A0 FD | 	call	#pushregs_
19c80     09 1F 02 F6 | 	mov	local01, arg01
19c84                 | ' 
19c84                 | ' repeat iii from 0 to strsize(text)-1
19c84     00 20 06 F6 | 	mov	local02, #0
19c88     0F 13 02 F6 | 	mov	arg01, local01
19c8c     09 23 02 F6 | 	mov	local03, arg01
19c90     97 06 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
19c94                 | LR__1980
19c94     11 FB C9 FA | 	rdbyte	result1, local03 wz
19c98     01 22 06 51 |  if_ne	add	local03, #1
19c9c     F4 FF 9F 5D |  if_ne	jmp	#LR__1980
19ca0                 | LR__1981
19ca0     09 23 82 F1 | 	sub	local03, arg01
19ca4     01 22 86 F1 | 	sub	local03, #1
19ca8     00 22 56 F2 | 	cmps	local03, #0 wc
19cac     01 24 86 F6 | 	negc	local04, #1
19cb0     12 23 02 F1 | 	add	local03, local04
19cb4                 | LR__1982
19cb4                 | '   putchar2(byte[text+iii])
19cb4     0F 13 02 F6 | 	mov	arg01, local01
19cb8     10 13 02 F1 | 	add	arg01, local02
19cbc     09 13 C2 FA | 	rdbyte	arg01, arg01
19cc0     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
19cc4     12 21 02 F1 | 	add	local02, local04
19cc8     11 21 0A F2 | 	cmp	local02, local03 wz
19ccc     E4 FF 9F 5D |  if_ne	jmp	#LR__1982
19cd0     A7 F0 03 F6 | 	mov	ptra, fp
19cd4     B2 00 A0 FD | 	call	#popregs_
19cd8                 | _hg010b_spin2_write_ret
19cd8     2D 00 64 FD | 	ret
19cdc                 | 
19cdc                 | ' 
19cdc                 | ' ''-----------  Scroll the screen one line up
19cdc                 | ' 
19cdc                 | ' pub scrollup(start=0, end=576 , amount=16) | i
19cdc                 | _hg010b_spin2_scrollup
19cdc     01 4A 05 F6 | 	mov	COUNT_, #1
19ce0     A8 00 A0 FD | 	call	#pushregs_
19ce4                 | ' 	
19ce4                 | ' repeat i from 0 to 559 
19ce4     00 1E 06 F6 | 	mov	local01, #0
19ce8                 | LR__1990
19ce8     F5 E4 05 F1 | 	add	objptr, #245
19cec     F2 18 02 FB | 	rdlong	arg04, objptr
19cf0     1C E4 85 F1 | 	sub	objptr, #28
19cf4     F2 14 02 FB | 	rdlong	arg02, objptr
19cf8     0F 13 02 F6 | 	mov	arg01, local01
19cfc     10 12 06 F1 | 	add	arg01, #16
19d00     02 12 66 F0 | 	shl	arg01, #2
19d04     14 E4 05 F1 | 	add	objptr, #20
19d08     F2 16 02 FB | 	rdlong	arg03, objptr
19d0c     0B 13 02 FD | 	qmul	arg01, arg03
19d10                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
19d10     F6 03 00 FF 
19d14     00 12 06 F6 | 	mov	arg01, ##519168
19d18     0C 13 82 F1 | 	sub	arg01, arg04
19d1c     02 16 66 F0 | 	shl	arg03, #2
19d20     0A 00 00 FF 
19d24     D3 E5 05 F1 | 	add	objptr, ##5587
19d28     18 18 62 FD | 	getqx	arg04
19d2c     0C 15 02 F1 | 	add	arg02, arg04
19d30     7C 04 B0 FD | 	call	#_psram_spin2_read1
19d34     0A 00 00 FF 
19d38     CB E5 85 F1 | 	sub	objptr, ##5579
19d3c     F2 18 02 FB | 	rdlong	arg04, objptr
19d40     1C E4 85 F1 | 	sub	objptr, #28
19d44     F2 14 02 FB | 	rdlong	arg02, objptr
19d48     0F 13 02 F6 | 	mov	arg01, local01
19d4c     02 12 66 F0 | 	shl	arg01, #2
19d50     14 E4 05 F1 | 	add	objptr, #20
19d54     F2 16 02 FB | 	rdlong	arg03, objptr
19d58     0B 13 02 FD | 	qmul	arg01, arg03
19d5c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
19d5c     F6 03 00 FF 
19d60     00 12 06 F6 | 	mov	arg01, ##519168
19d64     0C 13 82 F1 | 	sub	arg01, arg04
19d68     02 16 66 F0 | 	shl	arg03, #2
19d6c     0A 00 00 FF 
19d70     D3 E5 05 F1 | 	add	objptr, ##5587
19d74     18 18 62 FD | 	getqx	arg04
19d78     0C 15 02 F1 | 	add	arg02, arg04
19d7c     CC 04 B0 FD | 	call	#_psram_spin2_write
19d80     0B 00 00 FF 
19d84     C0 E4 85 F1 | 	sub	objptr, ##5824
19d88     01 1E 06 F1 | 	add	local01, #1
19d8c     01 00 00 FF 
19d90     30 1E 56 F2 | 	cmps	local01, ##560 wc
19d94     50 FF 9F CD |  if_b	jmp	#LR__1990
19d98                 | ' 
19d98                 | ' repeat i from 560 to 575
19d98     01 00 00 FF 
19d9c     30 1E 06 F6 | 	mov	local01, ##560
19da0                 | LR__1991
19da0                 | '    fastline(0,1023,i,write_background)   
19da0     41 E4 05 F1 | 	add	objptr, #65
19da4     F2 18 02 FB | 	rdlong	arg04, objptr
19da8     41 E4 85 F1 | 	sub	objptr, #65
19dac     00 12 06 F6 | 	mov	arg01, #0
19db0     09 14 CE F9 | 	bmask	arg02, #9
19db4     0F 17 02 F6 | 	mov	arg03, local01
19db8     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
19dbc     01 1E 06 F1 | 	add	local01, #1
19dc0     01 00 00 FF 
19dc4     40 1E 16 F2 | 	cmp	local01, ##576 wc
19dc8     D4 FF 9F CD |  if_b	jmp	#LR__1991
19dcc     A7 F0 03 F6 | 	mov	ptra, fp
19dd0     B2 00 A0 FD | 	call	#popregs_
19dd4                 | _hg010b_spin2_scrollup_ret
19dd4     2D 00 64 FD | 	ret
19dd8                 | 
19dd8                 | ' 
19dd8                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
19dd8                 | ' 
19dd8                 | ' pub crlf()
19dd8                 | _hg010b_spin2_crlf
19dd8                 | ' 
19dd8                 | ' cursor_x:=leading_spaces*2
19dd8     01 00 00 FF 
19ddc     B2 E4 05 F1 | 	add	objptr, ##690
19de0     F2 16 02 FB | 	rdlong	arg03, objptr
19de4     01 16 66 F0 | 	shl	arg03, #1
19de8     01 00 00 FF 
19dec     7A E4 85 F1 | 	sub	objptr, ##634
19df0     F2 16 52 FC | 	wrword	arg03, objptr
19df4                 | ' cursor_y+=1
19df4     02 E4 05 F1 | 	add	objptr, #2
19df8     F2 16 C2 FA | 	rdbyte	arg03, objptr
19dfc     01 16 06 F1 | 	add	arg03, #1
19e00     F2 16 42 FC | 	wrbyte	arg03, objptr
19e04                 | ' if cursor_y>st_lines-1
19e04     C3 E4 05 F1 | 	add	objptr, #195
19e08     F2 16 02 FB | 	rdlong	arg03, objptr
19e0c     01 16 86 F1 | 	sub	arg03, #1
19e10     C3 E4 85 F1 | 	sub	objptr, #195
19e14     F2 14 C2 FA | 	rdbyte	arg02, objptr
19e18     3A E4 85 F1 | 	sub	objptr, #58
19e1c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
19e20     2C 00 90 ED |  if_be	jmp	#LR__2000
19e24                 | '   scrollup()
19e24     00 12 06 F6 | 	mov	arg01, #0
19e28     01 00 00 FF 
19e2c     40 14 06 F6 | 	mov	arg02, ##576
19e30     10 16 06 F6 | 	mov	arg03, #16
19e34     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
19e38                 | '   cursor_y:=st_lines-1
19e38     FD E4 05 F1 | 	add	objptr, #253
19e3c     F2 16 02 FB | 	rdlong	arg03, objptr
19e40     01 16 86 F1 | 	sub	arg03, #1
19e44     C3 E4 85 F1 | 	sub	objptr, #195
19e48     F2 16 42 FC | 	wrbyte	arg03, objptr
19e4c     3A E4 85 F1 | 	sub	objptr, #58
19e50                 | LR__2000
19e50                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
19e50     38 E4 05 F1 | 	add	objptr, #56
19e54     F2 14 E2 FA | 	rdword	arg02, objptr
19e58     02 14 66 F0 | 	shl	arg02, #2
19e5c     02 E4 05 F1 | 	add	objptr, #2
19e60     F2 16 C2 FA | 	rdbyte	arg03, objptr
19e64     3A E4 85 F1 | 	sub	objptr, #58
19e68     04 16 66 F0 | 	shl	arg03, #4
19e6c     11 12 06 F6 | 	mov	arg01, #17
19e70     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
19e74                 | _hg010b_spin2_crlf_ret
19e74     2D 00 64 FD | 	ret
19e78                 | 
19e78                 | ' 
19e78                 | ' 
19e78                 | ' '*************************************************************************
19e78                 | ' '                                                                        *
19e78                 | ' '  Conversions                                                           *
19e78                 | ' '                                                                        *
19e78                 | ' '*************************************************************************
19e78                 | ' 
19e78                 | ' ''---------- Convert a integer to dec string, return a pointer
19e78                 | ' 
19e78                 | ' pub inttostr(i):result |q,pos,k,j
19e78                 | _hg010b_spin2_inttostr
19e78     03 4A 05 F6 | 	mov	COUNT_, #3
19e7c     A8 00 A0 FD | 	call	#pushregs_
19e80     09 1F 0A F6 | 	mov	local01, arg01 wz
19e84                 | ' 
19e84                 | ' j:=i
19e84                 | ' pos:=10
19e84     0A 20 06 F6 | 	mov	local02, #10
19e88                 | ' k:=0
19e88     00 22 06 F6 | 	mov	local03, #0
19e8c                 | ' 
19e8c                 | ' if (j==0)
19e8c     18 00 90 5D |  if_ne	jmp	#LR__2010
19e90                 | '   n_string[0]:=48
19e90     49 E4 05 F1 | 	add	objptr, #73
19e94     F2 60 48 FC | 	wrbyte	#48, objptr
19e98                 | '   n_string[1]:=0
19e98     01 E4 05 F1 | 	add	objptr, #1
19e9c     F2 00 48 FC | 	wrbyte	#0, objptr
19ea0     4A E4 85 F1 | 	sub	objptr, #74
19ea4     C4 00 90 FD | 	jmp	#LR__2017
19ea8                 | LR__2010
19ea8                 | ' 
19ea8                 | ' else
19ea8                 | '   if (j<0)
19ea8     0F 1F 52 F6 | 	abs	local01, local01 wc
19eac                 | '     j:=0-j
19eac                 | '     k:=45
19eac     2D 22 06 C6 |  if_b	mov	local03, #45
19eb0                 | ' 
19eb0                 | '   n_string[11]:=0
19eb0     54 E4 05 F1 | 	add	objptr, #84
19eb4     F2 00 48 FC | 	wrbyte	#0, objptr
19eb8     54 E4 85 F1 | 	sub	objptr, #84
19ebc     97 24 48 FB | 	callpa	#(@LR__2012-@LR__2011)>>2,fcache_load_ptr_
19ec0                 | '   repeat while (pos>-1)
19ec0                 | LR__2011
19ec0     00 20 56 F2 | 	cmps	local02, #0 wc
19ec4     40 00 90 CD |  if_b	jmp	#LR__2013
19ec8     0F FB 51 F6 | 	abs	result1, local01 wc
19ecc     0A FA 15 FD | 	qdiv	result1, #10
19ed0                 | '     q:=j//10
19ed0     19 FA 61 FD | 	getqy	result1
19ed4     FD FA 81 F6 | 	negc	result1, result1
19ed8     0F 1F 52 F6 | 	abs	local01, local01 wc
19edc     0A 1E 16 FD | 	qdiv	local01, #10
19ee0                 | '     q:=48+q
19ee0     30 FA 05 F1 | 	add	result1, #48
19ee4                 | '     n_string[pos]:=q
19ee4     10 1F 02 F6 | 	mov	local01, local02
19ee8     49 E4 05 F1 | 	add	objptr, #73
19eec     F2 1E 02 F1 | 	add	local01, objptr
19ef0     0F FB 41 FC | 	wrbyte	result1, local01
19ef4                 | '     j:=j/10
19ef4     49 E4 85 F1 | 	sub	objptr, #73
19ef8                 | '     pos-=1
19ef8     01 20 86 F1 | 	sub	local02, #1
19efc     18 1E 62 FD | 	getqx	local01
19f00     0F 1F 82 F6 | 	negc	local01, local01
19f04     B8 FF 9F FD | 	jmp	#LR__2011
19f08                 | LR__2012
19f08                 | LR__2013
19f08                 | '   repeat while n_string[0]==48
19f08                 | LR__2014
19f08     49 E4 05 F1 | 	add	objptr, #73
19f0c     F2 16 C2 FA | 	rdbyte	arg03, objptr
19f10     49 E4 85 F1 | 	sub	objptr, #73
19f14     30 16 0E F2 | 	cmp	arg03, #48 wz
19f18     20 00 90 5D |  if_ne	jmp	#LR__2015
19f1c                 | '     bytemove(@n_string,@n_string+1,12)
19f1c     49 E4 05 F1 | 	add	objptr, #73
19f20     F2 12 02 F6 | 	mov	arg01, objptr
19f24     F2 14 02 F6 | 	mov	arg02, objptr
19f28     49 E4 85 F1 | 	sub	objptr, #73
19f2c     01 14 06 F1 | 	add	arg02, #1
19f30     0C 16 06 F6 | 	mov	arg03, #12
19f34     00 0D B0 FD | 	call	#__system____builtin_memmove
19f38     CC FF 9F FD | 	jmp	#LR__2014
19f3c                 | LR__2015
19f3c                 | ' 
19f3c                 | '   if k==45
19f3c     2D 22 0E F2 | 	cmp	local03, #45 wz
19f40     28 00 90 5D |  if_ne	jmp	#LR__2016
19f44                 | '      bytemove(@n_string+1,@n_string,12)
19f44     49 E4 05 F1 | 	add	objptr, #73
19f48     F2 12 02 F6 | 	mov	arg01, objptr
19f4c     01 12 06 F1 | 	add	arg01, #1
19f50     F2 14 02 F6 | 	mov	arg02, objptr
19f54     49 E4 85 F1 | 	sub	objptr, #73
19f58     0C 16 06 F6 | 	mov	arg03, #12
19f5c     D8 0C B0 FD | 	call	#__system____builtin_memmove
19f60                 | '      n_string[0]:=k
19f60     49 E4 05 F1 | 	add	objptr, #73
19f64     F2 22 42 FC | 	wrbyte	local03, objptr
19f68     49 E4 85 F1 | 	sub	objptr, #73
19f6c                 | LR__2016
19f6c                 | LR__2017
19f6c                 | ' 
19f6c                 | ' q:=@n_string
19f6c     49 E4 05 F1 | 	add	objptr, #73
19f70     F2 FA 01 F6 | 	mov	result1, objptr
19f74     49 E4 85 F1 | 	sub	objptr, #73
19f78                 | ' return q
19f78     A7 F0 03 F6 | 	mov	ptra, fp
19f7c     B2 00 A0 FD | 	call	#popregs_
19f80                 | _hg010b_spin2_inttostr_ret
19f80     2D 00 64 FD | 	ret
19f84                 | 
19f84                 | ' 
19f84                 | ' '..............................................................................
19f84                 | ' 
19f84                 | ' {{
19f84                 | ' }}
19f84                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
19f84                 | _psram_spin2_startx
19f84     04 4A 05 F6 | 	mov	COUNT_, #4
19f88     A8 00 A0 FD | 	call	#pushregs_
19f8c     09 1F 02 F6 | 	mov	local01, arg01
19f90     0B 21 02 F6 | 	mov	local02, arg03
19f94     0C 23 02 F6 | 	mov	local03, arg04
19f98                 | '     stop() ' restart driver if required
19f98     54 01 B0 FD | 	call	#_psram_spin2_stop
19f9c     00 1E 0E F2 | 	cmp	local01, #0 wz
19fa0     14 1E 06 AB |  if_e	rdlong	local01, #20
19fa4     0F 15 52 F6 | 	abs	arg02, local01 wc
19fa8     A1 07 00 FF 
19fac     40 14 16 FD | 	qdiv	arg02, ##1000000
19fb0                 | ' 
19fb0                 | '     ' use current frequency if none specified
19fb0                 | ' 
19fb0                 | '     if freq == 0 
19fb0                 | '         freq := clkfreq 
19fb0                 | ' 
19fb0                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
19fb0                 | ' 
19fb0                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
19fb0                 | '     if burst < 0
19fb0                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
19fb0     18 14 62 FD | 	getqx	arg02
19fb4     0A 19 82 F6 | 	negc	arg04, arg02
19fb8     03 18 66 F0 | 	shl	arg04, #3
19fbc     84 18 86 F1 | 	sub	arg04, #132
19fc0     04 18 46 F0 | 	shr	arg04, #4
19fc4     04 18 66 F0 | 	shl	arg04, #4
19fc8     00 18 56 F2 | 	cmps	arg04, #0 wc
19fcc     0E FA 65 C6 |  if_b	neg	result1, #14
19fd0     10 01 90 CD |  if_b	jmp	#LR__2023
19fd4                 | ' 
19fd4                 | '     ' compute the input delay
19fd4                 | ' 
19fd4                 | '     if delay <= 0
19fd4     01 20 56 F2 | 	cmps	local02, #1 wc
19fd8     10 00 90 3D |  if_ae	jmp	#LR__2020
19fdc                 | '         delay := lookupDelay(freq)
19fdc     0F 13 02 F6 | 	mov	arg01, local01
19fe0     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
19fe4     FD 20 02 F6 | 	mov	local02, result1
19fe8     04 00 90 FD | 	jmp	#LR__2021
19fec                 | LR__2020
19fec                 | '     else
19fec                 | '         delay <#= $f ' limit to 15
19fec     0F 20 66 F3 | 	fles	local02, #15
19ff0                 | LR__2021
19ff0                 | ' 
19ff0                 | '     ' create our lock
19ff0                 | ' 
19ff0                 | '     driverlock := LOCKNEW()  
19ff0     00 FA 05 F6 | 	mov	result1, #0
19ff4     04 FA 61 FD | 	locknew	result1
19ff8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
19ffc     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1a000                 | '     if driverlock == -1
1a000     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1a004     FF FF 7F FF 
1a008     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1a00c                 | '         return ERR_NO_LOCK
1a00c     1A FA 65 A6 |  if_e	neg	result1, #26
1a010     D0 00 90 AD |  if_e	jmp	#LR__2023
1a014                 | ' 
1a014                 | '     ' patch in the proper data and HUB addresses to the startup structure
1a014                 | ' 
1a014                 | '     long[@startupData][0]:=clkfreq
1a014     14 1E 06 FB | 	rdlong	local01, #20
1a018     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1a01c     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1a020                 | ' '    long[@startupData][1]:=$1000_0000
1a020                 | '     long[@startupData][5]:=@deviceData
1a020     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1a024     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1a028     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1a02c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1a030     14 14 06 F1 | 	add	arg02, #20
1a034     0A 1F 62 FC | 	wrlong	local01, arg02
1a038                 | '     long[@startupData][6]:=@qosData
1a038     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1a03c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1a040     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1a044     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1a048     18 14 06 F1 | 	add	arg02, #24
1a04c     0A 1F 62 FC | 	wrlong	local01, arg02
1a050                 | '     long[@startupData][7]:=$7FF00
1a050     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1a054     1C 1E 06 F1 | 	add	local01, #28
1a058     FF 03 80 FF 
1a05c     0F 01 6A FC | 	wrlong	##524032, local01
1a060                 | ' 
1a060                 | '     ' setup some default bank and QoS parameter values
1a060                 | ' 
1a060                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1a060     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1a064     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1a068     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1a06c     10 18 66 F0 | 	shl	arg04, #16
1a070     0C 20 66 F0 | 	shl	local02, #12
1a074     10 19 42 F5 | 	or	arg04, local02
1a078     18 18 46 F5 | 	or	arg04, #24
1a07c     0C 15 02 F6 | 	mov	arg02, arg04
1a080     02 16 06 F6 | 	mov	arg03, #2
1a084     A0 00 A0 FD | 	call	#\builtin_longfill_
1a088                 | '     longfill(@qosData, $FFFF0000, 8)
1a088     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1a08c     07 16 06 F6 | 	mov	arg03, #7
1a090     28 16 62 FD | 	setq	arg03
1a094     80 FF FF FF 
1a098     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1a09c                 | ' 
1a09c                 | '     ' get the address of the PSRAM memory driver so we can start it
1a09c                 | ' 
1a09c                 | '     driverAddr:= driver.getDriverAddr()
1a09c                 | '     return @driver_start
1a09c     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1a0a0     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1a0a4     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1a0a8                 | ' 
1a0a8                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1a0a8                 | ' 
1a0a8                 | '     if desiredcog < 0
1a0a8     00 22 56 F2 | 	cmps	local03, #0 wc
1a0ac                 | '         desiredcog := NEWCOG
1a0ac     10 22 06 C6 |  if_b	mov	local03, #16
1a0b0                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1a0b0     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1a0b4     11 25 02 F6 | 	mov	local04, local03
1a0b8     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1a0bc     0A 25 F2 FC | 	coginit	local04, arg02 wc
1a0c0     01 24 66 C6 |  if_b	neg	local04, #1
1a0c4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1a0c8     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1a0cc                 | '     repeat until long[@startupData] == 0 
1a0cc     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1a0d0                 | LR__2022
1a0d0     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1a0d4     F8 FF 9F 5D |  if_ne	jmp	#LR__2022
1a0d8                 | ' 
1a0d8                 | '     return drivercog
1a0d8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1a0dc     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1a0e0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a0e4                 | LR__2023
1a0e4     A7 F0 03 F6 | 	mov	ptra, fp
1a0e8     B2 00 A0 FD | 	call	#popregs_
1a0ec                 | _psram_spin2_startx_ret
1a0ec     2D 00 64 FD | 	ret
1a0f0                 | 
1a0f0                 | ' 
1a0f0                 | ' '..............................................................................
1a0f0                 | ' 
1a0f0                 | ' {{
1a0f0                 | ' }}
1a0f0                 | ' PUB stop() : i
1a0f0                 | _psram_spin2_stop
1a0f0     00 00 06 F6 | 	mov	_var01, #0
1a0f4                 | '     if drivercog <> -1
1a0f4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a0f8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1a0fc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a100     FF FF 7F FF 
1a104     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1a108     70 00 90 AD |  if_e	jmp	#LR__2033
1a10c                 | '         cogstop(drivercog) ' a rather brutal stop
1a10c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a110     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1a114     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a118     03 12 62 FD | 	cogstop	arg01
1a11c     97 26 48 FB | 	callpa	#(@LR__2032-@LR__2030)>>2,fcache_load_ptr_
1a120                 | '         repeat i from 0 to 7
1a120                 | LR__2030
1a120                 | '             if long[$7FF00][i*3] < 0
1a120     00 FB 01 F6 | 	mov	result1, _var01
1a124     01 FA 65 F0 | 	shl	result1, #1
1a128     00 FB 01 F1 | 	add	result1, _var01
1a12c     02 FA 65 F0 | 	shl	result1, #2
1a130     FF 03 00 FF 
1a134     00 FB 05 F1 | 	add	result1, ##524032
1a138     FD FA 01 FB | 	rdlong	result1, result1
1a13c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a140     1C 00 90 3D |  if_ae	jmp	#LR__2031
1a144                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1a144     00 FB 01 F6 | 	mov	result1, _var01
1a148     01 FA 65 F0 | 	shl	result1, #1
1a14c     00 FB 01 F1 | 	add	result1, _var01
1a150     02 FA 65 F0 | 	shl	result1, #2
1a154     FF 03 00 FF 
1a158     00 FB 05 F1 | 	add	result1, ##524032
1a15c     FD 20 68 FC | 	wrlong	#16, result1
1a160                 | LR__2031
1a160     01 00 06 F1 | 	add	_var01, #1
1a164     08 00 56 F2 | 	cmps	_var01, #8 wc
1a168     B4 FF 9F CD |  if_b	jmp	#LR__2030
1a16c                 | LR__2032
1a16c                 | '         drivercog := -1
1a16c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a170     FF FF FF FF 
1a174     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1a178     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a17c                 | LR__2033
1a17c                 | '     if driverlock <> -1
1a17c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1a180     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1a184     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1a188     FF FF 7F FF 
1a18c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1a190                 | '         LOCKRET(driverlock)
1a190     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1a194     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1a198     05 12 62 5D |  if_ne	lockret	arg01
1a19c                 | '         driverlock := -1
1a19c     FF FF FF 5F 
1a1a0     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1a1a4     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1a1a8     00 FB 01 F6 | 	mov	result1, _var01
1a1ac                 | _psram_spin2_stop_ret
1a1ac     2D 00 64 FD | 	ret
1a1b0                 | 
1a1b0                 | ' 
1a1b0                 | ' '..............................................................................
1a1b0                 | ' 
1a1b0                 | ' {{
1a1b0                 | ' }}
1a1b0                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1a1b0                 | _psram_spin2_read1
1a1b0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1a1b0                 | '     if drivercog == -1 ' driver must be running
1a1b0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a1b4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1a1b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a1bc     FF FF 7F FF 
1a1c0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1a1c4                 | '         return ERR_INACTIVE
1a1c4     0F FA 65 A6 |  if_e	neg	result1, #15
1a1c8     7C 00 90 AD |  if_e	jmp	#LR__2041
1a1cc                 | '     if count == 0 ' don't even bother reading
1a1cc     00 16 0E F2 | 	cmp	arg03, #0 wz
1a1d0                 | '         return 0
1a1d0     00 FA 05 A6 |  if_e	mov	result1, #0
1a1d4     70 00 90 AD |  if_e	jmp	#LR__2041
1a1d8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1a1d8     00 FA 05 F6 | 	mov	result1, #0
1a1dc     01 FA 61 FD | 	cogid	result1
1a1e0     FD 00 02 F6 | 	mov	_var01, result1
1a1e4     01 00 66 F0 | 	shl	_var01, #1
1a1e8     FD 00 02 F1 | 	add	_var01, result1
1a1ec     02 00 66 F0 | 	shl	_var01, #2
1a1f0     FF 03 00 FF 
1a1f4     00 03 06 F6 | 	mov	_var02, ##524032
1a1f8     00 03 02 F1 | 	add	_var02, _var01
1a1fc                 | '     if long[mailbox] < 0
1a1fc     01 01 02 FB | 	rdlong	_var01, _var02
1a200     00 00 56 F2 | 	cmps	_var01, #0 wc
1a204                 | '         return ERR_MAILBOX_BUSY
1a204     1C FA 65 C6 |  if_b	neg	result1, #28
1a208     3C 00 90 CD |  if_b	jmp	#LR__2041
1a20c                 | '     long[mailbox][2] := count
1a20c     08 02 06 F1 | 	add	_var02, #8
1a210     01 17 62 FC | 	wrlong	arg03, _var02
1a214                 | '     long[mailbox][1] := dstHubAddr
1a214     04 02 86 F1 | 	sub	_var02, #4
1a218     01 13 62 FC | 	wrlong	arg01, _var02
1a21c     04 02 86 F1 | 	sub	_var02, #4
1a220                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1a220     0A 05 02 F6 | 	mov	_var03, arg02
1a224     D9 04 06 F4 | 	bitl	_var03, #217
1a228     00 00 58 FF 
1a22c     00 00 06 F6 | 	mov	_var01, ##-1342177280
1a230     02 01 02 F1 | 	add	_var01, _var03
1a234     01 01 62 FC | 	wrlong	_var01, _var02
1a238                 | '     repeat
1a238                 | LR__2040
1a238                 | '         result := long[mailbox]    
1a238     01 05 02 FB | 	rdlong	_var03, _var02
1a23c     00 04 56 F2 | 	cmps	_var03, #0 wc
1a240     F4 FF 9F CD |  if_b	jmp	#LR__2040
1a244                 | '     while result < 0   
1a244                 | '     return -result                       'return success or error
1a244     02 FB 61 F6 | 	neg	result1, _var03
1a248                 | LR__2041
1a248                 | _psram_spin2_read1_ret
1a248     2D 00 64 FD | 	ret
1a24c                 | 
1a24c                 | ' 
1a24c                 | ' '..............................................................................
1a24c                 | ' 
1a24c                 | ' {{
1a24c                 | ' }}
1a24c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1a24c                 | _psram_spin2_write
1a24c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1a24c                 | '     if drivercog == -1 ' driver must be running
1a24c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a250     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1a254     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a258     FF FF 7F FF 
1a25c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1a260                 | '         return ERR_INACTIVE
1a260     0F FA 65 A6 |  if_e	neg	result1, #15
1a264     7C 00 90 AD |  if_e	jmp	#LR__2051
1a268                 | '     if count == 0 ' don't even bother writing
1a268     00 16 0E F2 | 	cmp	arg03, #0 wz
1a26c                 | '         return 0
1a26c     00 FA 05 A6 |  if_e	mov	result1, #0
1a270     70 00 90 AD |  if_e	jmp	#LR__2051
1a274                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1a274     00 FA 05 F6 | 	mov	result1, #0
1a278     01 FA 61 FD | 	cogid	result1
1a27c     FD 00 02 F6 | 	mov	_var01, result1
1a280     01 00 66 F0 | 	shl	_var01, #1
1a284     FD 00 02 F1 | 	add	_var01, result1
1a288     02 00 66 F0 | 	shl	_var01, #2
1a28c     FF 03 00 FF 
1a290     00 03 06 F6 | 	mov	_var02, ##524032
1a294     00 03 02 F1 | 	add	_var02, _var01
1a298                 | '     if long[mailbox] < 0
1a298     01 01 02 FB | 	rdlong	_var01, _var02
1a29c     00 00 56 F2 | 	cmps	_var01, #0 wc
1a2a0                 | '         return ERR_MAILBOX_BUSY
1a2a0     1C FA 65 C6 |  if_b	neg	result1, #28
1a2a4     3C 00 90 CD |  if_b	jmp	#LR__2051
1a2a8                 | '     long[mailbox][2] := count
1a2a8     08 02 06 F1 | 	add	_var02, #8
1a2ac     01 17 62 FC | 	wrlong	arg03, _var02
1a2b0                 | '     long[mailbox][1] := srcHubAddr
1a2b0     04 02 86 F1 | 	sub	_var02, #4
1a2b4     01 13 62 FC | 	wrlong	arg01, _var02
1a2b8     04 02 86 F1 | 	sub	_var02, #4
1a2bc                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1a2bc     0A 05 02 F6 | 	mov	_var03, arg02
1a2c0     D9 04 06 F4 | 	bitl	_var03, #217
1a2c4     00 00 78 FF 
1a2c8     00 00 06 F6 | 	mov	_var01, ##-268435456
1a2cc     02 01 02 F1 | 	add	_var01, _var03
1a2d0     01 01 62 FC | 	wrlong	_var01, _var02
1a2d4                 | '     repeat
1a2d4                 | LR__2050
1a2d4                 | '         result := long[mailbox]    
1a2d4     01 05 02 FB | 	rdlong	_var03, _var02
1a2d8     00 04 56 F2 | 	cmps	_var03, #0 wc
1a2dc     F4 FF 9F CD |  if_b	jmp	#LR__2050
1a2e0                 | '     while result < 0   
1a2e0                 | '     return -result                       'return success or error
1a2e0     02 FB 61 F6 | 	neg	result1, _var03
1a2e4                 | LR__2051
1a2e4                 | _psram_spin2_write_ret
1a2e4     2D 00 64 FD | 	ret
1a2e8                 | 
1a2e8                 | ' 
1a2e8                 | ' ' generalized fill
1a2e8                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1a2e8                 | _psram_spin2_fill
1a2e8     09 01 02 F6 | 	mov	_var01, arg01
1a2ec     0A 03 02 F6 | 	mov	_var02, arg02
1a2f0     0B 05 02 F6 | 	mov	_var03, arg03
1a2f4     0D 07 02 F6 | 	mov	_var04, arg05
1a2f8                 | '     case datasize 
1a2f8     01 06 86 F1 | 	sub	_var04, #1
1a2fc     04 06 26 F3 | 	fle	_var04, #4
1a300     30 06 62 FD | 	jmprel	_var04
1a304                 | LR__2060
1a304     10 00 90 FD | 	jmp	#LR__2061
1a308     18 00 90 FD | 	jmp	#LR__2062
1a30c     2C 00 90 FD | 	jmp	#LR__2064
1a310     1C 00 90 FD | 	jmp	#LR__2063
1a314     24 00 90 FD | 	jmp	#LR__2064
1a318                 | LR__2061
1a318                 | '         1: req := driver.R_WRITEBYTE
1a318     00 00 60 FF 
1a31c     00 08 06 F6 | 	mov	_var05, ##-1073741824
1a320     20 00 90 FD | 	jmp	#LR__2065
1a324                 | LR__2062
1a324                 | '         2: req := driver.R_WRITEWORD
1a324     00 00 68 FF 
1a328     00 08 06 F6 | 	mov	_var05, ##-805306368
1a32c     14 00 90 FD | 	jmp	#LR__2065
1a330                 | LR__2063
1a330                 | '         4: req := driver.R_WRITELONG
1a330     00 00 70 FF 
1a334     00 08 06 F6 | 	mov	_var05, ##-536870912
1a338     08 00 90 FD | 	jmp	#LR__2065
1a33c                 | LR__2064
1a33c                 | '         other : return ERR_INVALID
1a33c     06 FA 65 F6 | 	neg	result1, #6
1a340     94 00 90 FD | 	jmp	#LR__2067
1a344                 | LR__2065
1a344                 | '     if count == 0   ' nothing to do
1a344     00 04 0E F2 | 	cmp	_var03, #0 wz
1a348                 | '         return 0
1a348     00 FA 05 A6 |  if_e	mov	result1, #0
1a34c     88 00 90 AD |  if_e	jmp	#LR__2067
1a350                 | '     if drivercog == -1
1a350     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a354     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1a358     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a35c     FF FF 7F FF 
1a360     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1a364                 | '         return ERR_INACTIVE
1a364     0F FA 65 A6 |  if_e	neg	result1, #15
1a368     6C 00 90 AD |  if_e	jmp	#LR__2067
1a36c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1a36c     00 FA 05 F6 | 	mov	result1, #0
1a370     01 FA 61 FD | 	cogid	result1
1a374     FD 06 02 F6 | 	mov	_var04, result1
1a378     01 06 66 F0 | 	shl	_var04, #1
1a37c     FD 06 02 F1 | 	add	_var04, result1
1a380     02 06 66 F0 | 	shl	_var04, #2
1a384     FF 03 00 FF 
1a388     00 0B 06 F6 | 	mov	_var06, ##524032
1a38c     03 0B 02 F1 | 	add	_var06, _var04
1a390                 | '     if long[mailbox] < 0
1a390     05 07 02 FB | 	rdlong	_var04, _var06
1a394     00 06 56 F2 | 	cmps	_var04, #0 wc
1a398                 | '         return ERR_MAILBOX_BUSY
1a398     1C FA 65 C6 |  if_b	neg	result1, #28
1a39c     38 00 90 CD |  if_b	jmp	#LR__2067
1a3a0                 | '     long[mailbox][2] := count
1a3a0     08 0A 06 F1 | 	add	_var06, #8
1a3a4     05 05 62 FC | 	wrlong	_var03, _var06
1a3a8                 | '     long[mailbox][1] := pattern
1a3a8     04 0A 86 F1 | 	sub	_var06, #4
1a3ac     05 03 62 FC | 	wrlong	_var02, _var06
1a3b0     04 0A 86 F1 | 	sub	_var06, #4
1a3b4                 | '     long[mailbox] := req + (addr & $1ffffff)
1a3b4     04 0D 02 F6 | 	mov	_var07, _var05
1a3b8     00 0F 02 F6 | 	mov	_var08, _var01
1a3bc     D9 0E 06 F4 | 	bitl	_var08, #217
1a3c0     07 0D 02 F1 | 	add	_var07, _var08
1a3c4     05 0D 62 FC | 	wrlong	_var07, _var06
1a3c8                 | '     repeat
1a3c8                 | LR__2066
1a3c8                 | '         r := long[mailbox]
1a3c8     05 0F 02 FB | 	rdlong	_var08, _var06
1a3cc     00 0E 56 F2 | 	cmps	_var08, #0 wc
1a3d0     F4 FF 9F CD |  if_b	jmp	#LR__2066
1a3d4                 | '     while r < 0
1a3d4                 | '     return -r                  ' return 0 for success or negated error code
1a3d4     07 FB 61 F6 | 	neg	result1, _var08
1a3d8                 | LR__2067
1a3d8                 | _psram_spin2_fill_ret
1a3d8     2D 00 64 FD | 	ret
1a3dc                 | 
1a3dc                 | ' 
1a3dc                 | ' '..............................................................................
1a3dc                 | ' 
1a3dc                 | ' {{
1a3dc                 | ' }}
1a3dc                 | ' PUB setQos(cog, qos) : result | mailbox
1a3dc                 | _psram_spin2_setQos
1a3dc     09 01 02 F6 | 	mov	_var01, arg01
1a3e0                 | '     if drivercog == -1 ' driver must be running
1a3e0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1a3e4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1a3e8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1a3ec     FF FF 7F FF 
1a3f0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1a3f4                 | '         return ERR_INACTIVE
1a3f4     0F FA 65 A6 |  if_e	neg	result1, #15
1a3f8     9C 00 90 AD |  if_e	jmp	#LR__2074
1a3fc                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1a3fc     00 00 56 F2 | 	cmps	_var01, #0 wc
1a400     08 00 90 CD |  if_b	jmp	#LR__2070
1a404     08 00 56 F2 | 	cmps	_var01, #8 wc
1a408     08 00 90 CD |  if_b	jmp	#LR__2071
1a40c                 | LR__2070
1a40c                 | '         return ERR_INVALID
1a40c     06 FA 65 F6 | 	neg	result1, #6
1a410     84 00 90 FD | 	jmp	#LR__2074
1a414                 | LR__2071
1a414                 | '     long[@qosData][cog] := qos & !$1ff
1a414     FF 15 26 F5 | 	andn	arg02, #511
1a418     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1a41c     02 00 66 F0 | 	shl	_var01, #2
1a420     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1a424     00 15 62 FC | 	wrlong	arg02, _var01
1a428                 | '     mailbox := $7FF00 + drivercog*12
1a428     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1a42c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1a430     02 07 02 F6 | 	mov	_var04, _var03
1a434     01 06 66 F0 | 	shl	_var04, #1
1a438     02 07 02 F1 | 	add	_var04, _var03
1a43c     02 06 66 F0 | 	shl	_var04, #2
1a440     FF 03 00 FF 
1a444     00 09 06 F6 | 	mov	_var05, ##524032
1a448     03 09 02 F1 | 	add	_var05, _var04
1a44c                 | '     repeat until LOCKTRY(driverlock)
1a44c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1a450                 | LR__2072
1a450     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1a454     06 12 72 FD | 	locktry	arg01 wc
1a458     F4 FF 9F 3D |  if_ae	jmp	#LR__2072
1a45c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1a460                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1a460     00 06 06 F6 | 	mov	_var04, #0
1a464     01 06 62 FD | 	cogid	_var04
1a468     00 00 78 FF 
1a46c     00 02 06 F6 | 	mov	_var02, ##-268435456
1a470     03 03 02 F1 | 	add	_var02, _var04
1a474     04 03 62 FC | 	wrlong	_var02, _var05
1a478                 | '     repeat while long[mailbox] < 0
1a478                 | LR__2073
1a478     04 03 02 FB | 	rdlong	_var02, _var05
1a47c     00 02 56 F2 | 	cmps	_var02, #0 wc
1a480     F4 FF 9F CD |  if_b	jmp	#LR__2073
1a484                 | '     LOCKREL(driverlock)
1a484     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1a488     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1a48c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1a490     07 12 72 FD | 	lockrel	arg01 wc
1a494     00 FA 05 F6 | 	mov	result1, #0
1a498                 | LR__2074
1a498                 | _psram_spin2_setQos_ret
1a498     2D 00 64 FD | 	ret
1a49c                 | 
1a49c                 | ' 
1a49c                 | ' '..............................................................................
1a49c                 | ' 
1a49c                 | ' {{
1a49c                 | ' }}
1a49c                 | ' PRI lookupDelay(freq) : delay | profile
1a49c                 | _psram_spin2_lookupDelay
1a49c                 | '     profile := @delayTable
1a49c     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1a4a0     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1a4a4                 | '     delay := long[profile][0]
1a4a4     00 03 02 FB | 	rdlong	_var02, _var01
1a4a8                 | '     repeat while long[profile][1] 
1a4a8     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1a4ac     97 16 48 FB | 	callpa	#(@LR__2081-@LR__2080)>>2,fcache_load_ptr_
1a4b0                 | LR__2080
1a4b0     04 00 06 F1 | 	add	_var01, #4
1a4b4     00 FB 09 FB | 	rdlong	result1, _var01 wz
1a4b8     04 00 86 F1 | 	sub	_var01, #4
1a4bc     1C 00 90 AD |  if_e	jmp	#LR__2082
1a4c0                 | '         if freq +< long[profile][1] 
1a4c0     04 00 06 F1 | 	add	_var01, #4
1a4c4     00 FB 01 FB | 	rdlong	result1, _var01
1a4c8     04 00 86 F1 | 	sub	_var01, #4
1a4cc     FD 12 12 F2 | 	cmp	arg01, result1 wc
1a4d0                 | '             quit
1a4d0                 | '         profile += 4
1a4d0     04 00 06 31 |  if_ae	add	_var01, #4
1a4d4                 | '         delay++
1a4d4     01 02 06 31 |  if_ae	add	_var02, #1
1a4d8     D4 FF 9F 3D |  if_ae	jmp	#LR__2080
1a4dc                 | LR__2081
1a4dc                 | LR__2082
1a4dc     01 FB 01 F6 | 	mov	result1, _var02
1a4e0                 | _psram_spin2_lookupDelay_ret
1a4e0     2D 00 64 FD | 	ret
1a4e4                 | 
1a4e4                 | ' 
1a4e4                 | ' PUB start() : r
1a4e4                 | _usbnew_spin2_start
1a4e4     00 00 06 F6 | 	mov	_var01, #0
1a4e8                 | '   ifnot driver_cog
1a4e8     15 00 00 FF 
1a4ec     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1a4f0     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1a4f4     15 00 00 FF 
1a4f8     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1a4fc     38 00 90 5D |  if_ne	jmp	#LR__2090
1a500                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1a500     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1a504     10 00 06 F6 | 	mov	_var01, #16
1a508     00 16 06 F6 | 	mov	arg03, #0
1a50c     28 16 62 FD | 	setq	arg03
1a510     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1a514     01 00 66 C6 |  if_b	neg	_var01, #1
1a518                 | '     if r >= 0
1a518     00 00 56 F2 | 	cmps	_var01, #0 wc
1a51c                 | '       driver_cog := r+1
1a51c     00 03 02 36 |  if_ae	mov	_var02, _var01
1a520     01 02 06 31 |  if_ae	add	_var02, #1
1a524     15 00 00 3F 
1a528     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1a52c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1a530     15 00 00 3F 
1a534     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1a538                 | LR__2090
1a538     00 FB 01 F6 | 	mov	result1, _var01
1a53c                 | _usbnew_spin2_start_ret
1a53c     2D 00 64 FD | 	ret
1a540                 | 
1a540                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1a540                 | ' 
1a540                 | ' '' Return key event from buffer if there is one
1a540                 | ' PUB get_key() : r | tail
1a540                 | _usbnew_spin2_get_key
1a540                 | '   tail := keyq_tail
1a540     0F 00 00 FF 
1a544     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1a548     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1a54c                 | '   if keyq_head == tail
1a54c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1a550     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1a554     0F 00 00 FF 
1a558     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1a55c     00 03 0A F2 | 	cmp	_var02, _var01 wz
1a560                 | '     return 0 ' No event
1a560     00 FA 05 A6 |  if_e	mov	result1, #0
1a564     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1a568                 | '   r := keyq_data[tail]
1a568     00 03 02 F6 | 	mov	_var02, _var01
1a56c     02 02 66 F0 | 	shl	_var02, #2
1a570     0F 00 00 FF 
1a574     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1a578     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1a57c     01 FB 01 FB | 	rdlong	result1, _var02
1a580                 | '   if ++tail == KEYQUEUE_SIZE
1a580     01 00 06 F1 | 	add	_var01, #1
1a584     80 00 0E F2 | 	cmp	_var01, #128 wz
1a588                 | '     tail := 0
1a588     00 00 06 A6 |  if_e	mov	_var01, #0
1a58c                 | '   keyq_tail := tail
1a58c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1a590     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1a594     0F 00 00 FF 
1a598     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1a59c                 | _usbnew_spin2_get_key_ret
1a59c     2D 00 64 FD | 	ret
1a5a0                 | 
1a5a0                 | ' 
1a5a0                 | ' '' Emulate mouse movement
1a5a0                 | ' PUB mouse_move(x,y)
1a5a0                 | _usbnew_spin2_mouse_move
1a5a0     02 4A 05 F6 | 	mov	COUNT_, #2
1a5a4     A8 00 A0 FD | 	call	#pushregs_
1a5a8     09 1F 02 F6 | 	mov	local01, arg01
1a5ac     0A 21 02 F6 | 	mov	local02, arg02
1a5b0                 | '   mouse_lock := 1
1a5b0     14 00 00 FF 
1a5b4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1a5b8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1a5bc     14 00 00 FF 
1a5c0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1a5c4                 | '   waitus(2) ' hope driver is now done
1a5c4     02 12 06 F6 | 	mov	arg01, #2
1a5c8     AC 0A B0 FD | 	call	#__system___waitus
1a5cc                 | '   mouse_xacc := x
1a5cc     14 00 00 FF 
1a5d0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1a5d4     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1a5d8                 | '   mouse_yacc := y
1a5d8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1a5dc     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1a5e0                 | '   if mouse_outptr
1a5e0     04 00 00 FF 
1a5e4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1a5e8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1a5ec     0F 00 00 FF 
1a5f0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1a5f4     24 00 90 AD |  if_e	jmp	#LR__2100
1a5f8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1a5f8     10 20 66 F0 | 	shl	local02, #16
1a5fc     0F 1F 32 F9 | 	getword	local01, local01, #0
1a600     0F 21 42 F5 | 	or	local02, local01
1a604     0F 00 00 FF 
1a608     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1a60c     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1a610     0F 00 00 FF 
1a614     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1a618     0F 21 62 FC | 	wrlong	local02, local01
1a61c                 | LR__2100
1a61c                 | '   mouse_lock := 0
1a61c     14 00 00 FF 
1a620     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1a624     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1a628     14 00 00 FF 
1a62c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1a630     A7 F0 03 F6 | 	mov	ptra, fp
1a634     B2 00 A0 FD | 	call	#popregs_
1a638                 | _usbnew_spin2_mouse_move_ret
1a638     2D 00 64 FD | 	ret
1a63c                 | 
1a63c                 | '     '' Set HAVE_HIDPAD to enable.
1a63c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1a63c                 | ' 
1a63c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1a63c                 | ' PUB hidpad_id(dev) : r
1a63c                 | _usbnew_spin2_hidpad_id
1a63c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1a63c     13 00 00 FF 
1a640     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1a644     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1a648     09 01 02 F6 | 	mov	_var01, arg01
1a64c     03 00 66 F0 | 	shl	_var01, #3
1a650     09 01 82 F1 | 	sub	_var01, arg01
1a654     02 00 66 F0 | 	shl	_var01, #2
1a658     00 FB 01 F1 | 	add	result1, _var01
1a65c     FD FA 01 FB | 	rdlong	result1, result1
1a660     13 00 00 FF 
1a664     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1a668                 | _usbnew_spin2_hidpad_id_ret
1a668     2D 00 64 FD | 	ret
1a66c                 | 
1a66c                 | ' 
1a66c                 | ' '' Get all button states for a device
1a66c                 | ' PUB hidpad_buttons(dev) : r 
1a66c                 | _usbnew_spin2_hidpad_buttons
1a66c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1a66c     13 00 00 FF 
1a670     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1a674     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1a678     09 01 02 F6 | 	mov	_var01, arg01
1a67c     03 00 66 F0 | 	shl	_var01, #3
1a680     09 01 82 F1 | 	sub	_var01, arg01
1a684     02 00 66 F0 | 	shl	_var01, #2
1a688     00 FB 01 F1 | 	add	result1, _var01
1a68c     14 FA 05 F1 | 	add	result1, #20
1a690     FD FA 01 FB | 	rdlong	result1, result1
1a694     13 00 00 FF 
1a698     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1a69c                 | _usbnew_spin2_hidpad_buttons_ret
1a69c     2D 00 64 FD | 	ret
1a6a0                 | 
1a6a0                 | ' 
1a6a0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1a6a0                 | ' PUB hidpad_axis(dev,axnum) : r
1a6a0                 | _usbnew_spin2_hidpad_axis
1a6a0                 | '   if axnum +>= 6
1a6a0     06 14 16 F2 | 	cmp	arg02, #6 wc
1a6a4                 | '     return 0
1a6a4     00 FA 05 36 |  if_ae	mov	result1, #0
1a6a8     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1a6ac                 | '   else 
1a6ac                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1a6ac     13 00 00 FF 
1a6b0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1a6b4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1a6b8     09 01 02 F6 | 	mov	_var01, arg01
1a6bc     03 00 66 F0 | 	shl	_var01, #3
1a6c0     09 01 82 F1 | 	sub	_var01, arg01
1a6c4     02 00 66 F0 | 	shl	_var01, #2
1a6c8     00 FB 01 F1 | 	add	result1, _var01
1a6cc     04 00 06 F6 | 	mov	_var01, #4
1a6d0     0A 01 02 F1 | 	add	_var01, arg02
1a6d4     01 00 66 F0 | 	shl	_var01, #1
1a6d8     FD 00 02 F1 | 	add	_var01, result1
1a6dc     00 FB E1 FA | 	rdword	result1, _var01
1a6e0     0F FA 65 F7 | 	signx	result1, #15
1a6e4     13 00 00 FF 
1a6e8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1a6ec                 | _usbnew_spin2_hidpad_axis_ret
1a6ec     2D 00 64 FD | 	ret
1a6f0                 | 
1a6f0                 | ' 
1a6f0                 | ' 
1a6f0                 | ' '--------------------------------------------------------------
1a6f0                 | ' '---------- Init the variables, start the cog. ----------------
1a6f0                 | ' '--------------------------------------------------------------
1a6f0                 | ' 
1a6f0                 | ' pub start(mbox,scope,cache) :cog,base | iii
1a6f0                 | _audio096_spin2_start
1a6f0     04 4A 05 F6 | 	mov	COUNT_, #4
1a6f4     A8 00 A0 FD | 	call	#pushregs_
1a6f8     09 1F 02 F6 | 	mov	local01, arg01
1a6fc                 | ' 
1a6fc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1a6fc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1a6fc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1a6fc                 | ' 
1a6fc                 | ' mailboxaddr:=mbox 
1a6fc     F2 1E 62 FC | 	wrlong	local01, objptr
1a700                 | ' scope_ptr:=scope
1a700     04 E4 05 F1 | 	add	objptr, #4
1a704     F2 14 62 FC | 	wrlong	arg02, objptr
1a708                 | ' cache_ptr:=cache
1a708     04 E4 05 F1 | 	add	objptr, #4
1a70c     F2 16 62 FC | 	wrlong	arg03, objptr
1a710                 | ' base:=@channel1[0]
1a710     04 E4 05 F1 | 	add	objptr, #4
1a714     F2 20 02 F6 | 	mov	local02, objptr
1a718                 | ' 
1a718                 | ' repeat iii from 0 to 7
1a718     00 22 06 F6 | 	mov	local03, #0
1a71c     02 00 00 FF 
1a720     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1a724     0C E4 85 F1 | 	sub	objptr, #12
1a728     97 B0 48 FB | 	callpa	#(@LR__2111-@LR__2110)>>2,fcache_load_ptr_
1a72c                 | LR__2110
1a72c                 | '   long[base+64*iii]:=0
1a72c     10 1F 02 F6 | 	mov	local01, local02
1a730     11 FD 01 F6 | 	mov	result2, local03
1a734     06 FC 65 F0 | 	shl	result2, #6
1a738     FE 1E 02 F1 | 	add	local01, result2
1a73c     0F 01 68 FC | 	wrlong	#0, local01
1a740                 | '   long[base+64*iii+4]:=0
1a740     10 1F 02 F6 | 	mov	local01, local02
1a744     11 FD 01 F6 | 	mov	result2, local03
1a748     06 FC 65 F0 | 	shl	result2, #6
1a74c     FE 1E 02 F1 | 	add	local01, result2
1a750     04 1E 06 F1 | 	add	local01, #4
1a754     0F 01 68 FC | 	wrlong	#0, local01
1a758                 | '   long[base+64*iii+12]:=0
1a758     10 25 02 F6 | 	mov	local04, local02
1a75c     11 1F 02 F6 | 	mov	local01, local03
1a760     06 1E 66 F0 | 	shl	local01, #6
1a764     0F 25 02 F1 | 	add	local04, local01
1a768     0C 24 06 F1 | 	add	local04, #12
1a76c     12 01 68 FC | 	wrlong	#0, local04
1a770                 | '   long[base+64*iii+16]:=2 
1a770     10 25 02 F6 | 	mov	local04, local02
1a774     11 1F 02 F6 | 	mov	local01, local03
1a778     06 1E 66 F0 | 	shl	local01, #6
1a77c     0F 25 02 F1 | 	add	local04, local01
1a780     10 24 06 F1 | 	add	local04, #16
1a784     12 05 68 FC | 	wrlong	#2, local04
1a788                 | '   word[base+64*iii+20]:=0
1a788     10 25 02 F6 | 	mov	local04, local02
1a78c     11 1F 02 F6 | 	mov	local01, local03
1a790     06 1E 66 F0 | 	shl	local01, #6
1a794     0F 25 02 F1 | 	add	local04, local01
1a798     14 24 06 F1 | 	add	local04, #20
1a79c     12 01 58 FC | 	wrword	#0, local04
1a7a0                 | '   word[base+64*iii+22]:=8192
1a7a0     10 25 02 F6 | 	mov	local04, local02
1a7a4     11 1F 02 F6 | 	mov	local01, local03
1a7a8     06 1E 66 F0 | 	shl	local01, #6
1a7ac     0F 25 02 F1 | 	add	local04, local01
1a7b0     16 24 06 F1 | 	add	local04, #22
1a7b4     10 00 80 FF 
1a7b8     12 01 58 FC | 	wrword	##8192, local04
1a7bc                 | '   word[base+64*iii+24]:=4000+2*iii
1a7bc     11 25 02 F6 | 	mov	local04, local03
1a7c0     01 24 66 F0 | 	shl	local04, #1
1a7c4     07 00 00 FF 
1a7c8     A0 1F 06 F6 | 	mov	local01, ##4000
1a7cc     12 1F 02 F1 | 	add	local01, local04
1a7d0     10 25 02 F6 | 	mov	local04, local02
1a7d4     11 FD 01 F6 | 	mov	result2, local03
1a7d8     06 FC 65 F0 | 	shl	result2, #6
1a7dc     FE 24 02 F1 | 	add	local04, result2
1a7e0     18 24 06 F1 | 	add	local04, #24
1a7e4     12 1F 52 FC | 	wrword	local01, local04
1a7e8                 | '   word[base+64*iii+26]:=2
1a7e8     10 25 02 F6 | 	mov	local04, local02
1a7ec     11 1F 02 F6 | 	mov	local01, local03
1a7f0     06 1E 66 F0 | 	shl	local01, #6
1a7f4     0F 25 02 F1 | 	add	local04, local01
1a7f8     1A 24 06 F1 | 	add	local04, #26
1a7fc     12 05 58 FC | 	wrword	#2, local04
1a800                 | '   long [base+64*iii+8]:=@null | $C0000000
1a800     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1a804     3E 1E 26 F4 | 	bith	local01, #62
1a808     10 25 02 F6 | 	mov	local04, local02
1a80c     11 17 02 F6 | 	mov	arg03, local03
1a810     06 16 66 F0 | 	shl	arg03, #6
1a814     0B 25 02 F1 | 	add	local04, arg03
1a818     08 24 06 F1 | 	add	local04, #8
1a81c     12 1F 62 FC | 	wrlong	local01, local04
1a820                 | '   long[base+64*iii+32]:=0
1a820     10 25 02 F6 | 	mov	local04, local02
1a824     11 1F 02 F6 | 	mov	local01, local03
1a828     06 1E 66 F0 | 	shl	local01, #6
1a82c     0F 25 02 F1 | 	add	local04, local01
1a830     20 24 06 F1 | 	add	local04, #32
1a834     12 01 68 FC | 	wrlong	#0, local04
1a838                 | '   long[base+64*iii+36]:=0
1a838     10 25 02 F6 | 	mov	local04, local02
1a83c     11 1F 02 F6 | 	mov	local01, local03
1a840     06 1E 66 F0 | 	shl	local01, #6
1a844     0F 25 02 F1 | 	add	local04, local01
1a848     24 24 06 F1 | 	add	local04, #36
1a84c     12 01 68 FC | 	wrlong	#0, local04
1a850                 | '   long[base+64*iii+40]:=0
1a850     10 25 02 F6 | 	mov	local04, local02
1a854     11 1F 02 F6 | 	mov	local01, local03
1a858     06 1E 66 F0 | 	shl	local01, #6
1a85c     0F 25 02 F1 | 	add	local04, local01
1a860     28 24 06 F1 | 	add	local04, #40
1a864     12 01 68 FC | 	wrlong	#0, local04
1a868                 | '   long[base+64*iii+44]:=0
1a868     10 25 02 F6 | 	mov	local04, local02
1a86c     11 1F 02 F6 | 	mov	local01, local03
1a870     06 1E 66 F0 | 	shl	local01, #6
1a874     0F 25 02 F1 | 	add	local04, local01
1a878     2C 24 06 F1 | 	add	local04, #44
1a87c     12 01 68 FC | 	wrlong	#0, local04
1a880     01 22 06 F1 | 	add	local03, #1
1a884     08 22 56 F2 | 	cmps	local03, #8 wc
1a888     A0 FE 9F CD |  if_b	jmp	#LR__2110
1a88c                 | LR__2111
1a88c     02 00 00 FF 
1a890     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1a894                 | '   
1a894                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1a894     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1a898     F2 16 02 F6 | 	mov	arg03, objptr
1a89c     10 24 06 F6 | 	mov	local04, #16
1a8a0     28 16 62 FD | 	setq	arg03
1a8a4     0A 25 F2 FC | 	coginit	local04, arg02 wc
1a8a8     01 24 66 C6 |  if_b	neg	local04, #1
1a8ac                 | ' waitms(100)
1a8ac     64 12 06 F6 | 	mov	arg01, #100
1a8b0     58 07 B0 FD | 	call	#__system___waitms
1a8b4                 | ' return cog,base
1a8b4     10 FD 01 F6 | 	mov	result2, local02
1a8b8     12 FB 01 F6 | 	mov	result1, local04
1a8bc     A7 F0 03 F6 | 	mov	ptra, fp
1a8c0     B2 00 A0 FD | 	call	#popregs_
1a8c4                 | _audio096_spin2_start_ret
1a8c4     2D 00 64 FD | 	ret
1a8c8                 | 
1a8c8                 | ' 
1a8c8                 | ' ' a simple play procedure to not poke everything. 
1a8c8                 | ' 
1a8c8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1a8c8                 | _audio096_spin2_play
1a8c8     0C E4 05 F1 | 	add	objptr, #12
1a8cc     F2 00 02 F6 | 	mov	_var01, objptr
1a8d0     06 12 66 F0 | 	shl	arg01, #6
1a8d4     09 01 02 F1 | 	add	_var01, arg01
1a8d8     00 13 02 F6 | 	mov	arg01, _var01
1a8dc     0C 12 06 F1 | 	add	arg01, #12
1a8e0     09 1B 62 FC | 	wrlong	arg05, arg01
1a8e4     00 1C 56 F2 | 	cmps	arg06, #0 wc
1a8e8     00 13 02 36 |  if_ae	mov	arg01, _var01
1a8ec     10 12 06 31 |  if_ae	add	arg01, #16
1a8f0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1a8f4     02 1A 06 C1 |  if_b	add	arg05, #2
1a8f8     00 13 02 C6 |  if_b	mov	arg01, _var01
1a8fc     10 12 06 C1 |  if_b	add	arg01, #16
1a900     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1a904     0B 13 52 F6 | 	abs	arg01, arg03 wc
1a908     0B 0A 80 FF 
1a90c     09 6D 18 FD | 	qdiv	##1316406, arg01
1a910                 | ' 
1a910                 | ' base2:=@channel1[0]+64*channel
1a910                 | ' 
1a910                 | ' 
1a910                 | ' long[base2+12]:= len
1a910                 | ' if loop >=0 
1a910                 | '   long[base2+16]:= loop
1a910     0C E4 85 F1 | 	sub	objptr, #12
1a914                 | ' else
1a914                 | '   long[base2+16]:= len+2
1a914                 | ' word[base2+20]:=vol
1a914     00 13 02 F6 | 	mov	arg01, _var01
1a918     14 12 06 F1 | 	add	arg01, #20
1a91c     09 19 52 FC | 	wrword	arg04, arg01
1a920                 | ' word[base2+24]:= 1316406/splfreq 
1a920     00 19 02 F6 | 	mov	arg04, _var01
1a924     18 18 06 F1 | 	add	arg04, #24
1a928                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1a928                 | ' long[base2+28]:=$40000000
1a928                 | ' long[base2+8]:=sample+$C0000000 
1a928     00 00 60 FF 
1a92c     00 14 06 F1 | 	add	arg02, ##-1073741824
1a930     18 12 62 FD | 	getqx	arg01
1a934     09 13 82 F6 | 	negc	arg01, arg01
1a938     0C 13 52 FC | 	wrword	arg01, arg04
1a93c     00 13 02 F6 | 	mov	arg01, _var01
1a940     1A 12 06 F1 | 	add	arg01, #26
1a944     09 01 5A FC | 	wrword	#256, arg01
1a948     00 13 02 F6 | 	mov	arg01, _var01
1a94c     1C 12 06 F1 | 	add	arg01, #28
1a950     00 00 A0 FF 
1a954     09 01 68 FC | 	wrlong	##1073741824, arg01
1a958     08 00 06 F1 | 	add	_var01, #8
1a95c     00 15 62 FC | 	wrlong	arg02, _var01
1a960                 | _audio096_spin2_play_ret
1a960     2D 00 64 FD | 	ret
1a964                 | 
1a964                 | ' 
1a964                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1a964                 | _audio096_spin2_play8
1a964                 | ' 
1a964                 | ' base2:=@channel1[0]+64*channel
1a964     0C E4 05 F1 | 	add	objptr, #12
1a968     F2 00 02 F6 | 	mov	_var01, objptr
1a96c     06 12 66 F0 | 	shl	arg01, #6
1a970     09 01 02 F1 | 	add	_var01, arg01
1a974                 | ' long[base2]:=0
1a974     00 01 68 FC | 	wrlong	#0, _var01
1a978                 | ' long[base2+8]:=sample+$40000000 
1a978     00 00 20 FF 
1a97c     00 14 06 F1 | 	add	arg02, ##1073741824
1a980     00 13 02 F6 | 	mov	arg01, _var01
1a984     08 12 06 F1 | 	add	arg01, #8
1a988     09 15 62 FC | 	wrlong	arg02, arg01
1a98c                 | ' if loop>=0
1a98c     00 1C 56 F2 | 	cmps	arg06, #0 wc
1a990     0C E4 85 F1 | 	sub	objptr, #12
1a994     1C 00 90 CD |  if_b	jmp	#LR__2120
1a998                 | '   long[base2+12]:=loop
1a998     00 15 02 F6 | 	mov	arg02, _var01
1a99c     0C 14 06 F1 | 	add	arg02, #12
1a9a0     0A 1D 62 FC | 	wrlong	arg06, arg02
1a9a4                 | '   long[base2+16]:= len
1a9a4     00 1D 02 F6 | 	mov	arg06, _var01
1a9a8     10 1C 06 F1 | 	add	arg06, #16
1a9ac     0E 1B 62 FC | 	wrlong	arg05, arg06
1a9b0     1C 00 90 FD | 	jmp	#LR__2121
1a9b4                 | LR__2120
1a9b4                 | ' else
1a9b4                 | '   long[base2+12]:= len
1a9b4     00 1D 02 F6 | 	mov	arg06, _var01
1a9b8     0C 1C 06 F1 | 	add	arg06, #12
1a9bc     0E 1B 62 FC | 	wrlong	arg05, arg06
1a9c0                 | '   long[base2+16]:= len+1
1a9c0     01 1A 06 F1 | 	add	arg05, #1
1a9c4     00 13 02 F6 | 	mov	arg01, _var01
1a9c8     10 12 06 F1 | 	add	arg01, #16
1a9cc     09 1B 62 FC | 	wrlong	arg05, arg01
1a9d0                 | LR__2121
1a9d0     0B 17 52 F6 | 	abs	arg03, arg03 wc
1a9d4     0B 0A 80 FF 
1a9d8     0B 6D 18 FD | 	qdiv	##1316406, arg03
1a9dc                 | ' word[base2+20]:=vol
1a9dc     00 17 02 F6 | 	mov	arg03, _var01
1a9e0     14 16 06 F1 | 	add	arg03, #20
1a9e4     0B 19 52 FC | 	wrword	arg04, arg03
1a9e8                 | ' word[base2+24]:= 1316406 /splfreq 
1a9e8     00 13 02 F6 | 	mov	arg01, _var01
1a9ec     18 12 06 F1 | 	add	arg01, #24
1a9f0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1a9f0                 | ' long[base2+28]:=$40000000
1a9f0     18 18 62 FD | 	getqx	arg04
1a9f4     0C 19 82 F6 | 	negc	arg04, arg04
1a9f8     09 19 52 FC | 	wrword	arg04, arg01
1a9fc     00 19 02 F6 | 	mov	arg04, _var01
1aa00     1A 18 06 F1 | 	add	arg04, #26
1aa04     0C 01 5A FC | 	wrword	#256, arg04
1aa08     1C 00 06 F1 | 	add	_var01, #28
1aa0c     00 00 A0 FF 
1aa10     00 01 68 FC | 	wrlong	##1073741824, _var01
1aa14                 | _audio096_spin2_play8_ret
1aa14     2D 00 64 FD | 	ret
1aa18                 | 
1aa18                 | ' 
1aa18                 | '     
1aa18                 | ' pub stop(channel) 'silence it
1aa18                 | _audio096_spin2_stop
1aa18                 | ' 
1aa18                 | ' word[@channel1[0]+64*channel+20]:=0
1aa18     0C E4 05 F1 | 	add	objptr, #12
1aa1c     F2 00 02 F6 | 	mov	_var01, objptr
1aa20     09 03 02 F6 | 	mov	_var02, arg01
1aa24     06 02 66 F0 | 	shl	_var02, #6
1aa28     01 01 02 F1 | 	add	_var01, _var02
1aa2c     14 00 06 F1 | 	add	_var01, #20
1aa30     00 01 58 FC | 	wrword	#0, _var01
1aa34                 | ' word[@channel1[0]+64*channel+20]:=0
1aa34     F2 00 02 F6 | 	mov	_var01, objptr
1aa38     06 12 66 F0 | 	shl	arg01, #6
1aa3c     09 01 02 F1 | 	add	_var01, arg01
1aa40     14 00 06 F1 | 	add	_var01, #20
1aa44     00 01 58 FC | 	wrword	#0, _var01
1aa48     0C E4 85 F1 | 	sub	objptr, #12
1aa4c                 | _audio096_spin2_stop_ret
1aa4c     2D 00 64 FD | 	ret
1aa50                 | hubexit
1aa50     81 00 80 FD | 	jmp	#cogexit
1aa54                 | 
1aa54                 | __system___setbaud
1aa54     14 62 06 FB | 	rdlong	muldiva_, #20
1aa58     09 65 02 F6 | 	mov	muldivb_, arg01
1aa5c     BA 00 A0 FD | 	call	#divide_
1aa60     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
1aa64                 | LR__2130
1aa64     3E FA 9D FA | 	rdpin	result1, #62 wc
1aa68     FE FC A1 F1 | 	subx	result2, result2
1aa6c     F4 FF 9F CD |  if_b	jmp	#LR__2130
1aa70                 | LR__2131
1aa70     40 7C 64 FD | 	dirl	#62
1aa74     40 7E 64 FD | 	dirl	#63
1aa78     F3 64 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1aa7c     10 64 66 F0 | 	shl	muldivb_, #16
1aa80     07 14 06 F6 | 	mov	arg02, #7
1aa84     32 15 02 F1 | 	add	arg02, muldivb_
1aa88     3E F8 0C FC | 	wrpin	#124, #62
1aa8c     3E 14 16 FC | 	wxpin	arg02, #62
1aa90     3F 7C 0C FC | 	wrpin	#62, #63
1aa94     14 14 06 F1 | 	add	arg02, #20
1aa98     3F 14 16 FC | 	wxpin	arg02, #63
1aa9c     41 7C 64 FD | 	dirh	#62
1aaa0     41 7E 64 FD | 	dirh	#63
1aaa4                 | __system___setbaud_ret
1aaa4     2D 00 64 FD | 	ret
1aaa8                 | 
1aaa8                 | __system___txraw
1aaa8     01 4A 05 F6 | 	mov	COUNT_, #1
1aaac     A8 00 A0 FD | 	call	#pushregs_
1aab0     09 1F 02 F6 | 	mov	local01, arg01
1aab4     97 06 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
1aab8                 | LR__2140
1aab8     3E FA 9D FA | 	rdpin	result1, #62 wc
1aabc     FE FC A1 F1 | 	subx	result2, result2
1aac0     F4 FF 9F CD |  if_b	jmp	#LR__2140
1aac4                 | LR__2141
1aac4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1aac8     C2 01 00 AF 
1aacc     00 12 06 A6 |  if_e	mov	arg01, ##230400
1aad0     80 FF BF AD |  if_e	call	#__system___setbaud
1aad4     58 7C 64 FD | 	drvl	#62
1aad8     3E 1E 26 FC | 	wypin	local01, #62
1aadc     01 FA 05 F6 | 	mov	result1, #1
1aae0     A7 F0 03 F6 | 	mov	ptra, fp
1aae4     B2 00 A0 FD | 	call	#popregs_
1aae8                 | __system___txraw_ret
1aae8     2D 00 64 FD | 	ret
1aaec                 | 
1aaec                 | __system___rxraw
1aaec     0D 4A 05 F6 | 	mov	COUNT_, #13
1aaf0     A8 00 A0 FD | 	call	#pushregs_
1aaf4     09 1F 02 F6 | 	mov	local01, arg01
1aaf8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1aafc     C2 01 00 AF 
1ab00     00 12 06 A6 |  if_e	mov	arg01, ##230400
1ab04     4C FF BF AD |  if_e	call	#__system___setbaud
1ab08     00 1E 0E F2 | 	cmp	local01, #0 wz
1ab0c     20 00 90 AD |  if_e	jmp	#LR__2150
1ab10     14 22 06 FB | 	rdlong	local03, #20
1ab14     0A 22 46 F0 | 	shr	local03, #10
1ab18     11 1F 02 FD | 	qmul	local01, local03
1ab1c     1A FA 61 FD | 	getct	result1
1ab20     18 24 62 FD | 	getqx	local04
1ab24     12 FB 01 F1 | 	add	result1, local04
1ab28     FD 26 02 F6 | 	mov	local05, result1
1ab2c     04 00 90 FD | 	jmp	#LR__2151
1ab30                 | LR__2150
1ab30     00 26 06 F6 | 	mov	local05, #0
1ab34                 | LR__2151
1ab34     01 28 66 F6 | 	neg	local06, #1
1ab38     3F 2A 06 F6 | 	mov	local07, #63
1ab3c     00 2C 06 F6 | 	mov	local08, #0
1ab40     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ab44     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1ab48     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1ab4c                 | LR__2152
1ab4c     08 2E 16 F4 | 	testb	local09, #8 wc
1ab50     09 2E 76 F4 | 	testbn	local09, #9 andc
1ab54     0A 2E 46 F0 | 	shr	local09, #10
1ab58     01 2C 06 C6 |  if_b	mov	local08, #1
1ab5c     40 7E 6C 3D |  if_ae	testp	#63 wz
1ab60     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1ab64     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1ab68     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1ab6c                 | LR__2153
1ab6c     00 20 06 F6 | 	mov	local02, #0
1ab70     00 2C 0E F2 | 	cmp	local08, #0 wz
1ab74     01 20 66 56 |  if_ne	neg	local02, #1
1ab78     00 30 06 F6 | 	mov	local10, #0
1ab7c     00 22 06 F6 | 	mov	local03, #0
1ab80     00 1E 0E F2 | 	cmp	local01, #0 wz
1ab84     01 22 66 56 |  if_ne	neg	local03, #1
1ab88     00 24 06 F6 | 	mov	local04, #0
1ab8c     00 32 06 F6 | 	mov	local11, #0
1ab90     1A FA 61 FD | 	getct	result1
1ab94     FD 34 02 F6 | 	mov	local12, result1
1ab98     1A 37 02 F6 | 	mov	local13, local12
1ab9c     13 37 82 F1 | 	sub	local13, local05
1aba0     00 36 56 F2 | 	cmps	local13, #0 wc
1aba4     00 32 26 C6 |  if_b	not	local11, #0
1aba8     00 32 0E F2 | 	cmp	local11, #0 wz
1abac     00 24 26 56 |  if_ne	not	local04, #0
1abb0     12 23 CA F7 | 	test	local03, local04 wz
1abb4     00 30 26 56 |  if_ne	not	local10, #0
1abb8     18 21 4A F5 | 	or	local02, local10 wz
1abbc     8C FF 9F AD |  if_e	jmp	#LR__2152
1abc0     00 2C 0E F2 | 	cmp	local08, #0 wz
1abc4     17 29 02 56 |  if_ne	mov	local06, local09
1abc8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1abcc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1abd0     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1abd4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1abd8     14 FB 01 F6 | 	mov	result1, local06
1abdc     A7 F0 03 F6 | 	mov	ptra, fp
1abe0     B2 00 A0 FD | 	call	#popregs_
1abe4                 | __system___rxraw_ret
1abe4     2D 00 64 FD | 	ret
1abe8                 | 
1abe8                 | __system___getus
1abe8     1A FC 71 FD | 	getct	result2 wc
1abec     1A 00 62 FD | 	getct	_var01
1abf0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1abf4     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1abf8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1abfc     20 00 90 5D |  if_ne	jmp	#LR__2160
1ac00     14 02 06 FB | 	rdlong	_var02, #20
1ac04     A1 07 00 FF 
1ac08     40 02 16 FD | 	qdiv	_var02, ##1000000
1ac0c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ac10     18 FA 61 FD | 	getqx	result1
1ac14     FD 02 02 F6 | 	mov	_var02, result1
1ac18     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ac1c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ac20                 | LR__2160
1ac20     01 FD 11 FD | 	qdiv	result2, _var02
1ac24     19 FC 61 FD | 	getqy	result2
1ac28     28 FC 61 FD | 	setq	result2
1ac2c     01 01 12 FD | 	qdiv	_var01, _var02
1ac30     18 FA 61 FD | 	getqx	result1
1ac34                 | __system___getus_ret
1ac34     2D 00 64 FD | 	ret
1ac38                 | 
1ac38                 | __system____builtin_memmove
1ac38     09 01 02 F6 | 	mov	_var01, arg01
1ac3c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1ac40     10 00 90 CD |  if_b	jmp	#LR__2170
1ac44     0A 03 02 F6 | 	mov	_var02, arg02
1ac48     0B 03 02 F1 | 	add	_var02, arg03
1ac4c     01 13 52 F2 | 	cmps	arg01, _var02 wc
1ac50     48 00 90 CD |  if_b	jmp	#LR__2176
1ac54                 | LR__2170
1ac54     0B 05 02 F6 | 	mov	_var03, arg03
1ac58     02 04 4E F0 | 	shr	_var03, #2 wz
1ac5c     18 00 90 AD |  if_e	jmp	#LR__2175
1ac60     97 0A 48 FB | 	callpa	#(@LR__2173-@LR__2171)>>2,fcache_load_ptr_
1ac64                 | LR__2171
1ac64     02 09 D8 FC | 	rep	@LR__2174, _var03
1ac68                 | LR__2172
1ac68     0A 05 02 FB | 	rdlong	_var03, arg02
1ac6c     09 05 62 FC | 	wrlong	_var03, arg01
1ac70     04 12 06 F1 | 	add	arg01, #4
1ac74     04 14 06 F1 | 	add	arg02, #4
1ac78                 | LR__2173
1ac78                 | LR__2174
1ac78                 | LR__2175
1ac78     02 16 CE F7 | 	test	arg03, #2 wz
1ac7c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1ac80     09 03 52 5C |  if_ne	wrword	_var02, arg01
1ac84     02 12 06 51 |  if_ne	add	arg01, #2
1ac88     02 14 06 51 |  if_ne	add	arg02, #2
1ac8c     01 16 CE F7 | 	test	arg03, #1 wz
1ac90     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1ac94     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1ac98     28 00 90 FD | 	jmp	#LR__2182
1ac9c                 | LR__2176
1ac9c     0B 13 02 F1 | 	add	arg01, arg03
1aca0     0B 15 02 F1 | 	add	arg02, arg03
1aca4     0B 07 0A F6 | 	mov	_var04, arg03 wz
1aca8     18 00 90 AD |  if_e	jmp	#LR__2181
1acac     97 0A 48 FB | 	callpa	#(@LR__2179-@LR__2177)>>2,fcache_load_ptr_
1acb0                 | LR__2177
1acb0     03 09 D8 FC | 	rep	@LR__2180, _var04
1acb4                 | LR__2178
1acb4     01 12 86 F1 | 	sub	arg01, #1
1acb8     01 14 86 F1 | 	sub	arg02, #1
1acbc     0A 03 C2 FA | 	rdbyte	_var02, arg02
1acc0     09 03 42 FC | 	wrbyte	_var02, arg01
1acc4                 | LR__2179
1acc4                 | LR__2180
1acc4                 | LR__2181
1acc4                 | LR__2182
1acc4     00 FB 01 F6 | 	mov	result1, _var01
1acc8                 | __system____builtin_memmove_ret
1acc8     2D 00 64 FD | 	ret
1accc                 | 
1accc                 | __system____builtin_strcpy
1accc     09 01 02 F6 | 	mov	_var01, arg01
1acd0     97 0A 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1acd4                 | LR__2190
1acd4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1acd8     09 FB 41 FC | 	wrbyte	result1, arg01
1acdc     01 14 06 F1 | 	add	arg02, #1
1ace0     01 12 06 F1 | 	add	arg01, #1
1ace4     EC FF 9F 5D |  if_ne	jmp	#LR__2190
1ace8                 | LR__2191
1ace8     00 FB 01 F6 | 	mov	result1, _var01
1acec                 | __system____builtin_strcpy_ret
1acec     2D 00 64 FD | 	ret
1acf0                 | 
1acf0                 | __system____topofstack
1acf0     00 4A 05 F6 | 	mov	COUNT_, #0
1acf4     A8 00 A0 FD | 	call	#pushregs_
1acf8     08 F0 07 F1 | 	add	ptra, #8
1acfc     04 4E 05 F1 | 	add	fp, #4
1ad00     A7 12 62 FC | 	wrlong	arg01, fp
1ad04     A7 FA 01 F6 | 	mov	result1, fp
1ad08     04 4E 85 F1 | 	sub	fp, #4
1ad0c     A7 F0 03 F6 | 	mov	ptra, fp
1ad10     B2 00 A0 FD | 	call	#popregs_
1ad14                 | __system____topofstack_ret
1ad14     2D 00 64 FD | 	ret
1ad18                 | 
1ad18                 | __system___lockmem
1ad18     00 FA 05 F6 | 	mov	result1, #0
1ad1c     01 FA 61 FD | 	cogid	result1
1ad20     00 FB 05 F1 | 	add	result1, #256
1ad24                 | LR__2200
1ad24     09 01 0A FB | 	rdlong	_var01, arg01 wz
1ad28     09 FB 61 AC |  if_e	wrlong	result1, arg01
1ad2c     09 01 02 AB |  if_e	rdlong	_var01, arg01
1ad30     09 01 02 AB |  if_e	rdlong	_var01, arg01
1ad34     FD 00 0A F2 | 	cmp	_var01, result1 wz
1ad38     E8 FF 9F 5D |  if_ne	jmp	#LR__2200
1ad3c                 | __system___lockmem_ret
1ad3c     2D 00 64 FD | 	ret
1ad40                 | 
1ad40                 | __system___string_cmp
1ad40     97 14 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1ad44                 | LR__2210
1ad44     09 01 C2 FA | 	rdbyte	_var01, arg01
1ad48     0A 03 C2 FA | 	rdbyte	_var02, arg02
1ad4c     00 05 02 F6 | 	mov	_var03, _var01
1ad50     01 05 8A F1 | 	sub	_var03, _var02 wz
1ad54     01 12 06 F1 | 	add	arg01, #1
1ad58     01 14 06 F1 | 	add	arg02, #1
1ad5c     0C 00 90 5D |  if_ne	jmp	#LR__2212
1ad60     00 00 0E F2 | 	cmp	_var01, #0 wz
1ad64     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1ad68     D8 FF 9F 5D |  if_ne	jmp	#LR__2210
1ad6c                 | LR__2211
1ad6c                 | LR__2212
1ad6c     02 FB 01 F6 | 	mov	result1, _var03
1ad70                 | __system___string_cmp_ret
1ad70     2D 00 64 FD | 	ret
1ad74                 | 
1ad74                 | __system___string_concat
1ad74     05 4A 05 F6 | 	mov	COUNT_, #5
1ad78     A8 00 A0 FD | 	call	#pushregs_
1ad7c     09 1F 02 F6 | 	mov	local01, arg01
1ad80     0A 21 02 F6 | 	mov	local02, arg02
1ad84     0F 13 02 F6 | 	mov	arg01, local01
1ad88     09 23 02 F6 | 	mov	local03, arg01
1ad8c     97 06 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
1ad90                 | LR__2220
1ad90     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ad94     01 22 06 51 |  if_ne	add	local03, #1
1ad98     F4 FF 9F 5D |  if_ne	jmp	#LR__2220
1ad9c                 | LR__2221
1ad9c     09 23 82 F1 | 	sub	local03, arg01
1ada0     11 25 02 F6 | 	mov	local04, local03
1ada4     10 13 02 F6 | 	mov	arg01, local02
1ada8     09 23 02 F6 | 	mov	local03, arg01
1adac     97 06 48 FB | 	callpa	#(@LR__2223-@LR__2222)>>2,fcache_load_ptr_
1adb0                 | LR__2222
1adb0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1adb4     01 22 06 51 |  if_ne	add	local03, #1
1adb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2222
1adbc                 | LR__2223
1adbc     09 23 82 F1 | 	sub	local03, arg01
1adc0     12 13 02 F6 | 	mov	arg01, local04
1adc4     11 13 02 F1 | 	add	arg01, local03
1adc8     01 12 06 F1 | 	add	arg01, #1
1adcc     38 3D B0 FD | 	call	#__system___gc_alloc_managed
1add0     FD 26 0A F6 | 	mov	local05, result1 wz
1add4     28 00 90 AD |  if_e	jmp	#LR__2224
1add8     13 13 02 F6 | 	mov	arg01, local05
1addc     0F 15 02 F6 | 	mov	arg02, local01
1ade0     12 17 02 F6 | 	mov	arg03, local04
1ade4     50 FE BF FD | 	call	#__system____builtin_memmove
1ade8     13 13 02 F6 | 	mov	arg01, local05
1adec     12 13 02 F1 | 	add	arg01, local04
1adf0     01 22 06 F1 | 	add	local03, #1
1adf4     10 15 02 F6 | 	mov	arg02, local02
1adf8     11 17 02 F6 | 	mov	arg03, local03
1adfc     38 FE BF FD | 	call	#__system____builtin_memmove
1ae00                 | LR__2224
1ae00     13 FB 01 F6 | 	mov	result1, local05
1ae04     A7 F0 03 F6 | 	mov	ptra, fp
1ae08     B2 00 A0 FD | 	call	#popregs_
1ae0c                 | __system___string_concat_ret
1ae0c     2D 00 64 FD | 	ret
1ae10                 | 
1ae10                 | __system___tx
1ae10     02 4A 05 F6 | 	mov	COUNT_, #2
1ae14     A8 00 A0 FD | 	call	#pushregs_
1ae18     09 1F 02 F6 | 	mov	local01, arg01
1ae1c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1ae20     18 00 90 5D |  if_ne	jmp	#LR__2230
1ae24     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ae28     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1ae2c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ae30     02 20 CE F7 | 	test	local02, #2 wz
1ae34     0D 12 06 56 |  if_ne	mov	arg01, #13
1ae38     6C FC BF 5D |  if_ne	call	#__system___txraw
1ae3c                 | LR__2230
1ae3c     0F 13 02 F6 | 	mov	arg01, local01
1ae40     64 FC BF FD | 	call	#__system___txraw
1ae44     A7 F0 03 F6 | 	mov	ptra, fp
1ae48     B2 00 A0 FD | 	call	#popregs_
1ae4c                 | __system___tx_ret
1ae4c     2D 00 64 FD | 	ret
1ae50                 | 
1ae50                 | __system___rx
1ae50     01 4A 05 F6 | 	mov	COUNT_, #1
1ae54     A8 00 A0 FD | 	call	#pushregs_
1ae58                 | LR__2240
1ae58     00 12 06 F6 | 	mov	arg01, #0
1ae5c     8C FC BF FD | 	call	#__system___rxraw
1ae60     FD 1E 02 F6 | 	mov	local01, result1
1ae64     FF FF 7F FF 
1ae68     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1ae6c     E8 FF 9F AD |  if_e	jmp	#LR__2240
1ae70     0D 1E 0E F2 | 	cmp	local01, #13 wz
1ae74     14 00 90 5D |  if_ne	jmp	#LR__2241
1ae78     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ae7c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ae80     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ae84     02 FA CD F7 | 	test	result1, #2 wz
1ae88     0A 1E 06 56 |  if_ne	mov	local01, #10
1ae8c                 | LR__2241
1ae8c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ae90     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ae94     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ae98     01 12 CE F7 | 	test	arg01, #1 wz
1ae9c     1C 00 90 AD |  if_e	jmp	#LR__2244
1aea0     7F 1E 0E F2 | 	cmp	local01, #127 wz
1aea4     0C 00 90 5D |  if_ne	jmp	#LR__2242
1aea8     08 12 06 F6 | 	mov	arg01, #8
1aeac     60 FF BF FD | 	call	#__system___tx
1aeb0     08 00 90 FD | 	jmp	#LR__2243
1aeb4                 | LR__2242
1aeb4     0F 13 02 F6 | 	mov	arg01, local01
1aeb8     54 FF BF FD | 	call	#__system___tx
1aebc                 | LR__2243
1aebc                 | LR__2244
1aebc     0F FB 01 F6 | 	mov	result1, local01
1aec0     A7 F0 03 F6 | 	mov	ptra, fp
1aec4     B2 00 A0 FD | 	call	#popregs_
1aec8                 | __system___rx_ret
1aec8     2D 00 64 FD | 	ret
1aecc                 | 
1aecc                 | __system___pinwrite
1aecc     09 01 02 F6 | 	mov	_var01, arg01
1aed0     1F 00 06 F5 | 	and	_var01, #31
1aed4     20 12 CE F7 | 	test	arg01, #32 wz
1aed8     06 12 46 F0 | 	shr	arg01, #6
1aedc     09 13 CA F9 | 	bmask	arg01, arg01
1aee0     00 13 62 F0 | 	shl	arg01, _var01
1aee4     00 15 62 F0 | 	shl	arg02, _var01
1aee8     1C 00 90 AD |  if_e	jmp	#LR__2250
1aeec     09 F7 43 F5 | 	or	dirb, arg01
1aef0     FD 01 02 F6 | 	mov	_var01, outb
1aef4     09 01 22 F5 | 	andn	_var01, arg01
1aef8     09 15 02 F5 | 	and	arg02, arg01
1aefc     0A 01 42 F5 | 	or	_var01, arg02
1af00     00 FB 03 F6 | 	mov	outb, _var01
1af04     18 00 90 FD | 	jmp	#LR__2251
1af08                 | LR__2250
1af08     09 F5 43 F5 | 	or	dira, arg01
1af0c     FC 01 02 F6 | 	mov	_var01, outa
1af10     09 01 22 F5 | 	andn	_var01, arg01
1af14     09 15 02 F5 | 	and	arg02, arg01
1af18     0A 01 42 F5 | 	or	_var01, arg02
1af1c     00 F9 03 F6 | 	mov	outa, _var01
1af20                 | LR__2251
1af20                 | __system___pinwrite_ret
1af20     2D 00 64 FD | 	ret
1af24                 | 
1af24                 | __system___basic_read_line
1af24     06 4A 05 F6 | 	mov	COUNT_, #6
1af28     A8 00 A0 FD | 	call	#pushregs_
1af2c     09 1F 02 F6 | 	mov	local01, arg01
1af30     00 20 06 F6 | 	mov	local02, #0
1af34     18 22 06 F6 | 	mov	local03, #24
1af38     00 24 06 F6 | 	mov	local04, #0
1af3c     18 12 06 F6 | 	mov	arg01, #24
1af40     C4 3B B0 FD | 	call	#__system___gc_alloc_managed
1af44     FD 26 0A F6 | 	mov	local05, result1 wz
1af48     13 FB 01 A6 |  if_e	mov	result1, local05
1af4c     B0 00 90 AD |  if_e	jmp	#LR__2263
1af50                 | LR__2260
1af50     0F 13 02 F6 | 	mov	arg01, local01
1af54     8C 0B B0 FD | 	call	#__system___basic_get_char
1af58     FD 28 02 F6 | 	mov	local06, result1
1af5c     01 28 56 F2 | 	cmps	local06, #1 wc
1af60     8C 00 90 CD |  if_b	jmp	#LR__2262
1af64     0A 28 0E F2 | 	cmp	local06, #10 wz
1af68     10 00 90 5D |  if_ne	jmp	#LR__2261
1af6c     00 24 0E F2 | 	cmp	local04, #0 wz
1af70     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1af74     01 20 86 11 |  if_a	sub	local02, #1
1af78     74 00 90 FD | 	jmp	#LR__2262
1af7c                 | LR__2261
1af7c     0D 28 0E F2 | 	cmp	local06, #13 wz
1af80     01 24 06 A6 |  if_e	mov	local04, #1
1af84     00 24 06 56 |  if_ne	mov	local04, #0
1af88     08 28 0E F2 | 	cmp	local06, #8 wz
1af8c     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1af90     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1af94     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1af98     B4 FF 9F AD |  if_e	jmp	#LR__2260
1af9c     13 17 02 F6 | 	mov	arg03, local05
1afa0     10 17 02 F1 | 	add	arg03, local02
1afa4     0B 29 42 FC | 	wrbyte	local06, arg03
1afa8     01 20 06 F1 | 	add	local02, #1
1afac     11 21 0A F2 | 	cmp	local02, local03 wz
1afb0     9C FF 9F 5D |  if_ne	jmp	#LR__2260
1afb4     11 13 02 F6 | 	mov	arg01, local03
1afb8     20 12 06 F1 | 	add	arg01, #32
1afbc     48 3B B0 FD | 	call	#__system___gc_alloc_managed
1afc0     FD 28 0A F6 | 	mov	local06, result1 wz
1afc4     14 FB 01 A6 |  if_e	mov	result1, local06
1afc8     34 00 90 AD |  if_e	jmp	#LR__2263
1afcc     14 13 02 F6 | 	mov	arg01, local06
1afd0     13 15 02 F6 | 	mov	arg02, local05
1afd4     11 17 02 F6 | 	mov	arg03, local03
1afd8     5C FC BF FD | 	call	#__system____builtin_memmove
1afdc     20 22 06 F1 | 	add	local03, #32
1afe0     13 13 02 F6 | 	mov	arg01, local05
1afe4     5C 3C B0 FD | 	call	#__system___gc_free
1afe8     14 27 02 F6 | 	mov	local05, local06
1afec     60 FF 9F FD | 	jmp	#LR__2260
1aff0                 | LR__2262
1aff0     13 29 02 F6 | 	mov	local06, local05
1aff4     10 29 02 F1 | 	add	local06, local02
1aff8     14 01 48 FC | 	wrbyte	#0, local06
1affc     13 FB 01 F6 | 	mov	result1, local05
1b000                 | LR__2263
1b000     A7 F0 03 F6 | 	mov	ptra, fp
1b004     B2 00 A0 FD | 	call	#popregs_
1b008                 | __system___basic_read_line_ret
1b008     2D 00 64 FD | 	ret
1b00c                 | 
1b00c                 | __system___waitms
1b00c     09 01 02 F6 | 	mov	_var01, arg01
1b010     1A 02 62 FD | 	getct	_var02
1b014     14 04 06 FB | 	rdlong	_var03, #20
1b018     97 14 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
1b01c                 | LR__2270
1b01c     01 00 00 FF 
1b020     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1b024     1C 00 90 CD |  if_b	jmp	#LR__2272
1b028     02 03 02 F1 | 	add	_var02, _var03
1b02c     01 13 02 F6 | 	mov	arg01, _var02
1b030     00 12 66 FA | 	addct1	arg01, #0
1b034     24 22 60 FD | 	waitct1
1b038     01 00 00 FF 
1b03c     E8 01 86 F1 | 	sub	_var01, ##1000
1b040     D8 FF 9F FD | 	jmp	#LR__2270
1b044                 | LR__2271
1b044                 | LR__2272
1b044     01 00 56 F2 | 	cmps	_var01, #1 wc
1b048     28 00 90 CD |  if_b	jmp	#LR__2273
1b04c     02 01 02 FD | 	qmul	_var01, _var03
1b050     01 00 00 FF 
1b054     E8 17 06 F6 | 	mov	arg03, ##1000
1b058     19 FA 61 FD | 	getqy	result1
1b05c     18 12 62 FD | 	getqx	arg01
1b060     28 FA 61 FD | 	setq	result1
1b064     0B 13 12 FD | 	qdiv	arg01, arg03
1b068     18 12 62 FD | 	getqx	arg01
1b06c     01 13 62 FA | 	addct1	arg01, _var02
1b070     24 22 60 FD | 	waitct1
1b074                 | LR__2273
1b074                 | __system___waitms_ret
1b074     2D 00 64 FD | 	ret
1b078                 | 
1b078                 | __system___waitus
1b078     09 01 02 F6 | 	mov	_var01, arg01
1b07c     1A 02 62 FD | 	getct	_var02
1b080     14 04 06 FB | 	rdlong	_var03, #20
1b084     97 14 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
1b088                 | LR__2280
1b088     A1 07 00 FF 
1b08c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1b090     1C 00 90 CD |  if_b	jmp	#LR__2282
1b094     02 03 02 F1 | 	add	_var02, _var03
1b098     01 13 02 F6 | 	mov	arg01, _var02
1b09c     00 12 66 FA | 	addct1	arg01, #0
1b0a0     24 22 60 FD | 	waitct1
1b0a4     A1 07 00 FF 
1b0a8     40 00 86 F1 | 	sub	_var01, ##1000000
1b0ac     D8 FF 9F FD | 	jmp	#LR__2280
1b0b0                 | LR__2281
1b0b0                 | LR__2282
1b0b0     01 00 56 F2 | 	cmps	_var01, #1 wc
1b0b4     28 00 90 CD |  if_b	jmp	#LR__2283
1b0b8     02 01 02 FD | 	qmul	_var01, _var03
1b0bc     A1 07 00 FF 
1b0c0     40 16 06 F6 | 	mov	arg03, ##1000000
1b0c4     19 FA 61 FD | 	getqy	result1
1b0c8     18 12 62 FD | 	getqx	arg01
1b0cc     28 FA 61 FD | 	setq	result1
1b0d0     0B 13 12 FD | 	qdiv	arg01, arg03
1b0d4     18 FA 61 FD | 	getqx	result1
1b0d8     FD 02 62 FA | 	addct1	_var02, result1
1b0dc     24 22 60 FD | 	waitct1
1b0e0                 | LR__2283
1b0e0                 | __system___waitus_ret
1b0e0     2D 00 64 FD | 	ret
1b0e4                 | 
1b0e4                 | __system___mount
1b0e4     0B 4A 05 F6 | 	mov	COUNT_, #11
1b0e8     A8 00 A0 FD | 	call	#pushregs_
1b0ec     09 1F 02 F6 | 	mov	local01, arg01
1b0f0     0A 21 0A F6 | 	mov	local02, arg02 wz
1b0f4     01 22 66 F6 | 	neg	local03, #1
1b0f8     01 FA 65 A6 |  if_e	neg	result1, #1
1b0fc     98 02 90 AD |  if_e	jmp	#LR__2305
1b100     0F FB C1 FA | 	rdbyte	result1, local01
1b104     2F FA 0D F2 | 	cmp	result1, #47 wz
1b108     28 00 90 5D |  if_ne	jmp	#LR__2292
1b10c     0F 13 02 F6 | 	mov	arg01, local01
1b110     09 25 02 F6 | 	mov	local04, arg01
1b114     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
1b118                 | LR__2290
1b118     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b11c     01 24 06 51 |  if_ne	add	local04, #1
1b120     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
1b124                 | LR__2291
1b124     09 25 82 F1 | 	sub	local04, arg01
1b128     12 FB 01 F6 | 	mov	result1, local04
1b12c     10 FA 55 F2 | 	cmps	result1, #16 wc
1b130     14 00 90 CD |  if_b	jmp	#LR__2293
1b134                 | LR__2292
1b134     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b138     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1b13c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b140     01 FA 65 F6 | 	neg	result1, #1
1b144     50 02 90 FD | 	jmp	#LR__2305
1b148                 | LR__2293
1b148     00 26 06 F6 | 	mov	local05, #0
1b14c                 | LR__2294
1b14c     04 26 56 F2 | 	cmps	local05, #4 wc
1b150     B0 00 90 3D |  if_ae	jmp	#LR__2299
1b154     13 13 02 F6 | 	mov	arg01, local05
1b158     02 12 66 F0 | 	shl	arg01, #2
1b15c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b160     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1b164     09 FB 09 FB | 	rdlong	result1, arg01 wz
1b168     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b16c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1b170     13 23 02 86 |  if_c_and_z	mov	local03, local05
1b174     84 00 90 8D |  if_c_and_z	jmp	#LR__2298
1b178     13 13 02 F6 | 	mov	arg01, local05
1b17c     02 12 66 F0 | 	shl	arg01, #2
1b180     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b184     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1b188     09 13 02 FB | 	rdlong	arg01, arg01
1b18c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b190     09 25 02 F6 | 	mov	local04, arg01
1b194     97 06 48 FB | 	callpa	#(@LR__2296-@LR__2295)>>2,fcache_load_ptr_
1b198                 | LR__2295
1b198     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b19c     01 24 06 51 |  if_ne	add	local04, #1
1b1a0     F4 FF 9F 5D |  if_ne	jmp	#LR__2295
1b1a4                 | LR__2296
1b1a4     09 25 82 F1 | 	sub	local04, arg01
1b1a8     12 29 02 F6 | 	mov	local06, local04
1b1ac     14 13 02 F6 | 	mov	arg01, local06
1b1b0     0F 13 02 F1 | 	add	arg01, local01
1b1b4     09 FB C1 FA | 	rdbyte	result1, arg01
1b1b8     2F FA 0D F2 | 	cmp	result1, #47 wz
1b1bc     14 2B 02 56 |  if_ne	mov	local07, local06
1b1c0     0F 2B 02 51 |  if_ne	add	local07, local01
1b1c4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1b1c8     30 00 90 5D |  if_ne	jmp	#LR__2297
1b1cc     13 17 02 F6 | 	mov	arg03, local05
1b1d0     02 16 66 F0 | 	shl	arg03, #2
1b1d4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b1d8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1b1dc     0B 15 02 FB | 	rdlong	arg02, arg03
1b1e0     0F 13 02 F6 | 	mov	arg01, local01
1b1e4     14 17 02 F6 | 	mov	arg03, local06
1b1e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b1ec     58 4D B0 FD | 	call	#__system__strncmp
1b1f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1f4     13 23 02 A6 |  if_e	mov	local03, local05
1b1f8     08 00 90 AD |  if_e	jmp	#LR__2299
1b1fc                 | LR__2297
1b1fc                 | LR__2298
1b1fc     01 26 06 F1 | 	add	local05, #1
1b200     48 FF 9F FD | 	jmp	#LR__2294
1b204                 | LR__2299
1b204     FF FF 7F FF 
1b208     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1b20c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1b210     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1b214     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b218     01 FA 65 A6 |  if_e	neg	result1, #1
1b21c     78 01 90 AD |  if_e	jmp	#LR__2305
1b220     11 27 02 F6 | 	mov	local05, local03
1b224     13 2B 02 F6 | 	mov	local07, local05
1b228     02 2A 66 F0 | 	shl	local07, #2
1b22c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1b230     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1b234     15 29 0A FB | 	rdlong	local06, local07 wz
1b238     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1b23c     58 00 90 AD |  if_e	jmp	#LR__2300
1b240     4C 28 06 F1 | 	add	local06, #76
1b244     14 2B 0A FB | 	rdlong	local07, local06 wz
1b248     4C 28 86 F1 | 	sub	local06, #76
1b24c     48 00 90 AD |  if_e	jmp	#LR__2300
1b250     4C 28 06 F1 | 	add	local06, #76
1b254     14 2B 02 FB | 	rdlong	local07, local06
1b258     15 23 02 F6 | 	mov	local03, local07
1b25c     13 2A 46 F7 | 	zerox	local07, #19
1b260     14 22 46 F0 | 	shr	local03, #20
1b264     02 22 66 F0 | 	shl	local03, #2
1b268     ED 22 02 F1 | 	add	local03, __methods__
1b26c     11 23 02 FB | 	rdlong	local03, local03
1b270     13 29 02 F6 | 	mov	local06, local05
1b274     02 28 66 F0 | 	shl	local06, #2
1b278     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b27c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1b280     14 13 02 FB | 	rdlong	arg01, local06
1b284     F2 28 02 F6 | 	mov	local06, objptr
1b288     15 E5 01 F6 | 	mov	objptr, local07
1b28c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b290     2D 22 62 FD | 	call	local03
1b294     14 E5 01 F6 | 	mov	objptr, local06
1b298                 | LR__2300
1b298     13 2D 02 F6 | 	mov	local08, local05
1b29c     02 2C 66 F0 | 	shl	local08, #2
1b2a0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1b2a4     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1b2a8     16 21 62 FC | 	wrlong	local02, local08
1b2ac     00 20 0E F2 | 	cmp	local02, #0 wz
1b2b0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1b2b4     18 00 90 5D |  if_ne	jmp	#LR__2301
1b2b8     02 26 66 F0 | 	shl	local05, #2
1b2bc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b2c0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1b2c4     13 01 68 FC | 	wrlong	#0, local05
1b2c8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b2cc     C4 00 90 FD | 	jmp	#LR__2304
1b2d0                 | LR__2301
1b2d0     13 2F 02 F6 | 	mov	local09, local05
1b2d4     04 2E 66 F0 | 	shl	local09, #4
1b2d8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1b2dc     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1b2e0     17 13 02 F6 | 	mov	arg01, local09
1b2e4     0F 15 02 F6 | 	mov	arg02, local01
1b2e8     10 16 06 F6 | 	mov	arg03, #16
1b2ec     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1b2f0     A8 4B B0 FD | 	call	#__system__strncpy
1b2f4     48 20 06 F1 | 	add	local02, #72
1b2f8     10 2D 0A FB | 	rdlong	local08, local02 wz
1b2fc     48 20 86 F1 | 	sub	local02, #72
1b300     7C 00 90 AD |  if_e	jmp	#LR__2303
1b304     48 20 06 F1 | 	add	local02, #72
1b308     10 2D 02 FB | 	rdlong	local08, local02
1b30c     16 31 02 F6 | 	mov	local10, local08
1b310     13 2C 46 F7 | 	zerox	local08, #19
1b314     14 30 46 F0 | 	shr	local10, #20
1b318     02 30 66 F0 | 	shl	local10, #2
1b31c     ED 30 02 F1 | 	add	local10, __methods__
1b320     18 31 02 FB | 	rdlong	local10, local10
1b324     17 13 02 F6 | 	mov	arg01, local09
1b328     F2 32 02 F6 | 	mov	local11, objptr
1b32c     16 E5 01 F6 | 	mov	objptr, local08
1b330     2D 30 62 FD | 	call	local10
1b334     19 E5 01 F6 | 	mov	objptr, local11
1b338     FD 12 0A F6 | 	mov	arg01, result1 wz
1b33c     40 00 90 AD |  if_e	jmp	#LR__2302
1b340     13 2D 02 F6 | 	mov	local08, local05
1b344     02 2C 66 F0 | 	shl	local08, #2
1b348     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1b34c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1b350     16 01 68 FC | 	wrlong	#0, local08
1b354     02 26 66 F0 | 	shl	local05, #2
1b358     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1b35c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1b360     13 01 68 FC | 	wrlong	#0, local05
1b364     09 13 6A F6 | 	neg	arg01, arg01 wz
1b368     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1b36c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b370     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b374     01 FA 65 56 |  if_ne	neg	result1, #1
1b378     00 FA 05 A6 |  if_e	mov	result1, #0
1b37c     18 00 90 FD | 	jmp	#LR__2305
1b380                 | LR__2302
1b380                 | LR__2303
1b380     02 26 66 F0 | 	shl	local05, #2
1b384     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b388     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1b38c     13 2F 62 FC | 	wrlong	local09, local05
1b390     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b394                 | LR__2304
1b394     00 FA 05 F6 | 	mov	result1, #0
1b398                 | LR__2305
1b398     A7 F0 03 F6 | 	mov	ptra, fp
1b39c     B2 00 A0 FD | 	call	#popregs_
1b3a0                 | __system___mount_ret
1b3a0     2D 00 64 FD | 	ret
1b3a4                 | 
1b3a4                 | __system___chdir
1b3a4     00 4A 05 F6 | 	mov	COUNT_, #0
1b3a8     A8 00 A0 FD | 	call	#pushregs_
1b3ac     40 F0 07 F1 | 	add	ptra, #64
1b3b0     04 4E 05 F1 | 	add	fp, #4
1b3b4     A7 12 62 FC | 	wrlong	arg01, fp
1b3b8     04 4E 05 F1 | 	add	fp, #4
1b3bc     A7 14 02 F6 | 	mov	arg02, fp
1b3c0     08 4E 85 F1 | 	sub	fp, #8
1b3c4     B4 47 B0 FD | 	call	#__system__stat
1b3c8     3C 4E 05 F1 | 	add	fp, #60
1b3cc     A7 FA 61 FC | 	wrlong	result1, fp
1b3d0     3C 4E 85 F1 | 	sub	fp, #60
1b3d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3d8     3C 4E 05 51 |  if_ne	add	fp, #60
1b3dc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1b3e0     3C 4E 85 51 |  if_ne	sub	fp, #60
1b3e4     BC 00 90 5D |  if_ne	jmp	#LR__2312
1b3e8     10 4E 05 F1 | 	add	fp, #16
1b3ec     A7 12 02 FB | 	rdlong	arg01, fp
1b3f0     10 4E 85 F1 | 	sub	fp, #16
1b3f4     78 00 00 FF 
1b3f8     00 12 06 F5 | 	and	arg01, ##61440
1b3fc     08 00 00 FF 
1b400     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1b404     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1b408     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1b40c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1b410     01 FA 65 56 |  if_ne	neg	result1, #1
1b414     8C 00 90 5D |  if_ne	jmp	#LR__2312
1b418     04 4E 05 F1 | 	add	fp, #4
1b41c     A7 16 02 FB | 	rdlong	arg03, fp
1b420     04 4E 85 F1 | 	sub	fp, #4
1b424     0B 17 C2 FA | 	rdbyte	arg03, arg03
1b428     2F 16 0E F2 | 	cmp	arg03, #47 wz
1b42c     24 00 90 5D |  if_ne	jmp	#LR__2310
1b430     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1b434     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1b438     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1b43c     04 4E 05 F1 | 	add	fp, #4
1b440     A7 14 02 FB | 	rdlong	arg02, fp
1b444     04 4E 85 F1 | 	sub	fp, #4
1b448     00 17 06 F6 | 	mov	arg03, #256
1b44c     4C 4A B0 FD | 	call	#__system__strncpy
1b450     4C 00 90 FD | 	jmp	#LR__2311
1b454                 | LR__2310
1b454     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1b458     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1b45c     38 4E 05 F1 | 	add	fp, #56
1b460     A7 12 62 FC | 	wrlong	arg01, fp
1b464     38 4E 85 F1 | 	sub	fp, #56
1b468     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1b46c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1b470     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1b474     00 17 06 F6 | 	mov	arg03, #256
1b478     20 4A B0 FD | 	call	#__system__strncpy
1b47c     38 4E 05 F1 | 	add	fp, #56
1b480     A7 12 02 FB | 	rdlong	arg01, fp
1b484     34 4E 85 F1 | 	sub	fp, #52
1b488     A7 14 02 FB | 	rdlong	arg02, fp
1b48c     04 4E 85 F1 | 	sub	fp, #4
1b490     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1b494     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1b498     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1b49c     10 00 B0 FD | 	call	#__system____getvfsforfile
1b4a0                 | LR__2311
1b4a0     00 FA 05 F6 | 	mov	result1, #0
1b4a4                 | LR__2312
1b4a4     A7 F0 03 F6 | 	mov	ptra, fp
1b4a8     B2 00 A0 FD | 	call	#popregs_
1b4ac                 | __system___chdir_ret
1b4ac     2D 00 64 FD | 	ret
1b4b0                 | 
1b4b0                 | __system____getvfsforfile
1b4b0     0E 4A 05 F6 | 	mov	COUNT_, #14
1b4b4     A8 00 A0 FD | 	call	#pushregs_
1b4b8     09 1F 02 F6 | 	mov	local01, arg01
1b4bc     0A 21 02 F6 | 	mov	local02, arg02
1b4c0     0B 23 02 F6 | 	mov	local03, arg03
1b4c4     97 10 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1b4c8                 | LR__2320
1b4c8     10 FB C1 FA | 	rdbyte	result1, local02
1b4cc     2F FA 0D F2 | 	cmp	result1, #47 wz
1b4d0     01 20 06 A1 |  if_e	add	local02, #1
1b4d4     10 25 C2 AA |  if_e	rdbyte	local04, local02
1b4d8     01 20 86 A1 |  if_e	sub	local02, #1
1b4dc     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1b4e0     01 20 06 A1 |  if_e	add	local02, #1
1b4e4     E0 FF 9F AD |  if_e	jmp	#LR__2320
1b4e8                 | LR__2321
1b4e8     10 25 C2 FA | 	rdbyte	local04, local02
1b4ec     2F 24 0E F2 | 	cmp	local04, #47 wz
1b4f0     14 00 90 5D |  if_ne	jmp	#LR__2322
1b4f4     0F 13 02 F6 | 	mov	arg01, local01
1b4f8     10 15 02 F6 | 	mov	arg02, local02
1b4fc     00 17 06 F6 | 	mov	arg03, #256
1b500     98 49 B0 FD | 	call	#__system__strncpy
1b504     7C 00 90 FD | 	jmp	#LR__2324
1b508                 | LR__2322
1b508     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1b50c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1b510     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1b514     0F 13 02 F6 | 	mov	arg01, local01
1b518     00 17 06 F6 | 	mov	arg03, #256
1b51c     7C 49 B0 FD | 	call	#__system__strncpy
1b520     10 25 CA FA | 	rdbyte	local04, local02 wz
1b524     5C 00 90 AD |  if_e	jmp	#LR__2323
1b528     10 25 C2 FA | 	rdbyte	local04, local02
1b52c     2E 24 0E F2 | 	cmp	local04, #46 wz
1b530     01 20 06 A1 |  if_e	add	local02, #1
1b534     10 27 C2 AA |  if_e	rdbyte	local05, local02
1b538     01 20 86 A1 |  if_e	sub	local02, #1
1b53c     13 29 02 A6 |  if_e	mov	local06, local05
1b540     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1b544     3C 00 90 AD |  if_e	jmp	#LR__2323
1b548     0F 27 C2 FA | 	rdbyte	local05, local01
1b54c     2F 26 0E F2 | 	cmp	local05, #47 wz
1b550     01 1E 06 A1 |  if_e	add	local01, #1
1b554     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1b558     01 1E 86 A1 |  if_e	sub	local01, #1
1b55c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1b560     51 01 00 5F 
1b564     58 14 06 56 |  if_ne	mov	arg02, ##@LR__4370
1b568     0F 13 02 56 |  if_ne	mov	arg01, local01
1b56c     00 17 06 56 |  if_ne	mov	arg03, #256
1b570     74 49 B0 5D |  if_ne	call	#__system__strncat
1b574     0F 13 02 F6 | 	mov	arg01, local01
1b578     10 15 02 F6 | 	mov	arg02, local02
1b57c     00 17 06 F6 | 	mov	arg03, #256
1b580     64 49 B0 FD | 	call	#__system__strncat
1b584                 | LR__2323
1b584                 | LR__2324
1b584     0F 13 02 F6 | 	mov	arg01, local01
1b588     1C 4B B0 FD | 	call	#__system___normalizeName
1b58c     0F 25 CA FA | 	rdbyte	local04, local01 wz
1b590     1C 00 90 AD |  if_e	jmp	#LR__2325
1b594     0F 25 C2 FA | 	rdbyte	local04, local01
1b598     2F 24 0E F2 | 	cmp	local04, #47 wz
1b59c     01 1E 06 A1 |  if_e	add	local01, #1
1b5a0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1b5a4     01 1E 86 A1 |  if_e	sub	local01, #1
1b5a8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1b5ac     18 00 90 5D |  if_ne	jmp	#LR__2326
1b5b0                 | LR__2325
1b5b0     01 00 00 FF 
1b5b4     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1b5b8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1b5bc     01 00 00 FF 
1b5c0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1b5c4     EC 01 90 FD | 	jmp	#LR__2340
1b5c8                 | LR__2326
1b5c8     00 2A 06 F6 | 	mov	local07, #0
1b5cc                 | LR__2327
1b5cc     04 2A 56 F2 | 	cmps	local07, #4 wc
1b5d0     CC 01 90 3D |  if_ae	jmp	#LR__2339
1b5d4     15 29 02 F6 | 	mov	local06, local07
1b5d8     02 28 66 F0 | 	shl	local06, #2
1b5dc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b5e0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1b5e4     14 29 0A FB | 	rdlong	local06, local06 wz
1b5e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b5ec     A8 01 90 AD |  if_e	jmp	#LR__2338
1b5f0     15 25 02 F6 | 	mov	local04, local07
1b5f4     02 24 66 F0 | 	shl	local04, #2
1b5f8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b5fc     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1b600     12 13 02 FB | 	rdlong	arg01, local04
1b604     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b608     09 2D 02 F6 | 	mov	local08, arg01
1b60c     97 06 48 FB | 	callpa	#(@LR__2329-@LR__2328)>>2,fcache_load_ptr_
1b610                 | LR__2328
1b610     16 FB C9 FA | 	rdbyte	result1, local08 wz
1b614     01 2C 06 51 |  if_ne	add	local08, #1
1b618     F4 FF 9F 5D |  if_ne	jmp	#LR__2328
1b61c                 | LR__2329
1b61c     09 2D 82 F1 | 	sub	local08, arg01
1b620     16 2F 02 F6 | 	mov	local09, local08
1b624     17 25 02 F6 | 	mov	local04, local09
1b628     0F 25 02 F1 | 	add	local04, local01
1b62c     12 29 C2 FA | 	rdbyte	local06, local04
1b630     2F 28 0E F2 | 	cmp	local06, #47 wz
1b634     17 31 02 56 |  if_ne	mov	local10, local09
1b638     0F 31 02 51 |  if_ne	add	local10, local01
1b63c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1b640     54 01 90 5D |  if_ne	jmp	#LR__2337
1b644     15 17 02 F6 | 	mov	arg03, local07
1b648     02 16 66 F0 | 	shl	arg03, #2
1b64c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1b650     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1b654     0B 15 02 FB | 	rdlong	arg02, arg03
1b658     17 17 02 F6 | 	mov	arg03, local09
1b65c     0F 13 02 F6 | 	mov	arg01, local01
1b660     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1b664     E0 48 B0 FD | 	call	#__system__strncmp
1b668     00 FA 4D F2 | 	cmps	result1, #0 wz
1b66c     28 01 90 5D |  if_ne	jmp	#LR__2337
1b670     15 33 02 F6 | 	mov	local11, local07
1b674     02 32 66 F0 | 	shl	local11, #2
1b678     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1b67c     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1b680     19 35 02 FB | 	rdlong	local12, local11
1b684     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1b688     97 22 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
1b68c                 | LR__2330
1b68c     17 29 02 F6 | 	mov	local06, local09
1b690     01 28 06 F1 | 	add	local06, #1
1b694     0F 29 02 F1 | 	add	local06, local01
1b698     14 33 C2 FA | 	rdbyte	local11, local06
1b69c     2E 32 0E F2 | 	cmp	local11, #46 wz
1b6a0     2C 00 90 5D |  if_ne	jmp	#LR__2332
1b6a4     17 33 02 F6 | 	mov	local11, local09
1b6a8     02 32 06 F1 | 	add	local11, #2
1b6ac     0F 33 02 F1 | 	add	local11, local01
1b6b0     19 31 C2 FA | 	rdbyte	local10, local11
1b6b4     2F 30 0E F2 | 	cmp	local10, #47 wz
1b6b8     17 37 02 56 |  if_ne	mov	local13, local09
1b6bc     02 36 06 51 |  if_ne	add	local13, #2
1b6c0     0F 37 02 51 |  if_ne	add	local13, local01
1b6c4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1b6c8     01 2E 06 A1 |  if_e	add	local09, #1
1b6cc     BC FF 9F AD |  if_e	jmp	#LR__2330
1b6d0                 | LR__2331
1b6d0                 | LR__2332
1b6d0     00 22 0E F2 | 	cmp	local03, #0 wz
1b6d4     11 13 02 56 |  if_ne	mov	arg01, local03
1b6d8     0F 15 02 56 |  if_ne	mov	arg02, local01
1b6dc     00 17 06 56 |  if_ne	mov	arg03, #256
1b6e0     B8 47 B0 5D |  if_ne	call	#__system__strncpy
1b6e4     0F 15 02 F6 | 	mov	arg02, local01
1b6e8     17 15 02 F1 | 	add	arg02, local09
1b6ec     01 14 06 F1 | 	add	arg02, #1
1b6f0     0F 13 02 F6 | 	mov	arg01, local01
1b6f4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1b6f8     0F 13 02 F6 | 	mov	arg01, local01
1b6fc     09 2D 02 F6 | 	mov	local08, arg01
1b700     97 06 48 FB | 	callpa	#(@LR__2334-@LR__2333)>>2,fcache_load_ptr_
1b704                 | LR__2333
1b704     16 FB C9 FA | 	rdbyte	result1, local08 wz
1b708     01 2C 06 51 |  if_ne	add	local08, #1
1b70c     F4 FF 9F 5D |  if_ne	jmp	#LR__2333
1b710                 | LR__2334
1b710     09 2D 82 F1 | 	sub	local08, arg01
1b714     16 2F 02 F6 | 	mov	local09, local08
1b718                 | LR__2335
1b718     01 2E 56 F2 | 	cmps	local09, #1 wc
1b71c     70 00 90 CD |  if_b	jmp	#LR__2336
1b720     17 25 02 F6 | 	mov	local04, local09
1b724     0F 25 02 F1 | 	add	local04, local01
1b728     12 33 C2 FA | 	rdbyte	local11, local04
1b72c     2F 32 0E F2 | 	cmp	local11, #47 wz
1b730     17 33 02 A6 |  if_e	mov	local11, local09
1b734     0F 33 02 A1 |  if_e	add	local11, local01
1b738     19 01 48 AC |  if_e	wrbyte	#0, local11
1b73c     01 2E 86 A1 |  if_e	sub	local09, #1
1b740     D4 FF 9F AD |  if_e	jmp	#LR__2335
1b744     17 25 02 F6 | 	mov	local04, local09
1b748     0F 25 02 F1 | 	add	local04, local01
1b74c     12 33 C2 FA | 	rdbyte	local11, local04
1b750     2E 32 0E F2 | 	cmp	local11, #46 wz
1b754     38 00 90 5D |  if_ne	jmp	#LR__2336
1b758     02 2E 56 F2 | 	cmps	local09, #2 wc
1b75c     30 00 90 CD |  if_b	jmp	#LR__2336
1b760     17 39 02 F6 | 	mov	local14, local09
1b764     01 38 86 F1 | 	sub	local14, #1
1b768     0F 39 02 F1 | 	add	local14, local01
1b76c     1C 27 C2 FA | 	rdbyte	local05, local14
1b770     2F 26 0E F2 | 	cmp	local05, #47 wz
1b774     18 00 90 5D |  if_ne	jmp	#LR__2336
1b778     17 25 02 F6 | 	mov	local04, local09
1b77c     01 24 86 F1 | 	sub	local04, #1
1b780     0F 25 02 F1 | 	add	local04, local01
1b784     12 01 48 FC | 	wrbyte	#0, local04
1b788     02 2E 86 F1 | 	sub	local09, #2
1b78c     88 FF 9F FD | 	jmp	#LR__2335
1b790                 | LR__2336
1b790     1A FB 01 F6 | 	mov	result1, local12
1b794     1C 00 90 FD | 	jmp	#LR__2340
1b798                 | LR__2337
1b798                 | LR__2338
1b798     01 2A 06 F1 | 	add	local07, #1
1b79c     2C FE 9F FD | 	jmp	#LR__2327
1b7a0                 | LR__2339
1b7a0     03 00 00 FF 
1b7a4     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1b7a8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b7ac     03 00 00 FF 
1b7b0     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1b7b4                 | LR__2340
1b7b4     A7 F0 03 F6 | 	mov	ptra, fp
1b7b8     B2 00 A0 FD | 	call	#popregs_
1b7bc                 | __system____getvfsforfile_ret
1b7bc     2D 00 64 FD | 	ret
1b7c0                 | 
1b7c0                 | __system___basic_open
1b7c0     05 4A 05 F6 | 	mov	COUNT_, #5
1b7c4     A8 00 A0 FD | 	call	#pushregs_
1b7c8     0A 1F 02 F6 | 	mov	local01, arg02
1b7cc     0B 21 02 F6 | 	mov	local02, arg03
1b7d0     0C 23 02 F6 | 	mov	local03, arg04
1b7d4     00 24 06 F6 | 	mov	local04, #0
1b7d8     98 46 B0 FD | 	call	#__system____getftab
1b7dc     FD 26 0A F6 | 	mov	local05, result1 wz
1b7e0     18 00 90 5D |  if_ne	jmp	#LR__2350
1b7e4     EE 12 02 F6 | 	mov	arg01, abortchain
1b7e8     0C 14 06 F6 | 	mov	arg02, #12
1b7ec     01 16 06 F6 | 	mov	arg03, #1
1b7f0     DA 00 A0 FD | 	call	#__longjmp
1b7f4     01 FA 65 F6 | 	neg	result1, #1
1b7f8     14 01 90 FD | 	jmp	#LR__2359
1b7fc                 | LR__2350
1b7fc     08 26 06 F1 | 	add	local05, #8
1b800     13 FB 09 FB | 	rdlong	result1, local05 wz
1b804     08 26 86 F1 | 	sub	local05, #8
1b808     13 13 02 56 |  if_ne	mov	arg01, local05
1b80c     F4 3D B0 5D |  if_ne	call	#__system___closeraw
1b810     00 1E 0E F2 | 	cmp	local01, #0 wz
1b814     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1b818     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1b81c     3C 00 90 AD |  if_e	jmp	#LR__2352
1b820     0C 12 06 F6 | 	mov	arg01, #12
1b824     E0 32 B0 FD | 	call	#__system___gc_alloc_managed
1b828     FD 24 0A F6 | 	mov	local04, result1 wz
1b82c     18 00 90 5D |  if_ne	jmp	#LR__2351
1b830     EE 12 02 F6 | 	mov	arg01, abortchain
1b834     07 14 06 F6 | 	mov	arg02, #7
1b838     01 16 06 F6 | 	mov	arg03, #1
1b83c     DA 00 A0 FD | 	call	#__longjmp
1b840     01 FA 65 F6 | 	neg	result1, #1
1b844     C8 00 90 FD | 	jmp	#LR__2359
1b848                 | LR__2351
1b848     12 01 68 FC | 	wrlong	#0, local04
1b84c     04 24 06 F1 | 	add	local04, #4
1b850     12 01 68 FC | 	wrlong	#0, local04
1b854     04 24 86 F1 | 	sub	local04, #4
1b858     13 25 62 FC | 	wrlong	local04, local05
1b85c                 | LR__2352
1b85c     00 1E 0E F2 | 	cmp	local01, #0 wz
1b860     20 00 90 AD |  if_e	jmp	#LR__2353
1b864     12 1F 62 FC | 	wrlong	local01, local04
1b868     12 FB 01 F6 | 	mov	result1, local04
1b86c     00 60 03 FF 
1b870     00 FA 45 F5 | 	or	result1, ##113246208
1b874     1C 26 06 F1 | 	add	local05, #28
1b878     13 FB 61 FC | 	wrlong	result1, local05
1b87c     1C 26 86 F1 | 	sub	local05, #28
1b880     0C 00 90 FD | 	jmp	#LR__2354
1b884                 | LR__2353
1b884     1C 26 06 F1 | 	add	local05, #28
1b888     13 01 68 FC | 	wrlong	#0, local05
1b88c     1C 26 86 F1 | 	sub	local05, #28
1b890                 | LR__2354
1b890     00 20 0E F2 | 	cmp	local02, #0 wz
1b894     28 00 90 AD |  if_e	jmp	#LR__2355
1b898     04 24 06 F1 | 	add	local04, #4
1b89c     12 21 62 FC | 	wrlong	local02, local04
1b8a0     04 24 86 F1 | 	sub	local04, #4
1b8a4     12 FB 01 F6 | 	mov	result1, local04
1b8a8     00 68 03 FF 
1b8ac     00 FA 45 F5 | 	or	result1, ##114294784
1b8b0     20 26 06 F1 | 	add	local05, #32
1b8b4     13 FB 61 FC | 	wrlong	result1, local05
1b8b8     20 26 86 F1 | 	sub	local05, #32
1b8bc     0C 00 90 FD | 	jmp	#LR__2356
1b8c0                 | LR__2355
1b8c0     20 26 06 F1 | 	add	local05, #32
1b8c4     13 01 68 FC | 	wrlong	#0, local05
1b8c8     20 26 86 F1 | 	sub	local05, #32
1b8cc                 | LR__2356
1b8cc     00 22 0E F2 | 	cmp	local03, #0 wz
1b8d0     24 00 90 AD |  if_e	jmp	#LR__2357
1b8d4     08 24 06 F1 | 	add	local04, #8
1b8d8     12 23 62 FC | 	wrlong	local03, local04
1b8dc     08 24 86 F1 | 	sub	local04, #8
1b8e0     00 70 03 FF 
1b8e4     00 24 46 F5 | 	or	local04, ##115343360
1b8e8     24 26 06 F1 | 	add	local05, #36
1b8ec     13 25 62 FC | 	wrlong	local04, local05
1b8f0     24 26 86 F1 | 	sub	local05, #36
1b8f4     0C 00 90 FD | 	jmp	#LR__2358
1b8f8                 | LR__2357
1b8f8     24 26 06 F1 | 	add	local05, #36
1b8fc     13 01 68 FC | 	wrlong	#0, local05
1b900     24 26 86 F1 | 	sub	local05, #36
1b904                 | LR__2358
1b904     08 26 06 F1 | 	add	local05, #8
1b908     13 0F 68 FC | 	wrlong	#7, local05
1b90c     00 FA 05 F6 | 	mov	result1, #0
1b910                 | LR__2359
1b910     A7 F0 03 F6 | 	mov	ptra, fp
1b914     B2 00 A0 FD | 	call	#popregs_
1b918                 | __system___basic_open_ret
1b918     2D 00 64 FD | 	ret
1b91c                 | 
1b91c                 | __system___basic_open_string
1b91c     04 4A 05 F6 | 	mov	COUNT_, #4
1b920     A8 00 A0 FD | 	call	#pushregs_
1b924     0A 1F 02 F6 | 	mov	local01, arg02
1b928     0B 21 02 F6 | 	mov	local02, arg03
1b92c     44 45 B0 FD | 	call	#__system____getftab
1b930     FD 22 0A F6 | 	mov	local03, result1 wz
1b934     18 00 90 5D |  if_ne	jmp	#LR__2360
1b938     EE 12 02 F6 | 	mov	arg01, abortchain
1b93c     0C 14 06 F6 | 	mov	arg02, #12
1b940     01 16 06 F6 | 	mov	arg03, #1
1b944     DA 00 A0 FD | 	call	#__longjmp
1b948     01 FA 65 F6 | 	neg	result1, #1
1b94c     58 00 90 FD | 	jmp	#LR__2362
1b950                 | LR__2360
1b950     08 22 06 F1 | 	add	local03, #8
1b954     11 19 0A FB | 	rdlong	arg04, local03 wz
1b958     08 22 86 F1 | 	sub	local03, #8
1b95c     11 13 02 56 |  if_ne	mov	arg01, local03
1b960     A0 3C B0 5D |  if_ne	call	#__system___closeraw
1b964     0F 15 02 F6 | 	mov	arg02, local01
1b968     10 17 02 F6 | 	mov	arg03, local02
1b96c     11 13 02 F6 | 	mov	arg01, local03
1b970     B6 19 06 F6 | 	mov	arg04, #438
1b974     8C 39 B0 FD | 	call	#__system___openraw
1b978     FD 24 02 F6 | 	mov	local04, result1
1b97c     00 24 56 F2 | 	cmps	local04, #0 wc
1b980     20 00 90 3D |  if_ae	jmp	#LR__2361
1b984     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b988     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1b98c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b990     EE 12 02 F6 | 	mov	arg01, abortchain
1b994     01 16 06 F6 | 	mov	arg03, #1
1b998     DA 00 A0 FD | 	call	#__longjmp
1b99c     01 FA 65 F6 | 	neg	result1, #1
1b9a0     04 00 90 FD | 	jmp	#LR__2362
1b9a4                 | LR__2361
1b9a4     12 FB 01 F6 | 	mov	result1, local04
1b9a8                 | LR__2362
1b9a8     A7 F0 03 F6 | 	mov	ptra, fp
1b9ac     B2 00 A0 FD | 	call	#popregs_
1b9b0                 | __system___basic_open_string_ret
1b9b0     2D 00 64 FD | 	ret
1b9b4                 | 
1b9b4                 | __system___basic_print_nl
1b9b4     0A 14 06 F6 | 	mov	arg02, #10
1b9b8     00 16 06 F6 | 	mov	arg03, #0
1b9bc     08 00 B0 FD | 	call	#__system___basic_print_char
1b9c0     01 FA 05 F6 | 	mov	result1, #1
1b9c4                 | __system___basic_print_nl_ret
1b9c4     2D 00 64 FD | 	ret
1b9c8                 | 
1b9c8                 | __system___basic_print_char
1b9c8     03 4A 05 F6 | 	mov	COUNT_, #3
1b9cc     A8 00 A0 FD | 	call	#pushregs_
1b9d0     0A 1F 02 F6 | 	mov	local01, arg02
1b9d4     F0 4B B0 FD | 	call	#__system___gettxfunc
1b9d8     FD 20 0A F6 | 	mov	local02, result1 wz
1b9dc     00 FA 05 A6 |  if_e	mov	result1, #0
1b9e0     30 00 90 AD |  if_e	jmp	#LR__2370
1b9e4     10 23 02 F6 | 	mov	local03, local02
1b9e8     13 20 46 F7 | 	zerox	local02, #19
1b9ec     14 22 46 F0 | 	shr	local03, #20
1b9f0     02 22 66 F0 | 	shl	local03, #2
1b9f4     ED 22 02 F1 | 	add	local03, __methods__
1b9f8     11 23 02 FB | 	rdlong	local03, local03
1b9fc     0F 13 02 F6 | 	mov	arg01, local01
1ba00     F2 1E 02 F6 | 	mov	local01, objptr
1ba04     10 E5 01 F6 | 	mov	objptr, local02
1ba08     2D 22 62 FD | 	call	local03
1ba0c     0F E5 01 F6 | 	mov	objptr, local01
1ba10     01 FA 05 F6 | 	mov	result1, #1
1ba14                 | LR__2370
1ba14     A7 F0 03 F6 | 	mov	ptra, fp
1ba18     B2 00 A0 FD | 	call	#popregs_
1ba1c                 | __system___basic_print_char_ret
1ba1c     2D 00 64 FD | 	ret
1ba20                 | 
1ba20                 | __system___basic_print_string
1ba20     03 4A 05 F6 | 	mov	COUNT_, #3
1ba24     A8 00 A0 FD | 	call	#pushregs_
1ba28     0A 1F 02 F6 | 	mov	local01, arg02
1ba2c     0B 21 02 F6 | 	mov	local02, arg03
1ba30     94 4B B0 FD | 	call	#__system___gettxfunc
1ba34     FD 22 0A F6 | 	mov	local03, result1 wz
1ba38     00 FA 05 A6 |  if_e	mov	result1, #0
1ba3c     18 00 90 AD |  if_e	jmp	#LR__2380
1ba40     00 1E 0E F2 | 	cmp	local01, #0 wz
1ba44     00 FA 05 A6 |  if_e	mov	result1, #0
1ba48     11 13 02 56 |  if_ne	mov	arg01, local03
1ba4c     10 15 02 56 |  if_ne	mov	arg02, local02
1ba50     0F 17 02 56 |  if_ne	mov	arg03, local01
1ba54     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1ba58                 | LR__2380
1ba58     A7 F0 03 F6 | 	mov	ptra, fp
1ba5c     B2 00 A0 FD | 	call	#popregs_
1ba60                 | __system___basic_print_string_ret
1ba60     2D 00 64 FD | 	ret
1ba64                 | 
1ba64                 | __system___basic_print_integer
1ba64     04 4A 05 F6 | 	mov	COUNT_, #4
1ba68     A8 00 A0 FD | 	call	#pushregs_
1ba6c     0A 1F 02 F6 | 	mov	local01, arg02
1ba70     0B 21 02 F6 | 	mov	local02, arg03
1ba74     0C 23 02 F6 | 	mov	local03, arg04
1ba78     4C 4B B0 FD | 	call	#__system___gettxfunc
1ba7c     FD 24 0A F6 | 	mov	local04, result1 wz
1ba80     00 FA 05 A6 |  if_e	mov	result1, #0
1ba84     12 13 02 56 |  if_ne	mov	arg01, local04
1ba88     10 15 02 56 |  if_ne	mov	arg02, local02
1ba8c     0F 17 02 56 |  if_ne	mov	arg03, local01
1ba90     11 19 02 56 |  if_ne	mov	arg04, local03
1ba94     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1ba98     A7 F0 03 F6 | 	mov	ptra, fp
1ba9c     B2 00 A0 FD | 	call	#popregs_
1baa0                 | __system___basic_print_integer_ret
1baa0     2D 00 64 FD | 	ret
1baa4                 | 
1baa4                 | __system___basic_print_unsigned
1baa4     03 4A 05 F6 | 	mov	COUNT_, #3
1baa8     A8 00 A0 FD | 	call	#pushregs_
1baac     0A 1F 02 F6 | 	mov	local01, arg02
1bab0     0B 21 02 F6 | 	mov	local02, arg03
1bab4     0C 23 02 F6 | 	mov	local03, arg04
1bab8     0C 4B B0 FD | 	call	#__system___gettxfunc
1babc     FD 12 0A F6 | 	mov	arg01, result1 wz
1bac0     00 FA 05 A6 |  if_e	mov	result1, #0
1bac4     3A 20 26 54 |  if_ne	bith	local02, #58
1bac8     10 15 02 56 |  if_ne	mov	arg02, local02
1bacc     0F 17 02 56 |  if_ne	mov	arg03, local01
1bad0     11 19 02 56 |  if_ne	mov	arg04, local03
1bad4     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1bad8     A7 F0 03 F6 | 	mov	ptra, fp
1badc     B2 00 A0 FD | 	call	#popregs_
1bae0                 | __system___basic_print_unsigned_ret
1bae0     2D 00 64 FD | 	ret
1bae4                 | 
1bae4                 | __system___basic_get_char
1bae4     03 4A 05 F6 | 	mov	COUNT_, #3
1bae8     A8 00 A0 FD | 	call	#pushregs_
1baec     1C 4B B0 FD | 	call	#__system___getrxfunc
1baf0     FD 1E 0A F6 | 	mov	local01, result1 wz
1baf4     01 FA 65 A6 |  if_e	neg	result1, #1
1baf8     28 00 90 AD |  if_e	jmp	#LR__2390
1bafc     0F 21 02 F6 | 	mov	local02, local01
1bb00     13 1E 46 F7 | 	zerox	local01, #19
1bb04     14 20 46 F0 | 	shr	local02, #20
1bb08     02 20 66 F0 | 	shl	local02, #2
1bb0c     ED 20 02 F1 | 	add	local02, __methods__
1bb10     10 21 02 FB | 	rdlong	local02, local02
1bb14     F2 22 02 F6 | 	mov	local03, objptr
1bb18     0F E5 01 F6 | 	mov	objptr, local01
1bb1c     2D 20 62 FD | 	call	local02
1bb20     11 E5 01 F6 | 	mov	objptr, local03
1bb24                 | LR__2390
1bb24     A7 F0 03 F6 | 	mov	ptra, fp
1bb28     B2 00 A0 FD | 	call	#popregs_
1bb2c                 | __system___basic_get_char_ret
1bb2c     2D 00 64 FD | 	ret
1bb30                 | 
1bb30                 | __system___basic_get
1bb30     04 4A 05 F6 | 	mov	COUNT_, #4
1bb34     A8 00 A0 FD | 	call	#pushregs_
1bb38     0D 1F 02 F6 | 	mov	local01, arg05
1bb3c     0F 19 02 FD | 	qmul	arg04, local01
1bb40     09 21 02 F6 | 	mov	local02, arg01
1bb44     0B 23 02 F6 | 	mov	local03, arg03
1bb48     00 14 0E F2 | 	cmp	arg02, #0 wz
1bb4c     01 14 86 51 |  if_ne	sub	arg02, #1
1bb50     10 13 02 56 |  if_ne	mov	arg01, local02
1bb54     00 16 06 56 |  if_ne	mov	arg03, #0
1bb58     18 24 62 FD | 	getqx	local04
1bb5c     5C 41 B0 5D |  if_ne	call	#__system__lseek
1bb60     11 15 02 F6 | 	mov	arg02, local03
1bb64     12 17 02 F6 | 	mov	arg03, local04
1bb68     10 13 02 F6 | 	mov	arg01, local02
1bb6c     D4 40 B0 FD | 	call	#__system__read
1bb70     FD 24 02 F6 | 	mov	local04, result1
1bb74     01 24 56 F2 | 	cmps	local04, #1 wc
1bb78     10 00 90 CD |  if_b	jmp	#LR__2400
1bb7c     12 63 02 F6 | 	mov	muldiva_, local04
1bb80     0F 65 02 F6 | 	mov	muldivb_, local01
1bb84     BA 00 A0 FD | 	call	#divide_
1bb88     32 25 02 F6 | 	mov	local04, muldivb_
1bb8c                 | LR__2400
1bb8c     12 FB 01 F6 | 	mov	result1, local04
1bb90     A7 F0 03 F6 | 	mov	ptra, fp
1bb94     B2 00 A0 FD | 	call	#popregs_
1bb98                 | __system___basic_get_ret
1bb98     2D 00 64 FD | 	ret
1bb9c                 | 
1bb9c                 | __system____lockio
1bb9c     AC 4A B0 FD | 	call	#__system___getiolock_0442
1bba0     FD 12 02 F6 | 	mov	arg01, result1
1bba4     70 F1 BF FD | 	call	#__system___lockmem
1bba8     00 FA 05 F6 | 	mov	result1, #0
1bbac                 | __system____lockio_ret
1bbac     2D 00 64 FD | 	ret
1bbb0                 | 
1bbb0                 | __system____unlockio
1bbb0     98 4A B0 FD | 	call	#__system___getiolock_0442
1bbb4     FD 00 68 FC | 	wrlong	#0, result1
1bbb8     00 FA 05 F6 | 	mov	result1, #0
1bbbc                 | __system____unlockio_ret
1bbbc     2D 00 64 FD | 	ret
1bbc0                 | 
1bbc0                 | __system___fmtchar
1bbc0     00 4A 05 F6 | 	mov	COUNT_, #0
1bbc4     A8 00 A0 FD | 	call	#pushregs_
1bbc8     10 F0 07 F1 | 	add	ptra, #16
1bbcc     04 4E 05 F1 | 	add	fp, #4
1bbd0     A7 12 62 FC | 	wrlong	arg01, fp
1bbd4     04 4E 05 F1 | 	add	fp, #4
1bbd8     A7 14 62 FC | 	wrlong	arg02, fp
1bbdc     04 4E 05 F1 | 	add	fp, #4
1bbe0     A7 16 62 FC | 	wrlong	arg03, fp
1bbe4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1bbe8     A7 16 62 FC | 	wrlong	arg03, fp
1bbec     08 4E 85 F1 | 	sub	fp, #8
1bbf0     A7 12 02 FB | 	rdlong	arg01, fp
1bbf4     04 4E 05 F1 | 	add	fp, #4
1bbf8     A7 14 02 FB | 	rdlong	arg02, fp
1bbfc     04 4E 05 F1 | 	add	fp, #4
1bc00     A7 16 02 F6 | 	mov	arg03, fp
1bc04     0C 4E 85 F1 | 	sub	fp, #12
1bc08     0C 00 B0 FD | 	call	#__system___fmtstr
1bc0c     A7 F0 03 F6 | 	mov	ptra, fp
1bc10     B2 00 A0 FD | 	call	#popregs_
1bc14                 | __system___fmtchar_ret
1bc14     2D 00 64 FD | 	ret
1bc18                 | 
1bc18                 | __system___fmtstr
1bc18     09 4A 05 F6 | 	mov	COUNT_, #9
1bc1c     A8 00 A0 FD | 	call	#pushregs_
1bc20     09 1F 02 F6 | 	mov	local01, arg01
1bc24     0A 21 02 F6 | 	mov	local02, arg02
1bc28     0B 23 02 F6 | 	mov	local03, arg03
1bc2c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1bc30     11 13 02 F6 | 	mov	arg01, local03
1bc34     09 25 02 F6 | 	mov	local04, arg01
1bc38     97 06 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1bc3c                 | LR__2410
1bc3c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1bc40     01 24 06 51 |  if_ne	add	local04, #1
1bc44     F4 FF 9F 5D |  if_ne	jmp	#LR__2410
1bc48                 | LR__2411
1bc48     09 25 82 F1 | 	sub	local04, arg01
1bc4c     00 18 0E F2 | 	cmp	arg04, #0 wz
1bc50     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1bc54     10 15 02 F6 | 	mov	arg02, local02
1bc58     12 17 02 F6 | 	mov	arg03, local04
1bc5c     0F 13 02 F6 | 	mov	arg01, local01
1bc60     02 18 06 F6 | 	mov	arg04, #2
1bc64     00 46 B0 FD | 	call	#__system___fmtpad
1bc68     FD 26 02 F6 | 	mov	local05, result1
1bc6c     00 26 56 F2 | 	cmps	local05, #0 wc
1bc70     13 FB 01 C6 |  if_b	mov	result1, local05
1bc74     80 00 90 CD |  if_b	jmp	#LR__2414
1bc78     01 24 56 F2 | 	cmps	local04, #1 wc
1bc7c     50 00 90 CD |  if_b	jmp	#LR__2413
1bc80     12 29 02 F6 | 	mov	local06, local04
1bc84                 | LR__2412
1bc84     0F 2B 02 F6 | 	mov	local07, local01
1bc88     0F 2D 02 F6 | 	mov	local08, local01
1bc8c     13 2A 46 F7 | 	zerox	local07, #19
1bc90     14 2C 46 F0 | 	shr	local08, #20
1bc94     02 2C 66 F0 | 	shl	local08, #2
1bc98     ED 2C 02 F1 | 	add	local08, __methods__
1bc9c     16 2D 02 FB | 	rdlong	local08, local08
1bca0     11 13 C2 FA | 	rdbyte	arg01, local03
1bca4     F2 2E 02 F6 | 	mov	local09, objptr
1bca8     15 E5 01 F6 | 	mov	objptr, local07
1bcac     01 22 06 F1 | 	add	local03, #1
1bcb0     2D 2C 62 FD | 	call	local08
1bcb4     17 E5 01 F6 | 	mov	objptr, local09
1bcb8     FD 2E 02 F6 | 	mov	local09, result1
1bcbc     00 2E 56 F2 | 	cmps	local09, #0 wc
1bcc0     17 FB 01 C6 |  if_b	mov	result1, local09
1bcc4     30 00 90 CD |  if_b	jmp	#LR__2414
1bcc8     17 27 02 F1 | 	add	local05, local09
1bccc     ED 29 6E FB | 	djnz	local06, #LR__2412
1bcd0                 | LR__2413
1bcd0     10 15 02 F6 | 	mov	arg02, local02
1bcd4     12 17 02 F6 | 	mov	arg03, local04
1bcd8     0F 13 02 F6 | 	mov	arg01, local01
1bcdc     01 18 06 F6 | 	mov	arg04, #1
1bce0     84 45 B0 FD | 	call	#__system___fmtpad
1bce4     FD 2E 02 F6 | 	mov	local09, result1
1bce8     00 2E 56 F2 | 	cmps	local09, #0 wc
1bcec     17 FB 01 C6 |  if_b	mov	result1, local09
1bcf0     17 27 02 31 |  if_ae	add	local05, local09
1bcf4     13 FB 01 36 |  if_ae	mov	result1, local05
1bcf8                 | LR__2414
1bcf8     A7 F0 03 F6 | 	mov	ptra, fp
1bcfc     B2 00 A0 FD | 	call	#popregs_
1bd00                 | __system___fmtstr_ret
1bd00     2D 00 64 FD | 	ret
1bd04                 | 
1bd04                 | __system___fmtnum
1bd04     0B 4A 05 F6 | 	mov	COUNT_, #11
1bd08     A8 00 A0 FD | 	call	#pushregs_
1bd0c     09 1F 02 F6 | 	mov	local01, arg01
1bd10     0A 21 02 F6 | 	mov	local02, arg02
1bd14     0B 23 02 F6 | 	mov	local03, arg03
1bd18     0C 25 02 F6 | 	mov	local04, arg04
1bd1c     F8 27 02 F6 | 	mov	local05, ptra
1bd20     13 29 02 F6 | 	mov	local06, local05
1bd24     00 2A 06 F6 | 	mov	local07, #0
1bd28     10 2D 02 F6 | 	mov	local08, local02
1bd2c     10 2C 46 F0 | 	shr	local08, #16
1bd30     3F 2C 06 F5 | 	and	local08, #63
1bd34     10 2F E2 F8 | 	getbyte	local09, local02, #0
1bd38     10 31 02 F6 | 	mov	local10, local02
1bd3c     1A 30 46 F0 | 	shr	local10, #26
1bd40     03 30 06 F5 | 	and	local10, #3
1bd44     18 33 02 F6 | 	mov	local11, local10
1bd48     01 2C 56 F2 | 	cmps	local08, #1 wc
1bd4c     44 F0 07 F1 | 	add	ptra, #68
1bd50     01 2C 86 31 |  if_ae	sub	local08, #1
1bd54     41 2E 56 F2 | 	cmps	local09, #65 wc
1bd58     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1bd5c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1bd60     03 32 0E F2 | 	cmp	local11, #3 wz
1bd64     00 32 06 A6 |  if_e	mov	local11, #0
1bd68     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1bd6c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1bd70     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1bd74     00 32 0E F2 | 	cmp	local11, #0 wz
1bd78     4C 00 90 AD |  if_e	jmp	#LR__2423
1bd7c     01 2A 06 F6 | 	mov	local07, #1
1bd80     17 2D 0A F2 | 	cmp	local08, local09 wz
1bd84     18 00 90 5D |  if_ne	jmp	#LR__2421
1bd88     05 2C 6E FB | 	djnz	local08, #LR__2420
1bd8c     0F 13 02 F6 | 	mov	arg01, local01
1bd90     10 15 02 F6 | 	mov	arg02, local02
1bd94     23 16 06 F6 | 	mov	arg03, #35
1bd98     24 FE BF FD | 	call	#__system___fmtchar
1bd9c     88 00 90 FD | 	jmp	#LR__2427
1bda0                 | LR__2420
1bda0                 | LR__2421
1bda0     02 32 0E F2 | 	cmp	local11, #2 wz
1bda4     14 31 02 A6 |  if_e	mov	local10, local06
1bda8     01 28 06 A1 |  if_e	add	local06, #1
1bdac     18 41 48 AC |  if_e	wrbyte	#32, local10
1bdb0     14 00 90 AD |  if_e	jmp	#LR__2422
1bdb4     04 32 0E F2 | 	cmp	local11, #4 wz
1bdb8     14 5B 48 AC |  if_e	wrbyte	#45, local06
1bdbc     01 28 06 A1 |  if_e	add	local06, #1
1bdc0     14 57 48 5C |  if_ne	wrbyte	#43, local06
1bdc4     01 28 06 51 |  if_ne	add	local06, #1
1bdc8                 | LR__2422
1bdc8                 | LR__2423
1bdc8     14 13 02 F6 | 	mov	arg01, local06
1bdcc     11 15 02 F6 | 	mov	arg02, local03
1bdd0     12 17 02 F6 | 	mov	arg03, local04
1bdd4     16 19 02 F6 | 	mov	arg04, local08
1bdd8     00 1A 06 F6 | 	mov	arg05, #0
1bddc     1D 20 2E F4 | 	testbn	local02, #29 wz
1bde0     01 1A 06 56 |  if_ne	mov	arg05, #1
1bde4     48 45 B0 FD | 	call	#__system___uitoa
1bde8     FD 2A 02 F1 | 	add	local07, result1
1bdec     17 2B 5A F2 | 	cmps	local07, local09 wcz
1bdf0     24 00 90 ED |  if_be	jmp	#LR__2426
1bdf4     97 0E 48 FB | 	callpa	#(@LR__2425-@LR__2424)>>2,fcache_load_ptr_
1bdf8                 | LR__2424
1bdf8     17 31 02 F6 | 	mov	local10, local09
1bdfc     01 30 56 F2 | 	cmps	local10, #1 wc
1be00     01 2E 86 F1 | 	sub	local09, #1
1be04     14 31 02 36 |  if_ae	mov	local10, local06
1be08     01 28 06 31 |  if_ae	add	local06, #1
1be0c     18 47 48 3C |  if_ae	wrbyte	#35, local10
1be10     E4 FF 9F 3D |  if_ae	jmp	#LR__2424
1be14                 | LR__2425
1be14     14 01 48 FC | 	wrbyte	#0, local06
1be18                 | LR__2426
1be18     0F 13 02 F6 | 	mov	arg01, local01
1be1c     10 15 02 F6 | 	mov	arg02, local02
1be20     13 17 02 F6 | 	mov	arg03, local05
1be24     F0 FD BF FD | 	call	#__system___fmtstr
1be28                 | LR__2427
1be28     A7 F0 03 F6 | 	mov	ptra, fp
1be2c     B2 00 A0 FD | 	call	#popregs_
1be30                 | __system___fmtnum_ret
1be30     2D 00 64 FD | 	ret
1be34                 | 
1be34                 | __system___fmtfloat
1be34     10 4A 05 F6 | 	mov	COUNT_, #16
1be38     A8 00 A0 FD | 	call	#pushregs_
1be3c     24 F1 07 F1 | 	add	ptra, #292
1be40     04 4E 05 F1 | 	add	fp, #4
1be44     A7 12 62 FC | 	wrlong	arg01, fp
1be48     04 4E 05 F1 | 	add	fp, #4
1be4c     A7 14 62 FC | 	wrlong	arg02, fp
1be50     04 4E 05 F1 | 	add	fp, #4
1be54     A7 16 62 FC | 	wrlong	arg03, fp
1be58     04 4E 05 F1 | 	add	fp, #4
1be5c     A7 18 62 FC | 	wrlong	arg04, fp
1be60     0C 4E 05 F1 | 	add	fp, #12
1be64     A7 14 68 FC | 	wrlong	#10, fp
1be68     08 4E 05 F1 | 	add	fp, #8
1be6c     A7 00 68 FC | 	wrlong	#0, fp
1be70     08 4E 05 F1 | 	add	fp, #8
1be74     A7 00 68 FC | 	wrlong	#0, fp
1be78     08 4E 05 F1 | 	add	fp, #8
1be7c     A7 00 68 FC | 	wrlong	#0, fp
1be80     04 4E 05 F1 | 	add	fp, #4
1be84     A7 04 68 FC | 	wrlong	#2, fp
1be88     04 4E 05 F1 | 	add	fp, #4
1be8c     A7 00 68 FC | 	wrlong	#0, fp
1be90     04 4E 05 F1 | 	add	fp, #4
1be94     A7 00 68 FC | 	wrlong	#0, fp
1be98     04 4E 05 F1 | 	add	fp, #4
1be9c     A7 00 68 FC | 	wrlong	#0, fp
1bea0     04 4E 05 F1 | 	add	fp, #4
1bea4     A7 00 68 FC | 	wrlong	#0, fp
1bea8     18 4E 05 F1 | 	add	fp, #24
1beac     A7 00 68 FC | 	wrlong	#0, fp
1beb0     68 4E 05 F1 | 	add	fp, #104
1beb4     A7 1E 02 F6 | 	mov	local01, fp
1beb8     08 4E 85 F1 | 	sub	fp, #8
1bebc     A7 1E 62 FC | 	wrlong	local01, fp
1bec0     04 4E 05 F1 | 	add	fp, #4
1bec4     A7 1E 62 FC | 	wrlong	local01, fp
1bec8     BC 4E 85 F1 | 	sub	fp, #188
1becc     A7 1E 02 FB | 	rdlong	local01, fp
1bed0     10 1E 46 F0 | 	shr	local01, #16
1bed4     3F 1E 06 F5 | 	and	local01, #63
1bed8     B0 4E 05 F1 | 	add	fp, #176
1bedc     A7 1E 62 FC | 	wrlong	local01, fp
1bee0     B0 4E 85 F1 | 	sub	fp, #176
1bee4     A7 1E 02 FB | 	rdlong	local01, fp
1bee8     1C 1E 46 F0 | 	shr	local01, #28
1beec     01 1E 06 F5 | 	and	local01, #1
1bef0     08 4F 05 F1 | 	add	fp, #264
1bef4     A7 1E 62 FC | 	wrlong	local01, fp
1bef8     58 4E 85 F1 | 	sub	fp, #88
1befc     A7 1E 0A FB | 	rdlong	local01, fp wz
1bf00     B8 4E 85 F1 | 	sub	fp, #184
1bf04     3C 00 90 5D |  if_ne	jmp	#LR__2431
1bf08     10 4E 05 F1 | 	add	fp, #16
1bf0c     A7 1E 02 FB | 	rdlong	local01, fp
1bf10     10 4E 85 F1 | 	sub	fp, #16
1bf14     61 1E 0E F2 | 	cmp	local01, #97 wz
1bf18     18 00 90 5D |  if_ne	jmp	#LR__2430
1bf1c     B8 4E 05 F1 | 	add	fp, #184
1bf20     A7 1A 68 FC | 	wrlong	#13, fp
1bf24     84 4E 85 F1 | 	sub	fp, #132
1bf28     A7 02 68 FC | 	wrlong	#1, fp
1bf2c     34 4E 85 F1 | 	sub	fp, #52
1bf30     24 00 90 FD | 	jmp	#LR__2432
1bf34                 | LR__2430
1bf34     B8 4E 05 F1 | 	add	fp, #184
1bf38     A7 0C 68 FC | 	wrlong	#6, fp
1bf3c     B8 4E 85 F1 | 	sub	fp, #184
1bf40     14 00 90 FD | 	jmp	#LR__2432
1bf44                 | LR__2431
1bf44     B8 4E 05 F1 | 	add	fp, #184
1bf48     A7 1E 02 FB | 	rdlong	local01, fp
1bf4c     01 1E 86 F1 | 	sub	local01, #1
1bf50     A7 1E 62 FC | 	wrlong	local01, fp
1bf54     B8 4E 85 F1 | 	sub	fp, #184
1bf58                 | LR__2432
1bf58     08 4E 05 F1 | 	add	fp, #8
1bf5c     A7 1E 02 FB | 	rdlong	local01, fp
1bf60     16 1E 46 F0 | 	shr	local01, #22
1bf64     03 1E 06 F5 | 	and	local01, #3
1bf68     04 4F 05 F1 | 	add	fp, #260
1bf6c     A7 1E 62 FC | 	wrlong	local01, fp
1bf70     04 4F 85 F1 | 	sub	fp, #260
1bf74     A7 1E 02 FB | 	rdlong	local01, fp
1bf78     1D 1E 46 F0 | 	shr	local01, #29
1bf7c     01 1E 06 F5 | 	and	local01, #1
1bf80     B4 4E 05 F1 | 	add	fp, #180
1bf84     A7 1E 62 FC | 	wrlong	local01, fp
1bf88     B4 4E 85 F1 | 	sub	fp, #180
1bf8c     A7 1E 02 FB | 	rdlong	local01, fp
1bf90     0F 1F EA F8 | 	getbyte	local01, local01, #1
1bf94     60 4E 05 F1 | 	add	fp, #96
1bf98     A7 1E 62 FC | 	wrlong	local01, fp
1bf9c     60 4E 85 F1 | 	sub	fp, #96
1bfa0     A7 1E 02 FB | 	rdlong	local01, fp
1bfa4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1bfa8     64 4E 05 F1 | 	add	fp, #100
1bfac     A7 1E 62 FC | 	wrlong	local01, fp
1bfb0     00 1E 06 F6 | 	mov	local01, #0
1bfb4     5C 4E 85 F1 | 	sub	fp, #92
1bfb8     A7 1A 02 FB | 	rdlong	arg05, fp
1bfbc     65 1A 0E F2 | 	cmp	arg05, #101 wz
1bfc0     01 1E 06 A6 |  if_e	mov	local01, #1
1bfc4     14 4E 05 F1 | 	add	fp, #20
1bfc8     A7 1E 62 FC | 	wrlong	local01, fp
1bfcc     98 4E 05 F1 | 	add	fp, #152
1bfd0     A7 20 0A FB | 	rdlong	local02, fp wz
1bfd4     45 1E 06 56 |  if_ne	mov	local01, #69
1bfd8     65 1E 06 A6 |  if_e	mov	local01, #101
1bfdc     8C 4E 85 F1 | 	sub	fp, #140
1bfe0     A7 1E 62 FC | 	wrlong	local01, fp
1bfe4     20 4E 85 F1 | 	sub	fp, #32
1bfe8     A7 1E 02 FB | 	rdlong	local01, fp
1bfec     10 4E 85 F1 | 	sub	fp, #16
1bff0     61 1E 0E F2 | 	cmp	local01, #97 wz
1bff4     4C 00 90 5D |  if_ne	jmp	#LR__2433
1bff8     24 4E 05 F1 | 	add	fp, #36
1bffc     A7 02 68 FC | 	wrlong	#1, fp
1c000     98 4E 05 F1 | 	add	fp, #152
1c004     A7 20 0A FB | 	rdlong	local02, fp wz
1c008     50 1E 06 56 |  if_ne	mov	local01, #80
1c00c     70 1E 06 A6 |  if_e	mov	local01, #112
1c010     8C 4E 85 F1 | 	sub	fp, #140
1c014     A7 1E 62 FC | 	wrlong	local01, fp
1c018     14 4E 85 F1 | 	sub	fp, #20
1c01c     A7 04 68 FC | 	wrlong	#2, fp
1c020     1C 4E 05 F1 | 	add	fp, #28
1c024     A7 02 68 FC | 	wrlong	#1, fp
1c028     84 4E 05 F1 | 	add	fp, #132
1c02c     A7 20 0A FB | 	rdlong	local02, fp wz
1c030     58 1E 06 56 |  if_ne	mov	local01, #88
1c034     78 1E 06 A6 |  if_e	mov	local01, #120
1c038     7C 4E 85 F1 | 	sub	fp, #124
1c03c     A7 1E 62 FC | 	wrlong	local01, fp
1c040     40 4E 85 F1 | 	sub	fp, #64
1c044                 | LR__2433
1c044     10 4E 05 F1 | 	add	fp, #16
1c048     A7 1E 02 FB | 	rdlong	local01, fp
1c04c     10 4E 85 F1 | 	sub	fp, #16
1c050     23 1E 0E F2 | 	cmp	local01, #35 wz
1c054     3C 00 90 5D |  if_ne	jmp	#LR__2436
1c058     48 4E 05 F1 | 	add	fp, #72
1c05c     A7 02 68 FC | 	wrlong	#1, fp
1c060     C8 4E 05 F1 | 	add	fp, #200
1c064     A7 1E 0A FB | 	rdlong	local01, fp wz
1c068     10 4F 85 F1 | 	sub	fp, #272
1c06c     18 00 90 AD |  if_e	jmp	#LR__2434
1c070     10 4E 05 F1 | 	add	fp, #16
1c074     A7 CC 68 FC | 	wrlong	#102, fp
1c078     00 4F 05 F1 | 	add	fp, #256
1c07c     A7 00 68 FC | 	wrlong	#0, fp
1c080     10 4F 85 F1 | 	sub	fp, #272
1c084     0C 00 90 FD | 	jmp	#LR__2435
1c088                 | LR__2434
1c088     10 4F 05 F1 | 	add	fp, #272
1c08c     A7 02 68 FC | 	wrlong	#1, fp
1c090     10 4F 85 F1 | 	sub	fp, #272
1c094                 | LR__2435
1c094                 | LR__2436
1c094     08 4E 05 F1 | 	add	fp, #8
1c098     A7 1E 02 FB | 	rdlong	local01, fp
1c09c     1A 1E 46 F0 | 	shr	local01, #26
1c0a0     03 1E 06 F5 | 	and	local01, #3
1c0a4     5C 4E 05 F1 | 	add	fp, #92
1c0a8     A7 1E 62 FC | 	wrlong	local01, fp
1c0ac     58 4E 85 F1 | 	sub	fp, #88
1c0b0     A7 FA 01 FB | 	rdlong	result1, fp
1c0b4     0C 4E 85 F1 | 	sub	fp, #12
1c0b8     1F FA 4D F0 | 	shr	result1, #31 wz
1c0bc     20 00 90 AD |  if_e	jmp	#LR__2437
1c0c0     2C 4E 05 F1 | 	add	fp, #44
1c0c4     A7 5A 68 FC | 	wrlong	#45, fp
1c0c8     20 4E 85 F1 | 	sub	fp, #32
1c0cc     A7 FA 01 FB | 	rdlong	result1, fp
1c0d0     1F FA E5 F4 | 	bitnot	result1, #31
1c0d4     A7 FA 61 FC | 	wrlong	result1, fp
1c0d8     0C 4E 85 F1 | 	sub	fp, #12
1c0dc     3C 00 90 FD | 	jmp	#LR__2439
1c0e0                 | LR__2437
1c0e0     64 4E 05 F1 | 	add	fp, #100
1c0e4     A7 1E 02 FB | 	rdlong	local01, fp
1c0e8     64 4E 85 F1 | 	sub	fp, #100
1c0ec     01 1E 0E F2 | 	cmp	local01, #1 wz
1c0f0     2C 4E 05 A1 |  if_e	add	fp, #44
1c0f4     A7 56 68 AC |  if_e	wrlong	#43, fp
1c0f8     2C 4E 85 A1 |  if_e	sub	fp, #44
1c0fc     1C 00 90 AD |  if_e	jmp	#LR__2438
1c100     64 4E 05 F1 | 	add	fp, #100
1c104     A7 1E 02 FB | 	rdlong	local01, fp
1c108     64 4E 85 F1 | 	sub	fp, #100
1c10c     02 1E 0E F2 | 	cmp	local01, #2 wz
1c110     2C 4E 05 A1 |  if_e	add	fp, #44
1c114     A7 40 68 AC |  if_e	wrlong	#32, fp
1c118     2C 4E 85 A1 |  if_e	sub	fp, #44
1c11c                 | LR__2438
1c11c                 | LR__2439
1c11c     08 4E 05 F1 | 	add	fp, #8
1c120     A7 1E 02 FB | 	rdlong	local01, fp
1c124     18 1E 46 F0 | 	shr	local01, #24
1c128     03 1E 06 F5 | 	and	local01, #3
1c12c     3C 4E 05 F1 | 	add	fp, #60
1c130     A7 1E 62 FC | 	wrlong	local01, fp
1c134     00 1E 06 F6 | 	mov	local01, #0
1c138     18 4E 85 F1 | 	sub	fp, #24
1c13c     A7 22 0A FB | 	rdlong	local03, fp wz
1c140     2C 4E 85 F1 | 	sub	fp, #44
1c144     18 00 90 5D |  if_ne	jmp	#LR__2440
1c148     1C 4E 05 F1 | 	add	fp, #28
1c14c     A7 24 02 FB | 	rdlong	local04, fp
1c150     1C 4E 85 F1 | 	sub	fp, #28
1c154     12 27 02 F6 | 	mov	local05, local04
1c158     0A 26 0E F2 | 	cmp	local05, #10 wz
1c15c     04 00 90 AD |  if_e	jmp	#LR__2441
1c160                 | LR__2440
1c160     01 1E 66 F5 | 	xor	local01, #1
1c164                 | LR__2441
1c164     3C 4E 05 F1 | 	add	fp, #60
1c168     A7 1E 62 FC | 	wrlong	local01, fp
1c16c     3C 4E 85 F1 | 	sub	fp, #60
1c170     00 1E 0E F2 | 	cmp	local01, #0 wz
1c174     0C 01 90 AD |  if_e	jmp	#LR__2443
1c178     44 4E 05 F1 | 	add	fp, #68
1c17c     A7 26 02 FB | 	rdlong	local05, fp
1c180     44 4E 85 F1 | 	sub	fp, #68
1c184     13 23 02 F6 | 	mov	local03, local05
1c188     02 22 0E F2 | 	cmp	local03, #2 wz
1c18c     F4 00 90 5D |  if_ne	jmp	#LR__2443
1c190     0C 4F 05 F1 | 	add	fp, #268
1c194     A7 28 02 FB | 	rdlong	local06, fp
1c198     0C 4F 85 F1 | 	sub	fp, #268
1c19c     14 25 02 F6 | 	mov	local04, local06
1c1a0     02 24 0E F2 | 	cmp	local04, #2 wz
1c1a4     DC 00 90 AD |  if_e	jmp	#LR__2443
1c1a8     C0 4E 05 F1 | 	add	fp, #192
1c1ac     A7 12 02 FB | 	rdlong	arg01, fp
1c1b0     94 4E 85 F1 | 	sub	fp, #148
1c1b4     A7 14 02 FB | 	rdlong	arg02, fp
1c1b8     14 4E 05 F1 | 	add	fp, #20
1c1bc     A7 16 02 FB | 	rdlong	arg03, fp
1c1c0     40 4E 85 F1 | 	sub	fp, #64
1c1c4     D0 43 B0 FD | 	call	#__system__emitsign_0402
1c1c8     14 4F 05 F1 | 	add	fp, #276
1c1cc     A7 FA 61 FC | 	wrlong	result1, fp
1c1d0     14 4F 85 F1 | 	sub	fp, #276
1c1d4     00 FA 55 F2 | 	cmps	result1, #0 wc
1c1d8     14 4F 05 C1 |  if_b	add	fp, #276
1c1dc     A7 FA 01 CB |  if_b	rdlong	result1, fp
1c1e0     14 4F 85 C1 |  if_b	sub	fp, #276
1c1e4     6C 0B 90 CD |  if_b	jmp	#LR__2493
1c1e8     C0 4E 05 F1 | 	add	fp, #192
1c1ec     A7 1E 02 FB | 	rdlong	local01, fp
1c1f0     54 4E 05 F1 | 	add	fp, #84
1c1f4     A7 26 02 FB | 	rdlong	local05, fp
1c1f8     13 23 02 F6 | 	mov	local03, local05
1c1fc     13 1F 02 F1 | 	add	local01, local05
1c200     54 4E 85 F1 | 	sub	fp, #84
1c204     A7 1E 62 FC | 	wrlong	local01, fp
1c208     58 4E 85 F1 | 	sub	fp, #88
1c20c     A7 1E 0A FB | 	rdlong	local01, fp wz
1c210     68 4E 85 F1 | 	sub	fp, #104
1c214     60 00 90 AD |  if_e	jmp	#LR__2442
1c218     68 4E 05 F1 | 	add	fp, #104
1c21c     A7 1E 02 FB | 	rdlong	local01, fp
1c220     AC 4E 05 F1 | 	add	fp, #172
1c224     A7 22 02 FB | 	rdlong	local03, fp
1c228     11 1F 82 F1 | 	sub	local01, local03
1c22c     AC 4E 85 F1 | 	sub	fp, #172
1c230     A7 1E 62 FC | 	wrlong	local01, fp
1c234     68 4E 85 F1 | 	sub	fp, #104
1c238     00 1E 56 F2 | 	cmps	local01, #0 wc
1c23c     68 4E 05 C1 |  if_b	add	fp, #104
1c240     A7 00 68 CC |  if_b	wrlong	#0, fp
1c244     68 4E 85 C1 |  if_b	sub	fp, #104
1c248     08 4E 05 F1 | 	add	fp, #8
1c24c     A7 1E 02 FB | 	rdlong	local01, fp
1c250     E8 1E 06 F4 | 	bitl	local01, #232
1c254     A7 1E 62 FC | 	wrlong	local01, fp
1c258     60 4E 05 F1 | 	add	fp, #96
1c25c     A7 26 02 FB | 	rdlong	local05, fp
1c260     13 23 02 F6 | 	mov	local03, local05
1c264     08 22 66 F0 | 	shl	local03, #8
1c268     11 1F 42 F5 | 	or	local01, local03
1c26c     60 4E 85 F1 | 	sub	fp, #96
1c270     A7 1E 62 FC | 	wrlong	local01, fp
1c274     08 4E 85 F1 | 	sub	fp, #8
1c278                 | LR__2442
1c278     3C 4E 05 F1 | 	add	fp, #60
1c27c     A7 00 68 FC | 	wrlong	#0, fp
1c280     3C 4E 85 F1 | 	sub	fp, #60
1c284                 | LR__2443
1c284     0C 4E 05 F1 | 	add	fp, #12
1c288     A7 12 02 FB | 	rdlong	arg01, fp
1c28c     0C 4E 85 F1 | 	sub	fp, #12
1c290     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1c294     FF FF 3F FF 
1c298     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1c29c     50 00 90 5D |  if_ne	jmp	#LR__2445
1c2a0     2C 4E 05 F1 | 	add	fp, #44
1c2a4     A7 1E 0A FB | 	rdlong	local01, fp wz
1c2a8     2C 4E 85 F1 | 	sub	fp, #44
1c2ac     24 00 90 AD |  if_e	jmp	#LR__2444
1c2b0     C0 4E 05 F1 | 	add	fp, #192
1c2b4     A7 20 02 FB | 	rdlong	local02, fp
1c2b8     10 23 02 F6 | 	mov	local03, local02
1c2bc     01 22 06 F1 | 	add	local03, #1
1c2c0     A7 22 62 FC | 	wrlong	local03, fp
1c2c4     94 4E 85 F1 | 	sub	fp, #148
1c2c8     A7 24 02 FB | 	rdlong	local04, fp
1c2cc     2C 4E 85 F1 | 	sub	fp, #44
1c2d0     10 25 42 FC | 	wrbyte	local04, local02
1c2d4                 | LR__2444
1c2d4     C0 4E 05 F1 | 	add	fp, #192
1c2d8     A7 12 02 FB | 	rdlong	arg01, fp
1c2dc     C0 4E 85 F1 | 	sub	fp, #192
1c2e0     51 01 00 FF 
1c2e4     5A 14 06 F6 | 	mov	arg02, ##@LR__4371
1c2e8     E0 E9 BF FD | 	call	#__system____builtin_strcpy
1c2ec     A4 08 90 FD | 	jmp	#LR__2481
1c2f0                 | LR__2445
1c2f0     0C 4E 05 F1 | 	add	fp, #12
1c2f4     A7 20 02 FB | 	rdlong	local02, fp
1c2f8     0C 4E 85 F1 | 	sub	fp, #12
1c2fc     10 13 02 F6 | 	mov	arg01, local02
1c300     38 1E B0 FD | 	call	#__system____builtin_ilogb
1c304     00 00 40 FF 
1c308     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1c30c     50 00 90 5D |  if_ne	jmp	#LR__2447
1c310     2C 4E 05 F1 | 	add	fp, #44
1c314     A7 1E 0A FB | 	rdlong	local01, fp wz
1c318     2C 4E 85 F1 | 	sub	fp, #44
1c31c     24 00 90 AD |  if_e	jmp	#LR__2446
1c320     C0 4E 05 F1 | 	add	fp, #192
1c324     A7 20 02 FB | 	rdlong	local02, fp
1c328     10 23 02 F6 | 	mov	local03, local02
1c32c     01 22 06 F1 | 	add	local03, #1
1c330     A7 22 62 FC | 	wrlong	local03, fp
1c334     94 4E 85 F1 | 	sub	fp, #148
1c338     A7 24 02 FB | 	rdlong	local04, fp
1c33c     2C 4E 85 F1 | 	sub	fp, #44
1c340     10 25 42 FC | 	wrbyte	local04, local02
1c344                 | LR__2446
1c344     C0 4E 05 F1 | 	add	fp, #192
1c348     A7 12 02 FB | 	rdlong	arg01, fp
1c34c     C0 4E 85 F1 | 	sub	fp, #192
1c350     51 01 00 FF 
1c354     5E 14 06 F6 | 	mov	arg02, ##@LR__4372
1c358     70 E9 BF FD | 	call	#__system____builtin_strcpy
1c35c     34 08 90 FD | 	jmp	#LR__2481
1c360                 | LR__2447
1c360     10 4E 05 F1 | 	add	fp, #16
1c364     A7 1E 02 FB | 	rdlong	local01, fp
1c368     10 4E 85 F1 | 	sub	fp, #16
1c36c     67 1E 0E F2 | 	cmp	local01, #103 wz
1c370     10 4E 05 51 |  if_ne	add	fp, #16
1c374     A7 22 02 5B |  if_ne	rdlong	local03, fp
1c378     10 4E 85 51 |  if_ne	sub	fp, #16
1c37c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1c380     94 01 90 5D |  if_ne	jmp	#LR__2452
1c384     0C 4E 05 F1 | 	add	fp, #12
1c388     A7 12 02 FB | 	rdlong	arg01, fp
1c38c     08 4E 05 F1 | 	add	fp, #8
1c390     A7 14 02 F6 | 	mov	arg02, fp
1c394     0C 4E 05 F1 | 	add	fp, #12
1c398     A7 16 02 F6 | 	mov	arg03, fp
1c39c     98 4E 05 F1 | 	add	fp, #152
1c3a0     A7 18 02 FB | 	rdlong	arg04, fp
1c3a4     9C 4E 85 F1 | 	sub	fp, #156
1c3a8     A7 1A 02 FB | 	rdlong	arg05, fp
1c3ac     1C 4E 85 F1 | 	sub	fp, #28
1c3b0     F0 3F B0 FD | 	call	#__system__disassemble_0400
1c3b4     10 4E 05 F1 | 	add	fp, #16
1c3b8     A7 1E 02 FB | 	rdlong	local01, fp
1c3bc     10 4E 85 F1 | 	sub	fp, #16
1c3c0     23 1E 0E F2 | 	cmp	local01, #35 wz
1c3c4     A0 00 90 5D |  if_ne	jmp	#LR__2449
1c3c8     20 4E 05 F1 | 	add	fp, #32
1c3cc     A7 1E 02 FB | 	rdlong	local01, fp
1c3d0     98 4E 05 F1 | 	add	fp, #152
1c3d4     A7 22 02 FB | 	rdlong	local03, fp
1c3d8     B8 4E 85 F1 | 	sub	fp, #184
1c3dc     11 1F 5A F2 | 	cmps	local01, local03 wcz
1c3e0     24 4E 05 11 |  if_a	add	fp, #36
1c3e4     A7 02 68 1C |  if_a	wrlong	#1, fp
1c3e8     24 4E 85 11 |  if_a	sub	fp, #36
1c3ec     A4 01 90 1D |  if_a	jmp	#LR__2455
1c3f0     20 4E 05 F1 | 	add	fp, #32
1c3f4     A7 1E 02 FB | 	rdlong	local01, fp
1c3f8     20 4E 85 F1 | 	sub	fp, #32
1c3fc     00 1E 56 F2 | 	cmps	local01, #0 wc
1c400     2C 00 90 3D |  if_ae	jmp	#LR__2448
1c404     B8 4E 05 F1 | 	add	fp, #184
1c408     A7 1E 02 FB | 	rdlong	local01, fp
1c40c     0F 1F 62 F6 | 	neg	local01, local01
1c410     98 4E 85 F1 | 	sub	fp, #152
1c414     A7 22 02 FB | 	rdlong	local03, fp
1c418     20 4E 85 F1 | 	sub	fp, #32
1c41c     0F 23 5A F2 | 	cmps	local03, local01 wcz
1c420     24 4E 05 E1 |  if_be	add	fp, #36
1c424     A7 02 68 EC |  if_be	wrlong	#1, fp
1c428     24 4E 85 E1 |  if_be	sub	fp, #36
1c42c     64 01 90 FD | 	jmp	#LR__2455
1c430                 | LR__2448
1c430     20 4E 05 F1 | 	add	fp, #32
1c434     A7 1E 02 FB | 	rdlong	local01, fp
1c438     20 4E 85 F1 | 	sub	fp, #32
1c43c     01 1E 56 F2 | 	cmps	local01, #1 wc
1c440     50 01 90 CD |  if_b	jmp	#LR__2455
1c444     B8 4E 05 F1 | 	add	fp, #184
1c448     A7 1E 02 FB | 	rdlong	local01, fp
1c44c     98 4E 85 F1 | 	sub	fp, #152
1c450     A7 22 02 FB | 	rdlong	local03, fp
1c454     11 1F 82 F1 | 	sub	local01, local03
1c458     98 4E 05 F1 | 	add	fp, #152
1c45c     A7 1E 62 FC | 	wrlong	local01, fp
1c460     B8 4E 85 F1 | 	sub	fp, #184
1c464     2C 01 90 FD | 	jmp	#LR__2455
1c468                 | LR__2449
1c468     00 1E 06 F6 | 	mov	local01, #0
1c46c     08 4E 05 F1 | 	add	fp, #8
1c470     A7 20 02 FB | 	rdlong	local02, fp
1c474     1C 20 46 F0 | 	shr	local02, #28
1c478     01 20 0E F5 | 	and	local02, #1 wz
1c47c     01 1E 06 A6 |  if_e	mov	local01, #1
1c480     2C 4E 05 F1 | 	add	fp, #44
1c484     A7 1E 62 FC | 	wrlong	local01, fp
1c488     14 4E 85 F1 | 	sub	fp, #20
1c48c     A7 1E 02 FB | 	rdlong	local01, fp
1c490     98 4E 05 F1 | 	add	fp, #152
1c494     A7 22 02 FB | 	rdlong	local03, fp
1c498     B8 4E 85 F1 | 	sub	fp, #184
1c49c     11 1F 52 F2 | 	cmps	local01, local03 wc
1c4a0     18 00 90 3D |  if_ae	jmp	#LR__2450
1c4a4     20 4E 05 F1 | 	add	fp, #32
1c4a8     A7 24 02 FB | 	rdlong	local04, fp
1c4ac     20 4E 85 F1 | 	sub	fp, #32
1c4b0     FF FF 7F FF 
1c4b4     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1c4b8     10 00 90 3D |  if_ae	jmp	#LR__2451
1c4bc                 | LR__2450
1c4bc     24 4E 05 F1 | 	add	fp, #36
1c4c0     A7 02 68 FC | 	wrlong	#1, fp
1c4c4     24 4E 85 F1 | 	sub	fp, #36
1c4c8     C8 00 90 FD | 	jmp	#LR__2455
1c4cc                 | LR__2451
1c4cc     B8 4E 05 F1 | 	add	fp, #184
1c4d0     A7 24 02 FB | 	rdlong	local04, fp
1c4d4     98 4E 85 F1 | 	sub	fp, #152
1c4d8     A7 22 02 FB | 	rdlong	local03, fp
1c4dc     11 25 82 F1 | 	sub	local04, local03
1c4e0     98 4E 05 F1 | 	add	fp, #152
1c4e4     A7 24 62 FC | 	wrlong	local04, fp
1c4e8     AC 4E 85 F1 | 	sub	fp, #172
1c4ec     A7 12 02 FB | 	rdlong	arg01, fp
1c4f0     08 4E 05 F1 | 	add	fp, #8
1c4f4     A7 14 02 F6 | 	mov	arg02, fp
1c4f8     0C 4E 05 F1 | 	add	fp, #12
1c4fc     A7 16 02 F6 | 	mov	arg03, fp
1c500     12 19 62 F6 | 	neg	arg04, local04
1c504     04 4E 85 F1 | 	sub	fp, #4
1c508     A7 1A 02 FB | 	rdlong	arg05, fp
1c50c     1C 4E 85 F1 | 	sub	fp, #28
1c510     90 3E B0 FD | 	call	#__system__disassemble_0400
1c514     7C 00 90 FD | 	jmp	#LR__2455
1c518                 | LR__2452
1c518     24 4E 05 F1 | 	add	fp, #36
1c51c     A7 1E 0A FB | 	rdlong	local01, fp wz
1c520     24 4E 85 F1 | 	sub	fp, #36
1c524     34 00 90 AD |  if_e	jmp	#LR__2453
1c528     0C 4E 05 F1 | 	add	fp, #12
1c52c     A7 12 02 FB | 	rdlong	arg01, fp
1c530     08 4E 05 F1 | 	add	fp, #8
1c534     A7 14 02 F6 | 	mov	arg02, fp
1c538     0C 4E 05 F1 | 	add	fp, #12
1c53c     A7 16 02 F6 | 	mov	arg03, fp
1c540     98 4E 05 F1 | 	add	fp, #152
1c544     A7 18 02 FB | 	rdlong	arg04, fp
1c548     9C 4E 85 F1 | 	sub	fp, #156
1c54c     A7 1A 02 FB | 	rdlong	arg05, fp
1c550     1C 4E 85 F1 | 	sub	fp, #28
1c554     4C 3E B0 FD | 	call	#__system__disassemble_0400
1c558     38 00 90 FD | 	jmp	#LR__2454
1c55c                 | LR__2453
1c55c     0C 4E 05 F1 | 	add	fp, #12
1c560     A7 12 02 FB | 	rdlong	arg01, fp
1c564     08 4E 05 F1 | 	add	fp, #8
1c568     A7 14 02 F6 | 	mov	arg02, fp
1c56c     0C 4E 05 F1 | 	add	fp, #12
1c570     A7 16 02 F6 | 	mov	arg03, fp
1c574     98 4E 05 F1 | 	add	fp, #152
1c578     A7 24 02 FB | 	rdlong	local04, fp
1c57c     01 24 06 F1 | 	add	local04, #1
1c580     12 19 62 F6 | 	neg	arg04, local04
1c584     9C 4E 85 F1 | 	sub	fp, #156
1c588     A7 1A 02 FB | 	rdlong	arg05, fp
1c58c     1C 4E 85 F1 | 	sub	fp, #28
1c590     10 3E B0 FD | 	call	#__system__disassemble_0400
1c594                 | LR__2454
1c594                 | LR__2455
1c594     1C 4E 05 F1 | 	add	fp, #28
1c598     A7 1E 02 FB | 	rdlong	local01, fp
1c59c     1C 4E 85 F1 | 	sub	fp, #28
1c5a0     02 1E 0E F2 | 	cmp	local01, #2 wz
1c5a4     4C 00 90 5D |  if_ne	jmp	#LR__2458
1c5a8     1C 4E 05 F1 | 	add	fp, #28
1c5ac     A7 20 68 FC | 	wrlong	#16, fp
1c5b0     1C 4E 85 F1 | 	sub	fp, #28
1c5b4                 | LR__2456
1c5b4     14 4E 05 F1 | 	add	fp, #20
1c5b8     A7 1E 0A FB | 	rdlong	local01, fp wz
1c5bc     14 4E 85 F1 | 	sub	fp, #20
1c5c0     30 00 90 AD |  if_e	jmp	#LR__2457
1c5c4     14 4E 05 F1 | 	add	fp, #20
1c5c8     A7 22 02 FB | 	rdlong	local03, fp
1c5cc     14 4E 85 F1 | 	sub	fp, #20
1c5d0     00 80 00 FF 
1c5d4     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1c5d8     18 00 90 3D |  if_ae	jmp	#LR__2457
1c5dc     14 4E 05 F1 | 	add	fp, #20
1c5e0     A7 1E 02 FB | 	rdlong	local01, fp
1c5e4     01 1E 66 F0 | 	shl	local01, #1
1c5e8     A7 1E 62 FC | 	wrlong	local01, fp
1c5ec     14 4E 85 F1 | 	sub	fp, #20
1c5f0     C0 FF 9F FD | 	jmp	#LR__2456
1c5f4                 | LR__2457
1c5f4                 | LR__2458
1c5f4     70 4E 05 F1 | 	add	fp, #112
1c5f8     A7 12 02 F6 | 	mov	arg01, fp
1c5fc     5C 4E 85 F1 | 	sub	fp, #92
1c600     A7 14 02 FB | 	rdlong	arg02, fp
1c604     08 4E 05 F1 | 	add	fp, #8
1c608     A7 16 02 FB | 	rdlong	arg03, fp
1c60c     A0 4E 05 F1 | 	add	fp, #160
1c610     A7 1A 02 FB | 	rdlong	arg05, fp
1c614     BC 4E 85 F1 | 	sub	fp, #188
1c618     01 18 06 F6 | 	mov	arg04, #1
1c61c     10 3D B0 FD | 	call	#__system___uitoa
1c620     58 4E 05 F1 | 	add	fp, #88
1c624     A7 FA 61 FC | 	wrlong	result1, fp
1c628     38 4E 85 F1 | 	sub	fp, #56
1c62c     A7 1E 02 FB | 	rdlong	local01, fp
1c630     20 4E 85 F1 | 	sub	fp, #32
1c634     00 1E 56 F2 | 	cmps	local01, #0 wc
1c638     50 00 90 3D |  if_ae	jmp	#LR__2459
1c63c     60 4E 05 F1 | 	add	fp, #96
1c640     A7 5A 68 FC | 	wrlong	#45, fp
1c644     50 4E 05 F1 | 	add	fp, #80
1c648     A7 12 02 F6 | 	mov	arg01, fp
1c64c     90 4E 85 F1 | 	sub	fp, #144
1c650     A7 22 02 FB | 	rdlong	local03, fp
1c654     11 15 62 F6 | 	neg	arg02, local03
1c658     18 4E 05 F1 | 	add	fp, #24
1c65c     A7 18 02 FB | 	rdlong	arg04, fp
1c660     84 4E 05 F1 | 	add	fp, #132
1c664     A7 28 02 FB | 	rdlong	local06, fp
1c668     BC 4E 85 F1 | 	sub	fp, #188
1c66c     14 25 02 F6 | 	mov	local04, local06
1c670     0A 16 06 F6 | 	mov	arg03, #10
1c674     12 1B 02 F6 | 	mov	arg05, local04
1c678     B4 3C B0 FD | 	call	#__system___uitoa
1c67c     5C 4E 05 F1 | 	add	fp, #92
1c680     A7 FA 61 FC | 	wrlong	result1, fp
1c684     5C 4E 85 F1 | 	sub	fp, #92
1c688     48 00 90 FD | 	jmp	#LR__2460
1c68c                 | LR__2459
1c68c     60 4E 05 F1 | 	add	fp, #96
1c690     A7 56 68 FC | 	wrlong	#43, fp
1c694     50 4E 05 F1 | 	add	fp, #80
1c698     A7 12 02 F6 | 	mov	arg01, fp
1c69c     90 4E 85 F1 | 	sub	fp, #144
1c6a0     A7 14 02 FB | 	rdlong	arg02, fp
1c6a4     18 4E 05 F1 | 	add	fp, #24
1c6a8     A7 18 02 FB | 	rdlong	arg04, fp
1c6ac     84 4E 05 F1 | 	add	fp, #132
1c6b0     A7 28 02 FB | 	rdlong	local06, fp
1c6b4     BC 4E 85 F1 | 	sub	fp, #188
1c6b8     14 25 02 F6 | 	mov	local04, local06
1c6bc     0A 16 06 F6 | 	mov	arg03, #10
1c6c0     12 1B 02 F6 | 	mov	arg05, local04
1c6c4     68 3C B0 FD | 	call	#__system___uitoa
1c6c8     5C 4E 05 F1 | 	add	fp, #92
1c6cc     A7 FA 61 FC | 	wrlong	result1, fp
1c6d0     5C 4E 85 F1 | 	sub	fp, #92
1c6d4                 | LR__2460
1c6d4     24 4E 05 F1 | 	add	fp, #36
1c6d8     A7 1E 0A FB | 	rdlong	local01, fp wz
1c6dc     24 4E 85 F1 | 	sub	fp, #36
1c6e0     2C 00 90 AD |  if_e	jmp	#LR__2461
1c6e4     50 4E 05 F1 | 	add	fp, #80
1c6e8     A7 00 68 FC | 	wrlong	#0, fp
1c6ec     04 4E 85 F1 | 	sub	fp, #4
1c6f0     A7 00 68 FC | 	wrlong	#0, fp
1c6f4     6C 4E 05 F1 | 	add	fp, #108
1c6f8     A7 1E 02 FB | 	rdlong	local01, fp
1c6fc     01 1E 06 F1 | 	add	local01, #1
1c700     64 4E 85 F1 | 	sub	fp, #100
1c704     A7 1E 62 FC | 	wrlong	local01, fp
1c708     54 4E 85 F1 | 	sub	fp, #84
1c70c     88 00 90 FD | 	jmp	#LR__2464
1c710                 | LR__2461
1c710     20 4E 05 F1 | 	add	fp, #32
1c714     A7 1E 02 FB | 	rdlong	local01, fp
1c718     20 4E 85 F1 | 	sub	fp, #32
1c71c     00 1E 56 F2 | 	cmps	local01, #0 wc
1c720     40 00 90 3D |  if_ae	jmp	#LR__2462
1c724     20 4E 05 F1 | 	add	fp, #32
1c728     A7 20 02 FB | 	rdlong	local02, fp
1c72c     30 4E 05 F1 | 	add	fp, #48
1c730     A7 20 62 FC | 	wrlong	local02, fp
1c734     04 4E 85 F1 | 	sub	fp, #4
1c738     A7 20 62 FC | 	wrlong	local02, fp
1c73c     2C 4E 85 F1 | 	sub	fp, #44
1c740     A7 1E 02 FB | 	rdlong	local01, fp
1c744     98 4E 05 F1 | 	add	fp, #152
1c748     A7 22 02 FB | 	rdlong	local03, fp
1c74c     11 1F 02 F1 | 	add	local01, local03
1c750     01 1E 06 F1 | 	add	local01, #1
1c754     64 4E 85 F1 | 	sub	fp, #100
1c758     A7 1E 62 FC | 	wrlong	local01, fp
1c75c     54 4E 85 F1 | 	sub	fp, #84
1c760     34 00 90 FD | 	jmp	#LR__2463
1c764                 | LR__2462
1c764     4C 4E 05 F1 | 	add	fp, #76
1c768     A7 00 68 FC | 	wrlong	#0, fp
1c76c     2C 4E 85 F1 | 	sub	fp, #44
1c770     A7 1E 02 FB | 	rdlong	local01, fp
1c774     30 4E 05 F1 | 	add	fp, #48
1c778     A7 1E 62 FC | 	wrlong	local01, fp
1c77c     68 4E 05 F1 | 	add	fp, #104
1c780     A7 22 02 FB | 	rdlong	local03, fp
1c784     11 1F 02 F1 | 	add	local01, local03
1c788     01 1E 06 F1 | 	add	local01, #1
1c78c     64 4E 85 F1 | 	sub	fp, #100
1c790     A7 1E 62 FC | 	wrlong	local01, fp
1c794     54 4E 85 F1 | 	sub	fp, #84
1c798                 | LR__2463
1c798                 | LR__2464
1c798     54 4E 05 F1 | 	add	fp, #84
1c79c     A7 1E 02 FB | 	rdlong	local01, fp
1c7a0     08 4E 85 F1 | 	sub	fp, #8
1c7a4     A7 22 02 FB | 	rdlong	local03, fp
1c7a8     11 1F 82 F1 | 	sub	local01, local03
1c7ac     01 1E 06 F1 | 	add	local01, #1
1c7b0     24 4E 85 F1 | 	sub	fp, #36
1c7b4     A7 1E 62 FC | 	wrlong	local01, fp
1c7b8     04 4E 05 F1 | 	add	fp, #4
1c7bc     A7 1E 0A FB | 	rdlong	local01, fp wz
1c7c0     2C 4E 85 F1 | 	sub	fp, #44
1c7c4     28 4E 05 51 |  if_ne	add	fp, #40
1c7c8     A7 22 02 5B |  if_ne	rdlong	local03, fp
1c7cc     01 22 06 51 |  if_ne	add	local03, #1
1c7d0     A7 22 62 5C |  if_ne	wrlong	local03, fp
1c7d4     28 4E 85 51 |  if_ne	sub	fp, #40
1c7d8     1C 4E 05 F1 | 	add	fp, #28
1c7dc     A7 1E 02 FB | 	rdlong	local01, fp
1c7e0     1C 4E 85 F1 | 	sub	fp, #28
1c7e4     10 1E 0E F2 | 	cmp	local01, #16 wz
1c7e8     28 4E 05 A1 |  if_e	add	fp, #40
1c7ec     A7 1E 02 AB |  if_e	rdlong	local01, fp
1c7f0     02 1E 06 A1 |  if_e	add	local01, #2
1c7f4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1c7f8     28 4E 85 A1 |  if_e	sub	fp, #40
1c7fc     24 4E 05 F1 | 	add	fp, #36
1c800     A7 1E 0A FB | 	rdlong	local01, fp wz
1c804     24 4E 85 F1 | 	sub	fp, #36
1c808     28 00 90 AD |  if_e	jmp	#LR__2465
1c80c     28 4E 05 F1 | 	add	fp, #40
1c810     A7 1E 02 FB | 	rdlong	local01, fp
1c814     02 22 06 F6 | 	mov	local03, #2
1c818     34 4E 05 F1 | 	add	fp, #52
1c81c     A7 26 02 FB | 	rdlong	local05, fp
1c820     13 23 02 F1 | 	add	local03, local05
1c824     11 1F 02 F1 | 	add	local01, local03
1c828     34 4E 85 F1 | 	sub	fp, #52
1c82c     A7 1E 62 FC | 	wrlong	local01, fp
1c830     28 4E 85 F1 | 	sub	fp, #40
1c834                 | LR__2465
1c834     28 4E 05 F1 | 	add	fp, #40
1c838     A7 1E 02 FB | 	rdlong	local01, fp
1c83c     28 4E 85 F1 | 	sub	fp, #40
1c840     41 1E 56 F2 | 	cmps	local01, #65 wc
1c844     01 FA 65 36 |  if_ae	neg	result1, #1
1c848     08 05 90 3D |  if_ae	jmp	#LR__2493
1c84c     3C 4E 05 F1 | 	add	fp, #60
1c850     A7 1E 0A FB | 	rdlong	local01, fp wz
1c854     3C 4E 85 F1 | 	sub	fp, #60
1c858     60 00 90 AD |  if_e	jmp	#LR__2466
1c85c     C0 4E 05 F1 | 	add	fp, #192
1c860     A7 12 02 FB | 	rdlong	arg01, fp
1c864     94 4E 85 F1 | 	sub	fp, #148
1c868     A7 14 02 FB | 	rdlong	arg02, fp
1c86c     14 4E 05 F1 | 	add	fp, #20
1c870     A7 16 02 FB | 	rdlong	arg03, fp
1c874     40 4E 85 F1 | 	sub	fp, #64
1c878     1C 3D B0 FD | 	call	#__system__emitsign_0402
1c87c     18 4F 05 F1 | 	add	fp, #280
1c880     A7 FA 61 FC | 	wrlong	result1, fp
1c884     18 4F 85 F1 | 	sub	fp, #280
1c888     00 FA 55 F2 | 	cmps	result1, #0 wc
1c88c     18 4F 05 C1 |  if_b	add	fp, #280
1c890     A7 FA 01 CB |  if_b	rdlong	result1, fp
1c894     18 4F 85 C1 |  if_b	sub	fp, #280
1c898     B8 04 90 CD |  if_b	jmp	#LR__2493
1c89c     C0 4E 05 F1 | 	add	fp, #192
1c8a0     A7 1E 02 FB | 	rdlong	local01, fp
1c8a4     58 4E 05 F1 | 	add	fp, #88
1c8a8     A7 22 02 FB | 	rdlong	local03, fp
1c8ac     11 1F 02 F1 | 	add	local01, local03
1c8b0     58 4E 85 F1 | 	sub	fp, #88
1c8b4     A7 1E 62 FC | 	wrlong	local01, fp
1c8b8     C0 4E 85 F1 | 	sub	fp, #192
1c8bc                 | LR__2466
1c8bc     4C 4E 05 F1 | 	add	fp, #76
1c8c0     A7 1E 02 FB | 	rdlong	local01, fp
1c8c4     34 4E 85 F1 | 	sub	fp, #52
1c8c8     A7 1E 62 FC | 	wrlong	local01, fp
1c8cc     18 4E 85 F1 | 	sub	fp, #24
1c8d0     97 9E 48 FB | 	callpa	#(@LR__2472-@LR__2467)>>2,fcache_load_ptr_
1c8d4                 | LR__2467
1c8d4     18 4E 05 F1 | 	add	fp, #24
1c8d8     A7 20 02 FB | 	rdlong	local02, fp
1c8dc     3C 4E 05 F1 | 	add	fp, #60
1c8e0     A7 26 02 FB | 	rdlong	local05, fp
1c8e4     54 4E 85 F1 | 	sub	fp, #84
1c8e8     13 21 52 F2 | 	cmps	local02, local05 wc
1c8ec     20 01 90 3D |  if_ae	jmp	#LR__2473
1c8f0     18 4E 05 F1 | 	add	fp, #24
1c8f4     A7 28 02 FB | 	rdlong	local06, fp
1c8f8     18 4E 85 F1 | 	sub	fp, #24
1c8fc     00 28 56 F2 | 	cmps	local06, #0 wc
1c900     58 00 90 CD |  if_b	jmp	#LR__2468
1c904     18 4E 05 F1 | 	add	fp, #24
1c908     A7 28 02 FB | 	rdlong	local06, fp
1c90c     40 4E 05 F1 | 	add	fp, #64
1c910     A7 2A 02 FB | 	rdlong	local07, fp
1c914     58 4E 85 F1 | 	sub	fp, #88
1c918     15 29 52 F2 | 	cmps	local06, local07 wc
1c91c     3C 00 90 3D |  if_ae	jmp	#LR__2468
1c920     C0 4E 05 F1 | 	add	fp, #192
1c924     A7 2C 02 FB | 	rdlong	local08, fp
1c928     16 2B 02 F6 | 	mov	local07, local08
1c92c     01 2A 06 F1 | 	add	local07, #1
1c930     A7 2A 62 FC | 	wrlong	local07, fp
1c934     A8 4E 85 F1 | 	sub	fp, #168
1c938     A7 2A 02 FB | 	rdlong	local07, fp
1c93c     15 2F 02 F6 | 	mov	local09, local07
1c940     58 4E 05 F1 | 	add	fp, #88
1c944     A7 30 02 F6 | 	mov	local10, fp
1c948     A7 2E 02 F1 | 	add	local09, fp
1c94c     17 33 C2 FA | 	rdbyte	local11, local09
1c950     16 33 42 FC | 	wrbyte	local11, local08
1c954     70 4E 85 F1 | 	sub	fp, #112
1c958     20 00 90 FD | 	jmp	#LR__2469
1c95c                 | LR__2468
1c95c     C0 4E 05 F1 | 	add	fp, #192
1c960     A7 2C 02 FB | 	rdlong	local08, fp
1c964     16 2F 02 F6 | 	mov	local09, local08
1c968     01 2E 06 F1 | 	add	local09, #1
1c96c     A7 2E 62 FC | 	wrlong	local09, fp
1c970     C0 4E 85 F1 | 	sub	fp, #192
1c974     30 2E 06 F6 | 	mov	local09, #48
1c978     16 61 48 FC | 	wrbyte	#48, local08
1c97c                 | LR__2469
1c97c     18 4E 05 F1 | 	add	fp, #24
1c980     A7 28 02 FB | 	rdlong	local06, fp
1c984     38 4E 05 F1 | 	add	fp, #56
1c988     A7 34 02 FB | 	rdlong	local12, fp
1c98c     50 4E 85 F1 | 	sub	fp, #80
1c990     1A 29 0A F2 | 	cmp	local06, local12 wz
1c994     5C 00 90 5D |  if_ne	jmp	#LR__2471
1c998     10 4F 05 F1 | 	add	fp, #272
1c99c     A7 2A 02 FB | 	rdlong	local07, fp
1c9a0     10 4F 85 F1 | 	sub	fp, #272
1c9a4     15 2F 0A F6 | 	mov	local09, local07 wz
1c9a8     28 00 90 5D |  if_ne	jmp	#LR__2470
1c9ac     54 4E 05 F1 | 	add	fp, #84
1c9b0     A7 32 02 FB | 	rdlong	local11, fp
1c9b4     19 31 02 F6 | 	mov	local10, local11
1c9b8     01 30 86 F1 | 	sub	local10, #1
1c9bc     3C 4E 85 F1 | 	sub	fp, #60
1c9c0     A7 36 02 FB | 	rdlong	local13, fp
1c9c4     18 4E 85 F1 | 	sub	fp, #24
1c9c8     1B 39 02 F6 | 	mov	local14, local13
1c9cc     18 39 52 F2 | 	cmps	local14, local10 wc
1c9d0     20 00 90 3D |  if_ae	jmp	#LR__2471
1c9d4                 | LR__2470
1c9d4     C0 4E 05 F1 | 	add	fp, #192
1c9d8     A7 2C 02 FB | 	rdlong	local08, fp
1c9dc     16 35 02 F6 | 	mov	local12, local08
1c9e0     01 34 06 F1 | 	add	local12, #1
1c9e4     A7 34 62 FC | 	wrlong	local12, fp
1c9e8     C0 4E 85 F1 | 	sub	fp, #192
1c9ec     2E 2E 06 F6 | 	mov	local09, #46
1c9f0     16 5D 48 FC | 	wrbyte	#46, local08
1c9f4                 | LR__2471
1c9f4     18 4E 05 F1 | 	add	fp, #24
1c9f8     A7 3A 02 FB | 	rdlong	local15, fp
1c9fc     1D 35 02 F6 | 	mov	local12, local15
1ca00     01 34 06 F1 | 	add	local12, #1
1ca04     A7 34 62 FC | 	wrlong	local12, fp
1ca08     18 4E 85 F1 | 	sub	fp, #24
1ca0c     C4 FE 9F FD | 	jmp	#LR__2467
1ca10                 | LR__2472
1ca10                 | LR__2473
1ca10     34 4E 05 F1 | 	add	fp, #52
1ca14     A7 1E 0A FB | 	rdlong	local01, fp wz
1ca18     34 4E 85 F1 | 	sub	fp, #52
1ca1c     A0 00 90 AD |  if_e	jmp	#LR__2477
1ca20     C0 4E 05 F1 | 	add	fp, #192
1ca24     A7 1E 02 FB | 	rdlong	local01, fp
1ca28     01 1E 86 F1 | 	sub	local01, #1
1ca2c     A7 1E 62 FC | 	wrlong	local01, fp
1ca30     C0 4E 85 F1 | 	sub	fp, #192
1ca34     97 26 48 FB | 	callpa	#(@LR__2475-@LR__2474)>>2,fcache_load_ptr_
1ca38                 | LR__2474
1ca38     C0 4E 05 F1 | 	add	fp, #192
1ca3c     A7 1E 02 FB | 	rdlong	local01, fp
1ca40     04 4E 05 F1 | 	add	fp, #4
1ca44     A7 22 02 FB | 	rdlong	local03, fp
1ca48     C4 4E 85 F1 | 	sub	fp, #196
1ca4c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1ca50     30 00 90 ED |  if_be	jmp	#LR__2476
1ca54     C0 4E 05 F1 | 	add	fp, #192
1ca58     A7 28 02 FB | 	rdlong	local06, fp
1ca5c     C0 4E 85 F1 | 	sub	fp, #192
1ca60     14 25 C2 FA | 	rdbyte	local04, local06
1ca64     30 24 0E F2 | 	cmp	local04, #48 wz
1ca68     18 00 90 5D |  if_ne	jmp	#LR__2476
1ca6c     C0 4E 05 F1 | 	add	fp, #192
1ca70     A7 1E 02 FB | 	rdlong	local01, fp
1ca74     01 1E 86 F1 | 	sub	local01, #1
1ca78     A7 1E 62 FC | 	wrlong	local01, fp
1ca7c     C0 4E 85 F1 | 	sub	fp, #192
1ca80     B4 FF 9F FD | 	jmp	#LR__2474
1ca84                 | LR__2475
1ca84                 | LR__2476
1ca84     C0 4E 05 F1 | 	add	fp, #192
1ca88     A7 20 02 FB | 	rdlong	local02, fp
1ca8c     C0 4E 85 F1 | 	sub	fp, #192
1ca90     10 1F C2 FA | 	rdbyte	local01, local02
1ca94     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ca98     C0 4E 05 A1 |  if_e	add	fp, #192
1ca9c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1caa0     01 1E 86 A1 |  if_e	sub	local01, #1
1caa4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1caa8     C0 4E 85 A1 |  if_e	sub	fp, #192
1caac     C0 4E 05 F1 | 	add	fp, #192
1cab0     A7 22 02 FB | 	rdlong	local03, fp
1cab4     01 22 06 F1 | 	add	local03, #1
1cab8     A7 22 62 FC | 	wrlong	local03, fp
1cabc     C0 4E 85 F1 | 	sub	fp, #192
1cac0                 | LR__2477
1cac0     24 4E 05 F1 | 	add	fp, #36
1cac4     A7 1E 0A FB | 	rdlong	local01, fp wz
1cac8     24 4E 85 F1 | 	sub	fp, #36
1cacc     B4 00 90 AD |  if_e	jmp	#LR__2480
1cad0     C0 4E 05 F1 | 	add	fp, #192
1cad4     A7 20 02 FB | 	rdlong	local02, fp
1cad8     10 23 02 F6 | 	mov	local03, local02
1cadc     01 22 06 F1 | 	add	local03, #1
1cae0     A7 22 62 FC | 	wrlong	local03, fp
1cae4     90 4E 85 F1 | 	sub	fp, #144
1cae8     A7 24 02 FB | 	rdlong	local04, fp
1caec     10 25 42 FC | 	wrbyte	local04, local02
1caf0     90 4E 05 F1 | 	add	fp, #144
1caf4     A7 20 02 FB | 	rdlong	local02, fp
1caf8     10 23 02 F6 | 	mov	local03, local02
1cafc     01 22 06 F1 | 	add	local03, #1
1cb00     A7 22 62 FC | 	wrlong	local03, fp
1cb04     60 4E 85 F1 | 	sub	fp, #96
1cb08     A7 24 02 FB | 	rdlong	local04, fp
1cb0c     10 25 42 FC | 	wrbyte	local04, local02
1cb10     48 4E 85 F1 | 	sub	fp, #72
1cb14     A7 00 68 FC | 	wrlong	#0, fp
1cb18     18 4E 85 F1 | 	sub	fp, #24
1cb1c                 | LR__2478
1cb1c     18 4E 05 F1 | 	add	fp, #24
1cb20     A7 20 02 FB | 	rdlong	local02, fp
1cb24     44 4E 05 F1 | 	add	fp, #68
1cb28     A7 26 02 FB | 	rdlong	local05, fp
1cb2c     5C 4E 85 F1 | 	sub	fp, #92
1cb30     13 21 52 F2 | 	cmps	local02, local05 wc
1cb34     4C 00 90 3D |  if_ae	jmp	#LR__2479
1cb38     C0 4E 05 F1 | 	add	fp, #192
1cb3c     A7 2C 02 FB | 	rdlong	local08, fp
1cb40     16 35 02 F6 | 	mov	local12, local08
1cb44     01 34 06 F1 | 	add	local12, #1
1cb48     A7 34 62 FC | 	wrlong	local12, fp
1cb4c     A8 4E 85 F1 | 	sub	fp, #168
1cb50     A7 2A 02 FB | 	rdlong	local07, fp
1cb54     15 2F 02 F6 | 	mov	local09, local07
1cb58     98 4E 05 F1 | 	add	fp, #152
1cb5c     A7 30 02 F6 | 	mov	local10, fp
1cb60     A7 2E 02 F1 | 	add	local09, fp
1cb64     17 33 C2 FA | 	rdbyte	local11, local09
1cb68     16 33 42 FC | 	wrbyte	local11, local08
1cb6c     98 4E 85 F1 | 	sub	fp, #152
1cb70     A7 34 02 FB | 	rdlong	local12, fp
1cb74     01 34 06 F1 | 	add	local12, #1
1cb78     A7 34 62 FC | 	wrlong	local12, fp
1cb7c     18 4E 85 F1 | 	sub	fp, #24
1cb80     98 FF 9F FD | 	jmp	#LR__2478
1cb84                 | LR__2479
1cb84                 | LR__2480
1cb84     C0 4E 05 F1 | 	add	fp, #192
1cb88     A7 1E 02 FB | 	rdlong	local01, fp
1cb8c     C0 4E 85 F1 | 	sub	fp, #192
1cb90     0F 01 48 FC | 	wrbyte	#0, local01
1cb94                 | LR__2481
1cb94     6C 4E 05 F1 | 	add	fp, #108
1cb98     A7 1E 0A FB | 	rdlong	local01, fp wz
1cb9c     6C 4E 85 F1 | 	sub	fp, #108
1cba0     90 01 90 AD |  if_e	jmp	#LR__2492
1cba4     48 4E 05 F1 | 	add	fp, #72
1cba8     A7 22 0A FB | 	rdlong	local03, fp wz
1cbac     48 4E 85 F1 | 	sub	fp, #72
1cbb0     80 01 90 AD |  if_e	jmp	#LR__2492
1cbb4     C4 4E 05 F1 | 	add	fp, #196
1cbb8     A7 12 02 FB | 	rdlong	arg01, fp
1cbbc     C4 4E 85 F1 | 	sub	fp, #196
1cbc0     09 3D 02 F6 | 	mov	local16, arg01
1cbc4     97 06 48 FB | 	callpa	#(@LR__2483-@LR__2482)>>2,fcache_load_ptr_
1cbc8                 | LR__2482
1cbc8     1E FB C9 FA | 	rdbyte	result1, local16 wz
1cbcc     01 3C 06 51 |  if_ne	add	local16, #1
1cbd0     F4 FF 9F 5D |  if_ne	jmp	#LR__2482
1cbd4                 | LR__2483
1cbd4     09 3D 82 F1 | 	sub	local16, arg01
1cbd8     1E 25 02 F6 | 	mov	local04, local16
1cbdc     6C 4E 05 F1 | 	add	fp, #108
1cbe0     A7 28 02 FB | 	rdlong	local06, fp
1cbe4     6C 4E 85 F1 | 	sub	fp, #108
1cbe8     14 25 5A F2 | 	cmps	local04, local06 wcz
1cbec     44 01 90 ED |  if_be	jmp	#LR__2492
1cbf0     C4 4E 05 F1 | 	add	fp, #196
1cbf4     A7 1E 02 FB | 	rdlong	local01, fp
1cbf8     5C 4E 05 F1 | 	add	fp, #92
1cbfc     A7 1E 62 FC | 	wrlong	local01, fp
1cc00     FC 4E 85 F1 | 	sub	fp, #252
1cc04     A7 1E 0A FB | 	rdlong	local01, fp wz
1cc08     24 4E 85 F1 | 	sub	fp, #36
1cc0c     20 00 90 AD |  if_e	jmp	#LR__2484
1cc10     B8 4E 05 F1 | 	add	fp, #184
1cc14     A7 00 68 FC | 	wrlong	#0, fp
1cc18     4C 4E 85 F1 | 	sub	fp, #76
1cc1c     A7 1E 02 FB | 	rdlong	local01, fp
1cc20     B0 4E 05 F1 | 	add	fp, #176
1cc24     A7 1E 62 FC | 	wrlong	local01, fp
1cc28     1C 4F 85 F1 | 	sub	fp, #284
1cc2c     24 00 90 FD | 	jmp	#LR__2485
1cc30                 | LR__2484
1cc30     6C 4E 05 F1 | 	add	fp, #108
1cc34     A7 1E 02 FB | 	rdlong	local01, fp
1cc38     01 1E 86 F1 | 	sub	local01, #1
1cc3c     4C 4E 05 F1 | 	add	fp, #76
1cc40     A7 22 02 FB | 	rdlong	local03, fp
1cc44     11 1F 82 F1 | 	sub	local01, local03
1cc48     64 4E 05 F1 | 	add	fp, #100
1cc4c     A7 1E 62 FC | 	wrlong	local01, fp
1cc50     1C 4F 85 F1 | 	sub	fp, #284
1cc54                 | LR__2485
1cc54     97 20 48 FB | 	callpa	#(@LR__2487-@LR__2486)>>2,fcache_load_ptr_
1cc58                 | LR__2486
1cc58     1C 4F 05 F1 | 	add	fp, #284
1cc5c     A7 1E 0A FB | 	rdlong	local01, fp wz
1cc60     1C 4F 85 F1 | 	sub	fp, #284
1cc64     30 00 90 AD |  if_e	jmp	#LR__2488
1cc68     20 4F 05 F1 | 	add	fp, #288
1cc6c     A7 20 02 FB | 	rdlong	local02, fp
1cc70     10 23 02 F6 | 	mov	local03, local02
1cc74     01 22 06 F1 | 	add	local03, #1
1cc78     A7 22 62 FC | 	wrlong	local03, fp
1cc7c     10 55 48 FC | 	wrbyte	#42, local02
1cc80     04 4E 85 F1 | 	sub	fp, #4
1cc84     A7 1E 02 FB | 	rdlong	local01, fp
1cc88     01 1E 86 F1 | 	sub	local01, #1
1cc8c     A7 1E 62 FC | 	wrlong	local01, fp
1cc90     1C 4F 85 F1 | 	sub	fp, #284
1cc94     C0 FF 9F FD | 	jmp	#LR__2486
1cc98                 | LR__2487
1cc98                 | LR__2488
1cc98     B8 4E 05 F1 | 	add	fp, #184
1cc9c     A7 1E 0A FB | 	rdlong	local01, fp wz
1cca0     B8 4E 85 F1 | 	sub	fp, #184
1cca4     70 00 90 AD |  if_e	jmp	#LR__2491
1cca8     20 4F 05 F1 | 	add	fp, #288
1ccac     A7 20 02 FB | 	rdlong	local02, fp
1ccb0     10 23 02 F6 | 	mov	local03, local02
1ccb4     01 22 06 F1 | 	add	local03, #1
1ccb8     A7 22 62 FC | 	wrlong	local03, fp
1ccbc     10 5D 48 FC | 	wrbyte	#46, local02
1ccc0     04 4E 85 F1 | 	sub	fp, #4
1ccc4     A7 00 68 FC | 	wrlong	#0, fp
1ccc8     1C 4F 85 F1 | 	sub	fp, #284
1cccc                 | LR__2489
1cccc     1C 4F 05 F1 | 	add	fp, #284
1ccd0     A7 20 02 FB | 	rdlong	local02, fp
1ccd4     64 4E 85 F1 | 	sub	fp, #100
1ccd8     A7 26 02 FB | 	rdlong	local05, fp
1ccdc     B8 4E 85 F1 | 	sub	fp, #184
1cce0     13 21 52 F2 | 	cmps	local02, local05 wc
1cce4     30 00 90 3D |  if_ae	jmp	#LR__2490
1cce8     20 4F 05 F1 | 	add	fp, #288
1ccec     A7 2C 02 FB | 	rdlong	local08, fp
1ccf0     16 35 02 F6 | 	mov	local12, local08
1ccf4     01 34 06 F1 | 	add	local12, #1
1ccf8     A7 34 62 FC | 	wrlong	local12, fp
1ccfc     16 55 48 FC | 	wrbyte	#42, local08
1cd00     04 4E 85 F1 | 	sub	fp, #4
1cd04     A7 34 02 FB | 	rdlong	local12, fp
1cd08     01 34 06 F1 | 	add	local12, #1
1cd0c     A7 34 62 FC | 	wrlong	local12, fp
1cd10     1C 4F 85 F1 | 	sub	fp, #284
1cd14     B4 FF 9F FD | 	jmp	#LR__2489
1cd18                 | LR__2490
1cd18                 | LR__2491
1cd18     20 4F 05 F1 | 	add	fp, #288
1cd1c     A7 20 02 FB | 	rdlong	local02, fp
1cd20     10 23 02 F6 | 	mov	local03, local02
1cd24     01 22 06 F1 | 	add	local03, #1
1cd28     A7 22 62 FC | 	wrlong	local03, fp
1cd2c     20 4F 85 F1 | 	sub	fp, #288
1cd30     10 01 48 FC | 	wrbyte	#0, local02
1cd34                 | LR__2492
1cd34     04 4E 05 F1 | 	add	fp, #4
1cd38     A7 12 02 FB | 	rdlong	arg01, fp
1cd3c     04 4E 05 F1 | 	add	fp, #4
1cd40     A7 14 02 FB | 	rdlong	arg02, fp
1cd44     BC 4E 05 F1 | 	add	fp, #188
1cd48     A7 16 02 FB | 	rdlong	arg03, fp
1cd4c     C4 4E 85 F1 | 	sub	fp, #196
1cd50     C4 EE BF FD | 	call	#__system___fmtstr
1cd54                 | LR__2493
1cd54     A7 F0 03 F6 | 	mov	ptra, fp
1cd58     B2 00 A0 FD | 	call	#popregs_
1cd5c                 | __system___fmtfloat_ret
1cd5c     2D 00 64 FD | 	ret
1cd60                 | 
1cd60                 | __system__Left_S
1cd60     04 4A 05 F6 | 	mov	COUNT_, #4
1cd64     A8 00 A0 FD | 	call	#pushregs_
1cd68     09 1F 02 F6 | 	mov	local01, arg01
1cd6c     0A 21 02 F6 | 	mov	local02, arg02
1cd70     01 20 56 F2 | 	cmps	local02, #1 wc
1cd74     51 01 00 CF 
1cd78     62 FA 05 C6 |  if_b	mov	result1, ##@LR__4373
1cd7c     5C 00 90 CD |  if_b	jmp	#LR__2503
1cd80     0F 13 02 F6 | 	mov	arg01, local01
1cd84     09 23 02 F6 | 	mov	local03, arg01
1cd88     97 06 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1cd8c                 | LR__2500
1cd8c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1cd90     01 22 06 51 |  if_ne	add	local03, #1
1cd94     F4 FF 9F 5D |  if_ne	jmp	#LR__2500
1cd98                 | LR__2501
1cd98     09 23 82 F1 | 	sub	local03, arg01
1cd9c     11 FB 01 F6 | 	mov	result1, local03
1cda0     10 FB 59 F2 | 	cmps	result1, local02 wcz
1cda4     0F FB 01 E6 |  if_be	mov	result1, local01
1cda8     30 00 90 ED |  if_be	jmp	#LR__2503
1cdac     10 13 02 F6 | 	mov	arg01, local02
1cdb0     02 12 06 F1 | 	add	arg01, #2
1cdb4     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1cdb8     FD 24 0A F6 | 	mov	local04, result1 wz
1cdbc     18 00 90 AD |  if_e	jmp	#LR__2502
1cdc0     12 13 02 F6 | 	mov	arg01, local04
1cdc4     0F 15 02 F6 | 	mov	arg02, local01
1cdc8     10 17 02 F6 | 	mov	arg03, local02
1cdcc     68 DE BF FD | 	call	#__system____builtin_memmove
1cdd0     12 21 02 F1 | 	add	local02, local04
1cdd4     10 01 48 FC | 	wrbyte	#0, local02
1cdd8                 | LR__2502
1cdd8     12 FB 01 F6 | 	mov	result1, local04
1cddc                 | LR__2503
1cddc     A7 F0 03 F6 | 	mov	ptra, fp
1cde0     B2 00 A0 FD | 	call	#popregs_
1cde4                 | __system__Left_S_ret
1cde4     2D 00 64 FD | 	ret
1cde8                 | 
1cde8                 | __system__Right_S
1cde8     05 4A 05 F6 | 	mov	COUNT_, #5
1cdec     A8 00 A0 FD | 	call	#pushregs_
1cdf0     09 1F 02 F6 | 	mov	local01, arg01
1cdf4     0A 21 02 F6 | 	mov	local02, arg02
1cdf8     01 20 56 F2 | 	cmps	local02, #1 wc
1cdfc     51 01 00 CF 
1ce00     63 FA 05 C6 |  if_b	mov	result1, ##@LR__4374
1ce04     64 00 90 CD |  if_b	jmp	#LR__2513
1ce08     0F 13 02 F6 | 	mov	arg01, local01
1ce0c     09 23 02 F6 | 	mov	local03, arg01
1ce10     97 06 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1ce14                 | LR__2510
1ce14     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ce18     01 22 06 51 |  if_ne	add	local03, #1
1ce1c     F4 FF 9F 5D |  if_ne	jmp	#LR__2510
1ce20                 | LR__2511
1ce20     09 23 82 F1 | 	sub	local03, arg01
1ce24     11 FB 01 F6 | 	mov	result1, local03
1ce28     FD 24 02 F6 | 	mov	local04, result1
1ce2c     10 25 5A F2 | 	cmps	local04, local02 wcz
1ce30     0F FB 01 E6 |  if_be	mov	result1, local01
1ce34     34 00 90 ED |  if_be	jmp	#LR__2513
1ce38     10 13 02 F6 | 	mov	arg01, local02
1ce3c     02 12 06 F1 | 	add	arg01, #2
1ce40     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1ce44     FD 26 0A F6 | 	mov	local05, result1 wz
1ce48     1C 00 90 AD |  if_e	jmp	#LR__2512
1ce4c     10 25 82 F1 | 	sub	local04, local02
1ce50     0F 25 02 F1 | 	add	local04, local01
1ce54     01 20 06 F1 | 	add	local02, #1
1ce58     13 13 02 F6 | 	mov	arg01, local05
1ce5c     12 15 02 F6 | 	mov	arg02, local04
1ce60     10 17 02 F6 | 	mov	arg03, local02
1ce64     D0 DD BF FD | 	call	#__system____builtin_memmove
1ce68                 | LR__2512
1ce68     13 FB 01 F6 | 	mov	result1, local05
1ce6c                 | LR__2513
1ce6c     A7 F0 03 F6 | 	mov	ptra, fp
1ce70     B2 00 A0 FD | 	call	#popregs_
1ce74                 | __system__Right_S_ret
1ce74     2D 00 64 FD | 	ret
1ce78                 | 
1ce78                 | __system__Mid_S
1ce78     05 4A 05 F6 | 	mov	COUNT_, #5
1ce7c     A8 00 A0 FD | 	call	#pushregs_
1ce80     09 1F 02 F6 | 	mov	local01, arg01
1ce84     0A 21 02 F6 | 	mov	local02, arg02
1ce88     01 16 56 F2 | 	cmps	arg03, #1 wc
1ce8c     51 01 00 CF 
1ce90     64 FA 05 C6 |  if_b	mov	result1, ##@LR__4375
1ce94     80 00 90 CD |  if_b	jmp	#LR__2523
1ce98     01 20 86 F1 | 	sub	local02, #1
1ce9c     00 20 56 F3 | 	fges	local02, #0 wc
1cea0     0F 13 02 F6 | 	mov	arg01, local01
1cea4     09 23 02 F6 | 	mov	local03, arg01
1cea8     97 06 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
1ceac                 | LR__2520
1ceac     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ceb0     01 22 06 51 |  if_ne	add	local03, #1
1ceb4     F4 FF 9F 5D |  if_ne	jmp	#LR__2520
1ceb8                 | LR__2521
1ceb8     09 23 82 F1 | 	sub	local03, arg01
1cebc     11 FB 01 F6 | 	mov	result1, local03
1cec0     FD 14 02 F6 | 	mov	arg02, result1
1cec4     10 15 52 F2 | 	cmps	arg02, local02 wc
1cec8     51 01 00 CF 
1cecc     65 FA 05 C6 |  if_b	mov	result1, ##@LR__4376
1ced0     44 00 90 CD |  if_b	jmp	#LR__2523
1ced4     0A 25 02 F6 | 	mov	local04, arg02
1ced8     10 25 82 F1 | 	sub	local04, local02
1cedc     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1cee0     0B 25 02 16 |  if_a	mov	local04, arg03
1cee4     12 13 02 F6 | 	mov	arg01, local04
1cee8     02 12 06 F1 | 	add	arg01, #2
1ceec     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1cef0     FD 26 0A F6 | 	mov	local05, result1 wz
1cef4     1C 00 90 AD |  if_e	jmp	#LR__2522
1cef8     0F 21 02 F1 | 	add	local02, local01
1cefc     13 13 02 F6 | 	mov	arg01, local05
1cf00     10 15 02 F6 | 	mov	arg02, local02
1cf04     12 17 02 F6 | 	mov	arg03, local04
1cf08     2C DD BF FD | 	call	#__system____builtin_memmove
1cf0c     13 25 02 F1 | 	add	local04, local05
1cf10     12 01 48 FC | 	wrbyte	#0, local04
1cf14                 | LR__2522
1cf14     13 FB 01 F6 | 	mov	result1, local05
1cf18                 | LR__2523
1cf18     A7 F0 03 F6 | 	mov	ptra, fp
1cf1c     B2 00 A0 FD | 	call	#popregs_
1cf20                 | __system__Mid_S_ret
1cf20     2D 00 64 FD | 	ret
1cf24                 | 
1cf24                 | __system__Chr_S
1cf24     01 4A 05 F6 | 	mov	COUNT_, #1
1cf28     A8 00 A0 FD | 	call	#pushregs_
1cf2c     09 1F 02 F6 | 	mov	local01, arg01
1cf30     03 12 06 F6 | 	mov	arg01, #3
1cf34     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1cf38     00 FA 4D F2 | 	cmps	result1, #0 wz
1cf3c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1cf40     01 FA 05 51 |  if_ne	add	result1, #1
1cf44     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1cf48     01 FA 85 51 |  if_ne	sub	result1, #1
1cf4c     A7 F0 03 F6 | 	mov	ptra, fp
1cf50     B2 00 A0 FD | 	call	#popregs_
1cf54                 | __system__Chr_S_ret
1cf54     2D 00 64 FD | 	ret
1cf58                 | 
1cf58                 | __system__Number_S
1cf58     08 4A 05 F6 | 	mov	COUNT_, #8
1cf5c     A8 00 A0 FD | 	call	#pushregs_
1cf60     09 1F 02 F6 | 	mov	local01, arg01
1cf64     0A 21 0A F6 | 	mov	local02, arg02 wz
1cf68     0B 23 02 F6 | 	mov	local03, arg03
1cf6c     3C 00 90 5D |  if_ne	jmp	#LR__2532
1cf70     01 20 06 F6 | 	mov	local02, #1
1cf74     11 25 02 F6 | 	mov	local04, local03
1cf78     01 26 06 F6 | 	mov	local05, #1
1cf7c     97 16 48 FB | 	callpa	#(@LR__2531-@LR__2530)>>2,fcache_load_ptr_
1cf80                 | LR__2530
1cf80     00 28 06 F6 | 	mov	local06, #0
1cf84     0F 25 1A F2 | 	cmp	local04, local01 wcz
1cf88     01 28 66 E6 |  if_be	neg	local06, #1
1cf8c     12 27 12 F2 | 	cmp	local05, local04 wc
1cf90     15 2B A2 F1 | 	subx	local07, local07
1cf94     15 29 CA F7 | 	test	local06, local07 wz
1cf98     11 25 02 5D |  if_ne	qmul	local04, local03
1cf9c     12 27 02 56 |  if_ne	mov	local05, local04
1cfa0     01 20 06 51 |  if_ne	add	local02, #1
1cfa4     18 24 62 5D |  if_ne	getqx	local04
1cfa8     D4 FF 9F 5D |  if_ne	jmp	#LR__2530
1cfac                 | LR__2531
1cfac                 | LR__2532
1cfac     20 20 36 F3 | 	fle	local02, #32 wc
1cfb0     10 13 02 F6 | 	mov	arg01, local02
1cfb4     02 12 06 F1 | 	add	arg01, #2
1cfb8     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1cfbc     FD 28 02 F6 | 	mov	local06, result1
1cfc0     10 2B 02 F6 | 	mov	local07, local02
1cfc4     14 2B 02 F1 | 	add	local07, local06
1cfc8     15 01 48 FC | 	wrbyte	#0, local07
1cfcc     97 1A 48 FB | 	callpa	#(@LR__2534-@LR__2533)>>2,fcache_load_ptr_
1cfd0                 | LR__2533
1cfd0     01 20 16 F2 | 	cmp	local02, #1 wc
1cfd4     2C 00 90 CD |  if_b	jmp	#LR__2535
1cfd8     11 1F 12 FD | 	qdiv	local01, local03
1cfdc     01 20 86 F1 | 	sub	local02, #1
1cfe0     10 2B 02 F6 | 	mov	local07, local02
1cfe4     14 2B 02 F1 | 	add	local07, local06
1cfe8     19 2C 62 FD | 	getqy	local08
1cfec     0A 2C 16 F2 | 	cmp	local08, #10 wc
1cff0     30 2C 06 C1 |  if_b	add	local08, #48
1cff4     37 2C 06 31 |  if_ae	add	local08, #55
1cff8     15 2D 42 FC | 	wrbyte	local08, local07
1cffc     18 1E 62 FD | 	getqx	local01
1d000     CC FF 9F FD | 	jmp	#LR__2533
1d004                 | LR__2534
1d004                 | LR__2535
1d004     14 FB 01 F6 | 	mov	result1, local06
1d008     A7 F0 03 F6 | 	mov	ptra, fp
1d00c     B2 00 A0 FD | 	call	#popregs_
1d010                 | __system__Number_S_ret
1d010     2D 00 64 FD | 	ret
1d014                 | 
1d014                 | __system__LCase_S
1d014     07 4A 05 F6 | 	mov	COUNT_, #7
1d018     A8 00 A0 FD | 	call	#pushregs_
1d01c     09 1F 02 F6 | 	mov	local01, arg01
1d020     09 21 02 F6 | 	mov	local02, arg01
1d024     97 06 48 FB | 	callpa	#(@LR__2541-@LR__2540)>>2,fcache_load_ptr_
1d028                 | LR__2540
1d028     10 FB C9 FA | 	rdbyte	result1, local02 wz
1d02c     01 20 06 51 |  if_ne	add	local02, #1
1d030     F4 FF 9F 5D |  if_ne	jmp	#LR__2540
1d034                 | LR__2541
1d034     09 21 82 F1 | 	sub	local02, arg01
1d038     10 FB 01 F6 | 	mov	result1, local02
1d03c     FD 20 0A F6 | 	mov	local02, result1 wz
1d040     51 01 00 AF 
1d044     66 FA 05 A6 |  if_e	mov	result1, ##@LR__4377
1d048     7C 00 90 AD |  if_e	jmp	#LR__2547
1d04c     10 13 02 F6 | 	mov	arg01, local02
1d050     02 12 06 F1 | 	add	arg01, #2
1d054     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1d058     FD 22 0A F6 | 	mov	local03, result1 wz
1d05c     64 00 90 AD |  if_e	jmp	#LR__2546
1d060     01 24 66 F6 | 	neg	local04, #1
1d064     97 26 48 FB | 	callpa	#(@LR__2545-@LR__2542)>>2,fcache_load_ptr_
1d068                 | LR__2542
1d068     01 24 06 F1 | 	add	local04, #1
1d06c     12 27 02 F6 | 	mov	local05, local04
1d070     0F 27 02 F1 | 	add	local05, local01
1d074     13 29 C2 FA | 	rdbyte	local06, local05
1d078     41 28 56 F2 | 	cmps	local06, #65 wc
1d07c     18 00 90 CD |  if_b	jmp	#LR__2543
1d080     5B 28 56 F2 | 	cmps	local06, #91 wc
1d084     12 2B 02 C6 |  if_b	mov	local07, local04
1d088     11 2B 02 C1 |  if_b	add	local07, local03
1d08c     20 28 06 C1 |  if_b	add	local06, #32
1d090     15 29 42 CC |  if_b	wrbyte	local06, local07
1d094     0C 00 90 CD |  if_b	jmp	#LR__2544
1d098                 | LR__2543
1d098     12 2B 02 F6 | 	mov	local07, local04
1d09c     11 2B 02 F1 | 	add	local07, local03
1d0a0     15 29 42 FC | 	wrbyte	local06, local07
1d0a4                 | LR__2544
1d0a4     10 29 02 F6 | 	mov	local06, local02
1d0a8     01 28 86 F1 | 	sub	local06, #1
1d0ac     14 25 0A F2 | 	cmp	local04, local06 wz
1d0b0     B4 FF 9F 5D |  if_ne	jmp	#LR__2542
1d0b4                 | LR__2545
1d0b4     11 21 02 F1 | 	add	local02, local03
1d0b8     10 01 48 FC | 	wrbyte	#0, local02
1d0bc     11 FB 01 F6 | 	mov	result1, local03
1d0c0     04 00 90 FD | 	jmp	#LR__2547
1d0c4                 | LR__2546
1d0c4     11 FB 01 F6 | 	mov	result1, local03
1d0c8                 | LR__2547
1d0c8     A7 F0 03 F6 | 	mov	ptra, fp
1d0cc     B2 00 A0 FD | 	call	#popregs_
1d0d0                 | __system__LCase_S_ret
1d0d0     2D 00 64 FD | 	ret
1d0d4                 | 
1d0d4                 | __system__LTrim_S
1d0d4     05 4A 05 F6 | 	mov	COUNT_, #5
1d0d8     A8 00 A0 FD | 	call	#pushregs_
1d0dc     09 1F 02 F6 | 	mov	local01, arg01
1d0e0     09 21 02 F6 | 	mov	local02, arg01
1d0e4     97 06 48 FB | 	callpa	#(@LR__2551-@LR__2550)>>2,fcache_load_ptr_
1d0e8                 | LR__2550
1d0e8     10 FB C9 FA | 	rdbyte	result1, local02 wz
1d0ec     01 20 06 51 |  if_ne	add	local02, #1
1d0f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2550
1d0f4                 | LR__2551
1d0f4     09 21 82 F1 | 	sub	local02, arg01
1d0f8     10 FB 01 F6 | 	mov	result1, local02
1d0fc     FD 20 0A F6 | 	mov	local02, result1 wz
1d100     51 01 00 AF 
1d104     67 FA 05 A6 |  if_e	mov	result1, ##@LR__4378
1d108     7C 00 90 AD |  if_e	jmp	#LR__2556
1d10c     00 22 06 F6 | 	mov	local03, #0
1d110     10 25 02 F6 | 	mov	local04, local02
1d114                 | LR__2552
1d114     12 23 52 F2 | 	cmps	local03, local04 wc
1d118     68 00 90 3D |  if_ae	jmp	#LR__2555
1d11c     11 17 02 F6 | 	mov	arg03, local03
1d120     0F 17 02 F1 | 	add	arg03, local01
1d124     0B 17 C2 FA | 	rdbyte	arg03, arg03
1d128     20 16 0E F2 | 	cmp	arg03, #32 wz
1d12c     4C 00 90 AD |  if_e	jmp	#LR__2554
1d130     10 13 02 F6 | 	mov	arg01, local02
1d134     11 13 82 F1 | 	sub	arg01, local03
1d138     02 12 06 F1 | 	add	arg01, #2
1d13c     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1d140     FD 26 0A F6 | 	mov	local05, result1 wz
1d144     2C 00 90 AD |  if_e	jmp	#LR__2553
1d148     11 15 02 F6 | 	mov	arg02, local03
1d14c     0F 15 02 F1 | 	add	arg02, local01
1d150     10 17 02 F6 | 	mov	arg03, local02
1d154     11 17 82 F1 | 	sub	arg03, local03
1d158     13 13 02 F6 | 	mov	arg01, local05
1d15c     D8 DA BF FD | 	call	#__system____builtin_memmove
1d160     11 21 82 F1 | 	sub	local02, local03
1d164     13 21 02 F1 | 	add	local02, local05
1d168     10 01 48 FC | 	wrbyte	#0, local02
1d16c     13 FB 01 F6 | 	mov	result1, local05
1d170     14 00 90 FD | 	jmp	#LR__2556
1d174                 | LR__2553
1d174     13 FB 01 F6 | 	mov	result1, local05
1d178     0C 00 90 FD | 	jmp	#LR__2556
1d17c                 | LR__2554
1d17c     01 22 06 F1 | 	add	local03, #1
1d180     90 FF 9F FD | 	jmp	#LR__2552
1d184                 | LR__2555
1d184     0F FB 01 F6 | 	mov	result1, local01
1d188                 | LR__2556
1d188     A7 F0 03 F6 | 	mov	ptra, fp
1d18c     B2 00 A0 FD | 	call	#popregs_
1d190                 | __system__LTrim_S_ret
1d190     2D 00 64 FD | 	ret
1d194                 | 
1d194                 | __system__RTrim_S
1d194     04 4A 05 F6 | 	mov	COUNT_, #4
1d198     A8 00 A0 FD | 	call	#pushregs_
1d19c     09 1F 02 F6 | 	mov	local01, arg01
1d1a0     09 21 02 F6 | 	mov	local02, arg01
1d1a4     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1d1a8                 | LR__2560
1d1a8     10 FB C9 FA | 	rdbyte	result1, local02 wz
1d1ac     01 20 06 51 |  if_ne	add	local02, #1
1d1b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2560
1d1b4                 | LR__2561
1d1b4     09 21 82 F1 | 	sub	local02, arg01
1d1b8     10 FB 01 F6 | 	mov	result1, local02
1d1bc     FD 20 0A F6 | 	mov	local02, result1 wz
1d1c0     51 01 00 AF 
1d1c4     68 FA 05 A6 |  if_e	mov	result1, ##@LR__4379
1d1c8     74 00 90 AD |  if_e	jmp	#LR__2565
1d1cc     10 23 02 F6 | 	mov	local03, local02
1d1d0     01 22 86 F1 | 	sub	local03, #1
1d1d4                 | LR__2562
1d1d4     11 15 02 F6 | 	mov	arg02, local03
1d1d8     0F 15 02 F1 | 	add	arg02, local01
1d1dc     0A 21 C2 FA | 	rdbyte	local02, arg02
1d1e0     20 20 0E F2 | 	cmp	local02, #32 wz
1d1e4     44 00 90 AD |  if_e	jmp	#LR__2564
1d1e8     11 13 02 F6 | 	mov	arg01, local03
1d1ec     02 12 06 F1 | 	add	arg01, #2
1d1f0     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1d1f4     FD 24 0A F6 | 	mov	local04, result1 wz
1d1f8     28 00 90 AD |  if_e	jmp	#LR__2563
1d1fc     11 17 02 F6 | 	mov	arg03, local03
1d200     01 16 06 F1 | 	add	arg03, #1
1d204     12 13 02 F6 | 	mov	arg01, local04
1d208     0F 15 02 F6 | 	mov	arg02, local01
1d20c     28 DA BF FD | 	call	#__system____builtin_memmove
1d210     01 22 06 F1 | 	add	local03, #1
1d214     12 23 02 F1 | 	add	local03, local04
1d218     11 01 48 FC | 	wrbyte	#0, local03
1d21c     12 FB 01 F6 | 	mov	result1, local04
1d220     1C 00 90 FD | 	jmp	#LR__2565
1d224                 | LR__2563
1d224     12 FB 01 F6 | 	mov	result1, local04
1d228     14 00 90 FD | 	jmp	#LR__2565
1d22c                 | LR__2564
1d22c     01 22 86 F1 | 	sub	local03, #1
1d230     00 22 56 F2 | 	cmps	local03, #0 wc
1d234     9C FF 9F 3D |  if_ae	jmp	#LR__2562
1d238     51 01 00 FF 
1d23c     69 FA 05 F6 | 	mov	result1, ##@LR__4380
1d240                 | LR__2565
1d240     A7 F0 03 F6 | 	mov	ptra, fp
1d244     B2 00 A0 FD | 	call	#popregs_
1d248                 | __system__RTrim_S_ret
1d248     2D 00 64 FD | 	ret
1d24c                 | 
1d24c                 | __system__Instr
1d24c     07 4A 05 F6 | 	mov	COUNT_, #7
1d250     A8 00 A0 FD | 	call	#pushregs_
1d254     09 1F 02 F6 | 	mov	local01, arg01
1d258     0A 21 02 F6 | 	mov	local02, arg02
1d25c     0B 23 02 F6 | 	mov	local03, arg03
1d260     11 13 02 F6 | 	mov	arg01, local03
1d264     09 25 02 F6 | 	mov	local04, arg01
1d268     97 06 48 FB | 	callpa	#(@LR__2571-@LR__2570)>>2,fcache_load_ptr_
1d26c                 | LR__2570
1d26c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d270     01 24 06 51 |  if_ne	add	local04, #1
1d274     F4 FF 9F 5D |  if_ne	jmp	#LR__2570
1d278                 | LR__2571
1d278     09 25 82 F1 | 	sub	local04, arg01
1d27c     12 27 02 F6 | 	mov	local05, local04
1d280     10 13 02 F6 | 	mov	arg01, local02
1d284     09 25 02 F6 | 	mov	local04, arg01
1d288     97 06 48 FB | 	callpa	#(@LR__2573-@LR__2572)>>2,fcache_load_ptr_
1d28c                 | LR__2572
1d28c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d290     01 24 06 51 |  if_ne	add	local04, #1
1d294     F4 FF 9F 5D |  if_ne	jmp	#LR__2572
1d298                 | LR__2573
1d298     09 25 82 F1 | 	sub	local04, arg01
1d29c     12 FB 01 F6 | 	mov	result1, local04
1d2a0     FD 18 0A F6 | 	mov	arg04, result1 wz
1d2a4     00 FA 05 A6 |  if_e	mov	result1, #0
1d2a8     98 00 90 AD |  if_e	jmp	#LR__2577
1d2ac     00 26 0E F2 | 	cmp	local05, #0 wz
1d2b0     00 FA 05 A6 |  if_e	mov	result1, #0
1d2b4     8C 00 90 AD |  if_e	jmp	#LR__2577
1d2b8     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1d2bc     00 FA 05 16 |  if_a	mov	result1, #0
1d2c0     80 00 90 1D |  if_a	jmp	#LR__2577
1d2c4     01 1E 56 F2 | 	cmps	local01, #1 wc
1d2c8     01 1E 06 C6 |  if_b	mov	local01, #1
1d2cc     11 29 C2 FA | 	rdbyte	local06, local03
1d2d0     01 26 0E F2 | 	cmp	local05, #1 wz
1d2d4     18 00 90 5D |  if_ne	jmp	#LR__2574
1d2d8     10 13 02 F6 | 	mov	arg01, local02
1d2dc     14 15 02 F6 | 	mov	arg02, local06
1d2e0     0F 17 02 F6 | 	mov	arg03, local01
1d2e4     00 18 06 F6 | 	mov	arg04, #0
1d2e8     B0 33 B0 FD | 	call	#__system____ScanForChar
1d2ec     54 00 90 FD | 	jmp	#LR__2577
1d2f0                 | LR__2574
1d2f0     0F 2B 02 F6 | 	mov	local07, local01
1d2f4                 | LR__2575
1d2f4     10 13 02 F6 | 	mov	arg01, local02
1d2f8     14 15 02 F6 | 	mov	arg02, local06
1d2fc     15 17 02 F6 | 	mov	arg03, local07
1d300     00 18 06 F6 | 	mov	arg04, #0
1d304     94 33 B0 FD | 	call	#__system____ScanForChar
1d308     FD 2A 0A F6 | 	mov	local07, result1 wz
1d30c     30 00 90 AD |  if_e	jmp	#LR__2576
1d310     13 17 02 F6 | 	mov	arg03, local05
1d314     10 13 02 F6 | 	mov	arg01, local02
1d318     15 15 02 F6 | 	mov	arg02, local07
1d31c     58 FB BF FD | 	call	#__system__Mid_S
1d320     FD 12 02 F6 | 	mov	arg01, result1
1d324     11 15 02 F6 | 	mov	arg02, local03
1d328     14 DA BF FD | 	call	#__system___string_cmp
1d32c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d330     15 FB 01 A6 |  if_e	mov	result1, local07
1d334     0C 00 90 AD |  if_e	jmp	#LR__2577
1d338     13 2B 02 F1 | 	add	local07, local05
1d33c     B4 FF 9F FD | 	jmp	#LR__2575
1d340                 | LR__2576
1d340     00 FA 05 F6 | 	mov	result1, #0
1d344                 | LR__2577
1d344     A7 F0 03 F6 | 	mov	ptra, fp
1d348     B2 00 A0 FD | 	call	#popregs_
1d34c                 | __system__Instr_ret
1d34c     2D 00 64 FD | 	ret
1d350                 | 
1d350                 | __system___strerror
1d350     00 12 56 F2 | 	cmps	arg01, #0 wc
1d354     08 00 90 CD |  if_b	jmp	#LR__2580
1d358     1A 12 56 F2 | 	cmps	arg01, #26 wc
1d35c     04 00 90 CD |  if_b	jmp	#LR__2581
1d360                 | LR__2580
1d360     19 12 06 F6 | 	mov	arg01, #25
1d364                 | LR__2581
1d364     02 12 66 F0 | 	shl	arg01, #2
1d368     01 00 00 FF 
1d36c     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
1d370     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1d374     09 FB 01 FB | 	rdlong	result1, arg01
1d378     01 00 00 FF 
1d37c     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
1d380                 | __system___strerror_ret
1d380     2D 00 64 FD | 	ret
1d384                 | 
1d384                 | __system___int64_shl
1d384     20 16 CE F7 | 	test	arg03, #32 wz
1d388     09 15 02 56 |  if_ne	mov	arg02, arg01
1d38c     00 12 06 56 |  if_ne	mov	arg01, #0
1d390     1F 16 CE F7 | 	test	arg03, #31 wz
1d394     18 00 90 AD |  if_e	jmp	#LR__2590
1d398     0B 15 62 F0 | 	shl	arg02, arg03
1d39c     09 FB 01 F6 | 	mov	result1, arg01
1d3a0     0B FD 61 F6 | 	neg	result2, arg03
1d3a4     FE FA 41 F0 | 	shr	result1, result2
1d3a8     FD 14 42 F5 | 	or	arg02, result1
1d3ac     0B 13 62 F0 | 	shl	arg01, arg03
1d3b0                 | LR__2590
1d3b0     0A FD 01 F6 | 	mov	result2, arg02
1d3b4     09 FB 01 F6 | 	mov	result1, arg01
1d3b8                 | __system___int64_shl_ret
1d3b8     2D 00 64 FD | 	ret
1d3bc                 | 
1d3bc                 | __system___usepins
1d3bc     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1d3c0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1d3c4     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
1d3c8     00 13 CA F7 | 	test	arg01, _var01 wz
1d3cc     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
1d3d0     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1d3d4     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
1d3d8     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1d3dc     00 FA 05 56 |  if_ne	mov	result1, #0
1d3e0     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1d3e4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1d3e8     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1d3ec     09 03 42 F5 | 	or	_var02, arg01
1d3f0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1d3f4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1d3f8     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1d3fc     0A 03 42 F5 | 	or	_var02, arg02
1d400     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1d404     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1d408     01 FA 65 F6 | 	neg	result1, #1
1d40c                 | __system___usepins_ret
1d40c     2D 00 64 FD | 	ret
1d410                 | 
1d410                 | __system___freepins
1d410     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1d414     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1d418     09 01 22 F5 | 	andn	_var01, arg01
1d41c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1d420     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1d424     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1d428     0A 01 22 F5 | 	andn	_var01, arg02
1d42c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1d430     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1d434                 | __system___freepins_ret
1d434     2D 00 64 FD | 	ret
1d438                 | 
1d438                 | __system___float_fromuns
1d438     09 17 0A F6 | 	mov	arg03, arg01 wz
1d43c     0B FB 01 A6 |  if_e	mov	result1, arg03
1d440     24 00 90 AD |  if_e	jmp	#LR__2600
1d444     0B 15 92 F7 | 	encod	arg02, arg03 wc
1d448     01 14 06 C1 |  if_b	add	arg02, #1
1d44c     01 14 86 F1 | 	sub	arg02, #1
1d450     1F 12 06 F6 | 	mov	arg01, #31
1d454     0A 13 82 F1 | 	sub	arg01, arg02
1d458     09 17 62 F0 | 	shl	arg03, arg01
1d45c     02 16 46 F0 | 	shr	arg03, #2
1d460     00 12 06 F6 | 	mov	arg01, #0
1d464     4C 09 B0 FD | 	call	#__system___float_Pack
1d468                 | LR__2600
1d468                 | __system___float_fromuns_ret
1d468     2D 00 64 FD | 	ret
1d46c                 | 
1d46c                 | __system___float_add
1d46c     0F 4A 05 F6 | 	mov	COUNT_, #15
1d470     A8 00 A0 FD | 	call	#pushregs_
1d474     09 1F 02 F6 | 	mov	local01, arg01
1d478     0A 21 02 F6 | 	mov	local02, arg02
1d47c     00 22 06 F6 | 	mov	local03, #0
1d480     0F 25 02 F6 | 	mov	local04, local01
1d484     12 27 02 F6 | 	mov	local05, local04
1d488     16 26 46 F7 | 	zerox	local05, #22
1d48c     12 29 02 F6 | 	mov	local06, local04
1d490     01 28 66 F0 | 	shl	local06, #1
1d494     18 28 46 F0 | 	shr	local06, #24
1d498     1F 24 46 F0 | 	shr	local04, #31
1d49c     10 13 02 F6 | 	mov	arg01, local02
1d4a0     09 FB 01 F6 | 	mov	result1, arg01
1d4a4     FD 2A 02 F6 | 	mov	local07, result1
1d4a8     15 2D 02 F6 | 	mov	local08, local07
1d4ac     16 2C 46 F7 | 	zerox	local08, #22
1d4b0     15 2F 02 F6 | 	mov	local09, local07
1d4b4     01 2E 66 F0 | 	shl	local09, #1
1d4b8     18 2E 46 F0 | 	shr	local09, #24
1d4bc     17 31 02 F6 | 	mov	local10, local09
1d4c0     1F 2A 46 F0 | 	shr	local07, #31
1d4c4     00 32 06 F6 | 	mov	local11, #0
1d4c8     00 34 06 F6 | 	mov	local12, #0
1d4cc     18 29 12 F2 | 	cmp	local06, local10 wc
1d4d0     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1d4d4     2C 00 90 1D |  if_a	jmp	#LR__2610
1d4d8     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1d4dc     24 00 90 3D |  if_ae	jmp	#LR__2610
1d4e0     13 37 02 F6 | 	mov	local13, local05
1d4e4     16 27 02 F6 | 	mov	local05, local08
1d4e8     1B 2D 02 F6 | 	mov	local08, local13
1d4ec     14 37 02 F6 | 	mov	local13, local06
1d4f0     18 29 02 F6 | 	mov	local06, local10
1d4f4     1B 31 02 F6 | 	mov	local10, local13
1d4f8     12 37 02 F6 | 	mov	local13, local04
1d4fc     15 25 02 F6 | 	mov	local04, local07
1d500     1B 2B 02 F6 | 	mov	local07, local13
1d504                 | LR__2610
1d504     FF 28 0E F2 | 	cmp	local06, #255 wz
1d508     70 01 90 AD |  if_e	jmp	#LR__2625
1d50c     00 28 0E F2 | 	cmp	local06, #0 wz
1d510     AC 01 90 AD |  if_e	jmp	#LR__2627
1d514     17 26 26 F4 | 	bith	local05, #23
1d518                 | LR__2611
1d518     00 30 0E F2 | 	cmp	local10, #0 wz
1d51c     F0 01 90 AD |  if_e	jmp	#LR__2631
1d520     17 2C 26 F4 | 	bith	local08, #23
1d524                 | LR__2612
1d524     7F 28 86 F1 | 	sub	local06, #127
1d528     7F 30 86 F1 | 	sub	local10, #127
1d52c     14 39 02 F6 | 	mov	local14, local06
1d530     18 39 82 F1 | 	sub	local14, local10
1d534     97 14 48 FB | 	callpa	#(@LR__2614-@LR__2613)>>2,fcache_load_ptr_
1d538                 | LR__2613
1d538     20 38 56 F2 | 	cmps	local14, #32 wc
1d53c     20 00 90 CD |  if_b	jmp	#LR__2615
1d540     16 2F 02 F6 | 	mov	local09, local08
1d544     00 32 0E F2 | 	cmp	local11, #0 wz
1d548     6F 32 62 FD | 	wrnz	local11
1d54c     19 2F 42 F5 | 	or	local09, local11
1d550     17 33 02 F6 | 	mov	local11, local09
1d554     00 2C 06 F6 | 	mov	local08, #0
1d558     20 38 86 F1 | 	sub	local14, #32
1d55c     D8 FF 9F FD | 	jmp	#LR__2613
1d560                 | LR__2614
1d560                 | LR__2615
1d560     00 38 0E F2 | 	cmp	local14, #0 wz
1d564     38 00 90 AD |  if_e	jmp	#LR__2616
1d568     16 37 02 F6 | 	mov	local13, local08
1d56c     20 30 06 F6 | 	mov	local10, #32
1d570     1C 31 82 F1 | 	sub	local10, local14
1d574     18 37 62 F0 | 	shl	local13, local10
1d578     19 31 02 F6 | 	mov	local10, local11
1d57c     20 2E 06 F6 | 	mov	local09, #32
1d580     1C 2F 82 F1 | 	sub	local09, local14
1d584     17 31 6A F0 | 	shl	local10, local09 wz
1d588     1C 33 42 F0 | 	shr	local11, local14
1d58c     1C 2D 42 F0 | 	shr	local08, local14
1d590     1B 33 42 F5 | 	or	local11, local13
1d594     00 3A 06 F6 | 	mov	local15, #0
1d598     01 3A 06 56 |  if_ne	mov	local15, #1
1d59c     1D 33 42 F5 | 	or	local11, local15
1d5a0                 | LR__2616
1d5a0     12 3B 02 F6 | 	mov	local15, local04
1d5a4     15 3B 62 F5 | 	xor	local15, local07
1d5a8     01 3A CE F7 | 	test	local15, #1 wz
1d5ac     18 00 90 AD |  if_e	jmp	#LR__2617
1d5b0     16 2D 22 F6 | 	not	local08, local08
1d5b4     19 33 22 F6 | 	not	local11, local11
1d5b8     01 32 0E F1 | 	add	local11, #1 wz
1d5bc     00 3A 06 F6 | 	mov	local15, #0
1d5c0     01 3A 06 A6 |  if_e	mov	local15, #1
1d5c4     1D 2D 02 F1 | 	add	local08, local15
1d5c8                 | LR__2617
1d5c8     19 35 12 F1 | 	add	local12, local11 wc
1d5cc     16 27 22 F1 | 	addx	local05, local08
1d5d0     00 26 56 F2 | 	cmps	local05, #0 wc
1d5d4     1C 00 90 3D |  if_ae	jmp	#LR__2618
1d5d8     01 24 66 F5 | 	xor	local04, #1
1d5dc     13 27 22 F6 | 	not	local05, local05
1d5e0     1A 35 22 F6 | 	not	local12, local12
1d5e4     01 34 0E F1 | 	add	local12, #1 wz
1d5e8     00 3A 06 F6 | 	mov	local15, #0
1d5ec     01 3A 06 A6 |  if_e	mov	local15, #1
1d5f0     1D 27 02 F1 | 	add	local05, local15
1d5f4                 | LR__2618
1d5f4     00 80 00 FF 
1d5f8     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1d5fc     28 00 90 CD |  if_b	jmp	#LR__2619
1d600     01 28 06 F1 | 	add	local06, #1
1d604     1A 39 02 F6 | 	mov	local14, local12
1d608     01 38 06 F5 | 	and	local14, #1
1d60c     01 34 46 F0 | 	shr	local12, #1
1d610     13 3B 02 F6 | 	mov	local15, local05
1d614     1F 3A 66 F0 | 	shl	local15, #31
1d618     1D 35 42 F5 | 	or	local12, local15
1d61c     1C 35 42 F5 | 	or	local12, local14
1d620     01 26 46 F0 | 	shr	local05, #1
1d624     3C 00 90 FD | 	jmp	#LR__2624
1d628                 | LR__2619
1d628     00 40 00 FF 
1d62c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1d630     30 00 90 3D |  if_ae	jmp	#LR__2623
1d634     00 26 0E F2 | 	cmp	local05, #0 wz
1d638     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1d63c     08 24 46 A5 |  if_e	or	local04, #8
1d640     01 24 26 A5 |  if_e	andn	local04, #1
1d644     1C 00 90 AD |  if_e	jmp	#LR__2622
1d648                 | LR__2620
1d648     00 40 00 FF 
1d64c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1d650     10 00 90 3D |  if_ae	jmp	#LR__2621
1d654     1A 35 12 F1 | 	add	local12, local12 wc
1d658     13 27 22 F1 | 	addx	local05, local05
1d65c     01 28 86 F1 | 	sub	local06, #1
1d660     E4 FF 9F FD | 	jmp	#LR__2620
1d664                 | LR__2621
1d664                 | LR__2622
1d664                 | LR__2623
1d664                 | LR__2624
1d664     13 13 02 F6 | 	mov	arg01, local05
1d668     1A 15 02 F6 | 	mov	arg02, local12
1d66c     14 17 02 F6 | 	mov	arg03, local06
1d670     12 19 02 F6 | 	mov	arg04, local04
1d674     68 34 B0 FD | 	call	#__system__pack_0508
1d678     DC 00 90 FD | 	jmp	#LR__2635
1d67c                 | LR__2625
1d67c     FF 30 0E F2 | 	cmp	local10, #255 wz
1d680     10 00 90 5D |  if_ne	jmp	#LR__2626
1d684     12 2B 0A F2 | 	cmp	local07, local04 wz
1d688     00 F8 3F 5F 
1d68c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1d690     C4 00 90 5D |  if_ne	jmp	#LR__2635
1d694                 | LR__2626
1d694     00 26 0E F2 | 	cmp	local05, #0 wz
1d698     00 F8 3F 5F 
1d69c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1d6a0     B4 00 90 5D |  if_ne	jmp	#LR__2635
1d6a4     1A 15 02 F6 | 	mov	arg02, local12
1d6a8     14 17 02 F6 | 	mov	arg03, local06
1d6ac     12 19 02 F6 | 	mov	arg04, local04
1d6b0     02 18 46 F5 | 	or	arg04, #2
1d6b4     13 13 02 F6 | 	mov	arg01, local05
1d6b8     24 34 B0 FD | 	call	#__system__pack_0508
1d6bc     98 00 90 FD | 	jmp	#LR__2635
1d6c0                 | LR__2627
1d6c0     00 26 0E F2 | 	cmp	local05, #0 wz
1d6c4     28 00 90 AD |  if_e	jmp	#LR__2630
1d6c8     01 26 66 F0 | 	shl	local05, #1
1d6cc     97 0E 48 FB | 	callpa	#(@LR__2629-@LR__2628)>>2,fcache_load_ptr_
1d6d0                 | LR__2628
1d6d0     00 40 00 FF 
1d6d4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1d6d8     14 3B 02 C6 |  if_b	mov	local15, local06
1d6dc     01 3A 86 C1 |  if_b	sub	local15, #1
1d6e0     1D 29 02 C6 |  if_b	mov	local06, local15
1d6e4     01 26 66 C0 |  if_b	shl	local05, #1
1d6e8     E4 FF 9F CD |  if_b	jmp	#LR__2628
1d6ec                 | LR__2629
1d6ec     28 FE 9F FD | 	jmp	#LR__2611
1d6f0                 | LR__2630
1d6f0     15 25 02 F5 | 	and	local04, local07
1d6f4     12 19 02 F6 | 	mov	arg04, local04
1d6f8     08 18 46 F5 | 	or	arg04, #8
1d6fc     00 12 06 F6 | 	mov	arg01, #0
1d700     00 14 06 F6 | 	mov	arg02, #0
1d704     00 16 06 F6 | 	mov	arg03, #0
1d708     D4 33 B0 FD | 	call	#__system__pack_0508
1d70c     48 00 90 FD | 	jmp	#LR__2635
1d710                 | LR__2631
1d710     00 2C 0E F2 | 	cmp	local08, #0 wz
1d714     28 00 90 AD |  if_e	jmp	#LR__2634
1d718     01 2C 66 F0 | 	shl	local08, #1
1d71c     97 0E 48 FB | 	callpa	#(@LR__2633-@LR__2632)>>2,fcache_load_ptr_
1d720                 | LR__2632
1d720     00 40 00 FF 
1d724     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1d728     18 3B 02 C6 |  if_b	mov	local15, local10
1d72c     01 3A 86 C1 |  if_b	sub	local15, #1
1d730     1D 31 02 C6 |  if_b	mov	local10, local15
1d734     01 2C 66 C0 |  if_b	shl	local08, #1
1d738     E4 FF 9F CD |  if_b	jmp	#LR__2632
1d73c                 | LR__2633
1d73c     E4 FD 9F FD | 	jmp	#LR__2612
1d740                 | LR__2634
1d740     7F 28 86 F1 | 	sub	local06, #127
1d744     13 13 02 F6 | 	mov	arg01, local05
1d748     1A 15 02 F6 | 	mov	arg02, local12
1d74c     14 17 02 F6 | 	mov	arg03, local06
1d750     12 19 02 F6 | 	mov	arg04, local04
1d754     88 33 B0 FD | 	call	#__system__pack_0508
1d758                 | LR__2635
1d758     A7 F0 03 F6 | 	mov	ptra, fp
1d75c     B2 00 A0 FD | 	call	#popregs_
1d760                 | __system___float_add_ret
1d760     2D 00 64 FD | 	ret
1d764                 | 
1d764                 | __system___float_sqrt
1d764     04 4A 05 F6 | 	mov	COUNT_, #4
1d768     A8 00 A0 FD | 	call	#pushregs_
1d76c     09 1F 02 F6 | 	mov	local01, arg01
1d770     09 FB 01 F6 | 	mov	result1, arg01
1d774     FD 20 02 F6 | 	mov	local02, result1
1d778     10 23 02 F6 | 	mov	local03, local02
1d77c     16 22 46 F7 | 	zerox	local03, #22
1d780     10 25 02 F6 | 	mov	local04, local02
1d784     01 24 66 F0 | 	shl	local04, #1
1d788     18 24 4E F0 | 	shr	local04, #24 wz
1d78c     1F 20 46 F0 | 	shr	local02, #31
1d790     70 00 90 AD |  if_e	jmp	#LR__2641
1d794     17 22 26 F4 | 	bith	local03, #23
1d798                 | LR__2640
1d798     00 20 0E F2 | 	cmp	local02, #0 wz
1d79c     00 F8 3F 5F 
1d7a0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1d7a4     88 00 90 5D |  if_ne	jmp	#LR__2644
1d7a8     FF 24 0E F2 | 	cmp	local04, #255 wz
1d7ac     0F FB 01 A6 |  if_e	mov	result1, local01
1d7b0     7C 00 90 AD |  if_e	jmp	#LR__2644
1d7b4     7F 24 86 F1 | 	sub	local04, #127
1d7b8     01 24 CE F7 | 	test	local04, #1 wz
1d7bc     01 22 66 50 |  if_ne	shl	local03, #1
1d7c0     05 22 66 F0 | 	shl	local03, #5
1d7c4     11 01 38 FD | 	qsqrt	#0, local03
1d7c8     01 24 86 51 |  if_ne	sub	local04, #1
1d7cc     12 25 52 F6 | 	abs	local04, local04 wc
1d7d0     01 24 46 F0 | 	shr	local04, #1
1d7d4     12 17 82 F6 | 	negc	arg03, local04
1d7d8     10 19 02 F6 | 	mov	arg04, local02
1d7dc     18 12 62 FD | 	getqx	arg01
1d7e0     09 15 02 F6 | 	mov	arg02, arg01
1d7e4     19 14 66 F0 | 	shl	arg02, #25
1d7e8     07 12 46 F0 | 	shr	arg01, #7
1d7ec     00 80 00 FF 
1d7f0     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1d7f4     01 16 06 31 |  if_ae	add	arg03, #1
1d7f8     01 12 46 30 |  if_ae	shr	arg01, #1
1d7fc     E0 32 B0 FD | 	call	#__system__pack_0508
1d800     2C 00 90 FD | 	jmp	#LR__2644
1d804                 | LR__2641
1d804     00 22 0E F2 | 	cmp	local03, #0 wz
1d808     0F FB 01 A6 |  if_e	mov	result1, local01
1d80c     20 00 90 AD |  if_e	jmp	#LR__2644
1d810     01 22 66 F0 | 	shl	local03, #1
1d814     97 0A 48 FB | 	callpa	#(@LR__2643-@LR__2642)>>2,fcache_load_ptr_
1d818                 | LR__2642
1d818     00 40 00 FF 
1d81c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1d820     01 24 86 C1 |  if_b	sub	local04, #1
1d824     01 22 66 C0 |  if_b	shl	local03, #1
1d828     EC FF 9F CD |  if_b	jmp	#LR__2642
1d82c                 | LR__2643
1d82c     68 FF 9F FD | 	jmp	#LR__2640
1d830                 | LR__2644
1d830     A7 F0 03 F6 | 	mov	ptra, fp
1d834     B2 00 A0 FD | 	call	#popregs_
1d838                 | __system___float_sqrt_ret
1d838     2D 00 64 FD | 	ret
1d83c                 | 
1d83c                 | __system___float_mul
1d83c     0B 4A 05 F6 | 	mov	COUNT_, #11
1d840     A8 00 A0 FD | 	call	#pushregs_
1d844     09 1F 02 F6 | 	mov	local01, arg01
1d848     0A 21 02 F6 | 	mov	local02, arg02
1d84c     0F 23 02 F6 | 	mov	local03, local01
1d850     11 25 02 F6 | 	mov	local04, local03
1d854     16 24 46 F7 | 	zerox	local04, #22
1d858     11 27 02 F6 | 	mov	local05, local03
1d85c     01 26 66 F0 | 	shl	local05, #1
1d860     18 26 46 F0 | 	shr	local05, #24
1d864     1F 22 46 F0 | 	shr	local03, #31
1d868     10 FB 01 F6 | 	mov	result1, local02
1d86c     FD 28 02 F6 | 	mov	local06, result1
1d870     14 2B 02 F6 | 	mov	local07, local06
1d874     16 2A 46 F7 | 	zerox	local07, #22
1d878     14 2D 02 F6 | 	mov	local08, local06
1d87c     01 2C 66 F0 | 	shl	local08, #1
1d880     18 2C 46 F0 | 	shr	local08, #24
1d884     1F 28 46 F0 | 	shr	local06, #31
1d888     14 23 62 F5 | 	xor	local03, local06
1d88c     FF 26 0E F2 | 	cmp	local05, #255 wz
1d890     90 00 90 AD |  if_e	jmp	#LR__2653
1d894     FF 2C 0E F2 | 	cmp	local08, #255 wz
1d898     D8 00 90 AD |  if_e	jmp	#LR__2655
1d89c     00 26 0E F2 | 	cmp	local05, #0 wz
1d8a0     0C 01 90 AD |  if_e	jmp	#LR__2656
1d8a4     17 24 26 F4 | 	bith	local04, #23
1d8a8                 | LR__2650
1d8a8     00 2C 0E F2 | 	cmp	local08, #0 wz
1d8ac     44 01 90 AD |  if_e	jmp	#LR__2660
1d8b0     17 2A 26 F4 | 	bith	local07, #23
1d8b4                 | LR__2651
1d8b4     12 21 02 F6 | 	mov	local02, local04
1d8b8     04 20 66 F0 | 	shl	local02, #4
1d8bc     15 29 02 F6 | 	mov	local06, local07
1d8c0     05 28 66 F0 | 	shl	local06, #5
1d8c4     14 21 02 FD | 	qmul	local02, local06
1d8c8     16 27 02 F1 | 	add	local05, local08
1d8cc     FE 26 86 F1 | 	sub	local05, #254
1d8d0     13 2F 02 F6 | 	mov	local09, local05
1d8d4     04 24 66 F0 | 	shl	local04, #4
1d8d8     05 2A 66 F0 | 	shl	local07, #5
1d8dc     18 30 62 FD | 	getqx	local10
1d8e0     15 25 02 FD | 	qmul	local04, local07
1d8e4     19 32 62 FD | 	getqy	local11
1d8e8     00 80 00 FF 
1d8ec     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1d8f0     18 00 90 CD |  if_b	jmp	#LR__2652
1d8f4     01 2E 06 F1 | 	add	local09, #1
1d8f8     01 30 46 F0 | 	shr	local10, #1
1d8fc     19 2D 02 F6 | 	mov	local08, local11
1d900     1F 2C 66 F0 | 	shl	local08, #31
1d904     16 31 42 F5 | 	or	local10, local08
1d908     01 32 46 F0 | 	shr	local11, #1
1d90c                 | LR__2652
1d90c     19 13 02 F6 | 	mov	arg01, local11
1d910     18 15 02 F6 | 	mov	arg02, local10
1d914     17 17 02 F6 | 	mov	arg03, local09
1d918     11 19 02 F6 | 	mov	arg04, local03
1d91c     C0 31 B0 FD | 	call	#__system__pack_0508
1d920     10 01 90 FD | 	jmp	#LR__2664
1d924                 | LR__2653
1d924     00 24 0E F2 | 	cmp	local04, #0 wz
1d928     0F FB 01 56 |  if_ne	mov	result1, local01
1d92c     04 01 90 5D |  if_ne	jmp	#LR__2664
1d930     FF 2C 56 F2 | 	cmps	local08, #255 wc
1d934     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1d938     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1d93c     18 00 90 4D |  if_c_and_nz	jmp	#LR__2654
1d940     00 F8 3F CF 
1d944     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1d948     E8 00 90 CD |  if_b	jmp	#LR__2664
1d94c     00 2A 0E F2 | 	cmp	local07, #0 wz
1d950     10 FB 01 56 |  if_ne	mov	result1, local02
1d954     DC 00 90 5D |  if_ne	jmp	#LR__2664
1d958                 | LR__2654
1d958     02 22 46 F5 | 	or	local03, #2
1d95c     00 12 06 F6 | 	mov	arg01, #0
1d960     00 14 06 F6 | 	mov	arg02, #0
1d964     13 17 02 F6 | 	mov	arg03, local05
1d968     11 19 02 F6 | 	mov	arg04, local03
1d96c     70 31 B0 FD | 	call	#__system__pack_0508
1d970     C0 00 90 FD | 	jmp	#LR__2664
1d974                 | LR__2655
1d974     00 26 0E F2 | 	cmp	local05, #0 wz
1d978     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1d97c     00 F8 3F AF 
1d980     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1d984     AC 00 90 AD |  if_e	jmp	#LR__2664
1d988     00 2A 0E F2 | 	cmp	local07, #0 wz
1d98c     10 FB 01 56 |  if_ne	mov	result1, local02
1d990     A0 00 90 5D |  if_ne	jmp	#LR__2664
1d994     16 17 02 F6 | 	mov	arg03, local08
1d998     11 19 02 F6 | 	mov	arg04, local03
1d99c     02 18 46 F5 | 	or	arg04, #2
1d9a0     00 12 06 F6 | 	mov	arg01, #0
1d9a4     00 14 06 F6 | 	mov	arg02, #0
1d9a8     34 31 B0 FD | 	call	#__system__pack_0508
1d9ac     84 00 90 FD | 	jmp	#LR__2664
1d9b0                 | LR__2656
1d9b0     00 24 0E F2 | 	cmp	local04, #0 wz
1d9b4     20 00 90 AD |  if_e	jmp	#LR__2659
1d9b8     01 24 66 F0 | 	shl	local04, #1
1d9bc     97 0A 48 FB | 	callpa	#(@LR__2658-@LR__2657)>>2,fcache_load_ptr_
1d9c0                 | LR__2657
1d9c0     00 40 00 FF 
1d9c4     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1d9c8     01 26 86 C1 |  if_b	sub	local05, #1
1d9cc     01 24 66 C0 |  if_b	shl	local04, #1
1d9d0     EC FF 9F CD |  if_b	jmp	#LR__2657
1d9d4                 | LR__2658
1d9d4     D0 FE 9F FD | 	jmp	#LR__2650
1d9d8                 | LR__2659
1d9d8     08 22 46 F5 | 	or	local03, #8
1d9dc     00 12 06 F6 | 	mov	arg01, #0
1d9e0     00 14 06 F6 | 	mov	arg02, #0
1d9e4     00 16 06 F6 | 	mov	arg03, #0
1d9e8     11 19 02 F6 | 	mov	arg04, local03
1d9ec     F0 30 B0 FD | 	call	#__system__pack_0508
1d9f0     40 00 90 FD | 	jmp	#LR__2664
1d9f4                 | LR__2660
1d9f4     00 2A 0E F2 | 	cmp	local07, #0 wz
1d9f8     20 00 90 AD |  if_e	jmp	#LR__2663
1d9fc     01 2A 66 F0 | 	shl	local07, #1
1da00     97 0A 48 FB | 	callpa	#(@LR__2662-@LR__2661)>>2,fcache_load_ptr_
1da04                 | LR__2661
1da04     00 40 00 FF 
1da08     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1da0c     01 2C 86 C1 |  if_b	sub	local08, #1
1da10     01 2A 66 C0 |  if_b	shl	local07, #1
1da14     EC FF 9F CD |  if_b	jmp	#LR__2661
1da18                 | LR__2662
1da18     98 FE 9F FD | 	jmp	#LR__2651
1da1c                 | LR__2663
1da1c     08 22 46 F5 | 	or	local03, #8
1da20     00 12 06 F6 | 	mov	arg01, #0
1da24     00 14 06 F6 | 	mov	arg02, #0
1da28     00 16 06 F6 | 	mov	arg03, #0
1da2c     11 19 02 F6 | 	mov	arg04, local03
1da30     AC 30 B0 FD | 	call	#__system__pack_0508
1da34                 | LR__2664
1da34     A7 F0 03 F6 | 	mov	ptra, fp
1da38     B2 00 A0 FD | 	call	#popregs_
1da3c                 | __system___float_mul_ret
1da3c     2D 00 64 FD | 	ret
1da40                 | 
1da40                 | __system___float_div
1da40     0E 4A 05 F6 | 	mov	COUNT_, #14
1da44     A8 00 A0 FD | 	call	#pushregs_
1da48     09 23 02 F6 | 	mov	local03, arg01
1da4c     0A 25 02 F6 | 	mov	local04, arg02
1da50     11 27 02 F6 | 	mov	local05, local03
1da54     13 29 02 F6 | 	mov	local06, local05
1da58     16 28 46 F7 | 	zerox	local06, #22
1da5c     13 2B 02 F6 | 	mov	local07, local05
1da60     01 2A 66 F0 | 	shl	local07, #1
1da64     18 2A 46 F0 | 	shr	local07, #24
1da68     1F 26 46 F0 | 	shr	local05, #31
1da6c     12 FB 01 F6 | 	mov	result1, local04
1da70     FD 2C 02 F6 | 	mov	local08, result1
1da74     16 2F 02 F6 | 	mov	local09, local08
1da78     16 2E 46 F7 | 	zerox	local09, #22
1da7c     16 31 02 F6 | 	mov	local10, local08
1da80     01 30 66 F0 | 	shl	local10, #1
1da84     18 30 46 F0 | 	shr	local10, #24
1da88     1F 2C 46 F0 | 	shr	local08, #31
1da8c     16 27 62 F5 | 	xor	local05, local08
1da90     FF 2A 0E F2 | 	cmp	local07, #255 wz
1da94     D4 00 90 AD |  if_e	jmp	#LR__2675
1da98     FF 30 0E F2 | 	cmp	local10, #255 wz
1da9c     04 01 90 AD |  if_e	jmp	#LR__2676
1daa0     00 2A 0E F2 | 	cmp	local07, #0 wz
1daa4     24 01 90 AD |  if_e	jmp	#LR__2677
1daa8     17 28 26 F4 | 	bith	local06, #23
1daac                 | LR__2670
1daac     00 30 0E F2 | 	cmp	local10, #0 wz
1dab0     70 01 90 AD |  if_e	jmp	#LR__2681
1dab4     17 2E 26 F4 | 	bith	local09, #23
1dab8                 | LR__2671
1dab8     18 2B 82 F1 | 	sub	local07, local10
1dabc     15 33 02 F6 | 	mov	local11, local07
1dac0     14 13 02 F6 | 	mov	arg01, local06
1dac4     02 12 46 F0 | 	shr	arg01, #2
1dac8     1E 28 66 F0 | 	shl	local06, #30
1dacc     14 15 02 F6 | 	mov	arg02, local06
1dad0     17 17 02 F6 | 	mov	arg03, local09
1dad4     28 12 62 FD | 	setq	arg01
1dad8     0B 15 12 FD | 	qdiv	arg02, arg03
1dadc     00 34 06 F6 | 	mov	local12, #0
1dae0     18 1E 62 FD | 	getqx	local01
1dae4     19 FC 61 FD | 	getqy	result2
1dae8     FE 20 02 F6 | 	mov	local02, result2
1daec     0F 37 02 F6 | 	mov	local13, local01
1daf0     00 20 4E F2 | 	cmps	local02, #0 wz
1daf4     1B 39 02 F6 | 	mov	local14, local13
1daf8     19 38 66 F0 | 	shl	local14, #25
1dafc     01 34 06 56 |  if_ne	mov	local12, #1
1db00     1A 39 42 F5 | 	or	local14, local12
1db04     07 36 46 F0 | 	shr	local13, #7
1db08     00 80 00 FF 
1db0c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1db10     1C 00 90 CD |  if_b	jmp	#LR__2672
1db14     01 32 06 F1 | 	add	local11, #1
1db18     01 38 46 F0 | 	shr	local14, #1
1db1c     1B 35 02 F6 | 	mov	local12, local13
1db20     1F 34 66 F0 | 	shl	local12, #31
1db24     1A 39 42 F5 | 	or	local14, local12
1db28     01 36 46 F0 | 	shr	local13, #1
1db2c     24 00 90 FD | 	jmp	#LR__2674
1db30                 | LR__2672
1db30     00 40 00 FF 
1db34     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1db38     18 00 90 3D |  if_ae	jmp	#LR__2673
1db3c     01 32 86 F1 | 	sub	local11, #1
1db40     01 36 66 F0 | 	shl	local13, #1
1db44     1C 35 02 F6 | 	mov	local12, local14
1db48     1F 34 46 F0 | 	shr	local12, #31
1db4c     1A 37 42 F5 | 	or	local13, local12
1db50     01 38 66 F0 | 	shl	local14, #1
1db54                 | LR__2673
1db54                 | LR__2674
1db54     1B 13 02 F6 | 	mov	arg01, local13
1db58     1C 15 02 F6 | 	mov	arg02, local14
1db5c     19 17 02 F6 | 	mov	arg03, local11
1db60     13 19 02 F6 | 	mov	arg04, local05
1db64     78 2F B0 FD | 	call	#__system__pack_0508
1db68     F8 00 90 FD | 	jmp	#LR__2685
1db6c                 | LR__2675
1db6c     00 28 0E F2 | 	cmp	local06, #0 wz
1db70     11 FB 01 56 |  if_ne	mov	result1, local03
1db74     EC 00 90 5D |  if_ne	jmp	#LR__2685
1db78     FF 30 0E F2 | 	cmp	local10, #255 wz
1db7c     00 F8 3F AF 
1db80     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1db84     DC 00 90 AD |  if_e	jmp	#LR__2685
1db88     02 26 46 F5 | 	or	local05, #2
1db8c     00 12 06 F6 | 	mov	arg01, #0
1db90     00 14 06 F6 | 	mov	arg02, #0
1db94     15 17 02 F6 | 	mov	arg03, local07
1db98     13 19 02 F6 | 	mov	arg04, local05
1db9c     40 2F B0 FD | 	call	#__system__pack_0508
1dba0     C0 00 90 FD | 	jmp	#LR__2685
1dba4                 | LR__2676
1dba4     00 2E 0E F2 | 	cmp	local09, #0 wz
1dba8     12 FB 01 56 |  if_ne	mov	result1, local04
1dbac     B4 00 90 5D |  if_ne	jmp	#LR__2685
1dbb0     13 19 02 F6 | 	mov	arg04, local05
1dbb4     08 18 46 F5 | 	or	arg04, #8
1dbb8     00 12 06 F6 | 	mov	arg01, #0
1dbbc     00 14 06 F6 | 	mov	arg02, #0
1dbc0     00 16 06 F6 | 	mov	arg03, #0
1dbc4     18 2F B0 FD | 	call	#__system__pack_0508
1dbc8     98 00 90 FD | 	jmp	#LR__2685
1dbcc                 | LR__2677
1dbcc     00 28 0E F2 | 	cmp	local06, #0 wz
1dbd0     20 00 90 AD |  if_e	jmp	#LR__2680
1dbd4     01 28 66 F0 | 	shl	local06, #1
1dbd8     97 0A 48 FB | 	callpa	#(@LR__2679-@LR__2678)>>2,fcache_load_ptr_
1dbdc                 | LR__2678
1dbdc     00 40 00 FF 
1dbe0     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1dbe4     01 2A 86 C1 |  if_b	sub	local07, #1
1dbe8     01 28 66 C0 |  if_b	shl	local06, #1
1dbec     EC FF 9F CD |  if_b	jmp	#LR__2678
1dbf0                 | LR__2679
1dbf0     B8 FE 9F FD | 	jmp	#LR__2670
1dbf4                 | LR__2680
1dbf4     00 30 0E F2 | 	cmp	local10, #0 wz
1dbf8     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1dbfc     00 F8 3F AF 
1dc00     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1dc04     5C 00 90 AD |  if_e	jmp	#LR__2685
1dc08     13 19 02 F6 | 	mov	arg04, local05
1dc0c     08 18 46 F5 | 	or	arg04, #8
1dc10     00 12 06 F6 | 	mov	arg01, #0
1dc14     00 14 06 F6 | 	mov	arg02, #0
1dc18     00 16 06 F6 | 	mov	arg03, #0
1dc1c     C0 2E B0 FD | 	call	#__system__pack_0508
1dc20     40 00 90 FD | 	jmp	#LR__2685
1dc24                 | LR__2681
1dc24     00 2E 0E F2 | 	cmp	local09, #0 wz
1dc28     20 00 90 AD |  if_e	jmp	#LR__2684
1dc2c     01 2E 66 F0 | 	shl	local09, #1
1dc30     97 0A 48 FB | 	callpa	#(@LR__2683-@LR__2682)>>2,fcache_load_ptr_
1dc34                 | LR__2682
1dc34     00 40 00 FF 
1dc38     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1dc3c     01 30 86 C1 |  if_b	sub	local10, #1
1dc40     01 2E 66 C0 |  if_b	shl	local09, #1
1dc44     EC FF 9F CD |  if_b	jmp	#LR__2682
1dc48                 | LR__2683
1dc48     6C FE 9F FD | 	jmp	#LR__2671
1dc4c                 | LR__2684
1dc4c     02 26 46 F5 | 	or	local05, #2
1dc50     00 12 06 F6 | 	mov	arg01, #0
1dc54     00 14 06 F6 | 	mov	arg02, #0
1dc58     00 16 06 F6 | 	mov	arg03, #0
1dc5c     13 19 02 F6 | 	mov	arg04, local05
1dc60     7C 2E B0 FD | 	call	#__system__pack_0508
1dc64                 | LR__2685
1dc64     A7 F0 03 F6 | 	mov	ptra, fp
1dc68     B2 00 A0 FD | 	call	#popregs_
1dc6c                 | __system___float_div_ret
1dc6c     2D 00 64 FD | 	ret
1dc70                 | 
1dc70                 | __system___float_cmp
1dc70     00 C0 3F FF 
1dc74     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1dc78     00 C0 3F CF 
1dc7c     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1dc80     0B FB 01 36 |  if_ae	mov	result1, arg03
1dc84     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1dc88     00 C0 7F FF 
1dc8c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1dc90     00 C0 7F CF 
1dc94     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1dc98     0B FB 01 36 |  if_ae	mov	result1, arg03
1dc9c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1dca0     00 12 56 F2 | 	cmps	arg01, #0 wc
1dca4     2C 00 90 3D |  if_ae	jmp	#LR__2690
1dca8     00 14 56 F2 | 	cmps	arg02, #0 wc
1dcac     0A FB 01 C6 |  if_b	mov	result1, arg02
1dcb0     09 FB 81 C1 |  if_b	sub	result1, arg01
1dcb4     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1dcb8     00 14 0E F2 | 	cmp	arg02, #0 wz
1dcbc     00 00 40 AF 
1dcc0     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1dcc4     00 FA 05 A6 |  if_e	mov	result1, #0
1dcc8     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1dccc     01 FA 65 F6 | 	neg	result1, #1
1dcd0     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1dcd4                 | LR__2690
1dcd4     00 14 56 F2 | 	cmps	arg02, #0 wc
1dcd8     1C 00 90 3D |  if_ae	jmp	#LR__2691
1dcdc     00 12 0E F2 | 	cmp	arg01, #0 wz
1dce0     00 00 40 AF 
1dce4     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1dce8     00 FA 05 A6 |  if_e	mov	result1, #0
1dcec     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1dcf0     01 FA 05 F6 | 	mov	result1, #1
1dcf4     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1dcf8                 | LR__2691
1dcf8     0A 13 82 F1 | 	sub	arg01, arg02
1dcfc     09 FB 01 F6 | 	mov	result1, arg01
1dd00                 | __system___float_cmp_ret
1dd00     2D 00 64 FD | 	ret
1dd04                 | 
1dd04                 | __system___float_tointeger
1dd04     02 4A 05 F6 | 	mov	COUNT_, #2
1dd08     A8 00 A0 FD | 	call	#pushregs_
1dd0c     50 00 B0 FD | 	call	#__system___float_Unpack
1dd10     FF FF 7F FF 
1dd14     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1dd18     34 00 90 CD |  if_b	jmp	#LR__2700
1dd1c     1F FC 55 F2 | 	cmps	result2, #31 wc
1dd20     2C 00 90 3D |  if_ae	jmp	#LR__2700
1dd24     02 FE 65 F0 | 	shl	result3, #2
1dd28     1E 1E 06 F6 | 	mov	local01, #30
1dd2c     FE 1E 82 F1 | 	sub	local01, result2
1dd30     0F FF 41 F0 | 	shr	result3, local01
1dd34     FF 20 02 F6 | 	mov	local02, result3
1dd38     0A 21 02 F1 | 	add	local02, arg02
1dd3c     01 20 46 F0 | 	shr	local02, #1
1dd40     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd44     10 21 62 56 |  if_ne	neg	local02, local02
1dd48     10 FB 01 F6 | 	mov	result1, local02
1dd4c     04 00 90 FD | 	jmp	#LR__2701
1dd50                 | LR__2700
1dd50     00 FA 05 F6 | 	mov	result1, #0
1dd54                 | LR__2701
1dd54     A7 F0 03 F6 | 	mov	ptra, fp
1dd58     B2 00 A0 FD | 	call	#popregs_
1dd5c                 | __system___float_tointeger_ret
1dd5c     2D 00 64 FD | 	ret
1dd60                 | 
1dd60                 | __system___float_Unpack
1dd60     09 01 02 F6 | 	mov	_var01, arg01
1dd64     1F 00 46 F0 | 	shr	_var01, #31
1dd68     09 03 02 F6 | 	mov	_var02, arg01
1dd6c     01 02 66 F0 | 	shl	_var02, #1
1dd70     18 02 4E F0 | 	shr	_var02, #24 wz
1dd74     17 13 06 F4 | 	bitl	arg01, #279
1dd78     06 12 66 50 |  if_ne	shl	arg01, #6
1dd7c     1D 12 26 54 |  if_ne	bith	arg01, #29
1dd80     1C 00 90 5D |  if_ne	jmp	#LR__2710
1dd84     09 05 92 F7 | 	encod	_var03, arg01 wc
1dd88     01 04 06 C1 |  if_b	add	_var03, #1
1dd8c     17 04 86 F1 | 	sub	_var03, #23
1dd90     02 03 02 F6 | 	mov	_var02, _var03
1dd94     07 FC 05 F6 | 	mov	result2, #7
1dd98     02 FD 81 F1 | 	sub	result2, _var03
1dd9c     FE 12 62 F0 | 	shl	arg01, result2
1dda0                 | LR__2710
1dda0     7F 02 86 F1 | 	sub	_var02, #127
1dda4     09 FF 01 F6 | 	mov	result3, arg01
1dda8     00 FB 01 F6 | 	mov	result1, _var01
1ddac     01 FD 01 F6 | 	mov	result2, _var02
1ddb0                 | __system___float_Unpack_ret
1ddb0     2D 00 64 FD | 	ret
1ddb4                 | 
1ddb4                 | __system___float_Pack
1ddb4     00 00 06 F6 | 	mov	_var01, #0
1ddb8     00 16 0E F2 | 	cmp	arg03, #0 wz
1ddbc     8C 00 90 AD |  if_e	jmp	#LR__2721
1ddc0     0B 03 92 F7 | 	encod	_var02, arg03 wc
1ddc4     01 02 06 C1 |  if_b	add	_var02, #1
1ddc8     21 00 06 F6 | 	mov	_var01, #33
1ddcc     01 01 82 F1 | 	sub	_var01, _var02
1ddd0     00 17 62 F0 | 	shl	arg03, _var01
1ddd4     03 02 06 F6 | 	mov	_var02, #3
1ddd8     00 03 82 F1 | 	sub	_var02, _var01
1dddc     01 15 02 F1 | 	add	arg02, _var02
1dde0     0A 05 02 F6 | 	mov	_var03, arg02
1dde4     00 17 06 F1 | 	add	arg03, #256
1dde8     0B 03 02 F6 | 	mov	_var02, arg03
1ddec     FF 02 2E F5 | 	andn	_var02, #255 wz
1ddf0     01 04 06 A1 |  if_e	add	_var03, #1
1ddf4     7F 04 06 F1 | 	add	_var03, #127
1ddf8     FF FF 7F FF 
1ddfc     E9 05 46 F3 | 	fges	_var03, ##-23
1de00     FF 04 66 F3 | 	fles	_var03, #255
1de04     01 04 56 F2 | 	cmps	_var03, #1 wc
1de08     1C 00 90 3D |  if_ae	jmp	#LR__2720
1de0c     01 16 46 F0 | 	shr	arg03, #1
1de10     1F 02 C6 F9 | 	decod	_var02, #31
1de14     0B 03 02 F1 | 	add	_var02, arg03
1de18     02 05 62 F6 | 	neg	_var03, _var03
1de1c     02 03 42 F0 | 	shr	_var02, _var03
1de20     01 17 02 F6 | 	mov	arg03, _var02
1de24     00 04 06 F6 | 	mov	_var03, #0
1de28                 | LR__2720
1de28     09 FB 01 F6 | 	mov	result1, arg01
1de2c     1F FA 65 F0 | 	shl	result1, #31
1de30     02 03 02 F6 | 	mov	_var02, _var03
1de34     17 02 66 F0 | 	shl	_var02, #23
1de38     01 FB 41 F5 | 	or	result1, _var02
1de3c     0B 07 02 F6 | 	mov	_var04, arg03
1de40     09 06 46 F0 | 	shr	_var04, #9
1de44     03 FB 41 F5 | 	or	result1, _var04
1de48     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1de4c                 | LR__2721
1de4c     00 FB 01 F6 | 	mov	result1, _var01
1de50                 | __system___float_Pack_ret
1de50     2D 00 64 FD | 	ret
1de54                 | 
1de54                 | __system___basic_print_float
1de54     05 4A 05 F6 | 	mov	COUNT_, #5
1de58     A8 00 A0 FD | 	call	#pushregs_
1de5c     09 1F 02 F6 | 	mov	local01, arg01
1de60     0A 21 02 F6 | 	mov	local02, arg02
1de64     0B 23 0A F6 | 	mov	local03, arg03 wz
1de68     0C 25 02 F6 | 	mov	local04, arg04
1de6c     14 00 90 5D |  if_ne	jmp	#LR__2730
1de70     23 24 0E F2 | 	cmp	local04, #35 wz
1de74     80 02 10 AF 
1de78     00 26 06 A6 |  if_e	mov	local05, ##537198592
1de7c     1D 26 C6 59 |  if_ne	decod	local05, #29
1de80     13 23 02 F6 | 	mov	local03, local05
1de84                 | LR__2730
1de84     0F 13 02 F6 | 	mov	arg01, local01
1de88     3C 27 B0 FD | 	call	#__system___gettxfunc
1de8c     FD 26 0A F6 | 	mov	local05, result1 wz
1de90     00 FA 05 A6 |  if_e	mov	result1, #0
1de94     13 13 02 56 |  if_ne	mov	arg01, local05
1de98     11 15 02 56 |  if_ne	mov	arg02, local03
1de9c     10 17 02 56 |  if_ne	mov	arg03, local02
1dea0     12 19 02 56 |  if_ne	mov	arg04, local04
1dea4     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1dea8     A7 F0 03 F6 | 	mov	ptra, fp
1deac     B2 00 A0 FD | 	call	#popregs_
1deb0                 | __system___basic_print_float_ret
1deb0     2D 00 64 FD | 	ret
1deb4                 | 
1deb4                 | __system____builtin_atoi
1deb4     07 4A 05 F6 | 	mov	COUNT_, #7
1deb8     A8 00 A0 FD | 	call	#pushregs_
1debc                 | __system____builtin_atoi_enter
1debc     09 1F 02 F6 | 	mov	local01, arg01
1dec0     0A 21 02 F6 | 	mov	local02, arg02
1dec4     00 22 06 F6 | 	mov	local03, #0
1dec8     00 24 06 F6 | 	mov	local04, #0
1decc     00 26 06 F6 | 	mov	local05, #0
1ded0     97 08 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1ded4                 | LR__2740
1ded4     0F 29 C2 FA | 	rdbyte	local06, local01
1ded8     20 28 0E F2 | 	cmp	local06, #32 wz
1dedc     01 1E 06 A1 |  if_e	add	local01, #1
1dee0     F0 FF 9F AD |  if_e	jmp	#LR__2740
1dee4                 | LR__2741
1dee4     0F 2B C2 FA | 	rdbyte	local07, local01
1dee8                 | LR__2742
1dee8     2D 2A 0E F2 | 	cmp	local07, #45 wz
1deec     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1def0     18 00 90 5D |  if_ne	jmp	#LR__2743
1def4     01 1E 06 F1 | 	add	local01, #1
1def8     2D 2A 0E F2 | 	cmp	local07, #45 wz
1defc     01 28 06 A6 |  if_e	mov	local06, #1
1df00     14 27 C2 A2 |  if_e	subr	local05, local06
1df04     0F 2B C2 FA | 	rdbyte	local07, local01
1df08     DC FF 9F FD | 	jmp	#LR__2742
1df0c                 | LR__2743
1df0c     97 48 48 FB | 	callpa	#(@LR__2751-@LR__2744)>>2,fcache_load_ptr_
1df10                 | LR__2744
1df10                 | LR__2745
1df10     0F 2B C2 FA | 	rdbyte	local07, local01
1df14     5F 2A 0E F2 | 	cmp	local07, #95 wz
1df18     01 1E 06 F1 | 	add	local01, #1
1df1c     F0 FF 9F AD |  if_e	jmp	#LR__2745
1df20     30 2A 0E F2 | 	cmp	local07, #48 wz
1df24     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1df28     00 24 06 A6 |  if_e	mov	local04, #0
1df2c     60 00 90 AD |  if_e	jmp	#LR__2750
1df30     31 2A 56 F2 | 	cmps	local07, #49 wc
1df34     18 00 90 CD |  if_b	jmp	#LR__2746
1df38     3A 2A 56 F2 | 	cmps	local07, #58 wc
1df3c     15 25 02 C6 |  if_b	mov	local04, local07
1df40     30 24 86 C1 |  if_b	sub	local04, #48
1df44     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1df48     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1df4c     40 00 90 CD |  if_b	jmp	#LR__2749
1df50                 | LR__2746
1df50     0B 20 56 F2 | 	cmps	local02, #11 wc
1df54     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1df58     14 00 90 CD |  if_b	jmp	#LR__2747
1df5c     67 2A 56 F2 | 	cmps	local07, #103 wc
1df60     61 2A 86 C1 |  if_b	sub	local07, #97
1df64     0A 24 06 C6 |  if_b	mov	local04, #10
1df68     15 25 02 C1 |  if_b	add	local04, local07
1df6c     20 00 90 CD |  if_b	jmp	#LR__2748
1df70                 | LR__2747
1df70     0B 20 56 F2 | 	cmps	local02, #11 wc
1df74     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1df78     24 00 90 CD |  if_b	jmp	#LR__2752
1df7c     47 2A 56 F2 | 	cmps	local07, #71 wc
1df80     41 2A 86 C1 |  if_b	sub	local07, #65
1df84     0A 24 06 C6 |  if_b	mov	local04, #10
1df88     15 25 02 C1 |  if_b	add	local04, local07
1df8c     10 00 90 3D |  if_ae	jmp	#LR__2752
1df90                 | LR__2748
1df90                 | LR__2749
1df90                 | LR__2750
1df90     11 21 02 FD | 	qmul	local02, local03
1df94     18 22 62 FD | 	getqx	local03
1df98     12 23 02 F1 | 	add	local03, local04
1df9c     70 FF 9F FD | 	jmp	#LR__2744
1dfa0                 | LR__2751
1dfa0                 | LR__2752
1dfa0     00 20 0E F2 | 	cmp	local02, #0 wz
1dfa4     64 00 90 5D |  if_ne	jmp	#LR__2758
1dfa8     78 2A 0E F2 | 	cmp	local07, #120 wz
1dfac     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1dfb0     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1dfb4     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1dfb8     14 00 90 5D |  if_ne	jmp	#LR__2753
1dfbc     0F 13 02 F6 | 	mov	arg01, local01
1dfc0     10 14 06 F6 | 	mov	arg02, #16
1dfc4     EC FE BF FD | 	call	#__system____builtin_atoi
1dfc8     FD 22 02 F6 | 	mov	local03, result1
1dfcc     3C 00 90 FD | 	jmp	#LR__2757
1dfd0                 | LR__2753
1dfd0     62 2A 0E F2 | 	cmp	local07, #98 wz
1dfd4     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1dfd8     14 00 90 5D |  if_ne	jmp	#LR__2754
1dfdc     0F 13 02 F6 | 	mov	arg01, local01
1dfe0     02 14 06 F6 | 	mov	arg02, #2
1dfe4     CC FE BF FD | 	call	#__system____builtin_atoi
1dfe8     FD 22 02 F6 | 	mov	local03, result1
1dfec     1C 00 90 FD | 	jmp	#LR__2756
1dff0                 | LR__2754
1dff0     6F 2A 0E F2 | 	cmp	local07, #111 wz
1dff4     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1dff8     10 00 90 5D |  if_ne	jmp	#LR__2755
1dffc     0F 13 02 F6 | 	mov	arg01, local01
1e000     08 14 06 F6 | 	mov	arg02, #8
1e004     AC FE BF FD | 	call	#__system____builtin_atoi
1e008     FD 22 02 F6 | 	mov	local03, result1
1e00c                 | LR__2755
1e00c                 | LR__2756
1e00c                 | LR__2757
1e00c                 | LR__2758
1e00c     00 26 0E F2 | 	cmp	local05, #0 wz
1e010     11 23 62 56 |  if_ne	neg	local03, local03
1e014     11 FB 01 F6 | 	mov	result1, local03
1e018     A7 F0 03 F6 | 	mov	ptra, fp
1e01c     B2 00 A0 FD | 	call	#popregs_
1e020                 | __system____builtin_atoi_ret
1e020     2D 00 64 FD | 	ret
1e024                 | 
1e024                 | __system____builtin_atof
1e024     07 4A 05 F6 | 	mov	COUNT_, #7
1e028     A8 00 A0 FD | 	call	#pushregs_
1e02c     09 1F 02 F6 | 	mov	local01, arg01
1e030     00 20 06 F6 | 	mov	local02, #0
1e034     00 22 06 F6 | 	mov	local03, #0
1e038     00 24 06 F6 | 	mov	local04, #0
1e03c     00 26 06 F6 | 	mov	local05, #0
1e040     97 08 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1e044                 | LR__2760
1e044     0F 17 C2 FA | 	rdbyte	arg03, local01
1e048     20 16 0E F2 | 	cmp	arg03, #32 wz
1e04c     01 1E 06 A1 |  if_e	add	local01, #1
1e050     F0 FF 9F AD |  if_e	jmp	#LR__2760
1e054                 | LR__2761
1e054     0F 29 C2 FA | 	rdbyte	local06, local01
1e058                 | LR__2762
1e058     2B 28 0E F2 | 	cmp	local06, #43 wz
1e05c     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1e060     14 00 90 5D |  if_ne	jmp	#LR__2763
1e064     2D 28 0E F2 | 	cmp	local06, #45 wz
1e068     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1e06c     01 1E 06 F1 | 	add	local01, #1
1e070     0F 29 C2 FA | 	rdbyte	local06, local01
1e074     E0 FF 9F FD | 	jmp	#LR__2762
1e078                 | LR__2763
1e078                 | LR__2764
1e078     97 08 48 FB | 	callpa	#(@LR__2766-@LR__2765)>>2,fcache_load_ptr_
1e07c                 | LR__2765
1e07c     0F 29 C2 FA | 	rdbyte	local06, local01
1e080     5F 28 0E F2 | 	cmp	local06, #95 wz
1e084     01 1E 06 F1 | 	add	local01, #1
1e088     F0 FF 9F AD |  if_e	jmp	#LR__2765
1e08c                 | LR__2766
1e08c     00 28 0E F2 | 	cmp	local06, #0 wz
1e090     5C 00 90 AD |  if_e	jmp	#LR__2768
1e094     30 28 56 F2 | 	cmps	local06, #48 wc
1e098     44 00 90 CD |  if_b	jmp	#LR__2767
1e09c     3A 28 56 F2 | 	cmps	local06, #58 wc
1e0a0     3C 00 90 3D |  if_ae	jmp	#LR__2767
1e0a4     10 13 02 F6 | 	mov	arg01, local02
1e0a8     00 90 20 FF 
1e0ac     00 14 06 F6 | 	mov	arg02, ##1092616192
1e0b0     88 F7 BF FD | 	call	#__system___float_mul
1e0b4     FD 20 02 F6 | 	mov	local02, result1
1e0b8     30 28 86 F1 | 	sub	local06, #48
1e0bc     14 13 02 F6 | 	mov	arg01, local06
1e0c0     74 F3 BF FD | 	call	#__system___float_fromuns
1e0c4     FD 14 02 F6 | 	mov	arg02, result1
1e0c8     10 13 02 F6 | 	mov	arg01, local02
1e0cc     9C F3 BF FD | 	call	#__system___float_add
1e0d0     FD 20 02 F6 | 	mov	local02, result1
1e0d4     00 26 0E F2 | 	cmp	local05, #0 wz
1e0d8     01 22 86 51 |  if_ne	sub	local03, #1
1e0dc     98 FF 9F FD | 	jmp	#LR__2764
1e0e0                 | LR__2767
1e0e0     2E 28 0E F2 | 	cmp	local06, #46 wz
1e0e4     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1e0e8     01 26 06 A6 |  if_e	mov	local05, #1
1e0ec     88 FF 9F AD |  if_e	jmp	#LR__2764
1e0f0                 | LR__2768
1e0f0     45 28 0E F2 | 	cmp	local06, #69 wz
1e0f4     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1e0f8     18 00 90 5D |  if_ne	jmp	#LR__2769
1e0fc     0F 13 02 F6 | 	mov	arg01, local01
1e100     00 14 06 F6 | 	mov	arg02, #0
1e104     AC FD BF FD | 	call	#__system____builtin_atoi
1e108     11 FB 01 F1 | 	add	result1, local03
1e10c     FD 2A 02 F6 | 	mov	local07, result1
1e110     04 00 90 FD | 	jmp	#LR__2770
1e114                 | LR__2769
1e114     11 2B 02 F6 | 	mov	local07, local03
1e118                 | LR__2770
1e118     15 17 02 F6 | 	mov	arg03, local07
1e11c     10 13 02 F6 | 	mov	arg01, local02
1e120     00 90 20 FF 
1e124     00 14 06 F6 | 	mov	arg02, ##1092616192
1e128     BC 06 B0 FD | 	call	#__system___float_pow_n
1e12c     12 FB 61 F5 | 	xor	result1, local04
1e130     A7 F0 03 F6 | 	mov	ptra, fp
1e134     B2 00 A0 FD | 	call	#popregs_
1e138                 | __system____builtin_atof_ret
1e138     2D 00 64 FD | 	ret
1e13c                 | 
1e13c                 | __system____builtin_ilogb
1e13c     20 FC BF FD | 	call	#__system___float_Unpack
1e140     00 FE 0D F2 | 	cmp	result3, #0 wz
1e144     00 00 40 AF 
1e148     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1e14c     24 00 90 AD |  if_e	jmp	#LR__2781
1e150     80 FC 0D F2 | 	cmp	result2, #128 wz
1e154     18 00 90 5D |  if_ne	jmp	#LR__2780
1e158     00 00 10 FF 
1e15c     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1e160     1E FA CD A9 |  if_e	bmask	result1, #30
1e164     0C 00 90 AD |  if_e	jmp	#LR__2781
1e168     1F FA C5 F9 | 	decod	result1, #31
1e16c     04 00 90 FD | 	jmp	#LR__2781
1e170                 | LR__2780
1e170     FE FA 01 F6 | 	mov	result1, result2
1e174                 | LR__2781
1e174                 | __system____builtin_ilogb_ret
1e174     2D 00 64 FD | 	ret
1e178                 | 
1e178                 | __system____builtin_sinf
1e178     03 4A 05 F6 | 	mov	COUNT_, #3
1e17c     A8 00 A0 FD | 	call	#pushregs_
1e180     09 1F 02 F6 | 	mov	local01, arg01
1e184     87 64 20 FF 
1e188     DB 15 06 F6 | 	mov	arg02, ##1086918619
1e18c     B0 F8 BF FD | 	call	#__system___float_div
1e190     FD 12 02 F6 | 	mov	arg01, result1
1e194     00 14 06 F6 | 	mov	arg02, #0
1e198     68 FB BF FD | 	call	#__system___float_tointeger
1e19c     FD 16 0A F6 | 	mov	arg03, result1 wz
1e1a0     44 00 90 AD |  if_e	jmp	#LR__2790
1e1a4     0B 13 52 F6 | 	abs	arg01, arg03 wc
1e1a8     1F 20 C6 C9 |  if_b	decod	local02, #31
1e1ac     00 20 06 36 |  if_ae	mov	local02, #0
1e1b0     84 F2 BF FD | 	call	#__system___float_fromuns
1e1b4     10 FB 61 F5 | 	xor	result1, local02
1e1b8     FD 12 02 F6 | 	mov	arg01, result1
1e1bc     1E 14 C6 F9 | 	decod	arg02, #30
1e1c0     78 F6 BF FD | 	call	#__system___float_mul
1e1c4     FD 12 02 F6 | 	mov	arg01, result1
1e1c8     87 24 20 FF 
1e1cc     DB 15 06 F6 | 	mov	arg02, ##1078530011
1e1d0     68 F6 BF FD | 	call	#__system___float_mul
1e1d4     FD 14 02 F6 | 	mov	arg02, result1
1e1d8     0F 13 02 F6 | 	mov	arg01, local01
1e1dc     1F 14 E6 F4 | 	bitnot	arg02, #31
1e1e0     88 F2 BF FD | 	call	#__system___float_add
1e1e4     FD 1E 02 F6 | 	mov	local01, result1
1e1e8                 | LR__2790
1e1e8     0F 13 02 F6 | 	mov	arg01, local01
1e1ec     66 E6 1E FF 
1e1f0     CD 14 06 F6 | 	mov	arg02, ##1036831949
1e1f4     01 16 06 F6 | 	mov	arg03, #1
1e1f8     74 FA BF FD | 	call	#__system___float_cmp
1e1fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1e200     5C 00 90 3D |  if_ae	jmp	#LR__2791
1e204     0F 13 02 F6 | 	mov	arg01, local01
1e208     66 E6 5E FF 
1e20c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1e210     01 16 66 F6 | 	neg	arg03, #1
1e214     58 FA BF FD | 	call	#__system___float_cmp
1e218     01 FA 55 F2 | 	cmps	result1, #1 wc
1e21c     40 00 90 CD |  if_b	jmp	#LR__2791
1e220     0F 13 02 F6 | 	mov	arg01, local01
1e224     0F 15 02 F6 | 	mov	arg02, local01
1e228     10 F6 BF FD | 	call	#__system___float_mul
1e22c     FD 12 02 F6 | 	mov	arg01, result1
1e230     0F 15 02 F6 | 	mov	arg02, local01
1e234     04 F6 BF FD | 	call	#__system___float_mul
1e238     FD 12 02 F6 | 	mov	arg01, result1
1e23c     00 60 20 FF 
1e240     00 14 06 F6 | 	mov	arg02, ##1086324736
1e244     F8 F7 BF FD | 	call	#__system___float_div
1e248     FD 14 02 F6 | 	mov	arg02, result1
1e24c     0F 13 02 F6 | 	mov	arg01, local01
1e250     1F 14 E6 F4 | 	bitnot	arg02, #31
1e254     14 F2 BF FD | 	call	#__system___float_add
1e258     FD 22 02 F6 | 	mov	local03, result1
1e25c     54 00 90 FD | 	jmp	#LR__2792
1e260                 | LR__2791
1e260     0F 13 02 F6 | 	mov	arg01, local01
1e264     7C 91 26 FF 
1e268     83 15 06 F6 | 	mov	arg02, ##1294137731
1e26c     CC F5 BF FD | 	call	#__system___float_mul
1e270     FD 12 02 F6 | 	mov	arg01, result1
1e274     00 14 06 F6 | 	mov	arg02, #0
1e278     88 FA BF FD | 	call	#__system___float_tointeger
1e27c     02 FA 65 F0 | 	shl	result1, #2
1e280     00 00 A0 FF 
1e284     FD 00 48 FD | 	qrotate	##1073741824, result1
1e288     19 12 62 FD | 	getqy	arg01
1e28c     09 13 52 F6 | 	abs	arg01, arg01 wc
1e290     1F 20 C6 C9 |  if_b	decod	local02, #31
1e294     00 20 06 36 |  if_ae	mov	local02, #0
1e298     9C F1 BF FD | 	call	#__system___float_fromuns
1e29c     10 FB 61 F5 | 	xor	result1, local02
1e2a0     FD 12 02 F6 | 	mov	arg01, result1
1e2a4     00 40 27 FF 
1e2a8     00 14 06 F6 | 	mov	arg02, ##1317011456
1e2ac     90 F7 BF FD | 	call	#__system___float_div
1e2b0     FD 22 02 F6 | 	mov	local03, result1
1e2b4                 | LR__2792
1e2b4     11 FB 01 F6 | 	mov	result1, local03
1e2b8     A7 F0 03 F6 | 	mov	ptra, fp
1e2bc     B2 00 A0 FD | 	call	#popregs_
1e2c0                 | __system____builtin_sinf_ret
1e2c0     2D 00 64 FD | 	ret
1e2c4                 | 
1e2c4                 | __system____builtin_tanf
1e2c4     02 4A 05 F6 | 	mov	COUNT_, #2
1e2c8     A8 00 A0 FD | 	call	#pushregs_
1e2cc     09 1F 02 F6 | 	mov	local01, arg01
1e2d0     A4 FE BF FD | 	call	#__system____builtin_sinf
1e2d4     FD 20 02 F6 | 	mov	local02, result1
1e2d8     0F 15 02 F6 | 	mov	arg02, local01
1e2dc     87 E4 1F FF 
1e2e0     DB 13 06 F6 | 	mov	arg01, ##1070141403
1e2e4     1F 14 E6 F4 | 	bitnot	arg02, #31
1e2e8     80 F1 BF FD | 	call	#__system___float_add
1e2ec     FD 12 02 F6 | 	mov	arg01, result1
1e2f0     84 FE BF FD | 	call	#__system____builtin_sinf
1e2f4     FD 14 02 F6 | 	mov	arg02, result1
1e2f8     10 13 02 F6 | 	mov	arg01, local02
1e2fc     40 F7 BF FD | 	call	#__system___float_div
1e300     A7 F0 03 F6 | 	mov	ptra, fp
1e304     B2 00 A0 FD | 	call	#popregs_
1e308                 | __system____builtin_tanf_ret
1e308     2D 00 64 FD | 	ret
1e30c                 | 
1e30c                 | __system____builtin_asinf
1e30c     01 4A 05 F6 | 	mov	COUNT_, #1
1e310     A8 00 A0 FD | 	call	#pushregs_
1e314     09 1F 02 F6 | 	mov	local01, arg01
1e318     0F 15 02 F6 | 	mov	arg02, local01
1e31c     0F 13 02 F6 | 	mov	arg01, local01
1e320     18 F5 BF FD | 	call	#__system___float_mul
1e324     FD 14 02 F6 | 	mov	arg02, result1
1e328     00 C0 1F FF 
1e32c     00 12 06 F6 | 	mov	arg01, ##1065353216
1e330     1F 14 E6 F4 | 	bitnot	arg02, #31
1e334     34 F1 BF FD | 	call	#__system___float_add
1e338     FD 12 02 F6 | 	mov	arg01, result1
1e33c     24 F4 BF FD | 	call	#__system___float_sqrt
1e340     FD 14 02 F6 | 	mov	arg02, result1
1e344     0F 13 02 F6 | 	mov	arg01, local01
1e348     58 00 B0 FD | 	call	#__system____builtin_atan2f
1e34c     A7 F0 03 F6 | 	mov	ptra, fp
1e350     B2 00 A0 FD | 	call	#popregs_
1e354                 | __system____builtin_asinf_ret
1e354     2D 00 64 FD | 	ret
1e358                 | 
1e358                 | __system____builtin_acosf
1e358     01 4A 05 F6 | 	mov	COUNT_, #1
1e35c     A8 00 A0 FD | 	call	#pushregs_
1e360     09 1F 02 F6 | 	mov	local01, arg01
1e364     0F 15 02 F6 | 	mov	arg02, local01
1e368     0F 13 02 F6 | 	mov	arg01, local01
1e36c     CC F4 BF FD | 	call	#__system___float_mul
1e370     FD 14 02 F6 | 	mov	arg02, result1
1e374     00 C0 1F FF 
1e378     00 12 06 F6 | 	mov	arg01, ##1065353216
1e37c     1F 14 E6 F4 | 	bitnot	arg02, #31
1e380     E8 F0 BF FD | 	call	#__system___float_add
1e384     FD 12 02 F6 | 	mov	arg01, result1
1e388     D8 F3 BF FD | 	call	#__system___float_sqrt
1e38c     FD 12 02 F6 | 	mov	arg01, result1
1e390     0F 15 02 F6 | 	mov	arg02, local01
1e394     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1e398     A7 F0 03 F6 | 	mov	ptra, fp
1e39c     B2 00 A0 FD | 	call	#popregs_
1e3a0                 | __system____builtin_acosf_ret
1e3a0     2D 00 64 FD | 	ret
1e3a4                 | 
1e3a4                 | __system____builtin_atan2f
1e3a4     04 4A 05 F6 | 	mov	COUNT_, #4
1e3a8     A8 00 A0 FD | 	call	#pushregs_
1e3ac     09 1F 02 F6 | 	mov	local01, arg01
1e3b0     0A 21 02 F6 | 	mov	local02, arg02
1e3b4     0F 13 02 F6 | 	mov	arg01, local01
1e3b8     00 14 06 F6 | 	mov	arg02, #0
1e3bc     01 16 06 F6 | 	mov	arg03, #1
1e3c0     AC F8 BF FD | 	call	#__system___float_cmp
1e3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e3c8     28 00 90 5D |  if_ne	jmp	#LR__2800
1e3cc     10 13 02 F6 | 	mov	arg01, local02
1e3d0     00 14 06 F6 | 	mov	arg02, #0
1e3d4     01 16 06 F6 | 	mov	arg03, #1
1e3d8     94 F8 BF FD | 	call	#__system___float_cmp
1e3dc     00 FA 55 F2 | 	cmps	result1, #0 wc
1e3e0     87 24 60 CF 
1e3e4     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1e3e8     DC 00 90 CD |  if_b	jmp	#LR__2801
1e3ec     00 FA 05 F6 | 	mov	result1, #0
1e3f0     D4 00 90 FD | 	jmp	#LR__2801
1e3f4                 | LR__2800
1e3f4     10 13 02 F6 | 	mov	arg01, local02
1e3f8     10 15 02 F6 | 	mov	arg02, local02
1e3fc     3C F4 BF FD | 	call	#__system___float_mul
1e400     FD 22 02 F6 | 	mov	local03, result1
1e404     0F 13 02 F6 | 	mov	arg01, local01
1e408     0F 15 02 F6 | 	mov	arg02, local01
1e40c     2C F4 BF FD | 	call	#__system___float_mul
1e410     FD 14 02 F6 | 	mov	arg02, result1
1e414     11 13 02 F6 | 	mov	arg01, local03
1e418     50 F0 BF FD | 	call	#__system___float_add
1e41c     FD 12 02 F6 | 	mov	arg01, result1
1e420     40 F3 BF FD | 	call	#__system___float_sqrt
1e424     FD 22 02 F6 | 	mov	local03, result1
1e428     10 13 02 F6 | 	mov	arg01, local02
1e42c     11 15 02 F6 | 	mov	arg02, local03
1e430     0C F6 BF FD | 	call	#__system___float_div
1e434     FD 20 02 F6 | 	mov	local02, result1
1e438     0F 13 02 F6 | 	mov	arg01, local01
1e43c     11 15 02 F6 | 	mov	arg02, local03
1e440     FC F5 BF FD | 	call	#__system___float_div
1e444     FD 1E 02 F6 | 	mov	local01, result1
1e448     00 40 27 FF 
1e44c     00 12 06 F6 | 	mov	arg01, ##1317011456
1e450     10 15 02 F6 | 	mov	arg02, local02
1e454     E4 F3 BF FD | 	call	#__system___float_mul
1e458     FD 12 02 F6 | 	mov	arg01, result1
1e45c     00 14 06 F6 | 	mov	arg02, #0
1e460     A0 F8 BF FD | 	call	#__system___float_tointeger
1e464     FD 22 02 F6 | 	mov	local03, result1
1e468     00 40 27 FF 
1e46c     00 12 06 F6 | 	mov	arg01, ##1317011456
1e470     0F 15 02 F6 | 	mov	arg02, local01
1e474     C4 F3 BF FD | 	call	#__system___float_mul
1e478     FD 12 02 F6 | 	mov	arg01, result1
1e47c     00 14 06 F6 | 	mov	arg02, #0
1e480     80 F8 BF FD | 	call	#__system___float_tointeger
1e484     FD 22 52 FD | 	qvector	local03, result1
1e488     87 24 20 FF 
1e48c     DB 23 06 F6 | 	mov	local03, ##1078530011
1e490     19 12 62 FD | 	getqy	arg01
1e494     01 12 C6 F0 | 	sar	arg01, #1
1e498     09 13 52 F6 | 	abs	arg01, arg01 wc
1e49c     1F 24 C6 C9 |  if_b	decod	local04, #31
1e4a0     00 24 06 36 |  if_ae	mov	local04, #0
1e4a4     90 EF BF FD | 	call	#__system___float_fromuns
1e4a8     12 FB 61 F5 | 	xor	result1, local04
1e4ac     FD 12 02 F6 | 	mov	arg01, result1
1e4b0     00 40 27 FF 
1e4b4     00 14 06 F6 | 	mov	arg02, ##1317011456
1e4b8     84 F5 BF FD | 	call	#__system___float_div
1e4bc     FD 14 02 F6 | 	mov	arg02, result1
1e4c0     11 13 02 F6 | 	mov	arg01, local03
1e4c4     74 F3 BF FD | 	call	#__system___float_mul
1e4c8                 | LR__2801
1e4c8     A7 F0 03 F6 | 	mov	ptra, fp
1e4cc     B2 00 A0 FD | 	call	#popregs_
1e4d0                 | __system____builtin_atan2f_ret
1e4d0     2D 00 64 FD | 	ret
1e4d4                 | 
1e4d4                 | __system____builtin_exp2f
1e4d4     04 4A 05 F6 | 	mov	COUNT_, #4
1e4d8     A8 00 A0 FD | 	call	#pushregs_
1e4dc     09 1F 02 F6 | 	mov	local01, arg01
1e4e0     00 7F 21 FF 
1e4e4     00 14 06 F6 | 	mov	arg02, ##1123942400
1e4e8     01 16 66 F6 | 	neg	arg03, #1
1e4ec     80 F7 BF FD | 	call	#__system___float_cmp
1e4f0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e4f4     00 C0 3F 3F 
1e4f8     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1e4fc     DC 00 90 3D |  if_ae	jmp	#LR__2811
1e500     0F 13 02 F6 | 	mov	arg01, local01
1e504     00 7F 61 FF 
1e508     00 14 06 F6 | 	mov	arg02, ##-1023541248
1e50c     01 16 06 F6 | 	mov	arg03, #1
1e510     5C F7 BF FD | 	call	#__system___float_cmp
1e514     00 FA 55 F2 | 	cmps	result1, #0 wc
1e518     00 FA 05 C6 |  if_b	mov	result1, #0
1e51c     BC 00 90 CD |  if_b	jmp	#LR__2811
1e520     0F 13 02 F6 | 	mov	arg01, local01
1e524     00 14 06 F6 | 	mov	arg02, #0
1e528     D8 F7 BF FD | 	call	#__system___float_tointeger
1e52c     FD 20 02 F6 | 	mov	local02, result1
1e530     10 13 52 F6 | 	abs	arg01, local02 wc
1e534     1F 22 C6 C9 |  if_b	decod	local03, #31
1e538     00 22 06 36 |  if_ae	mov	local03, #0
1e53c     F8 EE BF FD | 	call	#__system___float_fromuns
1e540     11 FB 61 F5 | 	xor	result1, local03
1e544     FD 14 02 F6 | 	mov	arg02, result1
1e548     0F 13 02 F6 | 	mov	arg01, local01
1e54c     1F 14 E6 F4 | 	bitnot	arg02, #31
1e550     18 EF BF FD | 	call	#__system___float_add
1e554     FD 24 02 F6 | 	mov	local04, result1
1e558     12 13 02 F6 | 	mov	arg01, local04
1e55c     00 14 06 F6 | 	mov	arg02, #0
1e560     01 16 06 F6 | 	mov	arg03, #1
1e564     08 F7 BF FD | 	call	#__system___float_cmp
1e568     00 FA 55 F2 | 	cmps	result1, #0 wc
1e56c     18 00 90 3D |  if_ae	jmp	#LR__2810
1e570     12 13 02 F6 | 	mov	arg01, local04
1e574     00 C0 1F FF 
1e578     00 14 06 F6 | 	mov	arg02, ##1065353216
1e57c     EC EE BF FD | 	call	#__system___float_add
1e580     FD 24 02 F6 | 	mov	local04, result1
1e584     01 20 86 F1 | 	sub	local02, #1
1e588                 | LR__2810
1e588     7F 20 06 F1 | 	add	local02, #127
1e58c     17 20 66 F0 | 	shl	local02, #23
1e590     12 13 02 F6 | 	mov	arg01, local04
1e594     00 80 26 FF 
1e598     00 14 06 F6 | 	mov	arg02, ##1291845632
1e59c     9C F2 BF FD | 	call	#__system___float_mul
1e5a0     FD 12 02 F6 | 	mov	arg01, result1
1e5a4     00 14 06 F6 | 	mov	arg02, #0
1e5a8     58 F7 BF FD | 	call	#__system___float_tointeger
1e5ac     FD 24 0A F6 | 	mov	local04, result1 wz
1e5b0     10 FB 01 A6 |  if_e	mov	result1, local02
1e5b4     24 00 90 AD |  if_e	jmp	#LR__2811
1e5b8     3E 24 26 F4 | 	bith	local04, #62
1e5bc     0F 24 62 FD | 	qexp	local04
1e5c0     10 13 02 F6 | 	mov	arg01, local02
1e5c4     18 14 62 FD | 	getqx	arg02
1e5c8     01 14 06 F1 | 	add	arg02, #1
1e5cc     01 14 46 F0 | 	shr	arg02, #1
1e5d0     00 80 1F FF 
1e5d4     00 14 06 F1 | 	add	arg02, ##1056964608
1e5d8     60 F2 BF FD | 	call	#__system___float_mul
1e5dc                 | LR__2811
1e5dc     A7 F0 03 F6 | 	mov	ptra, fp
1e5e0     B2 00 A0 FD | 	call	#popregs_
1e5e4                 | __system____builtin_exp2f_ret
1e5e4     2D 00 64 FD | 	ret
1e5e8                 | 
1e5e8                 | __system____builtin_log2f
1e5e8     06 4A 05 F6 | 	mov	COUNT_, #6
1e5ec     A8 00 A0 FD | 	call	#pushregs_
1e5f0     09 1F 02 F6 | 	mov	local01, arg01
1e5f4     09 21 0A F6 | 	mov	local02, arg01 wz
1e5f8     00 00 40 5F 
1e5fc     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1e600     00 40 00 AF 
1e604     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1e608     08 01 90 AD |  if_e	jmp	#LR__2824
1e60c     00 20 56 F2 | 	cmps	local02, #0 wc
1e610     00 E0 3F CF 
1e614     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1e618     F8 00 90 CD |  if_b	jmp	#LR__2824
1e61c     0F 13 02 F6 | 	mov	arg01, local01
1e620     00 90 20 FF 
1e624     00 14 06 F6 | 	mov	arg02, ##1092616192
1e628     01 16 06 F6 | 	mov	arg03, #1
1e62c     40 F6 BF FD | 	call	#__system___float_cmp
1e630     00 FA 0D F2 | 	cmp	result1, #0 wz
1e634     4D 2A 20 AF 
1e638     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1e63c     D4 00 90 AD |  if_e	jmp	#LR__2824
1e640     0F 13 02 F6 | 	mov	arg01, local01
1e644     FC 16 20 FF 
1e648     54 14 06 F6 | 	mov	arg02, ##1076754516
1e64c     01 16 06 F6 | 	mov	arg03, #1
1e650     1C F6 BF FD | 	call	#__system___float_cmp
1e654     00 FA 0D F2 | 	cmp	result1, #0 wz
1e658     55 DC 1F AF 
1e65c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1e660     B0 00 90 AD |  if_e	jmp	#LR__2824
1e664     10 23 02 F6 | 	mov	local03, local02
1e668     17 22 46 F0 | 	shr	local03, #23
1e66c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1e670     17 21 06 F4 | 	bitl	local02, #279
1e674     10 25 02 F6 | 	mov	local04, local02
1e678     FF 22 0E F2 | 	cmp	local03, #255 wz
1e67c     1C 00 90 5D |  if_ne	jmp	#LR__2820
1e680     00 24 0E F2 | 	cmp	local04, #0 wz
1e684     00 C0 3F 5F 
1e688     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1e68c     00 E0 3F AF 
1e690     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1e694     13 FB 01 F6 | 	mov	result1, local05
1e698     78 00 90 FD | 	jmp	#LR__2824
1e69c                 | LR__2820
1e69c     00 22 0E F2 | 	cmp	local03, #0 wz
1e6a0     17 24 26 54 |  if_ne	bith	local04, #23
1e6a4     7F 22 86 51 |  if_ne	sub	local03, #127
1e6a8     28 00 90 5D |  if_ne	jmp	#LR__2823
1e6ac     00 24 0E F2 | 	cmp	local04, #0 wz
1e6b0     00 40 00 AF 
1e6b4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1e6b8     58 00 90 AD |  if_e	jmp	#LR__2824
1e6bc     7E 22 66 F6 | 	neg	local03, #126
1e6c0     97 08 48 FB | 	callpa	#(@LR__2822-@LR__2821)>>2,fcache_load_ptr_
1e6c4                 | LR__2821
1e6c4     17 24 2E F4 | 	testbn	local04, #23 wz
1e6c8     01 24 66 A0 |  if_e	shl	local04, #1
1e6cc     01 22 06 A1 |  if_e	add	local03, #1
1e6d0     F0 FF 9F AD |  if_e	jmp	#LR__2821
1e6d4                 | LR__2822
1e6d4                 | LR__2823
1e6d4     0E 24 62 FD | 	qlog	local04
1e6d8     01 22 86 F1 | 	sub	local03, #1
1e6dc     11 13 52 F6 | 	abs	arg01, local03 wc
1e6e0     1F 28 C6 C9 |  if_b	decod	local06, #31
1e6e4     00 28 06 36 |  if_ae	mov	local06, #0
1e6e8     18 26 62 FD | 	getqx	local05
1e6ec     9B 26 06 F4 | 	bitl	local05, #155
1e6f0     08 26 06 F1 | 	add	local05, #8
1e6f4     04 26 46 F0 | 	shr	local05, #4
1e6f8     00 C0 1F FF 
1e6fc     00 26 06 F1 | 	add	local05, ##1065353216
1e700     34 ED BF FD | 	call	#__system___float_fromuns
1e704     14 FB 61 F5 | 	xor	result1, local06
1e708     FD 14 02 F6 | 	mov	arg02, result1
1e70c     13 13 02 F6 | 	mov	arg01, local05
1e710     58 ED BF FD | 	call	#__system___float_add
1e714                 | LR__2824
1e714     A7 F0 03 F6 | 	mov	ptra, fp
1e718     B2 00 A0 FD | 	call	#popregs_
1e71c                 | __system____builtin_log2f_ret
1e71c     2D 00 64 FD | 	ret
1e720                 | 
1e720                 | __system____builtin_powf
1e720     04 4A 05 F6 | 	mov	COUNT_, #4
1e724     A8 00 A0 FD | 	call	#pushregs_
1e728     09 1F 02 F6 | 	mov	local01, arg01
1e72c     0A 21 02 F6 | 	mov	local02, arg02
1e730     10 13 02 F6 | 	mov	arg01, local02
1e734     00 14 06 F6 | 	mov	arg02, #0
1e738     C8 F5 BF FD | 	call	#__system___float_tointeger
1e73c     FD 22 02 F6 | 	mov	local03, result1
1e740     11 13 52 F6 | 	abs	arg01, local03 wc
1e744     1F 24 C6 C9 |  if_b	decod	local04, #31
1e748     00 24 06 36 |  if_ae	mov	local04, #0
1e74c     E8 EC BF FD | 	call	#__system___float_fromuns
1e750     12 FB 61 F5 | 	xor	result1, local04
1e754     FD 12 02 F6 | 	mov	arg01, result1
1e758     10 15 02 F6 | 	mov	arg02, local02
1e75c     01 16 06 F6 | 	mov	arg03, #1
1e760     0C F5 BF FD | 	call	#__system___float_cmp
1e764     00 FA 0D F2 | 	cmp	result1, #0 wz
1e768     18 00 90 5D |  if_ne	jmp	#LR__2830
1e76c     00 C0 1F FF 
1e770     00 12 06 F6 | 	mov	arg01, ##1065353216
1e774     0F 15 02 F6 | 	mov	arg02, local01
1e778     11 17 02 F6 | 	mov	arg03, local03
1e77c     68 00 B0 FD | 	call	#__system___float_pow_n
1e780     58 00 90 FD | 	jmp	#LR__2831
1e784                 | LR__2830
1e784     0F 13 02 F6 | 	mov	arg01, local01
1e788     00 14 06 F6 | 	mov	arg02, #0
1e78c     01 16 06 F6 | 	mov	arg03, #1
1e790     DC F4 BF FD | 	call	#__system___float_cmp
1e794     00 FA 55 F2 | 	cmps	result1, #0 wc
1e798     00 E0 3F CF 
1e79c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1e7a0     38 00 90 CD |  if_b	jmp	#LR__2831
1e7a4     0F 13 02 F6 | 	mov	arg01, local01
1e7a8     00 14 06 F6 | 	mov	arg02, #0
1e7ac     01 16 06 F6 | 	mov	arg03, #1
1e7b0     BC F4 BF FD | 	call	#__system___float_cmp
1e7b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7b8     00 FA 05 A6 |  if_e	mov	result1, #0
1e7bc     1C 00 90 AD |  if_e	jmp	#LR__2831
1e7c0     0F 13 02 F6 | 	mov	arg01, local01
1e7c4     20 FE BF FD | 	call	#__system____builtin_log2f
1e7c8     FD 12 02 F6 | 	mov	arg01, result1
1e7cc     10 15 02 F6 | 	mov	arg02, local02
1e7d0     68 F0 BF FD | 	call	#__system___float_mul
1e7d4     FD 12 02 F6 | 	mov	arg01, result1
1e7d8     F8 FC BF FD | 	call	#__system____builtin_exp2f
1e7dc                 | LR__2831
1e7dc     A7 F0 03 F6 | 	mov	ptra, fp
1e7e0     B2 00 A0 FD | 	call	#popregs_
1e7e4                 | __system____builtin_powf_ret
1e7e4     2D 00 64 FD | 	ret
1e7e8                 | 
1e7e8                 | __system___float_pow_n
1e7e8     05 4A 05 F6 | 	mov	COUNT_, #5
1e7ec     A8 00 A0 FD | 	call	#pushregs_
1e7f0     09 1F 02 F6 | 	mov	local01, arg01
1e7f4     0A 21 02 F6 | 	mov	local02, arg02
1e7f8     0B 23 02 F6 | 	mov	local03, arg03
1e7fc     00 22 56 F2 | 	cmps	local03, #0 wc
1e800     18 00 90 3D |  if_ae	jmp	#LR__2840
1e804     01 24 06 F6 | 	mov	local04, #1
1e808     11 23 62 F6 | 	neg	local03, local03
1e80c     00 22 56 F2 | 	cmps	local03, #0 wc
1e810     00 FA 05 C6 |  if_b	mov	result1, #0
1e814     94 00 90 CD |  if_b	jmp	#LR__2848
1e818     04 00 90 FD | 	jmp	#LR__2841
1e81c                 | LR__2840
1e81c     00 24 06 F6 | 	mov	local04, #0
1e820                 | LR__2841
1e820     00 C0 1F FF 
1e824     00 26 06 F6 | 	mov	local05, ##1065353216
1e828                 | LR__2842
1e828     01 22 56 F2 | 	cmps	local03, #1 wc
1e82c     30 00 90 CD |  if_b	jmp	#LR__2844
1e830     01 22 CE F7 | 	test	local03, #1 wz
1e834     10 00 90 AD |  if_e	jmp	#LR__2843
1e838     13 13 02 F6 | 	mov	arg01, local05
1e83c     10 15 02 F6 | 	mov	arg02, local02
1e840     F8 EF BF FD | 	call	#__system___float_mul
1e844     FD 26 02 F6 | 	mov	local05, result1
1e848                 | LR__2843
1e848     01 22 C6 F0 | 	sar	local03, #1
1e84c     10 13 02 F6 | 	mov	arg01, local02
1e850     10 15 02 F6 | 	mov	arg02, local02
1e854     E4 EF BF FD | 	call	#__system___float_mul
1e858     FD 20 02 F6 | 	mov	local02, result1
1e85c     C8 FF 9F FD | 	jmp	#LR__2842
1e860                 | LR__2844
1e860     00 24 0E F2 | 	cmp	local04, #0 wz
1e864     14 00 90 AD |  if_e	jmp	#LR__2845
1e868     0F 13 02 F6 | 	mov	arg01, local01
1e86c     13 15 02 F6 | 	mov	arg02, local05
1e870     CC F1 BF FD | 	call	#__system___float_div
1e874     FD 26 02 F6 | 	mov	local05, result1
1e878     2C 00 90 FD | 	jmp	#LR__2847
1e87c                 | LR__2845
1e87c     0F 13 02 F6 | 	mov	arg01, local01
1e880     00 C0 1F FF 
1e884     00 14 06 F6 | 	mov	arg02, ##1065353216
1e888     01 16 06 F6 | 	mov	arg03, #1
1e88c     E0 F3 BF FD | 	call	#__system___float_cmp
1e890     00 FA 0D F2 | 	cmp	result1, #0 wz
1e894     10 00 90 AD |  if_e	jmp	#LR__2846
1e898     0F 13 02 F6 | 	mov	arg01, local01
1e89c     13 15 02 F6 | 	mov	arg02, local05
1e8a0     98 EF BF FD | 	call	#__system___float_mul
1e8a4     FD 26 02 F6 | 	mov	local05, result1
1e8a8                 | LR__2846
1e8a8                 | LR__2847
1e8a8     13 FB 01 F6 | 	mov	result1, local05
1e8ac                 | LR__2848
1e8ac     A7 F0 03 F6 | 	mov	ptra, fp
1e8b0     B2 00 A0 FD | 	call	#popregs_
1e8b4                 | __system___float_pow_n_ret
1e8b4     2D 00 64 FD | 	ret
1e8b8                 | 
1e8b8                 | __system___gc_ptrs
1e8b8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1e8bc     00 03 02 F6 | 	mov	_var02, _var01
1e8c0     76 01 00 FF 
1e8c4     F8 03 06 F1 | 	add	_var02, ##191992
1e8c8     00 FD 09 FB | 	rdlong	result2, _var01 wz
1e8cc     74 00 90 5D |  if_ne	jmp	#LR__2850
1e8d0     01 FD 01 F6 | 	mov	result2, _var02
1e8d4     00 FD 81 F1 | 	sub	result2, _var01
1e8d8     00 03 58 FC | 	wrword	#1, _var01
1e8dc     00 FB 01 F6 | 	mov	result1, _var01
1e8e0     02 FA 05 F1 | 	add	result1, #2
1e8e4     36 00 80 FF 
1e8e8     FD 20 59 FC | 	wrword	##27792, result1
1e8ec     00 FB 01 F6 | 	mov	result1, _var01
1e8f0     04 FA 05 F1 | 	add	result1, #4
1e8f4     FD 00 58 FC | 	wrword	#0, result1
1e8f8     00 FB 01 F6 | 	mov	result1, _var01
1e8fc     06 FA 05 F1 | 	add	result1, #6
1e900     FD 02 58 FC | 	wrword	#1, result1
1e904     10 00 06 F1 | 	add	_var01, #16
1e908     FE FC 51 F6 | 	abs	result2, result2 wc
1e90c     04 FC 45 F0 | 	shr	result2, #4
1e910     FE FC 81 F6 | 	negc	result2, result2
1e914     00 FD 51 FC | 	wrword	result2, _var01
1e918     00 FD 01 F6 | 	mov	result2, _var01
1e91c     02 FC 05 F1 | 	add	result2, #2
1e920     36 00 80 FF 
1e924     FE 1E 59 FC | 	wrword	##27791, result2
1e928     00 FD 01 F6 | 	mov	result2, _var01
1e92c     04 FC 05 F1 | 	add	result2, #4
1e930     FE 00 58 FC | 	wrword	#0, result2
1e934     00 FD 01 F6 | 	mov	result2, _var01
1e938     06 FC 05 F1 | 	add	result2, #6
1e93c     FE 00 58 FC | 	wrword	#0, result2
1e940     10 00 86 F1 | 	sub	_var01, #16
1e944                 | LR__2850
1e944     00 FB 01 F6 | 	mov	result1, _var01
1e948     01 FD 01 F6 | 	mov	result2, _var02
1e94c                 | __system___gc_ptrs_ret
1e94c     2D 00 64 FD | 	ret
1e950                 | 
1e950                 | __system___gc_tryalloc
1e950     0B 4A 05 F6 | 	mov	COUNT_, #11
1e954     A8 00 A0 FD | 	call	#pushregs_
1e958     09 1F 02 F6 | 	mov	local01, arg01
1e95c     0A 21 02 F6 | 	mov	local02, arg02
1e960     54 FF BF FD | 	call	#__system___gc_ptrs
1e964     FD 22 02 F6 | 	mov	local03, result1
1e968     FE 24 02 F6 | 	mov	local04, result2
1e96c     11 27 02 F6 | 	mov	local05, local03
1e970     00 28 06 F6 | 	mov	local06, #0
1e974     97 1E 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
1e978                 | LR__2860
1e978     13 2B 02 F6 | 	mov	local07, local05
1e97c     06 26 06 F1 | 	add	local05, #6
1e980     13 15 EA FA | 	rdword	arg02, local05 wz
1e984     11 13 02 F6 | 	mov	arg01, local03
1e988     00 FA 05 A6 |  if_e	mov	result1, #0
1e98c     04 14 66 50 |  if_ne	shl	arg02, #4
1e990     0A 13 02 51 |  if_ne	add	arg01, arg02
1e994     09 FB 01 56 |  if_ne	mov	result1, arg01
1e998     FD 26 0A F6 | 	mov	local05, result1 wz
1e99c     13 29 E2 5A |  if_ne	rdword	local06, local05
1e9a0     00 26 0E F2 | 	cmp	local05, #0 wz
1e9a4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1e9a8     08 00 90 1D |  if_a	jmp	#LR__2862
1e9ac     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1e9b0     C4 FF 9F 1D |  if_a	jmp	#LR__2860
1e9b4                 | LR__2861
1e9b4                 | LR__2862
1e9b4     00 26 0E F2 | 	cmp	local05, #0 wz
1e9b8     13 FB 01 A6 |  if_e	mov	result1, local05
1e9bc     3C 01 90 AD |  if_e	jmp	#LR__2865
1e9c0     13 FD 01 F6 | 	mov	result2, local05
1e9c4     06 FC 05 F1 | 	add	result2, #6
1e9c8     FE 2C E2 FA | 	rdword	local08, result2
1e9cc     14 1F 52 F2 | 	cmps	local01, local06 wc
1e9d0     C0 00 90 3D |  if_ae	jmp	#LR__2864
1e9d4     13 1F 52 FC | 	wrword	local01, local05
1e9d8     13 13 02 F6 | 	mov	arg01, local05
1e9dc     0F 2D 02 F6 | 	mov	local08, local01
1e9e0     04 2C 66 F0 | 	shl	local08, #4
1e9e4     16 13 02 F1 | 	add	arg01, local08
1e9e8     0F 29 82 F1 | 	sub	local06, local01
1e9ec     09 29 52 FC | 	wrword	local06, arg01
1e9f0     09 2D 02 F6 | 	mov	local08, arg01
1e9f4     02 2C 06 F1 | 	add	local08, #2
1e9f8     36 00 80 FF 
1e9fc     16 1F 59 FC | 	wrword	##27791, local08
1ea00     13 15 0A F6 | 	mov	arg02, local05 wz
1ea04     00 FA 05 A6 |  if_e	mov	result1, #0
1ea08     11 15 82 51 |  if_ne	sub	arg02, local03
1ea0c     04 14 46 50 |  if_ne	shr	arg02, #4
1ea10     0A FB 01 56 |  if_ne	mov	result1, arg02
1ea14     09 2D 02 F6 | 	mov	local08, arg01
1ea18     04 2C 06 F1 | 	add	local08, #4
1ea1c     16 FB 51 FC | 	wrword	result1, local08
1ea20     13 2D 02 F6 | 	mov	local08, local05
1ea24     06 2C 06 F1 | 	add	local08, #6
1ea28     09 15 02 F6 | 	mov	arg02, arg01
1ea2c     16 2D E2 FA | 	rdword	local08, local08
1ea30     06 14 06 F1 | 	add	arg02, #6
1ea34     0A 2D 52 FC | 	wrword	local08, arg02
1ea38     09 2F 02 F6 | 	mov	local09, arg01
1ea3c     17 15 0A F6 | 	mov	arg02, local09 wz
1ea40     00 FA 05 A6 |  if_e	mov	result1, #0
1ea44     11 15 82 51 |  if_ne	sub	arg02, local03
1ea48     04 14 46 50 |  if_ne	shr	arg02, #4
1ea4c     0A FB 01 56 |  if_ne	mov	result1, arg02
1ea50     FD 2C 02 F6 | 	mov	local08, result1
1ea54     09 31 EA FA | 	rdword	local10, arg01 wz
1ea58     00 FA 05 A6 |  if_e	mov	result1, #0
1ea5c     04 30 66 50 |  if_ne	shl	local10, #4
1ea60     18 13 02 51 |  if_ne	add	arg01, local10
1ea64     09 FB 01 56 |  if_ne	mov	result1, arg01
1ea68     FD 32 0A F6 | 	mov	local11, result1 wz
1ea6c     24 00 90 AD |  if_e	jmp	#LR__2863
1ea70     12 33 52 F2 | 	cmps	local11, local04 wc
1ea74     1C 00 90 3D |  if_ae	jmp	#LR__2863
1ea78     17 15 0A F6 | 	mov	arg02, local09 wz
1ea7c     00 FA 05 A6 |  if_e	mov	result1, #0
1ea80     11 15 82 51 |  if_ne	sub	arg02, local03
1ea84     04 14 46 50 |  if_ne	shr	arg02, #4
1ea88     0A FB 01 56 |  if_ne	mov	result1, arg02
1ea8c     04 32 06 F1 | 	add	local11, #4
1ea90     19 FB 51 FC | 	wrword	result1, local11
1ea94                 | LR__2863
1ea94                 | LR__2864
1ea94     06 2A 06 F1 | 	add	local07, #6
1ea98     15 2D 52 FC | 	wrword	local08, local07
1ea9c     36 00 00 FF 
1eaa0     80 2E 06 F6 | 	mov	local09, ##27776
1eaa4     10 2F 42 F5 | 	or	local09, local02
1eaa8     00 FA 05 F6 | 	mov	result1, #0
1eaac     01 FA 61 FD | 	cogid	result1
1eab0     FD 2E 42 F5 | 	or	local09, result1
1eab4     13 33 02 F6 | 	mov	local11, local05
1eab8     02 32 06 F1 | 	add	local11, #2
1eabc     19 2F 52 FC | 	wrword	local09, local11
1eac0     11 2F 02 F6 | 	mov	local09, local03
1eac4     08 2E 06 F1 | 	add	local09, #8
1eac8     13 33 02 F6 | 	mov	local11, local05
1eacc     17 2F E2 FA | 	rdword	local09, local09
1ead0     06 32 06 F1 | 	add	local11, #6
1ead4     19 2F 52 FC | 	wrword	local09, local11
1ead8     13 15 0A F6 | 	mov	arg02, local05 wz
1eadc     00 FA 05 A6 |  if_e	mov	result1, #0
1eae0     11 15 82 51 |  if_ne	sub	arg02, local03
1eae4     04 14 46 50 |  if_ne	shr	arg02, #4
1eae8     0A FB 01 56 |  if_ne	mov	result1, arg02
1eaec     08 22 06 F1 | 	add	local03, #8
1eaf0     11 FB 51 FC | 	wrword	result1, local03
1eaf4     08 26 06 F1 | 	add	local05, #8
1eaf8     13 FB 01 F6 | 	mov	result1, local05
1eafc                 | LR__2865
1eafc     A7 F0 03 F6 | 	mov	ptra, fp
1eb00     B2 00 A0 FD | 	call	#popregs_
1eb04                 | __system___gc_tryalloc_ret
1eb04     2D 00 64 FD | 	ret
1eb08                 | 
1eb08                 | __system___gc_alloc_managed
1eb08     01 4A 05 F6 | 	mov	COUNT_, #1
1eb0c     A8 00 A0 FD | 	call	#pushregs_
1eb10     09 1F 02 F6 | 	mov	local01, arg01
1eb14     00 14 06 F6 | 	mov	arg02, #0
1eb18     1C 00 B0 FD | 	call	#__system___gc_doalloc
1eb1c     FD 14 0A F6 | 	mov	arg02, result1 wz
1eb20     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1eb24     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1eb28     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1eb2c     A7 F0 03 F6 | 	mov	ptra, fp
1eb30     B2 00 A0 FD | 	call	#popregs_
1eb34                 | __system___gc_alloc_managed_ret
1eb34     2D 00 64 FD | 	ret
1eb38                 | 
1eb38                 | __system___gc_doalloc
1eb38     06 4A 05 F6 | 	mov	COUNT_, #6
1eb3c     A8 00 A0 FD | 	call	#pushregs_
1eb40     09 1F 0A F6 | 	mov	local01, arg01 wz
1eb44     0A 21 02 F6 | 	mov	local02, arg02
1eb48     00 FA 05 A6 |  if_e	mov	result1, #0
1eb4c     8C 00 90 AD |  if_e	jmp	#LR__2877
1eb50     17 1E 06 F1 | 	add	local01, #23
1eb54     0F 1E 26 F5 | 	andn	local01, #15
1eb58     04 1E 46 F0 | 	shr	local01, #4
1eb5c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1eb60     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1eb64     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1eb68     AC C1 BF FD | 	call	#__system___lockmem
1eb6c     0F 13 02 F6 | 	mov	arg01, local01
1eb70     10 15 02 F6 | 	mov	arg02, local02
1eb74     D8 FD BF FD | 	call	#__system___gc_tryalloc
1eb78     FD 22 0A F6 | 	mov	local03, result1 wz
1eb7c     14 00 90 5D |  if_ne	jmp	#LR__2870
1eb80     70 03 B0 FD | 	call	#__system___gc_docollect
1eb84     0F 13 02 F6 | 	mov	arg01, local01
1eb88     10 15 02 F6 | 	mov	arg02, local02
1eb8c     C0 FD BF FD | 	call	#__system___gc_tryalloc
1eb90     FD 22 02 F6 | 	mov	local03, result1
1eb94                 | LR__2870
1eb94     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1eb98     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1eb9c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1eba0     09 01 68 FC | 	wrlong	#0, arg01
1eba4     00 22 0E F2 | 	cmp	local03, #0 wz
1eba8     2C 00 90 AD |  if_e	jmp	#LR__2876
1ebac     04 1E 66 F0 | 	shl	local01, #4
1ebb0     08 1E 86 F1 | 	sub	local01, #8
1ebb4     0F 25 52 F6 | 	abs	local04, local01 wc
1ebb8     02 24 46 F0 | 	shr	local04, #2
1ebbc     12 27 8A F6 | 	negc	local05, local04 wz
1ebc0     11 29 02 F6 | 	mov	local06, local03
1ebc4     10 00 90 AD |  if_e	jmp	#LR__2875
1ebc8     97 06 48 FB | 	callpa	#(@LR__2873-@LR__2871)>>2,fcache_load_ptr_
1ebcc                 | LR__2871
1ebcc     13 05 D8 FC | 	rep	@LR__2874, local05
1ebd0                 | LR__2872
1ebd0     14 01 68 FC | 	wrlong	#0, local06
1ebd4     04 28 06 F1 | 	add	local06, #4
1ebd8                 | LR__2873
1ebd8                 | LR__2874
1ebd8                 | LR__2875
1ebd8                 | LR__2876
1ebd8     11 FB 01 F6 | 	mov	result1, local03
1ebdc                 | LR__2877
1ebdc     A7 F0 03 F6 | 	mov	ptra, fp
1ebe0     B2 00 A0 FD | 	call	#popregs_
1ebe4                 | __system___gc_doalloc_ret
1ebe4     2D 00 64 FD | 	ret
1ebe8                 | 
1ebe8                 | __system___gc_isvalidptr
1ebe8     F8 16 06 F4 | 	bitl	arg03, #248
1ebec     08 16 86 F1 | 	sub	arg03, #8
1ebf0     09 17 52 F2 | 	cmps	arg03, arg01 wc
1ebf4     08 00 90 CD |  if_b	jmp	#LR__2880
1ebf8     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1ebfc     08 00 90 CD |  if_b	jmp	#LR__2881
1ec00                 | LR__2880
1ec00     00 FA 05 F6 | 	mov	result1, #0
1ec04     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1ec08                 | LR__2881
1ec08     0B 01 02 F6 | 	mov	_var01, arg03
1ec0c     09 01 62 F5 | 	xor	_var01, arg01
1ec10     0F 00 CE F7 | 	test	_var01, #15 wz
1ec14     00 FA 05 56 |  if_ne	mov	result1, #0
1ec18     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1ec1c     0B 01 02 F6 | 	mov	_var01, arg03
1ec20     02 00 06 F1 | 	add	_var01, #2
1ec24     00 01 E2 FA | 	rdword	_var01, _var01
1ec28     7F 00 00 FF 
1ec2c     C0 01 06 F5 | 	and	_var01, ##65472
1ec30     36 00 00 FF 
1ec34     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1ec38     00 FA 05 56 |  if_ne	mov	result1, #0
1ec3c     0B FB 01 A6 |  if_e	mov	result1, arg03
1ec40                 | __system___gc_isvalidptr_ret
1ec40     2D 00 64 FD | 	ret
1ec44                 | 
1ec44                 | __system___gc_free
1ec44     09 17 02 F6 | 	mov	arg03, arg01
1ec48     6C FC BF FD | 	call	#__system___gc_ptrs
1ec4c     FD 12 02 F6 | 	mov	arg01, result1
1ec50     FE 14 02 F6 | 	mov	arg02, result2
1ec54     90 FF BF FD | 	call	#__system___gc_isvalidptr
1ec58     FD 14 0A F6 | 	mov	arg02, result1 wz
1ec5c     28 00 90 AD |  if_e	jmp	#LR__2890
1ec60     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1ec64     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ec68     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1ec6c     A8 C0 BF FD | 	call	#__system___lockmem
1ec70     0A 13 02 F6 | 	mov	arg01, arg02
1ec74     14 00 B0 FD | 	call	#__system___gc_dofree
1ec78     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1ec7c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ec80     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1ec84     09 01 68 FC | 	wrlong	#0, arg01
1ec88                 | LR__2890
1ec88                 | __system___gc_free_ret
1ec88     2D 00 64 FD | 	ret
1ec8c                 | 
1ec8c                 | __system___gc_dofree
1ec8c     06 4A 05 F6 | 	mov	COUNT_, #6
1ec90     A8 00 A0 FD | 	call	#pushregs_
1ec94     09 1F 02 F6 | 	mov	local01, arg01
1ec98     1C FC BF FD | 	call	#__system___gc_ptrs
1ec9c     FD 20 02 F6 | 	mov	local02, result1
1eca0     FE 22 02 F6 | 	mov	local03, result2
1eca4     0F 15 02 F6 | 	mov	arg02, local01
1eca8     02 14 06 F1 | 	add	arg02, #2
1ecac     36 00 80 FF 
1ecb0     0A 1F 59 FC | 	wrword	##27791, arg02
1ecb4     0F 25 02 F6 | 	mov	local04, local01
1ecb8     0F 13 02 F6 | 	mov	arg01, local01
1ecbc     09 27 EA FA | 	rdword	local05, arg01 wz
1ecc0     00 FA 05 A6 |  if_e	mov	result1, #0
1ecc4     04 26 66 50 |  if_ne	shl	local05, #4
1ecc8     13 13 02 51 |  if_ne	add	arg01, local05
1eccc     09 FB 01 56 |  if_ne	mov	result1, arg01
1ecd0     FD 28 02 F6 | 	mov	local06, result1
1ecd4     97 24 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
1ecd8                 | LR__2900
1ecd8     04 24 06 F1 | 	add	local04, #4
1ecdc     12 15 EA FA | 	rdword	arg02, local04 wz
1ece0     10 13 02 F6 | 	mov	arg01, local02
1ece4     00 FA 05 A6 |  if_e	mov	result1, #0
1ece8     04 14 66 50 |  if_ne	shl	arg02, #4
1ecec     0A 13 02 51 |  if_ne	add	arg01, arg02
1ecf0     09 FB 01 56 |  if_ne	mov	result1, arg01
1ecf4     FD 24 0A F6 | 	mov	local04, result1 wz
1ecf8     24 00 90 AD |  if_e	jmp	#LR__2902
1ecfc     12 13 02 F6 | 	mov	arg01, local04
1ed00     00 FA 05 F6 | 	mov	result1, #0
1ed04     02 12 06 F1 | 	add	arg01, #2
1ed08     09 13 E2 FA | 	rdword	arg01, arg01
1ed0c     36 00 00 FF 
1ed10     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1ed14     01 FA 65 A6 |  if_e	neg	result1, #1
1ed18     00 FA 0D F2 | 	cmp	result1, #0 wz
1ed1c     B8 FF 9F AD |  if_e	jmp	#LR__2900
1ed20                 | LR__2901
1ed20                 | LR__2902
1ed20     00 24 0E F2 | 	cmp	local04, #0 wz
1ed24     10 25 02 A6 |  if_e	mov	local04, local02
1ed28     12 15 02 F6 | 	mov	arg02, local04
1ed2c     06 14 06 F1 | 	add	arg02, #6
1ed30     0F 13 02 F6 | 	mov	arg01, local01
1ed34     0A 15 E2 FA | 	rdword	arg02, arg02
1ed38     06 12 06 F1 | 	add	arg01, #6
1ed3c     09 15 52 FC | 	wrword	arg02, arg01
1ed40     0F 15 0A F6 | 	mov	arg02, local01 wz
1ed44     00 FA 05 A6 |  if_e	mov	result1, #0
1ed48     10 15 82 51 |  if_ne	sub	arg02, local02
1ed4c     04 14 46 50 |  if_ne	shr	arg02, #4
1ed50     0A FB 01 56 |  if_ne	mov	result1, arg02
1ed54     12 15 02 F6 | 	mov	arg02, local04
1ed58     06 14 06 F1 | 	add	arg02, #6
1ed5c     0A FB 51 FC | 	wrword	result1, arg02
1ed60     10 25 0A F2 | 	cmp	local04, local02 wz
1ed64     A4 00 90 AD |  if_e	jmp	#LR__2905
1ed68     12 13 02 F6 | 	mov	arg01, local04
1ed6c     09 27 EA FA | 	rdword	local05, arg01 wz
1ed70     00 FA 05 A6 |  if_e	mov	result1, #0
1ed74     04 26 66 50 |  if_ne	shl	local05, #4
1ed78     13 13 02 51 |  if_ne	add	arg01, local05
1ed7c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ed80     0F FB 09 F2 | 	cmp	result1, local01 wz
1ed84     84 00 90 5D |  if_ne	jmp	#LR__2904
1ed88     12 29 E2 FA | 	rdword	local06, local04
1ed8c     0F 15 E2 FA | 	rdword	arg02, local01
1ed90     0A 29 02 F1 | 	add	local06, arg02
1ed94     12 29 52 FC | 	wrword	local06, local04
1ed98     0F 29 02 F6 | 	mov	local06, local01
1ed9c     02 28 06 F1 | 	add	local06, #2
1eda0     14 01 58 FC | 	wrword	#0, local06
1eda4     0F 13 02 F6 | 	mov	arg01, local01
1eda8     09 27 EA FA | 	rdword	local05, arg01 wz
1edac     00 FA 05 A6 |  if_e	mov	result1, #0
1edb0     04 26 66 50 |  if_ne	shl	local05, #4
1edb4     13 13 02 51 |  if_ne	add	arg01, local05
1edb8     09 FB 01 56 |  if_ne	mov	result1, arg01
1edbc     FD 28 02 F6 | 	mov	local06, result1
1edc0     11 29 52 F2 | 	cmps	local06, local03 wc
1edc4     20 00 90 3D |  if_ae	jmp	#LR__2903
1edc8     12 15 0A F6 | 	mov	arg02, local04 wz
1edcc     00 FA 05 A6 |  if_e	mov	result1, #0
1edd0     10 15 82 51 |  if_ne	sub	arg02, local02
1edd4     04 14 46 50 |  if_ne	shr	arg02, #4
1edd8     0A FB 01 56 |  if_ne	mov	result1, arg02
1eddc     14 15 02 F6 | 	mov	arg02, local06
1ede0     04 14 06 F1 | 	add	arg02, #4
1ede4     0A FB 51 FC | 	wrword	result1, arg02
1ede8                 | LR__2903
1ede8     0F 15 02 F6 | 	mov	arg02, local01
1edec     06 14 06 F1 | 	add	arg02, #6
1edf0     12 FD 01 F6 | 	mov	result2, local04
1edf4     0A 15 E2 FA | 	rdword	arg02, arg02
1edf8     06 FC 05 F1 | 	add	result2, #6
1edfc     FE 14 52 FC | 	wrword	arg02, result2
1ee00     06 1E 06 F1 | 	add	local01, #6
1ee04     0F 01 58 FC | 	wrword	#0, local01
1ee08     12 1F 02 F6 | 	mov	local01, local04
1ee0c                 | LR__2904
1ee0c                 | LR__2905
1ee0c     0F 13 02 F6 | 	mov	arg01, local01
1ee10     09 27 EA FA | 	rdword	local05, arg01 wz
1ee14     00 FA 05 A6 |  if_e	mov	result1, #0
1ee18     04 26 66 50 |  if_ne	shl	local05, #4
1ee1c     13 13 02 51 |  if_ne	add	arg01, local05
1ee20     09 FB 01 56 |  if_ne	mov	result1, arg01
1ee24     FD 14 0A F6 | 	mov	arg02, result1 wz
1ee28     B8 00 90 AD |  if_e	jmp	#LR__2907
1ee2c     11 15 52 F2 | 	cmps	arg02, local03 wc
1ee30     B0 00 90 3D |  if_ae	jmp	#LR__2907
1ee34     0A 13 02 F6 | 	mov	arg01, arg02
1ee38     00 FA 05 F6 | 	mov	result1, #0
1ee3c     02 12 06 F1 | 	add	arg01, #2
1ee40     09 13 E2 FA | 	rdword	arg01, arg01
1ee44     36 00 00 FF 
1ee48     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1ee4c     01 FA 65 A6 |  if_e	neg	result1, #1
1ee50     00 FA 0D F2 | 	cmp	result1, #0 wz
1ee54     8C 00 90 AD |  if_e	jmp	#LR__2907
1ee58     0F 25 02 F6 | 	mov	local04, local01
1ee5c     12 29 E2 FA | 	rdword	local06, local04
1ee60     0A 13 02 F6 | 	mov	arg01, arg02
1ee64     09 1F E2 FA | 	rdword	local01, arg01
1ee68     0F 29 02 F1 | 	add	local06, local01
1ee6c     12 29 52 FC | 	wrword	local06, local04
1ee70     09 29 02 F6 | 	mov	local06, arg01
1ee74     06 28 06 F1 | 	add	local06, #6
1ee78     12 1F 02 F6 | 	mov	local01, local04
1ee7c     14 29 E2 FA | 	rdword	local06, local06
1ee80     06 1E 06 F1 | 	add	local01, #6
1ee84     0F 29 52 FC | 	wrword	local06, local01
1ee88     09 29 02 F6 | 	mov	local06, arg01
1ee8c     02 28 06 F1 | 	add	local06, #2
1ee90     14 55 59 FC | 	wrword	#170, local06
1ee94     09 29 02 F6 | 	mov	local06, arg01
1ee98     06 28 06 F1 | 	add	local06, #6
1ee9c     14 01 58 FC | 	wrword	#0, local06
1eea0     09 27 EA FA | 	rdword	local05, arg01 wz
1eea4     00 FA 05 A6 |  if_e	mov	result1, #0
1eea8     04 26 66 50 |  if_ne	shl	local05, #4
1eeac     13 13 02 51 |  if_ne	add	arg01, local05
1eeb0     09 FB 01 56 |  if_ne	mov	result1, arg01
1eeb4     FD 28 0A F6 | 	mov	local06, result1 wz
1eeb8     28 00 90 AD |  if_e	jmp	#LR__2906
1eebc     11 29 52 F2 | 	cmps	local06, local03 wc
1eec0     20 00 90 3D |  if_ae	jmp	#LR__2906
1eec4     12 15 0A F6 | 	mov	arg02, local04 wz
1eec8     00 FA 05 A6 |  if_e	mov	result1, #0
1eecc     10 15 82 51 |  if_ne	sub	arg02, local02
1eed0     04 14 46 50 |  if_ne	shr	arg02, #4
1eed4     0A FB 01 56 |  if_ne	mov	result1, arg02
1eed8     14 25 02 F6 | 	mov	local04, local06
1eedc     04 24 06 F1 | 	add	local04, #4
1eee0     12 FB 51 FC | 	wrword	result1, local04
1eee4                 | LR__2906
1eee4                 | LR__2907
1eee4     14 FB 01 F6 | 	mov	result1, local06
1eee8     A7 F0 03 F6 | 	mov	ptra, fp
1eeec     B2 00 A0 FD | 	call	#popregs_
1eef0                 | __system___gc_dofree_ret
1eef0     2D 00 64 FD | 	ret
1eef4                 | 
1eef4                 | __system___gc_docollect
1eef4     05 4A 05 F6 | 	mov	COUNT_, #5
1eef8     A8 00 A0 FD | 	call	#pushregs_
1eefc     B8 F9 BF FD | 	call	#__system___gc_ptrs
1ef00     FE 1E 02 F6 | 	mov	local01, result2
1ef04     FD 20 02 F6 | 	mov	local02, result1
1ef08     10 13 02 F6 | 	mov	arg01, local02
1ef0c     09 23 EA FA | 	rdword	local03, arg01 wz
1ef10     00 FA 05 A6 |  if_e	mov	result1, #0
1ef14     04 22 66 50 |  if_ne	shl	local03, #4
1ef18     11 13 02 51 |  if_ne	add	arg01, local03
1ef1c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ef20     FD 24 0A F6 | 	mov	local04, result1 wz
1ef24     00 FA 05 F6 | 	mov	result1, #0
1ef28     01 FA 61 FD | 	cogid	result1
1ef2c     FD 26 02 F6 | 	mov	local05, result1
1ef30     48 00 90 AD |  if_e	jmp	#LR__2912
1ef34     97 22 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
1ef38                 | LR__2910
1ef38     0F 25 52 F2 | 	cmps	local04, local01 wc
1ef3c     3C 00 90 3D |  if_ae	jmp	#LR__2912
1ef40     12 15 02 F6 | 	mov	arg02, local04
1ef44     02 14 06 F1 | 	add	arg02, #2
1ef48     0A 15 E2 FA | 	rdword	arg02, arg02
1ef4c     20 14 26 F5 | 	andn	arg02, #32
1ef50     12 13 02 F6 | 	mov	arg01, local04
1ef54     02 12 06 F1 | 	add	arg01, #2
1ef58     09 15 52 FC | 	wrword	arg02, arg01
1ef5c     12 13 02 F6 | 	mov	arg01, local04
1ef60     09 23 EA FA | 	rdword	local03, arg01 wz
1ef64     00 FA 05 A6 |  if_e	mov	result1, #0
1ef68     04 22 66 50 |  if_ne	shl	local03, #4
1ef6c     11 13 02 51 |  if_ne	add	arg01, local03
1ef70     09 FB 01 56 |  if_ne	mov	result1, arg01
1ef74     FD 24 0A F6 | 	mov	local04, result1 wz
1ef78     BC FF 9F 5D |  if_ne	jmp	#LR__2910
1ef7c                 | LR__2911
1ef7c                 | LR__2912
1ef7c     00 22 06 F6 | 	mov	local03, #0
1ef80     00 12 06 F6 | 	mov	arg01, #0
1ef84     68 BD BF FD | 	call	#__system____topofstack
1ef88     FD 14 02 F6 | 	mov	arg02, result1
1ef8c     11 13 02 F6 | 	mov	arg01, local03
1ef90     90 00 B0 FD | 	call	#__system___gc_markhub
1ef94     1C 01 B0 FD | 	call	#__system___gc_markcog
1ef98     10 13 02 F6 | 	mov	arg01, local02
1ef9c     09 23 EA FA | 	rdword	local03, arg01 wz
1efa0     00 FA 05 A6 |  if_e	mov	result1, #0
1efa4     04 22 66 50 |  if_ne	shl	local03, #4
1efa8     11 13 02 51 |  if_ne	add	arg01, local03
1efac     09 FB 01 56 |  if_ne	mov	result1, arg01
1efb0     FD 20 0A F6 | 	mov	local02, result1 wz
1efb4     60 00 90 AD |  if_e	jmp	#LR__2916
1efb8                 | LR__2913
1efb8     10 25 02 F6 | 	mov	local04, local02
1efbc     12 13 02 F6 | 	mov	arg01, local04
1efc0     09 23 EA FA | 	rdword	local03, arg01 wz
1efc4     00 FA 05 A6 |  if_e	mov	result1, #0
1efc8     04 22 66 50 |  if_ne	shl	local03, #4
1efcc     11 13 02 51 |  if_ne	add	arg01, local03
1efd0     09 FB 01 56 |  if_ne	mov	result1, arg01
1efd4     FD 20 02 F6 | 	mov	local02, result1
1efd8     12 15 02 F6 | 	mov	arg02, local04
1efdc     02 14 06 F1 | 	add	arg02, #2
1efe0     0A 15 E2 FA | 	rdword	arg02, arg02
1efe4     20 14 CE F7 | 	test	arg02, #32 wz
1efe8     10 14 CE A7 |  if_e	test	arg02, #16 wz
1efec     1C 00 90 5D |  if_ne	jmp	#LR__2915
1eff0     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1eff4     13 15 0A F2 | 	cmp	arg02, local05 wz
1eff8     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1effc     0C 00 90 5D |  if_ne	jmp	#LR__2914
1f000     12 13 02 F6 | 	mov	arg01, local04
1f004     84 FC BF FD | 	call	#__system___gc_dofree
1f008     FD 20 02 F6 | 	mov	local02, result1
1f00c                 | LR__2914
1f00c                 | LR__2915
1f00c     00 20 0E F2 | 	cmp	local02, #0 wz
1f010     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1f014     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2913
1f018                 | LR__2916
1f018     A7 F0 03 F6 | 	mov	ptra, fp
1f01c     B2 00 A0 FD | 	call	#popregs_
1f020                 | __system___gc_docollect_ret
1f020     2D 00 64 FD | 	ret
1f024                 | 
1f024                 | __system___gc_markhub
1f024     04 4A 05 F6 | 	mov	COUNT_, #4
1f028     A8 00 A0 FD | 	call	#pushregs_
1f02c     09 1F 02 F6 | 	mov	local01, arg01
1f030     0A 21 02 F6 | 	mov	local02, arg02
1f034     80 F8 BF FD | 	call	#__system___gc_ptrs
1f038     FD 22 02 F6 | 	mov	local03, result1
1f03c     FE 24 02 F6 | 	mov	local04, result2
1f040                 | LR__2920
1f040     10 1F 52 F2 | 	cmps	local01, local02 wc
1f044     60 00 90 3D |  if_ae	jmp	#LR__2921
1f048     0F 17 02 FB | 	rdlong	arg03, local01
1f04c     04 1E 06 F1 | 	add	local01, #4
1f050     12 15 02 F6 | 	mov	arg02, local04
1f054     11 13 02 F6 | 	mov	arg01, local03
1f058     8C FB BF FD | 	call	#__system___gc_isvalidptr
1f05c     FD 16 0A F6 | 	mov	arg03, result1 wz
1f060     DC FF 9F AD |  if_e	jmp	#LR__2920
1f064     0B 13 02 F6 | 	mov	arg01, arg03
1f068     00 FA 05 F6 | 	mov	result1, #0
1f06c     02 12 06 F1 | 	add	arg01, #2
1f070     09 13 E2 FA | 	rdword	arg01, arg01
1f074     36 00 00 FF 
1f078     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1f07c     01 FA 65 A6 |  if_e	neg	result1, #1
1f080     00 FA 0D F2 | 	cmp	result1, #0 wz
1f084     B8 FF 9F 5D |  if_ne	jmp	#LR__2920
1f088     0B FD 01 F6 | 	mov	result2, arg03
1f08c     02 FC 05 F1 | 	add	result2, #2
1f090     FE FC E1 FA | 	rdword	result2, result2
1f094     0F FC 25 F5 | 	andn	result2, #15
1f098     2E FC 45 F5 | 	or	result2, #46
1f09c     02 16 06 F1 | 	add	arg03, #2
1f0a0     0B FD 51 FC | 	wrword	result2, arg03
1f0a4     98 FF 9F FD | 	jmp	#LR__2920
1f0a8                 | LR__2921
1f0a8     A7 F0 03 F6 | 	mov	ptra, fp
1f0ac     B2 00 A0 FD | 	call	#popregs_
1f0b0                 | __system___gc_markhub_ret
1f0b0     2D 00 64 FD | 	ret
1f0b4                 | 
1f0b4                 | __system___gc_markcog
1f0b4     04 4A 05 F6 | 	mov	COUNT_, #4
1f0b8     A8 00 A0 FD | 	call	#pushregs_
1f0bc     F8 F7 BF FD | 	call	#__system___gc_ptrs
1f0c0     FD 1E 02 F6 | 	mov	local01, result1
1f0c4     FE 20 02 F6 | 	mov	local02, result2
1f0c8     EF 23 06 F6 | 	mov	local03, #495
1f0cc                 | LR__2930
1f0cc                 | 	'.live	local03
1f0cc     00 22 96 F9 | 	alts	local03, #0
1f0d0     11 25 02 F6 | 	mov	local04, local03
1f0d4     0F 13 02 F6 | 	mov	arg01, local01
1f0d8     10 15 02 F6 | 	mov	arg02, local02
1f0dc     12 17 02 F6 | 	mov	arg03, local04
1f0e0     04 FB BF FD | 	call	#__system___gc_isvalidptr
1f0e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f0e8     18 00 90 AD |  if_e	jmp	#LR__2931
1f0ec     FD 24 02 F6 | 	mov	local04, result1
1f0f0     02 24 06 F1 | 	add	local04, #2
1f0f4     12 25 E2 FA | 	rdword	local04, local04
1f0f8     20 24 46 F5 | 	or	local04, #32
1f0fc     02 FA 05 F1 | 	add	result1, #2
1f100     FD 24 52 FC | 	wrword	local04, result1
1f104                 | LR__2931
1f104     01 22 86 F1 | 	sub	local03, #1
1f108     00 22 56 F2 | 	cmps	local03, #0 wc
1f10c     BC FF 9F 3D |  if_ae	jmp	#LR__2930
1f110     A7 F0 03 F6 | 	mov	ptra, fp
1f114     B2 00 A0 FD | 	call	#popregs_
1f118                 | __system___gc_markcog_ret
1f118     2D 00 64 FD | 	ret
1f11c                 | 
1f11c                 | __system__opendir
1f11c     06 4A 05 F6 | 	mov	COUNT_, #6
1f120     A8 00 A0 FD | 	call	#pushregs_
1f124     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1f128     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
1f12c     09 15 02 F6 | 	mov	arg02, arg01
1f130     0F 13 02 F6 | 	mov	arg01, local01
1f134     00 16 06 F6 | 	mov	arg03, #0
1f138     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
1f13c     70 C3 BF FD | 	call	#__system____getvfsforfile
1f140     FD 20 0A F6 | 	mov	local02, result1 wz
1f144     10 00 90 AD |  if_e	jmp	#LR__2940
1f148     28 20 06 F1 | 	add	local02, #40
1f14c     10 17 0A FB | 	rdlong	arg03, local02 wz
1f150     28 20 86 F1 | 	sub	local02, #40
1f154     14 00 90 5D |  if_ne	jmp	#LR__2941
1f158                 | LR__2940
1f158     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f15c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
1f160     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f164     00 FA 05 F6 | 	mov	result1, #0
1f168     90 00 90 FD | 	jmp	#LR__2943
1f16c                 | LR__2941
1f16c     5C 12 06 F6 | 	mov	arg01, #92
1f170     10 14 06 F6 | 	mov	arg02, #16
1f174     C0 F9 BF FD | 	call	#__system___gc_doalloc
1f178     FD 22 0A F6 | 	mov	local03, result1 wz
1f17c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f180     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1f184     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f188     00 FA 05 A6 |  if_e	mov	result1, #0
1f18c     6C 00 90 AD |  if_e	jmp	#LR__2943
1f190     28 20 06 F1 | 	add	local02, #40
1f194     10 25 02 FB | 	rdlong	local04, local02
1f198     12 27 02 F6 | 	mov	local05, local04
1f19c     28 20 86 F1 | 	sub	local02, #40
1f1a0     13 26 46 F7 | 	zerox	local05, #19
1f1a4     14 24 46 F0 | 	shr	local04, #20
1f1a8     02 24 66 F0 | 	shl	local04, #2
1f1ac     ED 24 02 F1 | 	add	local04, __methods__
1f1b0     12 25 02 FB | 	rdlong	local04, local04
1f1b4     11 13 02 F6 | 	mov	arg01, local03
1f1b8     0F 15 02 F6 | 	mov	arg02, local01
1f1bc     F2 28 02 F6 | 	mov	local06, objptr
1f1c0     13 E5 01 F6 | 	mov	objptr, local05
1f1c4     2D 24 62 FD | 	call	local04
1f1c8     14 E5 01 F6 | 	mov	objptr, local06
1f1cc     FD 16 0A F6 | 	mov	arg03, result1 wz
1f1d0     20 00 90 AD |  if_e	jmp	#LR__2942
1f1d4     00 16 4E F2 | 	cmps	arg03, #0 wz
1f1d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f1dc     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1f1e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f1e4     11 13 02 F6 | 	mov	arg01, local03
1f1e8     58 FA BF FD | 	call	#__system___gc_free
1f1ec     00 FA 05 F6 | 	mov	result1, #0
1f1f0     08 00 90 FD | 	jmp	#LR__2943
1f1f4                 | LR__2942
1f1f4     11 21 62 FC | 	wrlong	local02, local03
1f1f8     11 FB 01 F6 | 	mov	result1, local03
1f1fc                 | LR__2943
1f1fc     A7 F0 03 F6 | 	mov	ptra, fp
1f200     B2 00 A0 FD | 	call	#popregs_
1f204                 | __system__opendir_ret
1f204     2D 00 64 FD | 	ret
1f208                 | 
1f208                 | __system__closedir
1f208     04 4A 05 F6 | 	mov	COUNT_, #4
1f20c     A8 00 A0 FD | 	call	#pushregs_
1f210     09 1F 02 F6 | 	mov	local01, arg01
1f214     0F 13 02 FB | 	rdlong	arg01, local01
1f218     2C 12 06 F1 | 	add	arg01, #44
1f21c     09 21 02 FB | 	rdlong	local02, arg01
1f220     10 23 02 F6 | 	mov	local03, local02
1f224     13 22 46 F7 | 	zerox	local03, #19
1f228     14 20 46 F0 | 	shr	local02, #20
1f22c     02 20 66 F0 | 	shl	local02, #2
1f230     ED 20 02 F1 | 	add	local02, __methods__
1f234     10 21 02 FB | 	rdlong	local02, local02
1f238     0F 13 02 F6 | 	mov	arg01, local01
1f23c     F2 24 02 F6 | 	mov	local04, objptr
1f240     11 E5 01 F6 | 	mov	objptr, local03
1f244     2D 20 62 FD | 	call	local02
1f248     12 E5 01 F6 | 	mov	objptr, local04
1f24c     FD 24 02 F6 | 	mov	local04, result1
1f250     0F 13 02 F6 | 	mov	arg01, local01
1f254     EC F9 BF FD | 	call	#__system___gc_free
1f258     00 24 4E F2 | 	cmps	local04, #0 wz
1f25c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f260     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
1f264     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f268     01 FA 65 56 |  if_ne	neg	result1, #1
1f26c     00 FA 05 A6 |  if_e	mov	result1, #0
1f270     A7 F0 03 F6 | 	mov	ptra, fp
1f274     B2 00 A0 FD | 	call	#popregs_
1f278                 | __system__closedir_ret
1f278     2D 00 64 FD | 	ret
1f27c                 | 
1f27c                 | __system__readdir
1f27c     04 4A 05 F6 | 	mov	COUNT_, #4
1f280     A8 00 A0 FD | 	call	#pushregs_
1f284     09 15 0A FB | 	rdlong	arg02, arg01 wz
1f288     08 12 06 F1 | 	add	arg01, #8
1f28c     09 1F 02 F6 | 	mov	local01, arg01
1f290     08 12 86 F1 | 	sub	arg01, #8
1f294     00 FA 05 A6 |  if_e	mov	result1, #0
1f298     5C 00 90 AD |  if_e	jmp	#LR__2951
1f29c     30 14 06 F1 | 	add	arg02, #48
1f2a0     0A 21 02 FB | 	rdlong	local02, arg02
1f2a4     10 23 02 F6 | 	mov	local03, local02
1f2a8     13 22 46 F7 | 	zerox	local03, #19
1f2ac     14 20 46 F0 | 	shr	local02, #20
1f2b0     02 20 66 F0 | 	shl	local02, #2
1f2b4     ED 20 02 F1 | 	add	local02, __methods__
1f2b8     10 21 02 FB | 	rdlong	local02, local02
1f2bc     0F 15 02 F6 | 	mov	arg02, local01
1f2c0     F2 24 02 F6 | 	mov	local04, objptr
1f2c4     11 E5 01 F6 | 	mov	objptr, local03
1f2c8     2D 20 62 FD | 	call	local02
1f2cc     12 E5 01 F6 | 	mov	objptr, local04
1f2d0     00 FA 4D F2 | 	cmps	result1, #0 wz
1f2d4     1C 00 90 AD |  if_e	jmp	#LR__2950
1f2d8     01 FA 55 F2 | 	cmps	result1, #1 wc
1f2dc     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1f2e0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
1f2e4     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1f2e8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
1f2ec     00 FA 05 F6 | 	mov	result1, #0
1f2f0     04 00 90 FD | 	jmp	#LR__2951
1f2f4                 | LR__2950
1f2f4     0F FB 01 F6 | 	mov	result1, local01
1f2f8                 | LR__2951
1f2f8     A7 F0 03 F6 | 	mov	ptra, fp
1f2fc     B2 00 A0 FD | 	call	#popregs_
1f300                 | __system__readdir_ret
1f300     2D 00 64 FD | 	ret
1f304                 | 
1f304                 | __system___openraw
1f304     15 4A 05 F6 | 	mov	COUNT_, #21
1f308     A8 00 A0 FD | 	call	#pushregs_
1f30c     09 1F 02 F6 | 	mov	local01, arg01
1f310     0A 21 02 F6 | 	mov	local02, arg02
1f314     0B 23 02 F6 | 	mov	local03, arg03
1f318     0C 25 02 F6 | 	mov	local04, arg04
1f31c     04 26 06 F6 | 	mov	local05, #4
1f320     0F 29 02 F6 | 	mov	local06, local01
1f324     00 2A 06 F6 | 	mov	local07, #0
1f328     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1f32c     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
1f330     16 13 02 F6 | 	mov	arg01, local08
1f334     10 15 02 F6 | 	mov	arg02, local02
1f338     00 16 06 F6 | 	mov	arg03, #0
1f33c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
1f340     6C C1 BF FD | 	call	#__system____getvfsforfile
1f344     FD 2E 0A F6 | 	mov	local09, result1 wz
1f348     10 00 90 AD |  if_e	jmp	#LR__2960
1f34c     20 2E 06 F1 | 	add	local09, #32
1f350     17 FB 09 FB | 	rdlong	result1, local09 wz
1f354     20 2E 86 F1 | 	sub	local09, #32
1f358     14 00 90 5D |  if_ne	jmp	#LR__2961
1f35c                 | LR__2960
1f35c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f360     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
1f364     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f368     01 FA 65 F6 | 	neg	result1, #1
1f36c     88 02 90 FD | 	jmp	#LR__2974
1f370                 | LR__2961
1f370     14 13 02 F6 | 	mov	arg01, local06
1f374     00 14 06 F6 | 	mov	arg02, #0
1f378     34 16 06 F6 | 	mov	arg03, #52
1f37c     09 31 02 F6 | 	mov	local10, arg01
1f380     98 00 A0 FD | 	call	#\builtin_bytefill_
1f384     20 2E 06 F1 | 	add	local09, #32
1f388     17 33 02 FB | 	rdlong	local11, local09
1f38c     19 35 02 F6 | 	mov	local12, local11
1f390     19 37 02 F6 | 	mov	local13, local11
1f394     20 2E 86 F1 | 	sub	local09, #32
1f398     1B 39 02 F6 | 	mov	local14, local13
1f39c     13 34 46 F7 | 	zerox	local12, #19
1f3a0     14 38 46 F0 | 	shr	local14, #20
1f3a4     02 38 66 F0 | 	shl	local14, #2
1f3a8     ED 38 02 F1 | 	add	local14, __methods__
1f3ac     1C 39 02 FB | 	rdlong	local14, local14
1f3b0     14 3B 02 F6 | 	mov	local15, local06
1f3b4     16 3D 02 F6 | 	mov	local16, local08
1f3b8     11 3F 02 F6 | 	mov	local17, local03
1f3bc     1D 13 02 F6 | 	mov	arg01, local15
1f3c0     1E 15 02 F6 | 	mov	arg02, local16
1f3c4     1F 17 02 F6 | 	mov	arg03, local17
1f3c8     F2 40 02 F6 | 	mov	local18, objptr
1f3cc     1A E5 01 F6 | 	mov	objptr, local12
1f3d0     2D 38 62 FD | 	call	local14
1f3d4     20 E5 01 F6 | 	mov	objptr, local18
1f3d8     FD 42 0A F6 | 	mov	local19, result1 wz
1f3dc     04 22 CE 57 |  if_ne	test	local03, #4 wz
1f3e0     58 00 90 AD |  if_e	jmp	#LR__2962
1f3e4     24 2E 06 F1 | 	add	local09, #36
1f3e8     17 33 02 FB | 	rdlong	local11, local09
1f3ec     19 35 02 F6 | 	mov	local12, local11
1f3f0     19 37 02 F6 | 	mov	local13, local11
1f3f4     24 2E 86 F1 | 	sub	local09, #36
1f3f8     1B 39 02 F6 | 	mov	local14, local13
1f3fc     13 34 46 F7 | 	zerox	local12, #19
1f400     14 38 46 F0 | 	shr	local14, #20
1f404     02 38 66 F0 | 	shl	local14, #2
1f408     ED 38 02 F1 | 	add	local14, __methods__
1f40c     1C 39 02 FB | 	rdlong	local14, local14
1f410     14 3B 02 F6 | 	mov	local15, local06
1f414     16 3D 02 F6 | 	mov	local16, local08
1f418     12 3F 02 F6 | 	mov	local17, local04
1f41c     1D 13 02 F6 | 	mov	arg01, local15
1f420     1E 15 02 F6 | 	mov	arg02, local16
1f424     1F 17 02 F6 | 	mov	arg03, local17
1f428     F2 40 02 F6 | 	mov	local18, objptr
1f42c     1A E5 01 F6 | 	mov	objptr, local12
1f430     2D 38 62 FD | 	call	local14
1f434     20 E5 01 F6 | 	mov	objptr, local18
1f438     FD 42 02 F6 | 	mov	local19, result1
1f43c                 | LR__2962
1f43c     00 42 0E F2 | 	cmp	local19, #0 wz
1f440     88 01 90 5D |  if_ne	jmp	#LR__2972
1f444     11 45 02 F6 | 	mov	local20, local03
1f448     03 44 0E F5 | 	and	local20, #3 wz
1f44c     02 26 46 55 |  if_ne	or	local05, #2
1f450     01 44 0E F2 | 	cmp	local20, #1 wz
1f454     01 26 46 55 |  if_ne	or	local05, #1
1f458     20 22 CE F7 | 	test	local03, #32 wz
1f45c     C0 26 46 55 |  if_ne	or	local05, #192
1f460     08 28 06 F1 | 	add	local06, #8
1f464     14 27 62 FC | 	wrlong	local05, local06
1f468     0C 28 06 F1 | 	add	local06, #12
1f46c     14 47 0A FB | 	rdlong	local21, local06 wz
1f470     14 28 86 F1 | 	sub	local06, #20
1f474     18 00 90 5D |  if_ne	jmp	#LR__2963
1f478     04 2E 06 F1 | 	add	local09, #4
1f47c     17 47 02 FB | 	rdlong	local21, local09
1f480     04 2E 86 F1 | 	sub	local09, #4
1f484     14 28 06 F1 | 	add	local06, #20
1f488     14 47 62 FC | 	wrlong	local21, local06
1f48c     14 28 86 F1 | 	sub	local06, #20
1f490                 | LR__2963
1f490     18 28 06 F1 | 	add	local06, #24
1f494     14 47 0A FB | 	rdlong	local21, local06 wz
1f498     18 28 86 F1 | 	sub	local06, #24
1f49c     18 00 90 5D |  if_ne	jmp	#LR__2964
1f4a0     08 2E 06 F1 | 	add	local09, #8
1f4a4     17 47 02 FB | 	rdlong	local21, local09
1f4a8     08 2E 86 F1 | 	sub	local09, #8
1f4ac     18 28 06 F1 | 	add	local06, #24
1f4b0     14 47 62 FC | 	wrlong	local21, local06
1f4b4     18 28 86 F1 | 	sub	local06, #24
1f4b8                 | LR__2964
1f4b8     24 28 06 F1 | 	add	local06, #36
1f4bc     14 47 0A FB | 	rdlong	local21, local06 wz
1f4c0     24 28 86 F1 | 	sub	local06, #36
1f4c4     17 47 02 AB |  if_e	rdlong	local21, local09
1f4c8     24 28 06 A1 |  if_e	add	local06, #36
1f4cc     14 47 62 AC |  if_e	wrlong	local21, local06
1f4d0     24 28 86 A1 |  if_e	sub	local06, #36
1f4d4     28 28 06 F1 | 	add	local06, #40
1f4d8     14 47 0A FB | 	rdlong	local21, local06 wz
1f4dc     28 28 86 F1 | 	sub	local06, #40
1f4e0     18 00 90 5D |  if_ne	jmp	#LR__2965
1f4e4     10 2E 06 F1 | 	add	local09, #16
1f4e8     17 47 02 FB | 	rdlong	local21, local09
1f4ec     10 2E 86 F1 | 	sub	local09, #16
1f4f0     28 28 06 F1 | 	add	local06, #40
1f4f4     14 47 62 FC | 	wrlong	local21, local06
1f4f8     28 28 86 F1 | 	sub	local06, #40
1f4fc                 | LR__2965
1f4fc     30 28 06 F1 | 	add	local06, #48
1f500     14 47 0A FB | 	rdlong	local21, local06 wz
1f504     30 28 86 F1 | 	sub	local06, #48
1f508     18 00 90 5D |  if_ne	jmp	#LR__2966
1f50c     0C 2E 06 F1 | 	add	local09, #12
1f510     17 47 02 FB | 	rdlong	local21, local09
1f514     0C 2E 86 F1 | 	sub	local09, #12
1f518     30 28 06 F1 | 	add	local06, #48
1f51c     14 47 62 FC | 	wrlong	local21, local06
1f520     30 28 86 F1 | 	sub	local06, #48
1f524                 | LR__2966
1f524     1C 28 06 F1 | 	add	local06, #28
1f528     14 47 0A FB | 	rdlong	local21, local06 wz
1f52c     1C 28 86 F1 | 	sub	local06, #28
1f530     1C 00 90 5D |  if_ne	jmp	#LR__2967
1f534     01 2A 06 F6 | 	mov	local07, #1
1f538     F2 12 02 F6 | 	mov	arg01, objptr
1f53c     00 B0 03 FF 
1f540     00 12 46 F5 | 	or	arg01, ##123731968
1f544     1C 28 06 F1 | 	add	local06, #28
1f548     14 13 62 FC | 	wrlong	arg01, local06
1f54c     1C 28 86 F1 | 	sub	local06, #28
1f550                 | LR__2967
1f550     20 28 06 F1 | 	add	local06, #32
1f554     14 47 0A FB | 	rdlong	local21, local06 wz
1f558     20 28 86 F1 | 	sub	local06, #32
1f55c     1C 00 90 5D |  if_ne	jmp	#LR__2968
1f560     01 2A 06 F6 | 	mov	local07, #1
1f564     F2 12 02 F6 | 	mov	arg01, objptr
1f568     00 B8 03 FF 
1f56c     00 12 46 F5 | 	or	arg01, ##124780544
1f570     20 28 06 F1 | 	add	local06, #32
1f574     14 13 62 FC | 	wrlong	arg01, local06
1f578     20 28 86 F1 | 	sub	local06, #32
1f57c                 | LR__2968
1f57c     2C 28 06 F1 | 	add	local06, #44
1f580     14 47 0A FB | 	rdlong	local21, local06 wz
1f584     2C 28 86 F1 | 	sub	local06, #44
1f588     40 00 90 5D |  if_ne	jmp	#LR__2971
1f58c     14 2E 06 F1 | 	add	local09, #20
1f590     17 47 0A FB | 	rdlong	local21, local09 wz
1f594     14 2E 86 F1 | 	sub	local09, #20
1f598     18 00 90 AD |  if_e	jmp	#LR__2969
1f59c     14 2E 06 F1 | 	add	local09, #20
1f5a0     17 47 02 FB | 	rdlong	local21, local09
1f5a4     2C 28 06 F1 | 	add	local06, #44
1f5a8     14 47 62 FC | 	wrlong	local21, local06
1f5ac     2C 28 86 F1 | 	sub	local06, #44
1f5b0     18 00 90 FD | 	jmp	#LR__2970
1f5b4                 | LR__2969
1f5b4     01 2A 06 F6 | 	mov	local07, #1
1f5b8     F2 12 02 F6 | 	mov	arg01, objptr
1f5bc     77 12 26 F4 | 	bith	arg01, #119
1f5c0     2C 28 06 F1 | 	add	local06, #44
1f5c4     14 13 62 FC | 	wrlong	arg01, local06
1f5c8     2C 28 86 F1 | 	sub	local06, #44
1f5cc                 | LR__2970
1f5cc                 | LR__2971
1f5cc                 | LR__2972
1f5cc     00 2A 0E F2 | 	cmp	local07, #0 wz
1f5d0     14 13 02 56 |  if_ne	mov	arg01, local06
1f5d4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1f5d8     00 42 0E F2 | 	cmp	local19, #0 wz
1f5dc     00 12 06 A6 |  if_e	mov	arg01, #0
1f5e0     10 00 90 5D |  if_ne	jmp	#LR__2973
1f5e4     00 12 4E F2 | 	cmps	arg01, #0 wz
1f5e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f5ec     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f5f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f5f4                 | LR__2973
1f5f4     21 FB 01 F6 | 	mov	result1, local19
1f5f8                 | LR__2974
1f5f8     A7 F0 03 F6 | 	mov	ptra, fp
1f5fc     B2 00 A0 FD | 	call	#popregs_
1f600                 | __system___openraw_ret
1f600     2D 00 64 FD | 	ret
1f604                 | 
1f604                 | __system___closeraw
1f604     05 4A 05 F6 | 	mov	COUNT_, #5
1f608     A8 00 A0 FD | 	call	#pushregs_
1f60c     09 1F 02 F6 | 	mov	local01, arg01
1f610     00 20 06 F6 | 	mov	local02, #0
1f614     08 1E 06 F1 | 	add	local01, #8
1f618     0F FB 09 FB | 	rdlong	result1, local01 wz
1f61c     08 1E 86 F1 | 	sub	local01, #8
1f620     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f624     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1f628     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f62c     01 FA 65 A6 |  if_e	neg	result1, #1
1f630     A8 00 90 AD |  if_e	jmp	#LR__2982
1f634     2C 1E 06 F1 | 	add	local01, #44
1f638     0F FB 09 FB | 	rdlong	result1, local01 wz
1f63c     2C 1E 86 F1 | 	sub	local01, #44
1f640     38 00 90 AD |  if_e	jmp	#LR__2980
1f644     2C 1E 06 F1 | 	add	local01, #44
1f648     0F 23 02 FB | 	rdlong	local03, local01
1f64c     11 25 02 F6 | 	mov	local04, local03
1f650     2C 1E 86 F1 | 	sub	local01, #44
1f654     13 24 46 F7 | 	zerox	local04, #19
1f658     14 22 46 F0 | 	shr	local03, #20
1f65c     02 22 66 F0 | 	shl	local03, #2
1f660     ED 22 02 F1 | 	add	local03, __methods__
1f664     11 23 02 FB | 	rdlong	local03, local03
1f668     0F 13 02 F6 | 	mov	arg01, local01
1f66c     F2 26 02 F6 | 	mov	local05, objptr
1f670     12 E5 01 F6 | 	mov	objptr, local04
1f674     2D 22 62 FD | 	call	local03
1f678     13 E5 01 F6 | 	mov	objptr, local05
1f67c                 | LR__2980
1f67c     24 1E 06 F1 | 	add	local01, #36
1f680     0F 27 0A FB | 	rdlong	local05, local01 wz
1f684     24 1E 86 F1 | 	sub	local01, #36
1f688     3C 00 90 AD |  if_e	jmp	#LR__2981
1f68c     24 1E 06 F1 | 	add	local01, #36
1f690     0F 23 02 FB | 	rdlong	local03, local01
1f694     11 25 02 F6 | 	mov	local04, local03
1f698     24 1E 86 F1 | 	sub	local01, #36
1f69c     13 24 46 F7 | 	zerox	local04, #19
1f6a0     14 22 46 F0 | 	shr	local03, #20
1f6a4     02 22 66 F0 | 	shl	local03, #2
1f6a8     ED 22 02 F1 | 	add	local03, __methods__
1f6ac     11 23 02 FB | 	rdlong	local03, local03
1f6b0     0F 13 02 F6 | 	mov	arg01, local01
1f6b4     F2 26 02 F6 | 	mov	local05, objptr
1f6b8     12 E5 01 F6 | 	mov	objptr, local04
1f6bc     2D 22 62 FD | 	call	local03
1f6c0     13 E5 01 F6 | 	mov	objptr, local05
1f6c4     FD 20 02 F6 | 	mov	local02, result1
1f6c8                 | LR__2981
1f6c8     0F 13 02 F6 | 	mov	arg01, local01
1f6cc     00 14 06 F6 | 	mov	arg02, #0
1f6d0     34 16 06 F6 | 	mov	arg03, #52
1f6d4     98 00 A0 FD | 	call	#\builtin_bytefill_
1f6d8     10 FB 01 F6 | 	mov	result1, local02
1f6dc                 | LR__2982
1f6dc     A7 F0 03 F6 | 	mov	ptra, fp
1f6e0     B2 00 A0 FD | 	call	#popregs_
1f6e4                 | __system___closeraw_ret
1f6e4     2D 00 64 FD | 	ret
1f6e8                 | 
1f6e8                 | __system___vfs_open_sdcardx
1f6e8     0B 4A 05 F6 | 	mov	COUNT_, #11
1f6ec     A8 00 A0 FD | 	call	#pushregs_
1f6f0     09 23 02 F6 | 	mov	local03, arg01
1f6f4     0A 25 02 F6 | 	mov	local04, arg02
1f6f8     0B 27 02 F6 | 	mov	local05, arg03
1f6fc     0C 29 02 F6 | 	mov	local06, arg04
1f700     01 00 00 FF 
1f704     24 12 06 F6 | 	mov	arg01, ##548
1f708     FC F3 BF FD | 	call	#__system___gc_alloc_managed
1f70c     FD 2A 02 F6 | 	mov	local07, result1
1f710     01 00 00 FF 
1f714     34 12 06 F6 | 	mov	arg01, ##564
1f718     EC F3 BF FD | 	call	#__system___gc_alloc_managed
1f71c     FD 2C 02 F6 | 	mov	local08, result1
1f720     11 19 02 F6 | 	mov	arg04, local03
1f724     1F 18 C6 F0 | 	sar	arg04, #31
1f728     11 17 02 F6 | 	mov	arg03, local03
1f72c     01 12 06 F6 | 	mov	arg01, #1
1f730     00 14 06 F6 | 	mov	arg02, #0
1f734     4C DC BF FD | 	call	#__system___int64_shl
1f738     FD 1E 02 F6 | 	mov	local01, result1
1f73c     FE 2E 02 F6 | 	mov	local09, result2
1f740     12 19 02 F6 | 	mov	arg04, local04
1f744     1F 18 C6 F0 | 	sar	arg04, #31
1f748     12 17 02 F6 | 	mov	arg03, local04
1f74c     01 12 06 F6 | 	mov	arg01, #1
1f750     00 14 06 F6 | 	mov	arg02, #0
1f754     2C DC BF FD | 	call	#__system___int64_shl
1f758     FD 1E 42 F5 | 	or	local01, result1
1f75c     FE 2E 42 F5 | 	or	local09, result2
1f760     13 19 02 F6 | 	mov	arg04, local05
1f764     1F 18 C6 F0 | 	sar	arg04, #31
1f768     13 17 02 F6 | 	mov	arg03, local05
1f76c     01 12 06 F6 | 	mov	arg01, #1
1f770     00 14 06 F6 | 	mov	arg02, #0
1f774     0C DC BF FD | 	call	#__system___int64_shl
1f778     FD 1E 42 F5 | 	or	local01, result1
1f77c     FE 2E 42 F5 | 	or	local09, result2
1f780     14 19 02 F6 | 	mov	arg04, local06
1f784     1F 18 C6 F0 | 	sar	arg04, #31
1f788     14 17 02 F6 | 	mov	arg03, local06
1f78c     01 12 06 F6 | 	mov	arg01, #1
1f790     00 14 06 F6 | 	mov	arg02, #0
1f794     EC DB BF FD | 	call	#__system___int64_shl
1f798     17 15 02 F6 | 	mov	arg02, local09
1f79c     FD 1E 42 F5 | 	or	local01, result1
1f7a0     0A FD 41 F5 | 	or	result2, arg02
1f7a4     FE 20 02 F6 | 	mov	local02, result2
1f7a8     0F 13 02 F6 | 	mov	arg01, local01
1f7ac     10 15 02 F6 | 	mov	arg02, local02
1f7b0     08 DC BF FD | 	call	#__system___usepins
1f7b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f7b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f7bc     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1f7c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f7c4     00 FA 05 A6 |  if_e	mov	result1, #0
1f7c8     B4 00 90 AD |  if_e	jmp	#LR__2992
1f7cc     0F 31 02 F6 | 	mov	local10, local01
1f7d0     10 2F 02 F6 | 	mov	local09, local02
1f7d4     01 00 00 FF 
1f7d8     08 2A 06 F1 | 	add	local07, ##520
1f7dc     15 31 62 FC | 	wrlong	local10, local07
1f7e0     04 2A 06 F1 | 	add	local07, #4
1f7e4     15 2F 62 FC | 	wrlong	local09, local07
1f7e8     01 00 00 FF 
1f7ec     0C 2A 86 F1 | 	sub	local07, ##524
1f7f0     14 1B 02 F6 | 	mov	arg05, local06
1f7f4     00 12 06 F6 | 	mov	arg01, #0
1f7f8     11 15 02 F6 | 	mov	arg02, local03
1f7fc     12 17 02 F6 | 	mov	arg03, local04
1f800     13 19 02 F6 | 	mov	arg04, local05
1f804     F2 30 02 F6 | 	mov	local10, objptr
1f808     15 E5 01 F6 | 	mov	objptr, local07
1f80c     78 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1f810     18 E5 01 F6 | 	mov	objptr, local10
1f814     FD 32 0A F6 | 	mov	local11, result1 wz
1f818     24 00 90 5D |  if_ne	jmp	#LR__2990
1f81c     51 01 00 FF 
1f820     C2 14 06 F6 | 	mov	arg02, ##@LR__4387
1f824     16 13 02 F6 | 	mov	arg01, local08
1f828     00 16 06 F6 | 	mov	arg03, #0
1f82c     F2 32 02 F6 | 	mov	local11, objptr
1f830     15 E5 01 F6 | 	mov	objptr, local07
1f834     A8 5E B0 FD | 	call	#_fatfs_cc_f_mount
1f838     19 E5 01 F6 | 	mov	objptr, local11
1f83c     FD 32 02 F6 | 	mov	local11, result1
1f840                 | LR__2990
1f840     00 32 0E F2 | 	cmp	local11, #0 wz
1f844     24 00 90 AD |  if_e	jmp	#LR__2991
1f848     0F 13 02 F6 | 	mov	arg01, local01
1f84c     10 15 02 F6 | 	mov	arg02, local02
1f850     BC DB BF FD | 	call	#__system___freepins
1f854     19 13 6A F6 | 	neg	arg01, local11 wz
1f858     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f85c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f860     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f864     00 FA 05 F6 | 	mov	result1, #0
1f868     14 00 90 FD | 	jmp	#LR__2992
1f86c                 | LR__2991
1f86c     15 13 02 F6 | 	mov	arg01, local07
1f870     F2 32 02 F6 | 	mov	local11, objptr
1f874     15 E5 01 F6 | 	mov	objptr, local07
1f878     44 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1f87c     19 E5 01 F6 | 	mov	objptr, local11
1f880                 | LR__2992
1f880     A7 F0 03 F6 | 	mov	ptra, fp
1f884     B2 00 A0 FD | 	call	#popregs_
1f888                 | __system___vfs_open_sdcardx_ret
1f888     2D 00 64 FD | 	ret
1f88c                 | 
1f88c                 | __system____default_getc
1f88c     03 4A 05 F6 | 	mov	COUNT_, #3
1f890     A8 00 A0 FD | 	call	#pushregs_
1f894     09 1F 02 F6 | 	mov	local01, arg01
1f898     0F 21 02 FB | 	rdlong	local02, local01
1f89c     08 20 06 F1 | 	add	local02, #8
1f8a0     10 23 02 FB | 	rdlong	local03, local02
1f8a4     02 22 CE F7 | 	test	local03, #2 wz
1f8a8     0F 13 02 56 |  if_ne	mov	arg01, local01
1f8ac     00 01 B0 5D |  if_ne	call	#__system____default_flush
1f8b0     10 23 02 FB | 	rdlong	local03, local02
1f8b4     01 22 46 F5 | 	or	local03, #1
1f8b8     10 23 62 FC | 	wrlong	local03, local02
1f8bc     08 20 86 F1 | 	sub	local02, #8
1f8c0     10 23 0A FB | 	rdlong	local03, local02 wz
1f8c4     0C 00 90 5D |  if_ne	jmp	#LR__3000
1f8c8     0F 13 02 F6 | 	mov	arg01, local01
1f8cc     60 16 B0 FD | 	call	#__system____default_filbuf
1f8d0     FD 22 02 F6 | 	mov	local03, result1
1f8d4                 | LR__3000
1f8d4     01 22 56 F2 | 	cmps	local03, #1 wc
1f8d8     01 FA 65 C6 |  if_b	neg	result1, #1
1f8dc     1C 00 90 CD |  if_b	jmp	#LR__3001
1f8e0     01 22 86 F1 | 	sub	local03, #1
1f8e4     10 23 62 FC | 	wrlong	local03, local02
1f8e8     04 20 06 F1 | 	add	local02, #4
1f8ec     10 23 02 FB | 	rdlong	local03, local02
1f8f0     11 FB C1 FA | 	rdbyte	result1, local03
1f8f4     01 22 06 F1 | 	add	local03, #1
1f8f8     10 23 62 FC | 	wrlong	local03, local02
1f8fc                 | LR__3001
1f8fc     A7 F0 03 F6 | 	mov	ptra, fp
1f900     B2 00 A0 FD | 	call	#popregs_
1f904                 | __system____default_getc_ret
1f904     2D 00 64 FD | 	ret
1f908                 | 
1f908                 | __system____default_putc
1f908     06 4A 05 F6 | 	mov	COUNT_, #6
1f90c     A8 00 A0 FD | 	call	#pushregs_
1f910     09 1F 02 F6 | 	mov	local01, arg01
1f914     0A 21 02 F6 | 	mov	local02, arg02
1f918     10 23 02 FB | 	rdlong	local03, local02
1f91c     08 22 06 F1 | 	add	local03, #8
1f920     11 FB 01 FB | 	rdlong	result1, local03
1f924     01 FA CD F7 | 	test	result1, #1 wz
1f928     10 13 02 56 |  if_ne	mov	arg01, local02
1f92c     80 00 B0 5D |  if_ne	call	#__system____default_flush
1f930     11 25 02 FB | 	rdlong	local04, local03
1f934     02 24 46 F5 | 	or	local04, #2
1f938     11 25 62 FC | 	wrlong	local04, local03
1f93c     08 22 86 F1 | 	sub	local03, #8
1f940     11 27 02 FB | 	rdlong	local05, local03
1f944     10 22 06 F1 | 	add	local03, #16
1f948     11 15 02 FB | 	rdlong	arg02, local03
1f94c     10 22 86 F1 | 	sub	local03, #16
1f950     13 FB 01 F6 | 	mov	result1, local05
1f954     0A FB 01 F1 | 	add	result1, arg02
1f958     FD 1E 42 FC | 	wrbyte	local01, result1
1f95c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1f960     01 26 06 F1 | 	add	local05, #1
1f964     11 27 62 FC | 	wrlong	local05, local03
1f968     06 20 06 F1 | 	add	local02, #6
1f96c     10 29 EA FA | 	rdword	local06, local02 wz
1f970     06 20 86 F1 | 	sub	local02, #6
1f974     0C 22 06 51 |  if_ne	add	local03, #12
1f978     11 25 02 5B |  if_ne	rdlong	local04, local03
1f97c     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1f980     0C 00 90 AD |  if_e	jmp	#LR__3010
1f984     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f988     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1f98c     10 00 90 5D |  if_ne	jmp	#LR__3011
1f990                 | LR__3010
1f990     10 13 02 F6 | 	mov	arg01, local02
1f994     18 00 B0 FD | 	call	#__system____default_flush
1f998     00 FA 0D F2 | 	cmp	result1, #0 wz
1f99c     01 1E 66 56 |  if_ne	neg	local01, #1
1f9a0                 | LR__3011
1f9a0     0F FB 01 F6 | 	mov	result1, local01
1f9a4     A7 F0 03 F6 | 	mov	ptra, fp
1f9a8     B2 00 A0 FD | 	call	#popregs_
1f9ac                 | __system____default_putc_ret
1f9ac     2D 00 64 FD | 	ret
1f9b0                 | 
1f9b0                 | __system____default_flush
1f9b0     06 4A 05 F6 | 	mov	COUNT_, #6
1f9b4     A8 00 A0 FD | 	call	#pushregs_
1f9b8     09 1F 02 F6 | 	mov	local01, arg01
1f9bc     0F 21 02 FB | 	rdlong	local02, local01
1f9c0     10 23 02 FB | 	rdlong	local03, local02
1f9c4     08 20 06 F1 | 	add	local02, #8
1f9c8     10 FB 01 FB | 	rdlong	result1, local02
1f9cc     08 20 86 F1 | 	sub	local02, #8
1f9d0     02 FA CD F7 | 	test	result1, #2 wz
1f9d4     D0 00 90 AD |  if_e	jmp	#LR__3022
1f9d8     01 22 56 F2 | 	cmps	local03, #1 wc
1f9dc     20 01 90 CD |  if_b	jmp	#LR__3024
1f9e0     08 1E 06 F1 | 	add	local01, #8
1f9e4     0F FB 01 FB | 	rdlong	result1, local01
1f9e8     08 1E 86 F1 | 	sub	local01, #8
1f9ec     40 FA CD F7 | 	test	result1, #64 wz
1f9f0     68 00 90 AD |  if_e	jmp	#LR__3021
1f9f4     08 1E 06 F1 | 	add	local01, #8
1f9f8     0F 17 02 FB | 	rdlong	arg03, local01
1f9fc     08 1E 86 F1 | 	sub	local01, #8
1fa00     80 16 CE F7 | 	test	arg03, #128 wz
1fa04     54 00 90 AD |  if_e	jmp	#LR__3020
1fa08     30 1E 06 F1 | 	add	local01, #48
1fa0c     0F 25 02 FB | 	rdlong	local04, local01
1fa10     12 27 02 F6 | 	mov	local05, local04
1fa14     30 1E 86 F1 | 	sub	local01, #48
1fa18     13 26 46 F7 | 	zerox	local05, #19
1fa1c     14 24 46 F0 | 	shr	local04, #20
1fa20     02 24 66 F0 | 	shl	local04, #2
1fa24     ED 24 02 F1 | 	add	local04, __methods__
1fa28     12 25 02 FB | 	rdlong	local04, local04
1fa2c     0F 13 02 F6 | 	mov	arg01, local01
1fa30     00 14 06 F6 | 	mov	arg02, #0
1fa34     02 16 06 F6 | 	mov	arg03, #2
1fa38     F2 28 02 F6 | 	mov	local06, objptr
1fa3c     13 E5 01 F6 | 	mov	objptr, local05
1fa40     2D 24 62 FD | 	call	local04
1fa44     14 E5 01 F6 | 	mov	objptr, local06
1fa48     08 1E 06 F1 | 	add	local01, #8
1fa4c     0F 29 02 FB | 	rdlong	local06, local01
1fa50     80 28 26 F5 | 	andn	local06, #128
1fa54     0F 29 62 FC | 	wrlong	local06, local01
1fa58     08 1E 86 F1 | 	sub	local01, #8
1fa5c                 | LR__3020
1fa5c                 | LR__3021
1fa5c     18 1E 06 F1 | 	add	local01, #24
1fa60     0F 25 02 FB | 	rdlong	local04, local01
1fa64     12 27 02 F6 | 	mov	local05, local04
1fa68     18 1E 86 F1 | 	sub	local01, #24
1fa6c     13 26 46 F7 | 	zerox	local05, #19
1fa70     14 24 46 F0 | 	shr	local04, #20
1fa74     02 24 66 F0 | 	shl	local04, #2
1fa78     ED 24 02 F1 | 	add	local04, __methods__
1fa7c     12 25 02 FB | 	rdlong	local04, local04
1fa80     10 20 06 F1 | 	add	local02, #16
1fa84     10 15 02 FB | 	rdlong	arg02, local02
1fa88     10 20 86 F1 | 	sub	local02, #16
1fa8c     0F 13 02 F6 | 	mov	arg01, local01
1fa90     11 17 02 F6 | 	mov	arg03, local03
1fa94     F2 28 02 F6 | 	mov	local06, objptr
1fa98     13 E5 01 F6 | 	mov	objptr, local05
1fa9c     2D 24 62 FD | 	call	local04
1faa0     14 E5 01 F6 | 	mov	objptr, local06
1faa4     58 00 90 FD | 	jmp	#LR__3024
1faa8                 | LR__3022
1faa8     08 20 06 F1 | 	add	local02, #8
1faac     10 29 02 FB | 	rdlong	local06, local02
1fab0     08 20 86 F1 | 	sub	local02, #8
1fab4     01 28 CE F7 | 	test	local06, #1 wz
1fab8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1fabc     40 00 90 AD |  if_e	jmp	#LR__3023
1fac0     30 1E 06 F1 | 	add	local01, #48
1fac4     0F 25 02 FB | 	rdlong	local04, local01
1fac8     12 27 02 F6 | 	mov	local05, local04
1facc     30 1E 86 F1 | 	sub	local01, #48
1fad0     13 26 46 F7 | 	zerox	local05, #19
1fad4     14 24 46 F0 | 	shr	local04, #20
1fad8     02 24 66 F0 | 	shl	local04, #2
1fadc     ED 24 02 F1 | 	add	local04, __methods__
1fae0     12 25 02 FB | 	rdlong	local04, local04
1fae4     0F 13 02 F6 | 	mov	arg01, local01
1fae8     11 15 62 F6 | 	neg	arg02, local03
1faec     01 16 06 F6 | 	mov	arg03, #1
1faf0     F2 28 02 F6 | 	mov	local06, objptr
1faf4     13 E5 01 F6 | 	mov	objptr, local05
1faf8     2D 24 62 FD | 	call	local04
1fafc     14 E5 01 F6 | 	mov	objptr, local06
1fb00                 | LR__3023
1fb00                 | LR__3024
1fb00     10 01 68 FC | 	wrlong	#0, local02
1fb04     04 20 06 F1 | 	add	local02, #4
1fb08     10 01 68 FC | 	wrlong	#0, local02
1fb0c     04 20 06 F1 | 	add	local02, #4
1fb10     10 01 68 FC | 	wrlong	#0, local02
1fb14     00 FA 05 F6 | 	mov	result1, #0
1fb18     A7 F0 03 F6 | 	mov	ptra, fp
1fb1c     B2 00 A0 FD | 	call	#popregs_
1fb20                 | __system____default_flush_ret
1fb20     2D 00 64 FD | 	ret
1fb24                 | 
1fb24                 | __system____default_buffer_init
1fb24     02 4A 05 F6 | 	mov	COUNT_, #2
1fb28     A8 00 A0 FD | 	call	#pushregs_
1fb2c     09 1F 02 F6 | 	mov	local01, arg01
1fb30     0F 21 02 FB | 	rdlong	local02, local01
1fb34     0F 13 02 F6 | 	mov	arg01, local01
1fb38     F8 02 B0 FD | 	call	#__system___isatty
1fb3c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb40     06 1E 06 51 |  if_ne	add	local01, #6
1fb44     0F 0B 58 5C |  if_ne	wrword	#5, local01
1fb48     06 1E 06 A1 |  if_e	add	local01, #6
1fb4c     0F 0D 58 AC |  if_e	wrword	#6, local01
1fb50     14 20 06 F1 | 	add	local02, #20
1fb54     10 1F 02 F6 | 	mov	local01, local02
1fb58     04 20 86 F1 | 	sub	local02, #4
1fb5c     10 1F 62 FC | 	wrlong	local01, local02
1fb60     04 20 86 F1 | 	sub	local02, #4
1fb64     02 00 80 FF 
1fb68     10 01 68 FC | 	wrlong	##1024, local02
1fb6c     00 FA 05 F6 | 	mov	result1, #0
1fb70     A7 F0 03 F6 | 	mov	ptra, fp
1fb74     B2 00 A0 FD | 	call	#popregs_
1fb78                 | __system____default_buffer_init_ret
1fb78     2D 00 64 FD | 	ret
1fb7c                 | 
1fb7c                 | __system__stat
1fb7c     04 4A 05 F6 | 	mov	COUNT_, #4
1fb80     A8 00 A0 FD | 	call	#pushregs_
1fb84     0A 1F 02 F6 | 	mov	local01, arg02
1fb88     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1fb8c     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
1fb90     09 15 02 F6 | 	mov	arg02, arg01
1fb94     10 13 02 F6 | 	mov	arg01, local02
1fb98     00 16 06 F6 | 	mov	arg03, #0
1fb9c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
1fba0     0C B9 BF FD | 	call	#__system____getvfsforfile
1fba4     FD 22 0A F6 | 	mov	local03, result1 wz
1fba8     10 00 90 AD |  if_e	jmp	#LR__3030
1fbac     34 22 06 F1 | 	add	local03, #52
1fbb0     11 17 0A FB | 	rdlong	arg03, local03 wz
1fbb4     34 22 86 F1 | 	sub	local03, #52
1fbb8     14 00 90 5D |  if_ne	jmp	#LR__3031
1fbbc                 | LR__3030
1fbbc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1fbc0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
1fbc4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fbc8     01 FA 65 F6 | 	neg	result1, #1
1fbcc     68 00 90 FD | 	jmp	#LR__3032
1fbd0                 | LR__3031
1fbd0     0F 13 02 F6 | 	mov	arg01, local01
1fbd4     00 14 06 F6 | 	mov	arg02, #0
1fbd8     30 16 06 F6 | 	mov	arg03, #48
1fbdc     09 25 02 F6 | 	mov	local04, arg01
1fbe0     98 00 A0 FD | 	call	#\builtin_bytefill_
1fbe4     12 FB 01 F6 | 	mov	result1, local04
1fbe8     10 13 CA FA | 	rdbyte	arg01, local02 wz
1fbec     08 1E 06 A1 |  if_e	add	local01, #8
1fbf0     08 00 80 AF 
1fbf4     0F FF 6B AC |  if_e	wrlong	##4607, local01
1fbf8     00 FA 05 A6 |  if_e	mov	result1, #0
1fbfc     38 00 90 AD |  if_e	jmp	#LR__3032
1fc00     34 22 06 F1 | 	add	local03, #52
1fc04     11 23 02 FB | 	rdlong	local03, local03
1fc08     11 25 02 F6 | 	mov	local04, local03
1fc0c     13 22 46 F7 | 	zerox	local03, #19
1fc10     14 24 46 F0 | 	shr	local04, #20
1fc14     02 24 66 F0 | 	shl	local04, #2
1fc18     ED 24 02 F1 | 	add	local04, __methods__
1fc1c     12 25 02 FB | 	rdlong	local04, local04
1fc20     10 13 02 F6 | 	mov	arg01, local02
1fc24     0F 15 02 F6 | 	mov	arg02, local01
1fc28     F2 20 02 F6 | 	mov	local02, objptr
1fc2c     11 E5 01 F6 | 	mov	objptr, local03
1fc30     2D 24 62 FD | 	call	local04
1fc34     10 E5 01 F6 | 	mov	objptr, local02
1fc38                 | LR__3032
1fc38     A7 F0 03 F6 | 	mov	ptra, fp
1fc3c     B2 00 A0 FD | 	call	#popregs_
1fc40                 | __system__stat_ret
1fc40     2D 00 64 FD | 	ret
1fc44                 | 
1fc44                 | __system__read
1fc44     0A 12 16 F2 | 	cmp	arg01, #10 wc
1fc48     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
1fc4c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1fc50     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
1fc54     01 FA 65 36 |  if_ae	neg	result1, #1
1fc58     20 00 90 3D |  if_ae	jmp	#LR__3040
1fc5c     34 12 06 FD | 	qmul	arg01, #52
1fc60     02 00 00 FF 
1fc64     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
1fc68     18 12 62 FD | 	getqx	arg01
1fc6c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1fc70     02 00 00 FF 
1fc74     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
1fc78     CC 0F B0 FD | 	call	#__system___vfsread
1fc7c                 | LR__3040
1fc7c                 | __system__read_ret
1fc7c     2D 00 64 FD | 	ret
1fc80                 | 
1fc80                 | __system__close
1fc80     0A 12 16 F2 | 	cmp	arg01, #10 wc
1fc84     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
1fc88     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1fc8c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
1fc90     01 FA 65 36 |  if_ae	neg	result1, #1
1fc94     20 00 90 3D |  if_ae	jmp	#LR__3050
1fc98     34 12 06 FD | 	qmul	arg01, #52
1fc9c     02 00 00 FF 
1fca0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
1fca4     18 12 62 FD | 	getqx	arg01
1fca8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1fcac     02 00 00 FF 
1fcb0     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
1fcb4     4C F9 BF FD | 	call	#__system___closeraw
1fcb8                 | LR__3050
1fcb8                 | __system__close_ret
1fcb8     2D 00 64 FD | 	ret
1fcbc                 | 
1fcbc                 | __system__lseek
1fcbc     06 4A 05 F6 | 	mov	COUNT_, #6
1fcc0     A8 00 A0 FD | 	call	#pushregs_
1fcc4     0A 12 16 F2 | 	cmp	arg01, #10 wc
1fcc8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
1fccc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1fcd0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
1fcd4     01 FA 65 36 |  if_ae	neg	result1, #1
1fcd8     C4 00 90 3D |  if_ae	jmp	#LR__3061
1fcdc     34 12 06 FD | 	qmul	arg01, #52
1fce0     02 00 00 FF 
1fce4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
1fce8     18 1E 62 FD | 	getqx	local01
1fcec     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
1fcf0     30 1E 06 F1 | 	add	local01, #48
1fcf4     0F 13 0A FB | 	rdlong	arg01, local01 wz
1fcf8     30 1E 86 F1 | 	sub	local01, #48
1fcfc     02 00 00 FF 
1fd00     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
1fd04     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1fd08     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1fd0c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1fd10     01 FA 65 A6 |  if_e	neg	result1, #1
1fd14     88 00 90 AD |  if_e	jmp	#LR__3061
1fd18     08 1E 06 F1 | 	add	local01, #8
1fd1c     0F 21 02 FB | 	rdlong	local02, local01
1fd20     08 1E 86 F1 | 	sub	local01, #8
1fd24     40 20 CE F7 | 	test	local02, #64 wz
1fd28     08 1E 06 51 |  if_ne	add	local01, #8
1fd2c     0F 21 02 5B |  if_ne	rdlong	local02, local01
1fd30     80 20 46 55 |  if_ne	or	local02, #128
1fd34     0F 21 62 5C |  if_ne	wrlong	local02, local01
1fd38     08 1E 86 51 |  if_ne	sub	local01, #8
1fd3c     30 1E 06 F1 | 	add	local01, #48
1fd40     0F 23 02 FB | 	rdlong	local03, local01
1fd44     11 25 02 F6 | 	mov	local04, local03
1fd48     30 1E 86 F1 | 	sub	local01, #48
1fd4c     13 24 46 F7 | 	zerox	local04, #19
1fd50     14 22 46 F0 | 	shr	local03, #20
1fd54     02 22 66 F0 | 	shl	local03, #2
1fd58     ED 22 02 F1 | 	add	local03, __methods__
1fd5c     11 23 02 FB | 	rdlong	local03, local03
1fd60     0F 13 02 F6 | 	mov	arg01, local01
1fd64     F2 26 02 F6 | 	mov	local05, objptr
1fd68     12 E5 01 F6 | 	mov	objptr, local04
1fd6c     2D 22 62 FD | 	call	local03
1fd70     13 E5 01 F6 | 	mov	objptr, local05
1fd74     FD 28 02 F6 | 	mov	local06, result1
1fd78     00 28 56 F2 | 	cmps	local06, #0 wc
1fd7c     1C 00 90 3D |  if_ae	jmp	#LR__3060
1fd80     14 13 6A F6 | 	neg	arg01, local06 wz
1fd84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1fd88     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1fd8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fd90     01 FA 65 56 |  if_ne	neg	result1, #1
1fd94     00 FA 05 A6 |  if_e	mov	result1, #0
1fd98     04 00 90 FD | 	jmp	#LR__3061
1fd9c                 | LR__3060
1fd9c     14 FB 01 F6 | 	mov	result1, local06
1fda0                 | LR__3061
1fda0     A7 F0 03 F6 | 	mov	ptra, fp
1fda4     B2 00 A0 FD | 	call	#popregs_
1fda8                 | __system__lseek_ret
1fda8     2D 00 64 FD | 	ret
1fdac                 | 
1fdac                 | __system___ioctl
1fdac     03 4A 05 F6 | 	mov	COUNT_, #3
1fdb0     A8 00 A0 FD | 	call	#pushregs_
1fdb4     00 12 4E F2 | 	cmps	arg01, #0 wz
1fdb8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1fdbc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1fdc0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1fdc4     01 FA 65 A6 |  if_e	neg	result1, #1
1fdc8     5C 00 90 AD |  if_e	jmp	#LR__3071
1fdcc     28 12 06 F1 | 	add	arg01, #40
1fdd0     09 1F 02 FB | 	rdlong	local01, arg01
1fdd4     0F 21 02 F6 | 	mov	local02, local01
1fdd8     28 12 86 F1 | 	sub	arg01, #40
1fddc     13 20 46 F7 | 	zerox	local02, #19
1fde0     14 1E 46 F0 | 	shr	local01, #20
1fde4     02 1E 66 F0 | 	shl	local01, #2
1fde8     ED 1E 02 F1 | 	add	local01, __methods__
1fdec     0F 1F 02 FB | 	rdlong	local01, local01
1fdf0     F2 22 02 F6 | 	mov	local03, objptr
1fdf4     10 E5 01 F6 | 	mov	objptr, local02
1fdf8     2D 1E 62 FD | 	call	local01
1fdfc     11 E5 01 F6 | 	mov	objptr, local03
1fe00     FD 12 0A F6 | 	mov	arg01, result1 wz
1fe04     1C 00 90 AD |  if_e	jmp	#LR__3070
1fe08     00 12 4E F2 | 	cmps	arg01, #0 wz
1fe0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1fe10     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1fe14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fe18     01 FA 65 56 |  if_ne	neg	result1, #1
1fe1c     00 FA 05 A6 |  if_e	mov	result1, #0
1fe20     04 00 90 FD | 	jmp	#LR__3071
1fe24                 | LR__3070
1fe24     00 FA 05 F6 | 	mov	result1, #0
1fe28                 | LR__3071
1fe28     A7 F0 03 F6 | 	mov	ptra, fp
1fe2c     B2 00 A0 FD | 	call	#popregs_
1fe30                 | __system___ioctl_ret
1fe30     2D 00 64 FD | 	ret
1fe34                 | 
1fe34                 | __system___isatty
1fe34     00 4A 05 F6 | 	mov	COUNT_, #0
1fe38     A8 00 A0 FD | 	call	#pushregs_
1fe3c     0C F0 07 F1 | 	add	ptra, #12
1fe40     04 4E 05 F1 | 	add	fp, #4
1fe44     A7 12 62 FC | 	wrlong	arg01, fp
1fe48     04 4E 05 F1 | 	add	fp, #4
1fe4c     A7 16 02 F6 | 	mov	arg03, fp
1fe50     08 4E 85 F1 | 	sub	fp, #8
1fe54     00 15 06 F6 | 	mov	arg02, #256
1fe58     50 FF BF FD | 	call	#__system___ioctl
1fe5c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe60     01 FA 05 A6 |  if_e	mov	result1, #1
1fe64     00 FA 05 56 |  if_ne	mov	result1, #0
1fe68     A7 F0 03 F6 | 	mov	ptra, fp
1fe6c     B2 00 A0 FD | 	call	#popregs_
1fe70                 | __system___isatty_ret
1fe70     2D 00 64 FD | 	ret
1fe74                 | 
1fe74                 | __system____getftab
1fe74     0A 12 16 F2 | 	cmp	arg01, #10 wc
1fe78     34 12 06 CD |  if_b	qmul	arg01, #52
1fe7c     00 FA 05 36 |  if_ae	mov	result1, #0
1fe80     02 00 00 CF 
1fe84     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1fe88     18 FA 61 CD |  if_b	getqx	result1
1fe8c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1fe90     02 00 00 CF 
1fe94     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1fe98                 | __system____getftab_ret
1fe98     2D 00 64 FD | 	ret
1fe9c                 | 
1fe9c                 | __system__strncpy
1fe9c     09 01 02 F6 | 	mov	_var01, arg01
1fea0                 | LR__3080
1fea0     01 16 86 F1 | 	sub	arg03, #1
1fea4     00 16 56 F2 | 	cmps	arg03, #0 wc
1fea8     18 00 90 CD |  if_b	jmp	#LR__3081
1feac     0A FB C1 FA | 	rdbyte	result1, arg02
1feb0     00 FB 41 FC | 	wrbyte	result1, _var01
1feb4     01 14 06 F1 | 	add	arg02, #1
1feb8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1febc     01 00 06 F1 | 	add	_var01, #1
1fec0     DC FF 9F 5D |  if_ne	jmp	#LR__3080
1fec4                 | LR__3081
1fec4     97 0C 48 FB | 	callpa	#(@LR__3083-@LR__3082)>>2,fcache_load_ptr_
1fec8                 | LR__3082
1fec8     01 16 86 F1 | 	sub	arg03, #1
1fecc     00 16 56 F2 | 	cmps	arg03, #0 wc
1fed0     00 03 02 36 |  if_ae	mov	_var02, _var01
1fed4     01 00 06 31 |  if_ae	add	_var01, #1
1fed8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1fedc     E8 FF 9F 3D |  if_ae	jmp	#LR__3082
1fee0                 | LR__3083
1fee0     09 FB 01 F6 | 	mov	result1, arg01
1fee4                 | __system__strncpy_ret
1fee4     2D 00 64 FD | 	ret
1fee8                 | 
1fee8                 | __system__strncat
1fee8     00 14 4E F2 | 	cmps	arg02, #0 wz
1feec     50 00 90 AD |  if_e	jmp	#LR__3094
1fef0     01 16 16 F2 | 	cmp	arg03, #1 wc
1fef4     48 00 90 CD |  if_b	jmp	#LR__3094
1fef8     09 01 02 F6 | 	mov	_var01, arg01
1fefc     97 1E 48 FB | 	callpa	#(@LR__3092-@LR__3090)>>2,fcache_load_ptr_
1ff00                 | LR__3090
1ff00     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1ff04     01 00 06 51 |  if_ne	add	_var01, #1
1ff08     F4 FF 9F 5D |  if_ne	jmp	#LR__3090
1ff0c     0B 03 02 F6 | 	mov	_var02, arg03
1ff10                 | LR__3091
1ff10     0A 05 C2 FA | 	rdbyte	_var03, arg02
1ff14     02 07 02 F6 | 	mov	_var04, _var03
1ff18     07 06 4E F7 | 	zerox	_var04, #7 wz
1ff1c     01 14 06 F1 | 	add	arg02, #1
1ff20     18 00 90 AD |  if_e	jmp	#LR__3093
1ff24     01 02 86 F1 | 	sub	_var02, #1
1ff28     00 02 56 F2 | 	cmps	_var02, #0 wc
1ff2c     00 07 02 36 |  if_ae	mov	_var04, _var01
1ff30     01 00 06 31 |  if_ae	add	_var01, #1
1ff34     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1ff38     D4 FF 9F 3D |  if_ae	jmp	#LR__3091
1ff3c                 | LR__3092
1ff3c                 | LR__3093
1ff3c     00 01 48 FC | 	wrbyte	#0, _var01
1ff40                 | LR__3094
1ff40     09 FB 01 F6 | 	mov	result1, arg01
1ff44                 | __system__strncat_ret
1ff44     2D 00 64 FD | 	ret
1ff48                 | 
1ff48                 | __system__strncmp
1ff48     09 01 0A F6 | 	mov	_var01, arg01 wz
1ff4c     14 00 90 5D |  if_ne	jmp	#LR__3100
1ff50     00 14 0E F2 | 	cmp	arg02, #0 wz
1ff54     01 02 66 56 |  if_ne	neg	_var02, #1
1ff58     00 02 06 A6 |  if_e	mov	_var02, #0
1ff5c     01 FB 01 F6 | 	mov	result1, _var02
1ff60     74 00 90 FD | 	jmp	#__system__strncmp_ret
1ff64                 | LR__3100
1ff64     00 14 0E F2 | 	cmp	arg02, #0 wz
1ff68     01 FA 05 A6 |  if_e	mov	result1, #1
1ff6c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1ff70     0B 05 02 F6 | 	mov	_var03, arg03
1ff74     97 16 48 FB | 	callpa	#(@LR__3102-@LR__3101)>>2,fcache_load_ptr_
1ff78                 | LR__3101
1ff78     00 07 C2 FA | 	rdbyte	_var04, _var01
1ff7c     0A 09 02 F6 | 	mov	_var05, arg02
1ff80     04 0B C2 FA | 	rdbyte	_var06, _var05
1ff84     01 04 86 F1 | 	sub	_var03, #1
1ff88     00 04 56 F2 | 	cmps	_var03, #0 wc
1ff8c     01 00 06 F1 | 	add	_var01, #1
1ff90     01 14 06 F1 | 	add	arg02, #1
1ff94     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1ff98     08 00 90 2D |  if_nc_and_z	jmp	#LR__3103
1ff9c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1ffa0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3101
1ffa4                 | LR__3102
1ffa4                 | LR__3103
1ffa4     00 04 56 F2 | 	cmps	_var03, #0 wc
1ffa8     00 FA 05 C6 |  if_b	mov	result1, #0
1ffac     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1ffb0     05 07 0A F2 | 	cmp	_var04, _var06 wz
1ffb4     00 FA 05 A6 |  if_e	mov	result1, #0
1ffb8     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1ffbc     00 06 0E F2 | 	cmp	_var04, #0 wz
1ffc0     01 FA 65 A6 |  if_e	neg	result1, #1
1ffc4     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1ffc8     00 0A 0E F2 | 	cmp	_var06, #0 wz
1ffcc     01 FA 05 A6 |  if_e	mov	result1, #1
1ffd0     03 FB 01 56 |  if_ne	mov	result1, _var04
1ffd4     05 FB 81 51 |  if_ne	sub	result1, _var06
1ffd8                 | __system__strncmp_ret
1ffd8     2D 00 64 FD | 	ret
1ffdc                 | 
1ffdc                 | __system____root_opendir
1ffdc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ffe0     04 12 06 F1 | 	add	arg01, #4
1ffe4     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
1ffe8     00 FA 05 F6 | 	mov	result1, #0
1ffec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1fff0                 | __system____root_opendir_ret
1fff0     2D 00 64 FD | 	ret
1fff4                 | 
1fff4                 | __system____root_readdir
1fff4     03 4A 05 F6 | 	mov	COUNT_, #3
1fff8     A8 00 A0 FD | 	call	#pushregs_
1fffc     09 1F 02 F6 | 	mov	local01, arg01
20000     0A 21 02 F6 | 	mov	local02, arg02
20004     04 1E 06 F1 | 	add	local01, #4
20008     0F 23 02 FB | 	rdlong	local03, local01
2000c     04 1E 86 F1 | 	sub	local01, #4
20010                 | LR__3110
20010     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20014     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
20018     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2001c     01 FA 65 A6 |  if_e	neg	result1, #1
20020     48 00 90 AD |  if_e	jmp	#LR__3111
20024     11 17 0A FB | 	rdlong	arg03, local03 wz
20028     04 22 06 A1 |  if_e	add	local03, #4
2002c     E0 FF 9F AD |  if_e	jmp	#LR__3110
20030     11 15 02 FB | 	rdlong	arg02, local03
20034     01 14 06 F1 | 	add	arg02, #1
20038     10 13 02 F6 | 	mov	arg01, local02
2003c     40 16 06 F6 | 	mov	arg03, #64
20040     58 FE BF FD | 	call	#__system__strncpy
20044     50 20 06 F1 | 	add	local02, #80
20048     10 03 48 FC | 	wrbyte	#1, local02
2004c     08 20 86 F1 | 	sub	local02, #8
20050     10 01 68 FC | 	wrlong	#0, local02
20054     04 20 06 F1 | 	add	local02, #4
20058     10 01 68 FC | 	wrlong	#0, local02
2005c     04 22 06 F1 | 	add	local03, #4
20060     04 1E 06 F1 | 	add	local01, #4
20064     0F 23 62 FC | 	wrlong	local03, local01
20068     00 FA 05 F6 | 	mov	result1, #0
2006c                 | LR__3111
2006c     A7 F0 03 F6 | 	mov	ptra, fp
20070     B2 00 A0 FD | 	call	#popregs_
20074                 | __system____root_readdir_ret
20074     2D 00 64 FD | 	ret
20078                 | 
20078                 | __system____root_closedir
20078     00 FA 05 F6 | 	mov	result1, #0
2007c                 | __system____root_closedir_ret
2007c     2D 00 64 FD | 	ret
20080                 | 
20080                 | __system____root_stat
20080     0A 01 02 F6 | 	mov	_var01, arg02
20084     00 13 02 F6 | 	mov	arg01, _var01
20088     00 14 06 F6 | 	mov	arg02, #0
2008c     30 16 06 F6 | 	mov	arg03, #48
20090     98 00 A0 FD | 	call	#\builtin_bytefill_
20094     08 00 06 F1 | 	add	_var01, #8
20098     08 00 80 FF 
2009c     00 FF 6B FC | 	wrlong	##4607, _var01
200a0     00 FA 05 F6 | 	mov	result1, #0
200a4                 | __system____root_stat_ret
200a4     2D 00 64 FD | 	ret
200a8                 | 
200a8                 | __system___normalizeName
200a8     00 00 06 F6 | 	mov	_var01, #0
200ac     09 03 02 F6 | 	mov	_var02, arg01
200b0     01 05 02 F6 | 	mov	_var03, _var02
200b4                 | LR__3120
200b4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
200b8     5C 01 90 AD |  if_e	jmp	#LR__3139
200bc     00 00 0E F2 | 	cmp	_var01, #0 wz
200c0     02 07 02 56 |  if_ne	mov	_var04, _var03
200c4     01 04 06 51 |  if_ne	add	_var03, #1
200c8     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
200cc     00 00 06 56 |  if_ne	mov	_var01, #0
200d0     01 07 C2 FA | 	rdbyte	_var04, _var02
200d4     2E 06 0E F2 | 	cmp	_var04, #46 wz
200d8     D8 00 90 5D |  if_ne	jmp	#LR__3132
200dc     01 02 06 F1 | 	add	_var02, #1
200e0     01 07 C2 FA | 	rdbyte	_var04, _var02
200e4     01 02 86 F1 | 	sub	_var02, #1
200e8     2F 06 0E F2 | 	cmp	_var04, #47 wz
200ec     18 00 90 AD |  if_e	jmp	#LR__3121
200f0     01 02 06 F1 | 	add	_var02, #1
200f4     01 09 C2 FA | 	rdbyte	_var05, _var02
200f8     01 02 86 F1 | 	sub	_var02, #1
200fc     04 0B 02 F6 | 	mov	_var06, _var05
20100     07 0A 4E F7 | 	zerox	_var06, #7 wz
20104     10 00 90 5D |  if_ne	jmp	#LR__3122
20108                 | LR__3121
20108     01 0D 02 F6 | 	mov	_var07, _var02
2010c     01 0C 06 F1 | 	add	_var07, #1
20110     06 03 02 F6 | 	mov	_var02, _var07
20114     E0 00 90 FD | 	jmp	#LR__3136
20118                 | LR__3122
20118     01 02 06 F1 | 	add	_var02, #1
2011c     01 0D C2 FA | 	rdbyte	_var07, _var02
20120     01 02 86 F1 | 	sub	_var02, #1
20124     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
20128     2E 06 0E F2 | 	cmp	_var04, #46 wz
2012c     84 00 90 5D |  if_ne	jmp	#LR__3131
20130     02 02 06 F1 | 	add	_var02, #2
20134     01 0D C2 FA | 	rdbyte	_var07, _var02
20138     02 02 86 F1 | 	sub	_var02, #2
2013c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
20140     2F 06 0E F2 | 	cmp	_var04, #47 wz
20144     18 00 90 AD |  if_e	jmp	#LR__3123
20148     02 02 06 F1 | 	add	_var02, #2
2014c     01 09 C2 FA | 	rdbyte	_var05, _var02
20150     02 02 86 F1 | 	sub	_var02, #2
20154     04 0B 02 F6 | 	mov	_var06, _var05
20158     07 0A 4E F7 | 	zerox	_var06, #7 wz
2015c     54 00 90 5D |  if_ne	jmp	#LR__3130
20160                 | LR__3123
20160     02 02 06 F1 | 	add	_var02, #2
20164     09 05 5A F2 | 	cmps	_var03, arg01 wcz
20168     40 00 90 ED |  if_be	jmp	#LR__3129
2016c     02 0F 02 F6 | 	mov	_var08, _var03
20170     01 0E 86 F1 | 	sub	_var08, #1
20174                 | LR__3124
20174     07 07 C2 FA | 	rdbyte	_var04, _var08
20178     2F 06 0E F2 | 	cmp	_var04, #47 wz
2017c     0C 00 90 5D |  if_ne	jmp	#LR__3125
20180     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
20184     01 0E 86 11 |  if_a	sub	_var08, #1
20188     E8 FF 9F 1D |  if_a	jmp	#LR__3124
2018c                 | LR__3125
2018c     97 0C 48 FB | 	callpa	#(@LR__3127-@LR__3126)>>2,fcache_load_ptr_
20190                 | LR__3126
20190     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
20194     10 00 90 ED |  if_be	jmp	#LR__3128
20198     07 07 C2 FA | 	rdbyte	_var04, _var08
2019c     2F 06 0E F2 | 	cmp	_var04, #47 wz
201a0     01 0E 86 51 |  if_ne	sub	_var08, #1
201a4     E8 FF 9F 5D |  if_ne	jmp	#LR__3126
201a8                 | LR__3127
201a8                 | LR__3128
201a8     07 05 02 F6 | 	mov	_var03, _var08
201ac                 | LR__3129
201ac     01 00 06 F6 | 	mov	_var01, #1
201b0     44 00 90 FD | 	jmp	#LR__3136
201b4                 | LR__3130
201b4                 | LR__3131
201b4                 | LR__3132
201b4     97 18 48 FB | 	callpa	#(@LR__3134-@LR__3133)>>2,fcache_load_ptr_
201b8                 | LR__3133
201b8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
201bc     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
201c0     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
201c4     20 00 90 AD |  if_e	jmp	#LR__3135
201c8     01 0B 02 F6 | 	mov	_var06, _var02
201cc     01 09 02 F6 | 	mov	_var05, _var02
201d0     01 08 06 F1 | 	add	_var05, #1
201d4     05 11 C2 FA | 	rdbyte	_var09, _var06
201d8     04 03 02 F6 | 	mov	_var02, _var05
201dc     02 11 42 FC | 	wrbyte	_var09, _var03
201e0     01 04 06 F1 | 	add	_var03, #1
201e4     D0 FF 9F FD | 	jmp	#LR__3133
201e8                 | LR__3134
201e8                 | LR__3135
201e8     01 07 C2 FA | 	rdbyte	_var04, _var02
201ec     2F 06 0E F2 | 	cmp	_var04, #47 wz
201f0     C0 FE 9F 5D |  if_ne	jmp	#LR__3120
201f4     01 00 06 F6 | 	mov	_var01, #1
201f8                 | LR__3136
201f8     97 0C 48 FB | 	callpa	#(@LR__3138-@LR__3137)>>2,fcache_load_ptr_
201fc                 | LR__3137
201fc     01 07 C2 FA | 	rdbyte	_var04, _var02
20200     2F 06 0E F2 | 	cmp	_var04, #47 wz
20204     01 0D 02 A6 |  if_e	mov	_var07, _var02
20208     01 0C 06 A1 |  if_e	add	_var07, #1
2020c     06 03 02 A6 |  if_e	mov	_var02, _var07
20210     E8 FF 9F AD |  if_e	jmp	#LR__3137
20214                 | LR__3138
20214     9C FE 9F FD | 	jmp	#LR__3120
20218                 | LR__3139
20218     02 01 48 FC | 	wrbyte	#0, _var03
2021c                 | __system___normalizeName_ret
2021c     2D 00 64 FD | 	ret
20220                 | 
20220                 | __system___strrev
20220     09 01 CA FA | 	rdbyte	_var01, arg01 wz
20224     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
20228     09 03 02 F6 | 	mov	_var02, arg01
2022c     97 1A 48 FB | 	callpa	#(@LR__3142-@LR__3140)>>2,fcache_load_ptr_
20230                 | LR__3140
20230     01 01 CA FA | 	rdbyte	_var01, _var02 wz
20234     01 02 06 51 |  if_ne	add	_var02, #1
20238     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
2023c     01 02 86 F1 | 	sub	_var02, #1
20240                 | LR__3141
20240     09 03 5A F2 | 	cmps	_var02, arg01 wcz
20244     1C 00 90 ED |  if_be	jmp	#LR__3143
20248     09 01 C2 FA | 	rdbyte	_var01, arg01
2024c     01 05 C2 FA | 	rdbyte	_var03, _var02
20250     09 05 42 FC | 	wrbyte	_var03, arg01
20254     01 01 42 FC | 	wrbyte	_var01, _var02
20258     01 12 06 F1 | 	add	arg01, #1
2025c     01 02 86 F1 | 	sub	_var02, #1
20260     DC FF 9F FD | 	jmp	#LR__3141
20264                 | LR__3142
20264                 | LR__3143
20264                 | __system___strrev_ret
20264     2D 00 64 FD | 	ret
20268                 | 
20268                 | __system___fmtpad
20268     06 4A 05 F6 | 	mov	COUNT_, #6
2026c     A8 00 A0 FD | 	call	#pushregs_
20270     09 1F 02 F6 | 	mov	local01, arg01
20274     0A 21 02 F6 | 	mov	local02, arg02
20278     0B 23 02 F6 | 	mov	local03, arg03
2027c     10 13 EA F8 | 	getbyte	arg01, local02, #1
20280     16 20 46 F0 | 	shr	local02, #22
20284     03 20 0E F5 | 	and	local02, #3 wz
20288     00 24 06 F6 | 	mov	local04, #0
2028c     01 20 06 A6 |  if_e	mov	local02, #1
20290     0C 21 CA F7 | 	test	local02, arg04 wz
20294     00 FA 05 A6 |  if_e	mov	result1, #0
20298     88 00 90 AD |  if_e	jmp	#LR__3153
2029c     09 23 C2 F2 | 	subr	local03, arg01
202a0     01 22 56 F2 | 	cmps	local03, #1 wc
202a4     00 FA 05 C6 |  if_b	mov	result1, #0
202a8     78 00 90 CD |  if_b	jmp	#LR__3153
202ac     03 20 0E F2 | 	cmp	local02, #3 wz
202b0     18 00 90 5D |  if_ne	jmp	#LR__3150
202b4     01 18 0E F2 | 	cmp	arg04, #1 wz
202b8     6E 20 62 FD | 	wrz	local02
202bc     10 23 02 F1 | 	add	local03, local02
202c0     11 23 52 F6 | 	abs	local03, local03 wc
202c4     01 22 46 F0 | 	shr	local03, #1
202c8     11 23 82 F6 | 	negc	local03, local03
202cc                 | LR__3150
202cc     01 22 56 F2 | 	cmps	local03, #1 wc
202d0     4C 00 90 CD |  if_b	jmp	#LR__3152
202d4     11 27 02 F6 | 	mov	local05, local03
202d8                 | LR__3151
202d8     0F 21 02 F6 | 	mov	local02, local01
202dc     0F 29 02 F6 | 	mov	local06, local01
202e0     13 20 46 F7 | 	zerox	local02, #19
202e4     14 28 46 F0 | 	shr	local06, #20
202e8     02 28 66 F0 | 	shl	local06, #2
202ec     ED 28 02 F1 | 	add	local06, __methods__
202f0     14 29 02 FB | 	rdlong	local06, local06
202f4     20 12 06 F6 | 	mov	arg01, #32
202f8     F2 22 02 F6 | 	mov	local03, objptr
202fc     10 E5 01 F6 | 	mov	objptr, local02
20300     2D 28 62 FD | 	call	local06
20304     11 E5 01 F6 | 	mov	objptr, local03
20308     FD 28 02 F6 | 	mov	local06, result1
2030c     00 28 56 F2 | 	cmps	local06, #0 wc
20310     14 FB 01 C6 |  if_b	mov	result1, local06
20314     0C 00 90 CD |  if_b	jmp	#LR__3153
20318     14 25 02 F1 | 	add	local04, local06
2031c     EE 27 6E FB | 	djnz	local05, #LR__3151
20320                 | LR__3152
20320     12 FB 01 F6 | 	mov	result1, local04
20324                 | LR__3153
20324     A7 F0 03 F6 | 	mov	ptra, fp
20328     B2 00 A0 FD | 	call	#popregs_
2032c                 | __system___fmtpad_ret
2032c     2D 00 64 FD | 	ret
20330                 | 
20330                 | __system___uitoa
20330     04 4A 05 F6 | 	mov	COUNT_, #4
20334     A8 00 A0 FD | 	call	#pushregs_
20338     09 1F 02 F6 | 	mov	local01, arg01
2033c     00 1A 4E F2 | 	cmps	arg05, #0 wz
20340     0F 1B 02 F6 | 	mov	arg05, local01
20344     00 20 06 F6 | 	mov	local02, #0
20348     37 22 06 56 |  if_ne	mov	local03, #55
2034c     57 22 06 A6 |  if_e	mov	local03, #87
20350                 | LR__3160
20350     0B 15 12 FD | 	qdiv	arg02, arg03
20354     19 24 62 FD | 	getqy	local04
20358     0B 15 12 FD | 	qdiv	arg02, arg03
2035c     0A 24 16 F2 | 	cmp	local04, #10 wc
20360     30 24 06 C1 |  if_b	add	local04, #48
20364     11 25 02 31 |  if_ae	add	local04, local03
20368     0D 25 42 FC | 	wrbyte	local04, arg05
2036c     01 1A 06 F1 | 	add	arg05, #1
20370     01 20 06 F1 | 	add	local02, #1
20374     18 14 62 FD | 	getqx	arg02
20378     00 14 0E F2 | 	cmp	arg02, #0 wz
2037c     D0 FF 9F 5D |  if_ne	jmp	#LR__3160
20380     0C 21 12 F2 | 	cmp	local02, arg04 wc
20384     C8 FF 9F CD |  if_b	jmp	#LR__3160
20388     0D 01 48 FC | 	wrbyte	#0, arg05
2038c     0F 13 02 F6 | 	mov	arg01, local01
20390     8C FE BF FD | 	call	#__system___strrev
20394     10 FB 01 F6 | 	mov	result1, local02
20398     A7 F0 03 F6 | 	mov	ptra, fp
2039c     B2 00 A0 FD | 	call	#popregs_
203a0                 | __system___uitoa_ret
203a0     2D 00 64 FD | 	ret
203a4                 | 
203a4                 | __system__disassemble_0400
203a4     10 4A 05 F6 | 	mov	COUNT_, #16
203a8     A8 00 A0 FD | 	call	#pushregs_
203ac     09 1F 02 F6 | 	mov	local01, arg01
203b0     0A 21 02 F6 | 	mov	local02, arg02
203b4     0B 23 02 F6 | 	mov	local03, arg03
203b8     0C 25 02 F6 | 	mov	local04, arg04
203bc     0D 27 02 F6 | 	mov	local05, arg05
203c0     13 13 52 F6 | 	abs	arg01, local05 wc
203c4     1F 28 C6 C9 |  if_b	decod	local06, #31
203c8     00 28 06 36 |  if_ae	mov	local06, #0
203cc     68 D0 BF FD | 	call	#__system___float_fromuns
203d0     14 FB 61 F5 | 	xor	result1, local06
203d4     FD 2A 02 F6 | 	mov	local07, result1
203d8     00 2C 06 F6 | 	mov	local08, #0
203dc     0F 13 02 F6 | 	mov	arg01, local01
203e0     00 14 06 F6 | 	mov	arg02, #0
203e4     01 16 06 F6 | 	mov	arg03, #1
203e8     84 D8 BF FD | 	call	#__system___float_cmp
203ec     00 FA 0D F2 | 	cmp	result1, #0 wz
203f0     00 2E 06 A6 |  if_e	mov	local09, #0
203f4     10 01 68 AC |  if_e	wrlong	#0, local02
203f8     11 2F 62 AC |  if_e	wrlong	local09, local03
203fc     8C 01 90 AD |  if_e	jmp	#LR__3182
20400     0F 13 02 F6 | 	mov	arg01, local01
20404     34 DD BF FD | 	call	#__system____builtin_ilogb
20408     FD 30 02 F6 | 	mov	local10, result1
2040c     0A 26 0E F2 | 	cmp	local05, #10 wz
20410     24 00 90 5D |  if_ne	jmp	#LR__3170
20414     18 2F 02 F6 | 	mov	local09, local10
20418     01 2E 66 F0 | 	shl	local09, #1
2041c     18 2F 02 F1 | 	add	local09, local10
20420     17 31 52 F6 | 	abs	local10, local09 wc
20424     0A 30 16 FD | 	qdiv	local10, #10
20428     09 32 06 F6 | 	mov	local11, #9
2042c     18 30 62 FD | 	getqx	local10
20430     18 31 82 F6 | 	negc	local10, local10
20434     04 00 90 FD | 	jmp	#LR__3171
20438                 | LR__3170
20438     18 32 06 F6 | 	mov	local11, #24
2043c                 | LR__3171
2043c                 | LR__3172
2043c     08 2C 56 F2 | 	cmps	local08, #8 wc
20440     01 2C 06 F1 | 	add	local08, #1
20444     60 00 90 3D |  if_ae	jmp	#LR__3173
20448     00 C0 1F FF 
2044c     00 12 06 F6 | 	mov	arg01, ##1065353216
20450     15 15 02 F6 | 	mov	arg02, local07
20454     18 17 02 F6 | 	mov	arg03, local10
20458     8C E3 BF FD | 	call	#__system___float_pow_n
2045c     FD 14 02 F6 | 	mov	arg02, result1
20460     0F 13 02 F6 | 	mov	arg01, local01
20464     D8 D5 BF FD | 	call	#__system___float_div
20468     FD 34 02 F6 | 	mov	local12, result1
2046c     1A 13 02 F6 | 	mov	arg01, local12
20470     00 C0 1F FF 
20474     00 14 06 F6 | 	mov	arg02, ##1065353216
20478     01 16 06 F6 | 	mov	arg03, #1
2047c     F0 D7 BF FD | 	call	#__system___float_cmp
20480     00 FA 55 F2 | 	cmps	result1, #0 wc
20484     01 30 86 C1 |  if_b	sub	local10, #1
20488     B0 FF 9F CD |  if_b	jmp	#LR__3172
2048c     15 15 02 F6 | 	mov	arg02, local07
20490     1A 13 02 F6 | 	mov	arg01, local12
20494     01 16 66 F6 | 	neg	arg03, #1
20498     D4 D7 BF FD | 	call	#__system___float_cmp
2049c     00 FA 55 F2 | 	cmps	result1, #0 wc
204a0     01 30 06 31 |  if_ae	add	local10, #1
204a4     94 FF 9F 3D |  if_ae	jmp	#LR__3172
204a8                 | LR__3173
204a8     1A 13 02 F6 | 	mov	arg01, local12
204ac     8C DC BF FD | 	call	#__system____builtin_ilogb
204b0     FD 36 02 F6 | 	mov	local13, result1
204b4     1A 39 02 F6 | 	mov	local14, local12
204b8     17 39 06 F4 | 	bitl	local14, #279
204bc     17 38 26 F4 | 	bith	local14, #23
204c0     1B 39 62 F0 | 	shl	local14, local13
204c4     02 26 0E F2 | 	cmp	local05, #2 wz
204c8     02 24 66 A0 |  if_e	shl	local04, #2
204cc     00 3A 06 F6 | 	mov	local15, #0
204d0     00 24 56 F2 | 	cmps	local04, #0 wc
204d4     10 00 90 3D |  if_ae	jmp	#LR__3174
204d8     18 25 C2 F2 | 	subr	local04, local10
204dc     00 24 56 F2 | 	cmps	local04, #0 wc
204e0     A0 00 90 CD |  if_b	jmp	#LR__3181
204e4     04 00 90 FD | 	jmp	#LR__3175
204e8                 | LR__3174
204e8     01 24 06 F1 | 	add	local04, #1
204ec                 | LR__3175
204ec     19 25 7A F3 | 	fles	local04, local11 wcz
204f0     01 3C 06 F6 | 	mov	local16, #1
204f4     97 22 48 FB | 	callpa	#(@LR__3177-@LR__3176)>>2,fcache_load_ptr_
204f8                 | LR__3176
204f8     00 40 00 FF 
204fc     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
20500     38 00 90 3D |  if_ae	jmp	#LR__3178
20504     01 24 56 F2 | 	cmps	local04, #1 wc
20508     01 24 86 F1 | 	sub	local04, #1
2050c     2C 00 90 CD |  if_b	jmp	#LR__3178
20510     13 3B 02 FD | 	qmul	local15, local05
20514     1C 37 02 F6 | 	mov	local13, local14
20518     17 36 46 F0 | 	shr	local13, #23
2051c     17 39 06 F4 | 	bitl	local14, #279
20520     18 3A 62 FD | 	getqx	local15
20524     13 3D 02 FD | 	qmul	local16, local05
20528     18 3C 62 FD | 	getqx	local16
2052c     13 39 02 FD | 	qmul	local14, local05
20530     1B 3B 02 F1 | 	add	local15, local13
20534     18 38 62 FD | 	getqx	local14
20538     BC FF 9F FD | 	jmp	#LR__3176
2053c                 | LR__3177
2053c                 | LR__3178
2053c     13 2F 02 F6 | 	mov	local09, local05
20540     17 2E 66 F0 | 	shl	local09, #23
20544     17 37 52 F6 | 	abs	local13, local09 wc
20548     01 36 46 F0 | 	shr	local13, #1
2054c     1B 37 82 F6 | 	negc	local13, local13
20550     1B 39 1A F2 | 	cmp	local14, local13 wcz
20554     20 00 90 1D |  if_a	jmp	#LR__3179
20558     17 26 66 F0 | 	shl	local05, #23
2055c     13 37 52 F6 | 	abs	local13, local05 wc
20560     01 36 46 F0 | 	shr	local13, #1
20564     1B 37 82 F6 | 	negc	local13, local13
20568     1B 39 0A F2 | 	cmp	local14, local13 wz
2056c     14 00 90 5D |  if_ne	jmp	#LR__3180
20570     01 3A CE F7 | 	test	local15, #1 wz
20574     0C 00 90 AD |  if_e	jmp	#LR__3180
20578                 | LR__3179
20578     01 3A 06 F1 | 	add	local15, #1
2057c     1E 3B 0A F2 | 	cmp	local15, local16 wz
20580     01 30 06 A1 |  if_e	add	local10, #1
20584                 | LR__3180
20584                 | LR__3181
20584     10 3B 62 FC | 	wrlong	local15, local02
20588     11 31 62 FC | 	wrlong	local10, local03
2058c                 | LR__3182
2058c     A7 F0 03 F6 | 	mov	ptra, fp
20590     B2 00 A0 FD | 	call	#popregs_
20594                 | __system__disassemble_0400_ret
20594     2D 00 64 FD | 	ret
20598                 | 
20598                 | __system__emitsign_0402
20598     00 FA 05 F6 | 	mov	result1, #0
2059c     00 14 0E F2 | 	cmp	arg02, #0 wz
205a0     09 01 02 56 |  if_ne	mov	_var01, arg01
205a4     01 12 06 51 |  if_ne	add	arg01, #1
205a8     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
205ac     01 FA 05 56 |  if_ne	mov	result1, #1
205b0     00 16 0E F2 | 	cmp	arg03, #0 wz
205b4     09 61 48 5C |  if_ne	wrbyte	#48, arg01
205b8     01 12 06 51 |  if_ne	add	arg01, #1
205bc     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
205c0     02 FA 05 51 |  if_ne	add	result1, #2
205c4                 | __system__emitsign_0402_ret
205c4     2D 00 64 FD | 	ret
205c8                 | 
205c8                 | __system___gettxfunc
205c8     01 4A 05 F6 | 	mov	COUNT_, #1
205cc     A8 00 A0 FD | 	call	#pushregs_
205d0     A0 F8 BF FD | 	call	#__system____getftab
205d4     FD 1E 0A F6 | 	mov	local01, result1 wz
205d8     10 00 90 AD |  if_e	jmp	#LR__3190
205dc     08 1E 06 F1 | 	add	local01, #8
205e0     0F 15 0A FB | 	rdlong	arg02, local01 wz
205e4     08 1E 86 F1 | 	sub	local01, #8
205e8     08 00 90 5D |  if_ne	jmp	#LR__3191
205ec                 | LR__3190
205ec     00 FA 05 F6 | 	mov	result1, #0
205f0     0C 00 90 FD | 	jmp	#LR__3192
205f4                 | LR__3191
205f4     00 78 03 FF 
205f8     00 1E 46 F5 | 	or	local01, ##116391936
205fc     0F FB 01 F6 | 	mov	result1, local01
20600                 | LR__3192
20600     A7 F0 03 F6 | 	mov	ptra, fp
20604     B2 00 A0 FD | 	call	#popregs_
20608                 | __system___gettxfunc_ret
20608     2D 00 64 FD | 	ret
2060c                 | 
2060c                 | __system___getrxfunc
2060c     01 4A 05 F6 | 	mov	COUNT_, #1
20610     A8 00 A0 FD | 	call	#pushregs_
20614     5C F8 BF FD | 	call	#__system____getftab
20618     FD 1E 0A F6 | 	mov	local01, result1 wz
2061c     10 00 90 AD |  if_e	jmp	#LR__3200
20620     08 1E 06 F1 | 	add	local01, #8
20624     0F 15 0A FB | 	rdlong	arg02, local01 wz
20628     08 1E 86 F1 | 	sub	local01, #8
2062c     08 00 90 5D |  if_ne	jmp	#LR__3201
20630                 | LR__3200
20630     00 FA 05 F6 | 	mov	result1, #0
20634     08 00 90 FD | 	jmp	#LR__3202
20638                 | LR__3201
20638     58 1E 26 F4 | 	bith	local01, #88
2063c     0F FB 01 F6 | 	mov	result1, local01
20640                 | LR__3202
20640     A7 F0 03 F6 | 	mov	ptra, fp
20644     B2 00 A0 FD | 	call	#popregs_
20648                 | __system___getrxfunc_ret
20648     2D 00 64 FD | 	ret
2064c                 | 
2064c                 | __system___getiolock_0442
2064c     01 4A 05 F6 | 	mov	COUNT_, #1
20650     A8 00 A0 FD | 	call	#pushregs_
20654     1C F8 BF FD | 	call	#__system____getftab
20658     FD 1E 0A F6 | 	mov	local01, result1 wz
2065c     10 00 90 AD |  if_e	jmp	#LR__3210
20660     08 1E 06 F1 | 	add	local01, #8
20664     0F FB 09 FB | 	rdlong	result1, local01 wz
20668     08 1E 86 F1 | 	sub	local01, #8
2066c     18 00 90 5D |  if_ne	jmp	#LR__3211
20670                 | LR__3210
20670     01 00 00 FF 
20674     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
20678     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2067c     01 00 00 FF 
20680     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
20684     08 00 90 FD | 	jmp	#LR__3212
20688                 | LR__3211
20688     0C 1E 06 F1 | 	add	local01, #12
2068c     0F FB 01 F6 | 	mov	result1, local01
20690                 | LR__3212
20690     A7 F0 03 F6 | 	mov	ptra, fp
20694     B2 00 A0 FD | 	call	#popregs_
20698                 | __system___getiolock_0442_ret
20698     2D 00 64 FD | 	ret
2069c                 | 
2069c                 | __system____ScanForChar
2069c     09 01 02 F6 | 	mov	_var01, arg01
206a0     09 03 02 F6 | 	mov	_var02, arg01
206a4     97 06 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
206a8                 | LR__3220
206a8     01 FB C9 FA | 	rdbyte	result1, _var02 wz
206ac     01 02 06 51 |  if_ne	add	_var02, #1
206b0     F4 FF 9F 5D |  if_ne	jmp	#LR__3220
206b4                 | LR__3221
206b4     09 03 82 F1 | 	sub	_var02, arg01
206b8     01 FB 01 F6 | 	mov	result1, _var02
206bc     FD 12 0A F6 | 	mov	arg01, result1 wz
206c0     00 FA 05 A6 |  if_e	mov	result1, #0
206c4     B8 00 90 AD |  if_e	jmp	#LR__3228
206c8     0A 05 02 F6 | 	mov	_var03, arg02
206cc     07 04 4E F7 | 	zerox	_var03, #7 wz
206d0     00 FA 05 A6 |  if_e	mov	result1, #0
206d4     A8 00 90 AD |  if_e	jmp	#LR__3228
206d8     01 16 16 F2 | 	cmp	arg03, #1 wc
206dc     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
206e0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
206e4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
206e8     94 00 90 4D |  if_c_and_nz	jmp	#LR__3228
206ec     09 17 1A F2 | 	cmp	arg03, arg01 wcz
206f0     10 00 90 ED |  if_be	jmp	#LR__3222
206f4     00 18 0E F2 | 	cmp	arg04, #0 wz
206f8     00 FA 05 A6 |  if_e	mov	result1, #0
206fc     80 00 90 AD |  if_e	jmp	#LR__3228
20700     09 17 02 F6 | 	mov	arg03, arg01
20704                 | LR__3222
20704     01 16 86 F1 | 	sub	arg03, #1
20708     00 18 0E F2 | 	cmp	arg04, #0 wz
2070c     38 00 90 5D |  if_ne	jmp	#LR__3224
20710     0B 07 02 F6 | 	mov	_var04, arg03
20714     09 09 02 F6 | 	mov	_var05, arg01
20718                 | LR__3223
20718     04 07 12 F2 | 	cmp	_var04, _var05 wc
2071c     5C 00 90 3D |  if_ae	jmp	#LR__3227
20720     03 05 02 F6 | 	mov	_var03, _var04
20724     00 05 02 F1 | 	add	_var03, _var01
20728     02 05 C2 FA | 	rdbyte	_var03, _var03
2072c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
20730     0C 05 0A F2 | 	cmp	_var03, arg04 wz
20734     01 06 06 A1 |  if_e	add	_var04, #1
20738     03 FB 01 A6 |  if_e	mov	result1, _var04
2073c     40 00 90 AD |  if_e	jmp	#LR__3228
20740     01 06 06 F1 | 	add	_var04, #1
20744     D0 FF 9F FD | 	jmp	#LR__3223
20748                 | LR__3224
20748     0B 07 02 F6 | 	mov	_var04, arg03
2074c                 | LR__3225
2074c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
20750     28 00 90 1D |  if_a	jmp	#LR__3226
20754     03 09 02 F6 | 	mov	_var05, _var04
20758     00 09 02 F1 | 	add	_var05, _var01
2075c     04 05 C2 FA | 	rdbyte	_var03, _var05
20760     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
20764     04 05 0A F2 | 	cmp	_var03, _var05 wz
20768     01 06 06 A1 |  if_e	add	_var04, #1
2076c     03 FB 01 A6 |  if_e	mov	result1, _var04
20770     0C 00 90 AD |  if_e	jmp	#LR__3228
20774     01 06 86 F1 | 	sub	_var04, #1
20778     D0 FF 9F FD | 	jmp	#LR__3225
2077c                 | LR__3226
2077c                 | LR__3227
2077c     00 FA 05 F6 | 	mov	result1, #0
20780                 | LR__3228
20780                 | __system____ScanForChar_ret
20780     2D 00 64 FD | 	ret
20784                 | 
20784                 | __system___basic_dir
20784     05 4A 05 F6 | 	mov	COUNT_, #5
20788     A8 00 A0 FD | 	call	#pushregs_
2078c     4C F0 07 F1 | 	add	ptra, #76
20790     04 4E 05 F1 | 	add	fp, #4
20794     A7 12 62 FC | 	wrlong	arg01, fp
20798     04 4E 05 F1 | 	add	fp, #4
2079c     A7 14 62 FC | 	wrlong	arg02, fp
207a0     04 4E 85 F1 | 	sub	fp, #4
207a4     A7 14 0A FB | 	rdlong	arg02, fp wz
207a8     04 4E 85 F1 | 	sub	fp, #4
207ac     04 4E 05 51 |  if_ne	add	fp, #4
207b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
207b4     04 4E 85 51 |  if_ne	sub	fp, #4
207b8     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
207bc     70 00 90 AD |  if_e	jmp	#LR__3230
207c0     03 00 00 FF 
207c4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
207c8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
207cc     03 00 00 FF 
207d0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
207d4     03 00 00 5F 
207d8     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
207dc     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
207e0     03 00 00 5F 
207e4     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
207e8     1C EA BF 5D |  if_ne	call	#__system__closedir
207ec     51 01 00 FF 
207f0     C4 12 06 F6 | 	mov	arg01, ##@LR__4388
207f4     24 E9 BF FD | 	call	#__system__opendir
207f8     03 00 00 FF 
207fc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
20800     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20804     08 4E 05 F1 | 	add	fp, #8
20808     A7 20 02 FB | 	rdlong	local02, fp
2080c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20810     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
20814     04 4E 85 F1 | 	sub	fp, #4
20818     A7 20 02 FB | 	rdlong	local02, fp
2081c     04 4E 85 F1 | 	sub	fp, #4
20820     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20824     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
20828     03 00 00 FF 
2082c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
20830                 | LR__3230
20830     03 00 00 FF 
20834     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
20838     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2083c     03 00 00 FF 
20840     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
20844     51 01 00 AF 
20848     C6 FA 05 A6 |  if_e	mov	result1, ##@LR__4389
2084c     84 02 90 AD |  if_e	jmp	#LR__3243
20850                 | LR__3231
20850     03 00 00 FF 
20854     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
20858     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2085c     03 00 00 FF 
20860     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
20864     14 EA BF FD | 	call	#__system__readdir
20868     0C 4E 05 F1 | 	add	fp, #12
2086c     A7 FA 61 FC | 	wrlong	result1, fp
20870     0C 4E 85 F1 | 	sub	fp, #12
20874     00 FA 0D F2 | 	cmp	result1, #0 wz
20878     38 00 90 5D |  if_ne	jmp	#LR__3232
2087c     03 00 00 FF 
20880     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
20884     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
20888     03 00 00 FF 
2088c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
20890     74 E9 BF FD | 	call	#__system__closedir
20894     03 00 00 FF 
20898     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2089c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
208a0     03 00 00 FF 
208a4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
208a8     51 01 00 FF 
208ac     C8 FA 05 F6 | 	mov	result1, ##@LR__4390
208b0     20 02 90 FD | 	jmp	#LR__3243
208b4                 | LR__3232
208b4     0C 4E 05 F1 | 	add	fp, #12
208b8     A7 12 02 FB | 	rdlong	arg01, fp
208bc     0C 4E 85 F1 | 	sub	fp, #12
208c0     03 00 00 FF 
208c4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
208c8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
208cc     03 00 00 FF 
208d0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
208d4     48 07 B0 FD | 	call	#__system___pat_match
208d8     00 FA 0D F2 | 	cmp	result1, #0 wz
208dc     70 FF 9F AD |  if_e	jmp	#LR__3231
208e0     03 00 00 FF 
208e4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
208e8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
208ec     03 00 00 FF 
208f0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
208f4     78 01 90 AD |  if_e	jmp	#LR__3239
208f8     0C 4E 05 F1 | 	add	fp, #12
208fc     A7 12 02 FB | 	rdlong	arg01, fp
20900     04 4E 05 F1 | 	add	fp, #4
20904     A7 14 02 F6 | 	mov	arg02, fp
20908     10 4E 85 F1 | 	sub	fp, #16
2090c     6C F2 BF FD | 	call	#__system__stat
20910     40 4E 05 F1 | 	add	fp, #64
20914     A7 FA 61 FC | 	wrlong	result1, fp
20918     40 4E 85 F1 | 	sub	fp, #64
2091c     00 FA 0D F2 | 	cmp	result1, #0 wz
20920     51 01 00 5F 
20924     CA FA 05 56 |  if_ne	mov	result1, ##@LR__4391
20928     A8 01 90 5D |  if_ne	jmp	#LR__3243
2092c     18 4E 05 F1 | 	add	fp, #24
20930     A7 20 02 FB | 	rdlong	local02, fp
20934     78 00 00 FF 
20938     00 20 06 F5 | 	and	local02, ##61440
2093c     2C 4E 05 F1 | 	add	fp, #44
20940     A7 20 62 FC | 	wrlong	local02, fp
20944     38 4E 85 F1 | 	sub	fp, #56
20948     A7 20 02 FB | 	rdlong	local02, fp
2094c     0C 4E 85 F1 | 	sub	fp, #12
20950     10 21 C2 FA | 	rdbyte	local02, local02
20954     2E 20 0E F2 | 	cmp	local02, #46 wz
20958     08 4E 05 A1 |  if_e	add	fp, #8
2095c     A7 04 68 AC |  if_e	wrlong	#2, fp
20960     08 4E C5 F3 | 	sumz	fp, #8
20964     A7 00 68 5C |  if_ne	wrlong	#0, fp
20968     08 4E 85 51 |  if_ne	sub	fp, #8
2096c     44 4E 05 F1 | 	add	fp, #68
20970     A7 20 02 FB | 	rdlong	local02, fp
20974     44 4E 85 F1 | 	sub	fp, #68
20978     08 00 00 FF 
2097c     00 20 0E F2 | 	cmp	local02, ##4096 wz
20980     18 00 90 5D |  if_ne	jmp	#LR__3233
20984     08 4E 05 F1 | 	add	fp, #8
20988     A7 20 02 FB | 	rdlong	local02, fp
2098c     10 20 46 F5 | 	or	local02, #16
20990     A7 20 62 FC | 	wrlong	local02, fp
20994     08 4E 85 F1 | 	sub	fp, #8
20998     AC 00 90 FD | 	jmp	#LR__3238
2099c                 | LR__3233
2099c     44 4E 05 F1 | 	add	fp, #68
209a0     A7 20 02 FB | 	rdlong	local02, fp
209a4     44 4E 85 F1 | 	sub	fp, #68
209a8     10 00 00 FF 
209ac     00 20 0E F2 | 	cmp	local02, ##8192 wz
209b0     44 4E 05 51 |  if_ne	add	fp, #68
209b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
209b8     44 4E 85 51 |  if_ne	sub	fp, #68
209bc     18 00 00 5F 
209c0     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
209c4     44 4E 05 51 |  if_ne	add	fp, #68
209c8     0F 23 02 56 |  if_ne	mov	local03, local01
209cc     44 4E 85 51 |  if_ne	sub	fp, #68
209d0     20 00 00 5F 
209d4     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
209d8     18 00 90 5D |  if_ne	jmp	#LR__3234
209dc     08 4E 05 F1 | 	add	fp, #8
209e0     A7 20 02 FB | 	rdlong	local02, fp
209e4     04 20 46 F5 | 	or	local02, #4
209e8     A7 20 62 FC | 	wrlong	local02, fp
209ec     08 4E 85 F1 | 	sub	fp, #8
209f0     54 00 90 FD | 	jmp	#LR__3237
209f4                 | LR__3234
209f4     18 4E 05 F1 | 	add	fp, #24
209f8     A7 20 02 FB | 	rdlong	local02, fp
209fc     18 4E 85 F1 | 	sub	fp, #24
20a00     92 20 CE F7 | 	test	local02, #146 wz
20a04     18 00 90 5D |  if_ne	jmp	#LR__3235
20a08     08 4E 05 F1 | 	add	fp, #8
20a0c     A7 20 02 FB | 	rdlong	local02, fp
20a10     01 20 46 F5 | 	or	local02, #1
20a14     A7 20 62 FC | 	wrlong	local02, fp
20a18     08 4E 85 F1 | 	sub	fp, #8
20a1c     28 00 90 FD | 	jmp	#LR__3236
20a20                 | LR__3235
20a20     44 4E 05 F1 | 	add	fp, #68
20a24     A7 24 02 FB | 	rdlong	local04, fp
20a28     44 4E 85 F1 | 	sub	fp, #68
20a2c     08 00 00 FF 
20a30     00 24 0E F2 | 	cmp	local04, ##4096 wz
20a34     08 4E 05 51 |  if_ne	add	fp, #8
20a38     A7 24 02 5B |  if_ne	rdlong	local04, fp
20a3c     20 24 46 55 |  if_ne	or	local04, #32
20a40     A7 24 62 5C |  if_ne	wrlong	local04, fp
20a44     08 4E 85 51 |  if_ne	sub	fp, #8
20a48                 | LR__3236
20a48                 | LR__3237
20a48                 | LR__3238
20a48     08 4E 05 F1 | 	add	fp, #8
20a4c     A7 24 02 FB | 	rdlong	local04, fp
20a50     08 4E 85 F1 | 	sub	fp, #8
20a54     03 00 00 FF 
20a58     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
20a5c     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
20a60     03 00 00 FF 
20a64     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
20a68     0F 25 CA F7 | 	test	local04, local01 wz
20a6c     E0 FD 9F AD |  if_e	jmp	#LR__3231
20a70                 | LR__3239
20a70     0C 4E 05 F1 | 	add	fp, #12
20a74     A7 12 02 FB | 	rdlong	arg01, fp
20a78     0C 4E 85 F1 | 	sub	fp, #12
20a7c     09 27 02 F6 | 	mov	local05, arg01
20a80     97 06 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
20a84                 | LR__3240
20a84     13 FB C9 FA | 	rdbyte	result1, local05 wz
20a88     01 26 06 51 |  if_ne	add	local05, #1
20a8c     F4 FF 9F 5D |  if_ne	jmp	#LR__3240
20a90                 | LR__3241
20a90     13 13 C2 F2 | 	subr	arg01, local05
20a94     01 12 06 F1 | 	add	arg01, #1
20a98     6C E0 BF FD | 	call	#__system___gc_alloc_managed
20a9c     48 4E 05 F1 | 	add	fp, #72
20aa0     A7 FA 61 FC | 	wrlong	result1, fp
20aa4     48 4E 85 F1 | 	sub	fp, #72
20aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
20aac     18 00 90 AD |  if_e	jmp	#LR__3242
20ab0     48 4E 05 F1 | 	add	fp, #72
20ab4     A7 12 02 FB | 	rdlong	arg01, fp
20ab8     3C 4E 85 F1 | 	sub	fp, #60
20abc     A7 14 02 FB | 	rdlong	arg02, fp
20ac0     0C 4E 85 F1 | 	sub	fp, #12
20ac4     04 A2 BF FD | 	call	#__system____builtin_strcpy
20ac8                 | LR__3242
20ac8     48 4E 05 F1 | 	add	fp, #72
20acc     A7 FA 01 FB | 	rdlong	result1, fp
20ad0     48 4E 85 F1 | 	sub	fp, #72
20ad4                 | LR__3243
20ad4     A7 F0 03 F6 | 	mov	ptra, fp
20ad8     B2 00 A0 FD | 	call	#popregs_
20adc                 | __system___basic_dir_ret
20adc     2D 00 64 FD | 	ret
20ae0                 | 
20ae0                 | __system__pack_0508
20ae0     09 01 02 F6 | 	mov	_var01, arg01
20ae4     7F 16 06 F1 | 	add	arg03, #127
20ae8     04 18 CE F7 | 	test	arg04, #4 wz
20aec     10 00 90 AD |  if_e	jmp	#LR__3250
20af0     00 00 0E F2 | 	cmp	_var01, #0 wz
20af4     16 00 C6 A9 |  if_e	decod	_var01, #22
20af8     F7 00 26 F4 | 	bith	_var01, #247
20afc     B4 00 90 FD | 	jmp	#LR__3259
20b00                 | LR__3250
20b00     02 18 CE F7 | 	test	arg04, #2 wz
20b04     00 C0 3F 5F 
20b08     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
20b0c     00 14 06 56 |  if_ne	mov	arg02, #0
20b10     A0 00 90 5D |  if_ne	jmp	#LR__3258
20b14     08 18 CE F7 | 	test	arg04, #8 wz
20b18     00 00 06 56 |  if_ne	mov	_var01, #0
20b1c     94 00 90 5D |  if_ne	jmp	#LR__3257
20b20     FF 16 56 F2 | 	cmps	arg03, #255 wc
20b24     00 C0 3F 3F 
20b28     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
20b2c     00 14 06 36 |  if_ae	mov	arg02, #0
20b30     80 00 90 3D |  if_ae	jmp	#LR__3256
20b34     01 16 56 F2 | 	cmps	arg03, #1 wc
20b38     6C 00 90 3D |  if_ae	jmp	#LR__3254
20b3c     01 14 46 F0 | 	shr	arg02, #1
20b40     00 03 02 F6 | 	mov	_var02, _var01
20b44     01 02 06 F5 | 	and	_var02, #1
20b48     1F 02 66 F0 | 	shl	_var02, #31
20b4c     01 15 42 F5 | 	or	arg02, _var02
20b50     01 00 46 F0 | 	shr	_var01, #1
20b54     97 1E 48 FB | 	callpa	#(@LR__3252-@LR__3251)>>2,fcache_load_ptr_
20b58                 | LR__3251
20b58     00 16 56 F2 | 	cmps	arg03, #0 wc
20b5c     34 00 90 3D |  if_ae	jmp	#LR__3253
20b60     00 00 0E F2 | 	cmp	_var01, #0 wz
20b64     2C 00 90 AD |  if_e	jmp	#LR__3253
20b68     0A 13 02 F6 | 	mov	arg01, arg02
20b6c     01 12 06 F5 | 	and	arg01, #1
20b70     01 16 06 F1 | 	add	arg03, #1
20b74     01 14 46 F0 | 	shr	arg02, #1
20b78     00 03 02 F6 | 	mov	_var02, _var01
20b7c     01 02 06 F5 | 	and	_var02, #1
20b80     1F 02 66 F0 | 	shl	_var02, #31
20b84     01 15 42 F5 | 	or	arg02, _var02
20b88     09 15 42 F5 | 	or	arg02, arg01
20b8c     01 00 46 F0 | 	shr	_var01, #1
20b90     C4 FF 9F FD | 	jmp	#LR__3251
20b94                 | LR__3252
20b94                 | LR__3253
20b94     00 16 56 F2 | 	cmps	arg03, #0 wc
20b98     18 00 90 3D |  if_ae	jmp	#LR__3255
20b9c     00 14 0E F2 | 	cmp	arg02, #0 wz
20ba0     6F 14 62 FD | 	wrnz	arg02
20ba4     0C 00 90 FD | 	jmp	#LR__3255
20ba8                 | LR__3254
20ba8     17 01 06 F4 | 	bitl	_var01, #279
20bac     17 16 66 F0 | 	shl	arg03, #23
20bb0     0B 01 42 F5 | 	or	_var01, arg03
20bb4                 | LR__3255
20bb4                 | LR__3256
20bb4                 | LR__3257
20bb4                 | LR__3258
20bb4                 | LR__3259
20bb4     01 00 CE F7 | 	test	_var01, #1 wz
20bb8     01 14 46 55 |  if_ne	or	arg02, #1
20bbc     0A 17 02 F6 | 	mov	arg03, arg02
20bc0     00 02 06 F6 | 	mov	_var02, #0
20bc4     FF FF 3F FF 
20bc8     FF 15 06 F1 | 	add	arg02, ##2147483647
20bcc     0B 15 12 F2 | 	cmp	arg02, arg03 wc
20bd0     01 02 06 C6 |  if_b	mov	_var02, #1
20bd4     01 01 02 F1 | 	add	_var01, _var02
20bd8     01 18 CE F7 | 	test	arg04, #1 wz
20bdc     1F 00 26 54 |  if_ne	bith	_var01, #31
20be0     00 FB 01 F6 | 	mov	result1, _var01
20be4                 | __system__pack_0508_ret
20be4     2D 00 64 FD | 	ret
20be8                 | 
20be8                 | __system___rxtxioctl_0598
20be8     00 15 0E F2 | 	cmp	arg02, #256 wz
20bec     0C 00 90 AD |  if_e	jmp	#LR__3260
20bf0     01 15 0E F2 | 	cmp	arg02, #257 wz
20bf4     1C 00 90 AD |  if_e	jmp	#LR__3261
20bf8     30 00 90 FD | 	jmp	#LR__3262
20bfc                 | LR__3260
20bfc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20c00     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20c04     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c08     0B FB 61 FC | 	wrlong	result1, arg03
20c0c     00 FA 05 F6 | 	mov	result1, #0
20c10     28 00 90 FD | 	jmp	#LR__3263
20c14                 | LR__3261
20c14     0B 13 02 FB | 	rdlong	arg01, arg03
20c18     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20c1c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20c20     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c24     00 FA 05 F6 | 	mov	result1, #0
20c28     10 00 90 FD | 	jmp	#LR__3263
20c2c                 | LR__3262
20c2c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20c30     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20c34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20c38     01 FA 65 F6 | 	neg	result1, #1
20c3c                 | LR__3263
20c3c                 | __system___rxtxioctl_0598_ret
20c3c     2D 00 64 FD | 	ret
20c40                 | 
20c40                 | __system____dummy_flush_0599
20c40     00 FA 05 F6 | 	mov	result1, #0
20c44                 | __system____dummy_flush_0599_ret
20c44     2D 00 64 FD | 	ret
20c48                 | 
20c48                 | __system___vfsread
20c48     03 4A 05 F6 | 	mov	COUNT_, #3
20c4c     A8 00 A0 FD | 	call	#pushregs_
20c50     28 F0 07 F1 | 	add	ptra, #40
20c54     04 4E 05 F1 | 	add	fp, #4
20c58     A7 12 62 FC | 	wrlong	arg01, fp
20c5c     04 4E 05 F1 | 	add	fp, #4
20c60     A7 14 62 FC | 	wrlong	arg02, fp
20c64     04 4E 05 F1 | 	add	fp, #4
20c68     A7 16 62 FC | 	wrlong	arg03, fp
20c6c     04 4E 85 F1 | 	sub	fp, #4
20c70     A7 FA 01 FB | 	rdlong	result1, fp
20c74     14 4E 05 F1 | 	add	fp, #20
20c78     A7 FA 61 FC | 	wrlong	result1, fp
20c7c     04 4E 05 F1 | 	add	fp, #4
20c80     A7 00 68 FC | 	wrlong	#0, fp
20c84     1C 4E 85 F1 | 	sub	fp, #28
20c88     A7 12 02 FB | 	rdlong	arg01, fp
20c8c     04 4E 85 F1 | 	sub	fp, #4
20c90     08 12 06 F1 | 	add	arg01, #8
20c94     09 FB 01 FB | 	rdlong	result1, arg01
20c98     01 FA CD F7 | 	test	result1, #1 wz
20c9c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20ca0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
20ca4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20ca8     01 FA 65 A6 |  if_e	neg	result1, #1
20cac     74 02 90 AD |  if_e	jmp	#LR__3276
20cb0     04 4E 05 F1 | 	add	fp, #4
20cb4     A7 12 02 FB | 	rdlong	arg01, fp
20cb8     04 4E 85 F1 | 	sub	fp, #4
20cbc     14 12 06 F1 | 	add	arg01, #20
20cc0     09 FB 09 FB | 	rdlong	result1, arg01 wz
20cc4     B8 00 90 AD |  if_e	jmp	#LR__3271
20cc8     04 4E 05 F1 | 	add	fp, #4
20ccc     A7 12 02 FB | 	rdlong	arg01, fp
20cd0     09 17 02 F6 | 	mov	arg03, arg01
20cd4     14 16 06 F1 | 	add	arg03, #20
20cd8     0B 1F 02 FB | 	rdlong	local01, arg03
20cdc     0F 21 02 F6 | 	mov	local02, local01
20ce0     13 1E 46 F7 | 	zerox	local01, #19
20ce4     14 20 46 F0 | 	shr	local02, #20
20ce8     02 20 66 F0 | 	shl	local02, #2
20cec     ED 20 02 F1 | 	add	local02, __methods__
20cf0     10 21 02 FB | 	rdlong	local02, local02
20cf4     04 4E 05 F1 | 	add	fp, #4
20cf8     A7 14 02 FB | 	rdlong	arg02, fp
20cfc     04 4E 05 F1 | 	add	fp, #4
20d00     A7 16 02 FB | 	rdlong	arg03, fp
20d04     0C 4E 85 F1 | 	sub	fp, #12
20d08     F2 22 02 F6 | 	mov	local03, objptr
20d0c     0F E5 01 F6 | 	mov	objptr, local01
20d10     2D 20 62 FD | 	call	local02
20d14     11 E5 01 F6 | 	mov	objptr, local03
20d18     10 4E 05 F1 | 	add	fp, #16
20d1c     A7 FA 61 FC | 	wrlong	result1, fp
20d20     10 4E 85 F1 | 	sub	fp, #16
20d24     00 FA 55 F2 | 	cmps	result1, #0 wc
20d28     44 00 90 3D |  if_ae	jmp	#LR__3270
20d2c     04 4E 05 F1 | 	add	fp, #4
20d30     A7 22 02 FB | 	rdlong	local03, fp
20d34     11 1F 02 F6 | 	mov	local01, local03
20d38     08 22 06 F1 | 	add	local03, #8
20d3c     11 21 02 FB | 	rdlong	local02, local03
20d40     20 20 46 F5 | 	or	local02, #32
20d44     08 1E 06 F1 | 	add	local01, #8
20d48     0F 21 62 FC | 	wrlong	local02, local01
20d4c     0C 4E 05 F1 | 	add	fp, #12
20d50     A7 12 0A FB | 	rdlong	arg01, fp wz
20d54     10 4E 85 F1 | 	sub	fp, #16
20d58     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20d5c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20d60     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20d64     01 FA 65 56 |  if_ne	neg	result1, #1
20d68     00 FA 05 A6 |  if_e	mov	result1, #0
20d6c     B4 01 90 FD | 	jmp	#LR__3276
20d70                 | LR__3270
20d70     10 4E 05 F1 | 	add	fp, #16
20d74     A7 FA 01 FB | 	rdlong	result1, fp
20d78     10 4E 85 F1 | 	sub	fp, #16
20d7c     A4 01 90 FD | 	jmp	#LR__3276
20d80                 | LR__3271
20d80     04 4E 05 F1 | 	add	fp, #4
20d84     A7 12 02 FB | 	rdlong	arg01, fp
20d88     20 12 06 F1 | 	add	arg01, #32
20d8c     09 13 0A FB | 	rdlong	arg01, arg01 wz
20d90     14 4E 05 F1 | 	add	fp, #20
20d94     A7 12 62 FC | 	wrlong	arg01, fp
20d98     18 4E 85 F1 | 	sub	fp, #24
20d9c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20da0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
20da4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20da8     01 FA 65 A6 |  if_e	neg	result1, #1
20dac     74 01 90 AD |  if_e	jmp	#LR__3276
20db0     04 4E 05 F1 | 	add	fp, #4
20db4     A7 22 02 FB | 	rdlong	local03, fp
20db8     04 4E 85 F1 | 	sub	fp, #4
20dbc     28 22 06 F1 | 	add	local03, #40
20dc0     11 21 0A FB | 	rdlong	local02, local03 wz
20dc4     7C 00 90 AD |  if_e	jmp	#LR__3273
20dc8     04 4E 05 F1 | 	add	fp, #4
20dcc     A7 12 02 FB | 	rdlong	arg01, fp
20dd0     09 23 02 F6 | 	mov	local03, arg01
20dd4     28 22 06 F1 | 	add	local03, #40
20dd8     11 1F 02 FB | 	rdlong	local01, local03
20ddc     0F 21 02 F6 | 	mov	local02, local01
20de0     13 1E 46 F7 | 	zerox	local01, #19
20de4     14 20 46 F0 | 	shr	local02, #20
20de8     02 20 66 F0 | 	shl	local02, #2
20dec     ED 20 02 F1 | 	add	local02, __methods__
20df0     10 21 02 FB | 	rdlong	local02, local02
20df4     20 4E 05 F1 | 	add	fp, #32
20df8     A7 16 02 F6 | 	mov	arg03, fp
20dfc     24 4E 85 F1 | 	sub	fp, #36
20e00     00 15 06 F6 | 	mov	arg02, #256
20e04     F2 22 02 F6 | 	mov	local03, objptr
20e08     0F E5 01 F6 | 	mov	objptr, local01
20e0c     2D 20 62 FD | 	call	local02
20e10     11 E5 01 F6 | 	mov	objptr, local03
20e14     10 4E 05 F1 | 	add	fp, #16
20e18     A7 FA 61 FC | 	wrlong	result1, fp
20e1c     00 FA 4D F2 | 	cmps	result1, #0 wz
20e20     10 4E 85 F1 | 	sub	fp, #16
20e24     1C 00 90 5D |  if_ne	jmp	#LR__3272
20e28     24 4E 05 F1 | 	add	fp, #36
20e2c     A7 20 02 FB | 	rdlong	local02, fp
20e30     24 4E 85 F1 | 	sub	fp, #36
20e34     02 20 CE F7 | 	test	local02, #2 wz
20e38     20 4E 05 51 |  if_ne	add	fp, #32
20e3c     A7 02 68 5C |  if_ne	wrlong	#1, fp
20e40     20 4E 85 51 |  if_ne	sub	fp, #32
20e44                 | LR__3272
20e44                 | LR__3273
20e44     10 4E 05 F1 | 	add	fp, #16
20e48     A7 00 68 FC | 	wrlong	#0, fp
20e4c     10 4E 85 F1 | 	sub	fp, #16
20e50                 | LR__3274
20e50     0C 4E 05 F1 | 	add	fp, #12
20e54     A7 22 02 FB | 	rdlong	local03, fp
20e58     0C 4E 85 F1 | 	sub	fp, #12
20e5c     01 22 16 F2 | 	cmp	local03, #1 wc
20e60     B4 00 90 CD |  if_b	jmp	#LR__3275
20e64     18 4E 05 F1 | 	add	fp, #24
20e68     A7 20 02 FB | 	rdlong	local02, fp
20e6c     10 23 02 F6 | 	mov	local03, local02
20e70     13 22 46 F7 | 	zerox	local03, #19
20e74     14 20 46 F0 | 	shr	local02, #20
20e78     02 20 66 F0 | 	shl	local02, #2
20e7c     ED 20 02 F1 | 	add	local02, __methods__
20e80     10 21 02 FB | 	rdlong	local02, local02
20e84     14 4E 85 F1 | 	sub	fp, #20
20e88     A7 12 02 FB | 	rdlong	arg01, fp
20e8c     04 4E 85 F1 | 	sub	fp, #4
20e90     F2 1E 02 F6 | 	mov	local01, objptr
20e94     11 E5 01 F6 | 	mov	objptr, local03
20e98     2D 20 62 FD | 	call	local02
20e9c     0F E5 01 F6 | 	mov	objptr, local01
20ea0     14 4E 05 F1 | 	add	fp, #20
20ea4     A7 FA 61 FC | 	wrlong	result1, fp
20ea8     14 4E 85 F1 | 	sub	fp, #20
20eac     00 FA 55 F2 | 	cmps	result1, #0 wc
20eb0     64 00 90 CD |  if_b	jmp	#LR__3275
20eb4     1C 4E 05 F1 | 	add	fp, #28
20eb8     A7 22 02 FB | 	rdlong	local03, fp
20ebc     11 21 02 F6 | 	mov	local02, local03
20ec0     01 20 06 F1 | 	add	local02, #1
20ec4     A7 20 62 FC | 	wrlong	local02, fp
20ec8     08 4E 85 F1 | 	sub	fp, #8
20ecc     A7 20 02 FB | 	rdlong	local02, fp
20ed0     11 21 42 FC | 	wrbyte	local02, local03
20ed4     04 4E 85 F1 | 	sub	fp, #4
20ed8     A7 22 02 FB | 	rdlong	local03, fp
20edc     01 22 06 F1 | 	add	local03, #1
20ee0     A7 22 62 FC | 	wrlong	local03, fp
20ee4     04 4E 85 F1 | 	sub	fp, #4
20ee8     A7 22 02 FB | 	rdlong	local03, fp
20eec     01 22 86 F1 | 	sub	local03, #1
20ef0     A7 22 62 FC | 	wrlong	local03, fp
20ef4     14 4E 05 F1 | 	add	fp, #20
20ef8     A7 22 0A FB | 	rdlong	local03, fp wz
20efc     20 4E 85 F1 | 	sub	fp, #32
20f00     4C FF 9F AD |  if_e	jmp	#LR__3274
20f04     14 4E 05 F1 | 	add	fp, #20
20f08     A7 20 02 FB | 	rdlong	local02, fp
20f0c     14 4E 85 F1 | 	sub	fp, #20
20f10     0A 20 0E F2 | 	cmp	local02, #10 wz
20f14     38 FF 9F 5D |  if_ne	jmp	#LR__3274
20f18                 | LR__3275
20f18     10 4E 05 F1 | 	add	fp, #16
20f1c     A7 FA 01 FB | 	rdlong	result1, fp
20f20     10 4E 85 F1 | 	sub	fp, #16
20f24                 | LR__3276
20f24     A7 F0 03 F6 | 	mov	ptra, fp
20f28     B2 00 A0 FD | 	call	#popregs_
20f2c                 | __system___vfsread_ret
20f2c     2D 00 64 FD | 	ret
20f30                 | 
20f30                 | __system____default_filbuf
20f30     04 4A 05 F6 | 	mov	COUNT_, #4
20f34     A8 00 A0 FD | 	call	#pushregs_
20f38     09 1F 02 F6 | 	mov	local01, arg01
20f3c     0F 21 02 FB | 	rdlong	local02, local01
20f40     0C 20 06 F1 | 	add	local02, #12
20f44     10 FB 09 FB | 	rdlong	result1, local02 wz
20f48     0C 20 86 F1 | 	sub	local02, #12
20f4c     20 00 90 5D |  if_ne	jmp	#LR__3280
20f50     14 20 06 F1 | 	add	local02, #20
20f54     10 FB 01 F6 | 	mov	result1, local02
20f58     04 20 86 F1 | 	sub	local02, #4
20f5c     10 FB 61 FC | 	wrlong	result1, local02
20f60     04 20 86 F1 | 	sub	local02, #4
20f64     02 00 80 FF 
20f68     10 01 68 FC | 	wrlong	##1024, local02
20f6c     0C 20 86 F1 | 	sub	local02, #12
20f70                 | LR__3280
20f70     14 1E 06 F1 | 	add	local01, #20
20f74     0F 23 02 FB | 	rdlong	local03, local01
20f78     11 25 02 F6 | 	mov	local04, local03
20f7c     14 1E 86 F1 | 	sub	local01, #20
20f80     13 24 46 F7 | 	zerox	local04, #19
20f84     14 22 46 F0 | 	shr	local03, #20
20f88     02 22 66 F0 | 	shl	local03, #2
20f8c     ED 22 02 F1 | 	add	local03, __methods__
20f90     11 23 02 FB | 	rdlong	local03, local03
20f94     10 20 06 F1 | 	add	local02, #16
20f98     10 15 02 FB | 	rdlong	arg02, local02
20f9c     04 20 86 F1 | 	sub	local02, #4
20fa0     10 17 02 FB | 	rdlong	arg03, local02
20fa4     0C 20 86 F1 | 	sub	local02, #12
20fa8     0F 13 02 F6 | 	mov	arg01, local01
20fac     F2 1E 02 F6 | 	mov	local01, objptr
20fb0     12 E5 01 F6 | 	mov	objptr, local04
20fb4     2D 22 62 FD | 	call	local03
20fb8     0F E5 01 F6 | 	mov	objptr, local01
20fbc     FD 24 02 F6 | 	mov	local04, result1
20fc0     00 24 56 F2 | 	cmps	local04, #0 wc
20fc4     01 FA 65 C6 |  if_b	neg	result1, #1
20fc8     28 00 90 CD |  if_b	jmp	#LR__3281
20fcc     10 25 62 FC | 	wrlong	local04, local02
20fd0     10 20 06 F1 | 	add	local02, #16
20fd4     10 23 02 FB | 	rdlong	local03, local02
20fd8     0C 20 86 F1 | 	sub	local02, #12
20fdc     10 23 62 FC | 	wrlong	local03, local02
20fe0     04 20 06 F1 | 	add	local02, #4
20fe4     10 23 02 FB | 	rdlong	local03, local02
20fe8     01 22 46 F5 | 	or	local03, #1
20fec     10 23 62 FC | 	wrlong	local03, local02
20ff0     12 FB 01 F6 | 	mov	result1, local04
20ff4                 | LR__3281
20ff4     A7 F0 03 F6 | 	mov	ptra, fp
20ff8     B2 00 A0 FD | 	call	#popregs_
20ffc                 | __system____default_filbuf_ret
20ffc     2D 00 64 FD | 	ret
21000                 | 
21000                 | __system__getlower_0984
21000     41 12 56 F2 | 	cmps	arg01, #65 wc
21004     10 00 90 CD |  if_b	jmp	#LR__3290
21008     5B 12 56 F2 | 	cmps	arg01, #91 wc
2100c     09 FB 01 C6 |  if_b	mov	result1, arg01
21010     20 FA 05 C1 |  if_b	add	result1, #32
21014     04 00 90 CD |  if_b	jmp	#__system__getlower_0984_ret
21018                 | LR__3290
21018     09 FB 01 F6 | 	mov	result1, arg01
2101c                 | __system__getlower_0984_ret
2101c     2D 00 64 FD | 	ret
21020                 | 
21020                 | __system___pat_match
21020     08 4A 05 F6 | 	mov	COUNT_, #8
21024     A8 00 A0 FD | 	call	#pushregs_
21028     09 1F 02 F6 | 	mov	local01, arg01
2102c                 | LR__3300
2102c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
21030     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
21034     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
21038     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
2103c     2C 00 90 AD |  if_e	jmp	#LR__3301
21040     0A 13 C2 FA | 	rdbyte	arg01, arg02
21044     B8 FF BF FD | 	call	#__system__getlower_0984
21048     FD 22 02 F6 | 	mov	local03, result1
2104c     0F 13 C2 FA | 	rdbyte	arg01, local01
21050     AC FF BF FD | 	call	#__system__getlower_0984
21054     11 FB 09 F2 | 	cmp	result1, local03 wz
21058     00 FA 05 56 |  if_ne	mov	result1, #0
2105c     FC 00 90 5D |  if_ne	jmp	#LR__3309
21060     01 1E 06 F1 | 	add	local01, #1
21064     01 14 06 F1 | 	add	arg02, #1
21068     C0 FF 9F FD | 	jmp	#LR__3300
2106c                 | LR__3301
2106c     0A 23 C2 FA | 	rdbyte	local03, arg02
21070     2A 22 0E F2 | 	cmp	local03, #42 wz
21074     D4 00 90 5D |  if_ne	jmp	#LR__3308
21078     01 14 06 F1 | 	add	arg02, #1
2107c     0A 21 C2 FA | 	rdbyte	local02, arg02
21080     01 14 86 F1 | 	sub	arg02, #1
21084     2E 20 0E F2 | 	cmp	local02, #46 wz
21088     28 00 90 5D |  if_ne	jmp	#LR__3302
2108c     02 14 06 F1 | 	add	arg02, #2
21090     0A 21 C2 FA | 	rdbyte	local02, arg02
21094     02 14 86 F1 | 	sub	arg02, #2
21098     2A 20 0E F2 | 	cmp	local02, #42 wz
2109c     03 14 06 A1 |  if_e	add	arg02, #3
210a0     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
210a4     03 14 86 A1 |  if_e	sub	arg02, #3
210a8     12 27 0A A6 |  if_e	mov	local05, local04 wz
210ac     01 FA 05 A6 |  if_e	mov	result1, #1
210b0     A8 00 90 AD |  if_e	jmp	#LR__3309
210b4                 | LR__3302
210b4     01 14 06 F1 | 	add	arg02, #1
210b8     00 28 06 F6 | 	mov	local06, #0
210bc     97 1E 48 FB | 	callpa	#(@LR__3305-@LR__3303)>>2,fcache_load_ptr_
210c0                 | LR__3303
210c0     14 2B 02 F6 | 	mov	local07, local06
210c4     0A 2B 02 F1 | 	add	local07, arg02
210c8     15 2B CA FA | 	rdbyte	local07, local07 wz
210cc     14 27 02 56 |  if_ne	mov	local05, local06
210d0     01 26 06 51 |  if_ne	add	local05, #1
210d4     13 29 02 56 |  if_ne	mov	local06, local05
210d8     E4 FF 9F 5D |  if_ne	jmp	#LR__3303
210dc     00 2C 06 F6 | 	mov	local08, #0
210e0                 | LR__3304
210e0     16 2B 02 F6 | 	mov	local07, local08
210e4     0F 2B 02 F1 | 	add	local07, local01
210e8     15 2B CA FA | 	rdbyte	local07, local07 wz
210ec     16 27 02 56 |  if_ne	mov	local05, local08
210f0     01 26 06 51 |  if_ne	add	local05, #1
210f4     13 2D 02 56 |  if_ne	mov	local08, local05
210f8     E4 FF 9F 5D |  if_ne	jmp	#LR__3304
210fc                 | LR__3305
210fc     14 2D 52 F2 | 	cmps	local08, local06 wc
21100     00 FA 05 C6 |  if_b	mov	result1, #0
21104     54 00 90 CD |  if_b	jmp	#LR__3309
21108     16 21 02 F6 | 	mov	local02, local08
2110c     14 21 82 F1 | 	sub	local02, local06
21110     10 1F 02 F1 | 	add	local01, local02
21114                 | LR__3306
21114     01 28 56 F2 | 	cmps	local06, #1 wc
21118     30 00 90 CD |  if_b	jmp	#LR__3307
2111c     0F 13 C2 FA | 	rdbyte	arg01, local01
21120     DC FE BF FD | 	call	#__system__getlower_0984
21124     FD 2C 02 F6 | 	mov	local08, result1
21128     0A 13 C2 FA | 	rdbyte	arg01, arg02
2112c     D0 FE BF FD | 	call	#__system__getlower_0984
21130     FD 2C 0A F2 | 	cmp	local08, result1 wz
21134     00 FA 05 56 |  if_ne	mov	result1, #0
21138     20 00 90 5D |  if_ne	jmp	#LR__3309
2113c     01 1E 06 F1 | 	add	local01, #1
21140     01 14 06 F1 | 	add	arg02, #1
21144     01 28 86 F1 | 	sub	local06, #1
21148     C8 FF 9F FD | 	jmp	#LR__3306
2114c                 | LR__3307
2114c                 | LR__3308
2114c     0A 2D CA FA | 	rdbyte	local08, arg02 wz
21150     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
21154     01 FA 05 A6 |  if_e	mov	result1, #1
21158     00 FA 05 56 |  if_ne	mov	result1, #0
2115c                 | LR__3309
2115c     A7 F0 03 F6 | 	mov	ptra, fp
21160     B2 00 A0 FD | 	call	#popregs_
21164                 | __system___pat_match_ret
21164     2D 00 64 FD | 	ret
21168                 | 
21168                 | _fatfs_cc_ff_uni2oem
21168     00 00 06 F6 | 	mov	_var01, #0
2116c     80 12 16 F2 | 	cmp	arg01, #128 wc
21170     09 01 02 C6 |  if_b	mov	_var01, arg01
21174     58 00 90 CD |  if_b	jmp	#LR__3314
21178     80 00 00 FF 
2117c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
21180     4C 00 90 3D |  if_ae	jmp	#LR__3313
21184     0A FB 31 F9 | 	getword	result1, arg02, #0
21188     01 00 00 FF 
2118c     52 FB 0D F2 | 	cmp	result1, ##850 wz
21190     3C 00 90 5D |  if_ne	jmp	#LR__3313
21194                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
21194     00 00 06 F6 | 	mov	_var01, #0
21198     97 14 48 FB | 	callpa	#(@LR__3311-@LR__3310)>>2,fcache_load_ptr_
2119c                 | LR__3310
2119c     00 FB 31 F9 | 	getword	result1, _var01, #0
211a0     80 FA 15 F2 | 	cmp	result1, #128 wc
211a4     1C 00 90 3D |  if_ae	jmp	#LR__3312
211a8     00 FB 31 F9 | 	getword	result1, _var01, #0
211ac     01 FA 65 F0 | 	shl	result1, #1
211b0     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
211b4     FD FA E1 FA | 	rdword	result1, result1
211b8     FD 12 0A F2 | 	cmp	arg01, result1 wz
211bc     01 00 06 51 |  if_ne	add	_var01, #1
211c0     D8 FF 9F 5D |  if_ne	jmp	#LR__3310
211c4                 | LR__3311
211c4                 | LR__3312
211c4     00 01 32 F9 | 	getword	_var01, _var01, #0
211c8     80 00 06 F1 | 	add	_var01, #128
211cc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
211d0                 | LR__3313
211d0                 | LR__3314
211d0                 | ' 			c = (c + 0x80) & 0xFF;
211d0                 | ' 		}
211d0                 | ' 	}
211d0                 | ' 
211d0                 | ' 	return c;
211d0     00 FB 01 F6 | 	mov	result1, _var01
211d4                 | _fatfs_cc_ff_uni2oem_ret
211d4     2D 00 64 FD | 	ret
211d8                 | 
211d8                 | _fatfs_cc_ff_oem2uni
211d8     00 00 06 F6 | 	mov	_var01, #0
211dc     09 FB 31 F9 | 	getword	result1, arg01, #0
211e0     80 FA 15 F2 | 	cmp	result1, #128 wc
211e4     09 01 02 C6 |  if_b	mov	_var01, arg01
211e8     2C 00 90 CD |  if_b	jmp	#LR__3321
211ec     0A 15 32 F9 | 	getword	arg02, arg02, #0
211f0     01 00 00 FF 
211f4     52 15 0E F2 | 	cmp	arg02, ##850 wz
211f8     1C 00 90 5D |  if_ne	jmp	#LR__3320
211fc     09 FB 31 F9 | 	getword	result1, arg01, #0
21200     00 FB 15 F2 | 	cmp	result1, #256 wc
21204     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
21208     80 12 86 C1 |  if_b	sub	arg01, #128
2120c     01 12 66 C0 |  if_b	shl	arg01, #1
21210     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
21214     09 01 E2 CA |  if_b	rdword	_var01, arg01
21218                 | LR__3320
21218                 | LR__3321
21218                 | ' 		}
21218                 | ' 	}
21218                 | ' 
21218                 | ' 	return c;
21218     00 FB 01 F6 | 	mov	result1, _var01
2121c                 | _fatfs_cc_ff_oem2uni_ret
2121c     2D 00 64 FD | 	ret
21220                 | 
21220                 | _fatfs_cc_ff_wtoupper
21220     09 01 02 F6 | 	mov	_var01, arg01
21224     80 00 00 FF 
21228     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2122c     60 01 90 3D |  if_ae	jmp	#LR__3343
21230     00 03 02 F6 | 	mov	_var02, _var01
21234     01 01 32 F9 | 	getword	_var01, _var02, #0
21238     08 00 00 FF 
2123c     00 00 16 F2 | 	cmp	_var01, ##4096 wc
21240     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
21244     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
21248     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2124c     01 00 00 3F 
21250     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
21254     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
21258     01 00 00 3F 
2125c     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
21260     02 07 02 F6 | 	mov	_var04, _var03
21264                 | ' 		uc = (WORD)uni;
21264                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
21264                 | ' 		for (;;) {
21264                 | LR__3330
21264     03 09 E2 FA | 	rdword	_var05, _var04
21268     04 05 02 F6 | 	mov	_var03, _var05
2126c     0F 04 4E F7 | 	zerox	_var03, #15 wz
21270     02 06 06 F1 | 	add	_var04, #2
21274     14 01 90 AD |  if_e	jmp	#LR__3342
21278     01 05 32 F9 | 	getword	_var03, _var02, #0
2127c     04 01 32 F9 | 	getword	_var01, _var05, #0
21280     00 05 12 F2 | 	cmp	_var03, _var01 wc
21284     04 01 90 CD |  if_b	jmp	#LR__3342
21288     03 0B E2 FA | 	rdword	_var06, _var04
2128c     05 0D 32 F9 | 	getword	_var07, _var06, #0
21290     08 0C 46 F0 | 	shr	_var07, #8
21294     05 0B 32 F9 | 	getword	_var06, _var06, #0
21298     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2129c     01 05 32 F9 | 	getword	_var03, _var02, #0
212a0     04 0F 32 F9 | 	getword	_var08, _var05, #0
212a4     05 01 32 F9 | 	getword	_var01, _var06, #0
212a8     00 0F 02 F1 | 	add	_var08, _var01
212ac     07 05 52 F2 | 	cmps	_var03, _var08 wc
212b0     02 06 06 F1 | 	add	_var04, #2
212b4     C4 00 90 3D |  if_ae	jmp	#LR__3341
212b8                 | ' 				switch (cmd) {
212b8     06 11 32 F9 | 	getword	_var09, _var07, #0
212bc     09 10 26 F3 | 	fle	_var09, #9
212c0     30 10 62 FD | 	jmprel	_var09
212c4                 | LR__3331
212c4     24 00 90 FD | 	jmp	#LR__3332
212c8     3C 00 90 FD | 	jmp	#LR__3333
212cc     54 00 90 FD | 	jmp	#LR__3334
212d0     5C 00 90 FD | 	jmp	#LR__3335
212d4     64 00 90 FD | 	jmp	#LR__3336
212d8     6C 00 90 FD | 	jmp	#LR__3337
212dc     74 00 90 FD | 	jmp	#LR__3338
212e0     7C 00 90 FD | 	jmp	#LR__3339
212e4     84 00 90 FD | 	jmp	#LR__3340
212e8     A0 00 90 FD | 	jmp	#LR__3342
212ec                 | LR__3332
212ec     01 03 32 F9 | 	getword	_var02, _var02, #0
212f0     04 09 32 F9 | 	getword	_var05, _var05, #0
212f4     04 03 82 F1 | 	sub	_var02, _var05
212f8     01 02 66 F0 | 	shl	_var02, #1
212fc     03 03 02 F1 | 	add	_var02, _var04
21300     01 03 E2 FA | 	rdword	_var02, _var02
21304     84 00 90 FD | 	jmp	#LR__3342
21308                 | LR__3333
21308     01 05 32 F9 | 	getword	_var03, _var02, #0
2130c     01 03 32 F9 | 	getword	_var02, _var02, #0
21310     04 09 32 F9 | 	getword	_var05, _var05, #0
21314     04 03 82 F1 | 	sub	_var02, _var05
21318     01 02 06 F5 | 	and	_var02, #1
2131c     02 03 C2 F2 | 	subr	_var02, _var03
21320     68 00 90 FD | 	jmp	#LR__3342
21324                 | LR__3334
21324     01 03 32 F9 | 	getword	_var02, _var02, #0
21328     10 02 86 F1 | 	sub	_var02, #16
2132c     5C 00 90 FD | 	jmp	#LR__3342
21330                 | LR__3335
21330     01 03 32 F9 | 	getword	_var02, _var02, #0
21334     20 02 86 F1 | 	sub	_var02, #32
21338     50 00 90 FD | 	jmp	#LR__3342
2133c                 | LR__3336
2133c     01 03 32 F9 | 	getword	_var02, _var02, #0
21340     30 02 86 F1 | 	sub	_var02, #48
21344     44 00 90 FD | 	jmp	#LR__3342
21348                 | LR__3337
21348     01 03 32 F9 | 	getword	_var02, _var02, #0
2134c     1A 02 86 F1 | 	sub	_var02, #26
21350     38 00 90 FD | 	jmp	#LR__3342
21354                 | LR__3338
21354     01 03 32 F9 | 	getword	_var02, _var02, #0
21358     08 02 06 F1 | 	add	_var02, #8
2135c     2C 00 90 FD | 	jmp	#LR__3342
21360                 | LR__3339
21360     01 03 32 F9 | 	getword	_var02, _var02, #0
21364     50 02 86 F1 | 	sub	_var02, #80
21368     20 00 90 FD | 	jmp	#LR__3342
2136c                 | LR__3340
2136c     01 03 32 F9 | 	getword	_var02, _var02, #0
21370     0E 00 00 FF 
21374     60 02 86 F1 | 	sub	_var02, ##7264
21378                 | ' 				}
21378                 | ' 				break;
21378     10 00 90 FD | 	jmp	#LR__3342
2137c                 | LR__3341
2137c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
21380     02 0A 06 AA |  if_e	mul	_var06, #2
21384     05 07 02 A1 |  if_e	add	_var04, _var06
21388     D8 FE 9F FD | 	jmp	#LR__3330
2138c                 | LR__3342
2138c     01 01 32 F9 | 	getword	_var01, _var02, #0
21390                 | LR__3343
21390                 | ' 		}
21390                 | ' 		uni = uc;
21390                 | ' 	}
21390                 | ' 
21390                 | ' 	return uni;
21390     00 FB 01 F6 | 	mov	result1, _var01
21394                 | _fatfs_cc_ff_wtoupper_ret
21394     2D 00 64 FD | 	ret
21398                 | 
21398                 | _fatfs_cc_strncpy
21398     09 01 02 F6 | 	mov	_var01, arg01
2139c     97 12 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
213a0                 | ' 
213a0                 | ' 	dscan = dst;
213a0                 | ' 	sscan = src;
213a0                 | ' 	count = n;
213a0                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
213a0                 | LR__3350
213a0     01 16 86 F1 | 	sub	arg03, #1
213a4     00 16 56 F2 | 	cmps	arg03, #0 wc
213a8     18 00 90 CD |  if_b	jmp	#LR__3352
213ac     0A FB C1 FA | 	rdbyte	result1, arg02
213b0     00 FB 41 FC | 	wrbyte	result1, _var01
213b4     01 14 06 F1 | 	add	arg02, #1
213b8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
213bc                 | ' 		continue;
213bc     01 00 06 F1 | 	add	_var01, #1
213c0     DC FF 9F 5D |  if_ne	jmp	#LR__3350
213c4                 | LR__3351
213c4                 | LR__3352
213c4     97 0C 48 FB | 	callpa	#(@LR__3354-@LR__3353)>>2,fcache_load_ptr_
213c8                 | ' 	while (--count >= 0)
213c8                 | LR__3353
213c8     01 16 86 F1 | 	sub	arg03, #1
213cc     00 16 56 F2 | 	cmps	arg03, #0 wc
213d0     00 03 02 36 |  if_ae	mov	_var02, _var01
213d4     01 00 06 31 |  if_ae	add	_var01, #1
213d8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
213dc     E8 FF 9F 3D |  if_ae	jmp	#LR__3353
213e0                 | LR__3354
213e0                 | ' 		*dscan++ = '\0';
213e0                 | ' 	return(dst);
213e0     09 FB 01 F6 | 	mov	result1, arg01
213e4                 | _fatfs_cc_strncpy_ret
213e4     2D 00 64 FD | 	ret
213e8                 | 
213e8                 | _fatfs_cc_memcmp
213e8                 | ' 	for (n = size; n > 0; n--)
213e8     00 16 0E F2 | 	cmp	arg03, #0 wz
213ec     28 00 90 AD |  if_e	jmp	#LR__3361
213f0                 | LR__3360
213f0     09 01 C2 FA | 	rdbyte	_var01, arg01
213f4     0A 03 C2 FA | 	rdbyte	_var02, arg02
213f8     01 01 0A F2 | 	cmp	_var01, _var02 wz
213fc     01 12 06 A1 |  if_e	add	arg01, #1
21400     01 14 06 A1 |  if_e	add	arg02, #1
21404                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
21404     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
21408     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2140c     01 FB 81 51 |  if_ne	sub	result1, _var02
21410     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
21414     F6 17 6E FB | 	djnz	arg03, #LR__3360
21418                 | LR__3361
21418                 | ' 
21418                 | ' 	return(0);
21418     00 FA 05 F6 | 	mov	result1, #0
2141c                 | _fatfs_cc_memcmp_ret
2141c     2D 00 64 FD | 	ret
21420                 | 
21420                 | _fatfs_cc_strncmp
21420     09 01 0A F6 | 	mov	_var01, arg01 wz
21424     14 00 90 5D |  if_ne	jmp	#LR__3370
21428                 | ' 		return scan2 ? -1 : 0;
21428     00 14 0E F2 | 	cmp	arg02, #0 wz
2142c     01 02 66 56 |  if_ne	neg	_var02, #1
21430     00 02 06 A6 |  if_e	mov	_var02, #0
21434     01 FB 01 F6 | 	mov	result1, _var02
21438     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2143c                 | LR__3370
2143c     00 14 0E F2 | 	cmp	arg02, #0 wz
21440     01 FA 05 A6 |  if_e	mov	result1, #1
21444     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
21448     0B 05 02 F6 | 	mov	_var03, arg03
2144c     97 16 48 FB | 	callpa	#(@LR__3372-@LR__3371)>>2,fcache_load_ptr_
21450                 | ' 	count = n;
21450                 | ' 	do {
21450                 | LR__3371
21450     00 07 C2 FA | 	rdbyte	_var04, _var01
21454     0A 09 02 F6 | 	mov	_var05, arg02
21458     04 0B C2 FA | 	rdbyte	_var06, _var05
2145c     01 04 86 F1 | 	sub	_var03, #1
21460     00 04 56 F2 | 	cmps	_var03, #0 wc
21464     01 00 06 F1 | 	add	_var01, #1
21468     01 14 06 F1 | 	add	arg02, #1
2146c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
21470     08 00 90 2D |  if_nc_and_z	jmp	#LR__3373
21474     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
21478     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3371
2147c                 | LR__3372
2147c                 | LR__3373
2147c     00 04 56 F2 | 	cmps	_var03, #0 wc
21480                 | ' 		return(0);
21480     00 FA 05 C6 |  if_b	mov	result1, #0
21484     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
21488     05 07 0A F2 | 	cmp	_var04, _var06 wz
2148c                 | ' 		return(0);
2148c     00 FA 05 A6 |  if_e	mov	result1, #0
21490     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
21494     00 06 0E F2 | 	cmp	_var04, #0 wz
21498                 | ' 		return(-1);
21498     01 FA 65 A6 |  if_e	neg	result1, #1
2149c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
214a0     00 0A 0E F2 | 	cmp	_var06, #0 wz
214a4                 | ' 		return(1);
214a4     01 FA 05 A6 |  if_e	mov	result1, #1
214a8                 | ' 		return(c1 - c2);
214a8     03 FB 01 56 |  if_ne	mov	result1, _var04
214ac     05 FB 81 51 |  if_ne	sub	result1, _var06
214b0                 | _fatfs_cc_strncmp_ret
214b0     2D 00 64 FD | 	ret
214b4                 | 
214b4                 | _fatfs_cc_strchr
214b4                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
214b4                 | ' 	while ((c = *s++) != (char) charwanted)
214b4                 | LR__3380
214b4     09 01 02 F6 | 	mov	_var01, arg01
214b8     00 03 C2 FA | 	rdbyte	_var02, _var01
214bc     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
214c0     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
214c4     03 05 0A F2 | 	cmp	_var03, _var04 wz
214c8     01 12 06 F1 | 	add	arg01, #1
214cc     14 00 90 AD |  if_e	jmp	#LR__3381
214d0     01 05 02 F6 | 	mov	_var03, _var02
214d4     07 04 4E F7 | 	zerox	_var03, #7 wz
214d8     00 FA 05 A6 |  if_e	mov	result1, #0
214dc     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
214e0     D0 FF 9F FD | 	jmp	#LR__3380
214e4                 | LR__3381
214e4                 | ' 	return((char *)--s);
214e4     01 12 86 F1 | 	sub	arg01, #1
214e8     09 FB 01 F6 | 	mov	result1, arg01
214ec                 | _fatfs_cc_strchr_ret
214ec     2D 00 64 FD | 	ret
214f0                 | 
214f0                 | _fatfs_cc_disk_initialize
214f0     04 4A 05 F6 | 	mov	COUNT_, #4
214f4     A8 00 A0 FD | 	call	#pushregs_
214f8     40 F0 07 F1 | 	add	ptra, #64
214fc     04 4E 05 F1 | 	add	fp, #4
21500     A7 12 42 FC | 	wrbyte	arg01, fp
21504     01 00 00 FF 
21508     14 E4 05 F1 | 	add	objptr, ##532
2150c     F2 18 02 FB | 	rdlong	arg04, objptr
21510     2C 4E 05 F1 | 	add	fp, #44
21514     A7 18 62 FC | 	wrlong	arg04, fp
21518     04 E4 85 F1 | 	sub	objptr, #4
2151c     F2 18 02 FB | 	rdlong	arg04, objptr
21520     04 4E 05 F1 | 	add	fp, #4
21524     A7 18 62 FC | 	wrlong	arg04, fp
21528     08 E4 05 F1 | 	add	objptr, #8
2152c     F2 18 02 FB | 	rdlong	arg04, objptr
21530     04 4E 05 F1 | 	add	fp, #4
21534     A7 18 62 FC | 	wrlong	arg04, fp
21538     04 E4 05 F1 | 	add	objptr, #4
2153c     F2 18 02 FB | 	rdlong	arg04, objptr
21540     04 4E 05 F1 | 	add	fp, #4
21544     A7 18 62 FC | 	wrlong	arg04, fp
21548     04 E4 05 F1 | 	add	objptr, #4
2154c     F2 02 48 FC | 	wrbyte	#1, objptr
21550     01 00 00 FF 
21554     20 E4 85 F1 | 	sub	objptr, ##544
21558     38 4E 85 F1 | 	sub	fp, #56
2155c     A7 18 CA FA | 	rdbyte	arg04, fp wz
21560     04 4E 85 F1 | 	sub	fp, #4
21564                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
21564                 | '             return RES_NOTRDY;
21564     03 FA 05 56 |  if_ne	mov	result1, #3
21568     D8 05 90 5D |  if_ne	jmp	#LR__3408
2156c     13 00 00 FF 
21570     10 13 06 F6 | 	mov	arg01, ##10000
21574     00 9B BF FD | 	call	#__system___waitus
21578     30 4E 05 F1 | 	add	fp, #48
2157c     A7 12 02 FB | 	rdlong	arg01, fp
21580     09 01 08 FC | 	wrpin	#0, arg01
21584     04 4E 05 F1 | 	add	fp, #4
21588     A7 12 02 FB | 	rdlong	arg01, fp
2158c     09 01 08 FC | 	wrpin	#0, arg01
21590     04 4E 05 F1 | 	add	fp, #4
21594     A7 12 02 FB | 	rdlong	arg01, fp
21598     09 01 08 FC | 	wrpin	#0, arg01
2159c     04 4E 05 F1 | 	add	fp, #4
215a0     A7 12 02 FB | 	rdlong	arg01, fp
215a4     09 00 80 FF 
215a8     09 01 08 FC | 	wrpin	##4608, arg01
215ac     0C 4E 85 F1 | 	sub	fp, #12
215b0     A7 12 02 FB | 	rdlong	arg01, fp
215b4     59 12 62 FD | 	drvh	arg01
215b8     04 4E 05 F1 | 	add	fp, #4
215bc     A7 12 02 FB | 	rdlong	arg01, fp
215c0     59 12 62 FD | 	drvh	arg01
215c4     04 4E 05 F1 | 	add	fp, #4
215c8     A7 12 02 FB | 	rdlong	arg01, fp
215cc     59 12 62 FD | 	drvh	arg01
215d0     04 4E 05 F1 | 	add	fp, #4
215d4     A7 12 02 FB | 	rdlong	arg01, fp
215d8     59 12 62 FD | 	drvh	arg01
215dc     20 4E 85 F1 | 	sub	fp, #32
215e0     00 04 80 FF 
215e4     A7 20 68 FC | 	wrlong	##524304, fp
215e8     04 4E 05 F1 | 	add	fp, #4
215ec     20 03 80 FF 
215f0     A7 90 68 FC | 	wrlong	##409672, fp
215f4     14 4E 05 F1 | 	add	fp, #20
215f8     A7 1E 02 FB | 	rdlong	local01, fp
215fc     18 4E 85 F1 | 	sub	fp, #24
21600     A7 16 02 FB | 	rdlong	arg03, fp
21604     40 1E 62 FD | 	dirl	local01
21608     A0 03 80 FF 
2160c     0F 91 08 FC | 	wrpin	##475208, local01
21610     0F 17 12 FC | 	wxpin	arg03, local01
21614     0F 01 28 FC | 	wypin	#0, local01
21618     41 1E 62 FD | 	dirh	local01
2161c     1C 4E 05 F1 | 	add	fp, #28
21620     A7 20 02 FB | 	rdlong	local02, fp
21624     10 1F 82 F1 | 	sub	local01, local02
21628     07 1E 06 F5 | 	and	local01, #7
2162c     18 1E 66 F0 | 	shl	local01, #24
21630     78 14 06 F6 | 	mov	arg02, #120
21634     0F 15 42 F5 | 	or	arg02, local01
21638     14 4E 85 F1 | 	sub	fp, #20
2163c     A7 14 62 FC | 	wrlong	arg02, fp
21640     14 4E 05 F1 | 	add	fp, #20
21644     A7 12 02 FB | 	rdlong	arg01, fp
21648     10 14 26 F4 | 	bith	arg02, #16
2164c     40 12 62 FD | 	dirl	arg01
21650     09 15 02 FC | 	wrpin	arg02, arg01
21654     09 3F 18 FC | 	wxpin	#31, arg01
21658     FF FF FF FF 
2165c     09 FF 2B FC | 	wypin	##-1, arg01
21660     41 12 62 FD | 	dirh	arg01
21664     04 4E 85 F1 | 	sub	fp, #4
21668     A7 14 02 FB | 	rdlong	arg02, fp
2166c     08 4E 05 F1 | 	add	fp, #8
21670     A7 22 02 FB | 	rdlong	local03, fp
21674     11 15 82 F1 | 	sub	arg02, local03
21678     07 14 06 F5 | 	and	arg02, #7
2167c     18 14 66 F0 | 	shl	arg02, #24
21680     14 4E 85 F1 | 	sub	fp, #20
21684     A7 14 62 FC | 	wrlong	arg02, fp
21688     29 00 00 FF 
2168c     7A 14 46 F5 | 	or	arg02, ##21114
21690     A7 14 62 FC | 	wrlong	arg02, fp
21694     14 4E 05 F1 | 	add	fp, #20
21698     A7 12 02 FB | 	rdlong	arg01, fp
2169c     40 12 62 FD | 	dirl	arg01
216a0     09 15 02 FC | 	wrpin	arg02, arg01
216a4     09 4F 18 FC | 	wxpin	#39, arg01
216a8     09 01 28 FC | 	wypin	#0, arg01
216ac     41 12 62 FD | 	dirh	arg01
216b0     28 4E 85 F1 | 	sub	fp, #40
216b4     A7 12 02 F6 | 	mov	arg01, fp
216b8     14 4E 85 F1 | 	sub	fp, #20
216bc     0A 14 06 F6 | 	mov	arg02, #10
216c0     10 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1018
216c4     00 12 06 F6 | 	mov	arg01, #0
216c8     00 14 06 F6 | 	mov	arg02, #0
216cc     DC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
216d0     18 80 B0 FD | 	call	#_fatfs_cc_deselect_1028
216d4     64 12 06 F6 | 	mov	arg01, #100
216d8     9C 99 BF FD | 	call	#__system___waitus
216dc     14 4E 05 F1 | 	add	fp, #20
216e0     A7 12 02 F6 | 	mov	arg01, fp
216e4     14 4E 85 F1 | 	sub	fp, #20
216e8     0A 14 06 F6 | 	mov	arg02, #10
216ec     E4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1018
216f0     0C 4E 05 F1 | 	add	fp, #12
216f4     A7 00 48 FC | 	wrbyte	#0, fp
216f8     0C 4E 85 F1 | 	sub	fp, #12
216fc     00 12 06 F6 | 	mov	arg01, #0
21700     00 14 06 F6 | 	mov	arg02, #0
21704     A4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21708     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2170c     01 18 0E F2 | 	cmp	arg04, #1 wz
21710     B8 03 90 5D |  if_ne	jmp	#LR__3407
21714     08 12 06 F6 | 	mov	arg01, #8
21718     AA 15 06 F6 | 	mov	arg02, #426
2171c     8C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21720     FD FA E1 F8 | 	getbyte	result1, result1, #0
21724     01 FA 0D F2 | 	cmp	result1, #1 wz
21728     98 01 90 5D |  if_ne	jmp	#LR__3393
2172c     14 4E 05 F1 | 	add	fp, #20
21730     A7 12 02 F6 | 	mov	arg01, fp
21734     14 4E 85 F1 | 	sub	fp, #20
21738     04 14 06 F6 | 	mov	arg02, #4
2173c     94 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1018
21740     16 4E 05 F1 | 	add	fp, #22
21744     A7 24 C2 FA | 	rdbyte	local04, fp
21748     16 4E 85 F1 | 	sub	fp, #22
2174c     01 24 0E F2 | 	cmp	local04, #1 wz
21750     17 4E 05 A1 |  if_e	add	fp, #23
21754     A7 22 C2 AA |  if_e	rdbyte	local03, fp
21758     17 4E 85 A1 |  if_e	sub	fp, #23
2175c     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
21760     68 03 90 5D |  if_ne	jmp	#LR__3406
21764                 | ' 				for (tmr = 1000; tmr; tmr--) {
21764     18 4E 05 F1 | 	add	fp, #24
21768     01 00 80 FF 
2176c     A7 D0 6B FC | 	wrlong	##1000, fp
21770     18 4E 85 F1 | 	sub	fp, #24
21774                 | LR__3390
21774     18 4E 05 F1 | 	add	fp, #24
21778     A7 1E 0A FB | 	rdlong	local01, fp wz
2177c     18 4E 85 F1 | 	sub	fp, #24
21780     3C 00 90 AD |  if_e	jmp	#LR__3391
21784     A9 12 06 F6 | 	mov	arg01, #169
21788     1E 14 C6 F9 | 	decod	arg02, #30
2178c     1C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21790     FD 24 02 F6 | 	mov	local04, result1
21794     07 24 4E F7 | 	zerox	local04, #7 wz
21798     24 00 90 AD |  if_e	jmp	#LR__3391
2179c     01 00 00 FF 
217a0     E8 13 06 F6 | 	mov	arg01, ##1000
217a4     D0 98 BF FD | 	call	#__system___waitus
217a8     18 4E 05 F1 | 	add	fp, #24
217ac     A7 24 02 FB | 	rdlong	local04, fp
217b0     01 24 86 F1 | 	sub	local04, #1
217b4     A7 24 62 FC | 	wrlong	local04, fp
217b8     18 4E 85 F1 | 	sub	fp, #24
217bc     B4 FF 9F FD | 	jmp	#LR__3390
217c0                 | LR__3391
217c0     18 4E 05 F1 | 	add	fp, #24
217c4     A7 24 0A FB | 	rdlong	local04, fp wz
217c8     18 4E 85 F1 | 	sub	fp, #24
217cc     4C 00 90 AD |  if_e	jmp	#LR__3392
217d0     3A 12 06 F6 | 	mov	arg01, #58
217d4     00 14 06 F6 | 	mov	arg02, #0
217d8     D0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
217dc     FD 22 02 F6 | 	mov	local03, result1
217e0     07 22 4E F7 | 	zerox	local03, #7 wz
217e4     34 00 90 5D |  if_ne	jmp	#LR__3392
217e8     14 4E 05 F1 | 	add	fp, #20
217ec     A7 12 02 F6 | 	mov	arg01, fp
217f0     14 4E 85 F1 | 	sub	fp, #20
217f4     04 14 06 F6 | 	mov	arg02, #4
217f8     D8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1018
217fc     14 4E 05 F1 | 	add	fp, #20
21800     A7 1E C2 FA | 	rdbyte	local01, fp
21804     40 1E CE F7 | 	test	local01, #64 wz
21808     0C 24 06 56 |  if_ne	mov	local04, #12
2180c     04 24 06 A6 |  if_e	mov	local04, #4
21810     08 4E 85 F1 | 	sub	fp, #8
21814     A7 24 42 FC | 	wrbyte	local04, fp
21818     0C 4E 85 F1 | 	sub	fp, #12
2181c                 | LR__3392
2181c     14 24 06 FB | 	rdlong	local04, #20
21820     18 4E 05 F1 | 	add	fp, #24
21824     A7 24 62 FC | 	wrlong	local04, fp
21828     0C 4E 05 F1 | 	add	fp, #12
2182c     A7 24 02 FB | 	rdlong	local04, fp
21830     1B 24 26 F4 | 	bith	local04, #27
21834     A7 24 62 FC | 	wrlong	local04, fp
21838     0C 4E 85 F1 | 	sub	fp, #12
2183c     A7 24 02 FB | 	rdlong	local04, fp
21840     18 4E 85 F1 | 	sub	fp, #24
21844     68 78 04 FF 
21848     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2184c     1C 4E 05 C1 |  if_b	add	fp, #28
21850     00 01 80 CF 
21854     A7 08 68 CC |  if_b	wrlong	##131076, fp
21858     1C 4E 85 C1 |  if_b	sub	fp, #28
2185c     6C 02 90 CD |  if_b	jmp	#LR__3406
21860     18 4E 05 F1 | 	add	fp, #24
21864     A7 24 02 FB | 	rdlong	local04, fp
21868     18 4E 85 F1 | 	sub	fp, #24
2186c     E1 F5 05 FF 
21870     01 24 16 F2 | 	cmp	local04, ##200000001 wc
21874     1C 4E 05 C1 |  if_b	add	fp, #28
21878     00 01 80 CF 
2187c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
21880     1C 4E 85 C1 |  if_b	sub	fp, #28
21884     44 02 90 CD |  if_b	jmp	#LR__3406
21888     18 4E 05 F1 | 	add	fp, #24
2188c     A7 24 02 FB | 	rdlong	local04, fp
21890     18 4E 85 F1 | 	sub	fp, #24
21894     3B 58 08 FF 
21898     01 24 16 F2 | 	cmp	local04, ##280000001 wc
2189c     1C 4E 05 C1 |  if_b	add	fp, #28
218a0     00 01 80 CF 
218a4     A7 0C 68 CC |  if_b	wrlong	##131078, fp
218a8     1C 4E 85 C1 |  if_b	sub	fp, #28
218ac     1C 02 90 CD |  if_b	jmp	#LR__3406
218b0     1C 4E 05 F1 | 	add	fp, #28
218b4     80 01 80 FF 
218b8     A7 10 68 FC | 	wrlong	##196616, fp
218bc     1C 4E 85 F1 | 	sub	fp, #28
218c0     08 02 90 FD | 	jmp	#LR__3406
218c4                 | LR__3393
218c4     A9 12 06 F6 | 	mov	arg01, #169
218c8     00 14 06 F6 | 	mov	arg02, #0
218cc     DC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
218d0     FD 24 E2 F8 | 	getbyte	local04, result1, #0
218d4     02 24 16 F2 | 	cmp	local04, #2 wc
218d8     18 00 90 3D |  if_ae	jmp	#LR__3394
218dc     0C 4E 05 F1 | 	add	fp, #12
218e0     A7 04 48 FC | 	wrbyte	#2, fp
218e4     04 4E 05 F1 | 	add	fp, #4
218e8     A7 52 49 FC | 	wrbyte	#169, fp
218ec     10 4E 85 F1 | 	sub	fp, #16
218f0     14 00 90 FD | 	jmp	#LR__3395
218f4                 | LR__3394
218f4     0C 4E 05 F1 | 	add	fp, #12
218f8     A7 02 48 FC | 	wrbyte	#1, fp
218fc     04 4E 05 F1 | 	add	fp, #4
21900     A7 02 48 FC | 	wrbyte	#1, fp
21904     10 4E 85 F1 | 	sub	fp, #16
21908                 | LR__3395
21908                 | ' 				ty =  0x01 ; cmd =  (1) ;
21908                 | ' 			}
21908                 | ' 			for (tmr = 1000; tmr; tmr--) {
21908     18 4E 05 F1 | 	add	fp, #24
2190c     01 00 80 FF 
21910     A7 D0 6B FC | 	wrlong	##1000, fp
21914     18 4E 85 F1 | 	sub	fp, #24
21918                 | LR__3396
21918     18 4E 05 F1 | 	add	fp, #24
2191c     A7 22 0A FB | 	rdlong	local03, fp wz
21920     18 4E 85 F1 | 	sub	fp, #24
21924     44 00 90 AD |  if_e	jmp	#LR__3397
21928     10 4E 05 F1 | 	add	fp, #16
2192c     A7 12 C2 FA | 	rdbyte	arg01, fp
21930     10 4E 85 F1 | 	sub	fp, #16
21934     00 14 06 F6 | 	mov	arg02, #0
21938     70 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
2193c     FD 24 02 F6 | 	mov	local04, result1
21940     07 24 4E F7 | 	zerox	local04, #7 wz
21944     24 00 90 AD |  if_e	jmp	#LR__3397
21948     01 00 00 FF 
2194c     E8 13 06 F6 | 	mov	arg01, ##1000
21950     24 97 BF FD | 	call	#__system___waitus
21954     18 4E 05 F1 | 	add	fp, #24
21958     A7 24 02 FB | 	rdlong	local04, fp
2195c     01 24 86 F1 | 	sub	local04, #1
21960     A7 24 62 FC | 	wrlong	local04, fp
21964     18 4E 85 F1 | 	sub	fp, #24
21968     AC FF 9F FD | 	jmp	#LR__3396
2196c                 | LR__3397
2196c     18 4E 05 F1 | 	add	fp, #24
21970     A7 24 0A FB | 	rdlong	local04, fp wz
21974     18 4E 85 F1 | 	sub	fp, #24
21978     14 00 90 AD |  if_e	jmp	#LR__3398
2197c     10 12 06 F6 | 	mov	arg01, #16
21980     09 14 C6 F9 | 	decod	arg02, #9
21984     24 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21988     07 FA 4D F7 | 	zerox	result1, #7 wz
2198c     0C 00 90 AD |  if_e	jmp	#LR__3399
21990                 | LR__3398
21990     0C 4E 05 F1 | 	add	fp, #12
21994     A7 00 48 FC | 	wrbyte	#0, fp
21998     0C 4E 85 F1 | 	sub	fp, #12
2199c                 | LR__3399
2199c     14 24 06 FB | 	rdlong	local04, #20
219a0     18 4E 05 F1 | 	add	fp, #24
219a4     A7 24 62 FC | 	wrlong	local04, fp
219a8     18 4E 85 F1 | 	sub	fp, #24
219ac     F0 FA 02 FF 
219b0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
219b4     18 00 90 3D |  if_ae	jmp	#LR__3400
219b8     24 4E 05 F1 | 	add	fp, #36
219bc     A7 24 02 FB | 	rdlong	local04, fp
219c0     1B 24 26 F4 | 	bith	local04, #27
219c4     A7 24 62 FC | 	wrlong	local04, fp
219c8     24 4E 85 F1 | 	sub	fp, #36
219cc     2C 00 90 FD | 	jmp	#LR__3401
219d0                 | LR__3400
219d0     18 4E 05 F1 | 	add	fp, #24
219d4     A7 24 02 FB | 	rdlong	local04, fp
219d8     18 4E 85 F1 | 	sub	fp, #24
219dc     E1 F5 05 FF 
219e0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
219e4     24 4E 05 C1 |  if_b	add	fp, #36
219e8     A7 24 02 CB |  if_b	rdlong	local04, fp
219ec     80 00 04 CF 
219f0     00 24 46 C5 |  if_b	or	local04, ##134283264
219f4     A7 24 62 CC |  if_b	wrlong	local04, fp
219f8     24 4E 85 C1 |  if_b	sub	fp, #36
219fc                 | LR__3401
219fc     18 4E 05 F1 | 	add	fp, #24
21a00     A7 24 02 FB | 	rdlong	local04, fp
21a04     18 4E 85 F1 | 	sub	fp, #24
21a08     F0 FA 02 FF 
21a0c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
21a10     1C 4E 05 C1 |  if_b	add	fp, #28
21a14     00 01 80 CF 
21a18     A7 08 68 CC |  if_b	wrlong	##131076, fp
21a1c     1C 4E 85 C1 |  if_b	sub	fp, #28
21a20     A8 00 90 CD |  if_b	jmp	#LR__3405
21a24     18 4E 05 F1 | 	add	fp, #24
21a28     A7 24 02 FB | 	rdlong	local04, fp
21a2c     18 4E 85 F1 | 	sub	fp, #24
21a30     68 78 04 FF 
21a34     81 25 16 F2 | 	cmp	local04, ##150000001 wc
21a38     1C 4E 05 C1 |  if_b	add	fp, #28
21a3c     80 01 80 CF 
21a40     A7 0C 68 CC |  if_b	wrlong	##196614, fp
21a44     1C 4E 85 C1 |  if_b	sub	fp, #28
21a48     80 00 90 CD |  if_b	jmp	#LR__3404
21a4c     18 4E 05 F1 | 	add	fp, #24
21a50     A7 24 02 FB | 	rdlong	local04, fp
21a54     18 4E 85 F1 | 	sub	fp, #24
21a58     E1 F5 05 FF 
21a5c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
21a60     1C 4E 05 C1 |  if_b	add	fp, #28
21a64     00 02 80 CF 
21a68     A7 10 68 CC |  if_b	wrlong	##262152, fp
21a6c     1C 4E 85 C1 |  if_b	sub	fp, #28
21a70     58 00 90 CD |  if_b	jmp	#LR__3403
21a74     18 4E 05 F1 | 	add	fp, #24
21a78     A7 24 02 FB | 	rdlong	local04, fp
21a7c     18 4E 85 F1 | 	sub	fp, #24
21a80     59 73 07 FF 
21a84     81 24 16 F2 | 	cmp	local04, ##250000001 wc
21a88     1C 4E 05 C1 |  if_b	add	fp, #28
21a8c     80 02 80 CF 
21a90     A7 14 68 CC |  if_b	wrlong	##327690, fp
21a94     1C 4E 85 C1 |  if_b	sub	fp, #28
21a98     30 00 90 CD |  if_b	jmp	#LR__3402
21a9c     18 4E 05 F1 | 	add	fp, #24
21aa0     A7 24 02 FB | 	rdlong	local04, fp
21aa4     18 4E 85 F1 | 	sub	fp, #24
21aa8     D1 F0 08 FF 
21aac     01 25 16 F2 | 	cmp	local04, ##300000001 wc
21ab0     1C 4E 05 C1 |  if_b	add	fp, #28
21ab4     00 03 80 CF 
21ab8     A7 18 68 CC |  if_b	wrlong	##393228, fp
21abc     1C 4E 85 F3 | 	sumc	fp, #28
21ac0     80 03 80 3F 
21ac4     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
21ac8     1C 4E 85 31 |  if_ae	sub	fp, #28
21acc                 | LR__3402
21acc                 | LR__3403
21acc                 | LR__3404
21acc                 | LR__3405
21acc                 | LR__3406
21acc                 | LR__3407
21acc     0C 4E 05 F1 | 	add	fp, #12
21ad0     A7 24 C2 FA | 	rdbyte	local04, fp
21ad4     01 00 00 FF 
21ad8     21 E4 05 F1 | 	add	objptr, ##545
21adc     F2 24 42 FC | 	wrbyte	local04, objptr
21ae0     A7 1E CA FA | 	rdbyte	local01, fp wz
21ae4     00 24 06 56 |  if_ne	mov	local04, #0
21ae8     01 24 06 A6 |  if_e	mov	local04, #1
21aec     20 4E 05 F1 | 	add	fp, #32
21af0     A7 24 42 FC | 	wrbyte	local04, fp
21af4     A7 24 C2 FA | 	rdbyte	local04, fp
21af8     2C 4E 85 F1 | 	sub	fp, #44
21afc     01 E4 85 F1 | 	sub	objptr, #1
21b00     F2 24 42 FC | 	wrbyte	local04, objptr
21b04     01 00 00 FF 
21b08     20 E4 85 F1 | 	sub	objptr, ##544
21b0c     DC 7B B0 FD | 	call	#_fatfs_cc_deselect_1028
21b10     34 4E 05 F1 | 	add	fp, #52
21b14     A7 12 02 FB | 	rdlong	arg01, fp
21b18     18 4E 85 F1 | 	sub	fp, #24
21b1c     A7 14 02 FB | 	rdlong	arg02, fp
21b20     09 15 12 FC | 	wxpin	arg02, arg01
21b24     1C 4E 05 F1 | 	add	fp, #28
21b28     A7 12 02 FB | 	rdlong	arg01, fp
21b2c     14 4E 85 F1 | 	sub	fp, #20
21b30     A7 14 02 FB | 	rdlong	arg02, fp
21b34     09 15 02 FC | 	wrpin	arg02, arg01
21b38                 | ' 
21b38                 | ' 		}
21b38                 | ' 	}
21b38                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
21b38                 | ' 	CardType = ty;
21b38                 | ' 	s = ty ? 0 :  0x01 ;
21b38                 | ' 	Stat = s;
21b38                 | ' 
21b38                 | ' 	deselect();
21b38                 | ' 
21b38                 | ' 
21b38                 | ' 	_wxpin( PIN_CLK, ck_div );
21b38                 | ' 	_wrpin( PIN_DI, spm_tx );
21b38                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
21b38                 | ' 	return s;
21b38     08 4E 05 F1 | 	add	fp, #8
21b3c     A7 FA C1 FA | 	rdbyte	result1, fp
21b40     2C 4E 85 F1 | 	sub	fp, #44
21b44                 | LR__3408
21b44     A7 F0 03 F6 | 	mov	ptra, fp
21b48     B2 00 A0 FD | 	call	#popregs_
21b4c                 | _fatfs_cc_disk_initialize_ret
21b4c     2D 00 64 FD | 	ret
21b50                 | 
21b50                 | _fatfs_cc_disk_read
21b50     05 4A 05 F6 | 	mov	COUNT_, #5
21b54     A8 00 A0 FD | 	call	#pushregs_
21b58     0A 1F 02 F6 | 	mov	local01, arg02
21b5c     0B 21 02 F6 | 	mov	local02, arg03
21b60     0C 23 02 F6 | 	mov	local03, arg04
21b64     00 12 0E F2 | 	cmp	arg01, #0 wz
21b68     01 FA 05 56 |  if_ne	mov	result1, #1
21b6c                 | ' 
21b6c                 | ' 	return Stat;
21b6c     01 00 00 AF 
21b70     20 E4 05 A1 |  if_e	add	objptr, ##544
21b74     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
21b78     01 00 00 AF 
21b7c     20 E4 85 A1 |  if_e	sub	objptr, ##544
21b80     FD FA E1 F8 | 	getbyte	result1, result1, #0
21b84     01 FA CD F7 | 	test	result1, #1 wz
21b88     03 FA 05 56 |  if_ne	mov	result1, #3
21b8c     84 00 90 5D |  if_ne	jmp	#LR__3412
21b90     01 00 00 FF 
21b94     21 E4 05 F1 | 	add	objptr, ##545
21b98     F2 24 C2 FA | 	rdbyte	local04, objptr
21b9c     01 00 00 FF 
21ba0     21 E4 85 F1 | 	sub	objptr, ##545
21ba4     08 24 CE F7 | 	test	local04, #8 wz
21ba8     09 20 66 A0 |  if_e	shl	local02, #9
21bac     02 22 16 F2 | 	cmp	local03, #2 wc
21bb0     12 24 06 36 |  if_ae	mov	local04, #18
21bb4     11 24 06 C6 |  if_b	mov	local04, #17
21bb8     10 15 02 F6 | 	mov	arg02, local02
21bbc     12 13 02 F6 | 	mov	arg01, local04
21bc0     E8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21bc4     FD 26 02 F6 | 	mov	local05, result1
21bc8     07 26 4E F7 | 	zerox	local05, #7 wz
21bcc     30 00 90 5D |  if_ne	jmp	#LR__3411
21bd0                 | ' 		do {
21bd0                 | LR__3410
21bd0     0F 13 02 F6 | 	mov	arg01, local01
21bd4     09 14 C6 F9 | 	decod	arg02, #9
21bd8     24 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1036
21bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
21be0     01 00 00 5F 
21be4     00 1E 06 51 |  if_ne	add	local01, ##512
21be8     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3410
21bec     12 25 E2 F8 | 	getbyte	local04, local04, #0
21bf0     12 24 0E F2 | 	cmp	local04, #18 wz
21bf4     0C 12 06 A6 |  if_e	mov	arg01, #12
21bf8     00 14 06 A6 |  if_e	mov	arg02, #0
21bfc     AC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1042
21c00                 | LR__3411
21c00     E8 7A B0 FD | 	call	#_fatfs_cc_deselect_1028
21c04                 | ' 	}
21c04                 | ' 	deselect();
21c04                 | ' 
21c04                 | ' 	return count ? RES_ERROR : RES_OK;
21c04     00 22 0E F2 | 	cmp	local03, #0 wz
21c08     01 26 06 56 |  if_ne	mov	local05, #1
21c0c     00 26 06 A6 |  if_e	mov	local05, #0
21c10     13 FB 01 F6 | 	mov	result1, local05
21c14                 | LR__3412
21c14     A7 F0 03 F6 | 	mov	ptra, fp
21c18     B2 00 A0 FD | 	call	#popregs_
21c1c                 | _fatfs_cc_disk_read_ret
21c1c     2D 00 64 FD | 	ret
21c20                 | 
21c20                 | _fatfs_cc_disk_write
21c20     04 4A 05 F6 | 	mov	COUNT_, #4
21c24     A8 00 A0 FD | 	call	#pushregs_
21c28     0A 1F 02 F6 | 	mov	local01, arg02
21c2c     0C 21 02 F6 | 	mov	local02, arg04
21c30     0B 23 02 F6 | 	mov	local03, arg03
21c34     00 12 0E F2 | 	cmp	arg01, #0 wz
21c38     01 FA 05 56 |  if_ne	mov	result1, #1
21c3c                 | ' 
21c3c                 | ' 	return Stat;
21c3c     01 00 00 AF 
21c40     20 E4 05 A1 |  if_e	add	objptr, ##544
21c44     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
21c48     01 00 00 AF 
21c4c     20 E4 85 A1 |  if_e	sub	objptr, ##544
21c50     FD FA E1 F8 | 	getbyte	result1, result1, #0
21c54     01 FA CD F7 | 	test	result1, #1 wz
21c58     03 FA 05 56 |  if_ne	mov	result1, #3
21c5c     D4 00 90 5D |  if_ne	jmp	#LR__3424
21c60     01 00 00 FF 
21c64     21 E4 05 F1 | 	add	objptr, ##545
21c68     F2 16 C2 FA | 	rdbyte	arg03, objptr
21c6c     01 00 00 FF 
21c70     21 E4 85 F1 | 	sub	objptr, ##545
21c74     08 16 CE F7 | 	test	arg03, #8 wz
21c78     09 22 66 A0 |  if_e	shl	local03, #9
21c7c     01 20 0E F2 | 	cmp	local02, #1 wz
21c80     30 00 90 5D |  if_ne	jmp	#LR__3420
21c84     18 12 06 F6 | 	mov	arg01, #24
21c88     11 15 02 F6 | 	mov	arg02, local03
21c8c     1C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21c90     FD 24 02 F6 | 	mov	local04, result1
21c94     07 24 4E F7 | 	zerox	local04, #7 wz
21c98     84 00 90 5D |  if_ne	jmp	#LR__3423
21c9c     0F 13 02 F6 | 	mov	arg01, local01
21ca0     FE 14 06 F6 | 	mov	arg02, #254
21ca4     38 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1038
21ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
21cac     00 20 06 56 |  if_ne	mov	local02, #0
21cb0     6C 00 90 FD | 	jmp	#LR__3423
21cb4                 | LR__3420
21cb4     01 00 00 FF 
21cb8     21 E4 05 F1 | 	add	objptr, ##545
21cbc     F2 24 C2 FA | 	rdbyte	local04, objptr
21cc0     01 00 00 FF 
21cc4     21 E4 85 F1 | 	sub	objptr, ##545
21cc8     06 24 CE F7 | 	test	local04, #6 wz
21ccc     97 12 06 56 |  if_ne	mov	arg01, #151
21cd0     10 15 02 56 |  if_ne	mov	arg02, local02
21cd4     D4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1042
21cd8     11 15 02 F6 | 	mov	arg02, local03
21cdc     19 12 06 F6 | 	mov	arg01, #25
21ce0     C8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21ce4     FD 24 02 F6 | 	mov	local04, result1
21ce8     07 24 4E F7 | 	zerox	local04, #7 wz
21cec     30 00 90 5D |  if_ne	jmp	#LR__3422
21cf0                 | ' 			do {
21cf0                 | LR__3421
21cf0     0F 13 02 F6 | 	mov	arg01, local01
21cf4     FC 14 06 F6 | 	mov	arg02, #252
21cf8     E4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1038
21cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
21d00     01 00 00 5F 
21d04     00 1E 06 51 |  if_ne	add	local01, ##512
21d08     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3421
21d0c     00 12 06 F6 | 	mov	arg01, #0
21d10     FD 14 06 F6 | 	mov	arg02, #253
21d14     C8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1038
21d18     00 FA 0D F2 | 	cmp	result1, #0 wz
21d1c     01 20 06 A6 |  if_e	mov	local02, #1
21d20                 | LR__3422
21d20                 | LR__3423
21d20     C8 79 B0 FD | 	call	#_fatfs_cc_deselect_1028
21d24                 | ' 				count = 1;
21d24                 | ' 		}
21d24                 | ' 	}
21d24                 | ' 	deselect();
21d24                 | ' 
21d24                 | ' 	return count ? RES_ERROR : RES_OK;
21d24     00 20 0E F2 | 	cmp	local02, #0 wz
21d28     01 24 06 56 |  if_ne	mov	local04, #1
21d2c     00 24 06 A6 |  if_e	mov	local04, #0
21d30     12 FB 01 F6 | 	mov	result1, local04
21d34                 | LR__3424
21d34     A7 F0 03 F6 | 	mov	ptra, fp
21d38     B2 00 A0 FD | 	call	#popregs_
21d3c                 | _fatfs_cc_disk_write_ret
21d3c     2D 00 64 FD | 	ret
21d40                 | 
21d40                 | _fatfs_cc_disk_ioctl
21d40     01 4A 05 F6 | 	mov	COUNT_, #1
21d44     A8 00 A0 FD | 	call	#pushregs_
21d48     30 F0 07 F1 | 	add	ptra, #48
21d4c     04 4E 05 F1 | 	add	fp, #4
21d50     A7 12 42 FC | 	wrbyte	arg01, fp
21d54     04 4E 05 F1 | 	add	fp, #4
21d58     A7 14 42 FC | 	wrbyte	arg02, fp
21d5c     04 4E 05 F1 | 	add	fp, #4
21d60     A7 16 62 FC | 	wrlong	arg03, fp
21d64     08 4E 85 F1 | 	sub	fp, #8
21d68     A7 12 CA FA | 	rdbyte	arg01, fp wz
21d6c     04 4E 85 F1 | 	sub	fp, #4
21d70     01 FA 05 56 |  if_ne	mov	result1, #1
21d74                 | ' 
21d74                 | ' 	return Stat;
21d74     01 00 00 AF 
21d78     20 E4 05 A1 |  if_e	add	objptr, ##544
21d7c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
21d80     01 00 00 AF 
21d84     20 E4 85 A1 |  if_e	sub	objptr, ##544
21d88     FD FA E1 F8 | 	getbyte	result1, result1, #0
21d8c     01 FA CD F7 | 	test	result1, #1 wz
21d90     03 FA 05 56 |  if_ne	mov	result1, #3
21d94     E4 01 90 5D |  if_ne	jmp	#LR__3438
21d98     10 4E 05 F1 | 	add	fp, #16
21d9c     A7 02 68 FC | 	wrlong	#1, fp
21da0                 | ' 
21da0                 | ' 	res = RES_ERROR;
21da0                 | ' 	switch (ctrl) {
21da0     08 4E 85 F1 | 	sub	fp, #8
21da4     A7 1E C2 FA | 	rdbyte	local01, fp
21da8     08 4E 85 F1 | 	sub	fp, #8
21dac     04 1E 26 F3 | 	fle	local01, #4
21db0     30 1E 62 FD | 	jmprel	local01
21db4                 | LR__3430
21db4     10 00 90 FD | 	jmp	#LR__3431
21db8     24 00 90 FD | 	jmp	#LR__3432
21dbc     A0 01 90 FD | 	jmp	#LR__3436
21dc0     80 01 90 FD | 	jmp	#LR__3435
21dc4     98 01 90 FD | 	jmp	#LR__3436
21dc8                 | LR__3431
21dc8     A4 79 B0 FD | 	call	#_fatfs_cc_select_1032
21dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
21dd0     10 4E 05 51 |  if_ne	add	fp, #16
21dd4     A7 00 68 5C |  if_ne	wrlong	#0, fp
21dd8     10 4E 85 51 |  if_ne	sub	fp, #16
21ddc                 | ' 			break;
21ddc     8C 01 90 FD | 	jmp	#LR__3437
21de0                 | LR__3432
21de0     09 12 06 F6 | 	mov	arg01, #9
21de4     00 14 06 F6 | 	mov	arg02, #0
21de8     C0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1042
21dec     FD 1E 02 F6 | 	mov	local01, result1
21df0     07 1E 4E F7 | 	zerox	local01, #7 wz
21df4     74 01 90 5D |  if_ne	jmp	#LR__3437
21df8     18 4E 05 F1 | 	add	fp, #24
21dfc     A7 12 02 F6 | 	mov	arg01, fp
21e00     18 4E 85 F1 | 	sub	fp, #24
21e04     10 14 06 F6 | 	mov	arg02, #16
21e08     F4 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1036
21e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
21e10     58 01 90 AD |  if_e	jmp	#LR__3437
21e14     18 4E 05 F1 | 	add	fp, #24
21e18     A7 1E C2 FA | 	rdbyte	local01, fp
21e1c     18 4E 85 F1 | 	sub	fp, #24
21e20     06 1E 46 F0 | 	shr	local01, #6
21e24     01 1E 0E F2 | 	cmp	local01, #1 wz
21e28     5C 00 90 5D |  if_ne	jmp	#LR__3433
21e2c     21 4E 05 F1 | 	add	fp, #33
21e30     A7 1E C2 FA | 	rdbyte	local01, fp
21e34     01 4E 85 F1 | 	sub	fp, #1
21e38     A7 FA C1 FA | 	rdbyte	result1, fp
21e3c     FD FA 31 F9 | 	getword	result1, result1, #0
21e40     08 FA 65 F0 | 	shl	result1, #8
21e44     FD 1E 02 F1 | 	add	local01, result1
21e48     01 4E 85 F1 | 	sub	fp, #1
21e4c     A7 FA C1 FA | 	rdbyte	result1, fp
21e50     3F FA 05 F5 | 	and	result1, #63
21e54     10 FA 65 F0 | 	shl	result1, #16
21e58     FD 1E 02 F1 | 	add	local01, result1
21e5c     01 1E 06 F1 | 	add	local01, #1
21e60     09 4E 05 F1 | 	add	fp, #9
21e64     A7 1E 62 FC | 	wrlong	local01, fp
21e68     1C 4E 85 F1 | 	sub	fp, #28
21e6c     A7 1E 02 FB | 	rdlong	local01, fp
21e70     1C 4E 05 F1 | 	add	fp, #28
21e74     A7 FA 01 FB | 	rdlong	result1, fp
21e78     28 4E 85 F1 | 	sub	fp, #40
21e7c     0A FA 65 F0 | 	shl	result1, #10
21e80     0F FB 61 FC | 	wrlong	result1, local01
21e84     AC 00 90 FD | 	jmp	#LR__3434
21e88                 | LR__3433
21e88     1D 4E 05 F1 | 	add	fp, #29
21e8c     A7 1E C2 FA | 	rdbyte	local01, fp
21e90     0F 1F 42 F8 | 	getnib	local01, local01, #0
21e94     05 4E 05 F1 | 	add	fp, #5
21e98     A7 FA C1 FA | 	rdbyte	result1, fp
21e9c     80 FA 05 F5 | 	and	result1, #128
21ea0     07 FA C5 F0 | 	sar	result1, #7
21ea4     FD 1E 02 F1 | 	add	local01, result1
21ea8     01 4E 85 F1 | 	sub	fp, #1
21eac     A7 FA C1 FA | 	rdbyte	result1, fp
21eb0     03 FA 05 F5 | 	and	result1, #3
21eb4     01 FA 65 F0 | 	shl	result1, #1
21eb8     FD 1E 02 F1 | 	add	local01, result1
21ebc     02 1E 06 F1 | 	add	local01, #2
21ec0     0D 4E 85 F1 | 	sub	fp, #13
21ec4     A7 1E 42 FC | 	wrbyte	local01, fp
21ec8     0C 4E 05 F1 | 	add	fp, #12
21ecc     A7 1E C2 FA | 	rdbyte	local01, fp
21ed0     06 1E 46 F0 | 	shr	local01, #6
21ed4     01 4E 85 F1 | 	sub	fp, #1
21ed8     A7 FA C1 FA | 	rdbyte	result1, fp
21edc     FD FA 31 F9 | 	getword	result1, result1, #0
21ee0     02 FA 65 F0 | 	shl	result1, #2
21ee4     FD 1E 02 F1 | 	add	local01, result1
21ee8     01 4E 85 F1 | 	sub	fp, #1
21eec     A7 FA C1 FA | 	rdbyte	result1, fp
21ef0     03 FA 05 F5 | 	and	result1, #3
21ef4     FD FA 31 F9 | 	getword	result1, result1, #0
21ef8     0A FA 65 F0 | 	shl	result1, #10
21efc     FD 1E 02 F1 | 	add	local01, result1
21f00     01 1E 06 F1 | 	add	local01, #1
21f04     0A 4E 05 F1 | 	add	fp, #10
21f08     A7 1E 62 FC | 	wrlong	local01, fp
21f0c     1C 4E 85 F1 | 	sub	fp, #28
21f10     A7 1E 02 FB | 	rdlong	local01, fp
21f14     1C 4E 05 F1 | 	add	fp, #28
21f18     A7 FA 01 FB | 	rdlong	result1, fp
21f1c     14 4E 85 F1 | 	sub	fp, #20
21f20     A7 16 C2 FA | 	rdbyte	arg03, fp
21f24     14 4E 85 F1 | 	sub	fp, #20
21f28     09 16 86 F1 | 	sub	arg03, #9
21f2c     0B FB 61 F0 | 	shl	result1, arg03
21f30     0F FB 61 FC | 	wrlong	result1, local01
21f34                 | LR__3434
21f34     10 4E 05 F1 | 	add	fp, #16
21f38     A7 00 68 FC | 	wrlong	#0, fp
21f3c     10 4E 85 F1 | 	sub	fp, #16
21f40                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
21f40                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
21f40                 | ' 					*(LBA_t*)buff = cs << (n - 9);
21f40                 | ' 				}
21f40                 | ' 				res = RES_OK;
21f40                 | ' 			}
21f40                 | ' 			break;
21f40     28 00 90 FD | 	jmp	#LR__3437
21f44                 | LR__3435
21f44     0C 4E 05 F1 | 	add	fp, #12
21f48     A7 1E 02 FB | 	rdlong	local01, fp
21f4c     0F 01 69 FC | 	wrlong	#128, local01
21f50     04 4E 05 F1 | 	add	fp, #4
21f54     A7 00 68 FC | 	wrlong	#0, fp
21f58     10 4E 85 F1 | 	sub	fp, #16
21f5c                 | ' 			*(DWORD*)buff = 128;
21f5c                 | ' 			res = RES_OK;
21f5c                 | ' 			break;
21f5c     0C 00 90 FD | 	jmp	#LR__3437
21f60                 | LR__3436
21f60     10 4E 05 F1 | 	add	fp, #16
21f64     A7 08 68 FC | 	wrlong	#4, fp
21f68     10 4E 85 F1 | 	sub	fp, #16
21f6c                 | LR__3437
21f6c     7C 77 B0 FD | 	call	#_fatfs_cc_deselect_1028
21f70                 | ' 			res = RES_PARERR;
21f70                 | ' 	}
21f70                 | ' 
21f70                 | ' 	deselect();
21f70                 | ' 
21f70                 | ' 	return res;
21f70     10 4E 05 F1 | 	add	fp, #16
21f74     A7 FA 01 FB | 	rdlong	result1, fp
21f78     10 4E 85 F1 | 	sub	fp, #16
21f7c                 | LR__3438
21f7c     A7 F0 03 F6 | 	mov	ptra, fp
21f80     B2 00 A0 FD | 	call	#popregs_
21f84                 | _fatfs_cc_disk_ioctl_ret
21f84     2D 00 64 FD | 	ret
21f88                 | 
21f88                 | _fatfs_cc_disk_setpins
21f88     00 12 0E F2 | 	cmp	arg01, #0 wz
21f8c     01 FA 65 56 |  if_ne	neg	result1, #1
21f90     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
21f94     01 00 00 FF 
21f98     10 E4 05 F1 | 	add	objptr, ##528
21f9c     F2 14 62 FC | 	wrlong	arg02, objptr
21fa0     04 E4 05 F1 | 	add	objptr, #4
21fa4     F2 16 62 FC | 	wrlong	arg03, objptr
21fa8     04 E4 05 F1 | 	add	objptr, #4
21fac     F2 18 62 FC | 	wrlong	arg04, objptr
21fb0     04 E4 05 F1 | 	add	objptr, #4
21fb4     F2 1A 62 FC | 	wrlong	arg05, objptr
21fb8     01 00 00 FF 
21fbc     1C E4 85 F1 | 	sub	objptr, ##540
21fc0     00 FA 05 F6 | 	mov	result1, #0
21fc4                 | _fatfs_cc_disk_setpins_ret
21fc4     2D 00 64 FD | 	ret
21fc8                 | 
21fc8                 | _fatfs_cc_tchar2uni
21fc8     09 01 02 FB | 	rdlong	_var01, arg01
21fcc     00 03 02 F6 | 	mov	_var02, _var01
21fd0     01 00 06 F1 | 	add	_var01, #1
21fd4     00 05 02 F6 | 	mov	_var03, _var01
21fd8     01 07 C2 FA | 	rdbyte	_var04, _var02
21fdc     80 06 CE F7 | 	test	_var04, #128 wz
21fe0     E8 00 90 AD |  if_e	jmp	#LR__3447
21fe4     03 09 02 F6 | 	mov	_var05, _var04
21fe8     E0 08 06 F5 | 	and	_var05, #224
21fec     C0 08 0E F2 | 	cmp	_var05, #192 wz
21ff0     1F 06 06 A5 |  if_e	and	_var04, #31
21ff4     01 0A 06 A6 |  if_e	mov	_var06, #1
21ff8     34 00 90 AD |  if_e	jmp	#LR__3441
21ffc     03 09 02 F6 | 	mov	_var05, _var04
22000     F0 08 06 F5 | 	and	_var05, #240
22004     E0 08 0E F2 | 	cmp	_var05, #224 wz
22008     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2200c     02 0A 06 A6 |  if_e	mov	_var06, #2
22010     1C 00 90 AD |  if_e	jmp	#LR__3440
22014     03 09 02 F6 | 	mov	_var05, _var04
22018     F8 08 06 F5 | 	and	_var05, #248
2201c     F0 08 0E F2 | 	cmp	_var05, #240 wz
22020     07 06 06 A5 |  if_e	and	_var04, #7
22024     03 0A 06 A6 |  if_e	mov	_var06, #3
22028                 | ' 			return 0xFFFFFFFF;
22028     01 FA 65 56 |  if_ne	neg	result1, #1
2202c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
22030                 | LR__3440
22030                 | LR__3441
22030                 | ' 		}
22030                 | ' 		do {
22030                 | LR__3442
22030     02 0D C2 FA | 	rdbyte	_var07, _var03
22034     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
22038     C0 08 06 F5 | 	and	_var05, #192
2203c     80 08 0E F2 | 	cmp	_var05, #128 wz
22040     01 04 06 F1 | 	add	_var03, #1
22044     01 FA 65 56 |  if_ne	neg	result1, #1
22048     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2204c     06 06 66 F0 | 	shl	_var04, #6
22050     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
22054     3F 02 06 F5 | 	and	_var02, #63
22058     01 07 42 F5 | 	or	_var04, _var02
2205c     F4 0B 6E FB | 	djnz	_var06, #LR__3442
22060     80 06 16 F2 | 	cmp	_var04, #128 wc
22064     24 00 90 CD |  if_b	jmp	#LR__3444
22068     6C 00 00 FF 
2206c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
22070     0C 00 90 CD |  if_b	jmp	#LR__3443
22074     70 00 00 FF 
22078     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2207c     0C 00 90 CD |  if_b	jmp	#LR__3444
22080                 | LR__3443
22080     80 08 00 FF 
22084     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
22088     08 00 90 CD |  if_b	jmp	#LR__3445
2208c                 | LR__3444
2208c     01 FA 65 F6 | 	neg	result1, #1
22090     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
22094                 | LR__3445
22094     80 00 00 FF 
22098     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2209c     2C 00 90 CD |  if_b	jmp	#LR__3446
220a0     03 03 02 F6 | 	mov	_var02, _var04
220a4     80 00 00 FF 
220a8     00 02 86 F1 | 	sub	_var02, ##65536
220ac     06 02 66 F0 | 	shl	_var02, #6
220b0     80 FF 01 FF 
220b4     00 02 06 F5 | 	and	_var02, ##67043328
220b8     6E 00 6C FF 
220bc     00 08 06 F6 | 	mov	_var05, ##-671032320
220c0     01 09 42 F5 | 	or	_var05, _var02
220c4     09 06 46 F7 | 	zerox	_var04, #9
220c8     04 07 42 F5 | 	or	_var04, _var05
220cc                 | LR__3446
220cc                 | LR__3447
220cc     09 05 62 FC | 	wrlong	_var03, arg01
220d0                 | ' 	}
220d0                 | ' #line 811 "ff.c"
220d0                 | ' 	*str = p;
220d0                 | ' 	return uc;
220d0     03 FB 01 F6 | 	mov	result1, _var04
220d4                 | _fatfs_cc_tchar2uni_ret
220d4     2D 00 64 FD | 	ret
220d8                 | 
220d8                 | _fatfs_cc_put_utf
220d8     80 12 16 F2 | 	cmp	arg01, #128 wc
220dc     18 00 90 3D |  if_ae	jmp	#LR__3450
220e0     01 16 16 F2 | 	cmp	arg03, #1 wc
220e4     00 FA 05 C6 |  if_b	mov	result1, #0
220e8     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
220ec     0A 13 42 FC | 	wrbyte	arg01, arg02
220f0                 | ' 		*buf = (TCHAR)chr;
220f0                 | ' 		return 1;
220f0     01 FA 05 F6 | 	mov	result1, #1
220f4     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
220f8                 | LR__3450
220f8     04 00 00 FF 
220fc     00 12 16 F2 | 	cmp	arg01, ##2048 wc
22100     40 00 90 3D |  if_ae	jmp	#LR__3451
22104     02 16 16 F2 | 	cmp	arg03, #2 wc
22108     00 FA 05 C6 |  if_b	mov	result1, #0
2210c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
22110     09 FB 01 F6 | 	mov	result1, arg01
22114     06 FA 45 F0 | 	shr	result1, #6
22118     1F FA 05 F5 | 	and	result1, #31
2211c     C0 16 06 F6 | 	mov	arg03, #192
22120     FD 16 42 F5 | 	or	arg03, result1
22124     0A 17 42 FC | 	wrbyte	arg03, arg02
22128     01 14 06 F1 | 	add	arg02, #1
2212c     3F 12 06 F5 | 	and	arg01, #63
22130     80 FA 05 F6 | 	mov	result1, #128
22134     09 FB 41 F5 | 	or	result1, arg01
22138     0A FB 41 FC | 	wrbyte	result1, arg02
2213c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2213c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2213c                 | ' 		return 2;
2213c     02 FA 05 F6 | 	mov	result1, #2
22140     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
22144                 | LR__3451
22144     80 00 00 FF 
22148     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2214c     70 00 90 3D |  if_ae	jmp	#LR__3454
22150     03 16 16 F2 | 	cmp	arg03, #3 wc
22154     18 00 90 CD |  if_b	jmp	#LR__3452
22158     6C 00 00 FF 
2215c     00 12 16 F2 | 	cmp	arg01, ##55296 wc
22160     14 00 90 CD |  if_b	jmp	#LR__3453
22164     70 00 00 FF 
22168     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2216c     08 00 90 3D |  if_ae	jmp	#LR__3453
22170                 | LR__3452
22170     00 FA 05 F6 | 	mov	result1, #0
22174     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
22178                 | LR__3453
22178     09 FB 59 F8 | 	getnib	result1, arg01, #3
2217c     E0 16 06 F6 | 	mov	arg03, #224
22180     FD 16 42 F5 | 	or	arg03, result1
22184     0A 17 42 FC | 	wrbyte	arg03, arg02
22188     01 14 06 F1 | 	add	arg02, #1
2218c     09 FB 01 F6 | 	mov	result1, arg01
22190     06 FA 45 F0 | 	shr	result1, #6
22194     3F FA 05 F5 | 	and	result1, #63
22198     80 16 06 F6 | 	mov	arg03, #128
2219c     FD 16 42 F5 | 	or	arg03, result1
221a0     0A 17 42 FC | 	wrbyte	arg03, arg02
221a4     01 14 06 F1 | 	add	arg02, #1
221a8     3F 12 06 F5 | 	and	arg01, #63
221ac     80 FA 05 F6 | 	mov	result1, #128
221b0     09 FB 41 F5 | 	or	result1, arg01
221b4     0A FB 41 FC | 	wrbyte	result1, arg02
221b8                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
221b8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
221b8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
221b8                 | ' 		return 3;
221b8     03 FA 05 F6 | 	mov	result1, #3
221bc     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
221c0                 | LR__3454
221c0     04 16 16 F2 | 	cmp	arg03, #4 wc
221c4     00 FA 05 C6 |  if_b	mov	result1, #0
221c8     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
221cc     09 01 02 F6 | 	mov	_var01, arg01
221d0     E0 01 06 F4 | 	bitl	_var01, #480
221d4     00 00 6C FF 
221d8     00 00 86 F1 | 	sub	_var01, ##-671088640
221dc     06 00 46 F0 | 	shr	_var01, #6
221e0     09 13 32 F9 | 	getword	arg01, arg01, #0
221e4     6E 00 00 FF 
221e8     00 12 86 F1 | 	sub	arg01, ##56320
221ec     00 08 00 FF 
221f0     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
221f4     02 00 00 CF 
221f8     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
221fc     00 FA 05 36 |  if_ae	mov	result1, #0
22200     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
22204     09 01 42 F5 | 	or	_var01, arg01
22208     80 00 00 FF 
2220c     00 00 06 F1 | 	add	_var01, ##65536
22210     00 FB 01 F6 | 	mov	result1, _var01
22214     12 FA 45 F0 | 	shr	result1, #18
22218     07 FA 05 F5 | 	and	result1, #7
2221c     F0 16 06 F6 | 	mov	arg03, #240
22220     FD 16 42 F5 | 	or	arg03, result1
22224     0A 17 42 FC | 	wrbyte	arg03, arg02
22228     01 14 06 F1 | 	add	arg02, #1
2222c     00 FB 01 F6 | 	mov	result1, _var01
22230     0C FA 45 F0 | 	shr	result1, #12
22234     3F FA 05 F5 | 	and	result1, #63
22238     80 16 06 F6 | 	mov	arg03, #128
2223c     FD 16 42 F5 | 	or	arg03, result1
22240     0A 17 42 FC | 	wrbyte	arg03, arg02
22244     01 14 06 F1 | 	add	arg02, #1
22248     00 FB 01 F6 | 	mov	result1, _var01
2224c     06 FA 45 F0 | 	shr	result1, #6
22250     3F FA 05 F5 | 	and	result1, #63
22254     80 16 06 F6 | 	mov	arg03, #128
22258     FD 16 42 F5 | 	or	arg03, result1
2225c     0A 17 42 FC | 	wrbyte	arg03, arg02
22260     01 14 06 F1 | 	add	arg02, #1
22264     3F 00 06 F5 | 	and	_var01, #63
22268     80 FA 05 F6 | 	mov	result1, #128
2226c     00 FB 41 F5 | 	or	result1, _var01
22270     0A FB 41 FC | 	wrbyte	result1, arg02
22274                 | ' 	chr = (hc | chr) + 0x10000;
22274                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
22274                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
22274                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
22274                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
22274                 | ' 	return 4;
22274     04 FA 05 F6 | 	mov	result1, #4
22278                 | _fatfs_cc_put_utf_ret
22278     2D 00 64 FD | 	ret
2227c                 | 
2227c                 | _fatfs_cc_sync_window
2227c     02 4A 05 F6 | 	mov	COUNT_, #2
22280     A8 00 A0 FD | 	call	#pushregs_
22284     09 1F 02 F6 | 	mov	local01, arg01
22288     00 20 06 F6 | 	mov	local02, #0
2228c     03 1E 06 F1 | 	add	local01, #3
22290     0F FB C9 FA | 	rdbyte	result1, local01 wz
22294     03 1E 86 F1 | 	sub	local01, #3
22298     A4 00 90 AD |  if_e	jmp	#LR__3462
2229c     01 1E 06 F1 | 	add	local01, #1
222a0     0F 13 C2 FA | 	rdbyte	arg01, local01
222a4     33 1E 06 F1 | 	add	local01, #51
222a8     0F 15 02 F6 | 	mov	arg02, local01
222ac     04 1E 86 F1 | 	sub	local01, #4
222b0     0F 17 02 FB | 	rdlong	arg03, local01
222b4     30 1E 86 F1 | 	sub	local01, #48
222b8     01 18 06 F6 | 	mov	arg04, #1
222bc     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
222c0     00 FA 0D F2 | 	cmp	result1, #0 wz
222c4     74 00 90 5D |  if_ne	jmp	#LR__3460
222c8     03 1E 06 F1 | 	add	local01, #3
222cc     0F 01 48 FC | 	wrbyte	#0, local01
222d0     2D 1E 06 F1 | 	add	local01, #45
222d4     0F FB 01 FB | 	rdlong	result1, local01
222d8     0C 1E 86 F1 | 	sub	local01, #12
222dc     0F 19 02 FB | 	rdlong	arg04, local01
222e0     0C FB 81 F1 | 	sub	result1, arg04
222e4     08 1E 86 F1 | 	sub	local01, #8
222e8     0F 19 02 FB | 	rdlong	arg04, local01
222ec     1C 1E 86 F1 | 	sub	local01, #28
222f0     0C FB 11 F2 | 	cmp	result1, arg04 wc
222f4     48 00 90 3D |  if_ae	jmp	#LR__3461
222f8     02 1E 06 F1 | 	add	local01, #2
222fc     0F 19 C2 FA | 	rdbyte	arg04, local01
22300     02 1E 86 F1 | 	sub	local01, #2
22304     02 18 0E F2 | 	cmp	arg04, #2 wz
22308     34 00 90 5D |  if_ne	jmp	#LR__3461
2230c     01 1E 06 F1 | 	add	local01, #1
22310     0F 13 C2 FA | 	rdbyte	arg01, local01
22314     33 1E 06 F1 | 	add	local01, #51
22318     0F 15 02 F6 | 	mov	arg02, local01
2231c     04 1E 86 F1 | 	sub	local01, #4
22320     0F 17 02 FB | 	rdlong	arg03, local01
22324     14 1E 86 F1 | 	sub	local01, #20
22328     0F 1F 02 FB | 	rdlong	local01, local01
2232c     0F 17 02 F1 | 	add	arg03, local01
22330     01 18 06 F6 | 	mov	arg04, #1
22334     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
22338     04 00 90 FD | 	jmp	#LR__3461
2233c                 | LR__3460
2233c     01 20 06 F6 | 	mov	local02, #1
22340                 | LR__3461
22340                 | LR__3462
22340                 | ' 			res = FR_DISK_ERR;
22340                 | ' 		}
22340                 | ' 	}
22340                 | ' 	return res;
22340     10 FB 01 F6 | 	mov	result1, local02
22344     A7 F0 03 F6 | 	mov	ptra, fp
22348     B2 00 A0 FD | 	call	#popregs_
2234c                 | _fatfs_cc_sync_window_ret
2234c     2D 00 64 FD | 	ret
22350                 | 
22350                 | _fatfs_cc_move_window
22350     03 4A 05 F6 | 	mov	COUNT_, #3
22354     A8 00 A0 FD | 	call	#pushregs_
22358     09 1F 02 F6 | 	mov	local01, arg01
2235c     0A 21 02 F6 | 	mov	local02, arg02
22360     00 22 06 F6 | 	mov	local03, #0
22364     30 1E 06 F1 | 	add	local01, #48
22368     0F 19 02 FB | 	rdlong	arg04, local01
2236c     30 1E 86 F1 | 	sub	local01, #48
22370     0C 21 0A F2 | 	cmp	local02, arg04 wz
22374     40 00 90 AD |  if_e	jmp	#LR__3471
22378     0F 13 02 F6 | 	mov	arg01, local01
2237c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
22380     FD 22 0A F6 | 	mov	local03, result1 wz
22384     30 00 90 5D |  if_ne	jmp	#LR__3470
22388     01 1E 06 F1 | 	add	local01, #1
2238c     0F 13 C2 FA | 	rdbyte	arg01, local01
22390     33 1E 06 F1 | 	add	local01, #51
22394     0F 15 02 F6 | 	mov	arg02, local01
22398     10 17 02 F6 | 	mov	arg03, local02
2239c     01 18 06 F6 | 	mov	arg04, #1
223a0     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
223a4     00 FA 0D F2 | 	cmp	result1, #0 wz
223a8     01 20 66 56 |  if_ne	neg	local02, #1
223ac     01 22 06 56 |  if_ne	mov	local03, #1
223b0     04 1E 86 F1 | 	sub	local01, #4
223b4     0F 21 62 FC | 	wrlong	local02, local01
223b8                 | LR__3470
223b8                 | LR__3471
223b8                 | ' 				sect = (LBA_t)0 - 1;
223b8                 | ' 				res = FR_DISK_ERR;
223b8                 | ' 			}
223b8                 | ' 			fs->winsect = sect;
223b8                 | ' 		}
223b8                 | ' 	}
223b8                 | ' 	return res;
223b8     11 FB 01 F6 | 	mov	result1, local03
223bc     A7 F0 03 F6 | 	mov	ptra, fp
223c0     B2 00 A0 FD | 	call	#popregs_
223c4                 | _fatfs_cc_move_window_ret
223c4     2D 00 64 FD | 	ret
223c8                 | 
223c8                 | _fatfs_cc_sync_fs
223c8     02 4A 05 F6 | 	mov	COUNT_, #2
223cc     A8 00 A0 FD | 	call	#pushregs_
223d0     09 1F 02 F6 | 	mov	local01, arg01
223d4     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
223d8     FD 20 0A F6 | 	mov	local02, result1 wz
223dc     D8 00 90 5D |  if_ne	jmp	#LR__3481
223e0     0F 19 C2 FA | 	rdbyte	arg04, local01
223e4     03 18 0E F2 | 	cmp	arg04, #3 wz
223e8     04 1E 06 A1 |  if_e	add	local01, #4
223ec     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
223f0     04 1E 86 A1 |  if_e	sub	local01, #4
223f4     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
223f8     A0 00 90 5D |  if_ne	jmp	#LR__3480
223fc     34 1E 06 F1 | 	add	local01, #52
22400     0F 13 02 F6 | 	mov	arg01, local01
22404     00 14 06 F6 | 	mov	arg02, #0
22408     09 16 C6 F9 | 	decod	arg03, #9
2240c     98 00 A0 FD | 	call	#\builtin_bytefill_
22410     0F 13 02 F6 | 	mov	arg01, local01
22414     FE 13 06 F1 | 	add	arg01, #510
22418     55 00 80 FF 
2241c     09 AB 58 FC | 	wrword	##43605, arg01
22420     A9 B0 A0 FF 
22424     0F A5 68 FC | 	wrlong	##1096897106, local01
22428     0F 13 02 F6 | 	mov	arg01, local01
2242c     E4 13 06 F1 | 	add	arg01, #484
22430     B9 A0 B0 FF 
22434     09 E5 68 FC | 	wrlong	##1631679090, arg01
22438     0F 13 02 F6 | 	mov	arg01, local01
2243c     E8 13 06 F1 | 	add	arg01, #488
22440     20 1E 86 F1 | 	sub	local01, #32
22444     0F 15 02 FB | 	rdlong	arg02, local01
22448     09 15 62 FC | 	wrlong	arg02, arg01
2244c     20 1E 06 F1 | 	add	local01, #32
22450     0F 13 02 F6 | 	mov	arg01, local01
22454     EC 13 06 F1 | 	add	arg01, #492
22458     24 1E 86 F1 | 	sub	local01, #36
2245c     0F 15 02 FB | 	rdlong	arg02, local01
22460     09 15 62 FC | 	wrlong	arg02, arg01
22464     10 1E 06 F1 | 	add	local01, #16
22468     0F 17 02 FB | 	rdlong	arg03, local01
2246c     01 16 06 F1 | 	add	arg03, #1
22470     10 1E 06 F1 | 	add	local01, #16
22474     0F 17 62 FC | 	wrlong	arg03, local01
22478     2F 1E 86 F1 | 	sub	local01, #47
2247c     0F 13 C2 FA | 	rdbyte	arg01, local01
22480     33 1E 06 F1 | 	add	local01, #51
22484     0F 15 02 F6 | 	mov	arg02, local01
22488     01 18 06 F6 | 	mov	arg04, #1
2248c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
22490     30 1E 86 F1 | 	sub	local01, #48
22494     0F 01 48 FC | 	wrbyte	#0, local01
22498     04 1E 86 F1 | 	sub	local01, #4
2249c                 | LR__3480
2249c     01 1E 06 F1 | 	add	local01, #1
224a0     0F 13 C2 FA | 	rdbyte	arg01, local01
224a4     00 14 06 F6 | 	mov	arg02, #0
224a8     00 16 06 F6 | 	mov	arg03, #0
224ac     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
224b0     00 FA 0D F2 | 	cmp	result1, #0 wz
224b4     01 20 06 56 |  if_ne	mov	local02, #1
224b8                 | LR__3481
224b8                 | ' 	}
224b8                 | ' 
224b8                 | ' 	return res;
224b8     10 FB 01 F6 | 	mov	result1, local02
224bc     A7 F0 03 F6 | 	mov	ptra, fp
224c0     B2 00 A0 FD | 	call	#popregs_
224c4                 | _fatfs_cc_sync_fs_ret
224c4     2D 00 64 FD | 	ret
224c8                 | 
224c8                 | _fatfs_cc_clst2sect
224c8     02 14 86 F1 | 	sub	arg02, #2
224cc     18 12 06 F1 | 	add	arg01, #24
224d0     09 01 02 FB | 	rdlong	_var01, arg01
224d4     18 12 86 F1 | 	sub	arg01, #24
224d8     02 00 86 F1 | 	sub	_var01, #2
224dc     00 15 12 F2 | 	cmp	arg02, _var01 wc
224e0     00 FA 05 36 |  if_ae	mov	result1, #0
224e4     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
224e8     0A 12 06 F1 | 	add	arg01, #10
224ec     09 01 E2 FA | 	rdword	_var01, arg01
224f0     0A 01 02 FD | 	qmul	_var01, arg02
224f4                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
224f4     22 12 06 F1 | 	add	arg01, #34
224f8     09 FB 01 FB | 	rdlong	result1, arg01
224fc     18 00 62 FD | 	getqx	_var01
22500     00 FB 01 F1 | 	add	result1, _var01
22504                 | _fatfs_cc_clst2sect_ret
22504     2D 00 64 FD | 	ret
22508                 | 
22508                 | _fatfs_cc_get_fat
22508     07 4A 05 F6 | 	mov	COUNT_, #7
2250c     A8 00 A0 FD | 	call	#pushregs_
22510     0A 1F 02 F6 | 	mov	local01, arg02
22514     09 21 02 FB | 	rdlong	local02, arg01
22518     02 1E 16 F2 | 	cmp	local01, #2 wc
2251c     14 00 90 CD |  if_b	jmp	#LR__3490
22520     18 20 06 F1 | 	add	local02, #24
22524     10 23 02 FB | 	rdlong	local03, local02
22528     18 20 86 F1 | 	sub	local02, #24
2252c     11 1F 12 F2 | 	cmp	local01, local03 wc
22530     08 00 90 CD |  if_b	jmp	#LR__3491
22534                 | LR__3490
22534     01 24 06 F6 | 	mov	local04, #1
22538     60 01 90 FD | 	jmp	#LR__3498
2253c                 | LR__3491
2253c     01 24 66 F6 | 	neg	local04, #1
22540                 | ' 		val = 0xFFFFFFFF;
22540                 | ' 
22540                 | ' 		switch (fs->fs_type) {
22540     10 27 C2 FA | 	rdbyte	local05, local02
22544     01 26 86 F1 | 	sub	local05, #1
22548     03 26 26 F3 | 	fle	local05, #3
2254c     30 26 62 FD | 	jmprel	local05
22550                 | LR__3492
22550     0C 00 90 FD | 	jmp	#LR__3493
22554     B8 00 90 FD | 	jmp	#LR__3494
22558     F8 00 90 FD | 	jmp	#LR__3495
2255c     38 01 90 FD | 	jmp	#LR__3496
22560                 | LR__3493
22560     0F 27 02 F6 | 	mov	local05, local01
22564     0F 13 02 F6 | 	mov	arg01, local01
22568     01 12 46 F0 | 	shr	arg01, #1
2256c     09 27 02 F1 | 	add	local05, arg01
22570     10 13 02 F6 | 	mov	arg01, local02
22574     13 29 02 F6 | 	mov	local06, local05
22578     09 28 46 F0 | 	shr	local06, #9
2257c     24 20 06 F1 | 	add	local02, #36
22580     10 15 02 FB | 	rdlong	arg02, local02
22584     24 20 86 F1 | 	sub	local02, #36
22588     14 15 02 F1 | 	add	arg02, local06
2258c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
22590     00 FA 0D F2 | 	cmp	result1, #0 wz
22594     04 01 90 5D |  if_ne	jmp	#LR__3497
22598     13 29 02 F6 | 	mov	local06, local05
2259c     FF 29 06 F5 | 	and	local06, #511
225a0     34 20 06 F1 | 	add	local02, #52
225a4     10 29 02 F1 | 	add	local06, local02
225a8     14 2B C2 FA | 	rdbyte	local07, local06
225ac     34 20 86 F1 | 	sub	local02, #52
225b0     10 13 02 F6 | 	mov	arg01, local02
225b4     01 26 06 F1 | 	add	local05, #1
225b8     13 29 02 F6 | 	mov	local06, local05
225bc     09 28 46 F0 | 	shr	local06, #9
225c0     24 20 06 F1 | 	add	local02, #36
225c4     10 15 02 FB | 	rdlong	arg02, local02
225c8     24 20 86 F1 | 	sub	local02, #36
225cc     14 15 02 F1 | 	add	arg02, local06
225d0     7C FD BF FD | 	call	#_fatfs_cc_move_window
225d4     00 FA 0D F2 | 	cmp	result1, #0 wz
225d8     C0 00 90 5D |  if_ne	jmp	#LR__3497
225dc     FF 27 06 F5 | 	and	local05, #511
225e0     34 20 06 F1 | 	add	local02, #52
225e4     10 27 02 F1 | 	add	local05, local02
225e8     13 29 C2 FA | 	rdbyte	local06, local05
225ec     08 28 66 F0 | 	shl	local06, #8
225f0     14 2B 42 F5 | 	or	local07, local06
225f4     01 1E CE F7 | 	test	local01, #1 wz
225f8     04 2A 46 50 |  if_ne	shr	local07, #4
225fc     15 23 02 56 |  if_ne	mov	local03, local07
22600     0B 2A 46 A7 |  if_e	zerox	local07, #11
22604     15 23 02 A6 |  if_e	mov	local03, local07
22608     11 25 02 F6 | 	mov	local04, local03
2260c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2260c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2260c                 | ' 			break;
2260c     8C 00 90 FD | 	jmp	#LR__3497
22610                 | LR__3494
22610     10 13 02 F6 | 	mov	arg01, local02
22614     0F 29 02 F6 | 	mov	local06, local01
22618     08 28 46 F0 | 	shr	local06, #8
2261c     24 20 06 F1 | 	add	local02, #36
22620     10 15 02 FB | 	rdlong	arg02, local02
22624     24 20 86 F1 | 	sub	local02, #36
22628     14 15 02 F1 | 	add	arg02, local06
2262c     20 FD BF FD | 	call	#_fatfs_cc_move_window
22630     00 FA 0D F2 | 	cmp	result1, #0 wz
22634     64 00 90 5D |  if_ne	jmp	#LR__3497
22638     34 20 06 F1 | 	add	local02, #52
2263c     01 1E 66 F0 | 	shl	local01, #1
22640     FF 1F 06 F5 | 	and	local01, #511
22644     0F 21 02 F1 | 	add	local02, local01
22648                 | ' {
22648                 | ' 
22648                 | ' 	return *((WORD*)ptr);
22648     10 FB E1 FA | 	rdword	result1, local02
2264c     FD 24 32 F9 | 	getword	local04, result1, #0
22650                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
22650                 | ' 			break;
22650     48 00 90 FD | 	jmp	#LR__3497
22654                 | LR__3495
22654     10 13 02 F6 | 	mov	arg01, local02
22658     0F 29 02 F6 | 	mov	local06, local01
2265c     07 28 46 F0 | 	shr	local06, #7
22660     24 20 06 F1 | 	add	local02, #36
22664     10 15 02 FB | 	rdlong	arg02, local02
22668     24 20 86 F1 | 	sub	local02, #36
2266c     14 15 02 F1 | 	add	arg02, local06
22670     DC FC BF FD | 	call	#_fatfs_cc_move_window
22674     00 FA 0D F2 | 	cmp	result1, #0 wz
22678     20 00 90 5D |  if_ne	jmp	#LR__3497
2267c     34 20 06 F1 | 	add	local02, #52
22680     02 1E 66 F0 | 	shl	local01, #2
22684     FF 1F 06 F5 | 	and	local01, #511
22688     0F 21 02 F1 | 	add	local02, local01
2268c                 | ' {
2268c                 | ' 
2268c                 | ' 	return *((DWORD*)ptr);
2268c     10 25 02 FB | 	rdlong	local04, local02
22690     7C 24 06 F4 | 	bitl	local04, #124
22694                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
22694                 | ' 			break;
22694     04 00 90 FD | 	jmp	#LR__3497
22698                 | LR__3496
22698     01 24 06 F6 | 	mov	local04, #1
2269c                 | LR__3497
2269c                 | LR__3498
2269c                 | ' 			val = 1;
2269c                 | ' 		}
2269c                 | ' 	}
2269c                 | ' 
2269c                 | ' 	return val;
2269c     12 FB 01 F6 | 	mov	result1, local04
226a0     A7 F0 03 F6 | 	mov	ptra, fp
226a4     B2 00 A0 FD | 	call	#popregs_
226a8                 | _fatfs_cc_get_fat_ret
226a8     2D 00 64 FD | 	ret
226ac                 | 
226ac                 | _fatfs_cc_put_fat
226ac     08 4A 05 F6 | 	mov	COUNT_, #8
226b0     A8 00 A0 FD | 	call	#pushregs_
226b4     09 1F 02 F6 | 	mov	local01, arg01
226b8     0A 21 02 F6 | 	mov	local02, arg02
226bc     0B 23 02 F6 | 	mov	local03, arg03
226c0     02 24 06 F6 | 	mov	local04, #2
226c4     02 20 16 F2 | 	cmp	local02, #2 wc
226c8     E0 01 90 CD |  if_b	jmp	#LR__3507
226cc     18 1E 06 F1 | 	add	local01, #24
226d0     0F 27 02 FB | 	rdlong	local05, local01
226d4     18 1E 86 F1 | 	sub	local01, #24
226d8     13 21 12 F2 | 	cmp	local02, local05 wc
226dc     CC 01 90 3D |  if_ae	jmp	#LR__3507
226e0                 | ' 		switch (fs->fs_type) {
226e0     0F 29 C2 FA | 	rdbyte	local06, local01
226e4     01 28 86 F1 | 	sub	local06, #1
226e8     03 28 26 F3 | 	fle	local06, #3
226ec     30 28 62 FD | 	jmprel	local06
226f0                 | LR__3500
226f0     0C 00 90 FD | 	jmp	#LR__3501
226f4     F8 00 90 FD | 	jmp	#LR__3504
226f8     40 01 90 FD | 	jmp	#LR__3505
226fc     AC 01 90 FD | 	jmp	#LR__3506
22700                 | LR__3501
22700     10 2B 02 F6 | 	mov	local07, local02
22704     10 27 02 F6 | 	mov	local05, local02
22708     01 26 46 F0 | 	shr	local05, #1
2270c     13 2B 02 F1 | 	add	local07, local05
22710     0F 13 02 F6 | 	mov	arg01, local01
22714     15 29 02 F6 | 	mov	local06, local07
22718     09 28 46 F0 | 	shr	local06, #9
2271c     24 1E 06 F1 | 	add	local01, #36
22720     0F 15 02 FB | 	rdlong	arg02, local01
22724     24 1E 86 F1 | 	sub	local01, #36
22728     14 15 02 F1 | 	add	arg02, local06
2272c     20 FC BF FD | 	call	#_fatfs_cc_move_window
22730     FD 24 0A F6 | 	mov	local04, result1 wz
22734     74 01 90 5D |  if_ne	jmp	#LR__3506
22738     34 1E 06 F1 | 	add	local01, #52
2273c     0F 2D 02 F6 | 	mov	local08, local01
22740     15 27 02 F6 | 	mov	local05, local07
22744     FF 27 06 F5 | 	and	local05, #511
22748     13 2D 02 F1 | 	add	local08, local05
2274c     01 20 CE F7 | 	test	local02, #1 wz
22750     34 1E 86 F1 | 	sub	local01, #52
22754     01 2A 06 F1 | 	add	local07, #1
22758     18 00 90 AD |  if_e	jmp	#LR__3502
2275c     16 27 C2 FA | 	rdbyte	local05, local08
22760     13 27 42 F8 | 	getnib	local05, local05, #0
22764     11 29 E2 F8 | 	getbyte	local06, local03, #0
22768     04 28 66 F0 | 	shl	local06, #4
2276c     14 27 42 F5 | 	or	local05, local06
22770     04 00 90 FD | 	jmp	#LR__3503
22774                 | LR__3502
22774     11 27 02 F6 | 	mov	local05, local03
22778                 | LR__3503
22778     16 27 42 FC | 	wrbyte	local05, local08
2277c     03 1E 06 F1 | 	add	local01, #3
22780     0F 03 48 FC | 	wrbyte	#1, local01
22784     03 1E 86 F1 | 	sub	local01, #3
22788     0F 13 02 F6 | 	mov	arg01, local01
2278c     15 2D 02 F6 | 	mov	local08, local07
22790     09 2C 46 F0 | 	shr	local08, #9
22794     24 1E 06 F1 | 	add	local01, #36
22798     0F 15 02 FB | 	rdlong	arg02, local01
2279c     24 1E 86 F1 | 	sub	local01, #36
227a0     16 15 02 F1 | 	add	arg02, local08
227a4     A8 FB BF FD | 	call	#_fatfs_cc_move_window
227a8     FD 24 0A F6 | 	mov	local04, result1 wz
227ac     FC 00 90 5D |  if_ne	jmp	#LR__3506
227b0     34 1E 06 F1 | 	add	local01, #52
227b4     0F 2D 02 F6 | 	mov	local08, local01
227b8     FF 2B 06 F5 | 	and	local07, #511
227bc     15 2D 02 F1 | 	add	local08, local07
227c0     01 20 CE F7 | 	test	local02, #1 wz
227c4     04 22 46 50 |  if_ne	shr	local03, #4
227c8     11 27 02 56 |  if_ne	mov	local05, local03
227cc     16 27 C2 AA |  if_e	rdbyte	local05, local08
227d0     F0 26 06 A5 |  if_e	and	local05, #240
227d4     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
227d8     11 23 42 A8 |  if_e	getnib	local03, local03, #0
227dc     11 27 42 A5 |  if_e	or	local05, local03
227e0     16 27 42 FC | 	wrbyte	local05, local08
227e4     31 1E 86 F1 | 	sub	local01, #49
227e8     0F 03 48 FC | 	wrbyte	#1, local01
227ec                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
227ec                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
227ec                 | ' 			fs->wflag = 1;
227ec                 | ' 			break;
227ec     BC 00 90 FD | 	jmp	#LR__3506
227f0                 | LR__3504
227f0     0F 13 02 F6 | 	mov	arg01, local01
227f4     10 2D 02 F6 | 	mov	local08, local02
227f8     08 2C 46 F0 | 	shr	local08, #8
227fc     24 1E 06 F1 | 	add	local01, #36
22800     0F 15 02 FB | 	rdlong	arg02, local01
22804     24 1E 86 F1 | 	sub	local01, #36
22808     16 15 02 F1 | 	add	arg02, local08
2280c     40 FB BF FD | 	call	#_fatfs_cc_move_window
22810     FD 24 0A F6 | 	mov	local04, result1 wz
22814     94 00 90 5D |  if_ne	jmp	#LR__3506
22818     34 1E 06 F1 | 	add	local01, #52
2281c     0F 13 02 F6 | 	mov	arg01, local01
22820     01 20 66 F0 | 	shl	local02, #1
22824     FF 21 06 F5 | 	and	local02, #511
22828     10 13 02 F1 | 	add	arg01, local02
2282c     09 23 52 FC | 	wrword	local03, arg01
22830     31 1E 86 F1 | 	sub	local01, #49
22834     0F 03 48 FC | 	wrbyte	#1, local01
22838                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
22838                 | ' 			fs->wflag = 1;
22838                 | ' 			break;
22838     70 00 90 FD | 	jmp	#LR__3506
2283c                 | LR__3505
2283c     0F 13 02 F6 | 	mov	arg01, local01
22840     10 2D 02 F6 | 	mov	local08, local02
22844     07 2C 46 F0 | 	shr	local08, #7
22848     24 1E 06 F1 | 	add	local01, #36
2284c     0F 15 02 FB | 	rdlong	arg02, local01
22850     24 1E 86 F1 | 	sub	local01, #36
22854     16 15 02 F1 | 	add	arg02, local08
22858     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2285c     FD 24 0A F6 | 	mov	local04, result1 wz
22860     48 00 90 5D |  if_ne	jmp	#LR__3506
22864     7C 22 06 F4 | 	bitl	local03, #124
22868     34 1E 06 F1 | 	add	local01, #52
2286c     10 2D 02 F6 | 	mov	local08, local02
22870     02 2C 66 F0 | 	shl	local08, #2
22874     FF 2D 06 F5 | 	and	local08, #511
22878     0F 13 02 F6 | 	mov	arg01, local01
2287c     16 13 02 F1 | 	add	arg01, local08
22880                 | ' {
22880                 | ' 
22880                 | ' 	return *((DWORD*)ptr);
22880     09 2D 02 FB | 	rdlong	local08, arg01
22884     00 00 78 FF 
22888     00 2C 06 F5 | 	and	local08, ##-268435456
2288c     16 23 42 F5 | 	or	local03, local08
22890     0F 13 02 F6 | 	mov	arg01, local01
22894     02 20 66 F0 | 	shl	local02, #2
22898     FF 21 06 F5 | 	and	local02, #511
2289c     10 13 02 F1 | 	add	arg01, local02
228a0     09 23 62 FC | 	wrlong	local03, arg01
228a4     31 1E 86 F1 | 	sub	local01, #49
228a8     0F 03 48 FC | 	wrbyte	#1, local01
228ac                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
228ac                 | ' 			}
228ac                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
228ac                 | ' 			fs->wflag = 1;
228ac                 | ' 			break;
228ac                 | LR__3506
228ac                 | LR__3507
228ac                 | ' 		}
228ac                 | ' 	}
228ac                 | ' 	return res;
228ac     12 FB 01 F6 | 	mov	result1, local04
228b0     A7 F0 03 F6 | 	mov	ptra, fp
228b4     B2 00 A0 FD | 	call	#popregs_
228b8                 | _fatfs_cc_put_fat_ret
228b8     2D 00 64 FD | 	ret
228bc                 | 
228bc                 | _fatfs_cc_remove_chain
228bc     05 4A 05 F6 | 	mov	COUNT_, #5
228c0     A8 00 A0 FD | 	call	#pushregs_
228c4     09 1F 02 F6 | 	mov	local01, arg01
228c8     0A 21 02 F6 | 	mov	local02, arg02
228cc     0B 23 02 F6 | 	mov	local03, arg03
228d0     0F 25 02 FB | 	rdlong	local04, local01
228d4     02 20 16 F2 | 	cmp	local02, #2 wc
228d8     14 00 90 CD |  if_b	jmp	#LR__3510
228dc     18 24 06 F1 | 	add	local04, #24
228e0     12 FB 01 FB | 	rdlong	result1, local04
228e4     18 24 86 F1 | 	sub	local04, #24
228e8     FD 20 12 F2 | 	cmp	local02, result1 wc
228ec     08 00 90 CD |  if_b	jmp	#LR__3511
228f0                 | LR__3510
228f0     02 FA 05 F6 | 	mov	result1, #2
228f4     CC 00 90 FD | 	jmp	#LR__3516
228f8                 | LR__3511
228f8     00 22 0E F2 | 	cmp	local03, #0 wz
228fc     18 00 90 AD |  if_e	jmp	#LR__3512
22900     11 15 02 F6 | 	mov	arg02, local03
22904     12 13 02 F6 | 	mov	arg01, local04
22908     01 16 66 F6 | 	neg	arg03, #1
2290c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
22910     00 FA 0D F2 | 	cmp	result1, #0 wz
22914     AC 00 90 5D |  if_ne	jmp	#LR__3516
22918                 | LR__3512
22918                 | ' 	}
22918                 | ' 
22918                 | ' 
22918                 | ' 	do {
22918                 | LR__3513
22918     10 15 02 F6 | 	mov	arg02, local02
2291c     0F 13 02 F6 | 	mov	arg01, local01
22920     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
22924     FD 26 0A F6 | 	mov	local05, result1 wz
22928     94 00 90 AD |  if_e	jmp	#LR__3515
2292c     01 26 0E F2 | 	cmp	local05, #1 wz
22930     02 FA 05 A6 |  if_e	mov	result1, #2
22934     8C 00 90 AD |  if_e	jmp	#LR__3516
22938     FF FF 7F FF 
2293c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
22940     01 FA 05 A6 |  if_e	mov	result1, #1
22944     7C 00 90 AD |  if_e	jmp	#LR__3516
22948     10 15 02 F6 | 	mov	arg02, local02
2294c     12 13 02 F6 | 	mov	arg01, local04
22950     00 16 06 F6 | 	mov	arg03, #0
22954     54 FD BF FD | 	call	#_fatfs_cc_put_fat
22958     FD 22 0A F6 | 	mov	local03, result1 wz
2295c     11 FB 01 56 |  if_ne	mov	result1, local03
22960     60 00 90 5D |  if_ne	jmp	#LR__3516
22964     18 24 06 F1 | 	add	local04, #24
22968     12 23 02 FB | 	rdlong	local03, local04
2296c     02 22 86 F1 | 	sub	local03, #2
22970     04 24 86 F1 | 	sub	local04, #4
22974     12 21 02 FB | 	rdlong	local02, local04
22978     14 24 86 F1 | 	sub	local04, #20
2297c     11 21 12 F2 | 	cmp	local02, local03 wc
22980     24 00 90 3D |  if_ae	jmp	#LR__3514
22984     14 24 06 F1 | 	add	local04, #20
22988     12 23 02 FB | 	rdlong	local03, local04
2298c     01 22 06 F1 | 	add	local03, #1
22990     12 23 62 FC | 	wrlong	local03, local04
22994     10 24 86 F1 | 	sub	local04, #16
22998     12 23 C2 FA | 	rdbyte	local03, local04
2299c     01 22 46 F5 | 	or	local03, #1
229a0     12 23 42 FC | 	wrbyte	local03, local04
229a4     04 24 86 F1 | 	sub	local04, #4
229a8                 | LR__3514
229a8     13 21 02 F6 | 	mov	local02, local05
229ac     18 24 06 F1 | 	add	local04, #24
229b0     12 27 02 FB | 	rdlong	local05, local04
229b4     18 24 86 F1 | 	sub	local04, #24
229b8     13 21 12 F2 | 	cmp	local02, local05 wc
229bc     58 FF 9F CD |  if_b	jmp	#LR__3513
229c0                 | LR__3515
229c0                 | ' #line 1500 "ff.c"
229c0                 | ' 	return FR_OK;
229c0     00 FA 05 F6 | 	mov	result1, #0
229c4                 | LR__3516
229c4     A7 F0 03 F6 | 	mov	ptra, fp
229c8     B2 00 A0 FD | 	call	#popregs_
229cc                 | _fatfs_cc_remove_chain_ret
229cc     2D 00 64 FD | 	ret
229d0                 | 
229d0                 | _fatfs_cc_create_chain
229d0     09 4A 05 F6 | 	mov	COUNT_, #9
229d4     A8 00 A0 FD | 	call	#pushregs_
229d8     09 1F 02 F6 | 	mov	local01, arg01
229dc     0A 21 0A F6 | 	mov	local02, arg02 wz
229e0     0F 23 02 FB | 	rdlong	local03, local01
229e4     28 00 90 5D |  if_ne	jmp	#LR__3520
229e8     10 22 06 F1 | 	add	local03, #16
229ec     11 25 0A FB | 	rdlong	local04, local03 wz
229f0     10 22 86 F1 | 	sub	local03, #16
229f4     18 22 06 51 |  if_ne	add	local03, #24
229f8     11 27 02 5B |  if_ne	rdlong	local05, local03
229fc     18 22 86 51 |  if_ne	sub	local03, #24
22a00     13 25 12 52 |  if_ne	cmp	local04, local05 wc
22a04     50 00 90 4D |  if_c_and_nz	jmp	#LR__3521
22a08     01 24 06 F6 | 	mov	local04, #1
22a0c     48 00 90 FD | 	jmp	#LR__3521
22a10                 | LR__3520
22a10     10 15 02 F6 | 	mov	arg02, local02
22a14     0F 13 02 F6 | 	mov	arg01, local01
22a18     EC FA BF FD | 	call	#_fatfs_cc_get_fat
22a1c     FD 24 02 F6 | 	mov	local04, result1
22a20     02 24 16 F2 | 	cmp	local04, #2 wc
22a24     01 FA 05 C6 |  if_b	mov	result1, #1
22a28     BC 01 90 CD |  if_b	jmp	#LR__3531
22a2c     FF FF 7F FF 
22a30     FF 25 0E F2 | 	cmp	local04, ##-1 wz
22a34     12 FB 01 A6 |  if_e	mov	result1, local04
22a38     AC 01 90 AD |  if_e	jmp	#LR__3531
22a3c     18 22 06 F1 | 	add	local03, #24
22a40     11 27 02 FB | 	rdlong	local05, local03
22a44     18 22 86 F1 | 	sub	local03, #24
22a48     13 25 12 F2 | 	cmp	local04, local05 wc
22a4c     12 FB 01 C6 |  if_b	mov	result1, local04
22a50     94 01 90 CD |  if_b	jmp	#LR__3531
22a54     10 25 02 F6 | 	mov	local04, local02
22a58                 | LR__3521
22a58     14 22 06 F1 | 	add	local03, #20
22a5c     11 27 0A FB | 	rdlong	local05, local03 wz
22a60     14 22 86 F1 | 	sub	local03, #20
22a64     00 FA 05 A6 |  if_e	mov	result1, #0
22a68     7C 01 90 AD |  if_e	jmp	#LR__3531
22a6c     00 28 06 F6 | 	mov	local06, #0
22a70     10 25 0A F2 | 	cmp	local04, local02 wz
22a74     74 00 90 5D |  if_ne	jmp	#LR__3524
22a78     12 29 02 F6 | 	mov	local06, local04
22a7c     01 28 06 F1 | 	add	local06, #1
22a80     18 22 06 F1 | 	add	local03, #24
22a84     11 27 02 FB | 	rdlong	local05, local03
22a88     18 22 86 F1 | 	sub	local03, #24
22a8c     13 29 12 F2 | 	cmp	local06, local05 wc
22a90     02 28 06 36 |  if_ae	mov	local06, #2
22a94     14 15 02 F6 | 	mov	arg02, local06
22a98     0F 13 02 F6 | 	mov	arg01, local01
22a9c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
22aa0     FD 26 02 F6 | 	mov	local05, result1
22aa4     01 26 0E F2 | 	cmp	local05, #1 wz
22aa8     FF FF 7F 5F 
22aac     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
22ab0     13 FB 01 A6 |  if_e	mov	result1, local05
22ab4     30 01 90 AD |  if_e	jmp	#LR__3531
22ab8     00 26 0E F2 | 	cmp	local05, #0 wz
22abc     2C 00 90 AD |  if_e	jmp	#LR__3523
22ac0     10 22 06 F1 | 	add	local03, #16
22ac4     11 2B 02 FB | 	rdlong	local07, local03
22ac8     10 22 86 F1 | 	sub	local03, #16
22acc     02 2A 16 F2 | 	cmp	local07, #2 wc
22ad0     14 00 90 CD |  if_b	jmp	#LR__3522
22ad4     18 22 06 F1 | 	add	local03, #24
22ad8     11 27 02 FB | 	rdlong	local05, local03
22adc     18 22 86 F1 | 	sub	local03, #24
22ae0     13 2B 12 F2 | 	cmp	local07, local05 wc
22ae4     15 25 02 C6 |  if_b	mov	local04, local07
22ae8                 | LR__3522
22ae8     00 28 06 F6 | 	mov	local06, #0
22aec                 | LR__3523
22aec                 | LR__3524
22aec     00 28 0E F2 | 	cmp	local06, #0 wz
22af0     60 00 90 5D |  if_ne	jmp	#LR__3527
22af4     12 29 02 F6 | 	mov	local06, local04
22af8                 | ' 			ncl = scl;
22af8                 | ' 			for (;;) {
22af8                 | LR__3525
22af8     01 28 06 F1 | 	add	local06, #1
22afc     18 22 06 F1 | 	add	local03, #24
22b00     11 27 02 FB | 	rdlong	local05, local03
22b04     18 22 86 F1 | 	sub	local03, #24
22b08     13 29 12 F2 | 	cmp	local06, local05 wc
22b0c     02 28 06 36 |  if_ae	mov	local06, #2
22b10     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
22b14     00 FA 05 16 |  if_a	mov	result1, #0
22b18     CC 00 90 1D |  if_a	jmp	#LR__3531
22b1c     14 15 02 F6 | 	mov	arg02, local06
22b20     0F 13 02 F6 | 	mov	arg01, local01
22b24     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
22b28     FD 2A 0A F6 | 	mov	local07, result1 wz
22b2c     24 00 90 AD |  if_e	jmp	#LR__3526
22b30     01 2A 0E F2 | 	cmp	local07, #1 wz
22b34     FF FF 7F 5F 
22b38     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
22b3c     15 FB 01 A6 |  if_e	mov	result1, local07
22b40     A4 00 90 AD |  if_e	jmp	#LR__3531
22b44     12 29 0A F2 | 	cmp	local06, local04 wz
22b48     00 FA 05 A6 |  if_e	mov	result1, #0
22b4c     98 00 90 AD |  if_e	jmp	#LR__3531
22b50     A4 FF 9F FD | 	jmp	#LR__3525
22b54                 | LR__3526
22b54                 | LR__3527
22b54     11 13 02 F6 | 	mov	arg01, local03
22b58     14 15 02 F6 | 	mov	arg02, local06
22b5c     01 16 66 F6 | 	neg	arg03, #1
22b60     48 FB BF FD | 	call	#_fatfs_cc_put_fat
22b64     FD 2C 0A F6 | 	mov	local08, result1 wz
22b68     1C 00 90 5D |  if_ne	jmp	#LR__3528
22b6c     00 20 0E F2 | 	cmp	local02, #0 wz
22b70     14 00 90 AD |  if_e	jmp	#LR__3528
22b74     11 13 02 F6 | 	mov	arg01, local03
22b78     10 15 02 F6 | 	mov	arg02, local02
22b7c     14 17 02 F6 | 	mov	arg03, local06
22b80     28 FB BF FD | 	call	#_fatfs_cc_put_fat
22b84     FD 2C 02 F6 | 	mov	local08, result1
22b88                 | LR__3528
22b88     00 2C 0E F2 | 	cmp	local08, #0 wz
22b8c     4C 00 90 5D |  if_ne	jmp	#LR__3529
22b90     10 22 06 F1 | 	add	local03, #16
22b94     11 29 62 FC | 	wrlong	local06, local03
22b98     08 22 06 F1 | 	add	local03, #8
22b9c     11 27 02 FB | 	rdlong	local05, local03
22ba0     02 26 86 F1 | 	sub	local05, #2
22ba4     04 22 86 F1 | 	sub	local03, #4
22ba8     11 2F 02 FB | 	rdlong	local09, local03
22bac     14 22 86 F1 | 	sub	local03, #20
22bb0     13 2F 1A F2 | 	cmp	local09, local05 wcz
22bb4     14 22 06 E1 |  if_be	add	local03, #20
22bb8     11 2F 02 EB |  if_be	rdlong	local09, local03
22bbc     01 2E 86 E1 |  if_be	sub	local09, #1
22bc0     11 2F 62 EC |  if_be	wrlong	local09, local03
22bc4     14 22 86 E1 |  if_be	sub	local03, #20
22bc8     04 22 06 F1 | 	add	local03, #4
22bcc     11 27 C2 FA | 	rdbyte	local05, local03
22bd0     01 26 46 F5 | 	or	local05, #1
22bd4     11 27 42 FC | 	wrbyte	local05, local03
22bd8     08 00 90 FD | 	jmp	#LR__3530
22bdc                 | LR__3529
22bdc     01 2C 0E F2 | 	cmp	local08, #1 wz
22be0     01 28 C6 F6 | 	negz	local06, #1
22be4                 | LR__3530
22be4                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
22be4                 | ' 	}
22be4                 | ' 
22be4                 | ' 	return ncl;
22be4     14 FB 01 F6 | 	mov	result1, local06
22be8                 | LR__3531
22be8     A7 F0 03 F6 | 	mov	ptra, fp
22bec     B2 00 A0 FD | 	call	#popregs_
22bf0                 | _fatfs_cc_create_chain_ret
22bf0     2D 00 64 FD | 	ret
22bf4                 | 
22bf4                 | _fatfs_cc_dir_clear
22bf4     06 4A 05 F6 | 	mov	COUNT_, #6
22bf8     A8 00 A0 FD | 	call	#pushregs_
22bfc     09 1F 02 F6 | 	mov	local01, arg01
22c00     0A 21 02 F6 | 	mov	local02, arg02
22c04     0F 13 02 F6 | 	mov	arg01, local01
22c08     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
22c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
22c10     01 FA 05 56 |  if_ne	mov	result1, #1
22c14     90 00 90 5D |  if_ne	jmp	#LR__3542
22c18     0F 13 02 F6 | 	mov	arg01, local01
22c1c     10 15 02 F6 | 	mov	arg02, local02
22c20     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
22c24     FD 22 02 F6 | 	mov	local03, result1
22c28     30 1E 06 F1 | 	add	local01, #48
22c2c     0F 23 62 FC | 	wrlong	local03, local01
22c30     04 1E 06 F1 | 	add	local01, #4
22c34     0F 13 02 F6 | 	mov	arg01, local01
22c38     00 14 06 F6 | 	mov	arg02, #0
22c3c     09 16 C6 F9 | 	decod	arg03, #9
22c40     98 00 A0 FD | 	call	#\builtin_bytefill_
22c44     0F 25 02 F6 | 	mov	local04, local01
22c48                 | ' #line 1667 "ff.c"
22c48                 | ' 	{
22c48                 | ' 		ibuf = fs->win; szb = 1;
22c48                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
22c48     00 26 06 F6 | 	mov	local05, #0
22c4c     34 1E 86 F1 | 	sub	local01, #52
22c50                 | LR__3540
22c50     0A 1E 06 F1 | 	add	local01, #10
22c54     0F 29 E2 FA | 	rdword	local06, local01
22c58     0A 1E 86 F1 | 	sub	local01, #10
22c5c     14 27 12 F2 | 	cmp	local05, local06 wc
22c60     2C 00 90 3D |  if_ae	jmp	#LR__3541
22c64     01 1E 06 F1 | 	add	local01, #1
22c68     0F 13 C2 FA | 	rdbyte	arg01, local01
22c6c     01 1E 86 F1 | 	sub	local01, #1
22c70     12 15 02 F6 | 	mov	arg02, local04
22c74     11 17 02 F6 | 	mov	arg03, local03
22c78     13 17 02 F1 | 	add	arg03, local05
22c7c     01 18 06 F6 | 	mov	arg04, #1
22c80     9C EF BF FD | 	call	#_fatfs_cc_disk_write
22c84     00 FA 0D F2 | 	cmp	result1, #0 wz
22c88     01 26 06 A1 |  if_e	add	local05, #1
22c8c     C0 FF 9F AD |  if_e	jmp	#LR__3540
22c90                 | LR__3541
22c90                 | ' 	}
22c90                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
22c90     0A 1E 06 F1 | 	add	local01, #10
22c94     0F 25 E2 FA | 	rdword	local04, local01
22c98     12 27 0A F2 | 	cmp	local05, local04 wz
22c9c     00 28 06 A6 |  if_e	mov	local06, #0
22ca0     01 28 06 56 |  if_ne	mov	local06, #1
22ca4     14 FB 01 F6 | 	mov	result1, local06
22ca8                 | LR__3542
22ca8     A7 F0 03 F6 | 	mov	ptra, fp
22cac     B2 00 A0 FD | 	call	#popregs_
22cb0                 | _fatfs_cc_dir_clear_ret
22cb0     2D 00 64 FD | 	ret
22cb4                 | 
22cb4                 | _fatfs_cc_dir_sdi
22cb4     06 4A 05 F6 | 	mov	COUNT_, #6
22cb8     A8 00 A0 FD | 	call	#pushregs_
22cbc     09 1F 02 F6 | 	mov	local01, arg01
22cc0     0A 21 02 F6 | 	mov	local02, arg02
22cc4     0F 23 02 FB | 	rdlong	local03, local01
22cc8     00 10 00 FF 
22ccc     00 20 16 F2 | 	cmp	local02, ##2097152 wc
22cd0     1F 20 CE C7 |  if_b	test	local02, #31 wz
22cd4                 | ' 		return FR_INT_ERR;
22cd4     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
22cd8     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3556
22cdc     10 1E 06 F1 | 	add	local01, #16
22ce0     0F 21 62 FC | 	wrlong	local02, local01
22ce4     08 1E 86 F1 | 	sub	local01, #8
22ce8     0F 25 0A FB | 	rdlong	local04, local01 wz
22cec     08 1E 86 F1 | 	sub	local01, #8
22cf0     11 27 C2 AA |  if_e	rdbyte	local05, local03
22cf4     03 26 16 A2 |  if_e	cmp	local05, #3 wc
22cf8     28 22 06 21 |  if_nc_and_z	add	local03, #40
22cfc     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
22d00     28 22 86 21 |  if_nc_and_z	sub	local03, #40
22d04     00 24 0E F2 | 	cmp	local04, #0 wz
22d08     3C 00 90 5D |  if_ne	jmp	#LR__3550
22d0c     10 27 02 F6 | 	mov	local05, local02
22d10     05 26 46 F0 | 	shr	local05, #5
22d14     08 22 06 F1 | 	add	local03, #8
22d18     11 15 E2 FA | 	rdword	arg02, local03
22d1c     08 22 86 F1 | 	sub	local03, #8
22d20     0A 27 12 F2 | 	cmp	local05, arg02 wc
22d24     02 FA 05 36 |  if_ae	mov	result1, #2
22d28     E4 00 90 3D |  if_ae	jmp	#LR__3556
22d2c     28 22 06 F1 | 	add	local03, #40
22d30     11 27 02 FB | 	rdlong	local05, local03
22d34     28 22 86 F1 | 	sub	local03, #40
22d38     18 1E 06 F1 | 	add	local01, #24
22d3c     0F 27 62 FC | 	wrlong	local05, local01
22d40     18 1E 86 F1 | 	sub	local01, #24
22d44     7C 00 90 FD | 	jmp	#LR__3555
22d48                 | LR__3550
22d48     0A 22 06 F1 | 	add	local03, #10
22d4c     11 29 E2 FA | 	rdword	local06, local03
22d50     0A 22 86 F1 | 	sub	local03, #10
22d54     09 28 66 F0 | 	shl	local06, #9
22d58                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
22d58                 | ' 		while (ofs >= csz) {
22d58                 | LR__3551
22d58     14 21 12 F2 | 	cmp	local02, local06 wc
22d5c     4C 00 90 CD |  if_b	jmp	#LR__3554
22d60     0F 13 02 F6 | 	mov	arg01, local01
22d64     12 15 02 F6 | 	mov	arg02, local04
22d68     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
22d6c     FD 24 02 F6 | 	mov	local04, result1
22d70     FF FF 7F FF 
22d74     FF 25 0E F2 | 	cmp	local04, ##-1 wz
22d78     01 FA 05 A6 |  if_e	mov	result1, #1
22d7c     90 00 90 AD |  if_e	jmp	#LR__3556
22d80     02 24 16 F2 | 	cmp	local04, #2 wc
22d84     14 00 90 CD |  if_b	jmp	#LR__3552
22d88     18 22 06 F1 | 	add	local03, #24
22d8c     11 27 02 FB | 	rdlong	local05, local03
22d90     18 22 86 F1 | 	sub	local03, #24
22d94     13 25 12 F2 | 	cmp	local04, local05 wc
22d98     08 00 90 CD |  if_b	jmp	#LR__3553
22d9c                 | LR__3552
22d9c     02 FA 05 F6 | 	mov	result1, #2
22da0     6C 00 90 FD | 	jmp	#LR__3556
22da4                 | LR__3553
22da4     14 21 82 F1 | 	sub	local02, local06
22da8     AC FF 9F FD | 	jmp	#LR__3551
22dac                 | LR__3554
22dac     11 13 02 F6 | 	mov	arg01, local03
22db0     12 15 02 F6 | 	mov	arg02, local04
22db4     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
22db8     18 1E 06 F1 | 	add	local01, #24
22dbc     0F FB 61 FC | 	wrlong	result1, local01
22dc0     18 1E 86 F1 | 	sub	local01, #24
22dc4                 | LR__3555
22dc4     14 1E 06 F1 | 	add	local01, #20
22dc8     0F 25 62 FC | 	wrlong	local04, local01
22dcc     04 1E 06 F1 | 	add	local01, #4
22dd0     0F 27 0A FB | 	rdlong	local05, local01 wz
22dd4     18 1E 86 F1 | 	sub	local01, #24
22dd8     02 FA 05 A6 |  if_e	mov	result1, #2
22ddc     30 00 90 AD |  if_e	jmp	#LR__3556
22de0     10 29 02 F6 | 	mov	local06, local02
22de4     09 28 46 F0 | 	shr	local06, #9
22de8     18 1E 06 F1 | 	add	local01, #24
22dec     0F 27 02 FB | 	rdlong	local05, local01
22df0     14 27 02 F1 | 	add	local05, local06
22df4     0F 27 62 FC | 	wrlong	local05, local01
22df8     34 22 06 F1 | 	add	local03, #52
22dfc     FF 21 06 F5 | 	and	local02, #511
22e00     10 23 02 F1 | 	add	local03, local02
22e04     04 1E 06 F1 | 	add	local01, #4
22e08     0F 23 62 FC | 	wrlong	local03, local01
22e0c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
22e0c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
22e0c                 | ' 
22e0c                 | ' 	return FR_OK;
22e0c     00 FA 05 F6 | 	mov	result1, #0
22e10                 | LR__3556
22e10     A7 F0 03 F6 | 	mov	ptra, fp
22e14     B2 00 A0 FD | 	call	#popregs_
22e18                 | _fatfs_cc_dir_sdi_ret
22e18     2D 00 64 FD | 	ret
22e1c                 | 
22e1c                 | _fatfs_cc_dir_next
22e1c     05 4A 05 F6 | 	mov	COUNT_, #5
22e20     A8 00 A0 FD | 	call	#pushregs_
22e24     09 1F 02 F6 | 	mov	local01, arg01
22e28     0A 21 02 F6 | 	mov	local02, arg02
22e2c     0F 23 02 FB | 	rdlong	local03, local01
22e30     10 1E 06 F1 | 	add	local01, #16
22e34     0F 25 02 FB | 	rdlong	local04, local01
22e38     10 1E 86 F1 | 	sub	local01, #16
22e3c     20 24 06 F1 | 	add	local04, #32
22e40     00 10 00 FF 
22e44     00 24 16 F2 | 	cmp	local04, ##2097152 wc
22e48     18 1E 06 31 |  if_ae	add	local01, #24
22e4c     0F 01 68 3C |  if_ae	wrlong	#0, local01
22e50     18 1E 86 31 |  if_ae	sub	local01, #24
22e54     18 1E 06 F1 | 	add	local01, #24
22e58     0F 15 0A FB | 	rdlong	arg02, local01 wz
22e5c     18 1E 86 F1 | 	sub	local01, #24
22e60     04 FA 05 A6 |  if_e	mov	result1, #4
22e64     64 01 90 AD |  if_e	jmp	#LR__3565
22e68     FF 25 CE F7 | 	test	local04, #511 wz
22e6c     3C 01 90 5D |  if_ne	jmp	#LR__3564
22e70     18 1E 06 F1 | 	add	local01, #24
22e74     0F 15 02 FB | 	rdlong	arg02, local01
22e78     01 14 06 F1 | 	add	arg02, #1
22e7c     0F 15 62 FC | 	wrlong	arg02, local01
22e80     04 1E 86 F1 | 	sub	local01, #4
22e84     0F 15 0A FB | 	rdlong	arg02, local01 wz
22e88     14 1E 86 F1 | 	sub	local01, #20
22e8c     2C 00 90 5D |  if_ne	jmp	#LR__3560
22e90     12 15 02 F6 | 	mov	arg02, local04
22e94     05 14 46 F0 | 	shr	arg02, #5
22e98     08 22 06 F1 | 	add	local03, #8
22e9c     11 21 E2 FA | 	rdword	local02, local03
22ea0     08 22 86 F1 | 	sub	local03, #8
22ea4     10 15 12 F2 | 	cmp	arg02, local02 wc
22ea8     18 1E 06 31 |  if_ae	add	local01, #24
22eac     0F 01 68 3C |  if_ae	wrlong	#0, local01
22eb0                 | ' 				dp->sect = 0; return FR_NO_FILE;
22eb0     04 FA 05 36 |  if_ae	mov	result1, #4
22eb4     14 01 90 3D |  if_ae	jmp	#LR__3565
22eb8     F0 00 90 FD | 	jmp	#LR__3563
22ebc                 | LR__3560
22ebc     12 13 02 F6 | 	mov	arg01, local04
22ec0     09 12 46 F0 | 	shr	arg01, #9
22ec4     0A 22 06 F1 | 	add	local03, #10
22ec8     11 15 E2 FA | 	rdword	arg02, local03
22ecc     0A 22 86 F1 | 	sub	local03, #10
22ed0     01 14 86 F1 | 	sub	arg02, #1
22ed4     0A 13 CA F7 | 	test	arg01, arg02 wz
22ed8     D0 00 90 5D |  if_ne	jmp	#LR__3562
22edc     0F 13 02 F6 | 	mov	arg01, local01
22ee0     14 1E 06 F1 | 	add	local01, #20
22ee4     0F 15 02 FB | 	rdlong	arg02, local01
22ee8     14 1E 86 F1 | 	sub	local01, #20
22eec     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
22ef0     FD 26 02 F6 | 	mov	local05, result1
22ef4     02 26 16 F2 | 	cmp	local05, #2 wc
22ef8     02 FA 05 C6 |  if_b	mov	result1, #2
22efc     CC 00 90 CD |  if_b	jmp	#LR__3565
22f00     FF FF 7F FF 
22f04     FF 27 0E F2 | 	cmp	local05, ##-1 wz
22f08     01 FA 05 A6 |  if_e	mov	result1, #1
22f0c     BC 00 90 AD |  if_e	jmp	#LR__3565
22f10     18 22 06 F1 | 	add	local03, #24
22f14     11 15 02 FB | 	rdlong	arg02, local03
22f18     18 22 86 F1 | 	sub	local03, #24
22f1c     0A 27 12 F2 | 	cmp	local05, arg02 wc
22f20     68 00 90 CD |  if_b	jmp	#LR__3561
22f24     00 20 0E F2 | 	cmp	local02, #0 wz
22f28     18 1E 06 A1 |  if_e	add	local01, #24
22f2c     0F 01 68 AC |  if_e	wrlong	#0, local01
22f30                 | ' 						dp->sect = 0; return FR_NO_FILE;
22f30     04 FA 05 A6 |  if_e	mov	result1, #4
22f34     94 00 90 AD |  if_e	jmp	#LR__3565
22f38     0F 13 02 F6 | 	mov	arg01, local01
22f3c     14 1E 06 F1 | 	add	local01, #20
22f40     0F 15 02 FB | 	rdlong	arg02, local01
22f44     14 1E 86 F1 | 	sub	local01, #20
22f48     84 FA BF FD | 	call	#_fatfs_cc_create_chain
22f4c     FD 26 0A F6 | 	mov	local05, result1 wz
22f50     07 FA 05 A6 |  if_e	mov	result1, #7
22f54     74 00 90 AD |  if_e	jmp	#LR__3565
22f58     01 26 0E F2 | 	cmp	local05, #1 wz
22f5c     02 FA 05 A6 |  if_e	mov	result1, #2
22f60     68 00 90 AD |  if_e	jmp	#LR__3565
22f64     FF FF 7F FF 
22f68     FF 27 0E F2 | 	cmp	local05, ##-1 wz
22f6c     01 FA 05 A6 |  if_e	mov	result1, #1
22f70     58 00 90 AD |  if_e	jmp	#LR__3565
22f74     13 15 02 F6 | 	mov	arg02, local05
22f78     11 13 02 F6 | 	mov	arg01, local03
22f7c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
22f80     00 FA 0D F2 | 	cmp	result1, #0 wz
22f84     01 FA 05 56 |  if_ne	mov	result1, #1
22f88     40 00 90 5D |  if_ne	jmp	#LR__3565
22f8c                 | LR__3561
22f8c     14 1E 06 F1 | 	add	local01, #20
22f90     0F 27 62 FC | 	wrlong	local05, local01
22f94     11 13 02 F6 | 	mov	arg01, local03
22f98     13 15 02 F6 | 	mov	arg02, local05
22f9c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
22fa0     04 1E 06 F1 | 	add	local01, #4
22fa4     0F FB 61 FC | 	wrlong	result1, local01
22fa8     18 1E 86 F1 | 	sub	local01, #24
22fac                 | LR__3562
22fac                 | LR__3563
22fac                 | LR__3564
22fac     10 1E 06 F1 | 	add	local01, #16
22fb0     0F 25 62 FC | 	wrlong	local04, local01
22fb4     34 22 06 F1 | 	add	local03, #52
22fb8     FF 25 06 F5 | 	and	local04, #511
22fbc     12 23 02 F1 | 	add	local03, local04
22fc0     0C 1E 06 F1 | 	add	local01, #12
22fc4     0F 23 62 FC | 	wrlong	local03, local01
22fc8                 | ' #line 1771 "ff.c"
22fc8                 | ' 				}
22fc8                 | ' 				dp->clust = clst;
22fc8                 | ' 				dp->sect = clst2sect(fs, clst);
22fc8                 | ' 			}
22fc8                 | ' 		}
22fc8                 | ' 	}
22fc8                 | ' 	dp->dptr = ofs;
22fc8                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
22fc8                 | ' 
22fc8                 | ' 	return FR_OK;
22fc8     00 FA 05 F6 | 	mov	result1, #0
22fcc                 | LR__3565
22fcc     A7 F0 03 F6 | 	mov	ptra, fp
22fd0     B2 00 A0 FD | 	call	#popregs_
22fd4                 | _fatfs_cc_dir_next_ret
22fd4     2D 00 64 FD | 	ret
22fd8                 | 
22fd8                 | _fatfs_cc_dir_alloc
22fd8     08 4A 05 F6 | 	mov	COUNT_, #8
22fdc     A8 00 A0 FD | 	call	#pushregs_
22fe0     09 1F 02 F6 | 	mov	local01, arg01
22fe4     0A 21 02 F6 | 	mov	local02, arg02
22fe8     0F 23 02 FB | 	rdlong	local03, local01
22fec     0F 13 02 F6 | 	mov	arg01, local01
22ff0     00 14 06 F6 | 	mov	arg02, #0
22ff4     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
22ff8     FD 24 0A F6 | 	mov	local04, result1 wz
22ffc     70 00 90 5D |  if_ne	jmp	#LR__3574
23000     00 26 06 F6 | 	mov	local05, #0
23004                 | ' 		n = 0;
23004                 | ' 		do {
23004                 | LR__3570
23004     18 1E 06 F1 | 	add	local01, #24
23008     0F 15 02 FB | 	rdlong	arg02, local01
2300c     18 1E 86 F1 | 	sub	local01, #24
23010     11 13 02 F6 | 	mov	arg01, local03
23014     38 F3 BF FD | 	call	#_fatfs_cc_move_window
23018     FD 24 0A F6 | 	mov	local04, result1 wz
2301c     50 00 90 5D |  if_ne	jmp	#LR__3573
23020     1C 1E 06 F1 | 	add	local01, #28
23024     0F 29 02 FB | 	rdlong	local06, local01
23028     1C 1E 86 F1 | 	sub	local01, #28
2302c     14 29 C2 FA | 	rdbyte	local06, local06
23030     E5 28 0E F2 | 	cmp	local06, #229 wz
23034     1C 1E 06 51 |  if_ne	add	local01, #28
23038     0F 2B 02 5B |  if_ne	rdlong	local07, local01
2303c     1C 1E 86 51 |  if_ne	sub	local01, #28
23040     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
23044     10 00 90 5D |  if_ne	jmp	#LR__3571
23048     01 26 06 F1 | 	add	local05, #1
2304c     10 27 0A F2 | 	cmp	local05, local02 wz
23050     1C 00 90 AD |  if_e	jmp	#LR__3573
23054     04 00 90 FD | 	jmp	#LR__3572
23058                 | LR__3571
23058     00 26 06 F6 | 	mov	local05, #0
2305c                 | LR__3572
2305c     0F 13 02 F6 | 	mov	arg01, local01
23060     01 14 06 F6 | 	mov	arg02, #1
23064     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
23068     FD 24 0A F6 | 	mov	local04, result1 wz
2306c     94 FF 9F AD |  if_e	jmp	#LR__3570
23070                 | LR__3573
23070                 | LR__3574
23070     04 24 0E F2 | 	cmp	local04, #4 wz
23074     07 24 06 A6 |  if_e	mov	local04, #7
23078                 | ' 	return res;
23078     12 FB 01 F6 | 	mov	result1, local04
2307c     A7 F0 03 F6 | 	mov	ptra, fp
23080     B2 00 A0 FD | 	call	#popregs_
23084                 | _fatfs_cc_dir_alloc_ret
23084     2D 00 64 FD | 	ret
23088                 | 
23088                 | _fatfs_cc_ld_clust
23088     09 01 02 F6 | 	mov	_var01, arg01
2308c     0A 13 02 F6 | 	mov	arg01, arg02
23090     1A 12 06 F1 | 	add	arg01, #26
23094                 | ' {
23094                 | ' 
23094                 | ' 	return *((WORD*)ptr);
23094     09 FB E1 FA | 	rdword	result1, arg01
23098     FD 12 32 F9 | 	getword	arg01, result1, #0
2309c     00 01 C2 FA | 	rdbyte	_var01, _var01
230a0     03 00 0E F2 | 	cmp	_var01, #3 wz
230a4     14 14 06 A1 |  if_e	add	arg02, #20
230a8                 | ' {
230a8                 | ' 
230a8                 | ' 	return *((WORD*)ptr);
230a8     0A FB E1 AA |  if_e	rdword	result1, arg02
230ac     10 FA 65 A0 |  if_e	shl	result1, #16
230b0     FD 12 42 A5 |  if_e	or	arg01, result1
230b4                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
230b4                 | ' 	}
230b4                 | ' 
230b4                 | ' 	return cl;
230b4     09 FB 01 F6 | 	mov	result1, arg01
230b8                 | _fatfs_cc_ld_clust_ret
230b8     2D 00 64 FD | 	ret
230bc                 | 
230bc                 | _fatfs_cc_st_clust
230bc     09 01 02 F6 | 	mov	_var01, arg01
230c0     0A 13 02 F6 | 	mov	arg01, arg02
230c4     1A 12 06 F1 | 	add	arg01, #26
230c8     09 17 52 FC | 	wrword	arg03, arg01
230cc     00 01 C2 FA | 	rdbyte	_var01, _var01
230d0     03 00 0E F2 | 	cmp	_var01, #3 wz
230d4     14 14 06 A1 |  if_e	add	arg02, #20
230d8     10 16 46 A0 |  if_e	shr	arg03, #16
230dc     0A 17 52 AC |  if_e	wrword	arg03, arg02
230e0                 | _fatfs_cc_st_clust_ret
230e0     2D 00 64 FD | 	ret
230e4                 | 
230e4                 | _fatfs_cc_cmp_lfn
230e4     07 4A 05 F6 | 	mov	COUNT_, #7
230e8     A8 00 A0 FD | 	call	#pushregs_
230ec     09 1F 02 F6 | 	mov	local01, arg01
230f0     0A 13 02 F6 | 	mov	arg01, arg02
230f4     1A 12 06 F1 | 	add	arg01, #26
230f8                 | ' {
230f8                 | ' 
230f8                 | ' 	return *((WORD*)ptr);
230f8     09 FB E9 FA | 	rdword	result1, arg01 wz
230fc     00 FA 05 56 |  if_ne	mov	result1, #0
23100     E0 00 90 5D |  if_ne	jmp	#LR__3586
23104     0A 21 C2 FA | 	rdbyte	local02, arg02
23108     3F 20 06 F5 | 	and	local02, #63
2310c     01 20 86 F1 | 	sub	local02, #1
23110     0D 20 06 FD | 	qmul	local02, #13
23114                 | ' 
23114                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
23114                 | ' 
23114                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
23114     01 22 06 F6 | 	mov	local03, #1
23118     00 24 06 F6 | 	mov	local04, #0
2311c     18 26 62 FD | 	getqx	local05
23120                 | LR__3580
23120     0D 24 16 F2 | 	cmp	local04, #13 wc
23124     9C 00 90 3D |  if_ae	jmp	#LR__3585
23128     0A 13 02 F6 | 	mov	arg01, arg02
2312c     12 21 02 F6 | 	mov	local02, local04
23130     01 00 00 FF 
23134     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
23138     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2313c     10 21 C2 FA | 	rdbyte	local02, local02
23140     01 20 06 FA | 	mul	local02, #1
23144     10 13 02 F1 | 	add	arg01, local02
23148     01 00 00 FF 
2314c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
23150                 | ' {
23150                 | ' 
23150                 | ' 	return *((WORD*)ptr);
23150     09 FB E1 FA | 	rdword	result1, arg01
23154     FD 28 02 F6 | 	mov	local06, result1
23158     11 21 02 F6 | 	mov	local02, local03
2315c     0F 20 4E F7 | 	zerox	local02, #15 wz
23160     44 00 90 AD |  if_e	jmp	#LR__3583
23164     00 27 16 F2 | 	cmp	local05, #256 wc
23168     2C 00 90 3D |  if_ae	jmp	#LR__3581
2316c     14 13 32 F9 | 	getword	arg01, local06, #0
23170     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
23174     FD 20 02 F6 | 	mov	local02, result1
23178     13 23 02 F6 | 	mov	local03, local05
2317c     01 22 66 F0 | 	shl	local03, #1
23180     0F 23 02 F1 | 	add	local03, local01
23184     11 13 E2 FA | 	rdword	arg01, local03
23188     01 26 06 F1 | 	add	local05, #1
2318c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
23190     FD 20 0A F2 | 	cmp	local02, result1 wz
23194     08 00 90 AD |  if_e	jmp	#LR__3582
23198                 | LR__3581
23198                 | ' 				return 0;
23198     00 FA 05 F6 | 	mov	result1, #0
2319c     44 00 90 FD | 	jmp	#LR__3586
231a0                 | LR__3582
231a0     14 23 02 F6 | 	mov	local03, local06
231a4     14 00 90 FD | 	jmp	#LR__3584
231a8                 | LR__3583
231a8     14 29 32 F9 | 	getword	local06, local06, #0
231ac     7F 00 00 FF 
231b0     FF 29 0E F2 | 	cmp	local06, ##65535 wz
231b4     00 FA 05 56 |  if_ne	mov	result1, #0
231b8     28 00 90 5D |  if_ne	jmp	#LR__3586
231bc                 | LR__3584
231bc     01 24 06 F1 | 	add	local04, #1
231c0     5C FF 9F FD | 	jmp	#LR__3580
231c4                 | LR__3585
231c4     0A 21 C2 FA | 	rdbyte	local02, arg02
231c8     40 20 CE F7 | 	test	local02, #64 wz
231cc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
231d0     01 26 66 50 |  if_ne	shl	local05, #1
231d4     0F 27 02 51 |  if_ne	add	local05, local01
231d8     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
231dc     00 FA 05 56 |  if_ne	mov	result1, #0
231e0                 | ' 
231e0                 | ' 	return 1;
231e0     01 FA 05 A6 |  if_e	mov	result1, #1
231e4                 | LR__3586
231e4     A7 F0 03 F6 | 	mov	ptra, fp
231e8     B2 00 A0 FD | 	call	#popregs_
231ec                 | _fatfs_cc_cmp_lfn_ret
231ec     2D 00 64 FD | 	ret
231f0                 | 
231f0                 | _fatfs_cc_pick_lfn
231f0     09 01 02 F6 | 	mov	_var01, arg01
231f4     0A 13 02 F6 | 	mov	arg01, arg02
231f8     1A 12 06 F1 | 	add	arg01, #26
231fc                 | ' {
231fc                 | ' 
231fc                 | ' 	return *((WORD*)ptr);
231fc     09 FB E9 FA | 	rdword	result1, arg01 wz
23200     00 FA 05 56 |  if_ne	mov	result1, #0
23204     D4 00 90 5D |  if_ne	jmp	#LR__3595
23208     0A 03 C2 FA | 	rdbyte	_var02, arg02
2320c     40 02 26 F5 | 	andn	_var02, #64
23210     01 02 86 F1 | 	sub	_var02, #1
23214     0D 02 06 FD | 	qmul	_var02, #13
23218                 | ' 
23218                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
23218                 | ' 
23218                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
23218     01 04 06 F6 | 	mov	_var03, #1
2321c     00 06 06 F6 | 	mov	_var04, #0
23220     18 08 62 FD | 	getqx	_var05
23224                 | LR__3590
23224     0D 06 16 F2 | 	cmp	_var04, #13 wc
23228     80 00 90 3D |  if_ae	jmp	#LR__3593
2322c     0A 13 02 F6 | 	mov	arg01, arg02
23230     03 03 02 F6 | 	mov	_var02, _var04
23234     01 00 00 FF 
23238     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2323c     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
23240     01 03 C2 FA | 	rdbyte	_var02, _var02
23244     01 02 06 FA | 	mul	_var02, #1
23248     01 13 02 F1 | 	add	arg01, _var02
2324c     01 00 00 FF 
23250     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
23254                 | ' {
23254                 | ' 
23254                 | ' 	return *((WORD*)ptr);
23254     09 FB E1 FA | 	rdword	result1, arg01
23258     FD 0A 02 F6 | 	mov	_var06, result1
2325c     02 03 02 F6 | 	mov	_var02, _var03
23260     0F 02 4E F7 | 	zerox	_var02, #15 wz
23264     28 00 90 AD |  if_e	jmp	#LR__3591
23268     00 09 16 F2 | 	cmp	_var05, #256 wc
2326c     00 FA 05 36 |  if_ae	mov	result1, #0
23270     68 00 90 3D |  if_ae	jmp	#LR__3595
23274     04 03 02 F6 | 	mov	_var02, _var05
23278     01 02 66 F0 | 	shl	_var02, #1
2327c     00 03 02 F1 | 	add	_var02, _var01
23280     05 05 02 F6 | 	mov	_var03, _var06
23284     01 05 52 FC | 	wrword	_var03, _var02
23288     01 08 06 F1 | 	add	_var05, #1
2328c     14 00 90 FD | 	jmp	#LR__3592
23290                 | LR__3591
23290     05 0B 32 F9 | 	getword	_var06, _var06, #0
23294     7F 00 00 FF 
23298     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2329c     00 FA 05 56 |  if_ne	mov	result1, #0
232a0     38 00 90 5D |  if_ne	jmp	#LR__3595
232a4                 | LR__3592
232a4     01 06 06 F1 | 	add	_var04, #1
232a8     78 FF 9F FD | 	jmp	#LR__3590
232ac                 | LR__3593
232ac     0A 03 C2 FA | 	rdbyte	_var02, arg02
232b0     40 02 CE F7 | 	test	_var02, #64 wz
232b4     02 0D 02 56 |  if_ne	mov	_var07, _var03
232b8     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
232bc     18 00 90 AD |  if_e	jmp	#LR__3594
232c0     00 09 16 F2 | 	cmp	_var05, #256 wc
232c4     00 FA 05 36 |  if_ae	mov	result1, #0
232c8     10 00 90 3D |  if_ae	jmp	#LR__3595
232cc     01 08 66 F0 | 	shl	_var05, #1
232d0     00 09 02 F1 | 	add	_var05, _var01
232d4     04 01 58 FC | 	wrword	#0, _var05
232d8                 | LR__3594
232d8                 | ' 		lfnbuf[i] = 0;
232d8                 | ' 	}
232d8                 | ' 
232d8                 | ' 	return 1;
232d8     01 FA 05 F6 | 	mov	result1, #1
232dc                 | LR__3595
232dc                 | _fatfs_cc_pick_lfn_ret
232dc     2D 00 64 FD | 	ret
232e0                 | 
232e0                 | _fatfs_cc_put_lfn
232e0     0D 14 06 F1 | 	add	arg02, #13
232e4     0A 19 42 FC | 	wrbyte	arg04, arg02
232e8     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
232ec     01 18 86 F1 | 	sub	arg04, #1
232f0     0D 18 06 FD | 	qmul	arg04, #13
232f4     09 01 02 F6 | 	mov	_var01, arg01
232f8     02 14 86 F1 | 	sub	arg02, #2
232fc     0A 1F 48 FC | 	wrbyte	#15, arg02
23300     01 14 06 F1 | 	add	arg02, #1
23304     0A 01 48 FC | 	wrbyte	#0, arg02
23308     0C 14 86 F1 | 	sub	arg02, #12
2330c     0A 13 02 F6 | 	mov	arg01, arg02
23310     1A 12 06 F1 | 	add	arg01, #26
23314     09 01 58 FC | 	wrword	#0, arg01
23318     00 02 06 F6 | 	mov	_var02, #0
2331c     00 04 06 F6 | 	mov	_var03, #0
23320                 | ' 	BYTE* dir,
23320                 | ' 	BYTE ord,
23320                 | ' 	BYTE sum
23320                 | ' )
23320                 | ' {
23320                 | ' 	UINT i, s;
23320                 | ' 	WCHAR wc;
23320                 | ' 
23320                 | ' 
23320                 | ' 	dir[ 13 ] = sum;
23320                 | ' 	dir[ 11 ] =  0x0F ;
23320                 | ' 	dir[ 12 ] = 0;
23320                 | ' 	st_word(dir +  26 , 0);
23320                 | ' 
23320                 | ' 	i = (ord - 1) * 13;
23320                 | ' 	s = wc = 0;
23320                 | ' 	do {
23320     01 00 00 FF 
23324     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
23328     18 06 62 FD | 	getqx	_var04
2332c     97 2A 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
23330                 | LR__3600
23330     01 19 32 F9 | 	getword	arg04, _var02, #0
23334     7F 00 00 FF 
23338     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2333c     03 13 02 56 |  if_ne	mov	arg01, _var04
23340     01 06 06 51 |  if_ne	add	_var04, #1
23344     01 12 66 50 |  if_ne	shl	arg01, #1
23348     00 13 02 51 |  if_ne	add	arg01, _var01
2334c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
23350     0A 13 02 F6 | 	mov	arg01, arg02
23354     02 19 02 F6 | 	mov	arg04, _var03
23358     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2335c     0C 19 C2 FA | 	rdbyte	arg04, arg04
23360     01 18 06 FA | 	mul	arg04, #1
23364     0C 13 02 F1 | 	add	arg01, arg04
23368     09 03 52 FC | 	wrword	_var02, arg01
2336c     01 19 02 F6 | 	mov	arg04, _var02
23370     0F 18 4E F7 | 	zerox	arg04, #15 wz
23374     0F 02 CE A9 |  if_e	bmask	_var02, #15
23378     01 04 06 F1 | 	add	_var03, #1
2337c     0D 04 16 F2 | 	cmp	_var03, #13 wc
23380     AC FF 9F CD |  if_b	jmp	#LR__3600
23384                 | LR__3601
23384     01 00 00 FF 
23388     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2338c     01 03 32 F9 | 	getword	_var02, _var02, #0
23390     7F 00 00 FF 
23394     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
23398     01 06 66 50 |  if_ne	shl	_var04, #1
2339c     00 07 02 51 |  if_ne	add	_var04, _var01
233a0     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
233a4     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
233a8     40 16 46 A5 |  if_e	or	arg03, #64
233ac     0A 17 42 FC | 	wrbyte	arg03, arg02
233b0                 | _fatfs_cc_put_lfn_ret
233b0     2D 00 64 FD | 	ret
233b4                 | 
233b4                 | _fatfs_cc_gen_numname
233b4     08 4A 05 F6 | 	mov	COUNT_, #8
233b8     A8 00 A0 FD | 	call	#pushregs_
233bc     2C F0 07 F1 | 	add	ptra, #44
233c0     09 1F 02 F6 | 	mov	local01, arg01
233c4     0A 21 02 F6 | 	mov	local02, arg02
233c8     0B 23 02 F6 | 	mov	local03, arg03
233cc     0C 25 02 F6 | 	mov	local04, arg04
233d0     0F 13 02 F6 | 	mov	arg01, local01
233d4     10 15 02 F6 | 	mov	arg02, local02
233d8     0B 16 06 F6 | 	mov	arg03, #11
233dc     58 78 BF FD | 	call	#__system____builtin_memmove
233e0     06 24 16 F2 | 	cmp	local04, #6 wc
233e4     48 00 90 CD |  if_b	jmp	#LR__3615
233e8     12 27 02 F6 | 	mov	local05, local04
233ec     97 1E 48 FB | 	callpa	#(@LR__3613-@LR__3610)>>2,fcache_load_ptr_
233f0                 | ' 		sreg = seq;
233f0                 | ' 		while (*lfn) {
233f0                 | LR__3610
233f0     11 29 EA FA | 	rdword	local06, local03 wz
233f4     34 00 90 AD |  if_e	jmp	#LR__3614
233f8     11 2B E2 FA | 	rdword	local07, local03
233fc                 | ' 			wc = *lfn++;
233fc                 | ' 			for (i = 0; i < 16; i++) {
233fc     02 22 06 F1 | 	add	local03, #2
23400     10 12 DC FC | 	rep	@LR__3612, #16
23404                 | LR__3611
23404     01 26 66 F0 | 	shl	local05, #1
23408     15 29 32 F9 | 	getword	local06, local07, #0
2340c     01 28 06 F5 | 	and	local06, #1
23410     14 27 02 F1 | 	add	local05, local06
23414     15 2B 32 F9 | 	getword	local07, local07, #0
23418     01 2A 46 F0 | 	shr	local07, #1
2341c     10 26 2E F4 | 	testbn	local05, #16 wz
23420     88 00 00 5F 
23424     21 26 66 55 |  if_ne	xor	local05, ##69665
23428                 | LR__3612
23428     C4 FF 9F FD | 	jmp	#LR__3610
2342c                 | LR__3613
2342c                 | LR__3614
2342c     13 25 02 F6 | 	mov	local04, local05
23430                 | LR__3615
23430     07 2A 06 F6 | 	mov	local07, #7
23434                 | ' 			}
23434                 | ' 		}
23434                 | ' 		seq = (UINT)sreg;
23434                 | ' 	}
23434                 | ' 
23434                 | ' 
23434                 | ' 	i = 7;
23434                 | ' 	do {
23434     10 4E 05 F1 | 	add	fp, #16
23438     97 1A 48 FB | 	callpa	#(@LR__3617-@LR__3616)>>2,fcache_load_ptr_
2343c                 | LR__3616
2343c     12 27 42 F8 | 	getnib	local05, local04, #0
23440     30 26 06 F1 | 	add	local05, #48
23444     04 24 46 F0 | 	shr	local04, #4
23448     13 29 E2 F8 | 	getbyte	local06, local05, #0
2344c     3A 28 16 F2 | 	cmp	local06, #58 wc
23450     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
23454     07 26 06 31 |  if_ae	add	local05, #7
23458     15 29 02 F6 | 	mov	local06, local07
2345c     01 2A 8E F1 | 	sub	local07, #1 wz
23460     A7 28 02 F1 | 	add	local06, fp
23464     14 27 42 FC | 	wrbyte	local05, local06
23468     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
2346c     CC FF 9F 5D |  if_ne	jmp	#LR__3616
23470                 | LR__3617
23470     15 29 02 F6 | 	mov	local06, local07
23474     A7 28 02 F1 | 	add	local06, fp
23478     14 FD 48 FC | 	wrbyte	#126, local06
2347c                 | ' 	ns[i] = '~';
2347c                 | ' 
2347c                 | ' 
2347c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2347c     00 26 06 F6 | 	mov	local05, #0
23480     10 4E 85 F1 | 	sub	fp, #16
23484     97 2A 48 FB | 	callpa	#(@LR__3620-@LR__3618)>>2,fcache_load_ptr_
23488                 | LR__3618
23488     15 27 12 F2 | 	cmp	local05, local07 wc
2348c     4C 00 90 3D |  if_ae	jmp	#LR__3621
23490     13 29 02 F6 | 	mov	local06, local05
23494     0F 29 02 F1 | 	add	local06, local01
23498     14 29 C2 FA | 	rdbyte	local06, local06
2349c     20 28 0E F2 | 	cmp	local06, #32 wz
234a0     38 00 90 AD |  if_e	jmp	#LR__3621
234a4     13 13 02 F6 | 	mov	arg01, local05
234a8     0F 13 02 F1 | 	add	arg01, local01
234ac     09 13 CA FA | 	rdbyte	arg01, arg01 wz
234b0     00 FA 05 56 |  if_ne	mov	result1, #0
234b4                 | ' 
234b4                 | ' 	return 0;
234b4     00 FA 05 A6 |  if_e	mov	result1, #0
234b8     00 FA 0D F2 | 	cmp	result1, #0 wz
234bc     14 00 90 AD |  if_e	jmp	#LR__3619
234c0     15 29 02 F6 | 	mov	local06, local07
234c4     01 28 86 F1 | 	sub	local06, #1
234c8     14 27 0A F2 | 	cmp	local05, local06 wz
234cc     0C 00 90 AD |  if_e	jmp	#LR__3621
234d0     01 26 06 F1 | 	add	local05, #1
234d4                 | LR__3619
234d4     01 26 06 F1 | 	add	local05, #1
234d8     AC FF 9F FD | 	jmp	#LR__3618
234dc                 | LR__3620
234dc                 | LR__3621
234dc     97 20 48 FB | 	callpa	#(@LR__3625-@LR__3622)>>2,fcache_load_ptr_
234e0                 | ' 			j++;
234e0                 | ' 		}
234e0                 | ' 	}
234e0                 | ' 	do {
234e0                 | LR__3622
234e0     13 29 02 F6 | 	mov	local06, local05
234e4     0F 29 02 F1 | 	add	local06, local01
234e8     08 2A 16 F2 | 	cmp	local07, #8 wc
234ec     01 26 06 F1 | 	add	local05, #1
234f0     1C 00 90 3D |  if_ae	jmp	#LR__3623
234f4     15 25 02 F6 | 	mov	local04, local07
234f8     10 4E 05 F1 | 	add	fp, #16
234fc     A7 24 02 F1 | 	add	local04, fp
23500     12 2D C2 FA | 	rdbyte	local08, local04
23504     01 2A 06 F1 | 	add	local07, #1
23508     10 4E 85 F1 | 	sub	fp, #16
2350c     04 00 90 FD | 	jmp	#LR__3624
23510                 | LR__3623
23510     20 2C 06 F6 | 	mov	local08, #32
23514                 | LR__3624
23514     14 2D 42 FC | 	wrbyte	local08, local06
23518     08 26 16 F2 | 	cmp	local05, #8 wc
2351c     C0 FF 9F CD |  if_b	jmp	#LR__3622
23520                 | LR__3625
23520     A7 F0 03 F6 | 	mov	ptra, fp
23524     B2 00 A0 FD | 	call	#popregs_
23528                 | _fatfs_cc_gen_numname_ret
23528     2D 00 64 FD | 	ret
2352c                 | 
2352c                 | _fatfs_cc_sum_sfn
2352c     00 00 06 F6 | 	mov	_var01, #0
23530                 | ' )
23530                 | ' {
23530                 | ' 	BYTE sum = 0;
23530                 | ' 	UINT n = 11;
23530                 | ' 
23530                 | ' 	do {
23530     97 12 48 FB | 	callpa	#(@LR__3632-@LR__3630)>>2,fcache_load_ptr_
23534                 | LR__3630
23534     0B 10 DC FC | 	rep	@LR__3633, #11
23538                 | LR__3631
23538     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2353c     01 FA 45 F0 | 	shr	result1, #1
23540     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
23544     07 00 66 F0 | 	shl	_var01, #7
23548     00 FB 01 F1 | 	add	result1, _var01
2354c     09 01 C2 FA | 	rdbyte	_var01, arg01
23550     FD 00 02 F1 | 	add	_var01, result1
23554     01 12 06 F1 | 	add	arg01, #1
23558                 | LR__3632
23558                 | LR__3633
23558                 | ' 	return sum;
23558     00 FB 01 F6 | 	mov	result1, _var01
2355c                 | _fatfs_cc_sum_sfn_ret
2355c     2D 00 64 FD | 	ret
23560                 | 
23560                 | _fatfs_cc_dir_read
23560     0C 4A 05 F6 | 	mov	COUNT_, #12
23564     A8 00 A0 FD | 	call	#pushregs_
23568     09 1F 02 F6 | 	mov	local01, arg01
2356c     0A 21 02 F6 | 	mov	local02, arg02
23570     04 22 06 F6 | 	mov	local03, #4
23574     0F 25 02 FB | 	rdlong	local04, local01
23578     FF 26 06 F6 | 	mov	local05, #255
2357c     FF 28 06 F6 | 	mov	local06, #255
23580                 | ' )
23580                 | ' {
23580                 | ' 	FRESULT res = FR_NO_FILE;
23580                 | ' 	FATFS *fs = dp->obj.fs;
23580                 | ' 	BYTE attr, b;
23580                 | ' 
23580                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
23580                 | ' 
23580                 | ' 
23580                 | ' 	while (dp->sect) {
23580                 | LR__3640
23580     18 1E 06 F1 | 	add	local01, #24
23584     0F FB 09 FB | 	rdlong	result1, local01 wz
23588     18 1E 86 F1 | 	sub	local01, #24
2358c     AC 01 90 AD |  if_e	jmp	#LR__3650
23590     18 1E 06 F1 | 	add	local01, #24
23594     0F 15 02 FB | 	rdlong	arg02, local01
23598     18 1E 86 F1 | 	sub	local01, #24
2359c     12 13 02 F6 | 	mov	arg01, local04
235a0     AC ED BF FD | 	call	#_fatfs_cc_move_window
235a4     FD 22 0A F6 | 	mov	local03, result1 wz
235a8     90 01 90 5D |  if_ne	jmp	#LR__3650
235ac     1C 1E 06 F1 | 	add	local01, #28
235b0     0F FB 01 FB | 	rdlong	result1, local01
235b4     1C 1E 86 F1 | 	sub	local01, #28
235b8     FD 2A C2 FA | 	rdbyte	local07, result1
235bc     15 FB 01 F6 | 	mov	result1, local07
235c0     07 FA 4D F7 | 	zerox	result1, #7 wz
235c4     04 22 06 A6 |  if_e	mov	local03, #4
235c8                 | ' 			res = FR_NO_FILE; break;
235c8     70 01 90 AD |  if_e	jmp	#LR__3650
235cc     1C 1E 06 F1 | 	add	local01, #28
235d0     0F 2D 02 FB | 	rdlong	local08, local01
235d4     0B 2C 06 F1 | 	add	local08, #11
235d8     16 2F C2 FA | 	rdbyte	local09, local08
235dc     3F 2E 06 F5 | 	and	local09, #63
235e0     16 1E 86 F1 | 	sub	local01, #22
235e4     0F 2F 42 FC | 	wrbyte	local09, local01
235e8     06 1E 86 F1 | 	sub	local01, #6
235ec     15 FB E1 F8 | 	getbyte	result1, local07, #0
235f0     E5 FA 0D F2 | 	cmp	result1, #229 wz
235f4     15 2D 02 56 |  if_ne	mov	local08, local07
235f8     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
235fc     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
23600     1C 00 90 AD |  if_e	jmp	#LR__3641
23604     00 30 06 F6 | 	mov	local10, #0
23608     17 2D E2 F8 | 	getbyte	local08, local09, #0
2360c     20 2C 26 F5 | 	andn	local08, #32
23610     08 2C 0E F2 | 	cmp	local08, #8 wz
23614     01 30 06 A6 |  if_e	mov	local10, #1
23618     10 31 0A F2 | 	cmp	local10, local02 wz
2361c     08 00 90 AD |  if_e	jmp	#LR__3642
23620                 | LR__3641
23620     FF 26 06 F6 | 	mov	local05, #255
23624     00 01 90 FD | 	jmp	#LR__3649
23628                 | LR__3642
23628     17 2F E2 F8 | 	getbyte	local09, local09, #0
2362c     0F 2E 0E F2 | 	cmp	local09, #15 wz
23630     B4 00 90 5D |  if_ne	jmp	#LR__3646
23634     15 33 E2 F8 | 	getbyte	local11, local07, #0
23638     40 32 CE F7 | 	test	local11, #64 wz
2363c     30 00 90 AD |  if_e	jmp	#LR__3643
23640     1C 1E 06 F1 | 	add	local01, #28
23644     0F 33 02 FB | 	rdlong	local11, local01
23648     0D 32 06 F1 | 	add	local11, #13
2364c     19 29 C2 FA | 	rdbyte	local06, local11
23650     15 2B E2 F8 | 	getbyte	local07, local07, #0
23654     BF 2A 06 F5 | 	and	local07, #191
23658     15 27 02 F6 | 	mov	local05, local07
2365c     0C 1E 86 F1 | 	sub	local01, #12
23660     0F 33 02 FB | 	rdlong	local11, local01
23664     1C 1E 06 F1 | 	add	local01, #28
23668     0F 33 62 FC | 	wrlong	local11, local01
2366c     2C 1E 86 F1 | 	sub	local01, #44
23670                 | LR__3643
23670     15 2D E2 F8 | 	getbyte	local08, local07, #0
23674     13 31 E2 F8 | 	getbyte	local10, local05, #0
23678     18 2D 0A F2 | 	cmp	local08, local10 wz
2367c     5C 00 90 5D |  if_ne	jmp	#LR__3644
23680     14 31 E2 F8 | 	getbyte	local10, local06, #0
23684     1C 1E 06 F1 | 	add	local01, #28
23688     0F 2F 02 FB | 	rdlong	local09, local01
2368c     1C 1E 86 F1 | 	sub	local01, #28
23690     0D 2E 06 F1 | 	add	local09, #13
23694     17 2D C2 FA | 	rdbyte	local08, local09
23698     16 2F E2 F8 | 	getbyte	local09, local08, #0
2369c     17 31 0A F2 | 	cmp	local10, local09 wz
236a0     38 00 90 5D |  if_ne	jmp	#LR__3644
236a4     0C 24 06 F1 | 	add	local04, #12
236a8     12 13 02 FB | 	rdlong	arg01, local04
236ac     0C 24 86 F1 | 	sub	local04, #12
236b0     1C 1E 06 F1 | 	add	local01, #28
236b4     0F 35 02 FB | 	rdlong	local12, local01
236b8     1C 1E 86 F1 | 	sub	local01, #28
236bc     1A 15 02 F6 | 	mov	arg02, local12
236c0     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
236c4     00 FA 4D F2 | 	cmps	result1, #0 wz
236c8     13 35 02 56 |  if_ne	mov	local12, local05
236cc     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
236d0     01 34 86 51 |  if_ne	sub	local12, #1
236d4     1A 33 02 56 |  if_ne	mov	local11, local12
236d8     04 00 90 5D |  if_ne	jmp	#LR__3645
236dc                 | LR__3644
236dc     FF 32 06 F6 | 	mov	local11, #255
236e0                 | LR__3645
236e0     19 27 02 F6 | 	mov	local05, local11
236e4     40 00 90 FD | 	jmp	#LR__3648
236e8                 | LR__3646
236e8     13 33 02 F6 | 	mov	local11, local05
236ec     07 32 4E F7 | 	zerox	local11, #7 wz
236f0     20 00 90 5D |  if_ne	jmp	#LR__3647
236f4     14 29 E2 F8 | 	getbyte	local06, local06, #0
236f8     1C 1E 06 F1 | 	add	local01, #28
236fc     0F 13 02 FB | 	rdlong	arg01, local01
23700     1C 1E 86 F1 | 	sub	local01, #28
23704     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
23708     FD FA E1 F8 | 	getbyte	result1, result1, #0
2370c     FD 28 0A F2 | 	cmp	local06, result1 wz
23710     28 00 90 AD |  if_e	jmp	#LR__3650
23714                 | LR__3647
23714     2C 1E 06 F1 | 	add	local01, #44
23718     FF FF FF FF 
2371c     0F FF 6B FC | 	wrlong	##-1, local01
23720     2C 1E 86 F1 | 	sub	local01, #44
23724                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
23724                 | ' 					}
23724                 | ' 					break;
23724     14 00 90 FD | 	jmp	#LR__3650
23728                 | LR__3648
23728                 | LR__3649
23728     0F 13 02 F6 | 	mov	arg01, local01
2372c     00 14 06 F6 | 	mov	arg02, #0
23730     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
23734     FD 22 0A F6 | 	mov	local03, result1 wz
23738     44 FE 9F AD |  if_e	jmp	#LR__3640
2373c                 | LR__3650
2373c     00 22 0E F2 | 	cmp	local03, #0 wz
23740     18 1E 06 51 |  if_ne	add	local01, #24
23744     0F 01 68 5C |  if_ne	wrlong	#0, local01
23748                 | ' 	return res;
23748     11 FB 01 F6 | 	mov	result1, local03
2374c     A7 F0 03 F6 | 	mov	ptra, fp
23750     B2 00 A0 FD | 	call	#popregs_
23754                 | _fatfs_cc_dir_read_ret
23754     2D 00 64 FD | 	ret
23758                 | 
23758                 | _fatfs_cc_dir_find
23758     0B 4A 05 F6 | 	mov	COUNT_, #11
2375c     A8 00 A0 FD | 	call	#pushregs_
23760     09 1F 02 F6 | 	mov	local01, arg01
23764     0F 21 02 FB | 	rdlong	local02, local01
23768     0F 13 02 F6 | 	mov	arg01, local01
2376c     00 14 06 F6 | 	mov	arg02, #0
23770     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
23774     00 FA 0D F2 | 	cmp	result1, #0 wz
23778     18 02 90 5D |  if_ne	jmp	#LR__3672
2377c     FF 22 06 F6 | 	mov	local03, #255
23780     FF 24 06 F6 | 	mov	local04, #255
23784     2C 1E 06 F1 | 	add	local01, #44
23788     FF FF FF FF 
2378c     0F FF 6B FC | 	wrlong	##-1, local01
23790     2C 1E 86 F1 | 	sub	local01, #44
23794                 | ' #line 2404 "ff.c"
23794                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
23794                 | ' 
23794                 | ' 	do {
23794                 | LR__3660
23794     18 1E 06 F1 | 	add	local01, #24
23798     0F 15 02 FB | 	rdlong	arg02, local01
2379c     18 1E 86 F1 | 	sub	local01, #24
237a0     10 13 02 F6 | 	mov	arg01, local02
237a4     A8 EB BF FD | 	call	#_fatfs_cc_move_window
237a8     FD 26 0A F6 | 	mov	local05, result1 wz
237ac     E0 01 90 5D |  if_ne	jmp	#LR__3671
237b0     1C 1E 06 F1 | 	add	local01, #28
237b4     0F 17 02 FB | 	rdlong	arg03, local01
237b8     1C 1E 86 F1 | 	sub	local01, #28
237bc     0B 29 C2 FA | 	rdbyte	local06, arg03
237c0     14 17 02 F6 | 	mov	arg03, local06
237c4     07 16 4E F7 | 	zerox	arg03, #7 wz
237c8     04 26 06 A6 |  if_e	mov	local05, #4
237cc     C0 01 90 AD |  if_e	jmp	#LR__3671
237d0     1C 1E 06 F1 | 	add	local01, #28
237d4     0F 2B 02 FB | 	rdlong	local07, local01
237d8     15 17 02 F6 | 	mov	arg03, local07
237dc     0B 16 06 F1 | 	add	arg03, #11
237e0     0B 2D C2 FA | 	rdbyte	local08, arg03
237e4     3F 2C 06 F5 | 	and	local08, #63
237e8     16 1E 86 F1 | 	sub	local01, #22
237ec     0F 2D 42 FC | 	wrbyte	local08, local01
237f0     06 1E 86 F1 | 	sub	local01, #6
237f4     14 17 E2 F8 | 	getbyte	arg03, local06, #0
237f8     E5 16 0E F2 | 	cmp	arg03, #229 wz
237fc     18 00 90 AD |  if_e	jmp	#LR__3661
23800     16 17 E2 F8 | 	getbyte	arg03, local08, #0
23804     08 16 CE F7 | 	test	arg03, #8 wz
23808     16 2B 02 56 |  if_ne	mov	local07, local08
2380c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
23810     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
23814     18 00 90 AD |  if_e	jmp	#LR__3662
23818                 | LR__3661
23818     FF 24 06 F6 | 	mov	local04, #255
2381c     2C 1E 06 F1 | 	add	local01, #44
23820     FF FF FF FF 
23824     0F FF 6B FC | 	wrlong	##-1, local01
23828     2C 1E 86 F1 | 	sub	local01, #44
2382c     4C 01 90 FD | 	jmp	#LR__3670
23830                 | LR__3662
23830     16 2D E2 F8 | 	getbyte	local08, local08, #0
23834     0F 2C 0E F2 | 	cmp	local08, #15 wz
23838     C8 00 90 5D |  if_ne	jmp	#LR__3666
2383c     2B 1E 06 F1 | 	add	local01, #43
23840     0F 2D C2 FA | 	rdbyte	local08, local01
23844     2B 1E 86 F1 | 	sub	local01, #43
23848     40 2C CE F7 | 	test	local08, #64 wz
2384c     2C 01 90 5D |  if_ne	jmp	#LR__3669
23850     14 2F E2 F8 | 	getbyte	local09, local06, #0
23854     40 2E CE F7 | 	test	local09, #64 wz
23858     30 00 90 AD |  if_e	jmp	#LR__3663
2385c     1C 1E 06 F1 | 	add	local01, #28
23860     0F 2F 02 FB | 	rdlong	local09, local01
23864     0D 2E 06 F1 | 	add	local09, #13
23868     17 23 C2 FA | 	rdbyte	local03, local09
2386c     14 29 E2 F8 | 	getbyte	local06, local06, #0
23870     BF 28 06 F5 | 	and	local06, #191
23874     14 25 02 F6 | 	mov	local04, local06
23878     0C 1E 86 F1 | 	sub	local01, #12
2387c     0F 2F 02 FB | 	rdlong	local09, local01
23880     1C 1E 06 F1 | 	add	local01, #28
23884     0F 2F 62 FC | 	wrlong	local09, local01
23888     2C 1E 86 F1 | 	sub	local01, #44
2388c                 | LR__3663
2388c     14 31 E2 F8 | 	getbyte	local10, local06, #0
23890     12 2B E2 F8 | 	getbyte	local07, local04, #0
23894     15 31 0A F2 | 	cmp	local10, local07 wz
23898     5C 00 90 5D |  if_ne	jmp	#LR__3664
2389c     11 2D E2 F8 | 	getbyte	local08, local03, #0
238a0     1C 1E 06 F1 | 	add	local01, #28
238a4     0F 2B 02 FB | 	rdlong	local07, local01
238a8     1C 1E 86 F1 | 	sub	local01, #28
238ac     0D 2A 06 F1 | 	add	local07, #13
238b0     15 29 C2 FA | 	rdbyte	local06, local07
238b4     14 2B E2 F8 | 	getbyte	local07, local06, #0
238b8     15 2D 0A F2 | 	cmp	local08, local07 wz
238bc     38 00 90 5D |  if_ne	jmp	#LR__3664
238c0     0C 20 06 F1 | 	add	local02, #12
238c4     10 13 02 FB | 	rdlong	arg01, local02
238c8     0C 20 86 F1 | 	sub	local02, #12
238cc     1C 1E 06 F1 | 	add	local01, #28
238d0     0F 33 02 FB | 	rdlong	local11, local01
238d4     1C 1E 86 F1 | 	sub	local01, #28
238d8     19 15 02 F6 | 	mov	arg02, local11
238dc     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
238e0     00 FA 4D F2 | 	cmps	result1, #0 wz
238e4     12 33 02 56 |  if_ne	mov	local11, local04
238e8     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
238ec     01 32 86 51 |  if_ne	sub	local11, #1
238f0     19 2F 02 56 |  if_ne	mov	local09, local11
238f4     04 00 90 5D |  if_ne	jmp	#LR__3665
238f8                 | LR__3664
238f8     FF 2E 06 F6 | 	mov	local09, #255
238fc                 | LR__3665
238fc     17 25 02 F6 | 	mov	local04, local09
23900     78 00 90 FD | 	jmp	#LR__3669
23904                 | LR__3666
23904     12 2F 02 F6 | 	mov	local09, local04
23908     07 2E 4E F7 | 	zerox	local09, #7 wz
2390c     20 00 90 5D |  if_ne	jmp	#LR__3667
23910     11 31 E2 F8 | 	getbyte	local10, local03, #0
23914     1C 1E 06 F1 | 	add	local01, #28
23918     0F 13 02 FB | 	rdlong	arg01, local01
2391c     1C 1E 86 F1 | 	sub	local01, #28
23920     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
23924     FD FA E1 F8 | 	getbyte	result1, result1, #0
23928     FD 30 0A F2 | 	cmp	local10, result1 wz
2392c     60 00 90 AD |  if_e	jmp	#LR__3671
23930                 | LR__3667
23930     2B 1E 06 F1 | 	add	local01, #43
23934     0F 2F C2 FA | 	rdbyte	local09, local01
23938     2B 1E 86 F1 | 	sub	local01, #43
2393c     01 2E CE F7 | 	test	local09, #1 wz
23940     24 00 90 5D |  if_ne	jmp	#LR__3668
23944     1C 1E 06 F1 | 	add	local01, #28
23948     0F 13 02 FB | 	rdlong	arg01, local01
2394c     04 1E 06 F1 | 	add	local01, #4
23950     0F 15 02 F6 | 	mov	arg02, local01
23954     20 1E 86 F1 | 	sub	local01, #32
23958     0B 16 06 F6 | 	mov	arg03, #11
2395c     88 DA BF FD | 	call	#_fatfs_cc_memcmp
23960     00 FA 0D F2 | 	cmp	result1, #0 wz
23964     28 00 90 AD |  if_e	jmp	#LR__3671
23968                 | LR__3668
23968     FF 24 06 F6 | 	mov	local04, #255
2396c     2C 1E 06 F1 | 	add	local01, #44
23970     FF FF FF FF 
23974     0F FF 6B FC | 	wrlong	##-1, local01
23978     2C 1E 86 F1 | 	sub	local01, #44
2397c                 | LR__3669
2397c                 | LR__3670
2397c     0F 13 02 F6 | 	mov	arg01, local01
23980     00 14 06 F6 | 	mov	arg02, #0
23984     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
23988     FD 26 0A F6 | 	mov	local05, result1 wz
2398c     04 FE 9F AD |  if_e	jmp	#LR__3660
23990                 | LR__3671
23990                 | ' 
23990                 | ' 	return res;
23990     13 FB 01 F6 | 	mov	result1, local05
23994                 | LR__3672
23994     A7 F0 03 F6 | 	mov	ptra, fp
23998     B2 00 A0 FD | 	call	#popregs_
2399c                 | _fatfs_cc_dir_find_ret
2399c     2D 00 64 FD | 	ret
239a0                 | 
239a0                 | _fatfs_cc_dir_register
239a0     0A 4A 05 F6 | 	mov	COUNT_, #10
239a4     A8 00 A0 FD | 	call	#pushregs_
239a8     2C F0 07 F1 | 	add	ptra, #44
239ac     04 4E 05 F1 | 	add	fp, #4
239b0     A7 12 62 FC | 	wrlong	arg01, fp
239b4     09 1F 02 FB | 	rdlong	local01, arg01
239b8     08 4E 05 F1 | 	add	fp, #8
239bc     A7 1E 62 FC | 	wrlong	local01, fp
239c0     08 4E 85 F1 | 	sub	fp, #8
239c4     A7 20 02 FB | 	rdlong	local02, fp
239c8     04 4E 85 F1 | 	sub	fp, #4
239cc     2B 20 06 F1 | 	add	local02, #43
239d0     10 21 C2 FA | 	rdbyte	local02, local02
239d4     A0 20 CE F7 | 	test	local02, #160 wz
239d8     06 FA 05 56 |  if_ne	mov	result1, #6
239dc     F8 03 90 5D |  if_ne	jmp	#LR__3695
239e0                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
239e0     14 4E 05 F1 | 	add	fp, #20
239e4     A7 00 68 FC | 	wrlong	#0, fp
239e8     14 4E 85 F1 | 	sub	fp, #20
239ec     97 28 48 FB | 	callpa	#(@LR__3681-@LR__3680)>>2,fcache_load_ptr_
239f0                 | LR__3680
239f0     0C 4E 05 F1 | 	add	fp, #12
239f4     A7 20 02 FB | 	rdlong	local02, fp
239f8     0C 20 06 F1 | 	add	local02, #12
239fc     10 23 02 FB | 	rdlong	local03, local02
23a00     08 4E 05 F1 | 	add	fp, #8
23a04     A7 24 02 FB | 	rdlong	local04, fp
23a08     14 4E 85 F1 | 	sub	fp, #20
23a0c     01 24 66 F0 | 	shl	local04, #1
23a10     11 25 02 F1 | 	add	local04, local03
23a14     12 21 EA FA | 	rdword	local02, local04 wz
23a18     24 00 90 AD |  if_e	jmp	#LR__3682
23a1c     14 4E 05 F1 | 	add	fp, #20
23a20     A7 26 02 FB | 	rdlong	local05, fp
23a24     13 29 02 F6 | 	mov	local06, local05
23a28     13 2B 02 F6 | 	mov	local07, local05
23a2c     15 2D 02 F6 | 	mov	local08, local07
23a30     01 2C 06 F1 | 	add	local08, #1
23a34     A7 2C 62 FC | 	wrlong	local08, fp
23a38     14 4E 85 F1 | 	sub	fp, #20
23a3c     B0 FF 9F FD | 	jmp	#LR__3680
23a40                 | LR__3681
23a40                 | LR__3682
23a40     1C 4E 05 F1 | 	add	fp, #28
23a44     A7 12 02 F6 | 	mov	arg01, fp
23a48     18 4E 85 F1 | 	sub	fp, #24
23a4c     A7 14 02 FB | 	rdlong	arg02, fp
23a50     04 4E 85 F1 | 	sub	fp, #4
23a54     20 14 06 F1 | 	add	arg02, #32
23a58     0C 16 06 F6 | 	mov	arg03, #12
23a5c     D8 71 BF FD | 	call	#__system____builtin_memmove
23a60     27 4E 05 F1 | 	add	fp, #39
23a64     A7 2E C2 FA | 	rdbyte	local09, fp
23a68     27 4E 85 F1 | 	sub	fp, #39
23a6c     01 2E CE F7 | 	test	local09, #1 wz
23a70     F4 00 90 AD |  if_e	jmp	#LR__3685
23a74     04 4E 05 F1 | 	add	fp, #4
23a78     A7 30 02 FB | 	rdlong	local10, fp
23a7c     2B 30 06 F1 | 	add	local10, #43
23a80     18 81 48 FC | 	wrbyte	#64, local10
23a84                 | ' 		dp->fn[ 11 ] =  0x40 ;
23a84                 | ' 		for (n = 1; n < 100; n++) {
23a84     0C 4E 05 F1 | 	add	fp, #12
23a88     A7 02 68 FC | 	wrlong	#1, fp
23a8c     10 4E 85 F1 | 	sub	fp, #16
23a90                 | LR__3683
23a90     10 4E 05 F1 | 	add	fp, #16
23a94     A7 20 02 FB | 	rdlong	local02, fp
23a98     10 4E 85 F1 | 	sub	fp, #16
23a9c     64 20 16 F2 | 	cmp	local02, #100 wc
23aa0     70 00 90 3D |  if_ae	jmp	#LR__3684
23aa4     04 4E 05 F1 | 	add	fp, #4
23aa8     A7 12 02 FB | 	rdlong	arg01, fp
23aac     20 12 06 F1 | 	add	arg01, #32
23ab0     18 4E 05 F1 | 	add	fp, #24
23ab4     A7 14 02 F6 | 	mov	arg02, fp
23ab8     10 4E 85 F1 | 	sub	fp, #16
23abc     A7 30 02 FB | 	rdlong	local10, fp
23ac0     0C 30 06 F1 | 	add	local10, #12
23ac4     18 17 02 FB | 	rdlong	arg03, local10
23ac8     04 4E 05 F1 | 	add	fp, #4
23acc     A7 18 02 FB | 	rdlong	arg04, fp
23ad0     10 4E 85 F1 | 	sub	fp, #16
23ad4     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
23ad8     04 4E 05 F1 | 	add	fp, #4
23adc     A7 12 02 FB | 	rdlong	arg01, fp
23ae0     04 4E 85 F1 | 	sub	fp, #4
23ae4     70 FC BF FD | 	call	#_fatfs_cc_dir_find
23ae8     08 4E 05 F1 | 	add	fp, #8
23aec     A7 FA 61 FC | 	wrlong	result1, fp
23af0     00 FA 4D F2 | 	cmps	result1, #0 wz
23af4     08 4E 85 F1 | 	sub	fp, #8
23af8     18 00 90 5D |  if_ne	jmp	#LR__3684
23afc     10 4E 05 F1 | 	add	fp, #16
23b00     A7 30 02 FB | 	rdlong	local10, fp
23b04     01 30 06 F1 | 	add	local10, #1
23b08     A7 30 62 FC | 	wrlong	local10, fp
23b0c     10 4E 85 F1 | 	sub	fp, #16
23b10     7C FF 9F FD | 	jmp	#LR__3683
23b14                 | LR__3684
23b14     10 4E 05 F1 | 	add	fp, #16
23b18     A7 30 02 FB | 	rdlong	local10, fp
23b1c     10 4E 85 F1 | 	sub	fp, #16
23b20     64 30 0E F2 | 	cmp	local10, #100 wz
23b24     07 FA 05 A6 |  if_e	mov	result1, #7
23b28     AC 02 90 AD |  if_e	jmp	#LR__3695
23b2c     08 4E 05 F1 | 	add	fp, #8
23b30     A7 30 02 FB | 	rdlong	local10, fp
23b34     08 4E 85 F1 | 	sub	fp, #8
23b38     04 30 0E F2 | 	cmp	local10, #4 wz
23b3c     08 4E 05 51 |  if_ne	add	fp, #8
23b40     A7 FA 01 5B |  if_ne	rdlong	result1, fp
23b44     08 4E 85 51 |  if_ne	sub	fp, #8
23b48     8C 02 90 5D |  if_ne	jmp	#LR__3695
23b4c     04 4E 05 F1 | 	add	fp, #4
23b50     A7 30 02 FB | 	rdlong	local10, fp
23b54     23 4E 05 F1 | 	add	fp, #35
23b58     A7 1E C2 FA | 	rdbyte	local01, fp
23b5c     27 4E 85 F1 | 	sub	fp, #39
23b60     2B 30 06 F1 | 	add	local10, #43
23b64     18 1F 42 FC | 	wrbyte	local01, local10
23b68                 | LR__3685
23b68     27 4E 05 F1 | 	add	fp, #39
23b6c     A7 20 C2 FA | 	rdbyte	local02, fp
23b70     27 4E 85 F1 | 	sub	fp, #39
23b74     02 20 CE F7 | 	test	local02, #2 wz
23b78     20 00 90 AD |  if_e	jmp	#LR__3686
23b7c     14 4E 05 F1 | 	add	fp, #20
23b80     A7 30 02 FB | 	rdlong	local10, fp
23b84     0C 30 06 F1 | 	add	local10, #12
23b88     0D 30 16 FD | 	qdiv	local10, #13
23b8c     14 4E 85 F1 | 	sub	fp, #20
23b90     18 30 62 FD | 	getqx	local10
23b94     01 30 06 F1 | 	add	local10, #1
23b98     04 00 90 FD | 	jmp	#LR__3687
23b9c                 | LR__3686
23b9c     01 30 06 F6 | 	mov	local10, #1
23ba0                 | LR__3687
23ba0     18 4E 05 F1 | 	add	fp, #24
23ba4     A7 30 62 FC | 	wrlong	local10, fp
23ba8     14 4E 85 F1 | 	sub	fp, #20
23bac     A7 12 02 FB | 	rdlong	arg01, fp
23bb0     18 15 02 F6 | 	mov	arg02, local10
23bb4     04 4E 85 F1 | 	sub	fp, #4
23bb8     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
23bbc     08 4E 05 F1 | 	add	fp, #8
23bc0     A7 FA 61 FC | 	wrlong	result1, fp
23bc4     08 4E 85 F1 | 	sub	fp, #8
23bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
23bcc     38 01 90 5D |  if_ne	jmp	#LR__3692
23bd0     18 4E 05 F1 | 	add	fp, #24
23bd4     A7 30 02 FB | 	rdlong	local10, fp
23bd8     01 30 8E F1 | 	sub	local10, #1 wz
23bdc     A7 30 62 FC | 	wrlong	local10, fp
23be0     18 4E 85 F1 | 	sub	fp, #24
23be4     20 01 90 AD |  if_e	jmp	#LR__3692
23be8     04 4E 05 F1 | 	add	fp, #4
23bec     A7 30 02 FB | 	rdlong	local10, fp
23bf0     18 13 02 F6 | 	mov	arg01, local10
23bf4     14 4E 05 F1 | 	add	fp, #20
23bf8     A7 18 02 FB | 	rdlong	arg04, fp
23bfc     18 4E 85 F1 | 	sub	fp, #24
23c00     05 18 66 F0 | 	shl	arg04, #5
23c04     10 30 06 F1 | 	add	local10, #16
23c08     18 15 02 FB | 	rdlong	arg02, local10
23c0c     0C 15 82 F1 | 	sub	arg02, arg04
23c10     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
23c14     08 4E 05 F1 | 	add	fp, #8
23c18     A7 FA 61 FC | 	wrlong	result1, fp
23c1c     08 4E 85 F1 | 	sub	fp, #8
23c20     00 FA 0D F2 | 	cmp	result1, #0 wz
23c24     E0 00 90 5D |  if_ne	jmp	#LR__3691
23c28     04 4E 05 F1 | 	add	fp, #4
23c2c     A7 12 02 FB | 	rdlong	arg01, fp
23c30     04 4E 85 F1 | 	sub	fp, #4
23c34     20 12 06 F1 | 	add	arg01, #32
23c38     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
23c3c     FD 30 02 F6 | 	mov	local10, result1
23c40     28 4E 05 F1 | 	add	fp, #40
23c44     A7 30 42 FC | 	wrbyte	local10, fp
23c48     28 4E 85 F1 | 	sub	fp, #40
23c4c                 | ' 			sum = sum_sfn(dp->fn);
23c4c                 | ' 			do {
23c4c                 | LR__3688
23c4c     0C 4E 05 F1 | 	add	fp, #12
23c50     A7 12 02 FB | 	rdlong	arg01, fp
23c54     08 4E 85 F1 | 	sub	fp, #8
23c58     A7 1E 02 FB | 	rdlong	local01, fp
23c5c     04 4E 85 F1 | 	sub	fp, #4
23c60     18 1E 06 F1 | 	add	local01, #24
23c64     0F 15 02 FB | 	rdlong	arg02, local01
23c68     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
23c6c     08 4E 05 F1 | 	add	fp, #8
23c70     A7 FA 61 FC | 	wrlong	result1, fp
23c74     00 FA 4D F2 | 	cmps	result1, #0 wz
23c78     08 4E 85 F1 | 	sub	fp, #8
23c7c     88 00 90 5D |  if_ne	jmp	#LR__3690
23c80     0C 4E 05 F1 | 	add	fp, #12
23c84     A7 20 02 FB | 	rdlong	local02, fp
23c88     0C 20 06 F1 | 	add	local02, #12
23c8c     10 13 02 FB | 	rdlong	arg01, local02
23c90     08 4E 85 F1 | 	sub	fp, #8
23c94     A7 1E 02 FB | 	rdlong	local01, fp
23c98     1C 1E 06 F1 | 	add	local01, #28
23c9c     0F 15 02 FB | 	rdlong	arg02, local01
23ca0     14 4E 05 F1 | 	add	fp, #20
23ca4     A7 16 02 FB | 	rdlong	arg03, fp
23ca8     10 4E 05 F1 | 	add	fp, #16
23cac     A7 18 C2 FA | 	rdbyte	arg04, fp
23cb0     28 4E 85 F1 | 	sub	fp, #40
23cb4     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
23cb8     0C 4E 05 F1 | 	add	fp, #12
23cbc     A7 30 02 FB | 	rdlong	local10, fp
23cc0     03 30 06 F1 | 	add	local10, #3
23cc4     18 03 48 FC | 	wrbyte	#1, local10
23cc8     08 4E 85 F1 | 	sub	fp, #8
23ccc     A7 12 02 FB | 	rdlong	arg01, fp
23cd0     04 4E 85 F1 | 	sub	fp, #4
23cd4     00 14 06 F6 | 	mov	arg02, #0
23cd8     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
23cdc     08 4E 05 F1 | 	add	fp, #8
23ce0     A7 FA 61 FC | 	wrlong	result1, fp
23ce4     00 FA 4D F2 | 	cmps	result1, #0 wz
23ce8     08 4E 85 F1 | 	sub	fp, #8
23cec     18 00 90 5D |  if_ne	jmp	#LR__3689
23cf0     18 4E 05 F1 | 	add	fp, #24
23cf4     A7 30 02 FB | 	rdlong	local10, fp
23cf8     01 30 8E F1 | 	sub	local10, #1 wz
23cfc     A7 30 62 FC | 	wrlong	local10, fp
23d00     18 4E 85 F1 | 	sub	fp, #24
23d04     44 FF 9F 5D |  if_ne	jmp	#LR__3688
23d08                 | LR__3689
23d08                 | LR__3690
23d08                 | LR__3691
23d08                 | LR__3692
23d08     08 4E 05 F1 | 	add	fp, #8
23d0c     A7 30 0A FB | 	rdlong	local10, fp wz
23d10     08 4E 85 F1 | 	sub	fp, #8
23d14     B4 00 90 5D |  if_ne	jmp	#LR__3694
23d18     0C 4E 05 F1 | 	add	fp, #12
23d1c     A7 12 02 FB | 	rdlong	arg01, fp
23d20     08 4E 85 F1 | 	sub	fp, #8
23d24     A7 1E 02 FB | 	rdlong	local01, fp
23d28     04 4E 85 F1 | 	sub	fp, #4
23d2c     18 1E 06 F1 | 	add	local01, #24
23d30     0F 15 02 FB | 	rdlong	arg02, local01
23d34     18 E6 BF FD | 	call	#_fatfs_cc_move_window
23d38     08 4E 05 F1 | 	add	fp, #8
23d3c     A7 FA 61 FC | 	wrlong	result1, fp
23d40     08 4E 85 F1 | 	sub	fp, #8
23d44     00 FA 0D F2 | 	cmp	result1, #0 wz
23d48     80 00 90 5D |  if_ne	jmp	#LR__3693
23d4c     04 4E 05 F1 | 	add	fp, #4
23d50     A7 20 02 FB | 	rdlong	local02, fp
23d54     04 4E 85 F1 | 	sub	fp, #4
23d58     1C 20 06 F1 | 	add	local02, #28
23d5c     10 13 02 FB | 	rdlong	arg01, local02
23d60     00 14 06 F6 | 	mov	arg02, #0
23d64     20 16 06 F6 | 	mov	arg03, #32
23d68     98 00 A0 FD | 	call	#\builtin_bytefill_
23d6c     04 4E 05 F1 | 	add	fp, #4
23d70     A7 14 02 FB | 	rdlong	arg02, fp
23d74     0A 1F 02 F6 | 	mov	local01, arg02
23d78     1C 1E 06 F1 | 	add	local01, #28
23d7c     0F 13 02 FB | 	rdlong	arg01, local01
23d80     04 4E 85 F1 | 	sub	fp, #4
23d84     20 14 06 F1 | 	add	arg02, #32
23d88     0B 16 06 F6 | 	mov	arg03, #11
23d8c     A8 6E BF FD | 	call	#__system____builtin_memmove
23d90     04 4E 05 F1 | 	add	fp, #4
23d94     A7 2E 02 FB | 	rdlong	local09, fp
23d98     17 31 02 F6 | 	mov	local10, local09
23d9c     1C 30 06 F1 | 	add	local10, #28
23da0     18 1F 02 FB | 	rdlong	local01, local10
23da4     2B 2E 06 F1 | 	add	local09, #43
23da8     17 31 C2 FA | 	rdbyte	local10, local09
23dac     18 30 06 F5 | 	and	local10, #24
23db0     0C 1E 06 F1 | 	add	local01, #12
23db4     0F 31 42 FC | 	wrbyte	local10, local01
23db8     08 4E 05 F1 | 	add	fp, #8
23dbc     A7 30 02 FB | 	rdlong	local10, fp
23dc0     0C 4E 85 F1 | 	sub	fp, #12
23dc4     03 30 06 F1 | 	add	local10, #3
23dc8     18 03 48 FC | 	wrbyte	#1, local10
23dcc                 | LR__3693
23dcc                 | LR__3694
23dcc                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
23dcc                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
23dcc                 | ' 
23dcc                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
23dcc                 | ' 
23dcc                 | ' 			fs->wflag = 1;
23dcc                 | ' 		}
23dcc                 | ' 	}
23dcc                 | ' 
23dcc                 | ' 	return res;
23dcc     08 4E 05 F1 | 	add	fp, #8
23dd0     A7 FA 01 FB | 	rdlong	result1, fp
23dd4     08 4E 85 F1 | 	sub	fp, #8
23dd8                 | LR__3695
23dd8     A7 F0 03 F6 | 	mov	ptra, fp
23ddc     B2 00 A0 FD | 	call	#popregs_
23de0                 | _fatfs_cc_dir_register_ret
23de0     2D 00 64 FD | 	ret
23de4                 | 
23de4                 | _fatfs_cc_dir_remove
23de4     05 4A 05 F6 | 	mov	COUNT_, #5
23de8     A8 00 A0 FD | 	call	#pushregs_
23dec     09 1F 02 F6 | 	mov	local01, arg01
23df0     0F 21 02 FB | 	rdlong	local02, local01
23df4     10 1E 06 F1 | 	add	local01, #16
23df8     0F 23 02 FB | 	rdlong	local03, local01
23dfc     1C 1E 06 F1 | 	add	local01, #28
23e00     0F 15 02 FB | 	rdlong	arg02, local01
23e04     2C 1E 86 F1 | 	sub	local01, #44
23e08     FF FF 7F FF 
23e0c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
23e10     00 24 06 A6 |  if_e	mov	local04, #0
23e14     18 00 90 AD |  if_e	jmp	#LR__3700
23e18     0F 13 02 F6 | 	mov	arg01, local01
23e1c     2C 1E 06 F1 | 	add	local01, #44
23e20     0F 15 02 FB | 	rdlong	arg02, local01
23e24     2C 1E 86 F1 | 	sub	local01, #44
23e28     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
23e2c     FD 24 02 F6 | 	mov	local04, result1
23e30                 | LR__3700
23e30     12 27 0A F6 | 	mov	local05, local04 wz
23e34     64 00 90 5D |  if_ne	jmp	#LR__3703
23e38                 | ' 		do {
23e38                 | LR__3701
23e38     18 1E 06 F1 | 	add	local01, #24
23e3c     0F 15 02 FB | 	rdlong	arg02, local01
23e40     18 1E 86 F1 | 	sub	local01, #24
23e44     10 13 02 F6 | 	mov	arg01, local02
23e48     04 E5 BF FD | 	call	#_fatfs_cc_move_window
23e4c     FD 26 0A F6 | 	mov	local05, result1 wz
23e50     40 00 90 5D |  if_ne	jmp	#LR__3702
23e54     1C 1E 06 F1 | 	add	local01, #28
23e58     0F 25 02 FB | 	rdlong	local04, local01
23e5c     12 CB 49 FC | 	wrbyte	#229, local04
23e60     03 20 06 F1 | 	add	local02, #3
23e64     10 03 48 FC | 	wrbyte	#1, local02
23e68     03 20 86 F1 | 	sub	local02, #3
23e6c     0C 1E 86 F1 | 	sub	local01, #12
23e70     0F 25 02 FB | 	rdlong	local04, local01
23e74     10 1E 86 F1 | 	sub	local01, #16
23e78     11 25 12 F2 | 	cmp	local04, local03 wc
23e7c     14 00 90 3D |  if_ae	jmp	#LR__3702
23e80     0F 13 02 F6 | 	mov	arg01, local01
23e84     00 14 06 F6 | 	mov	arg02, #0
23e88     90 EF BF FD | 	call	#_fatfs_cc_dir_next
23e8c     FD 26 0A F6 | 	mov	local05, result1 wz
23e90     A4 FF 9F AD |  if_e	jmp	#LR__3701
23e94                 | LR__3702
23e94     04 26 0E F2 | 	cmp	local05, #4 wz
23e98     02 26 06 A6 |  if_e	mov	local05, #2
23e9c                 | LR__3703
23e9c                 | ' 	}
23e9c                 | ' #line 2590 "ff.c"
23e9c                 | ' 	return res;
23e9c     13 FB 01 F6 | 	mov	result1, local05
23ea0     A7 F0 03 F6 | 	mov	ptra, fp
23ea4     B2 00 A0 FD | 	call	#popregs_
23ea8                 | _fatfs_cc_dir_remove_ret
23ea8     2D 00 64 FD | 	ret
23eac                 | 
23eac                 | _fatfs_cc_get_fileinfo
23eac     0F 4A 05 F6 | 	mov	COUNT_, #15
23eb0     A8 00 A0 FD | 	call	#pushregs_
23eb4     09 1F 02 F6 | 	mov	local01, arg01
23eb8     0A 21 02 F6 | 	mov	local02, arg02
23ebc     0F 23 02 FB | 	rdlong	local03, local01
23ec0     1C 20 06 F1 | 	add	local02, #28
23ec4     10 01 48 FC | 	wrbyte	#0, local02
23ec8     1C 20 86 F1 | 	sub	local02, #28
23ecc     18 1E 06 F1 | 	add	local01, #24
23ed0     0F 25 0A FB | 	rdlong	local04, local01 wz
23ed4     18 1E 86 F1 | 	sub	local01, #24
23ed8     90 03 90 AD |  if_e	jmp	#LR__3724
23edc     2C 1E 06 F1 | 	add	local01, #44
23ee0     0F 25 02 FB | 	rdlong	local04, local01
23ee4     2C 1E 86 F1 | 	sub	local01, #44
23ee8     FF FF 7F FF 
23eec     FF 25 0E F2 | 	cmp	local04, ##-1 wz
23ef0     D8 00 90 AD |  if_e	jmp	#LR__3713
23ef4     00 26 06 F6 | 	mov	local05, #0
23ef8     00 28 06 F6 | 	mov	local06, #0
23efc     00 2A 06 F6 | 	mov	local07, #0
23f00                 | ' 			si = di = 0;
23f00                 | ' 			hs = 0;
23f00                 | ' 			while (fs->lfnbuf[si] != 0) {
23f00                 | LR__3710
23f00     0C 22 06 F1 | 	add	local03, #12
23f04     11 25 02 FB | 	rdlong	local04, local03
23f08     0C 22 86 F1 | 	sub	local03, #12
23f0c     14 2D 02 F6 | 	mov	local08, local06
23f10     01 2C 66 F0 | 	shl	local08, #1
23f14     12 2D 02 F1 | 	add	local08, local04
23f18     16 25 EA FA | 	rdword	local04, local08 wz
23f1c     90 00 90 AD |  if_e	jmp	#LR__3712
23f20     0C 22 06 F1 | 	add	local03, #12
23f24     11 2F 02 FB | 	rdlong	local09, local03
23f28     0C 22 86 F1 | 	sub	local03, #12
23f2c     14 31 02 F6 | 	mov	local10, local06
23f30     01 30 66 F0 | 	shl	local10, #1
23f34     17 31 02 F1 | 	add	local10, local09
23f38     18 33 E2 FA | 	rdword	local11, local10
23f3c     15 25 02 F6 | 	mov	local04, local07
23f40     0F 24 4E F7 | 	zerox	local04, #15 wz
23f44     01 28 06 F1 | 	add	local06, #1
23f48     24 00 90 5D |  if_ne	jmp	#LR__3711
23f4c     19 35 32 F9 | 	getword	local12, local11, #0
23f50     6C 00 00 FF 
23f54     00 34 16 F2 | 	cmp	local12, ##55296 wc
23f58     14 00 90 CD |  if_b	jmp	#LR__3711
23f5c     19 37 32 F9 | 	getword	local13, local11, #0
23f60     70 00 00 FF 
23f64     00 36 16 F2 | 	cmp	local13, ##57344 wc
23f68     19 2B 02 C6 |  if_b	mov	local07, local11
23f6c                 | ' 					hs = wc; continue;
23f6c     90 FF 9F CD |  if_b	jmp	#LR__3710
23f70                 | LR__3711
23f70     15 13 32 F9 | 	getword	arg01, local07, #0
23f74     10 12 66 F0 | 	shl	arg01, #16
23f78     19 33 32 F9 | 	getword	local11, local11, #0
23f7c     19 13 42 F5 | 	or	arg01, local11
23f80     13 15 02 F6 | 	mov	arg02, local05
23f84     1C 20 06 F1 | 	add	local02, #28
23f88     10 15 02 F1 | 	add	arg02, local02
23f8c     FF 16 06 F6 | 	mov	arg03, #255
23f90     13 17 82 F1 | 	sub	arg03, local05
23f94     1C 20 86 F1 | 	sub	local02, #28
23f98     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
23f9c     FD 38 0A F6 | 	mov	local14, result1 wz
23fa0     00 26 06 A6 |  if_e	mov	local05, #0
23fa4     1C 27 02 51 |  if_ne	add	local05, local14
23fa8     00 2A 06 56 |  if_ne	mov	local07, #0
23fac     50 FF 9F 5D |  if_ne	jmp	#LR__3710
23fb0                 | LR__3712
23fb0     15 25 02 F6 | 	mov	local04, local07
23fb4     0F 24 4E F7 | 	zerox	local04, #15 wz
23fb8     00 26 06 56 |  if_ne	mov	local05, #0
23fbc     1C 20 06 F1 | 	add	local02, #28
23fc0     10 27 02 F1 | 	add	local05, local02
23fc4     13 01 48 FC | 	wrbyte	#0, local05
23fc8     1C 20 86 F1 | 	sub	local02, #28
23fcc                 | LR__3713
23fcc     00 26 06 F6 | 	mov	local05, #0
23fd0     00 28 06 F6 | 	mov	local06, #0
23fd4                 | ' 			fno->fname[di] = 0;
23fd4                 | ' 		}
23fd4                 | ' 	}
23fd4                 | ' 
23fd4                 | ' 	si = di = 0;
23fd4                 | ' 	while (si < 11) {
23fd4                 | LR__3714
23fd4     0B 28 16 F2 | 	cmp	local06, #11 wc
23fd8     20 01 90 3D |  if_ae	jmp	#LR__3717
23fdc     1C 1E 06 F1 | 	add	local01, #28
23fe0     0F 2F 02 FB | 	rdlong	local09, local01
23fe4     1C 1E 86 F1 | 	sub	local01, #28
23fe8     14 31 02 F6 | 	mov	local10, local06
23fec     17 31 02 F1 | 	add	local10, local09
23ff0     18 33 C2 FA | 	rdbyte	local11, local10
23ff4     19 25 32 F9 | 	getword	local04, local11, #0
23ff8     20 24 0E F2 | 	cmp	local04, #32 wz
23ffc     01 28 06 F1 | 	add	local06, #1
24000     D0 FF 9F AD |  if_e	jmp	#LR__3714
24004     19 25 32 F9 | 	getword	local04, local11, #0
24008     05 24 0E F2 | 	cmp	local04, #5 wz
2400c     E5 32 06 A6 |  if_e	mov	local11, #229
24010     09 28 0E F2 | 	cmp	local06, #9 wz
24014     20 00 90 5D |  if_ne	jmp	#LR__3715
24018     0C 26 16 F2 | 	cmp	local05, #12 wc
2401c     18 00 90 3D |  if_ae	jmp	#LR__3715
24020     13 37 02 F6 | 	mov	local13, local05
24024     0C 20 06 F1 | 	add	local02, #12
24028     10 37 02 F1 | 	add	local13, local02
2402c     1B 5D 48 FC | 	wrbyte	#46, local13
24030     01 26 06 F1 | 	add	local05, #1
24034     0C 20 86 F1 | 	sub	local02, #12
24038                 | LR__3715
24038     19 13 32 F9 | 	getword	arg01, local11, #0
2403c     07 12 4E F7 | 	zerox	arg01, #7 wz
24040     00 FA 05 56 |  if_ne	mov	result1, #0
24044                 | ' 
24044                 | ' 	return 0;
24044     00 FA 05 A6 |  if_e	mov	result1, #0
24048     00 FA 0D F2 | 	cmp	result1, #0 wz
2404c     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
24050     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
24054     50 00 90 AD |  if_e	jmp	#LR__3716
24058     1C 1E 06 F1 | 	add	local01, #28
2405c     0F 31 02 FB | 	rdlong	local10, local01
24060     1C 1E 86 F1 | 	sub	local01, #28
24064     14 2D 02 F6 | 	mov	local08, local06
24068     18 2D 02 F1 | 	add	local08, local10
2406c     16 13 CA FA | 	rdbyte	arg01, local08 wz
24070     00 FA 05 56 |  if_ne	mov	result1, #0
24074                 | ' 
24074                 | ' 	return 0;
24074     00 FA 05 A6 |  if_e	mov	result1, #0
24078     00 FA 0D F2 | 	cmp	result1, #0 wz
2407c     28 00 90 AD |  if_e	jmp	#LR__3716
24080     19 33 32 F9 | 	getword	local11, local11, #0
24084     08 32 66 F0 | 	shl	local11, #8
24088     1C 1E 06 F1 | 	add	local01, #28
2408c     0F 39 02 FB | 	rdlong	local14, local01
24090     1C 1E 86 F1 | 	sub	local01, #28
24094     14 2F 02 F6 | 	mov	local09, local06
24098     1C 2F 02 F1 | 	add	local09, local14
2409c     17 35 C2 FA | 	rdbyte	local12, local09
240a0     1A 33 42 F5 | 	or	local11, local12
240a4     01 28 06 F1 | 	add	local06, #1
240a8                 | LR__3716
240a8     19 13 02 F6 | 	mov	arg01, local11
240ac     01 00 00 FF 
240b0     52 15 06 F6 | 	mov	arg02, ##850
240b4     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
240b8     FD 32 02 F6 | 	mov	local11, result1
240bc     19 25 02 F6 | 	mov	local04, local11
240c0     0F 24 4E F7 | 	zerox	local04, #15 wz
240c4     00 26 06 A6 |  if_e	mov	local05, #0
240c8     30 00 90 AD |  if_e	jmp	#LR__3717
240cc     19 13 32 F9 | 	getword	arg01, local11, #0
240d0     13 15 02 F6 | 	mov	arg02, local05
240d4     0C 20 06 F1 | 	add	local02, #12
240d8     10 15 02 F1 | 	add	arg02, local02
240dc     0C 16 06 F6 | 	mov	arg03, #12
240e0     13 17 82 F1 | 	sub	arg03, local05
240e4     0C 20 86 F1 | 	sub	local02, #12
240e8     EC DF BF FD | 	call	#_fatfs_cc_put_utf
240ec     FD 38 0A F6 | 	mov	local14, result1 wz
240f0     00 26 06 A6 |  if_e	mov	local05, #0
240f4     1C 27 02 51 |  if_ne	add	local05, local14
240f8     D8 FE 9F 5D |  if_ne	jmp	#LR__3714
240fc                 | LR__3717
240fc     13 25 02 F6 | 	mov	local04, local05
24100     0C 20 06 F1 | 	add	local02, #12
24104     10 25 02 F1 | 	add	local04, local02
24108     12 01 48 FC | 	wrbyte	#0, local04
2410c     10 20 06 F1 | 	add	local02, #16
24110     10 25 CA FA | 	rdbyte	local04, local02 wz
24114     1C 20 86 F1 | 	sub	local02, #28
24118     F8 00 90 5D |  if_ne	jmp	#LR__3723
2411c     00 26 0E F2 | 	cmp	local05, #0 wz
24120     1C 00 90 5D |  if_ne	jmp	#LR__3718
24124     13 37 02 F6 | 	mov	local13, local05
24128     1C 20 06 F1 | 	add	local02, #28
2412c     10 37 02 F1 | 	add	local13, local02
24130     1B 7F 48 FC | 	wrbyte	#63, local13
24134     01 26 06 F1 | 	add	local05, #1
24138     1C 20 86 F1 | 	sub	local02, #28
2413c     A4 00 90 FD | 	jmp	#LR__3722
24140                 | LR__3718
24140                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
24140     00 26 06 F6 | 	mov	local05, #0
24144     00 28 06 F6 | 	mov	local06, #0
24148     08 3A 06 F6 | 	mov	local15, #8
2414c                 | LR__3719
2414c     14 25 02 F6 | 	mov	local04, local06
24150     0C 20 06 F1 | 	add	local02, #12
24154     10 25 02 F1 | 	add	local04, local02
24158     12 37 CA FA | 	rdbyte	local13, local04 wz
2415c     0C 20 86 F1 | 	sub	local02, #12
24160     80 00 90 AD |  if_e	jmp	#LR__3721
24164     14 2D 02 F6 | 	mov	local08, local06
24168     0C 20 06 F1 | 	add	local02, #12
2416c     10 2D 02 F1 | 	add	local08, local02
24170     16 33 C2 FA | 	rdbyte	local11, local08
24174     19 39 32 F9 | 	getword	local14, local11, #0
24178     2E 38 0E F2 | 	cmp	local14, #46 wz
2417c     0C 20 86 F1 | 	sub	local02, #12
24180     10 3A 06 A6 |  if_e	mov	local15, #16
24184     19 39 32 F9 | 	getword	local14, local11, #0
24188     41 38 16 F2 | 	cmp	local14, #65 wc
2418c     30 00 90 CD |  if_b	jmp	#LR__3720
24190     19 2D 32 F9 | 	getword	local08, local11, #0
24194     5B 2C 16 F2 | 	cmp	local08, #91 wc
24198     24 00 90 3D |  if_ae	jmp	#LR__3720
2419c     1C 1E 06 F1 | 	add	local01, #28
241a0     0F 2F 02 FB | 	rdlong	local09, local01
241a4     1C 1E 86 F1 | 	sub	local01, #28
241a8     0C 2E 06 F1 | 	add	local09, #12
241ac     17 31 C2 FA | 	rdbyte	local10, local09
241b0     1D 39 E2 F8 | 	getbyte	local14, local15, #0
241b4     1C 31 CA F7 | 	test	local10, local14 wz
241b8     19 33 32 59 |  if_ne	getword	local11, local11, #0
241bc     20 32 06 51 |  if_ne	add	local11, #32
241c0                 | LR__3720
241c0     13 39 02 F6 | 	mov	local14, local05
241c4     1C 20 06 F1 | 	add	local02, #28
241c8     10 39 02 F1 | 	add	local14, local02
241cc     19 33 32 F9 | 	getword	local11, local11, #0
241d0     1C 33 42 FC | 	wrbyte	local11, local14
241d4     01 28 06 F1 | 	add	local06, #1
241d8     01 26 06 F1 | 	add	local05, #1
241dc     1C 20 86 F1 | 	sub	local02, #28
241e0     68 FF 9F FD | 	jmp	#LR__3719
241e4                 | LR__3721
241e4                 | LR__3722
241e4     1C 20 06 F1 | 	add	local02, #28
241e8     10 27 02 F1 | 	add	local05, local02
241ec     13 01 48 FC | 	wrbyte	#0, local05
241f0     1C 1E 06 F1 | 	add	local01, #28
241f4     0F 25 02 FB | 	rdlong	local04, local01
241f8     1C 1E 86 F1 | 	sub	local01, #28
241fc     0C 24 06 F1 | 	add	local04, #12
24200     12 37 CA FA | 	rdbyte	local13, local04 wz
24204     1C 20 86 F1 | 	sub	local02, #28
24208     0C 20 06 A1 |  if_e	add	local02, #12
2420c     10 01 48 AC |  if_e	wrbyte	#0, local02
24210     0C 20 86 A1 |  if_e	sub	local02, #12
24214                 | LR__3723
24214     1C 1E 06 F1 | 	add	local01, #28
24218     0F 35 02 FB | 	rdlong	local12, local01
2421c     0B 34 06 F1 | 	add	local12, #11
24220     1A 25 C2 FA | 	rdbyte	local04, local12
24224     3F 24 06 F5 | 	and	local04, #63
24228     08 20 06 F1 | 	add	local02, #8
2422c     10 25 42 FC | 	wrbyte	local04, local02
24230     08 20 86 F1 | 	sub	local02, #8
24234     0F 13 02 FB | 	rdlong	arg01, local01
24238     1C 12 06 F1 | 	add	arg01, #28
2423c                 | ' {
2423c                 | ' 
2423c                 | ' 	return *((DWORD*)ptr);
2423c     09 FB 01 FB | 	rdlong	result1, arg01
24240     10 FB 61 FC | 	wrlong	result1, local02
24244     0F 13 02 FB | 	rdlong	arg01, local01
24248     16 12 06 F1 | 	add	arg01, #22
2424c                 | ' {
2424c                 | ' 
2424c                 | ' 	return *((WORD*)ptr);
2424c     09 FB E1 FA | 	rdword	result1, arg01
24250     06 20 06 F1 | 	add	local02, #6
24254     10 FB 51 FC | 	wrword	result1, local02
24258     0F 13 02 FB | 	rdlong	arg01, local01
2425c     18 12 06 F1 | 	add	arg01, #24
24260                 | ' {
24260                 | ' 
24260                 | ' 	return *((WORD*)ptr);
24260     09 FB E1 FA | 	rdword	result1, arg01
24264     02 20 86 F1 | 	sub	local02, #2
24268     10 FB 51 FC | 	wrword	result1, local02
2426c                 | LR__3724
2426c     A7 F0 03 F6 | 	mov	ptra, fp
24270     B2 00 A0 FD | 	call	#popregs_
24274                 | _fatfs_cc_get_fileinfo_ret
24274     2D 00 64 FD | 	ret
24278                 | 
24278                 | _fatfs_cc_create_name
24278     0D 4A 05 F6 | 	mov	COUNT_, #13
2427c     A8 00 A0 FD | 	call	#pushregs_
24280     34 F0 07 F1 | 	add	ptra, #52
24284     04 4E 05 F1 | 	add	fp, #4
24288     A7 12 62 FC | 	wrlong	arg01, fp
2428c     04 4E 05 F1 | 	add	fp, #4
24290     A7 14 62 FC | 	wrlong	arg02, fp
24294     0A FB 01 FB | 	rdlong	result1, arg02
24298     28 4E 05 F1 | 	add	fp, #40
2429c     A7 FA 61 FC | 	wrlong	result1, fp
242a0     2C 4E 85 F1 | 	sub	fp, #44
242a4     A7 FA 01 FB | 	rdlong	result1, fp
242a8     FD 1E 02 FB | 	rdlong	local01, result1
242ac     0C 1E 06 F1 | 	add	local01, #12
242b0     0F 21 02 FB | 	rdlong	local02, local01
242b4     14 4E 05 F1 | 	add	fp, #20
242b8     A7 20 62 FC | 	wrlong	local02, fp
242bc     14 4E 05 F1 | 	add	fp, #20
242c0     A7 00 68 FC | 	wrlong	#0, fp
242c4     2C 4E 85 F1 | 	sub	fp, #44
242c8                 | ' 
242c8                 | ' 
242c8                 | ' 
242c8                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
242c8                 | ' 	for (;;) {
242c8                 | LR__3730
242c8     30 4E 05 F1 | 	add	fp, #48
242cc     A7 12 02 F6 | 	mov	arg01, fp
242d0     30 4E 85 F1 | 	sub	fp, #48
242d4     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
242d8     1C 4E 05 F1 | 	add	fp, #28
242dc     A7 FA 61 FC | 	wrlong	result1, fp
242e0     1C 4E 85 F1 | 	sub	fp, #28
242e4     FF FF 7F FF 
242e8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
242ec     06 FA 05 A6 |  if_e	mov	result1, #6
242f0     74 08 90 AD |  if_e	jmp	#LR__3770
242f4     1C 4E 05 F1 | 	add	fp, #28
242f8     A7 1E 02 FB | 	rdlong	local01, fp
242fc     1C 4E 85 F1 | 	sub	fp, #28
24300     80 00 00 FF 
24304     00 1E 16 F2 | 	cmp	local01, ##65536 wc
24308     3C 00 90 CD |  if_b	jmp	#LR__3731
2430c     18 4E 05 F1 | 	add	fp, #24
24310     A7 22 02 FB | 	rdlong	local03, fp
24314     14 4E 05 F1 | 	add	fp, #20
24318     A7 1E 02 FB | 	rdlong	local01, fp
2431c     0F 25 02 F6 | 	mov	local04, local01
24320     01 24 06 F1 | 	add	local04, #1
24324     A7 24 62 FC | 	wrlong	local04, fp
24328     01 1E 66 F0 | 	shl	local01, #1
2432c     11 1F 02 F1 | 	add	local01, local03
24330     10 4E 85 F1 | 	sub	fp, #16
24334     A7 26 02 FB | 	rdlong	local05, fp
24338     1C 4E 85 F1 | 	sub	fp, #28
2433c     13 29 02 F6 | 	mov	local06, local05
24340     10 28 46 F0 | 	shr	local06, #16
24344     0F 29 52 FC | 	wrword	local06, local01
24348                 | LR__3731
24348     1C 4E 05 F1 | 	add	fp, #28
2434c     A7 1E 02 FB | 	rdlong	local01, fp
24350     08 4E 85 F1 | 	sub	fp, #8
24354     A7 1E 52 FC | 	wrword	local01, fp
24358     A7 1E E2 FA | 	rdword	local01, fp
2435c     14 4E 85 F1 | 	sub	fp, #20
24360     20 1E 16 F2 | 	cmp	local01, #32 wc
24364     B0 00 90 CD |  if_b	jmp	#LR__3733
24368     14 4E 05 F1 | 	add	fp, #20
2436c     A7 1E E2 FA | 	rdword	local01, fp
24370     14 4E 85 F1 | 	sub	fp, #20
24374     2F 1E 0E F2 | 	cmp	local01, #47 wz
24378     14 4E 05 51 |  if_ne	add	fp, #20
2437c     A7 24 E2 5A |  if_ne	rdword	local04, fp
24380     14 4E 85 51 |  if_ne	sub	fp, #20
24384     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
24388     8C 00 90 AD |  if_e	jmp	#LR__3733
2438c     14 4E 05 F1 | 	add	fp, #20
24390     A7 12 E2 FA | 	rdword	arg01, fp
24394     14 4E 85 F1 | 	sub	fp, #20
24398     80 12 16 F2 | 	cmp	arg01, #128 wc
2439c     24 00 90 3D |  if_ae	jmp	#LR__3732
243a0     51 01 00 FF 
243a4     CC 12 06 F6 | 	mov	arg01, ##@LR__4392
243a8     14 4E 05 F1 | 	add	fp, #20
243ac     A7 14 E2 FA | 	rdword	arg02, fp
243b0     14 4E 85 F1 | 	sub	fp, #20
243b4     FC D0 BF FD | 	call	#_fatfs_cc_strchr
243b8     00 FA 0D F2 | 	cmp	result1, #0 wz
243bc     06 FA 05 56 |  if_ne	mov	result1, #6
243c0     A4 07 90 5D |  if_ne	jmp	#LR__3770
243c4                 | LR__3732
243c4     2C 4E 05 F1 | 	add	fp, #44
243c8     A7 28 02 FB | 	rdlong	local06, fp
243cc     2C 4E 85 F1 | 	sub	fp, #44
243d0     FF 28 16 F2 | 	cmp	local06, #255 wc
243d4     06 FA 05 36 |  if_ae	mov	result1, #6
243d8     8C 07 90 3D |  if_ae	jmp	#LR__3770
243dc     18 4E 05 F1 | 	add	fp, #24
243e0     A7 22 02 FB | 	rdlong	local03, fp
243e4     14 4E 05 F1 | 	add	fp, #20
243e8     A7 20 02 FB | 	rdlong	local02, fp
243ec     10 25 02 F6 | 	mov	local04, local02
243f0     01 24 06 F1 | 	add	local04, #1
243f4     A7 24 62 FC | 	wrlong	local04, fp
243f8     10 1F 02 F6 | 	mov	local01, local02
243fc     01 1E 66 F0 | 	shl	local01, #1
24400     11 1F 02 F1 | 	add	local01, local03
24404     18 4E 85 F1 | 	sub	fp, #24
24408     A7 28 E2 FA | 	rdword	local06, fp
2440c     14 4E 85 F1 | 	sub	fp, #20
24410     0F 29 52 FC | 	wrword	local06, local01
24414     B0 FE 9F FD | 	jmp	#LR__3730
24418                 | LR__3733
24418     14 4E 05 F1 | 	add	fp, #20
2441c     A7 2A E2 FA | 	rdword	local07, fp
24420     14 4E 85 F1 | 	sub	fp, #20
24424     20 2A 16 F2 | 	cmp	local07, #32 wc
24428     10 4E 05 C1 |  if_b	add	fp, #16
2442c     A7 08 48 CC |  if_b	wrbyte	#4, fp
24430     10 4E 85 C1 |  if_b	sub	fp, #16
24434     74 00 90 CD |  if_b	jmp	#LR__3738
24438     97 24 48 FB | 	callpa	#(@LR__3736-@LR__3734)>>2,fcache_load_ptr_
2443c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2443c                 | LR__3734
2443c     30 4E 05 F1 | 	add	fp, #48
24440     A7 24 02 FB | 	rdlong	local04, fp
24444     30 4E 85 F1 | 	sub	fp, #48
24448     12 2B C2 FA | 	rdbyte	local07, local04
2444c     2F 2A 0E F2 | 	cmp	local07, #47 wz
24450     18 00 90 AD |  if_e	jmp	#LR__3735
24454     30 4E 05 F1 | 	add	fp, #48
24458     A7 24 02 FB | 	rdlong	local04, fp
2445c     30 4E 85 F1 | 	sub	fp, #48
24460     12 21 C2 FA | 	rdbyte	local02, local04
24464     5C 20 0E F2 | 	cmp	local02, #92 wz
24468     18 00 90 5D |  if_ne	jmp	#LR__3737
2446c                 | LR__3735
2446c     30 4E 05 F1 | 	add	fp, #48
24470     A7 1E 02 FB | 	rdlong	local01, fp
24474     01 1E 06 F1 | 	add	local01, #1
24478     A7 1E 62 FC | 	wrlong	local01, fp
2447c     30 4E 85 F1 | 	sub	fp, #48
24480     B8 FF 9F FD | 	jmp	#LR__3734
24484                 | LR__3736
24484                 | LR__3737
24484     10 4E 05 F1 | 	add	fp, #16
24488     A7 00 48 FC | 	wrbyte	#0, fp
2448c     20 4E 05 F1 | 	add	fp, #32
24490     A7 28 02 FB | 	rdlong	local06, fp
24494     30 4E 85 F1 | 	sub	fp, #48
24498     14 2B C2 FA | 	rdbyte	local07, local06
2449c     20 2A 16 F2 | 	cmp	local07, #32 wc
244a0     10 4E 05 C1 |  if_b	add	fp, #16
244a4     A7 08 48 CC |  if_b	wrbyte	#4, fp
244a8     10 4E 85 C1 |  if_b	sub	fp, #16
244ac                 | LR__3738
244ac     08 4E 05 F1 | 	add	fp, #8
244b0     A7 2A 02 FB | 	rdlong	local07, fp
244b4     28 4E 05 F1 | 	add	fp, #40
244b8     A7 1E 02 FB | 	rdlong	local01, fp
244bc     30 4E 85 F1 | 	sub	fp, #48
244c0     15 1F 62 FC | 	wrlong	local01, local07
244c4     97 38 48 FB | 	callpa	#(@LR__3740-@LR__3739)>>2,fcache_load_ptr_
244c8                 | ' 	}
244c8                 | ' 	*path = p;
244c8                 | ' #line 2862 "ff.c"
244c8                 | ' 	while (di) {
244c8                 | LR__3739
244c8     2C 4E 05 F1 | 	add	fp, #44
244cc     A7 2A 0A FB | 	rdlong	local07, fp wz
244d0     2C 4E 85 F1 | 	sub	fp, #44
244d4     60 00 90 AD |  if_e	jmp	#LR__3741
244d8     18 4E 05 F1 | 	add	fp, #24
244dc     A7 28 02 FB | 	rdlong	local06, fp
244e0     14 4E 05 F1 | 	add	fp, #20
244e4     A7 24 02 FB | 	rdlong	local04, fp
244e8     01 24 86 F1 | 	sub	local04, #1
244ec     01 24 66 F0 | 	shl	local04, #1
244f0     14 25 02 F1 | 	add	local04, local06
244f4     12 29 E2 FA | 	rdword	local06, local04
244f8     18 4E 85 F1 | 	sub	fp, #24
244fc     A7 28 52 FC | 	wrword	local06, fp
24500     A7 2A E2 FA | 	rdword	local07, fp
24504     14 4E 85 F1 | 	sub	fp, #20
24508     20 2A 0E F2 | 	cmp	local07, #32 wz
2450c     14 4E 05 51 |  if_ne	add	fp, #20
24510     A7 1E E2 5A |  if_ne	rdword	local01, fp
24514     14 4E 85 51 |  if_ne	sub	fp, #20
24518     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2451c     18 00 90 5D |  if_ne	jmp	#LR__3741
24520     2C 4E 05 F1 | 	add	fp, #44
24524     A7 1E 02 FB | 	rdlong	local01, fp
24528     01 1E 86 F1 | 	sub	local01, #1
2452c     A7 1E 62 FC | 	wrlong	local01, fp
24530     2C 4E 85 F1 | 	sub	fp, #44
24534     90 FF 9F FD | 	jmp	#LR__3739
24538                 | LR__3740
24538                 | LR__3741
24538     18 4E 05 F1 | 	add	fp, #24
2453c     A7 2C 02 FB | 	rdlong	local08, fp
24540     14 4E 05 F1 | 	add	fp, #20
24544     A7 24 02 FB | 	rdlong	local04, fp
24548     01 24 66 F0 | 	shl	local04, #1
2454c     16 25 02 F1 | 	add	local04, local08
24550     12 01 58 FC | 	wrword	#0, local04
24554     A7 2A 0A FB | 	rdlong	local07, fp wz
24558     2C 4E 85 F1 | 	sub	fp, #44
2455c     06 FA 05 A6 |  if_e	mov	result1, #6
24560     04 06 90 AD |  if_e	jmp	#LR__3770
24564                 | ' 
24564                 | ' 
24564                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
24564     28 4E 05 F1 | 	add	fp, #40
24568     A7 00 68 FC | 	wrlong	#0, fp
2456c     28 4E 85 F1 | 	sub	fp, #40
24570     97 22 48 FB | 	callpa	#(@LR__3743-@LR__3742)>>2,fcache_load_ptr_
24574                 | LR__3742
24574     18 4E 05 F1 | 	add	fp, #24
24578     A7 2E 02 FB | 	rdlong	local09, fp
2457c     10 4E 05 F1 | 	add	fp, #16
24580     A7 30 02 FB | 	rdlong	local10, fp
24584     28 4E 85 F1 | 	sub	fp, #40
24588     01 30 66 F0 | 	shl	local10, #1
2458c     17 31 02 F1 | 	add	local10, local09
24590     18 33 E2 FA | 	rdword	local11, local10
24594     20 32 0E F2 | 	cmp	local11, #32 wz
24598     1C 00 90 5D |  if_ne	jmp	#LR__3744
2459c     28 4E 05 F1 | 	add	fp, #40
245a0     A7 34 02 FB | 	rdlong	local12, fp
245a4     1A 27 02 F6 | 	mov	local05, local12
245a8     01 26 06 F1 | 	add	local05, #1
245ac     A7 26 62 FC | 	wrlong	local05, fp
245b0     28 4E 85 F1 | 	sub	fp, #40
245b4     BC FF 9F FD | 	jmp	#LR__3742
245b8                 | LR__3743
245b8                 | LR__3744
245b8     28 4E 05 F1 | 	add	fp, #40
245bc     A7 2A 02 FB | 	rdlong	local07, fp
245c0     28 4E 85 F1 | 	sub	fp, #40
245c4     01 2A 16 F2 | 	cmp	local07, #1 wc
245c8     28 00 90 3D |  if_ae	jmp	#LR__3745
245cc     18 4E 05 F1 | 	add	fp, #24
245d0     A7 22 02 FB | 	rdlong	local03, fp
245d4     10 4E 05 F1 | 	add	fp, #16
245d8     A7 2E 02 FB | 	rdlong	local09, fp
245dc     28 4E 85 F1 | 	sub	fp, #40
245e0     01 2E 66 F0 | 	shl	local09, #1
245e4     11 2F 02 F1 | 	add	local09, local03
245e8     17 1F E2 FA | 	rdword	local01, local09
245ec     2E 1E 0E F2 | 	cmp	local01, #46 wz
245f0     14 00 90 5D |  if_ne	jmp	#LR__3746
245f4                 | LR__3745
245f4     10 4E 05 F1 | 	add	fp, #16
245f8     A7 2A C2 FA | 	rdbyte	local07, fp
245fc     03 2A 46 F5 | 	or	local07, #3
24600     A7 2A 42 FC | 	wrbyte	local07, fp
24604     10 4E 85 F1 | 	sub	fp, #16
24608                 | LR__3746
24608     97 2C 48 FB | 	callpa	#(@LR__3748-@LR__3747)>>2,fcache_load_ptr_
2460c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2460c                 | LR__3747
2460c     2C 4E 05 F1 | 	add	fp, #44
24610     A7 2A 02 FB | 	rdlong	local07, fp
24614     2C 4E 85 F1 | 	sub	fp, #44
24618     01 2A 16 F2 | 	cmp	local07, #1 wc
2461c     44 00 90 CD |  if_b	jmp	#LR__3749
24620     18 4E 05 F1 | 	add	fp, #24
24624     A7 28 02 FB | 	rdlong	local06, fp
24628     14 4E 05 F1 | 	add	fp, #20
2462c     A7 22 02 FB | 	rdlong	local03, fp
24630     2C 4E 85 F1 | 	sub	fp, #44
24634     01 22 86 F1 | 	sub	local03, #1
24638     01 22 66 F0 | 	shl	local03, #1
2463c     14 23 02 F1 | 	add	local03, local06
24640     11 1F E2 FA | 	rdword	local01, local03
24644     2E 1E 0E F2 | 	cmp	local01, #46 wz
24648     18 00 90 AD |  if_e	jmp	#LR__3749
2464c     2C 4E 05 F1 | 	add	fp, #44
24650     A7 1E 02 FB | 	rdlong	local01, fp
24654     01 1E 86 F1 | 	sub	local01, #1
24658     A7 1E 62 FC | 	wrlong	local01, fp
2465c     2C 4E 85 F1 | 	sub	fp, #44
24660     A8 FF 9F FD | 	jmp	#LR__3747
24664                 | LR__3748
24664                 | LR__3749
24664     04 4E 05 F1 | 	add	fp, #4
24668     A7 12 02 FB | 	rdlong	arg01, fp
2466c     04 4E 85 F1 | 	sub	fp, #4
24670     20 12 06 F1 | 	add	arg01, #32
24674     20 14 06 F6 | 	mov	arg02, #32
24678     0B 16 06 F6 | 	mov	arg03, #11
2467c     09 37 02 F6 | 	mov	local13, arg01
24680     98 00 A0 FD | 	call	#\builtin_bytefill_
24684     1B FB 01 F6 | 	mov	result1, local13
24688     0C 4E 05 F1 | 	add	fp, #12
2468c     A7 00 48 FC | 	wrbyte	#0, fp
24690     A7 2A C2 FA | 	rdbyte	local07, fp
24694     14 4E 05 F1 | 	add	fp, #20
24698     A7 2A 62 FC | 	wrlong	local07, fp
2469c     04 4E 05 F1 | 	add	fp, #4
246a0     A7 10 68 FC | 	wrlong	#8, fp
246a4     24 4E 85 F1 | 	sub	fp, #36
246a8                 | ' 
246a8                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
246a8                 | ' 	i = b = 0; ni = 8;
246a8                 | ' 	for (;;) {
246a8                 | LR__3750
246a8     18 4E 05 F1 | 	add	fp, #24
246ac     A7 22 02 FB | 	rdlong	local03, fp
246b0     10 4E 05 F1 | 	add	fp, #16
246b4     A7 2E 02 FB | 	rdlong	local09, fp
246b8     17 25 02 F6 | 	mov	local04, local09
246bc     01 24 06 F1 | 	add	local04, #1
246c0     A7 24 62 FC | 	wrlong	local04, fp
246c4     01 2E 66 F0 | 	shl	local09, #1
246c8     11 2F 02 F1 | 	add	local09, local03
246cc     17 29 E2 FA | 	rdword	local06, local09
246d0     14 4E 85 F1 | 	sub	fp, #20
246d4     A7 28 52 FC | 	wrword	local06, fp
246d8     A7 2A EA FA | 	rdword	local07, fp wz
246dc     14 4E 85 F1 | 	sub	fp, #20
246e0     74 03 90 AD |  if_e	jmp	#LR__3766
246e4     14 4E 05 F1 | 	add	fp, #20
246e8     A7 2A E2 FA | 	rdword	local07, fp
246ec     14 4E 85 F1 | 	sub	fp, #20
246f0     20 2A 0E F2 | 	cmp	local07, #32 wz
246f4     30 00 90 AD |  if_e	jmp	#LR__3751
246f8     14 4E 05 F1 | 	add	fp, #20
246fc     A7 1E E2 FA | 	rdword	local01, fp
24700     14 4E 85 F1 | 	sub	fp, #20
24704     2E 1E 0E F2 | 	cmp	local01, #46 wz
24708     34 00 90 5D |  if_ne	jmp	#LR__3752
2470c     28 4E 05 F1 | 	add	fp, #40
24710     A7 24 02 FB | 	rdlong	local04, fp
24714     04 4E 05 F1 | 	add	fp, #4
24718     A7 30 02 FB | 	rdlong	local10, fp
2471c     2C 4E 85 F1 | 	sub	fp, #44
24720     18 25 0A F2 | 	cmp	local04, local10 wz
24724     18 00 90 AD |  if_e	jmp	#LR__3752
24728                 | LR__3751
24728     10 4E 05 F1 | 	add	fp, #16
2472c     A7 2A C2 FA | 	rdbyte	local07, fp
24730     03 2A 46 F5 | 	or	local07, #3
24734     A7 2A 42 FC | 	wrbyte	local07, fp
24738     10 4E 85 F1 | 	sub	fp, #16
2473c                 | ' 			cf |=  0x01  |  0x02 ;
2473c                 | ' 			continue;
2473c     68 FF 9F FD | 	jmp	#LR__3750
24740                 | LR__3752
24740     20 4E 05 F1 | 	add	fp, #32
24744     A7 2A 02 FB | 	rdlong	local07, fp
24748     04 4E 05 F1 | 	add	fp, #4
2474c     A7 1E 02 FB | 	rdlong	local01, fp
24750     24 4E 85 F1 | 	sub	fp, #36
24754     0F 2B 12 F2 | 	cmp	local07, local01 wc
24758     1C 00 90 3D |  if_ae	jmp	#LR__3753
2475c     28 4E 05 F1 | 	add	fp, #40
24760     A7 2C 02 FB | 	rdlong	local08, fp
24764     04 4E 05 F1 | 	add	fp, #4
24768     A7 30 02 FB | 	rdlong	local10, fp
2476c     2C 4E 85 F1 | 	sub	fp, #44
24770     18 2D 0A F2 | 	cmp	local08, local10 wz
24774     B0 00 90 5D |  if_ne	jmp	#LR__3755
24778                 | LR__3753
24778     24 4E 05 F1 | 	add	fp, #36
2477c     A7 2A 02 FB | 	rdlong	local07, fp
24780     24 4E 85 F1 | 	sub	fp, #36
24784     0B 2A 0E F2 | 	cmp	local07, #11 wz
24788     18 00 90 5D |  if_ne	jmp	#LR__3754
2478c     10 4E 05 F1 | 	add	fp, #16
24790     A7 2A C2 FA | 	rdbyte	local07, fp
24794     03 2A 46 F5 | 	or	local07, #3
24798     A7 2A 42 FC | 	wrbyte	local07, fp
2479c     10 4E 85 F1 | 	sub	fp, #16
247a0                 | ' 				cf |=  0x01  |  0x02 ;
247a0                 | ' 				break;
247a0     B4 02 90 FD | 	jmp	#LR__3766
247a4                 | LR__3754
247a4     28 4E 05 F1 | 	add	fp, #40
247a8     A7 2A 02 FB | 	rdlong	local07, fp
247ac     04 4E 05 F1 | 	add	fp, #4
247b0     A7 1E 02 FB | 	rdlong	local01, fp
247b4     2C 4E 85 F1 | 	sub	fp, #44
247b8     0F 2B 0A F2 | 	cmp	local07, local01 wz
247bc     10 4E 05 51 |  if_ne	add	fp, #16
247c0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
247c4     03 2A 46 55 |  if_ne	or	local07, #3
247c8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
247cc     10 4E 85 51 |  if_ne	sub	fp, #16
247d0     28 4E 05 F1 | 	add	fp, #40
247d4     A7 2A 02 FB | 	rdlong	local07, fp
247d8     04 4E 05 F1 | 	add	fp, #4
247dc     A7 20 02 FB | 	rdlong	local02, fp
247e0     2C 4E 85 F1 | 	sub	fp, #44
247e4     10 2B 1A F2 | 	cmp	local07, local02 wcz
247e8     6C 02 90 1D |  if_a	jmp	#LR__3766
247ec     2C 4E 05 F1 | 	add	fp, #44
247f0     A7 2A 02 FB | 	rdlong	local07, fp
247f4     04 4E 85 F1 | 	sub	fp, #4
247f8     A7 2A 62 FC | 	wrlong	local07, fp
247fc     08 4E 85 F1 | 	sub	fp, #8
24800     A7 10 68 FC | 	wrlong	#8, fp
24804     04 4E 05 F1 | 	add	fp, #4
24808     A7 16 68 FC | 	wrlong	#11, fp
2480c     18 4E 85 F1 | 	sub	fp, #24
24810     A7 32 C2 FA | 	rdbyte	local11, fp
24814     19 2B E2 F8 | 	getbyte	local07, local11, #0
24818     02 2A 66 F0 | 	shl	local07, #2
2481c     A7 2A 42 FC | 	wrbyte	local07, fp
24820     0C 4E 85 F1 | 	sub	fp, #12
24824                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
24824                 | ' 			continue;
24824     80 FE 9F FD | 	jmp	#LR__3750
24828                 | LR__3755
24828     14 4E 05 F1 | 	add	fp, #20
2482c     A7 2A E2 FA | 	rdword	local07, fp
24830     14 4E 85 F1 | 	sub	fp, #20
24834     80 2A 16 F2 | 	cmp	local07, #128 wc
24838     6C 00 90 CD |  if_b	jmp	#LR__3757
2483c     10 4E 05 F1 | 	add	fp, #16
24840     A7 2A C2 FA | 	rdbyte	local07, fp
24844     02 2A 46 F5 | 	or	local07, #2
24848     A7 2A 42 FC | 	wrbyte	local07, fp
2484c     04 4E 05 F1 | 	add	fp, #4
24850     A7 12 E2 FA | 	rdword	arg01, fp
24854     14 4E 85 F1 | 	sub	fp, #20
24858     01 00 00 FF 
2485c     52 15 06 F6 | 	mov	arg02, ##850
24860     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
24864     14 4E 05 F1 | 	add	fp, #20
24868     A7 FA 51 FC | 	wrword	result1, fp
2486c     A7 2A E2 FA | 	rdword	local07, fp
24870     14 4E 85 F1 | 	sub	fp, #20
24874     80 2A CE F7 | 	test	local07, #128 wz
24878     2C 00 90 AD |  if_e	jmp	#LR__3756
2487c     14 4E 05 F1 | 	add	fp, #20
24880     A7 20 E2 FA | 	rdword	local02, fp
24884     7F 20 06 F5 | 	and	local02, #127
24888     01 00 00 FF 
2488c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
24890     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
24894     10 2B C2 FA | 	rdbyte	local07, local02
24898     A7 2A 52 FC | 	wrword	local07, fp
2489c     14 4E 85 F1 | 	sub	fp, #20
248a0     01 00 00 FF 
248a4     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
248a8                 | LR__3756
248a8                 | LR__3757
248a8     14 4E 05 F1 | 	add	fp, #20
248ac     A7 2A E2 FA | 	rdword	local07, fp
248b0     14 4E 85 F1 | 	sub	fp, #20
248b4     00 2B 16 F2 | 	cmp	local07, #256 wc
248b8     88 00 90 CD |  if_b	jmp	#LR__3759
248bc     24 4E 05 F1 | 	add	fp, #36
248c0     A7 2A 02 FB | 	rdlong	local07, fp
248c4     01 2A 86 F1 | 	sub	local07, #1
248c8     04 4E 85 F1 | 	sub	fp, #4
248cc     A7 20 02 FB | 	rdlong	local02, fp
248d0     20 4E 85 F1 | 	sub	fp, #32
248d4     15 21 12 F2 | 	cmp	local02, local07 wc
248d8     2C 00 90 CD |  if_b	jmp	#LR__3758
248dc     10 4E 05 F1 | 	add	fp, #16
248e0     A7 32 C2 FA | 	rdbyte	local11, fp
248e4     19 2B E2 F8 | 	getbyte	local07, local11, #0
248e8     03 2A 46 F5 | 	or	local07, #3
248ec     A7 2A 42 FC | 	wrbyte	local07, fp
248f0     14 4E 05 F1 | 	add	fp, #20
248f4     A7 2A 02 FB | 	rdlong	local07, fp
248f8     04 4E 85 F1 | 	sub	fp, #4
248fc     A7 2A 62 FC | 	wrlong	local07, fp
24900     20 4E 85 F1 | 	sub	fp, #32
24904                 | ' 				cf |=  0x01  |  0x02 ;
24904                 | ' 				i = ni; continue;
24904     A0 FD 9F FD | 	jmp	#LR__3750
24908                 | LR__3758
24908     04 4E 05 F1 | 	add	fp, #4
2490c     A7 2E 02 FB | 	rdlong	local09, fp
24910     1C 4E 05 F1 | 	add	fp, #28
24914     A7 30 02 FB | 	rdlong	local10, fp
24918     18 25 02 F6 | 	mov	local04, local10
2491c     01 24 06 F1 | 	add	local04, #1
24920     A7 24 62 FC | 	wrlong	local04, fp
24924     20 2E 06 F1 | 	add	local09, #32
24928     17 31 02 F1 | 	add	local10, local09
2492c     0C 4E 85 F1 | 	sub	fp, #12
24930     A7 22 E2 FA | 	rdword	local03, fp
24934     14 4E 85 F1 | 	sub	fp, #20
24938     08 22 46 F0 | 	shr	local03, #8
2493c     18 23 42 FC | 	wrbyte	local03, local10
24940     D4 00 90 FD | 	jmp	#LR__3765
24944                 | LR__3759
24944     14 4E 05 F1 | 	add	fp, #20
24948     A7 2A EA FA | 	rdword	local07, fp wz
2494c     14 4E 85 F1 | 	sub	fp, #20
24950     20 00 90 AD |  if_e	jmp	#LR__3760
24954     51 01 00 FF 
24958     D5 12 06 F6 | 	mov	arg01, ##@LR__4393
2495c     14 4E 05 F1 | 	add	fp, #20
24960     A7 14 E2 FA | 	rdword	arg02, fp
24964     14 4E 85 F1 | 	sub	fp, #20
24968     48 CB BF FD | 	call	#_fatfs_cc_strchr
2496c     00 FA 0D F2 | 	cmp	result1, #0 wz
24970     20 00 90 AD |  if_e	jmp	#LR__3761
24974                 | LR__3760
24974     14 4E 05 F1 | 	add	fp, #20
24978     A7 BE 58 FC | 	wrword	#95, fp
2497c     04 4E 85 F1 | 	sub	fp, #4
24980     A7 2A C2 FA | 	rdbyte	local07, fp
24984     03 2A 46 F5 | 	or	local07, #3
24988     A7 2A 42 FC | 	wrbyte	local07, fp
2498c     10 4E 85 F1 | 	sub	fp, #16
24990     84 00 90 FD | 	jmp	#LR__3764
24994                 | LR__3761
24994     14 4E 05 F1 | 	add	fp, #20
24998     A7 2A E2 FA | 	rdword	local07, fp
2499c     14 4E 85 F1 | 	sub	fp, #20
249a0     41 2A 16 F2 | 	cmp	local07, #65 wc
249a4     24 00 90 CD |  if_b	jmp	#LR__3762
249a8     14 4E 05 F1 | 	add	fp, #20
249ac     A7 1E E2 FA | 	rdword	local01, fp
249b0     14 4E 85 F1 | 	sub	fp, #20
249b4     5B 1E 16 F2 | 	cmp	local01, #91 wc
249b8     0C 4E 05 C1 |  if_b	add	fp, #12
249bc     A7 2A C2 CA |  if_b	rdbyte	local07, fp
249c0     02 2A 46 C5 |  if_b	or	local07, #2
249c4     A7 2A 42 CC |  if_b	wrbyte	local07, fp
249c8     0C 4E 85 C1 |  if_b	sub	fp, #12
249cc                 | LR__3762
249cc     14 4E 05 F1 | 	add	fp, #20
249d0     A7 2A E2 FA | 	rdword	local07, fp
249d4     14 4E 85 F1 | 	sub	fp, #20
249d8     61 2A 16 F2 | 	cmp	local07, #97 wc
249dc     38 00 90 CD |  if_b	jmp	#LR__3763
249e0     14 4E 05 F1 | 	add	fp, #20
249e4     A7 1E E2 FA | 	rdword	local01, fp
249e8     14 4E 85 F1 | 	sub	fp, #20
249ec     7B 1E 16 F2 | 	cmp	local01, #123 wc
249f0     24 00 90 3D |  if_ae	jmp	#LR__3763
249f4     0C 4E 05 F1 | 	add	fp, #12
249f8     A7 2A C2 FA | 	rdbyte	local07, fp
249fc     01 2A 46 F5 | 	or	local07, #1
24a00     A7 2A 42 FC | 	wrbyte	local07, fp
24a04     08 4E 05 F1 | 	add	fp, #8
24a08     A7 2A E2 FA | 	rdword	local07, fp
24a0c     20 2A 86 F1 | 	sub	local07, #32
24a10     A7 2A 52 FC | 	wrword	local07, fp
24a14     14 4E 85 F1 | 	sub	fp, #20
24a18                 | LR__3763
24a18                 | LR__3764
24a18                 | LR__3765
24a18     04 4E 05 F1 | 	add	fp, #4
24a1c     A7 32 02 FB | 	rdlong	local11, fp
24a20     19 2F 02 F6 | 	mov	local09, local11
24a24     1C 4E 05 F1 | 	add	fp, #28
24a28     A7 20 02 FB | 	rdlong	local02, fp
24a2c     10 25 02 F6 | 	mov	local04, local02
24a30     01 24 06 F1 | 	add	local04, #1
24a34     A7 24 62 FC | 	wrlong	local04, fp
24a38     10 31 02 F6 | 	mov	local10, local02
24a3c     20 2E 06 F1 | 	add	local09, #32
24a40     17 31 02 F1 | 	add	local10, local09
24a44     0C 4E 85 F1 | 	sub	fp, #12
24a48     A7 22 E2 FA | 	rdword	local03, fp
24a4c     14 4E 85 F1 | 	sub	fp, #20
24a50     18 23 42 FC | 	wrbyte	local03, local10
24a54     50 FC 9F FD | 	jmp	#LR__3750
24a58                 | LR__3766
24a58     04 4E 05 F1 | 	add	fp, #4
24a5c     A7 32 02 FB | 	rdlong	local11, fp
24a60     04 4E 85 F1 | 	sub	fp, #4
24a64     20 32 06 F1 | 	add	local11, #32
24a68     19 2B C2 FA | 	rdbyte	local07, local11
24a6c     E5 2A 0E F2 | 	cmp	local07, #229 wz
24a70     04 4E 05 A1 |  if_e	add	fp, #4
24a74     A7 2A 02 AB |  if_e	rdlong	local07, fp
24a78     04 4E 85 A1 |  if_e	sub	fp, #4
24a7c     20 2A 06 A1 |  if_e	add	local07, #32
24a80     15 0B 48 AC |  if_e	wrbyte	#5, local07
24a84     24 4E 05 F1 | 	add	fp, #36
24a88     A7 2A 02 FB | 	rdlong	local07, fp
24a8c     24 4E 85 F1 | 	sub	fp, #36
24a90     08 2A 0E F2 | 	cmp	local07, #8 wz
24a94     0C 4E 05 A1 |  if_e	add	fp, #12
24a98     A7 2A C2 AA |  if_e	rdbyte	local07, fp
24a9c     02 2A 66 A0 |  if_e	shl	local07, #2
24aa0     A7 2A 42 AC |  if_e	wrbyte	local07, fp
24aa4     0C 4E 85 A1 |  if_e	sub	fp, #12
24aa8     0C 4E 05 F1 | 	add	fp, #12
24aac     A7 2A C2 FA | 	rdbyte	local07, fp
24ab0     0C 4E 85 F1 | 	sub	fp, #12
24ab4     0C 2A 06 F5 | 	and	local07, #12
24ab8     0C 2A 0E F2 | 	cmp	local07, #12 wz
24abc     18 00 90 AD |  if_e	jmp	#LR__3767
24ac0     0C 4E 05 F1 | 	add	fp, #12
24ac4     A7 1E C2 FA | 	rdbyte	local01, fp
24ac8     0C 4E 85 F1 | 	sub	fp, #12
24acc     03 1E 06 F5 | 	and	local01, #3
24ad0     03 1E 0E F2 | 	cmp	local01, #3 wz
24ad4     14 00 90 5D |  if_ne	jmp	#LR__3768
24ad8                 | LR__3767
24ad8     10 4E 05 F1 | 	add	fp, #16
24adc     A7 2A C2 FA | 	rdbyte	local07, fp
24ae0     02 2A 46 F5 | 	or	local07, #2
24ae4     A7 2A 42 FC | 	wrbyte	local07, fp
24ae8     10 4E 85 F1 | 	sub	fp, #16
24aec                 | LR__3768
24aec     10 4E 05 F1 | 	add	fp, #16
24af0     A7 2A C2 FA | 	rdbyte	local07, fp
24af4     10 4E 85 F1 | 	sub	fp, #16
24af8     02 2A CE F7 | 	test	local07, #2 wz
24afc     48 00 90 5D |  if_ne	jmp	#LR__3769
24b00     0C 4E 05 F1 | 	add	fp, #12
24b04     A7 2A C2 FA | 	rdbyte	local07, fp
24b08     0C 4E 85 F1 | 	sub	fp, #12
24b0c     01 2A CE F7 | 	test	local07, #1 wz
24b10     10 4E 05 51 |  if_ne	add	fp, #16
24b14     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
24b18     10 2A 46 55 |  if_ne	or	local07, #16
24b1c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
24b20     10 4E 85 51 |  if_ne	sub	fp, #16
24b24     0C 4E 05 F1 | 	add	fp, #12
24b28     A7 2A C2 FA | 	rdbyte	local07, fp
24b2c     0C 4E 85 F1 | 	sub	fp, #12
24b30     04 2A CE F7 | 	test	local07, #4 wz
24b34     10 4E 05 51 |  if_ne	add	fp, #16
24b38     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
24b3c     08 2A 46 55 |  if_ne	or	local07, #8
24b40     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
24b44     10 4E 85 51 |  if_ne	sub	fp, #16
24b48                 | LR__3769
24b48     04 4E 05 F1 | 	add	fp, #4
24b4c     A7 2A 02 FB | 	rdlong	local07, fp
24b50     0C 4E 05 F1 | 	add	fp, #12
24b54     A7 1E C2 FA | 	rdbyte	local01, fp
24b58     10 4E 85 F1 | 	sub	fp, #16
24b5c     2B 2A 06 F1 | 	add	local07, #43
24b60     15 1F 42 FC | 	wrbyte	local01, local07
24b64                 | ' 	}
24b64                 | ' 
24b64                 | ' 	dp->fn[ 11 ] = cf;
24b64                 | ' 
24b64                 | ' 	return FR_OK;
24b64     00 FA 05 F6 | 	mov	result1, #0
24b68                 | LR__3770
24b68     A7 F0 03 F6 | 	mov	ptra, fp
24b6c     B2 00 A0 FD | 	call	#popregs_
24b70                 | _fatfs_cc_create_name_ret
24b70     2D 00 64 FD | 	ret
24b74                 | 
24b74                 | _fatfs_cc_follow_path
24b74     02 4A 05 F6 | 	mov	COUNT_, #2
24b78     A8 00 A0 FD | 	call	#pushregs_
24b7c     18 F0 07 F1 | 	add	ptra, #24
24b80     04 4E 05 F1 | 	add	fp, #4
24b84     A7 12 62 FC | 	wrlong	arg01, fp
24b88     04 4E 05 F1 | 	add	fp, #4
24b8c     A7 14 62 FC | 	wrlong	arg02, fp
24b90     04 4E 85 F1 | 	sub	fp, #4
24b94     A7 FA 01 FB | 	rdlong	result1, fp
24b98     FD 1E 02 FB | 	rdlong	local01, result1
24b9c     10 4E 05 F1 | 	add	fp, #16
24ba0     A7 1E 62 FC | 	wrlong	local01, fp
24ba4     14 4E 85 F1 | 	sub	fp, #20
24ba8     97 24 48 FB | 	callpa	#(@LR__3782-@LR__3780)>>2,fcache_load_ptr_
24bac                 | ' )
24bac                 | ' {
24bac                 | ' 	FRESULT res;
24bac                 | ' 	BYTE ns;
24bac                 | ' 	FATFS *fs = dp->obj.fs;
24bac                 | ' #line 3034 "ff.c"
24bac                 | ' 	{
24bac                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
24bac                 | LR__3780
24bac     08 4E 05 F1 | 	add	fp, #8
24bb0     A7 1E 02 FB | 	rdlong	local01, fp
24bb4     08 4E 85 F1 | 	sub	fp, #8
24bb8     0F 1F C2 FA | 	rdbyte	local01, local01
24bbc     2F 1E 0E F2 | 	cmp	local01, #47 wz
24bc0     18 00 90 AD |  if_e	jmp	#LR__3781
24bc4     08 4E 05 F1 | 	add	fp, #8
24bc8     A7 1E 02 FB | 	rdlong	local01, fp
24bcc     08 4E 85 F1 | 	sub	fp, #8
24bd0     0F 1F C2 FA | 	rdbyte	local01, local01
24bd4     5C 1E 0E F2 | 	cmp	local01, #92 wz
24bd8     18 00 90 5D |  if_ne	jmp	#LR__3783
24bdc                 | LR__3781
24bdc     08 4E 05 F1 | 	add	fp, #8
24be0     A7 1E 02 FB | 	rdlong	local01, fp
24be4     01 1E 06 F1 | 	add	local01, #1
24be8     A7 1E 62 FC | 	wrlong	local01, fp
24bec     08 4E 85 F1 | 	sub	fp, #8
24bf0     B8 FF 9F FD | 	jmp	#LR__3780
24bf4                 | LR__3782
24bf4                 | LR__3783
24bf4     04 4E 05 F1 | 	add	fp, #4
24bf8     A7 1E 02 FB | 	rdlong	local01, fp
24bfc     08 1E 06 F1 | 	add	local01, #8
24c00     0F 01 68 FC | 	wrlong	#0, local01
24c04     04 4E 05 F1 | 	add	fp, #4
24c08     A7 1E 02 FB | 	rdlong	local01, fp
24c0c     08 4E 85 F1 | 	sub	fp, #8
24c10     0F 1F C2 FA | 	rdbyte	local01, local01
24c14     20 1E 16 F2 | 	cmp	local01, #32 wc
24c18     30 00 90 3D |  if_ae	jmp	#LR__3784
24c1c     04 4E 05 F1 | 	add	fp, #4
24c20     A7 1E 02 FB | 	rdlong	local01, fp
24c24     2B 1E 06 F1 | 	add	local01, #43
24c28     0F 01 49 FC | 	wrbyte	#128, local01
24c2c     A7 12 02 FB | 	rdlong	arg01, fp
24c30     04 4E 85 F1 | 	sub	fp, #4
24c34     00 14 06 F6 | 	mov	arg02, #0
24c38     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
24c3c     0C 4E 05 F1 | 	add	fp, #12
24c40     A7 FA 61 FC | 	wrlong	result1, fp
24c44     0C 4E 85 F1 | 	sub	fp, #12
24c48     1C 01 90 FD | 	jmp	#LR__3788
24c4c                 | LR__3784
24c4c                 | ' 		for (;;) {
24c4c                 | LR__3785
24c4c     04 4E 05 F1 | 	add	fp, #4
24c50     A7 12 02 FB | 	rdlong	arg01, fp
24c54     04 4E 05 F1 | 	add	fp, #4
24c58     A7 14 02 F6 | 	mov	arg02, fp
24c5c     08 4E 85 F1 | 	sub	fp, #8
24c60     14 F6 BF FD | 	call	#_fatfs_cc_create_name
24c64     0C 4E 05 F1 | 	add	fp, #12
24c68     A7 FA 61 FC | 	wrlong	result1, fp
24c6c     00 FA 4D F2 | 	cmps	result1, #0 wz
24c70     0C 4E 85 F1 | 	sub	fp, #12
24c74     F0 00 90 5D |  if_ne	jmp	#LR__3787
24c78     04 4E 05 F1 | 	add	fp, #4
24c7c     A7 12 02 FB | 	rdlong	arg01, fp
24c80     04 4E 85 F1 | 	sub	fp, #4
24c84     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
24c88     0C 4E 05 F1 | 	add	fp, #12
24c8c     A7 FA 61 FC | 	wrlong	result1, fp
24c90     08 4E 85 F1 | 	sub	fp, #8
24c94     A7 1E 02 FB | 	rdlong	local01, fp
24c98     2B 1E 06 F1 | 	add	local01, #43
24c9c     0F 1F C2 FA | 	rdbyte	local01, local01
24ca0     0C 4E 05 F1 | 	add	fp, #12
24ca4     A7 1E 42 FC | 	wrbyte	local01, fp
24ca8     04 4E 85 F1 | 	sub	fp, #4
24cac     A7 1E 0A FB | 	rdlong	local01, fp wz
24cb0     0C 4E 85 F1 | 	sub	fp, #12
24cb4     34 00 90 AD |  if_e	jmp	#LR__3786
24cb8     0C 4E 05 F1 | 	add	fp, #12
24cbc     A7 1E 02 FB | 	rdlong	local01, fp
24cc0     0C 4E 85 F1 | 	sub	fp, #12
24cc4     04 1E 0E F2 | 	cmp	local01, #4 wz
24cc8     9C 00 90 5D |  if_ne	jmp	#LR__3787
24ccc     10 4E 05 F1 | 	add	fp, #16
24cd0     A7 1E C2 FA | 	rdbyte	local01, fp
24cd4     10 4E 85 F1 | 	sub	fp, #16
24cd8     04 1E CE F7 | 	test	local01, #4 wz
24cdc     0C 4E 05 A1 |  if_e	add	fp, #12
24ce0     A7 0A 68 AC |  if_e	wrlong	#5, fp
24ce4     0C 4E 85 A1 |  if_e	sub	fp, #12
24ce8                 | ' 					}
24ce8                 | ' 				}
24ce8                 | ' 				break;
24ce8     7C 00 90 FD | 	jmp	#LR__3787
24cec                 | LR__3786
24cec     10 4E 05 F1 | 	add	fp, #16
24cf0     A7 1E C2 FA | 	rdbyte	local01, fp
24cf4     10 4E 85 F1 | 	sub	fp, #16
24cf8     04 1E CE F7 | 	test	local01, #4 wz
24cfc     68 00 90 5D |  if_ne	jmp	#LR__3787
24d00     04 4E 05 F1 | 	add	fp, #4
24d04     A7 1E 02 FB | 	rdlong	local01, fp
24d08     04 4E 85 F1 | 	sub	fp, #4
24d0c     06 1E 06 F1 | 	add	local01, #6
24d10     0F 1F C2 FA | 	rdbyte	local01, local01
24d14     10 1E CE F7 | 	test	local01, #16 wz
24d18     0C 4E 05 A1 |  if_e	add	fp, #12
24d1c     A7 0A 68 AC |  if_e	wrlong	#5, fp
24d20     0C 4E 85 A1 |  if_e	sub	fp, #12
24d24                 | ' 				res = FR_NO_PATH; break;
24d24     40 00 90 AD |  if_e	jmp	#LR__3787
24d28     04 4E 05 F1 | 	add	fp, #4
24d2c     A7 20 02 FB | 	rdlong	local02, fp
24d30     10 1F 02 F6 | 	mov	local01, local02
24d34     10 4E 05 F1 | 	add	fp, #16
24d38     A7 14 02 FB | 	rdlong	arg02, fp
24d3c     0A 13 02 F6 | 	mov	arg01, arg02
24d40     34 14 06 F1 | 	add	arg02, #52
24d44     14 4E 85 F1 | 	sub	fp, #20
24d48     10 20 06 F1 | 	add	local02, #16
24d4c     10 21 02 FB | 	rdlong	local02, local02
24d50     FF 21 06 F5 | 	and	local02, #511
24d54     10 15 02 F1 | 	add	arg02, local02
24d58     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
24d5c     08 1E 06 F1 | 	add	local01, #8
24d60     0F FB 61 FC | 	wrlong	result1, local01
24d64     E4 FE 9F FD | 	jmp	#LR__3785
24d68                 | LR__3787
24d68                 | LR__3788
24d68                 | ' 			}
24d68                 | ' #line 3090 "ff.c"
24d68                 | ' 			{
24d68                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
24d68                 | ' 			}
24d68                 | ' 		}
24d68                 | ' 	}
24d68                 | ' 
24d68                 | ' 	return res;
24d68     0C 4E 05 F1 | 	add	fp, #12
24d6c     A7 FA 01 FB | 	rdlong	result1, fp
24d70     0C 4E 85 F1 | 	sub	fp, #12
24d74     A7 F0 03 F6 | 	mov	ptra, fp
24d78     B2 00 A0 FD | 	call	#popregs_
24d7c                 | _fatfs_cc_follow_path_ret
24d7c     2D 00 64 FD | 	ret
24d80                 | 
24d80                 | _fatfs_cc_get_ldnumber
24d80     01 00 66 F6 | 	neg	_var01, #1
24d84     09 03 0A FB | 	rdlong	_var02, arg01 wz
24d88     01 05 02 F6 | 	mov	_var03, _var02
24d8c     01 FA 65 A6 |  if_e	neg	result1, #1
24d90     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
24d94     97 10 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
24d98                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
24d98                 | LR__3790
24d98     02 07 C2 FA | 	rdbyte	_var04, _var03
24d9c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
24da0     20 FA 15 F2 | 	cmp	result1, #32 wc
24da4     01 04 06 F1 | 	add	_var03, #1
24da8     03 09 02 36 |  if_ae	mov	_var05, _var04
24dac     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
24db0     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
24db4     E0 FF 9F 1D |  if_a	jmp	#LR__3790
24db8                 | LR__3791
24db8     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
24dbc     3A 06 0E F2 | 	cmp	_var04, #58 wz
24dc0     40 00 90 5D |  if_ne	jmp	#LR__3793
24dc4     01 0A 06 F6 | 	mov	_var06, #1
24dc8     01 09 C2 FA | 	rdbyte	_var05, _var02
24dcc     30 08 16 F2 | 	cmp	_var05, #48 wc
24dd0     1C 00 90 CD |  if_b	jmp	#LR__3792
24dd4     01 09 C2 FA | 	rdbyte	_var05, _var02
24dd8     3A 08 16 F2 | 	cmp	_var05, #58 wc
24ddc     01 0D 02 C6 |  if_b	mov	_var07, _var02
24de0     02 0C 06 C1 |  if_b	add	_var07, #2
24de4     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
24de8     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
24dec     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
24df0                 | LR__3792
24df0     01 0A 56 F2 | 	cmps	_var06, #1 wc
24df4     05 01 02 C6 |  if_b	mov	_var01, _var06
24df8     09 05 62 CC |  if_b	wrlong	_var03, arg01
24dfc                 | ' 			vol = i;
24dfc                 | ' 			*path = tt;
24dfc                 | ' 		}
24dfc                 | ' 		return vol;
24dfc     00 FB 01 F6 | 	mov	result1, _var01
24e00     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
24e04                 | LR__3793
24e04                 | ' 	}
24e04                 | ' #line 3170 "ff.c"
24e04                 | ' 	vol = 0;
24e04                 | ' 
24e04                 | ' 	return vol;
24e04     00 FA 05 F6 | 	mov	result1, #0
24e08                 | _fatfs_cc_get_ldnumber_ret
24e08     2D 00 64 FD | 	ret
24e0c                 | 
24e0c                 | _fatfs_cc_check_fs
24e0c     04 4A 05 F6 | 	mov	COUNT_, #4
24e10     A8 00 A0 FD | 	call	#pushregs_
24e14     09 1F 02 F6 | 	mov	local01, arg01
24e18     03 1E 06 F1 | 	add	local01, #3
24e1c     0F 01 48 FC | 	wrbyte	#0, local01
24e20     2D 1E 06 F1 | 	add	local01, #45
24e24     FF FF FF FF 
24e28     0F FF 6B FC | 	wrlong	##-1, local01
24e2c     30 1E 86 F1 | 	sub	local01, #48
24e30     0F 13 02 F6 | 	mov	arg01, local01
24e34     18 D5 BF FD | 	call	#_fatfs_cc_move_window
24e38     00 FA 0D F2 | 	cmp	result1, #0 wz
24e3c     04 FA 05 56 |  if_ne	mov	result1, #4
24e40     94 01 90 5D |  if_ne	jmp	#LR__3804
24e44     34 1E 06 F1 | 	add	local01, #52
24e48     0F 13 02 F6 | 	mov	arg01, local01
24e4c     FE 13 06 F1 | 	add	arg01, #510
24e50                 | ' {
24e50                 | ' 
24e50                 | ' 	return *((WORD*)ptr);
24e50     09 21 E2 FA | 	rdword	local02, arg01
24e54     0F 23 C2 FA | 	rdbyte	local03, local01
24e58     34 1E 86 F1 | 	sub	local01, #52
24e5c     11 25 E2 F8 | 	getbyte	local04, local03, #0
24e60     EB 24 0E F2 | 	cmp	local04, #235 wz
24e64     11 17 02 56 |  if_ne	mov	arg03, local03
24e68     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
24e6c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
24e70     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
24e74     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
24e78     44 01 90 5D |  if_ne	jmp	#LR__3803
24e7c     10 25 32 F9 | 	getword	local04, local02, #0
24e80     55 00 00 FF 
24e84     55 24 0E F2 | 	cmp	local04, ##43605 wz
24e88     2C 00 90 5D |  if_ne	jmp	#LR__3800
24e8c     34 1E 06 F1 | 	add	local01, #52
24e90     0F 13 02 F6 | 	mov	arg01, local01
24e94     34 1E 86 F1 | 	sub	local01, #52
24e98     52 12 06 F1 | 	add	arg01, #82
24e9c     51 01 00 FF 
24ea0     DC 14 06 F6 | 	mov	arg02, ##@LR__4394
24ea4     08 16 06 F6 | 	mov	arg03, #8
24ea8     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
24eac     00 FA 0D F2 | 	cmp	result1, #0 wz
24eb0                 | ' 			return 0;
24eb0     00 FA 05 A6 |  if_e	mov	result1, #0
24eb4     20 01 90 AD |  if_e	jmp	#LR__3804
24eb8                 | LR__3800
24eb8     34 1E 06 F1 | 	add	local01, #52
24ebc     0F 13 02 F6 | 	mov	arg01, local01
24ec0     0B 12 06 F1 | 	add	arg01, #11
24ec4                 | ' {
24ec4                 | ' 
24ec4                 | ' 	return *((WORD*)ptr);
24ec4     09 FB E1 FA | 	rdword	result1, arg01
24ec8     0D 1E 06 F1 | 	add	local01, #13
24ecc     0F 23 C2 FA | 	rdbyte	local03, local01
24ed0     41 1E 86 F1 | 	sub	local01, #65
24ed4     FD 24 32 F9 | 	getword	local04, result1, #0
24ed8     FD 14 32 F9 | 	getword	arg02, result1, #0
24edc     01 14 86 F1 | 	sub	arg02, #1
24ee0     0A 25 CA F7 | 	test	local04, arg02 wz
24ee4     D8 00 90 5D |  if_ne	jmp	#LR__3802
24ee8     FD 14 32 F9 | 	getword	arg02, result1, #0
24eec     01 00 00 FF 
24ef0     00 14 16 F2 | 	cmp	arg02, ##512 wc
24ef4     C8 00 90 CD |  if_b	jmp	#LR__3802
24ef8     FD 14 32 F9 | 	getword	arg02, result1, #0
24efc     01 00 00 FF 
24f00     01 14 16 F2 | 	cmp	arg02, ##513 wc
24f04     B8 00 90 3D |  if_ae	jmp	#LR__3802
24f08     11 13 02 F6 | 	mov	arg01, local03
24f0c     07 12 4E F7 | 	zerox	arg01, #7 wz
24f10     AC 00 90 AD |  if_e	jmp	#LR__3802
24f14     11 13 E2 F8 | 	getbyte	arg01, local03, #0
24f18     11 23 E2 F8 | 	getbyte	local03, local03, #0
24f1c     01 22 86 F1 | 	sub	local03, #1
24f20     11 13 CA F7 | 	test	arg01, local03 wz
24f24     98 00 90 5D |  if_ne	jmp	#LR__3802
24f28     34 1E 06 F1 | 	add	local01, #52
24f2c     0F 13 02 F6 | 	mov	arg01, local01
24f30     34 1E 86 F1 | 	sub	local01, #52
24f34     0E 12 06 F1 | 	add	arg01, #14
24f38                 | ' {
24f38                 | ' 
24f38                 | ' 	return *((WORD*)ptr);
24f38     09 FB E9 FA | 	rdword	result1, arg01 wz
24f3c     80 00 90 AD |  if_e	jmp	#LR__3802
24f40     44 1E 06 F1 | 	add	local01, #68
24f44     0F 13 C2 FA | 	rdbyte	arg01, local01
24f48     44 1E 86 F1 | 	sub	local01, #68
24f4c     01 12 86 F1 | 	sub	arg01, #1
24f50     02 12 16 F2 | 	cmp	arg01, #2 wc
24f54     68 00 90 3D |  if_ae	jmp	#LR__3802
24f58     34 1E 06 F1 | 	add	local01, #52
24f5c     0F 13 02 F6 | 	mov	arg01, local01
24f60     34 1E 86 F1 | 	sub	local01, #52
24f64     11 12 06 F1 | 	add	arg01, #17
24f68                 | ' {
24f68                 | ' 
24f68                 | ' 	return *((WORD*)ptr);
24f68     09 FB E9 FA | 	rdword	result1, arg01 wz
24f6c     50 00 90 AD |  if_e	jmp	#LR__3802
24f70     34 1E 06 F1 | 	add	local01, #52
24f74     0F 13 02 F6 | 	mov	arg01, local01
24f78     34 1E 86 F1 | 	sub	local01, #52
24f7c     13 12 06 F1 | 	add	arg01, #19
24f80                 | ' {
24f80                 | ' 
24f80                 | ' 	return *((WORD*)ptr);
24f80     09 FB E1 FA | 	rdword	result1, arg01
24f84     FD 22 32 F9 | 	getword	local03, result1, #0
24f88     80 22 16 F2 | 	cmp	local03, #128 wc
24f8c     20 00 90 3D |  if_ae	jmp	#LR__3801
24f90     34 1E 06 F1 | 	add	local01, #52
24f94     0F 13 02 F6 | 	mov	arg01, local01
24f98     34 1E 86 F1 | 	sub	local01, #52
24f9c     20 12 06 F1 | 	add	arg01, #32
24fa0                 | ' {
24fa0                 | ' 
24fa0                 | ' 	return *((DWORD*)ptr);
24fa0     09 FB 01 FB | 	rdlong	result1, arg01
24fa4     80 00 00 FF 
24fa8     00 FA 15 F2 | 	cmp	result1, ##65536 wc
24fac     10 00 90 CD |  if_b	jmp	#LR__3802
24fb0                 | LR__3801
24fb0     4A 1E 06 F1 | 	add	local01, #74
24fb4                 | ' {
24fb4                 | ' 
24fb4                 | ' 	return *((WORD*)ptr);
24fb4     0F FB E9 FA | 	rdword	result1, local01 wz
24fb8                 | ' 			&& b != 0 && (b & (b - 1)) == 0
24fb8                 | ' 			&& ld_word(fs->win +  14 ) != 0
24fb8                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
24fb8                 | ' 			&& ld_word(fs->win +  17 ) != 0
24fb8                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
24fb8                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
24fb8                 | ' 				return 0;
24fb8     00 FA 05 56 |  if_ne	mov	result1, #0
24fbc     18 00 90 5D |  if_ne	jmp	#LR__3804
24fc0                 | LR__3802
24fc0                 | LR__3803
24fc0                 | ' 		}
24fc0                 | ' 	}
24fc0                 | ' 	return sign == 0xAA55 ? 2 : 3;
24fc0     10 23 32 F9 | 	getword	local03, local02, #0
24fc4     55 00 00 FF 
24fc8     55 22 0E F2 | 	cmp	local03, ##43605 wz
24fcc     02 24 06 A6 |  if_e	mov	local04, #2
24fd0     03 24 06 56 |  if_ne	mov	local04, #3
24fd4     12 FB 01 F6 | 	mov	result1, local04
24fd8                 | LR__3804
24fd8     A7 F0 03 F6 | 	mov	ptra, fp
24fdc     B2 00 A0 FD | 	call	#popregs_
24fe0                 | _fatfs_cc_check_fs_ret
24fe0     2D 00 64 FD | 	ret
24fe4                 | 
24fe4                 | _fatfs_cc_find_volume
24fe4     05 4A 05 F6 | 	mov	COUNT_, #5
24fe8     A8 00 A0 FD | 	call	#pushregs_
24fec     24 F0 07 F1 | 	add	ptra, #36
24ff0     09 1F 02 F6 | 	mov	local01, arg01
24ff4     0A 21 02 F6 | 	mov	local02, arg02
24ff8     0F 13 02 F6 | 	mov	arg01, local01
24ffc     00 14 06 F6 | 	mov	arg02, #0
25000     08 FE BF FD | 	call	#_fatfs_cc_check_fs
25004     02 FA 0D F2 | 	cmp	result1, #2 wz
25008     0C 00 90 AD |  if_e	jmp	#LR__3810
2500c     03 FA 15 F2 | 	cmp	result1, #3 wc
25010     00 20 0E C2 |  if_b	cmp	local02, #0 wz
25014     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3818
25018                 | LR__3810
25018                 | ' 	for (i = 0; i < 4; i++) {
25018     00 22 06 F6 | 	mov	local03, #0
2501c     97 26 48 FB | 	callpa	#(@LR__3812-@LR__3811)>>2,fcache_load_ptr_
25020                 | LR__3811
25020     04 22 16 F2 | 	cmp	local03, #4 wc
25024     44 00 90 3D |  if_ae	jmp	#LR__3813
25028     11 25 02 F6 | 	mov	local04, local03
2502c     02 24 66 F0 | 	shl	local04, #2
25030     14 4E 05 F1 | 	add	fp, #20
25034     A7 24 02 F1 | 	add	local04, fp
25038     34 1E 06 F1 | 	add	local01, #52
2503c     0F 13 02 F6 | 	mov	arg01, local01
25040     34 1E 86 F1 | 	sub	local01, #52
25044     BE 13 06 F1 | 	add	arg01, #446
25048     11 15 02 F6 | 	mov	arg02, local03
2504c     04 14 66 F0 | 	shl	arg02, #4
25050     0A 13 02 F1 | 	add	arg01, arg02
25054     08 12 06 F1 | 	add	arg01, #8
25058                 | ' {
25058                 | ' 
25058                 | ' 	return *((DWORD*)ptr);
25058     09 FB 01 FB | 	rdlong	result1, arg01
2505c     14 4E 85 F1 | 	sub	fp, #20
25060     12 FB 61 FC | 	wrlong	result1, local04
25064     01 22 06 F1 | 	add	local03, #1
25068     B4 FF 9F FD | 	jmp	#LR__3811
2506c                 | LR__3812
2506c                 | LR__3813
2506c     00 20 0E F2 | 	cmp	local02, #0 wz
25070     10 25 02 56 |  if_ne	mov	local04, local02
25074     01 24 86 51 |  if_ne	sub	local04, #1
25078     00 24 06 A6 |  if_e	mov	local04, #0
2507c     12 23 02 F6 | 	mov	local03, local04
25080                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
25080                 | ' 	}
25080                 | ' 	i = part ? part - 1 : 0;
25080                 | ' 	do {
25080                 | LR__3814
25080     11 25 02 F6 | 	mov	local04, local03
25084     02 24 66 F0 | 	shl	local04, #2
25088     14 4E 05 F1 | 	add	fp, #20
2508c     A7 24 02 F1 | 	add	local04, fp
25090     12 25 0A FB | 	rdlong	local04, local04 wz
25094     14 4E 85 F1 | 	sub	fp, #20
25098     28 00 90 AD |  if_e	jmp	#LR__3815
2509c     11 25 02 F6 | 	mov	local04, local03
250a0     02 24 66 F0 | 	shl	local04, #2
250a4     14 4E 05 F1 | 	add	fp, #20
250a8     A7 24 02 F1 | 	add	local04, fp
250ac     12 15 02 FB | 	rdlong	arg02, local04
250b0     0F 13 02 F6 | 	mov	arg01, local01
250b4     14 4E 85 F1 | 	sub	fp, #20
250b8     50 FD BF FD | 	call	#_fatfs_cc_check_fs
250bc     FD 24 02 F6 | 	mov	local04, result1
250c0     04 00 90 FD | 	jmp	#LR__3816
250c4                 | LR__3815
250c4     03 24 06 F6 | 	mov	local04, #3
250c8                 | LR__3816
250c8     12 27 02 F6 | 	mov	local05, local04
250cc     00 20 0E F2 | 	cmp	local02, #0 wz
250d0     02 26 16 A2 |  if_e	cmp	local05, #2 wc
250d4     0C 00 90 8D |  if_c_and_z	jmp	#LR__3817
250d8     01 22 06 A1 |  if_e	add	local03, #1
250dc     04 22 16 A2 |  if_e	cmp	local03, #4 wc
250e0     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3814
250e4                 | LR__3817
250e4                 | ' 	return fmt;
250e4     13 FB 01 F6 | 	mov	result1, local05
250e8                 | LR__3818
250e8     A7 F0 03 F6 | 	mov	ptra, fp
250ec     B2 00 A0 FD | 	call	#popregs_
250f0                 | _fatfs_cc_find_volume_ret
250f0     2D 00 64 FD | 	ret
250f4                 | 
250f4                 | _fatfs_cc_mount_volume
250f4     0B 4A 05 F6 | 	mov	COUNT_, #11
250f8     A8 00 A0 FD | 	call	#pushregs_
250fc     0A 1F 02 F6 | 	mov	local01, arg02
25100     0B 21 02 F6 | 	mov	local02, arg03
25104     0F 01 68 FC | 	wrlong	#0, local01
25108     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2510c     FD 22 02 F6 | 	mov	local03, result1
25110     00 22 56 F2 | 	cmps	local03, #0 wc
25114     0B FA 05 C6 |  if_b	mov	result1, #11
25118     3C 05 90 CD |  if_b	jmp	#LR__3830
2511c     11 17 02 F6 | 	mov	arg03, local03
25120     02 16 66 F0 | 	shl	arg03, #2
25124     F2 16 02 F1 | 	add	arg03, objptr
25128     0B 25 0A FB | 	rdlong	local04, arg03 wz
2512c     0C FA 05 A6 |  if_e	mov	result1, #12
25130     24 05 90 AD |  if_e	jmp	#LR__3830
25134     0F 25 62 FC | 	wrlong	local04, local01
25138     10 21 E2 F8 | 	getbyte	local02, local02, #0
2513c     FE 20 06 F5 | 	and	local02, #254
25140     12 17 CA FA | 	rdbyte	arg03, local04 wz
25144     4C 00 90 AD |  if_e	jmp	#LR__3821
25148     01 24 06 F1 | 	add	local04, #1
2514c     12 13 CA FA | 	rdbyte	arg01, local04 wz
25150     01 24 86 F1 | 	sub	local04, #1
25154     01 FA 05 56 |  if_ne	mov	result1, #1
25158                 | ' 
25158                 | ' 	return Stat;
25158     01 00 00 AF 
2515c     20 E4 05 A1 |  if_e	add	objptr, ##544
25160     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25164     01 00 00 AF 
25168     20 E4 85 A1 |  if_e	sub	objptr, ##544
2516c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
25170     01 16 CE F7 | 	test	arg03, #1 wz
25174     1C 00 90 5D |  if_ne	jmp	#LR__3820
25178     00 20 0E F2 | 	cmp	local02, #0 wz
2517c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
25180     04 FA CD 57 |  if_ne	test	result1, #4 wz
25184                 | ' 				return FR_WRITE_PROTECTED;
25184     0A FA 05 56 |  if_ne	mov	result1, #10
25188     CC 04 90 5D |  if_ne	jmp	#LR__3830
2518c                 | ' 			}
2518c                 | ' 			return FR_OK;
2518c     00 FA 05 F6 | 	mov	result1, #0
25190     C4 04 90 FD | 	jmp	#LR__3830
25194                 | LR__3820
25194                 | LR__3821
25194     12 01 48 FC | 	wrbyte	#0, local04
25198     01 24 06 F1 | 	add	local04, #1
2519c     12 23 42 FC | 	wrbyte	local03, local04
251a0     12 13 C2 FA | 	rdbyte	arg01, local04
251a4     01 24 86 F1 | 	sub	local04, #1
251a8     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
251ac     FD 16 02 F6 | 	mov	arg03, result1
251b0     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
251b4     01 26 CE F7 | 	test	local05, #1 wz
251b8                 | ' 		return FR_NOT_READY;
251b8     03 FA 05 56 |  if_ne	mov	result1, #3
251bc     98 04 90 5D |  if_ne	jmp	#LR__3830
251c0     00 20 0E F2 | 	cmp	local02, #0 wz
251c4     0B 27 02 56 |  if_ne	mov	local05, arg03
251c8     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
251cc     04 26 CE 57 |  if_ne	test	local05, #4 wz
251d0                 | ' 		return FR_WRITE_PROTECTED;
251d0     0A FA 05 56 |  if_ne	mov	result1, #10
251d4     80 04 90 5D |  if_ne	jmp	#LR__3830
251d8     12 13 02 F6 | 	mov	arg01, local04
251dc     00 14 06 F6 | 	mov	arg02, #0
251e0     00 FE BF FD | 	call	#_fatfs_cc_find_volume
251e4     FD 12 02 F6 | 	mov	arg01, result1
251e8     04 12 0E F2 | 	cmp	arg01, #4 wz
251ec     01 FA 05 A6 |  if_e	mov	result1, #1
251f0     64 04 90 AD |  if_e	jmp	#LR__3830
251f4     02 12 16 F2 | 	cmp	arg01, #2 wc
251f8     0D FA 05 36 |  if_ae	mov	result1, #13
251fc     58 04 90 3D |  if_ae	jmp	#LR__3830
25200     30 24 06 F1 | 	add	local04, #48
25204     12 29 02 FB | 	rdlong	local06, local04
25208     04 24 06 F1 | 	add	local04, #4
2520c     12 13 02 F6 | 	mov	arg01, local04
25210     34 24 86 F1 | 	sub	local04, #52
25214     0B 12 06 F1 | 	add	arg01, #11
25218                 | ' {
25218                 | ' 
25218                 | ' 	return *((WORD*)ptr);
25218     09 FB E1 FA | 	rdword	result1, arg01
2521c     01 00 00 FF 
25220     00 FA 0D F2 | 	cmp	result1, ##512 wz
25224     0D FA 05 56 |  if_ne	mov	result1, #13
25228     2C 04 90 5D |  if_ne	jmp	#LR__3830
2522c     34 24 06 F1 | 	add	local04, #52
25230     12 13 02 F6 | 	mov	arg01, local04
25234     34 24 86 F1 | 	sub	local04, #52
25238     16 12 06 F1 | 	add	arg01, #22
2523c                 | ' {
2523c                 | ' 
2523c                 | ' 	return *((WORD*)ptr);
2523c     09 FB E1 FA | 	rdword	result1, arg01
25240     FD 2A 0A F6 | 	mov	local07, result1 wz
25244     18 00 90 5D |  if_ne	jmp	#LR__3822
25248     34 24 06 F1 | 	add	local04, #52
2524c     12 13 02 F6 | 	mov	arg01, local04
25250     34 24 86 F1 | 	sub	local04, #52
25254     24 12 06 F1 | 	add	arg01, #36
25258                 | ' {
25258                 | ' 
25258                 | ' 	return *((DWORD*)ptr);
25258     09 FB 01 FB | 	rdlong	result1, arg01
2525c     FD 2A 02 F6 | 	mov	local07, result1
25260                 | LR__3822
25260     1C 24 06 F1 | 	add	local04, #28
25264     12 2B 62 FC | 	wrlong	local07, local04
25268     28 24 06 F1 | 	add	local04, #40
2526c     12 27 C2 FA | 	rdbyte	local05, local04
25270     42 24 86 F1 | 	sub	local04, #66
25274     12 27 42 FC | 	wrbyte	local05, local04
25278     12 27 C2 FA | 	rdbyte	local05, local04
2527c     02 24 86 F1 | 	sub	local04, #2
25280     01 26 0E F2 | 	cmp	local05, #1 wz
25284     02 24 06 51 |  if_ne	add	local04, #2
25288     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2528c     02 24 86 51 |  if_ne	sub	local04, #2
25290     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
25294     0D FA 05 56 |  if_ne	mov	result1, #13
25298     BC 03 90 5D |  if_ne	jmp	#LR__3830
2529c     02 24 06 F1 | 	add	local04, #2
252a0     12 27 C2 FA | 	rdbyte	local05, local04
252a4     13 2B 02 FD | 	qmul	local07, local05
252a8     3F 24 06 F1 | 	add	local04, #63
252ac     12 27 C2 FA | 	rdbyte	local05, local04
252b0     37 24 86 F1 | 	sub	local04, #55
252b4     12 27 52 FC | 	wrword	local05, local04
252b8     12 27 EA FA | 	rdword	local05, local04 wz
252bc     0A 24 86 F1 | 	sub	local04, #10
252c0     18 2A 62 FD | 	getqx	local07
252c4     20 00 90 AD |  if_e	jmp	#LR__3823
252c8     0A 24 06 F1 | 	add	local04, #10
252cc     12 27 E2 FA | 	rdword	local05, local04
252d0     13 23 32 F9 | 	getword	local03, local05, #0
252d4     0A 24 86 F1 | 	sub	local04, #10
252d8     13 27 32 F9 | 	getword	local05, local05, #0
252dc     01 26 86 F1 | 	sub	local05, #1
252e0     13 23 CA F7 | 	test	local03, local05 wz
252e4     08 00 90 AD |  if_e	jmp	#LR__3824
252e8                 | LR__3823
252e8     0D FA 05 F6 | 	mov	result1, #13
252ec     68 03 90 FD | 	jmp	#LR__3830
252f0                 | LR__3824
252f0     34 24 06 F1 | 	add	local04, #52
252f4     12 13 02 F6 | 	mov	arg01, local04
252f8     11 12 06 F1 | 	add	arg01, #17
252fc                 | ' {
252fc                 | ' 
252fc                 | ' 	return *((WORD*)ptr);
252fc     09 FB E1 FA | 	rdword	result1, arg01
25300     2C 24 86 F1 | 	sub	local04, #44
25304     12 FB 51 FC | 	wrword	result1, local04
25308     12 27 E2 FA | 	rdword	local05, local04
2530c     08 24 86 F1 | 	sub	local04, #8
25310     13 13 52 F6 | 	abs	arg01, local05 wc
25314     09 13 42 F8 | 	getnib	arg01, arg01, #0
25318     09 13 8A F6 | 	negc	arg01, arg01 wz
2531c     0D FA 05 56 |  if_ne	mov	result1, #13
25320     34 03 90 5D |  if_ne	jmp	#LR__3830
25324     34 24 06 F1 | 	add	local04, #52
25328     12 13 02 F6 | 	mov	arg01, local04
2532c     34 24 86 F1 | 	sub	local04, #52
25330     13 12 06 F1 | 	add	arg01, #19
25334                 | ' {
25334                 | ' 
25334                 | ' 	return *((WORD*)ptr);
25334     09 FB E1 FA | 	rdword	result1, arg01
25338     FD 2C 0A F6 | 	mov	local08, result1 wz
2533c     34 24 06 A1 |  if_e	add	local04, #52
25340     12 13 02 A6 |  if_e	mov	arg01, local04
25344     34 24 86 A1 |  if_e	sub	local04, #52
25348     20 12 06 A1 |  if_e	add	arg01, #32
2534c                 | ' {
2534c                 | ' 
2534c                 | ' 	return *((DWORD*)ptr);
2534c     09 2D 02 AB |  if_e	rdlong	local08, arg01
25350     34 24 06 F1 | 	add	local04, #52
25354     12 13 02 F6 | 	mov	arg01, local04
25358     34 24 86 F1 | 	sub	local04, #52
2535c     0E 12 06 F1 | 	add	arg01, #14
25360                 | ' {
25360                 | ' 
25360                 | ' 	return *((WORD*)ptr);
25360     09 FB E1 FA | 	rdword	result1, arg01
25364     FD 12 02 F6 | 	mov	arg01, result1
25368     09 27 02 F6 | 	mov	local05, arg01
2536c     0F 26 4E F7 | 	zerox	local05, #15 wz
25370     0D FA 05 A6 |  if_e	mov	result1, #13
25374     E0 02 90 AD |  if_e	jmp	#LR__3830
25378     09 2F 32 F9 | 	getword	local09, arg01, #0
2537c     15 2F 02 F1 | 	add	local09, local07
25380     08 24 06 F1 | 	add	local04, #8
25384     12 27 E2 FA | 	rdword	local05, local04
25388     08 24 86 F1 | 	sub	local04, #8
2538c     13 27 52 F6 | 	abs	local05, local05 wc
25390     04 26 46 F0 | 	shr	local05, #4
25394     13 2F 82 F3 | 	sumc	local09, local05
25398     17 2D 12 F2 | 	cmp	local08, local09 wc
2539c     0D FA 05 C6 |  if_b	mov	result1, #13
253a0     B4 02 90 CD |  if_b	jmp	#LR__3830
253a4     17 2D 82 F1 | 	sub	local08, local09
253a8     0A 24 06 F1 | 	add	local04, #10
253ac     12 27 E2 FA | 	rdword	local05, local04
253b0     13 2D 12 FD | 	qdiv	local08, local05
253b4     0A 24 86 F1 | 	sub	local04, #10
253b8     18 26 62 FD | 	getqx	local05
253bc     00 26 0E F2 | 	cmp	local05, #0 wz
253c0     0D FA 05 A6 |  if_e	mov	result1, #13
253c4     90 02 90 AD |  if_e	jmp	#LR__3830
253c8     00 30 06 F6 | 	mov	local10, #0
253cc     FF FF 07 FF 
253d0     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
253d4     03 30 06 C6 |  if_b	mov	local10, #3
253d8     7F 00 00 FF 
253dc     F6 27 16 F2 | 	cmp	local05, ##65526 wc
253e0     02 30 06 C6 |  if_b	mov	local10, #2
253e4     07 00 00 FF 
253e8     F6 27 16 F2 | 	cmp	local05, ##4086 wc
253ec     01 30 06 C6 |  if_b	mov	local10, #1
253f0     00 30 0E F2 | 	cmp	local10, #0 wz
253f4     0D FA 05 A6 |  if_e	mov	result1, #13
253f8     5C 02 90 AD |  if_e	jmp	#LR__3830
253fc     02 26 06 F1 | 	add	local05, #2
25400     18 24 06 F1 | 	add	local04, #24
25404     12 27 62 FC | 	wrlong	local05, local04
25408     08 24 06 F1 | 	add	local04, #8
2540c     12 29 62 FC | 	wrlong	local06, local04
25410     14 27 02 F6 | 	mov	local05, local06
25414     09 13 32 F9 | 	getword	arg01, arg01, #0
25418     09 27 02 F1 | 	add	local05, arg01
2541c     04 24 06 F1 | 	add	local04, #4
25420     12 27 62 FC | 	wrlong	local05, local04
25424     14 27 02 F6 | 	mov	local05, local06
25428     17 27 02 F1 | 	add	local05, local09
2542c     08 24 06 F1 | 	add	local04, #8
25430     12 27 62 FC | 	wrlong	local05, local04
25434     2C 24 86 F1 | 	sub	local04, #44
25438     03 30 0E F2 | 	cmp	local10, #3 wz
2543c     5C 00 90 5D |  if_ne	jmp	#LR__3825
25440     34 24 06 F1 | 	add	local04, #52
25444     12 13 02 F6 | 	mov	arg01, local04
25448     34 24 86 F1 | 	sub	local04, #52
2544c     2A 12 06 F1 | 	add	arg01, #42
25450                 | ' {
25450                 | ' 
25450                 | ' 	return *((WORD*)ptr);
25450     09 FB E9 FA | 	rdword	result1, arg01 wz
25454     0D FA 05 56 |  if_ne	mov	result1, #13
25458     FC 01 90 5D |  if_ne	jmp	#LR__3830
2545c     08 24 06 F1 | 	add	local04, #8
25460     12 27 EA FA | 	rdword	local05, local04 wz
25464     08 24 86 F1 | 	sub	local04, #8
25468     0D FA 05 56 |  if_ne	mov	result1, #13
2546c     E8 01 90 5D |  if_ne	jmp	#LR__3830
25470     34 24 06 F1 | 	add	local04, #52
25474     12 13 02 F6 | 	mov	arg01, local04
25478     2C 12 06 F1 | 	add	arg01, #44
2547c                 | ' {
2547c                 | ' 
2547c                 | ' 	return *((DWORD*)ptr);
2547c     09 FB 01 FB | 	rdlong	result1, arg01
25480     0C 24 86 F1 | 	sub	local04, #12
25484     12 FB 61 FC | 	wrlong	result1, local04
25488     10 24 86 F1 | 	sub	local04, #16
2548c     12 33 02 FB | 	rdlong	local11, local04
25490     18 24 86 F1 | 	sub	local04, #24
25494     02 32 66 F0 | 	shl	local11, #2
25498     6C 00 90 FD | 	jmp	#LR__3827
2549c                 | LR__3825
2549c     08 24 06 F1 | 	add	local04, #8
254a0     12 27 EA FA | 	rdword	local05, local04 wz
254a4     08 24 86 F1 | 	sub	local04, #8
254a8     0D FA 05 A6 |  if_e	mov	result1, #13
254ac     A8 01 90 AD |  if_e	jmp	#LR__3830
254b0     24 24 06 F1 | 	add	local04, #36
254b4     12 27 02 FB | 	rdlong	local05, local04
254b8     15 27 02 F1 | 	add	local05, local07
254bc     04 24 06 F1 | 	add	local04, #4
254c0     12 27 62 FC | 	wrlong	local05, local04
254c4     28 24 86 F1 | 	sub	local04, #40
254c8     02 30 0E F2 | 	cmp	local10, #2 wz
254cc     18 24 06 A1 |  if_e	add	local04, #24
254d0     12 27 02 AB |  if_e	rdlong	local05, local04
254d4     18 24 86 A1 |  if_e	sub	local04, #24
254d8     01 26 66 A0 |  if_e	shl	local05, #1
254dc     24 00 90 AD |  if_e	jmp	#LR__3826
254e0     18 24 06 F1 | 	add	local04, #24
254e4     12 33 02 FB | 	rdlong	local11, local04
254e8     19 27 02 F6 | 	mov	local05, local11
254ec     01 26 66 F0 | 	shl	local05, #1
254f0     19 27 02 F1 | 	add	local05, local11
254f4     01 26 46 F0 | 	shr	local05, #1
254f8     18 24 86 F1 | 	sub	local04, #24
254fc     01 32 06 F5 | 	and	local11, #1
25500     19 27 02 F1 | 	add	local05, local11
25504                 | LR__3826
25504     13 33 02 F6 | 	mov	local11, local05
25508                 | LR__3827
25508     FF 33 06 F1 | 	add	local11, #511
2550c     09 32 46 F0 | 	shr	local11, #9
25510     1C 24 06 F1 | 	add	local04, #28
25514     12 17 02 FB | 	rdlong	arg03, local04
25518     1C 24 86 F1 | 	sub	local04, #28
2551c     19 17 12 F2 | 	cmp	arg03, local11 wc
25520     0D FA 05 C6 |  if_b	mov	result1, #13
25524     30 01 90 CD |  if_b	jmp	#LR__3830
25528     14 24 06 F1 | 	add	local04, #20
2552c     FF FF FF FF 
25530     12 FF 6B FC | 	wrlong	##-1, local04
25534     04 24 86 F1 | 	sub	local04, #4
25538     FF FF FF FF 
2553c     12 FF 6B FC | 	wrlong	##-1, local04
25540     0C 24 86 F1 | 	sub	local04, #12
25544     12 01 49 FC | 	wrbyte	#128, local04
25548     04 24 86 F1 | 	sub	local04, #4
2554c     03 30 0E F2 | 	cmp	local10, #3 wz
25550     D0 00 90 5D |  if_ne	jmp	#LR__3829
25554     34 24 06 F1 | 	add	local04, #52
25558     12 13 02 F6 | 	mov	arg01, local04
2555c     34 24 86 F1 | 	sub	local04, #52
25560     30 12 06 F1 | 	add	arg01, #48
25564                 | ' {
25564                 | ' 
25564                 | ' 	return *((WORD*)ptr);
25564     09 FB E1 FA | 	rdword	result1, arg01
25568     FD 26 32 F9 | 	getword	local05, result1, #0
2556c     01 26 0E F2 | 	cmp	local05, #1 wz
25570     B0 00 90 5D |  if_ne	jmp	#LR__3829
25574     01 28 06 F1 | 	add	local06, #1
25578     12 13 02 F6 | 	mov	arg01, local04
2557c     14 15 02 F6 | 	mov	arg02, local06
25580     CC CD BF FD | 	call	#_fatfs_cc_move_window
25584     00 FA 0D F2 | 	cmp	result1, #0 wz
25588     98 00 90 5D |  if_ne	jmp	#LR__3829
2558c     04 24 06 F1 | 	add	local04, #4
25590     12 01 48 FC | 	wrbyte	#0, local04
25594     30 24 06 F1 | 	add	local04, #48
25598     12 13 02 F6 | 	mov	arg01, local04
2559c     34 24 86 F1 | 	sub	local04, #52
255a0     FE 13 06 F1 | 	add	arg01, #510
255a4                 | ' {
255a4                 | ' 
255a4                 | ' 	return *((WORD*)ptr);
255a4     09 FB E1 FA | 	rdword	result1, arg01
255a8     FD 26 32 F9 | 	getword	local05, result1, #0
255ac     55 00 00 FF 
255b0     55 26 0E F2 | 	cmp	local05, ##43605 wz
255b4     34 24 06 A1 |  if_e	add	local04, #52
255b8     12 13 02 A6 |  if_e	mov	arg01, local04
255bc     34 24 86 A1 |  if_e	sub	local04, #52
255c0                 | ' {
255c0                 | ' 
255c0                 | ' 	return *((DWORD*)ptr);
255c0     09 FB 01 AB |  if_e	rdlong	result1, arg01
255c4     A9 B0 20 AF 
255c8     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
255cc     54 00 90 5D |  if_ne	jmp	#LR__3828
255d0     34 24 06 F1 | 	add	local04, #52
255d4     12 13 02 F6 | 	mov	arg01, local04
255d8     34 24 86 F1 | 	sub	local04, #52
255dc     E4 13 06 F1 | 	add	arg01, #484
255e0                 | ' {
255e0                 | ' 
255e0                 | ' 	return *((DWORD*)ptr);
255e0     09 FB 01 FB | 	rdlong	result1, arg01
255e4     B9 A0 30 FF 
255e8     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
255ec     34 00 90 5D |  if_ne	jmp	#LR__3828
255f0     34 24 06 F1 | 	add	local04, #52
255f4     12 13 02 F6 | 	mov	arg01, local04
255f8     E8 13 06 F1 | 	add	arg01, #488
255fc                 | ' {
255fc                 | ' 
255fc                 | ' 	return *((DWORD*)ptr);
255fc     09 FB 01 FB | 	rdlong	result1, arg01
25600     20 24 86 F1 | 	sub	local04, #32
25604     12 FB 61 FC | 	wrlong	result1, local04
25608     20 24 06 F1 | 	add	local04, #32
2560c     12 13 02 F6 | 	mov	arg01, local04
25610     EC 13 06 F1 | 	add	arg01, #492
25614                 | ' {
25614                 | ' 
25614                 | ' 	return *((DWORD*)ptr);
25614     09 FB 01 FB | 	rdlong	result1, arg01
25618     24 24 86 F1 | 	sub	local04, #36
2561c     12 FB 61 FC | 	wrlong	result1, local04
25620     10 24 86 F1 | 	sub	local04, #16
25624                 | LR__3828
25624                 | LR__3829
25624     12 31 42 FC | 	wrbyte	local10, local04
25628     04 E4 05 F1 | 	add	objptr, #4
2562c     F2 26 E2 FA | 	rdword	local05, objptr
25630     01 26 06 F1 | 	add	local05, #1
25634     F2 26 52 FC | 	wrword	local05, objptr
25638     F2 32 E2 FA | 	rdword	local11, objptr
2563c     06 24 06 F1 | 	add	local04, #6
25640     12 33 52 FC | 	wrword	local11, local04
25644     04 E4 05 F1 | 	add	objptr, #4
25648     06 24 06 F1 | 	add	local04, #6
2564c     12 E5 61 FC | 	wrlong	objptr, local04
25650                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
25650                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
25650                 | ' 			{
25650                 | ' 
25650                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
25650                 | ' 
25650                 | ' 
25650                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
25650                 | ' 
25650                 | ' 			}
25650                 | ' 		}
25650                 | ' 
25650                 | ' 
25650                 | ' 	}
25650                 | ' 
25650                 | ' 	fs->fs_type = (BYTE)fmt;
25650                 | ' 	fs->id = ++Fsid;
25650                 | ' 
25650                 | ' 	fs->lfnbuf = LfnBuf;
25650                 | ' #line 3567 "ff.c"
25650                 | ' 	return FR_OK;
25650     00 FA 05 F6 | 	mov	result1, #0
25654     08 E4 85 F1 | 	sub	objptr, #8
25658                 | LR__3830
25658     A7 F0 03 F6 | 	mov	ptra, fp
2565c     B2 00 A0 FD | 	call	#popregs_
25660                 | _fatfs_cc_mount_volume_ret
25660     2D 00 64 FD | 	ret
25664                 | 
25664                 | _fatfs_cc_validate
25664     09 01 0A F6 | 	mov	_var01, arg01 wz
25668     09 02 06 F6 | 	mov	_var02, #9
2566c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
25670     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
25674     50 00 90 AD |  if_e	jmp	#LR__3840
25678     04 00 06 F1 | 	add	_var01, #4
2567c     00 07 E2 FA | 	rdword	_var04, _var01
25680     04 00 86 F1 | 	sub	_var01, #4
25684     00 13 02 FB | 	rdlong	arg01, _var01
25688     06 12 06 F1 | 	add	arg01, #6
2568c     09 FB E1 FA | 	rdword	result1, arg01
25690     FD 06 0A F2 | 	cmp	_var04, result1 wz
25694     30 00 90 5D |  if_ne	jmp	#LR__3840
25698     00 07 02 FB | 	rdlong	_var04, _var01
2569c     01 06 06 F1 | 	add	_var04, #1
256a0     03 13 CA FA | 	rdbyte	arg01, _var04 wz
256a4     01 FA 05 56 |  if_ne	mov	result1, #1
256a8                 | ' 
256a8                 | ' 	return Stat;
256a8     01 00 00 AF 
256ac     20 E4 05 A1 |  if_e	add	objptr, ##544
256b0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
256b4     01 00 00 AF 
256b8     20 E4 85 A1 |  if_e	sub	objptr, ##544
256bc     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
256c0     01 04 CE F7 | 	test	_var03, #1 wz
256c4     00 02 06 A6 |  if_e	mov	_var02, #0
256c8                 | LR__3840
256c8     00 02 0E F2 | 	cmp	_var02, #0 wz
256cc     00 05 02 AB |  if_e	rdlong	_var03, _var01
256d0     00 04 06 56 |  if_ne	mov	_var03, #0
256d4     0A 05 62 FC | 	wrlong	_var03, arg02
256d8                 | ' 			res = FR_OK;
256d8                 | ' 		}
256d8                 | ' 
256d8                 | ' 	}
256d8                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
256d8                 | ' 	return res;
256d8     01 FB 01 F6 | 	mov	result1, _var02
256dc                 | _fatfs_cc_validate_ret
256dc     2D 00 64 FD | 	ret
256e0                 | 
256e0                 | _fatfs_cc_f_mount
256e0     01 4A 05 F6 | 	mov	COUNT_, #1
256e4     A8 00 A0 FD | 	call	#pushregs_
256e8     20 F0 07 F1 | 	add	ptra, #32
256ec     04 4E 05 F1 | 	add	fp, #4
256f0     A7 12 62 FC | 	wrlong	arg01, fp
256f4     04 4E 05 F1 | 	add	fp, #4
256f8     A7 14 62 FC | 	wrlong	arg02, fp
256fc     04 4E 05 F1 | 	add	fp, #4
25700     A7 16 42 FC | 	wrbyte	arg03, fp
25704     04 4E 85 F1 | 	sub	fp, #4
25708     A7 16 02 FB | 	rdlong	arg03, fp
2570c     14 4E 05 F1 | 	add	fp, #20
25710     A7 16 62 FC | 	wrlong	arg03, fp
25714     A7 12 02 F6 | 	mov	arg01, fp
25718     1C 4E 85 F1 | 	sub	fp, #28
2571c     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
25720     14 4E 05 F1 | 	add	fp, #20
25724     A7 FA 61 FC | 	wrlong	result1, fp
25728     14 4E 85 F1 | 	sub	fp, #20
2572c     00 FA 55 F2 | 	cmps	result1, #0 wc
25730     0B FA 05 C6 |  if_b	mov	result1, #11
25734     C0 00 90 CD |  if_b	jmp	#LR__3851
25738     14 4E 05 F1 | 	add	fp, #20
2573c     A7 16 02 FB | 	rdlong	arg03, fp
25740     02 16 66 F0 | 	shl	arg03, #2
25744     F2 16 02 F1 | 	add	arg03, objptr
25748     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2574c     04 4E 85 F1 | 	sub	fp, #4
25750     A7 16 62 FC | 	wrlong	arg03, fp
25754     10 4E 85 F1 | 	sub	fp, #16
25758     28 00 90 AD |  if_e	jmp	#LR__3850
2575c     10 4E 05 F1 | 	add	fp, #16
25760     A7 16 02 FB | 	rdlong	arg03, fp
25764     10 4E 85 F1 | 	sub	fp, #16
25768     01 16 06 F1 | 	add	arg03, #1
2576c     0B 13 C2 FA | 	rdbyte	arg01, arg03
25770     24 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
25774     10 4E 05 F1 | 	add	fp, #16
25778     A7 16 02 FB | 	rdlong	arg03, fp
2577c     10 4E 85 F1 | 	sub	fp, #16
25780     0B 01 48 FC | 	wrbyte	#0, arg03
25784                 | LR__3850
25784     04 4E 05 F1 | 	add	fp, #4
25788     A7 1E 0A FB | 	rdlong	local01, fp wz
2578c     04 4E 85 F1 | 	sub	fp, #4
25790     04 4E 05 51 |  if_ne	add	fp, #4
25794     A7 1E 02 5B |  if_ne	rdlong	local01, fp
25798     04 4E 85 51 |  if_ne	sub	fp, #4
2579c     0F 01 48 5C |  if_ne	wrbyte	#0, local01
257a0     14 4E 05 F1 | 	add	fp, #20
257a4     A7 1E 02 FB | 	rdlong	local01, fp
257a8     02 1E 66 F0 | 	shl	local01, #2
257ac     F2 1E 02 F1 | 	add	local01, objptr
257b0     10 4E 85 F1 | 	sub	fp, #16
257b4     A7 16 02 FB | 	rdlong	arg03, fp
257b8     0F 17 62 FC | 	wrlong	arg03, local01
257bc     08 4E 05 F1 | 	add	fp, #8
257c0     A7 1E CA FA | 	rdbyte	local01, fp wz
257c4     0C 4E 85 F1 | 	sub	fp, #12
257c8     00 FA 05 A6 |  if_e	mov	result1, #0
257cc     28 00 90 AD |  if_e	jmp	#LR__3851
257d0     08 4E 05 F1 | 	add	fp, #8
257d4     A7 12 02 F6 | 	mov	arg01, fp
257d8     04 4E 85 F1 | 	sub	fp, #4
257dc     A7 14 02 F6 | 	mov	arg02, fp
257e0     04 4E 85 F1 | 	sub	fp, #4
257e4     00 16 06 F6 | 	mov	arg03, #0
257e8     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
257ec     18 4E 05 F1 | 	add	fp, #24
257f0     A7 FA 61 FC | 	wrlong	result1, fp
257f4                 | ' 
257f4                 | ' 	res = mount_volume(&path, &fs, 0);
257f4                 | ' 	return res ;
257f4     18 4E 85 F1 | 	sub	fp, #24
257f8                 | LR__3851
257f8     A7 F0 03 F6 | 	mov	ptra, fp
257fc     B2 00 A0 FD | 	call	#popregs_
25800                 | _fatfs_cc_f_mount_ret
25800     2D 00 64 FD | 	ret
25804                 | 
25804                 | _fatfs_cc_f_open
25804     02 4A 05 F6 | 	mov	COUNT_, #2
25808     A8 00 A0 FD | 	call	#pushregs_
2580c     60 F0 07 F1 | 	add	ptra, #96
25810     04 4E 05 F1 | 	add	fp, #4
25814     A7 12 62 FC | 	wrlong	arg01, fp
25818     04 4E 05 F1 | 	add	fp, #4
2581c     A7 14 62 FC | 	wrlong	arg02, fp
25820     04 4E 05 F1 | 	add	fp, #4
25824     A7 16 42 FC | 	wrbyte	arg03, fp
25828     08 4E 85 F1 | 	sub	fp, #8
2582c     A7 18 0A FB | 	rdlong	arg04, fp wz
25830     04 4E 85 F1 | 	sub	fp, #4
25834     09 FA 05 A6 |  if_e	mov	result1, #9
25838     98 06 90 AD |  if_e	jmp	#LR__3877
2583c     0C 4E 05 F1 | 	add	fp, #12
25840     A7 18 C2 FA | 	rdbyte	arg04, fp
25844     3F 18 06 F5 | 	and	arg04, #63
25848     A7 18 42 FC | 	wrbyte	arg04, fp
2584c     04 4E 85 F1 | 	sub	fp, #4
25850     A7 12 02 F6 | 	mov	arg01, fp
25854     3C 4E 05 F1 | 	add	fp, #60
25858     A7 14 02 F6 | 	mov	arg02, fp
2585c     38 4E 85 F1 | 	sub	fp, #56
25860     A7 16 C2 FA | 	rdbyte	arg03, fp
25864     0C 4E 85 F1 | 	sub	fp, #12
25868     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2586c     10 4E 05 F1 | 	add	fp, #16
25870     A7 FA 61 FC | 	wrlong	result1, fp
25874     10 4E 85 F1 | 	sub	fp, #16
25878     00 FA 0D F2 | 	cmp	result1, #0 wz
2587c     2C 06 90 5D |  if_ne	jmp	#LR__3876
25880     44 4E 05 F1 | 	add	fp, #68
25884     A7 18 02 FB | 	rdlong	arg04, fp
25888     30 4E 85 F1 | 	sub	fp, #48
2588c     A7 18 62 FC | 	wrlong	arg04, fp
25890     A7 12 02 F6 | 	mov	arg01, fp
25894     0C 4E 85 F1 | 	sub	fp, #12
25898     A7 1E 02 FB | 	rdlong	local01, fp
2589c     08 4E 85 F1 | 	sub	fp, #8
258a0     0F 15 02 F6 | 	mov	arg02, local01
258a4     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
258a8     10 4E 05 F1 | 	add	fp, #16
258ac     A7 FA 61 FC | 	wrlong	result1, fp
258b0     10 4E 85 F1 | 	sub	fp, #16
258b4     00 FA 0D F2 | 	cmp	result1, #0 wz
258b8     1C 00 90 5D |  if_ne	jmp	#LR__3860
258bc     3F 4E 05 F1 | 	add	fp, #63
258c0     A7 18 C2 FA | 	rdbyte	arg04, fp
258c4     3F 4E 85 F1 | 	sub	fp, #63
258c8     80 18 CE F7 | 	test	arg04, #128 wz
258cc     10 4E 05 51 |  if_ne	add	fp, #16
258d0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
258d4     10 4E 85 51 |  if_ne	sub	fp, #16
258d8                 | LR__3860
258d8     0C 4E 05 F1 | 	add	fp, #12
258dc     A7 18 C2 FA | 	rdbyte	arg04, fp
258e0     0C 4E 85 F1 | 	sub	fp, #12
258e4     1C 18 CE F7 | 	test	arg04, #28 wz
258e8     F0 01 90 AD |  if_e	jmp	#LR__3865
258ec     10 4E 05 F1 | 	add	fp, #16
258f0     A7 1E 0A FB | 	rdlong	local01, fp wz
258f4     10 4E 85 F1 | 	sub	fp, #16
258f8     48 00 90 AD |  if_e	jmp	#LR__3862
258fc     10 4E 05 F1 | 	add	fp, #16
25900     A7 18 02 FB | 	rdlong	arg04, fp
25904     10 4E 85 F1 | 	sub	fp, #16
25908     04 18 0E F2 | 	cmp	arg04, #4 wz
2590c     1C 00 90 5D |  if_ne	jmp	#LR__3861
25910     14 4E 05 F1 | 	add	fp, #20
25914     A7 12 02 F6 | 	mov	arg01, fp
25918     14 4E 85 F1 | 	sub	fp, #20
2591c     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
25920     10 4E 05 F1 | 	add	fp, #16
25924     A7 FA 61 FC | 	wrlong	result1, fp
25928     10 4E 85 F1 | 	sub	fp, #16
2592c                 | LR__3861
2592c     0C 4E 05 F1 | 	add	fp, #12
25930     A7 1E C2 FA | 	rdbyte	local01, fp
25934     08 1E 46 F5 | 	or	local01, #8
25938     A7 1E 42 FC | 	wrbyte	local01, fp
2593c     0C 4E 85 F1 | 	sub	fp, #12
25940     3C 00 90 FD | 	jmp	#LR__3864
25944                 | LR__3862
25944     1A 4E 05 F1 | 	add	fp, #26
25948     A7 1E C2 FA | 	rdbyte	local01, fp
2594c     1A 4E 85 F1 | 	sub	fp, #26
25950     11 1E CE F7 | 	test	local01, #17 wz
25954     10 4E 05 51 |  if_ne	add	fp, #16
25958     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2595c     10 4E 85 51 |  if_ne	sub	fp, #16
25960     1C 00 90 5D |  if_ne	jmp	#LR__3863
25964     0C 4E 05 F1 | 	add	fp, #12
25968     A7 1E C2 FA | 	rdbyte	local01, fp
2596c     0C 4E 85 F1 | 	sub	fp, #12
25970     04 1E CE F7 | 	test	local01, #4 wz
25974     10 4E 05 51 |  if_ne	add	fp, #16
25978     A7 10 68 5C |  if_ne	wrlong	#8, fp
2597c     10 4E 85 51 |  if_ne	sub	fp, #16
25980                 | LR__3863
25980                 | LR__3864
25980     10 4E 05 F1 | 	add	fp, #16
25984     A7 1E 0A FB | 	rdlong	local01, fp wz
25988     10 4E 85 F1 | 	sub	fp, #16
2598c     A8 01 90 5D |  if_ne	jmp	#LR__3868
25990     0C 4E 05 F1 | 	add	fp, #12
25994     A7 1E C2 FA | 	rdbyte	local01, fp
25998     0C 4E 85 F1 | 	sub	fp, #12
2599c     08 1E CE F7 | 	test	local01, #8 wz
259a0     94 01 90 AD |  if_e	jmp	#LR__3868
259a4     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
259a8     54 4E 05 F1 | 	add	fp, #84
259ac     A7 FA 61 FC | 	wrlong	result1, fp
259b0     24 4E 85 F1 | 	sub	fp, #36
259b4     A7 12 02 FB | 	rdlong	arg01, fp
259b8     0E 12 06 F1 | 	add	arg01, #14
259bc     09 FB 61 FC | 	wrlong	result1, arg01
259c0     A7 12 02 FB | 	rdlong	arg01, fp
259c4     16 12 06 F1 | 	add	arg01, #22
259c8     24 4E 05 F1 | 	add	fp, #36
259cc     A7 14 02 FB | 	rdlong	arg02, fp
259d0     09 15 62 FC | 	wrlong	arg02, arg01
259d4     10 4E 85 F1 | 	sub	fp, #16
259d8     A7 12 02 FB | 	rdlong	arg01, fp
259dc     14 4E 85 F1 | 	sub	fp, #20
259e0     A7 14 02 FB | 	rdlong	arg02, fp
259e4     30 4E 85 F1 | 	sub	fp, #48
259e8     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
259ec     48 4E 05 F1 | 	add	fp, #72
259f0     A7 FA 61 FC | 	wrlong	result1, fp
259f4     18 4E 85 F1 | 	sub	fp, #24
259f8     A7 1E 02 FB | 	rdlong	local01, fp
259fc     0B 1E 06 F1 | 	add	local01, #11
25a00     0F 41 48 FC | 	wrbyte	#32, local01
25a04     14 4E 05 F1 | 	add	fp, #20
25a08     A7 12 02 FB | 	rdlong	arg01, fp
25a0c     14 4E 85 F1 | 	sub	fp, #20
25a10     A7 14 02 FB | 	rdlong	arg02, fp
25a14     30 4E 85 F1 | 	sub	fp, #48
25a18     00 16 06 F6 | 	mov	arg03, #0
25a1c     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
25a20     30 4E 05 F1 | 	add	fp, #48
25a24     A7 12 02 FB | 	rdlong	arg01, fp
25a28     1C 12 06 F1 | 	add	arg01, #28
25a2c     09 01 68 FC | 	wrlong	#0, arg01
25a30     14 4E 05 F1 | 	add	fp, #20
25a34     A7 1E 02 FB | 	rdlong	local01, fp
25a38     03 1E 06 F1 | 	add	local01, #3
25a3c     0F 03 48 FC | 	wrbyte	#1, local01
25a40     04 4E 05 F1 | 	add	fp, #4
25a44     A7 1E 0A FB | 	rdlong	local01, fp wz
25a48     48 4E 85 F1 | 	sub	fp, #72
25a4c     E8 00 90 AD |  if_e	jmp	#LR__3868
25a50     44 4E 05 F1 | 	add	fp, #68
25a54     A7 1E 02 FB | 	rdlong	local01, fp
25a58     30 1E 06 F1 | 	add	local01, #48
25a5c     0F 1F 02 FB | 	rdlong	local01, local01
25a60     14 4E 05 F1 | 	add	fp, #20
25a64     A7 1E 62 FC | 	wrlong	local01, fp
25a68     44 4E 85 F1 | 	sub	fp, #68
25a6c     A7 12 02 F6 | 	mov	arg01, fp
25a70     34 4E 05 F1 | 	add	fp, #52
25a74     A7 14 02 FB | 	rdlong	arg02, fp
25a78     48 4E 85 F1 | 	sub	fp, #72
25a7c     00 16 06 F6 | 	mov	arg03, #0
25a80     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
25a84     10 4E 05 F1 | 	add	fp, #16
25a88     A7 FA 61 FC | 	wrlong	result1, fp
25a8c     10 4E 85 F1 | 	sub	fp, #16
25a90     00 FA 0D F2 | 	cmp	result1, #0 wz
25a94     A0 00 90 5D |  if_ne	jmp	#LR__3868
25a98     44 4E 05 F1 | 	add	fp, #68
25a9c     A7 12 02 FB | 	rdlong	arg01, fp
25aa0     14 4E 05 F1 | 	add	fp, #20
25aa4     A7 14 02 FB | 	rdlong	arg02, fp
25aa8     58 4E 85 F1 | 	sub	fp, #88
25aac     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
25ab0     10 4E 05 F1 | 	add	fp, #16
25ab4     A7 FA 61 FC | 	wrlong	result1, fp
25ab8     34 4E 05 F1 | 	add	fp, #52
25abc     A7 18 02 FB | 	rdlong	arg04, fp
25ac0     04 4E 05 F1 | 	add	fp, #4
25ac4     A7 1E 02 FB | 	rdlong	local01, fp
25ac8     48 4E 85 F1 | 	sub	fp, #72
25acc     01 1E 86 F1 | 	sub	local01, #1
25ad0     10 18 06 F1 | 	add	arg04, #16
25ad4     0C 1F 62 FC | 	wrlong	local01, arg04
25ad8     5C 00 90 FD | 	jmp	#LR__3868
25adc                 | LR__3865
25adc     10 4E 05 F1 | 	add	fp, #16
25ae0     A7 18 0A FB | 	rdlong	arg04, fp wz
25ae4     10 4E 85 F1 | 	sub	fp, #16
25ae8     4C 00 90 5D |  if_ne	jmp	#LR__3867
25aec     1A 4E 05 F1 | 	add	fp, #26
25af0     A7 18 C2 FA | 	rdbyte	arg04, fp
25af4     1A 4E 85 F1 | 	sub	fp, #26
25af8     10 18 CE F7 | 	test	arg04, #16 wz
25afc     10 4E 05 51 |  if_ne	add	fp, #16
25b00     A7 08 68 5C |  if_ne	wrlong	#4, fp
25b04     10 4E 85 51 |  if_ne	sub	fp, #16
25b08     2C 00 90 5D |  if_ne	jmp	#LR__3866
25b0c     0C 4E 05 F1 | 	add	fp, #12
25b10     A7 18 C2 FA | 	rdbyte	arg04, fp
25b14     0C 4E 85 F1 | 	sub	fp, #12
25b18     02 18 CE F7 | 	test	arg04, #2 wz
25b1c     1A 4E 05 51 |  if_ne	add	fp, #26
25b20     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
25b24     1A 4E 85 51 |  if_ne	sub	fp, #26
25b28     01 1E CE 57 |  if_ne	test	local01, #1 wz
25b2c     10 4E 05 51 |  if_ne	add	fp, #16
25b30     A7 0E 68 5C |  if_ne	wrlong	#7, fp
25b34     10 4E 85 51 |  if_ne	sub	fp, #16
25b38                 | LR__3866
25b38                 | LR__3867
25b38                 | LR__3868
25b38     10 4E 05 F1 | 	add	fp, #16
25b3c     A7 1E 0A FB | 	rdlong	local01, fp wz
25b40     10 4E 85 F1 | 	sub	fp, #16
25b44     60 00 90 5D |  if_ne	jmp	#LR__3869
25b48     0C 4E 05 F1 | 	add	fp, #12
25b4c     A7 20 C2 FA | 	rdbyte	local02, fp
25b50     0C 4E 85 F1 | 	sub	fp, #12
25b54     08 20 CE F7 | 	test	local02, #8 wz
25b58     0C 4E 05 51 |  if_ne	add	fp, #12
25b5c     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
25b60     40 20 46 55 |  if_ne	or	local02, #64
25b64     A7 20 42 5C |  if_ne	wrbyte	local02, fp
25b68     0C 4E 85 51 |  if_ne	sub	fp, #12
25b6c     04 4E 05 F1 | 	add	fp, #4
25b70     A7 20 02 FB | 	rdlong	local02, fp
25b74     40 4E 05 F1 | 	add	fp, #64
25b78     A7 1E 02 FB | 	rdlong	local01, fp
25b7c     30 1E 06 F1 | 	add	local01, #48
25b80     0F 1F 02 FB | 	rdlong	local01, local01
25b84     20 20 06 F1 | 	add	local02, #32
25b88     10 1F 62 FC | 	wrlong	local01, local02
25b8c     40 4E 85 F1 | 	sub	fp, #64
25b90     A7 20 02 FB | 	rdlong	local02, fp
25b94     2C 4E 05 F1 | 	add	fp, #44
25b98     A7 1E 02 FB | 	rdlong	local01, fp
25b9c     30 4E 85 F1 | 	sub	fp, #48
25ba0     24 20 06 F1 | 	add	local02, #36
25ba4     10 1F 62 FC | 	wrlong	local01, local02
25ba8                 | LR__3869
25ba8     10 4E 05 F1 | 	add	fp, #16
25bac     A7 20 0A FB | 	rdlong	local02, fp wz
25bb0     10 4E 85 F1 | 	sub	fp, #16
25bb4     F4 02 90 5D |  if_ne	jmp	#LR__3875
25bb8     04 4E 05 F1 | 	add	fp, #4
25bbc     A7 20 02 FB | 	rdlong	local02, fp
25bc0     40 4E 05 F1 | 	add	fp, #64
25bc4     A7 12 02 FB | 	rdlong	arg01, fp
25bc8     14 4E 85 F1 | 	sub	fp, #20
25bcc     A7 14 02 FB | 	rdlong	arg02, fp
25bd0     30 4E 85 F1 | 	sub	fp, #48
25bd4     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
25bd8     08 20 06 F1 | 	add	local02, #8
25bdc     10 FB 61 FC | 	wrlong	result1, local02
25be0     04 4E 05 F1 | 	add	fp, #4
25be4     A7 20 02 FB | 	rdlong	local02, fp
25be8     2C 4E 05 F1 | 	add	fp, #44
25bec     A7 12 02 FB | 	rdlong	arg01, fp
25bf0     1C 12 06 F1 | 	add	arg01, #28
25bf4                 | ' {
25bf4                 | ' 
25bf4                 | ' 	return *((DWORD*)ptr);
25bf4     09 FB 01 FB | 	rdlong	result1, arg01
25bf8     0C 20 06 F1 | 	add	local02, #12
25bfc     10 FB 61 FC | 	wrlong	result1, local02
25c00     2C 4E 85 F1 | 	sub	fp, #44
25c04     A7 20 02 FB | 	rdlong	local02, fp
25c08     40 4E 05 F1 | 	add	fp, #64
25c0c     A7 1E 02 FB | 	rdlong	local01, fp
25c10     10 1F 62 FC | 	wrlong	local01, local02
25c14     40 4E 85 F1 | 	sub	fp, #64
25c18     A7 20 02 FB | 	rdlong	local02, fp
25c1c     40 4E 05 F1 | 	add	fp, #64
25c20     A7 1E 02 FB | 	rdlong	local01, fp
25c24     06 1E 06 F1 | 	add	local01, #6
25c28     0F 1F E2 FA | 	rdword	local01, local01
25c2c     04 20 06 F1 | 	add	local02, #4
25c30     10 1F 52 FC | 	wrword	local01, local02
25c34     40 4E 85 F1 | 	sub	fp, #64
25c38     A7 20 02 FB | 	rdlong	local02, fp
25c3c     08 4E 05 F1 | 	add	fp, #8
25c40     A7 1E C2 FA | 	rdbyte	local01, fp
25c44     10 20 06 F1 | 	add	local02, #16
25c48     10 1F 42 FC | 	wrbyte	local01, local02
25c4c     08 4E 85 F1 | 	sub	fp, #8
25c50     A7 20 02 FB | 	rdlong	local02, fp
25c54     11 20 06 F1 | 	add	local02, #17
25c58     10 01 48 FC | 	wrbyte	#0, local02
25c5c     A7 20 02 FB | 	rdlong	local02, fp
25c60     1C 20 06 F1 | 	add	local02, #28
25c64     10 01 68 FC | 	wrlong	#0, local02
25c68     A7 20 02 FB | 	rdlong	local02, fp
25c6c     14 20 06 F1 | 	add	local02, #20
25c70     10 01 68 FC | 	wrlong	#0, local02
25c74     A7 12 02 FB | 	rdlong	arg01, fp
25c78     04 4E 85 F1 | 	sub	fp, #4
25c7c     28 12 06 F1 | 	add	arg01, #40
25c80     00 14 06 F6 | 	mov	arg02, #0
25c84     09 16 C6 F9 | 	decod	arg03, #9
25c88     98 00 A0 FD | 	call	#\builtin_bytefill_
25c8c     0C 4E 05 F1 | 	add	fp, #12
25c90     A7 20 C2 FA | 	rdbyte	local02, fp
25c94     0C 4E 85 F1 | 	sub	fp, #12
25c98     20 20 CE F7 | 	test	local02, #32 wz
25c9c     0C 02 90 AD |  if_e	jmp	#LR__3874
25ca0     04 4E 05 F1 | 	add	fp, #4
25ca4     A7 1E 02 FB | 	rdlong	local01, fp
25ca8     04 4E 85 F1 | 	sub	fp, #4
25cac     0C 1E 06 F1 | 	add	local01, #12
25cb0     0F 21 02 FB | 	rdlong	local02, local01
25cb4     01 20 16 F2 | 	cmp	local02, #1 wc
25cb8     F0 01 90 CD |  if_b	jmp	#LR__3874
25cbc     04 4E 05 F1 | 	add	fp, #4
25cc0     A7 1E 02 FB | 	rdlong	local01, fp
25cc4     0F 21 02 F6 | 	mov	local02, local01
25cc8     0C 1E 06 F1 | 	add	local01, #12
25ccc     0F 1F 02 FB | 	rdlong	local01, local01
25cd0     14 20 06 F1 | 	add	local02, #20
25cd4     10 1F 62 FC | 	wrlong	local01, local02
25cd8     40 4E 05 F1 | 	add	fp, #64
25cdc     A7 20 02 FB | 	rdlong	local02, fp
25ce0     0A 20 06 F1 | 	add	local02, #10
25ce4     10 21 E2 FA | 	rdword	local02, local02
25ce8     09 20 66 F0 | 	shl	local02, #9
25cec     08 4E 05 F1 | 	add	fp, #8
25cf0     A7 20 62 FC | 	wrlong	local02, fp
25cf4     48 4E 85 F1 | 	sub	fp, #72
25cf8     A7 20 02 FB | 	rdlong	local02, fp
25cfc     08 20 06 F1 | 	add	local02, #8
25d00     10 1F 02 FB | 	rdlong	local01, local02
25d04     4C 4E 05 F1 | 	add	fp, #76
25d08     A7 1E 62 FC | 	wrlong	local01, fp
25d0c                 | ' 				fp->fptr = fp->obj.objsize;
25d0c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
25d0c                 | ' 				clst = fp->obj.sclust;
25d0c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
25d0c     4C 4E 85 F1 | 	sub	fp, #76
25d10     A7 20 02 FB | 	rdlong	local02, fp
25d14     0C 20 06 F1 | 	add	local02, #12
25d18     10 1F 02 FB | 	rdlong	local01, local02
25d1c     58 4E 05 F1 | 	add	fp, #88
25d20     A7 1E 62 FC | 	wrlong	local01, fp
25d24     5C 4E 85 F1 | 	sub	fp, #92
25d28                 | LR__3870
25d28     10 4E 05 F1 | 	add	fp, #16
25d2c     A7 20 0A FB | 	rdlong	local02, fp wz
25d30     10 4E 85 F1 | 	sub	fp, #16
25d34     94 00 90 5D |  if_ne	jmp	#LR__3871
25d38     5C 4E 05 F1 | 	add	fp, #92
25d3c     A7 20 02 FB | 	rdlong	local02, fp
25d40     10 4E 85 F1 | 	sub	fp, #16
25d44     A7 1E 02 FB | 	rdlong	local01, fp
25d48     4C 4E 85 F1 | 	sub	fp, #76
25d4c     0F 21 1A F2 | 	cmp	local02, local01 wcz
25d50     78 00 90 ED |  if_be	jmp	#LR__3871
25d54     04 4E 05 F1 | 	add	fp, #4
25d58     A7 12 02 FB | 	rdlong	arg01, fp
25d5c     4C 4E 05 F1 | 	add	fp, #76
25d60     A7 14 02 FB | 	rdlong	arg02, fp
25d64     50 4E 85 F1 | 	sub	fp, #80
25d68     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
25d6c     50 4E 05 F1 | 	add	fp, #80
25d70     A7 FA 61 FC | 	wrlong	result1, fp
25d74     50 4E 85 F1 | 	sub	fp, #80
25d78     02 FA 15 F2 | 	cmp	result1, #2 wc
25d7c     10 4E 05 C1 |  if_b	add	fp, #16
25d80     A7 04 68 CC |  if_b	wrlong	#2, fp
25d84     10 4E 85 C1 |  if_b	sub	fp, #16
25d88     50 4E 05 F1 | 	add	fp, #80
25d8c     A7 20 02 FB | 	rdlong	local02, fp
25d90     50 4E 85 F1 | 	sub	fp, #80
25d94     FF FF 7F FF 
25d98     FF 21 0E F2 | 	cmp	local02, ##-1 wz
25d9c     10 4E 05 A1 |  if_e	add	fp, #16
25da0     A7 02 68 AC |  if_e	wrlong	#1, fp
25da4     10 4E 85 A1 |  if_e	sub	fp, #16
25da8     5C 4E 05 F1 | 	add	fp, #92
25dac     A7 20 02 FB | 	rdlong	local02, fp
25db0     10 4E 85 F1 | 	sub	fp, #16
25db4     A7 1E 02 FB | 	rdlong	local01, fp
25db8     0F 21 82 F1 | 	sub	local02, local01
25dbc     10 4E 05 F1 | 	add	fp, #16
25dc0     A7 20 62 FC | 	wrlong	local02, fp
25dc4     5C 4E 85 F1 | 	sub	fp, #92
25dc8     5C FF 9F FD | 	jmp	#LR__3870
25dcc                 | LR__3871
25dcc     04 4E 05 F1 | 	add	fp, #4
25dd0     A7 20 02 FB | 	rdlong	local02, fp
25dd4     4C 4E 05 F1 | 	add	fp, #76
25dd8     A7 1E 02 FB | 	rdlong	local01, fp
25ddc     18 20 06 F1 | 	add	local02, #24
25de0     10 1F 62 FC | 	wrlong	local01, local02
25de4     40 4E 85 F1 | 	sub	fp, #64
25de8     A7 20 0A FB | 	rdlong	local02, fp wz
25dec     10 4E 85 F1 | 	sub	fp, #16
25df0     B8 00 90 5D |  if_ne	jmp	#LR__3873
25df4     5C 4E 05 F1 | 	add	fp, #92
25df8     A7 1E 02 FB | 	rdlong	local01, fp
25dfc     5C 4E 85 F1 | 	sub	fp, #92
25e00     FF 1F CE F7 | 	test	local01, #511 wz
25e04     A4 00 90 AD |  if_e	jmp	#LR__3873
25e08     44 4E 05 F1 | 	add	fp, #68
25e0c     A7 12 02 FB | 	rdlong	arg01, fp
25e10     0C 4E 05 F1 | 	add	fp, #12
25e14     A7 14 02 FB | 	rdlong	arg02, fp
25e18     50 4E 85 F1 | 	sub	fp, #80
25e1c     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
25e20     58 4E 05 F1 | 	add	fp, #88
25e24     A7 FA 61 FC | 	wrlong	result1, fp
25e28     00 FA 4D F2 | 	cmps	result1, #0 wz
25e2c     58 4E 85 F1 | 	sub	fp, #88
25e30     10 4E 05 A1 |  if_e	add	fp, #16
25e34     A7 04 68 AC |  if_e	wrlong	#2, fp
25e38     10 4E 85 A1 |  if_e	sub	fp, #16
25e3c     6C 00 90 AD |  if_e	jmp	#LR__3872
25e40     04 4E 05 F1 | 	add	fp, #4
25e44     A7 20 02 FB | 	rdlong	local02, fp
25e48     54 4E 05 F1 | 	add	fp, #84
25e4c     A7 1E 02 FB | 	rdlong	local01, fp
25e50     04 4E 05 F1 | 	add	fp, #4
25e54     A7 18 02 FB | 	rdlong	arg04, fp
25e58     09 18 46 F0 | 	shr	arg04, #9
25e5c     0C 1F 02 F1 | 	add	local01, arg04
25e60     1C 20 06 F1 | 	add	local02, #28
25e64     10 1F 62 FC | 	wrlong	local01, local02
25e68     18 4E 85 F1 | 	sub	fp, #24
25e6c     A7 20 02 FB | 	rdlong	local02, fp
25e70     01 20 06 F1 | 	add	local02, #1
25e74     10 13 C2 FA | 	rdbyte	arg01, local02
25e78     40 4E 85 F1 | 	sub	fp, #64
25e7c     A7 20 02 FB | 	rdlong	local02, fp
25e80     10 15 02 F6 | 	mov	arg02, local02
25e84     28 14 06 F1 | 	add	arg02, #40
25e88     04 4E 85 F1 | 	sub	fp, #4
25e8c     1C 20 06 F1 | 	add	local02, #28
25e90     10 17 02 FB | 	rdlong	arg03, local02
25e94     01 18 06 F6 | 	mov	arg04, #1
25e98     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
25e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
25ea0     10 4E 05 51 |  if_ne	add	fp, #16
25ea4     A7 02 68 5C |  if_ne	wrlong	#1, fp
25ea8     10 4E 85 51 |  if_ne	sub	fp, #16
25eac                 | LR__3872
25eac                 | LR__3873
25eac                 | LR__3874
25eac                 | LR__3875
25eac                 | LR__3876
25eac     10 4E 05 F1 | 	add	fp, #16
25eb0     A7 20 0A FB | 	rdlong	local02, fp wz
25eb4     10 4E 85 F1 | 	sub	fp, #16
25eb8     04 4E 05 51 |  if_ne	add	fp, #4
25ebc     A7 20 02 5B |  if_ne	rdlong	local02, fp
25ec0     04 4E 85 51 |  if_ne	sub	fp, #4
25ec4     10 01 68 5C |  if_ne	wrlong	#0, local02
25ec8                 | ' 
25ec8                 | ' 	return res ;
25ec8     10 4E 05 F1 | 	add	fp, #16
25ecc     A7 FA 01 FB | 	rdlong	result1, fp
25ed0     10 4E 85 F1 | 	sub	fp, #16
25ed4                 | LR__3877
25ed4     A7 F0 03 F6 | 	mov	ptra, fp
25ed8     B2 00 A0 FD | 	call	#popregs_
25edc                 | _fatfs_cc_f_open_ret
25edc     2D 00 64 FD | 	ret
25ee0                 | 
25ee0                 | _fatfs_cc_f_read
25ee0     0E 4A 05 F6 | 	mov	COUNT_, #14
25ee4     A8 00 A0 FD | 	call	#pushregs_
25ee8     38 F0 07 F1 | 	add	ptra, #56
25eec     04 4E 05 F1 | 	add	fp, #4
25ef0     A7 12 62 FC | 	wrlong	arg01, fp
25ef4     04 4E 05 F1 | 	add	fp, #4
25ef8     A7 14 62 FC | 	wrlong	arg02, fp
25efc     04 4E 05 F1 | 	add	fp, #4
25f00     A7 16 62 FC | 	wrlong	arg03, fp
25f04     04 4E 05 F1 | 	add	fp, #4
25f08     A7 18 62 FC | 	wrlong	arg04, fp
25f0c     08 4E 85 F1 | 	sub	fp, #8
25f10     A7 FA 01 FB | 	rdlong	result1, fp
25f14     2C 4E 05 F1 | 	add	fp, #44
25f18     A7 FA 61 FC | 	wrlong	result1, fp
25f1c     24 4E 85 F1 | 	sub	fp, #36
25f20     A7 FA 01 FB | 	rdlong	result1, fp
25f24     FD 00 68 FC | 	wrlong	#0, result1
25f28     0C 4E 85 F1 | 	sub	fp, #12
25f2c     A7 12 02 FB | 	rdlong	arg01, fp
25f30     14 4E 05 F1 | 	add	fp, #20
25f34     A7 14 02 F6 | 	mov	arg02, fp
25f38     18 4E 85 F1 | 	sub	fp, #24
25f3c     24 F7 BF FD | 	call	#_fatfs_cc_validate
25f40     14 4E 05 F1 | 	add	fp, #20
25f44     A7 FA 61 FC | 	wrlong	result1, fp
25f48     00 FA 4D F2 | 	cmps	result1, #0 wz
25f4c     14 4E 85 F1 | 	sub	fp, #20
25f50     20 00 90 5D |  if_ne	jmp	#LR__3880
25f54     04 4E 05 F1 | 	add	fp, #4
25f58     A7 14 02 FB | 	rdlong	arg02, fp
25f5c     11 14 06 F1 | 	add	arg02, #17
25f60     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
25f64     10 4E 05 F1 | 	add	fp, #16
25f68     A7 14 62 FC | 	wrlong	arg02, fp
25f6c     14 4E 85 F1 | 	sub	fp, #20
25f70     10 00 90 AD |  if_e	jmp	#LR__3881
25f74                 | LR__3880
25f74     14 4E 05 F1 | 	add	fp, #20
25f78     A7 FA 01 FB | 	rdlong	result1, fp
25f7c     14 4E 85 F1 | 	sub	fp, #20
25f80     EC 05 90 FD | 	jmp	#LR__3900
25f84                 | LR__3881
25f84     04 4E 05 F1 | 	add	fp, #4
25f88     A7 18 02 FB | 	rdlong	arg04, fp
25f8c     04 4E 85 F1 | 	sub	fp, #4
25f90     10 18 06 F1 | 	add	arg04, #16
25f94     0C 19 C2 FA | 	rdbyte	arg04, arg04
25f98     01 18 CE F7 | 	test	arg04, #1 wz
25f9c     07 FA 05 A6 |  if_e	mov	result1, #7
25fa0     CC 05 90 AD |  if_e	jmp	#LR__3900
25fa4     04 4E 05 F1 | 	add	fp, #4
25fa8     A7 1E 02 FB | 	rdlong	local01, fp
25fac     0F 21 02 F6 | 	mov	local02, local01
25fb0     0C 20 06 F1 | 	add	local02, #12
25fb4     10 23 02 FB | 	rdlong	local03, local02
25fb8     14 1E 06 F1 | 	add	local01, #20
25fbc     0F 1F 02 FB | 	rdlong	local01, local01
25fc0     0F 23 82 F1 | 	sub	local03, local01
25fc4     20 4E 05 F1 | 	add	fp, #32
25fc8     A7 22 62 FC | 	wrlong	local03, fp
25fcc     18 4E 85 F1 | 	sub	fp, #24
25fd0     A7 24 02 FB | 	rdlong	local04, fp
25fd4     0C 4E 85 F1 | 	sub	fp, #12
25fd8     11 25 1A F2 | 	cmp	local04, local03 wcz
25fdc     24 4E 05 11 |  if_a	add	fp, #36
25fe0     A7 24 02 1B |  if_a	rdlong	local04, fp
25fe4     18 4E 85 11 |  if_a	sub	fp, #24
25fe8     A7 24 62 1C |  if_a	wrlong	local04, fp
25fec     0C 4E 85 11 |  if_a	sub	fp, #12
25ff0                 | ' 
25ff0                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
25ff0                 | LR__3882
25ff0     0C 4E 05 F1 | 	add	fp, #12
25ff4     A7 20 02 FB | 	rdlong	local02, fp
25ff8     0C 4E 85 F1 | 	sub	fp, #12
25ffc     10 25 02 F6 | 	mov	local04, local02
26000     01 24 16 F2 | 	cmp	local04, #1 wc
26004     64 05 90 CD |  if_b	jmp	#LR__3899
26008     04 4E 05 F1 | 	add	fp, #4
2600c     A7 22 02 FB | 	rdlong	local03, fp
26010     04 4E 85 F1 | 	sub	fp, #4
26014     14 22 06 F1 | 	add	local03, #20
26018     11 23 02 FB | 	rdlong	local03, local03
2601c     FF 23 CE F7 | 	test	local03, #511 wz
26020     3C 04 90 5D |  if_ne	jmp	#LR__3897
26024     04 4E 05 F1 | 	add	fp, #4
26028     A7 1E 02 FB | 	rdlong	local01, fp
2602c     14 1E 06 F1 | 	add	local01, #20
26030     0F 23 02 FB | 	rdlong	local03, local01
26034     09 22 46 F0 | 	shr	local03, #9
26038     14 4E 05 F1 | 	add	fp, #20
2603c     A7 26 02 FB | 	rdlong	local05, fp
26040     13 29 02 F6 | 	mov	local06, local05
26044     0A 28 06 F1 | 	add	local06, #10
26048     14 2B E2 FA | 	rdword	local07, local06
2604c     0A 28 86 F1 | 	sub	local06, #10
26050     15 2D 32 F9 | 	getword	local08, local07, #0
26054     01 2C 86 F1 | 	sub	local08, #1
26058     16 23 0A F5 | 	and	local03, local08 wz
2605c     18 4E 05 F1 | 	add	fp, #24
26060     A7 22 62 FC | 	wrlong	local03, fp
26064     30 4E 85 F1 | 	sub	fp, #48
26068     E0 00 90 5D |  if_ne	jmp	#LR__3887
2606c     04 4E 05 F1 | 	add	fp, #4
26070     A7 22 02 FB | 	rdlong	local03, fp
26074     04 4E 85 F1 | 	sub	fp, #4
26078     14 22 06 F1 | 	add	local03, #20
2607c     11 23 0A FB | 	rdlong	local03, local03 wz
26080     20 00 90 5D |  if_ne	jmp	#LR__3883
26084     04 4E 05 F1 | 	add	fp, #4
26088     A7 22 02 FB | 	rdlong	local03, fp
2608c     08 22 06 F1 | 	add	local03, #8
26090     11 23 02 FB | 	rdlong	local03, local03
26094     18 4E 05 F1 | 	add	fp, #24
26098     A7 22 62 FC | 	wrlong	local03, fp
2609c     1C 4E 85 F1 | 	sub	fp, #28
260a0     28 00 90 FD | 	jmp	#LR__3884
260a4                 | LR__3883
260a4     04 4E 05 F1 | 	add	fp, #4
260a8     A7 2C 02 FB | 	rdlong	local08, fp
260ac     16 13 02 F6 | 	mov	arg01, local08
260b0     04 4E 85 F1 | 	sub	fp, #4
260b4     18 2C 06 F1 | 	add	local08, #24
260b8     16 15 02 FB | 	rdlong	arg02, local08
260bc     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
260c0     1C 4E 05 F1 | 	add	fp, #28
260c4     A7 FA 61 FC | 	wrlong	result1, fp
260c8     1C 4E 85 F1 | 	sub	fp, #28
260cc                 | LR__3884
260cc     1C 4E 05 F1 | 	add	fp, #28
260d0     A7 22 02 FB | 	rdlong	local03, fp
260d4     1C 4E 85 F1 | 	sub	fp, #28
260d8     02 22 16 F2 | 	cmp	local03, #2 wc
260dc     1C 00 90 3D |  if_ae	jmp	#LR__3885
260e0     04 4E 05 F1 | 	add	fp, #4
260e4     A7 22 02 FB | 	rdlong	local03, fp
260e8     04 4E 85 F1 | 	sub	fp, #4
260ec     11 22 06 F1 | 	add	local03, #17
260f0     11 05 48 FC | 	wrbyte	#2, local03
260f4     02 FA 05 F6 | 	mov	result1, #2
260f8     74 04 90 FD | 	jmp	#LR__3900
260fc                 | LR__3885
260fc     1C 4E 05 F1 | 	add	fp, #28
26100     A7 22 02 FB | 	rdlong	local03, fp
26104     1C 4E 85 F1 | 	sub	fp, #28
26108     FF FF 7F FF 
2610c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
26110     1C 00 90 5D |  if_ne	jmp	#LR__3886
26114     04 4E 05 F1 | 	add	fp, #4
26118     A7 22 02 FB | 	rdlong	local03, fp
2611c     04 4E 85 F1 | 	sub	fp, #4
26120     11 22 06 F1 | 	add	local03, #17
26124     11 03 48 FC | 	wrbyte	#1, local03
26128     01 FA 05 F6 | 	mov	result1, #1
2612c     40 04 90 FD | 	jmp	#LR__3900
26130                 | LR__3886
26130     04 4E 05 F1 | 	add	fp, #4
26134     A7 22 02 FB | 	rdlong	local03, fp
26138     18 4E 05 F1 | 	add	fp, #24
2613c     A7 2C 02 FB | 	rdlong	local08, fp
26140     1C 4E 85 F1 | 	sub	fp, #28
26144     18 22 06 F1 | 	add	local03, #24
26148     11 2D 62 FC | 	wrlong	local08, local03
2614c                 | LR__3887
2614c     18 4E 05 F1 | 	add	fp, #24
26150     A7 12 02 FB | 	rdlong	arg01, fp
26154     14 4E 85 F1 | 	sub	fp, #20
26158     A7 22 02 FB | 	rdlong	local03, fp
2615c     04 4E 85 F1 | 	sub	fp, #4
26160     18 22 06 F1 | 	add	local03, #24
26164     11 15 02 FB | 	rdlong	arg02, local03
26168     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2616c     20 4E 05 F1 | 	add	fp, #32
26170     A7 FA 61 FC | 	wrlong	result1, fp
26174     20 4E 85 F1 | 	sub	fp, #32
26178     00 FA 0D F2 | 	cmp	result1, #0 wz
2617c     1C 00 90 5D |  if_ne	jmp	#LR__3888
26180     04 4E 05 F1 | 	add	fp, #4
26184     A7 22 02 FB | 	rdlong	local03, fp
26188     04 4E 85 F1 | 	sub	fp, #4
2618c     11 22 06 F1 | 	add	local03, #17
26190     11 05 48 FC | 	wrbyte	#2, local03
26194     02 FA 05 F6 | 	mov	result1, #2
26198     D4 03 90 FD | 	jmp	#LR__3900
2619c                 | LR__3888
2619c     20 4E 05 F1 | 	add	fp, #32
261a0     A7 22 02 FB | 	rdlong	local03, fp
261a4     10 4E 05 F1 | 	add	fp, #16
261a8     A7 2C 02 FB | 	rdlong	local08, fp
261ac     16 23 02 F1 | 	add	local03, local08
261b0     10 4E 85 F1 | 	sub	fp, #16
261b4     A7 22 62 FC | 	wrlong	local03, fp
261b8     14 4E 85 F1 | 	sub	fp, #20
261bc     A7 22 02 FB | 	rdlong	local03, fp
261c0     09 22 46 F0 | 	shr	local03, #9
261c4     20 4E 05 F1 | 	add	fp, #32
261c8     A7 22 62 FC | 	wrlong	local03, fp
261cc     2C 4E 85 F1 | 	sub	fp, #44
261d0     01 22 16 F2 | 	cmp	local03, #1 wc
261d4     5C 01 90 CD |  if_b	jmp	#LR__3892
261d8     30 4E 05 F1 | 	add	fp, #48
261dc     A7 22 02 FB | 	rdlong	local03, fp
261e0     04 4E 85 F1 | 	sub	fp, #4
261e4     A7 2C 02 FB | 	rdlong	local08, fp
261e8     16 23 02 F1 | 	add	local03, local08
261ec     14 4E 85 F1 | 	sub	fp, #20
261f0     A7 2C 02 FB | 	rdlong	local08, fp
261f4     18 4E 85 F1 | 	sub	fp, #24
261f8     0A 2C 06 F1 | 	add	local08, #10
261fc     16 2D E2 FA | 	rdword	local08, local08
26200     16 23 1A F2 | 	cmp	local03, local08 wcz
26204     28 00 90 ED |  if_be	jmp	#LR__3889
26208     18 4E 05 F1 | 	add	fp, #24
2620c     A7 1E 02 FB | 	rdlong	local01, fp
26210     0A 1E 06 F1 | 	add	local01, #10
26214     0F 23 E2 FA | 	rdword	local03, local01
26218     18 4E 05 F1 | 	add	fp, #24
2621c     A7 2C 02 FB | 	rdlong	local08, fp
26220     16 23 82 F1 | 	sub	local03, local08
26224     04 4E 85 F1 | 	sub	fp, #4
26228     A7 22 62 FC | 	wrlong	local03, fp
2622c     2C 4E 85 F1 | 	sub	fp, #44
26230                 | LR__3889
26230     18 4E 05 F1 | 	add	fp, #24
26234     A7 1E 02 FB | 	rdlong	local01, fp
26238     01 1E 06 F1 | 	add	local01, #1
2623c     0F 13 C2 FA | 	rdbyte	arg01, local01
26240     1C 4E 05 F1 | 	add	fp, #28
26244     A7 14 02 FB | 	rdlong	arg02, fp
26248     14 4E 85 F1 | 	sub	fp, #20
2624c     A7 16 02 FB | 	rdlong	arg03, fp
26250     0C 4E 05 F1 | 	add	fp, #12
26254     A7 18 02 FB | 	rdlong	arg04, fp
26258     2C 4E 85 F1 | 	sub	fp, #44
2625c     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
26260     00 FA 0D F2 | 	cmp	result1, #0 wz
26264     1C 00 90 AD |  if_e	jmp	#LR__3890
26268     04 4E 05 F1 | 	add	fp, #4
2626c     A7 22 02 FB | 	rdlong	local03, fp
26270     04 4E 85 F1 | 	sub	fp, #4
26274     11 22 06 F1 | 	add	local03, #17
26278     11 03 48 FC | 	wrbyte	#1, local03
2627c     01 FA 05 F6 | 	mov	result1, #1
26280     EC 02 90 FD | 	jmp	#LR__3900
26284                 | LR__3890
26284     04 4E 05 F1 | 	add	fp, #4
26288     A7 1E 02 FB | 	rdlong	local01, fp
2628c     04 4E 85 F1 | 	sub	fp, #4
26290     10 1E 06 F1 | 	add	local01, #16
26294     0F 23 C2 FA | 	rdbyte	local03, local01
26298     80 22 CE F7 | 	test	local03, #128 wz
2629c     78 00 90 AD |  if_e	jmp	#LR__3891
262a0     04 4E 05 F1 | 	add	fp, #4
262a4     A7 2C 02 FB | 	rdlong	local08, fp
262a8     1C 2C 06 F1 | 	add	local08, #28
262ac     16 2D 02 FB | 	rdlong	local08, local08
262b0     1C 4E 05 F1 | 	add	fp, #28
262b4     A7 2E 02 FB | 	rdlong	local09, fp
262b8     17 2D 82 F1 | 	sub	local08, local09
262bc     0C 4E 05 F1 | 	add	fp, #12
262c0     A7 30 02 FB | 	rdlong	local10, fp
262c4     2C 4E 85 F1 | 	sub	fp, #44
262c8     18 33 02 F6 | 	mov	local11, local10
262cc     19 2D 12 F2 | 	cmp	local08, local11 wc
262d0     44 00 90 3D |  if_ae	jmp	#LR__3891
262d4     34 4E 05 F1 | 	add	fp, #52
262d8     A7 12 02 FB | 	rdlong	arg01, fp
262dc     30 4E 85 F1 | 	sub	fp, #48
262e0     A7 14 02 FB | 	rdlong	arg02, fp
262e4     0A 33 02 F6 | 	mov	local11, arg02
262e8     1C 32 06 F1 | 	add	local11, #28
262ec     19 2F 02 FB | 	rdlong	local09, local11
262f0     1C 4E 05 F1 | 	add	fp, #28
262f4     A7 26 02 FB | 	rdlong	local05, fp
262f8     13 2F 82 F1 | 	sub	local09, local05
262fc     09 2E 66 F0 | 	shl	local09, #9
26300     17 33 02 F6 | 	mov	local11, local09
26304     17 13 02 F1 | 	add	arg01, local09
26308     20 4E 85 F1 | 	sub	fp, #32
2630c     28 14 06 F1 | 	add	arg02, #40
26310     09 16 C6 F9 | 	decod	arg03, #9
26314     20 49 BF FD | 	call	#__system____builtin_memmove
26318                 | LR__3891
26318     2C 4E 05 F1 | 	add	fp, #44
2631c     A7 22 02 FB | 	rdlong	local03, fp
26320     09 22 66 F0 | 	shl	local03, #9
26324     04 4E 85 F1 | 	sub	fp, #4
26328     A7 22 62 FC | 	wrlong	local03, fp
2632c     28 4E 85 F1 | 	sub	fp, #40
26330                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
26330                 | ' 				}
26330                 | ' 
26330                 | ' 
26330                 | ' 				rcnt =  ((UINT) 512 )  * cc;
26330                 | ' 				continue;
26330     B4 01 90 FD | 	jmp	#LR__3898
26334                 | LR__3892
26334     04 4E 05 F1 | 	add	fp, #4
26338     A7 22 02 FB | 	rdlong	local03, fp
2633c     1C 22 06 F1 | 	add	local03, #28
26340     11 23 02 FB | 	rdlong	local03, local03
26344     1C 4E 05 F1 | 	add	fp, #28
26348     A7 1E 02 FB | 	rdlong	local01, fp
2634c     20 4E 85 F1 | 	sub	fp, #32
26350     0F 23 0A F2 | 	cmp	local03, local01 wz
26354     EC 00 90 AD |  if_e	jmp	#LR__3896
26358     04 4E 05 F1 | 	add	fp, #4
2635c     A7 1E 02 FB | 	rdlong	local01, fp
26360     04 4E 85 F1 | 	sub	fp, #4
26364     10 1E 06 F1 | 	add	local01, #16
26368     0F 23 C2 FA | 	rdbyte	local03, local01
2636c     80 22 CE F7 | 	test	local03, #128 wz
26370     7C 00 90 AD |  if_e	jmp	#LR__3894
26374     18 4E 05 F1 | 	add	fp, #24
26378     A7 1E 02 FB | 	rdlong	local01, fp
2637c     01 1E 06 F1 | 	add	local01, #1
26380     0F 13 C2 FA | 	rdbyte	arg01, local01
26384     14 4E 85 F1 | 	sub	fp, #20
26388     A7 22 02 FB | 	rdlong	local03, fp
2638c     11 15 02 F6 | 	mov	arg02, local03
26390     28 14 06 F1 | 	add	arg02, #40
26394     04 4E 85 F1 | 	sub	fp, #4
26398     1C 22 06 F1 | 	add	local03, #28
2639c     11 17 02 FB | 	rdlong	arg03, local03
263a0     01 18 06 F6 | 	mov	arg04, #1
263a4     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
263a8     00 FA 0D F2 | 	cmp	result1, #0 wz
263ac     1C 00 90 AD |  if_e	jmp	#LR__3893
263b0     04 4E 05 F1 | 	add	fp, #4
263b4     A7 22 02 FB | 	rdlong	local03, fp
263b8     04 4E 85 F1 | 	sub	fp, #4
263bc     11 22 06 F1 | 	add	local03, #17
263c0     11 03 48 FC | 	wrbyte	#1, local03
263c4     01 FA 05 F6 | 	mov	result1, #1
263c8     A4 01 90 FD | 	jmp	#LR__3900
263cc                 | LR__3893
263cc     04 4E 05 F1 | 	add	fp, #4
263d0     A7 32 02 FB | 	rdlong	local11, fp
263d4     19 23 02 F6 | 	mov	local03, local11
263d8     04 4E 85 F1 | 	sub	fp, #4
263dc     10 32 06 F1 | 	add	local11, #16
263e0     19 33 C2 FA | 	rdbyte	local11, local11
263e4     7F 32 06 F5 | 	and	local11, #127
263e8     10 22 06 F1 | 	add	local03, #16
263ec     11 33 42 FC | 	wrbyte	local11, local03
263f0                 | LR__3894
263f0     18 4E 05 F1 | 	add	fp, #24
263f4     A7 1E 02 FB | 	rdlong	local01, fp
263f8     01 1E 06 F1 | 	add	local01, #1
263fc     0F 13 C2 FA | 	rdbyte	arg01, local01
26400     14 4E 85 F1 | 	sub	fp, #20
26404     A7 14 02 FB | 	rdlong	arg02, fp
26408     28 14 06 F1 | 	add	arg02, #40
2640c     1C 4E 05 F1 | 	add	fp, #28
26410     A7 16 02 FB | 	rdlong	arg03, fp
26414     20 4E 85 F1 | 	sub	fp, #32
26418     01 18 06 F6 | 	mov	arg04, #1
2641c     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
26420     00 FA 0D F2 | 	cmp	result1, #0 wz
26424     1C 00 90 AD |  if_e	jmp	#LR__3895
26428     04 4E 05 F1 | 	add	fp, #4
2642c     A7 22 02 FB | 	rdlong	local03, fp
26430     04 4E 85 F1 | 	sub	fp, #4
26434     11 22 06 F1 | 	add	local03, #17
26438     11 03 48 FC | 	wrbyte	#1, local03
2643c     01 FA 05 F6 | 	mov	result1, #1
26440     2C 01 90 FD | 	jmp	#LR__3900
26444                 | LR__3895
26444                 | LR__3896
26444     04 4E 05 F1 | 	add	fp, #4
26448     A7 22 02 FB | 	rdlong	local03, fp
2644c     1C 4E 05 F1 | 	add	fp, #28
26450     A7 32 02 FB | 	rdlong	local11, fp
26454     20 4E 85 F1 | 	sub	fp, #32
26458     1C 22 06 F1 | 	add	local03, #28
2645c     11 33 62 FC | 	wrlong	local11, local03
26460                 | LR__3897
26460     04 4E 05 F1 | 	add	fp, #4
26464     A7 1E 02 FB | 	rdlong	local01, fp
26468     14 1E 06 F1 | 	add	local01, #20
2646c     0F 33 02 FB | 	rdlong	local11, local01
26470     FF 33 06 F5 | 	and	local11, #511
26474     09 22 C6 F9 | 	decod	local03, #9
26478     19 23 82 F1 | 	sub	local03, local11
2647c     24 4E 05 F1 | 	add	fp, #36
26480     A7 22 62 FC | 	wrlong	local03, fp
26484     1C 4E 85 F1 | 	sub	fp, #28
26488     A7 32 02 FB | 	rdlong	local11, fp
2648c     0C 4E 85 F1 | 	sub	fp, #12
26490     19 23 1A F2 | 	cmp	local03, local11 wcz
26494     0C 4E 05 11 |  if_a	add	fp, #12
26498     A7 22 02 1B |  if_a	rdlong	local03, fp
2649c     1C 4E 05 11 |  if_a	add	fp, #28
264a0     A7 22 62 1C |  if_a	wrlong	local03, fp
264a4     28 4E 85 11 |  if_a	sub	fp, #40
264a8     34 4E 05 F1 | 	add	fp, #52
264ac     A7 12 02 FB | 	rdlong	arg01, fp
264b0     30 4E 85 F1 | 	sub	fp, #48
264b4     A7 28 02 FB | 	rdlong	local06, fp
264b8     14 15 02 F6 | 	mov	arg02, local06
264bc     28 14 06 F1 | 	add	arg02, #40
264c0     14 28 06 F1 | 	add	local06, #20
264c4     14 33 02 FB | 	rdlong	local11, local06
264c8     19 2F 02 F6 | 	mov	local09, local11
264cc     17 31 02 F6 | 	mov	local10, local09
264d0     FF 31 06 F5 | 	and	local10, #511
264d4     18 15 02 F1 | 	add	arg02, local10
264d8     24 4E 05 F1 | 	add	fp, #36
264dc     A7 16 02 FB | 	rdlong	arg03, fp
264e0     28 4E 85 F1 | 	sub	fp, #40
264e4     50 47 BF FD | 	call	#__system____builtin_memmove
264e8                 | LR__3898
264e8     0C 4E 05 F1 | 	add	fp, #12
264ec     A7 22 02 FB | 	rdlong	local03, fp
264f0     1C 4E 05 F1 | 	add	fp, #28
264f4     A7 2C 02 FB | 	rdlong	local08, fp
264f8     16 23 82 F1 | 	sub	local03, local08
264fc     1C 4E 85 F1 | 	sub	fp, #28
26500     A7 22 62 FC | 	wrlong	local03, fp
26504     04 4E 05 F1 | 	add	fp, #4
26508     A7 1E 02 FB | 	rdlong	local01, fp
2650c     0F 2B 02 FB | 	rdlong	local07, local01
26510     18 4E 05 F1 | 	add	fp, #24
26514     A7 2C 02 FB | 	rdlong	local08, fp
26518     16 2B 02 F1 | 	add	local07, local08
2651c     0F 2B 62 FC | 	wrlong	local07, local01
26520     0C 4E 05 F1 | 	add	fp, #12
26524     A7 22 02 FB | 	rdlong	local03, fp
26528     0C 4E 85 F1 | 	sub	fp, #12
2652c     A7 34 02 FB | 	rdlong	local12, fp
26530     1A 23 02 F1 | 	add	local03, local12
26534     0C 4E 05 F1 | 	add	fp, #12
26538     A7 22 62 FC | 	wrlong	local03, fp
2653c     30 4E 85 F1 | 	sub	fp, #48
26540     A7 36 02 FB | 	rdlong	local13, fp
26544     1B 23 02 F6 | 	mov	local03, local13
26548     14 36 06 F1 | 	add	local13, #20
2654c     1B 39 02 FB | 	rdlong	local14, local13
26550     24 4E 05 F1 | 	add	fp, #36
26554     A7 28 02 FB | 	rdlong	local06, fp
26558     28 4E 85 F1 | 	sub	fp, #40
2655c     14 39 02 F1 | 	add	local14, local06
26560     14 22 06 F1 | 	add	local03, #20
26564     11 39 62 FC | 	wrlong	local14, local03
26568     84 FA 9F FD | 	jmp	#LR__3882
2656c                 | LR__3899
2656c                 | ' 
2656c                 | ' 
2656c                 | ' 
2656c                 | ' 
2656c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2656c                 | ' 
2656c                 | ' 	}
2656c                 | ' 
2656c                 | ' 	return FR_OK ;
2656c     00 FA 05 F6 | 	mov	result1, #0
26570                 | LR__3900
26570     A7 F0 03 F6 | 	mov	ptra, fp
26574     B2 00 A0 FD | 	call	#popregs_
26578                 | _fatfs_cc_f_read_ret
26578     2D 00 64 FD | 	ret
2657c                 | 
2657c                 | _fatfs_cc_f_write
2657c     15 4A 05 F6 | 	mov	COUNT_, #21
26580     A8 00 A0 FD | 	call	#pushregs_
26584     34 F0 07 F1 | 	add	ptra, #52
26588     04 4E 05 F1 | 	add	fp, #4
2658c     A7 12 62 FC | 	wrlong	arg01, fp
26590     04 4E 05 F1 | 	add	fp, #4
26594     A7 14 62 FC | 	wrlong	arg02, fp
26598     04 4E 05 F1 | 	add	fp, #4
2659c     A7 16 62 FC | 	wrlong	arg03, fp
265a0     04 4E 05 F1 | 	add	fp, #4
265a4     A7 18 62 FC | 	wrlong	arg04, fp
265a8     08 4E 85 F1 | 	sub	fp, #8
265ac     A7 FA 01 FB | 	rdlong	result1, fp
265b0     28 4E 05 F1 | 	add	fp, #40
265b4     A7 FA 61 FC | 	wrlong	result1, fp
265b8     20 4E 85 F1 | 	sub	fp, #32
265bc     A7 FA 01 FB | 	rdlong	result1, fp
265c0     FD 00 68 FC | 	wrlong	#0, result1
265c4     0C 4E 85 F1 | 	sub	fp, #12
265c8     A7 12 02 FB | 	rdlong	arg01, fp
265cc     14 4E 05 F1 | 	add	fp, #20
265d0     A7 14 02 F6 | 	mov	arg02, fp
265d4     18 4E 85 F1 | 	sub	fp, #24
265d8     88 F0 BF FD | 	call	#_fatfs_cc_validate
265dc     14 4E 05 F1 | 	add	fp, #20
265e0     A7 FA 61 FC | 	wrlong	result1, fp
265e4     00 FA 4D F2 | 	cmps	result1, #0 wz
265e8     14 4E 85 F1 | 	sub	fp, #20
265ec     20 00 90 5D |  if_ne	jmp	#LR__3910
265f0     04 4E 05 F1 | 	add	fp, #4
265f4     A7 14 02 FB | 	rdlong	arg02, fp
265f8     11 14 06 F1 | 	add	arg02, #17
265fc     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
26600     10 4E 05 F1 | 	add	fp, #16
26604     A7 14 62 FC | 	wrlong	arg02, fp
26608     14 4E 85 F1 | 	sub	fp, #20
2660c     10 00 90 AD |  if_e	jmp	#LR__3911
26610                 | LR__3910
26610     14 4E 05 F1 | 	add	fp, #20
26614     A7 FA 01 FB | 	rdlong	result1, fp
26618     14 4E 85 F1 | 	sub	fp, #20
2661c     44 07 90 FD | 	jmp	#LR__3933
26620                 | LR__3911
26620     04 4E 05 F1 | 	add	fp, #4
26624     A7 14 02 FB | 	rdlong	arg02, fp
26628     04 4E 85 F1 | 	sub	fp, #4
2662c     10 14 06 F1 | 	add	arg02, #16
26630     0A 15 C2 FA | 	rdbyte	arg02, arg02
26634     02 14 CE F7 | 	test	arg02, #2 wz
26638     07 FA 05 A6 |  if_e	mov	result1, #7
2663c     24 07 90 AD |  if_e	jmp	#LR__3933
26640     04 4E 05 F1 | 	add	fp, #4
26644     A7 14 02 FB | 	rdlong	arg02, fp
26648     0A 13 02 F6 | 	mov	arg01, arg02
2664c     14 12 06 F1 | 	add	arg01, #20
26650     09 13 02 FB | 	rdlong	arg01, arg01
26654     08 4E 05 F1 | 	add	fp, #8
26658     A7 FA 01 FB | 	rdlong	result1, fp
2665c     FD 12 02 F1 | 	add	arg01, result1
26660     0C 4E 85 F1 | 	sub	fp, #12
26664     14 14 06 F1 | 	add	arg02, #20
26668     0A FB 01 FB | 	rdlong	result1, arg02
2666c     FD 12 12 F2 | 	cmp	arg01, result1 wc
26670     24 00 90 3D |  if_ae	jmp	#LR__3912
26674     04 4E 05 F1 | 	add	fp, #4
26678     A7 14 02 FB | 	rdlong	arg02, fp
2667c     01 FA 65 F6 | 	neg	result1, #1
26680     14 14 06 F1 | 	add	arg02, #20
26684     0A 15 02 FB | 	rdlong	arg02, arg02
26688     0A FB 81 F1 | 	sub	result1, arg02
2668c     08 4E 05 F1 | 	add	fp, #8
26690     A7 FA 61 FC | 	wrlong	result1, fp
26694     0C 4E 85 F1 | 	sub	fp, #12
26698                 | LR__3912
26698                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
26698                 | ' 	}
26698                 | ' 
26698                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
26698                 | LR__3913
26698     0C 4E 05 F1 | 	add	fp, #12
2669c     A7 FA 01 FB | 	rdlong	result1, fp
266a0     0C 4E 85 F1 | 	sub	fp, #12
266a4     01 FA 15 F2 | 	cmp	result1, #1 wc
266a8     90 06 90 CD |  if_b	jmp	#LR__3932
266ac     04 4E 05 F1 | 	add	fp, #4
266b0     A7 FA 01 FB | 	rdlong	result1, fp
266b4     04 4E 85 F1 | 	sub	fp, #4
266b8     14 FA 05 F1 | 	add	result1, #20
266bc     FD FA 01 FB | 	rdlong	result1, result1
266c0     FF FB CD F7 | 	test	result1, #511 wz
266c4     D8 04 90 5D |  if_ne	jmp	#LR__3928
266c8     04 4E 05 F1 | 	add	fp, #4
266cc     A7 FA 01 FB | 	rdlong	result1, fp
266d0     14 FA 05 F1 | 	add	result1, #20
266d4     FD FA 01 FB | 	rdlong	result1, result1
266d8     09 FA 45 F0 | 	shr	result1, #9
266dc     14 4E 05 F1 | 	add	fp, #20
266e0     A7 14 02 FB | 	rdlong	arg02, fp
266e4     0A 14 06 F1 | 	add	arg02, #10
266e8     0A 19 E2 FA | 	rdword	arg04, arg02
266ec     0C 15 32 F9 | 	getword	arg02, arg04, #0
266f0     01 14 86 F1 | 	sub	arg02, #1
266f4     0A FB 09 F5 | 	and	result1, arg02 wz
266f8     14 4E 05 F1 | 	add	fp, #20
266fc     A7 FA 61 FC | 	wrlong	result1, fp
26700     2C 4E 85 F1 | 	sub	fp, #44
26704     44 01 90 5D |  if_ne	jmp	#LR__3919
26708     04 4E 05 F1 | 	add	fp, #4
2670c     A7 FA 01 FB | 	rdlong	result1, fp
26710     04 4E 85 F1 | 	sub	fp, #4
26714     14 FA 05 F1 | 	add	result1, #20
26718     FD 14 0A FB | 	rdlong	arg02, result1 wz
2671c     44 00 90 5D |  if_ne	jmp	#LR__3914
26720     04 4E 05 F1 | 	add	fp, #4
26724     A7 14 02 FB | 	rdlong	arg02, fp
26728     08 14 06 F1 | 	add	arg02, #8
2672c     0A 15 0A FB | 	rdlong	arg02, arg02 wz
26730     18 4E 05 F1 | 	add	fp, #24
26734     A7 14 62 FC | 	wrlong	arg02, fp
26738     1C 4E 85 F1 | 	sub	fp, #28
2673c     4C 00 90 5D |  if_ne	jmp	#LR__3915
26740     04 4E 05 F1 | 	add	fp, #4
26744     A7 12 02 FB | 	rdlong	arg01, fp
26748     04 4E 85 F1 | 	sub	fp, #4
2674c     00 14 06 F6 | 	mov	arg02, #0
26750     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
26754     1C 4E 05 F1 | 	add	fp, #28
26758     A7 FA 61 FC | 	wrlong	result1, fp
2675c     1C 4E 85 F1 | 	sub	fp, #28
26760     28 00 90 FD | 	jmp	#LR__3915
26764                 | LR__3914
26764     04 4E 05 F1 | 	add	fp, #4
26768     A7 18 02 FB | 	rdlong	arg04, fp
2676c     0C 13 02 F6 | 	mov	arg01, arg04
26770     04 4E 85 F1 | 	sub	fp, #4
26774     18 18 06 F1 | 	add	arg04, #24
26778     0C 15 02 FB | 	rdlong	arg02, arg04
2677c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
26780     1C 4E 05 F1 | 	add	fp, #28
26784     A7 FA 61 FC | 	wrlong	result1, fp
26788     1C 4E 85 F1 | 	sub	fp, #28
2678c                 | LR__3915
2678c     1C 4E 05 F1 | 	add	fp, #28
26790     A7 FA 09 FB | 	rdlong	result1, fp wz
26794     1C 4E 85 F1 | 	sub	fp, #28
26798     A0 05 90 AD |  if_e	jmp	#LR__3932
2679c     1C 4E 05 F1 | 	add	fp, #28
267a0     A7 FA 01 FB | 	rdlong	result1, fp
267a4     1C 4E 85 F1 | 	sub	fp, #28
267a8     01 FA 0D F2 | 	cmp	result1, #1 wz
267ac     1C 00 90 5D |  if_ne	jmp	#LR__3916
267b0     04 4E 05 F1 | 	add	fp, #4
267b4     A7 FA 01 FB | 	rdlong	result1, fp
267b8     04 4E 85 F1 | 	sub	fp, #4
267bc     11 FA 05 F1 | 	add	result1, #17
267c0     FD 04 48 FC | 	wrbyte	#2, result1
267c4     02 FA 05 F6 | 	mov	result1, #2
267c8     98 05 90 FD | 	jmp	#LR__3933
267cc                 | LR__3916
267cc     1C 4E 05 F1 | 	add	fp, #28
267d0     A7 FA 01 FB | 	rdlong	result1, fp
267d4     1C 4E 85 F1 | 	sub	fp, #28
267d8     FF FF 7F FF 
267dc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
267e0     1C 00 90 5D |  if_ne	jmp	#LR__3917
267e4     04 4E 05 F1 | 	add	fp, #4
267e8     A7 FA 01 FB | 	rdlong	result1, fp
267ec     04 4E 85 F1 | 	sub	fp, #4
267f0     11 FA 05 F1 | 	add	result1, #17
267f4     FD 02 48 FC | 	wrbyte	#1, result1
267f8     01 FA 05 F6 | 	mov	result1, #1
267fc     64 05 90 FD | 	jmp	#LR__3933
26800                 | LR__3917
26800     04 4E 05 F1 | 	add	fp, #4
26804     A7 FA 01 FB | 	rdlong	result1, fp
26808     18 4E 05 F1 | 	add	fp, #24
2680c     A7 18 02 FB | 	rdlong	arg04, fp
26810     18 FA 05 F1 | 	add	result1, #24
26814     FD 18 62 FC | 	wrlong	arg04, result1
26818     18 4E 85 F1 | 	sub	fp, #24
2681c     A7 FA 01 FB | 	rdlong	result1, fp
26820     04 4E 85 F1 | 	sub	fp, #4
26824     08 FA 05 F1 | 	add	result1, #8
26828     FD FA 09 FB | 	rdlong	result1, result1 wz
2682c     1C 00 90 5D |  if_ne	jmp	#LR__3918
26830     04 4E 05 F1 | 	add	fp, #4
26834     A7 18 02 FB | 	rdlong	arg04, fp
26838     18 4E 05 F1 | 	add	fp, #24
2683c     A7 FA 01 FB | 	rdlong	result1, fp
26840     1C 4E 85 F1 | 	sub	fp, #28
26844     08 18 06 F1 | 	add	arg04, #8
26848     0C FB 61 FC | 	wrlong	result1, arg04
2684c                 | LR__3918
2684c                 | LR__3919
2684c     04 4E 05 F1 | 	add	fp, #4
26850     A7 18 02 FB | 	rdlong	arg04, fp
26854     04 4E 85 F1 | 	sub	fp, #4
26858     10 18 06 F1 | 	add	arg04, #16
2685c     0C 19 C2 FA | 	rdbyte	arg04, arg04
26860     80 18 CE F7 | 	test	arg04, #128 wz
26864     7C 00 90 AD |  if_e	jmp	#LR__3921
26868     18 4E 05 F1 | 	add	fp, #24
2686c     A7 18 02 FB | 	rdlong	arg04, fp
26870     01 18 06 F1 | 	add	arg04, #1
26874     0C 13 C2 FA | 	rdbyte	arg01, arg04
26878     14 4E 85 F1 | 	sub	fp, #20
2687c     A7 18 02 FB | 	rdlong	arg04, fp
26880     0C 15 02 F6 | 	mov	arg02, arg04
26884     28 14 06 F1 | 	add	arg02, #40
26888     04 4E 85 F1 | 	sub	fp, #4
2688c     1C 18 06 F1 | 	add	arg04, #28
26890     0C 17 02 FB | 	rdlong	arg03, arg04
26894     01 18 06 F6 | 	mov	arg04, #1
26898     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2689c     00 FA 0D F2 | 	cmp	result1, #0 wz
268a0     1C 00 90 AD |  if_e	jmp	#LR__3920
268a4     04 4E 05 F1 | 	add	fp, #4
268a8     A7 FA 01 FB | 	rdlong	result1, fp
268ac     04 4E 85 F1 | 	sub	fp, #4
268b0     11 FA 05 F1 | 	add	result1, #17
268b4     FD 02 48 FC | 	wrbyte	#1, result1
268b8     01 FA 05 F6 | 	mov	result1, #1
268bc     A4 04 90 FD | 	jmp	#LR__3933
268c0                 | LR__3920
268c0     04 4E 05 F1 | 	add	fp, #4
268c4     A7 18 02 FB | 	rdlong	arg04, fp
268c8     0C FB 01 F6 | 	mov	result1, arg04
268cc     04 4E 85 F1 | 	sub	fp, #4
268d0     10 18 06 F1 | 	add	arg04, #16
268d4     0C 19 C2 FA | 	rdbyte	arg04, arg04
268d8     7F 18 06 F5 | 	and	arg04, #127
268dc     10 FA 05 F1 | 	add	result1, #16
268e0     FD 18 42 FC | 	wrbyte	arg04, result1
268e4                 | LR__3921
268e4     18 4E 05 F1 | 	add	fp, #24
268e8     A7 12 02 FB | 	rdlong	arg01, fp
268ec     14 4E 85 F1 | 	sub	fp, #20
268f0     A7 14 02 FB | 	rdlong	arg02, fp
268f4     04 4E 85 F1 | 	sub	fp, #4
268f8     18 14 06 F1 | 	add	arg02, #24
268fc     0A 15 02 FB | 	rdlong	arg02, arg02
26900     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
26904     20 4E 05 F1 | 	add	fp, #32
26908     A7 FA 61 FC | 	wrlong	result1, fp
2690c     20 4E 85 F1 | 	sub	fp, #32
26910     00 FA 0D F2 | 	cmp	result1, #0 wz
26914     1C 00 90 5D |  if_ne	jmp	#LR__3922
26918     04 4E 05 F1 | 	add	fp, #4
2691c     A7 FA 01 FB | 	rdlong	result1, fp
26920     04 4E 85 F1 | 	sub	fp, #4
26924     11 FA 05 F1 | 	add	result1, #17
26928     FD 04 48 FC | 	wrbyte	#2, result1
2692c     02 FA 05 F6 | 	mov	result1, #2
26930     30 04 90 FD | 	jmp	#LR__3933
26934                 | LR__3922
26934     20 4E 05 F1 | 	add	fp, #32
26938     A7 FA 01 FB | 	rdlong	result1, fp
2693c     0C 4E 05 F1 | 	add	fp, #12
26940     A7 1E 02 FB | 	rdlong	local01, fp
26944     0F FB 01 F1 | 	add	result1, local01
26948     0C 4E 85 F1 | 	sub	fp, #12
2694c     A7 FA 61 FC | 	wrlong	result1, fp
26950     14 4E 85 F1 | 	sub	fp, #20
26954     A7 FA 01 FB | 	rdlong	result1, fp
26958     09 FA 45 F0 | 	shr	result1, #9
2695c     1C 4E 05 F1 | 	add	fp, #28
26960     A7 FA 61 FC | 	wrlong	result1, fp
26964     28 4E 85 F1 | 	sub	fp, #40
26968     01 FA 15 F2 | 	cmp	result1, #1 wc
2696c     60 01 90 CD |  if_b	jmp	#LR__3926
26970     2C 4E 05 F1 | 	add	fp, #44
26974     A7 FA 01 FB | 	rdlong	result1, fp
26978     04 4E 85 F1 | 	sub	fp, #4
2697c     A7 18 02 FB | 	rdlong	arg04, fp
26980     0C FB 01 F1 | 	add	result1, arg04
26984     10 4E 85 F1 | 	sub	fp, #16
26988     A7 18 02 FB | 	rdlong	arg04, fp
2698c     18 4E 85 F1 | 	sub	fp, #24
26990     0A 18 06 F1 | 	add	arg04, #10
26994     0C 19 E2 FA | 	rdword	arg04, arg04
26998     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2699c     28 00 90 ED |  if_be	jmp	#LR__3923
269a0     18 4E 05 F1 | 	add	fp, #24
269a4     A7 FA 01 FB | 	rdlong	result1, fp
269a8     0A FA 05 F1 | 	add	result1, #10
269ac     FD FA E1 FA | 	rdword	result1, result1
269b0     14 4E 05 F1 | 	add	fp, #20
269b4     A7 18 02 FB | 	rdlong	arg04, fp
269b8     0C FB 81 F1 | 	sub	result1, arg04
269bc     04 4E 85 F1 | 	sub	fp, #4
269c0     A7 FA 61 FC | 	wrlong	result1, fp
269c4     28 4E 85 F1 | 	sub	fp, #40
269c8                 | LR__3923
269c8     18 4E 05 F1 | 	add	fp, #24
269cc     A7 18 02 FB | 	rdlong	arg04, fp
269d0     01 18 06 F1 | 	add	arg04, #1
269d4     0C 13 C2 FA | 	rdbyte	arg01, arg04
269d8     18 4E 05 F1 | 	add	fp, #24
269dc     A7 14 02 FB | 	rdlong	arg02, fp
269e0     10 4E 85 F1 | 	sub	fp, #16
269e4     A7 16 02 FB | 	rdlong	arg03, fp
269e8     08 4E 05 F1 | 	add	fp, #8
269ec     A7 18 02 FB | 	rdlong	arg04, fp
269f0     28 4E 85 F1 | 	sub	fp, #40
269f4     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
269f8     00 FA 0D F2 | 	cmp	result1, #0 wz
269fc     1C 00 90 AD |  if_e	jmp	#LR__3924
26a00     04 4E 05 F1 | 	add	fp, #4
26a04     A7 1E 02 FB | 	rdlong	local01, fp
26a08     04 4E 85 F1 | 	sub	fp, #4
26a0c     11 1E 06 F1 | 	add	local01, #17
26a10     0F 03 48 FC | 	wrbyte	#1, local01
26a14     01 FA 05 F6 | 	mov	result1, #1
26a18     48 03 90 FD | 	jmp	#LR__3933
26a1c                 | LR__3924
26a1c     04 4E 05 F1 | 	add	fp, #4
26a20     A7 FA 01 FB | 	rdlong	result1, fp
26a24     1C FA 05 F1 | 	add	result1, #28
26a28     FD FA 01 FB | 	rdlong	result1, result1
26a2c     1C 4E 05 F1 | 	add	fp, #28
26a30     A7 20 02 FB | 	rdlong	local02, fp
26a34     10 FB 81 F1 | 	sub	result1, local02
26a38     08 4E 05 F1 | 	add	fp, #8
26a3c     A7 18 02 FB | 	rdlong	arg04, fp
26a40     28 4E 85 F1 | 	sub	fp, #40
26a44     0C FB 11 F2 | 	cmp	result1, arg04 wc
26a48     68 00 90 3D |  if_ae	jmp	#LR__3925
26a4c     04 4E 05 F1 | 	add	fp, #4
26a50     A7 12 02 FB | 	rdlong	arg01, fp
26a54     28 12 06 F1 | 	add	arg01, #40
26a58     2C 4E 05 F1 | 	add	fp, #44
26a5c     A7 14 02 FB | 	rdlong	arg02, fp
26a60     2C 4E 85 F1 | 	sub	fp, #44
26a64     A7 FA 01 FB | 	rdlong	result1, fp
26a68     1C FA 05 F1 | 	add	result1, #28
26a6c     FD 22 02 FB | 	rdlong	local03, result1
26a70     1C 4E 05 F1 | 	add	fp, #28
26a74     A7 18 02 FB | 	rdlong	arg04, fp
26a78     20 4E 85 F1 | 	sub	fp, #32
26a7c     0C 23 82 F1 | 	sub	local03, arg04
26a80     09 22 66 F0 | 	shl	local03, #9
26a84     11 15 02 F1 | 	add	arg02, local03
26a88     09 16 C6 F9 | 	decod	arg03, #9
26a8c     A8 41 BF FD | 	call	#__system____builtin_memmove
26a90     04 4E 05 F1 | 	add	fp, #4
26a94     A7 18 02 FB | 	rdlong	arg04, fp
26a98     0C FB 01 F6 | 	mov	result1, arg04
26a9c     04 4E 85 F1 | 	sub	fp, #4
26aa0     10 18 06 F1 | 	add	arg04, #16
26aa4     0C 19 C2 FA | 	rdbyte	arg04, arg04
26aa8     7F 18 06 F5 | 	and	arg04, #127
26aac     10 FA 05 F1 | 	add	result1, #16
26ab0     FD 18 42 FC | 	wrbyte	arg04, result1
26ab4                 | LR__3925
26ab4     28 4E 05 F1 | 	add	fp, #40
26ab8     A7 FA 01 FB | 	rdlong	result1, fp
26abc     09 FA 65 F0 | 	shl	result1, #9
26ac0     04 4E 85 F1 | 	sub	fp, #4
26ac4     A7 FA 61 FC | 	wrlong	result1, fp
26ac8     24 4E 85 F1 | 	sub	fp, #36
26acc                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
26acc                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
26acc                 | ' 				}
26acc                 | ' 
26acc                 | ' 
26acc                 | ' 				wcnt =  ((UINT) 512 )  * cc;
26acc                 | ' 				continue;
26acc     74 01 90 FD | 	jmp	#LR__3929
26ad0                 | LR__3926
26ad0     04 4E 05 F1 | 	add	fp, #4
26ad4     A7 20 02 FB | 	rdlong	local02, fp
26ad8     1C 20 06 F1 | 	add	local02, #28
26adc     10 FB 01 FB | 	rdlong	result1, local02
26ae0     1C 4E 05 F1 | 	add	fp, #28
26ae4     A7 20 02 FB | 	rdlong	local02, fp
26ae8     20 4E 85 F1 | 	sub	fp, #32
26aec     10 FB 09 F2 | 	cmp	result1, local02 wz
26af0     90 00 90 AD |  if_e	jmp	#LR__3927
26af4     04 4E 05 F1 | 	add	fp, #4
26af8     A7 FA 01 FB | 	rdlong	result1, fp
26afc     FD 22 02 F6 | 	mov	local03, result1
26b00     04 4E 85 F1 | 	sub	fp, #4
26b04     14 22 06 F1 | 	add	local03, #20
26b08     11 23 02 FB | 	rdlong	local03, local03
26b0c     0C FA 05 F1 | 	add	result1, #12
26b10     FD 24 02 FB | 	rdlong	local04, result1
26b14     12 27 02 F6 | 	mov	local05, local04
26b18     13 23 12 F2 | 	cmp	local03, local05 wc
26b1c     64 00 90 3D |  if_ae	jmp	#LR__3927
26b20     18 4E 05 F1 | 	add	fp, #24
26b24     A7 18 02 FB | 	rdlong	arg04, fp
26b28     01 18 06 F1 | 	add	arg04, #1
26b2c     0C 13 C2 FA | 	rdbyte	arg01, arg04
26b30     14 4E 85 F1 | 	sub	fp, #20
26b34     A7 28 02 FB | 	rdlong	local06, fp
26b38     28 28 06 F1 | 	add	local06, #40
26b3c     14 2B 02 F6 | 	mov	local07, local06
26b40     1C 4E 05 F1 | 	add	fp, #28
26b44     A7 2C 02 FB | 	rdlong	local08, fp
26b48     20 4E 85 F1 | 	sub	fp, #32
26b4c     01 2E 06 F6 | 	mov	local09, #1
26b50     15 15 02 F6 | 	mov	arg02, local07
26b54     16 17 02 F6 | 	mov	arg03, local08
26b58     01 18 06 F6 | 	mov	arg04, #1
26b5c     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
26b60     FD 30 0A F6 | 	mov	local10, result1 wz
26b64     1C 00 90 AD |  if_e	jmp	#LR__3927
26b68     04 4E 05 F1 | 	add	fp, #4
26b6c     A7 30 02 FB | 	rdlong	local10, fp
26b70     04 4E 85 F1 | 	sub	fp, #4
26b74     11 30 06 F1 | 	add	local10, #17
26b78     18 03 48 FC | 	wrbyte	#1, local10
26b7c                 | ' 				fp->fptr < fp->obj.objsize &&
26b7c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
26b7c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
26b7c     01 FA 05 F6 | 	mov	result1, #1
26b80     E0 01 90 FD | 	jmp	#LR__3933
26b84                 | LR__3927
26b84     04 4E 05 F1 | 	add	fp, #4
26b88     A7 18 02 FB | 	rdlong	arg04, fp
26b8c     1C 4E 05 F1 | 	add	fp, #28
26b90     A7 FA 01 FB | 	rdlong	result1, fp
26b94     20 4E 85 F1 | 	sub	fp, #32
26b98     1C 18 06 F1 | 	add	arg04, #28
26b9c     0C FB 61 FC | 	wrlong	result1, arg04
26ba0                 | LR__3928
26ba0     04 4E 05 F1 | 	add	fp, #4
26ba4     A7 FA 01 FB | 	rdlong	result1, fp
26ba8     14 FA 05 F1 | 	add	result1, #20
26bac     FD FA 01 FB | 	rdlong	result1, result1
26bb0     FF FB 05 F5 | 	and	result1, #511
26bb4     09 32 C6 F9 | 	decod	local11, #9
26bb8     FD 32 82 F1 | 	sub	local11, result1
26bbc     20 4E 05 F1 | 	add	fp, #32
26bc0     A7 32 62 FC | 	wrlong	local11, fp
26bc4     18 4E 85 F1 | 	sub	fp, #24
26bc8     A7 FA 01 FB | 	rdlong	result1, fp
26bcc     0C 4E 85 F1 | 	sub	fp, #12
26bd0     FD 32 1A F2 | 	cmp	local11, result1 wcz
26bd4     0C 4E 05 11 |  if_a	add	fp, #12
26bd8     A7 32 02 1B |  if_a	rdlong	local11, fp
26bdc     18 4E 05 11 |  if_a	add	fp, #24
26be0     A7 32 62 1C |  if_a	wrlong	local11, fp
26be4     24 4E 85 11 |  if_a	sub	fp, #36
26be8     04 4E 05 F1 | 	add	fp, #4
26bec     A7 32 02 FB | 	rdlong	local11, fp
26bf0     19 13 02 F6 | 	mov	arg01, local11
26bf4     28 12 06 F1 | 	add	arg01, #40
26bf8     14 32 06 F1 | 	add	local11, #20
26bfc     19 33 02 FB | 	rdlong	local11, local11
26c00     FF 33 06 F5 | 	and	local11, #511
26c04     19 13 02 F1 | 	add	arg01, local11
26c08     2C 4E 05 F1 | 	add	fp, #44
26c0c     A7 14 02 FB | 	rdlong	arg02, fp
26c10     0C 4E 85 F1 | 	sub	fp, #12
26c14     A7 16 02 FB | 	rdlong	arg03, fp
26c18     24 4E 85 F1 | 	sub	fp, #36
26c1c     18 40 BF FD | 	call	#__system____builtin_memmove
26c20     04 4E 05 F1 | 	add	fp, #4
26c24     A7 FA 01 FB | 	rdlong	result1, fp
26c28     FD 32 02 F6 | 	mov	local11, result1
26c2c     04 4E 85 F1 | 	sub	fp, #4
26c30     10 FA 05 F1 | 	add	result1, #16
26c34     FD FA C1 FA | 	rdbyte	result1, result1
26c38     80 FA 45 F5 | 	or	result1, #128
26c3c     10 32 06 F1 | 	add	local11, #16
26c40     19 FB 41 FC | 	wrbyte	result1, local11
26c44                 | LR__3929
26c44     0C 4E 05 F1 | 	add	fp, #12
26c48     A7 32 02 FB | 	rdlong	local11, fp
26c4c     18 4E 05 F1 | 	add	fp, #24
26c50     A7 FA 01 FB | 	rdlong	result1, fp
26c54     FD 32 82 F1 | 	sub	local11, result1
26c58     18 4E 85 F1 | 	sub	fp, #24
26c5c     A7 32 62 FC | 	wrlong	local11, fp
26c60     04 4E 05 F1 | 	add	fp, #4
26c64     A7 34 02 FB | 	rdlong	local12, fp
26c68     1A 33 02 FB | 	rdlong	local11, local12
26c6c     14 4E 05 F1 | 	add	fp, #20
26c70     A7 36 02 FB | 	rdlong	local13, fp
26c74     1B 33 02 F1 | 	add	local11, local13
26c78     1A 33 62 FC | 	wrlong	local11, local12
26c7c     0C 4E 05 F1 | 	add	fp, #12
26c80     A7 32 02 FB | 	rdlong	local11, fp
26c84     0C 4E 85 F1 | 	sub	fp, #12
26c88     A7 38 02 FB | 	rdlong	local14, fp
26c8c     1C 33 02 F1 | 	add	local11, local14
26c90     0C 4E 05 F1 | 	add	fp, #12
26c94     A7 32 62 FC | 	wrlong	local11, fp
26c98     2C 4E 85 F1 | 	sub	fp, #44
26c9c     A7 3A 02 FB | 	rdlong	local15, fp
26ca0     1D 33 02 F6 | 	mov	local11, local15
26ca4     14 3A 06 F1 | 	add	local15, #20
26ca8     1D 3B 02 FB | 	rdlong	local15, local15
26cac     20 4E 05 F1 | 	add	fp, #32
26cb0     A7 3C 02 FB | 	rdlong	local16, fp
26cb4     1E 3B 02 F1 | 	add	local15, local16
26cb8     14 32 06 F1 | 	add	local11, #20
26cbc     19 3B 62 FC | 	wrlong	local15, local11
26cc0     20 4E 85 F1 | 	sub	fp, #32
26cc4     A7 3E 02 FB | 	rdlong	local17, fp
26cc8     1F 33 02 F6 | 	mov	local11, local17
26ccc     1F 41 02 F6 | 	mov	local18, local17
26cd0     04 4E 85 F1 | 	sub	fp, #4
26cd4     14 3E 06 F1 | 	add	local17, #20
26cd8     1F 43 02 FB | 	rdlong	local19, local17
26cdc     0C 40 06 F1 | 	add	local18, #12
26ce0     20 45 02 FB | 	rdlong	local20, local18
26ce4     22 43 1A F2 | 	cmp	local19, local20 wcz
26ce8     24 00 90 ED |  if_be	jmp	#LR__3930
26cec     04 4E 05 F1 | 	add	fp, #4
26cf0     A7 26 02 FB | 	rdlong	local05, fp
26cf4     04 4E 85 F1 | 	sub	fp, #4
26cf8     13 23 02 F6 | 	mov	local03, local05
26cfc     14 22 06 F1 | 	add	local03, #20
26d00     11 25 02 FB | 	rdlong	local04, local03
26d04     14 22 86 F1 | 	sub	local03, #20
26d08     12 47 02 F6 | 	mov	local21, local04
26d0c     20 00 90 FD | 	jmp	#LR__3931
26d10                 | LR__3930
26d10     04 4E 05 F1 | 	add	fp, #4
26d14     A7 2A 02 FB | 	rdlong	local07, fp
26d18     04 4E 85 F1 | 	sub	fp, #4
26d1c     15 31 02 F6 | 	mov	local10, local07
26d20     0C 30 06 F1 | 	add	local10, #12
26d24     18 2D 02 FB | 	rdlong	local08, local10
26d28     0C 30 86 F1 | 	sub	local10, #12
26d2c     16 47 02 F6 | 	mov	local21, local08
26d30                 | LR__3931
26d30     0C 32 06 F1 | 	add	local11, #12
26d34     19 47 62 FC | 	wrlong	local21, local11
26d38     5C F9 9F FD | 	jmp	#LR__3913
26d3c                 | LR__3932
26d3c     04 4E 05 F1 | 	add	fp, #4
26d40     A7 34 02 FB | 	rdlong	local12, fp
26d44     1A 1F 02 F6 | 	mov	local01, local12
26d48     04 4E 85 F1 | 	sub	fp, #4
26d4c     10 34 06 F1 | 	add	local12, #16
26d50     1A 33 C2 FA | 	rdbyte	local11, local12
26d54     40 32 46 F5 | 	or	local11, #64
26d58     10 1E 06 F1 | 	add	local01, #16
26d5c     0F 33 42 FC | 	wrbyte	local11, local01
26d60                 | ' 
26d60                 | ' 
26d60                 | ' 
26d60                 | ' 
26d60                 | ' 
26d60                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
26d60                 | ' 		fp->flag |=  0x80 ;
26d60                 | ' 
26d60                 | ' 	}
26d60                 | ' 
26d60                 | ' 	fp->flag |=  0x40 ;
26d60                 | ' 
26d60                 | ' 	return FR_OK ;
26d60     00 FA 05 F6 | 	mov	result1, #0
26d64                 | LR__3933
26d64     A7 F0 03 F6 | 	mov	ptra, fp
26d68     B2 00 A0 FD | 	call	#popregs_
26d6c                 | _fatfs_cc_f_write_ret
26d6c     2D 00 64 FD | 	ret
26d70                 | 
26d70                 | _fatfs_cc_f_sync
26d70     00 4A 05 F6 | 	mov	COUNT_, #0
26d74     A8 00 A0 FD | 	call	#pushregs_
26d78     18 F0 07 F1 | 	add	ptra, #24
26d7c     04 4E 05 F1 | 	add	fp, #4
26d80     A7 12 62 FC | 	wrlong	arg01, fp
26d84     08 4E 05 F1 | 	add	fp, #8
26d88     A7 14 02 F6 | 	mov	arg02, fp
26d8c     0C 4E 85 F1 | 	sub	fp, #12
26d90     D0 E8 BF FD | 	call	#_fatfs_cc_validate
26d94     08 4E 05 F1 | 	add	fp, #8
26d98     A7 FA 61 FC | 	wrlong	result1, fp
26d9c     08 4E 85 F1 | 	sub	fp, #8
26da0     00 FA 0D F2 | 	cmp	result1, #0 wz
26da4     C0 01 90 5D |  if_ne	jmp	#LR__3943
26da8     04 4E 05 F1 | 	add	fp, #4
26dac     A7 18 02 FB | 	rdlong	arg04, fp
26db0     04 4E 85 F1 | 	sub	fp, #4
26db4     10 18 06 F1 | 	add	arg04, #16
26db8     0C 19 C2 FA | 	rdbyte	arg04, arg04
26dbc     40 18 CE F7 | 	test	arg04, #64 wz
26dc0     A4 01 90 AD |  if_e	jmp	#LR__3942
26dc4     04 4E 05 F1 | 	add	fp, #4
26dc8     A7 18 02 FB | 	rdlong	arg04, fp
26dcc     04 4E 85 F1 | 	sub	fp, #4
26dd0     10 18 06 F1 | 	add	arg04, #16
26dd4     0C 19 C2 FA | 	rdbyte	arg04, arg04
26dd8     80 18 CE F7 | 	test	arg04, #128 wz
26ddc     64 00 90 AD |  if_e	jmp	#LR__3940
26de0     0C 4E 05 F1 | 	add	fp, #12
26de4     A7 18 02 FB | 	rdlong	arg04, fp
26de8     01 18 06 F1 | 	add	arg04, #1
26dec     0C 13 C2 FA | 	rdbyte	arg01, arg04
26df0     08 4E 85 F1 | 	sub	fp, #8
26df4     A7 18 02 FB | 	rdlong	arg04, fp
26df8     0C 15 02 F6 | 	mov	arg02, arg04
26dfc     28 14 06 F1 | 	add	arg02, #40
26e00     04 4E 85 F1 | 	sub	fp, #4
26e04     1C 18 06 F1 | 	add	arg04, #28
26e08     0C 17 02 FB | 	rdlong	arg03, arg04
26e0c     01 18 06 F6 | 	mov	arg04, #1
26e10     0C AE BF FD | 	call	#_fatfs_cc_disk_write
26e14     00 FA 0D F2 | 	cmp	result1, #0 wz
26e18     01 FA 05 56 |  if_ne	mov	result1, #1
26e1c     54 01 90 5D |  if_ne	jmp	#LR__3944
26e20     04 4E 05 F1 | 	add	fp, #4
26e24     A7 18 02 FB | 	rdlong	arg04, fp
26e28     0C 17 02 F6 | 	mov	arg03, arg04
26e2c     04 4E 85 F1 | 	sub	fp, #4
26e30     10 18 06 F1 | 	add	arg04, #16
26e34     0C 19 C2 FA | 	rdbyte	arg04, arg04
26e38     7F 18 06 F5 | 	and	arg04, #127
26e3c     10 16 06 F1 | 	add	arg03, #16
26e40     0B 19 42 FC | 	wrbyte	arg04, arg03
26e44                 | LR__3940
26e44     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
26e48     10 4E 05 F1 | 	add	fp, #16
26e4c     A7 FA 61 FC | 	wrlong	result1, fp
26e50     04 4E 85 F1 | 	sub	fp, #4
26e54     A7 12 02 FB | 	rdlong	arg01, fp
26e58     08 4E 85 F1 | 	sub	fp, #8
26e5c     A7 18 02 FB | 	rdlong	arg04, fp
26e60     04 4E 85 F1 | 	sub	fp, #4
26e64     20 18 06 F1 | 	add	arg04, #32
26e68     0C 15 02 FB | 	rdlong	arg02, arg04
26e6c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
26e70     08 4E 05 F1 | 	add	fp, #8
26e74     A7 FA 61 FC | 	wrlong	result1, fp
26e78     08 4E 85 F1 | 	sub	fp, #8
26e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
26e80     E4 00 90 5D |  if_ne	jmp	#LR__3941
26e84     04 4E 05 F1 | 	add	fp, #4
26e88     A7 18 02 FB | 	rdlong	arg04, fp
26e8c     24 18 06 F1 | 	add	arg04, #36
26e90     0C 19 02 FB | 	rdlong	arg04, arg04
26e94     10 4E 05 F1 | 	add	fp, #16
26e98     A7 18 62 FC | 	wrlong	arg04, fp
26e9c     0C 17 02 F6 | 	mov	arg03, arg04
26ea0     0B 16 06 F1 | 	add	arg03, #11
26ea4     0B 17 C2 FA | 	rdbyte	arg03, arg03
26ea8     20 16 46 F5 | 	or	arg03, #32
26eac     0B 18 06 F1 | 	add	arg04, #11
26eb0     0C 17 42 FC | 	wrbyte	arg03, arg04
26eb4     10 4E 85 F1 | 	sub	fp, #16
26eb8     A7 18 02 FB | 	rdlong	arg04, fp
26ebc     0C 13 02 FB | 	rdlong	arg01, arg04
26ec0     10 4E 05 F1 | 	add	fp, #16
26ec4     A7 14 02 FB | 	rdlong	arg02, fp
26ec8     14 4E 85 F1 | 	sub	fp, #20
26ecc     08 18 06 F1 | 	add	arg04, #8
26ed0     0C 17 02 FB | 	rdlong	arg03, arg04
26ed4     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
26ed8     14 4E 05 F1 | 	add	fp, #20
26edc     A7 12 02 FB | 	rdlong	arg01, fp
26ee0     1C 12 06 F1 | 	add	arg01, #28
26ee4     10 4E 85 F1 | 	sub	fp, #16
26ee8     A7 18 02 FB | 	rdlong	arg04, fp
26eec     0C 18 06 F1 | 	add	arg04, #12
26ef0     0C 15 02 FB | 	rdlong	arg02, arg04
26ef4     09 15 62 FC | 	wrlong	arg02, arg01
26ef8     10 4E 05 F1 | 	add	fp, #16
26efc     A7 12 02 FB | 	rdlong	arg01, fp
26f00     16 12 06 F1 | 	add	arg01, #22
26f04     04 4E 85 F1 | 	sub	fp, #4
26f08     A7 14 02 FB | 	rdlong	arg02, fp
26f0c     09 15 62 FC | 	wrlong	arg02, arg01
26f10     04 4E 05 F1 | 	add	fp, #4
26f14     A7 12 02 FB | 	rdlong	arg01, fp
26f18     12 12 06 F1 | 	add	arg01, #18
26f1c     09 01 58 FC | 	wrword	#0, arg01
26f20     08 4E 85 F1 | 	sub	fp, #8
26f24     A7 18 02 FB | 	rdlong	arg04, fp
26f28     03 18 06 F1 | 	add	arg04, #3
26f2c     0C 03 48 FC | 	wrbyte	#1, arg04
26f30     A7 12 02 FB | 	rdlong	arg01, fp
26f34     0C 4E 85 F1 | 	sub	fp, #12
26f38     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
26f3c     08 4E 05 F1 | 	add	fp, #8
26f40     A7 FA 61 FC | 	wrlong	result1, fp
26f44     04 4E 85 F1 | 	sub	fp, #4
26f48     A7 18 02 FB | 	rdlong	arg04, fp
26f4c     0C 17 02 F6 | 	mov	arg03, arg04
26f50     04 4E 85 F1 | 	sub	fp, #4
26f54     10 18 06 F1 | 	add	arg04, #16
26f58     0C 19 C2 FA | 	rdbyte	arg04, arg04
26f5c     BF 18 06 F5 | 	and	arg04, #191
26f60     10 16 06 F1 | 	add	arg03, #16
26f64     0B 19 42 FC | 	wrbyte	arg04, arg03
26f68                 | LR__3941
26f68                 | LR__3942
26f68                 | LR__3943
26f68                 | ' 					dir = fp->dir_ptr;
26f68                 | ' 					dir[ 11 ] |=  0x20 ;
26f68                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
26f68                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
26f68                 | ' 					st_dword(dir +  22 , tm);
26f68                 | ' 					st_word(dir +  18 , 0);
26f68                 | ' 					fs->wflag = 1;
26f68                 | ' 					res = sync_fs(fs);
26f68                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
26f68                 | ' 				}
26f68                 | ' 			}
26f68                 | ' 		}
26f68                 | ' 	}
26f68                 | ' 
26f68                 | ' 	return res ;
26f68     08 4E 05 F1 | 	add	fp, #8
26f6c     A7 FA 01 FB | 	rdlong	result1, fp
26f70     08 4E 85 F1 | 	sub	fp, #8
26f74                 | LR__3944
26f74     A7 F0 03 F6 | 	mov	ptra, fp
26f78     B2 00 A0 FD | 	call	#popregs_
26f7c                 | _fatfs_cc_f_sync_ret
26f7c     2D 00 64 FD | 	ret
26f80                 | 
26f80                 | _fatfs_cc_f_close
26f80     01 4A 05 F6 | 	mov	COUNT_, #1
26f84     A8 00 A0 FD | 	call	#pushregs_
26f88     10 F0 07 F1 | 	add	ptra, #16
26f8c     04 4E 05 F1 | 	add	fp, #4
26f90     A7 12 62 FC | 	wrlong	arg01, fp
26f94     04 4E 85 F1 | 	sub	fp, #4
26f98     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
26f9c     08 4E 05 F1 | 	add	fp, #8
26fa0     A7 FA 61 FC | 	wrlong	result1, fp
26fa4     08 4E 85 F1 | 	sub	fp, #8
26fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
26fac     38 00 90 5D |  if_ne	jmp	#LR__3950
26fb0     04 4E 05 F1 | 	add	fp, #4
26fb4     A7 12 02 FB | 	rdlong	arg01, fp
26fb8     08 4E 05 F1 | 	add	fp, #8
26fbc     A7 14 02 F6 | 	mov	arg02, fp
26fc0     0C 4E 85 F1 | 	sub	fp, #12
26fc4     9C E6 BF FD | 	call	#_fatfs_cc_validate
26fc8     08 4E 05 F1 | 	add	fp, #8
26fcc     A7 FA 61 FC | 	wrlong	result1, fp
26fd0     08 4E 85 F1 | 	sub	fp, #8
26fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
26fd8     04 4E 05 A1 |  if_e	add	fp, #4
26fdc     A7 1E 02 AB |  if_e	rdlong	local01, fp
26fe0     04 4E 85 A1 |  if_e	sub	fp, #4
26fe4     0F 01 68 AC |  if_e	wrlong	#0, local01
26fe8                 | LR__3950
26fe8                 | ' 
26fe8                 | ' 
26fe8                 | ' 
26fe8                 | ' 
26fe8                 | ' 			fp->obj.fs = 0;
26fe8                 | ' #line 4192 "ff.c"
26fe8                 | ' 		}
26fe8                 | ' 	}
26fe8                 | ' 	return res;
26fe8     08 4E 05 F1 | 	add	fp, #8
26fec     A7 FA 01 FB | 	rdlong	result1, fp
26ff0     08 4E 85 F1 | 	sub	fp, #8
26ff4     A7 F0 03 F6 | 	mov	ptra, fp
26ff8     B2 00 A0 FD | 	call	#popregs_
26ffc                 | _fatfs_cc_f_close_ret
26ffc     2D 00 64 FD | 	ret
27000                 | 
27000                 | _fatfs_cc_f_lseek
27000     00 4A 05 F6 | 	mov	COUNT_, #0
27004     A8 00 A0 FD | 	call	#pushregs_
27008     24 F0 07 F1 | 	add	ptra, #36
2700c     04 4E 05 F1 | 	add	fp, #4
27010     A7 12 62 FC | 	wrlong	arg01, fp
27014     04 4E 05 F1 | 	add	fp, #4
27018     A7 14 62 FC | 	wrlong	arg02, fp
2701c     04 4E 85 F1 | 	sub	fp, #4
27020     A7 12 02 FB | 	rdlong	arg01, fp
27024     0C 4E 05 F1 | 	add	fp, #12
27028     A7 14 02 F6 | 	mov	arg02, fp
2702c     10 4E 85 F1 | 	sub	fp, #16
27030     30 E6 BF FD | 	call	#_fatfs_cc_validate
27034     0C 4E 05 F1 | 	add	fp, #12
27038     A7 FA 61 FC | 	wrlong	result1, fp
2703c     0C 4E 85 F1 | 	sub	fp, #12
27040     00 FA 0D F2 | 	cmp	result1, #0 wz
27044     1C 00 90 5D |  if_ne	jmp	#LR__3960
27048     04 4E 05 F1 | 	add	fp, #4
2704c     A7 18 02 FB | 	rdlong	arg04, fp
27050     11 18 06 F1 | 	add	arg04, #17
27054     0C 19 C2 FA | 	rdbyte	arg04, arg04
27058     08 4E 05 F1 | 	add	fp, #8
2705c     A7 18 62 FC | 	wrlong	arg04, fp
27060     0C 4E 85 F1 | 	sub	fp, #12
27064                 | LR__3960
27064     0C 4E 05 F1 | 	add	fp, #12
27068     A7 18 0A FB | 	rdlong	arg04, fp wz
2706c     0C 4E 85 F1 | 	sub	fp, #12
27070     0C 4E 05 51 |  if_ne	add	fp, #12
27074     A7 FA 01 5B |  if_ne	rdlong	result1, fp
27078     0C 4E 85 51 |  if_ne	sub	fp, #12
2707c     40 06 90 5D |  if_ne	jmp	#LR__3983
27080     04 4E 05 F1 | 	add	fp, #4
27084     A7 18 02 FB | 	rdlong	arg04, fp
27088     04 4E 05 F1 | 	add	fp, #4
2708c     A7 16 02 FB | 	rdlong	arg03, fp
27090     08 4E 85 F1 | 	sub	fp, #8
27094     0C 18 06 F1 | 	add	arg04, #12
27098     0C 19 02 FB | 	rdlong	arg04, arg04
2709c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
270a0     3C 00 90 ED |  if_be	jmp	#LR__3961
270a4     04 4E 05 F1 | 	add	fp, #4
270a8     A7 16 02 FB | 	rdlong	arg03, fp
270ac     04 4E 85 F1 | 	sub	fp, #4
270b0     10 16 06 F1 | 	add	arg03, #16
270b4     0B 17 C2 FA | 	rdbyte	arg03, arg03
270b8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
270bc     02 16 CE F7 | 	test	arg03, #2 wz
270c0     1C 00 90 5D |  if_ne	jmp	#LR__3961
270c4     04 4E 05 F1 | 	add	fp, #4
270c8     A7 16 02 FB | 	rdlong	arg03, fp
270cc     0C 16 06 F1 | 	add	arg03, #12
270d0     0B 17 02 FB | 	rdlong	arg03, arg03
270d4     04 4E 05 F1 | 	add	fp, #4
270d8     A7 16 62 FC | 	wrlong	arg03, fp
270dc     08 4E 85 F1 | 	sub	fp, #8
270e0                 | LR__3961
270e0     04 4E 05 F1 | 	add	fp, #4
270e4     A7 16 02 FB | 	rdlong	arg03, fp
270e8     14 16 06 F1 | 	add	arg03, #20
270ec     0B 17 02 FB | 	rdlong	arg03, arg03
270f0     1C 4E 05 F1 | 	add	fp, #28
270f4     A7 16 62 FC | 	wrlong	arg03, fp
270f8     1C 4E 85 F1 | 	sub	fp, #28
270fc     A7 16 02 FB | 	rdlong	arg03, fp
27100     18 4E 05 F1 | 	add	fp, #24
27104     A7 00 68 FC | 	wrlong	#0, fp
27108     14 16 06 F1 | 	add	arg03, #20
2710c     0B 01 68 FC | 	wrlong	#0, arg03
27110     14 4E 85 F1 | 	sub	fp, #20
27114     A7 16 02 FB | 	rdlong	arg03, fp
27118     08 4E 85 F1 | 	sub	fp, #8
2711c     01 16 16 F2 | 	cmp	arg03, #1 wc
27120     E4 03 90 CD |  if_b	jmp	#LR__3977
27124     10 4E 05 F1 | 	add	fp, #16
27128     A7 16 02 FB | 	rdlong	arg03, fp
2712c     0A 16 06 F1 | 	add	arg03, #10
27130     0B 19 E2 FA | 	rdword	arg04, arg03
27134     09 18 66 F0 | 	shl	arg04, #9
27138     08 4E 05 F1 | 	add	fp, #8
2713c     A7 18 62 FC | 	wrlong	arg04, fp
27140     08 4E 05 F1 | 	add	fp, #8
27144     A7 18 02 FB | 	rdlong	arg04, fp
27148     20 4E 85 F1 | 	sub	fp, #32
2714c     01 18 16 F2 | 	cmp	arg04, #1 wc
27150     AC 00 90 CD |  if_b	jmp	#LR__3962
27154     08 4E 05 F1 | 	add	fp, #8
27158     A7 18 02 FB | 	rdlong	arg04, fp
2715c     01 18 86 F1 | 	sub	arg04, #1
27160     10 4E 05 F1 | 	add	fp, #16
27164     A7 16 02 FB | 	rdlong	arg03, fp
27168     0B 19 12 FD | 	qdiv	arg04, arg03
2716c     08 4E 05 F1 | 	add	fp, #8
27170     A7 FA 01 FB | 	rdlong	result1, fp
27174     01 FA 85 F1 | 	sub	result1, #1
27178     18 18 62 FD | 	getqx	arg04
2717c     0B FB 11 FD | 	qdiv	result1, arg03
27180     20 4E 85 F1 | 	sub	fp, #32
27184     18 16 62 FD | 	getqx	arg03
27188     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2718c     70 00 90 CD |  if_b	jmp	#LR__3962
27190     04 4E 05 F1 | 	add	fp, #4
27194     A7 16 02 FB | 	rdlong	arg03, fp
27198     1C 4E 05 F1 | 	add	fp, #28
2719c     A7 FA 01 FB | 	rdlong	result1, fp
271a0     01 FA 85 F1 | 	sub	result1, #1
271a4     08 4E 85 F1 | 	sub	fp, #8
271a8     A7 18 02 FB | 	rdlong	arg04, fp
271ac     01 18 86 F1 | 	sub	arg04, #1
271b0     0C FB 21 F5 | 	andn	result1, arg04
271b4     14 16 06 F1 | 	add	arg03, #20
271b8     0B FB 61 FC | 	wrlong	result1, arg03
271bc     10 4E 85 F1 | 	sub	fp, #16
271c0     A7 16 02 FB | 	rdlong	arg03, fp
271c4     04 4E 85 F1 | 	sub	fp, #4
271c8     A7 18 02 FB | 	rdlong	arg04, fp
271cc     14 18 06 F1 | 	add	arg04, #20
271d0     0C 19 02 FB | 	rdlong	arg04, arg04
271d4     0C 17 82 F1 | 	sub	arg03, arg04
271d8     04 4E 05 F1 | 	add	fp, #4
271dc     A7 16 62 FC | 	wrlong	arg03, fp
271e0     04 4E 85 F1 | 	sub	fp, #4
271e4     A7 16 02 FB | 	rdlong	arg03, fp
271e8     18 16 06 F1 | 	add	arg03, #24
271ec     0B 17 02 FB | 	rdlong	arg03, arg03
271f0     10 4E 05 F1 | 	add	fp, #16
271f4     A7 16 62 FC | 	wrlong	arg03, fp
271f8     14 4E 85 F1 | 	sub	fp, #20
271fc     D0 00 90 FD | 	jmp	#LR__3966
27200                 | LR__3962
27200     04 4E 05 F1 | 	add	fp, #4
27204     A7 16 02 FB | 	rdlong	arg03, fp
27208     08 16 06 F1 | 	add	arg03, #8
2720c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
27210     10 4E 05 F1 | 	add	fp, #16
27214     A7 16 62 FC | 	wrlong	arg03, fp
27218     14 4E 85 F1 | 	sub	fp, #20
2721c     94 00 90 5D |  if_ne	jmp	#LR__3965
27220     04 4E 05 F1 | 	add	fp, #4
27224     A7 12 02 FB | 	rdlong	arg01, fp
27228     04 4E 85 F1 | 	sub	fp, #4
2722c     00 14 06 F6 | 	mov	arg02, #0
27230     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
27234     14 4E 05 F1 | 	add	fp, #20
27238     A7 FA 61 FC | 	wrlong	result1, fp
2723c     14 4E 85 F1 | 	sub	fp, #20
27240     01 FA 0D F2 | 	cmp	result1, #1 wz
27244     1C 00 90 5D |  if_ne	jmp	#LR__3963
27248     04 4E 05 F1 | 	add	fp, #4
2724c     A7 16 02 FB | 	rdlong	arg03, fp
27250     04 4E 85 F1 | 	sub	fp, #4
27254     11 16 06 F1 | 	add	arg03, #17
27258     0B 05 48 FC | 	wrbyte	#2, arg03
2725c     02 FA 05 F6 | 	mov	result1, #2
27260     5C 04 90 FD | 	jmp	#LR__3983
27264                 | LR__3963
27264     14 4E 05 F1 | 	add	fp, #20
27268     A7 FA 01 FB | 	rdlong	result1, fp
2726c     14 4E 85 F1 | 	sub	fp, #20
27270     FF FF 7F FF 
27274     FF FB 0D F2 | 	cmp	result1, ##-1 wz
27278     1C 00 90 5D |  if_ne	jmp	#LR__3964
2727c     04 4E 05 F1 | 	add	fp, #4
27280     A7 16 02 FB | 	rdlong	arg03, fp
27284     04 4E 85 F1 | 	sub	fp, #4
27288     11 16 06 F1 | 	add	arg03, #17
2728c     0B 03 48 FC | 	wrbyte	#1, arg03
27290     01 FA 05 F6 | 	mov	result1, #1
27294     28 04 90 FD | 	jmp	#LR__3983
27298                 | LR__3964
27298     04 4E 05 F1 | 	add	fp, #4
2729c     A7 16 02 FB | 	rdlong	arg03, fp
272a0     10 4E 05 F1 | 	add	fp, #16
272a4     A7 18 02 FB | 	rdlong	arg04, fp
272a8     14 4E 85 F1 | 	sub	fp, #20
272ac     08 16 06 F1 | 	add	arg03, #8
272b0     0B 19 62 FC | 	wrlong	arg04, arg03
272b4                 | LR__3965
272b4     04 4E 05 F1 | 	add	fp, #4
272b8     A7 16 02 FB | 	rdlong	arg03, fp
272bc     10 4E 05 F1 | 	add	fp, #16
272c0     A7 18 02 FB | 	rdlong	arg04, fp
272c4     14 4E 85 F1 | 	sub	fp, #20
272c8     18 16 06 F1 | 	add	arg03, #24
272cc     0B 19 62 FC | 	wrlong	arg04, arg03
272d0                 | LR__3966
272d0     14 4E 05 F1 | 	add	fp, #20
272d4     A7 16 0A FB | 	rdlong	arg03, fp wz
272d8     14 4E 85 F1 | 	sub	fp, #20
272dc     28 02 90 AD |  if_e	jmp	#LR__3976
272e0                 | ' 				while (ofs > bcs) {
272e0                 | LR__3967
272e0     08 4E 05 F1 | 	add	fp, #8
272e4     A7 18 02 FB | 	rdlong	arg04, fp
272e8     10 4E 05 F1 | 	add	fp, #16
272ec     A7 16 02 FB | 	rdlong	arg03, fp
272f0     18 4E 85 F1 | 	sub	fp, #24
272f4     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
272f8     68 01 90 ED |  if_be	jmp	#LR__3973
272fc     08 4E 05 F1 | 	add	fp, #8
27300     A7 18 02 FB | 	rdlong	arg04, fp
27304     10 4E 05 F1 | 	add	fp, #16
27308     A7 16 02 FB | 	rdlong	arg03, fp
2730c     0B 19 82 F1 | 	sub	arg04, arg03
27310     10 4E 85 F1 | 	sub	fp, #16
27314     A7 18 62 FC | 	wrlong	arg04, fp
27318     04 4E 85 F1 | 	sub	fp, #4
2731c     A7 18 02 FB | 	rdlong	arg04, fp
27320     0C FB 01 F6 | 	mov	result1, arg04
27324     14 18 06 F1 | 	add	arg04, #20
27328     0C 19 02 FB | 	rdlong	arg04, arg04
2732c     14 4E 05 F1 | 	add	fp, #20
27330     A7 16 02 FB | 	rdlong	arg03, fp
27334     0B 19 02 F1 | 	add	arg04, arg03
27338     14 FA 05 F1 | 	add	result1, #20
2733c     FD 18 62 FC | 	wrlong	arg04, result1
27340     14 4E 85 F1 | 	sub	fp, #20
27344     A7 16 02 FB | 	rdlong	arg03, fp
27348     04 4E 85 F1 | 	sub	fp, #4
2734c     10 16 06 F1 | 	add	arg03, #16
27350     0B 17 C2 FA | 	rdbyte	arg03, arg03
27354     02 16 CE F7 | 	test	arg03, #2 wz
27358     3C 00 90 AD |  if_e	jmp	#LR__3968
2735c     04 4E 05 F1 | 	add	fp, #4
27360     A7 12 02 FB | 	rdlong	arg01, fp
27364     10 4E 05 F1 | 	add	fp, #16
27368     A7 14 02 FB | 	rdlong	arg02, fp
2736c     14 4E 85 F1 | 	sub	fp, #20
27370     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
27374     14 4E 05 F1 | 	add	fp, #20
27378     A7 FA 61 FC | 	wrlong	result1, fp
2737c     00 FA 4D F2 | 	cmps	result1, #0 wz
27380     14 4E 85 F1 | 	sub	fp, #20
27384     08 4E 05 A1 |  if_e	add	fp, #8
27388     A7 00 68 AC |  if_e	wrlong	#0, fp
2738c     08 4E 85 A1 |  if_e	sub	fp, #8
27390                 | ' 							ofs = 0; break;
27390     D0 00 90 AD |  if_e	jmp	#LR__3973
27394     24 00 90 FD | 	jmp	#LR__3969
27398                 | LR__3968
27398     04 4E 05 F1 | 	add	fp, #4
2739c     A7 12 02 FB | 	rdlong	arg01, fp
273a0     10 4E 05 F1 | 	add	fp, #16
273a4     A7 14 02 FB | 	rdlong	arg02, fp
273a8     14 4E 85 F1 | 	sub	fp, #20
273ac     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
273b0     14 4E 05 F1 | 	add	fp, #20
273b4     A7 FA 61 FC | 	wrlong	result1, fp
273b8     14 4E 85 F1 | 	sub	fp, #20
273bc                 | LR__3969
273bc     14 4E 05 F1 | 	add	fp, #20
273c0     A7 16 02 FB | 	rdlong	arg03, fp
273c4     14 4E 85 F1 | 	sub	fp, #20
273c8     FF FF 7F FF 
273cc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
273d0     1C 00 90 5D |  if_ne	jmp	#LR__3970
273d4     04 4E 05 F1 | 	add	fp, #4
273d8     A7 16 02 FB | 	rdlong	arg03, fp
273dc     04 4E 85 F1 | 	sub	fp, #4
273e0     11 16 06 F1 | 	add	arg03, #17
273e4     0B 03 48 FC | 	wrbyte	#1, arg03
273e8     01 FA 05 F6 | 	mov	result1, #1
273ec     D0 02 90 FD | 	jmp	#LR__3983
273f0                 | LR__3970
273f0     14 4E 05 F1 | 	add	fp, #20
273f4     A7 16 02 FB | 	rdlong	arg03, fp
273f8     14 4E 85 F1 | 	sub	fp, #20
273fc     02 16 16 F2 | 	cmp	arg03, #2 wc
27400     24 00 90 CD |  if_b	jmp	#LR__3971
27404     10 4E 05 F1 | 	add	fp, #16
27408     A7 18 02 FB | 	rdlong	arg04, fp
2740c     04 4E 05 F1 | 	add	fp, #4
27410     A7 16 02 FB | 	rdlong	arg03, fp
27414     14 4E 85 F1 | 	sub	fp, #20
27418     18 18 06 F1 | 	add	arg04, #24
2741c     0C 19 02 FB | 	rdlong	arg04, arg04
27420     0C 17 12 F2 | 	cmp	arg03, arg04 wc
27424     1C 00 90 CD |  if_b	jmp	#LR__3972
27428                 | LR__3971
27428     04 4E 05 F1 | 	add	fp, #4
2742c     A7 16 02 FB | 	rdlong	arg03, fp
27430     04 4E 85 F1 | 	sub	fp, #4
27434     11 16 06 F1 | 	add	arg03, #17
27438     0B 05 48 FC | 	wrbyte	#2, arg03
2743c     02 FA 05 F6 | 	mov	result1, #2
27440     7C 02 90 FD | 	jmp	#LR__3983
27444                 | LR__3972
27444     04 4E 05 F1 | 	add	fp, #4
27448     A7 18 02 FB | 	rdlong	arg04, fp
2744c     10 4E 05 F1 | 	add	fp, #16
27450     A7 16 02 FB | 	rdlong	arg03, fp
27454     14 4E 85 F1 | 	sub	fp, #20
27458     18 18 06 F1 | 	add	arg04, #24
2745c     0C 17 62 FC | 	wrlong	arg03, arg04
27460     7C FE 9F FD | 	jmp	#LR__3967
27464                 | LR__3973
27464     04 4E 05 F1 | 	add	fp, #4
27468     A7 16 02 FB | 	rdlong	arg03, fp
2746c     0B 13 02 F6 | 	mov	arg01, arg03
27470     14 16 06 F1 | 	add	arg03, #20
27474     0B 15 02 FB | 	rdlong	arg02, arg03
27478     04 4E 05 F1 | 	add	fp, #4
2747c     A7 16 02 FB | 	rdlong	arg03, fp
27480     0B 15 02 F1 | 	add	arg02, arg03
27484     14 12 06 F1 | 	add	arg01, #20
27488     09 15 62 FC | 	wrlong	arg02, arg01
2748c     A7 16 02 FB | 	rdlong	arg03, fp
27490     08 4E 85 F1 | 	sub	fp, #8
27494     FF 17 CE F7 | 	test	arg03, #511 wz
27498     6C 00 90 AD |  if_e	jmp	#LR__3975
2749c     10 4E 05 F1 | 	add	fp, #16
274a0     A7 12 02 FB | 	rdlong	arg01, fp
274a4     04 4E 05 F1 | 	add	fp, #4
274a8     A7 14 02 FB | 	rdlong	arg02, fp
274ac     14 4E 85 F1 | 	sub	fp, #20
274b0     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
274b4     1C 4E 05 F1 | 	add	fp, #28
274b8     A7 FA 61 FC | 	wrlong	result1, fp
274bc     1C 4E 85 F1 | 	sub	fp, #28
274c0     00 FA 0D F2 | 	cmp	result1, #0 wz
274c4     1C 00 90 5D |  if_ne	jmp	#LR__3974
274c8     04 4E 05 F1 | 	add	fp, #4
274cc     A7 16 02 FB | 	rdlong	arg03, fp
274d0     04 4E 85 F1 | 	sub	fp, #4
274d4     11 16 06 F1 | 	add	arg03, #17
274d8     0B 05 48 FC | 	wrbyte	#2, arg03
274dc     02 FA 05 F6 | 	mov	result1, #2
274e0     DC 01 90 FD | 	jmp	#LR__3983
274e4                 | LR__3974
274e4     1C 4E 05 F1 | 	add	fp, #28
274e8     A7 18 02 FB | 	rdlong	arg04, fp
274ec     14 4E 85 F1 | 	sub	fp, #20
274f0     A7 16 02 FB | 	rdlong	arg03, fp
274f4     09 16 46 F0 | 	shr	arg03, #9
274f8     0B 19 02 F1 | 	add	arg04, arg03
274fc     14 4E 05 F1 | 	add	fp, #20
27500     A7 18 62 FC | 	wrlong	arg04, fp
27504     1C 4E 85 F1 | 	sub	fp, #28
27508                 | LR__3975
27508                 | LR__3976
27508                 | LR__3977
27508     04 4E 05 F1 | 	add	fp, #4
2750c     A7 18 02 FB | 	rdlong	arg04, fp
27510     0C 17 02 F6 | 	mov	arg03, arg04
27514     04 4E 85 F1 | 	sub	fp, #4
27518     14 16 06 F1 | 	add	arg03, #20
2751c     0B 17 02 FB | 	rdlong	arg03, arg03
27520     0C 18 06 F1 | 	add	arg04, #12
27524     0C 19 02 FB | 	rdlong	arg04, arg04
27528     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2752c     3C 00 90 ED |  if_be	jmp	#LR__3978
27530     04 4E 05 F1 | 	add	fp, #4
27534     A7 18 02 FB | 	rdlong	arg04, fp
27538     0C 17 02 F6 | 	mov	arg03, arg04
2753c     14 18 06 F1 | 	add	arg04, #20
27540     0C 19 02 FB | 	rdlong	arg04, arg04
27544     0C 16 06 F1 | 	add	arg03, #12
27548     0B 19 62 FC | 	wrlong	arg04, arg03
2754c     A7 18 02 FB | 	rdlong	arg04, fp
27550     0C 17 02 F6 | 	mov	arg03, arg04
27554     04 4E 85 F1 | 	sub	fp, #4
27558     10 18 06 F1 | 	add	arg04, #16
2755c     0C 19 C2 FA | 	rdbyte	arg04, arg04
27560     40 18 46 F5 | 	or	arg04, #64
27564     10 16 06 F1 | 	add	arg03, #16
27568     0B 19 42 FC | 	wrbyte	arg04, arg03
2756c                 | LR__3978
2756c     04 4E 05 F1 | 	add	fp, #4
27570     A7 16 02 FB | 	rdlong	arg03, fp
27574     04 4E 85 F1 | 	sub	fp, #4
27578     14 16 06 F1 | 	add	arg03, #20
2757c     0B 17 02 FB | 	rdlong	arg03, arg03
27580     FF 17 CE F7 | 	test	arg03, #511 wz
27584     2C 01 90 AD |  if_e	jmp	#LR__3982
27588     04 4E 05 F1 | 	add	fp, #4
2758c     A7 18 02 FB | 	rdlong	arg04, fp
27590     18 4E 05 F1 | 	add	fp, #24
27594     A7 16 02 FB | 	rdlong	arg03, fp
27598     1C 4E 85 F1 | 	sub	fp, #28
2759c     1C 18 06 F1 | 	add	arg04, #28
275a0     0C 19 02 FB | 	rdlong	arg04, arg04
275a4     0C 17 0A F2 | 	cmp	arg03, arg04 wz
275a8     08 01 90 AD |  if_e	jmp	#LR__3982
275ac     04 4E 05 F1 | 	add	fp, #4
275b0     A7 16 02 FB | 	rdlong	arg03, fp
275b4     04 4E 85 F1 | 	sub	fp, #4
275b8     10 16 06 F1 | 	add	arg03, #16
275bc     0B 17 C2 FA | 	rdbyte	arg03, arg03
275c0     80 16 CE F7 | 	test	arg03, #128 wz
275c4     7C 00 90 AD |  if_e	jmp	#LR__3980
275c8     10 4E 05 F1 | 	add	fp, #16
275cc     A7 16 02 FB | 	rdlong	arg03, fp
275d0     01 16 06 F1 | 	add	arg03, #1
275d4     0B 13 C2 FA | 	rdbyte	arg01, arg03
275d8     0C 4E 85 F1 | 	sub	fp, #12
275dc     A7 16 02 FB | 	rdlong	arg03, fp
275e0     0B 15 02 F6 | 	mov	arg02, arg03
275e4     28 14 06 F1 | 	add	arg02, #40
275e8     04 4E 85 F1 | 	sub	fp, #4
275ec     1C 16 06 F1 | 	add	arg03, #28
275f0     0B 17 02 FB | 	rdlong	arg03, arg03
275f4     01 18 06 F6 | 	mov	arg04, #1
275f8     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
275fc     00 FA 0D F2 | 	cmp	result1, #0 wz
27600     1C 00 90 AD |  if_e	jmp	#LR__3979
27604     04 4E 05 F1 | 	add	fp, #4
27608     A7 16 02 FB | 	rdlong	arg03, fp
2760c     04 4E 85 F1 | 	sub	fp, #4
27610     11 16 06 F1 | 	add	arg03, #17
27614     0B 03 48 FC | 	wrbyte	#1, arg03
27618     01 FA 05 F6 | 	mov	result1, #1
2761c     A0 00 90 FD | 	jmp	#LR__3983
27620                 | LR__3979
27620     04 4E 05 F1 | 	add	fp, #4
27624     A7 18 02 FB | 	rdlong	arg04, fp
27628     0C 17 02 F6 | 	mov	arg03, arg04
2762c     04 4E 85 F1 | 	sub	fp, #4
27630     10 18 06 F1 | 	add	arg04, #16
27634     0C 19 C2 FA | 	rdbyte	arg04, arg04
27638     7F 18 06 F5 | 	and	arg04, #127
2763c     10 16 06 F1 | 	add	arg03, #16
27640     0B 19 42 FC | 	wrbyte	arg04, arg03
27644                 | LR__3980
27644     10 4E 05 F1 | 	add	fp, #16
27648     A7 16 02 FB | 	rdlong	arg03, fp
2764c     01 16 06 F1 | 	add	arg03, #1
27650     0B 13 C2 FA | 	rdbyte	arg01, arg03
27654     0C 4E 85 F1 | 	sub	fp, #12
27658     A7 14 02 FB | 	rdlong	arg02, fp
2765c     28 14 06 F1 | 	add	arg02, #40
27660     18 4E 05 F1 | 	add	fp, #24
27664     A7 16 02 FB | 	rdlong	arg03, fp
27668     1C 4E 85 F1 | 	sub	fp, #28
2766c     01 18 06 F6 | 	mov	arg04, #1
27670     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
27674     00 FA 0D F2 | 	cmp	result1, #0 wz
27678     1C 00 90 AD |  if_e	jmp	#LR__3981
2767c     04 4E 05 F1 | 	add	fp, #4
27680     A7 16 02 FB | 	rdlong	arg03, fp
27684     04 4E 85 F1 | 	sub	fp, #4
27688     11 16 06 F1 | 	add	arg03, #17
2768c     0B 03 48 FC | 	wrbyte	#1, arg03
27690     01 FA 05 F6 | 	mov	result1, #1
27694     28 00 90 FD | 	jmp	#LR__3983
27698                 | LR__3981
27698     04 4E 05 F1 | 	add	fp, #4
2769c     A7 18 02 FB | 	rdlong	arg04, fp
276a0     18 4E 05 F1 | 	add	fp, #24
276a4     A7 16 02 FB | 	rdlong	arg03, fp
276a8     1C 4E 85 F1 | 	sub	fp, #28
276ac     1C 18 06 F1 | 	add	arg04, #28
276b0     0C 17 62 FC | 	wrlong	arg03, arg04
276b4                 | LR__3982
276b4                 | ' 
276b4                 | ' 			fp->sect = nsect;
276b4                 | ' 		}
276b4                 | ' 	}
276b4                 | ' 
276b4                 | ' 	return res ;
276b4     0C 4E 05 F1 | 	add	fp, #12
276b8     A7 FA 01 FB | 	rdlong	result1, fp
276bc     0C 4E 85 F1 | 	sub	fp, #12
276c0                 | LR__3983
276c0     A7 F0 03 F6 | 	mov	ptra, fp
276c4     B2 00 A0 FD | 	call	#popregs_
276c8                 | _fatfs_cc_f_lseek_ret
276c8     2D 00 64 FD | 	ret
276cc                 | 
276cc                 | _fatfs_cc_f_opendir
276cc     01 4A 05 F6 | 	mov	COUNT_, #1
276d0     A8 00 A0 FD | 	call	#pushregs_
276d4     14 F0 07 F1 | 	add	ptra, #20
276d8     04 4E 05 F1 | 	add	fp, #4
276dc     A7 12 62 FC | 	wrlong	arg01, fp
276e0     04 4E 05 F1 | 	add	fp, #4
276e4     A7 14 62 FC | 	wrlong	arg02, fp
276e8     04 4E 85 F1 | 	sub	fp, #4
276ec     A7 16 0A FB | 	rdlong	arg03, fp wz
276f0     04 4E 85 F1 | 	sub	fp, #4
276f4     09 FA 05 A6 |  if_e	mov	result1, #9
276f8     78 01 90 AD |  if_e	jmp	#LR__3996
276fc     08 4E 05 F1 | 	add	fp, #8
27700     A7 12 02 F6 | 	mov	arg01, fp
27704     08 4E 05 F1 | 	add	fp, #8
27708     A7 14 02 F6 | 	mov	arg02, fp
2770c     10 4E 85 F1 | 	sub	fp, #16
27710     00 16 06 F6 | 	mov	arg03, #0
27714     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
27718     0C 4E 05 F1 | 	add	fp, #12
2771c     A7 FA 61 FC | 	wrlong	result1, fp
27720     0C 4E 85 F1 | 	sub	fp, #12
27724     00 FA 0D F2 | 	cmp	result1, #0 wz
27728     20 01 90 5D |  if_ne	jmp	#LR__3995
2772c     04 4E 05 F1 | 	add	fp, #4
27730     A7 16 02 FB | 	rdlong	arg03, fp
27734     0C 4E 05 F1 | 	add	fp, #12
27738     A7 FA 01 FB | 	rdlong	result1, fp
2773c     0B FB 61 FC | 	wrlong	result1, arg03
27740     0C 4E 85 F1 | 	sub	fp, #12
27744     A7 12 02 FB | 	rdlong	arg01, fp
27748     04 4E 05 F1 | 	add	fp, #4
2774c     A7 14 02 FB | 	rdlong	arg02, fp
27750     08 4E 85 F1 | 	sub	fp, #8
27754     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
27758     0C 4E 05 F1 | 	add	fp, #12
2775c     A7 FA 61 FC | 	wrlong	result1, fp
27760     0C 4E 85 F1 | 	sub	fp, #12
27764     00 FA 0D F2 | 	cmp	result1, #0 wz
27768     C4 00 90 5D |  if_ne	jmp	#LR__3994
2776c     04 4E 05 F1 | 	add	fp, #4
27770     A7 16 02 FB | 	rdlong	arg03, fp
27774     04 4E 85 F1 | 	sub	fp, #4
27778     2B 16 06 F1 | 	add	arg03, #43
2777c     0B 17 C2 FA | 	rdbyte	arg03, arg03
27780     80 16 CE F7 | 	test	arg03, #128 wz
27784     58 00 90 5D |  if_ne	jmp	#LR__3992
27788     04 4E 05 F1 | 	add	fp, #4
2778c     A7 16 02 FB | 	rdlong	arg03, fp
27790     04 4E 85 F1 | 	sub	fp, #4
27794     06 16 06 F1 | 	add	arg03, #6
27798     0B 17 C2 FA | 	rdbyte	arg03, arg03
2779c     10 16 CE F7 | 	test	arg03, #16 wz
277a0     30 00 90 AD |  if_e	jmp	#LR__3990
277a4     04 4E 05 F1 | 	add	fp, #4
277a8     A7 16 02 FB | 	rdlong	arg03, fp
277ac     0B 1F 02 F6 | 	mov	local01, arg03
277b0     0C 4E 05 F1 | 	add	fp, #12
277b4     A7 12 02 FB | 	rdlong	arg01, fp
277b8     10 4E 85 F1 | 	sub	fp, #16
277bc     1C 16 06 F1 | 	add	arg03, #28
277c0     0B 15 02 FB | 	rdlong	arg02, arg03
277c4     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
277c8     08 1E 06 F1 | 	add	local01, #8
277cc     0F FB 61 FC | 	wrlong	result1, local01
277d0     0C 00 90 FD | 	jmp	#LR__3991
277d4                 | LR__3990
277d4     0C 4E 05 F1 | 	add	fp, #12
277d8     A7 0A 68 FC | 	wrlong	#5, fp
277dc     0C 4E 85 F1 | 	sub	fp, #12
277e0                 | LR__3991
277e0                 | LR__3992
277e0     0C 4E 05 F1 | 	add	fp, #12
277e4     A7 1E 0A FB | 	rdlong	local01, fp wz
277e8     0C 4E 85 F1 | 	sub	fp, #12
277ec     40 00 90 5D |  if_ne	jmp	#LR__3993
277f0     04 4E 05 F1 | 	add	fp, #4
277f4     A7 1E 02 FB | 	rdlong	local01, fp
277f8     0C 4E 05 F1 | 	add	fp, #12
277fc     A7 16 02 FB | 	rdlong	arg03, fp
27800     06 16 06 F1 | 	add	arg03, #6
27804     0B 17 E2 FA | 	rdword	arg03, arg03
27808     04 1E 06 F1 | 	add	local01, #4
2780c     0F 17 52 FC | 	wrword	arg03, local01
27810     0C 4E 85 F1 | 	sub	fp, #12
27814     A7 12 02 FB | 	rdlong	arg01, fp
27818     04 4E 85 F1 | 	sub	fp, #4
2781c     00 14 06 F6 | 	mov	arg02, #0
27820     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
27824     0C 4E 05 F1 | 	add	fp, #12
27828     A7 FA 61 FC | 	wrlong	result1, fp
2782c     0C 4E 85 F1 | 	sub	fp, #12
27830                 | LR__3993
27830                 | LR__3994
27830     0C 4E 05 F1 | 	add	fp, #12
27834     A7 1E 02 FB | 	rdlong	local01, fp
27838     0C 4E 85 F1 | 	sub	fp, #12
2783c     04 1E 0E F2 | 	cmp	local01, #4 wz
27840     0C 4E 05 A1 |  if_e	add	fp, #12
27844     A7 0A 68 AC |  if_e	wrlong	#5, fp
27848     0C 4E 85 A1 |  if_e	sub	fp, #12
2784c                 | LR__3995
2784c     0C 4E 05 F1 | 	add	fp, #12
27850     A7 1E 0A FB | 	rdlong	local01, fp wz
27854     0C 4E 85 F1 | 	sub	fp, #12
27858     04 4E 05 51 |  if_ne	add	fp, #4
2785c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
27860     04 4E 85 51 |  if_ne	sub	fp, #4
27864     0F 01 68 5C |  if_ne	wrlong	#0, local01
27868                 | ' 
27868                 | ' 	return res ;
27868     0C 4E 05 F1 | 	add	fp, #12
2786c     A7 FA 01 FB | 	rdlong	result1, fp
27870     0C 4E 85 F1 | 	sub	fp, #12
27874                 | LR__3996
27874     A7 F0 03 F6 | 	mov	ptra, fp
27878     B2 00 A0 FD | 	call	#popregs_
2787c                 | _fatfs_cc_f_opendir_ret
2787c     2D 00 64 FD | 	ret
27880                 | 
27880                 | _fatfs_cc_f_closedir
27880     00 4A 05 F6 | 	mov	COUNT_, #0
27884     A8 00 A0 FD | 	call	#pushregs_
27888     10 F0 07 F1 | 	add	ptra, #16
2788c     04 4E 05 F1 | 	add	fp, #4
27890     A7 12 62 FC | 	wrlong	arg01, fp
27894     08 4E 05 F1 | 	add	fp, #8
27898     A7 14 02 F6 | 	mov	arg02, fp
2789c     0C 4E 85 F1 | 	sub	fp, #12
278a0     C0 DD BF FD | 	call	#_fatfs_cc_validate
278a4     08 4E 05 F1 | 	add	fp, #8
278a8     A7 FA 61 FC | 	wrlong	result1, fp
278ac     08 4E 85 F1 | 	sub	fp, #8
278b0     00 FA 0D F2 | 	cmp	result1, #0 wz
278b4     04 4E 05 A1 |  if_e	add	fp, #4
278b8     A7 FA 01 AB |  if_e	rdlong	result1, fp
278bc     04 4E 85 A1 |  if_e	sub	fp, #4
278c0     FD 00 68 AC |  if_e	wrlong	#0, result1
278c4                 | ' 
278c4                 | ' 
278c4                 | ' 
278c4                 | ' 
278c4                 | ' 		dp->obj.fs = 0;
278c4                 | ' #line 4633 "ff.c"
278c4                 | ' 	}
278c4                 | ' 	return res;
278c4     08 4E 05 F1 | 	add	fp, #8
278c8     A7 FA 01 FB | 	rdlong	result1, fp
278cc     08 4E 85 F1 | 	sub	fp, #8
278d0     A7 F0 03 F6 | 	mov	ptra, fp
278d4     B2 00 A0 FD | 	call	#popregs_
278d8                 | _fatfs_cc_f_closedir_ret
278d8     2D 00 64 FD | 	ret
278dc                 | 
278dc                 | _fatfs_cc_f_readdir
278dc     00 4A 05 F6 | 	mov	COUNT_, #0
278e0     A8 00 A0 FD | 	call	#pushregs_
278e4     14 F0 07 F1 | 	add	ptra, #20
278e8     04 4E 05 F1 | 	add	fp, #4
278ec     A7 12 62 FC | 	wrlong	arg01, fp
278f0     04 4E 05 F1 | 	add	fp, #4
278f4     A7 14 62 FC | 	wrlong	arg02, fp
278f8     04 4E 85 F1 | 	sub	fp, #4
278fc     A7 12 02 FB | 	rdlong	arg01, fp
27900     0C 4E 05 F1 | 	add	fp, #12
27904     A7 14 02 F6 | 	mov	arg02, fp
27908     10 4E 85 F1 | 	sub	fp, #16
2790c     54 DD BF FD | 	call	#_fatfs_cc_validate
27910     0C 4E 05 F1 | 	add	fp, #12
27914     A7 FA 61 FC | 	wrlong	result1, fp
27918     0C 4E 85 F1 | 	sub	fp, #12
2791c     00 FA 0D F2 | 	cmp	result1, #0 wz
27920     BC 00 90 5D |  if_ne	jmp	#LR__4003
27924     08 4E 05 F1 | 	add	fp, #8
27928     A7 FA 09 FB | 	rdlong	result1, fp wz
2792c     08 4E 85 F1 | 	sub	fp, #8
27930     24 00 90 5D |  if_ne	jmp	#LR__4000
27934     04 4E 05 F1 | 	add	fp, #4
27938     A7 12 02 FB | 	rdlong	arg01, fp
2793c     04 4E 85 F1 | 	sub	fp, #4
27940     00 14 06 F6 | 	mov	arg02, #0
27944     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
27948     0C 4E 05 F1 | 	add	fp, #12
2794c     A7 FA 61 FC | 	wrlong	result1, fp
27950     0C 4E 85 F1 | 	sub	fp, #12
27954     88 00 90 FD | 	jmp	#LR__4002
27958                 | LR__4000
27958     04 4E 05 F1 | 	add	fp, #4
2795c     A7 12 02 FB | 	rdlong	arg01, fp
27960     04 4E 85 F1 | 	sub	fp, #4
27964     00 14 06 F6 | 	mov	arg02, #0
27968     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2796c     0C 4E 05 F1 | 	add	fp, #12
27970     A7 FA 61 FC | 	wrlong	result1, fp
27974     0C 4E 85 F1 | 	sub	fp, #12
27978     04 FA 0D F2 | 	cmp	result1, #4 wz
2797c     0C 4E 05 A1 |  if_e	add	fp, #12
27980     A7 00 68 AC |  if_e	wrlong	#0, fp
27984     0C 4E 85 A1 |  if_e	sub	fp, #12
27988     0C 4E 05 F1 | 	add	fp, #12
2798c     A7 FA 09 FB | 	rdlong	result1, fp wz
27990     0C 4E 85 F1 | 	sub	fp, #12
27994     48 00 90 5D |  if_ne	jmp	#LR__4001
27998     04 4E 05 F1 | 	add	fp, #4
2799c     A7 12 02 FB | 	rdlong	arg01, fp
279a0     04 4E 05 F1 | 	add	fp, #4
279a4     A7 14 02 FB | 	rdlong	arg02, fp
279a8     08 4E 85 F1 | 	sub	fp, #8
279ac     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
279b0     04 4E 05 F1 | 	add	fp, #4
279b4     A7 12 02 FB | 	rdlong	arg01, fp
279b8     04 4E 85 F1 | 	sub	fp, #4
279bc     00 14 06 F6 | 	mov	arg02, #0
279c0     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
279c4     0C 4E 05 F1 | 	add	fp, #12
279c8     A7 FA 61 FC | 	wrlong	result1, fp
279cc     0C 4E 85 F1 | 	sub	fp, #12
279d0     04 FA 0D F2 | 	cmp	result1, #4 wz
279d4     0C 4E 05 A1 |  if_e	add	fp, #12
279d8     A7 00 68 AC |  if_e	wrlong	#0, fp
279dc     0C 4E 85 A1 |  if_e	sub	fp, #12
279e0                 | LR__4001
279e0                 | LR__4002
279e0                 | LR__4003
279e0                 | ' 			}
279e0                 | ' 			;
279e0                 | ' 		}
279e0                 | ' 	}
279e0                 | ' 	return res ;
279e0     0C 4E 05 F1 | 	add	fp, #12
279e4     A7 FA 01 FB | 	rdlong	result1, fp
279e8     0C 4E 85 F1 | 	sub	fp, #12
279ec     A7 F0 03 F6 | 	mov	ptra, fp
279f0     B2 00 A0 FD | 	call	#popregs_
279f4                 | _fatfs_cc_f_readdir_ret
279f4     2D 00 64 FD | 	ret
279f8                 | 
279f8                 | _fatfs_cc_f_stat
279f8     00 4A 05 F6 | 	mov	COUNT_, #0
279fc     A8 00 A0 FD | 	call	#pushregs_
27a00     40 F0 07 F1 | 	add	ptra, #64
27a04     04 4E 05 F1 | 	add	fp, #4
27a08     A7 12 62 FC | 	wrlong	arg01, fp
27a0c     04 4E 05 F1 | 	add	fp, #4
27a10     A7 14 62 FC | 	wrlong	arg02, fp
27a14     04 4E 85 F1 | 	sub	fp, #4
27a18     A7 12 02 F6 | 	mov	arg01, fp
27a1c     0C 4E 05 F1 | 	add	fp, #12
27a20     A7 14 02 F6 | 	mov	arg02, fp
27a24     10 4E 85 F1 | 	sub	fp, #16
27a28     00 16 06 F6 | 	mov	arg03, #0
27a2c     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
27a30     0C 4E 05 F1 | 	add	fp, #12
27a34     A7 FA 61 FC | 	wrlong	result1, fp
27a38     0C 4E 85 F1 | 	sub	fp, #12
27a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
27a40     74 00 90 5D |  if_ne	jmp	#LR__4013
27a44     10 4E 05 F1 | 	add	fp, #16
27a48     A7 12 02 F6 | 	mov	arg01, fp
27a4c     0C 4E 85 F1 | 	sub	fp, #12
27a50     A7 14 02 FB | 	rdlong	arg02, fp
27a54     04 4E 85 F1 | 	sub	fp, #4
27a58     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
27a5c     0C 4E 05 F1 | 	add	fp, #12
27a60     A7 FA 61 FC | 	wrlong	result1, fp
27a64     0C 4E 85 F1 | 	sub	fp, #12
27a68     00 FA 0D F2 | 	cmp	result1, #0 wz
27a6c     48 00 90 5D |  if_ne	jmp	#LR__4012
27a70     3B 4E 05 F1 | 	add	fp, #59
27a74     A7 FA C1 FA | 	rdbyte	result1, fp
27a78     3B 4E 85 F1 | 	sub	fp, #59
27a7c     80 FA CD F7 | 	test	result1, #128 wz
27a80     0C 4E 05 51 |  if_ne	add	fp, #12
27a84     A7 0C 68 5C |  if_ne	wrlong	#6, fp
27a88     0C 4E 85 51 |  if_ne	sub	fp, #12
27a8c     28 00 90 5D |  if_ne	jmp	#LR__4011
27a90     08 4E 05 F1 | 	add	fp, #8
27a94     A7 FA 09 FB | 	rdlong	result1, fp wz
27a98     08 4E 85 F1 | 	sub	fp, #8
27a9c     18 00 90 AD |  if_e	jmp	#LR__4010
27aa0     10 4E 05 F1 | 	add	fp, #16
27aa4     A7 12 02 F6 | 	mov	arg01, fp
27aa8     08 4E 85 F1 | 	sub	fp, #8
27aac     A7 14 02 FB | 	rdlong	arg02, fp
27ab0     08 4E 85 F1 | 	sub	fp, #8
27ab4     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
27ab8                 | LR__4010
27ab8                 | LR__4011
27ab8                 | LR__4012
27ab8                 | LR__4013
27ab8                 | ' 			}
27ab8                 | ' 		}
27ab8                 | ' 		;
27ab8                 | ' 	}
27ab8                 | ' 
27ab8                 | ' 	return res ;
27ab8     0C 4E 05 F1 | 	add	fp, #12
27abc     A7 FA 01 FB | 	rdlong	result1, fp
27ac0     0C 4E 85 F1 | 	sub	fp, #12
27ac4     A7 F0 03 F6 | 	mov	ptra, fp
27ac8     B2 00 A0 FD | 	call	#popregs_
27acc                 | _fatfs_cc_f_stat_ret
27acc     2D 00 64 FD | 	ret
27ad0                 | 
27ad0                 | _fatfs_cc_f_unlink
27ad0     00 4A 05 F6 | 	mov	COUNT_, #0
27ad4     A8 00 A0 FD | 	call	#pushregs_
27ad8     74 F0 07 F1 | 	add	ptra, #116
27adc     04 4E 05 F1 | 	add	fp, #4
27ae0     A7 12 62 FC | 	wrlong	arg01, fp
27ae4     68 4E 05 F1 | 	add	fp, #104
27ae8     A7 00 68 FC | 	wrlong	#0, fp
27aec     68 4E 85 F1 | 	sub	fp, #104
27af0     A7 12 02 F6 | 	mov	arg01, fp
27af4     6C 4E 05 F1 | 	add	fp, #108
27af8     A7 14 02 F6 | 	mov	arg02, fp
27afc     70 4E 85 F1 | 	sub	fp, #112
27b00     02 16 06 F6 | 	mov	arg03, #2
27b04     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
27b08     08 4E 05 F1 | 	add	fp, #8
27b0c     A7 FA 61 FC | 	wrlong	result1, fp
27b10     08 4E 85 F1 | 	sub	fp, #8
27b14     00 FA 0D F2 | 	cmp	result1, #0 wz
27b18     E4 01 90 5D |  if_ne	jmp	#LR__4028
27b1c     70 4E 05 F1 | 	add	fp, #112
27b20     A7 16 02 FB | 	rdlong	arg03, fp
27b24     64 4E 85 F1 | 	sub	fp, #100
27b28     A7 16 62 FC | 	wrlong	arg03, fp
27b2c     A7 12 02 F6 | 	mov	arg01, fp
27b30     08 4E 85 F1 | 	sub	fp, #8
27b34     A7 14 02 FB | 	rdlong	arg02, fp
27b38     04 4E 85 F1 | 	sub	fp, #4
27b3c     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
27b40     08 4E 05 F1 | 	add	fp, #8
27b44     A7 FA 61 FC | 	wrlong	result1, fp
27b48     00 FA 4D F2 | 	cmps	result1, #0 wz
27b4c     08 4E 85 F1 | 	sub	fp, #8
27b50     AC 01 90 5D |  if_ne	jmp	#LR__4027
27b54     37 4E 05 F1 | 	add	fp, #55
27b58     A7 FA C1 FA | 	rdbyte	result1, fp
27b5c     37 4E 85 F1 | 	sub	fp, #55
27b60     80 FA CD F7 | 	test	result1, #128 wz
27b64     08 4E 05 51 |  if_ne	add	fp, #8
27b68     A7 0C 68 5C |  if_ne	wrlong	#6, fp
27b6c     08 4E 85 51 |  if_ne	sub	fp, #8
27b70     1C 00 90 5D |  if_ne	jmp	#LR__4020
27b74     12 4E 05 F1 | 	add	fp, #18
27b78     A7 FA C1 FA | 	rdbyte	result1, fp
27b7c     12 4E 85 F1 | 	sub	fp, #18
27b80     01 FA CD F7 | 	test	result1, #1 wz
27b84     08 4E 05 51 |  if_ne	add	fp, #8
27b88     A7 0E 68 5C |  if_ne	wrlong	#7, fp
27b8c     08 4E 85 51 |  if_ne	sub	fp, #8
27b90                 | LR__4020
27b90     08 4E 05 F1 | 	add	fp, #8
27b94     A7 FA 09 FB | 	rdlong	result1, fp wz
27b98     08 4E 85 F1 | 	sub	fp, #8
27b9c     C8 00 90 5D |  if_ne	jmp	#LR__4023
27ba0     70 4E 05 F1 | 	add	fp, #112
27ba4     A7 12 02 FB | 	rdlong	arg01, fp
27ba8     48 4E 85 F1 | 	sub	fp, #72
27bac     A7 14 02 FB | 	rdlong	arg02, fp
27bb0     28 4E 85 F1 | 	sub	fp, #40
27bb4     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
27bb8     6C 4E 05 F1 | 	add	fp, #108
27bbc     A7 FA 61 FC | 	wrlong	result1, fp
27bc0     5A 4E 85 F1 | 	sub	fp, #90
27bc4     A7 FA C1 FA | 	rdbyte	result1, fp
27bc8     12 4E 85 F1 | 	sub	fp, #18
27bcc     10 FA CD F7 | 	test	result1, #16 wz
27bd0     94 00 90 AD |  if_e	jmp	#LR__4022
27bd4     70 4E 05 F1 | 	add	fp, #112
27bd8     A7 FA 01 FB | 	rdlong	result1, fp
27bdc     34 4E 85 F1 | 	sub	fp, #52
27be0     A7 FA 61 FC | 	wrlong	result1, fp
27be4     30 4E 05 F1 | 	add	fp, #48
27be8     A7 16 02 FB | 	rdlong	arg03, fp
27bec     28 4E 85 F1 | 	sub	fp, #40
27bf0     A7 16 62 FC | 	wrlong	arg03, fp
27bf4     08 4E 85 F1 | 	sub	fp, #8
27bf8     A7 12 02 F6 | 	mov	arg01, fp
27bfc     3C 4E 85 F1 | 	sub	fp, #60
27c00     00 14 06 F6 | 	mov	arg02, #0
27c04     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
27c08     08 4E 05 F1 | 	add	fp, #8
27c0c     A7 FA 61 FC | 	wrlong	result1, fp
27c10     08 4E 85 F1 | 	sub	fp, #8
27c14     00 FA 0D F2 | 	cmp	result1, #0 wz
27c18     4C 00 90 5D |  if_ne	jmp	#LR__4021
27c1c     3C 4E 05 F1 | 	add	fp, #60
27c20     A7 12 02 F6 | 	mov	arg01, fp
27c24     3C 4E 85 F1 | 	sub	fp, #60
27c28     00 14 06 F6 | 	mov	arg02, #0
27c2c     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
27c30     08 4E 05 F1 | 	add	fp, #8
27c34     A7 FA 61 FC | 	wrlong	result1, fp
27c38     00 FA 4D F2 | 	cmps	result1, #0 wz
27c3c     08 4E 85 F1 | 	sub	fp, #8
27c40     08 4E 05 A1 |  if_e	add	fp, #8
27c44     A7 0E 68 AC |  if_e	wrlong	#7, fp
27c48     08 4E 85 A1 |  if_e	sub	fp, #8
27c4c     08 4E 05 F1 | 	add	fp, #8
27c50     A7 FA 01 FB | 	rdlong	result1, fp
27c54     08 4E 85 F1 | 	sub	fp, #8
27c58     04 FA 0D F2 | 	cmp	result1, #4 wz
27c5c     08 4E 05 A1 |  if_e	add	fp, #8
27c60     A7 00 68 AC |  if_e	wrlong	#0, fp
27c64     08 4E 85 A1 |  if_e	sub	fp, #8
27c68                 | LR__4021
27c68                 | LR__4022
27c68                 | LR__4023
27c68     08 4E 05 F1 | 	add	fp, #8
27c6c     A7 FA 09 FB | 	rdlong	result1, fp wz
27c70     08 4E 85 F1 | 	sub	fp, #8
27c74     88 00 90 5D |  if_ne	jmp	#LR__4026
27c78     0C 4E 05 F1 | 	add	fp, #12
27c7c     A7 12 02 F6 | 	mov	arg01, fp
27c80     0C 4E 85 F1 | 	sub	fp, #12
27c84     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
27c88     08 4E 05 F1 | 	add	fp, #8
27c8c     A7 FA 61 FC | 	wrlong	result1, fp
27c90     08 4E 85 F1 | 	sub	fp, #8
27c94     00 FA 0D F2 | 	cmp	result1, #0 wz
27c98     38 00 90 5D |  if_ne	jmp	#LR__4024
27c9c     6C 4E 05 F1 | 	add	fp, #108
27ca0     A7 FA 09 FB | 	rdlong	result1, fp wz
27ca4     6C 4E 85 F1 | 	sub	fp, #108
27ca8     28 00 90 AD |  if_e	jmp	#LR__4024
27cac     0C 4E 05 F1 | 	add	fp, #12
27cb0     A7 12 02 F6 | 	mov	arg01, fp
27cb4     60 4E 05 F1 | 	add	fp, #96
27cb8     A7 14 02 FB | 	rdlong	arg02, fp
27cbc     6C 4E 85 F1 | 	sub	fp, #108
27cc0     00 16 06 F6 | 	mov	arg03, #0
27cc4     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
27cc8     08 4E 05 F1 | 	add	fp, #8
27ccc     A7 FA 61 FC | 	wrlong	result1, fp
27cd0     08 4E 85 F1 | 	sub	fp, #8
27cd4                 | LR__4024
27cd4     08 4E 05 F1 | 	add	fp, #8
27cd8     A7 FA 09 FB | 	rdlong	result1, fp wz
27cdc     08 4E 85 F1 | 	sub	fp, #8
27ce0     1C 00 90 5D |  if_ne	jmp	#LR__4025
27ce4     70 4E 05 F1 | 	add	fp, #112
27ce8     A7 12 02 FB | 	rdlong	arg01, fp
27cec     70 4E 85 F1 | 	sub	fp, #112
27cf0     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
27cf4     08 4E 05 F1 | 	add	fp, #8
27cf8     A7 FA 61 FC | 	wrlong	result1, fp
27cfc     08 4E 85 F1 | 	sub	fp, #8
27d00                 | LR__4025
27d00                 | LR__4026
27d00                 | LR__4027
27d00                 | LR__4028
27d00                 | ' 			}
27d00                 | ' 		}
27d00                 | ' 		;
27d00                 | ' 	}
27d00                 | ' 
27d00                 | ' 	return res ;
27d00     08 4E 05 F1 | 	add	fp, #8
27d04     A7 FA 01 FB | 	rdlong	result1, fp
27d08     08 4E 85 F1 | 	sub	fp, #8
27d0c     A7 F0 03 F6 | 	mov	ptra, fp
27d10     B2 00 A0 FD | 	call	#popregs_
27d14                 | _fatfs_cc_f_unlink_ret
27d14     2D 00 64 FD | 	ret
27d18                 | 
27d18                 | _fatfs_cc_f_mkdir
27d18     00 4A 05 F6 | 	mov	COUNT_, #0
27d1c     A8 00 A0 FD | 	call	#pushregs_
27d20     5C F0 07 F1 | 	add	ptra, #92
27d24     04 4E 05 F1 | 	add	fp, #4
27d28     A7 12 62 FC | 	wrlong	arg01, fp
27d2c     A7 12 02 F6 | 	mov	arg01, fp
27d30     48 4E 05 F1 | 	add	fp, #72
27d34     A7 14 02 F6 | 	mov	arg02, fp
27d38     4C 4E 85 F1 | 	sub	fp, #76
27d3c     02 16 06 F6 | 	mov	arg03, #2
27d40     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
27d44     08 4E 05 F1 | 	add	fp, #8
27d48     A7 FA 61 FC | 	wrlong	result1, fp
27d4c     08 4E 85 F1 | 	sub	fp, #8
27d50     00 FA 0D F2 | 	cmp	result1, #0 wz
27d54     C4 02 90 5D |  if_ne	jmp	#LR__4035
27d58     4C 4E 05 F1 | 	add	fp, #76
27d5c     A7 16 02 FB | 	rdlong	arg03, fp
27d60     40 4E 85 F1 | 	sub	fp, #64
27d64     A7 16 62 FC | 	wrlong	arg03, fp
27d68     A7 12 02 F6 | 	mov	arg01, fp
27d6c     08 4E 85 F1 | 	sub	fp, #8
27d70     A7 14 02 FB | 	rdlong	arg02, fp
27d74     04 4E 85 F1 | 	sub	fp, #4
27d78     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
27d7c     08 4E 05 F1 | 	add	fp, #8
27d80     A7 FA 61 FC | 	wrlong	result1, fp
27d84     00 FA 4D F2 | 	cmps	result1, #0 wz
27d88     08 4E 85 F1 | 	sub	fp, #8
27d8c     08 4E 05 A1 |  if_e	add	fp, #8
27d90     A7 10 68 AC |  if_e	wrlong	#8, fp
27d94     08 4E 85 A1 |  if_e	sub	fp, #8
27d98     08 4E 05 F1 | 	add	fp, #8
27d9c     A7 FA 01 FB | 	rdlong	result1, fp
27da0     08 4E 85 F1 | 	sub	fp, #8
27da4     04 FA 0D F2 | 	cmp	result1, #4 wz
27da8     70 02 90 5D |  if_ne	jmp	#LR__4034
27dac     4C 4E 05 F1 | 	add	fp, #76
27db0     A7 16 02 FB | 	rdlong	arg03, fp
27db4     10 4E 85 F1 | 	sub	fp, #16
27db8     A7 16 62 FC | 	wrlong	arg03, fp
27dbc     A7 12 02 F6 | 	mov	arg01, fp
27dc0     3C 4E 85 F1 | 	sub	fp, #60
27dc4     00 14 06 F6 | 	mov	arg02, #0
27dc8     04 AC BF FD | 	call	#_fatfs_cc_create_chain
27dcc     50 4E 05 F1 | 	add	fp, #80
27dd0     A7 FA 61 FC | 	wrlong	result1, fp
27dd4     48 4E 85 F1 | 	sub	fp, #72
27dd8     A7 00 68 FC | 	wrlong	#0, fp
27ddc     48 4E 05 F1 | 	add	fp, #72
27de0     A7 FA 09 FB | 	rdlong	result1, fp wz
27de4     50 4E 85 F1 | 	sub	fp, #80
27de8     08 4E 05 A1 |  if_e	add	fp, #8
27dec     A7 0E 68 AC |  if_e	wrlong	#7, fp
27df0     08 4E 85 A1 |  if_e	sub	fp, #8
27df4     50 4E 05 F1 | 	add	fp, #80
27df8     A7 FA 01 FB | 	rdlong	result1, fp
27dfc     50 4E 85 F1 | 	sub	fp, #80
27e00     01 FA 0D F2 | 	cmp	result1, #1 wz
27e04     08 4E 05 A1 |  if_e	add	fp, #8
27e08     A7 04 68 AC |  if_e	wrlong	#2, fp
27e0c     08 4E 85 A1 |  if_e	sub	fp, #8
27e10     50 4E 05 F1 | 	add	fp, #80
27e14     A7 16 02 FB | 	rdlong	arg03, fp
27e18     50 4E 85 F1 | 	sub	fp, #80
27e1c     FF FF 7F FF 
27e20     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
27e24     08 4E 05 A1 |  if_e	add	fp, #8
27e28     A7 02 68 AC |  if_e	wrlong	#1, fp
27e2c     08 4E 85 A1 |  if_e	sub	fp, #8
27e30     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
27e34     58 4E 05 F1 | 	add	fp, #88
27e38     A7 FA 61 FC | 	wrlong	result1, fp
27e3c     50 4E 85 F1 | 	sub	fp, #80
27e40     A7 FA 09 FB | 	rdlong	result1, fp wz
27e44     08 4E 85 F1 | 	sub	fp, #8
27e48     1C 01 90 5D |  if_ne	jmp	#LR__4031
27e4c     4C 4E 05 F1 | 	add	fp, #76
27e50     A7 12 02 FB | 	rdlong	arg01, fp
27e54     04 4E 05 F1 | 	add	fp, #4
27e58     A7 14 02 FB | 	rdlong	arg02, fp
27e5c     50 4E 85 F1 | 	sub	fp, #80
27e60     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
27e64     08 4E 05 F1 | 	add	fp, #8
27e68     A7 FA 61 FC | 	wrlong	result1, fp
27e6c     00 FA 4D F2 | 	cmps	result1, #0 wz
27e70     08 4E 85 F1 | 	sub	fp, #8
27e74     F0 00 90 5D |  if_ne	jmp	#LR__4030
27e78     4C 4E 05 F1 | 	add	fp, #76
27e7c     A7 12 02 FB | 	rdlong	arg01, fp
27e80     4C 4E 85 F1 | 	sub	fp, #76
27e84     34 12 06 F1 | 	add	arg01, #52
27e88     20 14 06 F6 | 	mov	arg02, #32
27e8c     0B 16 06 F6 | 	mov	arg03, #11
27e90     98 00 A0 FD | 	call	#\builtin_bytefill_
27e94     4C 4E 05 F1 | 	add	fp, #76
27e98     A7 FA 01 FB | 	rdlong	result1, fp
27e9c     34 FA 05 F1 | 	add	result1, #52
27ea0     FD 5C 48 FC | 	wrbyte	#46, result1
27ea4     A7 16 02 FB | 	rdlong	arg03, fp
27ea8     3F 16 06 F1 | 	add	arg03, #63
27eac     0B 21 48 FC | 	wrbyte	#16, arg03
27eb0     A7 12 02 FB | 	rdlong	arg01, fp
27eb4     4A 12 06 F1 | 	add	arg01, #74
27eb8     0C 4E 05 F1 | 	add	fp, #12
27ebc     A7 14 02 FB | 	rdlong	arg02, fp
27ec0     09 15 62 FC | 	wrlong	arg02, arg01
27ec4     0C 4E 85 F1 | 	sub	fp, #12
27ec8     A7 14 02 FB | 	rdlong	arg02, fp
27ecc     0A 13 02 F6 | 	mov	arg01, arg02
27ed0     34 14 06 F1 | 	add	arg02, #52
27ed4     04 4E 05 F1 | 	add	fp, #4
27ed8     A7 16 02 FB | 	rdlong	arg03, fp
27edc     50 4E 85 F1 | 	sub	fp, #80
27ee0     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
27ee4     4C 4E 05 F1 | 	add	fp, #76
27ee8     A7 14 02 FB | 	rdlong	arg02, fp
27eec     0A 13 02 F6 | 	mov	arg01, arg02
27ef0     54 12 06 F1 | 	add	arg01, #84
27ef4     4C 4E 85 F1 | 	sub	fp, #76
27ef8     34 14 06 F1 | 	add	arg02, #52
27efc     20 16 06 F6 | 	mov	arg03, #32
27f00     34 2D BF FD | 	call	#__system____builtin_memmove
27f04     4C 4E 05 F1 | 	add	fp, #76
27f08     A7 16 02 FB | 	rdlong	arg03, fp
27f0c     55 16 06 F1 | 	add	arg03, #85
27f10     0B 5D 48 FC | 	wrbyte	#46, arg03
27f14     38 4E 85 F1 | 	sub	fp, #56
27f18     A7 16 02 FB | 	rdlong	arg03, fp
27f1c     40 4E 05 F1 | 	add	fp, #64
27f20     A7 16 62 FC | 	wrlong	arg03, fp
27f24     08 4E 85 F1 | 	sub	fp, #8
27f28     A7 14 02 FB | 	rdlong	arg02, fp
27f2c     0A 13 02 F6 | 	mov	arg01, arg02
27f30     54 14 06 F1 | 	add	arg02, #84
27f34     4C 4E 85 F1 | 	sub	fp, #76
27f38     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
27f3c     4C 4E 05 F1 | 	add	fp, #76
27f40     A7 16 02 FB | 	rdlong	arg03, fp
27f44     03 16 06 F1 | 	add	arg03, #3
27f48     0B 03 48 FC | 	wrbyte	#1, arg03
27f4c     40 4E 85 F1 | 	sub	fp, #64
27f50     A7 12 02 F6 | 	mov	arg01, fp
27f54     0C 4E 85 F1 | 	sub	fp, #12
27f58     44 BA BF FD | 	call	#_fatfs_cc_dir_register
27f5c     08 4E 05 F1 | 	add	fp, #8
27f60     A7 FA 61 FC | 	wrlong	result1, fp
27f64     08 4E 85 F1 | 	sub	fp, #8
27f68                 | LR__4030
27f68                 | LR__4031
27f68     08 4E 05 F1 | 	add	fp, #8
27f6c     A7 FA 09 FB | 	rdlong	result1, fp wz
27f70     08 4E 85 F1 | 	sub	fp, #8
27f74     88 00 90 5D |  if_ne	jmp	#LR__4032
27f78     28 4E 05 F1 | 	add	fp, #40
27f7c     A7 12 02 FB | 	rdlong	arg01, fp
27f80     16 12 06 F1 | 	add	arg01, #22
27f84     30 4E 05 F1 | 	add	fp, #48
27f88     A7 14 02 FB | 	rdlong	arg02, fp
27f8c     09 15 62 FC | 	wrlong	arg02, arg01
27f90     0C 4E 85 F1 | 	sub	fp, #12
27f94     A7 12 02 FB | 	rdlong	arg01, fp
27f98     24 4E 85 F1 | 	sub	fp, #36
27f9c     A7 14 02 FB | 	rdlong	arg02, fp
27fa0     28 4E 05 F1 | 	add	fp, #40
27fa4     A7 16 02 FB | 	rdlong	arg03, fp
27fa8     50 4E 85 F1 | 	sub	fp, #80
27fac     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
27fb0     28 4E 05 F1 | 	add	fp, #40
27fb4     A7 FA 01 FB | 	rdlong	result1, fp
27fb8     0B FA 05 F1 | 	add	result1, #11
27fbc     FD 20 48 FC | 	wrbyte	#16, result1
27fc0     24 4E 05 F1 | 	add	fp, #36
27fc4     A7 FA 01 FB | 	rdlong	result1, fp
27fc8     03 FA 05 F1 | 	add	result1, #3
27fcc     FD 02 48 FC | 	wrbyte	#1, result1
27fd0     44 4E 85 F1 | 	sub	fp, #68
27fd4     A7 FA 09 FB | 	rdlong	result1, fp wz
27fd8     08 4E 85 F1 | 	sub	fp, #8
27fdc     3C 00 90 5D |  if_ne	jmp	#LR__4033
27fe0     4C 4E 05 F1 | 	add	fp, #76
27fe4     A7 12 02 FB | 	rdlong	arg01, fp
27fe8     4C 4E 85 F1 | 	sub	fp, #76
27fec     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
27ff0     08 4E 05 F1 | 	add	fp, #8
27ff4     A7 FA 61 FC | 	wrlong	result1, fp
27ff8     08 4E 85 F1 | 	sub	fp, #8
27ffc     1C 00 90 FD | 	jmp	#LR__4033
28000                 | LR__4032
28000     3C 4E 05 F1 | 	add	fp, #60
28004     A7 12 02 F6 | 	mov	arg01, fp
28008     14 4E 05 F1 | 	add	fp, #20
2800c     A7 14 02 FB | 	rdlong	arg02, fp
28010     50 4E 85 F1 | 	sub	fp, #80
28014     00 16 06 F6 | 	mov	arg03, #0
28018     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2801c                 | LR__4033
2801c                 | LR__4034
2801c                 | LR__4035
2801c                 | ' 				remove_chain(&sobj, dcl, 0);
2801c                 | ' 			}
2801c                 | ' 		}
2801c                 | ' 		;
2801c                 | ' 	}
2801c                 | ' 
2801c                 | ' 	return res ;
2801c     08 4E 05 F1 | 	add	fp, #8
28020     A7 FA 01 FB | 	rdlong	result1, fp
28024     08 4E 85 F1 | 	sub	fp, #8
28028     A7 F0 03 F6 | 	mov	ptra, fp
2802c     B2 00 A0 FD | 	call	#popregs_
28030                 | _fatfs_cc_f_mkdir_ret
28030     2D 00 64 FD | 	ret
28034                 | 
28034                 | _fatfs_cc_f_rename
28034     01 4A 05 F6 | 	mov	COUNT_, #1
28038     A8 00 A0 FD | 	call	#pushregs_
2803c     9C F0 07 F1 | 	add	ptra, #156
28040     04 4E 05 F1 | 	add	fp, #4
28044     A7 12 62 FC | 	wrlong	arg01, fp
28048     04 4E 05 F1 | 	add	fp, #4
2804c     A7 14 62 FC | 	wrlong	arg02, fp
28050     A7 12 02 F6 | 	mov	arg01, fp
28054     08 4E 85 F1 | 	sub	fp, #8
28058     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2805c     04 4E 05 F1 | 	add	fp, #4
28060     A7 12 02 F6 | 	mov	arg01, fp
28064     6C 4E 05 F1 | 	add	fp, #108
28068     A7 14 02 F6 | 	mov	arg02, fp
2806c     70 4E 85 F1 | 	sub	fp, #112
28070     02 16 06 F6 | 	mov	arg03, #2
28074     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
28078     0C 4E 05 F1 | 	add	fp, #12
2807c     A7 FA 61 FC | 	wrlong	result1, fp
28080     0C 4E 85 F1 | 	sub	fp, #12
28084     00 FA 0D F2 | 	cmp	result1, #0 wz
28088     44 03 90 5D |  if_ne	jmp	#LR__4053
2808c     70 4E 05 F1 | 	add	fp, #112
28090     A7 16 02 FB | 	rdlong	arg03, fp
28094     60 4E 85 F1 | 	sub	fp, #96
28098     A7 16 62 FC | 	wrlong	arg03, fp
2809c     A7 12 02 F6 | 	mov	arg01, fp
280a0     0C 4E 85 F1 | 	sub	fp, #12
280a4     A7 14 02 FB | 	rdlong	arg02, fp
280a8     04 4E 85 F1 | 	sub	fp, #4
280ac     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
280b0     0C 4E 05 F1 | 	add	fp, #12
280b4     A7 FA 61 FC | 	wrlong	result1, fp
280b8     00 FA 4D F2 | 	cmps	result1, #0 wz
280bc     0C 4E 85 F1 | 	sub	fp, #12
280c0     1C 00 90 5D |  if_ne	jmp	#LR__4040
280c4     3B 4E 05 F1 | 	add	fp, #59
280c8     A7 FA C1 FA | 	rdbyte	result1, fp
280cc     3B 4E 85 F1 | 	sub	fp, #59
280d0     A0 FA CD F7 | 	test	result1, #160 wz
280d4     0C 4E 05 51 |  if_ne	add	fp, #12
280d8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
280dc     0C 4E 85 51 |  if_ne	sub	fp, #12
280e0                 | LR__4040
280e0     0C 4E 05 F1 | 	add	fp, #12
280e4     A7 1E 0A FB | 	rdlong	local01, fp wz
280e8     0C 4E 85 F1 | 	sub	fp, #12
280ec     E0 02 90 5D |  if_ne	jmp	#LR__4052
280f0     74 4E 05 F1 | 	add	fp, #116
280f4     A7 12 02 F6 | 	mov	arg01, fp
280f8     48 4E 85 F1 | 	sub	fp, #72
280fc     A7 14 02 FB | 	rdlong	arg02, fp
28100     2C 4E 85 F1 | 	sub	fp, #44
28104     20 16 06 F6 | 	mov	arg03, #32
28108     2C 2B BF FD | 	call	#__system____builtin_memmove
2810c     40 4E 05 F1 | 	add	fp, #64
28110     A7 12 02 F6 | 	mov	arg01, fp
28114     30 4E 85 F1 | 	sub	fp, #48
28118     A7 14 02 F6 | 	mov	arg02, fp
2811c     10 4E 85 F1 | 	sub	fp, #16
28120     30 16 06 F6 | 	mov	arg03, #48
28124     10 2B BF FD | 	call	#__system____builtin_memmove
28128     40 4E 05 F1 | 	add	fp, #64
2812c     A7 12 02 F6 | 	mov	arg01, fp
28130     38 4E 85 F1 | 	sub	fp, #56
28134     A7 14 02 FB | 	rdlong	arg02, fp
28138     08 4E 85 F1 | 	sub	fp, #8
2813c     34 CA BF FD | 	call	#_fatfs_cc_follow_path
28140     0C 4E 05 F1 | 	add	fp, #12
28144     A7 FA 61 FC | 	wrlong	result1, fp
28148     0C 4E 85 F1 | 	sub	fp, #12
2814c     00 FA 0D F2 | 	cmp	result1, #0 wz
28150     4C 00 90 5D |  if_ne	jmp	#LR__4043
28154     48 4E 05 F1 | 	add	fp, #72
28158     A7 FA 01 FB | 	rdlong	result1, fp
2815c     30 4E 85 F1 | 	sub	fp, #48
28160     A7 16 02 FB | 	rdlong	arg03, fp
28164     18 4E 85 F1 | 	sub	fp, #24
28168     0B FB 09 F2 | 	cmp	result1, arg03 wz
2816c     20 00 90 5D |  if_ne	jmp	#LR__4041
28170     50 4E 05 F1 | 	add	fp, #80
28174     A7 FA 01 FB | 	rdlong	result1, fp
28178     30 4E 85 F1 | 	sub	fp, #48
2817c     A7 16 02 FB | 	rdlong	arg03, fp
28180     20 4E 85 F1 | 	sub	fp, #32
28184     0B FB 09 F2 | 	cmp	result1, arg03 wz
28188     04 1E 06 A6 |  if_e	mov	local01, #4
2818c     04 00 90 AD |  if_e	jmp	#LR__4042
28190                 | LR__4041
28190     08 1E 06 F6 | 	mov	local01, #8
28194                 | LR__4042
28194     0C 4E 05 F1 | 	add	fp, #12
28198     A7 1E 62 FC | 	wrlong	local01, fp
2819c     0C 4E 85 F1 | 	sub	fp, #12
281a0                 | LR__4043
281a0     0C 4E 05 F1 | 	add	fp, #12
281a4     A7 1E 02 FB | 	rdlong	local01, fp
281a8     0C 4E 85 F1 | 	sub	fp, #12
281ac     04 1E 0E F2 | 	cmp	local01, #4 wz
281b0     CC 01 90 5D |  if_ne	jmp	#LR__4049
281b4     40 4E 05 F1 | 	add	fp, #64
281b8     A7 12 02 F6 | 	mov	arg01, fp
281bc     40 4E 85 F1 | 	sub	fp, #64
281c0     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
281c4     0C 4E 05 F1 | 	add	fp, #12
281c8     A7 FA 61 FC | 	wrlong	result1, fp
281cc     0C 4E 85 F1 | 	sub	fp, #12
281d0     00 FA 0D F2 | 	cmp	result1, #0 wz
281d4     A8 01 90 5D |  if_ne	jmp	#LR__4048
281d8     5C 4E 05 F1 | 	add	fp, #92
281dc     A7 12 02 FB | 	rdlong	arg01, fp
281e0     38 4E 05 F1 | 	add	fp, #56
281e4     A7 12 62 FC | 	wrlong	arg01, fp
281e8     0D 12 06 F1 | 	add	arg01, #13
281ec     20 4E 85 F1 | 	sub	fp, #32
281f0     A7 14 02 F6 | 	mov	arg02, fp
281f4     74 4E 85 F1 | 	sub	fp, #116
281f8     0D 14 06 F1 | 	add	arg02, #13
281fc     13 16 06 F6 | 	mov	arg03, #19
28200     34 2A BF FD | 	call	#__system____builtin_memmove
28204     94 4E 05 F1 | 	add	fp, #148
28208     A7 1E 02 FB | 	rdlong	local01, fp
2820c     15 4E 85 F1 | 	sub	fp, #21
28210     A7 FA C1 FA | 	rdbyte	result1, fp
28214     0B 1E 06 F1 | 	add	local01, #11
28218     0F FB 41 FC | 	wrbyte	result1, local01
2821c     15 4E 05 F1 | 	add	fp, #21
28220     A7 1E 02 FB | 	rdlong	local01, fp
28224     94 4E 85 F1 | 	sub	fp, #148
28228     0B 1E 06 F1 | 	add	local01, #11
2822c     0F 1F C2 FA | 	rdbyte	local01, local01
28230     10 1E CE F7 | 	test	local01, #16 wz
28234     24 00 90 5D |  if_ne	jmp	#LR__4044
28238     94 4E 05 F1 | 	add	fp, #148
2823c     A7 FA 01 FB | 	rdlong	result1, fp
28240     FD 1E 02 F6 | 	mov	local01, result1
28244     94 4E 85 F1 | 	sub	fp, #148
28248     0B FA 05 F1 | 	add	result1, #11
2824c     FD FA C1 FA | 	rdbyte	result1, result1
28250     20 FA 45 F5 | 	or	result1, #32
28254     0B 1E 06 F1 | 	add	local01, #11
28258     0F FB 41 FC | 	wrbyte	result1, local01
2825c                 | LR__4044
2825c     70 4E 05 F1 | 	add	fp, #112
28260     A7 1E 02 FB | 	rdlong	local01, fp
28264     03 1E 06 F1 | 	add	local01, #3
28268     0F 03 48 FC | 	wrbyte	#1, local01
2826c     24 4E 05 F1 | 	add	fp, #36
28270     A7 1E 02 FB | 	rdlong	local01, fp
28274     94 4E 85 F1 | 	sub	fp, #148
28278     0B 1E 06 F1 | 	add	local01, #11
2827c     0F 1F C2 FA | 	rdbyte	local01, local01
28280     10 1E CE F7 | 	test	local01, #16 wz
28284     F8 00 90 AD |  if_e	jmp	#LR__4047
28288     18 4E 05 F1 | 	add	fp, #24
2828c     A7 16 02 FB | 	rdlong	arg03, fp
28290     30 4E 05 F1 | 	add	fp, #48
28294     A7 1E 02 FB | 	rdlong	local01, fp
28298     48 4E 85 F1 | 	sub	fp, #72
2829c     0F 17 0A F2 | 	cmp	arg03, local01 wz
282a0     DC 00 90 AD |  if_e	jmp	#LR__4047
282a4     70 4E 05 F1 | 	add	fp, #112
282a8     A7 12 02 FB | 	rdlong	arg01, fp
282ac     09 1F 02 F6 | 	mov	local01, arg01
282b0     24 4E 05 F1 | 	add	fp, #36
282b4     A7 14 02 FB | 	rdlong	arg02, fp
282b8     94 4E 85 F1 | 	sub	fp, #148
282bc     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
282c0     FD 14 02 F6 | 	mov	arg02, result1
282c4     0F 13 02 F6 | 	mov	arg01, local01
282c8     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
282cc     98 4E 05 F1 | 	add	fp, #152
282d0     A7 FA 61 FC | 	wrlong	result1, fp
282d4     00 FA 4D F2 | 	cmps	result1, #0 wz
282d8     98 4E 85 F1 | 	sub	fp, #152
282dc     0C 4E 05 A1 |  if_e	add	fp, #12
282e0     A7 04 68 AC |  if_e	wrlong	#2, fp
282e4     0C 4E 85 A1 |  if_e	sub	fp, #12
282e8     94 00 90 AD |  if_e	jmp	#LR__4046
282ec     70 4E 05 F1 | 	add	fp, #112
282f0     A7 12 02 FB | 	rdlong	arg01, fp
282f4     28 4E 05 F1 | 	add	fp, #40
282f8     A7 14 02 FB | 	rdlong	arg02, fp
282fc     98 4E 85 F1 | 	sub	fp, #152
28300     4C A0 BF FD | 	call	#_fatfs_cc_move_window
28304     0C 4E 05 F1 | 	add	fp, #12
28308     A7 FA 61 FC | 	wrlong	result1, fp
2830c     64 4E 05 F1 | 	add	fp, #100
28310     A7 1E 02 FB | 	rdlong	local01, fp
28314     54 1E 06 F1 | 	add	local01, #84
28318     24 4E 05 F1 | 	add	fp, #36
2831c     A7 1E 62 FC | 	wrlong	local01, fp
28320     88 4E 85 F1 | 	sub	fp, #136
28324     A7 1E 0A FB | 	rdlong	local01, fp wz
28328     0C 4E 85 F1 | 	sub	fp, #12
2832c     50 00 90 5D |  if_ne	jmp	#LR__4045
28330     94 4E 05 F1 | 	add	fp, #148
28334     A7 1E 02 FB | 	rdlong	local01, fp
28338     94 4E 85 F1 | 	sub	fp, #148
2833c     01 1E 06 F1 | 	add	local01, #1
28340     0F 1F C2 FA | 	rdbyte	local01, local01
28344     2E 1E 0E F2 | 	cmp	local01, #46 wz
28348     34 00 90 5D |  if_ne	jmp	#LR__4045
2834c     70 4E 05 F1 | 	add	fp, #112
28350     A7 12 02 FB | 	rdlong	arg01, fp
28354     24 4E 05 F1 | 	add	fp, #36
28358     A7 14 02 FB | 	rdlong	arg02, fp
2835c     4C 4E 85 F1 | 	sub	fp, #76
28360     A7 16 02 FB | 	rdlong	arg03, fp
28364     48 4E 85 F1 | 	sub	fp, #72
28368     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2836c     70 4E 05 F1 | 	add	fp, #112
28370     A7 1E 02 FB | 	rdlong	local01, fp
28374     70 4E 85 F1 | 	sub	fp, #112
28378     03 1E 06 F1 | 	add	local01, #3
2837c     0F 03 48 FC | 	wrbyte	#1, local01
28380                 | LR__4045
28380                 | LR__4046
28380                 | LR__4047
28380                 | LR__4048
28380                 | LR__4049
28380     0C 4E 05 F1 | 	add	fp, #12
28384     A7 1E 0A FB | 	rdlong	local01, fp wz
28388     0C 4E 85 F1 | 	sub	fp, #12
2838c     40 00 90 5D |  if_ne	jmp	#LR__4051
28390     10 4E 05 F1 | 	add	fp, #16
28394     A7 12 02 F6 | 	mov	arg01, fp
28398     10 4E 85 F1 | 	sub	fp, #16
2839c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
283a0     0C 4E 05 F1 | 	add	fp, #12
283a4     A7 FA 61 FC | 	wrlong	result1, fp
283a8     0C 4E 85 F1 | 	sub	fp, #12
283ac     00 FA 0D F2 | 	cmp	result1, #0 wz
283b0     1C 00 90 5D |  if_ne	jmp	#LR__4050
283b4     70 4E 05 F1 | 	add	fp, #112
283b8     A7 12 02 FB | 	rdlong	arg01, fp
283bc     70 4E 85 F1 | 	sub	fp, #112
283c0     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
283c4     0C 4E 05 F1 | 	add	fp, #12
283c8     A7 FA 61 FC | 	wrlong	result1, fp
283cc     0C 4E 85 F1 | 	sub	fp, #12
283d0                 | LR__4050
283d0                 | LR__4051
283d0                 | LR__4052
283d0                 | LR__4053
283d0                 | ' 					res = sync_fs(fs);
283d0                 | ' 				}
283d0                 | ' 			}
283d0                 | ' 
283d0                 | ' 		}
283d0                 | ' 		;
283d0                 | ' 	}
283d0                 | ' 
283d0                 | ' 	return res ;
283d0     0C 4E 05 F1 | 	add	fp, #12
283d4     A7 FA 01 FB | 	rdlong	result1, fp
283d8     0C 4E 85 F1 | 	sub	fp, #12
283dc     A7 F0 03 F6 | 	mov	ptra, fp
283e0     B2 00 A0 FD | 	call	#popregs_
283e4                 | _fatfs_cc_f_rename_ret
283e4     2D 00 64 FD | 	ret
283e8                 | 
283e8                 | _fatfs_cc_time
283e8     00 4A 05 F6 | 	mov	COUNT_, #0
283ec     A8 00 A0 FD | 	call	#pushregs_
283f0     14 F0 07 F1 | 	add	ptra, #20
283f4     04 4E 05 F1 | 	add	fp, #4
283f8     A7 12 62 FC | 	wrlong	arg01, fp
283fc     04 4E 05 F1 | 	add	fp, #4
28400     A7 12 02 F6 | 	mov	arg01, fp
28404     08 4E 85 F1 | 	sub	fp, #8
28408     00 14 06 F6 | 	mov	arg02, #0
2840c     00 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
28410     08 4E 05 F1 | 	add	fp, #8
28414     A7 FA 01 FB | 	rdlong	result1, fp
28418     08 4E 05 F1 | 	add	fp, #8
2841c     A7 FA 61 FC | 	wrlong	result1, fp
28420     0C 4E 85 F1 | 	sub	fp, #12
28424     A7 FA 09 FB | 	rdlong	result1, fp wz
28428     04 4E 85 F1 | 	sub	fp, #4
2842c     18 00 90 AD |  if_e	jmp	#LR__4060
28430     04 4E 05 F1 | 	add	fp, #4
28434     A7 FA 01 FB | 	rdlong	result1, fp
28438     0C 4E 05 F1 | 	add	fp, #12
2843c     A7 14 02 FB | 	rdlong	arg02, fp
28440     10 4E 85 F1 | 	sub	fp, #16
28444     FD 14 62 FC | 	wrlong	arg02, result1
28448                 | LR__4060
28448                 | '         *tp = now;
28448                 | '     return now;
28448     10 4E 05 F1 | 	add	fp, #16
2844c     A7 FA 01 FB | 	rdlong	result1, fp
28450     10 4E 85 F1 | 	sub	fp, #16
28454     A7 F0 03 F6 | 	mov	ptra, fp
28458     B2 00 A0 FD | 	call	#popregs_
2845c                 | _fatfs_cc_time_ret
2845c     2D 00 64 FD | 	ret
28460                 | 
28460                 | _fatfs_cc_mktime
28460     06 4A 05 F6 | 	mov	COUNT_, #6
28464     A8 00 A0 FD | 	call	#pushregs_
28468     09 1F 02 F6 | 	mov	local01, arg01
2846c     14 1E 06 F1 | 	add	local01, #20
28470     0F 13 02 FB | 	rdlong	arg01, local01
28474     14 1E 86 F1 | 	sub	local01, #20
28478     46 12 56 F2 | 	cmps	arg01, #70 wc
2847c                 | '                 return (time_t) -1;
2847c     01 FA 65 C6 |  if_b	neg	result1, #1
28480     7C 01 90 CD |  if_b	jmp	#LR__4074
28484     03 00 00 FF 
28488     6C 21 06 F6 | 	mov	local02, ##1900
2848c     14 1E 06 F1 | 	add	local01, #20
28490     0F FB 01 FB | 	rdlong	result1, local01
28494     FD 20 02 F1 | 	add	local02, result1
28498     08 1E 86 F1 | 	sub	local01, #8
2849c     0F 23 02 FB | 	rdlong	local03, local01
284a0     01 22 86 F1 | 	sub	local03, #1
284a4     04 1E 06 F1 | 	add	local01, #4
284a8     0F 13 02 FB | 	rdlong	arg01, local01
284ac     10 1E 86 F1 | 	sub	local01, #16
284b0     02 12 66 F0 | 	shl	arg01, #2
284b4     02 00 00 FF 
284b8     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
284bc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
284c0     09 FB 01 FB | 	rdlong	result1, arg01
284c4     FD 22 02 F1 | 	add	local03, result1
284c8     10 13 02 F6 | 	mov	arg01, local02
284cc     02 00 00 FF 
284d0     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
284d4     E0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
284d8     00 FA 0D F2 | 	cmp	result1, #0 wz
284dc     1C 00 90 AD |  if_e	jmp	#LR__4070
284e0     00 24 06 F6 | 	mov	local04, #0
284e4     10 1E 06 F1 | 	add	local01, #16
284e8     0F FB 01 FB | 	rdlong	result1, local01
284ec     10 1E 86 F1 | 	sub	local01, #16
284f0     02 FA 55 F2 | 	cmps	result1, #2 wc
284f4     01 24 06 36 |  if_ae	mov	local04, #1
284f8     04 00 90 FD | 	jmp	#LR__4071
284fc                 | LR__4070
284fc     00 24 06 F6 | 	mov	local04, #0
28500                 | LR__4071
28500     04 1E 06 F1 | 	add	local01, #4
28504     0F FB 01 FB | 	rdlong	result1, local01
28508     04 1E 86 F1 | 	sub	local01, #4
2850c     0F 27 02 FB | 	rdlong	local05, local01
28510     08 1E 06 F1 | 	add	local01, #8
28514     0F 13 02 FB | 	rdlong	arg01, local01
28518     07 00 00 FF 
2851c     10 12 06 FD | 	qmul	arg01, ##3600
28520     12 23 02 F1 | 	add	local03, local04
28524     FD 24 02 F6 | 	mov	local04, result1
28528     04 24 66 F0 | 	shl	local04, #4
2852c     FD 24 82 F1 | 	sub	local04, result1
28530     02 24 66 F0 | 	shl	local04, #2
28534     12 27 02 F1 | 	add	local05, local04
28538     08 1E 86 F1 | 	sub	local01, #8
2853c     18 24 62 FD | 	getqx	local04
28540     A8 00 00 FF 
28544     80 23 06 FD | 	qmul	local03, ##86400
28548     12 27 02 F1 | 	add	local05, local04
2854c     10 23 02 F6 | 	mov	local03, local02
28550     03 00 00 FF 
28554     B2 23 86 F1 | 	sub	local03, ##1970
28558     18 24 62 FD | 	getqx	local04
2855c     99 F0 00 FF 
28560     80 23 06 FD | 	qmul	local03, ##31536000
28564     12 27 02 F1 | 	add	local05, local04
28568     10 23 02 F6 | 	mov	local03, local02
2856c     03 00 00 FF 
28570     B1 23 86 F1 | 	sub	local03, ##1969
28574     11 29 52 F6 | 	abs	local06, local03 wc
28578     02 28 46 F0 | 	shr	local06, #2
2857c     14 29 82 F6 | 	negc	local06, local06
28580     03 00 00 FF 
28584     D1 21 56 F2 | 	cmps	local02, ##2001 wc
28588     18 24 62 FD | 	getqx	local04
2858c     12 27 02 F1 | 	add	local05, local04
28590     18 00 90 CD |  if_b	jmp	#LR__4072
28594     03 00 00 FF 
28598     D0 21 86 F1 | 	sub	local02, ##2000
2859c     10 25 52 F6 | 	abs	local04, local02 wc
285a0     64 24 16 FD | 	qdiv	local04, #100
285a4     18 24 62 FD | 	getqx	local04
285a8     12 29 A2 F3 | 	sumnc	local06, local04
285ac                 | LR__4072
285ac     A8 00 00 FF 
285b0     80 29 06 FD | 	qmul	local06, ##86400
285b4     18 28 62 FD | 	getqx	local06
285b8     14 27 02 F1 | 	add	local05, local06
285bc     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
285c0     02 00 00 FF 
285c4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
285c8     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
285cc     14 27 02 F1 | 	add	local05, local06
285d0     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
285d4     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
285d8     02 00 00 FF 
285dc     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
285e0     01 22 0E F2 | 	cmp	local03, #1 wz
285e4     14 00 90 5D |  if_ne	jmp	#LR__4073
285e8     0F 13 02 F6 | 	mov	arg01, local01
285ec     CC 19 B0 FD | 	call	#_fatfs_cc___indst
285f0     00 FA 0D F2 | 	cmp	result1, #0 wz
285f4     07 00 00 5F 
285f8     10 26 86 51 |  if_ne	sub	local05, ##3600
285fc                 | LR__4073
285fc                 | '                 s -=  (3600L) ;
285fc                 | ' 
285fc                 | '         return s;
285fc     13 FB 01 F6 | 	mov	result1, local05
28600                 | LR__4074
28600     A7 F0 03 F6 | 	mov	ptra, fp
28604     B2 00 A0 FD | 	call	#popregs_
28608                 | _fatfs_cc_mktime_ret
28608     2D 00 64 FD | 	ret
2860c                 | 
2860c                 | _fatfs_cc__gmtime_r
2860c     03 4A 05 F6 | 	mov	COUNT_, #3
28610     A8 00 A0 FD | 	call	#pushregs_
28614     09 1F 02 FB | 	rdlong	local01, arg01
28618     A8 00 00 FF 
2861c     80 1F 16 FD | 	qdiv	local01, ##86400
28620     18 FA 61 FD | 	getqx	result1
28624     04 FA 05 F1 | 	add	result1, #4
28628     07 FA 15 FD | 	qdiv	result1, #7
2862c     18 14 06 F1 | 	add	arg02, #24
28630     D1 7F 27 FF 
28634     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
28638     D1 7F 27 3F 
2863c     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
28640     03 00 00 3F 
28644     DC 21 06 36 |  if_ae	mov	local02, ##2012
28648     03 00 00 CF 
2864c     B2 21 06 C6 |  if_b	mov	local02, ##1970
28650                 | ' 	  year = 1970;
28650                 | ' 	}
28650                 | ' 
28650                 | ' 	for(;;) {
28650     19 FA 61 FD | 	getqy	result1
28654     0A FB 61 FC | 	wrlong	result1, arg02
28658     18 14 86 F1 | 	sub	arg02, #24
2865c                 | LR__4080
2865c     10 13 02 F6 | 	mov	arg01, local02
28660     54 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
28664     00 FA 0D F2 | 	cmp	result1, #0 wz
28668     42 F1 00 5F 
2866c     00 23 06 56 |  if_ne	mov	local03, ##31622400
28670     99 F0 00 AF 
28674     80 23 06 A6 |  if_e	mov	local03, ##31536000
28678     11 1F 12 F2 | 	cmp	local01, local03 wc
2867c                 | ' 	    break;
2867c     01 20 06 31 |  if_ae	add	local02, #1
28680     11 1F 82 31 |  if_ae	sub	local01, local03
28684     D4 FF 9F 3D |  if_ae	jmp	#LR__4080
28688     A8 00 00 FF 
2868c     80 1F 16 FD | 	qdiv	local01, ##86400
28690     10 23 02 F6 | 	mov	local03, local02
28694     03 00 00 FF 
28698     6C 23 86 F1 | 	sub	local03, ##1900
2869c     14 14 06 F1 | 	add	arg02, #20
286a0     0A 23 62 FC | 	wrlong	local03, arg02
286a4     08 14 06 F1 | 	add	arg02, #8
286a8     10 13 02 F6 | 	mov	arg01, local02
286ac     18 20 62 FD | 	getqx	local02
286b0     0A 21 62 FC | 	wrlong	local02, arg02
286b4     1C 14 86 F1 | 	sub	arg02, #28
286b8     FC 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
286bc     00 FA 0D F2 | 	cmp	result1, #0 wz
286c0     1D 22 06 56 |  if_ne	mov	local03, #29
286c4     1C 22 06 A6 |  if_e	mov	local03, #28
286c8     02 00 00 FF 
286cc     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
286d0     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
286d4     02 00 00 FF 
286d8     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
286dc                 | ' 
286dc                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
286dc                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
286dc     00 12 06 F6 | 	mov	arg01, #0
286e0     97 2A 48 FB | 	callpa	#(@LR__4082-@LR__4081)>>2,fcache_load_ptr_
286e4                 | LR__4081
286e4     09 23 02 F6 | 	mov	local03, arg01
286e8     02 22 66 F0 | 	shl	local03, #2
286ec     02 00 00 FF 
286f0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
286f4     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
286f8     11 23 02 FB | 	rdlong	local03, local03
286fc     11 21 52 F2 | 	cmps	local02, local03 wc
28700     02 00 00 FF 
28704     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
28708     2C 00 90 CD |  if_b	jmp	#LR__4083
2870c     09 23 02 F6 | 	mov	local03, arg01
28710     02 22 66 F0 | 	shl	local03, #2
28714     02 00 00 FF 
28718     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2871c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
28720     11 23 02 FB | 	rdlong	local03, local03
28724     11 21 82 F1 | 	sub	local02, local03
28728     01 12 06 F1 | 	add	arg01, #1
2872c     02 00 00 FF 
28730     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
28734     AC FF 9F FD | 	jmp	#LR__4081
28738                 | LR__4082
28738                 | LR__4083
28738     A8 00 00 FF 
2873c     80 1F 16 FD | 	qdiv	local01, ##86400
28740     10 14 06 F1 | 	add	arg02, #16
28744     0A 13 62 FC | 	wrlong	arg01, arg02
28748     01 20 06 F1 | 	add	local02, #1
2874c     04 14 86 F1 | 	sub	arg02, #4
28750     0A 21 62 FC | 	wrlong	local02, arg02
28754     19 1E 62 FD | 	getqy	local01
28758     07 00 00 FF 
2875c     10 1E 16 FD | 	qdiv	local01, ##3600
28760     18 22 62 FD | 	getqx	local03
28764     07 00 00 FF 
28768     10 1E 16 FD | 	qdiv	local01, ##3600
2876c     04 14 86 F1 | 	sub	arg02, #4
28770     0A 23 62 FC | 	wrlong	local03, arg02
28774     19 1E 62 FD | 	getqy	local01
28778     3C 1E 16 FD | 	qdiv	local01, #60
2877c     18 22 62 FD | 	getqx	local03
28780     3C 1E 16 FD | 	qdiv	local01, #60
28784     04 14 86 F1 | 	sub	arg02, #4
28788     0A 23 62 FC | 	wrlong	local03, arg02
2878c     04 14 86 F1 | 	sub	arg02, #4
28790                 | '         stm->tm_isdst = 0;
28790                 | ' 
28790                 | ' ;
28790                 | '         return stm;
28790     0A FB 01 F6 | 	mov	result1, arg02
28794     19 22 62 FD | 	getqy	local03
28798     0A 23 62 FC | 	wrlong	local03, arg02
2879c     20 14 06 F1 | 	add	arg02, #32
287a0     0A 01 68 FC | 	wrlong	#0, arg02
287a4     A7 F0 03 F6 | 	mov	ptra, fp
287a8     B2 00 A0 FD | 	call	#popregs_
287ac                 | _fatfs_cc__gmtime_r_ret
287ac     2D 00 64 FD | 	ret
287b0                 | 
287b0                 | _fatfs_cc__tzset
287b0     51 01 00 FF 
287b4     E5 12 06 F6 | 	mov	arg01, ##@LR__4395
287b8     34 00 B0 FD | 	call	#_fatfs_cc_getenv
287bc     FD 12 02 F6 | 	mov	arg01, result1
287c0     02 00 00 FF 
287c4     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
287c8     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
287cc     02 00 00 FF 
287d0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
287d4     30 15 B0 FD | 	call	#_fatfs_cc___tzoffset
287d8     02 00 00 FF 
287dc     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
287e0     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
287e4     02 00 00 FF 
287e8     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
287ec                 | _fatfs_cc__tzset_ret
287ec     2D 00 64 FD | 	ret
287f0                 | 
287f0                 | _fatfs_cc_getenv
287f0     06 4A 05 F6 | 	mov	COUNT_, #6
287f4     A8 00 A0 FD | 	call	#pushregs_
287f8     09 1F 02 F6 | 	mov	local01, arg01
287fc     09 21 02 F6 | 	mov	local02, arg01
28800     97 06 48 FB | 	callpa	#(@LR__4091-@LR__4090)>>2,fcache_load_ptr_
28804                 | LR__4090
28804     10 FB C9 FA | 	rdbyte	result1, local02 wz
28808     01 20 06 51 |  if_ne	add	local02, #1
2880c     F4 FF 9F 5D |  if_ne	jmp	#LR__4090
28810                 | LR__4091
28810     09 21 82 F1 | 	sub	local02, arg01
28814     10 FB 01 F6 | 	mov	result1, local02
28818     02 00 00 FF 
2881c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
28820     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
28824     02 00 00 FF 
28828     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2882c                 | '             return 0;
2882c     00 FA 05 A6 |  if_e	mov	result1, #0
28830     5C 00 90 AD |  if_e	jmp	#LR__4094
28834                 | ' 
28834                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
28834     02 00 00 FF 
28838     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2883c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
28840     02 00 00 FF 
28844     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
28848                 | LR__4092
28848     11 25 0A FB | 	rdlong	local04, local03 wz
2884c     3C 00 90 AD |  if_e	jmp	#LR__4093
28850     12 13 02 F6 | 	mov	arg01, local04
28854     0F 15 02 F6 | 	mov	arg02, local01
28858     10 17 02 F6 | 	mov	arg03, local02
2885c     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
28860     00 FA 0D F2 | 	cmp	result1, #0 wz
28864     10 27 02 A6 |  if_e	mov	local05, local02
28868     12 27 02 A1 |  if_e	add	local05, local04
2886c     13 29 C2 AA |  if_e	rdbyte	local06, local05
28870     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
28874                 | ' 			return name+len+1;
28874     10 25 02 A1 |  if_e	add	local04, local02
28878     01 24 06 A1 |  if_e	add	local04, #1
2887c     12 FB 01 A6 |  if_e	mov	result1, local04
28880     0C 00 90 AD |  if_e	jmp	#LR__4094
28884     04 22 06 F1 | 	add	local03, #4
28888     BC FF 9F FD | 	jmp	#LR__4092
2888c                 | LR__4093
2888c                 | ' 	}
2888c                 | ' 	return 0;
2888c     00 FA 05 F6 | 	mov	result1, #0
28890                 | LR__4094
28890     A7 F0 03 F6 | 	mov	ptra, fp
28894     B2 00 A0 FD | 	call	#popregs_
28898                 | _fatfs_cc_getenv_ret
28898     2D 00 64 FD | 	ret
2889c                 | 
2889c                 | _fatfs_cc__get_fattime
2889c     00 4A 05 F6 | 	mov	COUNT_, #0
288a0     A8 00 A0 FD | 	call	#pushregs_
288a4     34 F0 07 F1 | 	add	ptra, #52
288a8     00 12 06 F6 | 	mov	arg01, #0
288ac     38 FB BF FD | 	call	#_fatfs_cc_time
288b0     04 4E 05 F1 | 	add	fp, #4
288b4     A7 FA 61 FC | 	wrlong	result1, fp
288b8     A7 12 02 F6 | 	mov	arg01, fp
288bc     0C 4E 05 F1 | 	add	fp, #12
288c0     A7 14 02 F6 | 	mov	arg02, fp
288c4     10 4E 85 F1 | 	sub	fp, #16
288c8     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
288cc     24 4E 05 F1 | 	add	fp, #36
288d0     A7 14 02 FB | 	rdlong	arg02, fp
288d4     50 14 86 F1 | 	sub	arg02, #80
288d8     09 14 66 F0 | 	shl	arg02, #9
288dc     04 4E 85 F1 | 	sub	fp, #4
288e0     A7 FA 01 FB | 	rdlong	result1, fp
288e4     01 FA 05 F1 | 	add	result1, #1
288e8     05 FA 65 F0 | 	shl	result1, #5
288ec     FD 14 42 F5 | 	or	arg02, result1
288f0     04 4E 85 F1 | 	sub	fp, #4
288f4     A7 FA 01 FB | 	rdlong	result1, fp
288f8     FD 14 42 F5 | 	or	arg02, result1
288fc     14 4E 85 F1 | 	sub	fp, #20
28900     A7 14 62 FC | 	wrlong	arg02, fp
28904     10 4E 05 F1 | 	add	fp, #16
28908     A7 14 02 FB | 	rdlong	arg02, fp
2890c     0B 14 66 F0 | 	shl	arg02, #11
28910     04 4E 85 F1 | 	sub	fp, #4
28914     A7 FA 01 FB | 	rdlong	result1, fp
28918     05 FA 65 F0 | 	shl	result1, #5
2891c     FD 14 42 F5 | 	or	arg02, result1
28920     04 4E 85 F1 | 	sub	fp, #4
28924     A7 FA 01 FB | 	rdlong	result1, fp
28928     FD 14 42 F5 | 	or	arg02, result1
2892c     04 4E 85 F1 | 	sub	fp, #4
28930     A7 14 62 FC | 	wrlong	arg02, fp
28934                 | ' 
28934                 | '     now = time(0);
28934                 | '     _gmtime_r (&now, &date);
28934                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
28934                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
28934                 | '     return (ffdate << 16) | fftime;
28934     04 4E 85 F1 | 	sub	fp, #4
28938     A7 FA 01 FB | 	rdlong	result1, fp
2893c     10 FA 65 F0 | 	shl	result1, #16
28940     08 4E 85 F1 | 	sub	fp, #8
28944     0A FB 41 F5 | 	or	result1, arg02
28948     A7 F0 03 F6 | 	mov	ptra, fp
2894c     B2 00 A0 FD | 	call	#popregs_
28950                 | _fatfs_cc__get_fattime_ret
28950     2D 00 64 FD | 	ret
28954                 | 
28954                 | _fatfs_cc_unixtime_0862
28954     00 4A 05 F6 | 	mov	COUNT_, #0
28958     A8 00 A0 FD | 	call	#pushregs_
2895c     34 F0 07 F1 | 	add	ptra, #52
28960     04 4E 05 F1 | 	add	fp, #4
28964     A7 12 62 FC | 	wrlong	arg01, fp
28968     04 4E 05 F1 | 	add	fp, #4
2896c     A7 14 62 FC | 	wrlong	arg02, fp
28970     04 4E 85 F1 | 	sub	fp, #4
28974     A7 14 02 FB | 	rdlong	arg02, fp
28978     09 14 46 F0 | 	shr	arg02, #9
2897c     7F 14 06 F5 | 	and	arg02, #127
28980     50 FA 05 F6 | 	mov	result1, #80
28984     0A FB 01 F1 | 	add	result1, arg02
28988     20 4E 05 F1 | 	add	fp, #32
2898c     A7 FA 61 FC | 	wrlong	result1, fp
28990     20 4E 85 F1 | 	sub	fp, #32
28994     A7 FA 01 FB | 	rdlong	result1, fp
28998     05 FA 45 F0 | 	shr	result1, #5
2899c     FD FA 41 F8 | 	getnib	result1, result1, #0
289a0     01 FA 85 F1 | 	sub	result1, #1
289a4     1C 4E 05 F1 | 	add	fp, #28
289a8     A7 FA 61 FC | 	wrlong	result1, fp
289ac     1C 4E 85 F1 | 	sub	fp, #28
289b0     A7 FA 01 FB | 	rdlong	result1, fp
289b4     1F FA 05 F5 | 	and	result1, #31
289b8     18 4E 05 F1 | 	add	fp, #24
289bc     A7 FA 61 FC | 	wrlong	result1, fp
289c0     14 4E 85 F1 | 	sub	fp, #20
289c4     A7 FA 01 FB | 	rdlong	result1, fp
289c8     0B FA 45 F0 | 	shr	result1, #11
289cc     1F FA 05 F5 | 	and	result1, #31
289d0     10 4E 05 F1 | 	add	fp, #16
289d4     A7 FA 61 FC | 	wrlong	result1, fp
289d8     10 4E 85 F1 | 	sub	fp, #16
289dc     A7 FA 01 FB | 	rdlong	result1, fp
289e0     05 FA 45 F0 | 	shr	result1, #5
289e4     3F FA 05 F5 | 	and	result1, #63
289e8     0C 4E 05 F1 | 	add	fp, #12
289ec     A7 FA 61 FC | 	wrlong	result1, fp
289f0     0C 4E 85 F1 | 	sub	fp, #12
289f4     A7 14 02 FB | 	rdlong	arg02, fp
289f8     1F 14 06 F5 | 	and	arg02, #31
289fc     01 14 66 F0 | 	shl	arg02, #1
28a00     08 4E 05 F1 | 	add	fp, #8
28a04     A7 14 62 FC | 	wrlong	arg02, fp
28a08     A7 12 02 F6 | 	mov	arg01, fp
28a0c     10 4E 85 F1 | 	sub	fp, #16
28a10     4C FA BF FD | 	call	#_fatfs_cc_mktime
28a14     0C 4E 05 F1 | 	add	fp, #12
28a18     A7 FA 61 FC | 	wrlong	result1, fp
28a1c                 | ' 
28a1c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
28a1c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
28a1c                 | '     date.tm_mday = (dosdate & 0x1f);
28a1c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
28a1c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
28a1c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
28a1c                 | ' 
28a1c                 | '     t = mktime(&date);
28a1c                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
28a1c                 | '     return t;
28a1c     0C 4E 85 F1 | 	sub	fp, #12
28a20     A7 F0 03 F6 | 	mov	ptra, fp
28a24     B2 00 A0 FD | 	call	#popregs_
28a28                 | _fatfs_cc_unixtime_0862_ret
28a28     2D 00 64 FD | 	ret
28a2c                 | 
28a2c                 | _fatfs_cc__set_dos_error_0864
28a2c     09 01 02 F6 | 	mov	_var01, arg01
28a30                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
28a30                 | '     switch (derr) {
28a30     14 00 26 F3 | 	fle	_var01, #20
28a34     30 00 62 FD | 	jmprel	_var01
28a38                 | LR__4100
28a38     50 00 90 FD | 	jmp	#LR__4101
28a3c     84 00 90 FD | 	jmp	#LR__4115
28a40     80 00 90 FD | 	jmp	#LR__4116
28a44     7C 00 90 FD | 	jmp	#LR__4117
28a48     48 00 90 FD | 	jmp	#LR__4102
28a4c     44 00 90 FD | 	jmp	#LR__4103
28a50     40 00 90 FD | 	jmp	#LR__4104
28a54     44 00 90 FD | 	jmp	#LR__4105
28a58     48 00 90 FD | 	jmp	#LR__4107
28a5c     54 00 90 FD | 	jmp	#LR__4110
28a60     38 00 90 FD | 	jmp	#LR__4106
28a64     4C 00 90 FD | 	jmp	#LR__4111
28a68     48 00 90 FD | 	jmp	#LR__4112
28a6c     44 00 90 FD | 	jmp	#LR__4113
28a70     50 00 90 FD | 	jmp	#LR__4118
28a74     4C 00 90 FD | 	jmp	#LR__4118
28a78     48 00 90 FD | 	jmp	#LR__4118
28a7c     2C 00 90 FD | 	jmp	#LR__4108
28a80     38 00 90 FD | 	jmp	#LR__4114
28a84     2C 00 90 FD | 	jmp	#LR__4109
28a88     38 00 90 FD | 	jmp	#LR__4118
28a8c                 | LR__4101
28a8c     00 02 06 F6 | 	mov	_var02, #0
28a90                 | '         r = 0;
28a90                 | '         break;
28a90     34 00 90 FD | 	jmp	#LR__4119
28a94                 | LR__4102
28a94                 | LR__4103
28a94                 | LR__4104
28a94     04 02 06 F6 | 	mov	_var02, #4
28a98                 | '         r =  4 ;
28a98                 | '         break;
28a98     2C 00 90 FD | 	jmp	#LR__4119
28a9c                 | LR__4105
28a9c                 | LR__4106
28a9c     06 02 06 F6 | 	mov	_var02, #6
28aa0                 | '         r =  6 ;
28aa0                 | '         break;
28aa0     24 00 90 FD | 	jmp	#LR__4119
28aa4                 | LR__4107
28aa4     09 02 06 F6 | 	mov	_var02, #9
28aa8                 | '         r =  9 ;
28aa8                 | '         break;
28aa8     1C 00 90 FD | 	jmp	#LR__4119
28aac                 | LR__4108
28aac     07 02 06 F6 | 	mov	_var02, #7
28ab0                 | '         r =  7 ;
28ab0                 | '         break;
28ab0     14 00 90 FD | 	jmp	#LR__4119
28ab4                 | LR__4109
28ab4                 | LR__4110
28ab4                 | LR__4111
28ab4                 | LR__4112
28ab4                 | LR__4113
28ab4     0A 02 06 F6 | 	mov	_var02, #10
28ab8                 | '         r =  10 ;
28ab8                 | '         break;
28ab8     0C 00 90 FD | 	jmp	#LR__4119
28abc                 | LR__4114
28abc     0B 02 06 F6 | 	mov	_var02, #11
28ac0                 | '         r =  11 ;
28ac0                 | '         break;
28ac0     04 00 90 FD | 	jmp	#LR__4119
28ac4                 | LR__4115
28ac4                 | LR__4116
28ac4                 | LR__4117
28ac4                 | LR__4118
28ac4     0C 02 06 F6 | 	mov	_var02, #12
28ac8                 | '         r =  12 ;
28ac8                 | '         break;
28ac8                 | LR__4119
28ac8                 | '     }
28ac8                 | '     return _seterror(r);
28ac8     00 02 4E F2 | 	cmps	_var02, #0 wz
28acc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28ad0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
28ad4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28ad8     01 FA 65 56 |  if_ne	neg	result1, #1
28adc     00 FA 05 A6 |  if_e	mov	result1, #0
28ae0                 | _fatfs_cc__set_dos_error_0864_ret
28ae0     2D 00 64 FD | 	ret
28ae4                 | 
28ae4                 | _fatfs_cc_v_creat
28ae4     04 4A 05 F6 | 	mov	COUNT_, #4
28ae8     A8 00 A0 FD | 	call	#pushregs_
28aec     09 1F 02 F6 | 	mov	local01, arg01
28af0     0A 21 02 F6 | 	mov	local02, arg02
28af4     03 00 00 FF 
28af8     3C 12 06 F6 | 	mov	arg01, ##1596
28afc                 | '     return _gc_alloc(size);
28afc     10 14 06 F6 | 	mov	arg02, #16
28b00     34 60 BF FD | 	call	#__system___gc_doalloc
28b04     FD 22 0A F6 | 	mov	local03, result1 wz
28b08                 | '       return _seterror( 7 );
28b08     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28b0c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28b10     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28b14     01 FA 65 A6 |  if_e	neg	result1, #1
28b18     58 00 90 AD |  if_e	jmp	#LR__4121
28b1c     11 13 02 F6 | 	mov	arg01, local03
28b20     00 14 06 F6 | 	mov	arg02, #0
28b24     03 00 00 FF 
28b28     3C 16 06 F6 | 	mov	arg03, ##1596
28b2c     98 00 A0 FD | 	call	#\builtin_bytefill_
28b30     02 00 00 FF 
28b34     14 22 06 F1 | 	add	local03, ##1044
28b38     11 13 02 F6 | 	mov	arg01, local03
28b3c     02 00 00 FF 
28b40     14 22 86 F1 | 	sub	local03, ##1044
28b44     10 15 02 F6 | 	mov	arg02, local02
28b48     07 16 06 F6 | 	mov	arg03, #7
28b4c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
28b50     FD 24 0A F6 | 	mov	local04, result1 wz
28b54     14 00 90 AD |  if_e	jmp	#LR__4120
28b58     11 13 02 F6 | 	mov	arg01, local03
28b5c                 | '     return _gc_free(ptr);
28b5c     E4 60 BF FD | 	call	#__system___gc_free
28b60                 | '     free(f);
28b60                 | '     return _set_dos_error(r);
28b60     12 13 02 F6 | 	mov	arg01, local04
28b64     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28b68     08 00 90 FD | 	jmp	#LR__4121
28b6c                 | LR__4120
28b6c     0F 23 62 FC | 	wrlong	local03, local01
28b70                 | '   }
28b70                 | '   fil->vfsdata = f;
28b70                 | '   return 0;
28b70     00 FA 05 F6 | 	mov	result1, #0
28b74                 | LR__4121
28b74     A7 F0 03 F6 | 	mov	ptra, fp
28b78     B2 00 A0 FD | 	call	#popregs_
28b7c                 | _fatfs_cc_v_creat_ret
28b7c     2D 00 64 FD | 	ret
28b80                 | 
28b80                 | _fatfs_cc_v_close
28b80     02 4A 05 F6 | 	mov	COUNT_, #2
28b84     A8 00 A0 FD | 	call	#pushregs_
28b88     09 1F 02 FB | 	rdlong	local01, arg01
28b8c     02 00 00 FF 
28b90     14 1E 06 F1 | 	add	local01, ##1044
28b94     0F 13 02 F6 | 	mov	arg01, local01
28b98     02 00 00 FF 
28b9c     14 1E 86 F1 | 	sub	local01, ##1044
28ba0     DC E3 BF FD | 	call	#_fatfs_cc_f_close
28ba4     FD 20 02 F6 | 	mov	local02, result1
28ba8     0F 13 02 F6 | 	mov	arg01, local01
28bac                 | '     return _gc_free(ptr);
28bac     94 60 BF FD | 	call	#__system___gc_free
28bb0                 | '     FAT_FIL *f = fil->vfsdata;
28bb0                 | '     r=f_close(&f->fil);
28bb0                 | '     free(f);
28bb0                 | '     return _set_dos_error(r);
28bb0     10 13 02 F6 | 	mov	arg01, local02
28bb4     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28bb8     A7 F0 03 F6 | 	mov	ptra, fp
28bbc     B2 00 A0 FD | 	call	#popregs_
28bc0                 | _fatfs_cc_v_close_ret
28bc0     2D 00 64 FD | 	ret
28bc4                 | 
28bc4                 | _fatfs_cc_v_opendir
28bc4     04 4A 05 F6 | 	mov	COUNT_, #4
28bc8     A8 00 A0 FD | 	call	#pushregs_
28bcc     09 1F 02 F6 | 	mov	local01, arg01
28bd0     0A 21 02 F6 | 	mov	local02, arg02
28bd4     30 12 06 F6 | 	mov	arg01, #48
28bd8                 | '     return _gc_alloc(size);
28bd8     10 14 06 F6 | 	mov	arg02, #16
28bdc     58 5F BF FD | 	call	#__system___gc_doalloc
28be0     FD 22 0A F6 | 	mov	local03, result1 wz
28be4                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
28be4                 | '       return _seterror( 7 );
28be4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28be8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28bec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28bf0     01 FA 65 A6 |  if_e	neg	result1, #1
28bf4     34 00 90 AD |  if_e	jmp	#LR__4131
28bf8     10 15 02 F6 | 	mov	arg02, local02
28bfc     11 13 02 F6 | 	mov	arg01, local03
28c00     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
28c04     FD 24 0A F6 | 	mov	local04, result1 wz
28c08     14 00 90 AD |  if_e	jmp	#LR__4130
28c0c     11 13 02 F6 | 	mov	arg01, local03
28c10                 | '     return _gc_free(ptr);
28c10     30 60 BF FD | 	call	#__system___gc_free
28c14                 | '         free(f);
28c14                 | '         return _set_dos_error(r);
28c14     12 13 02 F6 | 	mov	arg01, local04
28c18     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28c1c     0C 00 90 FD | 	jmp	#LR__4131
28c20                 | LR__4130
28c20     04 1E 06 F1 | 	add	local01, #4
28c24     0F 23 62 FC | 	wrlong	local03, local01
28c28                 | '     }
28c28                 | '     dir->vfsdata = f;
28c28                 | '     return 0;
28c28     00 FA 05 F6 | 	mov	result1, #0
28c2c                 | LR__4131
28c2c     A7 F0 03 F6 | 	mov	ptra, fp
28c30     B2 00 A0 FD | 	call	#popregs_
28c34                 | _fatfs_cc_v_opendir_ret
28c34     2D 00 64 FD | 	ret
28c38                 | 
28c38                 | _fatfs_cc_v_closedir
28c38     02 4A 05 F6 | 	mov	COUNT_, #2
28c3c     A8 00 A0 FD | 	call	#pushregs_
28c40     04 12 06 F1 | 	add	arg01, #4
28c44     09 1F 02 FB | 	rdlong	local01, arg01
28c48     0F 13 02 F6 | 	mov	arg01, local01
28c4c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
28c50     FD 20 02 F6 | 	mov	local02, result1
28c54     0F 13 02 F6 | 	mov	arg01, local01
28c58                 | '     return _gc_free(ptr);
28c58     E8 5F BF FD | 	call	#__system___gc_free
28c5c     00 20 0E F2 | 	cmp	local02, #0 wz
28c60     10 13 02 56 |  if_ne	mov	arg01, local02
28c64     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0864
28c68                 | '     return r;
28c68     10 FB 01 F6 | 	mov	result1, local02
28c6c     A7 F0 03 F6 | 	mov	ptra, fp
28c70     B2 00 A0 FD | 	call	#popregs_
28c74                 | _fatfs_cc_v_closedir_ret
28c74     2D 00 64 FD | 	ret
28c78                 | 
28c78                 | _fatfs_cc_v_readdir
28c78     01 4A 05 F6 | 	mov	COUNT_, #1
28c7c     A8 00 A0 FD | 	call	#pushregs_
28c80     2C F1 07 F1 | 	add	ptra, #300
28c84     04 4E 05 F1 | 	add	fp, #4
28c88     A7 12 62 FC | 	wrlong	arg01, fp
28c8c     04 4E 05 F1 | 	add	fp, #4
28c90     A7 14 62 FC | 	wrlong	arg02, fp
28c94     04 4E 85 F1 | 	sub	fp, #4
28c98     A7 16 02 FB | 	rdlong	arg03, fp
28c9c     04 16 06 F1 | 	add	arg03, #4
28ca0     0B 13 02 FB | 	rdlong	arg01, arg03
28ca4     08 4E 05 F1 | 	add	fp, #8
28ca8     A7 14 02 F6 | 	mov	arg02, fp
28cac     0C 4E 85 F1 | 	sub	fp, #12
28cb0     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
28cb4     28 4F 05 F1 | 	add	fp, #296
28cb8     A7 FA 61 FC | 	wrlong	result1, fp
28cbc     28 4F 85 F1 | 	sub	fp, #296
28cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
28cc4     14 00 90 AD |  if_e	jmp	#LR__4140
28cc8                 | '         return _set_dos_error(r);
28cc8     28 4F 05 F1 | 	add	fp, #296
28ccc     A7 12 02 FB | 	rdlong	arg01, fp
28cd0     28 4F 85 F1 | 	sub	fp, #296
28cd4     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28cd8     C4 00 90 FD | 	jmp	#LR__4143
28cdc                 | LR__4140
28cdc     28 4E 05 F1 | 	add	fp, #40
28ce0     A7 16 CA FA | 	rdbyte	arg03, fp wz
28ce4     28 4E 85 F1 | 	sub	fp, #40
28ce8                 | '         return -1;
28ce8     01 FA 65 A6 |  if_e	neg	result1, #1
28cec     B0 00 90 AD |  if_e	jmp	#LR__4143
28cf0     08 4E 05 F1 | 	add	fp, #8
28cf4     A7 12 02 FB | 	rdlong	arg01, fp
28cf8     20 4E 05 F1 | 	add	fp, #32
28cfc     A7 14 02 F6 | 	mov	arg02, fp
28d00     28 4E 85 F1 | 	sub	fp, #40
28d04     3F 16 06 F6 | 	mov	arg03, #63
28d08     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
28d0c     08 4E 05 F1 | 	add	fp, #8
28d10     A7 16 02 FB | 	rdlong	arg03, fp
28d14     3F 16 06 F1 | 	add	arg03, #63
28d18     0B 01 48 FC | 	wrbyte	#0, arg03
28d1c     0C 4E 05 F1 | 	add	fp, #12
28d20     A7 16 C2 FA | 	rdbyte	arg03, fp
28d24     14 4E 85 F1 | 	sub	fp, #20
28d28     10 16 CE F7 | 	test	arg03, #16 wz
28d2c     18 00 90 AD |  if_e	jmp	#LR__4141
28d30     08 4E 05 F1 | 	add	fp, #8
28d34     A7 16 02 FB | 	rdlong	arg03, fp
28d38     08 4E 85 F1 | 	sub	fp, #8
28d3c     50 16 06 F1 | 	add	arg03, #80
28d40     0B 03 48 FC | 	wrbyte	#1, arg03
28d44     14 00 90 FD | 	jmp	#LR__4142
28d48                 | LR__4141
28d48     08 4E 05 F1 | 	add	fp, #8
28d4c     A7 16 02 FB | 	rdlong	arg03, fp
28d50     08 4E 85 F1 | 	sub	fp, #8
28d54     50 16 06 F1 | 	add	arg03, #80
28d58     0B 01 48 FC | 	wrbyte	#0, arg03
28d5c                 | LR__4142
28d5c     08 4E 05 F1 | 	add	fp, #8
28d60     A7 16 02 FB | 	rdlong	arg03, fp
28d64     04 4E 05 F1 | 	add	fp, #4
28d68     A7 14 02 FB | 	rdlong	arg02, fp
28d6c     48 16 06 F1 | 	add	arg03, #72
28d70     0B 15 62 FC | 	wrlong	arg02, arg03
28d74     04 4E 85 F1 | 	sub	fp, #4
28d78     A7 1E 02 FB | 	rdlong	local01, fp
28d7c     08 4E 05 F1 | 	add	fp, #8
28d80     A7 12 E2 FA | 	rdword	arg01, fp
28d84     02 4E 05 F1 | 	add	fp, #2
28d88     A7 14 E2 FA | 	rdword	arg02, fp
28d8c     12 4E 85 F1 | 	sub	fp, #18
28d90     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0862
28d94     4C 1E 06 F1 | 	add	local01, #76
28d98     0F FB 61 FC | 	wrlong	result1, local01
28d9c                 | '         ent->d_type =  (0) ;
28d9c                 | '     }
28d9c                 | '     ent->d_size = finfo.fsize;
28d9c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
28d9c                 | '     return 0;
28d9c     00 FA 05 F6 | 	mov	result1, #0
28da0                 | LR__4143
28da0     A7 F0 03 F6 | 	mov	ptra, fp
28da4     B2 00 A0 FD | 	call	#popregs_
28da8                 | _fatfs_cc_v_readdir_ret
28da8     2D 00 64 FD | 	ret
28dac                 | 
28dac                 | _fatfs_cc_v_stat
28dac     03 4A 05 F6 | 	mov	COUNT_, #3
28db0     A8 00 A0 FD | 	call	#pushregs_
28db4     30 F1 07 F1 | 	add	ptra, #304
28db8     04 4E 05 F1 | 	add	fp, #4
28dbc     A7 12 62 FC | 	wrlong	arg01, fp
28dc0     04 4E 05 F1 | 	add	fp, #4
28dc4     A7 14 62 FC | 	wrlong	arg02, fp
28dc8     08 4E 85 F1 | 	sub	fp, #8
28dcc     0A 13 02 F6 | 	mov	arg01, arg02
28dd0     00 14 06 F6 | 	mov	arg02, #0
28dd4     30 16 06 F6 | 	mov	arg03, #48
28dd8     98 00 A0 FD | 	call	#\builtin_bytefill_
28ddc     04 4E 05 F1 | 	add	fp, #4
28de0     A7 FA 01 FB | 	rdlong	result1, fp
28de4     04 4E 85 F1 | 	sub	fp, #4
28de8     FD FA C9 FA | 	rdbyte	result1, result1 wz
28dec     2C 00 90 AD |  if_e	jmp	#LR__4150
28df0     04 4E 05 F1 | 	add	fp, #4
28df4     A7 FA 01 FB | 	rdlong	result1, fp
28df8     04 4E 85 F1 | 	sub	fp, #4
28dfc     FD FA C1 FA | 	rdbyte	result1, result1
28e00     2E FA 0D F2 | 	cmp	result1, #46 wz
28e04     04 4E 05 A1 |  if_e	add	fp, #4
28e08     A7 1E 02 AB |  if_e	rdlong	local01, fp
28e0c     04 4E 85 A1 |  if_e	sub	fp, #4
28e10     01 1E 06 A1 |  if_e	add	local01, #1
28e14     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
28e18     18 00 90 5D |  if_ne	jmp	#LR__4151
28e1c                 | LR__4150
28e1c     18 4E 05 F1 | 	add	fp, #24
28e20     A7 20 48 FC | 	wrbyte	#16, fp
28e24     0C 4E 85 F1 | 	sub	fp, #12
28e28     A7 00 68 FC | 	wrlong	#0, fp
28e2c     0C 4E 85 F1 | 	sub	fp, #12
28e30     24 00 90 FD | 	jmp	#LR__4152
28e34                 | LR__4151
28e34     04 4E 05 F1 | 	add	fp, #4
28e38     A7 12 02 FB | 	rdlong	arg01, fp
28e3c     0C 4E 05 F1 | 	add	fp, #12
28e40     A7 14 02 F6 | 	mov	arg02, fp
28e44     10 4E 85 F1 | 	sub	fp, #16
28e48     AC EB BF FD | 	call	#_fatfs_cc_f_stat
28e4c     0C 4E 05 F1 | 	add	fp, #12
28e50     A7 FA 61 FC | 	wrlong	result1, fp
28e54     0C 4E 85 F1 | 	sub	fp, #12
28e58                 | LR__4152
28e58     0C 4E 05 F1 | 	add	fp, #12
28e5c     A7 20 0A FB | 	rdlong	local02, fp wz
28e60     0C 4E 85 F1 | 	sub	fp, #12
28e64     14 00 90 AD |  if_e	jmp	#LR__4153
28e68                 | '         return _set_dos_error(r);
28e68     0C 4E 05 F1 | 	add	fp, #12
28e6c     A7 12 02 FB | 	rdlong	arg01, fp
28e70     0C 4E 85 F1 | 	sub	fp, #12
28e74     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0864
28e78     14 01 90 FD | 	jmp	#LR__4154
28e7c                 | LR__4153
28e7c     2C 4F 05 F1 | 	add	fp, #300
28e80     A7 48 6A FC | 	wrlong	#292, fp
28e84     14 4F 85 F1 | 	sub	fp, #276
28e88     A7 22 C2 FA | 	rdbyte	local03, fp
28e8c     18 4E 85 F1 | 	sub	fp, #24
28e90     01 22 CE F7 | 	test	local03, #1 wz
28e94     2C 4F 05 A1 |  if_e	add	fp, #300
28e98     A7 22 02 AB |  if_e	rdlong	local03, fp
28e9c     92 22 46 A5 |  if_e	or	local03, #146
28ea0     A7 22 62 AC |  if_e	wrlong	local03, fp
28ea4     2C 4F 85 A1 |  if_e	sub	fp, #300
28ea8     18 4E 05 F1 | 	add	fp, #24
28eac     A7 22 C2 FA | 	rdbyte	local03, fp
28eb0     18 4E 85 F1 | 	sub	fp, #24
28eb4     10 22 CE F7 | 	test	local03, #16 wz
28eb8     2C 4F 05 51 |  if_ne	add	fp, #300
28ebc     A7 22 02 5B |  if_ne	rdlong	local03, fp
28ec0     08 00 00 5F 
28ec4     49 22 46 55 |  if_ne	or	local03, ##4169
28ec8     A7 22 62 5C |  if_ne	wrlong	local03, fp
28ecc     2C 4F 85 51 |  if_ne	sub	fp, #300
28ed0     08 4E 05 F1 | 	add	fp, #8
28ed4     A7 22 02 FB | 	rdlong	local03, fp
28ed8     24 4F 05 F1 | 	add	fp, #292
28edc     A7 20 02 FB | 	rdlong	local02, fp
28ee0     08 22 06 F1 | 	add	local03, #8
28ee4     11 21 62 FC | 	wrlong	local02, local03
28ee8     24 4F 85 F1 | 	sub	fp, #292
28eec     A7 22 02 FB | 	rdlong	local03, fp
28ef0     0C 22 06 F1 | 	add	local03, #12
28ef4     11 03 68 FC | 	wrlong	#1, local03
28ef8     A7 22 02 FB | 	rdlong	local03, fp
28efc     08 4E 05 F1 | 	add	fp, #8
28f00     A7 20 02 FB | 	rdlong	local02, fp
28f04     18 22 06 F1 | 	add	local03, #24
28f08     11 21 62 FC | 	wrlong	local02, local03
28f0c     08 4E 85 F1 | 	sub	fp, #8
28f10     A7 22 02 FB | 	rdlong	local03, fp
28f14     1C 22 06 F1 | 	add	local03, #28
28f18     01 00 80 FF 
28f1c     11 01 68 FC | 	wrlong	##512, local03
28f20     A7 20 02 FB | 	rdlong	local02, fp
28f24     10 23 02 F6 | 	mov	local03, local02
28f28     18 20 06 F1 | 	add	local02, #24
28f2c     10 21 02 FB | 	rdlong	local02, local02
28f30     FF 21 06 F1 | 	add	local02, #511
28f34     10 21 52 F6 | 	abs	local02, local02 wc
28f38     09 20 46 F0 | 	shr	local02, #9
28f3c     10 21 82 F6 | 	negc	local02, local02
28f40     20 22 06 F1 | 	add	local03, #32
28f44     11 21 62 FC | 	wrlong	local02, local03
28f48     A7 20 02 FB | 	rdlong	local02, fp
28f4c     10 23 02 F6 | 	mov	local03, local02
28f50     10 1F 02 F6 | 	mov	local01, local02
28f54     0C 4E 05 F1 | 	add	fp, #12
28f58     A7 12 E2 FA | 	rdword	arg01, fp
28f5c     02 4E 05 F1 | 	add	fp, #2
28f60     A7 14 E2 FA | 	rdword	arg02, fp
28f64     16 4E 85 F1 | 	sub	fp, #22
28f68     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0862
28f6c     2C 1E 06 F1 | 	add	local01, #44
28f70     0F FB 61 FC | 	wrlong	result1, local01
28f74     28 20 06 F1 | 	add	local02, #40
28f78     10 FB 61 FC | 	wrlong	result1, local02
28f7c     24 22 06 F1 | 	add	local03, #36
28f80     11 FB 61 FC | 	wrlong	result1, local03
28f84                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
28f84                 | '     }
28f84                 | '     buf->st_mode = mode;
28f84                 | '     buf->st_nlink = 1;
28f84                 | '     buf->st_size = finfo.fsize;
28f84                 | '     buf->st_blksize = 512;
28f84                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
28f84                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
28f84                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
28f84                 | '     return r;
28f84     0C 4E 05 F1 | 	add	fp, #12
28f88     A7 FA 01 FB | 	rdlong	result1, fp
28f8c     0C 4E 85 F1 | 	sub	fp, #12
28f90                 | LR__4154
28f90     A7 F0 03 F6 | 	mov	ptra, fp
28f94     B2 00 A0 FD | 	call	#popregs_
28f98                 | _fatfs_cc_v_stat_ret
28f98     2D 00 64 FD | 	ret
28f9c                 | 
28f9c                 | _fatfs_cc_v_read
28f9c     00 4A 05 F6 | 	mov	COUNT_, #0
28fa0     A8 00 A0 FD | 	call	#pushregs_
28fa4     1C F0 07 F1 | 	add	ptra, #28
28fa8     04 4E 05 F1 | 	add	fp, #4
28fac     A7 12 62 FC | 	wrlong	arg01, fp
28fb0     04 4E 05 F1 | 	add	fp, #4
28fb4     A7 14 62 FC | 	wrlong	arg02, fp
28fb8     04 4E 05 F1 | 	add	fp, #4
28fbc     A7 16 62 FC | 	wrlong	arg03, fp
28fc0     08 4E 85 F1 | 	sub	fp, #8
28fc4     A7 12 02 FB | 	rdlong	arg01, fp
28fc8     09 13 0A FB | 	rdlong	arg01, arg01 wz
28fcc     0C 4E 05 F1 | 	add	fp, #12
28fd0     A7 12 62 FC | 	wrlong	arg01, fp
28fd4     10 4E 85 F1 | 	sub	fp, #16
28fd8                 | '         return _seterror( 5 );
28fd8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28fdc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28fe0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28fe4     01 FA 65 A6 |  if_e	neg	result1, #1
28fe8     B8 00 90 AD |  if_e	jmp	#LR__4162
28fec     10 4E 05 F1 | 	add	fp, #16
28ff0     A7 12 02 FB | 	rdlong	arg01, fp
28ff4     02 00 00 FF 
28ff8     14 12 06 F1 | 	add	arg01, ##1044
28ffc     08 4E 85 F1 | 	sub	fp, #8
29000     A7 14 02 FB | 	rdlong	arg02, fp
29004     04 4E 05 F1 | 	add	fp, #4
29008     A7 16 02 FB | 	rdlong	arg03, fp
2900c     0C 4E 05 F1 | 	add	fp, #12
29010     A7 18 02 F6 | 	mov	arg04, fp
29014     18 4E 85 F1 | 	sub	fp, #24
29018     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2901c     14 4E 05 F1 | 	add	fp, #20
29020     A7 FA 61 FC | 	wrlong	result1, fp
29024     14 4E 85 F1 | 	sub	fp, #20
29028     00 FA 0D F2 | 	cmp	result1, #0 wz
2902c     34 00 90 AD |  if_e	jmp	#LR__4160
29030     04 4E 05 F1 | 	add	fp, #4
29034     A7 18 02 FB | 	rdlong	arg04, fp
29038     0C 17 02 F6 | 	mov	arg03, arg04
2903c     08 18 06 F1 | 	add	arg04, #8
29040     0C 19 02 FB | 	rdlong	arg04, arg04
29044     20 18 46 F5 | 	or	arg04, #32
29048     08 16 06 F1 | 	add	arg03, #8
2904c     0B 19 62 FC | 	wrlong	arg04, arg03
29050                 | '         fil->state |=  (0x20) ;
29050                 | '         return _set_dos_error(r);
29050     10 4E 05 F1 | 	add	fp, #16
29054     A7 12 02 FB | 	rdlong	arg01, fp
29058     14 4E 85 F1 | 	sub	fp, #20
2905c     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29060     40 00 90 FD | 	jmp	#LR__4162
29064                 | LR__4160
29064     18 4E 05 F1 | 	add	fp, #24
29068     A7 FA 09 FB | 	rdlong	result1, fp wz
2906c     18 4E 85 F1 | 	sub	fp, #24
29070     24 00 90 5D |  if_ne	jmp	#LR__4161
29074     04 4E 05 F1 | 	add	fp, #4
29078     A7 FA 01 FB | 	rdlong	result1, fp
2907c     FD 18 02 F6 | 	mov	arg04, result1
29080     04 4E 85 F1 | 	sub	fp, #4
29084     08 FA 05 F1 | 	add	result1, #8
29088     FD FA 01 FB | 	rdlong	result1, result1
2908c     10 FA 45 F5 | 	or	result1, #16
29090     08 18 06 F1 | 	add	arg04, #8
29094     0C FB 61 FC | 	wrlong	result1, arg04
29098                 | LR__4161
29098                 | '         fil->state |=  (0x10) ;
29098                 | '     }
29098                 | '     return x;
29098     18 4E 05 F1 | 	add	fp, #24
2909c     A7 FA 01 FB | 	rdlong	result1, fp
290a0     18 4E 85 F1 | 	sub	fp, #24
290a4                 | LR__4162
290a4     A7 F0 03 F6 | 	mov	ptra, fp
290a8     B2 00 A0 FD | 	call	#popregs_
290ac                 | _fatfs_cc_v_read_ret
290ac     2D 00 64 FD | 	ret
290b0                 | 
290b0                 | _fatfs_cc_v_write
290b0     00 4A 05 F6 | 	mov	COUNT_, #0
290b4     A8 00 A0 FD | 	call	#pushregs_
290b8     1C F0 07 F1 | 	add	ptra, #28
290bc     04 4E 05 F1 | 	add	fp, #4
290c0     A7 12 62 FC | 	wrlong	arg01, fp
290c4     04 4E 05 F1 | 	add	fp, #4
290c8     A7 14 62 FC | 	wrlong	arg02, fp
290cc     04 4E 05 F1 | 	add	fp, #4
290d0     A7 16 62 FC | 	wrlong	arg03, fp
290d4     08 4E 85 F1 | 	sub	fp, #8
290d8     A7 12 02 FB | 	rdlong	arg01, fp
290dc     09 13 0A FB | 	rdlong	arg01, arg01 wz
290e0     0C 4E 05 F1 | 	add	fp, #12
290e4     A7 12 62 FC | 	wrlong	arg01, fp
290e8     10 4E 85 F1 | 	sub	fp, #16
290ec                 | '         return _seterror( 5 );
290ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
290f0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
290f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
290f8     01 FA 65 A6 |  if_e	neg	result1, #1
290fc     84 00 90 AD |  if_e	jmp	#LR__4171
29100     10 4E 05 F1 | 	add	fp, #16
29104     A7 12 02 FB | 	rdlong	arg01, fp
29108     02 00 00 FF 
2910c     14 12 06 F1 | 	add	arg01, ##1044
29110     08 4E 85 F1 | 	sub	fp, #8
29114     A7 14 02 FB | 	rdlong	arg02, fp
29118     04 4E 05 F1 | 	add	fp, #4
2911c     A7 16 02 FB | 	rdlong	arg03, fp
29120     0C 4E 05 F1 | 	add	fp, #12
29124     A7 18 02 F6 | 	mov	arg04, fp
29128     18 4E 85 F1 | 	sub	fp, #24
2912c     4C D4 BF FD | 	call	#_fatfs_cc_f_write
29130     14 4E 05 F1 | 	add	fp, #20
29134     A7 FA 61 FC | 	wrlong	result1, fp
29138     14 4E 85 F1 | 	sub	fp, #20
2913c     00 FA 0D F2 | 	cmp	result1, #0 wz
29140     34 00 90 AD |  if_e	jmp	#LR__4170
29144     04 4E 05 F1 | 	add	fp, #4
29148     A7 18 02 FB | 	rdlong	arg04, fp
2914c     0C 17 02 F6 | 	mov	arg03, arg04
29150     08 18 06 F1 | 	add	arg04, #8
29154     0C 19 02 FB | 	rdlong	arg04, arg04
29158     20 18 46 F5 | 	or	arg04, #32
2915c     08 16 06 F1 | 	add	arg03, #8
29160     0B 19 62 FC | 	wrlong	arg04, arg03
29164                 | '         fil->state |=  (0x20) ;
29164                 | '         return _set_dos_error(r);
29164     10 4E 05 F1 | 	add	fp, #16
29168     A7 12 02 FB | 	rdlong	arg01, fp
2916c     14 4E 85 F1 | 	sub	fp, #20
29170     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29174     0C 00 90 FD | 	jmp	#LR__4171
29178                 | LR__4170
29178                 | '     }
29178                 | '     return x;
29178     18 4E 05 F1 | 	add	fp, #24
2917c     A7 FA 01 FB | 	rdlong	result1, fp
29180     18 4E 85 F1 | 	sub	fp, #24
29184                 | LR__4171
29184     A7 F0 03 F6 | 	mov	ptra, fp
29188     B2 00 A0 FD | 	call	#popregs_
2918c                 | _fatfs_cc_v_write_ret
2918c     2D 00 64 FD | 	ret
29190                 | 
29190                 | _fatfs_cc_v_lseek
29190     04 4A 05 F6 | 	mov	COUNT_, #4
29194     A8 00 A0 FD | 	call	#pushregs_
29198     0A 1F 02 F6 | 	mov	local01, arg02
2919c     0B 21 02 F6 | 	mov	local02, arg03
291a0     09 23 02 FB | 	rdlong	local03, arg01
291a4     02 00 00 FF 
291a8     14 22 0E F1 | 	add	local03, ##1044 wz
291ac                 | '         return _seterror( 5 );
291ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
291b0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
291b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
291b8     01 FA 65 A6 |  if_e	neg	result1, #1
291bc     4C 00 90 AD |  if_e	jmp	#LR__4182
291c0     00 20 0E F2 | 	cmp	local02, #0 wz
291c4     24 00 90 AD |  if_e	jmp	#LR__4180
291c8     01 20 0E F2 | 	cmp	local02, #1 wz
291cc     14 22 06 A1 |  if_e	add	local03, #20
291d0     11 25 02 AB |  if_e	rdlong	local04, local03
291d4     14 22 86 A1 |  if_e	sub	local03, #20
291d8     12 1F 02 A1 |  if_e	add	local01, local04
291dc     0C 22 06 51 |  if_ne	add	local03, #12
291e0     11 25 02 5B |  if_ne	rdlong	local04, local03
291e4     0C 22 86 51 |  if_ne	sub	local03, #12
291e8     12 1F 02 51 |  if_ne	add	local01, local04
291ec                 | LR__4180
291ec     0F 15 02 F6 | 	mov	arg02, local01
291f0     11 13 02 F6 | 	mov	arg01, local03
291f4     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
291f8     FD 12 0A F6 | 	mov	arg01, result1 wz
291fc     08 00 90 AD |  if_e	jmp	#LR__4181
29200                 | '         return _set_dos_error(result);
29200     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29204     04 00 90 FD | 	jmp	#LR__4182
29208                 | LR__4181
29208                 | '     }
29208                 | '     return offset;
29208     0F FB 01 F6 | 	mov	result1, local01
2920c                 | LR__4182
2920c     A7 F0 03 F6 | 	mov	ptra, fp
29210     B2 00 A0 FD | 	call	#popregs_
29214                 | _fatfs_cc_v_lseek_ret
29214     2D 00 64 FD | 	ret
29218                 | 
29218                 | _fatfs_cc_v_ioctl
29218                 | ' {
29218                 | '     return _seterror( 10 );
29218     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2921c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
29220     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29224     01 FA 65 F6 | 	neg	result1, #1
29228                 | _fatfs_cc_v_ioctl_ret
29228     2D 00 64 FD | 	ret
2922c                 | 
2922c                 | _fatfs_cc_v_mkdir
2922c     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
29230     FD 12 02 F6 | 	mov	arg01, result1
29234                 | ' 
29234                 | '     r = f_mkdir(name);
29234                 | '     return _set_dos_error(r);
29234     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29238                 | _fatfs_cc_v_mkdir_ret
29238     2D 00 64 FD | 	ret
2923c                 | 
2923c                 | _fatfs_cc_v_remove
2923c     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
29240     FD 12 02 F6 | 	mov	arg01, result1
29244                 | ' 
29244                 | '     r = f_unlink(name);
29244                 | '     return _set_dos_error(r);
29244     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29248                 | _fatfs_cc_v_remove_ret
29248     2D 00 64 FD | 	ret
2924c                 | 
2924c                 | _fatfs_cc_v_rmdir
2924c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
29250     FD 12 02 F6 | 	mov	arg01, result1
29254                 | ' 
29254                 | '     r = f_unlink(name);
29254                 | '     return _set_dos_error(r);
29254     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29258                 | _fatfs_cc_v_rmdir_ret
29258     2D 00 64 FD | 	ret
2925c                 | 
2925c                 | _fatfs_cc_v_rename
2925c     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
29260     FD 12 02 F6 | 	mov	arg01, result1
29264                 | '     return _set_dos_error(r);
29264     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29268                 | _fatfs_cc_v_rename_ret
29268     2D 00 64 FD | 	ret
2926c                 | 
2926c                 | _fatfs_cc_v_open
2926c     07 4A 05 F6 | 	mov	COUNT_, #7
29270     A8 00 A0 FD | 	call	#pushregs_
29274     09 1F 02 F6 | 	mov	local01, arg01
29278     0A 21 02 F6 | 	mov	local02, arg02
2927c     0B 23 02 F6 | 	mov	local03, arg03
29280     03 00 00 FF 
29284     3C 12 06 F6 | 	mov	arg01, ##1596
29288                 | '     return _gc_alloc(size);
29288     10 14 06 F6 | 	mov	arg02, #16
2928c     A8 58 BF FD | 	call	#__system___gc_doalloc
29290     FD 24 0A F6 | 	mov	local04, result1 wz
29294                 | '       return _seterror( 7 );
29294     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29298     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2929c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
292a0     01 FA 65 A6 |  if_e	neg	result1, #1
292a4     98 00 90 AD |  if_e	jmp	#LR__4196
292a8     12 13 02 F6 | 	mov	arg01, local04
292ac     00 14 06 F6 | 	mov	arg02, #0
292b0     03 00 00 FF 
292b4     3C 16 06 F6 | 	mov	arg03, ##1596
292b8     98 00 A0 FD | 	call	#\builtin_bytefill_
292bc                 | '   switch (flags & 3) {
292bc     11 27 02 F6 | 	mov	local05, local03
292c0     03 26 0E F5 | 	and	local05, #3 wz
292c4     0C 00 90 AD |  if_e	jmp	#LR__4190
292c8     01 26 0E F2 | 	cmp	local05, #1 wz
292cc     0C 00 90 AD |  if_e	jmp	#LR__4191
292d0     10 00 90 FD | 	jmp	#LR__4192
292d4                 | LR__4190
292d4     01 28 06 F6 | 	mov	local06, #1
292d8                 | '       fs_flags =  0x01 ;
292d8                 | '       break;
292d8     0C 00 90 FD | 	jmp	#LR__4193
292dc                 | LR__4191
292dc     02 28 06 F6 | 	mov	local06, #2
292e0                 | '       fs_flags =  0x02 ;
292e0                 | '       break;
292e0     04 00 90 FD | 	jmp	#LR__4193
292e4                 | LR__4192
292e4     03 28 06 F6 | 	mov	local06, #3
292e8                 | '       fs_flags =  0x01  |  0x02 ;
292e8                 | '       break;
292e8                 | LR__4193
292e8     08 22 CE F7 | 	test	local03, #8 wz
292ec     18 28 46 55 |  if_ne	or	local06, #24
292f0     08 00 90 5D |  if_ne	jmp	#LR__4194
292f4     20 22 CE F7 | 	test	local03, #32 wz
292f8     30 28 46 55 |  if_ne	or	local06, #48
292fc                 | LR__4194
292fc     02 00 00 FF 
29300     14 24 06 F1 | 	add	local04, ##1044
29304     12 13 02 F6 | 	mov	arg01, local04
29308     02 00 00 FF 
2930c     14 24 86 F1 | 	sub	local04, ##1044
29310     10 15 02 F6 | 	mov	arg02, local02
29314     14 17 02 F6 | 	mov	arg03, local06
29318     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2931c     FD 2A 0A F6 | 	mov	local07, result1 wz
29320     14 00 90 AD |  if_e	jmp	#LR__4195
29324     12 13 02 F6 | 	mov	arg01, local04
29328                 | '     return _gc_free(ptr);
29328     18 59 BF FD | 	call	#__system___gc_free
2932c                 | '     free(f);
2932c                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2932c                 | '     return _set_dos_error(r);
2932c     15 13 02 F6 | 	mov	arg01, local07
29330     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29334     08 00 90 FD | 	jmp	#LR__4196
29338                 | LR__4195
29338     0F 25 62 FC | 	wrlong	local04, local01
2933c                 | '   }
2933c                 | '   fil->vfsdata = f;
2933c                 | '   return 0;
2933c     00 FA 05 F6 | 	mov	result1, #0
29340                 | LR__4196
29340     A7 F0 03 F6 | 	mov	ptra, fp
29344     B2 00 A0 FD | 	call	#popregs_
29348                 | _fatfs_cc_v_open_ret
29348     2D 00 64 FD | 	ret
2934c                 | 
2934c                 | _fatfs_cc_v_flush
2934c     09 13 02 FB | 	rdlong	arg01, arg01
29350     02 00 00 FF 
29354     14 12 0E F1 | 	add	arg01, ##1044 wz
29358                 | '         return _seterror( 5 );
29358     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2935c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29360     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29364     01 FA 65 A6 |  if_e	neg	result1, #1
29368     0C 00 90 AD |  if_e	jmp	#LR__4200
2936c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
29370     FD 12 02 F6 | 	mov	arg01, result1
29374                 | '     }
29374                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
29374                 | '     result = f_sync(f);
29374                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
29374                 | '     return _set_dos_error(result);
29374     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0864
29378                 | LR__4200
29378                 | _fatfs_cc_v_flush_ret
29378     2D 00 64 FD | 	ret
2937c                 | 
2937c                 | _fatfs_cc_v_init
2937c                 | ' {
2937c                 | '     return 0;
2937c     00 FA 05 F6 | 	mov	result1, #0
29380                 | _fatfs_cc_v_init_ret
29380     2D 00 64 FD | 	ret
29384                 | 
29384                 | _fatfs_cc_v_deinit
29384     51 01 00 FF 
29388     E8 14 06 F6 | 	mov	arg02, ##@LR__4396
2938c     00 12 06 F6 | 	mov	arg01, #0
29390     00 16 06 F6 | 	mov	arg03, #0
29394     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
29398     01 00 00 FF 
2939c     08 E4 05 F1 | 	add	objptr, ##520
293a0     F2 12 02 FB | 	rdlong	arg01, objptr
293a4     04 E4 05 F1 | 	add	objptr, #4
293a8     F2 14 02 FB | 	rdlong	arg02, objptr
293ac     01 00 00 FF 
293b0     0C E4 85 F1 | 	sub	objptr, ##524
293b4     58 40 BF FD | 	call	#__system___freepins
293b8                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
293b8                 | '     _freepins(f_pinmask);
293b8                 | '     return 0;
293b8     00 FA 05 F6 | 	mov	result1, #0
293bc                 | _fatfs_cc_v_deinit_ret
293bc     2D 00 64 FD | 	ret
293c0                 | 
293c0                 | _fatfs_cc_get_vfs
293c0     01 4A 05 F6 | 	mov	COUNT_, #1
293c4     A8 00 A0 FD | 	call	#pushregs_
293c8     09 1F 02 F6 | 	mov	local01, arg01
293cc     50 12 06 F6 | 	mov	arg01, #80
293d0     34 57 BF FD | 	call	#__system___gc_alloc_managed
293d4     FD 12 02 F6 | 	mov	arg01, result1
293d8     F2 FA 01 F6 | 	mov	result1, objptr
293dc     00 C8 03 FF 
293e0     00 FA 45 F5 | 	or	result1, ##126877696
293e4     09 FB 61 FC | 	wrlong	result1, arg01
293e8     F2 FA 01 F6 | 	mov	result1, objptr
293ec     00 D0 03 FF 
293f0     00 FA 45 F5 | 	or	result1, ##127926272
293f4     04 12 06 F1 | 	add	arg01, #4
293f8     09 FB 61 FC | 	wrlong	result1, arg01
293fc     F2 FA 01 F6 | 	mov	result1, objptr
29400     00 D8 03 FF 
29404     00 FA 45 F5 | 	or	result1, ##128974848
29408     04 12 06 F1 | 	add	arg01, #4
2940c     09 FB 61 FC | 	wrlong	result1, arg01
29410     F2 FA 01 F6 | 	mov	result1, objptr
29414     96 FA 25 F4 | 	bith	result1, #150
29418     04 12 06 F1 | 	add	arg01, #4
2941c     09 FB 61 FC | 	wrlong	result1, arg01
29420     F2 FA 01 F6 | 	mov	result1, objptr
29424     00 E8 03 FF 
29428     00 FA 45 F5 | 	or	result1, ##131072000
2942c     04 12 06 F1 | 	add	arg01, #4
29430     09 FB 61 FC | 	wrlong	result1, arg01
29434     04 12 06 F1 | 	add	arg01, #4
29438     09 01 68 FC | 	wrlong	#0, arg01
2943c     04 12 06 F1 | 	add	arg01, #4
29440     09 1F 62 FC | 	wrlong	local01, arg01
29444     04 12 06 F1 | 	add	arg01, #4
29448     09 01 68 FC | 	wrlong	#0, arg01
2944c     F2 FA 01 F6 | 	mov	result1, objptr
29450     B5 FA 25 F4 | 	bith	result1, #181
29454     04 12 06 F1 | 	add	arg01, #4
29458     09 FB 61 FC | 	wrlong	result1, arg01
2945c     F2 FA 01 F6 | 	mov	result1, objptr
29460     D4 FA 25 F4 | 	bith	result1, #212
29464     04 12 06 F1 | 	add	arg01, #4
29468     09 FB 61 FC | 	wrlong	result1, arg01
2946c     F2 FA 01 F6 | 	mov	result1, objptr
29470     1B FA 25 F4 | 	bith	result1, #27
29474     04 12 06 F1 | 	add	arg01, #4
29478     09 FB 61 FC | 	wrlong	result1, arg01
2947c     F2 FA 01 F6 | 	mov	result1, objptr
29480     00 08 04 FF 
29484     00 FA 45 F5 | 	or	result1, ##135266304
29488     04 12 06 F1 | 	add	arg01, #4
2948c     09 FB 61 FC | 	wrlong	result1, arg01
29490     F2 FA 01 F6 | 	mov	result1, objptr
29494     00 10 04 FF 
29498     00 FA 45 F5 | 	or	result1, ##136314880
2949c     04 12 06 F1 | 	add	arg01, #4
294a0     09 FB 61 FC | 	wrlong	result1, arg01
294a4     F2 FA 01 F6 | 	mov	result1, objptr
294a8     00 18 04 FF 
294ac     00 FA 45 F5 | 	or	result1, ##137363456
294b0     04 12 06 F1 | 	add	arg01, #4
294b4     09 FB 61 FC | 	wrlong	result1, arg01
294b8     F2 FA 01 F6 | 	mov	result1, objptr
294bc     00 20 04 FF 
294c0     00 FA 45 F5 | 	or	result1, ##138412032
294c4     04 12 06 F1 | 	add	arg01, #4
294c8     09 FB 61 FC | 	wrlong	result1, arg01
294cc     F2 FA 01 F6 | 	mov	result1, objptr
294d0     00 28 04 FF 
294d4     00 FA 45 F5 | 	or	result1, ##139460608
294d8     04 12 06 F1 | 	add	arg01, #4
294dc     09 FB 61 FC | 	wrlong	result1, arg01
294e0     F2 FA 01 F6 | 	mov	result1, objptr
294e4     00 30 04 FF 
294e8     00 FA 45 F5 | 	or	result1, ##140509184
294ec     04 12 06 F1 | 	add	arg01, #4
294f0     09 FB 61 FC | 	wrlong	result1, arg01
294f4     F2 FA 01 F6 | 	mov	result1, objptr
294f8     00 38 04 FF 
294fc     00 FA 45 F5 | 	or	result1, ##141557760
29500     04 12 06 F1 | 	add	arg01, #4
29504     09 FB 61 FC | 	wrlong	result1, arg01
29508     F2 FA 01 F6 | 	mov	result1, objptr
2950c     00 40 04 FF 
29510     00 FA 45 F5 | 	or	result1, ##142606336
29514     04 12 06 F1 | 	add	arg01, #4
29518     09 FB 61 FC | 	wrlong	result1, arg01
2951c     F2 FA 01 F6 | 	mov	result1, objptr
29520     00 48 04 FF 
29524     00 FA 45 F5 | 	or	result1, ##143654912
29528     04 12 06 F1 | 	add	arg01, #4
2952c     09 FB 61 FC | 	wrlong	result1, arg01
29530     4C 12 86 F1 | 	sub	arg01, #76
29534                 | ' 
29534                 | '     v->close = &v_close;
29534                 | '     v->read = &v_read;
29534                 | '     v->write = &v_write;
29534                 | '     v->lseek = &v_lseek;
29534                 | '     v->ioctl = &v_ioctl;
29534                 | '     v->flush = 0;
29534                 | '     v->vfs_data = ptr;
29534                 | '     v->reserved = 0;
29534                 | ' 
29534                 | '     v->open = &v_open;
29534                 | '     v->creat = &v_creat;
29534                 | '     v->opendir = &v_opendir;
29534                 | '     v->closedir = &v_closedir;
29534                 | '     v->readdir = &v_readdir;
29534                 | '     v->stat = &v_stat;
29534                 | ' 
29534                 | '     v->mkdir = &v_mkdir;
29534                 | '     v->rmdir = &v_rmdir;
29534                 | ' 
29534                 | '     v->remove = &v_remove;
29534                 | '     v->rename = &v_rename;
29534                 | ' 
29534                 | '     v->init = &v_init;
29534                 | '     v->deinit = &v_deinit;
29534                 | ' 
29534                 | '     return v;
29534     09 FB 01 F6 | 	mov	result1, arg01
29538     A7 F0 03 F6 | 	mov	ptra, fp
2953c     B2 00 A0 FD | 	call	#popregs_
29540                 | _fatfs_cc_get_vfs_ret
29540     2D 00 64 FD | 	ret
29544                 | 
29544                 | _fatfs_cc_xmit_mmc_1011
29544     01 00 00 FF 
29548     10 E4 05 F1 | 	add	objptr, ##528
2954c     F2 00 02 FB | 	rdlong	_var01, objptr
29550     08 E4 05 F1 | 	add	objptr, #8
29554     F2 02 02 FB | 	rdlong	_var02, objptr
29558     01 00 00 FF 
2955c     18 E4 85 F1 | 	sub	objptr, ##536
29560     40 02 62 FD | 	dirl	_var02
29564     28 02 64 FD | 	setq	#1
29568     09 05 02 FB | 	rdlong	_var03, arg01
2956c     69 04 62 FD | 	rev	_var03
29570     1B 04 FE F9 | 	movbyts	_var03, #27
29574     01 05 22 FC | 	wypin	_var03, _var02
29578     0A 05 02 F6 | 	mov	_var03, arg02
2957c     02 14 4E F0 | 	shr	arg02, #2 wz
29580     03 04 66 F0 | 	shl	_var03, #3
29584     00 05 22 FC | 	wypin	_var03, _var01
29588     41 02 62 FD | 	dirh	_var02
2958c     08 12 06 F1 | 	add	arg01, #8
29590     69 06 62 FD | 	rev	_var04
29594     1B 06 FE F9 | 	movbyts	_var04, #27
29598                 | LR__4210
29598     01 07 22 5C |  if_ne	wypin	_var04, _var02
2959c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
295a0     04 12 06 51 |  if_ne	add	arg01, #4
295a4     69 06 62 5D |  if_ne	rev	_var04
295a8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
295ac                 | LR__4211
295ac     40 02 72 5D |  if_ne	testp	_var02 wc
295b0     F8 FF 9F 1D |  if_a	jmp	#LR__4211
295b4     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4210
295b8                 | LR__4212
295b8     40 00 72 FD | 	testp	_var01 wc
295bc     F8 FF 9F 3D |  if_ae	jmp	#LR__4212
295c0     40 02 62 FD | 	dirl	_var02
295c4     FF FF FF FF 
295c8     01 FF 2B FC | 	wypin	##-1, _var02
295cc     41 02 62 FD | 	dirh	_var02
295d0                 | _fatfs_cc_xmit_mmc_1011_ret
295d0     2D 00 64 FD | 	ret
295d4                 | 
295d4                 | _fatfs_cc_rcvr_mmc_1018
295d4     01 00 00 FF 
295d8     10 E4 05 F1 | 	add	objptr, ##528
295dc     F2 00 02 FB | 	rdlong	_var01, objptr
295e0     0C E4 05 F1 | 	add	objptr, #12
295e4     F2 02 02 FB | 	rdlong	_var02, objptr
295e8     01 00 00 FF 
295ec     1C E4 85 F1 | 	sub	objptr, ##540
295f0     01 03 08 FC | 	akpin	_var02
295f4     0A 05 0A F6 | 	mov	_var03, arg02 wz
295f8     02 04 4E F0 | 	shr	_var03, #2 wz
295fc     30 00 90 AD |  if_e	jmp	#LR__4222
29600     02 07 02 F6 | 	mov	_var04, _var03
29604     05 06 66 F0 | 	shl	_var04, #5
29608     00 07 22 FC | 	wypin	_var04, _var01
2960c     01 7F 18 FC | 	wxpin	#63, _var02
29610                 | LR__4220
29610                 | LR__4221
29610     40 02 72 FD | 	testp	_var02 wc
29614     F8 FF 9F 3D |  if_ae	jmp	#LR__4221
29618     01 07 8A FA | 	rdpin	_var04, _var02
2961c     69 06 62 FD | 	rev	_var04
29620     1B 06 FE F9 | 	movbyts	_var04, #27
29624     09 07 62 FC | 	wrlong	_var04, arg01
29628     04 12 06 F1 | 	add	arg01, #4
2962c     F8 05 6E FB | 	djnz	_var03, #LR__4220
29630                 | LR__4222
29630     03 14 0E F5 | 	and	arg02, #3 wz
29634     24 00 90 AD |  if_e	jmp	#LR__4225
29638     01 4F 18 FC | 	wxpin	#39, _var02
2963c                 | LR__4223
2963c     00 11 28 FC | 	wypin	#8, _var01
29640                 | LR__4224
29640     40 02 72 FD | 	testp	_var02 wc
29644     F8 FF 9F 3D |  if_ae	jmp	#LR__4224
29648     01 07 8A FA | 	rdpin	_var04, _var02
2964c     69 06 62 FD | 	rev	_var04
29650     09 07 42 FC | 	wrbyte	_var04, arg01
29654     01 12 06 F1 | 	add	arg01, #1
29658     F8 15 6E FB | 	djnz	arg02, #LR__4223
2965c                 | LR__4225
2965c                 | _fatfs_cc_rcvr_mmc_1018_ret
2965c     2D 00 64 FD | 	ret
29660                 | 
29660                 | _fatfs_cc_wait_ready_1022
29660     01 4A 05 F6 | 	mov	COUNT_, #1
29664     A8 00 A0 FD | 	call	#pushregs_
29668     10 F0 07 F1 | 	add	ptra, #16
2966c     1A FA 61 FD | 	getct	result1
29670     08 4E 05 F1 | 	add	fp, #8
29674     A7 FA 61 FC | 	wrlong	result1, fp
29678     14 1E 06 FB | 	rdlong	local01, #20
2967c     01 1E 46 F0 | 	shr	local01, #1
29680     04 4E 05 F1 | 	add	fp, #4
29684     A7 1E 62 FC | 	wrlong	local01, fp
29688     0C 4E 85 F1 | 	sub	fp, #12
2968c                 | ' {
2968c                 | ' 	BYTE d;
2968c                 | ' 	UINT tmr, tmout;
2968c                 | ' 
2968c                 | ' 	tmr = _cnt();
2968c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2968c                 | ' 	for(;;) {
2968c                 | LR__4230
2968c     04 4E 05 F1 | 	add	fp, #4
29690     A7 12 02 F6 | 	mov	arg01, fp
29694     04 4E 85 F1 | 	sub	fp, #4
29698     01 14 06 F6 | 	mov	arg02, #1
2969c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
296a0     04 4E 05 F1 | 	add	fp, #4
296a4     A7 1E C2 FA | 	rdbyte	local01, fp
296a8     04 4E 85 F1 | 	sub	fp, #4
296ac     FF 1E 0E F2 | 	cmp	local01, #255 wz
296b0     01 FA 05 A6 |  if_e	mov	result1, #1
296b4     28 00 90 AD |  if_e	jmp	#LR__4231
296b8     1A FA 61 FD | 	getct	result1
296bc     08 4E 05 F1 | 	add	fp, #8
296c0     A7 1E 02 FB | 	rdlong	local01, fp
296c4     0F FB 81 F1 | 	sub	result1, local01
296c8     04 4E 05 F1 | 	add	fp, #4
296cc     A7 1E 02 FB | 	rdlong	local01, fp
296d0     0C 4E 85 F1 | 	sub	fp, #12
296d4     0F FB 11 F2 | 	cmp	result1, local01 wc
296d8     00 FA 05 36 |  if_ae	mov	result1, #0
296dc     AC FF 9F CD |  if_b	jmp	#LR__4230
296e0                 | LR__4231
296e0     A7 F0 03 F6 | 	mov	ptra, fp
296e4     B2 00 A0 FD | 	call	#popregs_
296e8                 | _fatfs_cc_wait_ready_1022_ret
296e8     2D 00 64 FD | 	ret
296ec                 | 
296ec                 | _fatfs_cc_deselect_1028
296ec     00 4A 05 F6 | 	mov	COUNT_, #0
296f0     A8 00 A0 FD | 	call	#pushregs_
296f4     14 F0 07 F1 | 	add	ptra, #20
296f8     01 00 00 FF 
296fc     14 E4 05 F1 | 	add	objptr, ##532
29700     F2 14 02 FB | 	rdlong	arg02, objptr
29704     04 4E 05 F1 | 	add	fp, #4
29708     A7 14 62 FC | 	wrlong	arg02, fp
2970c     04 E4 85 F1 | 	sub	objptr, #4
29710     F2 14 02 FB | 	rdlong	arg02, objptr
29714     04 4E 05 F1 | 	add	fp, #4
29718     A7 14 62 FC | 	wrlong	arg02, fp
2971c     08 E4 05 F1 | 	add	objptr, #8
29720     F2 14 02 FB | 	rdlong	arg02, objptr
29724     04 4E 05 F1 | 	add	fp, #4
29728     A7 14 62 FC | 	wrlong	arg02, fp
2972c     04 E4 05 F1 | 	add	objptr, #4
29730     F2 14 02 FB | 	rdlong	arg02, objptr
29734     01 00 00 FF 
29738     1C E4 85 F1 | 	sub	objptr, ##540
2973c     04 4E 05 F1 | 	add	fp, #4
29740     A7 14 62 FC | 	wrlong	arg02, fp
29744     0C 4E 85 F1 | 	sub	fp, #12
29748     A7 12 02 FB | 	rdlong	arg01, fp
2974c     04 4E 85 F1 | 	sub	fp, #4
29750     59 12 62 FD | 	drvh	arg01
29754     1F 20 64 FD | 	waitx	#16
29758     A7 12 02 F6 | 	mov	arg01, fp
2975c     01 14 06 F6 | 	mov	arg02, #1
29760     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
29764     A7 F0 03 F6 | 	mov	ptra, fp
29768     B2 00 A0 FD | 	call	#popregs_
2976c                 | _fatfs_cc_deselect_1028_ret
2976c     2D 00 64 FD | 	ret
29770                 | 
29770                 | _fatfs_cc_select_1032
29770     00 4A 05 F6 | 	mov	COUNT_, #0
29774     A8 00 A0 FD | 	call	#pushregs_
29778     10 F0 07 F1 | 	add	ptra, #16
2977c     01 00 00 FF 
29780     14 E4 05 F1 | 	add	objptr, ##532
29784     F2 14 02 FB | 	rdlong	arg02, objptr
29788     08 4E 05 F1 | 	add	fp, #8
2978c     A7 14 62 FC | 	wrlong	arg02, fp
29790     08 E4 05 F1 | 	add	objptr, #8
29794     F2 12 02 FB | 	rdlong	arg01, objptr
29798     01 00 00 FF 
2979c     1C E4 85 F1 | 	sub	objptr, ##540
297a0     04 4E 05 F1 | 	add	fp, #4
297a4     A7 12 62 FC | 	wrlong	arg01, fp
297a8     50 12 62 FD | 	fltl	arg01
297ac     04 4E 85 F1 | 	sub	fp, #4
297b0     A7 12 02 FB | 	rdlong	arg01, fp
297b4     58 12 62 FD | 	drvl	arg01
297b8     1F 20 64 FD | 	waitx	#16
297bc     04 4E 05 F1 | 	add	fp, #4
297c0     A7 12 02 FB | 	rdlong	arg01, fp
297c4     41 12 62 FD | 	dirh	arg01
297c8     08 4E 85 F1 | 	sub	fp, #8
297cc     A7 12 02 F6 | 	mov	arg01, fp
297d0     04 4E 85 F1 | 	sub	fp, #4
297d4     01 14 06 F6 | 	mov	arg02, #1
297d8     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
297dc     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1022
297e0     00 FA 0D F2 | 	cmp	result1, #0 wz
297e4     01 FA 05 56 |  if_ne	mov	result1, #1
297e8     08 00 90 5D |  if_ne	jmp	#LR__4240
297ec     FC FE BF FD | 	call	#_fatfs_cc_deselect_1028
297f0                 | ' 
297f0                 | ' 	deselect();
297f0                 | ' 	return 0;
297f0     00 FA 05 F6 | 	mov	result1, #0
297f4                 | LR__4240
297f4     A7 F0 03 F6 | 	mov	ptra, fp
297f8     B2 00 A0 FD | 	call	#popregs_
297fc                 | _fatfs_cc_select_1032_ret
297fc     2D 00 64 FD | 	ret
29800                 | 
29800                 | _fatfs_cc_rcvr_datablock_1036
29800     01 4A 05 F6 | 	mov	COUNT_, #1
29804     A8 00 A0 FD | 	call	#pushregs_
29808     18 F0 07 F1 | 	add	ptra, #24
2980c     04 4E 05 F1 | 	add	fp, #4
29810     A7 12 62 FC | 	wrlong	arg01, fp
29814     04 4E 05 F1 | 	add	fp, #4
29818     A7 14 62 FC | 	wrlong	arg02, fp
2981c     1A FA 61 FD | 	getct	result1
29820     08 4E 05 F1 | 	add	fp, #8
29824     A7 FA 61 FC | 	wrlong	result1, fp
29828     14 1E 06 FB | 	rdlong	local01, #20
2982c     03 1E 46 F0 | 	shr	local01, #3
29830     04 4E 05 F1 | 	add	fp, #4
29834     A7 1E 62 FC | 	wrlong	local01, fp
29838     14 4E 85 F1 | 	sub	fp, #20
2983c                 | ' 	BYTE *buff,
2983c                 | ' 	UINT btr
2983c                 | ' )
2983c                 | ' {
2983c                 | ' 	BYTE d[2];
2983c                 | ' 	UINT tmr, tmout;
2983c                 | ' 
2983c                 | ' 	tmr = _cnt();
2983c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2983c                 | ' 	for(;;) {
2983c                 | LR__4250
2983c     0C 4E 05 F1 | 	add	fp, #12
29840     A7 12 02 F6 | 	mov	arg01, fp
29844     0C 4E 85 F1 | 	sub	fp, #12
29848     01 14 06 F6 | 	mov	arg02, #1
2984c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
29850     0C 4E 05 F1 | 	add	fp, #12
29854     A7 1E C2 FA | 	rdbyte	local01, fp
29858     0C 4E 85 F1 | 	sub	fp, #12
2985c     FF 1E 0E F2 | 	cmp	local01, #255 wz
29860     28 00 90 5D |  if_ne	jmp	#LR__4251
29864     1A FA 61 FD | 	getct	result1
29868     FD 1E 02 F6 | 	mov	local01, result1
2986c     10 4E 05 F1 | 	add	fp, #16
29870     A7 14 02 FB | 	rdlong	arg02, fp
29874     0A 1F 82 F1 | 	sub	local01, arg02
29878     04 4E 05 F1 | 	add	fp, #4
2987c     A7 14 02 FB | 	rdlong	arg02, fp
29880     14 4E 85 F1 | 	sub	fp, #20
29884     0A 1F 12 F2 | 	cmp	local01, arg02 wc
29888     B0 FF 9F CD |  if_b	jmp	#LR__4250
2988c                 | LR__4251
2988c     0C 4E 05 F1 | 	add	fp, #12
29890     A7 1E C2 FA | 	rdbyte	local01, fp
29894     0C 4E 85 F1 | 	sub	fp, #12
29898     FE 1E 0E F2 | 	cmp	local01, #254 wz
2989c     00 FA 05 56 |  if_ne	mov	result1, #0
298a0     30 00 90 5D |  if_ne	jmp	#LR__4252
298a4     04 4E 05 F1 | 	add	fp, #4
298a8     A7 12 02 FB | 	rdlong	arg01, fp
298ac     04 4E 05 F1 | 	add	fp, #4
298b0     A7 14 02 FB | 	rdlong	arg02, fp
298b4     08 4E 85 F1 | 	sub	fp, #8
298b8     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
298bc     0C 4E 05 F1 | 	add	fp, #12
298c0     A7 12 02 F6 | 	mov	arg01, fp
298c4     0C 4E 85 F1 | 	sub	fp, #12
298c8     02 14 06 F6 | 	mov	arg02, #2
298cc     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
298d0                 | ' 
298d0                 | ' 	rcvr_mmc(buff, btr);
298d0                 | ' 	rcvr_mmc(d, 2);
298d0                 | ' 
298d0                 | ' 	return 1;
298d0     01 FA 05 F6 | 	mov	result1, #1
298d4                 | LR__4252
298d4     A7 F0 03 F6 | 	mov	ptra, fp
298d8     B2 00 A0 FD | 	call	#popregs_
298dc                 | _fatfs_cc_rcvr_datablock_1036_ret
298dc     2D 00 64 FD | 	ret
298e0                 | 
298e0                 | _fatfs_cc_xmit_datablock_1038
298e0     00 4A 05 F6 | 	mov	COUNT_, #0
298e4     A8 00 A0 FD | 	call	#pushregs_
298e8     10 F0 07 F1 | 	add	ptra, #16
298ec     04 4E 05 F1 | 	add	fp, #4
298f0     A7 12 62 FC | 	wrlong	arg01, fp
298f4     04 4E 05 F1 | 	add	fp, #4
298f8     A7 14 42 FC | 	wrbyte	arg02, fp
298fc     08 4E 85 F1 | 	sub	fp, #8
29900     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1022
29904     00 FA 0D F2 | 	cmp	result1, #0 wz
29908     00 FA 05 A6 |  if_e	mov	result1, #0
2990c     90 00 90 AD |  if_e	jmp	#LR__4261
29910     08 4E 05 F1 | 	add	fp, #8
29914     A7 14 C2 FA | 	rdbyte	arg02, fp
29918     04 4E 05 F1 | 	add	fp, #4
2991c     A7 14 42 FC | 	wrbyte	arg02, fp
29920     A7 12 02 F6 | 	mov	arg01, fp
29924     0C 4E 85 F1 | 	sub	fp, #12
29928     01 14 06 F6 | 	mov	arg02, #1
2992c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1011
29930     08 4E 05 F1 | 	add	fp, #8
29934     A7 14 C2 FA | 	rdbyte	arg02, fp
29938     08 4E 85 F1 | 	sub	fp, #8
2993c     FD 14 0E F2 | 	cmp	arg02, #253 wz
29940     58 00 90 AD |  if_e	jmp	#LR__4260
29944     04 4E 05 F1 | 	add	fp, #4
29948     A7 12 02 FB | 	rdlong	arg01, fp
2994c     04 4E 85 F1 | 	sub	fp, #4
29950     09 14 C6 F9 | 	decod	arg02, #9
29954     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1011
29958     0C 4E 05 F1 | 	add	fp, #12
2995c     A7 12 02 F6 | 	mov	arg01, fp
29960     0C 4E 85 F1 | 	sub	fp, #12
29964     02 14 06 F6 | 	mov	arg02, #2
29968     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
2996c     0C 4E 05 F1 | 	add	fp, #12
29970     A7 12 02 F6 | 	mov	arg01, fp
29974     0C 4E 85 F1 | 	sub	fp, #12
29978     01 14 06 F6 | 	mov	arg02, #1
2997c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
29980     0C 4E 05 F1 | 	add	fp, #12
29984     A7 14 C2 FA | 	rdbyte	arg02, fp
29988     0C 4E 85 F1 | 	sub	fp, #12
2998c     1F 14 06 F5 | 	and	arg02, #31
29990     05 14 0E F2 | 	cmp	arg02, #5 wz
29994                 | ' 			return 0;
29994     00 FA 05 56 |  if_ne	mov	result1, #0
29998     04 00 90 5D |  if_ne	jmp	#LR__4261
2999c                 | LR__4260
2999c                 | ' 	}
2999c                 | ' 
2999c                 | ' 	return 1;
2999c     01 FA 05 F6 | 	mov	result1, #1
299a0                 | LR__4261
299a0     A7 F0 03 F6 | 	mov	ptra, fp
299a4     B2 00 A0 FD | 	call	#popregs_
299a8                 | _fatfs_cc_xmit_datablock_1038_ret
299a8     2D 00 64 FD | 	ret
299ac                 | 
299ac                 | _fatfs_cc_send_cmd_1042
299ac     01 4A 05 F6 | 	mov	COUNT_, #1
299b0     A8 00 A0 FD | 	call	#pushregs_
299b4     1C F0 07 F1 | 	add	ptra, #28
299b8                 | _fatfs_cc_send_cmd_1042_enter
299b8     04 4E 05 F1 | 	add	fp, #4
299bc     A7 12 42 FC | 	wrbyte	arg01, fp
299c0     04 4E 05 F1 | 	add	fp, #4
299c4     A7 14 62 FC | 	wrlong	arg02, fp
299c8     04 4E 85 F1 | 	sub	fp, #4
299cc     A7 FA C1 FA | 	rdbyte	result1, fp
299d0     04 4E 85 F1 | 	sub	fp, #4
299d4     80 FA CD F7 | 	test	result1, #128 wz
299d8     44 00 90 AD |  if_e	jmp	#LR__4270
299dc     04 4E 05 F1 | 	add	fp, #4
299e0     A7 14 C2 FA | 	rdbyte	arg02, fp
299e4     7F 14 06 F5 | 	and	arg02, #127
299e8     A7 14 42 FC | 	wrbyte	arg02, fp
299ec     04 4E 85 F1 | 	sub	fp, #4
299f0     37 12 06 F6 | 	mov	arg01, #55
299f4     00 14 06 F6 | 	mov	arg02, #0
299f8     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1042
299fc     0C 4E 05 F1 | 	add	fp, #12
29a00     A7 FA 41 FC | 	wrbyte	result1, fp
29a04     A7 14 C2 FA | 	rdbyte	arg02, fp
29a08     0C 4E 85 F1 | 	sub	fp, #12
29a0c     02 14 16 F2 | 	cmp	arg02, #2 wc
29a10     0C 4E 05 31 |  if_ae	add	fp, #12
29a14     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
29a18     0C 4E 85 31 |  if_ae	sub	fp, #12
29a1c     6C 01 90 3D |  if_ae	jmp	#LR__4274
29a20                 | LR__4270
29a20     04 4E 05 F1 | 	add	fp, #4
29a24     A7 14 C2 FA | 	rdbyte	arg02, fp
29a28     04 4E 85 F1 | 	sub	fp, #4
29a2c     0C 14 0E F2 | 	cmp	arg02, #12 wz
29a30     14 00 90 AD |  if_e	jmp	#LR__4271
29a34     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1028
29a38     34 FD BF FD | 	call	#_fatfs_cc_select_1032
29a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
29a40     FF FA 05 A6 |  if_e	mov	result1, #255
29a44     44 01 90 AD |  if_e	jmp	#LR__4274
29a48                 | LR__4271
29a48     04 4E 05 F1 | 	add	fp, #4
29a4c     A7 14 C2 FA | 	rdbyte	arg02, fp
29a50     40 FA 05 F6 | 	mov	result1, #64
29a54     0A FB 41 F5 | 	or	result1, arg02
29a58     10 4E 05 F1 | 	add	fp, #16
29a5c     A7 FA 41 FC | 	wrbyte	result1, fp
29a60     0C 4E 85 F1 | 	sub	fp, #12
29a64     A7 FA 01 FB | 	rdlong	result1, fp
29a68     18 FA 45 F0 | 	shr	result1, #24
29a6c     0D 4E 05 F1 | 	add	fp, #13
29a70     A7 FA 41 FC | 	wrbyte	result1, fp
29a74     0D 4E 85 F1 | 	sub	fp, #13
29a78     A7 FA 01 FB | 	rdlong	result1, fp
29a7c     10 FA 45 F0 | 	shr	result1, #16
29a80     0E 4E 05 F1 | 	add	fp, #14
29a84     A7 FA 41 FC | 	wrbyte	result1, fp
29a88     0E 4E 85 F1 | 	sub	fp, #14
29a8c     A7 FA 01 FB | 	rdlong	result1, fp
29a90     08 FA 45 F0 | 	shr	result1, #8
29a94     0F 4E 05 F1 | 	add	fp, #15
29a98     A7 FA 41 FC | 	wrbyte	result1, fp
29a9c     0F 4E 85 F1 | 	sub	fp, #15
29aa0     A7 FA 01 FB | 	rdlong	result1, fp
29aa4     10 4E 05 F1 | 	add	fp, #16
29aa8     A7 FA 41 FC | 	wrbyte	result1, fp
29aac     0C 4E 85 F1 | 	sub	fp, #12
29ab0     A7 02 48 FC | 	wrbyte	#1, fp
29ab4     08 4E 85 F1 | 	sub	fp, #8
29ab8     A7 FA C9 FA | 	rdbyte	result1, fp wz
29abc     04 4E 85 F1 | 	sub	fp, #4
29ac0     0C 4E 05 A1 |  if_e	add	fp, #12
29ac4     A7 2A 49 AC |  if_e	wrbyte	#149, fp
29ac8     0C 4E 85 A1 |  if_e	sub	fp, #12
29acc     04 4E 05 F1 | 	add	fp, #4
29ad0     A7 FA C1 FA | 	rdbyte	result1, fp
29ad4     04 4E 85 F1 | 	sub	fp, #4
29ad8     08 FA 0D F2 | 	cmp	result1, #8 wz
29adc     0C 4E 05 A1 |  if_e	add	fp, #12
29ae0     A7 0E 49 AC |  if_e	wrbyte	#135, fp
29ae4     0C 4E 85 A1 |  if_e	sub	fp, #12
29ae8     0C 4E 05 F1 | 	add	fp, #12
29aec     A7 14 C2 FA | 	rdbyte	arg02, fp
29af0     0D 4E 05 F1 | 	add	fp, #13
29af4     A7 14 42 FC | 	wrbyte	arg02, fp
29af8     05 4E 85 F1 | 	sub	fp, #5
29afc     A7 12 02 F6 | 	mov	arg01, fp
29b00     14 4E 85 F1 | 	sub	fp, #20
29b04     06 14 06 F6 | 	mov	arg02, #6
29b08     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1011
29b0c     04 4E 05 F1 | 	add	fp, #4
29b10     A7 1E C2 FA | 	rdbyte	local01, fp
29b14     04 4E 85 F1 | 	sub	fp, #4
29b18     0C 1E 0E F2 | 	cmp	local01, #12 wz
29b1c     10 4E 05 A1 |  if_e	add	fp, #16
29b20     A7 12 02 A6 |  if_e	mov	arg01, fp
29b24     10 4E 85 A1 |  if_e	sub	fp, #16
29b28     01 14 06 A6 |  if_e	mov	arg02, #1
29b2c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1018
29b30     0C 4E 05 F1 | 	add	fp, #12
29b34     A7 14 48 FC | 	wrbyte	#10, fp
29b38     0C 4E 85 F1 | 	sub	fp, #12
29b3c                 | ' 	n = 10;
29b3c                 | ' 	do
29b3c                 | LR__4272
29b3c     10 4E 05 F1 | 	add	fp, #16
29b40     A7 12 02 F6 | 	mov	arg01, fp
29b44     10 4E 85 F1 | 	sub	fp, #16
29b48     01 14 06 F6 | 	mov	arg02, #1
29b4c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1018
29b50     10 4E 05 F1 | 	add	fp, #16
29b54     A7 1E C2 FA | 	rdbyte	local01, fp
29b58     10 4E 85 F1 | 	sub	fp, #16
29b5c     80 1E CE F7 | 	test	local01, #128 wz
29b60     1C 00 90 AD |  if_e	jmp	#LR__4273
29b64     0C 4E 05 F1 | 	add	fp, #12
29b68     A7 1E C2 FA | 	rdbyte	local01, fp
29b6c     01 1E 86 F1 | 	sub	local01, #1
29b70     A7 1E 42 FC | 	wrbyte	local01, fp
29b74     A7 1E CA FA | 	rdbyte	local01, fp wz
29b78     0C 4E 85 F1 | 	sub	fp, #12
29b7c     BC FF 9F 5D |  if_ne	jmp	#LR__4272
29b80                 | LR__4273
29b80                 | ' 
29b80                 | ' 	return d;
29b80     10 4E 05 F1 | 	add	fp, #16
29b84     A7 FA C1 FA | 	rdbyte	result1, fp
29b88     10 4E 85 F1 | 	sub	fp, #16
29b8c                 | LR__4274
29b8c     A7 F0 03 F6 | 	mov	ptra, fp
29b90     B2 00 A0 FD | 	call	#popregs_
29b94                 | _fatfs_cc_send_cmd_1042_ret
29b94     2D 00 64 FD | 	ret
29b98                 | 
29b98                 | _fatfs_cc_disk_deinitialize
29b98     03 4A 05 F6 | 	mov	COUNT_, #3
29b9c     A8 00 A0 FD | 	call	#pushregs_
29ba0     00 12 4E F2 | 	cmps	arg01, #0 wz
29ba4     01 00 00 FF 
29ba8     14 E4 05 F1 | 	add	objptr, ##532
29bac     F2 12 02 FB | 	rdlong	arg01, objptr
29bb0     04 E4 85 F1 | 	sub	objptr, #4
29bb4     F2 1E 02 FB | 	rdlong	local01, objptr
29bb8     08 E4 05 F1 | 	add	objptr, #8
29bbc     F2 20 02 FB | 	rdlong	local02, objptr
29bc0     04 E4 05 F1 | 	add	objptr, #4
29bc4     F2 22 02 FB | 	rdlong	local03, objptr
29bc8     01 00 00 FF 
29bcc     1C E4 85 F1 | 	sub	objptr, ##540
29bd0                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
29bd0                 | '         return RES_NOTRDY;
29bd0     03 FA 05 56 |  if_ne	mov	result1, #3
29bd4     2C 00 90 5D |  if_ne	jmp	#LR__4280
29bd8     50 12 62 FD | 	fltl	arg01
29bdc     09 01 08 FC | 	wrpin	#0, arg01
29be0     50 1E 62 FD | 	fltl	local01
29be4     0F 01 08 FC | 	wrpin	#0, local01
29be8     50 20 62 FD | 	fltl	local02
29bec     10 01 08 FC | 	wrpin	#0, local02
29bf0     50 22 62 FD | 	fltl	local03
29bf4     11 01 08 FC | 	wrpin	#0, local03
29bf8     0A 12 06 F6 | 	mov	arg01, #10
29bfc     0C 14 BF FD | 	call	#__system___waitms
29c00                 | '     }
29c00                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
29c00                 | '     _pinclear(PIN_SS);
29c00                 | '     _pinclear(PIN_CLK);
29c00                 | '     _pinclear(PIN_DI);
29c00                 | '     _pinclear(PIN_DO);
29c00                 | ' 
29c00                 | '     _waitms(10);
29c00                 | ' 
29c00                 | '     return 0;
29c00     00 FA 05 F6 | 	mov	result1, #0
29c04                 | LR__4280
29c04     A7 F0 03 F6 | 	mov	ptra, fp
29c08     B2 00 A0 FD | 	call	#popregs_
29c0c                 | _fatfs_cc_disk_deinitialize_ret
29c0c     2D 00 64 FD | 	ret
29c10                 | 
29c10                 | _fatfs_cc_gettimeofday
29c10     04 4A 05 F6 | 	mov	COUNT_, #4
29c14     A8 00 A0 FD | 	call	#pushregs_
29c18     09 1F 02 F6 | 	mov	local01, arg01
29c1c     C8 0F BF FD | 	call	#__system___getus
29c20     FD 12 02 F6 | 	mov	arg01, result1
29c24     02 00 00 FF 
29c28     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
29c2c     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
29c30     09 FB 01 F6 | 	mov	result1, arg01
29c34     10 FB 81 F1 | 	sub	result1, local02
29c38     A1 07 00 FF 
29c3c     40 FA 15 FD | 	qdiv	result1, ##1000000
29c40     02 00 00 FF 
29c44     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
29c48     18 20 62 FD | 	getqx	local02
29c4c     A1 07 00 FF 
29c50     40 FA 15 FD | 	qdiv	result1, ##1000000
29c54     00 20 0E F2 | 	cmp	local02, #0 wz
29c58     19 22 62 FD | 	getqy	local03
29c5c     28 00 90 AD |  if_e	jmp	#LR__4290
29c60     02 00 00 FF 
29c64     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
29c68     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
29c6c     10 25 02 F1 | 	add	local04, local02
29c70     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
29c74     11 13 82 F1 | 	sub	arg01, local03
29c78     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
29c7c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
29c80     02 00 00 FF 
29c84     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
29c88                 | LR__4290
29c88     02 00 00 FF 
29c8c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
29c90     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
29c94     02 00 00 FF 
29c98     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
29c9c     0F 25 62 FC | 	wrlong	local04, local01
29ca0     04 1E 06 F1 | 	add	local01, #4
29ca4     0F 23 62 FC | 	wrlong	local03, local01
29ca8                 | '         lastsec += secs;
29ca8                 | '         lastus = now - leftover;
29ca8                 | '     }
29ca8                 | '     tv->tv_sec = lastsec;
29ca8                 | '     tv->tv_usec = leftover;
29ca8                 | '     return 0;
29ca8     00 FA 05 F6 | 	mov	result1, #0
29cac     A7 F0 03 F6 | 	mov	ptra, fp
29cb0     B2 00 A0 FD | 	call	#popregs_
29cb4                 | _fatfs_cc_gettimeofday_ret
29cb4     2D 00 64 FD | 	ret
29cb8                 | 
29cb8                 | _fatfs_cc__is_leap_year
29cb8     09 FB 51 F6 | 	abs	result1, arg01 wc
29cbc     03 FA 05 F5 | 	and	result1, #3
29cc0     FD FA 89 F6 | 	negc	result1, result1 wz
29cc4     38 00 90 5D |  if_ne	jmp	#LR__4301
29cc8     09 FB 51 F6 | 	abs	result1, arg01 wc
29ccc     64 FA 15 FD | 	qdiv	result1, #100
29cd0     19 FA 61 FD | 	getqy	result1
29cd4     FD FA 89 F6 | 	negc	result1, result1 wz
29cd8     1C 00 90 5D |  if_ne	jmp	#LR__4300
29cdc     09 FB 51 F6 | 	abs	result1, arg01 wc
29ce0     90 FB 15 FD | 	qdiv	result1, #400
29ce4                 | '       return (0 == y % 400);
29ce4     00 FA 05 F6 | 	mov	result1, #0
29ce8     19 00 62 FD | 	getqy	_var01
29cec     00 01 8A F6 | 	negc	_var01, _var01 wz
29cf0     01 FA 05 A6 |  if_e	mov	result1, #1
29cf4     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
29cf8                 | LR__4300
29cf8                 | '     return 1;
29cf8     01 FA 05 F6 | 	mov	result1, #1
29cfc     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
29d00                 | LR__4301
29d00                 | '   }
29d00                 | '   return 0;
29d00     00 FA 05 F6 | 	mov	result1, #0
29d04                 | _fatfs_cc__is_leap_year_ret
29d04     2D 00 64 FD | 	ret
29d08                 | 
29d08                 | _fatfs_cc___tzoffset
29d08     09 01 0A F6 | 	mov	_var01, arg01 wz
29d0c     FF FF FF FF 
29d10     0A FF 6B FC | 	wrlong	##-1, arg02
29d14     01 02 06 F6 | 	mov	_var02, #1
29d18     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
29d1c                 | '                 return 0;
29d1c     00 FA 05 A6 |  if_e	mov	result1, #0
29d20     94 02 90 AD |  if_e	jmp	#LR__4327
29d24     0A 01 68 FC | 	wrlong	#0, arg02
29d28     02 00 00 FF 
29d2c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
29d30     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
29d34                 | ' 
29d34                 | '        *hasdst = 0;
29d34                 | ' 
29d34                 | ' 	n = stdname;
29d34                 | '         while (*s && isalpha(*s)) {
29d34     02 00 00 FF 
29d38     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
29d3c     97 28 48 FB | 	callpa	#(@LR__4311-@LR__4310)>>2,fcache_load_ptr_
29d40                 | LR__4310
29d40     00 05 CA FA | 	rdbyte	_var03, _var01 wz
29d44     48 00 90 AD |  if_e	jmp	#LR__4312
29d48     00 13 C2 FA | 	rdbyte	arg01, _var01
29d4c                 | ' {
29d4c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
29d4c     80 12 36 F3 | 	fle	arg01, #128 wc
29d50                 | '     return __ctype[c];
29d50     02 00 00 FF 
29d54     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
29d58     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29d5c     09 FB C1 FA | 	rdbyte	result1, arg01
29d60     02 00 00 FF 
29d64     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29d68     0C FA CD F7 | 	test	result1, #12 wz
29d6c     20 00 90 AD |  if_e	jmp	#LR__4312
29d70     00 09 02 F6 | 	mov	_var05, _var01
29d74     00 0B 02 F6 | 	mov	_var06, _var01
29d78     01 0A 06 F1 | 	add	_var06, #1
29d7c     04 0D C2 FA | 	rdbyte	_var07, _var05
29d80     05 01 02 F6 | 	mov	_var01, _var06
29d84     03 0D 42 FC | 	wrbyte	_var07, _var04
29d88     01 06 06 F1 | 	add	_var04, #1
29d8c     B0 FF 9F FD | 	jmp	#LR__4310
29d90                 | LR__4311
29d90                 | LR__4312
29d90     03 01 48 FC | 	wrbyte	#0, _var04
29d94     00 0E 06 F6 | 	mov	_var08, #0
29d98     00 05 C2 FA | 	rdbyte	_var03, _var01
29d9c     2D 04 0E F2 | 	cmp	_var03, #45 wz
29da0     01 02 66 A6 |  if_e	neg	_var02, #1
29da4     01 00 06 A1 |  if_e	add	_var01, #1
29da8     97 28 48 FB | 	callpa	#(@LR__4314-@LR__4313)>>2,fcache_load_ptr_
29dac                 | '                 sgn = -1;
29dac                 | '                 s++;
29dac                 | '         }
29dac                 | '         while (isdigit(*s)) {
29dac                 | LR__4313
29dac     00 13 C2 FA | 	rdbyte	arg01, _var01
29db0                 | ' {
29db0                 | '   return  (__ctype_get(c) & 0x02 ) ;
29db0     80 12 36 F3 | 	fle	arg01, #128 wc
29db4                 | '     return __ctype[c];
29db4     02 00 00 FF 
29db8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
29dbc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29dc0     09 FB C1 FA | 	rdbyte	result1, arg01
29dc4     02 00 00 FF 
29dc8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29dcc     02 FA CD F7 | 	test	result1, #2 wz
29dd0     28 00 90 AD |  if_e	jmp	#LR__4315
29dd4     07 05 02 F6 | 	mov	_var03, _var08
29dd8     02 04 66 F0 | 	shl	_var03, #2
29ddc     07 05 02 F1 | 	add	_var03, _var08
29de0     01 04 66 F0 | 	shl	_var03, #1
29de4     00 09 C2 FA | 	rdbyte	_var05, _var01
29de8     30 08 86 F1 | 	sub	_var05, #48
29dec     04 05 02 F1 | 	add	_var03, _var05
29df0     02 0F 02 F6 | 	mov	_var08, _var03
29df4     01 00 06 F1 | 	add	_var01, #1
29df8     B0 FF 9F FD | 	jmp	#LR__4313
29dfc                 | LR__4314
29dfc                 | LR__4315
29dfc     07 00 00 FF 
29e00     10 0E 06 FD | 	qmul	_var08, ##3600
29e04     00 05 C2 FA | 	rdbyte	_var03, _var01
29e08     3A 04 0E F2 | 	cmp	_var03, #58 wz
29e0c     18 10 62 FD | 	getqx	_var09
29e10     70 00 90 5D |  if_ne	jmp	#LR__4319
29e14     00 0E 06 F6 | 	mov	_var08, #0
29e18     01 00 06 F1 | 	add	_var01, #1
29e1c     97 28 48 FB | 	callpa	#(@LR__4317-@LR__4316)>>2,fcache_load_ptr_
29e20                 | '                 x = 0;
29e20                 | '                 s++;
29e20                 | '                 while (isdigit(*s)) {
29e20                 | LR__4316
29e20     00 13 C2 FA | 	rdbyte	arg01, _var01
29e24                 | ' {
29e24                 | '   return  (__ctype_get(c) & 0x02 ) ;
29e24     80 12 36 F3 | 	fle	arg01, #128 wc
29e28                 | '     return __ctype[c];
29e28     02 00 00 FF 
29e2c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
29e30     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29e34     09 FB C1 FA | 	rdbyte	result1, arg01
29e38     02 00 00 FF 
29e3c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29e40     02 FA CD F7 | 	test	result1, #2 wz
29e44     28 00 90 AD |  if_e	jmp	#LR__4318
29e48     07 05 02 F6 | 	mov	_var03, _var08
29e4c     02 04 66 F0 | 	shl	_var03, #2
29e50     07 05 02 F1 | 	add	_var03, _var08
29e54     01 04 66 F0 | 	shl	_var03, #1
29e58     00 09 C2 FA | 	rdbyte	_var05, _var01
29e5c     30 08 86 F1 | 	sub	_var05, #48
29e60     04 05 02 F1 | 	add	_var03, _var05
29e64     02 0F 02 F6 | 	mov	_var08, _var03
29e68     01 00 06 F1 | 	add	_var01, #1
29e6c     B0 FF 9F FD | 	jmp	#LR__4316
29e70                 | LR__4317
29e70                 | LR__4318
29e70     07 0D 02 F6 | 	mov	_var07, _var08
29e74     04 0C 66 F0 | 	shl	_var07, #4
29e78     07 0D 82 F1 | 	sub	_var07, _var08
29e7c     02 0C 66 F0 | 	shl	_var07, #2
29e80     06 11 02 F1 | 	add	_var09, _var07
29e84                 | LR__4319
29e84     02 00 00 FF 
29e88     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
29e8c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
29e90     00 13 C2 FA | 	rdbyte	arg01, _var01
29e94                 | ' {
29e94                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
29e94     80 12 36 F3 | 	fle	arg01, #128 wc
29e98                 | '     return __ctype[c];
29e98     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
29e9c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29ea0     09 FB C1 FA | 	rdbyte	result1, arg01
29ea4     02 00 00 FF 
29ea8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29eac     0C FA CD F7 | 	test	result1, #12 wz
29eb0     50 00 90 AD |  if_e	jmp	#LR__4322
29eb4     0A 03 68 FC | 	wrlong	#1, arg02
29eb8                 | '                 *hasdst = 1;
29eb8                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
29eb8                 | LR__4320
29eb8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
29ebc     44 00 90 AD |  if_e	jmp	#LR__4321
29ec0     00 13 C2 FA | 	rdbyte	arg01, _var01
29ec4                 | ' {
29ec4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
29ec4     80 12 36 F3 | 	fle	arg01, #128 wc
29ec8                 | '     return __ctype[c];
29ec8     02 00 00 FF 
29ecc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
29ed0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29ed4     09 FB C1 FA | 	rdbyte	result1, arg01
29ed8     02 00 00 FF 
29edc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
29ee0     0C FA CD F7 | 	test	result1, #12 wz
29ee4     1C 00 90 AD |  if_e	jmp	#LR__4321
29ee8     00 0B 02 F6 | 	mov	_var06, _var01
29eec     01 0A 06 F1 | 	add	_var06, #1
29ef0     00 0D C2 FA | 	rdbyte	_var07, _var01
29ef4     05 01 02 F6 | 	mov	_var01, _var06
29ef8     03 0D 42 FC | 	wrbyte	_var07, _var04
29efc     01 06 06 F1 | 	add	_var04, #1
29f00     B4 FF 9F FD | 	jmp	#LR__4320
29f04                 | LR__4321
29f04                 | LR__4322
29f04     03 01 48 FC | 	wrbyte	#0, _var04
29f08     02 00 00 FF 
29f0c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
29f10     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
29f14     02 00 00 FF 
29f18     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
29f1c     20 00 90 AD |  if_e	jmp	#LR__4323
29f20     02 00 00 FF 
29f24     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
29f28     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
29f2c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
29f30     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
29f34     02 00 00 FF 
29f38     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
29f3c     1C 00 90 FD | 	jmp	#LR__4324
29f40                 | LR__4323
29f40     02 00 00 FF 
29f44     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
29f48     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
29f4c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
29f50     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
29f54     02 00 00 FF 
29f58     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
29f5c                 | LR__4324
29f5c     02 00 00 FF 
29f60     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
29f64     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
29f68     02 00 00 FF 
29f6c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
29f70     20 00 90 AD |  if_e	jmp	#LR__4325
29f74     02 00 00 FF 
29f78     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
29f7c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
29f80     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
29f84     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
29f88     02 00 00 FF 
29f8c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
29f90     1C 00 90 FD | 	jmp	#LR__4326
29f94                 | LR__4325
29f94     02 00 00 FF 
29f98     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
29f9c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
29fa0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
29fa4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
29fa8     02 00 00 FF 
29fac     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
29fb0                 | LR__4326
29fb0     08 03 02 FD | 	qmul	_var02, _var09
29fb4                 | ' 		_tzname[1] = stdname;
29fb4                 | ' 
29fb4                 | '         return sgn * off;
29fb4     18 FA 61 FD | 	getqx	result1
29fb8                 | LR__4327
29fb8                 | _fatfs_cc___tzoffset_ret
29fb8     2D 00 64 FD | 	ret
29fbc                 | 
29fbc                 | _fatfs_cc___indst
29fbc     10 12 06 F1 | 	add	arg01, #16
29fc0     09 01 02 FB | 	rdlong	_var01, arg01
29fc4     10 12 86 F1 | 	sub	arg01, #16
29fc8     02 00 0E F2 | 	cmp	_var01, #2 wz
29fcc     30 00 90 5D |  if_ne	jmp	#LR__4330
29fd0     07 00 06 F6 | 	mov	_var01, #7
29fd4     18 12 06 F1 | 	add	arg01, #24
29fd8     09 03 02 FB | 	rdlong	_var02, arg01
29fdc     01 01 02 F1 | 	add	_var01, _var02
29fe0     0C 12 86 F1 | 	sub	arg01, #12
29fe4     09 05 02 FB | 	rdlong	_var03, arg01
29fe8     02 01 82 F1 | 	sub	_var01, _var03
29fec     00 00 56 F2 | 	cmps	_var01, #0 wc
29ff0                 | '                         return 1;
29ff0     01 FA 05 C6 |  if_b	mov	result1, #1
29ff4     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
29ff8                 | '                 return 0;
29ff8     00 FA 05 F6 | 	mov	result1, #0
29ffc     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2a000                 | LR__4330
2a000     10 12 06 F1 | 	add	arg01, #16
2a004     09 01 02 FB | 	rdlong	_var01, arg01
2a008     10 12 86 F1 | 	sub	arg01, #16
2a00c     0A 00 0E F2 | 	cmp	_var01, #10 wz
2a010     28 00 90 5D |  if_ne	jmp	#LR__4331
2a014     18 12 06 F1 | 	add	arg01, #24
2a018     09 01 02 FB | 	rdlong	_var01, arg01
2a01c     0C 12 86 F1 | 	sub	arg01, #12
2a020     09 07 02 FB | 	rdlong	_var04, arg01
2a024     03 01 82 F1 | 	sub	_var01, _var04
2a028     00 00 56 F2 | 	cmps	_var01, #0 wc
2a02c                 | '                         return 0;
2a02c     00 FA 05 C6 |  if_b	mov	result1, #0
2a030     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2a034                 | '                 return 1;
2a034     01 FA 05 F6 | 	mov	result1, #1
2a038     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2a03c                 | LR__4331
2a03c                 | '         }
2a03c                 | ' 
2a03c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2a03c     00 00 06 F6 | 	mov	_var01, #0
2a040     10 12 06 F1 | 	add	arg01, #16
2a044     09 03 02 FB | 	rdlong	_var02, arg01
2a048     10 12 86 F1 | 	sub	arg01, #16
2a04c     03 02 56 F2 | 	cmps	_var02, #3 wc
2a050     10 00 90 CD |  if_b	jmp	#LR__4332
2a054     10 12 06 F1 | 	add	arg01, #16
2a058     09 05 02 FB | 	rdlong	_var03, arg01
2a05c     0A 04 56 F2 | 	cmps	_var03, #10 wc
2a060     01 00 06 C6 |  if_b	mov	_var01, #1
2a064                 | LR__4332
2a064     00 FB 01 F6 | 	mov	result1, _var01
2a068                 | _fatfs_cc___indst_ret
2a068     2D 00 64 FD | 	ret
2a06c                 | 
2a06c                 | ' 	
2a06c                 | ' 	FUNCTION pfunc(c as integer) as integer
2a06c                 | ___strs_cl_pfunc
2a06c                 | ' 		if (i < 16) then
2a06c     04 E4 05 F1 | 	add	objptr, #4
2a070     F2 FA 01 FB | 	rdlong	result1, objptr
2a074     04 E4 85 F1 | 	sub	objptr, #4
2a078     10 FA 55 F2 | 	cmps	result1, #16 wc
2a07c     2C 00 90 3D |  if_ae	jmp	#LR__4340
2a080     F2 FA 01 FB | 	rdlong	result1, objptr
2a084     04 E4 05 F1 | 	add	objptr, #4
2a088     F2 00 02 FB | 	rdlong	_var01, objptr
2a08c     FD 00 02 F1 | 	add	_var01, result1
2a090     00 13 42 FC | 	wrbyte	arg01, _var01
2a094     F2 FA 01 FB | 	rdlong	result1, objptr
2a098     01 FA 05 F1 | 	add	result1, #1
2a09c     F2 FA 61 FC | 	wrlong	result1, objptr
2a0a0     04 E4 85 F1 | 	sub	objptr, #4
2a0a4                 | ' 			p(i) = c
2a0a4                 | ' 			i = i+1
2a0a4                 | ' 			return 1
2a0a4     01 FA 05 F6 | 	mov	result1, #1
2a0a8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2a0ac                 | LR__4340
2a0ac                 | ' 			return -1
2a0ac     01 FA 65 F6 | 	neg	result1, #1
2a0b0                 | ___strs_cl_pfunc_ret
2a0b0     2D 00 64 FD | 	ret
2a0b4                 | 
2a0b4                 | __struct__s_vfs_file_t_putchar
2a0b4     04 4A 05 F6 | 	mov	COUNT_, #4
2a0b8     A8 00 A0 FD | 	call	#pushregs_
2a0bc     1C E4 05 F1 | 	add	objptr, #28
2a0c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
2a0c4     1C E4 85 F1 | 	sub	objptr, #28
2a0c8     00 FA 05 A6 |  if_e	mov	result1, #0
2a0cc     48 00 90 AD |  if_e	jmp	#LR__4350
2a0d0     1C E4 05 F1 | 	add	objptr, #28
2a0d4     F2 20 02 FB | 	rdlong	local02, objptr
2a0d8     10 23 02 F6 | 	mov	local03, local02
2a0dc     1C E4 85 F1 | 	sub	objptr, #28
2a0e0     13 22 46 F7 | 	zerox	local03, #19
2a0e4     14 20 46 F0 | 	shr	local02, #20
2a0e8     02 20 66 F0 | 	shl	local02, #2
2a0ec     ED 20 02 F1 | 	add	local02, __methods__
2a0f0     10 21 02 FB | 	rdlong	local02, local02
2a0f4     F2 14 02 F6 | 	mov	arg02, objptr
2a0f8     F2 24 02 F6 | 	mov	local04, objptr
2a0fc     11 E5 01 F6 | 	mov	objptr, local03
2a100     2D 20 62 FD | 	call	local02
2a104     12 E5 01 F6 | 	mov	objptr, local04
2a108                 | '     return (i < 0) ? 0 : 1;
2a108     00 FA 55 F2 | 	cmps	result1, #0 wc
2a10c     00 1E 06 C6 |  if_b	mov	local01, #0
2a110     01 1E 06 36 |  if_ae	mov	local01, #1
2a114     0F FB 01 F6 | 	mov	result1, local01
2a118                 | LR__4350
2a118     A7 F0 03 F6 | 	mov	ptra, fp
2a11c     B2 00 A0 FD | 	call	#popregs_
2a120                 | __struct__s_vfs_file_t_putchar_ret
2a120     2D 00 64 FD | 	ret
2a124                 | 
2a124                 | __struct__s_vfs_file_t_getchar
2a124     03 4A 05 F6 | 	mov	COUNT_, #3
2a128     A8 00 A0 FD | 	call	#pushregs_
2a12c     20 E4 05 F1 | 	add	objptr, #32
2a130     F2 12 0A FB | 	rdlong	arg01, objptr wz
2a134     20 E4 85 F1 | 	sub	objptr, #32
2a138     01 FA 65 A6 |  if_e	neg	result1, #1
2a13c     38 00 90 AD |  if_e	jmp	#LR__4360
2a140                 | '     return getcf(__this);
2a140     20 E4 05 F1 | 	add	objptr, #32
2a144     F2 1E 02 FB | 	rdlong	local01, objptr
2a148     0F 21 02 F6 | 	mov	local02, local01
2a14c     20 E4 85 F1 | 	sub	objptr, #32
2a150     13 20 46 F7 | 	zerox	local02, #19
2a154     14 1E 46 F0 | 	shr	local01, #20
2a158     02 1E 66 F0 | 	shl	local01, #2
2a15c     ED 1E 02 F1 | 	add	local01, __methods__
2a160     0F 1F 02 FB | 	rdlong	local01, local01
2a164     F2 12 02 F6 | 	mov	arg01, objptr
2a168     F2 22 02 F6 | 	mov	local03, objptr
2a16c     10 E5 01 F6 | 	mov	objptr, local02
2a170     2D 1E 62 FD | 	call	local01
2a174     11 E5 01 F6 | 	mov	objptr, local03
2a178                 | LR__4360
2a178     A7 F0 03 F6 | 	mov	ptra, fp
2a17c     B2 00 A0 FD | 	call	#popregs_
2a180                 | __struct__s_vfs_file_t_getchar_ret
2a180     2D 00 64 FD | 	ret
2a184                 | 
2a184                 | __struct___bas_wrap_sender_tx
2a184     03 4A 05 F6 | 	mov	COUNT_, #3
2a188     A8 00 A0 FD | 	call	#pushregs_
2a18c     F2 1E 02 FB | 	rdlong	local01, objptr
2a190     0F 21 02 F6 | 	mov	local02, local01
2a194     13 1E 46 F7 | 	zerox	local01, #19
2a198     14 20 46 F0 | 	shr	local02, #20
2a19c     02 20 66 F0 | 	shl	local02, #2
2a1a0     ED 20 02 F1 | 	add	local02, __methods__
2a1a4     10 21 02 FB | 	rdlong	local02, local02
2a1a8     F2 22 02 F6 | 	mov	local03, objptr
2a1ac     0F E5 01 F6 | 	mov	objptr, local01
2a1b0     2D 20 62 FD | 	call	local02
2a1b4     11 E5 01 F6 | 	mov	objptr, local03
2a1b8     01 FA 05 F6 | 	mov	result1, #1
2a1bc     A7 F0 03 F6 | 	mov	ptra, fp
2a1c0     B2 00 A0 FD | 	call	#popregs_
2a1c4                 | __struct___bas_wrap_sender_tx_ret
2a1c4     2D 00 64 FD | 	ret
2a1c8                 | 
2a1c8                 | __struct___bas_wrap_sender_rx
2a1c8     03 4A 05 F6 | 	mov	COUNT_, #3
2a1cc     A8 00 A0 FD | 	call	#pushregs_
2a1d0     04 E4 05 F1 | 	add	objptr, #4
2a1d4     F2 1E 02 FB | 	rdlong	local01, objptr
2a1d8     0F 21 02 F6 | 	mov	local02, local01
2a1dc     04 E4 85 F1 | 	sub	objptr, #4
2a1e0     13 20 46 F7 | 	zerox	local02, #19
2a1e4     14 1E 46 F0 | 	shr	local01, #20
2a1e8     02 1E 66 F0 | 	shl	local01, #2
2a1ec     ED 1E 02 F1 | 	add	local01, __methods__
2a1f0     0F 1F 02 FB | 	rdlong	local01, local01
2a1f4     F2 22 02 F6 | 	mov	local03, objptr
2a1f8     10 E5 01 F6 | 	mov	objptr, local02
2a1fc     2D 1E 62 FD | 	call	local01
2a200     11 E5 01 F6 | 	mov	objptr, local03
2a204     A7 F0 03 F6 | 	mov	ptra, fp
2a208     B2 00 A0 FD | 	call	#popregs_
2a20c                 | __struct___bas_wrap_sender_rx_ret
2a20c     2D 00 64 FD | 	ret
2a210                 | 
2a210                 | __struct___bas_wrap_sender_close
2a210     03 4A 05 F6 | 	mov	COUNT_, #3
2a214     A8 00 A0 FD | 	call	#pushregs_
2a218     08 E4 05 F1 | 	add	objptr, #8
2a21c     F2 1E 02 FB | 	rdlong	local01, objptr
2a220     0F 21 02 F6 | 	mov	local02, local01
2a224     08 E4 85 F1 | 	sub	objptr, #8
2a228     13 20 46 F7 | 	zerox	local02, #19
2a22c     14 1E 46 F0 | 	shr	local01, #20
2a230     02 1E 66 F0 | 	shl	local01, #2
2a234     ED 1E 02 F1 | 	add	local01, __methods__
2a238     0F 1F 02 FB | 	rdlong	local01, local01
2a23c     F2 22 02 F6 | 	mov	local03, objptr
2a240     10 E5 01 F6 | 	mov	objptr, local02
2a244     2D 1E 62 FD | 	call	local01
2a248     11 E5 01 F6 | 	mov	objptr, local03
2a24c     A7 F0 03 F6 | 	mov	ptra, fp
2a250     B2 00 A0 FD | 	call	#popregs_
2a254                 | __struct___bas_wrap_sender_close_ret
2a254     2D 00 64 FD | 	ret
2a258                 | 
2a258                 | LR__4370
2a258     2F          | 	byte	"/"
2a259     00          | 	byte	0
2a25a                 | LR__4371
2a25a     69 6E 66    | 	byte	"inf"
2a25d     00          | 	byte	0
2a25e                 | LR__4372
2a25e     6E 61 6E    | 	byte	"nan"
2a261     00          | 	byte	0
2a262                 | LR__4373
2a262                 | 	byte	
2a262     00          | 	byte	0
2a263                 | LR__4374
2a263                 | 	byte	
2a263     00          | 	byte	0
2a264                 | LR__4375
2a264                 | 	byte	
2a264     00          | 	byte	0
2a265                 | LR__4376
2a265                 | 	byte	
2a265     00          | 	byte	0
2a266                 | LR__4377
2a266                 | 	byte	
2a266     00          | 	byte	0
2a267                 | LR__4378
2a267                 | 	byte	
2a267     00          | 	byte	0
2a268                 | LR__4379
2a268                 | 	byte	
2a268     00          | 	byte	0
2a269                 | LR__4380
2a269                 | 	byte	
2a269     00          | 	byte	0
2a26a                 | LR__4381
2a26a     00          | 	byte	0
2a26b     00          | 	byte	0
2a26c                 | LR__4382
2a26c     00          | 	byte	0
2a26d     00          | 	byte	0
2a26e                 | LR__4383
2a26e     00          | 	byte	0
2a26f     00          | 	byte	0
2a270                 | LR__4384
2a270     20 21 21 21 
2a274     20 63 6F 72 
2a278     72 75 70 74 
2a27c     65 64 20 68 
2a280     65 61 70 3F 
2a284     3F 3F 20 21 
2a288     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2a28b     00          | 	byte	0
2a28c                 | LR__4385
2a28c     20 21 21 21 
2a290     20 6F 75 74 
2a294     20 6F 66 20 
2a298     68 65 61 70 
2a29c     20 6D 65 6D 
2a2a0     6F 72 79 20 
2a2a4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2a2a8     00          | 	byte	0
2a2a9                 | LR__4386
2a2a9     20 21 21 21 
2a2ad     20 63 6F 72 
2a2b1     72 75 70 74 
2a2b5     65 64 20 68 
2a2b9     65 61 70 20 
2a2bd     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2a2c1     00          | 	byte	0
2a2c2                 | LR__4387
2a2c2     00          | 	byte	0
2a2c3     00          | 	byte	0
2a2c4                 | LR__4388
2a2c4     2E          | 	byte	"."
2a2c5     00          | 	byte	0
2a2c6                 | LR__4389
2a2c6     00          | 	byte	0
2a2c7     00          | 	byte	0
2a2c8                 | LR__4390
2a2c8     00          | 	byte	0
2a2c9     00          | 	byte	0
2a2ca                 | LR__4391
2a2ca     00          | 	byte	0
2a2cb     00          | 	byte	0
2a2cc                 | LR__4392
2a2cc     2A 3A 3C 3E 
2a2d0     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2a2d4     00          | 	byte	0
2a2d5                 | LR__4393
2a2d5     2B 2C 3B 3D 
2a2d9     5B 5D       | 	byte	"+,;=[]"
2a2db     00          | 	byte	0
2a2dc                 | LR__4394
2a2dc     46 41 54 33 
2a2e0     32 20 20 20 | 	byte	"FAT32   "
2a2e4     00          | 	byte	0
2a2e5                 | LR__4395
2a2e5     54 5A       | 	byte	"TZ"
2a2e7     00          | 	byte	0
2a2e8                 | LR__4396
2a2e8     00          | 	byte	0
2a2e9     00          | 	byte	0
2a2ea                 | LR__4397
2a2ea                 | 	byte	
2a2ea     00          | 	byte	0
2a2eb                 | LR__4398
2a2eb                 | 	byte	
2a2eb     00          | 	byte	0
2a2ec                 | LR__4399
2a2ec     22          | 	byte	34
2a2ed     00          | 	byte	0
2a2ee                 | LR__4400
2a2ee     22          | 	byte	34
2a2ef     00          | 	byte	0
2a2f0                 | LR__4401
2a2f0     3A          | 	byte	":"
2a2f1     00          | 	byte	0
2a2f2                 | LR__4402
2a2f2                 | 	byte	
2a2f2     00          | 	byte	0
2a2f3                 | LR__4403
2a2f3                 | 	byte	
2a2f3     00          | 	byte	0
2a2f4                 | LR__4404
2a2f4                 | 	byte	
2a2f4     00          | 	byte	0
2a2f5                 | LR__4405
2a2f5                 | 	byte	
2a2f5     00          | 	byte	0
2a2f6                 | LR__4406
2a2f6                 | 	byte	
2a2f6     00          | 	byte	0
2a2f7                 | LR__4407
2a2f7                 | 	byte	
2a2f7     00          | 	byte	0
2a2f8                 | LR__4408
2a2f8                 | 	byte	
2a2f8     00          | 	byte	0
2a2f9                 | LR__4409
2a2f9     22          | 	byte	34
2a2fa     00          | 	byte	0
2a2fb                 | LR__4410
2a2fb     22          | 	byte	34
2a2fc     00          | 	byte	0
2a2fd                 | LR__4411
2a2fd     22          | 	byte	34
2a2fe     00          | 	byte	0
2a2ff                 | LR__4412
2a2ff     22          | 	byte	34
2a300     00          | 	byte	0
2a301                 | LR__4413
2a301     22          | 	byte	34
2a302     00          | 	byte	0
2a303                 | LR__4414
2a303     3E          | 	byte	">"
2a304     00          | 	byte	0
2a305                 | LR__4415
2a305     3E          | 	byte	">"
2a306     00          | 	byte	0
2a307                 | LR__4416
2a307     2B          | 	byte	"+"
2a308     00          | 	byte	0
2a309                 | LR__4417
2a309     2D          | 	byte	"-"
2a30a     00          | 	byte	0
2a30b                 | LR__4418
2a30b     2A          | 	byte	"*"
2a30c     00          | 	byte	0
2a30d                 | LR__4419
2a30d     2F          | 	byte	"/"
2a30e     00          | 	byte	0
2a30f                 | LR__4420
2a30f     5E          | 	byte	"^"
2a310     00          | 	byte	0
2a311                 | LR__4421
2a311     3D          | 	byte	"="
2a312     00          | 	byte	0
2a313                 | LR__4422
2a313     2B          | 	byte	"+"
2a314     00          | 	byte	0
2a315                 | LR__4423
2a315     2B          | 	byte	"+"
2a316     00          | 	byte	0
2a317                 | LR__4424
2a317     2D          | 	byte	"-"
2a318     00          | 	byte	0
2a319                 | LR__4425
2a319     2D          | 	byte	"-"
2a31a     00          | 	byte	0
2a31b                 | LR__4426
2a31b     3C          | 	byte	"<"
2a31c     00          | 	byte	0
2a31d                 | LR__4427
2a31d     3E          | 	byte	">"
2a31e     00          | 	byte	0
2a31f                 | LR__4428
2a31f     22          | 	byte	34
2a320     00          | 	byte	0
2a321                 | LR__4429
2a321     22          | 	byte	34
2a322     00          | 	byte	0
2a323                 | LR__4430
2a323     2E          | 	byte	"."
2a324     00          | 	byte	0
2a325                 | LR__4431
2a325     3F          | 	byte	"?"
2a326     00          | 	byte	0
2a327                 | LR__4432
2a327     3F          | 	byte	"?"
2a328     00          | 	byte	0
2a329                 | LR__4433
2a329     6D 6F 75 73 
2a32d     65          | 	byte	"mouse"
2a32e     00          | 	byte	0
2a32f                 | LR__4434
2a32f     63 75 72 73 
2a333     6F 72       | 	byte	"cursor"
2a335     00          | 	byte	0
2a336                 | LR__4435
2a336     63 6C 69 63 
2a33a     6B          | 	byte	"click"
2a33b     00          | 	byte	0
2a33c                 | LR__4436
2a33c     6F 6E       | 	byte	"on"
2a33e     00          | 	byte	0
2a33f                 | LR__4437
2a33f     31          | 	byte	"1"
2a340     00          | 	byte	0
2a341                 | LR__4438
2a341     6F 66 66    | 	byte	"off"
2a344     00          | 	byte	0
2a345                 | LR__4439
2a345     30          | 	byte	"0"
2a346     00          | 	byte	0
2a347                 | LR__4440
2a347     6D 6F 64 65 | 	byte	"mode"
2a34b     00          | 	byte	0
2a34c                 | LR__4441
2a34c     6D 2E       | 	byte	"m."
2a34e     00          | 	byte	0
2a34f                 | LR__4442
2a34f     61 74 61 72 
2a353     69          | 	byte	"atari"
2a354     00          | 	byte	0
2a355                 | LR__4443
2a355     30          | 	byte	"0"
2a356     00          | 	byte	0
2a357                 | LR__4444
2a357     70 63 5F 61 
2a35b     6D 62 65 72 | 	byte	"pc_amber"
2a35f     00          | 	byte	0
2a360                 | LR__4445
2a360     31          | 	byte	"1"
2a361     00          | 	byte	0
2a362                 | LR__4446
2a362     70 63 5F 67 
2a366     72 65 65 6E | 	byte	"pc_green"
2a36a     00          | 	byte	0
2a36b                 | LR__4447
2a36b     32          | 	byte	"2"
2a36c     00          | 	byte	0
2a36d                 | LR__4448
2a36d     70 63 5F 77 
2a371     68 69 74 65 | 	byte	"pc_white"
2a375     00          | 	byte	0
2a376                 | LR__4449
2a376     33          | 	byte	"3"
2a377     00          | 	byte	0
2a378                 | LR__4450
2a378     73 74       | 	byte	"st"
2a37a     00          | 	byte	0
2a37b                 | LR__4451
2a37b     34          | 	byte	"4"
2a37c     00          | 	byte	0
2a37d                 | LR__4452
2a37d                 | 	byte	
2a37d     00          | 	byte	0
2a37e                 | LR__4453
2a37e     6C 6F 61 64 | 	byte	"load"
2a382     00          | 	byte	0
2a383                 | LR__4454
2a383     73 61 76 65 | 	byte	"save"
2a387     00          | 	byte	0
2a388                 | LR__4455
2a388     62 72 75 6E | 	byte	"brun"
2a38c     00          | 	byte	0
2a38d                 | LR__4456
2a38d     6C 6F 2E    | 	byte	"lo."
2a390     00          | 	byte	0
2a391                 | LR__4457
2a391     73 2E       | 	byte	"s."
2a393     00          | 	byte	0
2a394                 | LR__4458
2a394     62 72 2E    | 	byte	"br."
2a397     00          | 	byte	0
2a398                 | LR__4459
2a398                 | 	byte	
2a398     00          | 	byte	0
2a399                 | LR__4460
2a399                 | 	byte	
2a399     00          | 	byte	0
2a39a                 | LR__4461
2a39a                 | 	byte	
2a39a     00          | 	byte	0
2a39b                 | LR__4462
2a39b                 | 	byte	
2a39b     00          | 	byte	0
2a39c                 | LR__4463
2a39c     20 55 73 65 
2a3a0     72 20 66 75 
2a3a4     6E 63 74 69 
2a3a8     6F 6E 73 20 
2a3ac     61 6E 64 20 
2a3b0     61 72 72 61 
2a3b4     79 73 20 6E 
2a3b8     6F 74 20 79 
2a3bc     65 74 20 69 
2a3c0     6D 70 6C 65 
2a3c4     6D 65 6E 74 
2a3c8     65 64       | 	byte	" User functions and arrays not yet implemented"
2a3ca     00          | 	byte	0
2a3cb                 | LR__4464
2a3cb                 | 	byte	
2a3cb     00          | 	byte	0
2a3cc                 | LR__4465
2a3cc                 | 	byte	
2a3cc     00          | 	byte	0
2a3cd                 | LR__4466
2a3cd     52 65 61 64 
2a3d1     79          | 	byte	"Ready"
2a3d2     00          | 	byte	0
2a3d3                 | LR__4467
2a3d3     2B          | 	byte	"+"
2a3d4     00          | 	byte	0
2a3d5                 | LR__4468
2a3d5     2D          | 	byte	"-"
2a3d6     00          | 	byte	0
2a3d7                 | LR__4469
2a3d7     6F 72       | 	byte	"or"
2a3d9     00          | 	byte	0
2a3da                 | LR__4470
2a3da     78 6F 72    | 	byte	"xor"
2a3dd     00          | 	byte	0
2a3de                 | LR__4471
2a3de     2A          | 	byte	"*"
2a3df     00          | 	byte	0
2a3e0                 | LR__4472
2a3e0     2F          | 	byte	"/"
2a3e1     00          | 	byte	0
2a3e2                 | LR__4473
2a3e2     61 6E 64    | 	byte	"and"
2a3e5     00          | 	byte	0
2a3e6                 | LR__4474
2a3e6     64 69 76    | 	byte	"div"
2a3e9     00          | 	byte	0
2a3ea                 | LR__4475
2a3ea     6D 6F 64    | 	byte	"mod"
2a3ed     00          | 	byte	0
2a3ee                 | LR__4476
2a3ee     73 68 6C    | 	byte	"shl"
2a3f1     00          | 	byte	0
2a3f2                 | LR__4477
2a3f2     73 68 72    | 	byte	"shr"
2a3f5     00          | 	byte	0
2a3f6                 | LR__4478
2a3f6     5E          | 	byte	"^"
2a3f7     00          | 	byte	0
2a3f8                 | LR__4479
2a3f8     6E 6F 74    | 	byte	"not"
2a3fb     00          | 	byte	0
2a3fc                 | LR__4480
2a3fc     40          | 	byte	"@"
2a3fd     00          | 	byte	0
2a3fe                 | LR__4481
2a3fe     3D          | 	byte	"="
2a3ff     00          | 	byte	0
2a400                 | LR__4482
2a400     3E 3D       | 	byte	">="
2a402     00          | 	byte	0
2a403                 | LR__4483
2a403     3C 3D       | 	byte	"<="
2a405     00          | 	byte	0
2a406                 | LR__4484
2a406     3C          | 	byte	"<"
2a407     00          | 	byte	0
2a408                 | LR__4485
2a408     3E          | 	byte	">"
2a409     00          | 	byte	0
2a40a                 | LR__4486
2a40a     3C 3E       | 	byte	"<>"
2a40c     00          | 	byte	0
2a40d                 | LR__4487
2a40d     2B 2B       | 	byte	"++"
2a40f     00          | 	byte	0
2a410                 | LR__4488
2a410     2D 2D       | 	byte	"--"
2a412     00          | 	byte	0
2a413                 | LR__4489
2a413     2B          | 	byte	"+"
2a414     00          | 	byte	0
2a415                 | LR__4490
2a415     2D          | 	byte	"-"
2a416     00          | 	byte	0
2a417                 | LR__4491
2a417     3D          | 	byte	"="
2a418     00          | 	byte	0
2a419                 | LR__4492
2a419     2C          | 	byte	","
2a41a     00          | 	byte	0
2a41b                 | LR__4493
2a41b     2A          | 	byte	"*"
2a41c     00          | 	byte	0
2a41d                 | LR__4494
2a41d     2F          | 	byte	"/"
2a41e     00          | 	byte	0
2a41f                 | LR__4495
2a41f     3B          | 	byte	";"
2a420     00          | 	byte	0
2a421                 | LR__4496
2a421     22          | 	byte	34
2a422     00          | 	byte	0
2a423                 | LR__4497
2a423     5E          | 	byte	"^"
2a424     00          | 	byte	0
2a425                 | LR__4498
2a425     29          | 	byte	")"
2a426     00          | 	byte	0
2a427                 | LR__4499
2a427     28          | 	byte	"("
2a428     00          | 	byte	0
2a429                 | LR__4500
2a429     3A          | 	byte	":"
2a42a     00          | 	byte	0
2a42b                 | LR__4501
2a42b     20          | 	byte	" "
2a42c     00          | 	byte	0
2a42d                 | LR__4502
2a42d     3E          | 	byte	">"
2a42e     00          | 	byte	0
2a42f                 | LR__4503
2a42f     3C          | 	byte	"<"
2a430     00          | 	byte	0
2a431                 | LR__4504
2a431     3D          | 	byte	"="
2a432     00          | 	byte	0
2a433                 | LR__4505
2a433     62 65 65 70 | 	byte	"beep"
2a437     00          | 	byte	0
2a438                 | LR__4506
2a438     62 2E       | 	byte	"b."
2a43a     00          | 	byte	0
2a43b                 | LR__4507
2a43b     62 6F 78    | 	byte	"box"
2a43e     00          | 	byte	0
2a43f                 | LR__4508
2a43f     62 72 75 6E | 	byte	"brun"
2a443     00          | 	byte	0
2a444                 | LR__4509
2a444     62 72 2E    | 	byte	"br."
2a447     00          | 	byte	0
2a448                 | LR__4510
2a448     63 69 72 63 
2a44c     6C 65       | 	byte	"circle"
2a44e     00          | 	byte	0
2a44f                 | LR__4511
2a44f     63 69 2E    | 	byte	"ci."
2a452     00          | 	byte	0
2a453                 | LR__4512
2a453     63 6C 69 63 
2a457     6B          | 	byte	"click"
2a458     00          | 	byte	0
2a459                 | LR__4513
2a459     63 6C 73    | 	byte	"cls"
2a45c     00          | 	byte	0
2a45d                 | LR__4514
2a45d     63 6F 6C 6F 
2a461     72          | 	byte	"color"
2a462     00          | 	byte	0
2a463                 | LR__4515
2a463     63 2E       | 	byte	"c."
2a465     00          | 	byte	0
2a466                 | LR__4516
2a466     63 73 61 76 
2a46a     65          | 	byte	"csave"
2a46b     00          | 	byte	0
2a46c                 | LR__4517
2a46c     63 73 2E    | 	byte	"cs."
2a46f     00          | 	byte	0
2a470                 | LR__4518
2a470     63 75 72 73 
2a474     6F 72       | 	byte	"cursor"
2a476     00          | 	byte	0
2a477                 | LR__4519
2a477     64 65 66 73 
2a47b     6E 64       | 	byte	"defsnd"
2a47d     00          | 	byte	0
2a47e                 | LR__4520
2a47e     64 65 66 65 
2a482     6E 76       | 	byte	"defenv"
2a484     00          | 	byte	0
2a485                 | LR__4521
2a485     64 65 66 73 
2a489     70 72 69 74 
2a48d     65          | 	byte	"defsprite"
2a48e     00          | 	byte	0
2a48f                 | LR__4522
2a48f     64 73 2E    | 	byte	"ds."
2a492     00          | 	byte	0
2a493                 | LR__4523
2a493     64 65 67    | 	byte	"deg"
2a496     00          | 	byte	0
2a497                 | LR__4524
2a497     64 69 6D    | 	byte	"dim"
2a49a     00          | 	byte	0
2a49b                 | LR__4525
2a49b     64 69 72    | 	byte	"dir"
2a49e     00          | 	byte	0
2a49f                 | LR__4526
2a49f     64 72 61 77 | 	byte	"draw"
2a4a3     00          | 	byte	0
2a4a4                 | LR__4527
2a4a4     64 72 2E    | 	byte	"dr."
2a4a7     00          | 	byte	0
2a4a8                 | LR__4528
2a4a8     65 6C 73 65 | 	byte	"else"
2a4ac     00          | 	byte	0
2a4ad                 | LR__4529
2a4ad     66 63 69 72 
2a4b1     63 6C 65    | 	byte	"fcircle"
2a4b4     00          | 	byte	0
2a4b5                 | LR__4530
2a4b5     66 63 2E    | 	byte	"fc."
2a4b8     00          | 	byte	0
2a4b9                 | LR__4531
2a4b9     66 69 6C 6C | 	byte	"fill"
2a4bd     00          | 	byte	0
2a4be                 | LR__4532
2a4be     66 69 2E    | 	byte	"fi."
2a4c1     00          | 	byte	0
2a4c2                 | LR__4533
2a4c2     66 6F 6E 74 | 	byte	"font"
2a4c6     00          | 	byte	0
2a4c7                 | LR__4534
2a4c7     66 6F 72    | 	byte	"for"
2a4ca     00          | 	byte	0
2a4cb                 | LR__4535
2a4cb     66 2E       | 	byte	"f."
2a4cd     00          | 	byte	0
2a4ce                 | LR__4536
2a4ce     66 72 61 6D 
2a4d2     65          | 	byte	"frame"
2a4d3     00          | 	byte	0
2a4d4                 | LR__4537
2a4d4     66 72 2E    | 	byte	"fr."
2a4d7     00          | 	byte	0
2a4d8                 | LR__4538
2a4d8     67 6F 74 6F | 	byte	"goto"
2a4dc     00          | 	byte	0
2a4dd                 | LR__4539
2a4dd     67 2E       | 	byte	"g."
2a4df     00          | 	byte	0
2a4e0                 | LR__4540
2a4e0     69 66       | 	byte	"if"
2a4e2     00          | 	byte	0
2a4e3                 | LR__4541
2a4e3     69 6E 6B    | 	byte	"ink"
2a4e6     00          | 	byte	0
2a4e7                 | LR__4542
2a4e7     69 2E       | 	byte	"i."
2a4e9     00          | 	byte	0
2a4ea                 | LR__4543
2a4ea     69 6E 74    | 	byte	"int"
2a4ed     00          | 	byte	0
2a4ee                 | LR__4544
2a4ee     6C 69 73 74 | 	byte	"list"
2a4f2     00          | 	byte	0
2a4f3                 | LR__4545
2a4f3     6C 2E       | 	byte	"l."
2a4f5     00          | 	byte	0
2a4f6                 | LR__4546
2a4f6     6C 6F 61 64 | 	byte	"load"
2a4fa     00          | 	byte	0
2a4fb                 | LR__4547
2a4fb     6C 6F 2E    | 	byte	"lo."
2a4fe     00          | 	byte	0
2a4ff                 | LR__4548
2a4ff     6D 6F 64 65 | 	byte	"mode"
2a503     00          | 	byte	0
2a504                 | LR__4549
2a504     6D 2E       | 	byte	"m."
2a506     00          | 	byte	0
2a507                 | LR__4550
2a507     6D 6F 75 73 
2a50b     65          | 	byte	"mouse"
2a50c     00          | 	byte	0
2a50d                 | LR__4551
2a50d     6E 65 77    | 	byte	"new"
2a510     00          | 	byte	0
2a511                 | LR__4552
2a511     6E 65 78 74 | 	byte	"next"
2a515     00          | 	byte	0
2a516                 | LR__4553
2a516     6E 2E       | 	byte	"n."
2a518     00          | 	byte	0
2a519                 | LR__4554
2a519     70 61 70 65 
2a51d     72          | 	byte	"paper"
2a51e     00          | 	byte	0
2a51f                 | LR__4555
2a51f     70 2E       | 	byte	"p."
2a521     00          | 	byte	0
2a522                 | LR__4556
2a522     70 69 6E 66 
2a526     6C 6F 61 74 | 	byte	"pinfloat"
2a52a     00          | 	byte	0
2a52b                 | LR__4557
2a52b     70 69 6E 68 
2a52f     69          | 	byte	"pinhi"
2a530     00          | 	byte	0
2a531                 | LR__4558
2a531     70 69 6E 6C 
2a535     6F          | 	byte	"pinlo"
2a536     00          | 	byte	0
2a537                 | LR__4559
2a537     70 69 6E 73 
2a53b     74 61 72 74 | 	byte	"pinstart"
2a53f     00          | 	byte	0
2a540                 | LR__4560
2a540     70 69 6E 74 
2a544     6F 67 67 6C 
2a548     65          | 	byte	"pintoggle"
2a549     00          | 	byte	0
2a54a                 | LR__4561
2a54a     70 69 6E 77 
2a54e     72 69 74 65 | 	byte	"pinwrite"
2a552     00          | 	byte	0
2a553                 | LR__4562
2a553     70 6C 61 79 | 	byte	"play"
2a557     00          | 	byte	0
2a558                 | LR__4563
2a558     70 6C 6F 74 | 	byte	"plot"
2a55c     00          | 	byte	0
2a55d                 | LR__4564
2a55d     70 6C 2E    | 	byte	"pl."
2a560     00          | 	byte	0
2a561                 | LR__4565
2a561     70 6F 73 69 
2a565     74 69 6F 6E | 	byte	"position"
2a569     00          | 	byte	0
2a56a                 | LR__4566
2a56a     70 6F 73 2E | 	byte	"pos."
2a56e     00          | 	byte	0
2a56f                 | LR__4567
2a56f     70 72 69 6E 
2a573     74          | 	byte	"print"
2a574     00          | 	byte	0
2a575                 | LR__4568
2a575     3F          | 	byte	"?"
2a576     00          | 	byte	0
2a577                 | LR__4569
2a577     72 61 64    | 	byte	"rad"
2a57a     00          | 	byte	0
2a57b                 | LR__4570
2a57b     72 65 6C 65 
2a57f     61 73 65    | 	byte	"release"
2a582     00          | 	byte	0
2a583                 | LR__4571
2a583     72 75 6E    | 	byte	"run"
2a586     00          | 	byte	0
2a587                 | LR__4572
2a587     73 61 76 65 | 	byte	"save"
2a58b     00          | 	byte	0
2a58c                 | LR__4573
2a58c     73 2E       | 	byte	"s."
2a58e     00          | 	byte	0
2a58f                 | LR__4574
2a58f     73 65 74 64 
2a593     65 6C 61 79 | 	byte	"setdelay"
2a597     00          | 	byte	0
2a598                 | LR__4575
2a598     73 65 74 65 
2a59c     6E 76       | 	byte	"setenv"
2a59e     00          | 	byte	0
2a59f                 | LR__4576
2a59f     73 65 74 6C 
2a5a3     65 6E       | 	byte	"setlen"
2a5a5     00          | 	byte	0
2a5a6                 | LR__4577
2a5a6     73 65 74 70 
2a5aa     61 6E       | 	byte	"setpan"
2a5ac     00          | 	byte	0
2a5ad                 | LR__4578
2a5ad     73 65 74 73 
2a5b1     75 73 74 61 
2a5b5     69 6E       | 	byte	"setsustain"
2a5b7     00          | 	byte	0
2a5b8                 | LR__4579
2a5b8     73 65 74 76 
2a5bc     6F 6C       | 	byte	"setvol"
2a5be     00          | 	byte	0
2a5bf                 | LR__4580
2a5bf     73 65 74 77 
2a5c3     61 76 65    | 	byte	"setwave"
2a5c6     00          | 	byte	0
2a5c7                 | LR__4581
2a5c7     73 6F 75 6E 
2a5cb     64          | 	byte	"sound"
2a5cc     00          | 	byte	0
2a5cd                 | LR__4582
2a5cd     73 6F 2E    | 	byte	"so."
2a5d0     00          | 	byte	0
2a5d1                 | LR__4583
2a5d1     73 70 72 69 
2a5d5     74 65       | 	byte	"sprite"
2a5d7     00          | 	byte	0
2a5d8                 | LR__4584
2a5d8     73 70 2E    | 	byte	"sp."
2a5db     00          | 	byte	0
2a5dc                 | LR__4585
2a5dc     74 68 65 6E | 	byte	"then"
2a5e0     00          | 	byte	0
2a5e1                 | LR__4586
2a5e1     77 61 69 74 
2a5e5     6D 73       | 	byte	"waitms"
2a5e7     00          | 	byte	0
2a5e8                 | LR__4587
2a5e8     77 61 69 74 
2a5ec     63 6C 6F 63 
2a5f0     6B          | 	byte	"waitclock"
2a5f1     00          | 	byte	0
2a5f2                 | LR__4588
2a5f2     77 63 2E    | 	byte	"wc."
2a5f5     00          | 	byte	0
2a5f6                 | LR__4589
2a5f6     77 61 69 74 
2a5fa     76 62 6C    | 	byte	"waitvbl"
2a5fd     00          | 	byte	0
2a5fe                 | LR__4590
2a5fe     77 76 2E    | 	byte	"wv."
2a601     00          | 	byte	0
2a602                 | LR__4591
2a602     77 78 70 69 
2a606     6E          | 	byte	"wxpin"
2a607     00          | 	byte	0
2a608                 | LR__4592
2a608     77 79 70 69 
2a60c     6E          | 	byte	"wypin"
2a60d     00          | 	byte	0
2a60e                 | LR__4593
2a60e     61 63 6F 73 | 	byte	"acos"
2a612     00          | 	byte	0
2a613                 | LR__4594
2a613     61 73 69 6E | 	byte	"asin"
2a617     00          | 	byte	0
2a618                 | LR__4595
2a618     61 74 6E    | 	byte	"atn"
2a61b     00          | 	byte	0
2a61c                 | LR__4596
2a61c     63 6F 73    | 	byte	"cos"
2a61f     00          | 	byte	0
2a620                 | LR__4597
2a620     67 65 74 70 
2a624     69 78 65 6C | 	byte	"getpixel"
2a628     00          | 	byte	0
2a629                 | LR__4598
2a629     67 65 2E    | 	byte	"ge."
2a62c     00          | 	byte	0
2a62d                 | LR__4599
2a62d     67 65 74 65 
2a631     6E 76 73 75 
2a635     73 74 61 69 
2a639     6E          | 	byte	"getenvsustain"
2a63a     00          | 	byte	0
2a63b                 | LR__4600
2a63b     67 65 74 74 
2a63f     69 6D 65    | 	byte	"gettime"
2a642     00          | 	byte	0
2a643                 | LR__4601
2a643     6D 6F 75 73 
2a647     65 6B       | 	byte	"mousek"
2a649     00          | 	byte	0
2a64a                 | LR__4602
2a64a     6D 6F 75 73 
2a64e     65 77       | 	byte	"mousew"
2a650     00          | 	byte	0
2a651                 | LR__4603
2a651     6D 6F 75 73 
2a655     65 78       | 	byte	"mousex"
2a657     00          | 	byte	0
2a658                 | LR__4604
2a658     6D 6F 75 73 
2a65c     65 79       | 	byte	"mousey"
2a65e     00          | 	byte	0
2a65f                 | LR__4605
2a65f     70 69 6E 72 
2a663     65 61 64    | 	byte	"pinread"
2a666     00          | 	byte	0
2a667                 | LR__4606
2a667     72 64 70 69 
2a66b     6E          | 	byte	"rdpin"
2a66c     00          | 	byte	0
2a66d                 | LR__4607
2a66d     72 71 70 69 
2a671     6E          | 	byte	"rqpin"
2a672     00          | 	byte	0
2a673                 | LR__4608
2a673     72 6E 64    | 	byte	"rnd"
2a676     00          | 	byte	0
2a677                 | LR__4609
2a677     73 69 6E    | 	byte	"sin"
2a67a     00          | 	byte	0
2a67b                 | LR__4610
2a67b     73 71 72    | 	byte	"sqr"
2a67e     00          | 	byte	0
2a67f                 | LR__4611
2a67f     73 74 69 63 
2a683     6B          | 	byte	"stick"
2a684     00          | 	byte	0
2a685                 | LR__4612
2a685     73 74 72 69 
2a689     67          | 	byte	"strig"
2a68a     00          | 	byte	0
2a68b                 | LR__4613
2a68b     74 61 6E    | 	byte	"tan"
2a68e     00          | 	byte	0
2a68f                 | LR__4614
2a68f     61          | 	byte	"a"
2a690     00          | 	byte	0
2a691                 | LR__4615
2a691     7A          | 	byte	"z"
2a692     00          | 	byte	0
2a693                 | LR__4616
2a693     5F          | 	byte	"_"
2a694     00          | 	byte	0
2a695                 | LR__4617
2a695     61          | 	byte	"a"
2a696     00          | 	byte	0
2a697                 | LR__4618
2a697     7A          | 	byte	"z"
2a698     00          | 	byte	0
2a699                 | LR__4619
2a699     30          | 	byte	"0"
2a69a     00          | 	byte	0
2a69b                 | LR__4620
2a69b     39          | 	byte	"9"
2a69c     00          | 	byte	0
2a69d                 | LR__4621
2a69d     5F          | 	byte	"_"
2a69e     00          | 	byte	0
2a69f                 | LR__4622
2a69f     2E          | 	byte	"."
2a6a0     00          | 	byte	0
2a6a1                 | LR__4623
2a6a1     61          | 	byte	"a"
2a6a2     00          | 	byte	0
2a6a3                 | LR__4624
2a6a3     7A          | 	byte	"z"
2a6a4     00          | 	byte	0
2a6a5                 | LR__4625
2a6a5     30          | 	byte	"0"
2a6a6     00          | 	byte	0
2a6a7                 | LR__4626
2a6a7     39          | 	byte	"9"
2a6a8     00          | 	byte	0
2a6a9                 | LR__4627
2a6a9     5F          | 	byte	"_"
2a6aa     00          | 	byte	0
2a6ab                 | LR__4628
2a6ab     24          | 	byte	"$"
2a6ac     00          | 	byte	0
2a6ad                 | LR__4629
2a6ad     25          | 	byte	"%"
2a6ae     00          | 	byte	0
2a6af                 | LR__4630
2a6af     21          | 	byte	"!"
2a6b0     00          | 	byte	0
2a6b1                 | LR__4631
2a6b1     30          | 	byte	"0"
2a6b2     00          | 	byte	0
2a6b3                 | LR__4632
2a6b3     39          | 	byte	"9"
2a6b4     00          | 	byte	0
2a6b5                 | LR__4633
2a6b5     2E          | 	byte	"."
2a6b6     00          | 	byte	0
2a6b7                 | LR__4634
2a6b7     24          | 	byte	"$"
2a6b8     00          | 	byte	0
2a6b9                 | LR__4635
2a6b9     25          | 	byte	"%"
2a6ba     00          | 	byte	0
2a6bb                 | LR__4636
2a6bb     2D          | 	byte	"-"
2a6bc     00          | 	byte	0
2a6bd                 | LR__4637
2a6bd     2E          | 	byte	"."
2a6be     00          | 	byte	0
2a6bf                 | LR__4638
2a6bf     30          | 	byte	"0"
2a6c0     00          | 	byte	0
2a6c1                 | LR__4639
2a6c1     39          | 	byte	"9"
2a6c2     00          | 	byte	0
2a6c3                 | LR__4640
2a6c3     5F          | 	byte	"_"
2a6c4     00          | 	byte	0
2a6c5                 | LR__4641
2a6c5     2E          | 	byte	"."
2a6c6     00          | 	byte	0
2a6c7                 | LR__4642
2a6c7     45          | 	byte	"E"
2a6c8     00          | 	byte	0
2a6c9                 | LR__4643
2a6c9     65          | 	byte	"e"
2a6ca     00          | 	byte	0
2a6cb                 | LR__4644
2a6cb     2D          | 	byte	"-"
2a6cc     00          | 	byte	0
2a6cd                 | LR__4645
2a6cd     2D          | 	byte	"-"
2a6ce     00          | 	byte	0
2a6cf                 | LR__4646
2a6cf     65          | 	byte	"e"
2a6d0     00          | 	byte	0
2a6d1                 | LR__4647
2a6d1     2E          | 	byte	"."
2a6d2     00          | 	byte	0
2a6d3                 | LR__4648
2a6d3     45          | 	byte	"E"
2a6d4     00          | 	byte	0
2a6d5                 | LR__4649
2a6d5     65          | 	byte	"e"
2a6d6     00          | 	byte	0
2a6d7                 | LR__4650
2a6d7     30          | 	byte	"0"
2a6d8     00          | 	byte	0
2a6d9                 | LR__4651
2a6d9     39          | 	byte	"9"
2a6da     00          | 	byte	0
2a6db                 | LR__4652
2a6db     24          | 	byte	"$"
2a6dc     00          | 	byte	0
2a6dd                 | LR__4653
2a6dd     25          | 	byte	"%"
2a6de     00          | 	byte	0
2a6df                 | LR__4654
2a6df     2D          | 	byte	"-"
2a6e0     00          | 	byte	0
2a6e1                 | LR__4655
2a6e1     30          | 	byte	"0"
2a6e2     00          | 	byte	0
2a6e3                 | LR__4656
2a6e3     39          | 	byte	"9"
2a6e4     00          | 	byte	0
2a6e5                 | LR__4657
2a6e5     5F          | 	byte	"_"
2a6e6     00          | 	byte	0
2a6e7                 | LR__4658
2a6e7     30          | 	byte	"0"
2a6e8     00          | 	byte	0
2a6e9                 | LR__4659
2a6e9     39          | 	byte	"9"
2a6ea     00          | 	byte	0
2a6eb                 | LR__4660
2a6eb     5F          | 	byte	"_"
2a6ec     00          | 	byte	0
2a6ed                 | LR__4661
2a6ed     22          | 	byte	34
2a6ee     00          | 	byte	0
2a6ef                 | LR__4662
2a6ef     22          | 	byte	34
2a6f0     00          | 	byte	0
2a6f1                 | LR__4663
2a6f1     44 69 6D 3A 
2a6f5     20 61 74 20 
2a6f9     6C 69 6E 65 
2a6fd     20          | 	byte	"Dim: at line "
2a6fe     00          | 	byte	0
2a6ff                 | LR__4664
2a6ff     3A 20 77 61 
2a703     72 6E 69 6E 
2a707     67 3A 20 74 
2a70b     68 65 20 76 
2a70f     61 72 69 61 
2a713     62 6C 65 20 
2a717     65 78 69 73 
2a71b     74 65 64 2E | 	byte	": warning: the variable existed."
2a71f     00          | 	byte	0
2a720                 | LR__4665
2a720     28          | 	byte	"("
2a721     00          | 	byte	0
2a722                 | LR__4666
2a722     61 73       | 	byte	"as"
2a724     00          | 	byte	0
2a725                 | LR__4667
2a725     61 73       | 	byte	"as"
2a727     00          | 	byte	0
2a728                 | LR__4668
2a728     2C          | 	byte	","
2a729     00          | 	byte	0
2a72a                 | LR__4669
2a72a     29          | 	byte	")"
2a72b     00          | 	byte	0
2a72c                 | LR__4670
2a72c     29          | 	byte	")"
2a72d     00          | 	byte	0
2a72e                 | LR__4671
2a72e     61 73       | 	byte	"as"
2a730     00          | 	byte	0
2a731                 | LR__4672
2a731     62 79 74 65 | 	byte	"byte"
2a735     00          | 	byte	0
2a736                 | LR__4673
2a736     75 62 79 74 
2a73a     65          | 	byte	"ubyte"
2a73b     00          | 	byte	0
2a73c                 | LR__4674
2a73c     73 68 6F 72 
2a740     74          | 	byte	"short"
2a741     00          | 	byte	0
2a742                 | LR__4675
2a742     75 73 68 6F 
2a746     72 74       | 	byte	"ushort"
2a748     00          | 	byte	0
2a749                 | LR__4676
2a749     6C 6F 6E 67 | 	byte	"long"
2a74d     00          | 	byte	0
2a74e                 | LR__4677
2a74e     69 6E 74 65 
2a752     67 65 72    | 	byte	"integer"
2a755     00          | 	byte	0
2a756                 | LR__4678
2a756     75 6C 6F 6E 
2a75a     67          | 	byte	"ulong"
2a75b     00          | 	byte	0
2a75c                 | LR__4679
2a75c     69 6E 74 36 
2a760     34          | 	byte	"int64"
2a761     00          | 	byte	0
2a762                 | LR__4680
2a762     75 69 6E 74 
2a766     36 34       | 	byte	"uint64"
2a768     00          | 	byte	0
2a769                 | LR__4681
2a769     73 69 6E 67 
2a76d     6C 65       | 	byte	"single"
2a76f     00          | 	byte	0
2a770                 | LR__4682
2a770     64 6F 75 62 
2a774     6C 65       | 	byte	"double"
2a776     00          | 	byte	0
2a777                 | LR__4683
2a777     73 74 72 69 
2a77b     6E 67       | 	byte	"string"
2a77d     00          | 	byte	0
2a77e                 | LR__4684
2a77e     74 6F       | 	byte	"to"
2a780     00          | 	byte	0
2a781                 | LR__4685
2a781     73 74 65 70 | 	byte	"step"
2a785     00          | 	byte	0
2a786                 | LR__4686
2a786     73 2E       | 	byte	"s."
2a788     00          | 	byte	0
2a789                 | LR__4687
2a789     57 65 20 68 
2a78d     61 76 65 20 
2a791     61 20 73 6C 
2a795     6F 77 20 67 
2a799     6F 74 6F 2C 
2a79d     20 74 6F 64 
2a7a1     6F 20 20    | 	byte	"We have a slow goto, todo  "
2a7a4     00          | 	byte	0
2a7a5                 | LR__4688
2a7a5     6E 6F 6E 61 
2a7a9     6D 65 2E 62 
2a7ad     61 73       | 	byte	"noname.bas"
2a7af     00          | 	byte	0
2a7b0                 | LR__4689
2a7b0                 | 	byte	
2a7b0     00          | 	byte	0
2a7b1                 | LR__4690
2a7b1     6E 6F 6E 61 
2a7b5     6D 65 2E 62 
2a7b9     61 73       | 	byte	"noname.bas"
2a7bb     00          | 	byte	0
2a7bc                 | LR__4691
2a7bc     2F          | 	byte	"/"
2a7bd     00          | 	byte	0
2a7be                 | LR__4692
2a7be                 | 	byte	
2a7be     00          | 	byte	0
2a7bf                 | LR__4693
2a7bf                 | 	byte	
2a7bf     00          | 	byte	0
2a7c0                 | LR__4694
2a7c0     6E 6F 6E 61 
2a7c4     6D 65 2E 62 
2a7c8     61 73       | 	byte	"noname.bas"
2a7ca     00          | 	byte	0
2a7cb                 | LR__4695
2a7cb     2F          | 	byte	"/"
2a7cc     00          | 	byte	0
2a7cd                 | LR__4696
2a7cd     53 79 73 74 
2a7d1     65 6D 20 65 
2a7d5     72 72 6F 72 
2a7d9     20          | 	byte	"System error "
2a7da     00          | 	byte	0
2a7db                 | LR__4697
2a7db     3A 20       | 	byte	": "
2a7dd     00          | 	byte	0
2a7de                 | LR__4698
2a7de     2F          | 	byte	"/"
2a7df     00          | 	byte	0
2a7e0                 | LR__4699
2a7e0     30          | 	byte	"0"
2a7e1     00          | 	byte	0
2a7e2                 | LR__4700
2a7e2     39          | 	byte	"9"
2a7e3     00          | 	byte	0
2a7e4                 | LR__4701
2a7e4                 | 	byte	
2a7e4     00          | 	byte	0
2a7e5                 | LR__4702
2a7e5     53 74 6F 70 
2a7e9     70 65 64 20 
2a7ed     61 74 20 6C 
2a7f1     69 6E 65 20 | 	byte	"Stopped at line "
2a7f5     00          | 	byte	0
2a7f6                 | LR__4703
2a7f6                 | 	byte	
2a7f6     00          | 	byte	0
2a7f7                 | LR__4704
2a7f7                 | 	byte	
2a7f7     00          | 	byte	0
2a7f8                 | LR__4705
2a7f8     2F 73 64 2F 
2a7fc     6D 65 64 69 
2a800     61 2F 68 2F | 	byte	"/sd/media/h/"
2a804     00          | 	byte	0
2a805                 | LR__4706
2a805     53 79 73 74 
2a809     65 6D 20 65 
2a80d     72 72 6F 72 
2a811     20          | 	byte	"System error "
2a812     00          | 	byte	0
2a813                 | LR__4707
2a813     3A 20       | 	byte	": "
2a815     00          | 	byte	0
2a816                 | LR__4708
2a816                 | 	byte	
2a816     00          | 	byte	0
2a817                 | LR__4709
2a817                 | 	byte	
2a817     00          | 	byte	0
2a818                 | LR__4710
2a818     2F 73 64 2F 
2a81c     6D 65 64 69 
2a820     61 2F 73 2F | 	byte	"/sd/media/s/"
2a824     00          | 	byte	0
2a825                 | LR__4711
2a825     53 79 73 74 
2a829     65 6D 20 65 
2a82d     72 72 6F 72 
2a831     20          | 	byte	"System error "
2a832     00          | 	byte	0
2a833                 | LR__4712
2a833     3A 20       | 	byte	": "
2a835     00          | 	byte	0
2a836                 | LR__4713
2a836     45 72 72 6F 
2a83a     72 20       | 	byte	"Error "
2a83c     00          | 	byte	0
2a83d                 | LR__4714
2a83d     3A 20       | 	byte	": "
2a83f     00          | 	byte	0
2a840                 | LR__4715
2a840                 | 	byte	
2a840     00          | 	byte	0
2a841                 | LR__4716
2a841     72 6E 64 3A 
2a845     20          | 	byte	"rnd: "
2a846     00          | 	byte	0
2a847                 | LR__4717
2a847     72 6E 64 3A 
2a84b     20          | 	byte	"rnd: "
2a84c     00          | 	byte	0
2a84d                 | LR__4718
2a84d     67 65 74 65 
2a851     6E 76 73 75 
2a855     73 74 61 69 
2a859     6E 3A 20    | 	byte	"getenvsustain: "
2a85c     00          | 	byte	0
2a85d                 | LR__4719
2a85d     73 69 6E 3A 
2a861     20          | 	byte	"sin: "
2a862     00          | 	byte	0
2a863                 | LR__4720
2a863     63 6F 73 3A 
2a867     20          | 	byte	"cos: "
2a868     00          | 	byte	0
2a869                 | LR__4721
2a869     74 61 6E 3A 
2a86d     20          | 	byte	"tan: "
2a86e     00          | 	byte	0
2a86f                 | LR__4722
2a86f     61 73 69 6E 
2a873     3A 20       | 	byte	"asin: "
2a875     00          | 	byte	0
2a876                 | LR__4723
2a876     61 63 6F 73 
2a87a     3A 20       | 	byte	"acos: "
2a87c     00          | 	byte	0
2a87d                 | LR__4724
2a87d     61 74 6E 3A 
2a881     20          | 	byte	"atn: "
2a882     00          | 	byte	0
2a883                 | LR__4725
2a883     73 71 72 3A 
2a887     20          | 	byte	"sqr: "
2a888     00          | 	byte	0
2a889                 | LR__4726
2a889     73 74 69 63 
2a88d     6B 3A 20    | 	byte	"stick: "
2a890     00          | 	byte	0
2a891                 | LR__4727
2a891     73 74 72 69 
2a895     67 3A 20    | 	byte	"strig: "
2a898     00          | 	byte	0
2a899                 | LR__4728
2a899     67 65 74 70 
2a89d     69 78 65 6C 
2a8a1     3A 20       | 	byte	"getpixel: "
2a8a3     00          | 	byte	0
2a8a4                 | LR__4729
2a8a4                 | 	byte	
2a8a4     00          | 	byte	0
2a8a5                 | LR__4730
2a8a5     2F 73 64 2F 
2a8a9     62 61 73    | 	byte	"/sd/bas"
2a8ac     00          | 	byte	0
2a8ad                 | LR__4731
2a8ad     57 6F 72 6B 
2a8b1     69 6E 67 20 
2a8b5     64 69 72 65 
2a8b9     63 74 6F 72 
2a8bd     79 3A 20    | 	byte	"Working directory: "
2a8c0     00          | 	byte	0
2a8c1                 | LR__4732
2a8c1     2A          | 	byte	"*"
2a8c2     00          | 	byte	0
2a8c3                 | LR__4733
2a8c3                 | 	byte	
2a8c3     00          | 	byte	0
2a8c4                 | LR__4734
2a8c4     5B 64 69 72 
2a8c8     5D 20       | 	byte	"[dir] "
2a8ca     00          | 	byte	0
2a8cb                 | LR__4735
2a8cb     2A          | 	byte	"*"
2a8cc     00          | 	byte	0
2a8cd                 | LR__4736
2a8cd                 | 	byte	
2a8cd     00          | 	byte	0
2a8ce                 | LR__4737
2a8ce     2D 2D 2D 2D 
2a8d2     2D 6D 6F 72 
2a8d6     65 2C 20 70 
2a8da     72 65 73 73 
2a8de     20 61 6E 79 
2a8e2     20 6B 65 79 | 	byte	"-----more, press any key"
2a8e6     00          | 	byte	0
2a8e7                 | LR__4738
2a8e7     20 20 20 20 
      ...             
2a8ff     20 20 20 20 
2a903     20          | 	byte	"                             "
2a904     00          | 	byte	0
2a905                 | LR__4739
2a905     2F          | 	byte	"/"
2a906     00          | 	byte	0
2a907                 | LR__4740
2a907     2F 73 64 2F 
2a90b     62 69 6E 2F | 	byte	"/sd/bin/"
2a90f     00          | 	byte	0
2a910                 | LR__4741
2a910     53 79 73 74 
2a914     65 6D 20 65 
2a918     72 72 6F 72 
2a91c     20          | 	byte	"System error "
2a91d     00          | 	byte	0
2a91e                 | LR__4742
2a91e     3A 20       | 	byte	": "
2a920     00          | 	byte	0
2a921                 | LR__4743
2a921                 | 	byte	
2a921     00          | 	byte	0
2a922                 | LR__4744
2a922     45 78 70 65 
2a926     63 74 65 64 
2a92a     20 6E 75 6D 
2a92e     62 65 72 2C 
2a932     20 67 6F 74 
2a936     20 73 6F 6D 
2a93a     65 74 68 69 
2a93e     6E 67 20 65 
2a942     6C 73 65 2E | 	byte	"Expected number, got something else."
2a946     00          | 	byte	0
2a947                 | LR__4745
2a947     43 61 6E 6E 
2a94b     6F 74 20 61 
2a94f     64 64 20 61 
2a953     20 6E 75 6D 
2a957     62 65 72 20 
2a95b     74 6F 20 61 
2a95f     20 73 74 72 
2a963     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2a967     00          | 	byte	0
2a968                 | LR__4746
2a968     43 61 6E 6E 
2a96c     6F 74 20 73 
2a970     75 62 73 74 
2a974     72 61 63 74 
2a978     20 73 74 72 
2a97c     69 6E 67 73 
2a980     2E          | 	byte	"Cannot substract strings."
2a981     00          | 	byte	0
2a982                 | LR__4747
2a982     55 6E 6B 6E 
2a986     6F 77 6E 20 
2a98a     65 72 72 6F 
2a98e     72 20 77 68 
2a992     69 6C 65 20 
2a996     61 64 64 69 
2a99a     6E 67 2E    | 	byte	"Unknown error while adding."
2a99d     00          | 	byte	0
2a99e                 | LR__4748
2a99e     55 6E 6B 6E 
2a9a2     6F 77 6E 20 
2a9a6     65 72 72 6F 
2a9aa     72 20 77 68 
2a9ae     69 6C 65 20 
2a9b2     73 75 62 73 
2a9b6     74 72 61 63 
2a9ba     74 69 6E 67 
2a9be     2E          | 	byte	"Unknown error while substracting."
2a9bf     00          | 	byte	0
2a9c0                 | LR__4749
2a9c0     43 61 6E 6E 
2a9c4     6F 74 20 64 
2a9c8     6F 20 6C 6F 
2a9cc     67 69 63 20 
2a9d0     6F 70 65 72 
2a9d4     61 74 69 6F 
2a9d8     6E 20 6F 6E 
2a9dc     20 73 74 72 
2a9e0     69 6E 67 20 
2a9e4     6F 72 20 66 
2a9e8     6C 6F 61 74 
2a9ec     2E          | 	byte	"Cannot do logic operation on string or float."
2a9ed     00          | 	byte	0
2a9ee                 | LR__4750
2a9ee     55 6E 6B 6E 
2a9f2     6F 77 6E 20 
2a9f6     65 72 72 6F 
2a9fa     72 20 77 68 
2a9fe     69 6C 65 20 
2aa02     64 6F 69 6E 
2aa06     67 20 6C 6F 
2aa0a     67 69 63 20 
2aa0e     6F 70 65 72 
2aa12     61 74 69 6F 
2aa16     6E 2E       | 	byte	"Unknown error while doing logic operation."
2aa18     00          | 	byte	0
2aa19                 | LR__4751
2aa19     43 61 6E 6E 
2aa1d     6F 74 20 6D 
2aa21     75 6C 74 69 
2aa25     70 6C 79 20 
2aa29     73 74 72 69 
2aa2d     6E 67 73 2E | 	byte	"Cannot multiply strings."
2aa31     00          | 	byte	0
2aa32                 | LR__4752
2aa32     55 6E 6B 6E 
2aa36     6F 77 6E 20 
2aa3a     65 72 72 6F 
2aa3e     72 20 77 68 
2aa42     69 6C 65 20 
2aa46     6D 75 6C 74 
2aa4a     69 70 6C 79 
2aa4e     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2aa52     00          | 	byte	0
2aa53                 | LR__4753
2aa53     43 61 6E 6E 
2aa57     6F 74 20 64 
2aa5b     69 76 69 64 
2aa5f     65 20 73 74 
2aa63     72 69 6E 67 
2aa67     73 2E       | 	byte	"Cannot divide strings."
2aa69     00          | 	byte	0
2aa6a                 | LR__4754
2aa6a     55 6E 6B 6E 
2aa6e     6F 77 6E 20 
2aa72     65 72 72 6F 
2aa76     72 20 77 68 
2aa7a     69 6C 65 20 
2aa7e     64 69 76 69 
2aa82     64 69 6E 67 
2aa86     2E          | 	byte	"Unknown error while dividing."
2aa87     00          | 	byte	0
2aa88                 | LR__4755
2aa88     43 61 6E 6E 
2aa8c     6F 74 20 63 
2aa90     6F 6D 70 75 
2aa94     74 65 20 61 
2aa98     20 70 6F 77 
2aa9c     65 72 20 6F 
2aaa0     66 20 61 20 
2aaa4     73 74 72 69 
2aaa8     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2aaab     00          | 	byte	0
2aaac                 | LR__4756
2aaac     55 6E 6B 6E 
2aab0     6F 77 6E 20 
2aab4     65 72 72 6F 
2aab8     72 20 77 68 
2aabc     69 6C 65 20 
2aac0     63 6F 6D 70 
2aac4     75 74 69 6E 
2aac8     67 20 61 20 
2aacc     70 6F 77 65 
2aad0     72 2E       | 	byte	"Unknown error while computing a power."
2aad2     00          | 	byte	0
2aad3                 | LR__4757
2aad3     52 69 67 68 
2aad7     74 20 70 61 
2aadb     72 65 6E 74 
2aadf     68 65 73 69 
2aae3     73 20 65 78 
2aae7     70 65 63 74 
2aaeb     65 64 2E    | 	byte	"Right parenthesis expected."
2aaee     00          | 	byte	0
2aaef                 | LR__4758
2aaef     45 78 70 65 
2aaf3     63 74 65 64 
2aaf7     20 73 74 72 
2aafb     69 6E 67 2E | 	byte	"Expected string."
2aaff     00          | 	byte	0
2ab00                 | LR__4759
2ab00     45 78 70 65 
2ab04     63 74 65 64 
2ab08     20 66 6C 6F 
2ab0c     61 74 2E    | 	byte	"Expected float."
2ab0f     00          | 	byte	0
2ab10                 | LR__4760
2ab10     45 78 70 65 
2ab14     63 74 65 64 
2ab18     20 75 6E 73 
2ab1c     69 67 6E 65 
2ab20     64 20 69 6E 
2ab24     74 65 67 65 
2ab28     72 2E       | 	byte	"Expected unsigned integer."
2ab2a     00          | 	byte	0
2ab2b                 | LR__4761
2ab2b     45 78 70 65 
2ab2f     63 74 65 64 
2ab33     20 69 6E 74 
2ab37     65 67 65 72 
2ab3b     2E          | 	byte	"Expected integer."
2ab3c     00          | 	byte	0
2ab3d                 | LR__4762
2ab3d     4E 6F 20 6D 
2ab41     6F 72 65 20 
2ab45     76 61 72 69 
2ab49     61 62 6C 65 
2ab4d     20 73 6C 6F 
2ab51     74 73 2E    | 	byte	"No more variable slots."
2ab54     00          | 	byte	0
2ab55                 | LR__4763
2ab55     56 61 72 69 
2ab59     61 62 6C 65 
2ab5d     20 6E 6F 74 
2ab61     20 66 6F 75 
2ab65     6E 64 2E    | 	byte	"Variable not found."
2ab68     00          | 	byte	0
2ab69                 | LR__4764
2ab69     43 6F 6D 6D 
2ab6d     61 20 65 78 
2ab71     70 65 63 74 
2ab75     65 64 2E    | 	byte	"Comma expected."
2ab78     00          | 	byte	0
2ab79                 | LR__4765
2ab79     43 6F 6D 6D 
2ab7d     61 20 6F 72 
2ab81     20 73 65 6D 
2ab85     69 63 6F 6C 
2ab89     6F 6E 20 65 
2ab8d     78 70 65 63 
2ab91     74 65 64 2E | 	byte	"Comma or semicolon expected."
2ab95     00          | 	byte	0
2ab96                 | LR__4766
2ab96     55 6E 6B 6E 
2ab9a     6F 77 6E 20 
2ab9e     63 6F 6D 6D 
2aba2     61 6E 64 2E | 	byte	"Unknown command."
2aba6     00          | 	byte	0
2aba7                 | LR__4767
2aba7     53 74 61 63 
2abab     6B 20 75 6E 
2abaf     64 65 72 66 
2abb3     6C 6F 77 2E | 	byte	"Stack underflow."
2abb7     00          | 	byte	0
2abb8                 | LR__4768
2abb8     43 61 6E 6E 
2abbc     6F 74 20 65 
2abc0     78 65 63 75 
2abc4     74 65 20 67 
2abc8     6F 74 6F 20 
2abcc     69 6E 20 74 
2abd0     68 65 20 69 
2abd4     6D 6D 65 64 
2abd8     69 61 74 65 
2abdc     20 6D 6F 64 
2abe0     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2abe2     00          | 	byte	0
2abe3                 | LR__4769
2abe3     43 61 6E 6E 
2abe7     6F 74 20 6C 
2abeb     6F 61 64 20 
2abef     66 72 6F 6D 
2abf3     20 74 68 69 
2abf7     73 20 66 69 
2abfb     6C 65 2E    | 	byte	"Cannot load from this file."
2abfe     00          | 	byte	0
2abff                 | LR__4770
2abff     54 68 65 20 
2ac03     70 72 6F 67 
2ac07     72 61 6D 20 
2ac0b     69 73 20 65 
2ac0f     6D 70 74 79 
2ac13     2E          | 	byte	"The program is empty."
2ac14     00          | 	byte	0
2ac15                 | LR__4771
2ac15     49 66 20 61 
2ac19     66 74 65 72 
2ac1d     20 69 66 2E | 	byte	"If after if."
2ac21     00          | 	byte	0
2ac22                 | LR__4772
2ac22     45 6D 70 74 
2ac26     79 20 65 78 
2ac2a     70 72 65 73 
2ac2e     73 69 6F 6E 
2ac32     2E          | 	byte	"Empty expression."
2ac33     00          | 	byte	0
2ac34                 | LR__4773
2ac34     53 74 72 69 
2ac38     6E 67 20 65 
2ac3c     78 70 65 63 
2ac40     74 65 64 2E | 	byte	"String expected."
2ac44     00          | 	byte	0
2ac45                 | LR__4774
2ac45     49 6E 74 65 
2ac49     72 70 72 65 
2ac4d     74 65 72 20 
2ac51     69 6E 74 65 
2ac55     72 6E 61 6C 
2ac59     20 65 72 72 
2ac5d     6F 72 2E    | 	byte	"Interpreter internal error."
2ac60     00          | 	byte	0
2ac61                 | LR__4775
2ac61     45 78 70 65 
2ac65     63 74 65 64 
2ac69     20 61 73 73 
2ac6d     69 67 6E 2E | 	byte	"Expected assign."
2ac71     00          | 	byte	0
2ac72                 | LR__4776
2ac72     45 78 70 65 
2ac76     63 74 65 64 
2ac7a     20 27 74 6F 
2ac7e     27 2E       | 	byte	"Expected 'to'."
2ac80     00          | 	byte	0
2ac81                 | LR__4777
2ac81     45 78 70 65 
2ac85     63 74 65 64 
2ac89     20 69 6E 74 
2ac8d     65 67 65 72 
2ac91     20 76 61 72 
2ac95     69 61 62 6C 
2ac99     65 2E       | 	byte	"Expected integer variable."
2ac9b     00          | 	byte	0
2ac9c                 | LR__4778
2ac9c     55 6E 69 6E 
2aca0     69 74 69 61 
2aca4     6C 69 7A 65 
2aca8     64 20 76 61 
2acac     72 69 61 62 
2acb0     6C 65 20 69 
2acb4     6E 20 27 6E 
2acb8     65 78 74 27 
2acbc     2C 20 75 73 
2acc0     65 20 27 66 
2acc4     6F 72 27 20 
2acc8     62 65 66 6F 
2accc     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2accf     00          | 	byte	0
2acd0                 | LR__4779
2acd0     4E 6F 20 6D 
2acd4     6F 72 65 20 
2acd8     73 6C 6F 74 
2acdc     73 20 66 6F 
2ace0     72 20 27 66 
2ace4     6F 72 27 2E | 	byte	"No more slots for 'for'."
2ace8     00          | 	byte	0
2ace9                 | LR__4780
2ace9     27 4E 65 78 
2aced     74 27 20 64 
2acf1     6F 65 73 6E 
2acf5     27 74 20 6D 
2acf9     61 74 63 68 
2acfd     20 27 66 6F 
2ad01     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2ad04     00          | 	byte	0
2ad05                 | LR__4781
2ad05     27 47 6F 74 
2ad09     6F 27 20 74 
2ad0d     61 72 67 65 
2ad11     74 20 6C 69 
2ad15     6E 65 20 6E 
2ad19     6F 74 20 66 
2ad1d     6F 75 6E 64 
2ad21     2E          | 	byte	"'Goto' target line not found."
2ad22     00          | 	byte	0
2ad23                 | LR__4782
2ad23     42 61 64 20 
2ad27     6E 75 6D 62 
2ad2b     65 72 20 6F 
2ad2f     66 20 70 61 
2ad33     72 61 6D 65 
2ad37     74 65 72 73 | 	byte	"Bad number of parameters"
2ad3b     00          | 	byte	0
2ad3c                 | LR__4783
2ad3c     46 75 6E 63 
2ad40     74 69 6F 6E 
2ad44     20 75 6E 64 
2ad48     65 66 69 6E 
2ad4c     65 64 20 66 
2ad50     6F 72 20 73 
2ad54     74 72 69 6E 
2ad58     67 73       | 	byte	"Function undefined for strings"
2ad5a     00          | 	byte	0
2ad5b                 | LR__4784
2ad5b     42 61 64 20 
2ad5f     70 61 72 61 
2ad63     6D 65 74 65 
2ad67     72 2E       | 	byte	"Bad parameter."
2ad69     00          | 	byte	0
2ad6a                 | LR__4785
2ad6a     43 61 6E 6E 
2ad6e     6F 74 20 64 
2ad72     65 63 6C 61 
2ad76     72 65 20 61 
2ad7a     6E 20 61 72 
2ad7e     72 61 79 3A 
2ad82     20 74 68 65 
2ad86     20 76 61 72 
2ad8a     69 61 62 6C 
2ad8e     65 20 65 78 
2ad92     69 73 74 73 
2ad96     2E          | 	byte	"Cannot declare an array: the variable exists."
2ad97     00          | 	byte	0
2ad98                 | LR__4786
2ad98     45 78 70 65 
2ad9c     63 74 65 64 
2ada0     20 27 28 27 
2ada4     2E          | 	byte	"Expected '('."
2ada5     00          | 	byte	0
2ada6                 | LR__4787
2ada6     45 78 70 65 
2adaa     63 74 65 64 
2adae     20 27 29 27 
2adb2     20 6F 72 20 
2adb6     27 2C 27 2E | 	byte	"Expected ')' or ','."
2adba     00          | 	byte	0
2adbb                 | LR__4788
2adbb     4E 6F 20 6D 
2adbf     6F 72 65 20 
2adc3     74 68 61 6E 
2adc7     20 33 20 64 
2adcb     69 6D 65 6E 
2adcf     73 69 6F 6E 
2add3     73 20 73 75 
2add7     70 70 6F 72 
2addb     74 65 64    | 	byte	"No more than 3 dimensions supported"
2adde     00          | 	byte	0
2addf                 | LR__4789
2addf     56 61 72 69 
2ade3     61 62 6C 65 
2ade7     20 6E 61 6D 
2adeb     65 20 65 78 
2adef     70 65 63 74 
2adf3     65 64       | 	byte	"Variable name expected"
2adf5     00          | 	byte	0
2adf6                 | LR__4790
2adf6     54 79 70 65 
2adfa     20 6E 61 6D 
2adfe     65 20 65 78 
2ae02     70 65 63 74 
2ae06     65 64       | 	byte	"Type name expected"
2ae08     00          | 	byte	0
2ae09                 | LR__4791
2ae09     54 79 70 65 
2ae0d     20 6E 6F 74 
2ae11     20 73 75 70 
2ae15     70 6F 72 74 
2ae19     65 64 20 79 
2ae1d     65 74       | 	byte	"Type not supported yet"
2ae1f     00          | 	byte	0
2ae20                 | LR__4792
2ae20     41 72 72 61 
2ae24     79 20 69 6E 
2ae28     64 65 78 20 
2ae2c     6F 75 74 20 
2ae30     6F 66 20 72 
2ae34     61 6E 67 65 | 	byte	"Array index out of range"
2ae38     00          | 	byte	0
2ae39                 | LR__4793
2ae39     45 72 72 6F 
2ae3d     72 20       | 	byte	"Error "
2ae3f     00          | 	byte	0
2ae40                 | LR__4794
2ae40     3A 20       | 	byte	": "
2ae42     00          | 	byte	0
2ae43                 | LR__4795
2ae43     2F 73 64    | 	byte	"/sd"
2ae46     00          | 	byte	0
2ae47                 | LR__4796
2ae47     2F 73 64 2F 
2ae4b     62 61 73    | 	byte	"/sd/bas"
2ae4e     00          | 	byte	0
2ae4f                 | LR__4797
2ae4f     2F 73 64 2F 
2ae53     62 61 73    | 	byte	"/sd/bas"
2ae56     00          | 	byte	0
2ae57                 | LR__4798
2ae57     20 42 41 53 
2ae5b     49 43 20 62 
2ae5f     79 74 65 73 
2ae63     20 66 72 65 
2ae67     65          | 	byte	" BASIC bytes free"
2ae68     00          | 	byte	0
2ae69                 | LR__4799
2ae69     52 65 61 64 
2ae6d     79          | 	byte	"Ready"
2ae6e     00          | 	byte	0
2ae6f                 | LR__4800
2ae6f     20          | 	byte	" "
2ae70     00          | 	byte	0
2ae71                 | LR__4801
2ae71     20          | 	byte	" "
2ae72     00          | 	byte	0
2ae73                 | LR__4802
2ae73                 | 	byte	
2ae73     00          | 	byte	0
2ae74                 | LR__4803
2ae74                 | 	byte	
2ae74     00          | 	byte	0
2ae75     00 00 00    | 	alignl
2ae78                 | _dat_
2ae78     00 00 00 00 
2ae7c     00 00 00 00 
2ae80     00 00 00 00 
2ae84     00 00 00 00 | 	byte	$00[16]
2ae88     61 41 17 0E 
2ae8c     62 42 00 00 
2ae90     63 43 19 10 
2ae94     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2ae98     65 45 18 0F 
2ae9c     66 46 00 00 
2aea0     67 47 00 00 
2aea4     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2aea8     69 49 00 00 
2aeac     6A 4A 00 00 
2aeb0     6B 4B 00 00 
2aeb4     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2aeb8     6D 4D 00 00 
2aebc     6E 4E 1A 11 
2aec0     6F 4F 1E 15 
2aec4     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2aec8     71 51 00 00 
2aecc     72 52 00 00 
2aed0     73 53 1B 12 
2aed4     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2aed8     75 55 00 00 
2aedc     76 56 00 00 
2aee0     77 57 00 00 
2aee4     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2aee8     79 59 00 00 
2aeec     7A 5A 1D 14 
2aef0     31 21 04 00 
2aef4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2aef8     33 23 06 00 
2aefc     34 24 07 00 
2af00     35 25 08 00 
2af04     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2af08     37 26 0A 00 
2af0c     38 2A 0B 00 
2af10     39 28 0C 00 
2af14     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2af18     8D 8D 00 00 
2af1c     9B 9B 00 00 
2af20     88 88 00 00 
2af24     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2af28     20 20 00 00 
2af2c     2D 5F 00 00 
2af30     3D 2B 00 00 
2af34     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2af38     5D 7D 00 00 
2af3c     5C 7C 00 00 
2af40     23 7E 00 00 
2af44     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2af48     27 22 00 00 
2af4c     60 7E 03 00 
2af50     2C 3C 00 00 
2af54     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2af58     2F 3F 00 00 
2af5c     B9 B9 00 00 
2af60     BA 00 00 00 
2af64     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2af68     BC 00 00 00 
2af6c     BD 00 00 00 
2af70     BE 00 00 00 
2af74     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2af78     C0 00 00 00 
2af7c     C1 00 00 00 
2af80     C2 00 00 00 
2af84     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2af88     C4 00 00 00 
2af8c     C5 00 00 00 
2af90     C6 00 00 00 
2af94     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2af98     C8 00 00 00 
2af9c     C9 00 00 00 
2afa0     CA 00 00 00 
2afa4     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2afa8     7F 7F 00 00 
2afac     CC 00 00 00 
2afb0     CD 00 00 00 
2afb4     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2afb8     CF 00 00 00 
2afbc     D0 00 00 00 
2afc0     D1 00 00 00 
2afc4     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2afc8     2F 2F 00 00 
2afcc     2A 2A 00 00 
2afd0     2D 2D 00 00 
2afd4     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2afd8     8D 8D 00 00 
2afdc     31 31 00 00 
2afe0     32 32 00 00 
2afe4     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2afe8     34 34 00 00 
2afec     35 35 00 00 
2aff0     36 36 00 00 
2aff4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2aff8     38 38 00 00 
2affc     39 39 00 00 
2b000     30 30 00 00 
2b004     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2b008     5C 7C 00 00 
2b00c     00 00 00 00 
2b010     00 00 00 00 
2b014     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2b018     00 00 00 00 
      ...             
2b070     00 00 00 00 
2b074     00 00 00 00 | 	byte	$00[96]
2b078     2B 00 A6 F2 
2b07c     24 A7 09 80 
2b080     5B 88 4D 89 
2b084     80 88 A5 88 | atari_spl file "atari.spl"
2b088     6D 88 B8 88 
2b08c     80 88 CB 88 
2b090     92 88 A5 88 
2b094     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2b098     A5 88 CA 88 
2b09c     A6 88 DD 88 
2b0a0     B8 88 AB 89 
2b0a4     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2b0a8     C8 AD C6 F1 
2b0ac     91 06 B6 FF 
2b0b0     13 00 4A 00 
2b0b4     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2b0b8     5D 00 5E 00 
2b0bc     5D 00 5E 00 
2b0c0     5E 00 5D 00 
2b0c4     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2b0c8     38 00 83 00 
2b0cc     25 00 83 00 
2b0d0     C3 FE D1 04 
2b0d4     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2b0d8     48 88 38 85 
2b0dc     41 8A CB 88 
2b0e0     28 89 B8 88 
2b0e4     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2b0e8     15 89 03 89 
2b0ec     02 89 15 89 
2b0f0     16 89 15 89 
2b0f4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2b0f8     15 89 3A 89 
2b0fc     72 89 E3 89 
2b100     52 83 AD 97 
2b104     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2b108     0C 02 B6 FF 
2b10c     E1 00 A8 00 
2b110     F3 00 A8 00 
2b114     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2b118     CE 00 CD 00 
2b11c     CD 00 BA 00 
2b120     E1 00 BB 00 
2b124     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2b128     DF 00 C9 FF 
2b12c     E6 01 B6 06 
2b130     EE DD 8D 98 
2b134     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2b138     97 89 73 89 
2b13c     3B 89 60 89 
2b140     60 89 60 89 
2b144     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2b148     73 89 72 89 
2b14c     85 89 73 89 
2b150     AA 89 60 89 
2b154     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2b158     E8 8A 18 86 
2b15c     92 88 A5 C2 
2b160     E0 00 C3 05 
2b164     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2b168     F2 00 64 01 
2b16c     06 01 3E 01 
2b170     2B 01 2B 01 
2b174     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2b178     2B 01 2A 01 
2b17c     2B 01 2B 01 
2b180     2B 01 18 01 
2b184     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2b188     39 07 61 F3 
2b18c     C0 AF 37 85 
2b190     0F 88 8B 8A 
2b194     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2b198     AB 89 D0 89 
2b19c     AB 89 D0 89 
2b1a0     D0 89 CF 89 
2b1a4     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2b1a8     D0 89 F5 89 
2b1ac     BD 89 08 8A 
2b1b0     CF 89 E8 8A 
2b1b4     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2b1b8     53 B3 0D F8 
2b1bc     F4 07 38 00 
2b1c0     63 01 63 01 
2b1c4     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2b1c8     88 01 88 01 
2b1cc     76 01 88 01 
2b1d0     88 01 89 01 
2b1d4     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2b1d8     75 01 AE 01 
2b1dc     76 01 88 01 
2b1e0     4A 00 46 06 
2b1e4     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2b1e8     08 8A 9A 86 
2b1ec     33 8B 08 8A 
2b1f0     2D 8A F5 89 
2b1f4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2b1f8     2D 8A 2D 8A 
2b1fc     2E 8A 1B 8A 
2b200     40 8A 2D 8A 
2b204     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2b208     2E 8A 79 8A 
2b20c     66 8A C8 8B 
2b210     72 82 2B 97 
2b214     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2b218     1D 02 05 01 
2b21c     F8 01 C0 01 
2b220     0B 02 C0 01 
2b224     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2b228     F9 01 D3 01 
2b22c     F8 01 D3 01 
2b230     F8 01 D2 01 
2b234     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2b238     E6 01 2B 01 
2b23c     8E 02 5F 07 
2b240     F7 E2 ED 9C 
2b244     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2b248     E8 8A 78 8A 
2b24c     78 8A 65 8A 
2b250     8B 8A 78 8A 
2b254     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2b258     8B 8A 9D 8A 
2b25c     9D 8A 8B 8A 
2b260     C2 8A 78 8A 
2b264     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2b268     70 8C 18 86 
2b26c     8B 8A 23 C9 
2b270     CB 03 C4 05 
2b274     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2b278     0B 02 7B 02 
2b27c     1E 02 55 02 
2b280     30 02 43 02 
2b284     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2b288     43 02 44 02 
2b28c     43 02 30 02 
2b290     68 02 31 02 
2b294     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2b298     07 08 3F F7 
2b29c     73 B2 13 85 
2b2a0     15 89 ED 8B 
2b2a4     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2b2a8     B0 8A FB 8A 
2b2ac     D5 8A FA 8A 
2b2b0     E8 8A FB 8A 
2b2b4     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2b2b8     E8 8A 21 8B 
2b2bc     E7 8A 33 8B 
2b2c0     E8 8A 26 8C 
2b2c4     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2b2c8     8D B0 27 F6 
2b2cc     9C 08 AD 01 
2b2d0     7B 02 8D 02 
2b2d4     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2b2d8     A1 02 A0 02 
2b2dc     A1 02 A0 02 
2b2e0     A0 02 A0 02 
2b2e4     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2b2e8     7B 02 D8 02 
2b2ec     7B 02 C6 02 
2b2f0     3E 01 C3 05 
2b2f4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2b2f8     00 8C 2A 86 
2b2fc     E0 8C FA 8A 
2b300     6A 8B FB 8A 
2b304     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2b308     45 8B 45 8B 
2b30c     45 8B 6B 8B 
2b310     46 8B 59 8B 
2b314     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2b318     6B 8B 6B 8B 
2b31c     6B 8B 6B 8B 
2b320     7D 8B 7D 8B 
2b324     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2b328     90 8B 91 8B 
2b32c     90 8B 90 8B 
2b330     A3 8B A3 8B 
2b334     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2b338     B5 8B B6 8B 
2b33c     B5 8B B5 8B 
2b340     B6 8B C8 8B 
2b344     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2b348     C8 8B DA 8B 
2b34c     DB 8B DB 8B 
2b350     DB 8B DC 8B 
2b354     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2b358     EE 8B EE 8B 
2b35c     00 8C 01 8C 
2b360     00 8C 01 8C 
2b364     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2b368     12 8C 13 8C 
2b36c     13 8C 26 8C 
2b370     26 8C 26 8C 
2b374     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2b378     38 8C 38 8C 
2b37c     38 8C 38 8C 
2b380     4B 8C 4B 8C 
2b384     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2b388     5E 8C 5E 8C 
2b38c     5E 8C 5E 8C 
2b390     70 8C 70 8C 
2b394     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2b398     70 8C 83 8C 
2b39c     83 8C 83 8C 
2b3a0     83 8C 96 8C 
2b3a4     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2b3a8     95 8C A9 8C 
2b3ac     A9 8C A8 8C 
2b3b0     A8 8C A8 8C 
2b3b4     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2b3b8     BB 8C BB 8C 
2b3bc     BB 8C CE 8C 
2b3c0     CE 8C CE 8C 
2b3c4     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2b3c8     E0 8C E1 8C 
2b3cc     E1 8C E0 8C 
2b3d0     F4 8C F2 8C 
2b3d4     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2b3d8     05 8D 05 8D 
2b3dc     06 8D 06 8D 
2b3e0     19 8D 19 8D 
2b3e4     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2b3e8     18 8D 2B 8D 
2b3ec     2B 8D 2B 8D 
2b3f0     2A 8D 3E 8D 
2b3f4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2b3f8     3E 8D 51 8D 
2b3fc     50 8D 50 8D 
2b400     50 8D 51 8D 
2b404     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2b408     63 8D 64 8D 
2b40c     76 8D 75 8D 
2b410     75 8D 76 8D 
2b414     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2b418     88 8D 88 8D 
2b41c     89 8D 9B 8D 
2b420     9A 8D 9B 8D 
2b424     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2b428     AD 8D AE 8D 
2b42c     AD 8D AE 8D 
2b430     C1 8D C1 8D 
2b434     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2b438     D3 8D D3 8D 
2b43c     D3 8D D3 8D 
2b440     D3 8D E6 8D 
2b444     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2b448     E6 8D E6 8D 
2b44c     F9 8D F9 8D 
2b450     F9 8D F8 8D 
2b454     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2b458     0B 8E 0B 8E 
2b45c     1D 8E 1D 8E 
2b460     1E 8E 1E 8E 
2b464     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2b468     31 8E 31 8E 
2b46c     31 8E 42 8E 
2b470     43 8E 43 8E 
2b474     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2b478     56 8E 56 8E 
2b47c     55 8E 56 8E 
2b480     68 8E 69 8E 
2b484     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2b488     69 8E 7B 8E 
2b48c     7C 8E 7B 8E 
2b490     7B 8E 8D 8E 
2b494     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2b498     8D 8E A1 8E 
2b49c     A0 8E A1 8E 
2b4a0     A1 8E A0 8E 
2b4a4     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2b4a8     B3 8E B3 8E 
2b4ac     C6 8E C5 8E 
2b4b0     C6 8E C6 8E 
2b4b4     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2b4b8     D8 8E D9 8E 
2b4bc     D8 8E EC 8E 
2b4c0     EB 8E EC 8E 
2b4c4     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2b4c8     FE 8E FE 8E 
2b4cc     FE 8E FE 8E 
2b4d0     10 8F 10 8F 
2b4d4     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2b4d8     11 8F 23 8F 
2b4dc     24 8F 23 8F 
2b4e0     24 8F 37 8F 
2b4e4     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2b4e8     36 8F 36 8F 
2b4ec     48 8F 49 8F 
2b4f0     49 8F 49 8F 
2b4f4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2b4f8     5B 8F 5C 8F 
2b4fc     5B 8F 6E 8F 
2b500     6E 8F 6E 8F 
2b504     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2b508     81 8F 81 8F 
2b50c     81 8F 81 8F 
2b510     93 8F 93 8F 
2b514     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2b518     93 8F A6 8F 
2b51c     A6 8F A6 8F 
2b520     A6 8F B9 8F 
2b524     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2b528     B9 8F B9 8F 
2b52c     CC 8F CB 8F 
2b530     CB 8F CC 8F 
2b534     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2b538     DF 8F DE 8F 
2b53c     DE 8F F1 8F 
2b540     F1 8F F1 8F 
2b544     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2b548     03 90 04 90 
2b54c     04 90 04 90 
2b550     16 90 17 90 
2b554     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2b558     29 90 28 90 
2b55c     29 90 28 90 
2b560     29 90 3C 90 
2b564     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2b568     3C 90 4F 90 
2b56c     4E 90 4E 90 
2b570     4E 90 4E 90 
2b574     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2b578     61 90 61 90 
2b57c     73 90 74 90 
2b580     74 90 74 90 
2b584     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2b588     87 90 86 90 
2b58c     87 90 86 90 
2b590     99 90 99 90 
2b594     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2b598     AB 90 AB 90 
2b59c     AC 90 AB 90 
2b5a0     AB 90 BF 90 
2b5a4     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2b5a8     BE 90 D1 90 
2b5ac     D0 90 D1 90 
2b5b0     D1 90 D1 90 
2b5b4     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2b5b8     E3 90 E4 90 
2b5bc     F6 90 F6 90 
2b5c0     F6 90 F6 90 
2b5c4     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2b5c8     09 91 0A 91 
2b5cc     0A 91 1C 91 
2b5d0     1C 91 1C 91 
2b5d4     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2b5d8     2F 91 2E 91 
2b5dc     2F 91 2F 91 
2b5e0     2E 91 41 91 
2b5e4     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2b5e8     41 91 53 91 
2b5ec     54 91 54 91 
2b5f0     53 91 54 91 
2b5f4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2b5f8     67 91 67 91 
2b5fc     79 91 7A 91 
2b600     79 91 78 91 
2b604     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2b608     8C 91 8B 91 
2b60c     8C 91 8C 91 
2b610     9E 91 9E 91 
2b614     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2b618     B1 91 B1 91 
2b61c     B2 91 B1 91 
2b620     B1 91 C4 91 
2b624     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2b628     C4 91 D6 91 
2b62c     D7 91 D7 91 
2b630     D7 91 D6 91 
2b634     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2b638     EA 91 EA 91 
2b63c     EA 91 FC 91 
2b640     FC 91 FB 91 
2b644     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2b648     0E 92 0F 92 
2b64c     0F 92 0E 92 
2b650     21 92 21 92 
2b654     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2b658     21 92 34 92 
2b65c     33 92 34 92 
2b660     34 92 47 92 
2b664     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2b668     46 92 47 92 
2b66c     59 92 59 92 
2b670     59 92 59 92 
2b674     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2b678     6C 92 6C 92 
2b67c     6B 92 7E 92 
2b680     7E 92 7E 92 
2b684     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2b688     92 92 91 92 
2b68c     91 92 90 92 
2b690     91 92 A4 92 
2b694     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2b698     A3 92 B6 92 
2b69c     B6 92 B7 92 
2b6a0     B7 92 B6 92 
2b6a4     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2b6a8     CA 92 C9 92 
2b6ac     CA 92 DC 92 
2b6b0     DC 92 DC 92 
2b6b4     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2b6b8     EF 92 EF 92 
2b6bc     EF 92 EF 92 
2b6c0     01 93 01 93 
2b6c4     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2b6c8     15 93 14 93 
2b6cc     14 93 14 93 
2b6d0     14 93 27 93 
2b6d4     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2b6d8     27 93 39 93 
2b6dc     3A 93 39 93 
2b6e0     39 93 39 93 
2b6e4     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2b6e8     4B 93 4C 93 
2b6ec     5F 93 5F 93 
2b6f0     5F 93 5E 93 
2b6f4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2b6f8     5F 93 84 93 
2b6fc     4C 93 96 93 
2b700     5F 93 AE 94 
2b704     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2b708     7B C1 00 00 
2b70c     00 00 00 00 
2b710     00 00 00 00 
2b714     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b718     00 00 00 00 | 	byte	$00, $00, $00, $00
2b71c     00 00 00 00 | zero long 0
2b720     7A D7 00 80 
2b724     87 8A 48 8F 
2b728     EC 8C 76 8D 
2b72c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2b730     3C 8D 82 8D 
2b734     42 8D 88 8D 
2b738     8C 8D 8E 8D 
2b73c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2b740     97 8D DE 8D 
2b744     E1 8D F1 8E 
2b748     D8 8C A3 83 
2b74c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2b750     65 71 C9 65 
2b754     FC 64 C4 65 
2b758     C1 65 BF 65 
2b75c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2b760     B6 65 B4 65 
2b764     B2 65 AE 65 
2b768     AC 65 ED 65 
2b76c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2b770     5E 65 25 66 
2b774     FA 62 23 6B 
2b778     B5 6C 61 0A 
2b77c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2b780     5D 90 BE 8D 
2b784     47 8E C3 8D 
2b788     09 8E C9 8D 
2b78c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2b790     15 8E 19 8E 
2b794     1B 8E 62 8E 
2b798     64 8E 68 8E 
2b79c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2b7a0     B5 8E 4C 90 
2b7a4     FA 84 3C 9D 
2b7a8     98 13 79 6D 
2b7ac     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2b7b0     D9 66 50 66 
2b7b4     D4 66 4B 66 
2b7b8     8C 66 46 66 
2b7bc     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2b7c0     81 66 3A 66 
2b7c4     7C 66 36 66 
2b7c8     76 66 30 66 
2b7cc     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2b7d0     6B 66 88 72 
2b7d4     BF 37 E7 B7 
2b7d8     75 83 8B 8E 
2b7dc     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2b7e0     94 8E 96 8E 
2b7e4     DD 8E 9C 8E 
2b7e8     E2 8E A2 8E 
2b7ec     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2b7f0     EE 8E AE 8E 
2b7f4     38 8F B5 8E 
2b7f8     3F 8F FD 8E 
2b7fc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2b800     A5 87 1E E3 
2b804     6D 5D FA 71 
2b808     41 64 25 67 
2b80c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2b810     D9 66 1A 67 
2b814     18 67 15 67 
2b818     12 67 0F 67 
2b81c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2b820     07 67 C0 66 
2b824     01 67 BC 66 
2b828     B8 66 DE 64 
2b82c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2b830     43 E5 1F 8B 
2b834     14 8A F1 90 
2b838     1C 8F 63 8F 
2b83c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2b840     29 8F 6E 8F 
2b844     72 8F 75 8F 
2b848     34 8F BE 8F 
2b84c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2b850     84 8F 87 8F 
2b854     CC 8F 56 90 
2b858     67 91 49 80 
2b85c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2b860     46 77 A6 66 
2b864     E8 66 B0 67 
2b868     AD 67 ED 67 
2b86c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2b870     A2 67 E3 67 
2b874     9D 67 9A 67 
2b878     98 67 94 67 
2b87c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2b880     49 67 CD 67 
2b884     28 65 5F 6E 
2b888     82 67 3A 01 
2b88c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2b890     C2 91 A9 8F 
2b894     EF 8F AE 8F 
2b898     F4 8F B5 8F 
2b89c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2b8a0     01 90 03 90 
2b8a4     07 90 09 90 
2b8a8     0C 90 53 90 
2b8ac     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2b8b0     18 90 44 93 
2b8b4     85 84 D6 9D 
2b8b8     87 1F 2F 75 
2b8bc     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2b8c0     C4 68 F6 67 
2b8c4     BE 68 F1 67 
2b8c8     76 68 2E 68 
2b8cc     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2b8d0     27 68 24 68 
2b8d4     64 68 1E 68 
2b8d8     5F 68 19 68 
2b8dc     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2b8e0     DC 68 56 72 
2b8e4     7E 36 C2 B8 
2b8e8     D7 84 73 90 
2b8ec     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2b8f0     7B 90 7F 90 
2b8f4     82 90 84 90 
2b8f8     CB 90 8B 90 
2b8fc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2b900     D7 90 96 90 
2b904     20 91 59 90 
2b908     25 91 A2 90 
2b90c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2b910     D0 89 40 EE 
2b914     12 64 C4 71 
2b918     29 66 0C 69 
2b91c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2b920     C0 68 02 69 
2b924     FE 68 FB 68 
2b928     F9 68 F6 68 
2b92c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2b930     EE 68 A8 68 
2b934     2C 69 5F 68 
2b938     E2 68 81 66 
2b93c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2b940     1E EB A6 8A 
2b944     73 8B 5E 93 
2b948     7B 90 48 91 
2b94c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2b950     0D 91 11 91 
2b954     14 91 16 91 
2b958     5C 91 1C 91 
2b95c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2b960     68 91 AF 91 
2b964     2A 91 B5 91 
2b968     75 91 1A 94 
2b96c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2b970     70 0E CB 6C 
2b974     5D 6E C4 67 
2b978     99 69 54 69 
2b97c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2b980     D2 69 49 69 
2b984     89 69 86 69 
2b988     40 69 C4 69 
2b98c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2b990     35 69 76 69 
2b994     58 67 EB 6D 
2b998     E9 6D 89 0F 
2b99c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2b9a0     33 94 94 91 
2b9a4     D9 91 56 91 
2b9a8     E0 91 9F 91 
2b9ac     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2b9b0     EC 91 EE 91 
2b9b4     F1 91 F4 91 
2b9b8     F7 91 3D 92 
2b9bc     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2b9c0     46 92 21 94 
2b9c4     11 89 A4 9D 
2b9c8     FD 0E 8F 6C 
2b9cc     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2b9d0     28 6A E1 69 
2b9d4     65 6A 1F 6A 
2b9d8     5F 6A 1A 6A 
2b9dc     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2b9e0     54 6A 0F 6A 
2b9e4     4F 6A 09 6A 
2b9e8     06 6A 03 6A 
2b9ec     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2b9f0     23 68 69 77 
2b9f4     3A 4D 38 CA 
2b9f8     38 86 4E 91 
2b9fc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2ba00     64 92 24 92 
2ba04     6A 92 2A 92 
2ba08     70 92 30 92 
2ba0c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2ba10     7B 92 7E 92 
2ba14     C5 92 84 92 
2ba18     CB 92 8A 92 
2ba1c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2ba20     4D 8D F9 E2 
2ba24     97 59 FE 74 
2ba28     DB 68 6D 6A 
2ba2c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2ba30     A8 6A A5 6A 
2ba34     A3 6A 9F 6A 
2ba38     9D 6A 9B 6A 
2ba3c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2ba40     D6 6A 8F 6A 
2ba44     CF 6A 46 6A 
2ba48     CA 6A E1 67 
2ba4c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2ba50     D3 F7 15 92 
2ba54     90 8C BF 94 
2ba58     A6 92 EB 92 
2ba5c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2ba60     B1 92 F7 92 
2ba64     FA 92 FD 92 
2ba68     00 93 02 93 
2ba6c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2ba70     4F 93 52 93 
2ba74     54 93 22 94 
2ba78     5A 93 8F 88 
2ba7c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2ba80     1C 77 07 6C 
2ba84     E8 69 7A 6B 
2ba88     34 6B 75 6B 
2ba8c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2ba90     29 6B 26 6B 
2ba94     24 6B 21 6B 
2ba98     1D 6B 5E 6B 
2ba9c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2baa0     12 6B 52 6B 
2baa4     34 69 34 6E 
2baa8     BA 73 A4 24 
2baac     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2bab0     7A 94 B3 93 
2bab4     72 93 31 93 
2bab8     78 93 7A 93 
2babc     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2bac0     83 93 86 93 
2bac4     89 93 D0 93 
2bac8     D2 93 D5 93 
2bacc     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2bad0     DD 93 40 96 
2bad4     30 8B 99 9C 
2bad8     52 10 94 71 
2badc     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2bae0     46 6C 79 6B 
2bae4     40 6C B7 6B 
2bae8     F7 6B B1 6B 
2baec     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2baf0     EC 6B A5 6B 
2baf4     A2 6B 9F 6B 
2baf8     9D 6B 9A 6B 
2bafc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2bb00     C8 6A E4 76 
2bb04     20 4B F9 CE 
2bb08     2E 8A 1A 92 
2bb0c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2bb10     FB 93 BA 93 
2bb14     01 94 03 94 
2bb18     4A 94 09 94 
2bb1c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2bb20     55 94 14 94 
2bb24     9E 94 1A 94 
2bb28     61 94 20 94 
2bb2c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2bb30     3E 87 E5 CD 
2bb34     5F 50 6C 78 
2bb38     B5 6A 04 6C 
2bb3c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2bb40     83 6C 7F 6C 
2bb44     7C 6C 36 6C 
2bb48     76 6C 74 6C 
2bb4c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2bb50     6B 6C 25 6C 
2bb54     66 6C 1F 6C 
2bb58     1D 6C 41 6A 
2bb5c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2bb60     BA FA FC 94 
2bb64     5B 8D 97 96 
2bb68     3B 94 C5 94 
2bb6c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2bb70     89 94 8C 94 
2bb74     8F 94 92 94 
2bb78     94 94 DB 94 
2bb7c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2bb80     E4 94 E7 94 
2bb84     2D 95 74 95 
2bb88     C8 96 15 89 
2bb8c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2bb90     CB 75 31 6F 
2bb94     7E 6B 10 6D 
2bb98     C9 6C 0A 6D 
2bb9c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2bba0     BD 6C FF 6C 
2bba4     FB 6C F9 6C 
2bba8     B2 6C F3 6C 
2bbac     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2bbb0     A7 6C E8 6C 
2bbb4     0D 6B 85 6F 
2bbb8     C7 74 10 28 
2bbbc     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2bbc0     96 96 47 95 
2bbc4     06 95 0A 95 
2bbc8     0C 95 0F 95 
2bbcc     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2bbd0     17 95 5E 95 
2bbd4     61 95 63 95 
2bbd8     22 95 AC 95 
2bbdc     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2bbe0     72 95 17 98 
2bbe4     59 8E 01 96 
2bbe8     CF FC 5A 68 
2bbec     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2bbf0     96 6D 50 6D 
2bbf4     D5 6D 4A 6D 
2bbf8     8C 6D 89 6D 
2bbfc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2bc00     80 6D 3A 6D 
2bc04     7A 6D 77 6D 
2bc08     75 6D 71 6D 
2bc0c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2bc10     18 6C BC 78 
2bc14     9A 4F 7E CF 
2bc18     1F 89 F1 93 
2bc1c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2bc20     D2 95 4E 95 
2bc24     D7 95 53 95 
2bc28     DD 95 E0 95 
2bc2c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2bc30     A5 95 EB 95 
2bc34     EE 95 F0 95 
2bc38     37 96 B3 95 
2bc3c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2bc40     1A 98 D5 8D 
2bc44     C5 9F CD 0F 
2bc48     0F 71 F3 73 
2bc4c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2bc50     D9 6D 5E 6E 
2bc54     D3 6D 58 6E 
2bc58     12 6E 0F 6E 
2bc5c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2bc60     49 6E BF 6D 
2bc64     87 6E 76 6D 
2bc68     81 6E 11 6B 
2bc6c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2bc70     3F 09 44 95 
2bc74     E5 8D 3F 99 
2bc78     D4 95 A2 96 
2bc7c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2bc80     23 96 69 96 
2bc84     6B 96 6E 96 
2bc88     71 96 74 96 
2bc8c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2bc90     BF 96 3C 96 
2bc94     C6 96 C8 96 
2bc98     A3 98 51 8D 
2bc9c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2bca0     CF 75 29 73 
2bca4     90 6C EC 6E 
2bca8     62 6E E7 6E 
2bcac     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2bcb0     9A 6E 98 6E 
2bcb4     95 6E 91 6E 
2bcb8     8E 6E CF 6E 
2bcbc     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2bcc0     40 6E C3 6E 
2bcc4     E8 6C 45 6F 
2bcc8     A5 7B C9 35 
2bccc     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2bcd0     2D 98 23 97 
2bcd4     E1 96 A0 96 
2bcd8     A4 96 EA 96 
2bcdc     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2bce0     AF 96 F4 96 
2bce4     F8 96 3E 97 
2bce8     FD 96 43 97 
2bcec     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2bcf0     08 97 6B 99 
2bcf4     D6 92 88 91 
2bcf8     D8 EE 84 66 
2bcfc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2bd00     2E 6F E7 6E 
2bd04     6C 6F 24 6F 
2bd08     21 6F 1F 6F 
2bd0c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2bd10     17 6F 13 6F 
2bd14     54 6F 0E 6F 
2bd18     0B 6F 4B 6F 
2bd1c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2bd20     27 6D 1C 7B 
2bd24     19 59 9F DB 
2bd28     66 8E BC 94 
2bd2c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2bd30     67 97 26 97 
2bd34     6D 97 2B 97 
2bd38     72 97 32 97 
2bd3c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2bd40     C1 97 7F 97 
2bd44     C6 97 85 97 
2bd48     CB 97 CE 97 
2bd4c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2bd50     EC 8A C4 C6 
2bd54     68 4C F4 7D 
2bd58     63 6E E8 6E 
2bd5c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2bd60     ED 6F A7 6F 
2bd64     E7 6F A0 6F 
2bd68     E1 6F 9B 6F 
2bd6c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2bd70     D5 6F 8F 6F 
2bd74     CE 6F 45 6F 
2bd78     86 6F 68 6D 
2bd7c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2bd80     C0 13 AD A2 
2bd84     A7 8E 79 99 
2bd88     E6 97 E8 97 
2bd8c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2bd90     F1 97 F3 97 
2bd94     F6 97 F9 97 
2bd98     FB 97 FE 97 
2bd9c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2bda0     4A 98 0A 98 
2bda4     93 98 0F 98 
2bda8     7F 9B BF 8C 
2bdac     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2bdb0     91 7B 62 73 
2bdb4     1A 6E B9 70 
2bdb8     EB 6F B3 70 
2bdbc     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2bdc0     25 70 20 70 
2bdc4     1E 70 1B 70 
2bdc8     18 70 15 70 
2bdcc     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2bdd0     0D 70 09 70 
2bdd4     07 70 03 70 
2bdd8     01 70 FD 6F 
2bddc     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2bde0     F6 6F F2 6F 
2bde4     EF 6F EC 6F 
2bde8     2C 70 E6 6F 
2bdec     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2bdf0     DD 6F 97 6F 
2bdf4     D7 6F 84 6E 
2bdf8     8F 6F 3F 7D 
2bdfc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2bdfe     00 00 00 00 | zero1 long 0
2be02     FF FF FF FF 
2be06     FF FF       | atarist_spl file "atarist.spl" '512
2be08     00 00 00 00 
2be0c     00 00 00 00 
2be10     00 00       | 	byte	$00[10]
2be12     17 7F F2 7F 
2be16     B2 7F 72 7F 
2be1a     33 7F F4 7E 
2be1e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2be22     36 7E F5 7D 
2be26     E9 51 F2 0D 
2be2a     8E 00 F3 FD 
2be2e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2be32     57 FD 58 FD 
2be36     5B FD 5C FD 
2be3a     5C FD 60 7D 
2be3e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2be42     D6 7C 98 7C 
2be46     59 7C 1A 7C 
2be4a     DC 7B 9E 7B 
2be4e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2be52     F3 05 00 FD 
2be56     41 FB EA FA 
2be5a     D9 FA DB FA 
2be5e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2be62     E4 FA 9B 36 
2be66     F8 7A C0 7A 
2be6a     84 7A 45 7A 
2be6e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2be72     8E 79 51 79 
2be76     15 79 D7 78 
2be7a     3C 1F EB FF 
2be7e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2be82     6D F8 65 F8 
2be86     68 F8 6D F8 
2be8a     70 F8 74 F8 
2be8e     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2be92     AB 60 79 60 
2be96     4B 60 1A 60 
2be9a     E9 5F B9 5F 
2be9e     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2bea2     FB 59 B2 0B 
2bea6     92 FA 3A F7 
2beaa     96 F6 79 F6 
2beae     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2beb2     82 F6 86 F6 
2beb6     8C F6 DB 5D 
2beba     F1 5E C1 5E 
2bebe     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2bec2     34 5E 04 5E 
2bec6     D6 5D A6 5D 
2beca     78 5D D4 3E 
2bece     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2bed2     27 F5 BA F4 
2bed6     AB F4 AD F4 
2beda     B2 F4 B8 F4 
2bede     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2bee2     26 5D 2B 5D 
2bee6     FC 5C CD 5C 
2beea     9F 5C 70 5C 
2beee     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2bef2     E5 5B B8 5B 
2bef6     DB 24 A7 FC 
2befa     D1 F4 4D F3 
2befe     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2bf02     04 F3 0B F3 
2bf06     11 F3 16 F3 
2bf0a     DE 18 98 5B 
2bf0e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2bf12     4E 4A 29 48 
2bf16     A0 47 6A 47 
2bf1a     43 47 20 47 
2bf1e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2bf22     E2 F6 98 F2 
2bf26     C5 F1 A3 F1 
2bf2a     A3 F1 A8 F1 
2bf2e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2bf32     BF F1 00 3D 
2bf36     EF 46 CD 46 
2bf3a     AA 46 86 46 
2bf3e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2bf42     1C 46 F9 45 
2bf46     D7 45 EE 43 
2bf4a     DE 02 E8 F3 
2bf4e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2bf52     61 F0 65 F0 
2bf56     6D F0 74 F0 
2bf5a     7C F0 84 F0 
2bf5e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2bf62     8E 45 6D 45 
2bf66     49 45 27 45 
2bf6a     05 45 E1 44 
2bf6e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2bf72     F1 2F A9 FB 
2bf76     8B F1 9B EF 
2bf7a     40 EF 36 EF 
2bf7e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2bf82     4D EF 56 EF 
2bf86     5E EF 7B 44 
2bf8a     8C 44 69 44 
2bf8e     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2bf92     03 44 E1 43 
2bf96     C0 43 F5 37 
2bf9a     69 33 0F 11 
2bf9e     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2bfa2     66 EE 37 EE 
2bfa6     38 EE 40 EE 
2bfaa     48 EE 51 EE 
2bfae     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2bfb2     7D 32 6A 32 
2bfb6     51 32 37 32 
2bfba     1F 32 05 32 
2bfbe     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2bfc2     B9 31 A1 31 
2bfc6     F1 04 F4 F1 
2bfca     50 EE A0 ED 
2bfce     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2bfd2     93 ED 9A ED 
2bfd6     A4 ED AD ED 
2bfda     F4 27 C1 31 
2bfde     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2bfe2     78 31 5F 31 
2bfe6     46 31 2E 31 
2bfea     15 31 FC 30 
2bfee     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2bff2     C4 EF 4A ED 
2bff6     DC EC CB EC 
2bffa     D2 EC DA EC 
2bffe     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2c002     F9 EC 64 2F 
2c006     0A 31 F1 30 
2c00a     D9 30 C0 30 
2c00e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2c012     78 30 5F 30 
2c016     46 30 38 23 
2c01a     A6 F6 19 EE 
2c01e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2c022     20 EC 28 EC 
2c026     32 EC 3C EC 
2c02a     47 EC 51 EC 
2c02e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2c032     A3 22 93 22 
2c036     7F 22 6E 22 
2c03a     5D 22 4C 22 
2c03e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2c042     77 09 76 F1 
2c046     CC EC F0 EB 
2c04a     CD EB CE EB 
2c04e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2c052     ED EB F5 EB 
2c056     3E F6 6B 22 
2c05a     5F 22 4E 22 
2c05e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2c062     1B 22 0B 22 
2c066     FA 21 E9 21 
2c06a     D8 21 4D FF 
2c06e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2c072     92 EB 7B EB 
2c076     82 EB 8C EB 
2c07a     97 EB A1 EB 
2c07e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2c082     15 22 04 22 
2c086     F3 21 E3 21 
2c08a     D2 21 C0 21 
2c08e     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2c092     8E 21 7D 21 
2c096     9A F8 A4 ED 
2c09a     8E EB 2F EB 
2c09e     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2c0a2     37 EB 42 EB 
2c0a6     4C EB 57 EB 
2c0aa     B2 17 22 19 
2c0ae     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2c0b2     FD 18 EF 18 
2c0b6     E3 18 D6 18 
2c0ba     CA 18 BD 18 
2c0be     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2c0c2     60 EC 35 EB 
2c0c6     01 EB 01 EB 
2c0ca     0C EB 16 EB 
2c0ce     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2c0d2     34 EB D0 18 
2c0d6     00 19 F4 18 
2c0da     E8 18 DA 18 
2c0de     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2c0e2     B6 18 A9 18 
2c0e6     9D 18 91 05 
2c0ea     F0 EF CA EB 
2c0ee     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2c0f2     E8 EA F2 EA 
2c0f6     FE EA 07 EB 
2c0fa     12 EB C2 EF 
2c0fe     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2c102     D9 18 CD 18 
2c106     C0 18 B3 18 
2c10a     A7 18 9B 18 
2c10e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2c112     B8 FC 30 EE 
2c116     61 EB DC EA 
2c11a     CD EA D2 EA 
2c11e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2c122     F3 EA FE EA 
2c126     D2 09 D1 18 
2c12a     C3 18 17 18 
2c12e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2c132     66 11 52 11 
2c136     49 11 41 11 
2c13a     38 11 E0 F4 
2c13e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2c142     C9 EA C5 EA 
2c146     CF EA DB EA 
2c14a     E6 EA EF EA 
2c14e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2c152     89 11 80 11 
2c156     78 11 6E 11 
2c15a     67 11 5D 11 
2c15e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2c162     43 11 32 0D 
2c166     9C F1 07 EC 
2c16a     F8 EA CD EA 
2c16e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2c172     E4 EA ED EA 
2c176     F8 EA 02 EB 
2c17a     55 11 91 11 
2c17e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2c182     75 11 6E 11 
2c186     64 11 5E 11 
2c18a     54 11 4A 11 
2c18e     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2c192     A8 EB F1 EA 
2c196     D9 EA DC EA 
2c19a     E8 EA F1 EA 
2c19e     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2c1a2     A6 EB 9E 11 
2c1a6     A0 11 96 11 
2c1aa     8D 11 85 11 
2c1ae     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2c1b2     6A 11 CA 0D 
2c1b6     36 0B 57 F8 
2c1ba     6C ED 57 EB 
2c1be     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2c1c2     F4 EA FF EA 
2c1c6     09 EB 15 EB 
2c1ca     1E EB 1A FD 
2c1ce     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2c1d2     ED 0A E8 0A 
2c1d6     E2 0A DC 0A 
2c1da     D6 0A D1 0A 
2c1de     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2c1e2     F8 F3 BC EC 
2c1e6     57 EB 1E EB 
2c1ea     18 EB 24 EB 
2c1ee     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2c1f2     42 EB 4D EB 
2c1f6     08 09 20 0B 
2c1fa     1A 0B 14 0B 
2c1fe     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2c202     04 0B FE 0A 
2c206     F9 0A F2 0A 
2c20a     84 08 3A F1 
2c20e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2c212     42 EB 42 EB 
2c216     4E EB 57 EB 
2c21a     62 EB 6B EB 
2c21e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2c222     48 0B 43 0B 
2c226     3C 0B 36 0B 
2c22a     31 0B 2C 0B 
2c22e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2c232     1B 0B 5C 00 
2c236     6A EF 1B EC 
2c23a     81 EB 6A EB 
2c23e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2c242     85 EB 8E EB 
2c246     99 EB A3 EB 
2c24a     DD 05 E5 05 
2c24e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2c252     DB 05 D8 05 
2c256     D5 05 D1 05 
2c25a     D0 05 CB 05 
2c25e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2c262     0C EC BB EB 
2c266     B3 EB BB EB 
2c26a     C5 EB D0 EB 
2c26e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2c272     E4 F7 2C 06 
2c276     28 06 24 06 
2c27a     22 06 1F 06 
2c27e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2c282     16 06 14 06 
2c286     0F 06 D0 F3 
2c28a     65 ED 2D EC 
2c28e     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2c292     01 EC 0A EC 
2c296     14 EC 1E EC 
2c29a     29 EC FB 03 
2c29e     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2c2a2     63 06 60 06 
2c2a6     5E 06 59 06 
2c2aa     58 06 54 06 
2c2ae     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2c2b2     69 F1 21 ED 
2c2b6     55 EC 33 EC 
2c2ba     36 EC 40 EC 
2c2be     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2c2c2     5C EC 68 EC 
2c2c6     92 02 D9 02 
2c2ca     D7 02 D7 02 
2c2ce     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2c2d2     D1 02 D1 02 
2c2d6     CE 02 CD 02 
2c2da     5D FC 80 EF 
2c2de     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2c2e2     83 EC 8A EC 
2c2e6     93 EC 9C EC 
2c2ea     A5 EC B1 EC 
2c2ee     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2c2f2     2B 03 2A 03 
2c2f6     29 03 26 03 
2c2fa     25 03 24 03 
2c2fe     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2c302     1F 03 70 F7 
2c306     D0 EE 27 ED 
2c30a     DB EC D4 EC 
2c30e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2c312     F0 EC FA EC 
2c316     02 ED F9 F4 
2c31a     7B 03 7C 03 
2c31e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2c322     75 03 73 03 
2c326     72 03 70 03 
2c32a     6D 03 6C 03 
2c32e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2c332     54 ED 22 ED 
2c336     22 ED 2C ED 
2c33a     35 ED 3F ED 
2c33e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2c342     14 01 C3 03 
2c346     C1 03 C0 03 
2c34a     5F 01 A5 00 
2c34e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2c352     7B 00 7C 00 
2c356     20 00 85 F1 
2c35a     2A EE 89 ED 
2c35e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2c362     80 ED 87 ED 
2c366     90 ED 9A ED 
2c36a     A3 ED 73 00 
2c36e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2c372     D0 00 D0 00 
2c376     D0 00 D0 00 
2c37a     D0 00 CF 00 
2c37e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2c382     80 F0 3D EE 
2c386     D5 ED C7 ED 
2c38a     CD ED D6 ED 
2c38e     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2c392     F2 ED FA ED 
2c396     1D 01 29 01 
2c39a     27 01 27 01 
2c39e     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2c3a2     25 01 26 01 
2c3a6     26 01 23 01 
2c3aa     D0 F7 EC EF 
2c3ae     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2c3b2     1C EE 24 EE 
2c3b6     2D EE 37 EE 
2c3ba     40 EE 47 EE 
2c3be     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2c3c2     7D 01 7B 01 
2c3c6     7A 01 7A 01 
2c3ca     79 01 78 01 
2c3ce     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2c3d2     84 FE DE F3 
2c3d6     6C EF 93 EE 
2c3da     72 EE 72 EE 
2c3de     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2c3e2     8B EE 95 EE 
2c3e6     9E EE 15 FC 
2c3ea     67 FE 67 FE 
2c3ee     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2c3f2     6B FE 6B FE 
2c3f6     6D FE 6D FE 
2c3fa     6D FE 6F FE 
2c3fe     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2c402     DF EE CC EE 
2c406     CF EE D9 EE 
2c40a     E1 EE EA EE 
2c40e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2c412     5A FE C4 FE 
2c416     C3 FE C5 FE 
2c41a     C6 FE C6 FE 
2c41e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2c422     C8 FE C7 FE 
2c426     DA FB 85 F1 
2c42a     8D EF 31 EF 
2c42e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2c432     34 EF 3E EF 
2c436     46 EF 4F EF 
2c43a     57 EF 0D FF 
2c43e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2c442     1F FF 1F FF 
2c446     21 FF 21 FF 
2c44a     21 FF 21 FF 
2c44e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2c452     15 F1 BE EF 
2c456     84 EF 7E EF 
2c45a     88 EF 8F EF 
2c45e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2c462     A9 EF 06 F2 
2c466     A6 FC AB FC 
2c46a     AD FC AE FC 
2c46e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2c472     B2 FC B4 FC 
2c476     B6 FC B7 FC 
2c47a     8B F4 BD F0 
2c47e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2c482     E4 EF EE EF 
2c486     F6 EF FD EF 
2c48a     04 F0 0E F0 
2c48e     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2c492     0B FD 0D FD 
2c496     0F FD 11 FD 
2c49a     11 FD 13 FD 
2c49e     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2c4a2     17 FD 64 F3 
2c4a6     CD F0 52 F0 
2c4aa     41 F0 45 F0 
2c4ae     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2c4b2     5B F0 64 F0 
2c4b6     6D F0 FB FC 
2c4ba     65 FD 68 FD 
2c4be     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2c4c2     6C FD 6D FD 
2c4c6     6F FD 70 FD 
2c4ca     72 FD B3 FB 
2c4ce     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2c4d2     A4 F0 99 F0 
2c4d6     A0 F0 A8 F0 
2c4da     AE F0 B9 F0 
2c4de     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2c4e2     CB FB DD FB 
2c4e6     DE FB E0 FB 
2c4ea     E3 FB E3 FB 
2c4ee     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2c4f2     E9 FB EC FB 
2c4f6     62 F7 27 F2 
2c4fa     2A F1 FF F0 
2c4fe     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2c502     0C F1 13 F1 
2c506     1B F1 23 F1 
2c50a     33 F2 3C FC 
2c50e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2c512     42 FC 45 FC 
2c516     47 FC 48 FC 
2c51a     4A FC 4C FC 
2c51e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2c522     20 F2 77 F1 
2c526     5C F1 5F F1 
2c52a     64 F1 6C F1 
2c52e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2c532     83 F1 DC F8 
2c536     9A FC 9A FC 
2c53a     9B FC 9E FC 
2c53e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2c542     A3 FC A4 FC 
2c546     A6 FC A9 FC 
2c54a     90 F4 33 F2 
2c54e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2c552     BA F1 BF F1 
2c556     C7 F1 CE F1 
2c55a     D6 F1 DC F1 
2c55e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2c562     F3 FC F5 FC 
2c566     FE FB 79 FB 
2c56a     62 FB 5F FB 
2c56e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2c572     6F FA AF F3 
2c576     53 F2 12 F2 
2c57a     0F F2 15 F2 
2c57e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2c582     2A F2 32 F2 
2c586     38 F2 9A FB 
2c58a     AF FB B1 FB 
2c58e     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2c592     B7 FB B8 FB 
2c596     BA FB BC FB 
2c59a     C1 FB 3B F8 
2c59e     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2c5a2     6E F2 6C F2 
2c5a6     74 F2 7A F2 
2c5aa     81 F2 87 F2 
2c5ae     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2c5b2     06 FC 09 FC 
2c5b6     0C FC 0E FC 
2c5ba     0F FC 12 FC 
2c5be     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2c5c2     17 FC 1A FC 
2c5c6     B2 F6 7B F3 
2c5ca     DD F2 C5 F2 
2c5ce     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2c5d2     D4 F2 DB F2 
2c5d6     E0 F2 E8 F2 
2c5da     28 F8 60 FC 
2c5de     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2c5e2     64 FC 66 FC 
2c5e6     68 FC 6A FC 
2c5ea     6D FC 52 FC 
2c5ee     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2c5f2     78 F3 24 F3 
2c5f6     1A F3 1E F3 
2c5fa     24 F3 2A F3 
2c5fe     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2c602     3D F3 80 FA 
2c606     0C FB 0F FB 
2c60a     10 FB 14 FB 
2c60e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2c612     1B FB 1D FB 
2c616     1F FB 92 FA 
2c61a     DE F4 AE F3 
2c61e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2c622     79 F3 7E F3 
2c626     84 F3 8C F3 
2c62a     92 F3 97 F3 
2c62e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2c632     67 FB 69 FB 
2c636     6B FB 6F FB 
2c63a     71 FB 72 FB 
2c63e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2c642     E3 F8 BA F4 
2c646     EE F3 CC F3 
2c64a     CA F3 CF F3 
2c64e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2c652     E2 F3 E8 F3 
2c656     ED F3 B7 FB 
2c65a     BC FB BE FB 
2c65e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2c662     C4 FB C6 FB 
2c666     C8 FB C9 FB 
2c66a     CC FB 8F F7 
2c66e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2c672     1E F4 1E F4 
2c676     24 F4 2A F4 
2c67a     30 F4 38 F4 
2c67e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2c682     AD FA B1 FA 
2c686     B4 FA B6 FA 
2c68a     BA FA BB FA 
2c68e     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2c692     C2 FA C6 FA 
2c696     55 F6 C6 F4 
2c69a     7D F4 72 F4 
2c69e     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2c6a2     83 F4 89 F4 
2c6a6     8F F4 94 F4 
2c6aa     66 FA 03 FB 
2c6ae     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2c6b2     0A FB 0E FB 
2c6b6     10 FB 11 FB 
2c6ba     16 FB 18 FB 
2c6be     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2c6c2     F9 F4 CA F4 
2c6c6     C5 F4 CB F4 
2c6ca     D1 F4 D7 F4 
2c6ce     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2c6d2     E8 F4 3F FB 
2c6d6     56 FB 58 FB 
2c6da     5A FB 5E FB 
2c6de     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2c6e2     64 FB 64 FB 
2c6e6     69 FB 99 F9 
2c6ea     E9 F5 33 F5 
2c6ee     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2c6f2     1D F5 22 F5 
2c6f6     27 F5 2E F5 
2c6fa     32 F5 37 F5 
2c6fe     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2c702     BC FA BC FA 
2c706     C1 FA C2 FA 
2c70a     C4 FA C8 FA 
2c70e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2c712     F9 F7 DB F5 
2c716     78 F5 69 F5 
2c71a     6A F5 70 F5 
2c71e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2c722     7F F5 85 F5 
2c726     6E F7 06 FB 
2c72a     0A FB 0B FB 
2c72e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2c732     14 FB 15 FB 
2c736     18 FB 1B FB 
2c73a     1D FB 70 F7 
2c73e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2c742     B6 F5 BB F5 
2c746     C0 F5 C6 F5 
2c74a     CA F5 CF F5 
2c74e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2c752     54 FB 56 FB 
2c756     5A FB 5B FB 
2c75a     5E FB 5F FB 
2c75e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2c762     67 FB 52 FB 
2c766     29 F7 33 F6 
2c76a     06 F6 02 F6 
2c76e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2c772     10 F6 16 F6 
2c776     1A F6 1F F6 
2c77a     81 FB 9F FB 
2c77e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2c782     51 FB F2 FA 
2c786     E3 FA E3 FA 
2c78a     E5 FA E9 FA 
2c78e     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2c792     64 F6 4D F6 
2c796     4D F6 53 F6 
2c79a     57 F6 5C F6 
2c79e     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2c7a2     6A F6 19 FB 
2c7a6     1E FB 22 FB 
2c7aa     23 FB 24 FB 
2c7ae     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2c7b2     2C FB 2E FB 
2c7b6     32 FB F0 F8 
2c7ba     01 F7 A5 F6 
2c7be     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2c7c2     9F F6 A3 F6 
2c7c6     A6 F6 AC F6 
2c7ca     B0 F6 EB F7 
2c7ce     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2c7d2     68 FB 6C FB 
2c7d6     6E FB 71 FB 
2c7da     72 FB 74 FB 
2c7de     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2c7e2     71 F8 21 F7 
2c7e6     E5 F6 DD F6 
2c7ea     E1 F6 E6 F6 
2c7ee     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2c7f2     F5 F6 F7 F6 
2c7f6     F7 FA AB FB 
2c7fa     AD FB AF FB 
2c7fe     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2c802     B6 FB B9 FB 
2c806     BB FB BC FB 
2c80a     21 FB 07 F8 
2c80e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2c812     22 F7 26 F7 
2c816     2B F7 2E F7 
2c81a     34 F7 38 F7 
2c81e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2c822     13 FB 16 FB 
2c826     17 FB 1B FB 
2c82a     1E FB 20 FB 
2c82e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2c832     26 FB 77 FA 
2c836     F3 F7 7C F7 
2c83a     67 F7 6A F7 
2c83e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2c842     74 F7 7A F7 
2c846     7E F7 82 F7 
2c84a     53 FB 5A FB 
2c84e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2c852     5F FB 63 FB 
2c856     65 FB 67 FB 
2c85a     69 FB 6A FB 
2c85e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2c862     B5 F7 A9 F7 
2c866     AD F7 B0 F7 
2c86a     B5 F7 B8 F7 
2c86e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2c872     6E F8 99 FB 
2c876     9C FB 9D FB 
2c87a     9F FB A4 FB 
2c87e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2c882     A9 FB AB FB 
2c886     AD FB 46 F9 
2c88a     26 F8 F0 F7 
2c88e     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2c892     F4 F7 F8 F7 
2c896     FB F7 FF F7 
2c89a     03 F8 65 FA 
2c89e     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2c8a2     2B FB 2F FB 
2c8a6     30 FB 32 FB 
2c8aa     34 FB 38 FB 
2c8ae     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2c8b2     E9 F8 4A F8 
2c8b6     2E F8 2C F8 
2c8ba     2F F8 36 F8 
2c8be     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2c8c2     41 F8 44 F8 
2c8c6     4A FB 67 FB 
2c8ca     68 FB 6B FB 
2c8ce     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2c8d2     73 FB 74 FB 
2c8d6     78 FB 7A FB 
2c8da     14 FB E7 F8 
2c8de     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2c8e2     6D F8 70 F8 
2c8e6     73 F8 78 F8 
2c8ea     7C F8 80 F8 
2c8ee     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2c8f2     A6 FB A7 FB 
2c8f6     A9 FB AC FB 
2c8fa     AF FB B1 FB 
2c8fe     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2c902     B7 FB 73 FA 
2c906     F8 F8 B4 F8 
2c90a     A9 F8 AB F8 
2c90e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2c912     B4 F8 B8 F8 
2c916     BB F8 FA F8 
2c91a     64 FB 65 FB 
2c91e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2c922     6D FB 6F FB 
2c926     70 FB 74 FB 
2c92a     77 FB 77 FB 
2c92e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2c932     E9 F8 E4 F8 
2c936     E8 F8 EB F8 
2c93a     EE F8 F2 F8 
2c93e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2c942     B5 FA 9F FB 
2c946     A1 FB A4 FB 
2c94a     A5 FB A9 FB 
2c94e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2c952     AE FB B1 FB 
2c956     B2 FB C7 F9 
2c95a     39 F9 22 F9 
2c95e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2c962     26 F9 2A F9 
2c966     2E F9 32 F9 
2c96a     33 F9 BA FB 
2c96e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2c972     DE FB E1 FB 
2c976     E2 FB E4 FB 
2c97a     E5 FB E7 FB 
2c97e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2c982     C5 F9 67 F9 
2c986     57 F9 56 F9 
2c98a     5B F9 5F F9 
2c98e     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2c992     68 F9 6C F9 
2c996     0B FC 11 FC 
2c99a     14 FC 15 FC 
2c99e     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2c9a2     B5 FB B5 FB 
2c9a6     B6 FB B8 FB 
2c9aa     E9 FA C8 F9 
2c9ae     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2c9b2     90 F9 94 F9 
2c9b6     95 F9 99 F9 
2c9ba     9D F9 9F F9 
2c9be     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2c9c2     DE FB DF FB 
2c9c6     E2 FB E4 FB 
2c9ca     E6 FB E8 FB 
2c9ce     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2c9d2     EF FB AC FA 
2c9d6     E9 F9 C7 F9 
2c9da     C3 F9 C8 F9 
2c9de     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2c9e2     D0 F9 D4 F9 
2c9e6     D6 F9 0E FB 
2c9ea     11 FC 13 FC 
2c9ee     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2c9f2     19 FC 1B FC 
2c9f6     1D FC 1E FC 
2c9fa     21 FC 22 FC 
2c9fe     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2ca02     F7 F9 F7 F9 
2ca06     FB F9 FE F9 
2ca0a     00 FA 03 FA 
2ca0e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2ca12     1B FC 45 FC 
2ca16     46 FC 48 FC 
2ca1a     4A FC 4B FC 
2ca1e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2ca22     52 FC 54 FC 
2ca26     F3 FB 82 FA 
2ca2a     35 FA 28 FA 
2ca2e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2ca32     31 FA 32 FA 
2ca36     37 FA 37 FA 
2ca3a     3C FA 00 FC 
2ca3e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2ca42     09 FC 0B FC 
2ca46     0F FC 12 FC 
2ca4a     12 FC 15 FC 
2ca4e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2ca52     8D FA 60 FA 
2ca56     5B FA 5C FA 
2ca5a     60 FA 61 FA 
2ca5e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2ca62     6C FA 6D FA 
2ca66     37 FC 3A FC 
2ca6a     3B FC 3D FC 
2ca6e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2ca72     43 FC 44 FC 
2ca76     45 FC 47 FC 
2ca7a     51 FB AB FA 
2ca7e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2ca82     8E FA 91 FA 
2ca86     93 FA 95 FA 
2ca8a     98 FA 9B FA 
2ca8e     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2ca92     68 FC 6A FC 
2ca96     6C FC 6E FC 
2ca9a     70 FC 72 FC 
2ca9e     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2caa2     76 FC 3B FB 
2caa6     D0 FA BB FA 
2caaa     B9 FA BD FA 
2caae     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2cab2     C4 FA C6 FA 
2cab6     CA FA 13 FC 
2caba     3A FC 3A FC 
2cabe     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2cac2     41 FC 43 FC 
2cac6     44 FC 47 FC 
2caca     48 FC 3C FC 
2cace     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2cad2     E6 FA E8 FA 
2cad6     EB FA EE FA 
2cada     F0 FA F2 FA 
2cade     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2cae2     61 FC 66 FC 
2cae6     68 FC 6B FC 
2caea     6C FC 6E FC 
2caee     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2caf2     73 FC 75 FC 
2caf6     13 FC 3F FB 
2cafa     17 FB 12 FB 
2cafe     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2cb02     1A FB 1D FB 
2cb06     1F FB 20 FB 
2cb0a     23 FB 92 FC 
2cb0e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2cb12     96 FC 97 FC 
2cb16     9A FC 9C FC 
2cb1a     9E FC 9F FC 
2cb1e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2cb22     5A FB 41 FB 
2cb26     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2cb2a     00 00 00 00 | zero2 long 0
2cb2e     01 00 00 00 
2cb32     00 00 00 00 
2cb36     00 00 00 00 
2cb3a     00 00 00 00 | mouse  file "mouse2.def"
2cb3e     00 00 00 00 
2cb42     00 00 00 00 
2cb46     00 00 00 00 
2cb4a     00 00 00 00 | 	byte	$00[16]
2cb4e     01 01 00 00 
2cb52     00 00 00 00 
2cb56     00 00 00 00 
2cb5a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cb5e     00 00 00 00 
2cb62     00 00 00 00 
2cb66     00 00 00 00 
2cb6a     00 00 00 00 | 	byte	$00[16]
2cb6e     01 0D 01 00 
2cb72     00 00 00 00 
2cb76     00 00 00 00 
2cb7a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cb7e     00 00 00 00 
2cb82     00 00 00 00 
2cb86     00 00 00 00 
2cb8a     00 00 00 00 | 	byte	$00[16]
2cb8e     01 0D 0D 01 
2cb92     00 00 00 00 
2cb96     00 00 00 00 
2cb9a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cb9e     00 00 00 00 
2cba2     00 00 00 00 
2cba6     00 00 00 00 
2cbaa     00 00 00 00 | 	byte	$00[16]
2cbae     01 0D 0D 0D 
2cbb2     01 00 00 00 
2cbb6     00 00 00 00 
2cbba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cbbe     00 00 00 00 
2cbc2     00 00 00 00 
2cbc6     00 00 00 00 
2cbca     00 00 00 00 | 	byte	$00[16]
2cbce     01 0D 0D 0D 
2cbd2     0D 01 00 00 
2cbd6     00 00 00 00 
2cbda     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cbde     00 00 00 00 
2cbe2     00 00 00 00 
2cbe6     00 00 00 00 
2cbea     00 00 00 00 | 	byte	$00[16]
2cbee     01 0D 0D 0D 
2cbf2     0D 0D 01 00 
2cbf6     00 00 00 00 
2cbfa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cbfe     00 00 00 00 
2cc02     00 00 00 00 
2cc06     00 00 00 00 
2cc0a     00 00 00 00 | 	byte	$00[16]
2cc0e     01 0D 0D 0D 
2cc12     0D 0D 0D 01 
2cc16     00 00 00 00 
2cc1a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2cc1e     00 00 00 00 
2cc22     00 00 00 00 
2cc26     00 00 00 00 
2cc2a     00 00 00 00 | 	byte	$00[16]
2cc2e     01 0D 0D 0D 
2cc32     0D 0D 0D 0C 
2cc36     01 00 00 00 
2cc3a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2cc3e     00 00 00 00 
2cc42     00 00 00 00 
2cc46     00 00 00 00 
2cc4a     00 00 00 00 | 	byte	$00[16]
2cc4e     01 0D 0D 0D 
2cc52     0D 0D 0D 0D 
2cc56     0C 01 00 00 
2cc5a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2cc5e     00 00 00 00 
2cc62     00 00 00 00 
2cc66     00 00 00 00 
2cc6a     00 00 00 00 | 	byte	$00[16]
2cc6e     01 0D 0D 0D 
2cc72     0D 0D 0D 0D 
2cc76     0D 0C 01 00 
2cc7a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2cc7e     00 00 00 00 
2cc82     00 00 00 00 
2cc86     00 00 00 00 
2cc8a     00 00 00 00 | 	byte	$00[16]
2cc8e     01 0D 0D 0D 
2cc92     0D 0D 0D 0D 
2cc96     0D 0D 0B 01 
2cc9a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2cc9e     00 00 00 00 
2cca2     00 00 00 00 
2cca6     00 00 00 00 
2ccaa     00 00 00 00 | 	byte	$00[16]
2ccae     01 0D 0D 0D 
2ccb2     0C 0D 0D 03 
2ccb6     01 01 01 01 
2ccba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2ccbe     00 00 00 00 
2ccc2     00 00 00 00 
2ccc6     00 00 00 00 
2ccca     00 00 00 00 | 	byte	$00[16]
2ccce     01 0D 0D 0C 
2ccd2     01 09 0D 03 
2ccd6     00 00 00 00 
2ccda     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2ccde     00 00 00 00 
2cce2     00 00 00 00 
2cce6     00 00 00 00 
2ccea     00 00 00 00 | 	byte	$00[16]
2ccee     01 0D 0C 01 
2ccf2     00 01 0D 0B 
2ccf6     01 00 00 00 
2ccfa     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2ccfe     00 00 00 00 
2cd02     00 00 00 00 
2cd06     00 00 00 00 
2cd0a     00 00 00 00 | 	byte	$00[16]
2cd0e     01 0C 01 00 
2cd12     00 01 0A 0D 
2cd16     01 00 00 00 
2cd1a     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2cd1e     00 00 00 00 
2cd22     00 00 00 00 
2cd26     00 00 00 00 
2cd2a     00 00 00 00 | 	byte	$00[16]
2cd2e     01 01 00 00 
2cd32     00 00 01 0D 
2cd36     0B 01 00 00 
2cd3a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2cd3e     00 00 00 00 
2cd42     00 00 00 00 
2cd46     00 00 00 00 
2cd4a     00 00 00 00 
2cd4e     00 00 00 00 
2cd52     00 00       | 	byte	$00[22]
2cd54     01 0B 0D 01 
2cd58     00 00 00 00 
2cd5c     00 00 00 00 
2cd60     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cd64     00 00 00 00 
2cd68     00 00 00 00 
2cd6c     00 00 00 00 
2cd70     00 00 00 00 
2cd74     00          | 	byte	$00[17]
2cd75     01 01 00 00 
2cd79     00 00 00 00 
2cd7d     00 00 00 00 
2cd81     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cd85     00 00 00 00 
      ...             
2cf29     00 00 00 00 
2cf2d     00          | 	byte	$00[425]
2cf2e     73 32 00 04 
2cf32     00 00 10 00 
2cf36     00 00 00 00 
2cf3a     00 00 00 00 | atari2 file "atari2.s2"
2cf3e     43 87 43 87 
2cf42     43 87 44 87 
2cf46     43 87 44 87 
2cf4a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2cf4e     43 87 43 87 
2cf52     43 87 44 87 
2cf56     43 87 43 87 
2cf5a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2cf5e     44 87 43 87 
2cf62     44 87 43 87 
2cf66     43 87 43 87 
2cf6a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2cf6e     43 87 43 87 
2cf72     44 87 43 87 
2cf76     44 87 44 87 
2cf7a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
2cf7e     43 87 43 87 
2cf82     44 87 43 87 
2cf86     43 87 42 87 
2cf8a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2cf8e     43 87 43 87 
2cf92     43 87 43 87 
2cf96     44 87 43 87 
2cf9a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2cf9e     44 87 44 87 
2cfa2     43 87 44 87 
2cfa6     43 87 44 87 
2cfaa     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
2cfae     44 87 43 87 
2cfb2     44 87 44 87 
2cfb6     43 87 43 87 
2cfba     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2cfbe     43 87 44 87 
2cfc2     44 87 43 87 
2cfc6     43 87 44 87 
2cfca     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2cfce     43 87 43 87 
2cfd2     43 87 43 87 
2cfd6     43 87 43 87 
2cfda     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
2cfde     42 87 43 87 
2cfe2     44 87 42 87 
2cfe6     43 87 43 87 
2cfea     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
2cfee     43 87 44 87 
2cff2     44 87 43 87 
2cff6     43 87 43 87 
2cffa     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2cffe     43 87 5C 87 
2d002     EE 86 AC 87 
2d006     4C 7C A3 78 
2d00a     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
2d00e     BC 78 BB 78 
2d012     BD 78 BC 78 
2d016     BB 78 BD 78 
2d01a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
2d01e     BB 78 BB 78 
2d022     BC 78 BC 78 
2d026     BC 78 BB 78 
2d02a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d02e     BC 78 BC 78 
2d032     BC 78 BC 78 
2d036     BC 78 BC 78 
2d03a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2d03e     BB 78 BC 78 
2d042     A0 78 4C 7C 
2d046     11 7A 29 89 
2d04a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
2d04e     44 87 43 87 
2d052     44 87 43 87 
2d056     43 87 42 87 
2d05a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2d05e     43 87 43 87 
2d062     44 87 ED 85 
2d066     71 85 52 79 
2d06a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
2d06e     BC 78 BC 78 
2d072     BC 78 BC 78 
2d076     BC 78 BC 78 
2d07a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2d07e     BC 78 BC 78 
2d082     BC 78 A0 78 
2d086     CF 7A B9 81 
2d08a     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
2d08e     44 87 43 87 
2d092     43 87 44 87 
2d096     43 87 44 87 
2d09a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d09e     43 87 43 87 
2d0a2     43 87 43 87 
2d0a6     44 87 43 87 
2d0aa     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2d0ae     43 87 43 87 
2d0b2     44 87 43 87 
2d0b6     44 87 43 87 
2d0ba     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2d0be     44 87 43 87 
2d0c2     43 87 43 87 
2d0c6     5A 87 39 81 
2d0ca     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
2d0ce     A5 78 BC 78 
2d0d2     BB 78 BC 78 
2d0d6     BB 78 BC 78 
2d0da     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
2d0de     BC 78 BC 78 
2d0e2     BC 78 BC 78 
2d0e6     BC 78 8F 79 
2d0ea     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
2d0ee     09 85 47 87 
2d0f2     43 87 43 87 
2d0f6     42 87 42 87 
2d0fa     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
2d0fe     43 87 43 87 
2d102     43 87 43 87 
2d106     43 87 44 87 
2d10a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d10e     43 87 43 87 
2d112     44 87 43 87 
2d116     42 87 43 87 
2d11a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
2d11e     44 87 43 87 
2d122     43 87 43 87 
2d126     44 87 44 87 
2d12a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
2d12e     94 78 55 7A 
2d132     B9 78 BC 78 
2d136     BC 78 BC 78 
2d13a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2d13e     BC 78 BB 78 
2d142     BC 78 BC 78 
2d146     BC 78 BC 78 
2d14a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2d14e     BB 78 BC 78 
2d152     BC 78 BC 78 
2d156     BB 78 BC 78 
2d15a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d15e     BC 78 BC 78 
2d162     BD 78 BC 78 
2d166     BC 78 BB 78 
2d16a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
2d16e     94 78 B3 84 
2d172     36 84 4A 87 
2d176     43 87 43 87 
2d17a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
2d17e     43 87 44 87 
2d182     43 87 43 87 
2d186     43 87 43 87 
2d18a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2d18e     43 87 44 87 
2d192     43 87 44 87 
2d196     43 87 43 87 
2d19a     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2d19e     43 87 43 87 
2d1a2     43 87 45 87 
2d1a6     43 87 43 87 
2d1aa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
2d1ae     43 87 44 87 
2d1b2     44 87 44 87 
2d1b6     43 87 43 87 
2d1ba     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2d1be     43 87 42 87 
2d1c2     43 87 43 87 
2d1c6     44 87 43 87 
2d1ca     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2d1ce     54 87 3C 82 
2d1d2     36 83 52 79 
2d1d6     C6 78 BC 78 
2d1da     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
2d1de     BB 78 BB 78 
2d1e2     BC 78 BC 78 
2d1e6     BC 78 BC 78 
2d1ea     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2d1ee     BD 78 ED 78 
2d1f2     1B 79 F4 83 
2d1f6     4D 83 4E 87 
2d1fa     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
2d1fe     44 87 43 87 
2d202     42 87 44 87 
2d206     43 87 42 87 
2d20a     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
2d20e     43 87 54 87 
2d212     26 82 B3 84 
2d216     D6 77 BB 78 
2d21a     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
2d21e     BC 78 BB 78 
2d222     BB 78 BB 78 
2d226     BB 78 BB 78 
2d22a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
2d22e     BC 78 BC 78 
2d232     26 79 18 75 
2d236     36 83 1F 84 
2d23a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
2d23e     43 87 43 87 
2d242     43 87 43 87 
2d246     43 87 44 87 
2d24a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d24e     43 87 44 87 
2d252     44 87 43 87 
2d256     43 87 43 87 
2d25a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
2d25e     43 87 43 87 
2d262     43 87 43 87 
2d266     44 87 44 87 
2d26a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
2d26e     44 87 43 87 
2d272     43 87 43 87 
2d276     43 87 44 87 
2d27a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2d27e     44 87 44 87 
2d282     44 87 43 87 
2d286     44 87 43 87 
2d28a     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d28e     43 87 43 87 
2d292     43 87 44 87 
2d296     44 87 43 87 
2d29a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d29e     43 87 43 87 
2d2a2     43 87 43 87 
2d2a6     43 87 44 87 
2d2aa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d2ae     43 87 44 87 
2d2b2     43 87 44 87 
2d2b6     19 87 7D 86 
2d2ba     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
2d2be     B1 78 BC 78 
2d2c2     BC 78 BC 78 
2d2c6     BC 78 BC 78 
2d2ca     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2d2ce     BC 78 BC 78 
2d2d2     BD 78 BC 78 
2d2d6     B7 78 3B 7B 
2d2da     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
2d2de     96 86 44 87 
2d2e2     43 87 43 87 
2d2e6     43 87 43 87 
2d2ea     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
2d2ee     44 87 44 87 
2d2f2     43 87 44 87 
2d2f6     43 87 44 87 
2d2fa     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
2d2fe     43 87 44 87 
2d302     43 87 44 87 
2d306     43 87 44 87 
2d30a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d30e     43 87 44 87 
2d312     43 87 43 87 
2d316     44 87 43 87 
2d31a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d31e     44 87 44 87 
2d322     43 87 43 87 
2d326     43 87 44 87 
2d32a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2d32e     43 87 43 87 
2d332     43 87 43 87 
2d336     44 87 44 87 
2d33a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
2d33e     36 83 CF 7A 
2d342     AB 78 BB 78 
2d346     BC 78 BC 78 
2d34a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
2d34e     BB 78 BC 78 
2d352     BC 78 BC 78 
2d356     BC 78 BC 78 
2d35a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2d35e     BC 78 BC 78 
2d362     BC 78 BB 78 
2d366     BC 78 BC 78 
2d36a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2d36e     BB 78 BC 78 
2d372     BB 78 BC 78 
2d376     BC 78 BD 78 
2d37a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
2d37e     BC 78 BC 78 
2d382     BC 78 BC 78 
2d386     BC 78 BD 78 
2d38a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
2d38e     BC 78 BB 78 
2d392     BC 78 BB 78 
2d396     BB 78 BC 78 
2d39a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
2d39e     BC 78 BC 78 
2d3a2     BC 78 BC 78 
2d3a6     BC 78 BB 78 
2d3aa     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
2d3ae     BC 78 BC 78 
2d3b2     BC 78 BD 78 
2d3b6     BB 78 BC 78 
2d3ba     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2d3be     BC 78 BC 78 
2d3c2     BC 78 BB 78 
2d3c6     BC 78 BB 78 
2d3ca     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2d3ce     BB 78 BC 78 
2d3d2     BC 78 BC 78 
2d3d6     BC 78 BB 78 
2d3da     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d3de     BC 78 BC 78 
2d3e2     BC 78 BB 78 
2d3e6     BC 78 BB 78 
2d3ea     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d3ee     BC 78 BC 78 
2d3f2     BC 78 BC 78 
2d3f6     BB 78 BC 78 
2d3fa     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2d3fe     BC 78 9F 78 
2d402     52 79 B3 84 
2d406     2F 86 60 87 
2d40a     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
2d40e     44 87 43 87 
2d412     43 87 43 87 
2d416     43 87 43 87 
2d41a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2d41e     43 87 43 87 
2d422     43 87 44 87 
2d426     43 87 43 87 
2d42a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2d42e     43 87 43 87 
2d432     43 87 43 87 
2d436     43 87 44 87 
2d43a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2d43e     44 87 44 87 
2d442     5E 87 BC 80 
2d446     FB 80 94 78 
2d44a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
2d44e     BD 78 BC 78 
2d452     BB 78 BC 78 
2d456     BB 78 BB 78 
2d45a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
2d45e     BC 78 BB 78 
2d462     BB 78 6B 79 
2d466     D6 77 AC 87 
2d46a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
2d46e     43 87 44 87 
2d472     43 87 43 87 
2d476     44 87 43 87 
2d47a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2d47e     43 87 44 87 
2d482     43 87 5C 87 
2d486     E7 80 00 80 
2d48a     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
2d48e     BC 78 BD 78 
2d492     BC 78 BC 78 
2d496     BC 78 BB 78 
2d49a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d49e     BC 78 BC 78 
2d4a2     BB 78 BC 78 
2d4a6     BB 78 BC 78 
2d4aa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d4ae     BB 78 BC 78 
2d4b2     BC 78 BC 78 
2d4b6     BC 78 BC 78 
2d4ba     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2d4be     BC 78 BC 78 
2d4c2     BC 78 BC 78 
2d4c6     A0 78 8D 7B 
2d4ca     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
2d4ce     60 87 43 87 
2d4d2     44 87 44 87 
2d4d6     43 87 43 87 
2d4da     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
2d4de     44 87 43 87 
2d4e2     43 87 43 87 
2d4e6     44 87 73 86 
2d4ea     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
2d4ee     51 7B B6 78 
2d4f2     BC 78 BD 78 
2d4f6     BC 78 BC 78 
2d4fa     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2d4fe     BB 78 BC 78 
2d502     BD 78 BB 78 
2d506     BC 78 BB 78 
2d50a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2d50e     BC 78 BC 78 
2d512     BC 78 BC 78 
2d516     BB 78 BC 78 
2d51a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d51e     BC 78 BB 78 
2d522     BB 78 BC 78 
2d526     BC 78 BB 78 
2d52a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
2d52e     22 8C AF 84 
2d532     48 87 43 87 
2d536     44 87 43 87 
2d53a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
2d53e     43 87 42 87 
2d542     43 87 43 87 
2d546     44 87 43 87 
2d54a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d54e     43 87 43 87 
2d552     44 87 44 87 
2d556     43 87 43 87 
2d55a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2d55e     43 87 43 87 
2d562     43 87 43 87 
2d566     44 87 43 87 
2d56a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
2d56e     9F 8B D6 77 
2d572     16 7C B3 78 
2d576     BC 78 BB 78 
2d57a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2d57e     BB 78 BC 78 
2d582     BB 78 BC 78 
2d586     BC 78 BC 78 
2d58a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2d58e     BC 78 BB 78 
2d592     BB 78 BC 78 
2d596     BB 78 BC 78 
2d59a     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2d59e     BB 78 BB 78 
2d5a2     BC 78 BC 78 
2d5a6     BC 78 BB 78 
2d5aa     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2d5ae     BC 78 BC 78 
2d5b2     BC 78 BD 78 
2d5b6     BB 78 BC 78 
2d5ba     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
2d5be     BC 78 BC 78 
2d5c2     BC 78 BB 78 
2d5c6     BC 78 BC 78 
2d5ca     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2d5ce     A8 78 54 7E 
2d5d2     F4 83 17 82 
2d5d6     50 87 43 87 
2d5da     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
2d5de     44 87 43 87 
2d5e2     44 87 43 87 
2d5e6     43 87 44 87 
2d5ea     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2d5ee     43 87 28 87 
2d5f2     20 85 CF 7A 
2d5f6     70 7D AD 78 
2d5fa     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
2d5fe     BB 78 BC 78 
2d602     BC 78 BC 78 
2d606     BB 78 BB 78 
2d60a     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
2d60e     BB 78 B2 78 
2d612     9A 7C CF 7A 
2d616     4A 87 0D 87 
2d61a     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
2d61e     43 87 44 87 
2d622     43 87 44 87 
2d626     43 87 43 87 
2d62a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
2d62e     44 87 43 87 
2d632     28 87 51 85 
2d636     11 7A 1E 7D 
2d63a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
2d63e     BC 78 BB 78 
2d642     BC 78 BC 78 
2d646     BC 78 BC 78 
2d64a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2d64e     BB 78 BC 78 
2d652     BB 78 BC 78 
2d656     BC 78 BC 78 
2d65a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2d65e     BB 78 BC 78 
2d662     BC 78 BC 78 
2d666     BD 78 BB 78 
2d66a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
2d66e     BC 78 BB 78 
2d672     BC 78 BC 78 
2d676     BC 78 BB 78 
2d67a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d67e     BC 78 BC 78 
2d682     BC 78 BC 78 
2d686     BB 78 BC 78 
2d68a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d68e     BC 78 BD 78 
2d692     BC 78 BC 78 
2d696     BC 78 BB 78 
2d69a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d69e     BC 78 BB 78 
2d6a2     BB 78 BC 78 
2d6a6     BC 78 BB 78 
2d6aa     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d6ae     BB 78 BB 78 
2d6b2     BB 78 BC 78 
2d6b6     B6 78 48 7D 
2d6ba     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
2d6be     56 87 43 87 
2d6c2     42 87 44 87 
2d6c6     44 87 43 87 
2d6ca     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2d6ce     43 87 44 87 
2d6d2     43 87 44 87 
2d6d6     4C 87 7E 83 
2d6da     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
2d6de     F7 78 BC 78 
2d6e2     BC 78 BB 78 
2d6e6     BB 78 BC 78 
2d6ea     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2d6ee     BC 78 BB 78 
2d6f2     BC 78 BC 78 
2d6f6     BB 78 BC 78 
2d6fa     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2d6fe     BB 78 BC 78 
2d702     BC 78 BC 78 
2d706     BC 78 BB 78 
2d70a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d70e     BC 78 BC 78 
2d712     BC 78 BC 78 
2d716     BC 78 BB 78 
2d71a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d71e     BC 78 BB 78 
2d722     BB 78 BC 78 
2d726     BC 78 BB 78 
2d72a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2d72e     BC 78 BC 78 
2d732     BB 78 BC 78 
2d736     BC 78 BC 78 
2d73a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
2d73e     73 32 00 04 
2d742     00 00 10 00 
2d746     00 00 00 00 
2d74a     00 00 00 00 | atari12 file "atari12.s2"
2d74e     00 6D 00 6D 
2d752     00 6D 00 6D 
2d756     00 6D 00 6D 
2d75a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2d75e     00 6D 00 6D 
2d762     00 6D 00 6D 
2d766     00 6D 00 6D 
2d76a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2d76e     00 6D 00 6D 
2d772     00 6D 00 6D 
2d776     00 6D 00 6D 
2d77a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2d77e     00 6D 00 6D 
2d782     00 6D 00 6D 
2d786     00 6D 00 6D 
2d78a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2d78e     00 6D 00 6D 
2d792     00 6D 00 6D 
2d796     00 6D 00 6D 
2d79a     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
2d79e     00 6C 00 6C 
2d7a2     00 6C 00 6C 
2d7a6     00 6C 00 6C 
2d7aa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d7ae     00 6C 00 6C 
2d7b2     00 6C 00 6C 
2d7b6     00 6C 00 6C 
2d7ba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d7be     00 6C 00 6C 
2d7c2     00 6C 00 6C 
2d7c6     00 6C 00 6C 
2d7ca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d7ce     00 6C 00 6C 
2d7d2     00 6C 00 6C 
2d7d6     00 6C 00 6C 
2d7da     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d7de     00 6C 00 6C 
2d7e2     00 6C 00 6C 
2d7e6     00 6C 00 6C 
2d7ea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d7ee     00 6C 00 6C 
2d7f2     00 6C 00 6C 
2d7f6     00 6C 00 6C 
2d7fa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d7fe     00 6C 00 6C 
2d802     00 6C 00 6C 
2d806     00 6C 00 6C 
2d80a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d80e     00 6C 00 6C 
2d812     00 6C 00 6C 
2d816     00 6C 00 6C 
2d81a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d81e     00 6C 00 6C 
2d822     00 6C 00 6C 
2d826     00 6C 00 6C 
2d82a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d82e     00 6C 00 6C 
2d832     00 6C 00 6C 
2d836     00 6C 00 6C 
2d83a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d83e     00 6C 00 6C 
2d842     00 6C 00 6C 
2d846     00 6C 00 6C 
2d84a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2d84e     00 6C 00 6B 
2d852     00 6B 00 6B 
2d856     00 6B 00 6B 
2d85a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d85e     00 6B 00 6B 
2d862     00 6B 00 6B 
2d866     00 6B 00 6B 
2d86a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d86e     00 6B 00 6B 
2d872     00 6B 00 6B 
2d876     00 6B 00 6B 
2d87a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d87e     00 6B 00 6B 
2d882     00 6B 00 6B 
2d886     00 6B 00 6B 
2d88a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d88e     00 6B 00 6B 
2d892     00 6B 00 6B 
2d896     00 6B 00 6B 
2d89a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d89e     00 6B 00 6B 
2d8a2     00 6B 00 6B 
2d8a6     00 6B 00 6B 
2d8aa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d8ae     00 6B 00 6B 
2d8b2     00 6B 00 6B 
2d8b6     00 6B 00 6B 
2d8ba     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d8be     00 6B 00 6B 
2d8c2     00 6B 00 6B 
2d8c6     00 6B 00 6B 
2d8ca     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d8ce     00 6B 00 6B 
2d8d2     00 6B 00 6B 
2d8d6     00 6B 00 6B 
2d8da     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2d8de     00 6B 00 6B 
2d8e2     00 6B 00 6B 
2d8e6     00 6A 00 9D 
2d8ea     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
2d8ee     00 9E 00 9E 
2d8f2     00 9E 00 9E 
2d8f6     00 9E 00 9E 
2d8fa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d8fe     00 9E 00 9E 
2d902     00 9E 00 9E 
2d906     00 9E 00 9E 
2d90a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d90e     00 9E 00 9E 
2d912     00 9E 00 9E 
2d916     00 9E 00 9E 
2d91a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d91e     00 9E 00 9E 
2d922     00 9E 00 9E 
2d926     00 9E 00 9E 
2d92a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d92e     00 9E 00 9E 
2d932     00 9E 00 9E 
2d936     00 9E 00 9E 
2d93a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d93e     00 9E 00 9E 
2d942     00 9E 00 9E 
2d946     00 9E 00 9E 
2d94a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d94e     00 9E 00 9E 
2d952     00 9E 00 9E 
2d956     00 9E 00 9E 
2d95a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d95e     00 9E 00 9E 
2d962     00 9E 00 9E 
2d966     00 9E 00 9E 
2d96a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2d96e     00 9E 00 9E 
2d972     00 9E 00 9E 
2d976     00 9E 00 9E 
2d97a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
2d97e     00 9F 00 9F 
2d982     00 9F 00 9F 
2d986     00 9F 00 9F 
2d98a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d98e     00 9F 00 9F 
2d992     00 9F 00 9F 
2d996     00 9F 00 9F 
2d99a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d99e     00 9F 00 9F 
2d9a2     00 9F 00 9F 
2d9a6     00 9F 00 9F 
2d9aa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d9ae     00 9F 00 9F 
2d9b2     00 9F 00 9F 
2d9b6     00 9F 00 9F 
2d9ba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d9be     00 9F 00 9F 
2d9c2     00 9F 00 9F 
2d9c6     00 9F 00 9F 
2d9ca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d9ce     00 9F 00 9F 
2d9d2     00 9F 00 9F 
2d9d6     00 9F 00 9F 
2d9da     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d9de     00 9F 00 9F 
2d9e2     00 9F 00 9F 
2d9e6     00 9F 00 9F 
2d9ea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d9ee     00 9F 00 9F 
2d9f2     00 9F 00 9F 
2d9f6     00 9F 00 9F 
2d9fa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2d9fe     00 9F 00 9F 
2da02     00 9F 00 9F 
2da06     00 9F 00 9F 
2da0a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2da0e     00 9F 00 9F 
2da12     00 9F 00 9F 
2da16     00 9F 00 9F 
2da1a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2da1e     00 9F 00 9F 
2da22     00 9F 00 9F 
2da26     00 9F 00 9F 
2da2a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2da2e     00 9F 00 9F 
2da32     00 9F 00 9F 
2da36     00 9F 00 9F 
2da3a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2da3e     00 9F 00 9F 
2da42     00 9F 00 A0 
2da46     00 A0 00 A0 
2da4a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da4e     00 A0 00 A0 
2da52     00 A0 00 A0 
2da56     00 A0 00 A0 
2da5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da5e     00 A0 00 A0 
2da62     00 A0 00 A0 
2da66     00 A0 00 A0 
2da6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da6e     00 A0 00 A0 
2da72     00 A0 00 A0 
2da76     00 A0 00 A0 
2da7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da7e     00 A0 00 A0 
2da82     00 A0 00 A0 
2da86     00 A0 00 A0 
2da8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da8e     00 A0 00 A0 
2da92     00 A0 00 A0 
2da96     00 A0 00 A0 
2da9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2da9e     00 A0 00 A0 
2daa2     00 A0 00 A0 
2daa6     00 A0 00 A0 
2daaa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2daae     00 A0 00 A0 
2dab2     00 A0 00 A0 
2dab6     00 A0 00 A0 
2daba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dabe     00 A0 00 A0 
2dac2     00 A0 00 A0 
2dac6     00 A0 00 A0 
2daca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dace     00 A0 00 A0 
2dad2     00 A0 00 A0 
2dad6     00 A0 00 A0 
2dada     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dade     00 A0 00 A0 
2dae2     00 A0 00 A0 
2dae6     00 A0 00 A0 
2daea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2daee     00 A0 00 A0 
2daf2     00 A0 00 A0 
2daf6     00 A0 00 A0 
2dafa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dafe     00 A0 00 A0 
2db02     00 A0 00 A0 
2db06     00 A0 00 A0 
2db0a     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
2db0e     00 6D 00 6D 
2db12     00 6D 00 6D 
2db16     00 6D 00 6D 
2db1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db1e     00 6D 00 6D 
2db22     00 6D 00 6D 
2db26     00 6D 00 6D 
2db2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db2e     00 6D 00 6D 
2db32     00 6D 00 6D 
2db36     00 6D 00 6D 
2db3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db3e     00 6D 00 6D 
2db42     00 6D 00 6D 
2db46     00 6D 00 6D 
2db4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db4e     00 6D 00 6D 
2db52     00 6D 00 6D 
2db56     00 6D 00 6D 
2db5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db5e     00 6D 00 6D 
2db62     00 6D 00 6D 
2db66     00 6D 00 6D 
2db6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db6e     00 6D 00 6D 
2db72     00 6D 00 6D 
2db76     00 6D 00 6D 
2db7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db7e     00 6D 00 6D 
2db82     00 6D 00 6D 
2db86     00 6D 00 6D 
2db8a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2db8e     00 6D 00 6D 
2db92     00 A0 00 A0 
2db96     00 A0 00 A0 
2db9a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2db9e     00 A0 00 A0 
2dba2     00 A0 00 A0 
2dba6     00 A0 00 A0 
2dbaa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dbae     00 A0 00 A0 
2dbb2     00 A0 00 A0 
2dbb6     00 A0 00 A0 
2dbba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dbbe     00 A0 00 A0 
2dbc2     00 A0 00 A0 
2dbc6     00 A0 00 A0 
2dbca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dbce     00 A0 00 A0 
2dbd2     00 A0 00 A0 
2dbd6     00 A0 00 A0 
2dbda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dbde     00 A0 00 A0 
2dbe2     00 A0 00 A0 
2dbe6     00 A0 00 A0 
2dbea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dbee     00 A0 00 A0 
2dbf2     00 A0 00 A0 
2dbf6     00 A0 00 A0 
2dbfa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dbfe     00 A0 00 A0 
2dc02     00 A0 00 A0 
2dc06     00 A0 00 A0 
2dc0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dc0e     00 A0 00 A0 
2dc12     00 A0 00 A0 
2dc16     00 A0 00 A0 
2dc1a     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
2dc1e     00 6D 00 6D 
2dc22     00 6D 00 6D 
2dc26     00 6D 00 6D 
2dc2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dc2e     00 6D 00 6D 
2dc32     00 6D 00 6D 
2dc36     00 6D 00 6D 
2dc3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dc3e     00 6D 00 6D 
2dc42     00 6D 00 6D 
2dc46     00 6D 00 6D 
2dc4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dc4e     00 6D 00 6D 
2dc52     00 6D 00 6D 
2dc56     00 6D 00 6D 
2dc5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dc5e     00 6D 00 6D 
2dc62     00 6D 00 6D 
2dc66     00 6D 00 6D 
2dc6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dc6e     00 6D 00 6D 
2dc72     00 6D 00 6D 
2dc76     00 6D 00 6D 
2dc7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dc7e     00 6D 00 6D 
2dc82     00 6D 00 6D 
2dc86     00 6D 00 6D 
2dc8a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dc8e     00 6D 00 6D 
2dc92     00 6D 00 6D 
2dc96     00 6D 00 6D 
2dc9a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2dc9e     00 6D 00 6D 
2dca2     00 6C 00 A0 
2dca6     00 9F 00 A0 
2dcaa     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
2dcae     00 A0 00 A0 
2dcb2     00 A0 00 A0 
2dcb6     00 A0 00 A0 
2dcba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dcbe     00 A0 00 A0 
2dcc2     00 A0 00 A0 
2dcc6     00 A0 00 A0 
2dcca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dcce     00 A0 00 A0 
2dcd2     00 A0 00 A0 
2dcd6     00 A0 00 A0 
2dcda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dcde     00 A0 00 A0 
2dce2     00 A0 00 A0 
2dce6     00 A0 00 A0 
2dcea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dcee     00 A0 00 A0 
2dcf2     00 A0 00 A0 
2dcf6     00 A0 00 A0 
2dcfa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dcfe     00 A0 00 A0 
2dd02     00 A0 00 A0 
2dd06     00 A0 00 A0 
2dd0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dd0e     00 A0 00 A0 
2dd12     00 A0 00 A0 
2dd16     00 A0 00 A0 
2dd1a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dd1e     00 A0 00 A0 
2dd22     00 A0 00 A0 
2dd26     00 A0 00 A0 
2dd2a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dd2e     00 A0 00 A0 
2dd32     00 A0 00 A0 
2dd36     00 A0 00 A0 
2dd3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dd3e     00 A0 00 A0 
2dd42     00 A0 00 A0 
2dd46     00 A0 00 A0 
2dd4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dd4e     00 A0 00 A0 
2dd52     00 A0 00 A0 
2dd56     00 A0 00 A0 
2dd5a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
2dd5e     00 A1 00 A1 
2dd62     00 A1 00 A1 
2dd66     00 A1 00 A1 
2dd6a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2dd6e     00 A1 00 A1 
2dd72     00 A1 00 A1 
2dd76     00 A1 00 A1 
2dd7a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2dd7e     00 A1 00 A1 
2dd82     00 A1 00 A1 
2dd86     00 A1 00 A1 
2dd8a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2dd8e     00 A1 00 A1 
2dd92     00 A1 00 A1 
2dd96     00 A1 00 A1 
2dd9a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2dd9e     00 A1 00 A1 
2dda2     00 A1 00 A1 
2dda6     00 A1 00 A1 
2ddaa     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2ddae     00 A1 00 A1 
2ddb2     00 A1 00 A1 
2ddb6     00 6E 00 6E 
2ddba     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2ddbe     00 6E 00 6E 
2ddc2     00 6E 00 6E 
2ddc6     00 6E 00 6E 
2ddca     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2ddce     00 6E 00 6E 
2ddd2     00 6E 00 6E 
2ddd6     00 6E 00 6E 
2ddda     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2ddde     00 6E 00 6E 
2dde2     00 6E 00 6E 
2dde6     00 6E 00 6E 
2ddea     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2ddee     00 6E 00 6D 
2ddf2     00 6D 00 6D 
2ddf6     00 6D 00 6D 
2ddfa     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ddfe     00 6D 00 6D 
2de02     00 6D 00 6D 
2de06     00 6D 00 6D 
2de0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de0e     00 6D 00 6D 
2de12     00 6D 00 6D 
2de16     00 6D 00 6D 
2de1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de1e     00 6D 00 6D 
2de22     00 6D 00 6D 
2de26     00 6D 00 6D 
2de2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de2e     00 6D 00 6D 
2de32     00 6D 00 6D 
2de36     00 6D 00 6D 
2de3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de3e     00 6D 00 6D 
2de42     00 6D 00 6D 
2de46     00 6D 00 6D 
2de4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de4e     00 6D 00 6D 
2de52     00 6D 00 6D 
2de56     00 6D 00 6D 
2de5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de5e     00 6D 00 6D 
2de62     00 6D 00 6D 
2de66     00 6D 00 6D 
2de6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de6e     00 6D 00 6D 
2de72     00 6D 00 6D 
2de76     00 6D 00 6D 
2de7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de7e     00 6D 00 6D 
2de82     00 6D 00 6D 
2de86     00 6D 00 6D 
2de8a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de8e     00 6D 00 6D 
2de92     00 6D 00 6D 
2de96     00 6D 00 6D 
2de9a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2de9e     00 6D 00 6D 
2dea2     00 6C 00 6C 
2dea6     00 6C 00 6C 
2deaa     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2deae     00 6C 00 6C 
2deb2     00 6C 00 6C 
2deb6     00 6C 00 6C 
2deba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2debe     00 6C 00 6C 
2dec2     00 6C 00 6C 
2dec6     00 9D 00 9F 
2deca     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
2dece     00 9F 00 9F 
2ded2     00 9F 00 9F 
2ded6     00 A0 00 A0 
2deda     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2dede     00 A0 00 A0 
2dee2     00 A0 00 A0 
2dee6     00 A0 00 A0 
2deea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2deee     00 A0 00 A0 
2def2     00 A0 00 A0 
2def6     00 A0 00 A0 
2defa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2defe     00 A0 00 A0 
2df02     00 A0 00 A0 
2df06     00 A0 00 A0 
2df0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2df0e     00 A0 00 A0 
2df12     00 A0 00 A0 
2df16     00 A0 00 A0 
2df1a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2df1e     00 A0 00 A0 
2df22     00 A0 00 A0 
2df26     00 A0 00 A0 
2df2a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2df2e     00 A0 00 A0 
2df32     00 A0 00 A0 
2df36     00 A0 00 A0 
2df3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2df3e     00 A0 00 A0 
2df42     00 A0 00 A0 
2df46     00 A0 00 A0 
2df4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2df4e                 | 
2df4e     00 00       |              	org
2df50 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2df54 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2df58 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2df5c 003             | 
2df5c 003 00 30 04 F6 |                 mov     psramaddr,#0
2df60 004             | 
2df60 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2df64 005 20 00 00 FF 
2df68 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2df6c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2df70 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2df74 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2df78 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2df7c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2df80 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2df84 00d             | 
2df84 00d 20 00 00 FF 
2df88 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2df8c 00f E0 03 00 FF 
2df90 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2df94 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2df98 012             | 
2df98 012             |                 
2df98 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2df9c 013             |     
2df9c 013 01 2C 60 FD |                 cogid 	t11				' get id
2dfa0 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2dfa4 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2dfa8 016             | 
2dfa8 016 00 00 00 00 | t11 		long 	0
2dfac 017 00 FF 07 00 | mailbox 	long 	$7FF00
2dfb0 018 00 00 00 00 | psramaddr 	long 	0
2dfb4 019 00 00 00 00 | pslockval	long 	0
2dfb8 01a 00 00 00 00 | cmd             long    0
2dfbc 01b 00 00 00 00 | buf1            long    0
2dfc0 01c 00 40 00 00 | buf2            long    16384
2dfc4 01d C8 DF 02 00 | 	long	@@@_dat_ + 12624
2dfc8 01e 50 32 20 52 
2dfcc 01f 65 74 72 6F 
2dfd0 020 6D 61 63 68 
2dfd4 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2dfd8 022 42 41 53 49 
2dfdc 023 43 20 76 65 
2dfe0 024 72 73 69 6F 
2dfe4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2dfe8 026 32 35 00 00 | 	byte	$32, $35, $00, $00
2dfec 027             | 	alignl
2dfec 027             | _hg010b_spin2_dat_
2dfec 027             | 
2dfec 027 00 00 00 00 
2dff0 028 00 00 00 00 
2dff4 029 00 00 00 00 
2dff8 02a 00 00 00 00 
2dffc 02b 00 00 00    | vga_font       file "vgafont.def"
2dfff 02b 7E 81 A5 81 
2e003 02c 81 BD 99 81 
2e007 02d 81 7E 00 00 
2e00b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2e00f 02f 7E FF DB FF 
2e013 030 FF C3 E7 FF 
2e017 031 FF 7E 00 00 
2e01b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2e01f 033 00 36 7F 7F 
2e023 034 7F 7F 3E 1C 
2e027 035 08 00 00 00 
2e02b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2e02f 037 00 08 1C 3E 
2e033 038 7F 3E 1C 08 
2e037 039 00 00 00 00 
2e03b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2e03f 03b 18 3C 3C E7 
2e043 03c E7 E7 18 18 
2e047 03d 3C 00 00 00 
2e04b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2e04f 03f 18 3C 7E FF 
2e053 040 FF 7E 18 18 
2e057 041 3C 00 00 00 
2e05b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2e05f 043 00 00 00 18 
2e063 044 3C 3C 18 00 
2e067 045 00 00 00 00 
2e06b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2e06f 047 FF FF FF E7 
2e073 048 C3 C3 E7 FF 
2e077 049 FF FF FF FF 
2e07b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2e07f 04b 00 00 3C 66 
2e083 04c 42 42 66 3C 
2e087 04d 00 00 00 00 
2e08b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2e08f 04f FF FF C3 99 
2e093 050 BD BD 99 C3 
2e097 051 FF FF FF FF 
2e09b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2e09f 053 78 70 58 4C 
2e0a3 054 1E 33 33 33 
2e0a7 055 33 1E 00 00 
2e0ab 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2e0af 057 3C 66 66 66 
2e0b3 058 66 3C 18 7E 
2e0b7 059 18 18 00 00 
2e0bb 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2e0bf 05b FC CC FC 0C 
2e0c3 05c 0C 0C 0C 0E 
2e0c7 05d 0F 07 00 00 
2e0cb 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2e0cf 05f FE C6 FE C6 
2e0d3 060 C6 C6 C6 E6 
2e0d7 061 E7 67 03 00 
2e0db 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2e0df 063 18 18 DB 3C 
2e0e3 064 E7 3C DB 18 
2e0e7 065 18 00 00 00 
2e0eb 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2e0ef 067 03 07 0F 1F 
2e0f3 068 7F 1F 0F 07 
2e0f7 069 03 01 00 00 
2e0fb 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2e0ff 06b 60 70 78 7C 
2e103 06c 7F 7C 78 70 
2e107 06d 60 40 00 00 
2e10b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2e10f 06f 18 3C 7E 18 
2e113 070 18 18 7E 3C 
2e117 071 18 00 00 00 
2e11b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2e11f 073 66 66 66 66 
2e123 074 66 66 66    | 	byte	$66[7]
2e126 075 00 66 66 00 
2e12a 076 00 00 00 00 
2e12e 077 00 FE DB DB 
2e132 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2e136 079 D8 D8 D8 00 
2e13a 07a 00 00 00 3E 
2e13e 07b 63 06 1C 36 
2e142 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2e146 07d 30 63 3E 00 
2e14a 07e 00 00 00 00 
2e14e 07f 00 00 00 00 
2e152 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2e156 081 7F 7F 7F 00 
2e15a 082 00 00 00 00 
2e15e 083 00 18 3C 7E 
2e162 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2e166 085 3C 18 7E 00 
2e16a 086 00 00 00 00 
2e16e 087 00 18 3C 7E 
2e172 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2e176 089 18 18 18 00 
2e17a 08a 00 00 00 00 
2e17e 08b 00 18 18 18 
2e182 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2e186 08d 7E 3C 18 00 
2e18a 08e 00 00 00 00 
2e18e 08f 00 00 00 18 
2e192 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2e196 091 00 00 00 00 
2e19a 092 00 00 00 00 
2e19e 093 00 00 00    | 	byte	$00[11]
2e1a1 094 0C 06 7F 06 
2e1a5 095 0C 00 00 00 
2e1a9 096 00 00 00 00 
2e1ad 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e1b1 098 00 03 03 03 
2e1b5 099 7F 00 00 00 
2e1b9 09a 00 00 00 00 
2e1bd 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e1c1 09c 14 36 7F 36 
2e1c5 09d 14 00 00 00 
2e1c9 09e 00 00 00 00 
2e1cd 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2e1d1 0a0 1C 1C 3E 3E 
2e1d5 0a1 7F 7F 00 00 
2e1d9 0a2 00 00 00 00 
2e1dd 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2e1e1 0a4 7F 3E 3E 1C 
2e1e5 0a5 1C 08 00 00 
2e1e9 0a6 00 00 00 00 
2e1ed 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e1f1 0a8 00 00 00 00 
2e1f5 0a9 00 00 00 00 
2e1f9 0aa 00 00 00 00 
2e1fd 0ab 00 00       | 	byte	$00[14]
2e1ff 0ab 18 3C 3C 3C 
2e203 0ac 18 18 18 00 
2e207 0ad 18 18 00 00 
2e20b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2e20f 0af 66 24 00 00 
2e213 0b0 00 00 00 00 
2e217 0b1 00 00 00 00 
2e21b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e21f 0b3 00 36 36 7F 
2e223 0b4 36 36 36 7F 
2e227 0b5 36 36 00 00 
2e22b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2e22f 0b7 3E 63 43 03 
2e233 0b8 3E 60 60 61 
2e237 0b9 63 3E 18 18 
2e23b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2e23f 0bb 00 00 43 63 
2e243 0bc 30 18 0C 06 
2e247 0bd 63 61 00 00 
2e24b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2e24f 0bf 1C 36 36 1C 
2e253 0c0 6E 3B 33 33 
2e257 0c1 33 6E 00 00 
2e25b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2e25f 0c3 0C 0C 0C 06 
2e263 0c4 00 00 00 00 
2e267 0c5 00 00 00 00 
2e26b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e26f 0c7 30 18 0C 0C 
2e273 0c8 0C 0C 0C 0C 
2e277 0c9 18 30 00 00 
2e27b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2e27f 0cb 0C 18 30 30 
2e283 0cc 30 30 30 30 
2e287 0cd 18 0C 00 00 
2e28b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2e28f 0cf 00 00 00 66 
2e293 0d0 3C FF 3C 66 
2e297 0d1 00 00 00 00 
2e29b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2e29f 0d3 00 00 00 18 
2e2a3 0d4 18 7E 18 18 
2e2a7 0d5 00 00 00 00 
2e2ab 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2e2af 0d7 00 00 00 00 
2e2b3 0d8 00 00 00 00 | 	byte	$00[8]
2e2b7 0d9 18 18 18 0C 
2e2bb 0da 00 00 00 00 
2e2bf 0db 00 00 00 00 
2e2c3 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2e2c7 0dd 00 00 00 00 
2e2cb 0de 00 00 00 00 
2e2cf 0df 00 00 00 00 
2e2d3 0e0 00 00 00 00 | 	byte	$00[16]
2e2d7 0e1 18 18 00 00 
2e2db 0e2 00 00 00 00 
2e2df 0e3 00 00 40 60 
2e2e3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2e2e7 0e5 03 01 00 00 
2e2eb 0e6 00 00 00 00 
2e2ef 0e7 1C 36 63 63 
2e2f3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2e2f7 0e9 36 1C 00 00 
2e2fb 0ea 00 00 00 00 
2e2ff 0eb 18 1C 1E 18 
2e303 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2e307 0ed 18 7E 00 00 
2e30b 0ee 00 00 00 00 
2e30f 0ef 3E 63 60 30 
2e313 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2e317 0f1 63 7F 00 00 
2e31b 0f2 00 00 00 00 
2e31f 0f3 3E 63 60 60 
2e323 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2e327 0f5 63 3E 00 00 
2e32b 0f6 00 00 00 00 
2e32f 0f7 30 38 3C 36 
2e333 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2e337 0f9 30 78 00 00 
2e33b 0fa 00 00 00 00 
2e33f 0fb 7F 03 03 03 
2e343 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2e347 0fd 63 3E 00 00 
2e34b 0fe 00 00 00 00 
2e34f 0ff 1C 06 03 03 
2e353 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2e357 101 63 3E 00 00 
2e35b 102 00 00 00 00 
2e35f 103 7F 63 60 60 
2e363 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2e367 105 0C 0C 00 00 
2e36b 106 00 00 00 00 
2e36f 107 3E 63 63 63 
2e373 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2e377 109 63 3E 00 00 
2e37b 10a 00 00 00 00 
2e37f 10b 3E 63 63 63 
2e383 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2e387 10d 30 1E 00 00 
2e38b 10e 00 00 00 00 
2e38f 10f 00 00 00 18 
2e393 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2e397 111 18 18 00 00 
2e39b 112 00 00 00 00 
2e39f 113 00 00 00 18 
2e3a3 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2e3a7 115 18 18 0C 00 
2e3ab 116 00 00 00 00 
2e3af 117 00 60 30 18 
2e3b3 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2e3b7 119 30 60 00 00 
2e3bb 11a 00 00 00 00 
2e3bf 11b 00 00 00 7E 
2e3c3 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2e3c7 11d 00 00 00 00 
2e3cb 11e 00 00 00 00 
2e3cf 11f 00          | 	byte	$00[9]
2e3d0 120 06 0C 18 30 
2e3d4 121 60 30 18 0C 
2e3d8 122 06 00 00 00 
2e3dc 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2e3e0 124 63 63 30 18 
2e3e4 125 18 18 00 18 
2e3e8 126 18 00 00 00 
2e3ec 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2e3f0 128 3E 63 63 7B 
2e3f4 129 7B 7B 3B 03 
2e3f8 12a 3E 00 00 00 
2e3fc 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2e400 12c 1C 36 63 63 
2e404 12d 7F 63 63 63 
2e408 12e 63 00 00 00 
2e40c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2e410 130 66 66 66 3E 
2e414 131 66 66 66 66 
2e418 132 3F 00 00 00 
2e41c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2e420 134 66 43 03 03 
2e424 135 03 03 43 66 
2e428 136 3C 00 00 00 
2e42c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2e430 138 36 66 66 66 
2e434 139 66 66 66 36 
2e438 13a 1F 00 00 00 
2e43c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2e440 13c 66 46 16 1E 
2e444 13d 16 06 46 66 
2e448 13e 7F 00 00 00 
2e44c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2e450 140 66 46 16 1E 
2e454 141 16 06 06 06 
2e458 142 0F 00 00 00 
2e45c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2e460 144 66 43 03 03 
2e464 145 7B 63 63 66 
2e468 146 5C 00 00 00 
2e46c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2e470 148 63 63 63 7F 
2e474 149 63 63 63 63 
2e478 14a 63 00 00 00 
2e47c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2e480 14c 18 18 18 18 
2e484 14d 18 18 18 18 | 	byte	$18[8]
2e488 14e 3C 00 00 00 
2e48c 14f 00 00 00 78 
2e490 150 30 30 30 30 
2e494 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2e498 152 1E 00 00 00 
2e49c 153 00 00 00 67 
2e4a0 154 66 66 36 1E 
2e4a4 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2e4a8 156 67 00 00 00 
2e4ac 157 00 00 00 0F 
2e4b0 158 06 06 06 06 
2e4b4 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2e4b8 15a 7F 00 00 00 
2e4bc 15b 00 00 00 63 
2e4c0 15c 77 7F 7F 6B 
2e4c4 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2e4c8 15e 63 00 00 00 
2e4cc 15f 00 00 00 63 
2e4d0 160 67 6F 7F 7B 
2e4d4 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2e4d8 162 63 00 00 00 
2e4dc 163 00 00 00 3E 
2e4e0 164 63 63 63 63 
2e4e4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2e4e8 166 3E 00 00 00 
2e4ec 167 00 00 00 3F 
2e4f0 168 66 66 66 3E 
2e4f4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2e4f8 16a 0F 00 00 00 
2e4fc 16b 00 00 00 3E 
2e500 16c 63 63 63 63 
2e504 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2e508 16e 3E 30 70 00 
2e50c 16f 00 00 00 3F 
2e510 170 66 66 66 3E 
2e514 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2e518 172 67 00 00 00 
2e51c 173 00 00 00 3E 
2e520 174 63 63 06 1C 
2e524 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2e528 176 3E 00 00 00 
2e52c 177 00 00 00 7E 
2e530 178 7E 5A 18 18 
2e534 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2e538 17a 3C 00 00 00 
2e53c 17b 00 00 00 63 
2e540 17c 63 63 63 63 
2e544 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2e548 17e 3E 00 00 00 
2e54c 17f 00 00 00 63 
2e550 180 63 63 63 63 
2e554 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2e558 182 08 00 00 00 
2e55c 183 00 00 00 63 
2e560 184 63 63 63 6B 
2e564 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2e568 186 36 00 00 00 
2e56c 187 00 00 00 63 
2e570 188 63 36 3E 1C 
2e574 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2e578 18a 63 00 00 00 
2e57c 18b 00 00 00 66 
2e580 18c 66 66 66 3C 
2e584 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2e588 18e 3C 00 00 00 
2e58c 18f 00 00 00 7F 
2e590 190 63 61 30 18 
2e594 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2e598 192 7F 00 00 00 
2e59c 193 00 00 00 3C 
2e5a0 194 0C 0C 0C 0C 
2e5a4 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2e5a8 196 3C 00 00 00 
2e5ac 197 00 00 00 00 
2e5b0 198 01 03 07 0E 
2e5b4 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2e5b8 19a 40 00 00 00 
2e5bc 19b 00 00 00 3C 
2e5c0 19c 30 30 30 30 
2e5c4 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2e5c8 19e 3C 00 00 00 
2e5cc 19f 1C 36 00 00 
2e5d0 1a0 00 00 00 00 
2e5d4 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e5d8 1a2 00 00 00 00 
2e5dc 1a3 00 00 00 00 
2e5e0 1a4 00 00 00 00 
2e5e4 1a5 00 00 00 00 
2e5e8 1a6 00          | 	byte	$00[17]
2e5e9 1a6 FF 00 00 0C 
2e5ed 1a7 18 00 00 00 
2e5f1 1a8 00 00 00 00 
2e5f5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e5f9 1aa 00 00 00 00 
2e5fd 1ab 00 00 00 00 
2e601 1ac 00          | 	byte	$00[9]
2e602 1ac 1E 30 3E 33 
2e606 1ad 33 33 6E 00 
2e60a 1ae 00 00 00 00 
2e60e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2e612 1b0 1E 36 66 66 
2e616 1b1 66 66 3E 00 
2e61a 1b2 00 00 00 00 
2e61e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e622 1b4 3E 63 03 03 
2e626 1b5 03 63 3E 00 
2e62a 1b6 00 00 00 00 
2e62e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2e632 1b8 3C 36 33 33 
2e636 1b9 33 33 6E 00 
2e63a 1ba 00 00 00 00 
2e63e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e642 1bc 3E 63 7F 03 
2e646 1bd 03 63 3E 00 
2e64a 1be 00 00 00 00 
2e64e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2e652 1c0 0C 1E 0C 0C 
2e656 1c1 0C 0C 1E 00 
2e65a 1c2 00 00 00 00 
2e65e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e662 1c4 6E 33 33 33 
2e666 1c5 33 33 3E 30 
2e66a 1c6 33 1E 00 00 
2e66e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2e672 1c8 36 6E 66 66 
2e676 1c9 66 66 67 00 
2e67a 1ca 00 00 00 00 
2e67e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2e682 1cc 1C 18 18 18 
2e686 1cd 18 18 3C 00 
2e68a 1ce 00 00 00 00 
2e68e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2e692 1d0 70 60 60 60 
2e696 1d1 60 60 60 66 
2e69a 1d2 66 3C 00 00 
2e69e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2e6a2 1d4 66 36 1E 1E 
2e6a6 1d5 36 66 67 00 
2e6aa 1d6 00 00 00 00 
2e6ae 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2e6b2 1d8 18 18 18 18 
2e6b6 1d9 18 18       | 	byte	$18[6]
2e6b8 1da 3C 00 00 00 
2e6bc 1db 00 00 00 00 
2e6c0 1dc 00 00 37 7F 
2e6c4 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2e6c8 1de 63 00 00 00 
2e6cc 1df 00 00 00 00 
2e6d0 1e0 00 00 3B 66 
2e6d4 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2e6d8 1e2 66 00 00 00 
2e6dc 1e3 00 00 00 00 
2e6e0 1e4 00 00 3E 63 
2e6e4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2e6e8 1e6 3E 00 00 00 
2e6ec 1e7 00 00 00 00 
2e6f0 1e8 00 00 3B 66 
2e6f4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2e6f8 1ea 3E 06 06 0F 
2e6fc 1eb 00 00 00 00 
2e700 1ec 00 00 6E 33 
2e704 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2e708 1ee 3E 30 30 78 
2e70c 1ef 00 00 00 00 
2e710 1f0 00 00 3B 6E 
2e714 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2e718 1f2 0F 00 00 00 
2e71c 1f3 00 00 00 00 
2e720 1f4 00 00 3E 63 
2e724 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2e728 1f6 3E 00 00 00 
2e72c 1f7 00 00 00 08 
2e730 1f8 0C 0C 3F 0C 
2e734 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2e738 1fa 38 00 00 00 
2e73c 1fb 00 00 00 00 
2e740 1fc 00 00 33 33 
2e744 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2e748 1fe 6E 00 00 00 
2e74c 1ff 00 00 00 00 
2e750 200 00 00 63 63 
2e754 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2e758 202 1C 00 00 00 
2e75c 203 00 00 00 00 
2e760 204 00 00 63 63 
2e764 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2e768 206 36 00 00 00 
2e76c 207 00 00 00 00 
2e770 208 00 00 63 36 
2e774 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2e778 20a 63 00 00 00 
2e77c 20b 00 00 00 00 
2e780 20c 00 00 63 63 
2e784 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2e788 20e 7E 60 30 1F 
2e78c 20f 00 00 00 00 
2e790 210 00 00 7F 33 
2e794 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2e798 212 7F 00 00 00 
2e79c 213 00 00 00 70 
2e7a0 214 18 18 18 0E 
2e7a4 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2e7a8 216 70 00 00 00 
2e7ac 217 00 00 00 18 
2e7b0 218 18 18 18 18 
2e7b4 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2e7b8 21a 18 00 00 00 
2e7bc 21b 00 00 00 0E 
2e7c0 21c 18 18 18 70 
2e7c4 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2e7c8 21e 0E 00 00 00 
2e7cc 21f 6E 3B 00 00 
2e7d0 220 00 00 00 00 
2e7d4 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e7d8 222 00 00 00 00 
2e7dc 223 00 00 00 00 
2e7e0 224 00 00       | 	byte	$00[10]
2e7e2 224 08 1C 36 63 
2e7e6 225 63 63 7F 00 
2e7ea 226 00 00 00 00 
2e7ee 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2e7f2 228 03 03 03 03 
2e7f6 229 43 66 3C 18 
2e7fa 22a 30 1E 00 00 
2e7fe 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2e802 22c 33 33 33 33 
2e806 22d 33 33       | 	byte	$33[6]
2e808 22e 6E 00 00 00 
2e80c 22f 00 00 60 30 
2e810 230 18 00 3E 63 
2e814 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2e818 232 3E 00 00 00 
2e81c 233 00 00 08 1C 
2e820 234 36 00 1E 30 
2e824 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2e828 236 6E 00 00 00 
2e82c 237 00 00 00 00 
2e830 238 33 00 1E 30 
2e834 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2e838 23a 6E 00 00 00 
2e83c 23b 00 00 1C 36 
2e840 23c 1C 00 33 33 
2e844 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2e848 23e 6E 00 00 00 
2e84c 23f 00 00 60 30 
2e850 240 18 00 3E 63 
2e854 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2e858 242 3E 00 00 00 
2e85c 243 00 00 00 00 
2e860 244 00 00 3E 63 
2e864 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2e868 246 3E 18 30 1E 
2e86c 247 00 00 00 1C 
2e870 248 58 78 38 18 
2e874 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2e878 24a 3C 00 00 00 
2e87c 24b 00 00 00 00 
2e880 24c 63 00 3E 63 
2e884 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2e888 24e 3E 00 00 00 
2e88c 24f 66 33 00 3E 
2e890 250 63 63 63 63 
2e894 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2e898 252 3E 00 00 00 
2e89c 253 00 00 CC 66 
2e8a0 254 33 00 3E 63 
2e8a4 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2e8a8 256 3E 00 00 00 
2e8ac 257 00 00 18 3C 
2e8b0 258 66 00 1C 18 
2e8b4 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2e8b8 25a 3C 00 00 00 
2e8bc 25b 30 18 00 7F 
2e8c0 25c 63 61 30 18 
2e8c4 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2e8c8 25e 7F 00 00 00 
2e8cc 25f 00 63 00 08 
2e8d0 260 1C 36 63 63 
2e8d4 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2e8d8 262 63 00 00 00 
2e8dc 263 30 18 00 3C 
2e8e0 264 66 43 03 03 
2e8e4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2e8e8 266 3C 00 00 00 
2e8ec 267 30 18 00 7F 
2e8f0 268 66 46 16 1E 
2e8f4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2e8f8 26a 7F 00 00 00 
2e8fc 26b 0C 06 00 0F 
2e900 26c 06 06 06 06 
2e904 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2e908 26e 7F 00 00 00 
2e90c 26f 30 18 00 1C 
2e910 270 18 18 18 18 
2e914 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2e918 272 3C 00 00 00 
2e91c 273 00 00 08 1C 
2e920 274 36 00 3E 63 
2e924 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2e928 276 3E 00 00 00 
2e92c 277 00 00 00 00 
2e930 278 63 00 3E 63 
2e934 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2e938 27a 3E 00 00 00 
2e93c 27b 00 00 00 6F 
2e940 27c 46 26 06 06 
2e944 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2e948 27e 7F 00 00 00 
2e94c 27f 00 00 00 6E 
2e950 280 4C 2C 0C 0C 
2e954 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2e958 282 1E 00 00 00 
2e95c 283 30 18 00 3E 
2e960 284 63 63 06 1C 
2e964 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2e968 286 3E 00 00 00 
2e96c 287 00 00 60 30 
2e970 288 18 00 3E 63 
2e974 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2e978 28a 3E 00 00 00 
2e97c 28b 00 63 00 3E 
2e980 28c 63 63 63 63 
2e984 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2e988 28e 3E 00 00 00 
2e98c 28f 00 63 00 63 
2e990 290 63 63 63 63 
2e994 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2e998 292 3E 00 00 00 
2e99c 293 6C 38 00 7E 
2e9a0 294 7E 5A 18 18 
2e9a4 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2e9a8 296 3C 00 00 00 
2e9ac 297 00 00 60 48 
2e9b0 298 2C 0C 3F 0C 
2e9b4 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2e9b8 29a 38 00 00 00 
2e9bc 29b 00 00 00 0F 
2e9c0 29c 26 36 1E 0E 
2e9c4 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2e9c8 29e 7F 00 00 00 
2e9cc 29f 00 00 00 00 
2e9d0 2a0 00 63 36 1C 
2e9d4 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2e9d8 2a2 00 00 00 00 
2e9dc 2a3 00 00       | 	byte	$00[6]
2e9de 2a3 36 1C 08 00 
2e9e2 2a4 3E 63 03 03 
2e9e6 2a5 03 63 3E 00 
2e9ea 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2e9ee 2a7 30 18 0C 00 
2e9f2 2a8 1E 30 3E 33 
2e9f6 2a9 33 33 6E 00 
2e9fa 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2e9fe 2ab 60 30 18 00 
2ea02 2ac 1C 18 18 18 
2ea06 2ad 18 18 3C 00 
2ea0a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2ea0e 2af 60 30 18 00 
2ea12 2b0 3E 63 63 63 
2ea16 2b1 63 63 3E 00 
2ea1a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2ea1e 2b3 30 18 0C 00 
2ea22 2b4 33 33 33 33 
2ea26 2b5 33 33 6E 00 
2ea2a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2ea2e 2b7 00 08 1C 36 
2ea32 2b8 63 63 7F 63 
2ea36 2b9 63 63 63 18 
2ea3a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2ea3e 2bb 00 00 00 00 
2ea42 2bc 1E 30 3E 33 
2ea46 2bd 33 33 6E 18 
2ea4a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2ea4e 2bf 00 7F 63 61 
2ea52 2c0 30 18 0C 06 
2ea56 2c1 43 63 7F 00 
2ea5a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2ea5e 2c3 36 1C 08 00 
2ea62 2c4 7F 33 18 0C 
2ea66 2c5 06 63 7F 00 
2ea6a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2ea6e 2c7 00 7F 66 46 
2ea72 2c8 16 1E 16 06 
2ea76 2c9 46 66 7F 18 
2ea7a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2ea7e 2cb 00 00 00 00 
2ea82 2cc 3E 63 7F 03 
2ea86 2cd 03 63 3E 18 
2ea8a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2ea8e 2cf 00 3C 66 03 
2ea92 2d0 1F 03 0F 03 
2ea96 2d1 03 66 3C 00 
2ea9a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2ea9e 2d3 60 30 18 00 
2eaa2 2d4 7F 33 18 0C 
2eaa6 2d5 06 63 7F 00 
2eaaa 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2eaae 2d7 00 3C 66 43 
2eab2 2d8 03 03 03 03 
2eab6 2d9 43 66 3C 00 
2eaba 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2eabe 2db 00 00 00 00 
2eac2 2dc 3E 63 06 1C 
2eac6 2dd 30 63 3E 18 
2eaca 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2eace 2df 00 00 00 00 
2ead2 2e0 00 00       | 	byte	$00[6]
2ead4 2e1 6C 36 1B 36 
2ead8 2e2 6C 00 00 00 
2eadc 2e3 00 00 00 00 
2eae0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2eae4 2e5 1B 36 6C 36 
2eae8 2e6 1B 00 00 00 
2eaec 2e7 88 22 88 22 
2eaf0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2eaf4 2e9 88 22 88 22 
2eaf8 2ea 88 22 88 22 
2eafc 2eb AA 55 AA 55 
2eb00 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2eb04 2ed AA 55 AA 55 
2eb08 2ee AA 55 AA 55 
2eb0c 2ef BB EE BB EE 
2eb10 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2eb14 2f1 BB EE BB EE 
2eb18 2f2 BB EE BB EE 
2eb1c 2f3 18 18 18 18 
2eb20 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2eb24 2f5 18 18 18 18 
2eb28 2f6 18 18 18 18 
2eb2c 2f7 18 18 18 18 
2eb30 2f8 18 18 18    | 	byte	$18[15]
2eb33 2f8 1F 18 18 18 
2eb37 2f9 18 18 18 18 
2eb3b 2fa 18 30 18 00 
2eb3f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2eb43 2fc 63 7F 63 63 
2eb47 2fd 63 63 00 00 
2eb4b 2fe 00 1C 36 00 
2eb4f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2eb53 300 63 7F 63 63 
2eb57 301 63 63 00 00 
2eb5b 302 00 36 1C 00 
2eb5f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2eb63 304 1E 16 06 46 
2eb67 305 66 7F 00 00 
2eb6b 306 00 00 00 00 
2eb6f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2eb73 308 1C 30 60 63 
2eb77 309 63 3E 18 30 
2eb7b 30a 1E 6C 6C 6C 
2eb7f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2eb83 30c 6F 6C 6C 6C 
2eb87 30d 6C 6C 6C 6C 
2eb8b 30e 6C 6C 6C 6C 
2eb8f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2eb93 310 6C 6C 6C 6C 
2eb97 311 6C 6C 6C 6C 
2eb9b 312 6C          | 	byte	$6c[9]
2eb9c 313 00 00 00 00 
2eba0 314 00          | 	byte	$00[5]
2eba1 314 7F 60 6F 6C 
2eba5 315 6C 6C 6C 6C 
2eba9 316 6C 6C 6C 6C 
2ebad 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ebb1 318 6F 60 7F 00 
2ebb5 319 00 00 00 00 
2ebb9 31a 00 00 00 18 
2ebbd 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2ebc1 31c 61 30 18 0C 
2ebc5 31d 06 43 63 7F 
2ebc9 31e 00 00 00 00 
2ebcd 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2ebd1 320 00 7F 33 18 
2ebd5 321 0C 06 63 7F 
2ebd9 322 00 00 00 00 
2ebdd 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2ebe1 324 00 00 1F 18 
2ebe5 325 18 18 18 18 
2ebe9 326 18 18 18 18 
2ebed 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2ebf1 328 18 18 F8 00 
2ebf5 329 00 00 00 00 
2ebf9 32a 00 00 00 18 
2ebfd 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2ec01 32c 18 18 FF 00 
2ec05 32d 00 00 00 00 
2ec09 32e 00 00 00 00 
2ec0d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ec11 330 00 00 FF 18 
2ec15 331 18 18 18 18 
2ec19 332 18 18 18 18 
2ec1d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2ec21 334 18 18 F8 18 
2ec25 335 18 18 18 18 
2ec29 336 18 18 18 00 
2ec2d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2ec31 338 00 00 FF 00 
2ec35 339 00 00 00 00 
2ec39 33a 00 00 00 18 
2ec3d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2ec41 33c 18 18 FF 18 
2ec45 33d 18 18 18 18 
2ec49 33e 18 18 18 63 
2ec4d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2ec51 340 36 63 63 7F 
2ec55 341 63 63 63 63 
2ec59 342 00 00 00 00 
2ec5d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2ec61 344 00 1E 30 3E 
2ec65 345 33 33 33 6E 
2ec69 346 00 00 00 6C 
2ec6d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2ec71 348 EC 0C FC 00 
2ec75 349 00 00 00 00 
2ec79 34a 00 00 00 00 
2ec7d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ec81 34c FC 0C EC 6C 
2ec85 34d 6C 6C 6C 6C 
2ec89 34e 6C 6C 6C 6C 
2ec8d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ec91 350 EF 00 FF 00 
2ec95 351 00 00 00 00 
2ec99 352 00 00 00 00 
2ec9d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2eca1 354 FF 00 EF 6C 
2eca5 355 6C 6C 6C 6C 
2eca9 356 6C 6C 6C 6C 
2ecad 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ecb1 358 EC 0C EC 6C 
2ecb5 359 6C 6C 6C 6C 
2ecb9 35a 6C 6C 6C 00 
2ecbd 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2ecc1 35c FF 00 FF 00 
2ecc5 35d 00 00 00 00 
2ecc9 35e 00 00 00 6C 
2eccd 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2ecd1 360 EF 00 EF 6C 
2ecd5 361 6C 6C 6C 6C 
2ecd9 362 6C 6C 6C 00 
2ecdd 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2ece1 364 63 3E 63 63 
2ece5 365 63 63 3E 63 
2ece9 366 00 00 00 00 
2eced 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2ecf1 368 30 3C 36 33 
2ecf5 369 33 33 33 6E 
2ecf9 36a 00 00 00 00 
2ecfd 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2ed01 36c 66 66 6F 66 
2ed05 36d 66 66 36 1F 
2ed09 36e 00 00 00 36 
2ed0d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2ed11 370 66 66 66 66 
2ed15 371 66 66       | 	byte	$66[6]
2ed17 371 36 1F 00 00 
2ed1b 372 00 00 63 00 
2ed1f 373 7F 66 46 16 
2ed23 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2ed27 375 66 7F 00 00 
2ed2b 376 00 6C 38 00 
2ed2f 377 38 30 30 3C 
2ed33 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2ed37 379 33 6E 00 00 
2ed3b 37a 00 36 1C 00 
2ed3f 37b 63 67 6F 7F 
2ed43 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2ed47 37d 63 63 00 00 
2ed4b 37e 00 30 18 00 
2ed4f 37f 3C 18 18 18 
2ed53 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2ed57 381 18 3C 00 00 
2ed5b 382 00 3C 66 00 
2ed5f 383 3C 18 18 18 
2ed63 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2ed67 385 18 3C 00 00 
2ed6b 386 00 00 00 36 
2ed6f 387 1C 08 00 3E 
2ed73 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2ed77 389 63 3E 00 00 
2ed7b 38a 00 18 18 18 
2ed7f 38b 18 18 18 18 
2ed83 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2ed87 38d 00 00 00 00 
2ed8b 38e 00 00 00 00 
2ed8f 38f 00 00 00 00 | 	byte	$00[12]
2ed93 390 F8 18 18 18 
2ed97 391 18 18 18 18 
2ed9b 392 18 FF FF FF 
2ed9f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2eda3 394 FF FF FF FF 
2eda7 395 FF FF FF FF 
2edab 396 FF          | 	byte	$ff[9]
2edac 397 00 00 00 00 
2edb0 398 00 00 00    | 	byte	$00[7]
2edb3 398 FF FF FF FF 
2edb7 399 FF FF FF FF 
2edbb 39a FF          | 	byte	$ff[9]
2edbc 39b 00 00 00 7E 
2edc0 39c 7E 5A 18 18 
2edc4 39d 18 18 18 18 
2edc8 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2edcc 39f 1C 36 1C 63 
2edd0 3a0 63 63 63 63 
2edd4 3a1 63 63 63 63 
2edd8 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2eddc 3a3 FF FF FF FF 
2ede0 3a4 FF FF FF    | 	byte	$ff[7]
2ede3 3a4 00 00 00 00 
2ede7 3a5 00 00 00 00 
2edeb 3a6 00          | 	byte	$00[9]
2edec 3a7 30 18 00 3E 
2edf0 3a8 63 63 63 63 
2edf4 3a9 63 63 63 63 
2edf8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2edfc 3ab 00 00 00 1E 
2ee00 3ac 33 33 33 1B 
2ee04 3ad 33 63 63 63 
2ee08 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2ee0c 3af 1C 36 00 3E 
2ee10 3b0 63 63 63 63 
2ee14 3b1 63 63 63 63 
2ee18 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2ee1c 3b3 30 18 00 63 
2ee20 3b4 67 6F 7F 7B 
2ee24 3b5 73 63 63 63 
2ee28 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2ee2c 3b7 00 00 60 30 
2ee30 3b8 18 00 3B 66 
2ee34 3b9 66 66 66 66 
2ee38 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2ee3c 3bb 00 00 36 1C 
2ee40 3bc 08 00 3B 66 
2ee44 3bd 66 66 66 66 
2ee48 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2ee4c 3bf 36 1C 00 3E 
2ee50 3c0 63 63 06 1C 
2ee54 3c1 30 60 63 63 
2ee58 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2ee5c 3c3 00 00 36 1C 
2ee60 3c4 08 00 3E 63 
2ee64 3c5 06 1C 30 63 
2ee68 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2ee6c 3c7 30 18 00 3F 
2ee70 3c8 66 66 66 3E 
2ee74 3c9 36 66 66 66 
2ee78 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2ee7c 3cb 30 18 00 63 
2ee80 3cc 63 63 63 63 
2ee84 3cd 63 63 63 63 
2ee88 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2ee8c 3cf 00 00 60 30 
2ee90 3d0 18 00 3B 6E 
2ee94 3d1 66 06 06 06 
2ee98 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2ee9c 3d3 66 33 00 63 
2eea0 3d4 63 63 63 63 
2eea4 3d5 63 63 63 63 
2eea8 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2eeac 3d7 00 00 60 30 
2eeb0 3d8 18 00 63 63 
2eeb4 3d9 63 63 63 63 
2eeb8 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2eebc 3db 30 18 00 66 
2eec0 3dc 66 66 66 3C 
2eec4 3dd 18 18 18 18 
2eec8 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2eecc 3df 00 00 00 08 
2eed0 3e0 0C 0C 3F 0C 
2eed4 3e1 0C 0C 0C 6C 
2eed8 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2eedc 3e3 30 18 00 00 
2eee0 3e4 00 00 00 00 
2eee4 3e5 00 00 00 00 
2eee8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2eeec 3e7 00 00 00 00 
2eef0 3e8 00 00 00 00 | 	byte	$00[8]
2eef4 3e9 7F 00 00 00 
2eef8 3ea 00 00 00 00 
2eefc 3eb 66 33 00 00 
2ef00 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2ef04 3ed 00 00 00 00 
2ef08 3ee 00 00 00 00 
2ef0c 3ef 00 00 00 00 
2ef10 3f0 00 00 00 00 
2ef14 3f1 00 00 00 00 
2ef18 3f2 00          | 	byte	$00[21]
2ef19 3f2 0C 06 3C 36 
2ef1d 3f3 1C 00 00 00 
2ef21 3f4 00 00 00 00 
2ef25 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ef29 3f6 00 00 00 63 
2ef2d 3f7 3E 00 00 00 
2ef31 3f8 00 00 00 00 
2ef35 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ef39 3fa 00 00 00 00 
2ef3d 3fb 3E 63 06 1C 
2ef41 3fc 36 63 63 36 
2ef45 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2ef49 3fe 00 00 00 00 
2ef4d 3ff 00 00 00 00 | 	byte	$00[8]
2ef51 400 18 00 7E 00 
2ef55 401 18 00 00 00 
2ef59 402 00 00 00 00 
2ef5d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ef61 404 00 00 00 00 
2ef65 405 00 00 00 00 | 	byte	$00[8]
2ef69 406 18 30 1E 00 
2ef6d 407 00 00 1C 36 
2ef71 408 36 1C 00 00 
2ef75 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2ef79 40a 00 00 00 00 
2ef7d 40b 63 00 00 00 
2ef81 40c 00 00 00 00 
2ef85 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ef89 40e 00 00 00 18 
2ef8d 40f 18 00 00 00 
2ef91 410 00 00 00 00 
2ef95 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ef99 412 00 00 00 00 
2ef9d 413 00          | 	byte	$00[5]
2ef9e 413 CC 66 33 00 
2efa2 414 33 33 33 33 
2efa6 415 33 33 6E 00 
2efaa 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2efae 417 00 3F 66 66 
2efb2 418 66 3E 36 66 
2efb6 419 66 66 6F 00 
2efba 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2efbe 41b 36 1C 08 00 
2efc2 41c 3B 6E 66 06 
2efc6 41d 06 06 0F 00 
2efca 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2efce 41f 00 00 00 7E 
2efd2 420 7E 7E 7E 7E 
2efd6 421 7E 7E 00 00 
2efda 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2efde 423 00 00 00 00 
2efe2 424 00 00 00 00 
2efe6 425 00 00 00 00 
2efea 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2efec 427             | 'vga_font       file "vgafont.def"
2efec 427 00 00 00 00 
      ...             
2f01c 433 00 00 00 00 
2f020 434 00 00 00    | st_font        file "st4font.def"
2f023 434 FF FF 00 00 
2f027 435 00 00 00 00 
2f02b 436 00 18 18 18 
2f02f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f033 438 18 18 18 18 
2f037 439 18 18 18 18 
2f03b 43a 18          | 	byte	$18[9]
2f03c 43b 00 00 00 00 
2f040 43c 00 00 00    | 	byte	$00[7]
2f043 43c FF FF 18 18 
2f047 43d 18 18 18 18 
2f04b 43e 18 18 18 18 
2f04f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2f053 440 FF FF 00 00 
2f057 441 00 00 00 00 
2f05b 442 00 18 18 18 
2f05f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f063 444 1F 1F 18 18 
2f067 445 18 18 18 18 
2f06b 446 18 18 18 18 
2f06f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2f073 448 F8 F8 18 18 
2f077 449 18 18 18 18 
2f07b 44a 18 00 00 00 
2f07f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2f083 44c 1F 1F 18 18 
2f087 44d 18 18 18 18 
2f08b 44e 18 00 00 00 
2f08f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2f093 450 F8 F8 18 18 
2f097 451 18 18 18 18 
2f09b 452 18 18 18 18 
2f09f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2f0a3 454 1F 1F 00 00 
2f0a7 455 00 00 00 00 
2f0ab 456 00 18 18 18 
2f0af 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f0b3 458 F8 F8 00 00 
2f0b7 459 00 00 00 00 
2f0bb 45a 00 18 18 18 
2f0bf 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f0c3 45c FF FF 18 18 
2f0c7 45d 18 18 18 18 
2f0cb 45e 18 00 00 18 
2f0cf 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2f0d3 460 66 7E 7E 66 
2f0d7 461 66 66 66 30 
2f0db 462 18 00 00 7E 
2f0df 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2f0e3 464 3E 06 06 06 
2f0e7 465 06 7E 7E 18 
2f0eb 466 0C 30 18 3C 
2f0ef 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2f0f3 468 06 06 06 66 
2f0f7 469 66 7E 3C 00 
2f0fb 46a 00 30 18 66 
2f0ff 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2f103 46c 7E 7E 76 76 
2f107 46d 66 66 66 00 
2f10b 46e 00 30 18 7C 
2f10f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2f113 470 1C 38 70 60 
2f117 471 60 7E 3E 00 
2f11b 472 00 30 18 7E 
2f11f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2f123 474 18 0C 0C 06 
2f127 475 06 7E 7E 00 
2f12b 476 00 18 18 00 
2f12f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2f133 478 18 18 0C 0C 
2f137 479 06 7E 7E 00 
2f13b 47a 00 30 18 3C 
2f13f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2f143 47c 66 66 66 66 
2f147 47d 66          | 	byte	$66[5]
2f148 47e 7E 3C 00 00 
2f14c 47f 00 00 06 06 
2f150 480 06 06 16 1E 
2f154 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2f158 482 7E 7E 00 00 
2f15c 483 00 00 00 00 
2f160 484 00 3C 7C 60 
2f164 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2f168 486 7E 7C 30 18 
2f16c 487 00 00 00 00 
2f170 488 00 3C 7E 66 
2f174 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2f178 48a 7E 7C 18 0C 
2f17c 48b 00 00 30 18 
2f180 48c 00 3C 3E 06 
2f184 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2f188 48e 7E 7C 00 00 
2f18c 48f 00 00 30 18 
2f190 490 00 3E 7E 66 
2f194 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2f198 492 66 66 00 00 
2f19c 493 00 00 30 18 
2f1a0 494 00 7C 7E 06 
2f1a4 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2f1a8 496 7E 3E 00 00 
2f1ac 497 00 00 30 18 
2f1b0 498 00 7E 7E 30 
2f1b4 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2f1b8 49a 7E 7E 00 00 
2f1bc 49b 00 00 18 18 
2f1c0 49c 00 7E 7E 30 
2f1c4 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2f1c8 49e 7E 7E 00 00 
2f1cc 49f 00 00 30 18 
2f1d0 4a0 00 3C 7E 66 
2f1d4 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2f1d8 4a2 7E 3C 00 00 
2f1dc 4a3 00 00 1C 1C 
2f1e0 4a4 18 18 38 3C 
2f1e4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2f1e8 4a6 3C 3C 00 00 
2f1ec 4a7 00 00 00 00 
2f1f0 4a8 00 00 00 00 
2f1f4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f1f8 4aa 00 00 00 00 
2f1fc 4ab 00 00       | 	byte	$00[6]
2f1fe 4ab 18 18 18 18 
2f202 4ac 18 18 18 18 | 	byte	$18[8]
2f206 4ad 00 00 18 18 
2f20a 4ae 00 00 00 00 
2f20e 4af 66 66 66 66 
2f212 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2f216 4b1 00 00 00 00 
2f21a 4b2 00 00 00 00 
2f21e 4b3 00          | 	byte	$00[9]
2f21f 4b3 66 66 FF FF 
2f223 4b4 66 66 FF FF 
2f227 4b5 66 66 00 00 
2f22b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2f22f 4b7 7C 7E 06 06 
2f233 4b8 3E 7C 60 60 
2f237 4b9 7E 3E 18 18 
2f23b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2f23f 4bb 66 30 30 18 
2f243 4bc 18 0C 0C 66 
2f247 4bd 66 00 00 00 
2f24b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2f24f 4bf 66 66 3C 1C 
2f253 4c0 1C FC FE 66 
2f257 4c1 66 FE FC 00 
2f25b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2f25f 4c3 18 18 18 18 
2f263 4c4 00 00 00 00 
2f267 4c5 00 00 00 00 
2f26b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2f26f 4c7 18 1C 0C 0C 
2f273 4c8 0C 0C 0C 0C 
2f277 4c9 1C 18 30 00 
2f27b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2f27f 4cb 18 38 30 30 
2f283 4cc 30 30 30 30 
2f287 4cd 38 18 0C 00 
2f28b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2f28f 4cf 66 66 3C 3C 
2f293 4d0 FF FF 3C 3C 
2f297 4d1 66 66 00 00 
2f29b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2f29f 4d3 00 18 18 18 
2f2a3 4d4 7E 7E 18 18 
2f2a7 4d5 18 00 00 00 
2f2ab 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2f2af 4d7 00 00 00 00 
2f2b3 4d8 00 00       | 	byte	$00[6]
2f2b5 4d9 18 18 18 18 
2f2b9 4da 18          | 	byte	$18[5]
2f2ba 4da 0C 04 00 00 
2f2be 4db 00 00 00 00 
2f2c2 4dc 7E 7E 00 00 
2f2c6 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2f2ca 4de 00 00 00 00 
2f2ce 4df 00 00 00 00 
2f2d2 4e0 00 00 00 00 
2f2d6 4e1 00          | 	byte	$00[13]
2f2d7 4e1 18 18 18 00 
2f2db 4e2 00 00 00 60 
2f2df 4e3 60 60 30 30 
2f2e3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2f2e7 4e5 06 06 06 00 
2f2eb 4e6 00 00 00 3C 
2f2ef 4e7 7E 66 66 66 
2f2f3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2f2f7 4e9 66 7E 3C 00 
2f2fb 4ea 00 00 00 18 
2f2ff 4eb 18 1C 1C 18 
2f303 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2f307 4ed 18 7E 7E 00 
2f30b 4ee 00 00 00 3C 
2f30f 4ef 7E 66 66 30 
2f313 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2f317 4f1 0C 7E 7E 00 
2f31b 4f2 00 00 00 7E 
2f31f 4f3 7E 30 30 18 
2f323 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2f327 4f5 66 7E 3C 00 
2f32b 4f6 00 00 00 30 
2f32f 4f7 30 38 38 3C 
2f333 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2f337 4f9 7E 30 30 00 
2f33b 4fa 00 00 00 7E 
2f33f 4fb 7E 06 06 3E 
2f343 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2f347 4fd 66 7E 3C 00 
2f34b 4fe 00 00 00 38 
2f34f 4ff 3C 0E 06 06 
2f353 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2f357 501 66 7E 3C 00 
2f35b 502 00 00 00 7E 
2f35f 503 7E 60 60 30 
2f363 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2f367 505 0C 0C 0C 00 
2f36b 506 00 00 00 3C 
2f36f 507 7E 66 66 3C 
2f373 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2f377 509 66 7E 3C 00 
2f37b 50a 00 00 00 3C 
2f37f 50b 7E 66 66 7E 
2f383 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2f387 50d 70 3C 1C 00 
2f38b 50e 00 00 00 00 
2f38f 50f 00 00 18 18 
2f393 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2f397 511 18 18 18 00 
2f39b 512 00 00 00 00 
2f39f 513 00 00 18 18 
2f3a3 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2f3a7 515 18 18 18 0C 
2f3ab 516 04 00 00 00 
2f3af 517 70 38 1C 0E 
2f3b3 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2f3b7 519 70 00 00 00 
2f3bb 51a 00 00 00 00 
2f3bf 51b 00 00 7E 7E 
2f3c3 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2f3c7 51d 00 00 00 00 
2f3cb 51e 00 00 00 00 | 	byte	$00[8]
2f3cf 51f 0E 1C 38 70 
2f3d3 520 E0 70 38 1C 
2f3d7 521 0E 00 00 00 
2f3db 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2f3df 523 7E 66 66 30 
2f3e3 524 30 18 18 18 
2f3e7 525 00 18 18 00 
2f3eb 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2f3ef 527 7E 66 66 66 
2f3f3 528 66 36 06 66 
2f3f7 529 66 7E 3C 00 
2f3fb 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2f3ff 52b 3C 7E 66 66 
2f403 52c 66 7E 7E 66 
2f407 52d 66 66 66 00 
2f40b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2f40f 52f 7E 66 66 7E 
2f413 530 3E 66 66 66 
2f417 531 66 7E 3E 00 
2f41b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2f41f 533 7E 66 66 06 
2f423 534 06 06 06 66 
2f427 535 66 7E 3C 00 
2f42b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2f42f 537 7E 66 66 66 
2f433 538 66 66 66 66 
2f437 539 66 7E 3E 00 
2f43b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2f43f 53b 7E 06 06 3E 
2f443 53c 3E 06 06 06 
2f447 53d 06 7E 7E 00 
2f44b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2f44f 53f 7E 06 06 3E 
2f453 540 3E 06 06 06 
2f457 541 06 06 06 00 
2f45b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2f45f 543 7E 06 06 76 
2f463 544 76 66 66 66 
2f467 545 66 7E 3C 00 
2f46b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2f46f 547 66 66 66 7E 
2f473 548 7E 66 66 66 
2f477 549 66 66 66 00 
2f47b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2f47f 54b 7E 18 18 18 
2f483 54c 18 18 18 18 
2f487 54d 18 7E 7E 00 
2f48b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2f48f 54f 60 60 60 60 
2f493 550 60 60 60    | 	byte	$60[7]
2f496 551 66 66 7E 3C 
2f49a 552 00 00 00 00 
2f49e 553 66 66 36 36 
2f4a2 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2f4a6 555 66 66 C6 C6 
2f4aa 556 00 00 00 00 
2f4ae 557 06 06 06 06 
2f4b2 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2f4b6 559 06 06 7E 7E 
2f4ba 55a 00 00 00 00 
2f4be 55b C6 C6 EE EE 
2f4c2 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2f4c6 55d C6 C6 C6 C6 
2f4ca 55e 00 00 00 00 
2f4ce 55f 66 66 66 6E 
2f4d2 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2f4d6 561 76 66 66 66 
2f4da 562 00 00 00 00 
2f4de 563 3C 7E 66 66 
2f4e2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2f4e6 565 66 66 7E 3C 
2f4ea 566 00 00 00 00 
2f4ee 567 3E 7E 66 66 
2f4f2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2f4f6 569 06 06 06 06 
2f4fa 56a 00 00 00 00 
2f4fe 56b 3C 7E 66 66 
2f502 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2f506 56d 66 56 3E 6C 
2f50a 56e 00 00 00 00 
2f50e 56f 3E 7E 66 66 
2f512 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2f516 571 66 66 C6 C6 
2f51a 572 00 00 00 00 
2f51e 573 7C 7E 06 06 
2f522 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2f526 575 60 60 7E 3E 
2f52a 576 00 00 00 00 
2f52e 577 7E 7E 18 18 
2f532 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2f536 579 18 18 18 18 
2f53a 57a 00 00 00 00 
2f53e 57b 66 66 66 66 
2f542 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2f546 57d 66 66 7E 3C 
2f54a 57e 00 00 00 00 
2f54e 57f 66 66 66 66 
2f552 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2f556 581 3C 3C 18 18 
2f55a 582 00 00 00 00 
2f55e 583 C6 C6 C6 C6 
2f562 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2f566 585 FE EE C6 82 
2f56a 586 00 00 00 00 
2f56e 587 66 66 66 3C 
2f572 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2f576 589 3C 66 66 66 
2f57a 58a 00 00 00 00 
2f57e 58b 66 66 66 66 
2f582 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2f586 58d 18 18 18 18 
2f58a 58e 00 00 00 00 
2f58e 58f 7E 7E 30 30 
2f592 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2f596 591 06 06 7E 7E 
2f59a 592 00 00 00 00 
2f59e 593 3C 3C 0C 0C 
2f5a2 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2f5a6 595 0C 0C 3C 3C 
2f5aa 596 00 00 00 00 
2f5ae 597 06 06 0C 0C 
2f5b2 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2f5b6 599 60 60 C0 C0 
2f5ba 59a 00 00 00 00 
2f5be 59b 3C 3C 30 30 
2f5c2 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2f5c6 59d 30 30 3C 3C 
2f5ca 59e 00 00 00 00 
2f5ce 59f 18 18 3C 3C 
2f5d2 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2f5d6 5a1 00 00 00 00 
2f5da 5a2 00 00 00 00 
2f5de 5a3 00 00 00 00 
2f5e2 5a4 00 00 00 00 
2f5e6 5a5 00 00       | 	byte	$00[18]
2f5e8 5a6 FE FE 00 00 
2f5ec 5a7 00 00 0C 0C 
2f5f0 5a8 18 18 00 00 
2f5f4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2f5f8 5aa 00 00 00 00 
2f5fc 5ab 00 00 00 00 
2f600 5ac 00          | 	byte	$00[9]
2f601 5ac 3C 7C 60 7C 
2f605 5ad 7E 66 66 7E 
2f609 5ae 7C 00 00 00 
2f60d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2f611 5b0 3E 7E 66 66 
2f615 5b1 66 66 66 7E 
2f619 5b2 3E 00 00 00 
2f61d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2f621 5b4 3C 3E 06 06 
2f625 5b5 06 06 06 7E 
2f629 5b6 7C 00 00 00 
2f62d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2f631 5b8 7C 7E 66 66 
2f635 5b9 66 66 66 7E 
2f639 5ba 7C 00 00 00 
2f63d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2f641 5bc 3C 7E 66 66 
2f645 5bd 7E 06 06 7E 
2f649 5be 7C 00 00 00 
2f64d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2f651 5c0 18 7E 7E 18 
2f655 5c1 18 18 18 18 
2f659 5c2 18 00 00 00 
2f65d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2f661 5c4 7C 7E 66 66 
2f665 5c5 66 66 7E 7C 
2f669 5c6 60 7E 3E 00 
2f66d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2f671 5c8 3E 7E 66 66 
2f675 5c9 66 66 66 66 
2f679 5ca 66 00 00 00 
2f67d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2f681 5cc 1C 1C 18 18 
2f685 5cd 18 18 18 3C 
2f689 5ce 3C 00 00 00 
2f68d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2f691 5d0 30 30 30 30 
2f695 5d1 30 30 30 30 
2f699 5d2 30          | 	byte	$30[9]
2f69a 5d2 3E 1E 00 00 
2f69e 5d3 06 06 06 36 
2f6a2 5d4 36 1E 1E 1E 
2f6a6 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2f6aa 5d6 00 00 00 00 
2f6ae 5d7 1C 1C 18 18 
2f6b2 5d8 18 18 18 18 
2f6b6 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2f6ba 5da 00 00 00 00 
2f6be 5db 00 00 00    | 	byte	$00[7]
2f6c1 5dc 6C FE FE D6 
2f6c5 5dd D6 C6 C6 C6 
2f6c9 5de C6 00 00 00 
2f6cd 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2f6d1 5e0 3E 7E 66 66 
2f6d5 5e1 66 66 66 66 
2f6d9 5e2 66 00 00 00 
2f6dd 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2f6e1 5e4 3C 7E 66 66 
2f6e5 5e5 66 66 66 7E 
2f6e9 5e6 3C 00 00 00 
2f6ed 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2f6f1 5e8 3E 7E 66 66 
2f6f5 5e9 66 66 66 7E 
2f6f9 5ea 3E 06 06 00 
2f6fd 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2f701 5ec 7C 7E 66 66 
2f705 5ed 66 66 66 7E 
2f709 5ee 7C 60 60 00 
2f70d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2f711 5f0 3E 7E 66 06 
2f715 5f1 06 06 06 06 
2f719 5f2 06 00 00 00 
2f71d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2f721 5f4 7C 7E 06 0E 
2f725 5f5 3C 70 60 7E 
2f729 5f6 3E 00 00 00 
2f72d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2f731 5f8 7E 7E 18 18 
2f735 5f9 18 18 18 78 
2f739 5fa 70 00 00 00 
2f73d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2f741 5fc 66 66 66 66 
2f745 5fd 66 66 66    | 	byte	$66[7]
2f748 5fe 7E 7C 00 00 
2f74c 5ff 00 00 00 00 
2f750 600 00 66 66 66 
2f754 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2f758 602 18 18 00 00 
2f75c 603 00 00 00 00 
2f760 604 00 C6 C6 D6 
2f764 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2f768 606 C6 82 00 00 
2f76c 607 00 00 00 00 
2f770 608 00 66 66 3C 
2f774 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2f778 60a 66 66 00 00 
2f77c 60b 00 00 00 00 
2f780 60c 00 66 66 66 
2f784 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2f788 60e 7C 60 7E 3E 
2f78c 60f 00 00 00 00 
2f790 610 00 7E 7E 30 
2f794 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2f798 612 7E 7E 00 00 
2f79c 613 00 00 30 18 
2f7a0 614 18 18 18 0C 
2f7a4 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2f7a8 616 18 30 00 00 
2f7ac 617 00 00 18 18 
2f7b0 618 18 18 18 18 
2f7b4 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2f7b8 61a 18 18 00 00 
2f7bc 61b 00 00 0C 18 
2f7c0 61c 18 18 18 30 
2f7c4 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2f7c8 61e 18 0C 00 00 
2f7cc 61f 00 00 6C 7E 
2f7d0 620 36 00 00 00 
2f7d4 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2f7d8 622 00 00 00 00 
2f7dc 623 00 00 00 00 
2f7e0 624 00          | 	byte	$00[9]
2f7e1 624 18 18 18 18 
2f7e5 625 18 18 00 00 
2f7e9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2f7ec 627             | 'amiga_font     file "amigafont.def"
2f7ec 627 00 6C FE FE 
2f7f0 628 7C 38 10 00 
2f7f4 629 18 18 18 F8 
2f7f8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2f7fc 62b C0 C0 C0 C0 
2f800 62c C0 C0 C0 C0 | 	byte	$c0[8]
2f804 62d 18 18 18 1F 
2f808 62e 1F 00 00 00 
2f80c 62f 18 18 18 1F 
2f810 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2f814 631 00 00 00 1F 
2f818 632 1F 18 18 18 
2f81c 633 C0 E0 70 38 
2f820 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2f824 635 03 07 0E 1C 
2f828 636 38 70 E0 C0 
2f82c 637 80 C0 E0 F0 
2f830 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2f834 639 00 00 00 00 
2f838 63a F0 F0 F0 F0 
2f83c 63b 01 03 07 0F 
2f840 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2f844 63d F0 F0 F0 F0 
2f848 63e 00 00 00 00 
2f84c 63f 0F 0F 0F 0F 
2f850 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2f854 641 FF FF 00 00 
2f858 642 00 00 00 00 
2f85c 643 00 00 00 00 
2f860 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2f864 645 00 00 00 00 
2f868 646 0F 0F 0F 0F 
2f86c 647 00 38 38 EE 
2f870 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2f874 649 00 00 00 F8 
2f878 64a F8 18 18 18 
2f87c 64b 00 00 00 FF 
2f880 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2f884 64d 18 18 18 FF 
2f888 64e FF 18 18 18 
2f88c 64f 00 00 3C 7E 
2f890 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2f894 651 00 00 00 00 
2f898 652 FF FF FF FF 
2f89c 653 03 03 03 03 
2f8a0 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2f8a4 655 00 00 00 FF 
2f8a8 656 FF 18 18 18 
2f8ac 657 18 18 18 FF 
2f8b0 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2f8b4 659 0F 0F 0F 0F 
2f8b8 65a 0F 0F 0F 0F | 	byte	$0f[8]
2f8bc 65b 18 18 18 F8 
2f8c0 65c F8 00 00 00 
2f8c4 65d 1E 06 1E 06 
2f8c8 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2f8cc 65f 00 18 3C 7E 
2f8d0 660 18 18 18 00 
2f8d4 661 00 18 18 18 
2f8d8 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2f8dc 663 00 18 0C 7E 
2f8e0 664 0C 18 00 00 
2f8e4 665 00 18 30 7E 
2f8e8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2f8ec 667 00 00 00 00 
2f8f0 668 00 00 00 00 
2f8f4 669 00          | 	byte	$00[9]
2f8f5 669 18 18 18 18 
2f8f9 66a 00 18 00 00 
2f8fd 66b 66 66 66 00 
2f901 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2f905 66d 66 FF 66 66 
2f909 66e FF 66 00 18 
2f90d 66f 7C 06 3C 60 
2f911 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2f915 671 66 36 18 0C 
2f919 672 66 62 00 38 
2f91d 673 6C 38 1C F6 
2f921 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2f925 675 18 18 18 00 
2f929 676 00 00 00 00 
2f92d 677 70 38 18 18 
2f931 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2f935 679 0E 1C 18 18 
2f939 67a 1C 0E 00 00 
2f93d 67b 66 3C FF 3C 
2f941 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2f945 67d 18 18 7E 18 
2f949 67e 18 00 00 00 
2f94d 67f 00 00 00 00 
2f951 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2f955 681 00 00 7E 00 
2f959 682 00 00 00 00 
2f95d 683 00 00 00 00 
2f961 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2f965 685 60 30 18 0C 
2f969 686 06 02 00 00 
2f96d 687 3C 66 76 6E 
2f971 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2f975 689 18 1C 18 18 
2f979 68a 18 7E 00 00 
2f97d 68b 3C 66 30 18 
2f981 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2f985 68d 7E 30 18 30 
2f989 68e 66 3C 00 00 
2f98d 68f 30 38 3C 36 
2f991 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2f995 691 7E 06 3E 60 
2f999 692 66 3C 00 00 
2f99d 693 3C 06 3E 66 
2f9a1 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2f9a5 695 7E 60 30 18 
2f9a9 696 0C 0C 00 00 
2f9ad 697 3C 66 3C 66 
2f9b1 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2f9b5 699 3C 66 7C 60 
2f9b9 69a 30 1C 00 00 
2f9bd 69b 00 18 18 00 
2f9c1 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2f9c5 69d 00 18 18 00 
2f9c9 69e 18 18 0C 60 
2f9cd 69f 30 18 0C 18 
2f9d1 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2f9d5 6a1 00 7E 00 00 
2f9d9 6a2 7E 00 00 06 
2f9dd 6a3 0C 18 30 18 
2f9e1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2f9e5 6a5 3C 66 30 18 
2f9e9 6a6 00 18 00 00 
2f9ed 6a7 3C 66 76 76 
2f9f1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2f9f5 6a9 18 3C 66 66 
2f9f9 6aa 7E 66 00 00 
2f9fd 6ab 3E 66 3E 66 
2fa01 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2fa05 6ad 3C 66 06 06 
2fa09 6ae 66 3C 00 00 
2fa0d 6af 1E 36 66 66 
2fa11 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2fa15 6b1 7E 06 3E 06 
2fa19 6b2 06 7E 00 00 
2fa1d 6b3 7E 06 3E 06 
2fa21 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2fa25 6b5 7C 06 06 76 
2fa29 6b6 66 7C 00 00 
2fa2d 6b7 66 66 7E 66 
2fa31 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2fa35 6b9 7E 18 18 18 
2fa39 6ba 18 7E 00 00 
2fa3d 6bb 60 60 60 60 
2fa41 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2fa45 6bd 66 36 1E 1E 
2fa49 6be 36 66 00 00 
2fa4d 6bf 06 06 06 06 
2fa51 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2fa55 6c1 C6 EE FE D6 
2fa59 6c2 C6 C6 00 00 
2fa5d 6c3 66 6E 7E 7E 
2fa61 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2fa65 6c5 3C 66 66 66 
2fa69 6c6 66 3C 00 00 
2fa6d 6c7 3E 66 66 3E 
2fa71 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2fa75 6c9 3C 66 66 66 
2fa79 6ca 36 6C 00 00 
2fa7d 6cb 3E 66 66 3E 
2fa81 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2fa85 6cd 3C 06 3C 60 
2fa89 6ce 60 3C 00 00 
2fa8d 6cf 7E 18 18 18 
2fa91 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2fa95 6d1 66 66 66 66 
2fa99 6d2 66          | 	byte	$66[5]
2fa9a 6d2 7E 00 00 66 
2fa9e 6d3 66 66 66 3C 
2faa2 6d4 18 00 00 C6 
2faa6 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2faaa 6d6 C6 00 00 66 
2faae 6d7 66 3C 3C 66 
2fab2 6d8 66 00 00 66 
2fab6 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2faba 6da 18 00 00 7E 
2fabe 6db 30 18 0C 06 
2fac2 6dc 7E 00 00 78 
2fac6 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2faca 6de 78 00 00 02 
2face 6df 06 0C 18 30 
2fad2 6e0 60 00 00 1E 
2fad6 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2fada 6e2 1E 00 00 10 
2fade 6e3 38 6C C6 00 
2fae2 6e4 00 00 00 00 
2fae6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2faea 6e6 FF 00 00 18 
2faee 6e7 3C 7E 7E 3C 
2faf2 6e8 18 00 00 00 
2faf6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2fafa 6ea 7C 00 00 06 
2fafe 6eb 06 3E 66 66 
2fb02 6ec 3E 00 00 00 
2fb06 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2fb0a 6ee 3C 00 00 60 
2fb0e 6ef 60 7C 66 66 
2fb12 6f0 7C 00 00 00 
2fb16 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2fb1a 6f2 3C 00 00 70 
2fb1e 6f3 18 7C 18 18 
2fb22 6f4 18 00 00 00 
2fb26 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2fb2a 6f6 60 3E 00 06 
2fb2e 6f7 06 3E 66 66 
2fb32 6f8 66 00 00 18 
2fb36 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2fb3a 6fa 3C 00 00 60 
2fb3e 6fb 00 60 60 60 
2fb42 6fc 60 3C 00 06 
2fb46 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2fb4a 6fe 66 00 00 1C 
2fb4e 6ff 18 18 18 18 
2fb52 700 3C 00 00 00 
2fb56 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2fb5a 702 C6 00 00 00 
2fb5e 703 3E 66 66 66 
2fb62 704 66 00 00 00 
2fb66 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2fb6a 706 3C 00 00 00 
2fb6e 707 3E 66 66 3E 
2fb72 708 06 06 00 00 
2fb76 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2fb7a 70a 60 60 00 00 
2fb7e 70b 3E 66 06 06 
2fb82 70c 06 00 00 00 
2fb86 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2fb8a 70e 3E 00 00 18 
2fb8e 70f 7E 18 18 18 
2fb92 710 70 00 00 00 
2fb96 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2fb9a 712 7C 00 00 00 
2fb9e 713 66 66 66 3C 
2fba2 714 18 00 00 00 
2fba6 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2fbaa 716 6C 00 00 00 
2fbae 717 66 3C 18 3C 
2fbb2 718 66 00 00 00 
2fbb6 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2fbba 71a 30 1E 00 00 
2fbbe 71b 7E 30 18 0C 
2fbc2 71c 7E 00 00 18 
2fbc6 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2fbca 71e 3C 00 18 18 
2fbce 71f 18 18 18 18 
2fbd2 720 18 18 00 7E 
2fbd6 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2fbda 722 60 00 10 18 
2fbde 723 1C 1E 1C 18 
2fbe2 724 10 00 08 18 
2fbe6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2fbea 726 08 00       | 	byte	$08, $00
2fbec 727 00 00 00 00 
2fbf0 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2fbf1 728 80 00 00 00 
2fbf5 729 00 80 00 00 
2fbf9 72a 80 80 00 00 
2fbfd 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2fc01 72c 80 00 80 00 
2fc05 72d 00 40 80 00 
2fc09 72e AA AA AA 00 
2fc0d 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2fc11 730 FF 00 00 00 
2fc15 731 00 FF 00 00 
2fc19 732 FF FF 00 00 
2fc1d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2fc21 734 FF 00 FF 00 
2fc25 735 00 FF FF 00 
2fc29 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2fc2c 737 00 00 00 00 
2fc30 738 00          | ataripalette   file "ataripalettep2.def"
2fc31 738 11 11 11 00 
2fc35 739 22 22 22 00 
2fc39 73a 33 33 33 00 
2fc3d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2fc41 73c 55 55 55 00 
2fc45 73d 66 66 66 00 
2fc49 73e 77 77 77 00 
2fc4d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2fc51 740 99 99 99 00 
2fc55 741 AA AA AA 00 
2fc59 742 BB BB BB 00 
2fc5d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2fc61 744 DD DD DD 00 
2fc65 745 EE EE EE 00 
2fc69 746 FF FF FF 00 
2fc6d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2fc71 748 00 14 40 00 
2fc75 749 00 1E 60 00 
2fc79 74a 00 28 80 00 
2fc7d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2fc81 74c 00 3C BF 00 
2fc85 74d 00 46 DF 00 
2fc89 74e 00 50 FF 00 
2fc8d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2fc91 750 39 77 FF 00 
2fc95 751 55 8A FF 00 
2fc99 752 71 9E FF 00 
2fc9d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2fca1 754 AA C5 FF 00 
2fca5 755 C6 D8 FF 00 
2fca9 756 E3 EC FF 00 
2fcad 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2fcb1 758 00 00 40 00 
2fcb5 759 00 00 60 00 
2fcb9 75a 00 00 80 00 
2fcbd 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2fcc1 75c 00 00 BF 00 
2fcc5 75d 00 00 DF 00 
2fcc9 75e 00 00 FF 00 
2fccd 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2fcd1 760 39 39 FF 00 
2fcd5 761 55 55 FF 00 
2fcd9 762 71 71 FF 00 
2fcdd 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2fce1 764 AA AA FF 00 
2fce5 765 C6 C6 FF 00 
2fce9 766 E3 E3 FF 00 
2fced 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2fcf1 768 20 00 40 00 
2fcf5 769 30 00 60 00 
2fcf9 76a 40 00 80 00 
2fcfd 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2fd01 76c 60 00 BF 00 
2fd05 76d 70 00 DF 00 
2fd09 76e 80 00 FF 00 
2fd0d 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2fd11 770 9C 39 FF 00 
2fd15 771 AA 55 FF 00 
2fd19 772 B8 71 FF 00 
2fd1d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2fd21 774 D5 AA FF 00 
2fd25 775 E3 C6 FF 00 
2fd29 776 F1 E3 FF 00 
2fd2d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2fd31 778 40 00 40 00 
2fd35 779 60 00 60 00 
2fd39 77a 80 00 80 00 
2fd3d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2fd41 77c BF 00 BF 00 
2fd45 77d DF 00 DF 00 
2fd49 77e FF 00 FF 00 
2fd4d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2fd51 780 FF 39 FF 00 
2fd55 781 FF 55 FF 00 
2fd59 782 FF 71 FF 00 
2fd5d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2fd61 784 FF AA FF 00 
2fd65 785 FF C6 FF 00 
2fd69 786 FF E3 FF 00 
2fd6d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2fd71 788 40 00 20 00 
2fd75 789 60 00 30 00 
2fd79 78a 80 00 40 00 
2fd7d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2fd81 78c BF 00 60 00 
2fd85 78d DF 00 70 00 
2fd89 78e FF 00 80 00 
2fd8d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2fd91 790 FF 39 9C 00 
2fd95 791 FF 55 AA 00 
2fd99 792 FF 71 B8 00 
2fd9d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2fda1 794 FF AA D5 00 
2fda5 795 FF C6 E3 00 
2fda9 796 FF E3 F1 00 
2fdad 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2fdb1 798 40 00 00 00 
2fdb5 799 60 00 00 00 
2fdb9 79a 80 00 00 00 
2fdbd 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2fdc1 79c BF 00 00 00 
2fdc5 79d DF 00 00 00 
2fdc9 79e FF 00 00 00 
2fdcd 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2fdd1 7a0 FF 39 39 00 
2fdd5 7a1 FF 55 55 00 
2fdd9 7a2 FF 71 71 00 
2fddd 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2fde1 7a4 FF AA AA 00 
2fde5 7a5 FF C6 C6 00 
2fde9 7a6 FF E3 E3 00 
2fded 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2fdf1 7a8 40 10 00 00 
2fdf5 7a9 60 18 00 00 
2fdf9 7aa 80 20 00 00 
2fdfd 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2fe01 7ac BF 30 00 00 
2fe05 7ad DF 38 00 00 
2fe09 7ae FF 40 00 00 
2fe0d 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2fe11 7b0 FF 6A 39 00 
2fe15 7b1 FF 80 55 00 
2fe19 7b2 FF 95 71 00 
2fe1d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2fe21 7b4 FF BF AA 00 
2fe25 7b5 FF D5 C6 00 
2fe29 7b6 FF EA E3 00 
2fe2d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2fe31 7b8 40 20 00 00 
2fe35 7b9 60 30 00 00 
2fe39 7ba 80 40 00 00 
2fe3d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2fe41 7bc BF 60 00 00 
2fe45 7bd DF 70 00 00 
2fe49 7be FF 80 00 00 
2fe4d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2fe51 7c0 FF 9C 39 00 
2fe55 7c1 FF AA 55 00 
2fe59 7c2 FF B8 71 00 
2fe5d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2fe61 7c4 FF D5 AA 00 
2fe65 7c5 FF E3 C6 00 
2fe69 7c6 FF F1 E3 00 
2fe6d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2fe71 7c8 40 30 00 00 
2fe75 7c9 60 48 00 00 
2fe79 7ca 80 60 00 00 
2fe7d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2fe81 7cc BF 90 00 00 
2fe85 7cd DF A8 00 00 
2fe89 7ce FF C0 00 00 
2fe8d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2fe91 7d0 FF CE 39 00 
2fe95 7d1 FF D5 55 00 
2fe99 7d2 FF DC 71 00 
2fe9d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2fea1 7d4 FF EA AA 00 
2fea5 7d5 FF F1 C6 00 
2fea9 7d6 FF F8 E3 00 
2fead 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2feb1 7d8 30 40 00 00 
2feb5 7d9 48 60 00 00 
2feb9 7da 60 80 00 00 
2febd 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2fec1 7dc 90 BF 00 00 
2fec5 7dd A8 DF 00 00 
2fec9 7de C0 FF 00 00 
2fecd 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2fed1 7e0 CE FF 39 00 
2fed5 7e1 D5 FF 55 00 
2fed9 7e2 DC FF 71 00 
2fedd 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2fee1 7e4 EA FF AA 00 
2fee5 7e5 F1 FF C6 00 
2fee9 7e6 F8 FF E3 00 
2feed 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2fef1 7e8 00 40 00 00 
2fef5 7e9 00 60 00 00 
2fef9 7ea 00 80 00 00 
2fefd 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2ff01 7ec 00 BF 00 00 
2ff05 7ed 00 DF 00 00 
2ff09 7ee 00 FF 00 00 
2ff0d 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2ff11 7f0 39 FF 39 00 
2ff15 7f1 55 FF 55 00 
2ff19 7f2 71 FF 71 00 
2ff1d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2ff21 7f4 AA FF AA 00 
2ff25 7f5 C6 FF C6 00 
2ff29 7f6 E3 FF E3 00 
2ff2d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2ff31 7f8 00 40 14 00 
2ff35 7f9 00 60 1E 00 
2ff39 7fa 00 80 28 00 
2ff3d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2ff41 7fc 00 BF 3C 00 
2ff45 7fd 00 DF 46 00 
2ff49 7fe 00 FF 50 00 
2ff4d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2ff51 800 39 FF 77 00 
2ff55 801 55 FF 8A 00 
2ff59 802 71 FF 9E 00 
2ff5d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2ff61 804 AA FF C5 00 
2ff65 805 C6 FF D8 00 
2ff69 806 E3 FF EC 00 
2ff6d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2ff71 808 00 40 28 00 
2ff75 809 00 60 3C 00 
2ff79 80a 00 80 50 00 
2ff7d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2ff81 80c 00 BF 78 00 
2ff85 80d 00 DF 8C 00 
2ff89 80e 00 FF A0 00 
2ff8d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2ff91 810 39 FF B5 00 
2ff95 811 55 FF C0 00 
2ff99 812 71 FF CA 00 
2ff9d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2ffa1 814 AA FF DF 00 
2ffa5 815 C6 FF EA 00 
2ffa9 816 E3 FF F4 00 
2ffad 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2ffb1 818 00 40 40 00 
2ffb5 819 00 60 60 00 
2ffb9 81a 00 80 80 00 
2ffbd 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2ffc1 81c 00 BF BF 00 
2ffc5 81d 00 DF DF 00 
2ffc9 81e 00 FF FF 00 
2ffcd 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2ffd1 820 39 FF FF 00 
2ffd5 821 55 FF FF 00 
2ffd9 822 71 FF FF 00 
2ffdd 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2ffe1 824 AA FF FF 00 
2ffe5 825 C6 FF FF 00 
2ffe9 826 E3 FF FF 00 
2ffed 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2fff1 828 00 28 40 00 
2fff5 829 00 3C 60 00 
2fff9 82a 00 50 80 00 
2fffd 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
30001 82c 00 78 BF 00 
30005 82d 00 8C DF 00 
30009 82e 00 A0 FF 00 
3000d 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
30011 830 39 B5 FF 00 
30015 831 55 C0 FF 00 
30019 832 71 CA FF 00 
3001d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
30021 834 AA DF FF 00 
30025 835 C6 EA FF 00 
30029 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3002c 837             | 
3002c 837             | '**********************************************************************************
3002c 837             | '
3002c 837             | '        Timings and colors definitions
3002c 837             | '
3002c 837             | '**********************************************************************************
3002c 837             | 
3002c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3002c 837 10 00 00 00 
30030 838 50 00 00 00 
30034 839 0C 00 00 00 
30038 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3003c 83b 08 00 00 00 
30040 83c 04 00 00 00 
30044 83d 08 00 00 00 
30048 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
3004c 83f 40 02 00 00 
30050 840 6A 8C 15 14 
30054 841 FB 06 B7 01 
30058 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
3005c 843 00 00 00 00 
30060 844 C0 00 00 00 
30064 845 00 00 00 00 
30068 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3006c 847 00 75 C7 97 
30070 848 27 47 F6 0A 
30074 849 05 79 CB 9B 
30078 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3007c 84b             | 
3007c 84b             | ''--------  Initialization  ----------------------------------------------------------------
3007c 84b             | 
3007c 84b 28 0C 64 FD | hdmi            setq    #6
30080 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
30084 84d 28 10 64 FD |                 setq    #8
30088 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3008c 84f             | 
3008c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
30090 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
30094 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
30098 852 D6 C6 01 F1 |                 add     t1,hbase
3009c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
300a0 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
300a4 855 7B 0B 80 5F 
300a8 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
300ac 857 66 66 86 FF 
300b0 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
300b4 859             | '
300b4 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
300b8 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
300bc 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
300c0 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
300c4 85d             | 
300c4 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
300c8 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
300cc 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
300d0 860             | 
300d0 860             | ''--------  frame rendering main loop  ---------------------------------------------------
300d0 860             | 
300d0 860 28 06 64 FD | p101            setq 	#3
300d4 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
300d8 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
300dc 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
300e0 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
300e4 865 00 A0 05 F6 |                 mov     dlinum, #0
300e8 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
300ec 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
300f0 868             | 
300f0 868             | 
300f0 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
300f4 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
300f8 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
300fc 86b             |                 
300fc 86b             | 
300fc 86b             | 
300fc 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
300fc 86b             |   
300fc 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
30100 86c 29 FE 65 3D |          if_nc  setq2   #255
30104 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
30108 86e             | 
30108 86e             | '' -----   up porch (before the picture)
30108 86e             | 
30108 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3010c 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
30110 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
30114 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
30118 872             |  
30118 872             |    
30118 872             |  
30118 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3011c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
30120 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
30124 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
30128 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3012c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
30130 878             | 
30130 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
30134 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
30138 87a 48 00 B0 FD | 		call    #dli
3013c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
30140 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
30144 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
30148 87e             |                 	
30148 87e             |                 
30148 87e             | 
30148 87e             |  
30148 87e             | '' ------- the main screen drawing starts here
30148 87e             | 
30148 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3014c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
30150 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
30154 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
30158 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3015c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
30160 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
30164 885             |               
30164 885             | 
30164 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
30168 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3016c 887             | 
3016c 887             | ' ---------------- All visible lines displayed now, start vblank  
3016c 887             | 
3016c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
30170 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
30174 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
30178 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3017c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
30180 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
30184 88d             | 
30184 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
30184 88d             | 
30184 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
30184 88d             | 
30184 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
30188 88e             | 
30188 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3018c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
30190 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
30194 891             | 
30194 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
30198 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3019c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
301a0 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
301a4 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
301a8 896             | 
301a8 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
301ac 897 DD C6 41 F8 |                 getnib  t1,dl,#0
301b0 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
301b4 899 70 00 90 AD |     if_z        jmp     #preload
301b8 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
301bc 89b 94 00 90 AD |     if_z        jmp     #preload2
301c0 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
301c4 89d 0C 00 90 AD |     if_z        jmp     #p390
301c8 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
301cc 89f 28 00 90 AD |     if_z        jmp     #p391  
301d0 8a0             | 
301d0 8a0 2D 00 64 FD | p308            ret
301d4 8a1             |    
301d4 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
301d8 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
301dc 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
301e0 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
301e4 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
301e8 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
301ec 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
301f0 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
301f4 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
301f8 8aa             |  
301f8 8aa             | '' --------  Reload palette. To do 
301f8 8aa             | 
301f8 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
301fc 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
30200 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
30204 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
30208 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3020c 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
30210 8b0 70 FF 9F FD |         	jmp     #dli                
30214 8b1             |       
30214 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
30214 8b1             | 
30214 8b1             | 
30214 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
30214 8b1             | 
30214 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
30218 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3021c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
30220 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
30224 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
30228 8b6             |         
30228 8b6             | '' -------------- Preload a line from PSRAM        
30228 8b6             |         
30228 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3022c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
30230 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
30234 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
30238 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3023c 8bb             | 
3023c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
30240 8bc 32 B7 01 F6 |                 mov     buf2,a1024
30244 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
30248 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3024c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
30250 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
30254 8c1             |  
30254 8c1             |  
30254 8c1             | preload2      '  incmod  dlinum,#3
30254 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
30258 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3025c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
30260 8c4 28 02 64 FD |                 setq	#1
30264 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
30268 8c6             |                 
30268 8c6             | 
30268 8c6             | '' -------------- Draw sprites
30268 8c6             | 
30268 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3026c 8c7 10 5C 0E F5 | 		and t8,#16 wz
30270 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
30274 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
30278 8ca             | 		
30278 8ca             | 
30278 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3027c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
30280 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
30284 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
30288 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3028c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
30290 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
30294 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
30298 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3029c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
302a0 8d4 01 52 86 F1 |                 sub     sprite_h,#1
302a4 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
302a8 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
302ac 8d7             | 
302ac 8d7             | 
302ac 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
302b0 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
302b4 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
302b8 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
302bc 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
302c0 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
302c4 8dd 00 5E 06 F6 |                 mov 	t9,#0
302c8 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
302cc 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
302d0 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
302d4 8e1             |      
302d4 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
302d8 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
302dc 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
302e0 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
302e4 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
302e8 8e6             |                 
302e8 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
302ec 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
302f0 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
302f4 8e9             |   		
302f4 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
302f8 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
302fc 8eb             | 
302fc 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
30300 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
30304 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
30308 8ee             |  
30308 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3030c 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
30310 8f0 10 00 90 CD |      if_c 	jmp     #p899		
30314 8f1             | 	
30314 8f1             | 	
30314 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
30318 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3031c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
30320 8f4             | 
30320 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
30324 8f5             | 
30324 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
30328 8f6 01 58 86 F1 | 	 	sub     t6,#1
3032c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
30330 8f8             | 
30330 8f8 28 58 62 FD |                 setq   	t6
30334 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
30338 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3033c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
30340 8fc 24 00 90 AD |         if_z    jmp #p898
30344 8fd             |          
30344 8fd             |         
30344 8fd 70 5F 06 F6 |                 mov  t9,#368
30348 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3034c 8ff             | 
3034c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
30350 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
30354 901 FF FF 7F FF 
30358 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3035c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
30360 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
30364 905 2D 01 00 F5 |                 and 0-0, t7
30368 906             |                
30368 906             | 
30368 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3036c 907 E5 E0 7A FA |                 wmlong 368,t3				
30370 908             |                 
30370 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
30374 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
30378 90a 2D 00 64 FD |                 ret
3037c 90b             | 	
3037c 90b             | 	
3037c 90b             |                
3037c 90b             |  
3037c 90b             | '' -------------- Graphics line ------------------------------------------------------------
3037c 90b             |  
3037c 90b             | 
3037c 90b             | '' consts and vars
3037c 90b             | 
3037c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
30380 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
30384 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
30388 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3038c 90f             | 
3038c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
30390 910             | 
30390 910             | '------ these longs will be set by setmode function
30390 910             | 
30390 910 00 00 00 00 | m_bs            long    0        'blanks before sync
30394 911 00 00 00 00 | m_sn            long    0        'sync
30398 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3039c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
303a0 914             | 'm_border        long    0        'left/right borders
303a0 914 00 00 00 00 | i_upporch       long    0        'up porch lines
303a4 915 00 00 00 00 | i_vsync         long    0        'vsync lines
303a8 916 00 00 00 00 | i_downporch     long    0        'down porch lines
303ac 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
303b0 918 00 00 00 00 | i_totalvis      long    0
303b4 919             | 
303b4 919             | '-------------------------------------
303b4 919             |  
303b4 919 00 00 00 00 | linenum         long    0
303b8 91a 00 00 00 00 | frames          long    0
303bc 91b 00 00 00 00 | dlinum long 0
303c0 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
303c4 91d             | 
303c4 91d 00 00 00 00 | vblankptr       long    0
303c8 91e 00 00 00 00 | modeptr         long    0
303cc 91f 00 00 00 00 | paletteptr      long    0
303d0 920 00 00 00 00 | dlptr           long    0
303d4 921 01 00 00 00 | hbase           long    1
303d8 922 00 00 00 00 | mailbox         long    0
303dc 923 00 00 00 00 | spriteptr          long 0
303e0 924             | 
303e0 924 00 00 00 00 | cmd             long    0
303e4 925 00 B0 07 00 | buf1            long    $80000-16384-4096
303e8 926 00 04 00 00 | buf2            long    1024
303ec 927 01 00 00 00 | dlptr2          long    1
303f0 928 01 00 00 00 | dl              long    1
303f4 929             | 
303f4 929 00 00 00 00 | buf1c long 0
303f8 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
303fc 92b 01 00 00 00 | framebuf2       long    1
30400 92c 01 00 00 00 | hsync0          long    1
30404 92d 01 00 00 00 | hsync1          long    1
30408 92e             | 
30408 92e 01 00 00 00 | t1              long    1
3040c 92f 00 00 00 00 | t2 long 0
30410 930 00 00 00 00 | t3 long 0
30414 931 00 00 00 00 | t4 long 0
30418 932             | 
30418 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3041c 933 00 00 00 00 | rcnt2           long    0
30420 934 00 00 00 00 | rcnt2a          long    0
30424 935 00 00 00 00 | roffset         long    0
30428 936 00 00 00 00 | rdl             long    0  'dl repeat line
3042c 937 00 00 00 00 | dlc             long    0  'dl command
30430 938             | 
30430 938 FF FF FF FF | affffffff       long    $ffffffff
30434 939 00 00 00 00 | sprite1pointer long 0
30438 93a 00 00 00 00 | sprite1xy      long 0
3043c 93b 00 00 00 00 | sprite1wh      long 0
30440 93c 00 00 00 00 | sprite2pointer long 0
30444 93d 00 00 00 00 | sprite2xy      long 0
30448 93e 00 00 00 00 | sprite2wh      long 0
3044c 93f 00 00 00 00 | sprite3pointer long 0
30450 940 00 00 00 00 | sprite3xy      long 0
30454 941 00 00 00 00 | sprite3wh      long 0
30458 942 00 00 00 00 | sprite4pointer long 0
3045c 943 00 00 00 00 | sprite4xy      long 0
30460 944 00 00 00 00 | sprite4wh      long 0
30464 945 00 00 00 00 | sprite5pointer long 0
30468 946 00 00 00 00 | sprite5xy      long 0
3046c 947 00 00 00 00 | sprite5wh      long 0
30470 948 00 00 00 00 | sprite6pointer long 0
30474 949 00 00 00 00 | sprite6xy      long 0
30478 94a 00 00 00 00 | sprite6wh      long 0
3047c 94b 00 00 00 00 | sprite7pointer long 0
30480 94c 00 00 00 00 | sprite7xy      long 0
30484 94d 00 00 00 00 | sprite7wh      long 0
30488 94e 00 00 00 00 | sprite8pointer long 0
3048c 94f 00 00 00 00 | sprite8xy      long 0
30490 950 00 00 00 00 | sprite8wh      long 0
30494 951 00 00 00 00 | sprite9pointer long 0
30498 952 00 00 00 00 | sprite9xy      long 0
3049c 953 00 00 00 00 | sprite9wh      long 0
304a0 954 00 00 00 00 | sprite10pointer long 0
304a4 955 00 00 00 00 | sprite10xy      long 0
304a8 956 00 00 00 00 | sprite10wh      long 0
304ac 957 00 00 00 00 | sprite11pointer long 0
304b0 958 00 00 00 00 | sprite11xy      long 0
304b4 959 00 00 00 00 | sprite11wh      long 0
304b8 95a 00 00 00 00 | sprite12pointer long 0
304bc 95b 00 00 00 00 | sprite12xy      long 0
304c0 95c 00 00 00 00 | sprite12wh      long 0
304c4 95d 00 00 00 00 | sprite13pointer long 0
304c8 95e 00 00 00 00 | sprite13xy      long 0
304cc 95f 00 00 00 00 | sprite13wh      long 0
304d0 960 00 00 00 00 | sprite14pointer long 0
304d4 961 00 00 00 00 | sprite14xy      long 0
304d8 962 00 00 00 00 | sprite14wh      long 0
304dc 963 00 00 00 00 | sprite15pointer long 0
304e0 964 00 00 00 00 | sprite15xy      long 0
304e4 965 00 00 00 00 | sprite15wh      long 0
304e8 966 00 00 00 00 | sprite16pointer long 0
304ec 967 00 00 00 00 | sprite16xy      long 0
304f0 968 00 00 00 00 | sprite16wh      long 0
304f4 969 00 00 00 00 | sprite17pointer long 0
304f8 96a 00 00 00 00 | sprite17xy      long 0
304fc 96b 00 00 00 00 | sprite17wh      long 0
30500 96c 00 00 00 00 | sprite18pointer long 0
30504 96d 00 00 00 00 | sprite18xy      long 0
30508 96e 00 00 00 00 | sprite18wh      long 0
3050c 96f 00 00 00 00 | spritenum long 0
30510 970             | 
30510 970 00 00 00 00 | spriteline long 0
30514 971 84 03 00 00 | sprite_x long 900
30518 972 00 00 00 00 | sprite_y long 0
3051c 973 10 00 00 00 | sprite_w long 16
30520 974 40 00 00 00 | sprite_h long 64
30524 975 00 00 00 00 | l2 long 0
30528 976 00 00 00 00 | t5 long 0
3052c 977 00 00 00 00 | t6 long 0
30530 978 00 00 00 00 | t7 long 0
30534 979 00 00 00 00 | t8 long 0
30538 97a 00 00 00 00 | t9 long 0
3053c 97b 00 00 00 00 | preloadaddr long 0
30540 97c 00 00 00 00 | preloadlineaddr long 0
30544 97d 00 04 00 00 | a1024 long 1024
30548 97e             | 
30548 97e E0 03 00 00 | aa long 992
3054c 97f FF 03 00 00 | a1023 long 1023
30550 980 00 10 00 00 | a4096 long 4096
30554 981             |  fit 368
30554 981             | _psram_spin2_dat_
30554 981 00 00 00 00 
      ...             
3064c 9bf 00 00 00 00 
30650 9c0 00 00 00 00 |     listdata long 0[8*8]
30654 9c1             |             orgh
30654                 | 
30654                 | ' driver state
30654     FF FF FF FF | drivercog   long    -1  ' COG id of driver
30658     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3065c                 | 
3065c                 | ' delay profile
3065c     07 00 00 00 
30660     00 CF 7B 05 
30664     80 D1 F0 08 
30668     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3066c     80 C4 60 0F 
30670     80 39 7A 12 
30674     40 2D D9 13 
30678     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3067c                 | 
3067c                 | ' data to be passed to driver when starting it
3067c                 | startupData
3067c     00 00 00 00 |     long    0           ' current frequency
30680     00 00 00 00 |     long    FLAGS       ' optional flags for driver
30684     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
30688     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3068c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
30690     9C 06 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
30694     1C 07 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
30698     3C 07 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3069c                 | 
3069c                 | ' data for memory
3069c                 | deviceData
3069c                 |     ' 16 bank parameters follow (16MB per bank)
3069c     00 00 00 00 
      ...             
306d4     00 00 00 00 
306d8     00 00 00 00 |     long    0[16]                               ' banks 0-15
306dc                 |     ' 16 banks of pin parameters follow
306dc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
306e0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
306e4     FF FF FF FF 
      ...             
30714     FF FF FF FF 
30718     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3071c                 | 
3071c                 | ' data for COG polling
3071c                 | qosData 
3071c     00 00 FF FF 
30720     00 00 FF FF 
30724     00 00 FF FF 
30728     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3072c     00 00 FF FF 
30730     00 00 FF FF 
30734     00 00 FF FF 
30738     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3073c                 |     
3073c                 | ' mailbox storage
3073c                 | 
3073c                 | mailboxes
3073c     00 00 00 00 
      ...             
30794     00 00 00 00 
30798     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3079c                 | 	alignl
3079c                 | _psram16drv_spin2_dat_
3079c                 |                             orgh
3079c     00 00 00 00 
      ...             
307b4     00 00 00 00 
307b8     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
307bc                 | 
307bc                 | driver_start
307bc                 |                             org
307bc 000             | '..................................................................................................
307bc 000             | ' Memory layout for COG RAM once operational:
307bc 000             | '
307bc 000             | '  COG RAM address      Usage
307bc 000             | '  ---------------      ----
307bc 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
307bc 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
307bc 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
307bc 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
307bc 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
307bc 000             | '  ~$198-$1F3           State and register variables
307bc 000             | '
307bc 000             | ' Also during driver COG startup:
307bc 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
307bc 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
307bc 000             | '..................................................................................................
307bc 000             |                             
307bc 000             | ' Mailbox storage after vector initialization
307bc 000             | 
307bc 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
307c0 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
307c4 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
307c8 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
307cc 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
307d0 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
307d4 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
307d8 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
307dc 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
307e0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
307e4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
307e8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
307ec 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
307f0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
307f4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
307f8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
307fc 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
30800 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
30804 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
30808 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3080c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
30810 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
30814 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
30818 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3081c 018             | 
3081c 018             | ' Mailbox parameter addresses per COG once patched
3081c 018             |                             
3081c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
30820 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
30824 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
30828 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3082c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
30830 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
30834 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
30838 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3083c 020             | 
3083c 020             | '..................................................................................................
3083c 020             | ' Per COG request and state setup and service branching
3083c 020             |         
3083c 020             | cog0                 
3083c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
30840 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
30844 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
30848 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3084c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
30850 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
30854 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
30858 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3085c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
30860 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
30864 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
30868 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3086c 02c             | cog1                        
3086c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
30870 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
30874 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
30878 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3087c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
30880 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
30884 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
30888 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3088c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
30890 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
30894 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
30898 037 33 CA 63 FD |                             execf   request-0               'jump to service
3089c 038             | cog2                         
3089c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
308a0 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
308a4 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
308a8 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
308ac 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
308b0 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
308b4 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
308b8 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
308bc 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
308c0 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
308c4 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
308c8 043 33 CA 63 FD |                             execf   request-0               'jump to service
308cc 044             | cog3                        
308cc 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
308d0 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
308d4 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
308d8 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
308dc 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
308e0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
308e4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
308e8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
308ec 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
308f0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
308f4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
308f8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
308fc 050             | cog4                        
308fc 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
30900 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
30904 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
30908 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3090c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
30910 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
30914 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
30918 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3091c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
30920 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
30924 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
30928 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3092c 05c             | cog5                        
3092c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
30930 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
30934 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
30938 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3093c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
30940 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
30944 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
30948 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3094c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
30950 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
30954 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
30958 067 33 CA 63 FD |                             execf   request-0               'jump to service
3095c 068             | cog6                        
3095c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
30960 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
30964 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
30968 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3096c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
30970 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
30974 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
30978 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3097c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
30980 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
30984 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
30988 073 33 CA 63 FD |                             execf   request-0               'jump to service
3098c 074             | cog7                        
3098c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
30990 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
30994 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
30998 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3099c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
309a0 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
309a4 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
309a8 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
309ac 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
309b0 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
309b4 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
309b8 07f 33 CA 63 FD |                             execf   request-0               'jump to service
309bc 080             |                             fit     128
309bc 080             | 
309bc 080             |                             fit     128
309bc 080             | pad                         long    0[128-$]                'align init code to $80
309bc 080             | 
309bc 080             | '..................................................................................................
309bc 080             | 
309bc 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
309bc 080             | 
309bc 080             | init                        
309bc 080             |                             ' get driver scratch long address in hub
309bc 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
309c0 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
309c4 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
309c8 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
309cc 084             |                     
309cc 084             |                             ' read in the additional LUT RAM code
309cc 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
309d0 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
309d4 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
309d8 087             | 
309d8 087             |                             ' read the startup parameters
309d8 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
309dc 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
309e0 089             | 
309e0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
309e0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
309e4 08a             | 
309e4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
309e8 08b 01 00 00 5F 
309ec 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
309f0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
309f4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
309f8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
309fc 090             | 
309fc 090             |                             ' setup data pin modes and data bus pin group in streamer commands
309fc 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
30a00 091 01 00 00 FF 
30a04 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
30a08 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
30a0c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
30a10 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
30a14 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
30a18 097 08 DE 47 F5 |                             or      a, #8
30a1c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
30a20 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
30a24 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
30a28 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
30a2c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
30a30 09d 01 DE 07 F1 |                             add     a, #1
30a34 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
30a38 09f             |  
30a38 09f             |                             ' setup device control pin states
30a38 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
30a3c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
30a40 0a1 01 00 00 FF 
30a44 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
30a48 0a3             | 
30a48 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
30a4c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
30a50 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
30a54 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
30a58 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
30a5c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
30a60 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
30a64 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
30a68 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
30a6c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
30a70 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
30a74 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
30a78 0af             | pinloop
30a78 0af             |                             ' generate minimum CE high time before access
30a78 0af A1 07 00 FF 
30a7c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
30a80 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
30a84 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
30a88 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
30a8c 0b4 1F DE 63 FD |                             waitx   a                       'delay
30a90 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
30a94 0b6             | 
30a94 0b6             |                             ' setup the COG mailboxes and addresses 
30a94 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
30a98 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
30a9c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
30aa0 0b9             | 
30aa0 0b9 28 2E 64 FD |                             setq    #24-1
30aa4 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
30aa8 0bb             | 
30aa8 0bb             |                             ' setup the polling loop for active COGs 
30aa8 0bb 01 C2 63 FD |                             cogid   id
30aac 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
30ab0 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
30ab4 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
30ab8 0bf 0A F0 07 F6 |                             mov     ptra, #10
30abc 0c0 E1 F1 03 FA |                             mul     ptra, id
30ac0 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
30ac4 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
30ac8 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
30acc 0c4 03 C2 07 FA |                             mul     id, #3
30ad0 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
30ad4 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
30ad8 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
30adc 0c8 D8 01 B0 FD |                             call    #reloadcogs
30ae0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
30ae4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
30ae8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
30ae8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
30aec 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
30af0 0cd 08 04 DC FC |                             rep     #2, #8
30af4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
30af8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
30afc 0d0             | 
30afc 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
30afc 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
30afc 0d0 01 C2 63 FD |                             cogid   id
30b00 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
30b04 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
30b08 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
30b0c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
30b10 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
30b14 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
30b18 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
30b1c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
30b20 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
30b24 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
30b28 0db 3F E4 A7 F9 |                             alti    d, #%111_111
30b2c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
30b30 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
30b34 0de A5 E5 03 F1 |                             add     d, const512
30b38 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
30b3c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
30b40 0e1 00 00 00 F6 |                             mov     0-0, 0-0
30b44 0e2             |                             
30b44 0e2             |                             ' setup register values for control vector loop setup after we return
30b44 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
30b48 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
30b4c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
30b50 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
30b54 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
30b58 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
30b5c 0e8 D0 C3 8F F9 |                             altd    id, #id0
30b60 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
30b64 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
30b68 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
30b6c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
30b70 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
30b74 0ee             |  
30b74 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
30b78 0ef 07 CA 07 F5 |                             and     request, #7
30b7c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
30b80 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
30b84 0f2             |                             fit     $100                    'ensure all init code fits this space
30b84 0f2             | 
30b84 0f2             |                             fit     $100                    'ensure all init code fits this space
30b84 0f2             | 
30b84 0f2 00 00 00 00 
      ...             
30bb4 0fe 00 00 00 00 
30bb8 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
30bbc 100             | 
30bbc 100             | '..................................................................................................
30bbc 100             | ' Error result handling and COG notification of request completion
30bbc 100             | 
30bbc 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
30bc0 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
30bc4 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
30bc8 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
30bcc 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
30bd0 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
30bd4 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
30bd8 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
30bdc 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
30be0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
30be4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
30be8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
30bec 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
30bf0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
30bf4 10e             | ' Poller re-starts here after a COG is serviced
30bf4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
30bf8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
30bfc 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
30c00 111             | ' Main dynamic polling loop repeats until a request arrives
30c00 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
30c04 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
30c08 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
30c0c 114             | 
30c0c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
30c10 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
30c14 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
30c18 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
30c1c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
30c20 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
30c24 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
30c28 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
30c2c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
30c30 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
30c34 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
30c38 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
30c3c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
30c40 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
30c44 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
30c48 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
30c4c 124             | 
30c4c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
30c50 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
30c54 126             |  
30c54 126             | '..................................................................................................
30c54 126             | ' List handler                               
30c54 126             | 
30c54 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
30c58 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
30c5c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
30c60 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
30c64 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
30c68 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
30c6c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
30c70 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
30c74 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
30c78 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
30c7c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
30c80 131 33 00 60 FD |                             execf   0-0                     'process the request 
30c84 132             | 
30c84 132             | '..................................................................................................
30c84 132             | ' Restoring per COG state and resuming where we left off
30c84 132             | 
30c84 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
30c88 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
30c8c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
30c90 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
30c94 136 D8 CB FB F8 |                             getbyte request, addr1, #3
30c98 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
30c9c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
30ca0 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
30ca4 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
30ca8 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
30cac 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
30cb0 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
30cb4 13e             |                    
30cb4 13e             | '..................................................................................................
30cb4 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
30cb4 13e             | 
30cb4 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
30cb8 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
30cbc 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
30cc0 141 D0 DF B7 F9 |                             setd    a, #id0
30cc4 142 D8 DF BF F9 |                             sets    a, #addr1
30cc8 143 FE FF FF FF 
30ccc 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
30cd0 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
30cd4 146 3F DE A7 F9 |                             alti    a, #%111_111 
30cd8 147 00 00 F0 F9 |                             muxq    0-0, 0-0
30cdc 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
30ce0 149 01 E2 63 FD |                             cogid   c
30ce4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
30ce8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
30cec 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
30cf0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
30cf4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
30cf8 14f 00 E0 03 F6 |                             mov     b, 0-0
30cfc 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
30d00 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
30d04 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
30d08 153 0C 00 90 AD |             if_z            jmp     #excluded               
30d0c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
30d10 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
30d14 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
30d18 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
30d1c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
30d20 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
30d24 15a             | 
30d24 15a             | 'determine priority cogs and build instructions for the polling sequence
30d24 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
30d28 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
30d2c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
30d30 15d             | 
30d30 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
30d34 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
30d38 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
30d3c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
30d40 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
30d44 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
30d48 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
30d4c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
30d50 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
30d54 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
30d58 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
30d5c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
30d60 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
30d64 16a             | endprioloop
30d64 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
30d68 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
30d6c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
30d70 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
30d74 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
30d78 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
30d7c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
30d80 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
30d84 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
30d88 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
30d8c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
30d90 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
30d94 176             | 
30d94 176             | ' populate the round robin COG polling instructions
30d94 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
30d98 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
30d9c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
30da0 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
30da4 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
30da8 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
30dac 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
30db0 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
30db4 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
30db8 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
30dbc 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
30dc0 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
30dc4 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
30dc8 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
30dcc 184             | '..................................................................................................
30dcc 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
30dcc 184             | 
30dcc 184             | set_latency                                                 '            (a) set latency
30dcc 184             | get_latency                                                 '            (b) get latency
30dcc 184             | set_burst                                                   '            (c) set burst size of bank
30dcc 184             | get_burst                                                   '            (d) get burst size of bank
30dcc 184             |                                                             '            (e) dump state
30dcc 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
30dd0 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
30dd4 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
30dd8 187             |                                                             ' | | | | e  account for following AUGS
30dd8 187 04 00 00 FF 
30ddc 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
30de0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
30de4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
30de8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
30dec 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
30df0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
30df4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
30df8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
30dfc 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
30e00 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
30e04 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
30e08 193             | 
30e08 193             | '..................................................................................................
30e08 193             | ' Misc EXECF code
30e08 193             | 
30e08 193 33 72 63 FD | start_read_exec             execf   newburstr
30e0c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
30e10 195 33 78 63 FD | continue_read_exec          execf   lockedreads
30e14 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
30e18 197             | 
30e18 197             | '..................................................................................................
30e18 197             | ' Variables
30e18 197             | 
30e18 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
30e1c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
30e20 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
30e24 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
30e28 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
30e2c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
30e30 19d             | 
30e30 19d 00 00 00 80 | xfreq1          long    $80000000
30e34 19e 00 00 00 40 | xfreq2          long    $40000000
30e38 19f 03 00 00 00 | delay           long    3
30e3c 1a0             | 
30e3c 1a0             | lutcodeaddr                 
30e3c 1a0             | startupparams
30e3c 1a0             | excludedcogs                                    'careful: shared register use!
30e3c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
30e40 1a1 00 00 00 00 | flags           long    0
30e44 1a2             | mask                                            'careful: shared register use!
30e44 1a2 00 00 00 00 | resetmaskA      long    0
30e48 1a3             | limit                                           'careful: shared register use!
30e48 1a3 00 00 00 00 | resetmaskB      long    0
30e4c 1a4 00 00 00 00 | datapins        long    0
30e50 1a5             | const512                                        'careful: shared register use!
30e50 1a5 00 00 00 00 | devicelist      long    0
30e54 1a6 00 00 00 00 | coglist         long    0
30e58 1a7 00 00 00 00 | mbox            long    0 
30e5c 1a8             | 
30e5c 1a8             | clkpin                                          'shared with code patched during init
30e5c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
30e60 1a9             | cspin                                           'shared with code patched during init
30e60 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
30e64 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
30e68 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
30e6c 1ac 01 00 00 00 | clkdelay        long    1
30e70 1ad 00 00 00 00 | regdatabus      long    0
30e74 1ae             | 
30e74 1ae 10 00 00 00 | deviceaddr      long    $10
30e78 1af             | rrcounter
30e78 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
30e7c 1b0             | 
30e7c 1b0             | ' jump addresses for the per COG handlers
30e7c 1b0 20 00 00 00 | cog0_handler    long    cog0
30e80 1b1 2C 00 00 00 | cog1_handler    long    cog1
30e84 1b2 38 00 00 00 | cog2_handler    long    cog2
30e88 1b3 44 00 00 00 | cog3_handler    long    cog3
30e8c 1b4 50 00 00 00 | cog4_handler    long    cog4
30e90 1b5 5C 00 00 00 | cog5_handler    long    cog5
30e94 1b6 68 00 00 00 | cog6_handler    long    cog6
30e98 1b7 74 00 00 00 | cog7_handler    long    cog7
30e9c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
30ea0 1b9             | 
30ea0 1b9             | ' EXECF sequences
30ea0 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
30ea4 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
30ea8 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
30eac 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
30eb0 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
30eb4 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
30eb8 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
30ebc 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
30ebc 1c0             | 
30ebc 1c0             | 
30ebc 1c0             | ' SKIPF sequences
30ebc 1c0             | skiptable
30ebc 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
30ec0 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
30ec4 1c2 00 00 00 00 |                 long    0                      ' read modify write long
30ec8 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
30ecc 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
30ed0 1c5 00 00 00 00 | pattern2        long    0
30ed4 1c6 00 00 00 00 | pattern3        long    0
30ed8 1c7 77 02 00 00 | singlelong      long    %1001110111  
30edc 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
30ee0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
30ee4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
30ee8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
30eec 1cc             | 
30eec 1cc             | ' LUT RAM address values
30eec 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
30ef0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
30ef4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
30ef8 1cf F6 02 00 00 | noread          long    noread_lut
30efc 1d0             | 
30efc 1d0 00 00 00 00 | id0             long    0
30f00 1d1 01 00 00 00 | id1             long    1
30f04 1d2 02 00 00 00 | id2             long    2
30f08 1d3 03 00 00 00 | id3             long    3
30f0c 1d4 04 00 00 00 | id4             long    4
30f10 1d5 05 00 00 00 | id5             long    5
30f14 1d6 06 00 00 00 | id6             long    6
30f18 1d7 07 00 00 00 | id7             long    7
30f1c 1d8             | 
30f1c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
30f1c 1d8             | 'and COG updates and need to follow immediately after id0-id7
30f1c 1d8 00 00 00 00 | addr1           long    0
30f20 1d9 00 00 00 00 | hubdata         long    0
30f24 1da 00 00 00 00 | count           long    0
30f28 1db 00 00 00 00 | addr2           long    0
30f2c 1dc 00 00 00 00 | total           long    0
30f30 1dd 00 00 00 00 | offset1         long    0
30f34 1de 00 00 00 00 | offset2         long    0
30f38 1df 00 00 00 00 | link            long    0
30f3c 1e0             | 
30f3c 1e0             | burstwrite                                      'note shared register use during init
30f3c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
30f40 1e1 00 00 00 00 | id              long    0
30f44 1e2             | 
30f44 1e2 00 00 00 00 | header          long    0
30f48 1e3 00 00 00 00 | trailer         long    0
30f4c 1e4 00 00 00 00 | cmdaddr         long    0
30f50 1e5 00 00 00 00 | request         long    0
30f54 1e6 00 00 00 00 | rrlimit         long    0
30f58 1e7 00 00 00 00 | pinconfig       long    0
30f5c 1e8 00 00 00 00 | clks            long    0
30f60 1e9 00 00 00 00 | resume          long    0
30f64 1ea 00 00 00 00 | orighubsize     long    0
30f68 1eb 00 00 00 00 | wrclks          long    0
30f6c 1ec             | 
30f6c 1ec 00 00 00 00 | pattern         long    0
30f70 1ed 00 00 00 00 | hubscratch      long    0
30f74 1ee 00 10 00 00 | val4k           long    4096
30f78 1ef             | 
30f78 1ef             | ' temporary general purpose regs
30f78 1ef 00 00 00 00 | a               long    0
30f7c 1f0 00 00 00 00 | b               long    0
30f80 1f1 00 00 00 00 | c               long    0
30f84 1f2 00 00 00 00 | d               long    0
30f88 1f3             |                 fit     502
30f88 1f3             | 
30f88 1f3             |                 fit     502
30f88 1f3             | 
30f88 1f3             | '..................................................................................................
30f88 1f3             | 
30f88 1f3             |             orgh
30f88                 | 
30f88                 | lut_code
30f88                 | 'HW init code up to 80 longs
30f88                 | 
30f88                 | '..................................................................................................
30f88                 | ' Memory layout for LUT RAM once operational:
30f88                 | '
30f88                 | '  LUT RAM address      Usage
30f88                 | '  ---------------      ----
30f88                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
30f88                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
30f88                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
30f88                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
30f88                 | '
30f88                 | ' Also during driver COG startup:
30f88                 | ' $230-$24F is used for HW init setup
30f88                 | ' $250-$26F is used as temporary vector storage 
30f88                 | '..................................................................................................
30f88                 | 
30f88                 |                 org $230    
30f88 230             | 
30f88 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
30f88 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
30f8c 231 24 16 60 FD |                             pollxfi
30f90 232 FF AA 2A FF 
30f94 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
30f98 234 28 00 B0 FD |                             call    #sendqspi
30f9c 235 07 F8 07 FF 
30fa0 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
30fa4 237 28 00 B0 FD |                             call    #sendspi
30fa8 238 F8 07 78 FF 
30fac 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
30fb0 23a 1C 00 B0 FD |                             call    #sendspi
30fb4 23b 7F 78 78 FF 
30fb8 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
30fbc 23d 10 00 B0 FD |                             call    #sendspi 
30fc0 23e 2D 00 64 FD |                             ret
30fc4 23f             | 
30fc4 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
30fc8 240 32 0C 64 FD |                             skipf   #%110
30fcc 241 9C EF 03 F6 |                             mov     pb, xsendimm
30fd0 242             | 
30fd0 242 10 D0 07 F6 | sendspi                     mov     clks, #16
30fd4 243 97 EF 03 F6 |                             mov     pb, ximm8lut
30fd8 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
30fdc 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
30fe0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
30fe4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
30fe8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
30fec 249 50 48 63 FD |                             fltl    datapins                'float data bus
30ff0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
30ff4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
30ff8 24c             | 
30ff8 24c 00 00 00 00 
30ffc 24d 00 00 00 00 
31000 24e 00 00 00 00 
31004 24f 00 00 00 00 |                 long    0[$270-32-$]
31008 250             |                 fit     $270-32  ' keep room for 32 vector longs
31008 250             |     
31008 250             |                 fit     $270-32  ' keep room for 32 vector longs
31008 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
31008 250             | rw_vect ' PSRAM jump vectors
31008 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3100c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
31010 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
31014 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
31018 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3101c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
31020 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
31024 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
31028 258             | ro_vect ' R/O PSRAM jump vectors
31028 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3102c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
31030 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
31034 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
31038 25c 00 01 00 00 |                 long    unsupported
3103c 25d 00 01 00 00 |                 long    unsupported
31040 25e 00 01 00 00 |                 long    unsupported
31044 25f 00 01 00 00 |                 long    unsupported
31048 260             | ctrl_vect ' Control jump vectors
31048 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3104c 261 00 01 00 00 |                 long    unsupported
31050 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
31054 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
31058 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3105c 265 00 01 00 00 |                 long    unsupported
31060 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
31064 267 3E 01 00 00 |                 long    reconfig 
31068 268             | no_vect ' Invalid bank jump vectors
31068 268 01 01 00 00 |                 long    invalidbank
3106c 269 01 01 00 00 |                 long    invalidbank
31070 26a 01 01 00 00 |                 long    invalidbank
31074 26b 01 01 00 00 |                 long    invalidbank
31078 26c 01 01 00 00 |                 long    invalidbank
3107c 26d 01 01 00 00 |                 long    invalidbank
31080 26e 01 01 00 00 |                 long    invalidbank
31084 26f 01 01 00 00 |                 long    invalidbank
31088 270             |                 fit     $270
31088 270             | 
31088 270             |                 fit     $270
31088 270             | '..................................................................................................
31088 270             | ' PSRAM READS
31088 270             |                                                             ' a b c d e f
31088 270             |                                                             ' B W L B R L  (a) byte read
31088 270             |                                                             ' Y O O U E O  (b) word read
31088 270             |                                                             ' T R N R S C  (c) long read
31088 270             |                                                             ' E D G S U K  (d) new burst read
31088 270             |                                                             '       T M E  (e) resumed sub-burst
31088 270             |                                                             '         E D  (f) locked sub-burst
31088 270             | 
31088 270             | 
31088 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3108c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
31090 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
31094 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
31098 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3109c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
310a0 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
310a4 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
310a8 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
310ac 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
310b0 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
310b4 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
310b8 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
310bc 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
310c0 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
310c4 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
310c8 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
310cc 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
310d0 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
310d4 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
310d8 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
310dc 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
310e0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
310e4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
310e8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
310ec 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
310f0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
310f4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
310f8 28c             | 
310f8 28c             |                             ' fall through to read bursts
310f8 28c             |                         
310f8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
310f8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
310fc 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
31100 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
31104 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
31108 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3110c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
31110 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
31114 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
31118 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3111c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
31120 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
31124 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
31128 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3112c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
31130 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
31134 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
31138 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3113c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
31140 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
31144 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
31148 2a0 E8 D1 03 F1 |                             add     clks, clks
3114c 2a1             | readcommon
3114c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
31150 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
31154 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
31158 2a4             | 
31158 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3115c 2a5 69 C8 63 FD |                             rev     cmdaddr
31160 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
31164 2a7 61 C8 63 FD |                             mergeb  cmdaddr
31168 2a8             | 
31168 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3116c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
31170 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
31170 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
31174 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
31178 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3117c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
31180 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
31180 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
31184 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
31188 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3118c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
31190 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
31194 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
31198 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
31198 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3119c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
311a0 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
311a4 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
311a8 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
311ac 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
311b0 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
311b4 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
311b8 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
311bc 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
311c0 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
311c4 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
311c8 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
311cc 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
311d0 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
311d0 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
311d4 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
311d8 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
311dc 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
311e0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
311e4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
311e8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
311ec 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
311f0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
311f4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
311f8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
311fc 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
31200 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
31204 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
31208 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3120c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
31210 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
31214 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
31218 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3121c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
31220 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
31224 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
31228 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3122c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
31230 2da 10 03 90 FD |                             jmp     #writecommon
31234 2db             | 
31234 2db             | '..................................................................................................
31234 2db             | ' Burst continuation testing
31234 2db             | 
31234 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
31238 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3123c 2dd             | continue_read_lut          
3123c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
31240 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
31244 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
31248 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3124c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
31250 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
31254 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
31258 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3125c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
31260 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
31264 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
31268 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3126c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
31270 2ea             | 
31270 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
31274 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
31278 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3127c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
31280 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
31284 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
31288 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3128c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
31290 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
31294 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
31298 2f4 2A 1C 66 0D |             _ret_           push    #poller
3129c 2f5             | 
3129c 2f5             | 
3129c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
312a0 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
312a0 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
312a4 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
312a8 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
312ac 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
312b0 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
312b4 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
312b8 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
312bc 2fd 2D 00 64 FD |                             ret                             ' | continue processing
312c0 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
312c4 2ff             | '..................................................................................................
312c4 2ff             | ' Completion of requests
312c4 2ff             | 
312c4 2ff             | complete_rw_lut             
312c4 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
312c8 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
312cc 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
312d0 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
312d4 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
312d8 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
312dc 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
312e0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
312e4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
312e8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
312ec 309 32 62 64 AD |             if_z            skipf   #%110001
312f0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
312f4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
312f8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
312fc 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
31300 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
31304 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
31308 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3130c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
31310 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
31314 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
31318 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3131c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
31320 316             |                                                             ' skipcase (a) gfx copy to/from hub
31320 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
31320 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
31320 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
31324 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
31328 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3132c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
31330 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
31334 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
31338 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3133c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
31340 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
31344 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
31348 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3134c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
31350 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
31354 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
31358 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3135c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
31360 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
31364 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
31368 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3136c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
31370 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
31374 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
31378 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3137c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
31380 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
31384 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
31388 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3138c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
31390 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
31394 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
31398 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3139c 335 DF B7 03 A6 |             if_z            mov     addr2, link
313a0 336 34 FF 9F AD |             if_z            jmp     #checknext
313a4 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
313a8 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
313ac 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
313b0 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
313b4 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
313b8 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
313bc 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
313c0 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
313c4 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
313c8 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
313cc 341             | 
313cc 341             | '..................................................................................................
313cc 341             | ' PSRAM WRITES
313cc 341             |                                                             '  a b c d e f g h
313cc 341             | 
313cc 341             |                                                             '  B W L F B R L L (a) byte write(s)
313cc 341             |                                                             '  Y O O I U E O O (b) word write(s)
313cc 341             |                                                             '  T R N L R S C C (c) long write(s)
313cc 341             |                                                             '  E D G L S U K K (d) resumed fill
313cc 341             |                                                             '          T M E E (e) new burst write
313cc 341             |                                                             '            E D D (f) resumed burst
313cc 341             |                                                             '              F B (g) locked fill
313cc 341             |                                                             '              I U (h) locked burst write
313cc 341             |                                                             '              L R 
313cc 341             |                                                             '              L S 
313cc 341             |                                                             '                T 
313cc 341             | 
313cc 341             | w_single                   
313cc 341             | w_fill_cont           
313cc 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
313d0 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
313d4 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
313d8 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
313dc 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
313e0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
313e4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
313e8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
313ec 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
313f0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
313f4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
313f8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
313fc 34d             |                ' disable call to r_resume_burst for single longs when z=0
313fc 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
31400 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
31404 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
31408 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3140c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
31410 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
31414 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
31418 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3141c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
31420 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
31424 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
31428 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3142c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
31430 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
31434 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
31438 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3143c 35d             |         
3143c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3143c 35d             |             '
3143c 35d             |             '  At least one of these 3 optional components will be sent
3143c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3143c 35d             |             '     body - N x full longs of data
3143c 35d             |             '     trailer - last partial long of data
3143c 35d             |             '
3143c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3143c 35d             |             '
3143c 35d             |             'Case    Type                           Sends
3143c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3143c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3143c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3143c 35d             |             ' 4)     Multiple long fill             body only
3143c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3143c 35d             | 
3143c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3143c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
31440 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
31444 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
31448 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3144c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
31450 362 13 8C 07 F6 |                             mov     pattern3, #%10011
31454 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
31458 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3145c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
31460 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
31464 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
31468 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3146c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
31470 36a             |                             
31470 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
31474 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
31478 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3147c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
31480 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
31484 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
31488 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3148c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
31490 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
31494 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
31498 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3149c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
314a0 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
314a4 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
314a8 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
314ac 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
314b0 37a             | 
314b0 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
314b4 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
314b8 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
314bc 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
314c0 37e             |                  
314c0 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
314c4 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
314c8 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
314cc 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
314d0 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
314d4 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
314d8 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
314dc 385             | 
314dc 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
314e0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
314e4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
314e8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
314ec 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
314f0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
314f4 38b             | 
314f4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
314f4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
314f8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
314fc 38d 2A B0 63 FD |                             push    addr1                   'save address
31500 38e             | 
31500 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
31500 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
31504 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
31508 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3150c 391             |             
3150c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
31510 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
31514 393 2B B0 63 FD |                             pop     addr1                   'restore address
31518 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3151c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
31520 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
31524 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
31528 398             | 
31528 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3152c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
31530 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
31534 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
31538 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3153c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
31540 39e             | 
31540 39e             |                             'trailer is done
31540 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
31544 39f             | 
31544 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
31548 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3154c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
31550 3a2             | 
31550 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
31554 3a3 69 C8 63 FD |                             rev     cmdaddr                 
31558 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3155c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
31560 3a6             |                             
31560 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
31564 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
31568 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3156c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
31570 3aa             |                                                          
31570 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
31574 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
31578 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3157c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
31580 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
31584 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
31588 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3158c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
31590 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
31594 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
31598 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3159c 3b5             |  
3159c 3b5 59 52 63 FD |                             drvh    cspin
315a0 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
315a4 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
315a8 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
315ac 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
315b0 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
315b4 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
315b8 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
315bc 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
315c0 3be EA E5 03 F6 |                             mov     d, orighubsize
315c4 3bf EF E5 63 F0 |                             shl     d, a
315c8 3c0 F2 E3 83 F1 |                             sub     c, d
315cc 3c1 DD E3 03 F1 |                             add     c, offset1
315d0 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
315d4 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
315d8 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
315dc 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
315e0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
315e4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
315e8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
315ec 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
315f0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
315f4 3cb BB D3 03 F6 |                             mov     resume, restorefill
315f8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
315fc 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
31600 3ce 6C FC BF CD |             if_c            call    #yield
31604 3cf 2D 00 64 FD |                             ret
31608 3d0             |                            
31608 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
31608 3d0             |                       '     rczl    pa                      'rotate left into address offset
31608 3d0             |                       '     rczl    c wcz                   'restore count and flags
31608 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3160c 3d1 02 EC 67 F0 |                             shl     pa, #2
31610 3d2 28 06 64 AD |             if_z            setq    #3
31614 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
31618 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3161c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
31620 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
31624 3d7             | 
31624 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
31628 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3162c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
31630 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
31634 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
31638 3dc             |                 fit 1024-32
31638 3dc             |         
31638 3dc             | 
31638 3dc             | '..................................................................................................
31638 3dc             | 
31638 3dc             |                 fit 1024-32
31638 3dc 00 00 00 00 
3163c 3dd 00 00 00 00 
31640 3de 00 00 00 00 
31644 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
31648 3e0             |                 org 1024-32
31648 000             | 
31648 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
31648 000 00 00 00 00 |                 long $0000
3164c 001 11 11 00 00 |                 long $1111
31650 002 22 22 00 00 |                 long $2222
31654 003 33 33 00 00 |                 long $3333
31658 004 44 44 00 00 |                 long $4444
3165c 005 55 55 00 00 |                 long $5555
31660 006 66 66 00 00 |                 long $6666
31664 007 77 77 00 00 |                 long $7777
31668 008 88 88 00 00 |                 long $8888
3166c 009 99 99 00 00 |                 long $9999
31670 00a AA AA 00 00 |                 long $aaaa
31674 00b BB BB 00 00 |                 long $bbbb
31678 00c CC CC 00 00 |                 long $cccc
3167c 00d DD DD 00 00 |                 long $dddd
31680 00e EE EE 00 00 |                 long $eeee
31684 00f FF FF 00 00 |                 long $ffff
31688 010             | 
31688 010             | 'masks
31688 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3168c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
31690 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
31694 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
31698 014             | 
31698 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3169c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
316a0 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
316a4 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
316a8 018             | 
316a8 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
316ac 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
316b0 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
316b4 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
316b8 01c             | 
316b8 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
316bc 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
316c0 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
316c4 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
316c8 020             |         fit 1024
316c8 020             | 
316c8 020             |         fit 1024
316c8 020             | 
316c8 020             | '--------------------------------------------------------------------------------------------------
316c8 020             |         orgh
316c8                 | 
316c8                 | gfxexpansion
316c8                 |                             'simple line drawing graphics expansion of memory driver
316c8                 |                             'jmp     #donerepeats                'just return for now
316c8                 | 
316c8     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
316cc     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
316d0     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
316d4     DD E1 03 F6 |                             mov     b, offset1              'get error term
316d8     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
316dc     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
316e0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
316e4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
316e8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
316ec     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
316f0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
316f4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
316f8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
316fc     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
31700     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
31704     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
31708     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3170c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
31710     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
31714     DC E5 33 F9 |                             getword d, total, #0            'get line width
31718     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3171c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
31720     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
31724     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
31728     C3 03 80 FD |                             jmp     #readmask               'continue filling
3172c                 | 	alignl
3172c                 | _usbnew_spin2_dat_
3172c                 |                 org     $000
3172c 000             | 
3172c 000             | usb_host_start
3172c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
31730 001             | 
31730 001 03 00 00 FF 
31734 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
31738 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3173c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
31740 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
31744 006 29 70 63 FD |                 setq2   htmp
31748 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3174c 008             | 
3174c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
31750 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
31754 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
31758 00b             | 
31758 00b             | '------------------------------------------------------------------------------
31758 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
31758 00b             | ' special because the receiving function must not respond with either STALL or
31758 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
31758 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
31758 00b             | ' corrupt packet, it must ignore the transaction
31758 00b             | '------------------------------------------------------------------------------
31758 00b             | ' On entry:
31758 00b             | '   PTRA - start address of the SETUP data struct.
31758 00b             | ' On exit:
31758 00b             | '   retval - PID_ACK on success, otherwise error code.
31758 00b             | '------------------------------------------------------------------------------
31758 00b             | txn_setup
31758 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3175c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
31760 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
31764 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
31768 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3176c 010             | .setup
3176c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
31770 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31774 012 2D 00 64 AD |         if_z    ret
31778 013 7C 0B B0 FD |                 call    #retry_wait
3177c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
31780 015 2D 00 64 AD |         if_z    ret
31784 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
31788 017 E0 FF 9F FD |                 jmp     #.setup
3178c 018             | 
3178c 018             | '------------------------------------------------------------------------------
3178c 018             | ' IN/INTERRUPT transaction.
3178c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3178c 018             | '------------------------------------------------------------------------------
3178c 018             | ' On entry:
3178c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3178c 018             | '     CRC(b19..23).
3178c 018             | ' On exit:
3178c 018             | '------------------------------------------------------------------------------
3178c 018             | txn_in
3178c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
31790 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
31794 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
31798 01b             | 
31798 01b             |                 ' Fall through to urx_packet
31798 01b             | 
31798 01b             | '------------------------------------------------------------------------------
31798 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
31798 01b             | ' received are handshakes and IN DATAx.
31798 01b             | '------------------------------------------------------------------------------
31798 01b             | ' On entry:
31798 01b             | ' On exit:
31798 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
31798 01b             | '     returned.
31798 01b             | '------------------------------------------------------------------------------
31798 01b             | urx_packet
31798 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3179c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
317a0 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
317a4 01e 1A 92 63 FD |                 getct   hct2
317a8 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
317ac 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
317b0 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
317b4 022             | .wait_sop
317b4 022 22 A7 8A FA |                 rdpin   urx, dm
317b8 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
317bc 024 08 00 90 CD |         if_c    jmp     #.get_pid
317c0 025 FC 25 CC FB |                 jnct2   #.wait_sop
317c4 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
317c8 027             | .get_pid
317c8 027 28 02 B0 FD |                 call    #urx_next
317cc 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
317d0 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
317d4 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
317d8 02b             | .chk_pid
317d8 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
317dc 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
317e0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
317e4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
317e8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
317ec 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
317f0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
317f4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
317f8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
317fc 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
31800 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
31804 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
31808 037             | .ack_resend
31808 037 22 A7 82 FA |                 rqpin   urx, dm
3180c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
31810 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
31814 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
31818 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3181c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
31820 03d             | .chk_eop
31820 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
31824 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
31828 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3182c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
31830 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
31834 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
31838 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3183c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
31840 045 2D 00 64 FD |                 ret
31844 046             | .idle
31844 046 22 A7 82 FA |                 rqpin   urx, dm
31848 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3184c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
31850 049 2D 00 64 FD |                 ret
31854 04a             | 
31854 04a             | '------------------------------------------------------------------------------
31854 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
31854 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
31854 04a             | ' if one is required.
31854 04a             | '------------------------------------------------------------------------------
31854 04a             | ' On entry:
31854 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
31854 04a             | ' On exit:
31854 04a             | '------------------------------------------------------------------------------
31854 04a             | utx_token
31854 04a 22 A7 82 FA |                 rqpin   urx, dm
31858 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3185c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
31860 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
31864 04e 34 0D B0 CD |         if_c    call    #utx_pre
31868 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3186c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
31870 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
31874 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
31878 053             | .next_byte
31878 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3187c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
31880 055             | .wait
31880 055 40 46 72 FD |                 testp   dp                      wc
31884 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
31888 057 23 03 08 FC |                 akpin   dp
3188c 058 22 A5 22 FC |                 wypin   utx, dm
31890 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
31894 05a             | 
31894 05a             | '------------------------------------------------------------------------------
31894 05a             | ' SETUP/OUT/INTERRUPT transaction.
31894 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
31894 05a             | '------------------------------------------------------------------------------
31894 05a             | ' On entry:
31894 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
31894 05a             | '     CRC(b19..23).
31894 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
31894 05a             | '   pkt_data - count of DATAx payload bytes to send.
31894 05a             | ' On exit:
31894 05a             | '------------------------------------------------------------------------------
31894 05a             | txn_out
31894 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
31898 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3189c 05c 00 00 C0 FF 
318a0 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
318a4 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
318a8 05f             | 
318a8 05f             |                 ' Fall through to utx_data
318a8 05f             | 
318a8 05f             | '------------------------------------------------------------------------------
318a8 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
318a8 05f             | ' calculated while the data byte is being shifted out. Since data stage
318a8 05f             | ' success/fail is not determined until the status stage of the transaction,
318a8 05f             | ' this routine is only concerned about the current DATAx packet.
318a8 05f             | '------------------------------------------------------------------------------
318a8 05f             | ' On entry:
318a8 05f             | '   PTRA - hub start address of the data to read.
318a8 05f             | '   pkt_cnt - data payload size.
318a8 05f             | ' On exit:
318a8 05f             | '------------------------------------------------------------------------------
318a8 05f             | utx_data
318a8 05f 22 A7 82 FA |                 rqpin   urx, dm
318ac 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
318b0 061 F4 FF 9F CD |         if_c    jmp     #utx_data
318b4 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
318b8 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
318bc 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
318c0 065 D8 0C B0 CD |         if_c    call    #utx_pre
318c4 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
318c8 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
318cc 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
318d0 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
318d4 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
318d8 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
318dc 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
318e0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
318e4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
318e8 06f             | .read_byte
318e8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
318ec 070 F0 00 B0 FD |                 call    #utx_byte
318f0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
318f4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
318f8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
318fc 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
31900 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
31904 076             | .send_crc
31904 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
31908 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3190c 078 D0 00 B0 FD |                 call    #utx_byte
31910 079 5D A5 EA F8 |                 getbyte utx, crc, #1
31914 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
31918 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3191c 07c             | 
3191c 07c             | '------------------------------------------------------------------------------
3191c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3191c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3191c 07c             | ' expects that the packet includes at least the CRC word.
3191c 07c             | '
3191c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3191c 07c             | ' was requested, which makes it difficult to determine where the data stops
3191c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3191c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3191c 07c             | ' USB-16 expected residual value of 0xB001.
3191c 07c             | '
3191c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3191c 07c             | ' so the caller can verify IN success before writing the data to its final
3191c 07c             | ' destination.
3191c 07c             | '------------------------------------------------------------------------------
3191c 07c             | ' On entry:
3191c 07c             | '   pkt_data - max byte count expected to be in the packet.
3191c 07c             | '   newb_flg - signals new byte ready when toggled.
3191c 07c             | ' On exit:
3191c 07c             | '   pkt_cnt - actual number of bytes read.
3191c 07c             | '------------------------------------------------------------------------------
3191c 07c             | urx_data
3191c 07c F7 75 03 F6 |                 mov     htmp2, pb
31920 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
31924 07e 00 00 C0 FF 
31928 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3192c 080 BA EF 03 F6 |                 mov     pb, htmp2
31930 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
31934 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
31938 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3193c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
31940 085             | .wait_byte
31940 085             | ' In-line rx for max speed
31940 085 22 A7 82 FA |                 rqpin   urx, dm
31944 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
31948 087 53 A5 02 F5 |                 and     utx, urx
3194c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
31950 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
31954 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
31958 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3195c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
31960 08d DC FF 9F FD |                 jmp     #.wait_byte
31964 08e             | .get_byte
31964 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
31968 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3196c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
31970 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
31974 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
31978 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3197c 094             | .end_crc
3197c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
31980 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
31984 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
31988 097 2D 00 64 1D |         if_a    ret
3198c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3198c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3198c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3198c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3198c 098 22 A7 82 FA |                 rqpin   urx, dm
31990 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
31994 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
31998 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
31998 09b             | .chk_crc
31998 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3199c 09c 58 00 00 FF 
319a0 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
319a4 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
319a8 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
319ac 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
319b0 0a1 34 09 B0 FD |                 call    #poll_waitx
319b4 0a2             | 
319b4 0a2             |                 ' Fall through to utx_handshake
319b4 0a2             | 
319b4 0a2             | '------------------------------------------------------------------------------
319b4 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
319b4 0a2             | ' the appropriate IP delay has been inserted.
319b4 0a2             | '------------------------------------------------------------------------------
319b4 0a2             | ' On entry:
319b4 0a2             | '   retval - handshake PID to send.
319b4 0a2             | ' On exit:
319b4 0a2             | '   retval unchanged.
319b4 0a2             | '------------------------------------------------------------------------------
319b4 0a2             | utx_handshake
319b4 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
319b8 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
319bc 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
319c0 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
319c4 0a6 5F A5 02 F6 |                 mov     utx, retval
319c8 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
319cc 0a8             | .idle
319cc 0a8 22 A7 82 FA |                 rqpin   urx, dm
319d0 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
319d4 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
319d8 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
319dc 0ac 08 09 90 FD |                 jmp     #poll_waitx
319e0 0ad             | 
319e0 0ad             | '------------------------------------------------------------------------------
319e0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
319e0 0ad             | '------------------------------------------------------------------------------
319e0 0ad             | ' On entry:
319e0 0ad             | '   utx - byte to transmit.
319e0 0ad             | ' On exit:
319e0 0ad             | '------------------------------------------------------------------------------
319e0 0ad             | utx_byte
319e0 0ad 40 46 72 FD |                 testp   dp                      wc
319e4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
319e8 0af 23 03 08 FC |                 akpin   dp
319ec 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
319f0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
319f4 0b2             | 
319f4 0b2             | '------------------------------------------------------------------------------
319f4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
319f4 0b2             | '------------------------------------------------------------------------------
319f4 0b2             | ' On entry:
319f4 0b2             | ' On exit:
319f4 0b2             | '   retval - the byte read.
319f4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
319f4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
319f4 0b2             | '     received.
319f4 0b2             | '------------------------------------------------------------------------------
319f4 0b2             | urx_next
319f4 0b2 22 A7 8A FA |                 rdpin   urx, dm
319f8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
319fc 0b4 53 A5 02 F5 |                 and     utx, urx
31a00 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
31a04 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
31a08 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
31a0c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
31a10 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
31a14 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
31a18 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
31a1c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
31a20 0bd 2D 00 64 FD |                 ret
31a24 0be             | 
31a24 0be             | '------------------------------------------------------------------------------
31a24 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
31a24 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
31a24 0be             | ' length, and the PID is not included in the CRC calculation:
31a24 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
31a24 0be             | '  CRC5  ENDP ADDRESS PID
31a24 0be             | ' %00000_1111_1111111_xxxxxxxx
31a24 0be             | '------------------------------------------------------------------------------
31a24 0be             | ' On entry:
31a24 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
31a24 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
31a24 0be             | ' On exit:
31a24 0be             | '   ep_addr_pid - CRC value appended to the packet.
31a24 0be             | '------------------------------------------------------------------------------
31a24 0be             | calc_crc5
31a24 0be FF 03 00 FF 
31a28 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
31a2c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
31a30 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
31a34 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
31a38 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
31a3c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
31a40 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
31a44 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
31a48 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
31a4c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
31a50 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
31a54 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
31a58 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
31a5c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
31a60 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
31a64 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
31a68 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
31a6c 0d0             | 
31a6c 0d0             | '------------------------------------------------------------------------------
31a6c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
31a6c 0d0             | '------------------------------------------------------------------------------
31a6c 0d0             | isr1_fsframe
31a6c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
31a70 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
31a74 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
31a78 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
31a7c 0d4             | .wait
31a7c 0d4 40 46 72 FD |                 testp   dp                      wc
31a80 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
31a84 0d6 23 03 08 FC |                 akpin   dp
31a88 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
31a8c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
31a90 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
31a94 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
31a98 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
31a9c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
31aa0 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
31aa4 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
31aa8 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
31aac 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
31ab0 0e1 2C FF BF FD |                 call    #utx_byte
31ab4 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
31ab8 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
31abc 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
31ac0 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
31ac4 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
31ac8 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
31acc 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
31ad0 0e9 5B A5 42 F5 |                 or      utx, icrc
31ad4 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
31ad8 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
31adc 0ec 20 00 90 FD |                 jmp     #isr1_wait
31ae0 0ed             | isr1_lsframe
31ae0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
31ae4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
31ae8 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
31aec 0f0             | .wait
31aec 0f0 40 46 72 FD |                 testp   dp                      wc
31af0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
31af4 0f2 23 03 08 FC |                 akpin   dp
31af8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
31afc 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
31b00 0f5             | isr1_wait
31b00 0f5 22 A5 82 FA |                 rqpin   utx, dm
31b04 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
31b08 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
31b0c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
31b10 0f9 03 00 00 FF 
31b14 0fa FF B3 06 F5 |                 and     frame, ##$7ff
31b18 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
31b1c 0fc F5 FF 3B FB |                 reti1
31b20 0fd             | 
31b20 0fd             | '------------------------------------------------------------------------------
31b20 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
31b20 0fd             | ' transaction will complete before the next frame is triggered.
31b20 0fd             | '------------------------------------------------------------------------------
31b20 0fd             | ' On entry:
31b20 0fd             | ' On exit:
31b20 0fd             | '------------------------------------------------------------------------------
31b20 0fd             | wait_txn_ok
31b20 0fd 1A 74 63 FD |                 getct   htmp2
31b24 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
31b28 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
31b2c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
31b30 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
31b34 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
31b38 103 2D 00 64 FD |                 ret
31b3c 104             | 
31b3c 104             | '------------------------------------------------------------------------------
31b3c 104             | ' A device connection was detected, or a bus reset was requested by the USB
31b3c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
31b3c 104             | ' and perform a reset sequence prior to device enumeration.
31b3c 104             | '------------------------------------------------------------------------------
31b3c 104             | dev_reset
31b3c 104 22 A7 82 FA |                 rqpin   urx, dm
31b40 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
31b44 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
31b48 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
31b4c 108             | reset
31b4c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
31b50 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
31b54 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
31b58 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
31b5c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
31b60 10d 1A 92 62 FD |                 getct   iframe_ct_base
31b64 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
31b68 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
31b6c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
31b70 111 24 70 07 F1 |                 add     htmp, #36
31b74 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
31b78 113             | .framewait
31b78 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
31b7c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
31b80 115 2D 00 64 FD |                 ret
31b84 116             | 
31b84 116             | '------------------------------------------------------------------------------
31b84 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
31b84 116             | '------------------------------------------------------------------------------
31b84 116             | ' On entry:
31b84 116             | '   PTRA - source address.
31b84 116             | '   PB - destination address.
31b84 116             | '   hr0 - length of copy, in bytes.
31b84 116             | ' On exit:
31b84 116             | '------------------------------------------------------------------------------
31b84 116             | hmemcpy
31b84 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
31b88 117 F7 71 43 FC |                 wrbyte  htmp, pb
31b8c 118 01 EE 07 F1 |                 add     pb, #1
31b90 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
31b94 11a             | 
31b94 11a             | '------------------------------------------------------------------------------
31b94 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
31b94 11a             | ' loop until the errant device is disconnected.
31b94 11a             | '------------------------------------------------------------------------------
31b94 11a             | ' On entry:
31b94 11a             | ' On exit:
31b94 11a             | '------------------------------------------------------------------------------
31b94 11a             | host_error
31b94 11a             |           if ERROR_LED >= 0
31b94 11a             |           end
31b94 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
31b98 11b             | 
31b98 11b             | '------------------------------------------------------------------------------
31b98 11b             | ' Get HID descriptor buffer for current port
31b98 11b             | '------------------------------------------------------------------------------
31b98 11b             | ' On entry:
31b98 11b             | ' On exit:
31b98 11b             | '   PB - HID descriptor buffer pointer
31b98 11b             | '------------------------------------------------------------------------------
31b98 11b             | get_hid_descr_buffer
31b98 11b 2D EF 03 F6 |                 mov     pb, hdev_port
31b9c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
31ba0 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
31ba4 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
31ba8 11f             | 
31ba8 11f             | 
31ba8 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
31bac 120             | 
31bac 120             | ' USB commands and error codes
31bac 120 00 00 00 00 | cmd_data        long    0
31bb0 121 00 00 00 00 | usb_err_code    long    ERR_NONE
31bb4 122             | 
31bb4 122             | ' Parameters block assigned at cog startup
31bb4 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
31bb8 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
31bbc 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
31bc0 125             | if ACTIVITY_LED >= 0
31bc0 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
31bc0 125             | end
31bc0 125             | if ERROR_LED >= 0
31bc0 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
31bc0 125             | end
31bc0 125 00 00 00 00 | hid_descr_p     long    0
31bc4 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
31bc4 126             | 'hkbd_report_p   long    0
31bc4 126 00 00 00 00 | hub_descr_p     long    0
31bc8 127 00 00 00 00 | urx_buff_p      long    0
31bcc 128 00 00 00 00 | dev_desc_buff_p long    0
31bd0 129 00 00 00 00 | con_desc_buff_p long    0
31bd4 12a 00 00 00 00 | cache_start_p   long    0
31bd8 12b 00 00 00 00 | cache_end_p     long    0
31bdc 12c             | if EMUPAD_MAX_PLAYER > 0
31bdc 12c             | emupad_out_ptr  long    0
31bdc 12c             | end
31bdc 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
31be0 12d             | 
31be0 12d             | hdev_init_start
31be0 12d             | hdev_port       res     1
31be0 12d             | hdev_port       res     1
31be0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
31be0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
31be0 12d             | kbm_next_datax  res     1
31be0 12d             | kbm_next_datax  res     1
31be0 12d             | hub_intf_num    res     1
31be0 12d             | hub_intf_num    res     1
31be0 12d             | hub_next_datax  res     1
31be0 12d             | hub_next_datax  res     1
31be0 12d             | hub_status_chg  res     1
31be0 12d             | hub_status_chg  res     1
31be0 12d             | hub_port_status res     1
31be0 12d             | hub_port_status res     1
31be0 12d             | if HAVE_MOUSE
31be0 12d             | ms_intf_num     res     1
31be0 12d             | ms_intf_num     res     1
31be0 12d             | ms_in_max_pkt   res     1
31be0 12d             | ms_in_max_pkt   res     1
31be0 12d             | end
31be0 12d             | kb_intf_num     res     1
31be0 12d             | kb_intf_num     res     1
31be0 12d             | kb_interval     res     1
31be0 12d             | kb_interval     res     1
31be0 12d             | kb_in_max_pkt   res     1
31be0 12d             | kb_in_max_pkt   res     1
31be0 12d             | kb_max_index    res     1
31be0 12d             | kb_max_index    res     1
31be0 12d             | kb_led_states   res     1
31be0 12d             | kb_led_states   res     1
31be0 12d             | gp_intf_num     res     1
31be0 12d             | gp_intf_num     res     1
31be0 12d             | gp_interval     res     1
31be0 12d             | gp_interval     res     1
31be0 12d             | gp_max_index    res     1
31be0 12d             | gp_max_index    res     1
31be0 12d             | gp_descr_len    res     1+MAX_DEVICES
31be0 12d             | gp_descr_len    res     1+MAX_DEVICES
31be0 12d             | hdev_init_end
31be0 12d             | 
31be0 12d             | ' Initialized at cog startup:
31be0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
31be0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
31be0 12d             | iframe_ct_new   res     1
31be0 12d             | iframe_ct_new   res     1
31be0 12d             | iframe_ct_base  res     1
31be0 12d             | iframe_ct_base  res     1
31be0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
31be0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
31be0 12d             | 
31be0 12d             | ' This register block is reset to zero when a USB device connects
31be0 12d             | hreg_init_start
31be0 12d             | hstatus         res     1         ' Host status flags
31be0 12d             | hstatus         res     1         ' Host status flags
31be0 12d             | hctwait         res     1         ' Poll-based wait clocks
31be0 12d             | hctwait         res     1         ' Poll-based wait clocks
31be0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
31be0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
31be0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
31be0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
31be0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
31be0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
31be0 12d             | xfer_retry      res     1         ' Control transfer retry count
31be0 12d             | xfer_retry      res     1         ' Control transfer retry count
31be0 12d             | retry           res     1         ' Transaction retry count
31be0 12d             | retry           res     1         ' Transaction retry count
31be0 12d             | utx             res     1         ' Byte to transmit on USB
31be0 12d             | utx             res     1         ' Byte to transmit on USB
31be0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
31be0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
31be0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
31be0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
31be0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
31be0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
31be0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
31be0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
31be0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
31be0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
31be0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
31be0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
31be0 12d             | frame           res     1         ' USB 1ms frame counter value
31be0 12d             | frame           res     1         ' USB 1ms frame counter value
31be0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
31be0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
31be0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
31be0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
31be0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
31be0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
31be0 12d             | crc             res     1         ' Used for CRC16 calculation
31be0 12d             | crc             res     1         ' Used for CRC16 calculation
31be0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
31be0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
31be0 12d             | retval          res     1         ' Global success/fail return parameter
31be0 12d             | retval          res     1         ' Global success/fail return parameter
31be0 12d             | context_retval  res     1         ' Operation contextual return parameter
31be0 12d             | context_retval  res     1         ' Operation contextual return parameter
31be0 12d             | ' Device stuff
31be0 12d             | hdev_id         res     1+MAX_DEVICES
31be0 12d             | hdev_id         res     1+MAX_DEVICES
31be0 12d             | hdev_bcd        res     1
31be0 12d             | hdev_bcd        res     1
31be0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
31be0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
31be0 12d             | ' Keyboard/mouse stuff
31be0 12d             | hctrl_ep_addr   res     1
31be0 12d             | hctrl_ep_addr   res     1
31be0 12d             | hctrl_max_pkt   res     1
31be0 12d             | hctrl_max_pkt   res     1
31be0 12d             | hconfig_base    res     1
31be0 12d             | hconfig_base    res     1
31be0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
31be0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
31be0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
31be0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
31be0 12d             | hdev_class      res     1
31be0 12d             | hdev_class      res     1
31be0 12d             | hdev_subclass   res     1
31be0 12d             | hdev_subclass   res     1
31be0 12d             | hdev_protocol   res     1
31be0 12d             | hdev_protocol   res     1
31be0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
31be0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
31be0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
31be0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
31be0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
31be0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
31be0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
31be0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
31be0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
31be0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
31be0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
31be0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
31be0 12d             | if HAVE_MOUSE
31be0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
31be0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
31be0 12d             | end
31be0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
31be0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
31be0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
31be0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
31be0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
31be0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
31be0 12d             | hdev_out_addr   res     1
31be0 12d             | hdev_out_addr   res     1
31be0 12d             | 
31be0 12d             | if EMUPAD_MAX_PLAYER > 0
31be0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
31be0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
31be0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
31be0 12d             | end
31be0 12d             | 
31be0 12d             | hreg_init_end
31be0 12d             | 
31be0 12d             | hidr_start
31be0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
31be0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
31be0 12d             | hidr_flags      res     1
31be0 12d             | hidr_flags      res     1
31be0 12d             | hidr_axis       res     3
31be0 12d             | hidr_axis       res     3
31be0 12d             | hidr_buttons    res     1
31be0 12d             | hidr_buttons    res     1
31be0 12d             | hidr_hats       res     1
31be0 12d             | hidr_hats       res     1
31be0 12d             | '' Above are actually useful values, 6 longs
31be0 12d             | hidr_id         res     1
31be0 12d             | hidr_id         res     1
31be0 12d             | hidr_state      res     1
31be0 12d             | hidr_state      res     1
31be0 12d             | hidr_size       res     1
31be0 12d             | hidr_size       res     1
31be0 12d             | hidr_count      res     1
31be0 12d             | hidr_count      res     1
31be0 12d             | hidr_offset     res     1
31be0 12d             | hidr_offset     res     1
31be0 12d             | hidr_usage_idx  res     1
31be0 12d             | hidr_usage_idx  res     1
31be0 12d             | hidr_lminmax    res     1
31be0 12d             | hidr_lminmax    res     1
31be0 12d             | hidr_pminmax    res     1
31be0 12d             | hidr_pminmax    res     1
31be0 12d             | hidr_type       res     1
31be0 12d             | hidr_type       res     1
31be0 12d             | hidr_end
31be0 12d             | 
31be0 12d             | ' Variables dependent on the system freqency
31be0 12d             | _var_64_lower_  res     1
31be0 12d             | _var_64_lower_  res     1
31be0 12d             | _var_64_upper_  res     1
31be0 12d             | _var_64_upper_  res     1
31be0 12d             | _12Mbps_        res     1
31be0 12d             | _12Mbps_        res     1
31be0 12d             | _1_5Mbps_       res     1
31be0 12d             | _1_5Mbps_       res     1
31be0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
31be0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
31be0 12d             | _1us_           res     1         ' 1us
31be0 12d             | _1us_           res     1         ' 1us
31be0 12d             | _10us_          res     1         ' 10us
31be0 12d             | _10us_          res     1         ' 10us
31be0 12d             | _33us_          res     1         ' 33us
31be0 12d             | _33us_          res     1         ' 33us
31be0 12d             | _txn_err_       res     1         ' 250us
31be0 12d             | _txn_err_       res     1         ' 250us
31be0 12d             | _500us_         res     1         ' 500us
31be0 12d             | _500us_         res     1         ' 500us
31be0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
31be0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
31be0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
31be0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
31be0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
31be0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
31be0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
31be0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
31be0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
31be0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
31be0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
31be0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
31be0 12d             | _preamble_wait_ res     1
31be0 12d             | _preamble_wait_ res     1
31be0 12d             | _1ms_           res     1         ' 1ms
31be0 12d             | _1ms_           res     1         ' 1ms
31be0 12d             | _2ms_           res     1         ' 2ms
31be0 12d             | _2ms_           res     1         ' 2ms
31be0 12d             | _suspend_wait_  res     1         ' 3ms
31be0 12d             | _suspend_wait_  res     1         ' 3ms
31be0 12d             | _4ms_           res     1         ' 4ms
31be0 12d             | _4ms_           res     1         ' 4ms
31be0 12d             | _xfer_wait_     res     1         ' 5ms
31be0 12d             | _xfer_wait_     res     1         ' 5ms
31be0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
31be0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
31be0 12d             | _reset_hold_    res     1         ' 15ms
31be0 12d             | _reset_hold_    res     1         ' 15ms
31be0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
31be0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
31be0 12d             | _21ms_          res     1         ' 21ms
31be0 12d             | _21ms_          res     1         ' 21ms
31be0 12d             | _100ms_         res     1         ' 100ms
31be0 12d             | _100ms_         res     1         ' 100ms
31be0 12d             | _500ms_         res     1         ' 500ms
31be0 12d             | _500ms_         res     1         ' 500ms
31be0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
31be0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
31be0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
31be0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
31be0 12d             | '------------------------------------------------------------------------------
31be0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
31be0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
31be0 12d             | _usb_d_ls_nco_  res     1
31be0 12d             | _usb_d_ls_nco_  res     1
31be0 12d             | _usb_h_fs_nco_  res     1
31be0 12d             | _usb_h_fs_nco_  res     1
31be0 12d             | _usb_d_fs_nco_  res     1
31be0 12d             | _usb_d_fs_nco_  res     1
31be0 12d             | '------------------------------------------------------------------------------
31be0 12d             | ' Scratch registers
31be0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
31be0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
31be0 12d             | htmp1           res     1
31be0 12d             | htmp1           res     1
31be0 12d             | htmp2           res     1
31be0 12d             | htmp2           res     1
31be0 12d             | htmp3           res     1
31be0 12d             | htmp3           res     1
31be0 12d             | hrep            res     1         ' Repeat count
31be0 12d             | hrep            res     1         ' Repeat count
31be0 12d             | hsave0          res     1         ' Subroutine parameter saves
31be0 12d             | hsave0          res     1         ' Subroutine parameter saves
31be0 12d             | hsave1          res     1
31be0 12d             | hsave1          res     1
31be0 12d             | hsave2          res     1
31be0 12d             | hsave2          res     1
31be0 12d             | isrtmp1         res     1
31be0 12d             | isrtmp1         res     1
31be0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
31be0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
31be0 12d             | hr0             res     1         ' Multi-purpose registers
31be0 12d             | hr0             res     1         ' Multi-purpose registers
31be0 12d             | hr1             res     1
31be0 12d             | hr1             res     1
31be0 12d             | hr2             res     1
31be0 12d             | hr2             res     1
31be0 12d             | hr3             res     1
31be0 12d             | hr3             res     1
31be0 12d             | hpar1           res     1         ' Routine entry/exit parameters
31be0 12d             | hpar1           res     1         ' Routine entry/exit parameters
31be0 12d             | hpar2           res     1
31be0 12d             | hpar2           res     1
31be0 12d             | hpar3           res     1
31be0 12d             | hpar3           res     1
31be0 12d             | hct2            res     1         ' Function response bus turn-around timer
31be0 12d             | hct2            res     1         ' Function response bus turn-around timer
31be0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
31be0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
31be0 12d             | mod_cnt         res     1         ' Used in idle loops
31be0 12d             | mod_cnt         res     1         ' Used in idle loops
31be0 12d             |                 fit     $1F0
31be0 12d             |                 org     $200
31be0 200             | hlut_start
31be0 200             | 
31be0 200             | '------------------------------------------------------------------------------
31be0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
31be0 200             | ' settings to startup defaults.
31be0 200             | '------------------------------------------------------------------------------
31be0 200             | ' On entry:
31be0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
31be0 200             | '------------------------------------------------------------------------------
31be0 200             | set_speed_full
31be0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
31be4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
31be8 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
31bec 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
31bf0 204             | '                ret                             wcz     ' Restore caller flags on exit
31bf0 204             | 
31bf0 204             | '------------------------------------------------------------------------------
31bf0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
31bf0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
31bf0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
31bf0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
31bf0 204             | ' putting the smart pins into reset.
31bf0 204             | '------------------------------------------------------------------------------
31bf0 204             | ' On entry:
31bf0 204             | ' On exit: CZ flags restored to caller states
31bf0 204             | '------------------------------------------------------------------------------
31bf0 204             | set_speed_low
31bf0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
31bf4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
31bf8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
31bfc 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
31c00 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
31c04 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
31c08 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
31c0c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
31c10 20c             | 
31c10 20c             | '------------------------------------------------------------------------------
31c10 20c             | ' Perform configuration stuff required when a device intitially connects.
31c10 20c             | '------------------------------------------------------------------------------
31c10 20c             | ' On entry:
31c10 20c             | ' On exit:
31c10 20c             | '------------------------------------------------------------------------------
31c10 20c             | on_connect
31c10 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
31c14 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
31c18 20e             | .retry
31c18 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
31c1c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
31c20 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
31c24 211 00 08 00 FF 
31c28 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
31c2c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
31c30 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
31c34 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
31c38 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
31c3c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
31c40 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31c44 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
31c48 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
31c4c 21b 4C 03 B0 FD |                 call    #poll_waitx
31c50 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
31c54 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
31c58 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
31c5c 21f B8 FF 9F FD |                 jmp     #.retry
31c60 220             | .get_dev_desc
31c60 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
31c64 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
31c68 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
31c6c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
31c70 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
31c74 225 88 FB BF FD |                 call    #reset
31c78 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
31c7c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
31c80 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
31c84 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
31c88 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31c8c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
31c90 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
31c94 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
31c98 22e 04 00 00 FF 
31c9c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
31ca0 230 34 FA BF FD |                 call    #calc_crc5
31ca4 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
31ca8 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
31cac 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
31cb0 234 F7 AD C2 FA |                 rdbyte  total_data, pb
31cb4 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
31cb8 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
31cbc 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31cc0 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
31cc4 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
31cc8 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
31ccc 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
31cd0 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
31cd4 23d C4 02 B0 FD |                 call    #poll_waitx
31cd8 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
31cdc 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
31ce0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
31ce4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
31ce8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
31cec 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31cf0 244 2D 00 64 5D |         if_nz   ret
31cf4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
31cf8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
31cfc 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
31d00 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
31d04 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
31d08 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
31d0c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
31d10 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
31d14 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
31d18 24e 2C FB 9F CD |         if_b    jmp     #host_error
31d1c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
31d20 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
31d24 251 2D EC 63 FD |                 call    pa
31d28 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
31d2c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
31d30 254 2C EC 63 FD |                 jmp     pa
31d34 255             | 
31d34 255             | '------------------------------------------------------------------------------
31d34 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
31d34 255             | ' Status reporting is always in the function-to-host direction.
31d34 255             | '------------------------------------------------------------------------------
31d34 255             | ' On entry:
31d34 255             | '   PTRA - start address of the SETUP data in hub.
31d34 255             | '   PB - start address of the buffer/struct to be written to during the IN data
31d34 255             | '     stage.
31d34 255             | '   ep_addr_pid - device address, endpoint and CRC5.
31d34 255             | ' On exit:
31d34 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
31d34 255             | '     contains the count of data stage bytes actually received, which must
31d34 255             | '     always be <= the count requested.
31d34 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
31d34 255             | '     more specific USB operation error code.
31d34 255             | '------------------------------------------------------------------------------
31d34 255             | control_read
31d34 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
31d38 256 F8 8F 03 F6 |                 mov     hpar2, ptra
31d3c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
31d40 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
31d44 259             | .xfer_start
31d44 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
31d48 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
31d4c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31d50 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
31d54 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
31d58 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
31d5c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
31d60 260 61 00 00 FF 
31d64 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
31d68 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
31d6c 263             | .data
31d6c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
31d70 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
31d74 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
31d78 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
31d7c 267             | .nak_retry
31d7c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
31d80 268             | .in_retry
31d80 268 BC F6 BF FD |                 call    #txn_in
31d84 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
31d88 26a 28 00 90 AD |         if_z    jmp     #.commit
31d8c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
31d90 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
31d94 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
31d98 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
31d9c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
31da0 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
31da4 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
31da8 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
31dac 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
31db0 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
31db4 275             | .commit
31db4 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
31db8 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
31dbc 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
31dc0 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
31dc4 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
31dc8 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
31dcc 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
31dd0 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
31dd4 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
31dd8 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
31ddc 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
31de0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
31de4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
31de8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
31dec 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
31df0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
31df4 285             | .pre_status
31df4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
31df8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
31dfc 287 00 B0 06 F6 |                 mov     pkt_data, #0
31e00 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
31e04 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
31e08 28a 61 00 00 FF 
31e0c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
31e10 28c             | .out_retry
31e10 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
31e14 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31e18 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
31e1c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
31e20 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
31e24 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
31e28 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
31e2c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
31e30 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
31e34 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
31e38 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
31e3c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
31e3c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
31e3c 297             | ' ControlRead() transfer gets things unstuck most of the time...
31e3c 297             | .xfer_retry
31e3c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
31e40 298 58 01 B0 FD |                 call    #poll_waitx
31e44 299 8C F9 BF FD |                 call    #wait_txn_ok
31e48 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
31e4c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
31e50 29c C8 EF 03 F6 |                 mov     pb, hpar3
31e54 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
31e58 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
31e5c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
31e60 2a0             | 
31e60 2a0             | '------------------------------------------------------------------------------
31e60 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
31e60 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
31e60 2a0             | ' the SETUP data struct is filled with the required values.
31e60 2a0             | '------------------------------------------------------------------------------
31e60 2a0             | ' On entry:
31e60 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
31e60 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
31e60 2a0             | '     stage.
31e60 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
31e60 2a0             | ' On exit:
31e60 2a0             | '   retval - used to convey the success/failure of each stage.
31e60 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
31e60 2a0             | '     more specific USB operation error code.
31e60 2a0             | '------------------------------------------------------------------------------
31e60 2a0             | control_write
31e60 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
31e64 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
31e68 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
31e6c 2a3             | 
31e6c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
31e70 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
31e74 2a5 F7 91 03 F6 |                 mov     hpar3, pb
31e78 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
31e7c 2a7             | .xfer_start
31e7c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
31e80 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
31e84 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
31e88 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31e8c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
31e90 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
31e94 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
31e98 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
31e9c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
31ea0 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
31ea4 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
31ea8 2b2             | .data
31ea8 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
31eac 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
31eb0 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
31eb4 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
31eb8 2b6             | .out_retry
31eb8 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
31ebc 2b7 88 F6 BF FD |                 call    #txn_out
31ec0 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
31ec4 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
31ec8 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
31ecc 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
31ed0 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
31ed4 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
31ed8 2be             | .commit
31ed8 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
31edc 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
31ee0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
31ee4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
31ee8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
31eec 2c3             | pre_status_in
31eec 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
31ef0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
31ef4 2c5             | .status_retry
31ef4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
31ef8 2c6 44 F5 BF FD |                 call    #txn_in
31efc 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
31f00 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
31f04 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
31f08 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
31f0c 2cb 2D 00 64 AD |         if_z    ret
31f10 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
31f14 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
31f18 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
31f1c 2cf             | '               ret                                     ' Caller must handle transfer retirement
31f1c 2cf             | 
31f1c 2cf             | '------------------------------------------------------------------------------
31f1c 2cf             | ' Execute an IN interrupt transaction.
31f1c 2cf             | '------------------------------------------------------------------------------
31f1c 2cf             | ' On entry:
31f1c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
31f1c 2cf             | '   hpar2 - Address of the IN data buffer
31f1c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
31f1c 2cf             | ' On exit:
31f1c 2cf             | '   retval - the result of the operation.
31f1c 2cf             | '   hpar3 - the count of IN data bytes actually received.
31f1c 2cf             | '------------------------------------------------------------------------------
31f1c 2cf             | do_int_in
31f1c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
31f20 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
31f24 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
31f28 2d2             | 
31f28 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
31f2c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
31f30 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
31f34 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
31f38 2d6             | .retry
31f38 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
31f3c 2d7 00 F5 BF FD |                 call    #txn_in
31f40 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
31f44 2d9 1C 00 90 AD |         if_z    jmp     #.commit
31f48 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
31f4c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
31f50 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
31f54 2dd 54 00 B0 FD |                 call    #retry_wait
31f58 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
31f5c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
31f60 2e0 D4 FF 9F FD |                 jmp     #.retry
31f64 2e1             | .commit
31f64 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
31f68 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
31f6c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
31f70 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
31f74 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
31f78 2e6             | .post_ret
31f78 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
31f7c 2e7             | 
31f7c 2e7             | 
31f7c 2e7             | '------------------------------------------------------------------------------
31f7c 2e7             | ' Resets the downstream hub port to FS
31f7c 2e7             | '------------------------------------------------------------------------------
31f7c 2e7             | dwnstream_reset
31f7c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
31f80 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
31f84 2e9             | 
31f84 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
31f88 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
31f8c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
31f90 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
31f94 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
31f98 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
31f9c 2ef             | 
31f9c 2ef             | '------------------------------------------------------------------------------
31f9c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
31f9c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
31f9c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
31f9c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
31f9c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
31f9c 2ef             | '------------------------------------------------------------------------------
31f9c 2ef             | ' On entry:
31f9c 2ef             | '   hctwait - wait interval in sysclocks.
31f9c 2ef             | ' On exit:
31f9c 2ef             | '------------------------------------------------------------------------------
31f9c 2ef             | poll_waitx
31f9c 2ef 1A 92 63 FD |                 getct   hct2
31fa0 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
31fa4 2f1             | .wait
31fa4 2f1 FF 25 CC FB |                 jnct2   #.wait
31fa8 2f2 2D 00 64 FD |                 ret
31fac 2f3             | 
31fac 2f3             | '------------------------------------------------------------------------------
31fac 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
31fac 2f3             | '------------------------------------------------------------------------------
31fac 2f3             | ' On entry:
31fac 2f3             | '   retval - transaction response PID or error code.
31fac 2f3             | ' On exit:
31fac 2f3             | '------------------------------------------------------------------------------
31fac 2f3             | retry_wait
31fac 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
31fb0 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
31fb4 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
31fb8 2f6 14 00 90 AD |         if_z    jmp     #.nak
31fbc 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
31fc0 2f8 D8 FF BF FD |                 call    #poll_waitx
31fc4 2f9             | .dec
31fc4 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
31fc8 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
31fcc 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
31fd0 2fc             | .nak
31fd0 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
31fd4 2fd C4 FF BF FD |                 call    #poll_waitx
31fd8 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
31fdc 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
31fe0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
31fe4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
31fe8 302 2D 00 64 FD |                 ret
31fec 303             | 
31fec 303             | host_reset
31fec 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
31ff0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
31ff4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
31ff4 305 BD 01 05 FF 
31ff8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
31ffc 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
32000 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
32004 309             | ' Check to see if the system clock has been changed.
32004 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
32008 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3200c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
32010 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
32014 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
32018 30e 40 46 62 FD |                 dirl    dp
3201c 30f             | 
3201c 30f 28 02 64 FD |                 setq    #1
32020 310 80 00 80 FF 
32024 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
32028 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3202c 313             | .enable
3202c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
32030 314 41 46 62 FD |                 dirh    dp
32034 315 1F 36 63 FD |                 waitx   _1us_
32038 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3203c 317             | 
3203c 317             |                 ' Handle Port protection enable and startup delay
3203c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
32040 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
32044 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
32048 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3204c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
32050 31c             | 
32050 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
32054 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
32058 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3205c 31f 00 00 04 F6 |                 mov     0-0, #0
32060 320             | .regloop
32060 320             | 
32060 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
32060 320             | 
32060 320             | discon_entry
32060 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
32064 321             | 
32064 321             |               
32064 321             |         if HAVE_HIDPAD
32064 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
32068 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3206c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
32070 324 F7 01 68 FC |                 wrlong  #0,pb
32074 325             |         end
32074 325             |         if EMUPAD_MAX_PLAYER > 0
32074 325             |         end
32074 325             | 
32074 325             |                 ' Fall through to disconnected loop
32074 325             | 
32074 325             | '-----------------------------------------------------------------------------------------------------------------
32074 325             | ' Device connect handling (Section 7.1.7.3).
32074 325             | '-----------------------------------------------------------------------------------------------------------------
32074 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
32074 325             | ' device to connect (Section 7.1.7.3).
32074 325             | '-----------------------------------------------------------------------------------------------------------------
32074 325             | disconnected
32074 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
32078 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3207c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
32080 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
32084 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
32088 32a             |         if ACTIVITY_LED >= 0
32088 32a             |         end
32088 32a 22 A7 82 FA |                 rqpin   urx, dm
3208c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
32090 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
32094 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
32098 32e             | .se1_test
32098 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3209c 32f FC FE BF FD |                 call    #poll_waitx
320a0 330 22 A7 82 FA |                 rqpin   urx, dm
320a4 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
320a8 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
320ac 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
320b0 334             | .se1            'SE1 is a fatal error condition
320b0 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
320b4 335 E4 FE BF FD |                 call    #poll_waitx
320b8 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
320bc 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
320c0 338             | .connect_test                                           ' Test lines until stable J/K state seen
320c0 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
320c4 339 22 A7 82 FA |                 rqpin   urx, dm
320c8 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
320cc 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
320d0 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
320d4 33d             | connected
320d4 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
320d8 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
320dc 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
320e0 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
320e4 341             | .set_pulse
320e4 341 1A 64 63 FD |                 getct   _pulse_time_
320e8 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
320ec 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
320ec 343             | ' of 1ms and make a correction, if necessary.
320ec 343             | '                mov     htmp, _1ms_
320ec 343             | '                subs    htmp, iframe_delta
320ec 343             | '                adds    _frame1ms_clks_, htmp
320ec 343             | '                debug(udec(_frame1ms_clks_))
320ec 343             | 
320ec 343             |                 ' Fall through to idle/processing loop
320ec 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
320f0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
320f4 345             | 
320f4 345             | hidle
320f4 345 22 A7 82 FA |                 rqpin   urx, dm
320f8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
320fc 347 98 00 90 CD |         if_c    jmp     #.se0_test
32100 348 24 06 70 FD |                 pollct3                         wc
32104 349 68 00 90 3D |         if_nc   jmp     #.nopoll
32108 34a 1A 94 63 FD |                 getct   hct3
3210c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
32110 34c             | 
32110 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
32114 34d 00 70 E3 F8 |                 getbyte htmp
32118 34e             | 
32118 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3211c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
32120 350 40 00 90 AD |         if_z    jmp     #.poll
32124 351             | 
32124 351             |         if _HAVE_GAMEPAD
32124 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
32128 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3212c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
32130 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
32134 355 2C 00 90 AD |         if_z    jmp     #.poll
32138 356             |         end
32138 356             | 
32138 356             |         if HAVE_MOUSE
32138 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3213c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
32140 358 20 00 90 AD |         if_z    jmp     #.poll
32144 359             |         end
32144 359             | 
32144 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
32148 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3214c 35b 14 00 90 AD |         if_z    jmp     #.poll
32150 35c             | 
32150 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
32154 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
32158 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3215c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
32160 360             |         if HAVE_MOUSE
32160 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
32164 361             |         else
32164 361             |         end
32164 361             | 
32164 361             | .poll
32164 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
32168 362 2D EC 63 FD |                 call    pa
3216c 363             | .skip_poll
3216c 363             | 
3216c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
32170 364             | 
32170 364             | .nopoll
32170 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
32174 365 44 00 90 AD |         if_z    jmp     #hsuspend
32178 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3217c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
32180 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
32184 369 1A 84 63 FD |                 getct   hr0
32188 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3218c 36b             |         if ACTIVITY_LED >= 0
3218c 36b             |         end
3218c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
32190 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
32194 36d 5C FF 9F FD |                 jmp     #hidle
32198 36e             | ' Check for extended SE0 state on the bus
32198 36e             | .se0_test
32198 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3219c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
321a0 370 22 A7 82 FA |                 rqpin   urx, dm
321a4 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
321a8 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
321ac 373 24 F6 BF FD |                 call    #wait_txn_ok
321b0 374 00 00 80 FF 
321b4 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
321b8 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
321b8 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
321bc 377             | 
321bc 377             | hsuspend
321bc 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
321c0 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
321c4 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
321c8 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
321cc 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
321d0 37c 00 96 07 F6 |                 mov     mod_cnt, #0
321d4 37d             | 
321d4 37d             |                 ' Fall through to resume wait loop
321d4 37d             | 
321d4 37d             | hwait_resume
321d4 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
321d8 37e 02 86 47 F0 |                 shr     hr1, #2
321dc 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
321e0 380             |         if ACTIVITY_LED >= 0
321e0 380             |         end
321e0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
321e4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
321e8 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
321ec 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
321f0 384 18 00 90 AD |         if_z    jmp     #.resume
321f4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
321f8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
321fc 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
32200 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
32204 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
32208 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3220c 38b             | .resume
3220c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
32210 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
32214 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
32218 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3221c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
32220 390 1F 70 63 FD |                 waitx   htmp
32224 391 22 07 28 FC |                 wypin   #OUT_J, dm
32228 392 01 70 47 F0 |                 shr     htmp, #1
3222c 393 1F 70 63 FD |                 waitx   htmp
32230 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
32234 395 1A 92 62 FD |                 getct   iframe_ct_base
32238 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3223c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
32240 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
32244 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
32248 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3224c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
32250 39c             | 
32250 39c             | '------------------------------------------------------------------------------
32250 39c             | ' Send preamble to enable low-speed HUB ports
32250 39c             | '------------------------------------------------------------------------------
32250 39c             | ' On entry:
32250 39c             | ' On exit:
32250 39c             | '   USB baud rate set to low-speed
32250 39c             | '------------------------------------------------------------------------------
32250 39c             | utx_pre
32250 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
32254 39d 40 46 62 FD |                 dirl    dp
32258 39e 28 02 64 FD |                 setq    #1
3225c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
32260 3a0 58 44 62 FD |                 drvl    dm
32264 3a1 59 46 62 FD |                 drvh    dp
32268 3a2             | 
32268 3a2 1E 00 00 FF 
3226c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
32270 3a4             | 
32270 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
32274 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
32278 3a6 28 02 64 3D |         if_nc   setq    #1
3227c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
32280 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
32284 3a9             | .l1
32284 3a9             | 
32284 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
32288 3aa 40 46 62 FD |                 dirl    dp
3228c 3ab 28 02 64 FD |                 setq    #1
32290 3ac 80 00 80 FF 
32294 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
32298 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3229c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
322a0 3b0 41 46 62 FD |                 dirh    dp
322a4 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
322a8 3b2             | 
322a8 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
322ac 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
322b0 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
322b4 3b5             | 
322b4 3b5             | hlut_end
322b4 3b5             |                 fit     $400
322b4 3b5             |                 orgh
322b4                 | if OVERLAP_MEMORY
322b4                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
322b4                 | end
322b4                 | '------------------------------------------------------------------------------
322b4                 | ' Routines called from cog space.
322b4                 | '------------------------------------------------------------------------------
322b4                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
322b4                 | '------------------------------------------------------------------------------
322b4                 | 
322b4                 | '------------------------------------------------------------------------------
322b4                 | ' USB host cog initialization.
322b4                 | '------------------------------------------------------------------------------
322b4                 | usb_host_init
322b4                 |                 ' Initialize buffer pointers
322b4                 |         if OVERLAP_MEMORY
322b4                 |         else
322b4     40 15 B0 FE |                 loc     pb, #hid_descr
322b8                 |         end
322b8     F7 4B 02 F6 |                 mov     hid_descr_p, pb
322bc                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
322bc                 |                 {
322bc                 |                 }
322bc                 |         
322bc                 |                 {
322bc                 |                 }
322bc                 |                 'loc     pb,#hkbd_report
322bc                 |                 'mov     hkbd_report_p,pb
322bc                 | 
322bc     08 1D B0 FE |                 loc     pb, #hub_descr
322c0     F7 4D 02 F6 |                 mov     hub_descr_p, pb
322c4     1D 1D B0 FE |                 loc     pb, #urx_buff
322c8     F7 4F 02 F6 |                 mov     urx_buff_p, pb
322cc     95 1D B0 FE |                 loc     pb, #dev_desc_buff
322d0     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
322d4     9F 1D B0 FE |                 loc     pb, #con_desc_buff
322d8     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
322dc     18 15 B0 FE |                 loc     pb, #usb_cache_start
322e0     F7 55 02 F6 |                 mov     cache_start_p, pb
322e4     E9 1C B0 FE |                 loc     pb, #usb_cache_end
322e8     F7 57 02 F6 |                 mov     cache_end_p, pb
322ec                 | 
322ec                 |         if ERROR_LED >= 0
322ec                 |         end
322ec                 | 
322ec                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
322ec                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
322ec                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
322ec                 | ' Configure and enable the Serial Host USB port.
322ec     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
322f0                 | 
322f0                 | '------------------------------------------------------------------------------
322f0                 | ' Timing calculations happen before any interrupt(s) are enabled.
322f0                 | '------------------------------------------------------------------------------
322f0                 | ' On entry:
322f0                 | '   htmp - current CLKFREQ value.
322f0                 | '------------------------------------------------------------------------------
322f0                 | hinit_usb_timings
322f0                 | '                getct   htmp2
322f0     B8 59 02 F6 |                 mov     save_sysclk, htmp
322f4     8D 5B 80 FF 
322f8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
322fc     18 30 63 FD |                 getqx   _12Mbps_
32300     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
32304     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
32308     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3230c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
32310     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
32314     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
32318     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3231c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
32320     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
32324     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
32328     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3232c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
32330     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
32334     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
32338     80 00 00 FF 
3233c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
32340     18 2C 63 FD |                 getqx   _var_64_lower_
32344     19 2E 63 FD |                 getqy   _var_64_upper_
32348     28 2C 63 FD |                 setq    _var_64_lower_
3234c     65 CD 1D FF 
32350     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
32354     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
32358     01 00 00 FF 
3235c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
32360     18 2C 63 FD |                 getqx   _var_64_lower_
32364     19 2E 63 FD |                 getqy   _var_64_upper_
32368     28 2C 63 FD |                 setq    _var_64_lower_
3236c     A1 07 00 FF 
32370     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
32374     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
32378     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3237c     09 36 57 F0 |                 shr     _1us_, #9               wc
32380     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
32384     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
32388     18 38 63 FD |                 getqx   _10us_
3238c     09 38 57 F0 |                 shr     _10us_, #9              wc
32390     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
32394     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
32398     18 3A 63 FD |                 getqx   _33us_
3239c     09 3A 57 F0 |                 shr     _33us_, #9              wc
323a0     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
323a4     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
323a8     18 3C 63 FD |                 getqx   _txn_err_
323ac     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
323b0     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
323b4     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
323b8     18 3E 63 FD |                 getqx   _500us_
323bc     09 3E 57 F0 |                 shr     _500us_, #9             wc
323c0     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
323c4     01 00 00 FF 
323c8     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
323cc     18 40 63 FD |                 getqx   _txn_ok_ls_
323d0     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
323d4     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
323d8     01 00 00 FF 
323dc     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
323e0     18 42 63 FD |                 getqx   _txn_ok_fs_
323e4     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
323e8     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
323ec     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
323f0     05 00 00 FF 
323f4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
323f8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
323fc     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
32400     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
32404     1C 00 00 FF 
32408     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3240c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
32410     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
32414     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
32418     00 00 00 FF 
3241c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
32420     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
32424     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
32428     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3242c     04 00 00 FF 
32430     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
32434     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
32438     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3243c     8D 5B 00 FF 
32440     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
32444     18 4C 63 FD |                 getqx   _preamble_wait_
32448     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3244c     01 00 00 FF 
32450     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
32454     18 2C 63 FD |                 getqx   _var_64_lower_
32458     19 2E 63 FD |                 getqy   _var_64_upper_
3245c     28 2C 63 FD |                 setq    _var_64_lower_
32460     01 00 00 FF 
32464     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
32468     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3246c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
32470     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
32474     FF FF 7F FF 
32478     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3247c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
32480     A7 51 03 F6 |                 mov     _2ms_, _1ms_
32484     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
32488     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3248c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
32490     A7 55 03 F6 |                 mov     _4ms_, _1ms_
32494     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
32498     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3249c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
324a0     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
324a4     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
324a8     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
324ac     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
324b0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
324b4     A7 59 03 F6 |                 mov     _8ms_, _1ms_
324b8     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
324bc     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
324c0     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
324c4     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
324c8     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
324cc     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
324d0     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
324d4     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
324d8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
324dc     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
324e0     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
324e4                 | '        _ret_   mov     _1sec_, save_sysclk
324e4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
324e4                 | '                ret
324e4                 | {
324e4                 | }
324e4                 | 
324e4                 | '------------------------------------------------------------------------------
324e4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
324e4                 | ' one. If it is, start the task progression that will configure the device for
324e4                 | ' use.
324e4                 | '------------------------------------------------------------------------------
324e4                 | ' On entry:
324e4                 | '   hconfig_base - start address of the cached config descriptor chain.
324e4                 | ' On exit:
324e4                 | '------------------------------------------------------------------------------
324e4                 | hparse_con_desc
324e4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
324e8     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
324ec     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
324f0     4E 70 FF F9 |                 movbyts htmp,#%%1032
324f4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
324f8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
324f8                 | 
324f8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
324fc     6E ED 03 F1 |                 add     pa, hconfig_base
32500     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
32504                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
32504                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
32504                 | ' that defines a keyboard and/or mouse.
32504     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
32508                 | .next_intf
32508     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3250c     BC 01 90 3D |         if_ae   jmp     #hset_config
32510     6E F3 03 F6 |                 mov     ptrb, hconfig_base
32514     75 F3 03 F1 |                 add     ptrb, hnext_desc
32518     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3251c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
32520     0C 00 90 AD |         if_z    jmp     #.intf
32524     80 71 C7 FA |                 rdbyte  htmp, ptrb
32528     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3252c     D8 FF 9F FD |                 jmp     #.next_intf
32530                 | .intf
32530     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
32534     00 90 07 F6 |                 mov     hpar3, #0
32538     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3253c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
32540     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
32544     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
32548                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
32548                 | 
32548                 | .endp
32548     80 71 C7 FA |                 rdbyte  htmp, ptrb
3254c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
32550     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
32554     78 00 90 3D |         if_ae   jmp     #.get_device
32558     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3255c     75 F3 03 F1 |                 add     ptrb, hnext_desc
32560     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
32564     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
32568     64 00 90 AD |         if_z    jmp     #.get_device
3256c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
32570     04 00 90 AD |         if_z    jmp     #.get_ep
32574     D0 FF 9F FD |                 jmp     #.endp
32578                 | .get_ep
32578     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3257c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
32580     0F 86 67 F0 |                 shl     hr1, #8 + 7
32584     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
32588     3F 00 00 FF 
3258c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
32590     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
32594     00 8E 0F F2 |                 cmp     hpar2, #0               wz
32598     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3259c     00 90 0F F2 |                 cmp     hpar3, #0               wz
325a0     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
325a4     A0 FF 9F FD |                 jmp     #.endp
325a8                 | .in_ep
325a8     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
325ac     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
325b0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
325b0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
325b4     C2 89 DB F8 |                 setbyte hr2, hr0, #3
325b8     8C FF 9F FD |                 jmp     #.endp
325bc                 | .out_ep
325bc     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
325c0     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
325c4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
325c4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
325c8     C2 8B DB F8 |                 setbyte hr3, hr0, #3
325cc     78 FF 9F FD |                 jmp     #.endp
325d0                 | 
325d0                 | .get_device
325d0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
325d4     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
325d8     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
325dc     68 00 90 AD |         if_z    jmp     #.gamepad
325e0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
325e4     AC 00 90 AD |         if_z    jmp     #.hub
325e8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
325ec     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
325f0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
325f4     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
325f8     4C 00 90 AD |         if_z    jmp     #.gamepad
325fc     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
32600     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
32604                 | .keyboard
32604     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
32608                 |         if HAVE_MOUSE
32608     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3260c                 |         else
3260c                 |         end
3260c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
32610     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
32614     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
32618     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3261c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
32620     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
32624                 |                 'debug(udec(kb_intf_num))
32624                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
32624     E0 FE 9F FD |                 jmp     #.next_intf
32628                 | if HAVE_MOUSE
32628                 | .mouse
32628     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3262c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
32630     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
32634     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
32638     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3263c                 |                 'getbyte ms_interval, hr2, #3
3263c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
32640     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
32644                 |                 'debug(udec(kb_intf_num))
32644                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
32644     C0 FE 9F FD |                 jmp     #.next_intf
32648                 | end
32648                 | .gamepad
32648     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3264c     C7 71 63 F5 |                 xor     htmp, hpar2
32650     3F 00 00 FF 
32654     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
32658     AC FE 9F AD |         if_z    jmp     #.next_intf
3265c                 |         if HAVE_MOUSE
3265c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
32660     C7 71 63 F5 |                 xor     htmp, hpar2
32664     3F 00 00 FF 
32668     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3266c     98 FE 9F AD |         if_z    jmp     #.next_intf
32670                 |         end
32670     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
32674     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
32678     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3267c                 | 
3267c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
32680     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
32684     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
32688     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3268c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
32690                 |                 'debug(udec(gp_intf_num))
32690                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
32690     74 FE 9F FD |                 jmp     #.next_intf
32694                 | .hub
32694     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
32698     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3269c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
326a0     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
326a4     60 FE 9F 5D |         if_nz   jmp     #.next_intf
326a8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
326ac     58 FE 9F 5D |         if_nz   jmp     #.next_intf
326b0     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
326b4     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
326b8     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
326bc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
326c0     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
326c4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
326c8                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
326c8     3C FE 9F FD |                 jmp     #.next_intf
326cc                 | 
326cc                 | '------------------------------------------------------------------------------
326cc                 | ' If a newly-connected device is recognized, do whatever is needed to configure
326cc                 | ' it according to its function, or functions. In the case of this boot protocol
326cc                 | ' keyboard/mouse class driver:
326cc                 | ' - SetConfiguration(config_num)
326cc                 | ' - SetProtocol(boot)
326cc                 | ' - SetIdle(indefinite)
326cc                 | ' - Enter the device interrupt IN polling task stage.
326cc                 | '------------------------------------------------------------------------------
326cc                 | ' On entry:
326cc                 | ' On exit:
326cc                 | '------------------------------------------------------------------------------
326cc                 | hset_config
326cc                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
326cc                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
326cc     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
326d0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
326d4     00 00 0C F2 |                 cmp     0-0, #0                 wz
326d8     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
326dc                 |         if HAVE_MOUSE
326dc     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
326e0                 |         end
326e0     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
326e4     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
326e8                 | .set_config
326e8     6C 0E D0 FE |                 loc     ptra, #set_config
326ec     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
326f0     6E ED 03 F1 |                 add     pa, hconfig_base
326f4     F6 8D C3 FA |                 rdbyte  hpar1, pa
326f8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
326fc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
32700     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
32704     A0 02 A0 FD |                 call    #control_write
32708     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3270c     2D 00 64 5D |         if_nz   ret
32710                 | .kbd_config
32710     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
32714     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
32718                 | 
32718     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3271c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
32720     3F 00 00 FF 
32724     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
32728     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3272c                 | 
3272c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
32730     34 0E D0 FE |                 loc     ptra, #set_protocol
32734     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
32738     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3273c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
32740     A0 02 A0 FD |                 call    #control_write
32744     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32748     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3274c     E4 02 90 5D |         if_nz   jmp     #.notify_client
32750     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
32754     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
32758     30 03 B0 FD |                 call    #hset_idle
3275c                 |                 'cmp     retval, #PID_ACK        wz
3275c                 |         'if_nz   mov     hkbd_ep_addr, #0
3275c                 |         'if_nz   jmp     #.notify_client
3275c     A8 99 02 F6 |                 mov     hctwait, _2ms_
32760     EF 02 A0 FD |                 call    #poll_waitx
32764     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
32768     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3276c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
32770     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
32774     2C 03 B0 FD |                 call    #hset_kbdled_report
32778     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3277c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
32780     B0 02 90 5D |         if_nz   jmp     #.notify_client
32784     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
32788     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3278c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
32790     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
32794     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
32798     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3279c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
327a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
327a4     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
327a8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
327ac     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
327b0                 |         if !!HAVE_MOUSE
327b0                 |         end
327b0                 | 
327b0                 | .mouse_config
327b0                 | if HAVE_MOUSE
327b0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
327b4     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
327b8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
327bc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
327c0     3F 00 00 FF 
327c4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
327c8     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
327cc                 | 
327cc                 |                 debug("mouse passed addr check")
327cc                 | 
327cc     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
327d0     00 00 80 FF 
327d4     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
327d8     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
327dc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
327e0     55 02 A0 FD |                 call    #control_read
327e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
327e8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
327ec     44 02 90 5D |         if_nz   jmp     #.notify_client
327f0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
327f4     56 01 00 F6 |                 mov     0-0, total_data
327f8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
327fc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
327fc                 | 
327fc     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
32800     64 0D D0 FE |                 loc     ptra, #set_protocol
32804     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
32808     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3280c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
32810     A0 02 A0 FD |                 call    #control_write
32814     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32818     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3281c     14 02 90 5D |         if_nz   jmp     #.notify_client
32820                 |                 debug("mouse passed SetProtocol")
32820     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
32824     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
32828     60 02 B0 FD |                 call    #hset_idle
3282c                 |                 'cmp     retval, #PID_ACK        wz
3282c                 |         'if_nz   mov     hmouse_ep_addr, #0
3282c                 |         'if_nz   jmp     #.notify_client
3282c                 |                 debug("mouse passed SetIdle")
3282c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
32830     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
32834     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
32838     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3283c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
32840     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
32844     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
32848     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3284c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
32850     3F 00 00 FF 
32854     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
32858     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3285c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
32860     D0 01 90 FD |                 jmp     #.notify_client
32864                 | end
32864                 | .gamepad_config
32864                 | if _HAVE_GAMEPAD
32864     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
32868     00 00 0C F2 |                 cmp     0-0, #0                 wz
3286c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
32870     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
32874     00 70 03 F6 |                 mov     htmp, 0-0
32878     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3287c     3F 00 00 FF 
32880     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
32884     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
32888                 | 
32888     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3288c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
32890     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
32894     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
32898     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3289c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
328a0     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
328a4     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
328a8     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
328ac     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
328b0     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
328b4     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
328b8     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
328bc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
328c0                 | 
328c0                 |                 if EMUPAD_MAX_PLAYER > 0
328c0                 |                 
328c0                 | .rule_loop           
328c0                 |                 end
328c0                 | 
328c0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
328c4     5C 00 90 AD |         if_e    jmp     #.xinput
328c8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
328cc     00 70 03 F6 |                 mov     htmp,0-0
328d0     01 A6 02 FF 
328d4     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
328d8     7C 00 90 AD |         if_e    jmp     #.ps3
328dc                 | 
328dc     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
328e0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
328e4     00 00 80 5F 
328e8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
328ec     03 00 80 AF 
328f0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
328f4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
328f8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
328fc     55 02 A0 FD |                 call    #control_read
32900     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32904     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
32908     00 00 04 56 |         if_nz   mov     0-0, #0
3290c     24 01 90 5D |         if_nz   jmp     #.notify_client
32910     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
32914     56 01 00 F6 |                 mov     0-0, total_data
32918     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3291c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3291c                 | 
3291c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
32920     10 01 90 FD |                 jmp     #.notify_client
32924                 | .xinput
32924     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
32928     2D EF 03 F6 |                 mov     pb,hdev_port
3292c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
32930     03 EE 27 F3 |                 fle     pb,#3
32934     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
32938     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3293c                 | 
3293c     03 B0 06 F6 |                 mov     pkt_data, #3
32940     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
32944     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
32948     5A 00 A0 FD |                 call    #txn_out
3294c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
32950                 | 
32950     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
32954     DC 00 90 FD |                 jmp     #.notify_client
32958                 | .ps3
32958     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3295c     2D EF 03 F6 |                 mov     pb,hdev_port
32960     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
32964     04 EE 27 F3 |                 fle     pb,#4
32968     F7 EF C3 F9 |                 decod   pb
3296c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
32970                 | 
32970     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
32974     00 0C D0 FE |                 loc     ptra, #set_report
32978     01 00 80 FF 
3297c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
32980     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
32984     03 61 5C FC |                 wrword  #48, ptra[wLength]
32988     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3298c     A0 02 A0 FD |                 call    #control_write
32990                 | 
32990     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
32994     E0 0B D0 FE |                 loc     ptra, #set_report
32998     01 00 80 FF 
3299c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
329a0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
329a4     03 09 5C FC |                 wrword  #4, ptra[wLength]
329a8     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
329ac     A0 02 A0 FD |                 call    #control_write
329b0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
329b4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
329b8     00 00 04 56 |         if_nz   mov     0-0, #0
329bc     74 00 90 5D |         if_nz   jmp     #.notify_client
329c0                 | 
329c0     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
329c4     6C 00 90 FD |                 jmp     #.notify_client
329c8                 | end
329c8                 | 
329c8                 | .hub_config
329c8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
329cc     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
329d0     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
329d4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
329d8     3F 00 00 FF 
329dc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
329e0     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
329e4                 | 
329e4     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
329e8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
329ec     26 EF 03 F6 |                 mov     pb, hub_descr_p
329f0     55 02 A0 FD |                 call    #control_read
329f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
329f8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
329fc     34 00 90 5D |         if_nz   jmp     #.notify_client
32a00                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
32a00                 | 
32a00     26 F1 03 F6 |                 mov     ptra, hub_descr_p
32a04     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
32a08     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
32a0c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
32a0c                 | .pwr_loop
32a0c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
32a10     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
32a14     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
32a18     A0 02 A0 FD |                 call    #control_write
32a1c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
32a20                 | 
32a20     B1 99 02 F6 |                 mov     hctwait, _500ms_
32a24     B0 99 02 F1 |                 add     hctwait, _100ms_
32a28     EF 02 A0 FD |                 call    #poll_waitx
32a2c                 | 
32a2c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
32a30     00 00 90 FD |                 jmp     #.notify_client
32a34                 | 
32a34                 | .notify_client
32a34     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
32a38     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
32a3c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
32a3c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
32a3c     2D 00 64 FD |                 ret
32a40                 | 
32a40                 | '------------------------------------------------------------------------------
32a40                 | ' Initialize the keyboard/mouse data area to start-up values.
32a40                 | '------------------------------------------------------------------------------
32a40                 | ' On entry:
32a40                 | ' On exit:
32a40                 | '------------------------------------------------------------------------------
32a40                 | init_kbdm_data
32a40     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
32a44     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
32a48                 | 
32a48     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
32a4c     2B ED 03 F6 |                 mov     pa, cache_end_p
32a50                 | .loop
32a50     61 01 4C FC |                 wrbyte  #0, ptra++
32a54     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
32a58     F4 FF 9F CD |         if_b    jmp     #.loop
32a5c                 |         
32a5c                 |         if EMUPAD_MAX_PLAYER > 0
32a5c                 |         end
32a5c                 | 
32a5c                 | 
32a5c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
32a60                 | .regloop
32a60     00 EC 8F F9 |                 altd    pa
32a64     00 00 04 F6 |                 mov     0-0, #0
32a68     01 EC 07 F1 |                 add     pa, #1
32a6c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
32a70     EC FF 9F 5D |         if_nz   jmp     #.regloop
32a74                 | 
32a74     E1 E1 61 FF 
32a78     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
32a7c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
32a80     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
32a84     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
32a88                 | 
32a88     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
32a8c                 | 
32a8c                 | '------------------------------------------------------------------------------
32a8c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
32a8c                 | ' function.
32a8c                 | '------------------------------------------------------------------------------
32a8c                 | ' On entry:
32a8c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
32a8c                 | '   hpar2 - index number of the target interface.
32a8c                 | ' On exit:
32a8c                 | '------------------------------------------------------------------------------
32a8c                 | hset_idle
32a8c     A8 99 02 F6 |                 mov     hctwait, _2ms_
32a90     EF 02 A0 FD |                 call    #poll_waitx
32a94     D8 0A D0 FE |                 loc     ptra, #set_idle
32a98     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
32a9c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
32aa0     A0 02 80 FD |                 jmp     #control_write
32aa4                 | 
32aa4                 | '------------------------------------------------------------------------------
32aa4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
32aa4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
32aa4                 | '------------------------------------------------------------------------------
32aa4                 | ' On entry:
32aa4                 | '   ep_addr_pid - device address and enpoint for the request.
32aa4                 | ' On exit:
32aa4                 | '   retval - transaction result.
32aa4                 | '------------------------------------------------------------------------------
32aa4                 | hset_kbdled_report
32aa4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
32aa8     CC 0A D0 FE |                 loc     ptra, #set_report
32aac     01 00 80 FF 
32ab0     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
32ab4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
32ab8     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
32abc     27 EF 03 F6 |                 mov     pb, urx_buff_p
32ac0     F7 77 42 FC |                 wrbyte  kb_led_states, pb
32ac4     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
32ac8                 | 
32ac8                 | '------------------------------------------------------------------------------
32ac8                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
32ac8                 | '------------------------------------------------------------------------------
32ac8                 | ' On entry:
32ac8                 | ' On exit:
32ac8                 | '------------------------------------------------------------------------------
32ac8                 | hget_kbd_in_report
32ac8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
32acc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
32ad0     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
32ad4     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
32ad8     CF 02 A0 FD |                 call    #do_int_in
32adc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32ae0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
32ae4                 | 
32ae4     00 90 0F F2 |                 cmp     hpar3, #0               wz
32ae8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
32aec                 | 
32aec     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
32af0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
32af4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
32af8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
32afc                 | 
32afc     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
32b00     18 00 B0 FD |                 call    #hkbd_compare
32b04                 |         if EMUPAD_MAX_PLAYER > 0
32b04                 |         end
32b04                 | 
32b04                 | .led_check
32b04     3B 71 03 F6 |                 mov     htmp, kb_led_states
32b08     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
32b0c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
32b10     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
32b14     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
32b18     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
32b1c                 | 
32b1c                 | '------------------------------------------------------------------------------
32b1c                 | ' Compare current and previous keyboard data buffers for keypress changes.
32b1c                 | '------------------------------------------------------------------------------
32b1c                 | hkbd_compare
32b1c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
32b20     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
32b24     61 73 07 FB |                 rdlong  htmp1, ptra++
32b28     E1 75 07 FB |                 rdlong  htmp2, ptrb++
32b2c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
32b30     61 73 07 FB |                 rdlong  htmp1, ptra++
32b34     E1 75 07 FB |                 rdlong  htmp2, ptrb++
32b38     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
32b3c     2D 00 64 AD |         if_z    ret
32b40                 | 
32b40     B4 13 D0 FE |                 loc     ptra, #hkbd_report
32b44                 | 
32b44                 |                 ' Handle modifiers
32b44     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
32b48     00 87 C7 FA |                 rdbyte  hr1, ptra
32b4c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
32b50     63 86 63 FD |                 mergew  hr1
32b54     08 EC 07 F6 |                 mov     pa,#8
32b58                 | .modloop
32b58     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
32b5c     E8 8C 07 F6 |                 mov     hpar1,#$E8
32b60     F6 8D 83 F1 |                 sub     hpar1,pa
32b64     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
32b68     FB ED 6F FB |                 djnz    pa,#.modloop
32b6c                 | 
32b6c     6F E0 75 FD | .release        modc    _set    wc
32b70                 |                 'alts    hdev_port, #hid_report_p
32b70                 |                 'mov     ptra, hid_report_p
32b70     02 F0 07 F1 |                 add     ptra, #2
32b74     06 EC 07 F6 |                 mov     pa, #6
32b78     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
32b7c     20 00 90 AD |         if_z    jmp     #.rl3
32b80     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
32b84     02 F2 07 F1 |                 add     ptrb, #2
32b88     06 EE 07 F6 |                 mov     pb, #6
32b8c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
32b90     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
32b94     08 00 90 AD |         if_z    jmp     #.rl3
32b98     FC EF 6F FB |                 djnz    pb, #.rl2
32b9c     68 00 B0 FD |                 call    #hkbd_translate
32ba0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
32ba4                 | 
32ba4     00 90 07 F6 |                 mov     hpar3, #0
32ba8     1F 90 27 F4 |                 bith    hpar3, #31
32bac                 | 
32bac     6F 00 74 FD | .press          modc    _clr    wc
32bb0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
32bb4     02 F0 07 F1 |                 add     ptra, #2
32bb8     06 EC 07 F6 |                 mov     pa, #6
32bbc     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
32bc0     20 00 90 AD |         if_z    jmp     #.pl3
32bc4     30 13 F0 FE |                 loc     ptrb, #hkbd_report
32bc8     02 F2 07 F1 |                 add     ptrb, #2
32bcc     06 EE 07 F6 |                 mov     pb, #6
32bd0     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
32bd4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
32bd8     08 00 90 AD |         if_z    jmp     #.pl3
32bdc     FC EF 6F FB |                 djnz    pb, #.pl2
32be0     24 00 B0 FD |                 call    #hkbd_translate
32be4     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
32be8                 | 
32be8     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
32bec     08 13 F0 FE |                 loc     ptrb, #hkbd_report
32bf0     28 02 64 FD |                 setq #1
32bf4     61 73 07 FB |                 rdlong  htmp1, ptra++
32bf8     28 02 64 FD |                 setq #1
32bfc     E1 73 67 FC |                 wrlong  htmp1, ptrb++
32c00     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
32c04                 | 
32c04     2D 00 64 FD |                 ret
32c08                 | 
32c08                 | '------------------------------------------------------------------------------
32c08                 | ' Translate keyboard scancode to ASCII
32c08                 | '------------------------------------------------------------------------------
32c08                 | ' On entry:
32c08                 | '   hpar1 - scancode
32c08                 | '   hpar2 - key modifiers state
32c08                 | '       c - pressed (0) or released (1) flag
32c08                 | ' On exit:
32c08                 | '   hpar1 - bit     31 = 0 pressed, 1 released
32c08                 | '               30..17 = unused
32c08                 | '                   18 = scroll-lock state 
32c08                 | '                   17 = caps-lock state
32c08                 | '                   16 = num-lock state 
32c08                 | '                15..8 = key modifiers state
32c08                 | '                 7..0 = scancode
32c08                 | '------------------------------------------------------------------------------
32c08                 | hkbd_translate
32c08     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
32c0c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
32c10     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
32c14     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
32c18     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
32c1c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
32c20                 | 
32c20                 |         if EMUPAD_MAX_PLAYER > 0
32c20                 | 
32c20                 |         if EMUPAD_BT0_BIT >= 0
32c20                 |         end
32c20                 |         if EMUPAD_BT1_BIT >= 0
32c20                 |         end
32c20                 |         if EMUPAD_BT2_BIT >= 0
32c20                 |         end
32c20                 |         if EMUPAD_BT3_BIT >= 0
32c20                 |         end
32c20                 |         if EMUPAD_BT4_BIT >= 0
32c20                 |         end
32c20                 |         if EMUPAD_BT5_BIT >= 0
32c20                 |         end
32c20                 |         if EMUPAD_BT6_BIT >= 0
32c20                 |         end
32c20                 |         if EMUPAD_BT7_BIT >= 0
32c20                 |         end
32c20                 |         if EMUPAD_BT8_BIT >= 0
32c20                 |         end
32c20                 |         if EMUPAD_BT9_BIT >= 0
32c20                 |         end
32c20                 | 
32c20                 |         end
32c20     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
32c24     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
32c28     1F 8C 47 F4 |                 bitc    hpar1, #31
32c2c                 |         if KEYQUEUE_SIZE > 0
32c2c     C4 09 B0 FE |                 loc pb,#keyq_head
32c30     F7 71 E3 FA |                 rdword htmp,pb
32c34     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
32c38     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
32c3c     B8 75 03 F6 |                 mov htmp2,htmp
32c40     04 74 07 FA |                 mul htmp2,#4
32c44     F7 75 03 F1 |                 add htmp2,pb
32c48     02 74 07 F1 |                 add htmp2,#2
32c4c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
32c50     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
32c54     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
32c58     F7 71 43 5C |         if_nz   wrbyte htmp,pb
32c5c                 |         end
32c5c     2D 00 7C FD |                 ret wcz
32c60                 | 
32c60                 | if HAVE_MOUSE
32c60                 | '------------------------------------------------------------------------------
32c60                 | ' Execute an IN interrupt transaction to poll for mouse activity.
32c60                 | '------------------------------------------------------------------------------
32c60                 | ' On entry:
32c60                 | ' On exit:
32c60                 | '------------------------------------------------------------------------------
32c60                 | hget_mouse_in_report
32c60     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
32c64     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
32c68     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
32c6c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
32c70     CF 02 A0 FD |                 call    #do_int_in
32c74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32c78     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
32c7c                 | 
32c7c     00 90 0F F2 |                 cmp     hpar3, #0               wz
32c80     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
32c84                 | 
32c84     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
32c88     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
32c8c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
32c90     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
32c94                 | 
32c94     27 F1 03 F6 |                 mov     ptra, urx_buff_p
32c98     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
32c9c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
32ca0     01 90 87 31 |         if_ae   sub     hpar3, #1
32ca4                 | 
32ca4     40 09 90 FE |                 loc     pa, #mouse_limits
32ca8     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
32cac                 | 
32cac                 |                 ' load xacc,yacc,zacc
32cac     28 04 64 FD |                 setq    #3-1
32cb0     80 87 07 FB |                 rdlong  hr1,ptrb
32cb4                 |                 ' load limits and outptr
32cb4     28 04 64 FD |                 setq    #3-1
32cb8     F6 73 03 FB |                 rdlong  htmp1,pa
32cbc                 | 
32cbc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
32cc0     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
32cc4     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
32cc8     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
32ccc     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
32cd0     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
32cd4     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
32cd8     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
32cdc                 |               
32cdc                 | 
32cdc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
32ce0     07 70 67 F7 |                 signx   htmp, #7
32ce4     B8 87 03 F1 |                 add     hr1,htmp
32ce8     00 72 0F F2 |                 cmp     htmp1,#0 wz
32cec     B9 87 63 53 |         if_ne   fles    hr1,htmp1
32cf0     00 86 47 53 |         if_ne   fges    hr1,#0
32cf4                 | 
32cf4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
32cf8     07 70 67 F7 |                 signx   htmp, #7
32cfc     B8 89 03 F1 |                 add     hr2,htmp
32d00     00 74 0F F2 |                 cmp     htmp2,#0 wz
32d04     BA 89 63 53 |         if_ne   fles    hr2,htmp2
32d08     00 88 47 53 |         if_ne   fges    hr2,#0
32d0c                 |                 
32d0c                 | 
32d0c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
32d10     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
32d14     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
32d18     B8 8B 03 A1 |         if_z    add     hr3,htmp
32d1c                 | 
32d1c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
32d20     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
32d24                 | 
32d24                 |                 ' write back accumulators
32d24     28 04 64 FD |                 setq    #3-1
32d28     80 87 67 FC |                 wrlong  hr1,ptrb
32d2c                 |                 ' if outptr set, write X/Y words
32d2c     00 76 0F F2 |                 cmp htmp3,#0                    wz
32d30     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
32d34     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
32d38     2D 00 64 FD |                 ret
32d3c                 | end
32d3c                 | 
32d3c                 | '------------------------------------------------------------------------------
32d3c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
32d3c                 | '------------------------------------------------------------------------------
32d3c                 | ' On entry:
32d3c                 | ' On exit:
32d3c                 | '------------------------------------------------------------------------------
32d3c                 | if _HAVE_GAMEPAD
32d3c                 | hget_gp_in_report
32d3c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
32d40     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
32d44                 | 
32d44     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
32d48     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
32d4c     00 90 E3 F8 |                 getbyte hpar3
32d50     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
32d54     CF 02 A0 FD |                 call    #do_int_in
32d58     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32d5c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
32d60                 | 
32d60     00 90 0F F2 |                 cmp     hpar3, #0               wz
32d64     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
32d68                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
32d68                 | 
32d68     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
32d6c     00 70 E3 F8 |                 getbyte htmp                            ' |
32d70     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
32d74     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
32d78     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
32d7c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
32d80     B8 01 C0 F8 |                 setbyte htmp                            ' |
32d84                 | 
32d84                 | ' Note: the following code compares the current and previous reports
32d84                 | ' and process the data if there are changes to ease the debug output.
32d84                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
32d84                 | ' gpPreReport buffer.
32d84                 | 
32d84                 |                 ' ----- start of block to remove
32d84                 |                 {
32d84                 |                 }
32d84                 |                 ' ----- end of block to remove
32d84     F4 04 90 FE |                 loc pa,#hpad_translate
32d88     2A EC 63 FD |                 push pa
32d8c                 | 
32d8c                 |                 ' FALL THROUGH !!!!
32d8c                 | 
32d8c                 | '------------------------------------------------------------------------------
32d8c                 | ' Decode controller report
32d8c                 | '------------------------------------------------------------------------------
32d8c                 | hid_decode
32d8c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
32d8c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
32d90     00 04 00 FF 
32d94     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
32d98                 | 
32d98     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
32d9c                 | 
32d9c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
32da0     00 2A E3 F8 |                 getbyte hidr_type
32da4     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
32da8     34 02 90 AD |         if_z    jmp     #hpad_xinput
32dac     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
32db0     1C 03 90 AD |         if_z    jmp     #hpad_ps3
32db4     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
32db8     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
32dbc     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
32dc0                 |                 
32dc0                 | 
32dc0                 | '------------------------------------------------------------------------------
32dc0                 | ' Handle HID controller (or mouse now
32dc0                 | ' On entry:
32dc0                 | '   ptrb - controller report
32dc0                 | '------------------------------------------------------------------------------
32dc0                 | hpad_hid
32dc0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
32dc4     F7 F1 03 F6 |                 mov     ptra, pb
32dc8     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
32dcc     00 EC 03 F6 |                 mov     pa, 0-0
32dd0                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
32dd0     19 2A 3B FF 
32dd4     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
32dd8                 | 
32dd8                 | .next
32dd8     00 EC 5F F2 |                 cmps    pa, #0      wcz
32ddc     2D 00 7C ED |         if_be   ret     wcz
32de0                 | 
32de0     61 8D C7 FA |                 rdbyte  hpar1, ptra++
32de4     01 EC 87 F1 |                 sub     pa, #1
32de8     00 8E 07 F6 |                 mov     hpar2, #0
32dec                 | 
32dec     C6 71 03 F6 |                 mov     htmp, hpar1
32df0     03 70 07 F5 |                 and     htmp, #$03
32df4     01 70 0F F2 |                 cmp     htmp, #1    wz
32df8     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
32dfc     07 8E 67 A7 |         if_z    signx   hpar2,#7
32e00     01 EC 87 A1 |         if_z    sub     pa, #1
32e04     02 70 0F F2 |                 cmp     htmp, #2    wz
32e08     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
32e0c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
32e10     02 EC 87 A1 |         if_z    sub     pa, #2
32e14     03 70 0F F2 |                 cmp     htmp, #3    wz
32e18     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
32e1c     04 EC 87 A1 |         if_z    sub     pa, #4
32e20                 | 
32e20     FC 8C 07 F5 |                 and     hpar1, #$FC
32e24                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
32e24                 | 
32e24     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
32e28     0C 01 90 AD |         if_z    jmp     #.report_id
32e2c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
32e30     24 01 90 AD |         if_z    jmp     #.usage_page
32e34     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
32e38     2C 01 90 AD |         if_z    jmp     #.usage
32e3c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
32e40     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
32e44     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
32e48     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
32e4c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
32e50     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
32e54     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
32e58     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
32e5c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
32e60     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
32e64     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
32e68     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
32e6c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
32e70     64 FF 9F 5D |         if_nz   jmp     #.next
32e74                 | 
32e74     D8 1D A7 FB |                 tjf     hidr_state,#.next
32e78                 | 
32e78     03 8E 07 F5 |                 and     hpar2, #$03
32e7c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
32e80     18 00 90 5D |         if_nz   jmp     #.skip
32e84                 | 
32e84     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
32e88     20 00 90 AD |         if_z    jmp     #.axes
32e8c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
32e90     5C 00 90 AD |         if_z    jmp     #.hats
32e94     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
32e98     70 00 90 AD |         if_z    jmp     #.buttons
32e9c                 | .skip
32e9c     8F 71 03 F6 |                 mov     htmp, hidr_size
32ea0     90 71 03 FA |                 mul     htmp, hidr_count
32ea4     B8 23 03 F1 |                 add     hidr_offset, htmp
32ea8     2C FF 9F FD |                 jmp     #.next
32eac                 | .axes
32eac                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
32eac     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
32eb0     90 87 03 F6 |                 mov     hr1, hidr_count
32eb4                 | .l1
32eb4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
32eb8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
32ebc     04 03 B0 FD |                 call    #hpad_getbits
32ec0     64 03 B0 FD |                 call    #hpad_normalize
32ec4     06 84 1F F2 |                 cmp     hr0, #6         wcz
32ec8     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
32ecc     00 88 43 C8 |         if_b    getnib  hr2
32ed0     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
32ed4     5F 01 20 C9 |         if_b    setword retval
32ed8     01 84 07 C1 |         if_b    add     hr0, #1
32edc     8F 23 03 F1 |                 add     hidr_offset, hidr_size
32ee0     F4 87 6F FB |                 djnz    hr1, #.l1
32ee4                 | 
32ee4     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
32ee8     01 1C 07 F6 |                 mov     hidr_state, #1
32eec     E8 FE 9F FD |                 jmp     #.next
32ef0                 | .hats
32ef0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
32ef0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
32ef4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
32ef8     C8 02 B0 FD |                 call    #hpad_getbits
32efc     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
32f00     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
32f04     01 1C 07 F6 |                 mov     hidr_state, #1
32f08     90 FF 9F FD |                 jmp     #.skip
32f0c                 | .buttons
32f0c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
32f0c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
32f10     8F 8F 03 F6 |                 mov     hpar2, hidr_size
32f14     90 8F 03 FA |                 mul     hpar2, hidr_count
32f18     A8 02 B0 FD |                 call    #hpad_getbits
32f1c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
32f20     B8 BF 62 F0 |                 shl     retval, htmp
32f24     5F 17 43 F5 |                 or      hidr_buttons, retval
32f28     90 71 03 F1 |                 add     htmp, hidr_count
32f2c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
32f30     01 1C 07 F6 |                 mov     hidr_state, #1
32f34     64 FF 9F FD |                 jmp     #.skip
32f38                 | .report_id
32f38     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
32f3c     2D 00 7C 5D |         if_nz   ret     wcz
32f40     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
32f44     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
32f48     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
32f4c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
32f50     01 F2 87 51 |         if_nz   sub     ptrb,#1
32f54     80 FE 9F FD |                 jmp     #.next
32f58                 | .usage_page
32f58     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
32f5c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
32f60     04 1C 07 A6 |         if_z    mov     hidr_state, #4
32f64     70 FE 9F FD |                 jmp     #.next
32f68                 | .usage
32f68     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
32f6c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
32f70     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
32f74     01 1C 07 A6 |         if_z    mov     hidr_state, #1
32f78     5C FE 9F AD |         if_z    jmp     #.next
32f7c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
32f80     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
32f84     01 1C 07 A6 |         if_z    mov     hidr_state, #1
32f88     4C FE 9F AD |         if_z    jmp     #.next
32f8c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
32f90     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
32f94     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
32f98     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
32f9c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
32fa0     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
32fa4     10 00 90 AD |         if_z    jmp     #.usage_axis
32fa8     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
32fac     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
32fb0     03 1C 07 A6 |         if_z    mov     hidr_state, #3
32fb4     20 FE 9F FD |                 jmp     #.next
32fb8                 | .usage_axis
32fb8     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
32fbc     18 FE 9F CD |         if_b    jmp     #.next
32fc0     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
32fc4     C7 01 00 F8 |                 setnib  hpar2
32fc8                 | 
32fc8     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
32fcc     C7 8F C3 F9 |                 decod   hpar2
32fd0     C7 0F 43 F5 |                 or      hidr_flags, hpar2
32fd4                 | 
32fd4     01 24 07 F1 |                 add     hidr_usage_idx, #1
32fd8     02 1C 07 F6 |                 mov     hidr_state, #2
32fdc     F8 FD 9F FD |                 jmp     #.next
32fe0                 | 
32fe0                 | '------------------------------------------------------------------------------
32fe0                 | ' Handle XInput controller
32fe0                 | ' On entry:
32fe0                 | '   ptrb - controller report
32fe0                 | '------------------------------------------------------------------------------
32fe0                 | '   Default implementation translates the report to a pseudo-defacto hid
32fe0                 | '   standard and jumps to hpad_translate for actions.
32fe0                 | '   Implementors may take specific actions for this kind of controller.
32fe0                 | '------------------------------------------------------------------------------
32fe0                 | hpad_xinput
32fe0     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
32fe4     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
32fe8     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
32fec     14 70 0F F2 |                 cmp     htmp, #$14      wz
32ff0     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
32ff4                 | 
32ff4                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
32ff4                 | 
32ff4     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
32ff8     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
32ffc                 | 
32ffc     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
33000     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
33004     5F BF 22 F6 |                 not     retval
33008     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3300c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
33010     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
33014     5F BF 22 F6 |                 not     retval
33018     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3301c                 | 
3301c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
33020     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
33024     C0 BE 1E F2 |                 cmp     retval, #192    wcz
33028     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3302c     F8 01 B0 FD |                 call    #hpad_normalize
33030     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
33034     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
33038     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3303c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
33040     E4 01 B0 FD |                 call    #hpad_normalize
33044     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
33048                 | 
33048     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3304c     81 BF E6 FA |                 rdword  retval, ptrb[1]
33050     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
33054     00 16 47 F4 |                 bitc    hidr_buttons, #0
33058     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3305c     01 16 47 F4 |                 bitc    hidr_buttons, #1
33060     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
33064     02 16 47 F4 |                 bitc    hidr_buttons, #2
33068     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3306c     03 16 47 F4 |                 bitc    hidr_buttons, #3
33070     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
33074     04 16 47 F4 |                 bitc    hidr_buttons, #4
33078     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3307c     05 16 47 F4 |                 bitc    hidr_buttons, #5
33080     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
33084     08 16 47 F4 |                 bitc    hidr_buttons, #8
33088     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3308c     09 16 47 F4 |                 bitc    hidr_buttons, #9
33090     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
33094     0A 16 47 F4 |                 bitc    hidr_buttons, #10
33098     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3309c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
330a0     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
330a4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
330a8                 | 
330a8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
330ac     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
330b0     7A BB 7A FF 
330b4     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
330b8     F9 FF 7F FF 
330bc     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
330c0     B9 71 5F F9 |                 altgn   htmp, #htmp1
330c4     00 70 43 F8 |                 getnib  htmp
330c8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
330cc                 | 
330cc     AC 01 90 FD |                 jmp     #hpad_translate
330d0                 | 
330d0                 | '------------------------------------------------------------------------------
330d0                 | ' Handle PS3 controller
330d0                 | ' On entry:
330d0                 | '   ptrb - controller report
330d0                 | '------------------------------------------------------------------------------
330d0                 | '   Default implementation translates the report to a pseudo-defacto hid
330d0                 | '   standard and jumps to hpad_translate for actions.
330d0                 | '   Implementors may take specific actions for this kind of controller.
330d0                 | '------------------------------------------------------------------------------
330d0                 | hpad_ps3
330d0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
330d4     01 70 0F F2 |                 cmp     htmp, #$01      wz
330d8     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
330dc                 | 
330dc                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
330dc                 | 
330dc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
330e0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
330e4     40 01 B0 FD |                 call    #hpad_normalize
330e8     5F 11 23 F9 |                 setword hidr_axis, retval, #0
330ec     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
330f0     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
330f4     30 01 B0 FD |                 call    #hpad_normalize
330f8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
330fc     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
33100     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
33104     20 01 B0 FD |                 call    #hpad_normalize
33108     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3310c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
33110     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
33114     10 01 B0 FD |                 call    #hpad_normalize
33118     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3311c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
33120     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
33124                 | 
33124     08 8C 07 F6 |                 mov     hpar1, #8
33128     13 8E 07 F6 |                 mov     hpar2, #19
3312c     94 00 B0 FD |                 call    #hpad_getbits
33130                 | 
33130     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
33134     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
33138     00 16 47 F4 |                 bitc    hidr_buttons, #0
3313c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
33140     01 16 47 F4 |                 bitc    hidr_buttons, #1
33144     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
33148     02 16 47 F4 |                 bitc    hidr_buttons, #2
3314c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
33150     03 16 47 F4 |                 bitc    hidr_buttons, #3
33154     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
33158     04 16 47 F4 |                 bitc    hidr_buttons, #4
3315c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
33160     05 16 47 F4 |                 bitc    hidr_buttons, #5
33164     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
33168     06 16 47 F4 |                 bitc    hidr_buttons, #6
3316c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
33170     07 16 47 F4 |                 bitc    hidr_buttons, #7
33174     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
33178     08 16 47 F4 |                 bitc    hidr_buttons, #8
3317c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
33180     09 16 47 F4 |                 bitc    hidr_buttons, #9
33184     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
33188     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3318c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
33190     0B 16 47 F4 |                 bitc    hidr_buttons, #11
33194     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
33198     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3319c                 | 
3319c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
331a0     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
331a4     09 FA 79 FF 
331a8     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
331ac     FF FA 7F FF 
331b0     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
331b4     B9 71 5F F9 |                 altgn   htmp, #htmp1
331b8     00 70 43 F8 |                 getnib  htmp
331bc     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
331c0                 | 
331c0     B8 00 90 FD |                 jmp     #hpad_translate
331c4                 | 
331c4                 | '------------------------------------------------------------------------------
331c4                 | ' Read bits from report data buffer
331c4                 | '------------------------------------------------------------------------------
331c4                 | ' On entry:
331c4                 | '   PTRB - report buffer
331c4                 | '   hpar1 - start bit
331c4                 | '   hpar2 - number of bits
331c4                 | ' On exit:
331c4                 | '   retval - bits
331c4                 | '------------------------------------------------------------------------------
331c4                 | hpad_getbits
331c4     C6 71 03 F6 |                 mov     htmp, hpar1
331c8     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
331cc     F9 71 03 F1 |                 add     htmp, ptrb
331d0     B8 BF 02 FB |                 rdlong  retval, htmp
331d4                 | 
331d4     C6 73 03 F6 |                 mov     htmp1, hpar1
331d8     07 72 07 F5 |                 and     htmp1, #$07     ' shift
331dc     B9 BF 42 F0 |                 shr     retval, htmp1
331e0                 | 
331e0     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
331e4     10 00 90 1D |         if_a    jmp     #.l1
331e8                 | 
331e8     C7 8F C3 F9 |                 decod   hpar2
331ec     01 8E 87 F1 |                 sub     hpar2, #1
331f0     C7 BF 02 F5 |                 and     retval, hpar2
331f4     2D 00 64 FD |                 ret
331f8                 | .l1
331f8     FF 7F 00 FF 
331fc     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
33200     03 70 07 F1 |                 add     htmp, #3
33204     B8 75 03 FB |                 rdlong  htmp2, htmp
33208     18 8E 87 F1 |                 sub     hpar2, #24
3320c     C7 8F C3 F9 |                 decod   hpar2
33210     01 8E 87 F1 |                 sub     hpar2, #1
33214     B9 75 43 F0 |                 shr     htmp2, htmp1
33218     C7 75 03 F5 |                 and     htmp2, hpar2
3321c     18 74 67 F0 |                 shl     htmp2, #24
33220     BA BF 42 F5 |                 or      retval, htmp2
33224     2D 00 64 FD |                 ret
33228                 | 
33228                 | '------------------------------------------------------------------------------
33228                 | ' Normalize value to signed word (-32768 / 32767)
33228                 | '------------------------------------------------------------------------------
33228                 | ' On entry:
33228                 | '   retval - value to normalize
33228                 | '   hidr_lminmax - min (word 1) max (word 0) value range
33228                 | '   - or -
33228                 | '   hidr_pminmax - min (word 1) max (word 0) value range
33228                 | '   hidr_size - value bits length
33228                 | ' On exit:
33228                 | '   retval - normalized value
33228                 | '------------------------------------------------------------------------------
33228                 | hpad_normalize
33228     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3322c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
33230     2D 00 64 AD |         if_z    ret
33234     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
33238     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3323c     0F 72 77 F7 |                 signx   htmp1, #15      wc
33240     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
33244     00 BE 66 C7 |         if_c    signx   retval, #0-0
33248     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3324c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
33250     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
33254     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
33258     B8 71 53 F6 |                 abs     htmp            wc
3325c     1F BE 0E F4 |                 testb   retval, #31     wz
33260     5F BF 42 F6 |                 abs     retval
33264     B8 BF 12 FD |                 qdiv    retval, htmp
33268     18 BE 62 FD |                 getqx   retval
3326c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
33270     C0 FF 7F FF 
33274     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
33278     2D 00 64 FD |                 ret
3327c                 | 
3327c                 | '------------------------------------------------------------------------------
3327c                 | ' Perform controller actions
3327c                 | ' On entry:
3327c                 | '    hidr_id        report id
3327c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3327c                 | '                      X = hidr_axis+0, #0
3327c                 | '                      Y = hidr_axis+0, #1
3327c                 | '                      Z = hidr_axis+1, #0
3327c                 | '                     RX = hidr_axis+1, #1
3327c                 | '                     RY = hidr_axis+2, #0
3327c                 | '                     RZ = hidr_axis+2, #1
3327c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3327c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3327c                 | '
3327c                 | '                     -------3 -------2 -------1 -------0 byte
3327c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3327c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3327c                 | '                                zyx||| |||||||| ++++++++ n. buttons
3327c                 | '                                |||||| ||||++++--------- n. axes
3327c                 | '                                |||||| ++++------------- n. hats
3327c                 | '                                ++++++------------------ valid axes
3327c                 | '------------------------------------------------------------------------------
3327c                 | hpad_translate
3327c                 | 
3327c                 | 
3327c                 |         if HAVE_HIDPAD
3327c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
33280     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
33284     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
33288     01 70 E7 F2 |                 cmpsub  htmp,#1
3328c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
33290     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
33294     2D 00 7C 3D |         if_ae   ret     wcz
33298     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3329c     B8 F3 03 F1 |                 add     ptrb,htmp
332a0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
332a4     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
332a8     28 0C 64 FD |                 setq    #7-1
332ac     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
332b0                 |         end
332b0                 | 
332b0                 | 
332b0                 |         if EMUPAD_MAX_PLAYER > 0
332b0                 | .emupad_no_hat
332b0                 |         if EMUPAD_BT0_BIT >= 0
332b0                 |         end
332b0                 |         if EMUPAD_BT1_BIT >= 0
332b0                 |         end
332b0                 |         if EMUPAD_BT2_BIT >= 0
332b0                 |         end
332b0                 |         if EMUPAD_BT3_BIT >= 0
332b0                 |         end
332b0                 |         if EMUPAD_BT4_BIT >= 0
332b0                 |         end
332b0                 |         if EMUPAD_BT5_BIT >= 0
332b0                 |         end
332b0                 |         if EMUPAD_BT6_BIT >= 0
332b0                 |         end
332b0                 |         if EMUPAD_BT7_BIT >= 0
332b0                 |         end
332b0                 |         if EMUPAD_BT8_BIT >= 0
332b0                 |         end
332b0                 |         if EMUPAD_BT9_BIT >= 0
332b0                 |         end
332b0                 | .emupad_slot_over
332b0                 |         end
332b0                 | 
332b0                 |         if 0
332b0                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
332b0                 | 
332b0                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
332b0                 | 
332b0                 |         end
332b0     2D 00 64 FD |                 ret
332b4                 | end
332b4                 | 
332b4                 | if EMUPAD_MAX_PLAYER > 0
332b4                 | '------------------------------------------------------------------------------
332b4                 | ' Clear EmuPad state
332b4                 | '------------------------------------------------------------------------------
332b4                 | emupad_reset
332b4                 | 
332b4                 | '------------------------------------------------------------------------------
332b4                 | ' Get EmuPad Player number for current device (into retval)
332b4                 | ' Z flag is also set if current device is valid
332b4                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
332b4                 | '------------------------------------------------------------------------------
332b4                 | emupad_getnum
332b4                 | .loop
332b4                 | '------------------------------------------------------------------------------
332b4                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
332b4                 | '------------------------------------------------------------------------------
332b4                 | emupad_discon
332b4                 | .loop         
332b4                 |         
332b4                 |         ' FALL THROUGH!!!
332b4                 | 
332b4                 | '------------------------------------------------------------------------------
332b4                 | ' Update EmuPad reports (all of them...)
332b4                 | '------------------------------------------------------------------------------
332b4                 | emupad_write_reports
332b4                 | .devloop
332b4                 | 
332b4                 | end
332b4                 | 
332b4                 | 
332b4                 | '------------------------------------------------------------------------------
332b4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
332b4                 | '------------------------------------------------------------------------------
332b4                 | ' On entry:
332b4                 | ' On exit:
332b4                 | '------------------------------------------------------------------------------
332b4                 | hget_hub_status
332b4     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
332b8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
332bc     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
332c0     01 90 2F F9 |                 setword hpar3, #1, #1
332c4     CF 02 A0 FD |                 call    #do_int_in
332c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
332cc     0C 00 90 AD |         if_z    jmp     #.data
332d0     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
332d4     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
332d8     2D 00 64 FD |                 ret
332dc                 | .data
332dc     00 90 0F F2 |                 cmp     hpar3, #0               wz
332e0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
332e4                 | 
332e4     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
332e8     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
332ec     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
332f0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
332f4                 |                 debug(ubin_long(hub_status_chg))
332f4                 | 
332f4     01 5A 06 F6 |                 mov     hdev_port, #1
332f8                 | .loop
332f8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
332fc     0C 00 B0 AD |         if_x1   call    #hub_port_handler
33300     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
33304     F0 FF 9F 3D |         if_nc   jmp     #.loop
33308     2D 00 64 FD |                 ret
3330c                 | 
3330c                 | hub_port_handler
3330c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
33310     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
33314     27 EF 03 F6 |                 mov     pb, urx_buff_p
33318     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3331c     55 02 A0 FD |                 call    #control_read
33320     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
33324                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
33324                 | 
33324     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
33328     50 01 90 5D |         if_x0   jmp     #.other
3332c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
33330     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
33334     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
33338     A0 02 A0 FD |                 call    #control_write
3333c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
33340     7C 01 90 5D |         if_x0   jmp     #.disconnect
33344     B0 99 02 F6 |                 mov     hctwait, _100ms_
33348     EF 02 A0 FD |                 call    #poll_waitx
3334c                 | 
3334c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
33350     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
33354     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
33358     A0 02 A0 FD |                 call    #control_write
3335c                 | 
3335c     02 76 07 F6 |                 mov     htmp3, #2
33360                 | .wait_reset
33360     AC 99 02 F6 |                 mov     hctwait, _8ms_
33364     EF 02 A0 FD |                 call    #poll_waitx
33368     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3336c     27 EF 03 F6 |                 mov     pb, urx_buff_p
33370     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
33374     55 02 A0 FD |                 call    #control_read
33378     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3337c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
33380     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
33384                 | 
33384     10 02 D0 FE |                 loc     ptra, #clr_port_feat
33388     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3338c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
33390     A0 02 A0 FD |                 call    #control_write
33394                 | 
33394     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
33398                 | .wait_recover
33398     A7 99 02 F6 |                 mov     hctwait, _1ms_
3339c     EF 02 A0 FD |                 call    #poll_waitx
333a0     FD 71 6F FB |                 djnz    htmp,#.wait_recover
333a4                 | 
333a4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
333a8     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
333ac     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
333b0                 | 
333b0     00 08 00 FF 
333b4     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
333b8     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
333bc     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
333c0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
333c4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
333c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
333cc     48 01 90 5D |         if_nz   jmp     #.done
333d0                 | .get_dev_desc
333d0     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
333d4     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
333d8     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
333dc     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
333e0     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
333e4     01 71 57 FC |                 wrword  htmp, ptra[wValue]
333e8     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
333ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
333f0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
333f4     AC 99 02 F6 |                 mov     hctwait, _8ms_
333f8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
333fc     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
33400     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
33404     BE 00 A0 FD |                 call    #calc_crc5
33408     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3340c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
33410     F7 AD C2 FA |                 rdbyte  total_data, pb
33414     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
33418     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3341c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33420     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
33424     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
33428     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3342c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3342c     9F 99 02 F6 |                 mov     hctwait, _500us_
33430     EF 02 A0 FD |                 call    #poll_waitx
33434     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
33438     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3343c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
33440     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
33444     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33448     CC 00 90 5D |         if_nz   jmp     #.done
3344c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
33450     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
33454     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
33458     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3345c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
33460     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
33464     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
33468     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3346c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
33470     A4 00 90 CD |         if_b    jmp     #.done
33474     6C F0 BF FD |                 call    #hparse_con_desc
33478     9C 00 90 FD |                 jmp     #.done
3347c                 | 
3347c                 | .other
3347c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
33480     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
33484     28 00 90 AD |         if_x1   jmp     #.reset_feature
33488     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3348c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
33490     1C 00 90 AD |         if_x1   jmp     #.reset_feature
33494     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
33498     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3349c     10 00 90 AD |         if_x1   jmp     #.reset_feature
334a0     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
334a4     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
334a8     04 00 90 AD |         if_x1   jmp     #.reset_feature
334ac     68 00 90 FD |                 jmp     #.done
334b0                 | .reset_feature
334b0     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
334b4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
334b8     A0 02 A0 FD |                 call    #control_write
334bc     58 00 90 FD |                 jmp     #.done
334c0                 | .disconnect
334c0                 | 
334c0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
334c4     00 70 E3 F8 |                 getbyte htmp
334c8     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
334cc     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
334d0     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
334d4     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
334d8     00 76 06 A6 |         if_z    mov     kb_led_states, #0
334dc     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
334e0                 |         if EMUPAD_MAX_PLAYER > 0
334e0                 |         end
334e0                 |         if HAVE_MOUSE
334e0     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
334e4     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
334e8     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
334ec                 |         end
334ec                 |         if HAVE_HIDPAD
334ec     14 0A F0 FE |                 loc ptrb,#hidpad_report
334f0     2D 71 03 F6 |                 mov htmp,hdev_port
334f4     01 70 E7 F2 |                 cmpsub htmp,#1
334f8     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
334fc     B8 F3 03 F1 |                 add ptrb,htmp
33500     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
33504     80 01 6C FC |                 wrlong #0,ptrb
33508                 |         end
33508                 | 
33508     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3350c     00 00 C4 F8 |                 setbyte #0
33510     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33514     00 00 04 F6 |                 mov     0-0, #0
33518                 | 
33518                 | .done
33518     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3351c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
33520     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
33524     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
33528     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3352c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
33530                 | 
33530     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
33534     27 EF 03 F6 |                 mov     pb, urx_buff_p
33538     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3353c     55 02 A0 FD |                 call    #control_read
33540     00 69 06 FB |                 rdlong  hub_port_status, ptra
33544                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
33544     2D 00 64 FD |                 ret
33548                 | 
33548                 | '------------------------------------------------------------------------------
33548                 | ' Partially populated SETUP packets
33548                 | '------------------------------------------------------------------------------
33548     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
33549     06          |                 byte    REQ_GET_DESC
3354a     00 01       |                 word    TYPE_DEVICE << 8
3354c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3354e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
33550     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
33551     06          |                 byte    REQ_GET_DESC
33552     00 02       |                 word    TYPE_CONFIG << 8
33554     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
33556     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
33558     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
33559     09          |                 byte    REQ_SET_CONFIG
3355a     00 00       |                 word    0       ' Configuration value
3355c     00 00       |                 word    0       ' Zero
3355e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
33560     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
33561     05          |                 byte    REQ_SET_ADDR
33562     00 00       |                 word    0       ' Zero
33564     00 00       |                 word    0       ' Zero
33566     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
33568                 | '------------------------------------------------------------------------------
33568                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
33568                 | ' wValue field dictates which protocol should be used.
33568                 | '
33568                 | ' When initialized, all devices default to report protocol. However the host
33568                 | ' should not make any assumptions about the device state and should set the
33568                 | ' desired protocol whenever initializing a device.
33568                 | '------------------------------------------------------------------------------
33568     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
33569     0B          |                 byte    HID_SET_PROTO
3356a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3356c                 |                                                 ' (HID 1.11 Section 7.2.6).
3356c     00 00       |                 word    0               ' Interface index number.
3356e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
33570                 | '------------------------------------------------------------------------------
33570     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
33571     0A          |                 byte    HID_SET_IDLE
33572     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
33574                 |                                         ' reporting until a change is detected in the report data
33574                 | 
33574                 |                                         ' (HID 1.11 Section 7.2.4).
33574     00 00       |                 word    0       ' Interface index number.
33576     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
33578     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
33579     09          |                 byte    HID_SET_REPORT
3357a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3357c                 |                                         ' (HID 1.11 Section 7.2.2).
3357c     00 00       |                 word    0       ' Interface index number.
3357e     00 00       |                 word    0       ' Size of the report, in bytes.
33580     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
33581     06          |                 byte    REQ_GET_DESC
33582     00 22       |                 word    TYPE_REPORT << 8
33584     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
33586     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
33588                 | '------------------------------------------------------------------------------
33588     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
33589     06          |                 byte    REQ_GET_DESC
3358a     00 29       |                 word    TYPE_HUB << 8
3358c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3358e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
33590     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
33591     03          |                 byte    REQ_SET_FEATURE
33592     00 00       |                 word    0       ' port power
33594     01 00       |                 word    1       ' Port index number (1+)
33596     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
33598     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
33599     01          |                 byte    REQ_CLEAR_FEATURE
3359a     00 00       |                 word    0       ' port power
3359c     01 00       |                 word    1       ' Port index number (1+)
3359e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
335a0     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
335a1     00          |                 byte    REQ_GET_STATUS
335a2     00 00       |                 word    0
335a4     01 00       |                 word    1       ' Port index number (1+)
335a6     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
335a8                 | '------------------------------------------------------------------------------
335a8                 | if _HAVE_GAMEPAD
335a8     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
335ac                 | ps3_command_buff
335ac     00 00 00 00 
335b0     00          |                 byte    $00, $00, $00, $00, $00
335b1     00 00 00 00 
335b5     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
335b6     FF 27 10 00 
335ba     32          |                 byte    $FF, $27, $10, $00, $32
335bb     FF 27 10 00 
335bf     32          |                 byte    $FF, $27, $10, $00, $32
335c0     FF 27 10 00 
335c4     32          |                 byte    $FF, $27, $10, $00, $32
335c5     FF 27 10 00 
335c9     32          |                 byte    $FF, $27, $10, $00, $32
335ca     00 00 00 00 
335ce     00          |                 byte    $00, $00, $00, $00, $00
335cf     00 00 00 00 
335d3     00          |                 byte    $00, $00, $00, $00, $00
335d4     00 00 00 00 
335d8     00          |                 byte    $00, $00, $00, $00, $00
335d9     00 00 00    |                 byte    $00, $00, $00
335dc                 | '------------------------------------------------------------------------------
335dc     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
335df                 |                                         ' 0x01 All blinking
335df                 |                                         ' 0x02 1 flashes, then on
335df                 |                                         ' 0x03 2 flashes, then on
335df                 |                                         ' 0x04 3 flashes, then on
335df                 |                                         ' 0x05 4 flashes, then on
335df                 |                                         ' 0x06 1 on
335df                 |                                         ' 0x07 2 on
335df                 |                                         ' 0x08 3 on
335df                 |                                         ' 0x09 4 on
335df                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
335df                 |                                         ' 0x0B Blinking*
335df                 |                                         ' 0x0C Slow blinking*
335df                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
335df     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
335e2     00          |                 byte    $00             ' Left rumble
335e3     00          |                 byte    $00             ' Right rumble
335e4     00 00 00    |                 byte    $00, $00, $00
335e7     00          | end
335e8                 | alignl
335e8                 | 
335e8                 | if HAVE_MOUSE
335e8     00 00 00 00 
335ec     00 00 00 00 | mouse_limits long 0[2]
335f0     00 00 00 00 | mouse_outptr long 0
335f4                 | end
335f4                 | 
335f4                 | if KEYQUEUE_SIZE > 0
335f4     00          | keyq_head byte 0
335f5     00          | keyq_tail byte 0
335f6     00 00 00 00 
      ...             
337f2     00 00 00 00 
337f6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
337f8                 | alignl
337f8                 | end
337f8                 | 
337f8                 | if EMUPAD_MAX_PLAYER > 0
337f8                 | emupad_rule_buffer
337f8                 | if EMUPAD_BUILTIN_RULES
337f8                 | file "padmap_builtin.dat"
337f8                 | end
337f8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
337f8                 | '' Default rule directly follows!
337f8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
337f8                 | end
337f8                 | 
337f8                 | '------------------------------------------------------------------------------
337f8                 | ' The USB data cache area gets zero-filled at every device disconnect
337f8                 | '------------------------------------------------------------------------------
337f8                 | usb_cache_start
337f8                 | 
337f8                 | ' HID descriptor and report buffers
337f8                 | if !!OVERLAP_MEMORY
337f8     00 00 00 00 
      ...             
33ef0     00 00 00 00 
33ef4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
33ef8                 | end
33ef8     00 00 00 00 
33efc     00 00 00 00 | hkbd_report     byte    0[8]
33f00     00 00 00 00 | hkbd_led_rep    byte    0
33f04                 | alignl
33f04                 | 
33f04                 | if HAVE_HIDPAD
33f04     00 00 00 00 
      ...             
33fc0     00 00 00 00 
33fc4     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
33fc8                 | end
33fc8                 | 
33fc8                 | ' HUB descriptor
33fc8     00          | hub_descr       byte    0   ' bDescLength
33fc9     00          |                 byte    0   ' bDescriptorType
33fca     00          |                 byte    0   ' bNbrPorts
33fcb     00 00       |                 word    0   ' wHubCharacteristics
33fcd     00          |                 byte    0   ' bPwrOn2PwrGood
33fce     00          |                 byte    0   ' bHubContrCurrent
33fcf     00          |                 byte    0   ' DeviceRemoveable
33fd0     00          |                 byte    0   ' PortPwrCtrlMask
33fd1                 | 
33fd1                 | usb_cache_end
33fd1                 | 
33fd1                 | if HAVE_MOUSE
33fd1     00 00 00 00 | mouse_xacc      long 0
33fd5     00 00 00 00 | mouse_yacc      long 0
33fd9     00 00 00 00 | mouse_zacc      long 0
33fdd     00          | mouse_bstate    byte 0
33fde     00          | mouse_lpending  byte 0
33fdf     00          | mouse_rpending  byte 0
33fe0     00          | mouse_mpending  byte 0
33fe1     00          | mouse_lock      byte 0
33fe2     00 00 00    |                 byte 0[3] ' padding
33fe5                 | end
33fe5                 | 
33fe5     00 00 00 00 
      ...             
3405d     00 00 00 00 
34061     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
34065     00 00 00 00 
34069     00 00 00 00 
3406d     00 00 00 00 
34071     00 00 00 00 
34075     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
34077     00 00 00 00 
      ...             
3416f     00 00 00 00 
34173     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
34177                 | 
34177     00          | driver_cog      byte    0                       ' Current driver cog + 1
34178                 | 	alignl
34178                 | _audio096_spin2_dat_
34178                 | 
34178                 | audio       org     0
34178                 | 
34178     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3417c     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
34180     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
34184                 | 
34184     01 EC 63 FD |             cogid   pa                   ' compute cogid
34188     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3418c     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
34190     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
34194                 | 
34194     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
34198     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3419c     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
341a0     0F 20 06 FC |             wrpin   dac2,#right
341a4     0F 00 1E FC |             wxpin   #256,#right    
341a8     41 9C 64 FD |             dirh    #left addpins 1
341ac     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
341b0     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
341b4     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
341b8                 |             
341b8                 | '---------------------------------------------------------------------------------        
341b8                 | '----------------- The main loop -------------------------------------------------
341b8                 | '---------------------------------------------------------------------------------
341b8                 | 
341b8     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
341bc     10 00 90 CD |       if_c  jmp     #loop1
341c0                 |   
341c0     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
341c4     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
341c8     D3 00 80 F1 |             sub     0-0,a40000000
341cc     FD FD 6D FB |             djnz    cn,#p402
341d0                 |     
341d0     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
341d4     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
341d8     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
341dc     01 FC 05 C6 |     if_c    mov     cn,#1
341e0     D8 FE 39 F3 |             fle     ct,time3 wcz
341e4     02 FC 05 C6 |     if_c    mov     cn,#2     
341e8     D9 FE 39 F3 |             fle     ct,time4 wcz
341ec     03 FC 05 C6 |     if_c    mov     cn,#3
341f0     DA FE 39 F3 |             fle     ct,time5 wcz
341f4     04 FC 05 C6 |     if_c    mov     cn,#4
341f8     DB FE 39 F3 |             fle     ct,time6 wcz
341fc     05 FC 05 C6 |     if_c    mov     cn,#5
34200     DC FE 39 F3 |             fle     ct,time7 wcz
34204     06 FC 05 C6 |     if_c    mov     cn,#6
34208     DD FE 39 F3 |             fle     ct,time8 wcz
3420c     07 FC 05 C6 |     if_c    mov     cn,#7
34210                 | 
34210                 | 
34210                 | '----------------------------------------------------------------------------------
34210                 | '------------- Compute channel samples --------------------------------------------
34210                 | '----------------------------------------------------------------------------------
34210                 | 
34210                 | 
34210     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
34214     06 BC 65 F0 |             shl     channeladd,#6
34218     DE F0 03 F1 |             add     ptra,channeladd
3421c                 | 
3421c     28 16 64 FD |             setq    #11                        	' read parameters
34220     00 D3 05 FB |             rdlong  pointer0,ptra
34224                 |     	    
34224     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
34228     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3422c     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
34230     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
34234     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
34238     00 C0 0D F2 |             cmp     qq,#0 wz                         
3423c     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
34240     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
34244                 |             
34244     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
34248     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3424c     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
34250                 | 
34250     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
34254     EA 04 3A F9 |             getword oldrs,sample0,#1
34258     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3425c     EE F6 31 F9 |     	    getword avol0,volpan0,#0
34260     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
34264     EF F2 31 F9 |             getword afreq0,freqskip0,#0
34268                 | 
34268     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3426c     00 00 02 F6 |             mov     dt0,0-0    
34270     D5 00 82 F1 |             sub     dt0,time0
34274                 |             
34274     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
34278     F9 00 00 F1 |             add     0-0,afreq0  	
3427c                 |             
3427c                 | '---- envelopes
3427c                 |             
3427c     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
34280     20 00 00 AF 
34284     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
34288     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3428c                 | 
3428c     F9 44 02 F6 |             mov     envs1,afreq0
34290     F3 44 02 FA |             mul     envs1,envspd0
34294     22 E3 01 F1 |             add     envph0,envs1 
34298                 | 
34298     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3429c     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
342a0     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
342a4     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
342a8     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
342ac     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
342b0     00 42 06 36 |     if_ge   mov     envlo,#0
342b4     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
342b8     16 E2 65 30 |     if_ge   shl     envph0,#22
342bc                 | 
342bc     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
342c0     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
342c4     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
342c8     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
342cc     22 47 3A F9 |             getword envs2,envs1,#1		' next value
342d0     22 45 32 F9 |             getword envs1,envs1,#0		' current value
342d4     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
342d8     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
342dc     21 45 02 FA |             mul     envs1,envlo
342e0     23 45 02 F1 |             add     envs1,envs2
342e4     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
342e8                 |             
342e8     1B D6 0D F4 | p410        testb   sstart0, #27 wz
342ec     1B C2 61 AD |     if_z    getrnd  spl
342f0     58 00 90 AD |     if_z    jmp     #p406
342f4                 |  
342f4     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
342f8     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
342fc     08 D2 45 F0 |             shr     pointer0,#8
34300                 |          
34300     1F D6 0D F4 |             testb   sstart0,#31 wz            
34304     01 D2 65 A0 |     if_z    shl     pointer0,#1        
34308     1C D6 0D F4 |             testb   sstart0,#28 wz            
3430c     01 D2 65 A0 |     if_z    shl     pointer0,#1        
34310                 |         
34310     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
34314     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
34318     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
3431c                 |             
3431c     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
34320     EB C0 01 F1 |             add     qq,sstart0            
34324                 | 
34324     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
34328     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3432c     14 01 B0 1D |     if_gt   call    #cache_read
34330                 |          
34330     1F D6 0D F4 |             testb   sstart0,#31 wz 
34334     08 C2 65 50 |     if_nz   shl     spl,#8
34338     08 D2 65 50 |     if_nz   shl     pointer0,#8
3433c     07 D2 65 A0 |     if_z    shl     pointer0,#7
34340     1C D6 0D F4 |             testb   sstart0,#28 wz            
34344     01 D2 45 A0 |     if_z    shr     pointer0,#1    
34348     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3434c                 | 
3434c                 | 
3434c     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
34350     00 C2 01 F6 |             mov     spl,0-0
34354     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
34358     00 C2 01 F6 |             mov     spl,0-0
3435c                 | 
3435c     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
34360     00 06 02 F6 |             mov     ls0,0-0
34364     20 00 00 FF 
34368     00 C0 05 F6 |             mov     qq,##16384
3436c     FC C0 81 F1 |             sub     qq,apan0
34370     E0 C2 31 FA |             scas    spl,qq
34374     00 08 02 F6 |             mov     rs0, 0-0
34378                 | 
34378     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3437c     04 0D 02 F1 |             add     rs,rs0
34380     01 0B 82 F1 |             sub     ls,oldls
34384     03 0B 02 F1 |             add     ls,ls0
34388                 |    
34388     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3438c     03 D5 21 F9 |             setword sample0,ls0,#0
34390                 |             
34390     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
34394     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
34398     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3439c                 |   '  if_z    mov     sample0,#0
3439c     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
343a0     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
343a4     04 00 00 AF 
343a8     00 AC 05 A1 |     if_z    add     time1,##2048
343ac     D6 AE 01 A6 |     if_z    mov     time2,time1
343b0     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
343b4                 | 
343b4     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
343b8     00 D3 65 FC |             wrlong  pointer0,ptra
343bc     08 E3 65 FC |             wrlong  envph0,ptra[8]
343c0     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
343c4                 |                       
343c4     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
343c8     FF BF 25 A7 |     if_z    decmod  front, #511          
343cc                 |          
343cc     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
343d0     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
343d4     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
343d8     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
343dc                 | 	    
343dc                 | 		    
343dc     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
343e0     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
343e4     02 11 02 F6 |             mov     newsample, oldrs       
343e8                 | 
343e8     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
343ec     00 AB 01 F1 |             add     time0,dt0    
343f0                 |                                      
343f0     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
343f4     D8 FD 9F AD |     if_z    jmp     #loop1
343f8     00 C1 01 F6 |             mov     qq,dt0
343fc                 |   
343fc     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
34400     00 BE 9D F2 |             cmpr    front, #0-0 wcz
34404     F4 FF 9F AD |     if_e    jmp     #p301    
34408                 | 		
34408     00 16 0E F2 | 	    cmp     scbase,#0 wz
3440c     20 00 90 AD |     if_z    jmp     #p302	   
34410                 |   
34410     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
34414     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
34418     02 1A 66 C0 |     if_c    shl     scptr2,#2
3441c     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
34420     60 1A 66 FC |             wrlong  scptr2,#$60
34424     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
34428     01 00 00 CF 
3442c     7F 18 06 C7 |     if_c    incmod  scptr,##639
34430                 | 			    
34430     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
34434     00 00 00 FF 
34438     FF BF 05 F7 |             incmod  front, ##511
3443c     EF C1 6D FB |             djnz    qq,#p301
34440                 |             
34440     74 FD 9F FD |             jmp     #loop            'loop
34444                 | 
34444                 | '----------------------------------------------------------------------------------
34444                 | '------------- This is the end of the main loop -----------------------------------
34444                 | '----------------------------------------------------------------------------------
34444                 | 
34444                 | '----------------------------------------------------------------------------------
34444                 | '------------- PSRAM cache ----------- --------------------------------------------
34444                 | '----------------------------------------------------------------------------------
34444                 | 
34444                 | ' There are 8 cache pointers for 8 channels
34444                 | ' if 24 higher bits of address=cache, then get a word from the cache
34444                 | ' else load the cache from PSRAM, update the pointer, then read a sample
34444                 | 
34444                 | 
34444     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
34448                 |             
34448     E0 3C 02 F6 | 	    mov     addrhi,qq		
3444c     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
34450     12 FD 95 F9 | 	    alts    cn,#cache1            
34454     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
34458     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3445c                 | 	
3445c     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
34460     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
34464     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
34468     08 34 66 F0 | 	    shl     cmd,#8
3446c     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
34470     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
34474     08 36 66 F0 |             shl     hubaddr,#8                  '
34478     11 37 02 F1 |             add     hubaddr,hubptr 
3447c     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
34480     28 04 64 FD |             setq    #2                          ' write 3 longs
34484     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
34488     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3448c     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
34490                 |             
34490                 | 	
34490     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
34494     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
34498     11 C1 01 F1 | 	    add     qq,hubptr
3449c     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
344a0     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
344a4                 |           
344a4                 | 
344a4                 | '--------------------------------------------------------------------------
344a4                 | '------ Interrupt service -------------------------------------------------
344a4                 | '------ Output the sample, get the next one if exists ---------------------
344a4                 | '--------------------------------------------------------------------------
344a4                 | 
344a4     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
344a8     0F CC 25 FC |             wypin   rsample,#right       '4
344ac     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
344b0     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
344b4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
344b8     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
344bc     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
344c0                 |     
344c0     F5 FF 3B FB |             reti1                        '17/19 
344c4                 |           
344c4                 | '---------------------------------------------------------------------------
344c4                 | '-------- End of interrupt -------------------------------------------------
344c4                 | '---------------------------------------------------------------------------    
344c4                 | 
344c4                 | 
344c4                 | '---------------------------------------------------------------------------
344c4                 | '------- Variables ---------------------------------------------------------
344c4                 | '---------------------------------------------------------------------------
344c4                 | 
344c4                 | ' constants
344c4                 | 
344c4     00 00 00 40 | a40000000   long $40000000
344c8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
344cc                 | 
344cc                 | ' Time variables
344cc                 | 
344cc     00 00 00 00 | time0       long 0    ' Global sample computing time
344d0     01 00 00 00 | time1       long 1    ' Local channels time
344d4     02 00 00 00 | time2       long 2
344d8     03 00 00 00 | time3       long 3
344dc     04 00 00 00 | time4       long 4
344e0     05 00 00 00 | time5       long 5
344e4     06 00 00 00 | time6       long 6
344e8     07 00 00 00 | time7       long 7
344ec     08 00 00 00 | time8       long 8
344f0                 | 
344f0     00 00 00 00 | channeladd long 0
344f4                 | 
344f4     00 00 00 00 | front       long 0
344f8                 | 
344f8                 | ' temporary variables 
344f8     00 00 00 00 | qq          long 0
344fc     00 00 00 00 | spl         long 0
34500     00 00 00 00 | zero        long 0
34504     00 00 00 00 | mailbox     long 0
34508     00 00 00 00 | mailbox2 long 0
3450c                 | 
3450c                 | ' Interrupt ISR variables
3450c                 | 
3450c     00 00 00 00 | lsample     long 0
34510     00 00 00 00 | rsample     long 0
34514     00 00 00 00 | lsnext      long 0
34518     00 00 00 00 | rsnext      long 0 
3451c                 | 
3451c                 | ' channel parameter block
3451c                 | 
3451c     00 00 00 00 | pointer0    long 0     
34520     00 00 00 00 | sample0     long 0
34524     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
34528     00 00 00 00 | lstart0     long 0
3452c     00 00 00 00 | lend0       long 0
34530     00 00 00 00 | volpan0     long 0
34534     00 00 00 00 | freqskip0   long 0
34538     00 00 00 00 | command0    long 0
3453c     00 00 00 00 | envph0	    long 0
34540     00 00 00 00 | envptr0	    long 0
34544     00 00 00 00 | envspd0	    long 0
34548     00 00 00 00 | envlen0	    long 0
3454c     00 00 00 00 | res5	    long 0
34550     00 00 00 00 | res6	    long 0
34554     00 00 00 00 | res7	    long 0
34558     00 00 00 00 | res8	    long 0
3455c                 | 
3455c     00 00 00 00 | afreq0      long 0
34560     00 00 00 00 | askip0      long 0
34564     00 00 00 00 | avol0       long 0
34568     00 00 00 00 | apan0       long 0
3456c                 | 
3456c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
34570     00 00 00 00 | cn          long 0
34574     00 00 00 00 | ct          long 0
34578     00 00 00 00 | dt0         long 0
3457c                 | 
3457c                 | ' Samples
3457c     00 00 00 00 | oldls       long 0
34580     00 00 00 00 | oldrs       long 0
34584                 | 
34584     00 00 00 00 | ls0         long 0
34588     00 00 00 00 | rs0         long 0
3458c                 | 
3458c     00 00 00 00 | ls          long 0    
34590     00 00 00 00 | rs          long 0
34594                 | 
34594     00 00 00 00 | oldsample   long 0
34598     00 00 00 00 | newsample   long 0
3459c                 | 
3459c     00 00 00 00 | nrsample    long 0
345a0     00 00 00 00 | nlsample    long 0
345a4                 | 
345a4     00 00 00 00 | scbase long 0
345a8     00 00 00 00 | scptr long 0
345ac     00 00 00 00 | scptr2 long 0
345b0     00 00 00 00 | scope long 0
345b4                 | 
345b4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
345b8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
345bc                 | 
345bc     00 18 07 00 | hubptr      long $71800
345c0     00 00 00 00 | cache1      long 0
345c4     00 00 00 00 | cache2      long 0
345c8     00 00 00 00 | cache3      long 0
345cc     00 00 00 00 | cache4      long 0
345d0     00 00 00 00 | cache5      long 0
345d4     00 00 00 00 | cache6      long 0
345d8     00 00 00 00 | cache7      long 0
345dc     00 00 00 00 | cache8      long 0
345e0                 | 
345e0                 | 
345e0     00 00 00 00 | cmd         long 0
345e4     00 00 00 00 | hubaddr     long 0
345e8     00 01 00 00 | count       long 256
345ec     00 00 00 00 | addrlo long 0
345f0     00 00 00 00 | addrhi long 0
345f4     00 00 00 00 | pointer00 long 0
345f8     00 00 00 00 | envhi long 0
345fc     00 00 00 00 | envlo long 0
34600     00 00 00 00 | envs1 long 0
34604     00 00 00 00 | envs2 long 0
34608     00 00 00 00 | noise0 long 0
3460c     00 00 00 00 
34610     00 00 00 00 | null  			long 	0,0           ' for channel reset
34614                 | 	alignl
34614                 | __system__dat_
34614     00 00 00 00 
34618     00 00 00 00 | 	byte	$00[8]
3461c     03 00 00 00 
34620     00 00 00 00 
34624     00 00 00 00 
34628     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3462c     00 00 00 00 
      ...             
348b8     00 00 00 00 
348bc     00 00 00 00 | 	byte	$00[660]
348c0     00 00 20 07 | 	long	(114 {__system____root_opendir})<<20
348c4     00 00 30 07 | 	long	(115 {__system____root_closedir})<<20
348c8     00 00 40 07 | 	long	(116 {__system____root_readdir})<<20
348cc     00 00 50 07 | 	long	(117 {__system____root_stat})<<20
348d0     00 00 00 00 
348d4     00 00 00 00 
348d8     00 00 00 00 
348dc     00 00 00 00 
348e0     00 00 00 00 
348e4     00 00 00 00 
348e8     00 00 00 00 | 	byte	$00[28]
348ec     54 49 03 00 | 	long	@@@__system__dat_ + 832
348f0     57 49 03 00 | 	long	@@@__system__dat_ + 835
348f4     78 49 03 00 | 	long	@@@__system__dat_ + 868
348f8     91 49 03 00 | 	long	@@@__system__dat_ + 893
348fc     AC 49 03 00 | 	long	@@@__system__dat_ + 920
34900     C6 49 03 00 | 	long	@@@__system__dat_ + 946
34904     D6 49 03 00 | 	long	@@@__system__dat_ + 962
34908     E8 49 03 00 | 	long	@@@__system__dat_ + 980
3490c     FA 49 03 00 | 	long	@@@__system__dat_ + 998
34910     0C 4A 03 00 | 	long	@@@__system__dat_ + 1016
34914     18 4A 03 00 | 	long	@@@__system__dat_ + 1028
34918     29 4A 03 00 | 	long	@@@__system__dat_ + 1045
3491c     3D 4A 03 00 | 	long	@@@__system__dat_ + 1065
34920     47 4A 03 00 | 	long	@@@__system__dat_ + 1075
34924     57 4A 03 00 | 	long	@@@__system__dat_ + 1091
34928     66 4A 03 00 | 	long	@@@__system__dat_ + 1106
3492c     7C 4A 03 00 | 	long	@@@__system__dat_ + 1128
34930     95 4A 03 00 | 	long	@@@__system__dat_ + 1153
34934     A9 4A 03 00 | 	long	@@@__system__dat_ + 1173
34938     B7 4A 03 00 | 	long	@@@__system__dat_ + 1187
3493c     CB 4A 03 00 | 	long	@@@__system__dat_ + 1207
34940     D7 4A 03 00 | 	long	@@@__system__dat_ + 1219
34944     E9 4A 03 00 | 	long	@@@__system__dat_ + 1237
34948     01 4B 03 00 | 	long	@@@__system__dat_ + 1261
3494c     13 4B 03 00 | 	long	@@@__system__dat_ + 1279
34950     26 4B 03 00 | 	long	@@@__system__dat_ + 1298
34954     4F 4B 00 4E 
34958     75 6D 65 72 
3495c     69 63 61 6C 
34960     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
34964     75 6D 65 6E 
34968     74 20 6F 75 
3496c     74 20 6F 66 
34970     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
34974     61 69 6E 00 
34978     52 65 73 75 
3497c     6C 74 20 6E 
34980     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
34984     65 70 72 65 
34988     73 65 6E 74 
3498c     61 62 6C 65 
34990     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
34994     65 67 61 6C 
34998     20 6D 75 6C 
3499c     74 69 62 79 
349a0     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
349a4     65 71 75 65 
349a8     6E 63 65 00 
349ac     4E 6F 20 73 
349b0     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
349b4     66 69 6C 65 
349b8     20 6F 72 20 
349bc     64 69 72 65 
349c0     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
349c4     79 00 42 61 
349c8     64 20 66 69 
349cc     6C 65 20 6E 
349d0     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
349d4     72 00 50 65 
349d8     72 6D 69 73 
349dc     73 69 6F 6E 
349e0     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
349e4     69 65 64 00 
349e8     4E 6F 74 20 
349ec     65 6E 6F 75 
349f0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
349f4     65 6D 6F 72 
349f8     79 00 54 65 
349fc     6D 70 6F 72 
34a00     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
34a04     66 61 69 6C 
34a08     75 72 65 00 
34a0c     46 69 6C 65 
34a10     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
34a14     73 74 73 00 
34a18     49 6E 76 61 
34a1c     6C 69 64 20 
34a20     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
34a24     6D 65 6E 74 
34a28     00 54 6F 6F 
34a2c     20 6D 61 6E 
34a30     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
34a34     65 6E 20 66 
34a38     69 6C 65 73 
34a3c     00 49 2F 4F 
34a40     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
34a44     6F 72 00 4E 
34a48     6F 74 20 61 
34a4c     20 64 69 72 
34a50     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
34a54     72 79 00 49 
34a58     73 20 61 20 
34a5c     64 69 72 65 
34a60     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
34a64     79 00 52 65 
34a68     61 64 20 6F 
34a6c     6E 6C 79 20 
34a70     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
34a74     20 73 79 73 
34a78     74 65 6D 00 
34a7c     46 75 6E 63 
34a80     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
34a84     20 6E 6F 74 
34a88     20 69 6D 70 
34a8c     6C 65 6D 65 
34a90     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
34a94     00 44 69 72 
34a98     65 63 74 6F 
34a9c     72 79 20 6E 
34aa0     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
34aa4     6D 70 74 79 
34aa8     00 4E 61 6D 
34aac     65 20 74 6F 
34ab0     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
34ab4     6E 67 00 44 
34ab8     65 76 69 63 
34abc     65 20 6E 6F 
34ac0     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
34ac4     65 6B 61 62 
34ac8     6C 65 00 42 
34acc     61 64 20 61 
34ad0     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
34ad4     73 73 00 42 
34ad8     72 6F 6B 65 
34adc     6E 20 63 6F 
34ae0     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
34ae4     74 69 6F 6E 
34ae8     00 44 65 76 
34aec     69 63 65 20 
34af0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
34af4     65 73 6F 75 
34af8     72 63 65 20 
34afc     62 75 73 79 
34b00     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
34b04     73 73 20 64 
34b08     65 76 69 63 
34b0c     65 20 6C 69 
34b10     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
34b14     6F 20 73 70 
34b18     61 63 65 20 
34b1c     6F 6E 20 64 
34b20     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
34b24     65 00 55 6E 
34b28     6B 6E 6F 77 
34b2c     6E 20 65 72 
34b30     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
34b34     00 00 00 00 
34b38     00 00 00 00 | 	byte	$00[8]
34b3c     05 00 00 00 
34b40     00 00 00 00 
34b44     00 00 00 00 
34b48     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b4c     00 00 00 00 | 	byte	$00, $00, $00, $00
34b50     00 00 A0 08 | 	long	(138 {__system___tx})<<20
34b54     00 00 B0 08 | 	long	(139 {__system___rx})<<20
34b58     00 00 00 00 | 	byte	$00, $00, $00, $00
34b5c     00 00 C0 08 | 	long	(140 {__system___rxtxioctl_0598})<<20
34b60     00 00 D0 08 | 	long	(141 {__system____dummy_flush_0599})<<20
34b64     00 00 00 00 
34b68     00 00 00 00 | 	byte	$00[8]
34b6c     01 00 00 00 
34b70     06 00 00 00 
34b74     00 00 00 00 
34b78     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b7c     00 00 00 00 
34b80     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
34b84     00 00 A0 08 | 	long	(138 {__system___tx})<<20
34b88     00 00 B0 08 | 	long	(139 {__system___rx})<<20
34b8c     00 00 00 00 | 	byte	$00, $00, $00, $00
34b90     00 00 C0 08 | 	long	(140 {__system___rxtxioctl_0598})<<20
34b94     00 00 D0 08 | 	long	(141 {__system____dummy_flush_0599})<<20
34b98     00 00 00 00 
34b9c     00 00 00 00 | 	byte	$00[8]
34ba0     01 00 00 00 
34ba4     06 00 00 00 
34ba8     00 00 00 00 
34bac     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34bb0     00 00 00 00 
34bb4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
34bb8     00 00 A0 08 | 	long	(138 {__system___tx})<<20
34bbc     00 00 B0 08 | 	long	(139 {__system___rx})<<20
34bc0     00 00 00 00 | 	byte	$00, $00, $00, $00
34bc4     00 00 C0 08 | 	long	(140 {__system___rxtxioctl_0598})<<20
34bc8     00 00 D0 08 | 	long	(141 {__system____dummy_flush_0599})<<20
34bcc     00 00 00 00 
      ...             
34d3c     00 00 00 00 
34d40     00 00 00 00 | 	byte	$00[376]
34d44     48 4D 03 00 | 	long	@@@__system__dat_ + 1844
34d48     00 00 00 00 
34d4c     00 00 00 00 
34d50     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34d54                 | 	alignl
34d54                 | _fatfs_cc_dat_
34d54     C7 00 FC 00 
34d58     E9 00 E2 00 
34d5c     E4 00 E0 00 
34d60     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
34d64     EA 00 EB 00 
34d68     E8 00 EF 00 
34d6c     EE 00 EC 00 
34d70     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
34d74     C9 00 E6 00 
34d78     C6 00 F4 00 
34d7c     F6 00 F2 00 
34d80     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
34d84     FF 00 D6 00 
34d88     DC 00 F8 00 
34d8c     A3 00 D8 00 
34d90     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
34d94     E1 00 ED 00 
34d98     F3 00 FA 00 
34d9c     F1 00 D1 00 
34da0     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
34da4     BF 00 AE 00 
34da8     AC 00 BD 00 
34dac     BC 00 A1 00 
34db0     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
34db4     91 25 92 25 
34db8     93 25 02 25 
34dbc     24 25 C1 00 
34dc0     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
34dc4     A9 00 63 25 
34dc8     51 25 57 25 
34dcc     5D 25 A2 00 
34dd0     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
34dd4     14 25 34 25 
34dd8     2C 25 1C 25 
34ddc     00 25 3C 25 
34de0     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
34de4     5A 25 54 25 
34de8     69 25 66 25 
34dec     60 25 50 25 
34df0     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
34df4     F0 00 D0 00 
34df8     CA 00 CB 00 
34dfc     C8 00 31 01 
34e00     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
34e04     CF 00 18 25 
34e08     0C 25 88 25 
34e0c     84 25 A6 00 
34e10     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
34e14     D3 00 DF 00 
34e18     D4 00 D2 00 
34e1c     F5 00 D5 00 
34e20     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
34e24     DE 00 DA 00 
34e28     DB 00 D9 00 
34e2c     FD 00 DD 00 
34e30     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
34e34     AD 00 B1 00 
34e38     17 20 BE 00 
34e3c     B6 00 A7 00 
34e40     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
34e44     B0 00 A8 00 
34e48     B7 00 B9 00 
34e4c     B3 00 B2 00 
34e50     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
34e54     61 00 1A 03 
34e58     E0 00 17 03 
34e5c     F8 00 07 03 
34e60     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
34e64     78 01 00 01 
34e68     30 01 32 01 
34e6c     06 01 39 01 
34e70     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
34e74     2E 01 79 01 
34e78     06 01 80 01 
34e7c     4D 00 43 02 
34e80     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
34e84     82 01 84 01 
34e88     84 01 86 01 
34e8c     87 01 87 01 
34e90     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
34e94     8B 01 8B 01 
34e98     8D 01 8E 01 
34e9c     8F 01 90 01 
34ea0     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
34ea4     93 01 94 01 
34ea8     F6 01 96 01 
34eac     97 01 98 01 
34eb0     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
34eb4     9B 01 9C 01 
34eb8     9D 01 20 02 
34ebc     9F 01 A0 01 
34ec0     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
34ec4     A2 01 A4 01 
34ec8     A4 01 A6 01 
34ecc     A7 01 A7 01 
34ed0     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
34ed4     AB 01 AC 01 
34ed8     AC 01 AE 01 
34edc     AF 01 AF 01 
34ee0     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
34ee4     B3 01 B3 01 
34ee8     B5 01 B5 01 
34eec     B7 01 B8 01 
34ef0     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
34ef4     BB 01 BC 01 
34ef8     BC 01 BE 01 
34efc     F7 01 C0 01 
34f00     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
34f04     C3 01 C4 01 
34f08     C5 01 C4 01 
34f0c     C7 01 C8 01 
34f10     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
34f14     CB 01 CA 01 
34f18     CD 01 10 01 
34f1c     DD 01 01 00 
34f20     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
34f24     12 01 F3 01 
34f28     03 00 F1 01 
34f2c     F4 01 F4 01 
34f30     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
34f34     22 02 12 01 
34f38     3A 02 09 00 
34f3c     65 2C 3B 02 
34f40     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
34f44     66 2C 3F 02 
34f48     40 02 41 02 
34f4c     41 02 46 02 
34f50     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
34f54     40 00 81 01 
34f58     86 01 55 02 
34f5c     89 01 8A 01 
34f60     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
34f64     5A 02 90 01 
34f68     5C 02 5D 02 
34f6c     5E 02 5F 02 
34f70     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
34f74     62 02 94 01 
34f78     64 02 65 02 
34f7c     66 02 67 02 
34f80     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
34f84     6A 02 62 2C 
34f88     6C 02 6D 02 
34f8c     6E 02 9C 01 
34f90     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
34f94     9D 01 73 02 
34f98     74 02 9F 01 
34f9c     76 02 77 02 
34fa0     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
34fa4     7A 02 7B 02 
34fa8     7C 02 64 2C 
34fac     7E 02 7F 02 
34fb0     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
34fb4     82 02 A9 01 
34fb8     84 02 85 02 
34fbc     86 02 87 02 
34fc0     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
34fc4     B1 01 B2 01 
34fc8     45 02 8D 02 
34fcc     8E 02 8F 02 
34fd0     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
34fd4     B7 01 7B 03 
34fd8     03 00 FD 03 
34fdc     FE 03 FF 03 
34fe0     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
34fe4     86 03 88 03 
34fe8     89 03 8A 03 
34fec     B1 03 11 03 
34ff0     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
34ff4     A3 03 A3 03 
34ff8     C4 03 08 03 
34ffc     CC 03 03 00 
35000     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
35004     8F 03 D8 03 
35008     18 01 F2 03 
3500c     0A 00 F9 03 
35010     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
35014     F5 03 F6 03 
35018     F7 03 F7 03 
3501c     F9 03 FA 03 
35020     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
35024     20 03 50 04 
35028     10 07 60 04 
3502c     22 01 8A 04 
35030     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
35034     0E 01 CF 04 
35038     01 00 C0 04 
3503c     D0 04 44 01 
35040     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
35044     00 00 7D 1D 
35048     01 00 63 2C 
3504c     00 1E 96 01 
35050     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
35054     00 1F 08 06 
35058     10 1F 06 06 
3505c     20 1F 08 06 
35060     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
35064     40 1F 06 06 
35068     51 1F 07 00 
3506c     59 1F 52 1F 
35070     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
35074     5D 1F 56 1F 
35078     5F 1F 60 1F 
3507c     08 06 70 1F 
35080     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
35084     BB 1F C8 1F 
35088     C9 1F CA 1F 
3508c     CB 1F DA 1F 
35090     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
35094     F9 1F EA 1F 
35098     EB 1F FA 1F 
3509c     FB 1F 80 1F 
350a0     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
350a4     08 06 A0 1F 
350a8     08 06 B0 1F 
350ac     04 00 B8 1F 
350b0     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
350b4     BC 1F CC 1F 
350b8     01 00 C3 1F 
350bc     D0 1F 02 06 
350c0     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
350c4     E5 1F 01 00 
350c8     EC 1F F3 1F 
350cc     01 00 FC 1F 
350d0     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
350d4     32 21 70 21 
350d8     10 02 84 21 
350dc     01 00 83 21 
350e0     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
350e4     30 2C 2F 04 
350e8     60 2C 02 01 
350ec     67 2C 06 01 
350f0     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
350f4     80 2C 64 01 
350f8     00 2D 26 08 
350fc     41 FF 1A 03 
35100     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
35104     05 07 09 0E 
35108     10 12 14 16 
3510c     18 1C 1E 43 
35110     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
35114     41 41 43 45 
35118     45 45 49 49 
3511c     49 41 41 45 
35120     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
35124     4F 55 55 59 
35128     4F 55 4F 9C 
3512c     4F 9E 9F 41 
35130     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
35134     A5 A6 A7 A8 
35138     A9 AA AB AC 
3513c     AD AE AF B0 
35140     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
35144     41 41 41 B8 
35148     B9 BA BB BC 
3514c     BD BE BF C0 
35150     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
35154     C5 41 41 C8 
35158     C9 CA CB CC 
3515c     CD CE CF D1 
35160     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
35164     49 49 49 49 
35168     D9 DA DB DC 
3516c     DD 49 DF 4F 
35170     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
35174     4F E6 E8 E8 
35178     55 55 55 59 
3517c     59 EE EF F0 
35180     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
35184     F5 F6 F7 F8 
35188     F9 FA FB FC 
3518c     FD FE FF 00 
35190     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
35194     00 00 00 00 | 	byte	$00, $00, $00, $00
35198     00 00 90 07 | 	long	(121 {_fatfs_cc_v_close})<<20
3519c     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_read})<<20
351a0     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_write})<<20
351a4     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_lseek})<<20
351a8     00 00 D0 07 | 	long	(125 {_fatfs_cc_v_ioctl})<<20
351ac     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_flush})<<20
351b0     00 00 00 00 
351b4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
351b8     00 00 E0 07 | 	long	(126 {_fatfs_cc_v_open})<<20
351bc     00 00 F0 07 | 	long	(127 {_fatfs_cc_v_creat})<<20
351c0     00 00 00 08 | 	long	(128 {_fatfs_cc_v_opendir})<<20
351c4     00 00 10 08 | 	long	(129 {_fatfs_cc_v_closedir})<<20
351c8     00 00 20 08 | 	long	(130 {_fatfs_cc_v_readdir})<<20
351cc     00 00 30 08 | 	long	(131 {_fatfs_cc_v_stat})<<20
351d0     00 00 40 08 | 	long	(132 {_fatfs_cc_v_mkdir})<<20
351d4     00 00 50 08 | 	long	(133 {_fatfs_cc_v_rmdir})<<20
351d8     00 00 60 08 | 	long	(134 {_fatfs_cc_v_remove})<<20
351dc     00 00 70 08 | 	long	(135 {_fatfs_cc_v_rename})<<20
351e0     00 00 80 08 | 	long	(136 {_fatfs_cc_v_init})<<20
351e4     00 00 90 08 | 	long	(137 {_fatfs_cc_v_deinit})<<20
351e8     FF FF FF FF 
351ec     1F 00 00 00 
351f0     1C 00 00 00 
351f4     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
351f8     1E 00 00 00 
351fc     1F 00 00 00 
35200     1E 00 00 00 
35204     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
35208     1F 00 00 00 
3520c     1E 00 00 00 
35210     1F 00 00 00 
35214     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
35218     1F 00 00 00 
3521c     00 00 00 00 
35220     1F 00 00 00 
35224     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
35228     5A 00 00 00 
3522c     78 00 00 00 
35230     97 00 00 00 
35234     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
35238     D4 00 00 00 
3523c     F3 00 00 00 
35240     11 01 00 00 
35244     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
35248     4E 01 00 00 
3524c     6D 01 00 00 
35250     FF FF FF FF 
35254     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
35258     00 00 00 00 
      ...             
35270     00 00 00 00 
35274     00 00 00 00 | 	byte	$00[32]
35278     96 52 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3527c     9A 52 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
35280     00 00 00 00 
35284     00 00 00 00 
35288     00 00 00 00 
3528c     00 00 00 00 
35290     00 00       | 	byte	$00[18]
35292     3F 3F 3F 00 
35296     55 43 54 00 
3529a     55 43 54 00 
3529e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
352a2     00 00 00 00 
352a6     00 00 00    | 	byte	$00[7]
352a9     CA 9A 3B 00 
352ad     00 00 00 01 
352b1     01 01 01 01 
352b5     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
352b9     91 11 11 11 
352bd     11 01 01 01 
352c1     01 01 01 01 
352c5     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
352c9     01 01 01 01 
352cd     01 01 01    | 	byte	$01[7]
352d0     90 20 20 20 
352d4     20 20 20 20 
352d8     20 20 20 20 
352dc     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
352e0     42 42 42 42 
352e4     42 42 42 42 
352e8     42 42       | 	byte	$42[10]
352ea     20 20 20 20 
352ee     20 20 20    | 	byte	$20[7]
352f1     44 44 44 44 
352f5     44 44       | 	byte	$44[6]
352f7     04 04 04 04 
352fb     04 04 04 04 
352ff     04 04 04 04 
35303     04 04 04 04 
35307     04 04 04 04 | 	byte	$04[20]
3530b     20 20 20 20 
3530f     20 20       | 	byte	$20[6]
35311     48 48 48 48 
35315     48 48       | 	byte	$48[6]
35317     08 08 08 08 
3531b     08 08 08 08 
3531f     08 08 08 08 
35323     08 08 08 08 
35327     08 08 08 08 | 	byte	$08[20]
3532b     20 20 20 20 
3532f     01 00 00 00 
35333     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
35334                 | __methodtable__
35334     9C 5D 01 00 | 	long	@_do_no_command
35338     F8 E7 00 00 | 	long	@_do_plus
3533c     E4 EC 00 00 | 	long	@_do_minus
35340     AC F1 00 00 | 	long	@_do_or
35344     C4 F2 00 00 | 	long	@_do_mul
35348     50 F8 00 00 | 	long	@_do_fdiv
3534c     94 F0 00 00 | 	long	@_do_and
35350     30 F6 00 00 | 	long	@_do_div
35354     18 FA 00 00 | 	long	@_do_mod
35358     38 FC 00 00 | 	long	@_do_shl
3535c     50 FD 00 00 | 	long	@_do_shr
35360     68 FE 00 00 | 	long	@_do_power
35364     40 E2 00 00 | 	long	@_do_getvar
35368     70 9C 00 00 | 	long	@_do_push
3536c     F4 DA 00 00 | 	long	@_do_assign
35370     E4 35 01 00 | 	long	@_do_cls
35374     EC D4 00 00 | 	long	@_do_new
35378     88 36 01 00 | 	long	@_do_plot
3537c     58 37 01 00 | 	long	@_do_draw
35380     CC 40 01 00 | 	long	@_do_print
35384     C4 39 01 00 | 	long	@_do_circle
35388     4C 38 01 00 | 	long	@_do_fcircle
3538c     3C 3B 01 00 | 	long	@_do_box
35390     E4 3E 01 00 | 	long	@_do_frame
35394     50 36 01 00 | 	long	@_do_color
35398     74 7C 00 00 | 	long	@_do_for
3539c     A0 7E 00 00 | 	long	@_do_next
353a0     50 D2 00 00 | 	long	@_do_list
353a4     C0 AC 00 00 | 	long	@_do_run
353a8     B0 D9 00 00 | 	long	@_do_error
353ac     AC D6 00 00 | 	long	@_do_fast_goto
353b0     9C D7 00 00 | 	long	@_do_find_goto
353b4     AC D9 00 00 | 	long	@_do_slow_goto
353b8     30 1D 01 00 | 	long	@_do_converttoint
353bc     B4 A2 00 00 | 	long	@_test_csave
353c0     08 A6 00 00 | 	long	@_do_save
353c4     F4 A8 00 00 | 	long	@_do_load
353c8     30 4F 01 00 | 	long	@_do_pinwrite
353cc     D0 53 01 00 | 	long	@_do_waitms
353d0     0C 55 01 00 | 	long	@_do_waitvbl
353d4     0C 58 01 00 | 	long	@_do_if
353d8     F0 58 01 00 | 	long	@_do_else
353dc     B8 59 01 00 | 	long	@_do_nothing
353e0     30 00 01 00 | 	long	@_do_eq
353e4     A8 0E 01 00 | 	long	@_do_ge
353e8     80 13 01 00 | 	long	@_do_le
353ec     08 05 01 00 | 	long	@_do_gt
353f0     E0 09 01 00 | 	long	@_do_lt
353f4     58 18 01 00 | 	long	@_do_ne
353f8     0C 20 01 00 | 	long	@_do_rnd
353fc     BC 59 01 00 | 	long	@_do_brun
35400     88 5C 01 00 | 	long	@_do_beep
35404     3C 55 01 00 | 	long	@_do_dir
35408     94 45 01 00 | 	long	@_do_paper
3540c     1C 46 01 00 | 	long	@_do_ink
35410     B8 46 01 00 | 	long	@_do_font
35414     34 47 01 00 | 	long	@_do_mode
35418     F4 5B 01 00 | 	long	@_do_mouse
3541c     7C 35 01 00 | 	long	@_do_gettime
35420     28 5C 01 00 | 	long	@_do_cursor
35424     5C 5C 01 00 | 	long	@_do_click
35428     08 33 01 00 | 	long	@_do_mousex
3542c     4C 33 01 00 | 	long	@_do_mousey
35430     D4 33 01 00 | 	long	@_do_mousek
35434     90 33 01 00 | 	long	@_do_mousew
35438     E0 22 01 00 | 	long	@_do_sin
3543c     34 2A 01 00 | 	long	@_do_stick
35440     B8 2B 01 00 | 	long	@_do_strig
35444     1C 32 01 00 | 	long	@_do_sprite
35448     8C 2E 01 00 | 	long	@_do_defsprite
3544c     3C 2D 01 00 | 	long	@_do_getpixel
35450     18 55 01 00 | 	long	@_do_waitclock
35454     A8 5D 01 00 | 	long	@_do_negative
35458     18 34 01 00 | 	long	@_do_rdpin
3545c     84 34 01 00 | 	long	@_do_rqpin
35460     F8 34 01 00 | 	long	@_do_pinread
35464     C8 51 01 00 | 	long	@_do_wrpin
35468     48 52 01 00 | 	long	@_do_wxpin
3546c     C8 52 01 00 | 	long	@_do_wypin
35470     B8 4F 01 00 | 	long	@_do_pinfloat
35474     F8 4F 01 00 | 	long	@_do_pinlo
35478     38 50 01 00 | 	long	@_do_pinhi
3547c     B8 50 01 00 | 	long	@_do_pinstart
35480     78 50 01 00 | 	long	@_do_pintoggle
35484     48 53 01 00 | 	long	@_do_position
35488     EC 23 01 00 | 	long	@_do_cos
3548c     0C 25 01 00 | 	long	@_do_tan
35490     30 28 01 00 | 	long	@_do_atn
35494     18 26 01 00 | 	long	@_do_asin
35498     24 27 01 00 | 	long	@_do_acos
3549c     44 29 01 00 | 	long	@_do_sqr
354a0     24 3D 01 00 | 	long	@_do_fill
354a4     58 C8 00 00 | 	long	@_do_defsnd
354a8     E4 AF 00 00 | 	long	@_do_defenv
354ac     14 59 01 00 | 	long	@_do_rad
354b0     3C 59 01 00 | 	long	@_do_deg
354b4     64 59 01 00 | 	long	@_do_int
354b8     8C BC 00 00 | 	long	@_do_play
354bc     90 4C 01 00 | 	long	@_do_setdelay
354c0     E8 4B 01 00 | 	long	@_do_setenv
354c4     38 4D 01 00 | 	long	@_do_setlen
354c8     88 4E 01 00 | 	long	@_do_setpan
354cc     E0 4D 01 00 | 	long	@_do_setvol
354d0     98 4A 01 00 | 	long	@_do_setwave
354d4     40 4B 01 00 | 	long	@_do_setsustain
354d8     C0 C7 00 00 | 	long	@_do_release
354dc     D4 21 01 00 | 	long	@_do_getenvsustain
354e0     5C 9A 01 00 | 	long	@_hg010b_spin2_putchar
354e4     84 A1 02 00 | 	long	@__struct___bas_wrap_sender_tx
354e8     C8 A1 02 00 | 	long	@__struct___bas_wrap_sender_rx
354ec     10 A2 02 00 | 	long	@__struct___bas_wrap_sender_close
354f0     B4 A0 02 00 | 	long	@__struct__s_vfs_file_t_putchar
354f4     24 A1 02 00 | 	long	@__struct__s_vfs_file_t_getchar
354f8     6C A0 02 00 | 	long	@___strs_cl_pfunc
354fc     DC FF 01 00 | 	long	@__system____root_opendir
35500     78 00 02 00 | 	long	@__system____root_closedir
35504     F4 FF 01 00 | 	long	@__system____root_readdir
35508     80 00 02 00 | 	long	@__system____root_stat
3550c     08 F9 01 00 | 	long	@__system____default_putc
35510     8C F8 01 00 | 	long	@__system____default_getc
35514     B0 F9 01 00 | 	long	@__system____default_flush
35518     80 8B 02 00 | 	long	@_fatfs_cc_v_close
3551c     9C 8F 02 00 | 	long	@_fatfs_cc_v_read
35520     B0 90 02 00 | 	long	@_fatfs_cc_v_write
35524     90 91 02 00 | 	long	@_fatfs_cc_v_lseek
35528     18 92 02 00 | 	long	@_fatfs_cc_v_ioctl
3552c     6C 92 02 00 | 	long	@_fatfs_cc_v_open
35530     E4 8A 02 00 | 	long	@_fatfs_cc_v_creat
35534     C4 8B 02 00 | 	long	@_fatfs_cc_v_opendir
35538     38 8C 02 00 | 	long	@_fatfs_cc_v_closedir
3553c     78 8C 02 00 | 	long	@_fatfs_cc_v_readdir
35540     AC 8D 02 00 | 	long	@_fatfs_cc_v_stat
35544     2C 92 02 00 | 	long	@_fatfs_cc_v_mkdir
35548     4C 92 02 00 | 	long	@_fatfs_cc_v_rmdir
3554c     3C 92 02 00 | 	long	@_fatfs_cc_v_remove
35550     5C 92 02 00 | 	long	@_fatfs_cc_v_rename
35554     7C 93 02 00 | 	long	@_fatfs_cc_v_init
35558     84 93 02 00 | 	long	@_fatfs_cc_v_deinit
3555c     10 AE 01 00 | 	long	@__system___tx
35560     50 AE 01 00 | 	long	@__system___rx
35564     E8 0B 02 00 | 	long	@__system___rxtxioctl_0598
35568     40 0C 02 00 | 	long	@__system____dummy_flush_0599
3556c     4C 93 02 00 | 	long	@_fatfs_cc_v_flush
35570                 | __heap_base
35570     00 00 00 00 
      ...             
64370     00 00 00 00 
64374     00 00 00 00 | 	long	0[48002]
64378                 | objmem
64378     00 00 00 00 
      ...             
73a10     00 00 00 00 
73a14     00 00 00 00 | 	long	0[15784]
73a18                 | stackspace
73a18     00 00 00 00 | 	long	0[1]
73a1c 100             | 	org	COG_BSS_START
73a1c 100             | _var01
73a1c 100             | 	res	1
73a1c 101             | _var02
73a1c 101             | 	res	1
73a1c 102             | _var03
73a1c 102             | 	res	1
73a1c 103             | _var04
73a1c 103             | 	res	1
73a1c 104             | _var05
73a1c 104             | 	res	1
73a1c 105             | _var06
73a1c 105             | 	res	1
73a1c 106             | _var07
73a1c 106             | 	res	1
73a1c 107             | _var08
73a1c 107             | 	res	1
73a1c 108             | _var09
73a1c 108             | 	res	1
73a1c 109             | arg01
73a1c 109             | 	res	1
73a1c 10a             | arg02
73a1c 10a             | 	res	1
73a1c 10b             | arg03
73a1c 10b             | 	res	1
73a1c 10c             | arg04
73a1c 10c             | 	res	1
73a1c 10d             | arg05
73a1c 10d             | 	res	1
73a1c 10e             | arg06
73a1c 10e             | 	res	1
73a1c 10f             | local01
73a1c 10f             | 	res	1
73a1c 110             | local02
73a1c 110             | 	res	1
73a1c 111             | local03
73a1c 111             | 	res	1
73a1c 112             | local04
73a1c 112             | 	res	1
73a1c 113             | local05
73a1c 113             | 	res	1
73a1c 114             | local06
73a1c 114             | 	res	1
73a1c 115             | local07
73a1c 115             | 	res	1
73a1c 116             | local08
73a1c 116             | 	res	1
73a1c 117             | local09
73a1c 117             | 	res	1
73a1c 118             | local10
73a1c 118             | 	res	1
73a1c 119             | local11
73a1c 119             | 	res	1
73a1c 11a             | local12
73a1c 11a             | 	res	1
73a1c 11b             | local13
73a1c 11b             | 	res	1
73a1c 11c             | local14
73a1c 11c             | 	res	1
73a1c 11d             | local15
73a1c 11d             | 	res	1
73a1c 11e             | local16
73a1c 11e             | 	res	1
73a1c 11f             | local17
73a1c 11f             | 	res	1
73a1c 120             | local18
73a1c 120             | 	res	1
73a1c 121             | local19
73a1c 121             | 	res	1
73a1c 122             | local20
73a1c 122             | 	res	1
73a1c 123             | local21
73a1c 123             | 	res	1
73a1c 124             | local22
73a1c 124             | 	res	1
73a1c 125             | local23
73a1c 125             | 	res	1
73a1c 126             | local24
73a1c 126             | 	res	1
73a1c 127             | local25
73a1c 127             | 	res	1
73a1c 128             | local26
73a1c 128             | 	res	1
73a1c 129             | local27
73a1c 129             | 	res	1
73a1c 12a             | local28
73a1c 12a             | 	res	1
73a1c 12b             | local29
73a1c 12b             | 	res	1
73a1c 12c             | local30
73a1c 12c             | 	res	1
73a1c 12d             | local31
73a1c 12d             | 	res	1
73a1c 12e             | local32
73a1c 12e             | 	res	1
73a1c 12f             | local33
73a1c 12f             | 	res	1
73a1c 130             | local34
73a1c 130             | 	res	1
73a1c 131             | muldiva_
73a1c 131             | 	res	1
73a1c 132             | muldivb_
73a1c 132             | 	res	1
73a1c 133             | 	fit	480
73a1c 133             | 
