00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic025.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 25
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 18 5B A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 32 65 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 31 63 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 32 63 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 64 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 62 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 31 63 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 32 65 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 20 25 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 0C 23 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 28 13 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 6C 11 03 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 EC 15 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 A8 8E 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 2C 1D 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 E0 AF 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 90 D7 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 48 D5 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 20 E7 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 08 09 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E5 05 F1 | 	add	objptr, ##62723
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E5 85 F1 | 	sub	objptr, ##62792
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     9C 88 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E5 05 F1 | 	add	objptr, ##62792
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E5 85 F1 | 	sub	objptr, ##62792
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     74 88 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E5 05 F1 | 	add	objptr, ##62792
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E5 85 F1 | 	sub	objptr, ##62792
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     4C 88 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E5 05 F1 | 	add	objptr, ##62792
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E5 85 F1 | 	sub	objptr, ##62792
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     C0 E4 05 F1 | 	add	objptr, ##62656
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     C8 E4 85 F1 | 	sub	objptr, ##62664
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     F8 7D B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     48 7E B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     38 7E B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     D0 E4 05 F1 | 	add	objptr, ##62672
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     EC E4 85 F1 | 	sub	objptr, ##62700
009b0     9C 7D B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     D0 E4 05 F1 | 	add	objptr, ##62672
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     EC E4 85 F1 | 	sub	objptr, ##62700
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     22 4A 05 F6 | 	mov	COUNT_, #34
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     4C F0 07 F1 | 	add	ptra, ##588
00a2c     56 00 00 FF 
00a30     F0 E4 05 F1 | 	add	objptr, ##44272
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     69 00 00 FF 
00a68     50 E5 85 F1 | 	sub	objptr, ##54096
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     E0 E4 05 F1 | 	add	objptr, ##43232
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     41 01 00 FF 
00abc     82 17 06 F6 | 	mov	arg03, ##@LR__4277
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     56 00 00 FF 
00afc     F0 E4 85 F1 | 	sub	objptr, ##44272
00b00     24 A7 B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     5C A6 B1 FD | 	call	#__system__LTrim_S
00b0c     56 00 00 FF 
00b10     F0 E4 05 F1 | 	add	objptr, ##44272
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     41 01 00 FF 
00b1c     83 1F 06 F6 | 	mov	local01, ##@LR__4278
00b20     24 00 00 FF 
00b24     94 E4 05 F1 | 	add	objptr, ##18580
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     94 E4 85 F1 | 	sub	objptr, ##18580
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     56 00 00 FF 
00b3c     F0 E4 85 F1 | 	sub	objptr, ##44272
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7A 00 00 FF 
00b5c     88 E5 05 F1 | 	add	objptr, ##62856
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7A 00 00 FF 
00b68     88 E5 85 F1 | 	sub	objptr, ##62856
00b6c     D4 26 90 AD |  if_e	jmp	#LR__0148
00b70     7A 00 00 FF 
00b74     8C E5 05 F1 | 	add	objptr, ##62860
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     9C E4 85 F1 | 	sub	objptr, ##18588
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     56 00 00 FF 
00b90     F0 E4 85 F1 | 	sub	objptr, ##44272
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     56 00 00 FF 
00bc0     F0 E4 05 F1 | 	add	objptr, ##44272
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     56 00 00 FF 
00bcc     F0 E4 85 F1 | 	sub	objptr, ##44272
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     30 A3 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     41 01 00 FF 
00be4     84 15 06 F6 | 	mov	arg02, ##@LR__4279
00be8     20 82 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7A 00 00 FF 
00bf8     8C E5 05 F1 | 	add	objptr, ##62860
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7A 00 00 FF 
00c04     8C E5 85 F1 | 	sub	objptr, ##62860
00c08     7A 00 00 AF 
00c0c     8C E5 05 A1 |  if_e	add	objptr, ##62860
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7A 00 00 AF 
00c18     8C E5 85 A1 |  if_e	sub	objptr, ##62860
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     56 00 00 FF 
00c24     F0 E4 05 F1 | 	add	objptr, ##44272
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     56 00 00 FF 
00c30     F0 E4 85 F1 | 	sub	objptr, ##44272
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     CC A2 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     41 01 00 FF 
00c48     86 15 06 F6 | 	mov	arg02, ##@LR__4280
00c4c     BC 81 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7A 00 00 AF 
00c58     8C E5 05 A1 |  if_e	add	objptr, ##62860
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7A 00 00 AF 
00c64     8C E5 85 A1 |  if_e	sub	objptr, ##62860
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7A 00 00 AF 
00c70     8C E5 05 A1 |  if_e	add	objptr, ##62860
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7A 00 00 AF 
00c7c     8C E5 85 A1 |  if_e	sub	objptr, ##62860
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     E0 E4 05 F1 | 	add	objptr, ##43232
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     AC E4 05 F1 | 	add	objptr, ##19628
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7A 00 00 FF 
00ca8     8C E5 85 F1 | 	sub	objptr, ##62860
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     56 00 00 FF 
00cc4     F0 E4 05 F1 | 	add	objptr, ##44272
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     56 00 00 FF 
00cd0     F0 E4 85 F1 | 	sub	objptr, ##44272
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     2C A2 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     41 01 00 FF 
00ce8     88 2F 06 F6 | 	mov	local09, ##@LR__4281
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     18 81 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     E0 E4 05 F1 | 	add	objptr, ##43232
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     E0 E4 85 F1 | 	sub	objptr, ##43232
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7A 00 00 FF 
00d34     88 E5 05 F1 | 	add	objptr, ##62856
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7A 00 00 FF 
00d40     88 E5 85 F1 | 	sub	objptr, ##62856
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7A 00 00 FF 
00d58     88 E5 05 F1 | 	add	objptr, ##62856
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7A 00 00 FF 
00d64     88 E5 85 F1 | 	sub	objptr, ##62856
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     56 00 00 FF 
00d74     F0 E4 05 F1 | 	add	objptr, ##44272
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     56 00 00 FF 
00d80     F0 E4 85 F1 | 	sub	objptr, ##44272
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     CC A0 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     70 A4 B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     A8 A3 B1 FD | 	call	#__system__LTrim_S
00dc0     7A 00 00 FF 
00dc4     90 E5 05 F1 | 	add	objptr, ##62864
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     A0 E4 85 F1 | 	sub	objptr, ##18592
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     56 00 00 FF 
00ddc     F0 E4 85 F1 | 	sub	objptr, ##44272
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     08 A0 B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     34 A4 B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     6C A3 B1 FD | 	call	#__system__LTrim_S
00dfc     56 00 00 FF 
00e00     F0 E4 05 F1 | 	add	objptr, ##44272
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     56 00 00 FF 
00e0c     F0 E4 85 F1 | 	sub	objptr, ##44272
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     41 01 00 FF 
00e18     8A 1F 06 F6 | 	mov	local01, ##@LR__4282
00e1c     7A 00 00 FF 
00e20     90 E5 05 F1 | 	add	objptr, ##62864
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7A 00 00 FF 
00e2c     90 E5 85 F1 | 	sub	objptr, ##62864
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     56 00 00 FF 
00e34     F8 E4 05 F1 | 	add	objptr, ##44280
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     56 00 00 FF 
00e40     F8 E4 85 F1 | 	sub	objptr, ##44280
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7A 00 00 FF 
00e54     90 E5 05 F1 | 	add	objptr, ##62864
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7A 00 00 FF 
00e60     90 E5 85 F1 | 	sub	objptr, ##62864
00e64     41 01 00 FF 
00e68     8B 15 06 F6 | 	mov	arg02, ##@LR__4283
00e6c     9C 7F B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     56 00 00 5F 
00e78     F8 E4 05 51 |  if_ne	add	objptr, ##44280
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     56 00 00 5F 
00e84     F8 E4 85 51 |  if_ne	sub	objptr, ##44280
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     56 00 00 FF 
00e90     F8 E4 05 F1 | 	add	objptr, ##44280
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     56 00 00 FF 
00e9c     F8 E4 85 F1 | 	sub	objptr, ##44280
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7A 00 00 FF 
00eb0     90 E5 05 F1 | 	add	objptr, ##62864
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7A 00 00 FF 
00ebc     90 E5 85 F1 | 	sub	objptr, ##62864
00ec0     41 01 00 FF 
00ec4     8C 15 06 F6 | 	mov	arg02, ##@LR__4284
00ec8     40 7F B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     56 00 00 AF 
00ed4     F8 E4 05 A1 |  if_e	add	objptr, ##44280
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     56 00 00 AF 
00ee0     F8 E4 85 A1 |  if_e	sub	objptr, ##44280
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     56 00 00 FF 
00eec     F8 E4 05 F1 | 	add	objptr, ##44280
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     56 00 00 FF 
00ef8     F8 E4 85 F1 | 	sub	objptr, ##44280
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7A 00 00 FF 
00f08     90 E5 05 F1 | 	add	objptr, ##62864
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7A 00 00 FF 
00f14     90 E5 85 F1 | 	sub	objptr, ##62864
00f18     41 01 00 FF 
00f1c     8D 15 06 F6 | 	mov	arg02, ##@LR__4285
00f20     E8 7E B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     56 00 00 5F 
00f2c     F8 E4 05 51 |  if_ne	add	objptr, ##44280
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     56 00 00 5F 
00f38     F8 E4 85 51 |  if_ne	sub	objptr, ##44280
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     56 00 00 FF 
00f44     F8 E4 05 F1 | 	add	objptr, ##44280
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     56 00 00 FF 
00f50     F8 E4 85 F1 | 	sub	objptr, ##44280
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7A 00 00 FF 
00f60     90 E5 05 F1 | 	add	objptr, ##62864
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7A 00 00 FF 
00f6c     90 E5 85 F1 | 	sub	objptr, ##62864
00f70     41 01 00 FF 
00f74     8E 15 06 F6 | 	mov	arg02, ##@LR__4286
00f78     90 7E B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     56 00 00 AF 
00f84     F8 E4 05 A1 |  if_e	add	objptr, ##44280
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     56 00 00 AF 
00f90     F8 E4 85 A1 |  if_e	sub	objptr, ##44280
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     56 00 00 FF 
00fb0     F0 E4 05 F1 | 	add	objptr, ##44272
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     56 00 00 FF 
00fbc     F0 E4 85 F1 | 	sub	objptr, ##44272
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     40 9F B1 FD | 	call	#__system__Mid_S
00fcc     7A 00 00 FF 
00fd0     94 E5 05 F1 | 	add	objptr, ##62868
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7A 00 00 FF 
00fe0     94 E5 85 F1 | 	sub	objptr, ##62868
00fe4     68 25 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7A 00 00 FF 
01010     88 E5 05 F1 | 	add	objptr, ##62856
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7A 00 00 FF 
0101c     88 E5 85 F1 | 	sub	objptr, ##62856
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7A 00 00 FF 
0106c     9C E5 05 F1 | 	add	objptr, ##62876
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7A 00 00 FF 
010a0     9C E5 85 F1 | 	sub	objptr, ##62876
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     56 00 00 FF 
010b4     F0 E4 05 F1 | 	add	objptr, ##44272
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     AC E4 05 F1 | 	add	objptr, ##18604
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7A 00 00 FF 
010cc     9C E5 85 F1 | 	sub	objptr, ##62876
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     34 9E B1 FD | 	call	#__system__Mid_S
010d8     7A 00 00 FF 
010dc     A4 E5 05 F1 | 	add	objptr, ##62884
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7A 00 00 FF 
010e8     A4 E5 85 F1 | 	sub	objptr, ##62884
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     41 01 00 FF 
010f4     8F 15 06 F6 | 	mov	arg02, ##@LR__4287
010f8     10 7D B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     E0 E4 05 F1 | 	add	objptr, ##43232
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     C4 E4 05 F1 | 	add	objptr, ##19652
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7A 00 00 FF 
01128     A4 E5 85 F1 | 	sub	objptr, ##62884
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     56 00 00 FF 
01138     F0 E4 05 F1 | 	add	objptr, ##44272
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     AC E4 05 F1 | 	add	objptr, ##18604
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7A 00 00 FF 
01164     9C E5 85 F1 | 	sub	objptr, ##62876
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     94 9D B1 FD | 	call	#__system__Mid_S
01178     7A 00 00 FF 
0117c     A4 E5 05 F1 | 	add	objptr, ##62884
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7A 00 00 FF 
01188     A4 E5 85 F1 | 	sub	objptr, ##62884
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     41 01 00 FF 
01194     90 15 06 F6 | 	mov	arg02, ##@LR__4288
01198     70 7C B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     E0 E4 05 F1 | 	add	objptr, ##43232
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     C4 E4 05 F1 | 	add	objptr, ##19652
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7A 00 00 FF 
011c8     A4 E5 85 F1 | 	sub	objptr, ##62884
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     E0 E4 05 F1 | 	add	objptr, ##43232
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     41 01 00 FF 
011fc     91 15 06 F6 | 	mov	arg02, ##@LR__4289
01200     54 00 00 FF 
01204     E0 E4 85 F1 | 	sub	objptr, ##43232
01208     00 7C B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     E0 E4 05 F1 | 	add	objptr, ##43232
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     C4 E4 05 F1 | 	add	objptr, ##19652
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     C4 E4 85 F1 | 	sub	objptr, ##19652
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     E0 E4 85 F1 | 	sub	objptr, ##43232
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     C4 7B B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     E0 E4 05 F1 | 	add	objptr, ##43232
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     E0 E4 85 F1 | 	sub	objptr, ##43232
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7A 00 00 FF 
01314     A4 E5 05 F1 | 	add	objptr, ##62884
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7A 00 00 FF 
01320     A4 E5 85 F1 | 	sub	objptr, ##62884
01324     41 01 00 FF 
01328     93 15 06 F6 | 	mov	arg02, ##@LR__4290
0132c     DC 7A B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7A 00 00 FF 
01340     A4 E5 05 F1 | 	add	objptr, ##62884
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7A 00 00 FF 
0134c     A4 E5 85 F1 | 	sub	objptr, ##62884
01350     41 01 00 FF 
01354     95 15 06 F6 | 	mov	arg02, ##@LR__4291
01358     B0 7A B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     E0 E4 05 F1 | 	add	objptr, ##43232
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     E0 E4 85 F1 | 	sub	objptr, ##43232
01398     E0 9A B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     41 01 00 FF 
013a4     97 15 06 F6 | 	mov	arg02, ##@LR__4292
013a8     60 7A B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     E0 E4 05 F1 | 	add	objptr, ##43232
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     E0 E4 85 F1 | 	sub	objptr, ##43232
013e0     10 9A B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     41 01 00 FF 
013ec     99 15 06 F6 | 	mov	arg02, ##@LR__4293
013f0     18 7A B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     E0 E4 05 F1 | 	add	objptr, ##43232
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     E0 E4 85 F1 | 	sub	objptr, ##43232
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     F8 99 B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     AC 79 B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     E0 E4 05 F1 | 	add	objptr, ##43232
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     E0 E4 85 F1 | 	sub	objptr, ##43232
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     E0 E4 05 F1 | 	add	objptr, ##43232
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     CC E4 05 F1 | 	add	objptr, ##19660
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     CC E4 85 F1 | 	sub	objptr, ##19660
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     D0 E4 05 F1 | 	add	objptr, ##19664
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7A 00 00 FF 
01594     AC E5 85 F1 | 	sub	objptr, ##62892
01598     41 01 00 FF 
0159c     9B 15 06 F6 | 	mov	arg02, ##@LR__4294
015a0     68 78 B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7A 00 00 FF 
015b0     AC E5 05 F1 | 	add	objptr, ##62892
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7A 00 00 FF 
015bc     AC E5 85 F1 | 	sub	objptr, ##62892
015c0     41 01 00 FF 
015c4     9D 15 06 F6 | 	mov	arg02, ##@LR__4295
015c8     40 78 B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7A 00 00 FF 
015d8     AC E5 05 F1 | 	add	objptr, ##62892
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7A 00 00 FF 
015e4     AC E5 85 F1 | 	sub	objptr, ##62892
015e8     41 01 00 FF 
015ec     9F 15 06 F6 | 	mov	arg02, ##@LR__4296
015f0     18 78 B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7A 00 00 FF 
01600     AC E5 05 F1 | 	add	objptr, ##62892
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7A 00 00 FF 
0160c     AC E5 85 F1 | 	sub	objptr, ##62892
01610     41 01 00 FF 
01614     A1 33 06 F6 | 	mov	local11, ##@LR__4297
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     EC 77 B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7A 00 00 FF 
0162c     AC E5 05 F1 | 	add	objptr, ##62892
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7A 00 00 FF 
01638     AC E5 85 F1 | 	sub	objptr, ##62892
0163c     41 01 00 FF 
01640     A3 31 06 F6 | 	mov	local10, ##@LR__4298
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     BC 77 B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7A 00 00 FF 
0165c     AC E5 05 F1 | 	add	objptr, ##62892
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7A 00 00 FF 
01668     AC E5 85 F1 | 	sub	objptr, ##62892
0166c     41 01 00 FF 
01670     A5 31 06 F6 | 	mov	local10, ##@LR__4299
01674     18 15 02 F6 | 	mov	arg02, local10
01678     90 77 B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7A 00 00 FF 
01688     AC E5 05 F1 | 	add	objptr, ##62892
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7A 00 00 FF 
01694     AC E5 85 F1 | 	sub	objptr, ##62892
01698     41 01 00 FF 
0169c     A7 37 06 F6 | 	mov	local13, ##@LR__4300
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     64 77 B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7A 00 00 FF 
016b4     B0 E5 05 F1 | 	add	objptr, ##62896
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7A 00 00 FF 
016c0     B0 E5 85 F1 | 	sub	objptr, ##62896
016c4     41 01 00 FF 
016c8     A9 4B 06 F6 | 	mov	local23, ##@LR__4301
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     34 77 B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7A 00 00 FF 
016e4     AC E5 05 F1 | 	add	objptr, ##62892
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7A 00 00 FF 
016f0     AC E5 85 F1 | 	sub	objptr, ##62892
016f4     41 01 00 FF 
016f8     AB 4B 06 F6 | 	mov	local23, ##@LR__4302
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     08 77 B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7A 00 00 FF 
01710     B0 E5 05 F1 | 	add	objptr, ##62896
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7A 00 00 FF 
0171c     B0 E5 85 F1 | 	sub	objptr, ##62896
01720     41 01 00 FF 
01724     AD 45 06 F6 | 	mov	local20, ##@LR__4303
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     D8 76 B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7A 00 00 FF 
01740     AC E5 05 F1 | 	add	objptr, ##62892
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7A 00 00 FF 
0174c     AC E5 85 F1 | 	sub	objptr, ##62892
01750     41 01 00 FF 
01754     AF 45 06 F6 | 	mov	local20, ##@LR__4304
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     AC 76 B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7A 00 00 FF 
0176c     B0 E5 05 F1 | 	add	objptr, ##62896
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7A 00 00 FF 
01778     B0 E5 85 F1 | 	sub	objptr, ##62896
0177c     41 01 00 FF 
01780     B1 4D 06 F6 | 	mov	local24, ##@LR__4305
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     7C 76 B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7A 00 00 FF 
0179c     AC E5 05 F1 | 	add	objptr, ##62892
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7A 00 00 FF 
017a8     AC E5 85 F1 | 	sub	objptr, ##62892
017ac     41 01 00 FF 
017b0     B3 4F 06 F6 | 	mov	local25, ##@LR__4306
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     4C 76 B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7A 00 00 FF 
017cc     B0 E5 05 F1 | 	add	objptr, ##62896
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7A 00 00 FF 
017d8     B0 E5 85 F1 | 	sub	objptr, ##62896
017dc     41 01 00 FF 
017e0     B5 51 06 F6 | 	mov	local26, ##@LR__4307
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     1C 76 B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     E0 E4 05 F1 | 	add	objptr, ##43232
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     CC E4 05 F1 | 	add	objptr, ##19660
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7A 00 00 FF 
01824     B0 E5 85 F1 | 	sub	objptr, ##62896
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     0C 76 B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     E0 E4 05 F1 | 	add	objptr, ##43232
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     E0 E4 85 F1 | 	sub	objptr, ##43232
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     E0 E4 05 F1 | 	add	objptr, ##43232
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     E0 E4 85 F1 | 	sub	objptr, ##43232
01930     F4 98 B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     2C 98 B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     E0 E4 05 F1 | 	add	objptr, ##43232
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     E0 E4 85 F1 | 	sub	objptr, ##43232
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     E0 E4 05 F1 | 	add	objptr, ##43232
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     E0 E4 85 F1 | 	sub	objptr, ##43232
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     E0 E4 05 F1 | 	add	objptr, ##43232
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     E0 E4 85 F1 | 	sub	objptr, ##43232
01a98     58 93 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     41 01 00 FF 
01aa4     B7 15 06 F6 | 	mov	arg02, ##@LR__4308
01aa8     60 73 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     E0 E4 05 F1 | 	add	objptr, ##43232
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     E0 E4 85 F1 | 	sub	objptr, ##43232
01ad8     A0 93 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     41 01 00 FF 
01ae4     B9 15 06 F6 | 	mov	arg02, ##@LR__4309
01ae8     20 73 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     E0 E4 05 F1 | 	add	objptr, ##43232
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     E0 E4 85 F1 | 	sub	objptr, ##43232
01b24     80 95 B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     E0 E4 05 F1 | 	add	objptr, ##43232
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     E0 E4 85 F1 | 	sub	objptr, ##43232
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     E0 E4 05 F1 | 	add	objptr, ##43232
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     E0 E4 85 F1 | 	sub	objptr, ##43232
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     98 16 90 AD |  if_e	jmp	#LR__0148
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     E0 E4 05 F1 | 	add	objptr, ##43232
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     E0 E4 85 F1 | 	sub	objptr, ##43232
01bc0     B0 2E B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7A 00 00 5F 
01bcc     B4 E5 05 51 |  if_ne	add	objptr, ##62900
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7A 00 00 FF 
01bd8     B4 E5 E5 F3 | 	sumnz	objptr, ##62900
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7A 00 00 AF 
01be4     B4 E5 85 A1 |  if_e	sub	objptr, ##62900
01be8     7A 00 00 FF 
01bec     B4 E5 05 F1 | 	add	objptr, ##62900
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     D4 E4 85 F1 | 	sub	objptr, ##19668
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     D8 E4 05 F1 | 	add	objptr, ##19672
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     D4 E4 85 F1 | 	sub	objptr, ##19668
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     41 01 00 FF 
01c38     BB 17 06 F6 | 	mov	arg03, ##@LR__4310
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     E0 E4 85 F1 | 	sub	objptr, ##43232
01c48     94 96 B1 FD | 	call	#__system__Instr
01c4c     7A 00 00 FF 
01c50     BC E5 05 F1 | 	add	objptr, ##62908
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7A 00 00 FF 
01c60     BC E5 85 F1 | 	sub	objptr, ##62908
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7A 00 00 FF 
01c70     B4 E5 05 F1 | 	add	objptr, ##62900
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     D4 E4 85 F1 | 	sub	objptr, ##19668
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     E0 E4 85 F1 | 	sub	objptr, ##43232
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7A 00 00 FF 
01cb8     BC E5 05 F1 | 	add	objptr, ##62908
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7A 00 00 FF 
01cc4     BC E5 85 F1 | 	sub	objptr, ##62908
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7A 00 00 FF 
01cdc     B4 E5 05 F1 | 	add	objptr, ##62900
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     D4 E4 85 F1 | 	sub	objptr, ##19668
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     D4 E4 05 F1 | 	add	objptr, ##19668
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     D4 E4 85 F1 | 	sub	objptr, ##19668
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     D4 E4 05 F1 | 	add	objptr, ##19668
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     D4 E4 85 F1 | 	sub	objptr, ##19668
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     E0 E4 85 F1 | 	sub	objptr, ##43232
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7A 00 00 FF 
01dd0     BC E5 05 F1 | 	add	objptr, ##62908
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7A 00 00 FF 
01ddc     BC E5 85 F1 | 	sub	objptr, ##62908
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     90 90 B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7A 00 00 FF 
01df4     B4 E5 05 F1 | 	add	objptr, ##62900
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     D4 E4 85 F1 | 	sub	objptr, ##19668
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     DC E4 05 F1 | 	add	objptr, ##19676
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7A 00 00 FF 
01e34     BC E5 85 F1 | 	sub	objptr, ##62908
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     B0 8F B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7A 00 00 FF 
01e4c     B4 E5 05 F1 | 	add	objptr, ##62900
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     D4 E4 85 F1 | 	sub	objptr, ##19668
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     E0 E4 85 F1 | 	sub	objptr, ##43232
01e74     7C 8F B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     41 01 00 FF 
01e80     BD 15 06 F6 | 	mov	arg02, ##@LR__4311
01e84     84 6F B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7A 00 00 FF 
01e94     B4 E5 05 F1 | 	add	objptr, ##62900
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     D4 E4 85 F1 | 	sub	objptr, ##19668
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     E0 E4 85 F1 | 	sub	objptr, ##43232
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7A 00 00 FF 
01ee8     B4 E5 05 F1 | 	add	objptr, ##62900
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     D4 E4 85 F1 | 	sub	objptr, ##19668
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     D4 E4 05 F1 | 	add	objptr, ##19668
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     D4 E4 85 F1 | 	sub	objptr, ##19668
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     D4 E4 05 F1 | 	add	objptr, ##19668
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     D4 E4 85 F1 | 	sub	objptr, ##19668
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     E0 E4 85 F1 | 	sub	objptr, ##43232
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     84 8E B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7A 00 00 FF 
02000     B4 E5 05 F1 | 	add	objptr, ##62900
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     D4 E4 85 F1 | 	sub	objptr, ##19668
02014     F2 26 02 F1 | 	add	local05, objptr
02018     41 01 00 FF 
0201c     BF 33 06 F6 | 	mov	local11, ##@LR__4312
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     E0 E4 85 F1 | 	sub	objptr, ##43232
0202c                 | LR__0107
0202c     7A 00 00 FF 
02030     B4 E5 05 F1 | 	add	objptr, ##62900
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     D4 E4 85 F1 | 	sub	objptr, ##19668
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     D8 E4 05 F1 | 	add	objptr, ##19672
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7A 00 00 FF 
0205c     B8 E5 85 F1 | 	sub	objptr, ##62904
02060     41 01 00 FF 
02064     C1 15 06 F6 | 	mov	arg02, ##@LR__4313
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     9C 6D B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7A 00 00 FF 
0207c     B8 E5 05 F1 | 	add	objptr, ##62904
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7A 00 00 FF 
02088     B8 E5 85 F1 | 	sub	objptr, ##62904
0208c     41 01 00 FF 
02090     C7 15 06 F6 | 	mov	arg02, ##@LR__4314
02094     74 6D B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7A 00 00 FF 
020a4     B8 E5 05 F1 | 	add	objptr, ##62904
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7A 00 00 FF 
020b0     B8 E5 85 F1 | 	sub	objptr, ##62904
020b4     41 01 00 FF 
020b8     CE 15 06 F6 | 	mov	arg02, ##@LR__4315
020bc     4C 6D B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7A 00 00 FF 
020cc     B4 E5 05 F1 | 	add	objptr, ##62900
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     D4 E4 85 F1 | 	sub	objptr, ##19668
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     E0 E4 85 F1 | 	sub	objptr, ##43232
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7A 00 00 FF 
02118     B4 E5 05 F1 | 	add	objptr, ##62900
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     D4 E4 85 F1 | 	sub	objptr, ##19668
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     41 01 00 FF 
0213c     D4 15 06 F6 | 	mov	arg02, ##@LR__4316
02140     54 00 00 FF 
02144     E0 E4 85 F1 | 	sub	objptr, ##43232
02148     C0 6C B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7A 00 00 FF 
02158     B4 E5 05 F1 | 	add	objptr, ##62900
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     D4 E4 85 F1 | 	sub	objptr, ##19668
02170     F2 26 02 F1 | 	add	local05, objptr
02174     41 01 00 FF 
02178     D7 33 06 F6 | 	mov	local11, ##@LR__4317
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     D4 E4 05 F1 | 	add	objptr, ##19668
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     D4 E4 85 F1 | 	sub	objptr, ##19668
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     E0 E4 85 F1 | 	sub	objptr, ##43232
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7A 00 00 FF 
021b8     B4 E5 05 F1 | 	add	objptr, ##62900
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     D4 E4 85 F1 | 	sub	objptr, ##19668
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     41 01 00 FF 
021e0     D9 15 06 F6 | 	mov	arg02, ##@LR__4318
021e4     54 00 00 FF 
021e8     E0 E4 85 F1 | 	sub	objptr, ##43232
021ec     1C 6C B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7A 00 00 FF 
021fc     B4 E5 05 F1 | 	add	objptr, ##62900
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     D4 E4 85 F1 | 	sub	objptr, ##19668
02214     F2 26 02 F1 | 	add	local05, objptr
02218     41 01 00 FF 
0221c     DD 33 06 F6 | 	mov	local11, ##@LR__4319
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     D4 E4 05 F1 | 	add	objptr, ##19668
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     D4 E4 85 F1 | 	sub	objptr, ##19668
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     E0 E4 85 F1 | 	sub	objptr, ##43232
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7A 00 00 FF 
02260     B8 E5 05 F1 | 	add	objptr, ##62904
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7A 00 00 FF 
0226c     B8 E5 85 F1 | 	sub	objptr, ##62904
02270     41 01 00 FF 
02274     DF 15 06 F6 | 	mov	arg02, ##@LR__4320
02278     90 6B B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7A 00 00 FF 
02288     B8 E5 05 F1 | 	add	objptr, ##62904
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7A 00 00 FF 
02294     B8 E5 85 F1 | 	sub	objptr, ##62904
02298     41 01 00 FF 
0229c     E4 15 06 F6 | 	mov	arg02, ##@LR__4321
022a0     68 6B B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7A 00 00 FF 
022b0     B4 E5 05 F1 | 	add	objptr, ##62900
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     D4 E4 85 F1 | 	sub	objptr, ##19668
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     41 01 00 FF 
022d4     E7 15 06 F6 | 	mov	arg02, ##@LR__4322
022d8     54 00 00 FF 
022dc     E0 E4 85 F1 | 	sub	objptr, ##43232
022e0     28 6B B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7A 00 00 FF 
022f0     B4 E5 05 F1 | 	add	objptr, ##62900
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     D4 E4 85 F1 | 	sub	objptr, ##19668
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     41 01 00 FF 
02310     ED 33 06 F6 | 	mov	local11, ##@LR__4323
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     E0 E4 85 F1 | 	sub	objptr, ##43232
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7A 00 00 FF 
02324     B4 E5 05 F1 | 	add	objptr, ##62900
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     D4 E4 85 F1 | 	sub	objptr, ##19668
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     41 01 00 FF 
02348     EF 15 06 F6 | 	mov	arg02, ##@LR__4324
0234c     54 00 00 FF 
02350     E0 E4 85 F1 | 	sub	objptr, ##43232
02354     B4 6A B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7A 00 00 FF 
02364     B4 E5 05 F1 | 	add	objptr, ##62900
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     D4 E4 85 F1 | 	sub	objptr, ##19668
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     41 01 00 FF 
02384     F8 33 06 F6 | 	mov	local11, ##@LR__4325
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     E0 E4 85 F1 | 	sub	objptr, ##43232
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7A 00 00 FF 
02398     B4 E5 05 F1 | 	add	objptr, ##62900
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     D4 E4 85 F1 | 	sub	objptr, ##19668
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     41 01 00 FF 
023bc     FA 15 06 F6 | 	mov	arg02, ##@LR__4326
023c0     54 00 00 FF 
023c4     E0 E4 85 F1 | 	sub	objptr, ##43232
023c8     40 6A B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7A 00 00 FF 
023d8     B4 E5 05 F1 | 	add	objptr, ##62900
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     D4 E4 85 F1 | 	sub	objptr, ##19668
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     42 01 00 FF 
023f8     03 32 06 F6 | 	mov	local11, ##@LR__4327
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     E0 E4 85 F1 | 	sub	objptr, ##43232
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7A 00 00 FF 
0240c     B4 E5 05 F1 | 	add	objptr, ##62900
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     D4 E4 85 F1 | 	sub	objptr, ##19668
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     42 01 00 FF 
02430     05 14 06 F6 | 	mov	arg02, ##@LR__4328
02434     54 00 00 FF 
02438     E0 E4 85 F1 | 	sub	objptr, ##43232
0243c     CC 69 B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7A 00 00 FF 
0244c     B4 E5 05 F1 | 	add	objptr, ##62900
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     D4 E4 85 F1 | 	sub	objptr, ##19668
02464     F2 26 02 F1 | 	add	local05, objptr
02468     42 01 00 FF 
0246c     0E 32 06 F6 | 	mov	local11, ##@LR__4329
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     E0 E4 85 F1 | 	sub	objptr, ##43232
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7A 00 00 FF 
02480     B4 E5 05 F1 | 	add	objptr, ##62900
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     D4 E4 85 F1 | 	sub	objptr, ##19668
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     42 01 00 FF 
024a8     10 14 06 F6 | 	mov	arg02, ##@LR__4330
024ac     54 00 00 FF 
024b0     E0 E4 85 F1 | 	sub	objptr, ##43232
024b4     54 69 B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7A 00 00 FF 
024c4     B4 E5 05 F1 | 	add	objptr, ##62900
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     D4 E4 85 F1 | 	sub	objptr, ##19668
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     42 01 00 FF 
024e4     13 32 06 F6 | 	mov	local11, ##@LR__4331
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     E0 E4 85 F1 | 	sub	objptr, ##43232
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     74 05 90 3D |  if_ae	jmp	#LR__0128
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     E0 E4 05 F1 | 	add	objptr, ##43232
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     E0 E4 85 F1 | 	sub	objptr, ##43232
02534     18 10 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     E0 E4 05 F1 | 	add	objptr, ##43232
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     E0 E4 85 F1 | 	sub	objptr, ##43232
0256c     00 05 90 3D |  if_ae	jmp	#LR__0127
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     E0 E4 05 F1 | 	add	objptr, ##43232
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     E0 E4 85 F1 | 	sub	objptr, ##43232
025a0     CC 0C B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     E0 E4 05 F1 | 	add	objptr, ##43232
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     E0 E4 85 F1 | 	sub	objptr, ##43232
025d8     94 04 90 3D |  if_ae	jmp	#LR__0127
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     E0 E4 05 F1 | 	add	objptr, ##43232
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     E0 E4 85 F1 | 	sub	objptr, ##43232
0260c                 | ' 
0260c                 | ' select case s
0260c     42 01 00 FF 
02610     C9 14 06 F6 | 	mov	arg02, ##@LR__4384
02614     F4 67 B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     E0 E4 05 F1 | 	add	objptr, ##43232
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     E0 E4 85 F1 | 	sub	objptr, ##43232
02658     14 04 90 3D |  if_ae	jmp	#LR__0127
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     E0 E4 05 F1 | 	add	objptr, ##43232
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     E0 E4 85 F1 | 	sub	objptr, ##43232
0268c     C0 10 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     E0 E4 05 F1 | 	add	objptr, ##43232
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     E0 E4 85 F1 | 	sub	objptr, ##43232
026c4     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     E0 E4 05 F1 | 	add	objptr, ##43232
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 31 02 F6 | 	mov	local10, local03
026e0     18 37 02 F6 | 	mov	local13, local10
026e4     1B 35 02 F6 | 	mov	local12, local13
026e8     03 34 66 F0 | 	shl	local12, #3
026ec     F2 4A 02 F6 | 	mov	local23, objptr
026f0     F2 34 02 F1 | 	add	local12, objptr
026f4     1A 13 02 FB | 	rdlong	arg01, local12
026f8     54 00 00 FF 
026fc     E0 E4 85 F1 | 	sub	objptr, ##43232
02700     2C 1A B0 FD | 	call	#_isfunction
02704     FD FA E1 F8 | 	getbyte	result1, result1, #0
02708     04 2E 06 F1 | 	add	local09, #4
0270c     17 FB 61 FC | 	wrlong	result1, local09
02710                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02710     11 2F 02 F6 | 	mov	local09, local03
02714     03 2E 66 F0 | 	shl	local09, #3
02718     54 00 00 FF 
0271c     E0 E4 05 F1 | 	add	objptr, ##43232
02720     F2 2E 02 F1 | 	add	local09, objptr
02724     04 2E 06 F1 | 	add	local09, #4
02728     17 33 02 FB | 	rdlong	local11, local09
0272c     01 32 56 F2 | 	cmps	local11, #1 wc
02730     54 00 00 FF 
02734     E0 E4 85 F1 | 	sub	objptr, ##43232
02738     34 03 90 3D |  if_ae	jmp	#LR__0127
0273c     11 27 02 F6 | 	mov	local05, local03
02740     03 26 66 F0 | 	shl	local05, #3
02744     54 00 00 FF 
02748     E0 E4 05 F1 | 	add	objptr, ##43232
0274c     F2 26 02 F1 | 	add	local05, objptr
02750     13 13 02 FB | 	rdlong	arg01, local05
02754     54 00 00 FF 
02758     E0 E4 85 F1 | 	sub	objptr, ##43232
0275c     E4 1E B0 FD | 	call	#_isnum
02760     FD 1E 02 F6 | 	mov	local01, result1
02764     7A 00 00 FF 
02768     C0 E5 05 F1 | 	add	objptr, ##62912
0276c     F2 1E 62 FC | 	wrlong	local01, objptr
02770     11 27 02 F6 | 	mov	local05, local03
02774     03 26 66 F0 | 	shl	local05, #3
02778     26 00 00 FF 
0277c     E0 E4 85 F1 | 	sub	objptr, ##19680
02780     F2 26 02 F1 | 	add	local05, objptr
02784     13 13 02 FB | 	rdlong	arg01, local05
02788     54 00 00 FF 
0278c     E0 E4 85 F1 | 	sub	objptr, ##43232
02790     88 21 B0 FD | 	call	#_isint
02794     FD 1E 02 F6 | 	mov	local01, result1
02798     7A 00 00 FF 
0279c     C4 E5 05 F1 | 	add	objptr, ##62916
027a0     F2 1E 62 FC | 	wrlong	local01, objptr
027a4     11 27 02 F6 | 	mov	local05, local03
027a8     03 26 66 F0 | 	shl	local05, #3
027ac     26 00 00 FF 
027b0     E4 E4 85 F1 | 	sub	objptr, ##19684
027b4     F2 28 02 F6 | 	mov	local06, objptr
027b8     F2 26 02 F1 | 	add	local05, objptr
027bc     13 13 02 FB | 	rdlong	arg01, local05
027c0     54 00 00 FF 
027c4     E0 E4 85 F1 | 	sub	objptr, ##43232
027c8     A8 22 B0 FD | 	call	#_isdec
027cc     7A 00 00 FF 
027d0     C8 E5 05 F1 | 	add	objptr, ##62920
027d4     F2 FA 61 FC | 	wrlong	result1, objptr
027d8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d8     08 E4 85 F1 | 	sub	objptr, #8
027dc     F2 1E 0A FB | 	rdlong	local01, objptr wz
027e0     7A 00 00 FF 
027e4     C0 E5 85 F1 | 	sub	objptr, ##62912
027e8     60 00 90 AD |  if_e	jmp	#LR__0120
027ec     7A 00 00 FF 
027f0     C4 E5 05 F1 | 	add	objptr, ##62916
027f4     F2 2E 0A FB | 	rdlong	local09, objptr wz
027f8     7A 00 00 FF 
027fc     C4 E5 85 F1 | 	sub	objptr, ##62916
02800     48 00 90 AD |  if_e	jmp	#LR__0120
02804     7A 00 00 FF 
02808     C8 E5 05 F1 | 	add	objptr, ##62920
0280c     F2 32 0A FB | 	rdlong	local11, objptr wz
02810     7A 00 00 FF 
02814     C8 E5 85 F1 | 	sub	objptr, ##62920
02818     30 00 90 AD |  if_e	jmp	#LR__0120
0281c     11 25 02 F6 | 	mov	local04, local03
02820     12 2F 02 F6 | 	mov	local09, local04
02824     03 2E 66 F0 | 	shl	local09, #3
02828     54 00 00 FF 
0282c     E0 E4 05 F1 | 	add	objptr, ##43232
02830     F2 2E 02 F1 | 	add	local09, objptr
02834     04 2E 06 F1 | 	add	local09, #4
02838     01 00 80 FF 
0283c     17 01 68 FC | 	wrlong	##512, local09
02840     54 00 00 FF 
02844     E0 E4 85 F1 | 	sub	objptr, ##43232
02848     24 02 90 FD | 	jmp	#LR__0127
0284c                 | LR__0120
0284c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
0284c     7A 00 00 FF 
02850     C0 E5 05 F1 | 	add	objptr, ##62912
02854     F2 1E 0A FB | 	rdlong	local01, objptr wz
02858     7A 00 00 FF 
0285c     C0 E5 85 F1 | 	sub	objptr, ##62912
02860     64 00 90 AD |  if_e	jmp	#LR__0121
02864     7A 00 00 FF 
02868     C4 E5 05 F1 | 	add	objptr, ##62916
0286c     F2 2E 0A FB | 	rdlong	local09, objptr wz
02870     7A 00 00 FF 
02874     C4 E5 85 F1 | 	sub	objptr, ##62916
02878     7A 00 00 5F 
0287c     C8 E5 05 51 |  if_ne	add	objptr, ##62920
02880     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02884     7A 00 00 5F 
02888     C8 E5 85 51 |  if_ne	sub	objptr, ##62920
0288c     19 29 22 56 |  if_ne	not	local06, local11
02890     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02894     30 00 90 AD |  if_e	jmp	#LR__0121
02898     11 25 02 F6 | 	mov	local04, local03
0289c     12 2F 02 F6 | 	mov	local09, local04
028a0     03 2E 66 F0 | 	shl	local09, #3
028a4     54 00 00 FF 
028a8     E0 E4 05 F1 | 	add	objptr, ##43232
028ac     F2 2E 02 F1 | 	add	local09, objptr
028b0     04 2E 06 F1 | 	add	local09, #4
028b4     01 00 80 FF 
028b8     17 03 68 FC | 	wrlong	##513, local09
028bc     54 00 00 FF 
028c0     E0 E4 85 F1 | 	sub	objptr, ##43232
028c4     A8 01 90 FD | 	jmp	#LR__0127
028c8                 | LR__0121
028c8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c8     7A 00 00 FF 
028cc     C0 E5 05 F1 | 	add	objptr, ##62912
028d0     F2 1E 0A FB | 	rdlong	local01, objptr wz
028d4     7A 00 00 FF 
028d8     C0 E5 85 F1 | 	sub	objptr, ##62912
028dc     7A 00 00 5F 
028e0     C4 E5 05 51 |  if_ne	add	objptr, ##62916
028e4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
028e8     7A 00 00 5F 
028ec     C4 E5 85 51 |  if_ne	sub	objptr, ##62916
028f0     17 2F 22 56 |  if_ne	not	local09, local09
028f4     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
028f8     7A 00 00 5F 
028fc     C8 E5 05 51 |  if_ne	add	objptr, ##62920
02900     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02904     7A 00 00 5F 
02908     C8 E5 85 51 |  if_ne	sub	objptr, ##62920
0290c     19 29 22 56 |  if_ne	not	local06, local11
02910     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02914     30 00 90 AD |  if_e	jmp	#LR__0122
02918     11 25 02 F6 | 	mov	local04, local03
0291c     12 2F 02 F6 | 	mov	local09, local04
02920     03 2E 66 F0 | 	shl	local09, #3
02924     54 00 00 FF 
02928     E0 E4 05 F1 | 	add	objptr, ##43232
0292c     F2 2E 02 F1 | 	add	local09, objptr
02930     04 2E 06 F1 | 	add	local09, #4
02934     01 00 80 FF 
02938     17 05 68 FC | 	wrlong	##514, local09
0293c     54 00 00 FF 
02940     E0 E4 85 F1 | 	sub	objptr, ##43232
02944     28 01 90 FD | 	jmp	#LR__0127
02948                 | LR__0122
02948                 | ' 
02948                 | ' if isstring(lparts(i).part$) then 
02948     11 27 02 F6 | 	mov	local05, local03
0294c     03 26 66 F0 | 	shl	local05, #3
02950     54 00 00 FF 
02954     E0 E4 05 F1 | 	add	objptr, ##43232
02958     F2 26 02 F1 | 	add	local05, objptr
0295c     13 13 02 FB | 	rdlong	arg01, local05
02960     54 00 00 FF 
02964     E0 E4 85 F1 | 	sub	objptr, ##43232
02968     C8 21 B0 FD | 	call	#_isstring
0296c     00 FA 0D F2 | 	cmp	result1, #0 wz
02970     A0 00 90 AD |  if_e	jmp	#LR__0125
02974     11 2F 02 F6 | 	mov	local09, local03
02978     03 2E 66 F0 | 	shl	local09, #3
0297c     54 00 00 FF 
02980     E0 E4 05 F1 | 	add	objptr, ##43232
02984     F2 2E 02 F1 | 	add	local09, objptr
02988     04 2E 06 F1 | 	add	local09, #4
0298c     01 00 80 FF 
02990     17 07 68 FC | 	wrlong	##515, local09
02994     11 25 02 F6 | 	mov	local04, local03
02998     12 2F 02 F6 | 	mov	local09, local04
0299c     03 2E 66 F0 | 	shl	local09, #3
029a0     F2 2E 02 F1 | 	add	local09, objptr
029a4     11 37 02 F6 | 	mov	local13, local03
029a8     03 36 66 F0 | 	shl	local13, #3
029ac     F2 36 02 F1 | 	add	local13, objptr
029b0     1B 29 02 FB | 	rdlong	local06, local13
029b4     02 32 06 F6 | 	mov	local11, #2
029b8     11 4B 02 F6 | 	mov	local23, local03
029bc     25 43 02 F6 | 	mov	local19, local23
029c0     21 45 02 F6 | 	mov	local20, local19
029c4     03 44 66 F0 | 	shl	local20, #3
029c8     F2 46 02 F6 | 	mov	local21, objptr
029cc     F2 44 02 F1 | 	add	local20, objptr
029d0     22 13 02 FB | 	rdlong	arg01, local20
029d4     54 00 00 FF 
029d8     E0 E4 85 F1 | 	sub	objptr, ##43232
029dc     09 2B 02 F6 | 	mov	local07, arg01
029e0     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029e4                 | LR__0123
029e4     15 FB C9 FA | 	rdbyte	result1, local07 wz
029e8     01 2A 06 51 |  if_ne	add	local07, #1
029ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029f0                 | LR__0124
029f0     09 2B 82 F1 | 	sub	local07, arg01
029f4     15 35 02 F6 | 	mov	local12, local07
029f8     1A 17 02 F6 | 	mov	arg03, local12
029fc     02 16 86 F1 | 	sub	arg03, #2
02a00     14 13 02 F6 | 	mov	arg01, local06
02a04     19 15 02 F6 | 	mov	arg02, local11
02a08     00 85 B1 FD | 	call	#__system__Mid_S
02a0c     17 FB 61 FC | 	wrlong	result1, local09
02a10     5C 00 90 FD | 	jmp	#LR__0127
02a14                 | LR__0125
02a14                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a14     11 25 02 F6 | 	mov	local04, local03
02a18     12 27 02 F6 | 	mov	local05, local04
02a1c     03 26 66 F0 | 	shl	local05, #3
02a20     54 00 00 FF 
02a24     E0 E4 05 F1 | 	add	objptr, ##43232
02a28     F2 26 02 F1 | 	add	local05, objptr
02a2c     13 13 02 FB | 	rdlong	arg01, local05
02a30     54 00 00 FF 
02a34     E0 E4 85 F1 | 	sub	objptr, ##43232
02a38     94 19 B0 FD | 	call	#_isname
02a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02a40     2C 00 90 AD |  if_e	jmp	#LR__0126
02a44     11 25 02 F6 | 	mov	local04, local03
02a48     12 2F 02 F6 | 	mov	local09, local04
02a4c     03 2E 66 F0 | 	shl	local09, #3
02a50     54 00 00 FF 
02a54     E0 E4 05 F1 | 	add	objptr, ##43232
02a58     F2 2E 02 F1 | 	add	local09, objptr
02a5c     04 2E 06 F1 | 	add	local09, #4
02a60     01 00 80 FF 
02a64     17 09 68 FC | 	wrlong	##516, local09
02a68     54 00 00 FF 
02a6c     E0 E4 85 F1 | 	sub	objptr, ##43232
02a70                 | LR__0126
02a70                 | LR__0127
02a70     01 22 06 F1 | 	add	local03, #1
02a74     84 FA 9F FD | 	jmp	#LR__0119
02a78                 | LR__0128
02a78     1D 2F 02 F6 | 	mov	local09, local15
02a7c     03 2E 66 F0 | 	shl	local09, #3
02a80     54 00 00 FF 
02a84     E0 E4 05 F1 | 	add	objptr, ##43232
02a88     F2 2E 02 F1 | 	add	local09, objptr
02a8c     04 2E 06 F1 | 	add	local09, #4
02a90     17 FD 6B FC | 	wrlong	#510, local09
02a94     1D 2F 02 F6 | 	mov	local09, local15
02a98     03 2E 66 F0 | 	shl	local09, #3
02a9c     F2 26 02 F6 | 	mov	local05, objptr
02aa0     F2 2E 02 F1 | 	add	local09, objptr
02aa4     42 01 00 FF 
02aa8     15 28 06 F6 | 	mov	local06, ##@LR__4332
02aac     17 29 62 FC | 	wrlong	local06, local09
02ab0     10 00 00 FF 
02ab4     54 E4 05 F1 | 	add	objptr, ##8276
02ab8     F2 3A 62 FC | 	wrlong	local15, objptr
02abc                 | ' 
02abc                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02abc                 | ' 
02abc                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02abc                 | '  
02abc                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02abc     16 00 00 FF 
02ac0     84 E4 05 F1 | 	add	objptr, ##11396
02ac4     F2 12 02 FB | 	rdlong	arg01, objptr
02ac8     7A 00 00 FF 
02acc     B8 E5 85 F1 | 	sub	objptr, ##62904
02ad0     42 01 00 FF 
02ad4     16 2E 06 F6 | 	mov	local09, ##@LR__4333
02ad8     17 15 02 F6 | 	mov	arg02, local09
02adc     2C 63 B1 FD | 	call	#__system___string_cmp
02ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae4     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae8     7A 00 00 FF 
02aec     B8 E5 05 F1 | 	add	objptr, ##62904
02af0     F2 12 02 FB | 	rdlong	arg01, objptr
02af4     7A 00 00 FF 
02af8     B8 E5 85 F1 | 	sub	objptr, ##62904
02afc     42 01 00 FF 
02b00     1B 26 06 F6 | 	mov	local05, ##@LR__4334
02b04     13 2F 02 F6 | 	mov	local09, local05
02b08     17 15 02 F6 | 	mov	arg02, local09
02b0c     FC 62 B1 FD | 	call	#__system___string_cmp
02b10     00 FA 0D F2 | 	cmp	result1, #0 wz
02b14     BC 00 90 AD |  if_e	jmp	#LR__0129
02b18     7A 00 00 FF 
02b1c     B8 E5 05 F1 | 	add	objptr, ##62904
02b20     F2 12 02 FB | 	rdlong	arg01, objptr
02b24     7A 00 00 FF 
02b28     B8 E5 85 F1 | 	sub	objptr, ##62904
02b2c     42 01 00 FF 
02b30     20 28 06 F6 | 	mov	local06, ##@LR__4335
02b34     14 27 02 F6 | 	mov	local05, local06
02b38     13 15 02 F6 | 	mov	arg02, local05
02b3c     CC 62 B1 FD | 	call	#__system___string_cmp
02b40     FD 2E 0A F6 | 	mov	local09, result1 wz
02b44     8C 00 90 AD |  if_e	jmp	#LR__0129
02b48     7A 00 00 FF 
02b4c     B8 E5 05 F1 | 	add	objptr, ##62904
02b50     F2 12 02 FB | 	rdlong	arg01, objptr
02b54     7A 00 00 FF 
02b58     B8 E5 85 F1 | 	sub	objptr, ##62904
02b5c     42 01 00 FF 
02b60     25 32 06 F6 | 	mov	local11, ##@LR__4336
02b64     19 29 02 F6 | 	mov	local06, local11
02b68     14 15 02 F6 | 	mov	arg02, local06
02b6c     9C 62 B1 FD | 	call	#__system___string_cmp
02b70     FD 26 0A F6 | 	mov	local05, result1 wz
02b74     5C 00 90 AD |  if_e	jmp	#LR__0129
02b78     7A 00 00 FF 
02b7c     B8 E5 05 F1 | 	add	objptr, ##62904
02b80     F2 12 02 FB | 	rdlong	arg01, objptr
02b84     7A 00 00 FF 
02b88     B8 E5 85 F1 | 	sub	objptr, ##62904
02b8c     42 01 00 FF 
02b90     29 32 06 F6 | 	mov	local11, ##@LR__4337
02b94     19 15 02 F6 | 	mov	arg02, local11
02b98     70 62 B1 FD | 	call	#__system___string_cmp
02b9c     FD 28 0A F6 | 	mov	local06, result1 wz
02ba0     30 00 90 AD |  if_e	jmp	#LR__0129
02ba4     7A 00 00 FF 
02ba8     B8 E5 05 F1 | 	add	objptr, ##62904
02bac     F2 12 02 FB | 	rdlong	arg01, objptr
02bb0     7A 00 00 FF 
02bb4     B8 E5 85 F1 | 	sub	objptr, ##62904
02bb8     42 01 00 FF 
02bbc     2C 36 06 F6 | 	mov	local13, ##@LR__4338
02bc0     1B 31 02 F6 | 	mov	local10, local13
02bc4     18 15 02 F6 | 	mov	arg02, local10
02bc8     40 62 B1 FD | 	call	#__system___string_cmp
02bcc     FD 32 0A F6 | 	mov	local11, result1 wz
02bd0     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bd4                 | LR__0129
02bd4     7A 00 00 FF 
02bd8     B4 E5 05 F1 | 	add	objptr, ##62900
02bdc     F2 36 02 FB | 	rdlong	local13, objptr
02be0     1B 31 02 F6 | 	mov	local10, local13
02be4     01 30 06 F1 | 	add	local10, #1
02be8     18 35 02 F6 | 	mov	local12, local10
02bec     1A 4B 02 F6 | 	mov	local23, local12
02bf0     03 4A 66 F0 | 	shl	local23, #3
02bf4     26 00 00 FF 
02bf8     D4 E4 85 F1 | 	sub	objptr, ##19668
02bfc     F2 42 02 F6 | 	mov	local19, objptr
02c00     F2 4A 02 F1 | 	add	local23, objptr
02c04     04 4A 06 F1 | 	add	local23, #4
02c08     25 47 02 FB | 	rdlong	local21, local23
02c0c     04 4A 86 F1 | 	sub	local23, #4
02c10     23 45 02 F6 | 	mov	local20, local21
02c14     01 00 00 FF 
02c18     04 44 0E F2 | 	cmp	local20, ##516 wz
02c1c     54 00 00 FF 
02c20     E0 E4 85 F1 | 	sub	objptr, ##43232
02c24     48 00 90 5D |  if_ne	jmp	#LR__0130
02c28     7A 00 00 FF 
02c2c     B4 E5 05 F1 | 	add	objptr, ##62900
02c30     F2 2E 02 FB | 	rdlong	local09, objptr
02c34     01 2E 06 F1 | 	add	local09, #1
02c38     17 27 02 F6 | 	mov	local05, local09
02c3c     03 26 66 F0 | 	shl	local05, #3
02c40     26 00 00 FF 
02c44     D4 E4 85 F1 | 	sub	objptr, ##19668
02c48     F2 28 02 F6 | 	mov	local06, objptr
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     01 00 00 FF 
02c54     03 32 06 F6 | 	mov	local11, ##515
02c58     04 26 06 F1 | 	add	local05, #4
02c5c     01 00 80 FF 
02c60     13 07 68 FC | 	wrlong	##515, local05
02c64     04 26 86 F1 | 	sub	local05, #4
02c68     54 00 00 FF 
02c6c     E0 E4 85 F1 | 	sub	objptr, ##43232
02c70                 | LR__0130
02c70                 | ' 
02c70                 | ' ' abbreviated command has to be at the position addptr
02c70                 | ' 
02c70                 | ' 
02c70                 | ' 
02c70                 | ' '2b determine a type of the line
02c70                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c70     54 00 00 FF 
02c74     E0 E4 05 F1 | 	add	objptr, ##43232
02c78     F2 12 02 FB | 	rdlong	arg01, objptr
02c7c     54 00 00 FF 
02c80     E0 E4 85 F1 | 	sub	objptr, ##43232
02c84     EC 1D B0 FD | 	call	#_isdec
02c88     00 FA 0D F2 | 	cmp	result1, #0 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0131
02c90     54 00 00 FF 
02c94     E0 E4 05 F1 | 	add	objptr, ##43232
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     54 00 00 FF 
02ca0     E0 E4 85 F1 | 	sub	objptr, ##43232
02ca4     00 14 06 F6 | 	mov	arg02, #0
02ca8     9C 92 B1 FD | 	call	#__system____builtin_atoi
02cac     7A 00 00 FF 
02cb0     64 E5 05 F1 | 	add	objptr, ##62820
02cb4     F2 FA 61 FC | 	wrlong	result1, objptr
02cb8     7A 00 00 FF 
02cbc     64 E5 85 F1 | 	sub	objptr, ##62820
02cc0                 | LR__0131
02cc0                 | ' 
02cc0                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02cc0     7A 00 00 FF 
02cc4     64 E5 05 F1 | 	add	objptr, ##62820
02cc8     F2 1E 02 FB | 	rdlong	local01, objptr
02ccc     7A 00 00 FF 
02cd0     64 E5 85 F1 | 	sub	objptr, ##62820
02cd4     01 1E 16 F2 | 	cmp	local01, #1 wc
02cd8     3C 00 90 CD |  if_b	jmp	#LR__0132
02cdc     01 3A 0E F2 | 	cmp	local15, #1 wz
02ce0     56 00 00 AF 
02ce4     F8 E4 05 A1 |  if_e	add	objptr, ##44280
02ce8     F2 26 02 AB |  if_e	rdlong	local05, objptr
02cec     56 00 00 AF 
02cf0     F8 E4 85 A1 |  if_e	sub	objptr, ##44280
02cf4     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02cf8     1C 00 90 5D |  if_ne	jmp	#LR__0132
02cfc     7A 00 00 FF 
02d00     64 E5 05 F1 | 	add	objptr, ##62820
02d04     F2 12 02 FB | 	rdlong	arg01, objptr
02d08     7A 00 00 FF 
02d0c     64 E5 85 F1 | 	sub	objptr, ##62820
02d10     84 1E B0 FD | 	call	#_deleteline
02d14     4C 05 90 FD | 	jmp	#LR__0149
02d18                 | LR__0132
02d18                 | ' 
02d18                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02d18     7A 00 00 FF 
02d1c     64 E5 05 F1 | 	add	objptr, ##62820
02d20     F2 1E 02 FB | 	rdlong	local01, objptr
02d24     7A 00 00 FF 
02d28     64 E5 85 F1 | 	sub	objptr, ##62820
02d2c     01 1E 16 F2 | 	cmp	local01, #1 wc
02d30     EC 00 90 CD |  if_b	jmp	#LR__0135
02d34     56 00 00 FF 
02d38     F8 E4 05 F1 | 	add	objptr, ##44280
02d3c     F2 26 02 FB | 	rdlong	local05, objptr
02d40     56 00 00 FF 
02d44     F8 E4 85 F1 | 	sub	objptr, ##44280
02d48     13 2F 0A F6 | 	mov	local09, local05 wz
02d4c     20 00 90 AD |  if_e	jmp	#LR__0133
02d50     56 00 00 FF 
02d54     F8 E4 05 F1 | 	add	objptr, ##44280
02d58     F2 32 02 FB | 	rdlong	local11, objptr
02d5c     56 00 00 FF 
02d60     F8 E4 85 F1 | 	sub	objptr, ##44280
02d64     19 29 02 F6 | 	mov	local06, local11
02d68     03 28 0E F2 | 	cmp	local06, #3 wz
02d6c     B0 00 90 5D |  if_ne	jmp	#LR__0135
02d70                 | LR__0133
02d70     54 00 00 FF 
02d74     F4 E4 05 F1 | 	add	objptr, ##43252
02d78     F2 36 02 FB | 	rdlong	local13, objptr
02d7c     54 00 00 FF 
02d80     F4 E4 85 F1 | 	sub	objptr, ##43252
02d84     1B 31 02 F6 | 	mov	local10, local13
02d88     1B 30 0E F2 | 	cmp	local10, #27 wz
02d8c     90 00 90 AD |  if_e	jmp	#LR__0135
02d90     7A 00 00 FF 
02d94     64 E5 05 F1 | 	add	objptr, ##62820
02d98     F2 12 02 FB | 	rdlong	arg01, objptr
02d9c     24 00 00 FF 
02da0     6C E4 85 F1 | 	sub	objptr, ##18540
02da4     F2 16 02 FB | 	rdlong	arg03, objptr
02da8     56 00 00 FF 
02dac     F8 E4 85 F1 | 	sub	objptr, ##44280
02db0     00 14 06 F6 | 	mov	arg02, #0
02db4     34 31 B0 FD | 	call	#_compile
02db8     FD 20 0A F6 | 	mov	local02, result1 wz
02dbc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02dbc                 | '   if err<>0 then printerror(err): goto 104
02dbc     0C 00 90 AD |  if_e	jmp	#LR__0134
02dc0     10 13 02 F6 | 	mov	arg01, local02
02dc4     98 2A B1 FD | 	call	#_printerror
02dc8     98 04 90 FD | 	jmp	#LR__0149
02dcc                 | LR__0134
02dcc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02dcc     7A 00 00 FF 
02dd0     90 E5 05 F1 | 	add	objptr, ##62864
02dd4     F2 12 02 FB | 	rdlong	arg01, objptr
02dd8     7A 00 00 FF 
02ddc     90 E5 85 F1 | 	sub	objptr, ##62864
02de0     42 01 00 FF 
02de4     30 14 06 F6 | 	mov	arg02, ##@LR__4339
02de8     20 60 B1 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     70 04 90 AD |  if_e	jmp	#LR__0149
02df4     7A 00 00 FF 
02df8     90 E5 05 F1 | 	add	objptr, ##62864
02dfc     F2 1E 02 FB | 	rdlong	local01, objptr
02e00     24 00 00 FF 
02e04     A0 E4 85 F1 | 	sub	objptr, ##18592
02e08     F2 1E 62 FC | 	wrlong	local01, objptr
02e0c     08 E4 05 F1 | 	add	objptr, #8
02e10     F2 08 68 FC | 	wrlong	#4, objptr
02e14     56 00 00 FF 
02e18     F8 E4 85 F1 | 	sub	objptr, ##44280
02e1c     50 DC 9F FD | 	jmp	#LR__0020
02e20                 | LR__0135
02e20                 | '       							
02e20                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02e20     7A 00 00 FF 
02e24     64 E5 05 F1 | 	add	objptr, ##62820
02e28     F2 1E 02 FB | 	rdlong	local01, objptr
02e2c     7A 00 00 FF 
02e30     64 E5 85 F1 | 	sub	objptr, ##62820
02e34     01 1E 16 F2 | 	cmp	local01, #1 wc
02e38     EC 00 90 CD |  if_b	jmp	#LR__0138
02e3c     56 00 00 FF 
02e40     F8 E4 05 F1 | 	add	objptr, ##44280
02e44     F2 26 02 FB | 	rdlong	local05, objptr
02e48     56 00 00 FF 
02e4c     F8 E4 85 F1 | 	sub	objptr, ##44280
02e50     01 26 0E F2 | 	cmp	local05, #1 wz
02e54     20 00 90 AD |  if_e	jmp	#LR__0136
02e58     56 00 00 FF 
02e5c     F8 E4 05 F1 | 	add	objptr, ##44280
02e60     F2 32 02 FB | 	rdlong	local11, objptr
02e64     56 00 00 FF 
02e68     F8 E4 85 F1 | 	sub	objptr, ##44280
02e6c     19 29 02 F6 | 	mov	local06, local11
02e70     02 28 0E F2 | 	cmp	local06, #2 wz
02e74     B0 00 90 5D |  if_ne	jmp	#LR__0138
02e78                 | LR__0136
02e78     54 00 00 FF 
02e7c     EC E4 05 F1 | 	add	objptr, ##43244
02e80     F2 36 02 FB | 	rdlong	local13, objptr
02e84     54 00 00 FF 
02e88     EC E4 85 F1 | 	sub	objptr, ##43244
02e8c     1B 31 02 F6 | 	mov	local10, local13
02e90     1B 30 0E F2 | 	cmp	local10, #27 wz
02e94     90 00 90 AD |  if_e	jmp	#LR__0138
02e98     7A 00 00 FF 
02e9c     64 E5 05 F1 | 	add	objptr, ##62820
02ea0     F2 12 02 FB | 	rdlong	arg01, objptr
02ea4     24 00 00 FF 
02ea8     6C E4 85 F1 | 	sub	objptr, ##18540
02eac     F2 16 02 FB | 	rdlong	arg03, objptr
02eb0     56 00 00 FF 
02eb4     F8 E4 85 F1 | 	sub	objptr, ##44280
02eb8     00 14 06 F6 | 	mov	arg02, #0
02ebc     2C 30 B0 FD | 	call	#_compile
02ec0     FD 20 0A F6 | 	mov	local02, result1 wz
02ec4                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ec4                 | '   if err<>0 then printerror(err): goto 104
02ec4     0C 00 90 AD |  if_e	jmp	#LR__0137
02ec8     10 13 02 F6 | 	mov	arg01, local02
02ecc     90 29 B1 FD | 	call	#_printerror
02ed0     90 03 90 FD | 	jmp	#LR__0149
02ed4                 | LR__0137
02ed4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02ed4     7A 00 00 FF 
02ed8     90 E5 05 F1 | 	add	objptr, ##62864
02edc     F2 12 02 FB | 	rdlong	arg01, objptr
02ee0     7A 00 00 FF 
02ee4     90 E5 85 F1 | 	sub	objptr, ##62864
02ee8     42 01 00 FF 
02eec     31 14 06 F6 | 	mov	arg02, ##@LR__4340
02ef0     18 5F B1 FD | 	call	#__system___string_cmp
02ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef8     68 03 90 AD |  if_e	jmp	#LR__0149
02efc     7A 00 00 FF 
02f00     90 E5 05 F1 | 	add	objptr, ##62864
02f04     F2 1E 02 FB | 	rdlong	local01, objptr
02f08     24 00 00 FF 
02f0c     A0 E4 85 F1 | 	sub	objptr, ##18592
02f10     F2 1E 62 FC | 	wrlong	local01, objptr
02f14     08 E4 05 F1 | 	add	objptr, #8
02f18     F2 08 68 FC | 	wrlong	#4, objptr
02f1c     56 00 00 FF 
02f20     F8 E4 85 F1 | 	sub	objptr, ##44280
02f24     48 DB 9F FD | 	jmp	#LR__0020
02f28                 | LR__0138
02f28                 | ' 							 
02f28                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02f28     7A 00 00 FF 
02f2c     64 E5 05 F1 | 	add	objptr, ##62820
02f30     F2 1E 02 FB | 	rdlong	local01, objptr
02f34     7A 00 00 FF 
02f38     64 E5 85 F1 | 	sub	objptr, ##62820
02f3c     01 1E 16 F2 | 	cmp	local01, #1 wc
02f40     D4 00 90 CD |  if_b	jmp	#LR__0140
02f44     56 00 00 FF 
02f48     F8 E4 05 F1 | 	add	objptr, ##44280
02f4c     F2 26 0A FB | 	rdlong	local05, objptr wz
02f50     56 00 00 FF 
02f54     F8 E4 85 F1 | 	sub	objptr, ##44280
02f58     20 00 90 AD |  if_e	jmp	#LR__0139
02f5c     56 00 00 FF 
02f60     F8 E4 05 F1 | 	add	objptr, ##44280
02f64     F2 32 02 FB | 	rdlong	local11, objptr
02f68     56 00 00 FF 
02f6c     F8 E4 85 F1 | 	sub	objptr, ##44280
02f70     19 29 02 F6 | 	mov	local06, local11
02f74     03 28 0E F2 | 	cmp	local06, #3 wz
02f78     9C 00 90 5D |  if_ne	jmp	#LR__0140
02f7c                 | LR__0139
02f7c     54 00 00 FF 
02f80     F4 E4 05 F1 | 	add	objptr, ##43252
02f84     F2 36 02 FB | 	rdlong	local13, objptr
02f88     54 00 00 FF 
02f8c     F4 E4 85 F1 | 	sub	objptr, ##43252
02f90     1B 31 02 F6 | 	mov	local10, local13
02f94     1B 30 0E F2 | 	cmp	local10, #27 wz
02f98     7C 00 90 5D |  if_ne	jmp	#LR__0140
02f9c     7A 00 00 FF 
02fa0     64 E5 05 F1 | 	add	objptr, ##62820
02fa4     F2 12 02 FB | 	rdlong	arg01, objptr
02fa8     24 00 00 FF 
02fac     6C E4 85 F1 | 	sub	objptr, ##18540
02fb0     F2 16 02 FB | 	rdlong	arg03, objptr
02fb4     56 00 00 FF 
02fb8     F8 E4 85 F1 | 	sub	objptr, ##44280
02fbc     00 14 06 F6 | 	mov	arg02, #0
02fc0     F8 2F B0 FD | 	call	#_compile_assign
02fc4                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02fc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02fc4     7A 00 00 FF 
02fc8     90 E5 05 F1 | 	add	objptr, ##62864
02fcc     F2 12 02 FB | 	rdlong	arg01, objptr
02fd0     7A 00 00 FF 
02fd4     90 E5 85 F1 | 	sub	objptr, ##62864
02fd8     42 01 00 FF 
02fdc     32 14 06 F6 | 	mov	arg02, ##@LR__4341
02fe0     28 5E B1 FD | 	call	#__system___string_cmp
02fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe8     78 02 90 AD |  if_e	jmp	#LR__0149
02fec     7A 00 00 FF 
02ff0     90 E5 05 F1 | 	add	objptr, ##62864
02ff4     F2 1E 02 FB | 	rdlong	local01, objptr
02ff8     24 00 00 FF 
02ffc     A0 E4 85 F1 | 	sub	objptr, ##18592
03000     F2 1E 62 FC | 	wrlong	local01, objptr
03004     08 E4 05 F1 | 	add	objptr, #8
03008     F2 08 68 FC | 	wrlong	#4, objptr
0300c     56 00 00 FF 
03010     F8 E4 85 F1 | 	sub	objptr, ##44280
03014     58 DA 9F FD | 	jmp	#LR__0020
03018                 | LR__0140
03018                 | '     							 
03018                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03018     7A 00 00 FF 
0301c     64 E5 05 F1 | 	add	objptr, ##62820
03020     F2 1E 02 FB | 	rdlong	local01, objptr
03024     7A 00 00 FF 
03028     64 E5 85 F1 | 	sub	objptr, ##62820
0302c     01 1E 16 F2 | 	cmp	local01, #1 wc
03030     CC 00 90 CD |  if_b	jmp	#LR__0141
03034     56 00 00 FF 
03038     F8 E4 05 F1 | 	add	objptr, ##44280
0303c     F2 26 02 FB | 	rdlong	local05, objptr
03040     56 00 00 FF 
03044     F8 E4 85 F1 | 	sub	objptr, ##44280
03048     01 26 0E F2 | 	cmp	local05, #1 wz
0304c     56 00 00 5F 
03050     F8 E4 05 51 |  if_ne	add	objptr, ##44280
03054     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03058     56 00 00 5F 
0305c     F8 E4 85 51 |  if_ne	sub	objptr, ##44280
03060     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03064     54 00 00 AF 
03068     EC E4 05 A1 |  if_e	add	objptr, ##43244
0306c     F2 36 02 AB |  if_e	rdlong	local13, objptr
03070     54 00 00 AF 
03074     EC E4 85 A1 |  if_e	sub	objptr, ##43244
03078     1B 31 02 A6 |  if_e	mov	local10, local13
0307c     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03080     7C 00 90 5D |  if_ne	jmp	#LR__0141
03084     7A 00 00 FF 
03088     64 E5 05 F1 | 	add	objptr, ##62820
0308c     F2 12 02 FB | 	rdlong	arg01, objptr
03090     24 00 00 FF 
03094     6C E4 85 F1 | 	sub	objptr, ##18540
03098     F2 16 02 FB | 	rdlong	arg03, objptr
0309c     56 00 00 FF 
030a0     F8 E4 85 F1 | 	sub	objptr, ##44280
030a4     00 14 06 F6 | 	mov	arg02, #0
030a8     10 2F B0 FD | 	call	#_compile_assign
030ac                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
030ac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
030ac     7A 00 00 FF 
030b0     90 E5 05 F1 | 	add	objptr, ##62864
030b4     F2 12 02 FB | 	rdlong	arg01, objptr
030b8     7A 00 00 FF 
030bc     90 E5 85 F1 | 	sub	objptr, ##62864
030c0     42 01 00 FF 
030c4     33 14 06 F6 | 	mov	arg02, ##@LR__4342
030c8     40 5D B1 FD | 	call	#__system___string_cmp
030cc     00 FA 0D F2 | 	cmp	result1, #0 wz
030d0     90 01 90 AD |  if_e	jmp	#LR__0149
030d4     7A 00 00 FF 
030d8     90 E5 05 F1 | 	add	objptr, ##62864
030dc     F2 1E 02 FB | 	rdlong	local01, objptr
030e0     24 00 00 FF 
030e4     A0 E4 85 F1 | 	sub	objptr, ##18592
030e8     F2 1E 62 FC | 	wrlong	local01, objptr
030ec     08 E4 05 F1 | 	add	objptr, #8
030f0     F2 08 68 FC | 	wrlong	#4, objptr
030f4     56 00 00 FF 
030f8     F8 E4 85 F1 | 	sub	objptr, ##44280
030fc     70 D9 9F FD | 	jmp	#LR__0020
03100                 | LR__0141
03100                 | ' 
03100                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03100     54 00 00 FF 
03104     E4 E4 05 F1 | 	add	objptr, ##43236
03108     F2 1E 02 FB | 	rdlong	local01, objptr
0310c     54 00 00 FF 
03110     E4 E4 85 F1 | 	sub	objptr, ##43236
03114     01 00 00 FF 
03118     04 1E 0E F2 | 	cmp	local01, ##516 wz
0311c     54 00 00 AF 
03120     EC E4 05 A1 |  if_e	add	objptr, ##43244
03124     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03128     54 00 00 AF 
0312c     EC E4 85 A1 |  if_e	sub	objptr, ##43244
03130     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03134     14 00 90 5D |  if_ne	jmp	#LR__0142
03138     00 12 06 F6 | 	mov	arg01, #0
0313c     00 14 06 F6 | 	mov	arg02, #0
03140     00 16 06 F6 | 	mov	arg03, #0
03144     74 2E B0 FD | 	call	#_compile_assign
03148     90 00 90 FD | 	jmp	#LR__0144
0314c                 | LR__0142
0314c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0314c     54 00 00 FF 
03150     E4 E4 05 F1 | 	add	objptr, ##43236
03154     F2 1E 02 FB | 	rdlong	local01, objptr
03158     54 00 00 FF 
0315c     E4 E4 85 F1 | 	sub	objptr, ##43236
03160     01 00 00 FF 
03164     04 1E 0E F2 | 	cmp	local01, ##516 wz
03168     54 00 00 AF 
0316c     EC E4 05 A1 |  if_e	add	objptr, ##43244
03170     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03174     54 00 00 AF 
03178     EC E4 85 A1 |  if_e	sub	objptr, ##43244
0317c     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
03180     44 00 90 5D |  if_ne	jmp	#LR__0143
03184     00 12 06 F6 | 	mov	arg01, #0
03188     5C B5 B1 FD | 	call	#__system___getiolock_0423
0318c     FD 12 02 F6 | 	mov	arg01, result1
03190     50 5C B1 FD | 	call	#__system___lockmem
03194     42 01 00 FF 
03198     34 14 06 F6 | 	mov	arg02, ##@LR__4343
0319c     00 12 06 F6 | 	mov	arg01, #0
031a0     00 16 06 F6 | 	mov	arg03, #0
031a4     30 69 B1 FD | 	call	#__system___basic_print_string
031a8     00 12 06 F6 | 	mov	arg01, #0
031ac     0A 14 06 F6 | 	mov	arg02, #10
031b0     00 16 06 F6 | 	mov	arg03, #0
031b4     C8 68 B1 FD | 	call	#__system___basic_print_char
031b8     00 12 06 F6 | 	mov	arg01, #0
031bc     28 B5 B1 FD | 	call	#__system___getiolock_0423
031c0     FD 00 68 FC | 	wrlong	#0, result1
031c4     7C 00 90 FD | 	jmp	#LR__0148
031c8                 | LR__0143
031c8     00 12 06 F6 | 	mov	arg01, #0
031cc     00 14 06 F6 | 	mov	arg02, #0
031d0     00 16 06 F6 | 	mov	arg03, #0
031d4     14 2D B0 FD | 	call	#_compile
031d8     FD 20 02 F6 | 	mov	local02, result1
031dc                 | LR__0144
031dc                 | ' 
031dc                 | ' ' if we are here, this is not a program line to add, so try to execute this
031dc                 | ' 
031dc                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
031dc                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
031dc                 | ' if err=0 then execute_line() else printerror(err)
031dc     00 20 0E F2 | 	cmp	local02, #0 wz
031e0     0C 00 90 5D |  if_ne	jmp	#LR__0145
031e4     00 12 06 F6 | 	mov	arg01, #0
031e8     00 66 B0 FD | 	call	#_execute_line
031ec     08 00 90 FD | 	jmp	#LR__0146
031f0                 | LR__0145
031f0     10 13 02 F6 | 	mov	arg01, local02
031f4     68 26 B1 FD | 	call	#_printerror
031f8                 | LR__0146
031f8                 | ' if rest$<>"" then line$=rest$:  goto 108 
031f8     7A 00 00 FF 
031fc     90 E5 05 F1 | 	add	objptr, ##62864
03200     F2 12 02 FB | 	rdlong	arg01, objptr
03204     7A 00 00 FF 
03208     90 E5 85 F1 | 	sub	objptr, ##62864
0320c     42 01 00 FF 
03210     63 14 06 F6 | 	mov	arg02, ##@LR__4344
03214     F4 5B B1 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     24 00 90 AD |  if_e	jmp	#LR__0147
03220     7A 00 00 FF 
03224     90 E5 05 F1 | 	add	objptr, ##62864
03228     F2 1E 02 FB | 	rdlong	local01, objptr
0322c     24 00 00 FF 
03230     A0 E4 85 F1 | 	sub	objptr, ##18592
03234     F2 1E 62 FC | 	wrlong	local01, objptr
03238     56 00 00 FF 
0323c     F0 E4 85 F1 | 	sub	objptr, ##44272
03240     2C D8 9F FD | 	jmp	#LR__0020
03244                 | LR__0147
03244                 | LR__0148
03244     42 01 00 FF 
03248     64 12 06 F6 | 	mov	arg01, ##@LR__4345
0324c                 | ' 
0324c                 | ' write(text)
0324c     0C 4B B1 FD | 	call	#_hg010b_spin2_write
03250                 | ' crlf
03250     68 4C B1 FD | 	call	#_hg010b_spin2_crlf
03254     42 01 00 FF 
03258     65 12 06 F6 | 	mov	arg01, ##@LR__4346
0325c                 | ' 
0325c                 | ' write(text)
0325c     FC 4A B1 FD | 	call	#_hg010b_spin2_write
03260                 | ' crlf
03260     58 4C B1 FD | 	call	#_hg010b_spin2_crlf
03264                 | LR__0149
03264     A7 F0 03 F6 | 	mov	ptra, fp
03268     B2 00 A0 FD | 	call	#popregs_
0326c                 | _interpret_ret
0326c     2D 00 64 FD | 	ret
03270                 | 
03270                 | ' 
03270                 | ' 
03270                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
03270                 | ' 
03270                 | ' function isoperator(s as string) as ubyte
03270                 | _isoperator
03270     01 4A 05 F6 | 	mov	COUNT_, #1
03274     A8 00 A0 FD | 	call	#pushregs_
03278                 | ' 
03278                 | ' select case s
03278     09 1F 02 F6 | 	mov	local01, arg01
0327c     42 01 00 FF 
03280     6B 14 06 F6 | 	mov	arg02, ##@LR__4347
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     80 5B B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     FC 01 90 AD |  if_e	jmp	#LR__0150
03294     42 01 00 FF 
03298     6D 14 06 F6 | 	mov	arg02, ##@LR__4348
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     68 5B B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     EC 01 90 AD |  if_e	jmp	#LR__0151
032ac     42 01 00 FF 
032b0     6F 14 06 F6 | 	mov	arg02, ##@LR__4349
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     50 5B B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     DC 01 90 AD |  if_e	jmp	#LR__0152
032c4     42 01 00 FF 
032c8     72 14 06 F6 | 	mov	arg02, ##@LR__4350
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     38 5B B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     CC 01 90 AD |  if_e	jmp	#LR__0153
032dc     42 01 00 FF 
032e0     76 14 06 F6 | 	mov	arg02, ##@LR__4351
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     20 5B B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     BC 01 90 AD |  if_e	jmp	#LR__0154
032f4     42 01 00 FF 
032f8     78 14 06 F6 | 	mov	arg02, ##@LR__4352
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     08 5B B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     AC 01 90 AD |  if_e	jmp	#LR__0155
0330c     42 01 00 FF 
03310     7A 14 06 F6 | 	mov	arg02, ##@LR__4353
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     F0 5A B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     9C 01 90 AD |  if_e	jmp	#LR__0156
03324     42 01 00 FF 
03328     7E 14 06 F6 | 	mov	arg02, ##@LR__4354
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     D8 5A B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     8C 01 90 AD |  if_e	jmp	#LR__0157
0333c     42 01 00 FF 
03340     82 14 06 F6 | 	mov	arg02, ##@LR__4355
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     C0 5A B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     7C 01 90 AD |  if_e	jmp	#LR__0158
03354     42 01 00 FF 
03358     86 14 06 F6 | 	mov	arg02, ##@LR__4356
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     A8 5A B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     6C 01 90 AD |  if_e	jmp	#LR__0159
0336c     42 01 00 FF 
03370     8A 14 06 F6 | 	mov	arg02, ##@LR__4357
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     90 5A B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     5C 01 90 AD |  if_e	jmp	#LR__0160
03384     42 01 00 FF 
03388     8E 14 06 F6 | 	mov	arg02, ##@LR__4358
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     78 5A B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     4C 01 90 AD |  if_e	jmp	#LR__0161
0339c     42 01 00 FF 
033a0     90 14 06 F6 | 	mov	arg02, ##@LR__4359
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     60 5A B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     3C 01 90 AD |  if_e	jmp	#LR__0162
033b4     42 01 00 FF 
033b8     94 14 06 F6 | 	mov	arg02, ##@LR__4360
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     48 5A B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     2C 01 90 AD |  if_e	jmp	#LR__0163
033cc     42 01 00 FF 
033d0     96 14 06 F6 | 	mov	arg02, ##@LR__4361
033d4     0F 13 02 F6 | 	mov	arg01, local01
033d8     30 5A B1 FD | 	call	#__system___string_cmp
033dc     00 FA 0D F2 | 	cmp	result1, #0 wz
033e0     1C 01 90 AD |  if_e	jmp	#LR__0164
033e4     42 01 00 FF 
033e8     98 14 06 F6 | 	mov	arg02, ##@LR__4362
033ec     0F 13 02 F6 | 	mov	arg01, local01
033f0     18 5A B1 FD | 	call	#__system___string_cmp
033f4     00 FA 0D F2 | 	cmp	result1, #0 wz
033f8     0C 01 90 AD |  if_e	jmp	#LR__0165
033fc     42 01 00 FF 
03400     9B 14 06 F6 | 	mov	arg02, ##@LR__4363
03404     0F 13 02 F6 | 	mov	arg01, local01
03408     00 5A B1 FD | 	call	#__system___string_cmp
0340c     00 FA 0D F2 | 	cmp	result1, #0 wz
03410     FC 00 90 AD |  if_e	jmp	#LR__0166
03414     42 01 00 FF 
03418     9E 14 06 F6 | 	mov	arg02, ##@LR__4364
0341c     0F 13 02 F6 | 	mov	arg01, local01
03420     E8 59 B1 FD | 	call	#__system___string_cmp
03424     00 FA 0D F2 | 	cmp	result1, #0 wz
03428     EC 00 90 AD |  if_e	jmp	#LR__0167
0342c     42 01 00 FF 
03430     A0 14 06 F6 | 	mov	arg02, ##@LR__4365
03434     0F 13 02 F6 | 	mov	arg01, local01
03438     D0 59 B1 FD | 	call	#__system___string_cmp
0343c     00 FA 0D F2 | 	cmp	result1, #0 wz
03440     DC 00 90 AD |  if_e	jmp	#LR__0168
03444     42 01 00 FF 
03448     A2 14 06 F6 | 	mov	arg02, ##@LR__4366
0344c     0F 13 02 F6 | 	mov	arg01, local01
03450     B8 59 B1 FD | 	call	#__system___string_cmp
03454     00 FA 0D F2 | 	cmp	result1, #0 wz
03458     CC 00 90 AD |  if_e	jmp	#LR__0169
0345c     42 01 00 FF 
03460     A5 14 06 F6 | 	mov	arg02, ##@LR__4367
03464     0F 13 02 F6 | 	mov	arg01, local01
03468     A0 59 B1 FD | 	call	#__system___string_cmp
0346c     00 FA 0D F2 | 	cmp	result1, #0 wz
03470     BC 00 90 AD |  if_e	jmp	#LR__0170
03474     42 01 00 FF 
03478     A8 14 06 F6 | 	mov	arg02, ##@LR__4368
0347c     0F 13 02 F6 | 	mov	arg01, local01
03480     88 59 B1 FD | 	call	#__system___string_cmp
03484     00 FA 0D F2 | 	cmp	result1, #0 wz
03488     AC 00 90 AD |  if_e	jmp	#LR__0171
0348c     B0 00 90 FD | 	jmp	#LR__0172
03490                 | LR__0150
03490     01 FA 05 F6 | 	mov	result1, #1
03494     AC 00 90 FD | 	jmp	#LR__0173
03498                 | LR__0151
03498     02 FA 05 F6 | 	mov	result1, #2
0349c     A4 00 90 FD | 	jmp	#LR__0173
034a0                 | LR__0152
034a0     03 FA 05 F6 | 	mov	result1, #3
034a4     9C 00 90 FD | 	jmp	#LR__0173
034a8                 | LR__0153
034a8     04 FA 05 F6 | 	mov	result1, #4
034ac     94 00 90 FD | 	jmp	#LR__0173
034b0                 | LR__0154
034b0     05 FA 05 F6 | 	mov	result1, #5
034b4     8C 00 90 FD | 	jmp	#LR__0173
034b8                 | LR__0155
034b8     06 FA 05 F6 | 	mov	result1, #6
034bc     84 00 90 FD | 	jmp	#LR__0173
034c0                 | LR__0156
034c0     07 FA 05 F6 | 	mov	result1, #7
034c4     7C 00 90 FD | 	jmp	#LR__0173
034c8                 | LR__0157
034c8     08 FA 05 F6 | 	mov	result1, #8
034cc     74 00 90 FD | 	jmp	#LR__0173
034d0                 | LR__0158
034d0     09 FA 05 F6 | 	mov	result1, #9
034d4     6C 00 90 FD | 	jmp	#LR__0173
034d8                 | LR__0159
034d8     0A FA 05 F6 | 	mov	result1, #10
034dc     64 00 90 FD | 	jmp	#LR__0173
034e0                 | LR__0160
034e0     0B FA 05 F6 | 	mov	result1, #11
034e4     5C 00 90 FD | 	jmp	#LR__0173
034e8                 | LR__0161
034e8     0C FA 05 F6 | 	mov	result1, #12
034ec     54 00 90 FD | 	jmp	#LR__0173
034f0                 | LR__0162
034f0     0D FA 05 F6 | 	mov	result1, #13
034f4     4C 00 90 FD | 	jmp	#LR__0173
034f8                 | LR__0163
034f8     0E FA 05 F6 | 	mov	result1, #14
034fc     44 00 90 FD | 	jmp	#LR__0173
03500                 | LR__0164
03500     1B FA 05 F6 | 	mov	result1, #27
03504     3C 00 90 FD | 	jmp	#LR__0173
03508                 | LR__0165
03508     27 FA 05 F6 | 	mov	result1, #39
0350c     34 00 90 FD | 	jmp	#LR__0173
03510                 | LR__0166
03510     26 FA 05 F6 | 	mov	result1, #38
03514     2C 00 90 FD | 	jmp	#LR__0173
03518                 | LR__0167
03518     10 FA 05 F6 | 	mov	result1, #16
0351c     24 00 90 FD | 	jmp	#LR__0173
03520                 | LR__0168
03520     0F FA 05 F6 | 	mov	result1, #15
03524     1C 00 90 FD | 	jmp	#LR__0173
03528                 | LR__0169
03528     2A FA 05 F6 | 	mov	result1, #42
0352c     14 00 90 FD | 	jmp	#LR__0173
03530                 | LR__0170
03530     28 FA 05 F6 | 	mov	result1, #40
03534     0C 00 90 FD | 	jmp	#LR__0173
03538                 | LR__0171
03538     29 FA 05 F6 | 	mov	result1, #41
0353c     04 00 90 FD | 	jmp	#LR__0173
03540                 | LR__0172
03540     00 FA 05 F6 | 	mov	result1, #0
03544                 | LR__0173
03544     A7 F0 03 F6 | 	mov	ptra, fp
03548     B2 00 A0 FD | 	call	#popregs_
0354c                 | _isoperator_ret
0354c     2D 00 64 FD | 	ret
03550                 | 
03550                 | ' 
03550                 | ' function isseparator(s as string) as ubyte
03550                 | _isseparator
03550     01 4A 05 F6 | 	mov	COUNT_, #1
03554     A8 00 A0 FD | 	call	#pushregs_
03558                 | ' 
03558                 | ' select case s
03558     09 1F 02 F6 | 	mov	local01, arg01
0355c     42 01 00 FF 
03560     AB 14 06 F6 | 	mov	arg02, ##@LR__4369
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     A0 58 B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     54 01 90 AD |  if_e	jmp	#LR__0180
03574     42 01 00 FF 
03578     AD 14 06 F6 | 	mov	arg02, ##@LR__4370
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     88 58 B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     44 01 90 AD |  if_e	jmp	#LR__0181
0358c     42 01 00 FF 
03590     AF 14 06 F6 | 	mov	arg02, ##@LR__4371
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     70 58 B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     34 01 90 AD |  if_e	jmp	#LR__0182
035a4     42 01 00 FF 
035a8     B1 14 06 F6 | 	mov	arg02, ##@LR__4372
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     58 58 B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     24 01 90 AD |  if_e	jmp	#LR__0183
035bc     42 01 00 FF 
035c0     B3 14 06 F6 | 	mov	arg02, ##@LR__4373
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     40 58 B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     14 01 90 AD |  if_e	jmp	#LR__0184
035d4     42 01 00 FF 
035d8     B5 14 06 F6 | 	mov	arg02, ##@LR__4374
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     28 58 B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     04 01 90 AD |  if_e	jmp	#LR__0185
035ec     42 01 00 FF 
035f0     B7 14 06 F6 | 	mov	arg02, ##@LR__4375
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     10 58 B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     F4 00 90 AD |  if_e	jmp	#LR__0186
03604     42 01 00 FF 
03608     B9 14 06 F6 | 	mov	arg02, ##@LR__4376
0360c     0F 13 02 F6 | 	mov	arg01, local01
03610     F8 57 B1 FD | 	call	#__system___string_cmp
03614     00 FA 0D F2 | 	cmp	result1, #0 wz
03618     E4 00 90 AD |  if_e	jmp	#LR__0187
0361c     42 01 00 FF 
03620     BB 14 06 F6 | 	mov	arg02, ##@LR__4377
03624     0F 13 02 F6 | 	mov	arg01, local01
03628     E0 57 B1 FD | 	call	#__system___string_cmp
0362c     00 FA 0D F2 | 	cmp	result1, #0 wz
03630     D4 00 90 AD |  if_e	jmp	#LR__0188
03634     42 01 00 FF 
03638     BD 14 06 F6 | 	mov	arg02, ##@LR__4378
0363c     0F 13 02 F6 | 	mov	arg01, local01
03640     C8 57 B1 FD | 	call	#__system___string_cmp
03644     00 FA 0D F2 | 	cmp	result1, #0 wz
03648     C4 00 90 AD |  if_e	jmp	#LR__0189
0364c     42 01 00 FF 
03650     BF 14 06 F6 | 	mov	arg02, ##@LR__4379
03654     0F 13 02 F6 | 	mov	arg01, local01
03658     B0 57 B1 FD | 	call	#__system___string_cmp
0365c     00 FA 0D F2 | 	cmp	result1, #0 wz
03660     B4 00 90 AD |  if_e	jmp	#LR__0190
03664     42 01 00 FF 
03668     C1 14 06 F6 | 	mov	arg02, ##@LR__4380
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     98 57 B1 FD | 	call	#__system___string_cmp
03674     00 FA 0D F2 | 	cmp	result1, #0 wz
03678     A4 00 90 AD |  if_e	jmp	#LR__0191
0367c     42 01 00 FF 
03680     C3 14 06 F6 | 	mov	arg02, ##@LR__4381
03684     0F 13 02 F6 | 	mov	arg01, local01
03688     80 57 B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     94 00 90 AD |  if_e	jmp	#LR__0192
03694     42 01 00 FF 
03698     C5 14 06 F6 | 	mov	arg02, ##@LR__4382
0369c     0F 13 02 F6 | 	mov	arg01, local01
036a0     68 57 B1 FD | 	call	#__system___string_cmp
036a4     00 FA 0D F2 | 	cmp	result1, #0 wz
036a8     84 00 90 AD |  if_e	jmp	#LR__0193
036ac     42 01 00 FF 
036b0     C7 14 06 F6 | 	mov	arg02, ##@LR__4383
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     50 57 B1 FD | 	call	#__system___string_cmp
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     74 00 90 AD |  if_e	jmp	#LR__0194
036c4     78 00 90 FD | 	jmp	#LR__0195
036c8                 | LR__0180
036c8     01 FA 05 F6 | 	mov	result1, #1
036cc     74 00 90 FD | 	jmp	#LR__0196
036d0                 | LR__0181
036d0     02 FA 05 F6 | 	mov	result1, #2
036d4     6C 00 90 FD | 	jmp	#LR__0196
036d8                 | LR__0182
036d8     1B FA 05 F6 | 	mov	result1, #27
036dc     64 00 90 FD | 	jmp	#LR__0196
036e0                 | LR__0183
036e0     11 FA 05 F6 | 	mov	result1, #17
036e4     5C 00 90 FD | 	jmp	#LR__0196
036e8                 | LR__0184
036e8     05 FA 05 F6 | 	mov	result1, #5
036ec     54 00 90 FD | 	jmp	#LR__0196
036f0                 | LR__0185
036f0     06 FA 05 F6 | 	mov	result1, #6
036f4     4C 00 90 FD | 	jmp	#LR__0196
036f8                 | LR__0186
036f8     12 FA 05 F6 | 	mov	result1, #18
036fc     44 00 90 FD | 	jmp	#LR__0196
03700                 | LR__0187
03700     13 FA 05 F6 | 	mov	result1, #19
03704     3C 00 90 FD | 	jmp	#LR__0196
03708                 | LR__0188
03708     0C FA 05 F6 | 	mov	result1, #12
0370c     34 00 90 FD | 	jmp	#LR__0196
03710                 | LR__0189
03710     14 FA 05 F6 | 	mov	result1, #20
03714     2C 00 90 FD | 	jmp	#LR__0196
03718                 | LR__0190
03718     15 FA 05 F6 | 	mov	result1, #21
0371c     24 00 90 FD | 	jmp	#LR__0196
03720                 | LR__0191
03720     16 FA 05 F6 | 	mov	result1, #22
03724     1C 00 90 FD | 	jmp	#LR__0196
03728                 | LR__0192
03728     FF FB 05 F6 | 	mov	result1, #511
0372c     14 00 90 FD | 	jmp	#LR__0196
03730                 | LR__0193
03730     0F FA 05 F6 | 	mov	result1, #15
03734     0C 00 90 FD | 	jmp	#LR__0196
03738                 | LR__0194
03738     10 FA 05 F6 | 	mov	result1, #16
0373c     04 00 90 FD | 	jmp	#LR__0196
03740                 | LR__0195
03740     00 FA 05 F6 | 	mov	result1, #0
03744                 | LR__0196
03744     A7 F0 03 F6 | 	mov	ptra, fp
03748     B2 00 A0 FD | 	call	#popregs_
0374c                 | _isseparator_ret
0374c     2D 00 64 FD | 	ret
03750                 | 
03750                 | ' 
03750                 | ' 
03750                 | ' function iscommand(s as string) as ubyte
03750                 | _iscommand
03750     01 4A 05 F6 | 	mov	COUNT_, #1
03754     A8 00 A0 FD | 	call	#pushregs_
03758                 | ' 
03758                 | ' select case s
03758     09 1F 02 F6 | 	mov	local01, arg01
0375c     42 01 00 FF 
03760     CB 14 06 F6 | 	mov	arg02, ##@LR__4385
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     A0 56 B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     3C 07 90 AD |  if_e	jmp	#LR__0200
03774     42 01 00 FF 
03778     D0 14 06 F6 | 	mov	arg02, ##@LR__4386
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     88 56 B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     2C 07 90 AD |  if_e	jmp	#LR__0201
0378c     42 01 00 FF 
03790     D3 14 06 F6 | 	mov	arg02, ##@LR__4387
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     70 56 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     1C 07 90 AD |  if_e	jmp	#LR__0202
037a4     42 01 00 FF 
037a8     D7 14 06 F6 | 	mov	arg02, ##@LR__4388
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     58 56 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     0C 07 90 AD |  if_e	jmp	#LR__0203
037bc     42 01 00 FF 
037c0     DC 14 06 F6 | 	mov	arg02, ##@LR__4389
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     40 56 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     FC 06 90 AD |  if_e	jmp	#LR__0204
037d4     42 01 00 FF 
037d8     E0 14 06 F6 | 	mov	arg02, ##@LR__4390
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     28 56 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     EC 06 90 AD |  if_e	jmp	#LR__0205
037ec     42 01 00 FF 
037f0     E7 14 06 F6 | 	mov	arg02, ##@LR__4391
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     10 56 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     DC 06 90 AD |  if_e	jmp	#LR__0206
03804     42 01 00 FF 
03808     EB 14 06 F6 | 	mov	arg02, ##@LR__4392
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     F8 55 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     CC 06 90 AD |  if_e	jmp	#LR__0207
0381c     42 01 00 FF 
03820     F1 14 06 F6 | 	mov	arg02, ##@LR__4393
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     E0 55 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     BC 06 90 AD |  if_e	jmp	#LR__0208
03834     42 01 00 FF 
03838     F5 14 06 F6 | 	mov	arg02, ##@LR__4394
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     C8 55 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     AC 06 90 AD |  if_e	jmp	#LR__0209
0384c     42 01 00 FF 
03850     FB 14 06 F6 | 	mov	arg02, ##@LR__4395
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     B0 55 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     9C 06 90 AD |  if_e	jmp	#LR__0210
03864     42 01 00 FF 
03868     FE 14 06 F6 | 	mov	arg02, ##@LR__4396
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     98 55 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     8C 06 90 AD |  if_e	jmp	#LR__0211
0387c     42 01 00 FF 
03880     04 15 06 F6 | 	mov	arg02, ##@LR__4397
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     80 55 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     7C 06 90 AD |  if_e	jmp	#LR__0212
03894     42 01 00 FF 
03898     08 15 06 F6 | 	mov	arg02, ##@LR__4398
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     68 55 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     6C 06 90 AD |  if_e	jmp	#LR__0213
038ac     42 01 00 FF 
038b0     0F 15 06 F6 | 	mov	arg02, ##@LR__4399
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     50 55 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     5C 06 90 AD |  if_e	jmp	#LR__0214
038c4     42 01 00 FF 
038c8     16 15 06 F6 | 	mov	arg02, ##@LR__4400
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     38 55 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     4C 06 90 AD |  if_e	jmp	#LR__0215
038dc     42 01 00 FF 
038e0     1D 15 06 F6 | 	mov	arg02, ##@LR__4401
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     20 55 B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     3C 06 90 AD |  if_e	jmp	#LR__0216
038f4     42 01 00 FF 
038f8     27 15 06 F6 | 	mov	arg02, ##@LR__4402
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     08 55 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     2C 06 90 AD |  if_e	jmp	#LR__0217
0390c     42 01 00 FF 
03910     2B 15 06 F6 | 	mov	arg02, ##@LR__4403
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     F0 54 B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     1C 06 90 AD |  if_e	jmp	#LR__0218
03924     42 01 00 FF 
03928     2F 15 06 F6 | 	mov	arg02, ##@LR__4404
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     D8 54 B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     0C 06 90 AD |  if_e	jmp	#LR__0219
0393c     42 01 00 FF 
03940     33 15 06 F6 | 	mov	arg02, ##@LR__4405
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     C0 54 B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     FC 05 90 AD |  if_e	jmp	#LR__0220
03954     42 01 00 FF 
03958     37 15 06 F6 | 	mov	arg02, ##@LR__4406
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     A8 54 B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     EC 05 90 AD |  if_e	jmp	#LR__0221
0396c     42 01 00 FF 
03970     3C 15 06 F6 | 	mov	arg02, ##@LR__4407
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     90 54 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     DC 05 90 AD |  if_e	jmp	#LR__0222
03984     42 01 00 FF 
03988     40 15 06 F6 | 	mov	arg02, ##@LR__4408
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     78 54 B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     CC 05 90 AD |  if_e	jmp	#LR__0223
0399c     42 01 00 FF 
039a0     45 15 06 F6 | 	mov	arg02, ##@LR__4409
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     60 54 B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     BC 05 90 AD |  if_e	jmp	#LR__0224
039b4     42 01 00 FF 
039b8     4D 15 06 F6 | 	mov	arg02, ##@LR__4410
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     48 54 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     AC 05 90 AD |  if_e	jmp	#LR__0225
039cc     42 01 00 FF 
039d0     51 15 06 F6 | 	mov	arg02, ##@LR__4411
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     30 54 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     9C 05 90 AD |  if_e	jmp	#LR__0226
039e4     42 01 00 FF 
039e8     56 15 06 F6 | 	mov	arg02, ##@LR__4412
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     18 54 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     8C 05 90 AD |  if_e	jmp	#LR__0227
039fc     42 01 00 FF 
03a00     5A 15 06 F6 | 	mov	arg02, ##@LR__4413
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     00 54 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     7C 05 90 AD |  if_e	jmp	#LR__0228
03a14     42 01 00 FF 
03a18     5F 15 06 F6 | 	mov	arg02, ##@LR__4414
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     E8 53 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     6C 05 90 AD |  if_e	jmp	#LR__0229
03a2c     42 01 00 FF 
03a30     63 15 06 F6 | 	mov	arg02, ##@LR__4415
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     D0 53 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     5C 05 90 AD |  if_e	jmp	#LR__0230
03a44     42 01 00 FF 
03a48     66 15 06 F6 | 	mov	arg02, ##@LR__4416
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     B8 53 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     4C 05 90 AD |  if_e	jmp	#LR__0231
03a5c     42 01 00 FF 
03a60     6C 15 06 F6 | 	mov	arg02, ##@LR__4417
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     A0 53 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     3C 05 90 AD |  if_e	jmp	#LR__0232
03a74     42 01 00 FF 
03a78     70 15 06 F6 | 	mov	arg02, ##@LR__4418
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     88 53 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     2C 05 90 AD |  if_e	jmp	#LR__0233
03a8c     42 01 00 FF 
03a90     75 15 06 F6 | 	mov	arg02, ##@LR__4419
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     70 53 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     1C 05 90 AD |  if_e	jmp	#LR__0234
03aa4     42 01 00 FF 
03aa8     78 15 06 F6 | 	mov	arg02, ##@LR__4420
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     58 53 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     0C 05 90 AD |  if_e	jmp	#LR__0235
03abc     42 01 00 FF 
03ac0     7B 15 06 F6 | 	mov	arg02, ##@LR__4421
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     40 53 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     FC 04 90 AD |  if_e	jmp	#LR__0236
03ad4     42 01 00 FF 
03ad8     7F 15 06 F6 | 	mov	arg02, ##@LR__4422
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     28 53 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     EC 04 90 AD |  if_e	jmp	#LR__0237
03aec     42 01 00 FF 
03af0     82 15 06 F6 | 	mov	arg02, ##@LR__4423
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     10 53 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     DC 04 90 AD |  if_e	jmp	#LR__0238
03b04     42 01 00 FF 
03b08     86 15 06 F6 | 	mov	arg02, ##@LR__4424
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     F8 52 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     CC 04 90 AD |  if_e	jmp	#LR__0239
03b1c     42 01 00 FF 
03b20     8B 15 06 F6 | 	mov	arg02, ##@LR__4425
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     E0 52 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     BC 04 90 AD |  if_e	jmp	#LR__0240
03b34     42 01 00 FF 
03b38     8E 15 06 F6 | 	mov	arg02, ##@LR__4426
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     C8 52 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     AC 04 90 AD |  if_e	jmp	#LR__0241
03b4c     42 01 00 FF 
03b50     93 15 06 F6 | 	mov	arg02, ##@LR__4427
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     B0 52 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     9C 04 90 AD |  if_e	jmp	#LR__0242
03b64     42 01 00 FF 
03b68     97 15 06 F6 | 	mov	arg02, ##@LR__4428
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     98 52 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     8C 04 90 AD |  if_e	jmp	#LR__0243
03b7c     42 01 00 FF 
03b80     9C 15 06 F6 | 	mov	arg02, ##@LR__4429
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     80 52 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     7C 04 90 AD |  if_e	jmp	#LR__0244
03b94     42 01 00 FF 
03b98     9F 15 06 F6 | 	mov	arg02, ##@LR__4430
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     68 52 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     6C 04 90 AD |  if_e	jmp	#LR__0245
03bac     42 01 00 FF 
03bb0     A5 15 06 F6 | 	mov	arg02, ##@LR__4431
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     50 52 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     5C 04 90 AD |  if_e	jmp	#LR__0246
03bc4     42 01 00 FF 
03bc8     A9 15 06 F6 | 	mov	arg02, ##@LR__4432
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     38 52 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     4C 04 90 AD |  if_e	jmp	#LR__0247
03bdc     42 01 00 FF 
03be0     AE 15 06 F6 | 	mov	arg02, ##@LR__4433
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     20 52 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     3C 04 90 AD |  if_e	jmp	#LR__0248
03bf4     42 01 00 FF 
03bf8     B1 15 06 F6 | 	mov	arg02, ##@LR__4434
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     08 52 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     2C 04 90 AD |  if_e	jmp	#LR__0249
03c0c     42 01 00 FF 
03c10     B7 15 06 F6 | 	mov	arg02, ##@LR__4435
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     F0 51 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     1C 04 90 AD |  if_e	jmp	#LR__0250
03c24     42 01 00 FF 
03c28     BA 15 06 F6 | 	mov	arg02, ##@LR__4436
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     D8 51 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     0C 04 90 AD |  if_e	jmp	#LR__0251
03c3c     42 01 00 FF 
03c40     C3 15 06 F6 | 	mov	arg02, ##@LR__4437
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     C0 51 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     FC 03 90 AD |  if_e	jmp	#LR__0252
03c54     42 01 00 FF 
03c58     C9 15 06 F6 | 	mov	arg02, ##@LR__4438
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     A8 51 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     EC 03 90 AD |  if_e	jmp	#LR__0253
03c6c     42 01 00 FF 
03c70     CF 15 06 F6 | 	mov	arg02, ##@LR__4439
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     90 51 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     DC 03 90 AD |  if_e	jmp	#LR__0254
03c84     42 01 00 FF 
03c88     D8 15 06 F6 | 	mov	arg02, ##@LR__4440
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     78 51 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     CC 03 90 AD |  if_e	jmp	#LR__0255
03c9c     42 01 00 FF 
03ca0     E2 15 06 F6 | 	mov	arg02, ##@LR__4441
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     60 51 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     BC 03 90 AD |  if_e	jmp	#LR__0256
03cb4     42 01 00 FF 
03cb8     EB 15 06 F6 | 	mov	arg02, ##@LR__4442
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     48 51 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     AC 03 90 AD |  if_e	jmp	#LR__0257
03ccc     42 01 00 FF 
03cd0     F0 15 06 F6 | 	mov	arg02, ##@LR__4443
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     30 51 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     9C 03 90 AD |  if_e	jmp	#LR__0258
03ce4     42 01 00 FF 
03ce8     F5 15 06 F6 | 	mov	arg02, ##@LR__4444
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     18 51 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     8C 03 90 AD |  if_e	jmp	#LR__0259
03cfc     42 01 00 FF 
03d00     F9 15 06 F6 | 	mov	arg02, ##@LR__4445
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     00 51 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     7C 03 90 AD |  if_e	jmp	#LR__0260
03d14     43 01 00 FF 
03d18     02 14 06 F6 | 	mov	arg02, ##@LR__4446
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     E8 50 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     6C 03 90 AD |  if_e	jmp	#LR__0261
03d2c     43 01 00 FF 
03d30     07 14 06 F6 | 	mov	arg02, ##@LR__4447
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     D0 50 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     5C 03 90 AD |  if_e	jmp	#LR__0262
03d44     43 01 00 FF 
03d48     0D 14 06 F6 | 	mov	arg02, ##@LR__4448
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     B8 50 B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     4C 03 90 AD |  if_e	jmp	#LR__0263
03d5c     43 01 00 FF 
03d60     0F 14 06 F6 | 	mov	arg02, ##@LR__4449
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     A0 50 B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     3C 03 90 AD |  if_e	jmp	#LR__0264
03d74     43 01 00 FF 
03d78     13 14 06 F6 | 	mov	arg02, ##@LR__4450
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     88 50 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     2C 03 90 AD |  if_e	jmp	#LR__0265
03d8c     43 01 00 FF 
03d90     17 14 06 F6 | 	mov	arg02, ##@LR__4451
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     70 50 B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     1C 03 90 AD |  if_e	jmp	#LR__0266
03da4     43 01 00 FF 
03da8     1C 14 06 F6 | 	mov	arg02, ##@LR__4452
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     58 50 B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     0C 03 90 AD |  if_e	jmp	#LR__0267
03dbc     43 01 00 FF 
03dc0     1F 14 06 F6 | 	mov	arg02, ##@LR__4453
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     40 50 B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     FC 02 90 AD |  if_e	jmp	#LR__0268
03dd4     43 01 00 FF 
03dd8     26 14 06 F6 | 	mov	arg02, ##@LR__4454
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     28 50 B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     EC 02 90 AD |  if_e	jmp	#LR__0269
03dec     43 01 00 FF 
03df0     2A 14 06 F6 | 	mov	arg02, ##@LR__4455
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     10 50 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     DC 02 90 AD |  if_e	jmp	#LR__0270
03e04     43 01 00 FF 
03e08     2F 14 06 F6 | 	mov	arg02, ##@LR__4456
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     F8 4F B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     CC 02 90 AD |  if_e	jmp	#LR__0271
03e1c     43 01 00 FF 
03e20     36 14 06 F6 | 	mov	arg02, ##@LR__4457
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     E0 4F B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     BC 02 90 AD |  if_e	jmp	#LR__0272
03e34     43 01 00 FF 
03e38     40 14 06 F6 | 	mov	arg02, ##@LR__4458
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     C8 4F B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     AC 02 90 AD |  if_e	jmp	#LR__0273
03e4c     43 01 00 FF 
03e50     44 14 06 F6 | 	mov	arg02, ##@LR__4459
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     B0 4F B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     9C 02 90 AD |  if_e	jmp	#LR__0274
03e64     43 01 00 FF 
03e68     4C 14 06 F6 | 	mov	arg02, ##@LR__4460
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     98 4F B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     8C 02 90 AD |  if_e	jmp	#LR__0275
03e7c     43 01 00 FF 
03e80     50 14 06 F6 | 	mov	arg02, ##@LR__4461
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     80 4F B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     7C 02 90 AD |  if_e	jmp	#LR__0276
03e94     43 01 00 FF 
03e98     56 14 06 F6 | 	mov	arg02, ##@LR__4462
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     68 4F B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     6C 02 90 AD |  if_e	jmp	#LR__0277
03eac     70 02 90 FD | 	jmp	#LR__0278
03eb0                 | LR__0200
03eb0     5C FA 05 F6 | 	mov	result1, #92
03eb4     6C 02 90 FD | 	jmp	#LR__0279
03eb8                 | LR__0201
03eb8     5C FA 05 F6 | 	mov	result1, #92
03ebc     64 02 90 FD | 	jmp	#LR__0279
03ec0                 | LR__0202
03ec0     47 FA 05 F6 | 	mov	result1, #71
03ec4     5C 02 90 FD | 	jmp	#LR__0279
03ec8                 | LR__0203
03ec8     59 FA 05 F6 | 	mov	result1, #89
03ecc     54 02 90 FD | 	jmp	#LR__0279
03ed0                 | LR__0204
03ed0     59 FA 05 F6 | 	mov	result1, #89
03ed4     4C 02 90 FD | 	jmp	#LR__0279
03ed8                 | LR__0205
03ed8     45 FA 05 F6 | 	mov	result1, #69
03edc     44 02 90 FD | 	jmp	#LR__0279
03ee0                 | LR__0206
03ee0     45 FA 05 F6 | 	mov	result1, #69
03ee4     3C 02 90 FD | 	jmp	#LR__0279
03ee8                 | LR__0207
03ee8     69 FA 05 F6 | 	mov	result1, #105
03eec     34 02 90 FD | 	jmp	#LR__0279
03ef0                 | LR__0208
03ef0     40 FA 05 F6 | 	mov	result1, #64
03ef4     2C 02 90 FD | 	jmp	#LR__0279
03ef8                 | LR__0209
03ef8     49 FA 05 F6 | 	mov	result1, #73
03efc     24 02 90 FD | 	jmp	#LR__0279
03f00                 | LR__0210
03f00     49 FA 05 F6 | 	mov	result1, #73
03f04     1C 02 90 FD | 	jmp	#LR__0279
03f08                 | LR__0211
03f08     50 FA 05 F6 | 	mov	result1, #80
03f0c     14 02 90 FD | 	jmp	#LR__0279
03f10                 | LR__0212
03f10     50 FA 05 F6 | 	mov	result1, #80
03f14     0C 02 90 FD | 	jmp	#LR__0279
03f18                 | LR__0213
03f18     68 FA 05 F6 | 	mov	result1, #104
03f1c     04 02 90 FD | 	jmp	#LR__0279
03f20                 | LR__0214
03f20     73 FA 05 F6 | 	mov	result1, #115
03f24     FC 01 90 FD | 	jmp	#LR__0279
03f28                 | LR__0215
03f28     74 FA 05 F6 | 	mov	result1, #116
03f2c     F4 01 90 FD | 	jmp	#LR__0279
03f30                 | LR__0216
03f30     6C FA 05 F6 | 	mov	result1, #108
03f34     EC 01 90 FD | 	jmp	#LR__0279
03f38                 | LR__0217
03f38     6C FA 05 F6 | 	mov	result1, #108
03f3c     E4 01 90 FD | 	jmp	#LR__0279
03f40                 | LR__0218
03f40     89 FA 05 F6 | 	mov	result1, #137
03f44     DC 01 90 FD | 	jmp	#LR__0279
03f48                 | LR__0219
03f48     72 FA 05 F6 | 	mov	result1, #114
03f4c     D4 01 90 FD | 	jmp	#LR__0279
03f50                 | LR__0220
03f50     5D FA 05 F6 | 	mov	result1, #93
03f54     CC 01 90 FD | 	jmp	#LR__0279
03f58                 | LR__0221
03f58     43 FA 05 F6 | 	mov	result1, #67
03f5c     C4 01 90 FD | 	jmp	#LR__0279
03f60                 | LR__0222
03f60     43 FA 05 F6 | 	mov	result1, #67
03f64     BC 01 90 FD | 	jmp	#LR__0279
03f68                 | LR__0223
03f68     5A FA 05 F6 | 	mov	result1, #90
03f6c     B4 01 90 FD | 	jmp	#LR__0279
03f70                 | LR__0224
03f70     46 FA 05 F6 | 	mov	result1, #70
03f74     AC 01 90 FD | 	jmp	#LR__0279
03f78                 | LR__0225
03f78     46 FA 05 F6 | 	mov	result1, #70
03f7c     A4 01 90 FD | 	jmp	#LR__0279
03f80                 | LR__0226
03f80     71 FA 05 F6 | 	mov	result1, #113
03f84     9C 01 90 FD | 	jmp	#LR__0279
03f88                 | LR__0227
03f88     71 FA 05 F6 | 	mov	result1, #113
03f8c     94 01 90 FD | 	jmp	#LR__0279
03f90                 | LR__0228
03f90     60 FA 05 F6 | 	mov	result1, #96
03f94     8C 01 90 FD | 	jmp	#LR__0279
03f98                 | LR__0229
03f98     4A FA 05 F6 | 	mov	result1, #74
03f9c     84 01 90 FD | 	jmp	#LR__0279
03fa0                 | LR__0230
03fa0     4A FA 05 F6 | 	mov	result1, #74
03fa4     7C 01 90 FD | 	jmp	#LR__0279
03fa8                 | LR__0231
03fa8     48 FA 05 F6 | 	mov	result1, #72
03fac     74 01 90 FD | 	jmp	#LR__0279
03fb0                 | LR__0232
03fb0     48 FA 05 F6 | 	mov	result1, #72
03fb4     6C 01 90 FD | 	jmp	#LR__0279
03fb8                 | LR__0233
03fb8     4E FA 05 F6 | 	mov	result1, #78
03fbc     64 01 90 FD | 	jmp	#LR__0279
03fc0                 | LR__0234
03fc0     4E FA 05 F6 | 	mov	result1, #78
03fc4     5C 01 90 FD | 	jmp	#LR__0279
03fc8                 | LR__0235
03fc8     58 FA 05 F6 | 	mov	result1, #88
03fcc     54 01 90 FD | 	jmp	#LR__0279
03fd0                 | LR__0236
03fd0     5F FA 05 F6 | 	mov	result1, #95
03fd4     4C 01 90 FD | 	jmp	#LR__0279
03fd8                 | LR__0237
03fd8     5F FA 05 F6 | 	mov	result1, #95
03fdc     44 01 90 FD | 	jmp	#LR__0279
03fe0                 | LR__0238
03fe0     8A FA 05 F6 | 	mov	result1, #138
03fe4     3C 01 90 FD | 	jmp	#LR__0279
03fe8                 | LR__0239
03fe8     4C FA 05 F6 | 	mov	result1, #76
03fec     34 01 90 FD | 	jmp	#LR__0279
03ff0                 | LR__0240
03ff0     4C FA 05 F6 | 	mov	result1, #76
03ff4     2C 01 90 FD | 	jmp	#LR__0279
03ff8                 | LR__0241
03ff8     52 FA 05 F6 | 	mov	result1, #82
03ffc     24 01 90 FD | 	jmp	#LR__0279
04000                 | LR__0242
04000     52 FA 05 F6 | 	mov	result1, #82
04004     1C 01 90 FD | 	jmp	#LR__0279
04008                 | LR__0243
04008     61 FA 05 F6 | 	mov	result1, #97
0400c     14 01 90 FD | 	jmp	#LR__0279
04010                 | LR__0244
04010     61 FA 05 F6 | 	mov	result1, #97
04014     0C 01 90 FD | 	jmp	#LR__0279
04018                 | LR__0245
04018     63 FA 05 F6 | 	mov	result1, #99
0401c     04 01 90 FD | 	jmp	#LR__0279
04020                 | LR__0246
04020     41 FA 05 F6 | 	mov	result1, #65
04024     FC 00 90 FD | 	jmp	#LR__0279
04028                 | LR__0247
04028     4B FA 05 F6 | 	mov	result1, #75
0402c     F4 00 90 FD | 	jmp	#LR__0279
04030                 | LR__0248
04030     4B FA 05 F6 | 	mov	result1, #75
04034     EC 00 90 FD | 	jmp	#LR__0279
04038                 | LR__0249
04038     5E FA 05 F6 | 	mov	result1, #94
0403c     E4 00 90 FD | 	jmp	#LR__0279
04040                 | LR__0250
04040     5E FA 05 F6 | 	mov	result1, #94
04044     DC 00 90 FD | 	jmp	#LR__0279
04048                 | LR__0251
04048     7C FA 05 F6 | 	mov	result1, #124
0404c     D4 00 90 FD | 	jmp	#LR__0279
04050                 | LR__0252
04050     7E FA 05 F6 | 	mov	result1, #126
04054     CC 00 90 FD | 	jmp	#LR__0279
04058                 | LR__0253
04058     7D FA 05 F6 | 	mov	result1, #125
0405c     C4 00 90 FD | 	jmp	#LR__0279
04060                 | LR__0254
04060     7F FA 05 F6 | 	mov	result1, #127
04064     BC 00 90 FD | 	jmp	#LR__0279
04068                 | LR__0255
04068     80 FA 05 F6 | 	mov	result1, #128
0406c     B4 00 90 FD | 	jmp	#LR__0279
04070                 | LR__0256
04070     55 FA 05 F6 | 	mov	result1, #85
04074     AC 00 90 FD | 	jmp	#LR__0279
04078                 | LR__0257
04078     75 FA 05 F6 | 	mov	result1, #117
0407c     A4 00 90 FD | 	jmp	#LR__0279
04080                 | LR__0258
04080     42 FA 05 F6 | 	mov	result1, #66
04084     9C 00 90 FD | 	jmp	#LR__0279
04088                 | LR__0259
04088     42 FA 05 F6 | 	mov	result1, #66
0408c     94 00 90 FD | 	jmp	#LR__0279
04090                 | LR__0260
04090     81 FA 05 F6 | 	mov	result1, #129
04094     8C 00 90 FD | 	jmp	#LR__0279
04098                 | LR__0261
04098     81 FA 05 F6 | 	mov	result1, #129
0409c     84 00 90 FD | 	jmp	#LR__0279
040a0                 | LR__0262
040a0     44 FA 05 F6 | 	mov	result1, #68
040a4     7C 00 90 FD | 	jmp	#LR__0279
040a8                 | LR__0263
040a8     44 FA 05 F6 | 	mov	result1, #68
040ac     74 00 90 FD | 	jmp	#LR__0279
040b0                 | LR__0264
040b0     88 FA 05 F6 | 	mov	result1, #136
040b4     6C 00 90 FD | 	jmp	#LR__0279
040b8                 | LR__0265
040b8     4D FA 05 F6 | 	mov	result1, #77
040bc     64 00 90 FD | 	jmp	#LR__0279
040c0                 | LR__0266
040c0     51 FA 05 F6 | 	mov	result1, #81
040c4     5C 00 90 FD | 	jmp	#LR__0279
040c8                 | LR__0267
040c8     51 FA 05 F6 | 	mov	result1, #81
040cc     54 00 90 FD | 	jmp	#LR__0279
040d0                 | LR__0268
040d0     6D FA 05 F6 | 	mov	result1, #109
040d4     4C 00 90 FD | 	jmp	#LR__0279
040d8                 | LR__0269
040d8     6D FA 05 F6 | 	mov	result1, #109
040dc     44 00 90 FD | 	jmp	#LR__0279
040e0                 | LR__0270
040e0     5B FA 05 F6 | 	mov	result1, #91
040e4     3C 00 90 FD | 	jmp	#LR__0279
040e8                 | LR__0271
040e8     56 FA 05 F6 | 	mov	result1, #86
040ec     34 00 90 FD | 	jmp	#LR__0279
040f0                 | LR__0272
040f0     70 FA 05 F6 | 	mov	result1, #112
040f4     2C 00 90 FD | 	jmp	#LR__0279
040f8                 | LR__0273
040f8     70 FA 05 F6 | 	mov	result1, #112
040fc     24 00 90 FD | 	jmp	#LR__0279
04100                 | LR__0274
04100     57 FA 05 F6 | 	mov	result1, #87
04104     1C 00 90 FD | 	jmp	#LR__0279
04108                 | LR__0275
04108     57 FA 05 F6 | 	mov	result1, #87
0410c     14 00 90 FD | 	jmp	#LR__0279
04110                 | LR__0276
04110     77 FA 05 F6 | 	mov	result1, #119
04114     0C 00 90 FD | 	jmp	#LR__0279
04118                 | LR__0277
04118     78 FA 05 F6 | 	mov	result1, #120
0411c     04 00 90 FD | 	jmp	#LR__0279
04120                 | LR__0278
04120     00 FA 05 F6 | 	mov	result1, #0
04124                 | LR__0279
04124     A7 F0 03 F6 | 	mov	ptra, fp
04128     B2 00 A0 FD | 	call	#popregs_
0412c                 | _iscommand_ret
0412c     2D 00 64 FD | 	ret
04130                 | 
04130                 | ' 
04130                 | ' function isfunction(s as string) as ubyte
04130                 | _isfunction
04130     01 4A 05 F6 | 	mov	COUNT_, #1
04134     A8 00 A0 FD | 	call	#pushregs_
04138                 | ' 
04138                 | ' select case s
04138     09 1F 02 F6 | 	mov	local01, arg01
0413c     43 01 00 FF 
04140     5C 14 06 F6 | 	mov	arg02, ##@LR__4463
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     C0 4C B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     CC 01 90 AD |  if_e	jmp	#LR__0280
04154     43 01 00 FF 
04158     61 14 06 F6 | 	mov	arg02, ##@LR__4464
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     A8 4C B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     BC 01 90 AD |  if_e	jmp	#LR__0281
0416c     43 01 00 FF 
04170     66 14 06 F6 | 	mov	arg02, ##@LR__4465
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     90 4C B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     AC 01 90 AD |  if_e	jmp	#LR__0282
04184     43 01 00 FF 
04188     6A 14 06 F6 | 	mov	arg02, ##@LR__4466
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     78 4C B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     9C 01 90 AD |  if_e	jmp	#LR__0283
0419c     43 01 00 FF 
041a0     6E 14 06 F6 | 	mov	arg02, ##@LR__4467
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     60 4C B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     8C 01 90 AD |  if_e	jmp	#LR__0284
041b4     43 01 00 FF 
041b8     77 14 06 F6 | 	mov	arg02, ##@LR__4468
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     48 4C B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     7C 01 90 AD |  if_e	jmp	#LR__0285
041cc     43 01 00 FF 
041d0     7B 14 06 F6 | 	mov	arg02, ##@LR__4469
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     30 4C B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     6C 01 90 AD |  if_e	jmp	#LR__0286
041e4     43 01 00 FF 
041e8     83 14 06 F6 | 	mov	arg02, ##@LR__4470
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     18 4C B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     5C 01 90 AD |  if_e	jmp	#LR__0287
041fc     43 01 00 FF 
04200     8A 14 06 F6 | 	mov	arg02, ##@LR__4471
04204     0F 13 02 F6 | 	mov	arg01, local01
04208     00 4C B1 FD | 	call	#__system___string_cmp
0420c     00 FA 0D F2 | 	cmp	result1, #0 wz
04210     4C 01 90 AD |  if_e	jmp	#LR__0288
04214     43 01 00 FF 
04218     91 14 06 F6 | 	mov	arg02, ##@LR__4472
0421c     0F 13 02 F6 | 	mov	arg01, local01
04220     E8 4B B1 FD | 	call	#__system___string_cmp
04224     00 FA 0D F2 | 	cmp	result1, #0 wz
04228     3C 01 90 AD |  if_e	jmp	#LR__0289
0422c     43 01 00 FF 
04230     98 14 06 F6 | 	mov	arg02, ##@LR__4473
04234     0F 13 02 F6 | 	mov	arg01, local01
04238     D0 4B B1 FD | 	call	#__system___string_cmp
0423c     00 FA 0D F2 | 	cmp	result1, #0 wz
04240     2C 01 90 AD |  if_e	jmp	#LR__0290
04244     43 01 00 FF 
04248     9F 14 06 F6 | 	mov	arg02, ##@LR__4474
0424c     0F 13 02 F6 | 	mov	arg01, local01
04250     B8 4B B1 FD | 	call	#__system___string_cmp
04254     00 FA 0D F2 | 	cmp	result1, #0 wz
04258     1C 01 90 AD |  if_e	jmp	#LR__0291
0425c     43 01 00 FF 
04260     A7 14 06 F6 | 	mov	arg02, ##@LR__4475
04264     0F 13 02 F6 | 	mov	arg01, local01
04268     A0 4B B1 FD | 	call	#__system___string_cmp
0426c     00 FA 0D F2 | 	cmp	result1, #0 wz
04270     0C 01 90 AD |  if_e	jmp	#LR__0292
04274     43 01 00 FF 
04278     AD 14 06 F6 | 	mov	arg02, ##@LR__4476
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     88 4B B1 FD | 	call	#__system___string_cmp
04284     00 FA 0D F2 | 	cmp	result1, #0 wz
04288     FC 00 90 AD |  if_e	jmp	#LR__0293
0428c     43 01 00 FF 
04290     B3 14 06 F6 | 	mov	arg02, ##@LR__4477
04294     0F 13 02 F6 | 	mov	arg01, local01
04298     70 4B B1 FD | 	call	#__system___string_cmp
0429c     00 FA 0D F2 | 	cmp	result1, #0 wz
042a0     EC 00 90 AD |  if_e	jmp	#LR__0294
042a4     43 01 00 FF 
042a8     B7 14 06 F6 | 	mov	arg02, ##@LR__4478
042ac     0F 13 02 F6 | 	mov	arg01, local01
042b0     58 4B B1 FD | 	call	#__system___string_cmp
042b4     00 FA 0D F2 | 	cmp	result1, #0 wz
042b8     DC 00 90 AD |  if_e	jmp	#LR__0295
042bc     43 01 00 FF 
042c0     BB 14 06 F6 | 	mov	arg02, ##@LR__4479
042c4     0F 13 02 F6 | 	mov	arg01, local01
042c8     40 4B B1 FD | 	call	#__system___string_cmp
042cc     00 FA 0D F2 | 	cmp	result1, #0 wz
042d0     CC 00 90 AD |  if_e	jmp	#LR__0296
042d4     43 01 00 FF 
042d8     BF 14 06 F6 | 	mov	arg02, ##@LR__4480
042dc     0F 13 02 F6 | 	mov	arg01, local01
042e0     28 4B B1 FD | 	call	#__system___string_cmp
042e4     00 FA 0D F2 | 	cmp	result1, #0 wz
042e8     BC 00 90 AD |  if_e	jmp	#LR__0297
042ec     43 01 00 FF 
042f0     C5 14 06 F6 | 	mov	arg02, ##@LR__4481
042f4     0F 13 02 F6 | 	mov	arg01, local01
042f8     10 4B B1 FD | 	call	#__system___string_cmp
042fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04300     AC 00 90 AD |  if_e	jmp	#LR__0298
04304     43 01 00 FF 
04308     CB 14 06 F6 | 	mov	arg02, ##@LR__4482
0430c     0F 13 02 F6 | 	mov	arg01, local01
04310     F8 4A B1 FD | 	call	#__system___string_cmp
04314     00 FA 0D F2 | 	cmp	result1, #0 wz
04318     9C 00 90 AD |  if_e	jmp	#LR__0299
0431c     A0 00 90 FD | 	jmp	#LR__0300
04320                 | LR__0280
04320     85 FA 05 F6 | 	mov	result1, #133
04324     9C 00 90 FD | 	jmp	#LR__0301
04328                 | LR__0281
04328     84 FA 05 F6 | 	mov	result1, #132
0432c     94 00 90 FD | 	jmp	#LR__0301
04330                 | LR__0282
04330     86 FA 05 F6 | 	mov	result1, #134
04334     8C 00 90 FD | 	jmp	#LR__0301
04338                 | LR__0283
04338     82 FA 05 F6 | 	mov	result1, #130
0433c     84 00 90 FD | 	jmp	#LR__0301
04340                 | LR__0284
04340     6F FA 05 F6 | 	mov	result1, #111
04344     7C 00 90 FD | 	jmp	#LR__0301
04348                 | LR__0285
04348     6F FA 05 F6 | 	mov	result1, #111
0434c     74 00 90 FD | 	jmp	#LR__0301
04350                 | LR__0286
04350     62 FA 05 F6 | 	mov	result1, #98
04354     6C 00 90 FD | 	jmp	#LR__0301
04358                 | LR__0287
04358     66 FA 05 F6 | 	mov	result1, #102
0435c     64 00 90 FD | 	jmp	#LR__0301
04360                 | LR__0288
04360     67 FA 05 F6 | 	mov	result1, #103
04364     5C 00 90 FD | 	jmp	#LR__0301
04368                 | LR__0289
04368     64 FA 05 F6 | 	mov	result1, #100
0436c     54 00 90 FD | 	jmp	#LR__0301
04370                 | LR__0290
04370     65 FA 05 F6 | 	mov	result1, #101
04374     4C 00 90 FD | 	jmp	#LR__0301
04378                 | LR__0291
04378     7B FA 05 F6 | 	mov	result1, #123
0437c     44 00 90 FD | 	jmp	#LR__0301
04380                 | LR__0292
04380     76 FA 05 F6 | 	mov	result1, #118
04384     3C 00 90 FD | 	jmp	#LR__0301
04388                 | LR__0293
04388     7A FA 05 F6 | 	mov	result1, #122
0438c     34 00 90 FD | 	jmp	#LR__0301
04390                 | LR__0294
04390     54 FA 05 F6 | 	mov	result1, #84
04394     2C 00 90 FD | 	jmp	#LR__0301
04398                 | LR__0295
04398     6B FA 05 F6 | 	mov	result1, #107
0439c     24 00 90 FD | 	jmp	#LR__0301
043a0                 | LR__0296
043a0     87 FA 05 F6 | 	mov	result1, #135
043a4     1C 00 90 FD | 	jmp	#LR__0301
043a8                 | LR__0297
043a8     6A FA 05 F6 | 	mov	result1, #106
043ac     14 00 90 FD | 	jmp	#LR__0301
043b0                 | LR__0298
043b0     6E FA 05 F6 | 	mov	result1, #110
043b4     0C 00 90 FD | 	jmp	#LR__0301
043b8                 | LR__0299
043b8     83 FA 05 F6 | 	mov	result1, #131
043bc     04 00 90 FD | 	jmp	#LR__0301
043c0                 | LR__0300
043c0     00 FA 05 F6 | 	mov	result1, #0
043c4                 | LR__0301
043c4     A7 F0 03 F6 | 	mov	ptra, fp
043c8     B2 00 A0 FD | 	call	#popregs_
043cc                 | _isfunction_ret
043cc     2D 00 64 FD | 	ret
043d0                 | 
043d0                 | ' 
043d0                 | ' function isname(s as string) as boolean
043d0                 | _isname
043d0     0D 4A 05 F6 | 	mov	COUNT_, #13
043d4     A8 00 A0 FD | 	call	#pushregs_
043d8     09 1F 02 F6 | 	mov	local01, arg01
043dc     09 21 02 F6 | 	mov	local02, arg01
043e0     97 06 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
043e4                 | LR__0310
043e4     10 FB C9 FA | 	rdbyte	result1, local02 wz
043e8     01 20 06 51 |  if_ne	add	local02, #1
043ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0310
043f0                 | LR__0311
043f0     09 21 82 F1 | 	sub	local02, arg01
043f4     10 FB 01 F6 | 	mov	result1, local02
043f8     FD 22 0A F6 | 	mov	local03, result1 wz
043fc     00 FA 05 A6 |  if_e	mov	result1, #0
04400     34 02 90 AD |  if_e	jmp	#LR__0323
04404     0F 13 02 F6 | 	mov	arg01, local01
04408     01 14 06 F6 | 	mov	arg02, #1
0440c     01 16 06 F6 | 	mov	arg03, #1
04410     F8 6A B1 FD | 	call	#__system__Mid_S
04414     FD 24 02 F6 | 	mov	local04, result1
04418                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04418     43 01 00 FF 
0441c     CF 14 06 F6 | 	mov	arg02, ##@LR__4483
04420     12 13 02 F6 | 	mov	arg01, local04
04424     E4 49 B1 FD | 	call	#__system___string_cmp
04428     00 FA 55 F2 | 	cmps	result1, #0 wc
0442c     18 00 90 CD |  if_b	jmp	#LR__0312
04430     43 01 00 FF 
04434     D1 14 06 F6 | 	mov	arg02, ##@LR__4484
04438     12 13 02 F6 | 	mov	arg01, local04
0443c     CC 49 B1 FD | 	call	#__system___string_cmp
04440     01 FA 55 F2 | 	cmps	result1, #1 wc
04444     1C 00 90 CD |  if_b	jmp	#LR__0313
04448                 | LR__0312
04448     43 01 00 FF 
0444c     D3 14 06 F6 | 	mov	arg02, ##@LR__4485
04450     12 13 02 F6 | 	mov	arg01, local04
04454     B4 49 B1 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     00 FA 05 56 |  if_ne	mov	result1, #0
04460     D4 01 90 5D |  if_ne	jmp	#LR__0323
04464                 | LR__0313
04464                 | ' if l>2 then 
04464     03 22 56 F2 | 	cmps	local03, #3 wc
04468     C8 01 90 CD |  if_b	jmp	#LR__0322
0446c                 | '   for i=2 to l
0446c     02 26 06 F6 | 	mov	local05, #2
04470     11 29 02 F6 | 	mov	local06, local03
04474     01 28 06 F1 | 	add	local06, #1
04478                 | LR__0314
04478     14 27 52 F2 | 	cmps	local05, local06 wc
0447c     B4 01 90 3D |  if_ae	jmp	#LR__0321
04480     0F 13 02 F6 | 	mov	arg01, local01
04484     13 15 02 F6 | 	mov	arg02, local05
04488     01 16 06 F6 | 	mov	arg03, #1
0448c     7C 6A B1 FD | 	call	#__system__Mid_S
04490     FD 24 02 F6 | 	mov	local04, result1
04494                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04494     11 27 52 F2 | 	cmps	local05, local03 wc
04498     9C 00 90 3D |  if_ae	jmp	#LR__0317
0449c     43 01 00 FF 
044a0     D5 14 06 F6 | 	mov	arg02, ##@LR__4486
044a4     12 13 02 F6 | 	mov	arg01, local04
044a8     60 49 B1 FD | 	call	#__system___string_cmp
044ac     00 FA 55 F2 | 	cmps	result1, #0 wc
044b0     18 00 90 CD |  if_b	jmp	#LR__0315
044b4     43 01 00 FF 
044b8     D7 14 06 F6 | 	mov	arg02, ##@LR__4487
044bc     12 13 02 F6 | 	mov	arg01, local04
044c0     48 49 B1 FD | 	call	#__system___string_cmp
044c4     01 FA 55 F2 | 	cmps	result1, #1 wc
044c8     6C 00 90 CD |  if_b	jmp	#LR__0317
044cc                 | LR__0315
044cc     43 01 00 FF 
044d0     D9 14 06 F6 | 	mov	arg02, ##@LR__4488
044d4     12 13 02 F6 | 	mov	arg01, local04
044d8     30 49 B1 FD | 	call	#__system___string_cmp
044dc     00 FA 55 F2 | 	cmps	result1, #0 wc
044e0     18 00 90 CD |  if_b	jmp	#LR__0316
044e4     43 01 00 FF 
044e8     DB 14 06 F6 | 	mov	arg02, ##@LR__4489
044ec     12 13 02 F6 | 	mov	arg01, local04
044f0     18 49 B1 FD | 	call	#__system___string_cmp
044f4     01 FA 55 F2 | 	cmps	result1, #1 wc
044f8     3C 00 90 CD |  if_b	jmp	#LR__0317
044fc                 | LR__0316
044fc     43 01 00 FF 
04500     DD 2A 06 F6 | 	mov	local07, ##@LR__4490
04504     12 13 02 F6 | 	mov	arg01, local04
04508     15 15 02 F6 | 	mov	arg02, local07
0450c     FC 48 B1 FD | 	call	#__system___string_cmp
04510     00 FA 0D F2 | 	cmp	result1, #0 wz
04514     20 00 90 AD |  if_e	jmp	#LR__0317
04518     43 01 00 FF 
0451c     DF 2C 06 F6 | 	mov	local08, ##@LR__4491
04520     12 13 02 F6 | 	mov	arg01, local04
04524     16 15 02 F6 | 	mov	arg02, local08
04528     E0 48 B1 FD | 	call	#__system___string_cmp
0452c     FD 2E 0A F6 | 	mov	local09, result1 wz
04530     00 FA 05 56 |  if_ne	mov	result1, #0
04534     00 01 90 5D |  if_ne	jmp	#LR__0323
04538                 | LR__0317
04538                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04538     11 27 0A F2 | 	cmp	local05, local03 wz
0453c     EC 00 90 5D |  if_ne	jmp	#LR__0320
04540     43 01 00 FF 
04544     E1 30 06 F6 | 	mov	local10, ##@LR__4492
04548     12 13 02 F6 | 	mov	arg01, local04
0454c     18 15 02 F6 | 	mov	arg02, local10
04550     B8 48 B1 FD | 	call	#__system___string_cmp
04554     FD 32 02 F6 | 	mov	local11, result1
04558     00 32 56 F2 | 	cmps	local11, #0 wc
0455c     1C 00 90 CD |  if_b	jmp	#LR__0318
04560     43 01 00 FF 
04564     E3 14 06 F6 | 	mov	arg02, ##@LR__4493
04568     12 13 02 F6 | 	mov	arg01, local04
0456c     9C 48 B1 FD | 	call	#__system___string_cmp
04570     FD 30 02 F6 | 	mov	local10, result1
04574     01 30 56 F2 | 	cmps	local10, #1 wc
04578     B0 00 90 CD |  if_b	jmp	#LR__0320
0457c                 | LR__0318
0457c     43 01 00 FF 
04580     E5 14 06 F6 | 	mov	arg02, ##@LR__4494
04584     12 13 02 F6 | 	mov	arg01, local04
04588     80 48 B1 FD | 	call	#__system___string_cmp
0458c     00 FA 55 F2 | 	cmps	result1, #0 wc
04590     1C 00 90 CD |  if_b	jmp	#LR__0319
04594     43 01 00 FF 
04598     E7 2E 06 F6 | 	mov	local09, ##@LR__4495
0459c     12 13 02 F6 | 	mov	arg01, local04
045a0     17 15 02 F6 | 	mov	arg02, local09
045a4     64 48 B1 FD | 	call	#__system___string_cmp
045a8     01 FA 55 F2 | 	cmps	result1, #1 wc
045ac     7C 00 90 CD |  if_b	jmp	#LR__0320
045b0                 | LR__0319
045b0     43 01 00 FF 
045b4     E9 2E 06 F6 | 	mov	local09, ##@LR__4496
045b8     12 13 02 F6 | 	mov	arg01, local04
045bc     17 15 02 F6 | 	mov	arg02, local09
045c0     48 48 B1 FD | 	call	#__system___string_cmp
045c4     00 FA 4D F2 | 	cmps	result1, #0 wz
045c8     60 00 90 AD |  if_e	jmp	#LR__0320
045cc     43 01 00 FF 
045d0     EB 2C 06 F6 | 	mov	local08, ##@LR__4497
045d4     12 13 02 F6 | 	mov	arg01, local04
045d8     16 15 02 F6 | 	mov	arg02, local08
045dc     2C 48 B1 FD | 	call	#__system___string_cmp
045e0     FD 2E 0A F6 | 	mov	local09, result1 wz
045e4     44 00 90 AD |  if_e	jmp	#LR__0320
045e8     43 01 00 FF 
045ec     ED 34 06 F6 | 	mov	local12, ##@LR__4498
045f0     1A 2D 02 F6 | 	mov	local08, local12
045f4     12 13 02 F6 | 	mov	arg01, local04
045f8     16 15 02 F6 | 	mov	arg02, local08
045fc     0C 48 B1 FD | 	call	#__system___string_cmp
04600     FD 2A 0A F6 | 	mov	local07, result1 wz
04604     24 00 90 AD |  if_e	jmp	#LR__0320
04608     43 01 00 FF 
0460c     EF 36 06 F6 | 	mov	local13, ##@LR__4499
04610     1B 35 02 F6 | 	mov	local12, local13
04614     12 13 02 F6 | 	mov	arg01, local04
04618     1A 15 02 F6 | 	mov	arg02, local12
0461c     EC 47 B1 FD | 	call	#__system___string_cmp
04620     FD 2C 0A F6 | 	mov	local08, result1 wz
04624     00 FA 05 56 |  if_ne	mov	result1, #0
04628     0C 00 90 5D |  if_ne	jmp	#LR__0323
0462c                 | LR__0320
0462c     01 26 06 F1 | 	add	local05, #1
04630     44 FE 9F FD | 	jmp	#LR__0314
04634                 | LR__0321
04634                 | LR__0322
04634                 | ' return true
04634     01 FA 65 F6 | 	neg	result1, #1
04638                 | LR__0323
04638     A7 F0 03 F6 | 	mov	ptra, fp
0463c     B2 00 A0 FD | 	call	#popregs_
04640                 | _isname_ret
04640     2D 00 64 FD | 	ret
04644                 | 
04644                 | ' 
04644                 | ' function isnum(s as string) as boolean
04644                 | _isnum
04644     0D 4A 05 F6 | 	mov	COUNT_, #13
04648     A8 00 A0 FD | 	call	#pushregs_
0464c     09 1F 02 F6 | 	mov	local01, arg01
04650     00 20 06 F6 | 	mov	local02, #0
04654     00 22 06 F6 | 	mov	local03, #0
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     09 25 02 F6 | 	mov	local04, arg01
04660     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
04664                 | LR__0330
04664     12 FB C9 FA | 	rdbyte	result1, local04 wz
04668     01 24 06 51 |  if_ne	add	local04, #1
0466c     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
04670                 | LR__0331
04670     09 25 82 F1 | 	sub	local04, arg01
04674     12 FB 01 F6 | 	mov	result1, local04
04678     FD 26 0A F6 | 	mov	local05, result1 wz
0467c     00 FA 05 A6 |  if_e	mov	result1, #0
04680     8C 02 90 AD |  if_e	jmp	#LR__0342
04684     0F 13 02 F6 | 	mov	arg01, local01
04688     01 14 06 F6 | 	mov	arg02, #1
0468c     01 16 06 F6 | 	mov	arg03, #1
04690     78 68 B1 FD | 	call	#__system__Mid_S
04694     FD 28 02 F6 | 	mov	local06, result1
04698                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04698     43 01 00 FF 
0469c     F1 14 06 F6 | 	mov	arg02, ##@LR__4500
046a0     14 13 02 F6 | 	mov	arg01, local06
046a4     64 47 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 55 F2 | 	cmps	result1, #0 wc
046ac     18 00 90 CD |  if_b	jmp	#LR__0332
046b0     43 01 00 FF 
046b4     F3 14 06 F6 | 	mov	arg02, ##@LR__4501
046b8     14 13 02 F6 | 	mov	arg01, local06
046bc     4C 47 B1 FD | 	call	#__system___string_cmp
046c0     01 FA 55 F2 | 	cmps	result1, #1 wc
046c4     78 00 90 CD |  if_b	jmp	#LR__0333
046c8                 | LR__0332
046c8     43 01 00 FF 
046cc     F5 14 06 F6 | 	mov	arg02, ##@LR__4502
046d0     14 13 02 F6 | 	mov	arg01, local06
046d4     34 47 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     60 00 90 AD |  if_e	jmp	#LR__0333
046e0     43 01 00 FF 
046e4     F7 2A 06 F6 | 	mov	local07, ##@LR__4503
046e8     14 13 02 F6 | 	mov	arg01, local06
046ec     15 15 02 F6 | 	mov	arg02, local07
046f0     18 47 B1 FD | 	call	#__system___string_cmp
046f4     00 FA 0D F2 | 	cmp	result1, #0 wz
046f8     44 00 90 AD |  if_e	jmp	#LR__0333
046fc     43 01 00 FF 
04700     F9 2C 06 F6 | 	mov	local08, ##@LR__4504
04704     16 2B 02 F6 | 	mov	local07, local08
04708     14 13 02 F6 | 	mov	arg01, local06
0470c     15 15 02 F6 | 	mov	arg02, local07
04710     F8 46 B1 FD | 	call	#__system___string_cmp
04714     00 FA 4D F2 | 	cmps	result1, #0 wz
04718     24 00 90 AD |  if_e	jmp	#LR__0333
0471c     43 01 00 FF 
04720     FB 2E 06 F6 | 	mov	local09, ##@LR__4505
04724     17 2D 02 F6 | 	mov	local08, local09
04728     14 13 02 F6 | 	mov	arg01, local06
0472c     16 15 02 F6 | 	mov	arg02, local08
04730     D8 46 B1 FD | 	call	#__system___string_cmp
04734     FD 2A 0A F6 | 	mov	local07, result1 wz
04738     00 FA 05 56 |  if_ne	mov	result1, #0
0473c     D0 01 90 5D |  if_ne	jmp	#LR__0342
04740                 | LR__0333
04740                 | ' if m$="." then ds=1
04740     43 01 00 FF 
04744     FD 14 06 F6 | 	mov	arg02, ##@LR__4506
04748     14 13 02 F6 | 	mov	arg01, local06
0474c     BC 46 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     01 20 06 A6 |  if_e	mov	local02, #1
04758                 | ' if l>1 then 
04758     02 26 56 F2 | 	cmps	local05, #2 wc
0475c     AC 01 90 CD |  if_b	jmp	#LR__0341
04760                 | '   for i=2 to l
04760     02 30 06 F6 | 	mov	local10, #2
04764     13 33 02 F6 | 	mov	local11, local05
04768     01 32 06 F1 | 	add	local11, #1
0476c                 | LR__0334
0476c     19 31 52 F2 | 	cmps	local10, local11 wc
04770     98 01 90 3D |  if_ae	jmp	#LR__0340
04774     0F 13 02 F6 | 	mov	arg01, local01
04778     18 15 02 F6 | 	mov	arg02, local10
0477c     01 16 06 F6 | 	mov	arg03, #1
04780     88 67 B1 FD | 	call	#__system__Mid_S
04784     FD 28 02 F6 | 	mov	local06, result1
04788                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04788     43 01 00 FF 
0478c     FF 14 06 F6 | 	mov	arg02, ##@LR__4507
04790     14 13 02 F6 | 	mov	arg01, local06
04794     74 46 B1 FD | 	call	#__system___string_cmp
04798     00 FA 55 F2 | 	cmps	result1, #0 wc
0479c     18 00 90 CD |  if_b	jmp	#LR__0335
047a0     43 01 00 FF 
047a4     01 15 06 F6 | 	mov	arg02, ##@LR__4508
047a8     14 13 02 F6 | 	mov	arg01, local06
047ac     5C 46 B1 FD | 	call	#__system___string_cmp
047b0     01 FA 55 F2 | 	cmps	result1, #1 wc
047b4     98 00 90 CD |  if_b	jmp	#LR__0336
047b8                 | LR__0335
047b8     43 01 00 FF 
047bc     03 15 06 F6 | 	mov	arg02, ##@LR__4509
047c0     14 13 02 F6 | 	mov	arg01, local06
047c4     44 46 B1 FD | 	call	#__system___string_cmp
047c8     00 FA 0D F2 | 	cmp	result1, #0 wz
047cc     80 00 90 AD |  if_e	jmp	#LR__0336
047d0     43 01 00 FF 
047d4     05 2B 06 F6 | 	mov	local07, ##@LR__4510
047d8     14 13 02 F6 | 	mov	arg01, local06
047dc     15 15 02 F6 | 	mov	arg02, local07
047e0     28 46 B1 FD | 	call	#__system___string_cmp
047e4     00 FA 4D F2 | 	cmps	result1, #0 wz
047e8     64 00 90 AD |  if_e	jmp	#LR__0336
047ec     43 01 00 FF 
047f0     07 2D 06 F6 | 	mov	local08, ##@LR__4511
047f4     16 2B 02 F6 | 	mov	local07, local08
047f8     14 13 02 F6 | 	mov	arg01, local06
047fc     15 15 02 F6 | 	mov	arg02, local07
04800     08 46 B1 FD | 	call	#__system___string_cmp
04804     FD 34 0A F6 | 	mov	local12, result1 wz
04808     44 00 90 AD |  if_e	jmp	#LR__0336
0480c     43 01 00 FF 
04810     09 2F 06 F6 | 	mov	local09, ##@LR__4512
04814     17 2D 02 F6 | 	mov	local08, local09
04818     14 13 02 F6 | 	mov	arg01, local06
0481c     16 15 02 F6 | 	mov	arg02, local08
04820     E8 45 B1 FD | 	call	#__system___string_cmp
04824     FD 2A 0A F6 | 	mov	local07, result1 wz
04828     24 00 90 AD |  if_e	jmp	#LR__0336
0482c     43 01 00 FF 
04830     0B 37 06 F6 | 	mov	local13, ##@LR__4513
04834     1B 2F 02 F6 | 	mov	local09, local13
04838     14 13 02 F6 | 	mov	arg01, local06
0483c     17 15 02 F6 | 	mov	arg02, local09
04840     C8 45 B1 FD | 	call	#__system___string_cmp
04844     FD 2C 0A F6 | 	mov	local08, result1 wz
04848     00 FA 05 56 |  if_ne	mov	result1, #0
0484c     C0 00 90 5D |  if_ne	jmp	#LR__0342
04850                 | LR__0336
04850                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04850     43 01 00 FF 
04854     0D 15 06 F6 | 	mov	arg02, ##@LR__4514
04858     14 13 02 F6 | 	mov	arg01, local06
0485c     AC 45 B1 FD | 	call	#__system___string_cmp
04860     00 FA 0D F2 | 	cmp	result1, #0 wz
04864     38 00 90 5D |  if_ne	jmp	#LR__0337
04868     18 15 02 F6 | 	mov	arg02, local10
0486c     01 14 86 F1 | 	sub	arg02, #1
04870     0F 13 02 F6 | 	mov	arg01, local01
04874     01 16 06 F6 | 	mov	arg03, #1
04878     90 66 B1 FD | 	call	#__system__Mid_S
0487c     FD 12 02 F6 | 	mov	arg01, result1
04880     24 68 B1 FD | 	call	#__system__LCase_S
04884     FD 12 02 F6 | 	mov	arg01, result1
04888     43 01 00 FF 
0488c     0F 15 06 F6 | 	mov	arg02, ##@LR__4515
04890     78 45 B1 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     00 FA 05 56 |  if_ne	mov	result1, #0
0489c     70 00 90 5D |  if_ne	jmp	#LR__0342
048a0                 | LR__0337
048a0                 | '     if m$="." then ds+=1: if ds>1 then return false
048a0     43 01 00 FF 
048a4     11 15 06 F6 | 	mov	arg02, ##@LR__4516
048a8     14 13 02 F6 | 	mov	arg01, local06
048ac     5C 45 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     01 20 06 A1 |  if_e	add	local02, #1
048b8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
048bc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
048c0     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0342
048c4                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
048c4     43 01 00 FF 
048c8     13 15 06 F6 | 	mov	arg02, ##@LR__4517
048cc     14 13 02 F6 | 	mov	arg01, local06
048d0     38 45 B1 FD | 	call	#__system___string_cmp
048d4     00 FA 4D F2 | 	cmps	result1, #0 wz
048d8     18 00 90 AD |  if_e	jmp	#LR__0338
048dc     43 01 00 FF 
048e0     15 15 06 F6 | 	mov	arg02, ##@LR__4518
048e4     14 13 02 F6 | 	mov	arg01, local06
048e8     20 45 B1 FD | 	call	#__system___string_cmp
048ec     00 FA 4D F2 | 	cmps	result1, #0 wz
048f0     10 00 90 5D |  if_ne	jmp	#LR__0339
048f4                 | LR__0338
048f4     01 22 06 F1 | 	add	local03, #1
048f8     02 22 56 F2 | 	cmps	local03, #2 wc
048fc     00 FA 05 36 |  if_ae	mov	result1, #0
04900     0C 00 90 3D |  if_ae	jmp	#LR__0342
04904                 | LR__0339
04904     01 30 06 F1 | 	add	local10, #1
04908     60 FE 9F FD | 	jmp	#LR__0334
0490c                 | LR__0340
0490c                 | LR__0341
0490c                 | ' return true
0490c     01 FA 65 F6 | 	neg	result1, #1
04910                 | LR__0342
04910     A7 F0 03 F6 | 	mov	ptra, fp
04914     B2 00 A0 FD | 	call	#popregs_
04918                 | _isnum_ret
04918     2D 00 64 FD | 	ret
0491c                 | 
0491c                 | '   
0491c                 | ' function isint(s as string) as boolean
0491c                 | _isint
0491c     05 4A 05 F6 | 	mov	COUNT_, #5
04920     A8 00 A0 FD | 	call	#pushregs_
04924     09 1F 02 F6 | 	mov	local01, arg01
04928     09 21 02 F6 | 	mov	local02, arg01
0492c     97 06 48 FB | 	callpa	#(@LR__0351-@LR__0350)>>2,fcache_load_ptr_
04930                 | LR__0350
04930     10 FB C9 FA | 	rdbyte	result1, local02 wz
04934     01 20 06 51 |  if_ne	add	local02, #1
04938     F4 FF 9F 5D |  if_ne	jmp	#LR__0350
0493c                 | LR__0351
0493c     09 21 82 F1 | 	sub	local02, arg01
04940     10 FB 01 F6 | 	mov	result1, local02
04944     FD 20 0A F6 | 	mov	local02, result1 wz
04948     00 FA 05 A6 |  if_e	mov	result1, #0
0494c     18 01 90 AD |  if_e	jmp	#LR__0359
04950     0F 13 02 F6 | 	mov	arg01, local01
04954     01 14 06 F6 | 	mov	arg02, #1
04958     01 16 06 F6 | 	mov	arg03, #1
0495c     AC 65 B1 FD | 	call	#__system__Mid_S
04960     FD 22 02 F6 | 	mov	local03, result1
04964                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04964     43 01 00 FF 
04968     17 15 06 F6 | 	mov	arg02, ##@LR__4519
0496c     11 13 02 F6 | 	mov	arg01, local03
04970     98 44 B1 FD | 	call	#__system___string_cmp
04974     00 FA 55 F2 | 	cmps	result1, #0 wc
04978     18 00 90 CD |  if_b	jmp	#LR__0352
0497c     43 01 00 FF 
04980     19 15 06 F6 | 	mov	arg02, ##@LR__4520
04984     11 13 02 F6 | 	mov	arg01, local03
04988     80 44 B1 FD | 	call	#__system___string_cmp
0498c     01 FA 55 F2 | 	cmps	result1, #1 wc
04990     4C 00 90 CD |  if_b	jmp	#LR__0353
04994                 | LR__0352
04994     43 01 00 FF 
04998     1B 15 06 F6 | 	mov	arg02, ##@LR__4521
0499c     11 13 02 F6 | 	mov	arg01, local03
049a0     68 44 B1 FD | 	call	#__system___string_cmp
049a4     00 FA 0D F2 | 	cmp	result1, #0 wz
049a8     34 00 90 AD |  if_e	jmp	#LR__0353
049ac     43 01 00 FF 
049b0     1D 15 06 F6 | 	mov	arg02, ##@LR__4522
049b4     11 13 02 F6 | 	mov	arg01, local03
049b8     50 44 B1 FD | 	call	#__system___string_cmp
049bc     00 FA 0D F2 | 	cmp	result1, #0 wz
049c0     1C 00 90 AD |  if_e	jmp	#LR__0353
049c4     43 01 00 FF 
049c8     1F 15 06 F6 | 	mov	arg02, ##@LR__4523
049cc     11 13 02 F6 | 	mov	arg01, local03
049d0     38 44 B1 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     00 FA 05 56 |  if_ne	mov	result1, #0
049dc     88 00 90 5D |  if_ne	jmp	#LR__0359
049e0                 | LR__0353
049e0                 | ' 
049e0                 | ' if l>1 then 
049e0     02 20 56 F2 | 	cmps	local02, #2 wc
049e4     7C 00 90 CD |  if_b	jmp	#LR__0358
049e8                 | '   for i=2 to l
049e8     02 24 06 F6 | 	mov	local04, #2
049ec     10 27 02 F6 | 	mov	local05, local02
049f0     01 26 06 F1 | 	add	local05, #1
049f4                 | LR__0354
049f4     13 25 52 F2 | 	cmps	local04, local05 wc
049f8     68 00 90 3D |  if_ae	jmp	#LR__0357
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     12 15 02 F6 | 	mov	arg02, local04
04a04     01 16 06 F6 | 	mov	arg03, #1
04a08     00 65 B1 FD | 	call	#__system__Mid_S
04a0c     FD 22 02 F6 | 	mov	local03, result1
04a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04a10     43 01 00 FF 
04a14     21 15 06 F6 | 	mov	arg02, ##@LR__4524
04a18     11 13 02 F6 | 	mov	arg01, local03
04a1c     EC 43 B1 FD | 	call	#__system___string_cmp
04a20     00 FA 55 F2 | 	cmps	result1, #0 wc
04a24     18 00 90 CD |  if_b	jmp	#LR__0355
04a28     43 01 00 FF 
04a2c     23 15 06 F6 | 	mov	arg02, ##@LR__4525
04a30     11 13 02 F6 | 	mov	arg01, local03
04a34     D4 43 B1 FD | 	call	#__system___string_cmp
04a38     01 FA 55 F2 | 	cmps	result1, #1 wc
04a3c     1C 00 90 CD |  if_b	jmp	#LR__0356
04a40                 | LR__0355
04a40     43 01 00 FF 
04a44     25 15 06 F6 | 	mov	arg02, ##@LR__4526
04a48     11 13 02 F6 | 	mov	arg01, local03
04a4c     BC 43 B1 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     00 FA 05 56 |  if_ne	mov	result1, #0
04a58     0C 00 90 5D |  if_ne	jmp	#LR__0359
04a5c                 | LR__0356
04a5c     01 24 06 F1 | 	add	local04, #1
04a60     90 FF 9F FD | 	jmp	#LR__0354
04a64                 | LR__0357
04a64                 | LR__0358
04a64                 | ' return true
04a64     01 FA 65 F6 | 	neg	result1, #1
04a68                 | LR__0359
04a68     A7 F0 03 F6 | 	mov	ptra, fp
04a6c     B2 00 A0 FD | 	call	#popregs_
04a70                 | _isint_ret
04a70     2D 00 64 FD | 	ret
04a74                 | 
04a74                 | ' 
04a74                 | ' function isdec(s as string) as boolean
04a74                 | _isdec
04a74     05 4A 05 F6 | 	mov	COUNT_, #5
04a78     A8 00 A0 FD | 	call	#pushregs_
04a7c     09 1F 02 F6 | 	mov	local01, arg01
04a80     09 21 02 F6 | 	mov	local02, arg01
04a84     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
04a88                 | LR__0360
04a88     10 FB C9 FA | 	rdbyte	result1, local02 wz
04a8c     01 20 06 51 |  if_ne	add	local02, #1
04a90     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
04a94                 | LR__0361
04a94     09 21 82 F1 | 	sub	local02, arg01
04a98     10 FB 01 F6 | 	mov	result1, local02
04a9c     FD 20 0A F6 | 	mov	local02, result1 wz
04aa0     00 FA 05 A6 |  if_e	mov	result1, #0
04aa4     80 00 90 AD |  if_e	jmp	#LR__0366
04aa8                 | ' for i=1 to l
04aa8     01 22 06 F6 | 	mov	local03, #1
04aac     10 25 02 F6 | 	mov	local04, local02
04ab0     01 24 06 F1 | 	add	local04, #1
04ab4                 | LR__0362
04ab4     12 23 52 F2 | 	cmps	local03, local04 wc
04ab8     68 00 90 3D |  if_ae	jmp	#LR__0365
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     11 15 02 F6 | 	mov	arg02, local03
04ac4     01 16 06 F6 | 	mov	arg03, #1
04ac8     40 64 B1 FD | 	call	#__system__Mid_S
04acc     FD 26 02 F6 | 	mov	local05, result1
04ad0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04ad0     43 01 00 FF 
04ad4     27 15 06 F6 | 	mov	arg02, ##@LR__4527
04ad8     13 13 02 F6 | 	mov	arg01, local05
04adc     2C 43 B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ae4     18 00 90 CD |  if_b	jmp	#LR__0363
04ae8     43 01 00 FF 
04aec     29 15 06 F6 | 	mov	arg02, ##@LR__4528
04af0     13 13 02 F6 | 	mov	arg01, local05
04af4     14 43 B1 FD | 	call	#__system___string_cmp
04af8     01 FA 55 F2 | 	cmps	result1, #1 wc
04afc     1C 00 90 CD |  if_b	jmp	#LR__0364
04b00                 | LR__0363
04b00     43 01 00 FF 
04b04     2B 15 06 F6 | 	mov	arg02, ##@LR__4529
04b08     13 13 02 F6 | 	mov	arg01, local05
04b0c     FC 42 B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     00 FA 05 56 |  if_ne	mov	result1, #0
04b18     0C 00 90 5D |  if_ne	jmp	#LR__0366
04b1c                 | LR__0364
04b1c     01 22 06 F1 | 	add	local03, #1
04b20     90 FF 9F FD | 	jmp	#LR__0362
04b24                 | LR__0365
04b24                 | ' return true
04b24     01 FA 65 F6 | 	neg	result1, #1
04b28                 | LR__0366
04b28     A7 F0 03 F6 | 	mov	ptra, fp
04b2c     B2 00 A0 FD | 	call	#popregs_
04b30                 | _isdec_ret
04b30     2D 00 64 FD | 	ret
04b34                 | 
04b34                 | ' 
04b34                 | ' function isstring(s as string) as boolean
04b34                 | _isstring
04b34     01 4A 05 F6 | 	mov	COUNT_, #1
04b38     A8 00 A0 FD | 	call	#pushregs_
04b3c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04b3c     09 1F 02 F6 | 	mov	local01, arg01
04b40     01 14 06 F6 | 	mov	arg02, #1
04b44     AC 62 B1 FD | 	call	#__system__Left_S
04b48     FD 12 02 F6 | 	mov	arg01, result1
04b4c     43 01 00 FF 
04b50     2D 15 06 F6 | 	mov	arg02, ##@LR__4530
04b54     B4 42 B1 FD | 	call	#__system___string_cmp
04b58     00 FA 4D F2 | 	cmps	result1, #0 wz
04b5c     28 00 90 5D |  if_ne	jmp	#LR__0370
04b60     0F 13 02 F6 | 	mov	arg01, local01
04b64     01 14 06 F6 | 	mov	arg02, #1
04b68     10 63 B1 FD | 	call	#__system__Right_S
04b6c     FD 12 02 F6 | 	mov	arg01, result1
04b70     43 01 00 FF 
04b74     2F 15 06 F6 | 	mov	arg02, ##@LR__4531
04b78     90 42 B1 FD | 	call	#__system___string_cmp
04b7c     00 FA 4D F2 | 	cmps	result1, #0 wz
04b80     01 FA 65 A6 |  if_e	neg	result1, #1
04b84     04 00 90 AD |  if_e	jmp	#LR__0371
04b88                 | LR__0370
04b88     00 FA 05 F6 | 	mov	result1, #0
04b8c                 | LR__0371
04b8c     A7 F0 03 F6 | 	mov	ptra, fp
04b90     B2 00 A0 FD | 	call	#popregs_
04b94                 | _isstring_ret
04b94     2D 00 64 FD | 	ret
04b98                 | 
04b98                 | ' 
04b98                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04b98                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04b98                 | ' 
04b98                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04b98                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04b98                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04b98                 | ' 
04b98                 | ' '----- delete a line from a program
04b98                 | ' 
04b98                 | ' function deleteline(aline as ulong) as integer
04b98                 | _deleteline
04b98     03 4A 05 F6 | 	mov	COUNT_, #3
04b9c     A8 00 A0 FD | 	call	#pushregs_
04ba0     2C F0 07 F1 | 	add	ptra, #44
04ba4     04 4E 05 F1 | 	add	fp, #4
04ba8     A7 12 62 FC | 	wrlong	arg01, fp
04bac     69 00 00 FF 
04bb0     58 E5 05 F1 | 	add	objptr, ##54104
04bb4     F2 1E 02 FB | 	rdlong	local01, objptr
04bb8     0C 4E 05 F1 | 	add	fp, #12
04bbc     A7 1E 62 FC | 	wrlong	local01, fp
04bc0     10 4E 85 F1 | 	sub	fp, #16
04bc4                 | ' 
04bc4                 | ' 
04bc4                 | ' searchptr=programstart
04bc4                 | ' 
04bc4                 | ' do
04bc4     5E 00 00 FF 
04bc8     98 E4 85 F1 | 	sub	objptr, ##48280
04bcc                 | LR__0380
04bcc     14 4E 05 F1 | 	add	fp, #20
04bd0     A7 12 02 F6 | 	mov	arg01, fp
04bd4     04 4E 85 F1 | 	sub	fp, #4
04bd8     A7 14 02 FB | 	rdlong	arg02, fp
04bdc     10 4E 85 F1 | 	sub	fp, #16
04be0     18 16 06 F6 | 	mov	arg03, #24
04be4     AC 36 B1 FD | 	call	#_psram_spin2_read1
04be8     10 4E 05 F1 | 	add	fp, #16
04bec     A7 1E 02 FB | 	rdlong	local01, fp
04bf0     08 4E 85 F1 | 	sub	fp, #8
04bf4     A7 1E 62 FC | 	wrlong	local01, fp
04bf8     20 4E 05 F1 | 	add	fp, #32
04bfc     A7 1E 02 FB | 	rdlong	local01, fp
04c00     18 4E 85 F1 | 	sub	fp, #24
04c04     A7 1E 62 FC | 	wrlong	local01, fp
04c08     04 4E 05 F1 | 	add	fp, #4
04c0c     A7 1E 02 FB | 	rdlong	local01, fp
04c10     10 4E 85 F1 | 	sub	fp, #16
04c14     A7 16 02 FB | 	rdlong	arg03, fp
04c18     04 4E 85 F1 | 	sub	fp, #4
04c1c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04c20     28 4E 05 C1 |  if_b	add	fp, #40
04c24     A7 20 02 CB |  if_b	rdlong	local02, fp
04c28     28 4E 85 C1 |  if_b	sub	fp, #40
04c2c     FF FF 3F CF 
04c30     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04c34     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0380
04c38     0B 00 00 FF 
04c3c     C0 E4 85 F1 | 	sub	objptr, ##5824
04c40                 | ' 
04c40                 | ' 
04c40                 | ' if header(0)<>aline then return -1
04c40     14 4E 05 F1 | 	add	fp, #20
04c44     A7 1E 02 FB | 	rdlong	local01, fp
04c48     10 4E 85 F1 | 	sub	fp, #16
04c4c     A7 22 02 FB | 	rdlong	local03, fp
04c50     04 4E 85 F1 | 	sub	fp, #4
04c54     11 1F 0A F2 | 	cmp	local01, local03 wz
04c58     01 FA 65 56 |  if_ne	neg	result1, #1
04c5c     58 03 90 5D |  if_ne	jmp	#LR__0386
04c60     08 4E 05 F1 | 	add	fp, #8
04c64     A7 12 02 FB | 	rdlong	arg01, fp
04c68     08 4E 85 F1 | 	sub	fp, #8
04c6c     01 14 66 F6 | 	neg	arg02, #1
04c70     01 16 06 F6 | 	mov	arg03, #1
04c74     00 18 06 F6 | 	mov	arg04, #0
04c78     0B 00 00 FF 
04c7c     C0 E4 05 F1 | 	add	objptr, ##5824
04c80                 | '     return fill(addr, pattern, count, listPtr, 4)
04c80     04 1A 06 F6 | 	mov	arg05, #4
04c84     44 37 B1 FD | 	call	#_psram_spin2_fill
04c88     0B 00 00 FF 
04c8c     C0 E4 85 F1 | 	sub	objptr, ##5824
04c90                 | ' 
04c90                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04c90                 | ' 
04c90                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
04c90     28 4E 05 F1 | 	add	fp, #40
04c94     A7 1E 02 FB | 	rdlong	local01, fp
04c98     28 4E 85 F1 | 	sub	fp, #40
04c9c     FF FF 3F FF 
04ca0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ca4     24 4E 05 A1 |  if_e	add	fp, #36
04ca8     A7 22 02 AB |  if_e	rdlong	local03, fp
04cac     24 4E 85 A1 |  if_e	sub	fp, #36
04cb0     FF FF 7F AF 
04cb4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04cb8     9C 00 90 5D |  if_ne	jmp	#LR__0381
04cbc     69 00 00 FF 
04cc0     58 E5 05 F1 | 	add	objptr, ##54104
04cc4     F2 00 68 FC | 	wrlong	#0, objptr
04cc8     07 00 00 FF 
04ccc     28 E4 85 F1 | 	sub	objptr, ##3624
04cd0     F2 00 68 FC | 	wrlong	#0, objptr
04cd4     07 00 00 FF 
04cd8     2C E4 05 F1 | 	add	objptr, ##3628
04cdc     F2 00 68 FC | 	wrlong	#0, objptr
04ce0     04 E4 05 F1 | 	add	objptr, #4
04ce4     FF FF FF FF 
04ce8     F2 FE 6B FC | 	wrlong	##-1, objptr
04cec     00 12 06 F6 | 	mov	arg01, #0
04cf0     01 14 66 F6 | 	neg	arg02, #1
04cf4     01 16 06 F6 | 	mov	arg03, #1
04cf8     00 18 06 F6 | 	mov	arg04, #0
04cfc     5E 00 00 FF 
04d00     A0 E4 85 F1 | 	sub	objptr, ##48288
04d04                 | '     return fill(addr, pattern, count, listPtr, 4)
04d04     04 1A 06 F6 | 	mov	arg05, #4
04d08     C0 36 B1 FD | 	call	#_psram_spin2_fill
04d0c     10 12 06 F6 | 	mov	arg01, #16
04d10     01 14 66 F6 | 	neg	arg02, #1
04d14     01 16 06 F6 | 	mov	arg03, #1
04d18     00 18 06 F6 | 	mov	arg04, #0
04d1c                 | '     return fill(addr, pattern, count, listPtr, 4)
04d1c     04 1A 06 F6 | 	mov	arg05, #4
04d20     A8 36 B1 FD | 	call	#_psram_spin2_fill
04d24     14 12 06 F6 | 	mov	arg01, #20
04d28     1E 14 CE F9 | 	bmask	arg02, #30
04d2c     01 16 06 F6 | 	mov	arg03, #1
04d30     00 18 06 F6 | 	mov	arg04, #0
04d34                 | '     return fill(addr, pattern, count, listPtr, 4)
04d34     04 1A 06 F6 | 	mov	arg05, #4
04d38     90 36 B1 FD | 	call	#_psram_spin2_fill
04d3c     6D 00 00 FF 
04d40     C4 E5 05 F1 | 	add	objptr, ##56260
04d44     F2 00 68 FC | 	wrlong	#0, objptr
04d48     04 E4 05 F1 | 	add	objptr, #4
04d4c     F2 00 68 FC | 	wrlong	#0, objptr
04d50     79 00 00 FF 
04d54     88 E4 85 F1 | 	sub	objptr, ##62088
04d58                 | LR__0381
04d58                 | ' 
04d58                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04d58     28 4E 05 F1 | 	add	fp, #40
04d5c     A7 1E 02 FB | 	rdlong	local01, fp
04d60     28 4E 85 F1 | 	sub	fp, #40
04d64     FF FF 3F FF 
04d68     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04d6c     88 00 90 5D |  if_ne	jmp	#LR__0382
04d70     24 4E 05 F1 | 	add	fp, #36
04d74     A7 22 02 FB | 	rdlong	local03, fp
04d78     24 4E 85 F1 | 	sub	fp, #36
04d7c     FF FF 7F FF 
04d80     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04d84     70 00 90 AD |  if_e	jmp	#LR__0382
04d88     24 4E 05 F1 | 	add	fp, #36
04d8c     A7 12 02 FB | 	rdlong	arg01, fp
04d90     24 4E 85 F1 | 	sub	fp, #36
04d94     14 12 06 F1 | 	add	arg01, #20
04d98     1E 14 CE F9 | 	bmask	arg02, #30
04d9c     01 16 06 F6 | 	mov	arg03, #1
04da0     00 18 06 F6 | 	mov	arg04, #0
04da4     0B 00 00 FF 
04da8     C0 E4 05 F1 | 	add	objptr, ##5824
04dac                 | '     return fill(addr, pattern, count, listPtr, 4)
04dac     04 1A 06 F6 | 	mov	arg05, #4
04db0     18 36 B1 FD | 	call	#_psram_spin2_fill
04db4     24 4E 05 F1 | 	add	fp, #36
04db8     A7 1E 02 FB | 	rdlong	local01, fp
04dbc     5E 00 00 FF 
04dc0     A0 E4 05 F1 | 	add	objptr, ##48288
04dc4     F2 1E 62 FC | 	wrlong	local01, objptr
04dc8     69 00 00 FF 
04dcc     60 E5 85 F1 | 	sub	objptr, ##54112
04dd0     A7 12 02 FB | 	rdlong	arg01, fp
04dd4     24 4E 85 F1 | 	sub	fp, #36
04dd8     40 0C B1 FD | 	call	#_pslpeek
04ddc     69 00 00 FF 
04de0     5C E5 05 F1 | 	add	objptr, ##54108
04de4     F2 FA 61 FC | 	wrlong	result1, objptr
04de8     69 00 00 FF 
04dec     5C E5 85 F1 | 	sub	objptr, ##54108
04df0                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04df0                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04df0                 | '   lastline=pslpeek(header(4))
04df0                 | '   return 0
04df0     00 FA 05 F6 | 	mov	result1, #0
04df4     C0 01 90 FD | 	jmp	#LR__0386
04df8                 | LR__0382
04df8                 | ' 
04df8                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04df8     28 4E 05 F1 | 	add	fp, #40
04dfc     A7 1E 02 FB | 	rdlong	local01, fp
04e00     28 4E 85 F1 | 	sub	fp, #40
04e04     FF FF 3F FF 
04e08     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e0c     6C 00 90 AD |  if_e	jmp	#LR__0383
04e10     24 4E 05 F1 | 	add	fp, #36
04e14     A7 22 02 FB | 	rdlong	local03, fp
04e18     24 4E 85 F1 | 	sub	fp, #36
04e1c     FF FF 7F FF 
04e20     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04e24     54 00 90 5D |  if_ne	jmp	#LR__0383
04e28     28 4E 05 F1 | 	add	fp, #40
04e2c     A7 12 02 FB | 	rdlong	arg01, fp
04e30     28 4E 85 F1 | 	sub	fp, #40
04e34     10 12 06 F1 | 	add	arg01, #16
04e38     01 14 66 F6 | 	neg	arg02, #1
04e3c     01 16 06 F6 | 	mov	arg03, #1
04e40     00 18 06 F6 | 	mov	arg04, #0
04e44     0B 00 00 FF 
04e48     C0 E4 05 F1 | 	add	objptr, ##5824
04e4c                 | '     return fill(addr, pattern, count, listPtr, 4)
04e4c     04 1A 06 F6 | 	mov	arg05, #4
04e50     78 35 B1 FD | 	call	#_psram_spin2_fill
04e54     28 4E 05 F1 | 	add	fp, #40
04e58     A7 1E 02 FB | 	rdlong	local01, fp
04e5c     28 4E 85 F1 | 	sub	fp, #40
04e60     5E 00 00 FF 
04e64     98 E4 05 F1 | 	add	objptr, ##48280
04e68     F2 1E 62 FC | 	wrlong	local01, objptr
04e6c     69 00 00 FF 
04e70     58 E5 85 F1 | 	sub	objptr, ##54104
04e74                 | ' '   print "deleted first line"
04e74                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04e74                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04e74                 | '   return 0
04e74     00 FA 05 F6 | 	mov	result1, #0
04e78     3C 01 90 FD | 	jmp	#LR__0386
04e7c                 | LR__0383
04e7c                 | ' 
04e7c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04e7c     28 4E 05 F1 | 	add	fp, #40
04e80     A7 1E 02 FB | 	rdlong	local01, fp
04e84     28 4E 85 F1 | 	sub	fp, #40
04e88     FF FF 3F FF 
04e8c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e90     24 4E 05 51 |  if_ne	add	fp, #36
04e94     A7 22 02 5B |  if_ne	rdlong	local03, fp
04e98     24 4E 85 51 |  if_ne	sub	fp, #36
04e9c     FF FF 7F 5F 
04ea0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04ea4     68 00 90 AD |  if_e	jmp	#LR__0384
04ea8     28 4E 05 F1 | 	add	fp, #40
04eac     A7 12 02 FB | 	rdlong	arg01, fp
04eb0     10 12 06 F1 | 	add	arg01, #16
04eb4     04 4E 85 F1 | 	sub	fp, #4
04eb8     A7 14 02 FB | 	rdlong	arg02, fp
04ebc     24 4E 85 F1 | 	sub	fp, #36
04ec0     01 16 06 F6 | 	mov	arg03, #1
04ec4     00 18 06 F6 | 	mov	arg04, #0
04ec8     0B 00 00 FF 
04ecc     C0 E4 05 F1 | 	add	objptr, ##5824
04ed0                 | '     return fill(addr, pattern, count, listPtr, 4)
04ed0     04 1A 06 F6 | 	mov	arg05, #4
04ed4     F4 34 B1 FD | 	call	#_psram_spin2_fill
04ed8     24 4E 05 F1 | 	add	fp, #36
04edc     A7 12 02 FB | 	rdlong	arg01, fp
04ee0     14 12 06 F1 | 	add	arg01, #20
04ee4     04 4E 05 F1 | 	add	fp, #4
04ee8     A7 14 02 FB | 	rdlong	arg02, fp
04eec     28 4E 85 F1 | 	sub	fp, #40
04ef0     01 16 06 F6 | 	mov	arg03, #1
04ef4     00 18 06 F6 | 	mov	arg04, #0
04ef8                 | '     return fill(addr, pattern, count, listPtr, 4)
04ef8     04 1A 06 F6 | 	mov	arg05, #4
04efc     CC 34 B1 FD | 	call	#_psram_spin2_fill
04f00     0B 00 00 FF 
04f04     C0 E4 85 F1 | 	sub	objptr, ##5824
04f08                 | '    pslpoke(header(5)+16,header(4))  
04f08                 | '    pslpoke(header(4)+20, header(5))
04f08                 | '    return 0
04f08     00 FA 05 F6 | 	mov	result1, #0
04f0c     A8 00 90 FD | 	jmp	#LR__0386
04f10                 | LR__0384
04f10     10 4E 05 F1 | 	add	fp, #16
04f14     A7 1E 02 FB | 	rdlong	local01, fp
04f18     08 4E 85 F1 | 	sub	fp, #8
04f1c     A7 1E 62 FC | 	wrlong	local01, fp
04f20     69 00 00 FF 
04f24     58 E5 05 F1 | 	add	objptr, ##54104
04f28     F2 1E 02 FB | 	rdlong	local01, objptr
04f2c     08 4E 05 F1 | 	add	fp, #8
04f30     A7 1E 62 FC | 	wrlong	local01, fp
04f34     10 4E 85 F1 | 	sub	fp, #16
04f38                 | ' 
04f38                 | ' 
04f38                 | ' 
04f38                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04f38                 | ' 
04f38                 | ' lineptr2=searchptr
04f38                 | ' searchptr=programstart
04f38                 | ' 
04f38                 | ' do
04f38     5E 00 00 FF 
04f3c     98 E4 85 F1 | 	sub	objptr, ##48280
04f40                 | LR__0385
04f40     14 4E 05 F1 | 	add	fp, #20
04f44     A7 12 02 F6 | 	mov	arg01, fp
04f48     04 4E 85 F1 | 	sub	fp, #4
04f4c     A7 14 02 FB | 	rdlong	arg02, fp
04f50     10 4E 85 F1 | 	sub	fp, #16
04f54     18 16 06 F6 | 	mov	arg03, #24
04f58     38 33 B1 FD | 	call	#_psram_spin2_read1
04f5c     10 4E 05 F1 | 	add	fp, #16
04f60     A7 1E 02 FB | 	rdlong	local01, fp
04f64     08 4E 85 F1 | 	sub	fp, #8
04f68     A7 1E 62 FC | 	wrlong	local01, fp
04f6c     20 4E 05 F1 | 	add	fp, #32
04f70     A7 1E 02 FB | 	rdlong	local01, fp
04f74     18 4E 85 F1 | 	sub	fp, #24
04f78     A7 1E 62 FC | 	wrlong	local01, fp
04f7c     04 4E 05 F1 | 	add	fp, #4
04f80     A7 1E 02 FB | 	rdlong	local01, fp
04f84     10 4E 85 F1 | 	sub	fp, #16
04f88     A7 22 02 FB | 	rdlong	local03, fp
04f8c     04 4E 85 F1 | 	sub	fp, #4
04f90     11 1F 12 F2 | 	cmp	local01, local03 wc
04f94     28 4E 05 C1 |  if_b	add	fp, #40
04f98     A7 20 02 CB |  if_b	rdlong	local02, fp
04f9c     28 4E 85 C1 |  if_b	sub	fp, #40
04fa0     FF FF 3F CF 
04fa4     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04fa8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0385
04fac     0B 00 00 FF 
04fb0     C0 E4 85 F1 | 	sub	objptr, ##5824
04fb4     00 FA 05 F6 | 	mov	result1, #0
04fb8                 | LR__0386
04fb8     A7 F0 03 F6 | 	mov	ptra, fp
04fbc     B2 00 A0 FD | 	call	#popregs_
04fc0                 | _deleteline_ret
04fc0     2D 00 64 FD | 	ret
04fc4                 | 
04fc4                 | ' 
04fc4                 | ' sub save_line
04fc4                 | _save_line
04fc4     03 4A 05 F6 | 	mov	COUNT_, #3
04fc8     A8 00 A0 FD | 	call	#pushregs_
04fcc     69 00 00 FF 
04fd0     50 E5 05 F1 | 	add	objptr, ##54096
04fd4     F2 16 02 FB | 	rdlong	arg03, objptr
04fd8     01 16 06 F1 | 	add	arg03, #1
04fdc     05 00 00 FF 
04fe0     18 E4 85 F1 | 	sub	objptr, ##2584
04fe4     F2 14 02 FB | 	rdlong	arg02, objptr
04fe8     0B 15 02 FD | 	qmul	arg02, arg03
04fec     0E 00 00 FF 
04ff0     44 E4 85 F1 | 	sub	objptr, ##7236
04ff4     F2 12 02 FB | 	rdlong	arg01, objptr
04ff8     56 00 00 FF 
04ffc     F4 E4 85 F1 | 	sub	objptr, ##44276
05000     09 1F 02 F6 | 	mov	local01, arg01
05004     18 20 62 FD | 	getqx	local02
05008     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
0500c                 | LR__0390
0500c     0F FB C9 FA | 	rdbyte	result1, local01 wz
05010     01 1E 06 51 |  if_ne	add	local01, #1
05014     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
05018                 | LR__0391
05018     09 1F 82 F1 | 	sub	local01, arg01
0501c     03 1E CE F7 | 	test	local01, #3 wz
05020     02 1E 46 50 |  if_ne	shr	local01, #2
05024     01 1E 06 51 |  if_ne	add	local01, #1
05028     02 1E 66 50 |  if_ne	shl	local01, #2
0502c     10 23 02 F6 | 	mov	local03, local02
05030     0F 23 02 F1 | 	add	local03, local01
05034     62 00 00 FF 
05038     30 E5 05 F1 | 	add	objptr, ##50480
0503c     F2 16 02 FB | 	rdlong	arg03, objptr
05040     10 17 02 F1 | 	add	arg03, local02
05044     04 00 00 FF 
05048     28 E4 05 F1 | 	add	objptr, ##2088
0504c     F2 16 62 FC | 	wrlong	arg03, objptr
05050     04 E4 05 F1 | 	add	objptr, #4
05054     F2 1E 62 FC | 	wrlong	local01, objptr
05058     0C E4 85 F1 | 	sub	objptr, #12
0505c     F2 12 02 F6 | 	mov	arg01, objptr
05060     04 00 00 FF 
05064     20 E4 85 F1 | 	sub	objptr, ##2080
05068     F2 14 02 FB | 	rdlong	arg02, objptr
0506c     10 17 02 F6 | 	mov	arg03, local02
05070     57 00 00 FF 
05074     70 E4 85 F1 | 	sub	objptr, ##44656
05078     B4 32 B1 FD | 	call	#_psram_spin2_write
0507c     4B 00 00 FF 
05080     34 E4 05 F1 | 	add	objptr, ##38452
05084     F2 12 02 FB | 	rdlong	arg01, objptr
05088     0C 00 00 FF 
0508c     3C E4 05 F1 | 	add	objptr, ##6204
05090     F2 14 02 FB | 	rdlong	arg02, objptr
05094     10 15 02 F1 | 	add	arg02, local02
05098     0F 17 02 F6 | 	mov	arg03, local01
0509c     57 00 00 FF 
050a0     70 E4 85 F1 | 	sub	objptr, ##44656
050a4     88 32 B1 FD | 	call	#_psram_spin2_write
050a8     57 00 00 FF 
050ac     70 E4 05 F1 | 	add	objptr, ##44656
050b0     F2 1E 02 FB | 	rdlong	local01, objptr
050b4     11 1F 02 F1 | 	add	local01, local03
050b8     F2 1E 62 FC | 	wrlong	local01, objptr
050bc     62 00 00 FF 
050c0     30 E5 85 F1 | 	sub	objptr, ##50480
050c4     A7 F0 03 F6 | 	mov	ptra, fp
050c8     B2 00 A0 FD | 	call	#popregs_
050cc                 | _save_line_ret
050cc     2D 00 64 FD | 	ret
050d0                 | 
050d0                 | ' 
050d0                 | ' 
050d0                 | ' function insertline(aline as ulong) as integer
050d0                 | _insertline
050d0     02 4A 05 F6 | 	mov	COUNT_, #2
050d4     A8 00 A0 FD | 	call	#pushregs_
050d8     28 F0 07 F1 | 	add	ptra, #40
050dc     04 4E 05 F1 | 	add	fp, #4
050e0     A7 12 62 FC | 	wrlong	arg01, fp
050e4     69 00 00 FF 
050e8     58 E5 05 F1 | 	add	objptr, ##54104
050ec     F2 1E 02 FB | 	rdlong	local01, objptr
050f0     04 4E 05 F1 | 	add	fp, #4
050f4     A7 1E 62 FC | 	wrlong	local01, fp
050f8     08 4E 85 F1 | 	sub	fp, #8
050fc                 | ' 
050fc                 | ' do
050fc     5E 00 00 FF 
05100     98 E4 85 F1 | 	sub	objptr, ##48280
05104                 | LR__0400
05104     10 4E 05 F1 | 	add	fp, #16
05108     A7 12 02 F6 | 	mov	arg01, fp
0510c     08 4E 85 F1 | 	sub	fp, #8
05110     A7 14 02 FB | 	rdlong	arg02, fp
05114     08 4E 85 F1 | 	sub	fp, #8
05118     18 16 06 F6 | 	mov	arg03, #24
0511c     74 31 B1 FD | 	call	#_psram_spin2_read1
05120     08 4E 05 F1 | 	add	fp, #8
05124     A7 1E 02 FB | 	rdlong	local01, fp
05128     04 4E 05 F1 | 	add	fp, #4
0512c     A7 1E 62 FC | 	wrlong	local01, fp
05130     18 4E 05 F1 | 	add	fp, #24
05134     A7 1E 02 FB | 	rdlong	local01, fp
05138     1C 4E 85 F1 | 	sub	fp, #28
0513c     A7 1E 62 FC | 	wrlong	local01, fp
05140     08 4E 05 F1 | 	add	fp, #8
05144     A7 1E 02 FB | 	rdlong	local01, fp
05148     0C 4E 85 F1 | 	sub	fp, #12
0514c     A7 16 02 FB | 	rdlong	arg03, fp
05150     04 4E 85 F1 | 	sub	fp, #4
05154     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05158     24 4E 05 C1 |  if_b	add	fp, #36
0515c     A7 20 02 CB |  if_b	rdlong	local02, fp
05160     24 4E 85 C1 |  if_b	sub	fp, #36
05164     FF FF 3F CF 
05168     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0516c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0400
05170     0B 00 00 FF 
05174     C0 E4 85 F1 | 	sub	objptr, ##5824
05178                 | ' 
05178                 | ' if header(0)=aline then return -1 ' delete it first
05178     10 4E 05 F1 | 	add	fp, #16
0517c     A7 1E 02 FB | 	rdlong	local01, fp
05180     0C 4E 85 F1 | 	sub	fp, #12
05184     A7 20 02 FB | 	rdlong	local02, fp
05188     04 4E 85 F1 | 	sub	fp, #4
0518c     10 1F 0A F2 | 	cmp	local01, local02 wz
05190     01 FA 65 A6 |  if_e	neg	result1, #1
05194     74 01 90 AD |  if_e	jmp	#LR__0403
05198                 | ' if header(0)<aline then return -2 ' end of program reached
05198     10 4E 05 F1 | 	add	fp, #16
0519c     A7 1E 02 FB | 	rdlong	local01, fp
051a0     0C 4E 85 F1 | 	sub	fp, #12
051a4     A7 16 02 FB | 	rdlong	arg03, fp
051a8     04 4E 85 F1 | 	sub	fp, #4
051ac     0B 1F 12 F2 | 	cmp	local01, arg03 wc
051b0     02 FA 65 C6 |  if_b	neg	result1, #2
051b4     54 01 90 CD |  if_b	jmp	#LR__0403
051b8                 | ' 
051b8                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
051b8     20 4E 05 F1 | 	add	fp, #32
051bc     A7 1E 02 FB | 	rdlong	local01, fp
051c0     20 4E 85 F1 | 	sub	fp, #32
051c4     FF FF 7F FF 
051c8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
051cc     84 00 90 5D |  if_ne	jmp	#LR__0401
051d0     62 00 00 FF 
051d4     30 E5 05 F1 | 	add	objptr, ##50480
051d8     F2 1E 02 FB | 	rdlong	local01, objptr
051dc     07 00 00 FF 
051e0     28 E4 05 F1 | 	add	objptr, ##3624
051e4     F2 1E 62 FC | 	wrlong	local01, objptr
051e8     0C 4E 05 F1 | 	add	fp, #12
051ec     A7 12 02 FB | 	rdlong	arg01, fp
051f0     0C 4E 85 F1 | 	sub	fp, #12
051f4     10 12 06 F1 | 	add	arg01, #16
051f8     07 00 00 FF 
051fc     28 E4 85 F1 | 	sub	objptr, ##3624
05200     F2 14 02 FB | 	rdlong	arg02, objptr
05204     01 16 06 F6 | 	mov	arg03, #1
05208     00 18 06 F6 | 	mov	arg04, #0
0520c     57 00 00 FF 
05210     70 E4 85 F1 | 	sub	objptr, ##44656
05214                 | '     return fill(addr, pattern, count, listPtr, 4)
05214     04 1A 06 F6 | 	mov	arg05, #4
05218     B0 31 B1 FD | 	call	#_psram_spin2_fill
0521c     5B 00 00 FF 
05220     A0 E4 05 F1 | 	add	objptr, ##46752
05224     FF FF FF FF 
05228     F2 FE 6B FC | 	wrlong	##-1, objptr
0522c     0C 4E 05 F1 | 	add	fp, #12
05230     A7 1E 02 FB | 	rdlong	local01, fp
05234     0C 4E 85 F1 | 	sub	fp, #12
05238     04 E4 05 F1 | 	add	objptr, #4
0523c     F2 1E 62 FC | 	wrlong	local01, objptr
05240     66 00 00 FF 
05244     64 E5 85 F1 | 	sub	objptr, ##52580
05248     78 FD BF FD | 	call	#_save_line
0524c                 | '   programstart=programptr
0524c                 | '   pslpoke(lineptr2+16,programptr)
0524c                 | '   ucompiledline(4)=$FFFF_FFFF
0524c                 | '   ucompiledline(5)=lineptr2
0524c                 | '   save_line
0524c                 | '   return 0
0524c     00 FA 05 F6 | 	mov	result1, #0
05250     B8 00 90 FD | 	jmp	#LR__0403
05254                 | LR__0401
05254                 | ' 
05254                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05254     20 4E 05 F1 | 	add	fp, #32
05258     A7 1E 02 FB | 	rdlong	local01, fp
0525c     20 4E 85 F1 | 	sub	fp, #32
05260     FF FF 7F FF 
05264     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05268     9C 00 90 AD |  if_e	jmp	#LR__0402
0526c     20 4E 05 F1 | 	add	fp, #32
05270     A7 1E 02 FB | 	rdlong	local01, fp
05274     66 00 00 FF 
05278     60 E5 05 F1 | 	add	objptr, ##52576
0527c     F2 1E 62 FC | 	wrlong	local01, objptr
05280     14 4E 85 F1 | 	sub	fp, #20
05284     A7 1E 02 FB | 	rdlong	local01, fp
05288     04 E4 05 F1 | 	add	objptr, #4
0528c     F2 1E 62 FC | 	wrlong	local01, objptr
05290     A7 12 02 FB | 	rdlong	arg01, fp
05294     0C 4E 85 F1 | 	sub	fp, #12
05298     10 12 06 F1 | 	add	arg01, #16
0529c     04 00 00 FF 
052a0     34 E4 85 F1 | 	sub	objptr, ##2100
052a4     F2 14 02 FB | 	rdlong	arg02, objptr
052a8     01 16 06 F6 | 	mov	arg03, #1
052ac     00 18 06 F6 | 	mov	arg04, #0
052b0     57 00 00 FF 
052b4     70 E4 85 F1 | 	sub	objptr, ##44656
052b8                 | '     return fill(addr, pattern, count, listPtr, 4)
052b8     04 1A 06 F6 | 	mov	arg05, #4
052bc     0C 31 B1 FD | 	call	#_psram_spin2_fill
052c0     20 4E 05 F1 | 	add	fp, #32
052c4     A7 12 02 FB | 	rdlong	arg01, fp
052c8     20 4E 85 F1 | 	sub	fp, #32
052cc     14 12 06 F1 | 	add	arg01, #20
052d0     57 00 00 FF 
052d4     70 E4 05 F1 | 	add	objptr, ##44656
052d8     F2 14 02 FB | 	rdlong	arg02, objptr
052dc     01 16 06 F6 | 	mov	arg03, #1
052e0     00 18 06 F6 | 	mov	arg04, #0
052e4     57 00 00 FF 
052e8     70 E4 85 F1 | 	sub	objptr, ##44656
052ec                 | '     return fill(addr, pattern, count, listPtr, 4)
052ec     04 1A 06 F6 | 	mov	arg05, #4
052f0     D8 30 B1 FD | 	call	#_psram_spin2_fill
052f4     0B 00 00 FF 
052f8     C0 E4 85 F1 | 	sub	objptr, ##5824
052fc     C4 FC BF FD | 	call	#_save_line
05300                 | '   ucompiledline(4)=header(4)
05300                 | '   ucompiledline(5)=lineptr2
05300                 | '   pslpoke(lineptr2+16,programptr)
05300                 | '   pslpoke(header(4)+20,programptr)
05300                 | '   save_line
05300                 | '   return 0
05300     00 FA 05 F6 | 	mov	result1, #0
05304     04 00 90 FD | 	jmp	#LR__0403
05308                 | LR__0402
05308     00 FA 05 F6 | 	mov	result1, #0
0530c                 | LR__0403
0530c     A7 F0 03 F6 | 	mov	ptra, fp
05310     B2 00 A0 FD | 	call	#popregs_
05314                 | _insertline_ret
05314     2D 00 64 FD | 	ret
05318                 | 
05318                 | ' 
05318                 | ' sub add_line_at_end(aline) 
05318                 | _add_line_at_end
05318     69 00 00 FF 
0531c     5C E5 05 F1 | 	add	objptr, ##54108
05320     F2 12 62 FC | 	wrlong	arg01, objptr
05324     04 E4 05 F1 | 	add	objptr, #4
05328     F2 14 02 FB | 	rdlong	arg02, objptr
0532c     03 00 00 FF 
05330     00 E4 85 F1 | 	sub	objptr, ##1536
05334     F2 14 62 FC | 	wrlong	arg02, objptr
05338     03 00 00 FF 
0533c     00 E4 05 F1 | 	add	objptr, ##1536
05340     F2 12 02 FB | 	rdlong	arg01, objptr
05344     14 12 06 F1 | 	add	arg01, #20
05348     07 00 00 FF 
0534c     30 E4 85 F1 | 	sub	objptr, ##3632
05350     F2 14 02 FB | 	rdlong	arg02, objptr
05354     01 16 06 F6 | 	mov	arg03, #1
05358     00 18 06 F6 | 	mov	arg04, #0
0535c     57 00 00 FF 
05360     70 E4 85 F1 | 	sub	objptr, ##44656
05364                 | '     return fill(addr, pattern, count, listPtr, 4)
05364     04 1A 06 F6 | 	mov	arg05, #4
05368     60 30 B1 FD | 	call	#_psram_spin2_fill
0536c     57 00 00 FF 
05370     70 E4 05 F1 | 	add	objptr, ##44656
05374     F2 14 02 FB | 	rdlong	arg02, objptr
05378     07 00 00 FF 
0537c     30 E4 05 F1 | 	add	objptr, ##3632
05380     F2 14 62 FC | 	wrlong	arg02, objptr
05384     02 00 00 FF 
05388     FC E5 85 F1 | 	sub	objptr, ##1532
0538c     FF FF BF FF 
05390     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05394                 | ' 
05394                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05394                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05394     04 00 00 FF 
05398     34 E4 85 F1 | 	sub	objptr, ##2100
0539c     F2 14 0A FB | 	rdlong	arg02, objptr wz
053a0     62 00 00 FF 
053a4     30 E5 85 F1 | 	sub	objptr, ##50480
053a8     66 00 00 AF 
053ac     60 E5 05 A1 |  if_e	add	objptr, ##52576
053b0     FF FF FF AF 
053b4     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
053b8     66 00 00 AF 
053bc     60 E5 85 A1 |  if_e	sub	objptr, ##52576
053c0     00 FC BF FD | 	call	#_save_line
053c4     62 00 00 FF 
053c8     30 E5 05 F1 | 	add	objptr, ##50480
053cc     F2 12 02 FB | 	rdlong	arg01, objptr
053d0     01 14 66 F6 | 	neg	arg02, #1
053d4     01 16 06 F6 | 	mov	arg03, #1
053d8     00 18 06 F6 | 	mov	arg04, #0
053dc     57 00 00 FF 
053e0     70 E4 85 F1 | 	sub	objptr, ##44656
053e4                 | '     return fill(addr, pattern, count, listPtr, 4)
053e4     04 1A 06 F6 | 	mov	arg05, #4
053e8     E0 2F B1 FD | 	call	#_psram_spin2_fill
053ec     0B 00 00 FF 
053f0     C0 E4 85 F1 | 	sub	objptr, ##5824
053f4                 | _add_line_at_end_ret
053f4     2D 00 64 FD | 	ret
053f8                 | 
053f8                 | ' 
053f8                 | ' function compile_immediate(linetype as ulong) as integer
053f8                 | _compile_immediate
053f8     09 4A 05 F6 | 	mov	COUNT_, #9
053fc     A8 00 A0 FD | 	call	#pushregs_
05400                 | _compile_immediate_enter
05400     09 25 0A F6 | 	mov	local04, arg01 wz
05404     00 26 06 F6 | 	mov	local05, #0
05408     00 28 06 F6 | 	mov	local06, #0
0540c                 | ' 
0540c                 | ' ' linetype=cont+1, linetype=0 immediate
0540c                 | ' '  : 1: this is the first part of the line that will continue
0540c                 | ' ' 2 - this is the continuation of the line
0540c                 | ' ' 3 - this is the last continued line
0540c                 | ' ' 4 - this is the one and only part
0540c                 | ' 
0540c                 | ' err=0
0540c                 | ' cmd=0
0540c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
0540c     2C 00 90 5D |  if_ne	jmp	#LR__0410
05410     54 00 00 FF 
05414     E4 E4 05 F1 | 	add	objptr, ##43236
05418     F2 28 02 FB | 	rdlong	local06, objptr
0541c     02 00 00 FF 
05420     34 E4 05 F1 | 	add	objptr, ##1076
05424     F2 02 68 FC | 	wrlong	#1, objptr
05428     13 00 00 FF 
0542c     38 E4 05 F1 | 	add	objptr, ##9784
05430     F2 00 68 FC | 	wrlong	#0, objptr
05434     69 00 00 FF 
05438     50 E5 85 F1 | 	sub	objptr, ##54096
0543c                 | LR__0410
0543c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
0543c     02 24 0E F2 | 	cmp	local04, #2 wz
05440     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05444     54 00 00 AF 
05448     E4 E4 05 A1 |  if_e	add	objptr, ##43236
0544c     F2 28 02 AB |  if_e	rdlong	local06, objptr
05450     02 00 00 AF 
05454     34 E4 05 A1 |  if_e	add	objptr, ##1076
05458     F2 02 68 AC |  if_e	wrlong	#1, objptr
0545c     56 00 00 AF 
05460     18 E5 85 A1 |  if_e	sub	objptr, ##44312
05464                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05464     04 24 0E F2 | 	cmp	local04, #4 wz
05468     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
0546c     2C 00 90 5D |  if_ne	jmp	#LR__0411
05470     54 00 00 FF 
05474     EC E4 05 F1 | 	add	objptr, ##43244
05478     F2 28 02 FB | 	rdlong	local06, objptr
0547c     02 00 00 FF 
05480     2C E4 05 F1 | 	add	objptr, ##1068
05484     F2 04 68 FC | 	wrlong	#2, objptr
05488     13 00 00 FF 
0548c     38 E4 05 F1 | 	add	objptr, ##9784
05490     F2 04 68 FC | 	wrlong	#2, objptr
05494     69 00 00 FF 
05498     50 E5 85 F1 | 	sub	objptr, ##54096
0549c                 | LR__0411
0549c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
0549c     05 24 0E F2 | 	cmp	local04, #5 wz
054a0     40 00 90 5D |  if_ne	jmp	#LR__0412
054a4     56 00 00 FF 
054a8     18 E5 05 F1 | 	add	objptr, ##44312
054ac     F2 2A 02 FB | 	rdlong	local07, objptr
054b0     15 29 02 F6 | 	mov	local06, local07
054b4     03 28 66 F0 | 	shl	local06, #3
054b8     02 00 00 FF 
054bc     38 E4 85 F1 | 	sub	objptr, ##1080
054c0     F2 28 02 F1 | 	add	local06, objptr
054c4     04 28 06 F1 | 	add	local06, #4
054c8     14 29 02 FB | 	rdlong	local06, local06
054cc     01 2A 06 F1 | 	add	local07, #1
054d0     02 00 00 FF 
054d4     38 E4 05 F1 | 	add	objptr, ##1080
054d8     F2 2A 62 FC | 	wrlong	local07, objptr
054dc     56 00 00 FF 
054e0     18 E5 85 F1 | 	sub	objptr, ##44312
054e4                 | LR__0412
054e4     00 2C 06 F6 | 	mov	local08, #0
054e8                 | ' vars=0
054e8                 | ' 'print  "In compile_immediate cmd=:", cmd
054e8                 | ' 451 select case cmd
054e8     40 28 0E F2 | 	cmp	local06, #64 wz
054ec     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
054f0     C8 03 90 AD |  if_e	jmp	#LR__0461
054f4     4C 28 0E F2 | 	cmp	local06, #76 wz
054f8     98 01 90 AD |  if_e	jmp	#LR__0413
054fc     73 28 0E F2 | 	cmp	local06, #115 wz
05500     9C 01 90 AD |  if_e	jmp	#LR__0414
05504     74 28 0E F2 | 	cmp	local06, #116 wz
05508     A0 01 90 AD |  if_e	jmp	#LR__0415
0550c     75 28 0E F2 | 	cmp	local06, #117 wz
05510     A4 01 90 AD |  if_e	jmp	#LR__0416
05514     4D 28 0E F2 | 	cmp	local06, #77 wz
05518     A0 03 90 AD |  if_e	jmp	#LR__0461
0551c     42 28 0E F2 | 	cmp	local06, #66 wz
05520     A0 01 90 AD |  if_e	jmp	#LR__0417
05524     43 28 0E F2 | 	cmp	local06, #67 wz
05528     A4 01 90 AD |  if_e	jmp	#LR__0418
0552c     45 28 0E F2 | 	cmp	local06, #69 wz
05530     A8 01 90 AD |  if_e	jmp	#LR__0419
05534     46 28 0E F2 | 	cmp	local06, #70 wz
05538     AC 01 90 AD |  if_e	jmp	#LR__0420
0553c     47 28 0E F2 | 	cmp	local06, #71 wz
05540     B0 01 90 AD |  if_e	jmp	#LR__0421
05544     48 28 0E F2 | 	cmp	local06, #72 wz
05548     B4 01 90 AD |  if_e	jmp	#LR__0422
0554c     49 28 0E F2 | 	cmp	local06, #73 wz
05550     B8 01 90 AD |  if_e	jmp	#LR__0423
05554     44 28 0E F2 | 	cmp	local06, #68 wz
05558     BC 01 90 AD |  if_e	jmp	#LR__0424
0555c     4E 28 0E F2 | 	cmp	local06, #78 wz
05560     C0 01 90 AD |  if_e	jmp	#LR__0425
05564     50 28 0E F2 | 	cmp	local06, #80 wz
05568     D4 01 90 AD |  if_e	jmp	#LR__0427
0556c     51 28 0E F2 | 	cmp	local06, #81 wz
05570     D8 01 90 AD |  if_e	jmp	#LR__0428
05574     52 28 0E F2 | 	cmp	local06, #82 wz
05578     DC 01 90 AD |  if_e	jmp	#LR__0429
0557c     59 28 0E F2 | 	cmp	local06, #89 wz
05580     E0 01 90 AD |  if_e	jmp	#LR__0430
05584     55 28 0E F2 | 	cmp	local06, #85 wz
05588     E4 01 90 AD |  if_e	jmp	#LR__0431
0558c     56 28 0E F2 | 	cmp	local06, #86 wz
05590     E8 01 90 AD |  if_e	jmp	#LR__0432
05594     57 28 0E F2 | 	cmp	local06, #87 wz
05598     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
0559c     1C 03 90 AD |  if_e	jmp	#LR__0461
055a0     58 28 0E F2 | 	cmp	local06, #88 wz
055a4     E0 01 90 AD |  if_e	jmp	#LR__0433
055a8     4A 28 0E F2 | 	cmp	local06, #74 wz
055ac     E0 01 90 AD |  if_e	jmp	#LR__0434
055b0     4B 28 0E F2 | 	cmp	local06, #75 wz
055b4     E0 01 90 AD |  if_e	jmp	#LR__0435
055b8     89 28 0E F2 | 	cmp	local06, #137 wz
055bc     88 28 0E 52 |  if_ne	cmp	local06, #136 wz
055c0     F8 02 90 AD |  if_e	jmp	#LR__0461
055c4     8A 28 0E F2 | 	cmp	local06, #138 wz
055c8     D4 01 90 AD |  if_e	jmp	#LR__0436
055cc     5A 28 0E F2 | 	cmp	local06, #90 wz
055d0     D8 01 90 AD |  if_e	jmp	#LR__0437
055d4     5C 28 0E F2 | 	cmp	local06, #92 wz
055d8     D8 01 90 AD |  if_e	jmp	#LR__0438
055dc     5D 28 0E F2 | 	cmp	local06, #93 wz
055e0     D8 02 90 AD |  if_e	jmp	#LR__0461
055e4     5E 28 0E F2 | 	cmp	local06, #94 wz
055e8     D4 01 90 AD |  if_e	jmp	#LR__0439
055ec     5F 28 0E F2 | 	cmp	local06, #95 wz
055f0     D8 01 90 AD |  if_e	jmp	#LR__0440
055f4     60 28 0E F2 | 	cmp	local06, #96 wz
055f8     DC 01 90 AD |  if_e	jmp	#LR__0441
055fc     61 28 0E F2 | 	cmp	local06, #97 wz
05600     E0 01 90 AD |  if_e	jmp	#LR__0442
05604     63 28 0E F2 | 	cmp	local06, #99 wz
05608     E4 01 90 AD |  if_e	jmp	#LR__0443
0560c     68 28 0E F2 | 	cmp	local06, #104 wz
05610     E8 01 90 AD |  if_e	jmp	#LR__0444
05614     69 28 0E F2 | 	cmp	local06, #105 wz
05618     EC 01 90 AD |  if_e	jmp	#LR__0445
0561c     6D 28 0E F2 | 	cmp	local06, #109 wz
05620     F0 01 90 AD |  if_e	jmp	#LR__0446
05624     6C 28 0E F2 | 	cmp	local06, #108 wz
05628     F4 01 90 AD |  if_e	jmp	#LR__0447
0562c     71 28 0E F2 | 	cmp	local06, #113 wz
05630     F8 01 90 AD |  if_e	jmp	#LR__0448
05634     79 28 0E F2 | 	cmp	local06, #121 wz
05638     FC 01 90 AD |  if_e	jmp	#LR__0449
0563c     77 28 0E F2 | 	cmp	local06, #119 wz
05640     00 02 90 AD |  if_e	jmp	#LR__0450
05644     78 28 0E F2 | 	cmp	local06, #120 wz
05648     04 02 90 AD |  if_e	jmp	#LR__0451
0564c     7C 28 0E F2 | 	cmp	local06, #124 wz
05650     08 02 90 AD |  if_e	jmp	#LR__0452
05654     7D 28 0E F2 | 	cmp	local06, #125 wz
05658     0C 02 90 AD |  if_e	jmp	#LR__0453
0565c     7E 28 0E F2 | 	cmp	local06, #126 wz
05660     10 02 90 AD |  if_e	jmp	#LR__0454
05664     7F 28 0E F2 | 	cmp	local06, #127 wz
05668     14 02 90 AD |  if_e	jmp	#LR__0455
0566c     80 28 0E F2 | 	cmp	local06, #128 wz
05670     18 02 90 AD |  if_e	jmp	#LR__0456
05674     72 28 0E F2 | 	cmp	local06, #114 wz
05678     1C 02 90 AD |  if_e	jmp	#LR__0457
0567c     81 28 0E F2 | 	cmp	local06, #129 wz
05680     1C 02 90 AD |  if_e	jmp	#LR__0458
05684     01 00 00 FF 
05688     04 28 0E F2 | 	cmp	local06, ##516 wz
0568c     1C 02 90 AD |  if_e	jmp	#LR__0459
05690     20 02 90 FD | 	jmp	#LR__0460
05694                 | LR__0413
05694     3C 0F B0 FD | 	call	#_compile_fun_varp
05698     FD 2C 02 F6 | 	mov	local08, result1
0569c     1C 02 90 FD | 	jmp	#LR__0461
056a0                 | LR__0414
056a0     30 0F B0 FD | 	call	#_compile_fun_varp
056a4     FD 2C 02 F6 | 	mov	local08, result1
056a8     10 02 90 FD | 	jmp	#LR__0461
056ac                 | LR__0415
056ac     24 0F B0 FD | 	call	#_compile_fun_varp
056b0     FD 2C 02 F6 | 	mov	local08, result1
056b4     04 02 90 FD | 	jmp	#LR__0461
056b8                 | LR__0416
056b8     18 0F B0 FD | 	call	#_compile_fun_varp
056bc     FD 2C 02 F6 | 	mov	local08, result1
056c0     F8 01 90 FD | 	jmp	#LR__0461
056c4                 | LR__0417
056c4     2C 0B B0 FD | 	call	#_compile_fun_2p
056c8     FD 26 02 F6 | 	mov	local05, result1
056cc     EC 01 90 FD | 	jmp	#LR__0461
056d0                 | LR__0418
056d0     20 0B B0 FD | 	call	#_compile_fun_2p
056d4     FD 26 02 F6 | 	mov	local05, result1
056d8     E0 01 90 FD | 	jmp	#LR__0461
056dc                 | LR__0419
056dc     88 0B B0 FD | 	call	#_compile_fun_3p
056e0     FD 26 02 F6 | 	mov	local05, result1
056e4     D4 01 90 FD | 	jmp	#LR__0461
056e8                 | LR__0420
056e8     7C 0B B0 FD | 	call	#_compile_fun_3p
056ec     FD 26 02 F6 | 	mov	local05, result1
056f0     C8 01 90 FD | 	jmp	#LR__0461
056f4                 | LR__0421
056f4     3C 0C B0 FD | 	call	#_compile_fun_4p
056f8     FD 26 02 F6 | 	mov	local05, result1
056fc     BC 01 90 FD | 	jmp	#LR__0461
05700                 | LR__0422
05700     30 0C B0 FD | 	call	#_compile_fun_4p
05704     FD 26 02 F6 | 	mov	local05, result1
05708     B0 01 90 FD | 	jmp	#LR__0461
0570c                 | LR__0423
0570c     30 2D B0 FD | 	call	#_expr
05710                 | ' expr()
05710                 | ' return 0
05710     00 26 06 F6 | 	mov	local05, #0
05714     A4 01 90 FD | 	jmp	#LR__0461
05718                 | LR__0424
05718     64 0F B0 FD | 	call	#_compile_print
0571c     FD 26 02 F6 | 	mov	local05, result1
05720     54 02 90 FD | 	jmp	#LR__0462
05724                 | LR__0425
05724     01 24 16 F2 | 	cmp	local04, #1 wc
05728     08 00 90 CD |  if_b	jmp	#LR__0426
0572c     B0 29 B0 FD | 	call	#_compile_goto
05730     44 02 90 FD | 	jmp	#LR__0462
05734                 | LR__0426
05734     19 12 06 F6 | 	mov	arg01, #25
05738     24 01 B1 FD | 	call	#_printerror
0573c     38 02 90 FD | 	jmp	#LR__0462
05740                 | LR__0427
05740     FC 2C B0 FD | 	call	#_expr
05744                 | ' expr()
05744                 | ' return 0
05744     00 26 06 F6 | 	mov	local05, #0
05748     70 01 90 FD | 	jmp	#LR__0461
0574c                 | LR__0428
0574c     F0 2C B0 FD | 	call	#_expr
05750                 | ' expr()
05750                 | ' return 0
05750     00 26 06 F6 | 	mov	local05, #0
05754     64 01 90 FD | 	jmp	#LR__0461
05758                 | LR__0429
05758     E4 2C B0 FD | 	call	#_expr
0575c                 | ' expr()
0575c                 | ' return 0
0575c     00 26 06 F6 | 	mov	local05, #0
05760     58 01 90 FD | 	jmp	#LR__0461
05764                 | LR__0430
05764     D8 2C B0 FD | 	call	#_expr
05768                 | ' expr()
05768                 | ' return 0
05768     00 26 06 F6 | 	mov	local05, #0
0576c     4C 01 90 FD | 	jmp	#LR__0461
05770                 | LR__0431
05770     80 0A B0 FD | 	call	#_compile_fun_2p
05774     FD 26 02 F6 | 	mov	local05, result1
05778     40 01 90 FD | 	jmp	#LR__0461
0577c                 | LR__0432
0577c     C0 2C B0 FD | 	call	#_expr
05780                 | ' expr()
05780                 | ' return 0
05780     00 26 06 F6 | 	mov	local05, #0
05784     34 01 90 FD | 	jmp	#LR__0461
05788                 | LR__0433
05788     CC 15 B0 FD | 	call	#_compile_if
0578c     E8 01 90 FD | 	jmp	#LR__0462
05790                 | LR__0434
05790     74 1F B0 FD | 	call	#_compile_for
05794     E0 01 90 FD | 	jmp	#LR__0462
05798                 | LR__0435
05798     94 27 B0 FD | 	call	#_compile_next
0579c     D8 01 90 FD | 	jmp	#LR__0462
057a0                 | LR__0436
057a0     9C 2C B0 FD | 	call	#_expr
057a4                 | ' expr()
057a4                 | ' return 0
057a4     00 26 06 F6 | 	mov	local05, #0
057a8     10 01 90 FD | 	jmp	#LR__0461
057ac                 | LR__0437
057ac     E8 16 B0 FD | 	call	#_compile_else
057b0     C4 01 90 FD | 	jmp	#LR__0462
057b4                 | LR__0438
057b4     3C 0A B0 FD | 	call	#_compile_fun_2p
057b8     FD 26 02 F6 | 	mov	local05, result1
057bc     FC 00 90 FD | 	jmp	#LR__0461
057c0                 | LR__0439
057c0     7C 2C B0 FD | 	call	#_expr
057c4                 | ' expr()
057c4                 | ' return 0
057c4     00 26 06 F6 | 	mov	local05, #0
057c8     F0 00 90 FD | 	jmp	#LR__0461
057cc                 | LR__0440
057cc     70 2C B0 FD | 	call	#_expr
057d0                 | ' expr()
057d0                 | ' return 0
057d0     00 26 06 F6 | 	mov	local05, #0
057d4     E4 00 90 FD | 	jmp	#LR__0461
057d8                 | LR__0441
057d8     64 2C B0 FD | 	call	#_expr
057dc                 | ' expr()
057dc                 | ' return 0
057dc     00 26 06 F6 | 	mov	local05, #0
057e0     D8 00 90 FD | 	jmp	#LR__0461
057e4                 | LR__0442
057e4     58 2C B0 FD | 	call	#_expr
057e8                 | ' expr()
057e8                 | ' return 0
057e8     00 26 06 F6 | 	mov	local05, #0
057ec     CC 00 90 FD | 	jmp	#LR__0461
057f0                 | LR__0443
057f0     4C 2C B0 FD | 	call	#_expr
057f4                 | ' expr()
057f4                 | ' return 0
057f4     00 26 06 F6 | 	mov	local05, #0
057f8     C0 00 90 FD | 	jmp	#LR__0461
057fc                 | LR__0444
057fc     40 2C B0 FD | 	call	#_expr
05800                 | ' expr()
05800                 | ' return 0
05800     00 26 06 F6 | 	mov	local05, #0
05804     B4 00 90 FD | 	jmp	#LR__0461
05808                 | LR__0445
05808     34 2C B0 FD | 	call	#_expr
0580c                 | ' expr()
0580c                 | ' return 0
0580c     00 26 06 F6 | 	mov	local05, #0
05810     A8 00 90 FD | 	jmp	#LR__0461
05814                 | LR__0446
05814     50 0A B0 FD | 	call	#_compile_fun_3p
05818     FD 26 02 F6 | 	mov	local05, result1
0581c     9C 00 90 FD | 	jmp	#LR__0461
05820                 | LR__0447
05820     34 0C B0 FD | 	call	#_compile_fun_5p
05824     FD 26 02 F6 | 	mov	local05, result1
05828     90 00 90 FD | 	jmp	#LR__0461
0582c                 | LR__0448
0582c     04 0B B0 FD | 	call	#_compile_fun_4p
05830     FD 26 02 F6 | 	mov	local05, result1
05834     84 00 90 FD | 	jmp	#LR__0461
05838                 | LR__0449
05838     B8 09 B0 FD | 	call	#_compile_fun_2p
0583c     FD 26 02 F6 | 	mov	local05, result1
05840     78 00 90 FD | 	jmp	#LR__0461
05844                 | LR__0450
05844     AC 09 B0 FD | 	call	#_compile_fun_2p
05848     FD 26 02 F6 | 	mov	local05, result1
0584c     6C 00 90 FD | 	jmp	#LR__0461
05850                 | LR__0451
05850     A0 09 B0 FD | 	call	#_compile_fun_2p
05854     FD 26 02 F6 | 	mov	local05, result1
05858     60 00 90 FD | 	jmp	#LR__0461
0585c                 | LR__0452
0585c     E0 2B B0 FD | 	call	#_expr
05860                 | ' expr()
05860                 | ' return 0
05860     00 26 06 F6 | 	mov	local05, #0
05864     54 00 90 FD | 	jmp	#LR__0461
05868                 | LR__0453
05868     D4 2B B0 FD | 	call	#_expr
0586c                 | ' expr()
0586c                 | ' return 0
0586c     00 26 06 F6 | 	mov	local05, #0
05870     48 00 90 FD | 	jmp	#LR__0461
05874                 | LR__0454
05874     C8 2B B0 FD | 	call	#_expr
05878                 | ' expr()
05878                 | ' return 0
05878     00 26 06 F6 | 	mov	local05, #0
0587c     3C 00 90 FD | 	jmp	#LR__0461
05880                 | LR__0455
05880     B0 0A B0 FD | 	call	#_compile_fun_4p
05884     FD 26 02 F6 | 	mov	local05, result1
05888     30 00 90 FD | 	jmp	#LR__0461
0588c                 | LR__0456
0588c     B0 2B B0 FD | 	call	#_expr
05890                 | ' expr()
05890                 | ' return 0
05890     00 26 06 F6 | 	mov	local05, #0
05894     24 00 90 FD | 	jmp	#LR__0461
05898                 | LR__0457
05898     24 17 B0 FD | 	call	#_compile_dim
0589c     D8 00 90 FD | 	jmp	#LR__0462
058a0                 | LR__0458
058a0     50 09 B0 FD | 	call	#_compile_fun_2p
058a4     FD 26 02 F6 | 	mov	local05, result1
058a8     10 00 90 FD | 	jmp	#LR__0461
058ac                 | LR__0459
058ac     20 01 B0 FD | 	call	#_compile_array_assign
058b0     C4 00 90 FD | 	jmp	#LR__0462
058b4                 | LR__0460
058b4     80 08 B0 FD | 	call	#_compile_unknown
058b8     BC 00 90 FD | 	jmp	#LR__0462
058bc                 | LR__0461
058bc     14 23 02 F6 | 	mov	local03, local06
058c0     16 1F 02 F6 | 	mov	local01, local08
058c4     0F 2B 02 F6 | 	mov	local07, local01
058c8     10 2F 02 F6 | 	mov	local09, local02
058cc     11 1F 02 F6 | 	mov	local01, local03
058d0     69 00 00 FF 
058d4     50 E5 05 F1 | 	add	objptr, ##54096
058d8     F2 2C 02 FB | 	rdlong	local08, objptr
058dc     16 29 02 F6 | 	mov	local06, local08
058e0     01 28 66 F0 | 	shl	local06, #1
058e4     16 29 02 F1 | 	add	local06, local08
058e8     02 28 66 F0 | 	shl	local06, #2
058ec     03 00 00 FF 
058f0     00 E4 85 F1 | 	sub	objptr, ##1536
058f4     F2 28 02 F1 | 	add	local06, objptr
058f8     14 2B 62 FC | 	wrlong	local07, local06
058fc     03 00 00 FF 
05900     00 E4 05 F1 | 	add	objptr, ##1536
05904     F2 2C 02 FB | 	rdlong	local08, objptr
05908     16 2B 02 F6 | 	mov	local07, local08
0590c     01 2A 66 F0 | 	shl	local07, #1
05910     16 2B 02 F1 | 	add	local07, local08
05914     02 2A 66 F0 | 	shl	local07, #2
05918     03 00 00 FF 
0591c     00 E4 85 F1 | 	sub	objptr, ##1536
05920     F2 2A 02 F1 | 	add	local07, objptr
05924     04 2A 06 F1 | 	add	local07, #4
05928     15 2F 62 FC | 	wrlong	local09, local07
0592c     03 00 00 FF 
05930     00 E4 05 F1 | 	add	objptr, ##1536
05934     F2 2E 02 FB | 	rdlong	local09, objptr
05938     17 2D 02 F6 | 	mov	local08, local09
0593c     01 2C 66 F0 | 	shl	local08, #1
05940     17 2D 02 F1 | 	add	local08, local09
05944     02 2C 66 F0 | 	shl	local08, #2
05948     03 00 00 FF 
0594c     00 E4 85 F1 | 	sub	objptr, ##1536
05950     F2 2C 02 F1 | 	add	local08, objptr
05954     08 2C 06 F1 | 	add	local08, #8
05958     16 1F 62 FC | 	wrlong	local01, local08
0595c     03 00 00 FF 
05960     00 E4 05 F1 | 	add	objptr, ##1536
05964     F2 2A 02 FB | 	rdlong	local07, objptr
05968     01 2A 06 F1 | 	add	local07, #1
0596c     F2 2A 62 FC | 	wrlong	local07, objptr
05970     69 00 00 FF 
05974     50 E5 85 F1 | 	sub	objptr, ##54096
05978                 | LR__0462
05978                 | ' 
05978                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
05978                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
05978     00 24 0E F2 | 	cmp	local04, #0 wz
0597c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05980     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05984     38 00 90 5D |  if_ne	jmp	#LR__0463
05988     69 00 00 FF 
0598c     50 E5 05 F1 | 	add	objptr, ##54096
05990     F2 2E 02 FB | 	rdlong	local09, objptr
05994     17 1F 02 F6 | 	mov	local01, local09
05998     01 1E 66 F0 | 	shl	local01, #1
0599c     17 1F 02 F1 | 	add	local01, local09
059a0     02 1E 66 F0 | 	shl	local01, #2
059a4     03 00 00 FF 
059a8     00 E4 85 F1 | 	sub	objptr, ##1536
059ac     F2 1E 02 F1 | 	add	local01, objptr
059b0     08 1E 06 F1 | 	add	local01, #8
059b4     0F FD 6B FC | 	wrlong	#510, local01
059b8     66 00 00 FF 
059bc     50 E5 85 F1 | 	sub	objptr, ##52560
059c0                 | LR__0463
059c0                 | ' 
059c0                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
059c0                 | ' return err
059c0     13 FB 01 F6 | 	mov	result1, local05
059c4     A7 F0 03 F6 | 	mov	ptra, fp
059c8     B2 00 A0 FD | 	call	#popregs_
059cc                 | _compile_immediate_ret
059cc     2D 00 64 FD | 	ret
059d0                 | 
059d0                 | ' 
059d0                 | ' sub compile_array_assign
059d0                 | _compile_array_assign
059d0     0A 4A 05 F6 | 	mov	COUNT_, #10
059d4     A8 00 A0 FD | 	call	#pushregs_
059d8     00 24 06 F6 | 	mov	local04, #0
059dc     56 00 00 FF 
059e0     18 E5 05 F1 | 	add	objptr, ##44312
059e4     F2 26 02 FB | 	rdlong	local05, objptr
059e8     13 FB 01 F6 | 	mov	result1, local05
059ec     01 FA 85 F1 | 	sub	result1, #1
059f0     03 FA 65 F0 | 	shl	result1, #3
059f4     02 00 00 FF 
059f8     38 E4 85 F1 | 	sub	objptr, ##1080
059fc     F2 FA 01 F1 | 	add	result1, objptr
05a00     FD 28 02 FB | 	rdlong	local06, result1
05a04                 | ' numpar=0
05a04                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
05a04                 | ' ' todo here: recognize params and t1.result.twowords=numpar
05a04                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
05a04                 | ' if lparts(ct).token=token_lpar then
05a04     03 26 66 F0 | 	shl	local05, #3
05a08     F2 26 02 F1 | 	add	local05, objptr
05a0c     04 26 06 F1 | 	add	local05, #4
05a10     13 27 02 FB | 	rdlong	local05, local05
05a14     15 26 0E F2 | 	cmp	local05, #21 wz
05a18     54 00 00 FF 
05a1c     E0 E4 85 F1 | 	sub	objptr, ##43232
05a20     D4 01 90 5D |  if_ne	jmp	#LR__0474
05a24     56 00 00 FF 
05a28     18 E5 05 F1 | 	add	objptr, ##44312
05a2c     F2 2A 02 FB | 	rdlong	local07, objptr
05a30     01 2A 06 F1 | 	add	local07, #1
05a34     F2 2A 62 FC | 	wrlong	local07, objptr
05a38     56 00 00 FF 
05a3c     18 E5 85 F1 | 	sub	objptr, ##44312
05a40                 | '   ct+=1 											' omit this lpar, this is for expr list
05a40                 | '   do
05a40                 | LR__0470
05a40     FC 29 B0 FD | 	call	#_expr
05a44     56 00 00 FF 
05a48     18 E5 05 F1 | 	add	objptr, ##44312
05a4c     F2 26 02 FB | 	rdlong	local05, objptr
05a50     01 26 06 F1 | 	add	local05, #1
05a54     F2 26 62 FC | 	wrlong	local05, objptr
05a58     01 24 06 F1 | 	add	local04, #1
05a5c     01 26 86 F1 | 	sub	local05, #1
05a60     03 26 66 F0 | 	shl	local05, #3
05a64     02 00 00 FF 
05a68     38 E4 85 F1 | 	sub	objptr, ##1080
05a6c     F2 26 02 F1 | 	add	local05, objptr
05a70     04 26 06 F1 | 	add	local05, #4
05a74     13 2B 02 FB | 	rdlong	local07, local05
05a78     14 2A 0E F2 | 	cmp	local07, #20 wz
05a7c     54 00 00 FF 
05a80     E0 E4 85 F1 | 	sub	objptr, ##43232
05a84     34 00 90 AD |  if_e	jmp	#LR__0471
05a88     56 00 00 FF 
05a8c     18 E5 05 F1 | 	add	objptr, ##44312
05a90     F2 2A 02 FB | 	rdlong	local07, objptr
05a94     03 2A 66 F0 | 	shl	local07, #3
05a98     02 00 00 FF 
05a9c     38 E4 85 F1 | 	sub	objptr, ##1080
05aa0     F2 2A 02 F1 | 	add	local07, objptr
05aa4     04 2A 06 F1 | 	add	local07, #4
05aa8     15 2B 02 FB | 	rdlong	local07, local07
05aac     FE 2B 0E F2 | 	cmp	local07, #510 wz
05ab0     54 00 00 FF 
05ab4     E0 E4 85 F1 | 	sub	objptr, ##43232
05ab8     84 FF 9F 5D |  if_ne	jmp	#LR__0470
05abc                 | LR__0471
05abc     56 00 00 FF 
05ac0     18 E5 05 F1 | 	add	objptr, ##44312
05ac4     F2 2A 02 FB | 	rdlong	local07, objptr
05ac8     01 2A 06 F1 | 	add	local07, #1
05acc     F2 2A 62 FC | 	wrlong	local07, objptr
05ad0     56 00 00 FF 
05ad4     18 E5 85 F1 | 	sub	objptr, ##44312
05ad8     64 29 B0 FD | 	call	#_expr
05adc     01 2C 66 F6 | 	neg	local08, #1
05ae0     00 2E 06 F6 | 	mov	local09, #0
05ae4                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05ae4                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05ae4                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05ae4                 | ' ct+=1 : expr()
05ae4                 | ' ' now find the vae
05ae4                 | ' 
05ae4                 | ' j=-1 : i=0 : do : 
05ae4                 | LR__0472
05ae4                 | '   if variables(i).name=varname$ then j=i: exit loop
05ae4     17 27 02 F6 | 	mov	local05, local09
05ae8     04 26 66 F0 | 	shl	local05, #4
05aec     34 00 00 FF 
05af0     DC E4 05 F1 | 	add	objptr, ##26844
05af4     F2 26 02 F1 | 	add	local05, objptr
05af8     13 13 02 FB | 	rdlong	arg01, local05
05afc     14 15 02 F6 | 	mov	arg02, local06
05b00     34 00 00 FF 
05b04     DC E4 85 F1 | 	sub	objptr, ##26844
05b08     00 33 B1 FD | 	call	#__system___string_cmp
05b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b10     17 2D 02 A6 |  if_e	mov	local08, local09
05b14     20 00 90 AD |  if_e	jmp	#LR__0473
05b18     01 2E 06 F1 | 	add	local09, #1
05b1c     54 00 00 FF 
05b20     DC E4 05 F1 | 	add	objptr, ##43228
05b24     F2 2A 02 FB | 	rdlong	local07, objptr
05b28     54 00 00 FF 
05b2c     DC E4 85 F1 | 	sub	objptr, ##43228
05b30     15 2F 5A F2 | 	cmps	local09, local07 wcz
05b34     AC FF 9F ED |  if_be	jmp	#LR__0472
05b38                 | LR__0473
05b38     16 1F 02 F6 | 	mov	local01, local08
05b3c     12 21 02 F6 | 	mov	local02, local04
05b40     17 22 06 F6 | 	mov	local03, #23
05b44     0F 2B 02 F6 | 	mov	local07, local01
05b48     10 31 02 F6 | 	mov	local10, local02
05b4c     11 2D 02 F6 | 	mov	local08, local03
05b50     69 00 00 FF 
05b54     50 E5 05 F1 | 	add	objptr, ##54096
05b58     F2 1E 02 FB | 	rdlong	local01, objptr
05b5c     0F 2F 02 F6 | 	mov	local09, local01
05b60     01 2E 66 F0 | 	shl	local09, #1
05b64     0F 2F 02 F1 | 	add	local09, local01
05b68     02 2E 66 F0 | 	shl	local09, #2
05b6c     03 00 00 FF 
05b70     00 E4 85 F1 | 	sub	objptr, ##1536
05b74     F2 2E 02 F1 | 	add	local09, objptr
05b78     17 2B 62 FC | 	wrlong	local07, local09
05b7c     03 00 00 FF 
05b80     00 E4 05 F1 | 	add	objptr, ##1536
05b84     F2 1E 02 FB | 	rdlong	local01, objptr
05b88     0F 2F 02 F6 | 	mov	local09, local01
05b8c     01 2E 66 F0 | 	shl	local09, #1
05b90     0F 2F 02 F1 | 	add	local09, local01
05b94     02 2E 66 F0 | 	shl	local09, #2
05b98     03 00 00 FF 
05b9c     00 E4 85 F1 | 	sub	objptr, ##1536
05ba0     F2 2E 02 F1 | 	add	local09, objptr
05ba4     04 2E 06 F1 | 	add	local09, #4
05ba8     17 31 62 FC | 	wrlong	local10, local09
05bac     03 00 00 FF 
05bb0     00 E4 05 F1 | 	add	objptr, ##1536
05bb4     F2 30 02 FB | 	rdlong	local10, objptr
05bb8     18 1F 02 F6 | 	mov	local01, local10
05bbc     01 1E 66 F0 | 	shl	local01, #1
05bc0     18 1F 02 F1 | 	add	local01, local10
05bc4     02 1E 66 F0 | 	shl	local01, #2
05bc8     03 00 00 FF 
05bcc     00 E4 85 F1 | 	sub	objptr, ##1536
05bd0     F2 1E 02 F1 | 	add	local01, objptr
05bd4     08 1E 06 F1 | 	add	local01, #8
05bd8     0F 2D 62 FC | 	wrlong	local08, local01
05bdc     03 00 00 FF 
05be0     00 E4 05 F1 | 	add	objptr, ##1536
05be4     F2 2A 02 FB | 	rdlong	local07, objptr
05be8     01 2A 06 F1 | 	add	local07, #1
05bec     F2 2A 62 FC | 	wrlong	local07, objptr
05bf0     69 00 00 FF 
05bf4     50 E5 85 F1 | 	sub	objptr, ##54096
05bf8                 | LR__0474
05bf8     A7 F0 03 F6 | 	mov	ptra, fp
05bfc     B2 00 A0 FD | 	call	#popregs_
05c00                 | _compile_array_assign_ret
05c00     2D 00 64 FD | 	ret
05c04                 | 
05c04                 | ' 
05c04                 | ' 
05c04                 | ' sub compile_immediate_assign(linetype as ulong)
05c04                 | _compile_immediate_assign
05c04     09 4A 05 F6 | 	mov	COUNT_, #9
05c08     A8 00 A0 FD | 	call	#pushregs_
05c0c     09 25 0A F6 | 	mov	local04, arg01 wz
05c10     FF 22 06 F6 | 	mov	local03, #255
05c14     01 26 66 F6 | 	neg	local05, #1
05c18                 | ' 
05c18                 | ' t1.result_type=result_error : t1.result.uresult=0
05c18                 | ' i=-1: j=-1
05c18                 | ' 
05c18                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05c18     2C 00 90 5D |  if_ne	jmp	#LR__0480
05c1c     54 00 00 FF 
05c20     E0 E4 05 F1 | 	add	objptr, ##43232
05c24     F2 28 02 FB | 	rdlong	local06, objptr
05c28     02 00 00 FF 
05c2c     38 E4 05 F1 | 	add	objptr, ##1080
05c30     F2 04 68 FC | 	wrlong	#2, objptr
05c34     13 00 00 FF 
05c38     38 E4 05 F1 | 	add	objptr, ##9784
05c3c     F2 00 68 FC | 	wrlong	#0, objptr
05c40     69 00 00 FF 
05c44     50 E5 85 F1 | 	sub	objptr, ##54096
05c48                 | LR__0480
05c48                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05c48     02 24 0E F2 | 	cmp	local04, #2 wz
05c4c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05c50     54 00 00 AF 
05c54     E0 E4 05 A1 |  if_e	add	objptr, ##43232
05c58     F2 28 02 AB |  if_e	rdlong	local06, objptr
05c5c     02 00 00 AF 
05c60     38 E4 05 A1 |  if_e	add	objptr, ##1080
05c64     F2 04 68 AC |  if_e	wrlong	#2, objptr
05c68     56 00 00 AF 
05c6c     18 E5 85 A1 |  if_e	sub	objptr, ##44312
05c70                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05c70     04 24 0E F2 | 	cmp	local04, #4 wz
05c74     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05c78     2C 00 90 5D |  if_ne	jmp	#LR__0481
05c7c     54 00 00 FF 
05c80     E8 E4 05 F1 | 	add	objptr, ##43240
05c84     F2 28 02 FB | 	rdlong	local06, objptr
05c88     02 00 00 FF 
05c8c     30 E4 05 F1 | 	add	objptr, ##1072
05c90     F2 06 68 FC | 	wrlong	#3, objptr
05c94     13 00 00 FF 
05c98     38 E4 05 F1 | 	add	objptr, ##9784
05c9c     F2 04 68 FC | 	wrlong	#2, objptr
05ca0     69 00 00 FF 
05ca4     50 E5 85 F1 | 	sub	objptr, ##54096
05ca8                 | LR__0481
05ca8                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05ca8     05 24 0E F2 | 	cmp	local04, #5 wz
05cac     3C 00 90 5D |  if_ne	jmp	#LR__0482
05cb0     56 00 00 FF 
05cb4     18 E5 05 F1 | 	add	objptr, ##44312
05cb8     F2 FA 01 FB | 	rdlong	result1, objptr
05cbc     FD 28 02 F6 | 	mov	local06, result1
05cc0     03 28 66 F0 | 	shl	local06, #3
05cc4     02 00 00 FF 
05cc8     38 E4 85 F1 | 	sub	objptr, ##1080
05ccc     F2 28 02 F1 | 	add	local06, objptr
05cd0     14 29 02 FB | 	rdlong	local06, local06
05cd4     02 FA 05 F1 | 	add	result1, #2
05cd8     02 00 00 FF 
05cdc     38 E4 05 F1 | 	add	objptr, ##1080
05ce0     F2 FA 61 FC | 	wrlong	result1, objptr
05ce4     56 00 00 FF 
05ce8     18 E5 85 F1 | 	sub	objptr, ##44312
05cec                 | LR__0482
05cec     14 13 02 F6 | 	mov	arg01, local06
05cf0     01 14 06 F6 | 	mov	arg02, #1
05cf4     84 51 B1 FD | 	call	#__system__Right_S
05cf8     44 27 B0 FD | 	call	#_expr
05cfc                 | '  
05cfc                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05cfc                 | ' 
05cfc                 | ' suffix2$=right$(varname2$,1)
05cfc                 | ' expr()
05cfc                 | ' 
05cfc                 | ' 
05cfc                 | ' if varnum>0 then
05cfc     54 00 00 FF 
05d00     DC E4 05 F1 | 	add	objptr, ##43228
05d04     F2 2A 02 FB | 	rdlong	local07, objptr
05d08     54 00 00 FF 
05d0c     DC E4 85 F1 | 	sub	objptr, ##43228
05d10     01 2A 56 F2 | 	cmps	local07, #1 wc
05d14     58 00 90 CD |  if_b	jmp	#LR__0485
05d18                 | '   for i=0 to varnum-1
05d18     00 2C 06 F6 | 	mov	local08, #0
05d1c     54 00 00 FF 
05d20     DC E4 05 F1 | 	add	objptr, ##43228
05d24     F2 2E 02 FB | 	rdlong	local09, objptr
05d28     54 00 00 FF 
05d2c     DC E4 85 F1 | 	sub	objptr, ##43228
05d30                 | LR__0483
05d30     17 2D 52 F2 | 	cmps	local08, local09 wc
05d34     38 00 90 3D |  if_ae	jmp	#LR__0484
05d38                 | '     if variables(i).name=varname2$ then j=i : exit
05d38     16 2B 02 F6 | 	mov	local07, local08
05d3c     04 2A 66 F0 | 	shl	local07, #4
05d40     34 00 00 FF 
05d44     DC E4 05 F1 | 	add	objptr, ##26844
05d48     F2 2A 02 F1 | 	add	local07, objptr
05d4c     15 13 02 FB | 	rdlong	arg01, local07
05d50     14 15 02 F6 | 	mov	arg02, local06
05d54     34 00 00 FF 
05d58     DC E4 85 F1 | 	sub	objptr, ##26844
05d5c     AC 30 B1 FD | 	call	#__system___string_cmp
05d60     00 FA 0D F2 | 	cmp	result1, #0 wz
05d64     16 27 02 A6 |  if_e	mov	local05, local08
05d68     01 2C 06 51 |  if_ne	add	local08, #1
05d6c     C0 FF 9F 5D |  if_ne	jmp	#LR__0483
05d70                 | LR__0484
05d70                 | LR__0485
05d70                 | ' if  j=-1 andalso varnum<maxvars then   
05d70     FF FF 7F FF 
05d74     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05d78     60 00 90 5D |  if_ne	jmp	#LR__0486
05d7c     54 00 00 FF 
05d80     DC E4 05 F1 | 	add	objptr, ##43228
05d84     F2 2A 02 FB | 	rdlong	local07, objptr
05d88     54 00 00 FF 
05d8c     DC E4 85 F1 | 	sub	objptr, ##43228
05d90     01 00 00 FF 
05d94     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05d98     40 00 90 3D |  if_ae	jmp	#LR__0486
05d9c     54 00 00 FF 
05da0     DC E4 05 F1 | 	add	objptr, ##43228
05da4     F2 2E 02 FB | 	rdlong	local09, objptr
05da8     04 2E 66 F0 | 	shl	local09, #4
05dac     20 00 00 FF 
05db0     00 E4 85 F1 | 	sub	objptr, ##16384
05db4     F2 2E 02 F1 | 	add	local09, objptr
05db8     17 29 62 FC | 	wrlong	local06, local09
05dbc     20 00 00 FF 
05dc0     00 E4 05 F1 | 	add	objptr, ##16384
05dc4     F2 2A 02 FB | 	rdlong	local07, objptr
05dc8     15 27 02 F6 | 	mov	local05, local07
05dcc     01 2A 06 F1 | 	add	local07, #1
05dd0     F2 2A 62 FC | 	wrlong	local07, objptr
05dd4     54 00 00 FF 
05dd8     DC E4 85 F1 | 	sub	objptr, ##43228
05ddc                 | LR__0486
05ddc     13 1F 02 F6 | 	mov	local01, local05
05de0     17 22 06 F6 | 	mov	local03, #23
05de4     0F 2B 02 F6 | 	mov	local07, local01
05de8     10 2F 02 F6 | 	mov	local09, local02
05dec     11 1F 02 F6 | 	mov	local01, local03
05df0     69 00 00 FF 
05df4     50 E5 05 F1 | 	add	objptr, ##54096
05df8     F2 2C 02 FB | 	rdlong	local08, objptr
05dfc     16 29 02 F6 | 	mov	local06, local08
05e00     01 28 66 F0 | 	shl	local06, #1
05e04     16 29 02 F1 | 	add	local06, local08
05e08     02 28 66 F0 | 	shl	local06, #2
05e0c     03 00 00 FF 
05e10     00 E4 85 F1 | 	sub	objptr, ##1536
05e14     F2 28 02 F1 | 	add	local06, objptr
05e18     14 2B 62 FC | 	wrlong	local07, local06
05e1c     03 00 00 FF 
05e20     00 E4 05 F1 | 	add	objptr, ##1536
05e24     F2 2C 02 FB | 	rdlong	local08, objptr
05e28     16 2B 02 F6 | 	mov	local07, local08
05e2c     01 2A 66 F0 | 	shl	local07, #1
05e30     16 2B 02 F1 | 	add	local07, local08
05e34     02 2A 66 F0 | 	shl	local07, #2
05e38     03 00 00 FF 
05e3c     00 E4 85 F1 | 	sub	objptr, ##1536
05e40     F2 2A 02 F1 | 	add	local07, objptr
05e44     04 2A 06 F1 | 	add	local07, #4
05e48     15 2F 62 FC | 	wrlong	local09, local07
05e4c     03 00 00 FF 
05e50     00 E4 05 F1 | 	add	objptr, ##1536
05e54     F2 2E 02 FB | 	rdlong	local09, objptr
05e58     17 2D 02 F6 | 	mov	local08, local09
05e5c     01 2C 66 F0 | 	shl	local08, #1
05e60     17 2D 02 F1 | 	add	local08, local09
05e64     02 2C 66 F0 | 	shl	local08, #2
05e68     03 00 00 FF 
05e6c     00 E4 85 F1 | 	sub	objptr, ##1536
05e70     F2 2C 02 F1 | 	add	local08, objptr
05e74     08 2C 06 F1 | 	add	local08, #8
05e78     16 1F 62 FC | 	wrlong	local01, local08
05e7c     03 00 00 FF 
05e80     00 E4 05 F1 | 	add	objptr, ##1536
05e84     F2 2A 02 FB | 	rdlong	local07, objptr
05e88     01 2A 06 F1 | 	add	local07, #1
05e8c     F2 2A 62 FC | 	wrlong	local07, objptr
05e90     69 00 00 FF 
05e94     50 E5 85 F1 | 	sub	objptr, ##54096
05e98                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
05e98                 | ' 
05e98                 | ' 
05e98                 | ' 
05e98                 | ' 
05e98                 | ' 
05e98                 | ' 
05e98                 | ' compiledline(lineptr)=t1:  lineptr+=1 
05e98                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
05e98     00 24 0E F2 | 	cmp	local04, #0 wz
05e9c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05ea0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05ea4     38 00 90 5D |  if_ne	jmp	#LR__0487
05ea8     69 00 00 FF 
05eac     50 E5 05 F1 | 	add	objptr, ##54096
05eb0     F2 1E 02 FB | 	rdlong	local01, objptr
05eb4     0F 2F 02 F6 | 	mov	local09, local01
05eb8     01 2E 66 F0 | 	shl	local09, #1
05ebc     0F 2F 02 F1 | 	add	local09, local01
05ec0     02 2E 66 F0 | 	shl	local09, #2
05ec4     03 00 00 FF 
05ec8     00 E4 85 F1 | 	sub	objptr, ##1536
05ecc     F2 2E 02 F1 | 	add	local09, objptr
05ed0     08 2E 06 F1 | 	add	local09, #8
05ed4     17 FD 6B FC | 	wrlong	#510, local09
05ed8     66 00 00 FF 
05edc     50 E5 85 F1 | 	sub	objptr, ##52560
05ee0                 | LR__0487
05ee0     A7 F0 03 F6 | 	mov	ptra, fp
05ee4     B2 00 A0 FD | 	call	#popregs_
05ee8                 | _compile_immediate_assign_ret
05ee8     2D 00 64 FD | 	ret
05eec                 | 
05eec                 | ' 
05eec                 | ' ' ------------------ compile the line that is calling a command 
05eec                 | ' 
05eec                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05eec                 | _compile
05eec     04 4A 05 F6 | 	mov	COUNT_, #4
05ef0     A8 00 A0 FD | 	call	#pushregs_
05ef4     09 1F 0A F6 | 	mov	local01, arg01 wz
05ef8     0A 21 02 F6 | 	mov	local02, arg02
05efc     0B 23 02 F6 | 	mov	local03, arg03
05f00                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05f00                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05f00                 | '  
05f00                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05f00                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05f00     0C 00 90 5D |  if_ne	jmp	#LR__0490
05f04     00 12 06 F6 | 	mov	arg01, #0
05f08     EC F4 BF FD | 	call	#_compile_immediate
05f0c     A0 00 90 FD | 	jmp	#LR__0497
05f10                 | LR__0490
05f10     66 00 00 FF 
05f14     50 E5 05 F1 | 	add	objptr, ##52560
05f18     F2 1E 62 FC | 	wrlong	local01, objptr
05f1c     04 E4 05 F1 | 	add	objptr, #4
05f20     F2 20 62 FC | 	wrlong	local02, objptr
05f24     66 00 00 FF 
05f28     54 E5 85 F1 | 	sub	objptr, ##52564
05f2c     11 13 02 F6 | 	mov	arg01, local03
05f30     01 12 06 F1 | 	add	arg01, #1
05f34     C0 F4 BF FD | 	call	#_compile_immediate
05f38     FD 24 0A F6 | 	mov	local04, result1 wz
05f3c                 | ' 
05f3c                 | ' ucompiledline(0)=alinemajor
05f3c                 | ' ucompiledline(1)=alineminor
05f3c                 | ' 
05f3c                 | ' 
05f3c                 | ' ' cont: 0: this is the first part of the line that will continue
05f3c                 | ' ' 1 - this is the continuation of the line
05f3c                 | ' ' 2 - this is the last continued line
05f3c                 | ' ' 3 - this is the ome and only part
05f3c                 | ' 
05f3c                 | ' err=compile_immediate(cont+1) 
05f3c                 | ' if err=0 then
05f3c     6C 00 90 5D |  if_ne	jmp	#LR__0496
05f40                 | '   if cont=3 orelse cont=2 then 
05f40     03 22 0E F2 | 	cmp	local03, #3 wz
05f44     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05f48     60 00 90 5D |  if_ne	jmp	#LR__0495
05f4c                 | '     if alinemajor >lastline then 
05f4c     69 00 00 FF 
05f50     5C E5 05 F1 | 	add	objptr, ##54108
05f54     F2 16 02 FB | 	rdlong	arg03, objptr
05f58     69 00 00 FF 
05f5c     5C E5 85 F1 | 	sub	objptr, ##54108
05f60     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05f64     0C 00 90 ED |  if_be	jmp	#LR__0491
05f68     0F 13 02 F6 | 	mov	arg01, local01
05f6c     A8 F3 BF FD | 	call	#_add_line_at_end
05f70     38 00 90 FD | 	jmp	#LR__0494
05f74                 | LR__0491
05f74     0F 13 02 F6 | 	mov	arg01, local01
05f78     1C EC BF FD | 	call	#_deleteline
05f7c                 | '       deleteline(alinemajor)  
05f7c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
05f7c     69 00 00 FF 
05f80     5C E5 05 F1 | 	add	objptr, ##54108
05f84     F2 16 02 FB | 	rdlong	arg03, objptr
05f88     69 00 00 FF 
05f8c     5C E5 85 F1 | 	sub	objptr, ##54108
05f90     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05f94     0C 00 90 ED |  if_be	jmp	#LR__0492
05f98     0F 13 02 F6 | 	mov	arg01, local01
05f9c     78 F3 BF FD | 	call	#_add_line_at_end
05fa0     08 00 90 FD | 	jmp	#LR__0493
05fa4                 | LR__0492
05fa4     0F 13 02 F6 | 	mov	arg01, local01
05fa8     24 F1 BF FD | 	call	#_insertline
05fac                 | LR__0493
05fac                 | LR__0494
05fac                 | LR__0495
05fac                 | LR__0496
05fac                 | ' return err
05fac     12 FB 01 F6 | 	mov	result1, local04
05fb0                 | LR__0497
05fb0     A7 F0 03 F6 | 	mov	ptra, fp
05fb4     B2 00 A0 FD | 	call	#popregs_
05fb8                 | _compile_ret
05fb8     2D 00 64 FD | 	ret
05fbc                 | 
05fbc                 | ' 
05fbc                 | ' ' ------------------ compile the line that is assigning to a variable
05fbc                 | ' 
05fbc                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
05fbc                 | _compile_assign
05fbc     03 4A 05 F6 | 	mov	COUNT_, #3
05fc0     A8 00 A0 FD | 	call	#pushregs_
05fc4     09 1F 0A F6 | 	mov	local01, arg01 wz
05fc8     0A 21 02 F6 | 	mov	local02, arg02
05fcc     0B 23 02 F6 | 	mov	local03, arg03
05fd0                 | ' 
05fd0                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05fd0                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05fd0     0C 00 90 5D |  if_ne	jmp	#LR__0500
05fd4     00 12 06 F6 | 	mov	arg01, #0
05fd8     28 FC BF FD | 	call	#_compile_immediate_assign
05fdc     94 00 90 FD | 	jmp	#LR__0506
05fe0                 | LR__0500
05fe0     66 00 00 FF 
05fe4     50 E5 05 F1 | 	add	objptr, ##52560
05fe8     F2 1E 62 FC | 	wrlong	local01, objptr
05fec     04 E4 05 F1 | 	add	objptr, #4
05ff0     F2 20 62 FC | 	wrlong	local02, objptr
05ff4     66 00 00 FF 
05ff8     54 E5 85 F1 | 	sub	objptr, ##52564
05ffc     11 13 02 F6 | 	mov	arg01, local03
06000     01 12 06 F1 | 	add	arg01, #1
06004     FC FB BF FD | 	call	#_compile_immediate_assign
06008                 | ' 
06008                 | ' ucompiledline(0)=alinemajor
06008                 | ' ucompiledline(1)=alineminor
06008                 | ' 
06008                 | ' compile_immediate_assign(cont+1) 
06008                 | ' 
06008                 | ' if cont=3 orelse cont=2 then 
06008     03 22 0E F2 | 	cmp	local03, #3 wz
0600c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06010     60 00 90 5D |  if_ne	jmp	#LR__0505
06014                 | '   if alinemajor >lastline then 
06014     69 00 00 FF 
06018     5C E5 05 F1 | 	add	objptr, ##54108
0601c     F2 16 02 FB | 	rdlong	arg03, objptr
06020     69 00 00 FF 
06024     5C E5 85 F1 | 	sub	objptr, ##54108
06028     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0602c     0C 00 90 ED |  if_be	jmp	#LR__0501
06030     0F 13 02 F6 | 	mov	arg01, local01
06034     E0 F2 BF FD | 	call	#_add_line_at_end
06038     38 00 90 FD | 	jmp	#LR__0504
0603c                 | LR__0501
0603c     0F 13 02 F6 | 	mov	arg01, local01
06040     54 EB BF FD | 	call	#_deleteline
06044                 | '     deleteline(alinemajor)  
06044                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06044     69 00 00 FF 
06048     5C E5 05 F1 | 	add	objptr, ##54108
0604c     F2 16 02 FB | 	rdlong	arg03, objptr
06050     69 00 00 FF 
06054     5C E5 85 F1 | 	sub	objptr, ##54108
06058     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0605c     0C 00 90 ED |  if_be	jmp	#LR__0502
06060     0F 13 02 F6 | 	mov	arg01, local01
06064     B0 F2 BF FD | 	call	#_add_line_at_end
06068     08 00 90 FD | 	jmp	#LR__0503
0606c                 | LR__0502
0606c     0F 13 02 F6 | 	mov	arg01, local01
06070     5C F0 BF FD | 	call	#_insertline
06074                 | LR__0503
06074                 | LR__0504
06074                 | LR__0505
06074                 | LR__0506
06074     A7 F0 03 F6 | 	mov	ptra, fp
06078     B2 00 A0 FD | 	call	#popregs_
0607c                 | _compile_assign_ret
0607c     2D 00 64 FD | 	ret
06080                 | 
06080                 | ' 
06080                 | ' sub compile_error(errno)
06080                 | _compile_error
06080     FF 04 06 F6 | 	mov	_var03, #255
06084     01 07 02 F6 | 	mov	_var04, _var02
06088     02 09 02 F6 | 	mov	_var05, _var03
0608c     69 00 00 FF 
06090     50 E5 05 F1 | 	add	objptr, ##54096
06094     F2 0A 02 FB | 	rdlong	_var06, objptr
06098     05 0D 02 F6 | 	mov	_var07, _var06
0609c     01 0C 66 F0 | 	shl	_var07, #1
060a0     05 0D 02 F1 | 	add	_var07, _var06
060a4     02 0C 66 F0 | 	shl	_var07, #2
060a8     03 00 00 FF 
060ac     00 E4 85 F1 | 	sub	objptr, ##1536
060b0     F2 0C 02 F1 | 	add	_var07, objptr
060b4     06 13 62 FC | 	wrlong	arg01, _var07
060b8     03 00 00 FF 
060bc     00 E4 05 F1 | 	add	objptr, ##1536
060c0     F2 0C 02 FB | 	rdlong	_var07, objptr
060c4     06 0B 02 F6 | 	mov	_var06, _var07
060c8     01 0A 66 F0 | 	shl	_var06, #1
060cc     06 0B 02 F1 | 	add	_var06, _var07
060d0     02 0A 66 F0 | 	shl	_var06, #2
060d4     03 00 00 FF 
060d8     00 E4 85 F1 | 	sub	objptr, ##1536
060dc     F2 0A 02 F1 | 	add	_var06, objptr
060e0     04 0A 06 F1 | 	add	_var06, #4
060e4     05 07 62 FC | 	wrlong	_var04, _var06
060e8     03 00 00 FF 
060ec     00 E4 05 F1 | 	add	objptr, ##1536
060f0     F2 0C 02 FB | 	rdlong	_var07, objptr
060f4     06 0B 02 F6 | 	mov	_var06, _var07
060f8     01 0A 66 F0 | 	shl	_var06, #1
060fc     06 0B 02 F1 | 	add	_var06, _var07
06100     02 0A 66 F0 | 	shl	_var06, #2
06104     03 00 00 FF 
06108     00 E4 85 F1 | 	sub	objptr, ##1536
0610c     F2 0A 02 F1 | 	add	_var06, objptr
06110     08 0A 06 F1 | 	add	_var06, #8
06114     05 09 62 FC | 	wrlong	_var05, _var06
06118     03 00 00 FF 
0611c     00 E4 05 F1 | 	add	objptr, ##1536
06120     F2 12 02 FB | 	rdlong	arg01, objptr
06124     01 12 06 F1 | 	add	arg01, #1
06128     F2 12 62 FC | 	wrlong	arg01, objptr
0612c     69 00 00 FF 
06130     50 E5 85 F1 | 	sub	objptr, ##54096
06134                 | _compile_error_ret
06134     2D 00 64 FD | 	ret
06138                 | 
06138                 | ' 
06138                 | ' sub compile_unknown() 
06138                 | _compile_unknown
06138     FF 04 06 F6 | 	mov	_var03, #255
0613c     17 00 06 F6 | 	mov	_var01, #23
06140     01 07 02 F6 | 	mov	_var04, _var02
06144     02 01 02 F6 | 	mov	_var01, _var03
06148     69 00 00 FF 
0614c     50 E5 05 F1 | 	add	objptr, ##54096
06150     F2 08 02 FB | 	rdlong	_var05, objptr
06154     04 0B 02 F6 | 	mov	_var06, _var05
06158     01 0A 66 F0 | 	shl	_var06, #1
0615c     04 0B 02 F1 | 	add	_var06, _var05
06160     02 0A 66 F0 | 	shl	_var06, #2
06164     03 00 00 FF 
06168     00 E4 85 F1 | 	sub	objptr, ##1536
0616c     F2 0A 02 F1 | 	add	_var06, objptr
06170     05 2F 68 FC | 	wrlong	#23, _var06
06174     03 00 00 FF 
06178     00 E4 05 F1 | 	add	objptr, ##1536
0617c     F2 0A 02 FB | 	rdlong	_var06, objptr
06180     05 09 02 F6 | 	mov	_var05, _var06
06184     01 08 66 F0 | 	shl	_var05, #1
06188     05 09 02 F1 | 	add	_var05, _var06
0618c     02 08 66 F0 | 	shl	_var05, #2
06190     03 00 00 FF 
06194     00 E4 85 F1 | 	sub	objptr, ##1536
06198     F2 08 02 F1 | 	add	_var05, objptr
0619c     04 08 06 F1 | 	add	_var05, #4
061a0     04 07 62 FC | 	wrlong	_var04, _var05
061a4     03 00 00 FF 
061a8     00 E4 05 F1 | 	add	objptr, ##1536
061ac     F2 0A 02 FB | 	rdlong	_var06, objptr
061b0     05 09 02 F6 | 	mov	_var05, _var06
061b4     01 08 66 F0 | 	shl	_var05, #1
061b8     05 09 02 F1 | 	add	_var05, _var06
061bc     02 08 66 F0 | 	shl	_var05, #2
061c0     03 00 00 FF 
061c4     00 E4 85 F1 | 	sub	objptr, ##1536
061c8     F2 08 02 F1 | 	add	_var05, objptr
061cc     08 08 06 F1 | 	add	_var05, #8
061d0     04 01 62 FC | 	wrlong	_var01, _var05
061d4     03 00 00 FF 
061d8     00 E4 05 F1 | 	add	objptr, ##1536
061dc     F2 0A 02 FB | 	rdlong	_var06, objptr
061e0     01 0A 06 F1 | 	add	_var06, #1
061e4     F2 0A 62 FC | 	wrlong	_var06, objptr
061e8     69 00 00 FF 
061ec     50 E5 85 F1 | 	sub	objptr, ##54096
061f0                 | _compile_unknown_ret
061f0     2D 00 64 FD | 	ret
061f4                 | 
061f4                 | ' 
061f4                 | ' function compile_fun_2p() as ulong
061f4                 | _compile_fun_2p
061f4     01 4A 05 F6 | 	mov	COUNT_, #1
061f8     A8 00 A0 FD | 	call	#pushregs_
061fc     40 22 B0 FD | 	call	#_expr
06200                 | ' 
06200                 | ' expr()
06200                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06200     56 00 00 FF 
06204     18 E5 05 F1 | 	add	objptr, ##44312
06208     F2 1E 02 FB | 	rdlong	local01, objptr
0620c     03 1E 66 F0 | 	shl	local01, #3
06210     02 00 00 FF 
06214     38 E4 85 F1 | 	sub	objptr, ##1080
06218     F2 1E 02 F1 | 	add	local01, objptr
0621c     04 1E 06 F1 | 	add	local01, #4
06220     0F 1F 02 FB | 	rdlong	local01, local01
06224     11 1E 0E F2 | 	cmp	local01, #17 wz
06228     54 00 00 FF 
0622c     E0 E4 85 F1 | 	sub	objptr, ##43232
06230     15 FA 05 56 |  if_ne	mov	result1, #21
06234     24 00 90 5D |  if_ne	jmp	#LR__0510
06238     56 00 00 FF 
0623c     18 E5 05 F1 | 	add	objptr, ##44312
06240     F2 1E 02 FB | 	rdlong	local01, objptr
06244     01 1E 06 F1 | 	add	local01, #1
06248     F2 1E 62 FC | 	wrlong	local01, objptr
0624c     56 00 00 FF 
06250     18 E5 85 F1 | 	sub	objptr, ##44312
06254     E8 21 B0 FD | 	call	#_expr
06258     00 FA 05 F6 | 	mov	result1, #0
0625c                 | LR__0510
0625c     A7 F0 03 F6 | 	mov	ptra, fp
06260     B2 00 A0 FD | 	call	#popregs_
06264                 | _compile_fun_2p_ret
06264     2D 00 64 FD | 	ret
06268                 | 
06268                 | ' 
06268                 | ' function compile_fun_3p() as ulong
06268                 | _compile_fun_3p
06268     01 4A 05 F6 | 	mov	COUNT_, #1
0626c     A8 00 A0 FD | 	call	#pushregs_
06270     CC 21 B0 FD | 	call	#_expr
06274                 | ' 
06274                 | ' expr()
06274                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06274     56 00 00 FF 
06278     18 E5 05 F1 | 	add	objptr, ##44312
0627c     F2 1E 02 FB | 	rdlong	local01, objptr
06280     03 1E 66 F0 | 	shl	local01, #3
06284     02 00 00 FF 
06288     38 E4 85 F1 | 	sub	objptr, ##1080
0628c     F2 1E 02 F1 | 	add	local01, objptr
06290     04 1E 06 F1 | 	add	local01, #4
06294     0F 1F 02 FB | 	rdlong	local01, local01
06298     11 1E 0E F2 | 	cmp	local01, #17 wz
0629c     54 00 00 FF 
062a0     E0 E4 85 F1 | 	sub	objptr, ##43232
062a4     15 FA 05 56 |  if_ne	mov	result1, #21
062a8     7C 00 90 5D |  if_ne	jmp	#LR__0520
062ac     56 00 00 FF 
062b0     18 E5 05 F1 | 	add	objptr, ##44312
062b4     F2 1E 02 FB | 	rdlong	local01, objptr
062b8     01 1E 06 F1 | 	add	local01, #1
062bc     F2 1E 62 FC | 	wrlong	local01, objptr
062c0     56 00 00 FF 
062c4     18 E5 85 F1 | 	sub	objptr, ##44312
062c8     74 21 B0 FD | 	call	#_expr
062cc                 | ' expr()
062cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
062cc     56 00 00 FF 
062d0     18 E5 05 F1 | 	add	objptr, ##44312
062d4     F2 1E 02 FB | 	rdlong	local01, objptr
062d8     03 1E 66 F0 | 	shl	local01, #3
062dc     02 00 00 FF 
062e0     38 E4 85 F1 | 	sub	objptr, ##1080
062e4     F2 1E 02 F1 | 	add	local01, objptr
062e8     04 1E 06 F1 | 	add	local01, #4
062ec     0F 1F 02 FB | 	rdlong	local01, local01
062f0     11 1E 0E F2 | 	cmp	local01, #17 wz
062f4     54 00 00 FF 
062f8     E0 E4 85 F1 | 	sub	objptr, ##43232
062fc     15 FA 05 56 |  if_ne	mov	result1, #21
06300     24 00 90 5D |  if_ne	jmp	#LR__0520
06304     56 00 00 FF 
06308     18 E5 05 F1 | 	add	objptr, ##44312
0630c     F2 1E 02 FB | 	rdlong	local01, objptr
06310     01 1E 06 F1 | 	add	local01, #1
06314     F2 1E 62 FC | 	wrlong	local01, objptr
06318     56 00 00 FF 
0631c     18 E5 85 F1 | 	sub	objptr, ##44312
06320     1C 21 B0 FD | 	call	#_expr
06324     00 FA 05 F6 | 	mov	result1, #0
06328                 | LR__0520
06328     A7 F0 03 F6 | 	mov	ptra, fp
0632c     B2 00 A0 FD | 	call	#popregs_
06330                 | _compile_fun_3p_ret
06330     2D 00 64 FD | 	ret
06334                 | 
06334                 | ' 
06334                 | ' function compile_fun_4p() as ulong
06334                 | _compile_fun_4p
06334     01 4A 05 F6 | 	mov	COUNT_, #1
06338     A8 00 A0 FD | 	call	#pushregs_
0633c     00 21 B0 FD | 	call	#_expr
06340                 | ' 
06340                 | ' expr()
06340                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06340     56 00 00 FF 
06344     18 E5 05 F1 | 	add	objptr, ##44312
06348     F2 1E 02 FB | 	rdlong	local01, objptr
0634c     03 1E 66 F0 | 	shl	local01, #3
06350     02 00 00 FF 
06354     38 E4 85 F1 | 	sub	objptr, ##1080
06358     F2 1E 02 F1 | 	add	local01, objptr
0635c     04 1E 06 F1 | 	add	local01, #4
06360     0F 1F 02 FB | 	rdlong	local01, local01
06364     11 1E 0E F2 | 	cmp	local01, #17 wz
06368     54 00 00 FF 
0636c     E0 E4 85 F1 | 	sub	objptr, ##43232
06370     15 FA 05 56 |  if_ne	mov	result1, #21
06374     D4 00 90 5D |  if_ne	jmp	#LR__0530
06378     56 00 00 FF 
0637c     18 E5 05 F1 | 	add	objptr, ##44312
06380     F2 1E 02 FB | 	rdlong	local01, objptr
06384     01 1E 06 F1 | 	add	local01, #1
06388     F2 1E 62 FC | 	wrlong	local01, objptr
0638c     56 00 00 FF 
06390     18 E5 85 F1 | 	sub	objptr, ##44312
06394     A8 20 B0 FD | 	call	#_expr
06398                 | ' expr()
06398                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06398     56 00 00 FF 
0639c     18 E5 05 F1 | 	add	objptr, ##44312
063a0     F2 1E 02 FB | 	rdlong	local01, objptr
063a4     03 1E 66 F0 | 	shl	local01, #3
063a8     02 00 00 FF 
063ac     38 E4 85 F1 | 	sub	objptr, ##1080
063b0     F2 1E 02 F1 | 	add	local01, objptr
063b4     04 1E 06 F1 | 	add	local01, #4
063b8     0F 1F 02 FB | 	rdlong	local01, local01
063bc     11 1E 0E F2 | 	cmp	local01, #17 wz
063c0     54 00 00 FF 
063c4     E0 E4 85 F1 | 	sub	objptr, ##43232
063c8     15 FA 05 56 |  if_ne	mov	result1, #21
063cc     7C 00 90 5D |  if_ne	jmp	#LR__0530
063d0     56 00 00 FF 
063d4     18 E5 05 F1 | 	add	objptr, ##44312
063d8     F2 1E 02 FB | 	rdlong	local01, objptr
063dc     01 1E 06 F1 | 	add	local01, #1
063e0     F2 1E 62 FC | 	wrlong	local01, objptr
063e4     56 00 00 FF 
063e8     18 E5 85 F1 | 	sub	objptr, ##44312
063ec     50 20 B0 FD | 	call	#_expr
063f0                 | ' expr()
063f0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
063f0     56 00 00 FF 
063f4     18 E5 05 F1 | 	add	objptr, ##44312
063f8     F2 1E 02 FB | 	rdlong	local01, objptr
063fc     03 1E 66 F0 | 	shl	local01, #3
06400     02 00 00 FF 
06404     38 E4 85 F1 | 	sub	objptr, ##1080
06408     F2 1E 02 F1 | 	add	local01, objptr
0640c     04 1E 06 F1 | 	add	local01, #4
06410     0F 1F 02 FB | 	rdlong	local01, local01
06414     11 1E 0E F2 | 	cmp	local01, #17 wz
06418     54 00 00 FF 
0641c     E0 E4 85 F1 | 	sub	objptr, ##43232
06420     15 FA 05 56 |  if_ne	mov	result1, #21
06424     24 00 90 5D |  if_ne	jmp	#LR__0530
06428     56 00 00 FF 
0642c     18 E5 05 F1 | 	add	objptr, ##44312
06430     F2 1E 02 FB | 	rdlong	local01, objptr
06434     01 1E 06 F1 | 	add	local01, #1
06438     F2 1E 62 FC | 	wrlong	local01, objptr
0643c     56 00 00 FF 
06440     18 E5 85 F1 | 	sub	objptr, ##44312
06444     F8 1F B0 FD | 	call	#_expr
06448     00 FA 05 F6 | 	mov	result1, #0
0644c                 | LR__0530
0644c     A7 F0 03 F6 | 	mov	ptra, fp
06450     B2 00 A0 FD | 	call	#popregs_
06454                 | _compile_fun_4p_ret
06454     2D 00 64 FD | 	ret
06458                 | 
06458                 | ' 
06458                 | ' 
06458                 | ' function compile_fun_5p() as ulong
06458                 | _compile_fun_5p
06458     01 4A 05 F6 | 	mov	COUNT_, #1
0645c     A8 00 A0 FD | 	call	#pushregs_
06460     DC 1F B0 FD | 	call	#_expr
06464                 | ' 
06464                 | ' expr()
06464                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06464     56 00 00 FF 
06468     18 E5 05 F1 | 	add	objptr, ##44312
0646c     F2 1E 02 FB | 	rdlong	local01, objptr
06470     03 1E 66 F0 | 	shl	local01, #3
06474     02 00 00 FF 
06478     38 E4 85 F1 | 	sub	objptr, ##1080
0647c     F2 1E 02 F1 | 	add	local01, objptr
06480     04 1E 06 F1 | 	add	local01, #4
06484     0F 1F 02 FB | 	rdlong	local01, local01
06488     11 1E 0E F2 | 	cmp	local01, #17 wz
0648c     54 00 00 FF 
06490     E0 E4 85 F1 | 	sub	objptr, ##43232
06494     15 FA 05 56 |  if_ne	mov	result1, #21
06498     2C 01 90 5D |  if_ne	jmp	#LR__0540
0649c     56 00 00 FF 
064a0     18 E5 05 F1 | 	add	objptr, ##44312
064a4     F2 1E 02 FB | 	rdlong	local01, objptr
064a8     01 1E 06 F1 | 	add	local01, #1
064ac     F2 1E 62 FC | 	wrlong	local01, objptr
064b0     56 00 00 FF 
064b4     18 E5 85 F1 | 	sub	objptr, ##44312
064b8     84 1F B0 FD | 	call	#_expr
064bc                 | ' expr()
064bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064bc     56 00 00 FF 
064c0     18 E5 05 F1 | 	add	objptr, ##44312
064c4     F2 1E 02 FB | 	rdlong	local01, objptr
064c8     03 1E 66 F0 | 	shl	local01, #3
064cc     02 00 00 FF 
064d0     38 E4 85 F1 | 	sub	objptr, ##1080
064d4     F2 1E 02 F1 | 	add	local01, objptr
064d8     04 1E 06 F1 | 	add	local01, #4
064dc     0F 1F 02 FB | 	rdlong	local01, local01
064e0     11 1E 0E F2 | 	cmp	local01, #17 wz
064e4     54 00 00 FF 
064e8     E0 E4 85 F1 | 	sub	objptr, ##43232
064ec     15 FA 05 56 |  if_ne	mov	result1, #21
064f0     D4 00 90 5D |  if_ne	jmp	#LR__0540
064f4     56 00 00 FF 
064f8     18 E5 05 F1 | 	add	objptr, ##44312
064fc     F2 1E 02 FB | 	rdlong	local01, objptr
06500     01 1E 06 F1 | 	add	local01, #1
06504     F2 1E 62 FC | 	wrlong	local01, objptr
06508     56 00 00 FF 
0650c     18 E5 85 F1 | 	sub	objptr, ##44312
06510     2C 1F B0 FD | 	call	#_expr
06514                 | ' expr()
06514                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06514     56 00 00 FF 
06518     18 E5 05 F1 | 	add	objptr, ##44312
0651c     F2 1E 02 FB | 	rdlong	local01, objptr
06520     03 1E 66 F0 | 	shl	local01, #3
06524     02 00 00 FF 
06528     38 E4 85 F1 | 	sub	objptr, ##1080
0652c     F2 1E 02 F1 | 	add	local01, objptr
06530     04 1E 06 F1 | 	add	local01, #4
06534     0F 1F 02 FB | 	rdlong	local01, local01
06538     11 1E 0E F2 | 	cmp	local01, #17 wz
0653c     54 00 00 FF 
06540     E0 E4 85 F1 | 	sub	objptr, ##43232
06544     15 FA 05 56 |  if_ne	mov	result1, #21
06548     7C 00 90 5D |  if_ne	jmp	#LR__0540
0654c     56 00 00 FF 
06550     18 E5 05 F1 | 	add	objptr, ##44312
06554     F2 1E 02 FB | 	rdlong	local01, objptr
06558     01 1E 06 F1 | 	add	local01, #1
0655c     F2 1E 62 FC | 	wrlong	local01, objptr
06560     56 00 00 FF 
06564     18 E5 85 F1 | 	sub	objptr, ##44312
06568     D4 1E B0 FD | 	call	#_expr
0656c                 | ' expr()
0656c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0656c     56 00 00 FF 
06570     18 E5 05 F1 | 	add	objptr, ##44312
06574     F2 1E 02 FB | 	rdlong	local01, objptr
06578     03 1E 66 F0 | 	shl	local01, #3
0657c     02 00 00 FF 
06580     38 E4 85 F1 | 	sub	objptr, ##1080
06584     F2 1E 02 F1 | 	add	local01, objptr
06588     04 1E 06 F1 | 	add	local01, #4
0658c     0F 1F 02 FB | 	rdlong	local01, local01
06590     11 1E 0E F2 | 	cmp	local01, #17 wz
06594     54 00 00 FF 
06598     E0 E4 85 F1 | 	sub	objptr, ##43232
0659c     15 FA 05 56 |  if_ne	mov	result1, #21
065a0     24 00 90 5D |  if_ne	jmp	#LR__0540
065a4     56 00 00 FF 
065a8     18 E5 05 F1 | 	add	objptr, ##44312
065ac     F2 1E 02 FB | 	rdlong	local01, objptr
065b0     01 1E 06 F1 | 	add	local01, #1
065b4     F2 1E 62 FC | 	wrlong	local01, objptr
065b8     56 00 00 FF 
065bc     18 E5 85 F1 | 	sub	objptr, ##44312
065c0     7C 1E B0 FD | 	call	#_expr
065c4     00 FA 05 F6 | 	mov	result1, #0
065c8                 | LR__0540
065c8     A7 F0 03 F6 | 	mov	ptra, fp
065cc     B2 00 A0 FD | 	call	#popregs_
065d0                 | _compile_fun_5p_ret
065d0     2D 00 64 FD | 	ret
065d4                 | 
065d4                 | ' 
065d4                 | ' function compile_fun_varp() as ulong 
065d4                 | _compile_fun_varp
065d4     02 4A 05 F6 | 	mov	COUNT_, #2
065d8     A8 00 A0 FD | 	call	#pushregs_
065dc     00 1E 06 F6 | 	mov	local01, #0
065e0                 | ' i=0
065e0                 | ' if lparts(ct).token<>token_end then
065e0     56 00 00 FF 
065e4     18 E5 05 F1 | 	add	objptr, ##44312
065e8     F2 20 02 FB | 	rdlong	local02, objptr
065ec     03 20 66 F0 | 	shl	local02, #3
065f0     02 00 00 FF 
065f4     38 E4 85 F1 | 	sub	objptr, ##1080
065f8     F2 20 02 F1 | 	add	local02, objptr
065fc     04 20 06 F1 | 	add	local02, #4
06600     10 21 02 FB | 	rdlong	local02, local02
06604     FE 21 0E F2 | 	cmp	local02, #510 wz
06608     54 00 00 FF 
0660c     E0 E4 85 F1 | 	sub	objptr, ##43232
06610     5C 00 90 AD |  if_e	jmp	#LR__0552
06614                 | '   do
06614                 | LR__0550
06614     28 1E B0 FD | 	call	#_expr
06618     01 1E 06 F1 | 	add	local01, #1
0661c                 | '   expr()
0661c                 | '    i+=1
0661c                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
0661c     56 00 00 FF 
06620     18 E5 05 F1 | 	add	objptr, ##44312
06624     F2 20 02 FB | 	rdlong	local02, objptr
06628     03 20 66 F0 | 	shl	local02, #3
0662c     02 00 00 FF 
06630     38 E4 85 F1 | 	sub	objptr, ##1080
06634     F2 20 02 F1 | 	add	local02, objptr
06638     04 20 06 F1 | 	add	local02, #4
0663c     10 21 02 FB | 	rdlong	local02, local02
06640     11 20 0E F2 | 	cmp	local02, #17 wz
06644     54 00 00 FF 
06648     E0 E4 85 F1 | 	sub	objptr, ##43232
0664c     20 00 90 5D |  if_ne	jmp	#LR__0551
06650     56 00 00 FF 
06654     18 E5 05 F1 | 	add	objptr, ##44312
06658     F2 20 02 FB | 	rdlong	local02, objptr
0665c     01 20 06 F1 | 	add	local02, #1
06660     F2 20 62 FC | 	wrlong	local02, objptr
06664     56 00 00 FF 
06668     18 E5 85 F1 | 	sub	objptr, ##44312
0666c     A4 FF 9F FD | 	jmp	#LR__0550
06670                 | LR__0551
06670                 | LR__0552
06670                 | ' return i
06670     0F FB 01 F6 | 	mov	result1, local01
06674     A7 F0 03 F6 | 	mov	ptra, fp
06678     B2 00 A0 FD | 	call	#popregs_
0667c                 | _compile_fun_varp_ret
0667c     2D 00 64 FD | 	ret
06680                 | 
06680                 | ' 
06680                 | ' 
06680                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06680                 | _compile_print
06680     0B 4A 05 F6 | 	mov	COUNT_, #11
06684     A8 00 A0 FD | 	call	#pushregs_
06688     00 1E 06 F6 | 	mov	local01, #0
0668c     1D 22 06 F6 | 	mov	local03, #29
06690                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06690                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06690     56 00 00 FF 
06694     18 E5 05 F1 | 	add	objptr, ##44312
06698     F2 24 02 FB | 	rdlong	local04, objptr
0669c     03 24 66 F0 | 	shl	local04, #3
066a0     02 00 00 FF 
066a4     38 E4 85 F1 | 	sub	objptr, ##1080
066a8     F2 24 02 F1 | 	add	local04, objptr
066ac     04 24 06 F1 | 	add	local04, #4
066b0     12 25 02 FB | 	rdlong	local04, local04
066b4     FE 25 0E F2 | 	cmp	local04, #510 wz
066b8     54 00 00 FF 
066bc     E0 E4 85 F1 | 	sub	objptr, ##43232
066c0     68 01 90 5D |  if_ne	jmp	#LR__0560
066c4     20 22 06 F6 | 	mov	local03, #32
066c8     0F 27 02 F6 | 	mov	local05, local01
066cc     10 29 02 F6 | 	mov	local06, local02
066d0     11 2B 02 F6 | 	mov	local07, local03
066d4     69 00 00 FF 
066d8     50 E5 05 F1 | 	add	objptr, ##54096
066dc     F2 2C 02 FB | 	rdlong	local08, objptr
066e0     16 2F 02 F6 | 	mov	local09, local08
066e4     01 2E 66 F0 | 	shl	local09, #1
066e8     16 2F 02 F1 | 	add	local09, local08
066ec     02 2E 66 F0 | 	shl	local09, #2
066f0     03 00 00 FF 
066f4     00 E4 85 F1 | 	sub	objptr, ##1536
066f8     F2 2E 02 F1 | 	add	local09, objptr
066fc     17 27 62 FC | 	wrlong	local05, local09
06700     03 00 00 FF 
06704     00 E4 05 F1 | 	add	objptr, ##1536
06708     F2 26 02 FB | 	rdlong	local05, objptr
0670c     13 31 02 F6 | 	mov	local10, local05
06710     01 30 66 F0 | 	shl	local10, #1
06714     13 31 02 F1 | 	add	local10, local05
06718     02 30 66 F0 | 	shl	local10, #2
0671c     03 00 00 FF 
06720     00 E4 85 F1 | 	sub	objptr, ##1536
06724     F2 30 02 F1 | 	add	local10, objptr
06728     04 30 06 F1 | 	add	local10, #4
0672c     18 29 62 FC | 	wrlong	local06, local10
06730     03 00 00 FF 
06734     00 E4 05 F1 | 	add	objptr, ##1536
06738     F2 26 02 FB | 	rdlong	local05, objptr
0673c     13 33 02 F6 | 	mov	local11, local05
06740     01 32 66 F0 | 	shl	local11, #1
06744     13 33 02 F1 | 	add	local11, local05
06748     02 32 66 F0 | 	shl	local11, #2
0674c     03 00 00 FF 
06750     00 E4 85 F1 | 	sub	objptr, ##1536
06754     F2 32 02 F1 | 	add	local11, objptr
06758     08 32 06 F1 | 	add	local11, #8
0675c     19 2B 62 FC | 	wrlong	local07, local11
06760     03 00 00 FF 
06764     00 E4 05 F1 | 	add	objptr, ##1536
06768     F2 26 02 FB | 	rdlong	local05, objptr
0676c     01 26 06 F1 | 	add	local05, #1
06770     F2 26 62 FC | 	wrlong	local05, objptr
06774     44 22 06 F6 | 	mov	local03, #68
06778     0F 27 02 F6 | 	mov	local05, local01
0677c     10 29 02 F6 | 	mov	local06, local02
06780     11 2B 02 F6 | 	mov	local07, local03
06784     F2 2C 02 FB | 	rdlong	local08, objptr
06788     16 2F 02 F6 | 	mov	local09, local08
0678c     01 2E 66 F0 | 	shl	local09, #1
06790     16 2F 02 F1 | 	add	local09, local08
06794     02 2E 66 F0 | 	shl	local09, #2
06798     03 00 00 FF 
0679c     00 E4 85 F1 | 	sub	objptr, ##1536
067a0     F2 2E 02 F1 | 	add	local09, objptr
067a4     17 27 62 FC | 	wrlong	local05, local09
067a8     03 00 00 FF 
067ac     00 E4 05 F1 | 	add	objptr, ##1536
067b0     F2 32 02 FB | 	rdlong	local11, objptr
067b4     19 31 02 F6 | 	mov	local10, local11
067b8     01 30 66 F0 | 	shl	local10, #1
067bc     19 31 02 F1 | 	add	local10, local11
067c0     02 30 66 F0 | 	shl	local10, #2
067c4     03 00 00 FF 
067c8     00 E4 85 F1 | 	sub	objptr, ##1536
067cc     F2 30 02 F1 | 	add	local10, objptr
067d0     04 30 06 F1 | 	add	local10, #4
067d4     18 29 62 FC | 	wrlong	local06, local10
067d8     03 00 00 FF 
067dc     00 E4 05 F1 | 	add	objptr, ##1536
067e0     F2 30 02 FB | 	rdlong	local10, objptr
067e4     18 33 02 F6 | 	mov	local11, local10
067e8     01 32 66 F0 | 	shl	local11, #1
067ec     18 33 02 F1 | 	add	local11, local10
067f0     02 32 66 F0 | 	shl	local11, #2
067f4     03 00 00 FF 
067f8     00 E4 85 F1 | 	sub	objptr, ##1536
067fc     F2 32 02 F1 | 	add	local11, objptr
06800     08 32 06 F1 | 	add	local11, #8
06804     19 2B 62 FC | 	wrlong	local07, local11
06808     03 00 00 FF 
0680c     00 E4 05 F1 | 	add	objptr, ##1536
06810     F2 26 02 FB | 	rdlong	local05, objptr
06814     01 26 06 F1 | 	add	local05, #1
06818     F2 26 62 FC | 	wrlong	local05, objptr
0681c     69 00 00 FF 
06820     50 E5 85 F1 | 	sub	objptr, ##54096
06824     00 FA 05 F6 | 	mov	result1, #0
06828     20 05 90 FD | 	jmp	#LR__0567
0682c                 | LR__0560
0682c                 | ' do
0682c                 | LR__0561
0682c     10 1C B0 FD | 	call	#_expr
06830                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
06830                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06830     56 00 00 FF 
06834     18 E5 05 F1 | 	add	objptr, ##44312
06838     F2 24 02 FB | 	rdlong	local04, objptr
0683c     03 24 66 F0 | 	shl	local04, #3
06840     02 00 00 FF 
06844     38 E4 85 F1 | 	sub	objptr, ##1080
06848     F2 24 02 F1 | 	add	local04, objptr
0684c     04 24 06 F1 | 	add	local04, #4
06850     12 2D 02 FB | 	rdlong	local08, local04
06854     11 2C 0E F2 | 	cmp	local08, #17 wz
06858     54 00 00 FF 
0685c     E0 E4 85 F1 | 	sub	objptr, ##43232
06860     60 01 90 5D |  if_ne	jmp	#LR__0562
06864     21 22 06 F6 | 	mov	local03, #33
06868     0F 27 02 F6 | 	mov	local05, local01
0686c     10 29 02 F6 | 	mov	local06, local02
06870     11 2B 02 F6 | 	mov	local07, local03
06874     69 00 00 FF 
06878     50 E5 05 F1 | 	add	objptr, ##54096
0687c     F2 2C 02 FB | 	rdlong	local08, objptr
06880     16 2F 02 F6 | 	mov	local09, local08
06884     01 2E 66 F0 | 	shl	local09, #1
06888     16 2F 02 F1 | 	add	local09, local08
0688c     02 2E 66 F0 | 	shl	local09, #2
06890     03 00 00 FF 
06894     00 E4 85 F1 | 	sub	objptr, ##1536
06898     F2 2E 02 F1 | 	add	local09, objptr
0689c     17 27 62 FC | 	wrlong	local05, local09
068a0     03 00 00 FF 
068a4     00 E4 05 F1 | 	add	objptr, ##1536
068a8     F2 32 02 FB | 	rdlong	local11, objptr
068ac     19 31 02 F6 | 	mov	local10, local11
068b0     01 30 66 F0 | 	shl	local10, #1
068b4     19 31 02 F1 | 	add	local10, local11
068b8     02 30 66 F0 | 	shl	local10, #2
068bc     03 00 00 FF 
068c0     00 E4 85 F1 | 	sub	objptr, ##1536
068c4     F2 30 02 F1 | 	add	local10, objptr
068c8     04 30 06 F1 | 	add	local10, #4
068cc     18 29 62 FC | 	wrlong	local06, local10
068d0     03 00 00 FF 
068d4     00 E4 05 F1 | 	add	objptr, ##1536
068d8     F2 26 02 FB | 	rdlong	local05, objptr
068dc     13 33 02 F6 | 	mov	local11, local05
068e0     01 32 66 F0 | 	shl	local11, #1
068e4     13 33 02 F1 | 	add	local11, local05
068e8     02 32 66 F0 | 	shl	local11, #2
068ec     03 00 00 FF 
068f0     00 E4 85 F1 | 	sub	objptr, ##1536
068f4     F2 32 02 F1 | 	add	local11, objptr
068f8     08 32 06 F1 | 	add	local11, #8
068fc     19 2B 62 FC | 	wrlong	local07, local11
06900     03 00 00 FF 
06904     00 E4 05 F1 | 	add	objptr, ##1536
06908     F2 26 02 FB | 	rdlong	local05, objptr
0690c     01 26 06 F1 | 	add	local05, #1
06910     F2 26 62 FC | 	wrlong	local05, objptr
06914     44 22 06 F6 | 	mov	local03, #68
06918     0F 27 02 F6 | 	mov	local05, local01
0691c     10 29 02 F6 | 	mov	local06, local02
06920     11 2B 02 F6 | 	mov	local07, local03
06924     F2 2C 02 FB | 	rdlong	local08, objptr
06928     16 2F 02 F6 | 	mov	local09, local08
0692c     01 2E 66 F0 | 	shl	local09, #1
06930     16 2F 02 F1 | 	add	local09, local08
06934     02 2E 66 F0 | 	shl	local09, #2
06938     03 00 00 FF 
0693c     00 E4 85 F1 | 	sub	objptr, ##1536
06940     F2 2E 02 F1 | 	add	local09, objptr
06944     17 27 62 FC | 	wrlong	local05, local09
06948     03 00 00 FF 
0694c     00 E4 05 F1 | 	add	objptr, ##1536
06950     F2 32 02 FB | 	rdlong	local11, objptr
06954     19 31 02 F6 | 	mov	local10, local11
06958     01 30 66 F0 | 	shl	local10, #1
0695c     19 31 02 F1 | 	add	local10, local11
06960     02 30 66 F0 | 	shl	local10, #2
06964     03 00 00 FF 
06968     00 E4 85 F1 | 	sub	objptr, ##1536
0696c     F2 30 02 F1 | 	add	local10, objptr
06970     04 30 06 F1 | 	add	local10, #4
06974     18 29 62 FC | 	wrlong	local06, local10
06978     03 00 00 FF 
0697c     00 E4 05 F1 | 	add	objptr, ##1536
06980     F2 30 02 FB | 	rdlong	local10, objptr
06984     18 33 02 F6 | 	mov	local11, local10
06988     01 32 66 F0 | 	shl	local11, #1
0698c     18 33 02 F1 | 	add	local11, local10
06990     02 32 66 F0 | 	shl	local11, #2
06994     03 00 00 FF 
06998     00 E4 85 F1 | 	sub	objptr, ##1536
0699c     F2 32 02 F1 | 	add	local11, objptr
069a0     08 32 06 F1 | 	add	local11, #8
069a4     19 2B 62 FC | 	wrlong	local07, local11
069a8     03 00 00 FF 
069ac     00 E4 05 F1 | 	add	objptr, ##1536
069b0     F2 26 02 FB | 	rdlong	local05, objptr
069b4     01 26 06 F1 | 	add	local05, #1
069b8     F2 26 62 FC | 	wrlong	local05, objptr
069bc     69 00 00 FF 
069c0     50 E5 85 F1 | 	sub	objptr, ##54096
069c4                 | LR__0562
069c4                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
069c4     56 00 00 FF 
069c8     18 E5 05 F1 | 	add	objptr, ##44312
069cc     F2 24 02 FB | 	rdlong	local04, objptr
069d0     03 24 66 F0 | 	shl	local04, #3
069d4     02 00 00 FF 
069d8     38 E4 85 F1 | 	sub	objptr, ##1080
069dc     F2 24 02 F1 | 	add	local04, objptr
069e0     04 24 06 F1 | 	add	local04, #4
069e4     12 2D 02 FB | 	rdlong	local08, local04
069e8     12 2C 0E F2 | 	cmp	local08, #18 wz
069ec     54 00 00 FF 
069f0     E0 E4 85 F1 | 	sub	objptr, ##43232
069f4     60 01 90 5D |  if_ne	jmp	#LR__0563
069f8     22 22 06 F6 | 	mov	local03, #34
069fc     0F 27 02 F6 | 	mov	local05, local01
06a00     10 29 02 F6 | 	mov	local06, local02
06a04     11 2B 02 F6 | 	mov	local07, local03
06a08     69 00 00 FF 
06a0c     50 E5 05 F1 | 	add	objptr, ##54096
06a10     F2 2C 02 FB | 	rdlong	local08, objptr
06a14     16 2F 02 F6 | 	mov	local09, local08
06a18     01 2E 66 F0 | 	shl	local09, #1
06a1c     16 2F 02 F1 | 	add	local09, local08
06a20     02 2E 66 F0 | 	shl	local09, #2
06a24     03 00 00 FF 
06a28     00 E4 85 F1 | 	sub	objptr, ##1536
06a2c     F2 2E 02 F1 | 	add	local09, objptr
06a30     17 27 62 FC | 	wrlong	local05, local09
06a34     03 00 00 FF 
06a38     00 E4 05 F1 | 	add	objptr, ##1536
06a3c     F2 32 02 FB | 	rdlong	local11, objptr
06a40     19 31 02 F6 | 	mov	local10, local11
06a44     01 30 66 F0 | 	shl	local10, #1
06a48     19 31 02 F1 | 	add	local10, local11
06a4c     02 30 66 F0 | 	shl	local10, #2
06a50     03 00 00 FF 
06a54     00 E4 85 F1 | 	sub	objptr, ##1536
06a58     F2 30 02 F1 | 	add	local10, objptr
06a5c     04 30 06 F1 | 	add	local10, #4
06a60     18 29 62 FC | 	wrlong	local06, local10
06a64     03 00 00 FF 
06a68     00 E4 05 F1 | 	add	objptr, ##1536
06a6c     F2 26 02 FB | 	rdlong	local05, objptr
06a70     13 33 02 F6 | 	mov	local11, local05
06a74     01 32 66 F0 | 	shl	local11, #1
06a78     13 33 02 F1 | 	add	local11, local05
06a7c     02 32 66 F0 | 	shl	local11, #2
06a80     03 00 00 FF 
06a84     00 E4 85 F1 | 	sub	objptr, ##1536
06a88     F2 32 02 F1 | 	add	local11, objptr
06a8c     08 32 06 F1 | 	add	local11, #8
06a90     19 2B 62 FC | 	wrlong	local07, local11
06a94     03 00 00 FF 
06a98     00 E4 05 F1 | 	add	objptr, ##1536
06a9c     F2 26 02 FB | 	rdlong	local05, objptr
06aa0     01 26 06 F1 | 	add	local05, #1
06aa4     F2 26 62 FC | 	wrlong	local05, objptr
06aa8     44 22 06 F6 | 	mov	local03, #68
06aac     0F 27 02 F6 | 	mov	local05, local01
06ab0     10 29 02 F6 | 	mov	local06, local02
06ab4     11 2B 02 F6 | 	mov	local07, local03
06ab8     F2 2C 02 FB | 	rdlong	local08, objptr
06abc     16 2F 02 F6 | 	mov	local09, local08
06ac0     01 2E 66 F0 | 	shl	local09, #1
06ac4     16 2F 02 F1 | 	add	local09, local08
06ac8     02 2E 66 F0 | 	shl	local09, #2
06acc     03 00 00 FF 
06ad0     00 E4 85 F1 | 	sub	objptr, ##1536
06ad4     F2 2E 02 F1 | 	add	local09, objptr
06ad8     17 27 62 FC | 	wrlong	local05, local09
06adc     03 00 00 FF 
06ae0     00 E4 05 F1 | 	add	objptr, ##1536
06ae4     F2 32 02 FB | 	rdlong	local11, objptr
06ae8     19 31 02 F6 | 	mov	local10, local11
06aec     01 30 66 F0 | 	shl	local10, #1
06af0     19 31 02 F1 | 	add	local10, local11
06af4     02 30 66 F0 | 	shl	local10, #2
06af8     03 00 00 FF 
06afc     00 E4 85 F1 | 	sub	objptr, ##1536
06b00     F2 30 02 F1 | 	add	local10, objptr
06b04     04 30 06 F1 | 	add	local10, #4
06b08     18 29 62 FC | 	wrlong	local06, local10
06b0c     03 00 00 FF 
06b10     00 E4 05 F1 | 	add	objptr, ##1536
06b14     F2 30 02 FB | 	rdlong	local10, objptr
06b18     18 33 02 F6 | 	mov	local11, local10
06b1c     01 32 66 F0 | 	shl	local11, #1
06b20     18 33 02 F1 | 	add	local11, local10
06b24     02 32 66 F0 | 	shl	local11, #2
06b28     03 00 00 FF 
06b2c     00 E4 85 F1 | 	sub	objptr, ##1536
06b30     F2 32 02 F1 | 	add	local11, objptr
06b34     08 32 06 F1 | 	add	local11, #8
06b38     19 2B 62 FC | 	wrlong	local07, local11
06b3c     03 00 00 FF 
06b40     00 E4 05 F1 | 	add	objptr, ##1536
06b44     F2 26 02 FB | 	rdlong	local05, objptr
06b48     01 26 06 F1 | 	add	local05, #1
06b4c     F2 26 62 FC | 	wrlong	local05, objptr
06b50     69 00 00 FF 
06b54     50 E5 85 F1 | 	sub	objptr, ##54096
06b58                 | LR__0563
06b58                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06b58     56 00 00 FF 
06b5c     18 E5 05 F1 | 	add	objptr, ##44312
06b60     F2 24 02 FB | 	rdlong	local04, objptr
06b64     03 24 66 F0 | 	shl	local04, #3
06b68     02 00 00 FF 
06b6c     38 E4 85 F1 | 	sub	objptr, ##1080
06b70     F2 24 02 F1 | 	add	local04, objptr
06b74     04 24 06 F1 | 	add	local04, #4
06b78     12 2D 02 FB | 	rdlong	local08, local04
06b7c     FE 2D 0E F2 | 	cmp	local08, #510 wz
06b80     54 00 00 FF 
06b84     E0 E4 85 F1 | 	sub	objptr, ##43232
06b88     B8 00 90 5D |  if_ne	jmp	#LR__0564
06b8c     44 22 06 F6 | 	mov	local03, #68
06b90     0F 27 02 F6 | 	mov	local05, local01
06b94     10 29 02 F6 | 	mov	local06, local02
06b98     11 2B 02 F6 | 	mov	local07, local03
06b9c     69 00 00 FF 
06ba0     50 E5 05 F1 | 	add	objptr, ##54096
06ba4     F2 2C 02 FB | 	rdlong	local08, objptr
06ba8     16 2F 02 F6 | 	mov	local09, local08
06bac     01 2E 66 F0 | 	shl	local09, #1
06bb0     16 2F 02 F1 | 	add	local09, local08
06bb4     02 2E 66 F0 | 	shl	local09, #2
06bb8     03 00 00 FF 
06bbc     00 E4 85 F1 | 	sub	objptr, ##1536
06bc0     F2 2E 02 F1 | 	add	local09, objptr
06bc4     17 27 62 FC | 	wrlong	local05, local09
06bc8     03 00 00 FF 
06bcc     00 E4 05 F1 | 	add	objptr, ##1536
06bd0     F2 32 02 FB | 	rdlong	local11, objptr
06bd4     19 31 02 F6 | 	mov	local10, local11
06bd8     01 30 66 F0 | 	shl	local10, #1
06bdc     19 31 02 F1 | 	add	local10, local11
06be0     02 30 66 F0 | 	shl	local10, #2
06be4     03 00 00 FF 
06be8     00 E4 85 F1 | 	sub	objptr, ##1536
06bec     F2 30 02 F1 | 	add	local10, objptr
06bf0     04 30 06 F1 | 	add	local10, #4
06bf4     18 29 62 FC | 	wrlong	local06, local10
06bf8     03 00 00 FF 
06bfc     00 E4 05 F1 | 	add	objptr, ##1536
06c00     F2 30 02 FB | 	rdlong	local10, objptr
06c04     18 33 02 F6 | 	mov	local11, local10
06c08     01 32 66 F0 | 	shl	local11, #1
06c0c     18 33 02 F1 | 	add	local11, local10
06c10     02 32 66 F0 | 	shl	local11, #2
06c14     03 00 00 FF 
06c18     00 E4 85 F1 | 	sub	objptr, ##1536
06c1c     F2 32 02 F1 | 	add	local11, objptr
06c20     08 32 06 F1 | 	add	local11, #8
06c24     19 2B 62 FC | 	wrlong	local07, local11
06c28     03 00 00 FF 
06c2c     00 E4 05 F1 | 	add	objptr, ##1536
06c30     F2 26 02 FB | 	rdlong	local05, objptr
06c34     01 26 06 F1 | 	add	local05, #1
06c38     F2 26 62 FC | 	wrlong	local05, objptr
06c3c     69 00 00 FF 
06c40     50 E5 85 F1 | 	sub	objptr, ##54096
06c44                 | LR__0564
06c44                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06c44     56 00 00 FF 
06c48     18 E5 05 F1 | 	add	objptr, ##44312
06c4c     F2 24 02 FB | 	rdlong	local04, objptr
06c50     03 24 66 F0 | 	shl	local04, #3
06c54     02 00 00 FF 
06c58     38 E4 85 F1 | 	sub	objptr, ##1080
06c5c     F2 24 02 F1 | 	add	local04, objptr
06c60     04 24 06 F1 | 	add	local04, #4
06c64     12 2D 02 FB | 	rdlong	local08, local04
06c68     11 2C 0E F2 | 	cmp	local08, #17 wz
06c6c     54 00 00 FF 
06c70     E0 E4 85 F1 | 	sub	objptr, ##43232
06c74     6C 00 90 AD |  if_e	jmp	#LR__0565
06c78     56 00 00 FF 
06c7c     18 E5 05 F1 | 	add	objptr, ##44312
06c80     F2 2C 02 FB | 	rdlong	local08, objptr
06c84     03 2C 66 F0 | 	shl	local08, #3
06c88     02 00 00 FF 
06c8c     38 E4 85 F1 | 	sub	objptr, ##1080
06c90     F2 2C 02 F1 | 	add	local08, objptr
06c94     04 2C 06 F1 | 	add	local08, #4
06c98     16 2D 02 FB | 	rdlong	local08, local08
06c9c     12 2C 0E F2 | 	cmp	local08, #18 wz
06ca0     54 00 00 FF 
06ca4     E0 E4 85 F1 | 	sub	objptr, ##43232
06ca8     38 00 90 AD |  if_e	jmp	#LR__0565
06cac     56 00 00 FF 
06cb0     18 E5 05 F1 | 	add	objptr, ##44312
06cb4     F2 32 02 FB | 	rdlong	local11, objptr
06cb8     03 32 66 F0 | 	shl	local11, #3
06cbc     02 00 00 FF 
06cc0     38 E4 85 F1 | 	sub	objptr, ##1080
06cc4     F2 32 02 F1 | 	add	local11, objptr
06cc8     04 32 06 F1 | 	add	local11, #4
06ccc     19 33 02 FB | 	rdlong	local11, local11
06cd0     FE 33 0E F2 | 	cmp	local11, #510 wz
06cd4     54 00 00 FF 
06cd8     E0 E4 85 F1 | 	sub	objptr, ##43232
06cdc     16 FA 05 56 |  if_ne	mov	result1, #22
06ce0     68 00 90 5D |  if_ne	jmp	#LR__0567
06ce4                 | LR__0565
06ce4     56 00 00 FF 
06ce8     18 E5 05 F1 | 	add	objptr, ##44312
06cec     F2 24 02 FB | 	rdlong	local04, objptr
06cf0     01 24 06 F1 | 	add	local04, #1
06cf4     F2 24 62 FC | 	wrlong	local04, objptr
06cf8     03 24 66 F0 | 	shl	local04, #3
06cfc     02 00 00 FF 
06d00     38 E4 85 F1 | 	sub	objptr, ##1080
06d04     F2 24 02 F1 | 	add	local04, objptr
06d08     04 24 06 F1 | 	add	local04, #4
06d0c     12 2D 02 FB | 	rdlong	local08, local04
06d10     FE 2D 0E F2 | 	cmp	local08, #510 wz
06d14     54 00 00 FF 
06d18     E0 E4 85 F1 | 	sub	objptr, ##43232
06d1c     28 00 90 AD |  if_e	jmp	#LR__0566
06d20     56 00 00 FF 
06d24     18 E5 05 F1 | 	add	objptr, ##44312
06d28     F2 32 02 FB | 	rdlong	local11, objptr
06d2c     0E 00 00 FF 
06d30     1C E4 05 F1 | 	add	objptr, ##7196
06d34     F2 30 02 FB | 	rdlong	local10, objptr
06d38     64 00 00 FF 
06d3c     34 E5 85 F1 | 	sub	objptr, ##51508
06d40     18 33 52 F2 | 	cmps	local11, local10 wc
06d44     E4 FA 9F CD |  if_b	jmp	#LR__0561
06d48                 | LR__0566
06d48                 | ' return 0
06d48     00 FA 05 F6 | 	mov	result1, #0
06d4c                 | LR__0567
06d4c     A7 F0 03 F6 | 	mov	ptra, fp
06d50     B2 00 A0 FD | 	call	#popregs_
06d54                 | _compile_print_ret
06d54     2D 00 64 FD | 	ret
06d58                 | 
06d58                 | ' 
06d58                 | ' function compile_if() as ulong  
06d58                 | _compile_if
06d58     05 4A 05 F6 | 	mov	COUNT_, #5
06d5c     A8 00 A0 FD | 	call	#pushregs_
06d60                 | _compile_if_enter
06d60     DC 16 B0 FD | 	call	#_expr
06d64                 | ' expr()
06d64                 | ' return 0
06d64     56 00 00 FF 
06d68     18 E5 05 F1 | 	add	objptr, ##44312
06d6c     F2 FA 01 FB | 	rdlong	result1, objptr
06d70     01 FA 05 F1 | 	add	result1, #1
06d74     F2 FA 61 FC | 	wrlong	result1, objptr
06d78     58 22 06 F6 | 	mov	local03, #88
06d7c     0F 25 02 F6 | 	mov	local04, local01
06d80     10 27 02 F6 | 	mov	local05, local02
06d84     11 1F 02 F6 | 	mov	local01, local03
06d88     13 00 00 FF 
06d8c     38 E4 05 F1 | 	add	objptr, ##9784
06d90     F2 12 02 FB | 	rdlong	arg01, objptr
06d94     09 FB 01 F6 | 	mov	result1, arg01
06d98     01 FA 65 F0 | 	shl	result1, #1
06d9c     09 FB 01 F1 | 	add	result1, arg01
06da0     02 FA 65 F0 | 	shl	result1, #2
06da4     03 00 00 FF 
06da8     00 E4 85 F1 | 	sub	objptr, ##1536
06dac     F2 FA 01 F1 | 	add	result1, objptr
06db0     FD 24 62 FC | 	wrlong	local04, result1
06db4     03 00 00 FF 
06db8     00 E4 05 F1 | 	add	objptr, ##1536
06dbc     F2 12 02 FB | 	rdlong	arg01, objptr
06dc0     09 25 02 F6 | 	mov	local04, arg01
06dc4     01 24 66 F0 | 	shl	local04, #1
06dc8     09 25 02 F1 | 	add	local04, arg01
06dcc     02 24 66 F0 | 	shl	local04, #2
06dd0     03 00 00 FF 
06dd4     00 E4 85 F1 | 	sub	objptr, ##1536
06dd8     F2 24 02 F1 | 	add	local04, objptr
06ddc     04 24 06 F1 | 	add	local04, #4
06de0     12 27 62 FC | 	wrlong	local05, local04
06de4     03 00 00 FF 
06de8     00 E4 05 F1 | 	add	objptr, ##1536
06dec     F2 24 02 FB | 	rdlong	local04, objptr
06df0     12 27 02 F6 | 	mov	local05, local04
06df4     01 26 66 F0 | 	shl	local05, #1
06df8     12 27 02 F1 | 	add	local05, local04
06dfc     02 26 66 F0 | 	shl	local05, #2
06e00     03 00 00 FF 
06e04     00 E4 85 F1 | 	sub	objptr, ##1536
06e08     F2 26 02 F1 | 	add	local05, objptr
06e0c     08 26 06 F1 | 	add	local05, #8
06e10     13 1F 62 FC | 	wrlong	local01, local05
06e14     03 00 00 FF 
06e18     00 E4 05 F1 | 	add	objptr, ##1536
06e1c     F2 24 02 FB | 	rdlong	local04, objptr
06e20     01 24 06 F1 | 	add	local04, #1
06e24     F2 24 62 FC | 	wrlong	local04, objptr
06e28                 | ' 
06e28                 | ' 'print "In compile_if"
06e28                 | ' compile_fun_1p()
06e28                 | ' cmd=lparts(ct).token : ct+=1
06e28                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
06e28                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
06e28                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06e28     13 00 00 FF 
06e2c     38 E4 85 F1 | 	sub	objptr, ##9784
06e30     F2 26 02 FB | 	rdlong	local05, objptr
06e34     01 26 06 F1 | 	add	local05, #1
06e38     03 26 66 F0 | 	shl	local05, #3
06e3c     02 00 00 FF 
06e40     38 E4 85 F1 | 	sub	objptr, ##1080
06e44     F2 26 02 F1 | 	add	local05, objptr
06e48     13 13 02 FB | 	rdlong	arg01, local05
06e4c     54 00 00 FF 
06e50     E0 E4 85 F1 | 	sub	objptr, ##43232
06e54                 | ' 
06e54                 | ' select case s
06e54     42 01 00 FF 
06e58     C9 14 06 F6 | 	mov	arg02, ##@LR__4384
06e5c     AC 1F B1 FD | 	call	#__system___string_cmp
06e60     00 FA 0D F2 | 	cmp	result1, #0 wz
06e64     1B FA 05 A6 |  if_e	mov	result1, #27
06e68     00 FA 05 56 |  if_ne	mov	result1, #0
06e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e70     0C 00 90 AD |  if_e	jmp	#LR__0570
06e74     05 12 06 F6 | 	mov	arg01, #5
06e78     88 ED BF FD | 	call	#_compile_immediate_assign
06e7c     08 00 90 FD | 	jmp	#LR__0571
06e80                 | LR__0570
06e80     05 12 06 F6 | 	mov	arg01, #5
06e84     70 E5 BF FD | 	call	#_compile_immediate
06e88                 | LR__0571
06e88                 | ' 
06e88                 | ' 
06e88                 | ' return 0
06e88     00 FA 05 F6 | 	mov	result1, #0
06e8c     A7 F0 03 F6 | 	mov	ptra, fp
06e90     B2 00 A0 FD | 	call	#popregs_
06e94                 | _compile_if_ret
06e94     2D 00 64 FD | 	ret
06e98                 | 
06e98                 | ' 
06e98                 | ' function compile_else() as ulong  
06e98                 | _compile_else
06e98     05 4A 05 F6 | 	mov	COUNT_, #5
06e9c     A8 00 A0 FD | 	call	#pushregs_
06ea0                 | _compile_else_enter
06ea0     5A 22 06 F6 | 	mov	local03, #90
06ea4     0F 25 02 F6 | 	mov	local04, local01
06ea8     10 27 02 F6 | 	mov	local05, local02
06eac     11 1F 02 F6 | 	mov	local01, local03
06eb0     69 00 00 FF 
06eb4     50 E5 05 F1 | 	add	objptr, ##54096
06eb8     F2 12 02 FB | 	rdlong	arg01, objptr
06ebc     09 FB 01 F6 | 	mov	result1, arg01
06ec0     01 FA 65 F0 | 	shl	result1, #1
06ec4     09 FB 01 F1 | 	add	result1, arg01
06ec8     02 FA 65 F0 | 	shl	result1, #2
06ecc     03 00 00 FF 
06ed0     00 E4 85 F1 | 	sub	objptr, ##1536
06ed4     F2 FA 01 F1 | 	add	result1, objptr
06ed8     FD 24 62 FC | 	wrlong	local04, result1
06edc     03 00 00 FF 
06ee0     00 E4 05 F1 | 	add	objptr, ##1536
06ee4     F2 FA 01 FB | 	rdlong	result1, objptr
06ee8     FD 24 02 F6 | 	mov	local04, result1
06eec     01 24 66 F0 | 	shl	local04, #1
06ef0     FD 24 02 F1 | 	add	local04, result1
06ef4     02 24 66 F0 | 	shl	local04, #2
06ef8     03 00 00 FF 
06efc     00 E4 85 F1 | 	sub	objptr, ##1536
06f00     F2 24 02 F1 | 	add	local04, objptr
06f04     04 24 06 F1 | 	add	local04, #4
06f08     12 27 62 FC | 	wrlong	local05, local04
06f0c     03 00 00 FF 
06f10     00 E4 05 F1 | 	add	objptr, ##1536
06f14     F2 24 02 FB | 	rdlong	local04, objptr
06f18     12 27 02 F6 | 	mov	local05, local04
06f1c     01 26 66 F0 | 	shl	local05, #1
06f20     12 27 02 F1 | 	add	local05, local04
06f24     02 26 66 F0 | 	shl	local05, #2
06f28     03 00 00 FF 
06f2c     00 E4 85 F1 | 	sub	objptr, ##1536
06f30     F2 26 02 F1 | 	add	local05, objptr
06f34     08 26 06 F1 | 	add	local05, #8
06f38     13 1F 62 FC | 	wrlong	local01, local05
06f3c     03 00 00 FF 
06f40     00 E4 05 F1 | 	add	objptr, ##1536
06f44     F2 24 02 FB | 	rdlong	local04, objptr
06f48     01 24 06 F1 | 	add	local04, #1
06f4c     F2 24 62 FC | 	wrlong	local04, objptr
06f50                 | ' 
06f50                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06f50                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06f50     13 00 00 FF 
06f54     38 E4 85 F1 | 	sub	objptr, ##9784
06f58     F2 26 02 FB | 	rdlong	local05, objptr
06f5c     01 26 06 F1 | 	add	local05, #1
06f60     03 26 66 F0 | 	shl	local05, #3
06f64     02 00 00 FF 
06f68     38 E4 85 F1 | 	sub	objptr, ##1080
06f6c     F2 26 02 F1 | 	add	local05, objptr
06f70     13 13 02 FB | 	rdlong	arg01, local05
06f74     54 00 00 FF 
06f78     E0 E4 85 F1 | 	sub	objptr, ##43232
06f7c                 | ' 
06f7c                 | ' select case s
06f7c     42 01 00 FF 
06f80     C9 14 06 F6 | 	mov	arg02, ##@LR__4384
06f84     84 1E B1 FD | 	call	#__system___string_cmp
06f88     00 FA 0D F2 | 	cmp	result1, #0 wz
06f8c     1B FA 05 A6 |  if_e	mov	result1, #27
06f90     00 FA 05 56 |  if_ne	mov	result1, #0
06f94     00 FA 0D F2 | 	cmp	result1, #0 wz
06f98     0C 00 90 AD |  if_e	jmp	#LR__0580
06f9c     05 12 06 F6 | 	mov	arg01, #5
06fa0     60 EC BF FD | 	call	#_compile_immediate_assign
06fa4     08 00 90 FD | 	jmp	#LR__0581
06fa8                 | LR__0580
06fa8     05 12 06 F6 | 	mov	arg01, #5
06fac     48 E4 BF FD | 	call	#_compile_immediate
06fb0                 | LR__0581
06fb0                 | ' 
06fb0                 | ' 
06fb0                 | ' return 0
06fb0     00 FA 05 F6 | 	mov	result1, #0
06fb4     A7 F0 03 F6 | 	mov	ptra, fp
06fb8     B2 00 A0 FD | 	call	#popregs_
06fbc                 | _compile_else_ret
06fbc     2D 00 64 FD | 	ret
06fc0                 | 
06fc0                 | ' 
06fc0                 | ' 
06fc0                 | ' function compile_dim() as ulong  
06fc0                 | _compile_dim
06fc0     11 4A 05 F6 | 	mov	COUNT_, #17
06fc4     A8 00 A0 FD | 	call	#pushregs_
06fc8     01 1E 06 F6 | 	mov	local01, #1
06fcc     01 20 06 F6 | 	mov	local02, #1
06fd0     01 22 06 F6 | 	mov	local03, #1
06fd4                 | ' 
06fd4                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06fd4                 | ' 
06fd4                 | ' if isname(lparts(ct).part$) then 
06fd4     56 00 00 FF 
06fd8     18 E5 05 F1 | 	add	objptr, ##44312
06fdc     F2 18 02 FB | 	rdlong	arg04, objptr
06fe0     03 18 66 F0 | 	shl	arg04, #3
06fe4     02 00 00 FF 
06fe8     38 E4 85 F1 | 	sub	objptr, ##1080
06fec     F2 18 02 F1 | 	add	arg04, objptr
06ff0     0C 13 02 FB | 	rdlong	arg01, arg04
06ff4     54 00 00 FF 
06ff8     E0 E4 85 F1 | 	sub	objptr, ##43232
06ffc     D0 D3 BF FD | 	call	#_isname
07000     00 FA 0D F2 | 	cmp	result1, #0 wz
07004     AC 05 90 AD |  if_e	jmp	#LR__0614
07008     56 00 00 FF 
0700c     18 E5 05 F1 | 	add	objptr, ##44312
07010     F2 24 02 FB | 	rdlong	local04, objptr
07014     03 24 66 F0 | 	shl	local04, #3
07018     02 00 00 FF 
0701c     38 E4 85 F1 | 	sub	objptr, ##1080
07020     F2 24 02 F1 | 	add	local04, objptr
07024     12 27 02 FB | 	rdlong	local05, local04
07028     01 28 66 F6 | 	neg	local06, #1
0702c                 | '   varname2$=lparts(ct).part$ 
0702c                 | '   j=-1
0702c                 | '   if varnum>0 then
0702c     04 E4 85 F1 | 	sub	objptr, #4
07030     F2 2A 02 FB | 	rdlong	local07, objptr
07034     54 00 00 FF 
07038     DC E4 85 F1 | 	sub	objptr, ##43228
0703c     01 2A 56 F2 | 	cmps	local07, #1 wc
07040     58 00 90 CD |  if_b	jmp	#LR__0592
07044                 | '  '   print "in dim, varnum=";varnum
07044                 | '     for i=0 to varnum-1
07044     00 2C 06 F6 | 	mov	local08, #0
07048     54 00 00 FF 
0704c     DC E4 05 F1 | 	add	objptr, ##43228
07050     F2 2E 02 FB | 	rdlong	local09, objptr
07054     54 00 00 FF 
07058     DC E4 85 F1 | 	sub	objptr, ##43228
0705c                 | LR__0590
0705c     17 2D 52 F2 | 	cmps	local08, local09 wc
07060     38 00 90 3D |  if_ae	jmp	#LR__0591
07064                 | '       if variables(i).name=varname2$ then j=i : exit
07064     16 25 02 F6 | 	mov	local04, local08
07068     04 24 66 F0 | 	shl	local04, #4
0706c     34 00 00 FF 
07070     DC E4 05 F1 | 	add	objptr, ##26844
07074     F2 24 02 F1 | 	add	local04, objptr
07078     12 13 02 FB | 	rdlong	arg01, local04
0707c     13 15 02 F6 | 	mov	arg02, local05
07080     34 00 00 FF 
07084     DC E4 85 F1 | 	sub	objptr, ##26844
07088     80 1D B1 FD | 	call	#__system___string_cmp
0708c     00 FA 0D F2 | 	cmp	result1, #0 wz
07090     16 29 02 A6 |  if_e	mov	local06, local08
07094     01 2C 06 51 |  if_ne	add	local08, #1
07098     C0 FF 9F 5D |  if_ne	jmp	#LR__0590
0709c                 | LR__0591
0709c                 | LR__0592
0709c                 | ' '  if j<>-1 then printerror (42) : return 42
0709c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0709c     FF FF 7F FF 
070a0     FF 29 0E F2 | 	cmp	local06, ##-1 wz
070a4     54 00 00 AF 
070a8     DC E4 05 A1 |  if_e	add	objptr, ##43228
070ac     F2 28 02 AB |  if_e	rdlong	local06, objptr
070b0     54 00 00 AF 
070b4     DC E4 85 A1 |  if_e	sub	objptr, ##43228
070b8     78 00 90 AD |  if_e	jmp	#LR__0593
070bc     00 12 06 F6 | 	mov	arg01, #0
070c0     24 76 B1 FD | 	call	#__system___getiolock_0423
070c4     FD 12 02 F6 | 	mov	arg01, result1
070c8     18 1D B1 FD | 	call	#__system___lockmem
070cc     43 01 00 FF 
070d0     31 15 06 F6 | 	mov	arg02, ##@LR__4532
070d4     00 12 06 F6 | 	mov	arg01, #0
070d8     00 16 06 F6 | 	mov	arg03, #0
070dc     F8 29 B1 FD | 	call	#__system___basic_print_string
070e0     7A 00 00 FF 
070e4     64 E5 05 F1 | 	add	objptr, ##62820
070e8     F2 14 02 FB | 	rdlong	arg02, objptr
070ec     7A 00 00 FF 
070f0     64 E5 85 F1 | 	sub	objptr, ##62820
070f4     00 12 06 F6 | 	mov	arg01, #0
070f8     00 16 06 F6 | 	mov	arg03, #0
070fc     0A 18 06 F6 | 	mov	arg04, #10
07100     58 2A B1 FD | 	call	#__system___basic_print_unsigned
07104     43 01 00 FF 
07108     3F 15 06 F6 | 	mov	arg02, ##@LR__4533
0710c     00 12 06 F6 | 	mov	arg01, #0
07110     00 16 06 F6 | 	mov	arg03, #0
07114     C0 29 B1 FD | 	call	#__system___basic_print_string
07118     00 12 06 F6 | 	mov	arg01, #0
0711c     0A 14 06 F6 | 	mov	arg02, #10
07120     00 16 06 F6 | 	mov	arg03, #0
07124     58 29 B1 FD | 	call	#__system___basic_print_char
07128     00 12 06 F6 | 	mov	arg01, #0
0712c     B8 75 B1 FD | 	call	#__system___getiolock_0423
07130     FD 00 68 FC | 	wrlong	#0, result1
07134                 | LR__0593
07134                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07134     56 00 00 FF 
07138     18 E5 05 F1 | 	add	objptr, ##44312
0713c     F2 18 02 FB | 	rdlong	arg04, objptr
07140     01 18 06 F1 | 	add	arg04, #1
07144     03 18 66 F0 | 	shl	arg04, #3
07148     02 00 00 FF 
0714c     38 E4 85 F1 | 	sub	objptr, ##1080
07150     F2 18 02 F1 | 	add	arg04, objptr
07154     0C 13 02 FB | 	rdlong	arg01, arg04
07158     43 01 00 FF 
0715c     60 15 06 F6 | 	mov	arg02, ##@LR__4534
07160     54 00 00 FF 
07164     E0 E4 85 F1 | 	sub	objptr, ##43232
07168     A0 1C B1 FD | 	call	#__system___string_cmp
0716c     00 FA 0D F2 | 	cmp	result1, #0 wz
07170     50 00 90 AD |  if_e	jmp	#LR__0594
07174     56 00 00 FF 
07178     18 E5 05 F1 | 	add	objptr, ##44312
0717c     F2 2E 02 FB | 	rdlong	local09, objptr
07180     01 2E 06 F1 | 	add	local09, #1
07184     03 2E 66 F0 | 	shl	local09, #3
07188     02 00 00 FF 
0718c     38 E4 85 F1 | 	sub	objptr, ##1080
07190     F2 2E 02 F1 | 	add	local09, objptr
07194     17 13 02 FB | 	rdlong	arg01, local09
07198     43 01 00 FF 
0719c     62 15 06 F6 | 	mov	arg02, ##@LR__4535
071a0     54 00 00 FF 
071a4     E0 E4 85 F1 | 	sub	objptr, ##43232
071a8     60 1C B1 FD | 	call	#__system___string_cmp
071ac     00 FA 0D F2 | 	cmp	result1, #0 wz
071b0     10 00 90 AD |  if_e	jmp	#LR__0594
071b4     2B 12 06 F6 | 	mov	arg01, #43
071b8     A4 E6 B0 FD | 	call	#_printerror
071bc     2B FA 05 F6 | 	mov	result1, #43
071c0     38 05 90 FD | 	jmp	#LR__0616
071c4                 | LR__0594
071c4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
071c4     56 00 00 FF 
071c8     18 E5 05 F1 | 	add	objptr, ##44312
071cc     F2 14 02 FB | 	rdlong	arg02, objptr
071d0     01 14 06 F1 | 	add	arg02, #1
071d4     03 14 66 F0 | 	shl	arg02, #3
071d8     02 00 00 FF 
071dc     38 E4 85 F1 | 	sub	objptr, ##1080
071e0     F2 14 02 F1 | 	add	arg02, objptr
071e4     0A 13 02 FB | 	rdlong	arg01, arg02
071e8     43 01 00 FF 
071ec     65 15 06 F6 | 	mov	arg02, ##@LR__4536
071f0     54 00 00 FF 
071f4     E0 E4 85 F1 | 	sub	objptr, ##43232
071f8     10 1C B1 FD | 	call	#__system___string_cmp
071fc     00 FA 0D F2 | 	cmp	result1, #0 wz
07200     56 00 00 AF 
07204     18 E5 05 A1 |  if_e	add	objptr, ##44312
07208     F2 30 02 AB |  if_e	rdlong	local10, objptr
0720c     56 00 00 AF 
07210     18 E5 85 A1 |  if_e	sub	objptr, ##44312
07214     01 30 06 A1 |  if_e	add	local10, #1
07218     7C 01 90 AD |  if_e	jmp	#LR__0600
0721c     56 00 00 FF 
07220     18 E5 05 F1 | 	add	objptr, ##44312
07224     F2 30 02 FB | 	rdlong	local10, objptr
07228     56 00 00 FF 
0722c     18 E5 85 F1 | 	sub	objptr, ##44312
07230     02 30 06 F1 | 	add	local10, #2
07234     00 32 06 F6 | 	mov	local11, #0
07238                 | '   l=ct+2 : m=0 : do
07238                 | LR__0595
07238                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07238                 | '     if isdec(lparts(l).part$) then 
07238     18 25 02 F6 | 	mov	local04, local10
0723c     03 24 66 F0 | 	shl	local04, #3
07240     54 00 00 FF 
07244     E0 E4 05 F1 | 	add	objptr, ##43232
07248     F2 24 02 F1 | 	add	local04, objptr
0724c     12 13 02 FB | 	rdlong	arg01, local04
07250     54 00 00 FF 
07254     E0 E4 85 F1 | 	sub	objptr, ##43232
07258     18 D8 BF FD | 	call	#_isdec
0725c     00 FA 0D F2 | 	cmp	result1, #0 wz
07260     44 00 90 AD |  if_e	jmp	#LR__0596
07264     19 35 02 F6 | 	mov	local12, local11
07268     0F 35 06 F1 | 	add	local12, #local01
0726c     18 2F 02 F6 | 	mov	local09, local10
07270     03 2E 66 F0 | 	shl	local09, #3
07274     54 00 00 FF 
07278     E0 E4 05 F1 | 	add	objptr, ##43232
0727c     F2 2E 02 F1 | 	add	local09, objptr
07280     17 13 02 FB | 	rdlong	arg01, local09
07284     00 14 06 F6 | 	mov	arg02, #0
07288     54 00 00 FF 
0728c     E0 E4 85 F1 | 	sub	objptr, ##43232
07290     B4 4C B1 FD | 	call	#__system____builtin_atoi
07294     FD 36 02 F6 | 	mov	local13, result1
07298                 | 	'.live	local13
07298                 | 	'.live	local12
07298     00 34 8E F9 | 	altd	local12, #0
0729c     1B 35 02 F6 | 	mov	local12, local13
072a0     01 32 06 F1 | 	add	local11, #1
072a4     10 00 90 FD | 	jmp	#LR__0597
072a8                 | LR__0596
072a8     11 12 06 F6 | 	mov	arg01, #17
072ac     B0 E5 B0 FD | 	call	#_printerror
072b0                 | '       printerror (17)  : return(17)
072b0     11 FA 05 F6 | 	mov	result1, #17
072b4     44 04 90 FD | 	jmp	#LR__0616
072b8                 | LR__0597
072b8                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
072b8     18 25 02 F6 | 	mov	local04, local10
072bc     01 24 06 F1 | 	add	local04, #1
072c0     03 24 66 F0 | 	shl	local04, #3
072c4     54 00 00 FF 
072c8     E0 E4 05 F1 | 	add	objptr, ##43232
072cc     F2 24 02 F1 | 	add	local04, objptr
072d0     12 13 02 FB | 	rdlong	arg01, local04
072d4     43 01 00 FF 
072d8     68 15 06 F6 | 	mov	arg02, ##@LR__4537
072dc     54 00 00 FF 
072e0     E0 E4 85 F1 | 	sub	objptr, ##43232
072e4     24 1B B1 FD | 	call	#__system___string_cmp
072e8     00 FA 0D F2 | 	cmp	result1, #0 wz
072ec     48 00 90 AD |  if_e	jmp	#LR__0598
072f0     18 37 02 F6 | 	mov	local13, local10
072f4     01 36 06 F1 | 	add	local13, #1
072f8     03 36 66 F0 | 	shl	local13, #3
072fc     54 00 00 FF 
07300     E0 E4 05 F1 | 	add	objptr, ##43232
07304     F2 36 02 F1 | 	add	local13, objptr
07308     1B 13 02 FB | 	rdlong	arg01, local13
0730c     43 01 00 FF 
07310     6A 15 06 F6 | 	mov	arg02, ##@LR__4538
07314     54 00 00 FF 
07318     E0 E4 85 F1 | 	sub	objptr, ##43232
0731c     EC 1A B1 FD | 	call	#__system___string_cmp
07320     00 FA 0D F2 | 	cmp	result1, #0 wz
07324     10 00 90 AD |  if_e	jmp	#LR__0598
07328     2C 12 06 F6 | 	mov	arg01, #44
0732c     30 E5 B0 FD | 	call	#_printerror
07330     2C FA 05 F6 | 	mov	result1, #44
07334     C4 03 90 FD | 	jmp	#LR__0616
07338                 | LR__0598
07338     02 30 06 F1 | 	add	local10, #2
0733c     18 25 02 F6 | 	mov	local04, local10
07340     01 24 86 F1 | 	sub	local04, #1
07344     03 24 66 F0 | 	shl	local04, #3
07348     54 00 00 FF 
0734c     E0 E4 05 F1 | 	add	objptr, ##43232
07350     F2 24 02 F1 | 	add	local04, objptr
07354     12 13 02 FB | 	rdlong	arg01, local04
07358     43 01 00 FF 
0735c     6C 15 06 F6 | 	mov	arg02, ##@LR__4539
07360     54 00 00 FF 
07364     E0 E4 85 F1 | 	sub	objptr, ##43232
07368     A0 1A B1 FD | 	call	#__system___string_cmp
0736c     00 FA 0D F2 | 	cmp	result1, #0 wz
07370     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07374     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0595
07378                 | '   if m>3 then printerror(45): return(45)
07378     04 32 56 F2 | 	cmps	local11, #4 wc
0737c     10 00 90 CD |  if_b	jmp	#LR__0599
07380     2D 12 06 F6 | 	mov	arg01, #45
07384     D8 E4 B0 FD | 	call	#_printerror
07388     2D FA 05 F6 | 	mov	result1, #45
0738c     6C 03 90 FD | 	jmp	#LR__0616
07390                 | LR__0599
07390     00 39 06 F6 | 	mov	local14, #256
07394     0C 3A 06 F6 | 	mov	local15, #12
07398                 | LR__0600
07398                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07398                 | '   arraytype=array_no_type : esize=12
07398                 | ' 1350 
07398                 | '   if lparts(l).part$="as" then
07398     18 25 02 F6 | 	mov	local04, local10
0739c     03 24 66 F0 | 	shl	local04, #3
073a0     54 00 00 FF 
073a4     E0 E4 05 F1 | 	add	objptr, ##43232
073a8     F2 24 02 F1 | 	add	local04, objptr
073ac     12 13 02 FB | 	rdlong	arg01, local04
073b0     43 01 00 FF 
073b4     6E 15 06 F6 | 	mov	arg02, ##@LR__4540
073b8     54 00 00 FF 
073bc     E0 E4 85 F1 | 	sub	objptr, ##43232
073c0     48 1A B1 FD | 	call	#__system___string_cmp
073c4     00 FA 0D F2 | 	cmp	result1, #0 wz
073c8     F8 01 90 5D |  if_ne	jmp	#LR__0615
073cc                 | '     select case lparts(l+1).part$
073cc     18 35 02 F6 | 	mov	local12, local10
073d0     01 34 06 F1 | 	add	local12, #1
073d4     03 34 66 F0 | 	shl	local12, #3
073d8     54 00 00 FF 
073dc     E0 E4 05 F1 | 	add	objptr, ##43232
073e0     F2 34 02 F1 | 	add	local12, objptr
073e4     1A 3D 02 FB | 	rdlong	local16, local12
073e8     43 01 00 FF 
073ec     71 15 06 F6 | 	mov	arg02, ##@LR__4541
073f0     1E 13 02 F6 | 	mov	arg01, local16
073f4     54 00 00 FF 
073f8     E0 E4 85 F1 | 	sub	objptr, ##43232
073fc     0C 1A B1 FD | 	call	#__system___string_cmp
07400     00 FA 0D F2 | 	cmp	result1, #0 wz
07404     0C 01 90 AD |  if_e	jmp	#LR__0601
07408     43 01 00 FF 
0740c     76 15 06 F6 | 	mov	arg02, ##@LR__4542
07410     1E 13 02 F6 | 	mov	arg01, local16
07414     F4 19 B1 FD | 	call	#__system___string_cmp
07418     00 FA 0D F2 | 	cmp	result1, #0 wz
0741c     00 01 90 AD |  if_e	jmp	#LR__0602
07420     43 01 00 FF 
07424     7C 15 06 F6 | 	mov	arg02, ##@LR__4543
07428     1E 13 02 F6 | 	mov	arg01, local16
0742c     DC 19 B1 FD | 	call	#__system___string_cmp
07430     00 FA 0D F2 | 	cmp	result1, #0 wz
07434     F4 00 90 AD |  if_e	jmp	#LR__0603
07438     43 01 00 FF 
0743c     82 15 06 F6 | 	mov	arg02, ##@LR__4544
07440     1E 13 02 F6 | 	mov	arg01, local16
07444     C4 19 B1 FD | 	call	#__system___string_cmp
07448     00 FA 0D F2 | 	cmp	result1, #0 wz
0744c     E8 00 90 AD |  if_e	jmp	#LR__0604
07450     43 01 00 FF 
07454     89 15 06 F6 | 	mov	arg02, ##@LR__4545
07458     1E 13 02 F6 | 	mov	arg01, local16
0745c     AC 19 B1 FD | 	call	#__system___string_cmp
07460     00 FA 0D F2 | 	cmp	result1, #0 wz
07464     DC 00 90 AD |  if_e	jmp	#LR__0605
07468     43 01 00 FF 
0746c     8E 15 06 F6 | 	mov	arg02, ##@LR__4546
07470     1E 13 02 F6 | 	mov	arg01, local16
07474     94 19 B1 FD | 	call	#__system___string_cmp
07478     00 FA 0D F2 | 	cmp	result1, #0 wz
0747c     D0 00 90 AD |  if_e	jmp	#LR__0606
07480     43 01 00 FF 
07484     96 15 06 F6 | 	mov	arg02, ##@LR__4547
07488     1E 13 02 F6 | 	mov	arg01, local16
0748c     7C 19 B1 FD | 	call	#__system___string_cmp
07490     00 FA 0D F2 | 	cmp	result1, #0 wz
07494     C4 00 90 AD |  if_e	jmp	#LR__0607
07498     43 01 00 FF 
0749c     9C 15 06 F6 | 	mov	arg02, ##@LR__4548
074a0     1E 13 02 F6 | 	mov	arg01, local16
074a4     64 19 B1 FD | 	call	#__system___string_cmp
074a8     00 FA 0D F2 | 	cmp	result1, #0 wz
074ac     B8 00 90 AD |  if_e	jmp	#LR__0608
074b0     43 01 00 FF 
074b4     A2 15 06 F6 | 	mov	arg02, ##@LR__4549
074b8     1E 13 02 F6 | 	mov	arg01, local16
074bc     4C 19 B1 FD | 	call	#__system___string_cmp
074c0     00 FA 0D F2 | 	cmp	result1, #0 wz
074c4     AC 00 90 AD |  if_e	jmp	#LR__0609
074c8     43 01 00 FF 
074cc     A9 15 06 F6 | 	mov	arg02, ##@LR__4550
074d0     1E 13 02 F6 | 	mov	arg01, local16
074d4     34 19 B1 FD | 	call	#__system___string_cmp
074d8     00 FA 0D F2 | 	cmp	result1, #0 wz
074dc     A0 00 90 AD |  if_e	jmp	#LR__0610
074e0     43 01 00 FF 
074e4     B0 15 06 F6 | 	mov	arg02, ##@LR__4551
074e8     1E 13 02 F6 | 	mov	arg01, local16
074ec     1C 19 B1 FD | 	call	#__system___string_cmp
074f0     00 FA 0D F2 | 	cmp	result1, #0 wz
074f4     94 00 90 AD |  if_e	jmp	#LR__0611
074f8     43 01 00 FF 
074fc     B7 15 06 F6 | 	mov	arg02, ##@LR__4552
07500     1E 13 02 F6 | 	mov	arg01, local16
07504     04 19 B1 FD | 	call	#__system___string_cmp
07508     00 FA 0D F2 | 	cmp	result1, #0 wz
0750c     88 00 90 AD |  if_e	jmp	#LR__0612
07510     90 00 90 FD | 	jmp	#LR__0613
07514                 | LR__0601
07514     01 39 06 F6 | 	mov	local14, #257
07518     01 3A 06 F6 | 	mov	local15, #1
0751c     A4 00 90 FD | 	jmp	#LR__0615
07520                 | LR__0602
07520     02 39 06 F6 | 	mov	local14, #258
07524     01 3A 06 F6 | 	mov	local15, #1
07528     98 00 90 FD | 	jmp	#LR__0615
0752c                 | LR__0603
0752c     03 39 06 F6 | 	mov	local14, #259
07530     02 3A 06 F6 | 	mov	local15, #2
07534     8C 00 90 FD | 	jmp	#LR__0615
07538                 | LR__0604
07538     04 39 06 F6 | 	mov	local14, #260
0753c     02 3A 06 F6 | 	mov	local15, #2
07540     80 00 90 FD | 	jmp	#LR__0615
07544                 | LR__0605
07544     05 39 06 F6 | 	mov	local14, #261
07548     04 3A 06 F6 | 	mov	local15, #4
0754c     74 00 90 FD | 	jmp	#LR__0615
07550                 | LR__0606
07550     05 39 06 F6 | 	mov	local14, #261
07554     04 3A 06 F6 | 	mov	local15, #4
07558     68 00 90 FD | 	jmp	#LR__0615
0755c                 | LR__0607
0755c     06 39 06 F6 | 	mov	local14, #262
07560     04 3A 06 F6 | 	mov	local15, #4
07564     5C 00 90 FD | 	jmp	#LR__0615
07568                 | LR__0608
07568     07 39 06 F6 | 	mov	local14, #263
0756c     08 3A 06 F6 | 	mov	local15, #8
07570     50 00 90 FD | 	jmp	#LR__0615
07574                 | LR__0609
07574     08 39 06 F6 | 	mov	local14, #264
07578     08 3A 06 F6 | 	mov	local15, #8
0757c     44 00 90 FD | 	jmp	#LR__0615
07580                 | LR__0610
07580     09 39 06 F6 | 	mov	local14, #265
07584     04 3A 06 F6 | 	mov	local15, #4
07588     38 00 90 FD | 	jmp	#LR__0615
0758c                 | LR__0611
0758c     0A 39 06 F6 | 	mov	local14, #266
07590     08 3A 06 F6 | 	mov	local15, #8
07594     2C 00 90 FD | 	jmp	#LR__0615
07598                 | LR__0612
07598     0B 39 06 F6 | 	mov	local14, #267
0759c     04 3A 06 F6 | 	mov	local15, #4
075a0     20 00 90 FD | 	jmp	#LR__0615
075a4                 | LR__0613
075a4     2F 12 06 F6 | 	mov	arg01, #47
075a8     B4 E2 B0 FD | 	call	#_printerror
075ac     2F FA 05 F6 | 	mov	result1, #47
075b0     48 01 90 FD | 	jmp	#LR__0616
075b4                 | LR__0614
075b4     2E 12 06 F6 | 	mov	arg01, #46
075b8     A4 E2 B0 FD | 	call	#_printerror
075bc                 | '   printerror(46): return 46
075bc     2E FA 05 F6 | 	mov	result1, #46
075c0     38 01 90 FD | 	jmp	#LR__0616
075c4                 | LR__0615
075c4     0F 3B 02 FD | 	qmul	local15, local01
075c8     18 2A 62 FD | 	getqx	local07
075cc     10 2B 02 FD | 	qmul	local07, local02
075d0     18 3C 62 FD | 	getqx	local16
075d4     11 3D 02 FD | 	qmul	local16, local03
075d8     7A 00 00 FF 
075dc     4C E5 05 F1 | 	add	objptr, ##62796
075e0     F2 3E 02 FB | 	rdlong	local17, objptr
075e4     1C 15 02 F6 | 	mov	arg02, local14
075e8     01 16 06 F6 | 	mov	arg03, #1
075ec     00 18 06 F6 | 	mov	arg04, #0
075f0                 | '     return fill(addr, pattern, count, listPtr, 4)
075f0     04 1A 06 F6 | 	mov	arg05, #4
075f4     18 3C 62 FD | 	getqx	local16
075f8     1E 3F 82 F1 | 	sub	local17, local16
075fc     10 3E 86 F1 | 	sub	local17, #16
07600     F2 3E 62 FC | 	wrlong	local17, objptr
07604     1F 13 02 F6 | 	mov	arg01, local17
07608     6F 00 00 FF 
0760c     8C E4 85 F1 | 	sub	objptr, ##56972
07610     B8 0D B1 FD | 	call	#_psram_spin2_fill
07614     1F 13 02 F6 | 	mov	arg01, local17
07618     02 12 06 F1 | 	add	arg01, #2
0761c     1D 15 02 F6 | 	mov	arg02, local15
07620     01 16 06 F6 | 	mov	arg03, #1
07624     00 18 06 F6 | 	mov	arg04, #0
07628                 | '     return fill(addr, pattern, count, listPtr, 1)
07628     01 1A 06 F6 | 	mov	arg05, #1
0762c     9C 0D B1 FD | 	call	#_psram_spin2_fill
07630     1F 13 02 F6 | 	mov	arg01, local17
07634     04 12 06 F1 | 	add	arg01, #4
07638     0F 15 02 F6 | 	mov	arg02, local01
0763c     01 16 06 F6 | 	mov	arg03, #1
07640     00 18 06 F6 | 	mov	arg04, #0
07644                 | '     return fill(addr, pattern, count, listPtr, 4)
07644     04 1A 06 F6 | 	mov	arg05, #4
07648     80 0D B1 FD | 	call	#_psram_spin2_fill
0764c     1F 13 02 F6 | 	mov	arg01, local17
07650     08 12 06 F1 | 	add	arg01, #8
07654     10 15 02 F6 | 	mov	arg02, local02
07658     01 16 06 F6 | 	mov	arg03, #1
0765c     00 18 06 F6 | 	mov	arg04, #0
07660                 | '     return fill(addr, pattern, count, listPtr, 4)
07660     04 1A 06 F6 | 	mov	arg05, #4
07664     64 0D B1 FD | 	call	#_psram_spin2_fill
07668     1F 13 02 F6 | 	mov	arg01, local17
0766c     0C 12 06 F1 | 	add	arg01, #12
07670     11 15 02 F6 | 	mov	arg02, local03
07674     01 16 06 F6 | 	mov	arg03, #1
07678     00 18 06 F6 | 	mov	arg04, #0
0767c                 | '     return fill(addr, pattern, count, listPtr, 4)
0767c     04 1A 06 F6 | 	mov	arg05, #4
07680     48 0D B1 FD | 	call	#_psram_spin2_fill
07684     14 35 02 F6 | 	mov	local12, local06
07688     04 34 66 F0 | 	shl	local12, #4
0768c     29 00 00 FF 
07690     1C E4 05 F1 | 	add	objptr, ##21020
07694     F2 34 02 F1 | 	add	local12, objptr
07698     1A 27 62 FC | 	wrlong	local05, local12
0769c     14 35 02 F6 | 	mov	local12, local06
076a0     04 34 66 F0 | 	shl	local12, #4
076a4     F2 34 02 F1 | 	add	local12, objptr
076a8     04 34 06 F1 | 	add	local12, #4
076ac     1A 3F 62 FC | 	wrlong	local17, local12
076b0     14 35 02 F6 | 	mov	local12, local06
076b4     04 34 66 F0 | 	shl	local12, #4
076b8     F2 34 02 F1 | 	add	local12, objptr
076bc     0C 34 06 F1 | 	add	local12, #12
076c0     1A 39 62 FC | 	wrlong	local14, local12
076c4                 | ' 'print dims(0),dims(1),dims(2),arraytype
076c4                 | ' 
076c4                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
076c4                 | ' arrayptr=memtop-arraysize-16
076c4                 | ' memtop=arrayptr
076c4                 | ' 
076c4                 | ' pslpoke arrayptr,arraytype
076c4                 | ' pspoke arrayptr+2,esize
076c4                 | ' pslpoke arrayptr+4,dims(0)
076c4                 | ' pslpoke arrayptr+8,dims(1)
076c4                 | ' pslpoke arrayptr+12,dims(2)
076c4                 | ' 
076c4                 | ' variables(j).name=varname2$
076c4                 | ' variables(j).value.uresult=arrayptr
076c4                 | ' variables(j).vartype=arraytype
076c4                 | ' if j=varnum then varnum+=1
076c4     20 00 00 FF 
076c8     00 E4 05 F1 | 	add	objptr, ##16384
076cc     F2 2A 02 FB | 	rdlong	local07, objptr
076d0     54 00 00 FF 
076d4     DC E4 85 F1 | 	sub	objptr, ##43228
076d8     15 29 0A F2 | 	cmp	local06, local07 wz
076dc     54 00 00 AF 
076e0     DC E4 05 A1 |  if_e	add	objptr, ##43228
076e4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
076e8     01 2A 06 A1 |  if_e	add	local07, #1
076ec     F2 2A 62 AC |  if_e	wrlong	local07, objptr
076f0     54 00 00 AF 
076f4     DC E4 85 A1 |  if_e	sub	objptr, ##43228
076f8                 | ' 
076f8                 | ' return 0
076f8     00 FA 05 F6 | 	mov	result1, #0
076fc                 | LR__0616
076fc     A7 F0 03 F6 | 	mov	ptra, fp
07700     B2 00 A0 FD | 	call	#popregs_
07704                 | _compile_dim_ret
07704     2D 00 64 FD | 	ret
07708                 | 
07708                 | ' 
07708                 | ' 
07708                 | ' function compile_for() as ulong  
07708                 | _compile_for
07708     07 4A 05 F6 | 	mov	COUNT_, #7
0770c     A8 00 A0 FD | 	call	#pushregs_
07710                 | ' 
07710                 | ' 
07710                 | ' 
07710                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07710     56 00 00 FF 
07714     18 E5 05 F1 | 	add	objptr, ##44312
07718     F2 14 02 FB | 	rdlong	arg02, objptr
0771c     01 14 06 F1 | 	add	arg02, #1
07720     03 14 66 F0 | 	shl	arg02, #3
07724     02 00 00 FF 
07728     38 E4 85 F1 | 	sub	objptr, ##1080
0772c     F2 14 02 F1 | 	add	arg02, objptr
07730     0A 13 02 FB | 	rdlong	arg01, arg02
07734     54 00 00 FF 
07738     E0 E4 85 F1 | 	sub	objptr, ##43232
0773c                 | ' 
0773c                 | ' select case s
0773c     42 01 00 FF 
07740     C9 14 06 F6 | 	mov	arg02, ##@LR__4384
07744     C4 16 B1 FD | 	call	#__system___string_cmp
07748     00 FA 0D F2 | 	cmp	result1, #0 wz
0774c     1B FA 05 A6 |  if_e	mov	result1, #27
07750     00 FA 05 56 |  if_ne	mov	result1, #0
07754     00 FA 0D F2 | 	cmp	result1, #0 wz
07758     0C 00 90 AD |  if_e	jmp	#LR__0620
0775c     05 12 06 F6 | 	mov	arg01, #5
07760     A0 E4 BF FD | 	call	#_compile_immediate_assign
07764     10 00 90 FD | 	jmp	#LR__0621
07768                 | LR__0620
07768     20 12 06 F6 | 	mov	arg01, #32
0776c     10 E9 BF FD | 	call	#_compile_error
07770     20 FA 05 F6 | 	mov	result1, #32
07774     E8 02 90 FD | 	jmp	#LR__0627
07778                 | LR__0621
07778     69 00 00 FF 
0777c     50 E5 05 F1 | 	add	objptr, ##54096
07780     F2 12 02 FB | 	rdlong	arg01, objptr
07784     09 25 02 F6 | 	mov	local04, arg01
07788     01 24 86 F1 | 	sub	local04, #1
0778c     12 15 02 F6 | 	mov	arg02, local04
07790     01 14 66 F0 | 	shl	arg02, #1
07794     12 15 02 F1 | 	add	arg02, local04
07798     02 14 66 F0 | 	shl	arg02, #2
0779c     03 00 00 FF 
077a0     00 E4 85 F1 | 	sub	objptr, ##1536
077a4     F2 14 02 F1 | 	add	arg02, objptr
077a8     0A 1F 02 FB | 	rdlong	local01, arg02
077ac     04 14 06 F1 | 	add	arg02, #4
077b0     0A 27 02 FB | 	rdlong	local05, arg02
077b4     01 12 86 F1 | 	sub	arg01, #1
077b8     09 29 02 F6 | 	mov	local06, arg01
077bc     01 28 66 F0 | 	shl	local06, #1
077c0     09 29 02 F1 | 	add	local06, arg01
077c4     02 28 66 F0 | 	shl	local06, #2
077c8     F2 28 02 F1 | 	add	local06, objptr
077cc     08 28 06 F1 | 	add	local06, #8
077d0     14 13 02 FB | 	rdlong	arg01, local06
077d4     13 21 02 F6 | 	mov	local02, local05
077d8     09 23 02 F6 | 	mov	local03, arg01
077dc                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
077dc                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
077dc     17 22 0E F2 | 	cmp	local03, #23 wz
077e0     66 00 00 FF 
077e4     50 E5 85 F1 | 	sub	objptr, ##52560
077e8     10 00 90 AD |  if_e	jmp	#LR__0622
077ec     22 12 06 F6 | 	mov	arg01, #34
077f0     8C E8 BF FD | 	call	#_compile_error
077f4     22 FA 05 F6 | 	mov	result1, #34
077f8     64 02 90 FD | 	jmp	#LR__0627
077fc                 | LR__0622
077fc     0F 2B 02 F6 | 	mov	local07, local01
07800                 | ' varnum=t1.result.uresult
07800                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
07800     56 00 00 FF 
07804     18 E5 05 F1 | 	add	objptr, ##44312
07808     F2 24 02 FB | 	rdlong	local04, objptr
0780c     03 24 66 F0 | 	shl	local04, #3
07810     02 00 00 FF 
07814     38 E4 85 F1 | 	sub	objptr, ##1080
07818     F2 24 02 F1 | 	add	local04, objptr
0781c     12 13 02 FB | 	rdlong	arg01, local04
07820     43 01 00 FF 
07824     BE 15 06 F6 | 	mov	arg02, ##@LR__4553
07828     54 00 00 FF 
0782c     E0 E4 85 F1 | 	sub	objptr, ##43232
07830     D8 15 B1 FD | 	call	#__system___string_cmp
07834     00 FA 0D F2 | 	cmp	result1, #0 wz
07838     10 00 90 AD |  if_e	jmp	#LR__0623
0783c     21 12 06 F6 | 	mov	arg01, #33
07840     3C E8 BF FD | 	call	#_compile_error
07844     21 FA 05 F6 | 	mov	result1, #33
07848     14 02 90 FD | 	jmp	#LR__0627
0784c                 | LR__0623
0784c     56 00 00 FF 
07850     18 E5 05 F1 | 	add	objptr, ##44312
07854     F2 24 02 FB | 	rdlong	local04, objptr
07858     01 24 06 F1 | 	add	local04, #1
0785c     F2 24 62 FC | 	wrlong	local04, objptr
07860     56 00 00 FF 
07864     18 E5 85 F1 | 	sub	objptr, ##44312
07868     D4 0B B0 FD | 	call	#_expr
0786c                 | ' ct+=1
0786c                 | ' expr()  ' there is "to" value pushed on the stack
0786c                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0786c     56 00 00 FF 
07870     18 E5 05 F1 | 	add	objptr, ##44312
07874     F2 24 02 FB | 	rdlong	local04, objptr
07878     03 24 66 F0 | 	shl	local04, #3
0787c     02 00 00 FF 
07880     38 E4 85 F1 | 	sub	objptr, ##1080
07884     F2 24 02 F1 | 	add	local04, objptr
07888     12 13 02 FB | 	rdlong	arg01, local04
0788c     43 01 00 FF 
07890     C1 15 06 F6 | 	mov	arg02, ##@LR__4554
07894     54 00 00 FF 
07898     E0 E4 85 F1 | 	sub	objptr, ##43232
0789c     6C 15 B1 FD | 	call	#__system___string_cmp
078a0     00 FA 0D F2 | 	cmp	result1, #0 wz
078a4     3C 00 90 AD |  if_e	jmp	#LR__0624
078a8     56 00 00 FF 
078ac     18 E5 05 F1 | 	add	objptr, ##44312
078b0     F2 28 02 FB | 	rdlong	local06, objptr
078b4     03 28 66 F0 | 	shl	local06, #3
078b8     02 00 00 FF 
078bc     38 E4 85 F1 | 	sub	objptr, ##1080
078c0     F2 28 02 F1 | 	add	local06, objptr
078c4     14 13 02 FB | 	rdlong	arg01, local06
078c8     43 01 00 FF 
078cc     C6 15 06 F6 | 	mov	arg02, ##@LR__4555
078d0     54 00 00 FF 
078d4     E0 E4 85 F1 | 	sub	objptr, ##43232
078d8     30 15 B1 FD | 	call	#__system___string_cmp
078dc     00 FA 0D F2 | 	cmp	result1, #0 wz
078e0     24 00 90 5D |  if_ne	jmp	#LR__0625
078e4                 | LR__0624
078e4     56 00 00 FF 
078e8     18 E5 05 F1 | 	add	objptr, ##44312
078ec     F2 28 02 FB | 	rdlong	local06, objptr
078f0     01 28 06 F1 | 	add	local06, #1
078f4     F2 28 62 FC | 	wrlong	local06, objptr
078f8     56 00 00 FF 
078fc     18 E5 85 F1 | 	sub	objptr, ##44312
07900     3C 0B B0 FD | 	call	#_expr
07904     78 00 90 FD | 	jmp	#LR__0626
07908                 | LR__0625
07908     69 00 00 FF 
0790c     50 E5 05 F1 | 	add	objptr, ##54096
07910     F2 28 02 FB | 	rdlong	local06, objptr
07914     14 27 02 F6 | 	mov	local05, local06
07918     01 26 66 F0 | 	shl	local05, #1
0791c     14 27 02 F1 | 	add	local05, local06
07920     02 26 66 F0 | 	shl	local05, #2
07924     03 00 00 FF 
07928     00 E4 85 F1 | 	sub	objptr, ##1536
0792c     F2 26 02 F1 | 	add	local05, objptr
07930     08 26 06 F1 | 	add	local05, #8
07934     13 39 68 FC | 	wrlong	#28, local05
07938     03 00 00 FF 
0793c     00 E4 05 F1 | 	add	objptr, ##1536
07940     F2 28 02 FB | 	rdlong	local06, objptr
07944     14 27 02 F6 | 	mov	local05, local06
07948     01 26 66 F0 | 	shl	local05, #1
0794c     14 27 02 F1 | 	add	local05, local06
07950     02 26 66 F0 | 	shl	local05, #2
07954     03 00 00 FF 
07958     00 E4 85 F1 | 	sub	objptr, ##1536
0795c     F2 26 02 F1 | 	add	local05, objptr
07960     13 03 68 FC | 	wrlong	#1, local05
07964     03 00 00 FF 
07968     00 E4 05 F1 | 	add	objptr, ##1536
0796c     F2 28 02 FB | 	rdlong	local06, objptr
07970     01 28 06 F1 | 	add	local06, #1
07974     F2 28 62 FC | 	wrlong	local06, objptr
07978     69 00 00 FF 
0797c     50 E5 85 F1 | 	sub	objptr, ##54096
07980                 | LR__0626
07980     69 00 00 FF 
07984     50 E5 05 F1 | 	add	objptr, ##54096
07988     F2 28 02 FB | 	rdlong	local06, objptr
0798c     14 27 02 F6 | 	mov	local05, local06
07990     01 26 66 F0 | 	shl	local05, #1
07994     14 27 02 F1 | 	add	local05, local06
07998     02 26 66 F0 | 	shl	local05, #2
0799c     03 00 00 FF 
079a0     00 E4 85 F1 | 	sub	objptr, ##1536
079a4     F2 26 02 F1 | 	add	local05, objptr
079a8     08 26 06 F1 | 	add	local05, #8
079ac     13 39 68 FC | 	wrlong	#28, local05
079b0     03 00 00 FF 
079b4     00 E4 05 F1 | 	add	objptr, ##1536
079b8     F2 28 02 FB | 	rdlong	local06, objptr
079bc     14 27 02 F6 | 	mov	local05, local06
079c0     01 26 66 F0 | 	shl	local05, #1
079c4     14 27 02 F1 | 	add	local05, local06
079c8     02 26 66 F0 | 	shl	local05, #2
079cc     03 00 00 FF 
079d0     00 E4 85 F1 | 	sub	objptr, ##1536
079d4     F2 26 02 F1 | 	add	local05, objptr
079d8     13 2B 62 FC | 	wrlong	local07, local05
079dc     03 00 00 FF 
079e0     00 E4 05 F1 | 	add	objptr, ##1536
079e4     F2 2A 02 FB | 	rdlong	local07, objptr
079e8     01 2A 06 F1 | 	add	local07, #1
079ec     F2 2A 62 FC | 	wrlong	local07, objptr
079f0     15 29 02 F6 | 	mov	local06, local07
079f4     01 28 66 F0 | 	shl	local06, #1
079f8     15 29 02 F1 | 	add	local06, local07
079fc     02 28 66 F0 | 	shl	local06, #2
07a00     03 00 00 FF 
07a04     00 E4 85 F1 | 	sub	objptr, ##1536
07a08     F2 28 02 F1 | 	add	local06, objptr
07a0c     08 28 06 F1 | 	add	local06, #8
07a10     14 95 68 FC | 	wrlong	#74, local06
07a14     03 00 00 FF 
07a18     00 E4 05 F1 | 	add	objptr, ##1536
07a1c     F2 2A 02 FB | 	rdlong	local07, objptr
07a20     15 29 02 F6 | 	mov	local06, local07
07a24     01 28 66 F0 | 	shl	local06, #1
07a28     15 29 02 F1 | 	add	local06, local07
07a2c     02 28 66 F0 | 	shl	local06, #2
07a30     03 00 00 FF 
07a34     00 E4 85 F1 | 	sub	objptr, ##1536
07a38     F2 28 02 F1 | 	add	local06, objptr
07a3c     14 01 68 FC | 	wrlong	#0, local06
07a40     03 00 00 FF 
07a44     00 E4 05 F1 | 	add	objptr, ##1536
07a48     F2 2A 02 FB | 	rdlong	local07, objptr
07a4c     01 2A 06 F1 | 	add	local07, #1
07a50     F2 2A 62 FC | 	wrlong	local07, objptr
07a54     69 00 00 FF 
07a58     50 E5 85 F1 | 	sub	objptr, ##54096
07a5c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07a5c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07a5c                 | ' 
07a5c                 | ' 
07a5c                 | ' return 0
07a5c     00 FA 05 F6 | 	mov	result1, #0
07a60                 | LR__0627
07a60     A7 F0 03 F6 | 	mov	ptra, fp
07a64     B2 00 A0 FD | 	call	#popregs_
07a68                 | _compile_for_ret
07a68     2D 00 64 FD | 	ret
07a6c                 | 
07a6c                 | ' 
07a6c                 | ' 
07a6c                 | ' sub do_for()
07a6c                 | _do_for
07a6c     05 4A 05 F6 | 	mov	COUNT_, #5
07a70     A8 00 A0 FD | 	call	#pushregs_
07a74     79 00 00 FF 
07a78     AC E4 05 F1 | 	add	objptr, ##62124
07a7c     F2 24 02 FB | 	rdlong	local04, objptr
07a80     01 24 06 F1 | 	add	local04, #1
07a84     F2 24 62 FC | 	wrlong	local04, objptr
07a88     79 00 00 FF 
07a8c     AC E4 85 F1 | 	sub	objptr, ##62124
07a90     5C 1E B0 FD | 	call	#_pop
07a94     FD 1E 02 F6 | 	mov	local01, result1
07a98     FE 20 02 F6 | 	mov	local02, result2
07a9c     FF 22 02 F6 | 	mov	local03, result3
07aa0     79 00 00 FF 
07aa4     AC E4 05 F1 | 	add	objptr, ##62124
07aa8     F2 24 02 FB | 	rdlong	local04, objptr
07aac     12 27 02 F6 | 	mov	local05, local04
07ab0     02 26 66 F0 | 	shl	local05, #2
07ab4     12 27 02 F1 | 	add	local05, local04
07ab8     02 26 66 F0 | 	shl	local05, #2
07abc     07 00 00 FF 
07ac0     40 E5 85 F1 | 	sub	objptr, ##3904
07ac4     F2 26 02 F1 | 	add	local05, objptr
07ac8     08 26 06 F1 | 	add	local05, #8
07acc     13 1F 62 FC | 	wrlong	local01, local05
07ad0     71 00 00 FF 
07ad4     6C E5 85 F1 | 	sub	objptr, ##58220
07ad8     14 1E B0 FD | 	call	#_pop
07adc     FD 1E 02 F6 | 	mov	local01, result1
07ae0     FE 20 02 F6 | 	mov	local02, result2
07ae4     FF 22 02 F6 | 	mov	local03, result3
07ae8     79 00 00 FF 
07aec     AC E4 05 F1 | 	add	objptr, ##62124
07af0     F2 24 02 FB | 	rdlong	local04, objptr
07af4     12 27 02 F6 | 	mov	local05, local04
07af8     02 26 66 F0 | 	shl	local05, #2
07afc     12 27 02 F1 | 	add	local05, local04
07b00     02 26 66 F0 | 	shl	local05, #2
07b04     07 00 00 FF 
07b08     40 E5 85 F1 | 	sub	objptr, ##3904
07b0c     F2 26 02 F1 | 	add	local05, objptr
07b10     0C 26 06 F1 | 	add	local05, #12
07b14     13 1F 62 FC | 	wrlong	local01, local05
07b18     71 00 00 FF 
07b1c     6C E5 85 F1 | 	sub	objptr, ##58220
07b20     CC 1D B0 FD | 	call	#_pop
07b24     FD 1E 02 F6 | 	mov	local01, result1
07b28     FE 20 02 F6 | 	mov	local02, result2
07b2c     FF 22 02 F6 | 	mov	local03, result3
07b30     79 00 00 FF 
07b34     AC E4 05 F1 | 	add	objptr, ##62124
07b38     F2 24 02 FB | 	rdlong	local04, objptr
07b3c     12 27 02 F6 | 	mov	local05, local04
07b40     02 26 66 F0 | 	shl	local05, #2
07b44     12 27 02 F1 | 	add	local05, local04
07b48     02 26 66 F0 | 	shl	local05, #2
07b4c     07 00 00 FF 
07b50     40 E5 85 F1 | 	sub	objptr, ##3904
07b54     F2 26 02 F1 | 	add	local05, objptr
07b58     10 26 06 F1 | 	add	local05, #16
07b5c     13 1F 62 FC | 	wrlong	local01, local05
07b60                 | ' fortop+=1
07b60                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07b60                 | ' 'if i> maxfor then printerror(36) : return
07b60                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07b60                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07b60                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07b60                 | ' if compiledline(lineptr_e).result_type=token_end then
07b60     08 00 00 FF 
07b64     18 E4 85 F1 | 	sub	objptr, ##4120
07b68     F2 1E 02 FB | 	rdlong	local01, objptr
07b6c     0F 27 02 F6 | 	mov	local05, local01
07b70     01 26 66 F0 | 	shl	local05, #1
07b74     0F 27 02 F1 | 	add	local05, local01
07b78     02 26 66 F0 | 	shl	local05, #2
07b7c     03 00 00 FF 
07b80     04 E4 85 F1 | 	sub	objptr, ##1540
07b84     F2 26 02 F1 | 	add	local05, objptr
07b88     08 26 06 F1 | 	add	local05, #8
07b8c     13 27 02 FB | 	rdlong	local05, local05
07b90     FE 27 0E F2 | 	cmp	local05, #510 wz
07b94     66 00 00 FF 
07b98     50 E5 85 F1 | 	sub	objptr, ##52560
07b9c     70 00 90 5D |  if_ne	jmp	#LR__0630
07ba0     79 00 00 FF 
07ba4     AC E4 05 F1 | 	add	objptr, ##62124
07ba8     F2 1E 02 FB | 	rdlong	local01, objptr
07bac     0F 27 02 F6 | 	mov	local05, local01
07bb0     02 26 66 F0 | 	shl	local05, #2
07bb4     0F 27 02 F1 | 	add	local05, local01
07bb8     02 26 66 F0 | 	shl	local05, #2
07bbc     07 00 00 FF 
07bc0     40 E5 85 F1 | 	sub	objptr, ##3904
07bc4     F2 26 02 F1 | 	add	local05, objptr
07bc8     07 00 00 FF 
07bcc     18 E5 05 F1 | 	add	objptr, ##3864
07bd0     F2 1E 02 FB | 	rdlong	local01, objptr
07bd4     13 1F 62 FC | 	wrlong	local01, local05
07bd8     28 E4 05 F1 | 	add	objptr, #40
07bdc     F2 1E 02 FB | 	rdlong	local01, objptr
07be0     0F 27 02 F6 | 	mov	local05, local01
07be4     02 26 66 F0 | 	shl	local05, #2
07be8     0F 27 02 F1 | 	add	local05, local01
07bec     02 26 66 F0 | 	shl	local05, #2
07bf0     07 00 00 FF 
07bf4     40 E5 85 F1 | 	sub	objptr, ##3904
07bf8     F2 26 02 F1 | 	add	local05, objptr
07bfc     04 26 06 F1 | 	add	local05, #4
07c00     13 01 68 FC | 	wrlong	#0, local05
07c04     71 00 00 FF 
07c08     6C E5 85 F1 | 	sub	objptr, ##58220
07c0c     7C 00 90 FD | 	jmp	#LR__0631
07c10                 | LR__0630
07c10     79 00 00 FF 
07c14     AC E4 05 F1 | 	add	objptr, ##62124
07c18     F2 1E 02 FB | 	rdlong	local01, objptr
07c1c     0F 27 02 F6 | 	mov	local05, local01
07c20     02 26 66 F0 | 	shl	local05, #2
07c24     0F 27 02 F1 | 	add	local05, local01
07c28     02 26 66 F0 | 	shl	local05, #2
07c2c     07 00 00 FF 
07c30     40 E5 85 F1 | 	sub	objptr, ##3904
07c34     F2 26 02 F1 | 	add	local05, objptr
07c38     07 00 00 FF 
07c3c     20 E5 05 F1 | 	add	objptr, ##3872
07c40     F2 1E 02 FB | 	rdlong	local01, objptr
07c44     13 1F 62 FC | 	wrlong	local01, local05
07c48     20 E4 05 F1 | 	add	objptr, #32
07c4c     F2 1E 02 FB | 	rdlong	local01, objptr
07c50     0F 27 02 F6 | 	mov	local05, local01
07c54     02 26 66 F0 | 	shl	local05, #2
07c58     0F 27 02 F1 | 	add	local05, local01
07c5c     02 26 66 F0 | 	shl	local05, #2
07c60     07 00 00 FF 
07c64     40 E5 85 F1 | 	sub	objptr, ##3904
07c68     F2 26 02 F1 | 	add	local05, objptr
07c6c     08 00 00 FF 
07c70     18 E4 85 F1 | 	sub	objptr, ##4120
07c74     F2 1E 02 FB | 	rdlong	local01, objptr
07c78     69 00 00 FF 
07c7c     54 E5 85 F1 | 	sub	objptr, ##54100
07c80     01 1E 06 F1 | 	add	local01, #1
07c84     04 26 06 F1 | 	add	local05, #4
07c88     13 1F 62 FC | 	wrlong	local01, local05
07c8c                 | LR__0631
07c8c     A7 F0 03 F6 | 	mov	ptra, fp
07c90     B2 00 A0 FD | 	call	#popregs_
07c94                 | _do_for_ret
07c94     2D 00 64 FD | 	ret
07c98                 | 
07c98                 | ' 
07c98                 | ' ' now do_next todo
07c98                 | ' 
07c98                 | ' sub do_next()
07c98                 | _do_next
07c98     04 4A 05 F6 | 	mov	COUNT_, #4
07c9c     A8 00 A0 FD | 	call	#pushregs_
07ca0     4C 1C B0 FD | 	call	#_pop
07ca4     FD 1E 02 F6 | 	mov	local01, result1
07ca8     FE 20 02 F6 | 	mov	local02, result2
07cac     FF 22 02 F6 | 	mov	local03, result3
07cb0                 | ' 
07cb0                 | ' t1=pop() :varnum=t1.result.uresult
07cb0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07cb0     79 00 00 FF 
07cb4     AC E4 05 F1 | 	add	objptr, ##62124
07cb8     F2 12 02 FB | 	rdlong	arg01, objptr
07cbc     09 25 02 F6 | 	mov	local04, arg01
07cc0     02 24 66 F0 | 	shl	local04, #2
07cc4     09 25 02 F1 | 	add	local04, arg01
07cc8     02 24 66 F0 | 	shl	local04, #2
07ccc     07 00 00 FF 
07cd0     40 E5 85 F1 | 	sub	objptr, ##3904
07cd4     F2 24 02 F1 | 	add	local04, objptr
07cd8     08 24 06 F1 | 	add	local04, #8
07cdc     12 25 02 FB | 	rdlong	local04, local04
07ce0     0F 25 0A F2 | 	cmp	local04, local01 wz
07ce4     71 00 00 FF 
07ce8     6C E5 85 F1 | 	sub	objptr, ##58220
07cec     0C 00 90 AD |  if_e	jmp	#LR__0640
07cf0     25 12 06 F6 | 	mov	arg01, #37
07cf4     68 DB B0 FD | 	call	#_printerror
07cf8     28 02 90 FD | 	jmp	#LR__0644
07cfc                 | LR__0640
07cfc     79 00 00 FF 
07d00     AC E4 05 F1 | 	add	objptr, ##62124
07d04     F2 12 02 FB | 	rdlong	arg01, objptr
07d08     09 25 02 F6 | 	mov	local04, arg01
07d0c     02 24 66 F0 | 	shl	local04, #2
07d10     09 25 02 F1 | 	add	local04, arg01
07d14     02 24 66 F0 | 	shl	local04, #2
07d18     07 00 00 FF 
07d1c     40 E5 85 F1 | 	sub	objptr, ##3904
07d20     F2 24 02 F1 | 	add	local04, objptr
07d24     0C 24 06 F1 | 	add	local04, #12
07d28     12 25 02 FB | 	rdlong	local04, local04
07d2c     0F 13 02 F6 | 	mov	arg01, local01
07d30     04 12 66 F0 | 	shl	arg01, #4
07d34     3D 00 00 FF 
07d38     90 E4 85 F1 | 	sub	objptr, ##31376
07d3c     F2 12 02 F1 | 	add	arg01, objptr
07d40     0F FF 01 F6 | 	mov	result3, local01
07d44     04 FE 65 F0 | 	shl	result3, #4
07d48     F2 FE 01 F1 | 	add	result3, objptr
07d4c     04 FE 05 F1 | 	add	result3, #4
07d50     FF FE 01 FB | 	rdlong	result3, result3
07d54     12 FF 01 F1 | 	add	result3, local04
07d58     04 12 06 F1 | 	add	arg01, #4
07d5c     09 FF 61 FC | 	wrlong	result3, arg01
07d60                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07d60                 | ' if fortable(fortop).stepval>=0 then
07d60     44 00 00 FF 
07d64     D0 E5 05 F1 | 	add	objptr, ##35280
07d68     F2 12 02 FB | 	rdlong	arg01, objptr
07d6c     09 25 02 F6 | 	mov	local04, arg01
07d70     02 24 66 F0 | 	shl	local04, #2
07d74     09 25 02 F1 | 	add	local04, arg01
07d78     02 24 66 F0 | 	shl	local04, #2
07d7c     07 00 00 FF 
07d80     40 E5 85 F1 | 	sub	objptr, ##3904
07d84     F2 24 02 F1 | 	add	local04, objptr
07d88     0C 24 06 F1 | 	add	local04, #12
07d8c     12 25 02 FB | 	rdlong	local04, local04
07d90     00 24 56 F2 | 	cmps	local04, #0 wc
07d94     71 00 00 FF 
07d98     6C E5 85 F1 | 	sub	objptr, ##58220
07d9c     78 00 90 CD |  if_b	jmp	#LR__0641
07da0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07da0     04 1E 66 F0 | 	shl	local01, #4
07da4     34 00 00 FF 
07da8     DC E4 05 F1 | 	add	objptr, ##26844
07dac     F2 1E 02 F1 | 	add	local01, objptr
07db0     44 00 00 FF 
07db4     D0 E5 05 F1 | 	add	objptr, ##35280
07db8     F2 24 02 FB | 	rdlong	local04, objptr
07dbc     12 13 02 F6 | 	mov	arg01, local04
07dc0     02 12 66 F0 | 	shl	arg01, #2
07dc4     12 13 02 F1 | 	add	arg01, local04
07dc8     02 12 66 F0 | 	shl	arg01, #2
07dcc     07 00 00 FF 
07dd0     40 E5 85 F1 | 	sub	objptr, ##3904
07dd4     F2 12 02 F1 | 	add	arg01, objptr
07dd8     04 1E 06 F1 | 	add	local01, #4
07ddc     0F 25 02 FB | 	rdlong	local04, local01
07de0     10 12 06 F1 | 	add	arg01, #16
07de4     09 13 02 FB | 	rdlong	arg01, arg01
07de8     09 25 5A F2 | 	cmps	local04, arg01 wcz
07dec     71 00 00 FF 
07df0     6C E5 85 F1 | 	sub	objptr, ##58220
07df4     9C 00 90 ED |  if_be	jmp	#LR__0643
07df8     79 00 00 FF 
07dfc     AC E4 05 F1 | 	add	objptr, ##62124
07e00     F2 24 02 FB | 	rdlong	local04, objptr
07e04     01 24 86 F1 | 	sub	local04, #1
07e08     F2 24 62 FC | 	wrlong	local04, objptr
07e0c     79 00 00 FF 
07e10     AC E4 85 F1 | 	sub	objptr, ##62124
07e14     0C 01 90 FD | 	jmp	#LR__0644
07e18                 | LR__0641
07e18                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07e18     0F 13 02 F6 | 	mov	arg01, local01
07e1c     04 12 66 F0 | 	shl	arg01, #4
07e20     34 00 00 FF 
07e24     DC E4 05 F1 | 	add	objptr, ##26844
07e28     F2 12 02 F1 | 	add	arg01, objptr
07e2c     44 00 00 FF 
07e30     D0 E5 05 F1 | 	add	objptr, ##35280
07e34     F2 24 02 FB | 	rdlong	local04, objptr
07e38     12 1F 02 F6 | 	mov	local01, local04
07e3c     02 1E 66 F0 | 	shl	local01, #2
07e40     12 1F 02 F1 | 	add	local01, local04
07e44     02 1E 66 F0 | 	shl	local01, #2
07e48     07 00 00 FF 
07e4c     40 E5 85 F1 | 	sub	objptr, ##3904
07e50     F2 1E 02 F1 | 	add	local01, objptr
07e54     04 12 06 F1 | 	add	arg01, #4
07e58     09 13 02 FB | 	rdlong	arg01, arg01
07e5c     10 1E 06 F1 | 	add	local01, #16
07e60     0F 1F 02 FB | 	rdlong	local01, local01
07e64     0F 13 52 F2 | 	cmps	arg01, local01 wc
07e68     71 00 00 FF 
07e6c     6C E5 85 F1 | 	sub	objptr, ##58220
07e70     20 00 90 3D |  if_ae	jmp	#LR__0642
07e74     79 00 00 FF 
07e78     AC E4 05 F1 | 	add	objptr, ##62124
07e7c     F2 24 02 FB | 	rdlong	local04, objptr
07e80     01 24 86 F1 | 	sub	local04, #1
07e84     F2 24 62 FC | 	wrlong	local04, objptr
07e88     79 00 00 FF 
07e8c     AC E4 85 F1 | 	sub	objptr, ##62124
07e90     90 00 90 FD | 	jmp	#LR__0644
07e94                 | LR__0642
07e94                 | LR__0643
07e94     79 00 00 FF 
07e98     AC E4 05 F1 | 	add	objptr, ##62124
07e9c     F2 1E 02 FB | 	rdlong	local01, objptr
07ea0     0F 25 02 F6 | 	mov	local04, local01
07ea4     02 24 66 F0 | 	shl	local04, #2
07ea8     0F 25 02 F1 | 	add	local04, local01
07eac     02 24 66 F0 | 	shl	local04, #2
07eb0     07 00 00 FF 
07eb4     40 E5 85 F1 | 	sub	objptr, ##3904
07eb8     F2 24 02 F1 | 	add	local04, objptr
07ebc     12 25 02 FB | 	rdlong	local04, local04
07ec0     07 00 00 FF 
07ec4     18 E5 05 F1 | 	add	objptr, ##3864
07ec8     F2 24 62 FC | 	wrlong	local04, objptr
07ecc     28 E4 05 F1 | 	add	objptr, #40
07ed0     F2 1E 02 FB | 	rdlong	local01, objptr
07ed4     0F 25 02 F6 | 	mov	local04, local01
07ed8     02 24 66 F0 | 	shl	local04, #2
07edc     0F 25 02 F1 | 	add	local04, local01
07ee0     02 24 66 F0 | 	shl	local04, #2
07ee4     07 00 00 FF 
07ee8     40 E5 85 F1 | 	sub	objptr, ##3904
07eec     F2 24 02 F1 | 	add	local04, objptr
07ef0     04 24 06 F1 | 	add	local04, #4
07ef4     12 25 02 FB | 	rdlong	local04, local04
07ef8     07 00 00 FF 
07efc     1C E5 05 F1 | 	add	objptr, ##3868
07f00     F2 24 62 FC | 	wrlong	local04, objptr
07f04     0F 00 00 FF 
07f08     38 E5 85 F1 | 	sub	objptr, ##7992
07f0c     F2 24 02 FB | 	rdlong	local04, objptr
07f10     01 24 86 F1 | 	sub	local04, #1
07f14     04 E4 05 F1 | 	add	objptr, #4
07f18     F2 24 62 FC | 	wrlong	local04, objptr
07f1c     69 00 00 FF 
07f20     54 E5 85 F1 | 	sub	objptr, ##54100
07f24                 | LR__0644
07f24     A7 F0 03 F6 | 	mov	ptra, fp
07f28     B2 00 A0 FD | 	call	#popregs_
07f2c                 | _do_next_ret
07f2c     2D 00 64 FD | 	ret
07f30                 | 
07f30                 | ' 
07f30                 | ' 
07f30                 | ' function compile_next() as ulong
07f30                 | _compile_next
07f30     04 4A 05 F6 | 	mov	COUNT_, #4
07f34     A8 00 A0 FD | 	call	#pushregs_
07f38     56 00 00 FF 
07f3c     18 E5 05 F1 | 	add	objptr, ##44312
07f40     F2 12 02 FB | 	rdlong	arg01, objptr
07f44     03 12 66 F0 | 	shl	arg01, #3
07f48     02 00 00 FF 
07f4c     38 E4 85 F1 | 	sub	objptr, ##1080
07f50     F2 12 02 F1 | 	add	arg01, objptr
07f54     09 1F 02 FB | 	rdlong	local01, arg01
07f58                 | ' 
07f58                 | ' varname$=lparts(ct).part$ 
07f58                 | ' 'suffix$=right$(varname$,1)
07f58                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07f58                 | ' if varnum=0 then compile_error(35)  : return 35
07f58     04 E4 85 F1 | 	sub	objptr, #4
07f5c     F2 14 0A FB | 	rdlong	arg02, objptr wz
07f60     54 00 00 FF 
07f64     DC E4 85 F1 | 	sub	objptr, ##43228
07f68     10 00 90 5D |  if_ne	jmp	#LR__0650
07f6c     23 12 06 F6 | 	mov	arg01, #35
07f70     0C E1 BF FD | 	call	#_compile_error
07f74     23 FA 05 F6 | 	mov	result1, #35
07f78     58 01 90 FD | 	jmp	#LR__0654
07f7c                 | LR__0650
07f7c     01 20 66 F6 | 	neg	local02, #1
07f80                 | ' j=-1
07f80                 | ' for i=0 to varnum-1
07f80     00 22 06 F6 | 	mov	local03, #0
07f84     54 00 00 FF 
07f88     DC E4 05 F1 | 	add	objptr, ##43228
07f8c     F2 24 02 FB | 	rdlong	local04, objptr
07f90     54 00 00 FF 
07f94     DC E4 85 F1 | 	sub	objptr, ##43228
07f98                 | LR__0651
07f98     12 23 12 F2 | 	cmp	local03, local04 wc
07f9c     38 00 90 3D |  if_ae	jmp	#LR__0652
07fa0                 | '   if variables(i).name=varname$ then j=i : exit
07fa0     11 15 02 F6 | 	mov	arg02, local03
07fa4     04 14 66 F0 | 	shl	arg02, #4
07fa8     34 00 00 FF 
07fac     DC E4 05 F1 | 	add	objptr, ##26844
07fb0     F2 14 02 F1 | 	add	arg02, objptr
07fb4     0A 13 02 FB | 	rdlong	arg01, arg02
07fb8     0F 15 02 F6 | 	mov	arg02, local01
07fbc     34 00 00 FF 
07fc0     DC E4 85 F1 | 	sub	objptr, ##26844
07fc4     44 0E B1 FD | 	call	#__system___string_cmp
07fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07fcc     11 21 02 A6 |  if_e	mov	local02, local03
07fd0     01 22 06 51 |  if_ne	add	local03, #1
07fd4     C0 FF 9F 5D |  if_ne	jmp	#LR__0651
07fd8                 | LR__0652
07fd8                 | ' if j=-1 then compile_error(35) : return 35
07fd8     FF FF 7F FF 
07fdc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07fe0     10 00 90 5D |  if_ne	jmp	#LR__0653
07fe4     23 12 06 F6 | 	mov	arg01, #35
07fe8     94 E0 BF FD | 	call	#_compile_error
07fec     23 FA 05 F6 | 	mov	result1, #35
07ff0     E0 00 90 FD | 	jmp	#LR__0654
07ff4                 | LR__0653
07ff4     69 00 00 FF 
07ff8     50 E5 05 F1 | 	add	objptr, ##54096
07ffc     F2 24 02 FB | 	rdlong	local04, objptr
08000     12 23 02 F6 | 	mov	local03, local04
08004     01 22 66 F0 | 	shl	local03, #1
08008     12 23 02 F1 | 	add	local03, local04
0800c     02 22 66 F0 | 	shl	local03, #2
08010     03 00 00 FF 
08014     00 E4 85 F1 | 	sub	objptr, ##1536
08018     F2 22 02 F1 | 	add	local03, objptr
0801c     08 22 06 F1 | 	add	local03, #8
08020     11 39 68 FC | 	wrlong	#28, local03
08024     03 00 00 FF 
08028     00 E4 05 F1 | 	add	objptr, ##1536
0802c     F2 24 02 FB | 	rdlong	local04, objptr
08030     12 23 02 F6 | 	mov	local03, local04
08034     01 22 66 F0 | 	shl	local03, #1
08038     12 23 02 F1 | 	add	local03, local04
0803c     02 22 66 F0 | 	shl	local03, #2
08040     03 00 00 FF 
08044     00 E4 85 F1 | 	sub	objptr, ##1536
08048     F2 22 02 F1 | 	add	local03, objptr
0804c     11 21 62 FC | 	wrlong	local02, local03
08050     03 00 00 FF 
08054     00 E4 05 F1 | 	add	objptr, ##1536
08058     F2 24 02 FB | 	rdlong	local04, objptr
0805c     01 24 06 F1 | 	add	local04, #1
08060     F2 24 62 FC | 	wrlong	local04, objptr
08064     12 23 02 F6 | 	mov	local03, local04
08068     01 22 66 F0 | 	shl	local03, #1
0806c     12 23 02 F1 | 	add	local03, local04
08070     02 22 66 F0 | 	shl	local03, #2
08074     03 00 00 FF 
08078     00 E4 85 F1 | 	sub	objptr, ##1536
0807c     F2 22 02 F1 | 	add	local03, objptr
08080     08 22 06 F1 | 	add	local03, #8
08084     11 97 68 FC | 	wrlong	#75, local03
08088     03 00 00 FF 
0808c     00 E4 05 F1 | 	add	objptr, ##1536
08090     F2 24 02 FB | 	rdlong	local04, objptr
08094     12 23 02 F6 | 	mov	local03, local04
08098     01 22 66 F0 | 	shl	local03, #1
0809c     12 23 02 F1 | 	add	local03, local04
080a0     02 22 66 F0 | 	shl	local03, #2
080a4     03 00 00 FF 
080a8     00 E4 85 F1 | 	sub	objptr, ##1536
080ac     F2 22 02 F1 | 	add	local03, objptr
080b0     11 01 68 FC | 	wrlong	#0, local03
080b4     03 00 00 FF 
080b8     00 E4 05 F1 | 	add	objptr, ##1536
080bc     F2 24 02 FB | 	rdlong	local04, objptr
080c0     01 24 06 F1 | 	add	local04, #1
080c4     F2 24 62 FC | 	wrlong	local04, objptr
080c8     69 00 00 FF 
080cc     50 E5 85 F1 | 	sub	objptr, ##54096
080d0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
080d0                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
080d0                 | ' return 0
080d0     00 FA 05 F6 | 	mov	result1, #0
080d4                 | LR__0654
080d4     A7 F0 03 F6 | 	mov	ptra, fp
080d8     B2 00 A0 FD | 	call	#popregs_
080dc                 | _compile_next_ret
080dc     2D 00 64 FD | 	ret
080e0                 | 
080e0                 | ' 
080e0                 | ' 
080e0                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
080e0                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
080e0                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
080e0                 | ' 
080e0                 | ' 
080e0                 | ' function compile_goto( ) as ulong
080e0                 | _compile_goto
080e0     03 4A 05 F6 | 	mov	COUNT_, #3
080e4     A8 00 A0 FD | 	call	#pushregs_
080e8     28 F0 07 F1 | 	add	ptra, #40
080ec                 | ' 
080ec                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
080ec     56 00 00 FF 
080f0     18 E5 05 F1 | 	add	objptr, ##44312
080f4     F2 16 02 FB | 	rdlong	arg03, objptr
080f8     03 16 66 F0 | 	shl	arg03, #3
080fc     02 00 00 FF 
08100     38 E4 85 F1 | 	sub	objptr, ##1080
08104     F2 16 02 F1 | 	add	arg03, objptr
08108     04 16 06 F1 | 	add	arg03, #4
0810c     0B 17 02 FB | 	rdlong	arg03, arg03
08110     01 00 00 FF 
08114     00 16 0E F2 | 	cmp	arg03, ##512 wz
08118     54 00 00 FF 
0811c     E0 E4 85 F1 | 	sub	objptr, ##43232
08120     CC 02 90 5D |  if_ne	jmp	#LR__0665
08124     56 00 00 FF 
08128     18 E5 05 F1 | 	add	objptr, ##44312
0812c     F2 16 02 FB | 	rdlong	arg03, objptr
08130     01 16 06 F1 | 	add	arg03, #1
08134     03 16 66 F0 | 	shl	arg03, #3
08138     02 00 00 FF 
0813c     38 E4 85 F1 | 	sub	objptr, ##1080
08140     F2 16 02 F1 | 	add	arg03, objptr
08144     04 16 06 F1 | 	add	arg03, #4
08148     0B 17 02 FB | 	rdlong	arg03, arg03
0814c     FE 17 0E F2 | 	cmp	arg03, #510 wz
08150     54 00 00 FF 
08154     E0 E4 85 F1 | 	sub	objptr, ##43232
08158     94 02 90 5D |  if_ne	jmp	#LR__0665
0815c     56 00 00 FF 
08160     18 E5 05 F1 | 	add	objptr, ##44312
08164     F2 16 02 FB | 	rdlong	arg03, objptr
08168     03 16 66 F0 | 	shl	arg03, #3
0816c     02 00 00 FF 
08170     38 E4 85 F1 | 	sub	objptr, ##1080
08174     F2 16 02 F1 | 	add	arg03, objptr
08178     0B 13 02 FB | 	rdlong	arg01, arg03
0817c     00 14 06 F6 | 	mov	arg02, #0
08180     54 00 00 FF 
08184     E0 E4 85 F1 | 	sub	objptr, ##43232
08188     BC 3D B1 FD | 	call	#__system____builtin_atoi
0818c     04 4E 05 F1 | 	add	fp, #4
08190     A7 FA 61 FC | 	wrlong	result1, fp
08194     69 00 00 FF 
08198     50 E5 05 F1 | 	add	objptr, ##54096
0819c     F2 1E 02 FB | 	rdlong	local01, objptr
081a0     0F 21 02 F6 | 	mov	local02, local01
081a4     01 20 66 F0 | 	shl	local02, #1
081a8     0F 21 02 F1 | 	add	local02, local01
081ac     02 20 66 F0 | 	shl	local02, #2
081b0     03 00 00 FF 
081b4     00 E4 85 F1 | 	sub	objptr, ##1536
081b8     F2 20 02 F1 | 	add	local02, objptr
081bc     08 20 06 F1 | 	add	local02, #8
081c0     10 9D 68 FC | 	wrlong	#78, local02
081c4     03 00 00 FF 
081c8     08 E4 05 F1 | 	add	objptr, ##1544
081cc     F2 22 02 FB | 	rdlong	local03, objptr
081d0     69 00 00 FF 
081d4     58 E5 85 F1 | 	sub	objptr, ##54104
081d8     04 4E 05 F1 | 	add	fp, #4
081dc     A7 22 62 FC | 	wrlong	local03, fp
081e0     08 4E 85 F1 | 	sub	fp, #8
081e4                 | ' 
081e4                 | '   gotoline=val%(lparts(ct).part$) 
081e4                 | '   compiledline(lineptr).result_type=token_fast_goto
081e4                 | ' ' now find a pointer to goto
081e4                 | '   gotoptr=programstart
081e4                 | '   do
081e4                 | LR__0660
081e4     10 4E 05 F1 | 	add	fp, #16
081e8     A7 12 02 F6 | 	mov	arg01, fp
081ec     08 4E 85 F1 | 	sub	fp, #8
081f0     A7 14 02 FB | 	rdlong	arg02, fp
081f4     08 4E 85 F1 | 	sub	fp, #8
081f8     18 16 06 F6 | 	mov	arg03, #24
081fc     0B 00 00 FF 
08200     C0 E4 05 F1 | 	add	objptr, ##5824
08204     8C 00 B1 FD | 	call	#_psram_spin2_read1
08208     0B 00 00 FF 
0820c     C0 E4 85 F1 | 	sub	objptr, ##5824
08210                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08210                 | '     if gotoheader(0)<>$FFFFFFFF then
08210     10 4E 05 F1 | 	add	fp, #16
08214     A7 22 02 FB | 	rdlong	local03, fp
08218     10 4E 85 F1 | 	sub	fp, #16
0821c     FF FF 7F FF 
08220     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08224     24 00 90 AD |  if_e	jmp	#LR__0661
08228     08 4E 05 F1 | 	add	fp, #8
0822c     A7 22 02 FB | 	rdlong	local03, fp
08230     04 4E 05 F1 | 	add	fp, #4
08234     A7 22 62 FC | 	wrlong	local03, fp
08238     18 4E 05 F1 | 	add	fp, #24
0823c     A7 22 02 FB | 	rdlong	local03, fp
08240     1C 4E 85 F1 | 	sub	fp, #28
08244     A7 22 62 FC | 	wrlong	local03, fp
08248     08 4E 85 F1 | 	sub	fp, #8
0824c                 | LR__0661
0824c     24 4E 05 F1 | 	add	fp, #36
08250     A7 22 02 FB | 	rdlong	local03, fp
08254     24 4E 85 F1 | 	sub	fp, #36
08258     FF FF 3F FF 
0825c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08260     10 4E 05 51 |  if_ne	add	fp, #16
08264     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08268     10 4E 85 51 |  if_ne	sub	fp, #16
0826c     FF FF 7F 5F 
08270     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08274     1C 00 90 AD |  if_e	jmp	#LR__0662
08278     10 4E 05 F1 | 	add	fp, #16
0827c     A7 22 02 FB | 	rdlong	local03, fp
08280     0C 4E 85 F1 | 	sub	fp, #12
08284     A7 20 02 FB | 	rdlong	local02, fp
08288     04 4E 85 F1 | 	sub	fp, #4
0828c     10 23 0A F2 | 	cmp	local03, local02 wz
08290     50 FF 9F 5D |  if_ne	jmp	#LR__0660
08294                 | LR__0662
08294                 | '   if gotoheader(0)=gotoline then
08294     10 4E 05 F1 | 	add	fp, #16
08298     A7 22 02 FB | 	rdlong	local03, fp
0829c     0C 4E 85 F1 | 	sub	fp, #12
082a0     A7 1E 02 FB | 	rdlong	local01, fp
082a4     04 4E 85 F1 | 	sub	fp, #4
082a8     0F 23 0A F2 | 	cmp	local03, local01 wz
082ac     7C 00 90 5D |  if_ne	jmp	#LR__0663
082b0     69 00 00 FF 
082b4     50 E5 05 F1 | 	add	objptr, ##54096
082b8     F2 1E 02 FB | 	rdlong	local01, objptr
082bc     0F 21 02 F6 | 	mov	local02, local01
082c0     01 20 66 F0 | 	shl	local02, #1
082c4     0F 21 02 F1 | 	add	local02, local01
082c8     02 20 66 F0 | 	shl	local02, #2
082cc     03 00 00 FF 
082d0     00 E4 85 F1 | 	sub	objptr, ##1536
082d4     F2 20 02 F1 | 	add	local02, objptr
082d8     0C 4E 05 F1 | 	add	fp, #12
082dc     A7 22 02 FB | 	rdlong	local03, fp
082e0     10 23 62 FC | 	wrlong	local03, local02
082e4     03 00 00 FF 
082e8     00 E4 05 F1 | 	add	objptr, ##1536
082ec     F2 1E 02 FB | 	rdlong	local01, objptr
082f0     0F 21 02 F6 | 	mov	local02, local01
082f4     01 20 66 F0 | 	shl	local02, #1
082f8     0F 21 02 F1 | 	add	local02, local01
082fc     02 20 66 F0 | 	shl	local02, #2
08300     03 00 00 FF 
08304     00 E4 85 F1 | 	sub	objptr, ##1536
08308     F2 20 02 F1 | 	add	local02, objptr
0830c     08 4E 85 F1 | 	sub	fp, #8
08310     A7 22 02 FB | 	rdlong	local03, fp
08314     04 4E 85 F1 | 	sub	fp, #4
08318     04 20 06 F1 | 	add	local02, #4
0831c     10 23 62 FC | 	wrlong	local03, local02
08320     66 00 00 FF 
08324     50 E5 85 F1 | 	sub	objptr, ##52560
08328     A4 00 90 FD | 	jmp	#LR__0664
0832c                 | LR__0663
0832c     69 00 00 FF 
08330     50 E5 05 F1 | 	add	objptr, ##54096
08334     F2 1E 02 FB | 	rdlong	local01, objptr
08338     0F 21 02 F6 | 	mov	local02, local01
0833c     01 20 66 F0 | 	shl	local02, #1
08340     0F 21 02 F1 | 	add	local02, local01
08344     02 20 66 F0 | 	shl	local02, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 20 02 F1 | 	add	local02, objptr
08354     00 00 C0 FF 
08358     10 01 68 FC | 	wrlong	##-2147483648, local02
0835c     03 00 00 FF 
08360     00 E4 05 F1 | 	add	objptr, ##1536
08364     F2 1E 02 FB | 	rdlong	local01, objptr
08368     0F 21 02 F6 | 	mov	local02, local01
0836c     01 20 66 F0 | 	shl	local02, #1
08370     0F 21 02 F1 | 	add	local02, local01
08374     02 20 66 F0 | 	shl	local02, #2
08378     03 00 00 FF 
0837c     00 E4 85 F1 | 	sub	objptr, ##1536
08380     F2 20 02 F1 | 	add	local02, objptr
08384     04 4E 05 F1 | 	add	fp, #4
08388     A7 22 02 FB | 	rdlong	local03, fp
0838c     04 4E 85 F1 | 	sub	fp, #4
08390     04 20 06 F1 | 	add	local02, #4
08394     10 23 62 FC | 	wrlong	local03, local02
08398     03 00 00 FF 
0839c     00 E4 05 F1 | 	add	objptr, ##1536
083a0     F2 1E 02 FB | 	rdlong	local01, objptr
083a4     0F 21 02 F6 | 	mov	local02, local01
083a8     01 20 66 F0 | 	shl	local02, #1
083ac     0F 21 02 F1 | 	add	local02, local01
083b0     02 20 66 F0 | 	shl	local02, #2
083b4     03 00 00 FF 
083b8     00 E4 85 F1 | 	sub	objptr, ##1536
083bc     F2 20 02 F1 | 	add	local02, objptr
083c0     08 20 06 F1 | 	add	local02, #8
083c4     10 A7 68 FC | 	wrlong	#83, local02
083c8     66 00 00 FF 
083cc     50 E5 85 F1 | 	sub	objptr, ##52560
083d0                 | LR__0664
083d0     69 00 00 FF 
083d4     50 E5 05 F1 | 	add	objptr, ##54096
083d8     F2 22 02 FB | 	rdlong	local03, objptr
083dc     01 22 06 F1 | 	add	local03, #1
083e0     F2 22 62 FC | 	wrlong	local03, objptr
083e4     69 00 00 FF 
083e8     50 E5 85 F1 | 	sub	objptr, ##54096
083ec     40 00 90 FD | 	jmp	#LR__0666
083f0                 | LR__0665
083f0                 | '    print "We have a slow goto, todo  "
083f0     00 12 06 F6 | 	mov	arg01, #0
083f4     F0 62 B1 FD | 	call	#__system___getiolock_0423
083f8     FD 12 02 F6 | 	mov	arg01, result1
083fc     E4 09 B1 FD | 	call	#__system___lockmem
08400     43 01 00 FF 
08404     C9 15 06 F6 | 	mov	arg02, ##@LR__4556
08408     00 12 06 F6 | 	mov	arg01, #0
0840c     00 16 06 F6 | 	mov	arg03, #0
08410     C4 16 B1 FD | 	call	#__system___basic_print_string
08414     00 12 06 F6 | 	mov	arg01, #0
08418     0A 14 06 F6 | 	mov	arg02, #10
0841c     00 16 06 F6 | 	mov	arg03, #0
08420     5C 16 B1 FD | 	call	#__system___basic_print_char
08424     00 12 06 F6 | 	mov	arg01, #0
08428     BC 62 B1 FD | 	call	#__system___getiolock_0423
0842c     FD 00 68 FC | 	wrlong	#0, result1
08430                 | LR__0666
08430                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08430                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08430                 | ' return 0
08430     00 FA 05 F6 | 	mov	result1, #0
08434     A7 F0 03 F6 | 	mov	ptra, fp
08438     B2 00 A0 FD | 	call	#popregs_
0843c                 | _compile_goto_ret
0843c     2D 00 64 FD | 	ret
08440                 | 
08440                 | ' 
08440                 | ' 
08440                 | ' 
08440                 | ' 
08440                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08440                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08440                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08440                 | ' 
08440                 | ' 
08440                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08440                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08440                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08440                 | ' 
08440                 | ' 
08440                 | ' function expr() as integer 
08440                 | _expr
08440     07 4A 05 F6 | 	mov	COUNT_, #7
08444     A8 00 A0 FD | 	call	#pushregs_
08448                 | _expr_enter
08448     56 00 00 FF 
0844c     18 E5 05 F1 | 	add	objptr, ##44312
08450     F2 24 02 FB | 	rdlong	local04, objptr
08454     03 24 66 F0 | 	shl	local04, #3
08458     02 00 00 FF 
0845c     38 E4 85 F1 | 	sub	objptr, ##1080
08460     F2 24 02 F1 | 	add	local04, objptr
08464     04 24 06 F1 | 	add	local04, #4
08468     12 27 02 FB | 	rdlong	local05, local04
0846c                 | ' 
0846c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0846c     FE 27 0E F2 | 	cmp	local05, #510 wz
08470     54 00 00 FF 
08474     E0 E4 85 F1 | 	sub	objptr, ##43232
08478     C4 00 90 5D |  if_ne	jmp	#LR__0670
0847c     1D 1E 06 F6 | 	mov	local01, #29
08480     FF 22 06 F6 | 	mov	local03, #255
08484     0F 29 02 F6 | 	mov	local06, local01
08488     10 2B 02 F6 | 	mov	local07, local02
0848c     11 1F 02 F6 | 	mov	local01, local03
08490     69 00 00 FF 
08494     50 E5 05 F1 | 	add	objptr, ##54096
08498     F2 26 02 FB | 	rdlong	local05, objptr
0849c     13 25 02 F6 | 	mov	local04, local05
084a0     01 24 66 F0 | 	shl	local04, #1
084a4     13 25 02 F1 | 	add	local04, local05
084a8     02 24 66 F0 | 	shl	local04, #2
084ac     03 00 00 FF 
084b0     00 E4 85 F1 | 	sub	objptr, ##1536
084b4     F2 24 02 F1 | 	add	local04, objptr
084b8     12 29 62 FC | 	wrlong	local06, local04
084bc     03 00 00 FF 
084c0     00 E4 05 F1 | 	add	objptr, ##1536
084c4     F2 28 02 FB | 	rdlong	local06, objptr
084c8     14 27 02 F6 | 	mov	local05, local06
084cc     01 26 66 F0 | 	shl	local05, #1
084d0     14 27 02 F1 | 	add	local05, local06
084d4     02 26 66 F0 | 	shl	local05, #2
084d8     03 00 00 FF 
084dc     00 E4 85 F1 | 	sub	objptr, ##1536
084e0     F2 26 02 F1 | 	add	local05, objptr
084e4     04 26 06 F1 | 	add	local05, #4
084e8     13 2B 62 FC | 	wrlong	local07, local05
084ec     03 00 00 FF 
084f0     00 E4 05 F1 | 	add	objptr, ##1536
084f4     F2 2A 02 FB | 	rdlong	local07, objptr
084f8     15 29 02 F6 | 	mov	local06, local07
084fc     01 28 66 F0 | 	shl	local06, #1
08500     15 29 02 F1 | 	add	local06, local07
08504     02 28 66 F0 | 	shl	local06, #2
08508     03 00 00 FF 
0850c     00 E4 85 F1 | 	sub	objptr, ##1536
08510     F2 28 02 F1 | 	add	local06, objptr
08514     08 28 06 F1 | 	add	local06, #8
08518     14 1F 62 FC | 	wrlong	local01, local06
0851c     03 00 00 FF 
08520     00 E4 05 F1 | 	add	objptr, ##1536
08524     F2 28 02 FB | 	rdlong	local06, objptr
08528     01 28 06 F1 | 	add	local06, #1
0852c     F2 28 62 FC | 	wrlong	local06, objptr
08530     69 00 00 FF 
08534     50 E5 85 F1 | 	sub	objptr, ##54096
08538     1D FA 05 F6 | 	mov	result1, #29
0853c     54 01 90 FD | 	jmp	#LR__0673
08540                 | LR__0670
08540     00 1E 06 F6 | 	mov	local01, #0
08544     58 01 B0 FD | 	call	#_addsub
08548     56 00 00 FF 
0854c     18 E5 05 F1 | 	add	objptr, ##44312
08550     F2 24 02 FB | 	rdlong	local04, objptr
08554     03 24 66 F0 | 	shl	local04, #3
08558     02 00 00 FF 
0855c     38 E4 85 F1 | 	sub	objptr, ##1080
08560     F2 24 02 F1 | 	add	local04, objptr
08564     04 24 06 F1 | 	add	local04, #4
08568     12 27 02 FB | 	rdlong	local05, local04
0856c                 | ' t3.result.uresult=0
0856c                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0856c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0856c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0856c     54 00 00 FF 
08570     E0 E4 85 F1 | 	sub	objptr, ##43232
08574                 | LR__0671
08574     1B 26 0E F2 | 	cmp	local05, #27 wz
08578     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0857c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08580     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08584     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08588     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0858c     00 01 90 5D |  if_ne	jmp	#LR__0672
08590     56 00 00 FF 
08594     18 E5 05 F1 | 	add	objptr, ##44312
08598     F2 28 02 FB | 	rdlong	local06, objptr
0859c     01 28 06 F1 | 	add	local06, #1
085a0     F2 28 62 FC | 	wrlong	local06, objptr
085a4     56 00 00 FF 
085a8     18 E5 85 F1 | 	sub	objptr, ##44312
085ac     F0 00 B0 FD | 	call	#_addsub
085b0     13 23 02 F6 | 	mov	local03, local05
085b4     0F 29 02 F6 | 	mov	local06, local01
085b8     10 2B 02 F6 | 	mov	local07, local02
085bc     11 27 02 F6 | 	mov	local05, local03
085c0     69 00 00 FF 
085c4     50 E5 05 F1 | 	add	objptr, ##54096
085c8     F2 24 02 FB | 	rdlong	local04, objptr
085cc     12 FB 01 F6 | 	mov	result1, local04
085d0     01 FA 65 F0 | 	shl	result1, #1
085d4     12 FB 01 F1 | 	add	result1, local04
085d8     02 FA 65 F0 | 	shl	result1, #2
085dc     03 00 00 FF 
085e0     00 E4 85 F1 | 	sub	objptr, ##1536
085e4     F2 FA 01 F1 | 	add	result1, objptr
085e8     FD 28 62 FC | 	wrlong	local06, result1
085ec     03 00 00 FF 
085f0     00 E4 05 F1 | 	add	objptr, ##1536
085f4     F2 28 02 FB | 	rdlong	local06, objptr
085f8     14 25 02 F6 | 	mov	local04, local06
085fc     01 24 66 F0 | 	shl	local04, #1
08600     14 25 02 F1 | 	add	local04, local06
08604     02 24 66 F0 | 	shl	local04, #2
08608     03 00 00 FF 
0860c     00 E4 85 F1 | 	sub	objptr, ##1536
08610     F2 24 02 F1 | 	add	local04, objptr
08614     04 24 06 F1 | 	add	local04, #4
08618     12 2B 62 FC | 	wrlong	local07, local04
0861c     03 00 00 FF 
08620     00 E4 05 F1 | 	add	objptr, ##1536
08624     F2 2A 02 FB | 	rdlong	local07, objptr
08628     15 29 02 F6 | 	mov	local06, local07
0862c     01 28 66 F0 | 	shl	local06, #1
08630     15 29 02 F1 | 	add	local06, local07
08634     02 28 66 F0 | 	shl	local06, #2
08638     03 00 00 FF 
0863c     00 E4 85 F1 | 	sub	objptr, ##1536
08640     F2 28 02 F1 | 	add	local06, objptr
08644     08 28 06 F1 | 	add	local06, #8
08648     14 27 62 FC | 	wrlong	local05, local06
0864c     03 00 00 FF 
08650     00 E4 05 F1 | 	add	objptr, ##1536
08654     F2 28 02 FB | 	rdlong	local06, objptr
08658     01 28 06 F1 | 	add	local06, #1
0865c     F2 28 62 FC | 	wrlong	local06, objptr
08660     13 00 00 FF 
08664     38 E4 85 F1 | 	sub	objptr, ##9784
08668     F2 24 02 FB | 	rdlong	local04, objptr
0866c     03 24 66 F0 | 	shl	local04, #3
08670     02 00 00 FF 
08674     38 E4 85 F1 | 	sub	objptr, ##1080
08678     F2 24 02 F1 | 	add	local04, objptr
0867c     04 24 06 F1 | 	add	local04, #4
08680     12 27 02 FB | 	rdlong	local05, local04
08684     54 00 00 FF 
08688     E0 E4 85 F1 | 	sub	objptr, ##43232
0868c     E4 FE 9F FD | 	jmp	#LR__0671
08690                 | LR__0672
08690                 | ' return 0  
08690     00 FA 05 F6 | 	mov	result1, #0
08694                 | LR__0673
08694     A7 F0 03 F6 | 	mov	ptra, fp
08698     B2 00 A0 FD | 	call	#popregs_
0869c                 | _expr_ret
0869c     2D 00 64 FD | 	ret
086a0                 | 
086a0                 | ' 
086a0                 | ' 
086a0                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
086a0                 | ' 
086a0                 | ' function addsub() as integer 
086a0                 | _addsub
086a0     07 4A 05 F6 | 	mov	COUNT_, #7
086a4     A8 00 A0 FD | 	call	#pushregs_
086a8                 | _addsub_enter
086a8     00 1E 06 F6 | 	mov	local01, #0
086ac     50 01 B0 FD | 	call	#_muldiv
086b0     56 00 00 FF 
086b4     18 E5 05 F1 | 	add	objptr, ##44312
086b8     F2 24 02 FB | 	rdlong	local04, objptr
086bc     03 24 66 F0 | 	shl	local04, #3
086c0     02 00 00 FF 
086c4     38 E4 85 F1 | 	sub	objptr, ##1080
086c8     F2 24 02 F1 | 	add	local04, objptr
086cc     04 24 06 F1 | 	add	local04, #4
086d0     12 27 02 FB | 	rdlong	local05, local04
086d4                 | ' t3.result.uresult=0
086d4                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
086d4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
086d4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
086d4     54 00 00 FF 
086d8     E0 E4 85 F1 | 	sub	objptr, ##43232
086dc                 | LR__0680
086dc     01 26 0E F2 | 	cmp	local05, #1 wz
086e0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
086e4     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
086e8     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
086ec     00 01 90 5D |  if_ne	jmp	#LR__0681
086f0     56 00 00 FF 
086f4     18 E5 05 F1 | 	add	objptr, ##44312
086f8     F2 24 02 FB | 	rdlong	local04, objptr
086fc     01 24 06 F1 | 	add	local04, #1
08700     F2 24 62 FC | 	wrlong	local04, objptr
08704     56 00 00 FF 
08708     18 E5 85 F1 | 	sub	objptr, ##44312
0870c     F0 00 B0 FD | 	call	#_muldiv
08710     13 23 02 F6 | 	mov	local03, local05
08714     0F 29 02 F6 | 	mov	local06, local01
08718     10 2B 02 F6 | 	mov	local07, local02
0871c     11 27 02 F6 | 	mov	local05, local03
08720     69 00 00 FF 
08724     50 E5 05 F1 | 	add	objptr, ##54096
08728     F2 24 02 FB | 	rdlong	local04, objptr
0872c     12 FB 01 F6 | 	mov	result1, local04
08730     01 FA 65 F0 | 	shl	result1, #1
08734     12 FB 01 F1 | 	add	result1, local04
08738     02 FA 65 F0 | 	shl	result1, #2
0873c     03 00 00 FF 
08740     00 E4 85 F1 | 	sub	objptr, ##1536
08744     F2 FA 01 F1 | 	add	result1, objptr
08748     FD 28 62 FC | 	wrlong	local06, result1
0874c     03 00 00 FF 
08750     00 E4 05 F1 | 	add	objptr, ##1536
08754     F2 28 02 FB | 	rdlong	local06, objptr
08758     14 25 02 F6 | 	mov	local04, local06
0875c     01 24 66 F0 | 	shl	local04, #1
08760     14 25 02 F1 | 	add	local04, local06
08764     02 24 66 F0 | 	shl	local04, #2
08768     03 00 00 FF 
0876c     00 E4 85 F1 | 	sub	objptr, ##1536
08770     F2 24 02 F1 | 	add	local04, objptr
08774     04 24 06 F1 | 	add	local04, #4
08778     12 2B 62 FC | 	wrlong	local07, local04
0877c     03 00 00 FF 
08780     00 E4 05 F1 | 	add	objptr, ##1536
08784     F2 2A 02 FB | 	rdlong	local07, objptr
08788     15 29 02 F6 | 	mov	local06, local07
0878c     01 28 66 F0 | 	shl	local06, #1
08790     15 29 02 F1 | 	add	local06, local07
08794     02 28 66 F0 | 	shl	local06, #2
08798     03 00 00 FF 
0879c     00 E4 85 F1 | 	sub	objptr, ##1536
087a0     F2 28 02 F1 | 	add	local06, objptr
087a4     08 28 06 F1 | 	add	local06, #8
087a8     14 27 62 FC | 	wrlong	local05, local06
087ac     03 00 00 FF 
087b0     00 E4 05 F1 | 	add	objptr, ##1536
087b4     F2 28 02 FB | 	rdlong	local06, objptr
087b8     01 28 06 F1 | 	add	local06, #1
087bc     F2 28 62 FC | 	wrlong	local06, objptr
087c0     13 00 00 FF 
087c4     38 E4 85 F1 | 	sub	objptr, ##9784
087c8     F2 24 02 FB | 	rdlong	local04, objptr
087cc     03 24 66 F0 | 	shl	local04, #3
087d0     02 00 00 FF 
087d4     38 E4 85 F1 | 	sub	objptr, ##1080
087d8     F2 24 02 F1 | 	add	local04, objptr
087dc     04 24 06 F1 | 	add	local04, #4
087e0     12 27 02 FB | 	rdlong	local05, local04
087e4     54 00 00 FF 
087e8     E0 E4 85 F1 | 	sub	objptr, ##43232
087ec     EC FE 9F FD | 	jmp	#LR__0680
087f0                 | LR__0681
087f0                 | '   return 0
087f0     00 FA 05 F6 | 	mov	result1, #0
087f4     A7 F0 03 F6 | 	mov	ptra, fp
087f8     B2 00 A0 FD | 	call	#popregs_
087fc                 | _addsub_ret
087fc     2D 00 64 FD | 	ret
08800                 | 
08800                 | ' 
08800                 | ' sub muldiv()
08800                 | _muldiv
08800     08 4A 05 F6 | 	mov	COUNT_, #8
08804     A8 00 A0 FD | 	call	#pushregs_
08808                 | _muldiv_enter
08808     00 1E 06 F6 | 	mov	local01, #0
0880c     58 01 B0 FD | 	call	#_getvalue
08810     56 00 00 FF 
08814     18 E5 05 F1 | 	add	objptr, ##44312
08818     F2 24 02 FB | 	rdlong	local04, objptr
0881c     03 24 66 F0 | 	shl	local04, #3
08820     02 00 00 FF 
08824     38 E4 85 F1 | 	sub	objptr, ##1080
08828     F2 24 02 F1 | 	add	local04, objptr
0882c     04 24 06 F1 | 	add	local04, #4
08830     12 27 02 FB | 	rdlong	local05, local04
08834                 | ' t3.result.uresult=0
08834                 | ' getvalue()    
08834                 | ' op = lparts(ct).token
08834                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08834     54 00 00 FF 
08838     E0 E4 85 F1 | 	sub	objptr, ##43232
0883c                 | LR__0690
0883c     05 26 0E F2 | 	cmp	local05, #5 wz
08840     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
08844     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
08848     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0884c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08850     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
08854     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
08858     00 01 90 5D |  if_ne	jmp	#LR__0691
0885c     56 00 00 FF 
08860     18 E5 05 F1 | 	add	objptr, ##44312
08864     F2 24 02 FB | 	rdlong	local04, objptr
08868     01 24 06 F1 | 	add	local04, #1
0886c     F2 24 62 FC | 	wrlong	local04, objptr
08870     56 00 00 FF 
08874     18 E5 85 F1 | 	sub	objptr, ##44312
08878     EC 00 B0 FD | 	call	#_getvalue
0887c     13 23 02 F6 | 	mov	local03, local05
08880     0F 29 02 F6 | 	mov	local06, local01
08884     10 2B 02 F6 | 	mov	local07, local02
08888     11 27 02 F6 | 	mov	local05, local03
0888c     69 00 00 FF 
08890     50 E5 05 F1 | 	add	objptr, ##54096
08894     F2 24 02 FB | 	rdlong	local04, objptr
08898     12 2D 02 F6 | 	mov	local08, local04
0889c     01 2C 66 F0 | 	shl	local08, #1
088a0     12 2D 02 F1 | 	add	local08, local04
088a4     02 2C 66 F0 | 	shl	local08, #2
088a8     03 00 00 FF 
088ac     00 E4 85 F1 | 	sub	objptr, ##1536
088b0     F2 2C 02 F1 | 	add	local08, objptr
088b4     16 29 62 FC | 	wrlong	local06, local08
088b8     03 00 00 FF 
088bc     00 E4 05 F1 | 	add	objptr, ##1536
088c0     F2 2C 02 FB | 	rdlong	local08, objptr
088c4     16 29 02 F6 | 	mov	local06, local08
088c8     01 28 66 F0 | 	shl	local06, #1
088cc     16 29 02 F1 | 	add	local06, local08
088d0     02 28 66 F0 | 	shl	local06, #2
088d4     03 00 00 FF 
088d8     00 E4 85 F1 | 	sub	objptr, ##1536
088dc     F2 28 02 F1 | 	add	local06, objptr
088e0     04 28 06 F1 | 	add	local06, #4
088e4     14 2B 62 FC | 	wrlong	local07, local06
088e8     03 00 00 FF 
088ec     00 E4 05 F1 | 	add	objptr, ##1536
088f0     F2 2C 02 FB | 	rdlong	local08, objptr
088f4     16 2B 02 F6 | 	mov	local07, local08
088f8     01 2A 66 F0 | 	shl	local07, #1
088fc     16 2B 02 F1 | 	add	local07, local08
08900     02 2A 66 F0 | 	shl	local07, #2
08904     03 00 00 FF 
08908     00 E4 85 F1 | 	sub	objptr, ##1536
0890c     F2 2A 02 F1 | 	add	local07, objptr
08910     08 2A 06 F1 | 	add	local07, #8
08914     15 27 62 FC | 	wrlong	local05, local07
08918     03 00 00 FF 
0891c     00 E4 05 F1 | 	add	objptr, ##1536
08920     F2 28 02 FB | 	rdlong	local06, objptr
08924     01 28 06 F1 | 	add	local06, #1
08928     F2 28 62 FC | 	wrlong	local06, objptr
0892c     13 00 00 FF 
08930     38 E4 85 F1 | 	sub	objptr, ##9784
08934     F2 24 02 FB | 	rdlong	local04, objptr
08938     03 24 66 F0 | 	shl	local04, #3
0893c     02 00 00 FF 
08940     38 E4 85 F1 | 	sub	objptr, ##1080
08944     F2 24 02 F1 | 	add	local04, objptr
08948     04 24 06 F1 | 	add	local04, #4
0894c     12 27 02 FB | 	rdlong	local05, local04
08950     54 00 00 FF 
08954     E0 E4 85 F1 | 	sub	objptr, ##43232
08958     E0 FE 9F FD | 	jmp	#LR__0690
0895c                 | LR__0691
0895c     A7 F0 03 F6 | 	mov	ptra, fp
08960     B2 00 A0 FD | 	call	#popregs_
08964                 | _muldiv_ret
08964     2D 00 64 FD | 	ret
08968                 | 
08968                 | ' 
08968                 | ' sub getvalue() 
08968                 | _getvalue
08968     0B 4A 05 F6 | 	mov	COUNT_, #11
0896c     A8 00 A0 FD | 	call	#pushregs_
08970                 | _getvalue_enter
08970     01 24 06 F6 | 	mov	local04, #1
08974     00 1E 06 F6 | 	mov	local01, #0
08978     1D 22 06 F6 | 	mov	local03, #29
0897c     56 00 00 FF 
08980     18 E5 05 F1 | 	add	objptr, ##44312
08984     F2 16 02 FB | 	rdlong	arg03, objptr
08988     03 16 66 F0 | 	shl	arg03, #3
0898c     02 00 00 FF 
08990     38 E4 85 F1 | 	sub	objptr, ##1080
08994     F2 16 02 F1 | 	add	arg03, objptr
08998     04 16 06 F1 | 	add	arg03, #4
0899c     0B 27 02 FB | 	rdlong	local05, arg03
089a0                 | ' m=1
089a0                 | ' t1.result.uresult=0: t1.result_type=result_uint
089a0                 | ' op=lparts(ct).token
089a0                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
089a0     02 26 0E F2 | 	cmp	local05, #2 wz
089a4     54 00 00 FF 
089a8     E0 E4 85 F1 | 	sub	objptr, ##43232
089ac     38 00 90 5D |  if_ne	jmp	#LR__0700
089b0     01 24 66 F6 | 	neg	local04, #1
089b4     56 00 00 FF 
089b8     18 E5 05 F1 | 	add	objptr, ##44312
089bc     F2 26 02 FB | 	rdlong	local05, objptr
089c0     01 26 06 F1 | 	add	local05, #1
089c4     F2 26 62 FC | 	wrlong	local05, objptr
089c8     03 26 66 F0 | 	shl	local05, #3
089cc     02 00 00 FF 
089d0     38 E4 85 F1 | 	sub	objptr, ##1080
089d4     F2 26 02 F1 | 	add	local05, objptr
089d8     04 26 06 F1 | 	add	local05, #4
089dc     13 27 02 FB | 	rdlong	local05, local05
089e0     54 00 00 FF 
089e4     E0 E4 85 F1 | 	sub	objptr, ##43232
089e8                 | LR__0700
089e8                 | ' select case op
089e8     01 00 00 FF 
089ec     00 26 0E F2 | 	cmp	local05, ##512 wz
089f0     3C 00 90 AD |  if_e	jmp	#LR__0701
089f4     01 00 00 FF 
089f8     01 26 0E F2 | 	cmp	local05, ##513 wz
089fc     88 01 90 AD |  if_e	jmp	#LR__0704
08a00     01 00 00 FF 
08a04     02 26 0E F2 | 	cmp	local05, ##514 wz
08a08     84 02 90 AD |  if_e	jmp	#LR__0705
08a0c     01 00 00 FF 
08a10     03 26 0E F2 | 	cmp	local05, ##515 wz
08a14     E8 03 90 AD |  if_e	jmp	#LR__0708
08a18     01 00 00 FF 
08a1c     04 26 0E F2 | 	cmp	local05, ##516 wz
08a20     E0 05 90 AD |  if_e	jmp	#LR__0713
08a24     15 26 0E F2 | 	cmp	local05, #21 wz
08a28     00 06 90 AD |  if_e	jmp	#LR__0714
08a2c     70 06 90 FD | 	jmp	#LR__0715
08a30                 | LR__0701
08a30                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08a30     01 24 0E F2 | 	cmp	local04, #1 wz
08a34     3C 00 90 5D |  if_ne	jmp	#LR__0702
08a38     56 00 00 FF 
08a3c     18 E5 05 F1 | 	add	objptr, ##44312
08a40     F2 26 02 FB | 	rdlong	local05, objptr
08a44     03 26 66 F0 | 	shl	local05, #3
08a48     02 00 00 FF 
08a4c     38 E4 85 F1 | 	sub	objptr, ##1080
08a50     F2 26 02 F1 | 	add	local05, objptr
08a54     13 13 02 FB | 	rdlong	arg01, local05
08a58     00 14 06 F6 | 	mov	arg02, #0
08a5c     54 00 00 FF 
08a60     E0 E4 85 F1 | 	sub	objptr, ##43232
08a64     E0 34 B1 FD | 	call	#__system____builtin_atoi
08a68     FD 24 02 FD | 	qmul	local04, result1
08a6c     18 1E 62 FD | 	getqx	local01
08a70     1C 22 06 F6 | 	mov	local03, #28
08a74                 | LR__0702
08a74                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08a74     FF FF 7F FF 
08a78     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08a7c     3C 00 90 5D |  if_ne	jmp	#LR__0703
08a80     56 00 00 FF 
08a84     18 E5 05 F1 | 	add	objptr, ##44312
08a88     F2 26 02 FB | 	rdlong	local05, objptr
08a8c     03 26 66 F0 | 	shl	local05, #3
08a90     02 00 00 FF 
08a94     38 E4 85 F1 | 	sub	objptr, ##1080
08a98     F2 26 02 F1 | 	add	local05, objptr
08a9c     13 13 02 FB | 	rdlong	arg01, local05
08aa0     00 14 06 F6 | 	mov	arg02, #0
08aa4     54 00 00 FF 
08aa8     E0 E4 85 F1 | 	sub	objptr, ##43232
08aac     98 34 B1 FD | 	call	#__system____builtin_atoi
08ab0     FD 24 02 FD | 	qmul	local04, result1
08ab4     18 1E 62 FD | 	getqx	local01
08ab8     1C 22 06 F6 | 	mov	local03, #28
08abc                 | LR__0703
08abc     0F 29 02 F6 | 	mov	local06, local01
08ac0     10 2B 02 F6 | 	mov	local07, local02
08ac4     11 27 02 F6 | 	mov	local05, local03
08ac8     69 00 00 FF 
08acc     50 E5 05 F1 | 	add	objptr, ##54096
08ad0     F2 1E 02 FB | 	rdlong	local01, objptr
08ad4     0F 25 02 F6 | 	mov	local04, local01
08ad8     01 24 66 F0 | 	shl	local04, #1
08adc     0F 25 02 F1 | 	add	local04, local01
08ae0     02 24 66 F0 | 	shl	local04, #2
08ae4     03 00 00 FF 
08ae8     00 E4 85 F1 | 	sub	objptr, ##1536
08aec     F2 24 02 F1 | 	add	local04, objptr
08af0     12 29 62 FC | 	wrlong	local06, local04
08af4     03 00 00 FF 
08af8     00 E4 05 F1 | 	add	objptr, ##1536
08afc     F2 28 02 FB | 	rdlong	local06, objptr
08b00     14 1F 02 F6 | 	mov	local01, local06
08b04     01 1E 66 F0 | 	shl	local01, #1
08b08     14 1F 02 F1 | 	add	local01, local06
08b0c     02 1E 66 F0 | 	shl	local01, #2
08b10     03 00 00 FF 
08b14     00 E4 85 F1 | 	sub	objptr, ##1536
08b18     F2 1E 02 F1 | 	add	local01, objptr
08b1c     04 1E 06 F1 | 	add	local01, #4
08b20     0F 2B 62 FC | 	wrlong	local07, local01
08b24     03 00 00 FF 
08b28     00 E4 05 F1 | 	add	objptr, ##1536
08b2c     F2 2A 02 FB | 	rdlong	local07, objptr
08b30     15 29 02 F6 | 	mov	local06, local07
08b34     01 28 66 F0 | 	shl	local06, #1
08b38     15 29 02 F1 | 	add	local06, local07
08b3c     02 28 66 F0 | 	shl	local06, #2
08b40     03 00 00 FF 
08b44     00 E4 85 F1 | 	sub	objptr, ##1536
08b48     F2 28 02 F1 | 	add	local06, objptr
08b4c     08 28 06 F1 | 	add	local06, #8
08b50     14 27 62 FC | 	wrlong	local05, local06
08b54     03 00 00 FF 
08b58     00 E4 05 F1 | 	add	objptr, ##1536
08b5c     F2 28 02 FB | 	rdlong	local06, objptr
08b60     01 28 06 F1 | 	add	local06, #1
08b64     F2 28 62 FC | 	wrlong	local06, objptr
08b68     13 00 00 FF 
08b6c     38 E4 85 F1 | 	sub	objptr, ##9784
08b70     F2 28 02 FB | 	rdlong	local06, objptr
08b74     01 28 06 F1 | 	add	local06, #1
08b78     F2 28 62 FC | 	wrlong	local06, objptr
08b7c     56 00 00 FF 
08b80     18 E5 85 F1 | 	sub	objptr, ##44312
08b84     3C 05 90 FD | 	jmp	#LR__0716
08b88                 | LR__0704
08b88     56 00 00 FF 
08b8c     18 E5 05 F1 | 	add	objptr, ##44312
08b90     F2 28 02 FB | 	rdlong	local06, objptr
08b94     03 28 66 F0 | 	shl	local06, #3
08b98     02 00 00 FF 
08b9c     38 E4 85 F1 | 	sub	objptr, ##1080
08ba0     F2 28 02 F1 | 	add	local06, objptr
08ba4     14 13 02 FB | 	rdlong	arg01, local06
08ba8     00 14 06 F6 | 	mov	arg02, #0
08bac     54 00 00 FF 
08bb0     E0 E4 85 F1 | 	sub	objptr, ##43232
08bb4     90 33 B1 FD | 	call	#__system____builtin_atoi
08bb8     FD 24 02 FD | 	qmul	local04, result1
08bbc     69 00 00 FF 
08bc0     50 E5 05 F1 | 	add	objptr, ##54096
08bc4     F2 28 02 FB | 	rdlong	local06, objptr
08bc8     14 2D 02 F6 | 	mov	local08, local06
08bcc     01 2C 66 F0 | 	shl	local08, #1
08bd0     14 2D 02 F1 | 	add	local08, local06
08bd4     02 2C 66 F0 | 	shl	local08, #2
08bd8     03 00 00 FF 
08bdc     00 E4 85 F1 | 	sub	objptr, ##1536
08be0     F2 2C 02 F1 | 	add	local08, objptr
08be4     03 00 00 FF 
08be8     00 E4 05 F1 | 	add	objptr, ##1536
08bec     18 1E 62 FD | 	getqx	local01
08bf0     1C 22 06 F6 | 	mov	local03, #28
08bf4     0F 29 02 F6 | 	mov	local06, local01
08bf8     10 2B 02 F6 | 	mov	local07, local02
08bfc     16 29 62 FC | 	wrlong	local06, local08
08c00     11 2D 02 F6 | 	mov	local08, local03
08c04     F2 28 02 FB | 	rdlong	local06, objptr
08c08     14 27 02 F6 | 	mov	local05, local06
08c0c     01 26 66 F0 | 	shl	local05, #1
08c10     14 27 02 F1 | 	add	local05, local06
08c14     02 26 66 F0 | 	shl	local05, #2
08c18     03 00 00 FF 
08c1c     00 E4 85 F1 | 	sub	objptr, ##1536
08c20     F2 26 02 F1 | 	add	local05, objptr
08c24     04 26 06 F1 | 	add	local05, #4
08c28     13 2B 62 FC | 	wrlong	local07, local05
08c2c     03 00 00 FF 
08c30     00 E4 05 F1 | 	add	objptr, ##1536
08c34     F2 2A 02 FB | 	rdlong	local07, objptr
08c38     15 29 02 F6 | 	mov	local06, local07
08c3c     01 28 66 F0 | 	shl	local06, #1
08c40     15 29 02 F1 | 	add	local06, local07
08c44     02 28 66 F0 | 	shl	local06, #2
08c48     03 00 00 FF 
08c4c     00 E4 85 F1 | 	sub	objptr, ##1536
08c50     F2 28 02 F1 | 	add	local06, objptr
08c54     08 28 06 F1 | 	add	local06, #8
08c58     14 2D 62 FC | 	wrlong	local08, local06
08c5c     03 00 00 FF 
08c60     00 E4 05 F1 | 	add	objptr, ##1536
08c64     F2 28 02 FB | 	rdlong	local06, objptr
08c68     01 28 06 F1 | 	add	local06, #1
08c6c     F2 28 62 FC | 	wrlong	local06, objptr
08c70     13 00 00 FF 
08c74     38 E4 85 F1 | 	sub	objptr, ##9784
08c78     F2 28 02 FB | 	rdlong	local06, objptr
08c7c     01 28 06 F1 | 	add	local06, #1
08c80     F2 28 62 FC | 	wrlong	local06, objptr
08c84     56 00 00 FF 
08c88     18 E5 85 F1 | 	sub	objptr, ##44312
08c8c     34 04 90 FD | 	jmp	#LR__0716
08c90                 | LR__0705
08c90                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08c90     01 24 0E F2 | 	cmp	local04, #1 wz
08c94     48 00 90 5D |  if_ne	jmp	#LR__0706
08c98     00 C0 1F FF 
08c9c     00 28 06 F6 | 	mov	local06, ##1065353216
08ca0     56 00 00 FF 
08ca4     18 E5 05 F1 | 	add	objptr, ##44312
08ca8     F2 2C 02 FB | 	rdlong	local08, objptr
08cac     03 2C 66 F0 | 	shl	local08, #3
08cb0     02 00 00 FF 
08cb4     38 E4 85 F1 | 	sub	objptr, ##1080
08cb8     F2 2C 02 F1 | 	add	local08, objptr
08cbc     16 13 02 FB | 	rdlong	arg01, local08
08cc0     54 00 00 FF 
08cc4     E0 E4 85 F1 | 	sub	objptr, ##43232
08cc8     EC 33 B1 FD | 	call	#__system____builtin_atof
08ccc     FD 14 02 F6 | 	mov	arg02, result1
08cd0     14 13 02 F6 | 	mov	arg01, local06
08cd4     F8 2B B1 FD | 	call	#__system___float_mul
08cd8     FD 1E 02 F6 | 	mov	local01, result1
08cdc     1E 22 06 F6 | 	mov	local03, #30
08ce0                 | LR__0706
08ce0                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08ce0     FF FF 7F FF 
08ce4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08ce8     48 00 90 5D |  if_ne	jmp	#LR__0707
08cec     00 C0 5F FF 
08cf0     00 28 06 F6 | 	mov	local06, ##-1082130432
08cf4     56 00 00 FF 
08cf8     18 E5 05 F1 | 	add	objptr, ##44312
08cfc     F2 2C 02 FB | 	rdlong	local08, objptr
08d00     03 2C 66 F0 | 	shl	local08, #3
08d04     02 00 00 FF 
08d08     38 E4 85 F1 | 	sub	objptr, ##1080
08d0c     F2 2C 02 F1 | 	add	local08, objptr
08d10     16 13 02 FB | 	rdlong	arg01, local08
08d14     54 00 00 FF 
08d18     E0 E4 85 F1 | 	sub	objptr, ##43232
08d1c     98 33 B1 FD | 	call	#__system____builtin_atof
08d20     FD 14 02 F6 | 	mov	arg02, result1
08d24     14 13 02 F6 | 	mov	arg01, local06
08d28     A4 2B B1 FD | 	call	#__system___float_mul
08d2c     FD 1E 02 F6 | 	mov	local01, result1
08d30     1E 22 06 F6 | 	mov	local03, #30
08d34                 | LR__0707
08d34     0F 29 02 F6 | 	mov	local06, local01
08d38     10 2B 02 F6 | 	mov	local07, local02
08d3c     11 27 02 F6 | 	mov	local05, local03
08d40     69 00 00 FF 
08d44     50 E5 05 F1 | 	add	objptr, ##54096
08d48     F2 1E 02 FB | 	rdlong	local01, objptr
08d4c     0F 2D 02 F6 | 	mov	local08, local01
08d50     01 2C 66 F0 | 	shl	local08, #1
08d54     0F 2D 02 F1 | 	add	local08, local01
08d58     02 2C 66 F0 | 	shl	local08, #2
08d5c     03 00 00 FF 
08d60     00 E4 85 F1 | 	sub	objptr, ##1536
08d64     F2 2C 02 F1 | 	add	local08, objptr
08d68     16 29 62 FC | 	wrlong	local06, local08
08d6c     03 00 00 FF 
08d70     00 E4 05 F1 | 	add	objptr, ##1536
08d74     F2 2C 02 FB | 	rdlong	local08, objptr
08d78     16 29 02 F6 | 	mov	local06, local08
08d7c     01 28 66 F0 | 	shl	local06, #1
08d80     16 29 02 F1 | 	add	local06, local08
08d84     02 28 66 F0 | 	shl	local06, #2
08d88     03 00 00 FF 
08d8c     00 E4 85 F1 | 	sub	objptr, ##1536
08d90     F2 28 02 F1 | 	add	local06, objptr
08d94     04 28 06 F1 | 	add	local06, #4
08d98     14 2B 62 FC | 	wrlong	local07, local06
08d9c     03 00 00 FF 
08da0     00 E4 05 F1 | 	add	objptr, ##1536
08da4     F2 2C 02 FB | 	rdlong	local08, objptr
08da8     16 2B 02 F6 | 	mov	local07, local08
08dac     01 2A 66 F0 | 	shl	local07, #1
08db0     16 2B 02 F1 | 	add	local07, local08
08db4     02 2A 66 F0 | 	shl	local07, #2
08db8     03 00 00 FF 
08dbc     00 E4 85 F1 | 	sub	objptr, ##1536
08dc0     F2 2A 02 F1 | 	add	local07, objptr
08dc4     08 2A 06 F1 | 	add	local07, #8
08dc8     15 27 62 FC | 	wrlong	local05, local07
08dcc     03 00 00 FF 
08dd0     00 E4 05 F1 | 	add	objptr, ##1536
08dd4     F2 28 02 FB | 	rdlong	local06, objptr
08dd8     01 28 06 F1 | 	add	local06, #1
08ddc     F2 28 62 FC | 	wrlong	local06, objptr
08de0     13 00 00 FF 
08de4     38 E4 85 F1 | 	sub	objptr, ##9784
08de8     F2 28 02 FB | 	rdlong	local06, objptr
08dec     01 28 06 F1 | 	add	local06, #1
08df0     F2 28 62 FC | 	wrlong	local06, objptr
08df4     56 00 00 FF 
08df8     18 E5 85 F1 | 	sub	objptr, ##44312
08dfc     C4 02 90 FD | 	jmp	#LR__0716
08e00                 | LR__0708
08e00     1F 22 06 F6 | 	mov	local03, #31
08e04     56 00 00 FF 
08e08     18 E5 05 F1 | 	add	objptr, ##44312
08e0c     F2 16 02 FB | 	rdlong	arg03, objptr
08e10     03 16 66 F0 | 	shl	arg03, #3
08e14     02 00 00 FF 
08e18     38 E4 85 F1 | 	sub	objptr, ##1080
08e1c     F2 16 02 F1 | 	add	arg03, objptr
08e20     0B 13 02 FB | 	rdlong	arg01, arg03
08e24     54 00 00 FF 
08e28     E0 E4 85 F1 | 	sub	objptr, ##43232
08e2c     09 2F 02 F6 | 	mov	local09, arg01
08e30     97 06 48 FB | 	callpa	#(@LR__0710-@LR__0709)>>2,fcache_load_ptr_
08e34                 | LR__0709
08e34     17 FB C9 FA | 	rdbyte	result1, local09 wz
08e38     01 2E 06 51 |  if_ne	add	local09, #1
08e3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0709
08e40                 | LR__0710
08e40     09 2F 82 F1 | 	sub	local09, arg01
08e44     17 FB 01 F6 | 	mov	result1, local09
08e48     7A 00 00 FF 
08e4c     88 E5 05 F1 | 	add	objptr, ##62856
08e50     F2 FA 61 FC | 	wrlong	result1, objptr
08e54     3C E4 85 F1 | 	sub	objptr, #60
08e58     F2 12 02 FB | 	rdlong	arg01, objptr
08e5c     FD 12 82 F1 | 	sub	arg01, result1
08e60     04 12 86 F1 | 	sub	arg01, #4
08e64     03 12 26 F5 | 	andn	arg01, #3
08e68     F2 12 62 FC | 	wrlong	arg01, objptr
08e6c     3C E4 05 F1 | 	add	objptr, #60
08e70     F2 14 02 FB | 	rdlong	arg02, objptr
08e74     01 16 06 F6 | 	mov	arg03, #1
08e78     00 18 06 F6 | 	mov	arg04, #0
08e7c     6F 00 00 FF 
08e80     C8 E4 85 F1 | 	sub	objptr, ##57032
08e84                 | '     return fill(addr, pattern, count, listPtr, 4)
08e84     04 1A 06 F6 | 	mov	arg05, #4
08e88     40 F5 B0 FD | 	call	#_psram_spin2_fill
08e8c                 | '     pslpoke memtop,l
08e8c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08e8c     01 30 06 F6 | 	mov	local10, #1
08e90     6F 00 00 FF 
08e94     C8 E4 05 F1 | 	add	objptr, ##57032
08e98     F2 32 02 FB | 	rdlong	local11, objptr
08e9c     7A 00 00 FF 
08ea0     88 E5 85 F1 | 	sub	objptr, ##62856
08ea4     01 32 06 F1 | 	add	local11, #1
08ea8                 | LR__0711
08ea8     19 31 52 F2 | 	cmps	local10, local11 wc
08eac     78 00 90 3D |  if_ae	jmp	#LR__0712
08eb0     7A 00 00 FF 
08eb4     4C E5 05 F1 | 	add	objptr, ##62796
08eb8     F2 2A 02 FB | 	rdlong	local07, objptr
08ebc     03 2A 06 F1 | 	add	local07, #3
08ec0     18 2B 02 F1 | 	add	local07, local10
08ec4     24 00 00 FF 
08ec8     34 E4 85 F1 | 	sub	objptr, ##18484
08ecc     F2 2C 02 FB | 	rdlong	local08, objptr
08ed0     03 2C 66 F0 | 	shl	local08, #3
08ed4     02 00 00 FF 
08ed8     38 E4 85 F1 | 	sub	objptr, ##1080
08edc     F2 2C 02 F1 | 	add	local08, objptr
08ee0     16 13 02 FB | 	rdlong	arg01, local08
08ee4     18 15 02 F6 | 	mov	arg02, local10
08ee8     01 16 06 F6 | 	mov	arg03, #1
08eec     54 00 00 FF 
08ef0     E0 E4 85 F1 | 	sub	objptr, ##43232
08ef4     14 20 B1 FD | 	call	#__system__Mid_S
08ef8     FD 14 C2 FA | 	rdbyte	arg02, result1
08efc     15 13 02 F6 | 	mov	arg01, local07
08f00     01 16 06 F6 | 	mov	arg03, #1
08f04     00 18 06 F6 | 	mov	arg04, #0
08f08     0B 00 00 FF 
08f0c     C0 E4 05 F1 | 	add	objptr, ##5824
08f10                 | '     return fill(addr, pattern, count, listPtr, 1)
08f10     01 1A 06 F6 | 	mov	arg05, #1
08f14     B4 F4 B0 FD | 	call	#_psram_spin2_fill
08f18     0B 00 00 FF 
08f1c     C0 E4 85 F1 | 	sub	objptr, ##5824
08f20     01 30 06 F1 | 	add	local10, #1
08f24     80 FF 9F FD | 	jmp	#LR__0711
08f28                 | LR__0712
08f28     7A 00 00 FF 
08f2c     4C E5 05 F1 | 	add	objptr, ##62796
08f30     F2 1E 02 FB | 	rdlong	local01, objptr
08f34     2B 22 06 F6 | 	mov	local03, #43
08f38     0F 29 02 F6 | 	mov	local06, local01
08f3c     10 2B 02 F6 | 	mov	local07, local02
08f40     11 33 02 F6 | 	mov	local11, local03
08f44     10 00 00 FF 
08f48     FC E5 85 F1 | 	sub	objptr, ##8700
08f4c     F2 30 02 FB | 	rdlong	local10, objptr
08f50     18 2D 02 F6 | 	mov	local08, local10
08f54     01 2C 66 F0 | 	shl	local08, #1
08f58     18 2D 02 F1 | 	add	local08, local10
08f5c     02 2C 66 F0 | 	shl	local08, #2
08f60     03 00 00 FF 
08f64     00 E4 85 F1 | 	sub	objptr, ##1536
08f68     F2 2C 02 F1 | 	add	local08, objptr
08f6c     16 29 62 FC | 	wrlong	local06, local08
08f70     03 00 00 FF 
08f74     00 E4 05 F1 | 	add	objptr, ##1536
08f78     F2 30 02 FB | 	rdlong	local10, objptr
08f7c     18 2D 02 F6 | 	mov	local08, local10
08f80     01 2C 66 F0 | 	shl	local08, #1
08f84     18 2D 02 F1 | 	add	local08, local10
08f88     02 2C 66 F0 | 	shl	local08, #2
08f8c     03 00 00 FF 
08f90     00 E4 85 F1 | 	sub	objptr, ##1536
08f94     F2 2C 02 F1 | 	add	local08, objptr
08f98     04 2C 06 F1 | 	add	local08, #4
08f9c     16 2B 62 FC | 	wrlong	local07, local08
08fa0     03 00 00 FF 
08fa4     00 E4 05 F1 | 	add	objptr, ##1536
08fa8     F2 30 02 FB | 	rdlong	local10, objptr
08fac     18 2D 02 F6 | 	mov	local08, local10
08fb0     01 2C 66 F0 | 	shl	local08, #1
08fb4     18 2D 02 F1 | 	add	local08, local10
08fb8     02 2C 66 F0 | 	shl	local08, #2
08fbc     03 00 00 FF 
08fc0     00 E4 85 F1 | 	sub	objptr, ##1536
08fc4     F2 2C 02 F1 | 	add	local08, objptr
08fc8     08 2C 06 F1 | 	add	local08, #8
08fcc     16 33 62 FC | 	wrlong	local11, local08
08fd0     03 00 00 FF 
08fd4     00 E4 05 F1 | 	add	objptr, ##1536
08fd8     F2 28 02 FB | 	rdlong	local06, objptr
08fdc     01 28 06 F1 | 	add	local06, #1
08fe0     F2 28 62 FC | 	wrlong	local06, objptr
08fe4     13 00 00 FF 
08fe8     38 E4 85 F1 | 	sub	objptr, ##9784
08fec     F2 28 02 FB | 	rdlong	local06, objptr
08ff0     01 28 06 F1 | 	add	local06, #1
08ff4     F2 28 62 FC | 	wrlong	local06, objptr
08ff8     56 00 00 FF 
08ffc     18 E5 85 F1 | 	sub	objptr, ##44312
09000     C0 00 90 FD | 	jmp	#LR__0716
09004                 | LR__0713
09004     12 13 02 F6 | 	mov	arg01, local04
09008     B8 03 B0 FD | 	call	#_getvar
0900c     56 00 00 FF 
09010     18 E5 05 F1 | 	add	objptr, ##44312
09014     F2 28 02 FB | 	rdlong	local06, objptr
09018     01 28 06 F1 | 	add	local06, #1
0901c     F2 28 62 FC | 	wrlong	local06, objptr
09020     56 00 00 FF 
09024     18 E5 85 F1 | 	sub	objptr, ##44312
09028     98 00 90 FD | 	jmp	#LR__0716
0902c                 | LR__0714
0902c     56 00 00 FF 
09030     18 E5 05 F1 | 	add	objptr, ##44312
09034     F2 28 02 FB | 	rdlong	local06, objptr
09038     01 28 06 F1 | 	add	local06, #1
0903c     F2 28 62 FC | 	wrlong	local06, objptr
09040     56 00 00 FF 
09044     18 E5 85 F1 | 	sub	objptr, ##44312
09048     F4 F3 BF FD | 	call	#_expr
0904c                 | '     ct+=1
0904c                 | '     expr() 
0904c                 | '     if lparts(ct).token=token_rpar then ct+=1
0904c     56 00 00 FF 
09050     18 E5 05 F1 | 	add	objptr, ##44312
09054     F2 32 02 FB | 	rdlong	local11, objptr
09058     03 32 66 F0 | 	shl	local11, #3
0905c     02 00 00 FF 
09060     38 E4 85 F1 | 	sub	objptr, ##1080
09064     F2 32 02 F1 | 	add	local11, objptr
09068     04 32 06 F1 | 	add	local11, #4
0906c     19 33 02 FB | 	rdlong	local11, local11
09070     14 32 0E F2 | 	cmp	local11, #20 wz
09074     54 00 00 FF 
09078     E0 E4 85 F1 | 	sub	objptr, ##43232
0907c     44 00 90 5D |  if_ne	jmp	#LR__0716
09080     56 00 00 FF 
09084     18 E5 05 F1 | 	add	objptr, ##44312
09088     F2 28 02 FB | 	rdlong	local06, objptr
0908c     01 28 06 F1 | 	add	local06, #1
09090     F2 28 62 FC | 	wrlong	local06, objptr
09094     56 00 00 FF 
09098     18 E5 85 F1 | 	sub	objptr, ##44312
0909c     24 00 90 FD | 	jmp	#LR__0716
090a0                 | LR__0715
090a0     12 13 02 F6 | 	mov	arg01, local04
090a4     28 00 B0 FD | 	call	#_getfun
090a8     56 00 00 FF 
090ac     18 E5 05 F1 | 	add	objptr, ##44312
090b0     F2 28 02 FB | 	rdlong	local06, objptr
090b4     01 28 06 F1 | 	add	local06, #1
090b8     F2 28 62 FC | 	wrlong	local06, objptr
090bc     56 00 00 FF 
090c0     18 E5 85 F1 | 	sub	objptr, ##44312
090c4                 | LR__0716
090c4     A7 F0 03 F6 | 	mov	ptra, fp
090c8     B2 00 A0 FD | 	call	#popregs_
090cc                 | _getvalue_ret
090cc     2D 00 64 FD | 	ret
090d0                 | 
090d0                 | ' 
090d0                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
090d0                 | _getfun
090d0     0A 4A 05 F6 | 	mov	COUNT_, #10
090d4     A8 00 A0 FD | 	call	#pushregs_
090d8                 | _getfun_enter
090d8     09 25 02 F6 | 	mov	local04, arg01
090dc     56 00 00 FF 
090e0     18 E5 05 F1 | 	add	objptr, ##44312
090e4     F2 26 02 FB | 	rdlong	local05, objptr
090e8     13 29 02 F6 | 	mov	local06, local05
090ec     00 2A 06 F6 | 	mov	local07, #0
090f0                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
090f0                 | ' oldct=ct
090f0                 | ' numpar=0
090f0                 | '   
090f0                 | ' if lparts(ct+1).token=token_lpar then
090f0     01 26 06 F1 | 	add	local05, #1
090f4     03 26 66 F0 | 	shl	local05, #3
090f8     02 00 00 FF 
090fc     38 E4 85 F1 | 	sub	objptr, ##1080
09100     F2 26 02 F1 | 	add	local05, objptr
09104     04 26 06 F1 | 	add	local05, #4
09108     13 27 02 FB | 	rdlong	local05, local05
0910c     15 26 0E F2 | 	cmp	local05, #21 wz
09110     54 00 00 FF 
09114     E0 E4 85 F1 | 	sub	objptr, ##43232
09118     08 01 90 5D |  if_ne	jmp	#LR__0724
0911c     56 00 00 FF 
09120     18 E5 05 F1 | 	add	objptr, ##44312
09124     F2 2C 02 FB | 	rdlong	local08, objptr
09128     01 2C 06 F1 | 	add	local08, #1
0912c     F2 2C 62 FC | 	wrlong	local08, objptr
09130     56 00 00 FF 
09134     18 E5 85 F1 | 	sub	objptr, ##44312
09138                 | '   ct+=1 											' omit this lpar, this is for expr list
09138                 | '   do
09138                 | LR__0720
09138     56 00 00 FF 
0913c     18 E5 05 F1 | 	add	objptr, ##44312
09140     F2 26 02 FB | 	rdlong	local05, objptr
09144     01 26 06 F1 | 	add	local05, #1
09148     F2 26 62 FC | 	wrlong	local05, objptr
0914c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0914c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0914c     03 26 66 F0 | 	shl	local05, #3
09150     02 00 00 FF 
09154     38 E4 85 F1 | 	sub	objptr, ##1080
09158     F2 26 02 F1 | 	add	local05, objptr
0915c     04 26 06 F1 | 	add	local05, #4
09160     13 2D 02 FB | 	rdlong	local08, local05
09164     15 2C 0E F2 | 	cmp	local08, #21 wz
09168     54 00 00 FF 
0916c     E0 E4 85 F1 | 	sub	objptr, ##43232
09170     40 00 90 5D |  if_ne	jmp	#LR__0721
09174     56 00 00 FF 
09178     18 E5 05 F1 | 	add	objptr, ##44312
0917c     F2 2C 02 FB | 	rdlong	local08, objptr
09180     01 2C 06 F1 | 	add	local08, #1
09184     F2 2C 62 FC | 	wrlong	local08, objptr
09188     56 00 00 FF 
0918c     18 E5 85 F1 | 	sub	objptr, ##44312
09190     AC F2 BF FD | 	call	#_expr
09194     56 00 00 FF 
09198     18 E5 05 F1 | 	add	objptr, ##44312
0919c     F2 2C 02 FB | 	rdlong	local08, objptr
091a0     01 2C 06 F1 | 	add	local08, #1
091a4     F2 2C 62 FC | 	wrlong	local08, objptr
091a8     56 00 00 FF 
091ac     18 E5 85 F1 | 	sub	objptr, ##44312
091b0     04 00 90 FD | 	jmp	#LR__0722
091b4                 | LR__0721
091b4     88 F2 BF FD | 	call	#_expr
091b8                 | LR__0722
091b8     01 2A 06 F1 | 	add	local07, #1
091bc     56 00 00 FF 
091c0     18 E5 05 F1 | 	add	objptr, ##44312
091c4     F2 26 02 FB | 	rdlong	local05, objptr
091c8     03 26 66 F0 | 	shl	local05, #3
091cc     02 00 00 FF 
091d0     38 E4 85 F1 | 	sub	objptr, ##1080
091d4     F2 26 02 F1 | 	add	local05, objptr
091d8     04 26 06 F1 | 	add	local05, #4
091dc     13 2D 02 FB | 	rdlong	local08, local05
091e0     14 2C 0E F2 | 	cmp	local08, #20 wz
091e4     54 00 00 FF 
091e8     E0 E4 85 F1 | 	sub	objptr, ##43232
091ec     34 00 90 AD |  if_e	jmp	#LR__0723
091f0     56 00 00 FF 
091f4     18 E5 05 F1 | 	add	objptr, ##44312
091f8     F2 2C 02 FB | 	rdlong	local08, objptr
091fc     03 2C 66 F0 | 	shl	local08, #3
09200     02 00 00 FF 
09204     38 E4 85 F1 | 	sub	objptr, ##1080
09208     F2 2C 02 F1 | 	add	local08, objptr
0920c     04 2C 06 F1 | 	add	local08, #4
09210     16 2D 02 FB | 	rdlong	local08, local08
09214     FE 2D 0E F2 | 	cmp	local08, #510 wz
09218     54 00 00 FF 
0921c     E0 E4 85 F1 | 	sub	objptr, ##43232
09220     14 FF 9F 5D |  if_ne	jmp	#LR__0720
09224                 | LR__0723
09224                 | LR__0724
09224     15 1F 02 F6 | 	mov	local01, local07
09228     03 28 66 F0 | 	shl	local06, #3
0922c     54 00 00 FF 
09230     E0 E4 05 F1 | 	add	objptr, ##43232
09234     F2 28 02 F1 | 	add	local06, objptr
09238     04 28 06 F1 | 	add	local06, #4
0923c     14 23 02 FB | 	rdlong	local03, local06
09240     0F 2D 02 F6 | 	mov	local08, local01
09244     10 2B 02 F6 | 	mov	local07, local02
09248     11 29 02 F6 | 	mov	local06, local03
0924c     15 00 00 FF 
09250     70 E4 05 F1 | 	add	objptr, ##10864
09254     F2 26 02 FB | 	rdlong	local05, objptr
09258     13 13 02 F6 | 	mov	arg01, local05
0925c     01 12 66 F0 | 	shl	arg01, #1
09260     13 13 02 F1 | 	add	arg01, local05
09264     02 12 66 F0 | 	shl	arg01, #2
09268     03 00 00 FF 
0926c     00 E4 85 F1 | 	sub	objptr, ##1536
09270     F2 12 02 F1 | 	add	arg01, objptr
09274     09 2D 62 FC | 	wrlong	local08, arg01
09278     03 00 00 FF 
0927c     00 E4 05 F1 | 	add	objptr, ##1536
09280     F2 2C 02 FB | 	rdlong	local08, objptr
09284     16 2F 02 F6 | 	mov	local09, local08
09288     01 2E 66 F0 | 	shl	local09, #1
0928c     16 2F 02 F1 | 	add	local09, local08
09290     02 2E 66 F0 | 	shl	local09, #2
09294     03 00 00 FF 
09298     00 E4 85 F1 | 	sub	objptr, ##1536
0929c     F2 2E 02 F1 | 	add	local09, objptr
092a0     04 2E 06 F1 | 	add	local09, #4
092a4     17 2B 62 FC | 	wrlong	local07, local09
092a8     03 00 00 FF 
092ac     00 E4 05 F1 | 	add	objptr, ##1536
092b0     F2 2C 02 FB | 	rdlong	local08, objptr
092b4     16 31 02 F6 | 	mov	local10, local08
092b8     01 30 66 F0 | 	shl	local10, #1
092bc     16 31 02 F1 | 	add	local10, local08
092c0     02 30 66 F0 | 	shl	local10, #2
092c4     03 00 00 FF 
092c8     00 E4 85 F1 | 	sub	objptr, ##1536
092cc     F2 30 02 F1 | 	add	local10, objptr
092d0     08 30 06 F1 | 	add	local10, #8
092d4     18 29 62 FC | 	wrlong	local06, local10
092d8     03 00 00 FF 
092dc     00 E4 05 F1 | 	add	objptr, ##1536
092e0     F2 2C 02 FB | 	rdlong	local08, objptr
092e4     01 2C 06 F1 | 	add	local08, #1
092e8     F2 2C 62 FC | 	wrlong	local08, objptr
092ec     69 00 00 FF 
092f0     50 E5 85 F1 | 	sub	objptr, ##54096
092f4                 | ' 
092f4                 | ' t2.result.uresult=numpar
092f4                 | ' 
092f4                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
092f4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
092f4                 | ' 
092f4                 | '   
092f4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
092f4     FF FF 7F FF 
092f8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
092fc     B8 00 90 5D |  if_ne	jmp	#LR__0725
09300     15 22 06 F6 | 	mov	local03, #21
09304     0F 2D 02 F6 | 	mov	local08, local01
09308     10 2B 02 F6 | 	mov	local07, local02
0930c     11 29 02 F6 | 	mov	local06, local03
09310     69 00 00 FF 
09314     50 E5 05 F1 | 	add	objptr, ##54096
09318     F2 26 02 FB | 	rdlong	local05, objptr
0931c     13 13 02 F6 | 	mov	arg01, local05
09320     01 12 66 F0 | 	shl	arg01, #1
09324     13 13 02 F1 | 	add	arg01, local05
09328     02 12 66 F0 | 	shl	arg01, #2
0932c     03 00 00 FF 
09330     00 E4 85 F1 | 	sub	objptr, ##1536
09334     F2 12 02 F1 | 	add	arg01, objptr
09338     09 2D 62 FC | 	wrlong	local08, arg01
0933c     03 00 00 FF 
09340     00 E4 05 F1 | 	add	objptr, ##1536
09344     F2 30 02 FB | 	rdlong	local10, objptr
09348     18 2F 02 F6 | 	mov	local09, local10
0934c     01 2E 66 F0 | 	shl	local09, #1
09350     18 2F 02 F1 | 	add	local09, local10
09354     02 2E 66 F0 | 	shl	local09, #2
09358     03 00 00 FF 
0935c     00 E4 85 F1 | 	sub	objptr, ##1536
09360     F2 2E 02 F1 | 	add	local09, objptr
09364     04 2E 06 F1 | 	add	local09, #4
09368     17 2B 62 FC | 	wrlong	local07, local09
0936c     03 00 00 FF 
09370     00 E4 05 F1 | 	add	objptr, ##1536
09374     F2 2E 02 FB | 	rdlong	local09, objptr
09378     17 31 02 F6 | 	mov	local10, local09
0937c     01 30 66 F0 | 	shl	local10, #1
09380     17 31 02 F1 | 	add	local10, local09
09384     02 30 66 F0 | 	shl	local10, #2
09388     03 00 00 FF 
0938c     00 E4 85 F1 | 	sub	objptr, ##1536
09390     F2 30 02 F1 | 	add	local10, objptr
09394     08 30 06 F1 | 	add	local10, #8
09398     18 29 62 FC | 	wrlong	local06, local10
0939c     03 00 00 FF 
093a0     00 E4 05 F1 | 	add	objptr, ##1536
093a4     F2 2C 02 FB | 	rdlong	local08, objptr
093a8     01 2C 06 F1 | 	add	local08, #1
093ac     F2 2C 62 FC | 	wrlong	local08, objptr
093b0     69 00 00 FF 
093b4     50 E5 85 F1 | 	sub	objptr, ##54096
093b8                 | LR__0725
093b8     A7 F0 03 F6 | 	mov	ptra, fp
093bc     B2 00 A0 FD | 	call	#popregs_
093c0                 | _getfun_ret
093c0     2D 00 64 FD | 	ret
093c4                 | 
093c4                 | '   
093c4                 | '   
093c4                 | ' sub getvar(m as integer) 
093c4                 | _getvar
093c4     0A 4A 05 F6 | 	mov	COUNT_, #10
093c8     A8 00 A0 FD | 	call	#pushregs_
093cc                 | _getvar_enter
093cc     09 25 02 F6 | 	mov	local04, arg01
093d0     56 00 00 FF 
093d4     18 E5 05 F1 | 	add	objptr, ##44312
093d8     F2 14 02 FB | 	rdlong	arg02, objptr
093dc     03 14 66 F0 | 	shl	arg02, #3
093e0     02 00 00 FF 
093e4     38 E4 85 F1 | 	sub	objptr, ##1080
093e8     F2 14 02 F1 | 	add	arg02, objptr
093ec     0A 27 02 FB | 	rdlong	local05, arg02
093f0     13 13 02 F6 | 	mov	arg01, local05
093f4     01 14 06 F6 | 	mov	arg02, #1
093f8     54 00 00 FF 
093fc     E0 E4 85 F1 | 	sub	objptr, ##43232
09400     78 1A B1 FD | 	call	#__system__Right_S
09404     FD 28 02 F6 | 	mov	local06, result1
09408     01 2A 66 F6 | 	neg	local07, #1
0940c                 | ' 
0940c                 | ' varname$=lparts(ct).part$
0940c                 | ' suffix$=right$(varname$,1)
0940c                 | ' j=-1
0940c                 | ' 
0940c                 | ' for i=0 to varnum-1
0940c     00 2C 06 F6 | 	mov	local08, #0
09410     54 00 00 FF 
09414     DC E4 05 F1 | 	add	objptr, ##43228
09418     F2 2E 02 FB | 	rdlong	local09, objptr
0941c     54 00 00 FF 
09420     DC E4 85 F1 | 	sub	objptr, ##43228
09424                 | LR__0730
09424     17 2D 52 F2 | 	cmps	local08, local09 wc
09428     38 00 90 3D |  if_ae	jmp	#LR__0731
0942c                 | '   if variables(i).name=varname$ then j=i : exit
0942c     16 15 02 F6 | 	mov	arg02, local08
09430     04 14 66 F0 | 	shl	arg02, #4
09434     34 00 00 FF 
09438     DC E4 05 F1 | 	add	objptr, ##26844
0943c     F2 14 02 F1 | 	add	arg02, objptr
09440     0A 13 02 FB | 	rdlong	arg01, arg02
09444     13 15 02 F6 | 	mov	arg02, local05
09448     34 00 00 FF 
0944c     DC E4 85 F1 | 	sub	objptr, ##26844
09450     B8 F9 B0 FD | 	call	#__system___string_cmp
09454     00 FA 0D F2 | 	cmp	result1, #0 wz
09458     16 2B 02 A6 |  if_e	mov	local07, local08
0945c     01 2C 06 51 |  if_ne	add	local08, #1
09460     C0 FF 9F 5D |  if_ne	jmp	#LR__0730
09464                 | LR__0731
09464                 | ' if  j=-1 andalso varnum<maxvars then   
09464     FF FF 7F FF 
09468     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0946c     A8 00 90 5D |  if_ne	jmp	#LR__0732
09470     54 00 00 FF 
09474     DC E4 05 F1 | 	add	objptr, ##43228
09478     F2 2E 02 FB | 	rdlong	local09, objptr
0947c     54 00 00 FF 
09480     DC E4 85 F1 | 	sub	objptr, ##43228
09484     01 00 00 FF 
09488     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
0948c     88 00 90 3D |  if_ae	jmp	#LR__0732
09490     54 00 00 FF 
09494     DC E4 05 F1 | 	add	objptr, ##43228
09498     F2 2E 02 FB | 	rdlong	local09, objptr
0949c     04 2E 66 F0 | 	shl	local09, #4
094a0     20 00 00 FF 
094a4     00 E4 85 F1 | 	sub	objptr, ##16384
094a8     F2 2E 02 F1 | 	add	local09, objptr
094ac     17 27 62 FC | 	wrlong	local05, local09
094b0     20 00 00 FF 
094b4     00 E4 05 F1 | 	add	objptr, ##16384
094b8     F2 2E 02 FB | 	rdlong	local09, objptr
094bc     04 2E 66 F0 | 	shl	local09, #4
094c0     20 00 00 FF 
094c4     00 E4 85 F1 | 	sub	objptr, ##16384
094c8     F2 2E 02 F1 | 	add	local09, objptr
094cc     04 2E 06 F1 | 	add	local09, #4
094d0     17 01 68 FC | 	wrlong	#0, local09
094d4     20 00 00 FF 
094d8     00 E4 05 F1 | 	add	objptr, ##16384
094dc     F2 2E 02 FB | 	rdlong	local09, objptr
094e0     04 2E 66 F0 | 	shl	local09, #4
094e4     20 00 00 FF 
094e8     00 E4 85 F1 | 	sub	objptr, ##16384
094ec     F2 2E 02 F1 | 	add	local09, objptr
094f0     0C 2E 06 F1 | 	add	local09, #12
094f4     17 39 68 FC | 	wrlong	#28, local09
094f8     20 00 00 FF 
094fc     00 E4 05 F1 | 	add	objptr, ##16384
09500     F2 2E 02 FB | 	rdlong	local09, objptr
09504     17 2B 02 F6 | 	mov	local07, local09
09508     01 2E 06 F1 | 	add	local09, #1
0950c     F2 2E 62 FC | 	wrlong	local09, objptr
09510     54 00 00 FF 
09514     DC E4 85 F1 | 	sub	objptr, ##43228
09518                 | LR__0732
09518     00 2E 06 F6 | 	mov	local09, #0
0951c                 | ' numpar=0
0951c                 | ' ' check if it is an array
0951c                 | ' 
0951c                 | ' if lparts(ct+1).token=token_lpar then
0951c     56 00 00 FF 
09520     18 E5 05 F1 | 	add	objptr, ##44312
09524     F2 2C 02 FB | 	rdlong	local08, objptr
09528     01 2C 06 F1 | 	add	local08, #1
0952c     03 2C 66 F0 | 	shl	local08, #3
09530     02 00 00 FF 
09534     38 E4 85 F1 | 	sub	objptr, ##1080
09538     F2 2C 02 F1 | 	add	local08, objptr
0953c     04 2C 06 F1 | 	add	local08, #4
09540     16 2D 02 FB | 	rdlong	local08, local08
09544     15 2C 0E F2 | 	cmp	local08, #21 wz
09548     54 00 00 FF 
0954c     E0 E4 85 F1 | 	sub	objptr, ##43232
09550     08 01 90 5D |  if_ne	jmp	#LR__0737
09554     56 00 00 FF 
09558     18 E5 05 F1 | 	add	objptr, ##44312
0955c     F2 30 02 FB | 	rdlong	local10, objptr
09560     01 30 06 F1 | 	add	local10, #1
09564     F2 30 62 FC | 	wrlong	local10, objptr
09568     56 00 00 FF 
0956c     18 E5 85 F1 | 	sub	objptr, ##44312
09570                 | '   ct+=1 											' omit this lpar, this is for expr list
09570                 | '   do
09570                 | LR__0733
09570     56 00 00 FF 
09574     18 E5 05 F1 | 	add	objptr, ##44312
09578     F2 2C 02 FB | 	rdlong	local08, objptr
0957c     01 2C 06 F1 | 	add	local08, #1
09580     F2 2C 62 FC | 	wrlong	local08, objptr
09584                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09584                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09584     03 2C 66 F0 | 	shl	local08, #3
09588     02 00 00 FF 
0958c     38 E4 85 F1 | 	sub	objptr, ##1080
09590     F2 2C 02 F1 | 	add	local08, objptr
09594     04 2C 06 F1 | 	add	local08, #4
09598     16 31 02 FB | 	rdlong	local10, local08
0959c     15 30 0E F2 | 	cmp	local10, #21 wz
095a0     54 00 00 FF 
095a4     E0 E4 85 F1 | 	sub	objptr, ##43232
095a8     40 00 90 5D |  if_ne	jmp	#LR__0734
095ac     56 00 00 FF 
095b0     18 E5 05 F1 | 	add	objptr, ##44312
095b4     F2 30 02 FB | 	rdlong	local10, objptr
095b8     01 30 06 F1 | 	add	local10, #1
095bc     F2 30 62 FC | 	wrlong	local10, objptr
095c0     56 00 00 FF 
095c4     18 E5 85 F1 | 	sub	objptr, ##44312
095c8     74 EE BF FD | 	call	#_expr
095cc     56 00 00 FF 
095d0     18 E5 05 F1 | 	add	objptr, ##44312
095d4     F2 30 02 FB | 	rdlong	local10, objptr
095d8     01 30 06 F1 | 	add	local10, #1
095dc     F2 30 62 FC | 	wrlong	local10, objptr
095e0     56 00 00 FF 
095e4     18 E5 85 F1 | 	sub	objptr, ##44312
095e8     04 00 90 FD | 	jmp	#LR__0735
095ec                 | LR__0734
095ec     50 EE BF FD | 	call	#_expr
095f0                 | LR__0735
095f0     01 2E 06 F1 | 	add	local09, #1
095f4     56 00 00 FF 
095f8     18 E5 05 F1 | 	add	objptr, ##44312
095fc     F2 2C 02 FB | 	rdlong	local08, objptr
09600     03 2C 66 F0 | 	shl	local08, #3
09604     02 00 00 FF 
09608     38 E4 85 F1 | 	sub	objptr, ##1080
0960c     F2 2C 02 F1 | 	add	local08, objptr
09610     04 2C 06 F1 | 	add	local08, #4
09614     16 31 02 FB | 	rdlong	local10, local08
09618     14 30 0E F2 | 	cmp	local10, #20 wz
0961c     54 00 00 FF 
09620     E0 E4 85 F1 | 	sub	objptr, ##43232
09624     34 00 90 AD |  if_e	jmp	#LR__0736
09628     56 00 00 FF 
0962c     18 E5 05 F1 | 	add	objptr, ##44312
09630     F2 30 02 FB | 	rdlong	local10, objptr
09634     03 30 66 F0 | 	shl	local10, #3
09638     02 00 00 FF 
0963c     38 E4 85 F1 | 	sub	objptr, ##1080
09640     F2 30 02 F1 | 	add	local10, objptr
09644     04 30 06 F1 | 	add	local10, #4
09648     18 31 02 FB | 	rdlong	local10, local10
0964c     FE 31 0E F2 | 	cmp	local10, #510 wz
09650     54 00 00 FF 
09654     E0 E4 85 F1 | 	sub	objptr, ##43232
09658     14 FF 9F 5D |  if_ne	jmp	#LR__0733
0965c                 | LR__0736
0965c                 | LR__0737
0965c     17 21 02 F6 | 	mov	local02, local09
09660     11 22 06 F6 | 	mov	local03, #17
09664     15 1F 02 F6 | 	mov	local01, local07
09668     0F 31 02 F6 | 	mov	local10, local01
0966c     10 2F 02 F6 | 	mov	local09, local02
09670     11 2D 02 F6 | 	mov	local08, local03
09674     69 00 00 FF 
09678     50 E5 05 F1 | 	add	objptr, ##54096
0967c     F2 2A 02 FB | 	rdlong	local07, objptr
09680     15 29 02 F6 | 	mov	local06, local07
09684     01 28 66 F0 | 	shl	local06, #1
09688     15 29 02 F1 | 	add	local06, local07
0968c     02 28 66 F0 | 	shl	local06, #2
09690     03 00 00 FF 
09694     00 E4 85 F1 | 	sub	objptr, ##1536
09698     F2 28 02 F1 | 	add	local06, objptr
0969c     14 31 62 FC | 	wrlong	local10, local06
096a0     03 00 00 FF 
096a4     00 E4 05 F1 | 	add	objptr, ##1536
096a8     F2 30 02 FB | 	rdlong	local10, objptr
096ac     18 27 02 F6 | 	mov	local05, local10
096b0     01 26 66 F0 | 	shl	local05, #1
096b4     18 27 02 F1 | 	add	local05, local10
096b8     02 26 66 F0 | 	shl	local05, #2
096bc     03 00 00 FF 
096c0     00 E4 85 F1 | 	sub	objptr, ##1536
096c4     F2 26 02 F1 | 	add	local05, objptr
096c8     04 26 06 F1 | 	add	local05, #4
096cc     13 2F 62 FC | 	wrlong	local09, local05
096d0     03 00 00 FF 
096d4     00 E4 05 F1 | 	add	objptr, ##1536
096d8     F2 30 02 FB | 	rdlong	local10, objptr
096dc     18 FB 01 F6 | 	mov	result1, local10
096e0     01 FA 65 F0 | 	shl	result1, #1
096e4     18 FB 01 F1 | 	add	result1, local10
096e8     02 FA 65 F0 | 	shl	result1, #2
096ec     03 00 00 FF 
096f0     00 E4 85 F1 | 	sub	objptr, ##1536
096f4     F2 FA 01 F1 | 	add	result1, objptr
096f8     08 FA 05 F1 | 	add	result1, #8
096fc     FD 2C 62 FC | 	wrlong	local08, result1
09700     03 00 00 FF 
09704     00 E4 05 F1 | 	add	objptr, ##1536
09708     F2 30 02 FB | 	rdlong	local10, objptr
0970c     01 30 06 F1 | 	add	local10, #1
09710     F2 30 62 FC | 	wrlong	local10, objptr
09714     69 00 00 FF 
09718     50 E5 85 F1 | 	sub	objptr, ##54096
0971c                 | ' 
0971c                 | ' t2.result.twowords(1)=numpar
0971c                 | ' 
0971c                 | ' 
0971c                 | ' 
0971c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0971c                 | ' 
0971c                 | ' 
0971c                 | '  
0971c                 | ' 
0971c                 | ' 701 
0971c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0971c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0971c     FF FF 7F FF 
09720     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09724     B8 00 90 5D |  if_ne	jmp	#LR__0738
09728     15 22 06 F6 | 	mov	local03, #21
0972c     0F 31 02 F6 | 	mov	local10, local01
09730     10 2F 02 F6 | 	mov	local09, local02
09734     11 2D 02 F6 | 	mov	local08, local03
09738     69 00 00 FF 
0973c     50 E5 05 F1 | 	add	objptr, ##54096
09740     F2 2A 02 FB | 	rdlong	local07, objptr
09744     15 29 02 F6 | 	mov	local06, local07
09748     01 28 66 F0 | 	shl	local06, #1
0974c     15 29 02 F1 | 	add	local06, local07
09750     02 28 66 F0 | 	shl	local06, #2
09754     03 00 00 FF 
09758     00 E4 85 F1 | 	sub	objptr, ##1536
0975c     F2 28 02 F1 | 	add	local06, objptr
09760     14 31 62 FC | 	wrlong	local10, local06
09764     03 00 00 FF 
09768     00 E4 05 F1 | 	add	objptr, ##1536
0976c     F2 1E 02 FB | 	rdlong	local01, objptr
09770     0F 27 02 F6 | 	mov	local05, local01
09774     01 26 66 F0 | 	shl	local05, #1
09778     0F 27 02 F1 | 	add	local05, local01
0977c     02 26 66 F0 | 	shl	local05, #2
09780     03 00 00 FF 
09784     00 E4 85 F1 | 	sub	objptr, ##1536
09788     F2 26 02 F1 | 	add	local05, objptr
0978c     04 26 06 F1 | 	add	local05, #4
09790     13 2F 62 FC | 	wrlong	local09, local05
09794     03 00 00 FF 
09798     00 E4 05 F1 | 	add	objptr, ##1536
0979c     F2 1E 02 FB | 	rdlong	local01, objptr
097a0     0F FB 01 F6 | 	mov	result1, local01
097a4     01 FA 65 F0 | 	shl	result1, #1
097a8     0F FB 01 F1 | 	add	result1, local01
097ac     02 FA 65 F0 | 	shl	result1, #2
097b0     03 00 00 FF 
097b4     00 E4 85 F1 | 	sub	objptr, ##1536
097b8     F2 FA 01 F1 | 	add	result1, objptr
097bc     08 FA 05 F1 | 	add	result1, #8
097c0     FD 2C 62 FC | 	wrlong	local08, result1
097c4     03 00 00 FF 
097c8     00 E4 05 F1 | 	add	objptr, ##1536
097cc     F2 30 02 FB | 	rdlong	local10, objptr
097d0     01 30 06 F1 | 	add	local10, #1
097d4     F2 30 62 FC | 	wrlong	local10, objptr
097d8     69 00 00 FF 
097dc     50 E5 85 F1 | 	sub	objptr, ##54096
097e0                 | LR__0738
097e0     A7 F0 03 F6 | 	mov	ptra, fp
097e4     B2 00 A0 FD | 	call	#popregs_
097e8                 | _getvar_ret
097e8     2D 00 64 FD | 	ret
097ec                 | 
097ec                 | ' 
097ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097ec                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
097ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097ec                 | ' 
097ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097ec                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
097ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097ec                 | ' 
097ec                 | ' function execute_line (astart=0 as integer) as integer
097ec                 | _execute_line
097ec     04 4A 05 F6 | 	mov	COUNT_, #4
097f0     A8 00 A0 FD | 	call	#pushregs_
097f4     79 00 00 FF 
097f8     88 E4 05 F1 | 	add	objptr, ##62088
097fc     F2 00 68 FC | 	wrlong	#0, objptr
09800                 | ' runptr2=0
09800                 | ' for lineptr_e=astart to lineptr-1
09800     0F 00 00 FF 
09804     34 E5 85 F1 | 	sub	objptr, ##7988
09808     F2 12 62 FC | 	wrlong	arg01, objptr
0980c     04 E4 85 F1 | 	sub	objptr, #4
09810     F2 1E 02 FB | 	rdlong	local01, objptr
09814     69 00 00 FF 
09818     50 E5 85 F1 | 	sub	objptr, ##54096
0981c                 | LR__0740
0981c     69 00 00 FF 
09820     54 E5 05 F1 | 	add	objptr, ##54100
09824     F2 FA 01 FB | 	rdlong	result1, objptr
09828     69 00 00 FF 
0982c     54 E5 85 F1 | 	sub	objptr, ##54100
09830     0F FB 51 F2 | 	cmps	result1, local01 wc
09834     98 00 90 3D |  if_ae	jmp	#LR__0741
09838     69 00 00 FF 
0983c     54 E5 05 F1 | 	add	objptr, ##54100
09840     F2 FA 01 FB | 	rdlong	result1, objptr
09844     FD 20 02 F6 | 	mov	local02, result1
09848     01 20 66 F0 | 	shl	local02, #1
0984c     FD 20 02 F1 | 	add	local02, result1
09850     02 20 66 F0 | 	shl	local02, #2
09854     03 00 00 FF 
09858     04 E4 85 F1 | 	sub	objptr, ##1540
0985c     F2 20 02 F1 | 	add	local02, objptr
09860     08 20 06 F1 | 	add	local02, #8
09864     10 21 02 FB | 	rdlong	local02, local02
09868     10 21 E2 F8 | 	getbyte	local02, local02, #0
0986c     02 20 66 F0 | 	shl	local02, #2
09870     04 00 00 FF 
09874     1C E4 85 F1 | 	sub	objptr, ##2076
09878     F2 20 02 F1 | 	add	local02, objptr
0987c     10 21 02 FB | 	rdlong	local02, local02
09880     10 23 02 F6 | 	mov	local03, local02
09884     13 20 46 F7 | 	zerox	local02, #19
09888     14 22 46 F0 | 	shr	local03, #20
0988c     02 22 66 F0 | 	shl	local03, #2
09890     ED 22 02 F1 | 	add	local03, __methods__
09894     11 23 02 FB | 	rdlong	local03, local03
09898     62 00 00 FF 
0989c     34 E5 85 F1 | 	sub	objptr, ##50484
098a0     F2 24 02 F6 | 	mov	local04, objptr
098a4     10 E5 01 F6 | 	mov	objptr, local02
098a8     2D 22 62 FD | 	call	local03
098ac     12 E5 01 F6 | 	mov	objptr, local04
098b0     69 00 00 FF 
098b4     54 E5 05 F1 | 	add	objptr, ##54100
098b8     F2 24 02 FB | 	rdlong	local04, objptr
098bc     01 24 06 F1 | 	add	local04, #1
098c0     F2 24 62 FC | 	wrlong	local04, objptr
098c4     69 00 00 FF 
098c8     54 E5 85 F1 | 	sub	objptr, ##54100
098cc     4C FF 9F FD | 	jmp	#LR__0740
098d0                 | LR__0741
098d0                 | ' return runptr2
098d0     79 00 00 FF 
098d4     88 E4 05 F1 | 	add	objptr, ##62088
098d8     F2 FA 01 FB | 	rdlong	result1, objptr
098dc     79 00 00 FF 
098e0     88 E4 85 F1 | 	sub	objptr, ##62088
098e4     A7 F0 03 F6 | 	mov	ptra, fp
098e8     B2 00 A0 FD | 	call	#popregs_
098ec                 | _execute_line_ret
098ec     2D 00 64 FD | 	ret
098f0                 | 
098f0                 | ' 
098f0                 | ' 
098f0                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
098f0                 | ' 
098f0                 | ' function pop() as expr_result
098f0                 | _pop
098f0                 | ' 
098f0                 | ' if stackpointer=0 then
098f0     62 00 00 FF 
098f4     2C E5 05 F1 | 	add	objptr, ##50476
098f8     F2 FA 09 FB | 	rdlong	result1, objptr wz
098fc     62 00 00 FF 
09900     2C E5 85 F1 | 	sub	objptr, ##50476
09904     FF 04 06 A6 |  if_e	mov	_var03, #255
09908     18 00 06 A6 |  if_e	mov	_var01, #24
0990c     68 00 90 AD |  if_e	jmp	#LR__0750
09910     62 00 00 FF 
09914     2C E5 05 F1 | 	add	objptr, ##50476
09918     F2 FA 01 FB | 	rdlong	result1, objptr
0991c     01 FA 85 F1 | 	sub	result1, #1
09920     F2 FA 61 FC | 	wrlong	result1, objptr
09924     FD FE 01 F6 | 	mov	result3, result1
09928     01 FE 65 F0 | 	shl	result3, #1
0992c     FD FE 01 F1 | 	add	result3, result1
09930     02 FE 65 F0 | 	shl	result3, #2
09934     0C 00 00 FF 
09938     0C E4 85 F1 | 	sub	objptr, ##6156
0993c     F2 FE 01 F1 | 	add	result3, objptr
09940     FF 00 02 FB | 	rdlong	_var01, result3
09944     04 FE 05 F1 | 	add	result3, #4
09948     FF FE 01 FB | 	rdlong	result3, result3
0994c     FD FC 01 F6 | 	mov	result2, result1
09950     01 FC 65 F0 | 	shl	result2, #1
09954     FD FC 01 F1 | 	add	result2, result1
09958     02 FC 65 F0 | 	shl	result2, #2
0995c     F2 FC 01 F1 | 	add	result2, objptr
09960     08 FC 05 F1 | 	add	result2, #8
09964     FE FA 01 FB | 	rdlong	result1, result2
09968     FF 02 02 F6 | 	mov	_var02, result3
0996c     FD 04 02 F6 | 	mov	_var03, result1
09970     56 00 00 FF 
09974     20 E5 85 F1 | 	sub	objptr, ##44320
09978                 | LR__0750
09978                 | ' return t1
09978     01 FD 01 F6 | 	mov	result2, _var02
0997c     02 FF 01 F6 | 	mov	result3, _var03
09980     00 FB 01 F6 | 	mov	result1, _var01
09984                 | _pop_ret
09984     2D 00 64 FD | 	ret
09988                 | 
09988                 | ' 
09988                 | ' sub push(t1 as expr_result )
09988                 | _push
09988                 | ' 
09988                 | ' 'print "In push: "; t1.result_type
09988                 | ' 'print "In push: "; t1.result.uresult
09988                 | ' 
09988                 | ' if stackpointer<maxstack then 
09988     62 00 00 FF 
0998c     2C E5 05 F1 | 	add	objptr, ##50476
09990     F2 00 02 FB | 	rdlong	_var01, objptr
09994     62 00 00 FF 
09998     2C E5 85 F1 | 	sub	objptr, ##50476
0999c     01 00 00 FF 
099a0     00 00 56 F2 | 	cmps	_var01, ##512 wc
099a4     BC 00 90 3D |  if_ae	jmp	#LR__0760
099a8     09 01 02 FB | 	rdlong	_var01, arg01
099ac     04 12 06 F1 | 	add	arg01, #4
099b0     09 03 02 FB | 	rdlong	_var02, arg01
099b4     04 12 06 F1 | 	add	arg01, #4
099b8     09 13 02 FB | 	rdlong	arg01, arg01
099bc     62 00 00 FF 
099c0     2C E5 05 F1 | 	add	objptr, ##50476
099c4     F2 04 02 FB | 	rdlong	_var03, objptr
099c8     02 07 02 F6 | 	mov	_var04, _var03
099cc     01 06 66 F0 | 	shl	_var04, #1
099d0     02 07 02 F1 | 	add	_var04, _var03
099d4     02 06 66 F0 | 	shl	_var04, #2
099d8     0C 00 00 FF 
099dc     0C E4 85 F1 | 	sub	objptr, ##6156
099e0     F2 06 02 F1 | 	add	_var04, objptr
099e4     03 01 62 FC | 	wrlong	_var01, _var04
099e8     0C 00 00 FF 
099ec     0C E4 05 F1 | 	add	objptr, ##6156
099f0     F2 06 02 FB | 	rdlong	_var04, objptr
099f4     03 05 02 F6 | 	mov	_var03, _var04
099f8     01 04 66 F0 | 	shl	_var03, #1
099fc     03 05 02 F1 | 	add	_var03, _var04
09a00     02 04 66 F0 | 	shl	_var03, #2
09a04     0C 00 00 FF 
09a08     0C E4 85 F1 | 	sub	objptr, ##6156
09a0c     F2 04 02 F1 | 	add	_var03, objptr
09a10     04 04 06 F1 | 	add	_var03, #4
09a14     02 03 62 FC | 	wrlong	_var02, _var03
09a18     0C 00 00 FF 
09a1c     0C E4 05 F1 | 	add	objptr, ##6156
09a20     F2 06 02 FB | 	rdlong	_var04, objptr
09a24     03 05 02 F6 | 	mov	_var03, _var04
09a28     01 04 66 F0 | 	shl	_var03, #1
09a2c     03 05 02 F1 | 	add	_var03, _var04
09a30     02 04 66 F0 | 	shl	_var03, #2
09a34     0C 00 00 FF 
09a38     0C E4 85 F1 | 	sub	objptr, ##6156
09a3c     F2 04 02 F1 | 	add	_var03, objptr
09a40     08 04 06 F1 | 	add	_var03, #8
09a44     02 13 62 FC | 	wrlong	arg01, _var03
09a48     0C 00 00 FF 
09a4c     0C E4 05 F1 | 	add	objptr, ##6156
09a50     F2 00 02 FB | 	rdlong	_var01, objptr
09a54     01 00 06 F1 | 	add	_var01, #1
09a58     F2 00 62 FC | 	wrlong	_var01, objptr
09a5c     62 00 00 FF 
09a60     2C E5 85 F1 | 	sub	objptr, ##50476
09a64                 | LR__0760
09a64                 | _push_ret
09a64     2D 00 64 FD | 	ret
09a68                 | 
09a68                 | ' 
09a68                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
09a68                 | ' 
09a68                 | ' sub do_push
09a68                 | _do_push
09a68                 | ' if stackpointer<maxstack then 
09a68     62 00 00 FF 
09a6c     2C E5 05 F1 | 	add	objptr, ##50476
09a70     F2 00 02 FB | 	rdlong	_var01, objptr
09a74     62 00 00 FF 
09a78     2C E5 85 F1 | 	sub	objptr, ##50476
09a7c     01 00 00 FF 
09a80     00 00 56 F2 | 	cmps	_var01, ##512 wc
09a84     F8 00 90 3D |  if_ae	jmp	#LR__0770
09a88     69 00 00 FF 
09a8c     54 E5 05 F1 | 	add	objptr, ##54100
09a90     F2 02 02 FB | 	rdlong	_var02, objptr
09a94     01 05 02 F6 | 	mov	_var03, _var02
09a98     01 04 66 F0 | 	shl	_var03, #1
09a9c     01 05 02 F1 | 	add	_var03, _var02
09aa0     02 04 66 F0 | 	shl	_var03, #2
09aa4     03 00 00 FF 
09aa8     04 E4 85 F1 | 	sub	objptr, ##1540
09aac     F2 04 02 F1 | 	add	_var03, objptr
09ab0     02 01 02 FB | 	rdlong	_var01, _var03
09ab4     04 04 06 F1 | 	add	_var03, #4
09ab8     02 07 02 FB | 	rdlong	_var04, _var03
09abc     01 05 02 F6 | 	mov	_var03, _var02
09ac0     01 04 66 F0 | 	shl	_var03, #1
09ac4     01 05 02 F1 | 	add	_var03, _var02
09ac8     02 04 66 F0 | 	shl	_var03, #2
09acc     F2 04 02 F1 | 	add	_var03, objptr
09ad0     08 04 06 F1 | 	add	_var03, #8
09ad4     02 03 02 FB | 	rdlong	_var02, _var03
09ad8     04 00 00 FF 
09adc     24 E4 85 F1 | 	sub	objptr, ##2084
09ae0     F2 04 02 FB | 	rdlong	_var03, objptr
09ae4     02 09 02 F6 | 	mov	_var05, _var03
09ae8     01 08 66 F0 | 	shl	_var05, #1
09aec     02 09 02 F1 | 	add	_var05, _var03
09af0     02 08 66 F0 | 	shl	_var05, #2
09af4     0C 00 00 FF 
09af8     0C E4 85 F1 | 	sub	objptr, ##6156
09afc     F2 08 02 F1 | 	add	_var05, objptr
09b00     04 01 62 FC | 	wrlong	_var01, _var05
09b04     0C 00 00 FF 
09b08     0C E4 05 F1 | 	add	objptr, ##6156
09b0c     F2 08 02 FB | 	rdlong	_var05, objptr
09b10     04 05 02 F6 | 	mov	_var03, _var05
09b14     01 04 66 F0 | 	shl	_var03, #1
09b18     04 05 02 F1 | 	add	_var03, _var05
09b1c     02 04 66 F0 | 	shl	_var03, #2
09b20     0C 00 00 FF 
09b24     0C E4 85 F1 | 	sub	objptr, ##6156
09b28     F2 04 02 F1 | 	add	_var03, objptr
09b2c     04 04 06 F1 | 	add	_var03, #4
09b30     02 07 62 FC | 	wrlong	_var04, _var03
09b34     0C 00 00 FF 
09b38     0C E4 05 F1 | 	add	objptr, ##6156
09b3c     F2 08 02 FB | 	rdlong	_var05, objptr
09b40     04 07 02 F6 | 	mov	_var04, _var05
09b44     01 06 66 F0 | 	shl	_var04, #1
09b48     04 07 02 F1 | 	add	_var04, _var05
09b4c     02 06 66 F0 | 	shl	_var04, #2
09b50     0C 00 00 FF 
09b54     0C E4 85 F1 | 	sub	objptr, ##6156
09b58     F2 06 02 F1 | 	add	_var04, objptr
09b5c     08 06 06 F1 | 	add	_var04, #8
09b60     03 03 62 FC | 	wrlong	_var02, _var04
09b64     0C 00 00 FF 
09b68     0C E4 05 F1 | 	add	objptr, ##6156
09b6c     F2 00 02 FB | 	rdlong	_var01, objptr
09b70     01 00 06 F1 | 	add	_var01, #1
09b74     F2 00 62 FC | 	wrlong	_var01, objptr
09b78     62 00 00 FF 
09b7c     2C E5 85 F1 | 	sub	objptr, ##50476
09b80                 | LR__0770
09b80                 | _do_push_ret
09b80     2D 00 64 FD | 	ret
09b84                 | 
09b84                 | ' 
09b84                 | '   
09b84                 | ' sub csave_block(address as ulong)
09b84                 | _csave_block
09b84     09 01 02 F6 | 	mov	_var01, arg01
09b88                 | ' 
09b88                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09b88                 | ' ' we enter it at the state of playing 1 kHz header tone
09b88                 | ' 
09b88                 | ' for i=0 to 63 step 2
09b88     00 02 06 F6 | 	mov	_var02, #0
09b8c                 | LR__0780
09b8c                 | '   do: loop until lpeek(base+32*7)>32768
09b8c     56 00 00 FF 
09b90     E4 E4 05 F1 | 	add	objptr, ##44260
09b94     97 0C 48 FB | 	callpa	#(@LR__0782-@LR__0781)>>2,fcache_load_ptr_
09b98                 | LR__0781
09b98     F2 12 02 FB | 	rdlong	arg01, objptr
09b9c     E0 12 06 F1 | 	add	arg01, #224
09ba0     09 FB 01 FB | 	rdlong	result1, arg01
09ba4     40 00 00 FF 
09ba8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09bac     E8 FF 9F CD |  if_b	jmp	#LR__0781
09bb0                 | LR__0782
09bb0     00 13 02 F6 | 	mov	arg01, _var01
09bb4     01 05 02 F6 | 	mov	_var03, _var02
09bb8     02 04 66 F0 | 	shl	_var03, #2
09bbc     02 13 02 F1 | 	add	arg01, _var03
09bc0     09 07 02 FB | 	rdlong	_var04, arg01
09bc4     24 00 00 FF 
09bc8     C4 E4 05 F1 | 	add	objptr, ##18628
09bcc     F2 06 62 FC | 	wrlong	_var04, objptr
09bd0     7A 00 00 FF 
09bd4     A8 E5 85 F1 | 	sub	objptr, ##62888
09bd8                 | '   q=lpeek(address+4*i)
09bd8                 | '      for bit=0 to 31
09bd8     00 08 06 F6 | 	mov	_var05, #0
09bdc     97 84 48 FB | 	callpa	#(@LR__0787-@LR__0783)>>2,fcache_load_ptr_
09be0                 | LR__0783
09be0                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09be0     7A 00 00 FF 
09be4     A8 E5 05 F1 | 	add	objptr, ##62888
09be8     F2 06 02 FB | 	rdlong	_var04, objptr
09bec     7A 00 00 FF 
09bf0     A8 E5 85 F1 | 	sub	objptr, ##62888
09bf4     04 05 C2 F9 | 	decod	_var03, _var05
09bf8     02 07 CA F7 | 	test	_var04, _var03 wz
09bfc     60 00 90 AD |  if_e	jmp	#LR__0784
09c00     04 05 02 F6 | 	mov	_var03, _var05
09c04     02 04 66 F0 | 	shl	_var03, #2
09c08     76 00 00 FF 
09c0c     80 E5 05 F1 | 	add	objptr, ##60800
09c10     F2 04 02 F1 | 	add	_var03, objptr
09c14     02 FF 48 FC | 	wrbyte	#127, _var03
09c18     04 05 02 F6 | 	mov	_var03, _var05
09c1c     02 04 66 F0 | 	shl	_var03, #2
09c20     01 04 06 F1 | 	add	_var03, #1
09c24     F2 04 02 F1 | 	add	_var03, objptr
09c28     02 01 49 FC | 	wrbyte	#128, _var03
09c2c     04 05 02 F6 | 	mov	_var03, _var05
09c30     02 04 66 F0 | 	shl	_var03, #2
09c34     02 04 06 F1 | 	add	_var03, #2
09c38     F2 04 02 F1 | 	add	_var03, objptr
09c3c     02 FF 48 FC | 	wrbyte	#127, _var03
09c40     04 05 02 F6 | 	mov	_var03, _var05
09c44     02 04 66 F0 | 	shl	_var03, #2
09c48     03 04 06 F1 | 	add	_var03, #3
09c4c     F2 04 02 F1 | 	add	_var03, objptr
09c50     02 01 49 FC | 	wrbyte	#128, _var03
09c54     76 00 00 FF 
09c58     80 E5 85 F1 | 	sub	objptr, ##60800
09c5c     5C 00 90 FD | 	jmp	#LR__0785
09c60                 | LR__0784
09c60     04 05 02 F6 | 	mov	_var03, _var05
09c64     02 04 66 F0 | 	shl	_var03, #2
09c68     76 00 00 FF 
09c6c     80 E5 05 F1 | 	add	objptr, ##60800
09c70     F2 04 02 F1 | 	add	_var03, objptr
09c74     02 01 49 FC | 	wrbyte	#128, _var03
09c78     04 05 02 F6 | 	mov	_var03, _var05
09c7c     02 04 66 F0 | 	shl	_var03, #2
09c80     01 04 06 F1 | 	add	_var03, #1
09c84     F2 04 02 F1 | 	add	_var03, objptr
09c88     02 01 49 FC | 	wrbyte	#128, _var03
09c8c     04 05 02 F6 | 	mov	_var03, _var05
09c90     02 04 66 F0 | 	shl	_var03, #2
09c94     02 04 06 F1 | 	add	_var03, #2
09c98     F2 04 02 F1 | 	add	_var03, objptr
09c9c     02 FF 48 FC | 	wrbyte	#127, _var03
09ca0     04 05 02 F6 | 	mov	_var03, _var05
09ca4     02 04 66 F0 | 	shl	_var03, #2
09ca8     03 04 06 F1 | 	add	_var03, #3
09cac     F2 04 02 F1 | 	add	_var03, objptr
09cb0     02 FF 48 FC | 	wrbyte	#127, _var03
09cb4     76 00 00 FF 
09cb8     80 E5 85 F1 | 	sub	objptr, ##60800
09cbc                 | LR__0785
09cbc     01 08 06 F1 | 	add	_var05, #1
09cc0     20 08 56 F2 | 	cmps	_var05, #32 wc
09cc4     18 FF 9F CD |  if_b	jmp	#LR__0783
09cc8                 | '   do: loop until lpeek(base+32*7)<32768
09cc8     56 00 00 FF 
09ccc     E4 E4 05 F1 | 	add	objptr, ##44260
09cd0                 | LR__0786
09cd0     F2 12 02 FB | 	rdlong	arg01, objptr
09cd4     E0 12 06 F1 | 	add	arg01, #224
09cd8     09 FB 01 FB | 	rdlong	result1, arg01
09cdc     40 00 00 FF 
09ce0     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09ce4     E8 FF 9F 3D |  if_ae	jmp	#LR__0786
09ce8                 | LR__0787
09ce8     00 13 02 F6 | 	mov	arg01, _var01
09cec     04 12 06 F1 | 	add	arg01, #4
09cf0     01 05 02 F6 | 	mov	_var03, _var02
09cf4     02 04 66 F0 | 	shl	_var03, #2
09cf8     02 13 02 F1 | 	add	arg01, _var03
09cfc     09 07 02 FB | 	rdlong	_var04, arg01
09d00     24 00 00 FF 
09d04     C4 E4 05 F1 | 	add	objptr, ##18628
09d08     F2 06 62 FC | 	wrlong	_var04, objptr
09d0c     7A 00 00 FF 
09d10     A8 E5 85 F1 | 	sub	objptr, ##62888
09d14                 | '   q=lpeek(address+4+4*i)
09d14                 | '      for bit=0 to 31
09d14     00 08 06 F6 | 	mov	_var05, #0
09d18     97 94 48 FB | 	callpa	#(@LR__0791-@LR__0788)>>2,fcache_load_ptr_
09d1c                 | LR__0788
09d1c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09d1c     7A 00 00 FF 
09d20     A8 E5 05 F1 | 	add	objptr, ##62888
09d24     F2 06 02 FB | 	rdlong	_var04, objptr
09d28     7A 00 00 FF 
09d2c     A8 E5 85 F1 | 	sub	objptr, ##62888
09d30     04 05 C2 F9 | 	decod	_var03, _var05
09d34     02 07 CA F7 | 	test	_var04, _var03 wz
09d38     80 00 90 AD |  if_e	jmp	#LR__0789
09d3c     04 0B 02 F6 | 	mov	_var06, _var05
09d40     02 0A 66 F0 | 	shl	_var06, #2
09d44     80 04 06 F6 | 	mov	_var03, #128
09d48     05 05 02 F1 | 	add	_var03, _var06
09d4c     76 00 00 FF 
09d50     80 E5 05 F1 | 	add	objptr, ##60800
09d54     F2 04 02 F1 | 	add	_var03, objptr
09d58     02 FF 48 FC | 	wrbyte	#127, _var03
09d5c     04 0B 02 F6 | 	mov	_var06, _var05
09d60     02 0A 66 F0 | 	shl	_var06, #2
09d64     80 04 06 F6 | 	mov	_var03, #128
09d68     05 05 02 F1 | 	add	_var03, _var06
09d6c     01 04 06 F1 | 	add	_var03, #1
09d70     F2 04 02 F1 | 	add	_var03, objptr
09d74     02 01 49 FC | 	wrbyte	#128, _var03
09d78     04 0B 02 F6 | 	mov	_var06, _var05
09d7c     02 0A 66 F0 | 	shl	_var06, #2
09d80     80 04 06 F6 | 	mov	_var03, #128
09d84     05 05 02 F1 | 	add	_var03, _var06
09d88     02 04 06 F1 | 	add	_var03, #2
09d8c     F2 04 02 F1 | 	add	_var03, objptr
09d90     02 FF 48 FC | 	wrbyte	#127, _var03
09d94     04 0B 02 F6 | 	mov	_var06, _var05
09d98     02 0A 66 F0 | 	shl	_var06, #2
09d9c     80 04 06 F6 | 	mov	_var03, #128
09da0     05 05 02 F1 | 	add	_var03, _var06
09da4     03 04 06 F1 | 	add	_var03, #3
09da8     F2 04 02 F1 | 	add	_var03, objptr
09dac     02 01 49 FC | 	wrbyte	#128, _var03
09db0     76 00 00 FF 
09db4     80 E5 85 F1 | 	sub	objptr, ##60800
09db8     7C 00 90 FD | 	jmp	#LR__0790
09dbc                 | LR__0789
09dbc     04 0B 02 F6 | 	mov	_var06, _var05
09dc0     02 0A 66 F0 | 	shl	_var06, #2
09dc4     80 04 06 F6 | 	mov	_var03, #128
09dc8     05 05 02 F1 | 	add	_var03, _var06
09dcc     76 00 00 FF 
09dd0     80 E5 05 F1 | 	add	objptr, ##60800
09dd4     F2 04 02 F1 | 	add	_var03, objptr
09dd8     02 01 49 FC | 	wrbyte	#128, _var03
09ddc     04 0B 02 F6 | 	mov	_var06, _var05
09de0     02 0A 66 F0 | 	shl	_var06, #2
09de4     80 04 06 F6 | 	mov	_var03, #128
09de8     05 05 02 F1 | 	add	_var03, _var06
09dec     01 04 06 F1 | 	add	_var03, #1
09df0     F2 04 02 F1 | 	add	_var03, objptr
09df4     02 01 49 FC | 	wrbyte	#128, _var03
09df8     04 0B 02 F6 | 	mov	_var06, _var05
09dfc     02 0A 66 F0 | 	shl	_var06, #2
09e00     80 04 06 F6 | 	mov	_var03, #128
09e04     05 05 02 F1 | 	add	_var03, _var06
09e08     02 04 06 F1 | 	add	_var03, #2
09e0c     F2 04 02 F1 | 	add	_var03, objptr
09e10     02 FF 48 FC | 	wrbyte	#127, _var03
09e14     04 0B 02 F6 | 	mov	_var06, _var05
09e18     02 0A 66 F0 | 	shl	_var06, #2
09e1c     80 04 06 F6 | 	mov	_var03, #128
09e20     05 05 02 F1 | 	add	_var03, _var06
09e24     03 04 06 F1 | 	add	_var03, #3
09e28     F2 04 02 F1 | 	add	_var03, objptr
09e2c     02 FF 48 FC | 	wrbyte	#127, _var03
09e30     76 00 00 FF 
09e34     80 E5 85 F1 | 	sub	objptr, ##60800
09e38                 | LR__0790
09e38     01 08 06 F1 | 	add	_var05, #1
09e3c     20 08 56 F2 | 	cmps	_var05, #32 wc
09e40     D8 FE 9F CD |  if_b	jmp	#LR__0788
09e44                 | LR__0791
09e44     02 02 06 F1 | 	add	_var02, #2
09e48     40 02 56 F2 | 	cmps	_var02, #64 wc
09e4c     3C FD 9F CD |  if_b	jmp	#LR__0780
09e50                 | ' do: loop until lpeek(base+32*7)>32768
09e50     56 00 00 FF 
09e54     E4 E4 05 F1 | 	add	objptr, ##44260
09e58     97 84 48 FB | 	callpa	#(@LR__0800-@LR__0792)>>2,fcache_load_ptr_
09e5c                 | LR__0792
09e5c     F2 12 02 FB | 	rdlong	arg01, objptr
09e60     E0 12 06 F1 | 	add	arg01, #224
09e64     09 FB 01 FB | 	rdlong	result1, arg01
09e68     40 00 00 FF 
09e6c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09e70     E8 FF 9F CD |  if_b	jmp	#LR__0792
09e74     56 00 00 FF 
09e78     E4 E4 85 F1 | 	sub	objptr, ##44260
09e7c                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09e7c     00 02 06 F6 | 	mov	_var02, #0
09e80                 | LR__0793
09e80     01 07 52 F6 | 	abs	_var04, _var02 wc
09e84     07 06 06 F5 | 	and	_var04, #7
09e88     03 07 82 F6 | 	negc	_var04, _var04
09e8c     04 06 56 F2 | 	cmps	_var04, #4 wc
09e90     20 00 90 3D |  if_ae	jmp	#LR__0794
09e94     01 0B 02 F6 | 	mov	_var06, _var02
09e98     76 00 00 FF 
09e9c     80 E5 05 F1 | 	add	objptr, ##60800
09ea0     F2 0A 02 F1 | 	add	_var06, objptr
09ea4     05 FF 48 FC | 	wrbyte	#127, _var06
09ea8     76 00 00 FF 
09eac     80 E5 85 F1 | 	sub	objptr, ##60800
09eb0     1C 00 90 FD | 	jmp	#LR__0795
09eb4                 | LR__0794
09eb4     01 0B 02 F6 | 	mov	_var06, _var02
09eb8     76 00 00 FF 
09ebc     80 E5 05 F1 | 	add	objptr, ##60800
09ec0     F2 0A 02 F1 | 	add	_var06, objptr
09ec4     05 01 49 FC | 	wrbyte	#128, _var06
09ec8     76 00 00 FF 
09ecc     80 E5 85 F1 | 	sub	objptr, ##60800
09ed0                 | LR__0795
09ed0     01 02 06 F1 | 	add	_var02, #1
09ed4     80 02 56 F2 | 	cmps	_var02, #128 wc
09ed8     A4 FF 9F CD |  if_b	jmp	#LR__0793
09edc                 | ' 
09edc                 | ' do: loop until lpeek(base+32*7)<32768
09edc     56 00 00 FF 
09ee0     E4 E4 05 F1 | 	add	objptr, ##44260
09ee4                 | LR__0796
09ee4     F2 12 02 FB | 	rdlong	arg01, objptr
09ee8     E0 12 06 F1 | 	add	arg01, #224
09eec     09 FB 01 FB | 	rdlong	result1, arg01
09ef0     40 00 00 FF 
09ef4     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09ef8     E8 FF 9F 3D |  if_ae	jmp	#LR__0796
09efc     56 00 00 FF 
09f00     E4 E4 85 F1 | 	sub	objptr, ##44260
09f04                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09f04     80 02 06 F6 | 	mov	_var02, #128
09f08                 | LR__0797
09f08     01 07 52 F6 | 	abs	_var04, _var02 wc
09f0c     07 06 06 F5 | 	and	_var04, #7
09f10     03 07 82 F6 | 	negc	_var04, _var04
09f14     04 06 56 F2 | 	cmps	_var04, #4 wc
09f18     20 00 90 3D |  if_ae	jmp	#LR__0798
09f1c     01 0B 02 F6 | 	mov	_var06, _var02
09f20     76 00 00 FF 
09f24     80 E5 05 F1 | 	add	objptr, ##60800
09f28     F2 0A 02 F1 | 	add	_var06, objptr
09f2c     05 FF 48 FC | 	wrbyte	#127, _var06
09f30     76 00 00 FF 
09f34     80 E5 85 F1 | 	sub	objptr, ##60800
09f38     1C 00 90 FD | 	jmp	#LR__0799
09f3c                 | LR__0798
09f3c     01 0B 02 F6 | 	mov	_var06, _var02
09f40     76 00 00 FF 
09f44     80 E5 05 F1 | 	add	objptr, ##60800
09f48     F2 0A 02 F1 | 	add	_var06, objptr
09f4c     05 01 49 FC | 	wrbyte	#128, _var06
09f50     76 00 00 FF 
09f54     80 E5 85 F1 | 	sub	objptr, ##60800
09f58                 | LR__0799
09f58     01 02 06 F1 | 	add	_var02, #1
09f5c     00 03 16 F2 | 	cmp	_var02, #256 wc
09f60     A4 FF 9F CD |  if_b	jmp	#LR__0797
09f64                 | LR__0800
09f64                 | _csave_block_ret
09f64     2D 00 64 FD | 	ret
09f68                 | 
09f68                 | ' 
09f68                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09f68                 | _csave_addtoblock
09f68     04 4A 05 F6 | 	mov	COUNT_, #4
09f6c     A8 00 A0 FD | 	call	#pushregs_
09f70     09 1F 02 F6 | 	mov	local01, arg01
09f74                 | ' 
09f74                 | ' 
09f74                 | ' if force=0 then
09f74     07 14 4E F7 | 	zerox	arg02, #7 wz
09f78     78 00 90 5D |  if_ne	jmp	#LR__0810
09f7c     79 00 00 FF 
09f80     80 E4 05 F1 | 	add	objptr, ##62080
09f84     F2 14 02 FB | 	rdlong	arg02, objptr
09f88     02 00 00 FF 
09f8c     00 E4 85 F1 | 	sub	objptr, ##1024
09f90     F2 14 02 F1 | 	add	arg02, objptr
09f94     0A 1F 42 FC | 	wrbyte	local01, arg02
09f98     02 00 00 FF 
09f9c     00 E4 05 F1 | 	add	objptr, ##1024
09fa0     F2 1E 02 FB | 	rdlong	local01, objptr
09fa4     01 1E 06 F1 | 	add	local01, #1
09fa8     F2 1E 62 FC | 	wrlong	local01, objptr
09fac                 | '   block(blockptr)=d
09fac                 | '   blockptr+=1
09fac                 | '   if blockptr>=255 then
09fac     79 00 00 FF 
09fb0     80 E4 85 F1 | 	sub	objptr, ##62080
09fb4     FF 1E 16 F2 | 	cmp	local01, #255 wc
09fb8     E4 00 90 CD |  if_b	jmp	#LR__0814
09fbc     77 00 00 FF 
09fc0     80 E4 05 F1 | 	add	objptr, ##61056
09fc4     F2 12 02 F6 | 	mov	arg01, objptr
09fc8     77 00 00 FF 
09fcc     80 E4 85 F1 | 	sub	objptr, ##61056
09fd0     B0 FB BF FD | 	call	#_csave_block
09fd4     79 00 00 FF 
09fd8     80 E4 05 F1 | 	add	objptr, ##62080
09fdc     F2 00 68 FC | 	wrlong	#0, objptr
09fe0     79 00 00 FF 
09fe4     80 E4 85 F1 | 	sub	objptr, ##62080
09fe8     2C 13 06 F6 | 	mov	arg01, #300
09fec     E8 F0 B0 FD | 	call	#__system___waitms
09ff0     AC 00 90 FD | 	jmp	#LR__0814
09ff4                 | LR__0810
09ff4     79 00 00 FF 
09ff8     80 E4 05 F1 | 	add	objptr, ##62080
09ffc     F2 20 02 FB | 	rdlong	local02, objptr
0a000     02 00 00 FF 
0a004     00 E4 85 F1 | 	sub	objptr, ##1024
0a008     F2 20 02 F1 | 	add	local02, objptr
0a00c     10 1F 42 FC | 	wrbyte	local01, local02
0a010                 | '   block(blockptr)=d
0a010                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a010     02 00 00 FF 
0a014     00 E4 05 F1 | 	add	objptr, ##1024
0a018     F2 22 02 FB | 	rdlong	local03, objptr
0a01c     79 00 00 FF 
0a020     80 E4 85 F1 | 	sub	objptr, ##62080
0a024     FF 22 16 F2 | 	cmp	local03, #255 wc
0a028     40 00 90 3D |  if_ae	jmp	#LR__0813
0a02c     79 00 00 FF 
0a030     80 E4 05 F1 | 	add	objptr, ##62080
0a034     F2 24 02 FB | 	rdlong	local04, objptr
0a038     79 00 00 FF 
0a03c     80 E4 85 F1 | 	sub	objptr, ##62080
0a040                 | LR__0811
0a040     00 25 56 F2 | 	cmps	local04, #256 wc
0a044     24 00 90 3D |  if_ae	jmp	#LR__0812
0a048     12 21 02 F6 | 	mov	local02, local04
0a04c     77 00 00 FF 
0a050     80 E4 05 F1 | 	add	objptr, ##61056
0a054     F2 20 02 F1 | 	add	local02, objptr
0a058     10 01 48 FC | 	wrbyte	#0, local02
0a05c     01 24 06 F1 | 	add	local04, #1
0a060     77 00 00 FF 
0a064     80 E4 85 F1 | 	sub	objptr, ##61056
0a068     D4 FF 9F FD | 	jmp	#LR__0811
0a06c                 | LR__0812
0a06c                 | LR__0813
0a06c     77 00 00 FF 
0a070     80 E4 05 F1 | 	add	objptr, ##61056
0a074     F2 12 02 F6 | 	mov	arg01, objptr
0a078     77 00 00 FF 
0a07c     80 E4 85 F1 | 	sub	objptr, ##61056
0a080     00 FB BF FD | 	call	#_csave_block
0a084     79 00 00 FF 
0a088     80 E4 05 F1 | 	add	objptr, ##62080
0a08c     F2 00 68 FC | 	wrlong	#0, objptr
0a090     79 00 00 FF 
0a094     80 E4 85 F1 | 	sub	objptr, ##62080
0a098     2C 13 06 F6 | 	mov	arg01, #300
0a09c     38 F0 B0 FD | 	call	#__system___waitms
0a0a0                 | LR__0814
0a0a0     A7 F0 03 F6 | 	mov	ptra, fp
0a0a4     B2 00 A0 FD | 	call	#popregs_
0a0a8                 | _csave_addtoblock_ret
0a0a8     2D 00 64 FD | 	ret
0a0ac                 | 
0a0ac                 | ' 
0a0ac                 | ' sub test_csave
0a0ac                 | _test_csave
0a0ac     04 4A 05 F6 | 	mov	COUNT_, #4
0a0b0     A8 00 A0 FD | 	call	#pushregs_
0a0b4     C0 F0 07 F1 | 	add	ptra, #192
0a0b8                 | ' 'dim fileheader,savestart, saveptr as ulong
0a0b8                 | ' 
0a0b8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a0b8     69 00 00 FF 
0a0bc     58 E5 05 F1 | 	add	objptr, ##54104
0a0c0     F2 12 02 FB | 	rdlong	arg01, objptr
0a0c4     69 00 00 FF 
0a0c8     58 E5 85 F1 | 	sub	objptr, ##54104
0a0cc     4C B9 B0 FD | 	call	#_pslpeek
0a0d0     FF FF 7F FF 
0a0d4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a0d8     0C 00 90 5D |  if_ne	jmp	#LR__0820
0a0dc     1B 12 06 F6 | 	mov	arg01, #27
0a0e0     7C B7 B0 FD | 	call	#_printerror
0a0e4     0C 03 90 FD | 	jmp	#LR__0832
0a0e8                 | LR__0820
0a0e8     04 F8 BF FD | 	call	#_pop
0a0ec     FF 1E 02 F6 | 	mov	local01, result3
0a0f0     90 4E 05 F1 | 	add	fp, #144
0a0f4     A7 FA 61 FC | 	wrlong	result1, fp
0a0f8     04 4E 05 F1 | 	add	fp, #4
0a0fc     A7 FC 61 FC | 	wrlong	result2, fp
0a100     04 4E 05 F1 | 	add	fp, #4
0a104     A7 1E 62 FC | 	wrlong	local01, fp
0a108                 | ' t1=pop()
0a108                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a108     98 4E 85 F1 | 	sub	fp, #152
0a10c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a110     43 01 00 5F 
0a114     E5 1F 06 56 |  if_ne	mov	local01, ##@LR__4557
0a118     8C 4E 05 51 |  if_ne	add	fp, #140
0a11c     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a120     8C 4E 85 51 |  if_ne	sub	fp, #140
0a124     90 4E 05 A1 |  if_e	add	fp, #144
0a128     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a12c     04 4E 85 A1 |  if_e	sub	fp, #4
0a130     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a134     8C 4E 85 A1 |  if_e	sub	fp, #140
0a138                 | ' 
0a138                 | ' ' prepare 1 kHz header wave
0a138                 | ' 
0a138                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a138     A7 00 68 FC | 	wrlong	#0, fp
0a13c     97 34 48 FB | 	callpa	#(@LR__0824-@LR__0821)>>2,fcache_load_ptr_
0a140                 | LR__0821
0a140     A7 1E 02 FB | 	rdlong	local01, fp
0a144     0F 1F 52 F6 | 	abs	local01, local01 wc
0a148     07 1E 06 F5 | 	and	local01, #7
0a14c     0F 1F 82 F6 | 	negc	local01, local01
0a150     04 1E 56 F2 | 	cmps	local01, #4 wc
0a154     20 00 90 3D |  if_ae	jmp	#LR__0822
0a158     A7 1E 02 FB | 	rdlong	local01, fp
0a15c     76 00 00 FF 
0a160     80 E5 05 F1 | 	add	objptr, ##60800
0a164     F2 1E 02 F1 | 	add	local01, objptr
0a168     0F FF 48 FC | 	wrbyte	#127, local01
0a16c     76 00 00 FF 
0a170     80 E5 85 F1 | 	sub	objptr, ##60800
0a174     1C 00 90 FD | 	jmp	#LR__0823
0a178                 | LR__0822
0a178     A7 1E 02 FB | 	rdlong	local01, fp
0a17c     76 00 00 FF 
0a180     80 E5 05 F1 | 	add	objptr, ##60800
0a184     F2 1E 02 F1 | 	add	local01, objptr
0a188     0F 01 49 FC | 	wrbyte	#128, local01
0a18c     76 00 00 FF 
0a190     80 E5 85 F1 | 	sub	objptr, ##60800
0a194                 | LR__0823
0a194     A7 1E 02 FB | 	rdlong	local01, fp
0a198     01 1E 06 F1 | 	add	local01, #1
0a19c     A7 1E 62 FC | 	wrlong	local01, fp
0a1a0     00 1F 56 F2 | 	cmps	local01, #256 wc
0a1a4     98 FF 9F CD |  if_b	jmp	#LR__0821
0a1a8                 | LR__0824
0a1a8     76 00 00 FF 
0a1ac     80 E5 05 F1 | 	add	objptr, ##60800
0a1b0     F2 14 02 F6 | 	mov	arg02, objptr
0a1b4     07 12 06 F6 | 	mov	arg01, #7
0a1b8     0F 00 00 FF 
0a1bc     40 17 06 F6 | 	mov	arg03, ##8000
0a1c0     0E 18 C6 F9 | 	decod	arg04, #14
0a1c4     00 1B 06 F6 | 	mov	arg05, #256
0a1c8     00 1C 06 F6 | 	mov	arg06, #0
0a1cc     6B 00 00 FF 
0a1d0     C0 E4 85 F1 | 	sub	objptr, ##54976
0a1d4     70 E8 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0a1d8     0B 00 00 FF 
0a1dc     C0 E4 85 F1 | 	sub	objptr, ##5824
0a1e0     05 00 00 FF 
0a1e4     B8 13 06 F6 | 	mov	arg01, ##3000
0a1e8     EC EE B0 FD | 	call	#__system___waitms
0a1ec     79 00 00 FF 
0a1f0     80 E4 05 F1 | 	add	objptr, ##62080
0a1f4     F2 00 68 FC | 	wrlong	#0, objptr
0a1f8     79 00 00 FF 
0a1fc     80 E4 85 F1 | 	sub	objptr, ##62080
0a200     72 12 06 F6 | 	mov	arg01, #114
0a204     00 14 06 F6 | 	mov	arg02, #0
0a208     5C FD BF FD | 	call	#_csave_addtoblock
0a20c     62 12 06 F6 | 	mov	arg01, #98
0a210     00 14 06 F6 | 	mov	arg02, #0
0a214     50 FD BF FD | 	call	#_csave_addtoblock
0a218     61 12 06 F6 | 	mov	arg01, #97
0a21c     00 14 06 F6 | 	mov	arg02, #0
0a220     44 FD BF FD | 	call	#_csave_addtoblock
0a224     0D 12 06 F6 | 	mov	arg01, #13
0a228     00 14 06 F6 | 	mov	arg02, #0
0a22c     38 FD BF FD | 	call	#_csave_addtoblock
0a230                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a230                 | ' waitms 3000 
0a230                 | ' 
0a230                 | ' blockptr=0
0a230                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a230                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a230     A7 02 68 FC | 	wrlong	#1, fp
0a234     8C 4E 05 F1 | 	add	fp, #140
0a238     A7 12 02 FB | 	rdlong	arg01, fp
0a23c     8C 4E 85 F1 | 	sub	fp, #140
0a240     09 21 02 F6 | 	mov	local02, arg01
0a244     97 06 48 FB | 	callpa	#(@LR__0826-@LR__0825)>>2,fcache_load_ptr_
0a248                 | LR__0825
0a248     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a24c     01 20 06 51 |  if_ne	add	local02, #1
0a250     F4 FF 9F 5D |  if_ne	jmp	#LR__0825
0a254                 | LR__0826
0a254     09 21 82 F1 | 	sub	local02, arg01
0a258     10 23 02 F6 | 	mov	local03, local02
0a25c     01 22 06 F1 | 	add	local03, #1
0a260                 | LR__0827
0a260     A7 1E 02 FB | 	rdlong	local01, fp
0a264     11 1F 52 F2 | 	cmps	local01, local03 wc
0a268     34 00 90 3D |  if_ae	jmp	#LR__0828
0a26c     8C 4E 05 F1 | 	add	fp, #140
0a270     A7 12 02 FB | 	rdlong	arg01, fp
0a274     8C 4E 85 F1 | 	sub	fp, #140
0a278     A7 14 02 FB | 	rdlong	arg02, fp
0a27c     01 16 06 F6 | 	mov	arg03, #1
0a280     88 0C B1 FD | 	call	#__system__Mid_S
0a284     FD 12 C2 FA | 	rdbyte	arg01, result1
0a288     00 14 06 F6 | 	mov	arg02, #0
0a28c     D8 FC BF FD | 	call	#_csave_addtoblock
0a290     A7 1E 02 FB | 	rdlong	local01, fp
0a294     01 1E 06 F1 | 	add	local01, #1
0a298     A7 1E 62 FC | 	wrlong	local01, fp
0a29c     C0 FF 9F FD | 	jmp	#LR__0827
0a2a0                 | LR__0828
0a2a0     00 12 06 F6 | 	mov	arg01, #0
0a2a4     00 14 06 F6 | 	mov	arg02, #0
0a2a8     BC FC BF FD | 	call	#_csave_addtoblock
0a2ac     72 12 06 F6 | 	mov	arg01, #114
0a2b0     00 14 06 F6 | 	mov	arg02, #0
0a2b4     B0 FC BF FD | 	call	#_csave_addtoblock
0a2b8     62 12 06 F6 | 	mov	arg01, #98
0a2bc     00 14 06 F6 | 	mov	arg02, #0
0a2c0     A4 FC BF FD | 	call	#_csave_addtoblock
0a2c4     73 12 06 F6 | 	mov	arg01, #115
0a2c8     00 14 06 F6 | 	mov	arg02, #0
0a2cc     98 FC BF FD | 	call	#_csave_addtoblock
0a2d0     0D 12 06 F6 | 	mov	arg01, #13
0a2d4     00 14 06 F6 | 	mov	arg02, #0
0a2d8     8C FC BF FD | 	call	#_csave_addtoblock
0a2dc     69 00 00 FF 
0a2e0     58 E5 05 F1 | 	add	objptr, ##54104
0a2e4     F2 1E 02 FB | 	rdlong	local01, objptr
0a2e8     69 00 00 FF 
0a2ec     58 E5 85 F1 | 	sub	objptr, ##54104
0a2f0     9C 4E 05 F1 | 	add	fp, #156
0a2f4     A7 1E 62 FC | 	wrlong	local01, fp
0a2f8     9C 4E 85 F1 | 	sub	fp, #156
0a2fc                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a2fc                 | ' 
0a2fc                 | ' saveptr=programstart
0a2fc                 | ' do
0a2fc                 | LR__0829
0a2fc     A0 4E 05 F1 | 	add	fp, #160
0a300     A7 12 02 F6 | 	mov	arg01, fp
0a304     04 4E 85 F1 | 	sub	fp, #4
0a308     A7 14 02 FB | 	rdlong	arg02, fp
0a30c     9C 4E 85 F1 | 	sub	fp, #156
0a310     18 16 06 F6 | 	mov	arg03, #24
0a314     0B 00 00 FF 
0a318     C0 E4 05 F1 | 	add	objptr, ##5824
0a31c     74 DF B0 FD | 	call	#_psram_spin2_read1
0a320     0C 4E 05 F1 | 	add	fp, #12
0a324     A7 12 02 F6 | 	mov	arg01, fp
0a328     9C 4E 05 F1 | 	add	fp, #156
0a32c     A7 14 02 FB | 	rdlong	arg02, fp
0a330     04 4E 05 F1 | 	add	fp, #4
0a334     A7 16 02 FB | 	rdlong	arg03, fp
0a338     AC 4E 85 F1 | 	sub	fp, #172
0a33c     54 DF B0 FD | 	call	#_psram_spin2_read1
0a340     0B 00 00 FF 
0a344     C0 E4 85 F1 | 	sub	objptr, ##5824
0a348     AC 4E 05 F1 | 	add	fp, #172
0a34c     A7 12 02 FB | 	rdlong	arg01, fp
0a350     AC 4E 85 F1 | 	sub	fp, #172
0a354     00 14 06 F6 | 	mov	arg02, #0
0a358     0C FC BF FD | 	call	#_csave_addtoblock
0a35c                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a35c                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a35c                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a35c                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a35c     A7 00 68 FC | 	wrlong	#0, fp
0a360     AC 4E 05 F1 | 	add	fp, #172
0a364     A7 24 02 FB | 	rdlong	local04, fp
0a368     AC 4E 85 F1 | 	sub	fp, #172
0a36c                 | LR__0830
0a36c     A7 1E 02 FB | 	rdlong	local01, fp
0a370     12 1F 52 F2 | 	cmps	local01, local04 wc
0a374     2C 00 90 3D |  if_ae	jmp	#LR__0831
0a378     A7 22 02 FB | 	rdlong	local03, fp
0a37c     0C 4E 05 F1 | 	add	fp, #12
0a380     A7 22 02 F1 | 	add	local03, fp
0a384     11 13 C2 FA | 	rdbyte	arg01, local03
0a388     00 14 06 F6 | 	mov	arg02, #0
0a38c     0C 4E 85 F1 | 	sub	fp, #12
0a390     D4 FB BF FD | 	call	#_csave_addtoblock
0a394     A7 22 02 FB | 	rdlong	local03, fp
0a398     01 22 06 F1 | 	add	local03, #1
0a39c     A7 22 62 FC | 	wrlong	local03, fp
0a3a0     C8 FF 9F FD | 	jmp	#LR__0830
0a3a4                 | LR__0831
0a3a4     B4 4E 05 F1 | 	add	fp, #180
0a3a8     A7 1E 02 FB | 	rdlong	local01, fp
0a3ac     18 4E 85 F1 | 	sub	fp, #24
0a3b0     A7 1E 62 FC | 	wrlong	local01, fp
0a3b4     18 4E 05 F1 | 	add	fp, #24
0a3b8     A7 1E 02 FB | 	rdlong	local01, fp
0a3bc     B4 4E 85 F1 | 	sub	fp, #180
0a3c0     FF FF 3F FF 
0a3c4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a3c8     30 FF 9F 5D |  if_ne	jmp	#LR__0829
0a3cc     00 12 06 F6 | 	mov	arg01, #0
0a3d0     01 14 06 F6 | 	mov	arg02, #1
0a3d4     90 FB BF FD | 	call	#_csave_addtoblock
0a3d8     56 00 00 FF 
0a3dc     E4 E4 05 F1 | 	add	objptr, ##44260
0a3e0     F2 12 02 FB | 	rdlong	arg01, objptr
0a3e4     56 00 00 FF 
0a3e8     E4 E4 85 F1 | 	sub	objptr, ##44260
0a3ec     F4 12 06 F1 | 	add	arg01, #244
0a3f0     09 01 58 FC | 	wrword	#0, arg01
0a3f4                 | LR__0832
0a3f4     A7 F0 03 F6 | 	mov	ptra, fp
0a3f8     B2 00 A0 FD | 	call	#popregs_
0a3fc                 | _test_csave_ret
0a3fc     2D 00 64 FD | 	ret
0a400                 | 
0a400                 | ' 
0a400                 | ' ' ----------------- Save the program
0a400                 | ' 
0a400                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a400                 | _do_save
0a400     02 4A 05 F6 | 	mov	COUNT_, #2
0a404     A8 00 A0 FD | 	call	#pushregs_
0a408     01 00 00 FF 
0a40c     BC F0 07 F1 | 	add	ptra, ##700
0a410     01 00 00 FF 
0a414     10 4E 05 F1 | 	add	fp, ##528
0a418     B1 B0 86 FF 
0a41c     A7 E4 68 FC | 	wrlong	##224486002, fp
0a420     01 00 00 FF 
0a424     10 4E 85 F1 | 	sub	fp, ##528
0a428     C4 F4 BF FD | 	call	#_pop
0a42c     FF 16 02 F6 | 	mov	arg03, result3
0a430     A7 FA 61 FC | 	wrlong	result1, fp
0a434     04 4E 05 F1 | 	add	fp, #4
0a438     A7 FC 61 FC | 	wrlong	result2, fp
0a43c     04 4E 05 F1 | 	add	fp, #4
0a440     A7 16 62 FC | 	wrlong	arg03, fp
0a444     08 4E 85 F1 | 	sub	fp, #8
0a448                 | ' 
0a448                 | ' fileheader=$0D616272' rba+ver'
0a448                 | ' 
0a448                 | ' t1=pop() 
0a448                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a448     69 00 00 FF 
0a44c     58 E5 05 F1 | 	add	objptr, ##54104
0a450     F2 12 02 FB | 	rdlong	arg01, objptr
0a454     69 00 00 FF 
0a458     58 E5 85 F1 | 	sub	objptr, ##54104
0a45c     BC B5 B0 FD | 	call	#_pslpeek
0a460     FF FF 7F FF 
0a464     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a468     0C 00 90 5D |  if_ne	jmp	#LR__0840
0a46c     1B 12 06 F6 | 	mov	arg01, #27
0a470     EC B3 B0 FD | 	call	#_printerror
0a474     68 02 90 FD | 	jmp	#LR__0846
0a478                 | LR__0840
0a478                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a478     08 4E 05 F1 | 	add	fp, #8
0a47c     A7 16 02 FB | 	rdlong	arg03, fp
0a480     08 4E 85 F1 | 	sub	fp, #8
0a484     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a488     18 00 90 5D |  if_ne	jmp	#LR__0841
0a48c     A7 12 02 FB | 	rdlong	arg01, fp
0a490     98 25 B0 FD | 	call	#_convertstring
0a494     A7 FA 61 FC | 	wrlong	result1, fp
0a498     08 4E 05 F1 | 	add	fp, #8
0a49c     A7 3E 68 FC | 	wrlong	#31, fp
0a4a0     08 4E 85 F1 | 	sub	fp, #8
0a4a4                 | LR__0841
0a4a4                 | ' if t1.result_type=result_string then
0a4a4     08 4E 05 F1 | 	add	fp, #8
0a4a8     A7 1E 02 FB | 	rdlong	local01, fp
0a4ac     08 4E 85 F1 | 	sub	fp, #8
0a4b0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a4b4     28 02 90 5D |  if_ne	jmp	#LR__0845
0a4b8                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a4b8     A7 12 02 FB | 	rdlong	arg01, fp
0a4bc     43 01 00 FF 
0a4c0     F0 15 06 F6 | 	mov	arg02, ##@LR__4558
0a4c4     44 E9 B0 FD | 	call	#__system___string_cmp
0a4c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4cc     43 01 00 AF 
0a4d0     F1 1F 06 A6 |  if_e	mov	local01, ##@LR__4559
0a4d4     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a4d8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a4d8     09 12 06 F6 | 	mov	arg01, #9
0a4dc     38 38 B1 FD | 	call	#__system__close
0a4e0     09 1E 06 F6 | 	mov	local01, #9
0a4e4     71 00 00 FF 
0a4e8     68 E5 05 F1 | 	add	objptr, ##58216
0a4ec     F2 12 02 FB | 	rdlong	arg01, objptr
0a4f0     71 00 00 FF 
0a4f4     68 E5 85 F1 | 	sub	objptr, ##58216
0a4f8     43 01 00 FF 
0a4fc     FC 15 06 F6 | 	mov	arg02, ##@LR__4560
0a500     3C E9 B0 FD | 	call	#__system___string_concat
0a504     FD 12 02 F6 | 	mov	arg01, result1
0a508     A7 14 02 FB | 	rdlong	arg02, fp
0a50c     30 E9 B0 FD | 	call	#__system___string_concat
0a510     FD 14 02 F6 | 	mov	arg02, result1
0a514     0F 13 02 F6 | 	mov	arg01, local01
0a518     0D 16 06 F6 | 	mov	arg03, #13
0a51c     C8 F4 B0 FD | 	call	#__system___basic_open_string
0a520     01 00 00 FF 
0a524     0C 4E 05 F1 | 	add	fp, ##524
0a528     A7 0A 68 FC | 	wrlong	#5, fp
0a52c     69 00 00 FF 
0a530     58 E5 05 F1 | 	add	objptr, ##54104
0a534     F2 1E 02 FB | 	rdlong	local01, objptr
0a538     69 00 00 FF 
0a53c     58 E5 85 F1 | 	sub	objptr, ##54104
0a540     0C 4E 05 F1 | 	add	fp, #12
0a544     A7 1E 62 FC | 	wrlong	local01, fp
0a548     01 00 00 FF 
0a54c     18 4E 85 F1 | 	sub	fp, ##536
0a550                 | ' '  put #9,1,fileheader,1
0a550                 | '   i=5
0a550                 | '   saveptr=programstart
0a550                 | '   do
0a550                 | LR__0842
0a550     01 00 00 FF 
0a554     1C 4E 05 F1 | 	add	fp, ##540
0a558     A7 12 02 F6 | 	mov	arg01, fp
0a55c     04 4E 85 F1 | 	sub	fp, #4
0a560     A7 14 02 FB | 	rdlong	arg02, fp
0a564     01 00 00 FF 
0a568     18 4E 85 F1 | 	sub	fp, ##536
0a56c     18 16 06 F6 | 	mov	arg03, #24
0a570     0B 00 00 FF 
0a574     C0 E4 05 F1 | 	add	objptr, ##5824
0a578     18 DD B0 FD | 	call	#_psram_spin2_read1
0a57c     01 00 00 FF 
0a580     34 4E 05 F1 | 	add	fp, ##564
0a584     A7 12 02 F6 | 	mov	arg01, fp
0a588     10 4E 85 F1 | 	sub	fp, #16
0a58c     A7 14 02 FB | 	rdlong	arg02, fp
0a590     04 4E 05 F1 | 	add	fp, #4
0a594     A7 16 02 FB | 	rdlong	arg03, fp
0a598     01 00 00 FF 
0a59c     28 4E 85 F1 | 	sub	fp, ##552
0a5a0     F0 DC B0 FD | 	call	#_psram_spin2_read1
0a5a4     0B 00 00 FF 
0a5a8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a5ac     43 01 00 FF 
0a5b0     FE 1F 06 F6 | 	mov	local01, ##@LR__4561
0a5b4     01 00 00 FF 
0a5b8     B4 4E 05 F1 | 	add	fp, ##692
0a5bc     A7 1E 62 FC | 	wrlong	local01, fp
0a5c0                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a5c0                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a5c0                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a5c0     A8 4E 85 F1 | 	sub	fp, #168
0a5c4     A7 02 68 FC | 	wrlong	#1, fp
0a5c8     1C 4E 05 F1 | 	add	fp, #28
0a5cc     A7 20 02 FB | 	rdlong	local02, fp
0a5d0     01 00 00 FF 
0a5d4     28 4E 85 F1 | 	sub	fp, ##552
0a5d8     01 20 06 F1 | 	add	local02, #1
0a5dc                 | LR__0843
0a5dc     01 00 00 FF 
0a5e0     0C 4E 05 F1 | 	add	fp, ##524
0a5e4     A7 1E 02 FB | 	rdlong	local01, fp
0a5e8     01 00 00 FF 
0a5ec     0C 4E 85 F1 | 	sub	fp, ##524
0a5f0     10 1F 52 F2 | 	cmps	local01, local02 wc
0a5f4     64 00 90 3D |  if_ae	jmp	#LR__0844
0a5f8     01 00 00 FF 
0a5fc     B4 4E 05 F1 | 	add	fp, ##692
0a600     A7 1E 02 FB | 	rdlong	local01, fp
0a604     A8 4E 85 F1 | 	sub	fp, #168
0a608     A7 16 02 FB | 	rdlong	arg03, fp
0a60c     01 16 86 F1 | 	sub	arg03, #1
0a610     28 4E 05 F1 | 	add	fp, #40
0a614     A7 16 02 F1 | 	add	arg03, fp
0a618     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a61c     01 00 00 FF 
0a620     34 4E 85 F1 | 	sub	fp, ##564
0a624     90 09 B1 FD | 	call	#__system__Chr_S
0a628     FD 14 02 F6 | 	mov	arg02, result1
0a62c     0F 13 02 F6 | 	mov	arg01, local01
0a630     0C E8 B0 FD | 	call	#__system___string_concat
0a634     01 00 00 FF 
0a638     B4 4E 05 F1 | 	add	fp, ##692
0a63c     A7 FA 61 FC | 	wrlong	result1, fp
0a640     A8 4E 85 F1 | 	sub	fp, #168
0a644     A7 1E 02 FB | 	rdlong	local01, fp
0a648     01 1E 06 F1 | 	add	local01, #1
0a64c     A7 1E 62 FC | 	wrlong	local01, fp
0a650     01 00 00 FF 
0a654     0C 4E 85 F1 | 	sub	fp, ##524
0a658     80 FF 9F FD | 	jmp	#LR__0843
0a65c                 | LR__0844
0a65c                 | '  '   put #9,i,header(3),1 : i+=4
0a65c                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a65c                 | '      print #9, saveline$
0a65c     09 12 06 F6 | 	mov	arg01, #9
0a660     84 40 B1 FD | 	call	#__system___getiolock_0423
0a664     FD 12 02 F6 | 	mov	arg01, result1
0a668     78 E7 B0 FD | 	call	#__system___lockmem
0a66c     01 00 00 FF 
0a670     B4 4E 05 F1 | 	add	fp, ##692
0a674     A7 14 02 FB | 	rdlong	arg02, fp
0a678     01 00 00 FF 
0a67c     B4 4E 85 F1 | 	sub	fp, ##692
0a680     09 12 06 F6 | 	mov	arg01, #9
0a684     00 16 06 F6 | 	mov	arg03, #0
0a688     4C F4 B0 FD | 	call	#__system___basic_print_string
0a68c     09 12 06 F6 | 	mov	arg01, #9
0a690     0A 14 06 F6 | 	mov	arg02, #10
0a694     00 16 06 F6 | 	mov	arg03, #0
0a698     E4 F3 B0 FD | 	call	#__system___basic_print_char
0a69c     09 12 06 F6 | 	mov	arg01, #9
0a6a0     44 40 B1 FD | 	call	#__system___getiolock_0423
0a6a4     FD 00 68 FC | 	wrlong	#0, result1
0a6a8     01 00 00 FF 
0a6ac     30 4E 05 F1 | 	add	fp, ##560
0a6b0     A7 1E 02 FB | 	rdlong	local01, fp
0a6b4     18 4E 85 F1 | 	sub	fp, #24
0a6b8     A7 1E 62 FC | 	wrlong	local01, fp
0a6bc     18 4E 05 F1 | 	add	fp, #24
0a6c0     A7 1E 02 FB | 	rdlong	local01, fp
0a6c4     01 00 00 FF 
0a6c8     30 4E 85 F1 | 	sub	fp, ##560
0a6cc     FF FF 3F FF 
0a6d0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a6d4     78 FE 9F 5D |  if_ne	jmp	#LR__0842
0a6d8                 | '   close #9  
0a6d8     09 12 06 F6 | 	mov	arg01, #9
0a6dc     38 36 B1 FD | 	call	#__system__close
0a6e0                 | LR__0845
0a6e0                 | LR__0846
0a6e0     A7 F0 03 F6 | 	mov	ptra, fp
0a6e4     B2 00 A0 FD | 	call	#popregs_
0a6e8                 | _do_save_ret
0a6e8     2D 00 64 FD | 	ret
0a6ec                 | 
0a6ec                 | ' 
0a6ec                 | ' '----------------- Load the program
0a6ec                 | ' 'lo todo: errors while loading
0a6ec                 | ' sub do_load
0a6ec                 | _do_load
0a6ec     01 4A 05 F6 | 	mov	COUNT_, #1
0a6f0     A8 00 A0 FD | 	call	#pushregs_
0a6f4     A4 F0 07 F1 | 	add	ptra, #164
0a6f8     A0 4E 05 F1 | 	add	fp, #160
0a6fc     A7 12 02 F6 | 	mov	arg01, fp
0a700     80 4E 85 F1 | 	sub	fp, #128
0a704     A7 14 02 F6 | 	mov	arg02, fp
0a708     20 4E 85 F1 | 	sub	fp, #32
0a70c     09 15 62 FC | 	wrlong	arg02, arg01
0a710     DC F1 BF FD | 	call	#_pop
0a714     FF 1A 02 F6 | 	mov	arg05, result3
0a718     A7 FA 61 FC | 	wrlong	result1, fp
0a71c     04 4E 05 F1 | 	add	fp, #4
0a720     A7 FC 61 FC | 	wrlong	result2, fp
0a724     04 4E 05 F1 | 	add	fp, #4
0a728     A7 1A 62 FC | 	wrlong	arg05, fp
0a72c                 | ' 
0a72c                 | ' lpoke varptr(line2$),varptr(line2)
0a72c                 | ' t1=pop() 
0a72c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a72c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a72c     08 4E 85 F1 | 	sub	fp, #8
0a730     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a734     18 00 90 5D |  if_ne	jmp	#LR__0850
0a738     A7 12 02 FB | 	rdlong	arg01, fp
0a73c     EC 22 B0 FD | 	call	#_convertstring
0a740     A7 FA 61 FC | 	wrlong	result1, fp
0a744     08 4E 05 F1 | 	add	fp, #8
0a748     A7 3E 68 FC | 	wrlong	#31, fp
0a74c     08 4E 85 F1 | 	sub	fp, #8
0a750                 | LR__0850
0a750                 | ' if t1.result_type=result_string then
0a750     08 4E 05 F1 | 	add	fp, #8
0a754     A7 1E 02 FB | 	rdlong	local01, fp
0a758     08 4E 85 F1 | 	sub	fp, #8
0a75c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a760     40 03 90 5D |  if_ne	jmp	#LR__0857
0a764     2C 1D B0 FD | 	call	#_do_new
0a768                 | '   do_new
0a768                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a768     A7 12 02 FB | 	rdlong	arg01, fp
0a76c     43 01 00 FF 
0a770     FF 15 06 F6 | 	mov	arg02, ##@LR__4562
0a774     94 E6 B0 FD | 	call	#__system___string_cmp
0a778     00 FA 0D F2 | 	cmp	result1, #0 wz
0a77c     44 01 00 AF 
0a780     00 1E 06 A6 |  if_e	mov	local01, ##@LR__4563
0a784     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a788                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a788     09 12 06 F6 | 	mov	arg01, #9
0a78c     88 35 B1 FD | 	call	#__system__close
0a790     09 1E 06 F6 | 	mov	local01, #9
0a794     71 00 00 FF 
0a798     68 E5 05 F1 | 	add	objptr, ##58216
0a79c     F2 12 02 FB | 	rdlong	arg01, objptr
0a7a0     71 00 00 FF 
0a7a4     68 E5 85 F1 | 	sub	objptr, ##58216
0a7a8     44 01 00 FF 
0a7ac     0B 14 06 F6 | 	mov	arg02, ##@LR__4564
0a7b0     8C E6 B0 FD | 	call	#__system___string_concat
0a7b4     FD 12 02 F6 | 	mov	arg01, result1
0a7b8     A7 14 02 FB | 	rdlong	arg02, fp
0a7bc     80 E6 B0 FD | 	call	#__system___string_concat
0a7c0     FD 14 02 F6 | 	mov	arg02, result1
0a7c4     0F 13 02 F6 | 	mov	arg01, local01
0a7c8     00 16 06 F6 | 	mov	arg03, #0
0a7cc     18 F2 B0 FD | 	call	#__system___basic_open_string
0a7d0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a7d4     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a7d8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a7dc     10 4E 05 F1 | 	add	fp, #16
0a7e0     A7 FA 61 FC | 	wrlong	result1, fp
0a7e4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a7e4     10 4E 85 F1 | 	sub	fp, #16
0a7e8     9C 00 90 AD |  if_e	jmp	#LR__0851
0a7ec     00 12 06 F6 | 	mov	arg01, #0
0a7f0     F4 3E B1 FD | 	call	#__system___getiolock_0423
0a7f4     FD 12 02 F6 | 	mov	arg01, result1
0a7f8     E8 E5 B0 FD | 	call	#__system___lockmem
0a7fc     44 01 00 FF 
0a800     0D 14 06 F6 | 	mov	arg02, ##@LR__4565
0a804     00 12 06 F6 | 	mov	arg01, #0
0a808     00 16 06 F6 | 	mov	arg03, #0
0a80c     C8 F2 B0 FD | 	call	#__system___basic_print_string
0a810     10 4E 05 F1 | 	add	fp, #16
0a814     A7 14 02 FB | 	rdlong	arg02, fp
0a818     10 4E 85 F1 | 	sub	fp, #16
0a81c     00 12 06 F6 | 	mov	arg01, #0
0a820     00 16 06 F6 | 	mov	arg03, #0
0a824     0A 18 06 F6 | 	mov	arg04, #10
0a828     F0 F2 B0 FD | 	call	#__system___basic_print_integer
0a82c     44 01 00 FF 
0a830     1B 14 06 F6 | 	mov	arg02, ##@LR__4566
0a834     00 12 06 F6 | 	mov	arg01, #0
0a838     00 16 06 F6 | 	mov	arg03, #0
0a83c     98 F2 B0 FD | 	call	#__system___basic_print_string
0a840     10 4E 05 F1 | 	add	fp, #16
0a844     A7 12 02 FB | 	rdlong	arg01, fp
0a848     10 4E 85 F1 | 	sub	fp, #16
0a84c     94 0B B1 FD | 	call	#__system___strerror
0a850     FD 14 02 F6 | 	mov	arg02, result1
0a854     00 12 06 F6 | 	mov	arg01, #0
0a858     00 16 06 F6 | 	mov	arg03, #0
0a85c     78 F2 B0 FD | 	call	#__system___basic_print_string
0a860     00 12 06 F6 | 	mov	arg01, #0
0a864     0A 14 06 F6 | 	mov	arg02, #10
0a868     00 16 06 F6 | 	mov	arg03, #0
0a86c     10 F2 B0 FD | 	call	#__system___basic_print_char
0a870     00 12 06 F6 | 	mov	arg01, #0
0a874     70 3E B1 FD | 	call	#__system___getiolock_0423
0a878     FD 00 68 FC | 	wrlong	#0, result1
0a87c     09 12 06 F6 | 	mov	arg01, #9
0a880     94 34 B1 FD | 	call	#__system__close
0a884     24 02 90 FD | 	jmp	#LR__0859
0a888                 | LR__0851
0a888     0C 4E 05 F1 | 	add	fp, #12
0a88c     A7 0A 68 FC | 	wrlong	#5, fp
0a890                 | '   i=5
0a890                 | '   get #9,1,header,1
0a890     0C 4E 05 F1 | 	add	fp, #12
0a894     A7 16 02 F6 | 	mov	arg03, fp
0a898     18 4E 85 F1 | 	sub	fp, #24
0a89c     09 12 06 F6 | 	mov	arg01, #9
0a8a0     01 14 06 F6 | 	mov	arg02, #1
0a8a4     01 18 06 F6 | 	mov	arg04, #1
0a8a8     04 1A 06 F6 | 	mov	arg05, #4
0a8ac     38 F3 B0 FD | 	call	#__system___basic_get
0a8b0                 | '   
0a8b0                 | '   if header<>$0D616272 then 
0a8b0     18 4E 05 F1 | 	add	fp, #24
0a8b4     A7 1E 02 FB | 	rdlong	local01, fp
0a8b8     18 4E 85 F1 | 	sub	fp, #24
0a8bc     B1 B0 06 FF 
0a8c0     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a8c4     F0 00 90 AD |  if_e	jmp	#LR__0854
0a8c8                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a8c8     09 12 06 F6 | 	mov	arg01, #9
0a8cc     48 34 B1 FD | 	call	#__system__close
0a8d0     09 1E 06 F6 | 	mov	local01, #9
0a8d4     71 00 00 FF 
0a8d8     68 E5 05 F1 | 	add	objptr, ##58216
0a8dc     F2 12 02 FB | 	rdlong	arg01, objptr
0a8e0     71 00 00 FF 
0a8e4     68 E5 85 F1 | 	sub	objptr, ##58216
0a8e8     44 01 00 FF 
0a8ec     1E 14 06 F6 | 	mov	arg02, ##@LR__4567
0a8f0     4C E5 B0 FD | 	call	#__system___string_concat
0a8f4     FD 12 02 F6 | 	mov	arg01, result1
0a8f8     A7 14 02 FB | 	rdlong	arg02, fp
0a8fc     40 E5 B0 FD | 	call	#__system___string_concat
0a900     FD 14 02 F6 | 	mov	arg02, result1
0a904     0F 13 02 F6 | 	mov	arg01, local01
0a908     00 16 06 F6 | 	mov	arg03, #0
0a90c     D8 F0 B0 FD | 	call	#__system___basic_open_string
0a910                 | '     do
0a910                 | LR__0852
0a910     09 12 06 F6 | 	mov	arg01, #9
0a914     D8 E6 B0 FD | 	call	#__system___basic_read_line
0a918     56 00 00 FF 
0a91c     F0 E4 05 F1 | 	add	objptr, ##44272
0a920     F2 FA 61 FC | 	wrlong	result1, objptr
0a924                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a924     56 00 00 FF 
0a928     F0 E4 85 F1 | 	sub	objptr, ##44272
0a92c     FD 12 02 F6 | 	mov	arg01, result1
0a930     01 14 06 F6 | 	mov	arg02, #1
0a934     BC 04 B1 FD | 	call	#__system__Left_S
0a938     FD 12 02 F6 | 	mov	arg01, result1
0a93c     44 01 00 FF 
0a940     20 14 06 F6 | 	mov	arg02, ##@LR__4568
0a944     C4 E4 B0 FD | 	call	#__system___string_cmp
0a948     00 FA 55 F2 | 	cmps	result1, #0 wc
0a94c     34 00 90 CD |  if_b	jmp	#LR__0853
0a950     56 00 00 FF 
0a954     F0 E4 05 F1 | 	add	objptr, ##44272
0a958     F2 12 02 FB | 	rdlong	arg01, objptr
0a95c     56 00 00 FF 
0a960     F0 E4 85 F1 | 	sub	objptr, ##44272
0a964     01 14 06 F6 | 	mov	arg02, #1
0a968     88 04 B1 FD | 	call	#__system__Left_S
0a96c     FD 12 02 F6 | 	mov	arg01, result1
0a970     44 01 00 FF 
0a974     22 14 06 F6 | 	mov	arg02, ##@LR__4569
0a978     90 E4 B0 FD | 	call	#__system___string_cmp
0a97c     01 FA 55 F2 | 	cmps	result1, #1 wc
0a980     98 60 BF CD |  if_b	call	#_interpret
0a984                 | LR__0853
0a984     56 00 00 FF 
0a988     F0 E4 05 F1 | 	add	objptr, ##44272
0a98c     F2 12 02 FB | 	rdlong	arg01, objptr
0a990     56 00 00 FF 
0a994     F0 E4 85 F1 | 	sub	objptr, ##44272
0a998     44 01 00 FF 
0a99c     24 14 06 F6 | 	mov	arg02, ##@LR__4570
0a9a0     68 E4 B0 FD | 	call	#__system___string_cmp
0a9a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9a8     64 FF 9F 5D |  if_ne	jmp	#LR__0852
0a9ac                 | '     close #9
0a9ac     09 12 06 F6 | 	mov	arg01, #9
0a9b0     64 33 B1 FD | 	call	#__system__close
0a9b4     F4 00 90 FD | 	jmp	#LR__0858
0a9b8                 | LR__0854
0a9b8                 | '   'printerror(26) : close #9 : return
0a9b8                 | '     do
0a9b8                 | LR__0855
0a9b8                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0a9b8     0C 4E 05 F1 | 	add	fp, #12
0a9bc     A7 14 02 FB | 	rdlong	arg02, fp
0a9c0     10 4E 05 F1 | 	add	fp, #16
0a9c4     A7 16 02 F6 | 	mov	arg03, fp
0a9c8     1C 4E 85 F1 | 	sub	fp, #28
0a9cc     09 12 06 F6 | 	mov	arg01, #9
0a9d0     01 18 06 F6 | 	mov	arg04, #1
0a9d4     04 1A 06 F6 | 	mov	arg05, #4
0a9d8     0C F2 B0 FD | 	call	#__system___basic_get
0a9dc     14 4E 05 F1 | 	add	fp, #20
0a9e0     A7 FA 61 FC | 	wrlong	result1, fp
0a9e4     08 4E 85 F1 | 	sub	fp, #8
0a9e8     A7 1E 02 FB | 	rdlong	local01, fp
0a9ec     04 1E 06 F1 | 	add	local01, #4
0a9f0     A7 1E 62 FC | 	wrlong	local01, fp
0a9f4     10 4E 05 F1 | 	add	fp, #16
0a9f8     A7 1E 02 FB | 	rdlong	local01, fp
0a9fc     04 4E 05 F1 | 	add	fp, #4
0aa00     A7 1E 02 F1 | 	add	local01, fp
0aa04     0F 01 48 FC | 	wrbyte	#0, local01
0aa08                 | '       if amount=1 then  
0aa08     0C 4E 85 F1 | 	sub	fp, #12
0aa0c     A7 1E 02 FB | 	rdlong	local01, fp
0aa10     14 4E 85 F1 | 	sub	fp, #20
0aa14     01 1E 0E F2 | 	cmp	local01, #1 wz
0aa18     68 00 90 5D |  if_ne	jmp	#LR__0856
0aa1c                 | '         get #9,i,line2(0),linelength : i+=linelength
0aa1c     0C 4E 05 F1 | 	add	fp, #12
0aa20     A7 14 02 FB | 	rdlong	arg02, fp
0aa24     14 4E 05 F1 | 	add	fp, #20
0aa28     A7 16 02 F6 | 	mov	arg03, fp
0aa2c     04 4E 85 F1 | 	sub	fp, #4
0aa30     A7 18 02 FB | 	rdlong	arg04, fp
0aa34     1C 4E 85 F1 | 	sub	fp, #28
0aa38     09 12 06 F6 | 	mov	arg01, #9
0aa3c     01 1A 06 F6 | 	mov	arg05, #1
0aa40     A4 F1 B0 FD | 	call	#__system___basic_get
0aa44     0C 4E 05 F1 | 	add	fp, #12
0aa48     A7 1E 02 FB | 	rdlong	local01, fp
0aa4c     10 4E 05 F1 | 	add	fp, #16
0aa50     A7 1A 02 FB | 	rdlong	arg05, fp
0aa54     0D 1F 02 F1 | 	add	local01, arg05
0aa58     10 4E 85 F1 | 	sub	fp, #16
0aa5c     A7 1E 62 FC | 	wrlong	local01, fp
0aa60     94 4E 05 F1 | 	add	fp, #148
0aa64     A7 1E 02 FB | 	rdlong	local01, fp
0aa68     A0 4E 85 F1 | 	sub	fp, #160
0aa6c     56 00 00 FF 
0aa70     F0 E4 05 F1 | 	add	objptr, ##44272
0aa74     F2 1E 62 FC | 	wrlong	local01, objptr
0aa78     56 00 00 FF 
0aa7c     F0 E4 85 F1 | 	sub	objptr, ##44272
0aa80     98 5F BF FD | 	call	#_interpret
0aa84                 | LR__0856
0aa84     14 4E 05 F1 | 	add	fp, #20
0aa88     A7 1E 02 FB | 	rdlong	local01, fp
0aa8c     14 4E 85 F1 | 	sub	fp, #20
0aa90     01 1E 56 F2 | 	cmps	local01, #1 wc
0aa94     20 FF 9F 3D |  if_ae	jmp	#LR__0855
0aa98                 | '     close #9 
0aa98     09 12 06 F6 | 	mov	arg01, #9
0aa9c     78 32 B1 FD | 	call	#__system__close
0aaa0     08 00 90 FD | 	jmp	#LR__0858
0aaa4                 | LR__0857
0aaa4     1E 12 06 F6 | 	mov	arg01, #30
0aaa8     B4 AD B0 FD | 	call	#_printerror
0aaac                 | LR__0858
0aaac                 | LR__0859
0aaac     A7 F0 03 F6 | 	mov	ptra, fp
0aab0     B2 00 A0 FD | 	call	#popregs_
0aab4                 | _do_load_ret
0aab4     2D 00 64 FD | 	ret
0aab8                 | 
0aab8                 | ' 
0aab8                 | ' '----------------- Run the program 
0aab8                 | ' 
0aab8                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0aab8                 | ' 
0aab8                 | ' sub do_run
0aab8                 | _do_run
0aab8     01 4A 05 F6 | 	mov	COUNT_, #1
0aabc     A8 00 A0 FD | 	call	#pushregs_
0aac0     69 00 00 FF 
0aac4     58 E5 05 F1 | 	add	objptr, ##54104
0aac8     F2 1C 02 FB | 	rdlong	arg06, objptr
0aacc     0F 00 00 FF 
0aad0     2C E5 05 F1 | 	add	objptr, ##7980
0aad4     F2 1C 62 FC | 	wrlong	arg06, objptr
0aad8     04 E4 05 F1 | 	add	objptr, #4
0aadc     F2 00 68 FC | 	wrlong	#0, objptr
0aae0     04 E4 05 F1 | 	add	objptr, #4
0aae4     FF FF FF FF 
0aae8     F2 FE 6B FC | 	wrlong	##-1, objptr
0aaec                 | ' if inrun>0 then 
0aaec     04 E4 05 F1 | 	add	objptr, #4
0aaf0     F2 1C 02 FB | 	rdlong	arg06, objptr
0aaf4     79 00 00 FF 
0aaf8     90 E4 85 F1 | 	sub	objptr, ##62096
0aafc     01 1C 16 F2 | 	cmp	arg06, #1 wc
0ab00     30 00 90 CD |  if_b	jmp	#LR__0860
0ab04     79 00 00 FF 
0ab08     94 E4 05 F1 | 	add	objptr, ##62100
0ab0c     F2 12 02 F6 | 	mov	arg01, objptr
0ab10     10 E4 85 F1 | 	sub	objptr, #16
0ab14     F2 14 02 FB | 	rdlong	arg02, objptr
0ab18     18 16 06 F6 | 	mov	arg03, #24
0ab1c     6D 00 00 FF 
0ab20     C4 E5 85 F1 | 	sub	objptr, ##56260
0ab24     6C D7 B0 FD | 	call	#_psram_spin2_read1
0ab28     0B 00 00 FF 
0ab2c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab30                 | '   psram.read1(varptr(runheader),runptr,24)  
0ab30                 | '   return
0ab30     9C 02 90 FD | 	jmp	#LR__0866
0ab34                 | LR__0860
0ab34     79 00 00 FF 
0ab38     90 E4 05 F1 | 	add	objptr, ##62096
0ab3c     F2 02 68 FC | 	wrlong	#1, objptr
0ab40     04 E4 05 F1 | 	add	objptr, #4
0ab44     F2 12 02 F6 | 	mov	arg01, objptr
0ab48     10 E4 85 F1 | 	sub	objptr, #16
0ab4c     F2 14 02 FB | 	rdlong	arg02, objptr
0ab50     18 16 06 F6 | 	mov	arg03, #24
0ab54     6D 00 00 FF 
0ab58     C4 E5 85 F1 | 	sub	objptr, ##56260
0ab5c     34 D7 B0 FD | 	call	#_psram_spin2_read1
0ab60                 | ' inrun=1
0ab60                 | ' psram.read1(varptr(runheader),runptr,24) 
0ab60                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0ab60     6D 00 00 FF 
0ab64     D4 E5 05 F1 | 	add	objptr, ##56276
0ab68     F2 1E 02 FB | 	rdlong	local01, objptr
0ab6c     79 00 00 FF 
0ab70     94 E4 85 F1 | 	sub	objptr, ##62100
0ab74     FF FF 7F FF 
0ab78     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0ab7c     79 00 00 AF 
0ab80     90 E4 05 A1 |  if_e	add	objptr, ##62096
0ab84     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ab88     79 00 00 AF 
0ab8c     90 E4 85 A1 |  if_e	sub	objptr, ##62096
0ab90     3C 02 90 AD |  if_e	jmp	#LR__0866
0ab94                 | ' do 
0ab94                 | LR__0861
0ab94                 | '   if runptr<>oldrunptr then
0ab94     79 00 00 FF 
0ab98     84 E4 05 F1 | 	add	objptr, ##62084
0ab9c     F2 1E 02 FB | 	rdlong	local01, objptr
0aba0     08 E4 05 F1 | 	add	objptr, #8
0aba4     F2 1C 02 FB | 	rdlong	arg06, objptr
0aba8     79 00 00 FF 
0abac     8C E4 85 F1 | 	sub	objptr, ##62092
0abb0     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0abb4     CC 00 90 AD |  if_e	jmp	#LR__0862
0abb8     79 00 00 FF 
0abbc     94 E4 05 F1 | 	add	objptr, ##62100
0abc0     F2 12 02 F6 | 	mov	arg01, objptr
0abc4     10 E4 85 F1 | 	sub	objptr, #16
0abc8     F2 14 02 FB | 	rdlong	arg02, objptr
0abcc     18 16 06 F6 | 	mov	arg03, #24
0abd0     6D 00 00 FF 
0abd4     C4 E5 85 F1 | 	sub	objptr, ##56260
0abd8     B8 D6 B0 FD | 	call	#_psram_spin2_read1
0abdc     5B 00 00 FF 
0abe0     90 E4 05 F1 | 	add	objptr, ##46736
0abe4     F2 12 02 F6 | 	mov	arg01, objptr
0abe8     12 00 00 FF 
0abec     34 E5 05 F1 | 	add	objptr, ##9524
0abf0     F2 14 02 FB | 	rdlong	arg02, objptr
0abf4     14 00 00 FF 
0abf8     4C E5 85 F1 | 	sub	objptr, ##10572
0abfc     F2 1E 02 FB | 	rdlong	local01, objptr
0ac00     01 1E 66 F0 | 	shl	local01, #1
0ac04     0F 15 02 F1 | 	add	arg02, local01
0ac08     14 00 00 FF 
0ac0c     64 E5 05 F1 | 	add	objptr, ##10596
0ac10     F2 16 02 FB | 	rdlong	arg03, objptr
0ac14     18 E4 85 F1 | 	sub	objptr, #24
0ac18     F2 1E 02 FB | 	rdlong	local01, objptr
0ac1c     0F 17 82 F1 | 	sub	arg03, local01
0ac20     6D 00 00 FF 
0ac24     C4 E5 85 F1 | 	sub	objptr, ##56260
0ac28     68 D6 B0 FD | 	call	#_psram_spin2_read1
0ac2c     6D 00 00 FF 
0ac30     DC E5 05 F1 | 	add	objptr, ##56284
0ac34     F2 1E 02 FB | 	rdlong	local01, objptr
0ac38     18 E4 85 F1 | 	sub	objptr, #24
0ac3c     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac40     0E 1F 82 F1 | 	sub	local01, arg06
0ac44     14 00 00 FF 
0ac48     4C E5 85 F1 | 	sub	objptr, ##10572
0ac4c     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac50     0E 1F 12 FD | 	qdiv	local01, arg06
0ac54     05 00 00 FF 
0ac58     18 E4 05 F1 | 	add	objptr, ##2584
0ac5c     18 1E 62 FD | 	getqx	local01
0ac60     03 1E 86 F1 | 	sub	local01, #3
0ac64     F2 1E 62 FC | 	wrlong	local01, objptr
0ac68     0F 00 00 FF 
0ac6c     34 E5 05 F1 | 	add	objptr, ##7988
0ac70     F2 1E 02 FB | 	rdlong	local01, objptr
0ac74     08 E4 05 F1 | 	add	objptr, #8
0ac78     F2 1E 62 FC | 	wrlong	local01, objptr
0ac7c     79 00 00 FF 
0ac80     8C E4 85 F1 | 	sub	objptr, ##62092
0ac84                 | LR__0862
0ac84     79 00 00 FF 
0ac88     A8 E4 05 F1 | 	add	objptr, ##62120
0ac8c     F2 1E 02 FB | 	rdlong	local01, objptr
0ac90     24 E4 85 F1 | 	sub	objptr, #36
0ac94     F2 1E 62 FC | 	wrlong	local01, objptr
0ac98     04 E4 05 F1 | 	add	objptr, #4
0ac9c     F2 12 02 FB | 	rdlong	arg01, objptr
0aca0     79 00 00 FF 
0aca4     88 E4 85 F1 | 	sub	objptr, ##62088
0aca8     40 EB BF FD | 	call	#_execute_line
0acac     79 00 00 FF 
0acb0     88 E4 05 F1 | 	add	objptr, ##62088
0acb4     F2 FA 61 FC | 	wrlong	result1, objptr
0acb8     04 E4 85 F1 | 	sub	objptr, #4
0acbc     F2 1E 02 FB | 	rdlong	local01, objptr
0acc0     79 00 00 FF 
0acc4     84 E4 85 F1 | 	sub	objptr, ##62084
0acc8     FF FF 3F FF 
0accc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0acd0     0C 00 90 AD |  if_e	jmp	#LR__0863
0acd4     4C D9 B0 FD | 	call	#_usbnew_spin2_get_key
0acd8     06 FB 0D F2 | 	cmp	result1, #262 wz
0acdc     B4 FE 9F 5D |  if_ne	jmp	#LR__0861
0ace0                 | LR__0863
0ace0                 | ' if runheader(5)<>$7FFF_FFFF then 
0ace0     79 00 00 FF 
0ace4     A8 E4 05 F1 | 	add	objptr, ##62120
0ace8     F2 1E 02 FB | 	rdlong	local01, objptr
0acec     79 00 00 FF 
0acf0     A8 E4 85 F1 | 	sub	objptr, ##62120
0acf4     FF FF 3F FF 
0acf8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0acfc     BC 00 90 AD |  if_e	jmp	#LR__0865
0ad00                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0ad00     79 00 00 FF 
0ad04     B4 E4 05 F1 | 	add	objptr, ##62132
0ad08     F2 1E 02 FB | 	rdlong	local01, objptr
0ad0c     79 00 00 FF 
0ad10     B4 E4 85 F1 | 	sub	objptr, ##62132
0ad14     01 1E 0E F2 | 	cmp	local01, #1 wz
0ad18     3C 00 90 5D |  if_ne	jmp	#LR__0864
0ad1c     7A 00 00 FF 
0ad20     58 E5 05 F1 | 	add	objptr, ##62808
0ad24     F2 14 02 FB | 	rdlong	arg02, objptr
0ad28     04 E4 85 F1 | 	sub	objptr, #4
0ad2c     F2 1A 02 FB | 	rdlong	arg05, objptr
0ad30     07 12 06 F6 | 	mov	arg01, #7
0ad34     56 00 00 FF 
0ad38     44 16 06 F6 | 	mov	arg03, ##44100
0ad3c     0E 18 C6 F9 | 	decod	arg04, #14
0ad40     01 1C 66 F6 | 	neg	arg06, #1
0ad44     6F 00 00 FF 
0ad48     94 E4 85 F1 | 	sub	objptr, ##56980
0ad4c     5C DC B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0ad50     0B 00 00 FF 
0ad54     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad58                 | LR__0864
0ad58                 | '   print "Stopped at line ";runheader(0)
0ad58     00 12 06 F6 | 	mov	arg01, #0
0ad5c     88 39 B1 FD | 	call	#__system___getiolock_0423
0ad60     FD 12 02 F6 | 	mov	arg01, result1
0ad64     7C E0 B0 FD | 	call	#__system___lockmem
0ad68     44 01 00 FF 
0ad6c     25 14 06 F6 | 	mov	arg02, ##@LR__4571
0ad70     00 12 06 F6 | 	mov	arg01, #0
0ad74     00 16 06 F6 | 	mov	arg03, #0
0ad78     5C ED B0 FD | 	call	#__system___basic_print_string
0ad7c     79 00 00 FF 
0ad80     94 E4 05 F1 | 	add	objptr, ##62100
0ad84     F2 14 02 FB | 	rdlong	arg02, objptr
0ad88     79 00 00 FF 
0ad8c     94 E4 85 F1 | 	sub	objptr, ##62100
0ad90     00 12 06 F6 | 	mov	arg01, #0
0ad94     00 16 06 F6 | 	mov	arg03, #0
0ad98     0A 18 06 F6 | 	mov	arg04, #10
0ad9c     BC ED B0 FD | 	call	#__system___basic_print_unsigned
0ada0     00 12 06 F6 | 	mov	arg01, #0
0ada4     0A 14 06 F6 | 	mov	arg02, #10
0ada8     00 16 06 F6 | 	mov	arg03, #0
0adac     D0 EC B0 FD | 	call	#__system___basic_print_char
0adb0     00 12 06 F6 | 	mov	arg01, #0
0adb4     30 39 B1 FD | 	call	#__system___getiolock_0423
0adb8     FD 00 68 FC | 	wrlong	#0, result1
0adbc                 | LR__0865
0adbc     79 00 00 FF 
0adc0     90 E4 05 F1 | 	add	objptr, ##62096
0adc4     F2 00 68 FC | 	wrlong	#0, objptr
0adc8     79 00 00 FF 
0adcc     90 E4 85 F1 | 	sub	objptr, ##62096
0add0                 | LR__0866
0add0     A7 F0 03 F6 | 	mov	ptra, fp
0add4     B2 00 A0 FD | 	call	#popregs_
0add8                 | _do_run_ret
0add8     2D 00 64 FD | 	ret
0addc                 | 
0addc                 | ' 
0addc                 | ' sub do_defenv
0addc                 | _do_defenv
0addc     05 4A 05 F6 | 	mov	COUNT_, #5
0ade0     A8 00 A0 FD | 	call	#pushregs_
0ade4     84 F0 07 F1 | 	add	ptra, #132
0ade8     69 00 00 FF 
0adec     54 E5 05 F1 | 	add	objptr, ##54100
0adf0     F2 1A 02 FB | 	rdlong	arg05, objptr
0adf4     0D 19 02 F6 | 	mov	arg04, arg05
0adf8     01 18 66 F0 | 	shl	arg04, #1
0adfc     0D 19 02 F1 | 	add	arg04, arg05
0ae00     02 18 66 F0 | 	shl	arg04, #2
0ae04     03 00 00 FF 
0ae08     04 E4 85 F1 | 	sub	objptr, ##1540
0ae0c     F2 18 02 F1 | 	add	arg04, objptr
0ae10     0C 1B 02 FB | 	rdlong	arg05, arg04
0ae14     A7 1A 62 FC | 	wrlong	arg05, fp
0ae18                 | ' 
0ae18                 | ' numpar=compiledline(lineptr_e).result.uresult
0ae18                 | ' 
0ae18                 | ' 
0ae18                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ae18                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ae18                 | ' ' Every 5 ms added 
0ae18                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0ae18                 | ' 
0ae18                 | ' 
0ae18                 | ' if numpar<2 then return
0ae18     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ae1c     66 00 00 FF 
0ae20     50 E5 85 F1 | 	sub	objptr, ##52560
0ae24     40 0A 90 CD |  if_b	jmp	#LR__0897
0ae28                 | ' 
0ae28                 | '  
0ae28                 | ' if numpar=2 then
0ae28     A7 1A 02 FB | 	rdlong	arg05, fp
0ae2c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ae30     AC 04 90 5D |  if_ne	jmp	#LR__0880
0ae34     B8 EA BF FD | 	call	#_pop
0ae38     FF 1A 02 F6 | 	mov	arg05, result3
0ae3c     28 4E 05 F1 | 	add	fp, #40
0ae40     A7 FA 61 FC | 	wrlong	result1, fp
0ae44     04 4E 05 F1 | 	add	fp, #4
0ae48     A7 FC 61 FC | 	wrlong	result2, fp
0ae4c     04 4E 05 F1 | 	add	fp, #4
0ae50     A7 1A 62 FC | 	wrlong	arg05, fp
0ae54                 | '   t1=pop()
0ae54                 | '   if t1.result_type=result_string2 then 
0ae54     30 4E 85 F1 | 	sub	fp, #48
0ae58     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ae5c     20 00 90 5D |  if_ne	jmp	#LR__0870
0ae60     28 4E 05 F1 | 	add	fp, #40
0ae64     A7 12 02 FB | 	rdlong	arg01, fp
0ae68     28 4E 85 F1 | 	sub	fp, #40
0ae6c     BC 1B B0 FD | 	call	#_convertstring
0ae70     34 4E 05 F1 | 	add	fp, #52
0ae74     A7 FA 61 FC | 	wrlong	result1, fp
0ae78     34 4E 85 F1 | 	sub	fp, #52
0ae7c     40 00 90 FD | 	jmp	#LR__0873
0ae80                 | LR__0870
0ae80     30 4E 05 F1 | 	add	fp, #48
0ae84     A7 1A 02 FB | 	rdlong	arg05, fp
0ae88     30 4E 85 F1 | 	sub	fp, #48
0ae8c     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0ae90     18 00 90 5D |  if_ne	jmp	#LR__0871
0ae94     28 4E 05 F1 | 	add	fp, #40
0ae98     A7 1A 02 FB | 	rdlong	arg05, fp
0ae9c     0C 4E 05 F1 | 	add	fp, #12
0aea0     A7 1A 62 FC | 	wrlong	arg05, fp
0aea4     34 4E 85 F1 | 	sub	fp, #52
0aea8     14 00 90 FD | 	jmp	#LR__0872
0aeac                 | LR__0871
0aeac     44 01 00 FF 
0aeb0     36 1A 06 F6 | 	mov	arg05, ##@LR__4572
0aeb4     34 4E 05 F1 | 	add	fp, #52
0aeb8     A7 1A 62 FC | 	wrlong	arg05, fp
0aebc     34 4E 85 F1 | 	sub	fp, #52
0aec0                 | LR__0872
0aec0                 | LR__0873
0aec0                 | ' 
0aec0                 | '     
0aec0                 | '   if s<>"" then 
0aec0     34 4E 05 F1 | 	add	fp, #52
0aec4     A7 12 02 FB | 	rdlong	arg01, fp
0aec8     34 4E 85 F1 | 	sub	fp, #52
0aecc     44 01 00 FF 
0aed0     37 14 06 F6 | 	mov	arg02, ##@LR__4573
0aed4     34 DF B0 FD | 	call	#__system___string_cmp
0aed8     00 FA 0D F2 | 	cmp	result1, #0 wz
0aedc     9C 02 90 AD |  if_e	jmp	#LR__0878
0aee0     0C EA BF FD | 	call	#_pop
0aee4     FF 1A 02 F6 | 	mov	arg05, result3
0aee8     28 4E 05 F1 | 	add	fp, #40
0aeec     A7 FA 61 FC | 	wrlong	result1, fp
0aef0     04 4E 05 F1 | 	add	fp, #4
0aef4     A7 FC 61 FC | 	wrlong	result2, fp
0aef8     04 4E 05 F1 | 	add	fp, #4
0aefc     A7 1A 62 FC | 	wrlong	arg05, fp
0af00     08 4E 85 F1 | 	sub	fp, #8
0af04     A7 12 02 F6 | 	mov	arg01, fp
0af08     28 4E 85 F1 | 	sub	fp, #40
0af0c     50 5F B0 FD | 	call	#_converttoint
0af10     10 4E 05 F1 | 	add	fp, #16
0af14     A7 FA 61 FC | 	wrlong	result1, fp
0af18     10 4E 85 F1 | 	sub	fp, #16
0af1c                 | '     t1=pop()
0af1c                 | '     channel=converttoint(t1) 
0af1c                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0af1c     09 12 06 F6 | 	mov	arg01, #9
0af20     F4 2D B1 FD | 	call	#__system__close
0af24     09 1E 06 F6 | 	mov	local01, #9
0af28     44 01 00 FF 
0af2c     38 12 06 F6 | 	mov	arg01, ##@LR__4574
0af30     34 4E 05 F1 | 	add	fp, #52
0af34     A7 14 02 FB | 	rdlong	arg02, fp
0af38     34 4E 85 F1 | 	sub	fp, #52
0af3c     00 DF B0 FD | 	call	#__system___string_concat
0af40     FD 14 02 F6 | 	mov	arg02, result1
0af44     0F 13 02 F6 | 	mov	arg01, local01
0af48     00 16 06 F6 | 	mov	arg03, #0
0af4c     98 EA B0 FD | 	call	#__system___basic_open_string
0af50     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0af54     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0af58     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0af5c     7A 00 00 FF 
0af60     D4 E5 05 F1 | 	add	objptr, ##62932
0af64     F2 FA 61 FC | 	wrlong	result1, objptr
0af68                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0af68     7A 00 00 FF 
0af6c     D4 E5 85 F1 | 	sub	objptr, ##62932
0af70     B0 00 90 AD |  if_e	jmp	#LR__0874
0af74     00 12 06 F6 | 	mov	arg01, #0
0af78     6C 37 B1 FD | 	call	#__system___getiolock_0423
0af7c     FD 12 02 F6 | 	mov	arg01, result1
0af80     60 DE B0 FD | 	call	#__system___lockmem
0af84     44 01 00 FF 
0af88     45 14 06 F6 | 	mov	arg02, ##@LR__4575
0af8c     00 12 06 F6 | 	mov	arg01, #0
0af90     00 16 06 F6 | 	mov	arg03, #0
0af94     40 EB B0 FD | 	call	#__system___basic_print_string
0af98     7A 00 00 FF 
0af9c     D4 E5 05 F1 | 	add	objptr, ##62932
0afa0     F2 14 02 FB | 	rdlong	arg02, objptr
0afa4     7A 00 00 FF 
0afa8     D4 E5 85 F1 | 	sub	objptr, ##62932
0afac     00 12 06 F6 | 	mov	arg01, #0
0afb0     00 16 06 F6 | 	mov	arg03, #0
0afb4     0A 18 06 F6 | 	mov	arg04, #10
0afb8     60 EB B0 FD | 	call	#__system___basic_print_integer
0afbc     44 01 00 FF 
0afc0     53 14 06 F6 | 	mov	arg02, ##@LR__4576
0afc4     00 12 06 F6 | 	mov	arg01, #0
0afc8     00 16 06 F6 | 	mov	arg03, #0
0afcc     08 EB B0 FD | 	call	#__system___basic_print_string
0afd0     00 1E 06 F6 | 	mov	local01, #0
0afd4     7A 00 00 FF 
0afd8     D4 E5 05 F1 | 	add	objptr, ##62932
0afdc     F2 12 02 FB | 	rdlong	arg01, objptr
0afe0     7A 00 00 FF 
0afe4     D4 E5 85 F1 | 	sub	objptr, ##62932
0afe8     F8 03 B1 FD | 	call	#__system___strerror
0afec     FD 14 02 F6 | 	mov	arg02, result1
0aff0     0F 13 02 F6 | 	mov	arg01, local01
0aff4     00 16 06 F6 | 	mov	arg03, #0
0aff8     DC EA B0 FD | 	call	#__system___basic_print_string
0affc     00 12 06 F6 | 	mov	arg01, #0
0b000     0A 14 06 F6 | 	mov	arg02, #10
0b004     00 16 06 F6 | 	mov	arg03, #0
0b008     74 EA B0 FD | 	call	#__system___basic_print_char
0b00c     00 12 06 F6 | 	mov	arg01, #0
0b010     D4 36 B1 FD | 	call	#__system___getiolock_0423
0b014     FD 00 68 FC | 	wrlong	#0, result1
0b018     09 12 06 F6 | 	mov	arg01, #9
0b01c     F8 2C B1 FD | 	call	#__system__close
0b020     44 08 90 FD | 	jmp	#LR__0897
0b024                 | LR__0874
0b024                 | '     get #9,17,envbuf8(channel,0),256
0b024     10 4E 05 F1 | 	add	fp, #16
0b028     A7 1A 02 FB | 	rdlong	arg05, fp
0b02c     10 4E 85 F1 | 	sub	fp, #16
0b030     0D 17 02 F6 | 	mov	arg03, arg05
0b034     09 16 66 F0 | 	shl	arg03, #9
0b038     0D 17 02 F1 | 	add	arg03, arg05
0b03c     2C 00 00 FF 
0b040     CC E4 05 F1 | 	add	objptr, ##22732
0b044     F2 16 02 F1 | 	add	arg03, objptr
0b048     09 12 06 F6 | 	mov	arg01, #9
0b04c     11 14 06 F6 | 	mov	arg02, #17
0b050     00 19 06 F6 | 	mov	arg04, #256
0b054     01 1A 06 F6 | 	mov	arg05, #1
0b058     2C 00 00 FF 
0b05c     CC E4 85 F1 | 	sub	objptr, ##22732
0b060     84 EB B0 FD | 	call	#__system___basic_get
0b064                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b064     04 4E 05 F1 | 	add	fp, #4
0b068     A7 FE 69 FC | 	wrlong	#255, fp
0b06c     04 4E 85 F1 | 	sub	fp, #4
0b070     2C 00 00 FF 
0b074     CC E4 05 F1 | 	add	objptr, ##22732
0b078     97 34 48 FB | 	callpa	#(@LR__0876-@LR__0875)>>2,fcache_load_ptr_
0b07c                 | LR__0875
0b07c     10 4E 05 F1 | 	add	fp, #16
0b080     A7 1A 02 FB | 	rdlong	arg05, fp
0b084     0D 19 02 F6 | 	mov	arg04, arg05
0b088     08 18 66 F0 | 	shl	arg04, #8
0b08c     0D 19 02 F1 | 	add	arg04, arg05
0b090     01 18 66 F0 | 	shl	arg04, #1
0b094     F2 18 02 F1 | 	add	arg04, objptr
0b098     0C 4E 85 F1 | 	sub	fp, #12
0b09c     A7 16 02 FB | 	rdlong	arg03, fp
0b0a0     0B 15 02 F6 | 	mov	arg02, arg03
0b0a4     01 14 66 F0 | 	shl	arg02, #1
0b0a8     0C 15 02 F1 | 	add	arg02, arg04
0b0ac     0D 19 02 F6 | 	mov	arg04, arg05
0b0b0     09 18 66 F0 | 	shl	arg04, #9
0b0b4     0D 19 02 F1 | 	add	arg04, arg05
0b0b8     F2 18 02 F1 | 	add	arg04, objptr
0b0bc     0C 17 02 F1 | 	add	arg03, arg04
0b0c0     0B 1B C2 FA | 	rdbyte	arg05, arg03
0b0c4     00 1B 06 FA | 	mul	arg05, #256
0b0c8     0A 1B 52 FC | 	wrword	arg05, arg02
0b0cc     A7 1A 02 FB | 	rdlong	arg05, fp
0b0d0     01 1A 86 F1 | 	sub	arg05, #1
0b0d4     A7 1A 62 FC | 	wrlong	arg05, fp
0b0d8     04 4E 85 F1 | 	sub	fp, #4
0b0dc     00 1A 56 F2 | 	cmps	arg05, #0 wc
0b0e0     98 FF 9F 3D |  if_ae	jmp	#LR__0875
0b0e4                 | LR__0876
0b0e4     2C 00 00 FF 
0b0e8     CC E4 85 F1 | 	sub	objptr, ##22732
0b0ec                 | '     close #9
0b0ec     09 12 06 F6 | 	mov	arg01, #9
0b0f0     24 2C B1 FD | 	call	#__system__close
0b0f4                 | '                                                                       for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b0f4     04 4E 05 F1 | 	add	fp, #4
0b0f8     A7 00 68 FC | 	wrlong	#0, fp
0b0fc                 | LR__0877
0b0fc     A7 1E 02 FB | 	rdlong	local01, fp
0b100     0F 13 02 F6 | 	mov	arg01, local01
0b104     0C 4E 05 F1 | 	add	fp, #12
0b108     A7 1A 02 FB | 	rdlong	arg05, fp
0b10c     0D 19 02 F6 | 	mov	arg04, arg05
0b110     08 18 66 F0 | 	shl	arg04, #8
0b114     0D 19 02 F1 | 	add	arg04, arg05
0b118     01 18 66 F0 | 	shl	arg04, #1
0b11c     2C 00 00 FF 
0b120     CC E4 05 F1 | 	add	objptr, ##22732
0b124     F2 18 02 F1 | 	add	arg04, objptr
0b128     01 1E 66 F0 | 	shl	local01, #1
0b12c     0C 1F 02 F1 | 	add	local01, arg04
0b130     0F 1F E2 FA | 	rdword	local01, local01
0b134     0F 1F 52 F6 | 	abs	local01, local01 wc
0b138     90 1F 16 FD | 	qdiv	local01, #400
0b13c     10 4E 85 F1 | 	sub	fp, #16
0b140     2C 00 00 FF 
0b144     CC E4 85 F1 | 	sub	objptr, ##22732
0b148     20 15 06 F6 | 	mov	arg02, #288
0b14c     28 16 06 F6 | 	mov	arg03, #40
0b150     18 1E 62 FD | 	getqx	local01
0b154     0F 15 A2 F3 | 	sumnc	arg02, local01
0b158     D8 BC B0 FD | 	call	#_hg010b_spin2_putpixel
0b15c     04 4E 05 F1 | 	add	fp, #4
0b160     A7 1E 02 FB | 	rdlong	local01, fp
0b164     01 1E 06 F1 | 	add	local01, #1
0b168     A7 1E 62 FC | 	wrlong	local01, fp
0b16c     00 1F 56 F2 | 	cmps	local01, #256 wc
0b170     88 FF 9F CD |  if_b	jmp	#LR__0877
0b174     04 4E 85 F1 | 	sub	fp, #4
0b178                 | '     return
0b178     EC 06 90 FD | 	jmp	#LR__0897
0b17c                 | LR__0878
0b17c     28 4E 05 F1 | 	add	fp, #40
0b180     A7 12 02 F6 | 	mov	arg01, fp
0b184     28 4E 85 F1 | 	sub	fp, #40
0b188     D4 5C B0 FD | 	call	#_converttoint
0b18c     FD 1E 02 F6 | 	mov	local01, result1
0b190     0C 4E 05 F1 | 	add	fp, #12
0b194     A7 1E 62 FC | 	wrlong	local01, fp
0b198     0C 4E 85 F1 | 	sub	fp, #12
0b19c                 | '   
0b19c                 | '   par=converttoint(t1)  : print par
0b19c     00 12 06 F6 | 	mov	arg01, #0
0b1a0     44 35 B1 FD | 	call	#__system___getiolock_0423
0b1a4     FD 12 02 F6 | 	mov	arg01, result1
0b1a8     38 DC B0 FD | 	call	#__system___lockmem
0b1ac     0C 4E 05 F1 | 	add	fp, #12
0b1b0     A7 14 02 FB | 	rdlong	arg02, fp
0b1b4     0C 4E 85 F1 | 	sub	fp, #12
0b1b8     00 12 06 F6 | 	mov	arg01, #0
0b1bc     00 16 06 F6 | 	mov	arg03, #0
0b1c0     0A 18 06 F6 | 	mov	arg04, #10
0b1c4     54 E9 B0 FD | 	call	#__system___basic_print_integer
0b1c8     00 12 06 F6 | 	mov	arg01, #0
0b1cc     0A 14 06 F6 | 	mov	arg02, #10
0b1d0     00 16 06 F6 | 	mov	arg03, #0
0b1d4     A8 E8 B0 FD | 	call	#__system___basic_print_char
0b1d8     00 12 06 F6 | 	mov	arg01, #0
0b1dc     08 35 B1 FD | 	call	#__system___getiolock_0423
0b1e0     FD 00 68 FC | 	wrlong	#0, result1
0b1e4     08 E7 BF FD | 	call	#_pop
0b1e8     FF 1E 02 F6 | 	mov	local01, result3
0b1ec     28 4E 05 F1 | 	add	fp, #40
0b1f0     A7 FA 61 FC | 	wrlong	result1, fp
0b1f4     04 4E 05 F1 | 	add	fp, #4
0b1f8     A7 FC 61 FC | 	wrlong	result2, fp
0b1fc     04 4E 05 F1 | 	add	fp, #4
0b200     A7 1E 62 FC | 	wrlong	local01, fp
0b204     08 4E 85 F1 | 	sub	fp, #8
0b208     A7 12 02 F6 | 	mov	arg01, fp
0b20c     28 4E 85 F1 | 	sub	fp, #40
0b210     4C 5C B0 FD | 	call	#_converttoint
0b214     10 4E 05 F1 | 	add	fp, #16
0b218     A7 FA 61 FC | 	wrlong	result1, fp
0b21c                 | '   t1=pop()
0b21c                 | '   channel=converttoint(t1)  
0b21c                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b21c     04 4E 85 F1 | 	sub	fp, #4
0b220     A7 1E 0A FB | 	rdlong	local01, fp wz
0b224     0C 4E 85 F1 | 	sub	fp, #12
0b228     3C 06 90 5D |  if_ne	jmp	#LR__0897
0b22c     04 4E 05 F1 | 	add	fp, #4
0b230     A7 00 68 FC | 	wrlong	#0, fp
0b234     04 4E 85 F1 | 	sub	fp, #4
0b238                 | LR__0879
0b238     10 4E 05 F1 | 	add	fp, #16
0b23c     A7 1E 02 FB | 	rdlong	local01, fp
0b240     0B 1E 66 F0 | 	shl	local01, #11
0b244     0C 00 00 FF 
0b248     CC E4 05 F1 | 	add	objptr, ##6348
0b24c     F2 1E 02 F1 | 	add	local01, objptr
0b250     0C 4E 85 F1 | 	sub	fp, #12
0b254     A7 12 02 FB | 	rdlong	arg01, fp
0b258     09 21 02 F6 | 	mov	local02, arg01
0b25c     01 20 66 F0 | 	shl	local02, #1
0b260     0F 21 02 F1 | 	add	local02, local01
0b264     04 4E 85 F1 | 	sub	fp, #4
0b268     0C 00 00 FF 
0b26c     CC E4 85 F1 | 	sub	objptr, ##6348
0b270     09 13 52 F6 | 	abs	arg01, arg01 wc
0b274     1F 22 C6 C9 |  if_b	decod	local03, #31
0b278     00 22 06 36 |  if_ae	mov	local03, #0
0b27c     4C 02 B1 FD | 	call	#__system___float_fromuns
0b280     11 FB 61 F5 | 	xor	result1, local03
0b284     FD 14 02 F6 | 	mov	arg02, result1
0b288     87 E4 1D FF 
0b28c     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b290     3C 06 B1 FD | 	call	#__system___float_mul
0b294     FD 12 02 F6 | 	mov	arg01, result1
0b298     70 0F B1 FD | 	call	#__system____builtin_sinf
0b29c     FD 14 02 F6 | 	mov	arg02, result1
0b2a0     58 7F 23 FF 
0b2a4     00 12 06 F6 | 	mov	arg01, ##1191096320
0b2a8     24 06 B1 FD | 	call	#__system___float_mul
0b2ac     FD 12 02 F6 | 	mov	arg01, result1
0b2b0     01 14 06 F6 | 	mov	arg02, #1
0b2b4     E0 0A B1 FD | 	call	#__system___float_tointeger
0b2b8     10 FB 51 FC | 	wrword	result1, local02
0b2bc     04 4E 05 F1 | 	add	fp, #4
0b2c0     A7 20 02 FB | 	rdlong	local02, fp
0b2c4     01 20 06 F1 | 	add	local02, #1
0b2c8     A7 20 62 FC | 	wrlong	local02, fp
0b2cc     04 4E 85 F1 | 	sub	fp, #4
0b2d0     02 00 00 FF 
0b2d4     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b2d8     5C FF 9F CD |  if_b	jmp	#LR__0879
0b2dc                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b2dc                 | '   return
0b2dc     88 05 90 FD | 	jmp	#LR__0897
0b2e0                 | LR__0880
0b2e0                 | ' for i=0 to 15 : harm(i)=0: next i  
0b2e0     04 4E 05 F1 | 	add	fp, #4
0b2e4     A7 00 68 FC | 	wrlong	#0, fp
0b2e8     97 16 48 FB | 	callpa	#(@LR__0882-@LR__0881)>>2,fcache_load_ptr_
0b2ec                 | LR__0881
0b2ec     A7 1E 02 FB | 	rdlong	local01, fp
0b2f0     02 1E 66 F0 | 	shl	local01, #2
0b2f4     34 4E 05 F1 | 	add	fp, #52
0b2f8     A7 1E 02 F1 | 	add	local01, fp
0b2fc     0F 01 68 FC | 	wrlong	#0, local01
0b300     34 4E 85 F1 | 	sub	fp, #52
0b304     A7 1E 02 FB | 	rdlong	local01, fp
0b308     01 1E 06 F1 | 	add	local01, #1
0b30c     A7 1E 62 FC | 	wrlong	local01, fp
0b310     10 1E 56 F2 | 	cmps	local01, #16 wc
0b314     D4 FF 9F CD |  if_b	jmp	#LR__0881
0b318                 | LR__0882
0b318     04 4E 85 F1 | 	sub	fp, #4
0b31c                 | ' for i=numpar to 2 step -1 
0b31c     A7 1E 02 FB | 	rdlong	local01, fp
0b320     04 4E 05 F1 | 	add	fp, #4
0b324     A7 1E 62 FC | 	wrlong	local01, fp
0b328     04 4E 85 F1 | 	sub	fp, #4
0b32c                 | LR__0883
0b32c     C0 E5 BF FD | 	call	#_pop
0b330     28 4E 05 F1 | 	add	fp, #40
0b334     A7 FA 61 FC | 	wrlong	result1, fp
0b338     04 4E 05 F1 | 	add	fp, #4
0b33c     A7 FC 61 FC | 	wrlong	result2, fp
0b340     04 4E 05 F1 | 	add	fp, #4
0b344     A7 FE 61 FC | 	wrlong	result3, fp
0b348     2C 4E 85 F1 | 	sub	fp, #44
0b34c     A7 1E 02 FB | 	rdlong	local01, fp
0b350     02 1E 86 F1 | 	sub	local01, #2
0b354     02 1E 66 F0 | 	shl	local01, #2
0b358     34 4E 05 F1 | 	add	fp, #52
0b35c     A7 1E 02 F1 | 	add	local01, fp
0b360     10 4E 85 F1 | 	sub	fp, #16
0b364     A7 12 02 F6 | 	mov	arg01, fp
0b368     28 4E 85 F1 | 	sub	fp, #40
0b36c     9C 5B B0 FD | 	call	#_converttofloat
0b370     0F FB 61 FC | 	wrlong	result1, local01
0b374     04 4E 05 F1 | 	add	fp, #4
0b378     A7 1E 02 FB | 	rdlong	local01, fp
0b37c     01 1E 86 F1 | 	sub	local01, #1
0b380     A7 1E 62 FC | 	wrlong	local01, fp
0b384     04 4E 85 F1 | 	sub	fp, #4
0b388     02 1E 56 F2 | 	cmps	local01, #2 wc
0b38c     9C FF 9F 3D |  if_ae	jmp	#LR__0883
0b390     5C E5 BF FD | 	call	#_pop
0b394     FF 1E 02 F6 | 	mov	local01, result3
0b398     28 4E 05 F1 | 	add	fp, #40
0b39c     A7 FA 61 FC | 	wrlong	result1, fp
0b3a0     04 4E 05 F1 | 	add	fp, #4
0b3a4     A7 FC 61 FC | 	wrlong	result2, fp
0b3a8     04 4E 05 F1 | 	add	fp, #4
0b3ac     A7 1E 62 FC | 	wrlong	local01, fp
0b3b0     08 4E 85 F1 | 	sub	fp, #8
0b3b4     A7 12 02 F6 | 	mov	arg01, fp
0b3b8     28 4E 85 F1 | 	sub	fp, #40
0b3bc     A0 5A B0 FD | 	call	#_converttoint
0b3c0     FD 1E 02 F6 | 	mov	local01, result1
0b3c4     10 4E 05 F1 | 	add	fp, #16
0b3c8     A7 1E 62 FC | 	wrlong	local01, fp
0b3cc     10 4E 85 F1 | 	sub	fp, #16
0b3d0                 | ' t1=pop()
0b3d0                 | ' channel=converttoint(t1) : print channel
0b3d0     00 12 06 F6 | 	mov	arg01, #0
0b3d4     10 33 B1 FD | 	call	#__system___getiolock_0423
0b3d8     FD 12 02 F6 | 	mov	arg01, result1
0b3dc     04 DA B0 FD | 	call	#__system___lockmem
0b3e0     10 4E 05 F1 | 	add	fp, #16
0b3e4     A7 14 02 FB | 	rdlong	arg02, fp
0b3e8     10 4E 85 F1 | 	sub	fp, #16
0b3ec     00 12 06 F6 | 	mov	arg01, #0
0b3f0     00 16 06 F6 | 	mov	arg03, #0
0b3f4     0A 18 06 F6 | 	mov	arg04, #10
0b3f8     20 E7 B0 FD | 	call	#__system___basic_print_integer
0b3fc     00 12 06 F6 | 	mov	arg01, #0
0b400     0A 14 06 F6 | 	mov	arg02, #10
0b404     00 16 06 F6 | 	mov	arg03, #0
0b408     74 E6 B0 FD | 	call	#__system___basic_print_char
0b40c     00 12 06 F6 | 	mov	arg01, #0
0b410     D4 32 B1 FD | 	call	#__system___getiolock_0423
0b414     FD 00 68 FC | 	wrlong	#0, result1
0b418                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b418     08 4E 05 F1 | 	add	fp, #8
0b41c     02 00 80 FF 
0b420     A7 00 68 FC | 	wrlong	##1024, fp
0b424     08 4E 85 F1 | 	sub	fp, #8
0b428     0C 00 00 FF 
0b42c     CC E4 05 F1 | 	add	objptr, ##6348
0b430     97 18 48 FB | 	callpa	#(@LR__0886-@LR__0884)>>2,fcache_load_ptr_
0b434                 | LR__0884
0b434     02 00 00 FF 
0b438     00 14 DC FC | 	rep	@LR__0887, ##1024
0b43c                 | LR__0885
0b43c     10 4E 05 F1 | 	add	fp, #16
0b440     A7 20 02 FB | 	rdlong	local02, fp
0b444     0B 20 66 F0 | 	shl	local02, #11
0b448     F2 20 02 F1 | 	add	local02, objptr
0b44c     0C 4E 85 F1 | 	sub	fp, #12
0b450     A7 1E 02 FB | 	rdlong	local01, fp
0b454     04 4E 85 F1 | 	sub	fp, #4
0b458     01 1E 66 F0 | 	shl	local01, #1
0b45c     10 1F 02 F1 | 	add	local01, local02
0b460     0F 01 58 FC | 	wrword	#0, local01
0b464                 | LR__0886
0b464                 | LR__0887
0b464     0C 00 00 FF 
0b468     CC E4 85 F1 | 	sub	objptr, ##6348
0b46c     1C 4E 05 F1 | 	add	fp, #28
0b470     A7 00 68 FC | 	wrlong	#0, fp
0b474                 | ' max=0
0b474                 | ' if harm(0)<0 then
0b474     1C 4E 05 F1 | 	add	fp, #28
0b478     A7 12 02 FB | 	rdlong	arg01, fp
0b47c     38 4E 85 F1 | 	sub	fp, #56
0b480     00 14 06 F6 | 	mov	arg02, #0
0b484     01 16 06 F6 | 	mov	arg03, #1
0b488     78 08 B1 FD | 	call	#__system___float_cmp
0b48c     00 FA 55 F2 | 	cmps	result1, #0 wc
0b490     04 01 90 3D |  if_ae	jmp	#LR__0890
0b494     38 4E 05 F1 | 	add	fp, #56
0b498     A7 FA 01 FB | 	rdlong	result1, fp
0b49c     1F FA 05 F4 | 	bitl	result1, #31
0b4a0     24 4E 85 F1 | 	sub	fp, #36
0b4a4     A7 FA 61 FC | 	wrlong	result1, fp
0b4a8     28 4E 05 F1 | 	add	fp, #40
0b4ac     A7 FA 01 FB | 	rdlong	result1, fp
0b4b0     1F FA 05 F4 | 	bitl	result1, #31
0b4b4     24 4E 85 F1 | 	sub	fp, #36
0b4b8     A7 FA 61 FC | 	wrlong	result1, fp
0b4bc     20 4E 05 F1 | 	add	fp, #32
0b4c0     00 C0 9F FF 
0b4c4     A7 00 68 FC | 	wrlong	##1065353216, fp
0b4c8     24 4E 85 F1 | 	sub	fp, #36
0b4cc     A7 1E 02 FB | 	rdlong	local01, fp
0b4d0     28 4E 05 F1 | 	add	fp, #40
0b4d4     A7 1E 62 FC | 	wrlong	local01, fp
0b4d8     24 4E 85 F1 | 	sub	fp, #36
0b4dc     A7 1E 02 FB | 	rdlong	local01, fp
0b4e0     28 4E 05 F1 | 	add	fp, #40
0b4e4     A7 1E 62 FC | 	wrlong	local01, fp
0b4e8                 | '   harm(0)=1
0b4e8                 | '   harm(1)=even
0b4e8                 | '   harm(2)=odd
0b4e8                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b4e8     3C 4E 85 F1 | 	sub	fp, #60
0b4ec     A7 06 68 FC | 	wrlong	#3, fp
0b4f0                 | LR__0888
0b4f0     A7 1A 02 FB | 	rdlong	arg05, fp
0b4f4     0D 25 02 F6 | 	mov	local04, arg05
0b4f8     02 24 66 F0 | 	shl	local04, #2
0b4fc     34 4E 05 F1 | 	add	fp, #52
0b500     A7 24 02 F1 | 	add	local04, fp
0b504     02 1A 86 F1 | 	sub	arg05, #2
0b508     02 1A 66 F0 | 	shl	arg05, #2
0b50c     A7 1A 02 F1 | 	add	arg05, fp
0b510     0D 13 02 FB | 	rdlong	arg01, arg05
0b514     24 4E 85 F1 | 	sub	fp, #36
0b518     A7 14 02 FB | 	rdlong	arg02, fp
0b51c     14 4E 85 F1 | 	sub	fp, #20
0b520     AC 03 B1 FD | 	call	#__system___float_mul
0b524     12 FB 61 FC | 	wrlong	result1, local04
0b528     04 4E 05 F1 | 	add	fp, #4
0b52c     A7 26 02 FB | 	rdlong	local05, fp
0b530     02 26 06 F1 | 	add	local05, #2
0b534     A7 26 62 FC | 	wrlong	local05, fp
0b538     10 26 56 F2 | 	cmps	local05, #16 wc
0b53c     B0 FF 9F CD |  if_b	jmp	#LR__0888
0b540                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b540     A7 08 68 FC | 	wrlong	#4, fp
0b544                 | LR__0889
0b544     A7 26 02 FB | 	rdlong	local05, fp
0b548     13 25 02 F6 | 	mov	local04, local05
0b54c     02 24 66 F0 | 	shl	local04, #2
0b550     34 4E 05 F1 | 	add	fp, #52
0b554     A7 24 02 F1 | 	add	local04, fp
0b558     02 26 86 F1 | 	sub	local05, #2
0b55c     02 26 66 F0 | 	shl	local05, #2
0b560     A7 26 02 F1 | 	add	local05, fp
0b564     13 13 02 FB | 	rdlong	arg01, local05
0b568     20 4E 85 F1 | 	sub	fp, #32
0b56c     A7 14 02 FB | 	rdlong	arg02, fp
0b570     18 4E 85 F1 | 	sub	fp, #24
0b574     58 03 B1 FD | 	call	#__system___float_mul
0b578     12 FB 61 FC | 	wrlong	result1, local04
0b57c     04 4E 05 F1 | 	add	fp, #4
0b580     A7 26 02 FB | 	rdlong	local05, fp
0b584     02 26 06 F1 | 	add	local05, #2
0b588     A7 26 62 FC | 	wrlong	local05, fp
0b58c     0F 26 56 F2 | 	cmps	local05, #15 wc
0b590     B0 FF 9F CD |  if_b	jmp	#LR__0889
0b594     04 4E 85 F1 | 	sub	fp, #4
0b598                 | LR__0890
0b598                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b598     38 4E 05 F1 | 	add	fp, #56
0b59c     A7 12 02 FB | 	rdlong	arg01, fp
0b5a0     38 4E 85 F1 | 	sub	fp, #56
0b5a4     00 14 06 F6 | 	mov	arg02, #0
0b5a8     01 16 66 F6 | 	neg	arg03, #1
0b5ac     54 07 B1 FD | 	call	#__system___float_cmp
0b5b0     00 FA 55 F2 | 	cmps	result1, #0 wc
0b5b4     B0 02 90 CD |  if_b	jmp	#LR__0896
0b5b8                 | '   for i=0 to 1023
0b5b8     04 4E 05 F1 | 	add	fp, #4
0b5bc     A7 00 68 FC | 	wrlong	#0, fp
0b5c0     04 4E 85 F1 | 	sub	fp, #4
0b5c4                 | LR__0891
0b5c4     20 4E 05 F1 | 	add	fp, #32
0b5c8     A7 00 68 FC | 	wrlong	#0, fp
0b5cc                 | '     spl=0
0b5cc                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b5cc     18 4E 85 F1 | 	sub	fp, #24
0b5d0     A7 00 68 FC | 	wrlong	#0, fp
0b5d4                 | LR__0892
0b5d4     A7 24 02 FB | 	rdlong	local04, fp
0b5d8     02 24 66 F0 | 	shl	local04, #2
0b5dc     30 4E 05 F1 | 	add	fp, #48
0b5e0     A7 24 02 F1 | 	add	local04, fp
0b5e4     12 27 02 FB | 	rdlong	local05, local04
0b5e8     87 E4 1D FF 
0b5ec     DB 25 06 F6 | 	mov	local04, ##1003032539
0b5f0     34 4E 85 F1 | 	sub	fp, #52
0b5f4     A7 12 02 FB | 	rdlong	arg01, fp
0b5f8     04 4E 85 F1 | 	sub	fp, #4
0b5fc     09 13 52 F6 | 	abs	arg01, arg01 wc
0b600     1F 22 C6 C9 |  if_b	decod	local03, #31
0b604     00 22 06 36 |  if_ae	mov	local03, #0
0b608     C0 FE B0 FD | 	call	#__system___float_fromuns
0b60c     11 FB 61 F5 | 	xor	result1, local03
0b610     FD 14 02 F6 | 	mov	arg02, result1
0b614     12 13 02 F6 | 	mov	arg01, local04
0b618     B4 02 B1 FD | 	call	#__system___float_mul
0b61c     FD 24 02 F6 | 	mov	local04, result1
0b620     08 4E 05 F1 | 	add	fp, #8
0b624     A7 12 02 FB | 	rdlong	arg01, fp
0b628     08 4E 85 F1 | 	sub	fp, #8
0b62c     01 12 06 F1 | 	add	arg01, #1
0b630     09 13 52 F6 | 	abs	arg01, arg01 wc
0b634     1F 22 C6 C9 |  if_b	decod	local03, #31
0b638     00 22 06 36 |  if_ae	mov	local03, #0
0b63c     8C FE B0 FD | 	call	#__system___float_fromuns
0b640     11 FB 61 F5 | 	xor	result1, local03
0b644     FD 14 02 F6 | 	mov	arg02, result1
0b648     12 13 02 F6 | 	mov	arg01, local04
0b64c     80 02 B1 FD | 	call	#__system___float_mul
0b650     FD 12 02 F6 | 	mov	arg01, result1
0b654     B4 0B B1 FD | 	call	#__system____builtin_sinf
0b658     FD 14 02 F6 | 	mov	arg02, result1
0b65c     13 13 02 F6 | 	mov	arg01, local05
0b660     6C 02 B1 FD | 	call	#__system___float_mul
0b664     FD 14 02 F6 | 	mov	arg02, result1
0b668     20 4E 05 F1 | 	add	fp, #32
0b66c     A7 12 02 FB | 	rdlong	arg01, fp
0b670     20 4E 85 F1 | 	sub	fp, #32
0b674     88 FE B0 FD | 	call	#__system___float_add
0b678     20 4E 05 F1 | 	add	fp, #32
0b67c     A7 FA 61 FC | 	wrlong	result1, fp
0b680     18 4E 85 F1 | 	sub	fp, #24
0b684     A7 16 02 FB | 	rdlong	arg03, fp
0b688     01 16 06 F1 | 	add	arg03, #1
0b68c     A7 16 62 FC | 	wrlong	arg03, fp
0b690     10 16 56 F2 | 	cmps	arg03, #16 wc
0b694     3C FF 9F CD |  if_b	jmp	#LR__0892
0b698                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b698     18 4E 05 F1 | 	add	fp, #24
0b69c     A7 12 02 FB | 	rdlong	arg01, fp
0b6a0     1F 12 06 F4 | 	bitl	arg01, #31
0b6a4     04 4E 85 F1 | 	sub	fp, #4
0b6a8     A7 14 02 FB | 	rdlong	arg02, fp
0b6ac     1C 4E 85 F1 | 	sub	fp, #28
0b6b0     01 16 66 F6 | 	neg	arg03, #1
0b6b4     4C 06 B1 FD | 	call	#__system___float_cmp
0b6b8     01 FA 55 F2 | 	cmps	result1, #1 wc
0b6bc     18 00 90 CD |  if_b	jmp	#LR__0893
0b6c0     20 4E 05 F1 | 	add	fp, #32
0b6c4     A7 FA 01 FB | 	rdlong	result1, fp
0b6c8     1F FA 05 F4 | 	bitl	result1, #31
0b6cc     04 4E 85 F1 | 	sub	fp, #4
0b6d0     A7 FA 61 FC | 	wrlong	result1, fp
0b6d4     1C 4E 85 F1 | 	sub	fp, #28
0b6d8                 | LR__0893
0b6d8     04 4E 05 F1 | 	add	fp, #4
0b6dc     A7 26 02 FB | 	rdlong	local05, fp
0b6e0     01 26 06 F1 | 	add	local05, #1
0b6e4     A7 26 62 FC | 	wrlong	local05, fp
0b6e8     04 4E 85 F1 | 	sub	fp, #4
0b6ec     02 00 00 FF 
0b6f0     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b6f4     CC FE 9F CD |  if_b	jmp	#LR__0891
0b6f8                 | '   for i=0 to 1023
0b6f8     04 4E 05 F1 | 	add	fp, #4
0b6fc     A7 00 68 FC | 	wrlong	#0, fp
0b700     04 4E 85 F1 | 	sub	fp, #4
0b704                 | LR__0894
0b704     20 4E 05 F1 | 	add	fp, #32
0b708     A7 00 68 FC | 	wrlong	#0, fp
0b70c                 | '     spl=0
0b70c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b70c     18 4E 85 F1 | 	sub	fp, #24
0b710     A7 00 68 FC | 	wrlong	#0, fp
0b714                 | LR__0895
0b714     A7 26 02 FB | 	rdlong	local05, fp
0b718     02 26 66 F0 | 	shl	local05, #2
0b71c     30 4E 05 F1 | 	add	fp, #48
0b720     A7 26 02 F1 | 	add	local05, fp
0b724     13 27 02 FB | 	rdlong	local05, local05
0b728     1C 4E 85 F1 | 	sub	fp, #28
0b72c     A7 14 02 FB | 	rdlong	arg02, fp
0b730     1C 4E 85 F1 | 	sub	fp, #28
0b734     58 7F 23 FF 
0b738     00 12 06 F6 | 	mov	arg01, ##1191096320
0b73c     94 03 B1 FD | 	call	#__system___float_div
0b740     FD 14 02 F6 | 	mov	arg02, result1
0b744     13 13 02 F6 | 	mov	arg01, local05
0b748     84 01 B1 FD | 	call	#__system___float_mul
0b74c     FD 26 02 F6 | 	mov	local05, result1
0b750     87 E4 1D FF 
0b754     DB 25 06 F6 | 	mov	local04, ##1003032539
0b758     04 4E 05 F1 | 	add	fp, #4
0b75c     A7 12 02 FB | 	rdlong	arg01, fp
0b760     04 4E 85 F1 | 	sub	fp, #4
0b764     09 13 52 F6 | 	abs	arg01, arg01 wc
0b768     1F 22 C6 C9 |  if_b	decod	local03, #31
0b76c     00 22 06 36 |  if_ae	mov	local03, #0
0b770     58 FD B0 FD | 	call	#__system___float_fromuns
0b774     11 FB 61 F5 | 	xor	result1, local03
0b778     FD 14 02 F6 | 	mov	arg02, result1
0b77c     12 13 02 F6 | 	mov	arg01, local04
0b780     4C 01 B1 FD | 	call	#__system___float_mul
0b784     FD 24 02 F6 | 	mov	local04, result1
0b788     08 4E 05 F1 | 	add	fp, #8
0b78c     A7 12 02 FB | 	rdlong	arg01, fp
0b790     08 4E 85 F1 | 	sub	fp, #8
0b794     01 12 06 F1 | 	add	arg01, #1
0b798     09 13 52 F6 | 	abs	arg01, arg01 wc
0b79c     1F 22 C6 C9 |  if_b	decod	local03, #31
0b7a0     00 22 06 36 |  if_ae	mov	local03, #0
0b7a4     24 FD B0 FD | 	call	#__system___float_fromuns
0b7a8     11 FB 61 F5 | 	xor	result1, local03
0b7ac     FD 14 02 F6 | 	mov	arg02, result1
0b7b0     12 13 02 F6 | 	mov	arg01, local04
0b7b4     18 01 B1 FD | 	call	#__system___float_mul
0b7b8     FD 12 02 F6 | 	mov	arg01, result1
0b7bc     4C 0A B1 FD | 	call	#__system____builtin_sinf
0b7c0     FD 14 02 F6 | 	mov	arg02, result1
0b7c4     13 13 02 F6 | 	mov	arg01, local05
0b7c8     04 01 B1 FD | 	call	#__system___float_mul
0b7cc     FD 14 02 F6 | 	mov	arg02, result1
0b7d0     20 4E 05 F1 | 	add	fp, #32
0b7d4     A7 12 02 FB | 	rdlong	arg01, fp
0b7d8     20 4E 85 F1 | 	sub	fp, #32
0b7dc     20 FD B0 FD | 	call	#__system___float_add
0b7e0     20 4E 05 F1 | 	add	fp, #32
0b7e4     A7 FA 61 FC | 	wrlong	result1, fp
0b7e8     18 4E 85 F1 | 	sub	fp, #24
0b7ec     A7 26 02 FB | 	rdlong	local05, fp
0b7f0     01 26 06 F1 | 	add	local05, #1
0b7f4     A7 26 62 FC | 	wrlong	local05, fp
0b7f8     10 26 56 F2 | 	cmps	local05, #16 wc
0b7fc     14 FF 9F CD |  if_b	jmp	#LR__0895
0b800     08 4E 05 F1 | 	add	fp, #8
0b804     A7 26 02 FB | 	rdlong	local05, fp
0b808     0B 26 66 F0 | 	shl	local05, #11
0b80c     0C 00 00 FF 
0b810     CC E4 05 F1 | 	add	objptr, ##6348
0b814     F2 26 02 F1 | 	add	local05, objptr
0b818     0C 4E 85 F1 | 	sub	fp, #12
0b81c     A7 20 02 FB | 	rdlong	local02, fp
0b820     01 20 66 F0 | 	shl	local02, #1
0b824     13 21 02 F1 | 	add	local02, local05
0b828     1C 4E 05 F1 | 	add	fp, #28
0b82c     A7 12 02 FB | 	rdlong	arg01, fp
0b830     20 4E 85 F1 | 	sub	fp, #32
0b834     0C 00 00 FF 
0b838     CC E4 85 F1 | 	sub	objptr, ##6348
0b83c     01 14 06 F6 | 	mov	arg02, #1
0b840     54 05 B1 FD | 	call	#__system___float_tointeger
0b844     10 FB 51 FC | 	wrword	result1, local02
0b848     04 4E 05 F1 | 	add	fp, #4
0b84c     A7 26 02 FB | 	rdlong	local05, fp
0b850     01 26 06 F1 | 	add	local05, #1
0b854     A7 26 62 FC | 	wrlong	local05, fp
0b858     04 4E 85 F1 | 	sub	fp, #4
0b85c     02 00 00 FF 
0b860     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b864     9C FE 9F CD |  if_b	jmp	#LR__0894
0b868                 | LR__0896
0b868                 | LR__0897
0b868     A7 F0 03 F6 | 	mov	ptra, fp
0b86c     B2 00 A0 FD | 	call	#popregs_
0b870                 | _do_defenv_ret
0b870     2D 00 64 FD | 	ret
0b874                 | 
0b874                 | ' 
0b874                 | ' sub do_defsnd
0b874                 | _do_defsnd
0b874     05 4A 05 F6 | 	mov	COUNT_, #5
0b878     A8 00 A0 FD | 	call	#pushregs_
0b87c     84 F0 07 F1 | 	add	ptra, #132
0b880     69 00 00 FF 
0b884     54 E5 05 F1 | 	add	objptr, ##54100
0b888     F2 1A 02 FB | 	rdlong	arg05, objptr
0b88c     0D 19 02 F6 | 	mov	arg04, arg05
0b890     01 18 66 F0 | 	shl	arg04, #1
0b894     0D 19 02 F1 | 	add	arg04, arg05
0b898     02 18 66 F0 | 	shl	arg04, #2
0b89c     03 00 00 FF 
0b8a0     04 E4 85 F1 | 	sub	objptr, ##1540
0b8a4     F2 18 02 F1 | 	add	arg04, objptr
0b8a8     0C 1B 02 FB | 	rdlong	arg05, arg04
0b8ac     A7 1A 62 FC | 	wrlong	arg05, fp
0b8b0                 | ' 
0b8b0                 | ' numpar=compiledline(lineptr_e).result.uresult
0b8b0                 | ' 
0b8b0                 | ' 
0b8b0                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0b8b0                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0b8b0                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0b8b0                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0b8b0                 | ' 
0b8b0                 | ' if numpar<2 then return
0b8b0     02 1A 56 F2 | 	cmps	arg05, #2 wc
0b8b4     66 00 00 FF 
0b8b8     50 E5 85 F1 | 	sub	objptr, ##52560
0b8bc     2C 09 90 CD |  if_b	jmp	#LR__0924
0b8c0                 | ' 
0b8c0                 | '  
0b8c0                 | ' if numpar=2 then
0b8c0     A7 1A 02 FB | 	rdlong	arg05, fp
0b8c4     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b8c8     98 03 90 5D |  if_ne	jmp	#LR__0907
0b8cc     20 E0 BF FD | 	call	#_pop
0b8d0     FF 1A 02 F6 | 	mov	arg05, result3
0b8d4     28 4E 05 F1 | 	add	fp, #40
0b8d8     A7 FA 61 FC | 	wrlong	result1, fp
0b8dc     04 4E 05 F1 | 	add	fp, #4
0b8e0     A7 FC 61 FC | 	wrlong	result2, fp
0b8e4     04 4E 05 F1 | 	add	fp, #4
0b8e8     A7 1A 62 FC | 	wrlong	arg05, fp
0b8ec                 | '   t1=pop()
0b8ec                 | '   if t1.result_type=result_string2 then 
0b8ec     30 4E 85 F1 | 	sub	fp, #48
0b8f0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b8f4     20 00 90 5D |  if_ne	jmp	#LR__0900
0b8f8     28 4E 05 F1 | 	add	fp, #40
0b8fc     A7 12 02 FB | 	rdlong	arg01, fp
0b900     28 4E 85 F1 | 	sub	fp, #40
0b904     24 11 B0 FD | 	call	#_convertstring
0b908     34 4E 05 F1 | 	add	fp, #52
0b90c     A7 FA 61 FC | 	wrlong	result1, fp
0b910     34 4E 85 F1 | 	sub	fp, #52
0b914     40 00 90 FD | 	jmp	#LR__0903
0b918                 | LR__0900
0b918     30 4E 05 F1 | 	add	fp, #48
0b91c     A7 1A 02 FB | 	rdlong	arg05, fp
0b920     30 4E 85 F1 | 	sub	fp, #48
0b924     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0b928     18 00 90 5D |  if_ne	jmp	#LR__0901
0b92c     28 4E 05 F1 | 	add	fp, #40
0b930     A7 1A 02 FB | 	rdlong	arg05, fp
0b934     0C 4E 05 F1 | 	add	fp, #12
0b938     A7 1A 62 FC | 	wrlong	arg05, fp
0b93c     34 4E 85 F1 | 	sub	fp, #52
0b940     14 00 90 FD | 	jmp	#LR__0902
0b944                 | LR__0901
0b944     44 01 00 FF 
0b948     56 1A 06 F6 | 	mov	arg05, ##@LR__4577
0b94c     34 4E 05 F1 | 	add	fp, #52
0b950     A7 1A 62 FC | 	wrlong	arg05, fp
0b954     34 4E 85 F1 | 	sub	fp, #52
0b958                 | LR__0902
0b958                 | LR__0903
0b958                 | ' 
0b958                 | '     
0b958                 | '   if s<>"" then 
0b958     34 4E 05 F1 | 	add	fp, #52
0b95c     A7 12 02 FB | 	rdlong	arg01, fp
0b960     34 4E 85 F1 | 	sub	fp, #52
0b964     44 01 00 FF 
0b968     57 14 06 F6 | 	mov	arg02, ##@LR__4578
0b96c     9C D4 B0 FD | 	call	#__system___string_cmp
0b970     00 FA 0D F2 | 	cmp	result1, #0 wz
0b974     88 01 90 AD |  if_e	jmp	#LR__0905
0b978     74 DF BF FD | 	call	#_pop
0b97c     FF 1A 02 F6 | 	mov	arg05, result3
0b980     28 4E 05 F1 | 	add	fp, #40
0b984     A7 FA 61 FC | 	wrlong	result1, fp
0b988     04 4E 05 F1 | 	add	fp, #4
0b98c     A7 FC 61 FC | 	wrlong	result2, fp
0b990     04 4E 05 F1 | 	add	fp, #4
0b994     A7 1A 62 FC | 	wrlong	arg05, fp
0b998     08 4E 85 F1 | 	sub	fp, #8
0b99c     A7 12 02 F6 | 	mov	arg01, fp
0b9a0     28 4E 85 F1 | 	sub	fp, #40
0b9a4     B8 54 B0 FD | 	call	#_converttoint
0b9a8     10 4E 05 F1 | 	add	fp, #16
0b9ac     A7 FA 61 FC | 	wrlong	result1, fp
0b9b0     10 4E 85 F1 | 	sub	fp, #16
0b9b4                 | '     t1=pop()
0b9b4                 | '     channel=converttoint(t1) 
0b9b4                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0b9b4     09 12 06 F6 | 	mov	arg01, #9
0b9b8     5C 23 B1 FD | 	call	#__system__close
0b9bc     09 1E 06 F6 | 	mov	local01, #9
0b9c0     44 01 00 FF 
0b9c4     58 12 06 F6 | 	mov	arg01, ##@LR__4579
0b9c8     34 4E 05 F1 | 	add	fp, #52
0b9cc     A7 14 02 FB | 	rdlong	arg02, fp
0b9d0     34 4E 85 F1 | 	sub	fp, #52
0b9d4     68 D4 B0 FD | 	call	#__system___string_concat
0b9d8     FD 14 02 F6 | 	mov	arg02, result1
0b9dc     0F 13 02 F6 | 	mov	arg01, local01
0b9e0     00 16 06 F6 | 	mov	arg03, #0
0b9e4     00 E0 B0 FD | 	call	#__system___basic_open_string
0b9e8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0b9ec     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b9f0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0b9f4     7A 00 00 FF 
0b9f8     D4 E5 05 F1 | 	add	objptr, ##62932
0b9fc     F2 FA 61 FC | 	wrlong	result1, objptr
0ba00                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ba00     7A 00 00 FF 
0ba04     D4 E5 85 F1 | 	sub	objptr, ##62932
0ba08     B0 00 90 AD |  if_e	jmp	#LR__0904
0ba0c     00 12 06 F6 | 	mov	arg01, #0
0ba10     D4 2C B1 FD | 	call	#__system___getiolock_0423
0ba14     FD 12 02 F6 | 	mov	arg01, result1
0ba18     C8 D3 B0 FD | 	call	#__system___lockmem
0ba1c     44 01 00 FF 
0ba20     65 14 06 F6 | 	mov	arg02, ##@LR__4580
0ba24     00 12 06 F6 | 	mov	arg01, #0
0ba28     00 16 06 F6 | 	mov	arg03, #0
0ba2c     A8 E0 B0 FD | 	call	#__system___basic_print_string
0ba30     7A 00 00 FF 
0ba34     D4 E5 05 F1 | 	add	objptr, ##62932
0ba38     F2 14 02 FB | 	rdlong	arg02, objptr
0ba3c     7A 00 00 FF 
0ba40     D4 E5 85 F1 | 	sub	objptr, ##62932
0ba44     00 12 06 F6 | 	mov	arg01, #0
0ba48     00 16 06 F6 | 	mov	arg03, #0
0ba4c     0A 18 06 F6 | 	mov	arg04, #10
0ba50     C8 E0 B0 FD | 	call	#__system___basic_print_integer
0ba54     44 01 00 FF 
0ba58     73 14 06 F6 | 	mov	arg02, ##@LR__4581
0ba5c     00 12 06 F6 | 	mov	arg01, #0
0ba60     00 16 06 F6 | 	mov	arg03, #0
0ba64     70 E0 B0 FD | 	call	#__system___basic_print_string
0ba68     00 1E 06 F6 | 	mov	local01, #0
0ba6c     7A 00 00 FF 
0ba70     D4 E5 05 F1 | 	add	objptr, ##62932
0ba74     F2 12 02 FB | 	rdlong	arg01, objptr
0ba78     7A 00 00 FF 
0ba7c     D4 E5 85 F1 | 	sub	objptr, ##62932
0ba80     60 F9 B0 FD | 	call	#__system___strerror
0ba84     FD 14 02 F6 | 	mov	arg02, result1
0ba88     0F 13 02 F6 | 	mov	arg01, local01
0ba8c     00 16 06 F6 | 	mov	arg03, #0
0ba90     44 E0 B0 FD | 	call	#__system___basic_print_string
0ba94     00 12 06 F6 | 	mov	arg01, #0
0ba98     0A 14 06 F6 | 	mov	arg02, #10
0ba9c     00 16 06 F6 | 	mov	arg03, #0
0baa0     DC DF B0 FD | 	call	#__system___basic_print_char
0baa4     00 12 06 F6 | 	mov	arg01, #0
0baa8     3C 2C B1 FD | 	call	#__system___getiolock_0423
0baac     FD 00 68 FC | 	wrlong	#0, result1
0bab0     09 12 06 F6 | 	mov	arg01, #9
0bab4     60 22 B1 FD | 	call	#__system__close
0bab8     30 07 90 FD | 	jmp	#LR__0924
0babc                 | LR__0904
0babc                 | '     get #9,17,samplebuf(channel,0),1024
0babc     10 4E 05 F1 | 	add	fp, #16
0bac0     A7 16 02 FB | 	rdlong	arg03, fp
0bac4     10 4E 85 F1 | 	sub	fp, #16
0bac8     0B 16 66 F0 | 	shl	arg03, #11
0bacc     0C 00 00 FF 
0bad0     CC E4 05 F1 | 	add	objptr, ##6348
0bad4     F2 16 02 F1 | 	add	arg03, objptr
0bad8     09 12 06 F6 | 	mov	arg01, #9
0badc     11 14 06 F6 | 	mov	arg02, #17
0bae0     0A 18 C6 F9 | 	decod	arg04, #10
0bae4     02 1A 06 F6 | 	mov	arg05, #2
0bae8     0C 00 00 FF 
0baec     CC E4 85 F1 | 	sub	objptr, ##6348
0baf0     F4 E0 B0 FD | 	call	#__system___basic_get
0baf4                 | '     close #9
0baf4     09 12 06 F6 | 	mov	arg01, #9
0baf8     1C 22 B1 FD | 	call	#__system__close
0bafc                 | '                                                                       '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bafc                 | '     return
0bafc     EC 06 90 FD | 	jmp	#LR__0924
0bb00                 | LR__0905
0bb00     28 4E 05 F1 | 	add	fp, #40
0bb04     A7 12 02 F6 | 	mov	arg01, fp
0bb08     28 4E 85 F1 | 	sub	fp, #40
0bb0c     50 53 B0 FD | 	call	#_converttoint
0bb10     FD 1E 02 F6 | 	mov	local01, result1
0bb14     0C 4E 05 F1 | 	add	fp, #12
0bb18     A7 1E 62 FC | 	wrlong	local01, fp
0bb1c     0C 4E 85 F1 | 	sub	fp, #12
0bb20                 | '   
0bb20                 | '   par=converttoint(t1)  : print par
0bb20     00 12 06 F6 | 	mov	arg01, #0
0bb24     C0 2B B1 FD | 	call	#__system___getiolock_0423
0bb28     FD 12 02 F6 | 	mov	arg01, result1
0bb2c     B4 D2 B0 FD | 	call	#__system___lockmem
0bb30     0C 4E 05 F1 | 	add	fp, #12
0bb34     A7 14 02 FB | 	rdlong	arg02, fp
0bb38     0C 4E 85 F1 | 	sub	fp, #12
0bb3c     00 12 06 F6 | 	mov	arg01, #0
0bb40     00 16 06 F6 | 	mov	arg03, #0
0bb44     0A 18 06 F6 | 	mov	arg04, #10
0bb48     D0 DF B0 FD | 	call	#__system___basic_print_integer
0bb4c     00 12 06 F6 | 	mov	arg01, #0
0bb50     0A 14 06 F6 | 	mov	arg02, #10
0bb54     00 16 06 F6 | 	mov	arg03, #0
0bb58     24 DF B0 FD | 	call	#__system___basic_print_char
0bb5c     00 12 06 F6 | 	mov	arg01, #0
0bb60     84 2B B1 FD | 	call	#__system___getiolock_0423
0bb64     FD 00 68 FC | 	wrlong	#0, result1
0bb68     84 DD BF FD | 	call	#_pop
0bb6c     FF 1E 02 F6 | 	mov	local01, result3
0bb70     28 4E 05 F1 | 	add	fp, #40
0bb74     A7 FA 61 FC | 	wrlong	result1, fp
0bb78     04 4E 05 F1 | 	add	fp, #4
0bb7c     A7 FC 61 FC | 	wrlong	result2, fp
0bb80     04 4E 05 F1 | 	add	fp, #4
0bb84     A7 1E 62 FC | 	wrlong	local01, fp
0bb88     08 4E 85 F1 | 	sub	fp, #8
0bb8c     A7 12 02 F6 | 	mov	arg01, fp
0bb90     28 4E 85 F1 | 	sub	fp, #40
0bb94     C8 52 B0 FD | 	call	#_converttoint
0bb98     10 4E 05 F1 | 	add	fp, #16
0bb9c     A7 FA 61 FC | 	wrlong	result1, fp
0bba0                 | '   t1=pop()
0bba0                 | '   channel=converttoint(t1)  
0bba0                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0bba0     04 4E 85 F1 | 	sub	fp, #4
0bba4     A7 1E 0A FB | 	rdlong	local01, fp wz
0bba8     0C 4E 85 F1 | 	sub	fp, #12
0bbac     3C 06 90 5D |  if_ne	jmp	#LR__0924
0bbb0     04 4E 05 F1 | 	add	fp, #4
0bbb4     A7 00 68 FC | 	wrlong	#0, fp
0bbb8     04 4E 85 F1 | 	sub	fp, #4
0bbbc                 | LR__0906
0bbbc     10 4E 05 F1 | 	add	fp, #16
0bbc0     A7 1E 02 FB | 	rdlong	local01, fp
0bbc4     0B 1E 66 F0 | 	shl	local01, #11
0bbc8     0C 00 00 FF 
0bbcc     CC E4 05 F1 | 	add	objptr, ##6348
0bbd0     F2 1E 02 F1 | 	add	local01, objptr
0bbd4     0C 4E 85 F1 | 	sub	fp, #12
0bbd8     A7 12 02 FB | 	rdlong	arg01, fp
0bbdc     09 21 02 F6 | 	mov	local02, arg01
0bbe0     01 20 66 F0 | 	shl	local02, #1
0bbe4     0F 21 02 F1 | 	add	local02, local01
0bbe8     04 4E 85 F1 | 	sub	fp, #4
0bbec     0C 00 00 FF 
0bbf0     CC E4 85 F1 | 	sub	objptr, ##6348
0bbf4     09 13 52 F6 | 	abs	arg01, arg01 wc
0bbf8     1F 22 C6 C9 |  if_b	decod	local03, #31
0bbfc     00 22 06 36 |  if_ae	mov	local03, #0
0bc00     C8 F8 B0 FD | 	call	#__system___float_fromuns
0bc04     11 FB 61 F5 | 	xor	result1, local03
0bc08     FD 14 02 F6 | 	mov	arg02, result1
0bc0c     87 E4 1D FF 
0bc10     DB 13 06 F6 | 	mov	arg01, ##1003032539
0bc14     B8 FC B0 FD | 	call	#__system___float_mul
0bc18     FD 12 02 F6 | 	mov	arg01, result1
0bc1c     EC 05 B1 FD | 	call	#__system____builtin_sinf
0bc20     FD 14 02 F6 | 	mov	arg02, result1
0bc24     58 7F 23 FF 
0bc28     00 12 06 F6 | 	mov	arg01, ##1191096320
0bc2c     A0 FC B0 FD | 	call	#__system___float_mul
0bc30     FD 12 02 F6 | 	mov	arg01, result1
0bc34     01 14 06 F6 | 	mov	arg02, #1
0bc38     5C 01 B1 FD | 	call	#__system___float_tointeger
0bc3c     10 FB 51 FC | 	wrword	result1, local02
0bc40     04 4E 05 F1 | 	add	fp, #4
0bc44     A7 20 02 FB | 	rdlong	local02, fp
0bc48     01 20 06 F1 | 	add	local02, #1
0bc4c     A7 20 62 FC | 	wrlong	local02, fp
0bc50     04 4E 85 F1 | 	sub	fp, #4
0bc54     02 00 00 FF 
0bc58     00 20 56 F2 | 	cmps	local02, ##1024 wc
0bc5c     5C FF 9F CD |  if_b	jmp	#LR__0906
0bc60                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bc60                 | '   return
0bc60     88 05 90 FD | 	jmp	#LR__0924
0bc64                 | LR__0907
0bc64                 | ' for i=0 to 15 : harm(i)=0: next i  
0bc64     04 4E 05 F1 | 	add	fp, #4
0bc68     A7 00 68 FC | 	wrlong	#0, fp
0bc6c     97 16 48 FB | 	callpa	#(@LR__0909-@LR__0908)>>2,fcache_load_ptr_
0bc70                 | LR__0908
0bc70     A7 1E 02 FB | 	rdlong	local01, fp
0bc74     02 1E 66 F0 | 	shl	local01, #2
0bc78     34 4E 05 F1 | 	add	fp, #52
0bc7c     A7 1E 02 F1 | 	add	local01, fp
0bc80     0F 01 68 FC | 	wrlong	#0, local01
0bc84     34 4E 85 F1 | 	sub	fp, #52
0bc88     A7 1E 02 FB | 	rdlong	local01, fp
0bc8c     01 1E 06 F1 | 	add	local01, #1
0bc90     A7 1E 62 FC | 	wrlong	local01, fp
0bc94     10 1E 56 F2 | 	cmps	local01, #16 wc
0bc98     D4 FF 9F CD |  if_b	jmp	#LR__0908
0bc9c                 | LR__0909
0bc9c     04 4E 85 F1 | 	sub	fp, #4
0bca0                 | ' for i=numpar to 2 step -1 
0bca0     A7 1E 02 FB | 	rdlong	local01, fp
0bca4     04 4E 05 F1 | 	add	fp, #4
0bca8     A7 1E 62 FC | 	wrlong	local01, fp
0bcac     04 4E 85 F1 | 	sub	fp, #4
0bcb0                 | LR__0910
0bcb0     3C DC BF FD | 	call	#_pop
0bcb4     28 4E 05 F1 | 	add	fp, #40
0bcb8     A7 FA 61 FC | 	wrlong	result1, fp
0bcbc     04 4E 05 F1 | 	add	fp, #4
0bcc0     A7 FC 61 FC | 	wrlong	result2, fp
0bcc4     04 4E 05 F1 | 	add	fp, #4
0bcc8     A7 FE 61 FC | 	wrlong	result3, fp
0bccc     2C 4E 85 F1 | 	sub	fp, #44
0bcd0     A7 1E 02 FB | 	rdlong	local01, fp
0bcd4     02 1E 86 F1 | 	sub	local01, #2
0bcd8     02 1E 66 F0 | 	shl	local01, #2
0bcdc     34 4E 05 F1 | 	add	fp, #52
0bce0     A7 1E 02 F1 | 	add	local01, fp
0bce4     10 4E 85 F1 | 	sub	fp, #16
0bce8     A7 12 02 F6 | 	mov	arg01, fp
0bcec     28 4E 85 F1 | 	sub	fp, #40
0bcf0     18 52 B0 FD | 	call	#_converttofloat
0bcf4     0F FB 61 FC | 	wrlong	result1, local01
0bcf8     04 4E 05 F1 | 	add	fp, #4
0bcfc     A7 1E 02 FB | 	rdlong	local01, fp
0bd00     01 1E 86 F1 | 	sub	local01, #1
0bd04     A7 1E 62 FC | 	wrlong	local01, fp
0bd08     04 4E 85 F1 | 	sub	fp, #4
0bd0c     02 1E 56 F2 | 	cmps	local01, #2 wc
0bd10     9C FF 9F 3D |  if_ae	jmp	#LR__0910
0bd14     D8 DB BF FD | 	call	#_pop
0bd18     FF 1E 02 F6 | 	mov	local01, result3
0bd1c     28 4E 05 F1 | 	add	fp, #40
0bd20     A7 FA 61 FC | 	wrlong	result1, fp
0bd24     04 4E 05 F1 | 	add	fp, #4
0bd28     A7 FC 61 FC | 	wrlong	result2, fp
0bd2c     04 4E 05 F1 | 	add	fp, #4
0bd30     A7 1E 62 FC | 	wrlong	local01, fp
0bd34     08 4E 85 F1 | 	sub	fp, #8
0bd38     A7 12 02 F6 | 	mov	arg01, fp
0bd3c     28 4E 85 F1 | 	sub	fp, #40
0bd40     1C 51 B0 FD | 	call	#_converttoint
0bd44     FD 1E 02 F6 | 	mov	local01, result1
0bd48     10 4E 05 F1 | 	add	fp, #16
0bd4c     A7 1E 62 FC | 	wrlong	local01, fp
0bd50     10 4E 85 F1 | 	sub	fp, #16
0bd54                 | ' t1=pop()
0bd54                 | ' channel=converttoint(t1) : print channel
0bd54     00 12 06 F6 | 	mov	arg01, #0
0bd58     8C 29 B1 FD | 	call	#__system___getiolock_0423
0bd5c     FD 12 02 F6 | 	mov	arg01, result1
0bd60     80 D0 B0 FD | 	call	#__system___lockmem
0bd64     10 4E 05 F1 | 	add	fp, #16
0bd68     A7 14 02 FB | 	rdlong	arg02, fp
0bd6c     10 4E 85 F1 | 	sub	fp, #16
0bd70     00 12 06 F6 | 	mov	arg01, #0
0bd74     00 16 06 F6 | 	mov	arg03, #0
0bd78     0A 18 06 F6 | 	mov	arg04, #10
0bd7c     9C DD B0 FD | 	call	#__system___basic_print_integer
0bd80     00 12 06 F6 | 	mov	arg01, #0
0bd84     0A 14 06 F6 | 	mov	arg02, #10
0bd88     00 16 06 F6 | 	mov	arg03, #0
0bd8c     F0 DC B0 FD | 	call	#__system___basic_print_char
0bd90     00 12 06 F6 | 	mov	arg01, #0
0bd94     50 29 B1 FD | 	call	#__system___getiolock_0423
0bd98     FD 00 68 FC | 	wrlong	#0, result1
0bd9c                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0bd9c     08 4E 05 F1 | 	add	fp, #8
0bda0     02 00 80 FF 
0bda4     A7 00 68 FC | 	wrlong	##1024, fp
0bda8     08 4E 85 F1 | 	sub	fp, #8
0bdac     0C 00 00 FF 
0bdb0     CC E4 05 F1 | 	add	objptr, ##6348
0bdb4     97 18 48 FB | 	callpa	#(@LR__0913-@LR__0911)>>2,fcache_load_ptr_
0bdb8                 | LR__0911
0bdb8     02 00 00 FF 
0bdbc     00 14 DC FC | 	rep	@LR__0914, ##1024
0bdc0                 | LR__0912
0bdc0     10 4E 05 F1 | 	add	fp, #16
0bdc4     A7 20 02 FB | 	rdlong	local02, fp
0bdc8     0B 20 66 F0 | 	shl	local02, #11
0bdcc     F2 20 02 F1 | 	add	local02, objptr
0bdd0     0C 4E 85 F1 | 	sub	fp, #12
0bdd4     A7 1E 02 FB | 	rdlong	local01, fp
0bdd8     04 4E 85 F1 | 	sub	fp, #4
0bddc     01 1E 66 F0 | 	shl	local01, #1
0bde0     10 1F 02 F1 | 	add	local01, local02
0bde4     0F 01 58 FC | 	wrword	#0, local01
0bde8                 | LR__0913
0bde8                 | LR__0914
0bde8     0C 00 00 FF 
0bdec     CC E4 85 F1 | 	sub	objptr, ##6348
0bdf0     1C 4E 05 F1 | 	add	fp, #28
0bdf4     A7 00 68 FC | 	wrlong	#0, fp
0bdf8                 | ' max=0
0bdf8                 | ' if harm(0)<0 then
0bdf8     1C 4E 05 F1 | 	add	fp, #28
0bdfc     A7 12 02 FB | 	rdlong	arg01, fp
0be00     38 4E 85 F1 | 	sub	fp, #56
0be04     00 14 06 F6 | 	mov	arg02, #0
0be08     01 16 06 F6 | 	mov	arg03, #1
0be0c     F4 FE B0 FD | 	call	#__system___float_cmp
0be10     00 FA 55 F2 | 	cmps	result1, #0 wc
0be14     04 01 90 3D |  if_ae	jmp	#LR__0917
0be18     38 4E 05 F1 | 	add	fp, #56
0be1c     A7 FA 01 FB | 	rdlong	result1, fp
0be20     1F FA 05 F4 | 	bitl	result1, #31
0be24     24 4E 85 F1 | 	sub	fp, #36
0be28     A7 FA 61 FC | 	wrlong	result1, fp
0be2c     28 4E 05 F1 | 	add	fp, #40
0be30     A7 FA 01 FB | 	rdlong	result1, fp
0be34     1F FA 05 F4 | 	bitl	result1, #31
0be38     24 4E 85 F1 | 	sub	fp, #36
0be3c     A7 FA 61 FC | 	wrlong	result1, fp
0be40     20 4E 05 F1 | 	add	fp, #32
0be44     00 C0 9F FF 
0be48     A7 00 68 FC | 	wrlong	##1065353216, fp
0be4c     24 4E 85 F1 | 	sub	fp, #36
0be50     A7 1E 02 FB | 	rdlong	local01, fp
0be54     28 4E 05 F1 | 	add	fp, #40
0be58     A7 1E 62 FC | 	wrlong	local01, fp
0be5c     24 4E 85 F1 | 	sub	fp, #36
0be60     A7 1E 02 FB | 	rdlong	local01, fp
0be64     28 4E 05 F1 | 	add	fp, #40
0be68     A7 1E 62 FC | 	wrlong	local01, fp
0be6c                 | '   harm(0)=1
0be6c                 | '   harm(1)=even
0be6c                 | '   harm(2)=odd
0be6c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0be6c     3C 4E 85 F1 | 	sub	fp, #60
0be70     A7 06 68 FC | 	wrlong	#3, fp
0be74                 | LR__0915
0be74     A7 1A 02 FB | 	rdlong	arg05, fp
0be78     0D 25 02 F6 | 	mov	local04, arg05
0be7c     02 24 66 F0 | 	shl	local04, #2
0be80     34 4E 05 F1 | 	add	fp, #52
0be84     A7 24 02 F1 | 	add	local04, fp
0be88     02 1A 86 F1 | 	sub	arg05, #2
0be8c     02 1A 66 F0 | 	shl	arg05, #2
0be90     A7 1A 02 F1 | 	add	arg05, fp
0be94     0D 13 02 FB | 	rdlong	arg01, arg05
0be98     24 4E 85 F1 | 	sub	fp, #36
0be9c     A7 14 02 FB | 	rdlong	arg02, fp
0bea0     14 4E 85 F1 | 	sub	fp, #20
0bea4     28 FA B0 FD | 	call	#__system___float_mul
0bea8     12 FB 61 FC | 	wrlong	result1, local04
0beac     04 4E 05 F1 | 	add	fp, #4
0beb0     A7 26 02 FB | 	rdlong	local05, fp
0beb4     02 26 06 F1 | 	add	local05, #2
0beb8     A7 26 62 FC | 	wrlong	local05, fp
0bebc     10 26 56 F2 | 	cmps	local05, #16 wc
0bec0     B0 FF 9F CD |  if_b	jmp	#LR__0915
0bec4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0bec4     A7 08 68 FC | 	wrlong	#4, fp
0bec8                 | LR__0916
0bec8     A7 26 02 FB | 	rdlong	local05, fp
0becc     13 25 02 F6 | 	mov	local04, local05
0bed0     02 24 66 F0 | 	shl	local04, #2
0bed4     34 4E 05 F1 | 	add	fp, #52
0bed8     A7 24 02 F1 | 	add	local04, fp
0bedc     02 26 86 F1 | 	sub	local05, #2
0bee0     02 26 66 F0 | 	shl	local05, #2
0bee4     A7 26 02 F1 | 	add	local05, fp
0bee8     13 13 02 FB | 	rdlong	arg01, local05
0beec     20 4E 85 F1 | 	sub	fp, #32
0bef0     A7 14 02 FB | 	rdlong	arg02, fp
0bef4     18 4E 85 F1 | 	sub	fp, #24
0bef8     D4 F9 B0 FD | 	call	#__system___float_mul
0befc     12 FB 61 FC | 	wrlong	result1, local04
0bf00     04 4E 05 F1 | 	add	fp, #4
0bf04     A7 26 02 FB | 	rdlong	local05, fp
0bf08     02 26 06 F1 | 	add	local05, #2
0bf0c     A7 26 62 FC | 	wrlong	local05, fp
0bf10     0F 26 56 F2 | 	cmps	local05, #15 wc
0bf14     B0 FF 9F CD |  if_b	jmp	#LR__0916
0bf18     04 4E 85 F1 | 	sub	fp, #4
0bf1c                 | LR__0917
0bf1c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0bf1c     38 4E 05 F1 | 	add	fp, #56
0bf20     A7 12 02 FB | 	rdlong	arg01, fp
0bf24     38 4E 85 F1 | 	sub	fp, #56
0bf28     00 14 06 F6 | 	mov	arg02, #0
0bf2c     01 16 66 F6 | 	neg	arg03, #1
0bf30     D0 FD B0 FD | 	call	#__system___float_cmp
0bf34     00 FA 55 F2 | 	cmps	result1, #0 wc
0bf38     B0 02 90 CD |  if_b	jmp	#LR__0923
0bf3c                 | '   for i=0 to 1023
0bf3c     04 4E 05 F1 | 	add	fp, #4
0bf40     A7 00 68 FC | 	wrlong	#0, fp
0bf44     04 4E 85 F1 | 	sub	fp, #4
0bf48                 | LR__0918
0bf48     20 4E 05 F1 | 	add	fp, #32
0bf4c     A7 00 68 FC | 	wrlong	#0, fp
0bf50                 | '     spl=0
0bf50                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0bf50     18 4E 85 F1 | 	sub	fp, #24
0bf54     A7 00 68 FC | 	wrlong	#0, fp
0bf58                 | LR__0919
0bf58     A7 24 02 FB | 	rdlong	local04, fp
0bf5c     02 24 66 F0 | 	shl	local04, #2
0bf60     30 4E 05 F1 | 	add	fp, #48
0bf64     A7 24 02 F1 | 	add	local04, fp
0bf68     12 27 02 FB | 	rdlong	local05, local04
0bf6c     87 E4 1D FF 
0bf70     DB 25 06 F6 | 	mov	local04, ##1003032539
0bf74     34 4E 85 F1 | 	sub	fp, #52
0bf78     A7 12 02 FB | 	rdlong	arg01, fp
0bf7c     04 4E 85 F1 | 	sub	fp, #4
0bf80     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf84     1F 22 C6 C9 |  if_b	decod	local03, #31
0bf88     00 22 06 36 |  if_ae	mov	local03, #0
0bf8c     3C F5 B0 FD | 	call	#__system___float_fromuns
0bf90     11 FB 61 F5 | 	xor	result1, local03
0bf94     FD 14 02 F6 | 	mov	arg02, result1
0bf98     12 13 02 F6 | 	mov	arg01, local04
0bf9c     30 F9 B0 FD | 	call	#__system___float_mul
0bfa0     FD 24 02 F6 | 	mov	local04, result1
0bfa4     08 4E 05 F1 | 	add	fp, #8
0bfa8     A7 12 02 FB | 	rdlong	arg01, fp
0bfac     08 4E 85 F1 | 	sub	fp, #8
0bfb0     01 12 06 F1 | 	add	arg01, #1
0bfb4     09 13 52 F6 | 	abs	arg01, arg01 wc
0bfb8     1F 22 C6 C9 |  if_b	decod	local03, #31
0bfbc     00 22 06 36 |  if_ae	mov	local03, #0
0bfc0     08 F5 B0 FD | 	call	#__system___float_fromuns
0bfc4     11 FB 61 F5 | 	xor	result1, local03
0bfc8     FD 14 02 F6 | 	mov	arg02, result1
0bfcc     12 13 02 F6 | 	mov	arg01, local04
0bfd0     FC F8 B0 FD | 	call	#__system___float_mul
0bfd4     FD 12 02 F6 | 	mov	arg01, result1
0bfd8     30 02 B1 FD | 	call	#__system____builtin_sinf
0bfdc     FD 14 02 F6 | 	mov	arg02, result1
0bfe0     13 13 02 F6 | 	mov	arg01, local05
0bfe4     E8 F8 B0 FD | 	call	#__system___float_mul
0bfe8     FD 14 02 F6 | 	mov	arg02, result1
0bfec     20 4E 05 F1 | 	add	fp, #32
0bff0     A7 12 02 FB | 	rdlong	arg01, fp
0bff4     20 4E 85 F1 | 	sub	fp, #32
0bff8     04 F5 B0 FD | 	call	#__system___float_add
0bffc     20 4E 05 F1 | 	add	fp, #32
0c000     A7 FA 61 FC | 	wrlong	result1, fp
0c004     18 4E 85 F1 | 	sub	fp, #24
0c008     A7 16 02 FB | 	rdlong	arg03, fp
0c00c     01 16 06 F1 | 	add	arg03, #1
0c010     A7 16 62 FC | 	wrlong	arg03, fp
0c014     10 16 56 F2 | 	cmps	arg03, #16 wc
0c018     3C FF 9F CD |  if_b	jmp	#LR__0919
0c01c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0c01c     18 4E 05 F1 | 	add	fp, #24
0c020     A7 12 02 FB | 	rdlong	arg01, fp
0c024     1F 12 06 F4 | 	bitl	arg01, #31
0c028     04 4E 85 F1 | 	sub	fp, #4
0c02c     A7 14 02 FB | 	rdlong	arg02, fp
0c030     1C 4E 85 F1 | 	sub	fp, #28
0c034     01 16 66 F6 | 	neg	arg03, #1
0c038     C8 FC B0 FD | 	call	#__system___float_cmp
0c03c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c040     18 00 90 CD |  if_b	jmp	#LR__0920
0c044     20 4E 05 F1 | 	add	fp, #32
0c048     A7 FA 01 FB | 	rdlong	result1, fp
0c04c     1F FA 05 F4 | 	bitl	result1, #31
0c050     04 4E 85 F1 | 	sub	fp, #4
0c054     A7 FA 61 FC | 	wrlong	result1, fp
0c058     1C 4E 85 F1 | 	sub	fp, #28
0c05c                 | LR__0920
0c05c     04 4E 05 F1 | 	add	fp, #4
0c060     A7 26 02 FB | 	rdlong	local05, fp
0c064     01 26 06 F1 | 	add	local05, #1
0c068     A7 26 62 FC | 	wrlong	local05, fp
0c06c     04 4E 85 F1 | 	sub	fp, #4
0c070     02 00 00 FF 
0c074     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c078     CC FE 9F CD |  if_b	jmp	#LR__0918
0c07c                 | '   for i=0 to 1023
0c07c     04 4E 05 F1 | 	add	fp, #4
0c080     A7 00 68 FC | 	wrlong	#0, fp
0c084     04 4E 85 F1 | 	sub	fp, #4
0c088                 | LR__0921
0c088     20 4E 05 F1 | 	add	fp, #32
0c08c     A7 00 68 FC | 	wrlong	#0, fp
0c090                 | '     spl=0
0c090                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0c090     18 4E 85 F1 | 	sub	fp, #24
0c094     A7 00 68 FC | 	wrlong	#0, fp
0c098                 | LR__0922
0c098     A7 26 02 FB | 	rdlong	local05, fp
0c09c     02 26 66 F0 | 	shl	local05, #2
0c0a0     30 4E 05 F1 | 	add	fp, #48
0c0a4     A7 26 02 F1 | 	add	local05, fp
0c0a8     13 27 02 FB | 	rdlong	local05, local05
0c0ac     1C 4E 85 F1 | 	sub	fp, #28
0c0b0     A7 14 02 FB | 	rdlong	arg02, fp
0c0b4     1C 4E 85 F1 | 	sub	fp, #28
0c0b8     58 7F 23 FF 
0c0bc     00 12 06 F6 | 	mov	arg01, ##1191096320
0c0c0     10 FA B0 FD | 	call	#__system___float_div
0c0c4     FD 14 02 F6 | 	mov	arg02, result1
0c0c8     13 13 02 F6 | 	mov	arg01, local05
0c0cc     00 F8 B0 FD | 	call	#__system___float_mul
0c0d0     FD 26 02 F6 | 	mov	local05, result1
0c0d4     87 E4 1D FF 
0c0d8     DB 25 06 F6 | 	mov	local04, ##1003032539
0c0dc     04 4E 05 F1 | 	add	fp, #4
0c0e0     A7 12 02 FB | 	rdlong	arg01, fp
0c0e4     04 4E 85 F1 | 	sub	fp, #4
0c0e8     09 13 52 F6 | 	abs	arg01, arg01 wc
0c0ec     1F 22 C6 C9 |  if_b	decod	local03, #31
0c0f0     00 22 06 36 |  if_ae	mov	local03, #0
0c0f4     D4 F3 B0 FD | 	call	#__system___float_fromuns
0c0f8     11 FB 61 F5 | 	xor	result1, local03
0c0fc     FD 14 02 F6 | 	mov	arg02, result1
0c100     12 13 02 F6 | 	mov	arg01, local04
0c104     C8 F7 B0 FD | 	call	#__system___float_mul
0c108     FD 24 02 F6 | 	mov	local04, result1
0c10c     08 4E 05 F1 | 	add	fp, #8
0c110     A7 12 02 FB | 	rdlong	arg01, fp
0c114     08 4E 85 F1 | 	sub	fp, #8
0c118     01 12 06 F1 | 	add	arg01, #1
0c11c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c120     1F 22 C6 C9 |  if_b	decod	local03, #31
0c124     00 22 06 36 |  if_ae	mov	local03, #0
0c128     A0 F3 B0 FD | 	call	#__system___float_fromuns
0c12c     11 FB 61 F5 | 	xor	result1, local03
0c130     FD 14 02 F6 | 	mov	arg02, result1
0c134     12 13 02 F6 | 	mov	arg01, local04
0c138     94 F7 B0 FD | 	call	#__system___float_mul
0c13c     FD 12 02 F6 | 	mov	arg01, result1
0c140     C8 00 B1 FD | 	call	#__system____builtin_sinf
0c144     FD 14 02 F6 | 	mov	arg02, result1
0c148     13 13 02 F6 | 	mov	arg01, local05
0c14c     80 F7 B0 FD | 	call	#__system___float_mul
0c150     FD 14 02 F6 | 	mov	arg02, result1
0c154     20 4E 05 F1 | 	add	fp, #32
0c158     A7 12 02 FB | 	rdlong	arg01, fp
0c15c     20 4E 85 F1 | 	sub	fp, #32
0c160     9C F3 B0 FD | 	call	#__system___float_add
0c164     20 4E 05 F1 | 	add	fp, #32
0c168     A7 FA 61 FC | 	wrlong	result1, fp
0c16c     18 4E 85 F1 | 	sub	fp, #24
0c170     A7 26 02 FB | 	rdlong	local05, fp
0c174     01 26 06 F1 | 	add	local05, #1
0c178     A7 26 62 FC | 	wrlong	local05, fp
0c17c     10 26 56 F2 | 	cmps	local05, #16 wc
0c180     14 FF 9F CD |  if_b	jmp	#LR__0922
0c184     08 4E 05 F1 | 	add	fp, #8
0c188     A7 26 02 FB | 	rdlong	local05, fp
0c18c     0B 26 66 F0 | 	shl	local05, #11
0c190     0C 00 00 FF 
0c194     CC E4 05 F1 | 	add	objptr, ##6348
0c198     F2 26 02 F1 | 	add	local05, objptr
0c19c     0C 4E 85 F1 | 	sub	fp, #12
0c1a0     A7 20 02 FB | 	rdlong	local02, fp
0c1a4     01 20 66 F0 | 	shl	local02, #1
0c1a8     13 21 02 F1 | 	add	local02, local05
0c1ac     1C 4E 05 F1 | 	add	fp, #28
0c1b0     A7 12 02 FB | 	rdlong	arg01, fp
0c1b4     20 4E 85 F1 | 	sub	fp, #32
0c1b8     0C 00 00 FF 
0c1bc     CC E4 85 F1 | 	sub	objptr, ##6348
0c1c0     01 14 06 F6 | 	mov	arg02, #1
0c1c4     D0 FB B0 FD | 	call	#__system___float_tointeger
0c1c8     10 FB 51 FC | 	wrword	result1, local02
0c1cc     04 4E 05 F1 | 	add	fp, #4
0c1d0     A7 26 02 FB | 	rdlong	local05, fp
0c1d4     01 26 06 F1 | 	add	local05, #1
0c1d8     A7 26 62 FC | 	wrlong	local05, fp
0c1dc     04 4E 85 F1 | 	sub	fp, #4
0c1e0     02 00 00 FF 
0c1e4     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c1e8     9C FE 9F CD |  if_b	jmp	#LR__0921
0c1ec                 | LR__0923
0c1ec                 | LR__0924
0c1ec     A7 F0 03 F6 | 	mov	ptra, fp
0c1f0     B2 00 A0 FD | 	call	#popregs_
0c1f4                 | _do_defsnd_ret
0c1f4     2D 00 64 FD | 	ret
0c1f8                 | 
0c1f8                 | ' 
0c1f8                 | ' ' ---------------  List the program. 
0c1f8                 | ' 
0c1f8                 | ' sub do_list
0c1f8                 | _do_list
0c1f8     02 4A 05 F6 | 	mov	COUNT_, #2
0c1fc     A8 00 A0 FD | 	call	#pushregs_
0c200     B8 F0 07 F1 | 	add	ptra, #184
0c204     04 4E 05 F1 | 	add	fp, #4
0c208     A7 00 68 FC | 	wrlong	#0, fp
0c20c     04 4E 05 F1 | 	add	fp, #4
0c210     FF FF BF FF 
0c214     A7 FE 6B FC | 	wrlong	##2147483647, fp
0c218     08 4E 85 F1 | 	sub	fp, #8
0c21c     69 00 00 FF 
0c220     54 E5 05 F1 | 	add	objptr, ##54100
0c224     F2 1E 02 FB | 	rdlong	local01, objptr
0c228     0F 17 02 F6 | 	mov	arg03, local01
0c22c     01 16 66 F0 | 	shl	arg03, #1
0c230     0F 17 02 F1 | 	add	arg03, local01
0c234     02 16 66 F0 | 	shl	arg03, #2
0c238     03 00 00 FF 
0c23c     04 E4 85 F1 | 	sub	objptr, ##1540
0c240     F2 16 02 F1 | 	add	arg03, objptr
0c244     0B 17 02 FB | 	rdlong	arg03, arg03
0c248     A7 16 62 FC | 	wrlong	arg03, fp
0c24c                 | ' 
0c24c                 | ' startline=0 : endline=$7FFFFFFF
0c24c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c24c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0c24c     01 16 0E F2 | 	cmp	arg03, #1 wz
0c250     66 00 00 FF 
0c254     50 E5 85 F1 | 	sub	objptr, ##52560
0c258     3C 00 90 5D |  if_ne	jmp	#LR__0930
0c25c     90 D6 BF FD | 	call	#_pop
0c260     FF 1E 02 F6 | 	mov	local01, result3
0c264     0C 4E 05 F1 | 	add	fp, #12
0c268     A7 FA 61 FC | 	wrlong	result1, fp
0c26c     04 4E 05 F1 | 	add	fp, #4
0c270     A7 FC 61 FC | 	wrlong	result2, fp
0c274     04 4E 05 F1 | 	add	fp, #4
0c278     A7 1E 62 FC | 	wrlong	local01, fp
0c27c     08 4E 85 F1 | 	sub	fp, #8
0c280     A7 12 02 F6 | 	mov	arg01, fp
0c284     0C 4E 85 F1 | 	sub	fp, #12
0c288     D4 4B B0 FD | 	call	#_converttoint
0c28c     04 4E 05 F1 | 	add	fp, #4
0c290     A7 FA 61 FC | 	wrlong	result1, fp
0c294     04 4E 85 F1 | 	sub	fp, #4
0c298                 | LR__0930
0c298                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0c298     A7 16 02 FB | 	rdlong	arg03, fp
0c29c     02 16 0E F2 | 	cmp	arg03, #2 wz
0c2a0     7C 00 90 5D |  if_ne	jmp	#LR__0931
0c2a4     48 D6 BF FD | 	call	#_pop
0c2a8     FF 1E 02 F6 | 	mov	local01, result3
0c2ac     0C 4E 05 F1 | 	add	fp, #12
0c2b0     A7 FA 61 FC | 	wrlong	result1, fp
0c2b4     04 4E 05 F1 | 	add	fp, #4
0c2b8     A7 FC 61 FC | 	wrlong	result2, fp
0c2bc     04 4E 05 F1 | 	add	fp, #4
0c2c0     A7 1E 62 FC | 	wrlong	local01, fp
0c2c4     08 4E 85 F1 | 	sub	fp, #8
0c2c8     A7 12 02 F6 | 	mov	arg01, fp
0c2cc     0C 4E 85 F1 | 	sub	fp, #12
0c2d0     8C 4B B0 FD | 	call	#_converttoint
0c2d4     FD 1E 02 F6 | 	mov	local01, result1
0c2d8     08 4E 05 F1 | 	add	fp, #8
0c2dc     A7 1E 62 FC | 	wrlong	local01, fp
0c2e0     08 4E 85 F1 | 	sub	fp, #8
0c2e4     08 D6 BF FD | 	call	#_pop
0c2e8     FF 1E 02 F6 | 	mov	local01, result3
0c2ec     0C 4E 05 F1 | 	add	fp, #12
0c2f0     A7 FA 61 FC | 	wrlong	result1, fp
0c2f4     04 4E 05 F1 | 	add	fp, #4
0c2f8     A7 FC 61 FC | 	wrlong	result2, fp
0c2fc     04 4E 05 F1 | 	add	fp, #4
0c300     A7 1E 62 FC | 	wrlong	local01, fp
0c304     08 4E 85 F1 | 	sub	fp, #8
0c308     A7 12 02 F6 | 	mov	arg01, fp
0c30c     0C 4E 85 F1 | 	sub	fp, #12
0c310     4C 4B B0 FD | 	call	#_converttoint
0c314     04 4E 05 F1 | 	add	fp, #4
0c318     A7 FA 61 FC | 	wrlong	result1, fp
0c31c     04 4E 85 F1 | 	sub	fp, #4
0c320                 | LR__0931
0c320                 | ' 
0c320                 | ' 
0c320                 | ' print
0c320     00 12 06 F6 | 	mov	arg01, #0
0c324     C0 23 B1 FD | 	call	#__system___getiolock_0423
0c328     FD 12 02 F6 | 	mov	arg01, result1
0c32c     B4 CA B0 FD | 	call	#__system___lockmem
0c330     00 12 06 F6 | 	mov	arg01, #0
0c334     0A 14 06 F6 | 	mov	arg02, #10
0c338     00 16 06 F6 | 	mov	arg03, #0
0c33c     40 D7 B0 FD | 	call	#__system___basic_print_char
0c340     00 12 06 F6 | 	mov	arg01, #0
0c344     A0 23 B1 FD | 	call	#__system___getiolock_0423
0c348     FD 00 68 FC | 	wrlong	#0, result1
0c34c     69 00 00 FF 
0c350     58 E5 05 F1 | 	add	objptr, ##54104
0c354     F2 20 02 FB | 	rdlong	local02, objptr
0c358     11 00 00 FF 
0c35c     74 E4 05 F1 | 	add	objptr, ##8820
0c360     F2 20 62 FC | 	wrlong	local02, objptr
0c364     7A 00 00 FF 
0c368     CC E5 85 F1 | 	sub	objptr, ##62924
0c36c                 | ' do 
0c36c                 | LR__0932
0c36c     20 4E 05 F1 | 	add	fp, #32
0c370     A7 12 02 F6 | 	mov	arg01, fp
0c374     20 4E 85 F1 | 	sub	fp, #32
0c378     7A 00 00 FF 
0c37c     CC E5 05 F1 | 	add	objptr, ##62924
0c380     F2 14 02 FB | 	rdlong	arg02, objptr
0c384     18 16 06 F6 | 	mov	arg03, #24
0c388     6F 00 00 FF 
0c38c     0C E5 85 F1 | 	sub	objptr, ##57100
0c390     00 BF B0 FD | 	call	#_psram_spin2_read1
0c394     0B 00 00 FF 
0c398     C0 E4 85 F1 | 	sub	objptr, ##5824
0c39c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0c39c                 | '   
0c39c                 | '   if header(0)<> $FFFFFFFF then
0c39c     20 4E 05 F1 | 	add	fp, #32
0c3a0     A7 20 02 FB | 	rdlong	local02, fp
0c3a4     20 4E 85 F1 | 	sub	fp, #32
0c3a8     FF FF 7F FF 
0c3ac     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0c3b0     A8 00 90 AD |  if_e	jmp	#LR__0934
0c3b4     38 4E 05 F1 | 	add	fp, #56
0c3b8     3F 16 06 F6 | 	mov	arg03, #63
0c3bc     28 16 62 FD | 	setq	arg03
0c3c0     A7 00 68 FC | 	wrlong	#0, fp
0c3c4     A7 12 02 F6 | 	mov	arg01, fp
0c3c8     10 4E 85 F1 | 	sub	fp, #16
0c3cc     A7 14 02 FB | 	rdlong	arg02, fp
0c3d0     04 4E 05 F1 | 	add	fp, #4
0c3d4     A7 16 02 FB | 	rdlong	arg03, fp
0c3d8     2C 4E 85 F1 | 	sub	fp, #44
0c3dc     0B 00 00 FF 
0c3e0     C0 E4 05 F1 | 	add	objptr, ##5824
0c3e4     AC BE B0 FD | 	call	#_psram_spin2_read1
0c3e8     0B 00 00 FF 
0c3ec     C0 E4 85 F1 | 	sub	objptr, ##5824
0c3f0                 | '     longfill(linebuf,0,64)
0c3f0                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0c3f0                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0c3f0     20 4E 05 F1 | 	add	fp, #32
0c3f4     A7 20 02 FB | 	rdlong	local02, fp
0c3f8     1C 4E 85 F1 | 	sub	fp, #28
0c3fc     A7 1E 02 FB | 	rdlong	local01, fp
0c400     04 4E 85 F1 | 	sub	fp, #4
0c404     0F 21 52 F2 | 	cmps	local02, local01 wc
0c408     30 00 90 CD |  if_b	jmp	#LR__0933
0c40c     20 4E 05 F1 | 	add	fp, #32
0c410     A7 20 02 FB | 	rdlong	local02, fp
0c414     18 4E 85 F1 | 	sub	fp, #24
0c418     A7 16 02 FB | 	rdlong	arg03, fp
0c41c     08 4E 85 F1 | 	sub	fp, #8
0c420     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0c424     14 00 90 1D |  if_a	jmp	#LR__0933
0c428     38 4E 05 F1 | 	add	fp, #56
0c42c     A7 12 02 F6 | 	mov	arg01, fp
0c430     38 4E 85 F1 | 	sub	fp, #56
0c434                 | ' 
0c434                 | ' write(text)
0c434     24 B9 B0 FD | 	call	#_hg010b_spin2_write
0c438                 | ' crlf
0c438     80 BA B0 FD | 	call	#_hg010b_spin2_crlf
0c43c                 | LR__0933
0c43c     34 4E 05 F1 | 	add	fp, #52
0c440     A7 20 02 FB | 	rdlong	local02, fp
0c444     34 4E 85 F1 | 	sub	fp, #52
0c448     7A 00 00 FF 
0c44c     CC E5 05 F1 | 	add	objptr, ##62924
0c450     F2 20 62 FC | 	wrlong	local02, objptr
0c454     7A 00 00 FF 
0c458     CC E5 85 F1 | 	sub	objptr, ##62924
0c45c                 | LR__0934
0c45c     34 4E 05 F1 | 	add	fp, #52
0c460     A7 20 02 FB | 	rdlong	local02, fp
0c464     34 4E 85 F1 | 	sub	fp, #52
0c468     FF FF 3F FF 
0c46c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c470     20 4E 05 51 |  if_ne	add	fp, #32
0c474     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c478     20 4E 85 51 |  if_ne	sub	fp, #32
0c47c     FF FF 7F 5F 
0c480     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c484     E4 FE 9F 5D |  if_ne	jmp	#LR__0932
0c488     A7 F0 03 F6 | 	mov	ptra, fp
0c48c     B2 00 A0 FD | 	call	#popregs_
0c490                 | _do_list_ret
0c490     2D 00 64 FD | 	ret
0c494                 | 
0c494                 | ' 
0c494                 | ' '---------------- Clear the program
0c494                 | ' 
0c494                 | ' sub do_new
0c494                 | _do_new
0c494     03 4A 05 F6 | 	mov	COUNT_, #3
0c498     A8 00 A0 FD | 	call	#pushregs_
0c49c     00 12 06 F6 | 	mov	arg01, #0
0c4a0     01 14 66 F6 | 	neg	arg02, #1
0c4a4     01 16 06 F6 | 	mov	arg03, #1
0c4a8     00 18 06 F6 | 	mov	arg04, #0
0c4ac     0B 00 00 FF 
0c4b0     C0 E4 05 F1 | 	add	objptr, ##5824
0c4b4                 | '     return fill(addr, pattern, count, listPtr, 4)
0c4b4     04 1A 06 F6 | 	mov	arg05, #4
0c4b8     10 BF B0 FD | 	call	#_psram_spin2_fill
0c4bc     49 00 00 FF 
0c4c0     1C E4 05 F1 | 	add	objptr, ##37404
0c4c4     F2 00 68 FC | 	wrlong	#0, objptr
0c4c8     15 00 00 FF 
0c4cc     7C E4 05 F1 | 	add	objptr, ##10876
0c4d0     F2 00 68 FC | 	wrlong	#0, objptr
0c4d4     0F 00 00 FF 
0c4d8     2C E5 05 F1 | 	add	objptr, ##7980
0c4dc     F2 00 68 FC | 	wrlong	#0, objptr
0c4e0     04 E4 05 F1 | 	add	objptr, #4
0c4e4     F2 00 68 FC | 	wrlong	#0, objptr
0c4e8     16 00 00 FF 
0c4ec     5C E5 85 F1 | 	sub	objptr, ##11612
0c4f0     F2 00 68 FC | 	wrlong	#0, objptr
0c4f4     07 00 00 FF 
0c4f8     24 E4 05 F1 | 	add	objptr, ##3620
0c4fc     F2 00 68 FC | 	wrlong	#0, objptr
0c500     07 00 00 FF 
0c504     20 E4 85 F1 | 	sub	objptr, ##3616
0c508     F2 00 68 FC | 	wrlong	#0, objptr
0c50c     0F 00 00 FF 
0c510     34 E4 05 F1 | 	add	objptr, ##7732
0c514     F2 00 68 FC | 	wrlong	#0, objptr
0c518     08 00 00 FF 
0c51c     08 E4 85 F1 | 	sub	objptr, ##4104
0c520     F2 00 68 FC | 	wrlong	#0, objptr
0c524     04 E4 05 F1 | 	add	objptr, #4
0c528     FF FF FF FF 
0c52c     F2 FE 6B FC | 	wrlong	##-1, objptr
0c530     0F 00 00 FF 
0c534     4C E5 05 F1 | 	add	objptr, ##8012
0c538     F2 00 68 FC | 	wrlong	#0, objptr
0c53c                 | ' 
0c53c                 | ' pslpoke(0,$FFFFFFFF)
0c53c                 | ' varnum=0
0c53c                 | ' programstart=0 :runptr=0 : runptr2=0
0c53c                 | ' stackpointer=0
0c53c                 | ' lineptr=0 
0c53c                 | ' programptr=0 : stringptr=0
0c53c                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0c53c                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0c53c     00 1E 06 F6 | 	mov	local01, #0
0c540     07 00 00 FF 
0c544     40 E5 85 F1 | 	sub	objptr, ##3904
0c548     97 16 48 FB | 	callpa	#(@LR__0941-@LR__0940)>>2,fcache_load_ptr_
0c54c                 | LR__0940
0c54c     0F 21 02 F6 | 	mov	local02, local01
0c550     02 20 66 F0 | 	shl	local02, #2
0c554     0F 21 02 F1 | 	add	local02, local01
0c558     02 20 66 F0 | 	shl	local02, #2
0c55c     F2 20 02 F1 | 	add	local02, objptr
0c560     08 20 06 F1 | 	add	local02, #8
0c564     FF FF FF FF 
0c568     10 FF 6B FC | 	wrlong	##-1, local02
0c56c     01 1E 06 F1 | 	add	local01, #1
0c570     81 1E 56 F2 | 	cmps	local01, #129 wc
0c574     D4 FF 9F CD |  if_b	jmp	#LR__0940
0c578                 | LR__0941
0c578     71 00 00 FF 
0c57c     6C E5 85 F1 | 	sub	objptr, ##58220
0c580                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0c580     00 1E 06 F6 | 	mov	local01, #0
0c584                 | LR__0942
0c584     0F 21 02 F6 | 	mov	local02, local01
0c588     02 20 66 F0 | 	shl	local02, #2
0c58c     7A 00 00 FF 
0c590     08 E5 05 F1 | 	add	objptr, ##62728
0c594     F2 20 02 F1 | 	add	local02, objptr
0c598     10 21 0A FB | 	rdlong	local02, local02 wz
0c59c     7A 00 00 FF 
0c5a0     08 E5 85 F1 | 	sub	objptr, ##62728
0c5a4     34 00 90 AD |  if_e	jmp	#LR__0943
0c5a8     0F 13 02 F6 | 	mov	arg01, local01
0c5ac     00 14 06 F6 | 	mov	arg02, #0
0c5b0     00 16 06 F6 | 	mov	arg03, #0
0c5b4     30 A8 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c5b8     0F 21 02 F6 | 	mov	local02, local01
0c5bc     02 20 66 F0 | 	shl	local02, #2
0c5c0     7A 00 00 FF 
0c5c4     08 E5 05 F1 | 	add	objptr, ##62728
0c5c8     F2 20 02 F1 | 	add	local02, objptr
0c5cc     10 13 02 FB | 	rdlong	arg01, local02
0c5d0     7A 00 00 FF 
0c5d4     08 E5 85 F1 | 	sub	objptr, ##62728
0c5d8     FC 06 B1 FD | 	call	#__system___gc_free
0c5dc                 | LR__0943
0c5dc     7A 00 00 FF 
0c5e0     5C E5 05 F1 | 	add	objptr, ##62812
0c5e4     00 C0 9F FF 
0c5e8     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c5ec     04 E4 05 F1 | 	add	objptr, #4
0c5f0     00 C0 9F FF 
0c5f4     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c5f8     7A 00 00 FF 
0c5fc     60 E5 85 F1 | 	sub	objptr, ##62816
0c600     F2 22 02 FB | 	rdlong	local03, objptr
0c604     7A 00 00 FF 
0c608     4C E5 05 F1 | 	add	objptr, ##62796
0c60c     F2 22 62 FC | 	wrlong	local03, objptr
0c610     7A 00 00 FF 
0c614     4C E5 85 F1 | 	sub	objptr, ##62796
0c618     11 12 06 F6 | 	mov	arg01, #17
0c61c     08 14 06 F6 | 	mov	arg02, #8
0c620     10 16 06 F6 | 	mov	arg03, #16
0c624     C0 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c628     10 12 06 F6 | 	mov	arg01, #16
0c62c     20 14 06 F6 | 	mov	arg02, #32
0c630     20 16 06 F6 | 	mov	arg03, #32
0c634     B0 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c638     01 1E 06 F1 | 	add	local01, #1
0c63c     10 1E 56 F2 | 	cmps	local01, #16 wc
0c640     40 FF 9F CD |  if_b	jmp	#LR__0942
0c644     A7 F0 03 F6 | 	mov	ptra, fp
0c648     B2 00 A0 FD | 	call	#popregs_
0c64c                 | _do_new_ret
0c64c     2D 00 64 FD | 	ret
0c650                 | 
0c650                 | ' 
0c650                 | ' '----------------------- goto
0c650                 | ' sub do_fast_goto
0c650                 | _do_fast_goto
0c650     02 4A 05 F6 | 	mov	COUNT_, #2
0c654     A8 00 A0 FD | 	call	#pushregs_
0c658                 | _do_fast_goto_enter
0c658     69 00 00 FF 
0c65c     54 E5 05 F1 | 	add	objptr, ##54100
0c660     F2 12 02 FB | 	rdlong	arg01, objptr
0c664     09 1F 02 F6 | 	mov	local01, arg01
0c668     01 1E 66 F0 | 	shl	local01, #1
0c66c     09 1F 02 F1 | 	add	local01, arg01
0c670     02 1E 66 F0 | 	shl	local01, #2
0c674     03 00 00 FF 
0c678     04 E4 85 F1 | 	sub	objptr, ##1540
0c67c     F2 1E 02 F1 | 	add	local01, objptr
0c680     0F 21 02 FB | 	rdlong	local02, local01
0c684     10 13 02 F6 | 	mov	arg01, local02
0c688     66 00 00 FF 
0c68c     50 E5 85 F1 | 	sub	objptr, ##52560
0c690     88 93 B0 FD | 	call	#_pslpeek
0c694     FD 12 02 F6 | 	mov	arg01, result1
0c698                 | ' 
0c698                 | ' testptr=compiledline(lineptr_e).result.uresult
0c698                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0c698                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0c698     69 00 00 FF 
0c69c     54 E5 05 F1 | 	add	objptr, ##54100
0c6a0     F2 FA 01 FB | 	rdlong	result1, objptr
0c6a4     FD 1E 02 F6 | 	mov	local01, result1
0c6a8     01 1E 66 F0 | 	shl	local01, #1
0c6ac     FD 1E 02 F1 | 	add	local01, result1
0c6b0     02 1E 66 F0 | 	shl	local01, #2
0c6b4     03 00 00 FF 
0c6b8     04 E4 85 F1 | 	sub	objptr, ##1540
0c6bc     F2 1E 02 F1 | 	add	local01, objptr
0c6c0     04 1E 06 F1 | 	add	local01, #4
0c6c4     0F 1F 02 FB | 	rdlong	local01, local01
0c6c8     0F 13 0A F2 | 	cmp	arg01, local01 wz
0c6cc     66 00 00 FF 
0c6d0     50 E5 85 F1 | 	sub	objptr, ##52560
0c6d4     58 00 90 5D |  if_ne	jmp	#LR__0950
0c6d8     79 00 00 FF 
0c6dc     84 E4 05 F1 | 	add	objptr, ##62084
0c6e0     F2 20 62 FC | 	wrlong	local02, objptr
0c6e4     0F 00 00 FF 
0c6e8     34 E5 85 F1 | 	sub	objptr, ##7988
0c6ec     F2 20 02 FB | 	rdlong	local02, objptr
0c6f0     01 20 86 F1 | 	sub	local02, #1
0c6f4     04 E4 05 F1 | 	add	objptr, #4
0c6f8     F2 20 62 FC | 	wrlong	local02, objptr
0c6fc                 | '   runptr=testptr
0c6fc                 | '   lineptr_e=lineptr-1
0c6fc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0c6fc     0F 00 00 FF 
0c700     54 E5 05 F1 | 	add	objptr, ##8020
0c704     F2 20 02 FB | 	rdlong	local02, objptr
0c708     79 00 00 FF 
0c70c     A8 E4 85 F1 | 	sub	objptr, ##62120
0c710     FF FF 3F FF 
0c714     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c718     79 00 00 AF 
0c71c     A8 E4 05 A1 |  if_e	add	objptr, ##62120
0c720     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c724     79 00 00 AF 
0c728     A8 E4 85 A1 |  if_e	sub	objptr, ##62120
0c72c     04 00 90 FD | 	jmp	#LR__0951
0c730                 | LR__0950
0c730     0C 00 B0 FD | 	call	#_do_find_goto
0c734                 | LR__0951
0c734     A7 F0 03 F6 | 	mov	ptra, fp
0c738     B2 00 A0 FD | 	call	#popregs_
0c73c                 | _do_fast_goto_ret
0c73c     2D 00 64 FD | 	ret
0c740                 | 
0c740                 | ' 
0c740                 | ' 
0c740                 | ' 
0c740                 | ' 
0c740                 | ' sub do_find_goto
0c740                 | _do_find_goto
0c740     03 4A 05 F6 | 	mov	COUNT_, #3
0c744     A8 00 A0 FD | 	call	#pushregs_
0c748     24 F0 07 F1 | 	add	ptra, #36
0c74c                 | _do_find_goto_enter
0c74c     69 00 00 FF 
0c750     54 E5 05 F1 | 	add	objptr, ##54100
0c754     F2 1E 02 FB | 	rdlong	local01, objptr
0c758     0F 21 02 F6 | 	mov	local02, local01
0c75c     01 20 66 F0 | 	shl	local02, #1
0c760     0F 21 02 F1 | 	add	local02, local01
0c764     02 20 66 F0 | 	shl	local02, #2
0c768     03 00 00 FF 
0c76c     04 E4 85 F1 | 	sub	objptr, ##1540
0c770     F2 20 02 F1 | 	add	local02, objptr
0c774     04 20 06 F1 | 	add	local02, #4
0c778     10 21 02 FB | 	rdlong	local02, local02
0c77c     A7 20 62 FC | 	wrlong	local02, fp
0c780     03 00 00 FF 
0c784     08 E4 05 F1 | 	add	objptr, ##1544
0c788     F2 22 02 FB | 	rdlong	local03, objptr
0c78c     69 00 00 FF 
0c790     58 E5 85 F1 | 	sub	objptr, ##54104
0c794     04 4E 05 F1 | 	add	fp, #4
0c798     A7 22 62 FC | 	wrlong	local03, fp
0c79c     04 4E 85 F1 | 	sub	fp, #4
0c7a0                 | ' 
0c7a0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0c7a0                 | '  ' print "find goto"                                                                     'print gotoline 
0c7a0                 | ' gotoptr=programstart
0c7a0                 | ' do
0c7a0                 | LR__0960
0c7a0     0C 4E 05 F1 | 	add	fp, #12
0c7a4     A7 12 02 F6 | 	mov	arg01, fp
0c7a8     08 4E 85 F1 | 	sub	fp, #8
0c7ac     A7 14 02 FB | 	rdlong	arg02, fp
0c7b0     04 4E 85 F1 | 	sub	fp, #4
0c7b4     18 16 06 F6 | 	mov	arg03, #24
0c7b8     0B 00 00 FF 
0c7bc     C0 E4 05 F1 | 	add	objptr, ##5824
0c7c0     D0 BA B0 FD | 	call	#_psram_spin2_read1
0c7c4     0B 00 00 FF 
0c7c8     C0 E4 85 F1 | 	sub	objptr, ##5824
0c7cc                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0c7cc                 | '   if gotoheader(0)<>$FFFFFFFF then
0c7cc     0C 4E 05 F1 | 	add	fp, #12
0c7d0     A7 22 02 FB | 	rdlong	local03, fp
0c7d4     0C 4E 85 F1 | 	sub	fp, #12
0c7d8     FF FF 7F FF 
0c7dc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0c7e0     24 00 90 AD |  if_e	jmp	#LR__0961
0c7e4     04 4E 05 F1 | 	add	fp, #4
0c7e8     A7 22 02 FB | 	rdlong	local03, fp
0c7ec     04 4E 05 F1 | 	add	fp, #4
0c7f0     A7 22 62 FC | 	wrlong	local03, fp
0c7f4     18 4E 05 F1 | 	add	fp, #24
0c7f8     A7 22 02 FB | 	rdlong	local03, fp
0c7fc     1C 4E 85 F1 | 	sub	fp, #28
0c800     A7 22 62 FC | 	wrlong	local03, fp
0c804     04 4E 85 F1 | 	sub	fp, #4
0c808                 | LR__0961
0c808     20 4E 05 F1 | 	add	fp, #32
0c80c     A7 22 02 FB | 	rdlong	local03, fp
0c810     20 4E 85 F1 | 	sub	fp, #32
0c814     FF FF 3F FF 
0c818     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c81c     0C 4E 05 51 |  if_ne	add	fp, #12
0c820     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c824     0C 4E 85 51 |  if_ne	sub	fp, #12
0c828     FF FF 7F 5F 
0c82c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c830     18 00 90 AD |  if_e	jmp	#LR__0962
0c834     0C 4E 05 F1 | 	add	fp, #12
0c838     A7 22 02 FB | 	rdlong	local03, fp
0c83c     0C 4E 85 F1 | 	sub	fp, #12
0c840     A7 20 02 FB | 	rdlong	local02, fp
0c844     10 23 0A F2 | 	cmp	local03, local02 wz
0c848     54 FF 9F 5D |  if_ne	jmp	#LR__0960
0c84c                 | LR__0962
0c84c                 | ' 
0c84c                 | ' if gotoheader(0)=gotoline then
0c84c     0C 4E 05 F1 | 	add	fp, #12
0c850     A7 22 02 FB | 	rdlong	local03, fp
0c854     0C 4E 85 F1 | 	sub	fp, #12
0c858     A7 1E 02 FB | 	rdlong	local01, fp
0c85c     0F 23 0A F2 | 	cmp	local03, local01 wz
0c860     D8 00 90 5D |  if_ne	jmp	#LR__0963
0c864     69 00 00 FF 
0c868     54 E5 05 F1 | 	add	objptr, ##54100
0c86c     F2 1E 02 FB | 	rdlong	local01, objptr
0c870     0F 21 02 F6 | 	mov	local02, local01
0c874     01 20 66 F0 | 	shl	local02, #1
0c878     0F 21 02 F1 | 	add	local02, local01
0c87c     02 20 66 F0 | 	shl	local02, #2
0c880     03 00 00 FF 
0c884     04 E4 85 F1 | 	sub	objptr, ##1540
0c888     F2 20 02 F1 | 	add	local02, objptr
0c88c     08 4E 05 F1 | 	add	fp, #8
0c890     A7 22 02 FB | 	rdlong	local03, fp
0c894     10 23 62 FC | 	wrlong	local03, local02
0c898     03 00 00 FF 
0c89c     04 E4 05 F1 | 	add	objptr, ##1540
0c8a0     F2 1E 02 FB | 	rdlong	local01, objptr
0c8a4     0F 21 02 F6 | 	mov	local02, local01
0c8a8     01 20 66 F0 | 	shl	local02, #1
0c8ac     0F 21 02 F1 | 	add	local02, local01
0c8b0     02 20 66 F0 | 	shl	local02, #2
0c8b4     03 00 00 FF 
0c8b8     04 E4 85 F1 | 	sub	objptr, ##1540
0c8bc     F2 20 02 F1 | 	add	local02, objptr
0c8c0     08 20 06 F1 | 	add	local02, #8
0c8c4     10 9D 68 FC | 	wrlong	#78, local02
0c8c8     03 00 00 FF 
0c8cc     04 E4 05 F1 | 	add	objptr, ##1540
0c8d0     F2 20 02 FB | 	rdlong	local02, objptr
0c8d4     10 13 02 F6 | 	mov	arg01, local02
0c8d8     01 12 66 F0 | 	shl	arg01, #1
0c8dc     10 13 02 F1 | 	add	arg01, local02
0c8e0     02 12 66 F0 | 	shl	arg01, #2
0c8e4     03 00 00 FF 
0c8e8     04 E4 85 F1 | 	sub	objptr, ##1540
0c8ec     F2 12 02 F1 | 	add	arg01, objptr
0c8f0     12 00 00 FF 
0c8f4     3C E5 05 F1 | 	add	objptr, ##9532
0c8f8     F2 14 02 FB | 	rdlong	arg02, objptr
0c8fc     02 22 06 F6 | 	mov	local03, #2
0c900     10 23 02 F1 | 	add	local03, local02
0c904     14 00 00 FF 
0c908     54 E5 85 F1 | 	sub	objptr, ##10580
0c90c     F2 16 02 FB | 	rdlong	arg03, objptr
0c910     0B 23 02 FD | 	qmul	local03, arg03
0c914     08 4E 85 F1 | 	sub	fp, #8
0c918     59 00 00 FF 
0c91c     78 E4 85 F1 | 	sub	objptr, ##45688
0c920     18 22 62 FD | 	getqx	local03
0c924     11 15 02 F1 | 	add	arg02, local03
0c928     04 BA B0 FD | 	call	#_psram_spin2_write
0c92c     0B 00 00 FF 
0c930     C0 E4 85 F1 | 	sub	objptr, ##5824
0c934     18 FD BF FD | 	call	#_do_fast_goto
0c938     08 00 90 FD | 	jmp	#LR__0964
0c93c                 | LR__0963
0c93c     26 12 06 F6 | 	mov	arg01, #38
0c940     1C 8F B0 FD | 	call	#_printerror
0c944                 | LR__0964
0c944     A7 F0 03 F6 | 	mov	ptra, fp
0c948     B2 00 A0 FD | 	call	#popregs_
0c94c                 | _do_find_goto_ret
0c94c     2D 00 64 FD | 	ret
0c950                 | 
0c950                 | ' 
0c950                 | ' sub do_slow_goto
0c950                 | _do_slow_goto
0c950                 | _do_slow_goto_ret
0c950     2D 00 64 FD | 	ret
0c954                 | 
0c954                 | ' 
0c954                 | ' '----------------------- Error processing
0c954                 | ' 
0c954                 | ' sub do_error
0c954                 | _do_error
0c954     01 4A 05 F6 | 	mov	COUNT_, #1
0c958     A8 00 A0 FD | 	call	#pushregs_
0c95c     69 00 00 FF 
0c960     54 E5 05 F1 | 	add	objptr, ##54100
0c964     F2 18 02 FB | 	rdlong	arg04, objptr
0c968     0C 17 02 F6 | 	mov	arg03, arg04
0c96c     01 16 66 F0 | 	shl	arg03, #1
0c970     0C 17 02 F1 | 	add	arg03, arg04
0c974     02 16 66 F0 | 	shl	arg03, #2
0c978     03 00 00 FF 
0c97c     04 E4 85 F1 | 	sub	objptr, ##1540
0c980     F2 16 02 F1 | 	add	arg03, objptr
0c984     0B 1F 02 FB | 	rdlong	local01, arg03
0c988                 | ' r=compiledline(lineptr_e).result.uresult
0c988                 | ' print "Error ";r;": ";errors$(r)
0c988     00 12 06 F6 | 	mov	arg01, #0
0c98c     66 00 00 FF 
0c990     50 E5 85 F1 | 	sub	objptr, ##52560
0c994     50 1D B1 FD | 	call	#__system___getiolock_0423
0c998     FD 12 02 F6 | 	mov	arg01, result1
0c99c     44 C4 B0 FD | 	call	#__system___lockmem
0c9a0     44 01 00 FF 
0c9a4     76 14 06 F6 | 	mov	arg02, ##@LR__4582
0c9a8     00 12 06 F6 | 	mov	arg01, #0
0c9ac     00 16 06 F6 | 	mov	arg03, #0
0c9b0     24 D1 B0 FD | 	call	#__system___basic_print_string
0c9b4     00 12 06 F6 | 	mov	arg01, #0
0c9b8     0F 15 02 F6 | 	mov	arg02, local01
0c9bc     00 16 06 F6 | 	mov	arg03, #0
0c9c0     0A 18 06 F6 | 	mov	arg04, #10
0c9c4     94 D1 B0 FD | 	call	#__system___basic_print_unsigned
0c9c8     44 01 00 FF 
0c9cc     7D 14 06 F6 | 	mov	arg02, ##@LR__4583
0c9d0     00 12 06 F6 | 	mov	arg01, #0
0c9d4     00 16 06 F6 | 	mov	arg03, #0
0c9d8     FC D0 B0 FD | 	call	#__system___basic_print_string
0c9dc     02 1E 66 F0 | 	shl	local01, #2
0c9e0     64 00 00 FF 
0c9e4     50 E5 05 F1 | 	add	objptr, ##51536
0c9e8     F2 1E 02 F1 | 	add	local01, objptr
0c9ec     0F 15 02 FB | 	rdlong	arg02, local01
0c9f0     00 12 06 F6 | 	mov	arg01, #0
0c9f4     00 16 06 F6 | 	mov	arg03, #0
0c9f8     64 00 00 FF 
0c9fc     50 E5 85 F1 | 	sub	objptr, ##51536
0ca00     D4 D0 B0 FD | 	call	#__system___basic_print_string
0ca04     00 12 06 F6 | 	mov	arg01, #0
0ca08     0A 14 06 F6 | 	mov	arg02, #10
0ca0c     00 16 06 F6 | 	mov	arg03, #0
0ca10     6C D0 B0 FD | 	call	#__system___basic_print_char
0ca14     00 12 06 F6 | 	mov	arg01, #0
0ca18     CC 1C B1 FD | 	call	#__system___getiolock_0423
0ca1c     FD 00 68 FC | 	wrlong	#0, result1
0ca20     A7 F0 03 F6 | 	mov	ptra, fp
0ca24     B2 00 A0 FD | 	call	#popregs_
0ca28                 | _do_error_ret
0ca28     2D 00 64 FD | 	ret
0ca2c                 | 
0ca2c                 | ' 
0ca2c                 | ' 
0ca2c                 | ' '------------------ Assigning to a variable  
0ca2c                 | ' 
0ca2c                 | ' function  convertstring(psaddr as ulong) as string
0ca2c                 | _convertstring
0ca2c     04 4A 05 F6 | 	mov	COUNT_, #4
0ca30     A8 00 A0 FD | 	call	#pushregs_
0ca34     09 1F 02 F6 | 	mov	local01, arg01
0ca38     E0 8F B0 FD | 	call	#_pslpeek
0ca3c     FD 20 02 F6 | 	mov	local02, result1
0ca40     44 01 00 FF 
0ca44     80 22 06 F6 | 	mov	local03, ##@LR__4584
0ca48                 | ' 'print "in convertstring: psaddr=";psaddr
0ca48                 | ' l=pslpeek(psaddr)
0ca48                 | ' 'print "in convertstring: len=";l
0ca48                 | ' s="" 
0ca48                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ca48     01 24 06 F6 | 	mov	local04, #1
0ca4c     01 20 06 F1 | 	add	local02, #1
0ca50                 | LR__0970
0ca50     10 25 52 F2 | 	cmps	local04, local02 wc
0ca54     30 00 90 3D |  if_ae	jmp	#LR__0971
0ca58     0F 13 02 F6 | 	mov	arg01, local01
0ca5c     03 12 06 F1 | 	add	arg01, #3
0ca60     12 13 02 F1 | 	add	arg01, local04
0ca64     5C 8F B0 FD | 	call	#_pspeek
0ca68     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ca6c     48 E5 B0 FD | 	call	#__system__Chr_S
0ca70     FD 14 02 F6 | 	mov	arg02, result1
0ca74     11 13 02 F6 | 	mov	arg01, local03
0ca78     C4 C3 B0 FD | 	call	#__system___string_concat
0ca7c     FD 22 02 F6 | 	mov	local03, result1
0ca80     01 24 06 F1 | 	add	local04, #1
0ca84     C8 FF 9F FD | 	jmp	#LR__0970
0ca88                 | LR__0971
0ca88                 | ' 'print "in convertstring: str=";s
0ca88                 | ' return s
0ca88     11 FB 01 F6 | 	mov	result1, local03
0ca8c     A7 F0 03 F6 | 	mov	ptra, fp
0ca90     B2 00 A0 FD | 	call	#popregs_
0ca94                 | _convertstring_ret
0ca94     2D 00 64 FD | 	ret
0ca98                 | 
0ca98                 | ' 
0ca98                 | ' sub do_assign
0ca98                 | _do_assign
0ca98     05 4A 05 F6 | 	mov	COUNT_, #5
0ca9c     A8 00 A0 FD | 	call	#pushregs_
0caa0     44 F0 07 F1 | 	add	ptra, #68
0caa4     69 00 00 FF 
0caa8     54 E5 05 F1 | 	add	objptr, ##54100
0caac     F2 16 02 FB | 	rdlong	arg03, objptr
0cab0     0B 15 02 F6 | 	mov	arg02, arg03
0cab4     01 14 66 F0 | 	shl	arg02, #1
0cab8     0B 15 02 F1 | 	add	arg02, arg03
0cabc     02 14 66 F0 | 	shl	arg02, #2
0cac0     03 00 00 FF 
0cac4     04 E4 85 F1 | 	sub	objptr, ##1540
0cac8     F2 14 02 F1 | 	add	arg02, objptr
0cacc     0A 15 02 FB | 	rdlong	arg02, arg02
0cad0     18 4E 05 F1 | 	add	fp, #24
0cad4     A7 14 62 FC | 	wrlong	arg02, fp
0cad8                 | ' 
0cad8                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0cad8                 | ' 
0cad8                 | ' if variables(varnum).vartype<array_no_type then 
0cad8     18 4E 85 F1 | 	sub	fp, #24
0cadc     04 14 66 F0 | 	shl	arg02, #4
0cae0     32 00 00 FF 
0cae4     74 E4 85 F1 | 	sub	objptr, ##25716
0cae8     F2 14 02 F1 | 	add	arg02, objptr
0caec     0C 14 06 F1 | 	add	arg02, #12
0caf0     0A 17 02 FB | 	rdlong	arg03, arg02
0caf4     00 17 16 F2 | 	cmp	arg03, #256 wc
0caf8     34 00 00 FF 
0cafc     DC E4 85 F1 | 	sub	objptr, ##26844
0cb00     18 01 90 3D |  if_ae	jmp	#LR__0980
0cb04     E8 CD BF FD | 	call	#_pop
0cb08     A7 FA 61 FC | 	wrlong	result1, fp
0cb0c     04 4E 05 F1 | 	add	fp, #4
0cb10     A7 FC 61 FC | 	wrlong	result2, fp
0cb14     04 4E 05 F1 | 	add	fp, #4
0cb18     A7 FE 61 FC | 	wrlong	result3, fp
0cb1c     08 4E 85 F1 | 	sub	fp, #8
0cb20     A7 16 02 FB | 	rdlong	arg03, fp
0cb24     04 4E 05 F1 | 	add	fp, #4
0cb28     A7 14 02 FB | 	rdlong	arg02, fp
0cb2c     14 4E 05 F1 | 	add	fp, #20
0cb30     A7 12 02 FB | 	rdlong	arg01, fp
0cb34     04 12 66 F0 | 	shl	arg01, #4
0cb38     34 00 00 FF 
0cb3c     DC E4 05 F1 | 	add	objptr, ##26844
0cb40     F2 12 02 F1 | 	add	arg01, objptr
0cb44     04 12 06 F1 | 	add	arg01, #4
0cb48     09 17 62 FC | 	wrlong	arg03, arg01
0cb4c     A7 16 02 FB | 	rdlong	arg03, fp
0cb50     04 16 66 F0 | 	shl	arg03, #4
0cb54     F2 16 02 F1 | 	add	arg03, objptr
0cb58     08 16 06 F1 | 	add	arg03, #8
0cb5c     0B 15 62 FC | 	wrlong	arg02, arg03
0cb60     A7 16 02 FB | 	rdlong	arg03, fp
0cb64     04 16 66 F0 | 	shl	arg03, #4
0cb68     F2 16 02 F1 | 	add	arg03, objptr
0cb6c     10 4E 85 F1 | 	sub	fp, #16
0cb70     A7 14 02 FB | 	rdlong	arg02, fp
0cb74     0C 16 06 F1 | 	add	arg03, #12
0cb78     0B 15 62 FC | 	wrlong	arg02, arg03
0cb7c                 | '   t1=pop() 
0cb7c                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0cb7c                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0cb7c                 | '   if variables(varnum).vartype<>result_string2 then return
0cb7c     10 4E 05 F1 | 	add	fp, #16
0cb80     A7 16 02 FB | 	rdlong	arg03, fp
0cb84     18 4E 85 F1 | 	sub	fp, #24
0cb88     04 16 66 F0 | 	shl	arg03, #4
0cb8c     F2 16 02 F1 | 	add	arg03, objptr
0cb90     0C 16 06 F1 | 	add	arg03, #12
0cb94     0B 17 02 FB | 	rdlong	arg03, arg03
0cb98     2B 16 0E F2 | 	cmp	arg03, #43 wz
0cb9c     34 00 00 FF 
0cba0     DC E4 85 F1 | 	sub	objptr, ##26844
0cba4     30 06 90 5D |  if_ne	jmp	#LR__1003
0cba8     18 4E 05 F1 | 	add	fp, #24
0cbac     A7 16 02 FB | 	rdlong	arg03, fp
0cbb0     0B 1F 02 F6 | 	mov	local01, arg03
0cbb4     04 1E 66 F0 | 	shl	local01, #4
0cbb8     34 00 00 FF 
0cbbc     DC E4 05 F1 | 	add	objptr, ##26844
0cbc0     F2 1E 02 F1 | 	add	local01, objptr
0cbc4     18 4E 85 F1 | 	sub	fp, #24
0cbc8     04 16 66 F0 | 	shl	arg03, #4
0cbcc     F2 16 02 F1 | 	add	arg03, objptr
0cbd0     04 16 06 F1 | 	add	arg03, #4
0cbd4     0B 13 02 FB | 	rdlong	arg01, arg03
0cbd8     34 00 00 FF 
0cbdc     DC E4 85 F1 | 	sub	objptr, ##26844
0cbe0     48 FE BF FD | 	call	#_convertstring
0cbe4     04 1E 06 F1 | 	add	local01, #4
0cbe8     0F FB 61 FC | 	wrlong	result1, local01
0cbec     18 4E 05 F1 | 	add	fp, #24
0cbf0     A7 1E 02 FB | 	rdlong	local01, fp
0cbf4     18 4E 85 F1 | 	sub	fp, #24
0cbf8     04 1E 66 F0 | 	shl	local01, #4
0cbfc     34 00 00 FF 
0cc00     DC E4 05 F1 | 	add	objptr, ##26844
0cc04     F2 1E 02 F1 | 	add	local01, objptr
0cc08     0C 1E 06 F1 | 	add	local01, #12
0cc0c     0F 3F 68 FC | 	wrlong	#31, local01
0cc10                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0cc10                 | '   variables(varnum).vartype=result_string
0cc10                 | '   return
0cc10     34 00 00 FF 
0cc14     DC E4 85 F1 | 	sub	objptr, ##26844
0cc18     BC 05 90 FD | 	jmp	#LR__1003
0cc1c                 | LR__0980
0cc1c                 | ' for i=0 to 2 : arrid(i)=0 : next i
0cc1c     1C 4E 05 F1 | 	add	fp, #28
0cc20     A7 00 68 FC | 	wrlong	#0, fp
0cc24     97 16 48 FB | 	callpa	#(@LR__0982-@LR__0981)>>2,fcache_load_ptr_
0cc28                 | LR__0981
0cc28     A7 1E 02 FB | 	rdlong	local01, fp
0cc2c     02 1E 66 F0 | 	shl	local01, #2
0cc30     18 4E 05 F1 | 	add	fp, #24
0cc34     A7 1E 02 F1 | 	add	local01, fp
0cc38     0F 01 68 FC | 	wrlong	#0, local01
0cc3c     18 4E 85 F1 | 	sub	fp, #24
0cc40     A7 1E 02 FB | 	rdlong	local01, fp
0cc44     01 1E 06 F1 | 	add	local01, #1
0cc48     A7 1E 62 FC | 	wrlong	local01, fp
0cc4c     03 1E 16 F2 | 	cmp	local01, #3 wc
0cc50     D4 FF 9F CD |  if_b	jmp	#LR__0981
0cc54                 | LR__0982
0cc54     69 00 00 FF 
0cc58     54 E5 05 F1 | 	add	objptr, ##54100
0cc5c     F2 16 02 FB | 	rdlong	arg03, objptr
0cc60     0B 1F 02 F6 | 	mov	local01, arg03
0cc64     01 1E 66 F0 | 	shl	local01, #1
0cc68     0B 1F 02 F1 | 	add	local01, arg03
0cc6c     02 1E 66 F0 | 	shl	local01, #2
0cc70     03 00 00 FF 
0cc74     04 E4 85 F1 | 	sub	objptr, ##1540
0cc78     F2 1E 02 F1 | 	add	local01, objptr
0cc7c     04 1E 06 F1 | 	add	local01, #4
0cc80     0F 21 02 FB | 	rdlong	local02, local01
0cc84     04 4E 05 F1 | 	add	fp, #4
0cc88     A7 20 62 FC | 	wrlong	local02, fp
0cc8c     20 4E 85 F1 | 	sub	fp, #32
0cc90     66 00 00 FF 
0cc94     50 E5 85 F1 | 	sub	objptr, ##52560
0cc98     54 CC BF FD | 	call	#_pop
0cc9c     A7 FA 61 FC | 	wrlong	result1, fp
0cca0     04 4E 05 F1 | 	add	fp, #4
0cca4     A7 FC 61 FC | 	wrlong	result2, fp
0cca8     04 4E 05 F1 | 	add	fp, #4
0ccac     A7 FE 61 FC | 	wrlong	result3, fp
0ccb0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0ccb0                 | ' t1=pop() ' var value
0ccb0                 | ' if numpar>0 then
0ccb0     18 4E 05 F1 | 	add	fp, #24
0ccb4     A7 22 02 FB | 	rdlong	local03, fp
0ccb8     20 4E 85 F1 | 	sub	fp, #32
0ccbc     01 22 16 F2 | 	cmp	local03, #1 wc
0ccc0     78 00 90 CD |  if_b	jmp	#LR__0985
0ccc4                 | '   for i=numpar to 1 step -1
0ccc4     20 4E 05 F1 | 	add	fp, #32
0ccc8     A7 24 0A FB | 	rdlong	local04, fp wz
0cccc     04 4E 85 F1 | 	sub	fp, #4
0ccd0     A7 24 62 FC | 	wrlong	local04, fp
0ccd4     1C 4E 85 F1 | 	sub	fp, #28
0ccd8     60 00 90 AD |  if_e	jmp	#LR__0984
0ccdc                 | LR__0983
0ccdc     10 CC BF FD | 	call	#_pop
0cce0     0C 4E 05 F1 | 	add	fp, #12
0cce4     A7 FA 61 FC | 	wrlong	result1, fp
0cce8     04 4E 05 F1 | 	add	fp, #4
0ccec     A7 FC 61 FC | 	wrlong	result2, fp
0ccf0     04 4E 05 F1 | 	add	fp, #4
0ccf4     A7 FE 61 FC | 	wrlong	result3, fp
0ccf8     08 4E 05 F1 | 	add	fp, #8
0ccfc     A7 22 02 FB | 	rdlong	local03, fp
0cd00     01 22 86 F1 | 	sub	local03, #1
0cd04     02 22 66 F0 | 	shl	local03, #2
0cd08     18 4E 05 F1 | 	add	fp, #24
0cd0c     A7 22 02 F1 | 	add	local03, fp
0cd10     28 4E 85 F1 | 	sub	fp, #40
0cd14     A7 12 02 F6 | 	mov	arg01, fp
0cd18     0C 4E 85 F1 | 	sub	fp, #12
0cd1c     40 41 B0 FD | 	call	#_converttoint
0cd20     11 FB 61 FC | 	wrlong	result1, local03
0cd24     1C 4E 05 F1 | 	add	fp, #28
0cd28     A7 24 02 FB | 	rdlong	local04, fp
0cd2c     01 24 8E F1 | 	sub	local04, #1 wz
0cd30     A7 24 62 FC | 	wrlong	local04, fp
0cd34     1C 4E 85 F1 | 	sub	fp, #28
0cd38     A0 FF 9F 5D |  if_ne	jmp	#LR__0983
0cd3c                 | LR__0984
0cd3c                 | LR__0985
0cd3c     18 4E 05 F1 | 	add	fp, #24
0cd40     A7 1E 02 FB | 	rdlong	local01, fp
0cd44     04 1E 66 F0 | 	shl	local01, #4
0cd48     34 00 00 FF 
0cd4c     DC E4 05 F1 | 	add	objptr, ##26844
0cd50     F2 1E 02 F1 | 	add	local01, objptr
0cd54     04 1E 06 F1 | 	add	local01, #4
0cd58     0F 13 02 FB | 	rdlong	arg01, local01
0cd5c     0C 4E 05 F1 | 	add	fp, #12
0cd60     A7 12 62 FC | 	wrlong	arg01, fp
0cd64     24 4E 85 F1 | 	sub	fp, #36
0cd68     34 00 00 FF 
0cd6c     DC E4 85 F1 | 	sub	objptr, ##26844
0cd70     A8 8C B0 FD | 	call	#_pslpeek
0cd74     FD 24 32 F9 | 	getword	local04, result1, #0
0cd78     28 4E 05 F1 | 	add	fp, #40
0cd7c     A7 24 62 FC | 	wrlong	local04, fp
0cd80     04 4E 85 F1 | 	sub	fp, #4
0cd84     A7 12 02 FB | 	rdlong	arg01, fp
0cd88     24 4E 85 F1 | 	sub	fp, #36
0cd8c     02 12 06 F1 | 	add	arg01, #2
0cd90     30 8C B0 FD | 	call	#_pspeek
0cd94     FD FA E1 F8 | 	getbyte	result1, result1, #0
0cd98     2C 4E 05 F1 | 	add	fp, #44
0cd9c     A7 FA 61 FC | 	wrlong	result1, fp
0cda0                 | ' esize=pspeek(arrptr+2)
0cda0                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0cda0     08 4E 85 F1 | 	sub	fp, #8
0cda4     A7 12 02 FB | 	rdlong	arg01, fp
0cda8     24 4E 85 F1 | 	sub	fp, #36
0cdac     04 12 06 F1 | 	add	arg01, #4
0cdb0     68 8C B0 FD | 	call	#_pslpeek
0cdb4     FD 24 02 F6 | 	mov	local04, result1
0cdb8     34 4E 05 F1 | 	add	fp, #52
0cdbc     A7 1E 02 FB | 	rdlong	local01, fp
0cdc0     34 4E 85 F1 | 	sub	fp, #52
0cdc4     12 1F 12 F2 | 	cmp	local01, local04 wc
0cdc8     54 00 90 3D |  if_ae	jmp	#LR__0986
0cdcc     24 4E 05 F1 | 	add	fp, #36
0cdd0     A7 12 02 FB | 	rdlong	arg01, fp
0cdd4     24 4E 85 F1 | 	sub	fp, #36
0cdd8     08 12 06 F1 | 	add	arg01, #8
0cddc     3C 8C B0 FD | 	call	#_pslpeek
0cde0     FD 1E 02 F6 | 	mov	local01, result1
0cde4     38 4E 05 F1 | 	add	fp, #56
0cde8     A7 24 02 FB | 	rdlong	local04, fp
0cdec     38 4E 85 F1 | 	sub	fp, #56
0cdf0     0F 25 12 F2 | 	cmp	local04, local01 wc
0cdf4     28 00 90 3D |  if_ae	jmp	#LR__0986
0cdf8     24 4E 05 F1 | 	add	fp, #36
0cdfc     A7 12 02 FB | 	rdlong	arg01, fp
0ce00     24 4E 85 F1 | 	sub	fp, #36
0ce04     0C 12 06 F1 | 	add	arg01, #12
0ce08     10 8C B0 FD | 	call	#_pslpeek
0ce0c     3C 4E 05 F1 | 	add	fp, #60
0ce10     A7 24 02 FB | 	rdlong	local04, fp
0ce14     3C 4E 85 F1 | 	sub	fp, #60
0ce18     FD 24 12 F2 | 	cmp	local04, result1 wc
0ce1c     0C 00 90 CD |  if_b	jmp	#LR__0987
0ce20                 | LR__0986
0ce20     31 12 06 F6 | 	mov	arg01, #49
0ce24     38 8A B0 FD | 	call	#_printerror
0ce28     AC 03 90 FD | 	jmp	#LR__1003
0ce2c                 | LR__0987
0ce2c     24 4E 05 F1 | 	add	fp, #36
0ce30     A7 12 02 FB | 	rdlong	arg01, fp
0ce34     09 25 02 F6 | 	mov	local04, arg01
0ce38     10 24 06 F1 | 	add	local04, #16
0ce3c     24 4E 85 F1 | 	sub	fp, #36
0ce40     04 12 06 F1 | 	add	arg01, #4
0ce44     D4 8B B0 FD | 	call	#_pslpeek
0ce48     FD 1E 02 F6 | 	mov	local01, result1
0ce4c     38 4E 05 F1 | 	add	fp, #56
0ce50     A7 20 02 FB | 	rdlong	local02, fp
0ce54     10 1F 02 FD | 	qmul	local01, local02
0ce58     04 4E 85 F1 | 	sub	fp, #4
0ce5c     A7 22 02 FB | 	rdlong	local03, fp
0ce60     10 4E 85 F1 | 	sub	fp, #16
0ce64     A7 12 02 FB | 	rdlong	arg01, fp
0ce68     24 4E 85 F1 | 	sub	fp, #36
0ce6c     08 12 06 F1 | 	add	arg01, #8
0ce70     18 20 62 FD | 	getqx	local02
0ce74     10 23 02 F1 | 	add	local03, local02
0ce78     A0 8B B0 FD | 	call	#_pslpeek
0ce7c     FD 20 02 F6 | 	mov	local02, result1
0ce80     24 4E 05 F1 | 	add	fp, #36
0ce84     A7 12 02 FB | 	rdlong	arg01, fp
0ce88     24 4E 85 F1 | 	sub	fp, #36
0ce8c     04 12 06 F1 | 	add	arg01, #4
0ce90     88 8B B0 FD | 	call	#_pslpeek
0ce94     FD 20 02 FD | 	qmul	local02, result1
0ce98     3C 4E 05 F1 | 	add	fp, #60
0ce9c     A7 20 02 FB | 	rdlong	local02, fp
0cea0     18 1E 62 FD | 	getqx	local01
0cea4     10 1F 02 FD | 	qmul	local01, local02
0cea8     10 4E 85 F1 | 	sub	fp, #16
0ceac     A7 20 02 FB | 	rdlong	local02, fp
0ceb0     18 1E 62 FD | 	getqx	local01
0ceb4     0F 23 02 F1 | 	add	local03, local01
0ceb8     11 21 02 FD | 	qmul	local02, local03
0cebc     04 4E 05 F1 | 	add	fp, #4
0cec0                 | ' 
0cec0                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0cec0                 | ' select case arrtype
0cec0     18 22 62 FD | 	getqx	local03
0cec4     11 25 02 F1 | 	add	local04, local03
0cec8     A7 24 62 FC | 	wrlong	local04, fp
0cecc     08 4E 85 F1 | 	sub	fp, #8
0ced0     A7 26 02 FB | 	rdlong	local05, fp
0ced4     28 4E 85 F1 | 	sub	fp, #40
0ced8     00 27 86 F1 | 	sub	local05, #256
0cedc     0C 26 26 F3 | 	fle	local05, #12
0cee0     30 26 62 FD | 	jmprel	local05
0cee4                 | LR__0988
0cee4     30 00 90 FD | 	jmp	#LR__0989
0cee8     58 00 90 FD | 	jmp	#LR__0990
0ceec     88 00 90 FD | 	jmp	#LR__0991
0cef0     B8 00 90 FD | 	jmp	#LR__0992
0cef4     10 01 90 FD | 	jmp	#LR__0993
0cef8     68 01 90 FD | 	jmp	#LR__0994
0cefc     98 01 90 FD | 	jmp	#LR__0995
0cf00     C8 01 90 FD | 	jmp	#LR__0996
0cf04     F8 01 90 FD | 	jmp	#LR__0997
0cf08     28 02 90 FD | 	jmp	#LR__0998
0cf0c     58 02 90 FD | 	jmp	#LR__0999
0cf10     88 02 90 FD | 	jmp	#LR__1000
0cf14     B8 02 90 FD | 	jmp	#LR__1001
0cf18                 | LR__0989
0cf18     A7 12 02 F6 | 	mov	arg01, fp
0cf1c     30 4E 05 F1 | 	add	fp, #48
0cf20     A7 14 02 FB | 	rdlong	arg02, fp
0cf24     30 4E 85 F1 | 	sub	fp, #48
0cf28     0C 16 06 F6 | 	mov	arg03, #12
0cf2c     0B 00 00 FF 
0cf30     C0 E4 05 F1 | 	add	objptr, ##5824
0cf34     F8 B3 B0 FD | 	call	#_psram_spin2_write
0cf38     0B 00 00 FF 
0cf3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf40     94 02 90 FD | 	jmp	#LR__1002
0cf44                 | LR__0990
0cf44     30 4E 05 F1 | 	add	fp, #48
0cf48     A7 12 02 FB | 	rdlong	arg01, fp
0cf4c     30 4E 85 F1 | 	sub	fp, #48
0cf50     A7 14 02 FB | 	rdlong	arg02, fp
0cf54     01 16 06 F6 | 	mov	arg03, #1
0cf58     00 18 06 F6 | 	mov	arg04, #0
0cf5c     0B 00 00 FF 
0cf60     C0 E4 05 F1 | 	add	objptr, ##5824
0cf64                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf64     01 1A 06 F6 | 	mov	arg05, #1
0cf68     60 B4 B0 FD | 	call	#_psram_spin2_fill
0cf6c     0B 00 00 FF 
0cf70     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf74     60 02 90 FD | 	jmp	#LR__1002
0cf78                 | LR__0991
0cf78     30 4E 05 F1 | 	add	fp, #48
0cf7c     A7 12 02 FB | 	rdlong	arg01, fp
0cf80     30 4E 85 F1 | 	sub	fp, #48
0cf84     A7 14 02 FB | 	rdlong	arg02, fp
0cf88     01 16 06 F6 | 	mov	arg03, #1
0cf8c     00 18 06 F6 | 	mov	arg04, #0
0cf90     0B 00 00 FF 
0cf94     C0 E4 05 F1 | 	add	objptr, ##5824
0cf98                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf98     01 1A 06 F6 | 	mov	arg05, #1
0cf9c     2C B4 B0 FD | 	call	#_psram_spin2_fill
0cfa0     0B 00 00 FF 
0cfa4     C0 E4 85 F1 | 	sub	objptr, ##5824
0cfa8     2C 02 90 FD | 	jmp	#LR__1002
0cfac                 | LR__0992
0cfac     30 4E 05 F1 | 	add	fp, #48
0cfb0     A7 12 02 FB | 	rdlong	arg01, fp
0cfb4     30 4E 85 F1 | 	sub	fp, #48
0cfb8     A7 14 02 FB | 	rdlong	arg02, fp
0cfbc     01 16 06 F6 | 	mov	arg03, #1
0cfc0     00 18 06 F6 | 	mov	arg04, #0
0cfc4     0B 00 00 FF 
0cfc8     C0 E4 05 F1 | 	add	objptr, ##5824
0cfcc                 | '     return fill(addr, pattern, count, listPtr, 1)
0cfcc     01 1A 06 F6 | 	mov	arg05, #1
0cfd0     F8 B3 B0 FD | 	call	#_psram_spin2_fill
0cfd4     30 4E 05 F1 | 	add	fp, #48
0cfd8     A7 12 02 FB | 	rdlong	arg01, fp
0cfdc     30 4E 85 F1 | 	sub	fp, #48
0cfe0     01 12 06 F1 | 	add	arg01, #1
0cfe4     A7 14 02 FB | 	rdlong	arg02, fp
0cfe8     08 14 46 F0 | 	shr	arg02, #8
0cfec     01 16 06 F6 | 	mov	arg03, #1
0cff0     00 18 06 F6 | 	mov	arg04, #0
0cff4                 | '     return fill(addr, pattern, count, listPtr, 1)
0cff4     01 1A 06 F6 | 	mov	arg05, #1
0cff8     D0 B3 B0 FD | 	call	#_psram_spin2_fill
0cffc     0B 00 00 FF 
0d000     C0 E4 85 F1 | 	sub	objptr, ##5824
0d004     D0 01 90 FD | 	jmp	#LR__1002
0d008                 | LR__0993
0d008     30 4E 05 F1 | 	add	fp, #48
0d00c     A7 12 02 FB | 	rdlong	arg01, fp
0d010     30 4E 85 F1 | 	sub	fp, #48
0d014     A7 14 02 FB | 	rdlong	arg02, fp
0d018     01 16 06 F6 | 	mov	arg03, #1
0d01c     00 18 06 F6 | 	mov	arg04, #0
0d020     0B 00 00 FF 
0d024     C0 E4 05 F1 | 	add	objptr, ##5824
0d028                 | '     return fill(addr, pattern, count, listPtr, 1)
0d028     01 1A 06 F6 | 	mov	arg05, #1
0d02c     9C B3 B0 FD | 	call	#_psram_spin2_fill
0d030     30 4E 05 F1 | 	add	fp, #48
0d034     A7 12 02 FB | 	rdlong	arg01, fp
0d038     30 4E 85 F1 | 	sub	fp, #48
0d03c     01 12 06 F1 | 	add	arg01, #1
0d040     A7 14 02 FB | 	rdlong	arg02, fp
0d044     08 14 46 F0 | 	shr	arg02, #8
0d048     01 16 06 F6 | 	mov	arg03, #1
0d04c     00 18 06 F6 | 	mov	arg04, #0
0d050                 | '     return fill(addr, pattern, count, listPtr, 1)
0d050     01 1A 06 F6 | 	mov	arg05, #1
0d054     74 B3 B0 FD | 	call	#_psram_spin2_fill
0d058     0B 00 00 FF 
0d05c     C0 E4 85 F1 | 	sub	objptr, ##5824
0d060     74 01 90 FD | 	jmp	#LR__1002
0d064                 | LR__0994
0d064     30 4E 05 F1 | 	add	fp, #48
0d068     A7 12 02 FB | 	rdlong	arg01, fp
0d06c     30 4E 85 F1 | 	sub	fp, #48
0d070     A7 14 02 FB | 	rdlong	arg02, fp
0d074     01 16 06 F6 | 	mov	arg03, #1
0d078     00 18 06 F6 | 	mov	arg04, #0
0d07c     0B 00 00 FF 
0d080     C0 E4 05 F1 | 	add	objptr, ##5824
0d084                 | '     return fill(addr, pattern, count, listPtr, 4)
0d084     04 1A 06 F6 | 	mov	arg05, #4
0d088     40 B3 B0 FD | 	call	#_psram_spin2_fill
0d08c     0B 00 00 FF 
0d090     C0 E4 85 F1 | 	sub	objptr, ##5824
0d094     40 01 90 FD | 	jmp	#LR__1002
0d098                 | LR__0995
0d098     30 4E 05 F1 | 	add	fp, #48
0d09c     A7 12 02 FB | 	rdlong	arg01, fp
0d0a0     30 4E 85 F1 | 	sub	fp, #48
0d0a4     A7 14 02 FB | 	rdlong	arg02, fp
0d0a8     01 16 06 F6 | 	mov	arg03, #1
0d0ac     00 18 06 F6 | 	mov	arg04, #0
0d0b0     0B 00 00 FF 
0d0b4     C0 E4 05 F1 | 	add	objptr, ##5824
0d0b8                 | '     return fill(addr, pattern, count, listPtr, 4)
0d0b8     04 1A 06 F6 | 	mov	arg05, #4
0d0bc     0C B3 B0 FD | 	call	#_psram_spin2_fill
0d0c0     0B 00 00 FF 
0d0c4     C0 E4 85 F1 | 	sub	objptr, ##5824
0d0c8     0C 01 90 FD | 	jmp	#LR__1002
0d0cc                 | LR__0996
0d0cc     30 4E 05 F1 | 	add	fp, #48
0d0d0     A7 12 02 FB | 	rdlong	arg01, fp
0d0d4     30 4E 85 F1 | 	sub	fp, #48
0d0d8     A7 14 02 FB | 	rdlong	arg02, fp
0d0dc     01 16 06 F6 | 	mov	arg03, #1
0d0e0     00 18 06 F6 | 	mov	arg04, #0
0d0e4     0B 00 00 FF 
0d0e8     C0 E4 05 F1 | 	add	objptr, ##5824
0d0ec                 | '     return fill(addr, pattern, count, listPtr, 4)
0d0ec     04 1A 06 F6 | 	mov	arg05, #4
0d0f0     D8 B2 B0 FD | 	call	#_psram_spin2_fill
0d0f4     0B 00 00 FF 
0d0f8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d0fc     D8 00 90 FD | 	jmp	#LR__1002
0d100                 | LR__0997
0d100     30 4E 05 F1 | 	add	fp, #48
0d104     A7 12 02 FB | 	rdlong	arg01, fp
0d108     30 4E 85 F1 | 	sub	fp, #48
0d10c     A7 14 02 FB | 	rdlong	arg02, fp
0d110     01 16 06 F6 | 	mov	arg03, #1
0d114     00 18 06 F6 | 	mov	arg04, #0
0d118     0B 00 00 FF 
0d11c     C0 E4 05 F1 | 	add	objptr, ##5824
0d120                 | '     return fill(addr, pattern, count, listPtr, 4)
0d120     04 1A 06 F6 | 	mov	arg05, #4
0d124     A4 B2 B0 FD | 	call	#_psram_spin2_fill
0d128     0B 00 00 FF 
0d12c     C0 E4 85 F1 | 	sub	objptr, ##5824
0d130     A4 00 90 FD | 	jmp	#LR__1002
0d134                 | LR__0998
0d134     30 4E 05 F1 | 	add	fp, #48
0d138     A7 12 02 FB | 	rdlong	arg01, fp
0d13c     30 4E 85 F1 | 	sub	fp, #48
0d140     A7 14 02 FB | 	rdlong	arg02, fp
0d144     01 16 06 F6 | 	mov	arg03, #1
0d148     00 18 06 F6 | 	mov	arg04, #0
0d14c     0B 00 00 FF 
0d150     C0 E4 05 F1 | 	add	objptr, ##5824
0d154                 | '     return fill(addr, pattern, count, listPtr, 4)
0d154     04 1A 06 F6 | 	mov	arg05, #4
0d158     70 B2 B0 FD | 	call	#_psram_spin2_fill
0d15c     0B 00 00 FF 
0d160     C0 E4 85 F1 | 	sub	objptr, ##5824
0d164     70 00 90 FD | 	jmp	#LR__1002
0d168                 | LR__0999
0d168     30 4E 05 F1 | 	add	fp, #48
0d16c     A7 12 02 FB | 	rdlong	arg01, fp
0d170     30 4E 85 F1 | 	sub	fp, #48
0d174     A7 14 02 FB | 	rdlong	arg02, fp
0d178     01 16 06 F6 | 	mov	arg03, #1
0d17c     00 18 06 F6 | 	mov	arg04, #0
0d180     0B 00 00 FF 
0d184     C0 E4 05 F1 | 	add	objptr, ##5824
0d188                 | '     return fill(addr, pattern, count, listPtr, 4)
0d188     04 1A 06 F6 | 	mov	arg05, #4
0d18c     3C B2 B0 FD | 	call	#_psram_spin2_fill
0d190     0B 00 00 FF 
0d194     C0 E4 85 F1 | 	sub	objptr, ##5824
0d198     3C 00 90 FD | 	jmp	#LR__1002
0d19c                 | LR__1000
0d19c     30 4E 05 F1 | 	add	fp, #48
0d1a0     A7 12 02 FB | 	rdlong	arg01, fp
0d1a4     30 4E 85 F1 | 	sub	fp, #48
0d1a8     A7 14 02 FB | 	rdlong	arg02, fp
0d1ac     01 16 06 F6 | 	mov	arg03, #1
0d1b0     00 18 06 F6 | 	mov	arg04, #0
0d1b4     0B 00 00 FF 
0d1b8     C0 E4 05 F1 | 	add	objptr, ##5824
0d1bc                 | '     return fill(addr, pattern, count, listPtr, 4)
0d1bc     04 1A 06 F6 | 	mov	arg05, #4
0d1c0     08 B2 B0 FD | 	call	#_psram_spin2_fill
0d1c4     0B 00 00 FF 
0d1c8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d1cc     08 00 90 FD | 	jmp	#LR__1002
0d1d0                 | LR__1001
0d1d0     2F 12 06 F6 | 	mov	arg01, #47
0d1d4     88 86 B0 FD | 	call	#_printerror
0d1d8                 | LR__1002
0d1d8                 | LR__1003
0d1d8     A7 F0 03 F6 | 	mov	ptra, fp
0d1dc     B2 00 A0 FD | 	call	#popregs_
0d1e0                 | _do_assign_ret
0d1e0     2D 00 64 FD | 	ret
0d1e4                 | 
0d1e4                 | ' 
0d1e4                 | ' 
0d1e4                 | ' ' --------------------- Read a variable and push to the stack
0d1e4                 | ' 
0d1e4                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0d1e4                 | ' 
0d1e4                 | ' sub do_getvar
0d1e4                 | _do_getvar
0d1e4     04 4A 05 F6 | 	mov	COUNT_, #4
0d1e8     A8 00 A0 FD | 	call	#pushregs_
0d1ec     3C F0 07 F1 | 	add	ptra, #60
0d1f0                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0d1f0                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0d1f0     69 00 00 FF 
0d1f4     54 E5 05 F1 | 	add	objptr, ##54100
0d1f8     F2 1E 02 FB | 	rdlong	local01, objptr
0d1fc     0F 17 02 F6 | 	mov	arg03, local01
0d200     01 16 66 F0 | 	shl	arg03, #1
0d204     0F 17 02 F1 | 	add	arg03, local01
0d208     02 16 66 F0 | 	shl	arg03, #2
0d20c     03 00 00 FF 
0d210     04 E4 85 F1 | 	sub	objptr, ##1540
0d214     F2 16 02 F1 | 	add	arg03, objptr
0d218     04 16 06 F1 | 	add	arg03, #4
0d21c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d220     66 00 00 FF 
0d224     50 E5 85 F1 | 	sub	objptr, ##52560
0d228     C4 00 90 5D |  if_ne	jmp	#LR__1011
0d22c     69 00 00 FF 
0d230     54 E5 05 F1 | 	add	objptr, ##54100
0d234     F2 1E 02 FB | 	rdlong	local01, objptr
0d238     0F 13 02 F6 | 	mov	arg01, local01
0d23c     01 12 66 F0 | 	shl	arg01, #1
0d240     0F 13 02 F1 | 	add	arg01, local01
0d244     02 12 66 F0 | 	shl	arg01, #2
0d248     03 00 00 FF 
0d24c     04 E4 85 F1 | 	sub	objptr, ##1540
0d250     F2 12 02 F1 | 	add	arg01, objptr
0d254     09 1F 02 FB | 	rdlong	local01, arg01
0d258     04 1E 66 F0 | 	shl	local01, #4
0d25c     32 00 00 FF 
0d260     74 E4 85 F1 | 	sub	objptr, ##25716
0d264     F2 1E 02 F1 | 	add	local01, objptr
0d268     04 1E 06 F1 | 	add	local01, #4
0d26c     0F 13 02 FB | 	rdlong	arg01, local01
0d270     04 1E 06 F1 | 	add	local01, #4
0d274     0F 1F 02 FB | 	rdlong	local01, local01
0d278     A7 12 62 FC | 	wrlong	arg01, fp
0d27c     04 4E 05 F1 | 	add	fp, #4
0d280     A7 1E 62 FC | 	wrlong	local01, fp
0d284     35 00 00 FF 
0d288     78 E4 05 F1 | 	add	objptr, ##27256
0d28c     F2 1E 02 FB | 	rdlong	local01, objptr
0d290     0F 13 02 F6 | 	mov	arg01, local01
0d294     01 12 66 F0 | 	shl	arg01, #1
0d298     0F 13 02 F1 | 	add	arg01, local01
0d29c     02 12 66 F0 | 	shl	arg01, #2
0d2a0     03 00 00 FF 
0d2a4     04 E4 85 F1 | 	sub	objptr, ##1540
0d2a8     F2 12 02 F1 | 	add	arg01, objptr
0d2ac     09 1F 02 FB | 	rdlong	local01, arg01
0d2b0     04 1E 66 F0 | 	shl	local01, #4
0d2b4     32 00 00 FF 
0d2b8     74 E4 85 F1 | 	sub	objptr, ##25716
0d2bc     F2 1E 02 F1 | 	add	local01, objptr
0d2c0     0C 1E 06 F1 | 	add	local01, #12
0d2c4     0F 1F 02 FB | 	rdlong	local01, local01
0d2c8     04 4E 05 F1 | 	add	fp, #4
0d2cc     A7 1E 62 FC | 	wrlong	local01, fp
0d2d0                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0d2d0                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0d2d0                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0d2d0     08 4E 85 F1 | 	sub	fp, #8
0d2d4     00 1F 16 F2 | 	cmp	local01, #256 wc
0d2d8     34 00 00 FF 
0d2dc     DC E4 85 F1 | 	sub	objptr, ##26844
0d2e0     0C 00 90 3D |  if_ae	jmp	#LR__1010
0d2e4     A7 12 02 F6 | 	mov	arg01, fp
0d2e8     9C C6 BF FD | 	call	#_push
0d2ec     A0 04 90 FD | 	jmp	#LR__1032
0d2f0                 | LR__1010
0d2f0                 | LR__1011
0d2f0     69 00 00 FF 
0d2f4     54 E5 05 F1 | 	add	objptr, ##54100
0d2f8     F2 16 02 FB | 	rdlong	arg03, objptr
0d2fc     0B 15 02 F6 | 	mov	arg02, arg03
0d300     01 14 66 F0 | 	shl	arg02, #1
0d304     0B 15 02 F1 | 	add	arg02, arg03
0d308     02 14 66 F0 | 	shl	arg02, #2
0d30c     03 00 00 FF 
0d310     04 E4 85 F1 | 	sub	objptr, ##1540
0d314     F2 14 02 F1 | 	add	arg02, objptr
0d318     0A 17 02 FB | 	rdlong	arg03, arg02
0d31c     04 16 66 F0 | 	shl	arg03, #4
0d320     32 00 00 FF 
0d324     74 E4 85 F1 | 	sub	objptr, ##25716
0d328     F2 16 02 F1 | 	add	arg03, objptr
0d32c     04 16 06 F1 | 	add	arg03, #4
0d330     0B 13 02 FB | 	rdlong	arg01, arg03
0d334     0C 4E 05 F1 | 	add	fp, #12
0d338     A7 12 62 FC | 	wrlong	arg01, fp
0d33c     0C 4E 85 F1 | 	sub	fp, #12
0d340     34 00 00 FF 
0d344     DC E4 85 F1 | 	sub	objptr, ##26844
0d348     D0 86 B0 FD | 	call	#_pslpeek
0d34c     FD FA 31 F9 | 	getword	result1, result1, #0
0d350     10 4E 05 F1 | 	add	fp, #16
0d354     A7 FA 61 FC | 	wrlong	result1, fp
0d358     69 00 00 FF 
0d35c     54 E5 05 F1 | 	add	objptr, ##54100
0d360     F2 16 02 FB | 	rdlong	arg03, objptr
0d364     0B 15 02 F6 | 	mov	arg02, arg03
0d368     01 14 66 F0 | 	shl	arg02, #1
0d36c     0B 15 02 F1 | 	add	arg02, arg03
0d370     02 14 66 F0 | 	shl	arg02, #2
0d374     03 00 00 FF 
0d378     04 E4 85 F1 | 	sub	objptr, ##1540
0d37c     F2 14 02 F1 | 	add	arg02, objptr
0d380     04 14 06 F1 | 	add	arg02, #4
0d384     0A 17 02 FB | 	rdlong	arg03, arg02
0d388     04 4E 05 F1 | 	add	fp, #4
0d38c     A7 16 62 FC | 	wrlong	arg03, fp
0d390     08 4E 85 F1 | 	sub	fp, #8
0d394     A7 12 02 FB | 	rdlong	arg01, fp
0d398     0C 4E 85 F1 | 	sub	fp, #12
0d39c     02 12 06 F1 | 	add	arg01, #2
0d3a0     66 00 00 FF 
0d3a4     50 E5 85 F1 | 	sub	objptr, ##52560
0d3a8     18 86 B0 FD | 	call	#_pspeek
0d3ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d3b0     18 4E 05 F1 | 	add	fp, #24
0d3b4     A7 FA 61 FC | 	wrlong	result1, fp
0d3b8     0C 4E 85 F1 | 	sub	fp, #12
0d3bc     A7 12 02 FB | 	rdlong	arg01, fp
0d3c0     0C 4E 85 F1 | 	sub	fp, #12
0d3c4     04 12 06 F1 | 	add	arg01, #4
0d3c8     50 86 B0 FD | 	call	#_pslpeek
0d3cc     1C 4E 05 F1 | 	add	fp, #28
0d3d0     A7 FA 61 FC | 	wrlong	result1, fp
0d3d4     10 4E 85 F1 | 	sub	fp, #16
0d3d8     A7 12 02 FB | 	rdlong	arg01, fp
0d3dc     0C 4E 85 F1 | 	sub	fp, #12
0d3e0     08 12 06 F1 | 	add	arg01, #8
0d3e4     34 86 B0 FD | 	call	#_pslpeek
0d3e8     20 4E 05 F1 | 	add	fp, #32
0d3ec     A7 FA 61 FC | 	wrlong	result1, fp
0d3f0     14 4E 85 F1 | 	sub	fp, #20
0d3f4     A7 12 02 FB | 	rdlong	arg01, fp
0d3f8     0C 4E 85 F1 | 	sub	fp, #12
0d3fc     0C 12 06 F1 | 	add	arg01, #12
0d400     18 86 B0 FD | 	call	#_pslpeek
0d404     24 4E 05 F1 | 	add	fp, #36
0d408     A7 FA 61 FC | 	wrlong	result1, fp
0d40c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0d40c                 | ' esize=pspeek(arrptr+2)
0d40c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0d40c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0d40c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0d40c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0d40c     10 4E 85 F1 | 	sub	fp, #16
0d410     A7 16 02 FB | 	rdlong	arg03, fp
0d414     14 4E 85 F1 | 	sub	fp, #20
0d418     03 16 16 F2 | 	cmp	arg03, #3 wc
0d41c     38 00 90 CD |  if_b	jmp	#LR__1012
0d420     CC C4 BF FD | 	call	#_pop
0d424     FF 16 02 F6 | 	mov	arg03, result3
0d428     A7 FA 61 FC | 	wrlong	result1, fp
0d42c     04 4E 05 F1 | 	add	fp, #4
0d430     A7 FC 61 FC | 	wrlong	result2, fp
0d434     04 4E 05 F1 | 	add	fp, #4
0d438     A7 16 62 FC | 	wrlong	arg03, fp
0d43c     08 4E 85 F1 | 	sub	fp, #8
0d440     A7 12 02 F6 | 	mov	arg01, fp
0d444     18 3A B0 FD | 	call	#_converttoint
0d448     30 4E 05 F1 | 	add	fp, #48
0d44c     A7 FA 61 FC | 	wrlong	result1, fp
0d450     30 4E 85 F1 | 	sub	fp, #48
0d454     0C 00 90 FD | 	jmp	#LR__1013
0d458                 | LR__1012
0d458     30 4E 05 F1 | 	add	fp, #48
0d45c     A7 00 68 FC | 	wrlong	#0, fp
0d460     30 4E 85 F1 | 	sub	fp, #48
0d464                 | LR__1013
0d464                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0d464     14 4E 05 F1 | 	add	fp, #20
0d468     A7 16 02 FB | 	rdlong	arg03, fp
0d46c     14 4E 85 F1 | 	sub	fp, #20
0d470     02 16 16 F2 | 	cmp	arg03, #2 wc
0d474     38 00 90 CD |  if_b	jmp	#LR__1014
0d478     74 C4 BF FD | 	call	#_pop
0d47c     FF 16 02 F6 | 	mov	arg03, result3
0d480     A7 FA 61 FC | 	wrlong	result1, fp
0d484     04 4E 05 F1 | 	add	fp, #4
0d488     A7 FC 61 FC | 	wrlong	result2, fp
0d48c     04 4E 05 F1 | 	add	fp, #4
0d490     A7 16 62 FC | 	wrlong	arg03, fp
0d494     08 4E 85 F1 | 	sub	fp, #8
0d498     A7 12 02 F6 | 	mov	arg01, fp
0d49c     C0 39 B0 FD | 	call	#_converttoint
0d4a0     2C 4E 05 F1 | 	add	fp, #44
0d4a4     A7 FA 61 FC | 	wrlong	result1, fp
0d4a8     2C 4E 85 F1 | 	sub	fp, #44
0d4ac     0C 00 90 FD | 	jmp	#LR__1015
0d4b0                 | LR__1014
0d4b0     2C 4E 05 F1 | 	add	fp, #44
0d4b4     A7 00 68 FC | 	wrlong	#0, fp
0d4b8     2C 4E 85 F1 | 	sub	fp, #44
0d4bc                 | LR__1015
0d4bc                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0d4bc     14 4E 05 F1 | 	add	fp, #20
0d4c0     A7 16 02 FB | 	rdlong	arg03, fp
0d4c4     14 4E 85 F1 | 	sub	fp, #20
0d4c8     01 16 16 F2 | 	cmp	arg03, #1 wc
0d4cc     38 00 90 CD |  if_b	jmp	#LR__1016
0d4d0     1C C4 BF FD | 	call	#_pop
0d4d4     FF 16 02 F6 | 	mov	arg03, result3
0d4d8     A7 FA 61 FC | 	wrlong	result1, fp
0d4dc     04 4E 05 F1 | 	add	fp, #4
0d4e0     A7 FC 61 FC | 	wrlong	result2, fp
0d4e4     04 4E 05 F1 | 	add	fp, #4
0d4e8     A7 16 62 FC | 	wrlong	arg03, fp
0d4ec     08 4E 85 F1 | 	sub	fp, #8
0d4f0     A7 12 02 F6 | 	mov	arg01, fp
0d4f4     68 39 B0 FD | 	call	#_converttoint
0d4f8     28 4E 05 F1 | 	add	fp, #40
0d4fc     A7 FA 61 FC | 	wrlong	result1, fp
0d500     28 4E 85 F1 | 	sub	fp, #40
0d504     0C 00 90 FD | 	jmp	#LR__1017
0d508                 | LR__1016
0d508     28 4E 05 F1 | 	add	fp, #40
0d50c     A7 00 68 FC | 	wrlong	#0, fp
0d510     28 4E 85 F1 | 	sub	fp, #40
0d514                 | LR__1017
0d514     0C 4E 05 F1 | 	add	fp, #12
0d518     A7 20 02 FB | 	rdlong	local02, fp
0d51c     1C 4E 05 F1 | 	add	fp, #28
0d520     A7 22 02 FB | 	rdlong	local03, fp
0d524     04 4E 05 F1 | 	add	fp, #4
0d528     A7 FC 01 FB | 	rdlong	result2, fp
0d52c     10 4E 85 F1 | 	sub	fp, #16
0d530     A7 FE 01 FB | 	rdlong	result3, fp
0d534     FF FC 01 FD | 	qmul	result2, result3
0d538     10 20 06 F1 | 	add	local02, #16
0d53c     14 4E 05 F1 | 	add	fp, #20
0d540     A7 FC 01 FB | 	rdlong	result2, fp
0d544     18 FA 61 FD | 	getqx	result1
0d548     FF FC 01 FD | 	qmul	result2, result3
0d54c     FD 22 02 F1 | 	add	local03, result1
0d550     10 4E 85 F1 | 	sub	fp, #16
0d554     A7 FE 01 FB | 	rdlong	result3, fp
0d558     18 FC 61 FD | 	getqx	result2
0d55c     FF FC 01 FD | 	qmul	result2, result3
0d560     08 4E 85 F1 | 	sub	fp, #8
0d564     A7 FE 01 FB | 	rdlong	result3, fp
0d568     18 FC 61 FD | 	getqx	result2
0d56c     FE 22 02 F1 | 	add	local03, result2
0d570     FF 22 02 FD | 	qmul	local03, result3
0d574     1C 4E 05 F1 | 	add	fp, #28
0d578                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0d578                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0d578                 | ' 
0d578                 | ' select case vartype
0d578     18 FC 61 FD | 	getqx	result2
0d57c     FE 20 02 F1 | 	add	local02, result2
0d580     A7 20 62 FC | 	wrlong	local02, fp
0d584     24 4E 85 F1 | 	sub	fp, #36
0d588     A7 24 02 FB | 	rdlong	local04, fp
0d58c     10 4E 85 F1 | 	sub	fp, #16
0d590     00 25 86 F1 | 	sub	local04, #256
0d594     0C 24 26 F3 | 	fle	local04, #12
0d598     30 24 62 FD | 	jmprel	local04
0d59c                 | LR__1018
0d59c     30 00 90 FD | 	jmp	#LR__1019
0d5a0     58 00 90 FD | 	jmp	#LR__1020
0d5a4     8C 00 90 FD | 	jmp	#LR__1021
0d5a8     AC 00 90 FD | 	jmp	#LR__1022
0d5ac     E8 00 90 FD | 	jmp	#LR__1023
0d5b0     08 01 90 FD | 	jmp	#LR__1024
0d5b4     24 01 90 FD | 	jmp	#LR__1025
0d5b8     40 01 90 FD | 	jmp	#LR__1026
0d5bc     50 01 90 FD | 	jmp	#LR__1027
0d5c0     60 01 90 FD | 	jmp	#LR__1028
0d5c4     7C 01 90 FD | 	jmp	#LR__1029
0d5c8     8C 01 90 FD | 	jmp	#LR__1030
0d5cc     B8 01 90 FD | 	jmp	#LR__1031
0d5d0                 | LR__1019
0d5d0     A7 12 02 F6 | 	mov	arg01, fp
0d5d4     34 4E 05 F1 | 	add	fp, #52
0d5d8     A7 14 02 FB | 	rdlong	arg02, fp
0d5dc     34 4E 85 F1 | 	sub	fp, #52
0d5e0     0C 16 06 F6 | 	mov	arg03, #12
0d5e4     0B 00 00 FF 
0d5e8     C0 E4 05 F1 | 	add	objptr, ##5824
0d5ec     A4 AC B0 FD | 	call	#_psram_spin2_read1
0d5f0     0B 00 00 FF 
0d5f4     C0 E4 85 F1 | 	sub	objptr, ##5824
0d5f8     8C 01 90 FD | 	jmp	#LR__1031
0d5fc                 | LR__1020
0d5fc     08 4E 05 F1 | 	add	fp, #8
0d600     A7 38 68 FC | 	wrlong	#28, fp
0d604     2C 4E 05 F1 | 	add	fp, #44
0d608     A7 12 02 FB | 	rdlong	arg01, fp
0d60c     34 4E 85 F1 | 	sub	fp, #52
0d610     B0 83 B0 FD | 	call	#_pspeek
0d614     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d618     A7 FA 61 FC | 	wrlong	result1, fp
0d61c     80 FA 15 F2 | 	cmp	result1, #128 wc
0d620     00 1F 66 36 |  if_ae	neg	local01, #256
0d624     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d628     11 1F 42 35 |  if_ae	or	local01, local03
0d62c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d630     54 01 90 FD | 	jmp	#LR__1031
0d634                 | LR__1021
0d634     08 4E 05 F1 | 	add	fp, #8
0d638     A7 3A 68 FC | 	wrlong	#29, fp
0d63c     2C 4E 05 F1 | 	add	fp, #44
0d640     A7 12 02 FB | 	rdlong	arg01, fp
0d644     34 4E 85 F1 | 	sub	fp, #52
0d648     78 83 B0 FD | 	call	#_pspeek
0d64c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d650     A7 FA 61 FC | 	wrlong	result1, fp
0d654     30 01 90 FD | 	jmp	#LR__1031
0d658                 | LR__1022
0d658     08 4E 05 F1 | 	add	fp, #8
0d65c     A7 38 68 FC | 	wrlong	#28, fp
0d660     2C 4E 05 F1 | 	add	fp, #44
0d664     A7 12 02 FB | 	rdlong	arg01, fp
0d668     34 4E 85 F1 | 	sub	fp, #52
0d66c     AC 83 B0 FD | 	call	#_pslpeek
0d670     FD FA 31 F9 | 	getword	result1, result1, #0
0d674     A7 FA 61 FC | 	wrlong	result1, fp
0d678     40 00 00 FF 
0d67c     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0d680     FF 7F 00 3F 
0d684     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0d688     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d68c     11 1F 42 35 |  if_ae	or	local01, local03
0d690     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d694     F0 00 90 FD | 	jmp	#LR__1031
0d698                 | LR__1023
0d698     08 4E 05 F1 | 	add	fp, #8
0d69c     A7 3A 68 FC | 	wrlong	#29, fp
0d6a0     2C 4E 05 F1 | 	add	fp, #44
0d6a4     A7 12 02 FB | 	rdlong	arg01, fp
0d6a8     34 4E 85 F1 | 	sub	fp, #52
0d6ac     6C 83 B0 FD | 	call	#_pslpeek
0d6b0     FD FA 31 F9 | 	getword	result1, result1, #0
0d6b4     A7 FA 61 FC | 	wrlong	result1, fp
0d6b8     CC 00 90 FD | 	jmp	#LR__1031
0d6bc                 | LR__1024
0d6bc     08 4E 05 F1 | 	add	fp, #8
0d6c0     A7 38 68 FC | 	wrlong	#28, fp
0d6c4     2C 4E 05 F1 | 	add	fp, #44
0d6c8     A7 12 02 FB | 	rdlong	arg01, fp
0d6cc     34 4E 85 F1 | 	sub	fp, #52
0d6d0     48 83 B0 FD | 	call	#_pslpeek
0d6d4     A7 FA 61 FC | 	wrlong	result1, fp
0d6d8     AC 00 90 FD | 	jmp	#LR__1031
0d6dc                 | LR__1025
0d6dc     08 4E 05 F1 | 	add	fp, #8
0d6e0     A7 3A 68 FC | 	wrlong	#29, fp
0d6e4     2C 4E 05 F1 | 	add	fp, #44
0d6e8     A7 12 02 FB | 	rdlong	arg01, fp
0d6ec     34 4E 85 F1 | 	sub	fp, #52
0d6f0     28 83 B0 FD | 	call	#_pslpeek
0d6f4     A7 FA 61 FC | 	wrlong	result1, fp
0d6f8     8C 00 90 FD | 	jmp	#LR__1031
0d6fc                 | LR__1026
0d6fc     08 4E 05 F1 | 	add	fp, #8
0d700     A7 FE 69 FC | 	wrlong	#255, fp
0d704     08 4E 85 F1 | 	sub	fp, #8
0d708     A7 60 68 FC | 	wrlong	#48, fp
0d70c     78 00 90 FD | 	jmp	#LR__1031
0d710                 | LR__1027
0d710     08 4E 05 F1 | 	add	fp, #8
0d714     A7 FE 69 FC | 	wrlong	#255, fp
0d718     08 4E 85 F1 | 	sub	fp, #8
0d71c     A7 60 68 FC | 	wrlong	#48, fp
0d720     64 00 90 FD | 	jmp	#LR__1031
0d724                 | LR__1028
0d724     08 4E 05 F1 | 	add	fp, #8
0d728     A7 3C 68 FC | 	wrlong	#30, fp
0d72c     2C 4E 05 F1 | 	add	fp, #44
0d730     A7 12 02 FB | 	rdlong	arg01, fp
0d734     34 4E 85 F1 | 	sub	fp, #52
0d738     E0 82 B0 FD | 	call	#_pslpeek
0d73c     A7 FA 61 FC | 	wrlong	result1, fp
0d740     44 00 90 FD | 	jmp	#LR__1031
0d744                 | LR__1029
0d744     08 4E 05 F1 | 	add	fp, #8
0d748     A7 FE 69 FC | 	wrlong	#255, fp
0d74c     08 4E 85 F1 | 	sub	fp, #8
0d750     A7 60 68 FC | 	wrlong	#48, fp
0d754     30 00 90 FD | 	jmp	#LR__1031
0d758                 | LR__1030
0d758     08 4E 05 F1 | 	add	fp, #8
0d75c     A7 3E 68 FC | 	wrlong	#31, fp
0d760     2C 4E 05 F1 | 	add	fp, #44
0d764     A7 12 02 FB | 	rdlong	arg01, fp
0d768     34 4E 85 F1 | 	sub	fp, #52
0d76c     AC 82 B0 FD | 	call	#_pslpeek
0d770     A7 FA 61 FC | 	wrlong	result1, fp
0d774     00 04 00 FF 
0d778     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0d77c     08 4E 05 31 |  if_ae	add	fp, #8
0d780     A7 56 68 3C |  if_ae	wrlong	#43, fp
0d784     08 4E 85 31 |  if_ae	sub	fp, #8
0d788                 | LR__1031
0d788     A7 12 02 F6 | 	mov	arg01, fp
0d78c     F8 C1 BF FD | 	call	#_push
0d790                 | LR__1032
0d790     A7 F0 03 F6 | 	mov	ptra, fp
0d794     B2 00 A0 FD | 	call	#popregs_
0d798                 | _do_getvar_ret
0d798     2D 00 64 FD | 	ret
0d79c                 | 
0d79c                 | ' 
0d79c                 | ' '------------------------ Operators 
0d79c                 | ' 
0d79c                 | ' sub do_plus 
0d79c                 | _do_plus
0d79c     05 4A 05 F6 | 	mov	COUNT_, #5
0d7a0     A8 00 A0 FD | 	call	#pushregs_
0d7a4     18 F0 07 F1 | 	add	ptra, #24
0d7a8     44 C1 BF FD | 	call	#_pop
0d7ac     FD 1E 02 F6 | 	mov	local01, result1
0d7b0     FE 20 02 F6 | 	mov	local02, result2
0d7b4     FF 22 02 F6 | 	mov	local03, result3
0d7b8     0C 4E 05 F1 | 	add	fp, #12
0d7bc     A7 1E 62 FC | 	wrlong	local01, fp
0d7c0     04 4E 05 F1 | 	add	fp, #4
0d7c4     A7 20 62 FC | 	wrlong	local02, fp
0d7c8     04 4E 05 F1 | 	add	fp, #4
0d7cc     A7 22 62 FC | 	wrlong	local03, fp
0d7d0     14 4E 85 F1 | 	sub	fp, #20
0d7d4     18 C1 BF FD | 	call	#_pop
0d7d8     FF 22 02 F6 | 	mov	local03, result3
0d7dc     A7 FA 61 FC | 	wrlong	result1, fp
0d7e0     04 4E 05 F1 | 	add	fp, #4
0d7e4     A7 FC 61 FC | 	wrlong	result2, fp
0d7e8     04 4E 05 F1 | 	add	fp, #4
0d7ec     A7 22 62 FC | 	wrlong	local03, fp
0d7f0                 | ' 
0d7f0                 | ' t2=pop()
0d7f0                 | ' t1=pop()
0d7f0                 | ' 
0d7f0                 | ' 
0d7f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0d7f0     08 4E 85 F1 | 	sub	fp, #8
0d7f4     1D 22 0E F2 | 	cmp	local03, #29 wz
0d7f8     14 4E 05 A1 |  if_e	add	fp, #20
0d7fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d800     14 4E 85 A1 |  if_e	sub	fp, #20
0d804     12 23 02 A6 |  if_e	mov	local03, local04
0d808     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d80c     1C 00 90 5D |  if_ne	jmp	#LR__1040
0d810     A7 1E 02 FB | 	rdlong	local01, fp
0d814     0C 4E 05 F1 | 	add	fp, #12
0d818     A7 20 02 FB | 	rdlong	local02, fp
0d81c     0C 4E 85 F1 | 	sub	fp, #12
0d820     10 1F 02 F1 | 	add	local01, local02
0d824     A7 1E 62 FC | 	wrlong	local01, fp
0d828     48 04 90 FD | 	jmp	#LR__1055
0d82c                 | LR__1040
0d82c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0d82c     08 4E 05 F1 | 	add	fp, #8
0d830     A7 1E 02 FB | 	rdlong	local01, fp
0d834     08 4E 85 F1 | 	sub	fp, #8
0d838     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d83c     14 4E 05 A1 |  if_e	add	fp, #20
0d840     A7 24 02 AB |  if_e	rdlong	local04, fp
0d844     14 4E 85 A1 |  if_e	sub	fp, #20
0d848     12 23 02 A6 |  if_e	mov	local03, local04
0d84c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d850     28 00 90 5D |  if_ne	jmp	#LR__1041
0d854     A7 1E 02 FB | 	rdlong	local01, fp
0d858     0C 4E 05 F1 | 	add	fp, #12
0d85c     A7 20 02 FB | 	rdlong	local02, fp
0d860     0C 4E 85 F1 | 	sub	fp, #12
0d864     10 1F 02 F1 | 	add	local01, local02
0d868     A7 1E 62 FC | 	wrlong	local01, fp
0d86c     08 4E 05 F1 | 	add	fp, #8
0d870     A7 38 68 FC | 	wrlong	#28, fp
0d874     08 4E 85 F1 | 	sub	fp, #8
0d878     F8 03 90 FD | 	jmp	#LR__1055
0d87c                 | LR__1041
0d87c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d87c     08 4E 05 F1 | 	add	fp, #8
0d880     A7 1E 02 FB | 	rdlong	local01, fp
0d884     08 4E 85 F1 | 	sub	fp, #8
0d888     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d88c     14 4E 05 A1 |  if_e	add	fp, #20
0d890     A7 24 02 AB |  if_e	rdlong	local04, fp
0d894     14 4E 85 A1 |  if_e	sub	fp, #20
0d898     12 23 02 A6 |  if_e	mov	local03, local04
0d89c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d8a0     30 00 90 5D |  if_ne	jmp	#LR__1042
0d8a4     A7 12 02 FB | 	rdlong	arg01, fp
0d8a8     20 DC B0 FD | 	call	#__system___float_fromuns
0d8ac     FD 12 02 F6 | 	mov	arg01, result1
0d8b0     0C 4E 05 F1 | 	add	fp, #12
0d8b4     A7 14 02 FB | 	rdlong	arg02, fp
0d8b8     0C 4E 85 F1 | 	sub	fp, #12
0d8bc     40 DC B0 FD | 	call	#__system___float_add
0d8c0     A7 FA 61 FC | 	wrlong	result1, fp
0d8c4     08 4E 05 F1 | 	add	fp, #8
0d8c8     A7 3C 68 FC | 	wrlong	#30, fp
0d8cc     08 4E 85 F1 | 	sub	fp, #8
0d8d0     A0 03 90 FD | 	jmp	#LR__1055
0d8d4                 | LR__1042
0d8d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0d8d4     08 4E 05 F1 | 	add	fp, #8
0d8d8     A7 1E 02 FB | 	rdlong	local01, fp
0d8dc     08 4E 85 F1 | 	sub	fp, #8
0d8e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d8e4     14 4E 05 A1 |  if_e	add	fp, #20
0d8e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8ec     14 4E 85 A1 |  if_e	sub	fp, #20
0d8f0     12 23 02 A6 |  if_e	mov	local03, local04
0d8f4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d8f8     1C 00 90 5D |  if_ne	jmp	#LR__1043
0d8fc     A7 1E 02 FB | 	rdlong	local01, fp
0d900     0C 4E 05 F1 | 	add	fp, #12
0d904     A7 20 02 FB | 	rdlong	local02, fp
0d908     0C 4E 85 F1 | 	sub	fp, #12
0d90c     10 1F 02 F1 | 	add	local01, local02
0d910     A7 1E 62 FC | 	wrlong	local01, fp
0d914     5C 03 90 FD | 	jmp	#LR__1055
0d918                 | LR__1043
0d918                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0d918     08 4E 05 F1 | 	add	fp, #8
0d91c     A7 1E 02 FB | 	rdlong	local01, fp
0d920     08 4E 85 F1 | 	sub	fp, #8
0d924     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d928     14 4E 05 A1 |  if_e	add	fp, #20
0d92c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d930     14 4E 85 A1 |  if_e	sub	fp, #20
0d934     12 23 02 A6 |  if_e	mov	local03, local04
0d938     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d93c     1C 00 90 5D |  if_ne	jmp	#LR__1044
0d940     A7 1E 02 FB | 	rdlong	local01, fp
0d944     0C 4E 05 F1 | 	add	fp, #12
0d948     A7 20 02 FB | 	rdlong	local02, fp
0d94c     0C 4E 85 F1 | 	sub	fp, #12
0d950     10 1F 02 F1 | 	add	local01, local02
0d954     A7 1E 62 FC | 	wrlong	local01, fp
0d958     18 03 90 FD | 	jmp	#LR__1055
0d95c                 | LR__1044
0d95c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d95c     08 4E 05 F1 | 	add	fp, #8
0d960     A7 1E 02 FB | 	rdlong	local01, fp
0d964     08 4E 85 F1 | 	sub	fp, #8
0d968     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d96c     14 4E 05 A1 |  if_e	add	fp, #20
0d970     A7 24 02 AB |  if_e	rdlong	local04, fp
0d974     14 4E 85 A1 |  if_e	sub	fp, #20
0d978     12 23 02 A6 |  if_e	mov	local03, local04
0d97c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d980     40 00 90 5D |  if_ne	jmp	#LR__1045
0d984     A7 12 02 FB | 	rdlong	arg01, fp
0d988     09 13 52 F6 | 	abs	arg01, arg01 wc
0d98c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d990     00 26 06 36 |  if_ae	mov	local05, #0
0d994     34 DB B0 FD | 	call	#__system___float_fromuns
0d998     13 FB 61 F5 | 	xor	result1, local05
0d99c     FD 12 02 F6 | 	mov	arg01, result1
0d9a0     0C 4E 05 F1 | 	add	fp, #12
0d9a4     A7 14 02 FB | 	rdlong	arg02, fp
0d9a8     0C 4E 85 F1 | 	sub	fp, #12
0d9ac     50 DB B0 FD | 	call	#__system___float_add
0d9b0     A7 FA 61 FC | 	wrlong	result1, fp
0d9b4     08 4E 05 F1 | 	add	fp, #8
0d9b8     A7 3C 68 FC | 	wrlong	#30, fp
0d9bc     08 4E 85 F1 | 	sub	fp, #8
0d9c0     B0 02 90 FD | 	jmp	#LR__1055
0d9c4                 | LR__1045
0d9c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0d9c4     08 4E 05 F1 | 	add	fp, #8
0d9c8     A7 1E 02 FB | 	rdlong	local01, fp
0d9cc     08 4E 85 F1 | 	sub	fp, #8
0d9d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d9d4     14 4E 05 A1 |  if_e	add	fp, #20
0d9d8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d9dc     14 4E 85 A1 |  if_e	sub	fp, #20
0d9e0     12 23 02 A6 |  if_e	mov	local03, local04
0d9e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d9e8     28 00 90 5D |  if_ne	jmp	#LR__1046
0d9ec     A7 1E 02 FB | 	rdlong	local01, fp
0d9f0     0C 4E 05 F1 | 	add	fp, #12
0d9f4     A7 12 02 FB | 	rdlong	arg01, fp
0d9f8     0C 4E 85 F1 | 	sub	fp, #12
0d9fc     CC DA B0 FD | 	call	#__system___float_fromuns
0da00     FD 14 02 F6 | 	mov	arg02, result1
0da04     0F 13 02 F6 | 	mov	arg01, local01
0da08     F4 DA B0 FD | 	call	#__system___float_add
0da0c     A7 FA 61 FC | 	wrlong	result1, fp
0da10     60 02 90 FD | 	jmp	#LR__1055
0da14                 | LR__1046
0da14                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0da14     08 4E 05 F1 | 	add	fp, #8
0da18     A7 1E 02 FB | 	rdlong	local01, fp
0da1c     08 4E 85 F1 | 	sub	fp, #8
0da20     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da24     14 4E 05 A1 |  if_e	add	fp, #20
0da28     A7 24 02 AB |  if_e	rdlong	local04, fp
0da2c     14 4E 85 A1 |  if_e	sub	fp, #20
0da30     12 23 02 A6 |  if_e	mov	local03, local04
0da34     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da38     38 00 90 5D |  if_ne	jmp	#LR__1047
0da3c     A7 1E 02 FB | 	rdlong	local01, fp
0da40     0C 4E 05 F1 | 	add	fp, #12
0da44     A7 12 02 FB | 	rdlong	arg01, fp
0da48     0C 4E 85 F1 | 	sub	fp, #12
0da4c     09 13 52 F6 | 	abs	arg01, arg01 wc
0da50     1F 26 C6 C9 |  if_b	decod	local05, #31
0da54     00 26 06 36 |  if_ae	mov	local05, #0
0da58     70 DA B0 FD | 	call	#__system___float_fromuns
0da5c     13 FB 61 F5 | 	xor	result1, local05
0da60     FD 14 02 F6 | 	mov	arg02, result1
0da64     0F 13 02 F6 | 	mov	arg01, local01
0da68     94 DA B0 FD | 	call	#__system___float_add
0da6c     A7 FA 61 FC | 	wrlong	result1, fp
0da70     00 02 90 FD | 	jmp	#LR__1055
0da74                 | LR__1047
0da74                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0da74     08 4E 05 F1 | 	add	fp, #8
0da78     A7 1E 02 FB | 	rdlong	local01, fp
0da7c     08 4E 85 F1 | 	sub	fp, #8
0da80     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da84     14 4E 05 A1 |  if_e	add	fp, #20
0da88     A7 24 02 AB |  if_e	rdlong	local04, fp
0da8c     14 4E 85 A1 |  if_e	sub	fp, #20
0da90     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0da94     1C 00 90 5D |  if_ne	jmp	#LR__1048
0da98     A7 12 02 FB | 	rdlong	arg01, fp
0da9c     0C 4E 05 F1 | 	add	fp, #12
0daa0     A7 14 02 FB | 	rdlong	arg02, fp
0daa4     0C 4E 85 F1 | 	sub	fp, #12
0daa8     54 DA B0 FD | 	call	#__system___float_add
0daac     A7 FA 61 FC | 	wrlong	result1, fp
0dab0     C0 01 90 FD | 	jmp	#LR__1055
0dab4                 | LR__1048
0dab4                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0dab4     08 4E 05 F1 | 	add	fp, #8
0dab8     A7 1E 02 FB | 	rdlong	local01, fp
0dabc     08 4E 85 F1 | 	sub	fp, #8
0dac0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dac4     24 00 90 5D |  if_ne	jmp	#LR__1049
0dac8     14 4E 05 F1 | 	add	fp, #20
0dacc     A7 22 02 FB | 	rdlong	local03, fp
0dad0     14 4E 85 F1 | 	sub	fp, #20
0dad4     1F 22 0E F2 | 	cmp	local03, #31 wz
0dad8     A7 04 68 5C |  if_ne	wrlong	#2, fp
0dadc     08 4E 05 51 |  if_ne	add	fp, #8
0dae0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dae4     08 4E 85 51 |  if_ne	sub	fp, #8
0dae8     88 01 90 5D |  if_ne	jmp	#LR__1055
0daec                 | LR__1049
0daec                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0daec     14 4E 05 F1 | 	add	fp, #20
0daf0     A7 1E 02 FB | 	rdlong	local01, fp
0daf4     14 4E 85 F1 | 	sub	fp, #20
0daf8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dafc     24 00 90 5D |  if_ne	jmp	#LR__1050
0db00     08 4E 05 F1 | 	add	fp, #8
0db04     A7 22 02 FB | 	rdlong	local03, fp
0db08     08 4E 85 F1 | 	sub	fp, #8
0db0c     1F 22 0E F2 | 	cmp	local03, #31 wz
0db10     A7 04 68 5C |  if_ne	wrlong	#2, fp
0db14     08 4E 05 51 |  if_ne	add	fp, #8
0db18     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0db1c     08 4E 85 51 |  if_ne	sub	fp, #8
0db20     50 01 90 5D |  if_ne	jmp	#LR__1055
0db24                 | LR__1050
0db24                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0db24     08 4E 05 F1 | 	add	fp, #8
0db28     A7 1E 02 FB | 	rdlong	local01, fp
0db2c     08 4E 85 F1 | 	sub	fp, #8
0db30     1F 1E 0E F2 | 	cmp	local01, #31 wz
0db34     14 4E 05 A1 |  if_e	add	fp, #20
0db38     A7 22 02 AB |  if_e	rdlong	local03, fp
0db3c     14 4E 85 A1 |  if_e	sub	fp, #20
0db40     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db44     1C 00 90 5D |  if_ne	jmp	#LR__1051
0db48     A7 12 02 FB | 	rdlong	arg01, fp
0db4c     0C 4E 05 F1 | 	add	fp, #12
0db50     A7 14 02 FB | 	rdlong	arg02, fp
0db54     0C 4E 85 F1 | 	sub	fp, #12
0db58     E4 B2 B0 FD | 	call	#__system___string_concat
0db5c     A7 FA 61 FC | 	wrlong	result1, fp
0db60     10 01 90 FD | 	jmp	#LR__1055
0db64                 | LR__1051
0db64                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0db64     08 4E 05 F1 | 	add	fp, #8
0db68     A7 1E 02 FB | 	rdlong	local01, fp
0db6c     08 4E 85 F1 | 	sub	fp, #8
0db70     2B 1E 0E F2 | 	cmp	local01, #43 wz
0db74     14 4E 05 A1 |  if_e	add	fp, #20
0db78     A7 22 02 AB |  if_e	rdlong	local03, fp
0db7c     14 4E 85 A1 |  if_e	sub	fp, #20
0db80     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db84     30 00 90 5D |  if_ne	jmp	#LR__1052
0db88     A7 12 02 FB | 	rdlong	arg01, fp
0db8c     9C EE BF FD | 	call	#_convertstring
0db90     FD 12 02 F6 | 	mov	arg01, result1
0db94     0C 4E 05 F1 | 	add	fp, #12
0db98     A7 14 02 FB | 	rdlong	arg02, fp
0db9c     0C 4E 85 F1 | 	sub	fp, #12
0dba0     9C B2 B0 FD | 	call	#__system___string_concat
0dba4     A7 FA 61 FC | 	wrlong	result1, fp
0dba8     08 4E 05 F1 | 	add	fp, #8
0dbac     A7 3E 68 FC | 	wrlong	#31, fp
0dbb0     08 4E 85 F1 | 	sub	fp, #8
0dbb4     BC 00 90 FD | 	jmp	#LR__1055
0dbb8                 | LR__1052
0dbb8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0dbb8     08 4E 05 F1 | 	add	fp, #8
0dbbc     A7 1E 02 FB | 	rdlong	local01, fp
0dbc0     08 4E 85 F1 | 	sub	fp, #8
0dbc4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dbc8     14 4E 05 A1 |  if_e	add	fp, #20
0dbcc     A7 22 02 AB |  if_e	rdlong	local03, fp
0dbd0     14 4E 85 A1 |  if_e	sub	fp, #20
0dbd4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0dbd8     28 00 90 5D |  if_ne	jmp	#LR__1053
0dbdc     A7 1E 02 FB | 	rdlong	local01, fp
0dbe0     0C 4E 05 F1 | 	add	fp, #12
0dbe4     A7 12 02 FB | 	rdlong	arg01, fp
0dbe8     0C 4E 85 F1 | 	sub	fp, #12
0dbec     3C EE BF FD | 	call	#_convertstring
0dbf0     FD 14 02 F6 | 	mov	arg02, result1
0dbf4     0F 13 02 F6 | 	mov	arg01, local01
0dbf8     44 B2 B0 FD | 	call	#__system___string_concat
0dbfc     A7 FA 61 FC | 	wrlong	result1, fp
0dc00     70 00 90 FD | 	jmp	#LR__1055
0dc04                 | LR__1053
0dc04                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0dc04     08 4E 05 F1 | 	add	fp, #8
0dc08     A7 1E 02 FB | 	rdlong	local01, fp
0dc0c     08 4E 85 F1 | 	sub	fp, #8
0dc10     2B 1E 0E F2 | 	cmp	local01, #43 wz
0dc14     14 4E 05 A1 |  if_e	add	fp, #20
0dc18     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc1c     14 4E 85 A1 |  if_e	sub	fp, #20
0dc20     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0dc24     3C 00 90 5D |  if_ne	jmp	#LR__1054
0dc28     A7 12 02 FB | 	rdlong	arg01, fp
0dc2c     FC ED BF FD | 	call	#_convertstring
0dc30     FD 1E 02 F6 | 	mov	local01, result1
0dc34     0C 4E 05 F1 | 	add	fp, #12
0dc38     A7 12 02 FB | 	rdlong	arg01, fp
0dc3c     0C 4E 85 F1 | 	sub	fp, #12
0dc40     E8 ED BF FD | 	call	#_convertstring
0dc44     FD 14 02 F6 | 	mov	arg02, result1
0dc48     0F 13 02 F6 | 	mov	arg01, local01
0dc4c     F0 B1 B0 FD | 	call	#__system___string_concat
0dc50     A7 FA 61 FC | 	wrlong	result1, fp
0dc54     08 4E 05 F1 | 	add	fp, #8
0dc58     A7 3E 68 FC | 	wrlong	#31, fp
0dc5c     08 4E 85 F1 | 	sub	fp, #8
0dc60     10 00 90 FD | 	jmp	#LR__1055
0dc64                 | LR__1054
0dc64     A7 08 68 FC | 	wrlong	#4, fp
0dc68     08 4E 05 F1 | 	add	fp, #8
0dc6c     A7 FE 69 FC | 	wrlong	#255, fp
0dc70     08 4E 85 F1 | 	sub	fp, #8
0dc74                 | LR__1055
0dc74     A7 12 02 F6 | 	mov	arg01, fp
0dc78     0C BD BF FD | 	call	#_push
0dc7c     A7 F0 03 F6 | 	mov	ptra, fp
0dc80     B2 00 A0 FD | 	call	#popregs_
0dc84                 | _do_plus_ret
0dc84     2D 00 64 FD | 	ret
0dc88                 | 
0dc88                 | ' 
0dc88                 | ' sub do_minus
0dc88                 | _do_minus
0dc88     05 4A 05 F6 | 	mov	COUNT_, #5
0dc8c     A8 00 A0 FD | 	call	#pushregs_
0dc90     18 F0 07 F1 | 	add	ptra, #24
0dc94     58 BC BF FD | 	call	#_pop
0dc98     FD 1E 02 F6 | 	mov	local01, result1
0dc9c     FE 20 02 F6 | 	mov	local02, result2
0dca0     FF 22 02 F6 | 	mov	local03, result3
0dca4     0C 4E 05 F1 | 	add	fp, #12
0dca8     A7 1E 62 FC | 	wrlong	local01, fp
0dcac     04 4E 05 F1 | 	add	fp, #4
0dcb0     A7 20 62 FC | 	wrlong	local02, fp
0dcb4     04 4E 05 F1 | 	add	fp, #4
0dcb8     A7 22 62 FC | 	wrlong	local03, fp
0dcbc     14 4E 85 F1 | 	sub	fp, #20
0dcc0     2C BC BF FD | 	call	#_pop
0dcc4     FF 22 02 F6 | 	mov	local03, result3
0dcc8     A7 FA 61 FC | 	wrlong	result1, fp
0dccc     04 4E 05 F1 | 	add	fp, #4
0dcd0     A7 FC 61 FC | 	wrlong	result2, fp
0dcd4     04 4E 05 F1 | 	add	fp, #4
0dcd8     A7 22 62 FC | 	wrlong	local03, fp
0dcdc                 | ' 
0dcdc                 | ' t2=pop()
0dcdc                 | ' t1=pop()
0dcdc                 | ' 
0dcdc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0dcdc     08 4E 85 F1 | 	sub	fp, #8
0dce0     1D 22 0E F2 | 	cmp	local03, #29 wz
0dce4     14 4E 05 A1 |  if_e	add	fp, #20
0dce8     A7 24 02 AB |  if_e	rdlong	local04, fp
0dcec     14 4E 85 A1 |  if_e	sub	fp, #20
0dcf0     12 23 02 A6 |  if_e	mov	local03, local04
0dcf4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dcf8     5C 00 90 5D |  if_ne	jmp	#LR__1061
0dcfc                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0dcfc     0C 4E 05 F1 | 	add	fp, #12
0dd00     A7 1E 02 FB | 	rdlong	local01, fp
0dd04     0C 4E 85 F1 | 	sub	fp, #12
0dd08     A7 22 02 FB | 	rdlong	local03, fp
0dd0c     11 1F 12 F2 | 	cmp	local01, local03 wc
0dd10     1C 00 90 3D |  if_ae	jmp	#LR__1060
0dd14     A7 1E 02 FB | 	rdlong	local01, fp
0dd18     0C 4E 05 F1 | 	add	fp, #12
0dd1c     A7 20 02 FB | 	rdlong	local02, fp
0dd20     0C 4E 85 F1 | 	sub	fp, #12
0dd24     10 1F 82 F1 | 	sub	local01, local02
0dd28     A7 1E 62 FC | 	wrlong	local01, fp
0dd2c     F4 02 90 FD | 	jmp	#LR__1070
0dd30                 | LR__1060
0dd30     A7 1E 02 FB | 	rdlong	local01, fp
0dd34     0C 4E 05 F1 | 	add	fp, #12
0dd38     A7 20 02 FB | 	rdlong	local02, fp
0dd3c     0C 4E 85 F1 | 	sub	fp, #12
0dd40     10 1F 82 F1 | 	sub	local01, local02
0dd44     A7 1E 62 FC | 	wrlong	local01, fp
0dd48     08 4E 05 F1 | 	add	fp, #8
0dd4c     A7 38 68 FC | 	wrlong	#28, fp
0dd50     08 4E 85 F1 | 	sub	fp, #8
0dd54     CC 02 90 FD | 	jmp	#LR__1070
0dd58                 | LR__1061
0dd58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0dd58     08 4E 05 F1 | 	add	fp, #8
0dd5c     A7 1E 02 FB | 	rdlong	local01, fp
0dd60     08 4E 85 F1 | 	sub	fp, #8
0dd64     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dd68     14 4E 05 A1 |  if_e	add	fp, #20
0dd6c     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd70     14 4E 85 A1 |  if_e	sub	fp, #20
0dd74     12 23 02 A6 |  if_e	mov	local03, local04
0dd78     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dd7c     28 00 90 5D |  if_ne	jmp	#LR__1062
0dd80     A7 1E 02 FB | 	rdlong	local01, fp
0dd84     0C 4E 05 F1 | 	add	fp, #12
0dd88     A7 20 02 FB | 	rdlong	local02, fp
0dd8c     0C 4E 85 F1 | 	sub	fp, #12
0dd90     10 1F 82 F1 | 	sub	local01, local02
0dd94     A7 1E 62 FC | 	wrlong	local01, fp
0dd98     08 4E 05 F1 | 	add	fp, #8
0dd9c     A7 38 68 FC | 	wrlong	#28, fp
0dda0     08 4E 85 F1 | 	sub	fp, #8
0dda4     7C 02 90 FD | 	jmp	#LR__1070
0dda8                 | LR__1062
0dda8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0dda8     08 4E 05 F1 | 	add	fp, #8
0ddac     A7 1E 02 FB | 	rdlong	local01, fp
0ddb0     08 4E 85 F1 | 	sub	fp, #8
0ddb4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ddb8     14 4E 05 A1 |  if_e	add	fp, #20
0ddbc     A7 24 02 AB |  if_e	rdlong	local04, fp
0ddc0     14 4E 85 A1 |  if_e	sub	fp, #20
0ddc4     12 23 02 A6 |  if_e	mov	local03, local04
0ddc8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ddcc     34 00 90 5D |  if_ne	jmp	#LR__1063
0ddd0     A7 12 02 FB | 	rdlong	arg01, fp
0ddd4     F4 D6 B0 FD | 	call	#__system___float_fromuns
0ddd8     FD 12 02 F6 | 	mov	arg01, result1
0dddc     0C 4E 05 F1 | 	add	fp, #12
0dde0     A7 14 02 FB | 	rdlong	arg02, fp
0dde4     0C 4E 85 F1 | 	sub	fp, #12
0dde8     1F 14 E6 F4 | 	bitnot	arg02, #31
0ddec     10 D7 B0 FD | 	call	#__system___float_add
0ddf0     A7 FA 61 FC | 	wrlong	result1, fp
0ddf4     08 4E 05 F1 | 	add	fp, #8
0ddf8     A7 3C 68 FC | 	wrlong	#30, fp
0ddfc     08 4E 85 F1 | 	sub	fp, #8
0de00     20 02 90 FD | 	jmp	#LR__1070
0de04                 | LR__1063
0de04                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0de04     08 4E 05 F1 | 	add	fp, #8
0de08     A7 1E 02 FB | 	rdlong	local01, fp
0de0c     08 4E 85 F1 | 	sub	fp, #8
0de10     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de14     14 4E 05 A1 |  if_e	add	fp, #20
0de18     A7 24 02 AB |  if_e	rdlong	local04, fp
0de1c     14 4E 85 A1 |  if_e	sub	fp, #20
0de20     12 23 02 A6 |  if_e	mov	local03, local04
0de24     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de28     1C 00 90 5D |  if_ne	jmp	#LR__1064
0de2c     A7 1E 02 FB | 	rdlong	local01, fp
0de30     0C 4E 05 F1 | 	add	fp, #12
0de34     A7 20 02 FB | 	rdlong	local02, fp
0de38     0C 4E 85 F1 | 	sub	fp, #12
0de3c     10 1F 82 F1 | 	sub	local01, local02
0de40     A7 1E 62 FC | 	wrlong	local01, fp
0de44     DC 01 90 FD | 	jmp	#LR__1070
0de48                 | LR__1064
0de48                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0de48     08 4E 05 F1 | 	add	fp, #8
0de4c     A7 1E 02 FB | 	rdlong	local01, fp
0de50     08 4E 85 F1 | 	sub	fp, #8
0de54     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de58     14 4E 05 A1 |  if_e	add	fp, #20
0de5c     A7 24 02 AB |  if_e	rdlong	local04, fp
0de60     14 4E 85 A1 |  if_e	sub	fp, #20
0de64     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0de68     1C 00 90 5D |  if_ne	jmp	#LR__1065
0de6c     A7 1E 02 FB | 	rdlong	local01, fp
0de70     0C 4E 05 F1 | 	add	fp, #12
0de74     A7 20 02 FB | 	rdlong	local02, fp
0de78     0C 4E 85 F1 | 	sub	fp, #12
0de7c     10 1F 82 F1 | 	sub	local01, local02
0de80     A7 1E 62 FC | 	wrlong	local01, fp
0de84     9C 01 90 FD | 	jmp	#LR__1070
0de88                 | LR__1065
0de88                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0de88     08 4E 05 F1 | 	add	fp, #8
0de8c     A7 1E 02 FB | 	rdlong	local01, fp
0de90     08 4E 85 F1 | 	sub	fp, #8
0de94     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de98     14 4E 05 A1 |  if_e	add	fp, #20
0de9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dea0     14 4E 85 A1 |  if_e	sub	fp, #20
0dea4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dea8     44 00 90 5D |  if_ne	jmp	#LR__1066
0deac     A7 12 02 FB | 	rdlong	arg01, fp
0deb0     09 13 52 F6 | 	abs	arg01, arg01 wc
0deb4     1F 26 C6 C9 |  if_b	decod	local05, #31
0deb8     00 26 06 36 |  if_ae	mov	local05, #0
0debc     0C D6 B0 FD | 	call	#__system___float_fromuns
0dec0     13 FB 61 F5 | 	xor	result1, local05
0dec4     FD 12 02 F6 | 	mov	arg01, result1
0dec8     0C 4E 05 F1 | 	add	fp, #12
0decc     A7 14 02 FB | 	rdlong	arg02, fp
0ded0     0C 4E 85 F1 | 	sub	fp, #12
0ded4     1F 14 E6 F4 | 	bitnot	arg02, #31
0ded8     24 D6 B0 FD | 	call	#__system___float_add
0dedc     A7 FA 61 FC | 	wrlong	result1, fp
0dee0     08 4E 05 F1 | 	add	fp, #8
0dee4     A7 3C 68 FC | 	wrlong	#30, fp
0dee8     08 4E 85 F1 | 	sub	fp, #8
0deec     34 01 90 FD | 	jmp	#LR__1070
0def0                 | LR__1066
0def0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0def0     08 4E 05 F1 | 	add	fp, #8
0def4     A7 1E 02 FB | 	rdlong	local01, fp
0def8     08 4E 85 F1 | 	sub	fp, #8
0defc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df00     14 4E 05 A1 |  if_e	add	fp, #20
0df04     A7 22 02 AB |  if_e	rdlong	local03, fp
0df08     14 4E 85 A1 |  if_e	sub	fp, #20
0df0c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0df10     2C 00 90 5D |  if_ne	jmp	#LR__1067
0df14     A7 1E 02 FB | 	rdlong	local01, fp
0df18     0C 4E 05 F1 | 	add	fp, #12
0df1c     A7 12 02 FB | 	rdlong	arg01, fp
0df20     0C 4E 85 F1 | 	sub	fp, #12
0df24     A4 D5 B0 FD | 	call	#__system___float_fromuns
0df28     FD 14 02 F6 | 	mov	arg02, result1
0df2c     0F 13 02 F6 | 	mov	arg01, local01
0df30     1F 14 E6 F4 | 	bitnot	arg02, #31
0df34     C8 D5 B0 FD | 	call	#__system___float_add
0df38     A7 FA 61 FC | 	wrlong	result1, fp
0df3c     E4 00 90 FD | 	jmp	#LR__1070
0df40                 | LR__1067
0df40                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0df40     08 4E 05 F1 | 	add	fp, #8
0df44     A7 1E 02 FB | 	rdlong	local01, fp
0df48     08 4E 85 F1 | 	sub	fp, #8
0df4c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df50     14 4E 05 A1 |  if_e	add	fp, #20
0df54     A7 22 02 AB |  if_e	rdlong	local03, fp
0df58     14 4E 85 A1 |  if_e	sub	fp, #20
0df5c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0df60     3C 00 90 5D |  if_ne	jmp	#LR__1068
0df64     A7 1E 02 FB | 	rdlong	local01, fp
0df68     0C 4E 05 F1 | 	add	fp, #12
0df6c     A7 12 02 FB | 	rdlong	arg01, fp
0df70     0C 4E 85 F1 | 	sub	fp, #12
0df74     09 13 52 F6 | 	abs	arg01, arg01 wc
0df78     1F 26 C6 C9 |  if_b	decod	local05, #31
0df7c     00 26 06 36 |  if_ae	mov	local05, #0
0df80     48 D5 B0 FD | 	call	#__system___float_fromuns
0df84     13 FB 61 F5 | 	xor	result1, local05
0df88     FD 14 02 F6 | 	mov	arg02, result1
0df8c     0F 13 02 F6 | 	mov	arg01, local01
0df90     1F 14 E6 F4 | 	bitnot	arg02, #31
0df94     68 D5 B0 FD | 	call	#__system___float_add
0df98     A7 FA 61 FC | 	wrlong	result1, fp
0df9c     84 00 90 FD | 	jmp	#LR__1070
0dfa0                 | LR__1068
0dfa0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0dfa0     08 4E 05 F1 | 	add	fp, #8
0dfa4     A7 1E 02 FB | 	rdlong	local01, fp
0dfa8     08 4E 85 F1 | 	sub	fp, #8
0dfac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dfb0     14 4E 05 A1 |  if_e	add	fp, #20
0dfb4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfb8     14 4E 85 A1 |  if_e	sub	fp, #20
0dfbc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dfc0     20 00 90 5D |  if_ne	jmp	#LR__1069
0dfc4     A7 12 02 FB | 	rdlong	arg01, fp
0dfc8     0C 4E 05 F1 | 	add	fp, #12
0dfcc     A7 14 02 FB | 	rdlong	arg02, fp
0dfd0     0C 4E 85 F1 | 	sub	fp, #12
0dfd4     1F 14 E6 F4 | 	bitnot	arg02, #31
0dfd8     24 D5 B0 FD | 	call	#__system___float_add
0dfdc     A7 FA 61 FC | 	wrlong	result1, fp
0dfe0     40 00 90 FD | 	jmp	#LR__1070
0dfe4                 | LR__1069
0dfe4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0dfe4     08 4E 05 F1 | 	add	fp, #8
0dfe8     A7 1E 02 FB | 	rdlong	local01, fp
0dfec     08 4E 85 F1 | 	sub	fp, #8
0dff0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dff4     14 4E 05 51 |  if_ne	add	fp, #20
0dff8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0dffc     14 4E 85 51 |  if_ne	sub	fp, #20
0e000     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e004     A7 06 68 AC |  if_e	wrlong	#3, fp
0e008     08 4E 05 A1 |  if_e	add	fp, #8
0e00c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e010     08 4E 85 A1 |  if_e	sub	fp, #8
0e014     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0e018     08 4E 05 51 |  if_ne	add	fp, #8
0e01c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e020     08 4E 85 51 |  if_ne	sub	fp, #8
0e024                 | LR__1070
0e024     A7 12 02 F6 | 	mov	arg01, fp
0e028     5C B9 BF FD | 	call	#_push
0e02c     A7 F0 03 F6 | 	mov	ptra, fp
0e030     B2 00 A0 FD | 	call	#popregs_
0e034                 | _do_minus_ret
0e034     2D 00 64 FD | 	ret
0e038                 | 
0e038                 | ' 
0e038                 | ' sub do_and 
0e038                 | _do_and
0e038     03 4A 05 F6 | 	mov	COUNT_, #3
0e03c     A8 00 A0 FD | 	call	#pushregs_
0e040     18 F0 07 F1 | 	add	ptra, #24
0e044     A8 B8 BF FD | 	call	#_pop
0e048     FD 12 02 F6 | 	mov	arg01, result1
0e04c     FE 1E 02 F6 | 	mov	local01, result2
0e050     FF 20 02 F6 | 	mov	local02, result3
0e054     0C 4E 05 F1 | 	add	fp, #12
0e058     A7 12 62 FC | 	wrlong	arg01, fp
0e05c     04 4E 05 F1 | 	add	fp, #4
0e060     A7 1E 62 FC | 	wrlong	local01, fp
0e064     04 4E 05 F1 | 	add	fp, #4
0e068     A7 20 62 FC | 	wrlong	local02, fp
0e06c     14 4E 85 F1 | 	sub	fp, #20
0e070     7C B8 BF FD | 	call	#_pop
0e074     FF 22 02 F6 | 	mov	local03, result3
0e078     A7 FA 61 FC | 	wrlong	result1, fp
0e07c     04 4E 05 F1 | 	add	fp, #4
0e080     A7 FC 61 FC | 	wrlong	result2, fp
0e084     04 4E 05 F1 | 	add	fp, #4
0e088     A7 22 62 FC | 	wrlong	local03, fp
0e08c                 | ' 
0e08c                 | ' t2=pop()
0e08c                 | ' t1=pop()
0e08c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e08c     08 4E 85 F1 | 	sub	fp, #8
0e090     1C 22 0E F2 | 	cmp	local03, #28 wz
0e094     A7 22 02 AB |  if_e	rdlong	local03, fp
0e098     A7 22 62 AC |  if_e	wrlong	local03, fp
0e09c     08 4E 05 A1 |  if_e	add	fp, #8
0e0a0     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e0a4     08 4E 85 A1 |  if_e	sub	fp, #8
0e0a8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e0a8     14 4E 05 F1 | 	add	fp, #20
0e0ac     A7 22 02 FB | 	rdlong	local03, fp
0e0b0     14 4E 85 F1 | 	sub	fp, #20
0e0b4     1C 22 0E F2 | 	cmp	local03, #28 wz
0e0b8     18 00 90 5D |  if_ne	jmp	#LR__1080
0e0bc     0C 4E 05 F1 | 	add	fp, #12
0e0c0     A7 22 02 FB | 	rdlong	local03, fp
0e0c4     A7 22 62 FC | 	wrlong	local03, fp
0e0c8     08 4E 05 F1 | 	add	fp, #8
0e0cc     A7 3A 68 FC | 	wrlong	#29, fp
0e0d0     14 4E 85 F1 | 	sub	fp, #20
0e0d4                 | LR__1080
0e0d4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0e0d4     08 4E 05 F1 | 	add	fp, #8
0e0d8     A7 22 02 FB | 	rdlong	local03, fp
0e0dc     08 4E 85 F1 | 	sub	fp, #8
0e0e0     1F 22 0E F2 | 	cmp	local03, #31 wz
0e0e4     14 4E 05 51 |  if_ne	add	fp, #20
0e0e8     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e0ec     14 4E 85 51 |  if_ne	sub	fp, #20
0e0f0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e0f4     08 4E 05 51 |  if_ne	add	fp, #8
0e0f8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e0fc     08 4E 85 51 |  if_ne	sub	fp, #8
0e100     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e104     14 4E 05 51 |  if_ne	add	fp, #20
0e108     14 4E 85 51 |  if_ne	sub	fp, #20
0e10c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e110     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e114     08 4E 05 A1 |  if_e	add	fp, #8
0e118     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e11c     08 4E 85 A1 |  if_e	sub	fp, #8
0e120     18 00 90 AD |  if_e	jmp	#LR__1081
0e124     A7 22 02 FB | 	rdlong	local03, fp
0e128     0C 4E 05 F1 | 	add	fp, #12
0e12c     A7 1E 02 FB | 	rdlong	local01, fp
0e130     0C 4E 85 F1 | 	sub	fp, #12
0e134     0F 23 02 F5 | 	and	local03, local01
0e138     A7 22 62 FC | 	wrlong	local03, fp
0e13c                 | LR__1081
0e13c     A7 12 02 F6 | 	mov	arg01, fp
0e140     44 B8 BF FD | 	call	#_push
0e144     A7 F0 03 F6 | 	mov	ptra, fp
0e148     B2 00 A0 FD | 	call	#popregs_
0e14c                 | _do_and_ret
0e14c     2D 00 64 FD | 	ret
0e150                 | 
0e150                 | ' 
0e150                 | ' sub do_or 
0e150                 | _do_or
0e150     03 4A 05 F6 | 	mov	COUNT_, #3
0e154     A8 00 A0 FD | 	call	#pushregs_
0e158     18 F0 07 F1 | 	add	ptra, #24
0e15c     90 B7 BF FD | 	call	#_pop
0e160     FD 12 02 F6 | 	mov	arg01, result1
0e164     FE 1E 02 F6 | 	mov	local01, result2
0e168     FF 20 02 F6 | 	mov	local02, result3
0e16c     0C 4E 05 F1 | 	add	fp, #12
0e170     A7 12 62 FC | 	wrlong	arg01, fp
0e174     04 4E 05 F1 | 	add	fp, #4
0e178     A7 1E 62 FC | 	wrlong	local01, fp
0e17c     04 4E 05 F1 | 	add	fp, #4
0e180     A7 20 62 FC | 	wrlong	local02, fp
0e184     14 4E 85 F1 | 	sub	fp, #20
0e188     64 B7 BF FD | 	call	#_pop
0e18c     FF 22 02 F6 | 	mov	local03, result3
0e190     A7 FA 61 FC | 	wrlong	result1, fp
0e194     04 4E 05 F1 | 	add	fp, #4
0e198     A7 FC 61 FC | 	wrlong	result2, fp
0e19c     04 4E 05 F1 | 	add	fp, #4
0e1a0     A7 22 62 FC | 	wrlong	local03, fp
0e1a4                 | ' 
0e1a4                 | ' t2=pop()
0e1a4                 | ' t1=pop()
0e1a4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e1a4     08 4E 85 F1 | 	sub	fp, #8
0e1a8     1C 22 0E F2 | 	cmp	local03, #28 wz
0e1ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0e1b0     A7 22 62 AC |  if_e	wrlong	local03, fp
0e1b4     08 4E 05 A1 |  if_e	add	fp, #8
0e1b8     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e1bc     08 4E 85 A1 |  if_e	sub	fp, #8
0e1c0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e1c0     14 4E 05 F1 | 	add	fp, #20
0e1c4     A7 22 02 FB | 	rdlong	local03, fp
0e1c8     14 4E 85 F1 | 	sub	fp, #20
0e1cc     1C 22 0E F2 | 	cmp	local03, #28 wz
0e1d0     18 00 90 5D |  if_ne	jmp	#LR__1090
0e1d4     0C 4E 05 F1 | 	add	fp, #12
0e1d8     A7 22 02 FB | 	rdlong	local03, fp
0e1dc     A7 22 62 FC | 	wrlong	local03, fp
0e1e0     08 4E 05 F1 | 	add	fp, #8
0e1e4     A7 3A 68 FC | 	wrlong	#29, fp
0e1e8     14 4E 85 F1 | 	sub	fp, #20
0e1ec                 | LR__1090
0e1ec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0e1ec     08 4E 05 F1 | 	add	fp, #8
0e1f0     A7 22 02 FB | 	rdlong	local03, fp
0e1f4     08 4E 85 F1 | 	sub	fp, #8
0e1f8     1F 22 0E F2 | 	cmp	local03, #31 wz
0e1fc     14 4E 05 51 |  if_ne	add	fp, #20
0e200     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e204     14 4E 85 51 |  if_ne	sub	fp, #20
0e208     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e20c     08 4E 05 51 |  if_ne	add	fp, #8
0e210     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e214     08 4E 85 51 |  if_ne	sub	fp, #8
0e218     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e21c     14 4E 05 51 |  if_ne	add	fp, #20
0e220     14 4E 85 51 |  if_ne	sub	fp, #20
0e224     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e228     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e22c     08 4E 05 A1 |  if_e	add	fp, #8
0e230     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e234     08 4E 85 A1 |  if_e	sub	fp, #8
0e238     18 00 90 AD |  if_e	jmp	#LR__1091
0e23c     A7 22 02 FB | 	rdlong	local03, fp
0e240     0C 4E 05 F1 | 	add	fp, #12
0e244     A7 1E 02 FB | 	rdlong	local01, fp
0e248     0C 4E 85 F1 | 	sub	fp, #12
0e24c     0F 23 42 F5 | 	or	local03, local01
0e250     A7 22 62 FC | 	wrlong	local03, fp
0e254                 | LR__1091
0e254     A7 12 02 F6 | 	mov	arg01, fp
0e258     2C B7 BF FD | 	call	#_push
0e25c     A7 F0 03 F6 | 	mov	ptra, fp
0e260     B2 00 A0 FD | 	call	#popregs_
0e264                 | _do_or_ret
0e264     2D 00 64 FD | 	ret
0e268                 | 
0e268                 | ' 
0e268                 | ' sub do_mul
0e268                 | _do_mul
0e268     05 4A 05 F6 | 	mov	COUNT_, #5
0e26c     A8 00 A0 FD | 	call	#pushregs_
0e270     18 F0 07 F1 | 	add	ptra, #24
0e274     78 B6 BF FD | 	call	#_pop
0e278     FD 1E 02 F6 | 	mov	local01, result1
0e27c     FE 20 02 F6 | 	mov	local02, result2
0e280     FF 22 02 F6 | 	mov	local03, result3
0e284     0C 4E 05 F1 | 	add	fp, #12
0e288     A7 1E 62 FC | 	wrlong	local01, fp
0e28c     04 4E 05 F1 | 	add	fp, #4
0e290     A7 20 62 FC | 	wrlong	local02, fp
0e294     04 4E 05 F1 | 	add	fp, #4
0e298     A7 22 62 FC | 	wrlong	local03, fp
0e29c     14 4E 85 F1 | 	sub	fp, #20
0e2a0     4C B6 BF FD | 	call	#_pop
0e2a4     FF 22 02 F6 | 	mov	local03, result3
0e2a8     A7 FA 61 FC | 	wrlong	result1, fp
0e2ac     04 4E 05 F1 | 	add	fp, #4
0e2b0     A7 FC 61 FC | 	wrlong	result2, fp
0e2b4     04 4E 05 F1 | 	add	fp, #4
0e2b8     A7 22 62 FC | 	wrlong	local03, fp
0e2bc                 | ' 
0e2bc                 | ' t2=pop()
0e2bc                 | ' t1=pop()
0e2bc                 | ' 
0e2bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0e2bc     08 4E 85 F1 | 	sub	fp, #8
0e2c0     1D 22 0E F2 | 	cmp	local03, #29 wz
0e2c4     14 4E 05 A1 |  if_e	add	fp, #20
0e2c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0e2cc     14 4E 85 A1 |  if_e	sub	fp, #20
0e2d0     12 23 02 A6 |  if_e	mov	local03, local04
0e2d4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e2d8     20 00 90 5D |  if_ne	jmp	#LR__1100
0e2dc     A7 20 02 FB | 	rdlong	local02, fp
0e2e0     0C 4E 05 F1 | 	add	fp, #12
0e2e4     A7 22 02 FB | 	rdlong	local03, fp
0e2e8     11 21 02 FD | 	qmul	local02, local03
0e2ec     0C 4E 85 F1 | 	sub	fp, #12
0e2f0     18 1E 62 FD | 	getqx	local01
0e2f4     A7 1E 62 FC | 	wrlong	local01, fp
0e2f8     C4 02 90 FD | 	jmp	#LR__1109
0e2fc                 | LR__1100
0e2fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0e2fc     08 4E 05 F1 | 	add	fp, #8
0e300     A7 1E 02 FB | 	rdlong	local01, fp
0e304     08 4E 85 F1 | 	sub	fp, #8
0e308     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e30c     14 4E 05 A1 |  if_e	add	fp, #20
0e310     A7 24 02 AB |  if_e	rdlong	local04, fp
0e314     14 4E 85 A1 |  if_e	sub	fp, #20
0e318     12 23 02 A6 |  if_e	mov	local03, local04
0e31c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e320     2C 00 90 5D |  if_ne	jmp	#LR__1101
0e324     A7 20 02 FB | 	rdlong	local02, fp
0e328     0C 4E 05 F1 | 	add	fp, #12
0e32c     A7 22 02 FB | 	rdlong	local03, fp
0e330     11 21 02 FD | 	qmul	local02, local03
0e334     0C 4E 85 F1 | 	sub	fp, #12
0e338     18 1E 62 FD | 	getqx	local01
0e33c     A7 1E 62 FC | 	wrlong	local01, fp
0e340     08 4E 05 F1 | 	add	fp, #8
0e344     A7 38 68 FC | 	wrlong	#28, fp
0e348     08 4E 85 F1 | 	sub	fp, #8
0e34c     70 02 90 FD | 	jmp	#LR__1109
0e350                 | LR__1101
0e350                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e350     08 4E 05 F1 | 	add	fp, #8
0e354     A7 1E 02 FB | 	rdlong	local01, fp
0e358     08 4E 85 F1 | 	sub	fp, #8
0e35c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e360     14 4E 05 A1 |  if_e	add	fp, #20
0e364     A7 24 02 AB |  if_e	rdlong	local04, fp
0e368     14 4E 85 A1 |  if_e	sub	fp, #20
0e36c     12 23 02 A6 |  if_e	mov	local03, local04
0e370     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e374     30 00 90 5D |  if_ne	jmp	#LR__1102
0e378     A7 12 02 FB | 	rdlong	arg01, fp
0e37c     4C D1 B0 FD | 	call	#__system___float_fromuns
0e380     FD 12 02 F6 | 	mov	arg01, result1
0e384     0C 4E 05 F1 | 	add	fp, #12
0e388     A7 14 02 FB | 	rdlong	arg02, fp
0e38c     0C 4E 85 F1 | 	sub	fp, #12
0e390     3C D5 B0 FD | 	call	#__system___float_mul
0e394     A7 FA 61 FC | 	wrlong	result1, fp
0e398     08 4E 05 F1 | 	add	fp, #8
0e39c     A7 3C 68 FC | 	wrlong	#30, fp
0e3a0     08 4E 85 F1 | 	sub	fp, #8
0e3a4     18 02 90 FD | 	jmp	#LR__1109
0e3a8                 | LR__1102
0e3a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0e3a8     08 4E 05 F1 | 	add	fp, #8
0e3ac     A7 1E 02 FB | 	rdlong	local01, fp
0e3b0     08 4E 85 F1 | 	sub	fp, #8
0e3b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e3b8     14 4E 05 A1 |  if_e	add	fp, #20
0e3bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e3c0     14 4E 85 A1 |  if_e	sub	fp, #20
0e3c4     12 23 02 A6 |  if_e	mov	local03, local04
0e3c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e3cc     20 00 90 5D |  if_ne	jmp	#LR__1103
0e3d0     A7 20 02 FB | 	rdlong	local02, fp
0e3d4     0C 4E 05 F1 | 	add	fp, #12
0e3d8     A7 22 02 FB | 	rdlong	local03, fp
0e3dc     11 21 02 FD | 	qmul	local02, local03
0e3e0     0C 4E 85 F1 | 	sub	fp, #12
0e3e4     18 1E 62 FD | 	getqx	local01
0e3e8     A7 1E 62 FC | 	wrlong	local01, fp
0e3ec     D0 01 90 FD | 	jmp	#LR__1109
0e3f0                 | LR__1103
0e3f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0e3f0     08 4E 05 F1 | 	add	fp, #8
0e3f4     A7 1E 02 FB | 	rdlong	local01, fp
0e3f8     08 4E 85 F1 | 	sub	fp, #8
0e3fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e400     14 4E 05 A1 |  if_e	add	fp, #20
0e404     A7 24 02 AB |  if_e	rdlong	local04, fp
0e408     14 4E 85 A1 |  if_e	sub	fp, #20
0e40c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e410     20 00 90 5D |  if_ne	jmp	#LR__1104
0e414     A7 20 02 FB | 	rdlong	local02, fp
0e418     0C 4E 05 F1 | 	add	fp, #12
0e41c     A7 22 02 FB | 	rdlong	local03, fp
0e420     11 21 02 FD | 	qmul	local02, local03
0e424     0C 4E 85 F1 | 	sub	fp, #12
0e428     18 1E 62 FD | 	getqx	local01
0e42c     A7 1E 62 FC | 	wrlong	local01, fp
0e430     8C 01 90 FD | 	jmp	#LR__1109
0e434                 | LR__1104
0e434                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e434     08 4E 05 F1 | 	add	fp, #8
0e438     A7 1E 02 FB | 	rdlong	local01, fp
0e43c     08 4E 85 F1 | 	sub	fp, #8
0e440     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e444     14 4E 05 A1 |  if_e	add	fp, #20
0e448     A7 22 02 AB |  if_e	rdlong	local03, fp
0e44c     14 4E 85 A1 |  if_e	sub	fp, #20
0e450     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e454     40 00 90 5D |  if_ne	jmp	#LR__1105
0e458     A7 12 02 FB | 	rdlong	arg01, fp
0e45c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e460     1F 26 C6 C9 |  if_b	decod	local05, #31
0e464     00 26 06 36 |  if_ae	mov	local05, #0
0e468     60 D0 B0 FD | 	call	#__system___float_fromuns
0e46c     13 FB 61 F5 | 	xor	result1, local05
0e470     FD 12 02 F6 | 	mov	arg01, result1
0e474     0C 4E 05 F1 | 	add	fp, #12
0e478     A7 14 02 FB | 	rdlong	arg02, fp
0e47c     0C 4E 85 F1 | 	sub	fp, #12
0e480     4C D4 B0 FD | 	call	#__system___float_mul
0e484     A7 FA 61 FC | 	wrlong	result1, fp
0e488     08 4E 05 F1 | 	add	fp, #8
0e48c     A7 3C 68 FC | 	wrlong	#30, fp
0e490     08 4E 85 F1 | 	sub	fp, #8
0e494     28 01 90 FD | 	jmp	#LR__1109
0e498                 | LR__1105
0e498                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0e498     08 4E 05 F1 | 	add	fp, #8
0e49c     A7 1E 02 FB | 	rdlong	local01, fp
0e4a0     08 4E 85 F1 | 	sub	fp, #8
0e4a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e4a8     14 4E 05 A1 |  if_e	add	fp, #20
0e4ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0e4b0     14 4E 85 A1 |  if_e	sub	fp, #20
0e4b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e4b8     28 00 90 5D |  if_ne	jmp	#LR__1106
0e4bc     A7 1E 02 FB | 	rdlong	local01, fp
0e4c0     0C 4E 05 F1 | 	add	fp, #12
0e4c4     A7 12 02 FB | 	rdlong	arg01, fp
0e4c8     0C 4E 85 F1 | 	sub	fp, #12
0e4cc     FC CF B0 FD | 	call	#__system___float_fromuns
0e4d0     FD 14 02 F6 | 	mov	arg02, result1
0e4d4     0F 13 02 F6 | 	mov	arg01, local01
0e4d8     F4 D3 B0 FD | 	call	#__system___float_mul
0e4dc     A7 FA 61 FC | 	wrlong	result1, fp
0e4e0     DC 00 90 FD | 	jmp	#LR__1109
0e4e4                 | LR__1106
0e4e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0e4e4     08 4E 05 F1 | 	add	fp, #8
0e4e8     A7 1E 02 FB | 	rdlong	local01, fp
0e4ec     08 4E 85 F1 | 	sub	fp, #8
0e4f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e4f4     14 4E 05 A1 |  if_e	add	fp, #20
0e4f8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e4fc     14 4E 85 A1 |  if_e	sub	fp, #20
0e500     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e504     38 00 90 5D |  if_ne	jmp	#LR__1107
0e508     A7 1E 02 FB | 	rdlong	local01, fp
0e50c     0C 4E 05 F1 | 	add	fp, #12
0e510     A7 12 02 FB | 	rdlong	arg01, fp
0e514     0C 4E 85 F1 | 	sub	fp, #12
0e518     09 13 52 F6 | 	abs	arg01, arg01 wc
0e51c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e520     00 26 06 36 |  if_ae	mov	local05, #0
0e524     A4 CF B0 FD | 	call	#__system___float_fromuns
0e528     13 FB 61 F5 | 	xor	result1, local05
0e52c     FD 14 02 F6 | 	mov	arg02, result1
0e530     0F 13 02 F6 | 	mov	arg01, local01
0e534     98 D3 B0 FD | 	call	#__system___float_mul
0e538     A7 FA 61 FC | 	wrlong	result1, fp
0e53c     80 00 90 FD | 	jmp	#LR__1109
0e540                 | LR__1107
0e540                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0e540     08 4E 05 F1 | 	add	fp, #8
0e544     A7 1E 02 FB | 	rdlong	local01, fp
0e548     08 4E 85 F1 | 	sub	fp, #8
0e54c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e550     14 4E 05 A1 |  if_e	add	fp, #20
0e554     A7 22 02 AB |  if_e	rdlong	local03, fp
0e558     14 4E 85 A1 |  if_e	sub	fp, #20
0e55c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e560     1C 00 90 5D |  if_ne	jmp	#LR__1108
0e564     A7 12 02 FB | 	rdlong	arg01, fp
0e568     0C 4E 05 F1 | 	add	fp, #12
0e56c     A7 14 02 FB | 	rdlong	arg02, fp
0e570     0C 4E 85 F1 | 	sub	fp, #12
0e574     58 D3 B0 FD | 	call	#__system___float_mul
0e578     A7 FA 61 FC | 	wrlong	result1, fp
0e57c     40 00 90 FD | 	jmp	#LR__1109
0e580                 | LR__1108
0e580                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0e580     08 4E 05 F1 | 	add	fp, #8
0e584     A7 1E 02 FB | 	rdlong	local01, fp
0e588     08 4E 85 F1 | 	sub	fp, #8
0e58c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e590     14 4E 05 51 |  if_ne	add	fp, #20
0e594     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e598     14 4E 85 51 |  if_ne	sub	fp, #20
0e59c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e5a0     A7 10 68 AC |  if_e	wrlong	#8, fp
0e5a4     08 4E 05 A1 |  if_e	add	fp, #8
0e5a8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e5ac     08 4E 85 A1 |  if_e	sub	fp, #8
0e5b0     A7 12 68 5C |  if_ne	wrlong	#9, fp
0e5b4     08 4E 05 51 |  if_ne	add	fp, #8
0e5b8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e5bc     08 4E 85 51 |  if_ne	sub	fp, #8
0e5c0                 | LR__1109
0e5c0     A7 12 02 F6 | 	mov	arg01, fp
0e5c4     C0 B3 BF FD | 	call	#_push
0e5c8     A7 F0 03 F6 | 	mov	ptra, fp
0e5cc     B2 00 A0 FD | 	call	#popregs_
0e5d0                 | _do_mul_ret
0e5d0     2D 00 64 FD | 	ret
0e5d4                 | 
0e5d4                 | ' 
0e5d4                 | ' sub do_div 
0e5d4                 | _do_div
0e5d4     01 4A 05 F6 | 	mov	COUNT_, #1
0e5d8     A8 00 A0 FD | 	call	#pushregs_
0e5dc     18 F0 07 F1 | 	add	ptra, #24
0e5e0     0C B3 BF FD | 	call	#_pop
0e5e4     FD 64 02 F6 | 	mov	muldivb_, result1
0e5e8     FE 62 02 F6 | 	mov	muldiva_, result2
0e5ec     FF 1E 02 F6 | 	mov	local01, result3
0e5f0     0C 4E 05 F1 | 	add	fp, #12
0e5f4     A7 64 62 FC | 	wrlong	muldivb_, fp
0e5f8     04 4E 05 F1 | 	add	fp, #4
0e5fc     A7 62 62 FC | 	wrlong	muldiva_, fp
0e600     04 4E 05 F1 | 	add	fp, #4
0e604     A7 1E 62 FC | 	wrlong	local01, fp
0e608     14 4E 85 F1 | 	sub	fp, #20
0e60c     E0 B2 BF FD | 	call	#_pop
0e610     A7 FA 61 FC | 	wrlong	result1, fp
0e614     04 4E 05 F1 | 	add	fp, #4
0e618     A7 FC 61 FC | 	wrlong	result2, fp
0e61c     04 4E 05 F1 | 	add	fp, #4
0e620     A7 FE 61 FC | 	wrlong	result3, fp
0e624                 | ' 
0e624                 | ' t2=pop()
0e624                 | ' t1=pop()
0e624                 | ' 
0e624                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0e624     08 4E 85 F1 | 	sub	fp, #8
0e628     1F FE 0D F2 | 	cmp	result3, #31 wz
0e62c     14 4E 05 51 |  if_ne	add	fp, #20
0e630     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e634     14 4E 85 51 |  if_ne	sub	fp, #20
0e638     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e63c     A7 14 68 AC |  if_e	wrlong	#10, fp
0e640     08 4E 05 A1 |  if_e	add	fp, #8
0e644     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e648     08 4E 85 A1 |  if_e	sub	fp, #8
0e64c     90 01 90 AD |  if_e	jmp	#LR__1116
0e650                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e650     08 4E 05 F1 | 	add	fp, #8
0e654     A7 64 02 FB | 	rdlong	muldivb_, fp
0e658     08 4E 85 F1 | 	sub	fp, #8
0e65c     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0e660     1C 00 90 5D |  if_ne	jmp	#LR__1110
0e664     08 4E 05 F1 | 	add	fp, #8
0e668     A7 38 68 FC | 	wrlong	#28, fp
0e66c     08 4E 85 F1 | 	sub	fp, #8
0e670     A7 12 02 FB | 	rdlong	arg01, fp
0e674     00 14 06 F6 | 	mov	arg02, #0
0e678     1C D7 B0 FD | 	call	#__system___float_tointeger
0e67c     A7 FA 61 FC | 	wrlong	result1, fp
0e680                 | LR__1110
0e680                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e680     14 4E 05 F1 | 	add	fp, #20
0e684     A7 64 02 FB | 	rdlong	muldivb_, fp
0e688     14 4E 85 F1 | 	sub	fp, #20
0e68c     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0e690     28 00 90 5D |  if_ne	jmp	#LR__1111
0e694     14 4E 05 F1 | 	add	fp, #20
0e698     A7 38 68 FC | 	wrlong	#28, fp
0e69c     08 4E 85 F1 | 	sub	fp, #8
0e6a0     A7 12 02 FB | 	rdlong	arg01, fp
0e6a4     0C 4E 85 F1 | 	sub	fp, #12
0e6a8     00 14 06 F6 | 	mov	arg02, #0
0e6ac     E8 D6 B0 FD | 	call	#__system___float_tointeger
0e6b0     0C 4E 05 F1 | 	add	fp, #12
0e6b4     A7 FA 61 FC | 	wrlong	result1, fp
0e6b8     0C 4E 85 F1 | 	sub	fp, #12
0e6bc                 | LR__1111
0e6bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0e6bc     08 4E 05 F1 | 	add	fp, #8
0e6c0     A7 64 02 FB | 	rdlong	muldivb_, fp
0e6c4     08 4E 85 F1 | 	sub	fp, #8
0e6c8     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0e6cc     14 4E 05 A1 |  if_e	add	fp, #20
0e6d0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e6d4     14 4E 85 A1 |  if_e	sub	fp, #20
0e6d8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e6dc     20 00 90 5D |  if_ne	jmp	#LR__1112
0e6e0     0C 4E 05 F1 | 	add	fp, #12
0e6e4     A7 1E 02 FB | 	rdlong	local01, fp
0e6e8     0C 4E 85 F1 | 	sub	fp, #12
0e6ec     A7 64 02 FB | 	rdlong	muldivb_, fp
0e6f0     0F 65 12 FD | 	qdiv	muldivb_, local01
0e6f4     18 1E 62 FD | 	getqx	local01
0e6f8     A7 1E 62 FC | 	wrlong	local01, fp
0e6fc     E0 00 90 FD | 	jmp	#LR__1116
0e700                 | LR__1112
0e700                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0e700     08 4E 05 F1 | 	add	fp, #8
0e704     A7 64 02 FB | 	rdlong	muldivb_, fp
0e708     08 4E 85 F1 | 	sub	fp, #8
0e70c     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0e710     14 4E 05 A1 |  if_e	add	fp, #20
0e714     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e718     14 4E 85 A1 |  if_e	sub	fp, #20
0e71c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e720     2C 00 90 5D |  if_ne	jmp	#LR__1113
0e724     0C 4E 05 F1 | 	add	fp, #12
0e728     A7 1E 02 FB | 	rdlong	local01, fp
0e72c     0C 4E 85 F1 | 	sub	fp, #12
0e730     A7 64 02 FB | 	rdlong	muldivb_, fp
0e734     0F 65 12 FD | 	qdiv	muldivb_, local01
0e738     18 1E 62 FD | 	getqx	local01
0e73c     A7 1E 62 FC | 	wrlong	local01, fp
0e740     08 4E 05 F1 | 	add	fp, #8
0e744     A7 38 68 FC | 	wrlong	#28, fp
0e748     08 4E 85 F1 | 	sub	fp, #8
0e74c     90 00 90 FD | 	jmp	#LR__1116
0e750                 | LR__1113
0e750                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0e750     08 4E 05 F1 | 	add	fp, #8
0e754     A7 64 02 FB | 	rdlong	muldivb_, fp
0e758     08 4E 85 F1 | 	sub	fp, #8
0e75c     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0e760     14 4E 05 A1 |  if_e	add	fp, #20
0e764     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e768     14 4E 85 A1 |  if_e	sub	fp, #20
0e76c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e770     1C 00 90 5D |  if_ne	jmp	#LR__1114
0e774     A7 62 02 FB | 	rdlong	muldiva_, fp
0e778     0C 4E 05 F1 | 	add	fp, #12
0e77c     A7 64 02 FB | 	rdlong	muldivb_, fp
0e780     0C 4E 85 F1 | 	sub	fp, #12
0e784     BA 00 A0 FD | 	call	#divide_
0e788     A7 64 62 FC | 	wrlong	muldivb_, fp
0e78c     50 00 90 FD | 	jmp	#LR__1116
0e790                 | LR__1114
0e790                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0e790     08 4E 05 F1 | 	add	fp, #8
0e794     A7 64 02 FB | 	rdlong	muldivb_, fp
0e798     08 4E 85 F1 | 	sub	fp, #8
0e79c     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0e7a0     14 4E 05 A1 |  if_e	add	fp, #20
0e7a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e7a8     14 4E 85 A1 |  if_e	sub	fp, #20
0e7ac     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e7b0     1C 00 90 5D |  if_ne	jmp	#LR__1115
0e7b4     A7 62 02 FB | 	rdlong	muldiva_, fp
0e7b8     0C 4E 05 F1 | 	add	fp, #12
0e7bc     A7 64 02 FB | 	rdlong	muldivb_, fp
0e7c0     0C 4E 85 F1 | 	sub	fp, #12
0e7c4     BA 00 A0 FD | 	call	#divide_
0e7c8     A7 64 62 FC | 	wrlong	muldivb_, fp
0e7cc     10 00 90 FD | 	jmp	#LR__1116
0e7d0                 | LR__1115
0e7d0     A7 16 68 FC | 	wrlong	#11, fp
0e7d4     08 4E 05 F1 | 	add	fp, #8
0e7d8     A7 FE 69 FC | 	wrlong	#255, fp
0e7dc     08 4E 85 F1 | 	sub	fp, #8
0e7e0                 | LR__1116
0e7e0     A7 12 02 F6 | 	mov	arg01, fp
0e7e4     A0 B1 BF FD | 	call	#_push
0e7e8     A7 F0 03 F6 | 	mov	ptra, fp
0e7ec     B2 00 A0 FD | 	call	#popregs_
0e7f0                 | _do_div_ret
0e7f0     2D 00 64 FD | 	ret
0e7f4                 | 
0e7f4                 | ' 
0e7f4                 | ' sub do_fdiv 
0e7f4                 | _do_fdiv
0e7f4     02 4A 05 F6 | 	mov	COUNT_, #2
0e7f8     A8 00 A0 FD | 	call	#pushregs_
0e7fc     18 F0 07 F1 | 	add	ptra, #24
0e800     EC B0 BF FD | 	call	#_pop
0e804     FD 14 02 F6 | 	mov	arg02, result1
0e808     FE 12 02 F6 | 	mov	arg01, result2
0e80c     FF 1E 02 F6 | 	mov	local01, result3
0e810     0C 4E 05 F1 | 	add	fp, #12
0e814     A7 14 62 FC | 	wrlong	arg02, fp
0e818     04 4E 05 F1 | 	add	fp, #4
0e81c     A7 12 62 FC | 	wrlong	arg01, fp
0e820     04 4E 05 F1 | 	add	fp, #4
0e824     A7 1E 62 FC | 	wrlong	local01, fp
0e828     14 4E 85 F1 | 	sub	fp, #20
0e82c     C0 B0 BF FD | 	call	#_pop
0e830     A7 FA 61 FC | 	wrlong	result1, fp
0e834     04 4E 05 F1 | 	add	fp, #4
0e838     A7 FC 61 FC | 	wrlong	result2, fp
0e83c     04 4E 05 F1 | 	add	fp, #4
0e840     A7 FE 61 FC | 	wrlong	result3, fp
0e844                 | ' 
0e844                 | ' t2=pop()
0e844                 | ' t1=pop()
0e844                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0e844     08 4E 85 F1 | 	sub	fp, #8
0e848     1F FE 0D F2 | 	cmp	result3, #31 wz
0e84c     14 4E 05 51 |  if_ne	add	fp, #20
0e850     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e854     14 4E 85 51 |  if_ne	sub	fp, #20
0e858     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e85c     A7 14 68 AC |  if_e	wrlong	#10, fp
0e860     08 4E 05 A1 |  if_e	add	fp, #8
0e864     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e868     08 4E 85 A1 |  if_e	sub	fp, #8
0e86c     38 01 90 AD |  if_e	jmp	#LR__1125
0e870                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e870     08 4E 05 F1 | 	add	fp, #8
0e874     A7 14 02 FB | 	rdlong	arg02, fp
0e878     08 4E 85 F1 | 	sub	fp, #8
0e87c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e880     28 00 90 5D |  if_ne	jmp	#LR__1120
0e884     08 4E 05 F1 | 	add	fp, #8
0e888     A7 3C 68 FC | 	wrlong	#30, fp
0e88c     08 4E 85 F1 | 	sub	fp, #8
0e890     A7 12 02 FB | 	rdlong	arg01, fp
0e894     09 13 52 F6 | 	abs	arg01, arg01 wc
0e898     1F 20 C6 C9 |  if_b	decod	local02, #31
0e89c     00 20 06 36 |  if_ae	mov	local02, #0
0e8a0     28 CC B0 FD | 	call	#__system___float_fromuns
0e8a4     10 FB 61 F5 | 	xor	result1, local02
0e8a8     A7 FA 61 FC | 	wrlong	result1, fp
0e8ac                 | LR__1120
0e8ac                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0e8ac     08 4E 05 F1 | 	add	fp, #8
0e8b0     A7 14 02 FB | 	rdlong	arg02, fp
0e8b4     08 4E 85 F1 | 	sub	fp, #8
0e8b8     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e8bc     18 00 90 5D |  if_ne	jmp	#LR__1121
0e8c0     08 4E 05 F1 | 	add	fp, #8
0e8c4     A7 3C 68 FC | 	wrlong	#30, fp
0e8c8     08 4E 85 F1 | 	sub	fp, #8
0e8cc     A7 12 02 FB | 	rdlong	arg01, fp
0e8d0     F8 CB B0 FD | 	call	#__system___float_fromuns
0e8d4     A7 FA 61 FC | 	wrlong	result1, fp
0e8d8                 | LR__1121
0e8d8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e8d8     14 4E 05 F1 | 	add	fp, #20
0e8dc     A7 14 02 FB | 	rdlong	arg02, fp
0e8e0     14 4E 85 F1 | 	sub	fp, #20
0e8e4     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e8e8     34 00 90 5D |  if_ne	jmp	#LR__1122
0e8ec     14 4E 05 F1 | 	add	fp, #20
0e8f0     A7 3C 68 FC | 	wrlong	#30, fp
0e8f4     08 4E 85 F1 | 	sub	fp, #8
0e8f8     A7 12 02 FB | 	rdlong	arg01, fp
0e8fc     0C 4E 85 F1 | 	sub	fp, #12
0e900     09 13 52 F6 | 	abs	arg01, arg01 wc
0e904     1F 20 C6 C9 |  if_b	decod	local02, #31
0e908     00 20 06 36 |  if_ae	mov	local02, #0
0e90c     BC CB B0 FD | 	call	#__system___float_fromuns
0e910     10 FB 61 F5 | 	xor	result1, local02
0e914     0C 4E 05 F1 | 	add	fp, #12
0e918     A7 FA 61 FC | 	wrlong	result1, fp
0e91c     0C 4E 85 F1 | 	sub	fp, #12
0e920                 | LR__1122
0e920                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e920     14 4E 05 F1 | 	add	fp, #20
0e924     A7 14 02 FB | 	rdlong	arg02, fp
0e928     14 4E 85 F1 | 	sub	fp, #20
0e92c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e930     24 00 90 5D |  if_ne	jmp	#LR__1123
0e934     14 4E 05 F1 | 	add	fp, #20
0e938     A7 3C 68 FC | 	wrlong	#30, fp
0e93c     08 4E 85 F1 | 	sub	fp, #8
0e940     A7 12 02 FB | 	rdlong	arg01, fp
0e944     0C 4E 85 F1 | 	sub	fp, #12
0e948     80 CB B0 FD | 	call	#__system___float_fromuns
0e94c     0C 4E 05 F1 | 	add	fp, #12
0e950     A7 FA 61 FC | 	wrlong	result1, fp
0e954     0C 4E 85 F1 | 	sub	fp, #12
0e958                 | LR__1123
0e958                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0e958     08 4E 05 F1 | 	add	fp, #8
0e95c     A7 14 02 FB | 	rdlong	arg02, fp
0e960     08 4E 85 F1 | 	sub	fp, #8
0e964     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e968     14 4E 05 A1 |  if_e	add	fp, #20
0e96c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e970     14 4E 85 A1 |  if_e	sub	fp, #20
0e974     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e978     1C 00 90 5D |  if_ne	jmp	#LR__1124
0e97c     A7 12 02 FB | 	rdlong	arg01, fp
0e980     0C 4E 05 F1 | 	add	fp, #12
0e984     A7 14 02 FB | 	rdlong	arg02, fp
0e988     0C 4E 85 F1 | 	sub	fp, #12
0e98c     44 D1 B0 FD | 	call	#__system___float_div
0e990     A7 FA 61 FC | 	wrlong	result1, fp
0e994     10 00 90 FD | 	jmp	#LR__1125
0e998                 | LR__1124
0e998     A7 16 68 FC | 	wrlong	#11, fp
0e99c     08 4E 05 F1 | 	add	fp, #8
0e9a0     A7 FE 69 FC | 	wrlong	#255, fp
0e9a4     08 4E 85 F1 | 	sub	fp, #8
0e9a8                 | LR__1125
0e9a8     A7 12 02 F6 | 	mov	arg01, fp
0e9ac     D8 AF BF FD | 	call	#_push
0e9b0     A7 F0 03 F6 | 	mov	ptra, fp
0e9b4     B2 00 A0 FD | 	call	#popregs_
0e9b8                 | _do_fdiv_ret
0e9b8     2D 00 64 FD | 	ret
0e9bc                 | 
0e9bc                 | ' 
0e9bc                 | ' 
0e9bc                 | ' sub do_mod 
0e9bc                 | _do_mod
0e9bc     01 4A 05 F6 | 	mov	COUNT_, #1
0e9c0     A8 00 A0 FD | 	call	#pushregs_
0e9c4     18 F0 07 F1 | 	add	ptra, #24
0e9c8     24 AF BF FD | 	call	#_pop
0e9cc     FD 64 02 F6 | 	mov	muldivb_, result1
0e9d0     FE 62 02 F6 | 	mov	muldiva_, result2
0e9d4     FF 1E 02 F6 | 	mov	local01, result3
0e9d8     0C 4E 05 F1 | 	add	fp, #12
0e9dc     A7 64 62 FC | 	wrlong	muldivb_, fp
0e9e0     04 4E 05 F1 | 	add	fp, #4
0e9e4     A7 62 62 FC | 	wrlong	muldiva_, fp
0e9e8     04 4E 05 F1 | 	add	fp, #4
0e9ec     A7 1E 62 FC | 	wrlong	local01, fp
0e9f0     14 4E 85 F1 | 	sub	fp, #20
0e9f4     F8 AE BF FD | 	call	#_pop
0e9f8     A7 FA 61 FC | 	wrlong	result1, fp
0e9fc     04 4E 05 F1 | 	add	fp, #4
0ea00     A7 FC 61 FC | 	wrlong	result2, fp
0ea04     04 4E 05 F1 | 	add	fp, #4
0ea08     A7 FE 61 FC | 	wrlong	result3, fp
0ea0c                 | ' 
0ea0c                 | ' t2=pop()
0ea0c                 | ' t1=pop()
0ea0c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0ea0c     08 4E 85 F1 | 	sub	fp, #8
0ea10     1F FE 0D F2 | 	cmp	result3, #31 wz
0ea14     14 4E 05 51 |  if_ne	add	fp, #20
0ea18     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0ea1c     14 4E 85 51 |  if_ne	sub	fp, #20
0ea20     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0ea24     A7 14 68 AC |  if_e	wrlong	#10, fp
0ea28     08 4E 05 A1 |  if_e	add	fp, #8
0ea2c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ea30     08 4E 85 A1 |  if_e	sub	fp, #8
0ea34     90 01 90 AD |  if_e	jmp	#LR__1136
0ea38                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0ea38     08 4E 05 F1 | 	add	fp, #8
0ea3c     A7 64 02 FB | 	rdlong	muldivb_, fp
0ea40     08 4E 85 F1 | 	sub	fp, #8
0ea44     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0ea48     1C 00 90 5D |  if_ne	jmp	#LR__1130
0ea4c     08 4E 05 F1 | 	add	fp, #8
0ea50     A7 38 68 FC | 	wrlong	#28, fp
0ea54     08 4E 85 F1 | 	sub	fp, #8
0ea58     A7 12 02 FB | 	rdlong	arg01, fp
0ea5c     00 14 06 F6 | 	mov	arg02, #0
0ea60     34 D3 B0 FD | 	call	#__system___float_tointeger
0ea64     A7 FA 61 FC | 	wrlong	result1, fp
0ea68                 | LR__1130
0ea68                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0ea68     14 4E 05 F1 | 	add	fp, #20
0ea6c     A7 64 02 FB | 	rdlong	muldivb_, fp
0ea70     14 4E 85 F1 | 	sub	fp, #20
0ea74     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0ea78     28 00 90 5D |  if_ne	jmp	#LR__1131
0ea7c     14 4E 05 F1 | 	add	fp, #20
0ea80     A7 38 68 FC | 	wrlong	#28, fp
0ea84     08 4E 85 F1 | 	sub	fp, #8
0ea88     A7 12 02 FB | 	rdlong	arg01, fp
0ea8c     0C 4E 85 F1 | 	sub	fp, #12
0ea90     00 14 06 F6 | 	mov	arg02, #0
0ea94     00 D3 B0 FD | 	call	#__system___float_tointeger
0ea98     0C 4E 05 F1 | 	add	fp, #12
0ea9c     A7 FA 61 FC | 	wrlong	result1, fp
0eaa0     0C 4E 85 F1 | 	sub	fp, #12
0eaa4                 | LR__1131
0eaa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0eaa4     08 4E 05 F1 | 	add	fp, #8
0eaa8     A7 64 02 FB | 	rdlong	muldivb_, fp
0eaac     08 4E 85 F1 | 	sub	fp, #8
0eab0     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0eab4     14 4E 05 A1 |  if_e	add	fp, #20
0eab8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eabc     14 4E 85 A1 |  if_e	sub	fp, #20
0eac0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0eac4     20 00 90 5D |  if_ne	jmp	#LR__1132
0eac8     0C 4E 05 F1 | 	add	fp, #12
0eacc     A7 1E 02 FB | 	rdlong	local01, fp
0ead0     0C 4E 85 F1 | 	sub	fp, #12
0ead4     A7 64 02 FB | 	rdlong	muldivb_, fp
0ead8     0F 65 12 FD | 	qdiv	muldivb_, local01
0eadc     19 1E 62 FD | 	getqy	local01
0eae0     A7 1E 62 FC | 	wrlong	local01, fp
0eae4     E0 00 90 FD | 	jmp	#LR__1136
0eae8                 | LR__1132
0eae8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0eae8     08 4E 05 F1 | 	add	fp, #8
0eaec     A7 64 02 FB | 	rdlong	muldivb_, fp
0eaf0     08 4E 85 F1 | 	sub	fp, #8
0eaf4     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0eaf8     14 4E 05 A1 |  if_e	add	fp, #20
0eafc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eb00     14 4E 85 A1 |  if_e	sub	fp, #20
0eb04     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0eb08     2C 00 90 5D |  if_ne	jmp	#LR__1133
0eb0c     0C 4E 05 F1 | 	add	fp, #12
0eb10     A7 1E 02 FB | 	rdlong	local01, fp
0eb14     0C 4E 85 F1 | 	sub	fp, #12
0eb18     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb1c     0F 65 12 FD | 	qdiv	muldivb_, local01
0eb20     19 1E 62 FD | 	getqy	local01
0eb24     A7 1E 62 FC | 	wrlong	local01, fp
0eb28     08 4E 05 F1 | 	add	fp, #8
0eb2c     A7 38 68 FC | 	wrlong	#28, fp
0eb30     08 4E 85 F1 | 	sub	fp, #8
0eb34     90 00 90 FD | 	jmp	#LR__1136
0eb38                 | LR__1133
0eb38                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0eb38     08 4E 05 F1 | 	add	fp, #8
0eb3c     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb40     08 4E 85 F1 | 	sub	fp, #8
0eb44     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0eb48     14 4E 05 A1 |  if_e	add	fp, #20
0eb4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eb50     14 4E 85 A1 |  if_e	sub	fp, #20
0eb54     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0eb58     1C 00 90 5D |  if_ne	jmp	#LR__1134
0eb5c     A7 62 02 FB | 	rdlong	muldiva_, fp
0eb60     0C 4E 05 F1 | 	add	fp, #12
0eb64     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb68     0C 4E 85 F1 | 	sub	fp, #12
0eb6c     BA 00 A0 FD | 	call	#divide_
0eb70     A7 62 62 FC | 	wrlong	muldiva_, fp
0eb74     50 00 90 FD | 	jmp	#LR__1136
0eb78                 | LR__1134
0eb78                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0eb78     08 4E 05 F1 | 	add	fp, #8
0eb7c     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb80     08 4E 85 F1 | 	sub	fp, #8
0eb84     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0eb88     14 4E 05 A1 |  if_e	add	fp, #20
0eb8c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eb90     14 4E 85 A1 |  if_e	sub	fp, #20
0eb94     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0eb98     1C 00 90 5D |  if_ne	jmp	#LR__1135
0eb9c     A7 62 02 FB | 	rdlong	muldiva_, fp
0eba0     0C 4E 05 F1 | 	add	fp, #12
0eba4     A7 64 02 FB | 	rdlong	muldivb_, fp
0eba8     0C 4E 85 F1 | 	sub	fp, #12
0ebac     BA 00 A0 FD | 	call	#divide_
0ebb0     A7 62 62 FC | 	wrlong	muldiva_, fp
0ebb4     10 00 90 FD | 	jmp	#LR__1136
0ebb8                 | LR__1135
0ebb8     A7 16 68 FC | 	wrlong	#11, fp
0ebbc     08 4E 05 F1 | 	add	fp, #8
0ebc0     A7 FE 69 FC | 	wrlong	#255, fp
0ebc4     08 4E 85 F1 | 	sub	fp, #8
0ebc8                 | LR__1136
0ebc8     A7 12 02 F6 | 	mov	arg01, fp
0ebcc     B8 AD BF FD | 	call	#_push
0ebd0     A7 F0 03 F6 | 	mov	ptra, fp
0ebd4     B2 00 A0 FD | 	call	#popregs_
0ebd8                 | _do_mod_ret
0ebd8     2D 00 64 FD | 	ret
0ebdc                 | 
0ebdc                 | ' 
0ebdc                 | ' sub do_shl 
0ebdc                 | _do_shl
0ebdc     03 4A 05 F6 | 	mov	COUNT_, #3
0ebe0     A8 00 A0 FD | 	call	#pushregs_
0ebe4     18 F0 07 F1 | 	add	ptra, #24
0ebe8     04 AD BF FD | 	call	#_pop
0ebec     FD 12 02 F6 | 	mov	arg01, result1
0ebf0     FE 1E 02 F6 | 	mov	local01, result2
0ebf4     FF 20 02 F6 | 	mov	local02, result3
0ebf8     0C 4E 05 F1 | 	add	fp, #12
0ebfc     A7 12 62 FC | 	wrlong	arg01, fp
0ec00     04 4E 05 F1 | 	add	fp, #4
0ec04     A7 1E 62 FC | 	wrlong	local01, fp
0ec08     04 4E 05 F1 | 	add	fp, #4
0ec0c     A7 20 62 FC | 	wrlong	local02, fp
0ec10     14 4E 85 F1 | 	sub	fp, #20
0ec14     D8 AC BF FD | 	call	#_pop
0ec18     FF 22 02 F6 | 	mov	local03, result3
0ec1c     A7 FA 61 FC | 	wrlong	result1, fp
0ec20     04 4E 05 F1 | 	add	fp, #4
0ec24     A7 FC 61 FC | 	wrlong	result2, fp
0ec28     04 4E 05 F1 | 	add	fp, #4
0ec2c     A7 22 62 FC | 	wrlong	local03, fp
0ec30                 | ' 
0ec30                 | ' t2=pop()
0ec30                 | ' t1=pop()
0ec30                 | ' 
0ec30                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ec30     08 4E 85 F1 | 	sub	fp, #8
0ec34     1C 22 0E F2 | 	cmp	local03, #28 wz
0ec38     A7 22 02 AB |  if_e	rdlong	local03, fp
0ec3c     A7 22 62 AC |  if_e	wrlong	local03, fp
0ec40     08 4E 05 A1 |  if_e	add	fp, #8
0ec44     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ec48     08 4E 85 A1 |  if_e	sub	fp, #8
0ec4c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ec4c     14 4E 05 F1 | 	add	fp, #20
0ec50     A7 22 02 FB | 	rdlong	local03, fp
0ec54     14 4E 85 F1 | 	sub	fp, #20
0ec58     1C 22 0E F2 | 	cmp	local03, #28 wz
0ec5c     18 00 90 5D |  if_ne	jmp	#LR__1140
0ec60     0C 4E 05 F1 | 	add	fp, #12
0ec64     A7 22 02 FB | 	rdlong	local03, fp
0ec68     A7 22 62 FC | 	wrlong	local03, fp
0ec6c     08 4E 05 F1 | 	add	fp, #8
0ec70     A7 3A 68 FC | 	wrlong	#29, fp
0ec74     14 4E 85 F1 | 	sub	fp, #20
0ec78                 | LR__1140
0ec78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0ec78     08 4E 05 F1 | 	add	fp, #8
0ec7c     A7 22 02 FB | 	rdlong	local03, fp
0ec80     08 4E 85 F1 | 	sub	fp, #8
0ec84     1F 22 0E F2 | 	cmp	local03, #31 wz
0ec88     14 4E 05 51 |  if_ne	add	fp, #20
0ec8c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ec90     14 4E 85 51 |  if_ne	sub	fp, #20
0ec94     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ec98     08 4E 05 51 |  if_ne	add	fp, #8
0ec9c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0eca0     08 4E 85 51 |  if_ne	sub	fp, #8
0eca4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0eca8     14 4E 05 51 |  if_ne	add	fp, #20
0ecac     14 4E 85 51 |  if_ne	sub	fp, #20
0ecb0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0ecb4     A7 0C 68 AC |  if_e	wrlong	#6, fp
0ecb8     08 4E 05 A1 |  if_e	add	fp, #8
0ecbc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ecc0     08 4E 85 A1 |  if_e	sub	fp, #8
0ecc4     18 00 90 AD |  if_e	jmp	#LR__1141
0ecc8     A7 22 02 FB | 	rdlong	local03, fp
0eccc     0C 4E 05 F1 | 	add	fp, #12
0ecd0     A7 1E 02 FB | 	rdlong	local01, fp
0ecd4     0C 4E 85 F1 | 	sub	fp, #12
0ecd8     0F 23 62 F0 | 	shl	local03, local01
0ecdc     A7 22 62 FC | 	wrlong	local03, fp
0ece0                 | LR__1141
0ece0     A7 12 02 F6 | 	mov	arg01, fp
0ece4     A0 AC BF FD | 	call	#_push
0ece8     A7 F0 03 F6 | 	mov	ptra, fp
0ecec     B2 00 A0 FD | 	call	#popregs_
0ecf0                 | _do_shl_ret
0ecf0     2D 00 64 FD | 	ret
0ecf4                 | 
0ecf4                 | ' 
0ecf4                 | ' sub do_shr 
0ecf4                 | _do_shr
0ecf4     03 4A 05 F6 | 	mov	COUNT_, #3
0ecf8     A8 00 A0 FD | 	call	#pushregs_
0ecfc     18 F0 07 F1 | 	add	ptra, #24
0ed00     EC AB BF FD | 	call	#_pop
0ed04     FD 12 02 F6 | 	mov	arg01, result1
0ed08     FE 1E 02 F6 | 	mov	local01, result2
0ed0c     FF 20 02 F6 | 	mov	local02, result3
0ed10     0C 4E 05 F1 | 	add	fp, #12
0ed14     A7 12 62 FC | 	wrlong	arg01, fp
0ed18     04 4E 05 F1 | 	add	fp, #4
0ed1c     A7 1E 62 FC | 	wrlong	local01, fp
0ed20     04 4E 05 F1 | 	add	fp, #4
0ed24     A7 20 62 FC | 	wrlong	local02, fp
0ed28     14 4E 85 F1 | 	sub	fp, #20
0ed2c     C0 AB BF FD | 	call	#_pop
0ed30     FF 22 02 F6 | 	mov	local03, result3
0ed34     A7 FA 61 FC | 	wrlong	result1, fp
0ed38     04 4E 05 F1 | 	add	fp, #4
0ed3c     A7 FC 61 FC | 	wrlong	result2, fp
0ed40     04 4E 05 F1 | 	add	fp, #4
0ed44     A7 22 62 FC | 	wrlong	local03, fp
0ed48                 | ' t2=pop()
0ed48                 | ' t1=pop()
0ed48                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ed48     08 4E 85 F1 | 	sub	fp, #8
0ed4c     1C 22 0E F2 | 	cmp	local03, #28 wz
0ed50     A7 22 02 AB |  if_e	rdlong	local03, fp
0ed54     A7 22 62 AC |  if_e	wrlong	local03, fp
0ed58     08 4E 05 A1 |  if_e	add	fp, #8
0ed5c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ed60     08 4E 85 A1 |  if_e	sub	fp, #8
0ed64                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ed64     14 4E 05 F1 | 	add	fp, #20
0ed68     A7 22 02 FB | 	rdlong	local03, fp
0ed6c     14 4E 85 F1 | 	sub	fp, #20
0ed70     1C 22 0E F2 | 	cmp	local03, #28 wz
0ed74     18 00 90 5D |  if_ne	jmp	#LR__1150
0ed78     0C 4E 05 F1 | 	add	fp, #12
0ed7c     A7 22 02 FB | 	rdlong	local03, fp
0ed80     A7 22 62 FC | 	wrlong	local03, fp
0ed84     08 4E 05 F1 | 	add	fp, #8
0ed88     A7 3A 68 FC | 	wrlong	#29, fp
0ed8c     14 4E 85 F1 | 	sub	fp, #20
0ed90                 | LR__1150
0ed90                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0ed90     08 4E 05 F1 | 	add	fp, #8
0ed94     A7 22 02 FB | 	rdlong	local03, fp
0ed98     08 4E 85 F1 | 	sub	fp, #8
0ed9c     1F 22 0E F2 | 	cmp	local03, #31 wz
0eda0     14 4E 05 51 |  if_ne	add	fp, #20
0eda4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0eda8     14 4E 85 51 |  if_ne	sub	fp, #20
0edac     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0edb0     08 4E 05 51 |  if_ne	add	fp, #8
0edb4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0edb8     08 4E 85 51 |  if_ne	sub	fp, #8
0edbc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0edc0     14 4E 05 51 |  if_ne	add	fp, #20
0edc4     14 4E 85 51 |  if_ne	sub	fp, #20
0edc8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0edcc     A7 0C 68 AC |  if_e	wrlong	#6, fp
0edd0     08 4E 05 A1 |  if_e	add	fp, #8
0edd4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0edd8     08 4E 85 A1 |  if_e	sub	fp, #8
0eddc     18 00 90 AD |  if_e	jmp	#LR__1151
0ede0     A7 22 02 FB | 	rdlong	local03, fp
0ede4     0C 4E 05 F1 | 	add	fp, #12
0ede8     A7 1E 02 FB | 	rdlong	local01, fp
0edec     0C 4E 85 F1 | 	sub	fp, #12
0edf0     0F 23 42 F0 | 	shr	local03, local01
0edf4     A7 22 62 FC | 	wrlong	local03, fp
0edf8                 | LR__1151
0edf8     A7 12 02 F6 | 	mov	arg01, fp
0edfc     88 AB BF FD | 	call	#_push
0ee00     A7 F0 03 F6 | 	mov	ptra, fp
0ee04     B2 00 A0 FD | 	call	#popregs_
0ee08                 | _do_shr_ret
0ee08     2D 00 64 FD | 	ret
0ee0c                 | 
0ee0c                 | ' 
0ee0c                 | ' sub do_power 
0ee0c                 | _do_power
0ee0c     02 4A 05 F6 | 	mov	COUNT_, #2
0ee10     A8 00 A0 FD | 	call	#pushregs_
0ee14     18 F0 07 F1 | 	add	ptra, #24
0ee18     D4 AA BF FD | 	call	#_pop
0ee1c     FD 14 02 F6 | 	mov	arg02, result1
0ee20     FE 12 02 F6 | 	mov	arg01, result2
0ee24     FF 1E 02 F6 | 	mov	local01, result3
0ee28     0C 4E 05 F1 | 	add	fp, #12
0ee2c     A7 14 62 FC | 	wrlong	arg02, fp
0ee30     04 4E 05 F1 | 	add	fp, #4
0ee34     A7 12 62 FC | 	wrlong	arg01, fp
0ee38     04 4E 05 F1 | 	add	fp, #4
0ee3c     A7 1E 62 FC | 	wrlong	local01, fp
0ee40     14 4E 85 F1 | 	sub	fp, #20
0ee44     A8 AA BF FD | 	call	#_pop
0ee48     A7 FA 61 FC | 	wrlong	result1, fp
0ee4c     04 4E 05 F1 | 	add	fp, #4
0ee50     A7 FC 61 FC | 	wrlong	result2, fp
0ee54     04 4E 05 F1 | 	add	fp, #4
0ee58     A7 FE 61 FC | 	wrlong	result3, fp
0ee5c                 | ' t2=pop()
0ee5c                 | ' t1=pop()
0ee5c                 | ' 
0ee5c                 | ' 
0ee5c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0ee5c     08 4E 85 F1 | 	sub	fp, #8
0ee60     1F FE 0D F2 | 	cmp	result3, #31 wz
0ee64     14 4E 05 51 |  if_ne	add	fp, #20
0ee68     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ee6c     14 4E 85 51 |  if_ne	sub	fp, #20
0ee70     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0ee74     A7 18 68 AC |  if_e	wrlong	#12, fp
0ee78     08 4E 05 A1 |  if_e	add	fp, #8
0ee7c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ee80     08 4E 85 A1 |  if_e	sub	fp, #8
0ee84     38 01 90 AD |  if_e	jmp	#LR__1165
0ee88                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0ee88     08 4E 05 F1 | 	add	fp, #8
0ee8c     A7 14 02 FB | 	rdlong	arg02, fp
0ee90     08 4E 85 F1 | 	sub	fp, #8
0ee94     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ee98     28 00 90 5D |  if_ne	jmp	#LR__1160
0ee9c     08 4E 05 F1 | 	add	fp, #8
0eea0     A7 3C 68 FC | 	wrlong	#30, fp
0eea4     08 4E 85 F1 | 	sub	fp, #8
0eea8     A7 12 02 FB | 	rdlong	arg01, fp
0eeac     09 13 52 F6 | 	abs	arg01, arg01 wc
0eeb0     1F 20 C6 C9 |  if_b	decod	local02, #31
0eeb4     00 20 06 36 |  if_ae	mov	local02, #0
0eeb8     10 C6 B0 FD | 	call	#__system___float_fromuns
0eebc     10 FB 61 F5 | 	xor	result1, local02
0eec0     A7 FA 61 FC | 	wrlong	result1, fp
0eec4                 | LR__1160
0eec4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0eec4     08 4E 05 F1 | 	add	fp, #8
0eec8     A7 14 02 FB | 	rdlong	arg02, fp
0eecc     08 4E 85 F1 | 	sub	fp, #8
0eed0     1D 14 0E F2 | 	cmp	arg02, #29 wz
0eed4     18 00 90 5D |  if_ne	jmp	#LR__1161
0eed8     08 4E 05 F1 | 	add	fp, #8
0eedc     A7 3C 68 FC | 	wrlong	#30, fp
0eee0     08 4E 85 F1 | 	sub	fp, #8
0eee4     A7 12 02 FB | 	rdlong	arg01, fp
0eee8     E0 C5 B0 FD | 	call	#__system___float_fromuns
0eeec     A7 FA 61 FC | 	wrlong	result1, fp
0eef0                 | LR__1161
0eef0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0eef0     14 4E 05 F1 | 	add	fp, #20
0eef4     A7 14 02 FB | 	rdlong	arg02, fp
0eef8     14 4E 85 F1 | 	sub	fp, #20
0eefc     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ef00     34 00 90 5D |  if_ne	jmp	#LR__1162
0ef04     14 4E 05 F1 | 	add	fp, #20
0ef08     A7 3C 68 FC | 	wrlong	#30, fp
0ef0c     08 4E 85 F1 | 	sub	fp, #8
0ef10     A7 12 02 FB | 	rdlong	arg01, fp
0ef14     0C 4E 85 F1 | 	sub	fp, #12
0ef18     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef1c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ef20     00 20 06 36 |  if_ae	mov	local02, #0
0ef24     A4 C5 B0 FD | 	call	#__system___float_fromuns
0ef28     10 FB 61 F5 | 	xor	result1, local02
0ef2c     0C 4E 05 F1 | 	add	fp, #12
0ef30     A7 FA 61 FC | 	wrlong	result1, fp
0ef34     0C 4E 85 F1 | 	sub	fp, #12
0ef38                 | LR__1162
0ef38                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ef38     14 4E 05 F1 | 	add	fp, #20
0ef3c     A7 14 02 FB | 	rdlong	arg02, fp
0ef40     14 4E 85 F1 | 	sub	fp, #20
0ef44     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ef48     24 00 90 5D |  if_ne	jmp	#LR__1163
0ef4c     14 4E 05 F1 | 	add	fp, #20
0ef50     A7 3C 68 FC | 	wrlong	#30, fp
0ef54     08 4E 85 F1 | 	sub	fp, #8
0ef58     A7 12 02 FB | 	rdlong	arg01, fp
0ef5c     0C 4E 85 F1 | 	sub	fp, #12
0ef60     68 C5 B0 FD | 	call	#__system___float_fromuns
0ef64     0C 4E 05 F1 | 	add	fp, #12
0ef68     A7 FA 61 FC | 	wrlong	result1, fp
0ef6c     0C 4E 85 F1 | 	sub	fp, #12
0ef70                 | LR__1163
0ef70                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0ef70     08 4E 05 F1 | 	add	fp, #8
0ef74     A7 14 02 FB | 	rdlong	arg02, fp
0ef78     08 4E 85 F1 | 	sub	fp, #8
0ef7c     1E 14 0E F2 | 	cmp	arg02, #30 wz
0ef80     14 4E 05 A1 |  if_e	add	fp, #20
0ef84     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ef88     14 4E 85 A1 |  if_e	sub	fp, #20
0ef8c     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ef90     1C 00 90 5D |  if_ne	jmp	#LR__1164
0ef94     A7 12 02 FB | 	rdlong	arg01, fp
0ef98     0C 4E 05 F1 | 	add	fp, #12
0ef9c     A7 14 02 FB | 	rdlong	arg02, fp
0efa0     0C 4E 85 F1 | 	sub	fp, #12
0efa4     0C D8 B0 FD | 	call	#__system____builtin_powf
0efa8     A7 FA 61 FC | 	wrlong	result1, fp
0efac     10 00 90 FD | 	jmp	#LR__1165
0efb0                 | LR__1164
0efb0     A7 1A 68 FC | 	wrlong	#13, fp
0efb4     08 4E 05 F1 | 	add	fp, #8
0efb8     A7 FE 69 FC | 	wrlong	#255, fp
0efbc     08 4E 85 F1 | 	sub	fp, #8
0efc0                 | LR__1165
0efc0     A7 12 02 F6 | 	mov	arg01, fp
0efc4     C0 A9 BF FD | 	call	#_push
0efc8     A7 F0 03 F6 | 	mov	ptra, fp
0efcc     B2 00 A0 FD | 	call	#popregs_
0efd0                 | _do_power_ret
0efd0     2D 00 64 FD | 	ret
0efd4                 | 
0efd4                 | ' 
0efd4                 | ' 
0efd4                 | ' sub do_eq
0efd4                 | _do_eq
0efd4     05 4A 05 F6 | 	mov	COUNT_, #5
0efd8     A8 00 A0 FD | 	call	#pushregs_
0efdc     18 F0 07 F1 | 	add	ptra, #24
0efe0     0C A9 BF FD | 	call	#_pop
0efe4     FD 1E 02 F6 | 	mov	local01, result1
0efe8     FE 20 02 F6 | 	mov	local02, result2
0efec     FF 22 02 F6 | 	mov	local03, result3
0eff0     0C 4E 05 F1 | 	add	fp, #12
0eff4     A7 1E 62 FC | 	wrlong	local01, fp
0eff8     04 4E 05 F1 | 	add	fp, #4
0effc     A7 20 62 FC | 	wrlong	local02, fp
0f000     04 4E 05 F1 | 	add	fp, #4
0f004     A7 22 62 FC | 	wrlong	local03, fp
0f008     14 4E 85 F1 | 	sub	fp, #20
0f00c     E0 A8 BF FD | 	call	#_pop
0f010     FF 22 02 F6 | 	mov	local03, result3
0f014     A7 FA 61 FC | 	wrlong	result1, fp
0f018     04 4E 05 F1 | 	add	fp, #4
0f01c     A7 FC 61 FC | 	wrlong	result2, fp
0f020     04 4E 05 F1 | 	add	fp, #4
0f024     A7 22 62 FC | 	wrlong	local03, fp
0f028                 | ' t2=pop()
0f028                 | ' t1=pop()
0f028                 | ' 
0f028                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0f028     08 4E 85 F1 | 	sub	fp, #8
0f02c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f030     14 4E 05 A1 |  if_e	add	fp, #20
0f034     A7 24 02 AB |  if_e	rdlong	local04, fp
0f038     14 4E 85 A1 |  if_e	sub	fp, #20
0f03c     12 23 02 A6 |  if_e	mov	local03, local04
0f040     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f044     28 00 90 5D |  if_ne	jmp	#LR__1170
0f048     00 1E 06 F6 | 	mov	local01, #0
0f04c     A7 12 02 FB | 	rdlong	arg01, fp
0f050     0C 4E 05 F1 | 	add	fp, #12
0f054     A7 14 02 FB | 	rdlong	arg02, fp
0f058     0C 4E 85 F1 | 	sub	fp, #12
0f05c     AC 9D B0 FD | 	call	#__system___string_cmp
0f060     00 FA 0D F2 | 	cmp	result1, #0 wz
0f064     00 1E 26 A6 |  if_e	not	local01, #0
0f068     A7 1E 62 FC | 	wrlong	local01, fp
0f06c     1C 04 90 FD | 	jmp	#LR__1183
0f070                 | LR__1170
0f070                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0f070     08 4E 05 F1 | 	add	fp, #8
0f074     A7 1E 02 FB | 	rdlong	local01, fp
0f078     08 4E 85 F1 | 	sub	fp, #8
0f07c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f080     14 4E 05 A1 |  if_e	add	fp, #20
0f084     A7 24 02 AB |  if_e	rdlong	local04, fp
0f088     14 4E 85 A1 |  if_e	sub	fp, #20
0f08c     12 23 02 A6 |  if_e	mov	local03, local04
0f090     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f094     2C 00 90 5D |  if_ne	jmp	#LR__1171
0f098     00 1E 06 F6 | 	mov	local01, #0
0f09c     A7 12 02 FB | 	rdlong	arg01, fp
0f0a0     0C 4E 05 F1 | 	add	fp, #12
0f0a4     A7 14 02 FB | 	rdlong	arg02, fp
0f0a8     0C 4E 85 F1 | 	sub	fp, #12
0f0ac     01 16 06 F6 | 	mov	arg03, #1
0f0b0     50 CC B0 FD | 	call	#__system___float_cmp
0f0b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f0b8     00 1E 26 A6 |  if_e	not	local01, #0
0f0bc     A7 1E 62 FC | 	wrlong	local01, fp
0f0c0     C8 03 90 FD | 	jmp	#LR__1183
0f0c4                 | LR__1171
0f0c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0f0c4     08 4E 05 F1 | 	add	fp, #8
0f0c8     A7 1E 02 FB | 	rdlong	local01, fp
0f0cc     08 4E 85 F1 | 	sub	fp, #8
0f0d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f0d4     14 4E 05 A1 |  if_e	add	fp, #20
0f0d8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f0dc     14 4E 85 A1 |  if_e	sub	fp, #20
0f0e0     12 23 02 A6 |  if_e	mov	local03, local04
0f0e4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f0e8     48 00 90 5D |  if_ne	jmp	#LR__1172
0f0ec     00 1E 06 F6 | 	mov	local01, #0
0f0f0     A7 20 02 FB | 	rdlong	local02, fp
0f0f4     0C 4E 05 F1 | 	add	fp, #12
0f0f8     A7 12 02 FB | 	rdlong	arg01, fp
0f0fc     0C 4E 85 F1 | 	sub	fp, #12
0f100     09 13 52 F6 | 	abs	arg01, arg01 wc
0f104     1F 26 C6 C9 |  if_b	decod	local05, #31
0f108     00 26 06 36 |  if_ae	mov	local05, #0
0f10c     BC C3 B0 FD | 	call	#__system___float_fromuns
0f110     13 FB 61 F5 | 	xor	result1, local05
0f114     FD 14 02 F6 | 	mov	arg02, result1
0f118     10 13 02 F6 | 	mov	arg01, local02
0f11c     01 16 06 F6 | 	mov	arg03, #1
0f120     E0 CB B0 FD | 	call	#__system___float_cmp
0f124     00 FA 0D F2 | 	cmp	result1, #0 wz
0f128     00 1E 26 A6 |  if_e	not	local01, #0
0f12c     A7 1E 62 FC | 	wrlong	local01, fp
0f130     58 03 90 FD | 	jmp	#LR__1183
0f134                 | LR__1172
0f134                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0f134     08 4E 05 F1 | 	add	fp, #8
0f138     A7 1E 02 FB | 	rdlong	local01, fp
0f13c     08 4E 85 F1 | 	sub	fp, #8
0f140     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f144     14 4E 05 A1 |  if_e	add	fp, #20
0f148     A7 24 02 AB |  if_e	rdlong	local04, fp
0f14c     14 4E 85 A1 |  if_e	sub	fp, #20
0f150     12 23 02 A6 |  if_e	mov	local03, local04
0f154     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f158     38 00 90 5D |  if_ne	jmp	#LR__1173
0f15c     00 1E 06 F6 | 	mov	local01, #0
0f160     A7 20 02 FB | 	rdlong	local02, fp
0f164     0C 4E 05 F1 | 	add	fp, #12
0f168     A7 12 02 FB | 	rdlong	arg01, fp
0f16c     0C 4E 85 F1 | 	sub	fp, #12
0f170     58 C3 B0 FD | 	call	#__system___float_fromuns
0f174     FD 14 02 F6 | 	mov	arg02, result1
0f178     10 13 02 F6 | 	mov	arg01, local02
0f17c     01 16 06 F6 | 	mov	arg03, #1
0f180     80 CB B0 FD | 	call	#__system___float_cmp
0f184     00 FA 0D F2 | 	cmp	result1, #0 wz
0f188     00 1E 26 A6 |  if_e	not	local01, #0
0f18c     A7 1E 62 FC | 	wrlong	local01, fp
0f190     F8 02 90 FD | 	jmp	#LR__1183
0f194                 | LR__1173
0f194                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0f194     08 4E 05 F1 | 	add	fp, #8
0f198     A7 1E 02 FB | 	rdlong	local01, fp
0f19c     08 4E 85 F1 | 	sub	fp, #8
0f1a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f1a4     14 4E 05 A1 |  if_e	add	fp, #20
0f1a8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f1ac     14 4E 85 A1 |  if_e	sub	fp, #20
0f1b0     12 23 02 A6 |  if_e	mov	local03, local04
0f1b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f1b8     44 00 90 5D |  if_ne	jmp	#LR__1174
0f1bc     00 1E 06 F6 | 	mov	local01, #0
0f1c0     A7 12 02 FB | 	rdlong	arg01, fp
0f1c4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f1c8     1F 26 C6 C9 |  if_b	decod	local05, #31
0f1cc     00 26 06 36 |  if_ae	mov	local05, #0
0f1d0     F8 C2 B0 FD | 	call	#__system___float_fromuns
0f1d4     13 FB 61 F5 | 	xor	result1, local05
0f1d8     FD 12 02 F6 | 	mov	arg01, result1
0f1dc     0C 4E 05 F1 | 	add	fp, #12
0f1e0     A7 14 02 FB | 	rdlong	arg02, fp
0f1e4     0C 4E 85 F1 | 	sub	fp, #12
0f1e8     01 16 06 F6 | 	mov	arg03, #1
0f1ec     14 CB B0 FD | 	call	#__system___float_cmp
0f1f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0f1f4     00 1E 26 A6 |  if_e	not	local01, #0
0f1f8     A7 1E 62 FC | 	wrlong	local01, fp
0f1fc     8C 02 90 FD | 	jmp	#LR__1183
0f200                 | LR__1174
0f200                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0f200     08 4E 05 F1 | 	add	fp, #8
0f204     A7 1E 02 FB | 	rdlong	local01, fp
0f208     08 4E 85 F1 | 	sub	fp, #8
0f20c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f210     14 4E 05 A1 |  if_e	add	fp, #20
0f214     A7 24 02 AB |  if_e	rdlong	local04, fp
0f218     14 4E 85 A1 |  if_e	sub	fp, #20
0f21c     12 23 02 A6 |  if_e	mov	local03, local04
0f220     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f224     24 00 90 5D |  if_ne	jmp	#LR__1175
0f228     00 1E 06 F6 | 	mov	local01, #0
0f22c     A7 20 02 FB | 	rdlong	local02, fp
0f230     0C 4E 05 F1 | 	add	fp, #12
0f234     A7 22 02 FB | 	rdlong	local03, fp
0f238     0C 4E 85 F1 | 	sub	fp, #12
0f23c     11 21 0A F2 | 	cmp	local02, local03 wz
0f240     01 1E 66 A6 |  if_e	neg	local01, #1
0f244     A7 1E 62 FC | 	wrlong	local01, fp
0f248     40 02 90 FD | 	jmp	#LR__1183
0f24c                 | LR__1175
0f24c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0f24c     08 4E 05 F1 | 	add	fp, #8
0f250     A7 1E 02 FB | 	rdlong	local01, fp
0f254     08 4E 85 F1 | 	sub	fp, #8
0f258     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f25c     14 4E 05 A1 |  if_e	add	fp, #20
0f260     A7 24 02 AB |  if_e	rdlong	local04, fp
0f264     14 4E 85 A1 |  if_e	sub	fp, #20
0f268     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f26c     24 00 90 5D |  if_ne	jmp	#LR__1176
0f270     00 1E 06 F6 | 	mov	local01, #0
0f274     A7 20 02 FB | 	rdlong	local02, fp
0f278     0C 4E 05 F1 | 	add	fp, #12
0f27c     A7 22 02 FB | 	rdlong	local03, fp
0f280     0C 4E 85 F1 | 	sub	fp, #12
0f284     11 21 0A F2 | 	cmp	local02, local03 wz
0f288     01 1E 66 A6 |  if_e	neg	local01, #1
0f28c     A7 1E 62 FC | 	wrlong	local01, fp
0f290     F8 01 90 FD | 	jmp	#LR__1183
0f294                 | LR__1176
0f294                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0f294     08 4E 05 F1 | 	add	fp, #8
0f298     A7 1E 02 FB | 	rdlong	local01, fp
0f29c     08 4E 85 F1 | 	sub	fp, #8
0f2a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f2a4     14 4E 05 A1 |  if_e	add	fp, #20
0f2a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f2ac     14 4E 85 A1 |  if_e	sub	fp, #20
0f2b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f2b4     34 00 90 5D |  if_ne	jmp	#LR__1177
0f2b8     00 1E 06 F6 | 	mov	local01, #0
0f2bc     A7 12 02 FB | 	rdlong	arg01, fp
0f2c0     08 C2 B0 FD | 	call	#__system___float_fromuns
0f2c4     FD 12 02 F6 | 	mov	arg01, result1
0f2c8     0C 4E 05 F1 | 	add	fp, #12
0f2cc     A7 14 02 FB | 	rdlong	arg02, fp
0f2d0     0C 4E 85 F1 | 	sub	fp, #12
0f2d4     01 16 06 F6 | 	mov	arg03, #1
0f2d8     28 CA B0 FD | 	call	#__system___float_cmp
0f2dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0f2e0     00 1E 26 A6 |  if_e	not	local01, #0
0f2e4     A7 1E 62 FC | 	wrlong	local01, fp
0f2e8     A0 01 90 FD | 	jmp	#LR__1183
0f2ec                 | LR__1177
0f2ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0f2ec     08 4E 05 F1 | 	add	fp, #8
0f2f0     A7 1E 02 FB | 	rdlong	local01, fp
0f2f4     08 4E 85 F1 | 	sub	fp, #8
0f2f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f2fc     14 4E 05 A1 |  if_e	add	fp, #20
0f300     A7 22 02 AB |  if_e	rdlong	local03, fp
0f304     14 4E 85 A1 |  if_e	sub	fp, #20
0f308     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f30c     24 00 90 5D |  if_ne	jmp	#LR__1178
0f310     00 1E 06 F6 | 	mov	local01, #0
0f314     A7 20 02 FB | 	rdlong	local02, fp
0f318     0C 4E 05 F1 | 	add	fp, #12
0f31c     A7 22 02 FB | 	rdlong	local03, fp
0f320     0C 4E 85 F1 | 	sub	fp, #12
0f324     11 21 0A F2 | 	cmp	local02, local03 wz
0f328     01 1E 66 A6 |  if_e	neg	local01, #1
0f32c     A7 1E 62 FC | 	wrlong	local01, fp
0f330     58 01 90 FD | 	jmp	#LR__1183
0f334                 | LR__1178
0f334                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0f334     08 4E 05 F1 | 	add	fp, #8
0f338     A7 1E 02 FB | 	rdlong	local01, fp
0f33c     08 4E 85 F1 | 	sub	fp, #8
0f340     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f344     14 4E 05 A1 |  if_e	add	fp, #20
0f348     A7 22 02 AB |  if_e	rdlong	local03, fp
0f34c     14 4E 85 A1 |  if_e	sub	fp, #20
0f350     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f354     24 00 90 5D |  if_ne	jmp	#LR__1179
0f358     00 1E 06 F6 | 	mov	local01, #0
0f35c     A7 20 02 FB | 	rdlong	local02, fp
0f360     0C 4E 05 F1 | 	add	fp, #12
0f364     A7 22 02 FB | 	rdlong	local03, fp
0f368     0C 4E 85 F1 | 	sub	fp, #12
0f36c     11 21 0A F2 | 	cmp	local02, local03 wz
0f370     01 1E 66 A6 |  if_e	neg	local01, #1
0f374     A7 1E 62 FC | 	wrlong	local01, fp
0f378     10 01 90 FD | 	jmp	#LR__1183
0f37c                 | LR__1179
0f37c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0f37c     08 4E 05 F1 | 	add	fp, #8
0f380     A7 1E 02 FB | 	rdlong	local01, fp
0f384     08 4E 85 F1 | 	sub	fp, #8
0f388     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f38c     14 4E 05 A1 |  if_e	add	fp, #20
0f390     A7 22 02 AB |  if_e	rdlong	local03, fp
0f394     14 4E 85 A1 |  if_e	sub	fp, #20
0f398     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f39c     30 00 90 5D |  if_ne	jmp	#LR__1180
0f3a0     00 1E 06 F6 | 	mov	local01, #0
0f3a4     A7 12 02 FB | 	rdlong	arg01, fp
0f3a8     80 D6 BF FD | 	call	#_convertstring
0f3ac     FD 12 02 F6 | 	mov	arg01, result1
0f3b0     0C 4E 05 F1 | 	add	fp, #12
0f3b4     A7 14 02 FB | 	rdlong	arg02, fp
0f3b8     0C 4E 85 F1 | 	sub	fp, #12
0f3bc     4C 9A B0 FD | 	call	#__system___string_cmp
0f3c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0f3c4     00 1E 26 A6 |  if_e	not	local01, #0
0f3c8     A7 1E 62 FC | 	wrlong	local01, fp
0f3cc     BC 00 90 FD | 	jmp	#LR__1183
0f3d0                 | LR__1180
0f3d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0f3d0     08 4E 05 F1 | 	add	fp, #8
0f3d4     A7 1E 02 FB | 	rdlong	local01, fp
0f3d8     08 4E 85 F1 | 	sub	fp, #8
0f3dc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f3e0     14 4E 05 A1 |  if_e	add	fp, #20
0f3e4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f3e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f3ec     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f3f0     34 00 90 5D |  if_ne	jmp	#LR__1181
0f3f4     00 1E 06 F6 | 	mov	local01, #0
0f3f8     A7 20 02 FB | 	rdlong	local02, fp
0f3fc     0C 4E 05 F1 | 	add	fp, #12
0f400     A7 12 02 FB | 	rdlong	arg01, fp
0f404     0C 4E 85 F1 | 	sub	fp, #12
0f408     20 D6 BF FD | 	call	#_convertstring
0f40c     FD 14 02 F6 | 	mov	arg02, result1
0f410     10 13 02 F6 | 	mov	arg01, local02
0f414     F4 99 B0 FD | 	call	#__system___string_cmp
0f418     00 FA 0D F2 | 	cmp	result1, #0 wz
0f41c     00 1E 26 A6 |  if_e	not	local01, #0
0f420     A7 1E 62 FC | 	wrlong	local01, fp
0f424     64 00 90 FD | 	jmp	#LR__1183
0f428                 | LR__1181
0f428                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0f428     08 4E 05 F1 | 	add	fp, #8
0f42c     A7 1E 02 FB | 	rdlong	local01, fp
0f430     08 4E 85 F1 | 	sub	fp, #8
0f434     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f438     14 4E 05 A1 |  if_e	add	fp, #20
0f43c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f440     14 4E 85 A1 |  if_e	sub	fp, #20
0f444     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f448     3C 00 90 5D |  if_ne	jmp	#LR__1182
0f44c     00 1E 06 F6 | 	mov	local01, #0
0f450     A7 12 02 FB | 	rdlong	arg01, fp
0f454     D4 D5 BF FD | 	call	#_convertstring
0f458     FD 20 02 F6 | 	mov	local02, result1
0f45c     0C 4E 05 F1 | 	add	fp, #12
0f460     A7 12 02 FB | 	rdlong	arg01, fp
0f464     0C 4E 85 F1 | 	sub	fp, #12
0f468     C0 D5 BF FD | 	call	#_convertstring
0f46c     FD 14 02 F6 | 	mov	arg02, result1
0f470     10 13 02 F6 | 	mov	arg01, local02
0f474     94 99 B0 FD | 	call	#__system___string_cmp
0f478     00 FA 0D F2 | 	cmp	result1, #0 wz
0f47c     00 1E 26 A6 |  if_e	not	local01, #0
0f480     A7 1E 62 FC | 	wrlong	local01, fp
0f484     04 00 90 FD | 	jmp	#LR__1183
0f488                 | LR__1182
0f488     A7 00 68 FC | 	wrlong	#0, fp
0f48c                 | LR__1183
0f48c     08 4E 05 F1 | 	add	fp, #8
0f490     A7 38 68 FC | 	wrlong	#28, fp
0f494     08 4E 85 F1 | 	sub	fp, #8
0f498     A7 12 02 F6 | 	mov	arg01, fp
0f49c     E8 A4 BF FD | 	call	#_push
0f4a0     A7 F0 03 F6 | 	mov	ptra, fp
0f4a4     B2 00 A0 FD | 	call	#popregs_
0f4a8                 | _do_eq_ret
0f4a8     2D 00 64 FD | 	ret
0f4ac                 | 
0f4ac                 | ' 
0f4ac                 | ' sub do_gt
0f4ac                 | _do_gt
0f4ac     05 4A 05 F6 | 	mov	COUNT_, #5
0f4b0     A8 00 A0 FD | 	call	#pushregs_
0f4b4     18 F0 07 F1 | 	add	ptra, #24
0f4b8     34 A4 BF FD | 	call	#_pop
0f4bc     FD 1E 02 F6 | 	mov	local01, result1
0f4c0     FE 20 02 F6 | 	mov	local02, result2
0f4c4     FF 22 02 F6 | 	mov	local03, result3
0f4c8     0C 4E 05 F1 | 	add	fp, #12
0f4cc     A7 1E 62 FC | 	wrlong	local01, fp
0f4d0     04 4E 05 F1 | 	add	fp, #4
0f4d4     A7 20 62 FC | 	wrlong	local02, fp
0f4d8     04 4E 05 F1 | 	add	fp, #4
0f4dc     A7 22 62 FC | 	wrlong	local03, fp
0f4e0     14 4E 85 F1 | 	sub	fp, #20
0f4e4     08 A4 BF FD | 	call	#_pop
0f4e8     FF 22 02 F6 | 	mov	local03, result3
0f4ec     A7 FA 61 FC | 	wrlong	result1, fp
0f4f0     04 4E 05 F1 | 	add	fp, #4
0f4f4     A7 FC 61 FC | 	wrlong	result2, fp
0f4f8     04 4E 05 F1 | 	add	fp, #4
0f4fc     A7 22 62 FC | 	wrlong	local03, fp
0f500                 | ' t2=pop()
0f500                 | ' t1=pop()
0f500                 | ' 
0f500                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0f500     08 4E 85 F1 | 	sub	fp, #8
0f504     1F 22 0E F2 | 	cmp	local03, #31 wz
0f508     14 4E 05 A1 |  if_e	add	fp, #20
0f50c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f510     14 4E 85 A1 |  if_e	sub	fp, #20
0f514     12 23 02 A6 |  if_e	mov	local03, local04
0f518     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f51c     28 00 90 5D |  if_ne	jmp	#LR__1190
0f520     00 1E 06 F6 | 	mov	local01, #0
0f524     A7 12 02 FB | 	rdlong	arg01, fp
0f528     0C 4E 05 F1 | 	add	fp, #12
0f52c     A7 14 02 FB | 	rdlong	arg02, fp
0f530     0C 4E 85 F1 | 	sub	fp, #12
0f534     D4 98 B0 FD | 	call	#__system___string_cmp
0f538     01 FA 55 F2 | 	cmps	result1, #1 wc
0f53c     00 1E 26 36 |  if_ae	not	local01, #0
0f540     A7 1E 62 FC | 	wrlong	local01, fp
0f544     1C 04 90 FD | 	jmp	#LR__1203
0f548                 | LR__1190
0f548                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0f548     08 4E 05 F1 | 	add	fp, #8
0f54c     A7 1E 02 FB | 	rdlong	local01, fp
0f550     08 4E 85 F1 | 	sub	fp, #8
0f554     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f558     14 4E 05 A1 |  if_e	add	fp, #20
0f55c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f560     14 4E 85 A1 |  if_e	sub	fp, #20
0f564     12 23 02 A6 |  if_e	mov	local03, local04
0f568     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f56c     2C 00 90 5D |  if_ne	jmp	#LR__1191
0f570     00 1E 06 F6 | 	mov	local01, #0
0f574     A7 12 02 FB | 	rdlong	arg01, fp
0f578     0C 4E 05 F1 | 	add	fp, #12
0f57c     A7 14 02 FB | 	rdlong	arg02, fp
0f580     0C 4E 85 F1 | 	sub	fp, #12
0f584     01 16 66 F6 | 	neg	arg03, #1
0f588     78 C7 B0 FD | 	call	#__system___float_cmp
0f58c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f590     00 1E 26 36 |  if_ae	not	local01, #0
0f594     A7 1E 62 FC | 	wrlong	local01, fp
0f598     C8 03 90 FD | 	jmp	#LR__1203
0f59c                 | LR__1191
0f59c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0f59c     08 4E 05 F1 | 	add	fp, #8
0f5a0     A7 1E 02 FB | 	rdlong	local01, fp
0f5a4     08 4E 85 F1 | 	sub	fp, #8
0f5a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5ac     14 4E 05 A1 |  if_e	add	fp, #20
0f5b0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5b4     14 4E 85 A1 |  if_e	sub	fp, #20
0f5b8     12 23 02 A6 |  if_e	mov	local03, local04
0f5bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f5c0     48 00 90 5D |  if_ne	jmp	#LR__1192
0f5c4     00 1E 06 F6 | 	mov	local01, #0
0f5c8     A7 20 02 FB | 	rdlong	local02, fp
0f5cc     0C 4E 05 F1 | 	add	fp, #12
0f5d0     A7 12 02 FB | 	rdlong	arg01, fp
0f5d4     0C 4E 85 F1 | 	sub	fp, #12
0f5d8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f5dc     1F 26 C6 C9 |  if_b	decod	local05, #31
0f5e0     00 26 06 36 |  if_ae	mov	local05, #0
0f5e4     E4 BE B0 FD | 	call	#__system___float_fromuns
0f5e8     13 FB 61 F5 | 	xor	result1, local05
0f5ec     FD 14 02 F6 | 	mov	arg02, result1
0f5f0     10 13 02 F6 | 	mov	arg01, local02
0f5f4     01 16 66 F6 | 	neg	arg03, #1
0f5f8     08 C7 B0 FD | 	call	#__system___float_cmp
0f5fc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f600     00 1E 26 36 |  if_ae	not	local01, #0
0f604     A7 1E 62 FC | 	wrlong	local01, fp
0f608     58 03 90 FD | 	jmp	#LR__1203
0f60c                 | LR__1192
0f60c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0f60c     08 4E 05 F1 | 	add	fp, #8
0f610     A7 1E 02 FB | 	rdlong	local01, fp
0f614     08 4E 85 F1 | 	sub	fp, #8
0f618     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f61c     14 4E 05 A1 |  if_e	add	fp, #20
0f620     A7 24 02 AB |  if_e	rdlong	local04, fp
0f624     14 4E 85 A1 |  if_e	sub	fp, #20
0f628     12 23 02 A6 |  if_e	mov	local03, local04
0f62c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f630     38 00 90 5D |  if_ne	jmp	#LR__1193
0f634     00 1E 06 F6 | 	mov	local01, #0
0f638     A7 20 02 FB | 	rdlong	local02, fp
0f63c     0C 4E 05 F1 | 	add	fp, #12
0f640     A7 12 02 FB | 	rdlong	arg01, fp
0f644     0C 4E 85 F1 | 	sub	fp, #12
0f648     80 BE B0 FD | 	call	#__system___float_fromuns
0f64c     FD 14 02 F6 | 	mov	arg02, result1
0f650     10 13 02 F6 | 	mov	arg01, local02
0f654     01 16 66 F6 | 	neg	arg03, #1
0f658     A8 C6 B0 FD | 	call	#__system___float_cmp
0f65c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f660     00 1E 26 36 |  if_ae	not	local01, #0
0f664     A7 1E 62 FC | 	wrlong	local01, fp
0f668     F8 02 90 FD | 	jmp	#LR__1203
0f66c                 | LR__1193
0f66c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0f66c     08 4E 05 F1 | 	add	fp, #8
0f670     A7 1E 02 FB | 	rdlong	local01, fp
0f674     08 4E 85 F1 | 	sub	fp, #8
0f678     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f67c     14 4E 05 A1 |  if_e	add	fp, #20
0f680     A7 24 02 AB |  if_e	rdlong	local04, fp
0f684     14 4E 85 A1 |  if_e	sub	fp, #20
0f688     12 23 02 A6 |  if_e	mov	local03, local04
0f68c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f690     44 00 90 5D |  if_ne	jmp	#LR__1194
0f694     00 1E 06 F6 | 	mov	local01, #0
0f698     A7 12 02 FB | 	rdlong	arg01, fp
0f69c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f6a0     1F 26 C6 C9 |  if_b	decod	local05, #31
0f6a4     00 26 06 36 |  if_ae	mov	local05, #0
0f6a8     20 BE B0 FD | 	call	#__system___float_fromuns
0f6ac     13 FB 61 F5 | 	xor	result1, local05
0f6b0     FD 12 02 F6 | 	mov	arg01, result1
0f6b4     0C 4E 05 F1 | 	add	fp, #12
0f6b8     A7 14 02 FB | 	rdlong	arg02, fp
0f6bc     0C 4E 85 F1 | 	sub	fp, #12
0f6c0     01 16 66 F6 | 	neg	arg03, #1
0f6c4     3C C6 B0 FD | 	call	#__system___float_cmp
0f6c8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f6cc     00 1E 26 36 |  if_ae	not	local01, #0
0f6d0     A7 1E 62 FC | 	wrlong	local01, fp
0f6d4     8C 02 90 FD | 	jmp	#LR__1203
0f6d8                 | LR__1194
0f6d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0f6d8     08 4E 05 F1 | 	add	fp, #8
0f6dc     A7 1E 02 FB | 	rdlong	local01, fp
0f6e0     08 4E 85 F1 | 	sub	fp, #8
0f6e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f6e8     14 4E 05 A1 |  if_e	add	fp, #20
0f6ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6f0     14 4E 85 A1 |  if_e	sub	fp, #20
0f6f4     12 23 02 A6 |  if_e	mov	local03, local04
0f6f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f6fc     24 00 90 5D |  if_ne	jmp	#LR__1195
0f700     00 1E 06 F6 | 	mov	local01, #0
0f704     A7 20 02 FB | 	rdlong	local02, fp
0f708     0C 4E 05 F1 | 	add	fp, #12
0f70c     A7 22 02 FB | 	rdlong	local03, fp
0f710     0C 4E 85 F1 | 	sub	fp, #12
0f714     11 21 5A F2 | 	cmps	local02, local03 wcz
0f718     01 1E 66 16 |  if_a	neg	local01, #1
0f71c     A7 1E 62 FC | 	wrlong	local01, fp
0f720     40 02 90 FD | 	jmp	#LR__1203
0f724                 | LR__1195
0f724                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0f724     08 4E 05 F1 | 	add	fp, #8
0f728     A7 1E 02 FB | 	rdlong	local01, fp
0f72c     08 4E 85 F1 | 	sub	fp, #8
0f730     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f734     14 4E 05 A1 |  if_e	add	fp, #20
0f738     A7 24 02 AB |  if_e	rdlong	local04, fp
0f73c     14 4E 85 A1 |  if_e	sub	fp, #20
0f740     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f744     24 00 90 5D |  if_ne	jmp	#LR__1196
0f748     00 1E 06 F6 | 	mov	local01, #0
0f74c     A7 20 02 FB | 	rdlong	local02, fp
0f750     0C 4E 05 F1 | 	add	fp, #12
0f754     A7 22 02 FB | 	rdlong	local03, fp
0f758     0C 4E 85 F1 | 	sub	fp, #12
0f75c     11 21 5A F2 | 	cmps	local02, local03 wcz
0f760     01 1E 66 16 |  if_a	neg	local01, #1
0f764     A7 1E 62 FC | 	wrlong	local01, fp
0f768     F8 01 90 FD | 	jmp	#LR__1203
0f76c                 | LR__1196
0f76c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0f76c     08 4E 05 F1 | 	add	fp, #8
0f770     A7 1E 02 FB | 	rdlong	local01, fp
0f774     08 4E 85 F1 | 	sub	fp, #8
0f778     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f77c     14 4E 05 A1 |  if_e	add	fp, #20
0f780     A7 22 02 AB |  if_e	rdlong	local03, fp
0f784     14 4E 85 A1 |  if_e	sub	fp, #20
0f788     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f78c     34 00 90 5D |  if_ne	jmp	#LR__1197
0f790     00 1E 06 F6 | 	mov	local01, #0
0f794     A7 12 02 FB | 	rdlong	arg01, fp
0f798     30 BD B0 FD | 	call	#__system___float_fromuns
0f79c     FD 12 02 F6 | 	mov	arg01, result1
0f7a0     0C 4E 05 F1 | 	add	fp, #12
0f7a4     A7 14 02 FB | 	rdlong	arg02, fp
0f7a8     0C 4E 85 F1 | 	sub	fp, #12
0f7ac     01 16 66 F6 | 	neg	arg03, #1
0f7b0     50 C5 B0 FD | 	call	#__system___float_cmp
0f7b4     01 FA 55 F2 | 	cmps	result1, #1 wc
0f7b8     00 1E 26 36 |  if_ae	not	local01, #0
0f7bc     A7 1E 62 FC | 	wrlong	local01, fp
0f7c0     A0 01 90 FD | 	jmp	#LR__1203
0f7c4                 | LR__1197
0f7c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0f7c4     08 4E 05 F1 | 	add	fp, #8
0f7c8     A7 1E 02 FB | 	rdlong	local01, fp
0f7cc     08 4E 85 F1 | 	sub	fp, #8
0f7d0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f7d4     14 4E 05 A1 |  if_e	add	fp, #20
0f7d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7dc     14 4E 85 A1 |  if_e	sub	fp, #20
0f7e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f7e4     24 00 90 5D |  if_ne	jmp	#LR__1198
0f7e8     00 1E 06 F6 | 	mov	local01, #0
0f7ec     A7 20 02 FB | 	rdlong	local02, fp
0f7f0     0C 4E 05 F1 | 	add	fp, #12
0f7f4     A7 22 02 FB | 	rdlong	local03, fp
0f7f8     0C 4E 85 F1 | 	sub	fp, #12
0f7fc     11 21 5A F2 | 	cmps	local02, local03 wcz
0f800     01 1E 66 16 |  if_a	neg	local01, #1
0f804     A7 1E 62 FC | 	wrlong	local01, fp
0f808     58 01 90 FD | 	jmp	#LR__1203
0f80c                 | LR__1198
0f80c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0f80c     08 4E 05 F1 | 	add	fp, #8
0f810     A7 1E 02 FB | 	rdlong	local01, fp
0f814     08 4E 85 F1 | 	sub	fp, #8
0f818     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f81c     14 4E 05 A1 |  if_e	add	fp, #20
0f820     A7 22 02 AB |  if_e	rdlong	local03, fp
0f824     14 4E 85 A1 |  if_e	sub	fp, #20
0f828     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f82c     24 00 90 5D |  if_ne	jmp	#LR__1199
0f830     00 1E 06 F6 | 	mov	local01, #0
0f834     A7 20 02 FB | 	rdlong	local02, fp
0f838     0C 4E 05 F1 | 	add	fp, #12
0f83c     A7 22 02 FB | 	rdlong	local03, fp
0f840     0C 4E 85 F1 | 	sub	fp, #12
0f844     11 21 1A F2 | 	cmp	local02, local03 wcz
0f848     01 1E 66 16 |  if_a	neg	local01, #1
0f84c     A7 1E 62 FC | 	wrlong	local01, fp
0f850     10 01 90 FD | 	jmp	#LR__1203
0f854                 | LR__1199
0f854                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0f854     08 4E 05 F1 | 	add	fp, #8
0f858     A7 1E 02 FB | 	rdlong	local01, fp
0f85c     08 4E 85 F1 | 	sub	fp, #8
0f860     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f864     14 4E 05 A1 |  if_e	add	fp, #20
0f868     A7 22 02 AB |  if_e	rdlong	local03, fp
0f86c     14 4E 85 A1 |  if_e	sub	fp, #20
0f870     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f874     30 00 90 5D |  if_ne	jmp	#LR__1200
0f878     00 1E 06 F6 | 	mov	local01, #0
0f87c     A7 12 02 FB | 	rdlong	arg01, fp
0f880     A8 D1 BF FD | 	call	#_convertstring
0f884     FD 12 02 F6 | 	mov	arg01, result1
0f888     0C 4E 05 F1 | 	add	fp, #12
0f88c     A7 14 02 FB | 	rdlong	arg02, fp
0f890     0C 4E 85 F1 | 	sub	fp, #12
0f894     74 95 B0 FD | 	call	#__system___string_cmp
0f898     01 FA 55 F2 | 	cmps	result1, #1 wc
0f89c     00 1E 26 36 |  if_ae	not	local01, #0
0f8a0     A7 1E 62 FC | 	wrlong	local01, fp
0f8a4     BC 00 90 FD | 	jmp	#LR__1203
0f8a8                 | LR__1200
0f8a8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0f8a8     08 4E 05 F1 | 	add	fp, #8
0f8ac     A7 1E 02 FB | 	rdlong	local01, fp
0f8b0     08 4E 85 F1 | 	sub	fp, #8
0f8b4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f8b8     14 4E 05 A1 |  if_e	add	fp, #20
0f8bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0f8c0     14 4E 85 A1 |  if_e	sub	fp, #20
0f8c4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f8c8     34 00 90 5D |  if_ne	jmp	#LR__1201
0f8cc     00 1E 06 F6 | 	mov	local01, #0
0f8d0     A7 20 02 FB | 	rdlong	local02, fp
0f8d4     0C 4E 05 F1 | 	add	fp, #12
0f8d8     A7 12 02 FB | 	rdlong	arg01, fp
0f8dc     0C 4E 85 F1 | 	sub	fp, #12
0f8e0     48 D1 BF FD | 	call	#_convertstring
0f8e4     FD 14 02 F6 | 	mov	arg02, result1
0f8e8     10 13 02 F6 | 	mov	arg01, local02
0f8ec     1C 95 B0 FD | 	call	#__system___string_cmp
0f8f0     01 FA 55 F2 | 	cmps	result1, #1 wc
0f8f4     00 1E 26 36 |  if_ae	not	local01, #0
0f8f8     A7 1E 62 FC | 	wrlong	local01, fp
0f8fc     64 00 90 FD | 	jmp	#LR__1203
0f900                 | LR__1201
0f900                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0f900     08 4E 05 F1 | 	add	fp, #8
0f904     A7 1E 02 FB | 	rdlong	local01, fp
0f908     08 4E 85 F1 | 	sub	fp, #8
0f90c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f910     14 4E 05 A1 |  if_e	add	fp, #20
0f914     A7 22 02 AB |  if_e	rdlong	local03, fp
0f918     14 4E 85 A1 |  if_e	sub	fp, #20
0f91c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f920     3C 00 90 5D |  if_ne	jmp	#LR__1202
0f924     00 1E 06 F6 | 	mov	local01, #0
0f928     A7 12 02 FB | 	rdlong	arg01, fp
0f92c     FC D0 BF FD | 	call	#_convertstring
0f930     FD 20 02 F6 | 	mov	local02, result1
0f934     0C 4E 05 F1 | 	add	fp, #12
0f938     A7 12 02 FB | 	rdlong	arg01, fp
0f93c     0C 4E 85 F1 | 	sub	fp, #12
0f940     E8 D0 BF FD | 	call	#_convertstring
0f944     FD 14 02 F6 | 	mov	arg02, result1
0f948     10 13 02 F6 | 	mov	arg01, local02
0f94c     BC 94 B0 FD | 	call	#__system___string_cmp
0f950     01 FA 55 F2 | 	cmps	result1, #1 wc
0f954     00 1E 26 36 |  if_ae	not	local01, #0
0f958     A7 1E 62 FC | 	wrlong	local01, fp
0f95c     04 00 90 FD | 	jmp	#LR__1203
0f960                 | LR__1202
0f960     A7 00 68 FC | 	wrlong	#0, fp
0f964                 | LR__1203
0f964     08 4E 05 F1 | 	add	fp, #8
0f968     A7 38 68 FC | 	wrlong	#28, fp
0f96c     08 4E 85 F1 | 	sub	fp, #8
0f970     A7 12 02 F6 | 	mov	arg01, fp
0f974     10 A0 BF FD | 	call	#_push
0f978     A7 F0 03 F6 | 	mov	ptra, fp
0f97c     B2 00 A0 FD | 	call	#popregs_
0f980                 | _do_gt_ret
0f980     2D 00 64 FD | 	ret
0f984                 | 
0f984                 | ' 
0f984                 | ' sub do_lt
0f984                 | _do_lt
0f984     05 4A 05 F6 | 	mov	COUNT_, #5
0f988     A8 00 A0 FD | 	call	#pushregs_
0f98c     18 F0 07 F1 | 	add	ptra, #24
0f990     5C 9F BF FD | 	call	#_pop
0f994     FD 1E 02 F6 | 	mov	local01, result1
0f998     FE 20 02 F6 | 	mov	local02, result2
0f99c     FF 22 02 F6 | 	mov	local03, result3
0f9a0     0C 4E 05 F1 | 	add	fp, #12
0f9a4     A7 1E 62 FC | 	wrlong	local01, fp
0f9a8     04 4E 05 F1 | 	add	fp, #4
0f9ac     A7 20 62 FC | 	wrlong	local02, fp
0f9b0     04 4E 05 F1 | 	add	fp, #4
0f9b4     A7 22 62 FC | 	wrlong	local03, fp
0f9b8     14 4E 85 F1 | 	sub	fp, #20
0f9bc     30 9F BF FD | 	call	#_pop
0f9c0     FF 22 02 F6 | 	mov	local03, result3
0f9c4     A7 FA 61 FC | 	wrlong	result1, fp
0f9c8     04 4E 05 F1 | 	add	fp, #4
0f9cc     A7 FC 61 FC | 	wrlong	result2, fp
0f9d0     04 4E 05 F1 | 	add	fp, #4
0f9d4     A7 22 62 FC | 	wrlong	local03, fp
0f9d8                 | ' t2=pop()
0f9d8                 | ' t1=pop()
0f9d8                 | ' 
0f9d8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0f9d8     08 4E 85 F1 | 	sub	fp, #8
0f9dc     1F 22 0E F2 | 	cmp	local03, #31 wz
0f9e0     14 4E 05 A1 |  if_e	add	fp, #20
0f9e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f9ec     12 23 02 A6 |  if_e	mov	local03, local04
0f9f0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f9f4     28 00 90 5D |  if_ne	jmp	#LR__1210
0f9f8     00 1E 06 F6 | 	mov	local01, #0
0f9fc     A7 12 02 FB | 	rdlong	arg01, fp
0fa00     0C 4E 05 F1 | 	add	fp, #12
0fa04     A7 14 02 FB | 	rdlong	arg02, fp
0fa08     0C 4E 85 F1 | 	sub	fp, #12
0fa0c     FC 93 B0 FD | 	call	#__system___string_cmp
0fa10     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa14     00 1E 26 C6 |  if_b	not	local01, #0
0fa18     A7 1E 62 FC | 	wrlong	local01, fp
0fa1c     0C 04 90 FD | 	jmp	#LR__1223
0fa20                 | LR__1210
0fa20                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0fa20     08 4E 05 F1 | 	add	fp, #8
0fa24     A7 1E 02 FB | 	rdlong	local01, fp
0fa28     08 4E 85 F1 | 	sub	fp, #8
0fa2c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa30     14 4E 05 A1 |  if_e	add	fp, #20
0fa34     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa38     14 4E 85 A1 |  if_e	sub	fp, #20
0fa3c     12 23 02 A6 |  if_e	mov	local03, local04
0fa40     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fa44     2C 00 90 5D |  if_ne	jmp	#LR__1211
0fa48     00 1E 06 F6 | 	mov	local01, #0
0fa4c     A7 12 02 FB | 	rdlong	arg01, fp
0fa50     0C 4E 05 F1 | 	add	fp, #12
0fa54     A7 14 02 FB | 	rdlong	arg02, fp
0fa58     0C 4E 85 F1 | 	sub	fp, #12
0fa5c     01 16 06 F6 | 	mov	arg03, #1
0fa60     A0 C2 B0 FD | 	call	#__system___float_cmp
0fa64     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa68     00 1E 26 C6 |  if_b	not	local01, #0
0fa6c     A7 1E 62 FC | 	wrlong	local01, fp
0fa70     B8 03 90 FD | 	jmp	#LR__1223
0fa74                 | LR__1211
0fa74                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0fa74     08 4E 05 F1 | 	add	fp, #8
0fa78     A7 1E 02 FB | 	rdlong	local01, fp
0fa7c     08 4E 85 F1 | 	sub	fp, #8
0fa80     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa84     14 4E 05 A1 |  if_e	add	fp, #20
0fa88     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa8c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa90     12 23 02 A6 |  if_e	mov	local03, local04
0fa94     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fa98     48 00 90 5D |  if_ne	jmp	#LR__1212
0fa9c     00 1E 06 F6 | 	mov	local01, #0
0faa0     A7 20 02 FB | 	rdlong	local02, fp
0faa4     0C 4E 05 F1 | 	add	fp, #12
0faa8     A7 12 02 FB | 	rdlong	arg01, fp
0faac     0C 4E 85 F1 | 	sub	fp, #12
0fab0     09 13 52 F6 | 	abs	arg01, arg01 wc
0fab4     1F 26 C6 C9 |  if_b	decod	local05, #31
0fab8     00 26 06 36 |  if_ae	mov	local05, #0
0fabc     0C BA B0 FD | 	call	#__system___float_fromuns
0fac0     13 FB 61 F5 | 	xor	result1, local05
0fac4     FD 14 02 F6 | 	mov	arg02, result1
0fac8     10 13 02 F6 | 	mov	arg01, local02
0facc     01 16 06 F6 | 	mov	arg03, #1
0fad0     30 C2 B0 FD | 	call	#__system___float_cmp
0fad4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fad8     00 1E 26 C6 |  if_b	not	local01, #0
0fadc     A7 1E 62 FC | 	wrlong	local01, fp
0fae0     48 03 90 FD | 	jmp	#LR__1223
0fae4                 | LR__1212
0fae4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0fae4     08 4E 05 F1 | 	add	fp, #8
0fae8     A7 1E 02 FB | 	rdlong	local01, fp
0faec     08 4E 85 F1 | 	sub	fp, #8
0faf0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0faf4     14 4E 05 A1 |  if_e	add	fp, #20
0faf8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fafc     14 4E 85 A1 |  if_e	sub	fp, #20
0fb00     12 23 02 A6 |  if_e	mov	local03, local04
0fb04     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fb08     38 00 90 5D |  if_ne	jmp	#LR__1213
0fb0c     00 1E 06 F6 | 	mov	local01, #0
0fb10     A7 20 02 FB | 	rdlong	local02, fp
0fb14     0C 4E 05 F1 | 	add	fp, #12
0fb18     A7 12 02 FB | 	rdlong	arg01, fp
0fb1c     0C 4E 85 F1 | 	sub	fp, #12
0fb20     A8 B9 B0 FD | 	call	#__system___float_fromuns
0fb24     FD 14 02 F6 | 	mov	arg02, result1
0fb28     10 13 02 F6 | 	mov	arg01, local02
0fb2c     01 16 06 F6 | 	mov	arg03, #1
0fb30     D0 C1 B0 FD | 	call	#__system___float_cmp
0fb34     00 FA 55 F2 | 	cmps	result1, #0 wc
0fb38     00 1E 26 C6 |  if_b	not	local01, #0
0fb3c     A7 1E 62 FC | 	wrlong	local01, fp
0fb40     E8 02 90 FD | 	jmp	#LR__1223
0fb44                 | LR__1213
0fb44                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0fb44     08 4E 05 F1 | 	add	fp, #8
0fb48     A7 1E 02 FB | 	rdlong	local01, fp
0fb4c     08 4E 85 F1 | 	sub	fp, #8
0fb50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb54     14 4E 05 A1 |  if_e	add	fp, #20
0fb58     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb5c     14 4E 85 A1 |  if_e	sub	fp, #20
0fb60     12 23 02 A6 |  if_e	mov	local03, local04
0fb64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb68     44 00 90 5D |  if_ne	jmp	#LR__1214
0fb6c     00 1E 06 F6 | 	mov	local01, #0
0fb70     A7 12 02 FB | 	rdlong	arg01, fp
0fb74     09 13 52 F6 | 	abs	arg01, arg01 wc
0fb78     1F 26 C6 C9 |  if_b	decod	local05, #31
0fb7c     00 26 06 36 |  if_ae	mov	local05, #0
0fb80     48 B9 B0 FD | 	call	#__system___float_fromuns
0fb84     13 FB 61 F5 | 	xor	result1, local05
0fb88     FD 12 02 F6 | 	mov	arg01, result1
0fb8c     0C 4E 05 F1 | 	add	fp, #12
0fb90     A7 14 02 FB | 	rdlong	arg02, fp
0fb94     0C 4E 85 F1 | 	sub	fp, #12
0fb98     01 16 06 F6 | 	mov	arg03, #1
0fb9c     64 C1 B0 FD | 	call	#__system___float_cmp
0fba0     00 FA 55 F2 | 	cmps	result1, #0 wc
0fba4     00 1E 26 C6 |  if_b	not	local01, #0
0fba8     A7 1E 62 FC | 	wrlong	local01, fp
0fbac     7C 02 90 FD | 	jmp	#LR__1223
0fbb0                 | LR__1214
0fbb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0fbb0     08 4E 05 F1 | 	add	fp, #8
0fbb4     A7 1E 02 FB | 	rdlong	local01, fp
0fbb8     08 4E 85 F1 | 	sub	fp, #8
0fbbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbc0     14 4E 05 A1 |  if_e	add	fp, #20
0fbc4     A7 24 02 AB |  if_e	rdlong	local04, fp
0fbc8     14 4E 85 A1 |  if_e	sub	fp, #20
0fbcc     12 23 02 A6 |  if_e	mov	local03, local04
0fbd0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fbd4     20 00 90 5D |  if_ne	jmp	#LR__1215
0fbd8     A7 20 02 FB | 	rdlong	local02, fp
0fbdc     0C 4E 05 F1 | 	add	fp, #12
0fbe0     A7 22 02 FB | 	rdlong	local03, fp
0fbe4     0C 4E 85 F1 | 	sub	fp, #12
0fbe8     11 21 52 F2 | 	cmps	local02, local03 wc
0fbec     0F 1F A2 F1 | 	subx	local01, local01
0fbf0     A7 1E 62 FC | 	wrlong	local01, fp
0fbf4     34 02 90 FD | 	jmp	#LR__1223
0fbf8                 | LR__1215
0fbf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0fbf8     08 4E 05 F1 | 	add	fp, #8
0fbfc     A7 1E 02 FB | 	rdlong	local01, fp
0fc00     08 4E 85 F1 | 	sub	fp, #8
0fc04     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc08     14 4E 05 A1 |  if_e	add	fp, #20
0fc0c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc10     14 4E 85 A1 |  if_e	sub	fp, #20
0fc14     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fc18     20 00 90 5D |  if_ne	jmp	#LR__1216
0fc1c     A7 20 02 FB | 	rdlong	local02, fp
0fc20     0C 4E 05 F1 | 	add	fp, #12
0fc24     A7 22 02 FB | 	rdlong	local03, fp
0fc28     0C 4E 85 F1 | 	sub	fp, #12
0fc2c     11 21 52 F2 | 	cmps	local02, local03 wc
0fc30     0F 1F A2 F1 | 	subx	local01, local01
0fc34     A7 1E 62 FC | 	wrlong	local01, fp
0fc38     F0 01 90 FD | 	jmp	#LR__1223
0fc3c                 | LR__1216
0fc3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0fc3c     08 4E 05 F1 | 	add	fp, #8
0fc40     A7 1E 02 FB | 	rdlong	local01, fp
0fc44     08 4E 85 F1 | 	sub	fp, #8
0fc48     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc4c     14 4E 05 A1 |  if_e	add	fp, #20
0fc50     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc54     14 4E 85 A1 |  if_e	sub	fp, #20
0fc58     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fc5c     34 00 90 5D |  if_ne	jmp	#LR__1217
0fc60     00 1E 06 F6 | 	mov	local01, #0
0fc64     A7 12 02 FB | 	rdlong	arg01, fp
0fc68     60 B8 B0 FD | 	call	#__system___float_fromuns
0fc6c     FD 12 02 F6 | 	mov	arg01, result1
0fc70     0C 4E 05 F1 | 	add	fp, #12
0fc74     A7 14 02 FB | 	rdlong	arg02, fp
0fc78     0C 4E 85 F1 | 	sub	fp, #12
0fc7c     01 16 06 F6 | 	mov	arg03, #1
0fc80     80 C0 B0 FD | 	call	#__system___float_cmp
0fc84     00 FA 55 F2 | 	cmps	result1, #0 wc
0fc88     00 1E 26 C6 |  if_b	not	local01, #0
0fc8c     A7 1E 62 FC | 	wrlong	local01, fp
0fc90     98 01 90 FD | 	jmp	#LR__1223
0fc94                 | LR__1217
0fc94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0fc94     08 4E 05 F1 | 	add	fp, #8
0fc98     A7 1E 02 FB | 	rdlong	local01, fp
0fc9c     08 4E 85 F1 | 	sub	fp, #8
0fca0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fca4     14 4E 05 A1 |  if_e	add	fp, #20
0fca8     A7 22 02 AB |  if_e	rdlong	local03, fp
0fcac     14 4E 85 A1 |  if_e	sub	fp, #20
0fcb0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fcb4     20 00 90 5D |  if_ne	jmp	#LR__1218
0fcb8     A7 20 02 FB | 	rdlong	local02, fp
0fcbc     0C 4E 05 F1 | 	add	fp, #12
0fcc0     A7 22 02 FB | 	rdlong	local03, fp
0fcc4     0C 4E 85 F1 | 	sub	fp, #12
0fcc8     11 21 52 F2 | 	cmps	local02, local03 wc
0fccc     0F 1F A2 F1 | 	subx	local01, local01
0fcd0     A7 1E 62 FC | 	wrlong	local01, fp
0fcd4     54 01 90 FD | 	jmp	#LR__1223
0fcd8                 | LR__1218
0fcd8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0fcd8     08 4E 05 F1 | 	add	fp, #8
0fcdc     A7 1E 02 FB | 	rdlong	local01, fp
0fce0     08 4E 85 F1 | 	sub	fp, #8
0fce4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fce8     14 4E 05 A1 |  if_e	add	fp, #20
0fcec     A7 22 02 AB |  if_e	rdlong	local03, fp
0fcf0     14 4E 85 A1 |  if_e	sub	fp, #20
0fcf4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fcf8     20 00 90 5D |  if_ne	jmp	#LR__1219
0fcfc     A7 20 02 FB | 	rdlong	local02, fp
0fd00     0C 4E 05 F1 | 	add	fp, #12
0fd04     A7 22 02 FB | 	rdlong	local03, fp
0fd08     0C 4E 85 F1 | 	sub	fp, #12
0fd0c     11 21 12 F2 | 	cmp	local02, local03 wc
0fd10     0F 1F A2 F1 | 	subx	local01, local01
0fd14     A7 1E 62 FC | 	wrlong	local01, fp
0fd18     10 01 90 FD | 	jmp	#LR__1223
0fd1c                 | LR__1219
0fd1c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0fd1c     08 4E 05 F1 | 	add	fp, #8
0fd20     A7 1E 02 FB | 	rdlong	local01, fp
0fd24     08 4E 85 F1 | 	sub	fp, #8
0fd28     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fd2c     14 4E 05 A1 |  if_e	add	fp, #20
0fd30     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd34     14 4E 85 A1 |  if_e	sub	fp, #20
0fd38     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fd3c     30 00 90 5D |  if_ne	jmp	#LR__1220
0fd40     00 1E 06 F6 | 	mov	local01, #0
0fd44     A7 12 02 FB | 	rdlong	arg01, fp
0fd48     E0 CC BF FD | 	call	#_convertstring
0fd4c     FD 12 02 F6 | 	mov	arg01, result1
0fd50     0C 4E 05 F1 | 	add	fp, #12
0fd54     A7 14 02 FB | 	rdlong	arg02, fp
0fd58     0C 4E 85 F1 | 	sub	fp, #12
0fd5c     AC 90 B0 FD | 	call	#__system___string_cmp
0fd60     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd64     00 1E 26 C6 |  if_b	not	local01, #0
0fd68     A7 1E 62 FC | 	wrlong	local01, fp
0fd6c     BC 00 90 FD | 	jmp	#LR__1223
0fd70                 | LR__1220
0fd70                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0fd70     08 4E 05 F1 | 	add	fp, #8
0fd74     A7 1E 02 FB | 	rdlong	local01, fp
0fd78     08 4E 85 F1 | 	sub	fp, #8
0fd7c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fd80     14 4E 05 A1 |  if_e	add	fp, #20
0fd84     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd88     14 4E 85 A1 |  if_e	sub	fp, #20
0fd8c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fd90     34 00 90 5D |  if_ne	jmp	#LR__1221
0fd94     00 1E 06 F6 | 	mov	local01, #0
0fd98     A7 20 02 FB | 	rdlong	local02, fp
0fd9c     0C 4E 05 F1 | 	add	fp, #12
0fda0     A7 12 02 FB | 	rdlong	arg01, fp
0fda4     0C 4E 85 F1 | 	sub	fp, #12
0fda8     80 CC BF FD | 	call	#_convertstring
0fdac     FD 14 02 F6 | 	mov	arg02, result1
0fdb0     10 13 02 F6 | 	mov	arg01, local02
0fdb4     54 90 B0 FD | 	call	#__system___string_cmp
0fdb8     00 FA 55 F2 | 	cmps	result1, #0 wc
0fdbc     00 1E 26 C6 |  if_b	not	local01, #0
0fdc0     A7 1E 62 FC | 	wrlong	local01, fp
0fdc4     64 00 90 FD | 	jmp	#LR__1223
0fdc8                 | LR__1221
0fdc8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0fdc8     08 4E 05 F1 | 	add	fp, #8
0fdcc     A7 1E 02 FB | 	rdlong	local01, fp
0fdd0     08 4E 85 F1 | 	sub	fp, #8
0fdd4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fdd8     14 4E 05 A1 |  if_e	add	fp, #20
0fddc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fde0     14 4E 85 A1 |  if_e	sub	fp, #20
0fde4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fde8     3C 00 90 5D |  if_ne	jmp	#LR__1222
0fdec     00 1E 06 F6 | 	mov	local01, #0
0fdf0     A7 12 02 FB | 	rdlong	arg01, fp
0fdf4     34 CC BF FD | 	call	#_convertstring
0fdf8     FD 20 02 F6 | 	mov	local02, result1
0fdfc     0C 4E 05 F1 | 	add	fp, #12
0fe00     A7 12 02 FB | 	rdlong	arg01, fp
0fe04     0C 4E 85 F1 | 	sub	fp, #12
0fe08     20 CC BF FD | 	call	#_convertstring
0fe0c     FD 14 02 F6 | 	mov	arg02, result1
0fe10     10 13 02 F6 | 	mov	arg01, local02
0fe14     F4 8F B0 FD | 	call	#__system___string_cmp
0fe18     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe1c     00 1E 26 C6 |  if_b	not	local01, #0
0fe20     A7 1E 62 FC | 	wrlong	local01, fp
0fe24     04 00 90 FD | 	jmp	#LR__1223
0fe28                 | LR__1222
0fe28     A7 00 68 FC | 	wrlong	#0, fp
0fe2c                 | LR__1223
0fe2c     08 4E 05 F1 | 	add	fp, #8
0fe30     A7 38 68 FC | 	wrlong	#28, fp
0fe34     08 4E 85 F1 | 	sub	fp, #8
0fe38     A7 12 02 F6 | 	mov	arg01, fp
0fe3c     48 9B BF FD | 	call	#_push
0fe40     A7 F0 03 F6 | 	mov	ptra, fp
0fe44     B2 00 A0 FD | 	call	#popregs_
0fe48                 | _do_lt_ret
0fe48     2D 00 64 FD | 	ret
0fe4c                 | 
0fe4c                 | ' 
0fe4c                 | ' sub do_ge
0fe4c                 | _do_ge
0fe4c     05 4A 05 F6 | 	mov	COUNT_, #5
0fe50     A8 00 A0 FD | 	call	#pushregs_
0fe54     18 F0 07 F1 | 	add	ptra, #24
0fe58     94 9A BF FD | 	call	#_pop
0fe5c     FD 1E 02 F6 | 	mov	local01, result1
0fe60     FE 20 02 F6 | 	mov	local02, result2
0fe64     FF 22 02 F6 | 	mov	local03, result3
0fe68     0C 4E 05 F1 | 	add	fp, #12
0fe6c     A7 1E 62 FC | 	wrlong	local01, fp
0fe70     04 4E 05 F1 | 	add	fp, #4
0fe74     A7 20 62 FC | 	wrlong	local02, fp
0fe78     04 4E 05 F1 | 	add	fp, #4
0fe7c     A7 22 62 FC | 	wrlong	local03, fp
0fe80     14 4E 85 F1 | 	sub	fp, #20
0fe84     68 9A BF FD | 	call	#_pop
0fe88     FF 22 02 F6 | 	mov	local03, result3
0fe8c     A7 FA 61 FC | 	wrlong	result1, fp
0fe90     04 4E 05 F1 | 	add	fp, #4
0fe94     A7 FC 61 FC | 	wrlong	result2, fp
0fe98     04 4E 05 F1 | 	add	fp, #4
0fe9c     A7 22 62 FC | 	wrlong	local03, fp
0fea0                 | ' t2=pop()
0fea0                 | ' t1=pop()
0fea0                 | ' 
0fea0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0fea0     08 4E 85 F1 | 	sub	fp, #8
0fea4     1F 22 0E F2 | 	cmp	local03, #31 wz
0fea8     14 4E 05 A1 |  if_e	add	fp, #20
0feac     A7 24 02 AB |  if_e	rdlong	local04, fp
0feb0     14 4E 85 A1 |  if_e	sub	fp, #20
0feb4     12 23 02 A6 |  if_e	mov	local03, local04
0feb8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0febc     28 00 90 5D |  if_ne	jmp	#LR__1230
0fec0     00 1E 06 F6 | 	mov	local01, #0
0fec4     A7 12 02 FB | 	rdlong	arg01, fp
0fec8     0C 4E 05 F1 | 	add	fp, #12
0fecc     A7 14 02 FB | 	rdlong	arg02, fp
0fed0     0C 4E 85 F1 | 	sub	fp, #12
0fed4     34 8F B0 FD | 	call	#__system___string_cmp
0fed8     00 FA 55 F2 | 	cmps	result1, #0 wc
0fedc     00 1E 26 36 |  if_ae	not	local01, #0
0fee0     A7 1E 62 FC | 	wrlong	local01, fp
0fee4     1C 04 90 FD | 	jmp	#LR__1243
0fee8                 | LR__1230
0fee8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0fee8     08 4E 05 F1 | 	add	fp, #8
0feec     A7 1E 02 FB | 	rdlong	local01, fp
0fef0     08 4E 85 F1 | 	sub	fp, #8
0fef4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fef8     14 4E 05 A1 |  if_e	add	fp, #20
0fefc     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff00     14 4E 85 A1 |  if_e	sub	fp, #20
0ff04     12 23 02 A6 |  if_e	mov	local03, local04
0ff08     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff0c     2C 00 90 5D |  if_ne	jmp	#LR__1231
0ff10     00 1E 06 F6 | 	mov	local01, #0
0ff14     A7 12 02 FB | 	rdlong	arg01, fp
0ff18     0C 4E 05 F1 | 	add	fp, #12
0ff1c     A7 14 02 FB | 	rdlong	arg02, fp
0ff20     0C 4E 85 F1 | 	sub	fp, #12
0ff24     01 16 66 F6 | 	neg	arg03, #1
0ff28     D8 BD B0 FD | 	call	#__system___float_cmp
0ff2c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff30     00 1E 26 36 |  if_ae	not	local01, #0
0ff34     A7 1E 62 FC | 	wrlong	local01, fp
0ff38     C8 03 90 FD | 	jmp	#LR__1243
0ff3c                 | LR__1231
0ff3c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0ff3c     08 4E 05 F1 | 	add	fp, #8
0ff40     A7 1E 02 FB | 	rdlong	local01, fp
0ff44     08 4E 85 F1 | 	sub	fp, #8
0ff48     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff4c     14 4E 05 A1 |  if_e	add	fp, #20
0ff50     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff54     14 4E 85 A1 |  if_e	sub	fp, #20
0ff58     12 23 02 A6 |  if_e	mov	local03, local04
0ff5c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff60     48 00 90 5D |  if_ne	jmp	#LR__1232
0ff64     00 1E 06 F6 | 	mov	local01, #0
0ff68     A7 20 02 FB | 	rdlong	local02, fp
0ff6c     0C 4E 05 F1 | 	add	fp, #12
0ff70     A7 12 02 FB | 	rdlong	arg01, fp
0ff74     0C 4E 85 F1 | 	sub	fp, #12
0ff78     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff7c     1F 26 C6 C9 |  if_b	decod	local05, #31
0ff80     00 26 06 36 |  if_ae	mov	local05, #0
0ff84     44 B5 B0 FD | 	call	#__system___float_fromuns
0ff88     13 FB 61 F5 | 	xor	result1, local05
0ff8c     FD 14 02 F6 | 	mov	arg02, result1
0ff90     10 13 02 F6 | 	mov	arg01, local02
0ff94     01 16 66 F6 | 	neg	arg03, #1
0ff98     68 BD B0 FD | 	call	#__system___float_cmp
0ff9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ffa0     00 1E 26 36 |  if_ae	not	local01, #0
0ffa4     A7 1E 62 FC | 	wrlong	local01, fp
0ffa8     58 03 90 FD | 	jmp	#LR__1243
0ffac                 | LR__1232
0ffac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0ffac     08 4E 05 F1 | 	add	fp, #8
0ffb0     A7 1E 02 FB | 	rdlong	local01, fp
0ffb4     08 4E 85 F1 | 	sub	fp, #8
0ffb8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ffbc     14 4E 05 A1 |  if_e	add	fp, #20
0ffc0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffc4     14 4E 85 A1 |  if_e	sub	fp, #20
0ffc8     12 23 02 A6 |  if_e	mov	local03, local04
0ffcc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ffd0     38 00 90 5D |  if_ne	jmp	#LR__1233
0ffd4     00 1E 06 F6 | 	mov	local01, #0
0ffd8     A7 20 02 FB | 	rdlong	local02, fp
0ffdc     0C 4E 05 F1 | 	add	fp, #12
0ffe0     A7 12 02 FB | 	rdlong	arg01, fp
0ffe4     0C 4E 85 F1 | 	sub	fp, #12
0ffe8     E0 B4 B0 FD | 	call	#__system___float_fromuns
0ffec     FD 14 02 F6 | 	mov	arg02, result1
0fff0     10 13 02 F6 | 	mov	arg01, local02
0fff4     01 16 66 F6 | 	neg	arg03, #1
0fff8     08 BD B0 FD | 	call	#__system___float_cmp
0fffc     00 FA 55 F2 | 	cmps	result1, #0 wc
10000     00 1E 26 36 |  if_ae	not	local01, #0
10004     A7 1E 62 FC | 	wrlong	local01, fp
10008     F8 02 90 FD | 	jmp	#LR__1243
1000c                 | LR__1233
1000c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1000c     08 4E 05 F1 | 	add	fp, #8
10010     A7 1E 02 FB | 	rdlong	local01, fp
10014     08 4E 85 F1 | 	sub	fp, #8
10018     1C 1E 0E F2 | 	cmp	local01, #28 wz
1001c     14 4E 05 A1 |  if_e	add	fp, #20
10020     A7 24 02 AB |  if_e	rdlong	local04, fp
10024     14 4E 85 A1 |  if_e	sub	fp, #20
10028     12 23 02 A6 |  if_e	mov	local03, local04
1002c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10030     44 00 90 5D |  if_ne	jmp	#LR__1234
10034     00 1E 06 F6 | 	mov	local01, #0
10038     A7 12 02 FB | 	rdlong	arg01, fp
1003c     09 13 52 F6 | 	abs	arg01, arg01 wc
10040     1F 26 C6 C9 |  if_b	decod	local05, #31
10044     00 26 06 36 |  if_ae	mov	local05, #0
10048     80 B4 B0 FD | 	call	#__system___float_fromuns
1004c     13 FB 61 F5 | 	xor	result1, local05
10050     FD 12 02 F6 | 	mov	arg01, result1
10054     0C 4E 05 F1 | 	add	fp, #12
10058     A7 14 02 FB | 	rdlong	arg02, fp
1005c     0C 4E 85 F1 | 	sub	fp, #12
10060     01 16 66 F6 | 	neg	arg03, #1
10064     9C BC B0 FD | 	call	#__system___float_cmp
10068     00 FA 55 F2 | 	cmps	result1, #0 wc
1006c     00 1E 26 36 |  if_ae	not	local01, #0
10070     A7 1E 62 FC | 	wrlong	local01, fp
10074     8C 02 90 FD | 	jmp	#LR__1243
10078                 | LR__1234
10078                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
10078     08 4E 05 F1 | 	add	fp, #8
1007c     A7 1E 02 FB | 	rdlong	local01, fp
10080     08 4E 85 F1 | 	sub	fp, #8
10084     1C 1E 0E F2 | 	cmp	local01, #28 wz
10088     14 4E 05 A1 |  if_e	add	fp, #20
1008c     A7 24 02 AB |  if_e	rdlong	local04, fp
10090     14 4E 85 A1 |  if_e	sub	fp, #20
10094     12 23 02 A6 |  if_e	mov	local03, local04
10098     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1009c     24 00 90 5D |  if_ne	jmp	#LR__1235
100a0     00 1E 06 F6 | 	mov	local01, #0
100a4     A7 20 02 FB | 	rdlong	local02, fp
100a8     0C 4E 05 F1 | 	add	fp, #12
100ac     A7 22 02 FB | 	rdlong	local03, fp
100b0     0C 4E 85 F1 | 	sub	fp, #12
100b4     11 21 52 F2 | 	cmps	local02, local03 wc
100b8     01 1E 66 36 |  if_ae	neg	local01, #1
100bc     A7 1E 62 FC | 	wrlong	local01, fp
100c0     40 02 90 FD | 	jmp	#LR__1243
100c4                 | LR__1235
100c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
100c4     08 4E 05 F1 | 	add	fp, #8
100c8     A7 1E 02 FB | 	rdlong	local01, fp
100cc     08 4E 85 F1 | 	sub	fp, #8
100d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
100d4     14 4E 05 A1 |  if_e	add	fp, #20
100d8     A7 24 02 AB |  if_e	rdlong	local04, fp
100dc     14 4E 85 A1 |  if_e	sub	fp, #20
100e0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
100e4     24 00 90 5D |  if_ne	jmp	#LR__1236
100e8     00 1E 06 F6 | 	mov	local01, #0
100ec     A7 20 02 FB | 	rdlong	local02, fp
100f0     0C 4E 05 F1 | 	add	fp, #12
100f4     A7 22 02 FB | 	rdlong	local03, fp
100f8     0C 4E 85 F1 | 	sub	fp, #12
100fc     11 21 52 F2 | 	cmps	local02, local03 wc
10100     01 1E 66 36 |  if_ae	neg	local01, #1
10104     A7 1E 62 FC | 	wrlong	local01, fp
10108     F8 01 90 FD | 	jmp	#LR__1243
1010c                 | LR__1236
1010c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1010c     08 4E 05 F1 | 	add	fp, #8
10110     A7 1E 02 FB | 	rdlong	local01, fp
10114     08 4E 85 F1 | 	sub	fp, #8
10118     1D 1E 0E F2 | 	cmp	local01, #29 wz
1011c     14 4E 05 A1 |  if_e	add	fp, #20
10120     A7 22 02 AB |  if_e	rdlong	local03, fp
10124     14 4E 85 A1 |  if_e	sub	fp, #20
10128     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1012c     34 00 90 5D |  if_ne	jmp	#LR__1237
10130     00 1E 06 F6 | 	mov	local01, #0
10134     A7 12 02 FB | 	rdlong	arg01, fp
10138     90 B3 B0 FD | 	call	#__system___float_fromuns
1013c     FD 12 02 F6 | 	mov	arg01, result1
10140     0C 4E 05 F1 | 	add	fp, #12
10144     A7 14 02 FB | 	rdlong	arg02, fp
10148     0C 4E 85 F1 | 	sub	fp, #12
1014c     01 16 66 F6 | 	neg	arg03, #1
10150     B0 BB B0 FD | 	call	#__system___float_cmp
10154     00 FA 55 F2 | 	cmps	result1, #0 wc
10158     00 1E 26 36 |  if_ae	not	local01, #0
1015c     A7 1E 62 FC | 	wrlong	local01, fp
10160     A0 01 90 FD | 	jmp	#LR__1243
10164                 | LR__1237
10164                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
10164     08 4E 05 F1 | 	add	fp, #8
10168     A7 1E 02 FB | 	rdlong	local01, fp
1016c     08 4E 85 F1 | 	sub	fp, #8
10170     1D 1E 0E F2 | 	cmp	local01, #29 wz
10174     14 4E 05 A1 |  if_e	add	fp, #20
10178     A7 22 02 AB |  if_e	rdlong	local03, fp
1017c     14 4E 85 A1 |  if_e	sub	fp, #20
10180     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10184     24 00 90 5D |  if_ne	jmp	#LR__1238
10188     00 1E 06 F6 | 	mov	local01, #0
1018c     A7 20 02 FB | 	rdlong	local02, fp
10190     0C 4E 05 F1 | 	add	fp, #12
10194     A7 22 02 FB | 	rdlong	local03, fp
10198     0C 4E 85 F1 | 	sub	fp, #12
1019c     11 21 52 F2 | 	cmps	local02, local03 wc
101a0     01 1E 66 36 |  if_ae	neg	local01, #1
101a4     A7 1E 62 FC | 	wrlong	local01, fp
101a8     58 01 90 FD | 	jmp	#LR__1243
101ac                 | LR__1238
101ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
101ac     08 4E 05 F1 | 	add	fp, #8
101b0     A7 1E 02 FB | 	rdlong	local01, fp
101b4     08 4E 85 F1 | 	sub	fp, #8
101b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
101bc     14 4E 05 A1 |  if_e	add	fp, #20
101c0     A7 22 02 AB |  if_e	rdlong	local03, fp
101c4     14 4E 85 A1 |  if_e	sub	fp, #20
101c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
101cc     24 00 90 5D |  if_ne	jmp	#LR__1239
101d0     00 1E 06 F6 | 	mov	local01, #0
101d4     A7 20 02 FB | 	rdlong	local02, fp
101d8     0C 4E 05 F1 | 	add	fp, #12
101dc     A7 22 02 FB | 	rdlong	local03, fp
101e0     0C 4E 85 F1 | 	sub	fp, #12
101e4     11 21 12 F2 | 	cmp	local02, local03 wc
101e8     01 1E 66 36 |  if_ae	neg	local01, #1
101ec     A7 1E 62 FC | 	wrlong	local01, fp
101f0     10 01 90 FD | 	jmp	#LR__1243
101f4                 | LR__1239
101f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
101f4     08 4E 05 F1 | 	add	fp, #8
101f8     A7 1E 02 FB | 	rdlong	local01, fp
101fc     08 4E 85 F1 | 	sub	fp, #8
10200     2B 1E 0E F2 | 	cmp	local01, #43 wz
10204     14 4E 05 A1 |  if_e	add	fp, #20
10208     A7 22 02 AB |  if_e	rdlong	local03, fp
1020c     14 4E 85 A1 |  if_e	sub	fp, #20
10210     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10214     30 00 90 5D |  if_ne	jmp	#LR__1240
10218     00 1E 06 F6 | 	mov	local01, #0
1021c     A7 12 02 FB | 	rdlong	arg01, fp
10220     08 C8 BF FD | 	call	#_convertstring
10224     FD 12 02 F6 | 	mov	arg01, result1
10228     0C 4E 05 F1 | 	add	fp, #12
1022c     A7 14 02 FB | 	rdlong	arg02, fp
10230     0C 4E 85 F1 | 	sub	fp, #12
10234     D4 8B B0 FD | 	call	#__system___string_cmp
10238     00 FA 55 F2 | 	cmps	result1, #0 wc
1023c     00 1E 26 36 |  if_ae	not	local01, #0
10240     A7 1E 62 FC | 	wrlong	local01, fp
10244     BC 00 90 FD | 	jmp	#LR__1243
10248                 | LR__1240
10248                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
10248     08 4E 05 F1 | 	add	fp, #8
1024c     A7 1E 02 FB | 	rdlong	local01, fp
10250     08 4E 85 F1 | 	sub	fp, #8
10254     1F 1E 0E F2 | 	cmp	local01, #31 wz
10258     14 4E 05 A1 |  if_e	add	fp, #20
1025c     A7 22 02 AB |  if_e	rdlong	local03, fp
10260     14 4E 85 A1 |  if_e	sub	fp, #20
10264     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10268     34 00 90 5D |  if_ne	jmp	#LR__1241
1026c     00 1E 06 F6 | 	mov	local01, #0
10270     A7 20 02 FB | 	rdlong	local02, fp
10274     0C 4E 05 F1 | 	add	fp, #12
10278     A7 12 02 FB | 	rdlong	arg01, fp
1027c     0C 4E 85 F1 | 	sub	fp, #12
10280     A8 C7 BF FD | 	call	#_convertstring
10284     FD 14 02 F6 | 	mov	arg02, result1
10288     10 13 02 F6 | 	mov	arg01, local02
1028c     7C 8B B0 FD | 	call	#__system___string_cmp
10290     00 FA 55 F2 | 	cmps	result1, #0 wc
10294     00 1E 26 36 |  if_ae	not	local01, #0
10298     A7 1E 62 FC | 	wrlong	local01, fp
1029c     64 00 90 FD | 	jmp	#LR__1243
102a0                 | LR__1241
102a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
102a0     08 4E 05 F1 | 	add	fp, #8
102a4     A7 1E 02 FB | 	rdlong	local01, fp
102a8     08 4E 85 F1 | 	sub	fp, #8
102ac     2B 1E 0E F2 | 	cmp	local01, #43 wz
102b0     14 4E 05 A1 |  if_e	add	fp, #20
102b4     A7 22 02 AB |  if_e	rdlong	local03, fp
102b8     14 4E 85 A1 |  if_e	sub	fp, #20
102bc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
102c0     3C 00 90 5D |  if_ne	jmp	#LR__1242
102c4     00 1E 06 F6 | 	mov	local01, #0
102c8     A7 12 02 FB | 	rdlong	arg01, fp
102cc     5C C7 BF FD | 	call	#_convertstring
102d0     FD 20 02 F6 | 	mov	local02, result1
102d4     0C 4E 05 F1 | 	add	fp, #12
102d8     A7 12 02 FB | 	rdlong	arg01, fp
102dc     0C 4E 85 F1 | 	sub	fp, #12
102e0     48 C7 BF FD | 	call	#_convertstring
102e4     FD 14 02 F6 | 	mov	arg02, result1
102e8     10 13 02 F6 | 	mov	arg01, local02
102ec     1C 8B B0 FD | 	call	#__system___string_cmp
102f0     00 FA 55 F2 | 	cmps	result1, #0 wc
102f4     00 1E 26 36 |  if_ae	not	local01, #0
102f8     A7 1E 62 FC | 	wrlong	local01, fp
102fc     04 00 90 FD | 	jmp	#LR__1243
10300                 | LR__1242
10300     A7 00 68 FC | 	wrlong	#0, fp
10304                 | LR__1243
10304     08 4E 05 F1 | 	add	fp, #8
10308     A7 38 68 FC | 	wrlong	#28, fp
1030c     08 4E 85 F1 | 	sub	fp, #8
10310     A7 12 02 F6 | 	mov	arg01, fp
10314     70 96 BF FD | 	call	#_push
10318     A7 F0 03 F6 | 	mov	ptra, fp
1031c     B2 00 A0 FD | 	call	#popregs_
10320                 | _do_ge_ret
10320     2D 00 64 FD | 	ret
10324                 | 
10324                 | ' 
10324                 | ' sub do_le
10324                 | _do_le
10324     05 4A 05 F6 | 	mov	COUNT_, #5
10328     A8 00 A0 FD | 	call	#pushregs_
1032c     18 F0 07 F1 | 	add	ptra, #24
10330     BC 95 BF FD | 	call	#_pop
10334     FD 1E 02 F6 | 	mov	local01, result1
10338     FE 20 02 F6 | 	mov	local02, result2
1033c     FF 22 02 F6 | 	mov	local03, result3
10340     0C 4E 05 F1 | 	add	fp, #12
10344     A7 1E 62 FC | 	wrlong	local01, fp
10348     04 4E 05 F1 | 	add	fp, #4
1034c     A7 20 62 FC | 	wrlong	local02, fp
10350     04 4E 05 F1 | 	add	fp, #4
10354     A7 22 62 FC | 	wrlong	local03, fp
10358     14 4E 85 F1 | 	sub	fp, #20
1035c     90 95 BF FD | 	call	#_pop
10360     FF 22 02 F6 | 	mov	local03, result3
10364     A7 FA 61 FC | 	wrlong	result1, fp
10368     04 4E 05 F1 | 	add	fp, #4
1036c     A7 FC 61 FC | 	wrlong	result2, fp
10370     04 4E 05 F1 | 	add	fp, #4
10374     A7 22 62 FC | 	wrlong	local03, fp
10378                 | ' t2=pop()
10378                 | ' t1=pop()
10378                 | ' 
10378                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
10378     08 4E 85 F1 | 	sub	fp, #8
1037c     1F 22 0E F2 | 	cmp	local03, #31 wz
10380     14 4E 05 A1 |  if_e	add	fp, #20
10384     A7 24 02 AB |  if_e	rdlong	local04, fp
10388     14 4E 85 A1 |  if_e	sub	fp, #20
1038c     12 23 02 A6 |  if_e	mov	local03, local04
10390     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10394     28 00 90 5D |  if_ne	jmp	#LR__1250
10398     00 1E 06 F6 | 	mov	local01, #0
1039c     A7 12 02 FB | 	rdlong	arg01, fp
103a0     0C 4E 05 F1 | 	add	fp, #12
103a4     A7 14 02 FB | 	rdlong	arg02, fp
103a8     0C 4E 85 F1 | 	sub	fp, #12
103ac     5C 8A B0 FD | 	call	#__system___string_cmp
103b0     01 FA 55 F2 | 	cmps	result1, #1 wc
103b4     00 1E 26 C6 |  if_b	not	local01, #0
103b8     A7 1E 62 FC | 	wrlong	local01, fp
103bc     1C 04 90 FD | 	jmp	#LR__1263
103c0                 | LR__1250
103c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
103c0     08 4E 05 F1 | 	add	fp, #8
103c4     A7 1E 02 FB | 	rdlong	local01, fp
103c8     08 4E 85 F1 | 	sub	fp, #8
103cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
103d0     14 4E 05 A1 |  if_e	add	fp, #20
103d4     A7 24 02 AB |  if_e	rdlong	local04, fp
103d8     14 4E 85 A1 |  if_e	sub	fp, #20
103dc     12 23 02 A6 |  if_e	mov	local03, local04
103e0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
103e4     2C 00 90 5D |  if_ne	jmp	#LR__1251
103e8     00 1E 06 F6 | 	mov	local01, #0
103ec     A7 12 02 FB | 	rdlong	arg01, fp
103f0     0C 4E 05 F1 | 	add	fp, #12
103f4     A7 14 02 FB | 	rdlong	arg02, fp
103f8     0C 4E 85 F1 | 	sub	fp, #12
103fc     01 16 06 F6 | 	mov	arg03, #1
10400     00 B9 B0 FD | 	call	#__system___float_cmp
10404     01 FA 55 F2 | 	cmps	result1, #1 wc
10408     00 1E 26 C6 |  if_b	not	local01, #0
1040c     A7 1E 62 FC | 	wrlong	local01, fp
10410     C8 03 90 FD | 	jmp	#LR__1263
10414                 | LR__1251
10414                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
10414     08 4E 05 F1 | 	add	fp, #8
10418     A7 1E 02 FB | 	rdlong	local01, fp
1041c     08 4E 85 F1 | 	sub	fp, #8
10420     1E 1E 0E F2 | 	cmp	local01, #30 wz
10424     14 4E 05 A1 |  if_e	add	fp, #20
10428     A7 24 02 AB |  if_e	rdlong	local04, fp
1042c     14 4E 85 A1 |  if_e	sub	fp, #20
10430     12 23 02 A6 |  if_e	mov	local03, local04
10434     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10438     48 00 90 5D |  if_ne	jmp	#LR__1252
1043c     00 1E 06 F6 | 	mov	local01, #0
10440     A7 20 02 FB | 	rdlong	local02, fp
10444     0C 4E 05 F1 | 	add	fp, #12
10448     A7 12 02 FB | 	rdlong	arg01, fp
1044c     0C 4E 85 F1 | 	sub	fp, #12
10450     09 13 52 F6 | 	abs	arg01, arg01 wc
10454     1F 26 C6 C9 |  if_b	decod	local05, #31
10458     00 26 06 36 |  if_ae	mov	local05, #0
1045c     6C B0 B0 FD | 	call	#__system___float_fromuns
10460     13 FB 61 F5 | 	xor	result1, local05
10464     FD 14 02 F6 | 	mov	arg02, result1
10468     10 13 02 F6 | 	mov	arg01, local02
1046c     01 16 06 F6 | 	mov	arg03, #1
10470     90 B8 B0 FD | 	call	#__system___float_cmp
10474     01 FA 55 F2 | 	cmps	result1, #1 wc
10478     00 1E 26 C6 |  if_b	not	local01, #0
1047c     A7 1E 62 FC | 	wrlong	local01, fp
10480     58 03 90 FD | 	jmp	#LR__1263
10484                 | LR__1252
10484                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
10484     08 4E 05 F1 | 	add	fp, #8
10488     A7 1E 02 FB | 	rdlong	local01, fp
1048c     08 4E 85 F1 | 	sub	fp, #8
10490     1E 1E 0E F2 | 	cmp	local01, #30 wz
10494     14 4E 05 A1 |  if_e	add	fp, #20
10498     A7 24 02 AB |  if_e	rdlong	local04, fp
1049c     14 4E 85 A1 |  if_e	sub	fp, #20
104a0     12 23 02 A6 |  if_e	mov	local03, local04
104a4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
104a8     38 00 90 5D |  if_ne	jmp	#LR__1253
104ac     00 1E 06 F6 | 	mov	local01, #0
104b0     A7 20 02 FB | 	rdlong	local02, fp
104b4     0C 4E 05 F1 | 	add	fp, #12
104b8     A7 12 02 FB | 	rdlong	arg01, fp
104bc     0C 4E 85 F1 | 	sub	fp, #12
104c0     08 B0 B0 FD | 	call	#__system___float_fromuns
104c4     FD 14 02 F6 | 	mov	arg02, result1
104c8     10 13 02 F6 | 	mov	arg01, local02
104cc     01 16 06 F6 | 	mov	arg03, #1
104d0     30 B8 B0 FD | 	call	#__system___float_cmp
104d4     01 FA 55 F2 | 	cmps	result1, #1 wc
104d8     00 1E 26 C6 |  if_b	not	local01, #0
104dc     A7 1E 62 FC | 	wrlong	local01, fp
104e0     F8 02 90 FD | 	jmp	#LR__1263
104e4                 | LR__1253
104e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
104e4     08 4E 05 F1 | 	add	fp, #8
104e8     A7 1E 02 FB | 	rdlong	local01, fp
104ec     08 4E 85 F1 | 	sub	fp, #8
104f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
104f4     14 4E 05 A1 |  if_e	add	fp, #20
104f8     A7 24 02 AB |  if_e	rdlong	local04, fp
104fc     14 4E 85 A1 |  if_e	sub	fp, #20
10500     12 23 02 A6 |  if_e	mov	local03, local04
10504     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10508     44 00 90 5D |  if_ne	jmp	#LR__1254
1050c     00 1E 06 F6 | 	mov	local01, #0
10510     A7 12 02 FB | 	rdlong	arg01, fp
10514     09 13 52 F6 | 	abs	arg01, arg01 wc
10518     1F 26 C6 C9 |  if_b	decod	local05, #31
1051c     00 26 06 36 |  if_ae	mov	local05, #0
10520     A8 AF B0 FD | 	call	#__system___float_fromuns
10524     13 FB 61 F5 | 	xor	result1, local05
10528     FD 12 02 F6 | 	mov	arg01, result1
1052c     0C 4E 05 F1 | 	add	fp, #12
10530     A7 14 02 FB | 	rdlong	arg02, fp
10534     0C 4E 85 F1 | 	sub	fp, #12
10538     01 16 06 F6 | 	mov	arg03, #1
1053c     C4 B7 B0 FD | 	call	#__system___float_cmp
10540     01 FA 55 F2 | 	cmps	result1, #1 wc
10544     00 1E 26 C6 |  if_b	not	local01, #0
10548     A7 1E 62 FC | 	wrlong	local01, fp
1054c     8C 02 90 FD | 	jmp	#LR__1263
10550                 | LR__1254
10550                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
10550     08 4E 05 F1 | 	add	fp, #8
10554     A7 1E 02 FB | 	rdlong	local01, fp
10558     08 4E 85 F1 | 	sub	fp, #8
1055c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10560     14 4E 05 A1 |  if_e	add	fp, #20
10564     A7 24 02 AB |  if_e	rdlong	local04, fp
10568     14 4E 85 A1 |  if_e	sub	fp, #20
1056c     12 23 02 A6 |  if_e	mov	local03, local04
10570     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10574     24 00 90 5D |  if_ne	jmp	#LR__1255
10578     00 1E 06 F6 | 	mov	local01, #0
1057c     A7 20 02 FB | 	rdlong	local02, fp
10580     0C 4E 05 F1 | 	add	fp, #12
10584     A7 22 02 FB | 	rdlong	local03, fp
10588     0C 4E 85 F1 | 	sub	fp, #12
1058c     11 21 5A F2 | 	cmps	local02, local03 wcz
10590     01 1E 66 E6 |  if_be	neg	local01, #1
10594     A7 1E 62 FC | 	wrlong	local01, fp
10598     40 02 90 FD | 	jmp	#LR__1263
1059c                 | LR__1255
1059c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1059c     08 4E 05 F1 | 	add	fp, #8
105a0     A7 1E 02 FB | 	rdlong	local01, fp
105a4     08 4E 85 F1 | 	sub	fp, #8
105a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
105ac     14 4E 05 A1 |  if_e	add	fp, #20
105b0     A7 24 02 AB |  if_e	rdlong	local04, fp
105b4     14 4E 85 A1 |  if_e	sub	fp, #20
105b8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
105bc     24 00 90 5D |  if_ne	jmp	#LR__1256
105c0     00 1E 06 F6 | 	mov	local01, #0
105c4     A7 20 02 FB | 	rdlong	local02, fp
105c8     0C 4E 05 F1 | 	add	fp, #12
105cc     A7 22 02 FB | 	rdlong	local03, fp
105d0     0C 4E 85 F1 | 	sub	fp, #12
105d4     11 21 5A F2 | 	cmps	local02, local03 wcz
105d8     01 1E 66 E6 |  if_be	neg	local01, #1
105dc     A7 1E 62 FC | 	wrlong	local01, fp
105e0     F8 01 90 FD | 	jmp	#LR__1263
105e4                 | LR__1256
105e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
105e4     08 4E 05 F1 | 	add	fp, #8
105e8     A7 1E 02 FB | 	rdlong	local01, fp
105ec     08 4E 85 F1 | 	sub	fp, #8
105f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
105f4     14 4E 05 A1 |  if_e	add	fp, #20
105f8     A7 22 02 AB |  if_e	rdlong	local03, fp
105fc     14 4E 85 A1 |  if_e	sub	fp, #20
10600     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10604     34 00 90 5D |  if_ne	jmp	#LR__1257
10608     00 1E 06 F6 | 	mov	local01, #0
1060c     A7 12 02 FB | 	rdlong	arg01, fp
10610     B8 AE B0 FD | 	call	#__system___float_fromuns
10614     FD 12 02 F6 | 	mov	arg01, result1
10618     0C 4E 05 F1 | 	add	fp, #12
1061c     A7 14 02 FB | 	rdlong	arg02, fp
10620     0C 4E 85 F1 | 	sub	fp, #12
10624     01 16 06 F6 | 	mov	arg03, #1
10628     D8 B6 B0 FD | 	call	#__system___float_cmp
1062c     01 FA 55 F2 | 	cmps	result1, #1 wc
10630     00 1E 26 C6 |  if_b	not	local01, #0
10634     A7 1E 62 FC | 	wrlong	local01, fp
10638     A0 01 90 FD | 	jmp	#LR__1263
1063c                 | LR__1257
1063c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1063c     08 4E 05 F1 | 	add	fp, #8
10640     A7 1E 02 FB | 	rdlong	local01, fp
10644     08 4E 85 F1 | 	sub	fp, #8
10648     1D 1E 0E F2 | 	cmp	local01, #29 wz
1064c     14 4E 05 A1 |  if_e	add	fp, #20
10650     A7 22 02 AB |  if_e	rdlong	local03, fp
10654     14 4E 85 A1 |  if_e	sub	fp, #20
10658     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1065c     24 00 90 5D |  if_ne	jmp	#LR__1258
10660     00 1E 06 F6 | 	mov	local01, #0
10664     A7 20 02 FB | 	rdlong	local02, fp
10668     0C 4E 05 F1 | 	add	fp, #12
1066c     A7 22 02 FB | 	rdlong	local03, fp
10670     0C 4E 85 F1 | 	sub	fp, #12
10674     11 21 5A F2 | 	cmps	local02, local03 wcz
10678     01 1E 66 E6 |  if_be	neg	local01, #1
1067c     A7 1E 62 FC | 	wrlong	local01, fp
10680     58 01 90 FD | 	jmp	#LR__1263
10684                 | LR__1258
10684                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
10684     08 4E 05 F1 | 	add	fp, #8
10688     A7 1E 02 FB | 	rdlong	local01, fp
1068c     08 4E 85 F1 | 	sub	fp, #8
10690     1D 1E 0E F2 | 	cmp	local01, #29 wz
10694     14 4E 05 A1 |  if_e	add	fp, #20
10698     A7 22 02 AB |  if_e	rdlong	local03, fp
1069c     14 4E 85 A1 |  if_e	sub	fp, #20
106a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
106a4     24 00 90 5D |  if_ne	jmp	#LR__1259
106a8     00 1E 06 F6 | 	mov	local01, #0
106ac     A7 20 02 FB | 	rdlong	local02, fp
106b0     0C 4E 05 F1 | 	add	fp, #12
106b4     A7 22 02 FB | 	rdlong	local03, fp
106b8     0C 4E 85 F1 | 	sub	fp, #12
106bc     11 21 1A F2 | 	cmp	local02, local03 wcz
106c0     01 1E 66 E6 |  if_be	neg	local01, #1
106c4     A7 1E 62 FC | 	wrlong	local01, fp
106c8     10 01 90 FD | 	jmp	#LR__1263
106cc                 | LR__1259
106cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
106cc     08 4E 05 F1 | 	add	fp, #8
106d0     A7 1E 02 FB | 	rdlong	local01, fp
106d4     08 4E 85 F1 | 	sub	fp, #8
106d8     2B 1E 0E F2 | 	cmp	local01, #43 wz
106dc     14 4E 05 A1 |  if_e	add	fp, #20
106e0     A7 22 02 AB |  if_e	rdlong	local03, fp
106e4     14 4E 85 A1 |  if_e	sub	fp, #20
106e8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
106ec     30 00 90 5D |  if_ne	jmp	#LR__1260
106f0     00 1E 06 F6 | 	mov	local01, #0
106f4     A7 12 02 FB | 	rdlong	arg01, fp
106f8     30 C3 BF FD | 	call	#_convertstring
106fc     FD 12 02 F6 | 	mov	arg01, result1
10700     0C 4E 05 F1 | 	add	fp, #12
10704     A7 14 02 FB | 	rdlong	arg02, fp
10708     0C 4E 85 F1 | 	sub	fp, #12
1070c     FC 86 B0 FD | 	call	#__system___string_cmp
10710     01 FA 55 F2 | 	cmps	result1, #1 wc
10714     00 1E 26 C6 |  if_b	not	local01, #0
10718     A7 1E 62 FC | 	wrlong	local01, fp
1071c     BC 00 90 FD | 	jmp	#LR__1263
10720                 | LR__1260
10720                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
10720     08 4E 05 F1 | 	add	fp, #8
10724     A7 1E 02 FB | 	rdlong	local01, fp
10728     08 4E 85 F1 | 	sub	fp, #8
1072c     1F 1E 0E F2 | 	cmp	local01, #31 wz
10730     14 4E 05 A1 |  if_e	add	fp, #20
10734     A7 22 02 AB |  if_e	rdlong	local03, fp
10738     14 4E 85 A1 |  if_e	sub	fp, #20
1073c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10740     34 00 90 5D |  if_ne	jmp	#LR__1261
10744     00 1E 06 F6 | 	mov	local01, #0
10748     A7 20 02 FB | 	rdlong	local02, fp
1074c     0C 4E 05 F1 | 	add	fp, #12
10750     A7 12 02 FB | 	rdlong	arg01, fp
10754     0C 4E 85 F1 | 	sub	fp, #12
10758     D0 C2 BF FD | 	call	#_convertstring
1075c     FD 14 02 F6 | 	mov	arg02, result1
10760     10 13 02 F6 | 	mov	arg01, local02
10764     A4 86 B0 FD | 	call	#__system___string_cmp
10768     01 FA 55 F2 | 	cmps	result1, #1 wc
1076c     00 1E 26 C6 |  if_b	not	local01, #0
10770     A7 1E 62 FC | 	wrlong	local01, fp
10774     64 00 90 FD | 	jmp	#LR__1263
10778                 | LR__1261
10778                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
10778     08 4E 05 F1 | 	add	fp, #8
1077c     A7 1E 02 FB | 	rdlong	local01, fp
10780     08 4E 85 F1 | 	sub	fp, #8
10784     2B 1E 0E F2 | 	cmp	local01, #43 wz
10788     14 4E 05 A1 |  if_e	add	fp, #20
1078c     A7 22 02 AB |  if_e	rdlong	local03, fp
10790     14 4E 85 A1 |  if_e	sub	fp, #20
10794     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10798     3C 00 90 5D |  if_ne	jmp	#LR__1262
1079c     00 1E 06 F6 | 	mov	local01, #0
107a0     A7 12 02 FB | 	rdlong	arg01, fp
107a4     84 C2 BF FD | 	call	#_convertstring
107a8     FD 20 02 F6 | 	mov	local02, result1
107ac     0C 4E 05 F1 | 	add	fp, #12
107b0     A7 12 02 FB | 	rdlong	arg01, fp
107b4     0C 4E 85 F1 | 	sub	fp, #12
107b8     70 C2 BF FD | 	call	#_convertstring
107bc     FD 14 02 F6 | 	mov	arg02, result1
107c0     10 13 02 F6 | 	mov	arg01, local02
107c4     44 86 B0 FD | 	call	#__system___string_cmp
107c8     01 FA 55 F2 | 	cmps	result1, #1 wc
107cc     00 1E 26 C6 |  if_b	not	local01, #0
107d0     A7 1E 62 FC | 	wrlong	local01, fp
107d4     04 00 90 FD | 	jmp	#LR__1263
107d8                 | LR__1262
107d8     A7 00 68 FC | 	wrlong	#0, fp
107dc                 | LR__1263
107dc     08 4E 05 F1 | 	add	fp, #8
107e0     A7 38 68 FC | 	wrlong	#28, fp
107e4     08 4E 85 F1 | 	sub	fp, #8
107e8     A7 12 02 F6 | 	mov	arg01, fp
107ec     98 91 BF FD | 	call	#_push
107f0     A7 F0 03 F6 | 	mov	ptra, fp
107f4     B2 00 A0 FD | 	call	#popregs_
107f8                 | _do_le_ret
107f8     2D 00 64 FD | 	ret
107fc                 | 
107fc                 | ' 
107fc                 | ' 
107fc                 | ' sub do_ne
107fc                 | _do_ne
107fc     05 4A 05 F6 | 	mov	COUNT_, #5
10800     A8 00 A0 FD | 	call	#pushregs_
10804     18 F0 07 F1 | 	add	ptra, #24
10808     E4 90 BF FD | 	call	#_pop
1080c     FD 1E 02 F6 | 	mov	local01, result1
10810     FE 20 02 F6 | 	mov	local02, result2
10814     FF 22 02 F6 | 	mov	local03, result3
10818     0C 4E 05 F1 | 	add	fp, #12
1081c     A7 1E 62 FC | 	wrlong	local01, fp
10820     04 4E 05 F1 | 	add	fp, #4
10824     A7 20 62 FC | 	wrlong	local02, fp
10828     04 4E 05 F1 | 	add	fp, #4
1082c     A7 22 62 FC | 	wrlong	local03, fp
10830     14 4E 85 F1 | 	sub	fp, #20
10834     B8 90 BF FD | 	call	#_pop
10838     FF 22 02 F6 | 	mov	local03, result3
1083c     A7 FA 61 FC | 	wrlong	result1, fp
10840     04 4E 05 F1 | 	add	fp, #4
10844     A7 FC 61 FC | 	wrlong	result2, fp
10848     04 4E 05 F1 | 	add	fp, #4
1084c     A7 22 62 FC | 	wrlong	local03, fp
10850                 | ' t2=pop()
10850                 | ' t1=pop()
10850                 | ' 
10850                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
10850     08 4E 85 F1 | 	sub	fp, #8
10854     1F 22 0E F2 | 	cmp	local03, #31 wz
10858     14 4E 05 A1 |  if_e	add	fp, #20
1085c     A7 24 02 AB |  if_e	rdlong	local04, fp
10860     14 4E 85 A1 |  if_e	sub	fp, #20
10864     12 23 02 A6 |  if_e	mov	local03, local04
10868     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1086c     28 00 90 5D |  if_ne	jmp	#LR__1270
10870     00 1E 06 F6 | 	mov	local01, #0
10874     A7 12 02 FB | 	rdlong	arg01, fp
10878     0C 4E 05 F1 | 	add	fp, #12
1087c     A7 14 02 FB | 	rdlong	arg02, fp
10880     0C 4E 85 F1 | 	sub	fp, #12
10884     84 85 B0 FD | 	call	#__system___string_cmp
10888     00 FA 0D F2 | 	cmp	result1, #0 wz
1088c     00 1E 26 56 |  if_ne	not	local01, #0
10890     A7 1E 62 FC | 	wrlong	local01, fp
10894     1C 04 90 FD | 	jmp	#LR__1283
10898                 | LR__1270
10898                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
10898     08 4E 05 F1 | 	add	fp, #8
1089c     A7 1E 02 FB | 	rdlong	local01, fp
108a0     08 4E 85 F1 | 	sub	fp, #8
108a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
108a8     14 4E 05 A1 |  if_e	add	fp, #20
108ac     A7 24 02 AB |  if_e	rdlong	local04, fp
108b0     14 4E 85 A1 |  if_e	sub	fp, #20
108b4     12 23 02 A6 |  if_e	mov	local03, local04
108b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
108bc     2C 00 90 5D |  if_ne	jmp	#LR__1271
108c0     00 1E 06 F6 | 	mov	local01, #0
108c4     A7 12 02 FB | 	rdlong	arg01, fp
108c8     0C 4E 05 F1 | 	add	fp, #12
108cc     A7 14 02 FB | 	rdlong	arg02, fp
108d0     0C 4E 85 F1 | 	sub	fp, #12
108d4     01 16 06 F6 | 	mov	arg03, #1
108d8     28 B4 B0 FD | 	call	#__system___float_cmp
108dc     00 FA 0D F2 | 	cmp	result1, #0 wz
108e0     00 1E 26 56 |  if_ne	not	local01, #0
108e4     A7 1E 62 FC | 	wrlong	local01, fp
108e8     C8 03 90 FD | 	jmp	#LR__1283
108ec                 | LR__1271
108ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
108ec     08 4E 05 F1 | 	add	fp, #8
108f0     A7 1E 02 FB | 	rdlong	local01, fp
108f4     08 4E 85 F1 | 	sub	fp, #8
108f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
108fc     14 4E 05 A1 |  if_e	add	fp, #20
10900     A7 24 02 AB |  if_e	rdlong	local04, fp
10904     14 4E 85 A1 |  if_e	sub	fp, #20
10908     12 23 02 A6 |  if_e	mov	local03, local04
1090c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10910     48 00 90 5D |  if_ne	jmp	#LR__1272
10914     00 1E 06 F6 | 	mov	local01, #0
10918     A7 20 02 FB | 	rdlong	local02, fp
1091c     0C 4E 05 F1 | 	add	fp, #12
10920     A7 12 02 FB | 	rdlong	arg01, fp
10924     0C 4E 85 F1 | 	sub	fp, #12
10928     09 13 52 F6 | 	abs	arg01, arg01 wc
1092c     1F 26 C6 C9 |  if_b	decod	local05, #31
10930     00 26 06 36 |  if_ae	mov	local05, #0
10934     94 AB B0 FD | 	call	#__system___float_fromuns
10938     13 FB 61 F5 | 	xor	result1, local05
1093c     FD 14 02 F6 | 	mov	arg02, result1
10940     10 13 02 F6 | 	mov	arg01, local02
10944     01 16 06 F6 | 	mov	arg03, #1
10948     B8 B3 B0 FD | 	call	#__system___float_cmp
1094c     00 FA 0D F2 | 	cmp	result1, #0 wz
10950     00 1E 26 56 |  if_ne	not	local01, #0
10954     A7 1E 62 FC | 	wrlong	local01, fp
10958     58 03 90 FD | 	jmp	#LR__1283
1095c                 | LR__1272
1095c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1095c     08 4E 05 F1 | 	add	fp, #8
10960     A7 1E 02 FB | 	rdlong	local01, fp
10964     08 4E 85 F1 | 	sub	fp, #8
10968     1E 1E 0E F2 | 	cmp	local01, #30 wz
1096c     14 4E 05 A1 |  if_e	add	fp, #20
10970     A7 24 02 AB |  if_e	rdlong	local04, fp
10974     14 4E 85 A1 |  if_e	sub	fp, #20
10978     12 23 02 A6 |  if_e	mov	local03, local04
1097c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10980     38 00 90 5D |  if_ne	jmp	#LR__1273
10984     00 1E 06 F6 | 	mov	local01, #0
10988     A7 20 02 FB | 	rdlong	local02, fp
1098c     0C 4E 05 F1 | 	add	fp, #12
10990     A7 12 02 FB | 	rdlong	arg01, fp
10994     0C 4E 85 F1 | 	sub	fp, #12
10998     30 AB B0 FD | 	call	#__system___float_fromuns
1099c     FD 14 02 F6 | 	mov	arg02, result1
109a0     10 13 02 F6 | 	mov	arg01, local02
109a4     01 16 06 F6 | 	mov	arg03, #1
109a8     58 B3 B0 FD | 	call	#__system___float_cmp
109ac     00 FA 0D F2 | 	cmp	result1, #0 wz
109b0     00 1E 26 56 |  if_ne	not	local01, #0
109b4     A7 1E 62 FC | 	wrlong	local01, fp
109b8     F8 02 90 FD | 	jmp	#LR__1283
109bc                 | LR__1273
109bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
109bc     08 4E 05 F1 | 	add	fp, #8
109c0     A7 1E 02 FB | 	rdlong	local01, fp
109c4     08 4E 85 F1 | 	sub	fp, #8
109c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
109cc     14 4E 05 A1 |  if_e	add	fp, #20
109d0     A7 24 02 AB |  if_e	rdlong	local04, fp
109d4     14 4E 85 A1 |  if_e	sub	fp, #20
109d8     12 23 02 A6 |  if_e	mov	local03, local04
109dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
109e0     44 00 90 5D |  if_ne	jmp	#LR__1274
109e4     00 1E 06 F6 | 	mov	local01, #0
109e8     A7 12 02 FB | 	rdlong	arg01, fp
109ec     09 13 52 F6 | 	abs	arg01, arg01 wc
109f0     1F 26 C6 C9 |  if_b	decod	local05, #31
109f4     00 26 06 36 |  if_ae	mov	local05, #0
109f8     D0 AA B0 FD | 	call	#__system___float_fromuns
109fc     13 FB 61 F5 | 	xor	result1, local05
10a00     FD 12 02 F6 | 	mov	arg01, result1
10a04     0C 4E 05 F1 | 	add	fp, #12
10a08     A7 14 02 FB | 	rdlong	arg02, fp
10a0c     0C 4E 85 F1 | 	sub	fp, #12
10a10     01 16 06 F6 | 	mov	arg03, #1
10a14     EC B2 B0 FD | 	call	#__system___float_cmp
10a18     00 FA 0D F2 | 	cmp	result1, #0 wz
10a1c     00 1E 26 56 |  if_ne	not	local01, #0
10a20     A7 1E 62 FC | 	wrlong	local01, fp
10a24     8C 02 90 FD | 	jmp	#LR__1283
10a28                 | LR__1274
10a28                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
10a28     08 4E 05 F1 | 	add	fp, #8
10a2c     A7 1E 02 FB | 	rdlong	local01, fp
10a30     08 4E 85 F1 | 	sub	fp, #8
10a34     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a38     14 4E 05 A1 |  if_e	add	fp, #20
10a3c     A7 24 02 AB |  if_e	rdlong	local04, fp
10a40     14 4E 85 A1 |  if_e	sub	fp, #20
10a44     12 23 02 A6 |  if_e	mov	local03, local04
10a48     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10a4c     24 00 90 5D |  if_ne	jmp	#LR__1275
10a50     00 1E 06 F6 | 	mov	local01, #0
10a54     A7 20 02 FB | 	rdlong	local02, fp
10a58     0C 4E 05 F1 | 	add	fp, #12
10a5c     A7 22 02 FB | 	rdlong	local03, fp
10a60     0C 4E 85 F1 | 	sub	fp, #12
10a64     11 21 0A F2 | 	cmp	local02, local03 wz
10a68     01 1E 66 56 |  if_ne	neg	local01, #1
10a6c     A7 1E 62 FC | 	wrlong	local01, fp
10a70     40 02 90 FD | 	jmp	#LR__1283
10a74                 | LR__1275
10a74                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
10a74     08 4E 05 F1 | 	add	fp, #8
10a78     A7 1E 02 FB | 	rdlong	local01, fp
10a7c     08 4E 85 F1 | 	sub	fp, #8
10a80     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a84     14 4E 05 A1 |  if_e	add	fp, #20
10a88     A7 24 02 AB |  if_e	rdlong	local04, fp
10a8c     14 4E 85 A1 |  if_e	sub	fp, #20
10a90     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10a94     24 00 90 5D |  if_ne	jmp	#LR__1276
10a98     00 1E 06 F6 | 	mov	local01, #0
10a9c     A7 20 02 FB | 	rdlong	local02, fp
10aa0     0C 4E 05 F1 | 	add	fp, #12
10aa4     A7 22 02 FB | 	rdlong	local03, fp
10aa8     0C 4E 85 F1 | 	sub	fp, #12
10aac     11 21 0A F2 | 	cmp	local02, local03 wz
10ab0     01 1E 66 56 |  if_ne	neg	local01, #1
10ab4     A7 1E 62 FC | 	wrlong	local01, fp
10ab8     F8 01 90 FD | 	jmp	#LR__1283
10abc                 | LR__1276
10abc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
10abc     08 4E 05 F1 | 	add	fp, #8
10ac0     A7 1E 02 FB | 	rdlong	local01, fp
10ac4     08 4E 85 F1 | 	sub	fp, #8
10ac8     1D 1E 0E F2 | 	cmp	local01, #29 wz
10acc     14 4E 05 A1 |  if_e	add	fp, #20
10ad0     A7 22 02 AB |  if_e	rdlong	local03, fp
10ad4     14 4E 85 A1 |  if_e	sub	fp, #20
10ad8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10adc     34 00 90 5D |  if_ne	jmp	#LR__1277
10ae0     00 1E 06 F6 | 	mov	local01, #0
10ae4     A7 12 02 FB | 	rdlong	arg01, fp
10ae8     E0 A9 B0 FD | 	call	#__system___float_fromuns
10aec     FD 12 02 F6 | 	mov	arg01, result1
10af0     0C 4E 05 F1 | 	add	fp, #12
10af4     A7 14 02 FB | 	rdlong	arg02, fp
10af8     0C 4E 85 F1 | 	sub	fp, #12
10afc     01 16 06 F6 | 	mov	arg03, #1
10b00     00 B2 B0 FD | 	call	#__system___float_cmp
10b04     00 FA 0D F2 | 	cmp	result1, #0 wz
10b08     00 1E 26 56 |  if_ne	not	local01, #0
10b0c     A7 1E 62 FC | 	wrlong	local01, fp
10b10     A0 01 90 FD | 	jmp	#LR__1283
10b14                 | LR__1277
10b14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10b14     08 4E 05 F1 | 	add	fp, #8
10b18     A7 1E 02 FB | 	rdlong	local01, fp
10b1c     08 4E 85 F1 | 	sub	fp, #8
10b20     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b24     14 4E 05 A1 |  if_e	add	fp, #20
10b28     A7 22 02 AB |  if_e	rdlong	local03, fp
10b2c     14 4E 85 A1 |  if_e	sub	fp, #20
10b30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b34     24 00 90 5D |  if_ne	jmp	#LR__1278
10b38     00 1E 06 F6 | 	mov	local01, #0
10b3c     A7 20 02 FB | 	rdlong	local02, fp
10b40     0C 4E 05 F1 | 	add	fp, #12
10b44     A7 22 02 FB | 	rdlong	local03, fp
10b48     0C 4E 85 F1 | 	sub	fp, #12
10b4c     11 21 0A F2 | 	cmp	local02, local03 wz
10b50     01 1E 66 56 |  if_ne	neg	local01, #1
10b54     A7 1E 62 FC | 	wrlong	local01, fp
10b58     58 01 90 FD | 	jmp	#LR__1283
10b5c                 | LR__1278
10b5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
10b5c     08 4E 05 F1 | 	add	fp, #8
10b60     A7 1E 02 FB | 	rdlong	local01, fp
10b64     08 4E 85 F1 | 	sub	fp, #8
10b68     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b6c     14 4E 05 A1 |  if_e	add	fp, #20
10b70     A7 22 02 AB |  if_e	rdlong	local03, fp
10b74     14 4E 85 A1 |  if_e	sub	fp, #20
10b78     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10b7c     24 00 90 5D |  if_ne	jmp	#LR__1279
10b80     00 1E 06 F6 | 	mov	local01, #0
10b84     A7 20 02 FB | 	rdlong	local02, fp
10b88     0C 4E 05 F1 | 	add	fp, #12
10b8c     A7 22 02 FB | 	rdlong	local03, fp
10b90     0C 4E 85 F1 | 	sub	fp, #12
10b94     11 21 0A F2 | 	cmp	local02, local03 wz
10b98     01 1E 66 56 |  if_ne	neg	local01, #1
10b9c     A7 1E 62 FC | 	wrlong	local01, fp
10ba0     10 01 90 FD | 	jmp	#LR__1283
10ba4                 | LR__1279
10ba4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
10ba4     08 4E 05 F1 | 	add	fp, #8
10ba8     A7 1E 02 FB | 	rdlong	local01, fp
10bac     08 4E 85 F1 | 	sub	fp, #8
10bb0     2B 1E 0E F2 | 	cmp	local01, #43 wz
10bb4     14 4E 05 A1 |  if_e	add	fp, #20
10bb8     A7 22 02 AB |  if_e	rdlong	local03, fp
10bbc     14 4E 85 A1 |  if_e	sub	fp, #20
10bc0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10bc4     30 00 90 5D |  if_ne	jmp	#LR__1280
10bc8     00 1E 06 F6 | 	mov	local01, #0
10bcc     A7 12 02 FB | 	rdlong	arg01, fp
10bd0     58 BE BF FD | 	call	#_convertstring
10bd4     FD 12 02 F6 | 	mov	arg01, result1
10bd8     0C 4E 05 F1 | 	add	fp, #12
10bdc     A7 14 02 FB | 	rdlong	arg02, fp
10be0     0C 4E 85 F1 | 	sub	fp, #12
10be4     24 82 B0 FD | 	call	#__system___string_cmp
10be8     00 FA 0D F2 | 	cmp	result1, #0 wz
10bec     00 1E 26 56 |  if_ne	not	local01, #0
10bf0     A7 1E 62 FC | 	wrlong	local01, fp
10bf4     BC 00 90 FD | 	jmp	#LR__1283
10bf8                 | LR__1280
10bf8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
10bf8     08 4E 05 F1 | 	add	fp, #8
10bfc     A7 1E 02 FB | 	rdlong	local01, fp
10c00     08 4E 85 F1 | 	sub	fp, #8
10c04     1F 1E 0E F2 | 	cmp	local01, #31 wz
10c08     14 4E 05 A1 |  if_e	add	fp, #20
10c0c     A7 22 02 AB |  if_e	rdlong	local03, fp
10c10     14 4E 85 A1 |  if_e	sub	fp, #20
10c14     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10c18     34 00 90 5D |  if_ne	jmp	#LR__1281
10c1c     00 1E 06 F6 | 	mov	local01, #0
10c20     A7 20 02 FB | 	rdlong	local02, fp
10c24     0C 4E 05 F1 | 	add	fp, #12
10c28     A7 12 02 FB | 	rdlong	arg01, fp
10c2c     0C 4E 85 F1 | 	sub	fp, #12
10c30     F8 BD BF FD | 	call	#_convertstring
10c34     FD 14 02 F6 | 	mov	arg02, result1
10c38     10 13 02 F6 | 	mov	arg01, local02
10c3c     CC 81 B0 FD | 	call	#__system___string_cmp
10c40     00 FA 0D F2 | 	cmp	result1, #0 wz
10c44     00 1E 26 56 |  if_ne	not	local01, #0
10c48     A7 1E 62 FC | 	wrlong	local01, fp
10c4c     64 00 90 FD | 	jmp	#LR__1283
10c50                 | LR__1281
10c50                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
10c50     08 4E 05 F1 | 	add	fp, #8
10c54     A7 1E 02 FB | 	rdlong	local01, fp
10c58     08 4E 85 F1 | 	sub	fp, #8
10c5c     2B 1E 0E F2 | 	cmp	local01, #43 wz
10c60     14 4E 05 A1 |  if_e	add	fp, #20
10c64     A7 22 02 AB |  if_e	rdlong	local03, fp
10c68     14 4E 85 A1 |  if_e	sub	fp, #20
10c6c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10c70     3C 00 90 5D |  if_ne	jmp	#LR__1282
10c74     00 1E 06 F6 | 	mov	local01, #0
10c78     A7 12 02 FB | 	rdlong	arg01, fp
10c7c     AC BD BF FD | 	call	#_convertstring
10c80     FD 20 02 F6 | 	mov	local02, result1
10c84     0C 4E 05 F1 | 	add	fp, #12
10c88     A7 12 02 FB | 	rdlong	arg01, fp
10c8c     0C 4E 85 F1 | 	sub	fp, #12
10c90     98 BD BF FD | 	call	#_convertstring
10c94     FD 14 02 F6 | 	mov	arg02, result1
10c98     10 13 02 F6 | 	mov	arg01, local02
10c9c     6C 81 B0 FD | 	call	#__system___string_cmp
10ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
10ca4     00 1E 26 56 |  if_ne	not	local01, #0
10ca8     A7 1E 62 FC | 	wrlong	local01, fp
10cac     04 00 90 FD | 	jmp	#LR__1283
10cb0                 | LR__1282
10cb0     A7 00 68 FC | 	wrlong	#0, fp
10cb4                 | LR__1283
10cb4     08 4E 05 F1 | 	add	fp, #8
10cb8     A7 38 68 FC | 	wrlong	#28, fp
10cbc     08 4E 85 F1 | 	sub	fp, #8
10cc0     A7 12 02 F6 | 	mov	arg01, fp
10cc4     C0 8C BF FD | 	call	#_push
10cc8     A7 F0 03 F6 | 	mov	ptra, fp
10ccc     B2 00 A0 FD | 	call	#popregs_
10cd0                 | _do_ne_ret
10cd0     2D 00 64 FD | 	ret
10cd4                 | 
10cd4                 | ' 
10cd4                 | ' 
10cd4                 | ' 
10cd4                 | ' ' -------------------   convert a variable on the top of stack to integer
10cd4                 | ' 
10cd4                 | ' sub do_converttoint
10cd4                 | _do_converttoint
10cd4     02 4A 05 F6 | 	mov	COUNT_, #2
10cd8     A8 00 A0 FD | 	call	#pushregs_
10cdc     18 F0 07 F1 | 	add	ptra, #24
10ce0     0C 8C BF FD | 	call	#_pop
10ce4     FE 1E 02 F6 | 	mov	local01, result2
10ce8     FF 20 02 F6 | 	mov	local02, result3
10cec     A7 FA 61 FC | 	wrlong	result1, fp
10cf0     04 4E 05 F1 | 	add	fp, #4
10cf4     A7 1E 62 FC | 	wrlong	local01, fp
10cf8     04 4E 05 F1 | 	add	fp, #4
10cfc     A7 20 62 FC | 	wrlong	local02, fp
10d00                 | ' t1=pop() 
10d00                 | ' select case t1.result_type
10d00     08 4E 85 F1 | 	sub	fp, #8
10d04     1C 20 0E F2 | 	cmp	local02, #28 wz
10d08     2C 00 90 AD |  if_e	jmp	#LR__1290
10d0c     1D 20 0E F2 | 	cmp	local02, #29 wz
10d10     40 00 90 AD |  if_e	jmp	#LR__1291
10d14     1E 20 0E F2 | 	cmp	local02, #30 wz
10d18     54 00 90 AD |  if_e	jmp	#LR__1292
10d1c     1F 20 0E F2 | 	cmp	local02, #31 wz
10d20     70 00 90 AD |  if_e	jmp	#LR__1293
10d24     2B 20 0E F2 | 	cmp	local02, #43 wz
10d28     94 00 90 AD |  if_e	jmp	#LR__1294
10d2c     FF 20 0E F2 | 	cmp	local02, #255 wz
10d30     C0 00 90 AD |  if_e	jmp	#LR__1295
10d34     DC 00 90 FD | 	jmp	#LR__1296
10d38                 | LR__1290
10d38     A7 20 02 FB | 	rdlong	local02, fp
10d3c     0C 4E 05 F1 | 	add	fp, #12
10d40     A7 20 62 FC | 	wrlong	local02, fp
10d44     04 4E 05 F1 | 	add	fp, #4
10d48     A7 38 68 FC | 	wrlong	#28, fp
10d4c     10 4E 85 F1 | 	sub	fp, #16
10d50     D4 00 90 FD | 	jmp	#LR__1297
10d54                 | LR__1291
10d54     A7 20 02 FB | 	rdlong	local02, fp
10d58     0C 4E 05 F1 | 	add	fp, #12
10d5c     A7 20 62 FC | 	wrlong	local02, fp
10d60     04 4E 05 F1 | 	add	fp, #4
10d64     A7 38 68 FC | 	wrlong	#28, fp
10d68     10 4E 85 F1 | 	sub	fp, #16
10d6c     B8 00 90 FD | 	jmp	#LR__1297
10d70                 | LR__1292
10d70     A7 12 02 FB | 	rdlong	arg01, fp
10d74     01 14 06 F6 | 	mov	arg02, #1
10d78     1C B0 B0 FD | 	call	#__system___float_tointeger
10d7c     0C 4E 05 F1 | 	add	fp, #12
10d80     A7 FA 61 FC | 	wrlong	result1, fp
10d84     04 4E 05 F1 | 	add	fp, #4
10d88     A7 38 68 FC | 	wrlong	#28, fp
10d8c     10 4E 85 F1 | 	sub	fp, #16
10d90     94 00 90 FD | 	jmp	#LR__1297
10d94                 | LR__1293
10d94     A7 12 02 FB | 	rdlong	arg01, fp
10d98     1C B3 B0 FD | 	call	#__system____builtin_atof
10d9c     FD 12 02 F6 | 	mov	arg01, result1
10da0     00 14 06 F6 | 	mov	arg02, #0
10da4     F0 AF B0 FD | 	call	#__system___float_tointeger
10da8     0C 4E 05 F1 | 	add	fp, #12
10dac     A7 FA 61 FC | 	wrlong	result1, fp
10db0     04 4E 05 F1 | 	add	fp, #4
10db4     A7 38 68 FC | 	wrlong	#28, fp
10db8     10 4E 85 F1 | 	sub	fp, #16
10dbc     68 00 90 FD | 	jmp	#LR__1297
10dc0                 | LR__1294
10dc0     A7 12 02 FB | 	rdlong	arg01, fp
10dc4     64 BC BF FD | 	call	#_convertstring
10dc8     FD 12 02 F6 | 	mov	arg01, result1
10dcc     E8 B2 B0 FD | 	call	#__system____builtin_atof
10dd0     FD 12 02 F6 | 	mov	arg01, result1
10dd4     00 14 06 F6 | 	mov	arg02, #0
10dd8     BC AF B0 FD | 	call	#__system___float_tointeger
10ddc     0C 4E 05 F1 | 	add	fp, #12
10de0     A7 FA 61 FC | 	wrlong	result1, fp
10de4     04 4E 05 F1 | 	add	fp, #4
10de8     A7 38 68 FC | 	wrlong	#28, fp
10dec     10 4E 85 F1 | 	sub	fp, #16
10df0     34 00 90 FD | 	jmp	#LR__1297
10df4                 | LR__1295
10df4     0C 4E 05 F1 | 	add	fp, #12
10df8     A7 00 68 FC | 	wrlong	#0, fp
10dfc     0C 4E 85 F1 | 	sub	fp, #12
10e00     A7 20 02 FB | 	rdlong	local02, fp
10e04     10 4E 05 F1 | 	add	fp, #16
10e08     A7 20 62 FC | 	wrlong	local02, fp
10e0c     10 4E 85 F1 | 	sub	fp, #16
10e10     14 00 90 FD | 	jmp	#LR__1297
10e14                 | LR__1296
10e14     0C 4E 05 F1 | 	add	fp, #12
10e18     A7 00 68 FC | 	wrlong	#0, fp
10e1c     04 4E 05 F1 | 	add	fp, #4
10e20     A7 02 68 FC | 	wrlong	#1, fp
10e24     10 4E 85 F1 | 	sub	fp, #16
10e28                 | LR__1297
10e28     0C 4E 05 F1 | 	add	fp, #12
10e2c     A7 20 02 FB | 	rdlong	local02, fp
10e30     0C 4E 85 F1 | 	sub	fp, #12
10e34     A7 20 62 FC | 	wrlong	local02, fp
10e38     10 4E 05 F1 | 	add	fp, #16
10e3c     A7 20 02 FB | 	rdlong	local02, fp
10e40     08 4E 85 F1 | 	sub	fp, #8
10e44     A7 20 62 FC | 	wrlong	local02, fp
10e48     08 4E 85 F1 | 	sub	fp, #8
10e4c     A7 12 02 F6 | 	mov	arg01, fp
10e50     34 8B BF FD | 	call	#_push
10e54     A7 F0 03 F6 | 	mov	ptra, fp
10e58     B2 00 A0 FD | 	call	#popregs_
10e5c                 | _do_converttoint_ret
10e5c     2D 00 64 FD | 	ret
10e60                 | 
10e60                 | ' 
10e60                 | ' function converttoint (t1 as expr_result) as integer
10e60                 | _converttoint
10e60     02 4A 05 F6 | 	mov	COUNT_, #2
10e64     A8 00 A0 FD | 	call	#pushregs_
10e68     09 1F 02 F6 | 	mov	local01, arg01
10e6c                 | ' 
10e6c                 | ' select case t1.result_type
10e6c     08 1E 06 F1 | 	add	local01, #8
10e70     0F 21 02 FB | 	rdlong	local02, local01
10e74     08 1E 86 F1 | 	sub	local01, #8
10e78     1C 20 0E F2 | 	cmp	local02, #28 wz
10e7c     24 00 90 AD |  if_e	jmp	#LR__1300
10e80     1D 20 0E F2 | 	cmp	local02, #29 wz
10e84     24 00 90 AD |  if_e	jmp	#LR__1301
10e88     1E 20 0E F2 | 	cmp	local02, #30 wz
10e8c     24 00 90 AD |  if_e	jmp	#LR__1302
10e90     1F 20 0E F2 | 	cmp	local02, #31 wz
10e94     2C 00 90 AD |  if_e	jmp	#LR__1303
10e98     2B 20 0E F2 | 	cmp	local02, #43 wz
10e9c     3C 00 90 AD |  if_e	jmp	#LR__1304
10ea0     58 00 90 FD | 	jmp	#LR__1305
10ea4                 | LR__1300
10ea4     0F FB 01 FB | 	rdlong	result1, local01
10ea8     54 00 90 FD | 	jmp	#LR__1306
10eac                 | LR__1301
10eac     0F FB 01 FB | 	rdlong	result1, local01
10eb0     4C 00 90 FD | 	jmp	#LR__1306
10eb4                 | LR__1302
10eb4     0F 13 02 FB | 	rdlong	arg01, local01
10eb8     01 14 06 F6 | 	mov	arg02, #1
10ebc     D8 AE B0 FD | 	call	#__system___float_tointeger
10ec0     3C 00 90 FD | 	jmp	#LR__1306
10ec4                 | LR__1303
10ec4     0F 13 02 FB | 	rdlong	arg01, local01
10ec8     EC B1 B0 FD | 	call	#__system____builtin_atof
10ecc     FD 12 02 F6 | 	mov	arg01, result1
10ed0     00 14 06 F6 | 	mov	arg02, #0
10ed4     C0 AE B0 FD | 	call	#__system___float_tointeger
10ed8     24 00 90 FD | 	jmp	#LR__1306
10edc                 | LR__1304
10edc     0F 13 02 FB | 	rdlong	arg01, local01
10ee0     48 BB BF FD | 	call	#_convertstring
10ee4     FD 12 02 F6 | 	mov	arg01, result1
10ee8     CC B1 B0 FD | 	call	#__system____builtin_atof
10eec     FD 12 02 F6 | 	mov	arg01, result1
10ef0     00 14 06 F6 | 	mov	arg02, #0
10ef4     A0 AE B0 FD | 	call	#__system___float_tointeger
10ef8     04 00 90 FD | 	jmp	#LR__1306
10efc                 | LR__1305
10efc     00 FA 05 F6 | 	mov	result1, #0
10f00                 | LR__1306
10f00     A7 F0 03 F6 | 	mov	ptra, fp
10f04     B2 00 A0 FD | 	call	#popregs_
10f08                 | _converttoint_ret
10f08     2D 00 64 FD | 	ret
10f0c                 | 
10f0c                 | ' 
10f0c                 | ' function converttofloat (t1 as expr_result) as single
10f0c                 | _converttofloat
10f0c     03 4A 05 F6 | 	mov	COUNT_, #3
10f10     A8 00 A0 FD | 	call	#pushregs_
10f14     09 1F 02 F6 | 	mov	local01, arg01
10f18                 | ' 
10f18                 | ' select case t1.result_type
10f18     08 1E 06 F1 | 	add	local01, #8
10f1c     0F 21 02 FB | 	rdlong	local02, local01
10f20     08 1E 86 F1 | 	sub	local01, #8
10f24     1C 20 0E F2 | 	cmp	local02, #28 wz
10f28     24 00 90 AD |  if_e	jmp	#LR__1310
10f2c     1D 20 0E F2 | 	cmp	local02, #29 wz
10f30     38 00 90 AD |  if_e	jmp	#LR__1311
10f34     1E 20 0E F2 | 	cmp	local02, #30 wz
10f38     3C 00 90 AD |  if_e	jmp	#LR__1312
10f3c     1F 20 0E F2 | 	cmp	local02, #31 wz
10f40     3C 00 90 AD |  if_e	jmp	#LR__1313
10f44     2B 20 0E F2 | 	cmp	local02, #43 wz
10f48     40 00 90 AD |  if_e	jmp	#LR__1314
10f4c     50 00 90 FD | 	jmp	#LR__1315
10f50                 | LR__1310
10f50     0F 13 02 FB | 	rdlong	arg01, local01
10f54     09 13 52 F6 | 	abs	arg01, arg01 wc
10f58     1F 22 C6 C9 |  if_b	decod	local03, #31
10f5c     00 22 06 36 |  if_ae	mov	local03, #0
10f60     68 A5 B0 FD | 	call	#__system___float_fromuns
10f64     11 FB 61 F5 | 	xor	result1, local03
10f68     38 00 90 FD | 	jmp	#LR__1316
10f6c                 | LR__1311
10f6c     0F 13 02 FB | 	rdlong	arg01, local01
10f70     58 A5 B0 FD | 	call	#__system___float_fromuns
10f74     2C 00 90 FD | 	jmp	#LR__1316
10f78                 | LR__1312
10f78     0F FB 01 FB | 	rdlong	result1, local01
10f7c     24 00 90 FD | 	jmp	#LR__1316
10f80                 | LR__1313
10f80     0F 13 02 FB | 	rdlong	arg01, local01
10f84     30 B1 B0 FD | 	call	#__system____builtin_atof
10f88     18 00 90 FD | 	jmp	#LR__1316
10f8c                 | LR__1314
10f8c     0F 13 02 FB | 	rdlong	arg01, local01
10f90     98 BA BF FD | 	call	#_convertstring
10f94     FD 12 02 F6 | 	mov	arg01, result1
10f98     1C B1 B0 FD | 	call	#__system____builtin_atof
10f9c     04 00 90 FD | 	jmp	#LR__1316
10fa0                 | LR__1315
10fa0     00 FA 05 F6 | 	mov	result1, #0
10fa4                 | LR__1316
10fa4     A7 F0 03 F6 | 	mov	ptra, fp
10fa8     B2 00 A0 FD | 	call	#popregs_
10fac                 | _converttofloat_ret
10fac     2D 00 64 FD | 	ret
10fb0                 | 
10fb0                 | ' 
10fb0                 | ' sub do_rnd
10fb0                 | _do_rnd
10fb0     01 4A 05 F6 | 	mov	COUNT_, #1
10fb4     A8 00 A0 FD | 	call	#pushregs_
10fb8     10 F0 07 F1 | 	add	ptra, #16
10fbc     69 00 00 FF 
10fc0     54 E5 05 F1 | 	add	objptr, ##54100
10fc4     F2 1E 02 FB | 	rdlong	local01, objptr
10fc8     0F 17 02 F6 | 	mov	arg03, local01
10fcc     01 16 66 F0 | 	shl	arg03, #1
10fd0     0F 17 02 F1 | 	add	arg03, local01
10fd4     02 16 66 F0 | 	shl	arg03, #2
10fd8     03 00 00 FF 
10fdc     04 E4 85 F1 | 	sub	objptr, ##1540
10fe0     F2 16 02 F1 | 	add	arg03, objptr
10fe4     0B 17 02 FB | 	rdlong	arg03, arg03
10fe8     0C 4E 05 F1 | 	add	fp, #12
10fec     A7 16 62 FC | 	wrlong	arg03, fp
10ff0                 | ' 
10ff0                 | ' numpar=compiledline(lineptr_e).result.uresult
10ff0                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
10ff0     0C 4E 85 F1 | 	sub	fp, #12
10ff4     02 16 16 F2 | 	cmp	arg03, #2 wc
10ff8     66 00 00 FF 
10ffc     50 E5 85 F1 | 	sub	objptr, ##52560
11000     3C 00 90 CD |  if_b	jmp	#LR__1320
11004     00 12 06 F6 | 	mov	arg01, #0
11008     DC D6 B0 FD | 	call	#__system___getiolock_0423
1100c     FD 12 02 F6 | 	mov	arg01, result1
11010     D0 7D B0 FD | 	call	#__system___lockmem
11014     44 01 00 FF 
11018     81 14 06 F6 | 	mov	arg02, ##@LR__4585
1101c     00 12 06 F6 | 	mov	arg01, #0
11020     00 16 06 F6 | 	mov	arg03, #0
11024     B0 8A B0 FD | 	call	#__system___basic_print_string
11028     00 12 06 F6 | 	mov	arg01, #0
1102c     B8 D6 B0 FD | 	call	#__system___getiolock_0423
11030     FD 00 68 FC | 	wrlong	#0, result1
11034     27 12 06 F6 | 	mov	arg01, #39
11038     24 48 B0 FD | 	call	#_printerror
1103c     2C 01 90 FD | 	jmp	#LR__1327
11040                 | LR__1320
11040                 | ' if numpar=0 then
11040     0C 4E 05 F1 | 	add	fp, #12
11044     A7 FE 09 FB | 	rdlong	result3, fp wz
11048     0C 4E 85 F1 | 	sub	fp, #12
1104c     20 00 90 5D |  if_ne	jmp	#LR__1321
11050     08 4E 05 F1 | 	add	fp, #8
11054     A7 3A 68 FC | 	wrlong	#29, fp
11058     08 4E 85 F1 | 	sub	fp, #8
1105c     1B FA 61 FD | 	getrnd	result1
11060     A7 FA 61 FC | 	wrlong	result1, fp
11064     A7 12 02 F6 | 	mov	arg01, fp
11068     1C 89 BF FD | 	call	#_push
1106c     FC 00 90 FD | 	jmp	#LR__1326
11070                 | LR__1321
11070     7C 88 BF FD | 	call	#_pop
11074     A7 FA 61 FC | 	wrlong	result1, fp
11078     04 4E 05 F1 | 	add	fp, #4
1107c     A7 FC 61 FC | 	wrlong	result2, fp
11080     04 4E 05 F1 | 	add	fp, #4
11084     A7 FE 61 FC | 	wrlong	result3, fp
11088                 | '   t1=pop()
11088                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
11088     08 4E 85 F1 | 	sub	fp, #8
1108c     1C FE 0D F2 | 	cmp	result3, #28 wz
11090     08 4E 05 51 |  if_ne	add	fp, #8
11094     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11098     08 4E 85 51 |  if_ne	sub	fp, #8
1109c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
110a0     2C 00 90 5D |  if_ne	jmp	#LR__1322
110a4     1B FA 61 FD | 	getrnd	result1
110a8     A7 1E 02 FB | 	rdlong	local01, fp
110ac     0F FB 11 FD | 	qdiv	result1, local01
110b0     A7 12 02 F6 | 	mov	arg01, fp
110b4     19 1E 62 FD | 	getqy	local01
110b8     A7 1E 62 FC | 	wrlong	local01, fp
110bc     08 4E 05 F1 | 	add	fp, #8
110c0     A7 3A 68 FC | 	wrlong	#29, fp
110c4     08 4E 85 F1 | 	sub	fp, #8
110c8     BC 88 BF FD | 	call	#_push
110cc     9C 00 90 FD | 	jmp	#LR__1325
110d0                 | LR__1322
110d0     08 4E 05 F1 | 	add	fp, #8
110d4     A7 1E 02 FB | 	rdlong	local01, fp
110d8     08 4E 85 F1 | 	sub	fp, #8
110dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
110e0     48 00 90 5D |  if_ne	jmp	#LR__1323
110e4     A7 12 02 FB | 	rdlong	arg01, fp
110e8     00 C0 24 FF 
110ec     00 14 06 F6 | 	mov	arg02, ##1233125376
110f0     E0 A9 B0 FD | 	call	#__system___float_div
110f4     FD 1E 02 F6 | 	mov	local01, result1
110f8     1B 12 62 FD | 	getrnd	arg01
110fc     74 13 06 F4 | 	bitl	arg01, #372
11100     C8 A3 B0 FD | 	call	#__system___float_fromuns
11104     FD 14 02 F6 | 	mov	arg02, result1
11108     0F 13 02 F6 | 	mov	arg01, local01
1110c     C0 A7 B0 FD | 	call	#__system___float_mul
11110     A7 FA 61 FC | 	wrlong	result1, fp
11114     08 4E 05 F1 | 	add	fp, #8
11118     A7 3C 68 FC | 	wrlong	#30, fp
1111c     08 4E 85 F1 | 	sub	fp, #8
11120     A7 12 02 F6 | 	mov	arg01, fp
11124     60 88 BF FD | 	call	#_push
11128     40 00 90 FD | 	jmp	#LR__1324
1112c                 | LR__1323
1112c                 | '     print "rnd: "; : printerror(40) 
1112c     00 12 06 F6 | 	mov	arg01, #0
11130     B4 D5 B0 FD | 	call	#__system___getiolock_0423
11134     FD 12 02 F6 | 	mov	arg01, result1
11138     A8 7C B0 FD | 	call	#__system___lockmem
1113c     44 01 00 FF 
11140     87 14 06 F6 | 	mov	arg02, ##@LR__4586
11144     00 12 06 F6 | 	mov	arg01, #0
11148     00 16 06 F6 | 	mov	arg03, #0
1114c     88 89 B0 FD | 	call	#__system___basic_print_string
11150     00 12 06 F6 | 	mov	arg01, #0
11154     90 D5 B0 FD | 	call	#__system___getiolock_0423
11158     FD 00 68 FC | 	wrlong	#0, result1
1115c     28 12 06 F6 | 	mov	arg01, #40
11160     FC 46 B0 FD | 	call	#_printerror
11164     A7 12 02 F6 | 	mov	arg01, fp
11168     1C 88 BF FD | 	call	#_push
1116c                 | LR__1324
1116c                 | LR__1325
1116c                 | LR__1326
1116c                 | LR__1327
1116c     A7 F0 03 F6 | 	mov	ptra, fp
11170     B2 00 A0 FD | 	call	#popregs_
11174                 | _do_rnd_ret
11174     2D 00 64 FD | 	ret
11178                 | 
11178                 | ' 
11178                 | ' sub do_sin
11178                 | _do_sin
11178     01 4A 05 F6 | 	mov	COUNT_, #1
1117c     A8 00 A0 FD | 	call	#pushregs_
11180     10 F0 07 F1 | 	add	ptra, #16
11184     69 00 00 FF 
11188     54 E5 05 F1 | 	add	objptr, ##54100
1118c     F2 1E 02 FB | 	rdlong	local01, objptr
11190     0F 17 02 F6 | 	mov	arg03, local01
11194     01 16 66 F0 | 	shl	arg03, #1
11198     0F 17 02 F1 | 	add	arg03, local01
1119c     02 16 66 F0 | 	shl	arg03, #2
111a0     03 00 00 FF 
111a4     04 E4 85 F1 | 	sub	objptr, ##1540
111a8     F2 16 02 F1 | 	add	arg03, objptr
111ac     0B 17 02 FB | 	rdlong	arg03, arg03
111b0     0C 4E 05 F1 | 	add	fp, #12
111b4     A7 16 62 FC | 	wrlong	arg03, fp
111b8                 | ' 
111b8                 | ' numpar=compiledline(lineptr_e).result.uresult
111b8                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
111b8     0C 4E 85 F1 | 	sub	fp, #12
111bc     02 16 16 F2 | 	cmp	arg03, #2 wc
111c0     66 00 00 FF 
111c4     50 E5 85 F1 | 	sub	objptr, ##52560
111c8     0C 4E 05 C1 |  if_b	add	fp, #12
111cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
111d0     0C 4E 85 C1 |  if_b	sub	fp, #12
111d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1330
111d8     00 12 06 F6 | 	mov	arg01, #0
111dc     08 D5 B0 FD | 	call	#__system___getiolock_0423
111e0     FD 12 02 F6 | 	mov	arg01, result1
111e4     FC 7B B0 FD | 	call	#__system___lockmem
111e8     44 01 00 FF 
111ec     8D 14 06 F6 | 	mov	arg02, ##@LR__4587
111f0     00 12 06 F6 | 	mov	arg01, #0
111f4     00 16 06 F6 | 	mov	arg03, #0
111f8     DC 88 B0 FD | 	call	#__system___basic_print_string
111fc     00 12 06 F6 | 	mov	arg01, #0
11200     E4 D4 B0 FD | 	call	#__system___getiolock_0423
11204     FD 00 68 FC | 	wrlong	#0, result1
11208     27 12 06 F6 | 	mov	arg01, #39
1120c     50 46 B0 FD | 	call	#_printerror
11210     64 00 90 FD | 	jmp	#LR__1331
11214                 | LR__1330
11214     D8 86 BF FD | 	call	#_pop
11218     A7 FA 61 FC | 	wrlong	result1, fp
1121c     04 4E 05 F1 | 	add	fp, #4
11220     A7 FC 61 FC | 	wrlong	result2, fp
11224     04 4E 05 F1 | 	add	fp, #4
11228     A7 FE 61 FC | 	wrlong	result3, fp
1122c     08 4E 85 F1 | 	sub	fp, #8
11230     7A 00 00 FF 
11234     5C E5 05 F1 | 	add	objptr, ##62812
11238     F2 1E 02 FB | 	rdlong	local01, objptr
1123c     7A 00 00 FF 
11240     5C E5 85 F1 | 	sub	objptr, ##62812
11244     A7 12 02 F6 | 	mov	arg01, fp
11248     C0 FC BF FD | 	call	#_converttofloat
1124c     FD 14 02 F6 | 	mov	arg02, result1
11250     0F 13 02 F6 | 	mov	arg01, local01
11254     78 A6 B0 FD | 	call	#__system___float_mul
11258     FD 12 02 F6 | 	mov	arg01, result1
1125c     AC AF B0 FD | 	call	#__system____builtin_sinf
11260     A7 FA 61 FC | 	wrlong	result1, fp
11264     08 4E 05 F1 | 	add	fp, #8
11268     A7 3C 68 FC | 	wrlong	#30, fp
1126c     08 4E 85 F1 | 	sub	fp, #8
11270     A7 12 02 F6 | 	mov	arg01, fp
11274     10 87 BF FD | 	call	#_push
11278                 | LR__1331
11278     A7 F0 03 F6 | 	mov	ptra, fp
1127c     B2 00 A0 FD | 	call	#popregs_
11280                 | _do_sin_ret
11280     2D 00 64 FD | 	ret
11284                 | 
11284                 | ' 
11284                 | ' sub do_cos
11284                 | _do_cos
11284     01 4A 05 F6 | 	mov	COUNT_, #1
11288     A8 00 A0 FD | 	call	#pushregs_
1128c     10 F0 07 F1 | 	add	ptra, #16
11290     69 00 00 FF 
11294     54 E5 05 F1 | 	add	objptr, ##54100
11298     F2 1E 02 FB | 	rdlong	local01, objptr
1129c     0F 17 02 F6 | 	mov	arg03, local01
112a0     01 16 66 F0 | 	shl	arg03, #1
112a4     0F 17 02 F1 | 	add	arg03, local01
112a8     02 16 66 F0 | 	shl	arg03, #2
112ac     03 00 00 FF 
112b0     04 E4 85 F1 | 	sub	objptr, ##1540
112b4     F2 16 02 F1 | 	add	arg03, objptr
112b8     0B 17 02 FB | 	rdlong	arg03, arg03
112bc     0C 4E 05 F1 | 	add	fp, #12
112c0     A7 16 62 FC | 	wrlong	arg03, fp
112c4                 | ' 
112c4                 | ' numpar=compiledline(lineptr_e).result.uresult
112c4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
112c4     0C 4E 85 F1 | 	sub	fp, #12
112c8     02 16 16 F2 | 	cmp	arg03, #2 wc
112cc     66 00 00 FF 
112d0     50 E5 85 F1 | 	sub	objptr, ##52560
112d4     0C 4E 05 C1 |  if_b	add	fp, #12
112d8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
112dc     0C 4E 85 C1 |  if_b	sub	fp, #12
112e0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1340
112e4     00 12 06 F6 | 	mov	arg01, #0
112e8     FC D3 B0 FD | 	call	#__system___getiolock_0423
112ec     FD 12 02 F6 | 	mov	arg01, result1
112f0     F0 7A B0 FD | 	call	#__system___lockmem
112f4     44 01 00 FF 
112f8     93 14 06 F6 | 	mov	arg02, ##@LR__4588
112fc     00 12 06 F6 | 	mov	arg01, #0
11300     00 16 06 F6 | 	mov	arg03, #0
11304     D0 87 B0 FD | 	call	#__system___basic_print_string
11308     00 12 06 F6 | 	mov	arg01, #0
1130c     D8 D3 B0 FD | 	call	#__system___getiolock_0423
11310     FD 00 68 FC | 	wrlong	#0, result1
11314     27 12 06 F6 | 	mov	arg01, #39
11318     44 45 B0 FD | 	call	#_printerror
1131c     78 00 90 FD | 	jmp	#LR__1341
11320                 | LR__1340
11320     CC 85 BF FD | 	call	#_pop
11324     A7 FA 61 FC | 	wrlong	result1, fp
11328     04 4E 05 F1 | 	add	fp, #4
1132c     A7 FC 61 FC | 	wrlong	result2, fp
11330     04 4E 05 F1 | 	add	fp, #4
11334     A7 FE 61 FC | 	wrlong	result3, fp
11338     08 4E 85 F1 | 	sub	fp, #8
1133c     7A 00 00 FF 
11340     5C E5 05 F1 | 	add	objptr, ##62812
11344     F2 1E 02 FB | 	rdlong	local01, objptr
11348     7A 00 00 FF 
1134c     5C E5 85 F1 | 	sub	objptr, ##62812
11350     A7 12 02 F6 | 	mov	arg01, fp
11354     B4 FB BF FD | 	call	#_converttofloat
11358     FD 14 02 F6 | 	mov	arg02, result1
1135c     0F 13 02 F6 | 	mov	arg01, local01
11360     6C A5 B0 FD | 	call	#__system___float_mul
11364     FD 14 02 F6 | 	mov	arg02, result1
11368     87 E4 1F FF 
1136c     DB 13 06 F6 | 	mov	arg01, ##1070141403
11370     1F 14 E6 F4 | 	bitnot	arg02, #31
11374     88 A1 B0 FD | 	call	#__system___float_add
11378     FD 12 02 F6 | 	mov	arg01, result1
1137c     8C AE B0 FD | 	call	#__system____builtin_sinf
11380     A7 FA 61 FC | 	wrlong	result1, fp
11384     08 4E 05 F1 | 	add	fp, #8
11388     A7 3C 68 FC | 	wrlong	#30, fp
1138c     08 4E 85 F1 | 	sub	fp, #8
11390     A7 12 02 F6 | 	mov	arg01, fp
11394     F0 85 BF FD | 	call	#_push
11398                 | LR__1341
11398     A7 F0 03 F6 | 	mov	ptra, fp
1139c     B2 00 A0 FD | 	call	#popregs_
113a0                 | _do_cos_ret
113a0     2D 00 64 FD | 	ret
113a4                 | 
113a4                 | ' 
113a4                 | ' sub do_tan
113a4                 | _do_tan
113a4     01 4A 05 F6 | 	mov	COUNT_, #1
113a8     A8 00 A0 FD | 	call	#pushregs_
113ac     10 F0 07 F1 | 	add	ptra, #16
113b0     69 00 00 FF 
113b4     54 E5 05 F1 | 	add	objptr, ##54100
113b8     F2 1E 02 FB | 	rdlong	local01, objptr
113bc     0F 17 02 F6 | 	mov	arg03, local01
113c0     01 16 66 F0 | 	shl	arg03, #1
113c4     0F 17 02 F1 | 	add	arg03, local01
113c8     02 16 66 F0 | 	shl	arg03, #2
113cc     03 00 00 FF 
113d0     04 E4 85 F1 | 	sub	objptr, ##1540
113d4     F2 16 02 F1 | 	add	arg03, objptr
113d8     0B 17 02 FB | 	rdlong	arg03, arg03
113dc     0C 4E 05 F1 | 	add	fp, #12
113e0     A7 16 62 FC | 	wrlong	arg03, fp
113e4                 | ' 
113e4                 | ' numpar=compiledline(lineptr_e).result.uresult
113e4                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
113e4     0C 4E 85 F1 | 	sub	fp, #12
113e8     02 16 16 F2 | 	cmp	arg03, #2 wc
113ec     66 00 00 FF 
113f0     50 E5 85 F1 | 	sub	objptr, ##52560
113f4     0C 4E 05 C1 |  if_b	add	fp, #12
113f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
113fc     0C 4E 85 C1 |  if_b	sub	fp, #12
11400     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
11404     00 12 06 F6 | 	mov	arg01, #0
11408     DC D2 B0 FD | 	call	#__system___getiolock_0423
1140c     FD 12 02 F6 | 	mov	arg01, result1
11410     D0 79 B0 FD | 	call	#__system___lockmem
11414     44 01 00 FF 
11418     99 14 06 F6 | 	mov	arg02, ##@LR__4589
1141c     00 12 06 F6 | 	mov	arg01, #0
11420     00 16 06 F6 | 	mov	arg03, #0
11424     B0 86 B0 FD | 	call	#__system___basic_print_string
11428     00 12 06 F6 | 	mov	arg01, #0
1142c     B8 D2 B0 FD | 	call	#__system___getiolock_0423
11430     FD 00 68 FC | 	wrlong	#0, result1
11434     27 12 06 F6 | 	mov	arg01, #39
11438     24 44 B0 FD | 	call	#_printerror
1143c     64 00 90 FD | 	jmp	#LR__1351
11440                 | LR__1350
11440     AC 84 BF FD | 	call	#_pop
11444     A7 FA 61 FC | 	wrlong	result1, fp
11448     04 4E 05 F1 | 	add	fp, #4
1144c     A7 FC 61 FC | 	wrlong	result2, fp
11450     04 4E 05 F1 | 	add	fp, #4
11454     A7 FE 61 FC | 	wrlong	result3, fp
11458     08 4E 85 F1 | 	sub	fp, #8
1145c     7A 00 00 FF 
11460     5C E5 05 F1 | 	add	objptr, ##62812
11464     F2 1E 02 FB | 	rdlong	local01, objptr
11468     7A 00 00 FF 
1146c     5C E5 85 F1 | 	sub	objptr, ##62812
11470     A7 12 02 F6 | 	mov	arg01, fp
11474     94 FA BF FD | 	call	#_converttofloat
11478     FD 14 02 F6 | 	mov	arg02, result1
1147c     0F 13 02 F6 | 	mov	arg01, local01
11480     4C A4 B0 FD | 	call	#__system___float_mul
11484     FD 12 02 F6 | 	mov	arg01, result1
11488     CC AE B0 FD | 	call	#__system____builtin_tanf
1148c     A7 FA 61 FC | 	wrlong	result1, fp
11490     08 4E 05 F1 | 	add	fp, #8
11494     A7 3C 68 FC | 	wrlong	#30, fp
11498     08 4E 85 F1 | 	sub	fp, #8
1149c     A7 12 02 F6 | 	mov	arg01, fp
114a0     E4 84 BF FD | 	call	#_push
114a4                 | LR__1351
114a4     A7 F0 03 F6 | 	mov	ptra, fp
114a8     B2 00 A0 FD | 	call	#popregs_
114ac                 | _do_tan_ret
114ac     2D 00 64 FD | 	ret
114b0                 | 
114b0                 | ' 
114b0                 | ' sub do_asin
114b0                 | _do_asin
114b0     01 4A 05 F6 | 	mov	COUNT_, #1
114b4     A8 00 A0 FD | 	call	#pushregs_
114b8     10 F0 07 F1 | 	add	ptra, #16
114bc     69 00 00 FF 
114c0     54 E5 05 F1 | 	add	objptr, ##54100
114c4     F2 1E 02 FB | 	rdlong	local01, objptr
114c8     0F 17 02 F6 | 	mov	arg03, local01
114cc     01 16 66 F0 | 	shl	arg03, #1
114d0     0F 17 02 F1 | 	add	arg03, local01
114d4     02 16 66 F0 | 	shl	arg03, #2
114d8     03 00 00 FF 
114dc     04 E4 85 F1 | 	sub	objptr, ##1540
114e0     F2 16 02 F1 | 	add	arg03, objptr
114e4     0B 17 02 FB | 	rdlong	arg03, arg03
114e8     0C 4E 05 F1 | 	add	fp, #12
114ec     A7 16 62 FC | 	wrlong	arg03, fp
114f0                 | ' 
114f0                 | ' numpar=compiledline(lineptr_e).result.uresult
114f0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
114f0     0C 4E 85 F1 | 	sub	fp, #12
114f4     02 16 16 F2 | 	cmp	arg03, #2 wc
114f8     66 00 00 FF 
114fc     50 E5 85 F1 | 	sub	objptr, ##52560
11500     0C 4E 05 C1 |  if_b	add	fp, #12
11504     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11508     0C 4E 85 C1 |  if_b	sub	fp, #12
1150c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
11510     00 12 06 F6 | 	mov	arg01, #0
11514     D0 D1 B0 FD | 	call	#__system___getiolock_0423
11518     FD 12 02 F6 | 	mov	arg01, result1
1151c     C4 78 B0 FD | 	call	#__system___lockmem
11520     44 01 00 FF 
11524     9F 14 06 F6 | 	mov	arg02, ##@LR__4590
11528     00 12 06 F6 | 	mov	arg01, #0
1152c     00 16 06 F6 | 	mov	arg03, #0
11530     A4 85 B0 FD | 	call	#__system___basic_print_string
11534     00 12 06 F6 | 	mov	arg01, #0
11538     AC D1 B0 FD | 	call	#__system___getiolock_0423
1153c     FD 00 68 FC | 	wrlong	#0, result1
11540     27 12 06 F6 | 	mov	arg01, #39
11544     18 43 B0 FD | 	call	#_printerror
11548     64 00 90 FD | 	jmp	#LR__1361
1154c                 | LR__1360
1154c     A0 83 BF FD | 	call	#_pop
11550     FF 1E 02 F6 | 	mov	local01, result3
11554     A7 FA 61 FC | 	wrlong	result1, fp
11558     04 4E 05 F1 | 	add	fp, #4
1155c     A7 FC 61 FC | 	wrlong	result2, fp
11560     04 4E 05 F1 | 	add	fp, #4
11564     A7 1E 62 FC | 	wrlong	local01, fp
11568     08 4E 85 F1 | 	sub	fp, #8
1156c     A7 12 02 F6 | 	mov	arg01, fp
11570     98 F9 BF FD | 	call	#_converttofloat
11574     FD 12 02 F6 | 	mov	arg01, result1
11578     24 AE B0 FD | 	call	#__system____builtin_asinf
1157c     FD 12 02 F6 | 	mov	arg01, result1
11580     7A 00 00 FF 
11584     60 E5 05 F1 | 	add	objptr, ##62816
11588     F2 14 02 FB | 	rdlong	arg02, objptr
1158c     7A 00 00 FF 
11590     60 E5 85 F1 | 	sub	objptr, ##62816
11594     38 A3 B0 FD | 	call	#__system___float_mul
11598     A7 FA 61 FC | 	wrlong	result1, fp
1159c     08 4E 05 F1 | 	add	fp, #8
115a0     A7 3C 68 FC | 	wrlong	#30, fp
115a4     08 4E 85 F1 | 	sub	fp, #8
115a8     A7 12 02 F6 | 	mov	arg01, fp
115ac     D8 83 BF FD | 	call	#_push
115b0                 | LR__1361
115b0     A7 F0 03 F6 | 	mov	ptra, fp
115b4     B2 00 A0 FD | 	call	#popregs_
115b8                 | _do_asin_ret
115b8     2D 00 64 FD | 	ret
115bc                 | 
115bc                 | ' 
115bc                 | ' sub do_acos
115bc                 | _do_acos
115bc     01 4A 05 F6 | 	mov	COUNT_, #1
115c0     A8 00 A0 FD | 	call	#pushregs_
115c4     10 F0 07 F1 | 	add	ptra, #16
115c8     69 00 00 FF 
115cc     54 E5 05 F1 | 	add	objptr, ##54100
115d0     F2 1E 02 FB | 	rdlong	local01, objptr
115d4     0F 17 02 F6 | 	mov	arg03, local01
115d8     01 16 66 F0 | 	shl	arg03, #1
115dc     0F 17 02 F1 | 	add	arg03, local01
115e0     02 16 66 F0 | 	shl	arg03, #2
115e4     03 00 00 FF 
115e8     04 E4 85 F1 | 	sub	objptr, ##1540
115ec     F2 16 02 F1 | 	add	arg03, objptr
115f0     0B 17 02 FB | 	rdlong	arg03, arg03
115f4     0C 4E 05 F1 | 	add	fp, #12
115f8     A7 16 62 FC | 	wrlong	arg03, fp
115fc                 | ' 
115fc                 | ' numpar=compiledline(lineptr_e).result.uresult
115fc                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
115fc     0C 4E 85 F1 | 	sub	fp, #12
11600     02 16 16 F2 | 	cmp	arg03, #2 wc
11604     66 00 00 FF 
11608     50 E5 85 F1 | 	sub	objptr, ##52560
1160c     0C 4E 05 C1 |  if_b	add	fp, #12
11610     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11614     0C 4E 85 C1 |  if_b	sub	fp, #12
11618     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
1161c     00 12 06 F6 | 	mov	arg01, #0
11620     C4 D0 B0 FD | 	call	#__system___getiolock_0423
11624     FD 12 02 F6 | 	mov	arg01, result1
11628     B8 77 B0 FD | 	call	#__system___lockmem
1162c     44 01 00 FF 
11630     A6 14 06 F6 | 	mov	arg02, ##@LR__4591
11634     00 12 06 F6 | 	mov	arg01, #0
11638     00 16 06 F6 | 	mov	arg03, #0
1163c     98 84 B0 FD | 	call	#__system___basic_print_string
11640     00 12 06 F6 | 	mov	arg01, #0
11644     A0 D0 B0 FD | 	call	#__system___getiolock_0423
11648     FD 00 68 FC | 	wrlong	#0, result1
1164c     27 12 06 F6 | 	mov	arg01, #39
11650     0C 42 B0 FD | 	call	#_printerror
11654     64 00 90 FD | 	jmp	#LR__1371
11658                 | LR__1370
11658     94 82 BF FD | 	call	#_pop
1165c     FF 1E 02 F6 | 	mov	local01, result3
11660     A7 FA 61 FC | 	wrlong	result1, fp
11664     04 4E 05 F1 | 	add	fp, #4
11668     A7 FC 61 FC | 	wrlong	result2, fp
1166c     04 4E 05 F1 | 	add	fp, #4
11670     A7 1E 62 FC | 	wrlong	local01, fp
11674     08 4E 85 F1 | 	sub	fp, #8
11678     A7 12 02 F6 | 	mov	arg01, fp
1167c     8C F8 BF FD | 	call	#_converttofloat
11680     FD 12 02 F6 | 	mov	arg01, result1
11684     64 AD B0 FD | 	call	#__system____builtin_acosf
11688     FD 12 02 F6 | 	mov	arg01, result1
1168c     7A 00 00 FF 
11690     60 E5 05 F1 | 	add	objptr, ##62816
11694     F2 14 02 FB | 	rdlong	arg02, objptr
11698     7A 00 00 FF 
1169c     60 E5 85 F1 | 	sub	objptr, ##62816
116a0     2C A2 B0 FD | 	call	#__system___float_mul
116a4     A7 FA 61 FC | 	wrlong	result1, fp
116a8     08 4E 05 F1 | 	add	fp, #8
116ac     A7 3C 68 FC | 	wrlong	#30, fp
116b0     08 4E 85 F1 | 	sub	fp, #8
116b4     A7 12 02 F6 | 	mov	arg01, fp
116b8     CC 82 BF FD | 	call	#_push
116bc                 | LR__1371
116bc     A7 F0 03 F6 | 	mov	ptra, fp
116c0     B2 00 A0 FD | 	call	#popregs_
116c4                 | _do_acos_ret
116c4     2D 00 64 FD | 	ret
116c8                 | 
116c8                 | ' 
116c8                 | ' sub do_atn
116c8                 | _do_atn
116c8     01 4A 05 F6 | 	mov	COUNT_, #1
116cc     A8 00 A0 FD | 	call	#pushregs_
116d0     10 F0 07 F1 | 	add	ptra, #16
116d4     69 00 00 FF 
116d8     54 E5 05 F1 | 	add	objptr, ##54100
116dc     F2 1E 02 FB | 	rdlong	local01, objptr
116e0     0F 17 02 F6 | 	mov	arg03, local01
116e4     01 16 66 F0 | 	shl	arg03, #1
116e8     0F 17 02 F1 | 	add	arg03, local01
116ec     02 16 66 F0 | 	shl	arg03, #2
116f0     03 00 00 FF 
116f4     04 E4 85 F1 | 	sub	objptr, ##1540
116f8     F2 16 02 F1 | 	add	arg03, objptr
116fc     0B 17 02 FB | 	rdlong	arg03, arg03
11700     0C 4E 05 F1 | 	add	fp, #12
11704     A7 16 62 FC | 	wrlong	arg03, fp
11708                 | ' 
11708                 | ' numpar=compiledline(lineptr_e).result.uresult
11708                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
11708     0C 4E 85 F1 | 	sub	fp, #12
1170c     02 16 16 F2 | 	cmp	arg03, #2 wc
11710     66 00 00 FF 
11714     50 E5 85 F1 | 	sub	objptr, ##52560
11718     0C 4E 05 C1 |  if_b	add	fp, #12
1171c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11720     0C 4E 85 C1 |  if_b	sub	fp, #12
11724     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
11728     00 12 06 F6 | 	mov	arg01, #0
1172c     B8 CF B0 FD | 	call	#__system___getiolock_0423
11730     FD 12 02 F6 | 	mov	arg01, result1
11734     AC 76 B0 FD | 	call	#__system___lockmem
11738     44 01 00 FF 
1173c     AD 14 06 F6 | 	mov	arg02, ##@LR__4592
11740     00 12 06 F6 | 	mov	arg01, #0
11744     00 16 06 F6 | 	mov	arg03, #0
11748     8C 83 B0 FD | 	call	#__system___basic_print_string
1174c     00 12 06 F6 | 	mov	arg01, #0
11750     94 CF B0 FD | 	call	#__system___getiolock_0423
11754     FD 00 68 FC | 	wrlong	#0, result1
11758     27 12 06 F6 | 	mov	arg01, #39
1175c     00 41 B0 FD | 	call	#_printerror
11760     6C 00 90 FD | 	jmp	#LR__1381
11764                 | LR__1380
11764     88 81 BF FD | 	call	#_pop
11768     FF 1E 02 F6 | 	mov	local01, result3
1176c     A7 FA 61 FC | 	wrlong	result1, fp
11770     04 4E 05 F1 | 	add	fp, #4
11774     A7 FC 61 FC | 	wrlong	result2, fp
11778     04 4E 05 F1 | 	add	fp, #4
1177c     A7 1E 62 FC | 	wrlong	local01, fp
11780     08 4E 85 F1 | 	sub	fp, #8
11784     A7 12 02 F6 | 	mov	arg01, fp
11788     80 F7 BF FD | 	call	#_converttofloat
1178c     FD 12 02 F6 | 	mov	arg01, result1
11790     00 C0 1F FF 
11794     00 14 06 F6 | 	mov	arg02, ##1065353216
11798     9C AC B0 FD | 	call	#__system____builtin_atan2f
1179c     FD 12 02 F6 | 	mov	arg01, result1
117a0     7A 00 00 FF 
117a4     60 E5 05 F1 | 	add	objptr, ##62816
117a8     F2 14 02 FB | 	rdlong	arg02, objptr
117ac     7A 00 00 FF 
117b0     60 E5 85 F1 | 	sub	objptr, ##62816
117b4     18 A1 B0 FD | 	call	#__system___float_mul
117b8     A7 FA 61 FC | 	wrlong	result1, fp
117bc     08 4E 05 F1 | 	add	fp, #8
117c0     A7 3C 68 FC | 	wrlong	#30, fp
117c4     08 4E 85 F1 | 	sub	fp, #8
117c8     A7 12 02 F6 | 	mov	arg01, fp
117cc     B8 81 BF FD | 	call	#_push
117d0                 | LR__1381
117d0     A7 F0 03 F6 | 	mov	ptra, fp
117d4     B2 00 A0 FD | 	call	#popregs_
117d8                 | _do_atn_ret
117d8     2D 00 64 FD | 	ret
117dc                 | 
117dc                 | ' 
117dc                 | ' sub do_sqr
117dc                 | _do_sqr
117dc     01 4A 05 F6 | 	mov	COUNT_, #1
117e0     A8 00 A0 FD | 	call	#pushregs_
117e4     10 F0 07 F1 | 	add	ptra, #16
117e8     69 00 00 FF 
117ec     54 E5 05 F1 | 	add	objptr, ##54100
117f0     F2 1E 02 FB | 	rdlong	local01, objptr
117f4     0F 17 02 F6 | 	mov	arg03, local01
117f8     01 16 66 F0 | 	shl	arg03, #1
117fc     0F 17 02 F1 | 	add	arg03, local01
11800     02 16 66 F0 | 	shl	arg03, #2
11804     03 00 00 FF 
11808     04 E4 85 F1 | 	sub	objptr, ##1540
1180c     F2 16 02 F1 | 	add	arg03, objptr
11810     0B 17 02 FB | 	rdlong	arg03, arg03
11814     0C 4E 05 F1 | 	add	fp, #12
11818     A7 16 62 FC | 	wrlong	arg03, fp
1181c                 | ' 
1181c                 | ' numpar=compiledline(lineptr_e).result.uresult
1181c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1181c     0C 4E 85 F1 | 	sub	fp, #12
11820     02 16 16 F2 | 	cmp	arg03, #2 wc
11824     66 00 00 FF 
11828     50 E5 85 F1 | 	sub	objptr, ##52560
1182c     0C 4E 05 C1 |  if_b	add	fp, #12
11830     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11834     0C 4E 85 C1 |  if_b	sub	fp, #12
11838     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
1183c     00 12 06 F6 | 	mov	arg01, #0
11840     A4 CE B0 FD | 	call	#__system___getiolock_0423
11844     FD 12 02 F6 | 	mov	arg01, result1
11848     98 75 B0 FD | 	call	#__system___lockmem
1184c     44 01 00 FF 
11850     B3 14 06 F6 | 	mov	arg02, ##@LR__4593
11854     00 12 06 F6 | 	mov	arg01, #0
11858     00 16 06 F6 | 	mov	arg03, #0
1185c     78 82 B0 FD | 	call	#__system___basic_print_string
11860     00 12 06 F6 | 	mov	arg01, #0
11864     80 CE B0 FD | 	call	#__system___getiolock_0423
11868     FD 00 68 FC | 	wrlong	#0, result1
1186c     27 12 06 F6 | 	mov	arg01, #39
11870     EC 3F B0 FD | 	call	#_printerror
11874     48 00 90 FD | 	jmp	#LR__1391
11878                 | LR__1390
11878     74 80 BF FD | 	call	#_pop
1187c     FF 1E 02 F6 | 	mov	local01, result3
11880     A7 FA 61 FC | 	wrlong	result1, fp
11884     04 4E 05 F1 | 	add	fp, #4
11888     A7 FC 61 FC | 	wrlong	result2, fp
1188c     04 4E 05 F1 | 	add	fp, #4
11890     A7 1E 62 FC | 	wrlong	local01, fp
11894     08 4E 85 F1 | 	sub	fp, #8
11898     A7 12 02 F6 | 	mov	arg01, fp
1189c     6C F6 BF FD | 	call	#_converttofloat
118a0     FD 12 02 F6 | 	mov	arg01, result1
118a4     50 9F B0 FD | 	call	#__system___float_sqrt
118a8     A7 FA 61 FC | 	wrlong	result1, fp
118ac     08 4E 05 F1 | 	add	fp, #8
118b0     A7 3C 68 FC | 	wrlong	#30, fp
118b4     08 4E 85 F1 | 	sub	fp, #8
118b8     A7 12 02 F6 | 	mov	arg01, fp
118bc     C8 80 BF FD | 	call	#_push
118c0                 | LR__1391
118c0     A7 F0 03 F6 | 	mov	ptra, fp
118c4     B2 00 A0 FD | 	call	#popregs_
118c8                 | _do_sqr_ret
118c8     2D 00 64 FD | 	ret
118cc                 | 
118cc                 | ' 
118cc                 | ' sub do_stick
118cc                 | _do_stick
118cc     01 4A 05 F6 | 	mov	COUNT_, #1
118d0     A8 00 A0 FD | 	call	#pushregs_
118d4     10 F0 07 F1 | 	add	ptra, #16
118d8     69 00 00 FF 
118dc     54 E5 05 F1 | 	add	objptr, ##54100
118e0     F2 1E 02 FB | 	rdlong	local01, objptr
118e4     0F 17 02 F6 | 	mov	arg03, local01
118e8     01 16 66 F0 | 	shl	arg03, #1
118ec     0F 17 02 F1 | 	add	arg03, local01
118f0     02 16 66 F0 | 	shl	arg03, #2
118f4     03 00 00 FF 
118f8     04 E4 85 F1 | 	sub	objptr, ##1540
118fc     F2 16 02 F1 | 	add	arg03, objptr
11900     0B 17 02 FB | 	rdlong	arg03, arg03
11904     0C 4E 05 F1 | 	add	fp, #12
11908     A7 16 62 FC | 	wrlong	arg03, fp
1190c                 | ' 
1190c                 | ' numpar=compiledline(lineptr_e).result.uresult
1190c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1190c     0C 4E 85 F1 | 	sub	fp, #12
11910     02 16 16 F2 | 	cmp	arg03, #2 wc
11914     66 00 00 FF 
11918     50 E5 85 F1 | 	sub	objptr, ##52560
1191c     3C 00 90 CD |  if_b	jmp	#LR__1400
11920     00 12 06 F6 | 	mov	arg01, #0
11924     C0 CD B0 FD | 	call	#__system___getiolock_0423
11928     FD 12 02 F6 | 	mov	arg01, result1
1192c     B4 74 B0 FD | 	call	#__system___lockmem
11930     44 01 00 FF 
11934     B9 14 06 F6 | 	mov	arg02, ##@LR__4594
11938     00 12 06 F6 | 	mov	arg01, #0
1193c     00 16 06 F6 | 	mov	arg03, #0
11940     94 81 B0 FD | 	call	#__system___basic_print_string
11944     00 12 06 F6 | 	mov	arg01, #0
11948     9C CD B0 FD | 	call	#__system___getiolock_0423
1194c     FD 00 68 FC | 	wrlong	#0, result1
11950     27 12 06 F6 | 	mov	arg01, #39
11954     08 3F B0 FD | 	call	#_printerror
11958     E8 00 90 FD | 	jmp	#LR__1404
1195c                 | LR__1400
1195c                 | ' 
1195c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1195c     0C 4E 05 F1 | 	add	fp, #12
11960     A7 FE 09 FB | 	rdlong	result3, fp wz
11964     0C 4E 85 F1 | 	sub	fp, #12
11968     30 00 90 5D |  if_ne	jmp	#LR__1401
1196c     7A 00 00 FF 
11970     D0 E4 05 F1 | 	add	objptr, ##62672
11974     F2 1E 02 FB | 	rdlong	local01, objptr
11978     7A 00 00 FF 
1197c     D0 E4 85 F1 | 	sub	objptr, ##62672
11980     A7 1E 62 FC | 	wrlong	local01, fp
11984     08 4E 05 F1 | 	add	fp, #8
11988     A7 3A 68 FC | 	wrlong	#29, fp
1198c     08 4E 85 F1 | 	sub	fp, #8
11990     A7 12 02 F6 | 	mov	arg01, fp
11994     F0 7F BF FD | 	call	#_push
11998     A8 00 90 FD | 	jmp	#LR__1404
1199c                 | LR__1401
1199c     50 7F BF FD | 	call	#_pop
119a0     A7 FA 61 FC | 	wrlong	result1, fp
119a4     04 4E 05 F1 | 	add	fp, #4
119a8     A7 FC 61 FC | 	wrlong	result2, fp
119ac     04 4E 05 F1 | 	add	fp, #4
119b0     A7 FE 61 FC | 	wrlong	result3, fp
119b4                 | ' 
119b4                 | ' t1=pop()
119b4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
119b4     08 4E 85 F1 | 	sub	fp, #8
119b8     1C FE 0D F2 | 	cmp	result3, #28 wz
119bc     08 4E 05 51 |  if_ne	add	fp, #8
119c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
119c4     08 4E 85 51 |  if_ne	sub	fp, #8
119c8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
119cc     6C 00 90 5D |  if_ne	jmp	#LR__1403
119d0     A7 1E 02 FB | 	rdlong	local01, fp
119d4     7A 00 00 FF 
119d8     A8 E5 05 F1 | 	add	objptr, ##62888
119dc     F2 1E 62 FC | 	wrlong	local01, objptr
119e0                 | '   q=t1.result.uresult
119e0                 | '   if q<7 then 
119e0     7A 00 00 FF 
119e4     A8 E5 85 F1 | 	sub	objptr, ##62888
119e8     07 1E 56 F2 | 	cmps	local01, #7 wc
119ec     40 00 90 3D |  if_ae	jmp	#LR__1402
119f0     7A 00 00 FF 
119f4     A8 E5 05 F1 | 	add	objptr, ##62888
119f8     F2 1E 02 FB | 	rdlong	local01, objptr
119fc     02 1E 66 F0 | 	shl	local01, #2
11a00     D8 E4 85 F1 | 	sub	objptr, #216
11a04     F2 1E 02 F1 | 	add	local01, objptr
11a08     0F 1F 02 FB | 	rdlong	local01, local01
11a0c     A7 1E 62 FC | 	wrlong	local01, fp
11a10     08 4E 05 F1 | 	add	fp, #8
11a14     A7 3A 68 FC | 	wrlong	#29, fp
11a18     08 4E 85 F1 | 	sub	fp, #8
11a1c     A7 12 02 F6 | 	mov	arg01, fp
11a20     7A 00 00 FF 
11a24     D0 E4 85 F1 | 	sub	objptr, ##62672
11a28     5C 7F BF FD | 	call	#_push
11a2c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
11a2c     14 00 90 FD | 	jmp	#LR__1404
11a30                 | LR__1402
11a30     29 12 06 F6 | 	mov	arg01, #41
11a34     28 3E B0 FD | 	call	#_printerror
11a38                 | '      printerror(41) : return
11a38     08 00 90 FD | 	jmp	#LR__1404
11a3c                 | LR__1403
11a3c     29 12 06 F6 | 	mov	arg01, #41
11a40     1C 3E B0 FD | 	call	#_printerror
11a44                 | LR__1404
11a44     A7 F0 03 F6 | 	mov	ptra, fp
11a48     B2 00 A0 FD | 	call	#popregs_
11a4c                 | _do_stick_ret
11a4c     2D 00 64 FD | 	ret
11a50                 | 
11a50                 | ' 
11a50                 | ' sub do_strig
11a50                 | _do_strig
11a50     01 4A 05 F6 | 	mov	COUNT_, #1
11a54     A8 00 A0 FD | 	call	#pushregs_
11a58     10 F0 07 F1 | 	add	ptra, #16
11a5c     69 00 00 FF 
11a60     54 E5 05 F1 | 	add	objptr, ##54100
11a64     F2 1E 02 FB | 	rdlong	local01, objptr
11a68     0F 17 02 F6 | 	mov	arg03, local01
11a6c     01 16 66 F0 | 	shl	arg03, #1
11a70     0F 17 02 F1 | 	add	arg03, local01
11a74     02 16 66 F0 | 	shl	arg03, #2
11a78     03 00 00 FF 
11a7c     04 E4 85 F1 | 	sub	objptr, ##1540
11a80     F2 16 02 F1 | 	add	arg03, objptr
11a84     0B 17 02 FB | 	rdlong	arg03, arg03
11a88     0C 4E 05 F1 | 	add	fp, #12
11a8c     A7 16 62 FC | 	wrlong	arg03, fp
11a90                 | ' 
11a90                 | ' numpar=compiledline(lineptr_e).result.uresult
11a90                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
11a90     0C 4E 85 F1 | 	sub	fp, #12
11a94     02 16 16 F2 | 	cmp	arg03, #2 wc
11a98     66 00 00 FF 
11a9c     50 E5 85 F1 | 	sub	objptr, ##52560
11aa0     3C 00 90 CD |  if_b	jmp	#LR__1410
11aa4     00 12 06 F6 | 	mov	arg01, #0
11aa8     3C CC B0 FD | 	call	#__system___getiolock_0423
11aac     FD 12 02 F6 | 	mov	arg01, result1
11ab0     30 73 B0 FD | 	call	#__system___lockmem
11ab4     44 01 00 FF 
11ab8     C1 14 06 F6 | 	mov	arg02, ##@LR__4595
11abc     00 12 06 F6 | 	mov	arg01, #0
11ac0     00 16 06 F6 | 	mov	arg03, #0
11ac4     10 80 B0 FD | 	call	#__system___basic_print_string
11ac8     00 12 06 F6 | 	mov	arg01, #0
11acc     18 CC B0 FD | 	call	#__system___getiolock_0423
11ad0     FD 00 68 FC | 	wrlong	#0, result1
11ad4     27 12 06 F6 | 	mov	arg01, #39
11ad8     84 3D B0 FD | 	call	#_printerror
11adc     E8 00 90 FD | 	jmp	#LR__1414
11ae0                 | LR__1410
11ae0                 | ' 
11ae0                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
11ae0     0C 4E 05 F1 | 	add	fp, #12
11ae4     A7 FE 09 FB | 	rdlong	result3, fp wz
11ae8     0C 4E 85 F1 | 	sub	fp, #12
11aec     30 00 90 5D |  if_ne	jmp	#LR__1411
11af0     7A 00 00 FF 
11af4     EC E4 05 F1 | 	add	objptr, ##62700
11af8     F2 1E 02 FB | 	rdlong	local01, objptr
11afc     7A 00 00 FF 
11b00     EC E4 85 F1 | 	sub	objptr, ##62700
11b04     A7 1E 62 FC | 	wrlong	local01, fp
11b08     08 4E 05 F1 | 	add	fp, #8
11b0c     A7 3A 68 FC | 	wrlong	#29, fp
11b10     08 4E 85 F1 | 	sub	fp, #8
11b14     A7 12 02 F6 | 	mov	arg01, fp
11b18     6C 7E BF FD | 	call	#_push
11b1c     A8 00 90 FD | 	jmp	#LR__1414
11b20                 | LR__1411
11b20     CC 7D BF FD | 	call	#_pop
11b24     A7 FA 61 FC | 	wrlong	result1, fp
11b28     04 4E 05 F1 | 	add	fp, #4
11b2c     A7 FC 61 FC | 	wrlong	result2, fp
11b30     04 4E 05 F1 | 	add	fp, #4
11b34     A7 FE 61 FC | 	wrlong	result3, fp
11b38                 | ' 
11b38                 | ' t1=pop()
11b38                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11b38     08 4E 85 F1 | 	sub	fp, #8
11b3c     1C FE 0D F2 | 	cmp	result3, #28 wz
11b40     08 4E 05 51 |  if_ne	add	fp, #8
11b44     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11b48     08 4E 85 51 |  if_ne	sub	fp, #8
11b4c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11b50     6C 00 90 5D |  if_ne	jmp	#LR__1413
11b54     A7 1E 02 FB | 	rdlong	local01, fp
11b58     7A 00 00 FF 
11b5c     A8 E5 05 F1 | 	add	objptr, ##62888
11b60     F2 1E 62 FC | 	wrlong	local01, objptr
11b64                 | '   q=t1.result.uresult
11b64                 | '   if q<7 then 
11b64     7A 00 00 FF 
11b68     A8 E5 85 F1 | 	sub	objptr, ##62888
11b6c     07 1E 56 F2 | 	cmps	local01, #7 wc
11b70     40 00 90 3D |  if_ae	jmp	#LR__1412
11b74     7A 00 00 FF 
11b78     A8 E5 05 F1 | 	add	objptr, ##62888
11b7c     F2 1E 02 FB | 	rdlong	local01, objptr
11b80     02 1E 66 F0 | 	shl	local01, #2
11b84     BC E4 85 F1 | 	sub	objptr, #188
11b88     F2 1E 02 F1 | 	add	local01, objptr
11b8c     0F 1F 02 FB | 	rdlong	local01, local01
11b90     A7 1E 62 FC | 	wrlong	local01, fp
11b94     08 4E 05 F1 | 	add	fp, #8
11b98     A7 3A 68 FC | 	wrlong	#29, fp
11b9c     08 4E 85 F1 | 	sub	fp, #8
11ba0     A7 12 02 F6 | 	mov	arg01, fp
11ba4     7A 00 00 FF 
11ba8     EC E4 85 F1 | 	sub	objptr, ##62700
11bac     D8 7D BF FD | 	call	#_push
11bb0                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
11bb0     14 00 90 FD | 	jmp	#LR__1414
11bb4                 | LR__1412
11bb4     29 12 06 F6 | 	mov	arg01, #41
11bb8     A4 3C B0 FD | 	call	#_printerror
11bbc                 | '      printerror(41) : return
11bbc     08 00 90 FD | 	jmp	#LR__1414
11bc0                 | LR__1413
11bc0     29 12 06 F6 | 	mov	arg01, #41
11bc4     98 3C B0 FD | 	call	#_printerror
11bc8                 | LR__1414
11bc8     A7 F0 03 F6 | 	mov	ptra, fp
11bcc     B2 00 A0 FD | 	call	#popregs_
11bd0                 | _do_strig_ret
11bd0     2D 00 64 FD | 	ret
11bd4                 | 
11bd4                 | ' 
11bd4                 | ' sub do_getpixel
11bd4                 | _do_getpixel
11bd4     00 4A 05 F6 | 	mov	COUNT_, #0
11bd8     A8 00 A0 FD | 	call	#pushregs_
11bdc     24 F0 07 F1 | 	add	ptra, #36
11be0     69 00 00 FF 
11be4     54 E5 05 F1 | 	add	objptr, ##54100
11be8     F2 16 02 FB | 	rdlong	arg03, objptr
11bec     0B 15 02 F6 | 	mov	arg02, arg03
11bf0     01 14 66 F0 | 	shl	arg02, #1
11bf4     0B 15 02 F1 | 	add	arg02, arg03
11bf8     02 14 66 F0 | 	shl	arg02, #2
11bfc     03 00 00 FF 
11c00     04 E4 85 F1 | 	sub	objptr, ##1540
11c04     F2 14 02 F1 | 	add	arg02, objptr
11c08     0A 17 02 FB | 	rdlong	arg03, arg02
11c0c     18 4E 05 F1 | 	add	fp, #24
11c10     A7 16 62 FC | 	wrlong	arg03, fp
11c14                 | ' 
11c14                 | ' numpar=compiledline(lineptr_e).result.uresult
11c14                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11c14     18 4E 85 F1 | 	sub	fp, #24
11c18     02 16 0E F2 | 	cmp	arg03, #2 wz
11c1c     66 00 00 FF 
11c20     50 E5 85 F1 | 	sub	objptr, ##52560
11c24     3C 00 90 AD |  if_e	jmp	#LR__1420
11c28     00 12 06 F6 | 	mov	arg01, #0
11c2c     B8 CA B0 FD | 	call	#__system___getiolock_0423
11c30     FD 12 02 F6 | 	mov	arg01, result1
11c34     AC 71 B0 FD | 	call	#__system___lockmem
11c38     44 01 00 FF 
11c3c     C9 14 06 F6 | 	mov	arg02, ##@LR__4596
11c40     00 12 06 F6 | 	mov	arg01, #0
11c44     00 16 06 F6 | 	mov	arg03, #0
11c48     8C 7E B0 FD | 	call	#__system___basic_print_string
11c4c     00 12 06 F6 | 	mov	arg01, #0
11c50     94 CA B0 FD | 	call	#__system___getiolock_0423
11c54     FD 00 68 FC | 	wrlong	#0, result1
11c58     27 12 06 F6 | 	mov	arg01, #39
11c5c     00 3C B0 FD | 	call	#_printerror
11c60     B4 00 90 FD | 	jmp	#LR__1421
11c64                 | LR__1420
11c64     88 7C BF FD | 	call	#_pop
11c68     FD 16 02 F6 | 	mov	arg03, result1
11c6c     FE 14 02 F6 | 	mov	arg02, result2
11c70     FF 12 02 F6 | 	mov	arg01, result3
11c74     0C 4E 05 F1 | 	add	fp, #12
11c78     A7 16 62 FC | 	wrlong	arg03, fp
11c7c     04 4E 05 F1 | 	add	fp, #4
11c80     A7 14 62 FC | 	wrlong	arg02, fp
11c84     04 4E 05 F1 | 	add	fp, #4
11c88     A7 12 62 FC | 	wrlong	arg01, fp
11c8c     14 4E 85 F1 | 	sub	fp, #20
11c90     5C 7C BF FD | 	call	#_pop
11c94     FF 16 02 F6 | 	mov	arg03, result3
11c98     A7 FA 61 FC | 	wrlong	result1, fp
11c9c     04 4E 05 F1 | 	add	fp, #4
11ca0     A7 FC 61 FC | 	wrlong	result2, fp
11ca4     04 4E 05 F1 | 	add	fp, #4
11ca8     A7 16 62 FC | 	wrlong	arg03, fp
11cac     08 4E 85 F1 | 	sub	fp, #8
11cb0     A7 12 02 F6 | 	mov	arg01, fp
11cb4     A8 F1 BF FD | 	call	#_converttoint
11cb8     1C 4E 05 F1 | 	add	fp, #28
11cbc     A7 FA 61 FC | 	wrlong	result1, fp
11cc0     10 4E 85 F1 | 	sub	fp, #16
11cc4     A7 12 02 F6 | 	mov	arg01, fp
11cc8     0C 4E 85 F1 | 	sub	fp, #12
11ccc     90 F1 BF FD | 	call	#_converttoint
11cd0     FD 16 02 F6 | 	mov	arg03, result1
11cd4     20 4E 05 F1 | 	add	fp, #32
11cd8     A7 16 62 FC | 	wrlong	arg03, fp
11cdc     F2 12 02 FB | 	rdlong	arg01, objptr
11ce0     04 4E 85 F1 | 	sub	fp, #4
11ce4     A7 FE 01 FB | 	rdlong	result3, fp
11ce8     FF 12 02 F1 | 	add	arg01, result3
11cec     1C 4E 85 F1 | 	sub	fp, #28
11cf0     0A 16 66 F0 | 	shl	arg03, #10
11cf4     0B 13 02 F1 | 	add	arg01, arg03
11cf8     C8 3C B0 FD | 	call	#_pspeek
11cfc     FD FA E1 F8 | 	getbyte	result1, result1, #0
11d00     A7 FA 61 FC | 	wrlong	result1, fp
11d04     08 4E 05 F1 | 	add	fp, #8
11d08     A7 3A 68 FC | 	wrlong	#29, fp
11d0c     08 4E 85 F1 | 	sub	fp, #8
11d10     A7 12 02 F6 | 	mov	arg01, fp
11d14     70 7C BF FD | 	call	#_push
11d18                 | LR__1421
11d18     A7 F0 03 F6 | 	mov	ptra, fp
11d1c     B2 00 A0 FD | 	call	#popregs_
11d20                 | _do_getpixel_ret
11d20     2D 00 64 FD | 	ret
11d24                 | 
11d24                 | ' 
11d24                 | ' 
11d24                 | ' 
11d24                 | ' sub do_defsprite
11d24                 | _do_defsprite
11d24     07 4A 05 F6 | 	mov	COUNT_, #7
11d28     A8 00 A0 FD | 	call	#pushregs_
11d2c     5C F0 07 F1 | 	add	ptra, #92
11d30     BC 7B BF FD | 	call	#_pop
11d34     FD 16 02 F6 | 	mov	arg03, result1
11d38     FE 14 02 F6 | 	mov	arg02, result2
11d3c     FF 12 02 F6 | 	mov	arg01, result3
11d40     30 4E 05 F1 | 	add	fp, #48
11d44     A7 16 62 FC | 	wrlong	arg03, fp
11d48     04 4E 05 F1 | 	add	fp, #4
11d4c     A7 14 62 FC | 	wrlong	arg02, fp
11d50     04 4E 05 F1 | 	add	fp, #4
11d54     A7 12 62 FC | 	wrlong	arg01, fp
11d58     38 4E 85 F1 | 	sub	fp, #56
11d5c     90 7B BF FD | 	call	#_pop
11d60     FD 16 02 F6 | 	mov	arg03, result1
11d64     FE 14 02 F6 | 	mov	arg02, result2
11d68     FF 12 02 F6 | 	mov	arg01, result3
11d6c     24 4E 05 F1 | 	add	fp, #36
11d70     A7 16 62 FC | 	wrlong	arg03, fp
11d74     04 4E 05 F1 | 	add	fp, #4
11d78     A7 14 62 FC | 	wrlong	arg02, fp
11d7c     04 4E 05 F1 | 	add	fp, #4
11d80     A7 12 62 FC | 	wrlong	arg01, fp
11d84     2C 4E 85 F1 | 	sub	fp, #44
11d88     64 7B BF FD | 	call	#_pop
11d8c     FD 16 02 F6 | 	mov	arg03, result1
11d90     FE 14 02 F6 | 	mov	arg02, result2
11d94     FF 12 02 F6 | 	mov	arg01, result3
11d98     18 4E 05 F1 | 	add	fp, #24
11d9c     A7 16 62 FC | 	wrlong	arg03, fp
11da0     04 4E 05 F1 | 	add	fp, #4
11da4     A7 14 62 FC | 	wrlong	arg02, fp
11da8     04 4E 05 F1 | 	add	fp, #4
11dac     A7 12 62 FC | 	wrlong	arg01, fp
11db0     20 4E 85 F1 | 	sub	fp, #32
11db4     38 7B BF FD | 	call	#_pop
11db8     FD 16 02 F6 | 	mov	arg03, result1
11dbc     FE 14 02 F6 | 	mov	arg02, result2
11dc0     FF 12 02 F6 | 	mov	arg01, result3
11dc4     0C 4E 05 F1 | 	add	fp, #12
11dc8     A7 16 62 FC | 	wrlong	arg03, fp
11dcc     04 4E 05 F1 | 	add	fp, #4
11dd0     A7 14 62 FC | 	wrlong	arg02, fp
11dd4     04 4E 05 F1 | 	add	fp, #4
11dd8     A7 12 62 FC | 	wrlong	arg01, fp
11ddc     14 4E 85 F1 | 	sub	fp, #20
11de0     0C 7B BF FD | 	call	#_pop
11de4     FF 16 02 F6 | 	mov	arg03, result3
11de8     A7 FA 61 FC | 	wrlong	result1, fp
11dec     04 4E 05 F1 | 	add	fp, #4
11df0     A7 FC 61 FC | 	wrlong	result2, fp
11df4     04 4E 05 F1 | 	add	fp, #4
11df8     A7 16 62 FC | 	wrlong	arg03, fp
11dfc     08 4E 85 F1 | 	sub	fp, #8
11e00     A7 12 02 F6 | 	mov	arg01, fp
11e04     58 F0 BF FD | 	call	#_converttoint
11e08     3C 4E 05 F1 | 	add	fp, #60
11e0c     A7 FA 61 FC | 	wrlong	result1, fp
11e10     30 4E 85 F1 | 	sub	fp, #48
11e14     A7 12 02 F6 | 	mov	arg01, fp
11e18     0C 4E 85 F1 | 	sub	fp, #12
11e1c     40 F0 BF FD | 	call	#_converttoint
11e20     40 4E 05 F1 | 	add	fp, #64
11e24     A7 FA 61 FC | 	wrlong	result1, fp
11e28     28 4E 85 F1 | 	sub	fp, #40
11e2c     A7 12 02 F6 | 	mov	arg01, fp
11e30     18 4E 85 F1 | 	sub	fp, #24
11e34     28 F0 BF FD | 	call	#_converttoint
11e38     44 4E 05 F1 | 	add	fp, #68
11e3c     A7 FA 61 FC | 	wrlong	result1, fp
11e40     20 4E 85 F1 | 	sub	fp, #32
11e44     A7 12 02 F6 | 	mov	arg01, fp
11e48     24 4E 85 F1 | 	sub	fp, #36
11e4c     10 F0 BF FD | 	call	#_converttoint
11e50     48 4E 05 F1 | 	add	fp, #72
11e54     A7 FA 61 FC | 	wrlong	result1, fp
11e58     18 4E 85 F1 | 	sub	fp, #24
11e5c     A7 12 02 F6 | 	mov	arg01, fp
11e60     30 4E 85 F1 | 	sub	fp, #48
11e64     F8 EF BF FD | 	call	#_converttoint
11e68     4C 4E 05 F1 | 	add	fp, #76
11e6c     A7 FA 61 FC | 	wrlong	result1, fp
11e70                 | ' 
11e70                 | ' t5=pop()
11e70                 | ' t4=pop()
11e70                 | ' t3=pop()
11e70                 | ' t2=pop()
11e70                 | ' t1=pop()
11e70                 | ' 
11e70                 | ' ' do convert, defsprite is not a racing command
11e70                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
11e70                 | '  
11e70                 | ' ' todo: check parameters for linits
11e70                 | ' if sprite(a1)<> nil then delete(sprite(a1))
11e70     10 4E 85 F1 | 	sub	fp, #16
11e74     A7 16 02 FB | 	rdlong	arg03, fp
11e78     3C 4E 85 F1 | 	sub	fp, #60
11e7c     02 16 66 F0 | 	shl	arg03, #2
11e80     7A 00 00 FF 
11e84     08 E5 05 F1 | 	add	objptr, ##62728
11e88     F2 16 02 F1 | 	add	arg03, objptr
11e8c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11e90     7A 00 00 FF 
11e94     08 E5 85 F1 | 	sub	objptr, ##62728
11e98     2C 00 90 AD |  if_e	jmp	#LR__1430
11e9c     3C 4E 05 F1 | 	add	fp, #60
11ea0     A7 16 02 FB | 	rdlong	arg03, fp
11ea4     3C 4E 85 F1 | 	sub	fp, #60
11ea8     02 16 66 F0 | 	shl	arg03, #2
11eac     7A 00 00 FF 
11eb0     08 E5 05 F1 | 	add	objptr, ##62728
11eb4     F2 16 02 F1 | 	add	arg03, objptr
11eb8     0B 13 02 FB | 	rdlong	arg01, arg03
11ebc     7A 00 00 FF 
11ec0     08 E5 85 F1 | 	sub	objptr, ##62728
11ec4     10 AE B0 FD | 	call	#__system___gc_free
11ec8                 | LR__1430
11ec8     3C 4E 05 F1 | 	add	fp, #60
11ecc     A7 1E 02 FB | 	rdlong	local01, fp
11ed0     0C 4E 05 F1 | 	add	fp, #12
11ed4     A7 16 02 FB | 	rdlong	arg03, fp
11ed8     04 4E 05 F1 | 	add	fp, #4
11edc     A7 14 02 FB | 	rdlong	arg02, fp
11ee0     0A 17 02 FD | 	qmul	arg03, arg02
11ee4     02 1E 66 F0 | 	shl	local01, #2
11ee8     7A 00 00 FF 
11eec     08 E5 05 F1 | 	add	objptr, ##62728
11ef0     F2 1E 02 F1 | 	add	local01, objptr
11ef4     4C 4E 85 F1 | 	sub	fp, #76
11ef8     7A 00 00 FF 
11efc     08 E5 85 F1 | 	sub	objptr, ##62728
11f00     18 12 62 FD | 	getqx	arg01
11f04     94 AC B0 FD | 	call	#__system___gc_alloc_managed
11f08     0F FB 61 FC | 	wrlong	result1, local01
11f0c                 | ' for y=a3 to a3+a5-1
11f0c     44 4E 05 F1 | 	add	fp, #68
11f10     A7 20 02 FB | 	rdlong	local02, fp
11f14     0C 4E 05 F1 | 	add	fp, #12
11f18     A7 20 62 FC | 	wrlong	local02, fp
11f1c     0C 4E 85 F1 | 	sub	fp, #12
11f20     A7 22 02 FB | 	rdlong	local03, fp
11f24     08 4E 05 F1 | 	add	fp, #8
11f28     A7 24 02 FB | 	rdlong	local04, fp
11f2c     4C 4E 85 F1 | 	sub	fp, #76
11f30     12 23 02 F1 | 	add	local03, local04
11f34                 | LR__1431
11f34     50 4E 05 F1 | 	add	fp, #80
11f38     A7 20 02 FB | 	rdlong	local02, fp
11f3c     50 4E 85 F1 | 	sub	fp, #80
11f40     11 21 52 F2 | 	cmps	local02, local03 wc
11f44     10 01 90 3D |  if_ae	jmp	#LR__1434
11f48                 | '   for x=a2 to a4+a2-1
11f48     40 4E 05 F1 | 	add	fp, #64
11f4c     A7 1E 02 FB | 	rdlong	local01, fp
11f50     7A 00 00 FF 
11f54     7C E5 05 F1 | 	add	objptr, ##62844
11f58     F2 1E 62 FC | 	wrlong	local01, objptr
11f5c     7A 00 00 FF 
11f60     7C E5 85 F1 | 	sub	objptr, ##62844
11f64     08 4E 05 F1 | 	add	fp, #8
11f68     A7 26 02 FB | 	rdlong	local05, fp
11f6c     08 4E 85 F1 | 	sub	fp, #8
11f70     A7 28 02 FB | 	rdlong	local06, fp
11f74     40 4E 85 F1 | 	sub	fp, #64
11f78     14 27 02 F1 | 	add	local05, local06
11f7c                 | LR__1432
11f7c     7A 00 00 FF 
11f80     7C E5 05 F1 | 	add	objptr, ##62844
11f84     F2 1E 02 FB | 	rdlong	local01, objptr
11f88     7A 00 00 FF 
11f8c     7C E5 85 F1 | 	sub	objptr, ##62844
11f90     13 1F 52 F2 | 	cmps	local01, local05 wc
11f94     A8 00 90 3D |  if_ae	jmp	#LR__1433
11f98     3C 4E 05 F1 | 	add	fp, #60
11f9c     A7 28 02 FB | 	rdlong	local06, fp
11fa0     04 4E 05 F1 | 	add	fp, #4
11fa4     A7 24 02 FB | 	rdlong	local04, fp
11fa8     10 4E 05 F1 | 	add	fp, #16
11fac     A7 20 02 FB | 	rdlong	local02, fp
11fb0     10 1F 02 F6 | 	mov	local01, local02
11fb4     0C 4E 85 F1 | 	sub	fp, #12
11fb8     A7 16 02 FB | 	rdlong	arg03, fp
11fbc     0B 1F 82 F1 | 	sub	local01, arg03
11fc0     04 4E 05 F1 | 	add	fp, #4
11fc4     A7 16 02 FB | 	rdlong	arg03, fp
11fc8     0B 1F 02 FD | 	qmul	local01, arg03
11fcc     02 28 66 F0 | 	shl	local06, #2
11fd0     7A 00 00 FF 
11fd4     08 E5 05 F1 | 	add	objptr, ##62728
11fd8     F2 28 02 F1 | 	add	local06, objptr
11fdc     14 29 02 FB | 	rdlong	local06, local06
11fe0     74 E4 05 F1 | 	add	objptr, #116
11fe4     F2 1E 02 FB | 	rdlong	local01, objptr
11fe8     7A 00 00 FF 
11fec     7C E5 85 F1 | 	sub	objptr, ##62844
11ff0     0F 2B 02 F6 | 	mov	local07, local01
11ff4     12 2B 82 F1 | 	sub	local07, local04
11ff8     F2 12 02 FB | 	rdlong	arg01, objptr
11ffc     0F 13 02 F1 | 	add	arg01, local01
12000     48 4E 85 F1 | 	sub	fp, #72
12004     0A 20 66 F0 | 	shl	local02, #10
12008     10 13 02 F1 | 	add	arg01, local02
1200c     18 24 62 FD | 	getqx	local04
12010     12 2B 02 F1 | 	add	local07, local04
12014     14 2B 02 F1 | 	add	local07, local06
12018     A8 39 B0 FD | 	call	#_pspeek
1201c     15 FB 41 FC | 	wrbyte	result1, local07
12020     7A 00 00 FF 
12024     7C E5 05 F1 | 	add	objptr, ##62844
12028     F2 2A 02 FB | 	rdlong	local07, objptr
1202c     01 2A 06 F1 | 	add	local07, #1
12030     F2 2A 62 FC | 	wrlong	local07, objptr
12034     7A 00 00 FF 
12038     7C E5 85 F1 | 	sub	objptr, ##62844
1203c     3C FF 9F FD | 	jmp	#LR__1432
12040                 | LR__1433
12040     50 4E 05 F1 | 	add	fp, #80
12044     A7 2A 02 FB | 	rdlong	local07, fp
12048     01 2A 06 F1 | 	add	local07, #1
1204c     A7 2A 62 FC | 	wrlong	local07, fp
12050     50 4E 85 F1 | 	sub	fp, #80
12054     DC FE 9F FD | 	jmp	#LR__1431
12058                 | LR__1434
12058     3C 4E 05 F1 | 	add	fp, #60
1205c     A7 2A 02 FB | 	rdlong	local07, fp
12060     15 13 02 F6 | 	mov	arg01, local07
12064     3C 4E 85 F1 | 	sub	fp, #60
12068     02 2A 66 F0 | 	shl	local07, #2
1206c     7A 00 00 FF 
12070     08 E5 05 F1 | 	add	objptr, ##62728
12074     F2 2A 02 F1 | 	add	local07, objptr
12078     15 15 02 FB | 	rdlong	arg02, local07
1207c     7A 00 00 FF 
12080     08 E5 85 F1 | 	sub	objptr, ##62728
12084     EC 4C B0 FD | 	call	#_hg010b_spin2_setspriteptr
12088     3C 4E 05 F1 | 	add	fp, #60
1208c     A7 12 02 FB | 	rdlong	arg01, fp
12090     0C 4E 05 F1 | 	add	fp, #12
12094     A7 14 02 FB | 	rdlong	arg02, fp
12098     04 4E 05 F1 | 	add	fp, #4
1209c     A7 16 02 FB | 	rdlong	arg03, fp
120a0     4C 4E 85 F1 | 	sub	fp, #76
120a4     40 4D B0 FD | 	call	#_hg010b_spin2_setspritesize
120a8     A7 F0 03 F6 | 	mov	ptra, fp
120ac     B2 00 A0 FD | 	call	#popregs_
120b0                 | _do_defsprite_ret
120b0     2D 00 64 FD | 	ret
120b4                 | 
120b4                 | ' 
120b4                 | ' sub do_sprite
120b4                 | _do_sprite
120b4     00 4A 05 F6 | 	mov	COUNT_, #0
120b8     A8 00 A0 FD | 	call	#pushregs_
120bc     30 F0 07 F1 | 	add	ptra, #48
120c0     2C 78 BF FD | 	call	#_pop
120c4     FD 16 02 F6 | 	mov	arg03, result1
120c8     FE 14 02 F6 | 	mov	arg02, result2
120cc     FF 12 02 F6 | 	mov	arg01, result3
120d0     18 4E 05 F1 | 	add	fp, #24
120d4     A7 16 62 FC | 	wrlong	arg03, fp
120d8     04 4E 05 F1 | 	add	fp, #4
120dc     A7 14 62 FC | 	wrlong	arg02, fp
120e0     04 4E 05 F1 | 	add	fp, #4
120e4     A7 12 62 FC | 	wrlong	arg01, fp
120e8     20 4E 85 F1 | 	sub	fp, #32
120ec     00 78 BF FD | 	call	#_pop
120f0     FD 16 02 F6 | 	mov	arg03, result1
120f4     FE 14 02 F6 | 	mov	arg02, result2
120f8     FF 12 02 F6 | 	mov	arg01, result3
120fc     0C 4E 05 F1 | 	add	fp, #12
12100     A7 16 62 FC | 	wrlong	arg03, fp
12104     04 4E 05 F1 | 	add	fp, #4
12108     A7 14 62 FC | 	wrlong	arg02, fp
1210c     04 4E 05 F1 | 	add	fp, #4
12110     A7 12 62 FC | 	wrlong	arg01, fp
12114     14 4E 85 F1 | 	sub	fp, #20
12118     D4 77 BF FD | 	call	#_pop
1211c     FF 16 02 F6 | 	mov	arg03, result3
12120     A7 FA 61 FC | 	wrlong	result1, fp
12124     04 4E 05 F1 | 	add	fp, #4
12128     A7 FC 61 FC | 	wrlong	result2, fp
1212c     04 4E 05 F1 | 	add	fp, #4
12130     A7 16 62 FC | 	wrlong	arg03, fp
12134     08 4E 85 F1 | 	sub	fp, #8
12138     A7 12 02 F6 | 	mov	arg01, fp
1213c     20 ED BF FD | 	call	#_converttoint
12140     24 4E 05 F1 | 	add	fp, #36
12144     A7 FA 61 FC | 	wrlong	result1, fp
12148     18 4E 85 F1 | 	sub	fp, #24
1214c     A7 12 02 F6 | 	mov	arg01, fp
12150     0C 4E 85 F1 | 	sub	fp, #12
12154     08 ED BF FD | 	call	#_converttoint
12158     28 4E 05 F1 | 	add	fp, #40
1215c     A7 FA 61 FC | 	wrlong	result1, fp
12160     10 4E 85 F1 | 	sub	fp, #16
12164     A7 12 02 F6 | 	mov	arg01, fp
12168     18 4E 85 F1 | 	sub	fp, #24
1216c     F0 EC BF FD | 	call	#_converttoint
12170     2C 4E 05 F1 | 	add	fp, #44
12174     A7 FA 61 FC | 	wrlong	result1, fp
12178     08 4E 85 F1 | 	sub	fp, #8
1217c     A7 12 02 FB | 	rdlong	arg01, fp
12180     04 4E 05 F1 | 	add	fp, #4
12184     A7 14 02 FB | 	rdlong	arg02, fp
12188     FD 16 02 F6 | 	mov	arg03, result1
1218c     28 4E 85 F1 | 	sub	fp, #40
12190     08 4C B0 FD | 	call	#_hg010b_spin2_setspritepos
12194     A7 F0 03 F6 | 	mov	ptra, fp
12198     B2 00 A0 FD | 	call	#popregs_
1219c                 | _do_sprite_ret
1219c     2D 00 64 FD | 	ret
121a0                 | 
121a0                 | ' 
121a0                 | ' sub do_mousex
121a0                 | _do_mousex
121a0     00 4A 05 F6 | 	mov	COUNT_, #0
121a4     A8 00 A0 FD | 	call	#pushregs_
121a8     0C F0 07 F1 | 	add	ptra, #12
121ac     08 4E 05 F1 | 	add	fp, #8
121b0     A7 3A 68 FC | 	wrlong	#29, fp
121b4     08 4E 85 F1 | 	sub	fp, #8
121b8     7A 00 00 FF 
121bc     C0 E4 05 F1 | 	add	objptr, ##62656
121c0     F2 12 02 FB | 	rdlong	arg01, objptr
121c4     7A 00 00 FF 
121c8     C0 E4 85 F1 | 	sub	objptr, ##62656
121cc     A7 12 62 FC | 	wrlong	arg01, fp
121d0     A7 12 02 F6 | 	mov	arg01, fp
121d4     B0 77 BF FD | 	call	#_push
121d8     A7 F0 03 F6 | 	mov	ptra, fp
121dc     B2 00 A0 FD | 	call	#popregs_
121e0                 | _do_mousex_ret
121e0     2D 00 64 FD | 	ret
121e4                 | 
121e4                 | ' 
121e4                 | ' sub do_mousey
121e4                 | _do_mousey
121e4     00 4A 05 F6 | 	mov	COUNT_, #0
121e8     A8 00 A0 FD | 	call	#pushregs_
121ec     0C F0 07 F1 | 	add	ptra, #12
121f0     08 4E 05 F1 | 	add	fp, #8
121f4     A7 3A 68 FC | 	wrlong	#29, fp
121f8     08 4E 85 F1 | 	sub	fp, #8
121fc     7A 00 00 FF 
12200     C4 E4 05 F1 | 	add	objptr, ##62660
12204     F2 12 02 FB | 	rdlong	arg01, objptr
12208     7A 00 00 FF 
1220c     C4 E4 85 F1 | 	sub	objptr, ##62660
12210     A7 12 62 FC | 	wrlong	arg01, fp
12214     A7 12 02 F6 | 	mov	arg01, fp
12218     6C 77 BF FD | 	call	#_push
1221c     A7 F0 03 F6 | 	mov	ptra, fp
12220     B2 00 A0 FD | 	call	#popregs_
12224                 | _do_mousey_ret
12224     2D 00 64 FD | 	ret
12228                 | 
12228                 | ' 
12228                 | ' sub do_mousew
12228                 | _do_mousew
12228     00 4A 05 F6 | 	mov	COUNT_, #0
1222c     A8 00 A0 FD | 	call	#pushregs_
12230     0C F0 07 F1 | 	add	ptra, #12
12234     08 4E 05 F1 | 	add	fp, #8
12238     A7 38 68 FC | 	wrlong	#28, fp
1223c     08 4E 85 F1 | 	sub	fp, #8
12240     7A 00 00 FF 
12244     CC E4 05 F1 | 	add	objptr, ##62668
12248     F2 12 02 FB | 	rdlong	arg01, objptr
1224c     7A 00 00 FF 
12250     CC E4 85 F1 | 	sub	objptr, ##62668
12254     A7 12 62 FC | 	wrlong	arg01, fp
12258     A7 12 02 F6 | 	mov	arg01, fp
1225c     28 77 BF FD | 	call	#_push
12260     A7 F0 03 F6 | 	mov	ptra, fp
12264     B2 00 A0 FD | 	call	#popregs_
12268                 | _do_mousew_ret
12268     2D 00 64 FD | 	ret
1226c                 | 
1226c                 | ' 
1226c                 | ' sub do_mousek
1226c                 | _do_mousek
1226c     00 4A 05 F6 | 	mov	COUNT_, #0
12270     A8 00 A0 FD | 	call	#pushregs_
12274     0C F0 07 F1 | 	add	ptra, #12
12278     08 4E 05 F1 | 	add	fp, #8
1227c     A7 3A 68 FC | 	wrlong	#29, fp
12280     08 4E 85 F1 | 	sub	fp, #8
12284     7A 00 00 FF 
12288     C8 E4 05 F1 | 	add	objptr, ##62664
1228c     F2 12 02 FB | 	rdlong	arg01, objptr
12290     7A 00 00 FF 
12294     C8 E4 85 F1 | 	sub	objptr, ##62664
12298     A7 12 62 FC | 	wrlong	arg01, fp
1229c     A7 12 02 F6 | 	mov	arg01, fp
122a0     E4 76 BF FD | 	call	#_push
122a4     A7 F0 03 F6 | 	mov	ptra, fp
122a8     B2 00 A0 FD | 	call	#popregs_
122ac                 | _do_mousek_ret
122ac     2D 00 64 FD | 	ret
122b0                 | 
122b0                 | ' 
122b0                 | ' 
122b0                 | ' sub do_rdpin
122b0                 | _do_rdpin
122b0     00 4A 05 F6 | 	mov	COUNT_, #0
122b4     A8 00 A0 FD | 	call	#pushregs_
122b8     0C F0 07 F1 | 	add	ptra, #12
122bc     30 76 BF FD | 	call	#_pop
122c0     A7 FA 61 FC | 	wrlong	result1, fp
122c4     04 4E 05 F1 | 	add	fp, #4
122c8     A7 FC 61 FC | 	wrlong	result2, fp
122cc     04 4E 05 F1 | 	add	fp, #4
122d0     A7 FE 61 FC | 	wrlong	result3, fp
122d4     08 4E 85 F1 | 	sub	fp, #8
122d8     A7 12 02 F6 | 	mov	arg01, fp
122dc     80 EB BF FD | 	call	#_converttoint
122e0     FD FA 89 FA | 	rdpin	result1, result1
122e4     7A 00 00 FF 
122e8     D4 E5 05 F1 | 	add	objptr, ##62932
122ec     F2 FA 61 FC | 	wrlong	result1, objptr
122f0     7A 00 00 FF 
122f4     D4 E5 85 F1 | 	sub	objptr, ##62932
122f8     08 4E 05 F1 | 	add	fp, #8
122fc     A7 3A 68 FC | 	wrlong	#29, fp
12300     08 4E 85 F1 | 	sub	fp, #8
12304     A7 08 68 FC | 	wrlong	#4, fp
12308     A7 12 02 F6 | 	mov	arg01, fp
1230c     78 76 BF FD | 	call	#_push
12310     A7 F0 03 F6 | 	mov	ptra, fp
12314     B2 00 A0 FD | 	call	#popregs_
12318                 | _do_rdpin_ret
12318     2D 00 64 FD | 	ret
1231c                 | 
1231c                 | ' 
1231c                 | ' sub do_rqpin
1231c                 | _do_rqpin
1231c     00 4A 05 F6 | 	mov	COUNT_, #0
12320     A8 00 A0 FD | 	call	#pushregs_
12324     0C F0 07 F1 | 	add	ptra, #12
12328     C4 75 BF FD | 	call	#_pop
1232c     A7 FA 61 FC | 	wrlong	result1, fp
12330     04 4E 05 F1 | 	add	fp, #4
12334     A7 FC 61 FC | 	wrlong	result2, fp
12338     04 4E 05 F1 | 	add	fp, #4
1233c     A7 FE 61 FC | 	wrlong	result3, fp
12340     08 4E 85 F1 | 	sub	fp, #8
12344     A7 12 02 F6 | 	mov	arg01, fp
12348     14 EB BF FD | 	call	#_converttoint
1234c     FD 12 02 F6 | 	mov	arg01, result1
12350     00 FA 05 F6 | 	mov	result1, #0
12354     09 FB 81 FA | 	rqpin	result1, arg01
12358     7A 00 00 FF 
1235c     D4 E5 05 F1 | 	add	objptr, ##62932
12360     F2 FA 61 FC | 	wrlong	result1, objptr
12364     7A 00 00 FF 
12368     D4 E5 85 F1 | 	sub	objptr, ##62932
1236c     08 4E 05 F1 | 	add	fp, #8
12370     A7 3A 68 FC | 	wrlong	#29, fp
12374     08 4E 85 F1 | 	sub	fp, #8
12378     A7 08 68 FC | 	wrlong	#4, fp
1237c     A7 12 02 F6 | 	mov	arg01, fp
12380     04 76 BF FD | 	call	#_push
12384     A7 F0 03 F6 | 	mov	ptra, fp
12388     B2 00 A0 FD | 	call	#popregs_
1238c                 | _do_rqpin_ret
1238c     2D 00 64 FD | 	ret
12390                 | 
12390                 | ' 
12390                 | ' sub do_pinread
12390                 | _do_pinread
12390     00 4A 05 F6 | 	mov	COUNT_, #0
12394     A8 00 A0 FD | 	call	#pushregs_
12398     0C F0 07 F1 | 	add	ptra, #12
1239c     50 75 BF FD | 	call	#_pop
123a0     A7 FA 61 FC | 	wrlong	result1, fp
123a4     04 4E 05 F1 | 	add	fp, #4
123a8     A7 FC 61 FC | 	wrlong	result2, fp
123ac     04 4E 05 F1 | 	add	fp, #4
123b0     A7 FE 61 FC | 	wrlong	result3, fp
123b4     08 4E 85 F1 | 	sub	fp, #8
123b8     A7 12 02 F6 | 	mov	arg01, fp
123bc     A0 EA BF FD | 	call	#_converttoint
123c0     FD 12 02 F6 | 	mov	arg01, result1
123c4     20 12 CE F7 | 	test	arg01, #32 wz
123c8     FF FB 01 56 |  if_ne	mov	result1, inb
123cc     FE FB 01 A6 |  if_e	mov	result1, ina
123d0     09 FB 41 F0 | 	shr	result1, arg01
123d4     06 12 46 F0 | 	shr	arg01, #6
123d8     09 FB 41 F7 | 	zerox	result1, arg01
123dc     7A 00 00 FF 
123e0     D4 E5 05 F1 | 	add	objptr, ##62932
123e4     F2 FA 61 FC | 	wrlong	result1, objptr
123e8     7A 00 00 FF 
123ec     D4 E5 85 F1 | 	sub	objptr, ##62932
123f0     08 4E 05 F1 | 	add	fp, #8
123f4     A7 3A 68 FC | 	wrlong	#29, fp
123f8     08 4E 85 F1 | 	sub	fp, #8
123fc     A7 08 68 FC | 	wrlong	#4, fp
12400     A7 12 02 F6 | 	mov	arg01, fp
12404     80 75 BF FD | 	call	#_push
12408     A7 F0 03 F6 | 	mov	ptra, fp
1240c     B2 00 A0 FD | 	call	#popregs_
12410                 | _do_pinread_ret
12410     2D 00 64 FD | 	ret
12414                 | 
12414                 | ' 
12414                 | ' sub do_gettime
12414                 | _do_gettime
12414     02 4A 05 F6 | 	mov	COUNT_, #2
12418     A8 00 A0 FD | 	call	#pushregs_
1241c     14 F0 07 F1 | 	add	ptra, #20
12420                 | ' 
12420                 | ' const asm 
12420     1A 1E 72 FD | 	getct	local01 wc
12424     1A 20 62 FD | 	getct	local02
12428                 | ' 
12428                 | ' return hi1, lo1
12428     10 FD 01 F6 | 	mov	result2, local02
1242c     A7 1E 62 FC | 	wrlong	local01, fp
12430     04 4E 05 F1 | 	add	fp, #4
12434     A7 FC 61 FC | 	wrlong	result2, fp
12438     0C 4E 05 F1 | 	add	fp, #12
1243c     A7 3A 68 FC | 	wrlong	#29, fp
12440     0C 4E 85 F1 | 	sub	fp, #12
12444     A7 12 02 FB | 	rdlong	arg01, fp
12448     04 4E 05 F1 | 	add	fp, #4
1244c     A7 12 62 FC | 	wrlong	arg01, fp
12450     08 4E 85 F1 | 	sub	fp, #8
12454     A7 12 02 FB | 	rdlong	arg01, fp
12458     0C 4E 05 F1 | 	add	fp, #12
1245c     A7 12 62 FC | 	wrlong	arg01, fp
12460     04 4E 85 F1 | 	sub	fp, #4
12464     A7 12 02 F6 | 	mov	arg01, fp
12468     08 4E 85 F1 | 	sub	fp, #8
1246c     18 75 BF FD | 	call	#_push
12470     A7 F0 03 F6 | 	mov	ptra, fp
12474     B2 00 A0 FD | 	call	#popregs_
12478                 | _do_gettime_ret
12478     2D 00 64 FD | 	ret
1247c                 | 
1247c                 | '    
1247c                 | ' 
1247c                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
1247c                 | ' 
1247c                 | ' '' ----------------------------- Clear the screen
1247c                 | ' 
1247c                 | ' sub do_cls
1247c                 | _do_cls
1247c     56 00 00 FF 
12480     10 E5 05 F1 | 	add	objptr, ##44304
12484     F2 12 02 FB | 	rdlong	arg01, objptr
12488     04 E4 85 F1 | 	sub	objptr, #4
1248c     F2 14 02 FB | 	rdlong	arg02, objptr
12490     56 00 00 FF 
12494     0C E5 85 F1 | 	sub	objptr, ##44300
12498     04 56 B0 FD | 	call	#_hg010b_spin2_cls
1249c     56 00 00 FF 
124a0     10 E5 05 F1 | 	add	objptr, ##44304
124a4     F2 14 02 FB | 	rdlong	arg02, objptr
124a8     14 E4 85 F1 | 	sub	objptr, #20
124ac     F2 14 62 FC | 	wrlong	arg02, objptr
124b0     56 00 00 FF 
124b4     FC E4 85 F1 | 	sub	objptr, ##44284
124b8                 | ' cls(ink,paper): plot_color=ink: print
124b8     00 12 06 F6 | 	mov	arg01, #0
124bc     28 C2 B0 FD | 	call	#__system___getiolock_0423
124c0     FD 12 02 F6 | 	mov	arg01, result1
124c4     1C 69 B0 FD | 	call	#__system___lockmem
124c8     00 12 06 F6 | 	mov	arg01, #0
124cc     0A 14 06 F6 | 	mov	arg02, #10
124d0     00 16 06 F6 | 	mov	arg03, #0
124d4     A8 75 B0 FD | 	call	#__system___basic_print_char
124d8     00 12 06 F6 | 	mov	arg01, #0
124dc     08 C2 B0 FD | 	call	#__system___getiolock_0423
124e0     FD 00 68 FC | 	wrlong	#0, result1
124e4                 | _do_cls_ret
124e4     2D 00 64 FD | 	ret
124e8                 | 
124e8                 | ' 
124e8                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
124e8                 | ' 
124e8                 | ' sub do_color
124e8                 | _do_color
124e8     03 4A 05 F6 | 	mov	COUNT_, #3
124ec     A8 00 A0 FD | 	call	#pushregs_
124f0     FC 73 BF FD | 	call	#_pop
124f4     FD 1E 02 F6 | 	mov	local01, result1
124f8     FE 20 02 F6 | 	mov	local02, result2
124fc     FF 22 02 F6 | 	mov	local03, result3
12500     56 00 00 FF 
12504     FC E4 05 F1 | 	add	objptr, ##44284
12508     F2 1E 62 FC | 	wrlong	local01, objptr
1250c     56 00 00 FF 
12510     FC E4 85 F1 | 	sub	objptr, ##44284
12514     A7 F0 03 F6 | 	mov	ptra, fp
12518     B2 00 A0 FD | 	call	#popregs_
1251c                 | _do_color_ret
1251c     2D 00 64 FD | 	ret
12520                 | 
12520                 | ' 
12520                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
12520                 | ' 
12520                 | ' sub do_plot
12520                 | _do_plot
12520     00 4A 05 F6 | 	mov	COUNT_, #0
12524     A8 00 A0 FD | 	call	#pushregs_
12528     20 F0 07 F1 | 	add	ptra, #32
1252c     C0 73 BF FD | 	call	#_pop
12530     FD 16 02 F6 | 	mov	arg03, result1
12534     FE 14 02 F6 | 	mov	arg02, result2
12538     FF 12 02 F6 | 	mov	arg01, result3
1253c     0C 4E 05 F1 | 	add	fp, #12
12540     A7 16 62 FC | 	wrlong	arg03, fp
12544     04 4E 05 F1 | 	add	fp, #4
12548     A7 14 62 FC | 	wrlong	arg02, fp
1254c     04 4E 05 F1 | 	add	fp, #4
12550     A7 12 62 FC | 	wrlong	arg01, fp
12554     14 4E 85 F1 | 	sub	fp, #20
12558     94 73 BF FD | 	call	#_pop
1255c     FF 16 02 F6 | 	mov	arg03, result3
12560     A7 FA 61 FC | 	wrlong	result1, fp
12564     04 4E 05 F1 | 	add	fp, #4
12568     A7 FC 61 FC | 	wrlong	result2, fp
1256c     04 4E 05 F1 | 	add	fp, #4
12570     A7 16 62 FC | 	wrlong	arg03, fp
12574     08 4E 85 F1 | 	sub	fp, #8
12578     A7 12 02 F6 | 	mov	arg01, fp
1257c     E0 E8 BF FD | 	call	#_converttoint
12580     18 4E 05 F1 | 	add	fp, #24
12584     A7 FA 61 FC | 	wrlong	result1, fp
12588     0C 4E 85 F1 | 	sub	fp, #12
1258c     A7 12 02 F6 | 	mov	arg01, fp
12590     0C 4E 85 F1 | 	sub	fp, #12
12594     C8 E8 BF FD | 	call	#_converttoint
12598     1C 4E 05 F1 | 	add	fp, #28
1259c     A7 FA 61 FC | 	wrlong	result1, fp
125a0     04 4E 85 F1 | 	sub	fp, #4
125a4     A7 16 02 FB | 	rdlong	arg03, fp
125a8     56 00 00 FF 
125ac     00 E5 05 F1 | 	add	objptr, ##44288
125b0     F2 16 62 FC | 	wrlong	arg03, objptr
125b4     04 4E 05 F1 | 	add	fp, #4
125b8     A7 14 02 FB | 	rdlong	arg02, fp
125bc     1C 4E 85 F1 | 	sub	fp, #28
125c0     04 E4 05 F1 | 	add	objptr, #4
125c4     F2 14 62 FC | 	wrlong	arg02, objptr
125c8     04 E4 85 F1 | 	sub	objptr, #4
125cc     F2 12 02 FB | 	rdlong	arg01, objptr
125d0     04 E4 85 F1 | 	sub	objptr, #4
125d4     F2 16 02 FB | 	rdlong	arg03, objptr
125d8     56 00 00 FF 
125dc     FC E4 85 F1 | 	sub	objptr, ##44284
125e0     50 48 B0 FD | 	call	#_hg010b_spin2_putpixel
125e4     A7 F0 03 F6 | 	mov	ptra, fp
125e8     B2 00 A0 FD | 	call	#popregs_
125ec                 | _do_plot_ret
125ec     2D 00 64 FD | 	ret
125f0                 | 
125f0                 | ' 
125f0                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
125f0                 | ' 
125f0                 | ' sub do_draw
125f0                 | _do_draw
125f0     00 4A 05 F6 | 	mov	COUNT_, #0
125f4     A8 00 A0 FD | 	call	#pushregs_
125f8     20 F0 07 F1 | 	add	ptra, #32
125fc     F0 72 BF FD | 	call	#_pop
12600     FD 1A 02 F6 | 	mov	arg05, result1
12604     FE 18 02 F6 | 	mov	arg04, result2
12608     FF 16 02 F6 | 	mov	arg03, result3
1260c     0C 4E 05 F1 | 	add	fp, #12
12610     A7 1A 62 FC | 	wrlong	arg05, fp
12614     04 4E 05 F1 | 	add	fp, #4
12618     A7 18 62 FC | 	wrlong	arg04, fp
1261c     04 4E 05 F1 | 	add	fp, #4
12620     A7 16 62 FC | 	wrlong	arg03, fp
12624     14 4E 85 F1 | 	sub	fp, #20
12628     C4 72 BF FD | 	call	#_pop
1262c     FF 1A 02 F6 | 	mov	arg05, result3
12630     A7 FA 61 FC | 	wrlong	result1, fp
12634     04 4E 05 F1 | 	add	fp, #4
12638     A7 FC 61 FC | 	wrlong	result2, fp
1263c     04 4E 05 F1 | 	add	fp, #4
12640     A7 1A 62 FC | 	wrlong	arg05, fp
12644     08 4E 85 F1 | 	sub	fp, #8
12648     A7 12 02 F6 | 	mov	arg01, fp
1264c     10 E8 BF FD | 	call	#_converttoint
12650     18 4E 05 F1 | 	add	fp, #24
12654     A7 FA 61 FC | 	wrlong	result1, fp
12658     0C 4E 85 F1 | 	sub	fp, #12
1265c     A7 12 02 F6 | 	mov	arg01, fp
12660     0C 4E 85 F1 | 	sub	fp, #12
12664     F8 E7 BF FD | 	call	#_converttoint
12668     1C 4E 05 F1 | 	add	fp, #28
1266c     A7 FA 61 FC | 	wrlong	result1, fp
12670     56 00 00 FF 
12674     00 E5 05 F1 | 	add	objptr, ##44288
12678     F2 12 02 FB | 	rdlong	arg01, objptr
1267c     04 E4 05 F1 | 	add	objptr, #4
12680     F2 14 02 FB | 	rdlong	arg02, objptr
12684     04 4E 85 F1 | 	sub	fp, #4
12688     A7 16 02 FB | 	rdlong	arg03, fp
1268c     FD 18 02 F6 | 	mov	arg04, result1
12690     18 4E 85 F1 | 	sub	fp, #24
12694     08 E4 85 F1 | 	sub	objptr, #8
12698     F2 1A 02 FB | 	rdlong	arg05, objptr
1269c     56 00 00 FF 
126a0     FC E4 85 F1 | 	sub	objptr, ##44284
126a4     3C 4A B0 FD | 	call	#_hg010b_spin2_draw
126a8     18 4E 05 F1 | 	add	fp, #24
126ac     A7 1A 02 FB | 	rdlong	arg05, fp
126b0     56 00 00 FF 
126b4     00 E5 05 F1 | 	add	objptr, ##44288
126b8     F2 1A 62 FC | 	wrlong	arg05, objptr
126bc     04 4E 05 F1 | 	add	fp, #4
126c0     A7 1A 02 FB | 	rdlong	arg05, fp
126c4     1C 4E 85 F1 | 	sub	fp, #28
126c8     04 E4 05 F1 | 	add	objptr, #4
126cc     F2 1A 62 FC | 	wrlong	arg05, objptr
126d0     56 00 00 FF 
126d4     04 E5 85 F1 | 	sub	objptr, ##44292
126d8     A7 F0 03 F6 | 	mov	ptra, fp
126dc     B2 00 A0 FD | 	call	#popregs_
126e0                 | _do_draw_ret
126e0     2D 00 64 FD | 	ret
126e4                 | 
126e4                 | ' 
126e4                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
126e4                 | ' 
126e4                 | ' sub do_fcircle
126e4                 | _do_fcircle
126e4     02 4A 05 F6 | 	mov	COUNT_, #2
126e8     A8 00 A0 FD | 	call	#pushregs_
126ec     24 F0 07 F1 | 	add	ptra, #36
126f0     FC 71 BF FD | 	call	#_pop
126f4     FD 18 02 F6 | 	mov	arg04, result1
126f8     FE 16 02 F6 | 	mov	arg03, result2
126fc     FF 14 02 F6 | 	mov	arg02, result3
12700     18 4E 05 F1 | 	add	fp, #24
12704     A7 18 62 FC | 	wrlong	arg04, fp
12708     04 4E 05 F1 | 	add	fp, #4
1270c     A7 16 62 FC | 	wrlong	arg03, fp
12710     04 4E 05 F1 | 	add	fp, #4
12714     A7 14 62 FC | 	wrlong	arg02, fp
12718     20 4E 85 F1 | 	sub	fp, #32
1271c     D0 71 BF FD | 	call	#_pop
12720     FD 18 02 F6 | 	mov	arg04, result1
12724     FE 16 02 F6 | 	mov	arg03, result2
12728     FF 1E 02 F6 | 	mov	local01, result3
1272c     0C 4E 05 F1 | 	add	fp, #12
12730     A7 18 62 FC | 	wrlong	arg04, fp
12734     04 4E 05 F1 | 	add	fp, #4
12738     A7 16 62 FC | 	wrlong	arg03, fp
1273c     04 4E 05 F1 | 	add	fp, #4
12740     A7 1E 62 FC | 	wrlong	local01, fp
12744     14 4E 85 F1 | 	sub	fp, #20
12748     A4 71 BF FD | 	call	#_pop
1274c     A7 FA 61 FC | 	wrlong	result1, fp
12750     04 4E 05 F1 | 	add	fp, #4
12754     A7 FC 61 FC | 	wrlong	result2, fp
12758     04 4E 05 F1 | 	add	fp, #4
1275c     A7 FE 61 FC | 	wrlong	result3, fp
12760                 | ' 
12760                 | ' t3=pop()
12760                 | ' t2=pop()
12760                 | ' t1=pop()
12760                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12760     FF 18 02 F6 | 	mov	arg04, result3
12764     08 4E 85 F1 | 	sub	fp, #8
12768     1C 18 0E F2 | 	cmp	arg04, #28 wz
1276c     08 4E 05 51 |  if_ne	add	fp, #8
12770     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12774     08 4E 85 51 |  if_ne	sub	fp, #8
12778     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1277c     7C 00 90 5D |  if_ne	jmp	#LR__1440
12780     14 4E 05 F1 | 	add	fp, #20
12784     A7 1E 02 FB | 	rdlong	local01, fp
12788     14 4E 85 F1 | 	sub	fp, #20
1278c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12790     14 4E 05 51 |  if_ne	add	fp, #20
12794     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12798     14 4E 85 51 |  if_ne	sub	fp, #20
1279c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
127a0     58 00 90 5D |  if_ne	jmp	#LR__1440
127a4     20 4E 05 F1 | 	add	fp, #32
127a8     A7 1E 02 FB | 	rdlong	local01, fp
127ac     20 4E 85 F1 | 	sub	fp, #32
127b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
127b4     20 4E 05 51 |  if_ne	add	fp, #32
127b8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
127bc     20 4E 85 51 |  if_ne	sub	fp, #32
127c0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
127c4     34 00 90 5D |  if_ne	jmp	#LR__1440
127c8     A7 12 02 FB | 	rdlong	arg01, fp
127cc     0C 4E 05 F1 | 	add	fp, #12
127d0     A7 14 02 FB | 	rdlong	arg02, fp
127d4     0C 4E 05 F1 | 	add	fp, #12
127d8     A7 16 02 FB | 	rdlong	arg03, fp
127dc     18 4E 85 F1 | 	sub	fp, #24
127e0     56 00 00 FF 
127e4     FC E4 05 F1 | 	add	objptr, ##44284
127e8     F2 18 02 FB | 	rdlong	arg04, objptr
127ec     56 00 00 FF 
127f0     FC E4 85 F1 | 	sub	objptr, ##44284
127f4     70 4D B0 FD | 	call	#_hg010b_spin2_fcircle
127f8                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
127f8     54 00 90 FD | 	jmp	#LR__1441
127fc                 | LR__1440
127fc     A7 12 02 F6 | 	mov	arg01, fp
12800     5C E6 BF FD | 	call	#_converttoint
12804     FD 1E 02 F6 | 	mov	local01, result1
12808     0C 4E 05 F1 | 	add	fp, #12
1280c     A7 12 02 F6 | 	mov	arg01, fp
12810     0C 4E 85 F1 | 	sub	fp, #12
12814     48 E6 BF FD | 	call	#_converttoint
12818     FD 20 02 F6 | 	mov	local02, result1
1281c     18 4E 05 F1 | 	add	fp, #24
12820     A7 12 02 F6 | 	mov	arg01, fp
12824     18 4E 85 F1 | 	sub	fp, #24
12828     34 E6 BF FD | 	call	#_converttoint
1282c     FD 16 02 F6 | 	mov	arg03, result1
12830     56 00 00 FF 
12834     FC E4 05 F1 | 	add	objptr, ##44284
12838     F2 18 02 FB | 	rdlong	arg04, objptr
1283c     56 00 00 FF 
12840     FC E4 85 F1 | 	sub	objptr, ##44284
12844     0F 13 02 F6 | 	mov	arg01, local01
12848     10 15 02 F6 | 	mov	arg02, local02
1284c     18 4D B0 FD | 	call	#_hg010b_spin2_fcircle
12850                 | LR__1441
12850     A7 F0 03 F6 | 	mov	ptra, fp
12854     B2 00 A0 FD | 	call	#popregs_
12858                 | _do_fcircle_ret
12858     2D 00 64 FD | 	ret
1285c                 | 
1285c                 | ' 
1285c                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
1285c                 | ' 
1285c                 | ' sub do_circle
1285c                 | _do_circle
1285c     02 4A 05 F6 | 	mov	COUNT_, #2
12860     A8 00 A0 FD | 	call	#pushregs_
12864     24 F0 07 F1 | 	add	ptra, #36
12868     84 70 BF FD | 	call	#_pop
1286c     FD 18 02 F6 | 	mov	arg04, result1
12870     FE 16 02 F6 | 	mov	arg03, result2
12874     FF 14 02 F6 | 	mov	arg02, result3
12878     18 4E 05 F1 | 	add	fp, #24
1287c     A7 18 62 FC | 	wrlong	arg04, fp
12880     04 4E 05 F1 | 	add	fp, #4
12884     A7 16 62 FC | 	wrlong	arg03, fp
12888     04 4E 05 F1 | 	add	fp, #4
1288c     A7 14 62 FC | 	wrlong	arg02, fp
12890     20 4E 85 F1 | 	sub	fp, #32
12894     58 70 BF FD | 	call	#_pop
12898     FD 18 02 F6 | 	mov	arg04, result1
1289c     FE 16 02 F6 | 	mov	arg03, result2
128a0     FF 1E 02 F6 | 	mov	local01, result3
128a4     0C 4E 05 F1 | 	add	fp, #12
128a8     A7 18 62 FC | 	wrlong	arg04, fp
128ac     04 4E 05 F1 | 	add	fp, #4
128b0     A7 16 62 FC | 	wrlong	arg03, fp
128b4     04 4E 05 F1 | 	add	fp, #4
128b8     A7 1E 62 FC | 	wrlong	local01, fp
128bc     14 4E 85 F1 | 	sub	fp, #20
128c0     2C 70 BF FD | 	call	#_pop
128c4     A7 FA 61 FC | 	wrlong	result1, fp
128c8     04 4E 05 F1 | 	add	fp, #4
128cc     A7 FC 61 FC | 	wrlong	result2, fp
128d0     04 4E 05 F1 | 	add	fp, #4
128d4     A7 FE 61 FC | 	wrlong	result3, fp
128d8                 | ' 
128d8                 | ' t3=pop()
128d8                 | ' t2=pop()
128d8                 | ' t1=pop()
128d8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
128d8     FF 18 02 F6 | 	mov	arg04, result3
128dc     08 4E 85 F1 | 	sub	fp, #8
128e0     1C 18 0E F2 | 	cmp	arg04, #28 wz
128e4     08 4E 05 51 |  if_ne	add	fp, #8
128e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
128ec     08 4E 85 51 |  if_ne	sub	fp, #8
128f0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
128f4     7C 00 90 5D |  if_ne	jmp	#LR__1450
128f8     14 4E 05 F1 | 	add	fp, #20
128fc     A7 1E 02 FB | 	rdlong	local01, fp
12900     14 4E 85 F1 | 	sub	fp, #20
12904     1C 1E 0E F2 | 	cmp	local01, #28 wz
12908     14 4E 05 51 |  if_ne	add	fp, #20
1290c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12910     14 4E 85 51 |  if_ne	sub	fp, #20
12914     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12918     58 00 90 5D |  if_ne	jmp	#LR__1450
1291c     20 4E 05 F1 | 	add	fp, #32
12920     A7 1E 02 FB | 	rdlong	local01, fp
12924     20 4E 85 F1 | 	sub	fp, #32
12928     1C 1E 0E F2 | 	cmp	local01, #28 wz
1292c     20 4E 05 51 |  if_ne	add	fp, #32
12930     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12934     20 4E 85 51 |  if_ne	sub	fp, #32
12938     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1293c     34 00 90 5D |  if_ne	jmp	#LR__1450
12940     A7 12 02 FB | 	rdlong	arg01, fp
12944     0C 4E 05 F1 | 	add	fp, #12
12948     A7 14 02 FB | 	rdlong	arg02, fp
1294c     0C 4E 05 F1 | 	add	fp, #12
12950     A7 16 02 FB | 	rdlong	arg03, fp
12954     18 4E 85 F1 | 	sub	fp, #24
12958     56 00 00 FF 
1295c     FC E4 05 F1 | 	add	objptr, ##44284
12960     F2 18 02 FB | 	rdlong	arg04, objptr
12964     56 00 00 FF 
12968     FC E4 85 F1 | 	sub	objptr, ##44284
1296c     04 4D B0 FD | 	call	#_hg010b_spin2_circle
12970                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12970     54 00 90 FD | 	jmp	#LR__1451
12974                 | LR__1450
12974     A7 12 02 F6 | 	mov	arg01, fp
12978     E4 E4 BF FD | 	call	#_converttoint
1297c     FD 1E 02 F6 | 	mov	local01, result1
12980     0C 4E 05 F1 | 	add	fp, #12
12984     A7 12 02 F6 | 	mov	arg01, fp
12988     0C 4E 85 F1 | 	sub	fp, #12
1298c     D0 E4 BF FD | 	call	#_converttoint
12990     FD 20 02 F6 | 	mov	local02, result1
12994     18 4E 05 F1 | 	add	fp, #24
12998     A7 12 02 F6 | 	mov	arg01, fp
1299c     18 4E 85 F1 | 	sub	fp, #24
129a0     BC E4 BF FD | 	call	#_converttoint
129a4     FD 16 02 F6 | 	mov	arg03, result1
129a8     56 00 00 FF 
129ac     FC E4 05 F1 | 	add	objptr, ##44284
129b0     F2 18 02 FB | 	rdlong	arg04, objptr
129b4     56 00 00 FF 
129b8     FC E4 85 F1 | 	sub	objptr, ##44284
129bc     0F 13 02 F6 | 	mov	arg01, local01
129c0     10 15 02 F6 | 	mov	arg02, local02
129c4     AC 4C B0 FD | 	call	#_hg010b_spin2_circle
129c8                 | LR__1451
129c8     A7 F0 03 F6 | 	mov	ptra, fp
129cc     B2 00 A0 FD | 	call	#popregs_
129d0                 | _do_circle_ret
129d0     2D 00 64 FD | 	ret
129d4                 | 
129d4                 | ' 
129d4                 | ' ' -------------------------- Draw a rectangle
129d4                 | ' 
129d4                 | ' sub do_box
129d4                 | _do_box
129d4     03 4A 05 F6 | 	mov	COUNT_, #3
129d8     A8 00 A0 FD | 	call	#pushregs_
129dc     30 F0 07 F1 | 	add	ptra, #48
129e0     0C 6F BF FD | 	call	#_pop
129e4     FD 1A 02 F6 | 	mov	arg05, result1
129e8     FE 18 02 F6 | 	mov	arg04, result2
129ec     FF 16 02 F6 | 	mov	arg03, result3
129f0     24 4E 05 F1 | 	add	fp, #36
129f4     A7 1A 62 FC | 	wrlong	arg05, fp
129f8     04 4E 05 F1 | 	add	fp, #4
129fc     A7 18 62 FC | 	wrlong	arg04, fp
12a00     04 4E 05 F1 | 	add	fp, #4
12a04     A7 16 62 FC | 	wrlong	arg03, fp
12a08     2C 4E 85 F1 | 	sub	fp, #44
12a0c     E0 6E BF FD | 	call	#_pop
12a10     FD 1A 02 F6 | 	mov	arg05, result1
12a14     FE 18 02 F6 | 	mov	arg04, result2
12a18     FF 16 02 F6 | 	mov	arg03, result3
12a1c     18 4E 05 F1 | 	add	fp, #24
12a20     A7 1A 62 FC | 	wrlong	arg05, fp
12a24     04 4E 05 F1 | 	add	fp, #4
12a28     A7 18 62 FC | 	wrlong	arg04, fp
12a2c     04 4E 05 F1 | 	add	fp, #4
12a30     A7 16 62 FC | 	wrlong	arg03, fp
12a34     20 4E 85 F1 | 	sub	fp, #32
12a38     B4 6E BF FD | 	call	#_pop
12a3c     FD 1A 02 F6 | 	mov	arg05, result1
12a40     FE 18 02 F6 | 	mov	arg04, result2
12a44     FF 1E 02 F6 | 	mov	local01, result3
12a48     0C 4E 05 F1 | 	add	fp, #12
12a4c     A7 1A 62 FC | 	wrlong	arg05, fp
12a50     04 4E 05 F1 | 	add	fp, #4
12a54     A7 18 62 FC | 	wrlong	arg04, fp
12a58     04 4E 05 F1 | 	add	fp, #4
12a5c     A7 1E 62 FC | 	wrlong	local01, fp
12a60     14 4E 85 F1 | 	sub	fp, #20
12a64     88 6E BF FD | 	call	#_pop
12a68     A7 FA 61 FC | 	wrlong	result1, fp
12a6c     04 4E 05 F1 | 	add	fp, #4
12a70     A7 FC 61 FC | 	wrlong	result2, fp
12a74     04 4E 05 F1 | 	add	fp, #4
12a78     A7 FE 61 FC | 	wrlong	result3, fp
12a7c                 | ' 
12a7c                 | ' t4=pop()
12a7c                 | ' t3=pop()
12a7c                 | ' t2=pop()
12a7c                 | ' t1=pop()
12a7c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12a7c     FF 1A 02 F6 | 	mov	arg05, result3
12a80     08 4E 85 F1 | 	sub	fp, #8
12a84     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12a88     08 4E 05 51 |  if_ne	add	fp, #8
12a8c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12a90     08 4E 85 51 |  if_ne	sub	fp, #8
12a94     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12a98     A8 00 90 5D |  if_ne	jmp	#LR__1460
12a9c     14 4E 05 F1 | 	add	fp, #20
12aa0     A7 1E 02 FB | 	rdlong	local01, fp
12aa4     14 4E 85 F1 | 	sub	fp, #20
12aa8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12aac     14 4E 05 51 |  if_ne	add	fp, #20
12ab0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12ab4     14 4E 85 51 |  if_ne	sub	fp, #20
12ab8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12abc     84 00 90 5D |  if_ne	jmp	#LR__1460
12ac0     20 4E 05 F1 | 	add	fp, #32
12ac4     A7 1E 02 FB | 	rdlong	local01, fp
12ac8     20 4E 85 F1 | 	sub	fp, #32
12acc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12ad0     20 4E 05 51 |  if_ne	add	fp, #32
12ad4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12ad8     20 4E 85 51 |  if_ne	sub	fp, #32
12adc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ae0     60 00 90 5D |  if_ne	jmp	#LR__1460
12ae4     2C 4E 05 F1 | 	add	fp, #44
12ae8     A7 1E 02 FB | 	rdlong	local01, fp
12aec     2C 4E 85 F1 | 	sub	fp, #44
12af0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12af4     2C 4E 05 51 |  if_ne	add	fp, #44
12af8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12afc     2C 4E 85 51 |  if_ne	sub	fp, #44
12b00     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12b04     3C 00 90 5D |  if_ne	jmp	#LR__1460
12b08     A7 12 02 FB | 	rdlong	arg01, fp
12b0c     0C 4E 05 F1 | 	add	fp, #12
12b10     A7 14 02 FB | 	rdlong	arg02, fp
12b14     0C 4E 05 F1 | 	add	fp, #12
12b18     A7 16 02 FB | 	rdlong	arg03, fp
12b1c     0C 4E 05 F1 | 	add	fp, #12
12b20     A7 18 02 FB | 	rdlong	arg04, fp
12b24     24 4E 85 F1 | 	sub	fp, #36
12b28     56 00 00 FF 
12b2c     FC E4 05 F1 | 	add	objptr, ##44284
12b30     F2 1A 02 FB | 	rdlong	arg05, objptr
12b34     56 00 00 FF 
12b38     FC E4 85 F1 | 	sub	objptr, ##44284
12b3c     00 4D B0 FD | 	call	#_hg010b_spin2_box
12b40                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12b40     6C 00 90 FD | 	jmp	#LR__1461
12b44                 | LR__1460
12b44     A7 12 02 F6 | 	mov	arg01, fp
12b48     14 E3 BF FD | 	call	#_converttoint
12b4c     FD 20 02 F6 | 	mov	local02, result1
12b50     0C 4E 05 F1 | 	add	fp, #12
12b54     A7 12 02 F6 | 	mov	arg01, fp
12b58     0C 4E 85 F1 | 	sub	fp, #12
12b5c     00 E3 BF FD | 	call	#_converttoint
12b60     FD 22 02 F6 | 	mov	local03, result1
12b64     18 4E 05 F1 | 	add	fp, #24
12b68     A7 12 02 F6 | 	mov	arg01, fp
12b6c     18 4E 85 F1 | 	sub	fp, #24
12b70     EC E2 BF FD | 	call	#_converttoint
12b74     FD 1E 02 F6 | 	mov	local01, result1
12b78     24 4E 05 F1 | 	add	fp, #36
12b7c     A7 12 02 F6 | 	mov	arg01, fp
12b80     24 4E 85 F1 | 	sub	fp, #36
12b84     D8 E2 BF FD | 	call	#_converttoint
12b88     FD 18 02 F6 | 	mov	arg04, result1
12b8c     56 00 00 FF 
12b90     FC E4 05 F1 | 	add	objptr, ##44284
12b94     F2 1A 02 FB | 	rdlong	arg05, objptr
12b98     56 00 00 FF 
12b9c     FC E4 85 F1 | 	sub	objptr, ##44284
12ba0     10 13 02 F6 | 	mov	arg01, local02
12ba4     11 15 02 F6 | 	mov	arg02, local03
12ba8     0F 17 02 F6 | 	mov	arg03, local01
12bac     90 4C B0 FD | 	call	#_hg010b_spin2_box
12bb0                 | LR__1461
12bb0     A7 F0 03 F6 | 	mov	ptra, fp
12bb4     B2 00 A0 FD | 	call	#popregs_
12bb8                 | _do_box_ret
12bb8     2D 00 64 FD | 	ret
12bbc                 | 
12bbc                 | ' 
12bbc                 | ' sub do_fill
12bbc                 | _do_fill
12bbc     03 4A 05 F6 | 	mov	COUNT_, #3
12bc0     A8 00 A0 FD | 	call	#pushregs_
12bc4     30 F0 07 F1 | 	add	ptra, #48
12bc8     24 6D BF FD | 	call	#_pop
12bcc     FD 18 02 F6 | 	mov	arg04, result1
12bd0     FE 16 02 F6 | 	mov	arg03, result2
12bd4     FF 14 02 F6 | 	mov	arg02, result3
12bd8     24 4E 05 F1 | 	add	fp, #36
12bdc     A7 18 62 FC | 	wrlong	arg04, fp
12be0     04 4E 05 F1 | 	add	fp, #4
12be4     A7 16 62 FC | 	wrlong	arg03, fp
12be8     04 4E 05 F1 | 	add	fp, #4
12bec     A7 14 62 FC | 	wrlong	arg02, fp
12bf0     2C 4E 85 F1 | 	sub	fp, #44
12bf4     F8 6C BF FD | 	call	#_pop
12bf8     FD 18 02 F6 | 	mov	arg04, result1
12bfc     FE 16 02 F6 | 	mov	arg03, result2
12c00     FF 14 02 F6 | 	mov	arg02, result3
12c04     18 4E 05 F1 | 	add	fp, #24
12c08     A7 18 62 FC | 	wrlong	arg04, fp
12c0c     04 4E 05 F1 | 	add	fp, #4
12c10     A7 16 62 FC | 	wrlong	arg03, fp
12c14     04 4E 05 F1 | 	add	fp, #4
12c18     A7 14 62 FC | 	wrlong	arg02, fp
12c1c     20 4E 85 F1 | 	sub	fp, #32
12c20     CC 6C BF FD | 	call	#_pop
12c24     FD 18 02 F6 | 	mov	arg04, result1
12c28     FE 16 02 F6 | 	mov	arg03, result2
12c2c     FF 1E 02 F6 | 	mov	local01, result3
12c30     0C 4E 05 F1 | 	add	fp, #12
12c34     A7 18 62 FC | 	wrlong	arg04, fp
12c38     04 4E 05 F1 | 	add	fp, #4
12c3c     A7 16 62 FC | 	wrlong	arg03, fp
12c40     04 4E 05 F1 | 	add	fp, #4
12c44     A7 1E 62 FC | 	wrlong	local01, fp
12c48     14 4E 85 F1 | 	sub	fp, #20
12c4c     A0 6C BF FD | 	call	#_pop
12c50     A7 FA 61 FC | 	wrlong	result1, fp
12c54     04 4E 05 F1 | 	add	fp, #4
12c58     A7 FC 61 FC | 	wrlong	result2, fp
12c5c     04 4E 05 F1 | 	add	fp, #4
12c60     A7 FE 61 FC | 	wrlong	result3, fp
12c64                 | ' 
12c64                 | ' t4=pop()
12c64                 | ' t3=pop()
12c64                 | ' t2=pop()
12c64                 | ' t1=pop()
12c64                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12c64     FF 18 02 F6 | 	mov	arg04, result3
12c68     08 4E 85 F1 | 	sub	fp, #8
12c6c     1C 18 0E F2 | 	cmp	arg04, #28 wz
12c70     08 4E 05 51 |  if_ne	add	fp, #8
12c74     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12c78     08 4E 85 51 |  if_ne	sub	fp, #8
12c7c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12c80     94 00 90 5D |  if_ne	jmp	#LR__1470
12c84     14 4E 05 F1 | 	add	fp, #20
12c88     A7 1E 02 FB | 	rdlong	local01, fp
12c8c     14 4E 85 F1 | 	sub	fp, #20
12c90     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c94     14 4E 05 51 |  if_ne	add	fp, #20
12c98     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12c9c     14 4E 85 51 |  if_ne	sub	fp, #20
12ca0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12ca4     70 00 90 5D |  if_ne	jmp	#LR__1470
12ca8     20 4E 05 F1 | 	add	fp, #32
12cac     A7 1E 02 FB | 	rdlong	local01, fp
12cb0     20 4E 85 F1 | 	sub	fp, #32
12cb4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cb8     20 4E 05 51 |  if_ne	add	fp, #32
12cbc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12cc0     20 4E 85 51 |  if_ne	sub	fp, #32
12cc4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12cc8     4C 00 90 5D |  if_ne	jmp	#LR__1470
12ccc     2C 4E 05 F1 | 	add	fp, #44
12cd0     A7 1E 02 FB | 	rdlong	local01, fp
12cd4     2C 4E 85 F1 | 	sub	fp, #44
12cd8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cdc     2C 4E 05 51 |  if_ne	add	fp, #44
12ce0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12ce4     2C 4E 85 51 |  if_ne	sub	fp, #44
12ce8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12cec     28 00 90 5D |  if_ne	jmp	#LR__1470
12cf0     A7 12 02 FB | 	rdlong	arg01, fp
12cf4     0C 4E 05 F1 | 	add	fp, #12
12cf8     A7 14 02 FB | 	rdlong	arg02, fp
12cfc     0C 4E 05 F1 | 	add	fp, #12
12d00     A7 16 02 FB | 	rdlong	arg03, fp
12d04     0C 4E 05 F1 | 	add	fp, #12
12d08     A7 18 02 FB | 	rdlong	arg04, fp
12d0c     24 4E 85 F1 | 	sub	fp, #36
12d10     C0 45 B0 FD | 	call	#_hg010b_spin2_fill
12d14                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
12d14     58 00 90 FD | 	jmp	#LR__1471
12d18                 | LR__1470
12d18     A7 12 02 F6 | 	mov	arg01, fp
12d1c     40 E1 BF FD | 	call	#_converttoint
12d20     FD 20 02 F6 | 	mov	local02, result1
12d24     0C 4E 05 F1 | 	add	fp, #12
12d28     A7 12 02 F6 | 	mov	arg01, fp
12d2c     0C 4E 85 F1 | 	sub	fp, #12
12d30     2C E1 BF FD | 	call	#_converttoint
12d34     FD 22 02 F6 | 	mov	local03, result1
12d38     18 4E 05 F1 | 	add	fp, #24
12d3c     A7 12 02 F6 | 	mov	arg01, fp
12d40     18 4E 85 F1 | 	sub	fp, #24
12d44     18 E1 BF FD | 	call	#_converttoint
12d48     FD 1E 02 F6 | 	mov	local01, result1
12d4c     24 4E 05 F1 | 	add	fp, #36
12d50     A7 12 02 F6 | 	mov	arg01, fp
12d54     24 4E 85 F1 | 	sub	fp, #36
12d58     04 E1 BF FD | 	call	#_converttoint
12d5c     FD 18 02 F6 | 	mov	arg04, result1
12d60     10 13 02 F6 | 	mov	arg01, local02
12d64     11 15 02 F6 | 	mov	arg02, local03
12d68     0F 17 02 F6 | 	mov	arg03, local01
12d6c     64 45 B0 FD | 	call	#_hg010b_spin2_fill
12d70                 | LR__1471
12d70     A7 F0 03 F6 | 	mov	ptra, fp
12d74     B2 00 A0 FD | 	call	#popregs_
12d78                 | _do_fill_ret
12d78     2D 00 64 FD | 	ret
12d7c                 | 
12d7c                 | ' 
12d7c                 | ' ' -------------------------- Draw a frane
12d7c                 | ' 
12d7c                 | ' sub do_frame
12d7c                 | _do_frame
12d7c     03 4A 05 F6 | 	mov	COUNT_, #3
12d80     A8 00 A0 FD | 	call	#pushregs_
12d84     30 F0 07 F1 | 	add	ptra, #48
12d88     64 6B BF FD | 	call	#_pop
12d8c     FD 1A 02 F6 | 	mov	arg05, result1
12d90     FE 18 02 F6 | 	mov	arg04, result2
12d94     FF 16 02 F6 | 	mov	arg03, result3
12d98     24 4E 05 F1 | 	add	fp, #36
12d9c     A7 1A 62 FC | 	wrlong	arg05, fp
12da0     04 4E 05 F1 | 	add	fp, #4
12da4     A7 18 62 FC | 	wrlong	arg04, fp
12da8     04 4E 05 F1 | 	add	fp, #4
12dac     A7 16 62 FC | 	wrlong	arg03, fp
12db0     2C 4E 85 F1 | 	sub	fp, #44
12db4     38 6B BF FD | 	call	#_pop
12db8     FD 1A 02 F6 | 	mov	arg05, result1
12dbc     FE 18 02 F6 | 	mov	arg04, result2
12dc0     FF 16 02 F6 | 	mov	arg03, result3
12dc4     18 4E 05 F1 | 	add	fp, #24
12dc8     A7 1A 62 FC | 	wrlong	arg05, fp
12dcc     04 4E 05 F1 | 	add	fp, #4
12dd0     A7 18 62 FC | 	wrlong	arg04, fp
12dd4     04 4E 05 F1 | 	add	fp, #4
12dd8     A7 16 62 FC | 	wrlong	arg03, fp
12ddc     20 4E 85 F1 | 	sub	fp, #32
12de0     0C 6B BF FD | 	call	#_pop
12de4     FD 1A 02 F6 | 	mov	arg05, result1
12de8     FE 18 02 F6 | 	mov	arg04, result2
12dec     FF 1E 02 F6 | 	mov	local01, result3
12df0     0C 4E 05 F1 | 	add	fp, #12
12df4     A7 1A 62 FC | 	wrlong	arg05, fp
12df8     04 4E 05 F1 | 	add	fp, #4
12dfc     A7 18 62 FC | 	wrlong	arg04, fp
12e00     04 4E 05 F1 | 	add	fp, #4
12e04     A7 1E 62 FC | 	wrlong	local01, fp
12e08     14 4E 85 F1 | 	sub	fp, #20
12e0c     E0 6A BF FD | 	call	#_pop
12e10     A7 FA 61 FC | 	wrlong	result1, fp
12e14     04 4E 05 F1 | 	add	fp, #4
12e18     A7 FC 61 FC | 	wrlong	result2, fp
12e1c     04 4E 05 F1 | 	add	fp, #4
12e20     A7 FE 61 FC | 	wrlong	result3, fp
12e24                 | ' 
12e24                 | ' t4=pop()
12e24                 | ' t3=pop()
12e24                 | ' t2=pop()
12e24                 | ' t1=pop()
12e24                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12e24     FF 1A 02 F6 | 	mov	arg05, result3
12e28     08 4E 85 F1 | 	sub	fp, #8
12e2c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12e30     08 4E 05 51 |  if_ne	add	fp, #8
12e34     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12e38     08 4E 85 51 |  if_ne	sub	fp, #8
12e3c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12e40     A8 00 90 5D |  if_ne	jmp	#LR__1480
12e44     14 4E 05 F1 | 	add	fp, #20
12e48     A7 1E 02 FB | 	rdlong	local01, fp
12e4c     14 4E 85 F1 | 	sub	fp, #20
12e50     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e54     14 4E 05 51 |  if_ne	add	fp, #20
12e58     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12e5c     14 4E 85 51 |  if_ne	sub	fp, #20
12e60     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12e64     84 00 90 5D |  if_ne	jmp	#LR__1480
12e68     20 4E 05 F1 | 	add	fp, #32
12e6c     A7 1E 02 FB | 	rdlong	local01, fp
12e70     20 4E 85 F1 | 	sub	fp, #32
12e74     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e78     20 4E 05 51 |  if_ne	add	fp, #32
12e7c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12e80     20 4E 85 51 |  if_ne	sub	fp, #32
12e84     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12e88     60 00 90 5D |  if_ne	jmp	#LR__1480
12e8c     2C 4E 05 F1 | 	add	fp, #44
12e90     A7 1E 02 FB | 	rdlong	local01, fp
12e94     2C 4E 85 F1 | 	sub	fp, #44
12e98     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e9c     2C 4E 05 51 |  if_ne	add	fp, #44
12ea0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12ea4     2C 4E 85 51 |  if_ne	sub	fp, #44
12ea8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12eac     3C 00 90 5D |  if_ne	jmp	#LR__1480
12eb0     A7 12 02 FB | 	rdlong	arg01, fp
12eb4     0C 4E 05 F1 | 	add	fp, #12
12eb8     A7 14 02 FB | 	rdlong	arg02, fp
12ebc     0C 4E 05 F1 | 	add	fp, #12
12ec0     A7 16 02 FB | 	rdlong	arg03, fp
12ec4     0C 4E 05 F1 | 	add	fp, #12
12ec8     A7 18 02 FB | 	rdlong	arg04, fp
12ecc     24 4E 85 F1 | 	sub	fp, #36
12ed0     56 00 00 FF 
12ed4     FC E4 05 F1 | 	add	objptr, ##44284
12ed8     F2 1A 02 FB | 	rdlong	arg05, objptr
12edc     56 00 00 FF 
12ee0     FC E4 85 F1 | 	sub	objptr, ##44284
12ee4     D8 48 B0 FD | 	call	#_hg010b_spin2_frame
12ee8                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12ee8     6C 00 90 FD | 	jmp	#LR__1481
12eec                 | LR__1480
12eec     A7 12 02 F6 | 	mov	arg01, fp
12ef0     6C DF BF FD | 	call	#_converttoint
12ef4     FD 20 02 F6 | 	mov	local02, result1
12ef8     0C 4E 05 F1 | 	add	fp, #12
12efc     A7 12 02 F6 | 	mov	arg01, fp
12f00     0C 4E 85 F1 | 	sub	fp, #12
12f04     58 DF BF FD | 	call	#_converttoint
12f08     FD 22 02 F6 | 	mov	local03, result1
12f0c     18 4E 05 F1 | 	add	fp, #24
12f10     A7 12 02 F6 | 	mov	arg01, fp
12f14     18 4E 85 F1 | 	sub	fp, #24
12f18     44 DF BF FD | 	call	#_converttoint
12f1c     FD 1E 02 F6 | 	mov	local01, result1
12f20     24 4E 05 F1 | 	add	fp, #36
12f24     A7 12 02 F6 | 	mov	arg01, fp
12f28     24 4E 85 F1 | 	sub	fp, #36
12f2c     30 DF BF FD | 	call	#_converttoint
12f30     FD 18 02 F6 | 	mov	arg04, result1
12f34     56 00 00 FF 
12f38     FC E4 05 F1 | 	add	objptr, ##44284
12f3c     F2 1A 02 FB | 	rdlong	arg05, objptr
12f40     56 00 00 FF 
12f44     FC E4 85 F1 | 	sub	objptr, ##44284
12f48     10 13 02 F6 | 	mov	arg01, local02
12f4c     11 15 02 F6 | 	mov	arg02, local03
12f50     0F 17 02 F6 | 	mov	arg03, local01
12f54     68 48 B0 FD | 	call	#_hg010b_spin2_frame
12f58                 | LR__1481
12f58     A7 F0 03 F6 | 	mov	ptra, fp
12f5c     B2 00 A0 FD | 	call	#popregs_
12f60                 | _do_frame_ret
12f60     2D 00 64 FD | 	ret
12f64                 | 
12f64                 | ' 
12f64                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
12f64                 | ' 
12f64                 | ' ' ------------------------- Print to the screem
12f64                 | ' 
12f64                 | ' sub do_print  
12f64                 | _do_print
12f64     0A 4A 05 F6 | 	mov	COUNT_, #10
12f68     A8 00 A0 FD | 	call	#pushregs_
12f6c     00 24 06 F6 | 	mov	local04, #0
12f70     7C 69 BF FD | 	call	#_pop
12f74     FD 26 02 F6 | 	mov	local05, result1
12f78     FE 28 02 F6 | 	mov	local06, result2
12f7c     FF 2A 02 F6 | 	mov	local07, result3
12f80     13 1F 02 F6 | 	mov	local01, local05
12f84     14 21 02 F6 | 	mov	local02, local06
12f88     15 23 02 F6 | 	mov	local03, local07
12f8c                 | '  
12f8c                 | ' r=0
12f8c                 | ' t1=pop() 
12f8c                 | ' 'print t1.result_type,t1.result.uresult
12f8c                 | ' 
12f8c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
12f8c     21 22 0E F2 | 	cmp	local03, #33 wz
12f90     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
12f94     20 00 90 5D |  if_ne	jmp	#LR__1490
12f98     11 25 02 F6 | 	mov	local04, local03
12f9c     50 69 BF FD | 	call	#_pop
12fa0     FD 26 02 F6 | 	mov	local05, result1
12fa4     FE 28 02 F6 | 	mov	local06, result2
12fa8     FF 2A 02 F6 | 	mov	local07, result3
12fac     13 1F 02 F6 | 	mov	local01, local05
12fb0     14 21 02 F6 | 	mov	local02, local06
12fb4     15 23 02 F6 | 	mov	local03, local07
12fb8                 | LR__1490
12fb8                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
12fb8     20 22 0E F2 | 	cmp	local03, #32 wz
12fbc     11 25 02 A6 |  if_e	mov	local04, local03
12fc0                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
12fc0     FF 22 0E F2 | 	cmp	local03, #255 wz
12fc4     0C 00 90 5D |  if_ne	jmp	#LR__1491
12fc8     0F 13 02 F6 | 	mov	arg01, local01
12fcc     90 28 B0 FD | 	call	#_printerror
12fd0     4C 04 90 FD | 	jmp	#LR__1509
12fd4                 | LR__1491
12fd4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
12fd4     2B 22 0E F2 | 	cmp	local03, #43 wz
12fd8     14 00 90 5D |  if_ne	jmp	#LR__1492
12fdc     0F 13 02 F6 | 	mov	arg01, local01
12fe0     48 9A BF FD | 	call	#_convertstring
12fe4     FD 26 02 F6 | 	mov	local05, result1
12fe8     13 1F 02 F6 | 	mov	local01, local05
12fec     1F 22 06 F6 | 	mov	local03, #31
12ff0                 | LR__1492
12ff0                 | ' 
12ff0                 | ' if r=print_mod_comma  then
12ff0     21 24 0E F2 | 	cmp	local04, #33 wz
12ff4     AC 01 90 5D |  if_ne	jmp	#LR__1497
12ff8                 | '   if t1.result_type=result_int then print t1.result.iresult,
12ff8     1C 22 0E F2 | 	cmp	local03, #28 wz
12ffc     64 00 90 5D |  if_ne	jmp	#LR__1493
13000     00 12 06 F6 | 	mov	arg01, #0
13004     E0 B6 B0 FD | 	call	#__system___getiolock_0423
13008     FD 12 02 F6 | 	mov	arg01, result1
1300c     D4 5D B0 FD | 	call	#__system___lockmem
13010     00 28 06 F6 | 	mov	local06, #0
13014     00 12 06 F6 | 	mov	arg01, #0
13018     0F 15 02 F6 | 	mov	arg02, local01
1301c     00 16 06 F6 | 	mov	arg03, #0
13020     0A 18 06 F6 | 	mov	arg04, #10
13024     F4 6A B0 FD | 	call	#__system___basic_print_integer
13028     FD 2A 02 F6 | 	mov	local07, result1
1302c     14 27 02 F6 | 	mov	local05, local06
13030     15 27 02 F1 | 	add	local05, local07
13034     00 2C 06 F6 | 	mov	local08, #0
13038     00 12 06 F6 | 	mov	arg01, #0
1303c     09 14 06 F6 | 	mov	arg02, #9
13040     00 16 06 F6 | 	mov	arg03, #0
13044     38 6A B0 FD | 	call	#__system___basic_print_char
13048     FD 2E 02 F6 | 	mov	local09, result1
1304c     FD 26 02 F1 | 	add	local05, result1
13050     00 12 06 F6 | 	mov	arg01, #0
13054     90 B6 B0 FD | 	call	#__system___getiolock_0423
13058     FD 00 68 FC | 	wrlong	#0, result1
1305c     00 FA 05 F6 | 	mov	result1, #0
13060     00 30 06 F6 | 	mov	local10, #0
13064                 | LR__1493
13064                 | '   if t1.result_type=result_uint then print t1.result.uresult,
13064     1D 22 0E F2 | 	cmp	local03, #29 wz
13068     64 00 90 5D |  if_ne	jmp	#LR__1494
1306c     00 12 06 F6 | 	mov	arg01, #0
13070     74 B6 B0 FD | 	call	#__system___getiolock_0423
13074     FD 12 02 F6 | 	mov	arg01, result1
13078     68 5D B0 FD | 	call	#__system___lockmem
1307c     00 28 06 F6 | 	mov	local06, #0
13080     00 12 06 F6 | 	mov	arg01, #0
13084     0F 15 02 F6 | 	mov	arg02, local01
13088     00 16 06 F6 | 	mov	arg03, #0
1308c     0A 18 06 F6 | 	mov	arg04, #10
13090     C8 6A B0 FD | 	call	#__system___basic_print_unsigned
13094     FD 2A 02 F6 | 	mov	local07, result1
13098     14 27 02 F6 | 	mov	local05, local06
1309c     15 27 02 F1 | 	add	local05, local07
130a0     00 2C 06 F6 | 	mov	local08, #0
130a4     00 12 06 F6 | 	mov	arg01, #0
130a8     09 14 06 F6 | 	mov	arg02, #9
130ac     00 16 06 F6 | 	mov	arg03, #0
130b0     CC 69 B0 FD | 	call	#__system___basic_print_char
130b4     FD 2E 02 F6 | 	mov	local09, result1
130b8     FD 26 02 F1 | 	add	local05, result1
130bc     00 12 06 F6 | 	mov	arg01, #0
130c0     24 B6 B0 FD | 	call	#__system___getiolock_0423
130c4     FD 00 68 FC | 	wrlong	#0, result1
130c8     00 FA 05 F6 | 	mov	result1, #0
130cc     00 30 06 F6 | 	mov	local10, #0
130d0                 | LR__1494
130d0                 | '   if t1.result_type=result_float then print t1.result.fresult,
130d0     1E 22 0E F2 | 	cmp	local03, #30 wz
130d4     64 00 90 5D |  if_ne	jmp	#LR__1495
130d8     00 12 06 F6 | 	mov	arg01, #0
130dc     08 B6 B0 FD | 	call	#__system___getiolock_0423
130e0     FD 12 02 F6 | 	mov	arg01, result1
130e4     FC 5C B0 FD | 	call	#__system___lockmem
130e8     00 28 06 F6 | 	mov	local06, #0
130ec     00 12 06 F6 | 	mov	arg01, #0
130f0     0F 15 02 F6 | 	mov	arg02, local01
130f4     00 16 06 F6 | 	mov	arg03, #0
130f8     23 18 06 F6 | 	mov	arg04, #35
130fc     E8 8D B0 FD | 	call	#__system___basic_print_float
13100     FD 2A 02 F6 | 	mov	local07, result1
13104     14 27 02 F6 | 	mov	local05, local06
13108     15 27 02 F1 | 	add	local05, local07
1310c     00 2C 06 F6 | 	mov	local08, #0
13110     00 12 06 F6 | 	mov	arg01, #0
13114     09 14 06 F6 | 	mov	arg02, #9
13118     00 16 06 F6 | 	mov	arg03, #0
1311c     60 69 B0 FD | 	call	#__system___basic_print_char
13120     FD 2E 02 F6 | 	mov	local09, result1
13124     FD 26 02 F1 | 	add	local05, result1
13128     00 12 06 F6 | 	mov	arg01, #0
1312c     B8 B5 B0 FD | 	call	#__system___getiolock_0423
13130     FD 00 68 FC | 	wrlong	#0, result1
13134     00 FA 05 F6 | 	mov	result1, #0
13138     00 30 06 F6 | 	mov	local10, #0
1313c                 | LR__1495
1313c                 | '   if t1.result_type=result_string then print t1.result.sresult,
1313c     1F 22 0E F2 | 	cmp	local03, #31 wz
13140     60 00 90 5D |  if_ne	jmp	#LR__1496
13144     00 12 06 F6 | 	mov	arg01, #0
13148     9C B5 B0 FD | 	call	#__system___getiolock_0423
1314c     FD 12 02 F6 | 	mov	arg01, result1
13150     90 5C B0 FD | 	call	#__system___lockmem
13154     00 28 06 F6 | 	mov	local06, #0
13158     00 12 06 F6 | 	mov	arg01, #0
1315c     0F 15 02 F6 | 	mov	arg02, local01
13160     00 16 06 F6 | 	mov	arg03, #0
13164     70 69 B0 FD | 	call	#__system___basic_print_string
13168     FD 2A 02 F6 | 	mov	local07, result1
1316c     14 27 02 F6 | 	mov	local05, local06
13170     15 27 02 F1 | 	add	local05, local07
13174     00 2C 06 F6 | 	mov	local08, #0
13178     00 12 06 F6 | 	mov	arg01, #0
1317c     09 14 06 F6 | 	mov	arg02, #9
13180     00 16 06 F6 | 	mov	arg03, #0
13184     F8 68 B0 FD | 	call	#__system___basic_print_char
13188     FD 2E 02 F6 | 	mov	local09, result1
1318c     FD 26 02 F1 | 	add	local05, result1
13190     00 12 06 F6 | 	mov	arg01, #0
13194     50 B5 B0 FD | 	call	#__system___getiolock_0423
13198     FD 00 68 FC | 	wrlong	#0, result1
1319c     00 FA 05 F6 | 	mov	result1, #0
131a0     00 30 06 F6 | 	mov	local10, #0
131a4                 | LR__1496
131a4                 | LR__1497
131a4                 | ' if r=print_mod_semicolon then 
131a4     22 24 0E F2 | 	cmp	local04, #34 wz
131a8     1C 01 90 5D |  if_ne	jmp	#LR__1502
131ac                 | '   if t1.result_type=result_int then print t1.result.iresult;
131ac     1C 22 0E F2 | 	cmp	local03, #28 wz
131b0     50 00 90 5D |  if_ne	jmp	#LR__1498
131b4     00 12 06 F6 | 	mov	arg01, #0
131b8     2C B5 B0 FD | 	call	#__system___getiolock_0423
131bc     FD 12 02 F6 | 	mov	arg01, result1
131c0     20 5C B0 FD | 	call	#__system___lockmem
131c4     00 28 06 F6 | 	mov	local06, #0
131c8     00 30 06 F6 | 	mov	local10, #0
131cc     0A 2C 06 F6 | 	mov	local08, #10
131d0     00 12 06 F6 | 	mov	arg01, #0
131d4     0F 15 02 F6 | 	mov	arg02, local01
131d8     00 16 06 F6 | 	mov	arg03, #0
131dc     0A 18 06 F6 | 	mov	arg04, #10
131e0     38 69 B0 FD | 	call	#__system___basic_print_integer
131e4     FD 2A 02 F6 | 	mov	local07, result1
131e8     14 27 02 F6 | 	mov	local05, local06
131ec     15 27 02 F1 | 	add	local05, local07
131f0     00 12 06 F6 | 	mov	arg01, #0
131f4     F0 B4 B0 FD | 	call	#__system___getiolock_0423
131f8     FD 00 68 FC | 	wrlong	#0, result1
131fc     00 FA 05 F6 | 	mov	result1, #0
13200     00 2E 06 F6 | 	mov	local09, #0
13204                 | LR__1498
13204                 | '   if t1.result_type=result_uint then print t1.result.uresult;
13204     1D 22 0E F2 | 	cmp	local03, #29 wz
13208     50 00 90 5D |  if_ne	jmp	#LR__1499
1320c     00 12 06 F6 | 	mov	arg01, #0
13210     D4 B4 B0 FD | 	call	#__system___getiolock_0423
13214     FD 12 02 F6 | 	mov	arg01, result1
13218     C8 5B B0 FD | 	call	#__system___lockmem
1321c     00 28 06 F6 | 	mov	local06, #0
13220     00 30 06 F6 | 	mov	local10, #0
13224     0A 2C 06 F6 | 	mov	local08, #10
13228     00 12 06 F6 | 	mov	arg01, #0
1322c     0F 15 02 F6 | 	mov	arg02, local01
13230     00 16 06 F6 | 	mov	arg03, #0
13234     0A 18 06 F6 | 	mov	arg04, #10
13238     20 69 B0 FD | 	call	#__system___basic_print_unsigned
1323c     FD 2A 02 F6 | 	mov	local07, result1
13240     14 27 02 F6 | 	mov	local05, local06
13244     15 27 02 F1 | 	add	local05, local07
13248     00 12 06 F6 | 	mov	arg01, #0
1324c     98 B4 B0 FD | 	call	#__system___getiolock_0423
13250     FD 00 68 FC | 	wrlong	#0, result1
13254     00 FA 05 F6 | 	mov	result1, #0
13258     00 2E 06 F6 | 	mov	local09, #0
1325c                 | LR__1499
1325c                 | '   if t1.result_type=result_float then print t1.result.fresult;
1325c     1E 22 0E F2 | 	cmp	local03, #30 wz
13260     30 00 90 5D |  if_ne	jmp	#LR__1500
13264     00 12 06 F6 | 	mov	arg01, #0
13268     7C B4 B0 FD | 	call	#__system___getiolock_0423
1326c     FD 12 02 F6 | 	mov	arg01, result1
13270     70 5B B0 FD | 	call	#__system___lockmem
13274     00 12 06 F6 | 	mov	arg01, #0
13278     0F 15 02 F6 | 	mov	arg02, local01
1327c     00 16 06 F6 | 	mov	arg03, #0
13280     23 18 06 F6 | 	mov	arg04, #35
13284     60 8C B0 FD | 	call	#__system___basic_print_float
13288     00 12 06 F6 | 	mov	arg01, #0
1328c     58 B4 B0 FD | 	call	#__system___getiolock_0423
13290     FD 00 68 FC | 	wrlong	#0, result1
13294                 | LR__1500
13294                 | '   if t1.result_type=result_string then print t1.result.sresult;
13294     1F 22 0E F2 | 	cmp	local03, #31 wz
13298     2C 00 90 5D |  if_ne	jmp	#LR__1501
1329c     00 12 06 F6 | 	mov	arg01, #0
132a0     44 B4 B0 FD | 	call	#__system___getiolock_0423
132a4     FD 12 02 F6 | 	mov	arg01, result1
132a8     38 5B B0 FD | 	call	#__system___lockmem
132ac     00 12 06 F6 | 	mov	arg01, #0
132b0     0F 15 02 F6 | 	mov	arg02, local01
132b4     00 16 06 F6 | 	mov	arg03, #0
132b8     1C 68 B0 FD | 	call	#__system___basic_print_string
132bc     00 12 06 F6 | 	mov	arg01, #0
132c0     24 B4 B0 FD | 	call	#__system___getiolock_0423
132c4     FD 00 68 FC | 	wrlong	#0, result1
132c8                 | LR__1501
132c8                 | LR__1502
132c8                 | ' if r=0 then 
132c8     00 24 0E F2 | 	cmp	local04, #0 wz
132cc     1C 01 90 5D |  if_ne	jmp	#LR__1507
132d0                 | '   if t1.result_type=result_int then print t1.result.iresult
132d0     1C 22 0E F2 | 	cmp	local03, #28 wz
132d4     40 00 90 5D |  if_ne	jmp	#LR__1503
132d8     00 12 06 F6 | 	mov	arg01, #0
132dc     08 B4 B0 FD | 	call	#__system___getiolock_0423
132e0     FD 12 02 F6 | 	mov	arg01, result1
132e4     FC 5A B0 FD | 	call	#__system___lockmem
132e8     00 12 06 F6 | 	mov	arg01, #0
132ec     0F 15 02 F6 | 	mov	arg02, local01
132f0     00 16 06 F6 | 	mov	arg03, #0
132f4     0A 18 06 F6 | 	mov	arg04, #10
132f8     20 68 B0 FD | 	call	#__system___basic_print_integer
132fc     00 12 06 F6 | 	mov	arg01, #0
13300     0A 14 06 F6 | 	mov	arg02, #10
13304     00 16 06 F6 | 	mov	arg03, #0
13308     74 67 B0 FD | 	call	#__system___basic_print_char
1330c     00 12 06 F6 | 	mov	arg01, #0
13310     D4 B3 B0 FD | 	call	#__system___getiolock_0423
13314     FD 00 68 FC | 	wrlong	#0, result1
13318                 | LR__1503
13318                 | '   if t1.result_type=result_uint then print t1.result.uresult
13318     1D 22 0E F2 | 	cmp	local03, #29 wz
1331c     40 00 90 5D |  if_ne	jmp	#LR__1504
13320     00 12 06 F6 | 	mov	arg01, #0
13324     C0 B3 B0 FD | 	call	#__system___getiolock_0423
13328     FD 12 02 F6 | 	mov	arg01, result1
1332c     B4 5A B0 FD | 	call	#__system___lockmem
13330     00 12 06 F6 | 	mov	arg01, #0
13334     0F 15 02 F6 | 	mov	arg02, local01
13338     00 16 06 F6 | 	mov	arg03, #0
1333c     0A 18 06 F6 | 	mov	arg04, #10
13340     18 68 B0 FD | 	call	#__system___basic_print_unsigned
13344     00 12 06 F6 | 	mov	arg01, #0
13348     0A 14 06 F6 | 	mov	arg02, #10
1334c     00 16 06 F6 | 	mov	arg03, #0
13350     2C 67 B0 FD | 	call	#__system___basic_print_char
13354     00 12 06 F6 | 	mov	arg01, #0
13358     8C B3 B0 FD | 	call	#__system___getiolock_0423
1335c     FD 00 68 FC | 	wrlong	#0, result1
13360                 | LR__1504
13360                 | '   if t1.result_type=result_float then print t1.result.fresult
13360     1E 22 0E F2 | 	cmp	local03, #30 wz
13364     40 00 90 5D |  if_ne	jmp	#LR__1505
13368     00 12 06 F6 | 	mov	arg01, #0
1336c     78 B3 B0 FD | 	call	#__system___getiolock_0423
13370     FD 12 02 F6 | 	mov	arg01, result1
13374     6C 5A B0 FD | 	call	#__system___lockmem
13378     00 12 06 F6 | 	mov	arg01, #0
1337c     0F 15 02 F6 | 	mov	arg02, local01
13380     00 16 06 F6 | 	mov	arg03, #0
13384     23 18 06 F6 | 	mov	arg04, #35
13388     5C 8B B0 FD | 	call	#__system___basic_print_float
1338c     00 12 06 F6 | 	mov	arg01, #0
13390     0A 14 06 F6 | 	mov	arg02, #10
13394     00 16 06 F6 | 	mov	arg03, #0
13398     E4 66 B0 FD | 	call	#__system___basic_print_char
1339c     00 12 06 F6 | 	mov	arg01, #0
133a0     44 B3 B0 FD | 	call	#__system___getiolock_0423
133a4     FD 00 68 FC | 	wrlong	#0, result1
133a8                 | LR__1505
133a8                 | '   if t1.result_type=result_string then print t1.result.sresult
133a8     1F 22 0E F2 | 	cmp	local03, #31 wz
133ac     3C 00 90 5D |  if_ne	jmp	#LR__1506
133b0     00 12 06 F6 | 	mov	arg01, #0
133b4     30 B3 B0 FD | 	call	#__system___getiolock_0423
133b8     FD 12 02 F6 | 	mov	arg01, result1
133bc     24 5A B0 FD | 	call	#__system___lockmem
133c0     00 12 06 F6 | 	mov	arg01, #0
133c4     0F 15 02 F6 | 	mov	arg02, local01
133c8     00 16 06 F6 | 	mov	arg03, #0
133cc     08 67 B0 FD | 	call	#__system___basic_print_string
133d0     00 12 06 F6 | 	mov	arg01, #0
133d4     0A 14 06 F6 | 	mov	arg02, #10
133d8     00 16 06 F6 | 	mov	arg03, #0
133dc     A0 66 B0 FD | 	call	#__system___basic_print_char
133e0     00 12 06 F6 | 	mov	arg01, #0
133e4     00 B3 B0 FD | 	call	#__system___getiolock_0423
133e8     FD 00 68 FC | 	wrlong	#0, result1
133ec                 | LR__1506
133ec                 | LR__1507
133ec                 | ' if r=print_mod_empty then print
133ec     20 24 0E F2 | 	cmp	local04, #32 wz
133f0     2C 00 90 5D |  if_ne	jmp	#LR__1508
133f4     00 12 06 F6 | 	mov	arg01, #0
133f8     EC B2 B0 FD | 	call	#__system___getiolock_0423
133fc     FD 12 02 F6 | 	mov	arg01, result1
13400     E0 59 B0 FD | 	call	#__system___lockmem
13404     00 12 06 F6 | 	mov	arg01, #0
13408     0A 14 06 F6 | 	mov	arg02, #10
1340c     00 16 06 F6 | 	mov	arg03, #0
13410     6C 66 B0 FD | 	call	#__system___basic_print_char
13414     00 12 06 F6 | 	mov	arg01, #0
13418     CC B2 B0 FD | 	call	#__system___getiolock_0423
1341c     FD 00 68 FC | 	wrlong	#0, result1
13420                 | LR__1508
13420                 | LR__1509
13420     A7 F0 03 F6 | 	mov	ptra, fp
13424     B2 00 A0 FD | 	call	#popregs_
13428                 | _do_print_ret
13428     2D 00 64 FD | 	ret
1342c                 | 
1342c                 | ' 
1342c                 | ' 
1342c                 | ' sub do_paper
1342c                 | _do_paper
1342c     03 4A 05 F6 | 	mov	COUNT_, #3
13430     A8 00 A0 FD | 	call	#pushregs_
13434     B8 64 BF FD | 	call	#_pop
13438     FD 1E 02 F6 | 	mov	local01, result1
1343c     FE 20 02 F6 | 	mov	local02, result2
13440     FF 22 02 F6 | 	mov	local03, result3
13444                 | ' t1=pop() 
13444                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13444     1E 22 0E F2 | 	cmp	local03, #30 wz
13448     10 00 90 5D |  if_ne	jmp	#LR__1510
1344c     0F 13 02 F6 | 	mov	arg01, local01
13450     00 14 06 F6 | 	mov	arg02, #0
13454     40 89 B0 FD | 	call	#__system___float_tointeger
13458     FD 1E 02 F6 | 	mov	local01, result1
1345c                 | LR__1510
1345c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1345c     1F 22 0E F2 | 	cmp	local03, #31 wz
13460     18 00 90 5D |  if_ne	jmp	#LR__1511
13464     0F 13 02 F6 | 	mov	arg01, local01
13468     4C 8C B0 FD | 	call	#__system____builtin_atof
1346c     FD 12 02 F6 | 	mov	arg01, result1
13470     00 14 06 F6 | 	mov	arg02, #0
13474     20 89 B0 FD | 	call	#__system___float_tointeger
13478     FD 1E 02 F6 | 	mov	local01, result1
1347c                 | LR__1511
1347c     56 00 00 FF 
13480     0C E5 05 F1 | 	add	objptr, ##44300
13484     F2 1E 62 FC | 	wrlong	local01, objptr
13488     04 E4 05 F1 | 	add	objptr, #4
1348c     F2 12 02 FB | 	rdlong	arg01, objptr
13490                 | ' 
13490                 | ' write_color:=ff
13490     56 00 00 FF 
13494     D3 E4 85 F1 | 	sub	objptr, ##44243
13498     F2 12 62 FC | 	wrlong	arg01, objptr
1349c                 | ' write_background:=bb
1349c     04 E4 05 F1 | 	add	objptr, #4
134a0     F2 1E 62 FC | 	wrlong	local01, objptr
134a4     41 E4 85 F1 | 	sub	objptr, #65
134a8     A7 F0 03 F6 | 	mov	ptra, fp
134ac     B2 00 A0 FD | 	call	#popregs_
134b0                 | _do_paper_ret
134b0     2D 00 64 FD | 	ret
134b4                 | 
134b4                 | ' 
134b4                 | ' sub do_ink
134b4                 | _do_ink
134b4     03 4A 05 F6 | 	mov	COUNT_, #3
134b8     A8 00 A0 FD | 	call	#pushregs_
134bc     30 64 BF FD | 	call	#_pop
134c0     FD 1E 02 F6 | 	mov	local01, result1
134c4     FE 20 02 F6 | 	mov	local02, result2
134c8     FF 22 02 F6 | 	mov	local03, result3
134cc                 | ' t1=pop() 
134cc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
134cc     1E 22 0E F2 | 	cmp	local03, #30 wz
134d0     10 00 90 5D |  if_ne	jmp	#LR__1520
134d4     0F 13 02 F6 | 	mov	arg01, local01
134d8     00 14 06 F6 | 	mov	arg02, #0
134dc     B8 88 B0 FD | 	call	#__system___float_tointeger
134e0     FD 1E 02 F6 | 	mov	local01, result1
134e4                 | LR__1520
134e4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
134e4     1F 22 0E F2 | 	cmp	local03, #31 wz
134e8     18 00 90 5D |  if_ne	jmp	#LR__1521
134ec     0F 13 02 F6 | 	mov	arg01, local01
134f0     C4 8B B0 FD | 	call	#__system____builtin_atof
134f4     FD 12 02 F6 | 	mov	arg01, result1
134f8     00 14 06 F6 | 	mov	arg02, #0
134fc     98 88 B0 FD | 	call	#__system___float_tointeger
13500     FD 1E 02 F6 | 	mov	local01, result1
13504                 | LR__1521
13504     56 00 00 FF 
13508     10 E5 05 F1 | 	add	objptr, ##44304
1350c     F2 1E 62 FC | 	wrlong	local01, objptr
13510     04 E4 85 F1 | 	sub	objptr, #4
13514     F2 14 02 FB | 	rdlong	arg02, objptr
13518                 | ' 
13518                 | ' write_color:=ff
13518     56 00 00 FF 
1351c     CF E4 85 F1 | 	sub	objptr, ##44239
13520     F2 1E 62 FC | 	wrlong	local01, objptr
13524                 | ' write_background:=bb
13524     04 E4 05 F1 | 	add	objptr, #4
13528     F2 14 62 FC | 	wrlong	arg02, objptr
1352c     56 00 00 FF 
13530     CF E4 05 F1 | 	add	objptr, ##44239
13534     F2 12 02 FB | 	rdlong	arg01, objptr
13538     56 00 00 FF 
1353c     10 E5 85 F1 | 	sub	objptr, ##44304
13540     14 35 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13544     A7 F0 03 F6 | 	mov	ptra, fp
13548     B2 00 A0 FD | 	call	#popregs_
1354c                 | _do_ink_ret
1354c     2D 00 64 FD | 	ret
13550                 | 
13550                 | ' 
13550                 | ' 
13550                 | ' sub do_font
13550                 | _do_font
13550     03 4A 05 F6 | 	mov	COUNT_, #3
13554     A8 00 A0 FD | 	call	#pushregs_
13558     94 63 BF FD | 	call	#_pop
1355c     FD 1E 02 F6 | 	mov	local01, result1
13560     FE 20 02 F6 | 	mov	local02, result2
13564     FF 22 02 F6 | 	mov	local03, result3
13568                 | ' t1=pop() 
13568                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13568     1E 22 0E F2 | 	cmp	local03, #30 wz
1356c     10 00 90 5D |  if_ne	jmp	#LR__1530
13570     0F 13 02 F6 | 	mov	arg01, local01
13574     00 14 06 F6 | 	mov	arg02, #0
13578     1C 88 B0 FD | 	call	#__system___float_tointeger
1357c     FD 1E 02 F6 | 	mov	local01, result1
13580                 | LR__1530
13580                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13580     1F 22 0E F2 | 	cmp	local03, #31 wz
13584     18 00 90 5D |  if_ne	jmp	#LR__1531
13588     0F 13 02 F6 | 	mov	arg01, local01
1358c     28 8B B0 FD | 	call	#__system____builtin_atof
13590     FD 12 02 F6 | 	mov	arg01, result1
13594     00 14 06 F6 | 	mov	arg02, #0
13598     FC 87 B0 FD | 	call	#__system___float_tointeger
1359c     FD 1E 02 F6 | 	mov	local01, result1
135a0                 | LR__1531
135a0     56 00 00 FF 
135a4     14 E5 05 F1 | 	add	objptr, ##44308
135a8     F2 1E 62 FC | 	wrlong	local01, objptr
135ac     56 00 00 FF 
135b0     14 E5 85 F1 | 	sub	objptr, ##44308
135b4     02 1E 66 F0 | 	shl	local01, #2
135b8     0F 13 02 F6 | 	mov	arg01, local01
135bc     F8 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
135c0     A7 F0 03 F6 | 	mov	ptra, fp
135c4     B2 00 A0 FD | 	call	#popregs_
135c8                 | _do_font_ret
135c8     2D 00 64 FD | 	ret
135cc                 | 
135cc                 | ' 
135cc                 | ' sub do_mode
135cc                 | _do_mode
135cc     04 4A 05 F6 | 	mov	COUNT_, #4
135d0     A8 00 A0 FD | 	call	#pushregs_
135d4     18 63 BF FD | 	call	#_pop
135d8     FD 1E 02 F6 | 	mov	local01, result1
135dc     FE 20 02 F6 | 	mov	local02, result2
135e0     FF 22 02 F6 | 	mov	local03, result3
135e4                 | ' t1=pop() 
135e4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
135e4     1E 22 0E F2 | 	cmp	local03, #30 wz
135e8     10 00 90 5D |  if_ne	jmp	#LR__1540
135ec     0F 13 02 F6 | 	mov	arg01, local01
135f0     00 14 06 F6 | 	mov	arg02, #0
135f4     A0 87 B0 FD | 	call	#__system___float_tointeger
135f8     FD 1E 02 F6 | 	mov	local01, result1
135fc                 | LR__1540
135fc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
135fc     1F 22 0E F2 | 	cmp	local03, #31 wz
13600     18 00 90 5D |  if_ne	jmp	#LR__1541
13604     0F 13 02 F6 | 	mov	arg01, local01
13608     AC 8A B0 FD | 	call	#__system____builtin_atof
1360c     FD 12 02 F6 | 	mov	arg01, result1
13610     00 14 06 F6 | 	mov	arg02, #0
13614     80 87 B0 FD | 	call	#__system___float_tointeger
13618     FD 1E 02 F6 | 	mov	local01, result1
1361c                 | LR__1541
1361c                 | ' select case t1.result.iresult
1361c     0F 25 02 F6 | 	mov	local04, local01
13620     05 24 26 F3 | 	fle	local04, #5
13624     30 24 62 FD | 	jmprel	local04
13628                 | LR__1542
13628     14 00 90 FD | 	jmp	#LR__1543
1362c     A8 00 90 FD | 	jmp	#LR__1544
13630     10 01 90 FD | 	jmp	#LR__1545
13634     78 01 90 FD | 	jmp	#LR__1546
13638     E0 01 90 FD | 	jmp	#LR__1547
1363c     70 02 90 FD | 	jmp	#LR__1548
13640                 | LR__1543
13640     56 00 00 FF 
13644     14 E5 05 F1 | 	add	objptr, ##44308
13648     F2 02 68 FC | 	wrlong	#1, objptr
1364c     04 E4 85 F1 | 	sub	objptr, #4
13650     F2 34 69 FC | 	wrlong	#154, objptr
13654     22 00 00 FF 
13658     A4 E5 05 F1 | 	add	objptr, ##17828
1365c     F2 02 68 FC | 	wrlong	#1, objptr
13660     22 00 00 FF 
13664     A8 E5 85 F1 | 	sub	objptr, ##17832
13668     F2 26 69 FC | 	wrlong	#147, objptr
1366c     56 00 00 FF 
13670     0C E5 85 F1 | 	sub	objptr, ##44300
13674     04 12 06 F6 | 	mov	arg01, #4
13678     3C 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1367c     56 00 00 FF 
13680     10 E5 05 F1 | 	add	objptr, ##44304
13684     F2 12 02 FB | 	rdlong	arg01, objptr
13688     04 E4 85 F1 | 	sub	objptr, #4
1368c     F2 14 02 FB | 	rdlong	arg02, objptr
13690                 | ' 
13690                 | ' write_color:=ff
13690     56 00 00 FF 
13694     CF E4 85 F1 | 	sub	objptr, ##44239
13698     F2 12 62 FC | 	wrlong	arg01, objptr
1369c                 | ' write_background:=bb
1369c     04 E4 05 F1 | 	add	objptr, #4
136a0     F2 14 62 FC | 	wrlong	arg02, objptr
136a4     01 00 00 FF 
136a8     00 EA 05 F1 | 	add	ptr__dat__, ##512
136ac     7A 00 00 FF 
136b0     17 E5 05 F1 | 	add	objptr, ##62743
136b4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
136b8     04 E4 85 F1 | 	sub	objptr, #4
136bc     03 00 80 FF 
136c0     F2 28 69 FC | 	wrlong	##1684, objptr
136c4     7A 00 00 FF 
136c8     54 E5 85 F1 | 	sub	objptr, ##62804
136cc     01 00 00 FF 
136d0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
136d4     D8 01 90 FD | 	jmp	#LR__1548
136d8                 | LR__1544
136d8     56 00 00 FF 
136dc     14 E5 05 F1 | 	add	objptr, ##44308
136e0     F2 00 68 FC | 	wrlong	#0, objptr
136e4     04 E4 85 F1 | 	sub	objptr, #4
136e8     F2 2E 68 FC | 	wrlong	#23, objptr
136ec     22 00 00 FF 
136f0     A4 E5 05 F1 | 	add	objptr, ##17828
136f4     F2 00 68 FC | 	wrlong	#0, objptr
136f8     22 00 00 FF 
136fc     A8 E5 85 F1 | 	sub	objptr, ##17832
13700     F2 00 68 FC | 	wrlong	#0, objptr
13704     56 00 00 FF 
13708     0C E5 85 F1 | 	sub	objptr, ##44300
1370c     00 12 06 F6 | 	mov	arg01, #0
13710     A4 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13714     56 00 00 FF 
13718     10 E5 05 F1 | 	add	objptr, ##44304
1371c     F2 12 02 FB | 	rdlong	arg01, objptr
13720     04 E4 85 F1 | 	sub	objptr, #4
13724     F2 14 02 FB | 	rdlong	arg02, objptr
13728                 | ' 
13728                 | ' write_color:=ff
13728     56 00 00 FF 
1372c     CF E4 85 F1 | 	sub	objptr, ##44239
13730     F2 12 62 FC | 	wrlong	arg01, objptr
13734                 | ' write_background:=bb
13734     04 E4 05 F1 | 	add	objptr, #4
13738     F2 14 62 FC | 	wrlong	arg02, objptr
1373c     41 E4 85 F1 | 	sub	objptr, #65
13740     6C 01 90 FD | 	jmp	#LR__1548
13744                 | LR__1545
13744     56 00 00 FF 
13748     14 E5 05 F1 | 	add	objptr, ##44308
1374c     F2 00 68 FC | 	wrlong	#0, objptr
13750     04 E4 85 F1 | 	sub	objptr, #4
13754     F2 6A 69 FC | 	wrlong	#181, objptr
13758     22 00 00 FF 
1375c     A4 E5 05 F1 | 	add	objptr, ##17828
13760     F2 00 68 FC | 	wrlong	#0, objptr
13764     22 00 00 FF 
13768     A8 E5 85 F1 | 	sub	objptr, ##17832
1376c     F2 00 68 FC | 	wrlong	#0, objptr
13770     56 00 00 FF 
13774     0C E5 85 F1 | 	sub	objptr, ##44300
13778     00 12 06 F6 | 	mov	arg01, #0
1377c     38 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13780     56 00 00 FF 
13784     10 E5 05 F1 | 	add	objptr, ##44304
13788     F2 12 02 FB | 	rdlong	arg01, objptr
1378c     04 E4 85 F1 | 	sub	objptr, #4
13790     F2 14 02 FB | 	rdlong	arg02, objptr
13794                 | ' 
13794                 | ' write_color:=ff
13794     56 00 00 FF 
13798     CF E4 85 F1 | 	sub	objptr, ##44239
1379c     F2 12 62 FC | 	wrlong	arg01, objptr
137a0                 | ' write_background:=bb
137a0     04 E4 05 F1 | 	add	objptr, #4
137a4     F2 14 62 FC | 	wrlong	arg02, objptr
137a8     41 E4 85 F1 | 	sub	objptr, #65
137ac     00 01 90 FD | 	jmp	#LR__1548
137b0                 | LR__1546
137b0     56 00 00 FF 
137b4     14 E5 05 F1 | 	add	objptr, ##44308
137b8     F2 00 68 FC | 	wrlong	#0, objptr
137bc     04 E4 85 F1 | 	sub	objptr, #4
137c0     F2 1E 68 FC | 	wrlong	#15, objptr
137c4     22 00 00 FF 
137c8     A4 E5 05 F1 | 	add	objptr, ##17828
137cc     F2 00 68 FC | 	wrlong	#0, objptr
137d0     22 00 00 FF 
137d4     A8 E5 85 F1 | 	sub	objptr, ##17832
137d8     F2 00 68 FC | 	wrlong	#0, objptr
137dc     56 00 00 FF 
137e0     0C E5 85 F1 | 	sub	objptr, ##44300
137e4     00 12 06 F6 | 	mov	arg01, #0
137e8     CC 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
137ec     56 00 00 FF 
137f0     10 E5 05 F1 | 	add	objptr, ##44304
137f4     F2 12 02 FB | 	rdlong	arg01, objptr
137f8     04 E4 85 F1 | 	sub	objptr, #4
137fc     F2 14 02 FB | 	rdlong	arg02, objptr
13800                 | ' 
13800                 | ' write_color:=ff
13800     56 00 00 FF 
13804     CF E4 85 F1 | 	sub	objptr, ##44239
13808     F2 12 62 FC | 	wrlong	arg01, objptr
1380c                 | ' write_background:=bb
1380c     04 E4 05 F1 | 	add	objptr, #4
13810     F2 14 62 FC | 	wrlong	arg02, objptr
13814     41 E4 85 F1 | 	sub	objptr, #65
13818     94 00 90 FD | 	jmp	#LR__1548
1381c                 | LR__1547
1381c     56 00 00 FF 
13820     14 E5 05 F1 | 	add	objptr, ##44308
13824     F2 02 68 FC | 	wrlong	#1, objptr
13828     04 E4 85 F1 | 	sub	objptr, #4
1382c     F2 02 68 FC | 	wrlong	#1, objptr
13830     22 00 00 FF 
13834     A4 E5 05 F1 | 	add	objptr, ##17828
13838     F2 02 68 FC | 	wrlong	#1, objptr
1383c     22 00 00 FF 
13840     A8 E5 85 F1 | 	sub	objptr, ##17832
13844     F2 1C 68 FC | 	wrlong	#14, objptr
13848     56 00 00 FF 
1384c     0C E5 85 F1 | 	sub	objptr, ##44300
13850     04 12 06 F6 | 	mov	arg01, #4
13854     60 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13858     56 00 00 FF 
1385c     10 E5 05 F1 | 	add	objptr, ##44304
13860     F2 12 02 FB | 	rdlong	arg01, objptr
13864     04 E4 85 F1 | 	sub	objptr, #4
13868     F2 14 02 FB | 	rdlong	arg02, objptr
1386c                 | ' 
1386c                 | ' write_color:=ff
1386c     56 00 00 FF 
13870     CF E4 85 F1 | 	sub	objptr, ##44239
13874     F2 12 62 FC | 	wrlong	arg01, objptr
13878                 | ' write_background:=bb
13878     04 E4 05 F1 | 	add	objptr, #4
1387c     F2 14 62 FC | 	wrlong	arg02, objptr
13880     07 00 00 FF 
13884     72 EB 05 F1 | 	add	ptr__dat__, ##3954
13888     7A 00 00 FF 
1388c     17 E5 05 F1 | 	add	objptr, ##62743
13890     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13894     04 E4 85 F1 | 	sub	objptr, #4
13898     03 00 80 FF 
1389c     F2 28 69 FC | 	wrlong	##1684, objptr
138a0     7A 00 00 FF 
138a4     54 E5 85 F1 | 	sub	objptr, ##62804
138a8     07 00 00 FF 
138ac     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
138b0                 | LR__1548
138b0     7A 00 00 FF 
138b4     50 E5 05 F1 | 	add	objptr, ##62800
138b8     F2 1E 62 FC | 	wrlong	local01, objptr
138bc     24 00 00 FF 
138c0     40 E4 85 F1 | 	sub	objptr, ##18496
138c4     F2 12 02 FB | 	rdlong	arg01, objptr
138c8     04 E4 85 F1 | 	sub	objptr, #4
138cc     F2 14 02 FB | 	rdlong	arg02, objptr
138d0     56 00 00 FF 
138d4     0C E5 85 F1 | 	sub	objptr, ##44300
138d8     C4 41 B0 FD | 	call	#_hg010b_spin2_cls
138dc     44 01 00 FF 
138e0     D4 12 06 F6 | 	mov	arg01, ##@LR__4597
138e4                 | ' 
138e4                 | ' write(text)
138e4     74 44 B0 FD | 	call	#_hg010b_spin2_write
138e8                 | ' crlf
138e8     D0 45 B0 FD | 	call	#_hg010b_spin2_crlf
138ec     10 00 00 FF 
138f0     10 EB 05 F1 | 	add	ptr__dat__, ##8464
138f4     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
138f8     10 00 00 FF 
138fc     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
13900                 | ' 
13900                 | ' write(text)
13900     58 44 B0 FD | 	call	#_hg010b_spin2_write
13904                 | ' crlf
13904     B4 45 B0 FD | 	call	#_hg010b_spin2_crlf
13908     79 00 00 FF 
1390c     B0 E4 05 F1 | 	add	objptr, ##62128
13910     F2 12 02 FB | 	rdlong	arg01, objptr
13914     79 00 00 FF 
13918     B0 E4 85 F1 | 	sub	objptr, ##62128
1391c                 | ' 
1391c                 | ' write(text)
1391c     3C 44 B0 FD | 	call	#_hg010b_spin2_write
13920                 | ' crlf
13920     98 45 B0 FD | 	call	#_hg010b_spin2_crlf
13924     A7 F0 03 F6 | 	mov	ptra, fp
13928     B2 00 A0 FD | 	call	#popregs_
1392c                 | _do_mode_ret
1392c     2D 00 64 FD | 	ret
13930                 | 
13930                 | ' 
13930                 | ' 
13930                 | ' 
13930                 | ' sub do_pinwrite
13930                 | _do_pinwrite
13930     01 4A 05 F6 | 	mov	COUNT_, #1
13934     A8 00 A0 FD | 	call	#pushregs_
13938     18 F0 07 F1 | 	add	ptra, #24
1393c     B0 5F BF FD | 	call	#_pop
13940     FD 14 02 F6 | 	mov	arg02, result1
13944     FE 12 02 F6 | 	mov	arg01, result2
13948     FF 1E 02 F6 | 	mov	local01, result3
1394c     A7 14 62 FC | 	wrlong	arg02, fp
13950     04 4E 05 F1 | 	add	fp, #4
13954     A7 12 62 FC | 	wrlong	arg01, fp
13958     04 4E 05 F1 | 	add	fp, #4
1395c     A7 1E 62 FC | 	wrlong	local01, fp
13960     08 4E 85 F1 | 	sub	fp, #8
13964     88 5F BF FD | 	call	#_pop
13968     FF 1E 02 F6 | 	mov	local01, result3
1396c     0C 4E 05 F1 | 	add	fp, #12
13970     A7 FA 61 FC | 	wrlong	result1, fp
13974     04 4E 05 F1 | 	add	fp, #4
13978     A7 FC 61 FC | 	wrlong	result2, fp
1397c     04 4E 05 F1 | 	add	fp, #4
13980     A7 1E 62 FC | 	wrlong	local01, fp
13984     08 4E 85 F1 | 	sub	fp, #8
13988     A7 12 02 F6 | 	mov	arg01, fp
1398c     0C 4E 85 F1 | 	sub	fp, #12
13990     CC D4 BF FD | 	call	#_converttoint
13994     FD 1E 02 F6 | 	mov	local01, result1
13998     A7 12 02 F6 | 	mov	arg01, fp
1399c     C0 D4 BF FD | 	call	#_converttoint
139a0     FD 14 02 F6 | 	mov	arg02, result1
139a4     0F 13 02 F6 | 	mov	arg01, local01
139a8     EC 55 B0 FD | 	call	#__system___pinwrite
139ac     A7 F0 03 F6 | 	mov	ptra, fp
139b0     B2 00 A0 FD | 	call	#popregs_
139b4                 | _do_pinwrite_ret
139b4     2D 00 64 FD | 	ret
139b8                 | 
139b8                 | ' 
139b8                 | ' sub do_pinfloat
139b8                 | _do_pinfloat
139b8     00 4A 05 F6 | 	mov	COUNT_, #0
139bc     A8 00 A0 FD | 	call	#pushregs_
139c0     0C F0 07 F1 | 	add	ptra, #12
139c4     28 5F BF FD | 	call	#_pop
139c8     A7 FA 61 FC | 	wrlong	result1, fp
139cc     04 4E 05 F1 | 	add	fp, #4
139d0     A7 FC 61 FC | 	wrlong	result2, fp
139d4     04 4E 05 F1 | 	add	fp, #4
139d8     A7 FE 61 FC | 	wrlong	result3, fp
139dc     08 4E 85 F1 | 	sub	fp, #8
139e0     A7 12 02 F6 | 	mov	arg01, fp
139e4     78 D4 BF FD | 	call	#_converttoint
139e8     50 FA 61 FD | 	fltl	result1
139ec     A7 F0 03 F6 | 	mov	ptra, fp
139f0     B2 00 A0 FD | 	call	#popregs_
139f4                 | _do_pinfloat_ret
139f4     2D 00 64 FD | 	ret
139f8                 | 
139f8                 | ' 
139f8                 | ' sub do_pinlo
139f8                 | _do_pinlo
139f8     00 4A 05 F6 | 	mov	COUNT_, #0
139fc     A8 00 A0 FD | 	call	#pushregs_
13a00     0C F0 07 F1 | 	add	ptra, #12
13a04     E8 5E BF FD | 	call	#_pop
13a08     A7 FA 61 FC | 	wrlong	result1, fp
13a0c     04 4E 05 F1 | 	add	fp, #4
13a10     A7 FC 61 FC | 	wrlong	result2, fp
13a14     04 4E 05 F1 | 	add	fp, #4
13a18     A7 FE 61 FC | 	wrlong	result3, fp
13a1c     08 4E 85 F1 | 	sub	fp, #8
13a20     A7 12 02 F6 | 	mov	arg01, fp
13a24     38 D4 BF FD | 	call	#_converttoint
13a28     58 FA 61 FD | 	drvl	result1
13a2c     A7 F0 03 F6 | 	mov	ptra, fp
13a30     B2 00 A0 FD | 	call	#popregs_
13a34                 | _do_pinlo_ret
13a34     2D 00 64 FD | 	ret
13a38                 | 
13a38                 | ' 
13a38                 | ' sub do_pinhi
13a38                 | _do_pinhi
13a38     00 4A 05 F6 | 	mov	COUNT_, #0
13a3c     A8 00 A0 FD | 	call	#pushregs_
13a40     0C F0 07 F1 | 	add	ptra, #12
13a44     A8 5E BF FD | 	call	#_pop
13a48     A7 FA 61 FC | 	wrlong	result1, fp
13a4c     04 4E 05 F1 | 	add	fp, #4
13a50     A7 FC 61 FC | 	wrlong	result2, fp
13a54     04 4E 05 F1 | 	add	fp, #4
13a58     A7 FE 61 FC | 	wrlong	result3, fp
13a5c     08 4E 85 F1 | 	sub	fp, #8
13a60     A7 12 02 F6 | 	mov	arg01, fp
13a64     F8 D3 BF FD | 	call	#_converttoint
13a68     59 FA 61 FD | 	drvh	result1
13a6c     A7 F0 03 F6 | 	mov	ptra, fp
13a70     B2 00 A0 FD | 	call	#popregs_
13a74                 | _do_pinhi_ret
13a74     2D 00 64 FD | 	ret
13a78                 | 
13a78                 | ' 
13a78                 | ' sub do_pintoggle
13a78                 | _do_pintoggle
13a78     00 4A 05 F6 | 	mov	COUNT_, #0
13a7c     A8 00 A0 FD | 	call	#pushregs_
13a80     0C F0 07 F1 | 	add	ptra, #12
13a84     68 5E BF FD | 	call	#_pop
13a88     A7 FA 61 FC | 	wrlong	result1, fp
13a8c     04 4E 05 F1 | 	add	fp, #4
13a90     A7 FC 61 FC | 	wrlong	result2, fp
13a94     04 4E 05 F1 | 	add	fp, #4
13a98     A7 FE 61 FC | 	wrlong	result3, fp
13a9c     08 4E 85 F1 | 	sub	fp, #8
13aa0     A7 12 02 F6 | 	mov	arg01, fp
13aa4     B8 D3 BF FD | 	call	#_converttoint
13aa8     5F FA 61 FD | 	drvnot	result1
13aac     A7 F0 03 F6 | 	mov	ptra, fp
13ab0     B2 00 A0 FD | 	call	#popregs_
13ab4                 | _do_pintoggle_ret
13ab4     2D 00 64 FD | 	ret
13ab8                 | 
13ab8                 | ' 
13ab8                 | ' 
13ab8                 | ' sub do_pinstart
13ab8                 | _do_pinstart
13ab8     03 4A 05 F6 | 	mov	COUNT_, #3
13abc     A8 00 A0 FD | 	call	#pushregs_
13ac0     30 F0 07 F1 | 	add	ptra, #48
13ac4     28 5E BF FD | 	call	#_pop
13ac8     FD 16 02 F6 | 	mov	arg03, result1
13acc     FE 14 02 F6 | 	mov	arg02, result2
13ad0     FF 18 02 F6 | 	mov	arg04, result3
13ad4     A7 16 62 FC | 	wrlong	arg03, fp
13ad8     04 4E 05 F1 | 	add	fp, #4
13adc     A7 14 62 FC | 	wrlong	arg02, fp
13ae0     04 4E 05 F1 | 	add	fp, #4
13ae4     A7 18 62 FC | 	wrlong	arg04, fp
13ae8     08 4E 85 F1 | 	sub	fp, #8
13aec     00 5E BF FD | 	call	#_pop
13af0     FD 16 02 F6 | 	mov	arg03, result1
13af4     FE 14 02 F6 | 	mov	arg02, result2
13af8     FF 18 02 F6 | 	mov	arg04, result3
13afc     0C 4E 05 F1 | 	add	fp, #12
13b00     A7 16 62 FC | 	wrlong	arg03, fp
13b04     04 4E 05 F1 | 	add	fp, #4
13b08     A7 14 62 FC | 	wrlong	arg02, fp
13b0c     04 4E 05 F1 | 	add	fp, #4
13b10     A7 18 62 FC | 	wrlong	arg04, fp
13b14     14 4E 85 F1 | 	sub	fp, #20
13b18     D4 5D BF FD | 	call	#_pop
13b1c     FD 16 02 F6 | 	mov	arg03, result1
13b20     FE 14 02 F6 | 	mov	arg02, result2
13b24     FF 18 02 F6 | 	mov	arg04, result3
13b28     18 4E 05 F1 | 	add	fp, #24
13b2c     A7 16 62 FC | 	wrlong	arg03, fp
13b30     04 4E 05 F1 | 	add	fp, #4
13b34     A7 14 62 FC | 	wrlong	arg02, fp
13b38     04 4E 05 F1 | 	add	fp, #4
13b3c     A7 18 62 FC | 	wrlong	arg04, fp
13b40     20 4E 85 F1 | 	sub	fp, #32
13b44     A8 5D BF FD | 	call	#_pop
13b48     FF 16 02 F6 | 	mov	arg03, result3
13b4c     24 4E 05 F1 | 	add	fp, #36
13b50     A7 FA 61 FC | 	wrlong	result1, fp
13b54     04 4E 05 F1 | 	add	fp, #4
13b58     A7 FC 61 FC | 	wrlong	result2, fp
13b5c     04 4E 05 F1 | 	add	fp, #4
13b60     A7 16 62 FC | 	wrlong	arg03, fp
13b64     08 4E 85 F1 | 	sub	fp, #8
13b68     A7 12 02 F6 | 	mov	arg01, fp
13b6c     24 4E 85 F1 | 	sub	fp, #36
13b70     EC D2 BF FD | 	call	#_converttoint
13b74     FD 1E 02 F6 | 	mov	local01, result1
13b78     18 4E 05 F1 | 	add	fp, #24
13b7c     A7 12 02 F6 | 	mov	arg01, fp
13b80     18 4E 85 F1 | 	sub	fp, #24
13b84     D8 D2 BF FD | 	call	#_converttoint
13b88     FD 20 02 F6 | 	mov	local02, result1
13b8c     0C 4E 05 F1 | 	add	fp, #12
13b90     A7 12 02 F6 | 	mov	arg01, fp
13b94     0C 4E 85 F1 | 	sub	fp, #12
13b98     C4 D2 BF FD | 	call	#_converttoint
13b9c     FD 22 02 F6 | 	mov	local03, result1
13ba0     A7 12 02 F6 | 	mov	arg01, fp
13ba4     B8 D2 BF FD | 	call	#_converttoint
13ba8     40 1E 62 FD | 	dirl	local01
13bac     0F 21 02 FC | 	wrpin	local02, local01
13bb0     0F 23 12 FC | 	wxpin	local03, local01
13bb4     0F FB 21 FC | 	wypin	result1, local01
13bb8     41 1E 62 FD | 	dirh	local01
13bbc     A7 F0 03 F6 | 	mov	ptra, fp
13bc0     B2 00 A0 FD | 	call	#popregs_
13bc4                 | _do_pinstart_ret
13bc4     2D 00 64 FD | 	ret
13bc8                 | 
13bc8                 | ' 
13bc8                 | ' 
13bc8                 | ' sub do_wrpin
13bc8                 | _do_wrpin
13bc8     01 4A 05 F6 | 	mov	COUNT_, #1
13bcc     A8 00 A0 FD | 	call	#pushregs_
13bd0     18 F0 07 F1 | 	add	ptra, #24
13bd4     18 5D BF FD | 	call	#_pop
13bd8     FD 14 02 F6 | 	mov	arg02, result1
13bdc     FE 12 02 F6 | 	mov	arg01, result2
13be0     FF 1E 02 F6 | 	mov	local01, result3
13be4     A7 14 62 FC | 	wrlong	arg02, fp
13be8     04 4E 05 F1 | 	add	fp, #4
13bec     A7 12 62 FC | 	wrlong	arg01, fp
13bf0     04 4E 05 F1 | 	add	fp, #4
13bf4     A7 1E 62 FC | 	wrlong	local01, fp
13bf8     08 4E 85 F1 | 	sub	fp, #8
13bfc     F0 5C BF FD | 	call	#_pop
13c00     FF 1E 02 F6 | 	mov	local01, result3
13c04     0C 4E 05 F1 | 	add	fp, #12
13c08     A7 FA 61 FC | 	wrlong	result1, fp
13c0c     04 4E 05 F1 | 	add	fp, #4
13c10     A7 FC 61 FC | 	wrlong	result2, fp
13c14     04 4E 05 F1 | 	add	fp, #4
13c18     A7 1E 62 FC | 	wrlong	local01, fp
13c1c     08 4E 85 F1 | 	sub	fp, #8
13c20     A7 12 02 F6 | 	mov	arg01, fp
13c24     0C 4E 85 F1 | 	sub	fp, #12
13c28     34 D2 BF FD | 	call	#_converttoint
13c2c     FD 1E 02 F6 | 	mov	local01, result1
13c30     A7 12 02 F6 | 	mov	arg01, fp
13c34     28 D2 BF FD | 	call	#_converttoint
13c38     0F FB 01 FC | 	wrpin	result1, local01
13c3c     A7 F0 03 F6 | 	mov	ptra, fp
13c40     B2 00 A0 FD | 	call	#popregs_
13c44                 | _do_wrpin_ret
13c44     2D 00 64 FD | 	ret
13c48                 | 
13c48                 | ' 
13c48                 | ' sub do_wxpin
13c48                 | _do_wxpin
13c48     01 4A 05 F6 | 	mov	COUNT_, #1
13c4c     A8 00 A0 FD | 	call	#pushregs_
13c50     18 F0 07 F1 | 	add	ptra, #24
13c54     98 5C BF FD | 	call	#_pop
13c58     FD 14 02 F6 | 	mov	arg02, result1
13c5c     FE 12 02 F6 | 	mov	arg01, result2
13c60     FF 1E 02 F6 | 	mov	local01, result3
13c64     A7 14 62 FC | 	wrlong	arg02, fp
13c68     04 4E 05 F1 | 	add	fp, #4
13c6c     A7 12 62 FC | 	wrlong	arg01, fp
13c70     04 4E 05 F1 | 	add	fp, #4
13c74     A7 1E 62 FC | 	wrlong	local01, fp
13c78     08 4E 85 F1 | 	sub	fp, #8
13c7c     70 5C BF FD | 	call	#_pop
13c80     FF 1E 02 F6 | 	mov	local01, result3
13c84     0C 4E 05 F1 | 	add	fp, #12
13c88     A7 FA 61 FC | 	wrlong	result1, fp
13c8c     04 4E 05 F1 | 	add	fp, #4
13c90     A7 FC 61 FC | 	wrlong	result2, fp
13c94     04 4E 05 F1 | 	add	fp, #4
13c98     A7 1E 62 FC | 	wrlong	local01, fp
13c9c     08 4E 85 F1 | 	sub	fp, #8
13ca0     A7 12 02 F6 | 	mov	arg01, fp
13ca4     0C 4E 85 F1 | 	sub	fp, #12
13ca8     B4 D1 BF FD | 	call	#_converttoint
13cac     FD 1E 02 F6 | 	mov	local01, result1
13cb0     A7 12 02 F6 | 	mov	arg01, fp
13cb4     A8 D1 BF FD | 	call	#_converttoint
13cb8     0F FB 11 FC | 	wxpin	result1, local01
13cbc     A7 F0 03 F6 | 	mov	ptra, fp
13cc0     B2 00 A0 FD | 	call	#popregs_
13cc4                 | _do_wxpin_ret
13cc4     2D 00 64 FD | 	ret
13cc8                 | 
13cc8                 | ' 
13cc8                 | ' sub do_wypin
13cc8                 | _do_wypin
13cc8     01 4A 05 F6 | 	mov	COUNT_, #1
13ccc     A8 00 A0 FD | 	call	#pushregs_
13cd0     18 F0 07 F1 | 	add	ptra, #24
13cd4     18 5C BF FD | 	call	#_pop
13cd8     FD 14 02 F6 | 	mov	arg02, result1
13cdc     FE 12 02 F6 | 	mov	arg01, result2
13ce0     FF 1E 02 F6 | 	mov	local01, result3
13ce4     A7 14 62 FC | 	wrlong	arg02, fp
13ce8     04 4E 05 F1 | 	add	fp, #4
13cec     A7 12 62 FC | 	wrlong	arg01, fp
13cf0     04 4E 05 F1 | 	add	fp, #4
13cf4     A7 1E 62 FC | 	wrlong	local01, fp
13cf8     08 4E 85 F1 | 	sub	fp, #8
13cfc     F0 5B BF FD | 	call	#_pop
13d00     FF 1E 02 F6 | 	mov	local01, result3
13d04     0C 4E 05 F1 | 	add	fp, #12
13d08     A7 FA 61 FC | 	wrlong	result1, fp
13d0c     04 4E 05 F1 | 	add	fp, #4
13d10     A7 FC 61 FC | 	wrlong	result2, fp
13d14     04 4E 05 F1 | 	add	fp, #4
13d18     A7 1E 62 FC | 	wrlong	local01, fp
13d1c     08 4E 85 F1 | 	sub	fp, #8
13d20     A7 12 02 F6 | 	mov	arg01, fp
13d24     0C 4E 85 F1 | 	sub	fp, #12
13d28     34 D1 BF FD | 	call	#_converttoint
13d2c     FD 1E 02 F6 | 	mov	local01, result1
13d30     A7 12 02 F6 | 	mov	arg01, fp
13d34     28 D1 BF FD | 	call	#_converttoint
13d38     0F FB 21 FC | 	wypin	result1, local01
13d3c     A7 F0 03 F6 | 	mov	ptra, fp
13d40     B2 00 A0 FD | 	call	#popregs_
13d44                 | _do_wypin_ret
13d44     2D 00 64 FD | 	ret
13d48                 | 
13d48                 | ' 
13d48                 | ' sub do_position
13d48                 | _do_position
13d48     01 4A 05 F6 | 	mov	COUNT_, #1
13d4c     A8 00 A0 FD | 	call	#pushregs_
13d50     18 F0 07 F1 | 	add	ptra, #24
13d54     98 5B BF FD | 	call	#_pop
13d58     FD 14 02 F6 | 	mov	arg02, result1
13d5c     FE 12 02 F6 | 	mov	arg01, result2
13d60     FF 1E 02 F6 | 	mov	local01, result3
13d64     A7 14 62 FC | 	wrlong	arg02, fp
13d68     04 4E 05 F1 | 	add	fp, #4
13d6c     A7 12 62 FC | 	wrlong	arg01, fp
13d70     04 4E 05 F1 | 	add	fp, #4
13d74     A7 1E 62 FC | 	wrlong	local01, fp
13d78     08 4E 85 F1 | 	sub	fp, #8
13d7c     70 5B BF FD | 	call	#_pop
13d80     FF 1E 02 F6 | 	mov	local01, result3
13d84     0C 4E 05 F1 | 	add	fp, #12
13d88     A7 FA 61 FC | 	wrlong	result1, fp
13d8c     04 4E 05 F1 | 	add	fp, #4
13d90     A7 FC 61 FC | 	wrlong	result2, fp
13d94     04 4E 05 F1 | 	add	fp, #4
13d98     A7 1E 62 FC | 	wrlong	local01, fp
13d9c     08 4E 85 F1 | 	sub	fp, #8
13da0     A7 12 02 F6 | 	mov	arg01, fp
13da4     0C 4E 85 F1 | 	sub	fp, #12
13da8     B4 D0 BF FD | 	call	#_converttoint
13dac     FD 1E 02 F6 | 	mov	local01, result1
13db0     A7 12 02 F6 | 	mov	arg01, fp
13db4     A8 D0 BF FD | 	call	#_converttoint
13db8     FD 14 02 F6 | 	mov	arg02, result1
13dbc     0F 13 02 F6 | 	mov	arg01, local01
13dc0     34 3C B0 FD | 	call	#_hg010b_spin2_setcursorpos
13dc4     A7 F0 03 F6 | 	mov	ptra, fp
13dc8     B2 00 A0 FD | 	call	#popregs_
13dcc                 | _do_position_ret
13dcc     2D 00 64 FD | 	ret
13dd0                 | 
13dd0                 | ' 
13dd0                 | ' sub do_waitms
13dd0                 | _do_waitms
13dd0     01 4A 05 F6 | 	mov	COUNT_, #1
13dd4     A8 00 A0 FD | 	call	#pushregs_
13dd8     18 F0 07 F1 | 	add	ptra, #24
13ddc     10 5B BF FD | 	call	#_pop
13de0     A7 FA 61 FC | 	wrlong	result1, fp
13de4     04 4E 05 F1 | 	add	fp, #4
13de8     A7 FC 61 FC | 	wrlong	result2, fp
13dec     04 4E 05 F1 | 	add	fp, #4
13df0     A7 FE 61 FC | 	wrlong	result3, fp
13df4                 | ' 
13df4                 | ' t1=pop() 'value
13df4                 | ' 
13df4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
13df4     08 4E 85 F1 | 	sub	fp, #8
13df8     1C FE 0D F2 | 	cmp	result3, #28 wz
13dfc     08 4E 05 51 |  if_ne	add	fp, #8
13e00     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13e04     08 4E 85 51 |  if_ne	sub	fp, #8
13e08     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
13e0c     A7 12 02 AB |  if_e	rdlong	arg01, fp
13e10     0C 4E 05 A1 |  if_e	add	fp, #12
13e14     A7 12 62 AC |  if_e	wrlong	arg01, fp
13e18     0C 4E 85 A1 |  if_e	sub	fp, #12
13e1c     14 00 90 AD |  if_e	jmp	#LR__1550
13e20     A7 12 02 F6 | 	mov	arg01, fp
13e24     38 D0 BF FD | 	call	#_converttoint
13e28     0C 4E 05 F1 | 	add	fp, #12
13e2c     A7 FA 61 FC | 	wrlong	result1, fp
13e30     0C 4E 85 F1 | 	sub	fp, #12
13e34                 | LR__1550
13e34                 | ' if t<0 then return
13e34     0C 4E 05 F1 | 	add	fp, #12
13e38     A7 12 02 FB | 	rdlong	arg01, fp
13e3c     0C 4E 85 F1 | 	sub	fp, #12
13e40     00 12 56 F2 | 	cmps	arg01, #0 wc
13e44     B8 00 90 CD |  if_b	jmp	#LR__1555
13e48                 | ' if t < 5000 then 
13e48     0C 4E 05 F1 | 	add	fp, #12
13e4c     A7 12 02 FB | 	rdlong	arg01, fp
13e50     0C 4E 85 F1 | 	sub	fp, #12
13e54     09 00 00 FF 
13e58     88 13 56 F2 | 	cmps	arg01, ##5000 wc
13e5c     14 00 90 3D |  if_ae	jmp	#LR__1551
13e60     0C 4E 05 F1 | 	add	fp, #12
13e64     A7 12 02 FB | 	rdlong	arg01, fp
13e68     0C 4E 85 F1 | 	sub	fp, #12
13e6c     68 52 B0 FD | 	call	#__system___waitms
13e70     8C 00 90 FD | 	jmp	#LR__1554
13e74                 | LR__1551
13e74     10 4E 05 F1 | 	add	fp, #16
13e78     A7 02 68 FC | 	wrlong	#1, fp
13e7c     04 4E 85 F1 | 	sub	fp, #4
13e80     A7 12 02 FB | 	rdlong	arg01, fp
13e84     09 13 52 F6 | 	abs	arg01, arg01 wc
13e88     09 00 00 FF 
13e8c     88 13 16 FD | 	qdiv	arg01, ##5000
13e90                 | '   for i=1 to t/5000
13e90     0C 4E 85 F1 | 	sub	fp, #12
13e94     18 1E 62 FD | 	getqx	local01
13e98     0F 1F 82 F6 | 	negc	local01, local01
13e9c     01 1E 06 F1 | 	add	local01, #1
13ea0                 | LR__1552
13ea0     10 4E 05 F1 | 	add	fp, #16
13ea4     A7 12 02 FB | 	rdlong	arg01, fp
13ea8     10 4E 85 F1 | 	sub	fp, #16
13eac     0F 13 52 F2 | 	cmps	arg01, local01 wc
13eb0     28 00 90 3D |  if_ae	jmp	#LR__1553
13eb4     0C 4E 05 F1 | 	add	fp, #12
13eb8     A7 12 02 FB | 	rdlong	arg01, fp
13ebc     0C 4E 85 F1 | 	sub	fp, #12
13ec0     14 52 B0 FD | 	call	#__system___waitms
13ec4     10 4E 05 F1 | 	add	fp, #16
13ec8     A7 12 02 FB | 	rdlong	arg01, fp
13ecc     01 12 06 F1 | 	add	arg01, #1
13ed0     A7 12 62 FC | 	wrlong	arg01, fp
13ed4     10 4E 85 F1 | 	sub	fp, #16
13ed8     C4 FF 9F FD | 	jmp	#LR__1552
13edc                 | LR__1553
13edc     0C 4E 05 F1 | 	add	fp, #12
13ee0     A7 1E 02 FB | 	rdlong	local01, fp
13ee4     0F 1F 52 F6 | 	abs	local01, local01 wc
13ee8     09 00 00 FF 
13eec     88 1F 16 FD | 	qdiv	local01, ##5000
13ef0     0C 4E 85 F1 | 	sub	fp, #12
13ef4     19 1E 62 FD | 	getqy	local01
13ef8     0F 13 82 F6 | 	negc	arg01, local01
13efc     D8 51 B0 FD | 	call	#__system___waitms
13f00                 | LR__1554
13f00                 | LR__1555
13f00     A7 F0 03 F6 | 	mov	ptra, fp
13f04     B2 00 A0 FD | 	call	#popregs_
13f08                 | _do_waitms_ret
13f08     2D 00 64 FD | 	ret
13f0c                 | 
13f0c                 | ' 
13f0c                 | ' sub do_waitvbl
13f0c                 | _do_waitvbl
13f0c     01 12 06 F6 | 	mov	arg01, #1
13f10     1C 3B B0 FD | 	call	#_hg010b_spin2_waitvbl
13f14                 | _do_waitvbl_ret
13f14     2D 00 64 FD | 	ret
13f18                 | 
13f18                 | ' 
13f18                 | ' sub do_waitclock
13f18                 | _do_waitclock
13f18     7A 00 00 FF 
13f1c     48 E5 05 F1 | 	add	objptr, ##62792
13f20     F2 00 02 FB | 	rdlong	_var01, objptr
13f24                 | ' c=hkcnt
13f24                 | ' do: loop until hkcnt<>c
13f24                 | LR__1560
13f24     F2 02 02 FB | 	rdlong	_var02, objptr
13f28     00 03 0A F2 | 	cmp	_var02, _var01 wz
13f2c     F4 FF 9F AD |  if_e	jmp	#LR__1560
13f30     7A 00 00 FF 
13f34     48 E5 85 F1 | 	sub	objptr, ##62792
13f38                 | _do_waitclock_ret
13f38     2D 00 64 FD | 	ret
13f3c                 | 
13f3c                 | ' 
13f3c                 | ' sub do_dir
13f3c                 | _do_dir
13f3c     03 4A 05 F6 | 	mov	COUNT_, #3
13f40     A8 00 A0 FD | 	call	#pushregs_
13f44     44 01 00 FF 
13f48     D5 12 06 F6 | 	mov	arg01, ##@LR__4598
13f4c     20 55 B0 FD | 	call	#__system___chdir
13f50                 | ' chdir("/sd/bas")       ' set working directory
13f50                 | ' print "Working directory: "; currentdir$ 
13f50     00 12 06 F6 | 	mov	arg01, #0
13f54     90 A7 B0 FD | 	call	#__system___getiolock_0423
13f58     FD 12 02 F6 | 	mov	arg01, result1
13f5c     84 4E B0 FD | 	call	#__system___lockmem
13f60     44 01 00 FF 
13f64     DD 14 06 F6 | 	mov	arg02, ##@LR__4599
13f68     00 12 06 F6 | 	mov	arg01, #0
13f6c     00 16 06 F6 | 	mov	arg03, #0
13f70     64 5B B0 FD | 	call	#__system___basic_print_string
13f74     71 00 00 FF 
13f78     68 E5 05 F1 | 	add	objptr, ##58216
13f7c     F2 14 02 FB | 	rdlong	arg02, objptr
13f80     71 00 00 FF 
13f84     68 E5 85 F1 | 	sub	objptr, ##58216
13f88     00 12 06 F6 | 	mov	arg01, #0
13f8c     00 16 06 F6 | 	mov	arg03, #0
13f90     44 5B B0 FD | 	call	#__system___basic_print_string
13f94     00 12 06 F6 | 	mov	arg01, #0
13f98     0A 14 06 F6 | 	mov	arg02, #10
13f9c     00 16 06 F6 | 	mov	arg03, #0
13fa0     DC 5A B0 FD | 	call	#__system___basic_print_char
13fa4     00 12 06 F6 | 	mov	arg01, #0
13fa8     3C A7 B0 FD | 	call	#__system___getiolock_0423
13fac     FD 00 68 FC | 	wrlong	#0, result1
13fb0     44 01 00 FF 
13fb4     F1 12 06 F6 | 	mov	arg01, ##@LR__4600
13fb8     10 14 06 F6 | 	mov	arg02, #16
13fbc     60 A8 B0 FD | 	call	#__system___basic_dir
13fc0     FD 1E 02 F6 | 	mov	local01, result1
13fc4                 | ' 
13fc4                 | ' filename=dir$("*", fbDirectory)
13fc4                 | ' while filename <> "" and filename <> nil
13fc4                 | LR__1570
13fc4     00 20 06 F6 | 	mov	local02, #0
13fc8     44 01 00 FF 
13fcc     F3 14 06 F6 | 	mov	arg02, ##@LR__4601
13fd0     0F 13 02 F6 | 	mov	arg01, local01
13fd4     34 4E B0 FD | 	call	#__system___string_cmp
13fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
13fdc     00 20 26 56 |  if_ne	not	local02, #0
13fe0     00 22 06 F6 | 	mov	local03, #0
13fe4     0F 13 02 F6 | 	mov	arg01, local01
13fe8     00 14 06 F6 | 	mov	arg02, #0
13fec     1C 4E B0 FD | 	call	#__system___string_cmp
13ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
13ff4     00 22 26 56 |  if_ne	not	local03, #0
13ff8     11 21 CA F7 | 	test	local02, local03 wz
13ffc     64 00 90 AD |  if_e	jmp	#LR__1571
14000                 | '   print "[dir] ";filename
14000     00 12 06 F6 | 	mov	arg01, #0
14004     E0 A6 B0 FD | 	call	#__system___getiolock_0423
14008     FD 12 02 F6 | 	mov	arg01, result1
1400c     D4 4D B0 FD | 	call	#__system___lockmem
14010     44 01 00 FF 
14014     F4 14 06 F6 | 	mov	arg02, ##@LR__4602
14018     00 12 06 F6 | 	mov	arg01, #0
1401c     00 16 06 F6 | 	mov	arg03, #0
14020     B4 5A B0 FD | 	call	#__system___basic_print_string
14024     00 12 06 F6 | 	mov	arg01, #0
14028     0F 15 02 F6 | 	mov	arg02, local01
1402c     00 16 06 F6 | 	mov	arg03, #0
14030     A4 5A B0 FD | 	call	#__system___basic_print_string
14034     00 12 06 F6 | 	mov	arg01, #0
14038     0A 14 06 F6 | 	mov	arg02, #10
1403c     00 16 06 F6 | 	mov	arg03, #0
14040     3C 5A B0 FD | 	call	#__system___basic_print_char
14044     00 12 06 F6 | 	mov	arg01, #0
14048     9C A6 B0 FD | 	call	#__system___getiolock_0423
1404c     FD 00 68 FC | 	wrlong	#0, result1
14050     00 12 06 F6 | 	mov	arg01, #0
14054     00 14 06 F6 | 	mov	arg02, #0
14058     C4 A7 B0 FD | 	call	#__system___basic_dir
1405c     FD 1E 02 F6 | 	mov	local01, result1
14060     60 FF 9F FD | 	jmp	#LR__1570
14064                 | LR__1571
14064     44 01 00 FF 
14068     FB 12 06 F6 | 	mov	arg01, ##@LR__4603
1406c     21 14 06 F6 | 	mov	arg02, #33
14070     AC A7 B0 FD | 	call	#__system___basic_dir
14074     FD 1E 02 F6 | 	mov	local01, result1
14078                 | ' 
14078                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
14078                 | ' do while filename <> "" and filename <> nil
14078                 | LR__1572
14078     00 20 06 F6 | 	mov	local02, #0
1407c     44 01 00 FF 
14080     FD 14 06 F6 | 	mov	arg02, ##@LR__4604
14084     0F 13 02 F6 | 	mov	arg01, local01
14088     80 4D B0 FD | 	call	#__system___string_cmp
1408c     00 FA 0D F2 | 	cmp	result1, #0 wz
14090     00 20 26 56 |  if_ne	not	local02, #0
14094     00 22 06 F6 | 	mov	local03, #0
14098     0F 13 02 F6 | 	mov	arg01, local01
1409c     00 14 06 F6 | 	mov	arg02, #0
140a0     68 4D B0 FD | 	call	#__system___string_cmp
140a4     00 FA 0D F2 | 	cmp	result1, #0 wz
140a8     00 22 26 56 |  if_ne	not	local03, #0
140ac     11 21 CA F7 | 	test	local02, local03 wz
140b0     4C 01 90 AD |  if_e	jmp	#LR__1576
140b4                 | '   print filename
140b4     00 12 06 F6 | 	mov	arg01, #0
140b8     2C A6 B0 FD | 	call	#__system___getiolock_0423
140bc     FD 12 02 F6 | 	mov	arg01, result1
140c0     20 4D B0 FD | 	call	#__system___lockmem
140c4     00 12 06 F6 | 	mov	arg01, #0
140c8     0F 15 02 F6 | 	mov	arg02, local01
140cc     00 16 06 F6 | 	mov	arg03, #0
140d0     04 5A B0 FD | 	call	#__system___basic_print_string
140d4     00 12 06 F6 | 	mov	arg01, #0
140d8     0A 14 06 F6 | 	mov	arg02, #10
140dc     00 16 06 F6 | 	mov	arg03, #0
140e0     9C 59 B0 FD | 	call	#__system___basic_print_char
140e4     00 12 06 F6 | 	mov	arg01, #0
140e8     FC A5 B0 FD | 	call	#__system___getiolock_0423
140ec     FD 00 68 FC | 	wrlong	#0, result1
140f0     00 12 06 F6 | 	mov	arg01, #0
140f4     00 14 06 F6 | 	mov	arg02, #0
140f8     24 A7 B0 FD | 	call	#__system___basic_dir
140fc     FD 1E 02 F6 | 	mov	local01, result1
14100                 | '   filename = dir$()      ' continue scan
14100                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
14100                 | ' return cursor_y
14100     3A E4 05 F1 | 	add	objptr, #58
14104     F2 FA C1 FA | 	rdbyte	result1, objptr
14108     3A E4 85 F1 | 	sub	objptr, #58
1410c     22 FA 0D F2 | 	cmp	result1, #34 wz
14110     64 FF 9F 5D |  if_ne	jmp	#LR__1572
14114                 | '     print "-----more, press any key";
14114     00 12 06 F6 | 	mov	arg01, #0
14118     CC A5 B0 FD | 	call	#__system___getiolock_0423
1411c     FD 12 02 F6 | 	mov	arg01, result1
14120     C0 4C B0 FD | 	call	#__system___lockmem
14124     44 01 00 FF 
14128     FE 14 06 F6 | 	mov	arg02, ##@LR__4605
1412c     00 12 06 F6 | 	mov	arg01, #0
14130     00 16 06 F6 | 	mov	arg03, #0
14134     A0 59 B0 FD | 	call	#__system___basic_print_string
14138     00 12 06 F6 | 	mov	arg01, #0
1413c     A8 A5 B0 FD | 	call	#__system___getiolock_0423
14140     FD 00 68 FC | 	wrlong	#0, result1
14144                 | '     do 
14144                 | LR__1573
14144     DC 44 B0 FD | 	call	#_usbnew_spin2_get_key
14148     00 FA 0D F2 | 	cmp	result1, #0 wz
1414c     F4 FF 9F 5D |  if_ne	jmp	#LR__1573
14150                 | '     do
14150                 | LR__1574
14150     D0 44 B0 FD | 	call	#_usbnew_spin2_get_key
14154     00 FA 0D F2 | 	cmp	result1, #0 wz
14158     F4 FF 9F AD |  if_e	jmp	#LR__1574
1415c                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
1415c     79 00 00 FF 
14160     B4 E4 05 F1 | 	add	objptr, ##62132
14164     F2 20 02 FB | 	rdlong	local02, objptr
14168     79 00 00 FF 
1416c     B4 E4 85 F1 | 	sub	objptr, ##62132
14170     01 20 0E F2 | 	cmp	local02, #1 wz
14174     3C 00 90 5D |  if_ne	jmp	#LR__1575
14178     7A 00 00 FF 
1417c     58 E5 05 F1 | 	add	objptr, ##62808
14180     F2 14 02 FB | 	rdlong	arg02, objptr
14184     04 E4 85 F1 | 	sub	objptr, #4
14188     F2 1A 02 FB | 	rdlong	arg05, objptr
1418c     07 12 06 F6 | 	mov	arg01, #7
14190     56 00 00 FF 
14194     44 16 06 F6 | 	mov	arg03, ##44100
14198     0E 18 C6 F9 | 	decod	arg04, #14
1419c     01 1C 66 F6 | 	neg	arg06, #1
141a0     6F 00 00 FF 
141a4     94 E4 85 F1 | 	sub	objptr, ##56980
141a8     00 48 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
141ac     0B 00 00 FF 
141b0     C0 E4 85 F1 | 	sub	objptr, ##5824
141b4                 | LR__1575
141b4     00 12 06 F6 | 	mov	arg01, #0
141b8     23 14 06 F6 | 	mov	arg02, #35
141bc     38 38 B0 FD | 	call	#_hg010b_spin2_setcursorpos
141c0                 | '     position 0,35: print "                             ";: position 4,35  
141c0     00 12 06 F6 | 	mov	arg01, #0
141c4     20 A5 B0 FD | 	call	#__system___getiolock_0423
141c8     FD 12 02 F6 | 	mov	arg01, result1
141cc     14 4C B0 FD | 	call	#__system___lockmem
141d0     44 01 00 FF 
141d4     17 15 06 F6 | 	mov	arg02, ##@LR__4606
141d8     00 12 06 F6 | 	mov	arg01, #0
141dc     00 16 06 F6 | 	mov	arg03, #0
141e0     F4 58 B0 FD | 	call	#__system___basic_print_string
141e4     00 12 06 F6 | 	mov	arg01, #0
141e8     FC A4 B0 FD | 	call	#__system___getiolock_0423
141ec     FD 00 68 FC | 	wrlong	#0, result1
141f0     04 12 06 F6 | 	mov	arg01, #4
141f4     23 14 06 F6 | 	mov	arg02, #35
141f8     FC 37 B0 FD | 	call	#_hg010b_spin2_setcursorpos
141fc     78 FE 9F FD | 	jmp	#LR__1572
14200                 | LR__1576
14200     A7 F0 03 F6 | 	mov	ptra, fp
14204     B2 00 A0 FD | 	call	#popregs_
14208                 | _do_dir_ret
14208     2D 00 64 FD | 	ret
1420c                 | 
1420c                 | ' 
1420c                 | ' sub do_if
1420c                 | _do_if
1420c     05 4A 05 F6 | 	mov	COUNT_, #5
14210     A8 00 A0 FD | 	call	#pushregs_
14214     D8 56 BF FD | 	call	#_pop
14218     FD 1E 0A F6 | 	mov	local01, result1 wz
1421c     FE 20 02 F6 | 	mov	local02, result2
14220     FF 22 02 F6 | 	mov	local03, result3
14224                 | ' t1=pop()
14224                 | ' ' if uresult=0, jump over else
14224                 | ' if t1.result.uresult = 0 then 
14224     BC 00 90 5D |  if_ne	jmp	#LR__1582
14228                 | '   for i=lineptr_e to lineptr-1
14228     69 00 00 FF 
1422c     54 E5 05 F1 | 	add	objptr, ##54100
14230     F2 24 02 FB | 	rdlong	local04, objptr
14234     04 E4 85 F1 | 	sub	objptr, #4
14238     F2 26 02 FB | 	rdlong	local05, objptr
1423c     69 00 00 FF 
14240     50 E5 85 F1 | 	sub	objptr, ##54096
14244                 | LR__1580
14244     13 25 52 F2 | 	cmps	local04, local05 wc
14248     78 00 90 3D |  if_ae	jmp	#LR__1581
1424c     12 FF 01 F6 | 	mov	result3, local04
14250     01 FE 65 F0 | 	shl	result3, #1
14254     12 FF 01 F1 | 	add	result3, local04
14258     02 FE 65 F0 | 	shl	result3, #2
1425c     66 00 00 FF 
14260     50 E5 05 F1 | 	add	objptr, ##52560
14264     F2 FE 01 F1 | 	add	result3, objptr
14268     FF 1E 02 FB | 	rdlong	local01, result3
1426c     04 FE 05 F1 | 	add	result3, #4
14270     FF FC 01 FB | 	rdlong	result2, result3
14274     12 FF 01 F6 | 	mov	result3, local04
14278     01 FE 65 F0 | 	shl	result3, #1
1427c     12 FF 01 F1 | 	add	result3, local04
14280     02 FE 65 F0 | 	shl	result3, #2
14284     F2 FE 01 F1 | 	add	result3, objptr
14288     08 FE 05 F1 | 	add	result3, #8
1428c     FF FE 01 FB | 	rdlong	result3, result3
14290     FE 20 02 F6 | 	mov	local02, result2
14294     FF 22 02 F6 | 	mov	local03, result3
14298                 | '     t1=compiledline(i)
14298                 | '     if t1.result_type=token_else then lineptr_e=i : return
14298     5A 22 0E F2 | 	cmp	local03, #90 wz
1429c     66 00 00 FF 
142a0     50 E5 85 F1 | 	sub	objptr, ##52560
142a4     69 00 00 AF 
142a8     54 E5 05 A1 |  if_e	add	objptr, ##54100
142ac     F2 24 62 AC |  if_e	wrlong	local04, objptr
142b0     69 00 00 AF 
142b4     54 E5 85 A1 |  if_e	sub	objptr, ##54100
142b8     28 00 90 AD |  if_e	jmp	#LR__1583
142bc     01 24 06 F1 | 	add	local04, #1
142c0     80 FF 9F FD | 	jmp	#LR__1580
142c4                 | LR__1581
142c4     69 00 00 FF 
142c8     50 E5 05 F1 | 	add	objptr, ##54096
142cc     F2 26 02 FB | 	rdlong	local05, objptr
142d0     01 26 86 F1 | 	sub	local05, #1
142d4     04 E4 05 F1 | 	add	objptr, #4
142d8     F2 26 62 FC | 	wrlong	local05, objptr
142dc     69 00 00 FF 
142e0     54 E5 85 F1 | 	sub	objptr, ##54100
142e4                 | LR__1582
142e4                 | LR__1583
142e4     A7 F0 03 F6 | 	mov	ptra, fp
142e8     B2 00 A0 FD | 	call	#popregs_
142ec                 | _do_if_ret
142ec     2D 00 64 FD | 	ret
142f0                 | 
142f0                 | ' 
142f0                 | ' sub do_else
142f0                 | _do_else
142f0     69 00 00 FF 
142f4     50 E5 05 F1 | 	add	objptr, ##54096
142f8     F2 00 02 FB | 	rdlong	_var01, objptr
142fc     01 00 86 F1 | 	sub	_var01, #1
14300     04 E4 05 F1 | 	add	objptr, #4
14304     F2 00 62 FC | 	wrlong	_var01, objptr
14308     69 00 00 FF 
1430c     54 E5 85 F1 | 	sub	objptr, ##54100
14310                 | _do_else_ret
14310     2D 00 64 FD | 	ret
14314                 | 
14314                 | ' 
14314                 | ' sub do_rad
14314                 | _do_rad
14314     7A 00 00 FF 
14318     5C E5 05 F1 | 	add	objptr, ##62812
1431c     00 C0 9F FF 
14320     F2 00 68 FC | 	wrlong	##1065353216, objptr
14324     04 E4 05 F1 | 	add	objptr, #4
14328     00 C0 9F FF 
1432c     F2 00 68 FC | 	wrlong	##1065353216, objptr
14330     7A 00 00 FF 
14334     60 E5 85 F1 | 	sub	objptr, ##62816
14338                 | _do_rad_ret
14338     2D 00 64 FD | 	ret
1433c                 | 
1433c                 | ' 
1433c                 | ' sub do_deg
1433c                 | _do_deg
1433c     7A 00 00 FF 
14340     5C E5 05 F1 | 	add	objptr, ##62812
14344     7D 47 9E FF 
14348     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1434c     04 E4 05 F1 | 	add	objptr, #4
14350     97 32 A1 FF 
14354     F2 C2 69 FC | 	wrlong	##1113927393, objptr
14358     7A 00 00 FF 
1435c     60 E5 85 F1 | 	sub	objptr, ##62816
14360                 | _do_deg_ret
14360     2D 00 64 FD | 	ret
14364                 | 
14364                 | ' 
14364                 | ' sub do_int
14364                 | _do_int
14364     00 4A 05 F6 | 	mov	COUNT_, #0
14368     A8 00 A0 FD | 	call	#pushregs_
1436c     0C F0 07 F1 | 	add	ptra, #12
14370     7C 55 BF FD | 	call	#_pop
14374     A7 FA 61 FC | 	wrlong	result1, fp
14378     04 4E 05 F1 | 	add	fp, #4
1437c     A7 FC 61 FC | 	wrlong	result2, fp
14380     04 4E 05 F1 | 	add	fp, #4
14384     A7 FE 61 FC | 	wrlong	result3, fp
14388     08 4E 85 F1 | 	sub	fp, #8
1438c     A7 12 02 F6 | 	mov	arg01, fp
14390     CC CA BF FD | 	call	#_converttoint
14394     A7 FA 61 FC | 	wrlong	result1, fp
14398     08 4E 05 F1 | 	add	fp, #8
1439c     A7 38 68 FC | 	wrlong	#28, fp
143a0     08 4E 85 F1 | 	sub	fp, #8
143a4     A7 12 02 F6 | 	mov	arg01, fp
143a8     DC 55 BF FD | 	call	#_push
143ac     A7 F0 03 F6 | 	mov	ptra, fp
143b0     B2 00 A0 FD | 	call	#popregs_
143b4                 | _do_int_ret
143b4     2D 00 64 FD | 	ret
143b8                 | 
143b8                 | ' 
143b8                 | ' sub do_nothing
143b8                 | _do_nothing
143b8                 | _do_nothing_ret
143b8     2D 00 64 FD | 	ret
143bc                 | 
143bc                 | ' 
143bc                 | ' sub do_brun
143bc                 | _do_brun
143bc     08 4A 05 F6 | 	mov	COUNT_, #8
143c0     A8 00 A0 FD | 	call	#pushregs_
143c4     28 55 BF FD | 	call	#_pop
143c8     FE 1A 02 F6 | 	mov	arg05, result2
143cc     FF 18 02 F6 | 	mov	arg04, result3
143d0     FD 1E 02 F6 | 	mov	local01, result1
143d4     0D 21 02 F6 | 	mov	local02, arg05
143d8     0C 23 02 F6 | 	mov	local03, arg04
143dc                 | ' 
143dc                 | ' t1=pop() 
143dc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
143dc     2B 22 0E F2 | 	cmp	local03, #43 wz
143e0     10 00 90 5D |  if_ne	jmp	#LR__1590
143e4     0F 13 02 F6 | 	mov	arg01, local01
143e8     40 86 BF FD | 	call	#_convertstring
143ec     FD 1E 02 F6 | 	mov	local01, result1
143f0     1F 22 06 F6 | 	mov	local03, #31
143f4                 | LR__1590
143f4                 | ' if t1.result_type=result_string then
143f4     1F 22 0E F2 | 	cmp	local03, #31 wz
143f8     EC 01 90 5D |  if_ne	jmp	#LR__1594
143fc     0F 25 02 F6 | 	mov	local04, local01
14400                 | '   filename=t1.result.sresult
14400                 | '   if left$(filename,1)="/" then 
14400     12 13 02 F6 | 	mov	arg01, local04
14404     01 14 06 F6 | 	mov	arg02, #1
14408     E8 69 B0 FD | 	call	#__system__Left_S
1440c     FD 12 02 F6 | 	mov	arg01, result1
14410     44 01 00 FF 
14414     35 15 06 F6 | 	mov	arg02, ##@LR__4607
14418     F0 49 B0 FD | 	call	#__system___string_cmp
1441c     00 FA 0D F2 | 	cmp	result1, #0 wz
14420     12 27 02 A6 |  if_e	mov	local05, local04
14424     14 00 90 AD |  if_e	jmp	#LR__1591
14428     44 01 00 FF 
1442c     37 13 06 F6 | 	mov	arg01, ##@LR__4608
14430     12 15 02 F6 | 	mov	arg02, local04
14434     08 4A B0 FD | 	call	#__system___string_concat
14438     FD 26 02 F6 | 	mov	local05, result1
1443c                 | LR__1591
1443c                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1443c                 | '   open fullfilename for input as #9
1443c     09 12 06 F6 | 	mov	arg01, #9
14440     13 15 02 F6 | 	mov	arg02, local05
14444     00 16 06 F6 | 	mov	arg03, #0
14448     9C 55 B0 FD | 	call	#__system___basic_open_string
1444c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
14450     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
14454     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
14458     FD 28 0A F6 | 	mov	local06, result1 wz
1445c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1445c     8C 00 90 AD |  if_e	jmp	#LR__1592
14460     00 12 06 F6 | 	mov	arg01, #0
14464     80 A2 B0 FD | 	call	#__system___getiolock_0423
14468     FD 12 02 F6 | 	mov	arg01, result1
1446c     74 49 B0 FD | 	call	#__system___lockmem
14470     44 01 00 FF 
14474     40 15 06 F6 | 	mov	arg02, ##@LR__4609
14478     00 12 06 F6 | 	mov	arg01, #0
1447c     00 16 06 F6 | 	mov	arg03, #0
14480     54 56 B0 FD | 	call	#__system___basic_print_string
14484     00 12 06 F6 | 	mov	arg01, #0
14488     14 15 02 F6 | 	mov	arg02, local06
1448c     00 16 06 F6 | 	mov	arg03, #0
14490     0A 18 06 F6 | 	mov	arg04, #10
14494     84 56 B0 FD | 	call	#__system___basic_print_integer
14498     44 01 00 FF 
1449c     4E 15 06 F6 | 	mov	arg02, ##@LR__4610
144a0     00 12 06 F6 | 	mov	arg01, #0
144a4     00 16 06 F6 | 	mov	arg03, #0
144a8     2C 56 B0 FD | 	call	#__system___basic_print_string
144ac     14 13 02 F6 | 	mov	arg01, local06
144b0     30 6F B0 FD | 	call	#__system___strerror
144b4     FD 14 02 F6 | 	mov	arg02, result1
144b8     00 12 06 F6 | 	mov	arg01, #0
144bc     00 16 06 F6 | 	mov	arg03, #0
144c0     14 56 B0 FD | 	call	#__system___basic_print_string
144c4     00 12 06 F6 | 	mov	arg01, #0
144c8     0A 14 06 F6 | 	mov	arg02, #10
144cc     00 16 06 F6 | 	mov	arg03, #0
144d0     AC 55 B0 FD | 	call	#__system___basic_print_char
144d4     00 12 06 F6 | 	mov	arg01, #0
144d8     0C A2 B0 FD | 	call	#__system___getiolock_0423
144dc     FD 00 68 FC | 	wrlong	#0, result1
144e0     09 12 06 F6 | 	mov	arg01, #9
144e4     30 98 B0 FD | 	call	#__system__close
144e8     FC 00 90 FD | 	jmp	#LR__1595
144ec                 | LR__1592
144ec     01 2A 06 F6 | 	mov	local07, #1
144f0     00 2C 06 F6 | 	mov	local08, #0
144f4                 | '   do
144f4                 | LR__1593
144f4                 | '     get #9,pos,block(0),1024,r : pos+=r	
144f4     77 00 00 FF 
144f8     80 E4 05 F1 | 	add	objptr, ##61056
144fc     F2 16 02 F6 | 	mov	arg03, objptr
14500     77 00 00 FF 
14504     80 E4 85 F1 | 	sub	objptr, ##61056
14508     09 12 06 F6 | 	mov	arg01, #9
1450c     15 15 02 F6 | 	mov	arg02, local07
14510     0A 18 C6 F9 | 	decod	arg04, #10
14514     01 1A 06 F6 | 	mov	arg05, #1
14518     CC 56 B0 FD | 	call	#__system___basic_get
1451c     FD 28 02 F6 | 	mov	local06, result1
14520     FD 2A 02 F1 | 	add	local07, result1
14524     77 00 00 FF 
14528     80 E4 05 F1 | 	add	objptr, ##61056
1452c     F2 12 02 F6 | 	mov	arg01, objptr
14530     16 15 02 F6 | 	mov	arg02, local08
14534     0A 16 C6 F9 | 	decod	arg03, #10
14538     6B 00 00 FF 
1453c     C0 E5 85 F1 | 	sub	objptr, ##55232
14540     EC 3D B0 FD | 	call	#_psram_spin2_write
14544     0B 00 00 FF 
14548     C0 E4 85 F1 | 	sub	objptr, ##5824
1454c     14 2D 02 F1 | 	add	local08, local06
14550     02 00 00 FF 
14554     00 28 0E F2 | 	cmp	local06, ##1024 wz
14558     E0 03 00 AF 
1455c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
14560     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1593
14564     56 00 00 FF 
14568     D0 E4 05 F1 | 	add	objptr, ##44240
1456c     F2 12 02 FB | 	rdlong	arg01, objptr
14570     03 12 62 FD | 	cogstop	arg01
14574     04 E4 05 F1 | 	add	objptr, #4
14578     F2 12 02 FB | 	rdlong	arg01, objptr
1457c     03 12 62 FD | 	cogstop	arg01
14580     04 E4 05 F1 | 	add	objptr, #4
14584     F2 12 02 FB | 	rdlong	arg01, objptr
14588     03 12 62 FD | 	cogstop	arg01
1458c     22 00 00 FF 
14590     E0 E5 05 F1 | 	add	objptr, ##17888
14594     F2 12 02 FB | 	rdlong	arg01, objptr
14598     03 12 62 FD | 	cogstop	arg01
1459c     10 00 00 FF 
145a0     9C EA 05 F1 | 	add	ptr__dat__, ##8348
145a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
145a8     10 00 00 FF 
145ac     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
145b0     22 00 00 FF 
145b4     D8 E5 85 F1 | 	sub	objptr, ##17880
145b8     1E 2C 06 F6 | 	mov	local08, #30
145bc     28 E4 61 FD | 	setq	objptr
145c0     0A 2D F2 FC | 	coginit	local08, arg02 wc
145c4     01 2C 66 C6 |  if_b	neg	local08, #1
145c8     24 00 00 FF 
145cc     FC E4 05 F1 | 	add	objptr, ##18684
145d0     F2 2C 62 FC | 	wrlong	local08, objptr
145d4     7A 00 00 FF 
145d8     DC E5 85 F1 | 	sub	objptr, ##62940
145dc     00 12 06 F6 | 	mov	arg01, #0
145e0     01 12 62 FD | 	cogid	arg01
145e4     03 12 62 FD | 	cogstop	arg01
145e8                 | LR__1594
145e8                 | LR__1595
145e8     A7 F0 03 F6 | 	mov	ptra, fp
145ec     B2 00 A0 FD | 	call	#popregs_
145f0                 | _do_brun_ret
145f0     2D 00 64 FD | 	ret
145f4                 | 
145f4                 | ' 
145f4                 | ' 
145f4                 | ' sub do_mouse
145f4                 | _do_mouse
145f4     F8 52 BF FD | 	call	#_pop
145f8     00 FA 4D F2 | 	cmps	result1, #0 wz
145fc                 | ' 
145fc                 | ' t1=pop()
145fc                 | ' 
145fc                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
145fc     14 00 90 5D |  if_ne	jmp	#LR__1600
14600     10 12 06 F6 | 	mov	arg01, #16
14604     00 14 06 F6 | 	mov	arg02, #0
14608     00 16 06 F6 | 	mov	arg03, #0
1460c     D8 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14610     10 00 90 FD | 	jmp	#LR__1601
14614                 | LR__1600
14614     10 12 06 F6 | 	mov	arg01, #16
14618     20 14 06 F6 | 	mov	arg02, #32
1461c     20 16 06 F6 | 	mov	arg03, #32
14620     C4 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14624                 | LR__1601
14624                 | _do_mouse_ret
14624     2D 00 64 FD | 	ret
14628                 | 
14628                 | ' 
14628                 | ' sub do_cursor
14628                 | _do_cursor
14628     C4 52 BF FD | 	call	#_pop
1462c     00 FA 4D F2 | 	cmps	result1, #0 wz
14630                 | ' 
14630                 | ' t1=pop()
14630                 | ' 
14630                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
14630     14 00 90 5D |  if_ne	jmp	#LR__1610
14634     11 12 06 F6 | 	mov	arg01, #17
14638     00 14 06 F6 | 	mov	arg02, #0
1463c     00 16 06 F6 | 	mov	arg03, #0
14640     A4 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14644     10 00 90 FD | 	jmp	#LR__1611
14648                 | LR__1610
14648     11 12 06 F6 | 	mov	arg01, #17
1464c     08 14 06 F6 | 	mov	arg02, #8
14650     10 16 06 F6 | 	mov	arg03, #16
14654     90 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14658                 | LR__1611
14658                 | _do_cursor_ret
14658     2D 00 64 FD | 	ret
1465c                 | 
1465c                 | ' 
1465c                 | ' 
1465c                 | ' sub do_click
1465c                 | _do_click
1465c     90 52 BF FD | 	call	#_pop
14660     00 FA 4D F2 | 	cmps	result1, #0 wz
14664                 | ' 
14664                 | ' t1=pop()
14664                 | ' 
14664                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
14664     79 00 00 AF 
14668     B4 E4 05 A1 |  if_e	add	objptr, ##62132
1466c     F2 00 68 AC |  if_e	wrlong	#0, objptr
14670     79 00 00 FF 
14674     B4 E4 C5 F3 | 	sumz	objptr, ##62132
14678     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1467c     79 00 00 5F 
14680     B4 E4 85 51 |  if_ne	sub	objptr, ##62132
14684                 | _do_click_ret
14684     2D 00 64 FD | 	ret
14688                 | 
14688                 | ' 
14688                 | ' 
14688                 | ' sub do_beep
14688                 | _do_beep
14688     02 4A 05 F6 | 	mov	COUNT_, #2
1468c     A8 00 A0 FD | 	call	#pushregs_
14690     20 F0 07 F1 | 	add	ptra, #32
14694     58 52 BF FD | 	call	#_pop
14698     FD 1E 02 F6 | 	mov	local01, result1
1469c     FE 1C 02 F6 | 	mov	arg06, result2
146a0     FF 20 02 F6 | 	mov	local02, result3
146a4     0C 4E 05 F1 | 	add	fp, #12
146a8     A7 1E 62 FC | 	wrlong	local01, fp
146ac     04 4E 05 F1 | 	add	fp, #4
146b0     A7 1C 62 FC | 	wrlong	arg06, fp
146b4     04 4E 05 F1 | 	add	fp, #4
146b8     A7 20 62 FC | 	wrlong	local02, fp
146bc     14 4E 85 F1 | 	sub	fp, #20
146c0     2C 52 BF FD | 	call	#_pop
146c4     A7 FA 61 FC | 	wrlong	result1, fp
146c8     04 4E 05 F1 | 	add	fp, #4
146cc     A7 FC 61 FC | 	wrlong	result2, fp
146d0     04 4E 05 F1 | 	add	fp, #4
146d4     A7 FE 61 FC | 	wrlong	result3, fp
146d8                 | ' 
146d8                 | ' 
146d8                 | ' 
146d8                 | ' t2=pop()
146d8                 | ' t1=pop()
146d8                 | ' 
146d8                 | ' 
146d8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
146d8     08 4E 85 F1 | 	sub	fp, #8
146dc     1C FE 0D F2 | 	cmp	result3, #28 wz
146e0     08 4E 05 51 |  if_ne	add	fp, #8
146e4     A7 20 02 5B |  if_ne	rdlong	local02, fp
146e8     08 4E 85 51 |  if_ne	sub	fp, #8
146ec     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
146f0     A7 1E 02 AB |  if_e	rdlong	local01, fp
146f4     18 4E 05 A1 |  if_e	add	fp, #24
146f8     A7 1E 62 AC |  if_e	wrlong	local01, fp
146fc     18 4E 85 A1 |  if_e	sub	fp, #24
14700     14 00 90 AD |  if_e	jmp	#LR__1620
14704     A7 12 02 F6 | 	mov	arg01, fp
14708     54 C7 BF FD | 	call	#_converttoint
1470c     18 4E 05 F1 | 	add	fp, #24
14710     A7 FA 61 FC | 	wrlong	result1, fp
14714     18 4E 85 F1 | 	sub	fp, #24
14718                 | LR__1620
14718     1C 4E 05 F1 | 	add	fp, #28
1471c     A7 FE 48 FC | 	wrbyte	#127, fp
14720     01 4E 05 F1 | 	add	fp, #1
14724     A7 00 49 FC | 	wrbyte	#128, fp
14728     01 4E 85 F1 | 	sub	fp, #1
1472c     A7 14 02 F6 | 	mov	arg02, fp
14730     04 4E 85 F1 | 	sub	fp, #4
14734     A7 16 02 FB | 	rdlong	arg03, fp
14738     18 4E 85 F1 | 	sub	fp, #24
1473c     01 16 66 F0 | 	shl	arg03, #1
14740     07 12 06 F6 | 	mov	arg01, #7
14744     0E 18 C6 F9 | 	decod	arg04, #14
14748     02 1A 06 F6 | 	mov	arg05, #2
1474c     00 1C 06 F6 | 	mov	arg06, #0
14750     0B 00 00 FF 
14754     C0 E4 05 F1 | 	add	objptr, ##5824
14758     EC 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
1475c     0B 00 00 FF 
14760     C0 E4 85 F1 | 	sub	objptr, ##5824
14764     0C 4E 05 F1 | 	add	fp, #12
14768     A7 12 02 F6 | 	mov	arg01, fp
1476c     0C 4E 85 F1 | 	sub	fp, #12
14770     14 52 BF FD | 	call	#_push
14774     58 F6 BF FD | 	call	#_do_waitms
14778     07 12 06 F6 | 	mov	arg01, #7
1477c     0B 00 00 FF 
14780     C0 E4 05 F1 | 	add	objptr, ##5824
14784     74 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
14788     0B 00 00 FF 
1478c     C0 E4 85 F1 | 	sub	objptr, ##5824
14790     A7 F0 03 F6 | 	mov	ptra, fp
14794     B2 00 A0 FD | 	call	#popregs_
14798                 | _do_beep_ret
14798     2D 00 64 FD | 	ret
1479c                 | 
1479c                 | ' 
1479c                 | ' sub do_no_command
1479c                 | _do_no_command
1479c     17 12 06 F6 | 	mov	arg01, #23
147a0     BC 10 B0 FD | 	call	#_printerror
147a4                 | _do_no_command_ret
147a4     2D 00 64 FD | 	ret
147a8                 | 
147a8                 | ' 
147a8                 | ' sub do_negative
147a8                 | _do_negative
147a8     02 4A 05 F6 | 	mov	COUNT_, #2
147ac     A8 00 A0 FD | 	call	#pushregs_
147b0     0C F0 07 F1 | 	add	ptra, #12
147b4     38 51 BF FD | 	call	#_pop
147b8     FF 1E 02 F6 | 	mov	local01, result3
147bc     A7 FA 61 FC | 	wrlong	result1, fp
147c0     04 4E 05 F1 | 	add	fp, #4
147c4     A7 FC 61 FC | 	wrlong	result2, fp
147c8     04 4E 05 F1 | 	add	fp, #4
147cc     A7 1E 62 FC | 	wrlong	local01, fp
147d0                 | ' t1=pop()
147d0                 | ' if t1.result_type=result_int then 
147d0     08 4E 85 F1 | 	sub	fp, #8
147d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
147d8     A7 20 02 AB |  if_e	rdlong	local02, fp
147dc     10 1F 62 A6 |  if_e	neg	local01, local02
147e0     A7 1E 62 AC |  if_e	wrlong	local01, fp
147e4     5C 00 90 AD |  if_e	jmp	#LR__1632
147e8     08 4E 05 F1 | 	add	fp, #8
147ec     A7 1E 02 FB | 	rdlong	local01, fp
147f0     08 4E 85 F1 | 	sub	fp, #8
147f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
147f8     1C 00 90 5D |  if_ne	jmp	#LR__1630
147fc     A7 20 02 FB | 	rdlong	local02, fp
14800     10 1F 62 F6 | 	neg	local01, local02
14804     A7 1E 62 FC | 	wrlong	local01, fp
14808     08 4E 05 F1 | 	add	fp, #8
1480c     A7 38 68 FC | 	wrlong	#28, fp
14810     08 4E 85 F1 | 	sub	fp, #8
14814     2C 00 90 FD | 	jmp	#LR__1631
14818                 | LR__1630
14818     08 4E 05 F1 | 	add	fp, #8
1481c     A7 1E 02 FB | 	rdlong	local01, fp
14820     08 4E 85 F1 | 	sub	fp, #8
14824     1E 1E 0E F2 | 	cmp	local01, #30 wz
14828     A7 FA 01 AB |  if_e	rdlong	result1, fp
1482c     1F FA E5 A4 |  if_e	bitnot	result1, #31
14830     A7 FA 61 AC |  if_e	wrlong	result1, fp
14834     08 4E 05 51 |  if_ne	add	fp, #8
14838     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1483c     08 4E 85 51 |  if_ne	sub	fp, #8
14840     A7 50 68 5C |  if_ne	wrlong	#40, fp
14844                 | LR__1631
14844                 | LR__1632
14844     A7 12 02 F6 | 	mov	arg01, fp
14848     3C 51 BF FD | 	call	#_push
1484c     A7 F0 03 F6 | 	mov	ptra, fp
14850     B2 00 A0 FD | 	call	#popregs_
14854                 | _do_negative_ret
14854     2D 00 64 FD | 	ret
14858                 | 
14858                 | ' 
14858                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
14858                 | ' 
14858                 | ' ''----------------------------------------------------------------------------------------------------
14858                 | ' ''------------------ Initialization procedures -------------------------------------------------------
14858                 | ' ''----------------------------------------------------------------------------------------------------
14858                 | ' 
14858                 | ' ''--------------------------- Command function pointers
14858                 | ' 
14858                 | ' sub init_commands
14858                 | _init_commands
14858                 | ' 
14858                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
14858     00 00 06 F6 | 	mov	_var01, #0
1485c     97 16 48 FB | 	callpa	#(@LR__1641-@LR__1640)>>2,fcache_load_ptr_
14860                 | LR__1640
14860     00 FB 01 F6 | 	mov	result1, _var01
14864     02 FA 65 F0 | 	shl	result1, #2
14868     62 00 00 FF 
1486c     34 E5 05 F1 | 	add	objptr, ##50484
14870     F2 FA 01 F1 | 	add	result1, objptr
14874     62 00 00 FF 
14878     34 E5 85 F1 | 	sub	objptr, ##50484
1487c     FD E4 61 FC | 	wrlong	objptr, result1
14880     01 00 06 F1 | 	add	_var01, #1
14884     00 01 56 F2 | 	cmps	_var01, #256 wc
14888     D4 FF 9F CD |  if_b	jmp	#LR__1640
1488c                 | LR__1641
1488c     F2 FA 01 F6 | 	mov	result1, objptr
14890     14 FA 25 F4 | 	bith	result1, #20
14894     62 00 00 FF 
14898     38 E5 05 F1 | 	add	objptr, ##50488
1489c     F2 FA 61 FC | 	wrlong	result1, objptr
148a0     62 00 00 FF 
148a4     38 E5 85 F1 | 	sub	objptr, ##50488
148a8     F2 FA 01 F6 | 	mov	result1, objptr
148ac     15 FA 25 F4 | 	bith	result1, #21
148b0     62 00 00 FF 
148b4     3C E5 05 F1 | 	add	objptr, ##50492
148b8     F2 FA 61 FC | 	wrlong	result1, objptr
148bc     62 00 00 FF 
148c0     3C E5 85 F1 | 	sub	objptr, ##50492
148c4     F2 FA 01 F6 | 	mov	result1, objptr
148c8     34 FA 25 F4 | 	bith	result1, #52
148cc     62 00 00 FF 
148d0     40 E5 05 F1 | 	add	objptr, ##50496
148d4     F2 FA 61 FC | 	wrlong	result1, objptr
148d8     62 00 00 FF 
148dc     40 E5 85 F1 | 	sub	objptr, ##50496
148e0     F2 FA 01 F6 | 	mov	result1, objptr
148e4     16 FA 25 F4 | 	bith	result1, #22
148e8     62 00 00 FF 
148ec     48 E5 05 F1 | 	add	objptr, ##50504
148f0     F2 FA 61 FC | 	wrlong	result1, objptr
148f4     62 00 00 FF 
148f8     48 E5 85 F1 | 	sub	objptr, ##50504
148fc     F2 FA 01 F6 | 	mov	result1, objptr
14900     00 28 00 FF 
14904     00 FA 45 F5 | 	or	result1, ##5242880
14908     62 00 00 FF 
1490c     4C E5 05 F1 | 	add	objptr, ##50508
14910     F2 FA 61 FC | 	wrlong	result1, objptr
14914     62 00 00 FF 
14918     4C E5 85 F1 | 	sub	objptr, ##50508
1491c     F2 FA 01 F6 | 	mov	result1, objptr
14920     35 FA 25 F4 | 	bith	result1, #53
14924     62 00 00 FF 
14928     50 E5 05 F1 | 	add	objptr, ##50512
1492c     F2 FA 61 FC | 	wrlong	result1, objptr
14930     62 00 00 FF 
14934     50 E5 85 F1 | 	sub	objptr, ##50512
14938     F2 FA 01 F6 | 	mov	result1, objptr
1493c     54 FA 25 F4 | 	bith	result1, #84
14940     62 00 00 FF 
14944     54 E5 05 F1 | 	add	objptr, ##50516
14948     F2 FA 61 FC | 	wrlong	result1, objptr
1494c     62 00 00 FF 
14950     54 E5 85 F1 | 	sub	objptr, ##50516
14954     F2 FA 01 F6 | 	mov	result1, objptr
14958     17 FA 25 F4 | 	bith	result1, #23
1495c     62 00 00 FF 
14960     58 E5 05 F1 | 	add	objptr, ##50520
14964     F2 FA 61 FC | 	wrlong	result1, objptr
14968     62 00 00 FF 
1496c     58 E5 85 F1 | 	sub	objptr, ##50520
14970     F2 FA 01 F6 | 	mov	result1, objptr
14974     00 48 00 FF 
14978     00 FA 45 F5 | 	or	result1, ##9437184
1497c     62 00 00 FF 
14980     5C E5 05 F1 | 	add	objptr, ##50524
14984     F2 FA 61 FC | 	wrlong	result1, objptr
14988     62 00 00 FF 
1498c     5C E5 85 F1 | 	sub	objptr, ##50524
14990     F2 FA 01 F6 | 	mov	result1, objptr
14994     00 50 00 FF 
14998     00 FA 45 F5 | 	or	result1, ##10485760
1499c     62 00 00 FF 
149a0     60 E5 05 F1 | 	add	objptr, ##50528
149a4     F2 FA 61 FC | 	wrlong	result1, objptr
149a8     62 00 00 FF 
149ac     60 E5 85 F1 | 	sub	objptr, ##50528
149b0     F2 FA 01 F6 | 	mov	result1, objptr
149b4     00 58 00 FF 
149b8     00 FA 45 F5 | 	or	result1, ##11534336
149bc     62 00 00 FF 
149c0     64 E5 05 F1 | 	add	objptr, ##50532
149c4     F2 FA 61 FC | 	wrlong	result1, objptr
149c8     62 00 00 FF 
149cc     64 E5 85 F1 | 	sub	objptr, ##50532
149d0     F2 FA 01 F6 | 	mov	result1, objptr
149d4     36 FA 25 F4 | 	bith	result1, #54
149d8     62 00 00 FF 
149dc     78 E5 05 F1 | 	add	objptr, ##50552
149e0     F2 FA 61 FC | 	wrlong	result1, objptr
149e4     62 00 00 FF 
149e8     78 E5 85 F1 | 	sub	objptr, ##50552
149ec     F2 FA 01 F6 | 	mov	result1, objptr
149f0     00 68 00 FF 
149f4     00 FA 45 F5 | 	or	result1, ##13631488
149f8     62 00 00 FF 
149fc     A8 E5 05 F1 | 	add	objptr, ##50600
14a00     F2 FA 61 FC | 	wrlong	result1, objptr
14a04     62 00 00 FF 
14a08     A8 E5 85 F1 | 	sub	objptr, ##50600
14a0c     F2 FA 01 F6 | 	mov	result1, objptr
14a10     00 68 00 FF 
14a14     00 FA 45 F5 | 	or	result1, ##13631488
14a18     62 00 00 FF 
14a1c     A4 E5 05 F1 | 	add	objptr, ##50596
14a20     F2 FA 61 FC | 	wrlong	result1, objptr
14a24     62 00 00 FF 
14a28     A4 E5 85 F1 | 	sub	objptr, ##50596
14a2c     F2 FA 01 F6 | 	mov	result1, objptr
14a30     00 68 00 FF 
14a34     00 FA 45 F5 | 	or	result1, ##13631488
14a38     62 00 00 FF 
14a3c     AC E5 05 F1 | 	add	objptr, ##50604
14a40     F2 FA 61 FC | 	wrlong	result1, objptr
14a44     62 00 00 FF 
14a48     AC E5 85 F1 | 	sub	objptr, ##50604
14a4c     F2 FA 01 F6 | 	mov	result1, objptr
14a50     00 68 00 FF 
14a54     00 FA 45 F5 | 	or	result1, ##13631488
14a58     62 00 00 FF 
14a5c     B0 E5 05 F1 | 	add	objptr, ##50608
14a60     F2 FA 61 FC | 	wrlong	result1, objptr
14a64     62 00 00 FF 
14a68     B0 E5 85 F1 | 	sub	objptr, ##50608
14a6c     F2 FA 01 F6 | 	mov	result1, objptr
14a70     00 68 00 FF 
14a74     00 FA 45 F5 | 	or	result1, ##13631488
14a78     62 00 00 FF 
14a7c     E0 E5 05 F1 | 	add	objptr, ##50656
14a80     F2 FA 61 FC | 	wrlong	result1, objptr
14a84     62 00 00 FF 
14a88     E0 E5 85 F1 | 	sub	objptr, ##50656
14a8c     F2 FA 01 F6 | 	mov	result1, objptr
14a90     55 FA 25 F4 | 	bith	result1, #85
14a94     62 00 00 FF 
14a98     90 E5 05 F1 | 	add	objptr, ##50576
14a9c     F2 FA 61 FC | 	wrlong	result1, objptr
14aa0     62 00 00 FF 
14aa4     90 E5 85 F1 | 	sub	objptr, ##50576
14aa8     F2 FA 01 F6 | 	mov	result1, objptr
14aac     00 68 00 FF 
14ab0     00 FA 45 F5 | 	or	result1, ##13631488
14ab4     62 00 00 FF 
14ab8     B4 E5 05 F1 | 	add	objptr, ##50612
14abc     F2 FA 61 FC | 	wrlong	result1, objptr
14ac0     62 00 00 FF 
14ac4     B4 E5 85 F1 | 	sub	objptr, ##50612
14ac8     F2 FA 01 F6 | 	mov	result1, objptr
14acc     00 68 00 FF 
14ad0     00 FA 45 F5 | 	or	result1, ##13631488
14ad4     62 00 00 FF 
14ad8     B8 E5 05 F1 | 	add	objptr, ##50616
14adc     F2 FA 61 FC | 	wrlong	result1, objptr
14ae0     62 00 00 FF 
14ae4     B8 E5 85 F1 | 	sub	objptr, ##50616
14ae8     F2 FA 01 F6 | 	mov	result1, objptr
14aec     00 68 00 FF 
14af0     00 FA 45 F5 | 	or	result1, ##13631488
14af4     62 00 00 FF 
14af8     BC E5 05 F1 | 	add	objptr, ##50620
14afc     F2 FA 61 FC | 	wrlong	result1, objptr
14b00     62 00 00 FF 
14b04     BC E5 85 F1 | 	sub	objptr, ##50620
14b08     F2 FA 01 F6 | 	mov	result1, objptr
14b0c     74 FA 25 F4 | 	bith	result1, #116
14b10     63 00 00 FF 
14b14     34 E4 05 F1 | 	add	objptr, ##50740
14b18     F2 FA 61 FC | 	wrlong	result1, objptr
14b1c     63 00 00 FF 
14b20     34 E4 85 F1 | 	sub	objptr, ##50740
14b24     F2 FA 01 F6 | 	mov	result1, objptr
14b28     18 FA 25 F4 | 	bith	result1, #24
14b2c     63 00 00 FF 
14b30     38 E4 05 F1 | 	add	objptr, ##50744
14b34     F2 FA 61 FC | 	wrlong	result1, objptr
14b38     63 00 00 FF 
14b3c     38 E4 85 F1 | 	sub	objptr, ##50744
14b40     F2 FA 01 F6 | 	mov	result1, objptr
14b44     00 88 00 FF 
14b48     00 FA 45 F5 | 	or	result1, ##17825792
14b4c     63 00 00 FF 
14b50     3C E4 05 F1 | 	add	objptr, ##50748
14b54     F2 FA 61 FC | 	wrlong	result1, objptr
14b58     63 00 00 FF 
14b5c     3C E4 85 F1 | 	sub	objptr, ##50748
14b60     F2 FA 01 F6 | 	mov	result1, objptr
14b64     00 90 00 FF 
14b68     00 FA 45 F5 | 	or	result1, ##18874368
14b6c     63 00 00 FF 
14b70     40 E4 05 F1 | 	add	objptr, ##50752
14b74     F2 FA 61 FC | 	wrlong	result1, objptr
14b78     63 00 00 FF 
14b7c     40 E4 85 F1 | 	sub	objptr, ##50752
14b80     F2 FA 01 F6 | 	mov	result1, objptr
14b84     00 98 00 FF 
14b88     00 FA 45 F5 | 	or	result1, ##19922944
14b8c     63 00 00 FF 
14b90     44 E4 05 F1 | 	add	objptr, ##50756
14b94     F2 FA 61 FC | 	wrlong	result1, objptr
14b98     63 00 00 FF 
14b9c     44 E4 85 F1 | 	sub	objptr, ##50756
14ba0     F2 FA 01 F6 | 	mov	result1, objptr
14ba4     00 A0 00 FF 
14ba8     00 FA 45 F5 | 	or	result1, ##20971520
14bac     63 00 00 FF 
14bb0     48 E4 05 F1 | 	add	objptr, ##50760
14bb4     F2 FA 61 FC | 	wrlong	result1, objptr
14bb8     63 00 00 FF 
14bbc     48 E4 85 F1 | 	sub	objptr, ##50760
14bc0     F2 FA 01 F6 | 	mov	result1, objptr
14bc4     00 A8 00 FF 
14bc8     00 FA 45 F5 | 	or	result1, ##22020096
14bcc     63 00 00 FF 
14bd0     4C E4 05 F1 | 	add	objptr, ##50764
14bd4     F2 FA 61 FC | 	wrlong	result1, objptr
14bd8     63 00 00 FF 
14bdc     4C E4 85 F1 | 	sub	objptr, ##50764
14be0     F2 FA 01 F6 | 	mov	result1, objptr
14be4     00 B0 00 FF 
14be8     00 FA 45 F5 | 	or	result1, ##23068672
14bec     63 00 00 FF 
14bf0     50 E4 05 F1 | 	add	objptr, ##50768
14bf4     F2 FA 61 FC | 	wrlong	result1, objptr
14bf8     63 00 00 FF 
14bfc     50 E4 85 F1 | 	sub	objptr, ##50768
14c00     F2 FA 01 F6 | 	mov	result1, objptr
14c04     00 B8 00 FF 
14c08     00 FA 45 F5 | 	or	result1, ##24117248
14c0c     63 00 00 FF 
14c10     54 E4 05 F1 | 	add	objptr, ##50772
14c14     F2 FA 61 FC | 	wrlong	result1, objptr
14c18     63 00 00 FF 
14c1c     54 E4 85 F1 | 	sub	objptr, ##50772
14c20     F2 FA 01 F6 | 	mov	result1, objptr
14c24     37 FA 25 F4 | 	bith	result1, #55
14c28     63 00 00 FF 
14c2c     58 E4 05 F1 | 	add	objptr, ##50776
14c30     F2 FA 61 FC | 	wrlong	result1, objptr
14c34     63 00 00 FF 
14c38     58 E4 85 F1 | 	sub	objptr, ##50776
14c3c     F2 FA 01 F6 | 	mov	result1, objptr
14c40     00 C8 00 FF 
14c44     00 FA 45 F5 | 	or	result1, ##26214400
14c48     63 00 00 FF 
14c4c     5C E4 05 F1 | 	add	objptr, ##50780
14c50     F2 FA 61 FC | 	wrlong	result1, objptr
14c54     63 00 00 FF 
14c58     5C E4 85 F1 | 	sub	objptr, ##50780
14c5c     F2 FA 01 F6 | 	mov	result1, objptr
14c60     00 D0 00 FF 
14c64     00 FA 45 F5 | 	or	result1, ##27262976
14c68     63 00 00 FF 
14c6c     60 E4 05 F1 | 	add	objptr, ##50784
14c70     F2 FA 61 FC | 	wrlong	result1, objptr
14c74     63 00 00 FF 
14c78     60 E4 85 F1 | 	sub	objptr, ##50784
14c7c     F2 FA 01 F6 | 	mov	result1, objptr
14c80     00 D8 00 FF 
14c84     00 FA 45 F5 | 	or	result1, ##28311552
14c88     63 00 00 FF 
14c8c     64 E4 05 F1 | 	add	objptr, ##50788
14c90     F2 FA 61 FC | 	wrlong	result1, objptr
14c94     63 00 00 FF 
14c98     64 E4 85 F1 | 	sub	objptr, ##50788
14c9c     F2 FA 01 F6 | 	mov	result1, objptr
14ca0     56 FA 25 F4 | 	bith	result1, #86
14ca4     63 00 00 FF 
14ca8     68 E4 05 F1 | 	add	objptr, ##50792
14cac     F2 FA 61 FC | 	wrlong	result1, objptr
14cb0     63 00 00 FF 
14cb4     68 E4 85 F1 | 	sub	objptr, ##50792
14cb8     F2 FA 01 F6 | 	mov	result1, objptr
14cbc     00 E8 00 FF 
14cc0     00 FA 45 F5 | 	or	result1, ##30408704
14cc4     64 00 00 FF 
14cc8     30 E5 05 F1 | 	add	objptr, ##51504
14ccc     F2 FA 61 FC | 	wrlong	result1, objptr
14cd0     64 00 00 FF 
14cd4     30 E5 85 F1 | 	sub	objptr, ##51504
14cd8     F2 FA 01 F6 | 	mov	result1, objptr
14cdc     75 FA 25 F4 | 	bith	result1, #117
14ce0     63 00 00 FF 
14ce4     6C E4 05 F1 | 	add	objptr, ##50796
14ce8     F2 FA 61 FC | 	wrlong	result1, objptr
14cec     63 00 00 FF 
14cf0     6C E4 85 F1 | 	sub	objptr, ##50796
14cf4     F2 FA 01 F6 | 	mov	result1, objptr
14cf8     94 FA 25 F4 | 	bith	result1, #148
14cfc     63 00 00 FF 
14d00     80 E4 05 F1 | 	add	objptr, ##50816
14d04     F2 FA 61 FC | 	wrlong	result1, objptr
14d08     63 00 00 FF 
14d0c     80 E4 85 F1 | 	sub	objptr, ##50816
14d10     F2 FA 01 F6 | 	mov	result1, objptr
14d14     19 FA 25 F4 | 	bith	result1, #25
14d18     63 00 00 FF 
14d1c     70 E4 05 F1 | 	add	objptr, ##50800
14d20     F2 FA 61 FC | 	wrlong	result1, objptr
14d24     63 00 00 FF 
14d28     70 E4 85 F1 | 	sub	objptr, ##50800
14d2c     F2 FA 01 F6 | 	mov	result1, objptr
14d30     00 08 01 FF 
14d34     00 FA 45 F5 | 	or	result1, ##34603008
14d38     62 00 00 FF 
14d3c     8C E5 05 F1 | 	add	objptr, ##50572
14d40     F2 FA 61 FC | 	wrlong	result1, objptr
14d44     62 00 00 FF 
14d48     8C E5 85 F1 | 	sub	objptr, ##50572
14d4c     F2 FA 01 F6 | 	mov	result1, objptr
14d50     00 10 01 FF 
14d54     00 FA 45 F5 | 	or	result1, ##35651584
14d58     63 00 00 FF 
14d5c     74 E4 05 F1 | 	add	objptr, ##50804
14d60     F2 FA 61 FC | 	wrlong	result1, objptr
14d64     63 00 00 FF 
14d68     74 E4 85 F1 | 	sub	objptr, ##50804
14d6c     F2 FA 01 F6 | 	mov	result1, objptr
14d70     00 18 01 FF 
14d74     00 FA 45 F5 | 	or	result1, ##36700160
14d78     63 00 00 FF 
14d7c     78 E4 05 F1 | 	add	objptr, ##50808
14d80     F2 FA 61 FC | 	wrlong	result1, objptr
14d84     63 00 00 FF 
14d88     78 E4 85 F1 | 	sub	objptr, ##50808
14d8c     F2 FA 01 F6 | 	mov	result1, objptr
14d90     00 20 01 FF 
14d94     00 FA 45 F5 | 	or	result1, ##37748736
14d98     63 00 00 FF 
14d9c     7C E4 05 F1 | 	add	objptr, ##50812
14da0     F2 FA 61 FC | 	wrlong	result1, objptr
14da4     63 00 00 FF 
14da8     7C E4 85 F1 | 	sub	objptr, ##50812
14dac     F2 FA 01 F6 | 	mov	result1, objptr
14db0     00 28 01 FF 
14db4     00 FA 45 F5 | 	or	result1, ##38797312
14db8     63 00 00 FF 
14dbc     88 E4 05 F1 | 	add	objptr, ##50824
14dc0     F2 FA 61 FC | 	wrlong	result1, objptr
14dc4     63 00 00 FF 
14dc8     88 E4 85 F1 | 	sub	objptr, ##50824
14dcc     F2 FA 01 F6 | 	mov	result1, objptr
14dd0     00 30 01 FF 
14dd4     00 FA 45 F5 | 	or	result1, ##39845888
14dd8     63 00 00 FF 
14ddc     8C E4 05 F1 | 	add	objptr, ##50828
14de0     F2 FA 61 FC | 	wrlong	result1, objptr
14de4     63 00 00 FF 
14de8     8C E4 85 F1 | 	sub	objptr, ##50828
14dec     F2 FA 01 F6 | 	mov	result1, objptr
14df0     00 38 01 FF 
14df4     00 FA 45 F5 | 	or	result1, ##40894464
14df8     63 00 00 FF 
14dfc     90 E4 05 F1 | 	add	objptr, ##50832
14e00     F2 FA 61 FC | 	wrlong	result1, objptr
14e04     63 00 00 FF 
14e08     90 E4 85 F1 | 	sub	objptr, ##50832
14e0c     F2 FA 01 F6 | 	mov	result1, objptr
14e10     00 40 01 FF 
14e14     00 FA 45 F5 | 	or	result1, ##41943040
14e18     63 00 00 FF 
14e1c     94 E4 05 F1 | 	add	objptr, ##50836
14e20     F2 FA 61 FC | 	wrlong	result1, objptr
14e24     63 00 00 FF 
14e28     94 E4 85 F1 | 	sub	objptr, ##50836
14e2c     F2 FA 01 F6 | 	mov	result1, objptr
14e30     00 48 01 FF 
14e34     00 FA 45 F5 | 	or	result1, ##42991616
14e38     63 00 00 FF 
14e3c     9C E4 05 F1 | 	add	objptr, ##50844
14e40     F2 FA 61 FC | 	wrlong	result1, objptr
14e44     63 00 00 FF 
14e48     9C E4 85 F1 | 	sub	objptr, ##50844
14e4c     F2 FA 01 F6 | 	mov	result1, objptr
14e50     00 50 01 FF 
14e54     00 FA 45 F5 | 	or	result1, ##44040192
14e58     63 00 00 FF 
14e5c     A0 E4 05 F1 | 	add	objptr, ##50848
14e60     F2 FA 61 FC | 	wrlong	result1, objptr
14e64     63 00 00 FF 
14e68     A0 E4 85 F1 | 	sub	objptr, ##50848
14e6c     F2 FA 01 F6 | 	mov	result1, objptr
14e70     00 58 01 FF 
14e74     00 FA 45 F5 | 	or	result1, ##45088768
14e78     62 00 00 FF 
14e7c     A0 E5 05 F1 | 	add	objptr, ##50592
14e80     F2 FA 61 FC | 	wrlong	result1, objptr
14e84     62 00 00 FF 
14e88     A0 E5 85 F1 | 	sub	objptr, ##50592
14e8c     F2 FA 01 F6 | 	mov	result1, objptr
14e90     00 60 01 FF 
14e94     00 FA 45 F5 | 	or	result1, ##46137344
14e98     62 00 00 FF 
14e9c     D0 E5 05 F1 | 	add	objptr, ##50640
14ea0     F2 FA 61 FC | 	wrlong	result1, objptr
14ea4     62 00 00 FF 
14ea8     D0 E5 85 F1 | 	sub	objptr, ##50640
14eac     F2 FA 01 F6 | 	mov	result1, objptr
14eb0     00 68 01 FF 
14eb4     00 FA 45 F5 | 	or	result1, ##47185920
14eb8     62 00 00 FF 
14ebc     CC E5 05 F1 | 	add	objptr, ##50636
14ec0     F2 FA 61 FC | 	wrlong	result1, objptr
14ec4     62 00 00 FF 
14ec8     CC E5 85 F1 | 	sub	objptr, ##50636
14ecc     F2 FA 01 F6 | 	mov	result1, objptr
14ed0     00 70 01 FF 
14ed4     00 FA 45 F5 | 	or	result1, ##48234496
14ed8     62 00 00 FF 
14edc     70 E5 05 F1 | 	add	objptr, ##50544
14ee0     F2 FA 61 FC | 	wrlong	result1, objptr
14ee4     62 00 00 FF 
14ee8     70 E5 85 F1 | 	sub	objptr, ##50544
14eec     F2 FA 01 F6 | 	mov	result1, objptr
14ef0     00 78 01 FF 
14ef4     00 FA 45 F5 | 	or	result1, ##49283072
14ef8     62 00 00 FF 
14efc     74 E5 05 F1 | 	add	objptr, ##50548
14f00     F2 FA 61 FC | 	wrlong	result1, objptr
14f04     62 00 00 FF 
14f08     74 E5 85 F1 | 	sub	objptr, ##50548
14f0c     F2 FA 01 F6 | 	mov	result1, objptr
14f10     38 FA 25 F4 | 	bith	result1, #56
14f14     62 00 00 FF 
14f18     DC E5 05 F1 | 	add	objptr, ##50652
14f1c     F2 FA 61 FC | 	wrlong	result1, objptr
14f20     62 00 00 FF 
14f24     DC E5 85 F1 | 	sub	objptr, ##50652
14f28     F2 FA 01 F6 | 	mov	result1, objptr
14f2c     00 88 01 FF 
14f30     00 FA 45 F5 | 	or	result1, ##51380224
14f34     63 00 00 FF 
14f38     84 E4 05 F1 | 	add	objptr, ##50820
14f3c     F2 FA 61 FC | 	wrlong	result1, objptr
14f40     63 00 00 FF 
14f44     84 E4 85 F1 | 	sub	objptr, ##50820
14f48     F2 FA 01 F6 | 	mov	result1, objptr
14f4c     00 90 01 FF 
14f50     00 FA 45 F5 | 	or	result1, ##52428800
14f54     63 00 00 FF 
14f58     98 E4 05 F1 | 	add	objptr, ##50840
14f5c     F2 FA 61 FC | 	wrlong	result1, objptr
14f60     63 00 00 FF 
14f64     98 E4 85 F1 | 	sub	objptr, ##50840
14f68     F2 FA 01 F6 | 	mov	result1, objptr
14f6c     00 98 01 FF 
14f70     00 FA 45 F5 | 	or	result1, ##53477376
14f74     63 00 00 FF 
14f78     A4 E4 05 F1 | 	add	objptr, ##50852
14f7c     F2 FA 61 FC | 	wrlong	result1, objptr
14f80     63 00 00 FF 
14f84     A4 E4 85 F1 | 	sub	objptr, ##50852
14f88     F2 FA 01 F6 | 	mov	result1, objptr
14f8c     00 A0 01 FF 
14f90     00 FA 45 F5 | 	or	result1, ##54525952
14f94     63 00 00 FF 
14f98     A8 E4 05 F1 | 	add	objptr, ##50856
14f9c     F2 FA 61 FC | 	wrlong	result1, objptr
14fa0     63 00 00 FF 
14fa4     A8 E4 85 F1 | 	sub	objptr, ##50856
14fa8     F2 FA 01 F6 | 	mov	result1, objptr
14fac     00 A8 01 FF 
14fb0     00 FA 45 F5 | 	or	result1, ##55574528
14fb4     63 00 00 FF 
14fb8     AC E4 05 F1 | 	add	objptr, ##50860
14fbc     F2 FA 61 FC | 	wrlong	result1, objptr
14fc0     63 00 00 FF 
14fc4     AC E4 85 F1 | 	sub	objptr, ##50860
14fc8     F2 FA 01 F6 | 	mov	result1, objptr
14fcc     00 B0 01 FF 
14fd0     00 FA 45 F5 | 	or	result1, ##56623104
14fd4     63 00 00 FF 
14fd8     B0 E4 05 F1 | 	add	objptr, ##50864
14fdc     F2 FA 61 FC | 	wrlong	result1, objptr
14fe0     63 00 00 FF 
14fe4     B0 E4 85 F1 | 	sub	objptr, ##50864
14fe8     F2 FA 01 F6 | 	mov	result1, objptr
14fec     00 B8 01 FF 
14ff0     00 FA 45 F5 | 	or	result1, ##57671680
14ff4     63 00 00 FF 
14ff8     B4 E4 05 F1 | 	add	objptr, ##50868
14ffc     F2 FA 61 FC | 	wrlong	result1, objptr
15000     63 00 00 FF 
15004     B4 E4 85 F1 | 	sub	objptr, ##50868
15008     F2 FA 01 F6 | 	mov	result1, objptr
1500c     57 FA 25 F4 | 	bith	result1, #87
15010     63 00 00 FF 
15014     B8 E4 05 F1 | 	add	objptr, ##50872
15018     F2 FA 61 FC | 	wrlong	result1, objptr
1501c     63 00 00 FF 
15020     B8 E4 85 F1 | 	sub	objptr, ##50872
15024     F2 FA 01 F6 | 	mov	result1, objptr
15028     94 FA 25 F4 | 	bith	result1, #148
1502c     63 00 00 FF 
15030     80 E4 05 F1 | 	add	objptr, ##50816
15034     F2 FA 61 FC | 	wrlong	result1, objptr
15038     63 00 00 FF 
1503c     80 E4 85 F1 | 	sub	objptr, ##50816
15040     F2 FA 01 F6 | 	mov	result1, objptr
15044     00 C8 01 FF 
15048     00 FA 45 F5 | 	or	result1, ##59768832
1504c     63 00 00 FF 
15050     C0 E4 05 F1 | 	add	objptr, ##50880
15054     F2 FA 61 FC | 	wrlong	result1, objptr
15058     63 00 00 FF 
1505c     C0 E4 85 F1 | 	sub	objptr, ##50880
15060     F2 FA 01 F6 | 	mov	result1, objptr
15064     00 D0 01 FF 
15068     00 FA 45 F5 | 	or	result1, ##60817408
1506c     63 00 00 FF 
15070     BC E4 05 F1 | 	add	objptr, ##50876
15074     F2 FA 61 FC | 	wrlong	result1, objptr
15078     63 00 00 FF 
1507c     BC E4 85 F1 | 	sub	objptr, ##50876
15080     F2 FA 01 F6 | 	mov	result1, objptr
15084     00 D8 01 FF 
15088     00 FA 45 F5 | 	or	result1, ##61865984
1508c     63 00 00 FF 
15090     D4 E4 05 F1 | 	add	objptr, ##50900
15094     F2 FA 61 FC | 	wrlong	result1, objptr
15098     63 00 00 FF 
1509c     D4 E4 85 F1 | 	sub	objptr, ##50900
150a0     F2 FA 01 F6 | 	mov	result1, objptr
150a4     76 FA 25 F4 | 	bith	result1, #118
150a8     63 00 00 FF 
150ac     D8 E4 05 F1 | 	add	objptr, ##50904
150b0     F2 FA 61 FC | 	wrlong	result1, objptr
150b4     63 00 00 FF 
150b8     D8 E4 85 F1 | 	sub	objptr, ##50904
150bc     F2 FA 01 F6 | 	mov	result1, objptr
150c0     00 E8 01 FF 
150c4     00 FA 45 F5 | 	or	result1, ##63963136
150c8     63 00 00 FF 
150cc     C4 E4 05 F1 | 	add	objptr, ##50884
150d0     F2 FA 61 FC | 	wrlong	result1, objptr
150d4     63 00 00 FF 
150d8     C4 E4 85 F1 | 	sub	objptr, ##50884
150dc     F2 FA 01 F6 | 	mov	result1, objptr
150e0     95 FA 25 F4 | 	bith	result1, #149
150e4     63 00 00 FF 
150e8     C8 E4 05 F1 | 	add	objptr, ##50888
150ec     F2 FA 61 FC | 	wrlong	result1, objptr
150f0     63 00 00 FF 
150f4     C8 E4 85 F1 | 	sub	objptr, ##50888
150f8     F2 FA 01 F6 | 	mov	result1, objptr
150fc     B4 FA 25 F4 | 	bith	result1, #180
15100     63 00 00 FF 
15104     CC E4 05 F1 | 	add	objptr, ##50892
15108     F2 FA 61 FC | 	wrlong	result1, objptr
1510c     63 00 00 FF 
15110     CC E4 85 F1 | 	sub	objptr, ##50892
15114     F2 FA 01 F6 | 	mov	result1, objptr
15118     1A FA 25 F4 | 	bith	result1, #26
1511c     63 00 00 FF 
15120     D0 E4 05 F1 | 	add	objptr, ##50896
15124     F2 FA 61 FC | 	wrlong	result1, objptr
15128     63 00 00 FF 
1512c     D0 E4 85 F1 | 	sub	objptr, ##50896
15130     F2 FA 01 F6 | 	mov	result1, objptr
15134     00 08 02 FF 
15138     00 FA 45 F5 | 	or	result1, ##68157440
1513c     63 00 00 FF 
15140     E0 E4 05 F1 | 	add	objptr, ##50912
15144     F2 FA 61 FC | 	wrlong	result1, objptr
15148     63 00 00 FF 
1514c     E0 E4 85 F1 | 	sub	objptr, ##50912
15150     F2 FA 01 F6 | 	mov	result1, objptr
15154     00 10 02 FF 
15158     00 FA 45 F5 | 	or	result1, ##69206016
1515c     63 00 00 FF 
15160     DC E4 05 F1 | 	add	objptr, ##50908
15164     F2 FA 61 FC | 	wrlong	result1, objptr
15168     63 00 00 FF 
1516c     DC E4 85 F1 | 	sub	objptr, ##50908
15170     F2 FA 01 F6 | 	mov	result1, objptr
15174     00 18 02 FF 
15178     00 FA 45 F5 | 	or	result1, ##70254592
1517c     63 00 00 FF 
15180     EC E4 05 F1 | 	add	objptr, ##50924
15184     F2 FA 61 FC | 	wrlong	result1, objptr
15188     63 00 00 FF 
1518c     EC E4 85 F1 | 	sub	objptr, ##50924
15190     F2 FA 01 F6 | 	mov	result1, objptr
15194     00 20 02 FF 
15198     00 FA 45 F5 | 	or	result1, ##71303168
1519c     63 00 00 FF 
151a0     E8 E4 05 F1 | 	add	objptr, ##50920
151a4     F2 FA 61 FC | 	wrlong	result1, objptr
151a8     63 00 00 FF 
151ac     E8 E4 85 F1 | 	sub	objptr, ##50920
151b0     F2 FA 01 F6 | 	mov	result1, objptr
151b4     00 28 02 FF 
151b8     00 FA 45 F5 | 	or	result1, ##72351744
151bc     63 00 00 FF 
151c0     E4 E4 05 F1 | 	add	objptr, ##50916
151c4     F2 FA 61 FC | 	wrlong	result1, objptr
151c8     63 00 00 FF 
151cc     E4 E4 85 F1 | 	sub	objptr, ##50916
151d0     F2 FA 01 F6 | 	mov	result1, objptr
151d4     00 30 02 FF 
151d8     00 FA 45 F5 | 	or	result1, ##73400320
151dc     63 00 00 FF 
151e0     F0 E4 05 F1 | 	add	objptr, ##50928
151e4     F2 FA 61 FC | 	wrlong	result1, objptr
151e8     63 00 00 FF 
151ec     F0 E4 85 F1 | 	sub	objptr, ##50928
151f0     F2 FA 01 F6 | 	mov	result1, objptr
151f4     00 38 02 FF 
151f8     00 FA 45 F5 | 	or	result1, ##74448896
151fc     63 00 00 FF 
15200     F4 E4 05 F1 | 	add	objptr, ##50932
15204     F2 FA 61 FC | 	wrlong	result1, objptr
15208     63 00 00 FF 
1520c     F4 E4 85 F1 | 	sub	objptr, ##50932
15210     F2 FA 01 F6 | 	mov	result1, objptr
15214     00 40 02 FF 
15218     00 FA 45 F5 | 	or	result1, ##75497472
1521c     62 00 00 FF 
15220     88 E5 05 F1 | 	add	objptr, ##50568
15224     F2 FA 61 FC | 	wrlong	result1, objptr
15228     62 00 00 FF 
1522c     88 E5 85 F1 | 	sub	objptr, ##50568
15230     F2 FA 01 F6 | 	mov	result1, objptr
15234     00 48 02 FF 
15238     00 FA 45 F5 | 	or	result1, ##76546048
1523c     63 00 00 FF 
15240     0C E5 05 F1 | 	add	objptr, ##50956
15244     F2 FA 61 FC | 	wrlong	result1, objptr
15248     63 00 00 FF 
1524c     0C E5 85 F1 | 	sub	objptr, ##50956
15250     F2 FA 01 F6 | 	mov	result1, objptr
15254     00 50 02 FF 
15258     00 FA 45 F5 | 	or	result1, ##77594624
1525c     63 00 00 FF 
15260     1C E5 05 F1 | 	add	objptr, ##50972
15264     F2 FA 61 FC | 	wrlong	result1, objptr
15268     63 00 00 FF 
1526c     1C E5 85 F1 | 	sub	objptr, ##50972
15270     F2 FA 01 F6 | 	mov	result1, objptr
15274     00 58 02 FF 
15278     00 FA 45 F5 | 	or	result1, ##78643200
1527c     63 00 00 FF 
15280     20 E5 05 F1 | 	add	objptr, ##50976
15284     F2 FA 61 FC | 	wrlong	result1, objptr
15288     63 00 00 FF 
1528c     20 E5 85 F1 | 	sub	objptr, ##50976
15290     F2 FA 01 F6 | 	mov	result1, objptr
15294     00 60 02 FF 
15298     00 FA 45 F5 | 	or	result1, ##79691776
1529c     63 00 00 FF 
152a0     18 E5 05 F1 | 	add	objptr, ##50968
152a4     F2 FA 61 FC | 	wrlong	result1, objptr
152a8     63 00 00 FF 
152ac     18 E5 85 F1 | 	sub	objptr, ##50968
152b0     F2 FA 01 F6 | 	mov	result1, objptr
152b4     00 68 02 FF 
152b8     00 FA 45 F5 | 	or	result1, ##80740352
152bc     63 00 00 FF 
152c0     10 E5 05 F1 | 	add	objptr, ##50960
152c4     F2 FA 61 FC | 	wrlong	result1, objptr
152c8     63 00 00 FF 
152cc     10 E5 85 F1 | 	sub	objptr, ##50960
152d0     F2 FA 01 F6 | 	mov	result1, objptr
152d4     00 70 02 FF 
152d8     00 FA 45 F5 | 	or	result1, ##81788928
152dc     63 00 00 FF 
152e0     14 E5 05 F1 | 	add	objptr, ##50964
152e4     F2 FA 61 FC | 	wrlong	result1, objptr
152e8     63 00 00 FF 
152ec     14 E5 85 F1 | 	sub	objptr, ##50964
152f0     F2 FA 01 F6 | 	mov	result1, objptr
152f4     00 78 02 FF 
152f8     00 FA 45 F5 | 	or	result1, ##82837504
152fc     63 00 00 FF 
15300     24 E5 05 F1 | 	add	objptr, ##50980
15304     F2 FA 61 FC | 	wrlong	result1, objptr
15308     63 00 00 FF 
1530c     24 E5 85 F1 | 	sub	objptr, ##50980
15310     F2 FA 01 F6 | 	mov	result1, objptr
15314     00 80 02 FF 
15318     00 FA 45 F5 | 	or	result1, ##83886080
1531c     63 00 00 FF 
15320     28 E5 05 F1 | 	add	objptr, ##50984
15324     F2 FA 61 FC | 	wrlong	result1, objptr
15328     63 00 00 FF 
1532c     28 E5 85 F1 | 	sub	objptr, ##50984
15330     F2 FA 01 F6 | 	mov	result1, objptr
15334     00 88 02 FF 
15338     00 FA 45 F5 | 	or	result1, ##84934656
1533c     63 00 00 FF 
15340     2C E5 05 F1 | 	add	objptr, ##50988
15344     F2 FA 61 FC | 	wrlong	result1, objptr
15348     63 00 00 FF 
1534c     2C E5 85 F1 | 	sub	objptr, ##50988
15350     F2 FA 01 F6 | 	mov	result1, objptr
15354     00 90 02 FF 
15358     00 FA 45 F5 | 	or	result1, ##85983232
1535c     63 00 00 FF 
15360     30 E5 05 F1 | 	add	objptr, ##50992
15364     F2 FA 61 FC | 	wrlong	result1, objptr
15368     63 00 00 FF 
1536c     30 E5 85 F1 | 	sub	objptr, ##50992
15370     F2 FA 01 F6 | 	mov	result1, objptr
15374     00 98 02 FF 
15378     00 FA 45 F5 | 	or	result1, ##87031808
1537c     63 00 00 FF 
15380     34 E5 05 F1 | 	add	objptr, ##50996
15384     F2 FA 61 FC | 	wrlong	result1, objptr
15388     63 00 00 FF 
1538c     34 E5 85 F1 | 	sub	objptr, ##50996
15390     F2 FA 01 F6 | 	mov	result1, objptr
15394     00 A0 02 FF 
15398     00 FA 45 F5 | 	or	result1, ##88080384
1539c     63 00 00 FF 
153a0     38 E5 05 F1 | 	add	objptr, ##51000
153a4     F2 FA 61 FC | 	wrlong	result1, objptr
153a8     63 00 00 FF 
153ac     38 E5 85 F1 | 	sub	objptr, ##51000
153b0     F2 FA 01 F6 | 	mov	result1, objptr
153b4     00 A8 02 FF 
153b8     00 FA 45 F5 | 	or	result1, ##89128960
153bc     63 00 00 FF 
153c0     3C E5 05 F1 | 	add	objptr, ##51004
153c4     F2 FA 61 FC | 	wrlong	result1, objptr
153c8     63 00 00 FF 
153cc     3C E5 85 F1 | 	sub	objptr, ##51004
153d0     F2 FA 01 F6 | 	mov	result1, objptr
153d4     00 B0 02 FF 
153d8     00 FA 45 F5 | 	or	result1, ##90177536
153dc     63 00 00 FF 
153e0     40 E5 05 F1 | 	add	objptr, ##51008
153e4     F2 FA 61 FC | 	wrlong	result1, objptr
153e8     63 00 00 FF 
153ec     40 E5 85 F1 | 	sub	objptr, ##51008
153f0     F2 FA 01 F6 | 	mov	result1, objptr
153f4     00 B8 02 FF 
153f8     00 FA 45 F5 | 	or	result1, ##91226112
153fc     63 00 00 FF 
15400     4C E5 05 F1 | 	add	objptr, ##51020
15404     F2 FA 61 FC | 	wrlong	result1, objptr
15408     63 00 00 FF 
1540c     4C E5 85 F1 | 	sub	objptr, ##51020
15410     F2 FA 01 F6 | 	mov	result1, objptr
15414     00 C0 02 FF 
15418     00 FA 45 F5 | 	or	result1, ##92274688
1541c     63 00 00 FF 
15420     44 E5 05 F1 | 	add	objptr, ##51012
15424     F2 FA 61 FC | 	wrlong	result1, objptr
15428     63 00 00 FF 
1542c     44 E5 85 F1 | 	sub	objptr, ##51012
15430     F2 FA 01 F6 | 	mov	result1, objptr
15434     00 C8 02 FF 
15438     00 FA 45 F5 | 	or	result1, ##93323264
1543c     63 00 00 FF 
15440     48 E5 05 F1 | 	add	objptr, ##51016
15444     F2 FA 61 FC | 	wrlong	result1, objptr
15448     63 00 00 FF 
1544c     48 E5 85 F1 | 	sub	objptr, ##51016
15450     F2 FA 01 F6 | 	mov	result1, objptr
15454     00 D0 02 FF 
15458     00 FA 45 F5 | 	or	result1, ##94371840
1545c     63 00 00 FF 
15460     50 E5 05 F1 | 	add	objptr, ##51024
15464     F2 FA 61 FC | 	wrlong	result1, objptr
15468     63 00 00 FF 
1546c     50 E5 85 F1 | 	sub	objptr, ##51024
15470     F2 FA 01 F6 | 	mov	result1, objptr
15474     00 D8 02 FF 
15478     00 FA 45 F5 | 	or	result1, ##95420416
1547c     63 00 00 FF 
15480     F8 E4 05 F1 | 	add	objptr, ##50936
15484     F2 FA 61 FC | 	wrlong	result1, objptr
15488     63 00 00 FF 
1548c     F8 E4 85 F1 | 	sub	objptr, ##50936
15490     F2 FA 01 F6 | 	mov	result1, objptr
15494     00 E0 02 FF 
15498     00 FA 45 F5 | 	or	result1, ##96468992
1549c     63 00 00 FF 
154a0     00 E5 05 F1 | 	add	objptr, ##50944
154a4     F2 FA 61 FC | 	wrlong	result1, objptr
154a8     63 00 00 FF 
154ac     00 E5 85 F1 | 	sub	objptr, ##50944
154b0     F2 FA 01 F6 | 	mov	result1, objptr
154b4     00 E8 02 FF 
154b8     00 FA 45 F5 | 	or	result1, ##97517568
154bc     63 00 00 FF 
154c0     04 E5 05 F1 | 	add	objptr, ##50948
154c4     F2 FA 61 FC | 	wrlong	result1, objptr
154c8     63 00 00 FF 
154cc     04 E5 85 F1 | 	sub	objptr, ##50948
154d0     F2 FA 01 F6 | 	mov	result1, objptr
154d4     00 F0 02 FF 
154d8     00 FA 45 F5 | 	or	result1, ##98566144
154dc     63 00 00 FF 
154e0     54 E5 05 F1 | 	add	objptr, ##51028
154e4     F2 FA 61 FC | 	wrlong	result1, objptr
154e8     63 00 00 FF 
154ec     54 E5 85 F1 | 	sub	objptr, ##51028
154f0     F2 FA 01 F6 | 	mov	result1, objptr
154f4     00 F8 02 FF 
154f8     00 FA 45 F5 | 	or	result1, ##99614720
154fc     63 00 00 FF 
15500     58 E5 05 F1 | 	add	objptr, ##51032
15504     F2 FA 61 FC | 	wrlong	result1, objptr
15508     63 00 00 FF 
1550c     58 E5 85 F1 | 	sub	objptr, ##51032
15510     F2 FA 01 F6 | 	mov	result1, objptr
15514     39 FA 25 F4 | 	bith	result1, #57
15518     63 00 00 FF 
1551c     5C E5 05 F1 | 	add	objptr, ##51036
15520     F2 FA 61 FC | 	wrlong	result1, objptr
15524     63 00 00 FF 
15528     5C E5 85 F1 | 	sub	objptr, ##51036
1552c                 | _init_commands_ret
1552c     2D 00 64 FD | 	ret
15530                 | 
15530                 | ' 
15530                 | ' ''--------------------------------Error strings -------------------------------------
15530                 | ' 
15530                 | ' sub init_error_strings
15530                 | _init_error_strings
15530     44 01 00 FF 
15534     51 01 06 F6 | 	mov	_var01, ##@LR__4611
15538     64 00 00 FF 
1553c     50 E5 05 F1 | 	add	objptr, ##51536
15540     F2 00 62 FC | 	wrlong	_var01, objptr
15544     44 01 00 FF 
15548     52 01 06 F6 | 	mov	_var01, ##@LR__4612
1554c     04 E4 05 F1 | 	add	objptr, #4
15550     F2 00 62 FC | 	wrlong	_var01, objptr
15554     44 01 00 FF 
15558     77 01 06 F6 | 	mov	_var01, ##@LR__4613
1555c     04 E4 05 F1 | 	add	objptr, #4
15560     F2 00 62 FC | 	wrlong	_var01, objptr
15564     44 01 00 FF 
15568     98 01 06 F6 | 	mov	_var01, ##@LR__4614
1556c     04 E4 05 F1 | 	add	objptr, #4
15570     F2 00 62 FC | 	wrlong	_var01, objptr
15574     44 01 00 FF 
15578     B2 01 06 F6 | 	mov	_var01, ##@LR__4615
1557c     04 E4 05 F1 | 	add	objptr, #4
15580     F2 00 62 FC | 	wrlong	_var01, objptr
15584     44 01 00 FF 
15588     CE 01 06 F6 | 	mov	_var01, ##@LR__4616
1558c     04 E4 05 F1 | 	add	objptr, #4
15590     F2 00 62 FC | 	wrlong	_var01, objptr
15594     44 01 00 FF 
15598     F0 01 06 F6 | 	mov	_var01, ##@LR__4617
1559c     04 E4 05 F1 | 	add	objptr, #4
155a0     F2 00 62 FC | 	wrlong	_var01, objptr
155a4     45 01 00 FF 
155a8     1E 00 06 F6 | 	mov	_var01, ##@LR__4618
155ac     04 E4 05 F1 | 	add	objptr, #4
155b0     F2 00 62 FC | 	wrlong	_var01, objptr
155b4     45 01 00 FF 
155b8     49 00 06 F6 | 	mov	_var01, ##@LR__4619
155bc     04 E4 05 F1 | 	add	objptr, #4
155c0     F2 00 62 FC | 	wrlong	_var01, objptr
155c4     45 01 00 FF 
155c8     62 00 06 F6 | 	mov	_var01, ##@LR__4620
155cc     04 E4 05 F1 | 	add	objptr, #4
155d0     F2 00 62 FC | 	wrlong	_var01, objptr
155d4     45 01 00 FF 
155d8     83 00 06 F6 | 	mov	_var01, ##@LR__4621
155dc     04 E4 05 F1 | 	add	objptr, #4
155e0     F2 00 62 FC | 	wrlong	_var01, objptr
155e4     45 01 00 FF 
155e8     9A 00 06 F6 | 	mov	_var01, ##@LR__4622
155ec     04 E4 05 F1 | 	add	objptr, #4
155f0     F2 00 62 FC | 	wrlong	_var01, objptr
155f4     45 01 00 FF 
155f8     B8 00 06 F6 | 	mov	_var01, ##@LR__4623
155fc     04 E4 05 F1 | 	add	objptr, #4
15600     F2 00 62 FC | 	wrlong	_var01, objptr
15604     45 01 00 FF 
15608     DC 00 06 F6 | 	mov	_var01, ##@LR__4624
1560c     04 E4 05 F1 | 	add	objptr, #4
15610     F2 00 62 FC | 	wrlong	_var01, objptr
15614     45 01 00 FF 
15618     03 01 06 F6 | 	mov	_var01, ##@LR__4625
1561c     04 E4 05 F1 | 	add	objptr, #4
15620     F2 00 62 FC | 	wrlong	_var01, objptr
15624     45 01 00 FF 
15628     1F 01 06 F6 | 	mov	_var01, ##@LR__4626
1562c     04 E4 05 F1 | 	add	objptr, #4
15630     F2 00 62 FC | 	wrlong	_var01, objptr
15634     45 01 00 FF 
15638     30 01 06 F6 | 	mov	_var01, ##@LR__4627
1563c     04 E4 05 F1 | 	add	objptr, #4
15640     F2 00 62 FC | 	wrlong	_var01, objptr
15644     45 01 00 FF 
15648     40 01 06 F6 | 	mov	_var01, ##@LR__4628
1564c     04 E4 05 F1 | 	add	objptr, #4
15650     F2 00 62 FC | 	wrlong	_var01, objptr
15654     45 01 00 FF 
15658     5B 01 06 F6 | 	mov	_var01, ##@LR__4629
1565c     04 E4 05 F1 | 	add	objptr, #4
15660     F2 00 62 FC | 	wrlong	_var01, objptr
15664     45 01 00 FF 
15668     6D 01 06 F6 | 	mov	_var01, ##@LR__4630
1566c     04 E4 05 F1 | 	add	objptr, #4
15670     F2 00 62 FC | 	wrlong	_var01, objptr
15674     45 01 00 FF 
15678     85 01 06 F6 | 	mov	_var01, ##@LR__4631
1567c     04 E4 05 F1 | 	add	objptr, #4
15680     F2 00 62 FC | 	wrlong	_var01, objptr
15684     45 01 00 FF 
15688     99 01 06 F6 | 	mov	_var01, ##@LR__4632
1568c     04 E4 05 F1 | 	add	objptr, #4
15690     F2 00 62 FC | 	wrlong	_var01, objptr
15694     45 01 00 FF 
15698     A9 01 06 F6 | 	mov	_var01, ##@LR__4633
1569c     04 E4 05 F1 | 	add	objptr, #4
156a0     F2 00 62 FC | 	wrlong	_var01, objptr
156a4     45 01 00 FF 
156a8     C6 01 06 F6 | 	mov	_var01, ##@LR__4634
156ac     04 E4 05 F1 | 	add	objptr, #4
156b0     F2 00 62 FC | 	wrlong	_var01, objptr
156b4     45 01 00 FF 
156b8     D7 01 06 F6 | 	mov	_var01, ##@LR__4635
156bc     04 E4 05 F1 | 	add	objptr, #4
156c0     F2 00 62 FC | 	wrlong	_var01, objptr
156c4     45 01 00 FF 
156c8     E8 01 06 F6 | 	mov	_var01, ##@LR__4636
156cc     04 E4 05 F1 | 	add	objptr, #4
156d0     F2 00 62 FC | 	wrlong	_var01, objptr
156d4     46 01 00 FF 
156d8     13 00 06 F6 | 	mov	_var01, ##@LR__4637
156dc     04 E4 05 F1 | 	add	objptr, #4
156e0     F2 00 62 FC | 	wrlong	_var01, objptr
156e4     46 01 00 FF 
156e8     2F 00 06 F6 | 	mov	_var01, ##@LR__4638
156ec     04 E4 05 F1 | 	add	objptr, #4
156f0     F2 00 62 FC | 	wrlong	_var01, objptr
156f4     46 01 00 FF 
156f8     45 00 06 F6 | 	mov	_var01, ##@LR__4639
156fc     04 E4 05 F1 | 	add	objptr, #4
15700     F2 00 62 FC | 	wrlong	_var01, objptr
15704     46 01 00 FF 
15708     52 00 06 F6 | 	mov	_var01, ##@LR__4640
1570c     04 E4 05 F1 | 	add	objptr, #4
15710     F2 00 62 FC | 	wrlong	_var01, objptr
15714     46 01 00 FF 
15718     64 00 06 F6 | 	mov	_var01, ##@LR__4641
1571c     04 E4 05 F1 | 	add	objptr, #4
15720     F2 00 62 FC | 	wrlong	_var01, objptr
15724     46 01 00 FF 
15728     75 00 06 F6 | 	mov	_var01, ##@LR__4642
1572c     04 E4 05 F1 | 	add	objptr, #4
15730     F2 00 62 FC | 	wrlong	_var01, objptr
15734     46 01 00 FF 
15738     91 00 06 F6 | 	mov	_var01, ##@LR__4643
1573c     04 E4 05 F1 | 	add	objptr, #4
15740     F2 00 62 FC | 	wrlong	_var01, objptr
15744     46 01 00 FF 
15748     A2 00 06 F6 | 	mov	_var01, ##@LR__4644
1574c     04 E4 05 F1 | 	add	objptr, #4
15750     F2 00 62 FC | 	wrlong	_var01, objptr
15754     46 01 00 FF 
15758     B1 00 06 F6 | 	mov	_var01, ##@LR__4645
1575c     04 E4 05 F1 | 	add	objptr, #4
15760     F2 00 62 FC | 	wrlong	_var01, objptr
15764     46 01 00 FF 
15768     CC 00 06 F6 | 	mov	_var01, ##@LR__4646
1576c     04 E4 05 F1 | 	add	objptr, #4
15770     F2 00 62 FC | 	wrlong	_var01, objptr
15774     46 01 00 FF 
15778     00 01 06 F6 | 	mov	_var01, ##@LR__4647
1577c     04 E4 05 F1 | 	add	objptr, #4
15780     F2 00 62 FC | 	wrlong	_var01, objptr
15784     46 01 00 FF 
15788     19 01 06 F6 | 	mov	_var01, ##@LR__4648
1578c     04 E4 05 F1 | 	add	objptr, #4
15790     F2 00 62 FC | 	wrlong	_var01, objptr
15794     46 01 00 FF 
15798     35 01 06 F6 | 	mov	_var01, ##@LR__4649
1579c     04 E4 05 F1 | 	add	objptr, #4
157a0     F2 00 62 FC | 	wrlong	_var01, objptr
157a4     46 01 00 FF 
157a8     53 01 06 F6 | 	mov	_var01, ##@LR__4650
157ac     04 E4 05 F1 | 	add	objptr, #4
157b0     F2 00 62 FC | 	wrlong	_var01, objptr
157b4     46 01 00 FF 
157b8     6C 01 06 F6 | 	mov	_var01, ##@LR__4651
157bc     04 E4 05 F1 | 	add	objptr, #4
157c0     F2 00 62 FC | 	wrlong	_var01, objptr
157c4     46 01 00 FF 
157c8     8B 01 06 F6 | 	mov	_var01, ##@LR__4652
157cc     04 E4 05 F1 | 	add	objptr, #4
157d0     F2 00 62 FC | 	wrlong	_var01, objptr
157d4     46 01 00 FF 
157d8     9A 01 06 F6 | 	mov	_var01, ##@LR__4653
157dc     04 E4 05 F1 | 	add	objptr, #4
157e0     F2 00 62 FC | 	wrlong	_var01, objptr
157e4     46 01 00 FF 
157e8     C8 01 06 F6 | 	mov	_var01, ##@LR__4654
157ec     04 E4 05 F1 | 	add	objptr, #4
157f0     F2 00 62 FC | 	wrlong	_var01, objptr
157f4     46 01 00 FF 
157f8     D6 01 06 F6 | 	mov	_var01, ##@LR__4655
157fc     04 E4 05 F1 | 	add	objptr, #4
15800     F2 00 62 FC | 	wrlong	_var01, objptr
15804     46 01 00 FF 
15808     EB 01 06 F6 | 	mov	_var01, ##@LR__4656
1580c     04 E4 05 F1 | 	add	objptr, #4
15810     F2 00 62 FC | 	wrlong	_var01, objptr
15814     47 01 00 FF 
15818     0F 00 06 F6 | 	mov	_var01, ##@LR__4657
1581c     04 E4 05 F1 | 	add	objptr, #4
15820     F2 00 62 FC | 	wrlong	_var01, objptr
15824     47 01 00 FF 
15828     26 00 06 F6 | 	mov	_var01, ##@LR__4658
1582c     04 E4 05 F1 | 	add	objptr, #4
15830     F2 00 62 FC | 	wrlong	_var01, objptr
15834     47 01 00 FF 
15838     39 00 06 F6 | 	mov	_var01, ##@LR__4659
1583c     04 E4 05 F1 | 	add	objptr, #4
15840     F2 00 62 FC | 	wrlong	_var01, objptr
15844     47 01 00 FF 
15848     50 00 06 F6 | 	mov	_var01, ##@LR__4660
1584c     04 E4 05 F1 | 	add	objptr, #4
15850     F2 00 62 FC | 	wrlong	_var01, objptr
15854     65 00 00 FF 
15858     14 E4 85 F1 | 	sub	objptr, ##51732
1585c                 | _init_error_strings_ret
1585c     2D 00 64 FD | 	ret
15860                 | 
15860                 | '         
15860                 | ' sub printerror(err as integer)
15860                 | _printerror
15860     01 4A 05 F6 | 	mov	COUNT_, #1
15864     A8 00 A0 FD | 	call	#pushregs_
15868     09 1F 02 F6 | 	mov	local01, arg01
1586c     47 01 00 FF 
15870     69 12 06 F6 | 	mov	arg01, ##@LR__4661
15874     E4 24 B0 FD | 	call	#_hg010b_spin2_write
15878     0F 13 02 F6 | 	mov	arg01, local01
1587c     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
15880     FD 12 02 F6 | 	mov	arg01, result1
15884     D4 24 B0 FD | 	call	#_hg010b_spin2_write
15888     47 01 00 FF 
1588c     70 12 06 F6 | 	mov	arg01, ##@LR__4662
15890     C8 24 B0 FD | 	call	#_hg010b_spin2_write
15894     02 1E 66 F0 | 	shl	local01, #2
15898     64 00 00 FF 
1589c     50 E5 05 F1 | 	add	objptr, ##51536
158a0     F2 1E 02 F1 | 	add	local01, objptr
158a4     0F 13 02 FB | 	rdlong	arg01, local01
158a8     64 00 00 FF 
158ac     50 E5 85 F1 | 	sub	objptr, ##51536
158b0                 | ' 
158b0                 | ' write(text)
158b0     A8 24 B0 FD | 	call	#_hg010b_spin2_write
158b4                 | ' crlf
158b4     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
158b8     A7 F0 03 F6 | 	mov	ptra, fp
158bc     B2 00 A0 FD | 	call	#popregs_
158c0                 | _printerror_ret
158c0     2D 00 64 FD | 	ret
158c4                 | 
158c4                 | ' 
158c4                 | ' '' ------------------------------- Hardware start/stop/initialization 
158c4                 | ' 
158c4                 | ' sub startpsram
158c4                 | _startpsram
158c4     00 12 06 F6 | 	mov	arg01, #0
158c8     0A 14 C6 F9 | 	decod	arg02, #10
158cc     0B 16 06 F6 | 	mov	arg03, #11
158d0     07 18 06 F6 | 	mov	arg04, #7
158d4     0B 00 00 FF 
158d8     C0 E4 05 F1 | 	add	objptr, ##5824
158dc     88 27 B0 FD | 	call	#_psram_spin2_startx
158e0     4B 00 00 FF 
158e4     1C E4 05 F1 | 	add	objptr, ##38428
158e8     F2 FA 61 FC | 	wrlong	result1, objptr
158ec                 | '     return $7FF00 + cog*12
158ec     0C E4 05 F1 | 	add	objptr, #12
158f0     FF 03 80 FF 
158f4     F2 00 6A FC | 	wrlong	##524032, objptr
158f8     56 00 00 FF 
158fc     E8 E4 85 F1 | 	sub	objptr, ##44264
15900                 | _startpsram_ret
15900     2D 00 64 FD | 	ret
15904                 | 
15904                 | ' 
15904                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
15904                 | _startvideo
15904     01 4A 05 F6 | 	mov	COUNT_, #1
15908     A8 00 A0 FD | 	call	#pushregs_
1590c     56 00 00 FF 
15910     E8 E4 05 F1 | 	add	objptr, ##44264
15914     F2 18 02 FB | 	rdlong	arg04, objptr
15918     56 00 00 FF 
1591c     E8 E4 85 F1 | 	sub	objptr, ##44264
15920     0A 13 02 F6 | 	mov	arg01, arg02
15924     0C 15 02 F6 | 	mov	arg02, arg04
15928     50 0F B0 FD | 	call	#_hg010b_spin2_start
1592c     56 00 00 FF 
15930     D4 E4 05 F1 | 	add	objptr, ##44244
15934     F2 FA 61 FC | 	wrlong	result1, objptr
15938                 | ' 
15938                 | ' videocog=v.start(pin,mbox)
15938                 | ' 
15938                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
15938     00 1E 06 F6 | 	mov	local01, #0
1593c     4B 00 00 FF 
15940     14 E4 85 F1 | 	sub	objptr, ##38420
15944                 | LR__1650
15944     0F 13 02 F6 | 	mov	arg01, local01
15948     00 28 00 FF 
1594c     00 14 06 F6 | 	mov	arg02, ##5242880
15950     6C 2B B0 FD | 	call	#_psram_spin2_setQos
15954     01 1E 06 F1 | 	add	local01, #1
15958     08 1E 56 F2 | 	cmps	local01, #8 wc
1595c     E4 FF 9F CD |  if_b	jmp	#LR__1650
15960     4B 00 00 FF 
15964     14 E4 05 F1 | 	add	objptr, ##38420
15968     F2 12 02 FB | 	rdlong	arg01, objptr
1596c     7A 00 02 FF 
15970     00 14 06 F6 | 	mov	arg02, ##67171328
15974     4B 00 00 FF 
15978     14 E4 85 F1 | 	sub	objptr, ##38420
1597c     40 2B B0 FD | 	call	#_psram_spin2_setQos
15980     0B 00 00 FF 
15984     C0 E4 85 F1 | 	sub	objptr, ##5824
15988                 | ' psram.setQoS(videocog, $0400f400) 
15988                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
15988     F2 14 02 F6 | 	mov	arg02, objptr
1598c     00 08 03 FF 
15990     00 14 46 F5 | 	or	arg02, ##101711872
15994     00 16 06 F6 | 	mov	arg03, #0
15998     00 18 06 F6 | 	mov	arg04, #0
1599c     00 12 06 F6 | 	mov	arg01, #0
159a0     E8 3E B0 FD | 	call	#__system___basic_open
159a4                 | ' return videocog
159a4     56 00 00 FF 
159a8     D4 E4 05 F1 | 	add	objptr, ##44244
159ac     F2 FA 01 FB | 	rdlong	result1, objptr
159b0     56 00 00 FF 
159b4     D4 E4 85 F1 | 	sub	objptr, ##44244
159b8     A7 F0 03 F6 | 	mov	ptra, fp
159bc     B2 00 A0 FD | 	call	#popregs_
159c0                 | _startvideo_ret
159c0     2D 00 64 FD | 	ret
159c4                 | 
159c4                 | ' 
159c4                 | ' function pspeek(adr as ulong) as ubyte
159c4                 | _pspeek
159c4     00 4A 05 F6 | 	mov	COUNT_, #0
159c8     A8 00 A0 FD | 	call	#pushregs_
159cc     0C F0 07 F1 | 	add	ptra, #12
159d0     04 4E 05 F1 | 	add	fp, #4
159d4     A7 12 62 FC | 	wrlong	arg01, fp
159d8     04 4E 05 F1 | 	add	fp, #4
159dc     A7 12 02 F6 | 	mov	arg01, fp
159e0     04 4E 85 F1 | 	sub	fp, #4
159e4     A7 14 02 FB | 	rdlong	arg02, fp
159e8     04 4E 85 F1 | 	sub	fp, #4
159ec     01 16 06 F6 | 	mov	arg03, #1
159f0     0B 00 00 FF 
159f4     C0 E4 05 F1 | 	add	objptr, ##5824
159f8     98 28 B0 FD | 	call	#_psram_spin2_read1
159fc     0B 00 00 FF 
15a00     C0 E4 85 F1 | 	sub	objptr, ##5824
15a04                 | ' psram.read1(varptr(res),adr,1)
15a04                 | ' return res
15a04     08 4E 05 F1 | 	add	fp, #8
15a08     A7 FA C1 FA | 	rdbyte	result1, fp
15a0c     08 4E 85 F1 | 	sub	fp, #8
15a10     A7 F0 03 F6 | 	mov	ptra, fp
15a14     B2 00 A0 FD | 	call	#popregs_
15a18                 | _pspeek_ret
15a18     2D 00 64 FD | 	ret
15a1c                 | 
15a1c                 | ' 
15a1c                 | ' function pslpeek(adr as ulong) as ulong
15a1c                 | _pslpeek
15a1c     00 4A 05 F6 | 	mov	COUNT_, #0
15a20     A8 00 A0 FD | 	call	#pushregs_
15a24     0C F0 07 F1 | 	add	ptra, #12
15a28     04 4E 05 F1 | 	add	fp, #4
15a2c     A7 12 62 FC | 	wrlong	arg01, fp
15a30     04 4E 05 F1 | 	add	fp, #4
15a34     A7 12 02 F6 | 	mov	arg01, fp
15a38     04 4E 85 F1 | 	sub	fp, #4
15a3c     A7 14 02 FB | 	rdlong	arg02, fp
15a40     04 4E 85 F1 | 	sub	fp, #4
15a44     04 16 06 F6 | 	mov	arg03, #4
15a48     0B 00 00 FF 
15a4c     C0 E4 05 F1 | 	add	objptr, ##5824
15a50     40 28 B0 FD | 	call	#_psram_spin2_read1
15a54     0B 00 00 FF 
15a58     C0 E4 85 F1 | 	sub	objptr, ##5824
15a5c                 | ' psram.read1(varptr(res),adr,4)
15a5c                 | ' return res
15a5c     08 4E 05 F1 | 	add	fp, #8
15a60     A7 FA 01 FB | 	rdlong	result1, fp
15a64     08 4E 85 F1 | 	sub	fp, #8
15a68     A7 F0 03 F6 | 	mov	ptra, fp
15a6c     B2 00 A0 FD | 	call	#popregs_
15a70                 | _pslpeek_ret
15a70     2D 00 64 FD | 	ret
15a74                 | 
15a74                 | ' 
15a74                 | ' '' ------------------------------- USB keyboard scan to char translator
15a74                 | ' 
15a74                 | ' function scantochar(key)
15a74                 | _scantochar
15a74                 | ' 
15a74                 | ' select case (key shr 8) and 255
15a74     09 01 02 F6 | 	mov	_var01, arg01
15a78     08 00 C6 F0 | 	sar	_var01, #8
15a7c     FF 00 0E F5 | 	and	_var01, #255 wz
15a80     24 00 90 AD |  if_e	jmp	#LR__1660
15a84     02 00 0E F2 | 	cmp	_var01, #2 wz
15a88     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
15a8c     30 00 90 AD |  if_e	jmp	#LR__1661
15a90     40 00 0E F2 | 	cmp	_var01, #64 wz
15a94     44 00 90 AD |  if_e	jmp	#LR__1662
15a98     42 00 0E F2 | 	cmp	_var01, #66 wz
15a9c     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
15aa0     70 00 90 5D |  if_ne	jmp	#LR__1664
15aa4     50 00 90 FD | 	jmp	#LR__1663
15aa8                 | LR__1660
15aa8     09 FB 01 F6 | 	mov	result1, arg01
15aac     7F FA 05 F5 | 	and	result1, #127
15ab0     02 FA 65 F0 | 	shl	result1, #2
15ab4     F5 FA 01 F1 | 	add	result1, ptr__dat__
15ab8     FD FA C1 FA | 	rdbyte	result1, result1
15abc     54 00 90 FD | 	jmp	#_scantochar_ret
15ac0                 | LR__1661
15ac0     09 FB 01 F6 | 	mov	result1, arg01
15ac4     7F FA 05 F5 | 	and	result1, #127
15ac8     02 FA 65 F0 | 	shl	result1, #2
15acc     01 FA 05 F1 | 	add	result1, #1
15ad0     F5 FA 01 F1 | 	add	result1, ptr__dat__
15ad4     FD FA C1 FA | 	rdbyte	result1, result1
15ad8     38 00 90 FD | 	jmp	#_scantochar_ret
15adc                 | LR__1662
15adc     09 FB 01 F6 | 	mov	result1, arg01
15ae0     7F FA 05 F5 | 	and	result1, #127
15ae4     02 FA 65 F0 | 	shl	result1, #2
15ae8     02 FA 05 F1 | 	add	result1, #2
15aec     F5 FA 01 F1 | 	add	result1, ptr__dat__
15af0     FD FA C1 FA | 	rdbyte	result1, result1
15af4     1C 00 90 FD | 	jmp	#_scantochar_ret
15af8                 | LR__1663
15af8     09 FB 01 F6 | 	mov	result1, arg01
15afc     7F FA 05 F5 | 	and	result1, #127
15b00     02 FA 65 F0 | 	shl	result1, #2
15b04     03 FA 05 F1 | 	add	result1, #3
15b08     F5 FA 01 F1 | 	add	result1, ptr__dat__
15b0c     FD FA C1 FA | 	rdbyte	result1, result1
15b10     00 00 90 FD | 	jmp	#_scantochar_ret
15b14                 | LR__1664
15b14                 | _scantochar_ret
15b14     2D 00 64 FD | 	ret
15b18                 | 
15b18                 | _program
15b18     0B 4A 05 F6 | 	mov	COUNT_, #11
15b1c     A8 00 A0 FD | 	call	#pushregs_
15b20     A0 FD BF FD | 	call	#_startpsram
15b24     40 12 06 F6 | 	mov	arg01, #64
15b28     00 14 06 F6 | 	mov	arg02, #0
15b2c     00 16 06 F6 | 	mov	arg03, #0
15b30     D0 FD BF FD | 	call	#_startvideo
15b34     00 12 06 F6 | 	mov	arg01, #0
15b38     00 14 06 F6 | 	mov	arg02, #0
15b3c     00 16 06 F6 | 	mov	arg03, #0
15b40     0B 00 00 FF 
15b44     C0 E4 05 F1 | 	add	objptr, ##5824
15b48     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
15b4c     FE 1C 02 F6 | 	mov	arg06, result2
15b50     4B 00 00 FF 
15b54     10 E4 05 F1 | 	add	objptr, ##38416
15b58     F2 FA 61 FC | 	wrlong	result1, objptr
15b5c     14 E4 05 F1 | 	add	objptr, #20
15b60     F2 1C 62 FC | 	wrlong	arg06, objptr
15b64     56 00 00 FF 
15b68     E4 E4 85 F1 | 	sub	objptr, ##44260
15b6c     32 12 06 F6 | 	mov	arg01, #50
15b70     64 35 B0 FD | 	call	#__system___waitms
15b74     56 00 00 FF 
15b78     E4 E4 05 F1 | 	add	objptr, ##44260
15b7c     F2 12 02 FB | 	rdlong	arg01, objptr
15b80     56 00 00 FF 
15b84     E4 E4 85 F1 | 	sub	objptr, ##44260
15b88     14 12 06 F1 | 	add	arg01, #20
15b8c     20 00 80 FF 
15b90     09 01 58 FC | 	wrword	##16384, arg01
15b94     30 2A B0 FD | 	call	#_usbnew_spin2_start
15b98     56 00 00 FF 
15b9c     D8 E4 05 F1 | 	add	objptr, ##44248
15ba0     F2 FA 61 FC | 	wrlong	result1, objptr
15ba4                 | '   mouse_limits[0] := xlim
15ba4     0F 00 00 FF 
15ba8     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
15bac     01 00 80 FF 
15bb0     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
15bb4                 | '   mouse_limits[1] := ylim
15bb4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15bb8     01 00 80 FF 
15bbc     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
15bc0     55 00 00 FF 
15bc4     CB E5 85 F1 | 	sub	objptr, ##43979
15bc8     F2 12 02 F6 | 	mov	arg01, objptr
15bcc     0D E5 85 F1 | 	sub	objptr, #269
15bd0     C4 12 06 F1 | 	add	arg01, #196
15bd4                 | '   mouse_outptr := ptr
15bd4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15bd8     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
15bdc     0F 00 00 FF 
15be0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15be4     0E 00 00 FF 
15be8     9A EA 05 F1 | 	add	ptr__dat__, ##7322
15bec     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15bf0     0E 00 00 FF 
15bf4     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
15bf8     10 12 06 F6 | 	mov	arg01, #16
15bfc     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15c00     10 12 06 F6 | 	mov	arg01, #16
15c04     20 14 06 F6 | 	mov	arg02, #32
15c08     20 16 06 F6 | 	mov	arg03, #32
15c0c     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c10     09 12 C6 F9 | 	decod	arg01, #9
15c14     20 15 06 F6 | 	mov	arg02, #288
15c18     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
15c1c     F2 1C 02 F6 | 	mov	arg06, objptr
15c20     79 00 00 FF 
15c24     BC E4 05 F1 | 	add	objptr, ##62140
15c28     F2 1A 02 F6 | 	mov	arg05, objptr
15c2c     0D 1D 62 FC | 	wrlong	arg06, arg05
15c30     04 1A 06 F1 | 	add	arg05, #4
15c34     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
15c38     EF 14 02 F6 | 	mov	arg02, entryptr__
15c3c     F2 1E 02 F6 | 	mov	local01, objptr
15c40     1E FA 05 F6 | 	mov	result1, #30
15c44     28 1E 62 FD | 	setq	local01
15c48     0A FB F1 FC | 	coginit	result1, arg02 wc
15c4c     01 FA 65 C6 |  if_b	neg	result1, #1
15c50     04 E4 85 F1 | 	sub	objptr, #4
15c54     F2 FA 61 FC | 	wrlong	result1, objptr
15c58     01 00 00 FF 
15c5c     90 E4 05 F1 | 	add	objptr, ##656
15c60     F2 00 68 FC | 	wrlong	#0, objptr
15c64     24 00 00 FF 
15c68     40 E4 85 F1 | 	sub	objptr, ##18496
15c6c     F2 04 68 FC | 	wrlong	#2, objptr
15c70     04 E4 05 F1 | 	add	objptr, #4
15c74     F2 26 69 FC | 	wrlong	#147, objptr
15c78     04 E4 05 F1 | 	add	objptr, #4
15c7c     F2 34 69 FC | 	wrlong	#154, objptr
15c80     04 E4 05 F1 | 	add	objptr, #4
15c84     F2 08 68 FC | 	wrlong	#4, objptr
15c88     04 E4 85 F1 | 	sub	objptr, #4
15c8c     F2 1C 02 FB | 	rdlong	arg06, objptr
15c90     14 E4 85 F1 | 	sub	objptr, #20
15c94     F2 1C 62 FC | 	wrlong	arg06, objptr
15c98     04 E4 05 F1 | 	add	objptr, #4
15c9c     F2 00 68 FC | 	wrlong	#0, objptr
15ca0     04 E4 05 F1 | 	add	objptr, #4
15ca4     F2 00 68 FC | 	wrlong	#0, objptr
15ca8     22 00 00 FF 
15cac     B0 E5 05 F1 | 	add	objptr, ##17840
15cb0     F2 02 68 FC | 	wrlong	#1, objptr
15cb4     01 00 00 FF 
15cb8     9C E4 05 F1 | 	add	objptr, ##668
15cbc     F2 00 68 FC | 	wrlong	#0, objptr
15cc0     01 00 00 FF 
15cc4     00 EA 05 F1 | 	add	ptr__dat__, ##512
15cc8     08 E4 05 F1 | 	add	objptr, #8
15ccc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15cd0     04 E4 85 F1 | 	sub	objptr, #4
15cd4     03 00 80 FF 
15cd8     F2 28 69 FC | 	wrlong	##1684, objptr
15cdc     16 00 00 FF 
15ce0     1C E4 85 F1 | 	sub	objptr, ##11292
15ce4     F2 18 68 FC | 	wrlong	#12, objptr
15ce8     64 00 00 FF 
15cec     38 E5 85 F1 | 	sub	objptr, ##51512
15cf0     01 00 00 FF 
15cf4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15cf8     5C EB BF FD | 	call	#_init_commands
15cfc     30 F8 BF FD | 	call	#_init_error_strings
15d00     90 67 BF FD | 	call	#_do_new
15d04     56 00 00 FF 
15d08     10 E5 05 F1 | 	add	objptr, ##44304
15d0c     F2 12 02 FB | 	rdlong	arg01, objptr
15d10     04 E4 85 F1 | 	sub	objptr, #4
15d14     F2 14 02 FB | 	rdlong	arg02, objptr
15d18     56 00 00 FF 
15d1c     0C E5 85 F1 | 	sub	objptr, ##44300
15d20     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
15d24     56 00 00 FF 
15d28     14 E5 05 F1 | 	add	objptr, ##44308
15d2c     F2 12 02 FB | 	rdlong	arg01, objptr
15d30     56 00 00 FF 
15d34     14 E5 85 F1 | 	sub	objptr, ##44308
15d38     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
15d3c                 | ' 
15d3c                 | ' leading_spaces:=amount
15d3c     01 00 00 FF 
15d40     B2 E4 05 F1 | 	add	objptr, ##690
15d44     F2 04 68 FC | 	wrlong	#2, objptr
15d48     01 00 00 FF 
15d4c     B2 E4 85 F1 | 	sub	objptr, ##690
15d50     47 01 00 FF 
15d54     73 20 06 F6 | 	mov	local02, ##@LR__4663
15d58     3D 12 06 F6 | 	mov	arg01, #61
15d5c     3C 14 06 F6 | 	mov	arg02, #60
15d60     3B 16 06 F6 | 	mov	arg03, #59
15d64     3A 18 06 F6 | 	mov	arg04, #58
15d68     14 7A B0 FD | 	call	#__system___vfs_open_sdcardx
15d6c     FD 14 02 F6 | 	mov	arg02, result1
15d70     10 13 02 F6 | 	mov	arg01, local02
15d74     38 34 B0 FD | 	call	#__system___mount
15d78     47 01 00 FF 
15d7c     77 12 06 F6 | 	mov	arg01, ##@LR__4664
15d80     EC 36 B0 FD | 	call	#__system___chdir
15d84     47 01 00 FF 
15d88     7F 20 06 F6 | 	mov	local02, ##@LR__4665
15d8c     71 00 00 FF 
15d90     68 E5 05 F1 | 	add	objptr, ##58216
15d94     F2 20 62 FC | 	wrlong	local02, objptr
15d98     1B 00 00 FF 
15d9c     60 E4 85 F1 | 	sub	objptr, ##13920
15da0     F2 12 02 FB | 	rdlong	arg01, objptr
15da4     56 00 00 FF 
15da8     08 E5 85 F1 | 	sub	objptr, ##44296
15dac     01 12 66 F0 | 	shl	arg01, #1
15db0     01 14 06 F6 | 	mov	arg02, #1
15db4     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
15db8                 | ' 
15db8                 | ' init_commands
15db8                 | ' init_error_strings
15db8                 | ' do_new
15db8                 | ' 
15db8                 | ' 
15db8                 | ' cls(ink, paper)
15db8                 | ' v.setfontfamily(font) 				' use ST Mono font
15db8                 | ' v.setleadingspaces(2)
15db8                 | ' mount "/sd", _vfs_open_sdcard()
15db8                 | ' chdir "/sd/bas"
15db8                 | ' 
15db8                 | ' currentdir$="/sd/bas"
15db8                 | ' 
15db8                 | ' position 2*editor_spaces,1 : print ver$
15db8     00 12 06 F6 | 	mov	arg01, #0
15dbc     28 89 B0 FD | 	call	#__system___getiolock_0423
15dc0     FD 12 02 F6 | 	mov	arg01, result1
15dc4     1C 30 B0 FD | 	call	#__system___lockmem
15dc8     10 00 00 FF 
15dcc     10 EB 05 F1 | 	add	ptr__dat__, ##8464
15dd0     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
15dd4     10 00 00 FF 
15dd8     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
15ddc     00 12 06 F6 | 	mov	arg01, #0
15de0     00 16 06 F6 | 	mov	arg03, #0
15de4     F0 3C B0 FD | 	call	#__system___basic_print_string
15de8     00 12 06 F6 | 	mov	arg01, #0
15dec     0A 14 06 F6 | 	mov	arg02, #10
15df0     00 16 06 F6 | 	mov	arg03, #0
15df4     88 3C B0 FD | 	call	#__system___basic_print_char
15df8     00 12 06 F6 | 	mov	arg01, #0
15dfc     E8 88 B0 FD | 	call	#__system___getiolock_0423
15e00     FD 00 68 FC | 	wrlong	#0, result1
15e04     F2 12 02 FB | 	rdlong	arg01, objptr
15e08     00 14 06 F6 | 	mov	arg02, #0
15e0c     0A 16 06 F6 | 	mov	arg03, #10
15e10     D8 51 B0 FD | 	call	#__system__Number_S
15e14     FD 12 02 F6 | 	mov	arg01, result1
15e18     47 01 00 FF 
15e1c     87 14 06 F6 | 	mov	arg02, ##@LR__4666
15e20     1C 30 B0 FD | 	call	#__system___string_concat
15e24     FD 20 02 F6 | 	mov	local02, result1
15e28     79 00 00 FF 
15e2c     B0 E4 05 F1 | 	add	objptr, ##62128
15e30     F2 20 62 FC | 	wrlong	local02, objptr
15e34     79 00 00 FF 
15e38     B0 E4 85 F1 | 	sub	objptr, ##62128
15e3c                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
15e3c     00 12 06 F6 | 	mov	arg01, #0
15e40     A4 88 B0 FD | 	call	#__system___getiolock_0423
15e44     FD 12 02 F6 | 	mov	arg01, result1
15e48     98 2F B0 FD | 	call	#__system___lockmem
15e4c     79 00 00 FF 
15e50     B0 E4 05 F1 | 	add	objptr, ##62128
15e54     F2 14 02 FB | 	rdlong	arg02, objptr
15e58     79 00 00 FF 
15e5c     B0 E4 85 F1 | 	sub	objptr, ##62128
15e60     00 12 06 F6 | 	mov	arg01, #0
15e64     00 16 06 F6 | 	mov	arg03, #0
15e68     6C 3C B0 FD | 	call	#__system___basic_print_string
15e6c     00 12 06 F6 | 	mov	arg01, #0
15e70     0A 14 06 F6 | 	mov	arg02, #10
15e74     00 16 06 F6 | 	mov	arg03, #0
15e78     04 3C B0 FD | 	call	#__system___basic_print_char
15e7c     00 12 06 F6 | 	mov	arg01, #0
15e80     64 88 B0 FD | 	call	#__system___getiolock_0423
15e84     FD 00 68 FC | 	wrlong	#0, result1
15e88     56 00 00 FF 
15e8c     08 E5 05 F1 | 	add	objptr, ##44296
15e90     F2 12 02 FB | 	rdlong	arg01, objptr
15e94     56 00 00 FF 
15e98     08 E5 85 F1 | 	sub	objptr, ##44296
15e9c     01 12 66 F0 | 	shl	arg01, #1
15ea0     04 14 06 F6 | 	mov	arg02, #4
15ea4     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
15ea8                 | ' position 2*editor_spaces,4 : print "Ready"
15ea8     00 12 06 F6 | 	mov	arg01, #0
15eac     38 88 B0 FD | 	call	#__system___getiolock_0423
15eb0     FD 12 02 F6 | 	mov	arg01, result1
15eb4     2C 2F B0 FD | 	call	#__system___lockmem
15eb8     47 01 00 FF 
15ebc     99 14 06 F6 | 	mov	arg02, ##@LR__4667
15ec0     00 12 06 F6 | 	mov	arg01, #0
15ec4     00 16 06 F6 | 	mov	arg03, #0
15ec8     0C 3C B0 FD | 	call	#__system___basic_print_string
15ecc     FD 22 02 F6 | 	mov	local03, result1
15ed0     00 12 06 F6 | 	mov	arg01, #0
15ed4     0A 14 06 F6 | 	mov	arg02, #10
15ed8     00 16 06 F6 | 	mov	arg03, #0
15edc     A0 3B B0 FD | 	call	#__system___basic_print_char
15ee0     01 24 06 F6 | 	mov	local04, #1
15ee4     00 12 06 F6 | 	mov	arg01, #0
15ee8     FC 87 B0 FD | 	call	#__system___getiolock_0423
15eec     FD 00 68 FC | 	wrlong	#0, result1
15ef0     00 26 06 F6 | 	mov	local05, #0
15ef4     00 14 06 F6 | 	mov	arg02, #0
15ef8     01 14 D6 F7 | 	test	arg02, #1 wc
15efc     5A 4C 64 FD | 	drvc	#38
15f00     01 14 D6 F7 | 	test	arg02, #1 wc
15f04     5A 4E 64 FD | 	drvc	#39
15f08                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
15f08                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
15f08                 | ' 
15f08                 | ' 
15f08                 | ' '-------------------------------------------------------------------------------------------------------- 
15f08                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
15f08                 | ' '--------------------------------------------------------------------------------------------------------
15f08                 | ' 
15f08                 | ' do
15f08                 | LR__1670
15f08     01 12 06 F6 | 	mov	arg01, #1
15f0c     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
15f10     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
15f14     64 00 00 FF 
15f18     48 E5 05 F1 | 	add	objptr, ##51528
15f1c     F2 FA 61 FC | 	wrlong	result1, objptr
15f20                 | '   return hkbd_led_rep
15f20     13 00 00 FF 
15f24     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
15f28     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
15f2c     13 00 00 FF 
15f30     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
15f34     16 00 00 FF 
15f38     20 E4 05 F1 | 	add	objptr, ##11296
15f3c     F2 FA 61 FC | 	wrlong	result1, objptr
15f40                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
15f40     16 00 00 FF 
15f44     20 E4 85 F1 | 	sub	objptr, ##11296
15f48     F2 20 02 FB | 	rdlong	local02, objptr
15f4c     64 00 00 FF 
15f50     48 E5 85 F1 | 	sub	objptr, ##51528
15f54     01 20 16 F2 | 	cmp	local02, #1 wc
15f58     BC 00 90 CD |  if_b	jmp	#LR__1671
15f5c     64 00 00 FF 
15f60     48 E5 05 F1 | 	add	objptr, ##51528
15f64     F2 24 02 FB | 	rdlong	local04, objptr
15f68     64 00 00 FF 
15f6c     48 E5 85 F1 | 	sub	objptr, ##51528
15f70     12 23 02 F6 | 	mov	local03, local04
15f74     04 22 16 F2 | 	cmp	local03, #4 wc
15f78     9C 00 90 3D |  if_ae	jmp	#LR__1671
15f7c     79 00 00 FF 
15f80     B4 E4 05 F1 | 	add	objptr, ##62132
15f84     F2 1E 02 FB | 	rdlong	local01, objptr
15f88     79 00 00 FF 
15f8c     B4 E4 85 F1 | 	sub	objptr, ##62132
15f90     0F 27 02 F6 | 	mov	local05, local01
15f94     01 26 0E F2 | 	cmp	local05, #1 wz
15f98     7C 00 90 5D |  if_ne	jmp	#LR__1671
15f9c     04 00 00 FF 
15fa0     94 EA 05 F1 | 	add	ptr__dat__, ##2196
15fa4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15fa8     04 00 00 FF 
15fac     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15fb0     56 00 00 FF 
15fb4     44 22 06 F6 | 	mov	local03, ##44100
15fb8     0E 24 C6 F9 | 	decod	local04, #14
15fbc     00 26 06 F6 | 	mov	local05, #0
15fc0     03 00 00 FF 
15fc4     DE 1E 06 F6 | 	mov	local01, ##1758
15fc8     07 12 06 F6 | 	mov	arg01, #7
15fcc     56 00 00 FF 
15fd0     44 16 06 F6 | 	mov	arg03, ##44100
15fd4     0E 18 C6 F9 | 	decod	arg04, #14
15fd8     00 1A 06 F6 | 	mov	arg05, #0
15fdc     03 00 00 FF 
15fe0     DE 1C 06 F6 | 	mov	arg06, ##1758
15fe4     0B 00 00 FF 
15fe8     C0 E4 05 F1 | 	add	objptr, ##5824
15fec     BC 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15ff0     0B 00 00 FF 
15ff4     C0 E4 85 F1 | 	sub	objptr, ##5824
15ff8     0A 12 06 F6 | 	mov	arg01, #10
15ffc     D8 30 B0 FD | 	call	#__system___waitms
16000     07 12 06 F6 | 	mov	arg01, #7
16004     0B 00 00 FF 
16008     C0 E4 05 F1 | 	add	objptr, ##5824
1600c     EC 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16010     0B 00 00 FF 
16014     C0 E4 85 F1 | 	sub	objptr, ##5824
16018                 | LR__1671
16018                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
16018     64 00 00 FF 
1601c     48 E5 05 F1 | 	add	objptr, ##51528
16020     F2 20 02 FB | 	rdlong	local02, objptr
16024     64 00 00 FF 
16028     48 E5 85 F1 | 	sub	objptr, ##51528
1602c     04 20 16 F2 | 	cmp	local02, #4 wc
16030     80 00 90 CD |  if_b	jmp	#LR__1672
16034     64 00 00 FF 
16038     48 E5 05 F1 | 	add	objptr, ##51528
1603c     F2 24 02 FB | 	rdlong	local04, objptr
16040     64 00 00 FF 
16044     48 E5 85 F1 | 	sub	objptr, ##51528
16048     12 23 02 F6 | 	mov	local03, local04
1604c     00 00 40 FF 
16050     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
16054     64 00 00 CF 
16058     48 E5 05 C1 |  if_b	add	objptr, ##51528
1605c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
16060     64 00 00 CF 
16064     48 E5 85 C1 |  if_b	sub	objptr, ##51528
16068     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1606c     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
16070     40 00 90 3D |  if_ae	jmp	#LR__1672
16074     64 00 00 FF 
16078     48 E5 05 F1 | 	add	objptr, ##51528
1607c     F2 20 02 FB | 	rdlong	local02, objptr
16080     04 E4 05 F1 | 	add	objptr, #4
16084     F2 20 62 FC | 	wrlong	local02, objptr
16088     16 00 00 FF 
1608c     20 E4 05 F1 | 	add	objptr, ##11296
16090     F2 02 68 FC | 	wrlong	#1, objptr
16094     16 00 00 FF 
16098     20 E4 85 F1 | 	sub	objptr, ##11296
1609c     F2 20 02 FB | 	rdlong	local02, objptr
160a0     16 00 00 FF 
160a4     24 E4 05 F1 | 	add	objptr, ##11300
160a8     F2 20 62 FC | 	wrlong	local02, objptr
160ac     7A 00 00 FF 
160b0     70 E5 85 F1 | 	sub	objptr, ##62832
160b4                 | LR__1672
160b4                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
160b4     64 00 00 FF 
160b8     48 E5 05 F1 | 	add	objptr, ##51528
160bc     F2 20 02 FB | 	rdlong	local02, objptr
160c0     64 00 00 FF 
160c4     48 E5 85 F1 | 	sub	objptr, ##51528
160c8     00 00 40 FF 
160cc     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
160d0     7A 00 00 3F 
160d4     74 E5 05 31 |  if_ae	add	objptr, ##62836
160d8     F2 00 68 3C |  if_ae	wrlong	#0, objptr
160dc     08 E4 85 31 |  if_ae	sub	objptr, #8
160e0     F2 00 68 3C |  if_ae	wrlong	#0, objptr
160e4     7A 00 00 3F 
160e8     6C E5 85 31 |  if_ae	sub	objptr, ##62828
160ec                 | ' if key=0 andalso rpt=1 then rptcnt+=1
160ec     64 00 00 FF 
160f0     48 E5 05 F1 | 	add	objptr, ##51528
160f4     F2 20 0A FB | 	rdlong	local02, objptr wz
160f8     64 00 00 FF 
160fc     48 E5 85 F1 | 	sub	objptr, ##51528
16100     7A 00 00 AF 
16104     6C E5 05 A1 |  if_e	add	objptr, ##62828
16108     F2 24 02 AB |  if_e	rdlong	local04, objptr
1610c     7A 00 00 AF 
16110     6C E5 85 A1 |  if_e	sub	objptr, ##62828
16114     12 23 02 A6 |  if_e	mov	local03, local04
16118     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1611c     7A 00 00 AF 
16120     74 E5 05 A1 |  if_e	add	objptr, ##62836
16124     F2 20 02 AB |  if_e	rdlong	local02, objptr
16128     01 20 06 A1 |  if_e	add	local02, #1
1612c     F2 20 62 AC |  if_e	wrlong	local02, objptr
16130     7A 00 00 AF 
16134     74 E5 85 A1 |  if_e	sub	objptr, ##62836
16138                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
16138     64 00 00 FF 
1613c     48 E5 05 F1 | 	add	objptr, ##51528
16140     F2 20 02 FB | 	rdlong	local02, objptr
16144     64 00 00 FF 
16148     48 E5 85 F1 | 	sub	objptr, ##51528
1614c     00 00 40 FF 
16150     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
16154     44 00 90 3D |  if_ae	jmp	#LR__1674
16158     7A 00 00 FF 
1615c     74 E5 05 F1 | 	add	objptr, ##62836
16160     F2 20 02 FB | 	rdlong	local02, objptr
16164     7A 00 00 FF 
16168     74 E5 85 F1 | 	sub	objptr, ##62836
1616c     19 20 0E F2 | 	cmp	local02, #25 wz
16170     28 00 90 5D |  if_ne	jmp	#LR__1673
16174     64 00 00 FF 
16178     4C E5 05 F1 | 	add	objptr, ##51532
1617c     F2 20 02 FB | 	rdlong	local02, objptr
16180     16 00 00 FF 
16184     24 E4 05 F1 | 	add	objptr, ##11300
16188     F2 20 62 FC | 	wrlong	local02, objptr
1618c     04 E4 05 F1 | 	add	objptr, #4
16190     F2 2A 68 FC | 	wrlong	#21, objptr
16194     7A 00 00 FF 
16198     74 E5 85 F1 | 	sub	objptr, ##62836
1619c                 | LR__1673
1619c                 | LR__1674
1619c                 | ' 
1619c                 | ' 
1619c                 | ' if key3<>0 then
1619c     7A 00 00 FF 
161a0     70 E5 05 F1 | 	add	objptr, ##62832
161a4     F2 28 0A FB | 	rdlong	local06, objptr wz
161a8     7A 00 00 FF 
161ac     70 E5 85 F1 | 	sub	objptr, ##62832
161b0     54 FD 9F AD |  if_e	jmp	#LR__1670
161b4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
161b4     79 00 00 FF 
161b8     B4 E4 05 F1 | 	add	objptr, ##62132
161bc     F2 20 02 FB | 	rdlong	local02, objptr
161c0     79 00 00 FF 
161c4     B4 E4 85 F1 | 	sub	objptr, ##62132
161c8     01 20 0E F2 | 	cmp	local02, #1 wz
161cc     50 00 90 5D |  if_ne	jmp	#LR__1675
161d0     7A 00 00 FF 
161d4     58 E5 05 F1 | 	add	objptr, ##62808
161d8     F2 14 02 FB | 	rdlong	arg02, objptr
161dc     56 00 00 FF 
161e0     44 22 06 F6 | 	mov	local03, ##44100
161e4     0E 24 C6 F9 | 	decod	local04, #14
161e8     04 E4 85 F1 | 	sub	objptr, #4
161ec     F2 26 02 FB | 	rdlong	local05, objptr
161f0     01 1E 66 F6 | 	neg	local01, #1
161f4     07 12 06 F6 | 	mov	arg01, #7
161f8     56 00 00 FF 
161fc     44 16 06 F6 | 	mov	arg03, ##44100
16200     0E 18 C6 F9 | 	decod	arg04, #14
16204     13 1B 02 F6 | 	mov	arg05, local05
16208     01 1C 66 F6 | 	neg	arg06, #1
1620c     6F 00 00 FF 
16210     94 E4 85 F1 | 	sub	objptr, ##56980
16214     94 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16218     0B 00 00 FF 
1621c     C0 E4 85 F1 | 	sub	objptr, ##5824
16220                 | LR__1675
16220     7A 00 00 FF 
16224     70 E5 05 F1 | 	add	objptr, ##62832
16228     F2 12 02 FB | 	rdlong	arg01, objptr
1622c     7A 00 00 FF 
16230     70 E5 85 F1 | 	sub	objptr, ##62832
16234     3C F8 BF FD | 	call	#_scantochar
16238     7A 00 00 FF 
1623c     78 E5 05 F1 | 	add	objptr, ##62840
16240     F2 FA 61 FC | 	wrlong	result1, objptr
16244                 | '   if leds and 2 = 2 then 
16244     10 E4 85 F1 | 	sub	objptr, #16
16248     F2 20 0A FB | 	rdlong	local02, objptr wz
1624c     7A 00 00 FF 
16250     68 E5 85 F1 | 	sub	objptr, ##62824
16254     68 01 90 AD |  if_e	jmp	#LR__1683
16258                 | '     if key4>96 andalso key4<123 then
16258     7A 00 00 FF 
1625c     78 E5 05 F1 | 	add	objptr, ##62840
16260     F2 20 02 FB | 	rdlong	local02, objptr
16264     7A 00 00 FF 
16268     78 E5 85 F1 | 	sub	objptr, ##62840
1626c     61 20 56 F2 | 	cmps	local02, #97 wc
16270     40 00 90 CD |  if_b	jmp	#LR__1676
16274     7A 00 00 FF 
16278     78 E5 05 F1 | 	add	objptr, ##62840
1627c     F2 24 02 FB | 	rdlong	local04, objptr
16280     7A 00 00 FF 
16284     78 E5 85 F1 | 	sub	objptr, ##62840
16288     12 23 02 F6 | 	mov	local03, local04
1628c     7B 22 56 F2 | 	cmps	local03, #123 wc
16290     20 00 90 3D |  if_ae	jmp	#LR__1676
16294     7A 00 00 FF 
16298     78 E5 05 F1 | 	add	objptr, ##62840
1629c     F2 20 02 FB | 	rdlong	local02, objptr
162a0     20 20 86 F1 | 	sub	local02, #32
162a4     F2 20 62 FC | 	wrlong	local02, objptr
162a8     7A 00 00 FF 
162ac     78 E5 85 F1 | 	sub	objptr, ##62840
162b0     0C 01 90 FD | 	jmp	#LR__1682
162b4                 | LR__1676
162b4     7A 00 00 FF 
162b8     78 E5 05 F1 | 	add	objptr, ##62840
162bc     F2 20 02 FB | 	rdlong	local02, objptr
162c0     7A 00 00 FF 
162c4     78 E5 85 F1 | 	sub	objptr, ##62840
162c8     41 20 56 F2 | 	cmps	local02, #65 wc
162cc     40 00 90 CD |  if_b	jmp	#LR__1677
162d0     7A 00 00 FF 
162d4     78 E5 05 F1 | 	add	objptr, ##62840
162d8     F2 24 02 FB | 	rdlong	local04, objptr
162dc     7A 00 00 FF 
162e0     78 E5 85 F1 | 	sub	objptr, ##62840
162e4     12 23 02 F6 | 	mov	local03, local04
162e8     5B 22 56 F2 | 	cmps	local03, #91 wc
162ec     20 00 90 3D |  if_ae	jmp	#LR__1677
162f0     7A 00 00 FF 
162f4     78 E5 05 F1 | 	add	objptr, ##62840
162f8     F2 20 02 FB | 	rdlong	local02, objptr
162fc     20 20 06 F1 | 	add	local02, #32
16300     F2 20 62 FC | 	wrlong	local02, objptr
16304     7A 00 00 FF 
16308     78 E5 85 F1 | 	sub	objptr, ##62840
1630c     B0 00 90 FD | 	jmp	#LR__1681
16310                 | LR__1677
16310     7A 00 00 FF 
16314     78 E5 05 F1 | 	add	objptr, ##62840
16318     F2 20 02 FB | 	rdlong	local02, objptr
1631c     7A 00 00 FF 
16320     78 E5 85 F1 | 	sub	objptr, ##62840
16324     17 20 56 F2 | 	cmps	local02, #23 wc
16328     40 00 90 CD |  if_b	jmp	#LR__1678
1632c     7A 00 00 FF 
16330     78 E5 05 F1 | 	add	objptr, ##62840
16334     F2 24 02 FB | 	rdlong	local04, objptr
16338     7A 00 00 FF 
1633c     78 E5 85 F1 | 	sub	objptr, ##62840
16340     12 23 02 F6 | 	mov	local03, local04
16344     20 22 56 F2 | 	cmps	local03, #32 wc
16348     20 00 90 3D |  if_ae	jmp	#LR__1678
1634c     7A 00 00 FF 
16350     78 E5 05 F1 | 	add	objptr, ##62840
16354     F2 20 02 FB | 	rdlong	local02, objptr
16358     09 20 86 F1 | 	sub	local02, #9
1635c     F2 20 62 FC | 	wrlong	local02, objptr
16360     7A 00 00 FF 
16364     78 E5 85 F1 | 	sub	objptr, ##62840
16368     54 00 90 FD | 	jmp	#LR__1680
1636c                 | LR__1678
1636c     7A 00 00 FF 
16370     78 E5 05 F1 | 	add	objptr, ##62840
16374     F2 20 02 FB | 	rdlong	local02, objptr
16378     7A 00 00 FF 
1637c     78 E5 85 F1 | 	sub	objptr, ##62840
16380     0E 20 56 F2 | 	cmps	local02, #14 wc
16384     38 00 90 CD |  if_b	jmp	#LR__1679
16388     7A 00 00 FF 
1638c     78 E5 05 F1 | 	add	objptr, ##62840
16390     F2 24 02 FB | 	rdlong	local04, objptr
16394     7A 00 00 FF 
16398     78 E5 85 F1 | 	sub	objptr, ##62840
1639c     12 23 02 F6 | 	mov	local03, local04
163a0     17 22 56 F2 | 	cmps	local03, #23 wc
163a4     7A 00 00 CF 
163a8     78 E5 05 C1 |  if_b	add	objptr, ##62840
163ac     F2 20 02 CB |  if_b	rdlong	local02, objptr
163b0     27 20 06 C1 |  if_b	add	local02, #39
163b4     F2 20 62 CC |  if_b	wrlong	local02, objptr
163b8     7A 00 00 CF 
163bc     78 E5 85 C1 |  if_b	sub	objptr, ##62840
163c0                 | LR__1679
163c0                 | LR__1680
163c0                 | LR__1681
163c0                 | LR__1682
163c0                 | LR__1683
163c0                 | '  
163c0                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
163c0     7A 00 00 FF 
163c4     78 E5 05 F1 | 	add	objptr, ##62840
163c8     F2 20 02 FB | 	rdlong	local02, objptr
163cc     7A 00 00 FF 
163d0     78 E5 85 F1 | 	sub	objptr, ##62840
163d4     01 20 56 F2 | 	cmps	local02, #1 wc
163d8     90 00 90 CD |  if_b	jmp	#LR__1684
163dc     7A 00 00 FF 
163e0     78 E5 05 F1 | 	add	objptr, ##62840
163e4     F2 24 02 FB | 	rdlong	local04, objptr
163e8     7A 00 00 FF 
163ec     78 E5 85 F1 | 	sub	objptr, ##62840
163f0     12 23 02 F6 | 	mov	local03, local04
163f4     7F 22 56 F2 | 	cmps	local03, #127 wc
163f8     38 E4 05 C1 |  if_b	add	objptr, #56
163fc     F2 1E E2 CA |  if_b	rdword	local01, objptr
16400     38 E4 85 C1 |  if_b	sub	objptr, #56
16404     0F 27 32 C9 |  if_b	getword	local05, local01, #0
16408     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1640c     5C 00 90 3D |  if_ae	jmp	#LR__1684
16410     7A 00 00 FF 
16414     78 E5 05 F1 | 	add	objptr, ##62840
16418     F2 12 02 FB | 	rdlong	arg01, objptr
1641c     7A 00 00 FF 
16420     78 E5 85 F1 | 	sub	objptr, ##62840
16424     90 4B B0 FD | 	call	#__system__Chr_S
16428     FD 2A 02 F6 | 	mov	local07, result1
1642c     56 00 00 FF 
16430     F0 E4 05 F1 | 	add	objptr, ##44272
16434     F2 12 02 FB | 	rdlong	arg01, objptr
16438     56 00 00 FF 
1643c     F0 E4 85 F1 | 	sub	objptr, ##44272
16440     15 15 02 F6 | 	mov	arg02, local07
16444     F8 29 B0 FD | 	call	#__system___string_concat
16448     56 00 00 FF 
1644c     F0 E4 05 F1 | 	add	objptr, ##44272
16450     F2 FA 61 FC | 	wrlong	result1, objptr
16454     24 00 00 FF 
16458     88 E4 05 F1 | 	add	objptr, ##18568
1645c     F2 12 02 FB | 	rdlong	arg01, objptr
16460     7A 00 00 FF 
16464     78 E5 85 F1 | 	sub	objptr, ##62840
16468     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
1646c                 | LR__1684
1646c                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
1646c     7A 00 00 FF 
16470     78 E5 05 F1 | 	add	objptr, ##62840
16474     F2 20 02 FB | 	rdlong	local02, objptr
16478     7A 00 00 FF 
1647c     78 E5 85 F1 | 	sub	objptr, ##62840
16480     01 20 56 F2 | 	cmps	local02, #1 wc
16484     D0 00 90 CD |  if_b	jmp	#LR__1685
16488     7A 00 00 FF 
1648c     78 E5 05 F1 | 	add	objptr, ##62840
16490     F2 24 02 FB | 	rdlong	local04, objptr
16494     7A 00 00 FF 
16498     78 E5 85 F1 | 	sub	objptr, ##62840
1649c     12 23 02 F6 | 	mov	local03, local04
164a0     7F 22 56 F2 | 	cmps	local03, #127 wc
164a4     B0 00 90 3D |  if_ae	jmp	#LR__1685
164a8     38 E4 05 F1 | 	add	objptr, #56
164ac     F2 1E E2 FA | 	rdword	local01, objptr
164b0     38 E4 85 F1 | 	sub	objptr, #56
164b4     0F 27 32 F9 | 	getword	local05, local01, #0
164b8     FE 26 0E F2 | 	cmp	local05, #254 wz
164bc     79 00 00 AF 
164c0     B4 E4 05 A1 |  if_e	add	objptr, ##62132
164c4     F2 2C 02 AB |  if_e	rdlong	local08, objptr
164c8     79 00 00 AF 
164cc     B4 E4 85 A1 |  if_e	sub	objptr, ##62132
164d0     16 2F 02 A6 |  if_e	mov	local09, local08
164d4     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
164d8     7C 00 90 5D |  if_ne	jmp	#LR__1685
164dc     04 00 00 FF 
164e0     94 EA 05 F1 | 	add	ptr__dat__, ##2196
164e4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
164e8     04 00 00 FF 
164ec     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
164f0     56 00 00 FF 
164f4     44 22 06 F6 | 	mov	local03, ##44100
164f8     0E 24 C6 F9 | 	decod	local04, #14
164fc     00 26 06 F6 | 	mov	local05, #0
16500     03 00 00 FF 
16504     DE 1E 06 F6 | 	mov	local01, ##1758
16508     07 12 06 F6 | 	mov	arg01, #7
1650c     56 00 00 FF 
16510     44 16 06 F6 | 	mov	arg03, ##44100
16514     0E 18 C6 F9 | 	decod	arg04, #14
16518     00 1A 06 F6 | 	mov	arg05, #0
1651c     03 00 00 FF 
16520     DE 1C 06 F6 | 	mov	arg06, ##1758
16524     0B 00 00 FF 
16528     C0 E4 05 F1 | 	add	objptr, ##5824
1652c     7C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16530     0B 00 00 FF 
16534     C0 E4 85 F1 | 	sub	objptr, ##5824
16538     2C 13 06 F6 | 	mov	arg01, #300
1653c     98 2B B0 FD | 	call	#__system___waitms
16540     07 12 06 F6 | 	mov	arg01, #7
16544     0B 00 00 FF 
16548     C0 E4 05 F1 | 	add	objptr, ##5824
1654c     AC 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16550     0B 00 00 FF 
16554     C0 E4 85 F1 | 	sub	objptr, ##5824
16558                 | LR__1685
16558                 | '  
16558                 | '   'tab
16558                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
16558     7A 00 00 FF 
1655c     70 E5 05 F1 | 	add	objptr, ##62832
16560     F2 20 02 FB | 	rdlong	local02, objptr
16564     7A 00 00 FF 
16568     70 E5 85 F1 | 	sub	objptr, ##62832
1656c     10 21 E2 F8 | 	getbyte	local02, local02, #0
16570     2B 20 0E F2 | 	cmp	local02, #43 wz
16574     B4 00 90 5D |  if_ne	jmp	#LR__1686
16578     38 E4 05 F1 | 	add	objptr, #56
1657c     F2 24 E2 FA | 	rdword	local04, objptr
16580     38 E4 85 F1 | 	sub	objptr, #56
16584     12 23 32 F9 | 	getword	local03, local04, #0
16588     F0 22 16 F2 | 	cmp	local03, #240 wc
1658c     9C 00 90 CD |  if_b	jmp	#LR__1686
16590     79 00 00 FF 
16594     B4 E4 05 F1 | 	add	objptr, ##62132
16598     F2 1E 02 FB | 	rdlong	local01, objptr
1659c     79 00 00 FF 
165a0     B4 E4 85 F1 | 	sub	objptr, ##62132
165a4     0F 27 02 F6 | 	mov	local05, local01
165a8     01 26 0E F2 | 	cmp	local05, #1 wz
165ac     7C 00 90 5D |  if_ne	jmp	#LR__1686
165b0     04 00 00 FF 
165b4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
165b8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
165bc     04 00 00 FF 
165c0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
165c4     56 00 00 FF 
165c8     44 22 06 F6 | 	mov	local03, ##44100
165cc     0E 24 C6 F9 | 	decod	local04, #14
165d0     00 26 06 F6 | 	mov	local05, #0
165d4     03 00 00 FF 
165d8     DE 1E 06 F6 | 	mov	local01, ##1758
165dc     00 12 06 F6 | 	mov	arg01, #0
165e0     56 00 00 FF 
165e4     44 16 06 F6 | 	mov	arg03, ##44100
165e8     0E 18 C6 F9 | 	decod	arg04, #14
165ec     00 1A 06 F6 | 	mov	arg05, #0
165f0     03 00 00 FF 
165f4     DE 1C 06 F6 | 	mov	arg06, ##1758
165f8     0B 00 00 FF 
165fc     C0 E4 05 F1 | 	add	objptr, ##5824
16600     A8 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16604     0B 00 00 FF 
16608     C0 E4 85 F1 | 	sub	objptr, ##5824
1660c     2C 13 06 F6 | 	mov	arg01, #300
16610     C4 2A B0 FD | 	call	#__system___waitms
16614     00 12 06 F6 | 	mov	arg01, #0
16618     0B 00 00 FF 
1661c     C0 E4 05 F1 | 	add	objptr, ##5824
16620     D8 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16624     0B 00 00 FF 
16628     C0 E4 85 F1 | 	sub	objptr, ##5824
1662c                 | LR__1686
1662c                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
1662c     7A 00 00 FF 
16630     70 E5 05 F1 | 	add	objptr, ##62832
16634     F2 20 02 FB | 	rdlong	local02, objptr
16638     7A 00 00 FF 
1663c     70 E5 85 F1 | 	sub	objptr, ##62832
16640     10 21 E2 F8 | 	getbyte	local02, local02, #0
16644     2B 20 0E F2 | 	cmp	local02, #43 wz
16648     AC 00 90 5D |  if_ne	jmp	#LR__1689
1664c     38 E4 05 F1 | 	add	objptr, #56
16650     F2 24 E2 FA | 	rdword	local04, objptr
16654     38 E4 85 F1 | 	sub	objptr, #56
16658     12 23 32 F9 | 	getword	local03, local04, #0
1665c     F0 22 16 F2 | 	cmp	local03, #240 wc
16660     94 00 90 3D |  if_ae	jmp	#LR__1689
16664     38 E4 05 F1 | 	add	objptr, #56
16668     F2 20 E2 FA | 	rdword	local02, objptr
1666c     10 23 52 F6 | 	abs	local03, local02 wc
16670     11 23 42 F8 | 	getnib	local03, local03, #0
16674     11 23 82 F6 | 	negc	local03, local03
16678     11 25 52 F6 | 	abs	local04, local03 wc
1667c     01 24 46 F0 | 	shr	local04, #1
16680     12 25 82 F6 | 	negc	local04, local04
16684     7A 00 00 FF 
16688     44 E5 05 F1 | 	add	objptr, ##62788
1668c     F2 24 62 FC | 	wrlong	local04, objptr
16690     12 31 02 F6 | 	mov	local10, local04
16694     7A 00 00 FF 
16698     7C E5 85 F1 | 	sub	objptr, ##62844
1669c                 | LR__1687
1669c     08 30 56 F2 | 	cmps	local10, #8 wc
166a0     54 00 90 3D |  if_ae	jmp	#LR__1688
166a4     56 00 00 FF 
166a8     F0 E4 05 F1 | 	add	objptr, ##44272
166ac     F2 12 02 FB | 	rdlong	arg01, objptr
166b0     56 00 00 FF 
166b4     F0 E4 85 F1 | 	sub	objptr, ##44272
166b8     47 01 00 FF 
166bc     9F 24 06 F6 | 	mov	local04, ##@LR__4668
166c0     12 15 02 F6 | 	mov	arg02, local04
166c4     78 27 B0 FD | 	call	#__system___string_concat
166c8     56 00 00 FF 
166cc     F0 E4 05 F1 | 	add	objptr, ##44272
166d0     F2 FA 61 FC | 	wrlong	result1, objptr
166d4     56 00 00 FF 
166d8     F0 E4 85 F1 | 	sub	objptr, ##44272
166dc     47 01 00 FF 
166e0     A1 12 06 F6 | 	mov	arg01, ##@LR__4669
166e4     74 16 B0 FD | 	call	#_hg010b_spin2_write
166e8     18 23 02 F6 | 	mov	local03, local10
166ec     01 22 06 F1 | 	add	local03, #1
166f0     11 31 02 F6 | 	mov	local10, local03
166f4     A4 FF 9F FD | 	jmp	#LR__1687
166f8                 | LR__1688
166f8                 | LR__1689
166f8                 | '  
166f8                 | '   'backspace
166f8                 | '   if (key3 and 255) = 42 then 
166f8     7A 00 00 FF 
166fc     70 E5 05 F1 | 	add	objptr, ##62832
16700     F2 20 02 FB | 	rdlong	local02, objptr
16704     7A 00 00 FF 
16708     70 E5 85 F1 | 	sub	objptr, ##62832
1670c     10 21 E2 F8 | 	getbyte	local02, local02, #0
16710     2A 20 0E F2 | 	cmp	local02, #42 wz
16714     D4 00 90 5D |  if_ne	jmp	#LR__1694
16718                 | '       if v.cursor_x>4 then 
16718     38 E4 05 F1 | 	add	objptr, #56
1671c     F2 20 E2 FA | 	rdword	local02, objptr
16720     38 E4 85 F1 | 	sub	objptr, #56
16724     05 20 16 F2 | 	cmp	local02, #5 wc
16728     9C 00 90 CD |  if_b	jmp	#LR__1692
1672c     56 00 00 FF 
16730     F0 E4 05 F1 | 	add	objptr, ##44272
16734     F2 26 02 FB | 	rdlong	local05, objptr
16738     56 00 00 FF 
1673c     F0 E4 85 F1 | 	sub	objptr, ##44272
16740     13 13 02 F6 | 	mov	arg01, local05
16744     09 33 02 F6 | 	mov	local11, arg01
16748     97 06 48 FB | 	callpa	#(@LR__1691-@LR__1690)>>2,fcache_load_ptr_
1674c                 | LR__1690
1674c     19 FB C9 FA | 	rdbyte	result1, local11 wz
16750     01 32 06 51 |  if_ne	add	local11, #1
16754     F4 FF 9F 5D |  if_ne	jmp	#LR__1690
16758                 | LR__1691
16758     09 33 82 F1 | 	sub	local11, arg01
1675c     19 15 02 F6 | 	mov	arg02, local11
16760     01 14 86 F1 | 	sub	arg02, #1
16764     13 13 02 F6 | 	mov	arg01, local05
16768     88 46 B0 FD | 	call	#__system__Left_S
1676c     56 00 00 FF 
16770     F0 E4 05 F1 | 	add	objptr, ##44272
16774     F2 FA 61 FC | 	wrlong	result1, objptr
16778     56 00 00 FF 
1677c     B8 E4 85 F1 | 	sub	objptr, ##44216
16780     F2 12 E2 FA | 	rdword	arg01, objptr
16784     02 12 86 F1 | 	sub	arg01, #2
16788     02 E4 05 F1 | 	add	objptr, #2
1678c     F2 14 C2 FA | 	rdbyte	arg02, objptr
16790     3A E4 85 F1 | 	sub	objptr, #58
16794     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16798     20 12 06 F6 | 	mov	arg01, #32
1679c     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
167a0     38 E4 05 F1 | 	add	objptr, #56
167a4     F2 12 E2 FA | 	rdword	arg01, objptr
167a8     02 12 86 F1 | 	sub	arg01, #2
167ac     02 E4 05 F1 | 	add	objptr, #2
167b0     F2 24 C2 FA | 	rdbyte	local04, objptr
167b4     3A E4 85 F1 | 	sub	objptr, #58
167b8     12 23 E2 F8 | 	getbyte	local03, local04, #0
167bc     11 15 02 F6 | 	mov	arg02, local03
167c0     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
167c4     24 00 90 FD | 	jmp	#LR__1693
167c8                 | LR__1692
167c8     47 01 00 FF 
167cc     A3 20 06 F6 | 	mov	local02, ##@LR__4670
167d0     56 00 00 FF 
167d4     F0 E4 05 F1 | 	add	objptr, ##44272
167d8     F2 20 62 FC | 	wrlong	local02, objptr
167dc     56 00 00 FF 
167e0     B8 E4 85 F1 | 	sub	objptr, ##44216
167e4     F2 08 58 FC | 	wrword	#4, objptr
167e8     38 E4 85 F1 | 	sub	objptr, #56
167ec                 | LR__1693
167ec                 | LR__1694
167ec                 | '    
167ec                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
167ec                 | '  
167ec                 | '   if key4=key_enter then 
167ec     7A 00 00 FF 
167f0     78 E5 05 F1 | 	add	objptr, ##62840
167f4     F2 28 02 FB | 	rdlong	local06, objptr
167f8     7A 00 00 FF 
167fc     78 E5 85 F1 | 	sub	objptr, ##62840
16800     8D 28 0E F2 | 	cmp	local06, #141 wz
16804     50 00 90 5D |  if_ne	jmp	#LR__1695
16808     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
1680c     0C A2 BE FD | 	call	#_interpret
16810     47 01 00 FF 
16814     A4 20 06 F6 | 	mov	local02, ##@LR__4671
16818     56 00 00 FF 
1681c     F0 E4 05 F1 | 	add	objptr, ##44272
16820     F2 20 62 FC | 	wrlong	local02, objptr
16824     1A FA 61 FD | 	getct	result1
16828     24 00 00 FF 
1682c     90 E4 05 F1 | 	add	objptr, ##18576
16830     F2 24 02 FB | 	rdlong	local04, objptr
16834     12 23 02 F6 | 	mov	local03, local04
16838     11 FB 81 F1 | 	sub	result1, local03
1683c     F2 FA 61 FC | 	wrlong	result1, objptr
16840     14 E4 85 F1 | 	sub	objptr, #20
16844     F2 00 68 FC | 	wrlong	#0, objptr
16848     08 E4 05 F1 | 	add	objptr, #8
1684c     F2 00 68 FC | 	wrlong	#0, objptr
16850     7A 00 00 FF 
16854     74 E5 85 F1 | 	sub	objptr, ##62836
16858                 | LR__1695
16858     7A 00 00 FF 
1685c     70 E5 05 F1 | 	add	objptr, ##62832
16860     F2 00 68 FC | 	wrlong	#0, objptr
16864     7A 00 00 FF 
16868     70 E5 85 F1 | 	sub	objptr, ##62832
1686c     98 F6 9F FD | 	jmp	#LR__1670
16870     A7 F0 03 F6 | 	mov	ptra, fp
16874     B2 00 A0 FD | 	call	#popregs_
16878                 | _program_ret
16878     2D 00 64 FD | 	ret
1687c                 | 
1687c                 | ' '' this is not a main program.
1687c                 | ' 
1687c                 | ' '****************************************************************************************************************
1687c                 | ' '                                                                                                             	*
1687c                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
1687c                 | ' '                                                                                                            	*
1687c                 | ' ' mode - mode #, see below											*
1687c                 | ' ' base - HDMI base pin												*
1687c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1687c                 | ' '														*
1687c                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
1687c                 | ' '' set bit #15 for custom timings														*
1687c                 | ' '' p - 1 - psram, 0 - hub											*
1687c                 | ' '' t - 1 - graphics, 0 - text											*
1687c                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
1687c                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
1687c                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
1687c                 | ' '														*
1687c                 | ' '****************************************************************************************************************
1687c                 | ' 
1687c                 | ' pub start(base,mb):result |i
1687c                 | _hg010b_spin2_start
1687c                 | ' 
1687c                 | ' '--------------------------- initialize pointers and variables
1687c                 | ' 
1687c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1687c     30 E4 05 F1 | 	add	objptr, #48
16880     F2 FA 01 F6 | 	mov	result1, objptr
16884     28 E4 85 F1 | 	sub	objptr, #40
16888     F2 FA 61 FC | 	wrlong	result1, objptr
1688c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1688c                 | ' hdmibase:=base							' HDMI base pin, 8*n
1688c     18 E4 05 F1 | 	add	objptr, #24
16890     F2 12 62 FC | 	wrlong	arg01, objptr
16894                 | ' mailbox_ptr:=mb		
16894     04 E4 05 F1 | 	add	objptr, #4
16898     F2 14 62 FC | 	wrlong	arg02, objptr
1689c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1689c     C1 E5 05 F1 | 	add	objptr, #449
168a0     F2 14 62 FC | 	wrlong	arg02, objptr
168a4                 | ' sprite_ptr:=@spr1ptr
168a4     D8 E4 85 F1 | 	sub	objptr, #216
168a8     F2 FA 01 F6 | 	mov	result1, objptr
168ac     E5 E4 85 F1 | 	sub	objptr, #229
168b0     F2 FA 61 FC | 	wrlong	result1, objptr
168b4                 | ' 
168b4                 | ' 		'
168b4                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
168b4     E5 E4 05 F1 | 	add	objptr, #229
168b8     F2 FA 01 FB | 	rdlong	result1, objptr
168bc     D0 FA 05 F1 | 	add	result1, #208
168c0     FD 10 58 FC | 	wrword	#8, result1
168c4                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
168c4     F2 16 02 FB | 	rdlong	arg03, objptr
168c8     D2 16 06 F1 | 	add	arg03, #210
168cc     0B 21 58 FC | 	wrword	#16, arg03
168d0                 | ' leading_spaces:=0				'
168d0     A5 E5 05 F1 | 	add	objptr, #421
168d4     F2 00 68 FC | 	wrlong	#0, objptr
168d8                 | ' 
168d8                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
168d8     99 E4 85 F1 | 	sub	objptr, #153
168dc     00 00 A0 FF 
168e0     F2 0E 68 FC | 	wrlong	##1073741831, objptr
168e4                 | ' emptydl[1]:=0
168e4     04 E4 05 F1 | 	add	objptr, #4
168e8     F2 00 68 FC | 	wrlong	#0, objptr
168ec                 | ' 
168ec                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
168ec                 | ' 
168ec                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
168ec     28 E5 85 F1 | 	sub	objptr, #296
168f0     F2 02 68 FC | 	wrlong	#1, objptr
168f4                 | ' if s_debug<>0
168f4                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
168f4     20 00 80 FF 
168f8     F2 00 68 FC | 	wrlong	##16384, objptr
168fc     F5 E4 85 F1 | 	sub	objptr, #245
16900                 | ' setmode()							' set the mode, see below
16900     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
16904                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
16904     45 E4 05 F1 | 	add	objptr, #69
16908     F2 FA 01 F6 | 	mov	result1, objptr
1690c     35 E4 85 F1 | 	sub	objptr, #53
16910     F2 FA 61 FC | 	wrlong	result1, objptr
16914                 | ' cursor_ptr:=@cursor_x						
16914     28 E4 05 F1 | 	add	objptr, #40
16918     F2 16 02 F6 | 	mov	arg03, objptr
1691c     2C E4 85 F1 | 	sub	objptr, #44
16920     F2 16 62 FC | 	wrlong	arg03, objptr
16924                 | ' fontnum:=0  							' start with a PC type font 
16924     55 E4 05 F1 | 	add	objptr, #85
16928     F2 00 68 FC | 	wrlong	#0, objptr
1692c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1692c     1C E4 05 F1 | 	add	objptr, #28
16930     F2 12 02 F6 | 	mov	arg01, objptr
16934     7D E4 85 F1 | 	sub	objptr, #125
16938     10 00 00 FF 
1693c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
16940     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16944     10 00 00 FF 
16948     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1694c     10 16 06 F6 | 	mov	arg03, #16
16950     B0 23 B0 FD | 	call	#__system____builtin_memmove
16954                 | ' leading_spaces:=0
16954     01 00 00 FF 
16958     B2 E4 05 F1 | 	add	objptr, ##690
1695c     F2 00 68 FC | 	wrlong	#0, objptr
16960     01 00 00 FF 
16964     B2 E4 85 F1 | 	sub	objptr, ##690
16968                 | ' '---------------------------- initialize a cursor (MSDOS type)
16968                 | ' 
16968                 | ' initcursor(154)
16968     9A 12 06 F6 | 	mov	arg01, #154
1696c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
16970                 | ' 
16970                 | ' '---------------------------- start the cog
16970                 | ' 
16970                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
16970     10 00 00 FF 
16974     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
16978     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1697c     10 00 00 FF 
16980     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
16984     10 E4 05 F1 | 	add	objptr, #16
16988     10 FA 05 F6 | 	mov	result1, #16
1698c     28 E4 61 FD | 	setq	objptr
16990     0A FB F1 FC | 	coginit	result1, arg02 wc
16994     01 FA 65 C6 |  if_b	neg	result1, #1
16998     1C E4 05 F1 | 	add	objptr, #28
1699c     F2 FA 61 FC | 	wrlong	result1, objptr
169a0     2C E4 85 F1 | 	sub	objptr, #44
169a4                 | ' waitms(40)							' wait for stabilize
169a4     28 12 06 F6 | 	mov	arg01, #40
169a8     2C 27 B0 FD | 	call	#__system___waitms
169ac                 | ' return cog							' return the driver's cog #
169ac     2C E4 05 F1 | 	add	objptr, #44
169b0     F2 FA 01 FB | 	rdlong	result1, objptr
169b4     2C E4 85 F1 | 	sub	objptr, #44
169b8                 | _hg010b_spin2_start_ret
169b8     2D 00 64 FD | 	ret
169bc                 | 
169bc                 | ' 
169bc                 | ' 
169bc                 | ' '**************************************************************************************************************** 
169bc                 | ' '                                                                                                             	*
169bc                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
169bc                 | ' '  Mode number - see start() above or bits below								*
169bc                 | ' '                                                                                                             	*
169bc                 | ' '****************************************************************************************************************
169bc                 | ' 
169bc                 | ' '---------------------------- initialize a cursor (MSDOS type)
169bc                 | ' pub initcursor(color) |i
169bc                 | _hg010b_spin2_initcursor
169bc     03 4A 05 F6 | 	mov	COUNT_, #3
169c0     A8 00 A0 FD | 	call	#pushregs_
169c4     09 1F 02 F6 | 	mov	local01, arg01
169c8                 | ' 
169c8                 | ' cursor_x:=0							' place the cursor at 0:0
169c8     38 E4 05 F1 | 	add	objptr, #56
169cc     F2 00 58 FC | 	wrword	#0, objptr
169d0                 | ' cursor_y:=0
169d0     02 E4 05 F1 | 	add	objptr, #2
169d4     F2 00 48 FC | 	wrbyte	#0, objptr
169d8                 | ' repeat i from 0 to 111
169d8     00 20 06 F6 | 	mov	local02, #0
169dc     F8 E5 05 F1 | 	add	objptr, #504
169e0     97 1A 48 FB | 	callpa	#(@LR__1702-@LR__1700)>>2,fcache_load_ptr_
169e4                 | LR__1700
169e4                 | '   cursor[i]:=0
169e4     10 23 02 F6 | 	mov	local03, local02
169e8     F2 22 02 F1 | 	add	local03, objptr
169ec     11 01 48 FC | 	wrbyte	#0, local03
169f0     01 20 06 F1 | 	add	local02, #1
169f4     70 20 56 F2 | 	cmps	local02, #112 wc
169f8     E8 FF 9F CD |  if_b	jmp	#LR__1700
169fc                 | ' repeat i from 112 to 127
169fc     70 20 06 F6 | 	mov	local02, #112
16a00                 | LR__1701
16a00                 | '   cursor[i]:=color  
16a00     10 23 02 F6 | 	mov	local03, local02
16a04     F2 22 02 F1 | 	add	local03, objptr
16a08     11 1F 42 FC | 	wrbyte	local01, local03
16a0c     01 20 06 F1 | 	add	local02, #1
16a10     80 20 16 F2 | 	cmp	local02, #128 wc
16a14     E8 FF 9F CD |  if_b	jmp	#LR__1701
16a18                 | LR__1702
16a18                 | ' 'repeat i from 0 to 127
16a18                 | ' '  if ((i/8)//2)
16a18                 | ' '    cursor[i]:=15
16a18                 | ' '  else
16a18                 | ' '    cursor[i]:=0
16a18                 | ' '  if i>=120    
16a18                 | ' '    cursor[i]:=40
16a18                 | ' setspriteptr(17,@cursor)
16a18     F2 14 02 F6 | 	mov	arg02, objptr
16a1c     01 00 00 FF 
16a20     32 E4 85 F1 | 	sub	objptr, ##562
16a24     11 12 06 F6 | 	mov	arg01, #17
16a28     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
16a2c                 | ' setspritesize(17,8,16)
16a2c     11 12 06 F6 | 	mov	arg01, #17
16a30     08 14 06 F6 | 	mov	arg02, #8
16a34     10 16 06 F6 | 	mov	arg03, #16
16a38     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
16a3c                 | ' setspritepos(17,0,0)
16a3c     11 12 06 F6 | 	mov	arg01, #17
16a40     00 14 06 F6 | 	mov	arg02, #0
16a44     00 16 06 F6 | 	mov	arg03, #0
16a48     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
16a4c     A7 F0 03 F6 | 	mov	ptra, fp
16a50     B2 00 A0 FD | 	call	#popregs_
16a54                 | _hg010b_spin2_initcursor_ret
16a54     2D 00 64 FD | 	ret
16a58                 | 
16a58                 | ' 
16a58                 | '  
16a58                 | ' pub setcursorcolor(color) |i
16a58                 | _hg010b_spin2_setcursorcolor
16a58                 | ' 
16a58                 | ' 
16a58                 | ' repeat i from 0 to 111
16a58     00 00 06 F6 | 	mov	_var01, #0
16a5c     01 00 00 FF 
16a60     32 E4 05 F1 | 	add	objptr, ##562
16a64     97 1A 48 FB | 	callpa	#(@LR__1712-@LR__1710)>>2,fcache_load_ptr_
16a68                 | LR__1710
16a68                 | '   cursor[i]:=0
16a68     00 03 02 F6 | 	mov	_var02, _var01
16a6c     F2 02 02 F1 | 	add	_var02, objptr
16a70     01 01 48 FC | 	wrbyte	#0, _var02
16a74     01 00 06 F1 | 	add	_var01, #1
16a78     70 00 56 F2 | 	cmps	_var01, #112 wc
16a7c     E8 FF 9F CD |  if_b	jmp	#LR__1710
16a80                 | ' repeat i from 112 to 127
16a80     70 00 06 F6 | 	mov	_var01, #112
16a84                 | LR__1711
16a84                 | '   cursor[i]:=color  
16a84     00 03 02 F6 | 	mov	_var02, _var01
16a88     F2 02 02 F1 | 	add	_var02, objptr
16a8c     01 13 42 FC | 	wrbyte	arg01, _var02
16a90     01 00 06 F1 | 	add	_var01, #1
16a94     80 00 16 F2 | 	cmp	_var01, #128 wc
16a98     E8 FF 9F CD |  if_b	jmp	#LR__1711
16a9c                 | LR__1712
16a9c     01 00 00 FF 
16aa0     32 E4 85 F1 | 	sub	objptr, ##562
16aa4                 | _hg010b_spin2_setcursorcolor_ret
16aa4     2D 00 64 FD | 	ret
16aa8                 | 
16aa8                 | '  
16aa8                 | ' 
16aa8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
16aa8                 | _hg010b_spin2_setmode
16aa8     02 4A 05 F6 | 	mov	COUNT_, #2
16aac     A8 00 A0 FD | 	call	#pushregs_
16ab0                 | ' 
16ab0                 | ' 
16ab0                 | ' dl_ptr:=@emptydl[0]
16ab0     01 00 00 FF 
16ab4     19 E4 05 F1 | 	add	objptr, ##537
16ab8     F2 64 02 F6 | 	mov	muldivb_, objptr
16abc     FD E5 85 F1 | 	sub	objptr, #509
16ac0     F2 64 62 FC | 	wrlong	muldivb_, objptr
16ac4                 | ' 
16ac4                 | ' if cog>0 
16ac4     10 E4 05 F1 | 	add	objptr, #16
16ac8     F2 64 02 FB | 	rdlong	muldivb_, objptr
16acc     2C E4 85 F1 | 	sub	objptr, #44
16ad0     01 64 56 F2 | 	cmps	muldivb_, #1 wc
16ad4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
16ad4     01 12 06 36 |  if_ae	mov	arg01, #1
16ad8     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
16adc                 | ' xres:=1024
16adc     01 00 00 FF 
16ae0     22 E4 05 F1 | 	add	objptr, ##546
16ae4     02 00 80 FF 
16ae8     F2 00 68 FC | 	wrlong	##1024, objptr
16aec                 | ' yres:=576  
16aec     04 E4 05 F1 | 	add	objptr, #4
16af0     01 00 80 FF 
16af4     F2 80 68 FC | 	wrlong	##576, objptr
16af8                 | ' ppl:=(timings[3])
16af8     10 00 00 FF 
16afc     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
16b00     F7 64 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
16b04     51 E5 85 F1 | 	sub	objptr, #337
16b08     F2 64 62 FC | 	wrlong	muldivb_, objptr
16b0c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
16b0c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
16b10     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16b14     01 1E 66 F0 | 	shl	local01, #1
16b18     80 E4 85 F1 | 	sub	objptr, #128
16b1c     F2 1E 62 FC | 	wrlong	local01, objptr
16b20                 | ' cpl1:=cpl '' todo remove
16b20     04 E4 05 F1 | 	add	objptr, #4
16b24     F2 1E 62 FC | 	wrlong	local01, objptr
16b28                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
16b28     02 00 00 FF 
16b2c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
16b30     41 E4 85 F1 | 	sub	objptr, #65
16b34     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16b38                 | ' repeat i from 0 to 3
16b38     00 20 06 F6 | 	mov	local02, #0
16b3c     02 00 00 FF 
16b40     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
16b44     08 E4 05 F1 | 	add	objptr, #8
16b48     97 20 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
16b4c                 | LR__1720
16b4c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
16b4c     10 1F 02 F6 | 	mov	local01, local02
16b50     02 1E 66 F0 | 	shl	local01, #2
16b54     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
16b58     F2 64 02 FB | 	rdlong	muldivb_, objptr
16b5c     11 64 66 F0 | 	shl	muldivb_, #17
16b60     0F 1F 02 FB | 	rdlong	local01, local01
16b64     32 1F 02 F1 | 	add	local01, muldivb_
16b68     80 40 38 FF 
16b6c     00 1E 06 F1 | 	add	local01, ##1887502336
16b70     10 65 02 F6 | 	mov	muldivb_, local02
16b74     02 64 66 F0 | 	shl	muldivb_, #2
16b78     F7 64 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
16b7c     32 1F 62 FC | 	wrlong	local01, muldivb_
16b80     01 20 06 F1 | 	add	local02, #1
16b84     04 20 56 F2 | 	cmps	local02, #4 wc
16b88     C0 FF 9F CD |  if_b	jmp	#LR__1720
16b8c                 | LR__1721
16b8c     20 E4 85 F1 | 	sub	objptr, #32
16b90                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
16b90     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
16b94     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16b98     14 1E 66 FC | 	wrlong	local01, #20
16b9c                 | ' hubset(timings[10])
16b9c     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
16ba0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
16ba4     10 00 00 FF 
16ba8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
16bac     00 12 62 FD | 	hubset	arg01
16bb0                 | ' waitms(1)                                                   	' wait for stabilization
16bb0     01 12 06 F6 | 	mov	arg01, #1
16bb4     20 25 B0 FD | 	call	#__system___waitms
16bb8     10 00 00 FF 
16bbc     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
16bc0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
16bc4     5D E4 05 F1 | 	add	objptr, #93
16bc8     F2 20 62 FC | 	wrlong	local02, objptr
16bcc     10 1F 52 F6 | 	abs	local01, local02 wc
16bd0     04 1E 46 F0 | 	shr	local01, #4
16bd4     0F 1F 82 F6 | 	negc	local01, local01
16bd8     9C E4 05 F1 | 	add	objptr, #156
16bdc     F2 1E 62 FC | 	wrlong	local01, objptr
16be0     A4 E4 85 F1 | 	sub	objptr, #164
16be4     F2 20 02 FB | 	rdlong	local02, objptr
16be8     08 E4 05 F1 | 	add	objptr, #8
16bec     F2 1E 02 FB | 	rdlong	local01, objptr
16bf0     0F 21 02 FD | 	qmul	local02, local01
16bf4                 | ' lines:=timings[11]
16bf4                 | ' t_lines:=lines/16
16bf4                 | ' buflen:=cpl*lines						' framebuffer length in longs
16bf4     29 E4 85 F1 | 	sub	objptr, #41
16bf8                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
16bf8     19 1E C6 F9 | 	decod	local01, #25
16bfc                 | ' mode_ptr:=@timings						' set pointers to timings
16bfc     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
16c00                 | ' graphmode:=1024+512+192+48							' det global variable
16c00                 | ' makedl(graphmode)							' make a DL for the mode
16c00     03 00 00 FF 
16c04     F0 12 06 F6 | 	mov	arg01, ##1776
16c08     18 20 62 FD | 	getqx	local02
16c0c     F2 20 62 FC | 	wrlong	local02, objptr
16c10     34 E4 85 F1 | 	sub	objptr, #52
16c14     02 20 66 F0 | 	shl	local02, #2
16c18     10 1F 82 F1 | 	sub	local01, local02
16c1c     F2 1E 62 FC | 	wrlong	local01, objptr
16c20     14 E4 05 F1 | 	add	objptr, #20
16c24     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16c28     79 E4 05 F1 | 	add	objptr, #121
16c2c     03 00 80 FF 
16c30     F2 E0 69 FC | 	wrlong	##1776, objptr
16c34     8D E4 85 F1 | 	sub	objptr, #141
16c38     10 00 00 FF 
16c3c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
16c40     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
16c44                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
16c44     F2 1E 02 FB | 	rdlong	local01, objptr
16c48     D9 E4 05 F1 | 	add	objptr, #217
16c4c     F2 1E 62 FC | 	wrlong	local01, objptr
16c50                 | ' s_font_ptr:=font_ptr
16c50     D5 E4 85 F1 | 	sub	objptr, #213
16c54     F2 1E 02 FB | 	rdlong	local01, objptr
16c58     D9 E4 05 F1 | 	add	objptr, #217
16c5c     F2 1E 62 FC | 	wrlong	local01, objptr
16c60                 | ' s_lines:=lines
16c60     80 E4 85 F1 | 	sub	objptr, #128
16c64     F2 1E 02 FB | 	rdlong	local01, objptr
16c68     84 E4 05 F1 | 	add	objptr, #132
16c6c     F2 1E 62 FC | 	wrlong	local01, objptr
16c70                 | ' s_buflen:=buflen
16c70     AD E4 85 F1 | 	sub	objptr, #173
16c74     F2 1E 02 FB | 	rdlong	local01, objptr
16c78     B5 E4 05 F1 | 	add	objptr, #181
16c7c     F2 1E 62 FC | 	wrlong	local01, objptr
16c80                 | ' s_cpl:=cpl
16c80     94 E4 85 F1 | 	sub	objptr, #148
16c84     F2 1E 02 FB | 	rdlong	local01, objptr
16c88     90 E4 05 F1 | 	add	objptr, #144
16c8c     F2 1E 62 FC | 	wrlong	local01, objptr
16c90                 | ' s_cpl1:=cpl
16c90     90 E4 85 F1 | 	sub	objptr, #144
16c94     F2 1E 02 FB | 	rdlong	local01, objptr
16c98     98 E4 05 F1 | 	add	objptr, #152
16c9c     F2 1E 62 FC | 	wrlong	local01, objptr
16ca0                 | ' st_lines:=t_lines
16ca0     0C E4 05 F1 | 	add	objptr, #12
16ca4     F2 1E 02 FB | 	rdlong	local01, objptr
16ca8     04 E4 05 F1 | 	add	objptr, #4
16cac     F2 1E 62 FC | 	wrlong	local01, objptr
16cb0                 | ' ppl:=ppl/xzoom  
16cb0     28 E4 85 F1 | 	sub	objptr, #40
16cb4     F2 62 02 FB | 	rdlong	muldiva_, objptr
16cb8     2C E4 05 F1 | 	add	objptr, #44
16cbc     F2 64 02 FB | 	rdlong	muldivb_, objptr
16cc0     01 E5 85 F1 | 	sub	objptr, #257
16cc4     BA 00 A0 FD | 	call	#divide_
16cc8     D5 E4 05 F1 | 	add	objptr, #213
16ccc     F2 64 62 FC | 	wrlong	muldivb_, objptr
16cd0                 | ' s_ppl:=ppl
16cd0     1C E4 05 F1 | 	add	objptr, #28
16cd4     F2 64 62 FC | 	wrlong	muldivb_, objptr
16cd8     F1 E4 85 F1 | 	sub	objptr, #241
16cdc                 | ' waitms(20)							' wait 
16cdc     14 12 06 F6 | 	mov	arg01, #20
16ce0     F4 23 B0 FD | 	call	#__system___waitms
16ce4     A7 F0 03 F6 | 	mov	ptra, fp
16ce8     B2 00 A0 FD | 	call	#popregs_
16cec                 | _hg010b_spin2_setmode_ret
16cec     2D 00 64 FD | 	ret
16cf0                 | 
16cf0                 | ' 
16cf0                 | ' 
16cf0                 | ' '****************************************************************************************************************
16cf0                 | ' '                                                                                                             	*
16cf0                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
16cf0                 | ' '                                                                                                             	*
16cf0                 | ' '****************************************************************************************************************
16cf0                 | ' 
16cf0                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
16cf0                 | _hg010b_spin2_makedl
16cf0                 | ' 
16cf0                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
16cf0                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
16cf0                 | ' repeat i from 0 to 11                                                           ' clear DL
16cf0     00 00 06 F6 | 	mov	_var01, #0
16cf4     E9 E5 05 F1 | 	add	objptr, #489
16cf8     97 0E 48 FB | 	callpa	#(@LR__1731-@LR__1730)>>2,fcache_load_ptr_
16cfc                 | LR__1730
16cfc                 | '   displaylist[i]:=0 
16cfc     00 03 02 F6 | 	mov	_var02, _var01
16d00     02 02 66 F0 | 	shl	_var02, #2
16d04     F2 02 02 F1 | 	add	_var02, objptr
16d08     01 01 68 FC | 	wrlong	#0, _var02
16d0c     01 00 06 F1 | 	add	_var01, #1
16d10     0C 00 56 F2 | 	cmps	_var01, #12 wc
16d14     E4 FF 9F CD |  if_b	jmp	#LR__1730
16d18                 | LR__1731
16d18                 | '                         ' 
16d18                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
16d18     8C E5 85 F1 | 	sub	objptr, #396
16d1c     F2 02 02 FB | 	rdlong	_var02, objptr
16d20     14 02 66 F0 | 	shl	_var02, #20
16d24     01 02 06 F1 | 	add	_var02, #1
16d28     04 E4 85 F1 | 	sub	objptr, #4
16d2c     F2 00 02 FB | 	rdlong	_var01, objptr
16d30     02 00 66 F0 | 	shl	_var01, #2
16d34     04 00 66 F0 | 	shl	_var01, #4
16d38     00 03 02 F1 | 	add	_var02, _var01
16d3c     90 E5 05 F1 | 	add	objptr, #400
16d40     F2 02 62 FC | 	wrlong	_var02, objptr
16d44     E9 E5 85 F1 | 	sub	objptr, #489
16d48                 | ' displaylist[1]:=buf_ptr<<4+%10  
16d48     F2 02 02 FB | 	rdlong	_var02, objptr
16d4c     04 02 66 F0 | 	shl	_var02, #4
16d50     02 02 06 F1 | 	add	_var02, #2
16d54     ED E5 05 F1 | 	add	objptr, #493
16d58     F2 02 62 FC | 	wrlong	_var02, objptr
16d5c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
16d5c     04 E4 85 F1 | 	sub	objptr, #4
16d60     F2 02 02 F6 | 	mov	_var02, objptr
16d64     CD E5 85 F1 | 	sub	objptr, #461
16d68     F2 02 62 FC | 	wrlong	_var02, objptr
16d6c     1C E4 85 F1 | 	sub	objptr, #28
16d70                 | _hg010b_spin2_makedl_ret
16d70     2D 00 64 FD | 	ret
16d74                 | 
16d74                 | ' 
16d74                 | ' 
16d74                 | ' '****************************************************************************************************************
16d74                 | ' '                                                                        					*
16d74                 | ' '  Graphic primitives                                                    					*
16d74                 | ' '                                                                        					*
16d74                 | ' '****************************************************************************************************************
16d74                 | ' 
16d74                 | ' pub setspriteptr(num,ptr)
16d74                 | _hg010b_spin2_setspriteptr
16d74                 | ' long[@spr1ptr+12*num]:=ptr
16d74     0D E5 05 F1 | 	add	objptr, #269
16d78     F2 00 02 F6 | 	mov	_var01, objptr
16d7c     09 03 02 F6 | 	mov	_var02, arg01
16d80     01 02 66 F0 | 	shl	_var02, #1
16d84     09 03 02 F1 | 	add	_var02, arg01
16d88     02 02 66 F0 | 	shl	_var02, #2
16d8c     01 01 02 F1 | 	add	_var01, _var02
16d90     00 15 62 FC | 	wrlong	arg02, _var01
16d94     0D E5 85 F1 | 	sub	objptr, #269
16d98                 | _hg010b_spin2_setspriteptr_ret
16d98     2D 00 64 FD | 	ret
16d9c                 | 
16d9c                 | ' 
16d9c                 | ' pub setspritepos(num,x,y)
16d9c                 | _hg010b_spin2_setspritepos
16d9c                 | ' word[@spr1ptr+12*num+4]:=x
16d9c     0D E5 05 F1 | 	add	objptr, #269
16da0     F2 00 02 F6 | 	mov	_var01, objptr
16da4     09 03 02 F6 | 	mov	_var02, arg01
16da8     01 02 66 F0 | 	shl	_var02, #1
16dac     09 03 02 F1 | 	add	_var02, arg01
16db0     02 02 66 F0 | 	shl	_var02, #2
16db4     01 01 02 F1 | 	add	_var01, _var02
16db8     04 00 06 F1 | 	add	_var01, #4
16dbc     00 15 52 FC | 	wrword	arg02, _var01
16dc0                 | ' word[@spr1ptr+12*num+6]:=y
16dc0     F2 00 02 F6 | 	mov	_var01, objptr
16dc4     09 03 02 F6 | 	mov	_var02, arg01
16dc8     01 02 66 F0 | 	shl	_var02, #1
16dcc     09 03 02 F1 | 	add	_var02, arg01
16dd0     02 02 66 F0 | 	shl	_var02, #2
16dd4     01 01 02 F1 | 	add	_var01, _var02
16dd8     06 00 06 F1 | 	add	_var01, #6
16ddc     00 17 52 FC | 	wrword	arg03, _var01
16de0     0D E5 85 F1 | 	sub	objptr, #269
16de4                 | _hg010b_spin2_setspritepos_ret
16de4     2D 00 64 FD | 	ret
16de8                 | 
16de8                 | ' 
16de8                 | ' pub setspritesize(num,w,h)
16de8                 | _hg010b_spin2_setspritesize
16de8                 | ' word[@spr1ptr+12*num+8]:=w
16de8     0D E5 05 F1 | 	add	objptr, #269
16dec     F2 00 02 F6 | 	mov	_var01, objptr
16df0     09 03 02 F6 | 	mov	_var02, arg01
16df4     01 02 66 F0 | 	shl	_var02, #1
16df8     09 03 02 F1 | 	add	_var02, arg01
16dfc     02 02 66 F0 | 	shl	_var02, #2
16e00     01 01 02 F1 | 	add	_var01, _var02
16e04     08 00 06 F1 | 	add	_var01, #8
16e08     00 15 52 FC | 	wrword	arg02, _var01
16e0c                 | ' word[@spr1ptr+12*num+10]:=h
16e0c     F2 00 02 F6 | 	mov	_var01, objptr
16e10     09 03 02 F6 | 	mov	_var02, arg01
16e14     01 02 66 F0 | 	shl	_var02, #1
16e18     09 03 02 F1 | 	add	_var02, arg01
16e1c     02 02 66 F0 | 	shl	_var02, #2
16e20     01 01 02 F1 | 	add	_var01, _var02
16e24     0A 00 06 F1 | 	add	_var01, #10
16e28     00 17 52 FC | 	wrword	arg03, _var01
16e2c     0D E5 85 F1 | 	sub	objptr, #269
16e30                 | _hg010b_spin2_setspritesize_ret
16e30     2D 00 64 FD | 	ret
16e34                 | 
16e34                 | ' 
16e34                 | ' 
16e34                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
16e34                 | ' 
16e34                 | ' 
16e34                 | ' pub putpixel(x,y,c)
16e34                 | _hg010b_spin2_putpixel
16e34     04 4A 05 F6 | 	mov	COUNT_, #4
16e38     A8 00 A0 FD | 	call	#pushregs_
16e3c     09 1F 02 F6 | 	mov	local01, arg01
16e40                 | ' 
16e40                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
16e40     00 20 06 F6 | 	mov	local02, #0
16e44     00 1E 56 F2 | 	cmps	local01, #0 wc
16e48     01 20 66 36 |  if_ae	neg	local02, #1
16e4c     E5 E4 05 F1 | 	add	objptr, #229
16e50     F2 1A 02 FB | 	rdlong	arg05, objptr
16e54     02 1A 66 F0 | 	shl	arg05, #2
16e58     0D 1F 52 F2 | 	cmps	local01, arg05 wc
16e5c     11 23 A2 F1 | 	subx	local03, local03
16e60     11 21 02 F5 | 	and	local02, local03
16e64     00 22 06 F6 | 	mov	local03, #0
16e68     00 14 56 F2 | 	cmps	arg02, #0 wc
16e6c     01 22 66 36 |  if_ae	neg	local03, #1
16e70     11 21 02 F5 | 	and	local02, local03
16e74     04 E4 85 F1 | 	sub	objptr, #4
16e78     F2 22 02 FB | 	rdlong	local03, objptr
16e7c     E1 E4 85 F1 | 	sub	objptr, #225
16e80     11 15 52 F2 | 	cmps	arg02, local03 wc
16e84     12 25 A2 F1 | 	subx	local04, local04
16e88     12 21 CA F7 | 	test	local02, local04 wz
16e8c     48 00 90 AD |  if_e	jmp	#LR__1740
16e90     D9 E4 05 F1 | 	add	objptr, #217
16e94     F2 12 02 FB | 	rdlong	arg01, objptr
16e98     14 E4 05 F1 | 	add	objptr, #20
16e9c     F2 24 02 FB | 	rdlong	local04, objptr
16ea0     02 24 66 F0 | 	shl	local04, #2
16ea4     0A 25 02 FD | 	qmul	local04, arg02
16ea8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16ea8     0B 15 02 F6 | 	mov	arg02, arg03
16eac     01 16 06 F6 | 	mov	arg03, #1
16eb0     00 18 06 F6 | 	mov	arg04, #0
16eb4     01 1A 06 F6 | 	mov	arg05, #1
16eb8     0A 00 00 FF 
16ebc     D3 E5 05 F1 | 	add	objptr, ##5587
16ec0     18 24 62 FD | 	getqx	local04
16ec4     0F 25 02 F1 | 	add	local04, local01
16ec8     12 13 02 F1 | 	add	arg01, local04
16ecc     FC 14 B0 FD | 	call	#_psram_spin2_fill
16ed0     0B 00 00 FF 
16ed4     C0 E4 85 F1 | 	sub	objptr, ##5824
16ed8                 | LR__1740
16ed8     A7 F0 03 F6 | 	mov	ptra, fp
16edc     B2 00 A0 FD | 	call	#popregs_
16ee0                 | _hg010b_spin2_putpixel_ret
16ee0     2D 00 64 FD | 	ret
16ee4                 | 
16ee4                 | ' 
16ee4                 | ' pub putpixel2(x,y,c)
16ee4                 | _hg010b_spin2_putpixel2
16ee4     02 4A 05 F6 | 	mov	COUNT_, #2
16ee8     A8 00 A0 FD | 	call	#pushregs_
16eec     D9 E4 05 F1 | 	add	objptr, #217
16ef0     F2 1E 02 FB | 	rdlong	local01, objptr
16ef4     14 E4 05 F1 | 	add	objptr, #20
16ef8     F2 1A 02 FB | 	rdlong	arg05, objptr
16efc     02 1A 66 F0 | 	shl	arg05, #2
16f00     0A 1B 02 FD | 	qmul	arg05, arg02
16f04                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16f04     0B 15 02 F6 | 	mov	arg02, arg03
16f08     01 16 06 F6 | 	mov	arg03, #1
16f0c     00 18 06 F6 | 	mov	arg04, #0
16f10     01 1A 06 F6 | 	mov	arg05, #1
16f14     0A 00 00 FF 
16f18     D3 E5 05 F1 | 	add	objptr, ##5587
16f1c     18 20 62 FD | 	getqx	local02
16f20     09 21 02 F1 | 	add	local02, arg01
16f24     10 1F 02 F1 | 	add	local01, local02
16f28     0F 13 02 F6 | 	mov	arg01, local01
16f2c     9C 14 B0 FD | 	call	#_psram_spin2_fill
16f30     0B 00 00 FF 
16f34     C0 E4 85 F1 | 	sub	objptr, ##5824
16f38     A7 F0 03 F6 | 	mov	ptra, fp
16f3c     B2 00 A0 FD | 	call	#popregs_
16f40                 | _hg010b_spin2_putpixel2_ret
16f40     2D 00 64 FD | 	ret
16f44                 | 
16f44                 | ' 
16f44                 | ' pub getpixel2(x,y): c 
16f44                 | _hg010b_spin2_getpixel2
16f44     02 4A 05 F6 | 	mov	COUNT_, #2
16f48     A8 00 A0 FD | 	call	#pushregs_
16f4c     0C F0 07 F1 | 	add	ptra, #12
16f50     04 4E 05 F1 | 	add	fp, #4
16f54     A7 12 62 FC | 	wrlong	arg01, fp
16f58     04 4E 05 F1 | 	add	fp, #4
16f5c     A7 14 62 FC | 	wrlong	arg02, fp
16f60     08 4E 85 F1 | 	sub	fp, #8
16f64     A7 00 68 FC | 	wrlong	#0, fp
16f68     A7 12 02 F6 | 	mov	arg01, fp
16f6c     D9 E4 05 F1 | 	add	objptr, #217
16f70     F2 14 02 FB | 	rdlong	arg02, objptr
16f74     14 E4 05 F1 | 	add	objptr, #20
16f78     F2 16 02 FB | 	rdlong	arg03, objptr
16f7c     02 16 66 F0 | 	shl	arg03, #2
16f80     08 4E 05 F1 | 	add	fp, #8
16f84     A7 FA 01 FB | 	rdlong	result1, fp
16f88     FD 16 02 FD | 	qmul	arg03, result1
16f8c                 | ' 
16f8c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
16f8c     04 4E 85 F1 | 	sub	fp, #4
16f90     A7 1E 02 FB | 	rdlong	local01, fp
16f94     04 4E 85 F1 | 	sub	fp, #4
16f98     01 16 06 F6 | 	mov	arg03, #1
16f9c     0A 00 00 FF 
16fa0     D3 E5 05 F1 | 	add	objptr, ##5587
16fa4     18 20 62 FD | 	getqx	local02
16fa8     0F 21 02 F1 | 	add	local02, local01
16fac     10 15 02 F1 | 	add	arg02, local02
16fb0     E0 12 B0 FD | 	call	#_psram_spin2_read1
16fb4     0B 00 00 FF 
16fb8     C0 E4 85 F1 | 	sub	objptr, ##5824
16fbc                 | ' return c
16fbc     A7 FA 01 FB | 	rdlong	result1, fp
16fc0     A7 F0 03 F6 | 	mov	ptra, fp
16fc4     B2 00 A0 FD | 	call	#popregs_
16fc8                 | _hg010b_spin2_getpixel2_ret
16fc8     2D 00 64 FD | 	ret
16fcc                 | 
16fcc                 | '   
16fcc                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
16fcc                 | ' 
16fcc                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
16fcc                 | _hg010b_spin2_fastline
16fcc     02 4A 05 F6 | 	mov	COUNT_, #2
16fd0     A8 00 A0 FD | 	call	#pushregs_
16fd4     09 1F 02 F6 | 	mov	local01, arg01
16fd8     0A 21 02 F6 | 	mov	local02, arg02
16fdc                 | ' 
16fdc                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
16fdc     00 16 56 F2 | 	cmps	arg03, #0 wc
16fe0     F4 00 90 CD |  if_b	jmp	#LR__1750
16fe4     01 00 00 FF 
16fe8     26 E4 05 F1 | 	add	objptr, ##550
16fec     F2 1A 02 FB | 	rdlong	arg05, objptr
16ff0     01 00 00 FF 
16ff4     26 E4 85 F1 | 	sub	objptr, ##550
16ff8     0D 17 52 F2 | 	cmps	arg03, arg05 wc
16ffc     D8 00 90 3D |  if_ae	jmp	#LR__1750
17000     00 1E 56 F2 | 	cmps	local01, #0 wc
17004     00 20 56 C2 |  if_b	cmps	local02, #0 wc
17008     CC 00 90 CD |  if_b	jmp	#LR__1750
1700c     01 00 00 FF 
17010     22 E4 05 F1 | 	add	objptr, ##546
17014     F2 1A 02 FB | 	rdlong	arg05, objptr
17018     01 00 00 FF 
1701c     22 E4 85 F1 | 	sub	objptr, ##546
17020     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
17024     01 00 00 1F 
17028     22 E4 05 11 |  if_a	add	objptr, ##546
1702c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
17030     01 00 00 1F 
17034     22 E4 85 11 |  if_a	sub	objptr, ##546
17038     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1703c                 | '   return
1703c     98 00 90 1D |  if_a	jmp	#LR__1750
17040     10 1F 5A F2 | 	cmps	local01, local02 wcz
17044     0F 1B 02 16 |  if_a	mov	arg05, local01
17048     10 1F 02 16 |  if_a	mov	local01, local02
1704c     0D 21 02 16 |  if_a	mov	local02, arg05
17050     00 1E 56 F2 | 	cmps	local01, #0 wc
17054     00 1E 06 C6 |  if_b	mov	local01, #0
17058     01 00 00 FF 
1705c     22 E4 05 F1 | 	add	objptr, ##546
17060     F2 1A 02 FB | 	rdlong	arg05, objptr
17064     01 00 00 FF 
17068     22 E4 85 F1 | 	sub	objptr, ##546
1706c     0D 21 52 F2 | 	cmps	local02, arg05 wc
17070     01 00 00 3F 
17074     22 E4 05 31 |  if_ae	add	objptr, ##546
17078     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1707c     01 00 00 3F 
17080     22 E4 85 31 |  if_ae	sub	objptr, ##546
17084     D9 E4 05 F1 | 	add	objptr, #217
17088     F2 12 02 FB | 	rdlong	arg01, objptr
1708c     14 E4 05 F1 | 	add	objptr, #20
17090     F2 1A 02 FB | 	rdlong	arg05, objptr
17094     02 1A 66 F0 | 	shl	arg05, #2
17098     0B 1B 02 FD | 	qmul	arg05, arg03
1709c                 | ' if x1>x2
1709c                 | '   x1,x2:=x2,x1
1709c                 | ' if x1<0 
1709c                 | '   x1:=0
1709c                 | ' if x2>=xres
1709c                 | '   x2:=xres-1  
1709c     01 20 86 31 |  if_ae	sub	local02, #1
170a0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
170a0     01 16 06 F6 | 	mov	arg03, #1
170a4     10 17 02 F1 | 	add	arg03, local02
170a8     0F 17 82 F1 | 	sub	arg03, local01
170ac     0C 15 02 F6 | 	mov	arg02, arg04
170b0     00 18 06 F6 | 	mov	arg04, #0
170b4     01 1A 06 F6 | 	mov	arg05, #1
170b8     0A 00 00 FF 
170bc     D3 E5 05 F1 | 	add	objptr, ##5587
170c0     18 20 62 FD | 	getqx	local02
170c4     0F 21 02 F1 | 	add	local02, local01
170c8     10 13 02 F1 | 	add	arg01, local02
170cc     FC 12 B0 FD | 	call	#_psram_spin2_fill
170d0     0B 00 00 FF 
170d4     C0 E4 85 F1 | 	sub	objptr, ##5824
170d8                 | LR__1750
170d8     A7 F0 03 F6 | 	mov	ptra, fp
170dc     B2 00 A0 FD | 	call	#popregs_
170e0                 | _hg010b_spin2_fastline_ret
170e0     2D 00 64 FD | 	ret
170e4                 | 
170e4                 | ' 
170e4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
170e4                 | _hg010b_spin2_draw
170e4     0E 4A 05 F6 | 	mov	COUNT_, #14
170e8     A8 00 A0 FD | 	call	#pushregs_
170ec     09 1F 02 F6 | 	mov	local01, arg01
170f0     0A 21 02 F6 | 	mov	local02, arg02
170f4     0B 23 02 F6 | 	mov	local03, arg03
170f8     0C 25 02 F6 | 	mov	local04, arg04
170fc     0D 27 02 F6 | 	mov	local05, arg05
17100                 | ' 
17100                 | ' if (y1==y2)
17100     12 21 0A F2 | 	cmp	local02, local04 wz
17104     18 00 90 5D |  if_ne	jmp	#LR__1760
17108                 | '   fastline(x1,x2,y1,c)
17108     0F 13 02 F6 | 	mov	arg01, local01
1710c     11 15 02 F6 | 	mov	arg02, local03
17110     10 17 02 F6 | 	mov	arg03, local02
17114     13 19 02 F6 | 	mov	arg04, local05
17118     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1711c     F8 00 90 FD | 	jmp	#LR__1766
17120                 | LR__1760
17120                 | ' else  
17120                 | '   x:=x1
17120     0F 29 02 F6 | 	mov	local06, local01
17124                 | '   y:=y1
17124     10 2B 02 F6 | 	mov	local07, local02
17128                 | ' 
17128                 | '   if (x1<x2) 
17128     11 1F 52 F2 | 	cmps	local01, local03 wc
1712c                 | '     xi:=1
1712c     01 2C 06 C6 |  if_b	mov	local08, #1
17130                 | '     dx:=x2-x1
17130     11 2F 02 C6 |  if_b	mov	local09, local03
17134     0F 2F 82 C1 |  if_b	sub	local09, local01
17138                 | '   else
17138                 | '     xi:=-1
17138     01 2C 66 36 |  if_ae	neg	local08, #1
1713c                 | '     dx:=x1-x2
1713c     11 1F 82 31 |  if_ae	sub	local01, local03
17140     0F 2F 02 36 |  if_ae	mov	local09, local01
17144                 | '   
17144                 | '   if (y1<y2) 
17144     12 21 52 F2 | 	cmps	local02, local04 wc
17148                 | '     yi:=1
17148     01 30 06 C6 |  if_b	mov	local10, #1
1714c                 | '     dy:=y2-y1
1714c     12 33 02 C6 |  if_b	mov	local11, local04
17150     10 33 82 C1 |  if_b	sub	local11, local02
17154                 | '   else
17154                 | '     yi:=-1
17154     01 30 66 36 |  if_ae	neg	local10, #1
17158                 | '     dy:=y1-y2
17158     12 21 82 31 |  if_ae	sub	local02, local04
1715c     10 33 02 36 |  if_ae	mov	local11, local02
17160                 | ' 
17160                 | '   putpixel(x,y,c)
17160     13 17 02 F6 | 	mov	arg03, local05
17164     14 13 02 F6 | 	mov	arg01, local06
17168     15 15 02 F6 | 	mov	arg02, local07
1716c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
17170                 | ' 
17170                 | '   if (dx>dy)
17170     19 2F 5A F2 | 	cmps	local09, local11 wcz
17174     50 00 90 ED |  if_be	jmp	#LR__1762
17178                 | '     ai:=(dy-dx)*2
17178     19 35 02 F6 | 	mov	local12, local11
1717c     17 35 82 F1 | 	sub	local12, local09
17180     01 34 66 F0 | 	shl	local12, #1
17184                 | '     bi:=dy*2
17184     01 32 66 F0 | 	shl	local11, #1
17188     19 37 02 F6 | 	mov	local13, local11
1718c                 | '     d:= bi-dx
1718c     1B 39 02 F6 | 	mov	local14, local13
17190     17 39 82 F1 | 	sub	local14, local09
17194                 | '     repeat while (x<>x2) 
17194                 | LR__1761
17194     11 29 0A F2 | 	cmp	local06, local03 wz
17198     7C 00 90 AD |  if_e	jmp	#LR__1765
1719c                 | '       if (d>=0) 
1719c     00 38 56 F2 | 	cmps	local14, #0 wc
171a0                 | '         x+=xi
171a0     16 29 02 31 |  if_ae	add	local06, local08
171a4                 | '         y+=yi
171a4     18 2B 02 31 |  if_ae	add	local07, local10
171a8                 | '         d+=ai
171a8     1A 39 02 31 |  if_ae	add	local14, local12
171ac                 | '       else
171ac                 | '         d+=bi
171ac     1B 39 02 C1 |  if_b	add	local14, local13
171b0                 | '         x+=xi
171b0     16 29 02 C1 |  if_b	add	local06, local08
171b4                 | '       putpixel(x,y,c)
171b4     14 13 02 F6 | 	mov	arg01, local06
171b8     15 15 02 F6 | 	mov	arg02, local07
171bc     13 17 02 F6 | 	mov	arg03, local05
171c0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
171c4     CC FF 9F FD | 	jmp	#LR__1761
171c8                 | LR__1762
171c8                 | '   else
171c8                 | '     ai:=(dx-dy)*2
171c8     17 35 02 F6 | 	mov	local12, local09
171cc     19 35 82 F1 | 	sub	local12, local11
171d0     01 34 66 F0 | 	shl	local12, #1
171d4                 | '     bi:=dx*2
171d4     01 2E 66 F0 | 	shl	local09, #1
171d8     17 37 02 F6 | 	mov	local13, local09
171dc                 | '     d:=bi-dy
171dc     1B 39 02 F6 | 	mov	local14, local13
171e0     19 39 82 F1 | 	sub	local14, local11
171e4                 | '     repeat while (y<>y2)
171e4                 | LR__1763
171e4     12 2B 0A F2 | 	cmp	local07, local04 wz
171e8     2C 00 90 AD |  if_e	jmp	#LR__1764
171ec                 | '       if (d>=0)
171ec     00 38 56 F2 | 	cmps	local14, #0 wc
171f0                 | '         x+=xi
171f0     16 29 02 31 |  if_ae	add	local06, local08
171f4                 | '         y+=yi
171f4     18 2B 02 31 |  if_ae	add	local07, local10
171f8                 | '         d+=ai
171f8     1A 39 02 31 |  if_ae	add	local14, local12
171fc                 | '       else
171fc                 | '         d+=bi
171fc     1B 39 02 C1 |  if_b	add	local14, local13
17200                 | '         y+=yi
17200     18 2B 02 C1 |  if_b	add	local07, local10
17204                 | '       putpixel(x, y,c)
17204     14 13 02 F6 | 	mov	arg01, local06
17208     15 15 02 F6 | 	mov	arg02, local07
1720c     13 17 02 F6 | 	mov	arg03, local05
17210     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
17214     CC FF 9F FD | 	jmp	#LR__1763
17218                 | LR__1764
17218                 | LR__1765
17218                 | LR__1766
17218     A7 F0 03 F6 | 	mov	ptra, fp
1721c     B2 00 A0 FD | 	call	#popregs_
17220                 | _hg010b_spin2_draw_ret
17220     2D 00 64 FD | 	ret
17224                 | 
17224                 | '  
17224                 | ' pub fillpush(val) 
17224                 | _hg010b_spin2_fillpush
17224                 | ' fillstack[fillptr]:=val
17224     0B 00 00 FF 
17228     B6 E4 05 F1 | 	add	objptr, ##5814
1722c     F2 00 02 FB | 	rdlong	_var01, objptr
17230     02 00 66 F0 | 	shl	_var01, #2
17234     0A 00 00 FF 
17238     00 E4 85 F1 | 	sub	objptr, ##5120
1723c     F2 00 02 F1 | 	add	_var01, objptr
17240     00 13 62 FC | 	wrlong	arg01, _var01
17244                 | ' fillptr+=1   
17244     0A 00 00 FF 
17248     00 E4 05 F1 | 	add	objptr, ##5120
1724c     F2 00 02 FB | 	rdlong	_var01, objptr
17250     01 00 06 F1 | 	add	_var01, #1
17254     F2 00 62 FC | 	wrlong	_var01, objptr
17258     0B 00 00 FF 
1725c     B6 E4 85 F1 | 	sub	objptr, ##5814
17260                 | _hg010b_spin2_fillpush_ret
17260     2D 00 64 FD | 	ret
17264                 | 
17264                 | ' 
17264                 | '     
17264                 | ' pub fillpop() : val
17264                 | _hg010b_spin2_fillpop
17264                 | ' 
17264                 | ' fillptr-=1
17264     0B 00 00 FF 
17268     B6 E4 05 F1 | 	add	objptr, ##5814
1726c     F2 FA 01 FB | 	rdlong	result1, objptr
17270     01 FA 85 F1 | 	sub	result1, #1
17274     F2 FA 61 FC | 	wrlong	result1, objptr
17278                 | ' if fillptr<0
17278     0B 00 00 FF 
1727c     B6 E4 85 F1 | 	sub	objptr, ##5814
17280     00 FA 55 F2 | 	cmps	result1, #0 wc
17284                 | '   fillptr:=0
17284     0B 00 00 CF 
17288     B6 E4 05 C1 |  if_b	add	objptr, ##5814
1728c     F2 00 68 CC |  if_b	wrlong	#0, objptr
17290     0B 00 00 CF 
17294     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
17298                 | '   val:=-12345
17298     E7 FF 7F CF 
1729c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
172a0     28 00 90 CD |  if_b	jmp	#LR__1770
172a4                 | ' else 
172a4                 | '   val:=fillstack[fillptr]
172a4     0B 00 00 FF 
172a8     B6 E4 05 F1 | 	add	objptr, ##5814
172ac     F2 00 02 FB | 	rdlong	_var01, objptr
172b0     02 00 66 F0 | 	shl	_var01, #2
172b4     0A 00 00 FF 
172b8     00 E4 85 F1 | 	sub	objptr, ##5120
172bc     F2 00 02 F1 | 	add	_var01, objptr
172c0     00 01 02 FB | 	rdlong	_var01, _var01
172c4     01 00 00 FF 
172c8     B6 E4 85 F1 | 	sub	objptr, ##694
172cc                 | LR__1770
172cc                 | ' return val
172cc     00 FB 01 F6 | 	mov	result1, _var01
172d0                 | _hg010b_spin2_fillpop_ret
172d0     2D 00 64 FD | 	ret
172d4                 | 
172d4                 | ' 
172d4                 | '       
172d4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
172d4                 | _hg010b_spin2_fill
172d4     0B 4A 05 F6 | 	mov	COUNT_, #11
172d8     A8 00 A0 FD | 	call	#pushregs_
172dc                 | ' 
172dc                 | ' newcolor:=newcolor & 255
172dc     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
172e0                 | ' oldcolor:=oldcolor & 255
172e0     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
172e4                 | ' 
172e4                 | ' if (oldcolor == newcolor) 
172e4     0F 21 0A F2 | 	cmp	local02, local01 wz
172e8                 | '   return
172e8     70 02 90 AD |  if_e	jmp	#LR__1789
172ec                 | ' 
172ec                 | ' fillptr:=0
172ec     0B 00 00 FF 
172f0     B6 E4 05 F1 | 	add	objptr, ##5814
172f4     F2 00 68 FC | 	wrlong	#0, objptr
172f8                 | ' fillmax:=0
172f8     04 E4 05 F1 | 	add	objptr, #4
172fc     F2 00 68 FC | 	wrlong	#0, objptr
17300     0B 00 00 FF 
17304     BA E4 85 F1 | 	sub	objptr, ##5818
17308                 | ' fillpush(x)
17308     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1730c                 | ' fillpush(y)
1730c     0A 13 02 F6 | 	mov	arg01, arg02
17310     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
17314                 | ' y:=fillpop()
17314     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
17318     FD 22 02 F6 | 	mov	local03, result1
1731c                 | ' x:=fillpop()
1731c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
17320     FD 24 02 F6 | 	mov	local04, result1
17324                 | ' 'pinhigh(38)
17324                 | ' repeat while (x>-1)       
17324                 | LR__1780
17324     00 24 56 F2 | 	cmps	local04, #0 wc
17328     30 02 90 CD |  if_b	jmp	#LR__1788
1732c                 | '  ' pintoggle(39)
1732c                 | '   x1 := x
1732c     12 27 02 F6 | 	mov	local05, local04
17330                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
17330                 | LR__1781
17330     00 28 06 F6 | 	mov	local06, #0
17334     00 2A 06 F6 | 	mov	local07, #0
17338     00 26 56 F2 | 	cmps	local05, #0 wc
1733c     01 2A 66 36 |  if_ae	neg	local07, #1
17340     00 2A 0E F2 | 	cmp	local07, #0 wz
17344     00 28 26 56 |  if_ne	not	local06, #0
17348     00 2C 06 F6 | 	mov	local08, #0
1734c     00 2E 06 F6 | 	mov	local09, #0
17350     11 15 02 F6 | 	mov	arg02, local03
17354     13 13 02 F6 | 	mov	arg01, local05
17358     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1735c     10 FB 09 F2 | 	cmp	result1, local02 wz
17360     00 2E 26 A6 |  if_e	not	local09, #0
17364     00 2E 0E F2 | 	cmp	local09, #0 wz
17368     00 2C 26 56 |  if_ne	not	local08, #0
1736c     16 29 CA F7 | 	test	local06, local08 wz
17370                 | '     x1--
17370     01 26 86 51 |  if_ne	sub	local05, #1
17374     B8 FF 9F 5D |  if_ne	jmp	#LR__1781
17378                 | '   x1++
17378     01 26 06 F1 | 	add	local05, #1
1737c                 | '   spanabove := 0
1737c     00 30 06 F6 | 	mov	local10, #0
17380                 | '   spanbelow := 0
17380     00 32 06 F6 | 	mov	local11, #0
17384                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
17384                 | LR__1782
17384     00 28 06 F6 | 	mov	local06, #0
17388     02 00 00 FF 
1738c     00 26 56 F2 | 	cmps	local05, ##1024 wc
17390     00 28 26 C6 |  if_b	not	local06, #0
17394     00 2C 06 F6 | 	mov	local08, #0
17398     00 2E 06 F6 | 	mov	local09, #0
1739c     11 15 02 F6 | 	mov	arg02, local03
173a0     13 13 02 F6 | 	mov	arg01, local05
173a4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
173a8     10 FB 09 F2 | 	cmp	result1, local02 wz
173ac     00 2E 26 A6 |  if_e	not	local09, #0
173b0     00 2E 0E F2 | 	cmp	local09, #0 wz
173b4     00 2C 26 56 |  if_ne	not	local08, #0
173b8     16 29 CA F7 | 	test	local06, local08 wz
173bc     88 01 90 AD |  if_e	jmp	#LR__1787
173c0                 | '     putpixel2 (x1,y, newcolor & 255)
173c0     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
173c4     13 13 02 F6 | 	mov	arg01, local05
173c8     11 15 02 F6 | 	mov	arg02, local03
173cc     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
173d0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
173d0     00 28 06 F6 | 	mov	local06, #0
173d4     00 2A 06 F6 | 	mov	local07, #0
173d8     00 30 0E F2 | 	cmp	local10, #0 wz
173dc     01 22 56 A2 |  if_e	cmps	local03, #1 wc
173e0     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
173e4     00 2A 0E F2 | 	cmp	local07, #0 wz
173e8     00 28 26 56 |  if_ne	not	local06, #0
173ec     00 2C 06 F6 | 	mov	local08, #0
173f0     00 2E 06 F6 | 	mov	local09, #0
173f4     11 15 02 F6 | 	mov	arg02, local03
173f8     01 14 86 F1 | 	sub	arg02, #1
173fc     13 13 02 F6 | 	mov	arg01, local05
17400     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17404     10 FB 09 F2 | 	cmp	result1, local02 wz
17408     00 2E 26 A6 |  if_e	not	local09, #0
1740c     00 2E 0E F2 | 	cmp	local09, #0 wz
17410     00 2C 26 56 |  if_ne	not	local08, #0
17414     16 29 CA F7 | 	test	local06, local08 wz
17418     1C 00 90 AD |  if_e	jmp	#LR__1783
1741c                 | '       fillpush(x1)
1741c     13 13 02 F6 | 	mov	arg01, local05
17420     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
17424                 | '       fillpush(y-1)
17424     11 13 02 F6 | 	mov	arg01, local03
17428     01 12 86 F1 | 	sub	arg01, #1
1742c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
17430                 | '       spanabove := 1 
17430     01 30 06 F6 | 	mov	local10, #1
17434     4C 00 90 FD | 	jmp	#LR__1784
17438                 | LR__1783
17438                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
17438     00 28 06 F6 | 	mov	local06, #0
1743c     00 2A 06 F6 | 	mov	local07, #0
17440     00 30 0E F2 | 	cmp	local10, #0 wz
17444     01 22 56 52 |  if_ne	cmps	local03, #1 wc
17448     01 2A 66 16 |  if_a	neg	local07, #1
1744c     00 2A 0E F2 | 	cmp	local07, #0 wz
17450     00 28 26 56 |  if_ne	not	local06, #0
17454     00 2C 06 F6 | 	mov	local08, #0
17458     00 2E 06 F6 | 	mov	local09, #0
1745c     11 15 02 F6 | 	mov	arg02, local03
17460     01 14 86 F1 | 	sub	arg02, #1
17464     13 13 02 F6 | 	mov	arg01, local05
17468     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1746c     10 FB 09 F2 | 	cmp	result1, local02 wz
17470     00 2E 26 56 |  if_ne	not	local09, #0
17474     00 2E 0E F2 | 	cmp	local09, #0 wz
17478     00 2C 26 56 |  if_ne	not	local08, #0
1747c     16 29 CA F7 | 	test	local06, local08 wz
17480                 | '       spanabove := 0 
17480     00 30 06 56 |  if_ne	mov	local10, #0
17484                 | LR__1784
17484                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
17484     00 28 06 F6 | 	mov	local06, #0
17488     00 2A 06 F6 | 	mov	local07, #0
1748c     00 32 0E F2 | 	cmp	local11, #0 wz
17490     01 00 00 AF 
17494     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
17498     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1749c     00 2A 0E F2 | 	cmp	local07, #0 wz
174a0     00 28 26 56 |  if_ne	not	local06, #0
174a4     00 2C 06 F6 | 	mov	local08, #0
174a8     00 2E 06 F6 | 	mov	local09, #0
174ac     11 15 02 F6 | 	mov	arg02, local03
174b0     01 14 06 F1 | 	add	arg02, #1
174b4     13 13 02 F6 | 	mov	arg01, local05
174b8     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
174bc     10 FB 09 F2 | 	cmp	result1, local02 wz
174c0     00 2E 26 A6 |  if_e	not	local09, #0
174c4     00 2E 0E F2 | 	cmp	local09, #0 wz
174c8     00 2C 26 56 |  if_ne	not	local08, #0
174cc     16 29 CA F7 | 	test	local06, local08 wz
174d0     1C 00 90 AD |  if_e	jmp	#LR__1785
174d4                 | '       fillpush(x1)
174d4     13 13 02 F6 | 	mov	arg01, local05
174d8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
174dc                 | '       fillpush(y + 1)
174dc     11 13 02 F6 | 	mov	arg01, local03
174e0     01 12 06 F1 | 	add	arg01, #1
174e4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
174e8                 | '       spanBelow := 1
174e8     01 32 06 F6 | 	mov	local11, #1
174ec     50 00 90 FD | 	jmp	#LR__1786
174f0                 | LR__1785
174f0                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
174f0     00 28 06 F6 | 	mov	local06, #0
174f4     00 2A 06 F6 | 	mov	local07, #0
174f8     00 32 0E F2 | 	cmp	local11, #0 wz
174fc     01 00 00 5F 
17500     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
17504     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
17508     00 2A 0E F2 | 	cmp	local07, #0 wz
1750c     00 28 26 56 |  if_ne	not	local06, #0
17510     00 2C 06 F6 | 	mov	local08, #0
17514     00 2E 06 F6 | 	mov	local09, #0
17518     11 15 02 F6 | 	mov	arg02, local03
1751c     01 14 06 F1 | 	add	arg02, #1
17520     13 13 02 F6 | 	mov	arg01, local05
17524     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
17528     10 FB 09 F2 | 	cmp	result1, local02 wz
1752c     00 2E 26 56 |  if_ne	not	local09, #0
17530     00 2E 0E F2 | 	cmp	local09, #0 wz
17534     00 2C 26 56 |  if_ne	not	local08, #0
17538     16 29 CA F7 | 	test	local06, local08 wz
1753c                 | '       spanbelow := 0
1753c     00 32 06 56 |  if_ne	mov	local11, #0
17540                 | LR__1786
17540                 | '     x1++
17540     01 26 06 F1 | 	add	local05, #1
17544     3C FE 9F FD | 	jmp	#LR__1782
17548                 | LR__1787
17548                 | '   y:=fillpop()
17548     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1754c     FD 22 02 F6 | 	mov	local03, result1
17550                 | '   x:=fillpop()
17550     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
17554     FD 24 02 F6 | 	mov	local04, result1
17558     C8 FD 9F FD | 	jmp	#LR__1780
1755c                 | LR__1788
1755c                 | LR__1789
1755c     A7 F0 03 F6 | 	mov	ptra, fp
17560     B2 00 A0 FD | 	call	#popregs_
17564                 | _hg010b_spin2_fill_ret
17564     2D 00 64 FD | 	ret
17568                 | 
17568                 | ' 'pinlow(38)    
17568                 | ' 
17568                 | ' '-- A filled circle -----------------------------------------------------
17568                 | ' 
17568                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
17568                 | _hg010b_spin2_fcircle
17568     08 4A 05 F6 | 	mov	COUNT_, #8
1756c     A8 00 A0 FD | 	call	#pushregs_
17570     0B 1F 02 F6 | 	mov	local01, arg03
17574     FF FF 7F FF 
17578     FE 1F 06 FD | 	qmul	local01, ##-2
1757c     09 21 02 F6 | 	mov	local02, arg01
17580     0A 23 02 F6 | 	mov	local03, arg02
17584     0C 25 02 F6 | 	mov	local04, arg04
17588                 | ' 
17588                 | ' d:=5-4*r
17588     0F 19 02 F6 | 	mov	arg04, local01
1758c     02 18 66 F0 | 	shl	arg04, #2
17590     05 26 06 F6 | 	mov	local05, #5
17594     0C 27 82 F1 | 	sub	local05, arg04
17598                 | ' x:=0
17598     00 28 06 F6 | 	mov	local06, #0
1759c                 | ' y:=r
1759c                 | ' da:=(-2*r+5)*4
1759c                 | ' db:=3*4
1759c     0C 2A 06 F6 | 	mov	local07, #12
175a0                 | ' repeat while (x<=y) 
175a0     18 2C 62 FD | 	getqx	local08
175a4     05 2C 06 F1 | 	add	local08, #5
175a8     02 2C 66 F0 | 	shl	local08, #2
175ac                 | LR__1790
175ac     0F 29 5A F2 | 	cmps	local06, local01 wcz
175b0     B4 00 90 1D |  if_a	jmp	#LR__1792
175b4                 | '   fastline(x0-x,x0+x,y0-y,c)
175b4     10 13 02 F6 | 	mov	arg01, local02
175b8     14 13 82 F1 | 	sub	arg01, local06
175bc     10 15 02 F6 | 	mov	arg02, local02
175c0     14 15 02 F1 | 	add	arg02, local06
175c4     11 17 02 F6 | 	mov	arg03, local03
175c8     0F 17 82 F1 | 	sub	arg03, local01
175cc     12 19 02 F6 | 	mov	arg04, local04
175d0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
175d4                 | '   fastline(x0-x,x0+x,y0+y,c)
175d4     10 13 02 F6 | 	mov	arg01, local02
175d8     14 13 82 F1 | 	sub	arg01, local06
175dc     10 15 02 F6 | 	mov	arg02, local02
175e0     14 15 02 F1 | 	add	arg02, local06
175e4     11 17 02 F6 | 	mov	arg03, local03
175e8     0F 17 02 F1 | 	add	arg03, local01
175ec     12 19 02 F6 | 	mov	arg04, local04
175f0     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
175f4                 | '   fastline(x0-y,x0+y,y0-x,c)
175f4     10 13 02 F6 | 	mov	arg01, local02
175f8     0F 13 82 F1 | 	sub	arg01, local01
175fc     10 15 02 F6 | 	mov	arg02, local02
17600     0F 15 02 F1 | 	add	arg02, local01
17604     11 17 02 F6 | 	mov	arg03, local03
17608     14 17 82 F1 | 	sub	arg03, local06
1760c     12 19 02 F6 | 	mov	arg04, local04
17610     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17614                 | '   fastline(x0-y,x0+y,y0+x,c)
17614     10 13 02 F6 | 	mov	arg01, local02
17618     0F 13 82 F1 | 	sub	arg01, local01
1761c     10 15 02 F6 | 	mov	arg02, local02
17620     0F 15 02 F1 | 	add	arg02, local01
17624     11 17 02 F6 | 	mov	arg03, local03
17628     14 17 02 F1 | 	add	arg03, local06
1762c     12 19 02 F6 | 	mov	arg04, local04
17630     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
17634                 | '   if d>0 
17634     01 26 56 F2 | 	cmps	local05, #1 wc
17638     18 00 90 CD |  if_b	jmp	#LR__1791
1763c                 | '     d+=da
1763c     16 27 02 F1 | 	add	local05, local08
17640                 | '     y-=1
17640     01 1E 86 F1 | 	sub	local01, #1
17644                 | '     x+=1
17644     01 28 06 F1 | 	add	local06, #1
17648                 | '     da+=4*4
17648     10 2C 06 F1 | 	add	local08, #16
1764c                 | '     db+=2*4
1764c     08 2A 06 F1 | 	add	local07, #8
17650     58 FF 9F FD | 	jmp	#LR__1790
17654                 | LR__1791
17654                 | '   else
17654                 | '     d+=db
17654     15 27 02 F1 | 	add	local05, local07
17658                 | '     x+=1
17658     01 28 06 F1 | 	add	local06, #1
1765c                 | '     da+=2*4
1765c     08 2C 06 F1 | 	add	local08, #8
17660                 | '     db+=2*4
17660     08 2A 06 F1 | 	add	local07, #8
17664     44 FF 9F FD | 	jmp	#LR__1790
17668                 | LR__1792
17668     A7 F0 03 F6 | 	mov	ptra, fp
1766c     B2 00 A0 FD | 	call	#popregs_
17670                 | _hg010b_spin2_fcircle_ret
17670     2D 00 64 FD | 	ret
17674                 | 
17674                 | '  
17674                 | ' '-- A circle ------------------------------------------------------------ 
17674                 | '  
17674                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
17674                 | _hg010b_spin2_circle
17674     08 4A 05 F6 | 	mov	COUNT_, #8
17678     A8 00 A0 FD | 	call	#pushregs_
1767c     0B 1F 02 F6 | 	mov	local01, arg03
17680     FF FF 7F FF 
17684     FE 1F 06 FD | 	qmul	local01, ##-2
17688     09 21 02 F6 | 	mov	local02, arg01
1768c     0A 23 02 F6 | 	mov	local03, arg02
17690     0C 25 02 F6 | 	mov	local04, arg04
17694                 | ' 
17694                 | '  
17694                 | ' d:=5-4*r
17694     0F 19 02 F6 | 	mov	arg04, local01
17698     02 18 66 F0 | 	shl	arg04, #2
1769c     05 26 06 F6 | 	mov	local05, #5
176a0     0C 27 82 F1 | 	sub	local05, arg04
176a4                 | ' x:=0
176a4     00 28 06 F6 | 	mov	local06, #0
176a8                 | ' y:=r
176a8                 | ' da:=(-2*r+5)*4
176a8                 | ' db:=3*4
176a8     0C 2A 06 F6 | 	mov	local07, #12
176ac                 | ' repeat while (x<=y) 
176ac     18 2C 62 FD | 	getqx	local08
176b0     05 2C 06 F1 | 	add	local08, #5
176b4     02 2C 66 F0 | 	shl	local08, #2
176b8                 | LR__1800
176b8     0F 29 5A F2 | 	cmps	local06, local01 wcz
176bc     F4 00 90 1D |  if_a	jmp	#LR__1802
176c0                 | '   putpixel(x0-x,y0-y,c)
176c0     10 13 02 F6 | 	mov	arg01, local02
176c4     14 13 82 F1 | 	sub	arg01, local06
176c8     11 15 02 F6 | 	mov	arg02, local03
176cc     0F 15 82 F1 | 	sub	arg02, local01
176d0     12 17 02 F6 | 	mov	arg03, local04
176d4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
176d8                 | '   putpixel(x0-x,y0+y,c)
176d8     10 13 02 F6 | 	mov	arg01, local02
176dc     14 13 82 F1 | 	sub	arg01, local06
176e0     11 15 02 F6 | 	mov	arg02, local03
176e4     0F 15 02 F1 | 	add	arg02, local01
176e8     12 17 02 F6 | 	mov	arg03, local04
176ec     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
176f0                 | '   putpixel(x0+x,y0-y,c)
176f0     10 13 02 F6 | 	mov	arg01, local02
176f4     14 13 02 F1 | 	add	arg01, local06
176f8     11 15 02 F6 | 	mov	arg02, local03
176fc     0F 15 82 F1 | 	sub	arg02, local01
17700     12 17 02 F6 | 	mov	arg03, local04
17704     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17708                 | '   putpixel(x0+x,y0+y,c)
17708     10 13 02 F6 | 	mov	arg01, local02
1770c     14 13 02 F1 | 	add	arg01, local06
17710     11 15 02 F6 | 	mov	arg02, local03
17714     0F 15 02 F1 | 	add	arg02, local01
17718     12 17 02 F6 | 	mov	arg03, local04
1771c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17720                 | '   putpixel(x0-y,y0-x,c)
17720     10 13 02 F6 | 	mov	arg01, local02
17724     0F 13 82 F1 | 	sub	arg01, local01
17728     11 15 02 F6 | 	mov	arg02, local03
1772c     14 15 82 F1 | 	sub	arg02, local06
17730     12 17 02 F6 | 	mov	arg03, local04
17734     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17738                 | '   putpixel(x0-y,y0+x,c)
17738     10 13 02 F6 | 	mov	arg01, local02
1773c     0F 13 82 F1 | 	sub	arg01, local01
17740     11 15 02 F6 | 	mov	arg02, local03
17744     14 15 02 F1 | 	add	arg02, local06
17748     12 17 02 F6 | 	mov	arg03, local04
1774c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17750                 | '   putpixel(x0+y,y0-x,c)
17750     10 13 02 F6 | 	mov	arg01, local02
17754     0F 13 02 F1 | 	add	arg01, local01
17758     11 15 02 F6 | 	mov	arg02, local03
1775c     14 15 82 F1 | 	sub	arg02, local06
17760     12 17 02 F6 | 	mov	arg03, local04
17764     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17768                 | '   putpixel(x0+y,y0+x,c)
17768     10 13 02 F6 | 	mov	arg01, local02
1776c     0F 13 02 F1 | 	add	arg01, local01
17770     11 15 02 F6 | 	mov	arg02, local03
17774     14 15 02 F1 | 	add	arg02, local06
17778     12 17 02 F6 | 	mov	arg03, local04
1777c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17780                 | '   if d>0 
17780     01 26 56 F2 | 	cmps	local05, #1 wc
17784     18 00 90 CD |  if_b	jmp	#LR__1801
17788                 | '     d+=da
17788     16 27 02 F1 | 	add	local05, local08
1778c                 | '     y-=1
1778c     01 1E 86 F1 | 	sub	local01, #1
17790                 | '     x+=1
17790     01 28 06 F1 | 	add	local06, #1
17794                 | '     da+=4*4
17794     10 2C 06 F1 | 	add	local08, #16
17798                 | '     db+=2*4
17798     08 2A 06 F1 | 	add	local07, #8
1779c     18 FF 9F FD | 	jmp	#LR__1800
177a0                 | LR__1801
177a0                 | '   else
177a0                 | '     d+=db
177a0     15 27 02 F1 | 	add	local05, local07
177a4                 | '     x+=1
177a4     01 28 06 F1 | 	add	local06, #1
177a8                 | '     da+=2*4
177a8     08 2C 06 F1 | 	add	local08, #8
177ac                 | '     db+=2*4
177ac     08 2A 06 F1 | 	add	local07, #8
177b0     04 FF 9F FD | 	jmp	#LR__1800
177b4                 | LR__1802
177b4     A7 F0 03 F6 | 	mov	ptra, fp
177b8     B2 00 A0 FD | 	call	#popregs_
177bc                 | _hg010b_spin2_circle_ret
177bc     2D 00 64 FD | 	ret
177c0                 | 
177c0                 | '     
177c0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
177c0                 | ' 
177c0                 | ' pub frame(x1,y1,x2,y2,c)
177c0                 | _hg010b_spin2_frame
177c0     05 4A 05 F6 | 	mov	COUNT_, #5
177c4     A8 00 A0 FD | 	call	#pushregs_
177c8     09 1F 02 F6 | 	mov	local01, arg01
177cc     0A 21 02 F6 | 	mov	local02, arg02
177d0     0B 23 02 F6 | 	mov	local03, arg03
177d4     0C 25 02 F6 | 	mov	local04, arg04
177d8     0D 27 02 F6 | 	mov	local05, arg05
177dc                 | ' 
177dc                 | ' fastline(x1,x2,y1,c)
177dc     0F 13 02 F6 | 	mov	arg01, local01
177e0     11 15 02 F6 | 	mov	arg02, local03
177e4     10 17 02 F6 | 	mov	arg03, local02
177e8     13 19 02 F6 | 	mov	arg04, local05
177ec     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
177f0                 | ' fastline(x1,x2,y2,c)
177f0     0F 13 02 F6 | 	mov	arg01, local01
177f4     11 15 02 F6 | 	mov	arg02, local03
177f8     12 17 02 F6 | 	mov	arg03, local04
177fc     13 19 02 F6 | 	mov	arg04, local05
17800     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
17804                 | ' line(x1,y1,x1,y2,c)
17804     0F 13 02 F6 | 	mov	arg01, local01
17808     10 15 02 F6 | 	mov	arg02, local02
1780c     0F 17 02 F6 | 	mov	arg03, local01
17810     12 19 02 F6 | 	mov	arg04, local04
17814     13 1B 02 F6 | 	mov	arg05, local05
17818                 | ' draw(x1,y1,x2,y2,c)
17818     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1781c                 | ' line(x2,y1,x2,y2,c)
1781c     11 13 02 F6 | 	mov	arg01, local03
17820     10 15 02 F6 | 	mov	arg02, local02
17824     11 17 02 F6 | 	mov	arg03, local03
17828     12 19 02 F6 | 	mov	arg04, local04
1782c     13 1B 02 F6 | 	mov	arg05, local05
17830                 | ' draw(x1,y1,x2,y2,c)
17830     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
17834     A7 F0 03 F6 | 	mov	ptra, fp
17838     B2 00 A0 FD | 	call	#popregs_
1783c                 | _hg010b_spin2_frame_ret
1783c     2D 00 64 FD | 	ret
17840                 | 
17840                 | ' 
17840                 | ' '-- A box (a filled rectangle) ----------------------------------------
17840                 | ' 
17840                 | ' pub box(x1,y1,x2,y2,c) |yy
17840                 | _hg010b_spin2_box
17840     06 4A 05 F6 | 	mov	COUNT_, #6
17844     A8 00 A0 FD | 	call	#pushregs_
17848     09 1F 02 F6 | 	mov	local01, arg01
1784c     0A 21 02 F6 | 	mov	local02, arg02
17850     0B 23 02 F6 | 	mov	local03, arg03
17854     0C 25 02 F6 | 	mov	local04, arg04
17858     0D 27 02 F6 | 	mov	local05, arg05
1785c                 | ' 
1785c                 | ' repeat yy from y1 to y2
1785c     10 25 52 F2 | 	cmps	local04, local02 wc
17860     01 28 86 F6 | 	negc	local06, #1
17864     14 25 02 F1 | 	add	local04, local06
17868                 | LR__1810
17868                 | '   fastline(x1,x2,yy,c)
17868     0F 13 02 F6 | 	mov	arg01, local01
1786c     11 15 02 F6 | 	mov	arg02, local03
17870     13 19 02 F6 | 	mov	arg04, local05
17874     10 17 02 F6 | 	mov	arg03, local02
17878     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1787c     14 21 02 F1 | 	add	local02, local06
17880     12 21 0A F2 | 	cmp	local02, local04 wz
17884     E0 FF 9F 5D |  if_ne	jmp	#LR__1810
17888     A7 F0 03 F6 | 	mov	ptra, fp
1788c     B2 00 A0 FD | 	call	#popregs_
17890                 | _hg010b_spin2_box_ret
17890     2D 00 64 FD | 	ret
17894                 | 
17894                 | '       
17894                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
17894                 | _hg010b_spin2_putcharxycgf
17894                 | ' 
17894                 | '  
17894                 | ' repeat yy from 0 to 15
17894     00 00 06 F6 | 	mov	_var01, #0
17898     97 8C 48 FB | 	callpa	#(@LR__1822-@LR__1820)>>2,fcache_load_ptr_
1789c                 | LR__1820
1789c                 | ' 
1789c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1789c     91 E4 05 F1 | 	add	objptr, #145
178a0     F2 02 02 FB | 	rdlong	_var02, objptr
178a4     0A 02 66 F0 | 	shl	_var02, #10
178a8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
178ac     01 05 02 F1 | 	add	_var03, _var02
178b0     0B 03 02 F6 | 	mov	_var02, arg03
178b4     04 02 66 F0 | 	shl	_var02, #4
178b8     01 05 02 F1 | 	add	_var03, _var02
178bc     00 05 02 F1 | 	add	_var03, _var01
178c0     02 05 C2 FA | 	rdbyte	_var03, _var03
178c4                 | '   asm
178c4     00 04 0E F4 | 	testb	_var03, #0 wz
178c8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
178cc     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
178d0     01 04 0E F4 | 	testb	_var03, #1 wz
178d4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
178d8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
178dc     02 04 0E F4 | 	testb	_var03, #2 wz
178e0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
178e4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
178e8     03 04 0E F4 | 	testb	_var03, #3 wz
178ec     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
178f0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
178f4     04 04 0E F4 | 	testb	_var03, #4 wz
178f8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
178fc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
17900     05 04 0E F4 | 	testb	_var03, #5 wz
17904     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
17908     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1790c     06 04 0E F4 | 	testb	_var03, #6 wz
17910     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
17914     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
17918     07 04 0E F4 | 	testb	_var03, #7 wz
1791c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
17920     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
17924                 | '   
17924                 | '   ccc[0]:=c1
17924     99 E5 05 F1 | 	add	objptr, #409
17928     F2 06 62 FC | 	wrlong	_var04, objptr
1792c                 | '   ccc[1]:=c2 
1792c     04 E4 05 F1 | 	add	objptr, #4
17930     F2 08 62 FC | 	wrlong	_var05, objptr
17934                 | '   long[mailbox0][2]:=8
17934     49 E4 85 F1 | 	sub	objptr, #73
17938     F2 04 02 FB | 	rdlong	_var03, objptr
1793c     08 04 06 F1 | 	add	_var03, #8
17940     02 11 68 FC | 	wrlong	#8, _var03
17944                 | '   long[mailbox0][1]:=@ccc
17944     45 E4 05 F1 | 	add	objptr, #69
17948     F2 04 02 F6 | 	mov	_var03, objptr
1794c     45 E4 85 F1 | 	sub	objptr, #69
17950     F2 02 02 FB | 	rdlong	_var02, objptr
17954     04 02 06 F1 | 	add	_var02, #4
17958     01 05 62 FC | 	wrlong	_var03, _var02
1795c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1795c     0C E5 85 F1 | 	sub	objptr, #268
17960     F2 04 02 FB | 	rdlong	_var03, objptr
17964     0A 03 02 F6 | 	mov	_var02, arg02
17968     00 03 02 F1 | 	add	_var02, _var01
1796c     0A 02 66 F0 | 	shl	_var02, #10
17970     09 0B 02 F6 | 	mov	_var06, arg01
17974     02 0A 66 F0 | 	shl	_var06, #2
17978     05 03 02 F1 | 	add	_var02, _var06
1797c     01 05 02 F1 | 	add	_var03, _var02
17980     00 00 78 FF 
17984     00 04 06 F1 | 	add	_var03, ##-268435456
17988     0C E5 05 F1 | 	add	objptr, #268
1798c     F2 0A 02 FB | 	rdlong	_var06, objptr
17990     05 05 62 FC | 	wrlong	_var03, _var06
17994                 | '   repeat
17994                 | LR__1821
17994     F2 04 02 FB | 	rdlong	_var03, objptr
17998     02 03 02 FB | 	rdlong	_var02, _var03
1799c     00 02 56 F2 | 	cmps	_var02, #0 wc
179a0     F0 FF 9F CD |  if_b	jmp	#LR__1821
179a4     E5 E5 85 F1 | 	sub	objptr, #485
179a8     01 00 06 F1 | 	add	_var01, #1
179ac     10 00 56 F2 | 	cmps	_var01, #16 wc
179b0     E8 FE 9F CD |  if_b	jmp	#LR__1820
179b4                 | LR__1822
179b4                 | _hg010b_spin2_putcharxycgf_ret
179b4     2D 00 64 FD | 	ret
179b8                 | 
179b8                 | ' 
179b8                 | ' 
179b8                 | ' '**********************************************************************r***
179b8                 | ' '                                                                        *
179b8                 | ' ' Font related functions                                                 *
179b8                 | ' '                                                                        *
179b8                 | ' '*************************************************************************
179b8                 | ' 
179b8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
179b8                 | ' 
179b8                 | ' pub setfontfamily(afontnum)
179b8                 | _hg010b_spin2_setfontfamily
179b8                 | ' 
179b8                 | ' font_family:=afontnum
179b8     91 E4 05 F1 | 	add	objptr, #145
179bc     F2 12 62 FC | 	wrlong	arg01, objptr
179c0     91 E4 85 F1 | 	sub	objptr, #145
179c4                 | ' 'if afontnum==8
179c4                 | ' '  font_ptr:=@amiga_font
179c4                 | ' 
179c4                 | ' if afontnum==4
179c4     04 12 0E F2 | 	cmp	arg01, #4 wz
179c8                 | '   font_ptr:=@st_font
179c8     08 00 00 AF 
179cc     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
179d0     04 E4 05 A1 |  if_e	add	objptr, #4
179d4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
179d8     04 E4 85 A1 |  if_e	sub	objptr, #4
179dc     08 00 00 AF 
179e0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
179e4                 | ' if afontnum==0
179e4     00 12 0E F2 | 	cmp	arg01, #0 wz
179e8                 | '   font_ptr:=@vga_font
179e8     04 E4 05 A1 |  if_e	add	objptr, #4
179ec     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
179f0     04 E4 85 A1 |  if_e	sub	objptr, #4
179f4                 | _hg010b_spin2_setfontfamily_ret
179f4     2D 00 64 FD | 	ret
179f8                 | 
179f8                 | ' 
179f8                 | ' '*************************************************************************
179f8                 | ' '                                                                        *
179f8                 | ' '  Cursor functions                                                      *
179f8                 | ' '                                                                        *
179f8                 | ' '*************************************************************************
179f8                 | ' 
179f8                 | ' 
179f8                 | ' pub setcursorpos(x,y)
179f8                 | _hg010b_spin2_setcursorpos
179f8                 | ' 
179f8                 | ' ''---------- Set the (x,y) position of cursor
179f8                 | ' 
179f8                 | ' cursor_x:=x
179f8     38 E4 05 F1 | 	add	objptr, #56
179fc     F2 12 52 FC | 	wrword	arg01, objptr
17a00                 | ' cursor_y:=y
17a00     02 E4 05 F1 | 	add	objptr, #2
17a04     F2 14 42 FC | 	wrbyte	arg02, objptr
17a08                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17a08     02 E4 85 F1 | 	sub	objptr, #2
17a0c     F2 14 E2 FA | 	rdword	arg02, objptr
17a10     02 14 66 F0 | 	shl	arg02, #2
17a14     02 E4 05 F1 | 	add	objptr, #2
17a18     F2 16 C2 FA | 	rdbyte	arg03, objptr
17a1c     3A E4 85 F1 | 	sub	objptr, #58
17a20     04 16 66 F0 | 	shl	arg03, #4
17a24     11 12 06 F6 | 	mov	arg01, #17
17a28     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
17a2c                 | _hg010b_spin2_setcursorpos_ret
17a2c     2D 00 64 FD | 	ret
17a30                 | 
17a30                 | ' 
17a30                 | ' '*************************************************************************
17a30                 | ' '                                                                        *
17a30                 | ' '  VBlank functions                                                      *
17a30                 | ' '                                                                        *
17a30                 | ' '*************************************************************************
17a30                 | ' 
17a30                 | ' pub waitvbl(amount) | i
17a30                 | _hg010b_spin2_waitvbl
17a30     03 4A 05 F6 | 	mov	COUNT_, #3
17a34     A8 00 A0 FD | 	call	#pushregs_
17a38     09 1F 02 F6 | 	mov	local01, arg01
17a3c                 | ' 
17a3c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
17a3c                 | ' 
17a3c                 | ' repeat i from 1 to amount
17a3c     01 20 06 F6 | 	mov	local02, #1
17a40     01 1E 56 F2 | 	cmps	local01, #1 wc
17a44     01 22 86 F6 | 	negc	local03, #1
17a48     11 1F 02 F1 | 	add	local01, local03
17a4c                 | LR__1830
17a4c                 | '   repeat until vblank==0
17a4c                 | LR__1831
17a4c     45 E4 05 F1 | 	add	objptr, #69
17a50     F2 12 0A FB | 	rdlong	arg01, objptr wz
17a54     45 E4 85 F1 | 	sub	objptr, #69
17a58     0C 00 90 AD |  if_e	jmp	#LR__1832
17a5c                 | '     waitus(100)
17a5c     64 12 06 F6 | 	mov	arg01, #100
17a60     E0 16 B0 FD | 	call	#__system___waitus
17a64     E4 FF 9F FD | 	jmp	#LR__1831
17a68                 | LR__1832
17a68                 | '   repeat until vblank==1
17a68                 | LR__1833
17a68     45 E4 05 F1 | 	add	objptr, #69
17a6c     F2 12 02 FB | 	rdlong	arg01, objptr
17a70     45 E4 85 F1 | 	sub	objptr, #69
17a74     01 12 0E F2 | 	cmp	arg01, #1 wz
17a78     0C 00 90 AD |  if_e	jmp	#LR__1834
17a7c                 | '     waitus(100)
17a7c     64 12 06 F6 | 	mov	arg01, #100
17a80     C0 16 B0 FD | 	call	#__system___waitus
17a84     E0 FF 9F FD | 	jmp	#LR__1833
17a88                 | LR__1834
17a88     11 21 02 F1 | 	add	local02, local03
17a8c     0F 21 0A F2 | 	cmp	local02, local01 wz
17a90     B8 FF 9F 5D |  if_ne	jmp	#LR__1830
17a94     A7 F0 03 F6 | 	mov	ptra, fp
17a98     B2 00 A0 FD | 	call	#popregs_
17a9c                 | _hg010b_spin2_waitvbl_ret
17a9c     2D 00 64 FD | 	ret
17aa0                 | 
17aa0                 | ' 
17aa0                 | ' 
17aa0                 | ' pub cls(fc,bc)   :c,i
17aa0                 | _hg010b_spin2_cls
17aa0     02 4A 05 F6 | 	mov	COUNT_, #2
17aa4     A8 00 A0 FD | 	call	#pushregs_
17aa8     09 1F 02 F6 | 	mov	local01, arg01
17aac     0A 21 02 F6 | 	mov	local02, arg02
17ab0                 | ' 
17ab0                 | ' c:=bc
17ab0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
17ab0     D9 E4 05 F1 | 	add	objptr, #217
17ab4     F2 12 02 FB | 	rdlong	arg01, objptr
17ab8     A5 E4 85 F1 | 	sub	objptr, #165
17abc     F2 16 02 FB | 	rdlong	arg03, objptr
17ac0     02 16 66 F0 | 	shl	arg03, #2
17ac4     10 15 02 F6 | 	mov	arg02, local02
17ac8     00 18 06 F6 | 	mov	arg04, #0
17acc     01 1A 06 F6 | 	mov	arg05, #1
17ad0     0B 00 00 FF 
17ad4     8C E4 05 F1 | 	add	objptr, ##5772
17ad8     F0 08 B0 FD | 	call	#_psram_spin2_fill
17adc                 | ' setwritecolors(fc,bc)
17adc                 | ' 
17adc                 | ' write_color:=ff
17adc     0B 00 00 FF 
17ae0     83 E4 85 F1 | 	sub	objptr, ##5763
17ae4     F2 1E 62 FC | 	wrlong	local01, objptr
17ae8                 | ' write_background:=bb
17ae8     04 E4 05 F1 | 	add	objptr, #4
17aec     F2 20 62 FC | 	wrlong	local02, objptr
17af0                 | ' cursor_x:=0
17af0     09 E4 85 F1 | 	sub	objptr, #9
17af4     F2 00 58 FC | 	wrword	#0, objptr
17af8                 | ' cursor_y:=0
17af8     02 E4 05 F1 | 	add	objptr, #2
17afc     F2 00 48 FC | 	wrbyte	#0, objptr
17b00                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17b00     02 E4 85 F1 | 	sub	objptr, #2
17b04     F2 14 E2 FA | 	rdword	arg02, objptr
17b08     02 14 66 F0 | 	shl	arg02, #2
17b0c     02 E4 05 F1 | 	add	objptr, #2
17b10     F2 16 C2 FA | 	rdbyte	arg03, objptr
17b14     3A E4 85 F1 | 	sub	objptr, #58
17b18     04 16 66 F0 | 	shl	arg03, #4
17b1c     11 12 06 F6 | 	mov	arg01, #17
17b20     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
17b24                 | ' setcursorcolor(fc)
17b24     0F 13 02 F6 | 	mov	arg01, local01
17b28     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
17b2c     10 FB 01 F6 | 	mov	result1, local02
17b30     00 FC 05 F6 | 	mov	result2, #0
17b34     A7 F0 03 F6 | 	mov	ptra, fp
17b38     B2 00 A0 FD | 	call	#popregs_
17b3c                 | _hg010b_spin2_cls_ret
17b3c     2D 00 64 FD | 	ret
17b40                 | 
17b40                 | ' 
17b40                 | ' ''---------- Output a char at the cursor position, move the cursor 
17b40                 | ' 
17b40                 | ' pub putchar(achar) | c,x,y,l,newcpl
17b40                 | _hg010b_spin2_putchar
17b40     01 4A 05 F6 | 	mov	COUNT_, #1
17b44     A8 00 A0 FD | 	call	#pushregs_
17b48     09 1F 02 F6 | 	mov	local01, arg01
17b4c                 | ' 
17b4c                 | ' if achar==10
17b4c     0A 1E 0E F2 | 	cmp	local01, #10 wz
17b50                 | '   crlf()
17b50     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
17b54                 | ' if achar==9
17b54     09 1E 0E F2 | 	cmp	local01, #9 wz
17b58     18 00 90 5D |  if_ne	jmp	#LR__1840
17b5c                 | '   cursor_x:=(cursor_x& %11110000)+16
17b5c     38 E4 05 F1 | 	add	objptr, #56
17b60     F2 16 E2 FA | 	rdword	arg03, objptr
17b64     F0 16 06 F5 | 	and	arg03, #240
17b68     10 16 06 F1 | 	add	arg03, #16
17b6c     F2 16 52 FC | 	wrword	arg03, objptr
17b70     38 E4 85 F1 | 	sub	objptr, #56
17b74                 | LR__1840
17b74                 | '   
17b74                 | ' if (achar<>9) && (achar<>10) 
17b74     09 1E 0E F2 | 	cmp	local01, #9 wz
17b78     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
17b7c     44 00 90 AD |  if_e	jmp	#LR__1841
17b80                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17b80     38 E4 05 F1 | 	add	objptr, #56
17b84     F2 12 E2 FA | 	rdword	arg01, objptr
17b88     02 E4 05 F1 | 	add	objptr, #2
17b8c     F2 14 C2 FA | 	rdbyte	arg02, objptr
17b90     04 14 66 F0 | 	shl	arg02, #4
17b94     03 E4 05 F1 | 	add	objptr, #3
17b98     F2 18 02 FB | 	rdlong	arg04, objptr
17b9c     04 E4 05 F1 | 	add	objptr, #4
17ba0     F2 1A 02 FB | 	rdlong	arg05, objptr
17ba4     41 E4 85 F1 | 	sub	objptr, #65
17ba8     0F 17 02 F6 | 	mov	arg03, local01
17bac     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
17bb0                 | '   cursor_x+=2
17bb0     38 E4 05 F1 | 	add	objptr, #56
17bb4     F2 1E E2 FA | 	rdword	local01, objptr
17bb8     02 1E 06 F1 | 	add	local01, #2
17bbc     F2 1E 52 FC | 	wrword	local01, objptr
17bc0     38 E4 85 F1 | 	sub	objptr, #56
17bc4                 | LR__1841
17bc4                 | ' 
17bc4                 | ' if cursor_x>=256
17bc4     38 E4 05 F1 | 	add	objptr, #56
17bc8     F2 1E E2 FA | 	rdword	local01, objptr
17bcc     38 E4 85 F1 | 	sub	objptr, #56
17bd0     00 1F 56 F2 | 	cmps	local01, #256 wc
17bd4     64 00 90 CD |  if_b	jmp	#LR__1843
17bd8                 | '   cursor_x:=0
17bd8     38 E4 05 F1 | 	add	objptr, #56
17bdc     F2 00 58 FC | 	wrword	#0, objptr
17be0                 | '   cursor_y+=1
17be0     02 E4 05 F1 | 	add	objptr, #2
17be4     F2 1E C2 FA | 	rdbyte	local01, objptr
17be8     01 1E 06 F1 | 	add	local01, #1
17bec     F2 1E 42 FC | 	wrbyte	local01, objptr
17bf0                 | '   if cursor_y>st_lines-1
17bf0     C3 E4 05 F1 | 	add	objptr, #195
17bf4     F2 1E 02 FB | 	rdlong	local01, objptr
17bf8     01 1E 86 F1 | 	sub	local01, #1
17bfc     C3 E4 85 F1 | 	sub	objptr, #195
17c00     F2 16 C2 FA | 	rdbyte	arg03, objptr
17c04     3A E4 85 F1 | 	sub	objptr, #58
17c08     0F 17 5A F2 | 	cmps	arg03, local01 wcz
17c0c     2C 00 90 ED |  if_be	jmp	#LR__1842
17c10                 | '     scrollup()
17c10     00 12 06 F6 | 	mov	arg01, #0
17c14     01 00 00 FF 
17c18     40 14 06 F6 | 	mov	arg02, ##576
17c1c     10 16 06 F6 | 	mov	arg03, #16
17c20     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
17c24                 | '     cursor_y:=st_lines-1
17c24     FD E4 05 F1 | 	add	objptr, #253
17c28     F2 1E 02 FB | 	rdlong	local01, objptr
17c2c     01 1E 86 F1 | 	sub	local01, #1
17c30     C3 E4 85 F1 | 	sub	objptr, #195
17c34     F2 1E 42 FC | 	wrbyte	local01, objptr
17c38     3A E4 85 F1 | 	sub	objptr, #58
17c3c                 | LR__1842
17c3c                 | LR__1843
17c3c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17c3c     38 E4 05 F1 | 	add	objptr, #56
17c40     F2 14 E2 FA | 	rdword	arg02, objptr
17c44     02 14 66 F0 | 	shl	arg02, #2
17c48     02 E4 05 F1 | 	add	objptr, #2
17c4c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17c50     3A E4 85 F1 | 	sub	objptr, #58
17c54     04 16 66 F0 | 	shl	arg03, #4
17c58     11 12 06 F6 | 	mov	arg01, #17
17c5c     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
17c60     A7 F0 03 F6 | 	mov	ptra, fp
17c64     B2 00 A0 FD | 	call	#popregs_
17c68                 | _hg010b_spin2_putchar_ret
17c68     2D 00 64 FD | 	ret
17c6c                 | 
17c6c                 | '     
17c6c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
17c6c                 | ' 
17c6c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
17c6c                 | _hg010b_spin2_putchar2
17c6c     01 4A 05 F6 | 	mov	COUNT_, #1
17c70     A8 00 A0 FD | 	call	#pushregs_
17c74                 | ' 
17c74                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17c74     38 E4 05 F1 | 	add	objptr, #56
17c78     F2 1E E2 FA | 	rdword	local01, objptr
17c7c     02 E4 05 F1 | 	add	objptr, #2
17c80     F2 14 C2 FA | 	rdbyte	arg02, objptr
17c84     04 14 66 F0 | 	shl	arg02, #4
17c88     09 17 02 F6 | 	mov	arg03, arg01
17c8c     03 E4 05 F1 | 	add	objptr, #3
17c90     F2 18 02 FB | 	rdlong	arg04, objptr
17c94     04 E4 05 F1 | 	add	objptr, #4
17c98     F2 1A 02 FB | 	rdlong	arg05, objptr
17c9c     41 E4 85 F1 | 	sub	objptr, #65
17ca0     0F 13 02 F6 | 	mov	arg01, local01
17ca4     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
17ca8                 | ' cursor_x+=2
17ca8     38 E4 05 F1 | 	add	objptr, #56
17cac     F2 1E E2 FA | 	rdword	local01, objptr
17cb0     02 1E 06 F1 | 	add	local01, #2
17cb4     F2 1E 52 FC | 	wrword	local01, objptr
17cb8                 | ' if cursor_x>=256
17cb8     F2 1E E2 FA | 	rdword	local01, objptr
17cbc     38 E4 85 F1 | 	sub	objptr, #56
17cc0     00 1F 56 F2 | 	cmps	local01, #256 wc
17cc4     64 00 90 CD |  if_b	jmp	#LR__1851
17cc8                 | '   cursor_x:=0
17cc8     38 E4 05 F1 | 	add	objptr, #56
17ccc     F2 00 58 FC | 	wrword	#0, objptr
17cd0                 | '   cursor_y+=1
17cd0     02 E4 05 F1 | 	add	objptr, #2
17cd4     F2 1E C2 FA | 	rdbyte	local01, objptr
17cd8     01 1E 06 F1 | 	add	local01, #1
17cdc     F2 1E 42 FC | 	wrbyte	local01, objptr
17ce0                 | '   if cursor_y>st_lines-1
17ce0     C3 E4 05 F1 | 	add	objptr, #195
17ce4     F2 1E 02 FB | 	rdlong	local01, objptr
17ce8     01 1E 86 F1 | 	sub	local01, #1
17cec     C3 E4 85 F1 | 	sub	objptr, #195
17cf0     F2 1A C2 FA | 	rdbyte	arg05, objptr
17cf4     3A E4 85 F1 | 	sub	objptr, #58
17cf8     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
17cfc     2C 00 90 ED |  if_be	jmp	#LR__1850
17d00                 | '     scrollup()
17d00     00 12 06 F6 | 	mov	arg01, #0
17d04     01 00 00 FF 
17d08     40 14 06 F6 | 	mov	arg02, ##576
17d0c     10 16 06 F6 | 	mov	arg03, #16
17d10     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
17d14                 | '     cursor_y:=st_lines-1
17d14     FD E4 05 F1 | 	add	objptr, #253
17d18     F2 1E 02 FB | 	rdlong	local01, objptr
17d1c     01 1E 86 F1 | 	sub	local01, #1
17d20     C3 E4 85 F1 | 	sub	objptr, #195
17d24     F2 1E 42 FC | 	wrbyte	local01, objptr
17d28     3A E4 85 F1 | 	sub	objptr, #58
17d2c                 | LR__1850
17d2c                 | LR__1851
17d2c                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
17d2c     38 E4 05 F1 | 	add	objptr, #56
17d30     F2 14 E2 FA | 	rdword	arg02, objptr
17d34     02 14 66 F0 | 	shl	arg02, #2
17d38     02 E4 05 F1 | 	add	objptr, #2
17d3c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17d40     3A E4 85 F1 | 	sub	objptr, #58
17d44     04 16 66 F0 | 	shl	arg03, #4
17d48     11 12 06 F6 | 	mov	arg01, #17
17d4c     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
17d50     A7 F0 03 F6 | 	mov	ptra, fp
17d54     B2 00 A0 FD | 	call	#popregs_
17d58                 | _hg010b_spin2_putchar2_ret
17d58     2D 00 64 FD | 	ret
17d5c                 | 
17d5c                 | ' ''--------- Output a string at the cursor position, move the cursor  
17d5c                 | ' 
17d5c                 | ' pub write(text) | iii,c,ncx,ncy
17d5c                 | _hg010b_spin2_write
17d5c     04 4A 05 F6 | 	mov	COUNT_, #4
17d60     A8 00 A0 FD | 	call	#pushregs_
17d64     09 1F 02 F6 | 	mov	local01, arg01
17d68                 | ' 
17d68                 | ' repeat iii from 0 to strsize(text)-1
17d68     00 20 06 F6 | 	mov	local02, #0
17d6c     0F 13 02 F6 | 	mov	arg01, local01
17d70     09 23 02 F6 | 	mov	local03, arg01
17d74     97 06 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
17d78                 | LR__1860
17d78     11 FB C9 FA | 	rdbyte	result1, local03 wz
17d7c     01 22 06 51 |  if_ne	add	local03, #1
17d80     F4 FF 9F 5D |  if_ne	jmp	#LR__1860
17d84                 | LR__1861
17d84     09 23 82 F1 | 	sub	local03, arg01
17d88     01 22 86 F1 | 	sub	local03, #1
17d8c     00 22 56 F2 | 	cmps	local03, #0 wc
17d90     01 24 86 F6 | 	negc	local04, #1
17d94     12 23 02 F1 | 	add	local03, local04
17d98                 | LR__1862
17d98                 | '   putchar2(byte[text+iii])
17d98     0F 13 02 F6 | 	mov	arg01, local01
17d9c     10 13 02 F1 | 	add	arg01, local02
17da0     09 13 C2 FA | 	rdbyte	arg01, arg01
17da4     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
17da8     12 21 02 F1 | 	add	local02, local04
17dac     11 21 0A F2 | 	cmp	local02, local03 wz
17db0     E4 FF 9F 5D |  if_ne	jmp	#LR__1862
17db4     A7 F0 03 F6 | 	mov	ptra, fp
17db8     B2 00 A0 FD | 	call	#popregs_
17dbc                 | _hg010b_spin2_write_ret
17dbc     2D 00 64 FD | 	ret
17dc0                 | 
17dc0                 | ' 
17dc0                 | ' ''-----------  Scroll the screen one line up
17dc0                 | ' 
17dc0                 | ' pub scrollup(start=0, end=576 , amount=16) | i
17dc0                 | _hg010b_spin2_scrollup
17dc0     01 4A 05 F6 | 	mov	COUNT_, #1
17dc4     A8 00 A0 FD | 	call	#pushregs_
17dc8                 | ' 	
17dc8                 | ' repeat i from 0 to 559 
17dc8     00 1E 06 F6 | 	mov	local01, #0
17dcc                 | LR__1870
17dcc     F5 E4 05 F1 | 	add	objptr, #245
17dd0     F2 18 02 FB | 	rdlong	arg04, objptr
17dd4     1C E4 85 F1 | 	sub	objptr, #28
17dd8     F2 14 02 FB | 	rdlong	arg02, objptr
17ddc     0F 13 02 F6 | 	mov	arg01, local01
17de0     10 12 06 F1 | 	add	arg01, #16
17de4     02 12 66 F0 | 	shl	arg01, #2
17de8     14 E4 05 F1 | 	add	objptr, #20
17dec     F2 16 02 FB | 	rdlong	arg03, objptr
17df0     0B 13 02 FD | 	qmul	arg01, arg03
17df4                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
17df4     F6 03 00 FF 
17df8     00 12 06 F6 | 	mov	arg01, ##519168
17dfc     0C 13 82 F1 | 	sub	arg01, arg04
17e00     02 16 66 F0 | 	shl	arg03, #2
17e04     0A 00 00 FF 
17e08     D3 E5 05 F1 | 	add	objptr, ##5587
17e0c     18 18 62 FD | 	getqx	arg04
17e10     0C 15 02 F1 | 	add	arg02, arg04
17e14     7C 04 B0 FD | 	call	#_psram_spin2_read1
17e18     0A 00 00 FF 
17e1c     CB E5 85 F1 | 	sub	objptr, ##5579
17e20     F2 18 02 FB | 	rdlong	arg04, objptr
17e24     1C E4 85 F1 | 	sub	objptr, #28
17e28     F2 14 02 FB | 	rdlong	arg02, objptr
17e2c     0F 13 02 F6 | 	mov	arg01, local01
17e30     02 12 66 F0 | 	shl	arg01, #2
17e34     14 E4 05 F1 | 	add	objptr, #20
17e38     F2 16 02 FB | 	rdlong	arg03, objptr
17e3c     0B 13 02 FD | 	qmul	arg01, arg03
17e40                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
17e40     F6 03 00 FF 
17e44     00 12 06 F6 | 	mov	arg01, ##519168
17e48     0C 13 82 F1 | 	sub	arg01, arg04
17e4c     02 16 66 F0 | 	shl	arg03, #2
17e50     0A 00 00 FF 
17e54     D3 E5 05 F1 | 	add	objptr, ##5587
17e58     18 18 62 FD | 	getqx	arg04
17e5c     0C 15 02 F1 | 	add	arg02, arg04
17e60     CC 04 B0 FD | 	call	#_psram_spin2_write
17e64     0B 00 00 FF 
17e68     C0 E4 85 F1 | 	sub	objptr, ##5824
17e6c     01 1E 06 F1 | 	add	local01, #1
17e70     01 00 00 FF 
17e74     30 1E 56 F2 | 	cmps	local01, ##560 wc
17e78     50 FF 9F CD |  if_b	jmp	#LR__1870
17e7c                 | ' 
17e7c                 | ' repeat i from 560 to 575
17e7c     01 00 00 FF 
17e80     30 1E 06 F6 | 	mov	local01, ##560
17e84                 | LR__1871
17e84                 | '    fastline(0,1023,i,write_background)   
17e84     41 E4 05 F1 | 	add	objptr, #65
17e88     F2 18 02 FB | 	rdlong	arg04, objptr
17e8c     41 E4 85 F1 | 	sub	objptr, #65
17e90     00 12 06 F6 | 	mov	arg01, #0
17e94     09 14 CE F9 | 	bmask	arg02, #9
17e98     0F 17 02 F6 | 	mov	arg03, local01
17e9c     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
17ea0     01 1E 06 F1 | 	add	local01, #1
17ea4     01 00 00 FF 
17ea8     40 1E 16 F2 | 	cmp	local01, ##576 wc
17eac     D4 FF 9F CD |  if_b	jmp	#LR__1871
17eb0     A7 F0 03 F6 | 	mov	ptra, fp
17eb4     B2 00 A0 FD | 	call	#popregs_
17eb8                 | _hg010b_spin2_scrollup_ret
17eb8     2D 00 64 FD | 	ret
17ebc                 | 
17ebc                 | ' 
17ebc                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
17ebc                 | ' 
17ebc                 | ' pub crlf()
17ebc                 | _hg010b_spin2_crlf
17ebc                 | ' 
17ebc                 | ' cursor_x:=leading_spaces*2
17ebc     01 00 00 FF 
17ec0     B2 E4 05 F1 | 	add	objptr, ##690
17ec4     F2 16 02 FB | 	rdlong	arg03, objptr
17ec8     01 16 66 F0 | 	shl	arg03, #1
17ecc     01 00 00 FF 
17ed0     7A E4 85 F1 | 	sub	objptr, ##634
17ed4     F2 16 52 FC | 	wrword	arg03, objptr
17ed8                 | ' cursor_y+=1
17ed8     02 E4 05 F1 | 	add	objptr, #2
17edc     F2 16 C2 FA | 	rdbyte	arg03, objptr
17ee0     01 16 06 F1 | 	add	arg03, #1
17ee4     F2 16 42 FC | 	wrbyte	arg03, objptr
17ee8                 | ' if cursor_y>st_lines-1
17ee8     C3 E4 05 F1 | 	add	objptr, #195
17eec     F2 16 02 FB | 	rdlong	arg03, objptr
17ef0     01 16 86 F1 | 	sub	arg03, #1
17ef4     C3 E4 85 F1 | 	sub	objptr, #195
17ef8     F2 14 C2 FA | 	rdbyte	arg02, objptr
17efc     3A E4 85 F1 | 	sub	objptr, #58
17f00     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
17f04     2C 00 90 ED |  if_be	jmp	#LR__1880
17f08                 | '   scrollup()
17f08     00 12 06 F6 | 	mov	arg01, #0
17f0c     01 00 00 FF 
17f10     40 14 06 F6 | 	mov	arg02, ##576
17f14     10 16 06 F6 | 	mov	arg03, #16
17f18     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
17f1c                 | '   cursor_y:=st_lines-1
17f1c     FD E4 05 F1 | 	add	objptr, #253
17f20     F2 16 02 FB | 	rdlong	arg03, objptr
17f24     01 16 86 F1 | 	sub	arg03, #1
17f28     C3 E4 85 F1 | 	sub	objptr, #195
17f2c     F2 16 42 FC | 	wrbyte	arg03, objptr
17f30     3A E4 85 F1 | 	sub	objptr, #58
17f34                 | LR__1880
17f34                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
17f34     38 E4 05 F1 | 	add	objptr, #56
17f38     F2 14 E2 FA | 	rdword	arg02, objptr
17f3c     02 14 66 F0 | 	shl	arg02, #2
17f40     02 E4 05 F1 | 	add	objptr, #2
17f44     F2 16 C2 FA | 	rdbyte	arg03, objptr
17f48     3A E4 85 F1 | 	sub	objptr, #58
17f4c     04 16 66 F0 | 	shl	arg03, #4
17f50     11 12 06 F6 | 	mov	arg01, #17
17f54     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
17f58                 | _hg010b_spin2_crlf_ret
17f58     2D 00 64 FD | 	ret
17f5c                 | 
17f5c                 | ' 
17f5c                 | ' 
17f5c                 | ' '*************************************************************************
17f5c                 | ' '                                                                        *
17f5c                 | ' '  Conversions                                                           *
17f5c                 | ' '                                                                        *
17f5c                 | ' '*************************************************************************
17f5c                 | ' 
17f5c                 | ' ''---------- Convert a integer to dec string, return a pointer
17f5c                 | ' 
17f5c                 | ' pub inttostr(i):result |q,pos,k,j
17f5c                 | _hg010b_spin2_inttostr
17f5c     03 4A 05 F6 | 	mov	COUNT_, #3
17f60     A8 00 A0 FD | 	call	#pushregs_
17f64     09 1F 0A F6 | 	mov	local01, arg01 wz
17f68                 | ' 
17f68                 | ' j:=i
17f68                 | ' pos:=10
17f68     0A 20 06 F6 | 	mov	local02, #10
17f6c                 | ' k:=0
17f6c     00 22 06 F6 | 	mov	local03, #0
17f70                 | ' 
17f70                 | ' if (j==0)
17f70     18 00 90 5D |  if_ne	jmp	#LR__1890
17f74                 | '   n_string[0]:=48
17f74     49 E4 05 F1 | 	add	objptr, #73
17f78     F2 60 48 FC | 	wrbyte	#48, objptr
17f7c                 | '   n_string[1]:=0
17f7c     01 E4 05 F1 | 	add	objptr, #1
17f80     F2 00 48 FC | 	wrbyte	#0, objptr
17f84     4A E4 85 F1 | 	sub	objptr, #74
17f88     C4 00 90 FD | 	jmp	#LR__1897
17f8c                 | LR__1890
17f8c                 | ' 
17f8c                 | ' else
17f8c                 | '   if (j<0)
17f8c     0F 1F 52 F6 | 	abs	local01, local01 wc
17f90                 | '     j:=0-j
17f90                 | '     k:=45
17f90     2D 22 06 C6 |  if_b	mov	local03, #45
17f94                 | ' 
17f94                 | '   n_string[11]:=0
17f94     54 E4 05 F1 | 	add	objptr, #84
17f98     F2 00 48 FC | 	wrbyte	#0, objptr
17f9c     54 E4 85 F1 | 	sub	objptr, #84
17fa0     97 24 48 FB | 	callpa	#(@LR__1892-@LR__1891)>>2,fcache_load_ptr_
17fa4                 | '   repeat while (pos>-1)
17fa4                 | LR__1891
17fa4     00 20 56 F2 | 	cmps	local02, #0 wc
17fa8     40 00 90 CD |  if_b	jmp	#LR__1893
17fac     0F FB 51 F6 | 	abs	result1, local01 wc
17fb0     0A FA 15 FD | 	qdiv	result1, #10
17fb4                 | '     q:=j//10
17fb4     19 FA 61 FD | 	getqy	result1
17fb8     FD FA 81 F6 | 	negc	result1, result1
17fbc     0F 1F 52 F6 | 	abs	local01, local01 wc
17fc0     0A 1E 16 FD | 	qdiv	local01, #10
17fc4                 | '     q:=48+q
17fc4     30 FA 05 F1 | 	add	result1, #48
17fc8                 | '     n_string[pos]:=q
17fc8     10 1F 02 F6 | 	mov	local01, local02
17fcc     49 E4 05 F1 | 	add	objptr, #73
17fd0     F2 1E 02 F1 | 	add	local01, objptr
17fd4     0F FB 41 FC | 	wrbyte	result1, local01
17fd8                 | '     j:=j/10
17fd8     49 E4 85 F1 | 	sub	objptr, #73
17fdc                 | '     pos-=1
17fdc     01 20 86 F1 | 	sub	local02, #1
17fe0     18 1E 62 FD | 	getqx	local01
17fe4     0F 1F 82 F6 | 	negc	local01, local01
17fe8     B8 FF 9F FD | 	jmp	#LR__1891
17fec                 | LR__1892
17fec                 | LR__1893
17fec                 | '   repeat while n_string[0]==48
17fec                 | LR__1894
17fec     49 E4 05 F1 | 	add	objptr, #73
17ff0     F2 16 C2 FA | 	rdbyte	arg03, objptr
17ff4     49 E4 85 F1 | 	sub	objptr, #73
17ff8     30 16 0E F2 | 	cmp	arg03, #48 wz
17ffc     20 00 90 5D |  if_ne	jmp	#LR__1895
18000                 | '     bytemove(@n_string,@n_string+1,12)
18000     49 E4 05 F1 | 	add	objptr, #73
18004     F2 12 02 F6 | 	mov	arg01, objptr
18008     F2 14 02 F6 | 	mov	arg02, objptr
1800c     49 E4 85 F1 | 	sub	objptr, #73
18010     01 14 06 F1 | 	add	arg02, #1
18014     0C 16 06 F6 | 	mov	arg03, #12
18018     E8 0C B0 FD | 	call	#__system____builtin_memmove
1801c     CC FF 9F FD | 	jmp	#LR__1894
18020                 | LR__1895
18020                 | ' 
18020                 | '   if k==45
18020     2D 22 0E F2 | 	cmp	local03, #45 wz
18024     28 00 90 5D |  if_ne	jmp	#LR__1896
18028                 | '      bytemove(@n_string+1,@n_string,12)
18028     49 E4 05 F1 | 	add	objptr, #73
1802c     F2 12 02 F6 | 	mov	arg01, objptr
18030     01 12 06 F1 | 	add	arg01, #1
18034     F2 14 02 F6 | 	mov	arg02, objptr
18038     49 E4 85 F1 | 	sub	objptr, #73
1803c     0C 16 06 F6 | 	mov	arg03, #12
18040     C0 0C B0 FD | 	call	#__system____builtin_memmove
18044                 | '      n_string[0]:=k
18044     49 E4 05 F1 | 	add	objptr, #73
18048     F2 22 42 FC | 	wrbyte	local03, objptr
1804c     49 E4 85 F1 | 	sub	objptr, #73
18050                 | LR__1896
18050                 | LR__1897
18050                 | ' 
18050                 | ' q:=@n_string
18050     49 E4 05 F1 | 	add	objptr, #73
18054     F2 FA 01 F6 | 	mov	result1, objptr
18058     49 E4 85 F1 | 	sub	objptr, #73
1805c                 | ' return q
1805c     A7 F0 03 F6 | 	mov	ptra, fp
18060     B2 00 A0 FD | 	call	#popregs_
18064                 | _hg010b_spin2_inttostr_ret
18064     2D 00 64 FD | 	ret
18068                 | 
18068                 | ' 
18068                 | ' '..............................................................................
18068                 | ' 
18068                 | ' {{
18068                 | ' }}
18068                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
18068                 | _psram_spin2_startx
18068     04 4A 05 F6 | 	mov	COUNT_, #4
1806c     A8 00 A0 FD | 	call	#pushregs_
18070     09 1F 02 F6 | 	mov	local01, arg01
18074     0B 21 02 F6 | 	mov	local02, arg03
18078     0C 23 02 F6 | 	mov	local03, arg04
1807c                 | '     stop() ' restart driver if required
1807c     54 01 B0 FD | 	call	#_psram_spin2_stop
18080     00 1E 0E F2 | 	cmp	local01, #0 wz
18084     14 1E 06 AB |  if_e	rdlong	local01, #20
18088     0F 15 52 F6 | 	abs	arg02, local01 wc
1808c     A1 07 00 FF 
18090     40 14 16 FD | 	qdiv	arg02, ##1000000
18094                 | ' 
18094                 | '     ' use current frequency if none specified
18094                 | ' 
18094                 | '     if freq == 0 
18094                 | '         freq := clkfreq 
18094                 | ' 
18094                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
18094                 | ' 
18094                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
18094                 | '     if burst < 0
18094                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
18094     18 14 62 FD | 	getqx	arg02
18098     0A 19 82 F6 | 	negc	arg04, arg02
1809c     03 18 66 F0 | 	shl	arg04, #3
180a0     84 18 86 F1 | 	sub	arg04, #132
180a4     04 18 46 F0 | 	shr	arg04, #4
180a8     04 18 66 F0 | 	shl	arg04, #4
180ac     00 18 56 F2 | 	cmps	arg04, #0 wc
180b0     0E FA 65 C6 |  if_b	neg	result1, #14
180b4     10 01 90 CD |  if_b	jmp	#LR__1903
180b8                 | ' 
180b8                 | '     ' compute the input delay
180b8                 | ' 
180b8                 | '     if delay <= 0
180b8     01 20 56 F2 | 	cmps	local02, #1 wc
180bc     10 00 90 3D |  if_ae	jmp	#LR__1900
180c0                 | '         delay := lookupDelay(freq)
180c0     0F 13 02 F6 | 	mov	arg01, local01
180c4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
180c8     FD 20 02 F6 | 	mov	local02, result1
180cc     04 00 90 FD | 	jmp	#LR__1901
180d0                 | LR__1900
180d0                 | '     else
180d0                 | '         delay <#= $f ' limit to 15
180d0     0F 20 66 F3 | 	fles	local02, #15
180d4                 | LR__1901
180d4                 | ' 
180d4                 | '     ' create our lock
180d4                 | ' 
180d4                 | '     driverlock := LOCKNEW()  
180d4     00 FA 05 F6 | 	mov	result1, #0
180d8     04 FA 61 FD | 	locknew	result1
180dc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
180e0     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
180e4                 | '     if driverlock == -1
180e4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
180e8     FF FF 7F FF 
180ec     FF FB 0D F2 | 	cmp	result1, ##-1 wz
180f0                 | '         return ERR_NO_LOCK
180f0     1A FA 65 A6 |  if_e	neg	result1, #26
180f4     D0 00 90 AD |  if_e	jmp	#LR__1903
180f8                 | ' 
180f8                 | '     ' patch in the proper data and HUB addresses to the startup structure
180f8                 | ' 
180f8                 | '     long[@startupData][0]:=clkfreq
180f8     14 1E 06 FB | 	rdlong	local01, #20
180fc     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
18100     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
18104                 | ' '    long[@startupData][1]:=$1000_0000
18104                 | '     long[@startupData][5]:=@deviceData
18104     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
18108     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1810c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
18110     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
18114     14 14 06 F1 | 	add	arg02, #20
18118     0A 1F 62 FC | 	wrlong	local01, arg02
1811c                 | '     long[@startupData][6]:=@qosData
1811c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
18120     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18124     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
18128     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1812c     18 14 06 F1 | 	add	arg02, #24
18130     0A 1F 62 FC | 	wrlong	local01, arg02
18134                 | '     long[@startupData][7]:=$7FF00
18134     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18138     1C 1E 06 F1 | 	add	local01, #28
1813c     FF 03 80 FF 
18140     0F 01 6A FC | 	wrlong	##524032, local01
18144                 | ' 
18144                 | '     ' setup some default bank and QoS parameter values
18144                 | ' 
18144                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
18144     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
18148     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1814c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
18150     10 18 66 F0 | 	shl	arg04, #16
18154     0C 20 66 F0 | 	shl	local02, #12
18158     10 19 42 F5 | 	or	arg04, local02
1815c     18 18 46 F5 | 	or	arg04, #24
18160     0C 15 02 F6 | 	mov	arg02, arg04
18164     02 16 06 F6 | 	mov	arg03, #2
18168     A0 00 A0 FD | 	call	#\builtin_longfill_
1816c                 | '     longfill(@qosData, $FFFF0000, 8)
1816c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
18170     07 16 06 F6 | 	mov	arg03, #7
18174     28 16 62 FD | 	setq	arg03
18178     80 FF FF FF 
1817c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
18180                 | ' 
18180                 | '     ' get the address of the PSRAM memory driver so we can start it
18180                 | ' 
18180                 | '     driverAddr:= driver.getDriverAddr()
18180                 | '     return @driver_start
18180     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
18184     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
18188     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1818c                 | ' 
1818c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1818c                 | ' 
1818c                 | '     if desiredcog < 0
1818c     00 22 56 F2 | 	cmps	local03, #0 wc
18190                 | '         desiredcog := NEWCOG
18190     10 22 06 C6 |  if_b	mov	local03, #16
18194                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
18194     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
18198     11 25 02 F6 | 	mov	local04, local03
1819c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
181a0     0A 25 F2 FC | 	coginit	local04, arg02 wc
181a4     01 24 66 C6 |  if_b	neg	local04, #1
181a8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
181ac     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
181b0                 | '     repeat until long[@startupData] == 0 
181b0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
181b4                 | LR__1902
181b4     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
181b8     F8 FF 9F 5D |  if_ne	jmp	#LR__1902
181bc                 | ' 
181bc                 | '     return drivercog
181bc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
181c0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
181c4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181c8                 | LR__1903
181c8     A7 F0 03 F6 | 	mov	ptra, fp
181cc     B2 00 A0 FD | 	call	#popregs_
181d0                 | _psram_spin2_startx_ret
181d0     2D 00 64 FD | 	ret
181d4                 | 
181d4                 | ' 
181d4                 | ' '..............................................................................
181d4                 | ' 
181d4                 | ' {{
181d4                 | ' }}
181d4                 | ' PUB stop() : i
181d4                 | _psram_spin2_stop
181d4     00 00 06 F6 | 	mov	_var01, #0
181d8                 | '     if drivercog <> -1
181d8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
181dc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
181e0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181e4     FF FF 7F FF 
181e8     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
181ec     70 00 90 AD |  if_e	jmp	#LR__1913
181f0                 | '         cogstop(drivercog) ' a rather brutal stop
181f0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
181f4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
181f8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181fc     03 12 62 FD | 	cogstop	arg01
18200     97 26 48 FB | 	callpa	#(@LR__1912-@LR__1910)>>2,fcache_load_ptr_
18204                 | '         repeat i from 0 to 7
18204                 | LR__1910
18204                 | '             if long[$7FF00][i*3] < 0
18204     00 FB 01 F6 | 	mov	result1, _var01
18208     01 FA 65 F0 | 	shl	result1, #1
1820c     00 FB 01 F1 | 	add	result1, _var01
18210     02 FA 65 F0 | 	shl	result1, #2
18214     FF 03 00 FF 
18218     00 FB 05 F1 | 	add	result1, ##524032
1821c     FD FA 01 FB | 	rdlong	result1, result1
18220     00 FA 55 F2 | 	cmps	result1, #0 wc
18224     1C 00 90 3D |  if_ae	jmp	#LR__1911
18228                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
18228     00 FB 01 F6 | 	mov	result1, _var01
1822c     01 FA 65 F0 | 	shl	result1, #1
18230     00 FB 01 F1 | 	add	result1, _var01
18234     02 FA 65 F0 | 	shl	result1, #2
18238     FF 03 00 FF 
1823c     00 FB 05 F1 | 	add	result1, ##524032
18240     FD 20 68 FC | 	wrlong	#16, result1
18244                 | LR__1911
18244     01 00 06 F1 | 	add	_var01, #1
18248     08 00 56 F2 | 	cmps	_var01, #8 wc
1824c     B4 FF 9F CD |  if_b	jmp	#LR__1910
18250                 | LR__1912
18250                 | '         drivercog := -1
18250     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18254     FF FF FF FF 
18258     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1825c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18260                 | LR__1913
18260                 | '     if driverlock <> -1
18260     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18264     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
18268     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1826c     FF FF 7F FF 
18270     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
18274                 | '         LOCKRET(driverlock)
18274     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
18278     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1827c     05 12 62 5D |  if_ne	lockret	arg01
18280                 | '         driverlock := -1
18280     FF FF FF 5F 
18284     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
18288     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1828c     00 FB 01 F6 | 	mov	result1, _var01
18290                 | _psram_spin2_stop_ret
18290     2D 00 64 FD | 	ret
18294                 | 
18294                 | ' 
18294                 | ' '..............................................................................
18294                 | ' 
18294                 | ' {{
18294                 | ' }}
18294                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
18294                 | _psram_spin2_read1
18294                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
18294                 | '     if drivercog == -1 ' driver must be running
18294     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18298     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1829c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
182a0     FF FF 7F FF 
182a4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
182a8                 | '         return ERR_INACTIVE
182a8     0F FA 65 A6 |  if_e	neg	result1, #15
182ac     7C 00 90 AD |  if_e	jmp	#LR__1921
182b0                 | '     if count == 0 ' don't even bother reading
182b0     00 16 0E F2 | 	cmp	arg03, #0 wz
182b4                 | '         return 0
182b4     00 FA 05 A6 |  if_e	mov	result1, #0
182b8     70 00 90 AD |  if_e	jmp	#LR__1921
182bc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
182bc     00 FA 05 F6 | 	mov	result1, #0
182c0     01 FA 61 FD | 	cogid	result1
182c4     FD 00 02 F6 | 	mov	_var01, result1
182c8     01 00 66 F0 | 	shl	_var01, #1
182cc     FD 00 02 F1 | 	add	_var01, result1
182d0     02 00 66 F0 | 	shl	_var01, #2
182d4     FF 03 00 FF 
182d8     00 03 06 F6 | 	mov	_var02, ##524032
182dc     00 03 02 F1 | 	add	_var02, _var01
182e0                 | '     if long[mailbox] < 0
182e0     01 01 02 FB | 	rdlong	_var01, _var02
182e4     00 00 56 F2 | 	cmps	_var01, #0 wc
182e8                 | '         return ERR_MAILBOX_BUSY
182e8     1C FA 65 C6 |  if_b	neg	result1, #28
182ec     3C 00 90 CD |  if_b	jmp	#LR__1921
182f0                 | '     long[mailbox][2] := count
182f0     08 02 06 F1 | 	add	_var02, #8
182f4     01 17 62 FC | 	wrlong	arg03, _var02
182f8                 | '     long[mailbox][1] := dstHubAddr
182f8     04 02 86 F1 | 	sub	_var02, #4
182fc     01 13 62 FC | 	wrlong	arg01, _var02
18300     04 02 86 F1 | 	sub	_var02, #4
18304                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
18304     0A 05 02 F6 | 	mov	_var03, arg02
18308     D9 04 06 F4 | 	bitl	_var03, #217
1830c     00 00 58 FF 
18310     00 00 06 F6 | 	mov	_var01, ##-1342177280
18314     02 01 02 F1 | 	add	_var01, _var03
18318     01 01 62 FC | 	wrlong	_var01, _var02
1831c                 | '     repeat
1831c                 | LR__1920
1831c                 | '         result := long[mailbox]    
1831c     01 05 02 FB | 	rdlong	_var03, _var02
18320     00 04 56 F2 | 	cmps	_var03, #0 wc
18324     F4 FF 9F CD |  if_b	jmp	#LR__1920
18328                 | '     while result < 0   
18328                 | '     return -result                       'return success or error
18328     02 FB 61 F6 | 	neg	result1, _var03
1832c                 | LR__1921
1832c                 | _psram_spin2_read1_ret
1832c     2D 00 64 FD | 	ret
18330                 | 
18330                 | ' 
18330                 | ' '..............................................................................
18330                 | ' 
18330                 | ' {{
18330                 | ' }}
18330                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
18330                 | _psram_spin2_write
18330                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
18330                 | '     if drivercog == -1 ' driver must be running
18330     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18334     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
18338     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1833c     FF FF 7F FF 
18340     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
18344                 | '         return ERR_INACTIVE
18344     0F FA 65 A6 |  if_e	neg	result1, #15
18348     7C 00 90 AD |  if_e	jmp	#LR__1931
1834c                 | '     if count == 0 ' don't even bother writing
1834c     00 16 0E F2 | 	cmp	arg03, #0 wz
18350                 | '         return 0
18350     00 FA 05 A6 |  if_e	mov	result1, #0
18354     70 00 90 AD |  if_e	jmp	#LR__1931
18358                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
18358     00 FA 05 F6 | 	mov	result1, #0
1835c     01 FA 61 FD | 	cogid	result1
18360     FD 00 02 F6 | 	mov	_var01, result1
18364     01 00 66 F0 | 	shl	_var01, #1
18368     FD 00 02 F1 | 	add	_var01, result1
1836c     02 00 66 F0 | 	shl	_var01, #2
18370     FF 03 00 FF 
18374     00 03 06 F6 | 	mov	_var02, ##524032
18378     00 03 02 F1 | 	add	_var02, _var01
1837c                 | '     if long[mailbox] < 0
1837c     01 01 02 FB | 	rdlong	_var01, _var02
18380     00 00 56 F2 | 	cmps	_var01, #0 wc
18384                 | '         return ERR_MAILBOX_BUSY
18384     1C FA 65 C6 |  if_b	neg	result1, #28
18388     3C 00 90 CD |  if_b	jmp	#LR__1931
1838c                 | '     long[mailbox][2] := count
1838c     08 02 06 F1 | 	add	_var02, #8
18390     01 17 62 FC | 	wrlong	arg03, _var02
18394                 | '     long[mailbox][1] := srcHubAddr
18394     04 02 86 F1 | 	sub	_var02, #4
18398     01 13 62 FC | 	wrlong	arg01, _var02
1839c     04 02 86 F1 | 	sub	_var02, #4
183a0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
183a0     0A 05 02 F6 | 	mov	_var03, arg02
183a4     D9 04 06 F4 | 	bitl	_var03, #217
183a8     00 00 78 FF 
183ac     00 00 06 F6 | 	mov	_var01, ##-268435456
183b0     02 01 02 F1 | 	add	_var01, _var03
183b4     01 01 62 FC | 	wrlong	_var01, _var02
183b8                 | '     repeat
183b8                 | LR__1930
183b8                 | '         result := long[mailbox]    
183b8     01 05 02 FB | 	rdlong	_var03, _var02
183bc     00 04 56 F2 | 	cmps	_var03, #0 wc
183c0     F4 FF 9F CD |  if_b	jmp	#LR__1930
183c4                 | '     while result < 0   
183c4                 | '     return -result                       'return success or error
183c4     02 FB 61 F6 | 	neg	result1, _var03
183c8                 | LR__1931
183c8                 | _psram_spin2_write_ret
183c8     2D 00 64 FD | 	ret
183cc                 | 
183cc                 | ' 
183cc                 | ' ' generalized fill
183cc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
183cc                 | _psram_spin2_fill
183cc     09 01 02 F6 | 	mov	_var01, arg01
183d0     0A 03 02 F6 | 	mov	_var02, arg02
183d4     0B 05 02 F6 | 	mov	_var03, arg03
183d8     0D 07 02 F6 | 	mov	_var04, arg05
183dc                 | '     case datasize 
183dc     01 06 86 F1 | 	sub	_var04, #1
183e0     04 06 26 F3 | 	fle	_var04, #4
183e4     30 06 62 FD | 	jmprel	_var04
183e8                 | LR__1940
183e8     10 00 90 FD | 	jmp	#LR__1941
183ec     18 00 90 FD | 	jmp	#LR__1942
183f0     2C 00 90 FD | 	jmp	#LR__1944
183f4     1C 00 90 FD | 	jmp	#LR__1943
183f8     24 00 90 FD | 	jmp	#LR__1944
183fc                 | LR__1941
183fc                 | '         1: req := driver.R_WRITEBYTE
183fc     00 00 60 FF 
18400     00 08 06 F6 | 	mov	_var05, ##-1073741824
18404     20 00 90 FD | 	jmp	#LR__1945
18408                 | LR__1942
18408                 | '         2: req := driver.R_WRITEWORD
18408     00 00 68 FF 
1840c     00 08 06 F6 | 	mov	_var05, ##-805306368
18410     14 00 90 FD | 	jmp	#LR__1945
18414                 | LR__1943
18414                 | '         4: req := driver.R_WRITELONG
18414     00 00 70 FF 
18418     00 08 06 F6 | 	mov	_var05, ##-536870912
1841c     08 00 90 FD | 	jmp	#LR__1945
18420                 | LR__1944
18420                 | '         other : return ERR_INVALID
18420     06 FA 65 F6 | 	neg	result1, #6
18424     94 00 90 FD | 	jmp	#LR__1947
18428                 | LR__1945
18428                 | '     if count == 0   ' nothing to do
18428     00 04 0E F2 | 	cmp	_var03, #0 wz
1842c                 | '         return 0
1842c     00 FA 05 A6 |  if_e	mov	result1, #0
18430     88 00 90 AD |  if_e	jmp	#LR__1947
18434                 | '     if drivercog == -1
18434     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18438     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1843c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18440     FF FF 7F FF 
18444     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
18448                 | '         return ERR_INACTIVE
18448     0F FA 65 A6 |  if_e	neg	result1, #15
1844c     6C 00 90 AD |  if_e	jmp	#LR__1947
18450                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
18450     00 FA 05 F6 | 	mov	result1, #0
18454     01 FA 61 FD | 	cogid	result1
18458     FD 06 02 F6 | 	mov	_var04, result1
1845c     01 06 66 F0 | 	shl	_var04, #1
18460     FD 06 02 F1 | 	add	_var04, result1
18464     02 06 66 F0 | 	shl	_var04, #2
18468     FF 03 00 FF 
1846c     00 0B 06 F6 | 	mov	_var06, ##524032
18470     03 0B 02 F1 | 	add	_var06, _var04
18474                 | '     if long[mailbox] < 0
18474     05 07 02 FB | 	rdlong	_var04, _var06
18478     00 06 56 F2 | 	cmps	_var04, #0 wc
1847c                 | '         return ERR_MAILBOX_BUSY
1847c     1C FA 65 C6 |  if_b	neg	result1, #28
18480     38 00 90 CD |  if_b	jmp	#LR__1947
18484                 | '     long[mailbox][2] := count
18484     08 0A 06 F1 | 	add	_var06, #8
18488     05 05 62 FC | 	wrlong	_var03, _var06
1848c                 | '     long[mailbox][1] := pattern
1848c     04 0A 86 F1 | 	sub	_var06, #4
18490     05 03 62 FC | 	wrlong	_var02, _var06
18494     04 0A 86 F1 | 	sub	_var06, #4
18498                 | '     long[mailbox] := req + (addr & $fffffff)
18498     04 0D 02 F6 | 	mov	_var07, _var05
1849c     00 0F 02 F6 | 	mov	_var08, _var01
184a0     7C 0E 06 F4 | 	bitl	_var08, #124
184a4     07 0D 02 F1 | 	add	_var07, _var08
184a8     05 0D 62 FC | 	wrlong	_var07, _var06
184ac                 | '     repeat
184ac                 | LR__1946
184ac                 | '         r := long[mailbox]
184ac     05 0F 02 FB | 	rdlong	_var08, _var06
184b0     00 0E 56 F2 | 	cmps	_var08, #0 wc
184b4     F4 FF 9F CD |  if_b	jmp	#LR__1946
184b8                 | '     while r < 0
184b8                 | '     return -r                  ' return 0 for success or negated error code
184b8     07 FB 61 F6 | 	neg	result1, _var08
184bc                 | LR__1947
184bc                 | _psram_spin2_fill_ret
184bc     2D 00 64 FD | 	ret
184c0                 | 
184c0                 | ' 
184c0                 | ' '..............................................................................
184c0                 | ' 
184c0                 | ' {{
184c0                 | ' }}
184c0                 | ' PUB setQos(cog, qos) : result | mailbox
184c0                 | _psram_spin2_setQos
184c0     09 01 02 F6 | 	mov	_var01, arg01
184c4                 | '     if drivercog == -1 ' driver must be running
184c4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
184c8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
184cc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
184d0     FF FF 7F FF 
184d4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
184d8                 | '         return ERR_INACTIVE
184d8     0F FA 65 A6 |  if_e	neg	result1, #15
184dc     9C 00 90 AD |  if_e	jmp	#LR__1954
184e0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
184e0     00 00 56 F2 | 	cmps	_var01, #0 wc
184e4     08 00 90 CD |  if_b	jmp	#LR__1950
184e8     08 00 56 F2 | 	cmps	_var01, #8 wc
184ec     08 00 90 CD |  if_b	jmp	#LR__1951
184f0                 | LR__1950
184f0                 | '         return ERR_INVALID
184f0     06 FA 65 F6 | 	neg	result1, #6
184f4     84 00 90 FD | 	jmp	#LR__1954
184f8                 | LR__1951
184f8                 | '     long[@qosData][cog] := qos & !$1ff
184f8     FF 15 26 F5 | 	andn	arg02, #511
184fc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
18500     02 00 66 F0 | 	shl	_var01, #2
18504     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
18508     00 15 62 FC | 	wrlong	arg02, _var01
1850c                 | '     mailbox := $7FF00 + drivercog*12
1850c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
18510     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
18514     02 07 02 F6 | 	mov	_var04, _var03
18518     01 06 66 F0 | 	shl	_var04, #1
1851c     02 07 02 F1 | 	add	_var04, _var03
18520     02 06 66 F0 | 	shl	_var04, #2
18524     FF 03 00 FF 
18528     00 09 06 F6 | 	mov	_var05, ##524032
1852c     03 09 02 F1 | 	add	_var05, _var04
18530                 | '     repeat until LOCKTRY(driverlock)
18530     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
18534                 | LR__1952
18534     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18538     06 12 72 FD | 	locktry	arg01 wc
1853c     F4 FF 9F 3D |  if_ae	jmp	#LR__1952
18540     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18544                 | '     long[mailbox] := driver.R_CONFIG + cogid()
18544     00 06 06 F6 | 	mov	_var04, #0
18548     01 06 62 FD | 	cogid	_var04
1854c     00 00 78 FF 
18550     00 02 06 F6 | 	mov	_var02, ##-268435456
18554     03 03 02 F1 | 	add	_var02, _var04
18558     04 03 62 FC | 	wrlong	_var02, _var05
1855c                 | '     repeat while long[mailbox] < 0
1855c                 | LR__1953
1855c     04 03 02 FB | 	rdlong	_var02, _var05
18560     00 02 56 F2 | 	cmps	_var02, #0 wc
18564     F4 FF 9F CD |  if_b	jmp	#LR__1953
18568                 | '     LOCKREL(driverlock)
18568     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1856c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18570     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18574     07 12 72 FD | 	lockrel	arg01 wc
18578     00 FA 05 F6 | 	mov	result1, #0
1857c                 | LR__1954
1857c                 | _psram_spin2_setQos_ret
1857c     2D 00 64 FD | 	ret
18580                 | 
18580                 | ' 
18580                 | ' '..............................................................................
18580                 | ' 
18580                 | ' {{
18580                 | ' }}
18580                 | ' PRI lookupDelay(freq) : delay | profile
18580                 | _psram_spin2_lookupDelay
18580                 | '     profile := @delayTable
18580     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
18584     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
18588                 | '     delay := long[profile][0]
18588     00 03 02 FB | 	rdlong	_var02, _var01
1858c                 | '     repeat while long[profile][1] 
1858c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
18590     97 16 48 FB | 	callpa	#(@LR__1961-@LR__1960)>>2,fcache_load_ptr_
18594                 | LR__1960
18594     04 00 06 F1 | 	add	_var01, #4
18598     00 FB 09 FB | 	rdlong	result1, _var01 wz
1859c     04 00 86 F1 | 	sub	_var01, #4
185a0     1C 00 90 AD |  if_e	jmp	#LR__1962
185a4                 | '         if freq +< long[profile][1] 
185a4     04 00 06 F1 | 	add	_var01, #4
185a8     00 FB 01 FB | 	rdlong	result1, _var01
185ac     04 00 86 F1 | 	sub	_var01, #4
185b0     FD 12 12 F2 | 	cmp	arg01, result1 wc
185b4                 | '             quit
185b4                 | '         profile += 4
185b4     04 00 06 31 |  if_ae	add	_var01, #4
185b8                 | '         delay++
185b8     01 02 06 31 |  if_ae	add	_var02, #1
185bc     D4 FF 9F 3D |  if_ae	jmp	#LR__1960
185c0                 | LR__1961
185c0                 | LR__1962
185c0     01 FB 01 F6 | 	mov	result1, _var02
185c4                 | _psram_spin2_lookupDelay_ret
185c4     2D 00 64 FD | 	ret
185c8                 | 
185c8                 | ' 
185c8                 | ' PUB start() : r
185c8                 | _usbnew_spin2_start
185c8     00 00 06 F6 | 	mov	_var01, #0
185cc                 | '   ifnot driver_cog
185cc     15 00 00 FF 
185d0     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
185d4     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
185d8     15 00 00 FF 
185dc     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
185e0     38 00 90 5D |  if_ne	jmp	#LR__1970
185e4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
185e4     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
185e8     10 00 06 F6 | 	mov	_var01, #16
185ec     00 16 06 F6 | 	mov	arg03, #0
185f0     28 16 62 FD | 	setq	arg03
185f4     0A 01 F2 FC | 	coginit	_var01, arg02 wc
185f8     01 00 66 C6 |  if_b	neg	_var01, #1
185fc                 | '     if r >= 0
185fc     00 00 56 F2 | 	cmps	_var01, #0 wc
18600                 | '       driver_cog := r+1
18600     00 03 02 36 |  if_ae	mov	_var02, _var01
18604     01 02 06 31 |  if_ae	add	_var02, #1
18608     15 00 00 3F 
1860c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
18610     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
18614     15 00 00 3F 
18618     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1861c                 | LR__1970
1861c     00 FB 01 F6 | 	mov	result1, _var01
18620                 | _usbnew_spin2_start_ret
18620     2D 00 64 FD | 	ret
18624                 | 
18624                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
18624                 | ' 
18624                 | ' '' Return key event from buffer if there is one
18624                 | ' PUB get_key() : r | tail
18624                 | _usbnew_spin2_get_key
18624                 | '   tail := keyq_tail
18624     0F 00 00 FF 
18628     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1862c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
18630                 | '   if keyq_head == tail
18630     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18634     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
18638     0F 00 00 FF 
1863c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
18640     00 03 0A F2 | 	cmp	_var02, _var01 wz
18644                 | '     return 0 ' No event
18644     00 FA 05 A6 |  if_e	mov	result1, #0
18648     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1864c                 | '   r := keyq_data[tail]
1864c     00 03 02 F6 | 	mov	_var02, _var01
18650     02 02 66 F0 | 	shl	_var02, #2
18654     0F 00 00 FF 
18658     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1865c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
18660     01 FB 01 FB | 	rdlong	result1, _var02
18664                 | '   if ++tail == KEYQUEUE_SIZE
18664     01 00 06 F1 | 	add	_var01, #1
18668     80 00 0E F2 | 	cmp	_var01, #128 wz
1866c                 | '     tail := 0
1866c     00 00 06 A6 |  if_e	mov	_var01, #0
18670                 | '   keyq_tail := tail
18670     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18674     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
18678     0F 00 00 FF 
1867c     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
18680                 | _usbnew_spin2_get_key_ret
18680     2D 00 64 FD | 	ret
18684                 | 
18684                 | ' 
18684                 | ' '' Emulate mouse movement
18684                 | ' PUB mouse_move(x,y)
18684                 | _usbnew_spin2_mouse_move
18684     02 4A 05 F6 | 	mov	COUNT_, #2
18688     A8 00 A0 FD | 	call	#pushregs_
1868c     09 1F 02 F6 | 	mov	local01, arg01
18690     0A 21 02 F6 | 	mov	local02, arg02
18694                 | '   mouse_lock := 1
18694     14 00 00 FF 
18698     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1869c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
186a0     14 00 00 FF 
186a4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
186a8                 | '   waitus(2) ' hope driver is now done
186a8     02 12 06 F6 | 	mov	arg01, #2
186ac     94 0A B0 FD | 	call	#__system___waitus
186b0                 | '   mouse_xacc := x
186b0     14 00 00 FF 
186b4     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
186b8     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
186bc                 | '   mouse_yacc := y
186bc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
186c0     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
186c4                 | '   if mouse_outptr
186c4     04 00 00 FF 
186c8     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
186cc     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
186d0     0F 00 00 FF 
186d4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
186d8     24 00 90 AD |  if_e	jmp	#LR__1980
186dc                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
186dc     10 20 66 F0 | 	shl	local02, #16
186e0     0F 1F 32 F9 | 	getword	local01, local01, #0
186e4     0F 21 42 F5 | 	or	local02, local01
186e8     0F 00 00 FF 
186ec     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
186f0     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
186f4     0F 00 00 FF 
186f8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
186fc     0F 21 62 FC | 	wrlong	local02, local01
18700                 | LR__1980
18700                 | '   mouse_lock := 0
18700     14 00 00 FF 
18704     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18708     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1870c     14 00 00 FF 
18710     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18714     A7 F0 03 F6 | 	mov	ptra, fp
18718     B2 00 A0 FD | 	call	#popregs_
1871c                 | _usbnew_spin2_mouse_move_ret
1871c     2D 00 64 FD | 	ret
18720                 | 
18720                 | '     '' Set HAVE_HIDPAD to enable.
18720                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
18720                 | ' 
18720                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
18720                 | ' PUB hidpad_id(dev) : r
18720                 | _usbnew_spin2_hidpad_id
18720                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
18720     13 00 00 FF 
18724     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18728     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1872c     09 01 02 F6 | 	mov	_var01, arg01
18730     03 00 66 F0 | 	shl	_var01, #3
18734     09 01 82 F1 | 	sub	_var01, arg01
18738     02 00 66 F0 | 	shl	_var01, #2
1873c     00 FB 01 F1 | 	add	result1, _var01
18740     FD FA 01 FB | 	rdlong	result1, result1
18744     13 00 00 FF 
18748     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1874c                 | _usbnew_spin2_hidpad_id_ret
1874c     2D 00 64 FD | 	ret
18750                 | 
18750                 | ' 
18750                 | ' '' Get all button states for a device
18750                 | ' PUB hidpad_buttons(dev) : r 
18750                 | _usbnew_spin2_hidpad_buttons
18750                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
18750     13 00 00 FF 
18754     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18758     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1875c     09 01 02 F6 | 	mov	_var01, arg01
18760     03 00 66 F0 | 	shl	_var01, #3
18764     09 01 82 F1 | 	sub	_var01, arg01
18768     02 00 66 F0 | 	shl	_var01, #2
1876c     00 FB 01 F1 | 	add	result1, _var01
18770     14 FA 05 F1 | 	add	result1, #20
18774     FD FA 01 FB | 	rdlong	result1, result1
18778     13 00 00 FF 
1877c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18780                 | _usbnew_spin2_hidpad_buttons_ret
18780     2D 00 64 FD | 	ret
18784                 | 
18784                 | ' 
18784                 | ' '' Get state of an axis (normalized between -32768 and 32767)
18784                 | ' PUB hidpad_axis(dev,axnum) : r
18784                 | _usbnew_spin2_hidpad_axis
18784                 | '   if axnum +>= 6
18784     06 14 16 F2 | 	cmp	arg02, #6 wc
18788                 | '     return 0
18788     00 FA 05 36 |  if_ae	mov	result1, #0
1878c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
18790                 | '   else 
18790                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
18790     13 00 00 FF 
18794     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18798     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1879c     09 01 02 F6 | 	mov	_var01, arg01
187a0     03 00 66 F0 | 	shl	_var01, #3
187a4     09 01 82 F1 | 	sub	_var01, arg01
187a8     02 00 66 F0 | 	shl	_var01, #2
187ac     00 FB 01 F1 | 	add	result1, _var01
187b0     04 00 06 F6 | 	mov	_var01, #4
187b4     0A 01 02 F1 | 	add	_var01, arg02
187b8     01 00 66 F0 | 	shl	_var01, #1
187bc     FD 00 02 F1 | 	add	_var01, result1
187c0     00 FB E1 FA | 	rdword	result1, _var01
187c4     0F FA 65 F7 | 	signx	result1, #15
187c8     13 00 00 FF 
187cc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
187d0                 | _usbnew_spin2_hidpad_axis_ret
187d0     2D 00 64 FD | 	ret
187d4                 | 
187d4                 | ' 
187d4                 | ' 
187d4                 | ' '--------------------------------------------------------------
187d4                 | ' '---------- Init the variables, start the cog. ----------------
187d4                 | ' '--------------------------------------------------------------
187d4                 | ' 
187d4                 | ' pub start(mbox,scope,cache) :cog,base | iii
187d4                 | _Audio093b_8_sc_spin2_start
187d4     04 4A 05 F6 | 	mov	COUNT_, #4
187d8     A8 00 A0 FD | 	call	#pushregs_
187dc     09 1F 02 F6 | 	mov	local01, arg01
187e0                 | ' 
187e0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
187e0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
187e0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
187e0                 | ' 
187e0                 | ' mailboxaddr:=mbox 
187e0     F2 1E 62 FC | 	wrlong	local01, objptr
187e4                 | ' scope_ptr:=scope
187e4     04 E4 05 F1 | 	add	objptr, #4
187e8     F2 14 62 FC | 	wrlong	arg02, objptr
187ec                 | ' cache_ptr:=cache
187ec     04 E4 05 F1 | 	add	objptr, #4
187f0     F2 16 62 FC | 	wrlong	arg03, objptr
187f4                 | ' base:=@channel1[0]
187f4     04 E4 05 F1 | 	add	objptr, #4
187f8     F2 20 02 F6 | 	mov	local02, objptr
187fc                 | ' 
187fc                 | ' repeat iii from 0 to 7
187fc     00 22 06 F6 | 	mov	local03, #0
18800     02 00 00 FF 
18804     78 E6 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##1144
18808     0C E4 85 F1 | 	sub	objptr, #12
1880c     97 B0 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
18810                 | LR__1990
18810                 | '   long[base+64*iii]:=0
18810     10 1F 02 F6 | 	mov	local01, local02
18814     11 FD 01 F6 | 	mov	result2, local03
18818     06 FC 65 F0 | 	shl	result2, #6
1881c     FE 1E 02 F1 | 	add	local01, result2
18820     0F 01 68 FC | 	wrlong	#0, local01
18824                 | '   long[base+64*iii+4]:=0
18824     10 1F 02 F6 | 	mov	local01, local02
18828     11 FD 01 F6 | 	mov	result2, local03
1882c     06 FC 65 F0 | 	shl	result2, #6
18830     FE 1E 02 F1 | 	add	local01, result2
18834     04 1E 06 F1 | 	add	local01, #4
18838     0F 01 68 FC | 	wrlong	#0, local01
1883c                 | '   long[base+64*iii+12]:=0
1883c     10 25 02 F6 | 	mov	local04, local02
18840     11 1F 02 F6 | 	mov	local01, local03
18844     06 1E 66 F0 | 	shl	local01, #6
18848     0F 25 02 F1 | 	add	local04, local01
1884c     0C 24 06 F1 | 	add	local04, #12
18850     12 01 68 FC | 	wrlong	#0, local04
18854                 | '   long[base+64*iii+16]:=2 
18854     10 25 02 F6 | 	mov	local04, local02
18858     11 1F 02 F6 | 	mov	local01, local03
1885c     06 1E 66 F0 | 	shl	local01, #6
18860     0F 25 02 F1 | 	add	local04, local01
18864     10 24 06 F1 | 	add	local04, #16
18868     12 05 68 FC | 	wrlong	#2, local04
1886c                 | '   word[base+64*iii+20]:=0
1886c     10 25 02 F6 | 	mov	local04, local02
18870     11 1F 02 F6 | 	mov	local01, local03
18874     06 1E 66 F0 | 	shl	local01, #6
18878     0F 25 02 F1 | 	add	local04, local01
1887c     14 24 06 F1 | 	add	local04, #20
18880     12 01 58 FC | 	wrword	#0, local04
18884                 | '   word[base+64*iii+22]:=8192
18884     10 25 02 F6 | 	mov	local04, local02
18888     11 1F 02 F6 | 	mov	local01, local03
1888c     06 1E 66 F0 | 	shl	local01, #6
18890     0F 25 02 F1 | 	add	local04, local01
18894     16 24 06 F1 | 	add	local04, #22
18898     10 00 80 FF 
1889c     12 01 58 FC | 	wrword	##8192, local04
188a0                 | '   word[base+64*iii+24]:=4000+2*iii
188a0     11 25 02 F6 | 	mov	local04, local03
188a4     01 24 66 F0 | 	shl	local04, #1
188a8     07 00 00 FF 
188ac     A0 1F 06 F6 | 	mov	local01, ##4000
188b0     12 1F 02 F1 | 	add	local01, local04
188b4     10 25 02 F6 | 	mov	local04, local02
188b8     11 FD 01 F6 | 	mov	result2, local03
188bc     06 FC 65 F0 | 	shl	result2, #6
188c0     FE 24 02 F1 | 	add	local04, result2
188c4     18 24 06 F1 | 	add	local04, #24
188c8     12 1F 52 FC | 	wrword	local01, local04
188cc                 | '   word[base+64*iii+26]:=2
188cc     10 25 02 F6 | 	mov	local04, local02
188d0     11 1F 02 F6 | 	mov	local01, local03
188d4     06 1E 66 F0 | 	shl	local01, #6
188d8     0F 25 02 F1 | 	add	local04, local01
188dc     1A 24 06 F1 | 	add	local04, #26
188e0     12 05 58 FC | 	wrword	#2, local04
188e4                 | '   long [base+64*iii+8]:=@null | $C0000000
188e4     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
188e8     3E 1E 26 F4 | 	bith	local01, #62
188ec     10 25 02 F6 | 	mov	local04, local02
188f0     11 17 02 F6 | 	mov	arg03, local03
188f4     06 16 66 F0 | 	shl	arg03, #6
188f8     0B 25 02 F1 | 	add	local04, arg03
188fc     08 24 06 F1 | 	add	local04, #8
18900     12 1F 62 FC | 	wrlong	local01, local04
18904                 | '   long[base+64*iii+32]:=0
18904     10 25 02 F6 | 	mov	local04, local02
18908     11 1F 02 F6 | 	mov	local01, local03
1890c     06 1E 66 F0 | 	shl	local01, #6
18910     0F 25 02 F1 | 	add	local04, local01
18914     20 24 06 F1 | 	add	local04, #32
18918     12 01 68 FC | 	wrlong	#0, local04
1891c                 | '   long[base+64*iii+36]:=0
1891c     10 25 02 F6 | 	mov	local04, local02
18920     11 1F 02 F6 | 	mov	local01, local03
18924     06 1E 66 F0 | 	shl	local01, #6
18928     0F 25 02 F1 | 	add	local04, local01
1892c     24 24 06 F1 | 	add	local04, #36
18930     12 01 68 FC | 	wrlong	#0, local04
18934                 | '   long[base+64*iii+40]:=0
18934     10 25 02 F6 | 	mov	local04, local02
18938     11 1F 02 F6 | 	mov	local01, local03
1893c     06 1E 66 F0 | 	shl	local01, #6
18940     0F 25 02 F1 | 	add	local04, local01
18944     28 24 06 F1 | 	add	local04, #40
18948     12 01 68 FC | 	wrlong	#0, local04
1894c                 | '   long[base+64*iii+44]:=0
1894c     10 25 02 F6 | 	mov	local04, local02
18950     11 1F 02 F6 | 	mov	local01, local03
18954     06 1E 66 F0 | 	shl	local01, #6
18958     0F 25 02 F1 | 	add	local04, local01
1895c     2C 24 06 F1 | 	add	local04, #44
18960     12 01 68 FC | 	wrlong	#0, local04
18964     01 22 06 F1 | 	add	local03, #1
18968     08 22 56 F2 | 	cmps	local03, #8 wc
1896c     A0 FE 9F CD |  if_b	jmp	#LR__1990
18970                 | LR__1991
18970     02 00 00 FF 
18974     78 E6 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##1144
18978                 | '   
18978                 | ' cog:=coginit(16,@audio,@mailboxaddr)
18978     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
1897c     F2 16 02 F6 | 	mov	arg03, objptr
18980     10 24 06 F6 | 	mov	local04, #16
18984     28 16 62 FD | 	setq	arg03
18988     0A 25 F2 FC | 	coginit	local04, arg02 wc
1898c     01 24 66 C6 |  if_b	neg	local04, #1
18990                 | ' waitms(100)
18990     64 12 06 F6 | 	mov	arg01, #100
18994     40 07 B0 FD | 	call	#__system___waitms
18998                 | ' return cog,base
18998     10 FD 01 F6 | 	mov	result2, local02
1899c     12 FB 01 F6 | 	mov	result1, local04
189a0     A7 F0 03 F6 | 	mov	ptra, fp
189a4     B2 00 A0 FD | 	call	#popregs_
189a8                 | _Audio093b_8_sc_spin2_start_ret
189a8     2D 00 64 FD | 	ret
189ac                 | 
189ac                 | ' 
189ac                 | ' ' a simple play procedure to not poke everything. 
189ac                 | ' 
189ac                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
189ac                 | _Audio093b_8_sc_spin2_play
189ac     0C E4 05 F1 | 	add	objptr, #12
189b0     F2 00 02 F6 | 	mov	_var01, objptr
189b4     06 12 66 F0 | 	shl	arg01, #6
189b8     09 01 02 F1 | 	add	_var01, arg01
189bc     00 00 60 FF 
189c0     00 14 06 F1 | 	add	arg02, ##-1073741824
189c4     00 13 02 F6 | 	mov	arg01, _var01
189c8     08 12 06 F1 | 	add	arg01, #8
189cc     09 15 62 FC | 	wrlong	arg02, arg01
189d0     00 15 02 F6 | 	mov	arg02, _var01
189d4     0C 14 06 F1 | 	add	arg02, #12
189d8     0A 1B 62 FC | 	wrlong	arg05, arg02
189dc     00 1C 56 F2 | 	cmps	arg06, #0 wc
189e0     00 15 02 36 |  if_ae	mov	arg02, _var01
189e4     10 14 06 31 |  if_ae	add	arg02, #16
189e8     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
189ec     02 1A 06 C1 |  if_b	add	arg05, #2
189f0     00 13 02 C6 |  if_b	mov	arg01, _var01
189f4     10 12 06 C1 |  if_b	add	arg01, #16
189f8     09 1B 62 CC |  if_b	wrlong	arg05, arg01
189fc     0B 15 52 F6 | 	abs	arg02, arg03 wc
18a00     0F 1B 80 FF 
18a04     0A 3F 1A FD | 	qdiv	##3546911, arg02
18a08                 | ' 
18a08                 | ' base2:=@channel1[0]+64*channel
18a08                 | ' long[base2+8]:=sample+$C0000000 
18a08                 | ' long[base2+12]:= len
18a08                 | ' if loop >=0 
18a08                 | '   long[base2+16]:= loop
18a08     0C E4 85 F1 | 	sub	objptr, #12
18a0c                 | ' else
18a0c                 | '   long[base2+16]:= len+2
18a0c                 | ' word[base2+20]:=vol
18a0c     00 15 02 F6 | 	mov	arg02, _var01
18a10     14 14 06 F1 | 	add	arg02, #20
18a14     0A 19 52 FC | 	wrword	arg04, arg02
18a18                 | ' word[base2+24]:= 3546911/splfreq 
18a18     00 13 02 F6 | 	mov	arg01, _var01
18a1c     18 12 06 F1 | 	add	arg01, #24
18a20                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18a20                 | ' long[base2+28]:=$40000000
18a20     18 14 62 FD | 	getqx	arg02
18a24     0A 15 82 F6 | 	negc	arg02, arg02
18a28     09 15 52 FC | 	wrword	arg02, arg01
18a2c     00 15 02 F6 | 	mov	arg02, _var01
18a30     1A 14 06 F1 | 	add	arg02, #26
18a34     0A 01 5A FC | 	wrword	#256, arg02
18a38     1C 00 06 F1 | 	add	_var01, #28
18a3c     00 00 A0 FF 
18a40     00 01 68 FC | 	wrlong	##1073741824, _var01
18a44                 | _Audio093b_8_sc_spin2_play_ret
18a44     2D 00 64 FD | 	ret
18a48                 | 
18a48                 | ' until (i >>8) >=len
18a48                 | ' 
18a48                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
18a48                 | _Audio093b_8_sc_spin2_play8
18a48                 | ' 
18a48                 | ' base2:=@channel1[0]+64*channel
18a48     0C E4 05 F1 | 	add	objptr, #12
18a4c     F2 00 02 F6 | 	mov	_var01, objptr
18a50     06 12 66 F0 | 	shl	arg01, #6
18a54     09 01 02 F1 | 	add	_var01, arg01
18a58                 | ' long[base2]:=0
18a58     00 01 68 FC | 	wrlong	#0, _var01
18a5c                 | ' long[base2+8]:=sample+$40000000 
18a5c     00 00 20 FF 
18a60     00 14 06 F1 | 	add	arg02, ##1073741824
18a64     00 13 02 F6 | 	mov	arg01, _var01
18a68     08 12 06 F1 | 	add	arg01, #8
18a6c     09 15 62 FC | 	wrlong	arg02, arg01
18a70                 | ' if loop>=0
18a70     00 1C 56 F2 | 	cmps	arg06, #0 wc
18a74     0C E4 85 F1 | 	sub	objptr, #12
18a78     1C 00 90 CD |  if_b	jmp	#LR__2000
18a7c                 | '   long[base2+12]:=loop
18a7c     00 15 02 F6 | 	mov	arg02, _var01
18a80     0C 14 06 F1 | 	add	arg02, #12
18a84     0A 1D 62 FC | 	wrlong	arg06, arg02
18a88                 | '   long[base2+16]:= len
18a88     00 1D 02 F6 | 	mov	arg06, _var01
18a8c     10 1C 06 F1 | 	add	arg06, #16
18a90     0E 1B 62 FC | 	wrlong	arg05, arg06
18a94     1C 00 90 FD | 	jmp	#LR__2001
18a98                 | LR__2000
18a98                 | ' else
18a98                 | '   long[base2+12]:= len
18a98     00 1D 02 F6 | 	mov	arg06, _var01
18a9c     0C 1C 06 F1 | 	add	arg06, #12
18aa0     0E 1B 62 FC | 	wrlong	arg05, arg06
18aa4                 | '   long[base2+16]:= len+1
18aa4     01 1A 06 F1 | 	add	arg05, #1
18aa8     00 13 02 F6 | 	mov	arg01, _var01
18aac     10 12 06 F1 | 	add	arg01, #16
18ab0     09 1B 62 FC | 	wrlong	arg05, arg01
18ab4                 | LR__2001
18ab4     0B 17 52 F6 | 	abs	arg03, arg03 wc
18ab8     0F 1B 80 FF 
18abc     0B 3F 1A FD | 	qdiv	##3546911, arg03
18ac0                 | ' word[base2+20]:=vol
18ac0     00 17 02 F6 | 	mov	arg03, _var01
18ac4     14 16 06 F1 | 	add	arg03, #20
18ac8     0B 19 52 FC | 	wrword	arg04, arg03
18acc                 | ' word[base2+24]:= 3546911/splfreq 
18acc     00 13 02 F6 | 	mov	arg01, _var01
18ad0     18 12 06 F1 | 	add	arg01, #24
18ad4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18ad4                 | ' long[base2+28]:=$40000000
18ad4     18 18 62 FD | 	getqx	arg04
18ad8     0C 19 82 F6 | 	negc	arg04, arg04
18adc     09 19 52 FC | 	wrword	arg04, arg01
18ae0     00 19 02 F6 | 	mov	arg04, _var01
18ae4     1A 18 06 F1 | 	add	arg04, #26
18ae8     0C 01 5A FC | 	wrword	#256, arg04
18aec     1C 00 06 F1 | 	add	_var01, #28
18af0     00 00 A0 FF 
18af4     00 01 68 FC | 	wrlong	##1073741824, _var01
18af8                 | _Audio093b_8_sc_spin2_play8_ret
18af8     2D 00 64 FD | 	ret
18afc                 | 
18afc                 | ' 
18afc                 | '     
18afc                 | ' pub stop(channel) 'silence it
18afc                 | _Audio093b_8_sc_spin2_stop
18afc                 | ' 
18afc                 | ' word[@channel1[0]+64*channel+20]:=0
18afc     0C E4 05 F1 | 	add	objptr, #12
18b00     F2 00 02 F6 | 	mov	_var01, objptr
18b04     06 12 66 F0 | 	shl	arg01, #6
18b08     09 01 02 F1 | 	add	_var01, arg01
18b0c     14 00 06 F1 | 	add	_var01, #20
18b10     00 01 58 FC | 	wrword	#0, _var01
18b14     0C E4 85 F1 | 	sub	objptr, #12
18b18                 | _Audio093b_8_sc_spin2_stop_ret
18b18     2D 00 64 FD | 	ret
18b1c                 | hubexit
18b1c     81 00 80 FD | 	jmp	#cogexit
18b20                 | 
18b20                 | __system___setbaud
18b20     14 62 06 FB | 	rdlong	muldiva_, #20
18b24     09 65 02 F6 | 	mov	muldivb_, arg01
18b28     BA 00 A0 FD | 	call	#divide_
18b2c     97 06 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
18b30                 | LR__2010
18b30     3E FA 9D FA | 	rdpin	result1, #62 wc
18b34     FE FC A1 F1 | 	subx	result2, result2
18b38     F4 FF 9F CD |  if_b	jmp	#LR__2010
18b3c                 | LR__2011
18b3c     40 7C 64 FD | 	dirl	#62
18b40     40 7E 64 FD | 	dirl	#63
18b44     F4 64 62 FC | 	wrlong	muldivb_, ptr___system__dat__
18b48     10 64 66 F0 | 	shl	muldivb_, #16
18b4c     07 14 06 F6 | 	mov	arg02, #7
18b50     32 15 02 F1 | 	add	arg02, muldivb_
18b54     3E F8 0C FC | 	wrpin	#124, #62
18b58     3E 14 16 FC | 	wxpin	arg02, #62
18b5c     3F 7C 0C FC | 	wrpin	#62, #63
18b60     14 14 06 F1 | 	add	arg02, #20
18b64     3F 14 16 FC | 	wxpin	arg02, #63
18b68     41 7C 64 FD | 	dirh	#62
18b6c     41 7E 64 FD | 	dirh	#63
18b70                 | __system___setbaud_ret
18b70     2D 00 64 FD | 	ret
18b74                 | 
18b74                 | __system___txraw
18b74     01 4A 05 F6 | 	mov	COUNT_, #1
18b78     A8 00 A0 FD | 	call	#pushregs_
18b7c     09 1F 02 F6 | 	mov	local01, arg01
18b80     97 06 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
18b84                 | LR__2020
18b84     3E FA 9D FA | 	rdpin	result1, #62 wc
18b88     FE FC A1 F1 | 	subx	result2, result2
18b8c     F4 FF 9F CD |  if_b	jmp	#LR__2020
18b90                 | LR__2021
18b90     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
18b94     C2 01 00 AF 
18b98     00 12 06 A6 |  if_e	mov	arg01, ##230400
18b9c     80 FF BF AD |  if_e	call	#__system___setbaud
18ba0     58 7C 64 FD | 	drvl	#62
18ba4     3E 1E 26 FC | 	wypin	local01, #62
18ba8     01 FA 05 F6 | 	mov	result1, #1
18bac     A7 F0 03 F6 | 	mov	ptra, fp
18bb0     B2 00 A0 FD | 	call	#popregs_
18bb4                 | __system___txraw_ret
18bb4     2D 00 64 FD | 	ret
18bb8                 | 
18bb8                 | __system___rxraw
18bb8     0D 4A 05 F6 | 	mov	COUNT_, #13
18bbc     A8 00 A0 FD | 	call	#pushregs_
18bc0     09 1F 02 F6 | 	mov	local01, arg01
18bc4     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
18bc8     C2 01 00 AF 
18bcc     00 12 06 A6 |  if_e	mov	arg01, ##230400
18bd0     4C FF BF AD |  if_e	call	#__system___setbaud
18bd4     00 1E 0E F2 | 	cmp	local01, #0 wz
18bd8     20 00 90 AD |  if_e	jmp	#LR__2030
18bdc     14 22 06 FB | 	rdlong	local03, #20
18be0     0A 22 46 F0 | 	shr	local03, #10
18be4     11 1F 02 FD | 	qmul	local01, local03
18be8     1A FA 61 FD | 	getct	result1
18bec     18 24 62 FD | 	getqx	local04
18bf0     12 FB 01 F1 | 	add	result1, local04
18bf4     FD 26 02 F6 | 	mov	local05, result1
18bf8     04 00 90 FD | 	jmp	#LR__2031
18bfc                 | LR__2030
18bfc     00 26 06 F6 | 	mov	local05, #0
18c00                 | LR__2031
18c00     01 28 66 F6 | 	neg	local06, #1
18c04     3F 2A 06 F6 | 	mov	local07, #63
18c08     00 2C 06 F6 | 	mov	local08, #0
18c0c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18c10     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
18c14     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18c18                 | LR__2032
18c18     08 2E 16 F4 | 	testb	local09, #8 wc
18c1c     09 2E 76 F4 | 	testbn	local09, #9 andc
18c20     0A 2E 46 F0 | 	shr	local09, #10
18c24     01 2C 06 C6 |  if_b	mov	local08, #1
18c28     40 7E 6C 3D |  if_ae	testp	#63 wz
18c2c     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
18c30     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
18c34     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
18c38                 | LR__2033
18c38     00 20 06 F6 | 	mov	local02, #0
18c3c     00 2C 0E F2 | 	cmp	local08, #0 wz
18c40     01 20 66 56 |  if_ne	neg	local02, #1
18c44     00 30 06 F6 | 	mov	local10, #0
18c48     00 22 06 F6 | 	mov	local03, #0
18c4c     00 1E 0E F2 | 	cmp	local01, #0 wz
18c50     01 22 66 56 |  if_ne	neg	local03, #1
18c54     00 24 06 F6 | 	mov	local04, #0
18c58     00 32 06 F6 | 	mov	local11, #0
18c5c     1A FA 61 FD | 	getct	result1
18c60     FD 34 02 F6 | 	mov	local12, result1
18c64     1A 37 02 F6 | 	mov	local13, local12
18c68     13 37 82 F1 | 	sub	local13, local05
18c6c     00 36 56 F2 | 	cmps	local13, #0 wc
18c70     00 32 26 C6 |  if_b	not	local11, #0
18c74     00 32 0E F2 | 	cmp	local11, #0 wz
18c78     00 24 26 56 |  if_ne	not	local04, #0
18c7c     12 23 CA F7 | 	test	local03, local04 wz
18c80     00 30 26 56 |  if_ne	not	local10, #0
18c84     18 21 4A F5 | 	or	local02, local10 wz
18c88     8C FF 9F AD |  if_e	jmp	#LR__2032
18c8c     00 2C 0E F2 | 	cmp	local08, #0 wz
18c90     17 29 02 56 |  if_ne	mov	local06, local09
18c94     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
18c98     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18c9c     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
18ca0     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18ca4     14 FB 01 F6 | 	mov	result1, local06
18ca8     A7 F0 03 F6 | 	mov	ptra, fp
18cac     B2 00 A0 FD | 	call	#popregs_
18cb0                 | __system___rxraw_ret
18cb0     2D 00 64 FD | 	ret
18cb4                 | 
18cb4                 | __system___getus
18cb4     1A FC 71 FD | 	getct	result2 wc
18cb8     1A 00 62 FD | 	getct	_var01
18cbc     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18cc0     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
18cc4     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18cc8     20 00 90 5D |  if_ne	jmp	#LR__2040
18ccc     14 02 06 FB | 	rdlong	_var02, #20
18cd0     A1 07 00 FF 
18cd4     40 02 16 FD | 	qdiv	_var02, ##1000000
18cd8     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18cdc     18 FA 61 FD | 	getqx	result1
18ce0     FD 02 02 F6 | 	mov	_var02, result1
18ce4     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
18ce8     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18cec                 | LR__2040
18cec     01 FD 11 FD | 	qdiv	result2, _var02
18cf0     19 FC 61 FD | 	getqy	result2
18cf4     28 FC 61 FD | 	setq	result2
18cf8     01 01 12 FD | 	qdiv	_var01, _var02
18cfc     18 FA 61 FD | 	getqx	result1
18d00                 | __system___getus_ret
18d00     2D 00 64 FD | 	ret
18d04                 | 
18d04                 | __system____builtin_memmove
18d04     09 01 02 F6 | 	mov	_var01, arg01
18d08     0A 13 52 F2 | 	cmps	arg01, arg02 wc
18d0c     10 00 90 CD |  if_b	jmp	#LR__2050
18d10     0A 03 02 F6 | 	mov	_var02, arg02
18d14     0B 03 02 F1 | 	add	_var02, arg03
18d18     01 13 52 F2 | 	cmps	arg01, _var02 wc
18d1c     48 00 90 CD |  if_b	jmp	#LR__2056
18d20                 | LR__2050
18d20     0B 05 02 F6 | 	mov	_var03, arg03
18d24     02 04 4E F0 | 	shr	_var03, #2 wz
18d28     18 00 90 AD |  if_e	jmp	#LR__2055
18d2c     97 0A 48 FB | 	callpa	#(@LR__2053-@LR__2051)>>2,fcache_load_ptr_
18d30                 | LR__2051
18d30     02 09 D8 FC | 	rep	@LR__2054, _var03
18d34                 | LR__2052
18d34     0A 05 02 FB | 	rdlong	_var03, arg02
18d38     09 05 62 FC | 	wrlong	_var03, arg01
18d3c     04 12 06 F1 | 	add	arg01, #4
18d40     04 14 06 F1 | 	add	arg02, #4
18d44                 | LR__2053
18d44                 | LR__2054
18d44                 | LR__2055
18d44     02 16 CE F7 | 	test	arg03, #2 wz
18d48     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
18d4c     09 03 52 5C |  if_ne	wrword	_var02, arg01
18d50     02 12 06 51 |  if_ne	add	arg01, #2
18d54     02 14 06 51 |  if_ne	add	arg02, #2
18d58     01 16 CE F7 | 	test	arg03, #1 wz
18d5c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
18d60     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
18d64     28 00 90 FD | 	jmp	#LR__2062
18d68                 | LR__2056
18d68     0B 13 02 F1 | 	add	arg01, arg03
18d6c     0B 15 02 F1 | 	add	arg02, arg03
18d70     0B 07 0A F6 | 	mov	_var04, arg03 wz
18d74     18 00 90 AD |  if_e	jmp	#LR__2061
18d78     97 0A 48 FB | 	callpa	#(@LR__2059-@LR__2057)>>2,fcache_load_ptr_
18d7c                 | LR__2057
18d7c     03 09 D8 FC | 	rep	@LR__2060, _var04
18d80                 | LR__2058
18d80     01 12 86 F1 | 	sub	arg01, #1
18d84     01 14 86 F1 | 	sub	arg02, #1
18d88     0A 03 C2 FA | 	rdbyte	_var02, arg02
18d8c     09 03 42 FC | 	wrbyte	_var02, arg01
18d90                 | LR__2059
18d90                 | LR__2060
18d90                 | LR__2061
18d90                 | LR__2062
18d90     00 FB 01 F6 | 	mov	result1, _var01
18d94                 | __system____builtin_memmove_ret
18d94     2D 00 64 FD | 	ret
18d98                 | 
18d98                 | __system____builtin_strcpy
18d98     09 01 02 F6 | 	mov	_var01, arg01
18d9c     97 0A 48 FB | 	callpa	#(@LR__2071-@LR__2070)>>2,fcache_load_ptr_
18da0                 | LR__2070
18da0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
18da4     09 FB 41 FC | 	wrbyte	result1, arg01
18da8     01 14 06 F1 | 	add	arg02, #1
18dac     01 12 06 F1 | 	add	arg01, #1
18db0     EC FF 9F 5D |  if_ne	jmp	#LR__2070
18db4                 | LR__2071
18db4     00 FB 01 F6 | 	mov	result1, _var01
18db8                 | __system____builtin_strcpy_ret
18db8     2D 00 64 FD | 	ret
18dbc                 | 
18dbc                 | __system____topofstack
18dbc     00 4A 05 F6 | 	mov	COUNT_, #0
18dc0     A8 00 A0 FD | 	call	#pushregs_
18dc4     08 F0 07 F1 | 	add	ptra, #8
18dc8     04 4E 05 F1 | 	add	fp, #4
18dcc     A7 12 62 FC | 	wrlong	arg01, fp
18dd0     A7 FA 01 F6 | 	mov	result1, fp
18dd4     04 4E 85 F1 | 	sub	fp, #4
18dd8     A7 F0 03 F6 | 	mov	ptra, fp
18ddc     B2 00 A0 FD | 	call	#popregs_
18de0                 | __system____topofstack_ret
18de0     2D 00 64 FD | 	ret
18de4                 | 
18de4                 | __system___lockmem
18de4     00 FA 05 F6 | 	mov	result1, #0
18de8     01 FA 61 FD | 	cogid	result1
18dec     00 FB 05 F1 | 	add	result1, #256
18df0                 | LR__2080
18df0     09 01 0A FB | 	rdlong	_var01, arg01 wz
18df4     09 FB 61 AC |  if_e	wrlong	result1, arg01
18df8     09 01 02 AB |  if_e	rdlong	_var01, arg01
18dfc     09 01 02 AB |  if_e	rdlong	_var01, arg01
18e00     FD 00 0A F2 | 	cmp	_var01, result1 wz
18e04     E8 FF 9F 5D |  if_ne	jmp	#LR__2080
18e08                 | __system___lockmem_ret
18e08     2D 00 64 FD | 	ret
18e0c                 | 
18e0c                 | __system___string_cmp
18e0c     97 14 48 FB | 	callpa	#(@LR__2091-@LR__2090)>>2,fcache_load_ptr_
18e10                 | LR__2090
18e10     09 01 C2 FA | 	rdbyte	_var01, arg01
18e14     0A 03 C2 FA | 	rdbyte	_var02, arg02
18e18     00 05 02 F6 | 	mov	_var03, _var01
18e1c     01 05 8A F1 | 	sub	_var03, _var02 wz
18e20     01 12 06 F1 | 	add	arg01, #1
18e24     01 14 06 F1 | 	add	arg02, #1
18e28     0C 00 90 5D |  if_ne	jmp	#LR__2092
18e2c     00 00 0E F2 | 	cmp	_var01, #0 wz
18e30     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
18e34     D8 FF 9F 5D |  if_ne	jmp	#LR__2090
18e38                 | LR__2091
18e38                 | LR__2092
18e38     02 FB 01 F6 | 	mov	result1, _var03
18e3c                 | __system___string_cmp_ret
18e3c     2D 00 64 FD | 	ret
18e40                 | 
18e40                 | __system___string_concat
18e40     05 4A 05 F6 | 	mov	COUNT_, #5
18e44     A8 00 A0 FD | 	call	#pushregs_
18e48     09 1F 02 F6 | 	mov	local01, arg01
18e4c     0A 21 02 F6 | 	mov	local02, arg02
18e50     0F 13 02 F6 | 	mov	arg01, local01
18e54     09 23 02 F6 | 	mov	local03, arg01
18e58     97 06 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
18e5c                 | LR__2100
18e5c     11 FB C9 FA | 	rdbyte	result1, local03 wz
18e60     01 22 06 51 |  if_ne	add	local03, #1
18e64     F4 FF 9F 5D |  if_ne	jmp	#LR__2100
18e68                 | LR__2101
18e68     09 23 82 F1 | 	sub	local03, arg01
18e6c     11 25 02 F6 | 	mov	local04, local03
18e70     10 13 02 F6 | 	mov	arg01, local02
18e74     09 23 02 F6 | 	mov	local03, arg01
18e78     97 06 48 FB | 	callpa	#(@LR__2103-@LR__2102)>>2,fcache_load_ptr_
18e7c                 | LR__2102
18e7c     11 FB C9 FA | 	rdbyte	result1, local03 wz
18e80     01 22 06 51 |  if_ne	add	local03, #1
18e84     F4 FF 9F 5D |  if_ne	jmp	#LR__2102
18e88                 | LR__2103
18e88     09 23 82 F1 | 	sub	local03, arg01
18e8c     12 13 02 F6 | 	mov	arg01, local04
18e90     11 13 02 F1 | 	add	arg01, local03
18e94     01 12 06 F1 | 	add	arg01, #1
18e98     00 3D B0 FD | 	call	#__system___gc_alloc_managed
18e9c     FD 26 0A F6 | 	mov	local05, result1 wz
18ea0     28 00 90 AD |  if_e	jmp	#LR__2104
18ea4     13 13 02 F6 | 	mov	arg01, local05
18ea8     0F 15 02 F6 | 	mov	arg02, local01
18eac     12 17 02 F6 | 	mov	arg03, local04
18eb0     50 FE BF FD | 	call	#__system____builtin_memmove
18eb4     13 13 02 F6 | 	mov	arg01, local05
18eb8     12 13 02 F1 | 	add	arg01, local04
18ebc     01 22 06 F1 | 	add	local03, #1
18ec0     10 15 02 F6 | 	mov	arg02, local02
18ec4     11 17 02 F6 | 	mov	arg03, local03
18ec8     38 FE BF FD | 	call	#__system____builtin_memmove
18ecc                 | LR__2104
18ecc     13 FB 01 F6 | 	mov	result1, local05
18ed0     A7 F0 03 F6 | 	mov	ptra, fp
18ed4     B2 00 A0 FD | 	call	#popregs_
18ed8                 | __system___string_concat_ret
18ed8     2D 00 64 FD | 	ret
18edc                 | 
18edc                 | __system___tx
18edc     02 4A 05 F6 | 	mov	COUNT_, #2
18ee0     A8 00 A0 FD | 	call	#pushregs_
18ee4     09 1F 02 F6 | 	mov	local01, arg01
18ee8     0A 1E 0E F2 | 	cmp	local01, #10 wz
18eec     18 00 90 5D |  if_ne	jmp	#LR__2110
18ef0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18ef4     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
18ef8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18efc     02 20 CE F7 | 	test	local02, #2 wz
18f00     0D 12 06 56 |  if_ne	mov	arg01, #13
18f04     6C FC BF 5D |  if_ne	call	#__system___txraw
18f08                 | LR__2110
18f08     0F 13 02 F6 | 	mov	arg01, local01
18f0c     64 FC BF FD | 	call	#__system___txraw
18f10     A7 F0 03 F6 | 	mov	ptra, fp
18f14     B2 00 A0 FD | 	call	#popregs_
18f18                 | __system___tx_ret
18f18     2D 00 64 FD | 	ret
18f1c                 | 
18f1c                 | __system___rx
18f1c     01 4A 05 F6 | 	mov	COUNT_, #1
18f20     A8 00 A0 FD | 	call	#pushregs_
18f24                 | LR__2120
18f24     00 12 06 F6 | 	mov	arg01, #0
18f28     8C FC BF FD | 	call	#__system___rxraw
18f2c     FD 1E 02 F6 | 	mov	local01, result1
18f30     FF FF 7F FF 
18f34     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
18f38     E8 FF 9F AD |  if_e	jmp	#LR__2120
18f3c     0D 1E 0E F2 | 	cmp	local01, #13 wz
18f40     14 00 90 5D |  if_ne	jmp	#LR__2121
18f44     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18f48     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18f4c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18f50     02 FA CD F7 | 	test	result1, #2 wz
18f54     0A 1E 06 56 |  if_ne	mov	local01, #10
18f58                 | LR__2121
18f58     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18f5c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
18f60     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18f64     01 12 CE F7 | 	test	arg01, #1 wz
18f68     1C 00 90 AD |  if_e	jmp	#LR__2124
18f6c     7F 1E 0E F2 | 	cmp	local01, #127 wz
18f70     0C 00 90 5D |  if_ne	jmp	#LR__2122
18f74     08 12 06 F6 | 	mov	arg01, #8
18f78     60 FF BF FD | 	call	#__system___tx
18f7c     08 00 90 FD | 	jmp	#LR__2123
18f80                 | LR__2122
18f80     0F 13 02 F6 | 	mov	arg01, local01
18f84     54 FF BF FD | 	call	#__system___tx
18f88                 | LR__2123
18f88                 | LR__2124
18f88     0F FB 01 F6 | 	mov	result1, local01
18f8c     A7 F0 03 F6 | 	mov	ptra, fp
18f90     B2 00 A0 FD | 	call	#popregs_
18f94                 | __system___rx_ret
18f94     2D 00 64 FD | 	ret
18f98                 | 
18f98                 | __system___pinwrite
18f98     09 01 02 F6 | 	mov	_var01, arg01
18f9c     1F 00 06 F5 | 	and	_var01, #31
18fa0     20 12 CE F7 | 	test	arg01, #32 wz
18fa4     06 12 46 F0 | 	shr	arg01, #6
18fa8     09 13 CA F9 | 	bmask	arg01, arg01
18fac     00 13 62 F0 | 	shl	arg01, _var01
18fb0     00 15 62 F0 | 	shl	arg02, _var01
18fb4     1C 00 90 AD |  if_e	jmp	#LR__2130
18fb8     09 F7 43 F5 | 	or	dirb, arg01
18fbc     FD 01 02 F6 | 	mov	_var01, outb
18fc0     09 01 22 F5 | 	andn	_var01, arg01
18fc4     09 15 02 F5 | 	and	arg02, arg01
18fc8     0A 01 42 F5 | 	or	_var01, arg02
18fcc     00 FB 03 F6 | 	mov	outb, _var01
18fd0     18 00 90 FD | 	jmp	#LR__2131
18fd4                 | LR__2130
18fd4     09 F5 43 F5 | 	or	dira, arg01
18fd8     FC 01 02 F6 | 	mov	_var01, outa
18fdc     09 01 22 F5 | 	andn	_var01, arg01
18fe0     09 15 02 F5 | 	and	arg02, arg01
18fe4     0A 01 42 F5 | 	or	_var01, arg02
18fe8     00 F9 03 F6 | 	mov	outa, _var01
18fec                 | LR__2131
18fec                 | __system___pinwrite_ret
18fec     2D 00 64 FD | 	ret
18ff0                 | 
18ff0                 | __system___basic_read_line
18ff0     06 4A 05 F6 | 	mov	COUNT_, #6
18ff4     A8 00 A0 FD | 	call	#pushregs_
18ff8     09 1F 02 F6 | 	mov	local01, arg01
18ffc     00 20 06 F6 | 	mov	local02, #0
19000     18 22 06 F6 | 	mov	local03, #24
19004     00 24 06 F6 | 	mov	local04, #0
19008     18 12 06 F6 | 	mov	arg01, #24
1900c     8C 3B B0 FD | 	call	#__system___gc_alloc_managed
19010     FD 26 0A F6 | 	mov	local05, result1 wz
19014     13 FB 01 A6 |  if_e	mov	result1, local05
19018     B0 00 90 AD |  if_e	jmp	#LR__2143
1901c                 | LR__2140
1901c     0F 13 02 F6 | 	mov	arg01, local01
19020     78 0B B0 FD | 	call	#__system___basic_get_char
19024     FD 28 02 F6 | 	mov	local06, result1
19028     01 28 56 F2 | 	cmps	local06, #1 wc
1902c     8C 00 90 CD |  if_b	jmp	#LR__2142
19030     0A 28 0E F2 | 	cmp	local06, #10 wz
19034     10 00 90 5D |  if_ne	jmp	#LR__2141
19038     00 24 0E F2 | 	cmp	local04, #0 wz
1903c     01 20 56 52 |  if_ne	cmps	local02, #1 wc
19040     01 20 86 11 |  if_a	sub	local02, #1
19044     74 00 90 FD | 	jmp	#LR__2142
19048                 | LR__2141
19048     0D 28 0E F2 | 	cmp	local06, #13 wz
1904c     01 24 06 A6 |  if_e	mov	local04, #1
19050     00 24 06 56 |  if_ne	mov	local04, #0
19054     08 28 0E F2 | 	cmp	local06, #8 wz
19058     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1905c     01 20 56 A2 |  if_e	cmps	local02, #1 wc
19060     01 20 86 21 |  if_nc_and_z	sub	local02, #1
19064     B4 FF 9F AD |  if_e	jmp	#LR__2140
19068     13 17 02 F6 | 	mov	arg03, local05
1906c     10 17 02 F1 | 	add	arg03, local02
19070     0B 29 42 FC | 	wrbyte	local06, arg03
19074     01 20 06 F1 | 	add	local02, #1
19078     11 21 0A F2 | 	cmp	local02, local03 wz
1907c     9C FF 9F 5D |  if_ne	jmp	#LR__2140
19080     11 13 02 F6 | 	mov	arg01, local03
19084     20 12 06 F1 | 	add	arg01, #32
19088     10 3B B0 FD | 	call	#__system___gc_alloc_managed
1908c     FD 28 0A F6 | 	mov	local06, result1 wz
19090     14 FB 01 A6 |  if_e	mov	result1, local06
19094     34 00 90 AD |  if_e	jmp	#LR__2143
19098     14 13 02 F6 | 	mov	arg01, local06
1909c     13 15 02 F6 | 	mov	arg02, local05
190a0     11 17 02 F6 | 	mov	arg03, local03
190a4     5C FC BF FD | 	call	#__system____builtin_memmove
190a8     20 22 06 F1 | 	add	local03, #32
190ac     13 13 02 F6 | 	mov	arg01, local05
190b0     24 3C B0 FD | 	call	#__system___gc_free
190b4     14 27 02 F6 | 	mov	local05, local06
190b8     60 FF 9F FD | 	jmp	#LR__2140
190bc                 | LR__2142
190bc     13 29 02 F6 | 	mov	local06, local05
190c0     10 29 02 F1 | 	add	local06, local02
190c4     14 01 48 FC | 	wrbyte	#0, local06
190c8     13 FB 01 F6 | 	mov	result1, local05
190cc                 | LR__2143
190cc     A7 F0 03 F6 | 	mov	ptra, fp
190d0     B2 00 A0 FD | 	call	#popregs_
190d4                 | __system___basic_read_line_ret
190d4     2D 00 64 FD | 	ret
190d8                 | 
190d8                 | __system___waitms
190d8     09 01 02 F6 | 	mov	_var01, arg01
190dc     1A 02 62 FD | 	getct	_var02
190e0     14 04 06 FB | 	rdlong	_var03, #20
190e4     97 14 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
190e8                 | LR__2150
190e8     01 00 00 FF 
190ec     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
190f0     1C 00 90 CD |  if_b	jmp	#LR__2152
190f4     02 03 02 F1 | 	add	_var02, _var03
190f8     01 13 02 F6 | 	mov	arg01, _var02
190fc     00 12 66 FA | 	addct1	arg01, #0
19100     24 22 60 FD | 	waitct1
19104     01 00 00 FF 
19108     E8 01 86 F1 | 	sub	_var01, ##1000
1910c     D8 FF 9F FD | 	jmp	#LR__2150
19110                 | LR__2151
19110                 | LR__2152
19110     01 00 56 F2 | 	cmps	_var01, #1 wc
19114     28 00 90 CD |  if_b	jmp	#LR__2153
19118     02 01 02 FD | 	qmul	_var01, _var03
1911c     01 00 00 FF 
19120     E8 17 06 F6 | 	mov	arg03, ##1000
19124     19 FA 61 FD | 	getqy	result1
19128     18 12 62 FD | 	getqx	arg01
1912c     28 FA 61 FD | 	setq	result1
19130     0B 13 12 FD | 	qdiv	arg01, arg03
19134     18 12 62 FD | 	getqx	arg01
19138     01 13 62 FA | 	addct1	arg01, _var02
1913c     24 22 60 FD | 	waitct1
19140                 | LR__2153
19140                 | __system___waitms_ret
19140     2D 00 64 FD | 	ret
19144                 | 
19144                 | __system___waitus
19144     09 01 02 F6 | 	mov	_var01, arg01
19148     1A 02 62 FD | 	getct	_var02
1914c     14 04 06 FB | 	rdlong	_var03, #20
19150     97 14 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
19154                 | LR__2160
19154     A1 07 00 FF 
19158     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1915c     1C 00 90 CD |  if_b	jmp	#LR__2162
19160     02 03 02 F1 | 	add	_var02, _var03
19164     01 13 02 F6 | 	mov	arg01, _var02
19168     00 12 66 FA | 	addct1	arg01, #0
1916c     24 22 60 FD | 	waitct1
19170     A1 07 00 FF 
19174     40 00 86 F1 | 	sub	_var01, ##1000000
19178     D8 FF 9F FD | 	jmp	#LR__2160
1917c                 | LR__2161
1917c                 | LR__2162
1917c     01 00 56 F2 | 	cmps	_var01, #1 wc
19180     28 00 90 CD |  if_b	jmp	#LR__2163
19184     02 01 02 FD | 	qmul	_var01, _var03
19188     A1 07 00 FF 
1918c     40 16 06 F6 | 	mov	arg03, ##1000000
19190     19 FA 61 FD | 	getqy	result1
19194     18 12 62 FD | 	getqx	arg01
19198     28 FA 61 FD | 	setq	result1
1919c     0B 13 12 FD | 	qdiv	arg01, arg03
191a0     18 FA 61 FD | 	getqx	result1
191a4     FD 02 62 FA | 	addct1	_var02, result1
191a8     24 22 60 FD | 	waitct1
191ac                 | LR__2163
191ac                 | __system___waitus_ret
191ac     2D 00 64 FD | 	ret
191b0                 | 
191b0                 | __system___mount
191b0     0B 4A 05 F6 | 	mov	COUNT_, #11
191b4     A8 00 A0 FD | 	call	#pushregs_
191b8     09 1F 02 F6 | 	mov	local01, arg01
191bc     0A 21 0A F6 | 	mov	local02, arg02 wz
191c0     01 22 66 F6 | 	neg	local03, #1
191c4     01 FA 65 A6 |  if_e	neg	result1, #1
191c8     98 02 90 AD |  if_e	jmp	#LR__2185
191cc     0F FB C1 FA | 	rdbyte	result1, local01
191d0     2F FA 0D F2 | 	cmp	result1, #47 wz
191d4     28 00 90 5D |  if_ne	jmp	#LR__2172
191d8     0F 13 02 F6 | 	mov	arg01, local01
191dc     09 25 02 F6 | 	mov	local04, arg01
191e0     97 06 48 FB | 	callpa	#(@LR__2171-@LR__2170)>>2,fcache_load_ptr_
191e4                 | LR__2170
191e4     12 FB C9 FA | 	rdbyte	result1, local04 wz
191e8     01 24 06 51 |  if_ne	add	local04, #1
191ec     F4 FF 9F 5D |  if_ne	jmp	#LR__2170
191f0                 | LR__2171
191f0     09 25 82 F1 | 	sub	local04, arg01
191f4     12 FB 01 F6 | 	mov	result1, local04
191f8     10 FA 55 F2 | 	cmps	result1, #16 wc
191fc     14 00 90 CD |  if_b	jmp	#LR__2173
19200                 | LR__2172
19200     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19204     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
19208     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1920c     01 FA 65 F6 | 	neg	result1, #1
19210     50 02 90 FD | 	jmp	#LR__2185
19214                 | LR__2173
19214     00 26 06 F6 | 	mov	local05, #0
19218                 | LR__2174
19218     04 26 56 F2 | 	cmps	local05, #4 wc
1921c     B0 00 90 3D |  if_ae	jmp	#LR__2179
19220     13 13 02 F6 | 	mov	arg01, local05
19224     02 12 66 F0 | 	shl	arg01, #2
19228     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1922c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19230     09 FB 09 FB | 	rdlong	result1, arg01 wz
19234     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19238     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1923c     13 23 02 86 |  if_c_and_z	mov	local03, local05
19240     84 00 90 8D |  if_c_and_z	jmp	#LR__2178
19244     13 13 02 F6 | 	mov	arg01, local05
19248     02 12 66 F0 | 	shl	arg01, #2
1924c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19250     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19254     09 13 02 FB | 	rdlong	arg01, arg01
19258     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1925c     09 25 02 F6 | 	mov	local04, arg01
19260     97 06 48 FB | 	callpa	#(@LR__2176-@LR__2175)>>2,fcache_load_ptr_
19264                 | LR__2175
19264     12 FB C9 FA | 	rdbyte	result1, local04 wz
19268     01 24 06 51 |  if_ne	add	local04, #1
1926c     F4 FF 9F 5D |  if_ne	jmp	#LR__2175
19270                 | LR__2176
19270     09 25 82 F1 | 	sub	local04, arg01
19274     12 29 02 F6 | 	mov	local06, local04
19278     14 13 02 F6 | 	mov	arg01, local06
1927c     0F 13 02 F1 | 	add	arg01, local01
19280     09 FB C1 FA | 	rdbyte	result1, arg01
19284     2F FA 0D F2 | 	cmp	result1, #47 wz
19288     14 2B 02 56 |  if_ne	mov	local07, local06
1928c     0F 2B 02 51 |  if_ne	add	local07, local01
19290     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
19294     30 00 90 5D |  if_ne	jmp	#LR__2177
19298     13 17 02 F6 | 	mov	arg03, local05
1929c     02 16 66 F0 | 	shl	arg03, #2
192a0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
192a4     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
192a8     0B 15 02 FB | 	rdlong	arg02, arg03
192ac     0F 13 02 F6 | 	mov	arg01, local01
192b0     14 17 02 F6 | 	mov	arg03, local06
192b4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
192b8     24 4D B0 FD | 	call	#__system__strncmp
192bc     00 FA 0D F2 | 	cmp	result1, #0 wz
192c0     13 23 02 A6 |  if_e	mov	local03, local05
192c4     08 00 90 AD |  if_e	jmp	#LR__2179
192c8                 | LR__2177
192c8                 | LR__2178
192c8     01 26 06 F1 | 	add	local05, #1
192cc     48 FF 9F FD | 	jmp	#LR__2174
192d0                 | LR__2179
192d0     FF FF 7F FF 
192d4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
192d8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
192dc     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
192e0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
192e4     01 FA 65 A6 |  if_e	neg	result1, #1
192e8     78 01 90 AD |  if_e	jmp	#LR__2185
192ec     11 27 02 F6 | 	mov	local05, local03
192f0     13 2B 02 F6 | 	mov	local07, local05
192f4     02 2A 66 F0 | 	shl	local07, #2
192f8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
192fc     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
19300     15 29 0A FB | 	rdlong	local06, local07 wz
19304     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19308     58 00 90 AD |  if_e	jmp	#LR__2180
1930c     4C 28 06 F1 | 	add	local06, #76
19310     14 2B 0A FB | 	rdlong	local07, local06 wz
19314     4C 28 86 F1 | 	sub	local06, #76
19318     48 00 90 AD |  if_e	jmp	#LR__2180
1931c     4C 28 06 F1 | 	add	local06, #76
19320     14 2B 02 FB | 	rdlong	local07, local06
19324     15 23 02 F6 | 	mov	local03, local07
19328     13 2A 46 F7 | 	zerox	local07, #19
1932c     14 22 46 F0 | 	shr	local03, #20
19330     02 22 66 F0 | 	shl	local03, #2
19334     ED 22 02 F1 | 	add	local03, __methods__
19338     11 23 02 FB | 	rdlong	local03, local03
1933c     13 29 02 F6 | 	mov	local06, local05
19340     02 28 66 F0 | 	shl	local06, #2
19344     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19348     F4 28 02 F1 | 	add	local06, ptr___system__dat__
1934c     14 13 02 FB | 	rdlong	arg01, local06
19350     F2 28 02 F6 | 	mov	local06, objptr
19354     15 E5 01 F6 | 	mov	objptr, local07
19358     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1935c     2D 22 62 FD | 	call	local03
19360     14 E5 01 F6 | 	mov	objptr, local06
19364                 | LR__2180
19364     13 2D 02 F6 | 	mov	local08, local05
19368     02 2C 66 F0 | 	shl	local08, #2
1936c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19370     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
19374     16 21 62 FC | 	wrlong	local02, local08
19378     00 20 0E F2 | 	cmp	local02, #0 wz
1937c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19380     18 00 90 5D |  if_ne	jmp	#LR__2181
19384     02 26 66 F0 | 	shl	local05, #2
19388     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1938c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19390     13 01 68 FC | 	wrlong	#0, local05
19394     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19398     C4 00 90 FD | 	jmp	#LR__2184
1939c                 | LR__2181
1939c     13 2F 02 F6 | 	mov	local09, local05
193a0     04 2E 66 F0 | 	shl	local09, #4
193a4     24 E8 05 F1 | 	add	ptr___system__dat__, #36
193a8     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
193ac     17 13 02 F6 | 	mov	arg01, local09
193b0     0F 15 02 F6 | 	mov	arg02, local01
193b4     10 16 06 F6 | 	mov	arg03, #16
193b8     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
193bc     74 4B B0 FD | 	call	#__system__strncpy
193c0     48 20 06 F1 | 	add	local02, #72
193c4     10 2D 0A FB | 	rdlong	local08, local02 wz
193c8     48 20 86 F1 | 	sub	local02, #72
193cc     7C 00 90 AD |  if_e	jmp	#LR__2183
193d0     48 20 06 F1 | 	add	local02, #72
193d4     10 2D 02 FB | 	rdlong	local08, local02
193d8     16 31 02 F6 | 	mov	local10, local08
193dc     13 2C 46 F7 | 	zerox	local08, #19
193e0     14 30 46 F0 | 	shr	local10, #20
193e4     02 30 66 F0 | 	shl	local10, #2
193e8     ED 30 02 F1 | 	add	local10, __methods__
193ec     18 31 02 FB | 	rdlong	local10, local10
193f0     17 13 02 F6 | 	mov	arg01, local09
193f4     F2 32 02 F6 | 	mov	local11, objptr
193f8     16 E5 01 F6 | 	mov	objptr, local08
193fc     2D 30 62 FD | 	call	local10
19400     19 E5 01 F6 | 	mov	objptr, local11
19404     FD 12 0A F6 | 	mov	arg01, result1 wz
19408     40 00 90 AD |  if_e	jmp	#LR__2182
1940c     13 2D 02 F6 | 	mov	local08, local05
19410     02 2C 66 F0 | 	shl	local08, #2
19414     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19418     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
1941c     16 01 68 FC | 	wrlong	#0, local08
19420     02 26 66 F0 | 	shl	local05, #2
19424     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
19428     F4 26 02 F1 | 	add	local05, ptr___system__dat__
1942c     13 01 68 FC | 	wrlong	#0, local05
19430     09 13 6A F6 | 	neg	arg01, arg01 wz
19434     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
19438     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1943c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19440     01 FA 65 56 |  if_ne	neg	result1, #1
19444     00 FA 05 A6 |  if_e	mov	result1, #0
19448     18 00 90 FD | 	jmp	#LR__2185
1944c                 | LR__2182
1944c                 | LR__2183
1944c     02 26 66 F0 | 	shl	local05, #2
19450     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19454     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19458     13 2F 62 FC | 	wrlong	local09, local05
1945c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19460                 | LR__2184
19460     00 FA 05 F6 | 	mov	result1, #0
19464                 | LR__2185
19464     A7 F0 03 F6 | 	mov	ptra, fp
19468     B2 00 A0 FD | 	call	#popregs_
1946c                 | __system___mount_ret
1946c     2D 00 64 FD | 	ret
19470                 | 
19470                 | __system___chdir
19470     00 4A 05 F6 | 	mov	COUNT_, #0
19474     A8 00 A0 FD | 	call	#pushregs_
19478     40 F0 07 F1 | 	add	ptra, #64
1947c     04 4E 05 F1 | 	add	fp, #4
19480     A7 12 62 FC | 	wrlong	arg01, fp
19484     04 4E 05 F1 | 	add	fp, #4
19488     A7 14 02 F6 | 	mov	arg02, fp
1948c     08 4E 85 F1 | 	sub	fp, #8
19490     80 47 B0 FD | 	call	#__system__stat
19494     3C 4E 05 F1 | 	add	fp, #60
19498     A7 FA 61 FC | 	wrlong	result1, fp
1949c     3C 4E 85 F1 | 	sub	fp, #60
194a0     00 FA 0D F2 | 	cmp	result1, #0 wz
194a4     3C 4E 05 51 |  if_ne	add	fp, #60
194a8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
194ac     3C 4E 85 51 |  if_ne	sub	fp, #60
194b0     BC 00 90 5D |  if_ne	jmp	#LR__2192
194b4     10 4E 05 F1 | 	add	fp, #16
194b8     A7 12 02 FB | 	rdlong	arg01, fp
194bc     10 4E 85 F1 | 	sub	fp, #16
194c0     78 00 00 FF 
194c4     00 12 06 F5 | 	and	arg01, ##61440
194c8     08 00 00 FF 
194cc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
194d0     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
194d4     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
194d8     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
194dc     01 FA 65 56 |  if_ne	neg	result1, #1
194e0     8C 00 90 5D |  if_ne	jmp	#LR__2192
194e4     04 4E 05 F1 | 	add	fp, #4
194e8     A7 16 02 FB | 	rdlong	arg03, fp
194ec     04 4E 85 F1 | 	sub	fp, #4
194f0     0B 17 C2 FA | 	rdbyte	arg03, arg03
194f4     2F 16 0E F2 | 	cmp	arg03, #47 wz
194f8     24 00 90 5D |  if_ne	jmp	#LR__2190
194fc     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19500     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19504     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19508     04 4E 05 F1 | 	add	fp, #4
1950c     A7 14 02 FB | 	rdlong	arg02, fp
19510     04 4E 85 F1 | 	sub	fp, #4
19514     00 17 06 F6 | 	mov	arg03, #256
19518     18 4A B0 FD | 	call	#__system__strncpy
1951c     4C 00 90 FD | 	jmp	#LR__2191
19520                 | LR__2190
19520     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19524     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19528     38 4E 05 F1 | 	add	fp, #56
1952c     A7 12 62 FC | 	wrlong	arg01, fp
19530     38 4E 85 F1 | 	sub	fp, #56
19534     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
19538     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
1953c     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19540     00 17 06 F6 | 	mov	arg03, #256
19544     EC 49 B0 FD | 	call	#__system__strncpy
19548     38 4E 05 F1 | 	add	fp, #56
1954c     A7 12 02 FB | 	rdlong	arg01, fp
19550     34 4E 85 F1 | 	sub	fp, #52
19554     A7 14 02 FB | 	rdlong	arg02, fp
19558     04 4E 85 F1 | 	sub	fp, #4
1955c     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19560     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
19564     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19568     10 00 B0 FD | 	call	#__system____getvfsforfile
1956c                 | LR__2191
1956c     00 FA 05 F6 | 	mov	result1, #0
19570                 | LR__2192
19570     A7 F0 03 F6 | 	mov	ptra, fp
19574     B2 00 A0 FD | 	call	#popregs_
19578                 | __system___chdir_ret
19578     2D 00 64 FD | 	ret
1957c                 | 
1957c                 | __system____getvfsforfile
1957c     0E 4A 05 F6 | 	mov	COUNT_, #14
19580     A8 00 A0 FD | 	call	#pushregs_
19584     09 1F 02 F6 | 	mov	local01, arg01
19588     0A 21 02 F6 | 	mov	local02, arg02
1958c     0B 23 02 F6 | 	mov	local03, arg03
19590     97 10 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
19594                 | LR__2200
19594     10 FB C1 FA | 	rdbyte	result1, local02
19598     2F FA 0D F2 | 	cmp	result1, #47 wz
1959c     01 20 06 A1 |  if_e	add	local02, #1
195a0     10 25 C2 AA |  if_e	rdbyte	local04, local02
195a4     01 20 86 A1 |  if_e	sub	local02, #1
195a8     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
195ac     01 20 06 A1 |  if_e	add	local02, #1
195b0     E0 FF 9F AD |  if_e	jmp	#LR__2200
195b4                 | LR__2201
195b4     10 25 C2 FA | 	rdbyte	local04, local02
195b8     2F 24 0E F2 | 	cmp	local04, #47 wz
195bc     14 00 90 5D |  if_ne	jmp	#LR__2202
195c0     0F 13 02 F6 | 	mov	arg01, local01
195c4     10 15 02 F6 | 	mov	arg02, local02
195c8     00 17 06 F6 | 	mov	arg03, #256
195cc     64 49 B0 FD | 	call	#__system__strncpy
195d0     7C 00 90 FD | 	jmp	#LR__2204
195d4                 | LR__2202
195d4     84 E8 05 F1 | 	add	ptr___system__dat__, #132
195d8     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
195dc     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
195e0     0F 13 02 F6 | 	mov	arg01, local01
195e4     00 17 06 F6 | 	mov	arg03, #256
195e8     48 49 B0 FD | 	call	#__system__strncpy
195ec     10 25 CA FA | 	rdbyte	local04, local02 wz
195f0     5C 00 90 AD |  if_e	jmp	#LR__2203
195f4     10 25 C2 FA | 	rdbyte	local04, local02
195f8     2E 24 0E F2 | 	cmp	local04, #46 wz
195fc     01 20 06 A1 |  if_e	add	local02, #1
19600     10 27 C2 AA |  if_e	rdbyte	local05, local02
19604     01 20 86 A1 |  if_e	sub	local02, #1
19608     13 29 02 A6 |  if_e	mov	local06, local05
1960c     07 28 4E A7 |  if_e	zerox	local06, #7 wz
19610     3C 00 90 AD |  if_e	jmp	#LR__2203
19614     0F 27 C2 FA | 	rdbyte	local05, local01
19618     2F 26 0E F2 | 	cmp	local05, #47 wz
1961c     01 1E 06 A1 |  if_e	add	local01, #1
19620     0F 25 C2 AA |  if_e	rdbyte	local04, local01
19624     01 1E 86 A1 |  if_e	sub	local01, #1
19628     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1962c     41 01 00 5F 
19630     F0 14 06 56 |  if_ne	mov	arg02, ##@LR__4250
19634     0F 13 02 56 |  if_ne	mov	arg01, local01
19638     00 17 06 56 |  if_ne	mov	arg03, #256
1963c     40 49 B0 5D |  if_ne	call	#__system__strncat
19640     0F 13 02 F6 | 	mov	arg01, local01
19644     10 15 02 F6 | 	mov	arg02, local02
19648     00 17 06 F6 | 	mov	arg03, #256
1964c     30 49 B0 FD | 	call	#__system__strncat
19650                 | LR__2203
19650                 | LR__2204
19650     0F 13 02 F6 | 	mov	arg01, local01
19654     E8 4A B0 FD | 	call	#__system___normalizeName
19658     0F 25 CA FA | 	rdbyte	local04, local01 wz
1965c     1C 00 90 AD |  if_e	jmp	#LR__2205
19660     0F 25 C2 FA | 	rdbyte	local04, local01
19664     2F 24 0E F2 | 	cmp	local04, #47 wz
19668     01 1E 06 A1 |  if_e	add	local01, #1
1966c     0F 29 C2 AA |  if_e	rdbyte	local06, local01
19670     01 1E 86 A1 |  if_e	sub	local01, #1
19674     00 28 4E A2 |  if_e	cmps	local06, #0 wz
19678     18 00 90 5D |  if_ne	jmp	#LR__2206
1967c                 | LR__2205
1967c     01 00 00 FF 
19680     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
19684     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
19688     01 00 00 FF 
1968c     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
19690     EC 01 90 FD | 	jmp	#LR__2220
19694                 | LR__2206
19694     00 2A 06 F6 | 	mov	local07, #0
19698                 | LR__2207
19698     04 2A 56 F2 | 	cmps	local07, #4 wc
1969c     CC 01 90 3D |  if_ae	jmp	#LR__2219
196a0     15 29 02 F6 | 	mov	local06, local07
196a4     02 28 66 F0 | 	shl	local06, #2
196a8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
196ac     F4 28 02 F1 | 	add	local06, ptr___system__dat__
196b0     14 29 0A FB | 	rdlong	local06, local06 wz
196b4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
196b8     A8 01 90 AD |  if_e	jmp	#LR__2218
196bc     15 25 02 F6 | 	mov	local04, local07
196c0     02 24 66 F0 | 	shl	local04, #2
196c4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
196c8     F4 24 02 F1 | 	add	local04, ptr___system__dat__
196cc     12 13 02 FB | 	rdlong	arg01, local04
196d0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
196d4     09 2D 02 F6 | 	mov	local08, arg01
196d8     97 06 48 FB | 	callpa	#(@LR__2209-@LR__2208)>>2,fcache_load_ptr_
196dc                 | LR__2208
196dc     16 FB C9 FA | 	rdbyte	result1, local08 wz
196e0     01 2C 06 51 |  if_ne	add	local08, #1
196e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2208
196e8                 | LR__2209
196e8     09 2D 82 F1 | 	sub	local08, arg01
196ec     16 2F 02 F6 | 	mov	local09, local08
196f0     17 25 02 F6 | 	mov	local04, local09
196f4     0F 25 02 F1 | 	add	local04, local01
196f8     12 29 C2 FA | 	rdbyte	local06, local04
196fc     2F 28 0E F2 | 	cmp	local06, #47 wz
19700     17 31 02 56 |  if_ne	mov	local10, local09
19704     0F 31 02 51 |  if_ne	add	local10, local01
19708     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1970c     54 01 90 5D |  if_ne	jmp	#LR__2217
19710     15 17 02 F6 | 	mov	arg03, local07
19714     02 16 66 F0 | 	shl	arg03, #2
19718     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1971c     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19720     0B 15 02 FB | 	rdlong	arg02, arg03
19724     17 17 02 F6 | 	mov	arg03, local09
19728     0F 13 02 F6 | 	mov	arg01, local01
1972c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19730     AC 48 B0 FD | 	call	#__system__strncmp
19734     00 FA 4D F2 | 	cmps	result1, #0 wz
19738     28 01 90 5D |  if_ne	jmp	#LR__2217
1973c     15 33 02 F6 | 	mov	local11, local07
19740     02 32 66 F0 | 	shl	local11, #2
19744     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19748     F4 32 02 F1 | 	add	local11, ptr___system__dat__
1974c     19 35 02 FB | 	rdlong	local12, local11
19750     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19754     97 22 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
19758                 | LR__2210
19758     17 29 02 F6 | 	mov	local06, local09
1975c     01 28 06 F1 | 	add	local06, #1
19760     0F 29 02 F1 | 	add	local06, local01
19764     14 33 C2 FA | 	rdbyte	local11, local06
19768     2E 32 0E F2 | 	cmp	local11, #46 wz
1976c     2C 00 90 5D |  if_ne	jmp	#LR__2212
19770     17 33 02 F6 | 	mov	local11, local09
19774     02 32 06 F1 | 	add	local11, #2
19778     0F 33 02 F1 | 	add	local11, local01
1977c     19 31 C2 FA | 	rdbyte	local10, local11
19780     2F 30 0E F2 | 	cmp	local10, #47 wz
19784     17 37 02 56 |  if_ne	mov	local13, local09
19788     02 36 06 51 |  if_ne	add	local13, #2
1978c     0F 37 02 51 |  if_ne	add	local13, local01
19790     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
19794     01 2E 06 A1 |  if_e	add	local09, #1
19798     BC FF 9F AD |  if_e	jmp	#LR__2210
1979c                 | LR__2211
1979c                 | LR__2212
1979c     00 22 0E F2 | 	cmp	local03, #0 wz
197a0     11 13 02 56 |  if_ne	mov	arg01, local03
197a4     0F 15 02 56 |  if_ne	mov	arg02, local01
197a8     00 17 06 56 |  if_ne	mov	arg03, #256
197ac     84 47 B0 5D |  if_ne	call	#__system__strncpy
197b0     0F 15 02 F6 | 	mov	arg02, local01
197b4     17 15 02 F1 | 	add	arg02, local09
197b8     01 14 06 F1 | 	add	arg02, #1
197bc     0F 13 02 F6 | 	mov	arg01, local01
197c0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
197c4     0F 13 02 F6 | 	mov	arg01, local01
197c8     09 2D 02 F6 | 	mov	local08, arg01
197cc     97 06 48 FB | 	callpa	#(@LR__2214-@LR__2213)>>2,fcache_load_ptr_
197d0                 | LR__2213
197d0     16 FB C9 FA | 	rdbyte	result1, local08 wz
197d4     01 2C 06 51 |  if_ne	add	local08, #1
197d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2213
197dc                 | LR__2214
197dc     09 2D 82 F1 | 	sub	local08, arg01
197e0     16 2F 02 F6 | 	mov	local09, local08
197e4                 | LR__2215
197e4     01 2E 56 F2 | 	cmps	local09, #1 wc
197e8     70 00 90 CD |  if_b	jmp	#LR__2216
197ec     17 25 02 F6 | 	mov	local04, local09
197f0     0F 25 02 F1 | 	add	local04, local01
197f4     12 33 C2 FA | 	rdbyte	local11, local04
197f8     2F 32 0E F2 | 	cmp	local11, #47 wz
197fc     17 33 02 A6 |  if_e	mov	local11, local09
19800     0F 33 02 A1 |  if_e	add	local11, local01
19804     19 01 48 AC |  if_e	wrbyte	#0, local11
19808     01 2E 86 A1 |  if_e	sub	local09, #1
1980c     D4 FF 9F AD |  if_e	jmp	#LR__2215
19810     17 25 02 F6 | 	mov	local04, local09
19814     0F 25 02 F1 | 	add	local04, local01
19818     12 33 C2 FA | 	rdbyte	local11, local04
1981c     2E 32 0E F2 | 	cmp	local11, #46 wz
19820     38 00 90 5D |  if_ne	jmp	#LR__2216
19824     02 2E 56 F2 | 	cmps	local09, #2 wc
19828     30 00 90 CD |  if_b	jmp	#LR__2216
1982c     17 39 02 F6 | 	mov	local14, local09
19830     01 38 86 F1 | 	sub	local14, #1
19834     0F 39 02 F1 | 	add	local14, local01
19838     1C 27 C2 FA | 	rdbyte	local05, local14
1983c     2F 26 0E F2 | 	cmp	local05, #47 wz
19840     18 00 90 5D |  if_ne	jmp	#LR__2216
19844     17 25 02 F6 | 	mov	local04, local09
19848     01 24 86 F1 | 	sub	local04, #1
1984c     0F 25 02 F1 | 	add	local04, local01
19850     12 01 48 FC | 	wrbyte	#0, local04
19854     02 2E 86 F1 | 	sub	local09, #2
19858     88 FF 9F FD | 	jmp	#LR__2215
1985c                 | LR__2216
1985c     1A FB 01 F6 | 	mov	result1, local12
19860     1C 00 90 FD | 	jmp	#LR__2220
19864                 | LR__2217
19864                 | LR__2218
19864     01 2A 06 F1 | 	add	local07, #1
19868     2C FE 9F FD | 	jmp	#LR__2207
1986c                 | LR__2219
1986c     03 00 00 FF 
19870     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
19874     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
19878     03 00 00 FF 
1987c     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
19880                 | LR__2220
19880     A7 F0 03 F6 | 	mov	ptra, fp
19884     B2 00 A0 FD | 	call	#popregs_
19888                 | __system____getvfsforfile_ret
19888     2D 00 64 FD | 	ret
1988c                 | 
1988c                 | __system___basic_open
1988c     05 4A 05 F6 | 	mov	COUNT_, #5
19890     A8 00 A0 FD | 	call	#pushregs_
19894     0A 1F 02 F6 | 	mov	local01, arg02
19898     0B 21 02 F6 | 	mov	local02, arg03
1989c     0C 23 02 F6 | 	mov	local03, arg04
198a0     00 24 06 F6 | 	mov	local04, #0
198a4     64 46 B0 FD | 	call	#__system____getftab
198a8     FD 26 0A F6 | 	mov	local05, result1 wz
198ac     18 00 90 5D |  if_ne	jmp	#LR__2230
198b0     EE 12 02 F6 | 	mov	arg01, abortchain
198b4     0C 14 06 F6 | 	mov	arg02, #12
198b8     01 16 06 F6 | 	mov	arg03, #1
198bc     DA 00 A0 FD | 	call	#__longjmp
198c0     01 FA 65 F6 | 	neg	result1, #1
198c4     14 01 90 FD | 	jmp	#LR__2239
198c8                 | LR__2230
198c8     08 26 06 F1 | 	add	local05, #8
198cc     13 FB 09 FB | 	rdlong	result1, local05 wz
198d0     08 26 86 F1 | 	sub	local05, #8
198d4     13 13 02 56 |  if_ne	mov	arg01, local05
198d8     C0 3D B0 5D |  if_ne	call	#__system___closeraw
198dc     00 1E 0E F2 | 	cmp	local01, #0 wz
198e0     00 20 0E A2 |  if_e	cmp	local02, #0 wz
198e4     00 22 0E A2 |  if_e	cmp	local03, #0 wz
198e8     3C 00 90 AD |  if_e	jmp	#LR__2232
198ec     0C 12 06 F6 | 	mov	arg01, #12
198f0     A8 32 B0 FD | 	call	#__system___gc_alloc_managed
198f4     FD 24 0A F6 | 	mov	local04, result1 wz
198f8     18 00 90 5D |  if_ne	jmp	#LR__2231
198fc     EE 12 02 F6 | 	mov	arg01, abortchain
19900     07 14 06 F6 | 	mov	arg02, #7
19904     01 16 06 F6 | 	mov	arg03, #1
19908     DA 00 A0 FD | 	call	#__longjmp
1990c     01 FA 65 F6 | 	neg	result1, #1
19910     C8 00 90 FD | 	jmp	#LR__2239
19914                 | LR__2231
19914     12 01 68 FC | 	wrlong	#0, local04
19918     04 24 06 F1 | 	add	local04, #4
1991c     12 01 68 FC | 	wrlong	#0, local04
19920     04 24 86 F1 | 	sub	local04, #4
19924     13 25 62 FC | 	wrlong	local04, local05
19928                 | LR__2232
19928     00 1E 0E F2 | 	cmp	local01, #0 wz
1992c     20 00 90 AD |  if_e	jmp	#LR__2233
19930     12 1F 62 FC | 	wrlong	local01, local04
19934     12 FB 01 F6 | 	mov	result1, local04
19938     00 10 03 FF 
1993c     00 FA 45 F5 | 	or	result1, ##102760448
19940     1C 26 06 F1 | 	add	local05, #28
19944     13 FB 61 FC | 	wrlong	result1, local05
19948     1C 26 86 F1 | 	sub	local05, #28
1994c     0C 00 90 FD | 	jmp	#LR__2234
19950                 | LR__2233
19950     1C 26 06 F1 | 	add	local05, #28
19954     13 01 68 FC | 	wrlong	#0, local05
19958     1C 26 86 F1 | 	sub	local05, #28
1995c                 | LR__2234
1995c     00 20 0E F2 | 	cmp	local02, #0 wz
19960     28 00 90 AD |  if_e	jmp	#LR__2235
19964     04 24 06 F1 | 	add	local04, #4
19968     12 21 62 FC | 	wrlong	local02, local04
1996c     04 24 86 F1 | 	sub	local04, #4
19970     12 FB 01 F6 | 	mov	result1, local04
19974     00 18 03 FF 
19978     00 FA 45 F5 | 	or	result1, ##103809024
1997c     20 26 06 F1 | 	add	local05, #32
19980     13 FB 61 FC | 	wrlong	result1, local05
19984     20 26 86 F1 | 	sub	local05, #32
19988     0C 00 90 FD | 	jmp	#LR__2236
1998c                 | LR__2235
1998c     20 26 06 F1 | 	add	local05, #32
19990     13 01 68 FC | 	wrlong	#0, local05
19994     20 26 86 F1 | 	sub	local05, #32
19998                 | LR__2236
19998     00 22 0E F2 | 	cmp	local03, #0 wz
1999c     24 00 90 AD |  if_e	jmp	#LR__2237
199a0     08 24 06 F1 | 	add	local04, #8
199a4     12 23 62 FC | 	wrlong	local03, local04
199a8     08 24 86 F1 | 	sub	local04, #8
199ac     00 20 03 FF 
199b0     00 24 46 F5 | 	or	local04, ##104857600
199b4     24 26 06 F1 | 	add	local05, #36
199b8     13 25 62 FC | 	wrlong	local04, local05
199bc     24 26 86 F1 | 	sub	local05, #36
199c0     0C 00 90 FD | 	jmp	#LR__2238
199c4                 | LR__2237
199c4     24 26 06 F1 | 	add	local05, #36
199c8     13 01 68 FC | 	wrlong	#0, local05
199cc     24 26 86 F1 | 	sub	local05, #36
199d0                 | LR__2238
199d0     08 26 06 F1 | 	add	local05, #8
199d4     13 0F 68 FC | 	wrlong	#7, local05
199d8     00 FA 05 F6 | 	mov	result1, #0
199dc                 | LR__2239
199dc     A7 F0 03 F6 | 	mov	ptra, fp
199e0     B2 00 A0 FD | 	call	#popregs_
199e4                 | __system___basic_open_ret
199e4     2D 00 64 FD | 	ret
199e8                 | 
199e8                 | __system___basic_open_string
199e8     04 4A 05 F6 | 	mov	COUNT_, #4
199ec     A8 00 A0 FD | 	call	#pushregs_
199f0     0A 1F 02 F6 | 	mov	local01, arg02
199f4     0B 21 02 F6 | 	mov	local02, arg03
199f8     10 45 B0 FD | 	call	#__system____getftab
199fc     FD 22 0A F6 | 	mov	local03, result1 wz
19a00     18 00 90 5D |  if_ne	jmp	#LR__2240
19a04     EE 12 02 F6 | 	mov	arg01, abortchain
19a08     0C 14 06 F6 | 	mov	arg02, #12
19a0c     01 16 06 F6 | 	mov	arg03, #1
19a10     DA 00 A0 FD | 	call	#__longjmp
19a14     01 FA 65 F6 | 	neg	result1, #1
19a18     58 00 90 FD | 	jmp	#LR__2242
19a1c                 | LR__2240
19a1c     08 22 06 F1 | 	add	local03, #8
19a20     11 19 0A FB | 	rdlong	arg04, local03 wz
19a24     08 22 86 F1 | 	sub	local03, #8
19a28     11 13 02 56 |  if_ne	mov	arg01, local03
19a2c     6C 3C B0 5D |  if_ne	call	#__system___closeraw
19a30     0F 15 02 F6 | 	mov	arg02, local01
19a34     10 17 02 F6 | 	mov	arg03, local02
19a38     11 13 02 F6 | 	mov	arg01, local03
19a3c     B6 19 06 F6 | 	mov	arg04, #438
19a40     54 39 B0 FD | 	call	#__system___openraw
19a44     FD 24 02 F6 | 	mov	local04, result1
19a48     00 24 56 F2 | 	cmps	local04, #0 wc
19a4c     20 00 90 3D |  if_ae	jmp	#LR__2241
19a50     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19a54     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
19a58     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19a5c     EE 12 02 F6 | 	mov	arg01, abortchain
19a60     01 16 06 F6 | 	mov	arg03, #1
19a64     DA 00 A0 FD | 	call	#__longjmp
19a68     01 FA 65 F6 | 	neg	result1, #1
19a6c     04 00 90 FD | 	jmp	#LR__2242
19a70                 | LR__2241
19a70     12 FB 01 F6 | 	mov	result1, local04
19a74                 | LR__2242
19a74     A7 F0 03 F6 | 	mov	ptra, fp
19a78     B2 00 A0 FD | 	call	#popregs_
19a7c                 | __system___basic_open_string_ret
19a7c     2D 00 64 FD | 	ret
19a80                 | 
19a80                 | __system___basic_print_char
19a80     03 4A 05 F6 | 	mov	COUNT_, #3
19a84     A8 00 A0 FD | 	call	#pushregs_
19a88     0A 1F 02 F6 | 	mov	local01, arg02
19a8c     D0 4B B0 FD | 	call	#__system___gettxfunc
19a90     FD 20 0A F6 | 	mov	local02, result1 wz
19a94     00 FA 05 A6 |  if_e	mov	result1, #0
19a98     30 00 90 AD |  if_e	jmp	#LR__2250
19a9c     10 23 02 F6 | 	mov	local03, local02
19aa0     13 20 46 F7 | 	zerox	local02, #19
19aa4     14 22 46 F0 | 	shr	local03, #20
19aa8     02 22 66 F0 | 	shl	local03, #2
19aac     ED 22 02 F1 | 	add	local03, __methods__
19ab0     11 23 02 FB | 	rdlong	local03, local03
19ab4     0F 13 02 F6 | 	mov	arg01, local01
19ab8     F2 1E 02 F6 | 	mov	local01, objptr
19abc     10 E5 01 F6 | 	mov	objptr, local02
19ac0     2D 22 62 FD | 	call	local03
19ac4     0F E5 01 F6 | 	mov	objptr, local01
19ac8     01 FA 05 F6 | 	mov	result1, #1
19acc                 | LR__2250
19acc     A7 F0 03 F6 | 	mov	ptra, fp
19ad0     B2 00 A0 FD | 	call	#popregs_
19ad4                 | __system___basic_print_char_ret
19ad4     2D 00 64 FD | 	ret
19ad8                 | 
19ad8                 | __system___basic_print_string
19ad8     03 4A 05 F6 | 	mov	COUNT_, #3
19adc     A8 00 A0 FD | 	call	#pushregs_
19ae0     0A 1F 02 F6 | 	mov	local01, arg02
19ae4     0B 21 02 F6 | 	mov	local02, arg03
19ae8     74 4B B0 FD | 	call	#__system___gettxfunc
19aec     FD 22 0A F6 | 	mov	local03, result1 wz
19af0     00 FA 05 A6 |  if_e	mov	result1, #0
19af4     18 00 90 AD |  if_e	jmp	#LR__2260
19af8     00 1E 0E F2 | 	cmp	local01, #0 wz
19afc     00 FA 05 A6 |  if_e	mov	result1, #0
19b00     11 13 02 56 |  if_ne	mov	arg01, local03
19b04     10 15 02 56 |  if_ne	mov	arg02, local02
19b08     0F 17 02 56 |  if_ne	mov	arg03, local01
19b0c     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
19b10                 | LR__2260
19b10     A7 F0 03 F6 | 	mov	ptra, fp
19b14     B2 00 A0 FD | 	call	#popregs_
19b18                 | __system___basic_print_string_ret
19b18     2D 00 64 FD | 	ret
19b1c                 | 
19b1c                 | __system___basic_print_integer
19b1c     04 4A 05 F6 | 	mov	COUNT_, #4
19b20     A8 00 A0 FD | 	call	#pushregs_
19b24     0A 1F 02 F6 | 	mov	local01, arg02
19b28     0B 21 02 F6 | 	mov	local02, arg03
19b2c     0C 23 02 F6 | 	mov	local03, arg04
19b30     2C 4B B0 FD | 	call	#__system___gettxfunc
19b34     FD 24 0A F6 | 	mov	local04, result1 wz
19b38     00 FA 05 A6 |  if_e	mov	result1, #0
19b3c     12 13 02 56 |  if_ne	mov	arg01, local04
19b40     10 15 02 56 |  if_ne	mov	arg02, local02
19b44     0F 17 02 56 |  if_ne	mov	arg03, local01
19b48     11 19 02 56 |  if_ne	mov	arg04, local03
19b4c     48 02 B0 5D |  if_ne	call	#__system___fmtnum
19b50     A7 F0 03 F6 | 	mov	ptra, fp
19b54     B2 00 A0 FD | 	call	#popregs_
19b58                 | __system___basic_print_integer_ret
19b58     2D 00 64 FD | 	ret
19b5c                 | 
19b5c                 | __system___basic_print_unsigned
19b5c     03 4A 05 F6 | 	mov	COUNT_, #3
19b60     A8 00 A0 FD | 	call	#pushregs_
19b64     0A 1F 02 F6 | 	mov	local01, arg02
19b68     0B 21 02 F6 | 	mov	local02, arg03
19b6c     0C 23 02 F6 | 	mov	local03, arg04
19b70     EC 4A B0 FD | 	call	#__system___gettxfunc
19b74     FD 12 0A F6 | 	mov	arg01, result1 wz
19b78     00 FA 05 A6 |  if_e	mov	result1, #0
19b7c     3A 20 26 54 |  if_ne	bith	local02, #58
19b80     10 15 02 56 |  if_ne	mov	arg02, local02
19b84     0F 17 02 56 |  if_ne	mov	arg03, local01
19b88     11 19 02 56 |  if_ne	mov	arg04, local03
19b8c     08 02 B0 5D |  if_ne	call	#__system___fmtnum
19b90     A7 F0 03 F6 | 	mov	ptra, fp
19b94     B2 00 A0 FD | 	call	#popregs_
19b98                 | __system___basic_print_unsigned_ret
19b98     2D 00 64 FD | 	ret
19b9c                 | 
19b9c                 | __system___basic_get_char
19b9c     03 4A 05 F6 | 	mov	COUNT_, #3
19ba0     A8 00 A0 FD | 	call	#pushregs_
19ba4     FC 4A B0 FD | 	call	#__system___getrxfunc
19ba8     FD 1E 0A F6 | 	mov	local01, result1 wz
19bac     01 FA 65 A6 |  if_e	neg	result1, #1
19bb0     28 00 90 AD |  if_e	jmp	#LR__2270
19bb4     0F 21 02 F6 | 	mov	local02, local01
19bb8     13 1E 46 F7 | 	zerox	local01, #19
19bbc     14 20 46 F0 | 	shr	local02, #20
19bc0     02 20 66 F0 | 	shl	local02, #2
19bc4     ED 20 02 F1 | 	add	local02, __methods__
19bc8     10 21 02 FB | 	rdlong	local02, local02
19bcc     F2 22 02 F6 | 	mov	local03, objptr
19bd0     0F E5 01 F6 | 	mov	objptr, local01
19bd4     2D 20 62 FD | 	call	local02
19bd8     11 E5 01 F6 | 	mov	objptr, local03
19bdc                 | LR__2270
19bdc     A7 F0 03 F6 | 	mov	ptra, fp
19be0     B2 00 A0 FD | 	call	#popregs_
19be4                 | __system___basic_get_char_ret
19be4     2D 00 64 FD | 	ret
19be8                 | 
19be8                 | __system___basic_get
19be8     04 4A 05 F6 | 	mov	COUNT_, #4
19bec     A8 00 A0 FD | 	call	#pushregs_
19bf0     0D 1F 02 F6 | 	mov	local01, arg05
19bf4     0F 19 02 FD | 	qmul	arg04, local01
19bf8     09 21 02 F6 | 	mov	local02, arg01
19bfc     0B 23 02 F6 | 	mov	local03, arg03
19c00     00 14 0E F2 | 	cmp	arg02, #0 wz
19c04     01 14 86 51 |  if_ne	sub	arg02, #1
19c08     10 13 02 56 |  if_ne	mov	arg01, local02
19c0c     00 16 06 56 |  if_ne	mov	arg03, #0
19c10     18 24 62 FD | 	getqx	local04
19c14     3C 41 B0 5D |  if_ne	call	#__system__lseek
19c18     11 15 02 F6 | 	mov	arg02, local03
19c1c     12 17 02 F6 | 	mov	arg03, local04
19c20     10 13 02 F6 | 	mov	arg01, local02
19c24     B4 40 B0 FD | 	call	#__system__read
19c28     FD 24 02 F6 | 	mov	local04, result1
19c2c     01 24 56 F2 | 	cmps	local04, #1 wc
19c30     10 00 90 CD |  if_b	jmp	#LR__2280
19c34     12 63 02 F6 | 	mov	muldiva_, local04
19c38     0F 65 02 F6 | 	mov	muldivb_, local01
19c3c     BA 00 A0 FD | 	call	#divide_
19c40     32 25 02 F6 | 	mov	local04, muldivb_
19c44                 | LR__2280
19c44     12 FB 01 F6 | 	mov	result1, local04
19c48     A7 F0 03 F6 | 	mov	ptra, fp
19c4c     B2 00 A0 FD | 	call	#popregs_
19c50                 | __system___basic_get_ret
19c50     2D 00 64 FD | 	ret
19c54                 | 
19c54                 | __system___fmtchar
19c54     00 4A 05 F6 | 	mov	COUNT_, #0
19c58     A8 00 A0 FD | 	call	#pushregs_
19c5c     10 F0 07 F1 | 	add	ptra, #16
19c60     04 4E 05 F1 | 	add	fp, #4
19c64     A7 12 62 FC | 	wrlong	arg01, fp
19c68     04 4E 05 F1 | 	add	fp, #4
19c6c     A7 14 62 FC | 	wrlong	arg02, fp
19c70     04 4E 05 F1 | 	add	fp, #4
19c74     A7 16 62 FC | 	wrlong	arg03, fp
19c78     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
19c7c     A7 16 62 FC | 	wrlong	arg03, fp
19c80     08 4E 85 F1 | 	sub	fp, #8
19c84     A7 12 02 FB | 	rdlong	arg01, fp
19c88     04 4E 05 F1 | 	add	fp, #4
19c8c     A7 14 02 FB | 	rdlong	arg02, fp
19c90     04 4E 05 F1 | 	add	fp, #4
19c94     A7 16 02 F6 | 	mov	arg03, fp
19c98     0C 4E 85 F1 | 	sub	fp, #12
19c9c     0C 00 B0 FD | 	call	#__system___fmtstr
19ca0     A7 F0 03 F6 | 	mov	ptra, fp
19ca4     B2 00 A0 FD | 	call	#popregs_
19ca8                 | __system___fmtchar_ret
19ca8     2D 00 64 FD | 	ret
19cac                 | 
19cac                 | __system___fmtstr
19cac     09 4A 05 F6 | 	mov	COUNT_, #9
19cb0     A8 00 A0 FD | 	call	#pushregs_
19cb4     09 1F 02 F6 | 	mov	local01, arg01
19cb8     0A 21 02 F6 | 	mov	local02, arg02
19cbc     0B 23 02 F6 | 	mov	local03, arg03
19cc0     10 19 E2 F8 | 	getbyte	arg04, local02, #0
19cc4     11 13 02 F6 | 	mov	arg01, local03
19cc8     09 25 02 F6 | 	mov	local04, arg01
19ccc     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
19cd0                 | LR__2290
19cd0     12 FB C9 FA | 	rdbyte	result1, local04 wz
19cd4     01 24 06 51 |  if_ne	add	local04, #1
19cd8     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
19cdc                 | LR__2291
19cdc     09 25 82 F1 | 	sub	local04, arg01
19ce0     00 18 0E F2 | 	cmp	arg04, #0 wz
19ce4     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
19ce8     10 15 02 F6 | 	mov	arg02, local02
19cec     12 17 02 F6 | 	mov	arg03, local04
19cf0     0F 13 02 F6 | 	mov	arg01, local01
19cf4     02 18 06 F6 | 	mov	arg04, #2
19cf8     04 46 B0 FD | 	call	#__system___fmtpad
19cfc     FD 26 02 F6 | 	mov	local05, result1
19d00     00 26 56 F2 | 	cmps	local05, #0 wc
19d04     13 FB 01 C6 |  if_b	mov	result1, local05
19d08     80 00 90 CD |  if_b	jmp	#LR__2294
19d0c     01 24 56 F2 | 	cmps	local04, #1 wc
19d10     50 00 90 CD |  if_b	jmp	#LR__2293
19d14     12 29 02 F6 | 	mov	local06, local04
19d18                 | LR__2292
19d18     0F 2B 02 F6 | 	mov	local07, local01
19d1c     0F 2D 02 F6 | 	mov	local08, local01
19d20     13 2A 46 F7 | 	zerox	local07, #19
19d24     14 2C 46 F0 | 	shr	local08, #20
19d28     02 2C 66 F0 | 	shl	local08, #2
19d2c     ED 2C 02 F1 | 	add	local08, __methods__
19d30     16 2D 02 FB | 	rdlong	local08, local08
19d34     11 13 C2 FA | 	rdbyte	arg01, local03
19d38     F2 2E 02 F6 | 	mov	local09, objptr
19d3c     15 E5 01 F6 | 	mov	objptr, local07
19d40     01 22 06 F1 | 	add	local03, #1
19d44     2D 2C 62 FD | 	call	local08
19d48     17 E5 01 F6 | 	mov	objptr, local09
19d4c     FD 2E 02 F6 | 	mov	local09, result1
19d50     00 2E 56 F2 | 	cmps	local09, #0 wc
19d54     17 FB 01 C6 |  if_b	mov	result1, local09
19d58     30 00 90 CD |  if_b	jmp	#LR__2294
19d5c     17 27 02 F1 | 	add	local05, local09
19d60     ED 29 6E FB | 	djnz	local06, #LR__2292
19d64                 | LR__2293
19d64     10 15 02 F6 | 	mov	arg02, local02
19d68     12 17 02 F6 | 	mov	arg03, local04
19d6c     0F 13 02 F6 | 	mov	arg01, local01
19d70     01 18 06 F6 | 	mov	arg04, #1
19d74     88 45 B0 FD | 	call	#__system___fmtpad
19d78     FD 2E 02 F6 | 	mov	local09, result1
19d7c     00 2E 56 F2 | 	cmps	local09, #0 wc
19d80     17 FB 01 C6 |  if_b	mov	result1, local09
19d84     17 27 02 31 |  if_ae	add	local05, local09
19d88     13 FB 01 36 |  if_ae	mov	result1, local05
19d8c                 | LR__2294
19d8c     A7 F0 03 F6 | 	mov	ptra, fp
19d90     B2 00 A0 FD | 	call	#popregs_
19d94                 | __system___fmtstr_ret
19d94     2D 00 64 FD | 	ret
19d98                 | 
19d98                 | __system___fmtnum
19d98     0B 4A 05 F6 | 	mov	COUNT_, #11
19d9c     A8 00 A0 FD | 	call	#pushregs_
19da0     09 1F 02 F6 | 	mov	local01, arg01
19da4     0A 21 02 F6 | 	mov	local02, arg02
19da8     0B 23 02 F6 | 	mov	local03, arg03
19dac     0C 25 02 F6 | 	mov	local04, arg04
19db0     F8 27 02 F6 | 	mov	local05, ptra
19db4     13 29 02 F6 | 	mov	local06, local05
19db8     00 2A 06 F6 | 	mov	local07, #0
19dbc     10 2D 02 F6 | 	mov	local08, local02
19dc0     10 2C 46 F0 | 	shr	local08, #16
19dc4     3F 2C 06 F5 | 	and	local08, #63
19dc8     10 2F E2 F8 | 	getbyte	local09, local02, #0
19dcc     10 31 02 F6 | 	mov	local10, local02
19dd0     1A 30 46 F0 | 	shr	local10, #26
19dd4     03 30 06 F5 | 	and	local10, #3
19dd8     18 33 02 F6 | 	mov	local11, local10
19ddc     01 2C 56 F2 | 	cmps	local08, #1 wc
19de0     44 F0 07 F1 | 	add	ptra, #68
19de4     01 2C 86 31 |  if_ae	sub	local08, #1
19de8     41 2E 56 F2 | 	cmps	local09, #65 wc
19dec     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
19df0     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
19df4     03 32 0E F2 | 	cmp	local11, #3 wz
19df8     00 32 06 A6 |  if_e	mov	local11, #0
19dfc     00 22 56 52 |  if_ne	cmps	local03, #0 wc
19e00     04 32 06 46 |  if_c_and_nz	mov	local11, #4
19e04     11 23 62 46 |  if_c_and_nz	neg	local03, local03
19e08     00 32 0E F2 | 	cmp	local11, #0 wz
19e0c     4C 00 90 AD |  if_e	jmp	#LR__2303
19e10     01 2A 06 F6 | 	mov	local07, #1
19e14     17 2D 0A F2 | 	cmp	local08, local09 wz
19e18     18 00 90 5D |  if_ne	jmp	#LR__2301
19e1c     05 2C 6E FB | 	djnz	local08, #LR__2300
19e20     0F 13 02 F6 | 	mov	arg01, local01
19e24     10 15 02 F6 | 	mov	arg02, local02
19e28     23 16 06 F6 | 	mov	arg03, #35
19e2c     24 FE BF FD | 	call	#__system___fmtchar
19e30     88 00 90 FD | 	jmp	#LR__2307
19e34                 | LR__2300
19e34                 | LR__2301
19e34     02 32 0E F2 | 	cmp	local11, #2 wz
19e38     14 31 02 A6 |  if_e	mov	local10, local06
19e3c     01 28 06 A1 |  if_e	add	local06, #1
19e40     18 41 48 AC |  if_e	wrbyte	#32, local10
19e44     14 00 90 AD |  if_e	jmp	#LR__2302
19e48     04 32 0E F2 | 	cmp	local11, #4 wz
19e4c     14 5B 48 AC |  if_e	wrbyte	#45, local06
19e50     01 28 06 A1 |  if_e	add	local06, #1
19e54     14 57 48 5C |  if_ne	wrbyte	#43, local06
19e58     01 28 06 51 |  if_ne	add	local06, #1
19e5c                 | LR__2302
19e5c                 | LR__2303
19e5c     14 13 02 F6 | 	mov	arg01, local06
19e60     11 15 02 F6 | 	mov	arg02, local03
19e64     12 17 02 F6 | 	mov	arg03, local04
19e68     16 19 02 F6 | 	mov	arg04, local08
19e6c     00 1A 06 F6 | 	mov	arg05, #0
19e70     1D 20 2E F4 | 	testbn	local02, #29 wz
19e74     01 1A 06 56 |  if_ne	mov	arg05, #1
19e78     4C 45 B0 FD | 	call	#__system___uitoa
19e7c     FD 2A 02 F1 | 	add	local07, result1
19e80     17 2B 5A F2 | 	cmps	local07, local09 wcz
19e84     24 00 90 ED |  if_be	jmp	#LR__2306
19e88     97 0E 48 FB | 	callpa	#(@LR__2305-@LR__2304)>>2,fcache_load_ptr_
19e8c                 | LR__2304
19e8c     17 31 02 F6 | 	mov	local10, local09
19e90     01 30 56 F2 | 	cmps	local10, #1 wc
19e94     01 2E 86 F1 | 	sub	local09, #1
19e98     14 31 02 36 |  if_ae	mov	local10, local06
19e9c     01 28 06 31 |  if_ae	add	local06, #1
19ea0     18 47 48 3C |  if_ae	wrbyte	#35, local10
19ea4     E4 FF 9F 3D |  if_ae	jmp	#LR__2304
19ea8                 | LR__2305
19ea8     14 01 48 FC | 	wrbyte	#0, local06
19eac                 | LR__2306
19eac     0F 13 02 F6 | 	mov	arg01, local01
19eb0     10 15 02 F6 | 	mov	arg02, local02
19eb4     13 17 02 F6 | 	mov	arg03, local05
19eb8     F0 FD BF FD | 	call	#__system___fmtstr
19ebc                 | LR__2307
19ebc     A7 F0 03 F6 | 	mov	ptra, fp
19ec0     B2 00 A0 FD | 	call	#popregs_
19ec4                 | __system___fmtnum_ret
19ec4     2D 00 64 FD | 	ret
19ec8                 | 
19ec8                 | __system___fmtfloat
19ec8     10 4A 05 F6 | 	mov	COUNT_, #16
19ecc     A8 00 A0 FD | 	call	#pushregs_
19ed0     24 F1 07 F1 | 	add	ptra, #292
19ed4     04 4E 05 F1 | 	add	fp, #4
19ed8     A7 12 62 FC | 	wrlong	arg01, fp
19edc     04 4E 05 F1 | 	add	fp, #4
19ee0     A7 14 62 FC | 	wrlong	arg02, fp
19ee4     04 4E 05 F1 | 	add	fp, #4
19ee8     A7 16 62 FC | 	wrlong	arg03, fp
19eec     04 4E 05 F1 | 	add	fp, #4
19ef0     A7 18 62 FC | 	wrlong	arg04, fp
19ef4     0C 4E 05 F1 | 	add	fp, #12
19ef8     A7 14 68 FC | 	wrlong	#10, fp
19efc     08 4E 05 F1 | 	add	fp, #8
19f00     A7 00 68 FC | 	wrlong	#0, fp
19f04     08 4E 05 F1 | 	add	fp, #8
19f08     A7 00 68 FC | 	wrlong	#0, fp
19f0c     08 4E 05 F1 | 	add	fp, #8
19f10     A7 00 68 FC | 	wrlong	#0, fp
19f14     04 4E 05 F1 | 	add	fp, #4
19f18     A7 04 68 FC | 	wrlong	#2, fp
19f1c     04 4E 05 F1 | 	add	fp, #4
19f20     A7 00 68 FC | 	wrlong	#0, fp
19f24     04 4E 05 F1 | 	add	fp, #4
19f28     A7 00 68 FC | 	wrlong	#0, fp
19f2c     04 4E 05 F1 | 	add	fp, #4
19f30     A7 00 68 FC | 	wrlong	#0, fp
19f34     04 4E 05 F1 | 	add	fp, #4
19f38     A7 00 68 FC | 	wrlong	#0, fp
19f3c     18 4E 05 F1 | 	add	fp, #24
19f40     A7 00 68 FC | 	wrlong	#0, fp
19f44     68 4E 05 F1 | 	add	fp, #104
19f48     A7 1E 02 F6 | 	mov	local01, fp
19f4c     08 4E 85 F1 | 	sub	fp, #8
19f50     A7 1E 62 FC | 	wrlong	local01, fp
19f54     04 4E 05 F1 | 	add	fp, #4
19f58     A7 1E 62 FC | 	wrlong	local01, fp
19f5c     BC 4E 85 F1 | 	sub	fp, #188
19f60     A7 1E 02 FB | 	rdlong	local01, fp
19f64     10 1E 46 F0 | 	shr	local01, #16
19f68     3F 1E 06 F5 | 	and	local01, #63
19f6c     B0 4E 05 F1 | 	add	fp, #176
19f70     A7 1E 62 FC | 	wrlong	local01, fp
19f74     B0 4E 85 F1 | 	sub	fp, #176
19f78     A7 1E 02 FB | 	rdlong	local01, fp
19f7c     1C 1E 46 F0 | 	shr	local01, #28
19f80     01 1E 06 F5 | 	and	local01, #1
19f84     08 4F 05 F1 | 	add	fp, #264
19f88     A7 1E 62 FC | 	wrlong	local01, fp
19f8c     58 4E 85 F1 | 	sub	fp, #88
19f90     A7 1E 0A FB | 	rdlong	local01, fp wz
19f94     B8 4E 85 F1 | 	sub	fp, #184
19f98     3C 00 90 5D |  if_ne	jmp	#LR__2311
19f9c     10 4E 05 F1 | 	add	fp, #16
19fa0     A7 1E 02 FB | 	rdlong	local01, fp
19fa4     10 4E 85 F1 | 	sub	fp, #16
19fa8     61 1E 0E F2 | 	cmp	local01, #97 wz
19fac     18 00 90 5D |  if_ne	jmp	#LR__2310
19fb0     B8 4E 05 F1 | 	add	fp, #184
19fb4     A7 1A 68 FC | 	wrlong	#13, fp
19fb8     84 4E 85 F1 | 	sub	fp, #132
19fbc     A7 02 68 FC | 	wrlong	#1, fp
19fc0     34 4E 85 F1 | 	sub	fp, #52
19fc4     24 00 90 FD | 	jmp	#LR__2312
19fc8                 | LR__2310
19fc8     B8 4E 05 F1 | 	add	fp, #184
19fcc     A7 0C 68 FC | 	wrlong	#6, fp
19fd0     B8 4E 85 F1 | 	sub	fp, #184
19fd4     14 00 90 FD | 	jmp	#LR__2312
19fd8                 | LR__2311
19fd8     B8 4E 05 F1 | 	add	fp, #184
19fdc     A7 1E 02 FB | 	rdlong	local01, fp
19fe0     01 1E 86 F1 | 	sub	local01, #1
19fe4     A7 1E 62 FC | 	wrlong	local01, fp
19fe8     B8 4E 85 F1 | 	sub	fp, #184
19fec                 | LR__2312
19fec     08 4E 05 F1 | 	add	fp, #8
19ff0     A7 1E 02 FB | 	rdlong	local01, fp
19ff4     16 1E 46 F0 | 	shr	local01, #22
19ff8     03 1E 06 F5 | 	and	local01, #3
19ffc     04 4F 05 F1 | 	add	fp, #260
1a000     A7 1E 62 FC | 	wrlong	local01, fp
1a004     04 4F 85 F1 | 	sub	fp, #260
1a008     A7 1E 02 FB | 	rdlong	local01, fp
1a00c     1D 1E 46 F0 | 	shr	local01, #29
1a010     01 1E 06 F5 | 	and	local01, #1
1a014     B4 4E 05 F1 | 	add	fp, #180
1a018     A7 1E 62 FC | 	wrlong	local01, fp
1a01c     B4 4E 85 F1 | 	sub	fp, #180
1a020     A7 1E 02 FB | 	rdlong	local01, fp
1a024     0F 1F EA F8 | 	getbyte	local01, local01, #1
1a028     60 4E 05 F1 | 	add	fp, #96
1a02c     A7 1E 62 FC | 	wrlong	local01, fp
1a030     60 4E 85 F1 | 	sub	fp, #96
1a034     A7 1E 02 FB | 	rdlong	local01, fp
1a038     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1a03c     64 4E 05 F1 | 	add	fp, #100
1a040     A7 1E 62 FC | 	wrlong	local01, fp
1a044     00 1E 06 F6 | 	mov	local01, #0
1a048     5C 4E 85 F1 | 	sub	fp, #92
1a04c     A7 1A 02 FB | 	rdlong	arg05, fp
1a050     65 1A 0E F2 | 	cmp	arg05, #101 wz
1a054     01 1E 06 A6 |  if_e	mov	local01, #1
1a058     14 4E 05 F1 | 	add	fp, #20
1a05c     A7 1E 62 FC | 	wrlong	local01, fp
1a060     98 4E 05 F1 | 	add	fp, #152
1a064     A7 20 0A FB | 	rdlong	local02, fp wz
1a068     45 1E 06 56 |  if_ne	mov	local01, #69
1a06c     65 1E 06 A6 |  if_e	mov	local01, #101
1a070     8C 4E 85 F1 | 	sub	fp, #140
1a074     A7 1E 62 FC | 	wrlong	local01, fp
1a078     20 4E 85 F1 | 	sub	fp, #32
1a07c     A7 1E 02 FB | 	rdlong	local01, fp
1a080     10 4E 85 F1 | 	sub	fp, #16
1a084     61 1E 0E F2 | 	cmp	local01, #97 wz
1a088     4C 00 90 5D |  if_ne	jmp	#LR__2313
1a08c     24 4E 05 F1 | 	add	fp, #36
1a090     A7 02 68 FC | 	wrlong	#1, fp
1a094     98 4E 05 F1 | 	add	fp, #152
1a098     A7 20 0A FB | 	rdlong	local02, fp wz
1a09c     50 1E 06 56 |  if_ne	mov	local01, #80
1a0a0     70 1E 06 A6 |  if_e	mov	local01, #112
1a0a4     8C 4E 85 F1 | 	sub	fp, #140
1a0a8     A7 1E 62 FC | 	wrlong	local01, fp
1a0ac     14 4E 85 F1 | 	sub	fp, #20
1a0b0     A7 04 68 FC | 	wrlong	#2, fp
1a0b4     1C 4E 05 F1 | 	add	fp, #28
1a0b8     A7 02 68 FC | 	wrlong	#1, fp
1a0bc     84 4E 05 F1 | 	add	fp, #132
1a0c0     A7 20 0A FB | 	rdlong	local02, fp wz
1a0c4     58 1E 06 56 |  if_ne	mov	local01, #88
1a0c8     78 1E 06 A6 |  if_e	mov	local01, #120
1a0cc     7C 4E 85 F1 | 	sub	fp, #124
1a0d0     A7 1E 62 FC | 	wrlong	local01, fp
1a0d4     40 4E 85 F1 | 	sub	fp, #64
1a0d8                 | LR__2313
1a0d8     10 4E 05 F1 | 	add	fp, #16
1a0dc     A7 1E 02 FB | 	rdlong	local01, fp
1a0e0     10 4E 85 F1 | 	sub	fp, #16
1a0e4     23 1E 0E F2 | 	cmp	local01, #35 wz
1a0e8     3C 00 90 5D |  if_ne	jmp	#LR__2316
1a0ec     48 4E 05 F1 | 	add	fp, #72
1a0f0     A7 02 68 FC | 	wrlong	#1, fp
1a0f4     C8 4E 05 F1 | 	add	fp, #200
1a0f8     A7 1E 0A FB | 	rdlong	local01, fp wz
1a0fc     10 4F 85 F1 | 	sub	fp, #272
1a100     18 00 90 AD |  if_e	jmp	#LR__2314
1a104     10 4E 05 F1 | 	add	fp, #16
1a108     A7 CC 68 FC | 	wrlong	#102, fp
1a10c     00 4F 05 F1 | 	add	fp, #256
1a110     A7 00 68 FC | 	wrlong	#0, fp
1a114     10 4F 85 F1 | 	sub	fp, #272
1a118     0C 00 90 FD | 	jmp	#LR__2315
1a11c                 | LR__2314
1a11c     10 4F 05 F1 | 	add	fp, #272
1a120     A7 02 68 FC | 	wrlong	#1, fp
1a124     10 4F 85 F1 | 	sub	fp, #272
1a128                 | LR__2315
1a128                 | LR__2316
1a128     08 4E 05 F1 | 	add	fp, #8
1a12c     A7 1E 02 FB | 	rdlong	local01, fp
1a130     1A 1E 46 F0 | 	shr	local01, #26
1a134     03 1E 06 F5 | 	and	local01, #3
1a138     5C 4E 05 F1 | 	add	fp, #92
1a13c     A7 1E 62 FC | 	wrlong	local01, fp
1a140     58 4E 85 F1 | 	sub	fp, #88
1a144     A7 FA 01 FB | 	rdlong	result1, fp
1a148     0C 4E 85 F1 | 	sub	fp, #12
1a14c     1F FA 4D F0 | 	shr	result1, #31 wz
1a150     20 00 90 AD |  if_e	jmp	#LR__2317
1a154     2C 4E 05 F1 | 	add	fp, #44
1a158     A7 5A 68 FC | 	wrlong	#45, fp
1a15c     20 4E 85 F1 | 	sub	fp, #32
1a160     A7 FA 01 FB | 	rdlong	result1, fp
1a164     1F FA E5 F4 | 	bitnot	result1, #31
1a168     A7 FA 61 FC | 	wrlong	result1, fp
1a16c     0C 4E 85 F1 | 	sub	fp, #12
1a170     3C 00 90 FD | 	jmp	#LR__2319
1a174                 | LR__2317
1a174     64 4E 05 F1 | 	add	fp, #100
1a178     A7 1E 02 FB | 	rdlong	local01, fp
1a17c     64 4E 85 F1 | 	sub	fp, #100
1a180     01 1E 0E F2 | 	cmp	local01, #1 wz
1a184     2C 4E 05 A1 |  if_e	add	fp, #44
1a188     A7 56 68 AC |  if_e	wrlong	#43, fp
1a18c     2C 4E 85 A1 |  if_e	sub	fp, #44
1a190     1C 00 90 AD |  if_e	jmp	#LR__2318
1a194     64 4E 05 F1 | 	add	fp, #100
1a198     A7 1E 02 FB | 	rdlong	local01, fp
1a19c     64 4E 85 F1 | 	sub	fp, #100
1a1a0     02 1E 0E F2 | 	cmp	local01, #2 wz
1a1a4     2C 4E 05 A1 |  if_e	add	fp, #44
1a1a8     A7 40 68 AC |  if_e	wrlong	#32, fp
1a1ac     2C 4E 85 A1 |  if_e	sub	fp, #44
1a1b0                 | LR__2318
1a1b0                 | LR__2319
1a1b0     08 4E 05 F1 | 	add	fp, #8
1a1b4     A7 1E 02 FB | 	rdlong	local01, fp
1a1b8     18 1E 46 F0 | 	shr	local01, #24
1a1bc     03 1E 06 F5 | 	and	local01, #3
1a1c0     3C 4E 05 F1 | 	add	fp, #60
1a1c4     A7 1E 62 FC | 	wrlong	local01, fp
1a1c8     00 1E 06 F6 | 	mov	local01, #0
1a1cc     18 4E 85 F1 | 	sub	fp, #24
1a1d0     A7 22 0A FB | 	rdlong	local03, fp wz
1a1d4     2C 4E 85 F1 | 	sub	fp, #44
1a1d8     18 00 90 5D |  if_ne	jmp	#LR__2320
1a1dc     1C 4E 05 F1 | 	add	fp, #28
1a1e0     A7 24 02 FB | 	rdlong	local04, fp
1a1e4     1C 4E 85 F1 | 	sub	fp, #28
1a1e8     12 27 02 F6 | 	mov	local05, local04
1a1ec     0A 26 0E F2 | 	cmp	local05, #10 wz
1a1f0     04 00 90 AD |  if_e	jmp	#LR__2321
1a1f4                 | LR__2320
1a1f4     01 1E 66 F5 | 	xor	local01, #1
1a1f8                 | LR__2321
1a1f8     3C 4E 05 F1 | 	add	fp, #60
1a1fc     A7 1E 62 FC | 	wrlong	local01, fp
1a200     3C 4E 85 F1 | 	sub	fp, #60
1a204     00 1E 0E F2 | 	cmp	local01, #0 wz
1a208     0C 01 90 AD |  if_e	jmp	#LR__2323
1a20c     44 4E 05 F1 | 	add	fp, #68
1a210     A7 26 02 FB | 	rdlong	local05, fp
1a214     44 4E 85 F1 | 	sub	fp, #68
1a218     13 23 02 F6 | 	mov	local03, local05
1a21c     02 22 0E F2 | 	cmp	local03, #2 wz
1a220     F4 00 90 5D |  if_ne	jmp	#LR__2323
1a224     0C 4F 05 F1 | 	add	fp, #268
1a228     A7 28 02 FB | 	rdlong	local06, fp
1a22c     0C 4F 85 F1 | 	sub	fp, #268
1a230     14 25 02 F6 | 	mov	local04, local06
1a234     02 24 0E F2 | 	cmp	local04, #2 wz
1a238     DC 00 90 AD |  if_e	jmp	#LR__2323
1a23c     C0 4E 05 F1 | 	add	fp, #192
1a240     A7 12 02 FB | 	rdlong	arg01, fp
1a244     94 4E 85 F1 | 	sub	fp, #148
1a248     A7 14 02 FB | 	rdlong	arg02, fp
1a24c     14 4E 05 F1 | 	add	fp, #20
1a250     A7 16 02 FB | 	rdlong	arg03, fp
1a254     40 4E 85 F1 | 	sub	fp, #64
1a258     D4 43 B0 FD | 	call	#__system__emitsign_0383
1a25c     14 4F 05 F1 | 	add	fp, #276
1a260     A7 FA 61 FC | 	wrlong	result1, fp
1a264     14 4F 85 F1 | 	sub	fp, #276
1a268     00 FA 55 F2 | 	cmps	result1, #0 wc
1a26c     14 4F 05 C1 |  if_b	add	fp, #276
1a270     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a274     14 4F 85 C1 |  if_b	sub	fp, #276
1a278     6C 0B 90 CD |  if_b	jmp	#LR__2373
1a27c     C0 4E 05 F1 | 	add	fp, #192
1a280     A7 1E 02 FB | 	rdlong	local01, fp
1a284     54 4E 05 F1 | 	add	fp, #84
1a288     A7 26 02 FB | 	rdlong	local05, fp
1a28c     13 23 02 F6 | 	mov	local03, local05
1a290     13 1F 02 F1 | 	add	local01, local05
1a294     54 4E 85 F1 | 	sub	fp, #84
1a298     A7 1E 62 FC | 	wrlong	local01, fp
1a29c     58 4E 85 F1 | 	sub	fp, #88
1a2a0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a2a4     68 4E 85 F1 | 	sub	fp, #104
1a2a8     60 00 90 AD |  if_e	jmp	#LR__2322
1a2ac     68 4E 05 F1 | 	add	fp, #104
1a2b0     A7 1E 02 FB | 	rdlong	local01, fp
1a2b4     AC 4E 05 F1 | 	add	fp, #172
1a2b8     A7 22 02 FB | 	rdlong	local03, fp
1a2bc     11 1F 82 F1 | 	sub	local01, local03
1a2c0     AC 4E 85 F1 | 	sub	fp, #172
1a2c4     A7 1E 62 FC | 	wrlong	local01, fp
1a2c8     68 4E 85 F1 | 	sub	fp, #104
1a2cc     00 1E 56 F2 | 	cmps	local01, #0 wc
1a2d0     68 4E 05 C1 |  if_b	add	fp, #104
1a2d4     A7 00 68 CC |  if_b	wrlong	#0, fp
1a2d8     68 4E 85 C1 |  if_b	sub	fp, #104
1a2dc     08 4E 05 F1 | 	add	fp, #8
1a2e0     A7 1E 02 FB | 	rdlong	local01, fp
1a2e4     E8 1E 06 F4 | 	bitl	local01, #232
1a2e8     A7 1E 62 FC | 	wrlong	local01, fp
1a2ec     60 4E 05 F1 | 	add	fp, #96
1a2f0     A7 26 02 FB | 	rdlong	local05, fp
1a2f4     13 23 02 F6 | 	mov	local03, local05
1a2f8     08 22 66 F0 | 	shl	local03, #8
1a2fc     11 1F 42 F5 | 	or	local01, local03
1a300     60 4E 85 F1 | 	sub	fp, #96
1a304     A7 1E 62 FC | 	wrlong	local01, fp
1a308     08 4E 85 F1 | 	sub	fp, #8
1a30c                 | LR__2322
1a30c     3C 4E 05 F1 | 	add	fp, #60
1a310     A7 00 68 FC | 	wrlong	#0, fp
1a314     3C 4E 85 F1 | 	sub	fp, #60
1a318                 | LR__2323
1a318     0C 4E 05 F1 | 	add	fp, #12
1a31c     A7 12 02 FB | 	rdlong	arg01, fp
1a320     0C 4E 85 F1 | 	sub	fp, #12
1a324     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1a328     FF FF 3F FF 
1a32c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1a330     50 00 90 5D |  if_ne	jmp	#LR__2325
1a334     2C 4E 05 F1 | 	add	fp, #44
1a338     A7 1E 0A FB | 	rdlong	local01, fp wz
1a33c     2C 4E 85 F1 | 	sub	fp, #44
1a340     24 00 90 AD |  if_e	jmp	#LR__2324
1a344     C0 4E 05 F1 | 	add	fp, #192
1a348     A7 20 02 FB | 	rdlong	local02, fp
1a34c     10 23 02 F6 | 	mov	local03, local02
1a350     01 22 06 F1 | 	add	local03, #1
1a354     A7 22 62 FC | 	wrlong	local03, fp
1a358     94 4E 85 F1 | 	sub	fp, #148
1a35c     A7 24 02 FB | 	rdlong	local04, fp
1a360     2C 4E 85 F1 | 	sub	fp, #44
1a364     10 25 42 FC | 	wrbyte	local04, local02
1a368                 | LR__2324
1a368     C0 4E 05 F1 | 	add	fp, #192
1a36c     A7 12 02 FB | 	rdlong	arg01, fp
1a370     C0 4E 85 F1 | 	sub	fp, #192
1a374     41 01 00 FF 
1a378     F2 14 06 F6 | 	mov	arg02, ##@LR__4251
1a37c     18 EA BF FD | 	call	#__system____builtin_strcpy
1a380     A4 08 90 FD | 	jmp	#LR__2361
1a384                 | LR__2325
1a384     0C 4E 05 F1 | 	add	fp, #12
1a388     A7 20 02 FB | 	rdlong	local02, fp
1a38c     0C 4E 85 F1 | 	sub	fp, #12
1a390     10 13 02 F6 | 	mov	arg01, local02
1a394     38 1E B0 FD | 	call	#__system____builtin_ilogb
1a398     00 00 40 FF 
1a39c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1a3a0     50 00 90 5D |  if_ne	jmp	#LR__2327
1a3a4     2C 4E 05 F1 | 	add	fp, #44
1a3a8     A7 1E 0A FB | 	rdlong	local01, fp wz
1a3ac     2C 4E 85 F1 | 	sub	fp, #44
1a3b0     24 00 90 AD |  if_e	jmp	#LR__2326
1a3b4     C0 4E 05 F1 | 	add	fp, #192
1a3b8     A7 20 02 FB | 	rdlong	local02, fp
1a3bc     10 23 02 F6 | 	mov	local03, local02
1a3c0     01 22 06 F1 | 	add	local03, #1
1a3c4     A7 22 62 FC | 	wrlong	local03, fp
1a3c8     94 4E 85 F1 | 	sub	fp, #148
1a3cc     A7 24 02 FB | 	rdlong	local04, fp
1a3d0     2C 4E 85 F1 | 	sub	fp, #44
1a3d4     10 25 42 FC | 	wrbyte	local04, local02
1a3d8                 | LR__2326
1a3d8     C0 4E 05 F1 | 	add	fp, #192
1a3dc     A7 12 02 FB | 	rdlong	arg01, fp
1a3e0     C0 4E 85 F1 | 	sub	fp, #192
1a3e4     41 01 00 FF 
1a3e8     F6 14 06 F6 | 	mov	arg02, ##@LR__4252
1a3ec     A8 E9 BF FD | 	call	#__system____builtin_strcpy
1a3f0     34 08 90 FD | 	jmp	#LR__2361
1a3f4                 | LR__2327
1a3f4     10 4E 05 F1 | 	add	fp, #16
1a3f8     A7 1E 02 FB | 	rdlong	local01, fp
1a3fc     10 4E 85 F1 | 	sub	fp, #16
1a400     67 1E 0E F2 | 	cmp	local01, #103 wz
1a404     10 4E 05 51 |  if_ne	add	fp, #16
1a408     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a40c     10 4E 85 51 |  if_ne	sub	fp, #16
1a410     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1a414     94 01 90 5D |  if_ne	jmp	#LR__2332
1a418     0C 4E 05 F1 | 	add	fp, #12
1a41c     A7 12 02 FB | 	rdlong	arg01, fp
1a420     08 4E 05 F1 | 	add	fp, #8
1a424     A7 14 02 F6 | 	mov	arg02, fp
1a428     0C 4E 05 F1 | 	add	fp, #12
1a42c     A7 16 02 F6 | 	mov	arg03, fp
1a430     98 4E 05 F1 | 	add	fp, #152
1a434     A7 18 02 FB | 	rdlong	arg04, fp
1a438     9C 4E 85 F1 | 	sub	fp, #156
1a43c     A7 1A 02 FB | 	rdlong	arg05, fp
1a440     1C 4E 85 F1 | 	sub	fp, #28
1a444     F4 3F B0 FD | 	call	#__system__disassemble_0381
1a448     10 4E 05 F1 | 	add	fp, #16
1a44c     A7 1E 02 FB | 	rdlong	local01, fp
1a450     10 4E 85 F1 | 	sub	fp, #16
1a454     23 1E 0E F2 | 	cmp	local01, #35 wz
1a458     A0 00 90 5D |  if_ne	jmp	#LR__2329
1a45c     20 4E 05 F1 | 	add	fp, #32
1a460     A7 1E 02 FB | 	rdlong	local01, fp
1a464     98 4E 05 F1 | 	add	fp, #152
1a468     A7 22 02 FB | 	rdlong	local03, fp
1a46c     B8 4E 85 F1 | 	sub	fp, #184
1a470     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a474     24 4E 05 11 |  if_a	add	fp, #36
1a478     A7 02 68 1C |  if_a	wrlong	#1, fp
1a47c     24 4E 85 11 |  if_a	sub	fp, #36
1a480     A4 01 90 1D |  if_a	jmp	#LR__2335
1a484     20 4E 05 F1 | 	add	fp, #32
1a488     A7 1E 02 FB | 	rdlong	local01, fp
1a48c     20 4E 85 F1 | 	sub	fp, #32
1a490     00 1E 56 F2 | 	cmps	local01, #0 wc
1a494     2C 00 90 3D |  if_ae	jmp	#LR__2328
1a498     B8 4E 05 F1 | 	add	fp, #184
1a49c     A7 1E 02 FB | 	rdlong	local01, fp
1a4a0     0F 1F 62 F6 | 	neg	local01, local01
1a4a4     98 4E 85 F1 | 	sub	fp, #152
1a4a8     A7 22 02 FB | 	rdlong	local03, fp
1a4ac     20 4E 85 F1 | 	sub	fp, #32
1a4b0     0F 23 5A F2 | 	cmps	local03, local01 wcz
1a4b4     24 4E 05 E1 |  if_be	add	fp, #36
1a4b8     A7 02 68 EC |  if_be	wrlong	#1, fp
1a4bc     24 4E 85 E1 |  if_be	sub	fp, #36
1a4c0     64 01 90 FD | 	jmp	#LR__2335
1a4c4                 | LR__2328
1a4c4     20 4E 05 F1 | 	add	fp, #32
1a4c8     A7 1E 02 FB | 	rdlong	local01, fp
1a4cc     20 4E 85 F1 | 	sub	fp, #32
1a4d0     01 1E 56 F2 | 	cmps	local01, #1 wc
1a4d4     50 01 90 CD |  if_b	jmp	#LR__2335
1a4d8     B8 4E 05 F1 | 	add	fp, #184
1a4dc     A7 1E 02 FB | 	rdlong	local01, fp
1a4e0     98 4E 85 F1 | 	sub	fp, #152
1a4e4     A7 22 02 FB | 	rdlong	local03, fp
1a4e8     11 1F 82 F1 | 	sub	local01, local03
1a4ec     98 4E 05 F1 | 	add	fp, #152
1a4f0     A7 1E 62 FC | 	wrlong	local01, fp
1a4f4     B8 4E 85 F1 | 	sub	fp, #184
1a4f8     2C 01 90 FD | 	jmp	#LR__2335
1a4fc                 | LR__2329
1a4fc     00 1E 06 F6 | 	mov	local01, #0
1a500     08 4E 05 F1 | 	add	fp, #8
1a504     A7 20 02 FB | 	rdlong	local02, fp
1a508     1C 20 46 F0 | 	shr	local02, #28
1a50c     01 20 0E F5 | 	and	local02, #1 wz
1a510     01 1E 06 A6 |  if_e	mov	local01, #1
1a514     2C 4E 05 F1 | 	add	fp, #44
1a518     A7 1E 62 FC | 	wrlong	local01, fp
1a51c     14 4E 85 F1 | 	sub	fp, #20
1a520     A7 1E 02 FB | 	rdlong	local01, fp
1a524     98 4E 05 F1 | 	add	fp, #152
1a528     A7 22 02 FB | 	rdlong	local03, fp
1a52c     B8 4E 85 F1 | 	sub	fp, #184
1a530     11 1F 52 F2 | 	cmps	local01, local03 wc
1a534     18 00 90 3D |  if_ae	jmp	#LR__2330
1a538     20 4E 05 F1 | 	add	fp, #32
1a53c     A7 24 02 FB | 	rdlong	local04, fp
1a540     20 4E 85 F1 | 	sub	fp, #32
1a544     FF FF 7F FF 
1a548     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1a54c     10 00 90 3D |  if_ae	jmp	#LR__2331
1a550                 | LR__2330
1a550     24 4E 05 F1 | 	add	fp, #36
1a554     A7 02 68 FC | 	wrlong	#1, fp
1a558     24 4E 85 F1 | 	sub	fp, #36
1a55c     C8 00 90 FD | 	jmp	#LR__2335
1a560                 | LR__2331
1a560     B8 4E 05 F1 | 	add	fp, #184
1a564     A7 24 02 FB | 	rdlong	local04, fp
1a568     98 4E 85 F1 | 	sub	fp, #152
1a56c     A7 22 02 FB | 	rdlong	local03, fp
1a570     11 25 82 F1 | 	sub	local04, local03
1a574     98 4E 05 F1 | 	add	fp, #152
1a578     A7 24 62 FC | 	wrlong	local04, fp
1a57c     AC 4E 85 F1 | 	sub	fp, #172
1a580     A7 12 02 FB | 	rdlong	arg01, fp
1a584     08 4E 05 F1 | 	add	fp, #8
1a588     A7 14 02 F6 | 	mov	arg02, fp
1a58c     0C 4E 05 F1 | 	add	fp, #12
1a590     A7 16 02 F6 | 	mov	arg03, fp
1a594     12 19 62 F6 | 	neg	arg04, local04
1a598     04 4E 85 F1 | 	sub	fp, #4
1a59c     A7 1A 02 FB | 	rdlong	arg05, fp
1a5a0     1C 4E 85 F1 | 	sub	fp, #28
1a5a4     94 3E B0 FD | 	call	#__system__disassemble_0381
1a5a8     7C 00 90 FD | 	jmp	#LR__2335
1a5ac                 | LR__2332
1a5ac     24 4E 05 F1 | 	add	fp, #36
1a5b0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a5b4     24 4E 85 F1 | 	sub	fp, #36
1a5b8     34 00 90 AD |  if_e	jmp	#LR__2333
1a5bc     0C 4E 05 F1 | 	add	fp, #12
1a5c0     A7 12 02 FB | 	rdlong	arg01, fp
1a5c4     08 4E 05 F1 | 	add	fp, #8
1a5c8     A7 14 02 F6 | 	mov	arg02, fp
1a5cc     0C 4E 05 F1 | 	add	fp, #12
1a5d0     A7 16 02 F6 | 	mov	arg03, fp
1a5d4     98 4E 05 F1 | 	add	fp, #152
1a5d8     A7 18 02 FB | 	rdlong	arg04, fp
1a5dc     9C 4E 85 F1 | 	sub	fp, #156
1a5e0     A7 1A 02 FB | 	rdlong	arg05, fp
1a5e4     1C 4E 85 F1 | 	sub	fp, #28
1a5e8     50 3E B0 FD | 	call	#__system__disassemble_0381
1a5ec     38 00 90 FD | 	jmp	#LR__2334
1a5f0                 | LR__2333
1a5f0     0C 4E 05 F1 | 	add	fp, #12
1a5f4     A7 12 02 FB | 	rdlong	arg01, fp
1a5f8     08 4E 05 F1 | 	add	fp, #8
1a5fc     A7 14 02 F6 | 	mov	arg02, fp
1a600     0C 4E 05 F1 | 	add	fp, #12
1a604     A7 16 02 F6 | 	mov	arg03, fp
1a608     98 4E 05 F1 | 	add	fp, #152
1a60c     A7 24 02 FB | 	rdlong	local04, fp
1a610     01 24 06 F1 | 	add	local04, #1
1a614     12 19 62 F6 | 	neg	arg04, local04
1a618     9C 4E 85 F1 | 	sub	fp, #156
1a61c     A7 1A 02 FB | 	rdlong	arg05, fp
1a620     1C 4E 85 F1 | 	sub	fp, #28
1a624     14 3E B0 FD | 	call	#__system__disassemble_0381
1a628                 | LR__2334
1a628                 | LR__2335
1a628     1C 4E 05 F1 | 	add	fp, #28
1a62c     A7 1E 02 FB | 	rdlong	local01, fp
1a630     1C 4E 85 F1 | 	sub	fp, #28
1a634     02 1E 0E F2 | 	cmp	local01, #2 wz
1a638     4C 00 90 5D |  if_ne	jmp	#LR__2338
1a63c     1C 4E 05 F1 | 	add	fp, #28
1a640     A7 20 68 FC | 	wrlong	#16, fp
1a644     1C 4E 85 F1 | 	sub	fp, #28
1a648                 | LR__2336
1a648     14 4E 05 F1 | 	add	fp, #20
1a64c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a650     14 4E 85 F1 | 	sub	fp, #20
1a654     30 00 90 AD |  if_e	jmp	#LR__2337
1a658     14 4E 05 F1 | 	add	fp, #20
1a65c     A7 22 02 FB | 	rdlong	local03, fp
1a660     14 4E 85 F1 | 	sub	fp, #20
1a664     00 80 00 FF 
1a668     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1a66c     18 00 90 3D |  if_ae	jmp	#LR__2337
1a670     14 4E 05 F1 | 	add	fp, #20
1a674     A7 1E 02 FB | 	rdlong	local01, fp
1a678     01 1E 66 F0 | 	shl	local01, #1
1a67c     A7 1E 62 FC | 	wrlong	local01, fp
1a680     14 4E 85 F1 | 	sub	fp, #20
1a684     C0 FF 9F FD | 	jmp	#LR__2336
1a688                 | LR__2337
1a688                 | LR__2338
1a688     70 4E 05 F1 | 	add	fp, #112
1a68c     A7 12 02 F6 | 	mov	arg01, fp
1a690     5C 4E 85 F1 | 	sub	fp, #92
1a694     A7 14 02 FB | 	rdlong	arg02, fp
1a698     08 4E 05 F1 | 	add	fp, #8
1a69c     A7 16 02 FB | 	rdlong	arg03, fp
1a6a0     A0 4E 05 F1 | 	add	fp, #160
1a6a4     A7 1A 02 FB | 	rdlong	arg05, fp
1a6a8     BC 4E 85 F1 | 	sub	fp, #188
1a6ac     01 18 06 F6 | 	mov	arg04, #1
1a6b0     14 3D B0 FD | 	call	#__system___uitoa
1a6b4     58 4E 05 F1 | 	add	fp, #88
1a6b8     A7 FA 61 FC | 	wrlong	result1, fp
1a6bc     38 4E 85 F1 | 	sub	fp, #56
1a6c0     A7 1E 02 FB | 	rdlong	local01, fp
1a6c4     20 4E 85 F1 | 	sub	fp, #32
1a6c8     00 1E 56 F2 | 	cmps	local01, #0 wc
1a6cc     50 00 90 3D |  if_ae	jmp	#LR__2339
1a6d0     60 4E 05 F1 | 	add	fp, #96
1a6d4     A7 5A 68 FC | 	wrlong	#45, fp
1a6d8     50 4E 05 F1 | 	add	fp, #80
1a6dc     A7 12 02 F6 | 	mov	arg01, fp
1a6e0     90 4E 85 F1 | 	sub	fp, #144
1a6e4     A7 22 02 FB | 	rdlong	local03, fp
1a6e8     11 15 62 F6 | 	neg	arg02, local03
1a6ec     18 4E 05 F1 | 	add	fp, #24
1a6f0     A7 18 02 FB | 	rdlong	arg04, fp
1a6f4     84 4E 05 F1 | 	add	fp, #132
1a6f8     A7 28 02 FB | 	rdlong	local06, fp
1a6fc     BC 4E 85 F1 | 	sub	fp, #188
1a700     14 25 02 F6 | 	mov	local04, local06
1a704     0A 16 06 F6 | 	mov	arg03, #10
1a708     12 1B 02 F6 | 	mov	arg05, local04
1a70c     B8 3C B0 FD | 	call	#__system___uitoa
1a710     5C 4E 05 F1 | 	add	fp, #92
1a714     A7 FA 61 FC | 	wrlong	result1, fp
1a718     5C 4E 85 F1 | 	sub	fp, #92
1a71c     48 00 90 FD | 	jmp	#LR__2340
1a720                 | LR__2339
1a720     60 4E 05 F1 | 	add	fp, #96
1a724     A7 56 68 FC | 	wrlong	#43, fp
1a728     50 4E 05 F1 | 	add	fp, #80
1a72c     A7 12 02 F6 | 	mov	arg01, fp
1a730     90 4E 85 F1 | 	sub	fp, #144
1a734     A7 14 02 FB | 	rdlong	arg02, fp
1a738     18 4E 05 F1 | 	add	fp, #24
1a73c     A7 18 02 FB | 	rdlong	arg04, fp
1a740     84 4E 05 F1 | 	add	fp, #132
1a744     A7 28 02 FB | 	rdlong	local06, fp
1a748     BC 4E 85 F1 | 	sub	fp, #188
1a74c     14 25 02 F6 | 	mov	local04, local06
1a750     0A 16 06 F6 | 	mov	arg03, #10
1a754     12 1B 02 F6 | 	mov	arg05, local04
1a758     6C 3C B0 FD | 	call	#__system___uitoa
1a75c     5C 4E 05 F1 | 	add	fp, #92
1a760     A7 FA 61 FC | 	wrlong	result1, fp
1a764     5C 4E 85 F1 | 	sub	fp, #92
1a768                 | LR__2340
1a768     24 4E 05 F1 | 	add	fp, #36
1a76c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a770     24 4E 85 F1 | 	sub	fp, #36
1a774     2C 00 90 AD |  if_e	jmp	#LR__2341
1a778     50 4E 05 F1 | 	add	fp, #80
1a77c     A7 00 68 FC | 	wrlong	#0, fp
1a780     04 4E 85 F1 | 	sub	fp, #4
1a784     A7 00 68 FC | 	wrlong	#0, fp
1a788     6C 4E 05 F1 | 	add	fp, #108
1a78c     A7 1E 02 FB | 	rdlong	local01, fp
1a790     01 1E 06 F1 | 	add	local01, #1
1a794     64 4E 85 F1 | 	sub	fp, #100
1a798     A7 1E 62 FC | 	wrlong	local01, fp
1a79c     54 4E 85 F1 | 	sub	fp, #84
1a7a0     88 00 90 FD | 	jmp	#LR__2344
1a7a4                 | LR__2341
1a7a4     20 4E 05 F1 | 	add	fp, #32
1a7a8     A7 1E 02 FB | 	rdlong	local01, fp
1a7ac     20 4E 85 F1 | 	sub	fp, #32
1a7b0     00 1E 56 F2 | 	cmps	local01, #0 wc
1a7b4     40 00 90 3D |  if_ae	jmp	#LR__2342
1a7b8     20 4E 05 F1 | 	add	fp, #32
1a7bc     A7 20 02 FB | 	rdlong	local02, fp
1a7c0     30 4E 05 F1 | 	add	fp, #48
1a7c4     A7 20 62 FC | 	wrlong	local02, fp
1a7c8     04 4E 85 F1 | 	sub	fp, #4
1a7cc     A7 20 62 FC | 	wrlong	local02, fp
1a7d0     2C 4E 85 F1 | 	sub	fp, #44
1a7d4     A7 1E 02 FB | 	rdlong	local01, fp
1a7d8     98 4E 05 F1 | 	add	fp, #152
1a7dc     A7 22 02 FB | 	rdlong	local03, fp
1a7e0     11 1F 02 F1 | 	add	local01, local03
1a7e4     01 1E 06 F1 | 	add	local01, #1
1a7e8     64 4E 85 F1 | 	sub	fp, #100
1a7ec     A7 1E 62 FC | 	wrlong	local01, fp
1a7f0     54 4E 85 F1 | 	sub	fp, #84
1a7f4     34 00 90 FD | 	jmp	#LR__2343
1a7f8                 | LR__2342
1a7f8     4C 4E 05 F1 | 	add	fp, #76
1a7fc     A7 00 68 FC | 	wrlong	#0, fp
1a800     2C 4E 85 F1 | 	sub	fp, #44
1a804     A7 1E 02 FB | 	rdlong	local01, fp
1a808     30 4E 05 F1 | 	add	fp, #48
1a80c     A7 1E 62 FC | 	wrlong	local01, fp
1a810     68 4E 05 F1 | 	add	fp, #104
1a814     A7 22 02 FB | 	rdlong	local03, fp
1a818     11 1F 02 F1 | 	add	local01, local03
1a81c     01 1E 06 F1 | 	add	local01, #1
1a820     64 4E 85 F1 | 	sub	fp, #100
1a824     A7 1E 62 FC | 	wrlong	local01, fp
1a828     54 4E 85 F1 | 	sub	fp, #84
1a82c                 | LR__2343
1a82c                 | LR__2344
1a82c     54 4E 05 F1 | 	add	fp, #84
1a830     A7 1E 02 FB | 	rdlong	local01, fp
1a834     08 4E 85 F1 | 	sub	fp, #8
1a838     A7 22 02 FB | 	rdlong	local03, fp
1a83c     11 1F 82 F1 | 	sub	local01, local03
1a840     01 1E 06 F1 | 	add	local01, #1
1a844     24 4E 85 F1 | 	sub	fp, #36
1a848     A7 1E 62 FC | 	wrlong	local01, fp
1a84c     04 4E 05 F1 | 	add	fp, #4
1a850     A7 1E 0A FB | 	rdlong	local01, fp wz
1a854     2C 4E 85 F1 | 	sub	fp, #44
1a858     28 4E 05 51 |  if_ne	add	fp, #40
1a85c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a860     01 22 06 51 |  if_ne	add	local03, #1
1a864     A7 22 62 5C |  if_ne	wrlong	local03, fp
1a868     28 4E 85 51 |  if_ne	sub	fp, #40
1a86c     1C 4E 05 F1 | 	add	fp, #28
1a870     A7 1E 02 FB | 	rdlong	local01, fp
1a874     1C 4E 85 F1 | 	sub	fp, #28
1a878     10 1E 0E F2 | 	cmp	local01, #16 wz
1a87c     28 4E 05 A1 |  if_e	add	fp, #40
1a880     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a884     02 1E 06 A1 |  if_e	add	local01, #2
1a888     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a88c     28 4E 85 A1 |  if_e	sub	fp, #40
1a890     24 4E 05 F1 | 	add	fp, #36
1a894     A7 1E 0A FB | 	rdlong	local01, fp wz
1a898     24 4E 85 F1 | 	sub	fp, #36
1a89c     28 00 90 AD |  if_e	jmp	#LR__2345
1a8a0     28 4E 05 F1 | 	add	fp, #40
1a8a4     A7 1E 02 FB | 	rdlong	local01, fp
1a8a8     02 22 06 F6 | 	mov	local03, #2
1a8ac     34 4E 05 F1 | 	add	fp, #52
1a8b0     A7 26 02 FB | 	rdlong	local05, fp
1a8b4     13 23 02 F1 | 	add	local03, local05
1a8b8     11 1F 02 F1 | 	add	local01, local03
1a8bc     34 4E 85 F1 | 	sub	fp, #52
1a8c0     A7 1E 62 FC | 	wrlong	local01, fp
1a8c4     28 4E 85 F1 | 	sub	fp, #40
1a8c8                 | LR__2345
1a8c8     28 4E 05 F1 | 	add	fp, #40
1a8cc     A7 1E 02 FB | 	rdlong	local01, fp
1a8d0     28 4E 85 F1 | 	sub	fp, #40
1a8d4     41 1E 56 F2 | 	cmps	local01, #65 wc
1a8d8     01 FA 65 36 |  if_ae	neg	result1, #1
1a8dc     08 05 90 3D |  if_ae	jmp	#LR__2373
1a8e0     3C 4E 05 F1 | 	add	fp, #60
1a8e4     A7 1E 0A FB | 	rdlong	local01, fp wz
1a8e8     3C 4E 85 F1 | 	sub	fp, #60
1a8ec     60 00 90 AD |  if_e	jmp	#LR__2346
1a8f0     C0 4E 05 F1 | 	add	fp, #192
1a8f4     A7 12 02 FB | 	rdlong	arg01, fp
1a8f8     94 4E 85 F1 | 	sub	fp, #148
1a8fc     A7 14 02 FB | 	rdlong	arg02, fp
1a900     14 4E 05 F1 | 	add	fp, #20
1a904     A7 16 02 FB | 	rdlong	arg03, fp
1a908     40 4E 85 F1 | 	sub	fp, #64
1a90c     20 3D B0 FD | 	call	#__system__emitsign_0383
1a910     18 4F 05 F1 | 	add	fp, #280
1a914     A7 FA 61 FC | 	wrlong	result1, fp
1a918     18 4F 85 F1 | 	sub	fp, #280
1a91c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a920     18 4F 05 C1 |  if_b	add	fp, #280
1a924     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a928     18 4F 85 C1 |  if_b	sub	fp, #280
1a92c     B8 04 90 CD |  if_b	jmp	#LR__2373
1a930     C0 4E 05 F1 | 	add	fp, #192
1a934     A7 1E 02 FB | 	rdlong	local01, fp
1a938     58 4E 05 F1 | 	add	fp, #88
1a93c     A7 22 02 FB | 	rdlong	local03, fp
1a940     11 1F 02 F1 | 	add	local01, local03
1a944     58 4E 85 F1 | 	sub	fp, #88
1a948     A7 1E 62 FC | 	wrlong	local01, fp
1a94c     C0 4E 85 F1 | 	sub	fp, #192
1a950                 | LR__2346
1a950     4C 4E 05 F1 | 	add	fp, #76
1a954     A7 1E 02 FB | 	rdlong	local01, fp
1a958     34 4E 85 F1 | 	sub	fp, #52
1a95c     A7 1E 62 FC | 	wrlong	local01, fp
1a960     18 4E 85 F1 | 	sub	fp, #24
1a964     97 9E 48 FB | 	callpa	#(@LR__2352-@LR__2347)>>2,fcache_load_ptr_
1a968                 | LR__2347
1a968     18 4E 05 F1 | 	add	fp, #24
1a96c     A7 20 02 FB | 	rdlong	local02, fp
1a970     3C 4E 05 F1 | 	add	fp, #60
1a974     A7 26 02 FB | 	rdlong	local05, fp
1a978     54 4E 85 F1 | 	sub	fp, #84
1a97c     13 21 52 F2 | 	cmps	local02, local05 wc
1a980     20 01 90 3D |  if_ae	jmp	#LR__2353
1a984     18 4E 05 F1 | 	add	fp, #24
1a988     A7 28 02 FB | 	rdlong	local06, fp
1a98c     18 4E 85 F1 | 	sub	fp, #24
1a990     00 28 56 F2 | 	cmps	local06, #0 wc
1a994     58 00 90 CD |  if_b	jmp	#LR__2348
1a998     18 4E 05 F1 | 	add	fp, #24
1a99c     A7 28 02 FB | 	rdlong	local06, fp
1a9a0     40 4E 05 F1 | 	add	fp, #64
1a9a4     A7 2A 02 FB | 	rdlong	local07, fp
1a9a8     58 4E 85 F1 | 	sub	fp, #88
1a9ac     15 29 52 F2 | 	cmps	local06, local07 wc
1a9b0     3C 00 90 3D |  if_ae	jmp	#LR__2348
1a9b4     C0 4E 05 F1 | 	add	fp, #192
1a9b8     A7 2C 02 FB | 	rdlong	local08, fp
1a9bc     16 2B 02 F6 | 	mov	local07, local08
1a9c0     01 2A 06 F1 | 	add	local07, #1
1a9c4     A7 2A 62 FC | 	wrlong	local07, fp
1a9c8     A8 4E 85 F1 | 	sub	fp, #168
1a9cc     A7 2A 02 FB | 	rdlong	local07, fp
1a9d0     15 2F 02 F6 | 	mov	local09, local07
1a9d4     58 4E 05 F1 | 	add	fp, #88
1a9d8     A7 30 02 F6 | 	mov	local10, fp
1a9dc     A7 2E 02 F1 | 	add	local09, fp
1a9e0     17 33 C2 FA | 	rdbyte	local11, local09
1a9e4     16 33 42 FC | 	wrbyte	local11, local08
1a9e8     70 4E 85 F1 | 	sub	fp, #112
1a9ec     20 00 90 FD | 	jmp	#LR__2349
1a9f0                 | LR__2348
1a9f0     C0 4E 05 F1 | 	add	fp, #192
1a9f4     A7 2C 02 FB | 	rdlong	local08, fp
1a9f8     16 2F 02 F6 | 	mov	local09, local08
1a9fc     01 2E 06 F1 | 	add	local09, #1
1aa00     A7 2E 62 FC | 	wrlong	local09, fp
1aa04     C0 4E 85 F1 | 	sub	fp, #192
1aa08     30 2E 06 F6 | 	mov	local09, #48
1aa0c     16 61 48 FC | 	wrbyte	#48, local08
1aa10                 | LR__2349
1aa10     18 4E 05 F1 | 	add	fp, #24
1aa14     A7 28 02 FB | 	rdlong	local06, fp
1aa18     38 4E 05 F1 | 	add	fp, #56
1aa1c     A7 34 02 FB | 	rdlong	local12, fp
1aa20     50 4E 85 F1 | 	sub	fp, #80
1aa24     1A 29 0A F2 | 	cmp	local06, local12 wz
1aa28     5C 00 90 5D |  if_ne	jmp	#LR__2351
1aa2c     10 4F 05 F1 | 	add	fp, #272
1aa30     A7 2A 02 FB | 	rdlong	local07, fp
1aa34     10 4F 85 F1 | 	sub	fp, #272
1aa38     15 2F 0A F6 | 	mov	local09, local07 wz
1aa3c     28 00 90 5D |  if_ne	jmp	#LR__2350
1aa40     54 4E 05 F1 | 	add	fp, #84
1aa44     A7 32 02 FB | 	rdlong	local11, fp
1aa48     19 31 02 F6 | 	mov	local10, local11
1aa4c     01 30 86 F1 | 	sub	local10, #1
1aa50     3C 4E 85 F1 | 	sub	fp, #60
1aa54     A7 36 02 FB | 	rdlong	local13, fp
1aa58     18 4E 85 F1 | 	sub	fp, #24
1aa5c     1B 39 02 F6 | 	mov	local14, local13
1aa60     18 39 52 F2 | 	cmps	local14, local10 wc
1aa64     20 00 90 3D |  if_ae	jmp	#LR__2351
1aa68                 | LR__2350
1aa68     C0 4E 05 F1 | 	add	fp, #192
1aa6c     A7 2C 02 FB | 	rdlong	local08, fp
1aa70     16 35 02 F6 | 	mov	local12, local08
1aa74     01 34 06 F1 | 	add	local12, #1
1aa78     A7 34 62 FC | 	wrlong	local12, fp
1aa7c     C0 4E 85 F1 | 	sub	fp, #192
1aa80     2E 2E 06 F6 | 	mov	local09, #46
1aa84     16 5D 48 FC | 	wrbyte	#46, local08
1aa88                 | LR__2351
1aa88     18 4E 05 F1 | 	add	fp, #24
1aa8c     A7 3A 02 FB | 	rdlong	local15, fp
1aa90     1D 35 02 F6 | 	mov	local12, local15
1aa94     01 34 06 F1 | 	add	local12, #1
1aa98     A7 34 62 FC | 	wrlong	local12, fp
1aa9c     18 4E 85 F1 | 	sub	fp, #24
1aaa0     C4 FE 9F FD | 	jmp	#LR__2347
1aaa4                 | LR__2352
1aaa4                 | LR__2353
1aaa4     34 4E 05 F1 | 	add	fp, #52
1aaa8     A7 1E 0A FB | 	rdlong	local01, fp wz
1aaac     34 4E 85 F1 | 	sub	fp, #52
1aab0     A0 00 90 AD |  if_e	jmp	#LR__2357
1aab4     C0 4E 05 F1 | 	add	fp, #192
1aab8     A7 1E 02 FB | 	rdlong	local01, fp
1aabc     01 1E 86 F1 | 	sub	local01, #1
1aac0     A7 1E 62 FC | 	wrlong	local01, fp
1aac4     C0 4E 85 F1 | 	sub	fp, #192
1aac8     97 26 48 FB | 	callpa	#(@LR__2355-@LR__2354)>>2,fcache_load_ptr_
1aacc                 | LR__2354
1aacc     C0 4E 05 F1 | 	add	fp, #192
1aad0     A7 1E 02 FB | 	rdlong	local01, fp
1aad4     04 4E 05 F1 | 	add	fp, #4
1aad8     A7 22 02 FB | 	rdlong	local03, fp
1aadc     C4 4E 85 F1 | 	sub	fp, #196
1aae0     11 1F 5A F2 | 	cmps	local01, local03 wcz
1aae4     30 00 90 ED |  if_be	jmp	#LR__2356
1aae8     C0 4E 05 F1 | 	add	fp, #192
1aaec     A7 28 02 FB | 	rdlong	local06, fp
1aaf0     C0 4E 85 F1 | 	sub	fp, #192
1aaf4     14 25 C2 FA | 	rdbyte	local04, local06
1aaf8     30 24 0E F2 | 	cmp	local04, #48 wz
1aafc     18 00 90 5D |  if_ne	jmp	#LR__2356
1ab00     C0 4E 05 F1 | 	add	fp, #192
1ab04     A7 1E 02 FB | 	rdlong	local01, fp
1ab08     01 1E 86 F1 | 	sub	local01, #1
1ab0c     A7 1E 62 FC | 	wrlong	local01, fp
1ab10     C0 4E 85 F1 | 	sub	fp, #192
1ab14     B4 FF 9F FD | 	jmp	#LR__2354
1ab18                 | LR__2355
1ab18                 | LR__2356
1ab18     C0 4E 05 F1 | 	add	fp, #192
1ab1c     A7 20 02 FB | 	rdlong	local02, fp
1ab20     C0 4E 85 F1 | 	sub	fp, #192
1ab24     10 1F C2 FA | 	rdbyte	local01, local02
1ab28     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ab2c     C0 4E 05 A1 |  if_e	add	fp, #192
1ab30     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ab34     01 1E 86 A1 |  if_e	sub	local01, #1
1ab38     A7 1E 62 AC |  if_e	wrlong	local01, fp
1ab3c     C0 4E 85 A1 |  if_e	sub	fp, #192
1ab40     C0 4E 05 F1 | 	add	fp, #192
1ab44     A7 22 02 FB | 	rdlong	local03, fp
1ab48     01 22 06 F1 | 	add	local03, #1
1ab4c     A7 22 62 FC | 	wrlong	local03, fp
1ab50     C0 4E 85 F1 | 	sub	fp, #192
1ab54                 | LR__2357
1ab54     24 4E 05 F1 | 	add	fp, #36
1ab58     A7 1E 0A FB | 	rdlong	local01, fp wz
1ab5c     24 4E 85 F1 | 	sub	fp, #36
1ab60     B4 00 90 AD |  if_e	jmp	#LR__2360
1ab64     C0 4E 05 F1 | 	add	fp, #192
1ab68     A7 20 02 FB | 	rdlong	local02, fp
1ab6c     10 23 02 F6 | 	mov	local03, local02
1ab70     01 22 06 F1 | 	add	local03, #1
1ab74     A7 22 62 FC | 	wrlong	local03, fp
1ab78     90 4E 85 F1 | 	sub	fp, #144
1ab7c     A7 24 02 FB | 	rdlong	local04, fp
1ab80     10 25 42 FC | 	wrbyte	local04, local02
1ab84     90 4E 05 F1 | 	add	fp, #144
1ab88     A7 20 02 FB | 	rdlong	local02, fp
1ab8c     10 23 02 F6 | 	mov	local03, local02
1ab90     01 22 06 F1 | 	add	local03, #1
1ab94     A7 22 62 FC | 	wrlong	local03, fp
1ab98     60 4E 85 F1 | 	sub	fp, #96
1ab9c     A7 24 02 FB | 	rdlong	local04, fp
1aba0     10 25 42 FC | 	wrbyte	local04, local02
1aba4     48 4E 85 F1 | 	sub	fp, #72
1aba8     A7 00 68 FC | 	wrlong	#0, fp
1abac     18 4E 85 F1 | 	sub	fp, #24
1abb0                 | LR__2358
1abb0     18 4E 05 F1 | 	add	fp, #24
1abb4     A7 20 02 FB | 	rdlong	local02, fp
1abb8     44 4E 05 F1 | 	add	fp, #68
1abbc     A7 26 02 FB | 	rdlong	local05, fp
1abc0     5C 4E 85 F1 | 	sub	fp, #92
1abc4     13 21 52 F2 | 	cmps	local02, local05 wc
1abc8     4C 00 90 3D |  if_ae	jmp	#LR__2359
1abcc     C0 4E 05 F1 | 	add	fp, #192
1abd0     A7 2C 02 FB | 	rdlong	local08, fp
1abd4     16 35 02 F6 | 	mov	local12, local08
1abd8     01 34 06 F1 | 	add	local12, #1
1abdc     A7 34 62 FC | 	wrlong	local12, fp
1abe0     A8 4E 85 F1 | 	sub	fp, #168
1abe4     A7 2A 02 FB | 	rdlong	local07, fp
1abe8     15 2F 02 F6 | 	mov	local09, local07
1abec     98 4E 05 F1 | 	add	fp, #152
1abf0     A7 30 02 F6 | 	mov	local10, fp
1abf4     A7 2E 02 F1 | 	add	local09, fp
1abf8     17 33 C2 FA | 	rdbyte	local11, local09
1abfc     16 33 42 FC | 	wrbyte	local11, local08
1ac00     98 4E 85 F1 | 	sub	fp, #152
1ac04     A7 34 02 FB | 	rdlong	local12, fp
1ac08     01 34 06 F1 | 	add	local12, #1
1ac0c     A7 34 62 FC | 	wrlong	local12, fp
1ac10     18 4E 85 F1 | 	sub	fp, #24
1ac14     98 FF 9F FD | 	jmp	#LR__2358
1ac18                 | LR__2359
1ac18                 | LR__2360
1ac18     C0 4E 05 F1 | 	add	fp, #192
1ac1c     A7 1E 02 FB | 	rdlong	local01, fp
1ac20     C0 4E 85 F1 | 	sub	fp, #192
1ac24     0F 01 48 FC | 	wrbyte	#0, local01
1ac28                 | LR__2361
1ac28     6C 4E 05 F1 | 	add	fp, #108
1ac2c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac30     6C 4E 85 F1 | 	sub	fp, #108
1ac34     90 01 90 AD |  if_e	jmp	#LR__2372
1ac38     48 4E 05 F1 | 	add	fp, #72
1ac3c     A7 22 0A FB | 	rdlong	local03, fp wz
1ac40     48 4E 85 F1 | 	sub	fp, #72
1ac44     80 01 90 AD |  if_e	jmp	#LR__2372
1ac48     C4 4E 05 F1 | 	add	fp, #196
1ac4c     A7 12 02 FB | 	rdlong	arg01, fp
1ac50     C4 4E 85 F1 | 	sub	fp, #196
1ac54     09 3D 02 F6 | 	mov	local16, arg01
1ac58     97 06 48 FB | 	callpa	#(@LR__2363-@LR__2362)>>2,fcache_load_ptr_
1ac5c                 | LR__2362
1ac5c     1E FB C9 FA | 	rdbyte	result1, local16 wz
1ac60     01 3C 06 51 |  if_ne	add	local16, #1
1ac64     F4 FF 9F 5D |  if_ne	jmp	#LR__2362
1ac68                 | LR__2363
1ac68     09 3D 82 F1 | 	sub	local16, arg01
1ac6c     1E 25 02 F6 | 	mov	local04, local16
1ac70     6C 4E 05 F1 | 	add	fp, #108
1ac74     A7 28 02 FB | 	rdlong	local06, fp
1ac78     6C 4E 85 F1 | 	sub	fp, #108
1ac7c     14 25 5A F2 | 	cmps	local04, local06 wcz
1ac80     44 01 90 ED |  if_be	jmp	#LR__2372
1ac84     C4 4E 05 F1 | 	add	fp, #196
1ac88     A7 1E 02 FB | 	rdlong	local01, fp
1ac8c     5C 4E 05 F1 | 	add	fp, #92
1ac90     A7 1E 62 FC | 	wrlong	local01, fp
1ac94     FC 4E 85 F1 | 	sub	fp, #252
1ac98     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac9c     24 4E 85 F1 | 	sub	fp, #36
1aca0     20 00 90 AD |  if_e	jmp	#LR__2364
1aca4     B8 4E 05 F1 | 	add	fp, #184
1aca8     A7 00 68 FC | 	wrlong	#0, fp
1acac     4C 4E 85 F1 | 	sub	fp, #76
1acb0     A7 1E 02 FB | 	rdlong	local01, fp
1acb4     B0 4E 05 F1 | 	add	fp, #176
1acb8     A7 1E 62 FC | 	wrlong	local01, fp
1acbc     1C 4F 85 F1 | 	sub	fp, #284
1acc0     24 00 90 FD | 	jmp	#LR__2365
1acc4                 | LR__2364
1acc4     6C 4E 05 F1 | 	add	fp, #108
1acc8     A7 1E 02 FB | 	rdlong	local01, fp
1accc     01 1E 86 F1 | 	sub	local01, #1
1acd0     4C 4E 05 F1 | 	add	fp, #76
1acd4     A7 22 02 FB | 	rdlong	local03, fp
1acd8     11 1F 82 F1 | 	sub	local01, local03
1acdc     64 4E 05 F1 | 	add	fp, #100
1ace0     A7 1E 62 FC | 	wrlong	local01, fp
1ace4     1C 4F 85 F1 | 	sub	fp, #284
1ace8                 | LR__2365
1ace8     97 20 48 FB | 	callpa	#(@LR__2367-@LR__2366)>>2,fcache_load_ptr_
1acec                 | LR__2366
1acec     1C 4F 05 F1 | 	add	fp, #284
1acf0     A7 1E 0A FB | 	rdlong	local01, fp wz
1acf4     1C 4F 85 F1 | 	sub	fp, #284
1acf8     30 00 90 AD |  if_e	jmp	#LR__2368
1acfc     20 4F 05 F1 | 	add	fp, #288
1ad00     A7 20 02 FB | 	rdlong	local02, fp
1ad04     10 23 02 F6 | 	mov	local03, local02
1ad08     01 22 06 F1 | 	add	local03, #1
1ad0c     A7 22 62 FC | 	wrlong	local03, fp
1ad10     10 55 48 FC | 	wrbyte	#42, local02
1ad14     04 4E 85 F1 | 	sub	fp, #4
1ad18     A7 1E 02 FB | 	rdlong	local01, fp
1ad1c     01 1E 86 F1 | 	sub	local01, #1
1ad20     A7 1E 62 FC | 	wrlong	local01, fp
1ad24     1C 4F 85 F1 | 	sub	fp, #284
1ad28     C0 FF 9F FD | 	jmp	#LR__2366
1ad2c                 | LR__2367
1ad2c                 | LR__2368
1ad2c     B8 4E 05 F1 | 	add	fp, #184
1ad30     A7 1E 0A FB | 	rdlong	local01, fp wz
1ad34     B8 4E 85 F1 | 	sub	fp, #184
1ad38     70 00 90 AD |  if_e	jmp	#LR__2371
1ad3c     20 4F 05 F1 | 	add	fp, #288
1ad40     A7 20 02 FB | 	rdlong	local02, fp
1ad44     10 23 02 F6 | 	mov	local03, local02
1ad48     01 22 06 F1 | 	add	local03, #1
1ad4c     A7 22 62 FC | 	wrlong	local03, fp
1ad50     10 5D 48 FC | 	wrbyte	#46, local02
1ad54     04 4E 85 F1 | 	sub	fp, #4
1ad58     A7 00 68 FC | 	wrlong	#0, fp
1ad5c     1C 4F 85 F1 | 	sub	fp, #284
1ad60                 | LR__2369
1ad60     1C 4F 05 F1 | 	add	fp, #284
1ad64     A7 20 02 FB | 	rdlong	local02, fp
1ad68     64 4E 85 F1 | 	sub	fp, #100
1ad6c     A7 26 02 FB | 	rdlong	local05, fp
1ad70     B8 4E 85 F1 | 	sub	fp, #184
1ad74     13 21 52 F2 | 	cmps	local02, local05 wc
1ad78     30 00 90 3D |  if_ae	jmp	#LR__2370
1ad7c     20 4F 05 F1 | 	add	fp, #288
1ad80     A7 2C 02 FB | 	rdlong	local08, fp
1ad84     16 35 02 F6 | 	mov	local12, local08
1ad88     01 34 06 F1 | 	add	local12, #1
1ad8c     A7 34 62 FC | 	wrlong	local12, fp
1ad90     16 55 48 FC | 	wrbyte	#42, local08
1ad94     04 4E 85 F1 | 	sub	fp, #4
1ad98     A7 34 02 FB | 	rdlong	local12, fp
1ad9c     01 34 06 F1 | 	add	local12, #1
1ada0     A7 34 62 FC | 	wrlong	local12, fp
1ada4     1C 4F 85 F1 | 	sub	fp, #284
1ada8     B4 FF 9F FD | 	jmp	#LR__2369
1adac                 | LR__2370
1adac                 | LR__2371
1adac     20 4F 05 F1 | 	add	fp, #288
1adb0     A7 20 02 FB | 	rdlong	local02, fp
1adb4     10 23 02 F6 | 	mov	local03, local02
1adb8     01 22 06 F1 | 	add	local03, #1
1adbc     A7 22 62 FC | 	wrlong	local03, fp
1adc0     20 4F 85 F1 | 	sub	fp, #288
1adc4     10 01 48 FC | 	wrbyte	#0, local02
1adc8                 | LR__2372
1adc8     04 4E 05 F1 | 	add	fp, #4
1adcc     A7 12 02 FB | 	rdlong	arg01, fp
1add0     04 4E 05 F1 | 	add	fp, #4
1add4     A7 14 02 FB | 	rdlong	arg02, fp
1add8     BC 4E 05 F1 | 	add	fp, #188
1addc     A7 16 02 FB | 	rdlong	arg03, fp
1ade0     C4 4E 85 F1 | 	sub	fp, #196
1ade4     C4 EE BF FD | 	call	#__system___fmtstr
1ade8                 | LR__2373
1ade8     A7 F0 03 F6 | 	mov	ptra, fp
1adec     B2 00 A0 FD | 	call	#popregs_
1adf0                 | __system___fmtfloat_ret
1adf0     2D 00 64 FD | 	ret
1adf4                 | 
1adf4                 | __system__Left_S
1adf4     04 4A 05 F6 | 	mov	COUNT_, #4
1adf8     A8 00 A0 FD | 	call	#pushregs_
1adfc     09 1F 02 F6 | 	mov	local01, arg01
1ae00     0A 21 02 F6 | 	mov	local02, arg02
1ae04     01 20 56 F2 | 	cmps	local02, #1 wc
1ae08     41 01 00 CF 
1ae0c     FA FA 05 C6 |  if_b	mov	result1, ##@LR__4253
1ae10     5C 00 90 CD |  if_b	jmp	#LR__2383
1ae14     0F 13 02 F6 | 	mov	arg01, local01
1ae18     09 23 02 F6 | 	mov	local03, arg01
1ae1c     97 06 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1ae20                 | LR__2380
1ae20     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ae24     01 22 06 51 |  if_ne	add	local03, #1
1ae28     F4 FF 9F 5D |  if_ne	jmp	#LR__2380
1ae2c                 | LR__2381
1ae2c     09 23 82 F1 | 	sub	local03, arg01
1ae30     11 FB 01 F6 | 	mov	result1, local03
1ae34     10 FB 59 F2 | 	cmps	result1, local02 wcz
1ae38     0F FB 01 E6 |  if_be	mov	result1, local01
1ae3c     30 00 90 ED |  if_be	jmp	#LR__2383
1ae40     10 13 02 F6 | 	mov	arg01, local02
1ae44     02 12 06 F1 | 	add	arg01, #2
1ae48     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1ae4c     FD 24 0A F6 | 	mov	local04, result1 wz
1ae50     18 00 90 AD |  if_e	jmp	#LR__2382
1ae54     12 13 02 F6 | 	mov	arg01, local04
1ae58     0F 15 02 F6 | 	mov	arg02, local01
1ae5c     10 17 02 F6 | 	mov	arg03, local02
1ae60     A0 DE BF FD | 	call	#__system____builtin_memmove
1ae64     12 21 02 F1 | 	add	local02, local04
1ae68     10 01 48 FC | 	wrbyte	#0, local02
1ae6c                 | LR__2382
1ae6c     12 FB 01 F6 | 	mov	result1, local04
1ae70                 | LR__2383
1ae70     A7 F0 03 F6 | 	mov	ptra, fp
1ae74     B2 00 A0 FD | 	call	#popregs_
1ae78                 | __system__Left_S_ret
1ae78     2D 00 64 FD | 	ret
1ae7c                 | 
1ae7c                 | __system__Right_S
1ae7c     05 4A 05 F6 | 	mov	COUNT_, #5
1ae80     A8 00 A0 FD | 	call	#pushregs_
1ae84     09 1F 02 F6 | 	mov	local01, arg01
1ae88     0A 21 02 F6 | 	mov	local02, arg02
1ae8c     01 20 56 F2 | 	cmps	local02, #1 wc
1ae90     41 01 00 CF 
1ae94     FB FA 05 C6 |  if_b	mov	result1, ##@LR__4254
1ae98     64 00 90 CD |  if_b	jmp	#LR__2393
1ae9c     0F 13 02 F6 | 	mov	arg01, local01
1aea0     09 23 02 F6 | 	mov	local03, arg01
1aea4     97 06 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1aea8                 | LR__2390
1aea8     11 FB C9 FA | 	rdbyte	result1, local03 wz
1aeac     01 22 06 51 |  if_ne	add	local03, #1
1aeb0     F4 FF 9F 5D |  if_ne	jmp	#LR__2390
1aeb4                 | LR__2391
1aeb4     09 23 82 F1 | 	sub	local03, arg01
1aeb8     11 FB 01 F6 | 	mov	result1, local03
1aebc     FD 24 02 F6 | 	mov	local04, result1
1aec0     10 25 5A F2 | 	cmps	local04, local02 wcz
1aec4     0F FB 01 E6 |  if_be	mov	result1, local01
1aec8     34 00 90 ED |  if_be	jmp	#LR__2393
1aecc     10 13 02 F6 | 	mov	arg01, local02
1aed0     02 12 06 F1 | 	add	arg01, #2
1aed4     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1aed8     FD 26 0A F6 | 	mov	local05, result1 wz
1aedc     1C 00 90 AD |  if_e	jmp	#LR__2392
1aee0     10 25 82 F1 | 	sub	local04, local02
1aee4     0F 25 02 F1 | 	add	local04, local01
1aee8     01 20 06 F1 | 	add	local02, #1
1aeec     13 13 02 F6 | 	mov	arg01, local05
1aef0     12 15 02 F6 | 	mov	arg02, local04
1aef4     10 17 02 F6 | 	mov	arg03, local02
1aef8     08 DE BF FD | 	call	#__system____builtin_memmove
1aefc                 | LR__2392
1aefc     13 FB 01 F6 | 	mov	result1, local05
1af00                 | LR__2393
1af00     A7 F0 03 F6 | 	mov	ptra, fp
1af04     B2 00 A0 FD | 	call	#popregs_
1af08                 | __system__Right_S_ret
1af08     2D 00 64 FD | 	ret
1af0c                 | 
1af0c                 | __system__Mid_S
1af0c     05 4A 05 F6 | 	mov	COUNT_, #5
1af10     A8 00 A0 FD | 	call	#pushregs_
1af14     09 1F 02 F6 | 	mov	local01, arg01
1af18     0A 21 02 F6 | 	mov	local02, arg02
1af1c     01 16 56 F2 | 	cmps	arg03, #1 wc
1af20     41 01 00 CF 
1af24     FC FA 05 C6 |  if_b	mov	result1, ##@LR__4255
1af28     80 00 90 CD |  if_b	jmp	#LR__2403
1af2c     01 20 86 F1 | 	sub	local02, #1
1af30     00 20 56 F3 | 	fges	local02, #0 wc
1af34     0F 13 02 F6 | 	mov	arg01, local01
1af38     09 23 02 F6 | 	mov	local03, arg01
1af3c     97 06 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1af40                 | LR__2400
1af40     11 FB C9 FA | 	rdbyte	result1, local03 wz
1af44     01 22 06 51 |  if_ne	add	local03, #1
1af48     F4 FF 9F 5D |  if_ne	jmp	#LR__2400
1af4c                 | LR__2401
1af4c     09 23 82 F1 | 	sub	local03, arg01
1af50     11 FB 01 F6 | 	mov	result1, local03
1af54     FD 14 02 F6 | 	mov	arg02, result1
1af58     10 15 52 F2 | 	cmps	arg02, local02 wc
1af5c     41 01 00 CF 
1af60     FD FA 05 C6 |  if_b	mov	result1, ##@LR__4256
1af64     44 00 90 CD |  if_b	jmp	#LR__2403
1af68     0A 25 02 F6 | 	mov	local04, arg02
1af6c     10 25 82 F1 | 	sub	local04, local02
1af70     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1af74     0B 25 02 16 |  if_a	mov	local04, arg03
1af78     12 13 02 F6 | 	mov	arg01, local04
1af7c     02 12 06 F1 | 	add	arg01, #2
1af80     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1af84     FD 26 0A F6 | 	mov	local05, result1 wz
1af88     1C 00 90 AD |  if_e	jmp	#LR__2402
1af8c     0F 21 02 F1 | 	add	local02, local01
1af90     13 13 02 F6 | 	mov	arg01, local05
1af94     10 15 02 F6 | 	mov	arg02, local02
1af98     12 17 02 F6 | 	mov	arg03, local04
1af9c     64 DD BF FD | 	call	#__system____builtin_memmove
1afa0     13 25 02 F1 | 	add	local04, local05
1afa4     12 01 48 FC | 	wrbyte	#0, local04
1afa8                 | LR__2402
1afa8     13 FB 01 F6 | 	mov	result1, local05
1afac                 | LR__2403
1afac     A7 F0 03 F6 | 	mov	ptra, fp
1afb0     B2 00 A0 FD | 	call	#popregs_
1afb4                 | __system__Mid_S_ret
1afb4     2D 00 64 FD | 	ret
1afb8                 | 
1afb8                 | __system__Chr_S
1afb8     01 4A 05 F6 | 	mov	COUNT_, #1
1afbc     A8 00 A0 FD | 	call	#pushregs_
1afc0     09 1F 02 F6 | 	mov	local01, arg01
1afc4     03 12 06 F6 | 	mov	arg01, #3
1afc8     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1afcc     00 FA 4D F2 | 	cmps	result1, #0 wz
1afd0     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1afd4     01 FA 05 51 |  if_ne	add	result1, #1
1afd8     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1afdc     01 FA 85 51 |  if_ne	sub	result1, #1
1afe0     A7 F0 03 F6 | 	mov	ptra, fp
1afe4     B2 00 A0 FD | 	call	#popregs_
1afe8                 | __system__Chr_S_ret
1afe8     2D 00 64 FD | 	ret
1afec                 | 
1afec                 | __system__Number_S
1afec     08 4A 05 F6 | 	mov	COUNT_, #8
1aff0     A8 00 A0 FD | 	call	#pushregs_
1aff4     09 1F 02 F6 | 	mov	local01, arg01
1aff8     0A 21 0A F6 | 	mov	local02, arg02 wz
1affc     0B 23 02 F6 | 	mov	local03, arg03
1b000     3C 00 90 5D |  if_ne	jmp	#LR__2412
1b004     01 20 06 F6 | 	mov	local02, #1
1b008     11 25 02 F6 | 	mov	local04, local03
1b00c     01 26 06 F6 | 	mov	local05, #1
1b010     97 16 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1b014                 | LR__2410
1b014     00 28 06 F6 | 	mov	local06, #0
1b018     0F 25 1A F2 | 	cmp	local04, local01 wcz
1b01c     01 28 66 E6 |  if_be	neg	local06, #1
1b020     12 27 12 F2 | 	cmp	local05, local04 wc
1b024     15 2B A2 F1 | 	subx	local07, local07
1b028     15 29 CA F7 | 	test	local06, local07 wz
1b02c     11 25 02 5D |  if_ne	qmul	local04, local03
1b030     12 27 02 56 |  if_ne	mov	local05, local04
1b034     01 20 06 51 |  if_ne	add	local02, #1
1b038     18 24 62 5D |  if_ne	getqx	local04
1b03c     D4 FF 9F 5D |  if_ne	jmp	#LR__2410
1b040                 | LR__2411
1b040                 | LR__2412
1b040     20 20 36 F3 | 	fle	local02, #32 wc
1b044     10 13 02 F6 | 	mov	arg01, local02
1b048     02 12 06 F1 | 	add	arg01, #2
1b04c     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1b050     FD 28 02 F6 | 	mov	local06, result1
1b054     10 2B 02 F6 | 	mov	local07, local02
1b058     14 2B 02 F1 | 	add	local07, local06
1b05c     15 01 48 FC | 	wrbyte	#0, local07
1b060     97 1A 48 FB | 	callpa	#(@LR__2414-@LR__2413)>>2,fcache_load_ptr_
1b064                 | LR__2413
1b064     01 20 16 F2 | 	cmp	local02, #1 wc
1b068     2C 00 90 CD |  if_b	jmp	#LR__2415
1b06c     11 1F 12 FD | 	qdiv	local01, local03
1b070     01 20 86 F1 | 	sub	local02, #1
1b074     10 2B 02 F6 | 	mov	local07, local02
1b078     14 2B 02 F1 | 	add	local07, local06
1b07c     19 2C 62 FD | 	getqy	local08
1b080     0A 2C 16 F2 | 	cmp	local08, #10 wc
1b084     30 2C 06 C1 |  if_b	add	local08, #48
1b088     37 2C 06 31 |  if_ae	add	local08, #55
1b08c     15 2D 42 FC | 	wrbyte	local08, local07
1b090     18 1E 62 FD | 	getqx	local01
1b094     CC FF 9F FD | 	jmp	#LR__2413
1b098                 | LR__2414
1b098                 | LR__2415
1b098     14 FB 01 F6 | 	mov	result1, local06
1b09c     A7 F0 03 F6 | 	mov	ptra, fp
1b0a0     B2 00 A0 FD | 	call	#popregs_
1b0a4                 | __system__Number_S_ret
1b0a4     2D 00 64 FD | 	ret
1b0a8                 | 
1b0a8                 | __system__LCase_S
1b0a8     07 4A 05 F6 | 	mov	COUNT_, #7
1b0ac     A8 00 A0 FD | 	call	#pushregs_
1b0b0     09 1F 02 F6 | 	mov	local01, arg01
1b0b4     09 21 02 F6 | 	mov	local02, arg01
1b0b8     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1b0bc                 | LR__2420
1b0bc     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b0c0     01 20 06 51 |  if_ne	add	local02, #1
1b0c4     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1b0c8                 | LR__2421
1b0c8     09 21 82 F1 | 	sub	local02, arg01
1b0cc     10 FB 01 F6 | 	mov	result1, local02
1b0d0     FD 20 0A F6 | 	mov	local02, result1 wz
1b0d4     41 01 00 AF 
1b0d8     FE FA 05 A6 |  if_e	mov	result1, ##@LR__4257
1b0dc     7C 00 90 AD |  if_e	jmp	#LR__2427
1b0e0     10 13 02 F6 | 	mov	arg01, local02
1b0e4     02 12 06 F1 | 	add	arg01, #2
1b0e8     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1b0ec     FD 22 0A F6 | 	mov	local03, result1 wz
1b0f0     64 00 90 AD |  if_e	jmp	#LR__2426
1b0f4     01 24 66 F6 | 	neg	local04, #1
1b0f8     97 26 48 FB | 	callpa	#(@LR__2425-@LR__2422)>>2,fcache_load_ptr_
1b0fc                 | LR__2422
1b0fc     01 24 06 F1 | 	add	local04, #1
1b100     12 27 02 F6 | 	mov	local05, local04
1b104     0F 27 02 F1 | 	add	local05, local01
1b108     13 29 C2 FA | 	rdbyte	local06, local05
1b10c     41 28 56 F2 | 	cmps	local06, #65 wc
1b110     18 00 90 CD |  if_b	jmp	#LR__2423
1b114     5B 28 56 F2 | 	cmps	local06, #91 wc
1b118     12 2B 02 C6 |  if_b	mov	local07, local04
1b11c     11 2B 02 C1 |  if_b	add	local07, local03
1b120     20 28 06 C1 |  if_b	add	local06, #32
1b124     15 29 42 CC |  if_b	wrbyte	local06, local07
1b128     0C 00 90 CD |  if_b	jmp	#LR__2424
1b12c                 | LR__2423
1b12c     12 2B 02 F6 | 	mov	local07, local04
1b130     11 2B 02 F1 | 	add	local07, local03
1b134     15 29 42 FC | 	wrbyte	local06, local07
1b138                 | LR__2424
1b138     10 29 02 F6 | 	mov	local06, local02
1b13c     01 28 86 F1 | 	sub	local06, #1
1b140     14 25 0A F2 | 	cmp	local04, local06 wz
1b144     B4 FF 9F 5D |  if_ne	jmp	#LR__2422
1b148                 | LR__2425
1b148     11 21 02 F1 | 	add	local02, local03
1b14c     10 01 48 FC | 	wrbyte	#0, local02
1b150     11 FB 01 F6 | 	mov	result1, local03
1b154     04 00 90 FD | 	jmp	#LR__2427
1b158                 | LR__2426
1b158     11 FB 01 F6 | 	mov	result1, local03
1b15c                 | LR__2427
1b15c     A7 F0 03 F6 | 	mov	ptra, fp
1b160     B2 00 A0 FD | 	call	#popregs_
1b164                 | __system__LCase_S_ret
1b164     2D 00 64 FD | 	ret
1b168                 | 
1b168                 | __system__LTrim_S
1b168     05 4A 05 F6 | 	mov	COUNT_, #5
1b16c     A8 00 A0 FD | 	call	#pushregs_
1b170     09 1F 02 F6 | 	mov	local01, arg01
1b174     09 21 02 F6 | 	mov	local02, arg01
1b178     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1b17c                 | LR__2430
1b17c     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b180     01 20 06 51 |  if_ne	add	local02, #1
1b184     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1b188                 | LR__2431
1b188     09 21 82 F1 | 	sub	local02, arg01
1b18c     10 FB 01 F6 | 	mov	result1, local02
1b190     FD 20 0A F6 | 	mov	local02, result1 wz
1b194     41 01 00 AF 
1b198     FF FA 05 A6 |  if_e	mov	result1, ##@LR__4258
1b19c     7C 00 90 AD |  if_e	jmp	#LR__2436
1b1a0     00 22 06 F6 | 	mov	local03, #0
1b1a4     10 25 02 F6 | 	mov	local04, local02
1b1a8                 | LR__2432
1b1a8     12 23 52 F2 | 	cmps	local03, local04 wc
1b1ac     68 00 90 3D |  if_ae	jmp	#LR__2435
1b1b0     11 17 02 F6 | 	mov	arg03, local03
1b1b4     0F 17 02 F1 | 	add	arg03, local01
1b1b8     0B 17 C2 FA | 	rdbyte	arg03, arg03
1b1bc     20 16 0E F2 | 	cmp	arg03, #32 wz
1b1c0     4C 00 90 AD |  if_e	jmp	#LR__2434
1b1c4     10 13 02 F6 | 	mov	arg01, local02
1b1c8     11 13 82 F1 | 	sub	arg01, local03
1b1cc     02 12 06 F1 | 	add	arg01, #2
1b1d0     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1b1d4     FD 26 0A F6 | 	mov	local05, result1 wz
1b1d8     2C 00 90 AD |  if_e	jmp	#LR__2433
1b1dc     11 15 02 F6 | 	mov	arg02, local03
1b1e0     0F 15 02 F1 | 	add	arg02, local01
1b1e4     10 17 02 F6 | 	mov	arg03, local02
1b1e8     11 17 82 F1 | 	sub	arg03, local03
1b1ec     13 13 02 F6 | 	mov	arg01, local05
1b1f0     10 DB BF FD | 	call	#__system____builtin_memmove
1b1f4     11 21 82 F1 | 	sub	local02, local03
1b1f8     13 21 02 F1 | 	add	local02, local05
1b1fc     10 01 48 FC | 	wrbyte	#0, local02
1b200     13 FB 01 F6 | 	mov	result1, local05
1b204     14 00 90 FD | 	jmp	#LR__2436
1b208                 | LR__2433
1b208     13 FB 01 F6 | 	mov	result1, local05
1b20c     0C 00 90 FD | 	jmp	#LR__2436
1b210                 | LR__2434
1b210     01 22 06 F1 | 	add	local03, #1
1b214     90 FF 9F FD | 	jmp	#LR__2432
1b218                 | LR__2435
1b218     0F FB 01 F6 | 	mov	result1, local01
1b21c                 | LR__2436
1b21c     A7 F0 03 F6 | 	mov	ptra, fp
1b220     B2 00 A0 FD | 	call	#popregs_
1b224                 | __system__LTrim_S_ret
1b224     2D 00 64 FD | 	ret
1b228                 | 
1b228                 | __system__RTrim_S
1b228     04 4A 05 F6 | 	mov	COUNT_, #4
1b22c     A8 00 A0 FD | 	call	#pushregs_
1b230     09 1F 02 F6 | 	mov	local01, arg01
1b234     09 21 02 F6 | 	mov	local02, arg01
1b238     97 06 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1b23c                 | LR__2440
1b23c     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b240     01 20 06 51 |  if_ne	add	local02, #1
1b244     F4 FF 9F 5D |  if_ne	jmp	#LR__2440
1b248                 | LR__2441
1b248     09 21 82 F1 | 	sub	local02, arg01
1b24c     10 FB 01 F6 | 	mov	result1, local02
1b250     FD 20 0A F6 | 	mov	local02, result1 wz
1b254     41 01 00 AF 
1b258     00 FB 05 A6 |  if_e	mov	result1, ##@LR__4259
1b25c     74 00 90 AD |  if_e	jmp	#LR__2445
1b260     10 23 02 F6 | 	mov	local03, local02
1b264     01 22 86 F1 | 	sub	local03, #1
1b268                 | LR__2442
1b268     11 15 02 F6 | 	mov	arg02, local03
1b26c     0F 15 02 F1 | 	add	arg02, local01
1b270     0A 21 C2 FA | 	rdbyte	local02, arg02
1b274     20 20 0E F2 | 	cmp	local02, #32 wz
1b278     44 00 90 AD |  if_e	jmp	#LR__2444
1b27c     11 13 02 F6 | 	mov	arg01, local03
1b280     02 12 06 F1 | 	add	arg01, #2
1b284     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1b288     FD 24 0A F6 | 	mov	local04, result1 wz
1b28c     28 00 90 AD |  if_e	jmp	#LR__2443
1b290     11 17 02 F6 | 	mov	arg03, local03
1b294     01 16 06 F1 | 	add	arg03, #1
1b298     12 13 02 F6 | 	mov	arg01, local04
1b29c     0F 15 02 F6 | 	mov	arg02, local01
1b2a0     60 DA BF FD | 	call	#__system____builtin_memmove
1b2a4     01 22 06 F1 | 	add	local03, #1
1b2a8     12 23 02 F1 | 	add	local03, local04
1b2ac     11 01 48 FC | 	wrbyte	#0, local03
1b2b0     12 FB 01 F6 | 	mov	result1, local04
1b2b4     1C 00 90 FD | 	jmp	#LR__2445
1b2b8                 | LR__2443
1b2b8     12 FB 01 F6 | 	mov	result1, local04
1b2bc     14 00 90 FD | 	jmp	#LR__2445
1b2c0                 | LR__2444
1b2c0     01 22 86 F1 | 	sub	local03, #1
1b2c4     00 22 56 F2 | 	cmps	local03, #0 wc
1b2c8     9C FF 9F 3D |  if_ae	jmp	#LR__2442
1b2cc     41 01 00 FF 
1b2d0     01 FB 05 F6 | 	mov	result1, ##@LR__4260
1b2d4                 | LR__2445
1b2d4     A7 F0 03 F6 | 	mov	ptra, fp
1b2d8     B2 00 A0 FD | 	call	#popregs_
1b2dc                 | __system__RTrim_S_ret
1b2dc     2D 00 64 FD | 	ret
1b2e0                 | 
1b2e0                 | __system__Instr
1b2e0     07 4A 05 F6 | 	mov	COUNT_, #7
1b2e4     A8 00 A0 FD | 	call	#pushregs_
1b2e8     09 1F 02 F6 | 	mov	local01, arg01
1b2ec     0A 21 02 F6 | 	mov	local02, arg02
1b2f0     0B 23 02 F6 | 	mov	local03, arg03
1b2f4     11 13 02 F6 | 	mov	arg01, local03
1b2f8     09 25 02 F6 | 	mov	local04, arg01
1b2fc     97 06 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1b300                 | LR__2450
1b300     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b304     01 24 06 51 |  if_ne	add	local04, #1
1b308     F4 FF 9F 5D |  if_ne	jmp	#LR__2450
1b30c                 | LR__2451
1b30c     09 25 82 F1 | 	sub	local04, arg01
1b310     12 27 02 F6 | 	mov	local05, local04
1b314     10 13 02 F6 | 	mov	arg01, local02
1b318     09 25 02 F6 | 	mov	local04, arg01
1b31c     97 06 48 FB | 	callpa	#(@LR__2453-@LR__2452)>>2,fcache_load_ptr_
1b320                 | LR__2452
1b320     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b324     01 24 06 51 |  if_ne	add	local04, #1
1b328     F4 FF 9F 5D |  if_ne	jmp	#LR__2452
1b32c                 | LR__2453
1b32c     09 25 82 F1 | 	sub	local04, arg01
1b330     12 FB 01 F6 | 	mov	result1, local04
1b334     FD 18 0A F6 | 	mov	arg04, result1 wz
1b338     00 FA 05 A6 |  if_e	mov	result1, #0
1b33c     98 00 90 AD |  if_e	jmp	#LR__2457
1b340     00 26 0E F2 | 	cmp	local05, #0 wz
1b344     00 FA 05 A6 |  if_e	mov	result1, #0
1b348     8C 00 90 AD |  if_e	jmp	#LR__2457
1b34c     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1b350     00 FA 05 16 |  if_a	mov	result1, #0
1b354     80 00 90 1D |  if_a	jmp	#LR__2457
1b358     01 1E 56 F2 | 	cmps	local01, #1 wc
1b35c     01 1E 06 C6 |  if_b	mov	local01, #1
1b360     11 29 C2 FA | 	rdbyte	local06, local03
1b364     01 26 0E F2 | 	cmp	local05, #1 wz
1b368     18 00 90 5D |  if_ne	jmp	#LR__2454
1b36c     10 13 02 F6 | 	mov	arg01, local02
1b370     14 15 02 F6 | 	mov	arg02, local06
1b374     0F 17 02 F6 | 	mov	arg03, local01
1b378     00 18 06 F6 | 	mov	arg04, #0
1b37c     B8 33 B0 FD | 	call	#__system____ScanForChar
1b380     54 00 90 FD | 	jmp	#LR__2457
1b384                 | LR__2454
1b384     0F 2B 02 F6 | 	mov	local07, local01
1b388                 | LR__2455
1b388     10 13 02 F6 | 	mov	arg01, local02
1b38c     14 15 02 F6 | 	mov	arg02, local06
1b390     15 17 02 F6 | 	mov	arg03, local07
1b394     00 18 06 F6 | 	mov	arg04, #0
1b398     9C 33 B0 FD | 	call	#__system____ScanForChar
1b39c     FD 2A 0A F6 | 	mov	local07, result1 wz
1b3a0     30 00 90 AD |  if_e	jmp	#LR__2456
1b3a4     13 17 02 F6 | 	mov	arg03, local05
1b3a8     10 13 02 F6 | 	mov	arg01, local02
1b3ac     15 15 02 F6 | 	mov	arg02, local07
1b3b0     58 FB BF FD | 	call	#__system__Mid_S
1b3b4     FD 12 02 F6 | 	mov	arg01, result1
1b3b8     11 15 02 F6 | 	mov	arg02, local03
1b3bc     4C DA BF FD | 	call	#__system___string_cmp
1b3c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3c4     15 FB 01 A6 |  if_e	mov	result1, local07
1b3c8     0C 00 90 AD |  if_e	jmp	#LR__2457
1b3cc     13 2B 02 F1 | 	add	local07, local05
1b3d0     B4 FF 9F FD | 	jmp	#LR__2455
1b3d4                 | LR__2456
1b3d4     00 FA 05 F6 | 	mov	result1, #0
1b3d8                 | LR__2457
1b3d8     A7 F0 03 F6 | 	mov	ptra, fp
1b3dc     B2 00 A0 FD | 	call	#popregs_
1b3e0                 | __system__Instr_ret
1b3e0     2D 00 64 FD | 	ret
1b3e4                 | 
1b3e4                 | __system___strerror
1b3e4     00 12 56 F2 | 	cmps	arg01, #0 wc
1b3e8     08 00 90 CD |  if_b	jmp	#LR__2460
1b3ec     1A 12 56 F2 | 	cmps	arg01, #26 wc
1b3f0     04 00 90 CD |  if_b	jmp	#LR__2461
1b3f4                 | LR__2460
1b3f4     19 12 06 F6 | 	mov	arg01, #25
1b3f8                 | LR__2461
1b3f8     02 12 66 F0 | 	shl	arg01, #2
1b3fc     01 00 00 FF 
1b400     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1b404     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1b408     09 FB 01 FB | 	rdlong	result1, arg01
1b40c     01 00 00 FF 
1b410     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1b414                 | __system___strerror_ret
1b414     2D 00 64 FD | 	ret
1b418                 | 
1b418                 | __system___int64_shl
1b418     20 16 CE F7 | 	test	arg03, #32 wz
1b41c     09 15 02 56 |  if_ne	mov	arg02, arg01
1b420     00 12 06 56 |  if_ne	mov	arg01, #0
1b424     1F 16 CE F7 | 	test	arg03, #31 wz
1b428     18 00 90 AD |  if_e	jmp	#LR__2470
1b42c     0B 15 62 F0 | 	shl	arg02, arg03
1b430     09 FB 01 F6 | 	mov	result1, arg01
1b434     0B FD 61 F6 | 	neg	result2, arg03
1b438     FE FA 41 F0 | 	shr	result1, result2
1b43c     FD 14 42 F5 | 	or	arg02, result1
1b440     0B 13 62 F0 | 	shl	arg01, arg03
1b444                 | LR__2470
1b444     0A FD 01 F6 | 	mov	result2, arg02
1b448     09 FB 01 F6 | 	mov	result1, arg01
1b44c                 | __system___int64_shl_ret
1b44c     2D 00 64 FD | 	ret
1b450                 | 
1b450                 | __system___usepins
1b450     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b454     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b458     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1b45c     00 13 CA F7 | 	test	arg01, _var01 wz
1b460     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1b464     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1b468     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1b46c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1b470     00 FA 05 56 |  if_ne	mov	result1, #0
1b474     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1b478     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b47c     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b480     09 03 42 F5 | 	or	_var02, arg01
1b484     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b488     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b48c     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b490     0A 03 42 F5 | 	or	_var02, arg02
1b494     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b498     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b49c     01 FA 65 F6 | 	neg	result1, #1
1b4a0                 | __system___usepins_ret
1b4a0     2D 00 64 FD | 	ret
1b4a4                 | 
1b4a4                 | __system___freepins
1b4a4     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b4a8     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b4ac     09 01 22 F5 | 	andn	_var01, arg01
1b4b0     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b4b4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b4b8     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b4bc     0A 01 22 F5 | 	andn	_var01, arg02
1b4c0     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b4c4     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b4c8                 | __system___freepins_ret
1b4c8     2D 00 64 FD | 	ret
1b4cc                 | 
1b4cc                 | __system___float_fromuns
1b4cc     09 17 0A F6 | 	mov	arg03, arg01 wz
1b4d0     0B FB 01 A6 |  if_e	mov	result1, arg03
1b4d4     24 00 90 AD |  if_e	jmp	#LR__2480
1b4d8     0B 15 92 F7 | 	encod	arg02, arg03 wc
1b4dc     01 14 06 C1 |  if_b	add	arg02, #1
1b4e0     01 14 86 F1 | 	sub	arg02, #1
1b4e4     1F 12 06 F6 | 	mov	arg01, #31
1b4e8     0A 13 82 F1 | 	sub	arg01, arg02
1b4ec     09 17 62 F0 | 	shl	arg03, arg01
1b4f0     02 16 46 F0 | 	shr	arg03, #2
1b4f4     00 12 06 F6 | 	mov	arg01, #0
1b4f8     4C 09 B0 FD | 	call	#__system___float_Pack
1b4fc                 | LR__2480
1b4fc                 | __system___float_fromuns_ret
1b4fc     2D 00 64 FD | 	ret
1b500                 | 
1b500                 | __system___float_add
1b500     0F 4A 05 F6 | 	mov	COUNT_, #15
1b504     A8 00 A0 FD | 	call	#pushregs_
1b508     09 1F 02 F6 | 	mov	local01, arg01
1b50c     0A 21 02 F6 | 	mov	local02, arg02
1b510     00 22 06 F6 | 	mov	local03, #0
1b514     0F 25 02 F6 | 	mov	local04, local01
1b518     12 27 02 F6 | 	mov	local05, local04
1b51c     16 26 46 F7 | 	zerox	local05, #22
1b520     12 29 02 F6 | 	mov	local06, local04
1b524     01 28 66 F0 | 	shl	local06, #1
1b528     18 28 46 F0 | 	shr	local06, #24
1b52c     1F 24 46 F0 | 	shr	local04, #31
1b530     10 13 02 F6 | 	mov	arg01, local02
1b534     09 FB 01 F6 | 	mov	result1, arg01
1b538     FD 2A 02 F6 | 	mov	local07, result1
1b53c     15 2D 02 F6 | 	mov	local08, local07
1b540     16 2C 46 F7 | 	zerox	local08, #22
1b544     15 2F 02 F6 | 	mov	local09, local07
1b548     01 2E 66 F0 | 	shl	local09, #1
1b54c     18 2E 46 F0 | 	shr	local09, #24
1b550     17 31 02 F6 | 	mov	local10, local09
1b554     1F 2A 46 F0 | 	shr	local07, #31
1b558     00 32 06 F6 | 	mov	local11, #0
1b55c     00 34 06 F6 | 	mov	local12, #0
1b560     18 29 12 F2 | 	cmp	local06, local10 wc
1b564     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1b568     2C 00 90 1D |  if_a	jmp	#LR__2490
1b56c     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1b570     24 00 90 3D |  if_ae	jmp	#LR__2490
1b574     13 37 02 F6 | 	mov	local13, local05
1b578     16 27 02 F6 | 	mov	local05, local08
1b57c     1B 2D 02 F6 | 	mov	local08, local13
1b580     14 37 02 F6 | 	mov	local13, local06
1b584     18 29 02 F6 | 	mov	local06, local10
1b588     1B 31 02 F6 | 	mov	local10, local13
1b58c     12 37 02 F6 | 	mov	local13, local04
1b590     15 25 02 F6 | 	mov	local04, local07
1b594     1B 2B 02 F6 | 	mov	local07, local13
1b598                 | LR__2490
1b598     FF 28 0E F2 | 	cmp	local06, #255 wz
1b59c     70 01 90 AD |  if_e	jmp	#LR__2505
1b5a0     00 28 0E F2 | 	cmp	local06, #0 wz
1b5a4     AC 01 90 AD |  if_e	jmp	#LR__2507
1b5a8     17 26 26 F4 | 	bith	local05, #23
1b5ac                 | LR__2491
1b5ac     00 30 0E F2 | 	cmp	local10, #0 wz
1b5b0     F0 01 90 AD |  if_e	jmp	#LR__2511
1b5b4     17 2C 26 F4 | 	bith	local08, #23
1b5b8                 | LR__2492
1b5b8     7F 28 86 F1 | 	sub	local06, #127
1b5bc     7F 30 86 F1 | 	sub	local10, #127
1b5c0     14 39 02 F6 | 	mov	local14, local06
1b5c4     18 39 82 F1 | 	sub	local14, local10
1b5c8     97 14 48 FB | 	callpa	#(@LR__2494-@LR__2493)>>2,fcache_load_ptr_
1b5cc                 | LR__2493
1b5cc     20 38 56 F2 | 	cmps	local14, #32 wc
1b5d0     20 00 90 CD |  if_b	jmp	#LR__2495
1b5d4     16 2F 02 F6 | 	mov	local09, local08
1b5d8     00 32 0E F2 | 	cmp	local11, #0 wz
1b5dc     6F 32 62 FD | 	wrnz	local11
1b5e0     19 2F 42 F5 | 	or	local09, local11
1b5e4     17 33 02 F6 | 	mov	local11, local09
1b5e8     00 2C 06 F6 | 	mov	local08, #0
1b5ec     20 38 86 F1 | 	sub	local14, #32
1b5f0     D8 FF 9F FD | 	jmp	#LR__2493
1b5f4                 | LR__2494
1b5f4                 | LR__2495
1b5f4     00 38 0E F2 | 	cmp	local14, #0 wz
1b5f8     38 00 90 AD |  if_e	jmp	#LR__2496
1b5fc     16 37 02 F6 | 	mov	local13, local08
1b600     20 30 06 F6 | 	mov	local10, #32
1b604     1C 31 82 F1 | 	sub	local10, local14
1b608     18 37 62 F0 | 	shl	local13, local10
1b60c     19 31 02 F6 | 	mov	local10, local11
1b610     20 2E 06 F6 | 	mov	local09, #32
1b614     1C 2F 82 F1 | 	sub	local09, local14
1b618     17 31 6A F0 | 	shl	local10, local09 wz
1b61c     1C 33 42 F0 | 	shr	local11, local14
1b620     1C 2D 42 F0 | 	shr	local08, local14
1b624     1B 33 42 F5 | 	or	local11, local13
1b628     00 3A 06 F6 | 	mov	local15, #0
1b62c     01 3A 06 56 |  if_ne	mov	local15, #1
1b630     1D 33 42 F5 | 	or	local11, local15
1b634                 | LR__2496
1b634     12 3B 02 F6 | 	mov	local15, local04
1b638     15 3B 62 F5 | 	xor	local15, local07
1b63c     01 3A CE F7 | 	test	local15, #1 wz
1b640     18 00 90 AD |  if_e	jmp	#LR__2497
1b644     16 2D 22 F6 | 	not	local08, local08
1b648     19 33 22 F6 | 	not	local11, local11
1b64c     01 32 0E F1 | 	add	local11, #1 wz
1b650     00 3A 06 F6 | 	mov	local15, #0
1b654     01 3A 06 A6 |  if_e	mov	local15, #1
1b658     1D 2D 02 F1 | 	add	local08, local15
1b65c                 | LR__2497
1b65c     19 35 12 F1 | 	add	local12, local11 wc
1b660     16 27 22 F1 | 	addx	local05, local08
1b664     00 26 56 F2 | 	cmps	local05, #0 wc
1b668     1C 00 90 3D |  if_ae	jmp	#LR__2498
1b66c     01 24 66 F5 | 	xor	local04, #1
1b670     13 27 22 F6 | 	not	local05, local05
1b674     1A 35 22 F6 | 	not	local12, local12
1b678     01 34 0E F1 | 	add	local12, #1 wz
1b67c     00 3A 06 F6 | 	mov	local15, #0
1b680     01 3A 06 A6 |  if_e	mov	local15, #1
1b684     1D 27 02 F1 | 	add	local05, local15
1b688                 | LR__2498
1b688     00 80 00 FF 
1b68c     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1b690     28 00 90 CD |  if_b	jmp	#LR__2499
1b694     01 28 06 F1 | 	add	local06, #1
1b698     1A 39 02 F6 | 	mov	local14, local12
1b69c     01 38 06 F5 | 	and	local14, #1
1b6a0     01 34 46 F0 | 	shr	local12, #1
1b6a4     13 3B 02 F6 | 	mov	local15, local05
1b6a8     1F 3A 66 F0 | 	shl	local15, #31
1b6ac     1D 35 42 F5 | 	or	local12, local15
1b6b0     1C 35 42 F5 | 	or	local12, local14
1b6b4     01 26 46 F0 | 	shr	local05, #1
1b6b8     3C 00 90 FD | 	jmp	#LR__2504
1b6bc                 | LR__2499
1b6bc     00 40 00 FF 
1b6c0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b6c4     30 00 90 3D |  if_ae	jmp	#LR__2503
1b6c8     00 26 0E F2 | 	cmp	local05, #0 wz
1b6cc     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1b6d0     08 24 46 A5 |  if_e	or	local04, #8
1b6d4     01 24 26 A5 |  if_e	andn	local04, #1
1b6d8     1C 00 90 AD |  if_e	jmp	#LR__2502
1b6dc                 | LR__2500
1b6dc     00 40 00 FF 
1b6e0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b6e4     10 00 90 3D |  if_ae	jmp	#LR__2501
1b6e8     1A 35 12 F1 | 	add	local12, local12 wc
1b6ec     13 27 22 F1 | 	addx	local05, local05
1b6f0     01 28 86 F1 | 	sub	local06, #1
1b6f4     E4 FF 9F FD | 	jmp	#LR__2500
1b6f8                 | LR__2501
1b6f8                 | LR__2502
1b6f8                 | LR__2503
1b6f8                 | LR__2504
1b6f8     13 13 02 F6 | 	mov	arg01, local05
1b6fc     1A 15 02 F6 | 	mov	arg02, local12
1b700     14 17 02 F6 | 	mov	arg03, local06
1b704     12 19 02 F6 | 	mov	arg04, local04
1b708     70 34 B0 FD | 	call	#__system__pack_0489
1b70c     DC 00 90 FD | 	jmp	#LR__2515
1b710                 | LR__2505
1b710     FF 30 0E F2 | 	cmp	local10, #255 wz
1b714     10 00 90 5D |  if_ne	jmp	#LR__2506
1b718     12 2B 0A F2 | 	cmp	local07, local04 wz
1b71c     00 F8 3F 5F 
1b720     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b724     C4 00 90 5D |  if_ne	jmp	#LR__2515
1b728                 | LR__2506
1b728     00 26 0E F2 | 	cmp	local05, #0 wz
1b72c     00 F8 3F 5F 
1b730     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b734     B4 00 90 5D |  if_ne	jmp	#LR__2515
1b738     1A 15 02 F6 | 	mov	arg02, local12
1b73c     14 17 02 F6 | 	mov	arg03, local06
1b740     12 19 02 F6 | 	mov	arg04, local04
1b744     02 18 46 F5 | 	or	arg04, #2
1b748     13 13 02 F6 | 	mov	arg01, local05
1b74c     2C 34 B0 FD | 	call	#__system__pack_0489
1b750     98 00 90 FD | 	jmp	#LR__2515
1b754                 | LR__2507
1b754     00 26 0E F2 | 	cmp	local05, #0 wz
1b758     28 00 90 AD |  if_e	jmp	#LR__2510
1b75c     01 26 66 F0 | 	shl	local05, #1
1b760     97 0E 48 FB | 	callpa	#(@LR__2509-@LR__2508)>>2,fcache_load_ptr_
1b764                 | LR__2508
1b764     00 40 00 FF 
1b768     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b76c     14 3B 02 C6 |  if_b	mov	local15, local06
1b770     01 3A 86 C1 |  if_b	sub	local15, #1
1b774     1D 29 02 C6 |  if_b	mov	local06, local15
1b778     01 26 66 C0 |  if_b	shl	local05, #1
1b77c     E4 FF 9F CD |  if_b	jmp	#LR__2508
1b780                 | LR__2509
1b780     28 FE 9F FD | 	jmp	#LR__2491
1b784                 | LR__2510
1b784     15 25 02 F5 | 	and	local04, local07
1b788     12 19 02 F6 | 	mov	arg04, local04
1b78c     08 18 46 F5 | 	or	arg04, #8
1b790     00 12 06 F6 | 	mov	arg01, #0
1b794     00 14 06 F6 | 	mov	arg02, #0
1b798     00 16 06 F6 | 	mov	arg03, #0
1b79c     DC 33 B0 FD | 	call	#__system__pack_0489
1b7a0     48 00 90 FD | 	jmp	#LR__2515
1b7a4                 | LR__2511
1b7a4     00 2C 0E F2 | 	cmp	local08, #0 wz
1b7a8     28 00 90 AD |  if_e	jmp	#LR__2514
1b7ac     01 2C 66 F0 | 	shl	local08, #1
1b7b0     97 0E 48 FB | 	callpa	#(@LR__2513-@LR__2512)>>2,fcache_load_ptr_
1b7b4                 | LR__2512
1b7b4     00 40 00 FF 
1b7b8     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1b7bc     18 3B 02 C6 |  if_b	mov	local15, local10
1b7c0     01 3A 86 C1 |  if_b	sub	local15, #1
1b7c4     1D 31 02 C6 |  if_b	mov	local10, local15
1b7c8     01 2C 66 C0 |  if_b	shl	local08, #1
1b7cc     E4 FF 9F CD |  if_b	jmp	#LR__2512
1b7d0                 | LR__2513
1b7d0     E4 FD 9F FD | 	jmp	#LR__2492
1b7d4                 | LR__2514
1b7d4     7F 28 86 F1 | 	sub	local06, #127
1b7d8     13 13 02 F6 | 	mov	arg01, local05
1b7dc     1A 15 02 F6 | 	mov	arg02, local12
1b7e0     14 17 02 F6 | 	mov	arg03, local06
1b7e4     12 19 02 F6 | 	mov	arg04, local04
1b7e8     90 33 B0 FD | 	call	#__system__pack_0489
1b7ec                 | LR__2515
1b7ec     A7 F0 03 F6 | 	mov	ptra, fp
1b7f0     B2 00 A0 FD | 	call	#popregs_
1b7f4                 | __system___float_add_ret
1b7f4     2D 00 64 FD | 	ret
1b7f8                 | 
1b7f8                 | __system___float_sqrt
1b7f8     04 4A 05 F6 | 	mov	COUNT_, #4
1b7fc     A8 00 A0 FD | 	call	#pushregs_
1b800     09 1F 02 F6 | 	mov	local01, arg01
1b804     09 FB 01 F6 | 	mov	result1, arg01
1b808     FD 20 02 F6 | 	mov	local02, result1
1b80c     10 23 02 F6 | 	mov	local03, local02
1b810     16 22 46 F7 | 	zerox	local03, #22
1b814     10 25 02 F6 | 	mov	local04, local02
1b818     01 24 66 F0 | 	shl	local04, #1
1b81c     18 24 4E F0 | 	shr	local04, #24 wz
1b820     1F 20 46 F0 | 	shr	local02, #31
1b824     70 00 90 AD |  if_e	jmp	#LR__2521
1b828     17 22 26 F4 | 	bith	local03, #23
1b82c                 | LR__2520
1b82c     00 20 0E F2 | 	cmp	local02, #0 wz
1b830     00 F8 3F 5F 
1b834     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b838     88 00 90 5D |  if_ne	jmp	#LR__2524
1b83c     FF 24 0E F2 | 	cmp	local04, #255 wz
1b840     0F FB 01 A6 |  if_e	mov	result1, local01
1b844     7C 00 90 AD |  if_e	jmp	#LR__2524
1b848     7F 24 86 F1 | 	sub	local04, #127
1b84c     01 24 CE F7 | 	test	local04, #1 wz
1b850     01 22 66 50 |  if_ne	shl	local03, #1
1b854     05 22 66 F0 | 	shl	local03, #5
1b858     11 01 38 FD | 	qsqrt	#0, local03
1b85c     01 24 86 51 |  if_ne	sub	local04, #1
1b860     12 25 52 F6 | 	abs	local04, local04 wc
1b864     01 24 46 F0 | 	shr	local04, #1
1b868     12 17 82 F6 | 	negc	arg03, local04
1b86c     10 19 02 F6 | 	mov	arg04, local02
1b870     18 12 62 FD | 	getqx	arg01
1b874     09 15 02 F6 | 	mov	arg02, arg01
1b878     19 14 66 F0 | 	shl	arg02, #25
1b87c     07 12 46 F0 | 	shr	arg01, #7
1b880     00 80 00 FF 
1b884     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1b888     01 16 06 31 |  if_ae	add	arg03, #1
1b88c     01 12 46 30 |  if_ae	shr	arg01, #1
1b890     E8 32 B0 FD | 	call	#__system__pack_0489
1b894     2C 00 90 FD | 	jmp	#LR__2524
1b898                 | LR__2521
1b898     00 22 0E F2 | 	cmp	local03, #0 wz
1b89c     0F FB 01 A6 |  if_e	mov	result1, local01
1b8a0     20 00 90 AD |  if_e	jmp	#LR__2524
1b8a4     01 22 66 F0 | 	shl	local03, #1
1b8a8     97 0A 48 FB | 	callpa	#(@LR__2523-@LR__2522)>>2,fcache_load_ptr_
1b8ac                 | LR__2522
1b8ac     00 40 00 FF 
1b8b0     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1b8b4     01 24 86 C1 |  if_b	sub	local04, #1
1b8b8     01 22 66 C0 |  if_b	shl	local03, #1
1b8bc     EC FF 9F CD |  if_b	jmp	#LR__2522
1b8c0                 | LR__2523
1b8c0     68 FF 9F FD | 	jmp	#LR__2520
1b8c4                 | LR__2524
1b8c4     A7 F0 03 F6 | 	mov	ptra, fp
1b8c8     B2 00 A0 FD | 	call	#popregs_
1b8cc                 | __system___float_sqrt_ret
1b8cc     2D 00 64 FD | 	ret
1b8d0                 | 
1b8d0                 | __system___float_mul
1b8d0     0B 4A 05 F6 | 	mov	COUNT_, #11
1b8d4     A8 00 A0 FD | 	call	#pushregs_
1b8d8     09 1F 02 F6 | 	mov	local01, arg01
1b8dc     0A 21 02 F6 | 	mov	local02, arg02
1b8e0     0F 23 02 F6 | 	mov	local03, local01
1b8e4     11 25 02 F6 | 	mov	local04, local03
1b8e8     16 24 46 F7 | 	zerox	local04, #22
1b8ec     11 27 02 F6 | 	mov	local05, local03
1b8f0     01 26 66 F0 | 	shl	local05, #1
1b8f4     18 26 46 F0 | 	shr	local05, #24
1b8f8     1F 22 46 F0 | 	shr	local03, #31
1b8fc     10 FB 01 F6 | 	mov	result1, local02
1b900     FD 28 02 F6 | 	mov	local06, result1
1b904     14 2B 02 F6 | 	mov	local07, local06
1b908     16 2A 46 F7 | 	zerox	local07, #22
1b90c     14 2D 02 F6 | 	mov	local08, local06
1b910     01 2C 66 F0 | 	shl	local08, #1
1b914     18 2C 46 F0 | 	shr	local08, #24
1b918     1F 28 46 F0 | 	shr	local06, #31
1b91c     14 23 62 F5 | 	xor	local03, local06
1b920     FF 26 0E F2 | 	cmp	local05, #255 wz
1b924     90 00 90 AD |  if_e	jmp	#LR__2533
1b928     FF 2C 0E F2 | 	cmp	local08, #255 wz
1b92c     D8 00 90 AD |  if_e	jmp	#LR__2535
1b930     00 26 0E F2 | 	cmp	local05, #0 wz
1b934     0C 01 90 AD |  if_e	jmp	#LR__2536
1b938     17 24 26 F4 | 	bith	local04, #23
1b93c                 | LR__2530
1b93c     00 2C 0E F2 | 	cmp	local08, #0 wz
1b940     44 01 90 AD |  if_e	jmp	#LR__2540
1b944     17 2A 26 F4 | 	bith	local07, #23
1b948                 | LR__2531
1b948     12 21 02 F6 | 	mov	local02, local04
1b94c     04 20 66 F0 | 	shl	local02, #4
1b950     15 29 02 F6 | 	mov	local06, local07
1b954     05 28 66 F0 | 	shl	local06, #5
1b958     14 21 02 FD | 	qmul	local02, local06
1b95c     16 27 02 F1 | 	add	local05, local08
1b960     FE 26 86 F1 | 	sub	local05, #254
1b964     13 2F 02 F6 | 	mov	local09, local05
1b968     04 24 66 F0 | 	shl	local04, #4
1b96c     05 2A 66 F0 | 	shl	local07, #5
1b970     18 30 62 FD | 	getqx	local10
1b974     15 25 02 FD | 	qmul	local04, local07
1b978     19 32 62 FD | 	getqy	local11
1b97c     00 80 00 FF 
1b980     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1b984     18 00 90 CD |  if_b	jmp	#LR__2532
1b988     01 2E 06 F1 | 	add	local09, #1
1b98c     01 30 46 F0 | 	shr	local10, #1
1b990     19 2D 02 F6 | 	mov	local08, local11
1b994     1F 2C 66 F0 | 	shl	local08, #31
1b998     16 31 42 F5 | 	or	local10, local08
1b99c     01 32 46 F0 | 	shr	local11, #1
1b9a0                 | LR__2532
1b9a0     19 13 02 F6 | 	mov	arg01, local11
1b9a4     18 15 02 F6 | 	mov	arg02, local10
1b9a8     17 17 02 F6 | 	mov	arg03, local09
1b9ac     11 19 02 F6 | 	mov	arg04, local03
1b9b0     C8 31 B0 FD | 	call	#__system__pack_0489
1b9b4     10 01 90 FD | 	jmp	#LR__2544
1b9b8                 | LR__2533
1b9b8     00 24 0E F2 | 	cmp	local04, #0 wz
1b9bc     0F FB 01 56 |  if_ne	mov	result1, local01
1b9c0     04 01 90 5D |  if_ne	jmp	#LR__2544
1b9c4     FF 2C 56 F2 | 	cmps	local08, #255 wc
1b9c8     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1b9cc     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1b9d0     18 00 90 4D |  if_c_and_nz	jmp	#LR__2534
1b9d4     00 F8 3F CF 
1b9d8     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1b9dc     E8 00 90 CD |  if_b	jmp	#LR__2544
1b9e0     00 2A 0E F2 | 	cmp	local07, #0 wz
1b9e4     10 FB 01 56 |  if_ne	mov	result1, local02
1b9e8     DC 00 90 5D |  if_ne	jmp	#LR__2544
1b9ec                 | LR__2534
1b9ec     02 22 46 F5 | 	or	local03, #2
1b9f0     00 12 06 F6 | 	mov	arg01, #0
1b9f4     00 14 06 F6 | 	mov	arg02, #0
1b9f8     13 17 02 F6 | 	mov	arg03, local05
1b9fc     11 19 02 F6 | 	mov	arg04, local03
1ba00     78 31 B0 FD | 	call	#__system__pack_0489
1ba04     C0 00 90 FD | 	jmp	#LR__2544
1ba08                 | LR__2535
1ba08     00 26 0E F2 | 	cmp	local05, #0 wz
1ba0c     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1ba10     00 F8 3F AF 
1ba14     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1ba18     AC 00 90 AD |  if_e	jmp	#LR__2544
1ba1c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ba20     10 FB 01 56 |  if_ne	mov	result1, local02
1ba24     A0 00 90 5D |  if_ne	jmp	#LR__2544
1ba28     16 17 02 F6 | 	mov	arg03, local08
1ba2c     11 19 02 F6 | 	mov	arg04, local03
1ba30     02 18 46 F5 | 	or	arg04, #2
1ba34     00 12 06 F6 | 	mov	arg01, #0
1ba38     00 14 06 F6 | 	mov	arg02, #0
1ba3c     3C 31 B0 FD | 	call	#__system__pack_0489
1ba40     84 00 90 FD | 	jmp	#LR__2544
1ba44                 | LR__2536
1ba44     00 24 0E F2 | 	cmp	local04, #0 wz
1ba48     20 00 90 AD |  if_e	jmp	#LR__2539
1ba4c     01 24 66 F0 | 	shl	local04, #1
1ba50     97 0A 48 FB | 	callpa	#(@LR__2538-@LR__2537)>>2,fcache_load_ptr_
1ba54                 | LR__2537
1ba54     00 40 00 FF 
1ba58     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1ba5c     01 26 86 C1 |  if_b	sub	local05, #1
1ba60     01 24 66 C0 |  if_b	shl	local04, #1
1ba64     EC FF 9F CD |  if_b	jmp	#LR__2537
1ba68                 | LR__2538
1ba68     D0 FE 9F FD | 	jmp	#LR__2530
1ba6c                 | LR__2539
1ba6c     08 22 46 F5 | 	or	local03, #8
1ba70     00 12 06 F6 | 	mov	arg01, #0
1ba74     00 14 06 F6 | 	mov	arg02, #0
1ba78     00 16 06 F6 | 	mov	arg03, #0
1ba7c     11 19 02 F6 | 	mov	arg04, local03
1ba80     F8 30 B0 FD | 	call	#__system__pack_0489
1ba84     40 00 90 FD | 	jmp	#LR__2544
1ba88                 | LR__2540
1ba88     00 2A 0E F2 | 	cmp	local07, #0 wz
1ba8c     20 00 90 AD |  if_e	jmp	#LR__2543
1ba90     01 2A 66 F0 | 	shl	local07, #1
1ba94     97 0A 48 FB | 	callpa	#(@LR__2542-@LR__2541)>>2,fcache_load_ptr_
1ba98                 | LR__2541
1ba98     00 40 00 FF 
1ba9c     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1baa0     01 2C 86 C1 |  if_b	sub	local08, #1
1baa4     01 2A 66 C0 |  if_b	shl	local07, #1
1baa8     EC FF 9F CD |  if_b	jmp	#LR__2541
1baac                 | LR__2542
1baac     98 FE 9F FD | 	jmp	#LR__2531
1bab0                 | LR__2543
1bab0     08 22 46 F5 | 	or	local03, #8
1bab4     00 12 06 F6 | 	mov	arg01, #0
1bab8     00 14 06 F6 | 	mov	arg02, #0
1babc     00 16 06 F6 | 	mov	arg03, #0
1bac0     11 19 02 F6 | 	mov	arg04, local03
1bac4     B4 30 B0 FD | 	call	#__system__pack_0489
1bac8                 | LR__2544
1bac8     A7 F0 03 F6 | 	mov	ptra, fp
1bacc     B2 00 A0 FD | 	call	#popregs_
1bad0                 | __system___float_mul_ret
1bad0     2D 00 64 FD | 	ret
1bad4                 | 
1bad4                 | __system___float_div
1bad4     0E 4A 05 F6 | 	mov	COUNT_, #14
1bad8     A8 00 A0 FD | 	call	#pushregs_
1badc     09 23 02 F6 | 	mov	local03, arg01
1bae0     0A 25 02 F6 | 	mov	local04, arg02
1bae4     11 27 02 F6 | 	mov	local05, local03
1bae8     13 29 02 F6 | 	mov	local06, local05
1baec     16 28 46 F7 | 	zerox	local06, #22
1baf0     13 2B 02 F6 | 	mov	local07, local05
1baf4     01 2A 66 F0 | 	shl	local07, #1
1baf8     18 2A 46 F0 | 	shr	local07, #24
1bafc     1F 26 46 F0 | 	shr	local05, #31
1bb00     12 FB 01 F6 | 	mov	result1, local04
1bb04     FD 2C 02 F6 | 	mov	local08, result1
1bb08     16 2F 02 F6 | 	mov	local09, local08
1bb0c     16 2E 46 F7 | 	zerox	local09, #22
1bb10     16 31 02 F6 | 	mov	local10, local08
1bb14     01 30 66 F0 | 	shl	local10, #1
1bb18     18 30 46 F0 | 	shr	local10, #24
1bb1c     1F 2C 46 F0 | 	shr	local08, #31
1bb20     16 27 62 F5 | 	xor	local05, local08
1bb24     FF 2A 0E F2 | 	cmp	local07, #255 wz
1bb28     D4 00 90 AD |  if_e	jmp	#LR__2555
1bb2c     FF 30 0E F2 | 	cmp	local10, #255 wz
1bb30     04 01 90 AD |  if_e	jmp	#LR__2556
1bb34     00 2A 0E F2 | 	cmp	local07, #0 wz
1bb38     24 01 90 AD |  if_e	jmp	#LR__2557
1bb3c     17 28 26 F4 | 	bith	local06, #23
1bb40                 | LR__2550
1bb40     00 30 0E F2 | 	cmp	local10, #0 wz
1bb44     70 01 90 AD |  if_e	jmp	#LR__2561
1bb48     17 2E 26 F4 | 	bith	local09, #23
1bb4c                 | LR__2551
1bb4c     18 2B 82 F1 | 	sub	local07, local10
1bb50     15 33 02 F6 | 	mov	local11, local07
1bb54     14 13 02 F6 | 	mov	arg01, local06
1bb58     02 12 46 F0 | 	shr	arg01, #2
1bb5c     1E 28 66 F0 | 	shl	local06, #30
1bb60     14 15 02 F6 | 	mov	arg02, local06
1bb64     17 17 02 F6 | 	mov	arg03, local09
1bb68     28 12 62 FD | 	setq	arg01
1bb6c     0B 15 12 FD | 	qdiv	arg02, arg03
1bb70     00 34 06 F6 | 	mov	local12, #0
1bb74     18 1E 62 FD | 	getqx	local01
1bb78     19 FC 61 FD | 	getqy	result2
1bb7c     FE 20 02 F6 | 	mov	local02, result2
1bb80     0F 37 02 F6 | 	mov	local13, local01
1bb84     00 20 4E F2 | 	cmps	local02, #0 wz
1bb88     1B 39 02 F6 | 	mov	local14, local13
1bb8c     19 38 66 F0 | 	shl	local14, #25
1bb90     01 34 06 56 |  if_ne	mov	local12, #1
1bb94     1A 39 42 F5 | 	or	local14, local12
1bb98     07 36 46 F0 | 	shr	local13, #7
1bb9c     00 80 00 FF 
1bba0     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1bba4     1C 00 90 CD |  if_b	jmp	#LR__2552
1bba8     01 32 06 F1 | 	add	local11, #1
1bbac     01 38 46 F0 | 	shr	local14, #1
1bbb0     1B 35 02 F6 | 	mov	local12, local13
1bbb4     1F 34 66 F0 | 	shl	local12, #31
1bbb8     1A 39 42 F5 | 	or	local14, local12
1bbbc     01 36 46 F0 | 	shr	local13, #1
1bbc0     24 00 90 FD | 	jmp	#LR__2554
1bbc4                 | LR__2552
1bbc4     00 40 00 FF 
1bbc8     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1bbcc     18 00 90 3D |  if_ae	jmp	#LR__2553
1bbd0     01 32 86 F1 | 	sub	local11, #1
1bbd4     01 36 66 F0 | 	shl	local13, #1
1bbd8     1C 35 02 F6 | 	mov	local12, local14
1bbdc     1F 34 46 F0 | 	shr	local12, #31
1bbe0     1A 37 42 F5 | 	or	local13, local12
1bbe4     01 38 66 F0 | 	shl	local14, #1
1bbe8                 | LR__2553
1bbe8                 | LR__2554
1bbe8     1B 13 02 F6 | 	mov	arg01, local13
1bbec     1C 15 02 F6 | 	mov	arg02, local14
1bbf0     19 17 02 F6 | 	mov	arg03, local11
1bbf4     13 19 02 F6 | 	mov	arg04, local05
1bbf8     80 2F B0 FD | 	call	#__system__pack_0489
1bbfc     F8 00 90 FD | 	jmp	#LR__2565
1bc00                 | LR__2555
1bc00     00 28 0E F2 | 	cmp	local06, #0 wz
1bc04     11 FB 01 56 |  if_ne	mov	result1, local03
1bc08     EC 00 90 5D |  if_ne	jmp	#LR__2565
1bc0c     FF 30 0E F2 | 	cmp	local10, #255 wz
1bc10     00 F8 3F AF 
1bc14     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bc18     DC 00 90 AD |  if_e	jmp	#LR__2565
1bc1c     02 26 46 F5 | 	or	local05, #2
1bc20     00 12 06 F6 | 	mov	arg01, #0
1bc24     00 14 06 F6 | 	mov	arg02, #0
1bc28     15 17 02 F6 | 	mov	arg03, local07
1bc2c     13 19 02 F6 | 	mov	arg04, local05
1bc30     48 2F B0 FD | 	call	#__system__pack_0489
1bc34     C0 00 90 FD | 	jmp	#LR__2565
1bc38                 | LR__2556
1bc38     00 2E 0E F2 | 	cmp	local09, #0 wz
1bc3c     12 FB 01 56 |  if_ne	mov	result1, local04
1bc40     B4 00 90 5D |  if_ne	jmp	#LR__2565
1bc44     13 19 02 F6 | 	mov	arg04, local05
1bc48     08 18 46 F5 | 	or	arg04, #8
1bc4c     00 12 06 F6 | 	mov	arg01, #0
1bc50     00 14 06 F6 | 	mov	arg02, #0
1bc54     00 16 06 F6 | 	mov	arg03, #0
1bc58     20 2F B0 FD | 	call	#__system__pack_0489
1bc5c     98 00 90 FD | 	jmp	#LR__2565
1bc60                 | LR__2557
1bc60     00 28 0E F2 | 	cmp	local06, #0 wz
1bc64     20 00 90 AD |  if_e	jmp	#LR__2560
1bc68     01 28 66 F0 | 	shl	local06, #1
1bc6c     97 0A 48 FB | 	callpa	#(@LR__2559-@LR__2558)>>2,fcache_load_ptr_
1bc70                 | LR__2558
1bc70     00 40 00 FF 
1bc74     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1bc78     01 2A 86 C1 |  if_b	sub	local07, #1
1bc7c     01 28 66 C0 |  if_b	shl	local06, #1
1bc80     EC FF 9F CD |  if_b	jmp	#LR__2558
1bc84                 | LR__2559
1bc84     B8 FE 9F FD | 	jmp	#LR__2550
1bc88                 | LR__2560
1bc88     00 30 0E F2 | 	cmp	local10, #0 wz
1bc8c     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1bc90     00 F8 3F AF 
1bc94     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bc98     5C 00 90 AD |  if_e	jmp	#LR__2565
1bc9c     13 19 02 F6 | 	mov	arg04, local05
1bca0     08 18 46 F5 | 	or	arg04, #8
1bca4     00 12 06 F6 | 	mov	arg01, #0
1bca8     00 14 06 F6 | 	mov	arg02, #0
1bcac     00 16 06 F6 | 	mov	arg03, #0
1bcb0     C8 2E B0 FD | 	call	#__system__pack_0489
1bcb4     40 00 90 FD | 	jmp	#LR__2565
1bcb8                 | LR__2561
1bcb8     00 2E 0E F2 | 	cmp	local09, #0 wz
1bcbc     20 00 90 AD |  if_e	jmp	#LR__2564
1bcc0     01 2E 66 F0 | 	shl	local09, #1
1bcc4     97 0A 48 FB | 	callpa	#(@LR__2563-@LR__2562)>>2,fcache_load_ptr_
1bcc8                 | LR__2562
1bcc8     00 40 00 FF 
1bccc     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1bcd0     01 30 86 C1 |  if_b	sub	local10, #1
1bcd4     01 2E 66 C0 |  if_b	shl	local09, #1
1bcd8     EC FF 9F CD |  if_b	jmp	#LR__2562
1bcdc                 | LR__2563
1bcdc     6C FE 9F FD | 	jmp	#LR__2551
1bce0                 | LR__2564
1bce0     02 26 46 F5 | 	or	local05, #2
1bce4     00 12 06 F6 | 	mov	arg01, #0
1bce8     00 14 06 F6 | 	mov	arg02, #0
1bcec     00 16 06 F6 | 	mov	arg03, #0
1bcf0     13 19 02 F6 | 	mov	arg04, local05
1bcf4     84 2E B0 FD | 	call	#__system__pack_0489
1bcf8                 | LR__2565
1bcf8     A7 F0 03 F6 | 	mov	ptra, fp
1bcfc     B2 00 A0 FD | 	call	#popregs_
1bd00                 | __system___float_div_ret
1bd00     2D 00 64 FD | 	ret
1bd04                 | 
1bd04                 | __system___float_cmp
1bd04     00 C0 3F FF 
1bd08     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1bd0c     00 C0 3F CF 
1bd10     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1bd14     0B FB 01 36 |  if_ae	mov	result1, arg03
1bd18     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bd1c     00 C0 7F FF 
1bd20     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1bd24     00 C0 7F CF 
1bd28     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1bd2c     0B FB 01 36 |  if_ae	mov	result1, arg03
1bd30     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bd34     00 12 56 F2 | 	cmps	arg01, #0 wc
1bd38     2C 00 90 3D |  if_ae	jmp	#LR__2570
1bd3c     00 14 56 F2 | 	cmps	arg02, #0 wc
1bd40     0A FB 01 C6 |  if_b	mov	result1, arg02
1bd44     09 FB 81 C1 |  if_b	sub	result1, arg01
1bd48     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1bd4c     00 14 0E F2 | 	cmp	arg02, #0 wz
1bd50     00 00 40 AF 
1bd54     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1bd58     00 FA 05 A6 |  if_e	mov	result1, #0
1bd5c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bd60     01 FA 65 F6 | 	neg	result1, #1
1bd64     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1bd68                 | LR__2570
1bd68     00 14 56 F2 | 	cmps	arg02, #0 wc
1bd6c     1C 00 90 3D |  if_ae	jmp	#LR__2571
1bd70     00 12 0E F2 | 	cmp	arg01, #0 wz
1bd74     00 00 40 AF 
1bd78     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1bd7c     00 FA 05 A6 |  if_e	mov	result1, #0
1bd80     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bd84     01 FA 05 F6 | 	mov	result1, #1
1bd88     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1bd8c                 | LR__2571
1bd8c     0A 13 82 F1 | 	sub	arg01, arg02
1bd90     09 FB 01 F6 | 	mov	result1, arg01
1bd94                 | __system___float_cmp_ret
1bd94     2D 00 64 FD | 	ret
1bd98                 | 
1bd98                 | __system___float_tointeger
1bd98     02 4A 05 F6 | 	mov	COUNT_, #2
1bd9c     A8 00 A0 FD | 	call	#pushregs_
1bda0     50 00 B0 FD | 	call	#__system___float_Unpack
1bda4     FF FF 7F FF 
1bda8     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1bdac     34 00 90 CD |  if_b	jmp	#LR__2580
1bdb0     1F FC 55 F2 | 	cmps	result2, #31 wc
1bdb4     2C 00 90 3D |  if_ae	jmp	#LR__2580
1bdb8     02 FE 65 F0 | 	shl	result3, #2
1bdbc     1E 1E 06 F6 | 	mov	local01, #30
1bdc0     FE 1E 82 F1 | 	sub	local01, result2
1bdc4     0F FF 41 F0 | 	shr	result3, local01
1bdc8     FF 20 02 F6 | 	mov	local02, result3
1bdcc     0A 21 02 F1 | 	add	local02, arg02
1bdd0     01 20 46 F0 | 	shr	local02, #1
1bdd4     00 FA 0D F2 | 	cmp	result1, #0 wz
1bdd8     10 21 62 56 |  if_ne	neg	local02, local02
1bddc     10 FB 01 F6 | 	mov	result1, local02
1bde0     04 00 90 FD | 	jmp	#LR__2581
1bde4                 | LR__2580
1bde4     00 FA 05 F6 | 	mov	result1, #0
1bde8                 | LR__2581
1bde8     A7 F0 03 F6 | 	mov	ptra, fp
1bdec     B2 00 A0 FD | 	call	#popregs_
1bdf0                 | __system___float_tointeger_ret
1bdf0     2D 00 64 FD | 	ret
1bdf4                 | 
1bdf4                 | __system___float_Unpack
1bdf4     09 01 02 F6 | 	mov	_var01, arg01
1bdf8     1F 00 46 F0 | 	shr	_var01, #31
1bdfc     09 03 02 F6 | 	mov	_var02, arg01
1be00     01 02 66 F0 | 	shl	_var02, #1
1be04     18 02 4E F0 | 	shr	_var02, #24 wz
1be08     17 13 06 F4 | 	bitl	arg01, #279
1be0c     06 12 66 50 |  if_ne	shl	arg01, #6
1be10     1D 12 26 54 |  if_ne	bith	arg01, #29
1be14     1C 00 90 5D |  if_ne	jmp	#LR__2590
1be18     09 05 92 F7 | 	encod	_var03, arg01 wc
1be1c     01 04 06 C1 |  if_b	add	_var03, #1
1be20     17 04 86 F1 | 	sub	_var03, #23
1be24     02 03 02 F6 | 	mov	_var02, _var03
1be28     07 FC 05 F6 | 	mov	result2, #7
1be2c     02 FD 81 F1 | 	sub	result2, _var03
1be30     FE 12 62 F0 | 	shl	arg01, result2
1be34                 | LR__2590
1be34     7F 02 86 F1 | 	sub	_var02, #127
1be38     09 FF 01 F6 | 	mov	result3, arg01
1be3c     00 FB 01 F6 | 	mov	result1, _var01
1be40     01 FD 01 F6 | 	mov	result2, _var02
1be44                 | __system___float_Unpack_ret
1be44     2D 00 64 FD | 	ret
1be48                 | 
1be48                 | __system___float_Pack
1be48     00 00 06 F6 | 	mov	_var01, #0
1be4c     00 16 0E F2 | 	cmp	arg03, #0 wz
1be50     8C 00 90 AD |  if_e	jmp	#LR__2601
1be54     0B 03 92 F7 | 	encod	_var02, arg03 wc
1be58     01 02 06 C1 |  if_b	add	_var02, #1
1be5c     21 00 06 F6 | 	mov	_var01, #33
1be60     01 01 82 F1 | 	sub	_var01, _var02
1be64     00 17 62 F0 | 	shl	arg03, _var01
1be68     03 02 06 F6 | 	mov	_var02, #3
1be6c     00 03 82 F1 | 	sub	_var02, _var01
1be70     01 15 02 F1 | 	add	arg02, _var02
1be74     0A 05 02 F6 | 	mov	_var03, arg02
1be78     00 17 06 F1 | 	add	arg03, #256
1be7c     0B 03 02 F6 | 	mov	_var02, arg03
1be80     FF 02 2E F5 | 	andn	_var02, #255 wz
1be84     01 04 06 A1 |  if_e	add	_var03, #1
1be88     7F 04 06 F1 | 	add	_var03, #127
1be8c     FF FF 7F FF 
1be90     E9 05 46 F3 | 	fges	_var03, ##-23
1be94     FF 04 66 F3 | 	fles	_var03, #255
1be98     01 04 56 F2 | 	cmps	_var03, #1 wc
1be9c     1C 00 90 3D |  if_ae	jmp	#LR__2600
1bea0     01 16 46 F0 | 	shr	arg03, #1
1bea4     1F 02 C6 F9 | 	decod	_var02, #31
1bea8     0B 03 02 F1 | 	add	_var02, arg03
1beac     02 05 62 F6 | 	neg	_var03, _var03
1beb0     02 03 42 F0 | 	shr	_var02, _var03
1beb4     01 17 02 F6 | 	mov	arg03, _var02
1beb8     00 04 06 F6 | 	mov	_var03, #0
1bebc                 | LR__2600
1bebc     09 FB 01 F6 | 	mov	result1, arg01
1bec0     1F FA 65 F0 | 	shl	result1, #31
1bec4     02 03 02 F6 | 	mov	_var02, _var03
1bec8     17 02 66 F0 | 	shl	_var02, #23
1becc     01 FB 41 F5 | 	or	result1, _var02
1bed0     0B 07 02 F6 | 	mov	_var04, arg03
1bed4     09 06 46 F0 | 	shr	_var04, #9
1bed8     03 FB 41 F5 | 	or	result1, _var04
1bedc     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1bee0                 | LR__2601
1bee0     00 FB 01 F6 | 	mov	result1, _var01
1bee4                 | __system___float_Pack_ret
1bee4     2D 00 64 FD | 	ret
1bee8                 | 
1bee8                 | __system___basic_print_float
1bee8     05 4A 05 F6 | 	mov	COUNT_, #5
1beec     A8 00 A0 FD | 	call	#pushregs_
1bef0     09 1F 02 F6 | 	mov	local01, arg01
1bef4     0A 21 02 F6 | 	mov	local02, arg02
1bef8     0B 23 0A F6 | 	mov	local03, arg03 wz
1befc     0C 25 02 F6 | 	mov	local04, arg04
1bf00     14 00 90 5D |  if_ne	jmp	#LR__2610
1bf04     23 24 0E F2 | 	cmp	local04, #35 wz
1bf08     80 02 10 AF 
1bf0c     00 26 06 A6 |  if_e	mov	local05, ##537198592
1bf10     1D 26 C6 59 |  if_ne	decod	local05, #29
1bf14     13 23 02 F6 | 	mov	local03, local05
1bf18                 | LR__2610
1bf18     0F 13 02 F6 | 	mov	arg01, local01
1bf1c     40 27 B0 FD | 	call	#__system___gettxfunc
1bf20     FD 26 0A F6 | 	mov	local05, result1 wz
1bf24     00 FA 05 A6 |  if_e	mov	result1, #0
1bf28     13 13 02 56 |  if_ne	mov	arg01, local05
1bf2c     11 15 02 56 |  if_ne	mov	arg02, local03
1bf30     10 17 02 56 |  if_ne	mov	arg03, local02
1bf34     12 19 02 56 |  if_ne	mov	arg04, local04
1bf38     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1bf3c     A7 F0 03 F6 | 	mov	ptra, fp
1bf40     B2 00 A0 FD | 	call	#popregs_
1bf44                 | __system___basic_print_float_ret
1bf44     2D 00 64 FD | 	ret
1bf48                 | 
1bf48                 | __system____builtin_atoi
1bf48     07 4A 05 F6 | 	mov	COUNT_, #7
1bf4c     A8 00 A0 FD | 	call	#pushregs_
1bf50                 | __system____builtin_atoi_enter
1bf50     09 1F 02 F6 | 	mov	local01, arg01
1bf54     0A 21 02 F6 | 	mov	local02, arg02
1bf58     00 22 06 F6 | 	mov	local03, #0
1bf5c     00 24 06 F6 | 	mov	local04, #0
1bf60     00 26 06 F6 | 	mov	local05, #0
1bf64     97 08 48 FB | 	callpa	#(@LR__2621-@LR__2620)>>2,fcache_load_ptr_
1bf68                 | LR__2620
1bf68     0F 29 C2 FA | 	rdbyte	local06, local01
1bf6c     20 28 0E F2 | 	cmp	local06, #32 wz
1bf70     01 1E 06 A1 |  if_e	add	local01, #1
1bf74     F0 FF 9F AD |  if_e	jmp	#LR__2620
1bf78                 | LR__2621
1bf78     0F 2B C2 FA | 	rdbyte	local07, local01
1bf7c                 | LR__2622
1bf7c     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bf80     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1bf84     18 00 90 5D |  if_ne	jmp	#LR__2623
1bf88     01 1E 06 F1 | 	add	local01, #1
1bf8c     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bf90     01 28 06 A6 |  if_e	mov	local06, #1
1bf94     14 27 C2 A2 |  if_e	subr	local05, local06
1bf98     0F 2B C2 FA | 	rdbyte	local07, local01
1bf9c     DC FF 9F FD | 	jmp	#LR__2622
1bfa0                 | LR__2623
1bfa0     97 48 48 FB | 	callpa	#(@LR__2631-@LR__2624)>>2,fcache_load_ptr_
1bfa4                 | LR__2624
1bfa4                 | LR__2625
1bfa4     0F 2B C2 FA | 	rdbyte	local07, local01
1bfa8     5F 2A 0E F2 | 	cmp	local07, #95 wz
1bfac     01 1E 06 F1 | 	add	local01, #1
1bfb0     F0 FF 9F AD |  if_e	jmp	#LR__2625
1bfb4     30 2A 0E F2 | 	cmp	local07, #48 wz
1bfb8     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1bfbc     00 24 06 A6 |  if_e	mov	local04, #0
1bfc0     60 00 90 AD |  if_e	jmp	#LR__2630
1bfc4     31 2A 56 F2 | 	cmps	local07, #49 wc
1bfc8     18 00 90 CD |  if_b	jmp	#LR__2626
1bfcc     3A 2A 56 F2 | 	cmps	local07, #58 wc
1bfd0     15 25 02 C6 |  if_b	mov	local04, local07
1bfd4     30 24 86 C1 |  if_b	sub	local04, #48
1bfd8     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1bfdc     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1bfe0     40 00 90 CD |  if_b	jmp	#LR__2629
1bfe4                 | LR__2626
1bfe4     0B 20 56 F2 | 	cmps	local02, #11 wc
1bfe8     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1bfec     14 00 90 CD |  if_b	jmp	#LR__2627
1bff0     67 2A 56 F2 | 	cmps	local07, #103 wc
1bff4     61 2A 86 C1 |  if_b	sub	local07, #97
1bff8     0A 24 06 C6 |  if_b	mov	local04, #10
1bffc     15 25 02 C1 |  if_b	add	local04, local07
1c000     20 00 90 CD |  if_b	jmp	#LR__2628
1c004                 | LR__2627
1c004     0B 20 56 F2 | 	cmps	local02, #11 wc
1c008     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1c00c     24 00 90 CD |  if_b	jmp	#LR__2632
1c010     47 2A 56 F2 | 	cmps	local07, #71 wc
1c014     41 2A 86 C1 |  if_b	sub	local07, #65
1c018     0A 24 06 C6 |  if_b	mov	local04, #10
1c01c     15 25 02 C1 |  if_b	add	local04, local07
1c020     10 00 90 3D |  if_ae	jmp	#LR__2632
1c024                 | LR__2628
1c024                 | LR__2629
1c024                 | LR__2630
1c024     11 21 02 FD | 	qmul	local02, local03
1c028     18 22 62 FD | 	getqx	local03
1c02c     12 23 02 F1 | 	add	local03, local04
1c030     70 FF 9F FD | 	jmp	#LR__2624
1c034                 | LR__2631
1c034                 | LR__2632
1c034     00 20 0E F2 | 	cmp	local02, #0 wz
1c038     64 00 90 5D |  if_ne	jmp	#LR__2638
1c03c     78 2A 0E F2 | 	cmp	local07, #120 wz
1c040     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1c044     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1c048     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1c04c     14 00 90 5D |  if_ne	jmp	#LR__2633
1c050     0F 13 02 F6 | 	mov	arg01, local01
1c054     10 14 06 F6 | 	mov	arg02, #16
1c058     EC FE BF FD | 	call	#__system____builtin_atoi
1c05c     FD 22 02 F6 | 	mov	local03, result1
1c060     3C 00 90 FD | 	jmp	#LR__2637
1c064                 | LR__2633
1c064     62 2A 0E F2 | 	cmp	local07, #98 wz
1c068     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1c06c     14 00 90 5D |  if_ne	jmp	#LR__2634
1c070     0F 13 02 F6 | 	mov	arg01, local01
1c074     02 14 06 F6 | 	mov	arg02, #2
1c078     CC FE BF FD | 	call	#__system____builtin_atoi
1c07c     FD 22 02 F6 | 	mov	local03, result1
1c080     1C 00 90 FD | 	jmp	#LR__2636
1c084                 | LR__2634
1c084     6F 2A 0E F2 | 	cmp	local07, #111 wz
1c088     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1c08c     10 00 90 5D |  if_ne	jmp	#LR__2635
1c090     0F 13 02 F6 | 	mov	arg01, local01
1c094     08 14 06 F6 | 	mov	arg02, #8
1c098     AC FE BF FD | 	call	#__system____builtin_atoi
1c09c     FD 22 02 F6 | 	mov	local03, result1
1c0a0                 | LR__2635
1c0a0                 | LR__2636
1c0a0                 | LR__2637
1c0a0                 | LR__2638
1c0a0     00 26 0E F2 | 	cmp	local05, #0 wz
1c0a4     11 23 62 56 |  if_ne	neg	local03, local03
1c0a8     11 FB 01 F6 | 	mov	result1, local03
1c0ac     A7 F0 03 F6 | 	mov	ptra, fp
1c0b0     B2 00 A0 FD | 	call	#popregs_
1c0b4                 | __system____builtin_atoi_ret
1c0b4     2D 00 64 FD | 	ret
1c0b8                 | 
1c0b8                 | __system____builtin_atof
1c0b8     07 4A 05 F6 | 	mov	COUNT_, #7
1c0bc     A8 00 A0 FD | 	call	#pushregs_
1c0c0     09 1F 02 F6 | 	mov	local01, arg01
1c0c4     00 20 06 F6 | 	mov	local02, #0
1c0c8     00 22 06 F6 | 	mov	local03, #0
1c0cc     00 24 06 F6 | 	mov	local04, #0
1c0d0     00 26 06 F6 | 	mov	local05, #0
1c0d4     97 08 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1c0d8                 | LR__2640
1c0d8     0F 17 C2 FA | 	rdbyte	arg03, local01
1c0dc     20 16 0E F2 | 	cmp	arg03, #32 wz
1c0e0     01 1E 06 A1 |  if_e	add	local01, #1
1c0e4     F0 FF 9F AD |  if_e	jmp	#LR__2640
1c0e8                 | LR__2641
1c0e8     0F 29 C2 FA | 	rdbyte	local06, local01
1c0ec                 | LR__2642
1c0ec     2B 28 0E F2 | 	cmp	local06, #43 wz
1c0f0     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1c0f4     14 00 90 5D |  if_ne	jmp	#LR__2643
1c0f8     2D 28 0E F2 | 	cmp	local06, #45 wz
1c0fc     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1c100     01 1E 06 F1 | 	add	local01, #1
1c104     0F 29 C2 FA | 	rdbyte	local06, local01
1c108     E0 FF 9F FD | 	jmp	#LR__2642
1c10c                 | LR__2643
1c10c                 | LR__2644
1c10c     97 08 48 FB | 	callpa	#(@LR__2646-@LR__2645)>>2,fcache_load_ptr_
1c110                 | LR__2645
1c110     0F 29 C2 FA | 	rdbyte	local06, local01
1c114     5F 28 0E F2 | 	cmp	local06, #95 wz
1c118     01 1E 06 F1 | 	add	local01, #1
1c11c     F0 FF 9F AD |  if_e	jmp	#LR__2645
1c120                 | LR__2646
1c120     00 28 0E F2 | 	cmp	local06, #0 wz
1c124     5C 00 90 AD |  if_e	jmp	#LR__2648
1c128     30 28 56 F2 | 	cmps	local06, #48 wc
1c12c     44 00 90 CD |  if_b	jmp	#LR__2647
1c130     3A 28 56 F2 | 	cmps	local06, #58 wc
1c134     3C 00 90 3D |  if_ae	jmp	#LR__2647
1c138     10 13 02 F6 | 	mov	arg01, local02
1c13c     00 90 20 FF 
1c140     00 14 06 F6 | 	mov	arg02, ##1092616192
1c144     88 F7 BF FD | 	call	#__system___float_mul
1c148     FD 20 02 F6 | 	mov	local02, result1
1c14c     30 28 86 F1 | 	sub	local06, #48
1c150     14 13 02 F6 | 	mov	arg01, local06
1c154     74 F3 BF FD | 	call	#__system___float_fromuns
1c158     FD 14 02 F6 | 	mov	arg02, result1
1c15c     10 13 02 F6 | 	mov	arg01, local02
1c160     9C F3 BF FD | 	call	#__system___float_add
1c164     FD 20 02 F6 | 	mov	local02, result1
1c168     00 26 0E F2 | 	cmp	local05, #0 wz
1c16c     01 22 86 51 |  if_ne	sub	local03, #1
1c170     98 FF 9F FD | 	jmp	#LR__2644
1c174                 | LR__2647
1c174     2E 28 0E F2 | 	cmp	local06, #46 wz
1c178     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1c17c     01 26 06 A6 |  if_e	mov	local05, #1
1c180     88 FF 9F AD |  if_e	jmp	#LR__2644
1c184                 | LR__2648
1c184     45 28 0E F2 | 	cmp	local06, #69 wz
1c188     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1c18c     18 00 90 5D |  if_ne	jmp	#LR__2649
1c190     0F 13 02 F6 | 	mov	arg01, local01
1c194     00 14 06 F6 | 	mov	arg02, #0
1c198     AC FD BF FD | 	call	#__system____builtin_atoi
1c19c     11 FB 01 F1 | 	add	result1, local03
1c1a0     FD 2A 02 F6 | 	mov	local07, result1
1c1a4     04 00 90 FD | 	jmp	#LR__2650
1c1a8                 | LR__2649
1c1a8     11 2B 02 F6 | 	mov	local07, local03
1c1ac                 | LR__2650
1c1ac     15 17 02 F6 | 	mov	arg03, local07
1c1b0     10 13 02 F6 | 	mov	arg01, local02
1c1b4     00 90 20 FF 
1c1b8     00 14 06 F6 | 	mov	arg02, ##1092616192
1c1bc     BC 06 B0 FD | 	call	#__system___float_pow_n
1c1c0     12 FB 61 F5 | 	xor	result1, local04
1c1c4     A7 F0 03 F6 | 	mov	ptra, fp
1c1c8     B2 00 A0 FD | 	call	#popregs_
1c1cc                 | __system____builtin_atof_ret
1c1cc     2D 00 64 FD | 	ret
1c1d0                 | 
1c1d0                 | __system____builtin_ilogb
1c1d0     20 FC BF FD | 	call	#__system___float_Unpack
1c1d4     00 FE 0D F2 | 	cmp	result3, #0 wz
1c1d8     00 00 40 AF 
1c1dc     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1c1e0     24 00 90 AD |  if_e	jmp	#LR__2661
1c1e4     80 FC 0D F2 | 	cmp	result2, #128 wz
1c1e8     18 00 90 5D |  if_ne	jmp	#LR__2660
1c1ec     00 00 10 FF 
1c1f0     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1c1f4     1E FA CD A9 |  if_e	bmask	result1, #30
1c1f8     0C 00 90 AD |  if_e	jmp	#LR__2661
1c1fc     1F FA C5 F9 | 	decod	result1, #31
1c200     04 00 90 FD | 	jmp	#LR__2661
1c204                 | LR__2660
1c204     FE FA 01 F6 | 	mov	result1, result2
1c208                 | LR__2661
1c208                 | __system____builtin_ilogb_ret
1c208     2D 00 64 FD | 	ret
1c20c                 | 
1c20c                 | __system____builtin_sinf
1c20c     03 4A 05 F6 | 	mov	COUNT_, #3
1c210     A8 00 A0 FD | 	call	#pushregs_
1c214     09 1F 02 F6 | 	mov	local01, arg01
1c218     87 64 20 FF 
1c21c     DB 15 06 F6 | 	mov	arg02, ##1086918619
1c220     B0 F8 BF FD | 	call	#__system___float_div
1c224     FD 12 02 F6 | 	mov	arg01, result1
1c228     00 14 06 F6 | 	mov	arg02, #0
1c22c     68 FB BF FD | 	call	#__system___float_tointeger
1c230     FD 16 0A F6 | 	mov	arg03, result1 wz
1c234     44 00 90 AD |  if_e	jmp	#LR__2670
1c238     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c23c     1F 20 C6 C9 |  if_b	decod	local02, #31
1c240     00 20 06 36 |  if_ae	mov	local02, #0
1c244     84 F2 BF FD | 	call	#__system___float_fromuns
1c248     10 FB 61 F5 | 	xor	result1, local02
1c24c     FD 12 02 F6 | 	mov	arg01, result1
1c250     1E 14 C6 F9 | 	decod	arg02, #30
1c254     78 F6 BF FD | 	call	#__system___float_mul
1c258     FD 12 02 F6 | 	mov	arg01, result1
1c25c     87 24 20 FF 
1c260     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c264     68 F6 BF FD | 	call	#__system___float_mul
1c268     FD 14 02 F6 | 	mov	arg02, result1
1c26c     0F 13 02 F6 | 	mov	arg01, local01
1c270     1F 14 E6 F4 | 	bitnot	arg02, #31
1c274     88 F2 BF FD | 	call	#__system___float_add
1c278     FD 1E 02 F6 | 	mov	local01, result1
1c27c                 | LR__2670
1c27c     0F 13 02 F6 | 	mov	arg01, local01
1c280     66 E6 1E FF 
1c284     CD 14 06 F6 | 	mov	arg02, ##1036831949
1c288     01 16 06 F6 | 	mov	arg03, #1
1c28c     74 FA BF FD | 	call	#__system___float_cmp
1c290     00 FA 55 F2 | 	cmps	result1, #0 wc
1c294     5C 00 90 3D |  if_ae	jmp	#LR__2671
1c298     0F 13 02 F6 | 	mov	arg01, local01
1c29c     66 E6 5E FF 
1c2a0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1c2a4     01 16 66 F6 | 	neg	arg03, #1
1c2a8     58 FA BF FD | 	call	#__system___float_cmp
1c2ac     01 FA 55 F2 | 	cmps	result1, #1 wc
1c2b0     40 00 90 CD |  if_b	jmp	#LR__2671
1c2b4     0F 13 02 F6 | 	mov	arg01, local01
1c2b8     0F 15 02 F6 | 	mov	arg02, local01
1c2bc     10 F6 BF FD | 	call	#__system___float_mul
1c2c0     FD 12 02 F6 | 	mov	arg01, result1
1c2c4     0F 15 02 F6 | 	mov	arg02, local01
1c2c8     04 F6 BF FD | 	call	#__system___float_mul
1c2cc     FD 12 02 F6 | 	mov	arg01, result1
1c2d0     00 60 20 FF 
1c2d4     00 14 06 F6 | 	mov	arg02, ##1086324736
1c2d8     F8 F7 BF FD | 	call	#__system___float_div
1c2dc     FD 14 02 F6 | 	mov	arg02, result1
1c2e0     0F 13 02 F6 | 	mov	arg01, local01
1c2e4     1F 14 E6 F4 | 	bitnot	arg02, #31
1c2e8     14 F2 BF FD | 	call	#__system___float_add
1c2ec     FD 22 02 F6 | 	mov	local03, result1
1c2f0     54 00 90 FD | 	jmp	#LR__2672
1c2f4                 | LR__2671
1c2f4     0F 13 02 F6 | 	mov	arg01, local01
1c2f8     7C 91 26 FF 
1c2fc     83 15 06 F6 | 	mov	arg02, ##1294137731
1c300     CC F5 BF FD | 	call	#__system___float_mul
1c304     FD 12 02 F6 | 	mov	arg01, result1
1c308     00 14 06 F6 | 	mov	arg02, #0
1c30c     88 FA BF FD | 	call	#__system___float_tointeger
1c310     02 FA 65 F0 | 	shl	result1, #2
1c314     00 00 A0 FF 
1c318     FD 00 48 FD | 	qrotate	##1073741824, result1
1c31c     19 12 62 FD | 	getqy	arg01
1c320     09 13 52 F6 | 	abs	arg01, arg01 wc
1c324     1F 20 C6 C9 |  if_b	decod	local02, #31
1c328     00 20 06 36 |  if_ae	mov	local02, #0
1c32c     9C F1 BF FD | 	call	#__system___float_fromuns
1c330     10 FB 61 F5 | 	xor	result1, local02
1c334     FD 12 02 F6 | 	mov	arg01, result1
1c338     00 40 27 FF 
1c33c     00 14 06 F6 | 	mov	arg02, ##1317011456
1c340     90 F7 BF FD | 	call	#__system___float_div
1c344     FD 22 02 F6 | 	mov	local03, result1
1c348                 | LR__2672
1c348     11 FB 01 F6 | 	mov	result1, local03
1c34c     A7 F0 03 F6 | 	mov	ptra, fp
1c350     B2 00 A0 FD | 	call	#popregs_
1c354                 | __system____builtin_sinf_ret
1c354     2D 00 64 FD | 	ret
1c358                 | 
1c358                 | __system____builtin_tanf
1c358     02 4A 05 F6 | 	mov	COUNT_, #2
1c35c     A8 00 A0 FD | 	call	#pushregs_
1c360     09 1F 02 F6 | 	mov	local01, arg01
1c364     A4 FE BF FD | 	call	#__system____builtin_sinf
1c368     FD 20 02 F6 | 	mov	local02, result1
1c36c     0F 15 02 F6 | 	mov	arg02, local01
1c370     87 E4 1F FF 
1c374     DB 13 06 F6 | 	mov	arg01, ##1070141403
1c378     1F 14 E6 F4 | 	bitnot	arg02, #31
1c37c     80 F1 BF FD | 	call	#__system___float_add
1c380     FD 12 02 F6 | 	mov	arg01, result1
1c384     84 FE BF FD | 	call	#__system____builtin_sinf
1c388     FD 14 02 F6 | 	mov	arg02, result1
1c38c     10 13 02 F6 | 	mov	arg01, local02
1c390     40 F7 BF FD | 	call	#__system___float_div
1c394     A7 F0 03 F6 | 	mov	ptra, fp
1c398     B2 00 A0 FD | 	call	#popregs_
1c39c                 | __system____builtin_tanf_ret
1c39c     2D 00 64 FD | 	ret
1c3a0                 | 
1c3a0                 | __system____builtin_asinf
1c3a0     01 4A 05 F6 | 	mov	COUNT_, #1
1c3a4     A8 00 A0 FD | 	call	#pushregs_
1c3a8     09 1F 02 F6 | 	mov	local01, arg01
1c3ac     0F 15 02 F6 | 	mov	arg02, local01
1c3b0     0F 13 02 F6 | 	mov	arg01, local01
1c3b4     18 F5 BF FD | 	call	#__system___float_mul
1c3b8     FD 14 02 F6 | 	mov	arg02, result1
1c3bc     00 C0 1F FF 
1c3c0     00 12 06 F6 | 	mov	arg01, ##1065353216
1c3c4     1F 14 E6 F4 | 	bitnot	arg02, #31
1c3c8     34 F1 BF FD | 	call	#__system___float_add
1c3cc     FD 12 02 F6 | 	mov	arg01, result1
1c3d0     24 F4 BF FD | 	call	#__system___float_sqrt
1c3d4     FD 14 02 F6 | 	mov	arg02, result1
1c3d8     0F 13 02 F6 | 	mov	arg01, local01
1c3dc     58 00 B0 FD | 	call	#__system____builtin_atan2f
1c3e0     A7 F0 03 F6 | 	mov	ptra, fp
1c3e4     B2 00 A0 FD | 	call	#popregs_
1c3e8                 | __system____builtin_asinf_ret
1c3e8     2D 00 64 FD | 	ret
1c3ec                 | 
1c3ec                 | __system____builtin_acosf
1c3ec     01 4A 05 F6 | 	mov	COUNT_, #1
1c3f0     A8 00 A0 FD | 	call	#pushregs_
1c3f4     09 1F 02 F6 | 	mov	local01, arg01
1c3f8     0F 15 02 F6 | 	mov	arg02, local01
1c3fc     0F 13 02 F6 | 	mov	arg01, local01
1c400     CC F4 BF FD | 	call	#__system___float_mul
1c404     FD 14 02 F6 | 	mov	arg02, result1
1c408     00 C0 1F FF 
1c40c     00 12 06 F6 | 	mov	arg01, ##1065353216
1c410     1F 14 E6 F4 | 	bitnot	arg02, #31
1c414     E8 F0 BF FD | 	call	#__system___float_add
1c418     FD 12 02 F6 | 	mov	arg01, result1
1c41c     D8 F3 BF FD | 	call	#__system___float_sqrt
1c420     FD 12 02 F6 | 	mov	arg01, result1
1c424     0F 15 02 F6 | 	mov	arg02, local01
1c428     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1c42c     A7 F0 03 F6 | 	mov	ptra, fp
1c430     B2 00 A0 FD | 	call	#popregs_
1c434                 | __system____builtin_acosf_ret
1c434     2D 00 64 FD | 	ret
1c438                 | 
1c438                 | __system____builtin_atan2f
1c438     04 4A 05 F6 | 	mov	COUNT_, #4
1c43c     A8 00 A0 FD | 	call	#pushregs_
1c440     09 1F 02 F6 | 	mov	local01, arg01
1c444     0A 21 02 F6 | 	mov	local02, arg02
1c448     0F 13 02 F6 | 	mov	arg01, local01
1c44c     00 14 06 F6 | 	mov	arg02, #0
1c450     01 16 06 F6 | 	mov	arg03, #1
1c454     AC F8 BF FD | 	call	#__system___float_cmp
1c458     00 FA 0D F2 | 	cmp	result1, #0 wz
1c45c     28 00 90 5D |  if_ne	jmp	#LR__2680
1c460     10 13 02 F6 | 	mov	arg01, local02
1c464     00 14 06 F6 | 	mov	arg02, #0
1c468     01 16 06 F6 | 	mov	arg03, #1
1c46c     94 F8 BF FD | 	call	#__system___float_cmp
1c470     00 FA 55 F2 | 	cmps	result1, #0 wc
1c474     87 24 60 CF 
1c478     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1c47c     DC 00 90 CD |  if_b	jmp	#LR__2681
1c480     00 FA 05 F6 | 	mov	result1, #0
1c484     D4 00 90 FD | 	jmp	#LR__2681
1c488                 | LR__2680
1c488     10 13 02 F6 | 	mov	arg01, local02
1c48c     10 15 02 F6 | 	mov	arg02, local02
1c490     3C F4 BF FD | 	call	#__system___float_mul
1c494     FD 22 02 F6 | 	mov	local03, result1
1c498     0F 13 02 F6 | 	mov	arg01, local01
1c49c     0F 15 02 F6 | 	mov	arg02, local01
1c4a0     2C F4 BF FD | 	call	#__system___float_mul
1c4a4     FD 14 02 F6 | 	mov	arg02, result1
1c4a8     11 13 02 F6 | 	mov	arg01, local03
1c4ac     50 F0 BF FD | 	call	#__system___float_add
1c4b0     FD 12 02 F6 | 	mov	arg01, result1
1c4b4     40 F3 BF FD | 	call	#__system___float_sqrt
1c4b8     FD 22 02 F6 | 	mov	local03, result1
1c4bc     10 13 02 F6 | 	mov	arg01, local02
1c4c0     11 15 02 F6 | 	mov	arg02, local03
1c4c4     0C F6 BF FD | 	call	#__system___float_div
1c4c8     FD 20 02 F6 | 	mov	local02, result1
1c4cc     0F 13 02 F6 | 	mov	arg01, local01
1c4d0     11 15 02 F6 | 	mov	arg02, local03
1c4d4     FC F5 BF FD | 	call	#__system___float_div
1c4d8     FD 1E 02 F6 | 	mov	local01, result1
1c4dc     00 40 27 FF 
1c4e0     00 12 06 F6 | 	mov	arg01, ##1317011456
1c4e4     10 15 02 F6 | 	mov	arg02, local02
1c4e8     E4 F3 BF FD | 	call	#__system___float_mul
1c4ec     FD 12 02 F6 | 	mov	arg01, result1
1c4f0     00 14 06 F6 | 	mov	arg02, #0
1c4f4     A0 F8 BF FD | 	call	#__system___float_tointeger
1c4f8     FD 22 02 F6 | 	mov	local03, result1
1c4fc     00 40 27 FF 
1c500     00 12 06 F6 | 	mov	arg01, ##1317011456
1c504     0F 15 02 F6 | 	mov	arg02, local01
1c508     C4 F3 BF FD | 	call	#__system___float_mul
1c50c     FD 12 02 F6 | 	mov	arg01, result1
1c510     00 14 06 F6 | 	mov	arg02, #0
1c514     80 F8 BF FD | 	call	#__system___float_tointeger
1c518     FD 22 52 FD | 	qvector	local03, result1
1c51c     87 24 20 FF 
1c520     DB 23 06 F6 | 	mov	local03, ##1078530011
1c524     19 12 62 FD | 	getqy	arg01
1c528     01 12 C6 F0 | 	sar	arg01, #1
1c52c     09 13 52 F6 | 	abs	arg01, arg01 wc
1c530     1F 24 C6 C9 |  if_b	decod	local04, #31
1c534     00 24 06 36 |  if_ae	mov	local04, #0
1c538     90 EF BF FD | 	call	#__system___float_fromuns
1c53c     12 FB 61 F5 | 	xor	result1, local04
1c540     FD 12 02 F6 | 	mov	arg01, result1
1c544     00 40 27 FF 
1c548     00 14 06 F6 | 	mov	arg02, ##1317011456
1c54c     84 F5 BF FD | 	call	#__system___float_div
1c550     FD 14 02 F6 | 	mov	arg02, result1
1c554     11 13 02 F6 | 	mov	arg01, local03
1c558     74 F3 BF FD | 	call	#__system___float_mul
1c55c                 | LR__2681
1c55c     A7 F0 03 F6 | 	mov	ptra, fp
1c560     B2 00 A0 FD | 	call	#popregs_
1c564                 | __system____builtin_atan2f_ret
1c564     2D 00 64 FD | 	ret
1c568                 | 
1c568                 | __system____builtin_exp2f
1c568     04 4A 05 F6 | 	mov	COUNT_, #4
1c56c     A8 00 A0 FD | 	call	#pushregs_
1c570     09 1F 02 F6 | 	mov	local01, arg01
1c574     00 7F 21 FF 
1c578     00 14 06 F6 | 	mov	arg02, ##1123942400
1c57c     01 16 66 F6 | 	neg	arg03, #1
1c580     80 F7 BF FD | 	call	#__system___float_cmp
1c584     00 FA 55 F2 | 	cmps	result1, #0 wc
1c588     00 C0 3F 3F 
1c58c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1c590     DC 00 90 3D |  if_ae	jmp	#LR__2691
1c594     0F 13 02 F6 | 	mov	arg01, local01
1c598     00 7F 61 FF 
1c59c     00 14 06 F6 | 	mov	arg02, ##-1023541248
1c5a0     01 16 06 F6 | 	mov	arg03, #1
1c5a4     5C F7 BF FD | 	call	#__system___float_cmp
1c5a8     00 FA 55 F2 | 	cmps	result1, #0 wc
1c5ac     00 FA 05 C6 |  if_b	mov	result1, #0
1c5b0     BC 00 90 CD |  if_b	jmp	#LR__2691
1c5b4     0F 13 02 F6 | 	mov	arg01, local01
1c5b8     00 14 06 F6 | 	mov	arg02, #0
1c5bc     D8 F7 BF FD | 	call	#__system___float_tointeger
1c5c0     FD 20 02 F6 | 	mov	local02, result1
1c5c4     10 13 52 F6 | 	abs	arg01, local02 wc
1c5c8     1F 22 C6 C9 |  if_b	decod	local03, #31
1c5cc     00 22 06 36 |  if_ae	mov	local03, #0
1c5d0     F8 EE BF FD | 	call	#__system___float_fromuns
1c5d4     11 FB 61 F5 | 	xor	result1, local03
1c5d8     FD 14 02 F6 | 	mov	arg02, result1
1c5dc     0F 13 02 F6 | 	mov	arg01, local01
1c5e0     1F 14 E6 F4 | 	bitnot	arg02, #31
1c5e4     18 EF BF FD | 	call	#__system___float_add
1c5e8     FD 24 02 F6 | 	mov	local04, result1
1c5ec     12 13 02 F6 | 	mov	arg01, local04
1c5f0     00 14 06 F6 | 	mov	arg02, #0
1c5f4     01 16 06 F6 | 	mov	arg03, #1
1c5f8     08 F7 BF FD | 	call	#__system___float_cmp
1c5fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1c600     18 00 90 3D |  if_ae	jmp	#LR__2690
1c604     12 13 02 F6 | 	mov	arg01, local04
1c608     00 C0 1F FF 
1c60c     00 14 06 F6 | 	mov	arg02, ##1065353216
1c610     EC EE BF FD | 	call	#__system___float_add
1c614     FD 24 02 F6 | 	mov	local04, result1
1c618     01 20 86 F1 | 	sub	local02, #1
1c61c                 | LR__2690
1c61c     7F 20 06 F1 | 	add	local02, #127
1c620     17 20 66 F0 | 	shl	local02, #23
1c624     12 13 02 F6 | 	mov	arg01, local04
1c628     00 80 26 FF 
1c62c     00 14 06 F6 | 	mov	arg02, ##1291845632
1c630     9C F2 BF FD | 	call	#__system___float_mul
1c634     FD 12 02 F6 | 	mov	arg01, result1
1c638     00 14 06 F6 | 	mov	arg02, #0
1c63c     58 F7 BF FD | 	call	#__system___float_tointeger
1c640     FD 24 0A F6 | 	mov	local04, result1 wz
1c644     10 FB 01 A6 |  if_e	mov	result1, local02
1c648     24 00 90 AD |  if_e	jmp	#LR__2691
1c64c     3E 24 26 F4 | 	bith	local04, #62
1c650     0F 24 62 FD | 	qexp	local04
1c654     10 13 02 F6 | 	mov	arg01, local02
1c658     18 14 62 FD | 	getqx	arg02
1c65c     01 14 06 F1 | 	add	arg02, #1
1c660     01 14 46 F0 | 	shr	arg02, #1
1c664     00 80 1F FF 
1c668     00 14 06 F1 | 	add	arg02, ##1056964608
1c66c     60 F2 BF FD | 	call	#__system___float_mul
1c670                 | LR__2691
1c670     A7 F0 03 F6 | 	mov	ptra, fp
1c674     B2 00 A0 FD | 	call	#popregs_
1c678                 | __system____builtin_exp2f_ret
1c678     2D 00 64 FD | 	ret
1c67c                 | 
1c67c                 | __system____builtin_log2f
1c67c     06 4A 05 F6 | 	mov	COUNT_, #6
1c680     A8 00 A0 FD | 	call	#pushregs_
1c684     09 1F 02 F6 | 	mov	local01, arg01
1c688     09 21 0A F6 | 	mov	local02, arg01 wz
1c68c     00 00 40 5F 
1c690     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1c694     00 40 00 AF 
1c698     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c69c     08 01 90 AD |  if_e	jmp	#LR__2704
1c6a0     00 20 56 F2 | 	cmps	local02, #0 wc
1c6a4     00 E0 3F CF 
1c6a8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c6ac     F8 00 90 CD |  if_b	jmp	#LR__2704
1c6b0     0F 13 02 F6 | 	mov	arg01, local01
1c6b4     00 90 20 FF 
1c6b8     00 14 06 F6 | 	mov	arg02, ##1092616192
1c6bc     01 16 06 F6 | 	mov	arg03, #1
1c6c0     40 F6 BF FD | 	call	#__system___float_cmp
1c6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6c8     4D 2A 20 AF 
1c6cc     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1c6d0     D4 00 90 AD |  if_e	jmp	#LR__2704
1c6d4     0F 13 02 F6 | 	mov	arg01, local01
1c6d8     FC 16 20 FF 
1c6dc     54 14 06 F6 | 	mov	arg02, ##1076754516
1c6e0     01 16 06 F6 | 	mov	arg03, #1
1c6e4     1C F6 BF FD | 	call	#__system___float_cmp
1c6e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6ec     55 DC 1F AF 
1c6f0     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1c6f4     B0 00 90 AD |  if_e	jmp	#LR__2704
1c6f8     10 23 02 F6 | 	mov	local03, local02
1c6fc     17 22 46 F0 | 	shr	local03, #23
1c700     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c704     17 21 06 F4 | 	bitl	local02, #279
1c708     10 25 02 F6 | 	mov	local04, local02
1c70c     FF 22 0E F2 | 	cmp	local03, #255 wz
1c710     1C 00 90 5D |  if_ne	jmp	#LR__2700
1c714     00 24 0E F2 | 	cmp	local04, #0 wz
1c718     00 C0 3F 5F 
1c71c     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1c720     00 E0 3F AF 
1c724     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1c728     13 FB 01 F6 | 	mov	result1, local05
1c72c     78 00 90 FD | 	jmp	#LR__2704
1c730                 | LR__2700
1c730     00 22 0E F2 | 	cmp	local03, #0 wz
1c734     17 24 26 54 |  if_ne	bith	local04, #23
1c738     7F 22 86 51 |  if_ne	sub	local03, #127
1c73c     28 00 90 5D |  if_ne	jmp	#LR__2703
1c740     00 24 0E F2 | 	cmp	local04, #0 wz
1c744     00 40 00 AF 
1c748     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c74c     58 00 90 AD |  if_e	jmp	#LR__2704
1c750     7E 22 66 F6 | 	neg	local03, #126
1c754     97 08 48 FB | 	callpa	#(@LR__2702-@LR__2701)>>2,fcache_load_ptr_
1c758                 | LR__2701
1c758     17 24 2E F4 | 	testbn	local04, #23 wz
1c75c     01 24 66 A0 |  if_e	shl	local04, #1
1c760     01 22 06 A1 |  if_e	add	local03, #1
1c764     F0 FF 9F AD |  if_e	jmp	#LR__2701
1c768                 | LR__2702
1c768                 | LR__2703
1c768     0E 24 62 FD | 	qlog	local04
1c76c     01 22 86 F1 | 	sub	local03, #1
1c770     11 13 52 F6 | 	abs	arg01, local03 wc
1c774     1F 28 C6 C9 |  if_b	decod	local06, #31
1c778     00 28 06 36 |  if_ae	mov	local06, #0
1c77c     18 26 62 FD | 	getqx	local05
1c780     9B 26 06 F4 | 	bitl	local05, #155
1c784     08 26 06 F1 | 	add	local05, #8
1c788     04 26 46 F0 | 	shr	local05, #4
1c78c     00 C0 1F FF 
1c790     00 26 06 F1 | 	add	local05, ##1065353216
1c794     34 ED BF FD | 	call	#__system___float_fromuns
1c798     14 FB 61 F5 | 	xor	result1, local06
1c79c     FD 14 02 F6 | 	mov	arg02, result1
1c7a0     13 13 02 F6 | 	mov	arg01, local05
1c7a4     58 ED BF FD | 	call	#__system___float_add
1c7a8                 | LR__2704
1c7a8     A7 F0 03 F6 | 	mov	ptra, fp
1c7ac     B2 00 A0 FD | 	call	#popregs_
1c7b0                 | __system____builtin_log2f_ret
1c7b0     2D 00 64 FD | 	ret
1c7b4                 | 
1c7b4                 | __system____builtin_powf
1c7b4     04 4A 05 F6 | 	mov	COUNT_, #4
1c7b8     A8 00 A0 FD | 	call	#pushregs_
1c7bc     09 1F 02 F6 | 	mov	local01, arg01
1c7c0     0A 21 02 F6 | 	mov	local02, arg02
1c7c4     10 13 02 F6 | 	mov	arg01, local02
1c7c8     00 14 06 F6 | 	mov	arg02, #0
1c7cc     C8 F5 BF FD | 	call	#__system___float_tointeger
1c7d0     FD 22 02 F6 | 	mov	local03, result1
1c7d4     11 13 52 F6 | 	abs	arg01, local03 wc
1c7d8     1F 24 C6 C9 |  if_b	decod	local04, #31
1c7dc     00 24 06 36 |  if_ae	mov	local04, #0
1c7e0     E8 EC BF FD | 	call	#__system___float_fromuns
1c7e4     12 FB 61 F5 | 	xor	result1, local04
1c7e8     FD 12 02 F6 | 	mov	arg01, result1
1c7ec     10 15 02 F6 | 	mov	arg02, local02
1c7f0     01 16 06 F6 | 	mov	arg03, #1
1c7f4     0C F5 BF FD | 	call	#__system___float_cmp
1c7f8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7fc     18 00 90 5D |  if_ne	jmp	#LR__2710
1c800     00 C0 1F FF 
1c804     00 12 06 F6 | 	mov	arg01, ##1065353216
1c808     0F 15 02 F6 | 	mov	arg02, local01
1c80c     11 17 02 F6 | 	mov	arg03, local03
1c810     68 00 B0 FD | 	call	#__system___float_pow_n
1c814     58 00 90 FD | 	jmp	#LR__2711
1c818                 | LR__2710
1c818     0F 13 02 F6 | 	mov	arg01, local01
1c81c     00 14 06 F6 | 	mov	arg02, #0
1c820     01 16 06 F6 | 	mov	arg03, #1
1c824     DC F4 BF FD | 	call	#__system___float_cmp
1c828     00 FA 55 F2 | 	cmps	result1, #0 wc
1c82c     00 E0 3F CF 
1c830     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c834     38 00 90 CD |  if_b	jmp	#LR__2711
1c838     0F 13 02 F6 | 	mov	arg01, local01
1c83c     00 14 06 F6 | 	mov	arg02, #0
1c840     01 16 06 F6 | 	mov	arg03, #1
1c844     BC F4 BF FD | 	call	#__system___float_cmp
1c848     00 FA 0D F2 | 	cmp	result1, #0 wz
1c84c     00 FA 05 A6 |  if_e	mov	result1, #0
1c850     1C 00 90 AD |  if_e	jmp	#LR__2711
1c854     0F 13 02 F6 | 	mov	arg01, local01
1c858     20 FE BF FD | 	call	#__system____builtin_log2f
1c85c     FD 12 02 F6 | 	mov	arg01, result1
1c860     10 15 02 F6 | 	mov	arg02, local02
1c864     68 F0 BF FD | 	call	#__system___float_mul
1c868     FD 12 02 F6 | 	mov	arg01, result1
1c86c     F8 FC BF FD | 	call	#__system____builtin_exp2f
1c870                 | LR__2711
1c870     A7 F0 03 F6 | 	mov	ptra, fp
1c874     B2 00 A0 FD | 	call	#popregs_
1c878                 | __system____builtin_powf_ret
1c878     2D 00 64 FD | 	ret
1c87c                 | 
1c87c                 | __system___float_pow_n
1c87c     05 4A 05 F6 | 	mov	COUNT_, #5
1c880     A8 00 A0 FD | 	call	#pushregs_
1c884     09 1F 02 F6 | 	mov	local01, arg01
1c888     0A 21 02 F6 | 	mov	local02, arg02
1c88c     0B 23 02 F6 | 	mov	local03, arg03
1c890     00 22 56 F2 | 	cmps	local03, #0 wc
1c894     18 00 90 3D |  if_ae	jmp	#LR__2720
1c898     01 24 06 F6 | 	mov	local04, #1
1c89c     11 23 62 F6 | 	neg	local03, local03
1c8a0     00 22 56 F2 | 	cmps	local03, #0 wc
1c8a4     00 FA 05 C6 |  if_b	mov	result1, #0
1c8a8     94 00 90 CD |  if_b	jmp	#LR__2728
1c8ac     04 00 90 FD | 	jmp	#LR__2721
1c8b0                 | LR__2720
1c8b0     00 24 06 F6 | 	mov	local04, #0
1c8b4                 | LR__2721
1c8b4     00 C0 1F FF 
1c8b8     00 26 06 F6 | 	mov	local05, ##1065353216
1c8bc                 | LR__2722
1c8bc     01 22 56 F2 | 	cmps	local03, #1 wc
1c8c0     30 00 90 CD |  if_b	jmp	#LR__2724
1c8c4     01 22 CE F7 | 	test	local03, #1 wz
1c8c8     10 00 90 AD |  if_e	jmp	#LR__2723
1c8cc     13 13 02 F6 | 	mov	arg01, local05
1c8d0     10 15 02 F6 | 	mov	arg02, local02
1c8d4     F8 EF BF FD | 	call	#__system___float_mul
1c8d8     FD 26 02 F6 | 	mov	local05, result1
1c8dc                 | LR__2723
1c8dc     01 22 C6 F0 | 	sar	local03, #1
1c8e0     10 13 02 F6 | 	mov	arg01, local02
1c8e4     10 15 02 F6 | 	mov	arg02, local02
1c8e8     E4 EF BF FD | 	call	#__system___float_mul
1c8ec     FD 20 02 F6 | 	mov	local02, result1
1c8f0     C8 FF 9F FD | 	jmp	#LR__2722
1c8f4                 | LR__2724
1c8f4     00 24 0E F2 | 	cmp	local04, #0 wz
1c8f8     14 00 90 AD |  if_e	jmp	#LR__2725
1c8fc     0F 13 02 F6 | 	mov	arg01, local01
1c900     13 15 02 F6 | 	mov	arg02, local05
1c904     CC F1 BF FD | 	call	#__system___float_div
1c908     FD 26 02 F6 | 	mov	local05, result1
1c90c     2C 00 90 FD | 	jmp	#LR__2727
1c910                 | LR__2725
1c910     0F 13 02 F6 | 	mov	arg01, local01
1c914     00 C0 1F FF 
1c918     00 14 06 F6 | 	mov	arg02, ##1065353216
1c91c     01 16 06 F6 | 	mov	arg03, #1
1c920     E0 F3 BF FD | 	call	#__system___float_cmp
1c924     00 FA 0D F2 | 	cmp	result1, #0 wz
1c928     10 00 90 AD |  if_e	jmp	#LR__2726
1c92c     0F 13 02 F6 | 	mov	arg01, local01
1c930     13 15 02 F6 | 	mov	arg02, local05
1c934     98 EF BF FD | 	call	#__system___float_mul
1c938     FD 26 02 F6 | 	mov	local05, result1
1c93c                 | LR__2726
1c93c                 | LR__2727
1c93c     13 FB 01 F6 | 	mov	result1, local05
1c940                 | LR__2728
1c940     A7 F0 03 F6 | 	mov	ptra, fp
1c944     B2 00 A0 FD | 	call	#popregs_
1c948                 | __system___float_pow_n_ret
1c948     2D 00 64 FD | 	ret
1c94c                 | 
1c94c                 | __system___gc_ptrs
1c94c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1c950     00 03 02 F6 | 	mov	_var02, _var01
1c954     76 01 00 FF 
1c958     F8 03 06 F1 | 	add	_var02, ##191992
1c95c     00 FD 09 FB | 	rdlong	result2, _var01 wz
1c960     74 00 90 5D |  if_ne	jmp	#LR__2730
1c964     01 FD 01 F6 | 	mov	result2, _var02
1c968     00 FD 81 F1 | 	sub	result2, _var01
1c96c     00 03 58 FC | 	wrword	#1, _var01
1c970     00 FB 01 F6 | 	mov	result1, _var01
1c974     02 FA 05 F1 | 	add	result1, #2
1c978     36 00 80 FF 
1c97c     FD 20 59 FC | 	wrword	##27792, result1
1c980     00 FB 01 F6 | 	mov	result1, _var01
1c984     04 FA 05 F1 | 	add	result1, #4
1c988     FD 00 58 FC | 	wrword	#0, result1
1c98c     00 FB 01 F6 | 	mov	result1, _var01
1c990     06 FA 05 F1 | 	add	result1, #6
1c994     FD 02 58 FC | 	wrword	#1, result1
1c998     10 00 06 F1 | 	add	_var01, #16
1c99c     FE FC 51 F6 | 	abs	result2, result2 wc
1c9a0     04 FC 45 F0 | 	shr	result2, #4
1c9a4     FE FC 81 F6 | 	negc	result2, result2
1c9a8     00 FD 51 FC | 	wrword	result2, _var01
1c9ac     00 FD 01 F6 | 	mov	result2, _var01
1c9b0     02 FC 05 F1 | 	add	result2, #2
1c9b4     36 00 80 FF 
1c9b8     FE 1E 59 FC | 	wrword	##27791, result2
1c9bc     00 FD 01 F6 | 	mov	result2, _var01
1c9c0     04 FC 05 F1 | 	add	result2, #4
1c9c4     FE 00 58 FC | 	wrword	#0, result2
1c9c8     00 FD 01 F6 | 	mov	result2, _var01
1c9cc     06 FC 05 F1 | 	add	result2, #6
1c9d0     FE 00 58 FC | 	wrword	#0, result2
1c9d4     10 00 86 F1 | 	sub	_var01, #16
1c9d8                 | LR__2730
1c9d8     00 FB 01 F6 | 	mov	result1, _var01
1c9dc     01 FD 01 F6 | 	mov	result2, _var02
1c9e0                 | __system___gc_ptrs_ret
1c9e0     2D 00 64 FD | 	ret
1c9e4                 | 
1c9e4                 | __system___gc_tryalloc
1c9e4     0B 4A 05 F6 | 	mov	COUNT_, #11
1c9e8     A8 00 A0 FD | 	call	#pushregs_
1c9ec     09 1F 02 F6 | 	mov	local01, arg01
1c9f0     0A 21 02 F6 | 	mov	local02, arg02
1c9f4     54 FF BF FD | 	call	#__system___gc_ptrs
1c9f8     FD 22 02 F6 | 	mov	local03, result1
1c9fc     FE 24 02 F6 | 	mov	local04, result2
1ca00     11 27 02 F6 | 	mov	local05, local03
1ca04     00 28 06 F6 | 	mov	local06, #0
1ca08     97 1E 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1ca0c                 | LR__2740
1ca0c     13 2B 02 F6 | 	mov	local07, local05
1ca10     06 26 06 F1 | 	add	local05, #6
1ca14     13 15 EA FA | 	rdword	arg02, local05 wz
1ca18     11 13 02 F6 | 	mov	arg01, local03
1ca1c     00 FA 05 A6 |  if_e	mov	result1, #0
1ca20     04 14 66 50 |  if_ne	shl	arg02, #4
1ca24     0A 13 02 51 |  if_ne	add	arg01, arg02
1ca28     09 FB 01 56 |  if_ne	mov	result1, arg01
1ca2c     FD 26 0A F6 | 	mov	local05, result1 wz
1ca30     13 29 E2 5A |  if_ne	rdword	local06, local05
1ca34     00 26 0E F2 | 	cmp	local05, #0 wz
1ca38     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1ca3c     08 00 90 1D |  if_a	jmp	#LR__2742
1ca40     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1ca44     C4 FF 9F 1D |  if_a	jmp	#LR__2740
1ca48                 | LR__2741
1ca48                 | LR__2742
1ca48     00 26 0E F2 | 	cmp	local05, #0 wz
1ca4c     13 FB 01 A6 |  if_e	mov	result1, local05
1ca50     3C 01 90 AD |  if_e	jmp	#LR__2745
1ca54     13 FD 01 F6 | 	mov	result2, local05
1ca58     06 FC 05 F1 | 	add	result2, #6
1ca5c     FE 2C E2 FA | 	rdword	local08, result2
1ca60     14 1F 52 F2 | 	cmps	local01, local06 wc
1ca64     C0 00 90 3D |  if_ae	jmp	#LR__2744
1ca68     13 1F 52 FC | 	wrword	local01, local05
1ca6c     13 13 02 F6 | 	mov	arg01, local05
1ca70     0F 2D 02 F6 | 	mov	local08, local01
1ca74     04 2C 66 F0 | 	shl	local08, #4
1ca78     16 13 02 F1 | 	add	arg01, local08
1ca7c     0F 29 82 F1 | 	sub	local06, local01
1ca80     09 29 52 FC | 	wrword	local06, arg01
1ca84     09 2D 02 F6 | 	mov	local08, arg01
1ca88     02 2C 06 F1 | 	add	local08, #2
1ca8c     36 00 80 FF 
1ca90     16 1F 59 FC | 	wrword	##27791, local08
1ca94     13 15 0A F6 | 	mov	arg02, local05 wz
1ca98     00 FA 05 A6 |  if_e	mov	result1, #0
1ca9c     11 15 82 51 |  if_ne	sub	arg02, local03
1caa0     04 14 46 50 |  if_ne	shr	arg02, #4
1caa4     0A FB 01 56 |  if_ne	mov	result1, arg02
1caa8     09 2D 02 F6 | 	mov	local08, arg01
1caac     04 2C 06 F1 | 	add	local08, #4
1cab0     16 FB 51 FC | 	wrword	result1, local08
1cab4     13 2D 02 F6 | 	mov	local08, local05
1cab8     06 2C 06 F1 | 	add	local08, #6
1cabc     09 15 02 F6 | 	mov	arg02, arg01
1cac0     16 2D E2 FA | 	rdword	local08, local08
1cac4     06 14 06 F1 | 	add	arg02, #6
1cac8     0A 2D 52 FC | 	wrword	local08, arg02
1cacc     09 2F 02 F6 | 	mov	local09, arg01
1cad0     17 15 0A F6 | 	mov	arg02, local09 wz
1cad4     00 FA 05 A6 |  if_e	mov	result1, #0
1cad8     11 15 82 51 |  if_ne	sub	arg02, local03
1cadc     04 14 46 50 |  if_ne	shr	arg02, #4
1cae0     0A FB 01 56 |  if_ne	mov	result1, arg02
1cae4     FD 2C 02 F6 | 	mov	local08, result1
1cae8     09 31 EA FA | 	rdword	local10, arg01 wz
1caec     00 FA 05 A6 |  if_e	mov	result1, #0
1caf0     04 30 66 50 |  if_ne	shl	local10, #4
1caf4     18 13 02 51 |  if_ne	add	arg01, local10
1caf8     09 FB 01 56 |  if_ne	mov	result1, arg01
1cafc     FD 32 0A F6 | 	mov	local11, result1 wz
1cb00     24 00 90 AD |  if_e	jmp	#LR__2743
1cb04     12 33 52 F2 | 	cmps	local11, local04 wc
1cb08     1C 00 90 3D |  if_ae	jmp	#LR__2743
1cb0c     17 15 0A F6 | 	mov	arg02, local09 wz
1cb10     00 FA 05 A6 |  if_e	mov	result1, #0
1cb14     11 15 82 51 |  if_ne	sub	arg02, local03
1cb18     04 14 46 50 |  if_ne	shr	arg02, #4
1cb1c     0A FB 01 56 |  if_ne	mov	result1, arg02
1cb20     04 32 06 F1 | 	add	local11, #4
1cb24     19 FB 51 FC | 	wrword	result1, local11
1cb28                 | LR__2743
1cb28                 | LR__2744
1cb28     06 2A 06 F1 | 	add	local07, #6
1cb2c     15 2D 52 FC | 	wrword	local08, local07
1cb30     36 00 00 FF 
1cb34     80 2E 06 F6 | 	mov	local09, ##27776
1cb38     10 2F 42 F5 | 	or	local09, local02
1cb3c     00 FA 05 F6 | 	mov	result1, #0
1cb40     01 FA 61 FD | 	cogid	result1
1cb44     FD 2E 42 F5 | 	or	local09, result1
1cb48     13 33 02 F6 | 	mov	local11, local05
1cb4c     02 32 06 F1 | 	add	local11, #2
1cb50     19 2F 52 FC | 	wrword	local09, local11
1cb54     11 2F 02 F6 | 	mov	local09, local03
1cb58     08 2E 06 F1 | 	add	local09, #8
1cb5c     13 33 02 F6 | 	mov	local11, local05
1cb60     17 2F E2 FA | 	rdword	local09, local09
1cb64     06 32 06 F1 | 	add	local11, #6
1cb68     19 2F 52 FC | 	wrword	local09, local11
1cb6c     13 15 0A F6 | 	mov	arg02, local05 wz
1cb70     00 FA 05 A6 |  if_e	mov	result1, #0
1cb74     11 15 82 51 |  if_ne	sub	arg02, local03
1cb78     04 14 46 50 |  if_ne	shr	arg02, #4
1cb7c     0A FB 01 56 |  if_ne	mov	result1, arg02
1cb80     08 22 06 F1 | 	add	local03, #8
1cb84     11 FB 51 FC | 	wrword	result1, local03
1cb88     08 26 06 F1 | 	add	local05, #8
1cb8c     13 FB 01 F6 | 	mov	result1, local05
1cb90                 | LR__2745
1cb90     A7 F0 03 F6 | 	mov	ptra, fp
1cb94     B2 00 A0 FD | 	call	#popregs_
1cb98                 | __system___gc_tryalloc_ret
1cb98     2D 00 64 FD | 	ret
1cb9c                 | 
1cb9c                 | __system___gc_alloc_managed
1cb9c     01 4A 05 F6 | 	mov	COUNT_, #1
1cba0     A8 00 A0 FD | 	call	#pushregs_
1cba4     09 1F 02 F6 | 	mov	local01, arg01
1cba8     00 14 06 F6 | 	mov	arg02, #0
1cbac     1C 00 B0 FD | 	call	#__system___gc_doalloc
1cbb0     FD 14 0A F6 | 	mov	arg02, result1 wz
1cbb4     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1cbb8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1cbbc     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1cbc0     A7 F0 03 F6 | 	mov	ptra, fp
1cbc4     B2 00 A0 FD | 	call	#popregs_
1cbc8                 | __system___gc_alloc_managed_ret
1cbc8     2D 00 64 FD | 	ret
1cbcc                 | 
1cbcc                 | __system___gc_doalloc
1cbcc     06 4A 05 F6 | 	mov	COUNT_, #6
1cbd0     A8 00 A0 FD | 	call	#pushregs_
1cbd4     09 1F 0A F6 | 	mov	local01, arg01 wz
1cbd8     0A 21 02 F6 | 	mov	local02, arg02
1cbdc     00 FA 05 A6 |  if_e	mov	result1, #0
1cbe0     8C 00 90 AD |  if_e	jmp	#LR__2757
1cbe4     17 1E 06 F1 | 	add	local01, #23
1cbe8     0F 1E 26 F5 | 	andn	local01, #15
1cbec     04 1E 46 F0 | 	shr	local01, #4
1cbf0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cbf4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cbf8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cbfc     E4 C1 BF FD | 	call	#__system___lockmem
1cc00     0F 13 02 F6 | 	mov	arg01, local01
1cc04     10 15 02 F6 | 	mov	arg02, local02
1cc08     D8 FD BF FD | 	call	#__system___gc_tryalloc
1cc0c     FD 22 0A F6 | 	mov	local03, result1 wz
1cc10     14 00 90 5D |  if_ne	jmp	#LR__2750
1cc14     70 03 B0 FD | 	call	#__system___gc_docollect
1cc18     0F 13 02 F6 | 	mov	arg01, local01
1cc1c     10 15 02 F6 | 	mov	arg02, local02
1cc20     C0 FD BF FD | 	call	#__system___gc_tryalloc
1cc24     FD 22 02 F6 | 	mov	local03, result1
1cc28                 | LR__2750
1cc28     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cc2c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cc30     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cc34     09 01 68 FC | 	wrlong	#0, arg01
1cc38     00 22 0E F2 | 	cmp	local03, #0 wz
1cc3c     2C 00 90 AD |  if_e	jmp	#LR__2756
1cc40     04 1E 66 F0 | 	shl	local01, #4
1cc44     08 1E 86 F1 | 	sub	local01, #8
1cc48     0F 25 52 F6 | 	abs	local04, local01 wc
1cc4c     02 24 46 F0 | 	shr	local04, #2
1cc50     12 27 8A F6 | 	negc	local05, local04 wz
1cc54     11 29 02 F6 | 	mov	local06, local03
1cc58     10 00 90 AD |  if_e	jmp	#LR__2755
1cc5c     97 06 48 FB | 	callpa	#(@LR__2753-@LR__2751)>>2,fcache_load_ptr_
1cc60                 | LR__2751
1cc60     13 05 D8 FC | 	rep	@LR__2754, local05
1cc64                 | LR__2752
1cc64     14 01 68 FC | 	wrlong	#0, local06
1cc68     04 28 06 F1 | 	add	local06, #4
1cc6c                 | LR__2753
1cc6c                 | LR__2754
1cc6c                 | LR__2755
1cc6c                 | LR__2756
1cc6c     11 FB 01 F6 | 	mov	result1, local03
1cc70                 | LR__2757
1cc70     A7 F0 03 F6 | 	mov	ptra, fp
1cc74     B2 00 A0 FD | 	call	#popregs_
1cc78                 | __system___gc_doalloc_ret
1cc78     2D 00 64 FD | 	ret
1cc7c                 | 
1cc7c                 | __system___gc_isvalidptr
1cc7c     F8 16 06 F4 | 	bitl	arg03, #248
1cc80     08 16 86 F1 | 	sub	arg03, #8
1cc84     09 17 52 F2 | 	cmps	arg03, arg01 wc
1cc88     08 00 90 CD |  if_b	jmp	#LR__2760
1cc8c     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1cc90     08 00 90 CD |  if_b	jmp	#LR__2761
1cc94                 | LR__2760
1cc94     00 FA 05 F6 | 	mov	result1, #0
1cc98     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1cc9c                 | LR__2761
1cc9c     0B 01 02 F6 | 	mov	_var01, arg03
1cca0     09 01 62 F5 | 	xor	_var01, arg01
1cca4     0F 00 CE F7 | 	test	_var01, #15 wz
1cca8     00 FA 05 56 |  if_ne	mov	result1, #0
1ccac     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1ccb0     0B 01 02 F6 | 	mov	_var01, arg03
1ccb4     02 00 06 F1 | 	add	_var01, #2
1ccb8     00 01 E2 FA | 	rdword	_var01, _var01
1ccbc     7F 00 00 FF 
1ccc0     C0 01 06 F5 | 	and	_var01, ##65472
1ccc4     36 00 00 FF 
1ccc8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1cccc     00 FA 05 56 |  if_ne	mov	result1, #0
1ccd0     0B FB 01 A6 |  if_e	mov	result1, arg03
1ccd4                 | __system___gc_isvalidptr_ret
1ccd4     2D 00 64 FD | 	ret
1ccd8                 | 
1ccd8                 | __system___gc_free
1ccd8     09 17 02 F6 | 	mov	arg03, arg01
1ccdc     6C FC BF FD | 	call	#__system___gc_ptrs
1cce0     FD 12 02 F6 | 	mov	arg01, result1
1cce4     FE 14 02 F6 | 	mov	arg02, result2
1cce8     90 FF BF FD | 	call	#__system___gc_isvalidptr
1ccec     FD 14 0A F6 | 	mov	arg02, result1 wz
1ccf0     28 00 90 AD |  if_e	jmp	#LR__2770
1ccf4     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1ccf8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ccfc     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cd00     E0 C0 BF FD | 	call	#__system___lockmem
1cd04     0A 13 02 F6 | 	mov	arg01, arg02
1cd08     14 00 B0 FD | 	call	#__system___gc_dofree
1cd0c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cd10     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cd14     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cd18     09 01 68 FC | 	wrlong	#0, arg01
1cd1c                 | LR__2770
1cd1c                 | __system___gc_free_ret
1cd1c     2D 00 64 FD | 	ret
1cd20                 | 
1cd20                 | __system___gc_dofree
1cd20     06 4A 05 F6 | 	mov	COUNT_, #6
1cd24     A8 00 A0 FD | 	call	#pushregs_
1cd28     09 1F 02 F6 | 	mov	local01, arg01
1cd2c     1C FC BF FD | 	call	#__system___gc_ptrs
1cd30     FD 20 02 F6 | 	mov	local02, result1
1cd34     FE 22 02 F6 | 	mov	local03, result2
1cd38     0F 15 02 F6 | 	mov	arg02, local01
1cd3c     02 14 06 F1 | 	add	arg02, #2
1cd40     36 00 80 FF 
1cd44     0A 1F 59 FC | 	wrword	##27791, arg02
1cd48     0F 25 02 F6 | 	mov	local04, local01
1cd4c     0F 13 02 F6 | 	mov	arg01, local01
1cd50     09 27 EA FA | 	rdword	local05, arg01 wz
1cd54     00 FA 05 A6 |  if_e	mov	result1, #0
1cd58     04 26 66 50 |  if_ne	shl	local05, #4
1cd5c     13 13 02 51 |  if_ne	add	arg01, local05
1cd60     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd64     FD 28 02 F6 | 	mov	local06, result1
1cd68     97 24 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1cd6c                 | LR__2780
1cd6c     04 24 06 F1 | 	add	local04, #4
1cd70     12 15 EA FA | 	rdword	arg02, local04 wz
1cd74     10 13 02 F6 | 	mov	arg01, local02
1cd78     00 FA 05 A6 |  if_e	mov	result1, #0
1cd7c     04 14 66 50 |  if_ne	shl	arg02, #4
1cd80     0A 13 02 51 |  if_ne	add	arg01, arg02
1cd84     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd88     FD 24 0A F6 | 	mov	local04, result1 wz
1cd8c     24 00 90 AD |  if_e	jmp	#LR__2782
1cd90     12 13 02 F6 | 	mov	arg01, local04
1cd94     00 FA 05 F6 | 	mov	result1, #0
1cd98     02 12 06 F1 | 	add	arg01, #2
1cd9c     09 13 E2 FA | 	rdword	arg01, arg01
1cda0     36 00 00 FF 
1cda4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cda8     01 FA 65 A6 |  if_e	neg	result1, #1
1cdac     00 FA 0D F2 | 	cmp	result1, #0 wz
1cdb0     B8 FF 9F AD |  if_e	jmp	#LR__2780
1cdb4                 | LR__2781
1cdb4                 | LR__2782
1cdb4     00 24 0E F2 | 	cmp	local04, #0 wz
1cdb8     10 25 02 A6 |  if_e	mov	local04, local02
1cdbc     12 15 02 F6 | 	mov	arg02, local04
1cdc0     06 14 06 F1 | 	add	arg02, #6
1cdc4     0F 13 02 F6 | 	mov	arg01, local01
1cdc8     0A 15 E2 FA | 	rdword	arg02, arg02
1cdcc     06 12 06 F1 | 	add	arg01, #6
1cdd0     09 15 52 FC | 	wrword	arg02, arg01
1cdd4     0F 15 0A F6 | 	mov	arg02, local01 wz
1cdd8     00 FA 05 A6 |  if_e	mov	result1, #0
1cddc     10 15 82 51 |  if_ne	sub	arg02, local02
1cde0     04 14 46 50 |  if_ne	shr	arg02, #4
1cde4     0A FB 01 56 |  if_ne	mov	result1, arg02
1cde8     12 15 02 F6 | 	mov	arg02, local04
1cdec     06 14 06 F1 | 	add	arg02, #6
1cdf0     0A FB 51 FC | 	wrword	result1, arg02
1cdf4     10 25 0A F2 | 	cmp	local04, local02 wz
1cdf8     A4 00 90 AD |  if_e	jmp	#LR__2785
1cdfc     12 13 02 F6 | 	mov	arg01, local04
1ce00     09 27 EA FA | 	rdword	local05, arg01 wz
1ce04     00 FA 05 A6 |  if_e	mov	result1, #0
1ce08     04 26 66 50 |  if_ne	shl	local05, #4
1ce0c     13 13 02 51 |  if_ne	add	arg01, local05
1ce10     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce14     0F FB 09 F2 | 	cmp	result1, local01 wz
1ce18     84 00 90 5D |  if_ne	jmp	#LR__2784
1ce1c     12 29 E2 FA | 	rdword	local06, local04
1ce20     0F 15 E2 FA | 	rdword	arg02, local01
1ce24     0A 29 02 F1 | 	add	local06, arg02
1ce28     12 29 52 FC | 	wrword	local06, local04
1ce2c     0F 29 02 F6 | 	mov	local06, local01
1ce30     02 28 06 F1 | 	add	local06, #2
1ce34     14 01 58 FC | 	wrword	#0, local06
1ce38     0F 13 02 F6 | 	mov	arg01, local01
1ce3c     09 27 EA FA | 	rdword	local05, arg01 wz
1ce40     00 FA 05 A6 |  if_e	mov	result1, #0
1ce44     04 26 66 50 |  if_ne	shl	local05, #4
1ce48     13 13 02 51 |  if_ne	add	arg01, local05
1ce4c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce50     FD 28 02 F6 | 	mov	local06, result1
1ce54     11 29 52 F2 | 	cmps	local06, local03 wc
1ce58     20 00 90 3D |  if_ae	jmp	#LR__2783
1ce5c     12 15 0A F6 | 	mov	arg02, local04 wz
1ce60     00 FA 05 A6 |  if_e	mov	result1, #0
1ce64     10 15 82 51 |  if_ne	sub	arg02, local02
1ce68     04 14 46 50 |  if_ne	shr	arg02, #4
1ce6c     0A FB 01 56 |  if_ne	mov	result1, arg02
1ce70     14 15 02 F6 | 	mov	arg02, local06
1ce74     04 14 06 F1 | 	add	arg02, #4
1ce78     0A FB 51 FC | 	wrword	result1, arg02
1ce7c                 | LR__2783
1ce7c     0F 15 02 F6 | 	mov	arg02, local01
1ce80     06 14 06 F1 | 	add	arg02, #6
1ce84     12 FD 01 F6 | 	mov	result2, local04
1ce88     0A 15 E2 FA | 	rdword	arg02, arg02
1ce8c     06 FC 05 F1 | 	add	result2, #6
1ce90     FE 14 52 FC | 	wrword	arg02, result2
1ce94     06 1E 06 F1 | 	add	local01, #6
1ce98     0F 01 58 FC | 	wrword	#0, local01
1ce9c     12 1F 02 F6 | 	mov	local01, local04
1cea0                 | LR__2784
1cea0                 | LR__2785
1cea0     0F 13 02 F6 | 	mov	arg01, local01
1cea4     09 27 EA FA | 	rdword	local05, arg01 wz
1cea8     00 FA 05 A6 |  if_e	mov	result1, #0
1ceac     04 26 66 50 |  if_ne	shl	local05, #4
1ceb0     13 13 02 51 |  if_ne	add	arg01, local05
1ceb4     09 FB 01 56 |  if_ne	mov	result1, arg01
1ceb8     FD 14 0A F6 | 	mov	arg02, result1 wz
1cebc     B8 00 90 AD |  if_e	jmp	#LR__2787
1cec0     11 15 52 F2 | 	cmps	arg02, local03 wc
1cec4     B0 00 90 3D |  if_ae	jmp	#LR__2787
1cec8     0A 13 02 F6 | 	mov	arg01, arg02
1cecc     00 FA 05 F6 | 	mov	result1, #0
1ced0     02 12 06 F1 | 	add	arg01, #2
1ced4     09 13 E2 FA | 	rdword	arg01, arg01
1ced8     36 00 00 FF 
1cedc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cee0     01 FA 65 A6 |  if_e	neg	result1, #1
1cee4     00 FA 0D F2 | 	cmp	result1, #0 wz
1cee8     8C 00 90 AD |  if_e	jmp	#LR__2787
1ceec     0F 25 02 F6 | 	mov	local04, local01
1cef0     12 29 E2 FA | 	rdword	local06, local04
1cef4     0A 13 02 F6 | 	mov	arg01, arg02
1cef8     09 1F E2 FA | 	rdword	local01, arg01
1cefc     0F 29 02 F1 | 	add	local06, local01
1cf00     12 29 52 FC | 	wrword	local06, local04
1cf04     09 29 02 F6 | 	mov	local06, arg01
1cf08     06 28 06 F1 | 	add	local06, #6
1cf0c     12 1F 02 F6 | 	mov	local01, local04
1cf10     14 29 E2 FA | 	rdword	local06, local06
1cf14     06 1E 06 F1 | 	add	local01, #6
1cf18     0F 29 52 FC | 	wrword	local06, local01
1cf1c     09 29 02 F6 | 	mov	local06, arg01
1cf20     02 28 06 F1 | 	add	local06, #2
1cf24     14 55 59 FC | 	wrword	#170, local06
1cf28     09 29 02 F6 | 	mov	local06, arg01
1cf2c     06 28 06 F1 | 	add	local06, #6
1cf30     14 01 58 FC | 	wrword	#0, local06
1cf34     09 27 EA FA | 	rdword	local05, arg01 wz
1cf38     00 FA 05 A6 |  if_e	mov	result1, #0
1cf3c     04 26 66 50 |  if_ne	shl	local05, #4
1cf40     13 13 02 51 |  if_ne	add	arg01, local05
1cf44     09 FB 01 56 |  if_ne	mov	result1, arg01
1cf48     FD 28 0A F6 | 	mov	local06, result1 wz
1cf4c     28 00 90 AD |  if_e	jmp	#LR__2786
1cf50     11 29 52 F2 | 	cmps	local06, local03 wc
1cf54     20 00 90 3D |  if_ae	jmp	#LR__2786
1cf58     12 15 0A F6 | 	mov	arg02, local04 wz
1cf5c     00 FA 05 A6 |  if_e	mov	result1, #0
1cf60     10 15 82 51 |  if_ne	sub	arg02, local02
1cf64     04 14 46 50 |  if_ne	shr	arg02, #4
1cf68     0A FB 01 56 |  if_ne	mov	result1, arg02
1cf6c     14 25 02 F6 | 	mov	local04, local06
1cf70     04 24 06 F1 | 	add	local04, #4
1cf74     12 FB 51 FC | 	wrword	result1, local04
1cf78                 | LR__2786
1cf78                 | LR__2787
1cf78     14 FB 01 F6 | 	mov	result1, local06
1cf7c     A7 F0 03 F6 | 	mov	ptra, fp
1cf80     B2 00 A0 FD | 	call	#popregs_
1cf84                 | __system___gc_dofree_ret
1cf84     2D 00 64 FD | 	ret
1cf88                 | 
1cf88                 | __system___gc_docollect
1cf88     05 4A 05 F6 | 	mov	COUNT_, #5
1cf8c     A8 00 A0 FD | 	call	#pushregs_
1cf90     B8 F9 BF FD | 	call	#__system___gc_ptrs
1cf94     FE 1E 02 F6 | 	mov	local01, result2
1cf98     FD 20 02 F6 | 	mov	local02, result1
1cf9c     10 13 02 F6 | 	mov	arg01, local02
1cfa0     09 23 EA FA | 	rdword	local03, arg01 wz
1cfa4     00 FA 05 A6 |  if_e	mov	result1, #0
1cfa8     04 22 66 50 |  if_ne	shl	local03, #4
1cfac     11 13 02 51 |  if_ne	add	arg01, local03
1cfb0     09 FB 01 56 |  if_ne	mov	result1, arg01
1cfb4     FD 24 0A F6 | 	mov	local04, result1 wz
1cfb8     00 FA 05 F6 | 	mov	result1, #0
1cfbc     01 FA 61 FD | 	cogid	result1
1cfc0     FD 26 02 F6 | 	mov	local05, result1
1cfc4     48 00 90 AD |  if_e	jmp	#LR__2792
1cfc8     97 22 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
1cfcc                 | LR__2790
1cfcc     0F 25 52 F2 | 	cmps	local04, local01 wc
1cfd0     3C 00 90 3D |  if_ae	jmp	#LR__2792
1cfd4     12 15 02 F6 | 	mov	arg02, local04
1cfd8     02 14 06 F1 | 	add	arg02, #2
1cfdc     0A 15 E2 FA | 	rdword	arg02, arg02
1cfe0     20 14 26 F5 | 	andn	arg02, #32
1cfe4     12 13 02 F6 | 	mov	arg01, local04
1cfe8     02 12 06 F1 | 	add	arg01, #2
1cfec     09 15 52 FC | 	wrword	arg02, arg01
1cff0     12 13 02 F6 | 	mov	arg01, local04
1cff4     09 23 EA FA | 	rdword	local03, arg01 wz
1cff8     00 FA 05 A6 |  if_e	mov	result1, #0
1cffc     04 22 66 50 |  if_ne	shl	local03, #4
1d000     11 13 02 51 |  if_ne	add	arg01, local03
1d004     09 FB 01 56 |  if_ne	mov	result1, arg01
1d008     FD 24 0A F6 | 	mov	local04, result1 wz
1d00c     BC FF 9F 5D |  if_ne	jmp	#LR__2790
1d010                 | LR__2791
1d010                 | LR__2792
1d010     00 22 06 F6 | 	mov	local03, #0
1d014     00 12 06 F6 | 	mov	arg01, #0
1d018     A0 BD BF FD | 	call	#__system____topofstack
1d01c     FD 14 02 F6 | 	mov	arg02, result1
1d020     11 13 02 F6 | 	mov	arg01, local03
1d024     90 00 B0 FD | 	call	#__system___gc_markhub
1d028     1C 01 B0 FD | 	call	#__system___gc_markcog
1d02c     10 13 02 F6 | 	mov	arg01, local02
1d030     09 23 EA FA | 	rdword	local03, arg01 wz
1d034     00 FA 05 A6 |  if_e	mov	result1, #0
1d038     04 22 66 50 |  if_ne	shl	local03, #4
1d03c     11 13 02 51 |  if_ne	add	arg01, local03
1d040     09 FB 01 56 |  if_ne	mov	result1, arg01
1d044     FD 20 0A F6 | 	mov	local02, result1 wz
1d048     60 00 90 AD |  if_e	jmp	#LR__2796
1d04c                 | LR__2793
1d04c     10 25 02 F6 | 	mov	local04, local02
1d050     12 13 02 F6 | 	mov	arg01, local04
1d054     09 23 EA FA | 	rdword	local03, arg01 wz
1d058     00 FA 05 A6 |  if_e	mov	result1, #0
1d05c     04 22 66 50 |  if_ne	shl	local03, #4
1d060     11 13 02 51 |  if_ne	add	arg01, local03
1d064     09 FB 01 56 |  if_ne	mov	result1, arg01
1d068     FD 20 02 F6 | 	mov	local02, result1
1d06c     12 15 02 F6 | 	mov	arg02, local04
1d070     02 14 06 F1 | 	add	arg02, #2
1d074     0A 15 E2 FA | 	rdword	arg02, arg02
1d078     20 14 CE F7 | 	test	arg02, #32 wz
1d07c     10 14 CE A7 |  if_e	test	arg02, #16 wz
1d080     1C 00 90 5D |  if_ne	jmp	#LR__2795
1d084     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1d088     13 15 0A F2 | 	cmp	arg02, local05 wz
1d08c     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1d090     0C 00 90 5D |  if_ne	jmp	#LR__2794
1d094     12 13 02 F6 | 	mov	arg01, local04
1d098     84 FC BF FD | 	call	#__system___gc_dofree
1d09c     FD 20 02 F6 | 	mov	local02, result1
1d0a0                 | LR__2794
1d0a0                 | LR__2795
1d0a0     00 20 0E F2 | 	cmp	local02, #0 wz
1d0a4     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1d0a8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2793
1d0ac                 | LR__2796
1d0ac     A7 F0 03 F6 | 	mov	ptra, fp
1d0b0     B2 00 A0 FD | 	call	#popregs_
1d0b4                 | __system___gc_docollect_ret
1d0b4     2D 00 64 FD | 	ret
1d0b8                 | 
1d0b8                 | __system___gc_markhub
1d0b8     04 4A 05 F6 | 	mov	COUNT_, #4
1d0bc     A8 00 A0 FD | 	call	#pushregs_
1d0c0     09 1F 02 F6 | 	mov	local01, arg01
1d0c4     0A 21 02 F6 | 	mov	local02, arg02
1d0c8     80 F8 BF FD | 	call	#__system___gc_ptrs
1d0cc     FD 22 02 F6 | 	mov	local03, result1
1d0d0     FE 24 02 F6 | 	mov	local04, result2
1d0d4                 | LR__2800
1d0d4     10 1F 52 F2 | 	cmps	local01, local02 wc
1d0d8     60 00 90 3D |  if_ae	jmp	#LR__2801
1d0dc     0F 17 02 FB | 	rdlong	arg03, local01
1d0e0     04 1E 06 F1 | 	add	local01, #4
1d0e4     12 15 02 F6 | 	mov	arg02, local04
1d0e8     11 13 02 F6 | 	mov	arg01, local03
1d0ec     8C FB BF FD | 	call	#__system___gc_isvalidptr
1d0f0     FD 16 0A F6 | 	mov	arg03, result1 wz
1d0f4     DC FF 9F AD |  if_e	jmp	#LR__2800
1d0f8     0B 13 02 F6 | 	mov	arg01, arg03
1d0fc     00 FA 05 F6 | 	mov	result1, #0
1d100     02 12 06 F1 | 	add	arg01, #2
1d104     09 13 E2 FA | 	rdword	arg01, arg01
1d108     36 00 00 FF 
1d10c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1d110     01 FA 65 A6 |  if_e	neg	result1, #1
1d114     00 FA 0D F2 | 	cmp	result1, #0 wz
1d118     B8 FF 9F 5D |  if_ne	jmp	#LR__2800
1d11c     0B FD 01 F6 | 	mov	result2, arg03
1d120     02 FC 05 F1 | 	add	result2, #2
1d124     FE FC E1 FA | 	rdword	result2, result2
1d128     0F FC 25 F5 | 	andn	result2, #15
1d12c     2E FC 45 F5 | 	or	result2, #46
1d130     02 16 06 F1 | 	add	arg03, #2
1d134     0B FD 51 FC | 	wrword	result2, arg03
1d138     98 FF 9F FD | 	jmp	#LR__2800
1d13c                 | LR__2801
1d13c     A7 F0 03 F6 | 	mov	ptra, fp
1d140     B2 00 A0 FD | 	call	#popregs_
1d144                 | __system___gc_markhub_ret
1d144     2D 00 64 FD | 	ret
1d148                 | 
1d148                 | __system___gc_markcog
1d148     04 4A 05 F6 | 	mov	COUNT_, #4
1d14c     A8 00 A0 FD | 	call	#pushregs_
1d150     F8 F7 BF FD | 	call	#__system___gc_ptrs
1d154     FD 1E 02 F6 | 	mov	local01, result1
1d158     FE 20 02 F6 | 	mov	local02, result2
1d15c     EF 23 06 F6 | 	mov	local03, #495
1d160                 | LR__2810
1d160                 | 	'.live	local03
1d160     00 22 96 F9 | 	alts	local03, #0
1d164     11 25 02 F6 | 	mov	local04, local03
1d168     0F 13 02 F6 | 	mov	arg01, local01
1d16c     10 15 02 F6 | 	mov	arg02, local02
1d170     12 17 02 F6 | 	mov	arg03, local04
1d174     04 FB BF FD | 	call	#__system___gc_isvalidptr
1d178     00 FA 0D F2 | 	cmp	result1, #0 wz
1d17c     18 00 90 AD |  if_e	jmp	#LR__2811
1d180     FD 24 02 F6 | 	mov	local04, result1
1d184     02 24 06 F1 | 	add	local04, #2
1d188     12 25 E2 FA | 	rdword	local04, local04
1d18c     20 24 46 F5 | 	or	local04, #32
1d190     02 FA 05 F1 | 	add	result1, #2
1d194     FD 24 52 FC | 	wrword	local04, result1
1d198                 | LR__2811
1d198     01 22 86 F1 | 	sub	local03, #1
1d19c     00 22 56 F2 | 	cmps	local03, #0 wc
1d1a0     BC FF 9F 3D |  if_ae	jmp	#LR__2810
1d1a4     A7 F0 03 F6 | 	mov	ptra, fp
1d1a8     B2 00 A0 FD | 	call	#popregs_
1d1ac                 | __system___gc_markcog_ret
1d1ac     2D 00 64 FD | 	ret
1d1b0                 | 
1d1b0                 | __system__opendir
1d1b0     06 4A 05 F6 | 	mov	COUNT_, #6
1d1b4     A8 00 A0 FD | 	call	#pushregs_
1d1b8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d1bc     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1d1c0     09 15 02 F6 | 	mov	arg02, arg01
1d1c4     0F 13 02 F6 | 	mov	arg01, local01
1d1c8     00 16 06 F6 | 	mov	arg03, #0
1d1cc     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d1d0     A8 C3 BF FD | 	call	#__system____getvfsforfile
1d1d4     FD 20 0A F6 | 	mov	local02, result1 wz
1d1d8     10 00 90 AD |  if_e	jmp	#LR__2820
1d1dc     28 20 06 F1 | 	add	local02, #40
1d1e0     10 17 0A FB | 	rdlong	arg03, local02 wz
1d1e4     28 20 86 F1 | 	sub	local02, #40
1d1e8     14 00 90 5D |  if_ne	jmp	#LR__2821
1d1ec                 | LR__2820
1d1ec     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d1f0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d1f4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d1f8     00 FA 05 F6 | 	mov	result1, #0
1d1fc     90 00 90 FD | 	jmp	#LR__2823
1d200                 | LR__2821
1d200     5C 12 06 F6 | 	mov	arg01, #92
1d204     10 14 06 F6 | 	mov	arg02, #16
1d208     C0 F9 BF FD | 	call	#__system___gc_doalloc
1d20c     FD 22 0A F6 | 	mov	local03, result1 wz
1d210     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d214     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1d218     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d21c     00 FA 05 A6 |  if_e	mov	result1, #0
1d220     6C 00 90 AD |  if_e	jmp	#LR__2823
1d224     28 20 06 F1 | 	add	local02, #40
1d228     10 25 02 FB | 	rdlong	local04, local02
1d22c     12 27 02 F6 | 	mov	local05, local04
1d230     28 20 86 F1 | 	sub	local02, #40
1d234     13 26 46 F7 | 	zerox	local05, #19
1d238     14 24 46 F0 | 	shr	local04, #20
1d23c     02 24 66 F0 | 	shl	local04, #2
1d240     ED 24 02 F1 | 	add	local04, __methods__
1d244     12 25 02 FB | 	rdlong	local04, local04
1d248     11 13 02 F6 | 	mov	arg01, local03
1d24c     0F 15 02 F6 | 	mov	arg02, local01
1d250     F2 28 02 F6 | 	mov	local06, objptr
1d254     13 E5 01 F6 | 	mov	objptr, local05
1d258     2D 24 62 FD | 	call	local04
1d25c     14 E5 01 F6 | 	mov	objptr, local06
1d260     FD 16 0A F6 | 	mov	arg03, result1 wz
1d264     20 00 90 AD |  if_e	jmp	#LR__2822
1d268     00 16 4E F2 | 	cmps	arg03, #0 wz
1d26c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d270     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1d274     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d278     11 13 02 F6 | 	mov	arg01, local03
1d27c     58 FA BF FD | 	call	#__system___gc_free
1d280     00 FA 05 F6 | 	mov	result1, #0
1d284     08 00 90 FD | 	jmp	#LR__2823
1d288                 | LR__2822
1d288     11 21 62 FC | 	wrlong	local02, local03
1d28c     11 FB 01 F6 | 	mov	result1, local03
1d290                 | LR__2823
1d290     A7 F0 03 F6 | 	mov	ptra, fp
1d294     B2 00 A0 FD | 	call	#popregs_
1d298                 | __system__opendir_ret
1d298     2D 00 64 FD | 	ret
1d29c                 | 
1d29c                 | __system__closedir
1d29c     04 4A 05 F6 | 	mov	COUNT_, #4
1d2a0     A8 00 A0 FD | 	call	#pushregs_
1d2a4     09 1F 02 F6 | 	mov	local01, arg01
1d2a8     0F 13 02 FB | 	rdlong	arg01, local01
1d2ac     2C 12 06 F1 | 	add	arg01, #44
1d2b0     09 21 02 FB | 	rdlong	local02, arg01
1d2b4     10 23 02 F6 | 	mov	local03, local02
1d2b8     13 22 46 F7 | 	zerox	local03, #19
1d2bc     14 20 46 F0 | 	shr	local02, #20
1d2c0     02 20 66 F0 | 	shl	local02, #2
1d2c4     ED 20 02 F1 | 	add	local02, __methods__
1d2c8     10 21 02 FB | 	rdlong	local02, local02
1d2cc     0F 13 02 F6 | 	mov	arg01, local01
1d2d0     F2 24 02 F6 | 	mov	local04, objptr
1d2d4     11 E5 01 F6 | 	mov	objptr, local03
1d2d8     2D 20 62 FD | 	call	local02
1d2dc     12 E5 01 F6 | 	mov	objptr, local04
1d2e0     FD 24 02 F6 | 	mov	local04, result1
1d2e4     0F 13 02 F6 | 	mov	arg01, local01
1d2e8     EC F9 BF FD | 	call	#__system___gc_free
1d2ec     00 24 4E F2 | 	cmps	local04, #0 wz
1d2f0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d2f4     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1d2f8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d2fc     01 FA 65 56 |  if_ne	neg	result1, #1
1d300     00 FA 05 A6 |  if_e	mov	result1, #0
1d304     A7 F0 03 F6 | 	mov	ptra, fp
1d308     B2 00 A0 FD | 	call	#popregs_
1d30c                 | __system__closedir_ret
1d30c     2D 00 64 FD | 	ret
1d310                 | 
1d310                 | __system__readdir
1d310     04 4A 05 F6 | 	mov	COUNT_, #4
1d314     A8 00 A0 FD | 	call	#pushregs_
1d318     09 15 0A FB | 	rdlong	arg02, arg01 wz
1d31c     08 12 06 F1 | 	add	arg01, #8
1d320     09 1F 02 F6 | 	mov	local01, arg01
1d324     08 12 86 F1 | 	sub	arg01, #8
1d328     00 FA 05 A6 |  if_e	mov	result1, #0
1d32c     5C 00 90 AD |  if_e	jmp	#LR__2831
1d330     30 14 06 F1 | 	add	arg02, #48
1d334     0A 21 02 FB | 	rdlong	local02, arg02
1d338     10 23 02 F6 | 	mov	local03, local02
1d33c     13 22 46 F7 | 	zerox	local03, #19
1d340     14 20 46 F0 | 	shr	local02, #20
1d344     02 20 66 F0 | 	shl	local02, #2
1d348     ED 20 02 F1 | 	add	local02, __methods__
1d34c     10 21 02 FB | 	rdlong	local02, local02
1d350     0F 15 02 F6 | 	mov	arg02, local01
1d354     F2 24 02 F6 | 	mov	local04, objptr
1d358     11 E5 01 F6 | 	mov	objptr, local03
1d35c     2D 20 62 FD | 	call	local02
1d360     12 E5 01 F6 | 	mov	objptr, local04
1d364     00 FA 4D F2 | 	cmps	result1, #0 wz
1d368     1C 00 90 AD |  if_e	jmp	#LR__2830
1d36c     01 FA 55 F2 | 	cmps	result1, #1 wc
1d370     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1d374     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d378     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1d37c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d380     00 FA 05 F6 | 	mov	result1, #0
1d384     04 00 90 FD | 	jmp	#LR__2831
1d388                 | LR__2830
1d388     0F FB 01 F6 | 	mov	result1, local01
1d38c                 | LR__2831
1d38c     A7 F0 03 F6 | 	mov	ptra, fp
1d390     B2 00 A0 FD | 	call	#popregs_
1d394                 | __system__readdir_ret
1d394     2D 00 64 FD | 	ret
1d398                 | 
1d398                 | __system___openraw
1d398     15 4A 05 F6 | 	mov	COUNT_, #21
1d39c     A8 00 A0 FD | 	call	#pushregs_
1d3a0     09 1F 02 F6 | 	mov	local01, arg01
1d3a4     0A 21 02 F6 | 	mov	local02, arg02
1d3a8     0B 23 02 F6 | 	mov	local03, arg03
1d3ac     0C 25 02 F6 | 	mov	local04, arg04
1d3b0     04 26 06 F6 | 	mov	local05, #4
1d3b4     0F 29 02 F6 | 	mov	local06, local01
1d3b8     00 2A 06 F6 | 	mov	local07, #0
1d3bc     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d3c0     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1d3c4     16 13 02 F6 | 	mov	arg01, local08
1d3c8     10 15 02 F6 | 	mov	arg02, local02
1d3cc     00 16 06 F6 | 	mov	arg03, #0
1d3d0     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d3d4     A4 C1 BF FD | 	call	#__system____getvfsforfile
1d3d8     FD 2E 0A F6 | 	mov	local09, result1 wz
1d3dc     10 00 90 AD |  if_e	jmp	#LR__2840
1d3e0     20 2E 06 F1 | 	add	local09, #32
1d3e4     17 FB 09 FB | 	rdlong	result1, local09 wz
1d3e8     20 2E 86 F1 | 	sub	local09, #32
1d3ec     14 00 90 5D |  if_ne	jmp	#LR__2841
1d3f0                 | LR__2840
1d3f0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d3f4     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d3f8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d3fc     01 FA 65 F6 | 	neg	result1, #1
1d400     8C 02 90 FD | 	jmp	#LR__2854
1d404                 | LR__2841
1d404     14 13 02 F6 | 	mov	arg01, local06
1d408     00 14 06 F6 | 	mov	arg02, #0
1d40c     34 16 06 F6 | 	mov	arg03, #52
1d410     09 31 02 F6 | 	mov	local10, arg01
1d414     98 00 A0 FD | 	call	#\builtin_bytefill_
1d418     20 2E 06 F1 | 	add	local09, #32
1d41c     17 33 02 FB | 	rdlong	local11, local09
1d420     19 35 02 F6 | 	mov	local12, local11
1d424     19 37 02 F6 | 	mov	local13, local11
1d428     20 2E 86 F1 | 	sub	local09, #32
1d42c     1B 39 02 F6 | 	mov	local14, local13
1d430     13 34 46 F7 | 	zerox	local12, #19
1d434     14 38 46 F0 | 	shr	local14, #20
1d438     02 38 66 F0 | 	shl	local14, #2
1d43c     ED 38 02 F1 | 	add	local14, __methods__
1d440     1C 39 02 FB | 	rdlong	local14, local14
1d444     14 3B 02 F6 | 	mov	local15, local06
1d448     16 3D 02 F6 | 	mov	local16, local08
1d44c     11 3F 02 F6 | 	mov	local17, local03
1d450     1D 13 02 F6 | 	mov	arg01, local15
1d454     1E 15 02 F6 | 	mov	arg02, local16
1d458     1F 17 02 F6 | 	mov	arg03, local17
1d45c     F2 40 02 F6 | 	mov	local18, objptr
1d460     1A E5 01 F6 | 	mov	objptr, local12
1d464     2D 38 62 FD | 	call	local14
1d468     20 E5 01 F6 | 	mov	objptr, local18
1d46c     FD 42 0A F6 | 	mov	local19, result1 wz
1d470     04 22 CE 57 |  if_ne	test	local03, #4 wz
1d474     58 00 90 AD |  if_e	jmp	#LR__2842
1d478     24 2E 06 F1 | 	add	local09, #36
1d47c     17 33 02 FB | 	rdlong	local11, local09
1d480     19 35 02 F6 | 	mov	local12, local11
1d484     19 37 02 F6 | 	mov	local13, local11
1d488     24 2E 86 F1 | 	sub	local09, #36
1d48c     1B 39 02 F6 | 	mov	local14, local13
1d490     13 34 46 F7 | 	zerox	local12, #19
1d494     14 38 46 F0 | 	shr	local14, #20
1d498     02 38 66 F0 | 	shl	local14, #2
1d49c     ED 38 02 F1 | 	add	local14, __methods__
1d4a0     1C 39 02 FB | 	rdlong	local14, local14
1d4a4     14 3B 02 F6 | 	mov	local15, local06
1d4a8     16 3D 02 F6 | 	mov	local16, local08
1d4ac     12 3F 02 F6 | 	mov	local17, local04
1d4b0     1D 13 02 F6 | 	mov	arg01, local15
1d4b4     1E 15 02 F6 | 	mov	arg02, local16
1d4b8     1F 17 02 F6 | 	mov	arg03, local17
1d4bc     F2 40 02 F6 | 	mov	local18, objptr
1d4c0     1A E5 01 F6 | 	mov	objptr, local12
1d4c4     2D 38 62 FD | 	call	local14
1d4c8     20 E5 01 F6 | 	mov	objptr, local18
1d4cc     FD 42 02 F6 | 	mov	local19, result1
1d4d0                 | LR__2842
1d4d0     00 42 0E F2 | 	cmp	local19, #0 wz
1d4d4     8C 01 90 5D |  if_ne	jmp	#LR__2852
1d4d8     11 45 02 F6 | 	mov	local20, local03
1d4dc     03 44 0E F5 | 	and	local20, #3 wz
1d4e0     02 26 46 55 |  if_ne	or	local05, #2
1d4e4     01 44 0E F2 | 	cmp	local20, #1 wz
1d4e8     01 26 46 55 |  if_ne	or	local05, #1
1d4ec     20 22 CE F7 | 	test	local03, #32 wz
1d4f0     C0 26 46 55 |  if_ne	or	local05, #192
1d4f4     08 28 06 F1 | 	add	local06, #8
1d4f8     14 27 62 FC | 	wrlong	local05, local06
1d4fc     0C 28 06 F1 | 	add	local06, #12
1d500     14 47 0A FB | 	rdlong	local21, local06 wz
1d504     14 28 86 F1 | 	sub	local06, #20
1d508     18 00 90 5D |  if_ne	jmp	#LR__2843
1d50c     04 2E 06 F1 | 	add	local09, #4
1d510     17 47 02 FB | 	rdlong	local21, local09
1d514     04 2E 86 F1 | 	sub	local09, #4
1d518     14 28 06 F1 | 	add	local06, #20
1d51c     14 47 62 FC | 	wrlong	local21, local06
1d520     14 28 86 F1 | 	sub	local06, #20
1d524                 | LR__2843
1d524     18 28 06 F1 | 	add	local06, #24
1d528     14 47 0A FB | 	rdlong	local21, local06 wz
1d52c     18 28 86 F1 | 	sub	local06, #24
1d530     18 00 90 5D |  if_ne	jmp	#LR__2844
1d534     08 2E 06 F1 | 	add	local09, #8
1d538     17 47 02 FB | 	rdlong	local21, local09
1d53c     08 2E 86 F1 | 	sub	local09, #8
1d540     18 28 06 F1 | 	add	local06, #24
1d544     14 47 62 FC | 	wrlong	local21, local06
1d548     18 28 86 F1 | 	sub	local06, #24
1d54c                 | LR__2844
1d54c     24 28 06 F1 | 	add	local06, #36
1d550     14 47 0A FB | 	rdlong	local21, local06 wz
1d554     24 28 86 F1 | 	sub	local06, #36
1d558     17 47 02 AB |  if_e	rdlong	local21, local09
1d55c     24 28 06 A1 |  if_e	add	local06, #36
1d560     14 47 62 AC |  if_e	wrlong	local21, local06
1d564     24 28 86 A1 |  if_e	sub	local06, #36
1d568     28 28 06 F1 | 	add	local06, #40
1d56c     14 47 0A FB | 	rdlong	local21, local06 wz
1d570     28 28 86 F1 | 	sub	local06, #40
1d574     18 00 90 5D |  if_ne	jmp	#LR__2845
1d578     10 2E 06 F1 | 	add	local09, #16
1d57c     17 47 02 FB | 	rdlong	local21, local09
1d580     10 2E 86 F1 | 	sub	local09, #16
1d584     28 28 06 F1 | 	add	local06, #40
1d588     14 47 62 FC | 	wrlong	local21, local06
1d58c     28 28 86 F1 | 	sub	local06, #40
1d590                 | LR__2845
1d590     30 28 06 F1 | 	add	local06, #48
1d594     14 47 0A FB | 	rdlong	local21, local06 wz
1d598     30 28 86 F1 | 	sub	local06, #48
1d59c     18 00 90 5D |  if_ne	jmp	#LR__2846
1d5a0     0C 2E 06 F1 | 	add	local09, #12
1d5a4     17 47 02 FB | 	rdlong	local21, local09
1d5a8     0C 2E 86 F1 | 	sub	local09, #12
1d5ac     30 28 06 F1 | 	add	local06, #48
1d5b0     14 47 62 FC | 	wrlong	local21, local06
1d5b4     30 28 86 F1 | 	sub	local06, #48
1d5b8                 | LR__2846
1d5b8     1C 28 06 F1 | 	add	local06, #28
1d5bc     14 47 0A FB | 	rdlong	local21, local06 wz
1d5c0     1C 28 86 F1 | 	sub	local06, #28
1d5c4     1C 00 90 5D |  if_ne	jmp	#LR__2847
1d5c8     01 2A 06 F6 | 	mov	local07, #1
1d5cc     F2 12 02 F6 | 	mov	arg01, objptr
1d5d0     00 60 03 FF 
1d5d4     00 12 46 F5 | 	or	arg01, ##113246208
1d5d8     1C 28 06 F1 | 	add	local06, #28
1d5dc     14 13 62 FC | 	wrlong	arg01, local06
1d5e0     1C 28 86 F1 | 	sub	local06, #28
1d5e4                 | LR__2847
1d5e4     20 28 06 F1 | 	add	local06, #32
1d5e8     14 47 0A FB | 	rdlong	local21, local06 wz
1d5ec     20 28 86 F1 | 	sub	local06, #32
1d5f0     1C 00 90 5D |  if_ne	jmp	#LR__2848
1d5f4     01 2A 06 F6 | 	mov	local07, #1
1d5f8     F2 12 02 F6 | 	mov	arg01, objptr
1d5fc     00 68 03 FF 
1d600     00 12 46 F5 | 	or	arg01, ##114294784
1d604     20 28 06 F1 | 	add	local06, #32
1d608     14 13 62 FC | 	wrlong	arg01, local06
1d60c     20 28 86 F1 | 	sub	local06, #32
1d610                 | LR__2848
1d610     2C 28 06 F1 | 	add	local06, #44
1d614     14 47 0A FB | 	rdlong	local21, local06 wz
1d618     2C 28 86 F1 | 	sub	local06, #44
1d61c     44 00 90 5D |  if_ne	jmp	#LR__2851
1d620     14 2E 06 F1 | 	add	local09, #20
1d624     17 47 0A FB | 	rdlong	local21, local09 wz
1d628     14 2E 86 F1 | 	sub	local09, #20
1d62c     18 00 90 AD |  if_e	jmp	#LR__2849
1d630     14 2E 06 F1 | 	add	local09, #20
1d634     17 47 02 FB | 	rdlong	local21, local09
1d638     2C 28 06 F1 | 	add	local06, #44
1d63c     14 47 62 FC | 	wrlong	local21, local06
1d640     2C 28 86 F1 | 	sub	local06, #44
1d644     1C 00 90 FD | 	jmp	#LR__2850
1d648                 | LR__2849
1d648     01 2A 06 F6 | 	mov	local07, #1
1d64c     F2 12 02 F6 | 	mov	arg01, objptr
1d650     00 70 03 FF 
1d654     00 12 46 F5 | 	or	arg01, ##115343360
1d658     2C 28 06 F1 | 	add	local06, #44
1d65c     14 13 62 FC | 	wrlong	arg01, local06
1d660     2C 28 86 F1 | 	sub	local06, #44
1d664                 | LR__2850
1d664                 | LR__2851
1d664                 | LR__2852
1d664     00 2A 0E F2 | 	cmp	local07, #0 wz
1d668     14 13 02 56 |  if_ne	mov	arg01, local06
1d66c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1d670     00 42 0E F2 | 	cmp	local19, #0 wz
1d674     00 12 06 A6 |  if_e	mov	arg01, #0
1d678     10 00 90 5D |  if_ne	jmp	#LR__2853
1d67c     00 12 4E F2 | 	cmps	arg01, #0 wz
1d680     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d684     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d688     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d68c                 | LR__2853
1d68c     21 FB 01 F6 | 	mov	result1, local19
1d690                 | LR__2854
1d690     A7 F0 03 F6 | 	mov	ptra, fp
1d694     B2 00 A0 FD | 	call	#popregs_
1d698                 | __system___openraw_ret
1d698     2D 00 64 FD | 	ret
1d69c                 | 
1d69c                 | __system___closeraw
1d69c     05 4A 05 F6 | 	mov	COUNT_, #5
1d6a0     A8 00 A0 FD | 	call	#pushregs_
1d6a4     09 1F 02 F6 | 	mov	local01, arg01
1d6a8     00 20 06 F6 | 	mov	local02, #0
1d6ac     08 1E 06 F1 | 	add	local01, #8
1d6b0     0F FB 09 FB | 	rdlong	result1, local01 wz
1d6b4     08 1E 86 F1 | 	sub	local01, #8
1d6b8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d6bc     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1d6c0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d6c4     01 FA 65 A6 |  if_e	neg	result1, #1
1d6c8     A8 00 90 AD |  if_e	jmp	#LR__2862
1d6cc     2C 1E 06 F1 | 	add	local01, #44
1d6d0     0F FB 09 FB | 	rdlong	result1, local01 wz
1d6d4     2C 1E 86 F1 | 	sub	local01, #44
1d6d8     38 00 90 AD |  if_e	jmp	#LR__2860
1d6dc     2C 1E 06 F1 | 	add	local01, #44
1d6e0     0F 23 02 FB | 	rdlong	local03, local01
1d6e4     11 25 02 F6 | 	mov	local04, local03
1d6e8     2C 1E 86 F1 | 	sub	local01, #44
1d6ec     13 24 46 F7 | 	zerox	local04, #19
1d6f0     14 22 46 F0 | 	shr	local03, #20
1d6f4     02 22 66 F0 | 	shl	local03, #2
1d6f8     ED 22 02 F1 | 	add	local03, __methods__
1d6fc     11 23 02 FB | 	rdlong	local03, local03
1d700     0F 13 02 F6 | 	mov	arg01, local01
1d704     F2 26 02 F6 | 	mov	local05, objptr
1d708     12 E5 01 F6 | 	mov	objptr, local04
1d70c     2D 22 62 FD | 	call	local03
1d710     13 E5 01 F6 | 	mov	objptr, local05
1d714                 | LR__2860
1d714     24 1E 06 F1 | 	add	local01, #36
1d718     0F 27 0A FB | 	rdlong	local05, local01 wz
1d71c     24 1E 86 F1 | 	sub	local01, #36
1d720     3C 00 90 AD |  if_e	jmp	#LR__2861
1d724     24 1E 06 F1 | 	add	local01, #36
1d728     0F 23 02 FB | 	rdlong	local03, local01
1d72c     11 25 02 F6 | 	mov	local04, local03
1d730     24 1E 86 F1 | 	sub	local01, #36
1d734     13 24 46 F7 | 	zerox	local04, #19
1d738     14 22 46 F0 | 	shr	local03, #20
1d73c     02 22 66 F0 | 	shl	local03, #2
1d740     ED 22 02 F1 | 	add	local03, __methods__
1d744     11 23 02 FB | 	rdlong	local03, local03
1d748     0F 13 02 F6 | 	mov	arg01, local01
1d74c     F2 26 02 F6 | 	mov	local05, objptr
1d750     12 E5 01 F6 | 	mov	objptr, local04
1d754     2D 22 62 FD | 	call	local03
1d758     13 E5 01 F6 | 	mov	objptr, local05
1d75c     FD 20 02 F6 | 	mov	local02, result1
1d760                 | LR__2861
1d760     0F 13 02 F6 | 	mov	arg01, local01
1d764     00 14 06 F6 | 	mov	arg02, #0
1d768     34 16 06 F6 | 	mov	arg03, #52
1d76c     98 00 A0 FD | 	call	#\builtin_bytefill_
1d770     10 FB 01 F6 | 	mov	result1, local02
1d774                 | LR__2862
1d774     A7 F0 03 F6 | 	mov	ptra, fp
1d778     B2 00 A0 FD | 	call	#popregs_
1d77c                 | __system___closeraw_ret
1d77c     2D 00 64 FD | 	ret
1d780                 | 
1d780                 | __system___vfs_open_sdcardx
1d780     0B 4A 05 F6 | 	mov	COUNT_, #11
1d784     A8 00 A0 FD | 	call	#pushregs_
1d788     09 23 02 F6 | 	mov	local03, arg01
1d78c     0A 25 02 F6 | 	mov	local04, arg02
1d790     0B 27 02 F6 | 	mov	local05, arg03
1d794     0C 29 02 F6 | 	mov	local06, arg04
1d798     01 00 00 FF 
1d79c     24 12 06 F6 | 	mov	arg01, ##548
1d7a0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d7a4     FD 2A 02 F6 | 	mov	local07, result1
1d7a8     01 00 00 FF 
1d7ac     34 12 06 F6 | 	mov	arg01, ##564
1d7b0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d7b4     FD 2C 02 F6 | 	mov	local08, result1
1d7b8     11 19 02 F6 | 	mov	arg04, local03
1d7bc     1F 18 C6 F0 | 	sar	arg04, #31
1d7c0     11 17 02 F6 | 	mov	arg03, local03
1d7c4     01 12 06 F6 | 	mov	arg01, #1
1d7c8     00 14 06 F6 | 	mov	arg02, #0
1d7cc     48 DC BF FD | 	call	#__system___int64_shl
1d7d0     FD 1E 02 F6 | 	mov	local01, result1
1d7d4     FE 2E 02 F6 | 	mov	local09, result2
1d7d8     12 19 02 F6 | 	mov	arg04, local04
1d7dc     1F 18 C6 F0 | 	sar	arg04, #31
1d7e0     12 17 02 F6 | 	mov	arg03, local04
1d7e4     01 12 06 F6 | 	mov	arg01, #1
1d7e8     00 14 06 F6 | 	mov	arg02, #0
1d7ec     28 DC BF FD | 	call	#__system___int64_shl
1d7f0     FD 1E 42 F5 | 	or	local01, result1
1d7f4     FE 2E 42 F5 | 	or	local09, result2
1d7f8     13 19 02 F6 | 	mov	arg04, local05
1d7fc     1F 18 C6 F0 | 	sar	arg04, #31
1d800     13 17 02 F6 | 	mov	arg03, local05
1d804     01 12 06 F6 | 	mov	arg01, #1
1d808     00 14 06 F6 | 	mov	arg02, #0
1d80c     08 DC BF FD | 	call	#__system___int64_shl
1d810     FD 1E 42 F5 | 	or	local01, result1
1d814     FE 2E 42 F5 | 	or	local09, result2
1d818     14 19 02 F6 | 	mov	arg04, local06
1d81c     1F 18 C6 F0 | 	sar	arg04, #31
1d820     14 17 02 F6 | 	mov	arg03, local06
1d824     01 12 06 F6 | 	mov	arg01, #1
1d828     00 14 06 F6 | 	mov	arg02, #0
1d82c     E8 DB BF FD | 	call	#__system___int64_shl
1d830     17 15 02 F6 | 	mov	arg02, local09
1d834     FD 1E 42 F5 | 	or	local01, result1
1d838     0A FD 41 F5 | 	or	result2, arg02
1d83c     FE 20 02 F6 | 	mov	local02, result2
1d840     0F 13 02 F6 | 	mov	arg01, local01
1d844     10 15 02 F6 | 	mov	arg02, local02
1d848     04 DC BF FD | 	call	#__system___usepins
1d84c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d850     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d854     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1d858     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d85c     00 FA 05 A6 |  if_e	mov	result1, #0
1d860     B4 00 90 AD |  if_e	jmp	#LR__2872
1d864     0F 31 02 F6 | 	mov	local10, local01
1d868     10 2F 02 F6 | 	mov	local09, local02
1d86c     01 00 00 FF 
1d870     08 2A 06 F1 | 	add	local07, ##520
1d874     15 31 62 FC | 	wrlong	local10, local07
1d878     04 2A 06 F1 | 	add	local07, #4
1d87c     15 2F 62 FC | 	wrlong	local09, local07
1d880     01 00 00 FF 
1d884     0C 2A 86 F1 | 	sub	local07, ##524
1d888     14 1B 02 F6 | 	mov	arg05, local06
1d88c     00 12 06 F6 | 	mov	arg01, #0
1d890     11 15 02 F6 | 	mov	arg02, local03
1d894     12 17 02 F6 | 	mov	arg03, local04
1d898     13 19 02 F6 | 	mov	arg04, local05
1d89c     F2 30 02 F6 | 	mov	local10, objptr
1d8a0     15 E5 01 F6 | 	mov	objptr, local07
1d8a4     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1d8a8     18 E5 01 F6 | 	mov	objptr, local10
1d8ac     FD 32 0A F6 | 	mov	local11, result1 wz
1d8b0     24 00 90 5D |  if_ne	jmp	#LR__2870
1d8b4     41 01 00 FF 
1d8b8     5A 15 06 F6 | 	mov	arg02, ##@LR__4267
1d8bc     16 13 02 F6 | 	mov	arg01, local08
1d8c0     00 16 06 F6 | 	mov	arg03, #0
1d8c4     F2 32 02 F6 | 	mov	local11, objptr
1d8c8     15 E5 01 F6 | 	mov	objptr, local07
1d8cc     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1d8d0     19 E5 01 F6 | 	mov	objptr, local11
1d8d4     FD 32 02 F6 | 	mov	local11, result1
1d8d8                 | LR__2870
1d8d8     00 32 0E F2 | 	cmp	local11, #0 wz
1d8dc     24 00 90 AD |  if_e	jmp	#LR__2871
1d8e0     0F 13 02 F6 | 	mov	arg01, local01
1d8e4     10 15 02 F6 | 	mov	arg02, local02
1d8e8     B8 DB BF FD | 	call	#__system___freepins
1d8ec     19 13 6A F6 | 	neg	arg01, local11 wz
1d8f0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d8f4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d8f8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d8fc     00 FA 05 F6 | 	mov	result1, #0
1d900     14 00 90 FD | 	jmp	#LR__2872
1d904                 | LR__2871
1d904     15 13 02 F6 | 	mov	arg01, local07
1d908     F2 32 02 F6 | 	mov	local11, objptr
1d90c     15 E5 01 F6 | 	mov	objptr, local07
1d910     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1d914     19 E5 01 F6 | 	mov	objptr, local11
1d918                 | LR__2872
1d918     A7 F0 03 F6 | 	mov	ptra, fp
1d91c     B2 00 A0 FD | 	call	#popregs_
1d920                 | __system___vfs_open_sdcardx_ret
1d920     2D 00 64 FD | 	ret
1d924                 | 
1d924                 | __system____default_getc
1d924     03 4A 05 F6 | 	mov	COUNT_, #3
1d928     A8 00 A0 FD | 	call	#pushregs_
1d92c     09 1F 02 F6 | 	mov	local01, arg01
1d930     0F 21 02 FB | 	rdlong	local02, local01
1d934     08 20 06 F1 | 	add	local02, #8
1d938     10 23 02 FB | 	rdlong	local03, local02
1d93c     02 22 CE F7 | 	test	local03, #2 wz
1d940     0F 13 02 56 |  if_ne	mov	arg01, local01
1d944     00 01 B0 5D |  if_ne	call	#__system____default_flush
1d948     10 23 02 FB | 	rdlong	local03, local02
1d94c     01 22 46 F5 | 	or	local03, #1
1d950     10 23 62 FC | 	wrlong	local03, local02
1d954     08 20 86 F1 | 	sub	local02, #8
1d958     10 23 0A FB | 	rdlong	local03, local02 wz
1d95c     0C 00 90 5D |  if_ne	jmp	#LR__2880
1d960     0F 13 02 F6 | 	mov	arg01, local01
1d964     64 16 B0 FD | 	call	#__system____default_filbuf
1d968     FD 22 02 F6 | 	mov	local03, result1
1d96c                 | LR__2880
1d96c     01 22 56 F2 | 	cmps	local03, #1 wc
1d970     01 FA 65 C6 |  if_b	neg	result1, #1
1d974     1C 00 90 CD |  if_b	jmp	#LR__2881
1d978     01 22 86 F1 | 	sub	local03, #1
1d97c     10 23 62 FC | 	wrlong	local03, local02
1d980     04 20 06 F1 | 	add	local02, #4
1d984     10 23 02 FB | 	rdlong	local03, local02
1d988     11 FB C1 FA | 	rdbyte	result1, local03
1d98c     01 22 06 F1 | 	add	local03, #1
1d990     10 23 62 FC | 	wrlong	local03, local02
1d994                 | LR__2881
1d994     A7 F0 03 F6 | 	mov	ptra, fp
1d998     B2 00 A0 FD | 	call	#popregs_
1d99c                 | __system____default_getc_ret
1d99c     2D 00 64 FD | 	ret
1d9a0                 | 
1d9a0                 | __system____default_putc
1d9a0     06 4A 05 F6 | 	mov	COUNT_, #6
1d9a4     A8 00 A0 FD | 	call	#pushregs_
1d9a8     09 1F 02 F6 | 	mov	local01, arg01
1d9ac     0A 21 02 F6 | 	mov	local02, arg02
1d9b0     10 23 02 FB | 	rdlong	local03, local02
1d9b4     08 22 06 F1 | 	add	local03, #8
1d9b8     11 FB 01 FB | 	rdlong	result1, local03
1d9bc     01 FA CD F7 | 	test	result1, #1 wz
1d9c0     10 13 02 56 |  if_ne	mov	arg01, local02
1d9c4     80 00 B0 5D |  if_ne	call	#__system____default_flush
1d9c8     11 25 02 FB | 	rdlong	local04, local03
1d9cc     02 24 46 F5 | 	or	local04, #2
1d9d0     11 25 62 FC | 	wrlong	local04, local03
1d9d4     08 22 86 F1 | 	sub	local03, #8
1d9d8     11 27 02 FB | 	rdlong	local05, local03
1d9dc     10 22 06 F1 | 	add	local03, #16
1d9e0     11 15 02 FB | 	rdlong	arg02, local03
1d9e4     10 22 86 F1 | 	sub	local03, #16
1d9e8     13 FB 01 F6 | 	mov	result1, local05
1d9ec     0A FB 01 F1 | 	add	result1, arg02
1d9f0     FD 1E 42 FC | 	wrbyte	local01, result1
1d9f4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d9f8     01 26 06 F1 | 	add	local05, #1
1d9fc     11 27 62 FC | 	wrlong	local05, local03
1da00     06 20 06 F1 | 	add	local02, #6
1da04     10 29 EA FA | 	rdword	local06, local02 wz
1da08     06 20 86 F1 | 	sub	local02, #6
1da0c     0C 22 06 51 |  if_ne	add	local03, #12
1da10     11 25 02 5B |  if_ne	rdlong	local04, local03
1da14     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1da18     0C 00 90 AD |  if_e	jmp	#LR__2890
1da1c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1da20     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1da24     10 00 90 5D |  if_ne	jmp	#LR__2891
1da28                 | LR__2890
1da28     10 13 02 F6 | 	mov	arg01, local02
1da2c     18 00 B0 FD | 	call	#__system____default_flush
1da30     00 FA 0D F2 | 	cmp	result1, #0 wz
1da34     01 1E 66 56 |  if_ne	neg	local01, #1
1da38                 | LR__2891
1da38     0F FB 01 F6 | 	mov	result1, local01
1da3c     A7 F0 03 F6 | 	mov	ptra, fp
1da40     B2 00 A0 FD | 	call	#popregs_
1da44                 | __system____default_putc_ret
1da44     2D 00 64 FD | 	ret
1da48                 | 
1da48                 | __system____default_flush
1da48     06 4A 05 F6 | 	mov	COUNT_, #6
1da4c     A8 00 A0 FD | 	call	#pushregs_
1da50     09 1F 02 F6 | 	mov	local01, arg01
1da54     0F 21 02 FB | 	rdlong	local02, local01
1da58     10 23 02 FB | 	rdlong	local03, local02
1da5c     08 20 06 F1 | 	add	local02, #8
1da60     10 FB 01 FB | 	rdlong	result1, local02
1da64     08 20 86 F1 | 	sub	local02, #8
1da68     02 FA CD F7 | 	test	result1, #2 wz
1da6c     D0 00 90 AD |  if_e	jmp	#LR__2902
1da70     01 22 56 F2 | 	cmps	local03, #1 wc
1da74     20 01 90 CD |  if_b	jmp	#LR__2904
1da78     08 1E 06 F1 | 	add	local01, #8
1da7c     0F FB 01 FB | 	rdlong	result1, local01
1da80     08 1E 86 F1 | 	sub	local01, #8
1da84     40 FA CD F7 | 	test	result1, #64 wz
1da88     68 00 90 AD |  if_e	jmp	#LR__2901
1da8c     08 1E 06 F1 | 	add	local01, #8
1da90     0F 17 02 FB | 	rdlong	arg03, local01
1da94     08 1E 86 F1 | 	sub	local01, #8
1da98     80 16 CE F7 | 	test	arg03, #128 wz
1da9c     54 00 90 AD |  if_e	jmp	#LR__2900
1daa0     30 1E 06 F1 | 	add	local01, #48
1daa4     0F 25 02 FB | 	rdlong	local04, local01
1daa8     12 27 02 F6 | 	mov	local05, local04
1daac     30 1E 86 F1 | 	sub	local01, #48
1dab0     13 26 46 F7 | 	zerox	local05, #19
1dab4     14 24 46 F0 | 	shr	local04, #20
1dab8     02 24 66 F0 | 	shl	local04, #2
1dabc     ED 24 02 F1 | 	add	local04, __methods__
1dac0     12 25 02 FB | 	rdlong	local04, local04
1dac4     0F 13 02 F6 | 	mov	arg01, local01
1dac8     00 14 06 F6 | 	mov	arg02, #0
1dacc     02 16 06 F6 | 	mov	arg03, #2
1dad0     F2 28 02 F6 | 	mov	local06, objptr
1dad4     13 E5 01 F6 | 	mov	objptr, local05
1dad8     2D 24 62 FD | 	call	local04
1dadc     14 E5 01 F6 | 	mov	objptr, local06
1dae0     08 1E 06 F1 | 	add	local01, #8
1dae4     0F 29 02 FB | 	rdlong	local06, local01
1dae8     80 28 26 F5 | 	andn	local06, #128
1daec     0F 29 62 FC | 	wrlong	local06, local01
1daf0     08 1E 86 F1 | 	sub	local01, #8
1daf4                 | LR__2900
1daf4                 | LR__2901
1daf4     18 1E 06 F1 | 	add	local01, #24
1daf8     0F 25 02 FB | 	rdlong	local04, local01
1dafc     12 27 02 F6 | 	mov	local05, local04
1db00     18 1E 86 F1 | 	sub	local01, #24
1db04     13 26 46 F7 | 	zerox	local05, #19
1db08     14 24 46 F0 | 	shr	local04, #20
1db0c     02 24 66 F0 | 	shl	local04, #2
1db10     ED 24 02 F1 | 	add	local04, __methods__
1db14     12 25 02 FB | 	rdlong	local04, local04
1db18     10 20 06 F1 | 	add	local02, #16
1db1c     10 15 02 FB | 	rdlong	arg02, local02
1db20     10 20 86 F1 | 	sub	local02, #16
1db24     0F 13 02 F6 | 	mov	arg01, local01
1db28     11 17 02 F6 | 	mov	arg03, local03
1db2c     F2 28 02 F6 | 	mov	local06, objptr
1db30     13 E5 01 F6 | 	mov	objptr, local05
1db34     2D 24 62 FD | 	call	local04
1db38     14 E5 01 F6 | 	mov	objptr, local06
1db3c     58 00 90 FD | 	jmp	#LR__2904
1db40                 | LR__2902
1db40     08 20 06 F1 | 	add	local02, #8
1db44     10 29 02 FB | 	rdlong	local06, local02
1db48     08 20 86 F1 | 	sub	local02, #8
1db4c     01 28 CE F7 | 	test	local06, #1 wz
1db50     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1db54     40 00 90 AD |  if_e	jmp	#LR__2903
1db58     30 1E 06 F1 | 	add	local01, #48
1db5c     0F 25 02 FB | 	rdlong	local04, local01
1db60     12 27 02 F6 | 	mov	local05, local04
1db64     30 1E 86 F1 | 	sub	local01, #48
1db68     13 26 46 F7 | 	zerox	local05, #19
1db6c     14 24 46 F0 | 	shr	local04, #20
1db70     02 24 66 F0 | 	shl	local04, #2
1db74     ED 24 02 F1 | 	add	local04, __methods__
1db78     12 25 02 FB | 	rdlong	local04, local04
1db7c     0F 13 02 F6 | 	mov	arg01, local01
1db80     11 15 62 F6 | 	neg	arg02, local03
1db84     01 16 06 F6 | 	mov	arg03, #1
1db88     F2 28 02 F6 | 	mov	local06, objptr
1db8c     13 E5 01 F6 | 	mov	objptr, local05
1db90     2D 24 62 FD | 	call	local04
1db94     14 E5 01 F6 | 	mov	objptr, local06
1db98                 | LR__2903
1db98                 | LR__2904
1db98     10 01 68 FC | 	wrlong	#0, local02
1db9c     04 20 06 F1 | 	add	local02, #4
1dba0     10 01 68 FC | 	wrlong	#0, local02
1dba4     04 20 06 F1 | 	add	local02, #4
1dba8     10 01 68 FC | 	wrlong	#0, local02
1dbac     00 FA 05 F6 | 	mov	result1, #0
1dbb0     A7 F0 03 F6 | 	mov	ptra, fp
1dbb4     B2 00 A0 FD | 	call	#popregs_
1dbb8                 | __system____default_flush_ret
1dbb8     2D 00 64 FD | 	ret
1dbbc                 | 
1dbbc                 | __system____default_buffer_init
1dbbc     02 4A 05 F6 | 	mov	COUNT_, #2
1dbc0     A8 00 A0 FD | 	call	#pushregs_
1dbc4     09 1F 02 F6 | 	mov	local01, arg01
1dbc8     0F 21 02 FB | 	rdlong	local02, local01
1dbcc     0F 13 02 F6 | 	mov	arg01, local01
1dbd0     F8 02 B0 FD | 	call	#__system___isatty
1dbd4     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbd8     06 1E 06 51 |  if_ne	add	local01, #6
1dbdc     0F 0B 58 5C |  if_ne	wrword	#5, local01
1dbe0     06 1E 06 A1 |  if_e	add	local01, #6
1dbe4     0F 0D 58 AC |  if_e	wrword	#6, local01
1dbe8     14 20 06 F1 | 	add	local02, #20
1dbec     10 1F 02 F6 | 	mov	local01, local02
1dbf0     04 20 86 F1 | 	sub	local02, #4
1dbf4     10 1F 62 FC | 	wrlong	local01, local02
1dbf8     04 20 86 F1 | 	sub	local02, #4
1dbfc     02 00 80 FF 
1dc00     10 01 68 FC | 	wrlong	##1024, local02
1dc04     00 FA 05 F6 | 	mov	result1, #0
1dc08     A7 F0 03 F6 | 	mov	ptra, fp
1dc0c     B2 00 A0 FD | 	call	#popregs_
1dc10                 | __system____default_buffer_init_ret
1dc10     2D 00 64 FD | 	ret
1dc14                 | 
1dc14                 | __system__stat
1dc14     04 4A 05 F6 | 	mov	COUNT_, #4
1dc18     A8 00 A0 FD | 	call	#pushregs_
1dc1c     0A 1F 02 F6 | 	mov	local01, arg02
1dc20     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1dc24     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1dc28     09 15 02 F6 | 	mov	arg02, arg01
1dc2c     10 13 02 F6 | 	mov	arg01, local02
1dc30     00 16 06 F6 | 	mov	arg03, #0
1dc34     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1dc38     40 B9 BF FD | 	call	#__system____getvfsforfile
1dc3c     FD 22 0A F6 | 	mov	local03, result1 wz
1dc40     10 00 90 AD |  if_e	jmp	#LR__2910
1dc44     34 22 06 F1 | 	add	local03, #52
1dc48     11 17 0A FB | 	rdlong	arg03, local03 wz
1dc4c     34 22 86 F1 | 	sub	local03, #52
1dc50     14 00 90 5D |  if_ne	jmp	#LR__2911
1dc54                 | LR__2910
1dc54     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dc58     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1dc5c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dc60     01 FA 65 F6 | 	neg	result1, #1
1dc64     68 00 90 FD | 	jmp	#LR__2912
1dc68                 | LR__2911
1dc68     0F 13 02 F6 | 	mov	arg01, local01
1dc6c     00 14 06 F6 | 	mov	arg02, #0
1dc70     30 16 06 F6 | 	mov	arg03, #48
1dc74     09 25 02 F6 | 	mov	local04, arg01
1dc78     98 00 A0 FD | 	call	#\builtin_bytefill_
1dc7c     12 FB 01 F6 | 	mov	result1, local04
1dc80     10 13 CA FA | 	rdbyte	arg01, local02 wz
1dc84     08 1E 06 A1 |  if_e	add	local01, #8
1dc88     08 00 80 AF 
1dc8c     0F FF 6B AC |  if_e	wrlong	##4607, local01
1dc90     00 FA 05 A6 |  if_e	mov	result1, #0
1dc94     38 00 90 AD |  if_e	jmp	#LR__2912
1dc98     34 22 06 F1 | 	add	local03, #52
1dc9c     11 23 02 FB | 	rdlong	local03, local03
1dca0     11 25 02 F6 | 	mov	local04, local03
1dca4     13 22 46 F7 | 	zerox	local03, #19
1dca8     14 24 46 F0 | 	shr	local04, #20
1dcac     02 24 66 F0 | 	shl	local04, #2
1dcb0     ED 24 02 F1 | 	add	local04, __methods__
1dcb4     12 25 02 FB | 	rdlong	local04, local04
1dcb8     10 13 02 F6 | 	mov	arg01, local02
1dcbc     0F 15 02 F6 | 	mov	arg02, local01
1dcc0     F2 20 02 F6 | 	mov	local02, objptr
1dcc4     11 E5 01 F6 | 	mov	objptr, local03
1dcc8     2D 24 62 FD | 	call	local04
1dccc     10 E5 01 F6 | 	mov	objptr, local02
1dcd0                 | LR__2912
1dcd0     A7 F0 03 F6 | 	mov	ptra, fp
1dcd4     B2 00 A0 FD | 	call	#popregs_
1dcd8                 | __system__stat_ret
1dcd8     2D 00 64 FD | 	ret
1dcdc                 | 
1dcdc                 | __system__read
1dcdc     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dce0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dce4     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dce8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dcec     01 FA 65 36 |  if_ae	neg	result1, #1
1dcf0     20 00 90 3D |  if_ae	jmp	#LR__2920
1dcf4     34 12 06 FD | 	qmul	arg01, #52
1dcf8     02 00 00 FF 
1dcfc     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dd00     18 12 62 FD | 	getqx	arg01
1dd04     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1dd08     02 00 00 FF 
1dd0c     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dd10     D0 0F B0 FD | 	call	#__system___vfsread
1dd14                 | LR__2920
1dd14                 | __system__read_ret
1dd14     2D 00 64 FD | 	ret
1dd18                 | 
1dd18                 | __system__close
1dd18     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dd1c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dd20     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dd24     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dd28     01 FA 65 36 |  if_ae	neg	result1, #1
1dd2c     20 00 90 3D |  if_ae	jmp	#LR__2930
1dd30     34 12 06 FD | 	qmul	arg01, #52
1dd34     02 00 00 FF 
1dd38     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dd3c     18 12 62 FD | 	getqx	arg01
1dd40     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1dd44     02 00 00 FF 
1dd48     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dd4c     4C F9 BF FD | 	call	#__system___closeraw
1dd50                 | LR__2930
1dd50                 | __system__close_ret
1dd50     2D 00 64 FD | 	ret
1dd54                 | 
1dd54                 | __system__lseek
1dd54     06 4A 05 F6 | 	mov	COUNT_, #6
1dd58     A8 00 A0 FD | 	call	#pushregs_
1dd5c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dd60     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dd64     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dd68     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dd6c     01 FA 65 36 |  if_ae	neg	result1, #1
1dd70     C4 00 90 3D |  if_ae	jmp	#LR__2941
1dd74     34 12 06 FD | 	qmul	arg01, #52
1dd78     02 00 00 FF 
1dd7c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dd80     18 1E 62 FD | 	getqx	local01
1dd84     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1dd88     30 1E 06 F1 | 	add	local01, #48
1dd8c     0F 13 0A FB | 	rdlong	arg01, local01 wz
1dd90     30 1E 86 F1 | 	sub	local01, #48
1dd94     02 00 00 FF 
1dd98     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dd9c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dda0     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1dda4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1dda8     01 FA 65 A6 |  if_e	neg	result1, #1
1ddac     88 00 90 AD |  if_e	jmp	#LR__2941
1ddb0     08 1E 06 F1 | 	add	local01, #8
1ddb4     0F 21 02 FB | 	rdlong	local02, local01
1ddb8     08 1E 86 F1 | 	sub	local01, #8
1ddbc     40 20 CE F7 | 	test	local02, #64 wz
1ddc0     08 1E 06 51 |  if_ne	add	local01, #8
1ddc4     0F 21 02 5B |  if_ne	rdlong	local02, local01
1ddc8     80 20 46 55 |  if_ne	or	local02, #128
1ddcc     0F 21 62 5C |  if_ne	wrlong	local02, local01
1ddd0     08 1E 86 51 |  if_ne	sub	local01, #8
1ddd4     30 1E 06 F1 | 	add	local01, #48
1ddd8     0F 23 02 FB | 	rdlong	local03, local01
1dddc     11 25 02 F6 | 	mov	local04, local03
1dde0     30 1E 86 F1 | 	sub	local01, #48
1dde4     13 24 46 F7 | 	zerox	local04, #19
1dde8     14 22 46 F0 | 	shr	local03, #20
1ddec     02 22 66 F0 | 	shl	local03, #2
1ddf0     ED 22 02 F1 | 	add	local03, __methods__
1ddf4     11 23 02 FB | 	rdlong	local03, local03
1ddf8     0F 13 02 F6 | 	mov	arg01, local01
1ddfc     F2 26 02 F6 | 	mov	local05, objptr
1de00     12 E5 01 F6 | 	mov	objptr, local04
1de04     2D 22 62 FD | 	call	local03
1de08     13 E5 01 F6 | 	mov	objptr, local05
1de0c     FD 28 02 F6 | 	mov	local06, result1
1de10     00 28 56 F2 | 	cmps	local06, #0 wc
1de14     1C 00 90 3D |  if_ae	jmp	#LR__2940
1de18     14 13 6A F6 | 	neg	arg01, local06 wz
1de1c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1de20     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1de24     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1de28     01 FA 65 56 |  if_ne	neg	result1, #1
1de2c     00 FA 05 A6 |  if_e	mov	result1, #0
1de30     04 00 90 FD | 	jmp	#LR__2941
1de34                 | LR__2940
1de34     14 FB 01 F6 | 	mov	result1, local06
1de38                 | LR__2941
1de38     A7 F0 03 F6 | 	mov	ptra, fp
1de3c     B2 00 A0 FD | 	call	#popregs_
1de40                 | __system__lseek_ret
1de40     2D 00 64 FD | 	ret
1de44                 | 
1de44                 | __system___ioctl
1de44     03 4A 05 F6 | 	mov	COUNT_, #3
1de48     A8 00 A0 FD | 	call	#pushregs_
1de4c     00 12 4E F2 | 	cmps	arg01, #0 wz
1de50     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1de54     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1de58     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1de5c     01 FA 65 A6 |  if_e	neg	result1, #1
1de60     5C 00 90 AD |  if_e	jmp	#LR__2951
1de64     28 12 06 F1 | 	add	arg01, #40
1de68     09 1F 02 FB | 	rdlong	local01, arg01
1de6c     0F 21 02 F6 | 	mov	local02, local01
1de70     28 12 86 F1 | 	sub	arg01, #40
1de74     13 20 46 F7 | 	zerox	local02, #19
1de78     14 1E 46 F0 | 	shr	local01, #20
1de7c     02 1E 66 F0 | 	shl	local01, #2
1de80     ED 1E 02 F1 | 	add	local01, __methods__
1de84     0F 1F 02 FB | 	rdlong	local01, local01
1de88     F2 22 02 F6 | 	mov	local03, objptr
1de8c     10 E5 01 F6 | 	mov	objptr, local02
1de90     2D 1E 62 FD | 	call	local01
1de94     11 E5 01 F6 | 	mov	objptr, local03
1de98     FD 12 0A F6 | 	mov	arg01, result1 wz
1de9c     1C 00 90 AD |  if_e	jmp	#LR__2950
1dea0     00 12 4E F2 | 	cmps	arg01, #0 wz
1dea4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dea8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1deac     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1deb0     01 FA 65 56 |  if_ne	neg	result1, #1
1deb4     00 FA 05 A6 |  if_e	mov	result1, #0
1deb8     04 00 90 FD | 	jmp	#LR__2951
1debc                 | LR__2950
1debc     00 FA 05 F6 | 	mov	result1, #0
1dec0                 | LR__2951
1dec0     A7 F0 03 F6 | 	mov	ptra, fp
1dec4     B2 00 A0 FD | 	call	#popregs_
1dec8                 | __system___ioctl_ret
1dec8     2D 00 64 FD | 	ret
1decc                 | 
1decc                 | __system___isatty
1decc     00 4A 05 F6 | 	mov	COUNT_, #0
1ded0     A8 00 A0 FD | 	call	#pushregs_
1ded4     0C F0 07 F1 | 	add	ptra, #12
1ded8     04 4E 05 F1 | 	add	fp, #4
1dedc     A7 12 62 FC | 	wrlong	arg01, fp
1dee0     04 4E 05 F1 | 	add	fp, #4
1dee4     A7 16 02 F6 | 	mov	arg03, fp
1dee8     08 4E 85 F1 | 	sub	fp, #8
1deec     00 15 06 F6 | 	mov	arg02, #256
1def0     50 FF BF FD | 	call	#__system___ioctl
1def4     00 FA 0D F2 | 	cmp	result1, #0 wz
1def8     01 FA 05 A6 |  if_e	mov	result1, #1
1defc     00 FA 05 56 |  if_ne	mov	result1, #0
1df00     A7 F0 03 F6 | 	mov	ptra, fp
1df04     B2 00 A0 FD | 	call	#popregs_
1df08                 | __system___isatty_ret
1df08     2D 00 64 FD | 	ret
1df0c                 | 
1df0c                 | __system____getftab
1df0c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1df10     34 12 06 CD |  if_b	qmul	arg01, #52
1df14     00 FA 05 36 |  if_ae	mov	result1, #0
1df18     02 00 00 CF 
1df1c     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1df20     18 FA 61 CD |  if_b	getqx	result1
1df24     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1df28     02 00 00 CF 
1df2c     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1df30                 | __system____getftab_ret
1df30     2D 00 64 FD | 	ret
1df34                 | 
1df34                 | __system__strncpy
1df34     09 01 02 F6 | 	mov	_var01, arg01
1df38                 | LR__2960
1df38     01 16 86 F1 | 	sub	arg03, #1
1df3c     00 16 56 F2 | 	cmps	arg03, #0 wc
1df40     18 00 90 CD |  if_b	jmp	#LR__2961
1df44     0A FB C1 FA | 	rdbyte	result1, arg02
1df48     00 FB 41 FC | 	wrbyte	result1, _var01
1df4c     01 14 06 F1 | 	add	arg02, #1
1df50     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1df54     01 00 06 F1 | 	add	_var01, #1
1df58     DC FF 9F 5D |  if_ne	jmp	#LR__2960
1df5c                 | LR__2961
1df5c     97 0C 48 FB | 	callpa	#(@LR__2963-@LR__2962)>>2,fcache_load_ptr_
1df60                 | LR__2962
1df60     01 16 86 F1 | 	sub	arg03, #1
1df64     00 16 56 F2 | 	cmps	arg03, #0 wc
1df68     00 03 02 36 |  if_ae	mov	_var02, _var01
1df6c     01 00 06 31 |  if_ae	add	_var01, #1
1df70     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1df74     E8 FF 9F 3D |  if_ae	jmp	#LR__2962
1df78                 | LR__2963
1df78     09 FB 01 F6 | 	mov	result1, arg01
1df7c                 | __system__strncpy_ret
1df7c     2D 00 64 FD | 	ret
1df80                 | 
1df80                 | __system__strncat
1df80     00 14 4E F2 | 	cmps	arg02, #0 wz
1df84     50 00 90 AD |  if_e	jmp	#LR__2974
1df88     01 16 16 F2 | 	cmp	arg03, #1 wc
1df8c     48 00 90 CD |  if_b	jmp	#LR__2974
1df90     09 01 02 F6 | 	mov	_var01, arg01
1df94     97 1E 48 FB | 	callpa	#(@LR__2972-@LR__2970)>>2,fcache_load_ptr_
1df98                 | LR__2970
1df98     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1df9c     01 00 06 51 |  if_ne	add	_var01, #1
1dfa0     F4 FF 9F 5D |  if_ne	jmp	#LR__2970
1dfa4     0B 03 02 F6 | 	mov	_var02, arg03
1dfa8                 | LR__2971
1dfa8     0A 05 C2 FA | 	rdbyte	_var03, arg02
1dfac     02 07 02 F6 | 	mov	_var04, _var03
1dfb0     07 06 4E F7 | 	zerox	_var04, #7 wz
1dfb4     01 14 06 F1 | 	add	arg02, #1
1dfb8     18 00 90 AD |  if_e	jmp	#LR__2973
1dfbc     01 02 86 F1 | 	sub	_var02, #1
1dfc0     00 02 56 F2 | 	cmps	_var02, #0 wc
1dfc4     00 07 02 36 |  if_ae	mov	_var04, _var01
1dfc8     01 00 06 31 |  if_ae	add	_var01, #1
1dfcc     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1dfd0     D4 FF 9F 3D |  if_ae	jmp	#LR__2971
1dfd4                 | LR__2972
1dfd4                 | LR__2973
1dfd4     00 01 48 FC | 	wrbyte	#0, _var01
1dfd8                 | LR__2974
1dfd8     09 FB 01 F6 | 	mov	result1, arg01
1dfdc                 | __system__strncat_ret
1dfdc     2D 00 64 FD | 	ret
1dfe0                 | 
1dfe0                 | __system__strncmp
1dfe0     09 01 0A F6 | 	mov	_var01, arg01 wz
1dfe4     14 00 90 5D |  if_ne	jmp	#LR__2980
1dfe8     00 14 0E F2 | 	cmp	arg02, #0 wz
1dfec     01 02 66 56 |  if_ne	neg	_var02, #1
1dff0     00 02 06 A6 |  if_e	mov	_var02, #0
1dff4     01 FB 01 F6 | 	mov	result1, _var02
1dff8     74 00 90 FD | 	jmp	#__system__strncmp_ret
1dffc                 | LR__2980
1dffc     00 14 0E F2 | 	cmp	arg02, #0 wz
1e000     01 FA 05 A6 |  if_e	mov	result1, #1
1e004     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e008     0B 05 02 F6 | 	mov	_var03, arg03
1e00c     97 16 48 FB | 	callpa	#(@LR__2982-@LR__2981)>>2,fcache_load_ptr_
1e010                 | LR__2981
1e010     00 07 C2 FA | 	rdbyte	_var04, _var01
1e014     0A 09 02 F6 | 	mov	_var05, arg02
1e018     04 0B C2 FA | 	rdbyte	_var06, _var05
1e01c     01 04 86 F1 | 	sub	_var03, #1
1e020     00 04 56 F2 | 	cmps	_var03, #0 wc
1e024     01 00 06 F1 | 	add	_var01, #1
1e028     01 14 06 F1 | 	add	arg02, #1
1e02c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1e030     08 00 90 2D |  if_nc_and_z	jmp	#LR__2983
1e034     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1e038     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2981
1e03c                 | LR__2982
1e03c                 | LR__2983
1e03c     00 04 56 F2 | 	cmps	_var03, #0 wc
1e040     00 FA 05 C6 |  if_b	mov	result1, #0
1e044     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1e048     05 07 0A F2 | 	cmp	_var04, _var06 wz
1e04c     00 FA 05 A6 |  if_e	mov	result1, #0
1e050     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e054     00 06 0E F2 | 	cmp	_var04, #0 wz
1e058     01 FA 65 A6 |  if_e	neg	result1, #1
1e05c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e060     00 0A 0E F2 | 	cmp	_var06, #0 wz
1e064     01 FA 05 A6 |  if_e	mov	result1, #1
1e068     03 FB 01 56 |  if_ne	mov	result1, _var04
1e06c     05 FB 81 51 |  if_ne	sub	result1, _var06
1e070                 | __system__strncmp_ret
1e070     2D 00 64 FD | 	ret
1e074                 | 
1e074                 | __system____root_opendir
1e074     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1e078     04 12 06 F1 | 	add	arg01, #4
1e07c     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1e080     00 FA 05 F6 | 	mov	result1, #0
1e084     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1e088                 | __system____root_opendir_ret
1e088     2D 00 64 FD | 	ret
1e08c                 | 
1e08c                 | __system____root_readdir
1e08c     03 4A 05 F6 | 	mov	COUNT_, #3
1e090     A8 00 A0 FD | 	call	#pushregs_
1e094     09 1F 02 F6 | 	mov	local01, arg01
1e098     0A 21 02 F6 | 	mov	local02, arg02
1e09c     04 1E 06 F1 | 	add	local01, #4
1e0a0     0F 23 02 FB | 	rdlong	local03, local01
1e0a4     04 1E 86 F1 | 	sub	local01, #4
1e0a8                 | LR__2990
1e0a8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1e0ac     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1e0b0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1e0b4     01 FA 65 A6 |  if_e	neg	result1, #1
1e0b8     48 00 90 AD |  if_e	jmp	#LR__2991
1e0bc     11 17 0A FB | 	rdlong	arg03, local03 wz
1e0c0     04 22 06 A1 |  if_e	add	local03, #4
1e0c4     E0 FF 9F AD |  if_e	jmp	#LR__2990
1e0c8     11 15 02 FB | 	rdlong	arg02, local03
1e0cc     01 14 06 F1 | 	add	arg02, #1
1e0d0     10 13 02 F6 | 	mov	arg01, local02
1e0d4     40 16 06 F6 | 	mov	arg03, #64
1e0d8     58 FE BF FD | 	call	#__system__strncpy
1e0dc     50 20 06 F1 | 	add	local02, #80
1e0e0     10 03 48 FC | 	wrbyte	#1, local02
1e0e4     08 20 86 F1 | 	sub	local02, #8
1e0e8     10 01 68 FC | 	wrlong	#0, local02
1e0ec     04 20 06 F1 | 	add	local02, #4
1e0f0     10 01 68 FC | 	wrlong	#0, local02
1e0f4     04 22 06 F1 | 	add	local03, #4
1e0f8     04 1E 06 F1 | 	add	local01, #4
1e0fc     0F 23 62 FC | 	wrlong	local03, local01
1e100     00 FA 05 F6 | 	mov	result1, #0
1e104                 | LR__2991
1e104     A7 F0 03 F6 | 	mov	ptra, fp
1e108     B2 00 A0 FD | 	call	#popregs_
1e10c                 | __system____root_readdir_ret
1e10c     2D 00 64 FD | 	ret
1e110                 | 
1e110                 | __system____root_closedir
1e110     00 FA 05 F6 | 	mov	result1, #0
1e114                 | __system____root_closedir_ret
1e114     2D 00 64 FD | 	ret
1e118                 | 
1e118                 | __system____root_stat
1e118     0A 01 02 F6 | 	mov	_var01, arg02
1e11c     00 13 02 F6 | 	mov	arg01, _var01
1e120     00 14 06 F6 | 	mov	arg02, #0
1e124     30 16 06 F6 | 	mov	arg03, #48
1e128     98 00 A0 FD | 	call	#\builtin_bytefill_
1e12c     08 00 06 F1 | 	add	_var01, #8
1e130     08 00 80 FF 
1e134     00 FF 6B FC | 	wrlong	##4607, _var01
1e138     00 FA 05 F6 | 	mov	result1, #0
1e13c                 | __system____root_stat_ret
1e13c     2D 00 64 FD | 	ret
1e140                 | 
1e140                 | __system___normalizeName
1e140     00 00 06 F6 | 	mov	_var01, #0
1e144     09 03 02 F6 | 	mov	_var02, arg01
1e148     01 05 02 F6 | 	mov	_var03, _var02
1e14c                 | LR__3000
1e14c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e150     5C 01 90 AD |  if_e	jmp	#LR__3019
1e154     00 00 0E F2 | 	cmp	_var01, #0 wz
1e158     02 07 02 56 |  if_ne	mov	_var04, _var03
1e15c     01 04 06 51 |  if_ne	add	_var03, #1
1e160     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1e164     00 00 06 56 |  if_ne	mov	_var01, #0
1e168     01 07 C2 FA | 	rdbyte	_var04, _var02
1e16c     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e170     D8 00 90 5D |  if_ne	jmp	#LR__3012
1e174     01 02 06 F1 | 	add	_var02, #1
1e178     01 07 C2 FA | 	rdbyte	_var04, _var02
1e17c     01 02 86 F1 | 	sub	_var02, #1
1e180     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e184     18 00 90 AD |  if_e	jmp	#LR__3001
1e188     01 02 06 F1 | 	add	_var02, #1
1e18c     01 09 C2 FA | 	rdbyte	_var05, _var02
1e190     01 02 86 F1 | 	sub	_var02, #1
1e194     04 0B 02 F6 | 	mov	_var06, _var05
1e198     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e19c     10 00 90 5D |  if_ne	jmp	#LR__3002
1e1a0                 | LR__3001
1e1a0     01 0D 02 F6 | 	mov	_var07, _var02
1e1a4     01 0C 06 F1 | 	add	_var07, #1
1e1a8     06 03 02 F6 | 	mov	_var02, _var07
1e1ac     E0 00 90 FD | 	jmp	#LR__3016
1e1b0                 | LR__3002
1e1b0     01 02 06 F1 | 	add	_var02, #1
1e1b4     01 0D C2 FA | 	rdbyte	_var07, _var02
1e1b8     01 02 86 F1 | 	sub	_var02, #1
1e1bc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e1c0     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e1c4     84 00 90 5D |  if_ne	jmp	#LR__3011
1e1c8     02 02 06 F1 | 	add	_var02, #2
1e1cc     01 0D C2 FA | 	rdbyte	_var07, _var02
1e1d0     02 02 86 F1 | 	sub	_var02, #2
1e1d4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e1d8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e1dc     18 00 90 AD |  if_e	jmp	#LR__3003
1e1e0     02 02 06 F1 | 	add	_var02, #2
1e1e4     01 09 C2 FA | 	rdbyte	_var05, _var02
1e1e8     02 02 86 F1 | 	sub	_var02, #2
1e1ec     04 0B 02 F6 | 	mov	_var06, _var05
1e1f0     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e1f4     54 00 90 5D |  if_ne	jmp	#LR__3010
1e1f8                 | LR__3003
1e1f8     02 02 06 F1 | 	add	_var02, #2
1e1fc     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1e200     40 00 90 ED |  if_be	jmp	#LR__3009
1e204     02 0F 02 F6 | 	mov	_var08, _var03
1e208     01 0E 86 F1 | 	sub	_var08, #1
1e20c                 | LR__3004
1e20c     07 07 C2 FA | 	rdbyte	_var04, _var08
1e210     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e214     0C 00 90 5D |  if_ne	jmp	#LR__3005
1e218     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e21c     01 0E 86 11 |  if_a	sub	_var08, #1
1e220     E8 FF 9F 1D |  if_a	jmp	#LR__3004
1e224                 | LR__3005
1e224     97 0C 48 FB | 	callpa	#(@LR__3007-@LR__3006)>>2,fcache_load_ptr_
1e228                 | LR__3006
1e228     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e22c     10 00 90 ED |  if_be	jmp	#LR__3008
1e230     07 07 C2 FA | 	rdbyte	_var04, _var08
1e234     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e238     01 0E 86 51 |  if_ne	sub	_var08, #1
1e23c     E8 FF 9F 5D |  if_ne	jmp	#LR__3006
1e240                 | LR__3007
1e240                 | LR__3008
1e240     07 05 02 F6 | 	mov	_var03, _var08
1e244                 | LR__3009
1e244     01 00 06 F6 | 	mov	_var01, #1
1e248     44 00 90 FD | 	jmp	#LR__3016
1e24c                 | LR__3010
1e24c                 | LR__3011
1e24c                 | LR__3012
1e24c     97 18 48 FB | 	callpa	#(@LR__3014-@LR__3013)>>2,fcache_load_ptr_
1e250                 | LR__3013
1e250     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e254     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1e258     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1e25c     20 00 90 AD |  if_e	jmp	#LR__3015
1e260     01 0B 02 F6 | 	mov	_var06, _var02
1e264     01 09 02 F6 | 	mov	_var05, _var02
1e268     01 08 06 F1 | 	add	_var05, #1
1e26c     05 11 C2 FA | 	rdbyte	_var09, _var06
1e270     04 03 02 F6 | 	mov	_var02, _var05
1e274     02 11 42 FC | 	wrbyte	_var09, _var03
1e278     01 04 06 F1 | 	add	_var03, #1
1e27c     D0 FF 9F FD | 	jmp	#LR__3013
1e280                 | LR__3014
1e280                 | LR__3015
1e280     01 07 C2 FA | 	rdbyte	_var04, _var02
1e284     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e288     C0 FE 9F 5D |  if_ne	jmp	#LR__3000
1e28c     01 00 06 F6 | 	mov	_var01, #1
1e290                 | LR__3016
1e290     97 0C 48 FB | 	callpa	#(@LR__3018-@LR__3017)>>2,fcache_load_ptr_
1e294                 | LR__3017
1e294     01 07 C2 FA | 	rdbyte	_var04, _var02
1e298     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e29c     01 0D 02 A6 |  if_e	mov	_var07, _var02
1e2a0     01 0C 06 A1 |  if_e	add	_var07, #1
1e2a4     06 03 02 A6 |  if_e	mov	_var02, _var07
1e2a8     E8 FF 9F AD |  if_e	jmp	#LR__3017
1e2ac                 | LR__3018
1e2ac     9C FE 9F FD | 	jmp	#LR__3000
1e2b0                 | LR__3019
1e2b0     02 01 48 FC | 	wrbyte	#0, _var03
1e2b4                 | __system___normalizeName_ret
1e2b4     2D 00 64 FD | 	ret
1e2b8                 | 
1e2b8                 | __system___strrev
1e2b8     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1e2bc     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1e2c0     09 03 02 F6 | 	mov	_var02, arg01
1e2c4     97 1A 48 FB | 	callpa	#(@LR__3022-@LR__3020)>>2,fcache_load_ptr_
1e2c8                 | LR__3020
1e2c8     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1e2cc     01 02 06 51 |  if_ne	add	_var02, #1
1e2d0     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
1e2d4     01 02 86 F1 | 	sub	_var02, #1
1e2d8                 | LR__3021
1e2d8     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1e2dc     1C 00 90 ED |  if_be	jmp	#LR__3023
1e2e0     09 01 C2 FA | 	rdbyte	_var01, arg01
1e2e4     01 05 C2 FA | 	rdbyte	_var03, _var02
1e2e8     09 05 42 FC | 	wrbyte	_var03, arg01
1e2ec     01 01 42 FC | 	wrbyte	_var01, _var02
1e2f0     01 12 06 F1 | 	add	arg01, #1
1e2f4     01 02 86 F1 | 	sub	_var02, #1
1e2f8     DC FF 9F FD | 	jmp	#LR__3021
1e2fc                 | LR__3022
1e2fc                 | LR__3023
1e2fc                 | __system___strrev_ret
1e2fc     2D 00 64 FD | 	ret
1e300                 | 
1e300                 | __system___fmtpad
1e300     06 4A 05 F6 | 	mov	COUNT_, #6
1e304     A8 00 A0 FD | 	call	#pushregs_
1e308     09 1F 02 F6 | 	mov	local01, arg01
1e30c     0A 21 02 F6 | 	mov	local02, arg02
1e310     0B 23 02 F6 | 	mov	local03, arg03
1e314     10 13 EA F8 | 	getbyte	arg01, local02, #1
1e318     16 20 46 F0 | 	shr	local02, #22
1e31c     03 20 0E F5 | 	and	local02, #3 wz
1e320     00 24 06 F6 | 	mov	local04, #0
1e324     01 20 06 A6 |  if_e	mov	local02, #1
1e328     0C 21 CA F7 | 	test	local02, arg04 wz
1e32c     00 FA 05 A6 |  if_e	mov	result1, #0
1e330     88 00 90 AD |  if_e	jmp	#LR__3033
1e334     09 23 C2 F2 | 	subr	local03, arg01
1e338     01 22 56 F2 | 	cmps	local03, #1 wc
1e33c     00 FA 05 C6 |  if_b	mov	result1, #0
1e340     78 00 90 CD |  if_b	jmp	#LR__3033
1e344     03 20 0E F2 | 	cmp	local02, #3 wz
1e348     18 00 90 5D |  if_ne	jmp	#LR__3030
1e34c     01 18 0E F2 | 	cmp	arg04, #1 wz
1e350     6E 20 62 FD | 	wrz	local02
1e354     10 23 02 F1 | 	add	local03, local02
1e358     11 23 52 F6 | 	abs	local03, local03 wc
1e35c     01 22 46 F0 | 	shr	local03, #1
1e360     11 23 82 F6 | 	negc	local03, local03
1e364                 | LR__3030
1e364     01 22 56 F2 | 	cmps	local03, #1 wc
1e368     4C 00 90 CD |  if_b	jmp	#LR__3032
1e36c     11 27 02 F6 | 	mov	local05, local03
1e370                 | LR__3031
1e370     0F 21 02 F6 | 	mov	local02, local01
1e374     0F 29 02 F6 | 	mov	local06, local01
1e378     13 20 46 F7 | 	zerox	local02, #19
1e37c     14 28 46 F0 | 	shr	local06, #20
1e380     02 28 66 F0 | 	shl	local06, #2
1e384     ED 28 02 F1 | 	add	local06, __methods__
1e388     14 29 02 FB | 	rdlong	local06, local06
1e38c     20 12 06 F6 | 	mov	arg01, #32
1e390     F2 22 02 F6 | 	mov	local03, objptr
1e394     10 E5 01 F6 | 	mov	objptr, local02
1e398     2D 28 62 FD | 	call	local06
1e39c     11 E5 01 F6 | 	mov	objptr, local03
1e3a0     FD 28 02 F6 | 	mov	local06, result1
1e3a4     00 28 56 F2 | 	cmps	local06, #0 wc
1e3a8     14 FB 01 C6 |  if_b	mov	result1, local06
1e3ac     0C 00 90 CD |  if_b	jmp	#LR__3033
1e3b0     14 25 02 F1 | 	add	local04, local06
1e3b4     EE 27 6E FB | 	djnz	local05, #LR__3031
1e3b8                 | LR__3032
1e3b8     12 FB 01 F6 | 	mov	result1, local04
1e3bc                 | LR__3033
1e3bc     A7 F0 03 F6 | 	mov	ptra, fp
1e3c0     B2 00 A0 FD | 	call	#popregs_
1e3c4                 | __system___fmtpad_ret
1e3c4     2D 00 64 FD | 	ret
1e3c8                 | 
1e3c8                 | __system___uitoa
1e3c8     04 4A 05 F6 | 	mov	COUNT_, #4
1e3cc     A8 00 A0 FD | 	call	#pushregs_
1e3d0     09 1F 02 F6 | 	mov	local01, arg01
1e3d4     00 1A 4E F2 | 	cmps	arg05, #0 wz
1e3d8     0F 1B 02 F6 | 	mov	arg05, local01
1e3dc     00 20 06 F6 | 	mov	local02, #0
1e3e0     37 22 06 56 |  if_ne	mov	local03, #55
1e3e4     57 22 06 A6 |  if_e	mov	local03, #87
1e3e8                 | LR__3040
1e3e8     0B 15 12 FD | 	qdiv	arg02, arg03
1e3ec     19 24 62 FD | 	getqy	local04
1e3f0     0B 15 12 FD | 	qdiv	arg02, arg03
1e3f4     0A 24 16 F2 | 	cmp	local04, #10 wc
1e3f8     30 24 06 C1 |  if_b	add	local04, #48
1e3fc     11 25 02 31 |  if_ae	add	local04, local03
1e400     0D 25 42 FC | 	wrbyte	local04, arg05
1e404     01 1A 06 F1 | 	add	arg05, #1
1e408     01 20 06 F1 | 	add	local02, #1
1e40c     18 14 62 FD | 	getqx	arg02
1e410     00 14 0E F2 | 	cmp	arg02, #0 wz
1e414     D0 FF 9F 5D |  if_ne	jmp	#LR__3040
1e418     0C 21 12 F2 | 	cmp	local02, arg04 wc
1e41c     C8 FF 9F CD |  if_b	jmp	#LR__3040
1e420     0D 01 48 FC | 	wrbyte	#0, arg05
1e424     0F 13 02 F6 | 	mov	arg01, local01
1e428     8C FE BF FD | 	call	#__system___strrev
1e42c     10 FB 01 F6 | 	mov	result1, local02
1e430     A7 F0 03 F6 | 	mov	ptra, fp
1e434     B2 00 A0 FD | 	call	#popregs_
1e438                 | __system___uitoa_ret
1e438     2D 00 64 FD | 	ret
1e43c                 | 
1e43c                 | __system__disassemble_0381
1e43c     10 4A 05 F6 | 	mov	COUNT_, #16
1e440     A8 00 A0 FD | 	call	#pushregs_
1e444     09 1F 02 F6 | 	mov	local01, arg01
1e448     0A 21 02 F6 | 	mov	local02, arg02
1e44c     0B 23 02 F6 | 	mov	local03, arg03
1e450     0C 25 02 F6 | 	mov	local04, arg04
1e454     0D 27 02 F6 | 	mov	local05, arg05
1e458     13 13 52 F6 | 	abs	arg01, local05 wc
1e45c     1F 28 C6 C9 |  if_b	decod	local06, #31
1e460     00 28 06 36 |  if_ae	mov	local06, #0
1e464     64 D0 BF FD | 	call	#__system___float_fromuns
1e468     14 FB 61 F5 | 	xor	result1, local06
1e46c     FD 2A 02 F6 | 	mov	local07, result1
1e470     00 2C 06 F6 | 	mov	local08, #0
1e474     0F 13 02 F6 | 	mov	arg01, local01
1e478     00 14 06 F6 | 	mov	arg02, #0
1e47c     01 16 06 F6 | 	mov	arg03, #1
1e480     80 D8 BF FD | 	call	#__system___float_cmp
1e484     00 FA 0D F2 | 	cmp	result1, #0 wz
1e488     00 2E 06 A6 |  if_e	mov	local09, #0
1e48c     10 01 68 AC |  if_e	wrlong	#0, local02
1e490     11 2F 62 AC |  if_e	wrlong	local09, local03
1e494     8C 01 90 AD |  if_e	jmp	#LR__3062
1e498     0F 13 02 F6 | 	mov	arg01, local01
1e49c     30 DD BF FD | 	call	#__system____builtin_ilogb
1e4a0     FD 30 02 F6 | 	mov	local10, result1
1e4a4     0A 26 0E F2 | 	cmp	local05, #10 wz
1e4a8     24 00 90 5D |  if_ne	jmp	#LR__3050
1e4ac     18 2F 02 F6 | 	mov	local09, local10
1e4b0     01 2E 66 F0 | 	shl	local09, #1
1e4b4     18 2F 02 F1 | 	add	local09, local10
1e4b8     17 31 52 F6 | 	abs	local10, local09 wc
1e4bc     0A 30 16 FD | 	qdiv	local10, #10
1e4c0     09 32 06 F6 | 	mov	local11, #9
1e4c4     18 30 62 FD | 	getqx	local10
1e4c8     18 31 82 F6 | 	negc	local10, local10
1e4cc     04 00 90 FD | 	jmp	#LR__3051
1e4d0                 | LR__3050
1e4d0     18 32 06 F6 | 	mov	local11, #24
1e4d4                 | LR__3051
1e4d4                 | LR__3052
1e4d4     08 2C 56 F2 | 	cmps	local08, #8 wc
1e4d8     01 2C 06 F1 | 	add	local08, #1
1e4dc     60 00 90 3D |  if_ae	jmp	#LR__3053
1e4e0     00 C0 1F FF 
1e4e4     00 12 06 F6 | 	mov	arg01, ##1065353216
1e4e8     15 15 02 F6 | 	mov	arg02, local07
1e4ec     18 17 02 F6 | 	mov	arg03, local10
1e4f0     88 E3 BF FD | 	call	#__system___float_pow_n
1e4f4     FD 14 02 F6 | 	mov	arg02, result1
1e4f8     0F 13 02 F6 | 	mov	arg01, local01
1e4fc     D4 D5 BF FD | 	call	#__system___float_div
1e500     FD 34 02 F6 | 	mov	local12, result1
1e504     1A 13 02 F6 | 	mov	arg01, local12
1e508     00 C0 1F FF 
1e50c     00 14 06 F6 | 	mov	arg02, ##1065353216
1e510     01 16 06 F6 | 	mov	arg03, #1
1e514     EC D7 BF FD | 	call	#__system___float_cmp
1e518     00 FA 55 F2 | 	cmps	result1, #0 wc
1e51c     01 30 86 C1 |  if_b	sub	local10, #1
1e520     B0 FF 9F CD |  if_b	jmp	#LR__3052
1e524     15 15 02 F6 | 	mov	arg02, local07
1e528     1A 13 02 F6 | 	mov	arg01, local12
1e52c     01 16 66 F6 | 	neg	arg03, #1
1e530     D0 D7 BF FD | 	call	#__system___float_cmp
1e534     00 FA 55 F2 | 	cmps	result1, #0 wc
1e538     01 30 06 31 |  if_ae	add	local10, #1
1e53c     94 FF 9F 3D |  if_ae	jmp	#LR__3052
1e540                 | LR__3053
1e540     1A 13 02 F6 | 	mov	arg01, local12
1e544     88 DC BF FD | 	call	#__system____builtin_ilogb
1e548     FD 36 02 F6 | 	mov	local13, result1
1e54c     1A 39 02 F6 | 	mov	local14, local12
1e550     17 39 06 F4 | 	bitl	local14, #279
1e554     17 38 26 F4 | 	bith	local14, #23
1e558     1B 39 62 F0 | 	shl	local14, local13
1e55c     02 26 0E F2 | 	cmp	local05, #2 wz
1e560     02 24 66 A0 |  if_e	shl	local04, #2
1e564     00 3A 06 F6 | 	mov	local15, #0
1e568     00 24 56 F2 | 	cmps	local04, #0 wc
1e56c     10 00 90 3D |  if_ae	jmp	#LR__3054
1e570     18 25 C2 F2 | 	subr	local04, local10
1e574     00 24 56 F2 | 	cmps	local04, #0 wc
1e578     A0 00 90 CD |  if_b	jmp	#LR__3061
1e57c     04 00 90 FD | 	jmp	#LR__3055
1e580                 | LR__3054
1e580     01 24 06 F1 | 	add	local04, #1
1e584                 | LR__3055
1e584     19 25 7A F3 | 	fles	local04, local11 wcz
1e588     01 3C 06 F6 | 	mov	local16, #1
1e58c     97 22 48 FB | 	callpa	#(@LR__3057-@LR__3056)>>2,fcache_load_ptr_
1e590                 | LR__3056
1e590     00 40 00 FF 
1e594     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1e598     38 00 90 3D |  if_ae	jmp	#LR__3058
1e59c     01 24 56 F2 | 	cmps	local04, #1 wc
1e5a0     01 24 86 F1 | 	sub	local04, #1
1e5a4     2C 00 90 CD |  if_b	jmp	#LR__3058
1e5a8     13 3B 02 FD | 	qmul	local15, local05
1e5ac     1C 37 02 F6 | 	mov	local13, local14
1e5b0     17 36 46 F0 | 	shr	local13, #23
1e5b4     17 39 06 F4 | 	bitl	local14, #279
1e5b8     18 3A 62 FD | 	getqx	local15
1e5bc     13 3D 02 FD | 	qmul	local16, local05
1e5c0     18 3C 62 FD | 	getqx	local16
1e5c4     13 39 02 FD | 	qmul	local14, local05
1e5c8     1B 3B 02 F1 | 	add	local15, local13
1e5cc     18 38 62 FD | 	getqx	local14
1e5d0     BC FF 9F FD | 	jmp	#LR__3056
1e5d4                 | LR__3057
1e5d4                 | LR__3058
1e5d4     13 2F 02 F6 | 	mov	local09, local05
1e5d8     17 2E 66 F0 | 	shl	local09, #23
1e5dc     17 37 52 F6 | 	abs	local13, local09 wc
1e5e0     01 36 46 F0 | 	shr	local13, #1
1e5e4     1B 37 82 F6 | 	negc	local13, local13
1e5e8     1B 39 1A F2 | 	cmp	local14, local13 wcz
1e5ec     20 00 90 1D |  if_a	jmp	#LR__3059
1e5f0     17 26 66 F0 | 	shl	local05, #23
1e5f4     13 37 52 F6 | 	abs	local13, local05 wc
1e5f8     01 36 46 F0 | 	shr	local13, #1
1e5fc     1B 37 82 F6 | 	negc	local13, local13
1e600     1B 39 0A F2 | 	cmp	local14, local13 wz
1e604     14 00 90 5D |  if_ne	jmp	#LR__3060
1e608     01 3A CE F7 | 	test	local15, #1 wz
1e60c     0C 00 90 AD |  if_e	jmp	#LR__3060
1e610                 | LR__3059
1e610     01 3A 06 F1 | 	add	local15, #1
1e614     1E 3B 0A F2 | 	cmp	local15, local16 wz
1e618     01 30 06 A1 |  if_e	add	local10, #1
1e61c                 | LR__3060
1e61c                 | LR__3061
1e61c     10 3B 62 FC | 	wrlong	local15, local02
1e620     11 31 62 FC | 	wrlong	local10, local03
1e624                 | LR__3062
1e624     A7 F0 03 F6 | 	mov	ptra, fp
1e628     B2 00 A0 FD | 	call	#popregs_
1e62c                 | __system__disassemble_0381_ret
1e62c     2D 00 64 FD | 	ret
1e630                 | 
1e630                 | __system__emitsign_0383
1e630     00 FA 05 F6 | 	mov	result1, #0
1e634     00 14 0E F2 | 	cmp	arg02, #0 wz
1e638     09 01 02 56 |  if_ne	mov	_var01, arg01
1e63c     01 12 06 51 |  if_ne	add	arg01, #1
1e640     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1e644     01 FA 05 56 |  if_ne	mov	result1, #1
1e648     00 16 0E F2 | 	cmp	arg03, #0 wz
1e64c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1e650     01 12 06 51 |  if_ne	add	arg01, #1
1e654     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1e658     02 FA 05 51 |  if_ne	add	result1, #2
1e65c                 | __system__emitsign_0383_ret
1e65c     2D 00 64 FD | 	ret
1e660                 | 
1e660                 | __system___gettxfunc
1e660     01 4A 05 F6 | 	mov	COUNT_, #1
1e664     A8 00 A0 FD | 	call	#pushregs_
1e668     A0 F8 BF FD | 	call	#__system____getftab
1e66c     FD 1E 0A F6 | 	mov	local01, result1 wz
1e670     10 00 90 AD |  if_e	jmp	#LR__3070
1e674     08 1E 06 F1 | 	add	local01, #8
1e678     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e67c     08 1E 86 F1 | 	sub	local01, #8
1e680     08 00 90 5D |  if_ne	jmp	#LR__3071
1e684                 | LR__3070
1e684     00 FA 05 F6 | 	mov	result1, #0
1e688     0C 00 90 FD | 	jmp	#LR__3072
1e68c                 | LR__3071
1e68c     00 28 03 FF 
1e690     00 1E 46 F5 | 	or	local01, ##105906176
1e694     0F FB 01 F6 | 	mov	result1, local01
1e698                 | LR__3072
1e698     A7 F0 03 F6 | 	mov	ptra, fp
1e69c     B2 00 A0 FD | 	call	#popregs_
1e6a0                 | __system___gettxfunc_ret
1e6a0     2D 00 64 FD | 	ret
1e6a4                 | 
1e6a4                 | __system___getrxfunc
1e6a4     01 4A 05 F6 | 	mov	COUNT_, #1
1e6a8     A8 00 A0 FD | 	call	#pushregs_
1e6ac     5C F8 BF FD | 	call	#__system____getftab
1e6b0     FD 1E 0A F6 | 	mov	local01, result1 wz
1e6b4     10 00 90 AD |  if_e	jmp	#LR__3080
1e6b8     08 1E 06 F1 | 	add	local01, #8
1e6bc     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e6c0     08 1E 86 F1 | 	sub	local01, #8
1e6c4     08 00 90 5D |  if_ne	jmp	#LR__3081
1e6c8                 | LR__3080
1e6c8     00 FA 05 F6 | 	mov	result1, #0
1e6cc     0C 00 90 FD | 	jmp	#LR__3082
1e6d0                 | LR__3081
1e6d0     00 30 03 FF 
1e6d4     00 1E 46 F5 | 	or	local01, ##106954752
1e6d8     0F FB 01 F6 | 	mov	result1, local01
1e6dc                 | LR__3082
1e6dc     A7 F0 03 F6 | 	mov	ptra, fp
1e6e0     B2 00 A0 FD | 	call	#popregs_
1e6e4                 | __system___getrxfunc_ret
1e6e4     2D 00 64 FD | 	ret
1e6e8                 | 
1e6e8                 | __system___getiolock_0423
1e6e8     01 4A 05 F6 | 	mov	COUNT_, #1
1e6ec     A8 00 A0 FD | 	call	#pushregs_
1e6f0     18 F8 BF FD | 	call	#__system____getftab
1e6f4     FD 1E 0A F6 | 	mov	local01, result1 wz
1e6f8     10 00 90 AD |  if_e	jmp	#LR__3090
1e6fc     08 1E 06 F1 | 	add	local01, #8
1e700     0F FB 09 FB | 	rdlong	result1, local01 wz
1e704     08 1E 86 F1 | 	sub	local01, #8
1e708     18 00 90 5D |  if_ne	jmp	#LR__3091
1e70c                 | LR__3090
1e70c     01 00 00 FF 
1e710     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1e714     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1e718     01 00 00 FF 
1e71c     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1e720     08 00 90 FD | 	jmp	#LR__3092
1e724                 | LR__3091
1e724     0C 1E 06 F1 | 	add	local01, #12
1e728     0F FB 01 F6 | 	mov	result1, local01
1e72c                 | LR__3092
1e72c     A7 F0 03 F6 | 	mov	ptra, fp
1e730     B2 00 A0 FD | 	call	#popregs_
1e734                 | __system___getiolock_0423_ret
1e734     2D 00 64 FD | 	ret
1e738                 | 
1e738                 | __system____ScanForChar
1e738     09 01 02 F6 | 	mov	_var01, arg01
1e73c     09 03 02 F6 | 	mov	_var02, arg01
1e740     97 06 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
1e744                 | LR__3100
1e744     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1e748     01 02 06 51 |  if_ne	add	_var02, #1
1e74c     F4 FF 9F 5D |  if_ne	jmp	#LR__3100
1e750                 | LR__3101
1e750     09 03 82 F1 | 	sub	_var02, arg01
1e754     01 FB 01 F6 | 	mov	result1, _var02
1e758     FD 12 0A F6 | 	mov	arg01, result1 wz
1e75c     00 FA 05 A6 |  if_e	mov	result1, #0
1e760     B8 00 90 AD |  if_e	jmp	#LR__3108
1e764     0A 05 02 F6 | 	mov	_var03, arg02
1e768     07 04 4E F7 | 	zerox	_var03, #7 wz
1e76c     00 FA 05 A6 |  if_e	mov	result1, #0
1e770     A8 00 90 AD |  if_e	jmp	#LR__3108
1e774     01 16 16 F2 | 	cmp	arg03, #1 wc
1e778     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1e77c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1e780     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1e784     94 00 90 4D |  if_c_and_nz	jmp	#LR__3108
1e788     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1e78c     10 00 90 ED |  if_be	jmp	#LR__3102
1e790     00 18 0E F2 | 	cmp	arg04, #0 wz
1e794     00 FA 05 A6 |  if_e	mov	result1, #0
1e798     80 00 90 AD |  if_e	jmp	#LR__3108
1e79c     09 17 02 F6 | 	mov	arg03, arg01
1e7a0                 | LR__3102
1e7a0     01 16 86 F1 | 	sub	arg03, #1
1e7a4     00 18 0E F2 | 	cmp	arg04, #0 wz
1e7a8     38 00 90 5D |  if_ne	jmp	#LR__3104
1e7ac     0B 07 02 F6 | 	mov	_var04, arg03
1e7b0     09 09 02 F6 | 	mov	_var05, arg01
1e7b4                 | LR__3103
1e7b4     04 07 12 F2 | 	cmp	_var04, _var05 wc
1e7b8     5C 00 90 3D |  if_ae	jmp	#LR__3107
1e7bc     03 05 02 F6 | 	mov	_var03, _var04
1e7c0     00 05 02 F1 | 	add	_var03, _var01
1e7c4     02 05 C2 FA | 	rdbyte	_var03, _var03
1e7c8     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1e7cc     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1e7d0     01 06 06 A1 |  if_e	add	_var04, #1
1e7d4     03 FB 01 A6 |  if_e	mov	result1, _var04
1e7d8     40 00 90 AD |  if_e	jmp	#LR__3108
1e7dc     01 06 06 F1 | 	add	_var04, #1
1e7e0     D0 FF 9F FD | 	jmp	#LR__3103
1e7e4                 | LR__3104
1e7e4     0B 07 02 F6 | 	mov	_var04, arg03
1e7e8                 | LR__3105
1e7e8     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1e7ec     28 00 90 1D |  if_a	jmp	#LR__3106
1e7f0     03 09 02 F6 | 	mov	_var05, _var04
1e7f4     00 09 02 F1 | 	add	_var05, _var01
1e7f8     04 05 C2 FA | 	rdbyte	_var03, _var05
1e7fc     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1e800     04 05 0A F2 | 	cmp	_var03, _var05 wz
1e804     01 06 06 A1 |  if_e	add	_var04, #1
1e808     03 FB 01 A6 |  if_e	mov	result1, _var04
1e80c     0C 00 90 AD |  if_e	jmp	#LR__3108
1e810     01 06 86 F1 | 	sub	_var04, #1
1e814     D0 FF 9F FD | 	jmp	#LR__3105
1e818                 | LR__3106
1e818                 | LR__3107
1e818     00 FA 05 F6 | 	mov	result1, #0
1e81c                 | LR__3108
1e81c                 | __system____ScanForChar_ret
1e81c     2D 00 64 FD | 	ret
1e820                 | 
1e820                 | __system___basic_dir
1e820     05 4A 05 F6 | 	mov	COUNT_, #5
1e824     A8 00 A0 FD | 	call	#pushregs_
1e828     4C F0 07 F1 | 	add	ptra, #76
1e82c     04 4E 05 F1 | 	add	fp, #4
1e830     A7 12 62 FC | 	wrlong	arg01, fp
1e834     04 4E 05 F1 | 	add	fp, #4
1e838     A7 14 62 FC | 	wrlong	arg02, fp
1e83c     04 4E 85 F1 | 	sub	fp, #4
1e840     A7 14 0A FB | 	rdlong	arg02, fp wz
1e844     04 4E 85 F1 | 	sub	fp, #4
1e848     04 4E 05 51 |  if_ne	add	fp, #4
1e84c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e850     04 4E 85 51 |  if_ne	sub	fp, #4
1e854     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1e858     70 00 90 AD |  if_e	jmp	#LR__3110
1e85c     03 00 00 FF 
1e860     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e864     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e868     03 00 00 FF 
1e86c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e870     03 00 00 5F 
1e874     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1e878     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1e87c     03 00 00 5F 
1e880     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1e884     14 EA BF 5D |  if_ne	call	#__system__closedir
1e888     41 01 00 FF 
1e88c     5C 13 06 F6 | 	mov	arg01, ##@LR__4268
1e890     1C E9 BF FD | 	call	#__system__opendir
1e894     03 00 00 FF 
1e898     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e89c     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1e8a0     08 4E 05 F1 | 	add	fp, #8
1e8a4     A7 20 02 FB | 	rdlong	local02, fp
1e8a8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e8ac     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e8b0     04 4E 85 F1 | 	sub	fp, #4
1e8b4     A7 20 02 FB | 	rdlong	local02, fp
1e8b8     04 4E 85 F1 | 	sub	fp, #4
1e8bc     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e8c0     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e8c4     03 00 00 FF 
1e8c8     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e8cc                 | LR__3110
1e8cc     03 00 00 FF 
1e8d0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e8d4     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e8d8     03 00 00 FF 
1e8dc     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e8e0     41 01 00 AF 
1e8e4     5E FB 05 A6 |  if_e	mov	result1, ##@LR__4269
1e8e8     84 02 90 AD |  if_e	jmp	#LR__3123
1e8ec                 | LR__3111
1e8ec     03 00 00 FF 
1e8f0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e8f4     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e8f8     03 00 00 FF 
1e8fc     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e900     0C EA BF FD | 	call	#__system__readdir
1e904     0C 4E 05 F1 | 	add	fp, #12
1e908     A7 FA 61 FC | 	wrlong	result1, fp
1e90c     0C 4E 85 F1 | 	sub	fp, #12
1e910     00 FA 0D F2 | 	cmp	result1, #0 wz
1e914     38 00 90 5D |  if_ne	jmp	#LR__3112
1e918     03 00 00 FF 
1e91c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e920     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e924     03 00 00 FF 
1e928     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e92c     6C E9 BF FD | 	call	#__system__closedir
1e930     03 00 00 FF 
1e934     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e938     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1e93c     03 00 00 FF 
1e940     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e944     41 01 00 FF 
1e948     60 FB 05 F6 | 	mov	result1, ##@LR__4270
1e94c     20 02 90 FD | 	jmp	#LR__3123
1e950                 | LR__3112
1e950     0C 4E 05 F1 | 	add	fp, #12
1e954     A7 12 02 FB | 	rdlong	arg01, fp
1e958     0C 4E 85 F1 | 	sub	fp, #12
1e95c     03 00 00 FF 
1e960     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1e964     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1e968     03 00 00 FF 
1e96c     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e970     48 07 B0 FD | 	call	#__system___pat_match
1e974     00 FA 0D F2 | 	cmp	result1, #0 wz
1e978     70 FF 9F AD |  if_e	jmp	#LR__3111
1e97c     03 00 00 FF 
1e980     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e984     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e988     03 00 00 FF 
1e98c     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e990     78 01 90 AD |  if_e	jmp	#LR__3119
1e994     0C 4E 05 F1 | 	add	fp, #12
1e998     A7 12 02 FB | 	rdlong	arg01, fp
1e99c     04 4E 05 F1 | 	add	fp, #4
1e9a0     A7 14 02 F6 | 	mov	arg02, fp
1e9a4     10 4E 85 F1 | 	sub	fp, #16
1e9a8     68 F2 BF FD | 	call	#__system__stat
1e9ac     40 4E 05 F1 | 	add	fp, #64
1e9b0     A7 FA 61 FC | 	wrlong	result1, fp
1e9b4     40 4E 85 F1 | 	sub	fp, #64
1e9b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e9bc     41 01 00 5F 
1e9c0     62 FB 05 56 |  if_ne	mov	result1, ##@LR__4271
1e9c4     A8 01 90 5D |  if_ne	jmp	#LR__3123
1e9c8     18 4E 05 F1 | 	add	fp, #24
1e9cc     A7 20 02 FB | 	rdlong	local02, fp
1e9d0     78 00 00 FF 
1e9d4     00 20 06 F5 | 	and	local02, ##61440
1e9d8     2C 4E 05 F1 | 	add	fp, #44
1e9dc     A7 20 62 FC | 	wrlong	local02, fp
1e9e0     38 4E 85 F1 | 	sub	fp, #56
1e9e4     A7 20 02 FB | 	rdlong	local02, fp
1e9e8     0C 4E 85 F1 | 	sub	fp, #12
1e9ec     10 21 C2 FA | 	rdbyte	local02, local02
1e9f0     2E 20 0E F2 | 	cmp	local02, #46 wz
1e9f4     08 4E 05 A1 |  if_e	add	fp, #8
1e9f8     A7 04 68 AC |  if_e	wrlong	#2, fp
1e9fc     08 4E C5 F3 | 	sumz	fp, #8
1ea00     A7 00 68 5C |  if_ne	wrlong	#0, fp
1ea04     08 4E 85 51 |  if_ne	sub	fp, #8
1ea08     44 4E 05 F1 | 	add	fp, #68
1ea0c     A7 20 02 FB | 	rdlong	local02, fp
1ea10     44 4E 85 F1 | 	sub	fp, #68
1ea14     08 00 00 FF 
1ea18     00 20 0E F2 | 	cmp	local02, ##4096 wz
1ea1c     18 00 90 5D |  if_ne	jmp	#LR__3113
1ea20     08 4E 05 F1 | 	add	fp, #8
1ea24     A7 20 02 FB | 	rdlong	local02, fp
1ea28     10 20 46 F5 | 	or	local02, #16
1ea2c     A7 20 62 FC | 	wrlong	local02, fp
1ea30     08 4E 85 F1 | 	sub	fp, #8
1ea34     AC 00 90 FD | 	jmp	#LR__3118
1ea38                 | LR__3113
1ea38     44 4E 05 F1 | 	add	fp, #68
1ea3c     A7 20 02 FB | 	rdlong	local02, fp
1ea40     44 4E 85 F1 | 	sub	fp, #68
1ea44     10 00 00 FF 
1ea48     00 20 0E F2 | 	cmp	local02, ##8192 wz
1ea4c     44 4E 05 51 |  if_ne	add	fp, #68
1ea50     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1ea54     44 4E 85 51 |  if_ne	sub	fp, #68
1ea58     18 00 00 5F 
1ea5c     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1ea60     44 4E 05 51 |  if_ne	add	fp, #68
1ea64     0F 23 02 56 |  if_ne	mov	local03, local01
1ea68     44 4E 85 51 |  if_ne	sub	fp, #68
1ea6c     20 00 00 5F 
1ea70     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1ea74     18 00 90 5D |  if_ne	jmp	#LR__3114
1ea78     08 4E 05 F1 | 	add	fp, #8
1ea7c     A7 20 02 FB | 	rdlong	local02, fp
1ea80     04 20 46 F5 | 	or	local02, #4
1ea84     A7 20 62 FC | 	wrlong	local02, fp
1ea88     08 4E 85 F1 | 	sub	fp, #8
1ea8c     54 00 90 FD | 	jmp	#LR__3117
1ea90                 | LR__3114
1ea90     18 4E 05 F1 | 	add	fp, #24
1ea94     A7 20 02 FB | 	rdlong	local02, fp
1ea98     18 4E 85 F1 | 	sub	fp, #24
1ea9c     92 20 CE F7 | 	test	local02, #146 wz
1eaa0     18 00 90 5D |  if_ne	jmp	#LR__3115
1eaa4     08 4E 05 F1 | 	add	fp, #8
1eaa8     A7 20 02 FB | 	rdlong	local02, fp
1eaac     01 20 46 F5 | 	or	local02, #1
1eab0     A7 20 62 FC | 	wrlong	local02, fp
1eab4     08 4E 85 F1 | 	sub	fp, #8
1eab8     28 00 90 FD | 	jmp	#LR__3116
1eabc                 | LR__3115
1eabc     44 4E 05 F1 | 	add	fp, #68
1eac0     A7 24 02 FB | 	rdlong	local04, fp
1eac4     44 4E 85 F1 | 	sub	fp, #68
1eac8     08 00 00 FF 
1eacc     00 24 0E F2 | 	cmp	local04, ##4096 wz
1ead0     08 4E 05 51 |  if_ne	add	fp, #8
1ead4     A7 24 02 5B |  if_ne	rdlong	local04, fp
1ead8     20 24 46 55 |  if_ne	or	local04, #32
1eadc     A7 24 62 5C |  if_ne	wrlong	local04, fp
1eae0     08 4E 85 51 |  if_ne	sub	fp, #8
1eae4                 | LR__3116
1eae4                 | LR__3117
1eae4                 | LR__3118
1eae4     08 4E 05 F1 | 	add	fp, #8
1eae8     A7 24 02 FB | 	rdlong	local04, fp
1eaec     08 4E 85 F1 | 	sub	fp, #8
1eaf0     03 00 00 FF 
1eaf4     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1eaf8     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1eafc     03 00 00 FF 
1eb00     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1eb04     0F 25 CA F7 | 	test	local04, local01 wz
1eb08     E0 FD 9F AD |  if_e	jmp	#LR__3111
1eb0c                 | LR__3119
1eb0c     0C 4E 05 F1 | 	add	fp, #12
1eb10     A7 12 02 FB | 	rdlong	arg01, fp
1eb14     0C 4E 85 F1 | 	sub	fp, #12
1eb18     09 27 02 F6 | 	mov	local05, arg01
1eb1c     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
1eb20                 | LR__3120
1eb20     13 FB C9 FA | 	rdbyte	result1, local05 wz
1eb24     01 26 06 51 |  if_ne	add	local05, #1
1eb28     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
1eb2c                 | LR__3121
1eb2c     13 13 C2 F2 | 	subr	arg01, local05
1eb30     01 12 06 F1 | 	add	arg01, #1
1eb34     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1eb38     48 4E 05 F1 | 	add	fp, #72
1eb3c     A7 FA 61 FC | 	wrlong	result1, fp
1eb40     48 4E 85 F1 | 	sub	fp, #72
1eb44     00 FA 0D F2 | 	cmp	result1, #0 wz
1eb48     18 00 90 AD |  if_e	jmp	#LR__3122
1eb4c     48 4E 05 F1 | 	add	fp, #72
1eb50     A7 12 02 FB | 	rdlong	arg01, fp
1eb54     3C 4E 85 F1 | 	sub	fp, #60
1eb58     A7 14 02 FB | 	rdlong	arg02, fp
1eb5c     0C 4E 85 F1 | 	sub	fp, #12
1eb60     34 A2 BF FD | 	call	#__system____builtin_strcpy
1eb64                 | LR__3122
1eb64     48 4E 05 F1 | 	add	fp, #72
1eb68     A7 FA 01 FB | 	rdlong	result1, fp
1eb6c     48 4E 85 F1 | 	sub	fp, #72
1eb70                 | LR__3123
1eb70     A7 F0 03 F6 | 	mov	ptra, fp
1eb74     B2 00 A0 FD | 	call	#popregs_
1eb78                 | __system___basic_dir_ret
1eb78     2D 00 64 FD | 	ret
1eb7c                 | 
1eb7c                 | __system__pack_0489
1eb7c     09 01 02 F6 | 	mov	_var01, arg01
1eb80     7F 16 06 F1 | 	add	arg03, #127
1eb84     04 18 CE F7 | 	test	arg04, #4 wz
1eb88     10 00 90 AD |  if_e	jmp	#LR__3130
1eb8c     00 00 0E F2 | 	cmp	_var01, #0 wz
1eb90     16 00 C6 A9 |  if_e	decod	_var01, #22
1eb94     F7 00 26 F4 | 	bith	_var01, #247
1eb98     B4 00 90 FD | 	jmp	#LR__3139
1eb9c                 | LR__3130
1eb9c     02 18 CE F7 | 	test	arg04, #2 wz
1eba0     00 C0 3F 5F 
1eba4     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1eba8     00 14 06 56 |  if_ne	mov	arg02, #0
1ebac     A0 00 90 5D |  if_ne	jmp	#LR__3138
1ebb0     08 18 CE F7 | 	test	arg04, #8 wz
1ebb4     00 00 06 56 |  if_ne	mov	_var01, #0
1ebb8     94 00 90 5D |  if_ne	jmp	#LR__3137
1ebbc     FF 16 56 F2 | 	cmps	arg03, #255 wc
1ebc0     00 C0 3F 3F 
1ebc4     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1ebc8     00 14 06 36 |  if_ae	mov	arg02, #0
1ebcc     80 00 90 3D |  if_ae	jmp	#LR__3136
1ebd0     01 16 56 F2 | 	cmps	arg03, #1 wc
1ebd4     6C 00 90 3D |  if_ae	jmp	#LR__3134
1ebd8     01 14 46 F0 | 	shr	arg02, #1
1ebdc     00 03 02 F6 | 	mov	_var02, _var01
1ebe0     01 02 06 F5 | 	and	_var02, #1
1ebe4     1F 02 66 F0 | 	shl	_var02, #31
1ebe8     01 15 42 F5 | 	or	arg02, _var02
1ebec     01 00 46 F0 | 	shr	_var01, #1
1ebf0     97 1E 48 FB | 	callpa	#(@LR__3132-@LR__3131)>>2,fcache_load_ptr_
1ebf4                 | LR__3131
1ebf4     00 16 56 F2 | 	cmps	arg03, #0 wc
1ebf8     34 00 90 3D |  if_ae	jmp	#LR__3133
1ebfc     00 00 0E F2 | 	cmp	_var01, #0 wz
1ec00     2C 00 90 AD |  if_e	jmp	#LR__3133
1ec04     0A 13 02 F6 | 	mov	arg01, arg02
1ec08     01 12 06 F5 | 	and	arg01, #1
1ec0c     01 16 06 F1 | 	add	arg03, #1
1ec10     01 14 46 F0 | 	shr	arg02, #1
1ec14     00 03 02 F6 | 	mov	_var02, _var01
1ec18     01 02 06 F5 | 	and	_var02, #1
1ec1c     1F 02 66 F0 | 	shl	_var02, #31
1ec20     01 15 42 F5 | 	or	arg02, _var02
1ec24     09 15 42 F5 | 	or	arg02, arg01
1ec28     01 00 46 F0 | 	shr	_var01, #1
1ec2c     C4 FF 9F FD | 	jmp	#LR__3131
1ec30                 | LR__3132
1ec30                 | LR__3133
1ec30     00 16 56 F2 | 	cmps	arg03, #0 wc
1ec34     18 00 90 3D |  if_ae	jmp	#LR__3135
1ec38     00 14 0E F2 | 	cmp	arg02, #0 wz
1ec3c     6F 14 62 FD | 	wrnz	arg02
1ec40     0C 00 90 FD | 	jmp	#LR__3135
1ec44                 | LR__3134
1ec44     17 01 06 F4 | 	bitl	_var01, #279
1ec48     17 16 66 F0 | 	shl	arg03, #23
1ec4c     0B 01 42 F5 | 	or	_var01, arg03
1ec50                 | LR__3135
1ec50                 | LR__3136
1ec50                 | LR__3137
1ec50                 | LR__3138
1ec50                 | LR__3139
1ec50     01 00 CE F7 | 	test	_var01, #1 wz
1ec54     01 14 46 55 |  if_ne	or	arg02, #1
1ec58     0A 17 02 F6 | 	mov	arg03, arg02
1ec5c     00 02 06 F6 | 	mov	_var02, #0
1ec60     FF FF 3F FF 
1ec64     FF 15 06 F1 | 	add	arg02, ##2147483647
1ec68     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1ec6c     01 02 06 C6 |  if_b	mov	_var02, #1
1ec70     01 01 02 F1 | 	add	_var01, _var02
1ec74     01 18 CE F7 | 	test	arg04, #1 wz
1ec78     1F 00 26 54 |  if_ne	bith	_var01, #31
1ec7c     00 FB 01 F6 | 	mov	result1, _var01
1ec80                 | __system__pack_0489_ret
1ec80     2D 00 64 FD | 	ret
1ec84                 | 
1ec84                 | __system___rxtxioctl_0579
1ec84     00 15 0E F2 | 	cmp	arg02, #256 wz
1ec88     0C 00 90 AD |  if_e	jmp	#LR__3140
1ec8c     01 15 0E F2 | 	cmp	arg02, #257 wz
1ec90     1C 00 90 AD |  if_e	jmp	#LR__3141
1ec94     30 00 90 FD | 	jmp	#LR__3142
1ec98                 | LR__3140
1ec98     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1ec9c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1eca0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1eca4     0B FB 61 FC | 	wrlong	result1, arg03
1eca8     00 FA 05 F6 | 	mov	result1, #0
1ecac     28 00 90 FD | 	jmp	#LR__3143
1ecb0                 | LR__3141
1ecb0     0B 13 02 FB | 	rdlong	arg01, arg03
1ecb4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1ecb8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ecbc     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1ecc0     00 FA 05 F6 | 	mov	result1, #0
1ecc4     10 00 90 FD | 	jmp	#LR__3143
1ecc8                 | LR__3142
1ecc8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1eccc     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1ecd0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ecd4     01 FA 65 F6 | 	neg	result1, #1
1ecd8                 | LR__3143
1ecd8                 | __system___rxtxioctl_0579_ret
1ecd8     2D 00 64 FD | 	ret
1ecdc                 | 
1ecdc                 | __system____dummy_flush_0580
1ecdc     00 FA 05 F6 | 	mov	result1, #0
1ece0                 | __system____dummy_flush_0580_ret
1ece0     2D 00 64 FD | 	ret
1ece4                 | 
1ece4                 | __system___vfsread
1ece4     03 4A 05 F6 | 	mov	COUNT_, #3
1ece8     A8 00 A0 FD | 	call	#pushregs_
1ecec     28 F0 07 F1 | 	add	ptra, #40
1ecf0     04 4E 05 F1 | 	add	fp, #4
1ecf4     A7 12 62 FC | 	wrlong	arg01, fp
1ecf8     04 4E 05 F1 | 	add	fp, #4
1ecfc     A7 14 62 FC | 	wrlong	arg02, fp
1ed00     04 4E 05 F1 | 	add	fp, #4
1ed04     A7 16 62 FC | 	wrlong	arg03, fp
1ed08     04 4E 85 F1 | 	sub	fp, #4
1ed0c     A7 FA 01 FB | 	rdlong	result1, fp
1ed10     14 4E 05 F1 | 	add	fp, #20
1ed14     A7 FA 61 FC | 	wrlong	result1, fp
1ed18     04 4E 05 F1 | 	add	fp, #4
1ed1c     A7 00 68 FC | 	wrlong	#0, fp
1ed20     1C 4E 85 F1 | 	sub	fp, #28
1ed24     A7 12 02 FB | 	rdlong	arg01, fp
1ed28     04 4E 85 F1 | 	sub	fp, #4
1ed2c     08 12 06 F1 | 	add	arg01, #8
1ed30     09 FB 01 FB | 	rdlong	result1, arg01
1ed34     01 FA CD F7 | 	test	result1, #1 wz
1ed38     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ed3c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ed40     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ed44     01 FA 65 A6 |  if_e	neg	result1, #1
1ed48     74 02 90 AD |  if_e	jmp	#LR__3156
1ed4c     04 4E 05 F1 | 	add	fp, #4
1ed50     A7 12 02 FB | 	rdlong	arg01, fp
1ed54     04 4E 85 F1 | 	sub	fp, #4
1ed58     14 12 06 F1 | 	add	arg01, #20
1ed5c     09 FB 09 FB | 	rdlong	result1, arg01 wz
1ed60     B8 00 90 AD |  if_e	jmp	#LR__3151
1ed64     04 4E 05 F1 | 	add	fp, #4
1ed68     A7 12 02 FB | 	rdlong	arg01, fp
1ed6c     09 17 02 F6 | 	mov	arg03, arg01
1ed70     14 16 06 F1 | 	add	arg03, #20
1ed74     0B 1F 02 FB | 	rdlong	local01, arg03
1ed78     0F 21 02 F6 | 	mov	local02, local01
1ed7c     13 1E 46 F7 | 	zerox	local01, #19
1ed80     14 20 46 F0 | 	shr	local02, #20
1ed84     02 20 66 F0 | 	shl	local02, #2
1ed88     ED 20 02 F1 | 	add	local02, __methods__
1ed8c     10 21 02 FB | 	rdlong	local02, local02
1ed90     04 4E 05 F1 | 	add	fp, #4
1ed94     A7 14 02 FB | 	rdlong	arg02, fp
1ed98     04 4E 05 F1 | 	add	fp, #4
1ed9c     A7 16 02 FB | 	rdlong	arg03, fp
1eda0     0C 4E 85 F1 | 	sub	fp, #12
1eda4     F2 22 02 F6 | 	mov	local03, objptr
1eda8     0F E5 01 F6 | 	mov	objptr, local01
1edac     2D 20 62 FD | 	call	local02
1edb0     11 E5 01 F6 | 	mov	objptr, local03
1edb4     10 4E 05 F1 | 	add	fp, #16
1edb8     A7 FA 61 FC | 	wrlong	result1, fp
1edbc     10 4E 85 F1 | 	sub	fp, #16
1edc0     00 FA 55 F2 | 	cmps	result1, #0 wc
1edc4     44 00 90 3D |  if_ae	jmp	#LR__3150
1edc8     04 4E 05 F1 | 	add	fp, #4
1edcc     A7 22 02 FB | 	rdlong	local03, fp
1edd0     11 1F 02 F6 | 	mov	local01, local03
1edd4     08 22 06 F1 | 	add	local03, #8
1edd8     11 21 02 FB | 	rdlong	local02, local03
1eddc     20 20 46 F5 | 	or	local02, #32
1ede0     08 1E 06 F1 | 	add	local01, #8
1ede4     0F 21 62 FC | 	wrlong	local02, local01
1ede8     0C 4E 05 F1 | 	add	fp, #12
1edec     A7 12 0A FB | 	rdlong	arg01, fp wz
1edf0     10 4E 85 F1 | 	sub	fp, #16
1edf4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1edf8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1edfc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ee00     01 FA 65 56 |  if_ne	neg	result1, #1
1ee04     00 FA 05 A6 |  if_e	mov	result1, #0
1ee08     B4 01 90 FD | 	jmp	#LR__3156
1ee0c                 | LR__3150
1ee0c     10 4E 05 F1 | 	add	fp, #16
1ee10     A7 FA 01 FB | 	rdlong	result1, fp
1ee14     10 4E 85 F1 | 	sub	fp, #16
1ee18     A4 01 90 FD | 	jmp	#LR__3156
1ee1c                 | LR__3151
1ee1c     04 4E 05 F1 | 	add	fp, #4
1ee20     A7 12 02 FB | 	rdlong	arg01, fp
1ee24     20 12 06 F1 | 	add	arg01, #32
1ee28     09 13 0A FB | 	rdlong	arg01, arg01 wz
1ee2c     14 4E 05 F1 | 	add	fp, #20
1ee30     A7 12 62 FC | 	wrlong	arg01, fp
1ee34     18 4E 85 F1 | 	sub	fp, #24
1ee38     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ee3c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ee40     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ee44     01 FA 65 A6 |  if_e	neg	result1, #1
1ee48     74 01 90 AD |  if_e	jmp	#LR__3156
1ee4c     04 4E 05 F1 | 	add	fp, #4
1ee50     A7 22 02 FB | 	rdlong	local03, fp
1ee54     04 4E 85 F1 | 	sub	fp, #4
1ee58     28 22 06 F1 | 	add	local03, #40
1ee5c     11 21 0A FB | 	rdlong	local02, local03 wz
1ee60     7C 00 90 AD |  if_e	jmp	#LR__3153
1ee64     04 4E 05 F1 | 	add	fp, #4
1ee68     A7 12 02 FB | 	rdlong	arg01, fp
1ee6c     09 23 02 F6 | 	mov	local03, arg01
1ee70     28 22 06 F1 | 	add	local03, #40
1ee74     11 1F 02 FB | 	rdlong	local01, local03
1ee78     0F 21 02 F6 | 	mov	local02, local01
1ee7c     13 1E 46 F7 | 	zerox	local01, #19
1ee80     14 20 46 F0 | 	shr	local02, #20
1ee84     02 20 66 F0 | 	shl	local02, #2
1ee88     ED 20 02 F1 | 	add	local02, __methods__
1ee8c     10 21 02 FB | 	rdlong	local02, local02
1ee90     20 4E 05 F1 | 	add	fp, #32
1ee94     A7 16 02 F6 | 	mov	arg03, fp
1ee98     24 4E 85 F1 | 	sub	fp, #36
1ee9c     00 15 06 F6 | 	mov	arg02, #256
1eea0     F2 22 02 F6 | 	mov	local03, objptr
1eea4     0F E5 01 F6 | 	mov	objptr, local01
1eea8     2D 20 62 FD | 	call	local02
1eeac     11 E5 01 F6 | 	mov	objptr, local03
1eeb0     10 4E 05 F1 | 	add	fp, #16
1eeb4     A7 FA 61 FC | 	wrlong	result1, fp
1eeb8     00 FA 4D F2 | 	cmps	result1, #0 wz
1eebc     10 4E 85 F1 | 	sub	fp, #16
1eec0     1C 00 90 5D |  if_ne	jmp	#LR__3152
1eec4     24 4E 05 F1 | 	add	fp, #36
1eec8     A7 20 02 FB | 	rdlong	local02, fp
1eecc     24 4E 85 F1 | 	sub	fp, #36
1eed0     02 20 CE F7 | 	test	local02, #2 wz
1eed4     20 4E 05 51 |  if_ne	add	fp, #32
1eed8     A7 02 68 5C |  if_ne	wrlong	#1, fp
1eedc     20 4E 85 51 |  if_ne	sub	fp, #32
1eee0                 | LR__3152
1eee0                 | LR__3153
1eee0     10 4E 05 F1 | 	add	fp, #16
1eee4     A7 00 68 FC | 	wrlong	#0, fp
1eee8     10 4E 85 F1 | 	sub	fp, #16
1eeec                 | LR__3154
1eeec     0C 4E 05 F1 | 	add	fp, #12
1eef0     A7 22 02 FB | 	rdlong	local03, fp
1eef4     0C 4E 85 F1 | 	sub	fp, #12
1eef8     01 22 16 F2 | 	cmp	local03, #1 wc
1eefc     B4 00 90 CD |  if_b	jmp	#LR__3155
1ef00     18 4E 05 F1 | 	add	fp, #24
1ef04     A7 20 02 FB | 	rdlong	local02, fp
1ef08     10 23 02 F6 | 	mov	local03, local02
1ef0c     13 22 46 F7 | 	zerox	local03, #19
1ef10     14 20 46 F0 | 	shr	local02, #20
1ef14     02 20 66 F0 | 	shl	local02, #2
1ef18     ED 20 02 F1 | 	add	local02, __methods__
1ef1c     10 21 02 FB | 	rdlong	local02, local02
1ef20     14 4E 85 F1 | 	sub	fp, #20
1ef24     A7 12 02 FB | 	rdlong	arg01, fp
1ef28     04 4E 85 F1 | 	sub	fp, #4
1ef2c     F2 1E 02 F6 | 	mov	local01, objptr
1ef30     11 E5 01 F6 | 	mov	objptr, local03
1ef34     2D 20 62 FD | 	call	local02
1ef38     0F E5 01 F6 | 	mov	objptr, local01
1ef3c     14 4E 05 F1 | 	add	fp, #20
1ef40     A7 FA 61 FC | 	wrlong	result1, fp
1ef44     14 4E 85 F1 | 	sub	fp, #20
1ef48     00 FA 55 F2 | 	cmps	result1, #0 wc
1ef4c     64 00 90 CD |  if_b	jmp	#LR__3155
1ef50     1C 4E 05 F1 | 	add	fp, #28
1ef54     A7 22 02 FB | 	rdlong	local03, fp
1ef58     11 21 02 F6 | 	mov	local02, local03
1ef5c     01 20 06 F1 | 	add	local02, #1
1ef60     A7 20 62 FC | 	wrlong	local02, fp
1ef64     08 4E 85 F1 | 	sub	fp, #8
1ef68     A7 20 02 FB | 	rdlong	local02, fp
1ef6c     11 21 42 FC | 	wrbyte	local02, local03
1ef70     04 4E 85 F1 | 	sub	fp, #4
1ef74     A7 22 02 FB | 	rdlong	local03, fp
1ef78     01 22 06 F1 | 	add	local03, #1
1ef7c     A7 22 62 FC | 	wrlong	local03, fp
1ef80     04 4E 85 F1 | 	sub	fp, #4
1ef84     A7 22 02 FB | 	rdlong	local03, fp
1ef88     01 22 86 F1 | 	sub	local03, #1
1ef8c     A7 22 62 FC | 	wrlong	local03, fp
1ef90     14 4E 05 F1 | 	add	fp, #20
1ef94     A7 22 0A FB | 	rdlong	local03, fp wz
1ef98     20 4E 85 F1 | 	sub	fp, #32
1ef9c     4C FF 9F AD |  if_e	jmp	#LR__3154
1efa0     14 4E 05 F1 | 	add	fp, #20
1efa4     A7 20 02 FB | 	rdlong	local02, fp
1efa8     14 4E 85 F1 | 	sub	fp, #20
1efac     0A 20 0E F2 | 	cmp	local02, #10 wz
1efb0     38 FF 9F 5D |  if_ne	jmp	#LR__3154
1efb4                 | LR__3155
1efb4     10 4E 05 F1 | 	add	fp, #16
1efb8     A7 FA 01 FB | 	rdlong	result1, fp
1efbc     10 4E 85 F1 | 	sub	fp, #16
1efc0                 | LR__3156
1efc0     A7 F0 03 F6 | 	mov	ptra, fp
1efc4     B2 00 A0 FD | 	call	#popregs_
1efc8                 | __system___vfsread_ret
1efc8     2D 00 64 FD | 	ret
1efcc                 | 
1efcc                 | __system____default_filbuf
1efcc     04 4A 05 F6 | 	mov	COUNT_, #4
1efd0     A8 00 A0 FD | 	call	#pushregs_
1efd4     09 1F 02 F6 | 	mov	local01, arg01
1efd8     0F 21 02 FB | 	rdlong	local02, local01
1efdc     0C 20 06 F1 | 	add	local02, #12
1efe0     10 FB 09 FB | 	rdlong	result1, local02 wz
1efe4     0C 20 86 F1 | 	sub	local02, #12
1efe8     20 00 90 5D |  if_ne	jmp	#LR__3160
1efec     14 20 06 F1 | 	add	local02, #20
1eff0     10 FB 01 F6 | 	mov	result1, local02
1eff4     04 20 86 F1 | 	sub	local02, #4
1eff8     10 FB 61 FC | 	wrlong	result1, local02
1effc     04 20 86 F1 | 	sub	local02, #4
1f000     02 00 80 FF 
1f004     10 01 68 FC | 	wrlong	##1024, local02
1f008     0C 20 86 F1 | 	sub	local02, #12
1f00c                 | LR__3160
1f00c     14 1E 06 F1 | 	add	local01, #20
1f010     0F 23 02 FB | 	rdlong	local03, local01
1f014     11 25 02 F6 | 	mov	local04, local03
1f018     14 1E 86 F1 | 	sub	local01, #20
1f01c     13 24 46 F7 | 	zerox	local04, #19
1f020     14 22 46 F0 | 	shr	local03, #20
1f024     02 22 66 F0 | 	shl	local03, #2
1f028     ED 22 02 F1 | 	add	local03, __methods__
1f02c     11 23 02 FB | 	rdlong	local03, local03
1f030     10 20 06 F1 | 	add	local02, #16
1f034     10 15 02 FB | 	rdlong	arg02, local02
1f038     04 20 86 F1 | 	sub	local02, #4
1f03c     10 17 02 FB | 	rdlong	arg03, local02
1f040     0C 20 86 F1 | 	sub	local02, #12
1f044     0F 13 02 F6 | 	mov	arg01, local01
1f048     F2 1E 02 F6 | 	mov	local01, objptr
1f04c     12 E5 01 F6 | 	mov	objptr, local04
1f050     2D 22 62 FD | 	call	local03
1f054     0F E5 01 F6 | 	mov	objptr, local01
1f058     FD 24 02 F6 | 	mov	local04, result1
1f05c     00 24 56 F2 | 	cmps	local04, #0 wc
1f060     01 FA 65 C6 |  if_b	neg	result1, #1
1f064     28 00 90 CD |  if_b	jmp	#LR__3161
1f068     10 25 62 FC | 	wrlong	local04, local02
1f06c     10 20 06 F1 | 	add	local02, #16
1f070     10 23 02 FB | 	rdlong	local03, local02
1f074     0C 20 86 F1 | 	sub	local02, #12
1f078     10 23 62 FC | 	wrlong	local03, local02
1f07c     04 20 06 F1 | 	add	local02, #4
1f080     10 23 02 FB | 	rdlong	local03, local02
1f084     01 22 46 F5 | 	or	local03, #1
1f088     10 23 62 FC | 	wrlong	local03, local02
1f08c     12 FB 01 F6 | 	mov	result1, local04
1f090                 | LR__3161
1f090     A7 F0 03 F6 | 	mov	ptra, fp
1f094     B2 00 A0 FD | 	call	#popregs_
1f098                 | __system____default_filbuf_ret
1f098     2D 00 64 FD | 	ret
1f09c                 | 
1f09c                 | __system__getlower_0965
1f09c     41 12 56 F2 | 	cmps	arg01, #65 wc
1f0a0     10 00 90 CD |  if_b	jmp	#LR__3170
1f0a4     5B 12 56 F2 | 	cmps	arg01, #91 wc
1f0a8     09 FB 01 C6 |  if_b	mov	result1, arg01
1f0ac     20 FA 05 C1 |  if_b	add	result1, #32
1f0b0     04 00 90 CD |  if_b	jmp	#__system__getlower_0965_ret
1f0b4                 | LR__3170
1f0b4     09 FB 01 F6 | 	mov	result1, arg01
1f0b8                 | __system__getlower_0965_ret
1f0b8     2D 00 64 FD | 	ret
1f0bc                 | 
1f0bc                 | __system___pat_match
1f0bc     08 4A 05 F6 | 	mov	COUNT_, #8
1f0c0     A8 00 A0 FD | 	call	#pushregs_
1f0c4     09 1F 02 F6 | 	mov	local01, arg01
1f0c8                 | LR__3180
1f0c8     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1f0cc     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1f0d0     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1f0d4     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1f0d8     2C 00 90 AD |  if_e	jmp	#LR__3181
1f0dc     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f0e0     B8 FF BF FD | 	call	#__system__getlower_0965
1f0e4     FD 22 02 F6 | 	mov	local03, result1
1f0e8     0F 13 C2 FA | 	rdbyte	arg01, local01
1f0ec     AC FF BF FD | 	call	#__system__getlower_0965
1f0f0     11 FB 09 F2 | 	cmp	result1, local03 wz
1f0f4     00 FA 05 56 |  if_ne	mov	result1, #0
1f0f8     FC 00 90 5D |  if_ne	jmp	#LR__3189
1f0fc     01 1E 06 F1 | 	add	local01, #1
1f100     01 14 06 F1 | 	add	arg02, #1
1f104     C0 FF 9F FD | 	jmp	#LR__3180
1f108                 | LR__3181
1f108     0A 23 C2 FA | 	rdbyte	local03, arg02
1f10c     2A 22 0E F2 | 	cmp	local03, #42 wz
1f110     D4 00 90 5D |  if_ne	jmp	#LR__3188
1f114     01 14 06 F1 | 	add	arg02, #1
1f118     0A 21 C2 FA | 	rdbyte	local02, arg02
1f11c     01 14 86 F1 | 	sub	arg02, #1
1f120     2E 20 0E F2 | 	cmp	local02, #46 wz
1f124     28 00 90 5D |  if_ne	jmp	#LR__3182
1f128     02 14 06 F1 | 	add	arg02, #2
1f12c     0A 21 C2 FA | 	rdbyte	local02, arg02
1f130     02 14 86 F1 | 	sub	arg02, #2
1f134     2A 20 0E F2 | 	cmp	local02, #42 wz
1f138     03 14 06 A1 |  if_e	add	arg02, #3
1f13c     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1f140     03 14 86 A1 |  if_e	sub	arg02, #3
1f144     12 27 0A A6 |  if_e	mov	local05, local04 wz
1f148     01 FA 05 A6 |  if_e	mov	result1, #1
1f14c     A8 00 90 AD |  if_e	jmp	#LR__3189
1f150                 | LR__3182
1f150     01 14 06 F1 | 	add	arg02, #1
1f154     00 28 06 F6 | 	mov	local06, #0
1f158     97 1E 48 FB | 	callpa	#(@LR__3185-@LR__3183)>>2,fcache_load_ptr_
1f15c                 | LR__3183
1f15c     14 2B 02 F6 | 	mov	local07, local06
1f160     0A 2B 02 F1 | 	add	local07, arg02
1f164     15 2B CA FA | 	rdbyte	local07, local07 wz
1f168     14 27 02 56 |  if_ne	mov	local05, local06
1f16c     01 26 06 51 |  if_ne	add	local05, #1
1f170     13 29 02 56 |  if_ne	mov	local06, local05
1f174     E4 FF 9F 5D |  if_ne	jmp	#LR__3183
1f178     00 2C 06 F6 | 	mov	local08, #0
1f17c                 | LR__3184
1f17c     16 2B 02 F6 | 	mov	local07, local08
1f180     0F 2B 02 F1 | 	add	local07, local01
1f184     15 2B CA FA | 	rdbyte	local07, local07 wz
1f188     16 27 02 56 |  if_ne	mov	local05, local08
1f18c     01 26 06 51 |  if_ne	add	local05, #1
1f190     13 2D 02 56 |  if_ne	mov	local08, local05
1f194     E4 FF 9F 5D |  if_ne	jmp	#LR__3184
1f198                 | LR__3185
1f198     14 2D 52 F2 | 	cmps	local08, local06 wc
1f19c     00 FA 05 C6 |  if_b	mov	result1, #0
1f1a0     54 00 90 CD |  if_b	jmp	#LR__3189
1f1a4     16 21 02 F6 | 	mov	local02, local08
1f1a8     14 21 82 F1 | 	sub	local02, local06
1f1ac     10 1F 02 F1 | 	add	local01, local02
1f1b0                 | LR__3186
1f1b0     01 28 56 F2 | 	cmps	local06, #1 wc
1f1b4     30 00 90 CD |  if_b	jmp	#LR__3187
1f1b8     0F 13 C2 FA | 	rdbyte	arg01, local01
1f1bc     DC FE BF FD | 	call	#__system__getlower_0965
1f1c0     FD 2C 02 F6 | 	mov	local08, result1
1f1c4     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f1c8     D0 FE BF FD | 	call	#__system__getlower_0965
1f1cc     FD 2C 0A F2 | 	cmp	local08, result1 wz
1f1d0     00 FA 05 56 |  if_ne	mov	result1, #0
1f1d4     20 00 90 5D |  if_ne	jmp	#LR__3189
1f1d8     01 1E 06 F1 | 	add	local01, #1
1f1dc     01 14 06 F1 | 	add	arg02, #1
1f1e0     01 28 86 F1 | 	sub	local06, #1
1f1e4     C8 FF 9F FD | 	jmp	#LR__3186
1f1e8                 | LR__3187
1f1e8                 | LR__3188
1f1e8     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1f1ec     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1f1f0     01 FA 05 A6 |  if_e	mov	result1, #1
1f1f4     00 FA 05 56 |  if_ne	mov	result1, #0
1f1f8                 | LR__3189
1f1f8     A7 F0 03 F6 | 	mov	ptra, fp
1f1fc     B2 00 A0 FD | 	call	#popregs_
1f200                 | __system___pat_match_ret
1f200     2D 00 64 FD | 	ret
1f204                 | 
1f204                 | _fatfs_cc_ff_uni2oem
1f204     00 00 06 F6 | 	mov	_var01, #0
1f208     80 12 16 F2 | 	cmp	arg01, #128 wc
1f20c     09 01 02 C6 |  if_b	mov	_var01, arg01
1f210     58 00 90 CD |  if_b	jmp	#LR__3194
1f214     80 00 00 FF 
1f218     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1f21c     4C 00 90 3D |  if_ae	jmp	#LR__3193
1f220     0A FB 31 F9 | 	getword	result1, arg02, #0
1f224     01 00 00 FF 
1f228     52 FB 0D F2 | 	cmp	result1, ##850 wz
1f22c     3C 00 90 5D |  if_ne	jmp	#LR__3193
1f230                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1f230     00 00 06 F6 | 	mov	_var01, #0
1f234     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
1f238                 | LR__3190
1f238     00 FB 31 F9 | 	getword	result1, _var01, #0
1f23c     80 FA 15 F2 | 	cmp	result1, #128 wc
1f240     1C 00 90 3D |  if_ae	jmp	#LR__3192
1f244     00 FB 31 F9 | 	getword	result1, _var01, #0
1f248     01 FA 65 F0 | 	shl	result1, #1
1f24c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1f250     FD FA E1 FA | 	rdword	result1, result1
1f254     FD 12 0A F2 | 	cmp	arg01, result1 wz
1f258     01 00 06 51 |  if_ne	add	_var01, #1
1f25c     D8 FF 9F 5D |  if_ne	jmp	#LR__3190
1f260                 | LR__3191
1f260                 | LR__3192
1f260     00 01 32 F9 | 	getword	_var01, _var01, #0
1f264     80 00 06 F1 | 	add	_var01, #128
1f268     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1f26c                 | LR__3193
1f26c                 | LR__3194
1f26c                 | ' 			c = (c + 0x80) & 0xFF;
1f26c                 | ' 		}
1f26c                 | ' 	}
1f26c                 | ' 
1f26c                 | ' 	return c;
1f26c     00 FB 01 F6 | 	mov	result1, _var01
1f270                 | _fatfs_cc_ff_uni2oem_ret
1f270     2D 00 64 FD | 	ret
1f274                 | 
1f274                 | _fatfs_cc_ff_oem2uni
1f274     00 00 06 F6 | 	mov	_var01, #0
1f278     09 FB 31 F9 | 	getword	result1, arg01, #0
1f27c     80 FA 15 F2 | 	cmp	result1, #128 wc
1f280     09 01 02 C6 |  if_b	mov	_var01, arg01
1f284     2C 00 90 CD |  if_b	jmp	#LR__3201
1f288     0A 15 32 F9 | 	getword	arg02, arg02, #0
1f28c     01 00 00 FF 
1f290     52 15 0E F2 | 	cmp	arg02, ##850 wz
1f294     1C 00 90 5D |  if_ne	jmp	#LR__3200
1f298     09 FB 31 F9 | 	getword	result1, arg01, #0
1f29c     00 FB 15 F2 | 	cmp	result1, #256 wc
1f2a0     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1f2a4     80 12 86 C1 |  if_b	sub	arg01, #128
1f2a8     01 12 66 C0 |  if_b	shl	arg01, #1
1f2ac     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1f2b0     09 01 E2 CA |  if_b	rdword	_var01, arg01
1f2b4                 | LR__3200
1f2b4                 | LR__3201
1f2b4                 | ' 		}
1f2b4                 | ' 	}
1f2b4                 | ' 
1f2b4                 | ' 	return c;
1f2b4     00 FB 01 F6 | 	mov	result1, _var01
1f2b8                 | _fatfs_cc_ff_oem2uni_ret
1f2b8     2D 00 64 FD | 	ret
1f2bc                 | 
1f2bc                 | _fatfs_cc_ff_wtoupper
1f2bc     09 01 02 F6 | 	mov	_var01, arg01
1f2c0     80 00 00 FF 
1f2c4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1f2c8     60 01 90 3D |  if_ae	jmp	#LR__3223
1f2cc     00 03 02 F6 | 	mov	_var02, _var01
1f2d0     01 01 32 F9 | 	getword	_var01, _var02, #0
1f2d4     08 00 00 FF 
1f2d8     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1f2dc     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1f2e0     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1f2e4     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1f2e8     01 00 00 3F 
1f2ec     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1f2f0     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1f2f4     01 00 00 3F 
1f2f8     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1f2fc     02 07 02 F6 | 	mov	_var04, _var03
1f300                 | ' 		uc = (WORD)uni;
1f300                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1f300                 | ' 		for (;;) {
1f300                 | LR__3210
1f300     03 09 E2 FA | 	rdword	_var05, _var04
1f304     04 05 02 F6 | 	mov	_var03, _var05
1f308     0F 04 4E F7 | 	zerox	_var03, #15 wz
1f30c     02 06 06 F1 | 	add	_var04, #2
1f310     14 01 90 AD |  if_e	jmp	#LR__3222
1f314     01 05 32 F9 | 	getword	_var03, _var02, #0
1f318     04 01 32 F9 | 	getword	_var01, _var05, #0
1f31c     00 05 12 F2 | 	cmp	_var03, _var01 wc
1f320     04 01 90 CD |  if_b	jmp	#LR__3222
1f324     03 0B E2 FA | 	rdword	_var06, _var04
1f328     05 0D 32 F9 | 	getword	_var07, _var06, #0
1f32c     08 0C 46 F0 | 	shr	_var07, #8
1f330     05 0B 32 F9 | 	getword	_var06, _var06, #0
1f334     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1f338     01 05 32 F9 | 	getword	_var03, _var02, #0
1f33c     04 0F 32 F9 | 	getword	_var08, _var05, #0
1f340     05 01 32 F9 | 	getword	_var01, _var06, #0
1f344     00 0F 02 F1 | 	add	_var08, _var01
1f348     07 05 52 F2 | 	cmps	_var03, _var08 wc
1f34c     02 06 06 F1 | 	add	_var04, #2
1f350     C4 00 90 3D |  if_ae	jmp	#LR__3221
1f354                 | ' 				switch (cmd) {
1f354     06 11 32 F9 | 	getword	_var09, _var07, #0
1f358     09 10 26 F3 | 	fle	_var09, #9
1f35c     30 10 62 FD | 	jmprel	_var09
1f360                 | LR__3211
1f360     24 00 90 FD | 	jmp	#LR__3212
1f364     3C 00 90 FD | 	jmp	#LR__3213
1f368     54 00 90 FD | 	jmp	#LR__3214
1f36c     5C 00 90 FD | 	jmp	#LR__3215
1f370     64 00 90 FD | 	jmp	#LR__3216
1f374     6C 00 90 FD | 	jmp	#LR__3217
1f378     74 00 90 FD | 	jmp	#LR__3218
1f37c     7C 00 90 FD | 	jmp	#LR__3219
1f380     84 00 90 FD | 	jmp	#LR__3220
1f384     A0 00 90 FD | 	jmp	#LR__3222
1f388                 | LR__3212
1f388     01 03 32 F9 | 	getword	_var02, _var02, #0
1f38c     04 09 32 F9 | 	getword	_var05, _var05, #0
1f390     04 03 82 F1 | 	sub	_var02, _var05
1f394     01 02 66 F0 | 	shl	_var02, #1
1f398     03 03 02 F1 | 	add	_var02, _var04
1f39c     01 03 E2 FA | 	rdword	_var02, _var02
1f3a0     84 00 90 FD | 	jmp	#LR__3222
1f3a4                 | LR__3213
1f3a4     01 05 32 F9 | 	getword	_var03, _var02, #0
1f3a8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3ac     04 09 32 F9 | 	getword	_var05, _var05, #0
1f3b0     04 03 82 F1 | 	sub	_var02, _var05
1f3b4     01 02 06 F5 | 	and	_var02, #1
1f3b8     02 03 C2 F2 | 	subr	_var02, _var03
1f3bc     68 00 90 FD | 	jmp	#LR__3222
1f3c0                 | LR__3214
1f3c0     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3c4     10 02 86 F1 | 	sub	_var02, #16
1f3c8     5C 00 90 FD | 	jmp	#LR__3222
1f3cc                 | LR__3215
1f3cc     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3d0     20 02 86 F1 | 	sub	_var02, #32
1f3d4     50 00 90 FD | 	jmp	#LR__3222
1f3d8                 | LR__3216
1f3d8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3dc     30 02 86 F1 | 	sub	_var02, #48
1f3e0     44 00 90 FD | 	jmp	#LR__3222
1f3e4                 | LR__3217
1f3e4     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3e8     1A 02 86 F1 | 	sub	_var02, #26
1f3ec     38 00 90 FD | 	jmp	#LR__3222
1f3f0                 | LR__3218
1f3f0     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3f4     08 02 06 F1 | 	add	_var02, #8
1f3f8     2C 00 90 FD | 	jmp	#LR__3222
1f3fc                 | LR__3219
1f3fc     01 03 32 F9 | 	getword	_var02, _var02, #0
1f400     50 02 86 F1 | 	sub	_var02, #80
1f404     20 00 90 FD | 	jmp	#LR__3222
1f408                 | LR__3220
1f408     01 03 32 F9 | 	getword	_var02, _var02, #0
1f40c     0E 00 00 FF 
1f410     60 02 86 F1 | 	sub	_var02, ##7264
1f414                 | ' 				}
1f414                 | ' 				break;
1f414     10 00 90 FD | 	jmp	#LR__3222
1f418                 | LR__3221
1f418     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1f41c     02 0A 06 AA |  if_e	mul	_var06, #2
1f420     05 07 02 A1 |  if_e	add	_var04, _var06
1f424     D8 FE 9F FD | 	jmp	#LR__3210
1f428                 | LR__3222
1f428     01 01 32 F9 | 	getword	_var01, _var02, #0
1f42c                 | LR__3223
1f42c                 | ' 		}
1f42c                 | ' 		uni = uc;
1f42c                 | ' 	}
1f42c                 | ' 
1f42c                 | ' 	return uni;
1f42c     00 FB 01 F6 | 	mov	result1, _var01
1f430                 | _fatfs_cc_ff_wtoupper_ret
1f430     2D 00 64 FD | 	ret
1f434                 | 
1f434                 | _fatfs_cc_strncpy
1f434     09 01 02 F6 | 	mov	_var01, arg01
1f438     97 12 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
1f43c                 | ' 
1f43c                 | ' 	dscan = dst;
1f43c                 | ' 	sscan = src;
1f43c                 | ' 	count = n;
1f43c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1f43c                 | LR__3230
1f43c     01 16 86 F1 | 	sub	arg03, #1
1f440     00 16 56 F2 | 	cmps	arg03, #0 wc
1f444     18 00 90 CD |  if_b	jmp	#LR__3232
1f448     0A FB C1 FA | 	rdbyte	result1, arg02
1f44c     00 FB 41 FC | 	wrbyte	result1, _var01
1f450     01 14 06 F1 | 	add	arg02, #1
1f454     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1f458                 | ' 		continue;
1f458     01 00 06 F1 | 	add	_var01, #1
1f45c     DC FF 9F 5D |  if_ne	jmp	#LR__3230
1f460                 | LR__3231
1f460                 | LR__3232
1f460     97 0C 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
1f464                 | ' 	while (--count >= 0)
1f464                 | LR__3233
1f464     01 16 86 F1 | 	sub	arg03, #1
1f468     00 16 56 F2 | 	cmps	arg03, #0 wc
1f46c     00 03 02 36 |  if_ae	mov	_var02, _var01
1f470     01 00 06 31 |  if_ae	add	_var01, #1
1f474     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1f478     E8 FF 9F 3D |  if_ae	jmp	#LR__3233
1f47c                 | LR__3234
1f47c                 | ' 		*dscan++ = '\0';
1f47c                 | ' 	return(dst);
1f47c     09 FB 01 F6 | 	mov	result1, arg01
1f480                 | _fatfs_cc_strncpy_ret
1f480     2D 00 64 FD | 	ret
1f484                 | 
1f484                 | _fatfs_cc_memcmp
1f484                 | ' 	for (n = size; n > 0; n--)
1f484     00 16 0E F2 | 	cmp	arg03, #0 wz
1f488     28 00 90 AD |  if_e	jmp	#LR__3241
1f48c                 | LR__3240
1f48c     09 01 C2 FA | 	rdbyte	_var01, arg01
1f490     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f494     01 01 0A F2 | 	cmp	_var01, _var02 wz
1f498     01 12 06 A1 |  if_e	add	arg01, #1
1f49c     01 14 06 A1 |  if_e	add	arg02, #1
1f4a0                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1f4a0     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1f4a4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1f4a8     01 FB 81 51 |  if_ne	sub	result1, _var02
1f4ac     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1f4b0     F6 17 6E FB | 	djnz	arg03, #LR__3240
1f4b4                 | LR__3241
1f4b4                 | ' 
1f4b4                 | ' 	return(0);
1f4b4     00 FA 05 F6 | 	mov	result1, #0
1f4b8                 | _fatfs_cc_memcmp_ret
1f4b8     2D 00 64 FD | 	ret
1f4bc                 | 
1f4bc                 | _fatfs_cc_strncmp
1f4bc     09 01 0A F6 | 	mov	_var01, arg01 wz
1f4c0     14 00 90 5D |  if_ne	jmp	#LR__3250
1f4c4                 | ' 		return scan2 ? -1 : 0;
1f4c4     00 14 0E F2 | 	cmp	arg02, #0 wz
1f4c8     01 02 66 56 |  if_ne	neg	_var02, #1
1f4cc     00 02 06 A6 |  if_e	mov	_var02, #0
1f4d0     01 FB 01 F6 | 	mov	result1, _var02
1f4d4     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1f4d8                 | LR__3250
1f4d8     00 14 0E F2 | 	cmp	arg02, #0 wz
1f4dc     01 FA 05 A6 |  if_e	mov	result1, #1
1f4e0     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f4e4     0B 05 02 F6 | 	mov	_var03, arg03
1f4e8     97 16 48 FB | 	callpa	#(@LR__3252-@LR__3251)>>2,fcache_load_ptr_
1f4ec                 | ' 	count = n;
1f4ec                 | ' 	do {
1f4ec                 | LR__3251
1f4ec     00 07 C2 FA | 	rdbyte	_var04, _var01
1f4f0     0A 09 02 F6 | 	mov	_var05, arg02
1f4f4     04 0B C2 FA | 	rdbyte	_var06, _var05
1f4f8     01 04 86 F1 | 	sub	_var03, #1
1f4fc     00 04 56 F2 | 	cmps	_var03, #0 wc
1f500     01 00 06 F1 | 	add	_var01, #1
1f504     01 14 06 F1 | 	add	arg02, #1
1f508     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1f50c     08 00 90 2D |  if_nc_and_z	jmp	#LR__3253
1f510     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1f514     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3251
1f518                 | LR__3252
1f518                 | LR__3253
1f518     00 04 56 F2 | 	cmps	_var03, #0 wc
1f51c                 | ' 		return(0);
1f51c     00 FA 05 C6 |  if_b	mov	result1, #0
1f520     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1f524     05 07 0A F2 | 	cmp	_var04, _var06 wz
1f528                 | ' 		return(0);
1f528     00 FA 05 A6 |  if_e	mov	result1, #0
1f52c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f530     00 06 0E F2 | 	cmp	_var04, #0 wz
1f534                 | ' 		return(-1);
1f534     01 FA 65 A6 |  if_e	neg	result1, #1
1f538     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f53c     00 0A 0E F2 | 	cmp	_var06, #0 wz
1f540                 | ' 		return(1);
1f540     01 FA 05 A6 |  if_e	mov	result1, #1
1f544                 | ' 		return(c1 - c2);
1f544     03 FB 01 56 |  if_ne	mov	result1, _var04
1f548     05 FB 81 51 |  if_ne	sub	result1, _var06
1f54c                 | _fatfs_cc_strncmp_ret
1f54c     2D 00 64 FD | 	ret
1f550                 | 
1f550                 | _fatfs_cc_strchr
1f550                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1f550                 | ' 	while ((c = *s++) != (char) charwanted)
1f550                 | LR__3260
1f550     09 01 02 F6 | 	mov	_var01, arg01
1f554     00 03 C2 FA | 	rdbyte	_var02, _var01
1f558     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1f55c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1f560     03 05 0A F2 | 	cmp	_var03, _var04 wz
1f564     01 12 06 F1 | 	add	arg01, #1
1f568     14 00 90 AD |  if_e	jmp	#LR__3261
1f56c     01 05 02 F6 | 	mov	_var03, _var02
1f570     07 04 4E F7 | 	zerox	_var03, #7 wz
1f574     00 FA 05 A6 |  if_e	mov	result1, #0
1f578     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1f57c     D0 FF 9F FD | 	jmp	#LR__3260
1f580                 | LR__3261
1f580                 | ' 	return((char *)--s);
1f580     01 12 86 F1 | 	sub	arg01, #1
1f584     09 FB 01 F6 | 	mov	result1, arg01
1f588                 | _fatfs_cc_strchr_ret
1f588     2D 00 64 FD | 	ret
1f58c                 | 
1f58c                 | _fatfs_cc_disk_initialize
1f58c     04 4A 05 F6 | 	mov	COUNT_, #4
1f590     A8 00 A0 FD | 	call	#pushregs_
1f594     40 F0 07 F1 | 	add	ptra, #64
1f598     04 4E 05 F1 | 	add	fp, #4
1f59c     A7 12 42 FC | 	wrbyte	arg01, fp
1f5a0     01 00 00 FF 
1f5a4     14 E4 05 F1 | 	add	objptr, ##532
1f5a8     F2 18 02 FB | 	rdlong	arg04, objptr
1f5ac     2C 4E 05 F1 | 	add	fp, #44
1f5b0     A7 18 62 FC | 	wrlong	arg04, fp
1f5b4     04 E4 85 F1 | 	sub	objptr, #4
1f5b8     F2 18 02 FB | 	rdlong	arg04, objptr
1f5bc     04 4E 05 F1 | 	add	fp, #4
1f5c0     A7 18 62 FC | 	wrlong	arg04, fp
1f5c4     08 E4 05 F1 | 	add	objptr, #8
1f5c8     F2 18 02 FB | 	rdlong	arg04, objptr
1f5cc     04 4E 05 F1 | 	add	fp, #4
1f5d0     A7 18 62 FC | 	wrlong	arg04, fp
1f5d4     04 E4 05 F1 | 	add	objptr, #4
1f5d8     F2 18 02 FB | 	rdlong	arg04, objptr
1f5dc     04 4E 05 F1 | 	add	fp, #4
1f5e0     A7 18 62 FC | 	wrlong	arg04, fp
1f5e4     04 E4 05 F1 | 	add	objptr, #4
1f5e8     F2 02 48 FC | 	wrbyte	#1, objptr
1f5ec     01 00 00 FF 
1f5f0     20 E4 85 F1 | 	sub	objptr, ##544
1f5f4     38 4E 85 F1 | 	sub	fp, #56
1f5f8     A7 18 CA FA | 	rdbyte	arg04, fp wz
1f5fc     04 4E 85 F1 | 	sub	fp, #4
1f600                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f600                 | '             return RES_NOTRDY;
1f600     03 FA 05 56 |  if_ne	mov	result1, #3
1f604     D8 05 90 5D |  if_ne	jmp	#LR__3288
1f608     13 00 00 FF 
1f60c     10 13 06 F6 | 	mov	arg01, ##10000
1f610     30 9B BF FD | 	call	#__system___waitus
1f614     30 4E 05 F1 | 	add	fp, #48
1f618     A7 12 02 FB | 	rdlong	arg01, fp
1f61c     09 01 08 FC | 	wrpin	#0, arg01
1f620     04 4E 05 F1 | 	add	fp, #4
1f624     A7 12 02 FB | 	rdlong	arg01, fp
1f628     09 01 08 FC | 	wrpin	#0, arg01
1f62c     04 4E 05 F1 | 	add	fp, #4
1f630     A7 12 02 FB | 	rdlong	arg01, fp
1f634     09 01 08 FC | 	wrpin	#0, arg01
1f638     04 4E 05 F1 | 	add	fp, #4
1f63c     A7 12 02 FB | 	rdlong	arg01, fp
1f640     09 00 80 FF 
1f644     09 01 08 FC | 	wrpin	##4608, arg01
1f648     0C 4E 85 F1 | 	sub	fp, #12
1f64c     A7 12 02 FB | 	rdlong	arg01, fp
1f650     59 12 62 FD | 	drvh	arg01
1f654     04 4E 05 F1 | 	add	fp, #4
1f658     A7 12 02 FB | 	rdlong	arg01, fp
1f65c     59 12 62 FD | 	drvh	arg01
1f660     04 4E 05 F1 | 	add	fp, #4
1f664     A7 12 02 FB | 	rdlong	arg01, fp
1f668     59 12 62 FD | 	drvh	arg01
1f66c     04 4E 05 F1 | 	add	fp, #4
1f670     A7 12 02 FB | 	rdlong	arg01, fp
1f674     59 12 62 FD | 	drvh	arg01
1f678     20 4E 85 F1 | 	sub	fp, #32
1f67c     00 04 80 FF 
1f680     A7 20 68 FC | 	wrlong	##524304, fp
1f684     04 4E 05 F1 | 	add	fp, #4
1f688     20 03 80 FF 
1f68c     A7 90 68 FC | 	wrlong	##409672, fp
1f690     14 4E 05 F1 | 	add	fp, #20
1f694     A7 1E 02 FB | 	rdlong	local01, fp
1f698     18 4E 85 F1 | 	sub	fp, #24
1f69c     A7 16 02 FB | 	rdlong	arg03, fp
1f6a0     40 1E 62 FD | 	dirl	local01
1f6a4     A0 03 80 FF 
1f6a8     0F 91 08 FC | 	wrpin	##475208, local01
1f6ac     0F 17 12 FC | 	wxpin	arg03, local01
1f6b0     0F 01 28 FC | 	wypin	#0, local01
1f6b4     41 1E 62 FD | 	dirh	local01
1f6b8     1C 4E 05 F1 | 	add	fp, #28
1f6bc     A7 20 02 FB | 	rdlong	local02, fp
1f6c0     10 1F 82 F1 | 	sub	local01, local02
1f6c4     07 1E 06 F5 | 	and	local01, #7
1f6c8     18 1E 66 F0 | 	shl	local01, #24
1f6cc     78 14 06 F6 | 	mov	arg02, #120
1f6d0     0F 15 42 F5 | 	or	arg02, local01
1f6d4     14 4E 85 F1 | 	sub	fp, #20
1f6d8     A7 14 62 FC | 	wrlong	arg02, fp
1f6dc     14 4E 05 F1 | 	add	fp, #20
1f6e0     A7 12 02 FB | 	rdlong	arg01, fp
1f6e4     10 14 26 F4 | 	bith	arg02, #16
1f6e8     40 12 62 FD | 	dirl	arg01
1f6ec     09 15 02 FC | 	wrpin	arg02, arg01
1f6f0     09 3F 18 FC | 	wxpin	#31, arg01
1f6f4     FF FF FF FF 
1f6f8     09 FF 2B FC | 	wypin	##-1, arg01
1f6fc     41 12 62 FD | 	dirh	arg01
1f700     04 4E 85 F1 | 	sub	fp, #4
1f704     A7 14 02 FB | 	rdlong	arg02, fp
1f708     08 4E 05 F1 | 	add	fp, #8
1f70c     A7 22 02 FB | 	rdlong	local03, fp
1f710     11 15 82 F1 | 	sub	arg02, local03
1f714     07 14 06 F5 | 	and	arg02, #7
1f718     18 14 66 F0 | 	shl	arg02, #24
1f71c     14 4E 85 F1 | 	sub	fp, #20
1f720     A7 14 62 FC | 	wrlong	arg02, fp
1f724     29 00 00 FF 
1f728     7A 14 46 F5 | 	or	arg02, ##21114
1f72c     A7 14 62 FC | 	wrlong	arg02, fp
1f730     14 4E 05 F1 | 	add	fp, #20
1f734     A7 12 02 FB | 	rdlong	arg01, fp
1f738     40 12 62 FD | 	dirl	arg01
1f73c     09 15 02 FC | 	wrpin	arg02, arg01
1f740     09 4F 18 FC | 	wxpin	#39, arg01
1f744     09 01 28 FC | 	wypin	#0, arg01
1f748     41 12 62 FD | 	dirh	arg01
1f74c     28 4E 85 F1 | 	sub	fp, #40
1f750     A7 12 02 F6 | 	mov	arg01, fp
1f754     14 4E 85 F1 | 	sub	fp, #20
1f758     0A 14 06 F6 | 	mov	arg02, #10
1f75c     0C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f760     00 12 06 F6 | 	mov	arg01, #0
1f764     00 14 06 F6 | 	mov	arg02, #0
1f768     D8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f76c     14 80 B0 FD | 	call	#_fatfs_cc_deselect_1009
1f770     64 12 06 F6 | 	mov	arg01, #100
1f774     CC 99 BF FD | 	call	#__system___waitus
1f778     14 4E 05 F1 | 	add	fp, #20
1f77c     A7 12 02 F6 | 	mov	arg01, fp
1f780     14 4E 85 F1 | 	sub	fp, #20
1f784     0A 14 06 F6 | 	mov	arg02, #10
1f788     E0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f78c     0C 4E 05 F1 | 	add	fp, #12
1f790     A7 00 48 FC | 	wrbyte	#0, fp
1f794     0C 4E 85 F1 | 	sub	fp, #12
1f798     00 12 06 F6 | 	mov	arg01, #0
1f79c     00 14 06 F6 | 	mov	arg02, #0
1f7a0     A0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f7a4     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1f7a8     01 18 0E F2 | 	cmp	arg04, #1 wz
1f7ac     B8 03 90 5D |  if_ne	jmp	#LR__3287
1f7b0     08 12 06 F6 | 	mov	arg01, #8
1f7b4     AA 15 06 F6 | 	mov	arg02, #426
1f7b8     88 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f7bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f7c0     01 FA 0D F2 | 	cmp	result1, #1 wz
1f7c4     98 01 90 5D |  if_ne	jmp	#LR__3273
1f7c8     14 4E 05 F1 | 	add	fp, #20
1f7cc     A7 12 02 F6 | 	mov	arg01, fp
1f7d0     14 4E 85 F1 | 	sub	fp, #20
1f7d4     04 14 06 F6 | 	mov	arg02, #4
1f7d8     90 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f7dc     16 4E 05 F1 | 	add	fp, #22
1f7e0     A7 24 C2 FA | 	rdbyte	local04, fp
1f7e4     16 4E 85 F1 | 	sub	fp, #22
1f7e8     01 24 0E F2 | 	cmp	local04, #1 wz
1f7ec     17 4E 05 A1 |  if_e	add	fp, #23
1f7f0     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1f7f4     17 4E 85 A1 |  if_e	sub	fp, #23
1f7f8     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1f7fc     68 03 90 5D |  if_ne	jmp	#LR__3286
1f800                 | ' 				for (tmr = 1000; tmr; tmr--) {
1f800     18 4E 05 F1 | 	add	fp, #24
1f804     01 00 80 FF 
1f808     A7 D0 6B FC | 	wrlong	##1000, fp
1f80c     18 4E 85 F1 | 	sub	fp, #24
1f810                 | LR__3270
1f810     18 4E 05 F1 | 	add	fp, #24
1f814     A7 1E 0A FB | 	rdlong	local01, fp wz
1f818     18 4E 85 F1 | 	sub	fp, #24
1f81c     3C 00 90 AD |  if_e	jmp	#LR__3271
1f820     A9 12 06 F6 | 	mov	arg01, #169
1f824     1E 14 C6 F9 | 	decod	arg02, #30
1f828     18 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f82c     FD 24 02 F6 | 	mov	local04, result1
1f830     07 24 4E F7 | 	zerox	local04, #7 wz
1f834     24 00 90 AD |  if_e	jmp	#LR__3271
1f838     01 00 00 FF 
1f83c     E8 13 06 F6 | 	mov	arg01, ##1000
1f840     00 99 BF FD | 	call	#__system___waitus
1f844     18 4E 05 F1 | 	add	fp, #24
1f848     A7 24 02 FB | 	rdlong	local04, fp
1f84c     01 24 86 F1 | 	sub	local04, #1
1f850     A7 24 62 FC | 	wrlong	local04, fp
1f854     18 4E 85 F1 | 	sub	fp, #24
1f858     B4 FF 9F FD | 	jmp	#LR__3270
1f85c                 | LR__3271
1f85c     18 4E 05 F1 | 	add	fp, #24
1f860     A7 24 0A FB | 	rdlong	local04, fp wz
1f864     18 4E 85 F1 | 	sub	fp, #24
1f868     4C 00 90 AD |  if_e	jmp	#LR__3272
1f86c     3A 12 06 F6 | 	mov	arg01, #58
1f870     00 14 06 F6 | 	mov	arg02, #0
1f874     CC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f878     FD 22 02 F6 | 	mov	local03, result1
1f87c     07 22 4E F7 | 	zerox	local03, #7 wz
1f880     34 00 90 5D |  if_ne	jmp	#LR__3272
1f884     14 4E 05 F1 | 	add	fp, #20
1f888     A7 12 02 F6 | 	mov	arg01, fp
1f88c     14 4E 85 F1 | 	sub	fp, #20
1f890     04 14 06 F6 | 	mov	arg02, #4
1f894     D4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f898     14 4E 05 F1 | 	add	fp, #20
1f89c     A7 1E C2 FA | 	rdbyte	local01, fp
1f8a0     40 1E CE F7 | 	test	local01, #64 wz
1f8a4     0C 24 06 56 |  if_ne	mov	local04, #12
1f8a8     04 24 06 A6 |  if_e	mov	local04, #4
1f8ac     08 4E 85 F1 | 	sub	fp, #8
1f8b0     A7 24 42 FC | 	wrbyte	local04, fp
1f8b4     0C 4E 85 F1 | 	sub	fp, #12
1f8b8                 | LR__3272
1f8b8     14 24 06 FB | 	rdlong	local04, #20
1f8bc     18 4E 05 F1 | 	add	fp, #24
1f8c0     A7 24 62 FC | 	wrlong	local04, fp
1f8c4     0C 4E 05 F1 | 	add	fp, #12
1f8c8     A7 24 02 FB | 	rdlong	local04, fp
1f8cc     1B 24 26 F4 | 	bith	local04, #27
1f8d0     A7 24 62 FC | 	wrlong	local04, fp
1f8d4     0C 4E 85 F1 | 	sub	fp, #12
1f8d8     A7 24 02 FB | 	rdlong	local04, fp
1f8dc     18 4E 85 F1 | 	sub	fp, #24
1f8e0     68 78 04 FF 
1f8e4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f8e8     1C 4E 05 C1 |  if_b	add	fp, #28
1f8ec     00 01 80 CF 
1f8f0     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f8f4     1C 4E 85 C1 |  if_b	sub	fp, #28
1f8f8     6C 02 90 CD |  if_b	jmp	#LR__3286
1f8fc     18 4E 05 F1 | 	add	fp, #24
1f900     A7 24 02 FB | 	rdlong	local04, fp
1f904     18 4E 85 F1 | 	sub	fp, #24
1f908     E1 F5 05 FF 
1f90c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f910     1C 4E 05 C1 |  if_b	add	fp, #28
1f914     00 01 80 CF 
1f918     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1f91c     1C 4E 85 C1 |  if_b	sub	fp, #28
1f920     44 02 90 CD |  if_b	jmp	#LR__3286
1f924     18 4E 05 F1 | 	add	fp, #24
1f928     A7 24 02 FB | 	rdlong	local04, fp
1f92c     18 4E 85 F1 | 	sub	fp, #24
1f930     3B 58 08 FF 
1f934     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1f938     1C 4E 05 C1 |  if_b	add	fp, #28
1f93c     00 01 80 CF 
1f940     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1f944     1C 4E 85 C1 |  if_b	sub	fp, #28
1f948     1C 02 90 CD |  if_b	jmp	#LR__3286
1f94c     1C 4E 05 F1 | 	add	fp, #28
1f950     80 01 80 FF 
1f954     A7 10 68 FC | 	wrlong	##196616, fp
1f958     1C 4E 85 F1 | 	sub	fp, #28
1f95c     08 02 90 FD | 	jmp	#LR__3286
1f960                 | LR__3273
1f960     A9 12 06 F6 | 	mov	arg01, #169
1f964     00 14 06 F6 | 	mov	arg02, #0
1f968     D8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f96c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1f970     02 24 16 F2 | 	cmp	local04, #2 wc
1f974     18 00 90 3D |  if_ae	jmp	#LR__3274
1f978     0C 4E 05 F1 | 	add	fp, #12
1f97c     A7 04 48 FC | 	wrbyte	#2, fp
1f980     04 4E 05 F1 | 	add	fp, #4
1f984     A7 52 49 FC | 	wrbyte	#169, fp
1f988     10 4E 85 F1 | 	sub	fp, #16
1f98c     14 00 90 FD | 	jmp	#LR__3275
1f990                 | LR__3274
1f990     0C 4E 05 F1 | 	add	fp, #12
1f994     A7 02 48 FC | 	wrbyte	#1, fp
1f998     04 4E 05 F1 | 	add	fp, #4
1f99c     A7 02 48 FC | 	wrbyte	#1, fp
1f9a0     10 4E 85 F1 | 	sub	fp, #16
1f9a4                 | LR__3275
1f9a4                 | ' 				ty =  0x01 ; cmd =  (1) ;
1f9a4                 | ' 			}
1f9a4                 | ' 			for (tmr = 1000; tmr; tmr--) {
1f9a4     18 4E 05 F1 | 	add	fp, #24
1f9a8     01 00 80 FF 
1f9ac     A7 D0 6B FC | 	wrlong	##1000, fp
1f9b0     18 4E 85 F1 | 	sub	fp, #24
1f9b4                 | LR__3276
1f9b4     18 4E 05 F1 | 	add	fp, #24
1f9b8     A7 22 0A FB | 	rdlong	local03, fp wz
1f9bc     18 4E 85 F1 | 	sub	fp, #24
1f9c0     44 00 90 AD |  if_e	jmp	#LR__3277
1f9c4     10 4E 05 F1 | 	add	fp, #16
1f9c8     A7 12 C2 FA | 	rdbyte	arg01, fp
1f9cc     10 4E 85 F1 | 	sub	fp, #16
1f9d0     00 14 06 F6 | 	mov	arg02, #0
1f9d4     6C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f9d8     FD 24 02 F6 | 	mov	local04, result1
1f9dc     07 24 4E F7 | 	zerox	local04, #7 wz
1f9e0     24 00 90 AD |  if_e	jmp	#LR__3277
1f9e4     01 00 00 FF 
1f9e8     E8 13 06 F6 | 	mov	arg01, ##1000
1f9ec     54 97 BF FD | 	call	#__system___waitus
1f9f0     18 4E 05 F1 | 	add	fp, #24
1f9f4     A7 24 02 FB | 	rdlong	local04, fp
1f9f8     01 24 86 F1 | 	sub	local04, #1
1f9fc     A7 24 62 FC | 	wrlong	local04, fp
1fa00     18 4E 85 F1 | 	sub	fp, #24
1fa04     AC FF 9F FD | 	jmp	#LR__3276
1fa08                 | LR__3277
1fa08     18 4E 05 F1 | 	add	fp, #24
1fa0c     A7 24 0A FB | 	rdlong	local04, fp wz
1fa10     18 4E 85 F1 | 	sub	fp, #24
1fa14     14 00 90 AD |  if_e	jmp	#LR__3278
1fa18     10 12 06 F6 | 	mov	arg01, #16
1fa1c     09 14 C6 F9 | 	decod	arg02, #9
1fa20     20 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fa24     07 FA 4D F7 | 	zerox	result1, #7 wz
1fa28     0C 00 90 AD |  if_e	jmp	#LR__3279
1fa2c                 | LR__3278
1fa2c     0C 4E 05 F1 | 	add	fp, #12
1fa30     A7 00 48 FC | 	wrbyte	#0, fp
1fa34     0C 4E 85 F1 | 	sub	fp, #12
1fa38                 | LR__3279
1fa38     14 24 06 FB | 	rdlong	local04, #20
1fa3c     18 4E 05 F1 | 	add	fp, #24
1fa40     A7 24 62 FC | 	wrlong	local04, fp
1fa44     18 4E 85 F1 | 	sub	fp, #24
1fa48     F0 FA 02 FF 
1fa4c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1fa50     18 00 90 3D |  if_ae	jmp	#LR__3280
1fa54     24 4E 05 F1 | 	add	fp, #36
1fa58     A7 24 02 FB | 	rdlong	local04, fp
1fa5c     1B 24 26 F4 | 	bith	local04, #27
1fa60     A7 24 62 FC | 	wrlong	local04, fp
1fa64     24 4E 85 F1 | 	sub	fp, #36
1fa68     2C 00 90 FD | 	jmp	#LR__3281
1fa6c                 | LR__3280
1fa6c     18 4E 05 F1 | 	add	fp, #24
1fa70     A7 24 02 FB | 	rdlong	local04, fp
1fa74     18 4E 85 F1 | 	sub	fp, #24
1fa78     E1 F5 05 FF 
1fa7c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1fa80     24 4E 05 C1 |  if_b	add	fp, #36
1fa84     A7 24 02 CB |  if_b	rdlong	local04, fp
1fa88     80 00 04 CF 
1fa8c     00 24 46 C5 |  if_b	or	local04, ##134283264
1fa90     A7 24 62 CC |  if_b	wrlong	local04, fp
1fa94     24 4E 85 C1 |  if_b	sub	fp, #36
1fa98                 | LR__3281
1fa98     18 4E 05 F1 | 	add	fp, #24
1fa9c     A7 24 02 FB | 	rdlong	local04, fp
1faa0     18 4E 85 F1 | 	sub	fp, #24
1faa4     F0 FA 02 FF 
1faa8     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1faac     1C 4E 05 C1 |  if_b	add	fp, #28
1fab0     00 01 80 CF 
1fab4     A7 08 68 CC |  if_b	wrlong	##131076, fp
1fab8     1C 4E 85 C1 |  if_b	sub	fp, #28
1fabc     A8 00 90 CD |  if_b	jmp	#LR__3285
1fac0     18 4E 05 F1 | 	add	fp, #24
1fac4     A7 24 02 FB | 	rdlong	local04, fp
1fac8     18 4E 85 F1 | 	sub	fp, #24
1facc     68 78 04 FF 
1fad0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1fad4     1C 4E 05 C1 |  if_b	add	fp, #28
1fad8     80 01 80 CF 
1fadc     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1fae0     1C 4E 85 C1 |  if_b	sub	fp, #28
1fae4     80 00 90 CD |  if_b	jmp	#LR__3284
1fae8     18 4E 05 F1 | 	add	fp, #24
1faec     A7 24 02 FB | 	rdlong	local04, fp
1faf0     18 4E 85 F1 | 	sub	fp, #24
1faf4     E1 F5 05 FF 
1faf8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1fafc     1C 4E 05 C1 |  if_b	add	fp, #28
1fb00     00 02 80 CF 
1fb04     A7 10 68 CC |  if_b	wrlong	##262152, fp
1fb08     1C 4E 85 C1 |  if_b	sub	fp, #28
1fb0c     58 00 90 CD |  if_b	jmp	#LR__3283
1fb10     18 4E 05 F1 | 	add	fp, #24
1fb14     A7 24 02 FB | 	rdlong	local04, fp
1fb18     18 4E 85 F1 | 	sub	fp, #24
1fb1c     59 73 07 FF 
1fb20     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1fb24     1C 4E 05 C1 |  if_b	add	fp, #28
1fb28     80 02 80 CF 
1fb2c     A7 14 68 CC |  if_b	wrlong	##327690, fp
1fb30     1C 4E 85 C1 |  if_b	sub	fp, #28
1fb34     30 00 90 CD |  if_b	jmp	#LR__3282
1fb38     18 4E 05 F1 | 	add	fp, #24
1fb3c     A7 24 02 FB | 	rdlong	local04, fp
1fb40     18 4E 85 F1 | 	sub	fp, #24
1fb44     D1 F0 08 FF 
1fb48     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1fb4c     1C 4E 05 C1 |  if_b	add	fp, #28
1fb50     00 03 80 CF 
1fb54     A7 18 68 CC |  if_b	wrlong	##393228, fp
1fb58     1C 4E 85 F3 | 	sumc	fp, #28
1fb5c     80 03 80 3F 
1fb60     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1fb64     1C 4E 85 31 |  if_ae	sub	fp, #28
1fb68                 | LR__3282
1fb68                 | LR__3283
1fb68                 | LR__3284
1fb68                 | LR__3285
1fb68                 | LR__3286
1fb68                 | LR__3287
1fb68     0C 4E 05 F1 | 	add	fp, #12
1fb6c     A7 24 C2 FA | 	rdbyte	local04, fp
1fb70     01 00 00 FF 
1fb74     21 E4 05 F1 | 	add	objptr, ##545
1fb78     F2 24 42 FC | 	wrbyte	local04, objptr
1fb7c     A7 1E CA FA | 	rdbyte	local01, fp wz
1fb80     00 24 06 56 |  if_ne	mov	local04, #0
1fb84     01 24 06 A6 |  if_e	mov	local04, #1
1fb88     20 4E 05 F1 | 	add	fp, #32
1fb8c     A7 24 42 FC | 	wrbyte	local04, fp
1fb90     A7 24 C2 FA | 	rdbyte	local04, fp
1fb94     2C 4E 85 F1 | 	sub	fp, #44
1fb98     01 E4 85 F1 | 	sub	objptr, #1
1fb9c     F2 24 42 FC | 	wrbyte	local04, objptr
1fba0     01 00 00 FF 
1fba4     20 E4 85 F1 | 	sub	objptr, ##544
1fba8     D8 7B B0 FD | 	call	#_fatfs_cc_deselect_1009
1fbac     34 4E 05 F1 | 	add	fp, #52
1fbb0     A7 12 02 FB | 	rdlong	arg01, fp
1fbb4     18 4E 85 F1 | 	sub	fp, #24
1fbb8     A7 14 02 FB | 	rdlong	arg02, fp
1fbbc     09 15 12 FC | 	wxpin	arg02, arg01
1fbc0     1C 4E 05 F1 | 	add	fp, #28
1fbc4     A7 12 02 FB | 	rdlong	arg01, fp
1fbc8     14 4E 85 F1 | 	sub	fp, #20
1fbcc     A7 14 02 FB | 	rdlong	arg02, fp
1fbd0     09 15 02 FC | 	wrpin	arg02, arg01
1fbd4                 | ' 
1fbd4                 | ' 		}
1fbd4                 | ' 	}
1fbd4                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1fbd4                 | ' 	CardType = ty;
1fbd4                 | ' 	s = ty ? 0 :  0x01 ;
1fbd4                 | ' 	Stat = s;
1fbd4                 | ' 
1fbd4                 | ' 	deselect();
1fbd4                 | ' 
1fbd4                 | ' 
1fbd4                 | ' 	_wxpin( PIN_CLK, ck_div );
1fbd4                 | ' 	_wrpin( PIN_DI, spm_tx );
1fbd4                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1fbd4                 | ' 	return s;
1fbd4     08 4E 05 F1 | 	add	fp, #8
1fbd8     A7 FA C1 FA | 	rdbyte	result1, fp
1fbdc     2C 4E 85 F1 | 	sub	fp, #44
1fbe0                 | LR__3288
1fbe0     A7 F0 03 F6 | 	mov	ptra, fp
1fbe4     B2 00 A0 FD | 	call	#popregs_
1fbe8                 | _fatfs_cc_disk_initialize_ret
1fbe8     2D 00 64 FD | 	ret
1fbec                 | 
1fbec                 | _fatfs_cc_disk_read
1fbec     05 4A 05 F6 | 	mov	COUNT_, #5
1fbf0     A8 00 A0 FD | 	call	#pushregs_
1fbf4     0A 1F 02 F6 | 	mov	local01, arg02
1fbf8     0B 21 02 F6 | 	mov	local02, arg03
1fbfc     0C 23 02 F6 | 	mov	local03, arg04
1fc00     00 12 0E F2 | 	cmp	arg01, #0 wz
1fc04     01 FA 05 56 |  if_ne	mov	result1, #1
1fc08                 | ' 
1fc08                 | ' 	return Stat;
1fc08     01 00 00 AF 
1fc0c     20 E4 05 A1 |  if_e	add	objptr, ##544
1fc10     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fc14     01 00 00 AF 
1fc18     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fc1c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fc20     01 FA CD F7 | 	test	result1, #1 wz
1fc24     03 FA 05 56 |  if_ne	mov	result1, #3
1fc28     84 00 90 5D |  if_ne	jmp	#LR__3292
1fc2c     01 00 00 FF 
1fc30     21 E4 05 F1 | 	add	objptr, ##545
1fc34     F2 24 C2 FA | 	rdbyte	local04, objptr
1fc38     01 00 00 FF 
1fc3c     21 E4 85 F1 | 	sub	objptr, ##545
1fc40     08 24 CE F7 | 	test	local04, #8 wz
1fc44     09 20 66 A0 |  if_e	shl	local02, #9
1fc48     02 22 16 F2 | 	cmp	local03, #2 wc
1fc4c     12 24 06 36 |  if_ae	mov	local04, #18
1fc50     11 24 06 C6 |  if_b	mov	local04, #17
1fc54     10 15 02 F6 | 	mov	arg02, local02
1fc58     12 13 02 F6 | 	mov	arg01, local04
1fc5c     E4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fc60     FD 26 02 F6 | 	mov	local05, result1
1fc64     07 26 4E F7 | 	zerox	local05, #7 wz
1fc68     30 00 90 5D |  if_ne	jmp	#LR__3291
1fc6c                 | ' 		do {
1fc6c                 | LR__3290
1fc6c     0F 13 02 F6 | 	mov	arg01, local01
1fc70     09 14 C6 F9 | 	decod	arg02, #9
1fc74     20 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fc78     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc7c     01 00 00 5F 
1fc80     00 1E 06 51 |  if_ne	add	local01, ##512
1fc84     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3290
1fc88     12 25 E2 F8 | 	getbyte	local04, local04, #0
1fc8c     12 24 0E F2 | 	cmp	local04, #18 wz
1fc90     0C 12 06 A6 |  if_e	mov	arg01, #12
1fc94     00 14 06 A6 |  if_e	mov	arg02, #0
1fc98     A8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1023
1fc9c                 | LR__3291
1fc9c     E4 7A B0 FD | 	call	#_fatfs_cc_deselect_1009
1fca0                 | ' 	}
1fca0                 | ' 	deselect();
1fca0                 | ' 
1fca0                 | ' 	return count ? RES_ERROR : RES_OK;
1fca0     00 22 0E F2 | 	cmp	local03, #0 wz
1fca4     01 26 06 56 |  if_ne	mov	local05, #1
1fca8     00 26 06 A6 |  if_e	mov	local05, #0
1fcac     13 FB 01 F6 | 	mov	result1, local05
1fcb0                 | LR__3292
1fcb0     A7 F0 03 F6 | 	mov	ptra, fp
1fcb4     B2 00 A0 FD | 	call	#popregs_
1fcb8                 | _fatfs_cc_disk_read_ret
1fcb8     2D 00 64 FD | 	ret
1fcbc                 | 
1fcbc                 | _fatfs_cc_disk_write
1fcbc     04 4A 05 F6 | 	mov	COUNT_, #4
1fcc0     A8 00 A0 FD | 	call	#pushregs_
1fcc4     0A 1F 02 F6 | 	mov	local01, arg02
1fcc8     0C 21 02 F6 | 	mov	local02, arg04
1fccc     0B 23 02 F6 | 	mov	local03, arg03
1fcd0     00 12 0E F2 | 	cmp	arg01, #0 wz
1fcd4     01 FA 05 56 |  if_ne	mov	result1, #1
1fcd8                 | ' 
1fcd8                 | ' 	return Stat;
1fcd8     01 00 00 AF 
1fcdc     20 E4 05 A1 |  if_e	add	objptr, ##544
1fce0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fce4     01 00 00 AF 
1fce8     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fcec     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fcf0     01 FA CD F7 | 	test	result1, #1 wz
1fcf4     03 FA 05 56 |  if_ne	mov	result1, #3
1fcf8     D4 00 90 5D |  if_ne	jmp	#LR__3304
1fcfc     01 00 00 FF 
1fd00     21 E4 05 F1 | 	add	objptr, ##545
1fd04     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fd08     01 00 00 FF 
1fd0c     21 E4 85 F1 | 	sub	objptr, ##545
1fd10     08 16 CE F7 | 	test	arg03, #8 wz
1fd14     09 22 66 A0 |  if_e	shl	local03, #9
1fd18     01 20 0E F2 | 	cmp	local02, #1 wz
1fd1c     30 00 90 5D |  if_ne	jmp	#LR__3300
1fd20     18 12 06 F6 | 	mov	arg01, #24
1fd24     11 15 02 F6 | 	mov	arg02, local03
1fd28     18 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fd2c     FD 24 02 F6 | 	mov	local04, result1
1fd30     07 24 4E F7 | 	zerox	local04, #7 wz
1fd34     84 00 90 5D |  if_ne	jmp	#LR__3303
1fd38     0F 13 02 F6 | 	mov	arg01, local01
1fd3c     FE 14 06 F6 | 	mov	arg02, #254
1fd40     34 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fd44     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd48     00 20 06 56 |  if_ne	mov	local02, #0
1fd4c     6C 00 90 FD | 	jmp	#LR__3303
1fd50                 | LR__3300
1fd50     01 00 00 FF 
1fd54     21 E4 05 F1 | 	add	objptr, ##545
1fd58     F2 24 C2 FA | 	rdbyte	local04, objptr
1fd5c     01 00 00 FF 
1fd60     21 E4 85 F1 | 	sub	objptr, ##545
1fd64     06 24 CE F7 | 	test	local04, #6 wz
1fd68     97 12 06 56 |  if_ne	mov	arg01, #151
1fd6c     10 15 02 56 |  if_ne	mov	arg02, local02
1fd70     D0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1023
1fd74     11 15 02 F6 | 	mov	arg02, local03
1fd78     19 12 06 F6 | 	mov	arg01, #25
1fd7c     C4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fd80     FD 24 02 F6 | 	mov	local04, result1
1fd84     07 24 4E F7 | 	zerox	local04, #7 wz
1fd88     30 00 90 5D |  if_ne	jmp	#LR__3302
1fd8c                 | ' 			do {
1fd8c                 | LR__3301
1fd8c     0F 13 02 F6 | 	mov	arg01, local01
1fd90     FC 14 06 F6 | 	mov	arg02, #252
1fd94     E0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fd98     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd9c     01 00 00 5F 
1fda0     00 1E 06 51 |  if_ne	add	local01, ##512
1fda4     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3301
1fda8     00 12 06 F6 | 	mov	arg01, #0
1fdac     FD 14 06 F6 | 	mov	arg02, #253
1fdb0     C4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fdb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1fdb8     01 20 06 A6 |  if_e	mov	local02, #1
1fdbc                 | LR__3302
1fdbc                 | LR__3303
1fdbc     C4 79 B0 FD | 	call	#_fatfs_cc_deselect_1009
1fdc0                 | ' 				count = 1;
1fdc0                 | ' 		}
1fdc0                 | ' 	}
1fdc0                 | ' 	deselect();
1fdc0                 | ' 
1fdc0                 | ' 	return count ? RES_ERROR : RES_OK;
1fdc0     00 20 0E F2 | 	cmp	local02, #0 wz
1fdc4     01 24 06 56 |  if_ne	mov	local04, #1
1fdc8     00 24 06 A6 |  if_e	mov	local04, #0
1fdcc     12 FB 01 F6 | 	mov	result1, local04
1fdd0                 | LR__3304
1fdd0     A7 F0 03 F6 | 	mov	ptra, fp
1fdd4     B2 00 A0 FD | 	call	#popregs_
1fdd8                 | _fatfs_cc_disk_write_ret
1fdd8     2D 00 64 FD | 	ret
1fddc                 | 
1fddc                 | _fatfs_cc_disk_ioctl
1fddc     01 4A 05 F6 | 	mov	COUNT_, #1
1fde0     A8 00 A0 FD | 	call	#pushregs_
1fde4     30 F0 07 F1 | 	add	ptra, #48
1fde8     04 4E 05 F1 | 	add	fp, #4
1fdec     A7 12 42 FC | 	wrbyte	arg01, fp
1fdf0     04 4E 05 F1 | 	add	fp, #4
1fdf4     A7 14 42 FC | 	wrbyte	arg02, fp
1fdf8     04 4E 05 F1 | 	add	fp, #4
1fdfc     A7 16 62 FC | 	wrlong	arg03, fp
1fe00     08 4E 85 F1 | 	sub	fp, #8
1fe04     A7 12 CA FA | 	rdbyte	arg01, fp wz
1fe08     04 4E 85 F1 | 	sub	fp, #4
1fe0c     01 FA 05 56 |  if_ne	mov	result1, #1
1fe10                 | ' 
1fe10                 | ' 	return Stat;
1fe10     01 00 00 AF 
1fe14     20 E4 05 A1 |  if_e	add	objptr, ##544
1fe18     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fe1c     01 00 00 AF 
1fe20     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fe24     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fe28     01 FA CD F7 | 	test	result1, #1 wz
1fe2c     03 FA 05 56 |  if_ne	mov	result1, #3
1fe30     E4 01 90 5D |  if_ne	jmp	#LR__3318
1fe34     10 4E 05 F1 | 	add	fp, #16
1fe38     A7 02 68 FC | 	wrlong	#1, fp
1fe3c                 | ' 
1fe3c                 | ' 	res = RES_ERROR;
1fe3c                 | ' 	switch (ctrl) {
1fe3c     08 4E 85 F1 | 	sub	fp, #8
1fe40     A7 1E C2 FA | 	rdbyte	local01, fp
1fe44     08 4E 85 F1 | 	sub	fp, #8
1fe48     04 1E 26 F3 | 	fle	local01, #4
1fe4c     30 1E 62 FD | 	jmprel	local01
1fe50                 | LR__3310
1fe50     10 00 90 FD | 	jmp	#LR__3311
1fe54     24 00 90 FD | 	jmp	#LR__3312
1fe58     A0 01 90 FD | 	jmp	#LR__3316
1fe5c     80 01 90 FD | 	jmp	#LR__3315
1fe60     98 01 90 FD | 	jmp	#LR__3316
1fe64                 | LR__3311
1fe64     A0 79 B0 FD | 	call	#_fatfs_cc_select_1013
1fe68     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe6c     10 4E 05 51 |  if_ne	add	fp, #16
1fe70     A7 00 68 5C |  if_ne	wrlong	#0, fp
1fe74     10 4E 85 51 |  if_ne	sub	fp, #16
1fe78                 | ' 			break;
1fe78     8C 01 90 FD | 	jmp	#LR__3317
1fe7c                 | LR__3312
1fe7c     09 12 06 F6 | 	mov	arg01, #9
1fe80     00 14 06 F6 | 	mov	arg02, #0
1fe84     BC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fe88     FD 1E 02 F6 | 	mov	local01, result1
1fe8c     07 1E 4E F7 | 	zerox	local01, #7 wz
1fe90     74 01 90 5D |  if_ne	jmp	#LR__3317
1fe94     18 4E 05 F1 | 	add	fp, #24
1fe98     A7 12 02 F6 | 	mov	arg01, fp
1fe9c     18 4E 85 F1 | 	sub	fp, #24
1fea0     10 14 06 F6 | 	mov	arg02, #16
1fea4     F0 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fea8     00 FA 0D F2 | 	cmp	result1, #0 wz
1feac     58 01 90 AD |  if_e	jmp	#LR__3317
1feb0     18 4E 05 F1 | 	add	fp, #24
1feb4     A7 1E C2 FA | 	rdbyte	local01, fp
1feb8     18 4E 85 F1 | 	sub	fp, #24
1febc     06 1E 46 F0 | 	shr	local01, #6
1fec0     01 1E 0E F2 | 	cmp	local01, #1 wz
1fec4     5C 00 90 5D |  if_ne	jmp	#LR__3313
1fec8     21 4E 05 F1 | 	add	fp, #33
1fecc     A7 1E C2 FA | 	rdbyte	local01, fp
1fed0     01 4E 85 F1 | 	sub	fp, #1
1fed4     A7 FA C1 FA | 	rdbyte	result1, fp
1fed8     FD FA 31 F9 | 	getword	result1, result1, #0
1fedc     08 FA 65 F0 | 	shl	result1, #8
1fee0     FD 1E 02 F1 | 	add	local01, result1
1fee4     01 4E 85 F1 | 	sub	fp, #1
1fee8     A7 FA C1 FA | 	rdbyte	result1, fp
1feec     3F FA 05 F5 | 	and	result1, #63
1fef0     10 FA 65 F0 | 	shl	result1, #16
1fef4     FD 1E 02 F1 | 	add	local01, result1
1fef8     01 1E 06 F1 | 	add	local01, #1
1fefc     09 4E 05 F1 | 	add	fp, #9
1ff00     A7 1E 62 FC | 	wrlong	local01, fp
1ff04     1C 4E 85 F1 | 	sub	fp, #28
1ff08     A7 1E 02 FB | 	rdlong	local01, fp
1ff0c     1C 4E 05 F1 | 	add	fp, #28
1ff10     A7 FA 01 FB | 	rdlong	result1, fp
1ff14     28 4E 85 F1 | 	sub	fp, #40
1ff18     0A FA 65 F0 | 	shl	result1, #10
1ff1c     0F FB 61 FC | 	wrlong	result1, local01
1ff20     AC 00 90 FD | 	jmp	#LR__3314
1ff24                 | LR__3313
1ff24     1D 4E 05 F1 | 	add	fp, #29
1ff28     A7 1E C2 FA | 	rdbyte	local01, fp
1ff2c     0F 1F 42 F8 | 	getnib	local01, local01, #0
1ff30     05 4E 05 F1 | 	add	fp, #5
1ff34     A7 FA C1 FA | 	rdbyte	result1, fp
1ff38     80 FA 05 F5 | 	and	result1, #128
1ff3c     07 FA C5 F0 | 	sar	result1, #7
1ff40     FD 1E 02 F1 | 	add	local01, result1
1ff44     01 4E 85 F1 | 	sub	fp, #1
1ff48     A7 FA C1 FA | 	rdbyte	result1, fp
1ff4c     03 FA 05 F5 | 	and	result1, #3
1ff50     01 FA 65 F0 | 	shl	result1, #1
1ff54     FD 1E 02 F1 | 	add	local01, result1
1ff58     02 1E 06 F1 | 	add	local01, #2
1ff5c     0D 4E 85 F1 | 	sub	fp, #13
1ff60     A7 1E 42 FC | 	wrbyte	local01, fp
1ff64     0C 4E 05 F1 | 	add	fp, #12
1ff68     A7 1E C2 FA | 	rdbyte	local01, fp
1ff6c     06 1E 46 F0 | 	shr	local01, #6
1ff70     01 4E 85 F1 | 	sub	fp, #1
1ff74     A7 FA C1 FA | 	rdbyte	result1, fp
1ff78     FD FA 31 F9 | 	getword	result1, result1, #0
1ff7c     02 FA 65 F0 | 	shl	result1, #2
1ff80     FD 1E 02 F1 | 	add	local01, result1
1ff84     01 4E 85 F1 | 	sub	fp, #1
1ff88     A7 FA C1 FA | 	rdbyte	result1, fp
1ff8c     03 FA 05 F5 | 	and	result1, #3
1ff90     FD FA 31 F9 | 	getword	result1, result1, #0
1ff94     0A FA 65 F0 | 	shl	result1, #10
1ff98     FD 1E 02 F1 | 	add	local01, result1
1ff9c     01 1E 06 F1 | 	add	local01, #1
1ffa0     0A 4E 05 F1 | 	add	fp, #10
1ffa4     A7 1E 62 FC | 	wrlong	local01, fp
1ffa8     1C 4E 85 F1 | 	sub	fp, #28
1ffac     A7 1E 02 FB | 	rdlong	local01, fp
1ffb0     1C 4E 05 F1 | 	add	fp, #28
1ffb4     A7 FA 01 FB | 	rdlong	result1, fp
1ffb8     14 4E 85 F1 | 	sub	fp, #20
1ffbc     A7 16 C2 FA | 	rdbyte	arg03, fp
1ffc0     14 4E 85 F1 | 	sub	fp, #20
1ffc4     09 16 86 F1 | 	sub	arg03, #9
1ffc8     0B FB 61 F0 | 	shl	result1, arg03
1ffcc     0F FB 61 FC | 	wrlong	result1, local01
1ffd0                 | LR__3314
1ffd0     10 4E 05 F1 | 	add	fp, #16
1ffd4     A7 00 68 FC | 	wrlong	#0, fp
1ffd8     10 4E 85 F1 | 	sub	fp, #16
1ffdc                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1ffdc                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1ffdc                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1ffdc                 | ' 				}
1ffdc                 | ' 				res = RES_OK;
1ffdc                 | ' 			}
1ffdc                 | ' 			break;
1ffdc     28 00 90 FD | 	jmp	#LR__3317
1ffe0                 | LR__3315
1ffe0     0C 4E 05 F1 | 	add	fp, #12
1ffe4     A7 1E 02 FB | 	rdlong	local01, fp
1ffe8     0F 01 69 FC | 	wrlong	#128, local01
1ffec     04 4E 05 F1 | 	add	fp, #4
1fff0     A7 00 68 FC | 	wrlong	#0, fp
1fff4     10 4E 85 F1 | 	sub	fp, #16
1fff8                 | ' 			*(DWORD*)buff = 128;
1fff8                 | ' 			res = RES_OK;
1fff8                 | ' 			break;
1fff8     0C 00 90 FD | 	jmp	#LR__3317
1fffc                 | LR__3316
1fffc     10 4E 05 F1 | 	add	fp, #16
20000     A7 08 68 FC | 	wrlong	#4, fp
20004     10 4E 85 F1 | 	sub	fp, #16
20008                 | LR__3317
20008     78 77 B0 FD | 	call	#_fatfs_cc_deselect_1009
2000c                 | ' 			res = RES_PARERR;
2000c                 | ' 	}
2000c                 | ' 
2000c                 | ' 	deselect();
2000c                 | ' 
2000c                 | ' 	return res;
2000c     10 4E 05 F1 | 	add	fp, #16
20010     A7 FA 01 FB | 	rdlong	result1, fp
20014     10 4E 85 F1 | 	sub	fp, #16
20018                 | LR__3318
20018     A7 F0 03 F6 | 	mov	ptra, fp
2001c     B2 00 A0 FD | 	call	#popregs_
20020                 | _fatfs_cc_disk_ioctl_ret
20020     2D 00 64 FD | 	ret
20024                 | 
20024                 | _fatfs_cc_disk_setpins
20024     00 12 0E F2 | 	cmp	arg01, #0 wz
20028     01 FA 65 56 |  if_ne	neg	result1, #1
2002c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
20030     01 00 00 FF 
20034     10 E4 05 F1 | 	add	objptr, ##528
20038     F2 14 62 FC | 	wrlong	arg02, objptr
2003c     04 E4 05 F1 | 	add	objptr, #4
20040     F2 16 62 FC | 	wrlong	arg03, objptr
20044     04 E4 05 F1 | 	add	objptr, #4
20048     F2 18 62 FC | 	wrlong	arg04, objptr
2004c     04 E4 05 F1 | 	add	objptr, #4
20050     F2 1A 62 FC | 	wrlong	arg05, objptr
20054     01 00 00 FF 
20058     1C E4 85 F1 | 	sub	objptr, ##540
2005c     00 FA 05 F6 | 	mov	result1, #0
20060                 | _fatfs_cc_disk_setpins_ret
20060     2D 00 64 FD | 	ret
20064                 | 
20064                 | _fatfs_cc_tchar2uni
20064     09 01 02 FB | 	rdlong	_var01, arg01
20068     00 03 02 F6 | 	mov	_var02, _var01
2006c     01 00 06 F1 | 	add	_var01, #1
20070     00 05 02 F6 | 	mov	_var03, _var01
20074     01 07 C2 FA | 	rdbyte	_var04, _var02
20078     80 06 CE F7 | 	test	_var04, #128 wz
2007c     E8 00 90 AD |  if_e	jmp	#LR__3327
20080     03 09 02 F6 | 	mov	_var05, _var04
20084     E0 08 06 F5 | 	and	_var05, #224
20088     C0 08 0E F2 | 	cmp	_var05, #192 wz
2008c     1F 06 06 A5 |  if_e	and	_var04, #31
20090     01 0A 06 A6 |  if_e	mov	_var06, #1
20094     34 00 90 AD |  if_e	jmp	#LR__3321
20098     03 09 02 F6 | 	mov	_var05, _var04
2009c     F0 08 06 F5 | 	and	_var05, #240
200a0     E0 08 0E F2 | 	cmp	_var05, #224 wz
200a4     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
200a8     02 0A 06 A6 |  if_e	mov	_var06, #2
200ac     1C 00 90 AD |  if_e	jmp	#LR__3320
200b0     03 09 02 F6 | 	mov	_var05, _var04
200b4     F8 08 06 F5 | 	and	_var05, #248
200b8     F0 08 0E F2 | 	cmp	_var05, #240 wz
200bc     07 06 06 A5 |  if_e	and	_var04, #7
200c0     03 0A 06 A6 |  if_e	mov	_var06, #3
200c4                 | ' 			return 0xFFFFFFFF;
200c4     01 FA 65 56 |  if_ne	neg	result1, #1
200c8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
200cc                 | LR__3320
200cc                 | LR__3321
200cc                 | ' 		}
200cc                 | ' 		do {
200cc                 | LR__3322
200cc     02 0D C2 FA | 	rdbyte	_var07, _var03
200d0     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
200d4     C0 08 06 F5 | 	and	_var05, #192
200d8     80 08 0E F2 | 	cmp	_var05, #128 wz
200dc     01 04 06 F1 | 	add	_var03, #1
200e0     01 FA 65 56 |  if_ne	neg	result1, #1
200e4     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
200e8     06 06 66 F0 | 	shl	_var04, #6
200ec     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
200f0     3F 02 06 F5 | 	and	_var02, #63
200f4     01 07 42 F5 | 	or	_var04, _var02
200f8     F4 0B 6E FB | 	djnz	_var06, #LR__3322
200fc     80 06 16 F2 | 	cmp	_var04, #128 wc
20100     24 00 90 CD |  if_b	jmp	#LR__3324
20104     6C 00 00 FF 
20108     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2010c     0C 00 90 CD |  if_b	jmp	#LR__3323
20110     70 00 00 FF 
20114     00 06 16 F2 | 	cmp	_var04, ##57344 wc
20118     0C 00 90 CD |  if_b	jmp	#LR__3324
2011c                 | LR__3323
2011c     80 08 00 FF 
20120     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
20124     08 00 90 CD |  if_b	jmp	#LR__3325
20128                 | LR__3324
20128     01 FA 65 F6 | 	neg	result1, #1
2012c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
20130                 | LR__3325
20130     80 00 00 FF 
20134     00 06 16 F2 | 	cmp	_var04, ##65536 wc
20138     2C 00 90 CD |  if_b	jmp	#LR__3326
2013c     03 03 02 F6 | 	mov	_var02, _var04
20140     80 00 00 FF 
20144     00 02 86 F1 | 	sub	_var02, ##65536
20148     06 02 66 F0 | 	shl	_var02, #6
2014c     80 FF 01 FF 
20150     00 02 06 F5 | 	and	_var02, ##67043328
20154     6E 00 6C FF 
20158     00 08 06 F6 | 	mov	_var05, ##-671032320
2015c     01 09 42 F5 | 	or	_var05, _var02
20160     09 06 46 F7 | 	zerox	_var04, #9
20164     04 07 42 F5 | 	or	_var04, _var05
20168                 | LR__3326
20168                 | LR__3327
20168     09 05 62 FC | 	wrlong	_var03, arg01
2016c                 | ' 	}
2016c                 | ' #line 811 "ff.c"
2016c                 | ' 	*str = p;
2016c                 | ' 	return uc;
2016c     03 FB 01 F6 | 	mov	result1, _var04
20170                 | _fatfs_cc_tchar2uni_ret
20170     2D 00 64 FD | 	ret
20174                 | 
20174                 | _fatfs_cc_put_utf
20174     80 12 16 F2 | 	cmp	arg01, #128 wc
20178     18 00 90 3D |  if_ae	jmp	#LR__3330
2017c     01 16 16 F2 | 	cmp	arg03, #1 wc
20180     00 FA 05 C6 |  if_b	mov	result1, #0
20184     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20188     0A 13 42 FC | 	wrbyte	arg01, arg02
2018c                 | ' 		*buf = (TCHAR)chr;
2018c                 | ' 		return 1;
2018c     01 FA 05 F6 | 	mov	result1, #1
20190     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20194                 | LR__3330
20194     04 00 00 FF 
20198     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2019c     40 00 90 3D |  if_ae	jmp	#LR__3331
201a0     02 16 16 F2 | 	cmp	arg03, #2 wc
201a4     00 FA 05 C6 |  if_b	mov	result1, #0
201a8     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
201ac     09 FB 01 F6 | 	mov	result1, arg01
201b0     06 FA 45 F0 | 	shr	result1, #6
201b4     1F FA 05 F5 | 	and	result1, #31
201b8     C0 16 06 F6 | 	mov	arg03, #192
201bc     FD 16 42 F5 | 	or	arg03, result1
201c0     0A 17 42 FC | 	wrbyte	arg03, arg02
201c4     01 14 06 F1 | 	add	arg02, #1
201c8     3F 12 06 F5 | 	and	arg01, #63
201cc     80 FA 05 F6 | 	mov	result1, #128
201d0     09 FB 41 F5 | 	or	result1, arg01
201d4     0A FB 41 FC | 	wrbyte	result1, arg02
201d8                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
201d8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
201d8                 | ' 		return 2;
201d8     02 FA 05 F6 | 	mov	result1, #2
201dc     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
201e0                 | LR__3331
201e0     80 00 00 FF 
201e4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
201e8     70 00 90 3D |  if_ae	jmp	#LR__3334
201ec     03 16 16 F2 | 	cmp	arg03, #3 wc
201f0     18 00 90 CD |  if_b	jmp	#LR__3332
201f4     6C 00 00 FF 
201f8     00 12 16 F2 | 	cmp	arg01, ##55296 wc
201fc     14 00 90 CD |  if_b	jmp	#LR__3333
20200     70 00 00 FF 
20204     00 12 16 F2 | 	cmp	arg01, ##57344 wc
20208     08 00 90 3D |  if_ae	jmp	#LR__3333
2020c                 | LR__3332
2020c     00 FA 05 F6 | 	mov	result1, #0
20210     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20214                 | LR__3333
20214     09 FB 59 F8 | 	getnib	result1, arg01, #3
20218     E0 16 06 F6 | 	mov	arg03, #224
2021c     FD 16 42 F5 | 	or	arg03, result1
20220     0A 17 42 FC | 	wrbyte	arg03, arg02
20224     01 14 06 F1 | 	add	arg02, #1
20228     09 FB 01 F6 | 	mov	result1, arg01
2022c     06 FA 45 F0 | 	shr	result1, #6
20230     3F FA 05 F5 | 	and	result1, #63
20234     80 16 06 F6 | 	mov	arg03, #128
20238     FD 16 42 F5 | 	or	arg03, result1
2023c     0A 17 42 FC | 	wrbyte	arg03, arg02
20240     01 14 06 F1 | 	add	arg02, #1
20244     3F 12 06 F5 | 	and	arg01, #63
20248     80 FA 05 F6 | 	mov	result1, #128
2024c     09 FB 41 F5 | 	or	result1, arg01
20250     0A FB 41 FC | 	wrbyte	result1, arg02
20254                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
20254                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
20254                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
20254                 | ' 		return 3;
20254     03 FA 05 F6 | 	mov	result1, #3
20258     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2025c                 | LR__3334
2025c     04 16 16 F2 | 	cmp	arg03, #4 wc
20260     00 FA 05 C6 |  if_b	mov	result1, #0
20264     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20268     09 01 02 F6 | 	mov	_var01, arg01
2026c     E0 01 06 F4 | 	bitl	_var01, #480
20270     00 00 6C FF 
20274     00 00 86 F1 | 	sub	_var01, ##-671088640
20278     06 00 46 F0 | 	shr	_var01, #6
2027c     09 13 32 F9 | 	getword	arg01, arg01, #0
20280     6E 00 00 FF 
20284     00 12 86 F1 | 	sub	arg01, ##56320
20288     00 08 00 FF 
2028c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
20290     02 00 00 CF 
20294     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
20298     00 FA 05 36 |  if_ae	mov	result1, #0
2029c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
202a0     09 01 42 F5 | 	or	_var01, arg01
202a4     80 00 00 FF 
202a8     00 00 06 F1 | 	add	_var01, ##65536
202ac     00 FB 01 F6 | 	mov	result1, _var01
202b0     12 FA 45 F0 | 	shr	result1, #18
202b4     07 FA 05 F5 | 	and	result1, #7
202b8     F0 16 06 F6 | 	mov	arg03, #240
202bc     FD 16 42 F5 | 	or	arg03, result1
202c0     0A 17 42 FC | 	wrbyte	arg03, arg02
202c4     01 14 06 F1 | 	add	arg02, #1
202c8     00 FB 01 F6 | 	mov	result1, _var01
202cc     0C FA 45 F0 | 	shr	result1, #12
202d0     3F FA 05 F5 | 	and	result1, #63
202d4     80 16 06 F6 | 	mov	arg03, #128
202d8     FD 16 42 F5 | 	or	arg03, result1
202dc     0A 17 42 FC | 	wrbyte	arg03, arg02
202e0     01 14 06 F1 | 	add	arg02, #1
202e4     00 FB 01 F6 | 	mov	result1, _var01
202e8     06 FA 45 F0 | 	shr	result1, #6
202ec     3F FA 05 F5 | 	and	result1, #63
202f0     80 16 06 F6 | 	mov	arg03, #128
202f4     FD 16 42 F5 | 	or	arg03, result1
202f8     0A 17 42 FC | 	wrbyte	arg03, arg02
202fc     01 14 06 F1 | 	add	arg02, #1
20300     3F 00 06 F5 | 	and	_var01, #63
20304     80 FA 05 F6 | 	mov	result1, #128
20308     00 FB 41 F5 | 	or	result1, _var01
2030c     0A FB 41 FC | 	wrbyte	result1, arg02
20310                 | ' 	chr = (hc | chr) + 0x10000;
20310                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
20310                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
20310                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
20310                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
20310                 | ' 	return 4;
20310     04 FA 05 F6 | 	mov	result1, #4
20314                 | _fatfs_cc_put_utf_ret
20314     2D 00 64 FD | 	ret
20318                 | 
20318                 | _fatfs_cc_sync_window
20318     02 4A 05 F6 | 	mov	COUNT_, #2
2031c     A8 00 A0 FD | 	call	#pushregs_
20320     09 1F 02 F6 | 	mov	local01, arg01
20324     00 20 06 F6 | 	mov	local02, #0
20328     03 1E 06 F1 | 	add	local01, #3
2032c     0F FB C9 FA | 	rdbyte	result1, local01 wz
20330     03 1E 86 F1 | 	sub	local01, #3
20334     A4 00 90 AD |  if_e	jmp	#LR__3342
20338     01 1E 06 F1 | 	add	local01, #1
2033c     0F 13 C2 FA | 	rdbyte	arg01, local01
20340     33 1E 06 F1 | 	add	local01, #51
20344     0F 15 02 F6 | 	mov	arg02, local01
20348     04 1E 86 F1 | 	sub	local01, #4
2034c     0F 17 02 FB | 	rdlong	arg03, local01
20350     30 1E 86 F1 | 	sub	local01, #48
20354     01 18 06 F6 | 	mov	arg04, #1
20358     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2035c     00 FA 0D F2 | 	cmp	result1, #0 wz
20360     74 00 90 5D |  if_ne	jmp	#LR__3340
20364     03 1E 06 F1 | 	add	local01, #3
20368     0F 01 48 FC | 	wrbyte	#0, local01
2036c     2D 1E 06 F1 | 	add	local01, #45
20370     0F FB 01 FB | 	rdlong	result1, local01
20374     0C 1E 86 F1 | 	sub	local01, #12
20378     0F 19 02 FB | 	rdlong	arg04, local01
2037c     0C FB 81 F1 | 	sub	result1, arg04
20380     08 1E 86 F1 | 	sub	local01, #8
20384     0F 19 02 FB | 	rdlong	arg04, local01
20388     1C 1E 86 F1 | 	sub	local01, #28
2038c     0C FB 11 F2 | 	cmp	result1, arg04 wc
20390     48 00 90 3D |  if_ae	jmp	#LR__3341
20394     02 1E 06 F1 | 	add	local01, #2
20398     0F 19 C2 FA | 	rdbyte	arg04, local01
2039c     02 1E 86 F1 | 	sub	local01, #2
203a0     02 18 0E F2 | 	cmp	arg04, #2 wz
203a4     34 00 90 5D |  if_ne	jmp	#LR__3341
203a8     01 1E 06 F1 | 	add	local01, #1
203ac     0F 13 C2 FA | 	rdbyte	arg01, local01
203b0     33 1E 06 F1 | 	add	local01, #51
203b4     0F 15 02 F6 | 	mov	arg02, local01
203b8     04 1E 86 F1 | 	sub	local01, #4
203bc     0F 17 02 FB | 	rdlong	arg03, local01
203c0     14 1E 86 F1 | 	sub	local01, #20
203c4     0F 1F 02 FB | 	rdlong	local01, local01
203c8     0F 17 02 F1 | 	add	arg03, local01
203cc     01 18 06 F6 | 	mov	arg04, #1
203d0     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
203d4     04 00 90 FD | 	jmp	#LR__3341
203d8                 | LR__3340
203d8     01 20 06 F6 | 	mov	local02, #1
203dc                 | LR__3341
203dc                 | LR__3342
203dc                 | ' 			res = FR_DISK_ERR;
203dc                 | ' 		}
203dc                 | ' 	}
203dc                 | ' 	return res;
203dc     10 FB 01 F6 | 	mov	result1, local02
203e0     A7 F0 03 F6 | 	mov	ptra, fp
203e4     B2 00 A0 FD | 	call	#popregs_
203e8                 | _fatfs_cc_sync_window_ret
203e8     2D 00 64 FD | 	ret
203ec                 | 
203ec                 | _fatfs_cc_move_window
203ec     03 4A 05 F6 | 	mov	COUNT_, #3
203f0     A8 00 A0 FD | 	call	#pushregs_
203f4     09 1F 02 F6 | 	mov	local01, arg01
203f8     0A 21 02 F6 | 	mov	local02, arg02
203fc     00 22 06 F6 | 	mov	local03, #0
20400     30 1E 06 F1 | 	add	local01, #48
20404     0F 19 02 FB | 	rdlong	arg04, local01
20408     30 1E 86 F1 | 	sub	local01, #48
2040c     0C 21 0A F2 | 	cmp	local02, arg04 wz
20410     40 00 90 AD |  if_e	jmp	#LR__3351
20414     0F 13 02 F6 | 	mov	arg01, local01
20418     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2041c     FD 22 0A F6 | 	mov	local03, result1 wz
20420     30 00 90 5D |  if_ne	jmp	#LR__3350
20424     01 1E 06 F1 | 	add	local01, #1
20428     0F 13 C2 FA | 	rdbyte	arg01, local01
2042c     33 1E 06 F1 | 	add	local01, #51
20430     0F 15 02 F6 | 	mov	arg02, local01
20434     10 17 02 F6 | 	mov	arg03, local02
20438     01 18 06 F6 | 	mov	arg04, #1
2043c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
20440     00 FA 0D F2 | 	cmp	result1, #0 wz
20444     01 20 66 56 |  if_ne	neg	local02, #1
20448     01 22 06 56 |  if_ne	mov	local03, #1
2044c     04 1E 86 F1 | 	sub	local01, #4
20450     0F 21 62 FC | 	wrlong	local02, local01
20454                 | LR__3350
20454                 | LR__3351
20454                 | ' 				sect = (LBA_t)0 - 1;
20454                 | ' 				res = FR_DISK_ERR;
20454                 | ' 			}
20454                 | ' 			fs->winsect = sect;
20454                 | ' 		}
20454                 | ' 	}
20454                 | ' 	return res;
20454     11 FB 01 F6 | 	mov	result1, local03
20458     A7 F0 03 F6 | 	mov	ptra, fp
2045c     B2 00 A0 FD | 	call	#popregs_
20460                 | _fatfs_cc_move_window_ret
20460     2D 00 64 FD | 	ret
20464                 | 
20464                 | _fatfs_cc_sync_fs
20464     02 4A 05 F6 | 	mov	COUNT_, #2
20468     A8 00 A0 FD | 	call	#pushregs_
2046c     09 1F 02 F6 | 	mov	local01, arg01
20470     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
20474     FD 20 0A F6 | 	mov	local02, result1 wz
20478     D8 00 90 5D |  if_ne	jmp	#LR__3361
2047c     0F 19 C2 FA | 	rdbyte	arg04, local01
20480     03 18 0E F2 | 	cmp	arg04, #3 wz
20484     04 1E 06 A1 |  if_e	add	local01, #4
20488     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
2048c     04 1E 86 A1 |  if_e	sub	local01, #4
20490     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
20494     A0 00 90 5D |  if_ne	jmp	#LR__3360
20498     34 1E 06 F1 | 	add	local01, #52
2049c     0F 13 02 F6 | 	mov	arg01, local01
204a0     00 14 06 F6 | 	mov	arg02, #0
204a4     09 16 C6 F9 | 	decod	arg03, #9
204a8     98 00 A0 FD | 	call	#\builtin_bytefill_
204ac     0F 13 02 F6 | 	mov	arg01, local01
204b0     FE 13 06 F1 | 	add	arg01, #510
204b4     55 00 80 FF 
204b8     09 AB 58 FC | 	wrword	##43605, arg01
204bc     A9 B0 A0 FF 
204c0     0F A5 68 FC | 	wrlong	##1096897106, local01
204c4     0F 13 02 F6 | 	mov	arg01, local01
204c8     E4 13 06 F1 | 	add	arg01, #484
204cc     B9 A0 B0 FF 
204d0     09 E5 68 FC | 	wrlong	##1631679090, arg01
204d4     0F 13 02 F6 | 	mov	arg01, local01
204d8     E8 13 06 F1 | 	add	arg01, #488
204dc     20 1E 86 F1 | 	sub	local01, #32
204e0     0F 15 02 FB | 	rdlong	arg02, local01
204e4     09 15 62 FC | 	wrlong	arg02, arg01
204e8     20 1E 06 F1 | 	add	local01, #32
204ec     0F 13 02 F6 | 	mov	arg01, local01
204f0     EC 13 06 F1 | 	add	arg01, #492
204f4     24 1E 86 F1 | 	sub	local01, #36
204f8     0F 15 02 FB | 	rdlong	arg02, local01
204fc     09 15 62 FC | 	wrlong	arg02, arg01
20500     10 1E 06 F1 | 	add	local01, #16
20504     0F 17 02 FB | 	rdlong	arg03, local01
20508     01 16 06 F1 | 	add	arg03, #1
2050c     10 1E 06 F1 | 	add	local01, #16
20510     0F 17 62 FC | 	wrlong	arg03, local01
20514     2F 1E 86 F1 | 	sub	local01, #47
20518     0F 13 C2 FA | 	rdbyte	arg01, local01
2051c     33 1E 06 F1 | 	add	local01, #51
20520     0F 15 02 F6 | 	mov	arg02, local01
20524     01 18 06 F6 | 	mov	arg04, #1
20528     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2052c     30 1E 86 F1 | 	sub	local01, #48
20530     0F 01 48 FC | 	wrbyte	#0, local01
20534     04 1E 86 F1 | 	sub	local01, #4
20538                 | LR__3360
20538     01 1E 06 F1 | 	add	local01, #1
2053c     0F 13 C2 FA | 	rdbyte	arg01, local01
20540     00 14 06 F6 | 	mov	arg02, #0
20544     00 16 06 F6 | 	mov	arg03, #0
20548     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2054c     00 FA 0D F2 | 	cmp	result1, #0 wz
20550     01 20 06 56 |  if_ne	mov	local02, #1
20554                 | LR__3361
20554                 | ' 	}
20554                 | ' 
20554                 | ' 	return res;
20554     10 FB 01 F6 | 	mov	result1, local02
20558     A7 F0 03 F6 | 	mov	ptra, fp
2055c     B2 00 A0 FD | 	call	#popregs_
20560                 | _fatfs_cc_sync_fs_ret
20560     2D 00 64 FD | 	ret
20564                 | 
20564                 | _fatfs_cc_clst2sect
20564     02 14 86 F1 | 	sub	arg02, #2
20568     18 12 06 F1 | 	add	arg01, #24
2056c     09 01 02 FB | 	rdlong	_var01, arg01
20570     18 12 86 F1 | 	sub	arg01, #24
20574     02 00 86 F1 | 	sub	_var01, #2
20578     00 15 12 F2 | 	cmp	arg02, _var01 wc
2057c     00 FA 05 36 |  if_ae	mov	result1, #0
20580     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
20584     0A 12 06 F1 | 	add	arg01, #10
20588     09 01 E2 FA | 	rdword	_var01, arg01
2058c     0A 01 02 FD | 	qmul	_var01, arg02
20590                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
20590     22 12 06 F1 | 	add	arg01, #34
20594     09 FB 01 FB | 	rdlong	result1, arg01
20598     18 00 62 FD | 	getqx	_var01
2059c     00 FB 01 F1 | 	add	result1, _var01
205a0                 | _fatfs_cc_clst2sect_ret
205a0     2D 00 64 FD | 	ret
205a4                 | 
205a4                 | _fatfs_cc_get_fat
205a4     07 4A 05 F6 | 	mov	COUNT_, #7
205a8     A8 00 A0 FD | 	call	#pushregs_
205ac     0A 1F 02 F6 | 	mov	local01, arg02
205b0     09 21 02 FB | 	rdlong	local02, arg01
205b4     02 1E 16 F2 | 	cmp	local01, #2 wc
205b8     14 00 90 CD |  if_b	jmp	#LR__3370
205bc     18 20 06 F1 | 	add	local02, #24
205c0     10 23 02 FB | 	rdlong	local03, local02
205c4     18 20 86 F1 | 	sub	local02, #24
205c8     11 1F 12 F2 | 	cmp	local01, local03 wc
205cc     08 00 90 CD |  if_b	jmp	#LR__3371
205d0                 | LR__3370
205d0     01 24 06 F6 | 	mov	local04, #1
205d4     60 01 90 FD | 	jmp	#LR__3378
205d8                 | LR__3371
205d8     01 24 66 F6 | 	neg	local04, #1
205dc                 | ' 		val = 0xFFFFFFFF;
205dc                 | ' 
205dc                 | ' 		switch (fs->fs_type) {
205dc     10 27 C2 FA | 	rdbyte	local05, local02
205e0     01 26 86 F1 | 	sub	local05, #1
205e4     03 26 26 F3 | 	fle	local05, #3
205e8     30 26 62 FD | 	jmprel	local05
205ec                 | LR__3372
205ec     0C 00 90 FD | 	jmp	#LR__3373
205f0     B8 00 90 FD | 	jmp	#LR__3374
205f4     F8 00 90 FD | 	jmp	#LR__3375
205f8     38 01 90 FD | 	jmp	#LR__3376
205fc                 | LR__3373
205fc     0F 27 02 F6 | 	mov	local05, local01
20600     0F 13 02 F6 | 	mov	arg01, local01
20604     01 12 46 F0 | 	shr	arg01, #1
20608     09 27 02 F1 | 	add	local05, arg01
2060c     10 13 02 F6 | 	mov	arg01, local02
20610     13 29 02 F6 | 	mov	local06, local05
20614     09 28 46 F0 | 	shr	local06, #9
20618     24 20 06 F1 | 	add	local02, #36
2061c     10 15 02 FB | 	rdlong	arg02, local02
20620     24 20 86 F1 | 	sub	local02, #36
20624     14 15 02 F1 | 	add	arg02, local06
20628     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2062c     00 FA 0D F2 | 	cmp	result1, #0 wz
20630     04 01 90 5D |  if_ne	jmp	#LR__3377
20634     13 29 02 F6 | 	mov	local06, local05
20638     FF 29 06 F5 | 	and	local06, #511
2063c     34 20 06 F1 | 	add	local02, #52
20640     10 29 02 F1 | 	add	local06, local02
20644     14 2B C2 FA | 	rdbyte	local07, local06
20648     34 20 86 F1 | 	sub	local02, #52
2064c     10 13 02 F6 | 	mov	arg01, local02
20650     01 26 06 F1 | 	add	local05, #1
20654     13 29 02 F6 | 	mov	local06, local05
20658     09 28 46 F0 | 	shr	local06, #9
2065c     24 20 06 F1 | 	add	local02, #36
20660     10 15 02 FB | 	rdlong	arg02, local02
20664     24 20 86 F1 | 	sub	local02, #36
20668     14 15 02 F1 | 	add	arg02, local06
2066c     7C FD BF FD | 	call	#_fatfs_cc_move_window
20670     00 FA 0D F2 | 	cmp	result1, #0 wz
20674     C0 00 90 5D |  if_ne	jmp	#LR__3377
20678     FF 27 06 F5 | 	and	local05, #511
2067c     34 20 06 F1 | 	add	local02, #52
20680     10 27 02 F1 | 	add	local05, local02
20684     13 29 C2 FA | 	rdbyte	local06, local05
20688     08 28 66 F0 | 	shl	local06, #8
2068c     14 2B 42 F5 | 	or	local07, local06
20690     01 1E CE F7 | 	test	local01, #1 wz
20694     04 2A 46 50 |  if_ne	shr	local07, #4
20698     15 23 02 56 |  if_ne	mov	local03, local07
2069c     0B 2A 46 A7 |  if_e	zerox	local07, #11
206a0     15 23 02 A6 |  if_e	mov	local03, local07
206a4     11 25 02 F6 | 	mov	local04, local03
206a8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
206a8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
206a8                 | ' 			break;
206a8     8C 00 90 FD | 	jmp	#LR__3377
206ac                 | LR__3374
206ac     10 13 02 F6 | 	mov	arg01, local02
206b0     0F 29 02 F6 | 	mov	local06, local01
206b4     08 28 46 F0 | 	shr	local06, #8
206b8     24 20 06 F1 | 	add	local02, #36
206bc     10 15 02 FB | 	rdlong	arg02, local02
206c0     24 20 86 F1 | 	sub	local02, #36
206c4     14 15 02 F1 | 	add	arg02, local06
206c8     20 FD BF FD | 	call	#_fatfs_cc_move_window
206cc     00 FA 0D F2 | 	cmp	result1, #0 wz
206d0     64 00 90 5D |  if_ne	jmp	#LR__3377
206d4     34 20 06 F1 | 	add	local02, #52
206d8     01 1E 66 F0 | 	shl	local01, #1
206dc     FF 1F 06 F5 | 	and	local01, #511
206e0     0F 21 02 F1 | 	add	local02, local01
206e4                 | ' {
206e4                 | ' 
206e4                 | ' 	return *((WORD*)ptr);
206e4     10 FB E1 FA | 	rdword	result1, local02
206e8     FD 24 32 F9 | 	getword	local04, result1, #0
206ec                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
206ec                 | ' 			break;
206ec     48 00 90 FD | 	jmp	#LR__3377
206f0                 | LR__3375
206f0     10 13 02 F6 | 	mov	arg01, local02
206f4     0F 29 02 F6 | 	mov	local06, local01
206f8     07 28 46 F0 | 	shr	local06, #7
206fc     24 20 06 F1 | 	add	local02, #36
20700     10 15 02 FB | 	rdlong	arg02, local02
20704     24 20 86 F1 | 	sub	local02, #36
20708     14 15 02 F1 | 	add	arg02, local06
2070c     DC FC BF FD | 	call	#_fatfs_cc_move_window
20710     00 FA 0D F2 | 	cmp	result1, #0 wz
20714     20 00 90 5D |  if_ne	jmp	#LR__3377
20718     34 20 06 F1 | 	add	local02, #52
2071c     02 1E 66 F0 | 	shl	local01, #2
20720     FF 1F 06 F5 | 	and	local01, #511
20724     0F 21 02 F1 | 	add	local02, local01
20728                 | ' {
20728                 | ' 
20728                 | ' 	return *((DWORD*)ptr);
20728     10 25 02 FB | 	rdlong	local04, local02
2072c     7C 24 06 F4 | 	bitl	local04, #124
20730                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
20730                 | ' 			break;
20730     04 00 90 FD | 	jmp	#LR__3377
20734                 | LR__3376
20734     01 24 06 F6 | 	mov	local04, #1
20738                 | LR__3377
20738                 | LR__3378
20738                 | ' 			val = 1;
20738                 | ' 		}
20738                 | ' 	}
20738                 | ' 
20738                 | ' 	return val;
20738     12 FB 01 F6 | 	mov	result1, local04
2073c     A7 F0 03 F6 | 	mov	ptra, fp
20740     B2 00 A0 FD | 	call	#popregs_
20744                 | _fatfs_cc_get_fat_ret
20744     2D 00 64 FD | 	ret
20748                 | 
20748                 | _fatfs_cc_put_fat
20748     08 4A 05 F6 | 	mov	COUNT_, #8
2074c     A8 00 A0 FD | 	call	#pushregs_
20750     09 1F 02 F6 | 	mov	local01, arg01
20754     0A 21 02 F6 | 	mov	local02, arg02
20758     0B 23 02 F6 | 	mov	local03, arg03
2075c     02 24 06 F6 | 	mov	local04, #2
20760     02 20 16 F2 | 	cmp	local02, #2 wc
20764     E0 01 90 CD |  if_b	jmp	#LR__3387
20768     18 1E 06 F1 | 	add	local01, #24
2076c     0F 27 02 FB | 	rdlong	local05, local01
20770     18 1E 86 F1 | 	sub	local01, #24
20774     13 21 12 F2 | 	cmp	local02, local05 wc
20778     CC 01 90 3D |  if_ae	jmp	#LR__3387
2077c                 | ' 		switch (fs->fs_type) {
2077c     0F 29 C2 FA | 	rdbyte	local06, local01
20780     01 28 86 F1 | 	sub	local06, #1
20784     03 28 26 F3 | 	fle	local06, #3
20788     30 28 62 FD | 	jmprel	local06
2078c                 | LR__3380
2078c     0C 00 90 FD | 	jmp	#LR__3381
20790     F8 00 90 FD | 	jmp	#LR__3384
20794     40 01 90 FD | 	jmp	#LR__3385
20798     AC 01 90 FD | 	jmp	#LR__3386
2079c                 | LR__3381
2079c     10 2B 02 F6 | 	mov	local07, local02
207a0     10 27 02 F6 | 	mov	local05, local02
207a4     01 26 46 F0 | 	shr	local05, #1
207a8     13 2B 02 F1 | 	add	local07, local05
207ac     0F 13 02 F6 | 	mov	arg01, local01
207b0     15 29 02 F6 | 	mov	local06, local07
207b4     09 28 46 F0 | 	shr	local06, #9
207b8     24 1E 06 F1 | 	add	local01, #36
207bc     0F 15 02 FB | 	rdlong	arg02, local01
207c0     24 1E 86 F1 | 	sub	local01, #36
207c4     14 15 02 F1 | 	add	arg02, local06
207c8     20 FC BF FD | 	call	#_fatfs_cc_move_window
207cc     FD 24 0A F6 | 	mov	local04, result1 wz
207d0     74 01 90 5D |  if_ne	jmp	#LR__3386
207d4     34 1E 06 F1 | 	add	local01, #52
207d8     0F 2D 02 F6 | 	mov	local08, local01
207dc     15 27 02 F6 | 	mov	local05, local07
207e0     FF 27 06 F5 | 	and	local05, #511
207e4     13 2D 02 F1 | 	add	local08, local05
207e8     01 20 CE F7 | 	test	local02, #1 wz
207ec     34 1E 86 F1 | 	sub	local01, #52
207f0     01 2A 06 F1 | 	add	local07, #1
207f4     18 00 90 AD |  if_e	jmp	#LR__3382
207f8     16 27 C2 FA | 	rdbyte	local05, local08
207fc     13 27 42 F8 | 	getnib	local05, local05, #0
20800     11 29 E2 F8 | 	getbyte	local06, local03, #0
20804     04 28 66 F0 | 	shl	local06, #4
20808     14 27 42 F5 | 	or	local05, local06
2080c     04 00 90 FD | 	jmp	#LR__3383
20810                 | LR__3382
20810     11 27 02 F6 | 	mov	local05, local03
20814                 | LR__3383
20814     16 27 42 FC | 	wrbyte	local05, local08
20818     03 1E 06 F1 | 	add	local01, #3
2081c     0F 03 48 FC | 	wrbyte	#1, local01
20820     03 1E 86 F1 | 	sub	local01, #3
20824     0F 13 02 F6 | 	mov	arg01, local01
20828     15 2D 02 F6 | 	mov	local08, local07
2082c     09 2C 46 F0 | 	shr	local08, #9
20830     24 1E 06 F1 | 	add	local01, #36
20834     0F 15 02 FB | 	rdlong	arg02, local01
20838     24 1E 86 F1 | 	sub	local01, #36
2083c     16 15 02 F1 | 	add	arg02, local08
20840     A8 FB BF FD | 	call	#_fatfs_cc_move_window
20844     FD 24 0A F6 | 	mov	local04, result1 wz
20848     FC 00 90 5D |  if_ne	jmp	#LR__3386
2084c     34 1E 06 F1 | 	add	local01, #52
20850     0F 2D 02 F6 | 	mov	local08, local01
20854     FF 2B 06 F5 | 	and	local07, #511
20858     15 2D 02 F1 | 	add	local08, local07
2085c     01 20 CE F7 | 	test	local02, #1 wz
20860     04 22 46 50 |  if_ne	shr	local03, #4
20864     11 27 02 56 |  if_ne	mov	local05, local03
20868     16 27 C2 AA |  if_e	rdbyte	local05, local08
2086c     F0 26 06 A5 |  if_e	and	local05, #240
20870     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
20874     11 23 42 A8 |  if_e	getnib	local03, local03, #0
20878     11 27 42 A5 |  if_e	or	local05, local03
2087c     16 27 42 FC | 	wrbyte	local05, local08
20880     31 1E 86 F1 | 	sub	local01, #49
20884     0F 03 48 FC | 	wrbyte	#1, local01
20888                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
20888                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
20888                 | ' 			fs->wflag = 1;
20888                 | ' 			break;
20888     BC 00 90 FD | 	jmp	#LR__3386
2088c                 | LR__3384
2088c     0F 13 02 F6 | 	mov	arg01, local01
20890     10 2D 02 F6 | 	mov	local08, local02
20894     08 2C 46 F0 | 	shr	local08, #8
20898     24 1E 06 F1 | 	add	local01, #36
2089c     0F 15 02 FB | 	rdlong	arg02, local01
208a0     24 1E 86 F1 | 	sub	local01, #36
208a4     16 15 02 F1 | 	add	arg02, local08
208a8     40 FB BF FD | 	call	#_fatfs_cc_move_window
208ac     FD 24 0A F6 | 	mov	local04, result1 wz
208b0     94 00 90 5D |  if_ne	jmp	#LR__3386
208b4     34 1E 06 F1 | 	add	local01, #52
208b8     0F 13 02 F6 | 	mov	arg01, local01
208bc     01 20 66 F0 | 	shl	local02, #1
208c0     FF 21 06 F5 | 	and	local02, #511
208c4     10 13 02 F1 | 	add	arg01, local02
208c8     09 23 52 FC | 	wrword	local03, arg01
208cc     31 1E 86 F1 | 	sub	local01, #49
208d0     0F 03 48 FC | 	wrbyte	#1, local01
208d4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
208d4                 | ' 			fs->wflag = 1;
208d4                 | ' 			break;
208d4     70 00 90 FD | 	jmp	#LR__3386
208d8                 | LR__3385
208d8     0F 13 02 F6 | 	mov	arg01, local01
208dc     10 2D 02 F6 | 	mov	local08, local02
208e0     07 2C 46 F0 | 	shr	local08, #7
208e4     24 1E 06 F1 | 	add	local01, #36
208e8     0F 15 02 FB | 	rdlong	arg02, local01
208ec     24 1E 86 F1 | 	sub	local01, #36
208f0     16 15 02 F1 | 	add	arg02, local08
208f4     F4 FA BF FD | 	call	#_fatfs_cc_move_window
208f8     FD 24 0A F6 | 	mov	local04, result1 wz
208fc     48 00 90 5D |  if_ne	jmp	#LR__3386
20900     7C 22 06 F4 | 	bitl	local03, #124
20904     34 1E 06 F1 | 	add	local01, #52
20908     10 2D 02 F6 | 	mov	local08, local02
2090c     02 2C 66 F0 | 	shl	local08, #2
20910     FF 2D 06 F5 | 	and	local08, #511
20914     0F 13 02 F6 | 	mov	arg01, local01
20918     16 13 02 F1 | 	add	arg01, local08
2091c                 | ' {
2091c                 | ' 
2091c                 | ' 	return *((DWORD*)ptr);
2091c     09 2D 02 FB | 	rdlong	local08, arg01
20920     00 00 78 FF 
20924     00 2C 06 F5 | 	and	local08, ##-268435456
20928     16 23 42 F5 | 	or	local03, local08
2092c     0F 13 02 F6 | 	mov	arg01, local01
20930     02 20 66 F0 | 	shl	local02, #2
20934     FF 21 06 F5 | 	and	local02, #511
20938     10 13 02 F1 | 	add	arg01, local02
2093c     09 23 62 FC | 	wrlong	local03, arg01
20940     31 1E 86 F1 | 	sub	local01, #49
20944     0F 03 48 FC | 	wrbyte	#1, local01
20948                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
20948                 | ' 			}
20948                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
20948                 | ' 			fs->wflag = 1;
20948                 | ' 			break;
20948                 | LR__3386
20948                 | LR__3387
20948                 | ' 		}
20948                 | ' 	}
20948                 | ' 	return res;
20948     12 FB 01 F6 | 	mov	result1, local04
2094c     A7 F0 03 F6 | 	mov	ptra, fp
20950     B2 00 A0 FD | 	call	#popregs_
20954                 | _fatfs_cc_put_fat_ret
20954     2D 00 64 FD | 	ret
20958                 | 
20958                 | _fatfs_cc_remove_chain
20958     05 4A 05 F6 | 	mov	COUNT_, #5
2095c     A8 00 A0 FD | 	call	#pushregs_
20960     09 1F 02 F6 | 	mov	local01, arg01
20964     0A 21 02 F6 | 	mov	local02, arg02
20968     0B 23 02 F6 | 	mov	local03, arg03
2096c     0F 25 02 FB | 	rdlong	local04, local01
20970     02 20 16 F2 | 	cmp	local02, #2 wc
20974     14 00 90 CD |  if_b	jmp	#LR__3390
20978     18 24 06 F1 | 	add	local04, #24
2097c     12 FB 01 FB | 	rdlong	result1, local04
20980     18 24 86 F1 | 	sub	local04, #24
20984     FD 20 12 F2 | 	cmp	local02, result1 wc
20988     08 00 90 CD |  if_b	jmp	#LR__3391
2098c                 | LR__3390
2098c     02 FA 05 F6 | 	mov	result1, #2
20990     CC 00 90 FD | 	jmp	#LR__3396
20994                 | LR__3391
20994     00 22 0E F2 | 	cmp	local03, #0 wz
20998     18 00 90 AD |  if_e	jmp	#LR__3392
2099c     11 15 02 F6 | 	mov	arg02, local03
209a0     12 13 02 F6 | 	mov	arg01, local04
209a4     01 16 66 F6 | 	neg	arg03, #1
209a8     9C FD BF FD | 	call	#_fatfs_cc_put_fat
209ac     00 FA 0D F2 | 	cmp	result1, #0 wz
209b0     AC 00 90 5D |  if_ne	jmp	#LR__3396
209b4                 | LR__3392
209b4                 | ' 	}
209b4                 | ' 
209b4                 | ' 
209b4                 | ' 	do {
209b4                 | LR__3393
209b4     10 15 02 F6 | 	mov	arg02, local02
209b8     0F 13 02 F6 | 	mov	arg01, local01
209bc     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
209c0     FD 26 0A F6 | 	mov	local05, result1 wz
209c4     94 00 90 AD |  if_e	jmp	#LR__3395
209c8     01 26 0E F2 | 	cmp	local05, #1 wz
209cc     02 FA 05 A6 |  if_e	mov	result1, #2
209d0     8C 00 90 AD |  if_e	jmp	#LR__3396
209d4     FF FF 7F FF 
209d8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
209dc     01 FA 05 A6 |  if_e	mov	result1, #1
209e0     7C 00 90 AD |  if_e	jmp	#LR__3396
209e4     10 15 02 F6 | 	mov	arg02, local02
209e8     12 13 02 F6 | 	mov	arg01, local04
209ec     00 16 06 F6 | 	mov	arg03, #0
209f0     54 FD BF FD | 	call	#_fatfs_cc_put_fat
209f4     FD 22 0A F6 | 	mov	local03, result1 wz
209f8     11 FB 01 56 |  if_ne	mov	result1, local03
209fc     60 00 90 5D |  if_ne	jmp	#LR__3396
20a00     18 24 06 F1 | 	add	local04, #24
20a04     12 23 02 FB | 	rdlong	local03, local04
20a08     02 22 86 F1 | 	sub	local03, #2
20a0c     04 24 86 F1 | 	sub	local04, #4
20a10     12 21 02 FB | 	rdlong	local02, local04
20a14     14 24 86 F1 | 	sub	local04, #20
20a18     11 21 12 F2 | 	cmp	local02, local03 wc
20a1c     24 00 90 3D |  if_ae	jmp	#LR__3394
20a20     14 24 06 F1 | 	add	local04, #20
20a24     12 23 02 FB | 	rdlong	local03, local04
20a28     01 22 06 F1 | 	add	local03, #1
20a2c     12 23 62 FC | 	wrlong	local03, local04
20a30     10 24 86 F1 | 	sub	local04, #16
20a34     12 23 C2 FA | 	rdbyte	local03, local04
20a38     01 22 46 F5 | 	or	local03, #1
20a3c     12 23 42 FC | 	wrbyte	local03, local04
20a40     04 24 86 F1 | 	sub	local04, #4
20a44                 | LR__3394
20a44     13 21 02 F6 | 	mov	local02, local05
20a48     18 24 06 F1 | 	add	local04, #24
20a4c     12 27 02 FB | 	rdlong	local05, local04
20a50     18 24 86 F1 | 	sub	local04, #24
20a54     13 21 12 F2 | 	cmp	local02, local05 wc
20a58     58 FF 9F CD |  if_b	jmp	#LR__3393
20a5c                 | LR__3395
20a5c                 | ' #line 1500 "ff.c"
20a5c                 | ' 	return FR_OK;
20a5c     00 FA 05 F6 | 	mov	result1, #0
20a60                 | LR__3396
20a60     A7 F0 03 F6 | 	mov	ptra, fp
20a64     B2 00 A0 FD | 	call	#popregs_
20a68                 | _fatfs_cc_remove_chain_ret
20a68     2D 00 64 FD | 	ret
20a6c                 | 
20a6c                 | _fatfs_cc_create_chain
20a6c     09 4A 05 F6 | 	mov	COUNT_, #9
20a70     A8 00 A0 FD | 	call	#pushregs_
20a74     09 1F 02 F6 | 	mov	local01, arg01
20a78     0A 21 0A F6 | 	mov	local02, arg02 wz
20a7c     0F 23 02 FB | 	rdlong	local03, local01
20a80     28 00 90 5D |  if_ne	jmp	#LR__3400
20a84     10 22 06 F1 | 	add	local03, #16
20a88     11 25 0A FB | 	rdlong	local04, local03 wz
20a8c     10 22 86 F1 | 	sub	local03, #16
20a90     18 22 06 51 |  if_ne	add	local03, #24
20a94     11 27 02 5B |  if_ne	rdlong	local05, local03
20a98     18 22 86 51 |  if_ne	sub	local03, #24
20a9c     13 25 12 52 |  if_ne	cmp	local04, local05 wc
20aa0     50 00 90 4D |  if_c_and_nz	jmp	#LR__3401
20aa4     01 24 06 F6 | 	mov	local04, #1
20aa8     48 00 90 FD | 	jmp	#LR__3401
20aac                 | LR__3400
20aac     10 15 02 F6 | 	mov	arg02, local02
20ab0     0F 13 02 F6 | 	mov	arg01, local01
20ab4     EC FA BF FD | 	call	#_fatfs_cc_get_fat
20ab8     FD 24 02 F6 | 	mov	local04, result1
20abc     02 24 16 F2 | 	cmp	local04, #2 wc
20ac0     01 FA 05 C6 |  if_b	mov	result1, #1
20ac4     BC 01 90 CD |  if_b	jmp	#LR__3411
20ac8     FF FF 7F FF 
20acc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20ad0     12 FB 01 A6 |  if_e	mov	result1, local04
20ad4     AC 01 90 AD |  if_e	jmp	#LR__3411
20ad8     18 22 06 F1 | 	add	local03, #24
20adc     11 27 02 FB | 	rdlong	local05, local03
20ae0     18 22 86 F1 | 	sub	local03, #24
20ae4     13 25 12 F2 | 	cmp	local04, local05 wc
20ae8     12 FB 01 C6 |  if_b	mov	result1, local04
20aec     94 01 90 CD |  if_b	jmp	#LR__3411
20af0     10 25 02 F6 | 	mov	local04, local02
20af4                 | LR__3401
20af4     14 22 06 F1 | 	add	local03, #20
20af8     11 27 0A FB | 	rdlong	local05, local03 wz
20afc     14 22 86 F1 | 	sub	local03, #20
20b00     00 FA 05 A6 |  if_e	mov	result1, #0
20b04     7C 01 90 AD |  if_e	jmp	#LR__3411
20b08     00 28 06 F6 | 	mov	local06, #0
20b0c     10 25 0A F2 | 	cmp	local04, local02 wz
20b10     74 00 90 5D |  if_ne	jmp	#LR__3404
20b14     12 29 02 F6 | 	mov	local06, local04
20b18     01 28 06 F1 | 	add	local06, #1
20b1c     18 22 06 F1 | 	add	local03, #24
20b20     11 27 02 FB | 	rdlong	local05, local03
20b24     18 22 86 F1 | 	sub	local03, #24
20b28     13 29 12 F2 | 	cmp	local06, local05 wc
20b2c     02 28 06 36 |  if_ae	mov	local06, #2
20b30     14 15 02 F6 | 	mov	arg02, local06
20b34     0F 13 02 F6 | 	mov	arg01, local01
20b38     68 FA BF FD | 	call	#_fatfs_cc_get_fat
20b3c     FD 26 02 F6 | 	mov	local05, result1
20b40     01 26 0E F2 | 	cmp	local05, #1 wz
20b44     FF FF 7F 5F 
20b48     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
20b4c     13 FB 01 A6 |  if_e	mov	result1, local05
20b50     30 01 90 AD |  if_e	jmp	#LR__3411
20b54     00 26 0E F2 | 	cmp	local05, #0 wz
20b58     2C 00 90 AD |  if_e	jmp	#LR__3403
20b5c     10 22 06 F1 | 	add	local03, #16
20b60     11 2B 02 FB | 	rdlong	local07, local03
20b64     10 22 86 F1 | 	sub	local03, #16
20b68     02 2A 16 F2 | 	cmp	local07, #2 wc
20b6c     14 00 90 CD |  if_b	jmp	#LR__3402
20b70     18 22 06 F1 | 	add	local03, #24
20b74     11 27 02 FB | 	rdlong	local05, local03
20b78     18 22 86 F1 | 	sub	local03, #24
20b7c     13 2B 12 F2 | 	cmp	local07, local05 wc
20b80     15 25 02 C6 |  if_b	mov	local04, local07
20b84                 | LR__3402
20b84     00 28 06 F6 | 	mov	local06, #0
20b88                 | LR__3403
20b88                 | LR__3404
20b88     00 28 0E F2 | 	cmp	local06, #0 wz
20b8c     60 00 90 5D |  if_ne	jmp	#LR__3407
20b90     12 29 02 F6 | 	mov	local06, local04
20b94                 | ' 			ncl = scl;
20b94                 | ' 			for (;;) {
20b94                 | LR__3405
20b94     01 28 06 F1 | 	add	local06, #1
20b98     18 22 06 F1 | 	add	local03, #24
20b9c     11 27 02 FB | 	rdlong	local05, local03
20ba0     18 22 86 F1 | 	sub	local03, #24
20ba4     13 29 12 F2 | 	cmp	local06, local05 wc
20ba8     02 28 06 36 |  if_ae	mov	local06, #2
20bac     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
20bb0     00 FA 05 16 |  if_a	mov	result1, #0
20bb4     CC 00 90 1D |  if_a	jmp	#LR__3411
20bb8     14 15 02 F6 | 	mov	arg02, local06
20bbc     0F 13 02 F6 | 	mov	arg01, local01
20bc0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
20bc4     FD 2A 0A F6 | 	mov	local07, result1 wz
20bc8     24 00 90 AD |  if_e	jmp	#LR__3406
20bcc     01 2A 0E F2 | 	cmp	local07, #1 wz
20bd0     FF FF 7F 5F 
20bd4     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
20bd8     15 FB 01 A6 |  if_e	mov	result1, local07
20bdc     A4 00 90 AD |  if_e	jmp	#LR__3411
20be0     12 29 0A F2 | 	cmp	local06, local04 wz
20be4     00 FA 05 A6 |  if_e	mov	result1, #0
20be8     98 00 90 AD |  if_e	jmp	#LR__3411
20bec     A4 FF 9F FD | 	jmp	#LR__3405
20bf0                 | LR__3406
20bf0                 | LR__3407
20bf0     11 13 02 F6 | 	mov	arg01, local03
20bf4     14 15 02 F6 | 	mov	arg02, local06
20bf8     01 16 66 F6 | 	neg	arg03, #1
20bfc     48 FB BF FD | 	call	#_fatfs_cc_put_fat
20c00     FD 2C 0A F6 | 	mov	local08, result1 wz
20c04     1C 00 90 5D |  if_ne	jmp	#LR__3408
20c08     00 20 0E F2 | 	cmp	local02, #0 wz
20c0c     14 00 90 AD |  if_e	jmp	#LR__3408
20c10     11 13 02 F6 | 	mov	arg01, local03
20c14     10 15 02 F6 | 	mov	arg02, local02
20c18     14 17 02 F6 | 	mov	arg03, local06
20c1c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
20c20     FD 2C 02 F6 | 	mov	local08, result1
20c24                 | LR__3408
20c24     00 2C 0E F2 | 	cmp	local08, #0 wz
20c28     4C 00 90 5D |  if_ne	jmp	#LR__3409
20c2c     10 22 06 F1 | 	add	local03, #16
20c30     11 29 62 FC | 	wrlong	local06, local03
20c34     08 22 06 F1 | 	add	local03, #8
20c38     11 27 02 FB | 	rdlong	local05, local03
20c3c     02 26 86 F1 | 	sub	local05, #2
20c40     04 22 86 F1 | 	sub	local03, #4
20c44     11 2F 02 FB | 	rdlong	local09, local03
20c48     14 22 86 F1 | 	sub	local03, #20
20c4c     13 2F 1A F2 | 	cmp	local09, local05 wcz
20c50     14 22 06 E1 |  if_be	add	local03, #20
20c54     11 2F 02 EB |  if_be	rdlong	local09, local03
20c58     01 2E 86 E1 |  if_be	sub	local09, #1
20c5c     11 2F 62 EC |  if_be	wrlong	local09, local03
20c60     14 22 86 E1 |  if_be	sub	local03, #20
20c64     04 22 06 F1 | 	add	local03, #4
20c68     11 27 C2 FA | 	rdbyte	local05, local03
20c6c     01 26 46 F5 | 	or	local05, #1
20c70     11 27 42 FC | 	wrbyte	local05, local03
20c74     08 00 90 FD | 	jmp	#LR__3410
20c78                 | LR__3409
20c78     01 2C 0E F2 | 	cmp	local08, #1 wz
20c7c     01 28 C6 F6 | 	negz	local06, #1
20c80                 | LR__3410
20c80                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
20c80                 | ' 	}
20c80                 | ' 
20c80                 | ' 	return ncl;
20c80     14 FB 01 F6 | 	mov	result1, local06
20c84                 | LR__3411
20c84     A7 F0 03 F6 | 	mov	ptra, fp
20c88     B2 00 A0 FD | 	call	#popregs_
20c8c                 | _fatfs_cc_create_chain_ret
20c8c     2D 00 64 FD | 	ret
20c90                 | 
20c90                 | _fatfs_cc_dir_clear
20c90     06 4A 05 F6 | 	mov	COUNT_, #6
20c94     A8 00 A0 FD | 	call	#pushregs_
20c98     09 1F 02 F6 | 	mov	local01, arg01
20c9c     0A 21 02 F6 | 	mov	local02, arg02
20ca0     0F 13 02 F6 | 	mov	arg01, local01
20ca4     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
20ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
20cac     01 FA 05 56 |  if_ne	mov	result1, #1
20cb0     90 00 90 5D |  if_ne	jmp	#LR__3422
20cb4     0F 13 02 F6 | 	mov	arg01, local01
20cb8     10 15 02 F6 | 	mov	arg02, local02
20cbc     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
20cc0     FD 22 02 F6 | 	mov	local03, result1
20cc4     30 1E 06 F1 | 	add	local01, #48
20cc8     0F 23 62 FC | 	wrlong	local03, local01
20ccc     04 1E 06 F1 | 	add	local01, #4
20cd0     0F 13 02 F6 | 	mov	arg01, local01
20cd4     00 14 06 F6 | 	mov	arg02, #0
20cd8     09 16 C6 F9 | 	decod	arg03, #9
20cdc     98 00 A0 FD | 	call	#\builtin_bytefill_
20ce0     0F 25 02 F6 | 	mov	local04, local01
20ce4                 | ' #line 1667 "ff.c"
20ce4                 | ' 	{
20ce4                 | ' 		ibuf = fs->win; szb = 1;
20ce4                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
20ce4     00 26 06 F6 | 	mov	local05, #0
20ce8     34 1E 86 F1 | 	sub	local01, #52
20cec                 | LR__3420
20cec     0A 1E 06 F1 | 	add	local01, #10
20cf0     0F 29 E2 FA | 	rdword	local06, local01
20cf4     0A 1E 86 F1 | 	sub	local01, #10
20cf8     14 27 12 F2 | 	cmp	local05, local06 wc
20cfc     2C 00 90 3D |  if_ae	jmp	#LR__3421
20d00     01 1E 06 F1 | 	add	local01, #1
20d04     0F 13 C2 FA | 	rdbyte	arg01, local01
20d08     01 1E 86 F1 | 	sub	local01, #1
20d0c     12 15 02 F6 | 	mov	arg02, local04
20d10     11 17 02 F6 | 	mov	arg03, local03
20d14     13 17 02 F1 | 	add	arg03, local05
20d18     01 18 06 F6 | 	mov	arg04, #1
20d1c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
20d20     00 FA 0D F2 | 	cmp	result1, #0 wz
20d24     01 26 06 A1 |  if_e	add	local05, #1
20d28     C0 FF 9F AD |  if_e	jmp	#LR__3420
20d2c                 | LR__3421
20d2c                 | ' 	}
20d2c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
20d2c     0A 1E 06 F1 | 	add	local01, #10
20d30     0F 25 E2 FA | 	rdword	local04, local01
20d34     12 27 0A F2 | 	cmp	local05, local04 wz
20d38     00 28 06 A6 |  if_e	mov	local06, #0
20d3c     01 28 06 56 |  if_ne	mov	local06, #1
20d40     14 FB 01 F6 | 	mov	result1, local06
20d44                 | LR__3422
20d44     A7 F0 03 F6 | 	mov	ptra, fp
20d48     B2 00 A0 FD | 	call	#popregs_
20d4c                 | _fatfs_cc_dir_clear_ret
20d4c     2D 00 64 FD | 	ret
20d50                 | 
20d50                 | _fatfs_cc_dir_sdi
20d50     06 4A 05 F6 | 	mov	COUNT_, #6
20d54     A8 00 A0 FD | 	call	#pushregs_
20d58     09 1F 02 F6 | 	mov	local01, arg01
20d5c     0A 21 02 F6 | 	mov	local02, arg02
20d60     0F 23 02 FB | 	rdlong	local03, local01
20d64     00 10 00 FF 
20d68     00 20 16 F2 | 	cmp	local02, ##2097152 wc
20d6c     1F 20 CE C7 |  if_b	test	local02, #31 wz
20d70                 | ' 		return FR_INT_ERR;
20d70     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
20d74     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3436
20d78     10 1E 06 F1 | 	add	local01, #16
20d7c     0F 21 62 FC | 	wrlong	local02, local01
20d80     08 1E 86 F1 | 	sub	local01, #8
20d84     0F 25 0A FB | 	rdlong	local04, local01 wz
20d88     08 1E 86 F1 | 	sub	local01, #8
20d8c     11 27 C2 AA |  if_e	rdbyte	local05, local03
20d90     03 26 16 A2 |  if_e	cmp	local05, #3 wc
20d94     28 22 06 21 |  if_nc_and_z	add	local03, #40
20d98     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
20d9c     28 22 86 21 |  if_nc_and_z	sub	local03, #40
20da0     00 24 0E F2 | 	cmp	local04, #0 wz
20da4     3C 00 90 5D |  if_ne	jmp	#LR__3430
20da8     10 27 02 F6 | 	mov	local05, local02
20dac     05 26 46 F0 | 	shr	local05, #5
20db0     08 22 06 F1 | 	add	local03, #8
20db4     11 15 E2 FA | 	rdword	arg02, local03
20db8     08 22 86 F1 | 	sub	local03, #8
20dbc     0A 27 12 F2 | 	cmp	local05, arg02 wc
20dc0     02 FA 05 36 |  if_ae	mov	result1, #2
20dc4     E4 00 90 3D |  if_ae	jmp	#LR__3436
20dc8     28 22 06 F1 | 	add	local03, #40
20dcc     11 27 02 FB | 	rdlong	local05, local03
20dd0     28 22 86 F1 | 	sub	local03, #40
20dd4     18 1E 06 F1 | 	add	local01, #24
20dd8     0F 27 62 FC | 	wrlong	local05, local01
20ddc     18 1E 86 F1 | 	sub	local01, #24
20de0     7C 00 90 FD | 	jmp	#LR__3435
20de4                 | LR__3430
20de4     0A 22 06 F1 | 	add	local03, #10
20de8     11 29 E2 FA | 	rdword	local06, local03
20dec     0A 22 86 F1 | 	sub	local03, #10
20df0     09 28 66 F0 | 	shl	local06, #9
20df4                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
20df4                 | ' 		while (ofs >= csz) {
20df4                 | LR__3431
20df4     14 21 12 F2 | 	cmp	local02, local06 wc
20df8     4C 00 90 CD |  if_b	jmp	#LR__3434
20dfc     0F 13 02 F6 | 	mov	arg01, local01
20e00     12 15 02 F6 | 	mov	arg02, local04
20e04     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
20e08     FD 24 02 F6 | 	mov	local04, result1
20e0c     FF FF 7F FF 
20e10     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20e14     01 FA 05 A6 |  if_e	mov	result1, #1
20e18     90 00 90 AD |  if_e	jmp	#LR__3436
20e1c     02 24 16 F2 | 	cmp	local04, #2 wc
20e20     14 00 90 CD |  if_b	jmp	#LR__3432
20e24     18 22 06 F1 | 	add	local03, #24
20e28     11 27 02 FB | 	rdlong	local05, local03
20e2c     18 22 86 F1 | 	sub	local03, #24
20e30     13 25 12 F2 | 	cmp	local04, local05 wc
20e34     08 00 90 CD |  if_b	jmp	#LR__3433
20e38                 | LR__3432
20e38     02 FA 05 F6 | 	mov	result1, #2
20e3c     6C 00 90 FD | 	jmp	#LR__3436
20e40                 | LR__3433
20e40     14 21 82 F1 | 	sub	local02, local06
20e44     AC FF 9F FD | 	jmp	#LR__3431
20e48                 | LR__3434
20e48     11 13 02 F6 | 	mov	arg01, local03
20e4c     12 15 02 F6 | 	mov	arg02, local04
20e50     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
20e54     18 1E 06 F1 | 	add	local01, #24
20e58     0F FB 61 FC | 	wrlong	result1, local01
20e5c     18 1E 86 F1 | 	sub	local01, #24
20e60                 | LR__3435
20e60     14 1E 06 F1 | 	add	local01, #20
20e64     0F 25 62 FC | 	wrlong	local04, local01
20e68     04 1E 06 F1 | 	add	local01, #4
20e6c     0F 27 0A FB | 	rdlong	local05, local01 wz
20e70     18 1E 86 F1 | 	sub	local01, #24
20e74     02 FA 05 A6 |  if_e	mov	result1, #2
20e78     30 00 90 AD |  if_e	jmp	#LR__3436
20e7c     10 29 02 F6 | 	mov	local06, local02
20e80     09 28 46 F0 | 	shr	local06, #9
20e84     18 1E 06 F1 | 	add	local01, #24
20e88     0F 27 02 FB | 	rdlong	local05, local01
20e8c     14 27 02 F1 | 	add	local05, local06
20e90     0F 27 62 FC | 	wrlong	local05, local01
20e94     34 22 06 F1 | 	add	local03, #52
20e98     FF 21 06 F5 | 	and	local02, #511
20e9c     10 23 02 F1 | 	add	local03, local02
20ea0     04 1E 06 F1 | 	add	local01, #4
20ea4     0F 23 62 FC | 	wrlong	local03, local01
20ea8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
20ea8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
20ea8                 | ' 
20ea8                 | ' 	return FR_OK;
20ea8     00 FA 05 F6 | 	mov	result1, #0
20eac                 | LR__3436
20eac     A7 F0 03 F6 | 	mov	ptra, fp
20eb0     B2 00 A0 FD | 	call	#popregs_
20eb4                 | _fatfs_cc_dir_sdi_ret
20eb4     2D 00 64 FD | 	ret
20eb8                 | 
20eb8                 | _fatfs_cc_dir_next
20eb8     05 4A 05 F6 | 	mov	COUNT_, #5
20ebc     A8 00 A0 FD | 	call	#pushregs_
20ec0     09 1F 02 F6 | 	mov	local01, arg01
20ec4     0A 21 02 F6 | 	mov	local02, arg02
20ec8     0F 23 02 FB | 	rdlong	local03, local01
20ecc     10 1E 06 F1 | 	add	local01, #16
20ed0     0F 25 02 FB | 	rdlong	local04, local01
20ed4     10 1E 86 F1 | 	sub	local01, #16
20ed8     20 24 06 F1 | 	add	local04, #32
20edc     00 10 00 FF 
20ee0     00 24 16 F2 | 	cmp	local04, ##2097152 wc
20ee4     18 1E 06 31 |  if_ae	add	local01, #24
20ee8     0F 01 68 3C |  if_ae	wrlong	#0, local01
20eec     18 1E 86 31 |  if_ae	sub	local01, #24
20ef0     18 1E 06 F1 | 	add	local01, #24
20ef4     0F 15 0A FB | 	rdlong	arg02, local01 wz
20ef8     18 1E 86 F1 | 	sub	local01, #24
20efc     04 FA 05 A6 |  if_e	mov	result1, #4
20f00     64 01 90 AD |  if_e	jmp	#LR__3445
20f04     FF 25 CE F7 | 	test	local04, #511 wz
20f08     3C 01 90 5D |  if_ne	jmp	#LR__3444
20f0c     18 1E 06 F1 | 	add	local01, #24
20f10     0F 15 02 FB | 	rdlong	arg02, local01
20f14     01 14 06 F1 | 	add	arg02, #1
20f18     0F 15 62 FC | 	wrlong	arg02, local01
20f1c     04 1E 86 F1 | 	sub	local01, #4
20f20     0F 15 0A FB | 	rdlong	arg02, local01 wz
20f24     14 1E 86 F1 | 	sub	local01, #20
20f28     2C 00 90 5D |  if_ne	jmp	#LR__3440
20f2c     12 15 02 F6 | 	mov	arg02, local04
20f30     05 14 46 F0 | 	shr	arg02, #5
20f34     08 22 06 F1 | 	add	local03, #8
20f38     11 21 E2 FA | 	rdword	local02, local03
20f3c     08 22 86 F1 | 	sub	local03, #8
20f40     10 15 12 F2 | 	cmp	arg02, local02 wc
20f44     18 1E 06 31 |  if_ae	add	local01, #24
20f48     0F 01 68 3C |  if_ae	wrlong	#0, local01
20f4c                 | ' 				dp->sect = 0; return FR_NO_FILE;
20f4c     04 FA 05 36 |  if_ae	mov	result1, #4
20f50     14 01 90 3D |  if_ae	jmp	#LR__3445
20f54     F0 00 90 FD | 	jmp	#LR__3443
20f58                 | LR__3440
20f58     12 13 02 F6 | 	mov	arg01, local04
20f5c     09 12 46 F0 | 	shr	arg01, #9
20f60     0A 22 06 F1 | 	add	local03, #10
20f64     11 15 E2 FA | 	rdword	arg02, local03
20f68     0A 22 86 F1 | 	sub	local03, #10
20f6c     01 14 86 F1 | 	sub	arg02, #1
20f70     0A 13 CA F7 | 	test	arg01, arg02 wz
20f74     D0 00 90 5D |  if_ne	jmp	#LR__3442
20f78     0F 13 02 F6 | 	mov	arg01, local01
20f7c     14 1E 06 F1 | 	add	local01, #20
20f80     0F 15 02 FB | 	rdlong	arg02, local01
20f84     14 1E 86 F1 | 	sub	local01, #20
20f88     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
20f8c     FD 26 02 F6 | 	mov	local05, result1
20f90     02 26 16 F2 | 	cmp	local05, #2 wc
20f94     02 FA 05 C6 |  if_b	mov	result1, #2
20f98     CC 00 90 CD |  if_b	jmp	#LR__3445
20f9c     FF FF 7F FF 
20fa0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20fa4     01 FA 05 A6 |  if_e	mov	result1, #1
20fa8     BC 00 90 AD |  if_e	jmp	#LR__3445
20fac     18 22 06 F1 | 	add	local03, #24
20fb0     11 15 02 FB | 	rdlong	arg02, local03
20fb4     18 22 86 F1 | 	sub	local03, #24
20fb8     0A 27 12 F2 | 	cmp	local05, arg02 wc
20fbc     68 00 90 CD |  if_b	jmp	#LR__3441
20fc0     00 20 0E F2 | 	cmp	local02, #0 wz
20fc4     18 1E 06 A1 |  if_e	add	local01, #24
20fc8     0F 01 68 AC |  if_e	wrlong	#0, local01
20fcc                 | ' 						dp->sect = 0; return FR_NO_FILE;
20fcc     04 FA 05 A6 |  if_e	mov	result1, #4
20fd0     94 00 90 AD |  if_e	jmp	#LR__3445
20fd4     0F 13 02 F6 | 	mov	arg01, local01
20fd8     14 1E 06 F1 | 	add	local01, #20
20fdc     0F 15 02 FB | 	rdlong	arg02, local01
20fe0     14 1E 86 F1 | 	sub	local01, #20
20fe4     84 FA BF FD | 	call	#_fatfs_cc_create_chain
20fe8     FD 26 0A F6 | 	mov	local05, result1 wz
20fec     07 FA 05 A6 |  if_e	mov	result1, #7
20ff0     74 00 90 AD |  if_e	jmp	#LR__3445
20ff4     01 26 0E F2 | 	cmp	local05, #1 wz
20ff8     02 FA 05 A6 |  if_e	mov	result1, #2
20ffc     68 00 90 AD |  if_e	jmp	#LR__3445
21000     FF FF 7F FF 
21004     FF 27 0E F2 | 	cmp	local05, ##-1 wz
21008     01 FA 05 A6 |  if_e	mov	result1, #1
2100c     58 00 90 AD |  if_e	jmp	#LR__3445
21010     13 15 02 F6 | 	mov	arg02, local05
21014     11 13 02 F6 | 	mov	arg01, local03
21018     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2101c     00 FA 0D F2 | 	cmp	result1, #0 wz
21020     01 FA 05 56 |  if_ne	mov	result1, #1
21024     40 00 90 5D |  if_ne	jmp	#LR__3445
21028                 | LR__3441
21028     14 1E 06 F1 | 	add	local01, #20
2102c     0F 27 62 FC | 	wrlong	local05, local01
21030     11 13 02 F6 | 	mov	arg01, local03
21034     13 15 02 F6 | 	mov	arg02, local05
21038     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2103c     04 1E 06 F1 | 	add	local01, #4
21040     0F FB 61 FC | 	wrlong	result1, local01
21044     18 1E 86 F1 | 	sub	local01, #24
21048                 | LR__3442
21048                 | LR__3443
21048                 | LR__3444
21048     10 1E 06 F1 | 	add	local01, #16
2104c     0F 25 62 FC | 	wrlong	local04, local01
21050     34 22 06 F1 | 	add	local03, #52
21054     FF 25 06 F5 | 	and	local04, #511
21058     12 23 02 F1 | 	add	local03, local04
2105c     0C 1E 06 F1 | 	add	local01, #12
21060     0F 23 62 FC | 	wrlong	local03, local01
21064                 | ' #line 1771 "ff.c"
21064                 | ' 				}
21064                 | ' 				dp->clust = clst;
21064                 | ' 				dp->sect = clst2sect(fs, clst);
21064                 | ' 			}
21064                 | ' 		}
21064                 | ' 	}
21064                 | ' 	dp->dptr = ofs;
21064                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
21064                 | ' 
21064                 | ' 	return FR_OK;
21064     00 FA 05 F6 | 	mov	result1, #0
21068                 | LR__3445
21068     A7 F0 03 F6 | 	mov	ptra, fp
2106c     B2 00 A0 FD | 	call	#popregs_
21070                 | _fatfs_cc_dir_next_ret
21070     2D 00 64 FD | 	ret
21074                 | 
21074                 | _fatfs_cc_dir_alloc
21074     08 4A 05 F6 | 	mov	COUNT_, #8
21078     A8 00 A0 FD | 	call	#pushregs_
2107c     09 1F 02 F6 | 	mov	local01, arg01
21080     0A 21 02 F6 | 	mov	local02, arg02
21084     0F 23 02 FB | 	rdlong	local03, local01
21088     0F 13 02 F6 | 	mov	arg01, local01
2108c     00 14 06 F6 | 	mov	arg02, #0
21090     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
21094     FD 24 0A F6 | 	mov	local04, result1 wz
21098     70 00 90 5D |  if_ne	jmp	#LR__3454
2109c     00 26 06 F6 | 	mov	local05, #0
210a0                 | ' 		n = 0;
210a0                 | ' 		do {
210a0                 | LR__3450
210a0     18 1E 06 F1 | 	add	local01, #24
210a4     0F 15 02 FB | 	rdlong	arg02, local01
210a8     18 1E 86 F1 | 	sub	local01, #24
210ac     11 13 02 F6 | 	mov	arg01, local03
210b0     38 F3 BF FD | 	call	#_fatfs_cc_move_window
210b4     FD 24 0A F6 | 	mov	local04, result1 wz
210b8     50 00 90 5D |  if_ne	jmp	#LR__3453
210bc     1C 1E 06 F1 | 	add	local01, #28
210c0     0F 29 02 FB | 	rdlong	local06, local01
210c4     1C 1E 86 F1 | 	sub	local01, #28
210c8     14 29 C2 FA | 	rdbyte	local06, local06
210cc     E5 28 0E F2 | 	cmp	local06, #229 wz
210d0     1C 1E 06 51 |  if_ne	add	local01, #28
210d4     0F 2B 02 5B |  if_ne	rdlong	local07, local01
210d8     1C 1E 86 51 |  if_ne	sub	local01, #28
210dc     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
210e0     10 00 90 5D |  if_ne	jmp	#LR__3451
210e4     01 26 06 F1 | 	add	local05, #1
210e8     10 27 0A F2 | 	cmp	local05, local02 wz
210ec     1C 00 90 AD |  if_e	jmp	#LR__3453
210f0     04 00 90 FD | 	jmp	#LR__3452
210f4                 | LR__3451
210f4     00 26 06 F6 | 	mov	local05, #0
210f8                 | LR__3452
210f8     0F 13 02 F6 | 	mov	arg01, local01
210fc     01 14 06 F6 | 	mov	arg02, #1
21100     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
21104     FD 24 0A F6 | 	mov	local04, result1 wz
21108     94 FF 9F AD |  if_e	jmp	#LR__3450
2110c                 | LR__3453
2110c                 | LR__3454
2110c     04 24 0E F2 | 	cmp	local04, #4 wz
21110     07 24 06 A6 |  if_e	mov	local04, #7
21114                 | ' 	return res;
21114     12 FB 01 F6 | 	mov	result1, local04
21118     A7 F0 03 F6 | 	mov	ptra, fp
2111c     B2 00 A0 FD | 	call	#popregs_
21120                 | _fatfs_cc_dir_alloc_ret
21120     2D 00 64 FD | 	ret
21124                 | 
21124                 | _fatfs_cc_ld_clust
21124     09 01 02 F6 | 	mov	_var01, arg01
21128     0A 13 02 F6 | 	mov	arg01, arg02
2112c     1A 12 06 F1 | 	add	arg01, #26
21130                 | ' {
21130                 | ' 
21130                 | ' 	return *((WORD*)ptr);
21130     09 FB E1 FA | 	rdword	result1, arg01
21134     FD 12 32 F9 | 	getword	arg01, result1, #0
21138     00 01 C2 FA | 	rdbyte	_var01, _var01
2113c     03 00 0E F2 | 	cmp	_var01, #3 wz
21140     14 14 06 A1 |  if_e	add	arg02, #20
21144                 | ' {
21144                 | ' 
21144                 | ' 	return *((WORD*)ptr);
21144     0A FB E1 AA |  if_e	rdword	result1, arg02
21148     10 FA 65 A0 |  if_e	shl	result1, #16
2114c     FD 12 42 A5 |  if_e	or	arg01, result1
21150                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
21150                 | ' 	}
21150                 | ' 
21150                 | ' 	return cl;
21150     09 FB 01 F6 | 	mov	result1, arg01
21154                 | _fatfs_cc_ld_clust_ret
21154     2D 00 64 FD | 	ret
21158                 | 
21158                 | _fatfs_cc_st_clust
21158     09 01 02 F6 | 	mov	_var01, arg01
2115c     0A 13 02 F6 | 	mov	arg01, arg02
21160     1A 12 06 F1 | 	add	arg01, #26
21164     09 17 52 FC | 	wrword	arg03, arg01
21168     00 01 C2 FA | 	rdbyte	_var01, _var01
2116c     03 00 0E F2 | 	cmp	_var01, #3 wz
21170     14 14 06 A1 |  if_e	add	arg02, #20
21174     10 16 46 A0 |  if_e	shr	arg03, #16
21178     0A 17 52 AC |  if_e	wrword	arg03, arg02
2117c                 | _fatfs_cc_st_clust_ret
2117c     2D 00 64 FD | 	ret
21180                 | 
21180                 | _fatfs_cc_cmp_lfn
21180     07 4A 05 F6 | 	mov	COUNT_, #7
21184     A8 00 A0 FD | 	call	#pushregs_
21188     09 1F 02 F6 | 	mov	local01, arg01
2118c     0A 13 02 F6 | 	mov	arg01, arg02
21190     1A 12 06 F1 | 	add	arg01, #26
21194                 | ' {
21194                 | ' 
21194                 | ' 	return *((WORD*)ptr);
21194     09 FB E9 FA | 	rdword	result1, arg01 wz
21198     00 FA 05 56 |  if_ne	mov	result1, #0
2119c     E0 00 90 5D |  if_ne	jmp	#LR__3466
211a0     0A 21 C2 FA | 	rdbyte	local02, arg02
211a4     3F 20 06 F5 | 	and	local02, #63
211a8     01 20 86 F1 | 	sub	local02, #1
211ac     0D 20 06 FD | 	qmul	local02, #13
211b0                 | ' 
211b0                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
211b0                 | ' 
211b0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
211b0     01 22 06 F6 | 	mov	local03, #1
211b4     00 24 06 F6 | 	mov	local04, #0
211b8     18 26 62 FD | 	getqx	local05
211bc                 | LR__3460
211bc     0D 24 16 F2 | 	cmp	local04, #13 wc
211c0     9C 00 90 3D |  if_ae	jmp	#LR__3465
211c4     0A 13 02 F6 | 	mov	arg01, arg02
211c8     12 21 02 F6 | 	mov	local02, local04
211cc     01 00 00 FF 
211d0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
211d4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
211d8     10 21 C2 FA | 	rdbyte	local02, local02
211dc     01 20 06 FA | 	mul	local02, #1
211e0     10 13 02 F1 | 	add	arg01, local02
211e4     01 00 00 FF 
211e8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
211ec                 | ' {
211ec                 | ' 
211ec                 | ' 	return *((WORD*)ptr);
211ec     09 FB E1 FA | 	rdword	result1, arg01
211f0     FD 28 02 F6 | 	mov	local06, result1
211f4     11 21 02 F6 | 	mov	local02, local03
211f8     0F 20 4E F7 | 	zerox	local02, #15 wz
211fc     44 00 90 AD |  if_e	jmp	#LR__3463
21200     00 27 16 F2 | 	cmp	local05, #256 wc
21204     2C 00 90 3D |  if_ae	jmp	#LR__3461
21208     14 13 32 F9 | 	getword	arg01, local06, #0
2120c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
21210     FD 20 02 F6 | 	mov	local02, result1
21214     13 23 02 F6 | 	mov	local03, local05
21218     01 22 66 F0 | 	shl	local03, #1
2121c     0F 23 02 F1 | 	add	local03, local01
21220     11 13 E2 FA | 	rdword	arg01, local03
21224     01 26 06 F1 | 	add	local05, #1
21228     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2122c     FD 20 0A F2 | 	cmp	local02, result1 wz
21230     08 00 90 AD |  if_e	jmp	#LR__3462
21234                 | LR__3461
21234                 | ' 				return 0;
21234     00 FA 05 F6 | 	mov	result1, #0
21238     44 00 90 FD | 	jmp	#LR__3466
2123c                 | LR__3462
2123c     14 23 02 F6 | 	mov	local03, local06
21240     14 00 90 FD | 	jmp	#LR__3464
21244                 | LR__3463
21244     14 29 32 F9 | 	getword	local06, local06, #0
21248     7F 00 00 FF 
2124c     FF 29 0E F2 | 	cmp	local06, ##65535 wz
21250     00 FA 05 56 |  if_ne	mov	result1, #0
21254     28 00 90 5D |  if_ne	jmp	#LR__3466
21258                 | LR__3464
21258     01 24 06 F1 | 	add	local04, #1
2125c     5C FF 9F FD | 	jmp	#LR__3460
21260                 | LR__3465
21260     0A 21 C2 FA | 	rdbyte	local02, arg02
21264     40 20 CE F7 | 	test	local02, #64 wz
21268     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2126c     01 26 66 50 |  if_ne	shl	local05, #1
21270     0F 27 02 51 |  if_ne	add	local05, local01
21274     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
21278     00 FA 05 56 |  if_ne	mov	result1, #0
2127c                 | ' 
2127c                 | ' 	return 1;
2127c     01 FA 05 A6 |  if_e	mov	result1, #1
21280                 | LR__3466
21280     A7 F0 03 F6 | 	mov	ptra, fp
21284     B2 00 A0 FD | 	call	#popregs_
21288                 | _fatfs_cc_cmp_lfn_ret
21288     2D 00 64 FD | 	ret
2128c                 | 
2128c                 | _fatfs_cc_pick_lfn
2128c     09 01 02 F6 | 	mov	_var01, arg01
21290     0A 13 02 F6 | 	mov	arg01, arg02
21294     1A 12 06 F1 | 	add	arg01, #26
21298                 | ' {
21298                 | ' 
21298                 | ' 	return *((WORD*)ptr);
21298     09 FB E9 FA | 	rdword	result1, arg01 wz
2129c     00 FA 05 56 |  if_ne	mov	result1, #0
212a0     D4 00 90 5D |  if_ne	jmp	#LR__3475
212a4     0A 03 C2 FA | 	rdbyte	_var02, arg02
212a8     40 02 26 F5 | 	andn	_var02, #64
212ac     01 02 86 F1 | 	sub	_var02, #1
212b0     0D 02 06 FD | 	qmul	_var02, #13
212b4                 | ' 
212b4                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
212b4                 | ' 
212b4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
212b4     01 04 06 F6 | 	mov	_var03, #1
212b8     00 06 06 F6 | 	mov	_var04, #0
212bc     18 08 62 FD | 	getqx	_var05
212c0                 | LR__3470
212c0     0D 06 16 F2 | 	cmp	_var04, #13 wc
212c4     80 00 90 3D |  if_ae	jmp	#LR__3473
212c8     0A 13 02 F6 | 	mov	arg01, arg02
212cc     03 03 02 F6 | 	mov	_var02, _var04
212d0     01 00 00 FF 
212d4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
212d8     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
212dc     01 03 C2 FA | 	rdbyte	_var02, _var02
212e0     01 02 06 FA | 	mul	_var02, #1
212e4     01 13 02 F1 | 	add	arg01, _var02
212e8     01 00 00 FF 
212ec     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
212f0                 | ' {
212f0                 | ' 
212f0                 | ' 	return *((WORD*)ptr);
212f0     09 FB E1 FA | 	rdword	result1, arg01
212f4     FD 0A 02 F6 | 	mov	_var06, result1
212f8     02 03 02 F6 | 	mov	_var02, _var03
212fc     0F 02 4E F7 | 	zerox	_var02, #15 wz
21300     28 00 90 AD |  if_e	jmp	#LR__3471
21304     00 09 16 F2 | 	cmp	_var05, #256 wc
21308     00 FA 05 36 |  if_ae	mov	result1, #0
2130c     68 00 90 3D |  if_ae	jmp	#LR__3475
21310     04 03 02 F6 | 	mov	_var02, _var05
21314     01 02 66 F0 | 	shl	_var02, #1
21318     00 03 02 F1 | 	add	_var02, _var01
2131c     05 05 02 F6 | 	mov	_var03, _var06
21320     01 05 52 FC | 	wrword	_var03, _var02
21324     01 08 06 F1 | 	add	_var05, #1
21328     14 00 90 FD | 	jmp	#LR__3472
2132c                 | LR__3471
2132c     05 0B 32 F9 | 	getword	_var06, _var06, #0
21330     7F 00 00 FF 
21334     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
21338     00 FA 05 56 |  if_ne	mov	result1, #0
2133c     38 00 90 5D |  if_ne	jmp	#LR__3475
21340                 | LR__3472
21340     01 06 06 F1 | 	add	_var04, #1
21344     78 FF 9F FD | 	jmp	#LR__3470
21348                 | LR__3473
21348     0A 03 C2 FA | 	rdbyte	_var02, arg02
2134c     40 02 CE F7 | 	test	_var02, #64 wz
21350     02 0D 02 56 |  if_ne	mov	_var07, _var03
21354     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
21358     18 00 90 AD |  if_e	jmp	#LR__3474
2135c     00 09 16 F2 | 	cmp	_var05, #256 wc
21360     00 FA 05 36 |  if_ae	mov	result1, #0
21364     10 00 90 3D |  if_ae	jmp	#LR__3475
21368     01 08 66 F0 | 	shl	_var05, #1
2136c     00 09 02 F1 | 	add	_var05, _var01
21370     04 01 58 FC | 	wrword	#0, _var05
21374                 | LR__3474
21374                 | ' 		lfnbuf[i] = 0;
21374                 | ' 	}
21374                 | ' 
21374                 | ' 	return 1;
21374     01 FA 05 F6 | 	mov	result1, #1
21378                 | LR__3475
21378                 | _fatfs_cc_pick_lfn_ret
21378     2D 00 64 FD | 	ret
2137c                 | 
2137c                 | _fatfs_cc_put_lfn
2137c     0D 14 06 F1 | 	add	arg02, #13
21380     0A 19 42 FC | 	wrbyte	arg04, arg02
21384     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
21388     01 18 86 F1 | 	sub	arg04, #1
2138c     0D 18 06 FD | 	qmul	arg04, #13
21390     09 01 02 F6 | 	mov	_var01, arg01
21394     02 14 86 F1 | 	sub	arg02, #2
21398     0A 1F 48 FC | 	wrbyte	#15, arg02
2139c     01 14 06 F1 | 	add	arg02, #1
213a0     0A 01 48 FC | 	wrbyte	#0, arg02
213a4     0C 14 86 F1 | 	sub	arg02, #12
213a8     0A 13 02 F6 | 	mov	arg01, arg02
213ac     1A 12 06 F1 | 	add	arg01, #26
213b0     09 01 58 FC | 	wrword	#0, arg01
213b4     00 02 06 F6 | 	mov	_var02, #0
213b8     00 04 06 F6 | 	mov	_var03, #0
213bc                 | ' 	BYTE* dir,
213bc                 | ' 	BYTE ord,
213bc                 | ' 	BYTE sum
213bc                 | ' )
213bc                 | ' {
213bc                 | ' 	UINT i, s;
213bc                 | ' 	WCHAR wc;
213bc                 | ' 
213bc                 | ' 
213bc                 | ' 	dir[ 13 ] = sum;
213bc                 | ' 	dir[ 11 ] =  0x0F ;
213bc                 | ' 	dir[ 12 ] = 0;
213bc                 | ' 	st_word(dir +  26 , 0);
213bc                 | ' 
213bc                 | ' 	i = (ord - 1) * 13;
213bc                 | ' 	s = wc = 0;
213bc                 | ' 	do {
213bc     01 00 00 FF 
213c0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
213c4     18 06 62 FD | 	getqx	_var04
213c8     97 2A 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
213cc                 | LR__3480
213cc     01 19 32 F9 | 	getword	arg04, _var02, #0
213d0     7F 00 00 FF 
213d4     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
213d8     03 13 02 56 |  if_ne	mov	arg01, _var04
213dc     01 06 06 51 |  if_ne	add	_var04, #1
213e0     01 12 66 50 |  if_ne	shl	arg01, #1
213e4     00 13 02 51 |  if_ne	add	arg01, _var01
213e8     09 03 E2 5A |  if_ne	rdword	_var02, arg01
213ec     0A 13 02 F6 | 	mov	arg01, arg02
213f0     02 19 02 F6 | 	mov	arg04, _var03
213f4     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
213f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
213fc     01 18 06 FA | 	mul	arg04, #1
21400     0C 13 02 F1 | 	add	arg01, arg04
21404     09 03 52 FC | 	wrword	_var02, arg01
21408     01 19 02 F6 | 	mov	arg04, _var02
2140c     0F 18 4E F7 | 	zerox	arg04, #15 wz
21410     0F 02 CE A9 |  if_e	bmask	_var02, #15
21414     01 04 06 F1 | 	add	_var03, #1
21418     0D 04 16 F2 | 	cmp	_var03, #13 wc
2141c     AC FF 9F CD |  if_b	jmp	#LR__3480
21420                 | LR__3481
21420     01 00 00 FF 
21424     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
21428     01 03 32 F9 | 	getword	_var02, _var02, #0
2142c     7F 00 00 FF 
21430     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
21434     01 06 66 50 |  if_ne	shl	_var04, #1
21438     00 07 02 51 |  if_ne	add	_var04, _var01
2143c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
21440     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
21444     40 16 46 A5 |  if_e	or	arg03, #64
21448     0A 17 42 FC | 	wrbyte	arg03, arg02
2144c                 | _fatfs_cc_put_lfn_ret
2144c     2D 00 64 FD | 	ret
21450                 | 
21450                 | _fatfs_cc_gen_numname
21450     08 4A 05 F6 | 	mov	COUNT_, #8
21454     A8 00 A0 FD | 	call	#pushregs_
21458     2C F0 07 F1 | 	add	ptra, #44
2145c     09 1F 02 F6 | 	mov	local01, arg01
21460     0A 21 02 F6 | 	mov	local02, arg02
21464     0B 23 02 F6 | 	mov	local03, arg03
21468     0C 25 02 F6 | 	mov	local04, arg04
2146c     0F 13 02 F6 | 	mov	arg01, local01
21470     10 15 02 F6 | 	mov	arg02, local02
21474     0B 16 06 F6 | 	mov	arg03, #11
21478     88 78 BF FD | 	call	#__system____builtin_memmove
2147c     06 24 16 F2 | 	cmp	local04, #6 wc
21480     48 00 90 CD |  if_b	jmp	#LR__3495
21484     12 27 02 F6 | 	mov	local05, local04
21488     97 1E 48 FB | 	callpa	#(@LR__3493-@LR__3490)>>2,fcache_load_ptr_
2148c                 | ' 		sreg = seq;
2148c                 | ' 		while (*lfn) {
2148c                 | LR__3490
2148c     11 29 EA FA | 	rdword	local06, local03 wz
21490     34 00 90 AD |  if_e	jmp	#LR__3494
21494     11 2B E2 FA | 	rdword	local07, local03
21498                 | ' 			wc = *lfn++;
21498                 | ' 			for (i = 0; i < 16; i++) {
21498     02 22 06 F1 | 	add	local03, #2
2149c     10 12 DC FC | 	rep	@LR__3492, #16
214a0                 | LR__3491
214a0     01 26 66 F0 | 	shl	local05, #1
214a4     15 29 32 F9 | 	getword	local06, local07, #0
214a8     01 28 06 F5 | 	and	local06, #1
214ac     14 27 02 F1 | 	add	local05, local06
214b0     15 2B 32 F9 | 	getword	local07, local07, #0
214b4     01 2A 46 F0 | 	shr	local07, #1
214b8     10 26 2E F4 | 	testbn	local05, #16 wz
214bc     88 00 00 5F 
214c0     21 26 66 55 |  if_ne	xor	local05, ##69665
214c4                 | LR__3492
214c4     C4 FF 9F FD | 	jmp	#LR__3490
214c8                 | LR__3493
214c8                 | LR__3494
214c8     13 25 02 F6 | 	mov	local04, local05
214cc                 | LR__3495
214cc     07 2A 06 F6 | 	mov	local07, #7
214d0                 | ' 			}
214d0                 | ' 		}
214d0                 | ' 		seq = (UINT)sreg;
214d0                 | ' 	}
214d0                 | ' 
214d0                 | ' 
214d0                 | ' 	i = 7;
214d0                 | ' 	do {
214d0     10 4E 05 F1 | 	add	fp, #16
214d4     97 1A 48 FB | 	callpa	#(@LR__3497-@LR__3496)>>2,fcache_load_ptr_
214d8                 | LR__3496
214d8     12 27 42 F8 | 	getnib	local05, local04, #0
214dc     30 26 06 F1 | 	add	local05, #48
214e0     04 24 46 F0 | 	shr	local04, #4
214e4     13 29 E2 F8 | 	getbyte	local06, local05, #0
214e8     3A 28 16 F2 | 	cmp	local06, #58 wc
214ec     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
214f0     07 26 06 31 |  if_ae	add	local05, #7
214f4     15 29 02 F6 | 	mov	local06, local07
214f8     01 2A 8E F1 | 	sub	local07, #1 wz
214fc     A7 28 02 F1 | 	add	local06, fp
21500     14 27 42 FC | 	wrbyte	local05, local06
21504     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
21508     CC FF 9F 5D |  if_ne	jmp	#LR__3496
2150c                 | LR__3497
2150c     15 29 02 F6 | 	mov	local06, local07
21510     A7 28 02 F1 | 	add	local06, fp
21514     14 FD 48 FC | 	wrbyte	#126, local06
21518                 | ' 	ns[i] = '~';
21518                 | ' 
21518                 | ' 
21518                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
21518     00 26 06 F6 | 	mov	local05, #0
2151c     10 4E 85 F1 | 	sub	fp, #16
21520     97 2A 48 FB | 	callpa	#(@LR__3500-@LR__3498)>>2,fcache_load_ptr_
21524                 | LR__3498
21524     15 27 12 F2 | 	cmp	local05, local07 wc
21528     4C 00 90 3D |  if_ae	jmp	#LR__3501
2152c     13 29 02 F6 | 	mov	local06, local05
21530     0F 29 02 F1 | 	add	local06, local01
21534     14 29 C2 FA | 	rdbyte	local06, local06
21538     20 28 0E F2 | 	cmp	local06, #32 wz
2153c     38 00 90 AD |  if_e	jmp	#LR__3501
21540     13 13 02 F6 | 	mov	arg01, local05
21544     0F 13 02 F1 | 	add	arg01, local01
21548     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2154c     00 FA 05 56 |  if_ne	mov	result1, #0
21550                 | ' 
21550                 | ' 	return 0;
21550     00 FA 05 A6 |  if_e	mov	result1, #0
21554     00 FA 0D F2 | 	cmp	result1, #0 wz
21558     14 00 90 AD |  if_e	jmp	#LR__3499
2155c     15 29 02 F6 | 	mov	local06, local07
21560     01 28 86 F1 | 	sub	local06, #1
21564     14 27 0A F2 | 	cmp	local05, local06 wz
21568     0C 00 90 AD |  if_e	jmp	#LR__3501
2156c     01 26 06 F1 | 	add	local05, #1
21570                 | LR__3499
21570     01 26 06 F1 | 	add	local05, #1
21574     AC FF 9F FD | 	jmp	#LR__3498
21578                 | LR__3500
21578                 | LR__3501
21578     97 20 48 FB | 	callpa	#(@LR__3505-@LR__3502)>>2,fcache_load_ptr_
2157c                 | ' 			j++;
2157c                 | ' 		}
2157c                 | ' 	}
2157c                 | ' 	do {
2157c                 | LR__3502
2157c     13 29 02 F6 | 	mov	local06, local05
21580     0F 29 02 F1 | 	add	local06, local01
21584     08 2A 16 F2 | 	cmp	local07, #8 wc
21588     01 26 06 F1 | 	add	local05, #1
2158c     1C 00 90 3D |  if_ae	jmp	#LR__3503
21590     15 25 02 F6 | 	mov	local04, local07
21594     10 4E 05 F1 | 	add	fp, #16
21598     A7 24 02 F1 | 	add	local04, fp
2159c     12 2D C2 FA | 	rdbyte	local08, local04
215a0     01 2A 06 F1 | 	add	local07, #1
215a4     10 4E 85 F1 | 	sub	fp, #16
215a8     04 00 90 FD | 	jmp	#LR__3504
215ac                 | LR__3503
215ac     20 2C 06 F6 | 	mov	local08, #32
215b0                 | LR__3504
215b0     14 2D 42 FC | 	wrbyte	local08, local06
215b4     08 26 16 F2 | 	cmp	local05, #8 wc
215b8     C0 FF 9F CD |  if_b	jmp	#LR__3502
215bc                 | LR__3505
215bc     A7 F0 03 F6 | 	mov	ptra, fp
215c0     B2 00 A0 FD | 	call	#popregs_
215c4                 | _fatfs_cc_gen_numname_ret
215c4     2D 00 64 FD | 	ret
215c8                 | 
215c8                 | _fatfs_cc_sum_sfn
215c8     00 00 06 F6 | 	mov	_var01, #0
215cc                 | ' )
215cc                 | ' {
215cc                 | ' 	BYTE sum = 0;
215cc                 | ' 	UINT n = 11;
215cc                 | ' 
215cc                 | ' 	do {
215cc     97 12 48 FB | 	callpa	#(@LR__3512-@LR__3510)>>2,fcache_load_ptr_
215d0                 | LR__3510
215d0     0B 10 DC FC | 	rep	@LR__3513, #11
215d4                 | LR__3511
215d4     00 FB E1 F8 | 	getbyte	result1, _var01, #0
215d8     01 FA 45 F0 | 	shr	result1, #1
215dc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
215e0     07 00 66 F0 | 	shl	_var01, #7
215e4     00 FB 01 F1 | 	add	result1, _var01
215e8     09 01 C2 FA | 	rdbyte	_var01, arg01
215ec     FD 00 02 F1 | 	add	_var01, result1
215f0     01 12 06 F1 | 	add	arg01, #1
215f4                 | LR__3512
215f4                 | LR__3513
215f4                 | ' 	return sum;
215f4     00 FB 01 F6 | 	mov	result1, _var01
215f8                 | _fatfs_cc_sum_sfn_ret
215f8     2D 00 64 FD | 	ret
215fc                 | 
215fc                 | _fatfs_cc_dir_read
215fc     0C 4A 05 F6 | 	mov	COUNT_, #12
21600     A8 00 A0 FD | 	call	#pushregs_
21604     09 1F 02 F6 | 	mov	local01, arg01
21608     0A 21 02 F6 | 	mov	local02, arg02
2160c     04 22 06 F6 | 	mov	local03, #4
21610     0F 25 02 FB | 	rdlong	local04, local01
21614     FF 26 06 F6 | 	mov	local05, #255
21618     FF 28 06 F6 | 	mov	local06, #255
2161c                 | ' )
2161c                 | ' {
2161c                 | ' 	FRESULT res = FR_NO_FILE;
2161c                 | ' 	FATFS *fs = dp->obj.fs;
2161c                 | ' 	BYTE attr, b;
2161c                 | ' 
2161c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2161c                 | ' 
2161c                 | ' 
2161c                 | ' 	while (dp->sect) {
2161c                 | LR__3520
2161c     18 1E 06 F1 | 	add	local01, #24
21620     0F FB 09 FB | 	rdlong	result1, local01 wz
21624     18 1E 86 F1 | 	sub	local01, #24
21628     AC 01 90 AD |  if_e	jmp	#LR__3530
2162c     18 1E 06 F1 | 	add	local01, #24
21630     0F 15 02 FB | 	rdlong	arg02, local01
21634     18 1E 86 F1 | 	sub	local01, #24
21638     12 13 02 F6 | 	mov	arg01, local04
2163c     AC ED BF FD | 	call	#_fatfs_cc_move_window
21640     FD 22 0A F6 | 	mov	local03, result1 wz
21644     90 01 90 5D |  if_ne	jmp	#LR__3530
21648     1C 1E 06 F1 | 	add	local01, #28
2164c     0F FB 01 FB | 	rdlong	result1, local01
21650     1C 1E 86 F1 | 	sub	local01, #28
21654     FD 2A C2 FA | 	rdbyte	local07, result1
21658     15 FB 01 F6 | 	mov	result1, local07
2165c     07 FA 4D F7 | 	zerox	result1, #7 wz
21660     04 22 06 A6 |  if_e	mov	local03, #4
21664                 | ' 			res = FR_NO_FILE; break;
21664     70 01 90 AD |  if_e	jmp	#LR__3530
21668     1C 1E 06 F1 | 	add	local01, #28
2166c     0F 2D 02 FB | 	rdlong	local08, local01
21670     0B 2C 06 F1 | 	add	local08, #11
21674     16 2F C2 FA | 	rdbyte	local09, local08
21678     3F 2E 06 F5 | 	and	local09, #63
2167c     16 1E 86 F1 | 	sub	local01, #22
21680     0F 2F 42 FC | 	wrbyte	local09, local01
21684     06 1E 86 F1 | 	sub	local01, #6
21688     15 FB E1 F8 | 	getbyte	result1, local07, #0
2168c     E5 FA 0D F2 | 	cmp	result1, #229 wz
21690     15 2D 02 56 |  if_ne	mov	local08, local07
21694     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
21698     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
2169c     1C 00 90 AD |  if_e	jmp	#LR__3521
216a0     00 30 06 F6 | 	mov	local10, #0
216a4     17 2D E2 F8 | 	getbyte	local08, local09, #0
216a8     20 2C 26 F5 | 	andn	local08, #32
216ac     08 2C 0E F2 | 	cmp	local08, #8 wz
216b0     01 30 06 A6 |  if_e	mov	local10, #1
216b4     10 31 0A F2 | 	cmp	local10, local02 wz
216b8     08 00 90 AD |  if_e	jmp	#LR__3522
216bc                 | LR__3521
216bc     FF 26 06 F6 | 	mov	local05, #255
216c0     00 01 90 FD | 	jmp	#LR__3529
216c4                 | LR__3522
216c4     17 2F E2 F8 | 	getbyte	local09, local09, #0
216c8     0F 2E 0E F2 | 	cmp	local09, #15 wz
216cc     B4 00 90 5D |  if_ne	jmp	#LR__3526
216d0     15 33 E2 F8 | 	getbyte	local11, local07, #0
216d4     40 32 CE F7 | 	test	local11, #64 wz
216d8     30 00 90 AD |  if_e	jmp	#LR__3523
216dc     1C 1E 06 F1 | 	add	local01, #28
216e0     0F 33 02 FB | 	rdlong	local11, local01
216e4     0D 32 06 F1 | 	add	local11, #13
216e8     19 29 C2 FA | 	rdbyte	local06, local11
216ec     15 2B E2 F8 | 	getbyte	local07, local07, #0
216f0     BF 2A 06 F5 | 	and	local07, #191
216f4     15 27 02 F6 | 	mov	local05, local07
216f8     0C 1E 86 F1 | 	sub	local01, #12
216fc     0F 33 02 FB | 	rdlong	local11, local01
21700     1C 1E 06 F1 | 	add	local01, #28
21704     0F 33 62 FC | 	wrlong	local11, local01
21708     2C 1E 86 F1 | 	sub	local01, #44
2170c                 | LR__3523
2170c     15 2D E2 F8 | 	getbyte	local08, local07, #0
21710     13 31 E2 F8 | 	getbyte	local10, local05, #0
21714     18 2D 0A F2 | 	cmp	local08, local10 wz
21718     5C 00 90 5D |  if_ne	jmp	#LR__3524
2171c     14 31 E2 F8 | 	getbyte	local10, local06, #0
21720     1C 1E 06 F1 | 	add	local01, #28
21724     0F 2F 02 FB | 	rdlong	local09, local01
21728     1C 1E 86 F1 | 	sub	local01, #28
2172c     0D 2E 06 F1 | 	add	local09, #13
21730     17 2D C2 FA | 	rdbyte	local08, local09
21734     16 2F E2 F8 | 	getbyte	local09, local08, #0
21738     17 31 0A F2 | 	cmp	local10, local09 wz
2173c     38 00 90 5D |  if_ne	jmp	#LR__3524
21740     0C 24 06 F1 | 	add	local04, #12
21744     12 13 02 FB | 	rdlong	arg01, local04
21748     0C 24 86 F1 | 	sub	local04, #12
2174c     1C 1E 06 F1 | 	add	local01, #28
21750     0F 35 02 FB | 	rdlong	local12, local01
21754     1C 1E 86 F1 | 	sub	local01, #28
21758     1A 15 02 F6 | 	mov	arg02, local12
2175c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
21760     00 FA 4D F2 | 	cmps	result1, #0 wz
21764     13 35 02 56 |  if_ne	mov	local12, local05
21768     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
2176c     01 34 86 51 |  if_ne	sub	local12, #1
21770     1A 33 02 56 |  if_ne	mov	local11, local12
21774     04 00 90 5D |  if_ne	jmp	#LR__3525
21778                 | LR__3524
21778     FF 32 06 F6 | 	mov	local11, #255
2177c                 | LR__3525
2177c     19 27 02 F6 | 	mov	local05, local11
21780     40 00 90 FD | 	jmp	#LR__3528
21784                 | LR__3526
21784     13 33 02 F6 | 	mov	local11, local05
21788     07 32 4E F7 | 	zerox	local11, #7 wz
2178c     20 00 90 5D |  if_ne	jmp	#LR__3527
21790     14 29 E2 F8 | 	getbyte	local06, local06, #0
21794     1C 1E 06 F1 | 	add	local01, #28
21798     0F 13 02 FB | 	rdlong	arg01, local01
2179c     1C 1E 86 F1 | 	sub	local01, #28
217a0     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
217a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
217a8     FD 28 0A F2 | 	cmp	local06, result1 wz
217ac     28 00 90 AD |  if_e	jmp	#LR__3530
217b0                 | LR__3527
217b0     2C 1E 06 F1 | 	add	local01, #44
217b4     FF FF FF FF 
217b8     0F FF 6B FC | 	wrlong	##-1, local01
217bc     2C 1E 86 F1 | 	sub	local01, #44
217c0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
217c0                 | ' 					}
217c0                 | ' 					break;
217c0     14 00 90 FD | 	jmp	#LR__3530
217c4                 | LR__3528
217c4                 | LR__3529
217c4     0F 13 02 F6 | 	mov	arg01, local01
217c8     00 14 06 F6 | 	mov	arg02, #0
217cc     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
217d0     FD 22 0A F6 | 	mov	local03, result1 wz
217d4     44 FE 9F AD |  if_e	jmp	#LR__3520
217d8                 | LR__3530
217d8     00 22 0E F2 | 	cmp	local03, #0 wz
217dc     18 1E 06 51 |  if_ne	add	local01, #24
217e0     0F 01 68 5C |  if_ne	wrlong	#0, local01
217e4                 | ' 	return res;
217e4     11 FB 01 F6 | 	mov	result1, local03
217e8     A7 F0 03 F6 | 	mov	ptra, fp
217ec     B2 00 A0 FD | 	call	#popregs_
217f0                 | _fatfs_cc_dir_read_ret
217f0     2D 00 64 FD | 	ret
217f4                 | 
217f4                 | _fatfs_cc_dir_find
217f4     0B 4A 05 F6 | 	mov	COUNT_, #11
217f8     A8 00 A0 FD | 	call	#pushregs_
217fc     09 1F 02 F6 | 	mov	local01, arg01
21800     0F 21 02 FB | 	rdlong	local02, local01
21804     0F 13 02 F6 | 	mov	arg01, local01
21808     00 14 06 F6 | 	mov	arg02, #0
2180c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
21810     00 FA 0D F2 | 	cmp	result1, #0 wz
21814     18 02 90 5D |  if_ne	jmp	#LR__3552
21818     FF 22 06 F6 | 	mov	local03, #255
2181c     FF 24 06 F6 | 	mov	local04, #255
21820     2C 1E 06 F1 | 	add	local01, #44
21824     FF FF FF FF 
21828     0F FF 6B FC | 	wrlong	##-1, local01
2182c     2C 1E 86 F1 | 	sub	local01, #44
21830                 | ' #line 2404 "ff.c"
21830                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
21830                 | ' 
21830                 | ' 	do {
21830                 | LR__3540
21830     18 1E 06 F1 | 	add	local01, #24
21834     0F 15 02 FB | 	rdlong	arg02, local01
21838     18 1E 86 F1 | 	sub	local01, #24
2183c     10 13 02 F6 | 	mov	arg01, local02
21840     A8 EB BF FD | 	call	#_fatfs_cc_move_window
21844     FD 26 0A F6 | 	mov	local05, result1 wz
21848     E0 01 90 5D |  if_ne	jmp	#LR__3551
2184c     1C 1E 06 F1 | 	add	local01, #28
21850     0F 17 02 FB | 	rdlong	arg03, local01
21854     1C 1E 86 F1 | 	sub	local01, #28
21858     0B 29 C2 FA | 	rdbyte	local06, arg03
2185c     14 17 02 F6 | 	mov	arg03, local06
21860     07 16 4E F7 | 	zerox	arg03, #7 wz
21864     04 26 06 A6 |  if_e	mov	local05, #4
21868     C0 01 90 AD |  if_e	jmp	#LR__3551
2186c     1C 1E 06 F1 | 	add	local01, #28
21870     0F 2B 02 FB | 	rdlong	local07, local01
21874     15 17 02 F6 | 	mov	arg03, local07
21878     0B 16 06 F1 | 	add	arg03, #11
2187c     0B 2D C2 FA | 	rdbyte	local08, arg03
21880     3F 2C 06 F5 | 	and	local08, #63
21884     16 1E 86 F1 | 	sub	local01, #22
21888     0F 2D 42 FC | 	wrbyte	local08, local01
2188c     06 1E 86 F1 | 	sub	local01, #6
21890     14 17 E2 F8 | 	getbyte	arg03, local06, #0
21894     E5 16 0E F2 | 	cmp	arg03, #229 wz
21898     18 00 90 AD |  if_e	jmp	#LR__3541
2189c     16 17 E2 F8 | 	getbyte	arg03, local08, #0
218a0     08 16 CE F7 | 	test	arg03, #8 wz
218a4     16 2B 02 56 |  if_ne	mov	local07, local08
218a8     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
218ac     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
218b0     18 00 90 AD |  if_e	jmp	#LR__3542
218b4                 | LR__3541
218b4     FF 24 06 F6 | 	mov	local04, #255
218b8     2C 1E 06 F1 | 	add	local01, #44
218bc     FF FF FF FF 
218c0     0F FF 6B FC | 	wrlong	##-1, local01
218c4     2C 1E 86 F1 | 	sub	local01, #44
218c8     4C 01 90 FD | 	jmp	#LR__3550
218cc                 | LR__3542
218cc     16 2D E2 F8 | 	getbyte	local08, local08, #0
218d0     0F 2C 0E F2 | 	cmp	local08, #15 wz
218d4     C8 00 90 5D |  if_ne	jmp	#LR__3546
218d8     2B 1E 06 F1 | 	add	local01, #43
218dc     0F 2D C2 FA | 	rdbyte	local08, local01
218e0     2B 1E 86 F1 | 	sub	local01, #43
218e4     40 2C CE F7 | 	test	local08, #64 wz
218e8     2C 01 90 5D |  if_ne	jmp	#LR__3549
218ec     14 2F E2 F8 | 	getbyte	local09, local06, #0
218f0     40 2E CE F7 | 	test	local09, #64 wz
218f4     30 00 90 AD |  if_e	jmp	#LR__3543
218f8     1C 1E 06 F1 | 	add	local01, #28
218fc     0F 2F 02 FB | 	rdlong	local09, local01
21900     0D 2E 06 F1 | 	add	local09, #13
21904     17 23 C2 FA | 	rdbyte	local03, local09
21908     14 29 E2 F8 | 	getbyte	local06, local06, #0
2190c     BF 28 06 F5 | 	and	local06, #191
21910     14 25 02 F6 | 	mov	local04, local06
21914     0C 1E 86 F1 | 	sub	local01, #12
21918     0F 2F 02 FB | 	rdlong	local09, local01
2191c     1C 1E 06 F1 | 	add	local01, #28
21920     0F 2F 62 FC | 	wrlong	local09, local01
21924     2C 1E 86 F1 | 	sub	local01, #44
21928                 | LR__3543
21928     14 31 E2 F8 | 	getbyte	local10, local06, #0
2192c     12 2B E2 F8 | 	getbyte	local07, local04, #0
21930     15 31 0A F2 | 	cmp	local10, local07 wz
21934     5C 00 90 5D |  if_ne	jmp	#LR__3544
21938     11 2D E2 F8 | 	getbyte	local08, local03, #0
2193c     1C 1E 06 F1 | 	add	local01, #28
21940     0F 2B 02 FB | 	rdlong	local07, local01
21944     1C 1E 86 F1 | 	sub	local01, #28
21948     0D 2A 06 F1 | 	add	local07, #13
2194c     15 29 C2 FA | 	rdbyte	local06, local07
21950     14 2B E2 F8 | 	getbyte	local07, local06, #0
21954     15 2D 0A F2 | 	cmp	local08, local07 wz
21958     38 00 90 5D |  if_ne	jmp	#LR__3544
2195c     0C 20 06 F1 | 	add	local02, #12
21960     10 13 02 FB | 	rdlong	arg01, local02
21964     0C 20 86 F1 | 	sub	local02, #12
21968     1C 1E 06 F1 | 	add	local01, #28
2196c     0F 33 02 FB | 	rdlong	local11, local01
21970     1C 1E 86 F1 | 	sub	local01, #28
21974     19 15 02 F6 | 	mov	arg02, local11
21978     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2197c     00 FA 4D F2 | 	cmps	result1, #0 wz
21980     12 33 02 56 |  if_ne	mov	local11, local04
21984     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
21988     01 32 86 51 |  if_ne	sub	local11, #1
2198c     19 2F 02 56 |  if_ne	mov	local09, local11
21990     04 00 90 5D |  if_ne	jmp	#LR__3545
21994                 | LR__3544
21994     FF 2E 06 F6 | 	mov	local09, #255
21998                 | LR__3545
21998     17 25 02 F6 | 	mov	local04, local09
2199c     78 00 90 FD | 	jmp	#LR__3549
219a0                 | LR__3546
219a0     12 2F 02 F6 | 	mov	local09, local04
219a4     07 2E 4E F7 | 	zerox	local09, #7 wz
219a8     20 00 90 5D |  if_ne	jmp	#LR__3547
219ac     11 31 E2 F8 | 	getbyte	local10, local03, #0
219b0     1C 1E 06 F1 | 	add	local01, #28
219b4     0F 13 02 FB | 	rdlong	arg01, local01
219b8     1C 1E 86 F1 | 	sub	local01, #28
219bc     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
219c0     FD FA E1 F8 | 	getbyte	result1, result1, #0
219c4     FD 30 0A F2 | 	cmp	local10, result1 wz
219c8     60 00 90 AD |  if_e	jmp	#LR__3551
219cc                 | LR__3547
219cc     2B 1E 06 F1 | 	add	local01, #43
219d0     0F 2F C2 FA | 	rdbyte	local09, local01
219d4     2B 1E 86 F1 | 	sub	local01, #43
219d8     01 2E CE F7 | 	test	local09, #1 wz
219dc     24 00 90 5D |  if_ne	jmp	#LR__3548
219e0     1C 1E 06 F1 | 	add	local01, #28
219e4     0F 13 02 FB | 	rdlong	arg01, local01
219e8     04 1E 06 F1 | 	add	local01, #4
219ec     0F 15 02 F6 | 	mov	arg02, local01
219f0     20 1E 86 F1 | 	sub	local01, #32
219f4     0B 16 06 F6 | 	mov	arg03, #11
219f8     88 DA BF FD | 	call	#_fatfs_cc_memcmp
219fc     00 FA 0D F2 | 	cmp	result1, #0 wz
21a00     28 00 90 AD |  if_e	jmp	#LR__3551
21a04                 | LR__3548
21a04     FF 24 06 F6 | 	mov	local04, #255
21a08     2C 1E 06 F1 | 	add	local01, #44
21a0c     FF FF FF FF 
21a10     0F FF 6B FC | 	wrlong	##-1, local01
21a14     2C 1E 86 F1 | 	sub	local01, #44
21a18                 | LR__3549
21a18                 | LR__3550
21a18     0F 13 02 F6 | 	mov	arg01, local01
21a1c     00 14 06 F6 | 	mov	arg02, #0
21a20     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
21a24     FD 26 0A F6 | 	mov	local05, result1 wz
21a28     04 FE 9F AD |  if_e	jmp	#LR__3540
21a2c                 | LR__3551
21a2c                 | ' 
21a2c                 | ' 	return res;
21a2c     13 FB 01 F6 | 	mov	result1, local05
21a30                 | LR__3552
21a30     A7 F0 03 F6 | 	mov	ptra, fp
21a34     B2 00 A0 FD | 	call	#popregs_
21a38                 | _fatfs_cc_dir_find_ret
21a38     2D 00 64 FD | 	ret
21a3c                 | 
21a3c                 | _fatfs_cc_dir_register
21a3c     0A 4A 05 F6 | 	mov	COUNT_, #10
21a40     A8 00 A0 FD | 	call	#pushregs_
21a44     2C F0 07 F1 | 	add	ptra, #44
21a48     04 4E 05 F1 | 	add	fp, #4
21a4c     A7 12 62 FC | 	wrlong	arg01, fp
21a50     09 1F 02 FB | 	rdlong	local01, arg01
21a54     08 4E 05 F1 | 	add	fp, #8
21a58     A7 1E 62 FC | 	wrlong	local01, fp
21a5c     08 4E 85 F1 | 	sub	fp, #8
21a60     A7 20 02 FB | 	rdlong	local02, fp
21a64     04 4E 85 F1 | 	sub	fp, #4
21a68     2B 20 06 F1 | 	add	local02, #43
21a6c     10 21 C2 FA | 	rdbyte	local02, local02
21a70     A0 20 CE F7 | 	test	local02, #160 wz
21a74     06 FA 05 56 |  if_ne	mov	result1, #6
21a78     F8 03 90 5D |  if_ne	jmp	#LR__3575
21a7c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
21a7c     14 4E 05 F1 | 	add	fp, #20
21a80     A7 00 68 FC | 	wrlong	#0, fp
21a84     14 4E 85 F1 | 	sub	fp, #20
21a88     97 28 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
21a8c                 | LR__3560
21a8c     0C 4E 05 F1 | 	add	fp, #12
21a90     A7 20 02 FB | 	rdlong	local02, fp
21a94     0C 20 06 F1 | 	add	local02, #12
21a98     10 23 02 FB | 	rdlong	local03, local02
21a9c     08 4E 05 F1 | 	add	fp, #8
21aa0     A7 24 02 FB | 	rdlong	local04, fp
21aa4     14 4E 85 F1 | 	sub	fp, #20
21aa8     01 24 66 F0 | 	shl	local04, #1
21aac     11 25 02 F1 | 	add	local04, local03
21ab0     12 21 EA FA | 	rdword	local02, local04 wz
21ab4     24 00 90 AD |  if_e	jmp	#LR__3562
21ab8     14 4E 05 F1 | 	add	fp, #20
21abc     A7 26 02 FB | 	rdlong	local05, fp
21ac0     13 29 02 F6 | 	mov	local06, local05
21ac4     13 2B 02 F6 | 	mov	local07, local05
21ac8     15 2D 02 F6 | 	mov	local08, local07
21acc     01 2C 06 F1 | 	add	local08, #1
21ad0     A7 2C 62 FC | 	wrlong	local08, fp
21ad4     14 4E 85 F1 | 	sub	fp, #20
21ad8     B0 FF 9F FD | 	jmp	#LR__3560
21adc                 | LR__3561
21adc                 | LR__3562
21adc     1C 4E 05 F1 | 	add	fp, #28
21ae0     A7 12 02 F6 | 	mov	arg01, fp
21ae4     18 4E 85 F1 | 	sub	fp, #24
21ae8     A7 14 02 FB | 	rdlong	arg02, fp
21aec     04 4E 85 F1 | 	sub	fp, #4
21af0     20 14 06 F1 | 	add	arg02, #32
21af4     0C 16 06 F6 | 	mov	arg03, #12
21af8     08 72 BF FD | 	call	#__system____builtin_memmove
21afc     27 4E 05 F1 | 	add	fp, #39
21b00     A7 2E C2 FA | 	rdbyte	local09, fp
21b04     27 4E 85 F1 | 	sub	fp, #39
21b08     01 2E CE F7 | 	test	local09, #1 wz
21b0c     F4 00 90 AD |  if_e	jmp	#LR__3565
21b10     04 4E 05 F1 | 	add	fp, #4
21b14     A7 30 02 FB | 	rdlong	local10, fp
21b18     2B 30 06 F1 | 	add	local10, #43
21b1c     18 81 48 FC | 	wrbyte	#64, local10
21b20                 | ' 		dp->fn[ 11 ] =  0x40 ;
21b20                 | ' 		for (n = 1; n < 100; n++) {
21b20     0C 4E 05 F1 | 	add	fp, #12
21b24     A7 02 68 FC | 	wrlong	#1, fp
21b28     10 4E 85 F1 | 	sub	fp, #16
21b2c                 | LR__3563
21b2c     10 4E 05 F1 | 	add	fp, #16
21b30     A7 20 02 FB | 	rdlong	local02, fp
21b34     10 4E 85 F1 | 	sub	fp, #16
21b38     64 20 16 F2 | 	cmp	local02, #100 wc
21b3c     70 00 90 3D |  if_ae	jmp	#LR__3564
21b40     04 4E 05 F1 | 	add	fp, #4
21b44     A7 12 02 FB | 	rdlong	arg01, fp
21b48     20 12 06 F1 | 	add	arg01, #32
21b4c     18 4E 05 F1 | 	add	fp, #24
21b50     A7 14 02 F6 | 	mov	arg02, fp
21b54     10 4E 85 F1 | 	sub	fp, #16
21b58     A7 30 02 FB | 	rdlong	local10, fp
21b5c     0C 30 06 F1 | 	add	local10, #12
21b60     18 17 02 FB | 	rdlong	arg03, local10
21b64     04 4E 05 F1 | 	add	fp, #4
21b68     A7 18 02 FB | 	rdlong	arg04, fp
21b6c     10 4E 85 F1 | 	sub	fp, #16
21b70     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
21b74     04 4E 05 F1 | 	add	fp, #4
21b78     A7 12 02 FB | 	rdlong	arg01, fp
21b7c     04 4E 85 F1 | 	sub	fp, #4
21b80     70 FC BF FD | 	call	#_fatfs_cc_dir_find
21b84     08 4E 05 F1 | 	add	fp, #8
21b88     A7 FA 61 FC | 	wrlong	result1, fp
21b8c     00 FA 4D F2 | 	cmps	result1, #0 wz
21b90     08 4E 85 F1 | 	sub	fp, #8
21b94     18 00 90 5D |  if_ne	jmp	#LR__3564
21b98     10 4E 05 F1 | 	add	fp, #16
21b9c     A7 30 02 FB | 	rdlong	local10, fp
21ba0     01 30 06 F1 | 	add	local10, #1
21ba4     A7 30 62 FC | 	wrlong	local10, fp
21ba8     10 4E 85 F1 | 	sub	fp, #16
21bac     7C FF 9F FD | 	jmp	#LR__3563
21bb0                 | LR__3564
21bb0     10 4E 05 F1 | 	add	fp, #16
21bb4     A7 30 02 FB | 	rdlong	local10, fp
21bb8     10 4E 85 F1 | 	sub	fp, #16
21bbc     64 30 0E F2 | 	cmp	local10, #100 wz
21bc0     07 FA 05 A6 |  if_e	mov	result1, #7
21bc4     AC 02 90 AD |  if_e	jmp	#LR__3575
21bc8     08 4E 05 F1 | 	add	fp, #8
21bcc     A7 30 02 FB | 	rdlong	local10, fp
21bd0     08 4E 85 F1 | 	sub	fp, #8
21bd4     04 30 0E F2 | 	cmp	local10, #4 wz
21bd8     08 4E 05 51 |  if_ne	add	fp, #8
21bdc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21be0     08 4E 85 51 |  if_ne	sub	fp, #8
21be4     8C 02 90 5D |  if_ne	jmp	#LR__3575
21be8     04 4E 05 F1 | 	add	fp, #4
21bec     A7 30 02 FB | 	rdlong	local10, fp
21bf0     23 4E 05 F1 | 	add	fp, #35
21bf4     A7 1E C2 FA | 	rdbyte	local01, fp
21bf8     27 4E 85 F1 | 	sub	fp, #39
21bfc     2B 30 06 F1 | 	add	local10, #43
21c00     18 1F 42 FC | 	wrbyte	local01, local10
21c04                 | LR__3565
21c04     27 4E 05 F1 | 	add	fp, #39
21c08     A7 20 C2 FA | 	rdbyte	local02, fp
21c0c     27 4E 85 F1 | 	sub	fp, #39
21c10     02 20 CE F7 | 	test	local02, #2 wz
21c14     20 00 90 AD |  if_e	jmp	#LR__3566
21c18     14 4E 05 F1 | 	add	fp, #20
21c1c     A7 30 02 FB | 	rdlong	local10, fp
21c20     0C 30 06 F1 | 	add	local10, #12
21c24     0D 30 16 FD | 	qdiv	local10, #13
21c28     14 4E 85 F1 | 	sub	fp, #20
21c2c     18 30 62 FD | 	getqx	local10
21c30     01 30 06 F1 | 	add	local10, #1
21c34     04 00 90 FD | 	jmp	#LR__3567
21c38                 | LR__3566
21c38     01 30 06 F6 | 	mov	local10, #1
21c3c                 | LR__3567
21c3c     18 4E 05 F1 | 	add	fp, #24
21c40     A7 30 62 FC | 	wrlong	local10, fp
21c44     14 4E 85 F1 | 	sub	fp, #20
21c48     A7 12 02 FB | 	rdlong	arg01, fp
21c4c     18 15 02 F6 | 	mov	arg02, local10
21c50     04 4E 85 F1 | 	sub	fp, #4
21c54     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
21c58     08 4E 05 F1 | 	add	fp, #8
21c5c     A7 FA 61 FC | 	wrlong	result1, fp
21c60     08 4E 85 F1 | 	sub	fp, #8
21c64     00 FA 0D F2 | 	cmp	result1, #0 wz
21c68     38 01 90 5D |  if_ne	jmp	#LR__3572
21c6c     18 4E 05 F1 | 	add	fp, #24
21c70     A7 30 02 FB | 	rdlong	local10, fp
21c74     01 30 8E F1 | 	sub	local10, #1 wz
21c78     A7 30 62 FC | 	wrlong	local10, fp
21c7c     18 4E 85 F1 | 	sub	fp, #24
21c80     20 01 90 AD |  if_e	jmp	#LR__3572
21c84     04 4E 05 F1 | 	add	fp, #4
21c88     A7 30 02 FB | 	rdlong	local10, fp
21c8c     18 13 02 F6 | 	mov	arg01, local10
21c90     14 4E 05 F1 | 	add	fp, #20
21c94     A7 18 02 FB | 	rdlong	arg04, fp
21c98     18 4E 85 F1 | 	sub	fp, #24
21c9c     05 18 66 F0 | 	shl	arg04, #5
21ca0     10 30 06 F1 | 	add	local10, #16
21ca4     18 15 02 FB | 	rdlong	arg02, local10
21ca8     0C 15 82 F1 | 	sub	arg02, arg04
21cac     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
21cb0     08 4E 05 F1 | 	add	fp, #8
21cb4     A7 FA 61 FC | 	wrlong	result1, fp
21cb8     08 4E 85 F1 | 	sub	fp, #8
21cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
21cc0     E0 00 90 5D |  if_ne	jmp	#LR__3571
21cc4     04 4E 05 F1 | 	add	fp, #4
21cc8     A7 12 02 FB | 	rdlong	arg01, fp
21ccc     04 4E 85 F1 | 	sub	fp, #4
21cd0     20 12 06 F1 | 	add	arg01, #32
21cd4     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
21cd8     FD 30 02 F6 | 	mov	local10, result1
21cdc     28 4E 05 F1 | 	add	fp, #40
21ce0     A7 30 42 FC | 	wrbyte	local10, fp
21ce4     28 4E 85 F1 | 	sub	fp, #40
21ce8                 | ' 			sum = sum_sfn(dp->fn);
21ce8                 | ' 			do {
21ce8                 | LR__3568
21ce8     0C 4E 05 F1 | 	add	fp, #12
21cec     A7 12 02 FB | 	rdlong	arg01, fp
21cf0     08 4E 85 F1 | 	sub	fp, #8
21cf4     A7 1E 02 FB | 	rdlong	local01, fp
21cf8     04 4E 85 F1 | 	sub	fp, #4
21cfc     18 1E 06 F1 | 	add	local01, #24
21d00     0F 15 02 FB | 	rdlong	arg02, local01
21d04     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
21d08     08 4E 05 F1 | 	add	fp, #8
21d0c     A7 FA 61 FC | 	wrlong	result1, fp
21d10     00 FA 4D F2 | 	cmps	result1, #0 wz
21d14     08 4E 85 F1 | 	sub	fp, #8
21d18     88 00 90 5D |  if_ne	jmp	#LR__3570
21d1c     0C 4E 05 F1 | 	add	fp, #12
21d20     A7 20 02 FB | 	rdlong	local02, fp
21d24     0C 20 06 F1 | 	add	local02, #12
21d28     10 13 02 FB | 	rdlong	arg01, local02
21d2c     08 4E 85 F1 | 	sub	fp, #8
21d30     A7 1E 02 FB | 	rdlong	local01, fp
21d34     1C 1E 06 F1 | 	add	local01, #28
21d38     0F 15 02 FB | 	rdlong	arg02, local01
21d3c     14 4E 05 F1 | 	add	fp, #20
21d40     A7 16 02 FB | 	rdlong	arg03, fp
21d44     10 4E 05 F1 | 	add	fp, #16
21d48     A7 18 C2 FA | 	rdbyte	arg04, fp
21d4c     28 4E 85 F1 | 	sub	fp, #40
21d50     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
21d54     0C 4E 05 F1 | 	add	fp, #12
21d58     A7 30 02 FB | 	rdlong	local10, fp
21d5c     03 30 06 F1 | 	add	local10, #3
21d60     18 03 48 FC | 	wrbyte	#1, local10
21d64     08 4E 85 F1 | 	sub	fp, #8
21d68     A7 12 02 FB | 	rdlong	arg01, fp
21d6c     04 4E 85 F1 | 	sub	fp, #4
21d70     00 14 06 F6 | 	mov	arg02, #0
21d74     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
21d78     08 4E 05 F1 | 	add	fp, #8
21d7c     A7 FA 61 FC | 	wrlong	result1, fp
21d80     00 FA 4D F2 | 	cmps	result1, #0 wz
21d84     08 4E 85 F1 | 	sub	fp, #8
21d88     18 00 90 5D |  if_ne	jmp	#LR__3569
21d8c     18 4E 05 F1 | 	add	fp, #24
21d90     A7 30 02 FB | 	rdlong	local10, fp
21d94     01 30 8E F1 | 	sub	local10, #1 wz
21d98     A7 30 62 FC | 	wrlong	local10, fp
21d9c     18 4E 85 F1 | 	sub	fp, #24
21da0     44 FF 9F 5D |  if_ne	jmp	#LR__3568
21da4                 | LR__3569
21da4                 | LR__3570
21da4                 | LR__3571
21da4                 | LR__3572
21da4     08 4E 05 F1 | 	add	fp, #8
21da8     A7 30 0A FB | 	rdlong	local10, fp wz
21dac     08 4E 85 F1 | 	sub	fp, #8
21db0     B4 00 90 5D |  if_ne	jmp	#LR__3574
21db4     0C 4E 05 F1 | 	add	fp, #12
21db8     A7 12 02 FB | 	rdlong	arg01, fp
21dbc     08 4E 85 F1 | 	sub	fp, #8
21dc0     A7 1E 02 FB | 	rdlong	local01, fp
21dc4     04 4E 85 F1 | 	sub	fp, #4
21dc8     18 1E 06 F1 | 	add	local01, #24
21dcc     0F 15 02 FB | 	rdlong	arg02, local01
21dd0     18 E6 BF FD | 	call	#_fatfs_cc_move_window
21dd4     08 4E 05 F1 | 	add	fp, #8
21dd8     A7 FA 61 FC | 	wrlong	result1, fp
21ddc     08 4E 85 F1 | 	sub	fp, #8
21de0     00 FA 0D F2 | 	cmp	result1, #0 wz
21de4     80 00 90 5D |  if_ne	jmp	#LR__3573
21de8     04 4E 05 F1 | 	add	fp, #4
21dec     A7 20 02 FB | 	rdlong	local02, fp
21df0     04 4E 85 F1 | 	sub	fp, #4
21df4     1C 20 06 F1 | 	add	local02, #28
21df8     10 13 02 FB | 	rdlong	arg01, local02
21dfc     00 14 06 F6 | 	mov	arg02, #0
21e00     20 16 06 F6 | 	mov	arg03, #32
21e04     98 00 A0 FD | 	call	#\builtin_bytefill_
21e08     04 4E 05 F1 | 	add	fp, #4
21e0c     A7 14 02 FB | 	rdlong	arg02, fp
21e10     0A 1F 02 F6 | 	mov	local01, arg02
21e14     1C 1E 06 F1 | 	add	local01, #28
21e18     0F 13 02 FB | 	rdlong	arg01, local01
21e1c     04 4E 85 F1 | 	sub	fp, #4
21e20     20 14 06 F1 | 	add	arg02, #32
21e24     0B 16 06 F6 | 	mov	arg03, #11
21e28     D8 6E BF FD | 	call	#__system____builtin_memmove
21e2c     04 4E 05 F1 | 	add	fp, #4
21e30     A7 2E 02 FB | 	rdlong	local09, fp
21e34     17 31 02 F6 | 	mov	local10, local09
21e38     1C 30 06 F1 | 	add	local10, #28
21e3c     18 1F 02 FB | 	rdlong	local01, local10
21e40     2B 2E 06 F1 | 	add	local09, #43
21e44     17 31 C2 FA | 	rdbyte	local10, local09
21e48     18 30 06 F5 | 	and	local10, #24
21e4c     0C 1E 06 F1 | 	add	local01, #12
21e50     0F 31 42 FC | 	wrbyte	local10, local01
21e54     08 4E 05 F1 | 	add	fp, #8
21e58     A7 30 02 FB | 	rdlong	local10, fp
21e5c     0C 4E 85 F1 | 	sub	fp, #12
21e60     03 30 06 F1 | 	add	local10, #3
21e64     18 03 48 FC | 	wrbyte	#1, local10
21e68                 | LR__3573
21e68                 | LR__3574
21e68                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
21e68                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
21e68                 | ' 
21e68                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
21e68                 | ' 
21e68                 | ' 			fs->wflag = 1;
21e68                 | ' 		}
21e68                 | ' 	}
21e68                 | ' 
21e68                 | ' 	return res;
21e68     08 4E 05 F1 | 	add	fp, #8
21e6c     A7 FA 01 FB | 	rdlong	result1, fp
21e70     08 4E 85 F1 | 	sub	fp, #8
21e74                 | LR__3575
21e74     A7 F0 03 F6 | 	mov	ptra, fp
21e78     B2 00 A0 FD | 	call	#popregs_
21e7c                 | _fatfs_cc_dir_register_ret
21e7c     2D 00 64 FD | 	ret
21e80                 | 
21e80                 | _fatfs_cc_dir_remove
21e80     05 4A 05 F6 | 	mov	COUNT_, #5
21e84     A8 00 A0 FD | 	call	#pushregs_
21e88     09 1F 02 F6 | 	mov	local01, arg01
21e8c     0F 21 02 FB | 	rdlong	local02, local01
21e90     10 1E 06 F1 | 	add	local01, #16
21e94     0F 23 02 FB | 	rdlong	local03, local01
21e98     1C 1E 06 F1 | 	add	local01, #28
21e9c     0F 15 02 FB | 	rdlong	arg02, local01
21ea0     2C 1E 86 F1 | 	sub	local01, #44
21ea4     FF FF 7F FF 
21ea8     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
21eac     00 24 06 A6 |  if_e	mov	local04, #0
21eb0     18 00 90 AD |  if_e	jmp	#LR__3580
21eb4     0F 13 02 F6 | 	mov	arg01, local01
21eb8     2C 1E 06 F1 | 	add	local01, #44
21ebc     0F 15 02 FB | 	rdlong	arg02, local01
21ec0     2C 1E 86 F1 | 	sub	local01, #44
21ec4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
21ec8     FD 24 02 F6 | 	mov	local04, result1
21ecc                 | LR__3580
21ecc     12 27 0A F6 | 	mov	local05, local04 wz
21ed0     64 00 90 5D |  if_ne	jmp	#LR__3583
21ed4                 | ' 		do {
21ed4                 | LR__3581
21ed4     18 1E 06 F1 | 	add	local01, #24
21ed8     0F 15 02 FB | 	rdlong	arg02, local01
21edc     18 1E 86 F1 | 	sub	local01, #24
21ee0     10 13 02 F6 | 	mov	arg01, local02
21ee4     04 E5 BF FD | 	call	#_fatfs_cc_move_window
21ee8     FD 26 0A F6 | 	mov	local05, result1 wz
21eec     40 00 90 5D |  if_ne	jmp	#LR__3582
21ef0     1C 1E 06 F1 | 	add	local01, #28
21ef4     0F 25 02 FB | 	rdlong	local04, local01
21ef8     12 CB 49 FC | 	wrbyte	#229, local04
21efc     03 20 06 F1 | 	add	local02, #3
21f00     10 03 48 FC | 	wrbyte	#1, local02
21f04     03 20 86 F1 | 	sub	local02, #3
21f08     0C 1E 86 F1 | 	sub	local01, #12
21f0c     0F 25 02 FB | 	rdlong	local04, local01
21f10     10 1E 86 F1 | 	sub	local01, #16
21f14     11 25 12 F2 | 	cmp	local04, local03 wc
21f18     14 00 90 3D |  if_ae	jmp	#LR__3582
21f1c     0F 13 02 F6 | 	mov	arg01, local01
21f20     00 14 06 F6 | 	mov	arg02, #0
21f24     90 EF BF FD | 	call	#_fatfs_cc_dir_next
21f28     FD 26 0A F6 | 	mov	local05, result1 wz
21f2c     A4 FF 9F AD |  if_e	jmp	#LR__3581
21f30                 | LR__3582
21f30     04 26 0E F2 | 	cmp	local05, #4 wz
21f34     02 26 06 A6 |  if_e	mov	local05, #2
21f38                 | LR__3583
21f38                 | ' 	}
21f38                 | ' #line 2590 "ff.c"
21f38                 | ' 	return res;
21f38     13 FB 01 F6 | 	mov	result1, local05
21f3c     A7 F0 03 F6 | 	mov	ptra, fp
21f40     B2 00 A0 FD | 	call	#popregs_
21f44                 | _fatfs_cc_dir_remove_ret
21f44     2D 00 64 FD | 	ret
21f48                 | 
21f48                 | _fatfs_cc_get_fileinfo
21f48     0F 4A 05 F6 | 	mov	COUNT_, #15
21f4c     A8 00 A0 FD | 	call	#pushregs_
21f50     09 1F 02 F6 | 	mov	local01, arg01
21f54     0A 21 02 F6 | 	mov	local02, arg02
21f58     0F 23 02 FB | 	rdlong	local03, local01
21f5c     1C 20 06 F1 | 	add	local02, #28
21f60     10 01 48 FC | 	wrbyte	#0, local02
21f64     1C 20 86 F1 | 	sub	local02, #28
21f68     18 1E 06 F1 | 	add	local01, #24
21f6c     0F 25 0A FB | 	rdlong	local04, local01 wz
21f70     18 1E 86 F1 | 	sub	local01, #24
21f74     90 03 90 AD |  if_e	jmp	#LR__3604
21f78     2C 1E 06 F1 | 	add	local01, #44
21f7c     0F 25 02 FB | 	rdlong	local04, local01
21f80     2C 1E 86 F1 | 	sub	local01, #44
21f84     FF FF 7F FF 
21f88     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21f8c     D8 00 90 AD |  if_e	jmp	#LR__3593
21f90     00 26 06 F6 | 	mov	local05, #0
21f94     00 28 06 F6 | 	mov	local06, #0
21f98     00 2A 06 F6 | 	mov	local07, #0
21f9c                 | ' 			si = di = 0;
21f9c                 | ' 			hs = 0;
21f9c                 | ' 			while (fs->lfnbuf[si] != 0) {
21f9c                 | LR__3590
21f9c     0C 22 06 F1 | 	add	local03, #12
21fa0     11 25 02 FB | 	rdlong	local04, local03
21fa4     0C 22 86 F1 | 	sub	local03, #12
21fa8     14 2D 02 F6 | 	mov	local08, local06
21fac     01 2C 66 F0 | 	shl	local08, #1
21fb0     12 2D 02 F1 | 	add	local08, local04
21fb4     16 25 EA FA | 	rdword	local04, local08 wz
21fb8     90 00 90 AD |  if_e	jmp	#LR__3592
21fbc     0C 22 06 F1 | 	add	local03, #12
21fc0     11 2F 02 FB | 	rdlong	local09, local03
21fc4     0C 22 86 F1 | 	sub	local03, #12
21fc8     14 31 02 F6 | 	mov	local10, local06
21fcc     01 30 66 F0 | 	shl	local10, #1
21fd0     17 31 02 F1 | 	add	local10, local09
21fd4     18 33 E2 FA | 	rdword	local11, local10
21fd8     15 25 02 F6 | 	mov	local04, local07
21fdc     0F 24 4E F7 | 	zerox	local04, #15 wz
21fe0     01 28 06 F1 | 	add	local06, #1
21fe4     24 00 90 5D |  if_ne	jmp	#LR__3591
21fe8     19 35 32 F9 | 	getword	local12, local11, #0
21fec     6C 00 00 FF 
21ff0     00 34 16 F2 | 	cmp	local12, ##55296 wc
21ff4     14 00 90 CD |  if_b	jmp	#LR__3591
21ff8     19 37 32 F9 | 	getword	local13, local11, #0
21ffc     70 00 00 FF 
22000     00 36 16 F2 | 	cmp	local13, ##57344 wc
22004     19 2B 02 C6 |  if_b	mov	local07, local11
22008                 | ' 					hs = wc; continue;
22008     90 FF 9F CD |  if_b	jmp	#LR__3590
2200c                 | LR__3591
2200c     15 13 32 F9 | 	getword	arg01, local07, #0
22010     10 12 66 F0 | 	shl	arg01, #16
22014     19 33 32 F9 | 	getword	local11, local11, #0
22018     19 13 42 F5 | 	or	arg01, local11
2201c     13 15 02 F6 | 	mov	arg02, local05
22020     1C 20 06 F1 | 	add	local02, #28
22024     10 15 02 F1 | 	add	arg02, local02
22028     FF 16 06 F6 | 	mov	arg03, #255
2202c     13 17 82 F1 | 	sub	arg03, local05
22030     1C 20 86 F1 | 	sub	local02, #28
22034     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
22038     FD 38 0A F6 | 	mov	local14, result1 wz
2203c     00 26 06 A6 |  if_e	mov	local05, #0
22040     1C 27 02 51 |  if_ne	add	local05, local14
22044     00 2A 06 56 |  if_ne	mov	local07, #0
22048     50 FF 9F 5D |  if_ne	jmp	#LR__3590
2204c                 | LR__3592
2204c     15 25 02 F6 | 	mov	local04, local07
22050     0F 24 4E F7 | 	zerox	local04, #15 wz
22054     00 26 06 56 |  if_ne	mov	local05, #0
22058     1C 20 06 F1 | 	add	local02, #28
2205c     10 27 02 F1 | 	add	local05, local02
22060     13 01 48 FC | 	wrbyte	#0, local05
22064     1C 20 86 F1 | 	sub	local02, #28
22068                 | LR__3593
22068     00 26 06 F6 | 	mov	local05, #0
2206c     00 28 06 F6 | 	mov	local06, #0
22070                 | ' 			fno->fname[di] = 0;
22070                 | ' 		}
22070                 | ' 	}
22070                 | ' 
22070                 | ' 	si = di = 0;
22070                 | ' 	while (si < 11) {
22070                 | LR__3594
22070     0B 28 16 F2 | 	cmp	local06, #11 wc
22074     20 01 90 3D |  if_ae	jmp	#LR__3597
22078     1C 1E 06 F1 | 	add	local01, #28
2207c     0F 2F 02 FB | 	rdlong	local09, local01
22080     1C 1E 86 F1 | 	sub	local01, #28
22084     14 31 02 F6 | 	mov	local10, local06
22088     17 31 02 F1 | 	add	local10, local09
2208c     18 33 C2 FA | 	rdbyte	local11, local10
22090     19 25 32 F9 | 	getword	local04, local11, #0
22094     20 24 0E F2 | 	cmp	local04, #32 wz
22098     01 28 06 F1 | 	add	local06, #1
2209c     D0 FF 9F AD |  if_e	jmp	#LR__3594
220a0     19 25 32 F9 | 	getword	local04, local11, #0
220a4     05 24 0E F2 | 	cmp	local04, #5 wz
220a8     E5 32 06 A6 |  if_e	mov	local11, #229
220ac     09 28 0E F2 | 	cmp	local06, #9 wz
220b0     20 00 90 5D |  if_ne	jmp	#LR__3595
220b4     0C 26 16 F2 | 	cmp	local05, #12 wc
220b8     18 00 90 3D |  if_ae	jmp	#LR__3595
220bc     13 37 02 F6 | 	mov	local13, local05
220c0     0C 20 06 F1 | 	add	local02, #12
220c4     10 37 02 F1 | 	add	local13, local02
220c8     1B 5D 48 FC | 	wrbyte	#46, local13
220cc     01 26 06 F1 | 	add	local05, #1
220d0     0C 20 86 F1 | 	sub	local02, #12
220d4                 | LR__3595
220d4     19 13 32 F9 | 	getword	arg01, local11, #0
220d8     07 12 4E F7 | 	zerox	arg01, #7 wz
220dc     00 FA 05 56 |  if_ne	mov	result1, #0
220e0                 | ' 
220e0                 | ' 	return 0;
220e0     00 FA 05 A6 |  if_e	mov	result1, #0
220e4     00 FA 0D F2 | 	cmp	result1, #0 wz
220e8     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
220ec     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
220f0     50 00 90 AD |  if_e	jmp	#LR__3596
220f4     1C 1E 06 F1 | 	add	local01, #28
220f8     0F 31 02 FB | 	rdlong	local10, local01
220fc     1C 1E 86 F1 | 	sub	local01, #28
22100     14 2D 02 F6 | 	mov	local08, local06
22104     18 2D 02 F1 | 	add	local08, local10
22108     16 13 CA FA | 	rdbyte	arg01, local08 wz
2210c     00 FA 05 56 |  if_ne	mov	result1, #0
22110                 | ' 
22110                 | ' 	return 0;
22110     00 FA 05 A6 |  if_e	mov	result1, #0
22114     00 FA 0D F2 | 	cmp	result1, #0 wz
22118     28 00 90 AD |  if_e	jmp	#LR__3596
2211c     19 33 32 F9 | 	getword	local11, local11, #0
22120     08 32 66 F0 | 	shl	local11, #8
22124     1C 1E 06 F1 | 	add	local01, #28
22128     0F 39 02 FB | 	rdlong	local14, local01
2212c     1C 1E 86 F1 | 	sub	local01, #28
22130     14 2F 02 F6 | 	mov	local09, local06
22134     1C 2F 02 F1 | 	add	local09, local14
22138     17 35 C2 FA | 	rdbyte	local12, local09
2213c     1A 33 42 F5 | 	or	local11, local12
22140     01 28 06 F1 | 	add	local06, #1
22144                 | LR__3596
22144     19 13 02 F6 | 	mov	arg01, local11
22148     01 00 00 FF 
2214c     52 15 06 F6 | 	mov	arg02, ##850
22150     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
22154     FD 32 02 F6 | 	mov	local11, result1
22158     19 25 02 F6 | 	mov	local04, local11
2215c     0F 24 4E F7 | 	zerox	local04, #15 wz
22160     00 26 06 A6 |  if_e	mov	local05, #0
22164     30 00 90 AD |  if_e	jmp	#LR__3597
22168     19 13 32 F9 | 	getword	arg01, local11, #0
2216c     13 15 02 F6 | 	mov	arg02, local05
22170     0C 20 06 F1 | 	add	local02, #12
22174     10 15 02 F1 | 	add	arg02, local02
22178     0C 16 06 F6 | 	mov	arg03, #12
2217c     13 17 82 F1 | 	sub	arg03, local05
22180     0C 20 86 F1 | 	sub	local02, #12
22184     EC DF BF FD | 	call	#_fatfs_cc_put_utf
22188     FD 38 0A F6 | 	mov	local14, result1 wz
2218c     00 26 06 A6 |  if_e	mov	local05, #0
22190     1C 27 02 51 |  if_ne	add	local05, local14
22194     D8 FE 9F 5D |  if_ne	jmp	#LR__3594
22198                 | LR__3597
22198     13 25 02 F6 | 	mov	local04, local05
2219c     0C 20 06 F1 | 	add	local02, #12
221a0     10 25 02 F1 | 	add	local04, local02
221a4     12 01 48 FC | 	wrbyte	#0, local04
221a8     10 20 06 F1 | 	add	local02, #16
221ac     10 25 CA FA | 	rdbyte	local04, local02 wz
221b0     1C 20 86 F1 | 	sub	local02, #28
221b4     F8 00 90 5D |  if_ne	jmp	#LR__3603
221b8     00 26 0E F2 | 	cmp	local05, #0 wz
221bc     1C 00 90 5D |  if_ne	jmp	#LR__3598
221c0     13 37 02 F6 | 	mov	local13, local05
221c4     1C 20 06 F1 | 	add	local02, #28
221c8     10 37 02 F1 | 	add	local13, local02
221cc     1B 7F 48 FC | 	wrbyte	#63, local13
221d0     01 26 06 F1 | 	add	local05, #1
221d4     1C 20 86 F1 | 	sub	local02, #28
221d8     A4 00 90 FD | 	jmp	#LR__3602
221dc                 | LR__3598
221dc                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
221dc     00 26 06 F6 | 	mov	local05, #0
221e0     00 28 06 F6 | 	mov	local06, #0
221e4     08 3A 06 F6 | 	mov	local15, #8
221e8                 | LR__3599
221e8     14 25 02 F6 | 	mov	local04, local06
221ec     0C 20 06 F1 | 	add	local02, #12
221f0     10 25 02 F1 | 	add	local04, local02
221f4     12 37 CA FA | 	rdbyte	local13, local04 wz
221f8     0C 20 86 F1 | 	sub	local02, #12
221fc     80 00 90 AD |  if_e	jmp	#LR__3601
22200     14 2D 02 F6 | 	mov	local08, local06
22204     0C 20 06 F1 | 	add	local02, #12
22208     10 2D 02 F1 | 	add	local08, local02
2220c     16 33 C2 FA | 	rdbyte	local11, local08
22210     19 39 32 F9 | 	getword	local14, local11, #0
22214     2E 38 0E F2 | 	cmp	local14, #46 wz
22218     0C 20 86 F1 | 	sub	local02, #12
2221c     10 3A 06 A6 |  if_e	mov	local15, #16
22220     19 39 32 F9 | 	getword	local14, local11, #0
22224     41 38 16 F2 | 	cmp	local14, #65 wc
22228     30 00 90 CD |  if_b	jmp	#LR__3600
2222c     19 2D 32 F9 | 	getword	local08, local11, #0
22230     5B 2C 16 F2 | 	cmp	local08, #91 wc
22234     24 00 90 3D |  if_ae	jmp	#LR__3600
22238     1C 1E 06 F1 | 	add	local01, #28
2223c     0F 2F 02 FB | 	rdlong	local09, local01
22240     1C 1E 86 F1 | 	sub	local01, #28
22244     0C 2E 06 F1 | 	add	local09, #12
22248     17 31 C2 FA | 	rdbyte	local10, local09
2224c     1D 39 E2 F8 | 	getbyte	local14, local15, #0
22250     1C 31 CA F7 | 	test	local10, local14 wz
22254     19 33 32 59 |  if_ne	getword	local11, local11, #0
22258     20 32 06 51 |  if_ne	add	local11, #32
2225c                 | LR__3600
2225c     13 39 02 F6 | 	mov	local14, local05
22260     1C 20 06 F1 | 	add	local02, #28
22264     10 39 02 F1 | 	add	local14, local02
22268     19 33 32 F9 | 	getword	local11, local11, #0
2226c     1C 33 42 FC | 	wrbyte	local11, local14
22270     01 28 06 F1 | 	add	local06, #1
22274     01 26 06 F1 | 	add	local05, #1
22278     1C 20 86 F1 | 	sub	local02, #28
2227c     68 FF 9F FD | 	jmp	#LR__3599
22280                 | LR__3601
22280                 | LR__3602
22280     1C 20 06 F1 | 	add	local02, #28
22284     10 27 02 F1 | 	add	local05, local02
22288     13 01 48 FC | 	wrbyte	#0, local05
2228c     1C 1E 06 F1 | 	add	local01, #28
22290     0F 25 02 FB | 	rdlong	local04, local01
22294     1C 1E 86 F1 | 	sub	local01, #28
22298     0C 24 06 F1 | 	add	local04, #12
2229c     12 37 CA FA | 	rdbyte	local13, local04 wz
222a0     1C 20 86 F1 | 	sub	local02, #28
222a4     0C 20 06 A1 |  if_e	add	local02, #12
222a8     10 01 48 AC |  if_e	wrbyte	#0, local02
222ac     0C 20 86 A1 |  if_e	sub	local02, #12
222b0                 | LR__3603
222b0     1C 1E 06 F1 | 	add	local01, #28
222b4     0F 35 02 FB | 	rdlong	local12, local01
222b8     0B 34 06 F1 | 	add	local12, #11
222bc     1A 25 C2 FA | 	rdbyte	local04, local12
222c0     3F 24 06 F5 | 	and	local04, #63
222c4     08 20 06 F1 | 	add	local02, #8
222c8     10 25 42 FC | 	wrbyte	local04, local02
222cc     08 20 86 F1 | 	sub	local02, #8
222d0     0F 13 02 FB | 	rdlong	arg01, local01
222d4     1C 12 06 F1 | 	add	arg01, #28
222d8                 | ' {
222d8                 | ' 
222d8                 | ' 	return *((DWORD*)ptr);
222d8     09 FB 01 FB | 	rdlong	result1, arg01
222dc     10 FB 61 FC | 	wrlong	result1, local02
222e0     0F 13 02 FB | 	rdlong	arg01, local01
222e4     16 12 06 F1 | 	add	arg01, #22
222e8                 | ' {
222e8                 | ' 
222e8                 | ' 	return *((WORD*)ptr);
222e8     09 FB E1 FA | 	rdword	result1, arg01
222ec     06 20 06 F1 | 	add	local02, #6
222f0     10 FB 51 FC | 	wrword	result1, local02
222f4     0F 13 02 FB | 	rdlong	arg01, local01
222f8     18 12 06 F1 | 	add	arg01, #24
222fc                 | ' {
222fc                 | ' 
222fc                 | ' 	return *((WORD*)ptr);
222fc     09 FB E1 FA | 	rdword	result1, arg01
22300     02 20 86 F1 | 	sub	local02, #2
22304     10 FB 51 FC | 	wrword	result1, local02
22308                 | LR__3604
22308     A7 F0 03 F6 | 	mov	ptra, fp
2230c     B2 00 A0 FD | 	call	#popregs_
22310                 | _fatfs_cc_get_fileinfo_ret
22310     2D 00 64 FD | 	ret
22314                 | 
22314                 | _fatfs_cc_create_name
22314     0D 4A 05 F6 | 	mov	COUNT_, #13
22318     A8 00 A0 FD | 	call	#pushregs_
2231c     34 F0 07 F1 | 	add	ptra, #52
22320     04 4E 05 F1 | 	add	fp, #4
22324     A7 12 62 FC | 	wrlong	arg01, fp
22328     04 4E 05 F1 | 	add	fp, #4
2232c     A7 14 62 FC | 	wrlong	arg02, fp
22330     0A FB 01 FB | 	rdlong	result1, arg02
22334     28 4E 05 F1 | 	add	fp, #40
22338     A7 FA 61 FC | 	wrlong	result1, fp
2233c     2C 4E 85 F1 | 	sub	fp, #44
22340     A7 FA 01 FB | 	rdlong	result1, fp
22344     FD 1E 02 FB | 	rdlong	local01, result1
22348     0C 1E 06 F1 | 	add	local01, #12
2234c     0F 21 02 FB | 	rdlong	local02, local01
22350     14 4E 05 F1 | 	add	fp, #20
22354     A7 20 62 FC | 	wrlong	local02, fp
22358     14 4E 05 F1 | 	add	fp, #20
2235c     A7 00 68 FC | 	wrlong	#0, fp
22360     2C 4E 85 F1 | 	sub	fp, #44
22364                 | ' 
22364                 | ' 
22364                 | ' 
22364                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
22364                 | ' 	for (;;) {
22364                 | LR__3610
22364     30 4E 05 F1 | 	add	fp, #48
22368     A7 12 02 F6 | 	mov	arg01, fp
2236c     30 4E 85 F1 | 	sub	fp, #48
22370     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
22374     1C 4E 05 F1 | 	add	fp, #28
22378     A7 FA 61 FC | 	wrlong	result1, fp
2237c     1C 4E 85 F1 | 	sub	fp, #28
22380     FF FF 7F FF 
22384     FF FB 0D F2 | 	cmp	result1, ##-1 wz
22388     06 FA 05 A6 |  if_e	mov	result1, #6
2238c     74 08 90 AD |  if_e	jmp	#LR__3650
22390     1C 4E 05 F1 | 	add	fp, #28
22394     A7 1E 02 FB | 	rdlong	local01, fp
22398     1C 4E 85 F1 | 	sub	fp, #28
2239c     80 00 00 FF 
223a0     00 1E 16 F2 | 	cmp	local01, ##65536 wc
223a4     3C 00 90 CD |  if_b	jmp	#LR__3611
223a8     18 4E 05 F1 | 	add	fp, #24
223ac     A7 22 02 FB | 	rdlong	local03, fp
223b0     14 4E 05 F1 | 	add	fp, #20
223b4     A7 1E 02 FB | 	rdlong	local01, fp
223b8     0F 25 02 F6 | 	mov	local04, local01
223bc     01 24 06 F1 | 	add	local04, #1
223c0     A7 24 62 FC | 	wrlong	local04, fp
223c4     01 1E 66 F0 | 	shl	local01, #1
223c8     11 1F 02 F1 | 	add	local01, local03
223cc     10 4E 85 F1 | 	sub	fp, #16
223d0     A7 26 02 FB | 	rdlong	local05, fp
223d4     1C 4E 85 F1 | 	sub	fp, #28
223d8     13 29 02 F6 | 	mov	local06, local05
223dc     10 28 46 F0 | 	shr	local06, #16
223e0     0F 29 52 FC | 	wrword	local06, local01
223e4                 | LR__3611
223e4     1C 4E 05 F1 | 	add	fp, #28
223e8     A7 1E 02 FB | 	rdlong	local01, fp
223ec     08 4E 85 F1 | 	sub	fp, #8
223f0     A7 1E 52 FC | 	wrword	local01, fp
223f4     A7 1E E2 FA | 	rdword	local01, fp
223f8     14 4E 85 F1 | 	sub	fp, #20
223fc     20 1E 16 F2 | 	cmp	local01, #32 wc
22400     B0 00 90 CD |  if_b	jmp	#LR__3613
22404     14 4E 05 F1 | 	add	fp, #20
22408     A7 1E E2 FA | 	rdword	local01, fp
2240c     14 4E 85 F1 | 	sub	fp, #20
22410     2F 1E 0E F2 | 	cmp	local01, #47 wz
22414     14 4E 05 51 |  if_ne	add	fp, #20
22418     A7 24 E2 5A |  if_ne	rdword	local04, fp
2241c     14 4E 85 51 |  if_ne	sub	fp, #20
22420     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
22424     8C 00 90 AD |  if_e	jmp	#LR__3613
22428     14 4E 05 F1 | 	add	fp, #20
2242c     A7 12 E2 FA | 	rdword	arg01, fp
22430     14 4E 85 F1 | 	sub	fp, #20
22434     80 12 16 F2 | 	cmp	arg01, #128 wc
22438     24 00 90 3D |  if_ae	jmp	#LR__3612
2243c     41 01 00 FF 
22440     64 13 06 F6 | 	mov	arg01, ##@LR__4272
22444     14 4E 05 F1 | 	add	fp, #20
22448     A7 14 E2 FA | 	rdword	arg02, fp
2244c     14 4E 85 F1 | 	sub	fp, #20
22450     FC D0 BF FD | 	call	#_fatfs_cc_strchr
22454     00 FA 0D F2 | 	cmp	result1, #0 wz
22458     06 FA 05 56 |  if_ne	mov	result1, #6
2245c     A4 07 90 5D |  if_ne	jmp	#LR__3650
22460                 | LR__3612
22460     2C 4E 05 F1 | 	add	fp, #44
22464     A7 28 02 FB | 	rdlong	local06, fp
22468     2C 4E 85 F1 | 	sub	fp, #44
2246c     FF 28 16 F2 | 	cmp	local06, #255 wc
22470     06 FA 05 36 |  if_ae	mov	result1, #6
22474     8C 07 90 3D |  if_ae	jmp	#LR__3650
22478     18 4E 05 F1 | 	add	fp, #24
2247c     A7 22 02 FB | 	rdlong	local03, fp
22480     14 4E 05 F1 | 	add	fp, #20
22484     A7 20 02 FB | 	rdlong	local02, fp
22488     10 25 02 F6 | 	mov	local04, local02
2248c     01 24 06 F1 | 	add	local04, #1
22490     A7 24 62 FC | 	wrlong	local04, fp
22494     10 1F 02 F6 | 	mov	local01, local02
22498     01 1E 66 F0 | 	shl	local01, #1
2249c     11 1F 02 F1 | 	add	local01, local03
224a0     18 4E 85 F1 | 	sub	fp, #24
224a4     A7 28 E2 FA | 	rdword	local06, fp
224a8     14 4E 85 F1 | 	sub	fp, #20
224ac     0F 29 52 FC | 	wrword	local06, local01
224b0     B0 FE 9F FD | 	jmp	#LR__3610
224b4                 | LR__3613
224b4     14 4E 05 F1 | 	add	fp, #20
224b8     A7 2A E2 FA | 	rdword	local07, fp
224bc     14 4E 85 F1 | 	sub	fp, #20
224c0     20 2A 16 F2 | 	cmp	local07, #32 wc
224c4     10 4E 05 C1 |  if_b	add	fp, #16
224c8     A7 08 48 CC |  if_b	wrbyte	#4, fp
224cc     10 4E 85 C1 |  if_b	sub	fp, #16
224d0     74 00 90 CD |  if_b	jmp	#LR__3618
224d4     97 24 48 FB | 	callpa	#(@LR__3616-@LR__3614)>>2,fcache_load_ptr_
224d8                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
224d8                 | LR__3614
224d8     30 4E 05 F1 | 	add	fp, #48
224dc     A7 24 02 FB | 	rdlong	local04, fp
224e0     30 4E 85 F1 | 	sub	fp, #48
224e4     12 2B C2 FA | 	rdbyte	local07, local04
224e8     2F 2A 0E F2 | 	cmp	local07, #47 wz
224ec     18 00 90 AD |  if_e	jmp	#LR__3615
224f0     30 4E 05 F1 | 	add	fp, #48
224f4     A7 24 02 FB | 	rdlong	local04, fp
224f8     30 4E 85 F1 | 	sub	fp, #48
224fc     12 21 C2 FA | 	rdbyte	local02, local04
22500     5C 20 0E F2 | 	cmp	local02, #92 wz
22504     18 00 90 5D |  if_ne	jmp	#LR__3617
22508                 | LR__3615
22508     30 4E 05 F1 | 	add	fp, #48
2250c     A7 1E 02 FB | 	rdlong	local01, fp
22510     01 1E 06 F1 | 	add	local01, #1
22514     A7 1E 62 FC | 	wrlong	local01, fp
22518     30 4E 85 F1 | 	sub	fp, #48
2251c     B8 FF 9F FD | 	jmp	#LR__3614
22520                 | LR__3616
22520                 | LR__3617
22520     10 4E 05 F1 | 	add	fp, #16
22524     A7 00 48 FC | 	wrbyte	#0, fp
22528     20 4E 05 F1 | 	add	fp, #32
2252c     A7 28 02 FB | 	rdlong	local06, fp
22530     30 4E 85 F1 | 	sub	fp, #48
22534     14 2B C2 FA | 	rdbyte	local07, local06
22538     20 2A 16 F2 | 	cmp	local07, #32 wc
2253c     10 4E 05 C1 |  if_b	add	fp, #16
22540     A7 08 48 CC |  if_b	wrbyte	#4, fp
22544     10 4E 85 C1 |  if_b	sub	fp, #16
22548                 | LR__3618
22548     08 4E 05 F1 | 	add	fp, #8
2254c     A7 2A 02 FB | 	rdlong	local07, fp
22550     28 4E 05 F1 | 	add	fp, #40
22554     A7 1E 02 FB | 	rdlong	local01, fp
22558     30 4E 85 F1 | 	sub	fp, #48
2255c     15 1F 62 FC | 	wrlong	local01, local07
22560     97 38 48 FB | 	callpa	#(@LR__3620-@LR__3619)>>2,fcache_load_ptr_
22564                 | ' 	}
22564                 | ' 	*path = p;
22564                 | ' #line 2862 "ff.c"
22564                 | ' 	while (di) {
22564                 | LR__3619
22564     2C 4E 05 F1 | 	add	fp, #44
22568     A7 2A 0A FB | 	rdlong	local07, fp wz
2256c     2C 4E 85 F1 | 	sub	fp, #44
22570     60 00 90 AD |  if_e	jmp	#LR__3621
22574     18 4E 05 F1 | 	add	fp, #24
22578     A7 28 02 FB | 	rdlong	local06, fp
2257c     14 4E 05 F1 | 	add	fp, #20
22580     A7 24 02 FB | 	rdlong	local04, fp
22584     01 24 86 F1 | 	sub	local04, #1
22588     01 24 66 F0 | 	shl	local04, #1
2258c     14 25 02 F1 | 	add	local04, local06
22590     12 29 E2 FA | 	rdword	local06, local04
22594     18 4E 85 F1 | 	sub	fp, #24
22598     A7 28 52 FC | 	wrword	local06, fp
2259c     A7 2A E2 FA | 	rdword	local07, fp
225a0     14 4E 85 F1 | 	sub	fp, #20
225a4     20 2A 0E F2 | 	cmp	local07, #32 wz
225a8     14 4E 05 51 |  if_ne	add	fp, #20
225ac     A7 1E E2 5A |  if_ne	rdword	local01, fp
225b0     14 4E 85 51 |  if_ne	sub	fp, #20
225b4     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
225b8     18 00 90 5D |  if_ne	jmp	#LR__3621
225bc     2C 4E 05 F1 | 	add	fp, #44
225c0     A7 1E 02 FB | 	rdlong	local01, fp
225c4     01 1E 86 F1 | 	sub	local01, #1
225c8     A7 1E 62 FC | 	wrlong	local01, fp
225cc     2C 4E 85 F1 | 	sub	fp, #44
225d0     90 FF 9F FD | 	jmp	#LR__3619
225d4                 | LR__3620
225d4                 | LR__3621
225d4     18 4E 05 F1 | 	add	fp, #24
225d8     A7 2C 02 FB | 	rdlong	local08, fp
225dc     14 4E 05 F1 | 	add	fp, #20
225e0     A7 24 02 FB | 	rdlong	local04, fp
225e4     01 24 66 F0 | 	shl	local04, #1
225e8     16 25 02 F1 | 	add	local04, local08
225ec     12 01 58 FC | 	wrword	#0, local04
225f0     A7 2A 0A FB | 	rdlong	local07, fp wz
225f4     2C 4E 85 F1 | 	sub	fp, #44
225f8     06 FA 05 A6 |  if_e	mov	result1, #6
225fc     04 06 90 AD |  if_e	jmp	#LR__3650
22600                 | ' 
22600                 | ' 
22600                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
22600     28 4E 05 F1 | 	add	fp, #40
22604     A7 00 68 FC | 	wrlong	#0, fp
22608     28 4E 85 F1 | 	sub	fp, #40
2260c     97 22 48 FB | 	callpa	#(@LR__3623-@LR__3622)>>2,fcache_load_ptr_
22610                 | LR__3622
22610     18 4E 05 F1 | 	add	fp, #24
22614     A7 2E 02 FB | 	rdlong	local09, fp
22618     10 4E 05 F1 | 	add	fp, #16
2261c     A7 30 02 FB | 	rdlong	local10, fp
22620     28 4E 85 F1 | 	sub	fp, #40
22624     01 30 66 F0 | 	shl	local10, #1
22628     17 31 02 F1 | 	add	local10, local09
2262c     18 33 E2 FA | 	rdword	local11, local10
22630     20 32 0E F2 | 	cmp	local11, #32 wz
22634     1C 00 90 5D |  if_ne	jmp	#LR__3624
22638     28 4E 05 F1 | 	add	fp, #40
2263c     A7 34 02 FB | 	rdlong	local12, fp
22640     1A 27 02 F6 | 	mov	local05, local12
22644     01 26 06 F1 | 	add	local05, #1
22648     A7 26 62 FC | 	wrlong	local05, fp
2264c     28 4E 85 F1 | 	sub	fp, #40
22650     BC FF 9F FD | 	jmp	#LR__3622
22654                 | LR__3623
22654                 | LR__3624
22654     28 4E 05 F1 | 	add	fp, #40
22658     A7 2A 02 FB | 	rdlong	local07, fp
2265c     28 4E 85 F1 | 	sub	fp, #40
22660     01 2A 16 F2 | 	cmp	local07, #1 wc
22664     28 00 90 3D |  if_ae	jmp	#LR__3625
22668     18 4E 05 F1 | 	add	fp, #24
2266c     A7 22 02 FB | 	rdlong	local03, fp
22670     10 4E 05 F1 | 	add	fp, #16
22674     A7 2E 02 FB | 	rdlong	local09, fp
22678     28 4E 85 F1 | 	sub	fp, #40
2267c     01 2E 66 F0 | 	shl	local09, #1
22680     11 2F 02 F1 | 	add	local09, local03
22684     17 1F E2 FA | 	rdword	local01, local09
22688     2E 1E 0E F2 | 	cmp	local01, #46 wz
2268c     14 00 90 5D |  if_ne	jmp	#LR__3626
22690                 | LR__3625
22690     10 4E 05 F1 | 	add	fp, #16
22694     A7 2A C2 FA | 	rdbyte	local07, fp
22698     03 2A 46 F5 | 	or	local07, #3
2269c     A7 2A 42 FC | 	wrbyte	local07, fp
226a0     10 4E 85 F1 | 	sub	fp, #16
226a4                 | LR__3626
226a4     97 2C 48 FB | 	callpa	#(@LR__3628-@LR__3627)>>2,fcache_load_ptr_
226a8                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
226a8                 | LR__3627
226a8     2C 4E 05 F1 | 	add	fp, #44
226ac     A7 2A 02 FB | 	rdlong	local07, fp
226b0     2C 4E 85 F1 | 	sub	fp, #44
226b4     01 2A 16 F2 | 	cmp	local07, #1 wc
226b8     44 00 90 CD |  if_b	jmp	#LR__3629
226bc     18 4E 05 F1 | 	add	fp, #24
226c0     A7 28 02 FB | 	rdlong	local06, fp
226c4     14 4E 05 F1 | 	add	fp, #20
226c8     A7 22 02 FB | 	rdlong	local03, fp
226cc     2C 4E 85 F1 | 	sub	fp, #44
226d0     01 22 86 F1 | 	sub	local03, #1
226d4     01 22 66 F0 | 	shl	local03, #1
226d8     14 23 02 F1 | 	add	local03, local06
226dc     11 1F E2 FA | 	rdword	local01, local03
226e0     2E 1E 0E F2 | 	cmp	local01, #46 wz
226e4     18 00 90 AD |  if_e	jmp	#LR__3629
226e8     2C 4E 05 F1 | 	add	fp, #44
226ec     A7 1E 02 FB | 	rdlong	local01, fp
226f0     01 1E 86 F1 | 	sub	local01, #1
226f4     A7 1E 62 FC | 	wrlong	local01, fp
226f8     2C 4E 85 F1 | 	sub	fp, #44
226fc     A8 FF 9F FD | 	jmp	#LR__3627
22700                 | LR__3628
22700                 | LR__3629
22700     04 4E 05 F1 | 	add	fp, #4
22704     A7 12 02 FB | 	rdlong	arg01, fp
22708     04 4E 85 F1 | 	sub	fp, #4
2270c     20 12 06 F1 | 	add	arg01, #32
22710     20 14 06 F6 | 	mov	arg02, #32
22714     0B 16 06 F6 | 	mov	arg03, #11
22718     09 37 02 F6 | 	mov	local13, arg01
2271c     98 00 A0 FD | 	call	#\builtin_bytefill_
22720     1B FB 01 F6 | 	mov	result1, local13
22724     0C 4E 05 F1 | 	add	fp, #12
22728     A7 00 48 FC | 	wrbyte	#0, fp
2272c     A7 2A C2 FA | 	rdbyte	local07, fp
22730     14 4E 05 F1 | 	add	fp, #20
22734     A7 2A 62 FC | 	wrlong	local07, fp
22738     04 4E 05 F1 | 	add	fp, #4
2273c     A7 10 68 FC | 	wrlong	#8, fp
22740     24 4E 85 F1 | 	sub	fp, #36
22744                 | ' 
22744                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
22744                 | ' 	i = b = 0; ni = 8;
22744                 | ' 	for (;;) {
22744                 | LR__3630
22744     18 4E 05 F1 | 	add	fp, #24
22748     A7 22 02 FB | 	rdlong	local03, fp
2274c     10 4E 05 F1 | 	add	fp, #16
22750     A7 2E 02 FB | 	rdlong	local09, fp
22754     17 25 02 F6 | 	mov	local04, local09
22758     01 24 06 F1 | 	add	local04, #1
2275c     A7 24 62 FC | 	wrlong	local04, fp
22760     01 2E 66 F0 | 	shl	local09, #1
22764     11 2F 02 F1 | 	add	local09, local03
22768     17 29 E2 FA | 	rdword	local06, local09
2276c     14 4E 85 F1 | 	sub	fp, #20
22770     A7 28 52 FC | 	wrword	local06, fp
22774     A7 2A EA FA | 	rdword	local07, fp wz
22778     14 4E 85 F1 | 	sub	fp, #20
2277c     74 03 90 AD |  if_e	jmp	#LR__3646
22780     14 4E 05 F1 | 	add	fp, #20
22784     A7 2A E2 FA | 	rdword	local07, fp
22788     14 4E 85 F1 | 	sub	fp, #20
2278c     20 2A 0E F2 | 	cmp	local07, #32 wz
22790     30 00 90 AD |  if_e	jmp	#LR__3631
22794     14 4E 05 F1 | 	add	fp, #20
22798     A7 1E E2 FA | 	rdword	local01, fp
2279c     14 4E 85 F1 | 	sub	fp, #20
227a0     2E 1E 0E F2 | 	cmp	local01, #46 wz
227a4     34 00 90 5D |  if_ne	jmp	#LR__3632
227a8     28 4E 05 F1 | 	add	fp, #40
227ac     A7 24 02 FB | 	rdlong	local04, fp
227b0     04 4E 05 F1 | 	add	fp, #4
227b4     A7 30 02 FB | 	rdlong	local10, fp
227b8     2C 4E 85 F1 | 	sub	fp, #44
227bc     18 25 0A F2 | 	cmp	local04, local10 wz
227c0     18 00 90 AD |  if_e	jmp	#LR__3632
227c4                 | LR__3631
227c4     10 4E 05 F1 | 	add	fp, #16
227c8     A7 2A C2 FA | 	rdbyte	local07, fp
227cc     03 2A 46 F5 | 	or	local07, #3
227d0     A7 2A 42 FC | 	wrbyte	local07, fp
227d4     10 4E 85 F1 | 	sub	fp, #16
227d8                 | ' 			cf |=  0x01  |  0x02 ;
227d8                 | ' 			continue;
227d8     68 FF 9F FD | 	jmp	#LR__3630
227dc                 | LR__3632
227dc     20 4E 05 F1 | 	add	fp, #32
227e0     A7 2A 02 FB | 	rdlong	local07, fp
227e4     04 4E 05 F1 | 	add	fp, #4
227e8     A7 1E 02 FB | 	rdlong	local01, fp
227ec     24 4E 85 F1 | 	sub	fp, #36
227f0     0F 2B 12 F2 | 	cmp	local07, local01 wc
227f4     1C 00 90 3D |  if_ae	jmp	#LR__3633
227f8     28 4E 05 F1 | 	add	fp, #40
227fc     A7 2C 02 FB | 	rdlong	local08, fp
22800     04 4E 05 F1 | 	add	fp, #4
22804     A7 30 02 FB | 	rdlong	local10, fp
22808     2C 4E 85 F1 | 	sub	fp, #44
2280c     18 2D 0A F2 | 	cmp	local08, local10 wz
22810     B0 00 90 5D |  if_ne	jmp	#LR__3635
22814                 | LR__3633
22814     24 4E 05 F1 | 	add	fp, #36
22818     A7 2A 02 FB | 	rdlong	local07, fp
2281c     24 4E 85 F1 | 	sub	fp, #36
22820     0B 2A 0E F2 | 	cmp	local07, #11 wz
22824     18 00 90 5D |  if_ne	jmp	#LR__3634
22828     10 4E 05 F1 | 	add	fp, #16
2282c     A7 2A C2 FA | 	rdbyte	local07, fp
22830     03 2A 46 F5 | 	or	local07, #3
22834     A7 2A 42 FC | 	wrbyte	local07, fp
22838     10 4E 85 F1 | 	sub	fp, #16
2283c                 | ' 				cf |=  0x01  |  0x02 ;
2283c                 | ' 				break;
2283c     B4 02 90 FD | 	jmp	#LR__3646
22840                 | LR__3634
22840     28 4E 05 F1 | 	add	fp, #40
22844     A7 2A 02 FB | 	rdlong	local07, fp
22848     04 4E 05 F1 | 	add	fp, #4
2284c     A7 1E 02 FB | 	rdlong	local01, fp
22850     2C 4E 85 F1 | 	sub	fp, #44
22854     0F 2B 0A F2 | 	cmp	local07, local01 wz
22858     10 4E 05 51 |  if_ne	add	fp, #16
2285c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22860     03 2A 46 55 |  if_ne	or	local07, #3
22864     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22868     10 4E 85 51 |  if_ne	sub	fp, #16
2286c     28 4E 05 F1 | 	add	fp, #40
22870     A7 2A 02 FB | 	rdlong	local07, fp
22874     04 4E 05 F1 | 	add	fp, #4
22878     A7 20 02 FB | 	rdlong	local02, fp
2287c     2C 4E 85 F1 | 	sub	fp, #44
22880     10 2B 1A F2 | 	cmp	local07, local02 wcz
22884     6C 02 90 1D |  if_a	jmp	#LR__3646
22888     2C 4E 05 F1 | 	add	fp, #44
2288c     A7 2A 02 FB | 	rdlong	local07, fp
22890     04 4E 85 F1 | 	sub	fp, #4
22894     A7 2A 62 FC | 	wrlong	local07, fp
22898     08 4E 85 F1 | 	sub	fp, #8
2289c     A7 10 68 FC | 	wrlong	#8, fp
228a0     04 4E 05 F1 | 	add	fp, #4
228a4     A7 16 68 FC | 	wrlong	#11, fp
228a8     18 4E 85 F1 | 	sub	fp, #24
228ac     A7 32 C2 FA | 	rdbyte	local11, fp
228b0     19 2B E2 F8 | 	getbyte	local07, local11, #0
228b4     02 2A 66 F0 | 	shl	local07, #2
228b8     A7 2A 42 FC | 	wrbyte	local07, fp
228bc     0C 4E 85 F1 | 	sub	fp, #12
228c0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
228c0                 | ' 			continue;
228c0     80 FE 9F FD | 	jmp	#LR__3630
228c4                 | LR__3635
228c4     14 4E 05 F1 | 	add	fp, #20
228c8     A7 2A E2 FA | 	rdword	local07, fp
228cc     14 4E 85 F1 | 	sub	fp, #20
228d0     80 2A 16 F2 | 	cmp	local07, #128 wc
228d4     6C 00 90 CD |  if_b	jmp	#LR__3637
228d8     10 4E 05 F1 | 	add	fp, #16
228dc     A7 2A C2 FA | 	rdbyte	local07, fp
228e0     02 2A 46 F5 | 	or	local07, #2
228e4     A7 2A 42 FC | 	wrbyte	local07, fp
228e8     04 4E 05 F1 | 	add	fp, #4
228ec     A7 12 E2 FA | 	rdword	arg01, fp
228f0     14 4E 85 F1 | 	sub	fp, #20
228f4     01 00 00 FF 
228f8     52 15 06 F6 | 	mov	arg02, ##850
228fc     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
22900     14 4E 05 F1 | 	add	fp, #20
22904     A7 FA 51 FC | 	wrword	result1, fp
22908     A7 2A E2 FA | 	rdword	local07, fp
2290c     14 4E 85 F1 | 	sub	fp, #20
22910     80 2A CE F7 | 	test	local07, #128 wz
22914     2C 00 90 AD |  if_e	jmp	#LR__3636
22918     14 4E 05 F1 | 	add	fp, #20
2291c     A7 20 E2 FA | 	rdword	local02, fp
22920     7F 20 06 F5 | 	and	local02, #127
22924     01 00 00 FF 
22928     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2292c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
22930     10 2B C2 FA | 	rdbyte	local07, local02
22934     A7 2A 52 FC | 	wrword	local07, fp
22938     14 4E 85 F1 | 	sub	fp, #20
2293c     01 00 00 FF 
22940     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
22944                 | LR__3636
22944                 | LR__3637
22944     14 4E 05 F1 | 	add	fp, #20
22948     A7 2A E2 FA | 	rdword	local07, fp
2294c     14 4E 85 F1 | 	sub	fp, #20
22950     00 2B 16 F2 | 	cmp	local07, #256 wc
22954     88 00 90 CD |  if_b	jmp	#LR__3639
22958     24 4E 05 F1 | 	add	fp, #36
2295c     A7 2A 02 FB | 	rdlong	local07, fp
22960     01 2A 86 F1 | 	sub	local07, #1
22964     04 4E 85 F1 | 	sub	fp, #4
22968     A7 20 02 FB | 	rdlong	local02, fp
2296c     20 4E 85 F1 | 	sub	fp, #32
22970     15 21 12 F2 | 	cmp	local02, local07 wc
22974     2C 00 90 CD |  if_b	jmp	#LR__3638
22978     10 4E 05 F1 | 	add	fp, #16
2297c     A7 32 C2 FA | 	rdbyte	local11, fp
22980     19 2B E2 F8 | 	getbyte	local07, local11, #0
22984     03 2A 46 F5 | 	or	local07, #3
22988     A7 2A 42 FC | 	wrbyte	local07, fp
2298c     14 4E 05 F1 | 	add	fp, #20
22990     A7 2A 02 FB | 	rdlong	local07, fp
22994     04 4E 85 F1 | 	sub	fp, #4
22998     A7 2A 62 FC | 	wrlong	local07, fp
2299c     20 4E 85 F1 | 	sub	fp, #32
229a0                 | ' 				cf |=  0x01  |  0x02 ;
229a0                 | ' 				i = ni; continue;
229a0     A0 FD 9F FD | 	jmp	#LR__3630
229a4                 | LR__3638
229a4     04 4E 05 F1 | 	add	fp, #4
229a8     A7 2E 02 FB | 	rdlong	local09, fp
229ac     1C 4E 05 F1 | 	add	fp, #28
229b0     A7 30 02 FB | 	rdlong	local10, fp
229b4     18 25 02 F6 | 	mov	local04, local10
229b8     01 24 06 F1 | 	add	local04, #1
229bc     A7 24 62 FC | 	wrlong	local04, fp
229c0     20 2E 06 F1 | 	add	local09, #32
229c4     17 31 02 F1 | 	add	local10, local09
229c8     0C 4E 85 F1 | 	sub	fp, #12
229cc     A7 22 E2 FA | 	rdword	local03, fp
229d0     14 4E 85 F1 | 	sub	fp, #20
229d4     08 22 46 F0 | 	shr	local03, #8
229d8     18 23 42 FC | 	wrbyte	local03, local10
229dc     D4 00 90 FD | 	jmp	#LR__3645
229e0                 | LR__3639
229e0     14 4E 05 F1 | 	add	fp, #20
229e4     A7 2A EA FA | 	rdword	local07, fp wz
229e8     14 4E 85 F1 | 	sub	fp, #20
229ec     20 00 90 AD |  if_e	jmp	#LR__3640
229f0     41 01 00 FF 
229f4     6D 13 06 F6 | 	mov	arg01, ##@LR__4273
229f8     14 4E 05 F1 | 	add	fp, #20
229fc     A7 14 E2 FA | 	rdword	arg02, fp
22a00     14 4E 85 F1 | 	sub	fp, #20
22a04     48 CB BF FD | 	call	#_fatfs_cc_strchr
22a08     00 FA 0D F2 | 	cmp	result1, #0 wz
22a0c     20 00 90 AD |  if_e	jmp	#LR__3641
22a10                 | LR__3640
22a10     14 4E 05 F1 | 	add	fp, #20
22a14     A7 BE 58 FC | 	wrword	#95, fp
22a18     04 4E 85 F1 | 	sub	fp, #4
22a1c     A7 2A C2 FA | 	rdbyte	local07, fp
22a20     03 2A 46 F5 | 	or	local07, #3
22a24     A7 2A 42 FC | 	wrbyte	local07, fp
22a28     10 4E 85 F1 | 	sub	fp, #16
22a2c     84 00 90 FD | 	jmp	#LR__3644
22a30                 | LR__3641
22a30     14 4E 05 F1 | 	add	fp, #20
22a34     A7 2A E2 FA | 	rdword	local07, fp
22a38     14 4E 85 F1 | 	sub	fp, #20
22a3c     41 2A 16 F2 | 	cmp	local07, #65 wc
22a40     24 00 90 CD |  if_b	jmp	#LR__3642
22a44     14 4E 05 F1 | 	add	fp, #20
22a48     A7 1E E2 FA | 	rdword	local01, fp
22a4c     14 4E 85 F1 | 	sub	fp, #20
22a50     5B 1E 16 F2 | 	cmp	local01, #91 wc
22a54     0C 4E 05 C1 |  if_b	add	fp, #12
22a58     A7 2A C2 CA |  if_b	rdbyte	local07, fp
22a5c     02 2A 46 C5 |  if_b	or	local07, #2
22a60     A7 2A 42 CC |  if_b	wrbyte	local07, fp
22a64     0C 4E 85 C1 |  if_b	sub	fp, #12
22a68                 | LR__3642
22a68     14 4E 05 F1 | 	add	fp, #20
22a6c     A7 2A E2 FA | 	rdword	local07, fp
22a70     14 4E 85 F1 | 	sub	fp, #20
22a74     61 2A 16 F2 | 	cmp	local07, #97 wc
22a78     38 00 90 CD |  if_b	jmp	#LR__3643
22a7c     14 4E 05 F1 | 	add	fp, #20
22a80     A7 1E E2 FA | 	rdword	local01, fp
22a84     14 4E 85 F1 | 	sub	fp, #20
22a88     7B 1E 16 F2 | 	cmp	local01, #123 wc
22a8c     24 00 90 3D |  if_ae	jmp	#LR__3643
22a90     0C 4E 05 F1 | 	add	fp, #12
22a94     A7 2A C2 FA | 	rdbyte	local07, fp
22a98     01 2A 46 F5 | 	or	local07, #1
22a9c     A7 2A 42 FC | 	wrbyte	local07, fp
22aa0     08 4E 05 F1 | 	add	fp, #8
22aa4     A7 2A E2 FA | 	rdword	local07, fp
22aa8     20 2A 86 F1 | 	sub	local07, #32
22aac     A7 2A 52 FC | 	wrword	local07, fp
22ab0     14 4E 85 F1 | 	sub	fp, #20
22ab4                 | LR__3643
22ab4                 | LR__3644
22ab4                 | LR__3645
22ab4     04 4E 05 F1 | 	add	fp, #4
22ab8     A7 32 02 FB | 	rdlong	local11, fp
22abc     19 2F 02 F6 | 	mov	local09, local11
22ac0     1C 4E 05 F1 | 	add	fp, #28
22ac4     A7 20 02 FB | 	rdlong	local02, fp
22ac8     10 25 02 F6 | 	mov	local04, local02
22acc     01 24 06 F1 | 	add	local04, #1
22ad0     A7 24 62 FC | 	wrlong	local04, fp
22ad4     10 31 02 F6 | 	mov	local10, local02
22ad8     20 2E 06 F1 | 	add	local09, #32
22adc     17 31 02 F1 | 	add	local10, local09
22ae0     0C 4E 85 F1 | 	sub	fp, #12
22ae4     A7 22 E2 FA | 	rdword	local03, fp
22ae8     14 4E 85 F1 | 	sub	fp, #20
22aec     18 23 42 FC | 	wrbyte	local03, local10
22af0     50 FC 9F FD | 	jmp	#LR__3630
22af4                 | LR__3646
22af4     04 4E 05 F1 | 	add	fp, #4
22af8     A7 32 02 FB | 	rdlong	local11, fp
22afc     04 4E 85 F1 | 	sub	fp, #4
22b00     20 32 06 F1 | 	add	local11, #32
22b04     19 2B C2 FA | 	rdbyte	local07, local11
22b08     E5 2A 0E F2 | 	cmp	local07, #229 wz
22b0c     04 4E 05 A1 |  if_e	add	fp, #4
22b10     A7 2A 02 AB |  if_e	rdlong	local07, fp
22b14     04 4E 85 A1 |  if_e	sub	fp, #4
22b18     20 2A 06 A1 |  if_e	add	local07, #32
22b1c     15 0B 48 AC |  if_e	wrbyte	#5, local07
22b20     24 4E 05 F1 | 	add	fp, #36
22b24     A7 2A 02 FB | 	rdlong	local07, fp
22b28     24 4E 85 F1 | 	sub	fp, #36
22b2c     08 2A 0E F2 | 	cmp	local07, #8 wz
22b30     0C 4E 05 A1 |  if_e	add	fp, #12
22b34     A7 2A C2 AA |  if_e	rdbyte	local07, fp
22b38     02 2A 66 A0 |  if_e	shl	local07, #2
22b3c     A7 2A 42 AC |  if_e	wrbyte	local07, fp
22b40     0C 4E 85 A1 |  if_e	sub	fp, #12
22b44     0C 4E 05 F1 | 	add	fp, #12
22b48     A7 2A C2 FA | 	rdbyte	local07, fp
22b4c     0C 4E 85 F1 | 	sub	fp, #12
22b50     0C 2A 06 F5 | 	and	local07, #12
22b54     0C 2A 0E F2 | 	cmp	local07, #12 wz
22b58     18 00 90 AD |  if_e	jmp	#LR__3647
22b5c     0C 4E 05 F1 | 	add	fp, #12
22b60     A7 1E C2 FA | 	rdbyte	local01, fp
22b64     0C 4E 85 F1 | 	sub	fp, #12
22b68     03 1E 06 F5 | 	and	local01, #3
22b6c     03 1E 0E F2 | 	cmp	local01, #3 wz
22b70     14 00 90 5D |  if_ne	jmp	#LR__3648
22b74                 | LR__3647
22b74     10 4E 05 F1 | 	add	fp, #16
22b78     A7 2A C2 FA | 	rdbyte	local07, fp
22b7c     02 2A 46 F5 | 	or	local07, #2
22b80     A7 2A 42 FC | 	wrbyte	local07, fp
22b84     10 4E 85 F1 | 	sub	fp, #16
22b88                 | LR__3648
22b88     10 4E 05 F1 | 	add	fp, #16
22b8c     A7 2A C2 FA | 	rdbyte	local07, fp
22b90     10 4E 85 F1 | 	sub	fp, #16
22b94     02 2A CE F7 | 	test	local07, #2 wz
22b98     48 00 90 5D |  if_ne	jmp	#LR__3649
22b9c     0C 4E 05 F1 | 	add	fp, #12
22ba0     A7 2A C2 FA | 	rdbyte	local07, fp
22ba4     0C 4E 85 F1 | 	sub	fp, #12
22ba8     01 2A CE F7 | 	test	local07, #1 wz
22bac     10 4E 05 51 |  if_ne	add	fp, #16
22bb0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22bb4     10 2A 46 55 |  if_ne	or	local07, #16
22bb8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22bbc     10 4E 85 51 |  if_ne	sub	fp, #16
22bc0     0C 4E 05 F1 | 	add	fp, #12
22bc4     A7 2A C2 FA | 	rdbyte	local07, fp
22bc8     0C 4E 85 F1 | 	sub	fp, #12
22bcc     04 2A CE F7 | 	test	local07, #4 wz
22bd0     10 4E 05 51 |  if_ne	add	fp, #16
22bd4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22bd8     08 2A 46 55 |  if_ne	or	local07, #8
22bdc     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22be0     10 4E 85 51 |  if_ne	sub	fp, #16
22be4                 | LR__3649
22be4     04 4E 05 F1 | 	add	fp, #4
22be8     A7 2A 02 FB | 	rdlong	local07, fp
22bec     0C 4E 05 F1 | 	add	fp, #12
22bf0     A7 1E C2 FA | 	rdbyte	local01, fp
22bf4     10 4E 85 F1 | 	sub	fp, #16
22bf8     2B 2A 06 F1 | 	add	local07, #43
22bfc     15 1F 42 FC | 	wrbyte	local01, local07
22c00                 | ' 	}
22c00                 | ' 
22c00                 | ' 	dp->fn[ 11 ] = cf;
22c00                 | ' 
22c00                 | ' 	return FR_OK;
22c00     00 FA 05 F6 | 	mov	result1, #0
22c04                 | LR__3650
22c04     A7 F0 03 F6 | 	mov	ptra, fp
22c08     B2 00 A0 FD | 	call	#popregs_
22c0c                 | _fatfs_cc_create_name_ret
22c0c     2D 00 64 FD | 	ret
22c10                 | 
22c10                 | _fatfs_cc_follow_path
22c10     02 4A 05 F6 | 	mov	COUNT_, #2
22c14     A8 00 A0 FD | 	call	#pushregs_
22c18     18 F0 07 F1 | 	add	ptra, #24
22c1c     04 4E 05 F1 | 	add	fp, #4
22c20     A7 12 62 FC | 	wrlong	arg01, fp
22c24     04 4E 05 F1 | 	add	fp, #4
22c28     A7 14 62 FC | 	wrlong	arg02, fp
22c2c     04 4E 85 F1 | 	sub	fp, #4
22c30     A7 FA 01 FB | 	rdlong	result1, fp
22c34     FD 1E 02 FB | 	rdlong	local01, result1
22c38     10 4E 05 F1 | 	add	fp, #16
22c3c     A7 1E 62 FC | 	wrlong	local01, fp
22c40     14 4E 85 F1 | 	sub	fp, #20
22c44     97 24 48 FB | 	callpa	#(@LR__3662-@LR__3660)>>2,fcache_load_ptr_
22c48                 | ' )
22c48                 | ' {
22c48                 | ' 	FRESULT res;
22c48                 | ' 	BYTE ns;
22c48                 | ' 	FATFS *fs = dp->obj.fs;
22c48                 | ' #line 3034 "ff.c"
22c48                 | ' 	{
22c48                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
22c48                 | LR__3660
22c48     08 4E 05 F1 | 	add	fp, #8
22c4c     A7 1E 02 FB | 	rdlong	local01, fp
22c50     08 4E 85 F1 | 	sub	fp, #8
22c54     0F 1F C2 FA | 	rdbyte	local01, local01
22c58     2F 1E 0E F2 | 	cmp	local01, #47 wz
22c5c     18 00 90 AD |  if_e	jmp	#LR__3661
22c60     08 4E 05 F1 | 	add	fp, #8
22c64     A7 1E 02 FB | 	rdlong	local01, fp
22c68     08 4E 85 F1 | 	sub	fp, #8
22c6c     0F 1F C2 FA | 	rdbyte	local01, local01
22c70     5C 1E 0E F2 | 	cmp	local01, #92 wz
22c74     18 00 90 5D |  if_ne	jmp	#LR__3663
22c78                 | LR__3661
22c78     08 4E 05 F1 | 	add	fp, #8
22c7c     A7 1E 02 FB | 	rdlong	local01, fp
22c80     01 1E 06 F1 | 	add	local01, #1
22c84     A7 1E 62 FC | 	wrlong	local01, fp
22c88     08 4E 85 F1 | 	sub	fp, #8
22c8c     B8 FF 9F FD | 	jmp	#LR__3660
22c90                 | LR__3662
22c90                 | LR__3663
22c90     04 4E 05 F1 | 	add	fp, #4
22c94     A7 1E 02 FB | 	rdlong	local01, fp
22c98     08 1E 06 F1 | 	add	local01, #8
22c9c     0F 01 68 FC | 	wrlong	#0, local01
22ca0     04 4E 05 F1 | 	add	fp, #4
22ca4     A7 1E 02 FB | 	rdlong	local01, fp
22ca8     08 4E 85 F1 | 	sub	fp, #8
22cac     0F 1F C2 FA | 	rdbyte	local01, local01
22cb0     20 1E 16 F2 | 	cmp	local01, #32 wc
22cb4     30 00 90 3D |  if_ae	jmp	#LR__3664
22cb8     04 4E 05 F1 | 	add	fp, #4
22cbc     A7 1E 02 FB | 	rdlong	local01, fp
22cc0     2B 1E 06 F1 | 	add	local01, #43
22cc4     0F 01 49 FC | 	wrbyte	#128, local01
22cc8     A7 12 02 FB | 	rdlong	arg01, fp
22ccc     04 4E 85 F1 | 	sub	fp, #4
22cd0     00 14 06 F6 | 	mov	arg02, #0
22cd4     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
22cd8     0C 4E 05 F1 | 	add	fp, #12
22cdc     A7 FA 61 FC | 	wrlong	result1, fp
22ce0     0C 4E 85 F1 | 	sub	fp, #12
22ce4     1C 01 90 FD | 	jmp	#LR__3668
22ce8                 | LR__3664
22ce8                 | ' 		for (;;) {
22ce8                 | LR__3665
22ce8     04 4E 05 F1 | 	add	fp, #4
22cec     A7 12 02 FB | 	rdlong	arg01, fp
22cf0     04 4E 05 F1 | 	add	fp, #4
22cf4     A7 14 02 F6 | 	mov	arg02, fp
22cf8     08 4E 85 F1 | 	sub	fp, #8
22cfc     14 F6 BF FD | 	call	#_fatfs_cc_create_name
22d00     0C 4E 05 F1 | 	add	fp, #12
22d04     A7 FA 61 FC | 	wrlong	result1, fp
22d08     00 FA 4D F2 | 	cmps	result1, #0 wz
22d0c     0C 4E 85 F1 | 	sub	fp, #12
22d10     F0 00 90 5D |  if_ne	jmp	#LR__3667
22d14     04 4E 05 F1 | 	add	fp, #4
22d18     A7 12 02 FB | 	rdlong	arg01, fp
22d1c     04 4E 85 F1 | 	sub	fp, #4
22d20     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
22d24     0C 4E 05 F1 | 	add	fp, #12
22d28     A7 FA 61 FC | 	wrlong	result1, fp
22d2c     08 4E 85 F1 | 	sub	fp, #8
22d30     A7 1E 02 FB | 	rdlong	local01, fp
22d34     2B 1E 06 F1 | 	add	local01, #43
22d38     0F 1F C2 FA | 	rdbyte	local01, local01
22d3c     0C 4E 05 F1 | 	add	fp, #12
22d40     A7 1E 42 FC | 	wrbyte	local01, fp
22d44     04 4E 85 F1 | 	sub	fp, #4
22d48     A7 1E 0A FB | 	rdlong	local01, fp wz
22d4c     0C 4E 85 F1 | 	sub	fp, #12
22d50     34 00 90 AD |  if_e	jmp	#LR__3666
22d54     0C 4E 05 F1 | 	add	fp, #12
22d58     A7 1E 02 FB | 	rdlong	local01, fp
22d5c     0C 4E 85 F1 | 	sub	fp, #12
22d60     04 1E 0E F2 | 	cmp	local01, #4 wz
22d64     9C 00 90 5D |  if_ne	jmp	#LR__3667
22d68     10 4E 05 F1 | 	add	fp, #16
22d6c     A7 1E C2 FA | 	rdbyte	local01, fp
22d70     10 4E 85 F1 | 	sub	fp, #16
22d74     04 1E CE F7 | 	test	local01, #4 wz
22d78     0C 4E 05 A1 |  if_e	add	fp, #12
22d7c     A7 0A 68 AC |  if_e	wrlong	#5, fp
22d80     0C 4E 85 A1 |  if_e	sub	fp, #12
22d84                 | ' 					}
22d84                 | ' 				}
22d84                 | ' 				break;
22d84     7C 00 90 FD | 	jmp	#LR__3667
22d88                 | LR__3666
22d88     10 4E 05 F1 | 	add	fp, #16
22d8c     A7 1E C2 FA | 	rdbyte	local01, fp
22d90     10 4E 85 F1 | 	sub	fp, #16
22d94     04 1E CE F7 | 	test	local01, #4 wz
22d98     68 00 90 5D |  if_ne	jmp	#LR__3667
22d9c     04 4E 05 F1 | 	add	fp, #4
22da0     A7 1E 02 FB | 	rdlong	local01, fp
22da4     04 4E 85 F1 | 	sub	fp, #4
22da8     06 1E 06 F1 | 	add	local01, #6
22dac     0F 1F C2 FA | 	rdbyte	local01, local01
22db0     10 1E CE F7 | 	test	local01, #16 wz
22db4     0C 4E 05 A1 |  if_e	add	fp, #12
22db8     A7 0A 68 AC |  if_e	wrlong	#5, fp
22dbc     0C 4E 85 A1 |  if_e	sub	fp, #12
22dc0                 | ' 				res = FR_NO_PATH; break;
22dc0     40 00 90 AD |  if_e	jmp	#LR__3667
22dc4     04 4E 05 F1 | 	add	fp, #4
22dc8     A7 20 02 FB | 	rdlong	local02, fp
22dcc     10 1F 02 F6 | 	mov	local01, local02
22dd0     10 4E 05 F1 | 	add	fp, #16
22dd4     A7 14 02 FB | 	rdlong	arg02, fp
22dd8     0A 13 02 F6 | 	mov	arg01, arg02
22ddc     34 14 06 F1 | 	add	arg02, #52
22de0     14 4E 85 F1 | 	sub	fp, #20
22de4     10 20 06 F1 | 	add	local02, #16
22de8     10 21 02 FB | 	rdlong	local02, local02
22dec     FF 21 06 F5 | 	and	local02, #511
22df0     10 15 02 F1 | 	add	arg02, local02
22df4     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
22df8     08 1E 06 F1 | 	add	local01, #8
22dfc     0F FB 61 FC | 	wrlong	result1, local01
22e00     E4 FE 9F FD | 	jmp	#LR__3665
22e04                 | LR__3667
22e04                 | LR__3668
22e04                 | ' 			}
22e04                 | ' #line 3090 "ff.c"
22e04                 | ' 			{
22e04                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
22e04                 | ' 			}
22e04                 | ' 		}
22e04                 | ' 	}
22e04                 | ' 
22e04                 | ' 	return res;
22e04     0C 4E 05 F1 | 	add	fp, #12
22e08     A7 FA 01 FB | 	rdlong	result1, fp
22e0c     0C 4E 85 F1 | 	sub	fp, #12
22e10     A7 F0 03 F6 | 	mov	ptra, fp
22e14     B2 00 A0 FD | 	call	#popregs_
22e18                 | _fatfs_cc_follow_path_ret
22e18     2D 00 64 FD | 	ret
22e1c                 | 
22e1c                 | _fatfs_cc_get_ldnumber
22e1c     01 00 66 F6 | 	neg	_var01, #1
22e20     09 03 0A FB | 	rdlong	_var02, arg01 wz
22e24     01 05 02 F6 | 	mov	_var03, _var02
22e28     01 FA 65 A6 |  if_e	neg	result1, #1
22e2c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
22e30     97 10 48 FB | 	callpa	#(@LR__3671-@LR__3670)>>2,fcache_load_ptr_
22e34                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
22e34                 | LR__3670
22e34     02 07 C2 FA | 	rdbyte	_var04, _var03
22e38     03 FB E1 F8 | 	getbyte	result1, _var04, #0
22e3c     20 FA 15 F2 | 	cmp	result1, #32 wc
22e40     01 04 06 F1 | 	add	_var03, #1
22e44     03 09 02 36 |  if_ae	mov	_var05, _var04
22e48     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
22e4c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
22e50     E0 FF 9F 1D |  if_a	jmp	#LR__3670
22e54                 | LR__3671
22e54     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
22e58     3A 06 0E F2 | 	cmp	_var04, #58 wz
22e5c     40 00 90 5D |  if_ne	jmp	#LR__3673
22e60     01 0A 06 F6 | 	mov	_var06, #1
22e64     01 09 C2 FA | 	rdbyte	_var05, _var02
22e68     30 08 16 F2 | 	cmp	_var05, #48 wc
22e6c     1C 00 90 CD |  if_b	jmp	#LR__3672
22e70     01 09 C2 FA | 	rdbyte	_var05, _var02
22e74     3A 08 16 F2 | 	cmp	_var05, #58 wc
22e78     01 0D 02 C6 |  if_b	mov	_var07, _var02
22e7c     02 0C 06 C1 |  if_b	add	_var07, #2
22e80     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
22e84     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
22e88     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
22e8c                 | LR__3672
22e8c     01 0A 56 F2 | 	cmps	_var06, #1 wc
22e90     05 01 02 C6 |  if_b	mov	_var01, _var06
22e94     09 05 62 CC |  if_b	wrlong	_var03, arg01
22e98                 | ' 			vol = i;
22e98                 | ' 			*path = tt;
22e98                 | ' 		}
22e98                 | ' 		return vol;
22e98     00 FB 01 F6 | 	mov	result1, _var01
22e9c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
22ea0                 | LR__3673
22ea0                 | ' 	}
22ea0                 | ' #line 3170 "ff.c"
22ea0                 | ' 	vol = 0;
22ea0                 | ' 
22ea0                 | ' 	return vol;
22ea0     00 FA 05 F6 | 	mov	result1, #0
22ea4                 | _fatfs_cc_get_ldnumber_ret
22ea4     2D 00 64 FD | 	ret
22ea8                 | 
22ea8                 | _fatfs_cc_check_fs
22ea8     04 4A 05 F6 | 	mov	COUNT_, #4
22eac     A8 00 A0 FD | 	call	#pushregs_
22eb0     09 1F 02 F6 | 	mov	local01, arg01
22eb4     03 1E 06 F1 | 	add	local01, #3
22eb8     0F 01 48 FC | 	wrbyte	#0, local01
22ebc     2D 1E 06 F1 | 	add	local01, #45
22ec0     FF FF FF FF 
22ec4     0F FF 6B FC | 	wrlong	##-1, local01
22ec8     30 1E 86 F1 | 	sub	local01, #48
22ecc     0F 13 02 F6 | 	mov	arg01, local01
22ed0     18 D5 BF FD | 	call	#_fatfs_cc_move_window
22ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
22ed8     04 FA 05 56 |  if_ne	mov	result1, #4
22edc     94 01 90 5D |  if_ne	jmp	#LR__3684
22ee0     34 1E 06 F1 | 	add	local01, #52
22ee4     0F 13 02 F6 | 	mov	arg01, local01
22ee8     FE 13 06 F1 | 	add	arg01, #510
22eec                 | ' {
22eec                 | ' 
22eec                 | ' 	return *((WORD*)ptr);
22eec     09 21 E2 FA | 	rdword	local02, arg01
22ef0     0F 23 C2 FA | 	rdbyte	local03, local01
22ef4     34 1E 86 F1 | 	sub	local01, #52
22ef8     11 25 E2 F8 | 	getbyte	local04, local03, #0
22efc     EB 24 0E F2 | 	cmp	local04, #235 wz
22f00     11 17 02 56 |  if_ne	mov	arg03, local03
22f04     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
22f08     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
22f0c     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
22f10     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
22f14     44 01 90 5D |  if_ne	jmp	#LR__3683
22f18     10 25 32 F9 | 	getword	local04, local02, #0
22f1c     55 00 00 FF 
22f20     55 24 0E F2 | 	cmp	local04, ##43605 wz
22f24     2C 00 90 5D |  if_ne	jmp	#LR__3680
22f28     34 1E 06 F1 | 	add	local01, #52
22f2c     0F 13 02 F6 | 	mov	arg01, local01
22f30     34 1E 86 F1 | 	sub	local01, #52
22f34     52 12 06 F1 | 	add	arg01, #82
22f38     41 01 00 FF 
22f3c     74 15 06 F6 | 	mov	arg02, ##@LR__4274
22f40     08 16 06 F6 | 	mov	arg03, #8
22f44     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
22f48     00 FA 0D F2 | 	cmp	result1, #0 wz
22f4c                 | ' 			return 0;
22f4c     00 FA 05 A6 |  if_e	mov	result1, #0
22f50     20 01 90 AD |  if_e	jmp	#LR__3684
22f54                 | LR__3680
22f54     34 1E 06 F1 | 	add	local01, #52
22f58     0F 13 02 F6 | 	mov	arg01, local01
22f5c     0B 12 06 F1 | 	add	arg01, #11
22f60                 | ' {
22f60                 | ' 
22f60                 | ' 	return *((WORD*)ptr);
22f60     09 FB E1 FA | 	rdword	result1, arg01
22f64     0D 1E 06 F1 | 	add	local01, #13
22f68     0F 23 C2 FA | 	rdbyte	local03, local01
22f6c     41 1E 86 F1 | 	sub	local01, #65
22f70     FD 24 32 F9 | 	getword	local04, result1, #0
22f74     FD 14 32 F9 | 	getword	arg02, result1, #0
22f78     01 14 86 F1 | 	sub	arg02, #1
22f7c     0A 25 CA F7 | 	test	local04, arg02 wz
22f80     D8 00 90 5D |  if_ne	jmp	#LR__3682
22f84     FD 14 32 F9 | 	getword	arg02, result1, #0
22f88     01 00 00 FF 
22f8c     00 14 16 F2 | 	cmp	arg02, ##512 wc
22f90     C8 00 90 CD |  if_b	jmp	#LR__3682
22f94     FD 14 32 F9 | 	getword	arg02, result1, #0
22f98     01 00 00 FF 
22f9c     01 14 16 F2 | 	cmp	arg02, ##513 wc
22fa0     B8 00 90 3D |  if_ae	jmp	#LR__3682
22fa4     11 13 02 F6 | 	mov	arg01, local03
22fa8     07 12 4E F7 | 	zerox	arg01, #7 wz
22fac     AC 00 90 AD |  if_e	jmp	#LR__3682
22fb0     11 13 E2 F8 | 	getbyte	arg01, local03, #0
22fb4     11 23 E2 F8 | 	getbyte	local03, local03, #0
22fb8     01 22 86 F1 | 	sub	local03, #1
22fbc     11 13 CA F7 | 	test	arg01, local03 wz
22fc0     98 00 90 5D |  if_ne	jmp	#LR__3682
22fc4     34 1E 06 F1 | 	add	local01, #52
22fc8     0F 13 02 F6 | 	mov	arg01, local01
22fcc     34 1E 86 F1 | 	sub	local01, #52
22fd0     0E 12 06 F1 | 	add	arg01, #14
22fd4                 | ' {
22fd4                 | ' 
22fd4                 | ' 	return *((WORD*)ptr);
22fd4     09 FB E9 FA | 	rdword	result1, arg01 wz
22fd8     80 00 90 AD |  if_e	jmp	#LR__3682
22fdc     44 1E 06 F1 | 	add	local01, #68
22fe0     0F 13 C2 FA | 	rdbyte	arg01, local01
22fe4     44 1E 86 F1 | 	sub	local01, #68
22fe8     01 12 86 F1 | 	sub	arg01, #1
22fec     02 12 16 F2 | 	cmp	arg01, #2 wc
22ff0     68 00 90 3D |  if_ae	jmp	#LR__3682
22ff4     34 1E 06 F1 | 	add	local01, #52
22ff8     0F 13 02 F6 | 	mov	arg01, local01
22ffc     34 1E 86 F1 | 	sub	local01, #52
23000     11 12 06 F1 | 	add	arg01, #17
23004                 | ' {
23004                 | ' 
23004                 | ' 	return *((WORD*)ptr);
23004     09 FB E9 FA | 	rdword	result1, arg01 wz
23008     50 00 90 AD |  if_e	jmp	#LR__3682
2300c     34 1E 06 F1 | 	add	local01, #52
23010     0F 13 02 F6 | 	mov	arg01, local01
23014     34 1E 86 F1 | 	sub	local01, #52
23018     13 12 06 F1 | 	add	arg01, #19
2301c                 | ' {
2301c                 | ' 
2301c                 | ' 	return *((WORD*)ptr);
2301c     09 FB E1 FA | 	rdword	result1, arg01
23020     FD 22 32 F9 | 	getword	local03, result1, #0
23024     80 22 16 F2 | 	cmp	local03, #128 wc
23028     20 00 90 3D |  if_ae	jmp	#LR__3681
2302c     34 1E 06 F1 | 	add	local01, #52
23030     0F 13 02 F6 | 	mov	arg01, local01
23034     34 1E 86 F1 | 	sub	local01, #52
23038     20 12 06 F1 | 	add	arg01, #32
2303c                 | ' {
2303c                 | ' 
2303c                 | ' 	return *((DWORD*)ptr);
2303c     09 FB 01 FB | 	rdlong	result1, arg01
23040     80 00 00 FF 
23044     00 FA 15 F2 | 	cmp	result1, ##65536 wc
23048     10 00 90 CD |  if_b	jmp	#LR__3682
2304c                 | LR__3681
2304c     4A 1E 06 F1 | 	add	local01, #74
23050                 | ' {
23050                 | ' 
23050                 | ' 	return *((WORD*)ptr);
23050     0F FB E9 FA | 	rdword	result1, local01 wz
23054                 | ' 			&& b != 0 && (b & (b - 1)) == 0
23054                 | ' 			&& ld_word(fs->win +  14 ) != 0
23054                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
23054                 | ' 			&& ld_word(fs->win +  17 ) != 0
23054                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
23054                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
23054                 | ' 				return 0;
23054     00 FA 05 56 |  if_ne	mov	result1, #0
23058     18 00 90 5D |  if_ne	jmp	#LR__3684
2305c                 | LR__3682
2305c                 | LR__3683
2305c                 | ' 		}
2305c                 | ' 	}
2305c                 | ' 	return sign == 0xAA55 ? 2 : 3;
2305c     10 23 32 F9 | 	getword	local03, local02, #0
23060     55 00 00 FF 
23064     55 22 0E F2 | 	cmp	local03, ##43605 wz
23068     02 24 06 A6 |  if_e	mov	local04, #2
2306c     03 24 06 56 |  if_ne	mov	local04, #3
23070     12 FB 01 F6 | 	mov	result1, local04
23074                 | LR__3684
23074     A7 F0 03 F6 | 	mov	ptra, fp
23078     B2 00 A0 FD | 	call	#popregs_
2307c                 | _fatfs_cc_check_fs_ret
2307c     2D 00 64 FD | 	ret
23080                 | 
23080                 | _fatfs_cc_find_volume
23080     05 4A 05 F6 | 	mov	COUNT_, #5
23084     A8 00 A0 FD | 	call	#pushregs_
23088     24 F0 07 F1 | 	add	ptra, #36
2308c     09 1F 02 F6 | 	mov	local01, arg01
23090     0A 21 02 F6 | 	mov	local02, arg02
23094     0F 13 02 F6 | 	mov	arg01, local01
23098     00 14 06 F6 | 	mov	arg02, #0
2309c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
230a0     02 FA 0D F2 | 	cmp	result1, #2 wz
230a4     0C 00 90 AD |  if_e	jmp	#LR__3690
230a8     03 FA 15 F2 | 	cmp	result1, #3 wc
230ac     00 20 0E C2 |  if_b	cmp	local02, #0 wz
230b0     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3698
230b4                 | LR__3690
230b4                 | ' 	for (i = 0; i < 4; i++) {
230b4     00 22 06 F6 | 	mov	local03, #0
230b8     97 26 48 FB | 	callpa	#(@LR__3692-@LR__3691)>>2,fcache_load_ptr_
230bc                 | LR__3691
230bc     04 22 16 F2 | 	cmp	local03, #4 wc
230c0     44 00 90 3D |  if_ae	jmp	#LR__3693
230c4     11 25 02 F6 | 	mov	local04, local03
230c8     02 24 66 F0 | 	shl	local04, #2
230cc     14 4E 05 F1 | 	add	fp, #20
230d0     A7 24 02 F1 | 	add	local04, fp
230d4     34 1E 06 F1 | 	add	local01, #52
230d8     0F 13 02 F6 | 	mov	arg01, local01
230dc     34 1E 86 F1 | 	sub	local01, #52
230e0     BE 13 06 F1 | 	add	arg01, #446
230e4     11 15 02 F6 | 	mov	arg02, local03
230e8     04 14 66 F0 | 	shl	arg02, #4
230ec     0A 13 02 F1 | 	add	arg01, arg02
230f0     08 12 06 F1 | 	add	arg01, #8
230f4                 | ' {
230f4                 | ' 
230f4                 | ' 	return *((DWORD*)ptr);
230f4     09 FB 01 FB | 	rdlong	result1, arg01
230f8     14 4E 85 F1 | 	sub	fp, #20
230fc     12 FB 61 FC | 	wrlong	result1, local04
23100     01 22 06 F1 | 	add	local03, #1
23104     B4 FF 9F FD | 	jmp	#LR__3691
23108                 | LR__3692
23108                 | LR__3693
23108     00 20 0E F2 | 	cmp	local02, #0 wz
2310c     10 25 02 56 |  if_ne	mov	local04, local02
23110     01 24 86 51 |  if_ne	sub	local04, #1
23114     00 24 06 A6 |  if_e	mov	local04, #0
23118     12 23 02 F6 | 	mov	local03, local04
2311c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2311c                 | ' 	}
2311c                 | ' 	i = part ? part - 1 : 0;
2311c                 | ' 	do {
2311c                 | LR__3694
2311c     11 25 02 F6 | 	mov	local04, local03
23120     02 24 66 F0 | 	shl	local04, #2
23124     14 4E 05 F1 | 	add	fp, #20
23128     A7 24 02 F1 | 	add	local04, fp
2312c     12 25 0A FB | 	rdlong	local04, local04 wz
23130     14 4E 85 F1 | 	sub	fp, #20
23134     28 00 90 AD |  if_e	jmp	#LR__3695
23138     11 25 02 F6 | 	mov	local04, local03
2313c     02 24 66 F0 | 	shl	local04, #2
23140     14 4E 05 F1 | 	add	fp, #20
23144     A7 24 02 F1 | 	add	local04, fp
23148     12 15 02 FB | 	rdlong	arg02, local04
2314c     0F 13 02 F6 | 	mov	arg01, local01
23150     14 4E 85 F1 | 	sub	fp, #20
23154     50 FD BF FD | 	call	#_fatfs_cc_check_fs
23158     FD 24 02 F6 | 	mov	local04, result1
2315c     04 00 90 FD | 	jmp	#LR__3696
23160                 | LR__3695
23160     03 24 06 F6 | 	mov	local04, #3
23164                 | LR__3696
23164     12 27 02 F6 | 	mov	local05, local04
23168     00 20 0E F2 | 	cmp	local02, #0 wz
2316c     02 26 16 A2 |  if_e	cmp	local05, #2 wc
23170     0C 00 90 8D |  if_c_and_z	jmp	#LR__3697
23174     01 22 06 A1 |  if_e	add	local03, #1
23178     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2317c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3694
23180                 | LR__3697
23180                 | ' 	return fmt;
23180     13 FB 01 F6 | 	mov	result1, local05
23184                 | LR__3698
23184     A7 F0 03 F6 | 	mov	ptra, fp
23188     B2 00 A0 FD | 	call	#popregs_
2318c                 | _fatfs_cc_find_volume_ret
2318c     2D 00 64 FD | 	ret
23190                 | 
23190                 | _fatfs_cc_mount_volume
23190     0B 4A 05 F6 | 	mov	COUNT_, #11
23194     A8 00 A0 FD | 	call	#pushregs_
23198     0A 1F 02 F6 | 	mov	local01, arg02
2319c     0B 21 02 F6 | 	mov	local02, arg03
231a0     0F 01 68 FC | 	wrlong	#0, local01
231a4     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
231a8     FD 22 02 F6 | 	mov	local03, result1
231ac     00 22 56 F2 | 	cmps	local03, #0 wc
231b0     0B FA 05 C6 |  if_b	mov	result1, #11
231b4     3C 05 90 CD |  if_b	jmp	#LR__3710
231b8     11 17 02 F6 | 	mov	arg03, local03
231bc     02 16 66 F0 | 	shl	arg03, #2
231c0     F2 16 02 F1 | 	add	arg03, objptr
231c4     0B 25 0A FB | 	rdlong	local04, arg03 wz
231c8     0C FA 05 A6 |  if_e	mov	result1, #12
231cc     24 05 90 AD |  if_e	jmp	#LR__3710
231d0     0F 25 62 FC | 	wrlong	local04, local01
231d4     10 21 E2 F8 | 	getbyte	local02, local02, #0
231d8     FE 20 06 F5 | 	and	local02, #254
231dc     12 17 CA FA | 	rdbyte	arg03, local04 wz
231e0     4C 00 90 AD |  if_e	jmp	#LR__3701
231e4     01 24 06 F1 | 	add	local04, #1
231e8     12 13 CA FA | 	rdbyte	arg01, local04 wz
231ec     01 24 86 F1 | 	sub	local04, #1
231f0     01 FA 05 56 |  if_ne	mov	result1, #1
231f4                 | ' 
231f4                 | ' 	return Stat;
231f4     01 00 00 AF 
231f8     20 E4 05 A1 |  if_e	add	objptr, ##544
231fc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23200     01 00 00 AF 
23204     20 E4 85 A1 |  if_e	sub	objptr, ##544
23208     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2320c     01 16 CE F7 | 	test	arg03, #1 wz
23210     1C 00 90 5D |  if_ne	jmp	#LR__3700
23214     00 20 0E F2 | 	cmp	local02, #0 wz
23218     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2321c     04 FA CD 57 |  if_ne	test	result1, #4 wz
23220                 | ' 				return FR_WRITE_PROTECTED;
23220     0A FA 05 56 |  if_ne	mov	result1, #10
23224     CC 04 90 5D |  if_ne	jmp	#LR__3710
23228                 | ' 			}
23228                 | ' 			return FR_OK;
23228     00 FA 05 F6 | 	mov	result1, #0
2322c     C4 04 90 FD | 	jmp	#LR__3710
23230                 | LR__3700
23230                 | LR__3701
23230     12 01 48 FC | 	wrbyte	#0, local04
23234     01 24 06 F1 | 	add	local04, #1
23238     12 23 42 FC | 	wrbyte	local03, local04
2323c     12 13 C2 FA | 	rdbyte	arg01, local04
23240     01 24 86 F1 | 	sub	local04, #1
23244     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
23248     FD 16 02 F6 | 	mov	arg03, result1
2324c     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
23250     01 26 CE F7 | 	test	local05, #1 wz
23254                 | ' 		return FR_NOT_READY;
23254     03 FA 05 56 |  if_ne	mov	result1, #3
23258     98 04 90 5D |  if_ne	jmp	#LR__3710
2325c     00 20 0E F2 | 	cmp	local02, #0 wz
23260     0B 27 02 56 |  if_ne	mov	local05, arg03
23264     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
23268     04 26 CE 57 |  if_ne	test	local05, #4 wz
2326c                 | ' 		return FR_WRITE_PROTECTED;
2326c     0A FA 05 56 |  if_ne	mov	result1, #10
23270     80 04 90 5D |  if_ne	jmp	#LR__3710
23274     12 13 02 F6 | 	mov	arg01, local04
23278     00 14 06 F6 | 	mov	arg02, #0
2327c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
23280     FD 12 02 F6 | 	mov	arg01, result1
23284     04 12 0E F2 | 	cmp	arg01, #4 wz
23288     01 FA 05 A6 |  if_e	mov	result1, #1
2328c     64 04 90 AD |  if_e	jmp	#LR__3710
23290     02 12 16 F2 | 	cmp	arg01, #2 wc
23294     0D FA 05 36 |  if_ae	mov	result1, #13
23298     58 04 90 3D |  if_ae	jmp	#LR__3710
2329c     30 24 06 F1 | 	add	local04, #48
232a0     12 29 02 FB | 	rdlong	local06, local04
232a4     04 24 06 F1 | 	add	local04, #4
232a8     12 13 02 F6 | 	mov	arg01, local04
232ac     34 24 86 F1 | 	sub	local04, #52
232b0     0B 12 06 F1 | 	add	arg01, #11
232b4                 | ' {
232b4                 | ' 
232b4                 | ' 	return *((WORD*)ptr);
232b4     09 FB E1 FA | 	rdword	result1, arg01
232b8     01 00 00 FF 
232bc     00 FA 0D F2 | 	cmp	result1, ##512 wz
232c0     0D FA 05 56 |  if_ne	mov	result1, #13
232c4     2C 04 90 5D |  if_ne	jmp	#LR__3710
232c8     34 24 06 F1 | 	add	local04, #52
232cc     12 13 02 F6 | 	mov	arg01, local04
232d0     34 24 86 F1 | 	sub	local04, #52
232d4     16 12 06 F1 | 	add	arg01, #22
232d8                 | ' {
232d8                 | ' 
232d8                 | ' 	return *((WORD*)ptr);
232d8     09 FB E1 FA | 	rdword	result1, arg01
232dc     FD 2A 0A F6 | 	mov	local07, result1 wz
232e0     18 00 90 5D |  if_ne	jmp	#LR__3702
232e4     34 24 06 F1 | 	add	local04, #52
232e8     12 13 02 F6 | 	mov	arg01, local04
232ec     34 24 86 F1 | 	sub	local04, #52
232f0     24 12 06 F1 | 	add	arg01, #36
232f4                 | ' {
232f4                 | ' 
232f4                 | ' 	return *((DWORD*)ptr);
232f4     09 FB 01 FB | 	rdlong	result1, arg01
232f8     FD 2A 02 F6 | 	mov	local07, result1
232fc                 | LR__3702
232fc     1C 24 06 F1 | 	add	local04, #28
23300     12 2B 62 FC | 	wrlong	local07, local04
23304     28 24 06 F1 | 	add	local04, #40
23308     12 27 C2 FA | 	rdbyte	local05, local04
2330c     42 24 86 F1 | 	sub	local04, #66
23310     12 27 42 FC | 	wrbyte	local05, local04
23314     12 27 C2 FA | 	rdbyte	local05, local04
23318     02 24 86 F1 | 	sub	local04, #2
2331c     01 26 0E F2 | 	cmp	local05, #1 wz
23320     02 24 06 51 |  if_ne	add	local04, #2
23324     12 27 C2 5A |  if_ne	rdbyte	local05, local04
23328     02 24 86 51 |  if_ne	sub	local04, #2
2332c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
23330     0D FA 05 56 |  if_ne	mov	result1, #13
23334     BC 03 90 5D |  if_ne	jmp	#LR__3710
23338     02 24 06 F1 | 	add	local04, #2
2333c     12 27 C2 FA | 	rdbyte	local05, local04
23340     13 2B 02 FD | 	qmul	local07, local05
23344     3F 24 06 F1 | 	add	local04, #63
23348     12 27 C2 FA | 	rdbyte	local05, local04
2334c     37 24 86 F1 | 	sub	local04, #55
23350     12 27 52 FC | 	wrword	local05, local04
23354     12 27 EA FA | 	rdword	local05, local04 wz
23358     0A 24 86 F1 | 	sub	local04, #10
2335c     18 2A 62 FD | 	getqx	local07
23360     20 00 90 AD |  if_e	jmp	#LR__3703
23364     0A 24 06 F1 | 	add	local04, #10
23368     12 27 E2 FA | 	rdword	local05, local04
2336c     13 23 32 F9 | 	getword	local03, local05, #0
23370     0A 24 86 F1 | 	sub	local04, #10
23374     13 27 32 F9 | 	getword	local05, local05, #0
23378     01 26 86 F1 | 	sub	local05, #1
2337c     13 23 CA F7 | 	test	local03, local05 wz
23380     08 00 90 AD |  if_e	jmp	#LR__3704
23384                 | LR__3703
23384     0D FA 05 F6 | 	mov	result1, #13
23388     68 03 90 FD | 	jmp	#LR__3710
2338c                 | LR__3704
2338c     34 24 06 F1 | 	add	local04, #52
23390     12 13 02 F6 | 	mov	arg01, local04
23394     11 12 06 F1 | 	add	arg01, #17
23398                 | ' {
23398                 | ' 
23398                 | ' 	return *((WORD*)ptr);
23398     09 FB E1 FA | 	rdword	result1, arg01
2339c     2C 24 86 F1 | 	sub	local04, #44
233a0     12 FB 51 FC | 	wrword	result1, local04
233a4     12 27 E2 FA | 	rdword	local05, local04
233a8     08 24 86 F1 | 	sub	local04, #8
233ac     13 13 52 F6 | 	abs	arg01, local05 wc
233b0     09 13 42 F8 | 	getnib	arg01, arg01, #0
233b4     09 13 8A F6 | 	negc	arg01, arg01 wz
233b8     0D FA 05 56 |  if_ne	mov	result1, #13
233bc     34 03 90 5D |  if_ne	jmp	#LR__3710
233c0     34 24 06 F1 | 	add	local04, #52
233c4     12 13 02 F6 | 	mov	arg01, local04
233c8     34 24 86 F1 | 	sub	local04, #52
233cc     13 12 06 F1 | 	add	arg01, #19
233d0                 | ' {
233d0                 | ' 
233d0                 | ' 	return *((WORD*)ptr);
233d0     09 FB E1 FA | 	rdword	result1, arg01
233d4     FD 2C 0A F6 | 	mov	local08, result1 wz
233d8     34 24 06 A1 |  if_e	add	local04, #52
233dc     12 13 02 A6 |  if_e	mov	arg01, local04
233e0     34 24 86 A1 |  if_e	sub	local04, #52
233e4     20 12 06 A1 |  if_e	add	arg01, #32
233e8                 | ' {
233e8                 | ' 
233e8                 | ' 	return *((DWORD*)ptr);
233e8     09 2D 02 AB |  if_e	rdlong	local08, arg01
233ec     34 24 06 F1 | 	add	local04, #52
233f0     12 13 02 F6 | 	mov	arg01, local04
233f4     34 24 86 F1 | 	sub	local04, #52
233f8     0E 12 06 F1 | 	add	arg01, #14
233fc                 | ' {
233fc                 | ' 
233fc                 | ' 	return *((WORD*)ptr);
233fc     09 FB E1 FA | 	rdword	result1, arg01
23400     FD 12 02 F6 | 	mov	arg01, result1
23404     09 27 02 F6 | 	mov	local05, arg01
23408     0F 26 4E F7 | 	zerox	local05, #15 wz
2340c     0D FA 05 A6 |  if_e	mov	result1, #13
23410     E0 02 90 AD |  if_e	jmp	#LR__3710
23414     09 2F 32 F9 | 	getword	local09, arg01, #0
23418     15 2F 02 F1 | 	add	local09, local07
2341c     08 24 06 F1 | 	add	local04, #8
23420     12 27 E2 FA | 	rdword	local05, local04
23424     08 24 86 F1 | 	sub	local04, #8
23428     13 27 52 F6 | 	abs	local05, local05 wc
2342c     04 26 46 F0 | 	shr	local05, #4
23430     13 2F 82 F3 | 	sumc	local09, local05
23434     17 2D 12 F2 | 	cmp	local08, local09 wc
23438     0D FA 05 C6 |  if_b	mov	result1, #13
2343c     B4 02 90 CD |  if_b	jmp	#LR__3710
23440     17 2D 82 F1 | 	sub	local08, local09
23444     0A 24 06 F1 | 	add	local04, #10
23448     12 27 E2 FA | 	rdword	local05, local04
2344c     13 2D 12 FD | 	qdiv	local08, local05
23450     0A 24 86 F1 | 	sub	local04, #10
23454     18 26 62 FD | 	getqx	local05
23458     00 26 0E F2 | 	cmp	local05, #0 wz
2345c     0D FA 05 A6 |  if_e	mov	result1, #13
23460     90 02 90 AD |  if_e	jmp	#LR__3710
23464     00 30 06 F6 | 	mov	local10, #0
23468     FF FF 07 FF 
2346c     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
23470     03 30 06 C6 |  if_b	mov	local10, #3
23474     7F 00 00 FF 
23478     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2347c     02 30 06 C6 |  if_b	mov	local10, #2
23480     07 00 00 FF 
23484     F6 27 16 F2 | 	cmp	local05, ##4086 wc
23488     01 30 06 C6 |  if_b	mov	local10, #1
2348c     00 30 0E F2 | 	cmp	local10, #0 wz
23490     0D FA 05 A6 |  if_e	mov	result1, #13
23494     5C 02 90 AD |  if_e	jmp	#LR__3710
23498     02 26 06 F1 | 	add	local05, #2
2349c     18 24 06 F1 | 	add	local04, #24
234a0     12 27 62 FC | 	wrlong	local05, local04
234a4     08 24 06 F1 | 	add	local04, #8
234a8     12 29 62 FC | 	wrlong	local06, local04
234ac     14 27 02 F6 | 	mov	local05, local06
234b0     09 13 32 F9 | 	getword	arg01, arg01, #0
234b4     09 27 02 F1 | 	add	local05, arg01
234b8     04 24 06 F1 | 	add	local04, #4
234bc     12 27 62 FC | 	wrlong	local05, local04
234c0     14 27 02 F6 | 	mov	local05, local06
234c4     17 27 02 F1 | 	add	local05, local09
234c8     08 24 06 F1 | 	add	local04, #8
234cc     12 27 62 FC | 	wrlong	local05, local04
234d0     2C 24 86 F1 | 	sub	local04, #44
234d4     03 30 0E F2 | 	cmp	local10, #3 wz
234d8     5C 00 90 5D |  if_ne	jmp	#LR__3705
234dc     34 24 06 F1 | 	add	local04, #52
234e0     12 13 02 F6 | 	mov	arg01, local04
234e4     34 24 86 F1 | 	sub	local04, #52
234e8     2A 12 06 F1 | 	add	arg01, #42
234ec                 | ' {
234ec                 | ' 
234ec                 | ' 	return *((WORD*)ptr);
234ec     09 FB E9 FA | 	rdword	result1, arg01 wz
234f0     0D FA 05 56 |  if_ne	mov	result1, #13
234f4     FC 01 90 5D |  if_ne	jmp	#LR__3710
234f8     08 24 06 F1 | 	add	local04, #8
234fc     12 27 EA FA | 	rdword	local05, local04 wz
23500     08 24 86 F1 | 	sub	local04, #8
23504     0D FA 05 56 |  if_ne	mov	result1, #13
23508     E8 01 90 5D |  if_ne	jmp	#LR__3710
2350c     34 24 06 F1 | 	add	local04, #52
23510     12 13 02 F6 | 	mov	arg01, local04
23514     2C 12 06 F1 | 	add	arg01, #44
23518                 | ' {
23518                 | ' 
23518                 | ' 	return *((DWORD*)ptr);
23518     09 FB 01 FB | 	rdlong	result1, arg01
2351c     0C 24 86 F1 | 	sub	local04, #12
23520     12 FB 61 FC | 	wrlong	result1, local04
23524     10 24 86 F1 | 	sub	local04, #16
23528     12 33 02 FB | 	rdlong	local11, local04
2352c     18 24 86 F1 | 	sub	local04, #24
23530     02 32 66 F0 | 	shl	local11, #2
23534     6C 00 90 FD | 	jmp	#LR__3707
23538                 | LR__3705
23538     08 24 06 F1 | 	add	local04, #8
2353c     12 27 EA FA | 	rdword	local05, local04 wz
23540     08 24 86 F1 | 	sub	local04, #8
23544     0D FA 05 A6 |  if_e	mov	result1, #13
23548     A8 01 90 AD |  if_e	jmp	#LR__3710
2354c     24 24 06 F1 | 	add	local04, #36
23550     12 27 02 FB | 	rdlong	local05, local04
23554     15 27 02 F1 | 	add	local05, local07
23558     04 24 06 F1 | 	add	local04, #4
2355c     12 27 62 FC | 	wrlong	local05, local04
23560     28 24 86 F1 | 	sub	local04, #40
23564     02 30 0E F2 | 	cmp	local10, #2 wz
23568     18 24 06 A1 |  if_e	add	local04, #24
2356c     12 27 02 AB |  if_e	rdlong	local05, local04
23570     18 24 86 A1 |  if_e	sub	local04, #24
23574     01 26 66 A0 |  if_e	shl	local05, #1
23578     24 00 90 AD |  if_e	jmp	#LR__3706
2357c     18 24 06 F1 | 	add	local04, #24
23580     12 33 02 FB | 	rdlong	local11, local04
23584     19 27 02 F6 | 	mov	local05, local11
23588     01 26 66 F0 | 	shl	local05, #1
2358c     19 27 02 F1 | 	add	local05, local11
23590     01 26 46 F0 | 	shr	local05, #1
23594     18 24 86 F1 | 	sub	local04, #24
23598     01 32 06 F5 | 	and	local11, #1
2359c     19 27 02 F1 | 	add	local05, local11
235a0                 | LR__3706
235a0     13 33 02 F6 | 	mov	local11, local05
235a4                 | LR__3707
235a4     FF 33 06 F1 | 	add	local11, #511
235a8     09 32 46 F0 | 	shr	local11, #9
235ac     1C 24 06 F1 | 	add	local04, #28
235b0     12 17 02 FB | 	rdlong	arg03, local04
235b4     1C 24 86 F1 | 	sub	local04, #28
235b8     19 17 12 F2 | 	cmp	arg03, local11 wc
235bc     0D FA 05 C6 |  if_b	mov	result1, #13
235c0     30 01 90 CD |  if_b	jmp	#LR__3710
235c4     14 24 06 F1 | 	add	local04, #20
235c8     FF FF FF FF 
235cc     12 FF 6B FC | 	wrlong	##-1, local04
235d0     04 24 86 F1 | 	sub	local04, #4
235d4     FF FF FF FF 
235d8     12 FF 6B FC | 	wrlong	##-1, local04
235dc     0C 24 86 F1 | 	sub	local04, #12
235e0     12 01 49 FC | 	wrbyte	#128, local04
235e4     04 24 86 F1 | 	sub	local04, #4
235e8     03 30 0E F2 | 	cmp	local10, #3 wz
235ec     D0 00 90 5D |  if_ne	jmp	#LR__3709
235f0     34 24 06 F1 | 	add	local04, #52
235f4     12 13 02 F6 | 	mov	arg01, local04
235f8     34 24 86 F1 | 	sub	local04, #52
235fc     30 12 06 F1 | 	add	arg01, #48
23600                 | ' {
23600                 | ' 
23600                 | ' 	return *((WORD*)ptr);
23600     09 FB E1 FA | 	rdword	result1, arg01
23604     FD 26 32 F9 | 	getword	local05, result1, #0
23608     01 26 0E F2 | 	cmp	local05, #1 wz
2360c     B0 00 90 5D |  if_ne	jmp	#LR__3709
23610     01 28 06 F1 | 	add	local06, #1
23614     12 13 02 F6 | 	mov	arg01, local04
23618     14 15 02 F6 | 	mov	arg02, local06
2361c     CC CD BF FD | 	call	#_fatfs_cc_move_window
23620     00 FA 0D F2 | 	cmp	result1, #0 wz
23624     98 00 90 5D |  if_ne	jmp	#LR__3709
23628     04 24 06 F1 | 	add	local04, #4
2362c     12 01 48 FC | 	wrbyte	#0, local04
23630     30 24 06 F1 | 	add	local04, #48
23634     12 13 02 F6 | 	mov	arg01, local04
23638     34 24 86 F1 | 	sub	local04, #52
2363c     FE 13 06 F1 | 	add	arg01, #510
23640                 | ' {
23640                 | ' 
23640                 | ' 	return *((WORD*)ptr);
23640     09 FB E1 FA | 	rdword	result1, arg01
23644     FD 26 32 F9 | 	getword	local05, result1, #0
23648     55 00 00 FF 
2364c     55 26 0E F2 | 	cmp	local05, ##43605 wz
23650     34 24 06 A1 |  if_e	add	local04, #52
23654     12 13 02 A6 |  if_e	mov	arg01, local04
23658     34 24 86 A1 |  if_e	sub	local04, #52
2365c                 | ' {
2365c                 | ' 
2365c                 | ' 	return *((DWORD*)ptr);
2365c     09 FB 01 AB |  if_e	rdlong	result1, arg01
23660     A9 B0 20 AF 
23664     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
23668     54 00 90 5D |  if_ne	jmp	#LR__3708
2366c     34 24 06 F1 | 	add	local04, #52
23670     12 13 02 F6 | 	mov	arg01, local04
23674     34 24 86 F1 | 	sub	local04, #52
23678     E4 13 06 F1 | 	add	arg01, #484
2367c                 | ' {
2367c                 | ' 
2367c                 | ' 	return *((DWORD*)ptr);
2367c     09 FB 01 FB | 	rdlong	result1, arg01
23680     B9 A0 30 FF 
23684     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
23688     34 00 90 5D |  if_ne	jmp	#LR__3708
2368c     34 24 06 F1 | 	add	local04, #52
23690     12 13 02 F6 | 	mov	arg01, local04
23694     E8 13 06 F1 | 	add	arg01, #488
23698                 | ' {
23698                 | ' 
23698                 | ' 	return *((DWORD*)ptr);
23698     09 FB 01 FB | 	rdlong	result1, arg01
2369c     20 24 86 F1 | 	sub	local04, #32
236a0     12 FB 61 FC | 	wrlong	result1, local04
236a4     20 24 06 F1 | 	add	local04, #32
236a8     12 13 02 F6 | 	mov	arg01, local04
236ac     EC 13 06 F1 | 	add	arg01, #492
236b0                 | ' {
236b0                 | ' 
236b0                 | ' 	return *((DWORD*)ptr);
236b0     09 FB 01 FB | 	rdlong	result1, arg01
236b4     24 24 86 F1 | 	sub	local04, #36
236b8     12 FB 61 FC | 	wrlong	result1, local04
236bc     10 24 86 F1 | 	sub	local04, #16
236c0                 | LR__3708
236c0                 | LR__3709
236c0     12 31 42 FC | 	wrbyte	local10, local04
236c4     04 E4 05 F1 | 	add	objptr, #4
236c8     F2 26 E2 FA | 	rdword	local05, objptr
236cc     01 26 06 F1 | 	add	local05, #1
236d0     F2 26 52 FC | 	wrword	local05, objptr
236d4     F2 32 E2 FA | 	rdword	local11, objptr
236d8     06 24 06 F1 | 	add	local04, #6
236dc     12 33 52 FC | 	wrword	local11, local04
236e0     04 E4 05 F1 | 	add	objptr, #4
236e4     06 24 06 F1 | 	add	local04, #6
236e8     12 E5 61 FC | 	wrlong	objptr, local04
236ec                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
236ec                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
236ec                 | ' 			{
236ec                 | ' 
236ec                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
236ec                 | ' 
236ec                 | ' 
236ec                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
236ec                 | ' 
236ec                 | ' 			}
236ec                 | ' 		}
236ec                 | ' 
236ec                 | ' 
236ec                 | ' 	}
236ec                 | ' 
236ec                 | ' 	fs->fs_type = (BYTE)fmt;
236ec                 | ' 	fs->id = ++Fsid;
236ec                 | ' 
236ec                 | ' 	fs->lfnbuf = LfnBuf;
236ec                 | ' #line 3567 "ff.c"
236ec                 | ' 	return FR_OK;
236ec     00 FA 05 F6 | 	mov	result1, #0
236f0     08 E4 85 F1 | 	sub	objptr, #8
236f4                 | LR__3710
236f4     A7 F0 03 F6 | 	mov	ptra, fp
236f8     B2 00 A0 FD | 	call	#popregs_
236fc                 | _fatfs_cc_mount_volume_ret
236fc     2D 00 64 FD | 	ret
23700                 | 
23700                 | _fatfs_cc_validate
23700     09 01 0A F6 | 	mov	_var01, arg01 wz
23704     09 02 06 F6 | 	mov	_var02, #9
23708     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2370c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
23710     50 00 90 AD |  if_e	jmp	#LR__3720
23714     04 00 06 F1 | 	add	_var01, #4
23718     00 07 E2 FA | 	rdword	_var04, _var01
2371c     04 00 86 F1 | 	sub	_var01, #4
23720     00 13 02 FB | 	rdlong	arg01, _var01
23724     06 12 06 F1 | 	add	arg01, #6
23728     09 FB E1 FA | 	rdword	result1, arg01
2372c     FD 06 0A F2 | 	cmp	_var04, result1 wz
23730     30 00 90 5D |  if_ne	jmp	#LR__3720
23734     00 07 02 FB | 	rdlong	_var04, _var01
23738     01 06 06 F1 | 	add	_var04, #1
2373c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
23740     01 FA 05 56 |  if_ne	mov	result1, #1
23744                 | ' 
23744                 | ' 	return Stat;
23744     01 00 00 AF 
23748     20 E4 05 A1 |  if_e	add	objptr, ##544
2374c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23750     01 00 00 AF 
23754     20 E4 85 A1 |  if_e	sub	objptr, ##544
23758     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2375c     01 04 CE F7 | 	test	_var03, #1 wz
23760     00 02 06 A6 |  if_e	mov	_var02, #0
23764                 | LR__3720
23764     00 02 0E F2 | 	cmp	_var02, #0 wz
23768     00 05 02 AB |  if_e	rdlong	_var03, _var01
2376c     00 04 06 56 |  if_ne	mov	_var03, #0
23770     0A 05 62 FC | 	wrlong	_var03, arg02
23774                 | ' 			res = FR_OK;
23774                 | ' 		}
23774                 | ' 
23774                 | ' 	}
23774                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
23774                 | ' 	return res;
23774     01 FB 01 F6 | 	mov	result1, _var02
23778                 | _fatfs_cc_validate_ret
23778     2D 00 64 FD | 	ret
2377c                 | 
2377c                 | _fatfs_cc_f_mount
2377c     01 4A 05 F6 | 	mov	COUNT_, #1
23780     A8 00 A0 FD | 	call	#pushregs_
23784     20 F0 07 F1 | 	add	ptra, #32
23788     04 4E 05 F1 | 	add	fp, #4
2378c     A7 12 62 FC | 	wrlong	arg01, fp
23790     04 4E 05 F1 | 	add	fp, #4
23794     A7 14 62 FC | 	wrlong	arg02, fp
23798     04 4E 05 F1 | 	add	fp, #4
2379c     A7 16 42 FC | 	wrbyte	arg03, fp
237a0     04 4E 85 F1 | 	sub	fp, #4
237a4     A7 16 02 FB | 	rdlong	arg03, fp
237a8     14 4E 05 F1 | 	add	fp, #20
237ac     A7 16 62 FC | 	wrlong	arg03, fp
237b0     A7 12 02 F6 | 	mov	arg01, fp
237b4     1C 4E 85 F1 | 	sub	fp, #28
237b8     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
237bc     14 4E 05 F1 | 	add	fp, #20
237c0     A7 FA 61 FC | 	wrlong	result1, fp
237c4     14 4E 85 F1 | 	sub	fp, #20
237c8     00 FA 55 F2 | 	cmps	result1, #0 wc
237cc     0B FA 05 C6 |  if_b	mov	result1, #11
237d0     C0 00 90 CD |  if_b	jmp	#LR__3731
237d4     14 4E 05 F1 | 	add	fp, #20
237d8     A7 16 02 FB | 	rdlong	arg03, fp
237dc     02 16 66 F0 | 	shl	arg03, #2
237e0     F2 16 02 F1 | 	add	arg03, objptr
237e4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
237e8     04 4E 85 F1 | 	sub	fp, #4
237ec     A7 16 62 FC | 	wrlong	arg03, fp
237f0     10 4E 85 F1 | 	sub	fp, #16
237f4     28 00 90 AD |  if_e	jmp	#LR__3730
237f8     10 4E 05 F1 | 	add	fp, #16
237fc     A7 16 02 FB | 	rdlong	arg03, fp
23800     10 4E 85 F1 | 	sub	fp, #16
23804     01 16 06 F1 | 	add	arg03, #1
23808     0B 13 C2 FA | 	rdbyte	arg01, arg03
2380c     20 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
23810     10 4E 05 F1 | 	add	fp, #16
23814     A7 16 02 FB | 	rdlong	arg03, fp
23818     10 4E 85 F1 | 	sub	fp, #16
2381c     0B 01 48 FC | 	wrbyte	#0, arg03
23820                 | LR__3730
23820     04 4E 05 F1 | 	add	fp, #4
23824     A7 1E 0A FB | 	rdlong	local01, fp wz
23828     04 4E 85 F1 | 	sub	fp, #4
2382c     04 4E 05 51 |  if_ne	add	fp, #4
23830     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23834     04 4E 85 51 |  if_ne	sub	fp, #4
23838     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2383c     14 4E 05 F1 | 	add	fp, #20
23840     A7 1E 02 FB | 	rdlong	local01, fp
23844     02 1E 66 F0 | 	shl	local01, #2
23848     F2 1E 02 F1 | 	add	local01, objptr
2384c     10 4E 85 F1 | 	sub	fp, #16
23850     A7 16 02 FB | 	rdlong	arg03, fp
23854     0F 17 62 FC | 	wrlong	arg03, local01
23858     08 4E 05 F1 | 	add	fp, #8
2385c     A7 1E CA FA | 	rdbyte	local01, fp wz
23860     0C 4E 85 F1 | 	sub	fp, #12
23864     00 FA 05 A6 |  if_e	mov	result1, #0
23868     28 00 90 AD |  if_e	jmp	#LR__3731
2386c     08 4E 05 F1 | 	add	fp, #8
23870     A7 12 02 F6 | 	mov	arg01, fp
23874     04 4E 85 F1 | 	sub	fp, #4
23878     A7 14 02 F6 | 	mov	arg02, fp
2387c     04 4E 85 F1 | 	sub	fp, #4
23880     00 16 06 F6 | 	mov	arg03, #0
23884     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
23888     18 4E 05 F1 | 	add	fp, #24
2388c     A7 FA 61 FC | 	wrlong	result1, fp
23890                 | ' 
23890                 | ' 	res = mount_volume(&path, &fs, 0);
23890                 | ' 	return res ;
23890     18 4E 85 F1 | 	sub	fp, #24
23894                 | LR__3731
23894     A7 F0 03 F6 | 	mov	ptra, fp
23898     B2 00 A0 FD | 	call	#popregs_
2389c                 | _fatfs_cc_f_mount_ret
2389c     2D 00 64 FD | 	ret
238a0                 | 
238a0                 | _fatfs_cc_f_open
238a0     02 4A 05 F6 | 	mov	COUNT_, #2
238a4     A8 00 A0 FD | 	call	#pushregs_
238a8     60 F0 07 F1 | 	add	ptra, #96
238ac     04 4E 05 F1 | 	add	fp, #4
238b0     A7 12 62 FC | 	wrlong	arg01, fp
238b4     04 4E 05 F1 | 	add	fp, #4
238b8     A7 14 62 FC | 	wrlong	arg02, fp
238bc     04 4E 05 F1 | 	add	fp, #4
238c0     A7 16 42 FC | 	wrbyte	arg03, fp
238c4     08 4E 85 F1 | 	sub	fp, #8
238c8     A7 18 0A FB | 	rdlong	arg04, fp wz
238cc     04 4E 85 F1 | 	sub	fp, #4
238d0     09 FA 05 A6 |  if_e	mov	result1, #9
238d4     98 06 90 AD |  if_e	jmp	#LR__3757
238d8     0C 4E 05 F1 | 	add	fp, #12
238dc     A7 18 C2 FA | 	rdbyte	arg04, fp
238e0     3F 18 06 F5 | 	and	arg04, #63
238e4     A7 18 42 FC | 	wrbyte	arg04, fp
238e8     04 4E 85 F1 | 	sub	fp, #4
238ec     A7 12 02 F6 | 	mov	arg01, fp
238f0     3C 4E 05 F1 | 	add	fp, #60
238f4     A7 14 02 F6 | 	mov	arg02, fp
238f8     38 4E 85 F1 | 	sub	fp, #56
238fc     A7 16 C2 FA | 	rdbyte	arg03, fp
23900     0C 4E 85 F1 | 	sub	fp, #12
23904     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
23908     10 4E 05 F1 | 	add	fp, #16
2390c     A7 FA 61 FC | 	wrlong	result1, fp
23910     10 4E 85 F1 | 	sub	fp, #16
23914     00 FA 0D F2 | 	cmp	result1, #0 wz
23918     2C 06 90 5D |  if_ne	jmp	#LR__3756
2391c     44 4E 05 F1 | 	add	fp, #68
23920     A7 18 02 FB | 	rdlong	arg04, fp
23924     30 4E 85 F1 | 	sub	fp, #48
23928     A7 18 62 FC | 	wrlong	arg04, fp
2392c     A7 12 02 F6 | 	mov	arg01, fp
23930     0C 4E 85 F1 | 	sub	fp, #12
23934     A7 1E 02 FB | 	rdlong	local01, fp
23938     08 4E 85 F1 | 	sub	fp, #8
2393c     0F 15 02 F6 | 	mov	arg02, local01
23940     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
23944     10 4E 05 F1 | 	add	fp, #16
23948     A7 FA 61 FC | 	wrlong	result1, fp
2394c     10 4E 85 F1 | 	sub	fp, #16
23950     00 FA 0D F2 | 	cmp	result1, #0 wz
23954     1C 00 90 5D |  if_ne	jmp	#LR__3740
23958     3F 4E 05 F1 | 	add	fp, #63
2395c     A7 18 C2 FA | 	rdbyte	arg04, fp
23960     3F 4E 85 F1 | 	sub	fp, #63
23964     80 18 CE F7 | 	test	arg04, #128 wz
23968     10 4E 05 51 |  if_ne	add	fp, #16
2396c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
23970     10 4E 85 51 |  if_ne	sub	fp, #16
23974                 | LR__3740
23974     0C 4E 05 F1 | 	add	fp, #12
23978     A7 18 C2 FA | 	rdbyte	arg04, fp
2397c     0C 4E 85 F1 | 	sub	fp, #12
23980     1C 18 CE F7 | 	test	arg04, #28 wz
23984     F0 01 90 AD |  if_e	jmp	#LR__3745
23988     10 4E 05 F1 | 	add	fp, #16
2398c     A7 1E 0A FB | 	rdlong	local01, fp wz
23990     10 4E 85 F1 | 	sub	fp, #16
23994     48 00 90 AD |  if_e	jmp	#LR__3742
23998     10 4E 05 F1 | 	add	fp, #16
2399c     A7 18 02 FB | 	rdlong	arg04, fp
239a0     10 4E 85 F1 | 	sub	fp, #16
239a4     04 18 0E F2 | 	cmp	arg04, #4 wz
239a8     1C 00 90 5D |  if_ne	jmp	#LR__3741
239ac     14 4E 05 F1 | 	add	fp, #20
239b0     A7 12 02 F6 | 	mov	arg01, fp
239b4     14 4E 85 F1 | 	sub	fp, #20
239b8     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
239bc     10 4E 05 F1 | 	add	fp, #16
239c0     A7 FA 61 FC | 	wrlong	result1, fp
239c4     10 4E 85 F1 | 	sub	fp, #16
239c8                 | LR__3741
239c8     0C 4E 05 F1 | 	add	fp, #12
239cc     A7 1E C2 FA | 	rdbyte	local01, fp
239d0     08 1E 46 F5 | 	or	local01, #8
239d4     A7 1E 42 FC | 	wrbyte	local01, fp
239d8     0C 4E 85 F1 | 	sub	fp, #12
239dc     3C 00 90 FD | 	jmp	#LR__3744
239e0                 | LR__3742
239e0     1A 4E 05 F1 | 	add	fp, #26
239e4     A7 1E C2 FA | 	rdbyte	local01, fp
239e8     1A 4E 85 F1 | 	sub	fp, #26
239ec     11 1E CE F7 | 	test	local01, #17 wz
239f0     10 4E 05 51 |  if_ne	add	fp, #16
239f4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
239f8     10 4E 85 51 |  if_ne	sub	fp, #16
239fc     1C 00 90 5D |  if_ne	jmp	#LR__3743
23a00     0C 4E 05 F1 | 	add	fp, #12
23a04     A7 1E C2 FA | 	rdbyte	local01, fp
23a08     0C 4E 85 F1 | 	sub	fp, #12
23a0c     04 1E CE F7 | 	test	local01, #4 wz
23a10     10 4E 05 51 |  if_ne	add	fp, #16
23a14     A7 10 68 5C |  if_ne	wrlong	#8, fp
23a18     10 4E 85 51 |  if_ne	sub	fp, #16
23a1c                 | LR__3743
23a1c                 | LR__3744
23a1c     10 4E 05 F1 | 	add	fp, #16
23a20     A7 1E 0A FB | 	rdlong	local01, fp wz
23a24     10 4E 85 F1 | 	sub	fp, #16
23a28     A8 01 90 5D |  if_ne	jmp	#LR__3748
23a2c     0C 4E 05 F1 | 	add	fp, #12
23a30     A7 1E C2 FA | 	rdbyte	local01, fp
23a34     0C 4E 85 F1 | 	sub	fp, #12
23a38     08 1E CE F7 | 	test	local01, #8 wz
23a3c     94 01 90 AD |  if_e	jmp	#LR__3748
23a40     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
23a44     54 4E 05 F1 | 	add	fp, #84
23a48     A7 FA 61 FC | 	wrlong	result1, fp
23a4c     24 4E 85 F1 | 	sub	fp, #36
23a50     A7 12 02 FB | 	rdlong	arg01, fp
23a54     0E 12 06 F1 | 	add	arg01, #14
23a58     09 FB 61 FC | 	wrlong	result1, arg01
23a5c     A7 12 02 FB | 	rdlong	arg01, fp
23a60     16 12 06 F1 | 	add	arg01, #22
23a64     24 4E 05 F1 | 	add	fp, #36
23a68     A7 14 02 FB | 	rdlong	arg02, fp
23a6c     09 15 62 FC | 	wrlong	arg02, arg01
23a70     10 4E 85 F1 | 	sub	fp, #16
23a74     A7 12 02 FB | 	rdlong	arg01, fp
23a78     14 4E 85 F1 | 	sub	fp, #20
23a7c     A7 14 02 FB | 	rdlong	arg02, fp
23a80     30 4E 85 F1 | 	sub	fp, #48
23a84     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
23a88     48 4E 05 F1 | 	add	fp, #72
23a8c     A7 FA 61 FC | 	wrlong	result1, fp
23a90     18 4E 85 F1 | 	sub	fp, #24
23a94     A7 1E 02 FB | 	rdlong	local01, fp
23a98     0B 1E 06 F1 | 	add	local01, #11
23a9c     0F 41 48 FC | 	wrbyte	#32, local01
23aa0     14 4E 05 F1 | 	add	fp, #20
23aa4     A7 12 02 FB | 	rdlong	arg01, fp
23aa8     14 4E 85 F1 | 	sub	fp, #20
23aac     A7 14 02 FB | 	rdlong	arg02, fp
23ab0     30 4E 85 F1 | 	sub	fp, #48
23ab4     00 16 06 F6 | 	mov	arg03, #0
23ab8     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
23abc     30 4E 05 F1 | 	add	fp, #48
23ac0     A7 12 02 FB | 	rdlong	arg01, fp
23ac4     1C 12 06 F1 | 	add	arg01, #28
23ac8     09 01 68 FC | 	wrlong	#0, arg01
23acc     14 4E 05 F1 | 	add	fp, #20
23ad0     A7 1E 02 FB | 	rdlong	local01, fp
23ad4     03 1E 06 F1 | 	add	local01, #3
23ad8     0F 03 48 FC | 	wrbyte	#1, local01
23adc     04 4E 05 F1 | 	add	fp, #4
23ae0     A7 1E 0A FB | 	rdlong	local01, fp wz
23ae4     48 4E 85 F1 | 	sub	fp, #72
23ae8     E8 00 90 AD |  if_e	jmp	#LR__3748
23aec     44 4E 05 F1 | 	add	fp, #68
23af0     A7 1E 02 FB | 	rdlong	local01, fp
23af4     30 1E 06 F1 | 	add	local01, #48
23af8     0F 1F 02 FB | 	rdlong	local01, local01
23afc     14 4E 05 F1 | 	add	fp, #20
23b00     A7 1E 62 FC | 	wrlong	local01, fp
23b04     44 4E 85 F1 | 	sub	fp, #68
23b08     A7 12 02 F6 | 	mov	arg01, fp
23b0c     34 4E 05 F1 | 	add	fp, #52
23b10     A7 14 02 FB | 	rdlong	arg02, fp
23b14     48 4E 85 F1 | 	sub	fp, #72
23b18     00 16 06 F6 | 	mov	arg03, #0
23b1c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
23b20     10 4E 05 F1 | 	add	fp, #16
23b24     A7 FA 61 FC | 	wrlong	result1, fp
23b28     10 4E 85 F1 | 	sub	fp, #16
23b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
23b30     A0 00 90 5D |  if_ne	jmp	#LR__3748
23b34     44 4E 05 F1 | 	add	fp, #68
23b38     A7 12 02 FB | 	rdlong	arg01, fp
23b3c     14 4E 05 F1 | 	add	fp, #20
23b40     A7 14 02 FB | 	rdlong	arg02, fp
23b44     58 4E 85 F1 | 	sub	fp, #88
23b48     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
23b4c     10 4E 05 F1 | 	add	fp, #16
23b50     A7 FA 61 FC | 	wrlong	result1, fp
23b54     34 4E 05 F1 | 	add	fp, #52
23b58     A7 18 02 FB | 	rdlong	arg04, fp
23b5c     04 4E 05 F1 | 	add	fp, #4
23b60     A7 1E 02 FB | 	rdlong	local01, fp
23b64     48 4E 85 F1 | 	sub	fp, #72
23b68     01 1E 86 F1 | 	sub	local01, #1
23b6c     10 18 06 F1 | 	add	arg04, #16
23b70     0C 1F 62 FC | 	wrlong	local01, arg04
23b74     5C 00 90 FD | 	jmp	#LR__3748
23b78                 | LR__3745
23b78     10 4E 05 F1 | 	add	fp, #16
23b7c     A7 18 0A FB | 	rdlong	arg04, fp wz
23b80     10 4E 85 F1 | 	sub	fp, #16
23b84     4C 00 90 5D |  if_ne	jmp	#LR__3747
23b88     1A 4E 05 F1 | 	add	fp, #26
23b8c     A7 18 C2 FA | 	rdbyte	arg04, fp
23b90     1A 4E 85 F1 | 	sub	fp, #26
23b94     10 18 CE F7 | 	test	arg04, #16 wz
23b98     10 4E 05 51 |  if_ne	add	fp, #16
23b9c     A7 08 68 5C |  if_ne	wrlong	#4, fp
23ba0     10 4E 85 51 |  if_ne	sub	fp, #16
23ba4     2C 00 90 5D |  if_ne	jmp	#LR__3746
23ba8     0C 4E 05 F1 | 	add	fp, #12
23bac     A7 18 C2 FA | 	rdbyte	arg04, fp
23bb0     0C 4E 85 F1 | 	sub	fp, #12
23bb4     02 18 CE F7 | 	test	arg04, #2 wz
23bb8     1A 4E 05 51 |  if_ne	add	fp, #26
23bbc     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
23bc0     1A 4E 85 51 |  if_ne	sub	fp, #26
23bc4     01 1E CE 57 |  if_ne	test	local01, #1 wz
23bc8     10 4E 05 51 |  if_ne	add	fp, #16
23bcc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
23bd0     10 4E 85 51 |  if_ne	sub	fp, #16
23bd4                 | LR__3746
23bd4                 | LR__3747
23bd4                 | LR__3748
23bd4     10 4E 05 F1 | 	add	fp, #16
23bd8     A7 1E 0A FB | 	rdlong	local01, fp wz
23bdc     10 4E 85 F1 | 	sub	fp, #16
23be0     60 00 90 5D |  if_ne	jmp	#LR__3749
23be4     0C 4E 05 F1 | 	add	fp, #12
23be8     A7 20 C2 FA | 	rdbyte	local02, fp
23bec     0C 4E 85 F1 | 	sub	fp, #12
23bf0     08 20 CE F7 | 	test	local02, #8 wz
23bf4     0C 4E 05 51 |  if_ne	add	fp, #12
23bf8     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
23bfc     40 20 46 55 |  if_ne	or	local02, #64
23c00     A7 20 42 5C |  if_ne	wrbyte	local02, fp
23c04     0C 4E 85 51 |  if_ne	sub	fp, #12
23c08     04 4E 05 F1 | 	add	fp, #4
23c0c     A7 20 02 FB | 	rdlong	local02, fp
23c10     40 4E 05 F1 | 	add	fp, #64
23c14     A7 1E 02 FB | 	rdlong	local01, fp
23c18     30 1E 06 F1 | 	add	local01, #48
23c1c     0F 1F 02 FB | 	rdlong	local01, local01
23c20     20 20 06 F1 | 	add	local02, #32
23c24     10 1F 62 FC | 	wrlong	local01, local02
23c28     40 4E 85 F1 | 	sub	fp, #64
23c2c     A7 20 02 FB | 	rdlong	local02, fp
23c30     2C 4E 05 F1 | 	add	fp, #44
23c34     A7 1E 02 FB | 	rdlong	local01, fp
23c38     30 4E 85 F1 | 	sub	fp, #48
23c3c     24 20 06 F1 | 	add	local02, #36
23c40     10 1F 62 FC | 	wrlong	local01, local02
23c44                 | LR__3749
23c44     10 4E 05 F1 | 	add	fp, #16
23c48     A7 20 0A FB | 	rdlong	local02, fp wz
23c4c     10 4E 85 F1 | 	sub	fp, #16
23c50     F4 02 90 5D |  if_ne	jmp	#LR__3755
23c54     04 4E 05 F1 | 	add	fp, #4
23c58     A7 20 02 FB | 	rdlong	local02, fp
23c5c     40 4E 05 F1 | 	add	fp, #64
23c60     A7 12 02 FB | 	rdlong	arg01, fp
23c64     14 4E 85 F1 | 	sub	fp, #20
23c68     A7 14 02 FB | 	rdlong	arg02, fp
23c6c     30 4E 85 F1 | 	sub	fp, #48
23c70     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
23c74     08 20 06 F1 | 	add	local02, #8
23c78     10 FB 61 FC | 	wrlong	result1, local02
23c7c     04 4E 05 F1 | 	add	fp, #4
23c80     A7 20 02 FB | 	rdlong	local02, fp
23c84     2C 4E 05 F1 | 	add	fp, #44
23c88     A7 12 02 FB | 	rdlong	arg01, fp
23c8c     1C 12 06 F1 | 	add	arg01, #28
23c90                 | ' {
23c90                 | ' 
23c90                 | ' 	return *((DWORD*)ptr);
23c90     09 FB 01 FB | 	rdlong	result1, arg01
23c94     0C 20 06 F1 | 	add	local02, #12
23c98     10 FB 61 FC | 	wrlong	result1, local02
23c9c     2C 4E 85 F1 | 	sub	fp, #44
23ca0     A7 20 02 FB | 	rdlong	local02, fp
23ca4     40 4E 05 F1 | 	add	fp, #64
23ca8     A7 1E 02 FB | 	rdlong	local01, fp
23cac     10 1F 62 FC | 	wrlong	local01, local02
23cb0     40 4E 85 F1 | 	sub	fp, #64
23cb4     A7 20 02 FB | 	rdlong	local02, fp
23cb8     40 4E 05 F1 | 	add	fp, #64
23cbc     A7 1E 02 FB | 	rdlong	local01, fp
23cc0     06 1E 06 F1 | 	add	local01, #6
23cc4     0F 1F E2 FA | 	rdword	local01, local01
23cc8     04 20 06 F1 | 	add	local02, #4
23ccc     10 1F 52 FC | 	wrword	local01, local02
23cd0     40 4E 85 F1 | 	sub	fp, #64
23cd4     A7 20 02 FB | 	rdlong	local02, fp
23cd8     08 4E 05 F1 | 	add	fp, #8
23cdc     A7 1E C2 FA | 	rdbyte	local01, fp
23ce0     10 20 06 F1 | 	add	local02, #16
23ce4     10 1F 42 FC | 	wrbyte	local01, local02
23ce8     08 4E 85 F1 | 	sub	fp, #8
23cec     A7 20 02 FB | 	rdlong	local02, fp
23cf0     11 20 06 F1 | 	add	local02, #17
23cf4     10 01 48 FC | 	wrbyte	#0, local02
23cf8     A7 20 02 FB | 	rdlong	local02, fp
23cfc     1C 20 06 F1 | 	add	local02, #28
23d00     10 01 68 FC | 	wrlong	#0, local02
23d04     A7 20 02 FB | 	rdlong	local02, fp
23d08     14 20 06 F1 | 	add	local02, #20
23d0c     10 01 68 FC | 	wrlong	#0, local02
23d10     A7 12 02 FB | 	rdlong	arg01, fp
23d14     04 4E 85 F1 | 	sub	fp, #4
23d18     28 12 06 F1 | 	add	arg01, #40
23d1c     00 14 06 F6 | 	mov	arg02, #0
23d20     09 16 C6 F9 | 	decod	arg03, #9
23d24     98 00 A0 FD | 	call	#\builtin_bytefill_
23d28     0C 4E 05 F1 | 	add	fp, #12
23d2c     A7 20 C2 FA | 	rdbyte	local02, fp
23d30     0C 4E 85 F1 | 	sub	fp, #12
23d34     20 20 CE F7 | 	test	local02, #32 wz
23d38     0C 02 90 AD |  if_e	jmp	#LR__3754
23d3c     04 4E 05 F1 | 	add	fp, #4
23d40     A7 1E 02 FB | 	rdlong	local01, fp
23d44     04 4E 85 F1 | 	sub	fp, #4
23d48     0C 1E 06 F1 | 	add	local01, #12
23d4c     0F 21 02 FB | 	rdlong	local02, local01
23d50     01 20 16 F2 | 	cmp	local02, #1 wc
23d54     F0 01 90 CD |  if_b	jmp	#LR__3754
23d58     04 4E 05 F1 | 	add	fp, #4
23d5c     A7 1E 02 FB | 	rdlong	local01, fp
23d60     0F 21 02 F6 | 	mov	local02, local01
23d64     0C 1E 06 F1 | 	add	local01, #12
23d68     0F 1F 02 FB | 	rdlong	local01, local01
23d6c     14 20 06 F1 | 	add	local02, #20
23d70     10 1F 62 FC | 	wrlong	local01, local02
23d74     40 4E 05 F1 | 	add	fp, #64
23d78     A7 20 02 FB | 	rdlong	local02, fp
23d7c     0A 20 06 F1 | 	add	local02, #10
23d80     10 21 E2 FA | 	rdword	local02, local02
23d84     09 20 66 F0 | 	shl	local02, #9
23d88     08 4E 05 F1 | 	add	fp, #8
23d8c     A7 20 62 FC | 	wrlong	local02, fp
23d90     48 4E 85 F1 | 	sub	fp, #72
23d94     A7 20 02 FB | 	rdlong	local02, fp
23d98     08 20 06 F1 | 	add	local02, #8
23d9c     10 1F 02 FB | 	rdlong	local01, local02
23da0     4C 4E 05 F1 | 	add	fp, #76
23da4     A7 1E 62 FC | 	wrlong	local01, fp
23da8                 | ' 				fp->fptr = fp->obj.objsize;
23da8                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
23da8                 | ' 				clst = fp->obj.sclust;
23da8                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
23da8     4C 4E 85 F1 | 	sub	fp, #76
23dac     A7 20 02 FB | 	rdlong	local02, fp
23db0     0C 20 06 F1 | 	add	local02, #12
23db4     10 1F 02 FB | 	rdlong	local01, local02
23db8     58 4E 05 F1 | 	add	fp, #88
23dbc     A7 1E 62 FC | 	wrlong	local01, fp
23dc0     5C 4E 85 F1 | 	sub	fp, #92
23dc4                 | LR__3750
23dc4     10 4E 05 F1 | 	add	fp, #16
23dc8     A7 20 0A FB | 	rdlong	local02, fp wz
23dcc     10 4E 85 F1 | 	sub	fp, #16
23dd0     94 00 90 5D |  if_ne	jmp	#LR__3751
23dd4     5C 4E 05 F1 | 	add	fp, #92
23dd8     A7 20 02 FB | 	rdlong	local02, fp
23ddc     10 4E 85 F1 | 	sub	fp, #16
23de0     A7 1E 02 FB | 	rdlong	local01, fp
23de4     4C 4E 85 F1 | 	sub	fp, #76
23de8     0F 21 1A F2 | 	cmp	local02, local01 wcz
23dec     78 00 90 ED |  if_be	jmp	#LR__3751
23df0     04 4E 05 F1 | 	add	fp, #4
23df4     A7 12 02 FB | 	rdlong	arg01, fp
23df8     4C 4E 05 F1 | 	add	fp, #76
23dfc     A7 14 02 FB | 	rdlong	arg02, fp
23e00     50 4E 85 F1 | 	sub	fp, #80
23e04     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
23e08     50 4E 05 F1 | 	add	fp, #80
23e0c     A7 FA 61 FC | 	wrlong	result1, fp
23e10     50 4E 85 F1 | 	sub	fp, #80
23e14     02 FA 15 F2 | 	cmp	result1, #2 wc
23e18     10 4E 05 C1 |  if_b	add	fp, #16
23e1c     A7 04 68 CC |  if_b	wrlong	#2, fp
23e20     10 4E 85 C1 |  if_b	sub	fp, #16
23e24     50 4E 05 F1 | 	add	fp, #80
23e28     A7 20 02 FB | 	rdlong	local02, fp
23e2c     50 4E 85 F1 | 	sub	fp, #80
23e30     FF FF 7F FF 
23e34     FF 21 0E F2 | 	cmp	local02, ##-1 wz
23e38     10 4E 05 A1 |  if_e	add	fp, #16
23e3c     A7 02 68 AC |  if_e	wrlong	#1, fp
23e40     10 4E 85 A1 |  if_e	sub	fp, #16
23e44     5C 4E 05 F1 | 	add	fp, #92
23e48     A7 20 02 FB | 	rdlong	local02, fp
23e4c     10 4E 85 F1 | 	sub	fp, #16
23e50     A7 1E 02 FB | 	rdlong	local01, fp
23e54     0F 21 82 F1 | 	sub	local02, local01
23e58     10 4E 05 F1 | 	add	fp, #16
23e5c     A7 20 62 FC | 	wrlong	local02, fp
23e60     5C 4E 85 F1 | 	sub	fp, #92
23e64     5C FF 9F FD | 	jmp	#LR__3750
23e68                 | LR__3751
23e68     04 4E 05 F1 | 	add	fp, #4
23e6c     A7 20 02 FB | 	rdlong	local02, fp
23e70     4C 4E 05 F1 | 	add	fp, #76
23e74     A7 1E 02 FB | 	rdlong	local01, fp
23e78     18 20 06 F1 | 	add	local02, #24
23e7c     10 1F 62 FC | 	wrlong	local01, local02
23e80     40 4E 85 F1 | 	sub	fp, #64
23e84     A7 20 0A FB | 	rdlong	local02, fp wz
23e88     10 4E 85 F1 | 	sub	fp, #16
23e8c     B8 00 90 5D |  if_ne	jmp	#LR__3753
23e90     5C 4E 05 F1 | 	add	fp, #92
23e94     A7 1E 02 FB | 	rdlong	local01, fp
23e98     5C 4E 85 F1 | 	sub	fp, #92
23e9c     FF 1F CE F7 | 	test	local01, #511 wz
23ea0     A4 00 90 AD |  if_e	jmp	#LR__3753
23ea4     44 4E 05 F1 | 	add	fp, #68
23ea8     A7 12 02 FB | 	rdlong	arg01, fp
23eac     0C 4E 05 F1 | 	add	fp, #12
23eb0     A7 14 02 FB | 	rdlong	arg02, fp
23eb4     50 4E 85 F1 | 	sub	fp, #80
23eb8     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
23ebc     58 4E 05 F1 | 	add	fp, #88
23ec0     A7 FA 61 FC | 	wrlong	result1, fp
23ec4     00 FA 4D F2 | 	cmps	result1, #0 wz
23ec8     58 4E 85 F1 | 	sub	fp, #88
23ecc     10 4E 05 A1 |  if_e	add	fp, #16
23ed0     A7 04 68 AC |  if_e	wrlong	#2, fp
23ed4     10 4E 85 A1 |  if_e	sub	fp, #16
23ed8     6C 00 90 AD |  if_e	jmp	#LR__3752
23edc     04 4E 05 F1 | 	add	fp, #4
23ee0     A7 20 02 FB | 	rdlong	local02, fp
23ee4     54 4E 05 F1 | 	add	fp, #84
23ee8     A7 1E 02 FB | 	rdlong	local01, fp
23eec     04 4E 05 F1 | 	add	fp, #4
23ef0     A7 18 02 FB | 	rdlong	arg04, fp
23ef4     09 18 46 F0 | 	shr	arg04, #9
23ef8     0C 1F 02 F1 | 	add	local01, arg04
23efc     1C 20 06 F1 | 	add	local02, #28
23f00     10 1F 62 FC | 	wrlong	local01, local02
23f04     18 4E 85 F1 | 	sub	fp, #24
23f08     A7 20 02 FB | 	rdlong	local02, fp
23f0c     01 20 06 F1 | 	add	local02, #1
23f10     10 13 C2 FA | 	rdbyte	arg01, local02
23f14     40 4E 85 F1 | 	sub	fp, #64
23f18     A7 20 02 FB | 	rdlong	local02, fp
23f1c     10 15 02 F6 | 	mov	arg02, local02
23f20     28 14 06 F1 | 	add	arg02, #40
23f24     04 4E 85 F1 | 	sub	fp, #4
23f28     1C 20 06 F1 | 	add	local02, #28
23f2c     10 17 02 FB | 	rdlong	arg03, local02
23f30     01 18 06 F6 | 	mov	arg04, #1
23f34     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
23f38     00 FA 0D F2 | 	cmp	result1, #0 wz
23f3c     10 4E 05 51 |  if_ne	add	fp, #16
23f40     A7 02 68 5C |  if_ne	wrlong	#1, fp
23f44     10 4E 85 51 |  if_ne	sub	fp, #16
23f48                 | LR__3752
23f48                 | LR__3753
23f48                 | LR__3754
23f48                 | LR__3755
23f48                 | LR__3756
23f48     10 4E 05 F1 | 	add	fp, #16
23f4c     A7 20 0A FB | 	rdlong	local02, fp wz
23f50     10 4E 85 F1 | 	sub	fp, #16
23f54     04 4E 05 51 |  if_ne	add	fp, #4
23f58     A7 20 02 5B |  if_ne	rdlong	local02, fp
23f5c     04 4E 85 51 |  if_ne	sub	fp, #4
23f60     10 01 68 5C |  if_ne	wrlong	#0, local02
23f64                 | ' 
23f64                 | ' 	return res ;
23f64     10 4E 05 F1 | 	add	fp, #16
23f68     A7 FA 01 FB | 	rdlong	result1, fp
23f6c     10 4E 85 F1 | 	sub	fp, #16
23f70                 | LR__3757
23f70     A7 F0 03 F6 | 	mov	ptra, fp
23f74     B2 00 A0 FD | 	call	#popregs_
23f78                 | _fatfs_cc_f_open_ret
23f78     2D 00 64 FD | 	ret
23f7c                 | 
23f7c                 | _fatfs_cc_f_read
23f7c     0E 4A 05 F6 | 	mov	COUNT_, #14
23f80     A8 00 A0 FD | 	call	#pushregs_
23f84     38 F0 07 F1 | 	add	ptra, #56
23f88     04 4E 05 F1 | 	add	fp, #4
23f8c     A7 12 62 FC | 	wrlong	arg01, fp
23f90     04 4E 05 F1 | 	add	fp, #4
23f94     A7 14 62 FC | 	wrlong	arg02, fp
23f98     04 4E 05 F1 | 	add	fp, #4
23f9c     A7 16 62 FC | 	wrlong	arg03, fp
23fa0     04 4E 05 F1 | 	add	fp, #4
23fa4     A7 18 62 FC | 	wrlong	arg04, fp
23fa8     08 4E 85 F1 | 	sub	fp, #8
23fac     A7 FA 01 FB | 	rdlong	result1, fp
23fb0     2C 4E 05 F1 | 	add	fp, #44
23fb4     A7 FA 61 FC | 	wrlong	result1, fp
23fb8     24 4E 85 F1 | 	sub	fp, #36
23fbc     A7 FA 01 FB | 	rdlong	result1, fp
23fc0     FD 00 68 FC | 	wrlong	#0, result1
23fc4     0C 4E 85 F1 | 	sub	fp, #12
23fc8     A7 12 02 FB | 	rdlong	arg01, fp
23fcc     14 4E 05 F1 | 	add	fp, #20
23fd0     A7 14 02 F6 | 	mov	arg02, fp
23fd4     18 4E 85 F1 | 	sub	fp, #24
23fd8     24 F7 BF FD | 	call	#_fatfs_cc_validate
23fdc     14 4E 05 F1 | 	add	fp, #20
23fe0     A7 FA 61 FC | 	wrlong	result1, fp
23fe4     00 FA 4D F2 | 	cmps	result1, #0 wz
23fe8     14 4E 85 F1 | 	sub	fp, #20
23fec     20 00 90 5D |  if_ne	jmp	#LR__3760
23ff0     04 4E 05 F1 | 	add	fp, #4
23ff4     A7 14 02 FB | 	rdlong	arg02, fp
23ff8     11 14 06 F1 | 	add	arg02, #17
23ffc     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
24000     10 4E 05 F1 | 	add	fp, #16
24004     A7 14 62 FC | 	wrlong	arg02, fp
24008     14 4E 85 F1 | 	sub	fp, #20
2400c     10 00 90 AD |  if_e	jmp	#LR__3761
24010                 | LR__3760
24010     14 4E 05 F1 | 	add	fp, #20
24014     A7 FA 01 FB | 	rdlong	result1, fp
24018     14 4E 85 F1 | 	sub	fp, #20
2401c     EC 05 90 FD | 	jmp	#LR__3780
24020                 | LR__3761
24020     04 4E 05 F1 | 	add	fp, #4
24024     A7 18 02 FB | 	rdlong	arg04, fp
24028     04 4E 85 F1 | 	sub	fp, #4
2402c     10 18 06 F1 | 	add	arg04, #16
24030     0C 19 C2 FA | 	rdbyte	arg04, arg04
24034     01 18 CE F7 | 	test	arg04, #1 wz
24038     07 FA 05 A6 |  if_e	mov	result1, #7
2403c     CC 05 90 AD |  if_e	jmp	#LR__3780
24040     04 4E 05 F1 | 	add	fp, #4
24044     A7 1E 02 FB | 	rdlong	local01, fp
24048     0F 21 02 F6 | 	mov	local02, local01
2404c     0C 20 06 F1 | 	add	local02, #12
24050     10 23 02 FB | 	rdlong	local03, local02
24054     14 1E 06 F1 | 	add	local01, #20
24058     0F 1F 02 FB | 	rdlong	local01, local01
2405c     0F 23 82 F1 | 	sub	local03, local01
24060     20 4E 05 F1 | 	add	fp, #32
24064     A7 22 62 FC | 	wrlong	local03, fp
24068     18 4E 85 F1 | 	sub	fp, #24
2406c     A7 24 02 FB | 	rdlong	local04, fp
24070     0C 4E 85 F1 | 	sub	fp, #12
24074     11 25 1A F2 | 	cmp	local04, local03 wcz
24078     24 4E 05 11 |  if_a	add	fp, #36
2407c     A7 24 02 1B |  if_a	rdlong	local04, fp
24080     18 4E 85 11 |  if_a	sub	fp, #24
24084     A7 24 62 1C |  if_a	wrlong	local04, fp
24088     0C 4E 85 11 |  if_a	sub	fp, #12
2408c                 | ' 
2408c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2408c                 | LR__3762
2408c     0C 4E 05 F1 | 	add	fp, #12
24090     A7 20 02 FB | 	rdlong	local02, fp
24094     0C 4E 85 F1 | 	sub	fp, #12
24098     10 25 02 F6 | 	mov	local04, local02
2409c     01 24 16 F2 | 	cmp	local04, #1 wc
240a0     64 05 90 CD |  if_b	jmp	#LR__3779
240a4     04 4E 05 F1 | 	add	fp, #4
240a8     A7 22 02 FB | 	rdlong	local03, fp
240ac     04 4E 85 F1 | 	sub	fp, #4
240b0     14 22 06 F1 | 	add	local03, #20
240b4     11 23 02 FB | 	rdlong	local03, local03
240b8     FF 23 CE F7 | 	test	local03, #511 wz
240bc     3C 04 90 5D |  if_ne	jmp	#LR__3777
240c0     04 4E 05 F1 | 	add	fp, #4
240c4     A7 1E 02 FB | 	rdlong	local01, fp
240c8     14 1E 06 F1 | 	add	local01, #20
240cc     0F 23 02 FB | 	rdlong	local03, local01
240d0     09 22 46 F0 | 	shr	local03, #9
240d4     14 4E 05 F1 | 	add	fp, #20
240d8     A7 26 02 FB | 	rdlong	local05, fp
240dc     13 29 02 F6 | 	mov	local06, local05
240e0     0A 28 06 F1 | 	add	local06, #10
240e4     14 2B E2 FA | 	rdword	local07, local06
240e8     0A 28 86 F1 | 	sub	local06, #10
240ec     15 2D 32 F9 | 	getword	local08, local07, #0
240f0     01 2C 86 F1 | 	sub	local08, #1
240f4     16 23 0A F5 | 	and	local03, local08 wz
240f8     18 4E 05 F1 | 	add	fp, #24
240fc     A7 22 62 FC | 	wrlong	local03, fp
24100     30 4E 85 F1 | 	sub	fp, #48
24104     E0 00 90 5D |  if_ne	jmp	#LR__3767
24108     04 4E 05 F1 | 	add	fp, #4
2410c     A7 22 02 FB | 	rdlong	local03, fp
24110     04 4E 85 F1 | 	sub	fp, #4
24114     14 22 06 F1 | 	add	local03, #20
24118     11 23 0A FB | 	rdlong	local03, local03 wz
2411c     20 00 90 5D |  if_ne	jmp	#LR__3763
24120     04 4E 05 F1 | 	add	fp, #4
24124     A7 22 02 FB | 	rdlong	local03, fp
24128     08 22 06 F1 | 	add	local03, #8
2412c     11 23 02 FB | 	rdlong	local03, local03
24130     18 4E 05 F1 | 	add	fp, #24
24134     A7 22 62 FC | 	wrlong	local03, fp
24138     1C 4E 85 F1 | 	sub	fp, #28
2413c     28 00 90 FD | 	jmp	#LR__3764
24140                 | LR__3763
24140     04 4E 05 F1 | 	add	fp, #4
24144     A7 2C 02 FB | 	rdlong	local08, fp
24148     16 13 02 F6 | 	mov	arg01, local08
2414c     04 4E 85 F1 | 	sub	fp, #4
24150     18 2C 06 F1 | 	add	local08, #24
24154     16 15 02 FB | 	rdlong	arg02, local08
24158     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2415c     1C 4E 05 F1 | 	add	fp, #28
24160     A7 FA 61 FC | 	wrlong	result1, fp
24164     1C 4E 85 F1 | 	sub	fp, #28
24168                 | LR__3764
24168     1C 4E 05 F1 | 	add	fp, #28
2416c     A7 22 02 FB | 	rdlong	local03, fp
24170     1C 4E 85 F1 | 	sub	fp, #28
24174     02 22 16 F2 | 	cmp	local03, #2 wc
24178     1C 00 90 3D |  if_ae	jmp	#LR__3765
2417c     04 4E 05 F1 | 	add	fp, #4
24180     A7 22 02 FB | 	rdlong	local03, fp
24184     04 4E 85 F1 | 	sub	fp, #4
24188     11 22 06 F1 | 	add	local03, #17
2418c     11 05 48 FC | 	wrbyte	#2, local03
24190     02 FA 05 F6 | 	mov	result1, #2
24194     74 04 90 FD | 	jmp	#LR__3780
24198                 | LR__3765
24198     1C 4E 05 F1 | 	add	fp, #28
2419c     A7 22 02 FB | 	rdlong	local03, fp
241a0     1C 4E 85 F1 | 	sub	fp, #28
241a4     FF FF 7F FF 
241a8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
241ac     1C 00 90 5D |  if_ne	jmp	#LR__3766
241b0     04 4E 05 F1 | 	add	fp, #4
241b4     A7 22 02 FB | 	rdlong	local03, fp
241b8     04 4E 85 F1 | 	sub	fp, #4
241bc     11 22 06 F1 | 	add	local03, #17
241c0     11 03 48 FC | 	wrbyte	#1, local03
241c4     01 FA 05 F6 | 	mov	result1, #1
241c8     40 04 90 FD | 	jmp	#LR__3780
241cc                 | LR__3766
241cc     04 4E 05 F1 | 	add	fp, #4
241d0     A7 22 02 FB | 	rdlong	local03, fp
241d4     18 4E 05 F1 | 	add	fp, #24
241d8     A7 2C 02 FB | 	rdlong	local08, fp
241dc     1C 4E 85 F1 | 	sub	fp, #28
241e0     18 22 06 F1 | 	add	local03, #24
241e4     11 2D 62 FC | 	wrlong	local08, local03
241e8                 | LR__3767
241e8     18 4E 05 F1 | 	add	fp, #24
241ec     A7 12 02 FB | 	rdlong	arg01, fp
241f0     14 4E 85 F1 | 	sub	fp, #20
241f4     A7 22 02 FB | 	rdlong	local03, fp
241f8     04 4E 85 F1 | 	sub	fp, #4
241fc     18 22 06 F1 | 	add	local03, #24
24200     11 15 02 FB | 	rdlong	arg02, local03
24204     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
24208     20 4E 05 F1 | 	add	fp, #32
2420c     A7 FA 61 FC | 	wrlong	result1, fp
24210     20 4E 85 F1 | 	sub	fp, #32
24214     00 FA 0D F2 | 	cmp	result1, #0 wz
24218     1C 00 90 5D |  if_ne	jmp	#LR__3768
2421c     04 4E 05 F1 | 	add	fp, #4
24220     A7 22 02 FB | 	rdlong	local03, fp
24224     04 4E 85 F1 | 	sub	fp, #4
24228     11 22 06 F1 | 	add	local03, #17
2422c     11 05 48 FC | 	wrbyte	#2, local03
24230     02 FA 05 F6 | 	mov	result1, #2
24234     D4 03 90 FD | 	jmp	#LR__3780
24238                 | LR__3768
24238     20 4E 05 F1 | 	add	fp, #32
2423c     A7 22 02 FB | 	rdlong	local03, fp
24240     10 4E 05 F1 | 	add	fp, #16
24244     A7 2C 02 FB | 	rdlong	local08, fp
24248     16 23 02 F1 | 	add	local03, local08
2424c     10 4E 85 F1 | 	sub	fp, #16
24250     A7 22 62 FC | 	wrlong	local03, fp
24254     14 4E 85 F1 | 	sub	fp, #20
24258     A7 22 02 FB | 	rdlong	local03, fp
2425c     09 22 46 F0 | 	shr	local03, #9
24260     20 4E 05 F1 | 	add	fp, #32
24264     A7 22 62 FC | 	wrlong	local03, fp
24268     2C 4E 85 F1 | 	sub	fp, #44
2426c     01 22 16 F2 | 	cmp	local03, #1 wc
24270     5C 01 90 CD |  if_b	jmp	#LR__3772
24274     30 4E 05 F1 | 	add	fp, #48
24278     A7 22 02 FB | 	rdlong	local03, fp
2427c     04 4E 85 F1 | 	sub	fp, #4
24280     A7 2C 02 FB | 	rdlong	local08, fp
24284     16 23 02 F1 | 	add	local03, local08
24288     14 4E 85 F1 | 	sub	fp, #20
2428c     A7 2C 02 FB | 	rdlong	local08, fp
24290     18 4E 85 F1 | 	sub	fp, #24
24294     0A 2C 06 F1 | 	add	local08, #10
24298     16 2D E2 FA | 	rdword	local08, local08
2429c     16 23 1A F2 | 	cmp	local03, local08 wcz
242a0     28 00 90 ED |  if_be	jmp	#LR__3769
242a4     18 4E 05 F1 | 	add	fp, #24
242a8     A7 1E 02 FB | 	rdlong	local01, fp
242ac     0A 1E 06 F1 | 	add	local01, #10
242b0     0F 23 E2 FA | 	rdword	local03, local01
242b4     18 4E 05 F1 | 	add	fp, #24
242b8     A7 2C 02 FB | 	rdlong	local08, fp
242bc     16 23 82 F1 | 	sub	local03, local08
242c0     04 4E 85 F1 | 	sub	fp, #4
242c4     A7 22 62 FC | 	wrlong	local03, fp
242c8     2C 4E 85 F1 | 	sub	fp, #44
242cc                 | LR__3769
242cc     18 4E 05 F1 | 	add	fp, #24
242d0     A7 1E 02 FB | 	rdlong	local01, fp
242d4     01 1E 06 F1 | 	add	local01, #1
242d8     0F 13 C2 FA | 	rdbyte	arg01, local01
242dc     1C 4E 05 F1 | 	add	fp, #28
242e0     A7 14 02 FB | 	rdlong	arg02, fp
242e4     14 4E 85 F1 | 	sub	fp, #20
242e8     A7 16 02 FB | 	rdlong	arg03, fp
242ec     0C 4E 05 F1 | 	add	fp, #12
242f0     A7 18 02 FB | 	rdlong	arg04, fp
242f4     2C 4E 85 F1 | 	sub	fp, #44
242f8     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
242fc     00 FA 0D F2 | 	cmp	result1, #0 wz
24300     1C 00 90 AD |  if_e	jmp	#LR__3770
24304     04 4E 05 F1 | 	add	fp, #4
24308     A7 22 02 FB | 	rdlong	local03, fp
2430c     04 4E 85 F1 | 	sub	fp, #4
24310     11 22 06 F1 | 	add	local03, #17
24314     11 03 48 FC | 	wrbyte	#1, local03
24318     01 FA 05 F6 | 	mov	result1, #1
2431c     EC 02 90 FD | 	jmp	#LR__3780
24320                 | LR__3770
24320     04 4E 05 F1 | 	add	fp, #4
24324     A7 1E 02 FB | 	rdlong	local01, fp
24328     04 4E 85 F1 | 	sub	fp, #4
2432c     10 1E 06 F1 | 	add	local01, #16
24330     0F 23 C2 FA | 	rdbyte	local03, local01
24334     80 22 CE F7 | 	test	local03, #128 wz
24338     78 00 90 AD |  if_e	jmp	#LR__3771
2433c     04 4E 05 F1 | 	add	fp, #4
24340     A7 2C 02 FB | 	rdlong	local08, fp
24344     1C 2C 06 F1 | 	add	local08, #28
24348     16 2D 02 FB | 	rdlong	local08, local08
2434c     1C 4E 05 F1 | 	add	fp, #28
24350     A7 2E 02 FB | 	rdlong	local09, fp
24354     17 2D 82 F1 | 	sub	local08, local09
24358     0C 4E 05 F1 | 	add	fp, #12
2435c     A7 30 02 FB | 	rdlong	local10, fp
24360     2C 4E 85 F1 | 	sub	fp, #44
24364     18 33 02 F6 | 	mov	local11, local10
24368     19 2D 12 F2 | 	cmp	local08, local11 wc
2436c     44 00 90 3D |  if_ae	jmp	#LR__3771
24370     34 4E 05 F1 | 	add	fp, #52
24374     A7 12 02 FB | 	rdlong	arg01, fp
24378     30 4E 85 F1 | 	sub	fp, #48
2437c     A7 14 02 FB | 	rdlong	arg02, fp
24380     0A 33 02 F6 | 	mov	local11, arg02
24384     1C 32 06 F1 | 	add	local11, #28
24388     19 2F 02 FB | 	rdlong	local09, local11
2438c     1C 4E 05 F1 | 	add	fp, #28
24390     A7 26 02 FB | 	rdlong	local05, fp
24394     13 2F 82 F1 | 	sub	local09, local05
24398     09 2E 66 F0 | 	shl	local09, #9
2439c     17 33 02 F6 | 	mov	local11, local09
243a0     17 13 02 F1 | 	add	arg01, local09
243a4     20 4E 85 F1 | 	sub	fp, #32
243a8     28 14 06 F1 | 	add	arg02, #40
243ac     09 16 C6 F9 | 	decod	arg03, #9
243b0     50 49 BF FD | 	call	#__system____builtin_memmove
243b4                 | LR__3771
243b4     2C 4E 05 F1 | 	add	fp, #44
243b8     A7 22 02 FB | 	rdlong	local03, fp
243bc     09 22 66 F0 | 	shl	local03, #9
243c0     04 4E 85 F1 | 	sub	fp, #4
243c4     A7 22 62 FC | 	wrlong	local03, fp
243c8     28 4E 85 F1 | 	sub	fp, #40
243cc                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
243cc                 | ' 				}
243cc                 | ' 
243cc                 | ' 
243cc                 | ' 				rcnt =  ((UINT) 512 )  * cc;
243cc                 | ' 				continue;
243cc     B4 01 90 FD | 	jmp	#LR__3778
243d0                 | LR__3772
243d0     04 4E 05 F1 | 	add	fp, #4
243d4     A7 22 02 FB | 	rdlong	local03, fp
243d8     1C 22 06 F1 | 	add	local03, #28
243dc     11 23 02 FB | 	rdlong	local03, local03
243e0     1C 4E 05 F1 | 	add	fp, #28
243e4     A7 1E 02 FB | 	rdlong	local01, fp
243e8     20 4E 85 F1 | 	sub	fp, #32
243ec     0F 23 0A F2 | 	cmp	local03, local01 wz
243f0     EC 00 90 AD |  if_e	jmp	#LR__3776
243f4     04 4E 05 F1 | 	add	fp, #4
243f8     A7 1E 02 FB | 	rdlong	local01, fp
243fc     04 4E 85 F1 | 	sub	fp, #4
24400     10 1E 06 F1 | 	add	local01, #16
24404     0F 23 C2 FA | 	rdbyte	local03, local01
24408     80 22 CE F7 | 	test	local03, #128 wz
2440c     7C 00 90 AD |  if_e	jmp	#LR__3774
24410     18 4E 05 F1 | 	add	fp, #24
24414     A7 1E 02 FB | 	rdlong	local01, fp
24418     01 1E 06 F1 | 	add	local01, #1
2441c     0F 13 C2 FA | 	rdbyte	arg01, local01
24420     14 4E 85 F1 | 	sub	fp, #20
24424     A7 22 02 FB | 	rdlong	local03, fp
24428     11 15 02 F6 | 	mov	arg02, local03
2442c     28 14 06 F1 | 	add	arg02, #40
24430     04 4E 85 F1 | 	sub	fp, #4
24434     1C 22 06 F1 | 	add	local03, #28
24438     11 17 02 FB | 	rdlong	arg03, local03
2443c     01 18 06 F6 | 	mov	arg04, #1
24440     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
24444     00 FA 0D F2 | 	cmp	result1, #0 wz
24448     1C 00 90 AD |  if_e	jmp	#LR__3773
2444c     04 4E 05 F1 | 	add	fp, #4
24450     A7 22 02 FB | 	rdlong	local03, fp
24454     04 4E 85 F1 | 	sub	fp, #4
24458     11 22 06 F1 | 	add	local03, #17
2445c     11 03 48 FC | 	wrbyte	#1, local03
24460     01 FA 05 F6 | 	mov	result1, #1
24464     A4 01 90 FD | 	jmp	#LR__3780
24468                 | LR__3773
24468     04 4E 05 F1 | 	add	fp, #4
2446c     A7 32 02 FB | 	rdlong	local11, fp
24470     19 23 02 F6 | 	mov	local03, local11
24474     04 4E 85 F1 | 	sub	fp, #4
24478     10 32 06 F1 | 	add	local11, #16
2447c     19 33 C2 FA | 	rdbyte	local11, local11
24480     7F 32 06 F5 | 	and	local11, #127
24484     10 22 06 F1 | 	add	local03, #16
24488     11 33 42 FC | 	wrbyte	local11, local03
2448c                 | LR__3774
2448c     18 4E 05 F1 | 	add	fp, #24
24490     A7 1E 02 FB | 	rdlong	local01, fp
24494     01 1E 06 F1 | 	add	local01, #1
24498     0F 13 C2 FA | 	rdbyte	arg01, local01
2449c     14 4E 85 F1 | 	sub	fp, #20
244a0     A7 14 02 FB | 	rdlong	arg02, fp
244a4     28 14 06 F1 | 	add	arg02, #40
244a8     1C 4E 05 F1 | 	add	fp, #28
244ac     A7 16 02 FB | 	rdlong	arg03, fp
244b0     20 4E 85 F1 | 	sub	fp, #32
244b4     01 18 06 F6 | 	mov	arg04, #1
244b8     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
244bc     00 FA 0D F2 | 	cmp	result1, #0 wz
244c0     1C 00 90 AD |  if_e	jmp	#LR__3775
244c4     04 4E 05 F1 | 	add	fp, #4
244c8     A7 22 02 FB | 	rdlong	local03, fp
244cc     04 4E 85 F1 | 	sub	fp, #4
244d0     11 22 06 F1 | 	add	local03, #17
244d4     11 03 48 FC | 	wrbyte	#1, local03
244d8     01 FA 05 F6 | 	mov	result1, #1
244dc     2C 01 90 FD | 	jmp	#LR__3780
244e0                 | LR__3775
244e0                 | LR__3776
244e0     04 4E 05 F1 | 	add	fp, #4
244e4     A7 22 02 FB | 	rdlong	local03, fp
244e8     1C 4E 05 F1 | 	add	fp, #28
244ec     A7 32 02 FB | 	rdlong	local11, fp
244f0     20 4E 85 F1 | 	sub	fp, #32
244f4     1C 22 06 F1 | 	add	local03, #28
244f8     11 33 62 FC | 	wrlong	local11, local03
244fc                 | LR__3777
244fc     04 4E 05 F1 | 	add	fp, #4
24500     A7 1E 02 FB | 	rdlong	local01, fp
24504     14 1E 06 F1 | 	add	local01, #20
24508     0F 33 02 FB | 	rdlong	local11, local01
2450c     FF 33 06 F5 | 	and	local11, #511
24510     09 22 C6 F9 | 	decod	local03, #9
24514     19 23 82 F1 | 	sub	local03, local11
24518     24 4E 05 F1 | 	add	fp, #36
2451c     A7 22 62 FC | 	wrlong	local03, fp
24520     1C 4E 85 F1 | 	sub	fp, #28
24524     A7 32 02 FB | 	rdlong	local11, fp
24528     0C 4E 85 F1 | 	sub	fp, #12
2452c     19 23 1A F2 | 	cmp	local03, local11 wcz
24530     0C 4E 05 11 |  if_a	add	fp, #12
24534     A7 22 02 1B |  if_a	rdlong	local03, fp
24538     1C 4E 05 11 |  if_a	add	fp, #28
2453c     A7 22 62 1C |  if_a	wrlong	local03, fp
24540     28 4E 85 11 |  if_a	sub	fp, #40
24544     34 4E 05 F1 | 	add	fp, #52
24548     A7 12 02 FB | 	rdlong	arg01, fp
2454c     30 4E 85 F1 | 	sub	fp, #48
24550     A7 28 02 FB | 	rdlong	local06, fp
24554     14 15 02 F6 | 	mov	arg02, local06
24558     28 14 06 F1 | 	add	arg02, #40
2455c     14 28 06 F1 | 	add	local06, #20
24560     14 33 02 FB | 	rdlong	local11, local06
24564     19 2F 02 F6 | 	mov	local09, local11
24568     17 31 02 F6 | 	mov	local10, local09
2456c     FF 31 06 F5 | 	and	local10, #511
24570     18 15 02 F1 | 	add	arg02, local10
24574     24 4E 05 F1 | 	add	fp, #36
24578     A7 16 02 FB | 	rdlong	arg03, fp
2457c     28 4E 85 F1 | 	sub	fp, #40
24580     80 47 BF FD | 	call	#__system____builtin_memmove
24584                 | LR__3778
24584     0C 4E 05 F1 | 	add	fp, #12
24588     A7 22 02 FB | 	rdlong	local03, fp
2458c     1C 4E 05 F1 | 	add	fp, #28
24590     A7 2C 02 FB | 	rdlong	local08, fp
24594     16 23 82 F1 | 	sub	local03, local08
24598     1C 4E 85 F1 | 	sub	fp, #28
2459c     A7 22 62 FC | 	wrlong	local03, fp
245a0     04 4E 05 F1 | 	add	fp, #4
245a4     A7 1E 02 FB | 	rdlong	local01, fp
245a8     0F 2B 02 FB | 	rdlong	local07, local01
245ac     18 4E 05 F1 | 	add	fp, #24
245b0     A7 2C 02 FB | 	rdlong	local08, fp
245b4     16 2B 02 F1 | 	add	local07, local08
245b8     0F 2B 62 FC | 	wrlong	local07, local01
245bc     0C 4E 05 F1 | 	add	fp, #12
245c0     A7 22 02 FB | 	rdlong	local03, fp
245c4     0C 4E 85 F1 | 	sub	fp, #12
245c8     A7 34 02 FB | 	rdlong	local12, fp
245cc     1A 23 02 F1 | 	add	local03, local12
245d0     0C 4E 05 F1 | 	add	fp, #12
245d4     A7 22 62 FC | 	wrlong	local03, fp
245d8     30 4E 85 F1 | 	sub	fp, #48
245dc     A7 36 02 FB | 	rdlong	local13, fp
245e0     1B 23 02 F6 | 	mov	local03, local13
245e4     14 36 06 F1 | 	add	local13, #20
245e8     1B 39 02 FB | 	rdlong	local14, local13
245ec     24 4E 05 F1 | 	add	fp, #36
245f0     A7 28 02 FB | 	rdlong	local06, fp
245f4     28 4E 85 F1 | 	sub	fp, #40
245f8     14 39 02 F1 | 	add	local14, local06
245fc     14 22 06 F1 | 	add	local03, #20
24600     11 39 62 FC | 	wrlong	local14, local03
24604     84 FA 9F FD | 	jmp	#LR__3762
24608                 | LR__3779
24608                 | ' 
24608                 | ' 
24608                 | ' 
24608                 | ' 
24608                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
24608                 | ' 
24608                 | ' 	}
24608                 | ' 
24608                 | ' 	return FR_OK ;
24608     00 FA 05 F6 | 	mov	result1, #0
2460c                 | LR__3780
2460c     A7 F0 03 F6 | 	mov	ptra, fp
24610     B2 00 A0 FD | 	call	#popregs_
24614                 | _fatfs_cc_f_read_ret
24614     2D 00 64 FD | 	ret
24618                 | 
24618                 | _fatfs_cc_f_write
24618     15 4A 05 F6 | 	mov	COUNT_, #21
2461c     A8 00 A0 FD | 	call	#pushregs_
24620     34 F0 07 F1 | 	add	ptra, #52
24624     04 4E 05 F1 | 	add	fp, #4
24628     A7 12 62 FC | 	wrlong	arg01, fp
2462c     04 4E 05 F1 | 	add	fp, #4
24630     A7 14 62 FC | 	wrlong	arg02, fp
24634     04 4E 05 F1 | 	add	fp, #4
24638     A7 16 62 FC | 	wrlong	arg03, fp
2463c     04 4E 05 F1 | 	add	fp, #4
24640     A7 18 62 FC | 	wrlong	arg04, fp
24644     08 4E 85 F1 | 	sub	fp, #8
24648     A7 FA 01 FB | 	rdlong	result1, fp
2464c     28 4E 05 F1 | 	add	fp, #40
24650     A7 FA 61 FC | 	wrlong	result1, fp
24654     20 4E 85 F1 | 	sub	fp, #32
24658     A7 FA 01 FB | 	rdlong	result1, fp
2465c     FD 00 68 FC | 	wrlong	#0, result1
24660     0C 4E 85 F1 | 	sub	fp, #12
24664     A7 12 02 FB | 	rdlong	arg01, fp
24668     14 4E 05 F1 | 	add	fp, #20
2466c     A7 14 02 F6 | 	mov	arg02, fp
24670     18 4E 85 F1 | 	sub	fp, #24
24674     88 F0 BF FD | 	call	#_fatfs_cc_validate
24678     14 4E 05 F1 | 	add	fp, #20
2467c     A7 FA 61 FC | 	wrlong	result1, fp
24680     00 FA 4D F2 | 	cmps	result1, #0 wz
24684     14 4E 85 F1 | 	sub	fp, #20
24688     20 00 90 5D |  if_ne	jmp	#LR__3790
2468c     04 4E 05 F1 | 	add	fp, #4
24690     A7 14 02 FB | 	rdlong	arg02, fp
24694     11 14 06 F1 | 	add	arg02, #17
24698     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2469c     10 4E 05 F1 | 	add	fp, #16
246a0     A7 14 62 FC | 	wrlong	arg02, fp
246a4     14 4E 85 F1 | 	sub	fp, #20
246a8     10 00 90 AD |  if_e	jmp	#LR__3791
246ac                 | LR__3790
246ac     14 4E 05 F1 | 	add	fp, #20
246b0     A7 FA 01 FB | 	rdlong	result1, fp
246b4     14 4E 85 F1 | 	sub	fp, #20
246b8     44 07 90 FD | 	jmp	#LR__3813
246bc                 | LR__3791
246bc     04 4E 05 F1 | 	add	fp, #4
246c0     A7 14 02 FB | 	rdlong	arg02, fp
246c4     04 4E 85 F1 | 	sub	fp, #4
246c8     10 14 06 F1 | 	add	arg02, #16
246cc     0A 15 C2 FA | 	rdbyte	arg02, arg02
246d0     02 14 CE F7 | 	test	arg02, #2 wz
246d4     07 FA 05 A6 |  if_e	mov	result1, #7
246d8     24 07 90 AD |  if_e	jmp	#LR__3813
246dc     04 4E 05 F1 | 	add	fp, #4
246e0     A7 14 02 FB | 	rdlong	arg02, fp
246e4     0A 13 02 F6 | 	mov	arg01, arg02
246e8     14 12 06 F1 | 	add	arg01, #20
246ec     09 13 02 FB | 	rdlong	arg01, arg01
246f0     08 4E 05 F1 | 	add	fp, #8
246f4     A7 FA 01 FB | 	rdlong	result1, fp
246f8     FD 12 02 F1 | 	add	arg01, result1
246fc     0C 4E 85 F1 | 	sub	fp, #12
24700     14 14 06 F1 | 	add	arg02, #20
24704     0A FB 01 FB | 	rdlong	result1, arg02
24708     FD 12 12 F2 | 	cmp	arg01, result1 wc
2470c     24 00 90 3D |  if_ae	jmp	#LR__3792
24710     04 4E 05 F1 | 	add	fp, #4
24714     A7 14 02 FB | 	rdlong	arg02, fp
24718     01 FA 65 F6 | 	neg	result1, #1
2471c     14 14 06 F1 | 	add	arg02, #20
24720     0A 15 02 FB | 	rdlong	arg02, arg02
24724     0A FB 81 F1 | 	sub	result1, arg02
24728     08 4E 05 F1 | 	add	fp, #8
2472c     A7 FA 61 FC | 	wrlong	result1, fp
24730     0C 4E 85 F1 | 	sub	fp, #12
24734                 | LR__3792
24734                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
24734                 | ' 	}
24734                 | ' 
24734                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
24734                 | LR__3793
24734     0C 4E 05 F1 | 	add	fp, #12
24738     A7 FA 01 FB | 	rdlong	result1, fp
2473c     0C 4E 85 F1 | 	sub	fp, #12
24740     01 FA 15 F2 | 	cmp	result1, #1 wc
24744     90 06 90 CD |  if_b	jmp	#LR__3812
24748     04 4E 05 F1 | 	add	fp, #4
2474c     A7 FA 01 FB | 	rdlong	result1, fp
24750     04 4E 85 F1 | 	sub	fp, #4
24754     14 FA 05 F1 | 	add	result1, #20
24758     FD FA 01 FB | 	rdlong	result1, result1
2475c     FF FB CD F7 | 	test	result1, #511 wz
24760     D8 04 90 5D |  if_ne	jmp	#LR__3808
24764     04 4E 05 F1 | 	add	fp, #4
24768     A7 FA 01 FB | 	rdlong	result1, fp
2476c     14 FA 05 F1 | 	add	result1, #20
24770     FD FA 01 FB | 	rdlong	result1, result1
24774     09 FA 45 F0 | 	shr	result1, #9
24778     14 4E 05 F1 | 	add	fp, #20
2477c     A7 14 02 FB | 	rdlong	arg02, fp
24780     0A 14 06 F1 | 	add	arg02, #10
24784     0A 19 E2 FA | 	rdword	arg04, arg02
24788     0C 15 32 F9 | 	getword	arg02, arg04, #0
2478c     01 14 86 F1 | 	sub	arg02, #1
24790     0A FB 09 F5 | 	and	result1, arg02 wz
24794     14 4E 05 F1 | 	add	fp, #20
24798     A7 FA 61 FC | 	wrlong	result1, fp
2479c     2C 4E 85 F1 | 	sub	fp, #44
247a0     44 01 90 5D |  if_ne	jmp	#LR__3799
247a4     04 4E 05 F1 | 	add	fp, #4
247a8     A7 FA 01 FB | 	rdlong	result1, fp
247ac     04 4E 85 F1 | 	sub	fp, #4
247b0     14 FA 05 F1 | 	add	result1, #20
247b4     FD 14 0A FB | 	rdlong	arg02, result1 wz
247b8     44 00 90 5D |  if_ne	jmp	#LR__3794
247bc     04 4E 05 F1 | 	add	fp, #4
247c0     A7 14 02 FB | 	rdlong	arg02, fp
247c4     08 14 06 F1 | 	add	arg02, #8
247c8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
247cc     18 4E 05 F1 | 	add	fp, #24
247d0     A7 14 62 FC | 	wrlong	arg02, fp
247d4     1C 4E 85 F1 | 	sub	fp, #28
247d8     4C 00 90 5D |  if_ne	jmp	#LR__3795
247dc     04 4E 05 F1 | 	add	fp, #4
247e0     A7 12 02 FB | 	rdlong	arg01, fp
247e4     04 4E 85 F1 | 	sub	fp, #4
247e8     00 14 06 F6 | 	mov	arg02, #0
247ec     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
247f0     1C 4E 05 F1 | 	add	fp, #28
247f4     A7 FA 61 FC | 	wrlong	result1, fp
247f8     1C 4E 85 F1 | 	sub	fp, #28
247fc     28 00 90 FD | 	jmp	#LR__3795
24800                 | LR__3794
24800     04 4E 05 F1 | 	add	fp, #4
24804     A7 18 02 FB | 	rdlong	arg04, fp
24808     0C 13 02 F6 | 	mov	arg01, arg04
2480c     04 4E 85 F1 | 	sub	fp, #4
24810     18 18 06 F1 | 	add	arg04, #24
24814     0C 15 02 FB | 	rdlong	arg02, arg04
24818     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2481c     1C 4E 05 F1 | 	add	fp, #28
24820     A7 FA 61 FC | 	wrlong	result1, fp
24824     1C 4E 85 F1 | 	sub	fp, #28
24828                 | LR__3795
24828     1C 4E 05 F1 | 	add	fp, #28
2482c     A7 FA 09 FB | 	rdlong	result1, fp wz
24830     1C 4E 85 F1 | 	sub	fp, #28
24834     A0 05 90 AD |  if_e	jmp	#LR__3812
24838     1C 4E 05 F1 | 	add	fp, #28
2483c     A7 FA 01 FB | 	rdlong	result1, fp
24840     1C 4E 85 F1 | 	sub	fp, #28
24844     01 FA 0D F2 | 	cmp	result1, #1 wz
24848     1C 00 90 5D |  if_ne	jmp	#LR__3796
2484c     04 4E 05 F1 | 	add	fp, #4
24850     A7 FA 01 FB | 	rdlong	result1, fp
24854     04 4E 85 F1 | 	sub	fp, #4
24858     11 FA 05 F1 | 	add	result1, #17
2485c     FD 04 48 FC | 	wrbyte	#2, result1
24860     02 FA 05 F6 | 	mov	result1, #2
24864     98 05 90 FD | 	jmp	#LR__3813
24868                 | LR__3796
24868     1C 4E 05 F1 | 	add	fp, #28
2486c     A7 FA 01 FB | 	rdlong	result1, fp
24870     1C 4E 85 F1 | 	sub	fp, #28
24874     FF FF 7F FF 
24878     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2487c     1C 00 90 5D |  if_ne	jmp	#LR__3797
24880     04 4E 05 F1 | 	add	fp, #4
24884     A7 FA 01 FB | 	rdlong	result1, fp
24888     04 4E 85 F1 | 	sub	fp, #4
2488c     11 FA 05 F1 | 	add	result1, #17
24890     FD 02 48 FC | 	wrbyte	#1, result1
24894     01 FA 05 F6 | 	mov	result1, #1
24898     64 05 90 FD | 	jmp	#LR__3813
2489c                 | LR__3797
2489c     04 4E 05 F1 | 	add	fp, #4
248a0     A7 FA 01 FB | 	rdlong	result1, fp
248a4     18 4E 05 F1 | 	add	fp, #24
248a8     A7 18 02 FB | 	rdlong	arg04, fp
248ac     18 FA 05 F1 | 	add	result1, #24
248b0     FD 18 62 FC | 	wrlong	arg04, result1
248b4     18 4E 85 F1 | 	sub	fp, #24
248b8     A7 FA 01 FB | 	rdlong	result1, fp
248bc     04 4E 85 F1 | 	sub	fp, #4
248c0     08 FA 05 F1 | 	add	result1, #8
248c4     FD FA 09 FB | 	rdlong	result1, result1 wz
248c8     1C 00 90 5D |  if_ne	jmp	#LR__3798
248cc     04 4E 05 F1 | 	add	fp, #4
248d0     A7 18 02 FB | 	rdlong	arg04, fp
248d4     18 4E 05 F1 | 	add	fp, #24
248d8     A7 FA 01 FB | 	rdlong	result1, fp
248dc     1C 4E 85 F1 | 	sub	fp, #28
248e0     08 18 06 F1 | 	add	arg04, #8
248e4     0C FB 61 FC | 	wrlong	result1, arg04
248e8                 | LR__3798
248e8                 | LR__3799
248e8     04 4E 05 F1 | 	add	fp, #4
248ec     A7 18 02 FB | 	rdlong	arg04, fp
248f0     04 4E 85 F1 | 	sub	fp, #4
248f4     10 18 06 F1 | 	add	arg04, #16
248f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
248fc     80 18 CE F7 | 	test	arg04, #128 wz
24900     7C 00 90 AD |  if_e	jmp	#LR__3801
24904     18 4E 05 F1 | 	add	fp, #24
24908     A7 18 02 FB | 	rdlong	arg04, fp
2490c     01 18 06 F1 | 	add	arg04, #1
24910     0C 13 C2 FA | 	rdbyte	arg01, arg04
24914     14 4E 85 F1 | 	sub	fp, #20
24918     A7 18 02 FB | 	rdlong	arg04, fp
2491c     0C 15 02 F6 | 	mov	arg02, arg04
24920     28 14 06 F1 | 	add	arg02, #40
24924     04 4E 85 F1 | 	sub	fp, #4
24928     1C 18 06 F1 | 	add	arg04, #28
2492c     0C 17 02 FB | 	rdlong	arg03, arg04
24930     01 18 06 F6 | 	mov	arg04, #1
24934     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
24938     00 FA 0D F2 | 	cmp	result1, #0 wz
2493c     1C 00 90 AD |  if_e	jmp	#LR__3800
24940     04 4E 05 F1 | 	add	fp, #4
24944     A7 FA 01 FB | 	rdlong	result1, fp
24948     04 4E 85 F1 | 	sub	fp, #4
2494c     11 FA 05 F1 | 	add	result1, #17
24950     FD 02 48 FC | 	wrbyte	#1, result1
24954     01 FA 05 F6 | 	mov	result1, #1
24958     A4 04 90 FD | 	jmp	#LR__3813
2495c                 | LR__3800
2495c     04 4E 05 F1 | 	add	fp, #4
24960     A7 18 02 FB | 	rdlong	arg04, fp
24964     0C FB 01 F6 | 	mov	result1, arg04
24968     04 4E 85 F1 | 	sub	fp, #4
2496c     10 18 06 F1 | 	add	arg04, #16
24970     0C 19 C2 FA | 	rdbyte	arg04, arg04
24974     7F 18 06 F5 | 	and	arg04, #127
24978     10 FA 05 F1 | 	add	result1, #16
2497c     FD 18 42 FC | 	wrbyte	arg04, result1
24980                 | LR__3801
24980     18 4E 05 F1 | 	add	fp, #24
24984     A7 12 02 FB | 	rdlong	arg01, fp
24988     14 4E 85 F1 | 	sub	fp, #20
2498c     A7 14 02 FB | 	rdlong	arg02, fp
24990     04 4E 85 F1 | 	sub	fp, #4
24994     18 14 06 F1 | 	add	arg02, #24
24998     0A 15 02 FB | 	rdlong	arg02, arg02
2499c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
249a0     20 4E 05 F1 | 	add	fp, #32
249a4     A7 FA 61 FC | 	wrlong	result1, fp
249a8     20 4E 85 F1 | 	sub	fp, #32
249ac     00 FA 0D F2 | 	cmp	result1, #0 wz
249b0     1C 00 90 5D |  if_ne	jmp	#LR__3802
249b4     04 4E 05 F1 | 	add	fp, #4
249b8     A7 FA 01 FB | 	rdlong	result1, fp
249bc     04 4E 85 F1 | 	sub	fp, #4
249c0     11 FA 05 F1 | 	add	result1, #17
249c4     FD 04 48 FC | 	wrbyte	#2, result1
249c8     02 FA 05 F6 | 	mov	result1, #2
249cc     30 04 90 FD | 	jmp	#LR__3813
249d0                 | LR__3802
249d0     20 4E 05 F1 | 	add	fp, #32
249d4     A7 FA 01 FB | 	rdlong	result1, fp
249d8     0C 4E 05 F1 | 	add	fp, #12
249dc     A7 1E 02 FB | 	rdlong	local01, fp
249e0     0F FB 01 F1 | 	add	result1, local01
249e4     0C 4E 85 F1 | 	sub	fp, #12
249e8     A7 FA 61 FC | 	wrlong	result1, fp
249ec     14 4E 85 F1 | 	sub	fp, #20
249f0     A7 FA 01 FB | 	rdlong	result1, fp
249f4     09 FA 45 F0 | 	shr	result1, #9
249f8     1C 4E 05 F1 | 	add	fp, #28
249fc     A7 FA 61 FC | 	wrlong	result1, fp
24a00     28 4E 85 F1 | 	sub	fp, #40
24a04     01 FA 15 F2 | 	cmp	result1, #1 wc
24a08     60 01 90 CD |  if_b	jmp	#LR__3806
24a0c     2C 4E 05 F1 | 	add	fp, #44
24a10     A7 FA 01 FB | 	rdlong	result1, fp
24a14     04 4E 85 F1 | 	sub	fp, #4
24a18     A7 18 02 FB | 	rdlong	arg04, fp
24a1c     0C FB 01 F1 | 	add	result1, arg04
24a20     10 4E 85 F1 | 	sub	fp, #16
24a24     A7 18 02 FB | 	rdlong	arg04, fp
24a28     18 4E 85 F1 | 	sub	fp, #24
24a2c     0A 18 06 F1 | 	add	arg04, #10
24a30     0C 19 E2 FA | 	rdword	arg04, arg04
24a34     0C FB 19 F2 | 	cmp	result1, arg04 wcz
24a38     28 00 90 ED |  if_be	jmp	#LR__3803
24a3c     18 4E 05 F1 | 	add	fp, #24
24a40     A7 FA 01 FB | 	rdlong	result1, fp
24a44     0A FA 05 F1 | 	add	result1, #10
24a48     FD FA E1 FA | 	rdword	result1, result1
24a4c     14 4E 05 F1 | 	add	fp, #20
24a50     A7 18 02 FB | 	rdlong	arg04, fp
24a54     0C FB 81 F1 | 	sub	result1, arg04
24a58     04 4E 85 F1 | 	sub	fp, #4
24a5c     A7 FA 61 FC | 	wrlong	result1, fp
24a60     28 4E 85 F1 | 	sub	fp, #40
24a64                 | LR__3803
24a64     18 4E 05 F1 | 	add	fp, #24
24a68     A7 18 02 FB | 	rdlong	arg04, fp
24a6c     01 18 06 F1 | 	add	arg04, #1
24a70     0C 13 C2 FA | 	rdbyte	arg01, arg04
24a74     18 4E 05 F1 | 	add	fp, #24
24a78     A7 14 02 FB | 	rdlong	arg02, fp
24a7c     10 4E 85 F1 | 	sub	fp, #16
24a80     A7 16 02 FB | 	rdlong	arg03, fp
24a84     08 4E 05 F1 | 	add	fp, #8
24a88     A7 18 02 FB | 	rdlong	arg04, fp
24a8c     28 4E 85 F1 | 	sub	fp, #40
24a90     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
24a94     00 FA 0D F2 | 	cmp	result1, #0 wz
24a98     1C 00 90 AD |  if_e	jmp	#LR__3804
24a9c     04 4E 05 F1 | 	add	fp, #4
24aa0     A7 1E 02 FB | 	rdlong	local01, fp
24aa4     04 4E 85 F1 | 	sub	fp, #4
24aa8     11 1E 06 F1 | 	add	local01, #17
24aac     0F 03 48 FC | 	wrbyte	#1, local01
24ab0     01 FA 05 F6 | 	mov	result1, #1
24ab4     48 03 90 FD | 	jmp	#LR__3813
24ab8                 | LR__3804
24ab8     04 4E 05 F1 | 	add	fp, #4
24abc     A7 FA 01 FB | 	rdlong	result1, fp
24ac0     1C FA 05 F1 | 	add	result1, #28
24ac4     FD FA 01 FB | 	rdlong	result1, result1
24ac8     1C 4E 05 F1 | 	add	fp, #28
24acc     A7 20 02 FB | 	rdlong	local02, fp
24ad0     10 FB 81 F1 | 	sub	result1, local02
24ad4     08 4E 05 F1 | 	add	fp, #8
24ad8     A7 18 02 FB | 	rdlong	arg04, fp
24adc     28 4E 85 F1 | 	sub	fp, #40
24ae0     0C FB 11 F2 | 	cmp	result1, arg04 wc
24ae4     68 00 90 3D |  if_ae	jmp	#LR__3805
24ae8     04 4E 05 F1 | 	add	fp, #4
24aec     A7 12 02 FB | 	rdlong	arg01, fp
24af0     28 12 06 F1 | 	add	arg01, #40
24af4     2C 4E 05 F1 | 	add	fp, #44
24af8     A7 14 02 FB | 	rdlong	arg02, fp
24afc     2C 4E 85 F1 | 	sub	fp, #44
24b00     A7 FA 01 FB | 	rdlong	result1, fp
24b04     1C FA 05 F1 | 	add	result1, #28
24b08     FD 22 02 FB | 	rdlong	local03, result1
24b0c     1C 4E 05 F1 | 	add	fp, #28
24b10     A7 18 02 FB | 	rdlong	arg04, fp
24b14     20 4E 85 F1 | 	sub	fp, #32
24b18     0C 23 82 F1 | 	sub	local03, arg04
24b1c     09 22 66 F0 | 	shl	local03, #9
24b20     11 15 02 F1 | 	add	arg02, local03
24b24     09 16 C6 F9 | 	decod	arg03, #9
24b28     D8 41 BF FD | 	call	#__system____builtin_memmove
24b2c     04 4E 05 F1 | 	add	fp, #4
24b30     A7 18 02 FB | 	rdlong	arg04, fp
24b34     0C FB 01 F6 | 	mov	result1, arg04
24b38     04 4E 85 F1 | 	sub	fp, #4
24b3c     10 18 06 F1 | 	add	arg04, #16
24b40     0C 19 C2 FA | 	rdbyte	arg04, arg04
24b44     7F 18 06 F5 | 	and	arg04, #127
24b48     10 FA 05 F1 | 	add	result1, #16
24b4c     FD 18 42 FC | 	wrbyte	arg04, result1
24b50                 | LR__3805
24b50     28 4E 05 F1 | 	add	fp, #40
24b54     A7 FA 01 FB | 	rdlong	result1, fp
24b58     09 FA 65 F0 | 	shl	result1, #9
24b5c     04 4E 85 F1 | 	sub	fp, #4
24b60     A7 FA 61 FC | 	wrlong	result1, fp
24b64     24 4E 85 F1 | 	sub	fp, #36
24b68                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
24b68                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
24b68                 | ' 				}
24b68                 | ' 
24b68                 | ' 
24b68                 | ' 				wcnt =  ((UINT) 512 )  * cc;
24b68                 | ' 				continue;
24b68     74 01 90 FD | 	jmp	#LR__3809
24b6c                 | LR__3806
24b6c     04 4E 05 F1 | 	add	fp, #4
24b70     A7 20 02 FB | 	rdlong	local02, fp
24b74     1C 20 06 F1 | 	add	local02, #28
24b78     10 FB 01 FB | 	rdlong	result1, local02
24b7c     1C 4E 05 F1 | 	add	fp, #28
24b80     A7 20 02 FB | 	rdlong	local02, fp
24b84     20 4E 85 F1 | 	sub	fp, #32
24b88     10 FB 09 F2 | 	cmp	result1, local02 wz
24b8c     90 00 90 AD |  if_e	jmp	#LR__3807
24b90     04 4E 05 F1 | 	add	fp, #4
24b94     A7 FA 01 FB | 	rdlong	result1, fp
24b98     FD 22 02 F6 | 	mov	local03, result1
24b9c     04 4E 85 F1 | 	sub	fp, #4
24ba0     14 22 06 F1 | 	add	local03, #20
24ba4     11 23 02 FB | 	rdlong	local03, local03
24ba8     0C FA 05 F1 | 	add	result1, #12
24bac     FD 24 02 FB | 	rdlong	local04, result1
24bb0     12 27 02 F6 | 	mov	local05, local04
24bb4     13 23 12 F2 | 	cmp	local03, local05 wc
24bb8     64 00 90 3D |  if_ae	jmp	#LR__3807
24bbc     18 4E 05 F1 | 	add	fp, #24
24bc0     A7 18 02 FB | 	rdlong	arg04, fp
24bc4     01 18 06 F1 | 	add	arg04, #1
24bc8     0C 13 C2 FA | 	rdbyte	arg01, arg04
24bcc     14 4E 85 F1 | 	sub	fp, #20
24bd0     A7 28 02 FB | 	rdlong	local06, fp
24bd4     28 28 06 F1 | 	add	local06, #40
24bd8     14 2B 02 F6 | 	mov	local07, local06
24bdc     1C 4E 05 F1 | 	add	fp, #28
24be0     A7 2C 02 FB | 	rdlong	local08, fp
24be4     20 4E 85 F1 | 	sub	fp, #32
24be8     01 2E 06 F6 | 	mov	local09, #1
24bec     15 15 02 F6 | 	mov	arg02, local07
24bf0     16 17 02 F6 | 	mov	arg03, local08
24bf4     01 18 06 F6 | 	mov	arg04, #1
24bf8     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
24bfc     FD 30 0A F6 | 	mov	local10, result1 wz
24c00     1C 00 90 AD |  if_e	jmp	#LR__3807
24c04     04 4E 05 F1 | 	add	fp, #4
24c08     A7 30 02 FB | 	rdlong	local10, fp
24c0c     04 4E 85 F1 | 	sub	fp, #4
24c10     11 30 06 F1 | 	add	local10, #17
24c14     18 03 48 FC | 	wrbyte	#1, local10
24c18                 | ' 				fp->fptr < fp->obj.objsize &&
24c18                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
24c18                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
24c18     01 FA 05 F6 | 	mov	result1, #1
24c1c     E0 01 90 FD | 	jmp	#LR__3813
24c20                 | LR__3807
24c20     04 4E 05 F1 | 	add	fp, #4
24c24     A7 18 02 FB | 	rdlong	arg04, fp
24c28     1C 4E 05 F1 | 	add	fp, #28
24c2c     A7 FA 01 FB | 	rdlong	result1, fp
24c30     20 4E 85 F1 | 	sub	fp, #32
24c34     1C 18 06 F1 | 	add	arg04, #28
24c38     0C FB 61 FC | 	wrlong	result1, arg04
24c3c                 | LR__3808
24c3c     04 4E 05 F1 | 	add	fp, #4
24c40     A7 FA 01 FB | 	rdlong	result1, fp
24c44     14 FA 05 F1 | 	add	result1, #20
24c48     FD FA 01 FB | 	rdlong	result1, result1
24c4c     FF FB 05 F5 | 	and	result1, #511
24c50     09 32 C6 F9 | 	decod	local11, #9
24c54     FD 32 82 F1 | 	sub	local11, result1
24c58     20 4E 05 F1 | 	add	fp, #32
24c5c     A7 32 62 FC | 	wrlong	local11, fp
24c60     18 4E 85 F1 | 	sub	fp, #24
24c64     A7 FA 01 FB | 	rdlong	result1, fp
24c68     0C 4E 85 F1 | 	sub	fp, #12
24c6c     FD 32 1A F2 | 	cmp	local11, result1 wcz
24c70     0C 4E 05 11 |  if_a	add	fp, #12
24c74     A7 32 02 1B |  if_a	rdlong	local11, fp
24c78     18 4E 05 11 |  if_a	add	fp, #24
24c7c     A7 32 62 1C |  if_a	wrlong	local11, fp
24c80     24 4E 85 11 |  if_a	sub	fp, #36
24c84     04 4E 05 F1 | 	add	fp, #4
24c88     A7 32 02 FB | 	rdlong	local11, fp
24c8c     19 13 02 F6 | 	mov	arg01, local11
24c90     28 12 06 F1 | 	add	arg01, #40
24c94     14 32 06 F1 | 	add	local11, #20
24c98     19 33 02 FB | 	rdlong	local11, local11
24c9c     FF 33 06 F5 | 	and	local11, #511
24ca0     19 13 02 F1 | 	add	arg01, local11
24ca4     2C 4E 05 F1 | 	add	fp, #44
24ca8     A7 14 02 FB | 	rdlong	arg02, fp
24cac     0C 4E 85 F1 | 	sub	fp, #12
24cb0     A7 16 02 FB | 	rdlong	arg03, fp
24cb4     24 4E 85 F1 | 	sub	fp, #36
24cb8     48 40 BF FD | 	call	#__system____builtin_memmove
24cbc     04 4E 05 F1 | 	add	fp, #4
24cc0     A7 FA 01 FB | 	rdlong	result1, fp
24cc4     FD 32 02 F6 | 	mov	local11, result1
24cc8     04 4E 85 F1 | 	sub	fp, #4
24ccc     10 FA 05 F1 | 	add	result1, #16
24cd0     FD FA C1 FA | 	rdbyte	result1, result1
24cd4     80 FA 45 F5 | 	or	result1, #128
24cd8     10 32 06 F1 | 	add	local11, #16
24cdc     19 FB 41 FC | 	wrbyte	result1, local11
24ce0                 | LR__3809
24ce0     0C 4E 05 F1 | 	add	fp, #12
24ce4     A7 32 02 FB | 	rdlong	local11, fp
24ce8     18 4E 05 F1 | 	add	fp, #24
24cec     A7 FA 01 FB | 	rdlong	result1, fp
24cf0     FD 32 82 F1 | 	sub	local11, result1
24cf4     18 4E 85 F1 | 	sub	fp, #24
24cf8     A7 32 62 FC | 	wrlong	local11, fp
24cfc     04 4E 05 F1 | 	add	fp, #4
24d00     A7 34 02 FB | 	rdlong	local12, fp
24d04     1A 33 02 FB | 	rdlong	local11, local12
24d08     14 4E 05 F1 | 	add	fp, #20
24d0c     A7 36 02 FB | 	rdlong	local13, fp
24d10     1B 33 02 F1 | 	add	local11, local13
24d14     1A 33 62 FC | 	wrlong	local11, local12
24d18     0C 4E 05 F1 | 	add	fp, #12
24d1c     A7 32 02 FB | 	rdlong	local11, fp
24d20     0C 4E 85 F1 | 	sub	fp, #12
24d24     A7 38 02 FB | 	rdlong	local14, fp
24d28     1C 33 02 F1 | 	add	local11, local14
24d2c     0C 4E 05 F1 | 	add	fp, #12
24d30     A7 32 62 FC | 	wrlong	local11, fp
24d34     2C 4E 85 F1 | 	sub	fp, #44
24d38     A7 3A 02 FB | 	rdlong	local15, fp
24d3c     1D 33 02 F6 | 	mov	local11, local15
24d40     14 3A 06 F1 | 	add	local15, #20
24d44     1D 3B 02 FB | 	rdlong	local15, local15
24d48     20 4E 05 F1 | 	add	fp, #32
24d4c     A7 3C 02 FB | 	rdlong	local16, fp
24d50     1E 3B 02 F1 | 	add	local15, local16
24d54     14 32 06 F1 | 	add	local11, #20
24d58     19 3B 62 FC | 	wrlong	local15, local11
24d5c     20 4E 85 F1 | 	sub	fp, #32
24d60     A7 3E 02 FB | 	rdlong	local17, fp
24d64     1F 33 02 F6 | 	mov	local11, local17
24d68     1F 41 02 F6 | 	mov	local18, local17
24d6c     04 4E 85 F1 | 	sub	fp, #4
24d70     14 3E 06 F1 | 	add	local17, #20
24d74     1F 43 02 FB | 	rdlong	local19, local17
24d78     0C 40 06 F1 | 	add	local18, #12
24d7c     20 45 02 FB | 	rdlong	local20, local18
24d80     22 43 1A F2 | 	cmp	local19, local20 wcz
24d84     24 00 90 ED |  if_be	jmp	#LR__3810
24d88     04 4E 05 F1 | 	add	fp, #4
24d8c     A7 26 02 FB | 	rdlong	local05, fp
24d90     04 4E 85 F1 | 	sub	fp, #4
24d94     13 23 02 F6 | 	mov	local03, local05
24d98     14 22 06 F1 | 	add	local03, #20
24d9c     11 25 02 FB | 	rdlong	local04, local03
24da0     14 22 86 F1 | 	sub	local03, #20
24da4     12 47 02 F6 | 	mov	local21, local04
24da8     20 00 90 FD | 	jmp	#LR__3811
24dac                 | LR__3810
24dac     04 4E 05 F1 | 	add	fp, #4
24db0     A7 2A 02 FB | 	rdlong	local07, fp
24db4     04 4E 85 F1 | 	sub	fp, #4
24db8     15 31 02 F6 | 	mov	local10, local07
24dbc     0C 30 06 F1 | 	add	local10, #12
24dc0     18 2D 02 FB | 	rdlong	local08, local10
24dc4     0C 30 86 F1 | 	sub	local10, #12
24dc8     16 47 02 F6 | 	mov	local21, local08
24dcc                 | LR__3811
24dcc     0C 32 06 F1 | 	add	local11, #12
24dd0     19 47 62 FC | 	wrlong	local21, local11
24dd4     5C F9 9F FD | 	jmp	#LR__3793
24dd8                 | LR__3812
24dd8     04 4E 05 F1 | 	add	fp, #4
24ddc     A7 34 02 FB | 	rdlong	local12, fp
24de0     1A 1F 02 F6 | 	mov	local01, local12
24de4     04 4E 85 F1 | 	sub	fp, #4
24de8     10 34 06 F1 | 	add	local12, #16
24dec     1A 33 C2 FA | 	rdbyte	local11, local12
24df0     40 32 46 F5 | 	or	local11, #64
24df4     10 1E 06 F1 | 	add	local01, #16
24df8     0F 33 42 FC | 	wrbyte	local11, local01
24dfc                 | ' 
24dfc                 | ' 
24dfc                 | ' 
24dfc                 | ' 
24dfc                 | ' 
24dfc                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
24dfc                 | ' 		fp->flag |=  0x80 ;
24dfc                 | ' 
24dfc                 | ' 	}
24dfc                 | ' 
24dfc                 | ' 	fp->flag |=  0x40 ;
24dfc                 | ' 
24dfc                 | ' 	return FR_OK ;
24dfc     00 FA 05 F6 | 	mov	result1, #0
24e00                 | LR__3813
24e00     A7 F0 03 F6 | 	mov	ptra, fp
24e04     B2 00 A0 FD | 	call	#popregs_
24e08                 | _fatfs_cc_f_write_ret
24e08     2D 00 64 FD | 	ret
24e0c                 | 
24e0c                 | _fatfs_cc_f_sync
24e0c     00 4A 05 F6 | 	mov	COUNT_, #0
24e10     A8 00 A0 FD | 	call	#pushregs_
24e14     18 F0 07 F1 | 	add	ptra, #24
24e18     04 4E 05 F1 | 	add	fp, #4
24e1c     A7 12 62 FC | 	wrlong	arg01, fp
24e20     08 4E 05 F1 | 	add	fp, #8
24e24     A7 14 02 F6 | 	mov	arg02, fp
24e28     0C 4E 85 F1 | 	sub	fp, #12
24e2c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
24e30     08 4E 05 F1 | 	add	fp, #8
24e34     A7 FA 61 FC | 	wrlong	result1, fp
24e38     08 4E 85 F1 | 	sub	fp, #8
24e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
24e40     C0 01 90 5D |  if_ne	jmp	#LR__3823
24e44     04 4E 05 F1 | 	add	fp, #4
24e48     A7 18 02 FB | 	rdlong	arg04, fp
24e4c     04 4E 85 F1 | 	sub	fp, #4
24e50     10 18 06 F1 | 	add	arg04, #16
24e54     0C 19 C2 FA | 	rdbyte	arg04, arg04
24e58     40 18 CE F7 | 	test	arg04, #64 wz
24e5c     A4 01 90 AD |  if_e	jmp	#LR__3822
24e60     04 4E 05 F1 | 	add	fp, #4
24e64     A7 18 02 FB | 	rdlong	arg04, fp
24e68     04 4E 85 F1 | 	sub	fp, #4
24e6c     10 18 06 F1 | 	add	arg04, #16
24e70     0C 19 C2 FA | 	rdbyte	arg04, arg04
24e74     80 18 CE F7 | 	test	arg04, #128 wz
24e78     64 00 90 AD |  if_e	jmp	#LR__3820
24e7c     0C 4E 05 F1 | 	add	fp, #12
24e80     A7 18 02 FB | 	rdlong	arg04, fp
24e84     01 18 06 F1 | 	add	arg04, #1
24e88     0C 13 C2 FA | 	rdbyte	arg01, arg04
24e8c     08 4E 85 F1 | 	sub	fp, #8
24e90     A7 18 02 FB | 	rdlong	arg04, fp
24e94     0C 15 02 F6 | 	mov	arg02, arg04
24e98     28 14 06 F1 | 	add	arg02, #40
24e9c     04 4E 85 F1 | 	sub	fp, #4
24ea0     1C 18 06 F1 | 	add	arg04, #28
24ea4     0C 17 02 FB | 	rdlong	arg03, arg04
24ea8     01 18 06 F6 | 	mov	arg04, #1
24eac     0C AE BF FD | 	call	#_fatfs_cc_disk_write
24eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
24eb4     01 FA 05 56 |  if_ne	mov	result1, #1
24eb8     54 01 90 5D |  if_ne	jmp	#LR__3824
24ebc     04 4E 05 F1 | 	add	fp, #4
24ec0     A7 18 02 FB | 	rdlong	arg04, fp
24ec4     0C 17 02 F6 | 	mov	arg03, arg04
24ec8     04 4E 85 F1 | 	sub	fp, #4
24ecc     10 18 06 F1 | 	add	arg04, #16
24ed0     0C 19 C2 FA | 	rdbyte	arg04, arg04
24ed4     7F 18 06 F5 | 	and	arg04, #127
24ed8     10 16 06 F1 | 	add	arg03, #16
24edc     0B 19 42 FC | 	wrbyte	arg04, arg03
24ee0                 | LR__3820
24ee0     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
24ee4     10 4E 05 F1 | 	add	fp, #16
24ee8     A7 FA 61 FC | 	wrlong	result1, fp
24eec     04 4E 85 F1 | 	sub	fp, #4
24ef0     A7 12 02 FB | 	rdlong	arg01, fp
24ef4     08 4E 85 F1 | 	sub	fp, #8
24ef8     A7 18 02 FB | 	rdlong	arg04, fp
24efc     04 4E 85 F1 | 	sub	fp, #4
24f00     20 18 06 F1 | 	add	arg04, #32
24f04     0C 15 02 FB | 	rdlong	arg02, arg04
24f08     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
24f0c     08 4E 05 F1 | 	add	fp, #8
24f10     A7 FA 61 FC | 	wrlong	result1, fp
24f14     08 4E 85 F1 | 	sub	fp, #8
24f18     00 FA 0D F2 | 	cmp	result1, #0 wz
24f1c     E4 00 90 5D |  if_ne	jmp	#LR__3821
24f20     04 4E 05 F1 | 	add	fp, #4
24f24     A7 18 02 FB | 	rdlong	arg04, fp
24f28     24 18 06 F1 | 	add	arg04, #36
24f2c     0C 19 02 FB | 	rdlong	arg04, arg04
24f30     10 4E 05 F1 | 	add	fp, #16
24f34     A7 18 62 FC | 	wrlong	arg04, fp
24f38     0C 17 02 F6 | 	mov	arg03, arg04
24f3c     0B 16 06 F1 | 	add	arg03, #11
24f40     0B 17 C2 FA | 	rdbyte	arg03, arg03
24f44     20 16 46 F5 | 	or	arg03, #32
24f48     0B 18 06 F1 | 	add	arg04, #11
24f4c     0C 17 42 FC | 	wrbyte	arg03, arg04
24f50     10 4E 85 F1 | 	sub	fp, #16
24f54     A7 18 02 FB | 	rdlong	arg04, fp
24f58     0C 13 02 FB | 	rdlong	arg01, arg04
24f5c     10 4E 05 F1 | 	add	fp, #16
24f60     A7 14 02 FB | 	rdlong	arg02, fp
24f64     14 4E 85 F1 | 	sub	fp, #20
24f68     08 18 06 F1 | 	add	arg04, #8
24f6c     0C 17 02 FB | 	rdlong	arg03, arg04
24f70     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
24f74     14 4E 05 F1 | 	add	fp, #20
24f78     A7 12 02 FB | 	rdlong	arg01, fp
24f7c     1C 12 06 F1 | 	add	arg01, #28
24f80     10 4E 85 F1 | 	sub	fp, #16
24f84     A7 18 02 FB | 	rdlong	arg04, fp
24f88     0C 18 06 F1 | 	add	arg04, #12
24f8c     0C 15 02 FB | 	rdlong	arg02, arg04
24f90     09 15 62 FC | 	wrlong	arg02, arg01
24f94     10 4E 05 F1 | 	add	fp, #16
24f98     A7 12 02 FB | 	rdlong	arg01, fp
24f9c     16 12 06 F1 | 	add	arg01, #22
24fa0     04 4E 85 F1 | 	sub	fp, #4
24fa4     A7 14 02 FB | 	rdlong	arg02, fp
24fa8     09 15 62 FC | 	wrlong	arg02, arg01
24fac     04 4E 05 F1 | 	add	fp, #4
24fb0     A7 12 02 FB | 	rdlong	arg01, fp
24fb4     12 12 06 F1 | 	add	arg01, #18
24fb8     09 01 58 FC | 	wrword	#0, arg01
24fbc     08 4E 85 F1 | 	sub	fp, #8
24fc0     A7 18 02 FB | 	rdlong	arg04, fp
24fc4     03 18 06 F1 | 	add	arg04, #3
24fc8     0C 03 48 FC | 	wrbyte	#1, arg04
24fcc     A7 12 02 FB | 	rdlong	arg01, fp
24fd0     0C 4E 85 F1 | 	sub	fp, #12
24fd4     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
24fd8     08 4E 05 F1 | 	add	fp, #8
24fdc     A7 FA 61 FC | 	wrlong	result1, fp
24fe0     04 4E 85 F1 | 	sub	fp, #4
24fe4     A7 18 02 FB | 	rdlong	arg04, fp
24fe8     0C 17 02 F6 | 	mov	arg03, arg04
24fec     04 4E 85 F1 | 	sub	fp, #4
24ff0     10 18 06 F1 | 	add	arg04, #16
24ff4     0C 19 C2 FA | 	rdbyte	arg04, arg04
24ff8     BF 18 06 F5 | 	and	arg04, #191
24ffc     10 16 06 F1 | 	add	arg03, #16
25000     0B 19 42 FC | 	wrbyte	arg04, arg03
25004                 | LR__3821
25004                 | LR__3822
25004                 | LR__3823
25004                 | ' 					dir = fp->dir_ptr;
25004                 | ' 					dir[ 11 ] |=  0x20 ;
25004                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
25004                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
25004                 | ' 					st_dword(dir +  22 , tm);
25004                 | ' 					st_word(dir +  18 , 0);
25004                 | ' 					fs->wflag = 1;
25004                 | ' 					res = sync_fs(fs);
25004                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
25004                 | ' 				}
25004                 | ' 			}
25004                 | ' 		}
25004                 | ' 	}
25004                 | ' 
25004                 | ' 	return res ;
25004     08 4E 05 F1 | 	add	fp, #8
25008     A7 FA 01 FB | 	rdlong	result1, fp
2500c     08 4E 85 F1 | 	sub	fp, #8
25010                 | LR__3824
25010     A7 F0 03 F6 | 	mov	ptra, fp
25014     B2 00 A0 FD | 	call	#popregs_
25018                 | _fatfs_cc_f_sync_ret
25018     2D 00 64 FD | 	ret
2501c                 | 
2501c                 | _fatfs_cc_f_close
2501c     01 4A 05 F6 | 	mov	COUNT_, #1
25020     A8 00 A0 FD | 	call	#pushregs_
25024     10 F0 07 F1 | 	add	ptra, #16
25028     04 4E 05 F1 | 	add	fp, #4
2502c     A7 12 62 FC | 	wrlong	arg01, fp
25030     04 4E 85 F1 | 	sub	fp, #4
25034     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
25038     08 4E 05 F1 | 	add	fp, #8
2503c     A7 FA 61 FC | 	wrlong	result1, fp
25040     08 4E 85 F1 | 	sub	fp, #8
25044     00 FA 0D F2 | 	cmp	result1, #0 wz
25048     38 00 90 5D |  if_ne	jmp	#LR__3830
2504c     04 4E 05 F1 | 	add	fp, #4
25050     A7 12 02 FB | 	rdlong	arg01, fp
25054     08 4E 05 F1 | 	add	fp, #8
25058     A7 14 02 F6 | 	mov	arg02, fp
2505c     0C 4E 85 F1 | 	sub	fp, #12
25060     9C E6 BF FD | 	call	#_fatfs_cc_validate
25064     08 4E 05 F1 | 	add	fp, #8
25068     A7 FA 61 FC | 	wrlong	result1, fp
2506c     08 4E 85 F1 | 	sub	fp, #8
25070     00 FA 0D F2 | 	cmp	result1, #0 wz
25074     04 4E 05 A1 |  if_e	add	fp, #4
25078     A7 1E 02 AB |  if_e	rdlong	local01, fp
2507c     04 4E 85 A1 |  if_e	sub	fp, #4
25080     0F 01 68 AC |  if_e	wrlong	#0, local01
25084                 | LR__3830
25084                 | ' 
25084                 | ' 
25084                 | ' 
25084                 | ' 
25084                 | ' 			fp->obj.fs = 0;
25084                 | ' #line 4192 "ff.c"
25084                 | ' 		}
25084                 | ' 	}
25084                 | ' 	return res;
25084     08 4E 05 F1 | 	add	fp, #8
25088     A7 FA 01 FB | 	rdlong	result1, fp
2508c     08 4E 85 F1 | 	sub	fp, #8
25090     A7 F0 03 F6 | 	mov	ptra, fp
25094     B2 00 A0 FD | 	call	#popregs_
25098                 | _fatfs_cc_f_close_ret
25098     2D 00 64 FD | 	ret
2509c                 | 
2509c                 | _fatfs_cc_f_lseek
2509c     00 4A 05 F6 | 	mov	COUNT_, #0
250a0     A8 00 A0 FD | 	call	#pushregs_
250a4     24 F0 07 F1 | 	add	ptra, #36
250a8     04 4E 05 F1 | 	add	fp, #4
250ac     A7 12 62 FC | 	wrlong	arg01, fp
250b0     04 4E 05 F1 | 	add	fp, #4
250b4     A7 14 62 FC | 	wrlong	arg02, fp
250b8     04 4E 85 F1 | 	sub	fp, #4
250bc     A7 12 02 FB | 	rdlong	arg01, fp
250c0     0C 4E 05 F1 | 	add	fp, #12
250c4     A7 14 02 F6 | 	mov	arg02, fp
250c8     10 4E 85 F1 | 	sub	fp, #16
250cc     30 E6 BF FD | 	call	#_fatfs_cc_validate
250d0     0C 4E 05 F1 | 	add	fp, #12
250d4     A7 FA 61 FC | 	wrlong	result1, fp
250d8     0C 4E 85 F1 | 	sub	fp, #12
250dc     00 FA 0D F2 | 	cmp	result1, #0 wz
250e0     1C 00 90 5D |  if_ne	jmp	#LR__3840
250e4     04 4E 05 F1 | 	add	fp, #4
250e8     A7 18 02 FB | 	rdlong	arg04, fp
250ec     11 18 06 F1 | 	add	arg04, #17
250f0     0C 19 C2 FA | 	rdbyte	arg04, arg04
250f4     08 4E 05 F1 | 	add	fp, #8
250f8     A7 18 62 FC | 	wrlong	arg04, fp
250fc     0C 4E 85 F1 | 	sub	fp, #12
25100                 | LR__3840
25100     0C 4E 05 F1 | 	add	fp, #12
25104     A7 18 0A FB | 	rdlong	arg04, fp wz
25108     0C 4E 85 F1 | 	sub	fp, #12
2510c     0C 4E 05 51 |  if_ne	add	fp, #12
25110     A7 FA 01 5B |  if_ne	rdlong	result1, fp
25114     0C 4E 85 51 |  if_ne	sub	fp, #12
25118     40 06 90 5D |  if_ne	jmp	#LR__3863
2511c     04 4E 05 F1 | 	add	fp, #4
25120     A7 18 02 FB | 	rdlong	arg04, fp
25124     04 4E 05 F1 | 	add	fp, #4
25128     A7 16 02 FB | 	rdlong	arg03, fp
2512c     08 4E 85 F1 | 	sub	fp, #8
25130     0C 18 06 F1 | 	add	arg04, #12
25134     0C 19 02 FB | 	rdlong	arg04, arg04
25138     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2513c     3C 00 90 ED |  if_be	jmp	#LR__3841
25140     04 4E 05 F1 | 	add	fp, #4
25144     A7 16 02 FB | 	rdlong	arg03, fp
25148     04 4E 85 F1 | 	sub	fp, #4
2514c     10 16 06 F1 | 	add	arg03, #16
25150     0B 17 C2 FA | 	rdbyte	arg03, arg03
25154     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
25158     02 16 CE F7 | 	test	arg03, #2 wz
2515c     1C 00 90 5D |  if_ne	jmp	#LR__3841
25160     04 4E 05 F1 | 	add	fp, #4
25164     A7 16 02 FB | 	rdlong	arg03, fp
25168     0C 16 06 F1 | 	add	arg03, #12
2516c     0B 17 02 FB | 	rdlong	arg03, arg03
25170     04 4E 05 F1 | 	add	fp, #4
25174     A7 16 62 FC | 	wrlong	arg03, fp
25178     08 4E 85 F1 | 	sub	fp, #8
2517c                 | LR__3841
2517c     04 4E 05 F1 | 	add	fp, #4
25180     A7 16 02 FB | 	rdlong	arg03, fp
25184     14 16 06 F1 | 	add	arg03, #20
25188     0B 17 02 FB | 	rdlong	arg03, arg03
2518c     1C 4E 05 F1 | 	add	fp, #28
25190     A7 16 62 FC | 	wrlong	arg03, fp
25194     1C 4E 85 F1 | 	sub	fp, #28
25198     A7 16 02 FB | 	rdlong	arg03, fp
2519c     18 4E 05 F1 | 	add	fp, #24
251a0     A7 00 68 FC | 	wrlong	#0, fp
251a4     14 16 06 F1 | 	add	arg03, #20
251a8     0B 01 68 FC | 	wrlong	#0, arg03
251ac     14 4E 85 F1 | 	sub	fp, #20
251b0     A7 16 02 FB | 	rdlong	arg03, fp
251b4     08 4E 85 F1 | 	sub	fp, #8
251b8     01 16 16 F2 | 	cmp	arg03, #1 wc
251bc     E4 03 90 CD |  if_b	jmp	#LR__3857
251c0     10 4E 05 F1 | 	add	fp, #16
251c4     A7 16 02 FB | 	rdlong	arg03, fp
251c8     0A 16 06 F1 | 	add	arg03, #10
251cc     0B 19 E2 FA | 	rdword	arg04, arg03
251d0     09 18 66 F0 | 	shl	arg04, #9
251d4     08 4E 05 F1 | 	add	fp, #8
251d8     A7 18 62 FC | 	wrlong	arg04, fp
251dc     08 4E 05 F1 | 	add	fp, #8
251e0     A7 18 02 FB | 	rdlong	arg04, fp
251e4     20 4E 85 F1 | 	sub	fp, #32
251e8     01 18 16 F2 | 	cmp	arg04, #1 wc
251ec     AC 00 90 CD |  if_b	jmp	#LR__3842
251f0     08 4E 05 F1 | 	add	fp, #8
251f4     A7 18 02 FB | 	rdlong	arg04, fp
251f8     01 18 86 F1 | 	sub	arg04, #1
251fc     10 4E 05 F1 | 	add	fp, #16
25200     A7 16 02 FB | 	rdlong	arg03, fp
25204     0B 19 12 FD | 	qdiv	arg04, arg03
25208     08 4E 05 F1 | 	add	fp, #8
2520c     A7 FA 01 FB | 	rdlong	result1, fp
25210     01 FA 85 F1 | 	sub	result1, #1
25214     18 18 62 FD | 	getqx	arg04
25218     0B FB 11 FD | 	qdiv	result1, arg03
2521c     20 4E 85 F1 | 	sub	fp, #32
25220     18 16 62 FD | 	getqx	arg03
25224     0B 19 12 F2 | 	cmp	arg04, arg03 wc
25228     70 00 90 CD |  if_b	jmp	#LR__3842
2522c     04 4E 05 F1 | 	add	fp, #4
25230     A7 16 02 FB | 	rdlong	arg03, fp
25234     1C 4E 05 F1 | 	add	fp, #28
25238     A7 FA 01 FB | 	rdlong	result1, fp
2523c     01 FA 85 F1 | 	sub	result1, #1
25240     08 4E 85 F1 | 	sub	fp, #8
25244     A7 18 02 FB | 	rdlong	arg04, fp
25248     01 18 86 F1 | 	sub	arg04, #1
2524c     0C FB 21 F5 | 	andn	result1, arg04
25250     14 16 06 F1 | 	add	arg03, #20
25254     0B FB 61 FC | 	wrlong	result1, arg03
25258     10 4E 85 F1 | 	sub	fp, #16
2525c     A7 16 02 FB | 	rdlong	arg03, fp
25260     04 4E 85 F1 | 	sub	fp, #4
25264     A7 18 02 FB | 	rdlong	arg04, fp
25268     14 18 06 F1 | 	add	arg04, #20
2526c     0C 19 02 FB | 	rdlong	arg04, arg04
25270     0C 17 82 F1 | 	sub	arg03, arg04
25274     04 4E 05 F1 | 	add	fp, #4
25278     A7 16 62 FC | 	wrlong	arg03, fp
2527c     04 4E 85 F1 | 	sub	fp, #4
25280     A7 16 02 FB | 	rdlong	arg03, fp
25284     18 16 06 F1 | 	add	arg03, #24
25288     0B 17 02 FB | 	rdlong	arg03, arg03
2528c     10 4E 05 F1 | 	add	fp, #16
25290     A7 16 62 FC | 	wrlong	arg03, fp
25294     14 4E 85 F1 | 	sub	fp, #20
25298     D0 00 90 FD | 	jmp	#LR__3846
2529c                 | LR__3842
2529c     04 4E 05 F1 | 	add	fp, #4
252a0     A7 16 02 FB | 	rdlong	arg03, fp
252a4     08 16 06 F1 | 	add	arg03, #8
252a8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
252ac     10 4E 05 F1 | 	add	fp, #16
252b0     A7 16 62 FC | 	wrlong	arg03, fp
252b4     14 4E 85 F1 | 	sub	fp, #20
252b8     94 00 90 5D |  if_ne	jmp	#LR__3845
252bc     04 4E 05 F1 | 	add	fp, #4
252c0     A7 12 02 FB | 	rdlong	arg01, fp
252c4     04 4E 85 F1 | 	sub	fp, #4
252c8     00 14 06 F6 | 	mov	arg02, #0
252cc     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
252d0     14 4E 05 F1 | 	add	fp, #20
252d4     A7 FA 61 FC | 	wrlong	result1, fp
252d8     14 4E 85 F1 | 	sub	fp, #20
252dc     01 FA 0D F2 | 	cmp	result1, #1 wz
252e0     1C 00 90 5D |  if_ne	jmp	#LR__3843
252e4     04 4E 05 F1 | 	add	fp, #4
252e8     A7 16 02 FB | 	rdlong	arg03, fp
252ec     04 4E 85 F1 | 	sub	fp, #4
252f0     11 16 06 F1 | 	add	arg03, #17
252f4     0B 05 48 FC | 	wrbyte	#2, arg03
252f8     02 FA 05 F6 | 	mov	result1, #2
252fc     5C 04 90 FD | 	jmp	#LR__3863
25300                 | LR__3843
25300     14 4E 05 F1 | 	add	fp, #20
25304     A7 FA 01 FB | 	rdlong	result1, fp
25308     14 4E 85 F1 | 	sub	fp, #20
2530c     FF FF 7F FF 
25310     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25314     1C 00 90 5D |  if_ne	jmp	#LR__3844
25318     04 4E 05 F1 | 	add	fp, #4
2531c     A7 16 02 FB | 	rdlong	arg03, fp
25320     04 4E 85 F1 | 	sub	fp, #4
25324     11 16 06 F1 | 	add	arg03, #17
25328     0B 03 48 FC | 	wrbyte	#1, arg03
2532c     01 FA 05 F6 | 	mov	result1, #1
25330     28 04 90 FD | 	jmp	#LR__3863
25334                 | LR__3844
25334     04 4E 05 F1 | 	add	fp, #4
25338     A7 16 02 FB | 	rdlong	arg03, fp
2533c     10 4E 05 F1 | 	add	fp, #16
25340     A7 18 02 FB | 	rdlong	arg04, fp
25344     14 4E 85 F1 | 	sub	fp, #20
25348     08 16 06 F1 | 	add	arg03, #8
2534c     0B 19 62 FC | 	wrlong	arg04, arg03
25350                 | LR__3845
25350     04 4E 05 F1 | 	add	fp, #4
25354     A7 16 02 FB | 	rdlong	arg03, fp
25358     10 4E 05 F1 | 	add	fp, #16
2535c     A7 18 02 FB | 	rdlong	arg04, fp
25360     14 4E 85 F1 | 	sub	fp, #20
25364     18 16 06 F1 | 	add	arg03, #24
25368     0B 19 62 FC | 	wrlong	arg04, arg03
2536c                 | LR__3846
2536c     14 4E 05 F1 | 	add	fp, #20
25370     A7 16 0A FB | 	rdlong	arg03, fp wz
25374     14 4E 85 F1 | 	sub	fp, #20
25378     28 02 90 AD |  if_e	jmp	#LR__3856
2537c                 | ' 				while (ofs > bcs) {
2537c                 | LR__3847
2537c     08 4E 05 F1 | 	add	fp, #8
25380     A7 18 02 FB | 	rdlong	arg04, fp
25384     10 4E 05 F1 | 	add	fp, #16
25388     A7 16 02 FB | 	rdlong	arg03, fp
2538c     18 4E 85 F1 | 	sub	fp, #24
25390     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
25394     68 01 90 ED |  if_be	jmp	#LR__3853
25398     08 4E 05 F1 | 	add	fp, #8
2539c     A7 18 02 FB | 	rdlong	arg04, fp
253a0     10 4E 05 F1 | 	add	fp, #16
253a4     A7 16 02 FB | 	rdlong	arg03, fp
253a8     0B 19 82 F1 | 	sub	arg04, arg03
253ac     10 4E 85 F1 | 	sub	fp, #16
253b0     A7 18 62 FC | 	wrlong	arg04, fp
253b4     04 4E 85 F1 | 	sub	fp, #4
253b8     A7 18 02 FB | 	rdlong	arg04, fp
253bc     0C FB 01 F6 | 	mov	result1, arg04
253c0     14 18 06 F1 | 	add	arg04, #20
253c4     0C 19 02 FB | 	rdlong	arg04, arg04
253c8     14 4E 05 F1 | 	add	fp, #20
253cc     A7 16 02 FB | 	rdlong	arg03, fp
253d0     0B 19 02 F1 | 	add	arg04, arg03
253d4     14 FA 05 F1 | 	add	result1, #20
253d8     FD 18 62 FC | 	wrlong	arg04, result1
253dc     14 4E 85 F1 | 	sub	fp, #20
253e0     A7 16 02 FB | 	rdlong	arg03, fp
253e4     04 4E 85 F1 | 	sub	fp, #4
253e8     10 16 06 F1 | 	add	arg03, #16
253ec     0B 17 C2 FA | 	rdbyte	arg03, arg03
253f0     02 16 CE F7 | 	test	arg03, #2 wz
253f4     3C 00 90 AD |  if_e	jmp	#LR__3848
253f8     04 4E 05 F1 | 	add	fp, #4
253fc     A7 12 02 FB | 	rdlong	arg01, fp
25400     10 4E 05 F1 | 	add	fp, #16
25404     A7 14 02 FB | 	rdlong	arg02, fp
25408     14 4E 85 F1 | 	sub	fp, #20
2540c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
25410     14 4E 05 F1 | 	add	fp, #20
25414     A7 FA 61 FC | 	wrlong	result1, fp
25418     00 FA 4D F2 | 	cmps	result1, #0 wz
2541c     14 4E 85 F1 | 	sub	fp, #20
25420     08 4E 05 A1 |  if_e	add	fp, #8
25424     A7 00 68 AC |  if_e	wrlong	#0, fp
25428     08 4E 85 A1 |  if_e	sub	fp, #8
2542c                 | ' 							ofs = 0; break;
2542c     D0 00 90 AD |  if_e	jmp	#LR__3853
25430     24 00 90 FD | 	jmp	#LR__3849
25434                 | LR__3848
25434     04 4E 05 F1 | 	add	fp, #4
25438     A7 12 02 FB | 	rdlong	arg01, fp
2543c     10 4E 05 F1 | 	add	fp, #16
25440     A7 14 02 FB | 	rdlong	arg02, fp
25444     14 4E 85 F1 | 	sub	fp, #20
25448     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2544c     14 4E 05 F1 | 	add	fp, #20
25450     A7 FA 61 FC | 	wrlong	result1, fp
25454     14 4E 85 F1 | 	sub	fp, #20
25458                 | LR__3849
25458     14 4E 05 F1 | 	add	fp, #20
2545c     A7 16 02 FB | 	rdlong	arg03, fp
25460     14 4E 85 F1 | 	sub	fp, #20
25464     FF FF 7F FF 
25468     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2546c     1C 00 90 5D |  if_ne	jmp	#LR__3850
25470     04 4E 05 F1 | 	add	fp, #4
25474     A7 16 02 FB | 	rdlong	arg03, fp
25478     04 4E 85 F1 | 	sub	fp, #4
2547c     11 16 06 F1 | 	add	arg03, #17
25480     0B 03 48 FC | 	wrbyte	#1, arg03
25484     01 FA 05 F6 | 	mov	result1, #1
25488     D0 02 90 FD | 	jmp	#LR__3863
2548c                 | LR__3850
2548c     14 4E 05 F1 | 	add	fp, #20
25490     A7 16 02 FB | 	rdlong	arg03, fp
25494     14 4E 85 F1 | 	sub	fp, #20
25498     02 16 16 F2 | 	cmp	arg03, #2 wc
2549c     24 00 90 CD |  if_b	jmp	#LR__3851
254a0     10 4E 05 F1 | 	add	fp, #16
254a4     A7 18 02 FB | 	rdlong	arg04, fp
254a8     04 4E 05 F1 | 	add	fp, #4
254ac     A7 16 02 FB | 	rdlong	arg03, fp
254b0     14 4E 85 F1 | 	sub	fp, #20
254b4     18 18 06 F1 | 	add	arg04, #24
254b8     0C 19 02 FB | 	rdlong	arg04, arg04
254bc     0C 17 12 F2 | 	cmp	arg03, arg04 wc
254c0     1C 00 90 CD |  if_b	jmp	#LR__3852
254c4                 | LR__3851
254c4     04 4E 05 F1 | 	add	fp, #4
254c8     A7 16 02 FB | 	rdlong	arg03, fp
254cc     04 4E 85 F1 | 	sub	fp, #4
254d0     11 16 06 F1 | 	add	arg03, #17
254d4     0B 05 48 FC | 	wrbyte	#2, arg03
254d8     02 FA 05 F6 | 	mov	result1, #2
254dc     7C 02 90 FD | 	jmp	#LR__3863
254e0                 | LR__3852
254e0     04 4E 05 F1 | 	add	fp, #4
254e4     A7 18 02 FB | 	rdlong	arg04, fp
254e8     10 4E 05 F1 | 	add	fp, #16
254ec     A7 16 02 FB | 	rdlong	arg03, fp
254f0     14 4E 85 F1 | 	sub	fp, #20
254f4     18 18 06 F1 | 	add	arg04, #24
254f8     0C 17 62 FC | 	wrlong	arg03, arg04
254fc     7C FE 9F FD | 	jmp	#LR__3847
25500                 | LR__3853
25500     04 4E 05 F1 | 	add	fp, #4
25504     A7 16 02 FB | 	rdlong	arg03, fp
25508     0B 13 02 F6 | 	mov	arg01, arg03
2550c     14 16 06 F1 | 	add	arg03, #20
25510     0B 15 02 FB | 	rdlong	arg02, arg03
25514     04 4E 05 F1 | 	add	fp, #4
25518     A7 16 02 FB | 	rdlong	arg03, fp
2551c     0B 15 02 F1 | 	add	arg02, arg03
25520     14 12 06 F1 | 	add	arg01, #20
25524     09 15 62 FC | 	wrlong	arg02, arg01
25528     A7 16 02 FB | 	rdlong	arg03, fp
2552c     08 4E 85 F1 | 	sub	fp, #8
25530     FF 17 CE F7 | 	test	arg03, #511 wz
25534     6C 00 90 AD |  if_e	jmp	#LR__3855
25538     10 4E 05 F1 | 	add	fp, #16
2553c     A7 12 02 FB | 	rdlong	arg01, fp
25540     04 4E 05 F1 | 	add	fp, #4
25544     A7 14 02 FB | 	rdlong	arg02, fp
25548     14 4E 85 F1 | 	sub	fp, #20
2554c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
25550     1C 4E 05 F1 | 	add	fp, #28
25554     A7 FA 61 FC | 	wrlong	result1, fp
25558     1C 4E 85 F1 | 	sub	fp, #28
2555c     00 FA 0D F2 | 	cmp	result1, #0 wz
25560     1C 00 90 5D |  if_ne	jmp	#LR__3854
25564     04 4E 05 F1 | 	add	fp, #4
25568     A7 16 02 FB | 	rdlong	arg03, fp
2556c     04 4E 85 F1 | 	sub	fp, #4
25570     11 16 06 F1 | 	add	arg03, #17
25574     0B 05 48 FC | 	wrbyte	#2, arg03
25578     02 FA 05 F6 | 	mov	result1, #2
2557c     DC 01 90 FD | 	jmp	#LR__3863
25580                 | LR__3854
25580     1C 4E 05 F1 | 	add	fp, #28
25584     A7 18 02 FB | 	rdlong	arg04, fp
25588     14 4E 85 F1 | 	sub	fp, #20
2558c     A7 16 02 FB | 	rdlong	arg03, fp
25590     09 16 46 F0 | 	shr	arg03, #9
25594     0B 19 02 F1 | 	add	arg04, arg03
25598     14 4E 05 F1 | 	add	fp, #20
2559c     A7 18 62 FC | 	wrlong	arg04, fp
255a0     1C 4E 85 F1 | 	sub	fp, #28
255a4                 | LR__3855
255a4                 | LR__3856
255a4                 | LR__3857
255a4     04 4E 05 F1 | 	add	fp, #4
255a8     A7 18 02 FB | 	rdlong	arg04, fp
255ac     0C 17 02 F6 | 	mov	arg03, arg04
255b0     04 4E 85 F1 | 	sub	fp, #4
255b4     14 16 06 F1 | 	add	arg03, #20
255b8     0B 17 02 FB | 	rdlong	arg03, arg03
255bc     0C 18 06 F1 | 	add	arg04, #12
255c0     0C 19 02 FB | 	rdlong	arg04, arg04
255c4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
255c8     3C 00 90 ED |  if_be	jmp	#LR__3858
255cc     04 4E 05 F1 | 	add	fp, #4
255d0     A7 18 02 FB | 	rdlong	arg04, fp
255d4     0C 17 02 F6 | 	mov	arg03, arg04
255d8     14 18 06 F1 | 	add	arg04, #20
255dc     0C 19 02 FB | 	rdlong	arg04, arg04
255e0     0C 16 06 F1 | 	add	arg03, #12
255e4     0B 19 62 FC | 	wrlong	arg04, arg03
255e8     A7 18 02 FB | 	rdlong	arg04, fp
255ec     0C 17 02 F6 | 	mov	arg03, arg04
255f0     04 4E 85 F1 | 	sub	fp, #4
255f4     10 18 06 F1 | 	add	arg04, #16
255f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
255fc     40 18 46 F5 | 	or	arg04, #64
25600     10 16 06 F1 | 	add	arg03, #16
25604     0B 19 42 FC | 	wrbyte	arg04, arg03
25608                 | LR__3858
25608     04 4E 05 F1 | 	add	fp, #4
2560c     A7 16 02 FB | 	rdlong	arg03, fp
25610     04 4E 85 F1 | 	sub	fp, #4
25614     14 16 06 F1 | 	add	arg03, #20
25618     0B 17 02 FB | 	rdlong	arg03, arg03
2561c     FF 17 CE F7 | 	test	arg03, #511 wz
25620     2C 01 90 AD |  if_e	jmp	#LR__3862
25624     04 4E 05 F1 | 	add	fp, #4
25628     A7 18 02 FB | 	rdlong	arg04, fp
2562c     18 4E 05 F1 | 	add	fp, #24
25630     A7 16 02 FB | 	rdlong	arg03, fp
25634     1C 4E 85 F1 | 	sub	fp, #28
25638     1C 18 06 F1 | 	add	arg04, #28
2563c     0C 19 02 FB | 	rdlong	arg04, arg04
25640     0C 17 0A F2 | 	cmp	arg03, arg04 wz
25644     08 01 90 AD |  if_e	jmp	#LR__3862
25648     04 4E 05 F1 | 	add	fp, #4
2564c     A7 16 02 FB | 	rdlong	arg03, fp
25650     04 4E 85 F1 | 	sub	fp, #4
25654     10 16 06 F1 | 	add	arg03, #16
25658     0B 17 C2 FA | 	rdbyte	arg03, arg03
2565c     80 16 CE F7 | 	test	arg03, #128 wz
25660     7C 00 90 AD |  if_e	jmp	#LR__3860
25664     10 4E 05 F1 | 	add	fp, #16
25668     A7 16 02 FB | 	rdlong	arg03, fp
2566c     01 16 06 F1 | 	add	arg03, #1
25670     0B 13 C2 FA | 	rdbyte	arg01, arg03
25674     0C 4E 85 F1 | 	sub	fp, #12
25678     A7 16 02 FB | 	rdlong	arg03, fp
2567c     0B 15 02 F6 | 	mov	arg02, arg03
25680     28 14 06 F1 | 	add	arg02, #40
25684     04 4E 85 F1 | 	sub	fp, #4
25688     1C 16 06 F1 | 	add	arg03, #28
2568c     0B 17 02 FB | 	rdlong	arg03, arg03
25690     01 18 06 F6 | 	mov	arg04, #1
25694     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
25698     00 FA 0D F2 | 	cmp	result1, #0 wz
2569c     1C 00 90 AD |  if_e	jmp	#LR__3859
256a0     04 4E 05 F1 | 	add	fp, #4
256a4     A7 16 02 FB | 	rdlong	arg03, fp
256a8     04 4E 85 F1 | 	sub	fp, #4
256ac     11 16 06 F1 | 	add	arg03, #17
256b0     0B 03 48 FC | 	wrbyte	#1, arg03
256b4     01 FA 05 F6 | 	mov	result1, #1
256b8     A0 00 90 FD | 	jmp	#LR__3863
256bc                 | LR__3859
256bc     04 4E 05 F1 | 	add	fp, #4
256c0     A7 18 02 FB | 	rdlong	arg04, fp
256c4     0C 17 02 F6 | 	mov	arg03, arg04
256c8     04 4E 85 F1 | 	sub	fp, #4
256cc     10 18 06 F1 | 	add	arg04, #16
256d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
256d4     7F 18 06 F5 | 	and	arg04, #127
256d8     10 16 06 F1 | 	add	arg03, #16
256dc     0B 19 42 FC | 	wrbyte	arg04, arg03
256e0                 | LR__3860
256e0     10 4E 05 F1 | 	add	fp, #16
256e4     A7 16 02 FB | 	rdlong	arg03, fp
256e8     01 16 06 F1 | 	add	arg03, #1
256ec     0B 13 C2 FA | 	rdbyte	arg01, arg03
256f0     0C 4E 85 F1 | 	sub	fp, #12
256f4     A7 14 02 FB | 	rdlong	arg02, fp
256f8     28 14 06 F1 | 	add	arg02, #40
256fc     18 4E 05 F1 | 	add	fp, #24
25700     A7 16 02 FB | 	rdlong	arg03, fp
25704     1C 4E 85 F1 | 	sub	fp, #28
25708     01 18 06 F6 | 	mov	arg04, #1
2570c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
25710     00 FA 0D F2 | 	cmp	result1, #0 wz
25714     1C 00 90 AD |  if_e	jmp	#LR__3861
25718     04 4E 05 F1 | 	add	fp, #4
2571c     A7 16 02 FB | 	rdlong	arg03, fp
25720     04 4E 85 F1 | 	sub	fp, #4
25724     11 16 06 F1 | 	add	arg03, #17
25728     0B 03 48 FC | 	wrbyte	#1, arg03
2572c     01 FA 05 F6 | 	mov	result1, #1
25730     28 00 90 FD | 	jmp	#LR__3863
25734                 | LR__3861
25734     04 4E 05 F1 | 	add	fp, #4
25738     A7 18 02 FB | 	rdlong	arg04, fp
2573c     18 4E 05 F1 | 	add	fp, #24
25740     A7 16 02 FB | 	rdlong	arg03, fp
25744     1C 4E 85 F1 | 	sub	fp, #28
25748     1C 18 06 F1 | 	add	arg04, #28
2574c     0C 17 62 FC | 	wrlong	arg03, arg04
25750                 | LR__3862
25750                 | ' 
25750                 | ' 			fp->sect = nsect;
25750                 | ' 		}
25750                 | ' 	}
25750                 | ' 
25750                 | ' 	return res ;
25750     0C 4E 05 F1 | 	add	fp, #12
25754     A7 FA 01 FB | 	rdlong	result1, fp
25758     0C 4E 85 F1 | 	sub	fp, #12
2575c                 | LR__3863
2575c     A7 F0 03 F6 | 	mov	ptra, fp
25760     B2 00 A0 FD | 	call	#popregs_
25764                 | _fatfs_cc_f_lseek_ret
25764     2D 00 64 FD | 	ret
25768                 | 
25768                 | _fatfs_cc_f_opendir
25768     01 4A 05 F6 | 	mov	COUNT_, #1
2576c     A8 00 A0 FD | 	call	#pushregs_
25770     14 F0 07 F1 | 	add	ptra, #20
25774     04 4E 05 F1 | 	add	fp, #4
25778     A7 12 62 FC | 	wrlong	arg01, fp
2577c     04 4E 05 F1 | 	add	fp, #4
25780     A7 14 62 FC | 	wrlong	arg02, fp
25784     04 4E 85 F1 | 	sub	fp, #4
25788     A7 16 0A FB | 	rdlong	arg03, fp wz
2578c     04 4E 85 F1 | 	sub	fp, #4
25790     09 FA 05 A6 |  if_e	mov	result1, #9
25794     78 01 90 AD |  if_e	jmp	#LR__3876
25798     08 4E 05 F1 | 	add	fp, #8
2579c     A7 12 02 F6 | 	mov	arg01, fp
257a0     08 4E 05 F1 | 	add	fp, #8
257a4     A7 14 02 F6 | 	mov	arg02, fp
257a8     10 4E 85 F1 | 	sub	fp, #16
257ac     00 16 06 F6 | 	mov	arg03, #0
257b0     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
257b4     0C 4E 05 F1 | 	add	fp, #12
257b8     A7 FA 61 FC | 	wrlong	result1, fp
257bc     0C 4E 85 F1 | 	sub	fp, #12
257c0     00 FA 0D F2 | 	cmp	result1, #0 wz
257c4     20 01 90 5D |  if_ne	jmp	#LR__3875
257c8     04 4E 05 F1 | 	add	fp, #4
257cc     A7 16 02 FB | 	rdlong	arg03, fp
257d0     0C 4E 05 F1 | 	add	fp, #12
257d4     A7 FA 01 FB | 	rdlong	result1, fp
257d8     0B FB 61 FC | 	wrlong	result1, arg03
257dc     0C 4E 85 F1 | 	sub	fp, #12
257e0     A7 12 02 FB | 	rdlong	arg01, fp
257e4     04 4E 05 F1 | 	add	fp, #4
257e8     A7 14 02 FB | 	rdlong	arg02, fp
257ec     08 4E 85 F1 | 	sub	fp, #8
257f0     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
257f4     0C 4E 05 F1 | 	add	fp, #12
257f8     A7 FA 61 FC | 	wrlong	result1, fp
257fc     0C 4E 85 F1 | 	sub	fp, #12
25800     00 FA 0D F2 | 	cmp	result1, #0 wz
25804     C4 00 90 5D |  if_ne	jmp	#LR__3874
25808     04 4E 05 F1 | 	add	fp, #4
2580c     A7 16 02 FB | 	rdlong	arg03, fp
25810     04 4E 85 F1 | 	sub	fp, #4
25814     2B 16 06 F1 | 	add	arg03, #43
25818     0B 17 C2 FA | 	rdbyte	arg03, arg03
2581c     80 16 CE F7 | 	test	arg03, #128 wz
25820     58 00 90 5D |  if_ne	jmp	#LR__3872
25824     04 4E 05 F1 | 	add	fp, #4
25828     A7 16 02 FB | 	rdlong	arg03, fp
2582c     04 4E 85 F1 | 	sub	fp, #4
25830     06 16 06 F1 | 	add	arg03, #6
25834     0B 17 C2 FA | 	rdbyte	arg03, arg03
25838     10 16 CE F7 | 	test	arg03, #16 wz
2583c     30 00 90 AD |  if_e	jmp	#LR__3870
25840     04 4E 05 F1 | 	add	fp, #4
25844     A7 16 02 FB | 	rdlong	arg03, fp
25848     0B 1F 02 F6 | 	mov	local01, arg03
2584c     0C 4E 05 F1 | 	add	fp, #12
25850     A7 12 02 FB | 	rdlong	arg01, fp
25854     10 4E 85 F1 | 	sub	fp, #16
25858     1C 16 06 F1 | 	add	arg03, #28
2585c     0B 15 02 FB | 	rdlong	arg02, arg03
25860     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
25864     08 1E 06 F1 | 	add	local01, #8
25868     0F FB 61 FC | 	wrlong	result1, local01
2586c     0C 00 90 FD | 	jmp	#LR__3871
25870                 | LR__3870
25870     0C 4E 05 F1 | 	add	fp, #12
25874     A7 0A 68 FC | 	wrlong	#5, fp
25878     0C 4E 85 F1 | 	sub	fp, #12
2587c                 | LR__3871
2587c                 | LR__3872
2587c     0C 4E 05 F1 | 	add	fp, #12
25880     A7 1E 0A FB | 	rdlong	local01, fp wz
25884     0C 4E 85 F1 | 	sub	fp, #12
25888     40 00 90 5D |  if_ne	jmp	#LR__3873
2588c     04 4E 05 F1 | 	add	fp, #4
25890     A7 1E 02 FB | 	rdlong	local01, fp
25894     0C 4E 05 F1 | 	add	fp, #12
25898     A7 16 02 FB | 	rdlong	arg03, fp
2589c     06 16 06 F1 | 	add	arg03, #6
258a0     0B 17 E2 FA | 	rdword	arg03, arg03
258a4     04 1E 06 F1 | 	add	local01, #4
258a8     0F 17 52 FC | 	wrword	arg03, local01
258ac     0C 4E 85 F1 | 	sub	fp, #12
258b0     A7 12 02 FB | 	rdlong	arg01, fp
258b4     04 4E 85 F1 | 	sub	fp, #4
258b8     00 14 06 F6 | 	mov	arg02, #0
258bc     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
258c0     0C 4E 05 F1 | 	add	fp, #12
258c4     A7 FA 61 FC | 	wrlong	result1, fp
258c8     0C 4E 85 F1 | 	sub	fp, #12
258cc                 | LR__3873
258cc                 | LR__3874
258cc     0C 4E 05 F1 | 	add	fp, #12
258d0     A7 1E 02 FB | 	rdlong	local01, fp
258d4     0C 4E 85 F1 | 	sub	fp, #12
258d8     04 1E 0E F2 | 	cmp	local01, #4 wz
258dc     0C 4E 05 A1 |  if_e	add	fp, #12
258e0     A7 0A 68 AC |  if_e	wrlong	#5, fp
258e4     0C 4E 85 A1 |  if_e	sub	fp, #12
258e8                 | LR__3875
258e8     0C 4E 05 F1 | 	add	fp, #12
258ec     A7 1E 0A FB | 	rdlong	local01, fp wz
258f0     0C 4E 85 F1 | 	sub	fp, #12
258f4     04 4E 05 51 |  if_ne	add	fp, #4
258f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
258fc     04 4E 85 51 |  if_ne	sub	fp, #4
25900     0F 01 68 5C |  if_ne	wrlong	#0, local01
25904                 | ' 
25904                 | ' 	return res ;
25904     0C 4E 05 F1 | 	add	fp, #12
25908     A7 FA 01 FB | 	rdlong	result1, fp
2590c     0C 4E 85 F1 | 	sub	fp, #12
25910                 | LR__3876
25910     A7 F0 03 F6 | 	mov	ptra, fp
25914     B2 00 A0 FD | 	call	#popregs_
25918                 | _fatfs_cc_f_opendir_ret
25918     2D 00 64 FD | 	ret
2591c                 | 
2591c                 | _fatfs_cc_f_closedir
2591c     00 4A 05 F6 | 	mov	COUNT_, #0
25920     A8 00 A0 FD | 	call	#pushregs_
25924     10 F0 07 F1 | 	add	ptra, #16
25928     04 4E 05 F1 | 	add	fp, #4
2592c     A7 12 62 FC | 	wrlong	arg01, fp
25930     08 4E 05 F1 | 	add	fp, #8
25934     A7 14 02 F6 | 	mov	arg02, fp
25938     0C 4E 85 F1 | 	sub	fp, #12
2593c     C0 DD BF FD | 	call	#_fatfs_cc_validate
25940     08 4E 05 F1 | 	add	fp, #8
25944     A7 FA 61 FC | 	wrlong	result1, fp
25948     08 4E 85 F1 | 	sub	fp, #8
2594c     00 FA 0D F2 | 	cmp	result1, #0 wz
25950     04 4E 05 A1 |  if_e	add	fp, #4
25954     A7 FA 01 AB |  if_e	rdlong	result1, fp
25958     04 4E 85 A1 |  if_e	sub	fp, #4
2595c     FD 00 68 AC |  if_e	wrlong	#0, result1
25960                 | ' 
25960                 | ' 
25960                 | ' 
25960                 | ' 
25960                 | ' 		dp->obj.fs = 0;
25960                 | ' #line 4633 "ff.c"
25960                 | ' 	}
25960                 | ' 	return res;
25960     08 4E 05 F1 | 	add	fp, #8
25964     A7 FA 01 FB | 	rdlong	result1, fp
25968     08 4E 85 F1 | 	sub	fp, #8
2596c     A7 F0 03 F6 | 	mov	ptra, fp
25970     B2 00 A0 FD | 	call	#popregs_
25974                 | _fatfs_cc_f_closedir_ret
25974     2D 00 64 FD | 	ret
25978                 | 
25978                 | _fatfs_cc_f_readdir
25978     00 4A 05 F6 | 	mov	COUNT_, #0
2597c     A8 00 A0 FD | 	call	#pushregs_
25980     14 F0 07 F1 | 	add	ptra, #20
25984     04 4E 05 F1 | 	add	fp, #4
25988     A7 12 62 FC | 	wrlong	arg01, fp
2598c     04 4E 05 F1 | 	add	fp, #4
25990     A7 14 62 FC | 	wrlong	arg02, fp
25994     04 4E 85 F1 | 	sub	fp, #4
25998     A7 12 02 FB | 	rdlong	arg01, fp
2599c     0C 4E 05 F1 | 	add	fp, #12
259a0     A7 14 02 F6 | 	mov	arg02, fp
259a4     10 4E 85 F1 | 	sub	fp, #16
259a8     54 DD BF FD | 	call	#_fatfs_cc_validate
259ac     0C 4E 05 F1 | 	add	fp, #12
259b0     A7 FA 61 FC | 	wrlong	result1, fp
259b4     0C 4E 85 F1 | 	sub	fp, #12
259b8     00 FA 0D F2 | 	cmp	result1, #0 wz
259bc     BC 00 90 5D |  if_ne	jmp	#LR__3883
259c0     08 4E 05 F1 | 	add	fp, #8
259c4     A7 FA 09 FB | 	rdlong	result1, fp wz
259c8     08 4E 85 F1 | 	sub	fp, #8
259cc     24 00 90 5D |  if_ne	jmp	#LR__3880
259d0     04 4E 05 F1 | 	add	fp, #4
259d4     A7 12 02 FB | 	rdlong	arg01, fp
259d8     04 4E 85 F1 | 	sub	fp, #4
259dc     00 14 06 F6 | 	mov	arg02, #0
259e0     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
259e4     0C 4E 05 F1 | 	add	fp, #12
259e8     A7 FA 61 FC | 	wrlong	result1, fp
259ec     0C 4E 85 F1 | 	sub	fp, #12
259f0     88 00 90 FD | 	jmp	#LR__3882
259f4                 | LR__3880
259f4     04 4E 05 F1 | 	add	fp, #4
259f8     A7 12 02 FB | 	rdlong	arg01, fp
259fc     04 4E 85 F1 | 	sub	fp, #4
25a00     00 14 06 F6 | 	mov	arg02, #0
25a04     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
25a08     0C 4E 05 F1 | 	add	fp, #12
25a0c     A7 FA 61 FC | 	wrlong	result1, fp
25a10     0C 4E 85 F1 | 	sub	fp, #12
25a14     04 FA 0D F2 | 	cmp	result1, #4 wz
25a18     0C 4E 05 A1 |  if_e	add	fp, #12
25a1c     A7 00 68 AC |  if_e	wrlong	#0, fp
25a20     0C 4E 85 A1 |  if_e	sub	fp, #12
25a24     0C 4E 05 F1 | 	add	fp, #12
25a28     A7 FA 09 FB | 	rdlong	result1, fp wz
25a2c     0C 4E 85 F1 | 	sub	fp, #12
25a30     48 00 90 5D |  if_ne	jmp	#LR__3881
25a34     04 4E 05 F1 | 	add	fp, #4
25a38     A7 12 02 FB | 	rdlong	arg01, fp
25a3c     04 4E 05 F1 | 	add	fp, #4
25a40     A7 14 02 FB | 	rdlong	arg02, fp
25a44     08 4E 85 F1 | 	sub	fp, #8
25a48     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
25a4c     04 4E 05 F1 | 	add	fp, #4
25a50     A7 12 02 FB | 	rdlong	arg01, fp
25a54     04 4E 85 F1 | 	sub	fp, #4
25a58     00 14 06 F6 | 	mov	arg02, #0
25a5c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
25a60     0C 4E 05 F1 | 	add	fp, #12
25a64     A7 FA 61 FC | 	wrlong	result1, fp
25a68     0C 4E 85 F1 | 	sub	fp, #12
25a6c     04 FA 0D F2 | 	cmp	result1, #4 wz
25a70     0C 4E 05 A1 |  if_e	add	fp, #12
25a74     A7 00 68 AC |  if_e	wrlong	#0, fp
25a78     0C 4E 85 A1 |  if_e	sub	fp, #12
25a7c                 | LR__3881
25a7c                 | LR__3882
25a7c                 | LR__3883
25a7c                 | ' 			}
25a7c                 | ' 			;
25a7c                 | ' 		}
25a7c                 | ' 	}
25a7c                 | ' 	return res ;
25a7c     0C 4E 05 F1 | 	add	fp, #12
25a80     A7 FA 01 FB | 	rdlong	result1, fp
25a84     0C 4E 85 F1 | 	sub	fp, #12
25a88     A7 F0 03 F6 | 	mov	ptra, fp
25a8c     B2 00 A0 FD | 	call	#popregs_
25a90                 | _fatfs_cc_f_readdir_ret
25a90     2D 00 64 FD | 	ret
25a94                 | 
25a94                 | _fatfs_cc_f_stat
25a94     00 4A 05 F6 | 	mov	COUNT_, #0
25a98     A8 00 A0 FD | 	call	#pushregs_
25a9c     40 F0 07 F1 | 	add	ptra, #64
25aa0     04 4E 05 F1 | 	add	fp, #4
25aa4     A7 12 62 FC | 	wrlong	arg01, fp
25aa8     04 4E 05 F1 | 	add	fp, #4
25aac     A7 14 62 FC | 	wrlong	arg02, fp
25ab0     04 4E 85 F1 | 	sub	fp, #4
25ab4     A7 12 02 F6 | 	mov	arg01, fp
25ab8     0C 4E 05 F1 | 	add	fp, #12
25abc     A7 14 02 F6 | 	mov	arg02, fp
25ac0     10 4E 85 F1 | 	sub	fp, #16
25ac4     00 16 06 F6 | 	mov	arg03, #0
25ac8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
25acc     0C 4E 05 F1 | 	add	fp, #12
25ad0     A7 FA 61 FC | 	wrlong	result1, fp
25ad4     0C 4E 85 F1 | 	sub	fp, #12
25ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
25adc     74 00 90 5D |  if_ne	jmp	#LR__3893
25ae0     10 4E 05 F1 | 	add	fp, #16
25ae4     A7 12 02 F6 | 	mov	arg01, fp
25ae8     0C 4E 85 F1 | 	sub	fp, #12
25aec     A7 14 02 FB | 	rdlong	arg02, fp
25af0     04 4E 85 F1 | 	sub	fp, #4
25af4     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
25af8     0C 4E 05 F1 | 	add	fp, #12
25afc     A7 FA 61 FC | 	wrlong	result1, fp
25b00     0C 4E 85 F1 | 	sub	fp, #12
25b04     00 FA 0D F2 | 	cmp	result1, #0 wz
25b08     48 00 90 5D |  if_ne	jmp	#LR__3892
25b0c     3B 4E 05 F1 | 	add	fp, #59
25b10     A7 FA C1 FA | 	rdbyte	result1, fp
25b14     3B 4E 85 F1 | 	sub	fp, #59
25b18     80 FA CD F7 | 	test	result1, #128 wz
25b1c     0C 4E 05 51 |  if_ne	add	fp, #12
25b20     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25b24     0C 4E 85 51 |  if_ne	sub	fp, #12
25b28     28 00 90 5D |  if_ne	jmp	#LR__3891
25b2c     08 4E 05 F1 | 	add	fp, #8
25b30     A7 FA 09 FB | 	rdlong	result1, fp wz
25b34     08 4E 85 F1 | 	sub	fp, #8
25b38     18 00 90 AD |  if_e	jmp	#LR__3890
25b3c     10 4E 05 F1 | 	add	fp, #16
25b40     A7 12 02 F6 | 	mov	arg01, fp
25b44     08 4E 85 F1 | 	sub	fp, #8
25b48     A7 14 02 FB | 	rdlong	arg02, fp
25b4c     08 4E 85 F1 | 	sub	fp, #8
25b50     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
25b54                 | LR__3890
25b54                 | LR__3891
25b54                 | LR__3892
25b54                 | LR__3893
25b54                 | ' 			}
25b54                 | ' 		}
25b54                 | ' 		;
25b54                 | ' 	}
25b54                 | ' 
25b54                 | ' 	return res ;
25b54     0C 4E 05 F1 | 	add	fp, #12
25b58     A7 FA 01 FB | 	rdlong	result1, fp
25b5c     0C 4E 85 F1 | 	sub	fp, #12
25b60     A7 F0 03 F6 | 	mov	ptra, fp
25b64     B2 00 A0 FD | 	call	#popregs_
25b68                 | _fatfs_cc_f_stat_ret
25b68     2D 00 64 FD | 	ret
25b6c                 | 
25b6c                 | _fatfs_cc_f_unlink
25b6c     00 4A 05 F6 | 	mov	COUNT_, #0
25b70     A8 00 A0 FD | 	call	#pushregs_
25b74     74 F0 07 F1 | 	add	ptra, #116
25b78     04 4E 05 F1 | 	add	fp, #4
25b7c     A7 12 62 FC | 	wrlong	arg01, fp
25b80     68 4E 05 F1 | 	add	fp, #104
25b84     A7 00 68 FC | 	wrlong	#0, fp
25b88     68 4E 85 F1 | 	sub	fp, #104
25b8c     A7 12 02 F6 | 	mov	arg01, fp
25b90     6C 4E 05 F1 | 	add	fp, #108
25b94     A7 14 02 F6 | 	mov	arg02, fp
25b98     70 4E 85 F1 | 	sub	fp, #112
25b9c     02 16 06 F6 | 	mov	arg03, #2
25ba0     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
25ba4     08 4E 05 F1 | 	add	fp, #8
25ba8     A7 FA 61 FC | 	wrlong	result1, fp
25bac     08 4E 85 F1 | 	sub	fp, #8
25bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
25bb4     E4 01 90 5D |  if_ne	jmp	#LR__3908
25bb8     70 4E 05 F1 | 	add	fp, #112
25bbc     A7 16 02 FB | 	rdlong	arg03, fp
25bc0     64 4E 85 F1 | 	sub	fp, #100
25bc4     A7 16 62 FC | 	wrlong	arg03, fp
25bc8     A7 12 02 F6 | 	mov	arg01, fp
25bcc     08 4E 85 F1 | 	sub	fp, #8
25bd0     A7 14 02 FB | 	rdlong	arg02, fp
25bd4     04 4E 85 F1 | 	sub	fp, #4
25bd8     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
25bdc     08 4E 05 F1 | 	add	fp, #8
25be0     A7 FA 61 FC | 	wrlong	result1, fp
25be4     00 FA 4D F2 | 	cmps	result1, #0 wz
25be8     08 4E 85 F1 | 	sub	fp, #8
25bec     AC 01 90 5D |  if_ne	jmp	#LR__3907
25bf0     37 4E 05 F1 | 	add	fp, #55
25bf4     A7 FA C1 FA | 	rdbyte	result1, fp
25bf8     37 4E 85 F1 | 	sub	fp, #55
25bfc     80 FA CD F7 | 	test	result1, #128 wz
25c00     08 4E 05 51 |  if_ne	add	fp, #8
25c04     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25c08     08 4E 85 51 |  if_ne	sub	fp, #8
25c0c     1C 00 90 5D |  if_ne	jmp	#LR__3900
25c10     12 4E 05 F1 | 	add	fp, #18
25c14     A7 FA C1 FA | 	rdbyte	result1, fp
25c18     12 4E 85 F1 | 	sub	fp, #18
25c1c     01 FA CD F7 | 	test	result1, #1 wz
25c20     08 4E 05 51 |  if_ne	add	fp, #8
25c24     A7 0E 68 5C |  if_ne	wrlong	#7, fp
25c28     08 4E 85 51 |  if_ne	sub	fp, #8
25c2c                 | LR__3900
25c2c     08 4E 05 F1 | 	add	fp, #8
25c30     A7 FA 09 FB | 	rdlong	result1, fp wz
25c34     08 4E 85 F1 | 	sub	fp, #8
25c38     C8 00 90 5D |  if_ne	jmp	#LR__3903
25c3c     70 4E 05 F1 | 	add	fp, #112
25c40     A7 12 02 FB | 	rdlong	arg01, fp
25c44     48 4E 85 F1 | 	sub	fp, #72
25c48     A7 14 02 FB | 	rdlong	arg02, fp
25c4c     28 4E 85 F1 | 	sub	fp, #40
25c50     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
25c54     6C 4E 05 F1 | 	add	fp, #108
25c58     A7 FA 61 FC | 	wrlong	result1, fp
25c5c     5A 4E 85 F1 | 	sub	fp, #90
25c60     A7 FA C1 FA | 	rdbyte	result1, fp
25c64     12 4E 85 F1 | 	sub	fp, #18
25c68     10 FA CD F7 | 	test	result1, #16 wz
25c6c     94 00 90 AD |  if_e	jmp	#LR__3902
25c70     70 4E 05 F1 | 	add	fp, #112
25c74     A7 FA 01 FB | 	rdlong	result1, fp
25c78     34 4E 85 F1 | 	sub	fp, #52
25c7c     A7 FA 61 FC | 	wrlong	result1, fp
25c80     30 4E 05 F1 | 	add	fp, #48
25c84     A7 16 02 FB | 	rdlong	arg03, fp
25c88     28 4E 85 F1 | 	sub	fp, #40
25c8c     A7 16 62 FC | 	wrlong	arg03, fp
25c90     08 4E 85 F1 | 	sub	fp, #8
25c94     A7 12 02 F6 | 	mov	arg01, fp
25c98     3C 4E 85 F1 | 	sub	fp, #60
25c9c     00 14 06 F6 | 	mov	arg02, #0
25ca0     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
25ca4     08 4E 05 F1 | 	add	fp, #8
25ca8     A7 FA 61 FC | 	wrlong	result1, fp
25cac     08 4E 85 F1 | 	sub	fp, #8
25cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
25cb4     4C 00 90 5D |  if_ne	jmp	#LR__3901
25cb8     3C 4E 05 F1 | 	add	fp, #60
25cbc     A7 12 02 F6 | 	mov	arg01, fp
25cc0     3C 4E 85 F1 | 	sub	fp, #60
25cc4     00 14 06 F6 | 	mov	arg02, #0
25cc8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
25ccc     08 4E 05 F1 | 	add	fp, #8
25cd0     A7 FA 61 FC | 	wrlong	result1, fp
25cd4     00 FA 4D F2 | 	cmps	result1, #0 wz
25cd8     08 4E 85 F1 | 	sub	fp, #8
25cdc     08 4E 05 A1 |  if_e	add	fp, #8
25ce0     A7 0E 68 AC |  if_e	wrlong	#7, fp
25ce4     08 4E 85 A1 |  if_e	sub	fp, #8
25ce8     08 4E 05 F1 | 	add	fp, #8
25cec     A7 FA 01 FB | 	rdlong	result1, fp
25cf0     08 4E 85 F1 | 	sub	fp, #8
25cf4     04 FA 0D F2 | 	cmp	result1, #4 wz
25cf8     08 4E 05 A1 |  if_e	add	fp, #8
25cfc     A7 00 68 AC |  if_e	wrlong	#0, fp
25d00     08 4E 85 A1 |  if_e	sub	fp, #8
25d04                 | LR__3901
25d04                 | LR__3902
25d04                 | LR__3903
25d04     08 4E 05 F1 | 	add	fp, #8
25d08     A7 FA 09 FB | 	rdlong	result1, fp wz
25d0c     08 4E 85 F1 | 	sub	fp, #8
25d10     88 00 90 5D |  if_ne	jmp	#LR__3906
25d14     0C 4E 05 F1 | 	add	fp, #12
25d18     A7 12 02 F6 | 	mov	arg01, fp
25d1c     0C 4E 85 F1 | 	sub	fp, #12
25d20     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
25d24     08 4E 05 F1 | 	add	fp, #8
25d28     A7 FA 61 FC | 	wrlong	result1, fp
25d2c     08 4E 85 F1 | 	sub	fp, #8
25d30     00 FA 0D F2 | 	cmp	result1, #0 wz
25d34     38 00 90 5D |  if_ne	jmp	#LR__3904
25d38     6C 4E 05 F1 | 	add	fp, #108
25d3c     A7 FA 09 FB | 	rdlong	result1, fp wz
25d40     6C 4E 85 F1 | 	sub	fp, #108
25d44     28 00 90 AD |  if_e	jmp	#LR__3904
25d48     0C 4E 05 F1 | 	add	fp, #12
25d4c     A7 12 02 F6 | 	mov	arg01, fp
25d50     60 4E 05 F1 | 	add	fp, #96
25d54     A7 14 02 FB | 	rdlong	arg02, fp
25d58     6C 4E 85 F1 | 	sub	fp, #108
25d5c     00 16 06 F6 | 	mov	arg03, #0
25d60     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
25d64     08 4E 05 F1 | 	add	fp, #8
25d68     A7 FA 61 FC | 	wrlong	result1, fp
25d6c     08 4E 85 F1 | 	sub	fp, #8
25d70                 | LR__3904
25d70     08 4E 05 F1 | 	add	fp, #8
25d74     A7 FA 09 FB | 	rdlong	result1, fp wz
25d78     08 4E 85 F1 | 	sub	fp, #8
25d7c     1C 00 90 5D |  if_ne	jmp	#LR__3905
25d80     70 4E 05 F1 | 	add	fp, #112
25d84     A7 12 02 FB | 	rdlong	arg01, fp
25d88     70 4E 85 F1 | 	sub	fp, #112
25d8c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
25d90     08 4E 05 F1 | 	add	fp, #8
25d94     A7 FA 61 FC | 	wrlong	result1, fp
25d98     08 4E 85 F1 | 	sub	fp, #8
25d9c                 | LR__3905
25d9c                 | LR__3906
25d9c                 | LR__3907
25d9c                 | LR__3908
25d9c                 | ' 			}
25d9c                 | ' 		}
25d9c                 | ' 		;
25d9c                 | ' 	}
25d9c                 | ' 
25d9c                 | ' 	return res ;
25d9c     08 4E 05 F1 | 	add	fp, #8
25da0     A7 FA 01 FB | 	rdlong	result1, fp
25da4     08 4E 85 F1 | 	sub	fp, #8
25da8     A7 F0 03 F6 | 	mov	ptra, fp
25dac     B2 00 A0 FD | 	call	#popregs_
25db0                 | _fatfs_cc_f_unlink_ret
25db0     2D 00 64 FD | 	ret
25db4                 | 
25db4                 | _fatfs_cc_f_mkdir
25db4     00 4A 05 F6 | 	mov	COUNT_, #0
25db8     A8 00 A0 FD | 	call	#pushregs_
25dbc     5C F0 07 F1 | 	add	ptra, #92
25dc0     04 4E 05 F1 | 	add	fp, #4
25dc4     A7 12 62 FC | 	wrlong	arg01, fp
25dc8     A7 12 02 F6 | 	mov	arg01, fp
25dcc     48 4E 05 F1 | 	add	fp, #72
25dd0     A7 14 02 F6 | 	mov	arg02, fp
25dd4     4C 4E 85 F1 | 	sub	fp, #76
25dd8     02 16 06 F6 | 	mov	arg03, #2
25ddc     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
25de0     08 4E 05 F1 | 	add	fp, #8
25de4     A7 FA 61 FC | 	wrlong	result1, fp
25de8     08 4E 85 F1 | 	sub	fp, #8
25dec     00 FA 0D F2 | 	cmp	result1, #0 wz
25df0     C4 02 90 5D |  if_ne	jmp	#LR__3915
25df4     4C 4E 05 F1 | 	add	fp, #76
25df8     A7 16 02 FB | 	rdlong	arg03, fp
25dfc     40 4E 85 F1 | 	sub	fp, #64
25e00     A7 16 62 FC | 	wrlong	arg03, fp
25e04     A7 12 02 F6 | 	mov	arg01, fp
25e08     08 4E 85 F1 | 	sub	fp, #8
25e0c     A7 14 02 FB | 	rdlong	arg02, fp
25e10     04 4E 85 F1 | 	sub	fp, #4
25e14     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
25e18     08 4E 05 F1 | 	add	fp, #8
25e1c     A7 FA 61 FC | 	wrlong	result1, fp
25e20     00 FA 4D F2 | 	cmps	result1, #0 wz
25e24     08 4E 85 F1 | 	sub	fp, #8
25e28     08 4E 05 A1 |  if_e	add	fp, #8
25e2c     A7 10 68 AC |  if_e	wrlong	#8, fp
25e30     08 4E 85 A1 |  if_e	sub	fp, #8
25e34     08 4E 05 F1 | 	add	fp, #8
25e38     A7 FA 01 FB | 	rdlong	result1, fp
25e3c     08 4E 85 F1 | 	sub	fp, #8
25e40     04 FA 0D F2 | 	cmp	result1, #4 wz
25e44     70 02 90 5D |  if_ne	jmp	#LR__3914
25e48     4C 4E 05 F1 | 	add	fp, #76
25e4c     A7 16 02 FB | 	rdlong	arg03, fp
25e50     10 4E 85 F1 | 	sub	fp, #16
25e54     A7 16 62 FC | 	wrlong	arg03, fp
25e58     A7 12 02 F6 | 	mov	arg01, fp
25e5c     3C 4E 85 F1 | 	sub	fp, #60
25e60     00 14 06 F6 | 	mov	arg02, #0
25e64     04 AC BF FD | 	call	#_fatfs_cc_create_chain
25e68     50 4E 05 F1 | 	add	fp, #80
25e6c     A7 FA 61 FC | 	wrlong	result1, fp
25e70     48 4E 85 F1 | 	sub	fp, #72
25e74     A7 00 68 FC | 	wrlong	#0, fp
25e78     48 4E 05 F1 | 	add	fp, #72
25e7c     A7 FA 09 FB | 	rdlong	result1, fp wz
25e80     50 4E 85 F1 | 	sub	fp, #80
25e84     08 4E 05 A1 |  if_e	add	fp, #8
25e88     A7 0E 68 AC |  if_e	wrlong	#7, fp
25e8c     08 4E 85 A1 |  if_e	sub	fp, #8
25e90     50 4E 05 F1 | 	add	fp, #80
25e94     A7 FA 01 FB | 	rdlong	result1, fp
25e98     50 4E 85 F1 | 	sub	fp, #80
25e9c     01 FA 0D F2 | 	cmp	result1, #1 wz
25ea0     08 4E 05 A1 |  if_e	add	fp, #8
25ea4     A7 04 68 AC |  if_e	wrlong	#2, fp
25ea8     08 4E 85 A1 |  if_e	sub	fp, #8
25eac     50 4E 05 F1 | 	add	fp, #80
25eb0     A7 16 02 FB | 	rdlong	arg03, fp
25eb4     50 4E 85 F1 | 	sub	fp, #80
25eb8     FF FF 7F FF 
25ebc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25ec0     08 4E 05 A1 |  if_e	add	fp, #8
25ec4     A7 02 68 AC |  if_e	wrlong	#1, fp
25ec8     08 4E 85 A1 |  if_e	sub	fp, #8
25ecc     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
25ed0     58 4E 05 F1 | 	add	fp, #88
25ed4     A7 FA 61 FC | 	wrlong	result1, fp
25ed8     50 4E 85 F1 | 	sub	fp, #80
25edc     A7 FA 09 FB | 	rdlong	result1, fp wz
25ee0     08 4E 85 F1 | 	sub	fp, #8
25ee4     1C 01 90 5D |  if_ne	jmp	#LR__3911
25ee8     4C 4E 05 F1 | 	add	fp, #76
25eec     A7 12 02 FB | 	rdlong	arg01, fp
25ef0     04 4E 05 F1 | 	add	fp, #4
25ef4     A7 14 02 FB | 	rdlong	arg02, fp
25ef8     50 4E 85 F1 | 	sub	fp, #80
25efc     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
25f00     08 4E 05 F1 | 	add	fp, #8
25f04     A7 FA 61 FC | 	wrlong	result1, fp
25f08     00 FA 4D F2 | 	cmps	result1, #0 wz
25f0c     08 4E 85 F1 | 	sub	fp, #8
25f10     F0 00 90 5D |  if_ne	jmp	#LR__3910
25f14     4C 4E 05 F1 | 	add	fp, #76
25f18     A7 12 02 FB | 	rdlong	arg01, fp
25f1c     4C 4E 85 F1 | 	sub	fp, #76
25f20     34 12 06 F1 | 	add	arg01, #52
25f24     20 14 06 F6 | 	mov	arg02, #32
25f28     0B 16 06 F6 | 	mov	arg03, #11
25f2c     98 00 A0 FD | 	call	#\builtin_bytefill_
25f30     4C 4E 05 F1 | 	add	fp, #76
25f34     A7 FA 01 FB | 	rdlong	result1, fp
25f38     34 FA 05 F1 | 	add	result1, #52
25f3c     FD 5C 48 FC | 	wrbyte	#46, result1
25f40     A7 16 02 FB | 	rdlong	arg03, fp
25f44     3F 16 06 F1 | 	add	arg03, #63
25f48     0B 21 48 FC | 	wrbyte	#16, arg03
25f4c     A7 12 02 FB | 	rdlong	arg01, fp
25f50     4A 12 06 F1 | 	add	arg01, #74
25f54     0C 4E 05 F1 | 	add	fp, #12
25f58     A7 14 02 FB | 	rdlong	arg02, fp
25f5c     09 15 62 FC | 	wrlong	arg02, arg01
25f60     0C 4E 85 F1 | 	sub	fp, #12
25f64     A7 14 02 FB | 	rdlong	arg02, fp
25f68     0A 13 02 F6 | 	mov	arg01, arg02
25f6c     34 14 06 F1 | 	add	arg02, #52
25f70     04 4E 05 F1 | 	add	fp, #4
25f74     A7 16 02 FB | 	rdlong	arg03, fp
25f78     50 4E 85 F1 | 	sub	fp, #80
25f7c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
25f80     4C 4E 05 F1 | 	add	fp, #76
25f84     A7 14 02 FB | 	rdlong	arg02, fp
25f88     0A 13 02 F6 | 	mov	arg01, arg02
25f8c     54 12 06 F1 | 	add	arg01, #84
25f90     4C 4E 85 F1 | 	sub	fp, #76
25f94     34 14 06 F1 | 	add	arg02, #52
25f98     20 16 06 F6 | 	mov	arg03, #32
25f9c     64 2D BF FD | 	call	#__system____builtin_memmove
25fa0     4C 4E 05 F1 | 	add	fp, #76
25fa4     A7 16 02 FB | 	rdlong	arg03, fp
25fa8     55 16 06 F1 | 	add	arg03, #85
25fac     0B 5D 48 FC | 	wrbyte	#46, arg03
25fb0     38 4E 85 F1 | 	sub	fp, #56
25fb4     A7 16 02 FB | 	rdlong	arg03, fp
25fb8     40 4E 05 F1 | 	add	fp, #64
25fbc     A7 16 62 FC | 	wrlong	arg03, fp
25fc0     08 4E 85 F1 | 	sub	fp, #8
25fc4     A7 14 02 FB | 	rdlong	arg02, fp
25fc8     0A 13 02 F6 | 	mov	arg01, arg02
25fcc     54 14 06 F1 | 	add	arg02, #84
25fd0     4C 4E 85 F1 | 	sub	fp, #76
25fd4     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
25fd8     4C 4E 05 F1 | 	add	fp, #76
25fdc     A7 16 02 FB | 	rdlong	arg03, fp
25fe0     03 16 06 F1 | 	add	arg03, #3
25fe4     0B 03 48 FC | 	wrbyte	#1, arg03
25fe8     40 4E 85 F1 | 	sub	fp, #64
25fec     A7 12 02 F6 | 	mov	arg01, fp
25ff0     0C 4E 85 F1 | 	sub	fp, #12
25ff4     44 BA BF FD | 	call	#_fatfs_cc_dir_register
25ff8     08 4E 05 F1 | 	add	fp, #8
25ffc     A7 FA 61 FC | 	wrlong	result1, fp
26000     08 4E 85 F1 | 	sub	fp, #8
26004                 | LR__3910
26004                 | LR__3911
26004     08 4E 05 F1 | 	add	fp, #8
26008     A7 FA 09 FB | 	rdlong	result1, fp wz
2600c     08 4E 85 F1 | 	sub	fp, #8
26010     88 00 90 5D |  if_ne	jmp	#LR__3912
26014     28 4E 05 F1 | 	add	fp, #40
26018     A7 12 02 FB | 	rdlong	arg01, fp
2601c     16 12 06 F1 | 	add	arg01, #22
26020     30 4E 05 F1 | 	add	fp, #48
26024     A7 14 02 FB | 	rdlong	arg02, fp
26028     09 15 62 FC | 	wrlong	arg02, arg01
2602c     0C 4E 85 F1 | 	sub	fp, #12
26030     A7 12 02 FB | 	rdlong	arg01, fp
26034     24 4E 85 F1 | 	sub	fp, #36
26038     A7 14 02 FB | 	rdlong	arg02, fp
2603c     28 4E 05 F1 | 	add	fp, #40
26040     A7 16 02 FB | 	rdlong	arg03, fp
26044     50 4E 85 F1 | 	sub	fp, #80
26048     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2604c     28 4E 05 F1 | 	add	fp, #40
26050     A7 FA 01 FB | 	rdlong	result1, fp
26054     0B FA 05 F1 | 	add	result1, #11
26058     FD 20 48 FC | 	wrbyte	#16, result1
2605c     24 4E 05 F1 | 	add	fp, #36
26060     A7 FA 01 FB | 	rdlong	result1, fp
26064     03 FA 05 F1 | 	add	result1, #3
26068     FD 02 48 FC | 	wrbyte	#1, result1
2606c     44 4E 85 F1 | 	sub	fp, #68
26070     A7 FA 09 FB | 	rdlong	result1, fp wz
26074     08 4E 85 F1 | 	sub	fp, #8
26078     3C 00 90 5D |  if_ne	jmp	#LR__3913
2607c     4C 4E 05 F1 | 	add	fp, #76
26080     A7 12 02 FB | 	rdlong	arg01, fp
26084     4C 4E 85 F1 | 	sub	fp, #76
26088     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2608c     08 4E 05 F1 | 	add	fp, #8
26090     A7 FA 61 FC | 	wrlong	result1, fp
26094     08 4E 85 F1 | 	sub	fp, #8
26098     1C 00 90 FD | 	jmp	#LR__3913
2609c                 | LR__3912
2609c     3C 4E 05 F1 | 	add	fp, #60
260a0     A7 12 02 F6 | 	mov	arg01, fp
260a4     14 4E 05 F1 | 	add	fp, #20
260a8     A7 14 02 FB | 	rdlong	arg02, fp
260ac     50 4E 85 F1 | 	sub	fp, #80
260b0     00 16 06 F6 | 	mov	arg03, #0
260b4     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
260b8                 | LR__3913
260b8                 | LR__3914
260b8                 | LR__3915
260b8                 | ' 				remove_chain(&sobj, dcl, 0);
260b8                 | ' 			}
260b8                 | ' 		}
260b8                 | ' 		;
260b8                 | ' 	}
260b8                 | ' 
260b8                 | ' 	return res ;
260b8     08 4E 05 F1 | 	add	fp, #8
260bc     A7 FA 01 FB | 	rdlong	result1, fp
260c0     08 4E 85 F1 | 	sub	fp, #8
260c4     A7 F0 03 F6 | 	mov	ptra, fp
260c8     B2 00 A0 FD | 	call	#popregs_
260cc                 | _fatfs_cc_f_mkdir_ret
260cc     2D 00 64 FD | 	ret
260d0                 | 
260d0                 | _fatfs_cc_f_rename
260d0     01 4A 05 F6 | 	mov	COUNT_, #1
260d4     A8 00 A0 FD | 	call	#pushregs_
260d8     9C F0 07 F1 | 	add	ptra, #156
260dc     04 4E 05 F1 | 	add	fp, #4
260e0     A7 12 62 FC | 	wrlong	arg01, fp
260e4     04 4E 05 F1 | 	add	fp, #4
260e8     A7 14 62 FC | 	wrlong	arg02, fp
260ec     A7 12 02 F6 | 	mov	arg01, fp
260f0     08 4E 85 F1 | 	sub	fp, #8
260f4     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
260f8     04 4E 05 F1 | 	add	fp, #4
260fc     A7 12 02 F6 | 	mov	arg01, fp
26100     6C 4E 05 F1 | 	add	fp, #108
26104     A7 14 02 F6 | 	mov	arg02, fp
26108     70 4E 85 F1 | 	sub	fp, #112
2610c     02 16 06 F6 | 	mov	arg03, #2
26110     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
26114     0C 4E 05 F1 | 	add	fp, #12
26118     A7 FA 61 FC | 	wrlong	result1, fp
2611c     0C 4E 85 F1 | 	sub	fp, #12
26120     00 FA 0D F2 | 	cmp	result1, #0 wz
26124     44 03 90 5D |  if_ne	jmp	#LR__3933
26128     70 4E 05 F1 | 	add	fp, #112
2612c     A7 16 02 FB | 	rdlong	arg03, fp
26130     60 4E 85 F1 | 	sub	fp, #96
26134     A7 16 62 FC | 	wrlong	arg03, fp
26138     A7 12 02 F6 | 	mov	arg01, fp
2613c     0C 4E 85 F1 | 	sub	fp, #12
26140     A7 14 02 FB | 	rdlong	arg02, fp
26144     04 4E 85 F1 | 	sub	fp, #4
26148     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2614c     0C 4E 05 F1 | 	add	fp, #12
26150     A7 FA 61 FC | 	wrlong	result1, fp
26154     00 FA 4D F2 | 	cmps	result1, #0 wz
26158     0C 4E 85 F1 | 	sub	fp, #12
2615c     1C 00 90 5D |  if_ne	jmp	#LR__3920
26160     3B 4E 05 F1 | 	add	fp, #59
26164     A7 FA C1 FA | 	rdbyte	result1, fp
26168     3B 4E 85 F1 | 	sub	fp, #59
2616c     A0 FA CD F7 | 	test	result1, #160 wz
26170     0C 4E 05 51 |  if_ne	add	fp, #12
26174     A7 0C 68 5C |  if_ne	wrlong	#6, fp
26178     0C 4E 85 51 |  if_ne	sub	fp, #12
2617c                 | LR__3920
2617c     0C 4E 05 F1 | 	add	fp, #12
26180     A7 1E 0A FB | 	rdlong	local01, fp wz
26184     0C 4E 85 F1 | 	sub	fp, #12
26188     E0 02 90 5D |  if_ne	jmp	#LR__3932
2618c     74 4E 05 F1 | 	add	fp, #116
26190     A7 12 02 F6 | 	mov	arg01, fp
26194     48 4E 85 F1 | 	sub	fp, #72
26198     A7 14 02 FB | 	rdlong	arg02, fp
2619c     2C 4E 85 F1 | 	sub	fp, #44
261a0     20 16 06 F6 | 	mov	arg03, #32
261a4     5C 2B BF FD | 	call	#__system____builtin_memmove
261a8     40 4E 05 F1 | 	add	fp, #64
261ac     A7 12 02 F6 | 	mov	arg01, fp
261b0     30 4E 85 F1 | 	sub	fp, #48
261b4     A7 14 02 F6 | 	mov	arg02, fp
261b8     10 4E 85 F1 | 	sub	fp, #16
261bc     30 16 06 F6 | 	mov	arg03, #48
261c0     40 2B BF FD | 	call	#__system____builtin_memmove
261c4     40 4E 05 F1 | 	add	fp, #64
261c8     A7 12 02 F6 | 	mov	arg01, fp
261cc     38 4E 85 F1 | 	sub	fp, #56
261d0     A7 14 02 FB | 	rdlong	arg02, fp
261d4     08 4E 85 F1 | 	sub	fp, #8
261d8     34 CA BF FD | 	call	#_fatfs_cc_follow_path
261dc     0C 4E 05 F1 | 	add	fp, #12
261e0     A7 FA 61 FC | 	wrlong	result1, fp
261e4     0C 4E 85 F1 | 	sub	fp, #12
261e8     00 FA 0D F2 | 	cmp	result1, #0 wz
261ec     4C 00 90 5D |  if_ne	jmp	#LR__3923
261f0     48 4E 05 F1 | 	add	fp, #72
261f4     A7 FA 01 FB | 	rdlong	result1, fp
261f8     30 4E 85 F1 | 	sub	fp, #48
261fc     A7 16 02 FB | 	rdlong	arg03, fp
26200     18 4E 85 F1 | 	sub	fp, #24
26204     0B FB 09 F2 | 	cmp	result1, arg03 wz
26208     20 00 90 5D |  if_ne	jmp	#LR__3921
2620c     50 4E 05 F1 | 	add	fp, #80
26210     A7 FA 01 FB | 	rdlong	result1, fp
26214     30 4E 85 F1 | 	sub	fp, #48
26218     A7 16 02 FB | 	rdlong	arg03, fp
2621c     20 4E 85 F1 | 	sub	fp, #32
26220     0B FB 09 F2 | 	cmp	result1, arg03 wz
26224     04 1E 06 A6 |  if_e	mov	local01, #4
26228     04 00 90 AD |  if_e	jmp	#LR__3922
2622c                 | LR__3921
2622c     08 1E 06 F6 | 	mov	local01, #8
26230                 | LR__3922
26230     0C 4E 05 F1 | 	add	fp, #12
26234     A7 1E 62 FC | 	wrlong	local01, fp
26238     0C 4E 85 F1 | 	sub	fp, #12
2623c                 | LR__3923
2623c     0C 4E 05 F1 | 	add	fp, #12
26240     A7 1E 02 FB | 	rdlong	local01, fp
26244     0C 4E 85 F1 | 	sub	fp, #12
26248     04 1E 0E F2 | 	cmp	local01, #4 wz
2624c     CC 01 90 5D |  if_ne	jmp	#LR__3929
26250     40 4E 05 F1 | 	add	fp, #64
26254     A7 12 02 F6 | 	mov	arg01, fp
26258     40 4E 85 F1 | 	sub	fp, #64
2625c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
26260     0C 4E 05 F1 | 	add	fp, #12
26264     A7 FA 61 FC | 	wrlong	result1, fp
26268     0C 4E 85 F1 | 	sub	fp, #12
2626c     00 FA 0D F2 | 	cmp	result1, #0 wz
26270     A8 01 90 5D |  if_ne	jmp	#LR__3928
26274     5C 4E 05 F1 | 	add	fp, #92
26278     A7 12 02 FB | 	rdlong	arg01, fp
2627c     38 4E 05 F1 | 	add	fp, #56
26280     A7 12 62 FC | 	wrlong	arg01, fp
26284     0D 12 06 F1 | 	add	arg01, #13
26288     20 4E 85 F1 | 	sub	fp, #32
2628c     A7 14 02 F6 | 	mov	arg02, fp
26290     74 4E 85 F1 | 	sub	fp, #116
26294     0D 14 06 F1 | 	add	arg02, #13
26298     13 16 06 F6 | 	mov	arg03, #19
2629c     64 2A BF FD | 	call	#__system____builtin_memmove
262a0     94 4E 05 F1 | 	add	fp, #148
262a4     A7 1E 02 FB | 	rdlong	local01, fp
262a8     15 4E 85 F1 | 	sub	fp, #21
262ac     A7 FA C1 FA | 	rdbyte	result1, fp
262b0     0B 1E 06 F1 | 	add	local01, #11
262b4     0F FB 41 FC | 	wrbyte	result1, local01
262b8     15 4E 05 F1 | 	add	fp, #21
262bc     A7 1E 02 FB | 	rdlong	local01, fp
262c0     94 4E 85 F1 | 	sub	fp, #148
262c4     0B 1E 06 F1 | 	add	local01, #11
262c8     0F 1F C2 FA | 	rdbyte	local01, local01
262cc     10 1E CE F7 | 	test	local01, #16 wz
262d0     24 00 90 5D |  if_ne	jmp	#LR__3924
262d4     94 4E 05 F1 | 	add	fp, #148
262d8     A7 FA 01 FB | 	rdlong	result1, fp
262dc     FD 1E 02 F6 | 	mov	local01, result1
262e0     94 4E 85 F1 | 	sub	fp, #148
262e4     0B FA 05 F1 | 	add	result1, #11
262e8     FD FA C1 FA | 	rdbyte	result1, result1
262ec     20 FA 45 F5 | 	or	result1, #32
262f0     0B 1E 06 F1 | 	add	local01, #11
262f4     0F FB 41 FC | 	wrbyte	result1, local01
262f8                 | LR__3924
262f8     70 4E 05 F1 | 	add	fp, #112
262fc     A7 1E 02 FB | 	rdlong	local01, fp
26300     03 1E 06 F1 | 	add	local01, #3
26304     0F 03 48 FC | 	wrbyte	#1, local01
26308     24 4E 05 F1 | 	add	fp, #36
2630c     A7 1E 02 FB | 	rdlong	local01, fp
26310     94 4E 85 F1 | 	sub	fp, #148
26314     0B 1E 06 F1 | 	add	local01, #11
26318     0F 1F C2 FA | 	rdbyte	local01, local01
2631c     10 1E CE F7 | 	test	local01, #16 wz
26320     F8 00 90 AD |  if_e	jmp	#LR__3927
26324     18 4E 05 F1 | 	add	fp, #24
26328     A7 16 02 FB | 	rdlong	arg03, fp
2632c     30 4E 05 F1 | 	add	fp, #48
26330     A7 1E 02 FB | 	rdlong	local01, fp
26334     48 4E 85 F1 | 	sub	fp, #72
26338     0F 17 0A F2 | 	cmp	arg03, local01 wz
2633c     DC 00 90 AD |  if_e	jmp	#LR__3927
26340     70 4E 05 F1 | 	add	fp, #112
26344     A7 12 02 FB | 	rdlong	arg01, fp
26348     09 1F 02 F6 | 	mov	local01, arg01
2634c     24 4E 05 F1 | 	add	fp, #36
26350     A7 14 02 FB | 	rdlong	arg02, fp
26354     94 4E 85 F1 | 	sub	fp, #148
26358     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2635c     FD 14 02 F6 | 	mov	arg02, result1
26360     0F 13 02 F6 | 	mov	arg01, local01
26364     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
26368     98 4E 05 F1 | 	add	fp, #152
2636c     A7 FA 61 FC | 	wrlong	result1, fp
26370     00 FA 4D F2 | 	cmps	result1, #0 wz
26374     98 4E 85 F1 | 	sub	fp, #152
26378     0C 4E 05 A1 |  if_e	add	fp, #12
2637c     A7 04 68 AC |  if_e	wrlong	#2, fp
26380     0C 4E 85 A1 |  if_e	sub	fp, #12
26384     94 00 90 AD |  if_e	jmp	#LR__3926
26388     70 4E 05 F1 | 	add	fp, #112
2638c     A7 12 02 FB | 	rdlong	arg01, fp
26390     28 4E 05 F1 | 	add	fp, #40
26394     A7 14 02 FB | 	rdlong	arg02, fp
26398     98 4E 85 F1 | 	sub	fp, #152
2639c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
263a0     0C 4E 05 F1 | 	add	fp, #12
263a4     A7 FA 61 FC | 	wrlong	result1, fp
263a8     64 4E 05 F1 | 	add	fp, #100
263ac     A7 1E 02 FB | 	rdlong	local01, fp
263b0     54 1E 06 F1 | 	add	local01, #84
263b4     24 4E 05 F1 | 	add	fp, #36
263b8     A7 1E 62 FC | 	wrlong	local01, fp
263bc     88 4E 85 F1 | 	sub	fp, #136
263c0     A7 1E 0A FB | 	rdlong	local01, fp wz
263c4     0C 4E 85 F1 | 	sub	fp, #12
263c8     50 00 90 5D |  if_ne	jmp	#LR__3925
263cc     94 4E 05 F1 | 	add	fp, #148
263d0     A7 1E 02 FB | 	rdlong	local01, fp
263d4     94 4E 85 F1 | 	sub	fp, #148
263d8     01 1E 06 F1 | 	add	local01, #1
263dc     0F 1F C2 FA | 	rdbyte	local01, local01
263e0     2E 1E 0E F2 | 	cmp	local01, #46 wz
263e4     34 00 90 5D |  if_ne	jmp	#LR__3925
263e8     70 4E 05 F1 | 	add	fp, #112
263ec     A7 12 02 FB | 	rdlong	arg01, fp
263f0     24 4E 05 F1 | 	add	fp, #36
263f4     A7 14 02 FB | 	rdlong	arg02, fp
263f8     4C 4E 85 F1 | 	sub	fp, #76
263fc     A7 16 02 FB | 	rdlong	arg03, fp
26400     48 4E 85 F1 | 	sub	fp, #72
26404     50 AD BF FD | 	call	#_fatfs_cc_st_clust
26408     70 4E 05 F1 | 	add	fp, #112
2640c     A7 1E 02 FB | 	rdlong	local01, fp
26410     70 4E 85 F1 | 	sub	fp, #112
26414     03 1E 06 F1 | 	add	local01, #3
26418     0F 03 48 FC | 	wrbyte	#1, local01
2641c                 | LR__3925
2641c                 | LR__3926
2641c                 | LR__3927
2641c                 | LR__3928
2641c                 | LR__3929
2641c     0C 4E 05 F1 | 	add	fp, #12
26420     A7 1E 0A FB | 	rdlong	local01, fp wz
26424     0C 4E 85 F1 | 	sub	fp, #12
26428     40 00 90 5D |  if_ne	jmp	#LR__3931
2642c     10 4E 05 F1 | 	add	fp, #16
26430     A7 12 02 F6 | 	mov	arg01, fp
26434     10 4E 85 F1 | 	sub	fp, #16
26438     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2643c     0C 4E 05 F1 | 	add	fp, #12
26440     A7 FA 61 FC | 	wrlong	result1, fp
26444     0C 4E 85 F1 | 	sub	fp, #12
26448     00 FA 0D F2 | 	cmp	result1, #0 wz
2644c     1C 00 90 5D |  if_ne	jmp	#LR__3930
26450     70 4E 05 F1 | 	add	fp, #112
26454     A7 12 02 FB | 	rdlong	arg01, fp
26458     70 4E 85 F1 | 	sub	fp, #112
2645c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
26460     0C 4E 05 F1 | 	add	fp, #12
26464     A7 FA 61 FC | 	wrlong	result1, fp
26468     0C 4E 85 F1 | 	sub	fp, #12
2646c                 | LR__3930
2646c                 | LR__3931
2646c                 | LR__3932
2646c                 | LR__3933
2646c                 | ' 					res = sync_fs(fs);
2646c                 | ' 				}
2646c                 | ' 			}
2646c                 | ' 
2646c                 | ' 		}
2646c                 | ' 		;
2646c                 | ' 	}
2646c                 | ' 
2646c                 | ' 	return res ;
2646c     0C 4E 05 F1 | 	add	fp, #12
26470     A7 FA 01 FB | 	rdlong	result1, fp
26474     0C 4E 85 F1 | 	sub	fp, #12
26478     A7 F0 03 F6 | 	mov	ptra, fp
2647c     B2 00 A0 FD | 	call	#popregs_
26480                 | _fatfs_cc_f_rename_ret
26480     2D 00 64 FD | 	ret
26484                 | 
26484                 | _fatfs_cc_time
26484     00 4A 05 F6 | 	mov	COUNT_, #0
26488     A8 00 A0 FD | 	call	#pushregs_
2648c     14 F0 07 F1 | 	add	ptra, #20
26490     04 4E 05 F1 | 	add	fp, #4
26494     A7 12 62 FC | 	wrlong	arg01, fp
26498     04 4E 05 F1 | 	add	fp, #4
2649c     A7 12 02 F6 | 	mov	arg01, fp
264a0     08 4E 85 F1 | 	sub	fp, #8
264a4     00 14 06 F6 | 	mov	arg02, #0
264a8     FC 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
264ac     08 4E 05 F1 | 	add	fp, #8
264b0     A7 FA 01 FB | 	rdlong	result1, fp
264b4     08 4E 05 F1 | 	add	fp, #8
264b8     A7 FA 61 FC | 	wrlong	result1, fp
264bc     0C 4E 85 F1 | 	sub	fp, #12
264c0     A7 FA 09 FB | 	rdlong	result1, fp wz
264c4     04 4E 85 F1 | 	sub	fp, #4
264c8     18 00 90 AD |  if_e	jmp	#LR__3940
264cc     04 4E 05 F1 | 	add	fp, #4
264d0     A7 FA 01 FB | 	rdlong	result1, fp
264d4     0C 4E 05 F1 | 	add	fp, #12
264d8     A7 14 02 FB | 	rdlong	arg02, fp
264dc     10 4E 85 F1 | 	sub	fp, #16
264e0     FD 14 62 FC | 	wrlong	arg02, result1
264e4                 | LR__3940
264e4                 | '         *tp = now;
264e4                 | '     return now;
264e4     10 4E 05 F1 | 	add	fp, #16
264e8     A7 FA 01 FB | 	rdlong	result1, fp
264ec     10 4E 85 F1 | 	sub	fp, #16
264f0     A7 F0 03 F6 | 	mov	ptra, fp
264f4     B2 00 A0 FD | 	call	#popregs_
264f8                 | _fatfs_cc_time_ret
264f8     2D 00 64 FD | 	ret
264fc                 | 
264fc                 | _fatfs_cc_mktime
264fc     06 4A 05 F6 | 	mov	COUNT_, #6
26500     A8 00 A0 FD | 	call	#pushregs_
26504     09 1F 02 F6 | 	mov	local01, arg01
26508     14 1E 06 F1 | 	add	local01, #20
2650c     0F 13 02 FB | 	rdlong	arg01, local01
26510     14 1E 86 F1 | 	sub	local01, #20
26514     46 12 56 F2 | 	cmps	arg01, #70 wc
26518                 | '                 return (time_t) -1;
26518     01 FA 65 C6 |  if_b	neg	result1, #1
2651c     7C 01 90 CD |  if_b	jmp	#LR__3954
26520     03 00 00 FF 
26524     6C 21 06 F6 | 	mov	local02, ##1900
26528     14 1E 06 F1 | 	add	local01, #20
2652c     0F FB 01 FB | 	rdlong	result1, local01
26530     FD 20 02 F1 | 	add	local02, result1
26534     08 1E 86 F1 | 	sub	local01, #8
26538     0F 23 02 FB | 	rdlong	local03, local01
2653c     01 22 86 F1 | 	sub	local03, #1
26540     04 1E 06 F1 | 	add	local01, #4
26544     0F 13 02 FB | 	rdlong	arg01, local01
26548     10 1E 86 F1 | 	sub	local01, #16
2654c     02 12 66 F0 | 	shl	arg01, #2
26550     02 00 00 FF 
26554     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
26558     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2655c     09 FB 01 FB | 	rdlong	result1, arg01
26560     FD 22 02 F1 | 	add	local03, result1
26564     10 13 02 F6 | 	mov	arg01, local02
26568     02 00 00 FF 
2656c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
26570     DC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
26574     00 FA 0D F2 | 	cmp	result1, #0 wz
26578     1C 00 90 AD |  if_e	jmp	#LR__3950
2657c     00 24 06 F6 | 	mov	local04, #0
26580     10 1E 06 F1 | 	add	local01, #16
26584     0F FB 01 FB | 	rdlong	result1, local01
26588     10 1E 86 F1 | 	sub	local01, #16
2658c     02 FA 55 F2 | 	cmps	result1, #2 wc
26590     01 24 06 36 |  if_ae	mov	local04, #1
26594     04 00 90 FD | 	jmp	#LR__3951
26598                 | LR__3950
26598     00 24 06 F6 | 	mov	local04, #0
2659c                 | LR__3951
2659c     04 1E 06 F1 | 	add	local01, #4
265a0     0F FB 01 FB | 	rdlong	result1, local01
265a4     04 1E 86 F1 | 	sub	local01, #4
265a8     0F 27 02 FB | 	rdlong	local05, local01
265ac     08 1E 06 F1 | 	add	local01, #8
265b0     0F 13 02 FB | 	rdlong	arg01, local01
265b4     07 00 00 FF 
265b8     10 12 06 FD | 	qmul	arg01, ##3600
265bc     12 23 02 F1 | 	add	local03, local04
265c0     FD 24 02 F6 | 	mov	local04, result1
265c4     04 24 66 F0 | 	shl	local04, #4
265c8     FD 24 82 F1 | 	sub	local04, result1
265cc     02 24 66 F0 | 	shl	local04, #2
265d0     12 27 02 F1 | 	add	local05, local04
265d4     08 1E 86 F1 | 	sub	local01, #8
265d8     18 24 62 FD | 	getqx	local04
265dc     A8 00 00 FF 
265e0     80 23 06 FD | 	qmul	local03, ##86400
265e4     12 27 02 F1 | 	add	local05, local04
265e8     10 23 02 F6 | 	mov	local03, local02
265ec     03 00 00 FF 
265f0     B2 23 86 F1 | 	sub	local03, ##1970
265f4     18 24 62 FD | 	getqx	local04
265f8     99 F0 00 FF 
265fc     80 23 06 FD | 	qmul	local03, ##31536000
26600     12 27 02 F1 | 	add	local05, local04
26604     10 23 02 F6 | 	mov	local03, local02
26608     03 00 00 FF 
2660c     B1 23 86 F1 | 	sub	local03, ##1969
26610     11 29 52 F6 | 	abs	local06, local03 wc
26614     02 28 46 F0 | 	shr	local06, #2
26618     14 29 82 F6 | 	negc	local06, local06
2661c     03 00 00 FF 
26620     D1 21 56 F2 | 	cmps	local02, ##2001 wc
26624     18 24 62 FD | 	getqx	local04
26628     12 27 02 F1 | 	add	local05, local04
2662c     18 00 90 CD |  if_b	jmp	#LR__3952
26630     03 00 00 FF 
26634     D0 21 86 F1 | 	sub	local02, ##2000
26638     10 25 52 F6 | 	abs	local04, local02 wc
2663c     64 24 16 FD | 	qdiv	local04, #100
26640     18 24 62 FD | 	getqx	local04
26644     12 29 A2 F3 | 	sumnc	local06, local04
26648                 | LR__3952
26648     A8 00 00 FF 
2664c     80 29 06 FD | 	qmul	local06, ##86400
26650     18 28 62 FD | 	getqx	local06
26654     14 27 02 F1 | 	add	local05, local06
26658     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2665c     02 00 00 FF 
26660     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26664     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
26668     14 27 02 F1 | 	add	local05, local06
2666c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
26670     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26674     02 00 00 FF 
26678     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2667c     01 22 0E F2 | 	cmp	local03, #1 wz
26680     14 00 90 5D |  if_ne	jmp	#LR__3953
26684     0F 13 02 F6 | 	mov	arg01, local01
26688     C8 19 B0 FD | 	call	#_fatfs_cc___indst
2668c     00 FA 0D F2 | 	cmp	result1, #0 wz
26690     07 00 00 5F 
26694     10 26 86 51 |  if_ne	sub	local05, ##3600
26698                 | LR__3953
26698                 | '                 s -=  (3600L) ;
26698                 | ' 
26698                 | '         return s;
26698     13 FB 01 F6 | 	mov	result1, local05
2669c                 | LR__3954
2669c     A7 F0 03 F6 | 	mov	ptra, fp
266a0     B2 00 A0 FD | 	call	#popregs_
266a4                 | _fatfs_cc_mktime_ret
266a4     2D 00 64 FD | 	ret
266a8                 | 
266a8                 | _fatfs_cc__gmtime_r
266a8     03 4A 05 F6 | 	mov	COUNT_, #3
266ac     A8 00 A0 FD | 	call	#pushregs_
266b0     09 1F 02 FB | 	rdlong	local01, arg01
266b4     A8 00 00 FF 
266b8     80 1F 16 FD | 	qdiv	local01, ##86400
266bc     18 FA 61 FD | 	getqx	result1
266c0     04 FA 05 F1 | 	add	result1, #4
266c4     07 FA 15 FD | 	qdiv	result1, #7
266c8     18 14 06 F1 | 	add	arg02, #24
266cc     D1 7F 27 FF 
266d0     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
266d4     D1 7F 27 3F 
266d8     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
266dc     03 00 00 3F 
266e0     DC 21 06 36 |  if_ae	mov	local02, ##2012
266e4     03 00 00 CF 
266e8     B2 21 06 C6 |  if_b	mov	local02, ##1970
266ec                 | ' 	  year = 1970;
266ec                 | ' 	}
266ec                 | ' 
266ec                 | ' 	for(;;) {
266ec     19 FA 61 FD | 	getqy	result1
266f0     0A FB 61 FC | 	wrlong	result1, arg02
266f4     18 14 86 F1 | 	sub	arg02, #24
266f8                 | LR__3960
266f8     10 13 02 F6 | 	mov	arg01, local02
266fc     50 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
26700     00 FA 0D F2 | 	cmp	result1, #0 wz
26704     42 F1 00 5F 
26708     00 23 06 56 |  if_ne	mov	local03, ##31622400
2670c     99 F0 00 AF 
26710     80 23 06 A6 |  if_e	mov	local03, ##31536000
26714     11 1F 12 F2 | 	cmp	local01, local03 wc
26718                 | ' 	    break;
26718     01 20 06 31 |  if_ae	add	local02, #1
2671c     11 1F 82 31 |  if_ae	sub	local01, local03
26720     D4 FF 9F 3D |  if_ae	jmp	#LR__3960
26724     A8 00 00 FF 
26728     80 1F 16 FD | 	qdiv	local01, ##86400
2672c     10 23 02 F6 | 	mov	local03, local02
26730     03 00 00 FF 
26734     6C 23 86 F1 | 	sub	local03, ##1900
26738     14 14 06 F1 | 	add	arg02, #20
2673c     0A 23 62 FC | 	wrlong	local03, arg02
26740     08 14 06 F1 | 	add	arg02, #8
26744     10 13 02 F6 | 	mov	arg01, local02
26748     18 20 62 FD | 	getqx	local02
2674c     0A 21 62 FC | 	wrlong	local02, arg02
26750     1C 14 86 F1 | 	sub	arg02, #28
26754     F8 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
26758     00 FA 0D F2 | 	cmp	result1, #0 wz
2675c     1D 22 06 56 |  if_ne	mov	local03, #29
26760     1C 22 06 A6 |  if_e	mov	local03, #28
26764     02 00 00 FF 
26768     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2676c     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
26770     02 00 00 FF 
26774     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
26778                 | ' 
26778                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
26778                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
26778     00 12 06 F6 | 	mov	arg01, #0
2677c     97 2A 48 FB | 	callpa	#(@LR__3962-@LR__3961)>>2,fcache_load_ptr_
26780                 | LR__3961
26780     09 23 02 F6 | 	mov	local03, arg01
26784     02 22 66 F0 | 	shl	local03, #2
26788     02 00 00 FF 
2678c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26790     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26794     11 23 02 FB | 	rdlong	local03, local03
26798     11 21 52 F2 | 	cmps	local02, local03 wc
2679c     02 00 00 FF 
267a0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
267a4     2C 00 90 CD |  if_b	jmp	#LR__3963
267a8     09 23 02 F6 | 	mov	local03, arg01
267ac     02 22 66 F0 | 	shl	local03, #2
267b0     02 00 00 FF 
267b4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
267b8     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
267bc     11 23 02 FB | 	rdlong	local03, local03
267c0     11 21 82 F1 | 	sub	local02, local03
267c4     01 12 06 F1 | 	add	arg01, #1
267c8     02 00 00 FF 
267cc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
267d0     AC FF 9F FD | 	jmp	#LR__3961
267d4                 | LR__3962
267d4                 | LR__3963
267d4     A8 00 00 FF 
267d8     80 1F 16 FD | 	qdiv	local01, ##86400
267dc     10 14 06 F1 | 	add	arg02, #16
267e0     0A 13 62 FC | 	wrlong	arg01, arg02
267e4     01 20 06 F1 | 	add	local02, #1
267e8     04 14 86 F1 | 	sub	arg02, #4
267ec     0A 21 62 FC | 	wrlong	local02, arg02
267f0     19 1E 62 FD | 	getqy	local01
267f4     07 00 00 FF 
267f8     10 1E 16 FD | 	qdiv	local01, ##3600
267fc     18 22 62 FD | 	getqx	local03
26800     07 00 00 FF 
26804     10 1E 16 FD | 	qdiv	local01, ##3600
26808     04 14 86 F1 | 	sub	arg02, #4
2680c     0A 23 62 FC | 	wrlong	local03, arg02
26810     19 1E 62 FD | 	getqy	local01
26814     3C 1E 16 FD | 	qdiv	local01, #60
26818     18 22 62 FD | 	getqx	local03
2681c     3C 1E 16 FD | 	qdiv	local01, #60
26820     04 14 86 F1 | 	sub	arg02, #4
26824     0A 23 62 FC | 	wrlong	local03, arg02
26828     04 14 86 F1 | 	sub	arg02, #4
2682c                 | '         stm->tm_isdst = 0;
2682c                 | ' 
2682c                 | ' ;
2682c                 | '         return stm;
2682c     0A FB 01 F6 | 	mov	result1, arg02
26830     19 22 62 FD | 	getqy	local03
26834     0A 23 62 FC | 	wrlong	local03, arg02
26838     20 14 06 F1 | 	add	arg02, #32
2683c     0A 01 68 FC | 	wrlong	#0, arg02
26840     A7 F0 03 F6 | 	mov	ptra, fp
26844     B2 00 A0 FD | 	call	#popregs_
26848                 | _fatfs_cc__gmtime_r_ret
26848     2D 00 64 FD | 	ret
2684c                 | 
2684c                 | _fatfs_cc__tzset
2684c     41 01 00 FF 
26850     7D 13 06 F6 | 	mov	arg01, ##@LR__4275
26854     34 00 B0 FD | 	call	#_fatfs_cc_getenv
26858     FD 12 02 F6 | 	mov	arg01, result1
2685c     02 00 00 FF 
26860     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
26864     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
26868     02 00 00 FF 
2686c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26870     2C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
26874     02 00 00 FF 
26878     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2687c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
26880     02 00 00 FF 
26884     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
26888                 | _fatfs_cc__tzset_ret
26888     2D 00 64 FD | 	ret
2688c                 | 
2688c                 | _fatfs_cc_getenv
2688c     06 4A 05 F6 | 	mov	COUNT_, #6
26890     A8 00 A0 FD | 	call	#pushregs_
26894     09 1F 02 F6 | 	mov	local01, arg01
26898     09 21 02 F6 | 	mov	local02, arg01
2689c     97 06 48 FB | 	callpa	#(@LR__3971-@LR__3970)>>2,fcache_load_ptr_
268a0                 | LR__3970
268a0     10 FB C9 FA | 	rdbyte	result1, local02 wz
268a4     01 20 06 51 |  if_ne	add	local02, #1
268a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3970
268ac                 | LR__3971
268ac     09 21 82 F1 | 	sub	local02, arg01
268b0     10 FB 01 F6 | 	mov	result1, local02
268b4     02 00 00 FF 
268b8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
268bc     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
268c0     02 00 00 FF 
268c4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
268c8                 | '             return 0;
268c8     00 FA 05 A6 |  if_e	mov	result1, #0
268cc     5C 00 90 AD |  if_e	jmp	#LR__3974
268d0                 | ' 
268d0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
268d0     02 00 00 FF 
268d4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
268d8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
268dc     02 00 00 FF 
268e0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
268e4                 | LR__3972
268e4     11 25 0A FB | 	rdlong	local04, local03 wz
268e8     3C 00 90 AD |  if_e	jmp	#LR__3973
268ec     12 13 02 F6 | 	mov	arg01, local04
268f0     0F 15 02 F6 | 	mov	arg02, local01
268f4     10 17 02 F6 | 	mov	arg03, local02
268f8     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
268fc     00 FA 0D F2 | 	cmp	result1, #0 wz
26900     10 27 02 A6 |  if_e	mov	local05, local02
26904     12 27 02 A1 |  if_e	add	local05, local04
26908     13 29 C2 AA |  if_e	rdbyte	local06, local05
2690c     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
26910                 | ' 			return name+len+1;
26910     10 25 02 A1 |  if_e	add	local04, local02
26914     01 24 06 A1 |  if_e	add	local04, #1
26918     12 FB 01 A6 |  if_e	mov	result1, local04
2691c     0C 00 90 AD |  if_e	jmp	#LR__3974
26920     04 22 06 F1 | 	add	local03, #4
26924     BC FF 9F FD | 	jmp	#LR__3972
26928                 | LR__3973
26928                 | ' 	}
26928                 | ' 	return 0;
26928     00 FA 05 F6 | 	mov	result1, #0
2692c                 | LR__3974
2692c     A7 F0 03 F6 | 	mov	ptra, fp
26930     B2 00 A0 FD | 	call	#popregs_
26934                 | _fatfs_cc_getenv_ret
26934     2D 00 64 FD | 	ret
26938                 | 
26938                 | _fatfs_cc__get_fattime
26938     00 4A 05 F6 | 	mov	COUNT_, #0
2693c     A8 00 A0 FD | 	call	#pushregs_
26940     34 F0 07 F1 | 	add	ptra, #52
26944     00 12 06 F6 | 	mov	arg01, #0
26948     38 FB BF FD | 	call	#_fatfs_cc_time
2694c     04 4E 05 F1 | 	add	fp, #4
26950     A7 FA 61 FC | 	wrlong	result1, fp
26954     A7 12 02 F6 | 	mov	arg01, fp
26958     0C 4E 05 F1 | 	add	fp, #12
2695c     A7 14 02 F6 | 	mov	arg02, fp
26960     10 4E 85 F1 | 	sub	fp, #16
26964     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
26968     24 4E 05 F1 | 	add	fp, #36
2696c     A7 14 02 FB | 	rdlong	arg02, fp
26970     50 14 86 F1 | 	sub	arg02, #80
26974     09 14 66 F0 | 	shl	arg02, #9
26978     04 4E 85 F1 | 	sub	fp, #4
2697c     A7 FA 01 FB | 	rdlong	result1, fp
26980     01 FA 05 F1 | 	add	result1, #1
26984     05 FA 65 F0 | 	shl	result1, #5
26988     FD 14 42 F5 | 	or	arg02, result1
2698c     04 4E 85 F1 | 	sub	fp, #4
26990     A7 FA 01 FB | 	rdlong	result1, fp
26994     FD 14 42 F5 | 	or	arg02, result1
26998     14 4E 85 F1 | 	sub	fp, #20
2699c     A7 14 62 FC | 	wrlong	arg02, fp
269a0     10 4E 05 F1 | 	add	fp, #16
269a4     A7 14 02 FB | 	rdlong	arg02, fp
269a8     0B 14 66 F0 | 	shl	arg02, #11
269ac     04 4E 85 F1 | 	sub	fp, #4
269b0     A7 FA 01 FB | 	rdlong	result1, fp
269b4     05 FA 65 F0 | 	shl	result1, #5
269b8     FD 14 42 F5 | 	or	arg02, result1
269bc     04 4E 85 F1 | 	sub	fp, #4
269c0     A7 FA 01 FB | 	rdlong	result1, fp
269c4     FD 14 42 F5 | 	or	arg02, result1
269c8     04 4E 85 F1 | 	sub	fp, #4
269cc     A7 14 62 FC | 	wrlong	arg02, fp
269d0                 | ' 
269d0                 | '     now = time(0);
269d0                 | '     _gmtime_r (&now, &date);
269d0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
269d0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
269d0                 | '     return (ffdate << 16) | fftime;
269d0     04 4E 85 F1 | 	sub	fp, #4
269d4     A7 FA 01 FB | 	rdlong	result1, fp
269d8     10 FA 65 F0 | 	shl	result1, #16
269dc     08 4E 85 F1 | 	sub	fp, #8
269e0     0A FB 41 F5 | 	or	result1, arg02
269e4     A7 F0 03 F6 | 	mov	ptra, fp
269e8     B2 00 A0 FD | 	call	#popregs_
269ec                 | _fatfs_cc__get_fattime_ret
269ec     2D 00 64 FD | 	ret
269f0                 | 
269f0                 | _fatfs_cc_unixtime_0843
269f0     00 4A 05 F6 | 	mov	COUNT_, #0
269f4     A8 00 A0 FD | 	call	#pushregs_
269f8     34 F0 07 F1 | 	add	ptra, #52
269fc     04 4E 05 F1 | 	add	fp, #4
26a00     A7 12 62 FC | 	wrlong	arg01, fp
26a04     04 4E 05 F1 | 	add	fp, #4
26a08     A7 14 62 FC | 	wrlong	arg02, fp
26a0c     04 4E 85 F1 | 	sub	fp, #4
26a10     A7 14 02 FB | 	rdlong	arg02, fp
26a14     09 14 46 F0 | 	shr	arg02, #9
26a18     7F 14 06 F5 | 	and	arg02, #127
26a1c     50 FA 05 F6 | 	mov	result1, #80
26a20     0A FB 01 F1 | 	add	result1, arg02
26a24     20 4E 05 F1 | 	add	fp, #32
26a28     A7 FA 61 FC | 	wrlong	result1, fp
26a2c     20 4E 85 F1 | 	sub	fp, #32
26a30     A7 FA 01 FB | 	rdlong	result1, fp
26a34     05 FA 45 F0 | 	shr	result1, #5
26a38     FD FA 41 F8 | 	getnib	result1, result1, #0
26a3c     01 FA 85 F1 | 	sub	result1, #1
26a40     1C 4E 05 F1 | 	add	fp, #28
26a44     A7 FA 61 FC | 	wrlong	result1, fp
26a48     1C 4E 85 F1 | 	sub	fp, #28
26a4c     A7 FA 01 FB | 	rdlong	result1, fp
26a50     1F FA 05 F5 | 	and	result1, #31
26a54     18 4E 05 F1 | 	add	fp, #24
26a58     A7 FA 61 FC | 	wrlong	result1, fp
26a5c     14 4E 85 F1 | 	sub	fp, #20
26a60     A7 FA 01 FB | 	rdlong	result1, fp
26a64     0B FA 45 F0 | 	shr	result1, #11
26a68     1F FA 05 F5 | 	and	result1, #31
26a6c     10 4E 05 F1 | 	add	fp, #16
26a70     A7 FA 61 FC | 	wrlong	result1, fp
26a74     10 4E 85 F1 | 	sub	fp, #16
26a78     A7 FA 01 FB | 	rdlong	result1, fp
26a7c     05 FA 45 F0 | 	shr	result1, #5
26a80     3F FA 05 F5 | 	and	result1, #63
26a84     0C 4E 05 F1 | 	add	fp, #12
26a88     A7 FA 61 FC | 	wrlong	result1, fp
26a8c     0C 4E 85 F1 | 	sub	fp, #12
26a90     A7 14 02 FB | 	rdlong	arg02, fp
26a94     1F 14 06 F5 | 	and	arg02, #31
26a98     01 14 66 F0 | 	shl	arg02, #1
26a9c     08 4E 05 F1 | 	add	fp, #8
26aa0     A7 14 62 FC | 	wrlong	arg02, fp
26aa4     A7 12 02 F6 | 	mov	arg01, fp
26aa8     10 4E 85 F1 | 	sub	fp, #16
26aac     4C FA BF FD | 	call	#_fatfs_cc_mktime
26ab0     0C 4E 05 F1 | 	add	fp, #12
26ab4     A7 FA 61 FC | 	wrlong	result1, fp
26ab8                 | ' 
26ab8                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
26ab8                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
26ab8                 | '     date.tm_mday = (dosdate & 0x1f);
26ab8                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
26ab8                 | '     date.tm_min = (dostime >> 5) & 0x3f;
26ab8                 | '     date.tm_sec = (dostime & 0x1f) << 1;
26ab8                 | ' 
26ab8                 | '     t = mktime(&date);
26ab8                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26ab8                 | '     return t;
26ab8     0C 4E 85 F1 | 	sub	fp, #12
26abc     A7 F0 03 F6 | 	mov	ptra, fp
26ac0     B2 00 A0 FD | 	call	#popregs_
26ac4                 | _fatfs_cc_unixtime_0843_ret
26ac4     2D 00 64 FD | 	ret
26ac8                 | 
26ac8                 | _fatfs_cc__set_dos_error_0845
26ac8     09 01 02 F6 | 	mov	_var01, arg01
26acc                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26acc                 | '     switch (derr) {
26acc     14 00 26 F3 | 	fle	_var01, #20
26ad0     30 00 62 FD | 	jmprel	_var01
26ad4                 | LR__3980
26ad4     50 00 90 FD | 	jmp	#LR__3981
26ad8     84 00 90 FD | 	jmp	#LR__3995
26adc     80 00 90 FD | 	jmp	#LR__3996
26ae0     7C 00 90 FD | 	jmp	#LR__3997
26ae4     48 00 90 FD | 	jmp	#LR__3982
26ae8     44 00 90 FD | 	jmp	#LR__3983
26aec     40 00 90 FD | 	jmp	#LR__3984
26af0     44 00 90 FD | 	jmp	#LR__3985
26af4     48 00 90 FD | 	jmp	#LR__3987
26af8     54 00 90 FD | 	jmp	#LR__3990
26afc     38 00 90 FD | 	jmp	#LR__3986
26b00     4C 00 90 FD | 	jmp	#LR__3991
26b04     48 00 90 FD | 	jmp	#LR__3992
26b08     44 00 90 FD | 	jmp	#LR__3993
26b0c     50 00 90 FD | 	jmp	#LR__3998
26b10     4C 00 90 FD | 	jmp	#LR__3998
26b14     48 00 90 FD | 	jmp	#LR__3998
26b18     2C 00 90 FD | 	jmp	#LR__3988
26b1c     38 00 90 FD | 	jmp	#LR__3994
26b20     2C 00 90 FD | 	jmp	#LR__3989
26b24     38 00 90 FD | 	jmp	#LR__3998
26b28                 | LR__3981
26b28     00 02 06 F6 | 	mov	_var02, #0
26b2c                 | '         r = 0;
26b2c                 | '         break;
26b2c     34 00 90 FD | 	jmp	#LR__3999
26b30                 | LR__3982
26b30                 | LR__3983
26b30                 | LR__3984
26b30     04 02 06 F6 | 	mov	_var02, #4
26b34                 | '         r =  4 ;
26b34                 | '         break;
26b34     2C 00 90 FD | 	jmp	#LR__3999
26b38                 | LR__3985
26b38                 | LR__3986
26b38     06 02 06 F6 | 	mov	_var02, #6
26b3c                 | '         r =  6 ;
26b3c                 | '         break;
26b3c     24 00 90 FD | 	jmp	#LR__3999
26b40                 | LR__3987
26b40     09 02 06 F6 | 	mov	_var02, #9
26b44                 | '         r =  9 ;
26b44                 | '         break;
26b44     1C 00 90 FD | 	jmp	#LR__3999
26b48                 | LR__3988
26b48     07 02 06 F6 | 	mov	_var02, #7
26b4c                 | '         r =  7 ;
26b4c                 | '         break;
26b4c     14 00 90 FD | 	jmp	#LR__3999
26b50                 | LR__3989
26b50                 | LR__3990
26b50                 | LR__3991
26b50                 | LR__3992
26b50                 | LR__3993
26b50     0A 02 06 F6 | 	mov	_var02, #10
26b54                 | '         r =  10 ;
26b54                 | '         break;
26b54     0C 00 90 FD | 	jmp	#LR__3999
26b58                 | LR__3994
26b58     0B 02 06 F6 | 	mov	_var02, #11
26b5c                 | '         r =  11 ;
26b5c                 | '         break;
26b5c     04 00 90 FD | 	jmp	#LR__3999
26b60                 | LR__3995
26b60                 | LR__3996
26b60                 | LR__3997
26b60                 | LR__3998
26b60     0C 02 06 F6 | 	mov	_var02, #12
26b64                 | '         r =  12 ;
26b64                 | '         break;
26b64                 | LR__3999
26b64                 | '     }
26b64                 | '     return _seterror(r);
26b64     00 02 4E F2 | 	cmps	_var02, #0 wz
26b68     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26b6c     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26b70     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26b74     01 FA 65 56 |  if_ne	neg	result1, #1
26b78     00 FA 05 A6 |  if_e	mov	result1, #0
26b7c                 | _fatfs_cc__set_dos_error_0845_ret
26b7c     2D 00 64 FD | 	ret
26b80                 | 
26b80                 | _fatfs_cc_v_creat
26b80     04 4A 05 F6 | 	mov	COUNT_, #4
26b84     A8 00 A0 FD | 	call	#pushregs_
26b88     09 1F 02 F6 | 	mov	local01, arg01
26b8c     0A 21 02 F6 | 	mov	local02, arg02
26b90     03 00 00 FF 
26b94     3C 12 06 F6 | 	mov	arg01, ##1596
26b98                 | '     return _gc_alloc(size);
26b98     10 14 06 F6 | 	mov	arg02, #16
26b9c     2C 60 BF FD | 	call	#__system___gc_doalloc
26ba0     FD 22 0A F6 | 	mov	local03, result1 wz
26ba4                 | '       return _seterror( 7 );
26ba4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26ba8     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26bac     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26bb0     01 FA 65 A6 |  if_e	neg	result1, #1
26bb4     58 00 90 AD |  if_e	jmp	#LR__4001
26bb8     11 13 02 F6 | 	mov	arg01, local03
26bbc     00 14 06 F6 | 	mov	arg02, #0
26bc0     03 00 00 FF 
26bc4     3C 16 06 F6 | 	mov	arg03, ##1596
26bc8     98 00 A0 FD | 	call	#\builtin_bytefill_
26bcc     02 00 00 FF 
26bd0     14 22 06 F1 | 	add	local03, ##1044
26bd4     11 13 02 F6 | 	mov	arg01, local03
26bd8     02 00 00 FF 
26bdc     14 22 86 F1 | 	sub	local03, ##1044
26be0     10 15 02 F6 | 	mov	arg02, local02
26be4     07 16 06 F6 | 	mov	arg03, #7
26be8     B4 CC BF FD | 	call	#_fatfs_cc_f_open
26bec     FD 24 0A F6 | 	mov	local04, result1 wz
26bf0     14 00 90 AD |  if_e	jmp	#LR__4000
26bf4     11 13 02 F6 | 	mov	arg01, local03
26bf8                 | '     return _gc_free(ptr);
26bf8     DC 60 BF FD | 	call	#__system___gc_free
26bfc                 | '     free(f);
26bfc                 | '     return _set_dos_error(r);
26bfc     12 13 02 F6 | 	mov	arg01, local04
26c00     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26c04     08 00 90 FD | 	jmp	#LR__4001
26c08                 | LR__4000
26c08     0F 23 62 FC | 	wrlong	local03, local01
26c0c                 | '   }
26c0c                 | '   fil->vfsdata = f;
26c0c                 | '   return 0;
26c0c     00 FA 05 F6 | 	mov	result1, #0
26c10                 | LR__4001
26c10     A7 F0 03 F6 | 	mov	ptra, fp
26c14     B2 00 A0 FD | 	call	#popregs_
26c18                 | _fatfs_cc_v_creat_ret
26c18     2D 00 64 FD | 	ret
26c1c                 | 
26c1c                 | _fatfs_cc_v_close
26c1c     02 4A 05 F6 | 	mov	COUNT_, #2
26c20     A8 00 A0 FD | 	call	#pushregs_
26c24     09 1F 02 FB | 	rdlong	local01, arg01
26c28     02 00 00 FF 
26c2c     14 1E 06 F1 | 	add	local01, ##1044
26c30     0F 13 02 F6 | 	mov	arg01, local01
26c34     02 00 00 FF 
26c38     14 1E 86 F1 | 	sub	local01, ##1044
26c3c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
26c40     FD 20 02 F6 | 	mov	local02, result1
26c44     0F 13 02 F6 | 	mov	arg01, local01
26c48                 | '     return _gc_free(ptr);
26c48     8C 60 BF FD | 	call	#__system___gc_free
26c4c                 | '     FAT_FIL *f = fil->vfsdata;
26c4c                 | '     r=f_close(&f->fil);
26c4c                 | '     free(f);
26c4c                 | '     return _set_dos_error(r);
26c4c     10 13 02 F6 | 	mov	arg01, local02
26c50     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26c54     A7 F0 03 F6 | 	mov	ptra, fp
26c58     B2 00 A0 FD | 	call	#popregs_
26c5c                 | _fatfs_cc_v_close_ret
26c5c     2D 00 64 FD | 	ret
26c60                 | 
26c60                 | _fatfs_cc_v_opendir
26c60     04 4A 05 F6 | 	mov	COUNT_, #4
26c64     A8 00 A0 FD | 	call	#pushregs_
26c68     09 1F 02 F6 | 	mov	local01, arg01
26c6c     0A 21 02 F6 | 	mov	local02, arg02
26c70     30 12 06 F6 | 	mov	arg01, #48
26c74                 | '     return _gc_alloc(size);
26c74     10 14 06 F6 | 	mov	arg02, #16
26c78     50 5F BF FD | 	call	#__system___gc_doalloc
26c7c     FD 22 0A F6 | 	mov	local03, result1 wz
26c80                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26c80                 | '       return _seterror( 7 );
26c80     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26c84     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26c88     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26c8c     01 FA 65 A6 |  if_e	neg	result1, #1
26c90     34 00 90 AD |  if_e	jmp	#LR__4011
26c94     10 15 02 F6 | 	mov	arg02, local02
26c98     11 13 02 F6 | 	mov	arg01, local03
26c9c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
26ca0     FD 24 0A F6 | 	mov	local04, result1 wz
26ca4     14 00 90 AD |  if_e	jmp	#LR__4010
26ca8     11 13 02 F6 | 	mov	arg01, local03
26cac                 | '     return _gc_free(ptr);
26cac     28 60 BF FD | 	call	#__system___gc_free
26cb0                 | '         free(f);
26cb0                 | '         return _set_dos_error(r);
26cb0     12 13 02 F6 | 	mov	arg01, local04
26cb4     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26cb8     0C 00 90 FD | 	jmp	#LR__4011
26cbc                 | LR__4010
26cbc     04 1E 06 F1 | 	add	local01, #4
26cc0     0F 23 62 FC | 	wrlong	local03, local01
26cc4                 | '     }
26cc4                 | '     dir->vfsdata = f;
26cc4                 | '     return 0;
26cc4     00 FA 05 F6 | 	mov	result1, #0
26cc8                 | LR__4011
26cc8     A7 F0 03 F6 | 	mov	ptra, fp
26ccc     B2 00 A0 FD | 	call	#popregs_
26cd0                 | _fatfs_cc_v_opendir_ret
26cd0     2D 00 64 FD | 	ret
26cd4                 | 
26cd4                 | _fatfs_cc_v_closedir
26cd4     02 4A 05 F6 | 	mov	COUNT_, #2
26cd8     A8 00 A0 FD | 	call	#pushregs_
26cdc     04 12 06 F1 | 	add	arg01, #4
26ce0     09 1F 02 FB | 	rdlong	local01, arg01
26ce4     0F 13 02 F6 | 	mov	arg01, local01
26ce8     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
26cec     FD 20 02 F6 | 	mov	local02, result1
26cf0     0F 13 02 F6 | 	mov	arg01, local01
26cf4                 | '     return _gc_free(ptr);
26cf4     E0 5F BF FD | 	call	#__system___gc_free
26cf8     00 20 0E F2 | 	cmp	local02, #0 wz
26cfc     10 13 02 56 |  if_ne	mov	arg01, local02
26d00     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0845
26d04                 | '     return r;
26d04     10 FB 01 F6 | 	mov	result1, local02
26d08     A7 F0 03 F6 | 	mov	ptra, fp
26d0c     B2 00 A0 FD | 	call	#popregs_
26d10                 | _fatfs_cc_v_closedir_ret
26d10     2D 00 64 FD | 	ret
26d14                 | 
26d14                 | _fatfs_cc_v_readdir
26d14     01 4A 05 F6 | 	mov	COUNT_, #1
26d18     A8 00 A0 FD | 	call	#pushregs_
26d1c     2C F1 07 F1 | 	add	ptra, #300
26d20     04 4E 05 F1 | 	add	fp, #4
26d24     A7 12 62 FC | 	wrlong	arg01, fp
26d28     04 4E 05 F1 | 	add	fp, #4
26d2c     A7 14 62 FC | 	wrlong	arg02, fp
26d30     04 4E 85 F1 | 	sub	fp, #4
26d34     A7 16 02 FB | 	rdlong	arg03, fp
26d38     04 16 06 F1 | 	add	arg03, #4
26d3c     0B 13 02 FB | 	rdlong	arg01, arg03
26d40     08 4E 05 F1 | 	add	fp, #8
26d44     A7 14 02 F6 | 	mov	arg02, fp
26d48     0C 4E 85 F1 | 	sub	fp, #12
26d4c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
26d50     28 4F 05 F1 | 	add	fp, #296
26d54     A7 FA 61 FC | 	wrlong	result1, fp
26d58     28 4F 85 F1 | 	sub	fp, #296
26d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
26d60     14 00 90 AD |  if_e	jmp	#LR__4020
26d64                 | '         return _set_dos_error(r);
26d64     28 4F 05 F1 | 	add	fp, #296
26d68     A7 12 02 FB | 	rdlong	arg01, fp
26d6c     28 4F 85 F1 | 	sub	fp, #296
26d70     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26d74     C4 00 90 FD | 	jmp	#LR__4023
26d78                 | LR__4020
26d78     28 4E 05 F1 | 	add	fp, #40
26d7c     A7 16 CA FA | 	rdbyte	arg03, fp wz
26d80     28 4E 85 F1 | 	sub	fp, #40
26d84                 | '         return -1;
26d84     01 FA 65 A6 |  if_e	neg	result1, #1
26d88     B0 00 90 AD |  if_e	jmp	#LR__4023
26d8c     08 4E 05 F1 | 	add	fp, #8
26d90     A7 12 02 FB | 	rdlong	arg01, fp
26d94     20 4E 05 F1 | 	add	fp, #32
26d98     A7 14 02 F6 | 	mov	arg02, fp
26d9c     28 4E 85 F1 | 	sub	fp, #40
26da0     3F 16 06 F6 | 	mov	arg03, #63
26da4     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
26da8     08 4E 05 F1 | 	add	fp, #8
26dac     A7 16 02 FB | 	rdlong	arg03, fp
26db0     3F 16 06 F1 | 	add	arg03, #63
26db4     0B 01 48 FC | 	wrbyte	#0, arg03
26db8     0C 4E 05 F1 | 	add	fp, #12
26dbc     A7 16 C2 FA | 	rdbyte	arg03, fp
26dc0     14 4E 85 F1 | 	sub	fp, #20
26dc4     10 16 CE F7 | 	test	arg03, #16 wz
26dc8     18 00 90 AD |  if_e	jmp	#LR__4021
26dcc     08 4E 05 F1 | 	add	fp, #8
26dd0     A7 16 02 FB | 	rdlong	arg03, fp
26dd4     08 4E 85 F1 | 	sub	fp, #8
26dd8     50 16 06 F1 | 	add	arg03, #80
26ddc     0B 03 48 FC | 	wrbyte	#1, arg03
26de0     14 00 90 FD | 	jmp	#LR__4022
26de4                 | LR__4021
26de4     08 4E 05 F1 | 	add	fp, #8
26de8     A7 16 02 FB | 	rdlong	arg03, fp
26dec     08 4E 85 F1 | 	sub	fp, #8
26df0     50 16 06 F1 | 	add	arg03, #80
26df4     0B 01 48 FC | 	wrbyte	#0, arg03
26df8                 | LR__4022
26df8     08 4E 05 F1 | 	add	fp, #8
26dfc     A7 16 02 FB | 	rdlong	arg03, fp
26e00     04 4E 05 F1 | 	add	fp, #4
26e04     A7 14 02 FB | 	rdlong	arg02, fp
26e08     48 16 06 F1 | 	add	arg03, #72
26e0c     0B 15 62 FC | 	wrlong	arg02, arg03
26e10     04 4E 85 F1 | 	sub	fp, #4
26e14     A7 1E 02 FB | 	rdlong	local01, fp
26e18     08 4E 05 F1 | 	add	fp, #8
26e1c     A7 12 E2 FA | 	rdword	arg01, fp
26e20     02 4E 05 F1 | 	add	fp, #2
26e24     A7 14 E2 FA | 	rdword	arg02, fp
26e28     12 4E 85 F1 | 	sub	fp, #18
26e2c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0843
26e30     4C 1E 06 F1 | 	add	local01, #76
26e34     0F FB 61 FC | 	wrlong	result1, local01
26e38                 | '         ent->d_type =  (0) ;
26e38                 | '     }
26e38                 | '     ent->d_size = finfo.fsize;
26e38                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
26e38                 | '     return 0;
26e38     00 FA 05 F6 | 	mov	result1, #0
26e3c                 | LR__4023
26e3c     A7 F0 03 F6 | 	mov	ptra, fp
26e40     B2 00 A0 FD | 	call	#popregs_
26e44                 | _fatfs_cc_v_readdir_ret
26e44     2D 00 64 FD | 	ret
26e48                 | 
26e48                 | _fatfs_cc_v_stat
26e48     03 4A 05 F6 | 	mov	COUNT_, #3
26e4c     A8 00 A0 FD | 	call	#pushregs_
26e50     30 F1 07 F1 | 	add	ptra, #304
26e54     04 4E 05 F1 | 	add	fp, #4
26e58     A7 12 62 FC | 	wrlong	arg01, fp
26e5c     04 4E 05 F1 | 	add	fp, #4
26e60     A7 14 62 FC | 	wrlong	arg02, fp
26e64     08 4E 85 F1 | 	sub	fp, #8
26e68     0A 13 02 F6 | 	mov	arg01, arg02
26e6c     00 14 06 F6 | 	mov	arg02, #0
26e70     30 16 06 F6 | 	mov	arg03, #48
26e74     98 00 A0 FD | 	call	#\builtin_bytefill_
26e78     04 4E 05 F1 | 	add	fp, #4
26e7c     A7 FA 01 FB | 	rdlong	result1, fp
26e80     04 4E 85 F1 | 	sub	fp, #4
26e84     FD FA C9 FA | 	rdbyte	result1, result1 wz
26e88     2C 00 90 AD |  if_e	jmp	#LR__4030
26e8c     04 4E 05 F1 | 	add	fp, #4
26e90     A7 FA 01 FB | 	rdlong	result1, fp
26e94     04 4E 85 F1 | 	sub	fp, #4
26e98     FD FA C1 FA | 	rdbyte	result1, result1
26e9c     2E FA 0D F2 | 	cmp	result1, #46 wz
26ea0     04 4E 05 A1 |  if_e	add	fp, #4
26ea4     A7 1E 02 AB |  if_e	rdlong	local01, fp
26ea8     04 4E 85 A1 |  if_e	sub	fp, #4
26eac     01 1E 06 A1 |  if_e	add	local01, #1
26eb0     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
26eb4     18 00 90 5D |  if_ne	jmp	#LR__4031
26eb8                 | LR__4030
26eb8     18 4E 05 F1 | 	add	fp, #24
26ebc     A7 20 48 FC | 	wrbyte	#16, fp
26ec0     0C 4E 85 F1 | 	sub	fp, #12
26ec4     A7 00 68 FC | 	wrlong	#0, fp
26ec8     0C 4E 85 F1 | 	sub	fp, #12
26ecc     24 00 90 FD | 	jmp	#LR__4032
26ed0                 | LR__4031
26ed0     04 4E 05 F1 | 	add	fp, #4
26ed4     A7 12 02 FB | 	rdlong	arg01, fp
26ed8     0C 4E 05 F1 | 	add	fp, #12
26edc     A7 14 02 F6 | 	mov	arg02, fp
26ee0     10 4E 85 F1 | 	sub	fp, #16
26ee4     AC EB BF FD | 	call	#_fatfs_cc_f_stat
26ee8     0C 4E 05 F1 | 	add	fp, #12
26eec     A7 FA 61 FC | 	wrlong	result1, fp
26ef0     0C 4E 85 F1 | 	sub	fp, #12
26ef4                 | LR__4032
26ef4     0C 4E 05 F1 | 	add	fp, #12
26ef8     A7 20 0A FB | 	rdlong	local02, fp wz
26efc     0C 4E 85 F1 | 	sub	fp, #12
26f00     14 00 90 AD |  if_e	jmp	#LR__4033
26f04                 | '         return _set_dos_error(r);
26f04     0C 4E 05 F1 | 	add	fp, #12
26f08     A7 12 02 FB | 	rdlong	arg01, fp
26f0c     0C 4E 85 F1 | 	sub	fp, #12
26f10     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26f14     14 01 90 FD | 	jmp	#LR__4034
26f18                 | LR__4033
26f18     2C 4F 05 F1 | 	add	fp, #300
26f1c     A7 48 6A FC | 	wrlong	#292, fp
26f20     14 4F 85 F1 | 	sub	fp, #276
26f24     A7 22 C2 FA | 	rdbyte	local03, fp
26f28     18 4E 85 F1 | 	sub	fp, #24
26f2c     01 22 CE F7 | 	test	local03, #1 wz
26f30     2C 4F 05 A1 |  if_e	add	fp, #300
26f34     A7 22 02 AB |  if_e	rdlong	local03, fp
26f38     92 22 46 A5 |  if_e	or	local03, #146
26f3c     A7 22 62 AC |  if_e	wrlong	local03, fp
26f40     2C 4F 85 A1 |  if_e	sub	fp, #300
26f44     18 4E 05 F1 | 	add	fp, #24
26f48     A7 22 C2 FA | 	rdbyte	local03, fp
26f4c     18 4E 85 F1 | 	sub	fp, #24
26f50     10 22 CE F7 | 	test	local03, #16 wz
26f54     2C 4F 05 51 |  if_ne	add	fp, #300
26f58     A7 22 02 5B |  if_ne	rdlong	local03, fp
26f5c     08 00 00 5F 
26f60     49 22 46 55 |  if_ne	or	local03, ##4169
26f64     A7 22 62 5C |  if_ne	wrlong	local03, fp
26f68     2C 4F 85 51 |  if_ne	sub	fp, #300
26f6c     08 4E 05 F1 | 	add	fp, #8
26f70     A7 22 02 FB | 	rdlong	local03, fp
26f74     24 4F 05 F1 | 	add	fp, #292
26f78     A7 20 02 FB | 	rdlong	local02, fp
26f7c     08 22 06 F1 | 	add	local03, #8
26f80     11 21 62 FC | 	wrlong	local02, local03
26f84     24 4F 85 F1 | 	sub	fp, #292
26f88     A7 22 02 FB | 	rdlong	local03, fp
26f8c     0C 22 06 F1 | 	add	local03, #12
26f90     11 03 68 FC | 	wrlong	#1, local03
26f94     A7 22 02 FB | 	rdlong	local03, fp
26f98     08 4E 05 F1 | 	add	fp, #8
26f9c     A7 20 02 FB | 	rdlong	local02, fp
26fa0     18 22 06 F1 | 	add	local03, #24
26fa4     11 21 62 FC | 	wrlong	local02, local03
26fa8     08 4E 85 F1 | 	sub	fp, #8
26fac     A7 22 02 FB | 	rdlong	local03, fp
26fb0     1C 22 06 F1 | 	add	local03, #28
26fb4     01 00 80 FF 
26fb8     11 01 68 FC | 	wrlong	##512, local03
26fbc     A7 20 02 FB | 	rdlong	local02, fp
26fc0     10 23 02 F6 | 	mov	local03, local02
26fc4     18 20 06 F1 | 	add	local02, #24
26fc8     10 21 02 FB | 	rdlong	local02, local02
26fcc     FF 21 06 F1 | 	add	local02, #511
26fd0     10 21 52 F6 | 	abs	local02, local02 wc
26fd4     09 20 46 F0 | 	shr	local02, #9
26fd8     10 21 82 F6 | 	negc	local02, local02
26fdc     20 22 06 F1 | 	add	local03, #32
26fe0     11 21 62 FC | 	wrlong	local02, local03
26fe4     A7 20 02 FB | 	rdlong	local02, fp
26fe8     10 23 02 F6 | 	mov	local03, local02
26fec     10 1F 02 F6 | 	mov	local01, local02
26ff0     0C 4E 05 F1 | 	add	fp, #12
26ff4     A7 12 E2 FA | 	rdword	arg01, fp
26ff8     02 4E 05 F1 | 	add	fp, #2
26ffc     A7 14 E2 FA | 	rdword	arg02, fp
27000     16 4E 85 F1 | 	sub	fp, #22
27004     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0843
27008     2C 1E 06 F1 | 	add	local01, #44
2700c     0F FB 61 FC | 	wrlong	result1, local01
27010     28 20 06 F1 | 	add	local02, #40
27014     10 FB 61 FC | 	wrlong	result1, local02
27018     24 22 06 F1 | 	add	local03, #36
2701c     11 FB 61 FC | 	wrlong	result1, local03
27020                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
27020                 | '     }
27020                 | '     buf->st_mode = mode;
27020                 | '     buf->st_nlink = 1;
27020                 | '     buf->st_size = finfo.fsize;
27020                 | '     buf->st_blksize = 512;
27020                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
27020                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
27020                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27020                 | '     return r;
27020     0C 4E 05 F1 | 	add	fp, #12
27024     A7 FA 01 FB | 	rdlong	result1, fp
27028     0C 4E 85 F1 | 	sub	fp, #12
2702c                 | LR__4034
2702c     A7 F0 03 F6 | 	mov	ptra, fp
27030     B2 00 A0 FD | 	call	#popregs_
27034                 | _fatfs_cc_v_stat_ret
27034     2D 00 64 FD | 	ret
27038                 | 
27038                 | _fatfs_cc_v_read
27038     00 4A 05 F6 | 	mov	COUNT_, #0
2703c     A8 00 A0 FD | 	call	#pushregs_
27040     1C F0 07 F1 | 	add	ptra, #28
27044     04 4E 05 F1 | 	add	fp, #4
27048     A7 12 62 FC | 	wrlong	arg01, fp
2704c     04 4E 05 F1 | 	add	fp, #4
27050     A7 14 62 FC | 	wrlong	arg02, fp
27054     04 4E 05 F1 | 	add	fp, #4
27058     A7 16 62 FC | 	wrlong	arg03, fp
2705c     08 4E 85 F1 | 	sub	fp, #8
27060     A7 12 02 FB | 	rdlong	arg01, fp
27064     09 13 0A FB | 	rdlong	arg01, arg01 wz
27068     0C 4E 05 F1 | 	add	fp, #12
2706c     A7 12 62 FC | 	wrlong	arg01, fp
27070     10 4E 85 F1 | 	sub	fp, #16
27074                 | '         return _seterror( 5 );
27074     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27078     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2707c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27080     01 FA 65 A6 |  if_e	neg	result1, #1
27084     B8 00 90 AD |  if_e	jmp	#LR__4042
27088     10 4E 05 F1 | 	add	fp, #16
2708c     A7 12 02 FB | 	rdlong	arg01, fp
27090     02 00 00 FF 
27094     14 12 06 F1 | 	add	arg01, ##1044
27098     08 4E 85 F1 | 	sub	fp, #8
2709c     A7 14 02 FB | 	rdlong	arg02, fp
270a0     04 4E 05 F1 | 	add	fp, #4
270a4     A7 16 02 FB | 	rdlong	arg03, fp
270a8     0C 4E 05 F1 | 	add	fp, #12
270ac     A7 18 02 F6 | 	mov	arg04, fp
270b0     18 4E 85 F1 | 	sub	fp, #24
270b4     C4 CE BF FD | 	call	#_fatfs_cc_f_read
270b8     14 4E 05 F1 | 	add	fp, #20
270bc     A7 FA 61 FC | 	wrlong	result1, fp
270c0     14 4E 85 F1 | 	sub	fp, #20
270c4     00 FA 0D F2 | 	cmp	result1, #0 wz
270c8     34 00 90 AD |  if_e	jmp	#LR__4040
270cc     04 4E 05 F1 | 	add	fp, #4
270d0     A7 18 02 FB | 	rdlong	arg04, fp
270d4     0C 17 02 F6 | 	mov	arg03, arg04
270d8     08 18 06 F1 | 	add	arg04, #8
270dc     0C 19 02 FB | 	rdlong	arg04, arg04
270e0     20 18 46 F5 | 	or	arg04, #32
270e4     08 16 06 F1 | 	add	arg03, #8
270e8     0B 19 62 FC | 	wrlong	arg04, arg03
270ec                 | '         fil->state |=  (0x20) ;
270ec                 | '         return _set_dos_error(r);
270ec     10 4E 05 F1 | 	add	fp, #16
270f0     A7 12 02 FB | 	rdlong	arg01, fp
270f4     14 4E 85 F1 | 	sub	fp, #20
270f8     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
270fc     40 00 90 FD | 	jmp	#LR__4042
27100                 | LR__4040
27100     18 4E 05 F1 | 	add	fp, #24
27104     A7 FA 09 FB | 	rdlong	result1, fp wz
27108     18 4E 85 F1 | 	sub	fp, #24
2710c     24 00 90 5D |  if_ne	jmp	#LR__4041
27110     04 4E 05 F1 | 	add	fp, #4
27114     A7 FA 01 FB | 	rdlong	result1, fp
27118     FD 18 02 F6 | 	mov	arg04, result1
2711c     04 4E 85 F1 | 	sub	fp, #4
27120     08 FA 05 F1 | 	add	result1, #8
27124     FD FA 01 FB | 	rdlong	result1, result1
27128     10 FA 45 F5 | 	or	result1, #16
2712c     08 18 06 F1 | 	add	arg04, #8
27130     0C FB 61 FC | 	wrlong	result1, arg04
27134                 | LR__4041
27134                 | '         fil->state |=  (0x10) ;
27134                 | '     }
27134                 | '     return x;
27134     18 4E 05 F1 | 	add	fp, #24
27138     A7 FA 01 FB | 	rdlong	result1, fp
2713c     18 4E 85 F1 | 	sub	fp, #24
27140                 | LR__4042
27140     A7 F0 03 F6 | 	mov	ptra, fp
27144     B2 00 A0 FD | 	call	#popregs_
27148                 | _fatfs_cc_v_read_ret
27148     2D 00 64 FD | 	ret
2714c                 | 
2714c                 | _fatfs_cc_v_write
2714c     00 4A 05 F6 | 	mov	COUNT_, #0
27150     A8 00 A0 FD | 	call	#pushregs_
27154     1C F0 07 F1 | 	add	ptra, #28
27158     04 4E 05 F1 | 	add	fp, #4
2715c     A7 12 62 FC | 	wrlong	arg01, fp
27160     04 4E 05 F1 | 	add	fp, #4
27164     A7 14 62 FC | 	wrlong	arg02, fp
27168     04 4E 05 F1 | 	add	fp, #4
2716c     A7 16 62 FC | 	wrlong	arg03, fp
27170     08 4E 85 F1 | 	sub	fp, #8
27174     A7 12 02 FB | 	rdlong	arg01, fp
27178     09 13 0A FB | 	rdlong	arg01, arg01 wz
2717c     0C 4E 05 F1 | 	add	fp, #12
27180     A7 12 62 FC | 	wrlong	arg01, fp
27184     10 4E 85 F1 | 	sub	fp, #16
27188                 | '         return _seterror( 5 );
27188     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2718c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27190     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27194     01 FA 65 A6 |  if_e	neg	result1, #1
27198     84 00 90 AD |  if_e	jmp	#LR__4051
2719c     10 4E 05 F1 | 	add	fp, #16
271a0     A7 12 02 FB | 	rdlong	arg01, fp
271a4     02 00 00 FF 
271a8     14 12 06 F1 | 	add	arg01, ##1044
271ac     08 4E 85 F1 | 	sub	fp, #8
271b0     A7 14 02 FB | 	rdlong	arg02, fp
271b4     04 4E 05 F1 | 	add	fp, #4
271b8     A7 16 02 FB | 	rdlong	arg03, fp
271bc     0C 4E 05 F1 | 	add	fp, #12
271c0     A7 18 02 F6 | 	mov	arg04, fp
271c4     18 4E 85 F1 | 	sub	fp, #24
271c8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
271cc     14 4E 05 F1 | 	add	fp, #20
271d0     A7 FA 61 FC | 	wrlong	result1, fp
271d4     14 4E 85 F1 | 	sub	fp, #20
271d8     00 FA 0D F2 | 	cmp	result1, #0 wz
271dc     34 00 90 AD |  if_e	jmp	#LR__4050
271e0     04 4E 05 F1 | 	add	fp, #4
271e4     A7 18 02 FB | 	rdlong	arg04, fp
271e8     0C 17 02 F6 | 	mov	arg03, arg04
271ec     08 18 06 F1 | 	add	arg04, #8
271f0     0C 19 02 FB | 	rdlong	arg04, arg04
271f4     20 18 46 F5 | 	or	arg04, #32
271f8     08 16 06 F1 | 	add	arg03, #8
271fc     0B 19 62 FC | 	wrlong	arg04, arg03
27200                 | '         fil->state |=  (0x20) ;
27200                 | '         return _set_dos_error(r);
27200     10 4E 05 F1 | 	add	fp, #16
27204     A7 12 02 FB | 	rdlong	arg01, fp
27208     14 4E 85 F1 | 	sub	fp, #20
2720c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27210     0C 00 90 FD | 	jmp	#LR__4051
27214                 | LR__4050
27214                 | '     }
27214                 | '     return x;
27214     18 4E 05 F1 | 	add	fp, #24
27218     A7 FA 01 FB | 	rdlong	result1, fp
2721c     18 4E 85 F1 | 	sub	fp, #24
27220                 | LR__4051
27220     A7 F0 03 F6 | 	mov	ptra, fp
27224     B2 00 A0 FD | 	call	#popregs_
27228                 | _fatfs_cc_v_write_ret
27228     2D 00 64 FD | 	ret
2722c                 | 
2722c                 | _fatfs_cc_v_lseek
2722c     04 4A 05 F6 | 	mov	COUNT_, #4
27230     A8 00 A0 FD | 	call	#pushregs_
27234     0A 1F 02 F6 | 	mov	local01, arg02
27238     0B 21 02 F6 | 	mov	local02, arg03
2723c     09 23 02 FB | 	rdlong	local03, arg01
27240     02 00 00 FF 
27244     14 22 0E F1 | 	add	local03, ##1044 wz
27248                 | '         return _seterror( 5 );
27248     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2724c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27250     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27254     01 FA 65 A6 |  if_e	neg	result1, #1
27258     4C 00 90 AD |  if_e	jmp	#LR__4062
2725c     00 20 0E F2 | 	cmp	local02, #0 wz
27260     24 00 90 AD |  if_e	jmp	#LR__4060
27264     01 20 0E F2 | 	cmp	local02, #1 wz
27268     14 22 06 A1 |  if_e	add	local03, #20
2726c     11 25 02 AB |  if_e	rdlong	local04, local03
27270     14 22 86 A1 |  if_e	sub	local03, #20
27274     12 1F 02 A1 |  if_e	add	local01, local04
27278     0C 22 06 51 |  if_ne	add	local03, #12
2727c     11 25 02 5B |  if_ne	rdlong	local04, local03
27280     0C 22 86 51 |  if_ne	sub	local03, #12
27284     12 1F 02 51 |  if_ne	add	local01, local04
27288                 | LR__4060
27288     0F 15 02 F6 | 	mov	arg02, local01
2728c     11 13 02 F6 | 	mov	arg01, local03
27290     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
27294     FD 12 0A F6 | 	mov	arg01, result1 wz
27298     08 00 90 AD |  if_e	jmp	#LR__4061
2729c                 | '         return _set_dos_error(result);
2729c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272a0     04 00 90 FD | 	jmp	#LR__4062
272a4                 | LR__4061
272a4                 | '     }
272a4                 | '     return offset;
272a4     0F FB 01 F6 | 	mov	result1, local01
272a8                 | LR__4062
272a8     A7 F0 03 F6 | 	mov	ptra, fp
272ac     B2 00 A0 FD | 	call	#popregs_
272b0                 | _fatfs_cc_v_lseek_ret
272b0     2D 00 64 FD | 	ret
272b4                 | 
272b4                 | _fatfs_cc_v_ioctl
272b4                 | ' {
272b4                 | '     return _seterror( 10 );
272b4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
272b8     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
272bc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
272c0     01 FA 65 F6 | 	neg	result1, #1
272c4                 | _fatfs_cc_v_ioctl_ret
272c4     2D 00 64 FD | 	ret
272c8                 | 
272c8                 | _fatfs_cc_v_mkdir
272c8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
272cc     FD 12 02 F6 | 	mov	arg01, result1
272d0                 | ' 
272d0                 | '     r = f_mkdir(name);
272d0                 | '     return _set_dos_error(r);
272d0     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272d4                 | _fatfs_cc_v_mkdir_ret
272d4     2D 00 64 FD | 	ret
272d8                 | 
272d8                 | _fatfs_cc_v_remove
272d8     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
272dc     FD 12 02 F6 | 	mov	arg01, result1
272e0                 | ' 
272e0                 | '     r = f_unlink(name);
272e0                 | '     return _set_dos_error(r);
272e0     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272e4                 | _fatfs_cc_v_remove_ret
272e4     2D 00 64 FD | 	ret
272e8                 | 
272e8                 | _fatfs_cc_v_rmdir
272e8     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
272ec     FD 12 02 F6 | 	mov	arg01, result1
272f0                 | ' 
272f0                 | '     r = f_unlink(name);
272f0                 | '     return _set_dos_error(r);
272f0     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272f4                 | _fatfs_cc_v_rmdir_ret
272f4     2D 00 64 FD | 	ret
272f8                 | 
272f8                 | _fatfs_cc_v_rename
272f8     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
272fc     FD 12 02 F6 | 	mov	arg01, result1
27300                 | '     return _set_dos_error(r);
27300     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27304                 | _fatfs_cc_v_rename_ret
27304     2D 00 64 FD | 	ret
27308                 | 
27308                 | _fatfs_cc_v_open
27308     07 4A 05 F6 | 	mov	COUNT_, #7
2730c     A8 00 A0 FD | 	call	#pushregs_
27310     09 1F 02 F6 | 	mov	local01, arg01
27314     0A 21 02 F6 | 	mov	local02, arg02
27318     0B 23 02 F6 | 	mov	local03, arg03
2731c     03 00 00 FF 
27320     3C 12 06 F6 | 	mov	arg01, ##1596
27324                 | '     return _gc_alloc(size);
27324     10 14 06 F6 | 	mov	arg02, #16
27328     A0 58 BF FD | 	call	#__system___gc_doalloc
2732c     FD 24 0A F6 | 	mov	local04, result1 wz
27330                 | '       return _seterror( 7 );
27330     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27334     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
27338     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2733c     01 FA 65 A6 |  if_e	neg	result1, #1
27340     98 00 90 AD |  if_e	jmp	#LR__4076
27344     12 13 02 F6 | 	mov	arg01, local04
27348     00 14 06 F6 | 	mov	arg02, #0
2734c     03 00 00 FF 
27350     3C 16 06 F6 | 	mov	arg03, ##1596
27354     98 00 A0 FD | 	call	#\builtin_bytefill_
27358                 | '   switch (flags & 3) {
27358     11 27 02 F6 | 	mov	local05, local03
2735c     03 26 0E F5 | 	and	local05, #3 wz
27360     0C 00 90 AD |  if_e	jmp	#LR__4070
27364     01 26 0E F2 | 	cmp	local05, #1 wz
27368     0C 00 90 AD |  if_e	jmp	#LR__4071
2736c     10 00 90 FD | 	jmp	#LR__4072
27370                 | LR__4070
27370     01 28 06 F6 | 	mov	local06, #1
27374                 | '       fs_flags =  0x01 ;
27374                 | '       break;
27374     0C 00 90 FD | 	jmp	#LR__4073
27378                 | LR__4071
27378     02 28 06 F6 | 	mov	local06, #2
2737c                 | '       fs_flags =  0x02 ;
2737c                 | '       break;
2737c     04 00 90 FD | 	jmp	#LR__4073
27380                 | LR__4072
27380     03 28 06 F6 | 	mov	local06, #3
27384                 | '       fs_flags =  0x01  |  0x02 ;
27384                 | '       break;
27384                 | LR__4073
27384     08 22 CE F7 | 	test	local03, #8 wz
27388     18 28 46 55 |  if_ne	or	local06, #24
2738c     08 00 90 5D |  if_ne	jmp	#LR__4074
27390     20 22 CE F7 | 	test	local03, #32 wz
27394     30 28 46 55 |  if_ne	or	local06, #48
27398                 | LR__4074
27398     02 00 00 FF 
2739c     14 24 06 F1 | 	add	local04, ##1044
273a0     12 13 02 F6 | 	mov	arg01, local04
273a4     02 00 00 FF 
273a8     14 24 86 F1 | 	sub	local04, ##1044
273ac     10 15 02 F6 | 	mov	arg02, local02
273b0     14 17 02 F6 | 	mov	arg03, local06
273b4     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
273b8     FD 2A 0A F6 | 	mov	local07, result1 wz
273bc     14 00 90 AD |  if_e	jmp	#LR__4075
273c0     12 13 02 F6 | 	mov	arg01, local04
273c4                 | '     return _gc_free(ptr);
273c4     10 59 BF FD | 	call	#__system___gc_free
273c8                 | '     free(f);
273c8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
273c8                 | '     return _set_dos_error(r);
273c8     15 13 02 F6 | 	mov	arg01, local07
273cc     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
273d0     08 00 90 FD | 	jmp	#LR__4076
273d4                 | LR__4075
273d4     0F 25 62 FC | 	wrlong	local04, local01
273d8                 | '   }
273d8                 | '   fil->vfsdata = f;
273d8                 | '   return 0;
273d8     00 FA 05 F6 | 	mov	result1, #0
273dc                 | LR__4076
273dc     A7 F0 03 F6 | 	mov	ptra, fp
273e0     B2 00 A0 FD | 	call	#popregs_
273e4                 | _fatfs_cc_v_open_ret
273e4     2D 00 64 FD | 	ret
273e8                 | 
273e8                 | _fatfs_cc_v_flush
273e8     09 13 02 FB | 	rdlong	arg01, arg01
273ec     02 00 00 FF 
273f0     14 12 0E F1 | 	add	arg01, ##1044 wz
273f4                 | '         return _seterror( 5 );
273f4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
273f8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
273fc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27400     01 FA 65 A6 |  if_e	neg	result1, #1
27404     0C 00 90 AD |  if_e	jmp	#LR__4080
27408     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2740c     FD 12 02 F6 | 	mov	arg01, result1
27410                 | '     }
27410                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27410                 | '     result = f_sync(f);
27410                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27410                 | '     return _set_dos_error(result);
27410     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27414                 | LR__4080
27414                 | _fatfs_cc_v_flush_ret
27414     2D 00 64 FD | 	ret
27418                 | 
27418                 | _fatfs_cc_v_init
27418                 | ' {
27418                 | '     return 0;
27418     00 FA 05 F6 | 	mov	result1, #0
2741c                 | _fatfs_cc_v_init_ret
2741c     2D 00 64 FD | 	ret
27420                 | 
27420                 | _fatfs_cc_v_deinit
27420     41 01 00 FF 
27424     80 15 06 F6 | 	mov	arg02, ##@LR__4276
27428     00 12 06 F6 | 	mov	arg01, #0
2742c     00 16 06 F6 | 	mov	arg03, #0
27430     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
27434     01 00 00 FF 
27438     08 E4 05 F1 | 	add	objptr, ##520
2743c     F2 12 02 FB | 	rdlong	arg01, objptr
27440     04 E4 05 F1 | 	add	objptr, #4
27444     F2 14 02 FB | 	rdlong	arg02, objptr
27448     01 00 00 FF 
2744c     0C E4 85 F1 | 	sub	objptr, ##524
27450     50 40 BF FD | 	call	#__system___freepins
27454                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27454                 | '     _freepins(f_pinmask);
27454                 | '     return 0;
27454     00 FA 05 F6 | 	mov	result1, #0
27458                 | _fatfs_cc_v_deinit_ret
27458     2D 00 64 FD | 	ret
2745c                 | 
2745c                 | _fatfs_cc_get_vfs
2745c     01 4A 05 F6 | 	mov	COUNT_, #1
27460     A8 00 A0 FD | 	call	#pushregs_
27464     09 1F 02 F6 | 	mov	local01, arg01
27468     50 12 06 F6 | 	mov	arg01, #80
2746c     2C 57 BF FD | 	call	#__system___gc_alloc_managed
27470     FD 12 02 F6 | 	mov	arg01, result1
27474     F2 FA 01 F6 | 	mov	result1, objptr
27478     00 78 03 FF 
2747c     00 FA 45 F5 | 	or	result1, ##116391936
27480     09 FB 61 FC | 	wrlong	result1, arg01
27484     F2 FA 01 F6 | 	mov	result1, objptr
27488     58 FA 25 F4 | 	bith	result1, #88
2748c     04 12 06 F1 | 	add	arg01, #4
27490     09 FB 61 FC | 	wrlong	result1, arg01
27494     F2 FA 01 F6 | 	mov	result1, objptr
27498     00 88 03 FF 
2749c     00 FA 45 F5 | 	or	result1, ##118489088
274a0     04 12 06 F1 | 	add	arg01, #4
274a4     09 FB 61 FC | 	wrlong	result1, arg01
274a8     F2 FA 01 F6 | 	mov	result1, objptr
274ac     00 90 03 FF 
274b0     00 FA 45 F5 | 	or	result1, ##119537664
274b4     04 12 06 F1 | 	add	arg01, #4
274b8     09 FB 61 FC | 	wrlong	result1, arg01
274bc     F2 FA 01 F6 | 	mov	result1, objptr
274c0     00 98 03 FF 
274c4     00 FA 45 F5 | 	or	result1, ##120586240
274c8     04 12 06 F1 | 	add	arg01, #4
274cc     09 FB 61 FC | 	wrlong	result1, arg01
274d0     04 12 06 F1 | 	add	arg01, #4
274d4     09 01 68 FC | 	wrlong	#0, arg01
274d8     04 12 06 F1 | 	add	arg01, #4
274dc     09 1F 62 FC | 	wrlong	local01, arg01
274e0     04 12 06 F1 | 	add	arg01, #4
274e4     09 01 68 FC | 	wrlong	#0, arg01
274e8     F2 FA 01 F6 | 	mov	result1, objptr
274ec     00 A0 03 FF 
274f0     00 FA 45 F5 | 	or	result1, ##121634816
274f4     04 12 06 F1 | 	add	arg01, #4
274f8     09 FB 61 FC | 	wrlong	result1, arg01
274fc     F2 FA 01 F6 | 	mov	result1, objptr
27500     00 A8 03 FF 
27504     00 FA 45 F5 | 	or	result1, ##122683392
27508     04 12 06 F1 | 	add	arg01, #4
2750c     09 FB 61 FC | 	wrlong	result1, arg01
27510     F2 FA 01 F6 | 	mov	result1, objptr
27514     00 B0 03 FF 
27518     00 FA 45 F5 | 	or	result1, ##123731968
2751c     04 12 06 F1 | 	add	arg01, #4
27520     09 FB 61 FC | 	wrlong	result1, arg01
27524     F2 FA 01 F6 | 	mov	result1, objptr
27528     00 B8 03 FF 
2752c     00 FA 45 F5 | 	or	result1, ##124780544
27530     04 12 06 F1 | 	add	arg01, #4
27534     09 FB 61 FC | 	wrlong	result1, arg01
27538     F2 FA 01 F6 | 	mov	result1, objptr
2753c     77 FA 25 F4 | 	bith	result1, #119
27540     04 12 06 F1 | 	add	arg01, #4
27544     09 FB 61 FC | 	wrlong	result1, arg01
27548     F2 FA 01 F6 | 	mov	result1, objptr
2754c     00 C8 03 FF 
27550     00 FA 45 F5 | 	or	result1, ##126877696
27554     04 12 06 F1 | 	add	arg01, #4
27558     09 FB 61 FC | 	wrlong	result1, arg01
2755c     F2 FA 01 F6 | 	mov	result1, objptr
27560     00 D0 03 FF 
27564     00 FA 45 F5 | 	or	result1, ##127926272
27568     04 12 06 F1 | 	add	arg01, #4
2756c     09 FB 61 FC | 	wrlong	result1, arg01
27570     F2 FA 01 F6 | 	mov	result1, objptr
27574     00 D8 03 FF 
27578     00 FA 45 F5 | 	or	result1, ##128974848
2757c     04 12 06 F1 | 	add	arg01, #4
27580     09 FB 61 FC | 	wrlong	result1, arg01
27584     F2 FA 01 F6 | 	mov	result1, objptr
27588     96 FA 25 F4 | 	bith	result1, #150
2758c     04 12 06 F1 | 	add	arg01, #4
27590     09 FB 61 FC | 	wrlong	result1, arg01
27594     F2 FA 01 F6 | 	mov	result1, objptr
27598     00 E8 03 FF 
2759c     00 FA 45 F5 | 	or	result1, ##131072000
275a0     04 12 06 F1 | 	add	arg01, #4
275a4     09 FB 61 FC | 	wrlong	result1, arg01
275a8     F2 FA 01 F6 | 	mov	result1, objptr
275ac     B5 FA 25 F4 | 	bith	result1, #181
275b0     04 12 06 F1 | 	add	arg01, #4
275b4     09 FB 61 FC | 	wrlong	result1, arg01
275b8     F2 FA 01 F6 | 	mov	result1, objptr
275bc     D4 FA 25 F4 | 	bith	result1, #212
275c0     04 12 06 F1 | 	add	arg01, #4
275c4     09 FB 61 FC | 	wrlong	result1, arg01
275c8     4C 12 86 F1 | 	sub	arg01, #76
275cc                 | ' 
275cc                 | '     v->close = &v_close;
275cc                 | '     v->read = &v_read;
275cc                 | '     v->write = &v_write;
275cc                 | '     v->lseek = &v_lseek;
275cc                 | '     v->ioctl = &v_ioctl;
275cc                 | '     v->flush = 0;
275cc                 | '     v->vfs_data = ptr;
275cc                 | '     v->reserved = 0;
275cc                 | ' 
275cc                 | '     v->open = &v_open;
275cc                 | '     v->creat = &v_creat;
275cc                 | '     v->opendir = &v_opendir;
275cc                 | '     v->closedir = &v_closedir;
275cc                 | '     v->readdir = &v_readdir;
275cc                 | '     v->stat = &v_stat;
275cc                 | ' 
275cc                 | '     v->mkdir = &v_mkdir;
275cc                 | '     v->rmdir = &v_rmdir;
275cc                 | ' 
275cc                 | '     v->remove = &v_remove;
275cc                 | '     v->rename = &v_rename;
275cc                 | ' 
275cc                 | '     v->init = &v_init;
275cc                 | '     v->deinit = &v_deinit;
275cc                 | ' 
275cc                 | '     return v;
275cc     09 FB 01 F6 | 	mov	result1, arg01
275d0     A7 F0 03 F6 | 	mov	ptra, fp
275d4     B2 00 A0 FD | 	call	#popregs_
275d8                 | _fatfs_cc_get_vfs_ret
275d8     2D 00 64 FD | 	ret
275dc                 | 
275dc                 | _fatfs_cc_xmit_mmc_0992
275dc     01 00 00 FF 
275e0     10 E4 05 F1 | 	add	objptr, ##528
275e4     F2 00 02 FB | 	rdlong	_var01, objptr
275e8     08 E4 05 F1 | 	add	objptr, #8
275ec     F2 02 02 FB | 	rdlong	_var02, objptr
275f0     01 00 00 FF 
275f4     18 E4 85 F1 | 	sub	objptr, ##536
275f8     40 02 62 FD | 	dirl	_var02
275fc     28 02 64 FD | 	setq	#1
27600     09 05 02 FB | 	rdlong	_var03, arg01
27604     69 04 62 FD | 	rev	_var03
27608     1B 04 FE F9 | 	movbyts	_var03, #27
2760c     01 05 22 FC | 	wypin	_var03, _var02
27610     0A 05 02 F6 | 	mov	_var03, arg02
27614     02 14 4E F0 | 	shr	arg02, #2 wz
27618     03 04 66 F0 | 	shl	_var03, #3
2761c     00 05 22 FC | 	wypin	_var03, _var01
27620     41 02 62 FD | 	dirh	_var02
27624     08 12 06 F1 | 	add	arg01, #8
27628     69 06 62 FD | 	rev	_var04
2762c     1B 06 FE F9 | 	movbyts	_var04, #27
27630                 | LR__4090
27630     01 07 22 5C |  if_ne	wypin	_var04, _var02
27634     09 07 02 5B |  if_ne	rdlong	_var04, arg01
27638     04 12 06 51 |  if_ne	add	arg01, #4
2763c     69 06 62 5D |  if_ne	rev	_var04
27640     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
27644                 | LR__4091
27644     40 02 72 5D |  if_ne	testp	_var02 wc
27648     F8 FF 9F 1D |  if_a	jmp	#LR__4091
2764c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4090
27650                 | LR__4092
27650     40 00 72 FD | 	testp	_var01 wc
27654     F8 FF 9F 3D |  if_ae	jmp	#LR__4092
27658     40 02 62 FD | 	dirl	_var02
2765c     FF FF FF FF 
27660     01 FF 2B FC | 	wypin	##-1, _var02
27664     41 02 62 FD | 	dirh	_var02
27668                 | _fatfs_cc_xmit_mmc_0992_ret
27668     2D 00 64 FD | 	ret
2766c                 | 
2766c                 | _fatfs_cc_rcvr_mmc_0999
2766c     01 00 00 FF 
27670     10 E4 05 F1 | 	add	objptr, ##528
27674     F2 00 02 FB | 	rdlong	_var01, objptr
27678     0C E4 05 F1 | 	add	objptr, #12
2767c     F2 02 02 FB | 	rdlong	_var02, objptr
27680     01 00 00 FF 
27684     1C E4 85 F1 | 	sub	objptr, ##540
27688     01 03 08 FC | 	akpin	_var02
2768c     0A 05 0A F6 | 	mov	_var03, arg02 wz
27690     02 04 4E F0 | 	shr	_var03, #2 wz
27694     30 00 90 AD |  if_e	jmp	#LR__4102
27698     02 07 02 F6 | 	mov	_var04, _var03
2769c     05 06 66 F0 | 	shl	_var04, #5
276a0     00 07 22 FC | 	wypin	_var04, _var01
276a4     01 7F 18 FC | 	wxpin	#63, _var02
276a8                 | LR__4100
276a8                 | LR__4101
276a8     40 02 72 FD | 	testp	_var02 wc
276ac     F8 FF 9F 3D |  if_ae	jmp	#LR__4101
276b0     01 07 8A FA | 	rdpin	_var04, _var02
276b4     69 06 62 FD | 	rev	_var04
276b8     1B 06 FE F9 | 	movbyts	_var04, #27
276bc     09 07 62 FC | 	wrlong	_var04, arg01
276c0     04 12 06 F1 | 	add	arg01, #4
276c4     F8 05 6E FB | 	djnz	_var03, #LR__4100
276c8                 | LR__4102
276c8     03 14 0E F5 | 	and	arg02, #3 wz
276cc     24 00 90 AD |  if_e	jmp	#LR__4105
276d0     01 4F 18 FC | 	wxpin	#39, _var02
276d4                 | LR__4103
276d4     00 11 28 FC | 	wypin	#8, _var01
276d8                 | LR__4104
276d8     40 02 72 FD | 	testp	_var02 wc
276dc     F8 FF 9F 3D |  if_ae	jmp	#LR__4104
276e0     01 07 8A FA | 	rdpin	_var04, _var02
276e4     69 06 62 FD | 	rev	_var04
276e8     09 07 42 FC | 	wrbyte	_var04, arg01
276ec     01 12 06 F1 | 	add	arg01, #1
276f0     F8 15 6E FB | 	djnz	arg02, #LR__4103
276f4                 | LR__4105
276f4                 | _fatfs_cc_rcvr_mmc_0999_ret
276f4     2D 00 64 FD | 	ret
276f8                 | 
276f8                 | _fatfs_cc_wait_ready_1003
276f8     01 4A 05 F6 | 	mov	COUNT_, #1
276fc     A8 00 A0 FD | 	call	#pushregs_
27700     10 F0 07 F1 | 	add	ptra, #16
27704     1A FA 61 FD | 	getct	result1
27708     08 4E 05 F1 | 	add	fp, #8
2770c     A7 FA 61 FC | 	wrlong	result1, fp
27710     14 1E 06 FB | 	rdlong	local01, #20
27714     01 1E 46 F0 | 	shr	local01, #1
27718     04 4E 05 F1 | 	add	fp, #4
2771c     A7 1E 62 FC | 	wrlong	local01, fp
27720     0C 4E 85 F1 | 	sub	fp, #12
27724                 | ' {
27724                 | ' 	BYTE d;
27724                 | ' 	UINT tmr, tmout;
27724                 | ' 
27724                 | ' 	tmr = _cnt();
27724                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
27724                 | ' 	for(;;) {
27724                 | LR__4110
27724     04 4E 05 F1 | 	add	fp, #4
27728     A7 12 02 F6 | 	mov	arg01, fp
2772c     04 4E 85 F1 | 	sub	fp, #4
27730     01 14 06 F6 | 	mov	arg02, #1
27734     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27738     04 4E 05 F1 | 	add	fp, #4
2773c     A7 1E C2 FA | 	rdbyte	local01, fp
27740     04 4E 85 F1 | 	sub	fp, #4
27744     FF 1E 0E F2 | 	cmp	local01, #255 wz
27748     01 FA 05 A6 |  if_e	mov	result1, #1
2774c     28 00 90 AD |  if_e	jmp	#LR__4111
27750     1A FA 61 FD | 	getct	result1
27754     08 4E 05 F1 | 	add	fp, #8
27758     A7 1E 02 FB | 	rdlong	local01, fp
2775c     0F FB 81 F1 | 	sub	result1, local01
27760     04 4E 05 F1 | 	add	fp, #4
27764     A7 1E 02 FB | 	rdlong	local01, fp
27768     0C 4E 85 F1 | 	sub	fp, #12
2776c     0F FB 11 F2 | 	cmp	result1, local01 wc
27770     00 FA 05 36 |  if_ae	mov	result1, #0
27774     AC FF 9F CD |  if_b	jmp	#LR__4110
27778                 | LR__4111
27778     A7 F0 03 F6 | 	mov	ptra, fp
2777c     B2 00 A0 FD | 	call	#popregs_
27780                 | _fatfs_cc_wait_ready_1003_ret
27780     2D 00 64 FD | 	ret
27784                 | 
27784                 | _fatfs_cc_deselect_1009
27784     00 4A 05 F6 | 	mov	COUNT_, #0
27788     A8 00 A0 FD | 	call	#pushregs_
2778c     14 F0 07 F1 | 	add	ptra, #20
27790     01 00 00 FF 
27794     14 E4 05 F1 | 	add	objptr, ##532
27798     F2 14 02 FB | 	rdlong	arg02, objptr
2779c     04 4E 05 F1 | 	add	fp, #4
277a0     A7 14 62 FC | 	wrlong	arg02, fp
277a4     04 E4 85 F1 | 	sub	objptr, #4
277a8     F2 14 02 FB | 	rdlong	arg02, objptr
277ac     04 4E 05 F1 | 	add	fp, #4
277b0     A7 14 62 FC | 	wrlong	arg02, fp
277b4     08 E4 05 F1 | 	add	objptr, #8
277b8     F2 14 02 FB | 	rdlong	arg02, objptr
277bc     04 4E 05 F1 | 	add	fp, #4
277c0     A7 14 62 FC | 	wrlong	arg02, fp
277c4     04 E4 05 F1 | 	add	objptr, #4
277c8     F2 14 02 FB | 	rdlong	arg02, objptr
277cc     01 00 00 FF 
277d0     1C E4 85 F1 | 	sub	objptr, ##540
277d4     04 4E 05 F1 | 	add	fp, #4
277d8     A7 14 62 FC | 	wrlong	arg02, fp
277dc     0C 4E 85 F1 | 	sub	fp, #12
277e0     A7 12 02 FB | 	rdlong	arg01, fp
277e4     04 4E 85 F1 | 	sub	fp, #4
277e8     59 12 62 FD | 	drvh	arg01
277ec     1F 20 64 FD | 	waitx	#16
277f0     A7 12 02 F6 | 	mov	arg01, fp
277f4     01 14 06 F6 | 	mov	arg02, #1
277f8     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
277fc     A7 F0 03 F6 | 	mov	ptra, fp
27800     B2 00 A0 FD | 	call	#popregs_
27804                 | _fatfs_cc_deselect_1009_ret
27804     2D 00 64 FD | 	ret
27808                 | 
27808                 | _fatfs_cc_select_1013
27808     00 4A 05 F6 | 	mov	COUNT_, #0
2780c     A8 00 A0 FD | 	call	#pushregs_
27810     10 F0 07 F1 | 	add	ptra, #16
27814     01 00 00 FF 
27818     14 E4 05 F1 | 	add	objptr, ##532
2781c     F2 14 02 FB | 	rdlong	arg02, objptr
27820     08 4E 05 F1 | 	add	fp, #8
27824     A7 14 62 FC | 	wrlong	arg02, fp
27828     08 E4 05 F1 | 	add	objptr, #8
2782c     F2 12 02 FB | 	rdlong	arg01, objptr
27830     01 00 00 FF 
27834     1C E4 85 F1 | 	sub	objptr, ##540
27838     04 4E 05 F1 | 	add	fp, #4
2783c     A7 12 62 FC | 	wrlong	arg01, fp
27840     50 12 62 FD | 	fltl	arg01
27844     04 4E 85 F1 | 	sub	fp, #4
27848     A7 12 02 FB | 	rdlong	arg01, fp
2784c     58 12 62 FD | 	drvl	arg01
27850     1F 20 64 FD | 	waitx	#16
27854     04 4E 05 F1 | 	add	fp, #4
27858     A7 12 02 FB | 	rdlong	arg01, fp
2785c     41 12 62 FD | 	dirh	arg01
27860     08 4E 85 F1 | 	sub	fp, #8
27864     A7 12 02 F6 | 	mov	arg01, fp
27868     04 4E 85 F1 | 	sub	fp, #4
2786c     01 14 06 F6 | 	mov	arg02, #1
27870     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27874     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1003
27878     00 FA 0D F2 | 	cmp	result1, #0 wz
2787c     01 FA 05 56 |  if_ne	mov	result1, #1
27880     08 00 90 5D |  if_ne	jmp	#LR__4120
27884     FC FE BF FD | 	call	#_fatfs_cc_deselect_1009
27888                 | ' 
27888                 | ' 	deselect();
27888                 | ' 	return 0;
27888     00 FA 05 F6 | 	mov	result1, #0
2788c                 | LR__4120
2788c     A7 F0 03 F6 | 	mov	ptra, fp
27890     B2 00 A0 FD | 	call	#popregs_
27894                 | _fatfs_cc_select_1013_ret
27894     2D 00 64 FD | 	ret
27898                 | 
27898                 | _fatfs_cc_rcvr_datablock_1017
27898     01 4A 05 F6 | 	mov	COUNT_, #1
2789c     A8 00 A0 FD | 	call	#pushregs_
278a0     18 F0 07 F1 | 	add	ptra, #24
278a4     04 4E 05 F1 | 	add	fp, #4
278a8     A7 12 62 FC | 	wrlong	arg01, fp
278ac     04 4E 05 F1 | 	add	fp, #4
278b0     A7 14 62 FC | 	wrlong	arg02, fp
278b4     1A FA 61 FD | 	getct	result1
278b8     08 4E 05 F1 | 	add	fp, #8
278bc     A7 FA 61 FC | 	wrlong	result1, fp
278c0     14 1E 06 FB | 	rdlong	local01, #20
278c4     03 1E 46 F0 | 	shr	local01, #3
278c8     04 4E 05 F1 | 	add	fp, #4
278cc     A7 1E 62 FC | 	wrlong	local01, fp
278d0     14 4E 85 F1 | 	sub	fp, #20
278d4                 | ' 	BYTE *buff,
278d4                 | ' 	UINT btr
278d4                 | ' )
278d4                 | ' {
278d4                 | ' 	BYTE d[2];
278d4                 | ' 	UINT tmr, tmout;
278d4                 | ' 
278d4                 | ' 	tmr = _cnt();
278d4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
278d4                 | ' 	for(;;) {
278d4                 | LR__4130
278d4     0C 4E 05 F1 | 	add	fp, #12
278d8     A7 12 02 F6 | 	mov	arg01, fp
278dc     0C 4E 85 F1 | 	sub	fp, #12
278e0     01 14 06 F6 | 	mov	arg02, #1
278e4     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
278e8     0C 4E 05 F1 | 	add	fp, #12
278ec     A7 1E C2 FA | 	rdbyte	local01, fp
278f0     0C 4E 85 F1 | 	sub	fp, #12
278f4     FF 1E 0E F2 | 	cmp	local01, #255 wz
278f8     28 00 90 5D |  if_ne	jmp	#LR__4131
278fc     1A FA 61 FD | 	getct	result1
27900     FD 1E 02 F6 | 	mov	local01, result1
27904     10 4E 05 F1 | 	add	fp, #16
27908     A7 14 02 FB | 	rdlong	arg02, fp
2790c     0A 1F 82 F1 | 	sub	local01, arg02
27910     04 4E 05 F1 | 	add	fp, #4
27914     A7 14 02 FB | 	rdlong	arg02, fp
27918     14 4E 85 F1 | 	sub	fp, #20
2791c     0A 1F 12 F2 | 	cmp	local01, arg02 wc
27920     B0 FF 9F CD |  if_b	jmp	#LR__4130
27924                 | LR__4131
27924     0C 4E 05 F1 | 	add	fp, #12
27928     A7 1E C2 FA | 	rdbyte	local01, fp
2792c     0C 4E 85 F1 | 	sub	fp, #12
27930     FE 1E 0E F2 | 	cmp	local01, #254 wz
27934     00 FA 05 56 |  if_ne	mov	result1, #0
27938     30 00 90 5D |  if_ne	jmp	#LR__4132
2793c     04 4E 05 F1 | 	add	fp, #4
27940     A7 12 02 FB | 	rdlong	arg01, fp
27944     04 4E 05 F1 | 	add	fp, #4
27948     A7 14 02 FB | 	rdlong	arg02, fp
2794c     08 4E 85 F1 | 	sub	fp, #8
27950     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27954     0C 4E 05 F1 | 	add	fp, #12
27958     A7 12 02 F6 | 	mov	arg01, fp
2795c     0C 4E 85 F1 | 	sub	fp, #12
27960     02 14 06 F6 | 	mov	arg02, #2
27964     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27968                 | ' 
27968                 | ' 	rcvr_mmc(buff, btr);
27968                 | ' 	rcvr_mmc(d, 2);
27968                 | ' 
27968                 | ' 	return 1;
27968     01 FA 05 F6 | 	mov	result1, #1
2796c                 | LR__4132
2796c     A7 F0 03 F6 | 	mov	ptra, fp
27970     B2 00 A0 FD | 	call	#popregs_
27974                 | _fatfs_cc_rcvr_datablock_1017_ret
27974     2D 00 64 FD | 	ret
27978                 | 
27978                 | _fatfs_cc_xmit_datablock_1019
27978     00 4A 05 F6 | 	mov	COUNT_, #0
2797c     A8 00 A0 FD | 	call	#pushregs_
27980     10 F0 07 F1 | 	add	ptra, #16
27984     04 4E 05 F1 | 	add	fp, #4
27988     A7 12 62 FC | 	wrlong	arg01, fp
2798c     04 4E 05 F1 | 	add	fp, #4
27990     A7 14 42 FC | 	wrbyte	arg02, fp
27994     08 4E 85 F1 | 	sub	fp, #8
27998     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1003
2799c     00 FA 0D F2 | 	cmp	result1, #0 wz
279a0     00 FA 05 A6 |  if_e	mov	result1, #0
279a4     90 00 90 AD |  if_e	jmp	#LR__4141
279a8     08 4E 05 F1 | 	add	fp, #8
279ac     A7 14 C2 FA | 	rdbyte	arg02, fp
279b0     04 4E 05 F1 | 	add	fp, #4
279b4     A7 14 42 FC | 	wrbyte	arg02, fp
279b8     A7 12 02 F6 | 	mov	arg01, fp
279bc     0C 4E 85 F1 | 	sub	fp, #12
279c0     01 14 06 F6 | 	mov	arg02, #1
279c4     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
279c8     08 4E 05 F1 | 	add	fp, #8
279cc     A7 14 C2 FA | 	rdbyte	arg02, fp
279d0     08 4E 85 F1 | 	sub	fp, #8
279d4     FD 14 0E F2 | 	cmp	arg02, #253 wz
279d8     58 00 90 AD |  if_e	jmp	#LR__4140
279dc     04 4E 05 F1 | 	add	fp, #4
279e0     A7 12 02 FB | 	rdlong	arg01, fp
279e4     04 4E 85 F1 | 	sub	fp, #4
279e8     09 14 C6 F9 | 	decod	arg02, #9
279ec     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
279f0     0C 4E 05 F1 | 	add	fp, #12
279f4     A7 12 02 F6 | 	mov	arg01, fp
279f8     0C 4E 85 F1 | 	sub	fp, #12
279fc     02 14 06 F6 | 	mov	arg02, #2
27a00     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27a04     0C 4E 05 F1 | 	add	fp, #12
27a08     A7 12 02 F6 | 	mov	arg01, fp
27a0c     0C 4E 85 F1 | 	sub	fp, #12
27a10     01 14 06 F6 | 	mov	arg02, #1
27a14     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27a18     0C 4E 05 F1 | 	add	fp, #12
27a1c     A7 14 C2 FA | 	rdbyte	arg02, fp
27a20     0C 4E 85 F1 | 	sub	fp, #12
27a24     1F 14 06 F5 | 	and	arg02, #31
27a28     05 14 0E F2 | 	cmp	arg02, #5 wz
27a2c                 | ' 			return 0;
27a2c     00 FA 05 56 |  if_ne	mov	result1, #0
27a30     04 00 90 5D |  if_ne	jmp	#LR__4141
27a34                 | LR__4140
27a34                 | ' 	}
27a34                 | ' 
27a34                 | ' 	return 1;
27a34     01 FA 05 F6 | 	mov	result1, #1
27a38                 | LR__4141
27a38     A7 F0 03 F6 | 	mov	ptra, fp
27a3c     B2 00 A0 FD | 	call	#popregs_
27a40                 | _fatfs_cc_xmit_datablock_1019_ret
27a40     2D 00 64 FD | 	ret
27a44                 | 
27a44                 | _fatfs_cc_send_cmd_1023
27a44     01 4A 05 F6 | 	mov	COUNT_, #1
27a48     A8 00 A0 FD | 	call	#pushregs_
27a4c     1C F0 07 F1 | 	add	ptra, #28
27a50                 | _fatfs_cc_send_cmd_1023_enter
27a50     04 4E 05 F1 | 	add	fp, #4
27a54     A7 12 42 FC | 	wrbyte	arg01, fp
27a58     04 4E 05 F1 | 	add	fp, #4
27a5c     A7 14 62 FC | 	wrlong	arg02, fp
27a60     04 4E 85 F1 | 	sub	fp, #4
27a64     A7 FA C1 FA | 	rdbyte	result1, fp
27a68     04 4E 85 F1 | 	sub	fp, #4
27a6c     80 FA CD F7 | 	test	result1, #128 wz
27a70     44 00 90 AD |  if_e	jmp	#LR__4150
27a74     04 4E 05 F1 | 	add	fp, #4
27a78     A7 14 C2 FA | 	rdbyte	arg02, fp
27a7c     7F 14 06 F5 | 	and	arg02, #127
27a80     A7 14 42 FC | 	wrbyte	arg02, fp
27a84     04 4E 85 F1 | 	sub	fp, #4
27a88     37 12 06 F6 | 	mov	arg01, #55
27a8c     00 14 06 F6 | 	mov	arg02, #0
27a90     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1023
27a94     0C 4E 05 F1 | 	add	fp, #12
27a98     A7 FA 41 FC | 	wrbyte	result1, fp
27a9c     A7 14 C2 FA | 	rdbyte	arg02, fp
27aa0     0C 4E 85 F1 | 	sub	fp, #12
27aa4     02 14 16 F2 | 	cmp	arg02, #2 wc
27aa8     0C 4E 05 31 |  if_ae	add	fp, #12
27aac     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
27ab0     0C 4E 85 31 |  if_ae	sub	fp, #12
27ab4     6C 01 90 3D |  if_ae	jmp	#LR__4154
27ab8                 | LR__4150
27ab8     04 4E 05 F1 | 	add	fp, #4
27abc     A7 14 C2 FA | 	rdbyte	arg02, fp
27ac0     04 4E 85 F1 | 	sub	fp, #4
27ac4     0C 14 0E F2 | 	cmp	arg02, #12 wz
27ac8     14 00 90 AD |  if_e	jmp	#LR__4151
27acc     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1009
27ad0     34 FD BF FD | 	call	#_fatfs_cc_select_1013
27ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
27ad8     FF FA 05 A6 |  if_e	mov	result1, #255
27adc     44 01 90 AD |  if_e	jmp	#LR__4154
27ae0                 | LR__4151
27ae0     04 4E 05 F1 | 	add	fp, #4
27ae4     A7 14 C2 FA | 	rdbyte	arg02, fp
27ae8     40 FA 05 F6 | 	mov	result1, #64
27aec     0A FB 41 F5 | 	or	result1, arg02
27af0     10 4E 05 F1 | 	add	fp, #16
27af4     A7 FA 41 FC | 	wrbyte	result1, fp
27af8     0C 4E 85 F1 | 	sub	fp, #12
27afc     A7 FA 01 FB | 	rdlong	result1, fp
27b00     18 FA 45 F0 | 	shr	result1, #24
27b04     0D 4E 05 F1 | 	add	fp, #13
27b08     A7 FA 41 FC | 	wrbyte	result1, fp
27b0c     0D 4E 85 F1 | 	sub	fp, #13
27b10     A7 FA 01 FB | 	rdlong	result1, fp
27b14     10 FA 45 F0 | 	shr	result1, #16
27b18     0E 4E 05 F1 | 	add	fp, #14
27b1c     A7 FA 41 FC | 	wrbyte	result1, fp
27b20     0E 4E 85 F1 | 	sub	fp, #14
27b24     A7 FA 01 FB | 	rdlong	result1, fp
27b28     08 FA 45 F0 | 	shr	result1, #8
27b2c     0F 4E 05 F1 | 	add	fp, #15
27b30     A7 FA 41 FC | 	wrbyte	result1, fp
27b34     0F 4E 85 F1 | 	sub	fp, #15
27b38     A7 FA 01 FB | 	rdlong	result1, fp
27b3c     10 4E 05 F1 | 	add	fp, #16
27b40     A7 FA 41 FC | 	wrbyte	result1, fp
27b44     0C 4E 85 F1 | 	sub	fp, #12
27b48     A7 02 48 FC | 	wrbyte	#1, fp
27b4c     08 4E 85 F1 | 	sub	fp, #8
27b50     A7 FA C9 FA | 	rdbyte	result1, fp wz
27b54     04 4E 85 F1 | 	sub	fp, #4
27b58     0C 4E 05 A1 |  if_e	add	fp, #12
27b5c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
27b60     0C 4E 85 A1 |  if_e	sub	fp, #12
27b64     04 4E 05 F1 | 	add	fp, #4
27b68     A7 FA C1 FA | 	rdbyte	result1, fp
27b6c     04 4E 85 F1 | 	sub	fp, #4
27b70     08 FA 0D F2 | 	cmp	result1, #8 wz
27b74     0C 4E 05 A1 |  if_e	add	fp, #12
27b78     A7 0E 49 AC |  if_e	wrbyte	#135, fp
27b7c     0C 4E 85 A1 |  if_e	sub	fp, #12
27b80     0C 4E 05 F1 | 	add	fp, #12
27b84     A7 14 C2 FA | 	rdbyte	arg02, fp
27b88     0D 4E 05 F1 | 	add	fp, #13
27b8c     A7 14 42 FC | 	wrbyte	arg02, fp
27b90     05 4E 85 F1 | 	sub	fp, #5
27b94     A7 12 02 F6 | 	mov	arg01, fp
27b98     14 4E 85 F1 | 	sub	fp, #20
27b9c     06 14 06 F6 | 	mov	arg02, #6
27ba0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
27ba4     04 4E 05 F1 | 	add	fp, #4
27ba8     A7 1E C2 FA | 	rdbyte	local01, fp
27bac     04 4E 85 F1 | 	sub	fp, #4
27bb0     0C 1E 0E F2 | 	cmp	local01, #12 wz
27bb4     10 4E 05 A1 |  if_e	add	fp, #16
27bb8     A7 12 02 A6 |  if_e	mov	arg01, fp
27bbc     10 4E 85 A1 |  if_e	sub	fp, #16
27bc0     01 14 06 A6 |  if_e	mov	arg02, #1
27bc4     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0999
27bc8     0C 4E 05 F1 | 	add	fp, #12
27bcc     A7 14 48 FC | 	wrbyte	#10, fp
27bd0     0C 4E 85 F1 | 	sub	fp, #12
27bd4                 | ' 	n = 10;
27bd4                 | ' 	do
27bd4                 | LR__4152
27bd4     10 4E 05 F1 | 	add	fp, #16
27bd8     A7 12 02 F6 | 	mov	arg01, fp
27bdc     10 4E 85 F1 | 	sub	fp, #16
27be0     01 14 06 F6 | 	mov	arg02, #1
27be4     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27be8     10 4E 05 F1 | 	add	fp, #16
27bec     A7 1E C2 FA | 	rdbyte	local01, fp
27bf0     10 4E 85 F1 | 	sub	fp, #16
27bf4     80 1E CE F7 | 	test	local01, #128 wz
27bf8     1C 00 90 AD |  if_e	jmp	#LR__4153
27bfc     0C 4E 05 F1 | 	add	fp, #12
27c00     A7 1E C2 FA | 	rdbyte	local01, fp
27c04     01 1E 86 F1 | 	sub	local01, #1
27c08     A7 1E 42 FC | 	wrbyte	local01, fp
27c0c     A7 1E CA FA | 	rdbyte	local01, fp wz
27c10     0C 4E 85 F1 | 	sub	fp, #12
27c14     BC FF 9F 5D |  if_ne	jmp	#LR__4152
27c18                 | LR__4153
27c18                 | ' 
27c18                 | ' 	return d;
27c18     10 4E 05 F1 | 	add	fp, #16
27c1c     A7 FA C1 FA | 	rdbyte	result1, fp
27c20     10 4E 85 F1 | 	sub	fp, #16
27c24                 | LR__4154
27c24     A7 F0 03 F6 | 	mov	ptra, fp
27c28     B2 00 A0 FD | 	call	#popregs_
27c2c                 | _fatfs_cc_send_cmd_1023_ret
27c2c     2D 00 64 FD | 	ret
27c30                 | 
27c30                 | _fatfs_cc_disk_deinitialize
27c30     03 4A 05 F6 | 	mov	COUNT_, #3
27c34     A8 00 A0 FD | 	call	#pushregs_
27c38     00 12 4E F2 | 	cmps	arg01, #0 wz
27c3c     01 00 00 FF 
27c40     14 E4 05 F1 | 	add	objptr, ##532
27c44     F2 12 02 FB | 	rdlong	arg01, objptr
27c48     04 E4 85 F1 | 	sub	objptr, #4
27c4c     F2 1E 02 FB | 	rdlong	local01, objptr
27c50     08 E4 05 F1 | 	add	objptr, #8
27c54     F2 20 02 FB | 	rdlong	local02, objptr
27c58     04 E4 05 F1 | 	add	objptr, #4
27c5c     F2 22 02 FB | 	rdlong	local03, objptr
27c60     01 00 00 FF 
27c64     1C E4 85 F1 | 	sub	objptr, ##540
27c68                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27c68                 | '         return RES_NOTRDY;
27c68     03 FA 05 56 |  if_ne	mov	result1, #3
27c6c     2C 00 90 5D |  if_ne	jmp	#LR__4160
27c70     50 12 62 FD | 	fltl	arg01
27c74     09 01 08 FC | 	wrpin	#0, arg01
27c78     50 1E 62 FD | 	fltl	local01
27c7c     0F 01 08 FC | 	wrpin	#0, local01
27c80     50 20 62 FD | 	fltl	local02
27c84     10 01 08 FC | 	wrpin	#0, local02
27c88     50 22 62 FD | 	fltl	local03
27c8c     11 01 08 FC | 	wrpin	#0, local03
27c90     0A 12 06 F6 | 	mov	arg01, #10
27c94     40 14 BF FD | 	call	#__system___waitms
27c98                 | '     }
27c98                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27c98                 | '     _pinclear(PIN_SS);
27c98                 | '     _pinclear(PIN_CLK);
27c98                 | '     _pinclear(PIN_DI);
27c98                 | '     _pinclear(PIN_DO);
27c98                 | ' 
27c98                 | '     _waitms(10);
27c98                 | ' 
27c98                 | '     return 0;
27c98     00 FA 05 F6 | 	mov	result1, #0
27c9c                 | LR__4160
27c9c     A7 F0 03 F6 | 	mov	ptra, fp
27ca0     B2 00 A0 FD | 	call	#popregs_
27ca4                 | _fatfs_cc_disk_deinitialize_ret
27ca4     2D 00 64 FD | 	ret
27ca8                 | 
27ca8                 | _fatfs_cc_gettimeofday
27ca8     04 4A 05 F6 | 	mov	COUNT_, #4
27cac     A8 00 A0 FD | 	call	#pushregs_
27cb0     09 1F 02 F6 | 	mov	local01, arg01
27cb4     FC 0F BF FD | 	call	#__system___getus
27cb8     FD 12 02 F6 | 	mov	arg01, result1
27cbc     02 00 00 FF 
27cc0     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
27cc4     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
27cc8     09 FB 01 F6 | 	mov	result1, arg01
27ccc     10 FB 81 F1 | 	sub	result1, local02
27cd0     A1 07 00 FF 
27cd4     40 FA 15 FD | 	qdiv	result1, ##1000000
27cd8     02 00 00 FF 
27cdc     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27ce0     18 20 62 FD | 	getqx	local02
27ce4     A1 07 00 FF 
27ce8     40 FA 15 FD | 	qdiv	result1, ##1000000
27cec     00 20 0E F2 | 	cmp	local02, #0 wz
27cf0     19 22 62 FD | 	getqy	local03
27cf4     28 00 90 AD |  if_e	jmp	#LR__4170
27cf8     02 00 00 FF 
27cfc     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27d00     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27d04     10 25 02 F1 | 	add	local04, local02
27d08     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
27d0c     11 13 82 F1 | 	sub	arg01, local03
27d10     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
27d14     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
27d18     02 00 00 FF 
27d1c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27d20                 | LR__4170
27d20     02 00 00 FF 
27d24     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27d28     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27d2c     02 00 00 FF 
27d30     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
27d34     0F 25 62 FC | 	wrlong	local04, local01
27d38     04 1E 06 F1 | 	add	local01, #4
27d3c     0F 23 62 FC | 	wrlong	local03, local01
27d40                 | '         lastsec += secs;
27d40                 | '         lastus = now - leftover;
27d40                 | '     }
27d40                 | '     tv->tv_sec = lastsec;
27d40                 | '     tv->tv_usec = leftover;
27d40                 | '     return 0;
27d40     00 FA 05 F6 | 	mov	result1, #0
27d44     A7 F0 03 F6 | 	mov	ptra, fp
27d48     B2 00 A0 FD | 	call	#popregs_
27d4c                 | _fatfs_cc_gettimeofday_ret
27d4c     2D 00 64 FD | 	ret
27d50                 | 
27d50                 | _fatfs_cc__is_leap_year
27d50     09 FB 51 F6 | 	abs	result1, arg01 wc
27d54     03 FA 05 F5 | 	and	result1, #3
27d58     FD FA 89 F6 | 	negc	result1, result1 wz
27d5c     38 00 90 5D |  if_ne	jmp	#LR__4181
27d60     09 FB 51 F6 | 	abs	result1, arg01 wc
27d64     64 FA 15 FD | 	qdiv	result1, #100
27d68     19 FA 61 FD | 	getqy	result1
27d6c     FD FA 89 F6 | 	negc	result1, result1 wz
27d70     1C 00 90 5D |  if_ne	jmp	#LR__4180
27d74     09 FB 51 F6 | 	abs	result1, arg01 wc
27d78     90 FB 15 FD | 	qdiv	result1, #400
27d7c                 | '       return (0 == y % 400);
27d7c     00 FA 05 F6 | 	mov	result1, #0
27d80     19 00 62 FD | 	getqy	_var01
27d84     00 01 8A F6 | 	negc	_var01, _var01 wz
27d88     01 FA 05 A6 |  if_e	mov	result1, #1
27d8c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27d90                 | LR__4180
27d90                 | '     return 1;
27d90     01 FA 05 F6 | 	mov	result1, #1
27d94     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27d98                 | LR__4181
27d98                 | '   }
27d98                 | '   return 0;
27d98     00 FA 05 F6 | 	mov	result1, #0
27d9c                 | _fatfs_cc__is_leap_year_ret
27d9c     2D 00 64 FD | 	ret
27da0                 | 
27da0                 | _fatfs_cc___tzoffset
27da0     09 01 0A F6 | 	mov	_var01, arg01 wz
27da4     FF FF FF FF 
27da8     0A FF 6B FC | 	wrlong	##-1, arg02
27dac     01 02 06 F6 | 	mov	_var02, #1
27db0     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
27db4                 | '                 return 0;
27db4     00 FA 05 A6 |  if_e	mov	result1, #0
27db8     94 02 90 AD |  if_e	jmp	#LR__4207
27dbc     0A 01 68 FC | 	wrlong	#0, arg02
27dc0     02 00 00 FF 
27dc4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27dc8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27dcc                 | ' 
27dcc                 | '        *hasdst = 0;
27dcc                 | ' 
27dcc                 | ' 	n = stdname;
27dcc                 | '         while (*s && isalpha(*s)) {
27dcc     02 00 00 FF 
27dd0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27dd4     97 28 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
27dd8                 | LR__4190
27dd8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27ddc     48 00 90 AD |  if_e	jmp	#LR__4192
27de0     00 13 C2 FA | 	rdbyte	arg01, _var01
27de4                 | ' {
27de4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27de4     80 12 36 F3 | 	fle	arg01, #128 wc
27de8                 | '     return __ctype[c];
27de8     02 00 00 FF 
27dec     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27df0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27df4     09 FB C1 FA | 	rdbyte	result1, arg01
27df8     02 00 00 FF 
27dfc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27e00     0C FA CD F7 | 	test	result1, #12 wz
27e04     20 00 90 AD |  if_e	jmp	#LR__4192
27e08     00 09 02 F6 | 	mov	_var05, _var01
27e0c     00 0B 02 F6 | 	mov	_var06, _var01
27e10     01 0A 06 F1 | 	add	_var06, #1
27e14     04 0D C2 FA | 	rdbyte	_var07, _var05
27e18     05 01 02 F6 | 	mov	_var01, _var06
27e1c     03 0D 42 FC | 	wrbyte	_var07, _var04
27e20     01 06 06 F1 | 	add	_var04, #1
27e24     B0 FF 9F FD | 	jmp	#LR__4190
27e28                 | LR__4191
27e28                 | LR__4192
27e28     03 01 48 FC | 	wrbyte	#0, _var04
27e2c     00 0E 06 F6 | 	mov	_var08, #0
27e30     00 05 C2 FA | 	rdbyte	_var03, _var01
27e34     2D 04 0E F2 | 	cmp	_var03, #45 wz
27e38     01 02 66 A6 |  if_e	neg	_var02, #1
27e3c     01 00 06 A1 |  if_e	add	_var01, #1
27e40     97 28 48 FB | 	callpa	#(@LR__4194-@LR__4193)>>2,fcache_load_ptr_
27e44                 | '                 sgn = -1;
27e44                 | '                 s++;
27e44                 | '         }
27e44                 | '         while (isdigit(*s)) {
27e44                 | LR__4193
27e44     00 13 C2 FA | 	rdbyte	arg01, _var01
27e48                 | ' {
27e48                 | '   return  (__ctype_get(c) & 0x02 ) ;
27e48     80 12 36 F3 | 	fle	arg01, #128 wc
27e4c                 | '     return __ctype[c];
27e4c     02 00 00 FF 
27e50     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27e54     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27e58     09 FB C1 FA | 	rdbyte	result1, arg01
27e5c     02 00 00 FF 
27e60     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27e64     02 FA CD F7 | 	test	result1, #2 wz
27e68     28 00 90 AD |  if_e	jmp	#LR__4195
27e6c     07 05 02 F6 | 	mov	_var03, _var08
27e70     02 04 66 F0 | 	shl	_var03, #2
27e74     07 05 02 F1 | 	add	_var03, _var08
27e78     01 04 66 F0 | 	shl	_var03, #1
27e7c     00 09 C2 FA | 	rdbyte	_var05, _var01
27e80     30 08 86 F1 | 	sub	_var05, #48
27e84     04 05 02 F1 | 	add	_var03, _var05
27e88     02 0F 02 F6 | 	mov	_var08, _var03
27e8c     01 00 06 F1 | 	add	_var01, #1
27e90     B0 FF 9F FD | 	jmp	#LR__4193
27e94                 | LR__4194
27e94                 | LR__4195
27e94     07 00 00 FF 
27e98     10 0E 06 FD | 	qmul	_var08, ##3600
27e9c     00 05 C2 FA | 	rdbyte	_var03, _var01
27ea0     3A 04 0E F2 | 	cmp	_var03, #58 wz
27ea4     18 10 62 FD | 	getqx	_var09
27ea8     70 00 90 5D |  if_ne	jmp	#LR__4199
27eac     00 0E 06 F6 | 	mov	_var08, #0
27eb0     01 00 06 F1 | 	add	_var01, #1
27eb4     97 28 48 FB | 	callpa	#(@LR__4197-@LR__4196)>>2,fcache_load_ptr_
27eb8                 | '                 x = 0;
27eb8                 | '                 s++;
27eb8                 | '                 while (isdigit(*s)) {
27eb8                 | LR__4196
27eb8     00 13 C2 FA | 	rdbyte	arg01, _var01
27ebc                 | ' {
27ebc                 | '   return  (__ctype_get(c) & 0x02 ) ;
27ebc     80 12 36 F3 | 	fle	arg01, #128 wc
27ec0                 | '     return __ctype[c];
27ec0     02 00 00 FF 
27ec4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27ec8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27ecc     09 FB C1 FA | 	rdbyte	result1, arg01
27ed0     02 00 00 FF 
27ed4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27ed8     02 FA CD F7 | 	test	result1, #2 wz
27edc     28 00 90 AD |  if_e	jmp	#LR__4198
27ee0     07 05 02 F6 | 	mov	_var03, _var08
27ee4     02 04 66 F0 | 	shl	_var03, #2
27ee8     07 05 02 F1 | 	add	_var03, _var08
27eec     01 04 66 F0 | 	shl	_var03, #1
27ef0     00 09 C2 FA | 	rdbyte	_var05, _var01
27ef4     30 08 86 F1 | 	sub	_var05, #48
27ef8     04 05 02 F1 | 	add	_var03, _var05
27efc     02 0F 02 F6 | 	mov	_var08, _var03
27f00     01 00 06 F1 | 	add	_var01, #1
27f04     B0 FF 9F FD | 	jmp	#LR__4196
27f08                 | LR__4197
27f08                 | LR__4198
27f08     07 0D 02 F6 | 	mov	_var07, _var08
27f0c     04 0C 66 F0 | 	shl	_var07, #4
27f10     07 0D 82 F1 | 	sub	_var07, _var08
27f14     02 0C 66 F0 | 	shl	_var07, #2
27f18     06 11 02 F1 | 	add	_var09, _var07
27f1c                 | LR__4199
27f1c     02 00 00 FF 
27f20     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27f24     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27f28     00 13 C2 FA | 	rdbyte	arg01, _var01
27f2c                 | ' {
27f2c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27f2c     80 12 36 F3 | 	fle	arg01, #128 wc
27f30                 | '     return __ctype[c];
27f30     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
27f34     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27f38     09 FB C1 FA | 	rdbyte	result1, arg01
27f3c     02 00 00 FF 
27f40     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27f44     0C FA CD F7 | 	test	result1, #12 wz
27f48     50 00 90 AD |  if_e	jmp	#LR__4202
27f4c     0A 03 68 FC | 	wrlong	#1, arg02
27f50                 | '                 *hasdst = 1;
27f50                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
27f50                 | LR__4200
27f50     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27f54     44 00 90 AD |  if_e	jmp	#LR__4201
27f58     00 13 C2 FA | 	rdbyte	arg01, _var01
27f5c                 | ' {
27f5c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27f5c     80 12 36 F3 | 	fle	arg01, #128 wc
27f60                 | '     return __ctype[c];
27f60     02 00 00 FF 
27f64     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27f68     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27f6c     09 FB C1 FA | 	rdbyte	result1, arg01
27f70     02 00 00 FF 
27f74     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27f78     0C FA CD F7 | 	test	result1, #12 wz
27f7c     1C 00 90 AD |  if_e	jmp	#LR__4201
27f80     00 0B 02 F6 | 	mov	_var06, _var01
27f84     01 0A 06 F1 | 	add	_var06, #1
27f88     00 0D C2 FA | 	rdbyte	_var07, _var01
27f8c     05 01 02 F6 | 	mov	_var01, _var06
27f90     03 0D 42 FC | 	wrbyte	_var07, _var04
27f94     01 06 06 F1 | 	add	_var04, #1
27f98     B4 FF 9F FD | 	jmp	#LR__4200
27f9c                 | LR__4201
27f9c                 | LR__4202
27f9c     03 01 48 FC | 	wrbyte	#0, _var04
27fa0     02 00 00 FF 
27fa4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27fa8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27fac     02 00 00 FF 
27fb0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27fb4     20 00 90 AD |  if_e	jmp	#LR__4203
27fb8     02 00 00 FF 
27fbc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27fc0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27fc4     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
27fc8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27fcc     02 00 00 FF 
27fd0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27fd4     1C 00 90 FD | 	jmp	#LR__4204
27fd8                 | LR__4203
27fd8     02 00 00 FF 
27fdc     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
27fe0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27fe4     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
27fe8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27fec     02 00 00 FF 
27ff0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27ff4                 | LR__4204
27ff4     02 00 00 FF 
27ff8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27ffc     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
28000     02 00 00 FF 
28004     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
28008     20 00 90 AD |  if_e	jmp	#LR__4205
2800c     02 00 00 FF 
28010     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
28014     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
28018     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2801c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
28020     02 00 00 FF 
28024     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
28028     1C 00 90 FD | 	jmp	#LR__4206
2802c                 | LR__4205
2802c     02 00 00 FF 
28030     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
28034     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
28038     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2803c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
28040     02 00 00 FF 
28044     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
28048                 | LR__4206
28048     08 03 02 FD | 	qmul	_var02, _var09
2804c                 | ' 		_tzname[1] = stdname;
2804c                 | ' 
2804c                 | '         return sgn * off;
2804c     18 FA 61 FD | 	getqx	result1
28050                 | LR__4207
28050                 | _fatfs_cc___tzoffset_ret
28050     2D 00 64 FD | 	ret
28054                 | 
28054                 | _fatfs_cc___indst
28054     10 12 06 F1 | 	add	arg01, #16
28058     09 01 02 FB | 	rdlong	_var01, arg01
2805c     10 12 86 F1 | 	sub	arg01, #16
28060     02 00 0E F2 | 	cmp	_var01, #2 wz
28064     30 00 90 5D |  if_ne	jmp	#LR__4210
28068     07 00 06 F6 | 	mov	_var01, #7
2806c     18 12 06 F1 | 	add	arg01, #24
28070     09 03 02 FB | 	rdlong	_var02, arg01
28074     01 01 02 F1 | 	add	_var01, _var02
28078     0C 12 86 F1 | 	sub	arg01, #12
2807c     09 05 02 FB | 	rdlong	_var03, arg01
28080     02 01 82 F1 | 	sub	_var01, _var03
28084     00 00 56 F2 | 	cmps	_var01, #0 wc
28088                 | '                         return 1;
28088     01 FA 05 C6 |  if_b	mov	result1, #1
2808c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
28090                 | '                 return 0;
28090     00 FA 05 F6 | 	mov	result1, #0
28094     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
28098                 | LR__4210
28098     10 12 06 F1 | 	add	arg01, #16
2809c     09 01 02 FB | 	rdlong	_var01, arg01
280a0     10 12 86 F1 | 	sub	arg01, #16
280a4     0A 00 0E F2 | 	cmp	_var01, #10 wz
280a8     28 00 90 5D |  if_ne	jmp	#LR__4211
280ac     18 12 06 F1 | 	add	arg01, #24
280b0     09 01 02 FB | 	rdlong	_var01, arg01
280b4     0C 12 86 F1 | 	sub	arg01, #12
280b8     09 07 02 FB | 	rdlong	_var04, arg01
280bc     03 01 82 F1 | 	sub	_var01, _var04
280c0     00 00 56 F2 | 	cmps	_var01, #0 wc
280c4                 | '                         return 0;
280c4     00 FA 05 C6 |  if_b	mov	result1, #0
280c8     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
280cc                 | '                 return 1;
280cc     01 FA 05 F6 | 	mov	result1, #1
280d0     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
280d4                 | LR__4211
280d4                 | '         }
280d4                 | ' 
280d4                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
280d4     00 00 06 F6 | 	mov	_var01, #0
280d8     10 12 06 F1 | 	add	arg01, #16
280dc     09 03 02 FB | 	rdlong	_var02, arg01
280e0     10 12 86 F1 | 	sub	arg01, #16
280e4     03 02 56 F2 | 	cmps	_var02, #3 wc
280e8     10 00 90 CD |  if_b	jmp	#LR__4212
280ec     10 12 06 F1 | 	add	arg01, #16
280f0     09 05 02 FB | 	rdlong	_var03, arg01
280f4     0A 04 56 F2 | 	cmps	_var03, #10 wc
280f8     01 00 06 C6 |  if_b	mov	_var01, #1
280fc                 | LR__4212
280fc     00 FB 01 F6 | 	mov	result1, _var01
28100                 | _fatfs_cc___indst_ret
28100     2D 00 64 FD | 	ret
28104                 | 
28104                 | ' 	
28104                 | ' 	FUNCTION pfunc(c as integer) as integer
28104                 | ___strs_cl_pfunc
28104                 | ' 		if (i < 16) then
28104     04 E4 05 F1 | 	add	objptr, #4
28108     F2 FA 01 FB | 	rdlong	result1, objptr
2810c     04 E4 85 F1 | 	sub	objptr, #4
28110     10 FA 55 F2 | 	cmps	result1, #16 wc
28114     2C 00 90 3D |  if_ae	jmp	#LR__4220
28118     F2 FA 01 FB | 	rdlong	result1, objptr
2811c     04 E4 05 F1 | 	add	objptr, #4
28120     F2 00 02 FB | 	rdlong	_var01, objptr
28124     FD 00 02 F1 | 	add	_var01, result1
28128     00 13 42 FC | 	wrbyte	arg01, _var01
2812c     F2 FA 01 FB | 	rdlong	result1, objptr
28130     01 FA 05 F1 | 	add	result1, #1
28134     F2 FA 61 FC | 	wrlong	result1, objptr
28138     04 E4 85 F1 | 	sub	objptr, #4
2813c                 | ' 			p(i) = c
2813c                 | ' 			i = i+1
2813c                 | ' 			return 1
2813c     01 FA 05 F6 | 	mov	result1, #1
28140     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
28144                 | LR__4220
28144                 | ' 			return -1
28144     01 FA 65 F6 | 	neg	result1, #1
28148                 | ___strs_cl_pfunc_ret
28148     2D 00 64 FD | 	ret
2814c                 | 
2814c                 | __struct__s_vfs_file_t_putchar
2814c     04 4A 05 F6 | 	mov	COUNT_, #4
28150     A8 00 A0 FD | 	call	#pushregs_
28154     1C E4 05 F1 | 	add	objptr, #28
28158     F2 1E 0A FB | 	rdlong	local01, objptr wz
2815c     1C E4 85 F1 | 	sub	objptr, #28
28160     00 FA 05 A6 |  if_e	mov	result1, #0
28164     48 00 90 AD |  if_e	jmp	#LR__4230
28168     1C E4 05 F1 | 	add	objptr, #28
2816c     F2 20 02 FB | 	rdlong	local02, objptr
28170     10 23 02 F6 | 	mov	local03, local02
28174     1C E4 85 F1 | 	sub	objptr, #28
28178     13 22 46 F7 | 	zerox	local03, #19
2817c     14 20 46 F0 | 	shr	local02, #20
28180     02 20 66 F0 | 	shl	local02, #2
28184     ED 20 02 F1 | 	add	local02, __methods__
28188     10 21 02 FB | 	rdlong	local02, local02
2818c     F2 14 02 F6 | 	mov	arg02, objptr
28190     F2 24 02 F6 | 	mov	local04, objptr
28194     11 E5 01 F6 | 	mov	objptr, local03
28198     2D 20 62 FD | 	call	local02
2819c     12 E5 01 F6 | 	mov	objptr, local04
281a0                 | '     return (i < 0) ? 0 : 1;
281a0     00 FA 55 F2 | 	cmps	result1, #0 wc
281a4     00 1E 06 C6 |  if_b	mov	local01, #0
281a8     01 1E 06 36 |  if_ae	mov	local01, #1
281ac     0F FB 01 F6 | 	mov	result1, local01
281b0                 | LR__4230
281b0     A7 F0 03 F6 | 	mov	ptra, fp
281b4     B2 00 A0 FD | 	call	#popregs_
281b8                 | __struct__s_vfs_file_t_putchar_ret
281b8     2D 00 64 FD | 	ret
281bc                 | 
281bc                 | __struct__s_vfs_file_t_getchar
281bc     03 4A 05 F6 | 	mov	COUNT_, #3
281c0     A8 00 A0 FD | 	call	#pushregs_
281c4     20 E4 05 F1 | 	add	objptr, #32
281c8     F2 12 0A FB | 	rdlong	arg01, objptr wz
281cc     20 E4 85 F1 | 	sub	objptr, #32
281d0     01 FA 65 A6 |  if_e	neg	result1, #1
281d4     38 00 90 AD |  if_e	jmp	#LR__4240
281d8                 | '     return getcf(__this);
281d8     20 E4 05 F1 | 	add	objptr, #32
281dc     F2 1E 02 FB | 	rdlong	local01, objptr
281e0     0F 21 02 F6 | 	mov	local02, local01
281e4     20 E4 85 F1 | 	sub	objptr, #32
281e8     13 20 46 F7 | 	zerox	local02, #19
281ec     14 1E 46 F0 | 	shr	local01, #20
281f0     02 1E 66 F0 | 	shl	local01, #2
281f4     ED 1E 02 F1 | 	add	local01, __methods__
281f8     0F 1F 02 FB | 	rdlong	local01, local01
281fc     F2 12 02 F6 | 	mov	arg01, objptr
28200     F2 22 02 F6 | 	mov	local03, objptr
28204     10 E5 01 F6 | 	mov	objptr, local02
28208     2D 1E 62 FD | 	call	local01
2820c     11 E5 01 F6 | 	mov	objptr, local03
28210                 | LR__4240
28210     A7 F0 03 F6 | 	mov	ptra, fp
28214     B2 00 A0 FD | 	call	#popregs_
28218                 | __struct__s_vfs_file_t_getchar_ret
28218     2D 00 64 FD | 	ret
2821c                 | 
2821c                 | __struct___bas_wrap_sender_tx
2821c     03 4A 05 F6 | 	mov	COUNT_, #3
28220     A8 00 A0 FD | 	call	#pushregs_
28224     F2 1E 02 FB | 	rdlong	local01, objptr
28228     0F 21 02 F6 | 	mov	local02, local01
2822c     13 1E 46 F7 | 	zerox	local01, #19
28230     14 20 46 F0 | 	shr	local02, #20
28234     02 20 66 F0 | 	shl	local02, #2
28238     ED 20 02 F1 | 	add	local02, __methods__
2823c     10 21 02 FB | 	rdlong	local02, local02
28240     F2 22 02 F6 | 	mov	local03, objptr
28244     0F E5 01 F6 | 	mov	objptr, local01
28248     2D 20 62 FD | 	call	local02
2824c     11 E5 01 F6 | 	mov	objptr, local03
28250     01 FA 05 F6 | 	mov	result1, #1
28254     A7 F0 03 F6 | 	mov	ptra, fp
28258     B2 00 A0 FD | 	call	#popregs_
2825c                 | __struct___bas_wrap_sender_tx_ret
2825c     2D 00 64 FD | 	ret
28260                 | 
28260                 | __struct___bas_wrap_sender_rx
28260     03 4A 05 F6 | 	mov	COUNT_, #3
28264     A8 00 A0 FD | 	call	#pushregs_
28268     04 E4 05 F1 | 	add	objptr, #4
2826c     F2 1E 02 FB | 	rdlong	local01, objptr
28270     0F 21 02 F6 | 	mov	local02, local01
28274     04 E4 85 F1 | 	sub	objptr, #4
28278     13 20 46 F7 | 	zerox	local02, #19
2827c     14 1E 46 F0 | 	shr	local01, #20
28280     02 1E 66 F0 | 	shl	local01, #2
28284     ED 1E 02 F1 | 	add	local01, __methods__
28288     0F 1F 02 FB | 	rdlong	local01, local01
2828c     F2 22 02 F6 | 	mov	local03, objptr
28290     10 E5 01 F6 | 	mov	objptr, local02
28294     2D 1E 62 FD | 	call	local01
28298     11 E5 01 F6 | 	mov	objptr, local03
2829c     A7 F0 03 F6 | 	mov	ptra, fp
282a0     B2 00 A0 FD | 	call	#popregs_
282a4                 | __struct___bas_wrap_sender_rx_ret
282a4     2D 00 64 FD | 	ret
282a8                 | 
282a8                 | __struct___bas_wrap_sender_close
282a8     03 4A 05 F6 | 	mov	COUNT_, #3
282ac     A8 00 A0 FD | 	call	#pushregs_
282b0     08 E4 05 F1 | 	add	objptr, #8
282b4     F2 1E 02 FB | 	rdlong	local01, objptr
282b8     0F 21 02 F6 | 	mov	local02, local01
282bc     08 E4 85 F1 | 	sub	objptr, #8
282c0     13 20 46 F7 | 	zerox	local02, #19
282c4     14 1E 46 F0 | 	shr	local01, #20
282c8     02 1E 66 F0 | 	shl	local01, #2
282cc     ED 1E 02 F1 | 	add	local01, __methods__
282d0     0F 1F 02 FB | 	rdlong	local01, local01
282d4     F2 22 02 F6 | 	mov	local03, objptr
282d8     10 E5 01 F6 | 	mov	objptr, local02
282dc     2D 1E 62 FD | 	call	local01
282e0     11 E5 01 F6 | 	mov	objptr, local03
282e4     A7 F0 03 F6 | 	mov	ptra, fp
282e8     B2 00 A0 FD | 	call	#popregs_
282ec                 | __struct___bas_wrap_sender_close_ret
282ec     2D 00 64 FD | 	ret
282f0                 | 
282f0                 | LR__4250
282f0     2F          | 	byte	"/"
282f1     00          | 	byte	0
282f2                 | LR__4251
282f2     69 6E 66    | 	byte	"inf"
282f5     00          | 	byte	0
282f6                 | LR__4252
282f6     6E 61 6E    | 	byte	"nan"
282f9     00          | 	byte	0
282fa                 | LR__4253
282fa                 | 	byte	
282fa     00          | 	byte	0
282fb                 | LR__4254
282fb                 | 	byte	
282fb     00          | 	byte	0
282fc                 | LR__4255
282fc                 | 	byte	
282fc     00          | 	byte	0
282fd                 | LR__4256
282fd                 | 	byte	
282fd     00          | 	byte	0
282fe                 | LR__4257
282fe                 | 	byte	
282fe     00          | 	byte	0
282ff                 | LR__4258
282ff                 | 	byte	
282ff     00          | 	byte	0
28300                 | LR__4259
28300                 | 	byte	
28300     00          | 	byte	0
28301                 | LR__4260
28301                 | 	byte	
28301     00          | 	byte	0
28302                 | LR__4261
28302     00          | 	byte	0
28303     00          | 	byte	0
28304                 | LR__4262
28304     00          | 	byte	0
28305     00          | 	byte	0
28306                 | LR__4263
28306     00          | 	byte	0
28307     00          | 	byte	0
28308                 | LR__4264
28308     20 21 21 21 
2830c     20 63 6F 72 
28310     72 75 70 74 
28314     65 64 20 68 
28318     65 61 70 3F 
2831c     3F 3F 20 21 
28320     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
28323     00          | 	byte	0
28324                 | LR__4265
28324     20 21 21 21 
28328     20 6F 75 74 
2832c     20 6F 66 20 
28330     68 65 61 70 
28334     20 6D 65 6D 
28338     6F 72 79 20 
2833c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
28340     00          | 	byte	0
28341                 | LR__4266
28341     20 21 21 21 
28345     20 63 6F 72 
28349     72 75 70 74 
2834d     65 64 20 68 
28351     65 61 70 20 
28355     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
28359     00          | 	byte	0
2835a                 | LR__4267
2835a     00          | 	byte	0
2835b     00          | 	byte	0
2835c                 | LR__4268
2835c     2E          | 	byte	"."
2835d     00          | 	byte	0
2835e                 | LR__4269
2835e     00          | 	byte	0
2835f     00          | 	byte	0
28360                 | LR__4270
28360     00          | 	byte	0
28361     00          | 	byte	0
28362                 | LR__4271
28362     00          | 	byte	0
28363     00          | 	byte	0
28364                 | LR__4272
28364     2A 3A 3C 3E 
28368     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2836c     00          | 	byte	0
2836d                 | LR__4273
2836d     2B 2C 3B 3D 
28371     5B 5D       | 	byte	"+,;=[]"
28373     00          | 	byte	0
28374                 | LR__4274
28374     46 41 54 33 
28378     32 20 20 20 | 	byte	"FAT32   "
2837c     00          | 	byte	0
2837d                 | LR__4275
2837d     54 5A       | 	byte	"TZ"
2837f     00          | 	byte	0
28380                 | LR__4276
28380     00          | 	byte	0
28381     00          | 	byte	0
28382                 | LR__4277
28382                 | 	byte	
28382     00          | 	byte	0
28383                 | LR__4278
28383                 | 	byte	
28383     00          | 	byte	0
28384                 | LR__4279
28384     22          | 	byte	34
28385     00          | 	byte	0
28386                 | LR__4280
28386     22          | 	byte	34
28387     00          | 	byte	0
28388                 | LR__4281
28388     3A          | 	byte	":"
28389     00          | 	byte	0
2838a                 | LR__4282
2838a                 | 	byte	
2838a     00          | 	byte	0
2838b                 | LR__4283
2838b                 | 	byte	
2838b     00          | 	byte	0
2838c                 | LR__4284
2838c                 | 	byte	
2838c     00          | 	byte	0
2838d                 | LR__4285
2838d                 | 	byte	
2838d     00          | 	byte	0
2838e                 | LR__4286
2838e                 | 	byte	
2838e     00          | 	byte	0
2838f                 | LR__4287
2838f                 | 	byte	
2838f     00          | 	byte	0
28390                 | LR__4288
28390                 | 	byte	
28390     00          | 	byte	0
28391                 | LR__4289
28391     22          | 	byte	34
28392     00          | 	byte	0
28393                 | LR__4290
28393     22          | 	byte	34
28394     00          | 	byte	0
28395                 | LR__4291
28395     22          | 	byte	34
28396     00          | 	byte	0
28397                 | LR__4292
28397     22          | 	byte	34
28398     00          | 	byte	0
28399                 | LR__4293
28399     22          | 	byte	34
2839a     00          | 	byte	0
2839b                 | LR__4294
2839b     3E          | 	byte	">"
2839c     00          | 	byte	0
2839d                 | LR__4295
2839d     3E          | 	byte	">"
2839e     00          | 	byte	0
2839f                 | LR__4296
2839f     2B          | 	byte	"+"
283a0     00          | 	byte	0
283a1                 | LR__4297
283a1     2D          | 	byte	"-"
283a2     00          | 	byte	0
283a3                 | LR__4298
283a3     2A          | 	byte	"*"
283a4     00          | 	byte	0
283a5                 | LR__4299
283a5     2F          | 	byte	"/"
283a6     00          | 	byte	0
283a7                 | LR__4300
283a7     5E          | 	byte	"^"
283a8     00          | 	byte	0
283a9                 | LR__4301
283a9     3D          | 	byte	"="
283aa     00          | 	byte	0
283ab                 | LR__4302
283ab     2B          | 	byte	"+"
283ac     00          | 	byte	0
283ad                 | LR__4303
283ad     2B          | 	byte	"+"
283ae     00          | 	byte	0
283af                 | LR__4304
283af     2D          | 	byte	"-"
283b0     00          | 	byte	0
283b1                 | LR__4305
283b1     2D          | 	byte	"-"
283b2     00          | 	byte	0
283b3                 | LR__4306
283b3     3C          | 	byte	"<"
283b4     00          | 	byte	0
283b5                 | LR__4307
283b5     3E          | 	byte	">"
283b6     00          | 	byte	0
283b7                 | LR__4308
283b7     22          | 	byte	34
283b8     00          | 	byte	0
283b9                 | LR__4309
283b9     22          | 	byte	34
283ba     00          | 	byte	0
283bb                 | LR__4310
283bb     2E          | 	byte	"."
283bc     00          | 	byte	0
283bd                 | LR__4311
283bd     3F          | 	byte	"?"
283be     00          | 	byte	0
283bf                 | LR__4312
283bf     3F          | 	byte	"?"
283c0     00          | 	byte	0
283c1                 | LR__4313
283c1     6D 6F 75 73 
283c5     65          | 	byte	"mouse"
283c6     00          | 	byte	0
283c7                 | LR__4314
283c7     63 75 72 73 
283cb     6F 72       | 	byte	"cursor"
283cd     00          | 	byte	0
283ce                 | LR__4315
283ce     63 6C 69 63 
283d2     6B          | 	byte	"click"
283d3     00          | 	byte	0
283d4                 | LR__4316
283d4     6F 6E       | 	byte	"on"
283d6     00          | 	byte	0
283d7                 | LR__4317
283d7     31          | 	byte	"1"
283d8     00          | 	byte	0
283d9                 | LR__4318
283d9     6F 66 66    | 	byte	"off"
283dc     00          | 	byte	0
283dd                 | LR__4319
283dd     30          | 	byte	"0"
283de     00          | 	byte	0
283df                 | LR__4320
283df     6D 6F 64 65 | 	byte	"mode"
283e3     00          | 	byte	0
283e4                 | LR__4321
283e4     6D 2E       | 	byte	"m."
283e6     00          | 	byte	0
283e7                 | LR__4322
283e7     61 74 61 72 
283eb     69          | 	byte	"atari"
283ec     00          | 	byte	0
283ed                 | LR__4323
283ed     30          | 	byte	"0"
283ee     00          | 	byte	0
283ef                 | LR__4324
283ef     70 63 5F 61 
283f3     6D 62 65 72 | 	byte	"pc_amber"
283f7     00          | 	byte	0
283f8                 | LR__4325
283f8     31          | 	byte	"1"
283f9     00          | 	byte	0
283fa                 | LR__4326
283fa     70 63 5F 67 
283fe     72 65 65 6E | 	byte	"pc_green"
28402     00          | 	byte	0
28403                 | LR__4327
28403     32          | 	byte	"2"
28404     00          | 	byte	0
28405                 | LR__4328
28405     70 63 5F 77 
28409     68 69 74 65 | 	byte	"pc_white"
2840d     00          | 	byte	0
2840e                 | LR__4329
2840e     33          | 	byte	"3"
2840f     00          | 	byte	0
28410                 | LR__4330
28410     73 74       | 	byte	"st"
28412     00          | 	byte	0
28413                 | LR__4331
28413     34          | 	byte	"4"
28414     00          | 	byte	0
28415                 | LR__4332
28415                 | 	byte	
28415     00          | 	byte	0
28416                 | LR__4333
28416     6C 6F 61 64 | 	byte	"load"
2841a     00          | 	byte	0
2841b                 | LR__4334
2841b     73 61 76 65 | 	byte	"save"
2841f     00          | 	byte	0
28420                 | LR__4335
28420     62 72 75 6E | 	byte	"brun"
28424     00          | 	byte	0
28425                 | LR__4336
28425     6C 6F 2E    | 	byte	"lo."
28428     00          | 	byte	0
28429                 | LR__4337
28429     73 2E       | 	byte	"s."
2842b     00          | 	byte	0
2842c                 | LR__4338
2842c     62 72 2E    | 	byte	"br."
2842f     00          | 	byte	0
28430                 | LR__4339
28430                 | 	byte	
28430     00          | 	byte	0
28431                 | LR__4340
28431                 | 	byte	
28431     00          | 	byte	0
28432                 | LR__4341
28432                 | 	byte	
28432     00          | 	byte	0
28433                 | LR__4342
28433                 | 	byte	
28433     00          | 	byte	0
28434                 | LR__4343
28434     20 55 73 65 
28438     72 20 66 75 
2843c     6E 63 74 69 
28440     6F 6E 73 20 
28444     61 6E 64 20 
28448     61 72 72 61 
2844c     79 73 20 6E 
28450     6F 74 20 79 
28454     65 74 20 69 
28458     6D 70 6C 65 
2845c     6D 65 6E 74 
28460     65 64       | 	byte	" User functions and arrays not yet implemented"
28462     00          | 	byte	0
28463                 | LR__4344
28463                 | 	byte	
28463     00          | 	byte	0
28464                 | LR__4345
28464                 | 	byte	
28464     00          | 	byte	0
28465                 | LR__4346
28465     52 65 61 64 
28469     79          | 	byte	"Ready"
2846a     00          | 	byte	0
2846b                 | LR__4347
2846b     2B          | 	byte	"+"
2846c     00          | 	byte	0
2846d                 | LR__4348
2846d     2D          | 	byte	"-"
2846e     00          | 	byte	0
2846f                 | LR__4349
2846f     6F 72       | 	byte	"or"
28471     00          | 	byte	0
28472                 | LR__4350
28472     78 6F 72    | 	byte	"xor"
28475     00          | 	byte	0
28476                 | LR__4351
28476     2A          | 	byte	"*"
28477     00          | 	byte	0
28478                 | LR__4352
28478     2F          | 	byte	"/"
28479     00          | 	byte	0
2847a                 | LR__4353
2847a     61 6E 64    | 	byte	"and"
2847d     00          | 	byte	0
2847e                 | LR__4354
2847e     64 69 76    | 	byte	"div"
28481     00          | 	byte	0
28482                 | LR__4355
28482     6D 6F 64    | 	byte	"mod"
28485     00          | 	byte	0
28486                 | LR__4356
28486     73 68 6C    | 	byte	"shl"
28489     00          | 	byte	0
2848a                 | LR__4357
2848a     73 68 72    | 	byte	"shr"
2848d     00          | 	byte	0
2848e                 | LR__4358
2848e     5E          | 	byte	"^"
2848f     00          | 	byte	0
28490                 | LR__4359
28490     6E 6F 74    | 	byte	"not"
28493     00          | 	byte	0
28494                 | LR__4360
28494     40          | 	byte	"@"
28495     00          | 	byte	0
28496                 | LR__4361
28496     3D          | 	byte	"="
28497     00          | 	byte	0
28498                 | LR__4362
28498     3E 3D       | 	byte	">="
2849a     00          | 	byte	0
2849b                 | LR__4363
2849b     3C 3D       | 	byte	"<="
2849d     00          | 	byte	0
2849e                 | LR__4364
2849e     3C          | 	byte	"<"
2849f     00          | 	byte	0
284a0                 | LR__4365
284a0     3E          | 	byte	">"
284a1     00          | 	byte	0
284a2                 | LR__4366
284a2     3C 3E       | 	byte	"<>"
284a4     00          | 	byte	0
284a5                 | LR__4367
284a5     2B 2B       | 	byte	"++"
284a7     00          | 	byte	0
284a8                 | LR__4368
284a8     2D 2D       | 	byte	"--"
284aa     00          | 	byte	0
284ab                 | LR__4369
284ab     2B          | 	byte	"+"
284ac     00          | 	byte	0
284ad                 | LR__4370
284ad     2D          | 	byte	"-"
284ae     00          | 	byte	0
284af                 | LR__4371
284af     3D          | 	byte	"="
284b0     00          | 	byte	0
284b1                 | LR__4372
284b1     2C          | 	byte	","
284b2     00          | 	byte	0
284b3                 | LR__4373
284b3     2A          | 	byte	"*"
284b4     00          | 	byte	0
284b5                 | LR__4374
284b5     2F          | 	byte	"/"
284b6     00          | 	byte	0
284b7                 | LR__4375
284b7     3B          | 	byte	";"
284b8     00          | 	byte	0
284b9                 | LR__4376
284b9     22          | 	byte	34
284ba     00          | 	byte	0
284bb                 | LR__4377
284bb     5E          | 	byte	"^"
284bc     00          | 	byte	0
284bd                 | LR__4378
284bd     29          | 	byte	")"
284be     00          | 	byte	0
284bf                 | LR__4379
284bf     28          | 	byte	"("
284c0     00          | 	byte	0
284c1                 | LR__4380
284c1     3A          | 	byte	":"
284c2     00          | 	byte	0
284c3                 | LR__4381
284c3     20          | 	byte	" "
284c4     00          | 	byte	0
284c5                 | LR__4382
284c5     3E          | 	byte	">"
284c6     00          | 	byte	0
284c7                 | LR__4383
284c7     3C          | 	byte	"<"
284c8     00          | 	byte	0
284c9                 | LR__4384
284c9     3D          | 	byte	"="
284ca     00          | 	byte	0
284cb                 | LR__4385
284cb     62 65 65 70 | 	byte	"beep"
284cf     00          | 	byte	0
284d0                 | LR__4386
284d0     62 2E       | 	byte	"b."
284d2     00          | 	byte	0
284d3                 | LR__4387
284d3     62 6F 78    | 	byte	"box"
284d6     00          | 	byte	0
284d7                 | LR__4388
284d7     62 72 75 6E | 	byte	"brun"
284db     00          | 	byte	0
284dc                 | LR__4389
284dc     62 72 2E    | 	byte	"br."
284df     00          | 	byte	0
284e0                 | LR__4390
284e0     63 69 72 63 
284e4     6C 65       | 	byte	"circle"
284e6     00          | 	byte	0
284e7                 | LR__4391
284e7     63 69 2E    | 	byte	"ci."
284ea     00          | 	byte	0
284eb                 | LR__4392
284eb     63 6C 69 63 
284ef     6B          | 	byte	"click"
284f0     00          | 	byte	0
284f1                 | LR__4393
284f1     63 6C 73    | 	byte	"cls"
284f4     00          | 	byte	0
284f5                 | LR__4394
284f5     63 6F 6C 6F 
284f9     72          | 	byte	"color"
284fa     00          | 	byte	0
284fb                 | LR__4395
284fb     63 2E       | 	byte	"c."
284fd     00          | 	byte	0
284fe                 | LR__4396
284fe     63 73 61 76 
28502     65          | 	byte	"csave"
28503     00          | 	byte	0
28504                 | LR__4397
28504     63 73 2E    | 	byte	"cs."
28507     00          | 	byte	0
28508                 | LR__4398
28508     63 75 72 73 
2850c     6F 72       | 	byte	"cursor"
2850e     00          | 	byte	0
2850f                 | LR__4399
2850f     64 65 66 73 
28513     6E 64       | 	byte	"defsnd"
28515     00          | 	byte	0
28516                 | LR__4400
28516     64 65 66 65 
2851a     6E 76       | 	byte	"defenv"
2851c     00          | 	byte	0
2851d                 | LR__4401
2851d     64 65 66 73 
28521     70 72 69 74 
28525     65          | 	byte	"defsprite"
28526     00          | 	byte	0
28527                 | LR__4402
28527     64 73 2E    | 	byte	"ds."
2852a     00          | 	byte	0
2852b                 | LR__4403
2852b     64 65 67    | 	byte	"deg"
2852e     00          | 	byte	0
2852f                 | LR__4404
2852f     64 69 6D    | 	byte	"dim"
28532     00          | 	byte	0
28533                 | LR__4405
28533     64 69 72    | 	byte	"dir"
28536     00          | 	byte	0
28537                 | LR__4406
28537     64 72 61 77 | 	byte	"draw"
2853b     00          | 	byte	0
2853c                 | LR__4407
2853c     64 72 2E    | 	byte	"dr."
2853f     00          | 	byte	0
28540                 | LR__4408
28540     65 6C 73 65 | 	byte	"else"
28544     00          | 	byte	0
28545                 | LR__4409
28545     66 63 69 72 
28549     63 6C 65    | 	byte	"fcircle"
2854c     00          | 	byte	0
2854d                 | LR__4410
2854d     66 63 2E    | 	byte	"fc."
28550     00          | 	byte	0
28551                 | LR__4411
28551     66 69 6C 6C | 	byte	"fill"
28555     00          | 	byte	0
28556                 | LR__4412
28556     66 69 2E    | 	byte	"fi."
28559     00          | 	byte	0
2855a                 | LR__4413
2855a     66 6F 6E 74 | 	byte	"font"
2855e     00          | 	byte	0
2855f                 | LR__4414
2855f     66 6F 72    | 	byte	"for"
28562     00          | 	byte	0
28563                 | LR__4415
28563     66 2E       | 	byte	"f."
28565     00          | 	byte	0
28566                 | LR__4416
28566     66 72 61 6D 
2856a     65          | 	byte	"frame"
2856b     00          | 	byte	0
2856c                 | LR__4417
2856c     66 72 2E    | 	byte	"fr."
2856f     00          | 	byte	0
28570                 | LR__4418
28570     67 6F 74 6F | 	byte	"goto"
28574     00          | 	byte	0
28575                 | LR__4419
28575     67 2E       | 	byte	"g."
28577     00          | 	byte	0
28578                 | LR__4420
28578     69 66       | 	byte	"if"
2857a     00          | 	byte	0
2857b                 | LR__4421
2857b     69 6E 6B    | 	byte	"ink"
2857e     00          | 	byte	0
2857f                 | LR__4422
2857f     69 2E       | 	byte	"i."
28581     00          | 	byte	0
28582                 | LR__4423
28582     69 6E 74    | 	byte	"int"
28585     00          | 	byte	0
28586                 | LR__4424
28586     6C 69 73 74 | 	byte	"list"
2858a     00          | 	byte	0
2858b                 | LR__4425
2858b     6C 2E       | 	byte	"l."
2858d     00          | 	byte	0
2858e                 | LR__4426
2858e     6C 6F 61 64 | 	byte	"load"
28592     00          | 	byte	0
28593                 | LR__4427
28593     6C 6F 2E    | 	byte	"lo."
28596     00          | 	byte	0
28597                 | LR__4428
28597     6D 6F 64 65 | 	byte	"mode"
2859b     00          | 	byte	0
2859c                 | LR__4429
2859c     6D 2E       | 	byte	"m."
2859e     00          | 	byte	0
2859f                 | LR__4430
2859f     6D 6F 75 73 
285a3     65          | 	byte	"mouse"
285a4     00          | 	byte	0
285a5                 | LR__4431
285a5     6E 65 77    | 	byte	"new"
285a8     00          | 	byte	0
285a9                 | LR__4432
285a9     6E 65 78 74 | 	byte	"next"
285ad     00          | 	byte	0
285ae                 | LR__4433
285ae     6E 2E       | 	byte	"n."
285b0     00          | 	byte	0
285b1                 | LR__4434
285b1     70 61 70 65 
285b5     72          | 	byte	"paper"
285b6     00          | 	byte	0
285b7                 | LR__4435
285b7     70 2E       | 	byte	"p."
285b9     00          | 	byte	0
285ba                 | LR__4436
285ba     70 69 6E 66 
285be     6C 6F 61 74 | 	byte	"pinfloat"
285c2     00          | 	byte	0
285c3                 | LR__4437
285c3     70 69 6E 68 
285c7     69          | 	byte	"pinhi"
285c8     00          | 	byte	0
285c9                 | LR__4438
285c9     70 69 6E 6C 
285cd     6F          | 	byte	"pinlo"
285ce     00          | 	byte	0
285cf                 | LR__4439
285cf     70 69 6E 73 
285d3     74 61 72 74 | 	byte	"pinstart"
285d7     00          | 	byte	0
285d8                 | LR__4440
285d8     70 69 6E 74 
285dc     6F 67 67 6C 
285e0     65          | 	byte	"pintoggle"
285e1     00          | 	byte	0
285e2                 | LR__4441
285e2     70 69 6E 77 
285e6     72 69 74 65 | 	byte	"pinwrite"
285ea     00          | 	byte	0
285eb                 | LR__4442
285eb     70 6C 61 79 | 	byte	"play"
285ef     00          | 	byte	0
285f0                 | LR__4443
285f0     70 6C 6F 74 | 	byte	"plot"
285f4     00          | 	byte	0
285f5                 | LR__4444
285f5     70 6C 2E    | 	byte	"pl."
285f8     00          | 	byte	0
285f9                 | LR__4445
285f9     70 6F 73 69 
285fd     74 69 6F 6E | 	byte	"position"
28601     00          | 	byte	0
28602                 | LR__4446
28602     70 6F 73 2E | 	byte	"pos."
28606     00          | 	byte	0
28607                 | LR__4447
28607     70 72 69 6E 
2860b     74          | 	byte	"print"
2860c     00          | 	byte	0
2860d                 | LR__4448
2860d     3F          | 	byte	"?"
2860e     00          | 	byte	0
2860f                 | LR__4449
2860f     72 61 64    | 	byte	"rad"
28612     00          | 	byte	0
28613                 | LR__4450
28613     72 75 6E    | 	byte	"run"
28616     00          | 	byte	0
28617                 | LR__4451
28617     73 61 76 65 | 	byte	"save"
2861b     00          | 	byte	0
2861c                 | LR__4452
2861c     73 2E       | 	byte	"s."
2861e     00          | 	byte	0
2861f                 | LR__4453
2861f     73 70 72 69 
28623     74 65       | 	byte	"sprite"
28625     00          | 	byte	0
28626                 | LR__4454
28626     73 70 2E    | 	byte	"sp."
28629     00          | 	byte	0
2862a                 | LR__4455
2862a     74 68 65 6E | 	byte	"then"
2862e     00          | 	byte	0
2862f                 | LR__4456
2862f     77 61 69 74 
28633     6D 73       | 	byte	"waitms"
28635     00          | 	byte	0
28636                 | LR__4457
28636     77 61 69 74 
2863a     63 6C 6F 63 
2863e     6B          | 	byte	"waitclock"
2863f     00          | 	byte	0
28640                 | LR__4458
28640     77 63 2E    | 	byte	"wc."
28643     00          | 	byte	0
28644                 | LR__4459
28644     77 61 69 74 
28648     76 62 6C    | 	byte	"waitvbl"
2864b     00          | 	byte	0
2864c                 | LR__4460
2864c     77 76 2E    | 	byte	"wv."
2864f     00          | 	byte	0
28650                 | LR__4461
28650     77 78 70 69 
28654     6E          | 	byte	"wxpin"
28655     00          | 	byte	0
28656                 | LR__4462
28656     77 79 70 69 
2865a     6E          | 	byte	"wypin"
2865b     00          | 	byte	0
2865c                 | LR__4463
2865c     61 63 6F 73 | 	byte	"acos"
28660     00          | 	byte	0
28661                 | LR__4464
28661     61 73 69 6E | 	byte	"asin"
28665     00          | 	byte	0
28666                 | LR__4465
28666     61 74 6E    | 	byte	"atn"
28669     00          | 	byte	0
2866a                 | LR__4466
2866a     63 6F 73    | 	byte	"cos"
2866d     00          | 	byte	0
2866e                 | LR__4467
2866e     67 65 74 70 
28672     69 78 65 6C | 	byte	"getpixel"
28676     00          | 	byte	0
28677                 | LR__4468
28677     67 65 2E    | 	byte	"ge."
2867a     00          | 	byte	0
2867b                 | LR__4469
2867b     67 65 74 74 
2867f     69 6D 65    | 	byte	"gettime"
28682     00          | 	byte	0
28683                 | LR__4470
28683     6D 6F 75 73 
28687     65 6B       | 	byte	"mousek"
28689     00          | 	byte	0
2868a                 | LR__4471
2868a     6D 6F 75 73 
2868e     65 77       | 	byte	"mousew"
28690     00          | 	byte	0
28691                 | LR__4472
28691     6D 6F 75 73 
28695     65 78       | 	byte	"mousex"
28697     00          | 	byte	0
28698                 | LR__4473
28698     6D 6F 75 73 
2869c     65 79       | 	byte	"mousey"
2869e     00          | 	byte	0
2869f                 | LR__4474
2869f     70 69 6E 72 
286a3     65 61 64    | 	byte	"pinread"
286a6     00          | 	byte	0
286a7                 | LR__4475
286a7     72 64 70 69 
286ab     6E          | 	byte	"rdpin"
286ac     00          | 	byte	0
286ad                 | LR__4476
286ad     72 71 70 69 
286b1     6E          | 	byte	"rqpin"
286b2     00          | 	byte	0
286b3                 | LR__4477
286b3     72 6E 64    | 	byte	"rnd"
286b6     00          | 	byte	0
286b7                 | LR__4478
286b7     73 69 6E    | 	byte	"sin"
286ba     00          | 	byte	0
286bb                 | LR__4479
286bb     73 71 72    | 	byte	"sqr"
286be     00          | 	byte	0
286bf                 | LR__4480
286bf     73 74 69 63 
286c3     6B          | 	byte	"stick"
286c4     00          | 	byte	0
286c5                 | LR__4481
286c5     73 74 72 69 
286c9     67          | 	byte	"strig"
286ca     00          | 	byte	0
286cb                 | LR__4482
286cb     74 61 6E    | 	byte	"tan"
286ce     00          | 	byte	0
286cf                 | LR__4483
286cf     61          | 	byte	"a"
286d0     00          | 	byte	0
286d1                 | LR__4484
286d1     7A          | 	byte	"z"
286d2     00          | 	byte	0
286d3                 | LR__4485
286d3     5F          | 	byte	"_"
286d4     00          | 	byte	0
286d5                 | LR__4486
286d5     61          | 	byte	"a"
286d6     00          | 	byte	0
286d7                 | LR__4487
286d7     7A          | 	byte	"z"
286d8     00          | 	byte	0
286d9                 | LR__4488
286d9     30          | 	byte	"0"
286da     00          | 	byte	0
286db                 | LR__4489
286db     39          | 	byte	"9"
286dc     00          | 	byte	0
286dd                 | LR__4490
286dd     5F          | 	byte	"_"
286de     00          | 	byte	0
286df                 | LR__4491
286df     2E          | 	byte	"."
286e0     00          | 	byte	0
286e1                 | LR__4492
286e1     61          | 	byte	"a"
286e2     00          | 	byte	0
286e3                 | LR__4493
286e3     7A          | 	byte	"z"
286e4     00          | 	byte	0
286e5                 | LR__4494
286e5     30          | 	byte	"0"
286e6     00          | 	byte	0
286e7                 | LR__4495
286e7     39          | 	byte	"9"
286e8     00          | 	byte	0
286e9                 | LR__4496
286e9     5F          | 	byte	"_"
286ea     00          | 	byte	0
286eb                 | LR__4497
286eb     24          | 	byte	"$"
286ec     00          | 	byte	0
286ed                 | LR__4498
286ed     25          | 	byte	"%"
286ee     00          | 	byte	0
286ef                 | LR__4499
286ef     21          | 	byte	"!"
286f0     00          | 	byte	0
286f1                 | LR__4500
286f1     30          | 	byte	"0"
286f2     00          | 	byte	0
286f3                 | LR__4501
286f3     39          | 	byte	"9"
286f4     00          | 	byte	0
286f5                 | LR__4502
286f5     2E          | 	byte	"."
286f6     00          | 	byte	0
286f7                 | LR__4503
286f7     24          | 	byte	"$"
286f8     00          | 	byte	0
286f9                 | LR__4504
286f9     25          | 	byte	"%"
286fa     00          | 	byte	0
286fb                 | LR__4505
286fb     2D          | 	byte	"-"
286fc     00          | 	byte	0
286fd                 | LR__4506
286fd     2E          | 	byte	"."
286fe     00          | 	byte	0
286ff                 | LR__4507
286ff     30          | 	byte	"0"
28700     00          | 	byte	0
28701                 | LR__4508
28701     39          | 	byte	"9"
28702     00          | 	byte	0
28703                 | LR__4509
28703     5F          | 	byte	"_"
28704     00          | 	byte	0
28705                 | LR__4510
28705     2E          | 	byte	"."
28706     00          | 	byte	0
28707                 | LR__4511
28707     45          | 	byte	"E"
28708     00          | 	byte	0
28709                 | LR__4512
28709     65          | 	byte	"e"
2870a     00          | 	byte	0
2870b                 | LR__4513
2870b     2D          | 	byte	"-"
2870c     00          | 	byte	0
2870d                 | LR__4514
2870d     2D          | 	byte	"-"
2870e     00          | 	byte	0
2870f                 | LR__4515
2870f     65          | 	byte	"e"
28710     00          | 	byte	0
28711                 | LR__4516
28711     2E          | 	byte	"."
28712     00          | 	byte	0
28713                 | LR__4517
28713     45          | 	byte	"E"
28714     00          | 	byte	0
28715                 | LR__4518
28715     65          | 	byte	"e"
28716     00          | 	byte	0
28717                 | LR__4519
28717     30          | 	byte	"0"
28718     00          | 	byte	0
28719                 | LR__4520
28719     39          | 	byte	"9"
2871a     00          | 	byte	0
2871b                 | LR__4521
2871b     24          | 	byte	"$"
2871c     00          | 	byte	0
2871d                 | LR__4522
2871d     25          | 	byte	"%"
2871e     00          | 	byte	0
2871f                 | LR__4523
2871f     2D          | 	byte	"-"
28720     00          | 	byte	0
28721                 | LR__4524
28721     30          | 	byte	"0"
28722     00          | 	byte	0
28723                 | LR__4525
28723     39          | 	byte	"9"
28724     00          | 	byte	0
28725                 | LR__4526
28725     5F          | 	byte	"_"
28726     00          | 	byte	0
28727                 | LR__4527
28727     30          | 	byte	"0"
28728     00          | 	byte	0
28729                 | LR__4528
28729     39          | 	byte	"9"
2872a     00          | 	byte	0
2872b                 | LR__4529
2872b     5F          | 	byte	"_"
2872c     00          | 	byte	0
2872d                 | LR__4530
2872d     22          | 	byte	34
2872e     00          | 	byte	0
2872f                 | LR__4531
2872f     22          | 	byte	34
28730     00          | 	byte	0
28731                 | LR__4532
28731     44 69 6D 3A 
28735     20 61 74 20 
28739     6C 69 6E 65 
2873d     20          | 	byte	"Dim: at line "
2873e     00          | 	byte	0
2873f                 | LR__4533
2873f     3A 20 77 61 
28743     72 6E 69 6E 
28747     67 3A 20 74 
2874b     68 65 20 76 
2874f     61 72 69 61 
28753     62 6C 65 20 
28757     65 78 69 73 
2875b     74 65 64 2E | 	byte	": warning: the variable existed."
2875f     00          | 	byte	0
28760                 | LR__4534
28760     28          | 	byte	"("
28761     00          | 	byte	0
28762                 | LR__4535
28762     61 73       | 	byte	"as"
28764     00          | 	byte	0
28765                 | LR__4536
28765     61 73       | 	byte	"as"
28767     00          | 	byte	0
28768                 | LR__4537
28768     2C          | 	byte	","
28769     00          | 	byte	0
2876a                 | LR__4538
2876a     29          | 	byte	")"
2876b     00          | 	byte	0
2876c                 | LR__4539
2876c     29          | 	byte	")"
2876d     00          | 	byte	0
2876e                 | LR__4540
2876e     61 73       | 	byte	"as"
28770     00          | 	byte	0
28771                 | LR__4541
28771     62 79 74 65 | 	byte	"byte"
28775     00          | 	byte	0
28776                 | LR__4542
28776     75 62 79 74 
2877a     65          | 	byte	"ubyte"
2877b     00          | 	byte	0
2877c                 | LR__4543
2877c     73 68 6F 72 
28780     74          | 	byte	"short"
28781     00          | 	byte	0
28782                 | LR__4544
28782     75 73 68 6F 
28786     72 74       | 	byte	"ushort"
28788     00          | 	byte	0
28789                 | LR__4545
28789     6C 6F 6E 67 | 	byte	"long"
2878d     00          | 	byte	0
2878e                 | LR__4546
2878e     69 6E 74 65 
28792     67 65 72    | 	byte	"integer"
28795     00          | 	byte	0
28796                 | LR__4547
28796     75 6C 6F 6E 
2879a     67          | 	byte	"ulong"
2879b     00          | 	byte	0
2879c                 | LR__4548
2879c     69 6E 74 36 
287a0     34          | 	byte	"int64"
287a1     00          | 	byte	0
287a2                 | LR__4549
287a2     75 69 6E 74 
287a6     36 34       | 	byte	"uint64"
287a8     00          | 	byte	0
287a9                 | LR__4550
287a9     73 69 6E 67 
287ad     6C 65       | 	byte	"single"
287af     00          | 	byte	0
287b0                 | LR__4551
287b0     64 6F 75 62 
287b4     6C 65       | 	byte	"double"
287b6     00          | 	byte	0
287b7                 | LR__4552
287b7     73 74 72 69 
287bb     6E 67       | 	byte	"string"
287bd     00          | 	byte	0
287be                 | LR__4553
287be     74 6F       | 	byte	"to"
287c0     00          | 	byte	0
287c1                 | LR__4554
287c1     73 74 65 70 | 	byte	"step"
287c5     00          | 	byte	0
287c6                 | LR__4555
287c6     73 2E       | 	byte	"s."
287c8     00          | 	byte	0
287c9                 | LR__4556
287c9     57 65 20 68 
287cd     61 76 65 20 
287d1     61 20 73 6C 
287d5     6F 77 20 67 
287d9     6F 74 6F 2C 
287dd     20 74 6F 64 
287e1     6F 20 20    | 	byte	"We have a slow goto, todo  "
287e4     00          | 	byte	0
287e5                 | LR__4557
287e5     6E 6F 6E 61 
287e9     6D 65 2E 62 
287ed     61 73       | 	byte	"noname.bas"
287ef     00          | 	byte	0
287f0                 | LR__4558
287f0                 | 	byte	
287f0     00          | 	byte	0
287f1                 | LR__4559
287f1     6E 6F 6E 61 
287f5     6D 65 2E 62 
287f9     61 73       | 	byte	"noname.bas"
287fb     00          | 	byte	0
287fc                 | LR__4560
287fc     2F          | 	byte	"/"
287fd     00          | 	byte	0
287fe                 | LR__4561
287fe                 | 	byte	
287fe     00          | 	byte	0
287ff                 | LR__4562
287ff                 | 	byte	
287ff     00          | 	byte	0
28800                 | LR__4563
28800     6E 6F 6E 61 
28804     6D 65 2E 62 
28808     61 73       | 	byte	"noname.bas"
2880a     00          | 	byte	0
2880b                 | LR__4564
2880b     2F          | 	byte	"/"
2880c     00          | 	byte	0
2880d                 | LR__4565
2880d     53 79 73 74 
28811     65 6D 20 65 
28815     72 72 6F 72 
28819     20          | 	byte	"System error "
2881a     00          | 	byte	0
2881b                 | LR__4566
2881b     3A 20       | 	byte	": "
2881d     00          | 	byte	0
2881e                 | LR__4567
2881e     2F          | 	byte	"/"
2881f     00          | 	byte	0
28820                 | LR__4568
28820     30          | 	byte	"0"
28821     00          | 	byte	0
28822                 | LR__4569
28822     39          | 	byte	"9"
28823     00          | 	byte	0
28824                 | LR__4570
28824                 | 	byte	
28824     00          | 	byte	0
28825                 | LR__4571
28825     53 74 6F 70 
28829     70 65 64 20 
2882d     61 74 20 6C 
28831     69 6E 65 20 | 	byte	"Stopped at line "
28835     00          | 	byte	0
28836                 | LR__4572
28836                 | 	byte	
28836     00          | 	byte	0
28837                 | LR__4573
28837                 | 	byte	
28837     00          | 	byte	0
28838                 | LR__4574
28838     2F 73 64 2F 
2883c     6D 65 64 69 
28840     61 2F 68 2F | 	byte	"/sd/media/h/"
28844     00          | 	byte	0
28845                 | LR__4575
28845     53 79 73 74 
28849     65 6D 20 65 
2884d     72 72 6F 72 
28851     20          | 	byte	"System error "
28852     00          | 	byte	0
28853                 | LR__4576
28853     3A 20       | 	byte	": "
28855     00          | 	byte	0
28856                 | LR__4577
28856                 | 	byte	
28856     00          | 	byte	0
28857                 | LR__4578
28857                 | 	byte	
28857     00          | 	byte	0
28858                 | LR__4579
28858     2F 73 64 2F 
2885c     6D 65 64 69 
28860     61 2F 73 2F | 	byte	"/sd/media/s/"
28864     00          | 	byte	0
28865                 | LR__4580
28865     53 79 73 74 
28869     65 6D 20 65 
2886d     72 72 6F 72 
28871     20          | 	byte	"System error "
28872     00          | 	byte	0
28873                 | LR__4581
28873     3A 20       | 	byte	": "
28875     00          | 	byte	0
28876                 | LR__4582
28876     45 72 72 6F 
2887a     72 20       | 	byte	"Error "
2887c     00          | 	byte	0
2887d                 | LR__4583
2887d     3A 20       | 	byte	": "
2887f     00          | 	byte	0
28880                 | LR__4584
28880                 | 	byte	
28880     00          | 	byte	0
28881                 | LR__4585
28881     72 6E 64 3A 
28885     20          | 	byte	"rnd: "
28886     00          | 	byte	0
28887                 | LR__4586
28887     72 6E 64 3A 
2888b     20          | 	byte	"rnd: "
2888c     00          | 	byte	0
2888d                 | LR__4587
2888d     73 69 6E 3A 
28891     20          | 	byte	"sin: "
28892     00          | 	byte	0
28893                 | LR__4588
28893     63 6F 73 3A 
28897     20          | 	byte	"cos: "
28898     00          | 	byte	0
28899                 | LR__4589
28899     74 61 6E 3A 
2889d     20          | 	byte	"tan: "
2889e     00          | 	byte	0
2889f                 | LR__4590
2889f     61 73 69 6E 
288a3     3A 20       | 	byte	"asin: "
288a5     00          | 	byte	0
288a6                 | LR__4591
288a6     61 63 6F 73 
288aa     3A 20       | 	byte	"acos: "
288ac     00          | 	byte	0
288ad                 | LR__4592
288ad     61 74 6E 3A 
288b1     20          | 	byte	"atn: "
288b2     00          | 	byte	0
288b3                 | LR__4593
288b3     73 71 72 3A 
288b7     20          | 	byte	"sqr: "
288b8     00          | 	byte	0
288b9                 | LR__4594
288b9     73 74 69 63 
288bd     6B 3A 20    | 	byte	"stick: "
288c0     00          | 	byte	0
288c1                 | LR__4595
288c1     73 74 72 69 
288c5     67 3A 20    | 	byte	"strig: "
288c8     00          | 	byte	0
288c9                 | LR__4596
288c9     67 65 74 70 
288cd     69 78 65 6C 
288d1     3A 20       | 	byte	"getpixel: "
288d3     00          | 	byte	0
288d4                 | LR__4597
288d4                 | 	byte	
288d4     00          | 	byte	0
288d5                 | LR__4598
288d5     2F 73 64 2F 
288d9     62 61 73    | 	byte	"/sd/bas"
288dc     00          | 	byte	0
288dd                 | LR__4599
288dd     57 6F 72 6B 
288e1     69 6E 67 20 
288e5     64 69 72 65 
288e9     63 74 6F 72 
288ed     79 3A 20    | 	byte	"Working directory: "
288f0     00          | 	byte	0
288f1                 | LR__4600
288f1     2A          | 	byte	"*"
288f2     00          | 	byte	0
288f3                 | LR__4601
288f3                 | 	byte	
288f3     00          | 	byte	0
288f4                 | LR__4602
288f4     5B 64 69 72 
288f8     5D 20       | 	byte	"[dir] "
288fa     00          | 	byte	0
288fb                 | LR__4603
288fb     2A          | 	byte	"*"
288fc     00          | 	byte	0
288fd                 | LR__4604
288fd                 | 	byte	
288fd     00          | 	byte	0
288fe                 | LR__4605
288fe     2D 2D 2D 2D 
28902     2D 6D 6F 72 
28906     65 2C 20 70 
2890a     72 65 73 73 
2890e     20 61 6E 79 
28912     20 6B 65 79 | 	byte	"-----more, press any key"
28916     00          | 	byte	0
28917                 | LR__4606
28917     20 20 20 20 
      ...             
2892f     20 20 20 20 
28933     20          | 	byte	"                             "
28934     00          | 	byte	0
28935                 | LR__4607
28935     2F          | 	byte	"/"
28936     00          | 	byte	0
28937                 | LR__4608
28937     2F 73 64 2F 
2893b     62 69 6E 2F | 	byte	"/sd/bin/"
2893f     00          | 	byte	0
28940                 | LR__4609
28940     53 79 73 74 
28944     65 6D 20 65 
28948     72 72 6F 72 
2894c     20          | 	byte	"System error "
2894d     00          | 	byte	0
2894e                 | LR__4610
2894e     3A 20       | 	byte	": "
28950     00          | 	byte	0
28951                 | LR__4611
28951                 | 	byte	
28951     00          | 	byte	0
28952                 | LR__4612
28952     45 78 70 65 
28956     63 74 65 64 
2895a     20 6E 75 6D 
2895e     62 65 72 2C 
28962     20 67 6F 74 
28966     20 73 6F 6D 
2896a     65 74 68 69 
2896e     6E 67 20 65 
28972     6C 73 65 2E | 	byte	"Expected number, got something else."
28976     00          | 	byte	0
28977                 | LR__4613
28977     43 61 6E 6E 
2897b     6F 74 20 61 
2897f     64 64 20 61 
28983     20 6E 75 6D 
28987     62 65 72 20 
2898b     74 6F 20 61 
2898f     20 73 74 72 
28993     69 6E 67 2E | 	byte	"Cannot add a number to a string."
28997     00          | 	byte	0
28998                 | LR__4614
28998     43 61 6E 6E 
2899c     6F 74 20 73 
289a0     75 62 73 74 
289a4     72 61 63 74 
289a8     20 73 74 72 
289ac     69 6E 67 73 
289b0     2E          | 	byte	"Cannot substract strings."
289b1     00          | 	byte	0
289b2                 | LR__4615
289b2     55 6E 6B 6E 
289b6     6F 77 6E 20 
289ba     65 72 72 6F 
289be     72 20 77 68 
289c2     69 6C 65 20 
289c6     61 64 64 69 
289ca     6E 67 2E    | 	byte	"Unknown error while adding."
289cd     00          | 	byte	0
289ce                 | LR__4616
289ce     55 6E 6B 6E 
289d2     6F 77 6E 20 
289d6     65 72 72 6F 
289da     72 20 77 68 
289de     69 6C 65 20 
289e2     73 75 62 73 
289e6     74 72 61 63 
289ea     74 69 6E 67 
289ee     2E          | 	byte	"Unknown error while substracting."
289ef     00          | 	byte	0
289f0                 | LR__4617
289f0     43 61 6E 6E 
289f4     6F 74 20 64 
289f8     6F 20 6C 6F 
289fc     67 69 63 20 
28a00     6F 70 65 72 
28a04     61 74 69 6F 
28a08     6E 20 6F 6E 
28a0c     20 73 74 72 
28a10     69 6E 67 20 
28a14     6F 72 20 66 
28a18     6C 6F 61 74 
28a1c     2E          | 	byte	"Cannot do logic operation on string or float."
28a1d     00          | 	byte	0
28a1e                 | LR__4618
28a1e     55 6E 6B 6E 
28a22     6F 77 6E 20 
28a26     65 72 72 6F 
28a2a     72 20 77 68 
28a2e     69 6C 65 20 
28a32     64 6F 69 6E 
28a36     67 20 6C 6F 
28a3a     67 69 63 20 
28a3e     6F 70 65 72 
28a42     61 74 69 6F 
28a46     6E 2E       | 	byte	"Unknown error while doing logic operation."
28a48     00          | 	byte	0
28a49                 | LR__4619
28a49     43 61 6E 6E 
28a4d     6F 74 20 6D 
28a51     75 6C 74 69 
28a55     70 6C 79 20 
28a59     73 74 72 69 
28a5d     6E 67 73 2E | 	byte	"Cannot multiply strings."
28a61     00          | 	byte	0
28a62                 | LR__4620
28a62     55 6E 6B 6E 
28a66     6F 77 6E 20 
28a6a     65 72 72 6F 
28a6e     72 20 77 68 
28a72     69 6C 65 20 
28a76     6D 75 6C 74 
28a7a     69 70 6C 79 
28a7e     69 6E 67 2E | 	byte	"Unknown error while multiplying."
28a82     00          | 	byte	0
28a83                 | LR__4621
28a83     43 61 6E 6E 
28a87     6F 74 20 64 
28a8b     69 76 69 64 
28a8f     65 20 73 74 
28a93     72 69 6E 67 
28a97     73 2E       | 	byte	"Cannot divide strings."
28a99     00          | 	byte	0
28a9a                 | LR__4622
28a9a     55 6E 6B 6E 
28a9e     6F 77 6E 20 
28aa2     65 72 72 6F 
28aa6     72 20 77 68 
28aaa     69 6C 65 20 
28aae     64 69 76 69 
28ab2     64 69 6E 67 
28ab6     2E          | 	byte	"Unknown error while dividing."
28ab7     00          | 	byte	0
28ab8                 | LR__4623
28ab8     43 61 6E 6E 
28abc     6F 74 20 63 
28ac0     6F 6D 70 75 
28ac4     74 65 20 61 
28ac8     20 70 6F 77 
28acc     65 72 20 6F 
28ad0     66 20 61 20 
28ad4     73 74 72 69 
28ad8     6E 67 2E    | 	byte	"Cannot compute a power of a string."
28adb     00          | 	byte	0
28adc                 | LR__4624
28adc     55 6E 6B 6E 
28ae0     6F 77 6E 20 
28ae4     65 72 72 6F 
28ae8     72 20 77 68 
28aec     69 6C 65 20 
28af0     63 6F 6D 70 
28af4     75 74 69 6E 
28af8     67 20 61 20 
28afc     70 6F 77 65 
28b00     72 2E       | 	byte	"Unknown error while computing a power."
28b02     00          | 	byte	0
28b03                 | LR__4625
28b03     52 69 67 68 
28b07     74 20 70 61 
28b0b     72 65 6E 74 
28b0f     68 65 73 69 
28b13     73 20 65 78 
28b17     70 65 63 74 
28b1b     65 64 2E    | 	byte	"Right parenthesis expected."
28b1e     00          | 	byte	0
28b1f                 | LR__4626
28b1f     45 78 70 65 
28b23     63 74 65 64 
28b27     20 73 74 72 
28b2b     69 6E 67 2E | 	byte	"Expected string."
28b2f     00          | 	byte	0
28b30                 | LR__4627
28b30     45 78 70 65 
28b34     63 74 65 64 
28b38     20 66 6C 6F 
28b3c     61 74 2E    | 	byte	"Expected float."
28b3f     00          | 	byte	0
28b40                 | LR__4628
28b40     45 78 70 65 
28b44     63 74 65 64 
28b48     20 75 6E 73 
28b4c     69 67 6E 65 
28b50     64 20 69 6E 
28b54     74 65 67 65 
28b58     72 2E       | 	byte	"Expected unsigned integer."
28b5a     00          | 	byte	0
28b5b                 | LR__4629
28b5b     45 78 70 65 
28b5f     63 74 65 64 
28b63     20 69 6E 74 
28b67     65 67 65 72 
28b6b     2E          | 	byte	"Expected integer."
28b6c     00          | 	byte	0
28b6d                 | LR__4630
28b6d     4E 6F 20 6D 
28b71     6F 72 65 20 
28b75     76 61 72 69 
28b79     61 62 6C 65 
28b7d     20 73 6C 6F 
28b81     74 73 2E    | 	byte	"No more variable slots."
28b84     00          | 	byte	0
28b85                 | LR__4631
28b85     56 61 72 69 
28b89     61 62 6C 65 
28b8d     20 6E 6F 74 
28b91     20 66 6F 75 
28b95     6E 64 2E    | 	byte	"Variable not found."
28b98     00          | 	byte	0
28b99                 | LR__4632
28b99     43 6F 6D 6D 
28b9d     61 20 65 78 
28ba1     70 65 63 74 
28ba5     65 64 2E    | 	byte	"Comma expected."
28ba8     00          | 	byte	0
28ba9                 | LR__4633
28ba9     43 6F 6D 6D 
28bad     61 20 6F 72 
28bb1     20 73 65 6D 
28bb5     69 63 6F 6C 
28bb9     6F 6E 20 65 
28bbd     78 70 65 63 
28bc1     74 65 64 2E | 	byte	"Comma or semicolon expected."
28bc5     00          | 	byte	0
28bc6                 | LR__4634
28bc6     55 6E 6B 6E 
28bca     6F 77 6E 20 
28bce     63 6F 6D 6D 
28bd2     61 6E 64 2E | 	byte	"Unknown command."
28bd6     00          | 	byte	0
28bd7                 | LR__4635
28bd7     53 74 61 63 
28bdb     6B 20 75 6E 
28bdf     64 65 72 66 
28be3     6C 6F 77 2E | 	byte	"Stack underflow."
28be7     00          | 	byte	0
28be8                 | LR__4636
28be8     43 61 6E 6E 
28bec     6F 74 20 65 
28bf0     78 65 63 75 
28bf4     74 65 20 67 
28bf8     6F 74 6F 20 
28bfc     69 6E 20 74 
28c00     68 65 20 69 
28c04     6D 6D 65 64 
28c08     69 61 74 65 
28c0c     20 6D 6F 64 
28c10     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
28c12     00          | 	byte	0
28c13                 | LR__4637
28c13     43 61 6E 6E 
28c17     6F 74 20 6C 
28c1b     6F 61 64 20 
28c1f     66 72 6F 6D 
28c23     20 74 68 69 
28c27     73 20 66 69 
28c2b     6C 65 2E    | 	byte	"Cannot load from this file."
28c2e     00          | 	byte	0
28c2f                 | LR__4638
28c2f     54 68 65 20 
28c33     70 72 6F 67 
28c37     72 61 6D 20 
28c3b     69 73 20 65 
28c3f     6D 70 74 79 
28c43     2E          | 	byte	"The program is empty."
28c44     00          | 	byte	0
28c45                 | LR__4639
28c45     49 66 20 61 
28c49     66 74 65 72 
28c4d     20 69 66 2E | 	byte	"If after if."
28c51     00          | 	byte	0
28c52                 | LR__4640
28c52     45 6D 70 74 
28c56     79 20 65 78 
28c5a     70 72 65 73 
28c5e     73 69 6F 6E 
28c62     2E          | 	byte	"Empty expression."
28c63     00          | 	byte	0
28c64                 | LR__4641
28c64     53 74 72 69 
28c68     6E 67 20 65 
28c6c     78 70 65 63 
28c70     74 65 64 2E | 	byte	"String expected."
28c74     00          | 	byte	0
28c75                 | LR__4642
28c75     49 6E 74 65 
28c79     72 70 72 65 
28c7d     74 65 72 20 
28c81     69 6E 74 65 
28c85     72 6E 61 6C 
28c89     20 65 72 72 
28c8d     6F 72 2E    | 	byte	"Interpreter internal error."
28c90     00          | 	byte	0
28c91                 | LR__4643
28c91     45 78 70 65 
28c95     63 74 65 64 
28c99     20 61 73 73 
28c9d     69 67 6E 2E | 	byte	"Expected assign."
28ca1     00          | 	byte	0
28ca2                 | LR__4644
28ca2     45 78 70 65 
28ca6     63 74 65 64 
28caa     20 27 74 6F 
28cae     27 2E       | 	byte	"Expected 'to'."
28cb0     00          | 	byte	0
28cb1                 | LR__4645
28cb1     45 78 70 65 
28cb5     63 74 65 64 
28cb9     20 69 6E 74 
28cbd     65 67 65 72 
28cc1     20 76 61 72 
28cc5     69 61 62 6C 
28cc9     65 2E       | 	byte	"Expected integer variable."
28ccb     00          | 	byte	0
28ccc                 | LR__4646
28ccc     55 6E 69 6E 
28cd0     69 74 69 61 
28cd4     6C 69 7A 65 
28cd8     64 20 76 61 
28cdc     72 69 61 62 
28ce0     6C 65 20 69 
28ce4     6E 20 27 6E 
28ce8     65 78 74 27 
28cec     2C 20 75 73 
28cf0     65 20 27 66 
28cf4     6F 72 27 20 
28cf8     62 65 66 6F 
28cfc     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
28cff     00          | 	byte	0
28d00                 | LR__4647
28d00     4E 6F 20 6D 
28d04     6F 72 65 20 
28d08     73 6C 6F 74 
28d0c     73 20 66 6F 
28d10     72 20 27 66 
28d14     6F 72 27 2E | 	byte	"No more slots for 'for'."
28d18     00          | 	byte	0
28d19                 | LR__4648
28d19     27 4E 65 78 
28d1d     74 27 20 64 
28d21     6F 65 73 6E 
28d25     27 74 20 6D 
28d29     61 74 63 68 
28d2d     20 27 66 6F 
28d31     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
28d34     00          | 	byte	0
28d35                 | LR__4649
28d35     27 47 6F 74 
28d39     6F 27 20 74 
28d3d     61 72 67 65 
28d41     74 20 6C 69 
28d45     6E 65 20 6E 
28d49     6F 74 20 66 
28d4d     6F 75 6E 64 
28d51     2E          | 	byte	"'Goto' target line not found."
28d52     00          | 	byte	0
28d53                 | LR__4650
28d53     42 61 64 20 
28d57     6E 75 6D 62 
28d5b     65 72 20 6F 
28d5f     66 20 70 61 
28d63     72 61 6D 65 
28d67     74 65 72 73 | 	byte	"Bad number of parameters"
28d6b     00          | 	byte	0
28d6c                 | LR__4651
28d6c     46 75 6E 63 
28d70     74 69 6F 6E 
28d74     20 75 6E 64 
28d78     65 66 69 6E 
28d7c     65 64 20 66 
28d80     6F 72 20 73 
28d84     74 72 69 6E 
28d88     67 73       | 	byte	"Function undefined for strings"
28d8a     00          | 	byte	0
28d8b                 | LR__4652
28d8b     42 61 64 20 
28d8f     70 61 72 61 
28d93     6D 65 74 65 
28d97     72 2E       | 	byte	"Bad parameter."
28d99     00          | 	byte	0
28d9a                 | LR__4653
28d9a     43 61 6E 6E 
28d9e     6F 74 20 64 
28da2     65 63 6C 61 
28da6     72 65 20 61 
28daa     6E 20 61 72 
28dae     72 61 79 3A 
28db2     20 74 68 65 
28db6     20 76 61 72 
28dba     69 61 62 6C 
28dbe     65 20 65 78 
28dc2     69 73 74 73 
28dc6     2E          | 	byte	"Cannot declare an array: the variable exists."
28dc7     00          | 	byte	0
28dc8                 | LR__4654
28dc8     45 78 70 65 
28dcc     63 74 65 64 
28dd0     20 27 28 27 
28dd4     2E          | 	byte	"Expected '('."
28dd5     00          | 	byte	0
28dd6                 | LR__4655
28dd6     45 78 70 65 
28dda     63 74 65 64 
28dde     20 27 29 27 
28de2     20 6F 72 20 
28de6     27 2C 27 2E | 	byte	"Expected ')' or ','."
28dea     00          | 	byte	0
28deb                 | LR__4656
28deb     4E 6F 20 6D 
28def     6F 72 65 20 
28df3     74 68 61 6E 
28df7     20 33 20 64 
28dfb     69 6D 65 6E 
28dff     73 69 6F 6E 
28e03     73 20 73 75 
28e07     70 70 6F 72 
28e0b     74 65 64    | 	byte	"No more than 3 dimensions supported"
28e0e     00          | 	byte	0
28e0f                 | LR__4657
28e0f     56 61 72 69 
28e13     61 62 6C 65 
28e17     20 6E 61 6D 
28e1b     65 20 65 78 
28e1f     70 65 63 74 
28e23     65 64       | 	byte	"Variable name expected"
28e25     00          | 	byte	0
28e26                 | LR__4658
28e26     54 79 70 65 
28e2a     20 6E 61 6D 
28e2e     65 20 65 78 
28e32     70 65 63 74 
28e36     65 64       | 	byte	"Type name expected"
28e38     00          | 	byte	0
28e39                 | LR__4659
28e39     54 79 70 65 
28e3d     20 6E 6F 74 
28e41     20 73 75 70 
28e45     70 6F 72 74 
28e49     65 64 20 79 
28e4d     65 74       | 	byte	"Type not supported yet"
28e4f     00          | 	byte	0
28e50                 | LR__4660
28e50     41 72 72 61 
28e54     79 20 69 6E 
28e58     64 65 78 20 
28e5c     6F 75 74 20 
28e60     6F 66 20 62 
28e64     6F 75 6E 64 | 	byte	"Array index out of bound"
28e68     00          | 	byte	0
28e69                 | LR__4661
28e69     45 72 72 6F 
28e6d     72 20       | 	byte	"Error "
28e6f     00          | 	byte	0
28e70                 | LR__4662
28e70     3A 20       | 	byte	": "
28e72     00          | 	byte	0
28e73                 | LR__4663
28e73     2F 73 64    | 	byte	"/sd"
28e76     00          | 	byte	0
28e77                 | LR__4664
28e77     2F 73 64 2F 
28e7b     62 61 73    | 	byte	"/sd/bas"
28e7e     00          | 	byte	0
28e7f                 | LR__4665
28e7f     2F 73 64 2F 
28e83     62 61 73    | 	byte	"/sd/bas"
28e86     00          | 	byte	0
28e87                 | LR__4666
28e87     20 42 41 53 
28e8b     49 43 20 62 
28e8f     79 74 65 73 
28e93     20 66 72 65 
28e97     65          | 	byte	" BASIC bytes free"
28e98     00          | 	byte	0
28e99                 | LR__4667
28e99     52 65 61 64 
28e9d     79          | 	byte	"Ready"
28e9e     00          | 	byte	0
28e9f                 | LR__4668
28e9f     20          | 	byte	" "
28ea0     00          | 	byte	0
28ea1                 | LR__4669
28ea1     20          | 	byte	" "
28ea2     00          | 	byte	0
28ea3                 | LR__4670
28ea3                 | 	byte	
28ea3     00          | 	byte	0
28ea4                 | LR__4671
28ea4                 | 	byte	
28ea4     00          | 	byte	0
28ea5     00 00 00    | 	alignl
28ea8                 | _dat_
28ea8     00 00 00 00 
28eac     00 00 00 00 
28eb0     00 00 00 00 
28eb4     00 00 00 00 | 	byte	$00[16]
28eb8     61 41 17 0E 
28ebc     62 42 00 00 
28ec0     63 43 19 10 
28ec4     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
28ec8     65 45 18 0F 
28ecc     66 46 00 00 
28ed0     67 47 00 00 
28ed4     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
28ed8     69 49 00 00 
28edc     6A 4A 00 00 
28ee0     6B 4B 00 00 
28ee4     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
28ee8     6D 4D 00 00 
28eec     6E 4E 1A 11 
28ef0     6F 4F 1E 15 
28ef4     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
28ef8     71 51 00 00 
28efc     72 52 00 00 
28f00     73 53 1B 12 
28f04     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
28f08     75 55 00 00 
28f0c     76 56 00 00 
28f10     77 57 00 00 
28f14     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
28f18     79 59 00 00 
28f1c     7A 5A 1D 14 
28f20     31 21 04 00 
28f24     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
28f28     33 23 06 00 
28f2c     34 24 07 00 
28f30     35 25 08 00 
28f34     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
28f38     37 26 0A 00 
28f3c     38 2A 0B 00 
28f40     39 28 0C 00 
28f44     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
28f48     8D 8D 00 00 
28f4c     9B 9B 00 00 
28f50     88 88 00 00 
28f54     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
28f58     20 20 00 00 
28f5c     2D 5F 00 00 
28f60     3D 2B 00 00 
28f64     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
28f68     5D 7D 00 00 
28f6c     5C 7C 00 00 
28f70     23 7E 00 00 
28f74     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
28f78     27 22 00 00 
28f7c     60 7E 03 00 
28f80     2C 3C 00 00 
28f84     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
28f88     2F 3F 00 00 
28f8c     B9 B9 00 00 
28f90     BA 00 00 00 
28f94     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
28f98     BC 00 00 00 
28f9c     BD 00 00 00 
28fa0     BE 00 00 00 
28fa4     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
28fa8     C0 00 00 00 
28fac     C1 00 00 00 
28fb0     C2 00 00 00 
28fb4     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
28fb8     C4 00 00 00 
28fbc     C5 00 00 00 
28fc0     C6 00 00 00 
28fc4     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
28fc8     C8 00 00 00 
28fcc     C9 00 00 00 
28fd0     CA 00 00 00 
28fd4     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
28fd8     7F 7F 00 00 
28fdc     CC 00 00 00 
28fe0     CD 00 00 00 
28fe4     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
28fe8     CF 00 00 00 
28fec     D0 00 00 00 
28ff0     D1 00 00 00 
28ff4     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
28ff8     2F 2F 00 00 
28ffc     2A 2A 00 00 
29000     2D 2D 00 00 
29004     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
29008     8D 8D 00 00 
2900c     31 31 00 00 
29010     32 32 00 00 
29014     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
29018     34 34 00 00 
2901c     35 35 00 00 
29020     36 36 00 00 
29024     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
29028     38 38 00 00 
2902c     39 39 00 00 
29030     30 30 00 00 
29034     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
29038     5C 7C 00 00 
2903c     00 00 00 00 
29040     00 00 00 00 
29044     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
29048     00 00 00 00 
      ...             
290a0     00 00 00 00 
290a4     00 00 00 00 | 	byte	$00[96]
290a8     2B 00 A6 F2 
290ac     24 A7 09 80 
290b0     5B 88 4D 89 
290b4     80 88 A5 88 | atari_spl file "atari.spl"
290b8     6D 88 B8 88 
290bc     80 88 CB 88 
290c0     92 88 A5 88 
290c4     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
290c8     A5 88 CA 88 
290cc     A6 88 DD 88 
290d0     B8 88 AB 89 
290d4     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
290d8     C8 AD C6 F1 
290dc     91 06 B6 FF 
290e0     13 00 4A 00 
290e4     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
290e8     5D 00 5E 00 
290ec     5D 00 5E 00 
290f0     5E 00 5D 00 
290f4     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
290f8     38 00 83 00 
290fc     25 00 83 00 
29100     C3 FE D1 04 
29104     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
29108     48 88 38 85 
2910c     41 8A CB 88 
29110     28 89 B8 88 
29114     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
29118     15 89 03 89 
2911c     02 89 15 89 
29120     16 89 15 89 
29124     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
29128     15 89 3A 89 
2912c     72 89 E3 89 
29130     52 83 AD 97 
29134     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
29138     0C 02 B6 FF 
2913c     E1 00 A8 00 
29140     F3 00 A8 00 
29144     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
29148     CE 00 CD 00 
2914c     CD 00 BA 00 
29150     E1 00 BB 00 
29154     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
29158     DF 00 C9 FF 
2915c     E6 01 B6 06 
29160     EE DD 8D 98 
29164     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
29168     97 89 73 89 
2916c     3B 89 60 89 
29170     60 89 60 89 
29174     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
29178     73 89 72 89 
2917c     85 89 73 89 
29180     AA 89 60 89 
29184     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
29188     E8 8A 18 86 
2918c     92 88 A5 C2 
29190     E0 00 C3 05 
29194     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
29198     F2 00 64 01 
2919c     06 01 3E 01 
291a0     2B 01 2B 01 
291a4     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
291a8     2B 01 2A 01 
291ac     2B 01 2B 01 
291b0     2B 01 18 01 
291b4     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
291b8     39 07 61 F3 
291bc     C0 AF 37 85 
291c0     0F 88 8B 8A 
291c4     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
291c8     AB 89 D0 89 
291cc     AB 89 D0 89 
291d0     D0 89 CF 89 
291d4     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
291d8     D0 89 F5 89 
291dc     BD 89 08 8A 
291e0     CF 89 E8 8A 
291e4     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
291e8     53 B3 0D F8 
291ec     F4 07 38 00 
291f0     63 01 63 01 
291f4     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
291f8     88 01 88 01 
291fc     76 01 88 01 
29200     88 01 89 01 
29204     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
29208     75 01 AE 01 
2920c     76 01 88 01 
29210     4A 00 46 06 
29214     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
29218     08 8A 9A 86 
2921c     33 8B 08 8A 
29220     2D 8A F5 89 
29224     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
29228     2D 8A 2D 8A 
2922c     2E 8A 1B 8A 
29230     40 8A 2D 8A 
29234     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
29238     2E 8A 79 8A 
2923c     66 8A C8 8B 
29240     72 82 2B 97 
29244     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
29248     1D 02 05 01 
2924c     F8 01 C0 01 
29250     0B 02 C0 01 
29254     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
29258     F9 01 D3 01 
2925c     F8 01 D3 01 
29260     F8 01 D2 01 
29264     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
29268     E6 01 2B 01 
2926c     8E 02 5F 07 
29270     F7 E2 ED 9C 
29274     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
29278     E8 8A 78 8A 
2927c     78 8A 65 8A 
29280     8B 8A 78 8A 
29284     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
29288     8B 8A 9D 8A 
2928c     9D 8A 8B 8A 
29290     C2 8A 78 8A 
29294     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
29298     70 8C 18 86 
2929c     8B 8A 23 C9 
292a0     CB 03 C4 05 
292a4     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
292a8     0B 02 7B 02 
292ac     1E 02 55 02 
292b0     30 02 43 02 
292b4     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
292b8     43 02 44 02 
292bc     43 02 30 02 
292c0     68 02 31 02 
292c4     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
292c8     07 08 3F F7 
292cc     73 B2 13 85 
292d0     15 89 ED 8B 
292d4     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
292d8     B0 8A FB 8A 
292dc     D5 8A FA 8A 
292e0     E8 8A FB 8A 
292e4     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
292e8     E8 8A 21 8B 
292ec     E7 8A 33 8B 
292f0     E8 8A 26 8C 
292f4     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
292f8     8D B0 27 F6 
292fc     9C 08 AD 01 
29300     7B 02 8D 02 
29304     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
29308     A1 02 A0 02 
2930c     A1 02 A0 02 
29310     A0 02 A0 02 
29314     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
29318     7B 02 D8 02 
2931c     7B 02 C6 02 
29320     3E 01 C3 05 
29324     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
29328     00 8C 2A 86 
2932c     E0 8C FA 8A 
29330     6A 8B FB 8A 
29334     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
29338     45 8B 45 8B 
2933c     45 8B 6B 8B 
29340     46 8B 59 8B 
29344     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
29348     6B 8B 6B 8B 
2934c     6B 8B 6B 8B 
29350     7D 8B 7D 8B 
29354     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
29358     90 8B 91 8B 
2935c     90 8B 90 8B 
29360     A3 8B A3 8B 
29364     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
29368     B5 8B B6 8B 
2936c     B5 8B B5 8B 
29370     B6 8B C8 8B 
29374     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
29378     C8 8B DA 8B 
2937c     DB 8B DB 8B 
29380     DB 8B DC 8B 
29384     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
29388     EE 8B EE 8B 
2938c     00 8C 01 8C 
29390     00 8C 01 8C 
29394     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
29398     12 8C 13 8C 
2939c     13 8C 26 8C 
293a0     26 8C 26 8C 
293a4     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
293a8     38 8C 38 8C 
293ac     38 8C 38 8C 
293b0     4B 8C 4B 8C 
293b4     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
293b8     5E 8C 5E 8C 
293bc     5E 8C 5E 8C 
293c0     70 8C 70 8C 
293c4     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
293c8     70 8C 83 8C 
293cc     83 8C 83 8C 
293d0     83 8C 96 8C 
293d4     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
293d8     95 8C A9 8C 
293dc     A9 8C A8 8C 
293e0     A8 8C A8 8C 
293e4     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
293e8     BB 8C BB 8C 
293ec     BB 8C CE 8C 
293f0     CE 8C CE 8C 
293f4     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
293f8     E0 8C E1 8C 
293fc     E1 8C E0 8C 
29400     F4 8C F2 8C 
29404     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
29408     05 8D 05 8D 
2940c     06 8D 06 8D 
29410     19 8D 19 8D 
29414     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
29418     18 8D 2B 8D 
2941c     2B 8D 2B 8D 
29420     2A 8D 3E 8D 
29424     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
29428     3E 8D 51 8D 
2942c     50 8D 50 8D 
29430     50 8D 51 8D 
29434     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
29438     63 8D 64 8D 
2943c     76 8D 75 8D 
29440     75 8D 76 8D 
29444     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
29448     88 8D 88 8D 
2944c     89 8D 9B 8D 
29450     9A 8D 9B 8D 
29454     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
29458     AD 8D AE 8D 
2945c     AD 8D AE 8D 
29460     C1 8D C1 8D 
29464     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
29468     D3 8D D3 8D 
2946c     D3 8D D3 8D 
29470     D3 8D E6 8D 
29474     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
29478     E6 8D E6 8D 
2947c     F9 8D F9 8D 
29480     F9 8D F8 8D 
29484     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
29488     0B 8E 0B 8E 
2948c     1D 8E 1D 8E 
29490     1E 8E 1E 8E 
29494     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
29498     31 8E 31 8E 
2949c     31 8E 42 8E 
294a0     43 8E 43 8E 
294a4     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
294a8     56 8E 56 8E 
294ac     55 8E 56 8E 
294b0     68 8E 69 8E 
294b4     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
294b8     69 8E 7B 8E 
294bc     7C 8E 7B 8E 
294c0     7B 8E 8D 8E 
294c4     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
294c8     8D 8E A1 8E 
294cc     A0 8E A1 8E 
294d0     A1 8E A0 8E 
294d4     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
294d8     B3 8E B3 8E 
294dc     C6 8E C5 8E 
294e0     C6 8E C6 8E 
294e4     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
294e8     D8 8E D9 8E 
294ec     D8 8E EC 8E 
294f0     EB 8E EC 8E 
294f4     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
294f8     FE 8E FE 8E 
294fc     FE 8E FE 8E 
29500     10 8F 10 8F 
29504     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
29508     11 8F 23 8F 
2950c     24 8F 23 8F 
29510     24 8F 37 8F 
29514     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
29518     36 8F 36 8F 
2951c     48 8F 49 8F 
29520     49 8F 49 8F 
29524     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
29528     5B 8F 5C 8F 
2952c     5B 8F 6E 8F 
29530     6E 8F 6E 8F 
29534     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
29538     81 8F 81 8F 
2953c     81 8F 81 8F 
29540     93 8F 93 8F 
29544     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
29548     93 8F A6 8F 
2954c     A6 8F A6 8F 
29550     A6 8F B9 8F 
29554     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
29558     B9 8F B9 8F 
2955c     CC 8F CB 8F 
29560     CB 8F CC 8F 
29564     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
29568     DF 8F DE 8F 
2956c     DE 8F F1 8F 
29570     F1 8F F1 8F 
29574     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
29578     03 90 04 90 
2957c     04 90 04 90 
29580     16 90 17 90 
29584     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
29588     29 90 28 90 
2958c     29 90 28 90 
29590     29 90 3C 90 
29594     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
29598     3C 90 4F 90 
2959c     4E 90 4E 90 
295a0     4E 90 4E 90 
295a4     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
295a8     61 90 61 90 
295ac     73 90 74 90 
295b0     74 90 74 90 
295b4     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
295b8     87 90 86 90 
295bc     87 90 86 90 
295c0     99 90 99 90 
295c4     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
295c8     AB 90 AB 90 
295cc     AC 90 AB 90 
295d0     AB 90 BF 90 
295d4     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
295d8     BE 90 D1 90 
295dc     D0 90 D1 90 
295e0     D1 90 D1 90 
295e4     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
295e8     E3 90 E4 90 
295ec     F6 90 F6 90 
295f0     F6 90 F6 90 
295f4     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
295f8     09 91 0A 91 
295fc     0A 91 1C 91 
29600     1C 91 1C 91 
29604     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
29608     2F 91 2E 91 
2960c     2F 91 2F 91 
29610     2E 91 41 91 
29614     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
29618     41 91 53 91 
2961c     54 91 54 91 
29620     53 91 54 91 
29624     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
29628     67 91 67 91 
2962c     79 91 7A 91 
29630     79 91 78 91 
29634     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
29638     8C 91 8B 91 
2963c     8C 91 8C 91 
29640     9E 91 9E 91 
29644     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
29648     B1 91 B1 91 
2964c     B2 91 B1 91 
29650     B1 91 C4 91 
29654     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
29658     C4 91 D6 91 
2965c     D7 91 D7 91 
29660     D7 91 D6 91 
29664     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
29668     EA 91 EA 91 
2966c     EA 91 FC 91 
29670     FC 91 FB 91 
29674     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
29678     0E 92 0F 92 
2967c     0F 92 0E 92 
29680     21 92 21 92 
29684     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
29688     21 92 34 92 
2968c     33 92 34 92 
29690     34 92 47 92 
29694     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
29698     46 92 47 92 
2969c     59 92 59 92 
296a0     59 92 59 92 
296a4     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
296a8     6C 92 6C 92 
296ac     6B 92 7E 92 
296b0     7E 92 7E 92 
296b4     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
296b8     92 92 91 92 
296bc     91 92 90 92 
296c0     91 92 A4 92 
296c4     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
296c8     A3 92 B6 92 
296cc     B6 92 B7 92 
296d0     B7 92 B6 92 
296d4     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
296d8     CA 92 C9 92 
296dc     CA 92 DC 92 
296e0     DC 92 DC 92 
296e4     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
296e8     EF 92 EF 92 
296ec     EF 92 EF 92 
296f0     01 93 01 93 
296f4     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
296f8     15 93 14 93 
296fc     14 93 14 93 
29700     14 93 27 93 
29704     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
29708     27 93 39 93 
2970c     3A 93 39 93 
29710     39 93 39 93 
29714     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
29718     4B 93 4C 93 
2971c     5F 93 5F 93 
29720     5F 93 5E 93 
29724     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
29728     5F 93 84 93 
2972c     4C 93 96 93 
29730     5F 93 AE 94 
29734     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
29738     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
2973c     7A D7 00 80 
29740     87 8A 48 8F 
29744     EC 8C 76 8D 
29748     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2974c     3C 8D 82 8D 
29750     42 8D 88 8D 
29754     8C 8D 8E 8D 
29758     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2975c     97 8D DE 8D 
29760     E1 8D F1 8E 
29764     D8 8C A3 83 
29768     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2976c     65 71 C9 65 
29770     FC 64 C4 65 
29774     C1 65 BF 65 
29778     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2977c     B6 65 B4 65 
29780     B2 65 AE 65 
29784     AC 65 ED 65 
29788     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2978c     5E 65 25 66 
29790     FA 62 23 6B 
29794     B5 6C 61 0A 
29798     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2979c     5D 90 BE 8D 
297a0     47 8E C3 8D 
297a4     09 8E C9 8D 
297a8     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
297ac     15 8E 19 8E 
297b0     1B 8E 62 8E 
297b4     64 8E 68 8E 
297b8     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
297bc     B5 8E 4C 90 
297c0     FA 84 3C 9D 
297c4     98 13 79 6D 
297c8     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
297cc     D9 66 50 66 
297d0     D4 66 4B 66 
297d4     8C 66 46 66 
297d8     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
297dc     81 66 3A 66 
297e0     7C 66 36 66 
297e4     76 66 30 66 
297e8     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
297ec     6B 66 88 72 
297f0     BF 37 E7 B7 
297f4     75 83 8B 8E 
297f8     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
297fc     94 8E 96 8E 
29800     DD 8E 9C 8E 
29804     E2 8E A2 8E 
29808     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2980c     EE 8E AE 8E 
29810     38 8F B5 8E 
29814     3F 8F FD 8E 
29818     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2981c     A5 87 1E E3 
29820     6D 5D FA 71 
29824     41 64 25 67 
29828     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2982c     D9 66 1A 67 
29830     18 67 15 67 
29834     12 67 0F 67 
29838     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2983c     07 67 C0 66 
29840     01 67 BC 66 
29844     B8 66 DE 64 
29848     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2984c     43 E5 1F 8B 
29850     14 8A F1 90 
29854     1C 8F 63 8F 
29858     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2985c     29 8F 6E 8F 
29860     72 8F 75 8F 
29864     34 8F BE 8F 
29868     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2986c     84 8F 87 8F 
29870     CC 8F 56 90 
29874     67 91 49 80 
29878     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2987c     46 77 A6 66 
29880     E8 66 B0 67 
29884     AD 67 ED 67 
29888     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2988c     A2 67 E3 67 
29890     9D 67 9A 67 
29894     98 67 94 67 
29898     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2989c     49 67 CD 67 
298a0     28 65 5F 6E 
298a4     82 67 3A 01 
298a8     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
298ac     C2 91 A9 8F 
298b0     EF 8F AE 8F 
298b4     F4 8F B5 8F 
298b8     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
298bc     01 90 03 90 
298c0     07 90 09 90 
298c4     0C 90 53 90 
298c8     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
298cc     18 90 44 93 
298d0     85 84 D6 9D 
298d4     87 1F 2F 75 
298d8     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
298dc     C4 68 F6 67 
298e0     BE 68 F1 67 
298e4     76 68 2E 68 
298e8     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
298ec     27 68 24 68 
298f0     64 68 1E 68 
298f4     5F 68 19 68 
298f8     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
298fc     DC 68 56 72 
29900     7E 36 C2 B8 
29904     D7 84 73 90 
29908     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2990c     7B 90 7F 90 
29910     82 90 84 90 
29914     CB 90 8B 90 
29918     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2991c     D7 90 96 90 
29920     20 91 59 90 
29924     25 91 A2 90 
29928     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2992c     D0 89 40 EE 
29930     12 64 C4 71 
29934     29 66 0C 69 
29938     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2993c     C0 68 02 69 
29940     FE 68 FB 68 
29944     F9 68 F6 68 
29948     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2994c     EE 68 A8 68 
29950     2C 69 5F 68 
29954     E2 68 81 66 
29958     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2995c     1E EB A6 8A 
29960     73 8B 5E 93 
29964     7B 90 48 91 
29968     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2996c     0D 91 11 91 
29970     14 91 16 91 
29974     5C 91 1C 91 
29978     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2997c     68 91 AF 91 
29980     2A 91 B5 91 
29984     75 91 1A 94 
29988     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2998c     70 0E CB 6C 
29990     5D 6E C4 67 
29994     99 69 54 69 
29998     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2999c     D2 69 49 69 
299a0     89 69 86 69 
299a4     40 69 C4 69 
299a8     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
299ac     35 69 76 69 
299b0     58 67 EB 6D 
299b4     E9 6D 89 0F 
299b8     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
299bc     33 94 94 91 
299c0     D9 91 56 91 
299c4     E0 91 9F 91 
299c8     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
299cc     EC 91 EE 91 
299d0     F1 91 F4 91 
299d4     F7 91 3D 92 
299d8     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
299dc     46 92 21 94 
299e0     11 89 A4 9D 
299e4     FD 0E 8F 6C 
299e8     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
299ec     28 6A E1 69 
299f0     65 6A 1F 6A 
299f4     5F 6A 1A 6A 
299f8     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
299fc     54 6A 0F 6A 
29a00     4F 6A 09 6A 
29a04     06 6A 03 6A 
29a08     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
29a0c     23 68 69 77 
29a10     3A 4D 38 CA 
29a14     38 86 4E 91 
29a18     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
29a1c     64 92 24 92 
29a20     6A 92 2A 92 
29a24     70 92 30 92 
29a28     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
29a2c     7B 92 7E 92 
29a30     C5 92 84 92 
29a34     CB 92 8A 92 
29a38     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
29a3c     4D 8D F9 E2 
29a40     97 59 FE 74 
29a44     DB 68 6D 6A 
29a48     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
29a4c     A8 6A A5 6A 
29a50     A3 6A 9F 6A 
29a54     9D 6A 9B 6A 
29a58     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
29a5c     D6 6A 8F 6A 
29a60     CF 6A 46 6A 
29a64     CA 6A E1 67 
29a68     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
29a6c     D3 F7 15 92 
29a70     90 8C BF 94 
29a74     A6 92 EB 92 
29a78     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
29a7c     B1 92 F7 92 
29a80     FA 92 FD 92 
29a84     00 93 02 93 
29a88     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
29a8c     4F 93 52 93 
29a90     54 93 22 94 
29a94     5A 93 8F 88 
29a98     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
29a9c     1C 77 07 6C 
29aa0     E8 69 7A 6B 
29aa4     34 6B 75 6B 
29aa8     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
29aac     29 6B 26 6B 
29ab0     24 6B 21 6B 
29ab4     1D 6B 5E 6B 
29ab8     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
29abc     12 6B 52 6B 
29ac0     34 69 34 6E 
29ac4     BA 73 A4 24 
29ac8     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
29acc     7A 94 B3 93 
29ad0     72 93 31 93 
29ad4     78 93 7A 93 
29ad8     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
29adc     83 93 86 93 
29ae0     89 93 D0 93 
29ae4     D2 93 D5 93 
29ae8     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
29aec     DD 93 40 96 
29af0     30 8B 99 9C 
29af4     52 10 94 71 
29af8     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
29afc     46 6C 79 6B 
29b00     40 6C B7 6B 
29b04     F7 6B B1 6B 
29b08     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
29b0c     EC 6B A5 6B 
29b10     A2 6B 9F 6B 
29b14     9D 6B 9A 6B 
29b18     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
29b1c     C8 6A E4 76 
29b20     20 4B F9 CE 
29b24     2E 8A 1A 92 
29b28     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
29b2c     FB 93 BA 93 
29b30     01 94 03 94 
29b34     4A 94 09 94 
29b38     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
29b3c     55 94 14 94 
29b40     9E 94 1A 94 
29b44     61 94 20 94 
29b48     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
29b4c     3E 87 E5 CD 
29b50     5F 50 6C 78 
29b54     B5 6A 04 6C 
29b58     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
29b5c     83 6C 7F 6C 
29b60     7C 6C 36 6C 
29b64     76 6C 74 6C 
29b68     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
29b6c     6B 6C 25 6C 
29b70     66 6C 1F 6C 
29b74     1D 6C 41 6A 
29b78     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
29b7c     BA FA FC 94 
29b80     5B 8D 97 96 
29b84     3B 94 C5 94 
29b88     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
29b8c     89 94 8C 94 
29b90     8F 94 92 94 
29b94     94 94 DB 94 
29b98     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
29b9c     E4 94 E7 94 
29ba0     2D 95 74 95 
29ba4     C8 96 15 89 
29ba8     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
29bac     CB 75 31 6F 
29bb0     7E 6B 10 6D 
29bb4     C9 6C 0A 6D 
29bb8     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
29bbc     BD 6C FF 6C 
29bc0     FB 6C F9 6C 
29bc4     B2 6C F3 6C 
29bc8     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
29bcc     A7 6C E8 6C 
29bd0     0D 6B 85 6F 
29bd4     C7 74 10 28 
29bd8     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
29bdc     96 96 47 95 
29be0     06 95 0A 95 
29be4     0C 95 0F 95 
29be8     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
29bec     17 95 5E 95 
29bf0     61 95 63 95 
29bf4     22 95 AC 95 
29bf8     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
29bfc     72 95 17 98 
29c00     59 8E 01 96 
29c04     CF FC 5A 68 
29c08     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
29c0c     96 6D 50 6D 
29c10     D5 6D 4A 6D 
29c14     8C 6D 89 6D 
29c18     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
29c1c     80 6D 3A 6D 
29c20     7A 6D 77 6D 
29c24     75 6D 71 6D 
29c28     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
29c2c     18 6C BC 78 
29c30     9A 4F 7E CF 
29c34     1F 89 F1 93 
29c38     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
29c3c     D2 95 4E 95 
29c40     D7 95 53 95 
29c44     DD 95 E0 95 
29c48     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
29c4c     A5 95 EB 95 
29c50     EE 95 F0 95 
29c54     37 96 B3 95 
29c58     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
29c5c     1A 98 D5 8D 
29c60     C5 9F CD 0F 
29c64     0F 71 F3 73 
29c68     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
29c6c     D9 6D 5E 6E 
29c70     D3 6D 58 6E 
29c74     12 6E 0F 6E 
29c78     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
29c7c     49 6E BF 6D 
29c80     87 6E 76 6D 
29c84     81 6E 11 6B 
29c88     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
29c8c     3F 09 44 95 
29c90     E5 8D 3F 99 
29c94     D4 95 A2 96 
29c98     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
29c9c     23 96 69 96 
29ca0     6B 96 6E 96 
29ca4     71 96 74 96 
29ca8     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
29cac     BF 96 3C 96 
29cb0     C6 96 C8 96 
29cb4     A3 98 51 8D 
29cb8     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
29cbc     CF 75 29 73 
29cc0     90 6C EC 6E 
29cc4     62 6E E7 6E 
29cc8     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
29ccc     9A 6E 98 6E 
29cd0     95 6E 91 6E 
29cd4     8E 6E CF 6E 
29cd8     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
29cdc     40 6E C3 6E 
29ce0     E8 6C 45 6F 
29ce4     A5 7B C9 35 
29ce8     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
29cec     2D 98 23 97 
29cf0     E1 96 A0 96 
29cf4     A4 96 EA 96 
29cf8     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
29cfc     AF 96 F4 96 
29d00     F8 96 3E 97 
29d04     FD 96 43 97 
29d08     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
29d0c     08 97 6B 99 
29d10     D6 92 88 91 
29d14     D8 EE 84 66 
29d18     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
29d1c     2E 6F E7 6E 
29d20     6C 6F 24 6F 
29d24     21 6F 1F 6F 
29d28     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
29d2c     17 6F 13 6F 
29d30     54 6F 0E 6F 
29d34     0B 6F 4B 6F 
29d38     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
29d3c     27 6D 1C 7B 
29d40     19 59 9F DB 
29d44     66 8E BC 94 
29d48     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
29d4c     67 97 26 97 
29d50     6D 97 2B 97 
29d54     72 97 32 97 
29d58     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
29d5c     C1 97 7F 97 
29d60     C6 97 85 97 
29d64     CB 97 CE 97 
29d68     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
29d6c     EC 8A C4 C6 
29d70     68 4C F4 7D 
29d74     63 6E E8 6E 
29d78     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
29d7c     ED 6F A7 6F 
29d80     E7 6F A0 6F 
29d84     E1 6F 9B 6F 
29d88     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
29d8c     D5 6F 8F 6F 
29d90     CE 6F 45 6F 
29d94     86 6F 68 6D 
29d98     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
29d9c     C0 13 AD A2 
29da0     A7 8E 79 99 
29da4     E6 97 E8 97 
29da8     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
29dac     F1 97 F3 97 
29db0     F6 97 F9 97 
29db4     FB 97 FE 97 
29db8     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
29dbc     4A 98 0A 98 
29dc0     93 98 0F 98 
29dc4     7F 9B BF 8C 
29dc8     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
29dcc     91 7B 62 73 
29dd0     1A 6E B9 70 
29dd4     EB 6F B3 70 
29dd8     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
29ddc     25 70 20 70 
29de0     1E 70 1B 70 
29de4     18 70 15 70 
29de8     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
29dec     0D 70 09 70 
29df0     07 70 03 70 
29df4     01 70 FD 6F 
29df8     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
29dfc     F6 6F F2 6F 
29e00     EF 6F EC 6F 
29e04     2C 70 E6 6F 
29e08     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
29e0c     DD 6F 97 6F 
29e10     D7 6F 84 6E 
29e14     8F 6F 3F 7D 
29e18     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
29e1a     FF FF FF FF 
29e1e     FF FF       | atarist_spl file "atarist.spl" '512
29e20     00 00 00 00 
29e24     00 00 00 00 
29e28     00 00       | 	byte	$00[10]
29e2a     17 7F F2 7F 
29e2e     B2 7F 72 7F 
29e32     33 7F F4 7E 
29e36     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
29e3a     36 7E F5 7D 
29e3e     E9 51 F2 0D 
29e42     8E 00 F3 FD 
29e46     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
29e4a     57 FD 58 FD 
29e4e     5B FD 5C FD 
29e52     5C FD 60 7D 
29e56     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
29e5a     D6 7C 98 7C 
29e5e     59 7C 1A 7C 
29e62     DC 7B 9E 7B 
29e66     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
29e6a     F3 05 00 FD 
29e6e     41 FB EA FA 
29e72     D9 FA DB FA 
29e76     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
29e7a     E4 FA 9B 36 
29e7e     F8 7A C0 7A 
29e82     84 7A 45 7A 
29e86     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
29e8a     8E 79 51 79 
29e8e     15 79 D7 78 
29e92     3C 1F EB FF 
29e96     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
29e9a     6D F8 65 F8 
29e9e     68 F8 6D F8 
29ea2     70 F8 74 F8 
29ea6     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
29eaa     AB 60 79 60 
29eae     4B 60 1A 60 
29eb2     E9 5F B9 5F 
29eb6     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
29eba     FB 59 B2 0B 
29ebe     92 FA 3A F7 
29ec2     96 F6 79 F6 
29ec6     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
29eca     82 F6 86 F6 
29ece     8C F6 DB 5D 
29ed2     F1 5E C1 5E 
29ed6     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
29eda     34 5E 04 5E 
29ede     D6 5D A6 5D 
29ee2     78 5D D4 3E 
29ee6     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
29eea     27 F5 BA F4 
29eee     AB F4 AD F4 
29ef2     B2 F4 B8 F4 
29ef6     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
29efa     26 5D 2B 5D 
29efe     FC 5C CD 5C 
29f02     9F 5C 70 5C 
29f06     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
29f0a     E5 5B B8 5B 
29f0e     DB 24 A7 FC 
29f12     D1 F4 4D F3 
29f16     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
29f1a     04 F3 0B F3 
29f1e     11 F3 16 F3 
29f22     DE 18 98 5B 
29f26     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
29f2a     4E 4A 29 48 
29f2e     A0 47 6A 47 
29f32     43 47 20 47 
29f36     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
29f3a     E2 F6 98 F2 
29f3e     C5 F1 A3 F1 
29f42     A3 F1 A8 F1 
29f46     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
29f4a     BF F1 00 3D 
29f4e     EF 46 CD 46 
29f52     AA 46 86 46 
29f56     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
29f5a     1C 46 F9 45 
29f5e     D7 45 EE 43 
29f62     DE 02 E8 F3 
29f66     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
29f6a     61 F0 65 F0 
29f6e     6D F0 74 F0 
29f72     7C F0 84 F0 
29f76     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
29f7a     8E 45 6D 45 
29f7e     49 45 27 45 
29f82     05 45 E1 44 
29f86     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
29f8a     F1 2F A9 FB 
29f8e     8B F1 9B EF 
29f92     40 EF 36 EF 
29f96     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
29f9a     4D EF 56 EF 
29f9e     5E EF 7B 44 
29fa2     8C 44 69 44 
29fa6     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
29faa     03 44 E1 43 
29fae     C0 43 F5 37 
29fb2     69 33 0F 11 
29fb6     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
29fba     66 EE 37 EE 
29fbe     38 EE 40 EE 
29fc2     48 EE 51 EE 
29fc6     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
29fca     7D 32 6A 32 
29fce     51 32 37 32 
29fd2     1F 32 05 32 
29fd6     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
29fda     B9 31 A1 31 
29fde     F1 04 F4 F1 
29fe2     50 EE A0 ED 
29fe6     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
29fea     93 ED 9A ED 
29fee     A4 ED AD ED 
29ff2     F4 27 C1 31 
29ff6     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
29ffa     78 31 5F 31 
29ffe     46 31 2E 31 
2a002     15 31 FC 30 
2a006     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2a00a     C4 EF 4A ED 
2a00e     DC EC CB EC 
2a012     D2 EC DA EC 
2a016     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2a01a     F9 EC 64 2F 
2a01e     0A 31 F1 30 
2a022     D9 30 C0 30 
2a026     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2a02a     78 30 5F 30 
2a02e     46 30 38 23 
2a032     A6 F6 19 EE 
2a036     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2a03a     20 EC 28 EC 
2a03e     32 EC 3C EC 
2a042     47 EC 51 EC 
2a046     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2a04a     A3 22 93 22 
2a04e     7F 22 6E 22 
2a052     5D 22 4C 22 
2a056     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2a05a     77 09 76 F1 
2a05e     CC EC F0 EB 
2a062     CD EB CE EB 
2a066     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2a06a     ED EB F5 EB 
2a06e     3E F6 6B 22 
2a072     5F 22 4E 22 
2a076     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2a07a     1B 22 0B 22 
2a07e     FA 21 E9 21 
2a082     D8 21 4D FF 
2a086     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2a08a     92 EB 7B EB 
2a08e     82 EB 8C EB 
2a092     97 EB A1 EB 
2a096     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2a09a     15 22 04 22 
2a09e     F3 21 E3 21 
2a0a2     D2 21 C0 21 
2a0a6     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2a0aa     8E 21 7D 21 
2a0ae     9A F8 A4 ED 
2a0b2     8E EB 2F EB 
2a0b6     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2a0ba     37 EB 42 EB 
2a0be     4C EB 57 EB 
2a0c2     B2 17 22 19 
2a0c6     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2a0ca     FD 18 EF 18 
2a0ce     E3 18 D6 18 
2a0d2     CA 18 BD 18 
2a0d6     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2a0da     60 EC 35 EB 
2a0de     01 EB 01 EB 
2a0e2     0C EB 16 EB 
2a0e6     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2a0ea     34 EB D0 18 
2a0ee     00 19 F4 18 
2a0f2     E8 18 DA 18 
2a0f6     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2a0fa     B6 18 A9 18 
2a0fe     9D 18 91 05 
2a102     F0 EF CA EB 
2a106     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2a10a     E8 EA F2 EA 
2a10e     FE EA 07 EB 
2a112     12 EB C2 EF 
2a116     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2a11a     D9 18 CD 18 
2a11e     C0 18 B3 18 
2a122     A7 18 9B 18 
2a126     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2a12a     B8 FC 30 EE 
2a12e     61 EB DC EA 
2a132     CD EA D2 EA 
2a136     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2a13a     F3 EA FE EA 
2a13e     D2 09 D1 18 
2a142     C3 18 17 18 
2a146     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2a14a     66 11 52 11 
2a14e     49 11 41 11 
2a152     38 11 E0 F4 
2a156     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2a15a     C9 EA C5 EA 
2a15e     CF EA DB EA 
2a162     E6 EA EF EA 
2a166     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2a16a     89 11 80 11 
2a16e     78 11 6E 11 
2a172     67 11 5D 11 
2a176     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2a17a     43 11 32 0D 
2a17e     9C F1 07 EC 
2a182     F8 EA CD EA 
2a186     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2a18a     E4 EA ED EA 
2a18e     F8 EA 02 EB 
2a192     55 11 91 11 
2a196     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2a19a     75 11 6E 11 
2a19e     64 11 5E 11 
2a1a2     54 11 4A 11 
2a1a6     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2a1aa     A8 EB F1 EA 
2a1ae     D9 EA DC EA 
2a1b2     E8 EA F1 EA 
2a1b6     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2a1ba     A6 EB 9E 11 
2a1be     A0 11 96 11 
2a1c2     8D 11 85 11 
2a1c6     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2a1ca     6A 11 CA 0D 
2a1ce     36 0B 57 F8 
2a1d2     6C ED 57 EB 
2a1d6     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2a1da     F4 EA FF EA 
2a1de     09 EB 15 EB 
2a1e2     1E EB 1A FD 
2a1e6     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2a1ea     ED 0A E8 0A 
2a1ee     E2 0A DC 0A 
2a1f2     D6 0A D1 0A 
2a1f6     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2a1fa     F8 F3 BC EC 
2a1fe     57 EB 1E EB 
2a202     18 EB 24 EB 
2a206     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2a20a     42 EB 4D EB 
2a20e     08 09 20 0B 
2a212     1A 0B 14 0B 
2a216     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2a21a     04 0B FE 0A 
2a21e     F9 0A F2 0A 
2a222     84 08 3A F1 
2a226     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2a22a     42 EB 42 EB 
2a22e     4E EB 57 EB 
2a232     62 EB 6B EB 
2a236     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2a23a     48 0B 43 0B 
2a23e     3C 0B 36 0B 
2a242     31 0B 2C 0B 
2a246     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2a24a     1B 0B 5C 00 
2a24e     6A EF 1B EC 
2a252     81 EB 6A EB 
2a256     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2a25a     85 EB 8E EB 
2a25e     99 EB A3 EB 
2a262     DD 05 E5 05 
2a266     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2a26a     DB 05 D8 05 
2a26e     D5 05 D1 05 
2a272     D0 05 CB 05 
2a276     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2a27a     0C EC BB EB 
2a27e     B3 EB BB EB 
2a282     C5 EB D0 EB 
2a286     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2a28a     E4 F7 2C 06 
2a28e     28 06 24 06 
2a292     22 06 1F 06 
2a296     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2a29a     16 06 14 06 
2a29e     0F 06 D0 F3 
2a2a2     65 ED 2D EC 
2a2a6     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2a2aa     01 EC 0A EC 
2a2ae     14 EC 1E EC 
2a2b2     29 EC FB 03 
2a2b6     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2a2ba     63 06 60 06 
2a2be     5E 06 59 06 
2a2c2     58 06 54 06 
2a2c6     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2a2ca     69 F1 21 ED 
2a2ce     55 EC 33 EC 
2a2d2     36 EC 40 EC 
2a2d6     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2a2da     5C EC 68 EC 
2a2de     92 02 D9 02 
2a2e2     D7 02 D7 02 
2a2e6     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2a2ea     D1 02 D1 02 
2a2ee     CE 02 CD 02 
2a2f2     5D FC 80 EF 
2a2f6     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2a2fa     83 EC 8A EC 
2a2fe     93 EC 9C EC 
2a302     A5 EC B1 EC 
2a306     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2a30a     2B 03 2A 03 
2a30e     29 03 26 03 
2a312     25 03 24 03 
2a316     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2a31a     1F 03 70 F7 
2a31e     D0 EE 27 ED 
2a322     DB EC D4 EC 
2a326     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2a32a     F0 EC FA EC 
2a32e     02 ED F9 F4 
2a332     7B 03 7C 03 
2a336     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2a33a     75 03 73 03 
2a33e     72 03 70 03 
2a342     6D 03 6C 03 
2a346     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2a34a     54 ED 22 ED 
2a34e     22 ED 2C ED 
2a352     35 ED 3F ED 
2a356     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2a35a     14 01 C3 03 
2a35e     C1 03 C0 03 
2a362     5F 01 A5 00 
2a366     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2a36a     7B 00 7C 00 
2a36e     20 00 85 F1 
2a372     2A EE 89 ED 
2a376     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2a37a     80 ED 87 ED 
2a37e     90 ED 9A ED 
2a382     A3 ED 73 00 
2a386     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2a38a     D0 00 D0 00 
2a38e     D0 00 D0 00 
2a392     D0 00 CF 00 
2a396     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2a39a     80 F0 3D EE 
2a39e     D5 ED C7 ED 
2a3a2     CD ED D6 ED 
2a3a6     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2a3aa     F2 ED FA ED 
2a3ae     1D 01 29 01 
2a3b2     27 01 27 01 
2a3b6     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2a3ba     25 01 26 01 
2a3be     26 01 23 01 
2a3c2     D0 F7 EC EF 
2a3c6     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2a3ca     1C EE 24 EE 
2a3ce     2D EE 37 EE 
2a3d2     40 EE 47 EE 
2a3d6     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2a3da     7D 01 7B 01 
2a3de     7A 01 7A 01 
2a3e2     79 01 78 01 
2a3e6     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2a3ea     84 FE DE F3 
2a3ee     6C EF 93 EE 
2a3f2     72 EE 72 EE 
2a3f6     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2a3fa     8B EE 95 EE 
2a3fe     9E EE 15 FC 
2a402     67 FE 67 FE 
2a406     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2a40a     6B FE 6B FE 
2a40e     6D FE 6D FE 
2a412     6D FE 6F FE 
2a416     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2a41a     DF EE CC EE 
2a41e     CF EE D9 EE 
2a422     E1 EE EA EE 
2a426     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2a42a     5A FE C4 FE 
2a42e     C3 FE C5 FE 
2a432     C6 FE C6 FE 
2a436     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2a43a     C8 FE C7 FE 
2a43e     DA FB 85 F1 
2a442     8D EF 31 EF 
2a446     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2a44a     34 EF 3E EF 
2a44e     46 EF 4F EF 
2a452     57 EF 0D FF 
2a456     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2a45a     1F FF 1F FF 
2a45e     21 FF 21 FF 
2a462     21 FF 21 FF 
2a466     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2a46a     15 F1 BE EF 
2a46e     84 EF 7E EF 
2a472     88 EF 8F EF 
2a476     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2a47a     A9 EF 06 F2 
2a47e     A6 FC AB FC 
2a482     AD FC AE FC 
2a486     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2a48a     B2 FC B4 FC 
2a48e     B6 FC B7 FC 
2a492     8B F4 BD F0 
2a496     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2a49a     E4 EF EE EF 
2a49e     F6 EF FD EF 
2a4a2     04 F0 0E F0 
2a4a6     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2a4aa     0B FD 0D FD 
2a4ae     0F FD 11 FD 
2a4b2     11 FD 13 FD 
2a4b6     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2a4ba     17 FD 64 F3 
2a4be     CD F0 52 F0 
2a4c2     41 F0 45 F0 
2a4c6     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2a4ca     5B F0 64 F0 
2a4ce     6D F0 FB FC 
2a4d2     65 FD 68 FD 
2a4d6     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2a4da     6C FD 6D FD 
2a4de     6F FD 70 FD 
2a4e2     72 FD B3 FB 
2a4e6     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2a4ea     A4 F0 99 F0 
2a4ee     A0 F0 A8 F0 
2a4f2     AE F0 B9 F0 
2a4f6     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2a4fa     CB FB DD FB 
2a4fe     DE FB E0 FB 
2a502     E3 FB E3 FB 
2a506     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2a50a     E9 FB EC FB 
2a50e     62 F7 27 F2 
2a512     2A F1 FF F0 
2a516     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2a51a     0C F1 13 F1 
2a51e     1B F1 23 F1 
2a522     33 F2 3C FC 
2a526     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2a52a     42 FC 45 FC 
2a52e     47 FC 48 FC 
2a532     4A FC 4C FC 
2a536     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2a53a     20 F2 77 F1 
2a53e     5C F1 5F F1 
2a542     64 F1 6C F1 
2a546     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2a54a     83 F1 DC F8 
2a54e     9A FC 9A FC 
2a552     9B FC 9E FC 
2a556     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2a55a     A3 FC A4 FC 
2a55e     A6 FC A9 FC 
2a562     90 F4 33 F2 
2a566     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2a56a     BA F1 BF F1 
2a56e     C7 F1 CE F1 
2a572     D6 F1 DC F1 
2a576     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2a57a     F3 FC F5 FC 
2a57e     FE FB 79 FB 
2a582     62 FB 5F FB 
2a586     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2a58a     6F FA AF F3 
2a58e     53 F2 12 F2 
2a592     0F F2 15 F2 
2a596     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2a59a     2A F2 32 F2 
2a59e     38 F2 9A FB 
2a5a2     AF FB B1 FB 
2a5a6     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a5aa     B7 FB B8 FB 
2a5ae     BA FB BC FB 
2a5b2     C1 FB 3B F8 
2a5b6     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2a5ba     6E F2 6C F2 
2a5be     74 F2 7A F2 
2a5c2     81 F2 87 F2 
2a5c6     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2a5ca     06 FC 09 FC 
2a5ce     0C FC 0E FC 
2a5d2     0F FC 12 FC 
2a5d6     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2a5da     17 FC 1A FC 
2a5de     B2 F6 7B F3 
2a5e2     DD F2 C5 F2 
2a5e6     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2a5ea     D4 F2 DB F2 
2a5ee     E0 F2 E8 F2 
2a5f2     28 F8 60 FC 
2a5f6     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2a5fa     64 FC 66 FC 
2a5fe     68 FC 6A FC 
2a602     6D FC 52 FC 
2a606     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2a60a     78 F3 24 F3 
2a60e     1A F3 1E F3 
2a612     24 F3 2A F3 
2a616     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2a61a     3D F3 80 FA 
2a61e     0C FB 0F FB 
2a622     10 FB 14 FB 
2a626     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2a62a     1B FB 1D FB 
2a62e     1F FB 92 FA 
2a632     DE F4 AE F3 
2a636     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2a63a     79 F3 7E F3 
2a63e     84 F3 8C F3 
2a642     92 F3 97 F3 
2a646     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2a64a     67 FB 69 FB 
2a64e     6B FB 6F FB 
2a652     71 FB 72 FB 
2a656     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2a65a     E3 F8 BA F4 
2a65e     EE F3 CC F3 
2a662     CA F3 CF F3 
2a666     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2a66a     E2 F3 E8 F3 
2a66e     ED F3 B7 FB 
2a672     BC FB BE FB 
2a676     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2a67a     C4 FB C6 FB 
2a67e     C8 FB C9 FB 
2a682     CC FB 8F F7 
2a686     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2a68a     1E F4 1E F4 
2a68e     24 F4 2A F4 
2a692     30 F4 38 F4 
2a696     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2a69a     AD FA B1 FA 
2a69e     B4 FA B6 FA 
2a6a2     BA FA BB FA 
2a6a6     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2a6aa     C2 FA C6 FA 
2a6ae     55 F6 C6 F4 
2a6b2     7D F4 72 F4 
2a6b6     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2a6ba     83 F4 89 F4 
2a6be     8F F4 94 F4 
2a6c2     66 FA 03 FB 
2a6c6     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2a6ca     0A FB 0E FB 
2a6ce     10 FB 11 FB 
2a6d2     16 FB 18 FB 
2a6d6     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2a6da     F9 F4 CA F4 
2a6de     C5 F4 CB F4 
2a6e2     D1 F4 D7 F4 
2a6e6     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2a6ea     E8 F4 3F FB 
2a6ee     56 FB 58 FB 
2a6f2     5A FB 5E FB 
2a6f6     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2a6fa     64 FB 64 FB 
2a6fe     69 FB 99 F9 
2a702     E9 F5 33 F5 
2a706     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2a70a     1D F5 22 F5 
2a70e     27 F5 2E F5 
2a712     32 F5 37 F5 
2a716     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2a71a     BC FA BC FA 
2a71e     C1 FA C2 FA 
2a722     C4 FA C8 FA 
2a726     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2a72a     F9 F7 DB F5 
2a72e     78 F5 69 F5 
2a732     6A F5 70 F5 
2a736     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2a73a     7F F5 85 F5 
2a73e     6E F7 06 FB 
2a742     0A FB 0B FB 
2a746     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2a74a     14 FB 15 FB 
2a74e     18 FB 1B FB 
2a752     1D FB 70 F7 
2a756     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2a75a     B6 F5 BB F5 
2a75e     C0 F5 C6 F5 
2a762     CA F5 CF F5 
2a766     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2a76a     54 FB 56 FB 
2a76e     5A FB 5B FB 
2a772     5E FB 5F FB 
2a776     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2a77a     67 FB 52 FB 
2a77e     29 F7 33 F6 
2a782     06 F6 02 F6 
2a786     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2a78a     10 F6 16 F6 
2a78e     1A F6 1F F6 
2a792     81 FB 9F FB 
2a796     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2a79a     51 FB F2 FA 
2a79e     E3 FA E3 FA 
2a7a2     E5 FA E9 FA 
2a7a6     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2a7aa     64 F6 4D F6 
2a7ae     4D F6 53 F6 
2a7b2     57 F6 5C F6 
2a7b6     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2a7ba     6A F6 19 FB 
2a7be     1E FB 22 FB 
2a7c2     23 FB 24 FB 
2a7c6     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2a7ca     2C FB 2E FB 
2a7ce     32 FB F0 F8 
2a7d2     01 F7 A5 F6 
2a7d6     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2a7da     9F F6 A3 F6 
2a7de     A6 F6 AC F6 
2a7e2     B0 F6 EB F7 
2a7e6     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2a7ea     68 FB 6C FB 
2a7ee     6E FB 71 FB 
2a7f2     72 FB 74 FB 
2a7f6     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2a7fa     71 F8 21 F7 
2a7fe     E5 F6 DD F6 
2a802     E1 F6 E6 F6 
2a806     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2a80a     F5 F6 F7 F6 
2a80e     F7 FA AB FB 
2a812     AD FB AF FB 
2a816     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2a81a     B6 FB B9 FB 
2a81e     BB FB BC FB 
2a822     21 FB 07 F8 
2a826     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2a82a     22 F7 26 F7 
2a82e     2B F7 2E F7 
2a832     34 F7 38 F7 
2a836     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2a83a     13 FB 16 FB 
2a83e     17 FB 1B FB 
2a842     1E FB 20 FB 
2a846     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2a84a     26 FB 77 FA 
2a84e     F3 F7 7C F7 
2a852     67 F7 6A F7 
2a856     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2a85a     74 F7 7A F7 
2a85e     7E F7 82 F7 
2a862     53 FB 5A FB 
2a866     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2a86a     5F FB 63 FB 
2a86e     65 FB 67 FB 
2a872     69 FB 6A FB 
2a876     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2a87a     B5 F7 A9 F7 
2a87e     AD F7 B0 F7 
2a882     B5 F7 B8 F7 
2a886     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2a88a     6E F8 99 FB 
2a88e     9C FB 9D FB 
2a892     9F FB A4 FB 
2a896     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2a89a     A9 FB AB FB 
2a89e     AD FB 46 F9 
2a8a2     26 F8 F0 F7 
2a8a6     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2a8aa     F4 F7 F8 F7 
2a8ae     FB F7 FF F7 
2a8b2     03 F8 65 FA 
2a8b6     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2a8ba     2B FB 2F FB 
2a8be     30 FB 32 FB 
2a8c2     34 FB 38 FB 
2a8c6     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2a8ca     E9 F8 4A F8 
2a8ce     2E F8 2C F8 
2a8d2     2F F8 36 F8 
2a8d6     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2a8da     41 F8 44 F8 
2a8de     4A FB 67 FB 
2a8e2     68 FB 6B FB 
2a8e6     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2a8ea     73 FB 74 FB 
2a8ee     78 FB 7A FB 
2a8f2     14 FB E7 F8 
2a8f6     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2a8fa     6D F8 70 F8 
2a8fe     73 F8 78 F8 
2a902     7C F8 80 F8 
2a906     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2a90a     A6 FB A7 FB 
2a90e     A9 FB AC FB 
2a912     AF FB B1 FB 
2a916     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a91a     B7 FB 73 FA 
2a91e     F8 F8 B4 F8 
2a922     A9 F8 AB F8 
2a926     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2a92a     B4 F8 B8 F8 
2a92e     BB F8 FA F8 
2a932     64 FB 65 FB 
2a936     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2a93a     6D FB 6F FB 
2a93e     70 FB 74 FB 
2a942     77 FB 77 FB 
2a946     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2a94a     E9 F8 E4 F8 
2a94e     E8 F8 EB F8 
2a952     EE F8 F2 F8 
2a956     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2a95a     B5 FA 9F FB 
2a95e     A1 FB A4 FB 
2a962     A5 FB A9 FB 
2a966     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2a96a     AE FB B1 FB 
2a96e     B2 FB C7 F9 
2a972     39 F9 22 F9 
2a976     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2a97a     26 F9 2A F9 
2a97e     2E F9 32 F9 
2a982     33 F9 BA FB 
2a986     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2a98a     DE FB E1 FB 
2a98e     E2 FB E4 FB 
2a992     E5 FB E7 FB 
2a996     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2a99a     C5 F9 67 F9 
2a99e     57 F9 56 F9 
2a9a2     5B F9 5F F9 
2a9a6     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2a9aa     68 F9 6C F9 
2a9ae     0B FC 11 FC 
2a9b2     14 FC 15 FC 
2a9b6     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2a9ba     B5 FB B5 FB 
2a9be     B6 FB B8 FB 
2a9c2     E9 FA C8 F9 
2a9c6     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2a9ca     90 F9 94 F9 
2a9ce     95 F9 99 F9 
2a9d2     9D F9 9F F9 
2a9d6     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2a9da     DE FB DF FB 
2a9de     E2 FB E4 FB 
2a9e2     E6 FB E8 FB 
2a9e6     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2a9ea     EF FB AC FA 
2a9ee     E9 F9 C7 F9 
2a9f2     C3 F9 C8 F9 
2a9f6     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2a9fa     D0 F9 D4 F9 
2a9fe     D6 F9 0E FB 
2aa02     11 FC 13 FC 
2aa06     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2aa0a     19 FC 1B FC 
2aa0e     1D FC 1E FC 
2aa12     21 FC 22 FC 
2aa16     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2aa1a     F7 F9 F7 F9 
2aa1e     FB F9 FE F9 
2aa22     00 FA 03 FA 
2aa26     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2aa2a     1B FC 45 FC 
2aa2e     46 FC 48 FC 
2aa32     4A FC 4B FC 
2aa36     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2aa3a     52 FC 54 FC 
2aa3e     F3 FB 82 FA 
2aa42     35 FA 28 FA 
2aa46     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2aa4a     31 FA 32 FA 
2aa4e     37 FA 37 FA 
2aa52     3C FA 00 FC 
2aa56     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2aa5a     09 FC 0B FC 
2aa5e     0F FC 12 FC 
2aa62     12 FC 15 FC 
2aa66     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2aa6a     8D FA 60 FA 
2aa6e     5B FA 5C FA 
2aa72     60 FA 61 FA 
2aa76     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2aa7a     6C FA 6D FA 
2aa7e     37 FC 3A FC 
2aa82     3B FC 3D FC 
2aa86     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2aa8a     43 FC 44 FC 
2aa8e     45 FC 47 FC 
2aa92     51 FB AB FA 
2aa96     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2aa9a     8E FA 91 FA 
2aa9e     93 FA 95 FA 
2aaa2     98 FA 9B FA 
2aaa6     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2aaaa     68 FC 6A FC 
2aaae     6C FC 6E FC 
2aab2     70 FC 72 FC 
2aab6     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2aaba     76 FC 3B FB 
2aabe     D0 FA BB FA 
2aac2     B9 FA BD FA 
2aac6     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2aaca     C4 FA C6 FA 
2aace     CA FA 13 FC 
2aad2     3A FC 3A FC 
2aad6     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2aada     41 FC 43 FC 
2aade     44 FC 47 FC 
2aae2     48 FC 3C FC 
2aae6     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2aaea     E6 FA E8 FA 
2aaee     EB FA EE FA 
2aaf2     F0 FA F2 FA 
2aaf6     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2aafa     61 FC 66 FC 
2aafe     68 FC 6B FC 
2ab02     6C FC 6E FC 
2ab06     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2ab0a     73 FC 75 FC 
2ab0e     13 FC 3F FB 
2ab12     17 FB 12 FB 
2ab16     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2ab1a     1A FB 1D FB 
2ab1e     1F FB 20 FB 
2ab22     23 FB 92 FC 
2ab26     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2ab2a     96 FC 97 FC 
2ab2e     9A FC 9C FC 
2ab32     9E FC 9F FC 
2ab36     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2ab3a     5A FB 41 FB 
2ab3e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2ab42     01 00 00 00 
2ab46     00 00 00 00 
2ab4a     00 00 00 00 
2ab4e     00 00 00 00 | mouse  file "mouse2.def"
2ab52     00 00 00 00 
2ab56     00 00 00 00 
2ab5a     00 00 00 00 
2ab5e     00 00 00 00 | 	byte	$00[16]
2ab62     01 01 00 00 
2ab66     00 00 00 00 
2ab6a     00 00 00 00 
2ab6e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab72     00 00 00 00 
2ab76     00 00 00 00 
2ab7a     00 00 00 00 
2ab7e     00 00 00 00 | 	byte	$00[16]
2ab82     01 0D 01 00 
2ab86     00 00 00 00 
2ab8a     00 00 00 00 
2ab8e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab92     00 00 00 00 
2ab96     00 00 00 00 
2ab9a     00 00 00 00 
2ab9e     00 00 00 00 | 	byte	$00[16]
2aba2     01 0D 0D 01 
2aba6     00 00 00 00 
2abaa     00 00 00 00 
2abae     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2abb2     00 00 00 00 
2abb6     00 00 00 00 
2abba     00 00 00 00 
2abbe     00 00 00 00 | 	byte	$00[16]
2abc2     01 0D 0D 0D 
2abc6     01 00 00 00 
2abca     00 00 00 00 
2abce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2abd2     00 00 00 00 
2abd6     00 00 00 00 
2abda     00 00 00 00 
2abde     00 00 00 00 | 	byte	$00[16]
2abe2     01 0D 0D 0D 
2abe6     0D 01 00 00 
2abea     00 00 00 00 
2abee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2abf2     00 00 00 00 
2abf6     00 00 00 00 
2abfa     00 00 00 00 
2abfe     00 00 00 00 | 	byte	$00[16]
2ac02     01 0D 0D 0D 
2ac06     0D 0D 01 00 
2ac0a     00 00 00 00 
2ac0e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ac12     00 00 00 00 
2ac16     00 00 00 00 
2ac1a     00 00 00 00 
2ac1e     00 00 00 00 | 	byte	$00[16]
2ac22     01 0D 0D 0D 
2ac26     0D 0D 0D 01 
2ac2a     00 00 00 00 
2ac2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2ac32     00 00 00 00 
2ac36     00 00 00 00 
2ac3a     00 00 00 00 
2ac3e     00 00 00 00 | 	byte	$00[16]
2ac42     01 0D 0D 0D 
2ac46     0D 0D 0D 0C 
2ac4a     01 00 00 00 
2ac4e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2ac52     00 00 00 00 
2ac56     00 00 00 00 
2ac5a     00 00 00 00 
2ac5e     00 00 00 00 | 	byte	$00[16]
2ac62     01 0D 0D 0D 
2ac66     0D 0D 0D 0D 
2ac6a     0C 01 00 00 
2ac6e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2ac72     00 00 00 00 
2ac76     00 00 00 00 
2ac7a     00 00 00 00 
2ac7e     00 00 00 00 | 	byte	$00[16]
2ac82     01 0D 0D 0D 
2ac86     0D 0D 0D 0D 
2ac8a     0D 0C 01 00 
2ac8e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2ac92     00 00 00 00 
2ac96     00 00 00 00 
2ac9a     00 00 00 00 
2ac9e     00 00 00 00 | 	byte	$00[16]
2aca2     01 0D 0D 0D 
2aca6     0D 0D 0D 0D 
2acaa     0D 0D 0B 01 
2acae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2acb2     00 00 00 00 
2acb6     00 00 00 00 
2acba     00 00 00 00 
2acbe     00 00 00 00 | 	byte	$00[16]
2acc2     01 0D 0D 0D 
2acc6     0C 0D 0D 03 
2acca     01 01 01 01 
2acce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2acd2     00 00 00 00 
2acd6     00 00 00 00 
2acda     00 00 00 00 
2acde     00 00 00 00 | 	byte	$00[16]
2ace2     01 0D 0D 0C 
2ace6     01 09 0D 03 
2acea     00 00 00 00 
2acee     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2acf2     00 00 00 00 
2acf6     00 00 00 00 
2acfa     00 00 00 00 
2acfe     00 00 00 00 | 	byte	$00[16]
2ad02     01 0D 0C 01 
2ad06     00 01 0D 0B 
2ad0a     01 00 00 00 
2ad0e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2ad12     00 00 00 00 
2ad16     00 00 00 00 
2ad1a     00 00 00 00 
2ad1e     00 00 00 00 | 	byte	$00[16]
2ad22     01 0C 01 00 
2ad26     00 01 0A 0D 
2ad2a     01 00 00 00 
2ad2e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2ad32     00 00 00 00 
2ad36     00 00 00 00 
2ad3a     00 00 00 00 
2ad3e     00 00 00 00 | 	byte	$00[16]
2ad42     01 01 00 00 
2ad46     00 00 01 0D 
2ad4a     0B 01 00 00 
2ad4e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2ad52     00 00 00 00 
2ad56     00 00 00 00 
2ad5a     00 00 00 00 
2ad5e     00 00 00 00 
2ad62     00 00 00 00 
2ad66     00 00       | 	byte	$00[22]
2ad68     01 0B 0D 01 
2ad6c     00 00 00 00 
2ad70     00 00 00 00 
2ad74     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ad78     00 00 00 00 
2ad7c     00 00 00 00 
2ad80     00 00 00 00 
2ad84     00 00 00 00 
2ad88     00          | 	byte	$00[17]
2ad89     01 01 00 00 
2ad8d     00 00 00 00 
2ad91     00 00 00 00 
2ad95     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ad99     00 00 00 00 
      ...             
2af3d     00 00 00 00 
2af41     00          | 	byte	$00[425]
2af42                 | 
2af42     00 00       |              	org
2af44 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2af48 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2af4c 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2af50 003             | 
2af50 003 00 30 04 F6 |                 mov     psramaddr,#0
2af54 004             | 
2af54 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2af58 005 20 00 00 FF 
2af5c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2af60 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2af64 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2af68 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2af6c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2af70 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2af74 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2af78 00d             | 
2af78 00d 20 00 00 FF 
2af7c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2af80 00f E0 03 00 FF 
2af84 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2af88 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2af8c 012             | 
2af8c 012             |                 
2af8c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2af90 013             |     
2af90 013 01 2C 60 FD |                 cogid 	t11				' get id
2af94 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2af98 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2af9c 016             | 
2af9c 016 00 00 00 00 | t11 		long 	0
2afa0 017 00 FF 07 00 | mailbox 	long 	$7FF00
2afa4 018 00 00 00 00 | psramaddr 	long 	0
2afa8 019 00 00 00 00 | pslockval	long 	0
2afac 01a 00 00 00 00 | cmd             long    0
2afb0 01b 00 00 00 00 | buf1            long    0
2afb4 01c 00 40 00 00 | buf2            long    16384
2afb8 01d BC AF 02 00 | 	long	@@@_dat_ + 8468
2afbc 01e 50 32 20 52 
2afc0 01f 65 74 72 6F 
2afc4 020 6D 61 63 68 
2afc8 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2afcc 022 42 41 53 49 
2afd0 023 43 20 76 65 
2afd4 024 72 73 69 6F 
2afd8 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2afdc 026 32 35 00 00 | 	byte	$32, $35, $00, $00
2afe0 027             | 	alignl
2afe0 027             | _hg010b_spin2_dat_
2afe0 027             | 
2afe0 027 00 00 00 00 
2afe4 028 00 00 00 00 
2afe8 029 00 00 00 00 
2afec 02a 00 00 00 00 
2aff0 02b 00 00 00    | vga_font       file "vgafont.def"
2aff3 02b 7E 81 A5 81 
2aff7 02c 81 BD 99 81 
2affb 02d 81 7E 00 00 
2afff 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2b003 02f 7E FF DB FF 
2b007 030 FF C3 E7 FF 
2b00b 031 FF 7E 00 00 
2b00f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2b013 033 00 36 7F 7F 
2b017 034 7F 7F 3E 1C 
2b01b 035 08 00 00 00 
2b01f 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2b023 037 00 08 1C 3E 
2b027 038 7F 3E 1C 08 
2b02b 039 00 00 00 00 
2b02f 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2b033 03b 18 3C 3C E7 
2b037 03c E7 E7 18 18 
2b03b 03d 3C 00 00 00 
2b03f 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2b043 03f 18 3C 7E FF 
2b047 040 FF 7E 18 18 
2b04b 041 3C 00 00 00 
2b04f 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2b053 043 00 00 00 18 
2b057 044 3C 3C 18 00 
2b05b 045 00 00 00 00 
2b05f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2b063 047 FF FF FF E7 
2b067 048 C3 C3 E7 FF 
2b06b 049 FF FF FF FF 
2b06f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b073 04b 00 00 3C 66 
2b077 04c 42 42 66 3C 
2b07b 04d 00 00 00 00 
2b07f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2b083 04f FF FF C3 99 
2b087 050 BD BD 99 C3 
2b08b 051 FF FF FF FF 
2b08f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b093 053 78 70 58 4C 
2b097 054 1E 33 33 33 
2b09b 055 33 1E 00 00 
2b09f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2b0a3 057 3C 66 66 66 
2b0a7 058 66 3C 18 7E 
2b0ab 059 18 18 00 00 
2b0af 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2b0b3 05b FC CC FC 0C 
2b0b7 05c 0C 0C 0C 0E 
2b0bb 05d 0F 07 00 00 
2b0bf 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2b0c3 05f FE C6 FE C6 
2b0c7 060 C6 C6 C6 E6 
2b0cb 061 E7 67 03 00 
2b0cf 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2b0d3 063 18 18 DB 3C 
2b0d7 064 E7 3C DB 18 
2b0db 065 18 00 00 00 
2b0df 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2b0e3 067 03 07 0F 1F 
2b0e7 068 7F 1F 0F 07 
2b0eb 069 03 01 00 00 
2b0ef 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2b0f3 06b 60 70 78 7C 
2b0f7 06c 7F 7C 78 70 
2b0fb 06d 60 40 00 00 
2b0ff 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2b103 06f 18 3C 7E 18 
2b107 070 18 18 7E 3C 
2b10b 071 18 00 00 00 
2b10f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2b113 073 66 66 66 66 
2b117 074 66 66 66    | 	byte	$66[7]
2b11a 075 00 66 66 00 
2b11e 076 00 00 00 00 
2b122 077 00 FE DB DB 
2b126 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2b12a 079 D8 D8 D8 00 
2b12e 07a 00 00 00 3E 
2b132 07b 63 06 1C 36 
2b136 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2b13a 07d 30 63 3E 00 
2b13e 07e 00 00 00 00 
2b142 07f 00 00 00 00 
2b146 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b14a 081 7F 7F 7F 00 
2b14e 082 00 00 00 00 
2b152 083 00 18 3C 7E 
2b156 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2b15a 085 3C 18 7E 00 
2b15e 086 00 00 00 00 
2b162 087 00 18 3C 7E 
2b166 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2b16a 089 18 18 18 00 
2b16e 08a 00 00 00 00 
2b172 08b 00 18 18 18 
2b176 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b17a 08d 7E 3C 18 00 
2b17e 08e 00 00 00 00 
2b182 08f 00 00 00 18 
2b186 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2b18a 091 00 00 00 00 
2b18e 092 00 00 00 00 
2b192 093 00 00 00    | 	byte	$00[11]
2b195 094 0C 06 7F 06 
2b199 095 0C 00 00 00 
2b19d 096 00 00 00 00 
2b1a1 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1a5 098 00 03 03 03 
2b1a9 099 7F 00 00 00 
2b1ad 09a 00 00 00 00 
2b1b1 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1b5 09c 14 36 7F 36 
2b1b9 09d 14 00 00 00 
2b1bd 09e 00 00 00 00 
2b1c1 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2b1c5 0a0 1C 1C 3E 3E 
2b1c9 0a1 7F 7F 00 00 
2b1cd 0a2 00 00 00 00 
2b1d1 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b1d5 0a4 7F 3E 3E 1C 
2b1d9 0a5 1C 08 00 00 
2b1dd 0a6 00 00 00 00 
2b1e1 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1e5 0a8 00 00 00 00 
2b1e9 0a9 00 00 00 00 
2b1ed 0aa 00 00 00 00 
2b1f1 0ab 00 00       | 	byte	$00[14]
2b1f3 0ab 18 3C 3C 3C 
2b1f7 0ac 18 18 18 00 
2b1fb 0ad 18 18 00 00 
2b1ff 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2b203 0af 66 24 00 00 
2b207 0b0 00 00 00 00 
2b20b 0b1 00 00 00 00 
2b20f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b213 0b3 00 36 36 7F 
2b217 0b4 36 36 36 7F 
2b21b 0b5 36 36 00 00 
2b21f 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2b223 0b7 3E 63 43 03 
2b227 0b8 3E 60 60 61 
2b22b 0b9 63 3E 18 18 
2b22f 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2b233 0bb 00 00 43 63 
2b237 0bc 30 18 0C 06 
2b23b 0bd 63 61 00 00 
2b23f 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2b243 0bf 1C 36 36 1C 
2b247 0c0 6E 3B 33 33 
2b24b 0c1 33 6E 00 00 
2b24f 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2b253 0c3 0C 0C 0C 06 
2b257 0c4 00 00 00 00 
2b25b 0c5 00 00 00 00 
2b25f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b263 0c7 30 18 0C 0C 
2b267 0c8 0C 0C 0C 0C 
2b26b 0c9 18 30 00 00 
2b26f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2b273 0cb 0C 18 30 30 
2b277 0cc 30 30 30 30 
2b27b 0cd 18 0C 00 00 
2b27f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2b283 0cf 00 00 00 66 
2b287 0d0 3C FF 3C 66 
2b28b 0d1 00 00 00 00 
2b28f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2b293 0d3 00 00 00 18 
2b297 0d4 18 7E 18 18 
2b29b 0d5 00 00 00 00 
2b29f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2b2a3 0d7 00 00 00 00 
2b2a7 0d8 00 00 00 00 | 	byte	$00[8]
2b2ab 0d9 18 18 18 0C 
2b2af 0da 00 00 00 00 
2b2b3 0db 00 00 00 00 
2b2b7 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2b2bb 0dd 00 00 00 00 
2b2bf 0de 00 00 00 00 
2b2c3 0df 00 00 00 00 
2b2c7 0e0 00 00 00 00 | 	byte	$00[16]
2b2cb 0e1 18 18 00 00 
2b2cf 0e2 00 00 00 00 
2b2d3 0e3 00 00 40 60 
2b2d7 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2b2db 0e5 03 01 00 00 
2b2df 0e6 00 00 00 00 
2b2e3 0e7 1C 36 63 63 
2b2e7 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2b2eb 0e9 36 1C 00 00 
2b2ef 0ea 00 00 00 00 
2b2f3 0eb 18 1C 1E 18 
2b2f7 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2b2fb 0ed 18 7E 00 00 
2b2ff 0ee 00 00 00 00 
2b303 0ef 3E 63 60 30 
2b307 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2b30b 0f1 63 7F 00 00 
2b30f 0f2 00 00 00 00 
2b313 0f3 3E 63 60 60 
2b317 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2b31b 0f5 63 3E 00 00 
2b31f 0f6 00 00 00 00 
2b323 0f7 30 38 3C 36 
2b327 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2b32b 0f9 30 78 00 00 
2b32f 0fa 00 00 00 00 
2b333 0fb 7F 03 03 03 
2b337 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2b33b 0fd 63 3E 00 00 
2b33f 0fe 00 00 00 00 
2b343 0ff 1C 06 03 03 
2b347 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2b34b 101 63 3E 00 00 
2b34f 102 00 00 00 00 
2b353 103 7F 63 60 60 
2b357 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2b35b 105 0C 0C 00 00 
2b35f 106 00 00 00 00 
2b363 107 3E 63 63 63 
2b367 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2b36b 109 63 3E 00 00 
2b36f 10a 00 00 00 00 
2b373 10b 3E 63 63 63 
2b377 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2b37b 10d 30 1E 00 00 
2b37f 10e 00 00 00 00 
2b383 10f 00 00 00 18 
2b387 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b38b 111 18 18 00 00 
2b38f 112 00 00 00 00 
2b393 113 00 00 00 18 
2b397 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b39b 115 18 18 0C 00 
2b39f 116 00 00 00 00 
2b3a3 117 00 60 30 18 
2b3a7 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2b3ab 119 30 60 00 00 
2b3af 11a 00 00 00 00 
2b3b3 11b 00 00 00 7E 
2b3b7 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2b3bb 11d 00 00 00 00 
2b3bf 11e 00 00 00 00 
2b3c3 11f 00          | 	byte	$00[9]
2b3c4 120 06 0C 18 30 
2b3c8 121 60 30 18 0C 
2b3cc 122 06 00 00 00 
2b3d0 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2b3d4 124 63 63 30 18 
2b3d8 125 18 18 00 18 
2b3dc 126 18 00 00 00 
2b3e0 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b3e4 128 3E 63 63 7B 
2b3e8 129 7B 7B 3B 03 
2b3ec 12a 3E 00 00 00 
2b3f0 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2b3f4 12c 1C 36 63 63 
2b3f8 12d 7F 63 63 63 
2b3fc 12e 63 00 00 00 
2b400 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2b404 130 66 66 66 3E 
2b408 131 66 66 66 66 
2b40c 132 3F 00 00 00 
2b410 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2b414 134 66 43 03 03 
2b418 135 03 03 43 66 
2b41c 136 3C 00 00 00 
2b420 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2b424 138 36 66 66 66 
2b428 139 66 66 66 36 
2b42c 13a 1F 00 00 00 
2b430 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2b434 13c 66 46 16 1E 
2b438 13d 16 06 46 66 
2b43c 13e 7F 00 00 00 
2b440 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2b444 140 66 46 16 1E 
2b448 141 16 06 06 06 
2b44c 142 0F 00 00 00 
2b450 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2b454 144 66 43 03 03 
2b458 145 7B 63 63 66 
2b45c 146 5C 00 00 00 
2b460 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2b464 148 63 63 63 7F 
2b468 149 63 63 63 63 
2b46c 14a 63 00 00 00 
2b470 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2b474 14c 18 18 18 18 
2b478 14d 18 18 18 18 | 	byte	$18[8]
2b47c 14e 3C 00 00 00 
2b480 14f 00 00 00 78 
2b484 150 30 30 30 30 
2b488 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2b48c 152 1E 00 00 00 
2b490 153 00 00 00 67 
2b494 154 66 66 36 1E 
2b498 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2b49c 156 67 00 00 00 
2b4a0 157 00 00 00 0F 
2b4a4 158 06 06 06 06 
2b4a8 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b4ac 15a 7F 00 00 00 
2b4b0 15b 00 00 00 63 
2b4b4 15c 77 7F 7F 6B 
2b4b8 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2b4bc 15e 63 00 00 00 
2b4c0 15f 00 00 00 63 
2b4c4 160 67 6F 7F 7B 
2b4c8 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2b4cc 162 63 00 00 00 
2b4d0 163 00 00 00 3E 
2b4d4 164 63 63 63 63 
2b4d8 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b4dc 166 3E 00 00 00 
2b4e0 167 00 00 00 3F 
2b4e4 168 66 66 66 3E 
2b4e8 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2b4ec 16a 0F 00 00 00 
2b4f0 16b 00 00 00 3E 
2b4f4 16c 63 63 63 63 
2b4f8 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2b4fc 16e 3E 30 70 00 
2b500 16f 00 00 00 3F 
2b504 170 66 66 66 3E 
2b508 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2b50c 172 67 00 00 00 
2b510 173 00 00 00 3E 
2b514 174 63 63 06 1C 
2b518 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b51c 176 3E 00 00 00 
2b520 177 00 00 00 7E 
2b524 178 7E 5A 18 18 
2b528 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b52c 17a 3C 00 00 00 
2b530 17b 00 00 00 63 
2b534 17c 63 63 63 63 
2b538 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b53c 17e 3E 00 00 00 
2b540 17f 00 00 00 63 
2b544 180 63 63 63 63 
2b548 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2b54c 182 08 00 00 00 
2b550 183 00 00 00 63 
2b554 184 63 63 63 6B 
2b558 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2b55c 186 36 00 00 00 
2b560 187 00 00 00 63 
2b564 188 63 36 3E 1C 
2b568 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2b56c 18a 63 00 00 00 
2b570 18b 00 00 00 66 
2b574 18c 66 66 66 3C 
2b578 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2b57c 18e 3C 00 00 00 
2b580 18f 00 00 00 7F 
2b584 190 63 61 30 18 
2b588 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b58c 192 7F 00 00 00 
2b590 193 00 00 00 3C 
2b594 194 0C 0C 0C 0C 
2b598 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2b59c 196 3C 00 00 00 
2b5a0 197 00 00 00 00 
2b5a4 198 01 03 07 0E 
2b5a8 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2b5ac 19a 40 00 00 00 
2b5b0 19b 00 00 00 3C 
2b5b4 19c 30 30 30 30 
2b5b8 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2b5bc 19e 3C 00 00 00 
2b5c0 19f 1C 36 00 00 
2b5c4 1a0 00 00 00 00 
2b5c8 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5cc 1a2 00 00 00 00 
2b5d0 1a3 00 00 00 00 
2b5d4 1a4 00 00 00 00 
2b5d8 1a5 00 00 00 00 
2b5dc 1a6 00          | 	byte	$00[17]
2b5dd 1a6 FF 00 00 0C 
2b5e1 1a7 18 00 00 00 
2b5e5 1a8 00 00 00 00 
2b5e9 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5ed 1aa 00 00 00 00 
2b5f1 1ab 00 00 00 00 
2b5f5 1ac 00          | 	byte	$00[9]
2b5f6 1ac 1E 30 3E 33 
2b5fa 1ad 33 33 6E 00 
2b5fe 1ae 00 00 00 00 
2b602 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2b606 1b0 1E 36 66 66 
2b60a 1b1 66 66 3E 00 
2b60e 1b2 00 00 00 00 
2b612 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b616 1b4 3E 63 03 03 
2b61a 1b5 03 63 3E 00 
2b61e 1b6 00 00 00 00 
2b622 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2b626 1b8 3C 36 33 33 
2b62a 1b9 33 33 6E 00 
2b62e 1ba 00 00 00 00 
2b632 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b636 1bc 3E 63 7F 03 
2b63a 1bd 03 63 3E 00 
2b63e 1be 00 00 00 00 
2b642 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2b646 1c0 0C 1E 0C 0C 
2b64a 1c1 0C 0C 1E 00 
2b64e 1c2 00 00 00 00 
2b652 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b656 1c4 6E 33 33 33 
2b65a 1c5 33 33 3E 30 
2b65e 1c6 33 1E 00 00 
2b662 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2b666 1c8 36 6E 66 66 
2b66a 1c9 66 66 67 00 
2b66e 1ca 00 00 00 00 
2b672 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2b676 1cc 1C 18 18 18 
2b67a 1cd 18 18 3C 00 
2b67e 1ce 00 00 00 00 
2b682 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2b686 1d0 70 60 60 60 
2b68a 1d1 60 60 60 66 
2b68e 1d2 66 3C 00 00 
2b692 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2b696 1d4 66 36 1E 1E 
2b69a 1d5 36 66 67 00 
2b69e 1d6 00 00 00 00 
2b6a2 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2b6a6 1d8 18 18 18 18 
2b6aa 1d9 18 18       | 	byte	$18[6]
2b6ac 1da 3C 00 00 00 
2b6b0 1db 00 00 00 00 
2b6b4 1dc 00 00 37 7F 
2b6b8 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2b6bc 1de 63 00 00 00 
2b6c0 1df 00 00 00 00 
2b6c4 1e0 00 00 3B 66 
2b6c8 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b6cc 1e2 66 00 00 00 
2b6d0 1e3 00 00 00 00 
2b6d4 1e4 00 00 3E 63 
2b6d8 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2b6dc 1e6 3E 00 00 00 
2b6e0 1e7 00 00 00 00 
2b6e4 1e8 00 00 3B 66 
2b6e8 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b6ec 1ea 3E 06 06 0F 
2b6f0 1eb 00 00 00 00 
2b6f4 1ec 00 00 6E 33 
2b6f8 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2b6fc 1ee 3E 30 30 78 
2b700 1ef 00 00 00 00 
2b704 1f0 00 00 3B 6E 
2b708 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2b70c 1f2 0F 00 00 00 
2b710 1f3 00 00 00 00 
2b714 1f4 00 00 3E 63 
2b718 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2b71c 1f6 3E 00 00 00 
2b720 1f7 00 00 00 08 
2b724 1f8 0C 0C 3F 0C 
2b728 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b72c 1fa 38 00 00 00 
2b730 1fb 00 00 00 00 
2b734 1fc 00 00 33 33 
2b738 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2b73c 1fe 6E 00 00 00 
2b740 1ff 00 00 00 00 
2b744 200 00 00 63 63 
2b748 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2b74c 202 1C 00 00 00 
2b750 203 00 00 00 00 
2b754 204 00 00 63 63 
2b758 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2b75c 206 36 00 00 00 
2b760 207 00 00 00 00 
2b764 208 00 00 63 36 
2b768 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2b76c 20a 63 00 00 00 
2b770 20b 00 00 00 00 
2b774 20c 00 00 63 63 
2b778 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2b77c 20e 7E 60 30 1F 
2b780 20f 00 00 00 00 
2b784 210 00 00 7F 33 
2b788 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2b78c 212 7F 00 00 00 
2b790 213 00 00 00 70 
2b794 214 18 18 18 0E 
2b798 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2b79c 216 70 00 00 00 
2b7a0 217 00 00 00 18 
2b7a4 218 18 18 18 18 
2b7a8 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b7ac 21a 18 00 00 00 
2b7b0 21b 00 00 00 0E 
2b7b4 21c 18 18 18 70 
2b7b8 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2b7bc 21e 0E 00 00 00 
2b7c0 21f 6E 3B 00 00 
2b7c4 220 00 00 00 00 
2b7c8 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b7cc 222 00 00 00 00 
2b7d0 223 00 00 00 00 
2b7d4 224 00 00       | 	byte	$00[10]
2b7d6 224 08 1C 36 63 
2b7da 225 63 63 7F 00 
2b7de 226 00 00 00 00 
2b7e2 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2b7e6 228 03 03 03 03 
2b7ea 229 43 66 3C 18 
2b7ee 22a 30 1E 00 00 
2b7f2 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2b7f6 22c 33 33 33 33 
2b7fa 22d 33 33       | 	byte	$33[6]
2b7fc 22e 6E 00 00 00 
2b800 22f 00 00 60 30 
2b804 230 18 00 3E 63 
2b808 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2b80c 232 3E 00 00 00 
2b810 233 00 00 08 1C 
2b814 234 36 00 1E 30 
2b818 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2b81c 236 6E 00 00 00 
2b820 237 00 00 00 00 
2b824 238 33 00 1E 30 
2b828 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2b82c 23a 6E 00 00 00 
2b830 23b 00 00 1C 36 
2b834 23c 1C 00 33 33 
2b838 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2b83c 23e 6E 00 00 00 
2b840 23f 00 00 60 30 
2b844 240 18 00 3E 63 
2b848 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2b84c 242 3E 00 00 00 
2b850 243 00 00 00 00 
2b854 244 00 00 3E 63 
2b858 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2b85c 246 3E 18 30 1E 
2b860 247 00 00 00 1C 
2b864 248 58 78 38 18 
2b868 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2b86c 24a 3C 00 00 00 
2b870 24b 00 00 00 00 
2b874 24c 63 00 3E 63 
2b878 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2b87c 24e 3E 00 00 00 
2b880 24f 66 33 00 3E 
2b884 250 63 63 63 63 
2b888 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b88c 252 3E 00 00 00 
2b890 253 00 00 CC 66 
2b894 254 33 00 3E 63 
2b898 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2b89c 256 3E 00 00 00 
2b8a0 257 00 00 18 3C 
2b8a4 258 66 00 1C 18 
2b8a8 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2b8ac 25a 3C 00 00 00 
2b8b0 25b 30 18 00 7F 
2b8b4 25c 63 61 30 18 
2b8b8 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b8bc 25e 7F 00 00 00 
2b8c0 25f 00 63 00 08 
2b8c4 260 1C 36 63 63 
2b8c8 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2b8cc 262 63 00 00 00 
2b8d0 263 30 18 00 3C 
2b8d4 264 66 43 03 03 
2b8d8 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2b8dc 266 3C 00 00 00 
2b8e0 267 30 18 00 7F 
2b8e4 268 66 46 16 1E 
2b8e8 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2b8ec 26a 7F 00 00 00 
2b8f0 26b 0C 06 00 0F 
2b8f4 26c 06 06 06 06 
2b8f8 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b8fc 26e 7F 00 00 00 
2b900 26f 30 18 00 1C 
2b904 270 18 18 18 18 
2b908 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2b90c 272 3C 00 00 00 
2b910 273 00 00 08 1C 
2b914 274 36 00 3E 63 
2b918 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2b91c 276 3E 00 00 00 
2b920 277 00 00 00 00 
2b924 278 63 00 3E 63 
2b928 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2b92c 27a 3E 00 00 00 
2b930 27b 00 00 00 6F 
2b934 27c 46 26 06 06 
2b938 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2b93c 27e 7F 00 00 00 
2b940 27f 00 00 00 6E 
2b944 280 4C 2C 0C 0C 
2b948 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2b94c 282 1E 00 00 00 
2b950 283 30 18 00 3E 
2b954 284 63 63 06 1C 
2b958 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b95c 286 3E 00 00 00 
2b960 287 00 00 60 30 
2b964 288 18 00 3E 63 
2b968 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2b96c 28a 3E 00 00 00 
2b970 28b 00 63 00 3E 
2b974 28c 63 63 63 63 
2b978 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b97c 28e 3E 00 00 00 
2b980 28f 00 63 00 63 
2b984 290 63 63 63 63 
2b988 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b98c 292 3E 00 00 00 
2b990 293 6C 38 00 7E 
2b994 294 7E 5A 18 18 
2b998 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b99c 296 3C 00 00 00 
2b9a0 297 00 00 60 48 
2b9a4 298 2C 0C 3F 0C 
2b9a8 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b9ac 29a 38 00 00 00 
2b9b0 29b 00 00 00 0F 
2b9b4 29c 26 36 1E 0E 
2b9b8 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2b9bc 29e 7F 00 00 00 
2b9c0 29f 00 00 00 00 
2b9c4 2a0 00 63 36 1C 
2b9c8 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2b9cc 2a2 00 00 00 00 
2b9d0 2a3 00 00       | 	byte	$00[6]
2b9d2 2a3 36 1C 08 00 
2b9d6 2a4 3E 63 03 03 
2b9da 2a5 03 63 3E 00 
2b9de 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2b9e2 2a7 30 18 0C 00 
2b9e6 2a8 1E 30 3E 33 
2b9ea 2a9 33 33 6E 00 
2b9ee 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b9f2 2ab 60 30 18 00 
2b9f6 2ac 1C 18 18 18 
2b9fa 2ad 18 18 3C 00 
2b9fe 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2ba02 2af 60 30 18 00 
2ba06 2b0 3E 63 63 63 
2ba0a 2b1 63 63 3E 00 
2ba0e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2ba12 2b3 30 18 0C 00 
2ba16 2b4 33 33 33 33 
2ba1a 2b5 33 33 6E 00 
2ba1e 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2ba22 2b7 00 08 1C 36 
2ba26 2b8 63 63 7F 63 
2ba2a 2b9 63 63 63 18 
2ba2e 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2ba32 2bb 00 00 00 00 
2ba36 2bc 1E 30 3E 33 
2ba3a 2bd 33 33 6E 18 
2ba3e 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2ba42 2bf 00 7F 63 61 
2ba46 2c0 30 18 0C 06 
2ba4a 2c1 43 63 7F 00 
2ba4e 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2ba52 2c3 36 1C 08 00 
2ba56 2c4 7F 33 18 0C 
2ba5a 2c5 06 63 7F 00 
2ba5e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2ba62 2c7 00 7F 66 46 
2ba66 2c8 16 1E 16 06 
2ba6a 2c9 46 66 7F 18 
2ba6e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2ba72 2cb 00 00 00 00 
2ba76 2cc 3E 63 7F 03 
2ba7a 2cd 03 63 3E 18 
2ba7e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2ba82 2cf 00 3C 66 03 
2ba86 2d0 1F 03 0F 03 
2ba8a 2d1 03 66 3C 00 
2ba8e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2ba92 2d3 60 30 18 00 
2ba96 2d4 7F 33 18 0C 
2ba9a 2d5 06 63 7F 00 
2ba9e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2baa2 2d7 00 3C 66 43 
2baa6 2d8 03 03 03 03 
2baaa 2d9 43 66 3C 00 
2baae 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2bab2 2db 00 00 00 00 
2bab6 2dc 3E 63 06 1C 
2baba 2dd 30 63 3E 18 
2babe 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2bac2 2df 00 00 00 00 
2bac6 2e0 00 00       | 	byte	$00[6]
2bac8 2e1 6C 36 1B 36 
2bacc 2e2 6C 00 00 00 
2bad0 2e3 00 00 00 00 
2bad4 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bad8 2e5 1B 36 6C 36 
2badc 2e6 1B 00 00 00 
2bae0 2e7 88 22 88 22 
2bae4 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2bae8 2e9 88 22 88 22 
2baec 2ea 88 22 88 22 
2baf0 2eb AA 55 AA 55 
2baf4 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2baf8 2ed AA 55 AA 55 
2bafc 2ee AA 55 AA 55 
2bb00 2ef BB EE BB EE 
2bb04 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2bb08 2f1 BB EE BB EE 
2bb0c 2f2 BB EE BB EE 
2bb10 2f3 18 18 18 18 
2bb14 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2bb18 2f5 18 18 18 18 
2bb1c 2f6 18 18 18 18 
2bb20 2f7 18 18 18 18 
2bb24 2f8 18 18 18    | 	byte	$18[15]
2bb27 2f8 1F 18 18 18 
2bb2b 2f9 18 18 18 18 
2bb2f 2fa 18 30 18 00 
2bb33 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2bb37 2fc 63 7F 63 63 
2bb3b 2fd 63 63 00 00 
2bb3f 2fe 00 1C 36 00 
2bb43 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2bb47 300 63 7F 63 63 
2bb4b 301 63 63 00 00 
2bb4f 302 00 36 1C 00 
2bb53 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2bb57 304 1E 16 06 46 
2bb5b 305 66 7F 00 00 
2bb5f 306 00 00 00 00 
2bb63 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2bb67 308 1C 30 60 63 
2bb6b 309 63 3E 18 30 
2bb6f 30a 1E 6C 6C 6C 
2bb73 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2bb77 30c 6F 6C 6C 6C 
2bb7b 30d 6C 6C 6C 6C 
2bb7f 30e 6C 6C 6C 6C 
2bb83 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bb87 310 6C 6C 6C 6C 
2bb8b 311 6C 6C 6C 6C 
2bb8f 312 6C          | 	byte	$6c[9]
2bb90 313 00 00 00 00 
2bb94 314 00          | 	byte	$00[5]
2bb95 314 7F 60 6F 6C 
2bb99 315 6C 6C 6C 6C 
2bb9d 316 6C 6C 6C 6C 
2bba1 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bba5 318 6F 60 7F 00 
2bba9 319 00 00 00 00 
2bbad 31a 00 00 00 18 
2bbb1 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2bbb5 31c 61 30 18 0C 
2bbb9 31d 06 43 63 7F 
2bbbd 31e 00 00 00 00 
2bbc1 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2bbc5 320 00 7F 33 18 
2bbc9 321 0C 06 63 7F 
2bbcd 322 00 00 00 00 
2bbd1 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2bbd5 324 00 00 1F 18 
2bbd9 325 18 18 18 18 
2bbdd 326 18 18 18 18 
2bbe1 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bbe5 328 18 18 F8 00 
2bbe9 329 00 00 00 00 
2bbed 32a 00 00 00 18 
2bbf1 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2bbf5 32c 18 18 FF 00 
2bbf9 32d 00 00 00 00 
2bbfd 32e 00 00 00 00 
2bc01 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc05 330 00 00 FF 18 
2bc09 331 18 18 18 18 
2bc0d 332 18 18 18 18 
2bc11 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bc15 334 18 18 F8 18 
2bc19 335 18 18 18 18 
2bc1d 336 18 18 18 00 
2bc21 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2bc25 338 00 00 FF 00 
2bc29 339 00 00 00 00 
2bc2d 33a 00 00 00 18 
2bc31 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2bc35 33c 18 18 FF 18 
2bc39 33d 18 18 18 18 
2bc3d 33e 18 18 18 63 
2bc41 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2bc45 340 36 63 63 7F 
2bc49 341 63 63 63 63 
2bc4d 342 00 00 00 00 
2bc51 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2bc55 344 00 1E 30 3E 
2bc59 345 33 33 33 6E 
2bc5d 346 00 00 00 6C 
2bc61 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2bc65 348 EC 0C FC 00 
2bc69 349 00 00 00 00 
2bc6d 34a 00 00 00 00 
2bc71 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc75 34c FC 0C EC 6C 
2bc79 34d 6C 6C 6C 6C 
2bc7d 34e 6C 6C 6C 6C 
2bc81 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bc85 350 EF 00 FF 00 
2bc89 351 00 00 00 00 
2bc8d 352 00 00 00 00 
2bc91 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc95 354 FF 00 EF 6C 
2bc99 355 6C 6C 6C 6C 
2bc9d 356 6C 6C 6C 6C 
2bca1 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bca5 358 EC 0C EC 6C 
2bca9 359 6C 6C 6C 6C 
2bcad 35a 6C 6C 6C 00 
2bcb1 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2bcb5 35c FF 00 FF 00 
2bcb9 35d 00 00 00 00 
2bcbd 35e 00 00 00 6C 
2bcc1 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2bcc5 360 EF 00 EF 6C 
2bcc9 361 6C 6C 6C 6C 
2bccd 362 6C 6C 6C 00 
2bcd1 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2bcd5 364 63 3E 63 63 
2bcd9 365 63 63 3E 63 
2bcdd 366 00 00 00 00 
2bce1 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2bce5 368 30 3C 36 33 
2bce9 369 33 33 33 6E 
2bced 36a 00 00 00 00 
2bcf1 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2bcf5 36c 66 66 6F 66 
2bcf9 36d 66 66 36 1F 
2bcfd 36e 00 00 00 36 
2bd01 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2bd05 370 66 66 66 66 
2bd09 371 66 66       | 	byte	$66[6]
2bd0b 371 36 1F 00 00 
2bd0f 372 00 00 63 00 
2bd13 373 7F 66 46 16 
2bd17 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2bd1b 375 66 7F 00 00 
2bd1f 376 00 6C 38 00 
2bd23 377 38 30 30 3C 
2bd27 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2bd2b 379 33 6E 00 00 
2bd2f 37a 00 36 1C 00 
2bd33 37b 63 67 6F 7F 
2bd37 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2bd3b 37d 63 63 00 00 
2bd3f 37e 00 30 18 00 
2bd43 37f 3C 18 18 18 
2bd47 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bd4b 381 18 3C 00 00 
2bd4f 382 00 3C 66 00 
2bd53 383 3C 18 18 18 
2bd57 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bd5b 385 18 3C 00 00 
2bd5f 386 00 00 00 36 
2bd63 387 1C 08 00 3E 
2bd67 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2bd6b 389 63 3E 00 00 
2bd6f 38a 00 18 18 18 
2bd73 38b 18 18 18 18 
2bd77 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2bd7b 38d 00 00 00 00 
2bd7f 38e 00 00 00 00 
2bd83 38f 00 00 00 00 | 	byte	$00[12]
2bd87 390 F8 18 18 18 
2bd8b 391 18 18 18 18 
2bd8f 392 18 FF FF FF 
2bd93 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2bd97 394 FF FF FF FF 
2bd9b 395 FF FF FF FF 
2bd9f 396 FF          | 	byte	$ff[9]
2bda0 397 00 00 00 00 
2bda4 398 00 00 00    | 	byte	$00[7]
2bda7 398 FF FF FF FF 
2bdab 399 FF FF FF FF 
2bdaf 39a FF          | 	byte	$ff[9]
2bdb0 39b 00 00 00 7E 
2bdb4 39c 7E 5A 18 18 
2bdb8 39d 18 18 18 18 
2bdbc 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2bdc0 39f 1C 36 1C 63 
2bdc4 3a0 63 63 63 63 
2bdc8 3a1 63 63 63 63 
2bdcc 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bdd0 3a3 FF FF FF FF 
2bdd4 3a4 FF FF FF    | 	byte	$ff[7]
2bdd7 3a4 00 00 00 00 
2bddb 3a5 00 00 00 00 
2bddf 3a6 00          | 	byte	$00[9]
2bde0 3a7 30 18 00 3E 
2bde4 3a8 63 63 63 63 
2bde8 3a9 63 63 63 63 
2bdec 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bdf0 3ab 00 00 00 1E 
2bdf4 3ac 33 33 33 1B 
2bdf8 3ad 33 63 63 63 
2bdfc 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2be00 3af 1C 36 00 3E 
2be04 3b0 63 63 63 63 
2be08 3b1 63 63 63 63 
2be0c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2be10 3b3 30 18 00 63 
2be14 3b4 67 6F 7F 7B 
2be18 3b5 73 63 63 63 
2be1c 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2be20 3b7 00 00 60 30 
2be24 3b8 18 00 3B 66 
2be28 3b9 66 66 66 66 
2be2c 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2be30 3bb 00 00 36 1C 
2be34 3bc 08 00 3B 66 
2be38 3bd 66 66 66 66 
2be3c 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2be40 3bf 36 1C 00 3E 
2be44 3c0 63 63 06 1C 
2be48 3c1 30 60 63 63 
2be4c 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2be50 3c3 00 00 36 1C 
2be54 3c4 08 00 3E 63 
2be58 3c5 06 1C 30 63 
2be5c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2be60 3c7 30 18 00 3F 
2be64 3c8 66 66 66 3E 
2be68 3c9 36 66 66 66 
2be6c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2be70 3cb 30 18 00 63 
2be74 3cc 63 63 63 63 
2be78 3cd 63 63 63 63 
2be7c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2be80 3cf 00 00 60 30 
2be84 3d0 18 00 3B 6E 
2be88 3d1 66 06 06 06 
2be8c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2be90 3d3 66 33 00 63 
2be94 3d4 63 63 63 63 
2be98 3d5 63 63 63 63 
2be9c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bea0 3d7 00 00 60 30 
2bea4 3d8 18 00 63 63 
2bea8 3d9 63 63 63 63 
2beac 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2beb0 3db 30 18 00 66 
2beb4 3dc 66 66 66 3C 
2beb8 3dd 18 18 18 18 
2bebc 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2bec0 3df 00 00 00 08 
2bec4 3e0 0C 0C 3F 0C 
2bec8 3e1 0C 0C 0C 6C 
2becc 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2bed0 3e3 30 18 00 00 
2bed4 3e4 00 00 00 00 
2bed8 3e5 00 00 00 00 
2bedc 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bee0 3e7 00 00 00 00 
2bee4 3e8 00 00 00 00 | 	byte	$00[8]
2bee8 3e9 7F 00 00 00 
2beec 3ea 00 00 00 00 
2bef0 3eb 66 33 00 00 
2bef4 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2bef8 3ed 00 00 00 00 
2befc 3ee 00 00 00 00 
2bf00 3ef 00 00 00 00 
2bf04 3f0 00 00 00 00 
2bf08 3f1 00 00 00 00 
2bf0c 3f2 00          | 	byte	$00[21]
2bf0d 3f2 0C 06 3C 36 
2bf11 3f3 1C 00 00 00 
2bf15 3f4 00 00 00 00 
2bf19 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf1d 3f6 00 00 00 63 
2bf21 3f7 3E 00 00 00 
2bf25 3f8 00 00 00 00 
2bf29 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf2d 3fa 00 00 00 00 
2bf31 3fb 3E 63 06 1C 
2bf35 3fc 36 63 63 36 
2bf39 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2bf3d 3fe 00 00 00 00 
2bf41 3ff 00 00 00 00 | 	byte	$00[8]
2bf45 400 18 00 7E 00 
2bf49 401 18 00 00 00 
2bf4d 402 00 00 00 00 
2bf51 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf55 404 00 00 00 00 
2bf59 405 00 00 00 00 | 	byte	$00[8]
2bf5d 406 18 30 1E 00 
2bf61 407 00 00 1C 36 
2bf65 408 36 1C 00 00 
2bf69 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2bf6d 40a 00 00 00 00 
2bf71 40b 63 00 00 00 
2bf75 40c 00 00 00 00 
2bf79 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf7d 40e 00 00 00 18 
2bf81 40f 18 00 00 00 
2bf85 410 00 00 00 00 
2bf89 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf8d 412 00 00 00 00 
2bf91 413 00          | 	byte	$00[5]
2bf92 413 CC 66 33 00 
2bf96 414 33 33 33 33 
2bf9a 415 33 33 6E 00 
2bf9e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2bfa2 417 00 3F 66 66 
2bfa6 418 66 3E 36 66 
2bfaa 419 66 66 6F 00 
2bfae 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2bfb2 41b 36 1C 08 00 
2bfb6 41c 3B 6E 66 06 
2bfba 41d 06 06 0F 00 
2bfbe 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2bfc2 41f 00 00 00 7E 
2bfc6 420 7E 7E 7E 7E 
2bfca 421 7E 7E 00 00 
2bfce 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2bfd2 423 00 00 00 00 
2bfd6 424 00 00 00 00 
2bfda 425 00 00 00 00 
2bfde 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bfe0 427             | 'vga_font       file "vgafont.def"
2bfe0 427 00 00 00 00 
      ...             
2c010 433 00 00 00 00 
2c014 434 00 00 00    | st_font        file "st4font.def"
2c017 434 FF FF 00 00 
2c01b 435 00 00 00 00 
2c01f 436 00 18 18 18 
2c023 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c027 438 18 18 18 18 
2c02b 439 18 18 18 18 
2c02f 43a 18          | 	byte	$18[9]
2c030 43b 00 00 00 00 
2c034 43c 00 00 00    | 	byte	$00[7]
2c037 43c FF FF 18 18 
2c03b 43d 18 18 18 18 
2c03f 43e 18 18 18 18 
2c043 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c047 440 FF FF 00 00 
2c04b 441 00 00 00 00 
2c04f 442 00 18 18 18 
2c053 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c057 444 1F 1F 18 18 
2c05b 445 18 18 18 18 
2c05f 446 18 18 18 18 
2c063 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c067 448 F8 F8 18 18 
2c06b 449 18 18 18 18 
2c06f 44a 18 00 00 00 
2c073 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c077 44c 1F 1F 18 18 
2c07b 44d 18 18 18 18 
2c07f 44e 18 00 00 00 
2c083 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c087 450 F8 F8 18 18 
2c08b 451 18 18 18 18 
2c08f 452 18 18 18 18 
2c093 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c097 454 1F 1F 00 00 
2c09b 455 00 00 00 00 
2c09f 456 00 18 18 18 
2c0a3 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c0a7 458 F8 F8 00 00 
2c0ab 459 00 00 00 00 
2c0af 45a 00 18 18 18 
2c0b3 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c0b7 45c FF FF 18 18 
2c0bb 45d 18 18 18 18 
2c0bf 45e 18 00 00 18 
2c0c3 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2c0c7 460 66 7E 7E 66 
2c0cb 461 66 66 66 30 
2c0cf 462 18 00 00 7E 
2c0d3 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2c0d7 464 3E 06 06 06 
2c0db 465 06 7E 7E 18 
2c0df 466 0C 30 18 3C 
2c0e3 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2c0e7 468 06 06 06 66 
2c0eb 469 66 7E 3C 00 
2c0ef 46a 00 30 18 66 
2c0f3 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2c0f7 46c 7E 7E 76 76 
2c0fb 46d 66 66 66 00 
2c0ff 46e 00 30 18 7C 
2c103 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2c107 470 1C 38 70 60 
2c10b 471 60 7E 3E 00 
2c10f 472 00 30 18 7E 
2c113 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2c117 474 18 0C 0C 06 
2c11b 475 06 7E 7E 00 
2c11f 476 00 18 18 00 
2c123 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2c127 478 18 18 0C 0C 
2c12b 479 06 7E 7E 00 
2c12f 47a 00 30 18 3C 
2c133 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2c137 47c 66 66 66 66 
2c13b 47d 66          | 	byte	$66[5]
2c13c 47e 7E 3C 00 00 
2c140 47f 00 00 06 06 
2c144 480 06 06 16 1E 
2c148 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2c14c 482 7E 7E 00 00 
2c150 483 00 00 00 00 
2c154 484 00 3C 7C 60 
2c158 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2c15c 486 7E 7C 30 18 
2c160 487 00 00 00 00 
2c164 488 00 3C 7E 66 
2c168 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2c16c 48a 7E 7C 18 0C 
2c170 48b 00 00 30 18 
2c174 48c 00 3C 3E 06 
2c178 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2c17c 48e 7E 7C 00 00 
2c180 48f 00 00 30 18 
2c184 490 00 3E 7E 66 
2c188 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2c18c 492 66 66 00 00 
2c190 493 00 00 30 18 
2c194 494 00 7C 7E 06 
2c198 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2c19c 496 7E 3E 00 00 
2c1a0 497 00 00 30 18 
2c1a4 498 00 7E 7E 30 
2c1a8 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c1ac 49a 7E 7E 00 00 
2c1b0 49b 00 00 18 18 
2c1b4 49c 00 7E 7E 30 
2c1b8 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c1bc 49e 7E 7E 00 00 
2c1c0 49f 00 00 30 18 
2c1c4 4a0 00 3C 7E 66 
2c1c8 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2c1cc 4a2 7E 3C 00 00 
2c1d0 4a3 00 00 1C 1C 
2c1d4 4a4 18 18 38 3C 
2c1d8 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2c1dc 4a6 3C 3C 00 00 
2c1e0 4a7 00 00 00 00 
2c1e4 4a8 00 00 00 00 
2c1e8 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c1ec 4aa 00 00 00 00 
2c1f0 4ab 00 00       | 	byte	$00[6]
2c1f2 4ab 18 18 18 18 
2c1f6 4ac 18 18 18 18 | 	byte	$18[8]
2c1fa 4ad 00 00 18 18 
2c1fe 4ae 00 00 00 00 
2c202 4af 66 66 66 66 
2c206 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2c20a 4b1 00 00 00 00 
2c20e 4b2 00 00 00 00 
2c212 4b3 00          | 	byte	$00[9]
2c213 4b3 66 66 FF FF 
2c217 4b4 66 66 FF FF 
2c21b 4b5 66 66 00 00 
2c21f 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2c223 4b7 7C 7E 06 06 
2c227 4b8 3E 7C 60 60 
2c22b 4b9 7E 3E 18 18 
2c22f 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2c233 4bb 66 30 30 18 
2c237 4bc 18 0C 0C 66 
2c23b 4bd 66 00 00 00 
2c23f 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2c243 4bf 66 66 3C 1C 
2c247 4c0 1C FC FE 66 
2c24b 4c1 66 FE FC 00 
2c24f 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2c253 4c3 18 18 18 18 
2c257 4c4 00 00 00 00 
2c25b 4c5 00 00 00 00 
2c25f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2c263 4c7 18 1C 0C 0C 
2c267 4c8 0C 0C 0C 0C 
2c26b 4c9 1C 18 30 00 
2c26f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2c273 4cb 18 38 30 30 
2c277 4cc 30 30 30 30 
2c27b 4cd 38 18 0C 00 
2c27f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2c283 4cf 66 66 3C 3C 
2c287 4d0 FF FF 3C 3C 
2c28b 4d1 66 66 00 00 
2c28f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2c293 4d3 00 18 18 18 
2c297 4d4 7E 7E 18 18 
2c29b 4d5 18 00 00 00 
2c29f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c2a3 4d7 00 00 00 00 
2c2a7 4d8 00 00       | 	byte	$00[6]
2c2a9 4d9 18 18 18 18 
2c2ad 4da 18          | 	byte	$18[5]
2c2ae 4da 0C 04 00 00 
2c2b2 4db 00 00 00 00 
2c2b6 4dc 7E 7E 00 00 
2c2ba 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2c2be 4de 00 00 00 00 
2c2c2 4df 00 00 00 00 
2c2c6 4e0 00 00 00 00 
2c2ca 4e1 00          | 	byte	$00[13]
2c2cb 4e1 18 18 18 00 
2c2cf 4e2 00 00 00 60 
2c2d3 4e3 60 60 30 30 
2c2d7 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2c2db 4e5 06 06 06 00 
2c2df 4e6 00 00 00 3C 
2c2e3 4e7 7E 66 66 66 
2c2e7 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2c2eb 4e9 66 7E 3C 00 
2c2ef 4ea 00 00 00 18 
2c2f3 4eb 18 1C 1C 18 
2c2f7 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2c2fb 4ed 18 7E 7E 00 
2c2ff 4ee 00 00 00 3C 
2c303 4ef 7E 66 66 30 
2c307 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2c30b 4f1 0C 7E 7E 00 
2c30f 4f2 00 00 00 7E 
2c313 4f3 7E 30 30 18 
2c317 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2c31b 4f5 66 7E 3C 00 
2c31f 4f6 00 00 00 30 
2c323 4f7 30 38 38 3C 
2c327 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2c32b 4f9 7E 30 30 00 
2c32f 4fa 00 00 00 7E 
2c333 4fb 7E 06 06 3E 
2c337 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2c33b 4fd 66 7E 3C 00 
2c33f 4fe 00 00 00 38 
2c343 4ff 3C 0E 06 06 
2c347 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2c34b 501 66 7E 3C 00 
2c34f 502 00 00 00 7E 
2c353 503 7E 60 60 30 
2c357 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2c35b 505 0C 0C 0C 00 
2c35f 506 00 00 00 3C 
2c363 507 7E 66 66 3C 
2c367 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2c36b 509 66 7E 3C 00 
2c36f 50a 00 00 00 3C 
2c373 50b 7E 66 66 7E 
2c377 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2c37b 50d 70 3C 1C 00 
2c37f 50e 00 00 00 00 
2c383 50f 00 00 18 18 
2c387 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2c38b 511 18 18 18 00 
2c38f 512 00 00 00 00 
2c393 513 00 00 18 18 
2c397 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2c39b 515 18 18 18 0C 
2c39f 516 04 00 00 00 
2c3a3 517 70 38 1C 0E 
2c3a7 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2c3ab 519 70 00 00 00 
2c3af 51a 00 00 00 00 
2c3b3 51b 00 00 7E 7E 
2c3b7 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2c3bb 51d 00 00 00 00 
2c3bf 51e 00 00 00 00 | 	byte	$00[8]
2c3c3 51f 0E 1C 38 70 
2c3c7 520 E0 70 38 1C 
2c3cb 521 0E 00 00 00 
2c3cf 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2c3d3 523 7E 66 66 30 
2c3d7 524 30 18 18 18 
2c3db 525 00 18 18 00 
2c3df 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2c3e3 527 7E 66 66 66 
2c3e7 528 66 36 06 66 
2c3eb 529 66 7E 3C 00 
2c3ef 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2c3f3 52b 3C 7E 66 66 
2c3f7 52c 66 7E 7E 66 
2c3fb 52d 66 66 66 00 
2c3ff 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2c403 52f 7E 66 66 7E 
2c407 530 3E 66 66 66 
2c40b 531 66 7E 3E 00 
2c40f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2c413 533 7E 66 66 06 
2c417 534 06 06 06 66 
2c41b 535 66 7E 3C 00 
2c41f 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2c423 537 7E 66 66 66 
2c427 538 66 66 66 66 
2c42b 539 66 7E 3E 00 
2c42f 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2c433 53b 7E 06 06 3E 
2c437 53c 3E 06 06 06 
2c43b 53d 06 7E 7E 00 
2c43f 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2c443 53f 7E 06 06 3E 
2c447 540 3E 06 06 06 
2c44b 541 06 06 06 00 
2c44f 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2c453 543 7E 06 06 76 
2c457 544 76 66 66 66 
2c45b 545 66 7E 3C 00 
2c45f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2c463 547 66 66 66 7E 
2c467 548 7E 66 66 66 
2c46b 549 66 66 66 00 
2c46f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2c473 54b 7E 18 18 18 
2c477 54c 18 18 18 18 
2c47b 54d 18 7E 7E 00 
2c47f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2c483 54f 60 60 60 60 
2c487 550 60 60 60    | 	byte	$60[7]
2c48a 551 66 66 7E 3C 
2c48e 552 00 00 00 00 
2c492 553 66 66 36 36 
2c496 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2c49a 555 66 66 C6 C6 
2c49e 556 00 00 00 00 
2c4a2 557 06 06 06 06 
2c4a6 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2c4aa 559 06 06 7E 7E 
2c4ae 55a 00 00 00 00 
2c4b2 55b C6 C6 EE EE 
2c4b6 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2c4ba 55d C6 C6 C6 C6 
2c4be 55e 00 00 00 00 
2c4c2 55f 66 66 66 6E 
2c4c6 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2c4ca 561 76 66 66 66 
2c4ce 562 00 00 00 00 
2c4d2 563 3C 7E 66 66 
2c4d6 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c4da 565 66 66 7E 3C 
2c4de 566 00 00 00 00 
2c4e2 567 3E 7E 66 66 
2c4e6 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2c4ea 569 06 06 06 06 
2c4ee 56a 00 00 00 00 
2c4f2 56b 3C 7E 66 66 
2c4f6 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c4fa 56d 66 56 3E 6C 
2c4fe 56e 00 00 00 00 
2c502 56f 3E 7E 66 66 
2c506 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2c50a 571 66 66 C6 C6 
2c50e 572 00 00 00 00 
2c512 573 7C 7E 06 06 
2c516 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2c51a 575 60 60 7E 3E 
2c51e 576 00 00 00 00 
2c522 577 7E 7E 18 18 
2c526 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2c52a 579 18 18 18 18 
2c52e 57a 00 00 00 00 
2c532 57b 66 66 66 66 
2c536 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c53a 57d 66 66 7E 3C 
2c53e 57e 00 00 00 00 
2c542 57f 66 66 66 66 
2c546 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c54a 581 3C 3C 18 18 
2c54e 582 00 00 00 00 
2c552 583 C6 C6 C6 C6 
2c556 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2c55a 585 FE EE C6 82 
2c55e 586 00 00 00 00 
2c562 587 66 66 66 3C 
2c566 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2c56a 589 3C 66 66 66 
2c56e 58a 00 00 00 00 
2c572 58b 66 66 66 66 
2c576 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2c57a 58d 18 18 18 18 
2c57e 58e 00 00 00 00 
2c582 58f 7E 7E 30 30 
2c586 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2c58a 591 06 06 7E 7E 
2c58e 592 00 00 00 00 
2c592 593 3C 3C 0C 0C 
2c596 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2c59a 595 0C 0C 3C 3C 
2c59e 596 00 00 00 00 
2c5a2 597 06 06 0C 0C 
2c5a6 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2c5aa 599 60 60 C0 C0 
2c5ae 59a 00 00 00 00 
2c5b2 59b 3C 3C 30 30 
2c5b6 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2c5ba 59d 30 30 3C 3C 
2c5be 59e 00 00 00 00 
2c5c2 59f 18 18 3C 3C 
2c5c6 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2c5ca 5a1 00 00 00 00 
2c5ce 5a2 00 00 00 00 
2c5d2 5a3 00 00 00 00 
2c5d6 5a4 00 00 00 00 
2c5da 5a5 00 00       | 	byte	$00[18]
2c5dc 5a6 FE FE 00 00 
2c5e0 5a7 00 00 0C 0C 
2c5e4 5a8 18 18 00 00 
2c5e8 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2c5ec 5aa 00 00 00 00 
2c5f0 5ab 00 00 00 00 
2c5f4 5ac 00          | 	byte	$00[9]
2c5f5 5ac 3C 7C 60 7C 
2c5f9 5ad 7E 66 66 7E 
2c5fd 5ae 7C 00 00 00 
2c601 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2c605 5b0 3E 7E 66 66 
2c609 5b1 66 66 66 7E 
2c60d 5b2 3E 00 00 00 
2c611 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2c615 5b4 3C 3E 06 06 
2c619 5b5 06 06 06 7E 
2c61d 5b6 7C 00 00 00 
2c621 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2c625 5b8 7C 7E 66 66 
2c629 5b9 66 66 66 7E 
2c62d 5ba 7C 00 00 00 
2c631 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2c635 5bc 3C 7E 66 66 
2c639 5bd 7E 06 06 7E 
2c63d 5be 7C 00 00 00 
2c641 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2c645 5c0 18 7E 7E 18 
2c649 5c1 18 18 18 18 
2c64d 5c2 18 00 00 00 
2c651 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c655 5c4 7C 7E 66 66 
2c659 5c5 66 66 7E 7C 
2c65d 5c6 60 7E 3E 00 
2c661 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2c665 5c8 3E 7E 66 66 
2c669 5c9 66 66 66 66 
2c66d 5ca 66 00 00 00 
2c671 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2c675 5cc 1C 1C 18 18 
2c679 5cd 18 18 18 3C 
2c67d 5ce 3C 00 00 00 
2c681 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2c685 5d0 30 30 30 30 
2c689 5d1 30 30 30 30 
2c68d 5d2 30          | 	byte	$30[9]
2c68e 5d2 3E 1E 00 00 
2c692 5d3 06 06 06 36 
2c696 5d4 36 1E 1E 1E 
2c69a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2c69e 5d6 00 00 00 00 
2c6a2 5d7 1C 1C 18 18 
2c6a6 5d8 18 18 18 18 
2c6aa 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2c6ae 5da 00 00 00 00 
2c6b2 5db 00 00 00    | 	byte	$00[7]
2c6b5 5dc 6C FE FE D6 
2c6b9 5dd D6 C6 C6 C6 
2c6bd 5de C6 00 00 00 
2c6c1 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2c6c5 5e0 3E 7E 66 66 
2c6c9 5e1 66 66 66 66 
2c6cd 5e2 66 00 00 00 
2c6d1 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2c6d5 5e4 3C 7E 66 66 
2c6d9 5e5 66 66 66 7E 
2c6dd 5e6 3C 00 00 00 
2c6e1 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2c6e5 5e8 3E 7E 66 66 
2c6e9 5e9 66 66 66 7E 
2c6ed 5ea 3E 06 06 00 
2c6f1 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2c6f5 5ec 7C 7E 66 66 
2c6f9 5ed 66 66 66 7E 
2c6fd 5ee 7C 60 60 00 
2c701 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2c705 5f0 3E 7E 66 06 
2c709 5f1 06 06 06 06 
2c70d 5f2 06 00 00 00 
2c711 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2c715 5f4 7C 7E 06 0E 
2c719 5f5 3C 70 60 7E 
2c71d 5f6 3E 00 00 00 
2c721 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2c725 5f8 7E 7E 18 18 
2c729 5f9 18 18 18 78 
2c72d 5fa 70 00 00 00 
2c731 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2c735 5fc 66 66 66 66 
2c739 5fd 66 66 66    | 	byte	$66[7]
2c73c 5fe 7E 7C 00 00 
2c740 5ff 00 00 00 00 
2c744 600 00 66 66 66 
2c748 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2c74c 602 18 18 00 00 
2c750 603 00 00 00 00 
2c754 604 00 C6 C6 D6 
2c758 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2c75c 606 C6 82 00 00 
2c760 607 00 00 00 00 
2c764 608 00 66 66 3C 
2c768 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2c76c 60a 66 66 00 00 
2c770 60b 00 00 00 00 
2c774 60c 00 66 66 66 
2c778 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2c77c 60e 7C 60 7E 3E 
2c780 60f 00 00 00 00 
2c784 610 00 7E 7E 30 
2c788 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c78c 612 7E 7E 00 00 
2c790 613 00 00 30 18 
2c794 614 18 18 18 0C 
2c798 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2c79c 616 18 30 00 00 
2c7a0 617 00 00 18 18 
2c7a4 618 18 18 18 18 
2c7a8 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c7ac 61a 18 18 00 00 
2c7b0 61b 00 00 0C 18 
2c7b4 61c 18 18 18 30 
2c7b8 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2c7bc 61e 18 0C 00 00 
2c7c0 61f 00 00 6C 7E 
2c7c4 620 36 00 00 00 
2c7c8 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2c7cc 622 00 00 00 00 
2c7d0 623 00 00 00 00 
2c7d4 624 00          | 	byte	$00[9]
2c7d5 624 18 18 18 18 
2c7d9 625 18 18 00 00 
2c7dd 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2c7e0 627             | 'amiga_font     file "amigafont.def"
2c7e0 627 00 6C FE FE 
2c7e4 628 7C 38 10 00 
2c7e8 629 18 18 18 F8 
2c7ec 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2c7f0 62b C0 C0 C0 C0 
2c7f4 62c C0 C0 C0 C0 | 	byte	$c0[8]
2c7f8 62d 18 18 18 1F 
2c7fc 62e 1F 00 00 00 
2c800 62f 18 18 18 1F 
2c804 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2c808 631 00 00 00 1F 
2c80c 632 1F 18 18 18 
2c810 633 C0 E0 70 38 
2c814 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2c818 635 03 07 0E 1C 
2c81c 636 38 70 E0 C0 
2c820 637 80 C0 E0 F0 
2c824 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2c828 639 00 00 00 00 
2c82c 63a F0 F0 F0 F0 
2c830 63b 01 03 07 0F 
2c834 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2c838 63d F0 F0 F0 F0 
2c83c 63e 00 00 00 00 
2c840 63f 0F 0F 0F 0F 
2c844 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2c848 641 FF FF 00 00 
2c84c 642 00 00 00 00 
2c850 643 00 00 00 00 
2c854 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2c858 645 00 00 00 00 
2c85c 646 0F 0F 0F 0F 
2c860 647 00 38 38 EE 
2c864 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2c868 649 00 00 00 F8 
2c86c 64a F8 18 18 18 
2c870 64b 00 00 00 FF 
2c874 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2c878 64d 18 18 18 FF 
2c87c 64e FF 18 18 18 
2c880 64f 00 00 3C 7E 
2c884 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2c888 651 00 00 00 00 
2c88c 652 FF FF FF FF 
2c890 653 03 03 03 03 
2c894 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2c898 655 00 00 00 FF 
2c89c 656 FF 18 18 18 
2c8a0 657 18 18 18 FF 
2c8a4 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2c8a8 659 0F 0F 0F 0F 
2c8ac 65a 0F 0F 0F 0F | 	byte	$0f[8]
2c8b0 65b 18 18 18 F8 
2c8b4 65c F8 00 00 00 
2c8b8 65d 1E 06 1E 06 
2c8bc 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2c8c0 65f 00 18 3C 7E 
2c8c4 660 18 18 18 00 
2c8c8 661 00 18 18 18 
2c8cc 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2c8d0 663 00 18 0C 7E 
2c8d4 664 0C 18 00 00 
2c8d8 665 00 18 30 7E 
2c8dc 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2c8e0 667 00 00 00 00 
2c8e4 668 00 00 00 00 
2c8e8 669 00          | 	byte	$00[9]
2c8e9 669 18 18 18 18 
2c8ed 66a 00 18 00 00 
2c8f1 66b 66 66 66 00 
2c8f5 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2c8f9 66d 66 FF 66 66 
2c8fd 66e FF 66 00 18 
2c901 66f 7C 06 3C 60 
2c905 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2c909 671 66 36 18 0C 
2c90d 672 66 62 00 38 
2c911 673 6C 38 1C F6 
2c915 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2c919 675 18 18 18 00 
2c91d 676 00 00 00 00 
2c921 677 70 38 18 18 
2c925 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2c929 679 0E 1C 18 18 
2c92d 67a 1C 0E 00 00 
2c931 67b 66 3C FF 3C 
2c935 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2c939 67d 18 18 7E 18 
2c93d 67e 18 00 00 00 
2c941 67f 00 00 00 00 
2c945 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2c949 681 00 00 7E 00 
2c94d 682 00 00 00 00 
2c951 683 00 00 00 00 
2c955 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2c959 685 60 30 18 0C 
2c95d 686 06 02 00 00 
2c961 687 3C 66 76 6E 
2c965 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2c969 689 18 1C 18 18 
2c96d 68a 18 7E 00 00 
2c971 68b 3C 66 30 18 
2c975 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2c979 68d 7E 30 18 30 
2c97d 68e 66 3C 00 00 
2c981 68f 30 38 3C 36 
2c985 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2c989 691 7E 06 3E 60 
2c98d 692 66 3C 00 00 
2c991 693 3C 06 3E 66 
2c995 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2c999 695 7E 60 30 18 
2c99d 696 0C 0C 00 00 
2c9a1 697 3C 66 3C 66 
2c9a5 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2c9a9 699 3C 66 7C 60 
2c9ad 69a 30 1C 00 00 
2c9b1 69b 00 18 18 00 
2c9b5 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2c9b9 69d 00 18 18 00 
2c9bd 69e 18 18 0C 60 
2c9c1 69f 30 18 0C 18 
2c9c5 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2c9c9 6a1 00 7E 00 00 
2c9cd 6a2 7E 00 00 06 
2c9d1 6a3 0C 18 30 18 
2c9d5 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2c9d9 6a5 3C 66 30 18 
2c9dd 6a6 00 18 00 00 
2c9e1 6a7 3C 66 76 76 
2c9e5 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2c9e9 6a9 18 3C 66 66 
2c9ed 6aa 7E 66 00 00 
2c9f1 6ab 3E 66 3E 66 
2c9f5 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2c9f9 6ad 3C 66 06 06 
2c9fd 6ae 66 3C 00 00 
2ca01 6af 1E 36 66 66 
2ca05 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2ca09 6b1 7E 06 3E 06 
2ca0d 6b2 06 7E 00 00 
2ca11 6b3 7E 06 3E 06 
2ca15 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2ca19 6b5 7C 06 06 76 
2ca1d 6b6 66 7C 00 00 
2ca21 6b7 66 66 7E 66 
2ca25 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2ca29 6b9 7E 18 18 18 
2ca2d 6ba 18 7E 00 00 
2ca31 6bb 60 60 60 60 
2ca35 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2ca39 6bd 66 36 1E 1E 
2ca3d 6be 36 66 00 00 
2ca41 6bf 06 06 06 06 
2ca45 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2ca49 6c1 C6 EE FE D6 
2ca4d 6c2 C6 C6 00 00 
2ca51 6c3 66 6E 7E 7E 
2ca55 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2ca59 6c5 3C 66 66 66 
2ca5d 6c6 66 3C 00 00 
2ca61 6c7 3E 66 66 3E 
2ca65 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2ca69 6c9 3C 66 66 66 
2ca6d 6ca 36 6C 00 00 
2ca71 6cb 3E 66 66 3E 
2ca75 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2ca79 6cd 3C 06 3C 60 
2ca7d 6ce 60 3C 00 00 
2ca81 6cf 7E 18 18 18 
2ca85 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2ca89 6d1 66 66 66 66 
2ca8d 6d2 66          | 	byte	$66[5]
2ca8e 6d2 7E 00 00 66 
2ca92 6d3 66 66 66 3C 
2ca96 6d4 18 00 00 C6 
2ca9a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2ca9e 6d6 C6 00 00 66 
2caa2 6d7 66 3C 3C 66 
2caa6 6d8 66 00 00 66 
2caaa 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2caae 6da 18 00 00 7E 
2cab2 6db 30 18 0C 06 
2cab6 6dc 7E 00 00 78 
2caba 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2cabe 6de 78 00 00 02 
2cac2 6df 06 0C 18 30 
2cac6 6e0 60 00 00 1E 
2caca 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2cace 6e2 1E 00 00 10 
2cad2 6e3 38 6C C6 00 
2cad6 6e4 00 00 00 00 
2cada 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cade 6e6 FF 00 00 18 
2cae2 6e7 3C 7E 7E 3C 
2cae6 6e8 18 00 00 00 
2caea 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2caee 6ea 7C 00 00 06 
2caf2 6eb 06 3E 66 66 
2caf6 6ec 3E 00 00 00 
2cafa 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2cafe 6ee 3C 00 00 60 
2cb02 6ef 60 7C 66 66 
2cb06 6f0 7C 00 00 00 
2cb0a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2cb0e 6f2 3C 00 00 70 
2cb12 6f3 18 7C 18 18 
2cb16 6f4 18 00 00 00 
2cb1a 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2cb1e 6f6 60 3E 00 06 
2cb22 6f7 06 3E 66 66 
2cb26 6f8 66 00 00 18 
2cb2a 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2cb2e 6fa 3C 00 00 60 
2cb32 6fb 00 60 60 60 
2cb36 6fc 60 3C 00 06 
2cb3a 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2cb3e 6fe 66 00 00 1C 
2cb42 6ff 18 18 18 18 
2cb46 700 3C 00 00 00 
2cb4a 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2cb4e 702 C6 00 00 00 
2cb52 703 3E 66 66 66 
2cb56 704 66 00 00 00 
2cb5a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2cb5e 706 3C 00 00 00 
2cb62 707 3E 66 66 3E 
2cb66 708 06 06 00 00 
2cb6a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2cb6e 70a 60 60 00 00 
2cb72 70b 3E 66 06 06 
2cb76 70c 06 00 00 00 
2cb7a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2cb7e 70e 3E 00 00 18 
2cb82 70f 7E 18 18 18 
2cb86 710 70 00 00 00 
2cb8a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2cb8e 712 7C 00 00 00 
2cb92 713 66 66 66 3C 
2cb96 714 18 00 00 00 
2cb9a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2cb9e 716 6C 00 00 00 
2cba2 717 66 3C 18 3C 
2cba6 718 66 00 00 00 
2cbaa 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2cbae 71a 30 1E 00 00 
2cbb2 71b 7E 30 18 0C 
2cbb6 71c 7E 00 00 18 
2cbba 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2cbbe 71e 3C 00 18 18 
2cbc2 71f 18 18 18 18 
2cbc6 720 18 18 00 7E 
2cbca 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2cbce 722 60 00 10 18 
2cbd2 723 1C 1E 1C 18 
2cbd6 724 10 00 08 18 
2cbda 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2cbde 726 08 00       | 	byte	$08, $00
2cbe0 727 00 00 00 00 
2cbe4 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2cbe5 728 80 00 00 00 
2cbe9 729 00 80 00 00 
2cbed 72a 80 80 00 00 
2cbf1 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2cbf5 72c 80 00 80 00 
2cbf9 72d 00 40 80 00 
2cbfd 72e AA AA AA 00 
2cc01 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2cc05 730 FF 00 00 00 
2cc09 731 00 FF 00 00 
2cc0d 732 FF FF 00 00 
2cc11 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2cc15 734 FF 00 FF 00 
2cc19 735 00 FF FF 00 
2cc1d 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2cc20 737 00 00 00 00 
2cc24 738 00          | ataripalette   file "ataripalettep2.def"
2cc25 738 11 11 11 00 
2cc29 739 22 22 22 00 
2cc2d 73a 33 33 33 00 
2cc31 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2cc35 73c 55 55 55 00 
2cc39 73d 66 66 66 00 
2cc3d 73e 77 77 77 00 
2cc41 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2cc45 740 99 99 99 00 
2cc49 741 AA AA AA 00 
2cc4d 742 BB BB BB 00 
2cc51 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2cc55 744 DD DD DD 00 
2cc59 745 EE EE EE 00 
2cc5d 746 FF FF FF 00 
2cc61 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2cc65 748 00 14 40 00 
2cc69 749 00 1E 60 00 
2cc6d 74a 00 28 80 00 
2cc71 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2cc75 74c 00 3C BF 00 
2cc79 74d 00 46 DF 00 
2cc7d 74e 00 50 FF 00 
2cc81 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2cc85 750 39 77 FF 00 
2cc89 751 55 8A FF 00 
2cc8d 752 71 9E FF 00 
2cc91 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2cc95 754 AA C5 FF 00 
2cc99 755 C6 D8 FF 00 
2cc9d 756 E3 EC FF 00 
2cca1 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2cca5 758 00 00 40 00 
2cca9 759 00 00 60 00 
2ccad 75a 00 00 80 00 
2ccb1 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2ccb5 75c 00 00 BF 00 
2ccb9 75d 00 00 DF 00 
2ccbd 75e 00 00 FF 00 
2ccc1 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2ccc5 760 39 39 FF 00 
2ccc9 761 55 55 FF 00 
2cccd 762 71 71 FF 00 
2ccd1 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2ccd5 764 AA AA FF 00 
2ccd9 765 C6 C6 FF 00 
2ccdd 766 E3 E3 FF 00 
2cce1 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2cce5 768 20 00 40 00 
2cce9 769 30 00 60 00 
2cced 76a 40 00 80 00 
2ccf1 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2ccf5 76c 60 00 BF 00 
2ccf9 76d 70 00 DF 00 
2ccfd 76e 80 00 FF 00 
2cd01 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2cd05 770 9C 39 FF 00 
2cd09 771 AA 55 FF 00 
2cd0d 772 B8 71 FF 00 
2cd11 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2cd15 774 D5 AA FF 00 
2cd19 775 E3 C6 FF 00 
2cd1d 776 F1 E3 FF 00 
2cd21 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2cd25 778 40 00 40 00 
2cd29 779 60 00 60 00 
2cd2d 77a 80 00 80 00 
2cd31 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2cd35 77c BF 00 BF 00 
2cd39 77d DF 00 DF 00 
2cd3d 77e FF 00 FF 00 
2cd41 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2cd45 780 FF 39 FF 00 
2cd49 781 FF 55 FF 00 
2cd4d 782 FF 71 FF 00 
2cd51 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2cd55 784 FF AA FF 00 
2cd59 785 FF C6 FF 00 
2cd5d 786 FF E3 FF 00 
2cd61 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2cd65 788 40 00 20 00 
2cd69 789 60 00 30 00 
2cd6d 78a 80 00 40 00 
2cd71 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2cd75 78c BF 00 60 00 
2cd79 78d DF 00 70 00 
2cd7d 78e FF 00 80 00 
2cd81 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2cd85 790 FF 39 9C 00 
2cd89 791 FF 55 AA 00 
2cd8d 792 FF 71 B8 00 
2cd91 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2cd95 794 FF AA D5 00 
2cd99 795 FF C6 E3 00 
2cd9d 796 FF E3 F1 00 
2cda1 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2cda5 798 40 00 00 00 
2cda9 799 60 00 00 00 
2cdad 79a 80 00 00 00 
2cdb1 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2cdb5 79c BF 00 00 00 
2cdb9 79d DF 00 00 00 
2cdbd 79e FF 00 00 00 
2cdc1 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2cdc5 7a0 FF 39 39 00 
2cdc9 7a1 FF 55 55 00 
2cdcd 7a2 FF 71 71 00 
2cdd1 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2cdd5 7a4 FF AA AA 00 
2cdd9 7a5 FF C6 C6 00 
2cddd 7a6 FF E3 E3 00 
2cde1 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2cde5 7a8 40 10 00 00 
2cde9 7a9 60 18 00 00 
2cded 7aa 80 20 00 00 
2cdf1 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2cdf5 7ac BF 30 00 00 
2cdf9 7ad DF 38 00 00 
2cdfd 7ae FF 40 00 00 
2ce01 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2ce05 7b0 FF 6A 39 00 
2ce09 7b1 FF 80 55 00 
2ce0d 7b2 FF 95 71 00 
2ce11 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2ce15 7b4 FF BF AA 00 
2ce19 7b5 FF D5 C6 00 
2ce1d 7b6 FF EA E3 00 
2ce21 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2ce25 7b8 40 20 00 00 
2ce29 7b9 60 30 00 00 
2ce2d 7ba 80 40 00 00 
2ce31 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2ce35 7bc BF 60 00 00 
2ce39 7bd DF 70 00 00 
2ce3d 7be FF 80 00 00 
2ce41 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2ce45 7c0 FF 9C 39 00 
2ce49 7c1 FF AA 55 00 
2ce4d 7c2 FF B8 71 00 
2ce51 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2ce55 7c4 FF D5 AA 00 
2ce59 7c5 FF E3 C6 00 
2ce5d 7c6 FF F1 E3 00 
2ce61 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2ce65 7c8 40 30 00 00 
2ce69 7c9 60 48 00 00 
2ce6d 7ca 80 60 00 00 
2ce71 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2ce75 7cc BF 90 00 00 
2ce79 7cd DF A8 00 00 
2ce7d 7ce FF C0 00 00 
2ce81 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2ce85 7d0 FF CE 39 00 
2ce89 7d1 FF D5 55 00 
2ce8d 7d2 FF DC 71 00 
2ce91 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2ce95 7d4 FF EA AA 00 
2ce99 7d5 FF F1 C6 00 
2ce9d 7d6 FF F8 E3 00 
2cea1 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2cea5 7d8 30 40 00 00 
2cea9 7d9 48 60 00 00 
2cead 7da 60 80 00 00 
2ceb1 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2ceb5 7dc 90 BF 00 00 
2ceb9 7dd A8 DF 00 00 
2cebd 7de C0 FF 00 00 
2cec1 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2cec5 7e0 CE FF 39 00 
2cec9 7e1 D5 FF 55 00 
2cecd 7e2 DC FF 71 00 
2ced1 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2ced5 7e4 EA FF AA 00 
2ced9 7e5 F1 FF C6 00 
2cedd 7e6 F8 FF E3 00 
2cee1 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2cee5 7e8 00 40 00 00 
2cee9 7e9 00 60 00 00 
2ceed 7ea 00 80 00 00 
2cef1 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2cef5 7ec 00 BF 00 00 
2cef9 7ed 00 DF 00 00 
2cefd 7ee 00 FF 00 00 
2cf01 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2cf05 7f0 39 FF 39 00 
2cf09 7f1 55 FF 55 00 
2cf0d 7f2 71 FF 71 00 
2cf11 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2cf15 7f4 AA FF AA 00 
2cf19 7f5 C6 FF C6 00 
2cf1d 7f6 E3 FF E3 00 
2cf21 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2cf25 7f8 00 40 14 00 
2cf29 7f9 00 60 1E 00 
2cf2d 7fa 00 80 28 00 
2cf31 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2cf35 7fc 00 BF 3C 00 
2cf39 7fd 00 DF 46 00 
2cf3d 7fe 00 FF 50 00 
2cf41 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2cf45 800 39 FF 77 00 
2cf49 801 55 FF 8A 00 
2cf4d 802 71 FF 9E 00 
2cf51 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2cf55 804 AA FF C5 00 
2cf59 805 C6 FF D8 00 
2cf5d 806 E3 FF EC 00 
2cf61 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2cf65 808 00 40 28 00 
2cf69 809 00 60 3C 00 
2cf6d 80a 00 80 50 00 
2cf71 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2cf75 80c 00 BF 78 00 
2cf79 80d 00 DF 8C 00 
2cf7d 80e 00 FF A0 00 
2cf81 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2cf85 810 39 FF B5 00 
2cf89 811 55 FF C0 00 
2cf8d 812 71 FF CA 00 
2cf91 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2cf95 814 AA FF DF 00 
2cf99 815 C6 FF EA 00 
2cf9d 816 E3 FF F4 00 
2cfa1 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2cfa5 818 00 40 40 00 
2cfa9 819 00 60 60 00 
2cfad 81a 00 80 80 00 
2cfb1 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2cfb5 81c 00 BF BF 00 
2cfb9 81d 00 DF DF 00 
2cfbd 81e 00 FF FF 00 
2cfc1 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2cfc5 820 39 FF FF 00 
2cfc9 821 55 FF FF 00 
2cfcd 822 71 FF FF 00 
2cfd1 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2cfd5 824 AA FF FF 00 
2cfd9 825 C6 FF FF 00 
2cfdd 826 E3 FF FF 00 
2cfe1 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2cfe5 828 00 28 40 00 
2cfe9 829 00 3C 60 00 
2cfed 82a 00 50 80 00 
2cff1 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2cff5 82c 00 78 BF 00 
2cff9 82d 00 8C DF 00 
2cffd 82e 00 A0 FF 00 
2d001 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2d005 830 39 B5 FF 00 
2d009 831 55 C0 FF 00 
2d00d 832 71 CA FF 00 
2d011 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2d015 834 AA DF FF 00 
2d019 835 C6 EA FF 00 
2d01d 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2d020 837             | 
2d020 837             | '**********************************************************************************
2d020 837             | '
2d020 837             | '        Timings and colors definitions
2d020 837             | '
2d020 837             | '**********************************************************************************
2d020 837             | 
2d020 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2d020 837 10 00 00 00 
2d024 838 50 00 00 00 
2d028 839 0C 00 00 00 
2d02c 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2d030 83b 08 00 00 00 
2d034 83c 04 00 00 00 
2d038 83d 08 00 00 00 
2d03c 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2d040 83f 40 02 00 00 
2d044 840 6A 8C 15 14 
2d048 841 FB 06 B7 01 
2d04c 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2d050 843 00 00 00 00 
2d054 844 C0 00 00 00 
2d058 845 00 00 00 00 
2d05c 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d060 847 00 75 C7 97 
2d064 848 27 47 F6 0A 
2d068 849 05 79 CB 9B 
2d06c 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2d070 84b             | 
2d070 84b             | ''--------  Initialization  ----------------------------------------------------------------
2d070 84b             | 
2d070 84b 28 0C 64 FD | hdmi            setq    #6
2d074 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2d078 84d 28 10 64 FD |                 setq    #8
2d07c 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2d080 84f             | 
2d080 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2d084 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2d088 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2d08c 852 D6 C6 01 F1 |                 add     t1,hbase
2d090 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2d094 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2d098 855 7B 0B 80 5F 
2d09c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2d0a0 857 66 66 86 FF 
2d0a4 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2d0a8 859             | '
2d0a8 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2d0ac 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2d0b0 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2d0b4 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2d0b8 85d             | 
2d0b8 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2d0bc 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2d0c0 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2d0c4 860             | 
2d0c4 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2d0c4 860             | 
2d0c4 860 28 06 64 FD | p101            setq 	#3
2d0c8 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2d0cc 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2d0d0 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2d0d4 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2d0d8 865 00 A0 05 F6 |                 mov     dlinum, #0
2d0dc 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2d0e0 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2d0e4 868             | 
2d0e4 868             | 
2d0e4 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2d0e8 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2d0ec 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2d0f0 86b             |                 
2d0f0 86b             | 
2d0f0 86b             | 
2d0f0 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2d0f0 86b             |   
2d0f0 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2d0f4 86c 29 FE 65 3D |          if_nc  setq2   #255
2d0f8 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2d0fc 86e             | 
2d0fc 86e             | '' -----   up porch (before the picture)
2d0fc 86e             | 
2d0fc 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2d100 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2d104 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2d108 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2d10c 872             |  
2d10c 872             |    
2d10c 872             |  
2d10c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d110 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d114 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2d118 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d11c 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d120 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2d124 878             | 
2d124 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d128 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d12c 87a 48 00 B0 FD | 		call    #dli
2d130 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d134 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2d138 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2d13c 87e             |                 	
2d13c 87e             |                 
2d13c 87e             | 
2d13c 87e             |  
2d13c 87e             | '' ------- the main screen drawing starts here
2d13c 87e             | 
2d13c 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2d140 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2d144 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2d148 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2d14c 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2d150 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2d154 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2d158 885             |               
2d158 885             | 
2d158 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2d15c 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2d160 887             | 
2d160 887             | ' ---------------- All visible lines displayed now, start vblank  
2d160 887             | 
2d160 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2d164 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2d168 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2d16c 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2d170 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2d174 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2d178 88d             | 
2d178 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2d178 88d             | 
2d178 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2d178 88d             | 
2d178 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2d17c 88e             | 
2d17c 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2d180 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2d184 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2d188 891             | 
2d188 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2d18c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2d190 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2d194 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2d198 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2d19c 896             | 
2d19c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2d1a0 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2d1a4 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2d1a8 899 70 00 90 AD |     if_z        jmp     #preload
2d1ac 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2d1b0 89b 94 00 90 AD |     if_z        jmp     #preload2
2d1b4 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2d1b8 89d 0C 00 90 AD |     if_z        jmp     #p390
2d1bc 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2d1c0 89f 28 00 90 AD |     if_z        jmp     #p391  
2d1c4 8a0             | 
2d1c4 8a0 2D 00 64 FD | p308            ret
2d1c8 8a1             |    
2d1c8 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2d1cc 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2d1d0 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2d1d4 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2d1d8 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2d1dc 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2d1e0 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2d1e4 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2d1e8 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2d1ec 8aa             |  
2d1ec 8aa             | '' --------  Reload palette. To do 
2d1ec 8aa             | 
2d1ec 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2d1f0 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2d1f4 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2d1f8 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2d1fc 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2d200 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2d204 8b0 70 FF 9F FD |         	jmp     #dli                
2d208 8b1             |       
2d208 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2d208 8b1             | 
2d208 8b1             | 
2d208 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2d208 8b1             | 
2d208 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2d20c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d210 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d214 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d218 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2d21c 8b6             |         
2d21c 8b6             | '' -------------- Preload a line from PSRAM        
2d21c 8b6             |         
2d21c 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2d220 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2d224 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2d228 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2d22c 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2d230 8bb             | 
2d230 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2d234 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2d238 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2d23c 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2d240 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2d244 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2d248 8c1             |  
2d248 8c1             |  
2d248 8c1             | preload2      '  incmod  dlinum,#3
2d248 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2d24c 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2d250 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2d254 8c4 28 02 64 FD |                 setq	#1
2d258 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2d25c 8c6             |                 
2d25c 8c6             | 
2d25c 8c6             | '' -------------- Draw sprites
2d25c 8c6             | 
2d25c 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2d260 8c7 10 5C 0E F5 | 		and t8,#16 wz
2d264 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2d268 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2d26c 8ca             | 		
2d26c 8ca             | 
2d26c 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2d270 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2d274 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2d278 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2d27c 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2d280 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2d284 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2d288 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2d28c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d290 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2d294 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2d298 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d29c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2d2a0 8d7             | 
2d2a0 8d7             | 
2d2a0 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2d2a4 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2d2a8 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2d2ac 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2d2b0 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2d2b4 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2d2b8 8dd 00 5E 06 F6 |                 mov 	t9,#0
2d2bc 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2d2c0 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2d2c4 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2d2c8 8e1             |      
2d2c8 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2d2cc 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2d2d0 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2d2d4 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2d2d8 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2d2dc 8e6             |                 
2d2dc 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2d2e0 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2d2e4 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2d2e8 8e9             |   		
2d2e8 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2d2ec 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2d2f0 8eb             | 
2d2f0 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2d2f4 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2d2f8 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2d2fc 8ee             |  
2d2fc 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2d300 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2d304 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2d308 8f1             | 	
2d308 8f1             | 	
2d308 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2d30c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2d310 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2d314 8f4             | 
2d314 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2d318 8f5             | 
2d318 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2d31c 8f6 01 58 86 F1 | 	 	sub     t6,#1
2d320 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2d324 8f8             | 
2d324 8f8 28 58 62 FD |                 setq   	t6
2d328 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2d32c 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2d330 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2d334 8fc 24 00 90 AD |         if_z    jmp #p898
2d338 8fd             |          
2d338 8fd             |         
2d338 8fd 70 5F 06 F6 |                 mov  t9,#368
2d33c 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2d340 8ff             | 
2d340 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2d344 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2d348 901 FF FF 7F FF 
2d34c 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2d350 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2d354 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2d358 905 2D 01 00 F5 |                 and 0-0, t7
2d35c 906             |                
2d35c 906             | 
2d35c 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2d360 907 E5 E0 7A FA |                 wmlong 368,t3				
2d364 908             |                 
2d364 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2d368 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2d36c 90a 2D 00 64 FD |                 ret
2d370 90b             | 	
2d370 90b             | 	
2d370 90b             |                
2d370 90b             |  
2d370 90b             | '' -------------- Graphics line ------------------------------------------------------------
2d370 90b             |  
2d370 90b             | 
2d370 90b             | '' consts and vars
2d370 90b             | 
2d370 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2d374 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2d378 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2d37c 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2d380 90f             | 
2d380 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2d384 910             | 
2d384 910             | '------ these longs will be set by setmode function
2d384 910             | 
2d384 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2d388 911 00 00 00 00 | m_sn            long    0        'sync
2d38c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2d390 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2d394 914             | 'm_border        long    0        'left/right borders
2d394 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2d398 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2d39c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2d3a0 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2d3a4 918 00 00 00 00 | i_totalvis      long    0
2d3a8 919             | 
2d3a8 919             | '-------------------------------------
2d3a8 919             |  
2d3a8 919 00 00 00 00 | linenum         long    0
2d3ac 91a 00 00 00 00 | frames          long    0
2d3b0 91b 00 00 00 00 | dlinum long 0
2d3b4 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2d3b8 91d             | 
2d3b8 91d 00 00 00 00 | vblankptr       long    0
2d3bc 91e 00 00 00 00 | modeptr         long    0
2d3c0 91f 00 00 00 00 | paletteptr      long    0
2d3c4 920 00 00 00 00 | dlptr           long    0
2d3c8 921 01 00 00 00 | hbase           long    1
2d3cc 922 00 00 00 00 | mailbox         long    0
2d3d0 923 00 00 00 00 | spriteptr          long 0
2d3d4 924             | 
2d3d4 924 00 00 00 00 | cmd             long    0
2d3d8 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2d3dc 926 00 04 00 00 | buf2            long    1024
2d3e0 927 01 00 00 00 | dlptr2          long    1
2d3e4 928 01 00 00 00 | dl              long    1
2d3e8 929             | 
2d3e8 929 00 00 00 00 | buf1c long 0
2d3ec 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2d3f0 92b 01 00 00 00 | framebuf2       long    1
2d3f4 92c 01 00 00 00 | hsync0          long    1
2d3f8 92d 01 00 00 00 | hsync1          long    1
2d3fc 92e             | 
2d3fc 92e 01 00 00 00 | t1              long    1
2d400 92f 00 00 00 00 | t2 long 0
2d404 930 00 00 00 00 | t3 long 0
2d408 931 00 00 00 00 | t4 long 0
2d40c 932             | 
2d40c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2d410 933 00 00 00 00 | rcnt2           long    0
2d414 934 00 00 00 00 | rcnt2a          long    0
2d418 935 00 00 00 00 | roffset         long    0
2d41c 936 00 00 00 00 | rdl             long    0  'dl repeat line
2d420 937 00 00 00 00 | dlc             long    0  'dl command
2d424 938             | 
2d424 938 FF FF FF FF | affffffff       long    $ffffffff
2d428 939 00 00 00 00 | sprite1pointer long 0
2d42c 93a 00 00 00 00 | sprite1xy      long 0
2d430 93b 00 00 00 00 | sprite1wh      long 0
2d434 93c 00 00 00 00 | sprite2pointer long 0
2d438 93d 00 00 00 00 | sprite2xy      long 0
2d43c 93e 00 00 00 00 | sprite2wh      long 0
2d440 93f 00 00 00 00 | sprite3pointer long 0
2d444 940 00 00 00 00 | sprite3xy      long 0
2d448 941 00 00 00 00 | sprite3wh      long 0
2d44c 942 00 00 00 00 | sprite4pointer long 0
2d450 943 00 00 00 00 | sprite4xy      long 0
2d454 944 00 00 00 00 | sprite4wh      long 0
2d458 945 00 00 00 00 | sprite5pointer long 0
2d45c 946 00 00 00 00 | sprite5xy      long 0
2d460 947 00 00 00 00 | sprite5wh      long 0
2d464 948 00 00 00 00 | sprite6pointer long 0
2d468 949 00 00 00 00 | sprite6xy      long 0
2d46c 94a 00 00 00 00 | sprite6wh      long 0
2d470 94b 00 00 00 00 | sprite7pointer long 0
2d474 94c 00 00 00 00 | sprite7xy      long 0
2d478 94d 00 00 00 00 | sprite7wh      long 0
2d47c 94e 00 00 00 00 | sprite8pointer long 0
2d480 94f 00 00 00 00 | sprite8xy      long 0
2d484 950 00 00 00 00 | sprite8wh      long 0
2d488 951 00 00 00 00 | sprite9pointer long 0
2d48c 952 00 00 00 00 | sprite9xy      long 0
2d490 953 00 00 00 00 | sprite9wh      long 0
2d494 954 00 00 00 00 | sprite10pointer long 0
2d498 955 00 00 00 00 | sprite10xy      long 0
2d49c 956 00 00 00 00 | sprite10wh      long 0
2d4a0 957 00 00 00 00 | sprite11pointer long 0
2d4a4 958 00 00 00 00 | sprite11xy      long 0
2d4a8 959 00 00 00 00 | sprite11wh      long 0
2d4ac 95a 00 00 00 00 | sprite12pointer long 0
2d4b0 95b 00 00 00 00 | sprite12xy      long 0
2d4b4 95c 00 00 00 00 | sprite12wh      long 0
2d4b8 95d 00 00 00 00 | sprite13pointer long 0
2d4bc 95e 00 00 00 00 | sprite13xy      long 0
2d4c0 95f 00 00 00 00 | sprite13wh      long 0
2d4c4 960 00 00 00 00 | sprite14pointer long 0
2d4c8 961 00 00 00 00 | sprite14xy      long 0
2d4cc 962 00 00 00 00 | sprite14wh      long 0
2d4d0 963 00 00 00 00 | sprite15pointer long 0
2d4d4 964 00 00 00 00 | sprite15xy      long 0
2d4d8 965 00 00 00 00 | sprite15wh      long 0
2d4dc 966 00 00 00 00 | sprite16pointer long 0
2d4e0 967 00 00 00 00 | sprite16xy      long 0
2d4e4 968 00 00 00 00 | sprite16wh      long 0
2d4e8 969 00 00 00 00 | sprite17pointer long 0
2d4ec 96a 00 00 00 00 | sprite17xy      long 0
2d4f0 96b 00 00 00 00 | sprite17wh      long 0
2d4f4 96c 00 00 00 00 | sprite18pointer long 0
2d4f8 96d 00 00 00 00 | sprite18xy      long 0
2d4fc 96e 00 00 00 00 | sprite18wh      long 0
2d500 96f 00 00 00 00 | spritenum long 0
2d504 970             | 
2d504 970 00 00 00 00 | spriteline long 0
2d508 971 84 03 00 00 | sprite_x long 900
2d50c 972 00 00 00 00 | sprite_y long 0
2d510 973 10 00 00 00 | sprite_w long 16
2d514 974 40 00 00 00 | sprite_h long 64
2d518 975 00 00 00 00 | l2 long 0
2d51c 976 00 00 00 00 | t5 long 0
2d520 977 00 00 00 00 | t6 long 0
2d524 978 00 00 00 00 | t7 long 0
2d528 979 00 00 00 00 | t8 long 0
2d52c 97a 00 00 00 00 | t9 long 0
2d530 97b 00 00 00 00 | preloadaddr long 0
2d534 97c 00 00 00 00 | preloadlineaddr long 0
2d538 97d 00 04 00 00 | a1024 long 1024
2d53c 97e             | 
2d53c 97e E0 03 00 00 | aa long 992
2d540 97f FF 03 00 00 | a1023 long 1023
2d544 980 00 10 00 00 | a4096 long 4096
2d548 981             |  fit 368
2d548 981             | _psram_spin2_dat_
2d548 981 00 00 00 00 
      ...             
2d640 9bf 00 00 00 00 
2d644 9c0 00 00 00 00 |     listdata long 0[8*8]
2d648 9c1             |             orgh
2d648                 | 
2d648                 | ' driver state
2d648     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2d64c     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2d650                 | 
2d650                 | ' delay profile
2d650     07 00 00 00 
2d654     00 CF 7B 05 
2d658     80 D1 F0 08 
2d65c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2d660     80 C4 60 0F 
2d664     80 39 7A 12 
2d668     40 2D D9 13 
2d66c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2d670                 | 
2d670                 | ' data to be passed to driver when starting it
2d670                 | startupData
2d670     00 00 00 00 |     long    0           ' current frequency
2d674     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2d678     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2d67c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2d680     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2d684     90 D6 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2d688     10 D7 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2d68c     30 D7 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2d690                 | 
2d690                 | ' data for memory
2d690                 | deviceData
2d690                 |     ' 16 bank parameters follow (16MB per bank)
2d690     00 00 00 00 
      ...             
2d6c8     00 00 00 00 
2d6cc     00 00 00 00 |     long    0[16]                               ' banks 0-15
2d6d0                 |     ' 16 banks of pin parameters follow
2d6d0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2d6d4     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2d6d8     FF FF FF FF 
      ...             
2d708     FF FF FF FF 
2d70c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2d710                 | 
2d710                 | ' data for COG polling
2d710                 | qosData 
2d710     00 00 FF FF 
2d714     00 00 FF FF 
2d718     00 00 FF FF 
2d71c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2d720     00 00 FF FF 
2d724     00 00 FF FF 
2d728     00 00 FF FF 
2d72c     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2d730                 |     
2d730                 | ' mailbox storage
2d730                 | 
2d730                 | mailboxes
2d730     00 00 00 00 
      ...             
2d788     00 00 00 00 
2d78c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2d790                 | 	alignl
2d790                 | _psram16drv_spin2_dat_
2d790                 |                             orgh
2d790     00 00 00 00 
      ...             
2d7a8     00 00 00 00 
2d7ac     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2d7b0                 | 
2d7b0                 | driver_start
2d7b0                 |                             org
2d7b0 000             | '..................................................................................................
2d7b0 000             | ' Memory layout for COG RAM once operational:
2d7b0 000             | '
2d7b0 000             | '  COG RAM address      Usage
2d7b0 000             | '  ---------------      ----
2d7b0 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2d7b0 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2d7b0 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2d7b0 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2d7b0 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2d7b0 000             | '  ~$198-$1F3           State and register variables
2d7b0 000             | '
2d7b0 000             | ' Also during driver COG startup:
2d7b0 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2d7b0 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2d7b0 000             | '..................................................................................................
2d7b0 000             |                             
2d7b0 000             | ' Mailbox storage after vector initialization
2d7b0 000             | 
2d7b0 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2d7b4 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2d7b8 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2d7bc 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2d7c0 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2d7c4 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2d7c8 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2d7cc 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2d7d0 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2d7d4 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2d7d8 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2d7dc 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2d7e0 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2d7e4 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2d7e8 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2d7ec 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2d7f0 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2d7f4 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2d7f8 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2d7fc 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2d800 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2d804 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2d808 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2d80c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2d810 018             | 
2d810 018             | ' Mailbox parameter addresses per COG once patched
2d810 018             |                             
2d810 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2d814 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2d818 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2d81c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2d820 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2d824 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2d828 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2d82c 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2d830 020             | 
2d830 020             | '..................................................................................................
2d830 020             | ' Per COG request and state setup and service branching
2d830 020             |         
2d830 020             | cog0                 
2d830 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2d834 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2d838 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2d83c 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2d840 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d844 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d848 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2d84c 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2d850 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2d854 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d858 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d85c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2d860 02c             | cog1                        
2d860 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2d864 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2d868 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2d86c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2d870 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d874 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d878 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2d87c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2d880 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2d884 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d888 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d88c 037 33 CA 63 FD |                             execf   request-0               'jump to service
2d890 038             | cog2                         
2d890 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2d894 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2d898 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2d89c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2d8a0 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d8a4 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d8a8 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2d8ac 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2d8b0 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2d8b4 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d8b8 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d8bc 043 33 CA 63 FD |                             execf   request-0               'jump to service
2d8c0 044             | cog3                        
2d8c0 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2d8c4 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2d8c8 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2d8cc 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2d8d0 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d8d4 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d8d8 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2d8dc 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2d8e0 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2d8e4 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d8e8 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d8ec 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2d8f0 050             | cog4                        
2d8f0 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2d8f4 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2d8f8 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2d8fc 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2d900 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d904 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d908 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2d90c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2d910 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2d914 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d918 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d91c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2d920 05c             | cog5                        
2d920 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2d924 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2d928 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2d92c 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2d930 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d934 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d938 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2d93c 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2d940 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2d944 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d948 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d94c 067 33 CA 63 FD |                             execf   request-0               'jump to service
2d950 068             | cog6                        
2d950 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2d954 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2d958 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2d95c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2d960 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d964 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d968 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2d96c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2d970 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2d974 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d978 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d97c 073 33 CA 63 FD |                             execf   request-0               'jump to service
2d980 074             | cog7                        
2d980 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2d984 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2d988 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2d98c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2d990 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d994 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d998 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2d99c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2d9a0 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2d9a4 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d9a8 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d9ac 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2d9b0 080             |                             fit     128
2d9b0 080             | 
2d9b0 080             |                             fit     128
2d9b0 080             | pad                         long    0[128-$]                'align init code to $80
2d9b0 080             | 
2d9b0 080             | '..................................................................................................
2d9b0 080             | 
2d9b0 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2d9b0 080             | 
2d9b0 080             | init                        
2d9b0 080             |                             ' get driver scratch long address in hub
2d9b0 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2d9b4 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2d9b8 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2d9bc 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2d9c0 084             |                     
2d9c0 084             |                             ' read in the additional LUT RAM code
2d9c0 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2d9c4 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2d9c8 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2d9cc 087             | 
2d9cc 087             |                             ' read the startup parameters
2d9cc 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2d9d0 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2d9d4 089             | 
2d9d4 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2d9d4 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2d9d8 08a             | 
2d9d8 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2d9dc 08b 01 00 00 5F 
2d9e0 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2d9e4 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2d9e8 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2d9ec 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2d9f0 090             | 
2d9f0 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2d9f0 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2d9f4 091 01 00 00 FF 
2d9f8 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2d9fc 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2da00 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2da04 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2da08 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2da0c 097 08 DE 47 F5 |                             or      a, #8
2da10 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2da14 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2da18 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2da1c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2da20 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2da24 09d 01 DE 07 F1 |                             add     a, #1
2da28 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2da2c 09f             |  
2da2c 09f             |                             ' setup device control pin states
2da2c 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2da30 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2da34 0a1 01 00 00 FF 
2da38 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2da3c 0a3             | 
2da3c 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2da40 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2da44 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2da48 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2da4c 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2da50 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2da54 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2da58 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2da5c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2da60 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2da64 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2da68 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2da6c 0af             | pinloop
2da6c 0af             |                             ' generate minimum CE high time before access
2da6c 0af A1 07 00 FF 
2da70 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2da74 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2da78 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2da7c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2da80 0b4 1F DE 63 FD |                             waitx   a                       'delay
2da84 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2da88 0b6             | 
2da88 0b6             |                             ' setup the COG mailboxes and addresses 
2da88 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2da8c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2da90 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2da94 0b9             | 
2da94 0b9 28 2E 64 FD |                             setq    #24-1
2da98 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2da9c 0bb             | 
2da9c 0bb             |                             ' setup the polling loop for active COGs 
2da9c 0bb 01 C2 63 FD |                             cogid   id
2daa0 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2daa4 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2daa8 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2daac 0bf 0A F0 07 F6 |                             mov     ptra, #10
2dab0 0c0 E1 F1 03 FA |                             mul     ptra, id
2dab4 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2dab8 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2dabc 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2dac0 0c4 03 C2 07 FA |                             mul     id, #3
2dac4 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2dac8 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2dacc 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2dad0 0c8 D8 01 B0 FD |                             call    #reloadcogs
2dad4 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2dad8 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2dadc 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2dadc 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2dae0 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2dae4 0cd 08 04 DC FC |                             rep     #2, #8
2dae8 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2daec 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2daf0 0d0             | 
2daf0 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2daf0 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2daf0 0d0 01 C2 63 FD |                             cogid   id
2daf4 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2daf8 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2dafc 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2db00 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2db04 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2db08 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2db0c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2db10 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2db14 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2db18 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2db1c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2db20 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2db24 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2db28 0de A5 E5 03 F1 |                             add     d, const512
2db2c 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2db30 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2db34 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2db38 0e2             |                             
2db38 0e2             |                             ' setup register values for control vector loop setup after we return
2db38 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2db3c 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2db40 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2db44 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2db48 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2db4c 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2db50 0e8 D0 C3 8F F9 |                             altd    id, #id0
2db54 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2db58 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2db5c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2db60 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2db64 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2db68 0ee             |  
2db68 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2db6c 0ef 07 CA 07 F5 |                             and     request, #7
2db70 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2db74 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2db78 0f2             |                             fit     $100                    'ensure all init code fits this space
2db78 0f2             | 
2db78 0f2             |                             fit     $100                    'ensure all init code fits this space
2db78 0f2             | 
2db78 0f2 00 00 00 00 
      ...             
2dba8 0fe 00 00 00 00 
2dbac 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2dbb0 100             | 
2dbb0 100             | '..................................................................................................
2dbb0 100             | ' Error result handling and COG notification of request completion
2dbb0 100             | 
2dbb0 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2dbb4 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2dbb8 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2dbbc 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2dbc0 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2dbc4 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2dbc8 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2dbcc 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2dbd0 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2dbd4 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2dbd8 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2dbdc 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2dbe0 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2dbe4 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2dbe8 10e             | ' Poller re-starts here after a COG is serviced
2dbe8 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2dbec 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2dbf0 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2dbf4 111             | ' Main dynamic polling loop repeats until a request arrives
2dbf4 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2dbf8 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2dbfc 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2dc00 114             | 
2dc00 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2dc04 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2dc08 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2dc0c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2dc10 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2dc14 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2dc18 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2dc1c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2dc20 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2dc24 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2dc28 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2dc2c 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2dc30 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2dc34 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2dc38 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2dc3c 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2dc40 124             | 
2dc40 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2dc44 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2dc48 126             |  
2dc48 126             | '..................................................................................................
2dc48 126             | ' List handler                               
2dc48 126             | 
2dc48 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2dc4c 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2dc50 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2dc54 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2dc58 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2dc5c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2dc60 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2dc64 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2dc68 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2dc6c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2dc70 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2dc74 131 33 00 60 FD |                             execf   0-0                     'process the request 
2dc78 132             | 
2dc78 132             | '..................................................................................................
2dc78 132             | ' Restoring per COG state and resuming where we left off
2dc78 132             | 
2dc78 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2dc7c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2dc80 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2dc84 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2dc88 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2dc8c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2dc90 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2dc94 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2dc98 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2dc9c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2dca0 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2dca4 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2dca8 13e             |                    
2dca8 13e             | '..................................................................................................
2dca8 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2dca8 13e             | 
2dca8 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2dcac 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2dcb0 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2dcb4 141 D0 DF B7 F9 |                             setd    a, #id0
2dcb8 142 D8 DF BF F9 |                             sets    a, #addr1
2dcbc 143 FE FF FF FF 
2dcc0 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2dcc4 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2dcc8 146 3F DE A7 F9 |                             alti    a, #%111_111 
2dccc 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2dcd0 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2dcd4 149 01 E2 63 FD |                             cogid   c
2dcd8 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2dcdc 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2dce0 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2dce4 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2dce8 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2dcec 14f 00 E0 03 F6 |                             mov     b, 0-0
2dcf0 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2dcf4 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2dcf8 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2dcfc 153 0C 00 90 AD |             if_z            jmp     #excluded               
2dd00 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2dd04 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2dd08 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2dd0c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2dd10 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2dd14 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2dd18 15a             | 
2dd18 15a             | 'determine priority cogs and build instructions for the polling sequence
2dd18 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2dd1c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2dd20 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2dd24 15d             | 
2dd24 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2dd28 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2dd2c 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2dd30 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2dd34 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2dd38 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2dd3c 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2dd40 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2dd44 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2dd48 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2dd4c 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2dd50 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2dd54 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2dd58 16a             | endprioloop
2dd58 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2dd5c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2dd60 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2dd64 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2dd68 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2dd6c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2dd70 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2dd74 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2dd78 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2dd7c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2dd80 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2dd84 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2dd88 176             | 
2dd88 176             | ' populate the round robin COG polling instructions
2dd88 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2dd8c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2dd90 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2dd94 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2dd98 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2dd9c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2dda0 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2dda4 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2dda8 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2ddac 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2ddb0 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2ddb4 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2ddb8 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2ddbc 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2ddc0 184             | '..................................................................................................
2ddc0 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2ddc0 184             | 
2ddc0 184             | set_latency                                                 '            (a) set latency
2ddc0 184             | get_latency                                                 '            (b) get latency
2ddc0 184             | set_burst                                                   '            (c) set burst size of bank
2ddc0 184             | get_burst                                                   '            (d) get burst size of bank
2ddc0 184             |                                                             '            (e) dump state
2ddc0 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2ddc4 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2ddc8 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2ddcc 187             |                                                             ' | | | | e  account for following AUGS
2ddcc 187 04 00 00 FF 
2ddd0 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2ddd4 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2ddd8 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2dddc 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2dde0 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2dde4 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2dde8 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2ddec 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2ddf0 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2ddf4 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2ddf8 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2ddfc 193             | 
2ddfc 193             | '..................................................................................................
2ddfc 193             | ' Misc EXECF code
2ddfc 193             | 
2ddfc 193 33 72 63 FD | start_read_exec             execf   newburstr
2de00 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2de04 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2de08 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2de0c 197             | 
2de0c 197             | '..................................................................................................
2de0c 197             | ' Variables
2de0c 197             | 
2de0c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2de10 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2de14 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2de18 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2de1c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2de20 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2de24 19d             | 
2de24 19d 00 00 00 80 | xfreq1          long    $80000000
2de28 19e 00 00 00 40 | xfreq2          long    $40000000
2de2c 19f 03 00 00 00 | delay           long    3
2de30 1a0             | 
2de30 1a0             | lutcodeaddr                 
2de30 1a0             | startupparams
2de30 1a0             | excludedcogs                                    'careful: shared register use!
2de30 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2de34 1a1 00 00 00 00 | flags           long    0
2de38 1a2             | mask                                            'careful: shared register use!
2de38 1a2 00 00 00 00 | resetmaskA      long    0
2de3c 1a3             | limit                                           'careful: shared register use!
2de3c 1a3 00 00 00 00 | resetmaskB      long    0
2de40 1a4 00 00 00 00 | datapins        long    0
2de44 1a5             | const512                                        'careful: shared register use!
2de44 1a5 00 00 00 00 | devicelist      long    0
2de48 1a6 00 00 00 00 | coglist         long    0
2de4c 1a7 00 00 00 00 | mbox            long    0 
2de50 1a8             | 
2de50 1a8             | clkpin                                          'shared with code patched during init
2de50 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2de54 1a9             | cspin                                           'shared with code patched during init
2de54 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2de58 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2de5c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2de60 1ac 01 00 00 00 | clkdelay        long    1
2de64 1ad 00 00 00 00 | regdatabus      long    0
2de68 1ae             | 
2de68 1ae 10 00 00 00 | deviceaddr      long    $10
2de6c 1af             | rrcounter
2de6c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2de70 1b0             | 
2de70 1b0             | ' jump addresses for the per COG handlers
2de70 1b0 20 00 00 00 | cog0_handler    long    cog0
2de74 1b1 2C 00 00 00 | cog1_handler    long    cog1
2de78 1b2 38 00 00 00 | cog2_handler    long    cog2
2de7c 1b3 44 00 00 00 | cog3_handler    long    cog3
2de80 1b4 50 00 00 00 | cog4_handler    long    cog4
2de84 1b5 5C 00 00 00 | cog5_handler    long    cog5
2de88 1b6 68 00 00 00 | cog6_handler    long    cog6
2de8c 1b7 74 00 00 00 | cog7_handler    long    cog7
2de90 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2de94 1b9             | 
2de94 1b9             | ' EXECF sequences
2de94 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2de98 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2de9c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2dea0 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2dea4 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2dea8 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2deac 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2deb0 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2deb0 1c0             | 
2deb0 1c0             | 
2deb0 1c0             | ' SKIPF sequences
2deb0 1c0             | skiptable
2deb0 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2deb4 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2deb8 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2debc 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2dec0 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2dec4 1c5 00 00 00 00 | pattern2        long    0
2dec8 1c6 00 00 00 00 | pattern3        long    0
2decc 1c7 77 02 00 00 | singlelong      long    %1001110111  
2ded0 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2ded4 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2ded8 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2dedc 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2dee0 1cc             | 
2dee0 1cc             | ' LUT RAM address values
2dee0 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2dee4 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2dee8 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2deec 1cf F6 02 00 00 | noread          long    noread_lut
2def0 1d0             | 
2def0 1d0 00 00 00 00 | id0             long    0
2def4 1d1 01 00 00 00 | id1             long    1
2def8 1d2 02 00 00 00 | id2             long    2
2defc 1d3 03 00 00 00 | id3             long    3
2df00 1d4 04 00 00 00 | id4             long    4
2df04 1d5 05 00 00 00 | id5             long    5
2df08 1d6 06 00 00 00 | id6             long    6
2df0c 1d7 07 00 00 00 | id7             long    7
2df10 1d8             | 
2df10 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2df10 1d8             | 'and COG updates and need to follow immediately after id0-id7
2df10 1d8 00 00 00 00 | addr1           long    0
2df14 1d9 00 00 00 00 | hubdata         long    0
2df18 1da 00 00 00 00 | count           long    0
2df1c 1db 00 00 00 00 | addr2           long    0
2df20 1dc 00 00 00 00 | total           long    0
2df24 1dd 00 00 00 00 | offset1         long    0
2df28 1de 00 00 00 00 | offset2         long    0
2df2c 1df 00 00 00 00 | link            long    0
2df30 1e0             | 
2df30 1e0             | burstwrite                                      'note shared register use during init
2df30 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2df34 1e1 00 00 00 00 | id              long    0
2df38 1e2             | 
2df38 1e2 00 00 00 00 | header          long    0
2df3c 1e3 00 00 00 00 | trailer         long    0
2df40 1e4 00 00 00 00 | cmdaddr         long    0
2df44 1e5 00 00 00 00 | request         long    0
2df48 1e6 00 00 00 00 | rrlimit         long    0
2df4c 1e7 00 00 00 00 | pinconfig       long    0
2df50 1e8 00 00 00 00 | clks            long    0
2df54 1e9 00 00 00 00 | resume          long    0
2df58 1ea 00 00 00 00 | orighubsize     long    0
2df5c 1eb 00 00 00 00 | wrclks          long    0
2df60 1ec             | 
2df60 1ec 00 00 00 00 | pattern         long    0
2df64 1ed 00 00 00 00 | hubscratch      long    0
2df68 1ee 00 10 00 00 | val4k           long    4096
2df6c 1ef             | 
2df6c 1ef             | ' temporary general purpose regs
2df6c 1ef 00 00 00 00 | a               long    0
2df70 1f0 00 00 00 00 | b               long    0
2df74 1f1 00 00 00 00 | c               long    0
2df78 1f2 00 00 00 00 | d               long    0
2df7c 1f3             |                 fit     502
2df7c 1f3             | 
2df7c 1f3             |                 fit     502
2df7c 1f3             | 
2df7c 1f3             | '..................................................................................................
2df7c 1f3             | 
2df7c 1f3             |             orgh
2df7c                 | 
2df7c                 | lut_code
2df7c                 | 'HW init code up to 80 longs
2df7c                 | 
2df7c                 | '..................................................................................................
2df7c                 | ' Memory layout for LUT RAM once operational:
2df7c                 | '
2df7c                 | '  LUT RAM address      Usage
2df7c                 | '  ---------------      ----
2df7c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2df7c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2df7c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2df7c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2df7c                 | '
2df7c                 | ' Also during driver COG startup:
2df7c                 | ' $230-$24F is used for HW init setup
2df7c                 | ' $250-$26F is used as temporary vector storage 
2df7c                 | '..................................................................................................
2df7c                 | 
2df7c                 |                 org $230    
2df7c 230             | 
2df7c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2df7c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2df80 231 24 16 60 FD |                             pollxfi
2df84 232 FF AA 2A FF 
2df88 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2df8c 234 28 00 B0 FD |                             call    #sendqspi
2df90 235 07 F8 07 FF 
2df94 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2df98 237 28 00 B0 FD |                             call    #sendspi
2df9c 238 F8 07 78 FF 
2dfa0 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2dfa4 23a 1C 00 B0 FD |                             call    #sendspi
2dfa8 23b 7F 78 78 FF 
2dfac 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2dfb0 23d 10 00 B0 FD |                             call    #sendspi 
2dfb4 23e 2D 00 64 FD |                             ret
2dfb8 23f             | 
2dfb8 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2dfbc 240 32 0C 64 FD |                             skipf   #%110
2dfc0 241 9C EF 03 F6 |                             mov     pb, xsendimm
2dfc4 242             | 
2dfc4 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2dfc8 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2dfcc 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2dfd0 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2dfd4 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2dfd8 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2dfdc 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2dfe0 249 50 48 63 FD |                             fltl    datapins                'float data bus
2dfe4 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2dfe8 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2dfec 24c             | 
2dfec 24c 00 00 00 00 
2dff0 24d 00 00 00 00 
2dff4 24e 00 00 00 00 
2dff8 24f 00 00 00 00 |                 long    0[$270-32-$]
2dffc 250             |                 fit     $270-32  ' keep room for 32 vector longs
2dffc 250             |     
2dffc 250             |                 fit     $270-32  ' keep room for 32 vector longs
2dffc 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2dffc 250             | rw_vect ' PSRAM jump vectors
2dffc 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e000 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e004 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2e008 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2e00c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2e010 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2e014 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2e018 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2e01c 258             | ro_vect ' R/O PSRAM jump vectors
2e01c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e020 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e024 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2e028 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2e02c 25c 00 01 00 00 |                 long    unsupported
2e030 25d 00 01 00 00 |                 long    unsupported
2e034 25e 00 01 00 00 |                 long    unsupported
2e038 25f 00 01 00 00 |                 long    unsupported
2e03c 260             | ctrl_vect ' Control jump vectors
2e03c 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2e040 261 00 01 00 00 |                 long    unsupported
2e044 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2e048 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2e04c 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2e050 265 00 01 00 00 |                 long    unsupported
2e054 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2e058 267 3E 01 00 00 |                 long    reconfig 
2e05c 268             | no_vect ' Invalid bank jump vectors
2e05c 268 01 01 00 00 |                 long    invalidbank
2e060 269 01 01 00 00 |                 long    invalidbank
2e064 26a 01 01 00 00 |                 long    invalidbank
2e068 26b 01 01 00 00 |                 long    invalidbank
2e06c 26c 01 01 00 00 |                 long    invalidbank
2e070 26d 01 01 00 00 |                 long    invalidbank
2e074 26e 01 01 00 00 |                 long    invalidbank
2e078 26f 01 01 00 00 |                 long    invalidbank
2e07c 270             |                 fit     $270
2e07c 270             | 
2e07c 270             |                 fit     $270
2e07c 270             | '..................................................................................................
2e07c 270             | ' PSRAM READS
2e07c 270             |                                                             ' a b c d e f
2e07c 270             |                                                             ' B W L B R L  (a) byte read
2e07c 270             |                                                             ' Y O O U E O  (b) word read
2e07c 270             |                                                             ' T R N R S C  (c) long read
2e07c 270             |                                                             ' E D G S U K  (d) new burst read
2e07c 270             |                                                             '       T M E  (e) resumed sub-burst
2e07c 270             |                                                             '         E D  (f) locked sub-burst
2e07c 270             | 
2e07c 270             | 
2e07c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2e080 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2e084 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2e088 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2e08c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2e090 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2e094 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2e098 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2e09c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2e0a0 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2e0a4 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2e0a8 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2e0ac 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2e0b0 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2e0b4 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2e0b8 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2e0bc 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2e0c0 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2e0c4 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2e0c8 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2e0cc 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2e0d0 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2e0d4 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2e0d8 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2e0dc 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2e0e0 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2e0e4 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2e0e8 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2e0ec 28c             | 
2e0ec 28c             |                             ' fall through to read bursts
2e0ec 28c             |                         
2e0ec 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2e0ec 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e0f0 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e0f4 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e0f8 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e0fc 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2e100 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2e104 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2e108 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2e10c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2e110 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2e114 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2e118 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2e11c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2e120 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2e124 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2e128 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2e12c 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2e130 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2e134 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2e138 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2e13c 2a0 E8 D1 03 F1 |                             add     clks, clks
2e140 2a1             | readcommon
2e140 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2e144 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e148 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2e14c 2a4             | 
2e14c 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e150 2a5 69 C8 63 FD |                             rev     cmdaddr
2e154 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e158 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2e15c 2a8             | 
2e15c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e160 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2e164 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2e164 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2e168 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2e16c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2e170 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2e174 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2e174 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2e178 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2e17c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2e180 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2e184 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2e188 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2e18c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2e18c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2e190 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2e194 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2e198 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2e19c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2e1a0 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2e1a4 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2e1a8 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2e1ac 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2e1b0 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2e1b4 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2e1b8 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2e1bc 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2e1c0 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2e1c4 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2e1c4 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2e1c8 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2e1cc 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2e1d0 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2e1d4 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2e1d8 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2e1dc 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2e1e0 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2e1e4 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2e1e8 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2e1ec 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2e1f0 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2e1f4 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2e1f8 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2e1fc 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2e200 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2e204 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2e208 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2e20c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2e210 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2e214 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2e218 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2e21c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2e220 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2e224 2da 10 03 90 FD |                             jmp     #writecommon
2e228 2db             | 
2e228 2db             | '..................................................................................................
2e228 2db             | ' Burst continuation testing
2e228 2db             | 
2e228 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2e22c 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2e230 2dd             | continue_read_lut          
2e230 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2e234 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2e238 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2e23c 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2e240 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2e244 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2e248 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2e24c 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2e250 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2e254 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2e258 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2e25c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2e260 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2e264 2ea             | 
2e264 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2e268 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2e26c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2e270 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2e274 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2e278 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2e27c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2e280 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2e284 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2e288 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2e28c 2f4 2A 1C 66 0D |             _ret_           push    #poller
2e290 2f5             | 
2e290 2f5             | 
2e290 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2e294 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2e294 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2e298 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2e29c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2e2a0 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2e2a4 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2e2a8 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2e2ac 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2e2b0 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2e2b4 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2e2b8 2ff             | '..................................................................................................
2e2b8 2ff             | ' Completion of requests
2e2b8 2ff             | 
2e2b8 2ff             | complete_rw_lut             
2e2b8 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2e2bc 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2e2c0 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2e2c4 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2e2c8 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2e2cc 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2e2d0 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2e2d4 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2e2d8 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2e2dc 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2e2e0 309 32 62 64 AD |             if_z            skipf   #%110001
2e2e4 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2e2e8 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2e2ec 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2e2f0 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2e2f4 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2e2f8 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2e2fc 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2e300 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2e304 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2e308 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2e30c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2e310 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2e314 316             |                                                             ' skipcase (a) gfx copy to/from hub
2e314 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2e314 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2e314 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2e318 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2e31c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2e320 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2e324 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2e328 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2e32c 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2e330 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2e334 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2e338 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2e33c 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2e340 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2e344 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2e348 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2e34c 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2e350 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2e354 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2e358 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2e35c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2e360 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2e364 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2e368 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2e36c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2e370 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2e374 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2e378 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2e37c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2e380 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2e384 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2e388 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2e38c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2e390 335 DF B7 03 A6 |             if_z            mov     addr2, link
2e394 336 34 FF 9F AD |             if_z            jmp     #checknext
2e398 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2e39c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e3a0 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2e3a4 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2e3a8 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2e3ac 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2e3b0 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2e3b4 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2e3b8 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2e3bc 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2e3c0 341             | 
2e3c0 341             | '..................................................................................................
2e3c0 341             | ' PSRAM WRITES
2e3c0 341             |                                                             '  a b c d e f g h
2e3c0 341             | 
2e3c0 341             |                                                             '  B W L F B R L L (a) byte write(s)
2e3c0 341             |                                                             '  Y O O I U E O O (b) word write(s)
2e3c0 341             |                                                             '  T R N L R S C C (c) long write(s)
2e3c0 341             |                                                             '  E D G L S U K K (d) resumed fill
2e3c0 341             |                                                             '          T M E E (e) new burst write
2e3c0 341             |                                                             '            E D D (f) resumed burst
2e3c0 341             |                                                             '              F B (g) locked fill
2e3c0 341             |                                                             '              I U (h) locked burst write
2e3c0 341             |                                                             '              L R 
2e3c0 341             |                                                             '              L S 
2e3c0 341             |                                                             '                T 
2e3c0 341             | 
2e3c0 341             | w_single                   
2e3c0 341             | w_fill_cont           
2e3c0 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2e3c4 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2e3c8 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2e3cc 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2e3d0 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2e3d4 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2e3d8 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2e3dc 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2e3e0 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2e3e4 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2e3e8 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2e3ec 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2e3f0 34d             |                ' disable call to r_resume_burst for single longs when z=0
2e3f0 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2e3f4 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2e3f8 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2e3fc 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2e400 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2e404 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2e408 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2e40c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2e410 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2e414 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2e418 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2e41c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2e420 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2e424 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2e428 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2e42c 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2e430 35d             |         
2e430 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2e430 35d             |             '
2e430 35d             |             '  At least one of these 3 optional components will be sent
2e430 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2e430 35d             |             '     body - N x full longs of data
2e430 35d             |             '     trailer - last partial long of data
2e430 35d             |             '
2e430 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2e430 35d             |             '
2e430 35d             |             'Case    Type                           Sends
2e430 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2e430 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2e430 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2e430 35d             |             ' 4)     Multiple long fill             body only
2e430 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2e430 35d             | 
2e430 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2e430 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e434 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e438 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e43c 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e440 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2e444 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2e448 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2e44c 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2e450 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2e454 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2e458 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2e45c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2e460 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2e464 36a             |                             
2e464 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e468 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2e46c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2e470 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2e474 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2e478 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2e47c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2e480 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2e484 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2e488 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2e48c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2e490 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2e494 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2e498 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2e49c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2e4a0 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2e4a4 37a             | 
2e4a4 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e4a8 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2e4ac 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2e4b0 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2e4b4 37e             |                  
2e4b4 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2e4b8 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2e4bc 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2e4c0 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2e4c4 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2e4c8 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2e4cc 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2e4d0 385             | 
2e4d0 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2e4d4 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2e4d8 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2e4dc 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2e4e0 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2e4e4 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2e4e8 38b             | 
2e4e8 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2e4e8 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2e4ec 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2e4f0 38d 2A B0 63 FD |                             push    addr1                   'save address
2e4f4 38e             | 
2e4f4 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2e4f4 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2e4f8 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2e4fc 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2e500 391             |             
2e500 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2e504 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2e508 393 2B B0 63 FD |                             pop     addr1                   'restore address
2e50c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2e510 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2e514 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2e518 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2e51c 398             | 
2e51c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2e520 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2e524 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2e528 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2e52c 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2e530 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2e534 39e             | 
2e534 39e             |                             'trailer is done
2e534 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2e538 39f             | 
2e538 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2e53c 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e540 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2e544 3a2             | 
2e544 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e548 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2e54c 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e550 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2e554 3a6             |                             
2e554 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e558 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2e55c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2e560 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2e564 3aa             |                                                          
2e564 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2e568 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2e56c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2e570 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2e574 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2e578 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2e57c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2e580 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2e584 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2e588 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2e58c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2e590 3b5             |  
2e590 3b5 59 52 63 FD |                             drvh    cspin
2e594 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2e598 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2e59c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2e5a0 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2e5a4 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2e5a8 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2e5ac 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2e5b0 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2e5b4 3be EA E5 03 F6 |                             mov     d, orighubsize
2e5b8 3bf EF E5 63 F0 |                             shl     d, a
2e5bc 3c0 F2 E3 83 F1 |                             sub     c, d
2e5c0 3c1 DD E3 03 F1 |                             add     c, offset1
2e5c4 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2e5c8 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2e5cc 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2e5d0 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2e5d4 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2e5d8 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2e5dc 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2e5e0 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e5e4 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2e5e8 3cb BB D3 03 F6 |                             mov     resume, restorefill
2e5ec 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2e5f0 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2e5f4 3ce 6C FC BF CD |             if_c            call    #yield
2e5f8 3cf 2D 00 64 FD |                             ret
2e5fc 3d0             |                            
2e5fc 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2e5fc 3d0             |                       '     rczl    pa                      'rotate left into address offset
2e5fc 3d0             |                       '     rczl    c wcz                   'restore count and flags
2e5fc 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2e600 3d1 02 EC 67 F0 |                             shl     pa, #2
2e604 3d2 28 06 64 AD |             if_z            setq    #3
2e608 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2e60c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2e610 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2e614 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2e618 3d7             | 
2e618 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2e61c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2e620 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2e624 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2e628 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2e62c 3dc             |                 fit 1024-32
2e62c 3dc             |         
2e62c 3dc             | 
2e62c 3dc             | '..................................................................................................
2e62c 3dc             | 
2e62c 3dc             |                 fit 1024-32
2e62c 3dc 00 00 00 00 
2e630 3dd 00 00 00 00 
2e634 3de 00 00 00 00 
2e638 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2e63c 3e0             |                 org 1024-32
2e63c 000             | 
2e63c 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2e63c 000 00 00 00 00 |                 long $0000
2e640 001 11 11 00 00 |                 long $1111
2e644 002 22 22 00 00 |                 long $2222
2e648 003 33 33 00 00 |                 long $3333
2e64c 004 44 44 00 00 |                 long $4444
2e650 005 55 55 00 00 |                 long $5555
2e654 006 66 66 00 00 |                 long $6666
2e658 007 77 77 00 00 |                 long $7777
2e65c 008 88 88 00 00 |                 long $8888
2e660 009 99 99 00 00 |                 long $9999
2e664 00a AA AA 00 00 |                 long $aaaa
2e668 00b BB BB 00 00 |                 long $bbbb
2e66c 00c CC CC 00 00 |                 long $cccc
2e670 00d DD DD 00 00 |                 long $dddd
2e674 00e EE EE 00 00 |                 long $eeee
2e678 00f FF FF 00 00 |                 long $ffff
2e67c 010             | 
2e67c 010             | 'masks
2e67c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2e680 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2e684 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2e688 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2e68c 014             | 
2e68c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2e690 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2e694 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2e698 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2e69c 018             | 
2e69c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2e6a0 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2e6a4 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2e6a8 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2e6ac 01c             | 
2e6ac 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2e6b0 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2e6b4 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2e6b8 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2e6bc 020             |         fit 1024
2e6bc 020             | 
2e6bc 020             |         fit 1024
2e6bc 020             | 
2e6bc 020             | '--------------------------------------------------------------------------------------------------
2e6bc 020             |         orgh
2e6bc                 | 
2e6bc                 | gfxexpansion
2e6bc                 |                             'simple line drawing graphics expansion of memory driver
2e6bc                 |                             'jmp     #donerepeats                'just return for now
2e6bc                 | 
2e6bc     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2e6c0     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2e6c4     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2e6c8     DD E1 03 F6 |                             mov     b, offset1              'get error term
2e6cc     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2e6d0     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2e6d4     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2e6d8     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2e6dc     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2e6e0     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2e6e4     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2e6e8     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2e6ec     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2e6f0     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2e6f4     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2e6f8     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2e6fc     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2e700     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2e704     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2e708     DC E5 33 F9 |                             getword d, total, #0            'get line width
2e70c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2e710     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2e714     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2e718     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2e71c     C3 03 80 FD |                             jmp     #readmask               'continue filling
2e720                 | 	alignl
2e720                 | _usbnew_spin2_dat_
2e720                 |                 org     $000
2e720 000             | 
2e720 000             | usb_host_start
2e720 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2e724 001             | 
2e724 001 03 00 00 FF 
2e728 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2e72c 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2e730 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2e734 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e738 006 29 70 63 FD |                 setq2   htmp
2e73c 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2e740 008             | 
2e740 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2e744 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e748 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2e74c 00b             | 
2e74c 00b             | '------------------------------------------------------------------------------
2e74c 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2e74c 00b             | ' special because the receiving function must not respond with either STALL or
2e74c 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2e74c 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2e74c 00b             | ' corrupt packet, it must ignore the transaction
2e74c 00b             | '------------------------------------------------------------------------------
2e74c 00b             | ' On entry:
2e74c 00b             | '   PTRA - start address of the SETUP data struct.
2e74c 00b             | ' On exit:
2e74c 00b             | '   retval - PID_ACK on success, otherwise error code.
2e74c 00b             | '------------------------------------------------------------------------------
2e74c 00b             | txn_setup
2e74c 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2e750 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2e754 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2e758 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2e75c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2e760 010             | .setup
2e760 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2e764 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e768 012 2D 00 64 AD |         if_z    ret
2e76c 013 7C 0B B0 FD |                 call    #retry_wait
2e770 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e774 015 2D 00 64 AD |         if_z    ret
2e778 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2e77c 017 E0 FF 9F FD |                 jmp     #.setup
2e780 018             | 
2e780 018             | '------------------------------------------------------------------------------
2e780 018             | ' IN/INTERRUPT transaction.
2e780 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2e780 018             | '------------------------------------------------------------------------------
2e780 018             | ' On entry:
2e780 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2e780 018             | '     CRC(b19..23).
2e780 018             | ' On exit:
2e780 018             | '------------------------------------------------------------------------------
2e780 018             | txn_in
2e780 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e784 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2e788 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2e78c 01b             | 
2e78c 01b             |                 ' Fall through to urx_packet
2e78c 01b             | 
2e78c 01b             | '------------------------------------------------------------------------------
2e78c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2e78c 01b             | ' received are handshakes and IN DATAx.
2e78c 01b             | '------------------------------------------------------------------------------
2e78c 01b             | ' On entry:
2e78c 01b             | ' On exit:
2e78c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2e78c 01b             | '     returned.
2e78c 01b             | '------------------------------------------------------------------------------
2e78c 01b             | urx_packet
2e78c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2e790 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e794 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2e798 01e 1A 92 63 FD |                 getct   hct2
2e79c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2e7a0 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2e7a4 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2e7a8 022             | .wait_sop
2e7a8 022 22 A7 8A FA |                 rdpin   urx, dm
2e7ac 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e7b0 024 08 00 90 CD |         if_c    jmp     #.get_pid
2e7b4 025 FC 25 CC FB |                 jnct2   #.wait_sop
2e7b8 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2e7bc 027             | .get_pid
2e7bc 027 28 02 B0 FD |                 call    #urx_next
2e7c0 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2e7c4 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2e7c8 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2e7cc 02b             | .chk_pid
2e7cc 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e7d0 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2e7d4 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2e7d8 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2e7dc 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2e7e0 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2e7e4 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2e7e8 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2e7ec 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2e7f0 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2e7f4 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2e7f8 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2e7fc 037             | .ack_resend
2e7fc 037 22 A7 82 FA |                 rqpin   urx, dm
2e800 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e804 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2e808 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e80c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2e810 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2e814 03d             | .chk_eop
2e814 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e818 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2e81c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2e820 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2e824 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2e828 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e82c 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2e830 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2e834 045 2D 00 64 FD |                 ret
2e838 046             | .idle
2e838 046 22 A7 82 FA |                 rqpin   urx, dm
2e83c 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e840 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2e844 049 2D 00 64 FD |                 ret
2e848 04a             | 
2e848 04a             | '------------------------------------------------------------------------------
2e848 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2e848 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2e848 04a             | ' if one is required.
2e848 04a             | '------------------------------------------------------------------------------
2e848 04a             | ' On entry:
2e848 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2e848 04a             | ' On exit:
2e848 04a             | '------------------------------------------------------------------------------
2e848 04a             | utx_token
2e848 04a 22 A7 82 FA |                 rqpin   urx, dm
2e84c 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e850 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2e854 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e858 04e 34 0D B0 CD |         if_c    call    #utx_pre
2e85c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e860 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2e864 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2e868 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2e86c 053             | .next_byte
2e86c 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2e870 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2e874 055             | .wait
2e874 055 40 46 72 FD |                 testp   dp                      wc
2e878 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e87c 057 23 03 08 FC |                 akpin   dp
2e880 058 22 A5 22 FC |                 wypin   utx, dm
2e884 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2e888 05a             | 
2e888 05a             | '------------------------------------------------------------------------------
2e888 05a             | ' SETUP/OUT/INTERRUPT transaction.
2e888 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2e888 05a             | '------------------------------------------------------------------------------
2e888 05a             | ' On entry:
2e888 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2e888 05a             | '     CRC(b19..23).
2e888 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2e888 05a             | '   pkt_data - count of DATAx payload bytes to send.
2e888 05a             | ' On exit:
2e888 05a             | '------------------------------------------------------------------------------
2e888 05a             | txn_out
2e888 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e88c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2e890 05c 00 00 C0 FF 
2e894 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2e898 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2e89c 05f             | 
2e89c 05f             |                 ' Fall through to utx_data
2e89c 05f             | 
2e89c 05f             | '------------------------------------------------------------------------------
2e89c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2e89c 05f             | ' calculated while the data byte is being shifted out. Since data stage
2e89c 05f             | ' success/fail is not determined until the status stage of the transaction,
2e89c 05f             | ' this routine is only concerned about the current DATAx packet.
2e89c 05f             | '------------------------------------------------------------------------------
2e89c 05f             | ' On entry:
2e89c 05f             | '   PTRA - hub start address of the data to read.
2e89c 05f             | '   pkt_cnt - data payload size.
2e89c 05f             | ' On exit:
2e89c 05f             | '------------------------------------------------------------------------------
2e89c 05f             | utx_data
2e89c 05f 22 A7 82 FA |                 rqpin   urx, dm
2e8a0 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e8a4 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2e8a8 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e8ac 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2e8b0 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e8b4 065 D8 0C B0 CD |         if_c    call    #utx_pre
2e8b8 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e8bc 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2e8c0 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e8c4 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2e8c8 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2e8cc 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2e8d0 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2e8d4 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2e8d8 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2e8dc 06f             | .read_byte
2e8dc 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2e8e0 070 F0 00 B0 FD |                 call    #utx_byte
2e8e4 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2e8e8 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2e8ec 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e8f0 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e8f4 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2e8f8 076             | .send_crc
2e8f8 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2e8fc 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2e900 078 D0 00 B0 FD |                 call    #utx_byte
2e904 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2e908 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2e90c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2e910 07c             | 
2e910 07c             | '------------------------------------------------------------------------------
2e910 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2e910 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2e910 07c             | ' expects that the packet includes at least the CRC word.
2e910 07c             | '
2e910 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2e910 07c             | ' was requested, which makes it difficult to determine where the data stops
2e910 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2e910 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2e910 07c             | ' USB-16 expected residual value of 0xB001.
2e910 07c             | '
2e910 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2e910 07c             | ' so the caller can verify IN success before writing the data to its final
2e910 07c             | ' destination.
2e910 07c             | '------------------------------------------------------------------------------
2e910 07c             | ' On entry:
2e910 07c             | '   pkt_data - max byte count expected to be in the packet.
2e910 07c             | '   newb_flg - signals new byte ready when toggled.
2e910 07c             | ' On exit:
2e910 07c             | '   pkt_cnt - actual number of bytes read.
2e910 07c             | '------------------------------------------------------------------------------
2e910 07c             | urx_data
2e910 07c F7 75 03 F6 |                 mov     htmp2, pb
2e914 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2e918 07e 00 00 C0 FF 
2e91c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2e920 080 BA EF 03 F6 |                 mov     pb, htmp2
2e924 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e928 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2e92c 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2e930 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2e934 085             | .wait_byte
2e934 085             | ' In-line rx for max speed
2e934 085 22 A7 82 FA |                 rqpin   urx, dm
2e938 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e93c 087 53 A5 02 F5 |                 and     utx, urx
2e940 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e944 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e948 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2e94c 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e950 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2e954 08d DC FF 9F FD |                 jmp     #.wait_byte
2e958 08e             | .get_byte
2e958 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2e95c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2e960 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2e964 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2e968 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e96c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e970 094             | .end_crc
2e970 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2e974 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2e978 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2e97c 097 2D 00 64 1D |         if_a    ret
2e980 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2e980 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2e980 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2e980 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2e980 098 22 A7 82 FA |                 rqpin   urx, dm
2e984 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2e988 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2e98c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2e98c 09b             | .chk_crc
2e98c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2e990 09c 58 00 00 FF 
2e994 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2e998 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2e99c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e9a0 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e9a4 0a1 34 09 B0 FD |                 call    #poll_waitx
2e9a8 0a2             | 
2e9a8 0a2             |                 ' Fall through to utx_handshake
2e9a8 0a2             | 
2e9a8 0a2             | '------------------------------------------------------------------------------
2e9a8 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2e9a8 0a2             | ' the appropriate IP delay has been inserted.
2e9a8 0a2             | '------------------------------------------------------------------------------
2e9a8 0a2             | ' On entry:
2e9a8 0a2             | '   retval - handshake PID to send.
2e9a8 0a2             | ' On exit:
2e9a8 0a2             | '   retval unchanged.
2e9a8 0a2             | '------------------------------------------------------------------------------
2e9a8 0a2             | utx_handshake
2e9a8 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e9ac 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2e9b0 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e9b4 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2e9b8 0a6 5F A5 02 F6 |                 mov     utx, retval
2e9bc 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2e9c0 0a8             | .idle
2e9c0 0a8 22 A7 82 FA |                 rqpin   urx, dm
2e9c4 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e9c8 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2e9cc 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2e9d0 0ac 08 09 90 FD |                 jmp     #poll_waitx
2e9d4 0ad             | 
2e9d4 0ad             | '------------------------------------------------------------------------------
2e9d4 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2e9d4 0ad             | '------------------------------------------------------------------------------
2e9d4 0ad             | ' On entry:
2e9d4 0ad             | '   utx - byte to transmit.
2e9d4 0ad             | ' On exit:
2e9d4 0ad             | '------------------------------------------------------------------------------
2e9d4 0ad             | utx_byte
2e9d4 0ad 40 46 72 FD |                 testp   dp                      wc
2e9d8 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2e9dc 0af 23 03 08 FC |                 akpin   dp
2e9e0 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2e9e4 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2e9e8 0b2             | 
2e9e8 0b2             | '------------------------------------------------------------------------------
2e9e8 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2e9e8 0b2             | '------------------------------------------------------------------------------
2e9e8 0b2             | ' On entry:
2e9e8 0b2             | ' On exit:
2e9e8 0b2             | '   retval - the byte read.
2e9e8 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2e9e8 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2e9e8 0b2             | '     received.
2e9e8 0b2             | '------------------------------------------------------------------------------
2e9e8 0b2             | urx_next
2e9e8 0b2 22 A7 8A FA |                 rdpin   urx, dm
2e9ec 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e9f0 0b4 53 A5 02 F5 |                 and     utx, urx
2e9f4 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e9f8 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e9fc 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2ea00 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2ea04 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2ea08 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2ea0c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2ea10 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2ea14 0bd 2D 00 64 FD |                 ret
2ea18 0be             | 
2ea18 0be             | '------------------------------------------------------------------------------
2ea18 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2ea18 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2ea18 0be             | ' length, and the PID is not included in the CRC calculation:
2ea18 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2ea18 0be             | '  CRC5  ENDP ADDRESS PID
2ea18 0be             | ' %00000_1111_1111111_xxxxxxxx
2ea18 0be             | '------------------------------------------------------------------------------
2ea18 0be             | ' On entry:
2ea18 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2ea18 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2ea18 0be             | ' On exit:
2ea18 0be             | '   ep_addr_pid - CRC value appended to the packet.
2ea18 0be             | '------------------------------------------------------------------------------
2ea18 0be             | calc_crc5
2ea18 0be FF 03 00 FF 
2ea1c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2ea20 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2ea24 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2ea28 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2ea2c 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2ea30 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2ea34 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2ea38 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2ea3c 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2ea40 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2ea44 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2ea48 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2ea4c 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2ea50 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2ea54 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2ea58 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2ea5c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2ea60 0d0             | 
2ea60 0d0             | '------------------------------------------------------------------------------
2ea60 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2ea60 0d0             | '------------------------------------------------------------------------------
2ea60 0d0             | isr1_fsframe
2ea60 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2ea64 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2ea68 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ea6c 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ea70 0d4             | .wait
2ea70 0d4 40 46 72 FD |                 testp   dp                      wc
2ea74 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2ea78 0d6 23 03 08 FC |                 akpin   dp
2ea7c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2ea80 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2ea84 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2ea88 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2ea8c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2ea90 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2ea94 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2ea98 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2ea9c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2eaa0 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2eaa4 0e1 2C FF BF FD |                 call    #utx_byte
2eaa8 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2eaac 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2eab0 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2eab4 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2eab8 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2eabc 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2eac0 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2eac4 0e9 5B A5 42 F5 |                 or      utx, icrc
2eac8 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2eacc 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2ead0 0ec 20 00 90 FD |                 jmp     #isr1_wait
2ead4 0ed             | isr1_lsframe
2ead4 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2ead8 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2eadc 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2eae0 0f0             | .wait
2eae0 0f0 40 46 72 FD |                 testp   dp                      wc
2eae4 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2eae8 0f2 23 03 08 FC |                 akpin   dp
2eaec 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2eaf0 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2eaf4 0f5             | isr1_wait
2eaf4 0f5 22 A5 82 FA |                 rqpin   utx, dm
2eaf8 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2eafc 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2eb00 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2eb04 0f9 03 00 00 FF 
2eb08 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2eb0c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2eb10 0fc F5 FF 3B FB |                 reti1
2eb14 0fd             | 
2eb14 0fd             | '------------------------------------------------------------------------------
2eb14 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2eb14 0fd             | ' transaction will complete before the next frame is triggered.
2eb14 0fd             | '------------------------------------------------------------------------------
2eb14 0fd             | ' On entry:
2eb14 0fd             | ' On exit:
2eb14 0fd             | '------------------------------------------------------------------------------
2eb14 0fd             | wait_txn_ok
2eb14 0fd 1A 74 63 FD |                 getct   htmp2
2eb18 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2eb1c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2eb20 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2eb24 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2eb28 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2eb2c 103 2D 00 64 FD |                 ret
2eb30 104             | 
2eb30 104             | '------------------------------------------------------------------------------
2eb30 104             | ' A device connection was detected, or a bus reset was requested by the USB
2eb30 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2eb30 104             | ' and perform a reset sequence prior to device enumeration.
2eb30 104             | '------------------------------------------------------------------------------
2eb30 104             | dev_reset
2eb30 104 22 A7 82 FA |                 rqpin   urx, dm
2eb34 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2eb38 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2eb3c 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2eb40 108             | reset
2eb40 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2eb44 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2eb48 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2eb4c 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2eb50 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2eb54 10d 1A 92 62 FD |                 getct   iframe_ct_base
2eb58 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2eb5c 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2eb60 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2eb64 111 24 70 07 F1 |                 add     htmp, #36
2eb68 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2eb6c 113             | .framewait
2eb6c 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2eb70 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2eb74 115 2D 00 64 FD |                 ret
2eb78 116             | 
2eb78 116             | '------------------------------------------------------------------------------
2eb78 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2eb78 116             | '------------------------------------------------------------------------------
2eb78 116             | ' On entry:
2eb78 116             | '   PTRA - source address.
2eb78 116             | '   PB - destination address.
2eb78 116             | '   hr0 - length of copy, in bytes.
2eb78 116             | ' On exit:
2eb78 116             | '------------------------------------------------------------------------------
2eb78 116             | hmemcpy
2eb78 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2eb7c 117 F7 71 43 FC |                 wrbyte  htmp, pb
2eb80 118 01 EE 07 F1 |                 add     pb, #1
2eb84 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2eb88 11a             | 
2eb88 11a             | '------------------------------------------------------------------------------
2eb88 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2eb88 11a             | ' loop until the errant device is disconnected.
2eb88 11a             | '------------------------------------------------------------------------------
2eb88 11a             | ' On entry:
2eb88 11a             | ' On exit:
2eb88 11a             | '------------------------------------------------------------------------------
2eb88 11a             | host_error
2eb88 11a             |           if ERROR_LED >= 0
2eb88 11a             |           end
2eb88 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2eb8c 11b             | 
2eb8c 11b             | '------------------------------------------------------------------------------
2eb8c 11b             | ' Get HID descriptor buffer for current port
2eb8c 11b             | '------------------------------------------------------------------------------
2eb8c 11b             | ' On entry:
2eb8c 11b             | ' On exit:
2eb8c 11b             | '   PB - HID descriptor buffer pointer
2eb8c 11b             | '------------------------------------------------------------------------------
2eb8c 11b             | get_hid_descr_buffer
2eb8c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2eb90 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2eb94 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2eb98 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2eb9c 11f             | 
2eb9c 11f             | 
2eb9c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2eba0 120             | 
2eba0 120             | ' USB commands and error codes
2eba0 120 00 00 00 00 | cmd_data        long    0
2eba4 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2eba8 122             | 
2eba8 122             | ' Parameters block assigned at cog startup
2eba8 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2ebac 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2ebb0 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2ebb4 125             | if ACTIVITY_LED >= 0
2ebb4 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2ebb4 125             | end
2ebb4 125             | if ERROR_LED >= 0
2ebb4 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2ebb4 125             | end
2ebb4 125 00 00 00 00 | hid_descr_p     long    0
2ebb8 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2ebb8 126             | 'hkbd_report_p   long    0
2ebb8 126 00 00 00 00 | hub_descr_p     long    0
2ebbc 127 00 00 00 00 | urx_buff_p      long    0
2ebc0 128 00 00 00 00 | dev_desc_buff_p long    0
2ebc4 129 00 00 00 00 | con_desc_buff_p long    0
2ebc8 12a 00 00 00 00 | cache_start_p   long    0
2ebcc 12b 00 00 00 00 | cache_end_p     long    0
2ebd0 12c             | if EMUPAD_MAX_PLAYER > 0
2ebd0 12c             | emupad_out_ptr  long    0
2ebd0 12c             | end
2ebd0 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2ebd4 12d             | 
2ebd4 12d             | hdev_init_start
2ebd4 12d             | hdev_port       res     1
2ebd4 12d             | hdev_port       res     1
2ebd4 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ebd4 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ebd4 12d             | kbm_next_datax  res     1
2ebd4 12d             | kbm_next_datax  res     1
2ebd4 12d             | hub_intf_num    res     1
2ebd4 12d             | hub_intf_num    res     1
2ebd4 12d             | hub_next_datax  res     1
2ebd4 12d             | hub_next_datax  res     1
2ebd4 12d             | hub_status_chg  res     1
2ebd4 12d             | hub_status_chg  res     1
2ebd4 12d             | hub_port_status res     1
2ebd4 12d             | hub_port_status res     1
2ebd4 12d             | if HAVE_MOUSE
2ebd4 12d             | ms_intf_num     res     1
2ebd4 12d             | ms_intf_num     res     1
2ebd4 12d             | ms_in_max_pkt   res     1
2ebd4 12d             | ms_in_max_pkt   res     1
2ebd4 12d             | end
2ebd4 12d             | kb_intf_num     res     1
2ebd4 12d             | kb_intf_num     res     1
2ebd4 12d             | kb_interval     res     1
2ebd4 12d             | kb_interval     res     1
2ebd4 12d             | kb_in_max_pkt   res     1
2ebd4 12d             | kb_in_max_pkt   res     1
2ebd4 12d             | kb_max_index    res     1
2ebd4 12d             | kb_max_index    res     1
2ebd4 12d             | kb_led_states   res     1
2ebd4 12d             | kb_led_states   res     1
2ebd4 12d             | gp_intf_num     res     1
2ebd4 12d             | gp_intf_num     res     1
2ebd4 12d             | gp_interval     res     1
2ebd4 12d             | gp_interval     res     1
2ebd4 12d             | gp_max_index    res     1
2ebd4 12d             | gp_max_index    res     1
2ebd4 12d             | gp_descr_len    res     1+MAX_DEVICES
2ebd4 12d             | gp_descr_len    res     1+MAX_DEVICES
2ebd4 12d             | hdev_init_end
2ebd4 12d             | 
2ebd4 12d             | ' Initialized at cog startup:
2ebd4 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ebd4 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ebd4 12d             | iframe_ct_new   res     1
2ebd4 12d             | iframe_ct_new   res     1
2ebd4 12d             | iframe_ct_base  res     1
2ebd4 12d             | iframe_ct_base  res     1
2ebd4 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ebd4 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ebd4 12d             | 
2ebd4 12d             | ' This register block is reset to zero when a USB device connects
2ebd4 12d             | hreg_init_start
2ebd4 12d             | hstatus         res     1         ' Host status flags
2ebd4 12d             | hstatus         res     1         ' Host status flags
2ebd4 12d             | hctwait         res     1         ' Poll-based wait clocks
2ebd4 12d             | hctwait         res     1         ' Poll-based wait clocks
2ebd4 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ebd4 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ebd4 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ebd4 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ebd4 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ebd4 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ebd4 12d             | xfer_retry      res     1         ' Control transfer retry count
2ebd4 12d             | xfer_retry      res     1         ' Control transfer retry count
2ebd4 12d             | retry           res     1         ' Transaction retry count
2ebd4 12d             | retry           res     1         ' Transaction retry count
2ebd4 12d             | utx             res     1         ' Byte to transmit on USB
2ebd4 12d             | utx             res     1         ' Byte to transmit on USB
2ebd4 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ebd4 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ebd4 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ebd4 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ebd4 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ebd4 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ebd4 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ebd4 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ebd4 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ebd4 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ebd4 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ebd4 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ebd4 12d             | frame           res     1         ' USB 1ms frame counter value
2ebd4 12d             | frame           res     1         ' USB 1ms frame counter value
2ebd4 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ebd4 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ebd4 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ebd4 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ebd4 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ebd4 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ebd4 12d             | crc             res     1         ' Used for CRC16 calculation
2ebd4 12d             | crc             res     1         ' Used for CRC16 calculation
2ebd4 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ebd4 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ebd4 12d             | retval          res     1         ' Global success/fail return parameter
2ebd4 12d             | retval          res     1         ' Global success/fail return parameter
2ebd4 12d             | context_retval  res     1         ' Operation contextual return parameter
2ebd4 12d             | context_retval  res     1         ' Operation contextual return parameter
2ebd4 12d             | ' Device stuff
2ebd4 12d             | hdev_id         res     1+MAX_DEVICES
2ebd4 12d             | hdev_id         res     1+MAX_DEVICES
2ebd4 12d             | hdev_bcd        res     1
2ebd4 12d             | hdev_bcd        res     1
2ebd4 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ebd4 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ebd4 12d             | ' Keyboard/mouse stuff
2ebd4 12d             | hctrl_ep_addr   res     1
2ebd4 12d             | hctrl_ep_addr   res     1
2ebd4 12d             | hctrl_max_pkt   res     1
2ebd4 12d             | hctrl_max_pkt   res     1
2ebd4 12d             | hconfig_base    res     1
2ebd4 12d             | hconfig_base    res     1
2ebd4 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ebd4 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ebd4 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ebd4 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ebd4 12d             | hdev_class      res     1
2ebd4 12d             | hdev_class      res     1
2ebd4 12d             | hdev_subclass   res     1
2ebd4 12d             | hdev_subclass   res     1
2ebd4 12d             | hdev_protocol   res     1
2ebd4 12d             | hdev_protocol   res     1
2ebd4 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ebd4 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ebd4 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ebd4 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ebd4 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ebd4 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ebd4 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ebd4 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ebd4 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ebd4 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ebd4 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ebd4 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ebd4 12d             | if HAVE_MOUSE
2ebd4 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ebd4 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ebd4 12d             | end
2ebd4 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ebd4 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ebd4 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ebd4 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ebd4 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ebd4 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ebd4 12d             | hdev_out_addr   res     1
2ebd4 12d             | hdev_out_addr   res     1
2ebd4 12d             | 
2ebd4 12d             | if EMUPAD_MAX_PLAYER > 0
2ebd4 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2ebd4 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2ebd4 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2ebd4 12d             | end
2ebd4 12d             | 
2ebd4 12d             | hreg_init_end
2ebd4 12d             | 
2ebd4 12d             | hidr_start
2ebd4 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ebd4 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ebd4 12d             | hidr_flags      res     1
2ebd4 12d             | hidr_flags      res     1
2ebd4 12d             | hidr_axis       res     3
2ebd4 12d             | hidr_axis       res     3
2ebd4 12d             | hidr_buttons    res     1
2ebd4 12d             | hidr_buttons    res     1
2ebd4 12d             | hidr_hats       res     1
2ebd4 12d             | hidr_hats       res     1
2ebd4 12d             | '' Above are actually useful values, 6 longs
2ebd4 12d             | hidr_id         res     1
2ebd4 12d             | hidr_id         res     1
2ebd4 12d             | hidr_state      res     1
2ebd4 12d             | hidr_state      res     1
2ebd4 12d             | hidr_size       res     1
2ebd4 12d             | hidr_size       res     1
2ebd4 12d             | hidr_count      res     1
2ebd4 12d             | hidr_count      res     1
2ebd4 12d             | hidr_offset     res     1
2ebd4 12d             | hidr_offset     res     1
2ebd4 12d             | hidr_usage_idx  res     1
2ebd4 12d             | hidr_usage_idx  res     1
2ebd4 12d             | hidr_lminmax    res     1
2ebd4 12d             | hidr_lminmax    res     1
2ebd4 12d             | hidr_pminmax    res     1
2ebd4 12d             | hidr_pminmax    res     1
2ebd4 12d             | hidr_type       res     1
2ebd4 12d             | hidr_type       res     1
2ebd4 12d             | hidr_end
2ebd4 12d             | 
2ebd4 12d             | ' Variables dependent on the system freqency
2ebd4 12d             | _var_64_lower_  res     1
2ebd4 12d             | _var_64_lower_  res     1
2ebd4 12d             | _var_64_upper_  res     1
2ebd4 12d             | _var_64_upper_  res     1
2ebd4 12d             | _12Mbps_        res     1
2ebd4 12d             | _12Mbps_        res     1
2ebd4 12d             | _1_5Mbps_       res     1
2ebd4 12d             | _1_5Mbps_       res     1
2ebd4 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ebd4 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ebd4 12d             | _1us_           res     1         ' 1us
2ebd4 12d             | _1us_           res     1         ' 1us
2ebd4 12d             | _10us_          res     1         ' 10us
2ebd4 12d             | _10us_          res     1         ' 10us
2ebd4 12d             | _33us_          res     1         ' 33us
2ebd4 12d             | _33us_          res     1         ' 33us
2ebd4 12d             | _txn_err_       res     1         ' 250us
2ebd4 12d             | _txn_err_       res     1         ' 250us
2ebd4 12d             | _500us_         res     1         ' 500us
2ebd4 12d             | _500us_         res     1         ' 500us
2ebd4 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ebd4 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ebd4 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ebd4 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ebd4 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ebd4 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ebd4 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ebd4 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ebd4 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ebd4 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ebd4 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ebd4 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ebd4 12d             | _preamble_wait_ res     1
2ebd4 12d             | _preamble_wait_ res     1
2ebd4 12d             | _1ms_           res     1         ' 1ms
2ebd4 12d             | _1ms_           res     1         ' 1ms
2ebd4 12d             | _2ms_           res     1         ' 2ms
2ebd4 12d             | _2ms_           res     1         ' 2ms
2ebd4 12d             | _suspend_wait_  res     1         ' 3ms
2ebd4 12d             | _suspend_wait_  res     1         ' 3ms
2ebd4 12d             | _4ms_           res     1         ' 4ms
2ebd4 12d             | _4ms_           res     1         ' 4ms
2ebd4 12d             | _xfer_wait_     res     1         ' 5ms
2ebd4 12d             | _xfer_wait_     res     1         ' 5ms
2ebd4 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ebd4 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ebd4 12d             | _reset_hold_    res     1         ' 15ms
2ebd4 12d             | _reset_hold_    res     1         ' 15ms
2ebd4 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ebd4 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ebd4 12d             | _21ms_          res     1         ' 21ms
2ebd4 12d             | _21ms_          res     1         ' 21ms
2ebd4 12d             | _100ms_         res     1         ' 100ms
2ebd4 12d             | _100ms_         res     1         ' 100ms
2ebd4 12d             | _500ms_         res     1         ' 500ms
2ebd4 12d             | _500ms_         res     1         ' 500ms
2ebd4 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ebd4 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ebd4 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ebd4 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ebd4 12d             | '------------------------------------------------------------------------------
2ebd4 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ebd4 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ebd4 12d             | _usb_d_ls_nco_  res     1
2ebd4 12d             | _usb_d_ls_nco_  res     1
2ebd4 12d             | _usb_h_fs_nco_  res     1
2ebd4 12d             | _usb_h_fs_nco_  res     1
2ebd4 12d             | _usb_d_fs_nco_  res     1
2ebd4 12d             | _usb_d_fs_nco_  res     1
2ebd4 12d             | '------------------------------------------------------------------------------
2ebd4 12d             | ' Scratch registers
2ebd4 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ebd4 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ebd4 12d             | htmp1           res     1
2ebd4 12d             | htmp1           res     1
2ebd4 12d             | htmp2           res     1
2ebd4 12d             | htmp2           res     1
2ebd4 12d             | htmp3           res     1
2ebd4 12d             | htmp3           res     1
2ebd4 12d             | hrep            res     1         ' Repeat count
2ebd4 12d             | hrep            res     1         ' Repeat count
2ebd4 12d             | hsave0          res     1         ' Subroutine parameter saves
2ebd4 12d             | hsave0          res     1         ' Subroutine parameter saves
2ebd4 12d             | hsave1          res     1
2ebd4 12d             | hsave1          res     1
2ebd4 12d             | hsave2          res     1
2ebd4 12d             | hsave2          res     1
2ebd4 12d             | isrtmp1         res     1
2ebd4 12d             | isrtmp1         res     1
2ebd4 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ebd4 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ebd4 12d             | hr0             res     1         ' Multi-purpose registers
2ebd4 12d             | hr0             res     1         ' Multi-purpose registers
2ebd4 12d             | hr1             res     1
2ebd4 12d             | hr1             res     1
2ebd4 12d             | hr2             res     1
2ebd4 12d             | hr2             res     1
2ebd4 12d             | hr3             res     1
2ebd4 12d             | hr3             res     1
2ebd4 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ebd4 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ebd4 12d             | hpar2           res     1
2ebd4 12d             | hpar2           res     1
2ebd4 12d             | hpar3           res     1
2ebd4 12d             | hpar3           res     1
2ebd4 12d             | hct2            res     1         ' Function response bus turn-around timer
2ebd4 12d             | hct2            res     1         ' Function response bus turn-around timer
2ebd4 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ebd4 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ebd4 12d             | mod_cnt         res     1         ' Used in idle loops
2ebd4 12d             | mod_cnt         res     1         ' Used in idle loops
2ebd4 12d             |                 fit     $1F0
2ebd4 12d             |                 org     $200
2ebd4 200             | hlut_start
2ebd4 200             | 
2ebd4 200             | '------------------------------------------------------------------------------
2ebd4 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2ebd4 200             | ' settings to startup defaults.
2ebd4 200             | '------------------------------------------------------------------------------
2ebd4 200             | ' On entry:
2ebd4 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2ebd4 200             | '------------------------------------------------------------------------------
2ebd4 200             | set_speed_full
2ebd4 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2ebd8 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ebdc 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2ebe0 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2ebe4 204             | '                ret                             wcz     ' Restore caller flags on exit
2ebe4 204             | 
2ebe4 204             | '------------------------------------------------------------------------------
2ebe4 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2ebe4 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2ebe4 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2ebe4 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2ebe4 204             | ' putting the smart pins into reset.
2ebe4 204             | '------------------------------------------------------------------------------
2ebe4 204             | ' On entry:
2ebe4 204             | ' On exit: CZ flags restored to caller states
2ebe4 204             | '------------------------------------------------------------------------------
2ebe4 204             | set_speed_low
2ebe4 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2ebe8 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2ebec 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2ebf0 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2ebf4 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2ebf8 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2ebfc 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2ec00 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2ec04 20c             | 
2ec04 20c             | '------------------------------------------------------------------------------
2ec04 20c             | ' Perform configuration stuff required when a device intitially connects.
2ec04 20c             | '------------------------------------------------------------------------------
2ec04 20c             | ' On entry:
2ec04 20c             | ' On exit:
2ec04 20c             | '------------------------------------------------------------------------------
2ec04 20c             | on_connect
2ec04 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2ec08 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2ec0c 20e             | .retry
2ec0c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ec10 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2ec14 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2ec18 211 00 08 00 FF 
2ec1c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2ec20 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2ec24 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ec28 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2ec2c 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2ec30 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2ec34 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec38 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2ec3c 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2ec40 21b 4C 03 B0 FD |                 call    #poll_waitx
2ec44 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2ec48 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2ec4c 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2ec50 21f B8 FF 9F FD |                 jmp     #.retry
2ec54 220             | .get_dev_desc
2ec54 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2ec58 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2ec5c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2ec60 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2ec64 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2ec68 225 88 FB BF FD |                 call    #reset
2ec6c 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2ec70 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ec74 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2ec78 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2ec7c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec80 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ec84 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2ec88 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2ec8c 22e 04 00 00 FF 
2ec90 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2ec94 230 34 FA BF FD |                 call    #calc_crc5
2ec98 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2ec9c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2eca0 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2eca4 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2eca8 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2ecac 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2ecb0 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ecb4 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ecb8 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2ecbc 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2ecc0 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2ecc4 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2ecc8 23d C4 02 B0 FD |                 call    #poll_waitx
2eccc 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2ecd0 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ecd4 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2ecd8 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2ecdc 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2ece0 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ece4 244 2D 00 64 5D |         if_nz   ret
2ece8 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2ecec 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2ecf0 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2ecf4 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2ecf8 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2ecfc 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2ed00 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2ed04 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2ed08 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2ed0c 24e 2C FB 9F CD |         if_b    jmp     #host_error
2ed10 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2ed14 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ed18 251 2D EC 63 FD |                 call    pa
2ed1c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2ed20 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ed24 254 2C EC 63 FD |                 jmp     pa
2ed28 255             | 
2ed28 255             | '------------------------------------------------------------------------------
2ed28 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2ed28 255             | ' Status reporting is always in the function-to-host direction.
2ed28 255             | '------------------------------------------------------------------------------
2ed28 255             | ' On entry:
2ed28 255             | '   PTRA - start address of the SETUP data in hub.
2ed28 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2ed28 255             | '     stage.
2ed28 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2ed28 255             | ' On exit:
2ed28 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2ed28 255             | '     contains the count of data stage bytes actually received, which must
2ed28 255             | '     always be <= the count requested.
2ed28 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ed28 255             | '     more specific USB operation error code.
2ed28 255             | '------------------------------------------------------------------------------
2ed28 255             | control_read
2ed28 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2ed2c 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2ed30 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2ed34 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ed38 259             | .xfer_start
2ed38 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ed3c 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ed40 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ed44 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2ed48 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ed4c 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ed50 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ed54 260 61 00 00 FF 
2ed58 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2ed5c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ed60 263             | .data
2ed60 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2ed64 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2ed68 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2ed6c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2ed70 267             | .nak_retry
2ed70 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2ed74 268             | .in_retry
2ed74 268 BC F6 BF FD |                 call    #txn_in
2ed78 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2ed7c 26a 28 00 90 AD |         if_z    jmp     #.commit
2ed80 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ed84 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2ed88 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ed8c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2ed90 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2ed94 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2ed98 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2ed9c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2eda0 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2eda4 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2eda8 275             | .commit
2eda8 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2edac 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2edb0 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2edb4 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2edb8 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2edbc 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2edc0 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2edc4 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2edc8 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2edcc 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2edd0 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2edd4 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2edd8 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2eddc 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2ede0 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2ede4 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2ede8 285             | .pre_status
2ede8 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2edec 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2edf0 287 00 B0 06 F6 |                 mov     pkt_data, #0
2edf4 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2edf8 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2edfc 28a 61 00 00 FF 
2ee00 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2ee04 28c             | .out_retry
2ee04 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2ee08 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ee0c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2ee10 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ee14 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2ee18 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ee1c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2ee20 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2ee24 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ee28 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2ee2c 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2ee30 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2ee30 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2ee30 297             | ' ControlRead() transfer gets things unstuck most of the time...
2ee30 297             | .xfer_retry
2ee30 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2ee34 298 58 01 B0 FD |                 call    #poll_waitx
2ee38 299 8C F9 BF FD |                 call    #wait_txn_ok
2ee3c 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2ee40 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2ee44 29c C8 EF 03 F6 |                 mov     pb, hpar3
2ee48 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2ee4c 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2ee50 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2ee54 2a0             | 
2ee54 2a0             | '------------------------------------------------------------------------------
2ee54 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2ee54 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2ee54 2a0             | ' the SETUP data struct is filled with the required values.
2ee54 2a0             | '------------------------------------------------------------------------------
2ee54 2a0             | ' On entry:
2ee54 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2ee54 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2ee54 2a0             | '     stage.
2ee54 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2ee54 2a0             | ' On exit:
2ee54 2a0             | '   retval - used to convey the success/failure of each stage.
2ee54 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ee54 2a0             | '     more specific USB operation error code.
2ee54 2a0             | '------------------------------------------------------------------------------
2ee54 2a0             | control_write
2ee54 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ee58 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ee5c 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2ee60 2a3             | 
2ee60 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2ee64 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2ee68 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2ee6c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ee70 2a7             | .xfer_start
2ee70 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2ee74 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ee78 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ee7c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ee80 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2ee84 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ee88 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ee8c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ee90 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2ee94 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ee98 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ee9c 2b2             | .data
2ee9c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2eea0 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2eea4 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2eea8 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2eeac 2b6             | .out_retry
2eeac 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2eeb0 2b7 88 F6 BF FD |                 call    #txn_out
2eeb4 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eeb8 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2eebc 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2eec0 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2eec4 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2eec8 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2eecc 2be             | .commit
2eecc 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2eed0 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2eed4 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2eed8 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2eedc 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2eee0 2c3             | pre_status_in
2eee0 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2eee4 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2eee8 2c5             | .status_retry
2eee8 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2eeec 2c6 44 F5 BF FD |                 call    #txn_in
2eef0 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2eef4 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2eef8 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2eefc 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2ef00 2cb 2D 00 64 AD |         if_z    ret
2ef04 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2ef08 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ef0c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2ef10 2cf             | '               ret                                     ' Caller must handle transfer retirement
2ef10 2cf             | 
2ef10 2cf             | '------------------------------------------------------------------------------
2ef10 2cf             | ' Execute an IN interrupt transaction.
2ef10 2cf             | '------------------------------------------------------------------------------
2ef10 2cf             | ' On entry:
2ef10 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2ef10 2cf             | '   hpar2 - Address of the IN data buffer
2ef10 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2ef10 2cf             | ' On exit:
2ef10 2cf             | '   retval - the result of the operation.
2ef10 2cf             | '   hpar3 - the count of IN data bytes actually received.
2ef10 2cf             | '------------------------------------------------------------------------------
2ef10 2cf             | do_int_in
2ef10 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ef14 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ef18 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2ef1c 2d2             | 
2ef1c 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2ef20 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2ef24 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2ef28 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2ef2c 2d6             | .retry
2ef2c 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2ef30 2d7 00 F5 BF FD |                 call    #txn_in
2ef34 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2ef38 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2ef3c 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2ef40 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2ef44 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2ef48 2dd 54 00 B0 FD |                 call    #retry_wait
2ef4c 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ef50 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2ef54 2e0 D4 FF 9F FD |                 jmp     #.retry
2ef58 2e1             | .commit
2ef58 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2ef5c 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2ef60 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2ef64 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2ef68 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2ef6c 2e6             | .post_ret
2ef6c 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2ef70 2e7             | 
2ef70 2e7             | 
2ef70 2e7             | '------------------------------------------------------------------------------
2ef70 2e7             | ' Resets the downstream hub port to FS
2ef70 2e7             | '------------------------------------------------------------------------------
2ef70 2e7             | dwnstream_reset
2ef70 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ef74 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2ef78 2e9             | 
2ef78 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2ef7c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2ef80 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ef84 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ef88 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2ef8c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2ef90 2ef             | 
2ef90 2ef             | '------------------------------------------------------------------------------
2ef90 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2ef90 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2ef90 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2ef90 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2ef90 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2ef90 2ef             | '------------------------------------------------------------------------------
2ef90 2ef             | ' On entry:
2ef90 2ef             | '   hctwait - wait interval in sysclocks.
2ef90 2ef             | ' On exit:
2ef90 2ef             | '------------------------------------------------------------------------------
2ef90 2ef             | poll_waitx
2ef90 2ef 1A 92 63 FD |                 getct   hct2
2ef94 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2ef98 2f1             | .wait
2ef98 2f1 FF 25 CC FB |                 jnct2   #.wait
2ef9c 2f2 2D 00 64 FD |                 ret
2efa0 2f3             | 
2efa0 2f3             | '------------------------------------------------------------------------------
2efa0 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2efa0 2f3             | '------------------------------------------------------------------------------
2efa0 2f3             | ' On entry:
2efa0 2f3             | '   retval - transaction response PID or error code.
2efa0 2f3             | ' On exit:
2efa0 2f3             | '------------------------------------------------------------------------------
2efa0 2f3             | retry_wait
2efa0 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2efa4 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2efa8 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2efac 2f6 14 00 90 AD |         if_z    jmp     #.nak
2efb0 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2efb4 2f8 D8 FF BF FD |                 call    #poll_waitx
2efb8 2f9             | .dec
2efb8 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2efbc 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2efc0 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2efc4 2fc             | .nak
2efc4 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2efc8 2fd C4 FF BF FD |                 call    #poll_waitx
2efcc 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2efd0 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2efd4 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2efd8 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2efdc 302 2D 00 64 FD |                 ret
2efe0 303             | 
2efe0 303             | host_reset
2efe0 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2efe4 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2efe8 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2efe8 305 BD 01 05 FF 
2efec 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2eff0 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2eff4 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2eff8 309             | ' Check to see if the system clock has been changed.
2eff8 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2effc 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2f000 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2f004 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2f008 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f00c 30e 40 46 62 FD |                 dirl    dp
2f010 30f             | 
2f010 30f 28 02 64 FD |                 setq    #1
2f014 310 80 00 80 FF 
2f018 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f01c 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2f020 313             | .enable
2f020 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f024 314 41 46 62 FD |                 dirh    dp
2f028 315 1F 36 63 FD |                 waitx   _1us_
2f02c 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f030 317             | 
2f030 317             |                 ' Handle Port protection enable and startup delay
2f030 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2f034 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2f038 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2f03c 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2f040 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2f044 31c             | 
2f044 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2f048 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2f04c 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2f050 31f 00 00 04 F6 |                 mov     0-0, #0
2f054 320             | .regloop
2f054 320             | 
2f054 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2f054 320             | 
2f054 320             | discon_entry
2f054 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2f058 321             | 
2f058 321             |               
2f058 321             |         if HAVE_HIDPAD
2f058 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2f05c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f060 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2f064 324 F7 01 68 FC |                 wrlong  #0,pb
2f068 325             |         end
2f068 325             |         if EMUPAD_MAX_PLAYER > 0
2f068 325             |         end
2f068 325             | 
2f068 325             |                 ' Fall through to disconnected loop
2f068 325             | 
2f068 325             | '-----------------------------------------------------------------------------------------------------------------
2f068 325             | ' Device connect handling (Section 7.1.7.3).
2f068 325             | '-----------------------------------------------------------------------------------------------------------------
2f068 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2f068 325             | ' device to connect (Section 7.1.7.3).
2f068 325             | '-----------------------------------------------------------------------------------------------------------------
2f068 325             | disconnected
2f068 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2f06c 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2f070 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2f074 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2f078 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2f07c 32a             |         if ACTIVITY_LED >= 0
2f07c 32a             |         end
2f07c 32a 22 A7 82 FA |                 rqpin   urx, dm
2f080 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2f084 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2f088 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2f08c 32e             | .se1_test
2f08c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2f090 32f FC FE BF FD |                 call    #poll_waitx
2f094 330 22 A7 82 FA |                 rqpin   urx, dm
2f098 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f09c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2f0a0 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2f0a4 334             | .se1            'SE1 is a fatal error condition
2f0a4 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2f0a8 335 E4 FE BF FD |                 call    #poll_waitx
2f0ac 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2f0b0 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2f0b4 338             | .connect_test                                           ' Test lines until stable J/K state seen
2f0b4 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2f0b8 339 22 A7 82 FA |                 rqpin   urx, dm
2f0bc 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f0c0 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2f0c4 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2f0c8 33d             | connected
2f0c8 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2f0cc 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2f0d0 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2f0d4 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2f0d8 341             | .set_pulse
2f0d8 341 1A 64 63 FD |                 getct   _pulse_time_
2f0dc 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2f0e0 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2f0e0 343             | ' of 1ms and make a correction, if necessary.
2f0e0 343             | '                mov     htmp, _1ms_
2f0e0 343             | '                subs    htmp, iframe_delta
2f0e0 343             | '                adds    _frame1ms_clks_, htmp
2f0e0 343             | '                debug(udec(_frame1ms_clks_))
2f0e0 343             | 
2f0e0 343             |                 ' Fall through to idle/processing loop
2f0e0 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2f0e4 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2f0e8 345             | 
2f0e8 345             | hidle
2f0e8 345 22 A7 82 FA |                 rqpin   urx, dm
2f0ec 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f0f0 347 98 00 90 CD |         if_c    jmp     #.se0_test
2f0f4 348 24 06 70 FD |                 pollct3                         wc
2f0f8 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2f0fc 34a 1A 94 63 FD |                 getct   hct3
2f100 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2f104 34c             | 
2f104 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2f108 34d 00 70 E3 F8 |                 getbyte htmp
2f10c 34e             | 
2f10c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2f110 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2f114 350 40 00 90 AD |         if_z    jmp     #.poll
2f118 351             | 
2f118 351             |         if _HAVE_GAMEPAD
2f118 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2f11c 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2f120 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2f124 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2f128 355 2C 00 90 AD |         if_z    jmp     #.poll
2f12c 356             |         end
2f12c 356             | 
2f12c 356             |         if HAVE_MOUSE
2f12c 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2f130 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f134 358 20 00 90 AD |         if_z    jmp     #.poll
2f138 359             |         end
2f138 359             | 
2f138 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2f13c 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2f140 35b 14 00 90 AD |         if_z    jmp     #.poll
2f144 35c             | 
2f144 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2f148 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2f14c 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2f150 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2f154 360             |         if HAVE_MOUSE
2f154 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f158 361             |         else
2f158 361             |         end
2f158 361             | 
2f158 361             | .poll
2f158 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2f15c 362 2D EC 63 FD |                 call    pa
2f160 363             | .skip_poll
2f160 363             | 
2f160 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2f164 364             | 
2f164 364             | .nopoll
2f164 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2f168 365 44 00 90 AD |         if_z    jmp     #hsuspend
2f16c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2f170 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2f174 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2f178 369 1A 84 63 FD |                 getct   hr0
2f17c 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2f180 36b             |         if ACTIVITY_LED >= 0
2f180 36b             |         end
2f180 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2f184 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2f188 36d 5C FF 9F FD |                 jmp     #hidle
2f18c 36e             | ' Check for extended SE0 state on the bus
2f18c 36e             | .se0_test
2f18c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2f190 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2f194 370 22 A7 82 FA |                 rqpin   urx, dm
2f198 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f19c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2f1a0 373 24 F6 BF FD |                 call    #wait_txn_ok
2f1a4 374 00 00 80 FF 
2f1a8 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2f1ac 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2f1ac 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2f1b0 377             | 
2f1b0 377             | hsuspend
2f1b0 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2f1b4 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2f1b8 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2f1bc 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2f1c0 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2f1c4 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2f1c8 37d             | 
2f1c8 37d             |                 ' Fall through to resume wait loop
2f1c8 37d             | 
2f1c8 37d             | hwait_resume
2f1c8 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2f1cc 37e 02 86 47 F0 |                 shr     hr1, #2
2f1d0 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2f1d4 380             |         if ACTIVITY_LED >= 0
2f1d4 380             |         end
2f1d4 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2f1d8 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2f1dc 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2f1e0 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2f1e4 384 18 00 90 AD |         if_z    jmp     #.resume
2f1e8 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2f1ec 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f1f0 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2f1f4 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2f1f8 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2f1fc 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2f200 38b             | .resume
2f200 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2f204 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2f208 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2f20c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2f210 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2f214 390 1F 70 63 FD |                 waitx   htmp
2f218 391 22 07 28 FC |                 wypin   #OUT_J, dm
2f21c 392 01 70 47 F0 |                 shr     htmp, #1
2f220 393 1F 70 63 FD |                 waitx   htmp
2f224 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f228 395 1A 92 62 FD |                 getct   iframe_ct_base
2f22c 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2f230 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2f234 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2f238 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2f23c 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2f240 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2f244 39c             | 
2f244 39c             | '------------------------------------------------------------------------------
2f244 39c             | ' Send preamble to enable low-speed HUB ports
2f244 39c             | '------------------------------------------------------------------------------
2f244 39c             | ' On entry:
2f244 39c             | ' On exit:
2f244 39c             | '   USB baud rate set to low-speed
2f244 39c             | '------------------------------------------------------------------------------
2f244 39c             | utx_pre
2f244 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f248 39d 40 46 62 FD |                 dirl    dp
2f24c 39e 28 02 64 FD |                 setq    #1
2f250 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2f254 3a0 58 44 62 FD |                 drvl    dm
2f258 3a1 59 46 62 FD |                 drvh    dp
2f25c 3a2             | 
2f25c 3a2 1E 00 00 FF 
2f260 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2f264 3a4             | 
2f264 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2f268 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2f26c 3a6 28 02 64 3D |         if_nc   setq    #1
2f270 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2f274 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2f278 3a9             | .l1
2f278 3a9             | 
2f278 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f27c 3aa 40 46 62 FD |                 dirl    dp
2f280 3ab 28 02 64 FD |                 setq    #1
2f284 3ac 80 00 80 FF 
2f288 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f28c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2f290 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f294 3b0 41 46 62 FD |                 dirh    dp
2f298 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f29c 3b2             | 
2f29c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2f2a0 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2f2a4 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2f2a8 3b5             | 
2f2a8 3b5             | hlut_end
2f2a8 3b5             |                 fit     $400
2f2a8 3b5             |                 orgh
2f2a8                 | if OVERLAP_MEMORY
2f2a8                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2f2a8                 | end
2f2a8                 | '------------------------------------------------------------------------------
2f2a8                 | ' Routines called from cog space.
2f2a8                 | '------------------------------------------------------------------------------
2f2a8                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2f2a8                 | '------------------------------------------------------------------------------
2f2a8                 | 
2f2a8                 | '------------------------------------------------------------------------------
2f2a8                 | ' USB host cog initialization.
2f2a8                 | '------------------------------------------------------------------------------
2f2a8                 | usb_host_init
2f2a8                 |                 ' Initialize buffer pointers
2f2a8                 |         if OVERLAP_MEMORY
2f2a8                 |         else
2f2a8     40 15 B0 FE |                 loc     pb, #hid_descr
2f2ac                 |         end
2f2ac     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2f2b0                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2f2b0                 |                 {
2f2b0                 |                 }
2f2b0                 |         
2f2b0                 |                 {
2f2b0                 |                 }
2f2b0                 |                 'loc     pb,#hkbd_report
2f2b0                 |                 'mov     hkbd_report_p,pb
2f2b0                 | 
2f2b0     08 1D B0 FE |                 loc     pb, #hub_descr
2f2b4     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2f2b8     1D 1D B0 FE |                 loc     pb, #urx_buff
2f2bc     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2f2c0     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2f2c4     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2f2c8     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2f2cc     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2f2d0     18 15 B0 FE |                 loc     pb, #usb_cache_start
2f2d4     F7 55 02 F6 |                 mov     cache_start_p, pb
2f2d8     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2f2dc     F7 57 02 F6 |                 mov     cache_end_p, pb
2f2e0                 | 
2f2e0                 |         if ERROR_LED >= 0
2f2e0                 |         end
2f2e0                 | 
2f2e0                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2f2e0                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2f2e0                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2f2e0                 | ' Configure and enable the Serial Host USB port.
2f2e0     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2f2e4                 | 
2f2e4                 | '------------------------------------------------------------------------------
2f2e4                 | ' Timing calculations happen before any interrupt(s) are enabled.
2f2e4                 | '------------------------------------------------------------------------------
2f2e4                 | ' On entry:
2f2e4                 | '   htmp - current CLKFREQ value.
2f2e4                 | '------------------------------------------------------------------------------
2f2e4                 | hinit_usb_timings
2f2e4                 | '                getct   htmp2
2f2e4     B8 59 02 F6 |                 mov     save_sysclk, htmp
2f2e8     8D 5B 80 FF 
2f2ec     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2f2f0     18 30 63 FD |                 getqx   _12Mbps_
2f2f4     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2f2f8     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2f2fc     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2f300     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2f304     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2f308     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2f30c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2f310     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2f314     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2f318     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2f31c     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2f320     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2f324     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2f328     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2f32c     80 00 00 FF 
2f330     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2f334     18 2C 63 FD |                 getqx   _var_64_lower_
2f338     19 2E 63 FD |                 getqy   _var_64_upper_
2f33c     28 2C 63 FD |                 setq    _var_64_lower_
2f340     65 CD 1D FF 
2f344     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2f348     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2f34c     01 00 00 FF 
2f350     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2f354     18 2C 63 FD |                 getqx   _var_64_lower_
2f358     19 2E 63 FD |                 getqy   _var_64_upper_
2f35c     28 2C 63 FD |                 setq    _var_64_lower_
2f360     A1 07 00 FF 
2f364     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2f368     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2f36c     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2f370     09 36 57 F0 |                 shr     _1us_, #9               wc
2f374     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2f378     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2f37c     18 38 63 FD |                 getqx   _10us_
2f380     09 38 57 F0 |                 shr     _10us_, #9              wc
2f384     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2f388     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2f38c     18 3A 63 FD |                 getqx   _33us_
2f390     09 3A 57 F0 |                 shr     _33us_, #9              wc
2f394     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2f398     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2f39c     18 3C 63 FD |                 getqx   _txn_err_
2f3a0     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2f3a4     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2f3a8     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2f3ac     18 3E 63 FD |                 getqx   _500us_
2f3b0     09 3E 57 F0 |                 shr     _500us_, #9             wc
2f3b4     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2f3b8     01 00 00 FF 
2f3bc     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2f3c0     18 40 63 FD |                 getqx   _txn_ok_ls_
2f3c4     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2f3c8     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2f3cc     01 00 00 FF 
2f3d0     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2f3d4     18 42 63 FD |                 getqx   _txn_ok_fs_
2f3d8     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2f3dc     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2f3e0     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2f3e4     05 00 00 FF 
2f3e8     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2f3ec     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2f3f0     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2f3f4     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2f3f8     1C 00 00 FF 
2f3fc     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2f400     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2f404     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2f408     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2f40c     00 00 00 FF 
2f410     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2f414     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2f418     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2f41c     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2f420     04 00 00 FF 
2f424     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2f428     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2f42c     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2f430     8D 5B 00 FF 
2f434     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2f438     18 4C 63 FD |                 getqx   _preamble_wait_
2f43c     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2f440     01 00 00 FF 
2f444     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2f448     18 2C 63 FD |                 getqx   _var_64_lower_
2f44c     19 2E 63 FD |                 getqy   _var_64_upper_
2f450     28 2C 63 FD |                 setq    _var_64_lower_
2f454     01 00 00 FF 
2f458     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2f45c     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2f460     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2f464     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2f468     FF FF 7F FF 
2f46c     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2f470     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2f474     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2f478     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2f47c     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2f480     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2f484     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2f488     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2f48c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2f490     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2f494     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2f498     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2f49c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2f4a0     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2f4a4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2f4a8     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2f4ac     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2f4b0     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2f4b4     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2f4b8     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2f4bc     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2f4c0     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2f4c4     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2f4c8     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2f4cc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2f4d0     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2f4d4     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2f4d8                 | '        _ret_   mov     _1sec_, save_sysclk
2f4d8                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2f4d8                 | '                ret
2f4d8                 | {
2f4d8                 | }
2f4d8                 | 
2f4d8                 | '------------------------------------------------------------------------------
2f4d8                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2f4d8                 | ' one. If it is, start the task progression that will configure the device for
2f4d8                 | ' use.
2f4d8                 | '------------------------------------------------------------------------------
2f4d8                 | ' On entry:
2f4d8                 | '   hconfig_base - start address of the cached config descriptor chain.
2f4d8                 | ' On exit:
2f4d8                 | '------------------------------------------------------------------------------
2f4d8                 | hparse_con_desc
2f4d8     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2f4dc     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2f4e0     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2f4e4     4E 70 FF F9 |                 movbyts htmp,#%%1032
2f4e8     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2f4ec                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2f4ec                 | 
2f4ec     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2f4f0     6E ED 03 F1 |                 add     pa, hconfig_base
2f4f4     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2f4f8                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2f4f8                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2f4f8                 | ' that defines a keyboard and/or mouse.
2f4f8     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2f4fc                 | .next_intf
2f4fc     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f500     BC 01 90 3D |         if_ae   jmp     #hset_config
2f504     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f508     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f50c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f510     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f514     0C 00 90 AD |         if_z    jmp     #.intf
2f518     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f51c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f520     D8 FF 9F FD |                 jmp     #.next_intf
2f524                 | .intf
2f524     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2f528     00 90 07 F6 |                 mov     hpar3, #0
2f52c     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2f530     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2f534     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2f538     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2f53c                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2f53c                 | 
2f53c                 | .endp
2f53c     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f540     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f544     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f548     78 00 90 3D |         if_ae   jmp     #.get_device
2f54c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f550     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f554     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f558     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f55c     64 00 90 AD |         if_z    jmp     #.get_device
2f560     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2f564     04 00 90 AD |         if_z    jmp     #.get_ep
2f568     D0 FF 9F FD |                 jmp     #.endp
2f56c                 | .get_ep
2f56c     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2f570     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2f574     0F 86 67 F0 |                 shl     hr1, #8 + 7
2f578     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2f57c     3F 00 00 FF 
2f580     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2f584     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2f588     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2f58c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2f590     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f594     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2f598     A0 FF 9F FD |                 jmp     #.endp
2f59c                 | .in_ep
2f59c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2f5a0     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2f5a4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f5a4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f5a8     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2f5ac     8C FF 9F FD |                 jmp     #.endp
2f5b0                 | .out_ep
2f5b0     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2f5b4     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2f5b8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f5b8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f5bc     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2f5c0     78 FF 9F FD |                 jmp     #.endp
2f5c4                 | 
2f5c4                 | .get_device
2f5c4     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2f5c8     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2f5cc     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2f5d0     68 00 90 AD |         if_z    jmp     #.gamepad
2f5d4     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2f5d8     AC 00 90 AD |         if_z    jmp     #.hub
2f5dc     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2f5e0     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2f5e4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f5e8     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f5ec     4C 00 90 AD |         if_z    jmp     #.gamepad
2f5f0     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2f5f4     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2f5f8                 | .keyboard
2f5f8     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2f5fc                 |         if HAVE_MOUSE
2f5fc     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2f600                 |         else
2f600                 |         end
2f600     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2f604     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2f608     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f60c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2f610     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2f614     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2f618                 |                 'debug(udec(kb_intf_num))
2f618                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f618     E0 FE 9F FD |                 jmp     #.next_intf
2f61c                 | if HAVE_MOUSE
2f61c                 | .mouse
2f61c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2f620     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2f624     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2f628     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2f62c     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f630                 |                 'getbyte ms_interval, hr2, #3
2f630     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2f634     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2f638                 |                 'debug(udec(kb_intf_num))
2f638                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f638     C0 FE 9F FD |                 jmp     #.next_intf
2f63c                 | end
2f63c                 | .gamepad
2f63c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f640     C7 71 63 F5 |                 xor     htmp, hpar2
2f644     3F 00 00 FF 
2f648     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f64c     AC FE 9F AD |         if_z    jmp     #.next_intf
2f650                 |         if HAVE_MOUSE
2f650     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f654     C7 71 63 F5 |                 xor     htmp, hpar2
2f658     3F 00 00 FF 
2f65c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f660     98 FE 9F AD |         if_z    jmp     #.next_intf
2f664                 |         end
2f664     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2f668     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2f66c     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2f670                 | 
2f670     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f674     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2f678     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f67c     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2f680     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2f684                 |                 'debug(udec(gp_intf_num))
2f684                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2f684     74 FE 9F FD |                 jmp     #.next_intf
2f688                 | .hub
2f688     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f68c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2f690     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f694     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2f698     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2f69c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f6a0     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2f6a4     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2f6a8     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f6ac     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2f6b0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f6b4     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2f6b8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2f6bc                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2f6bc     3C FE 9F FD |                 jmp     #.next_intf
2f6c0                 | 
2f6c0                 | '------------------------------------------------------------------------------
2f6c0                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2f6c0                 | ' it according to its function, or functions. In the case of this boot protocol
2f6c0                 | ' keyboard/mouse class driver:
2f6c0                 | ' - SetConfiguration(config_num)
2f6c0                 | ' - SetProtocol(boot)
2f6c0                 | ' - SetIdle(indefinite)
2f6c0                 | ' - Enter the device interrupt IN polling task stage.
2f6c0                 | '------------------------------------------------------------------------------
2f6c0                 | ' On entry:
2f6c0                 | ' On exit:
2f6c0                 | '------------------------------------------------------------------------------
2f6c0                 | hset_config
2f6c0                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2f6c0                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2f6c0     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2f6c4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f6c8     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f6cc     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2f6d0                 |         if HAVE_MOUSE
2f6d0     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2f6d4                 |         end
2f6d4     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2f6d8     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2f6dc                 | .set_config
2f6dc     6C 0E D0 FE |                 loc     ptra, #set_config
2f6e0     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2f6e4     6E ED 03 F1 |                 add     pa, hconfig_base
2f6e8     F6 8D C3 FA |                 rdbyte  hpar1, pa
2f6ec     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2f6f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2f6f4     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2f6f8     A0 02 A0 FD |                 call    #control_write
2f6fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f700     2D 00 64 5D |         if_nz   ret
2f704                 | .kbd_config
2f704     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2f708     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2f70c                 | 
2f70c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f710     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f714     3F 00 00 FF 
2f718     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f71c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2f720                 | 
2f720     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f724     34 0E D0 FE |                 loc     ptra, #set_protocol
2f728     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f72c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f730     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f734     A0 02 A0 FD |                 call    #control_write
2f738     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f73c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f740     E4 02 90 5D |         if_nz   jmp     #.notify_client
2f744     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f748     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2f74c     30 03 B0 FD |                 call    #hset_idle
2f750                 |                 'cmp     retval, #PID_ACK        wz
2f750                 |         'if_nz   mov     hkbd_ep_addr, #0
2f750                 |         'if_nz   jmp     #.notify_client
2f750     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f754     EF 02 A0 FD |                 call    #poll_waitx
2f758     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2f75c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2f760     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2f764     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2f768     2C 03 B0 FD |                 call    #hset_kbdled_report
2f76c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f770     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f774     B0 02 90 5D |         if_nz   jmp     #.notify_client
2f778     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f77c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f780     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f784     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f788     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2f78c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f790     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2f794     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f798     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2f79c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2f7a0     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2f7a4                 |         if !!HAVE_MOUSE
2f7a4                 |         end
2f7a4                 | 
2f7a4                 | .mouse_config
2f7a4                 | if HAVE_MOUSE
2f7a4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2f7a8     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f7ac     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f7b0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f7b4     3F 00 00 FF 
2f7b8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f7bc     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f7c0                 | 
2f7c0                 |                 debug("mouse passed addr check")
2f7c0                 | 
2f7c0     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f7c4     00 00 80 FF 
2f7c8     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2f7cc     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2f7d0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f7d4     55 02 A0 FD |                 call    #control_read
2f7d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f7dc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f7e0     44 02 90 5D |         if_nz   jmp     #.notify_client
2f7e4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f7e8     56 01 00 F6 |                 mov     0-0, total_data
2f7ec     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f7f0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f7f0                 | 
2f7f0     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2f7f4     64 0D D0 FE |                 loc     ptra, #set_protocol
2f7f8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f7fc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f800     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f804     A0 02 A0 FD |                 call    #control_write
2f808     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f80c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f810     14 02 90 5D |         if_nz   jmp     #.notify_client
2f814                 |                 debug("mouse passed SetProtocol")
2f814     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f818     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2f81c     60 02 B0 FD |                 call    #hset_idle
2f820                 |                 'cmp     retval, #PID_ACK        wz
2f820                 |         'if_nz   mov     hmouse_ep_addr, #0
2f820                 |         'if_nz   jmp     #.notify_client
2f820                 |                 debug("mouse passed SetIdle")
2f820     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f824     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f828     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f82c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f830     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2f834     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f838     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2f83c     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2f840     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2f844     3F 00 00 FF 
2f848     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2f84c     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2f850     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2f854     D0 01 90 FD |                 jmp     #.notify_client
2f858                 | end
2f858                 | .gamepad_config
2f858                 | if _HAVE_GAMEPAD
2f858     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f85c     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f860     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2f864     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f868     00 70 03 F6 |                 mov     htmp, 0-0
2f86c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f870     3F 00 00 FF 
2f874     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f878     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2f87c                 | 
2f87c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f880     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2f884     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f888     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f88c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f890     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f894     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2f898     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2f89c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2f8a0     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f8a4     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f8a8     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2f8ac     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2f8b0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f8b4                 | 
2f8b4                 |                 if EMUPAD_MAX_PLAYER > 0
2f8b4                 |                 
2f8b4                 | .rule_loop           
2f8b4                 |                 end
2f8b4                 | 
2f8b4     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2f8b8     5C 00 90 AD |         if_e    jmp     #.xinput
2f8bc     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2f8c0     00 70 03 F6 |                 mov     htmp,0-0
2f8c4     01 A6 02 FF 
2f8c8     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2f8cc     7C 00 90 AD |         if_e    jmp     #.ps3
2f8d0                 | 
2f8d0     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f8d4     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2f8d8     00 00 80 5F 
2f8dc     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2f8e0     03 00 80 AF 
2f8e4     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2f8e8     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2f8ec     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f8f0     55 02 A0 FD |                 call    #control_read
2f8f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f8f8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f8fc     00 00 04 56 |         if_nz   mov     0-0, #0
2f900     24 01 90 5D |         if_nz   jmp     #.notify_client
2f904     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f908     56 01 00 F6 |                 mov     0-0, total_data
2f90c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f910                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f910                 | 
2f910     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2f914     10 01 90 FD |                 jmp     #.notify_client
2f918                 | .xinput
2f918     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2f91c     2D EF 03 F6 |                 mov     pb,hdev_port
2f920     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2f924     03 EE 27 F3 |                 fle     pb,#3
2f928     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2f92c     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2f930                 | 
2f930     03 B0 06 F6 |                 mov     pkt_data, #3
2f934     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2f938     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2f93c     5A 00 A0 FD |                 call    #txn_out
2f940     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2f944                 | 
2f944     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2f948     DC 00 90 FD |                 jmp     #.notify_client
2f94c                 | .ps3
2f94c     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2f950     2D EF 03 F6 |                 mov     pb,hdev_port
2f954     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2f958     04 EE 27 F3 |                 fle     pb,#4
2f95c     F7 EF C3 F9 |                 decod   pb
2f960     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2f964                 | 
2f964     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f968     00 0C D0 FE |                 loc     ptra, #set_report
2f96c     01 00 80 FF 
2f970     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2f974     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f978     03 61 5C FC |                 wrword  #48, ptra[wLength]
2f97c     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2f980     A0 02 A0 FD |                 call    #control_write
2f984                 | 
2f984     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f988     E0 0B D0 FE |                 loc     ptra, #set_report
2f98c     01 00 80 FF 
2f990     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2f994     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f998     03 09 5C FC |                 wrword  #4, ptra[wLength]
2f99c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2f9a0     A0 02 A0 FD |                 call    #control_write
2f9a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2f9a8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f9ac     00 00 04 56 |         if_nz   mov     0-0, #0
2f9b0     74 00 90 5D |         if_nz   jmp     #.notify_client
2f9b4                 | 
2f9b4     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2f9b8     6C 00 90 FD |                 jmp     #.notify_client
2f9bc                 | end
2f9bc                 | 
2f9bc                 | .hub_config
2f9bc     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f9c0     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2f9c4     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2f9c8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f9cc     3F 00 00 FF 
2f9d0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f9d4     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2f9d8                 | 
2f9d8     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2f9dc     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2f9e0     26 EF 03 F6 |                 mov     pb, hub_descr_p
2f9e4     55 02 A0 FD |                 call    #control_read
2f9e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f9ec     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2f9f0     34 00 90 5D |         if_nz   jmp     #.notify_client
2f9f4                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2f9f4                 | 
2f9f4     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2f9f8     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2f9fc     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2fa00                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2fa00                 | .pwr_loop
2fa00     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2fa04     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2fa08     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2fa0c     A0 02 A0 FD |                 call    #control_write
2fa10     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2fa14                 | 
2fa14     B1 99 02 F6 |                 mov     hctwait, _500ms_
2fa18     B0 99 02 F1 |                 add     hctwait, _100ms_
2fa1c     EF 02 A0 FD |                 call    #poll_waitx
2fa20                 | 
2fa20     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2fa24     00 00 90 FD |                 jmp     #.notify_client
2fa28                 | 
2fa28                 | .notify_client
2fa28     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2fa2c     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2fa30                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2fa30                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2fa30     2D 00 64 FD |                 ret
2fa34                 | 
2fa34                 | '------------------------------------------------------------------------------
2fa34                 | ' Initialize the keyboard/mouse data area to start-up values.
2fa34                 | '------------------------------------------------------------------------------
2fa34                 | ' On entry:
2fa34                 | ' On exit:
2fa34                 | '------------------------------------------------------------------------------
2fa34                 | init_kbdm_data
2fa34     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2fa38     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2fa3c                 | 
2fa3c     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2fa40     2B ED 03 F6 |                 mov     pa, cache_end_p
2fa44                 | .loop
2fa44     61 01 4C FC |                 wrbyte  #0, ptra++
2fa48     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2fa4c     F4 FF 9F CD |         if_b    jmp     #.loop
2fa50                 |         
2fa50                 |         if EMUPAD_MAX_PLAYER > 0
2fa50                 |         end
2fa50                 | 
2fa50                 | 
2fa50     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2fa54                 | .regloop
2fa54     00 EC 8F F9 |                 altd    pa
2fa58     00 00 04 F6 |                 mov     0-0, #0
2fa5c     01 EC 07 F1 |                 add     pa, #1
2fa60     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2fa64     EC FF 9F 5D |         if_nz   jmp     #.regloop
2fa68                 | 
2fa68     E1 E1 61 FF 
2fa6c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2fa70     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2fa74     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2fa78     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2fa7c                 | 
2fa7c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2fa80                 | 
2fa80                 | '------------------------------------------------------------------------------
2fa80                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2fa80                 | ' function.
2fa80                 | '------------------------------------------------------------------------------
2fa80                 | ' On entry:
2fa80                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2fa80                 | '   hpar2 - index number of the target interface.
2fa80                 | ' On exit:
2fa80                 | '------------------------------------------------------------------------------
2fa80                 | hset_idle
2fa80     A8 99 02 F6 |                 mov     hctwait, _2ms_
2fa84     EF 02 A0 FD |                 call    #poll_waitx
2fa88     D8 0A D0 FE |                 loc     ptra, #set_idle
2fa8c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2fa90     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2fa94     A0 02 80 FD |                 jmp     #control_write
2fa98                 | 
2fa98                 | '------------------------------------------------------------------------------
2fa98                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2fa98                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2fa98                 | '------------------------------------------------------------------------------
2fa98                 | ' On entry:
2fa98                 | '   ep_addr_pid - device address and enpoint for the request.
2fa98                 | ' On exit:
2fa98                 | '   retval - transaction result.
2fa98                 | '------------------------------------------------------------------------------
2fa98                 | hset_kbdled_report
2fa98     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2fa9c     CC 0A D0 FE |                 loc     ptra, #set_report
2faa0     01 00 80 FF 
2faa4     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2faa8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2faac     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2fab0     27 EF 03 F6 |                 mov     pb, urx_buff_p
2fab4     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2fab8     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2fabc                 | 
2fabc                 | '------------------------------------------------------------------------------
2fabc                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2fabc                 | '------------------------------------------------------------------------------
2fabc                 | ' On entry:
2fabc                 | ' On exit:
2fabc                 | '------------------------------------------------------------------------------
2fabc                 | hget_kbd_in_report
2fabc     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2fac0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fac4     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2fac8     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2facc     CF 02 A0 FD |                 call    #do_int_in
2fad0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fad4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fad8                 | 
2fad8     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fadc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fae0                 | 
2fae0     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2fae4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fae8     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2faec     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2faf0                 | 
2faf0     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2faf4     18 00 B0 FD |                 call    #hkbd_compare
2faf8                 |         if EMUPAD_MAX_PLAYER > 0
2faf8                 |         end
2faf8                 | 
2faf8                 | .led_check
2faf8     3B 71 03 F6 |                 mov     htmp, kb_led_states
2fafc     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2fb00     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2fb04     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2fb08     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2fb0c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2fb10                 | 
2fb10                 | '------------------------------------------------------------------------------
2fb10                 | ' Compare current and previous keyboard data buffers for keypress changes.
2fb10                 | '------------------------------------------------------------------------------
2fb10                 | hkbd_compare
2fb10     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fb14     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2fb18     61 73 07 FB |                 rdlong  htmp1, ptra++
2fb1c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2fb20     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2fb24     61 73 07 FB |                 rdlong  htmp1, ptra++
2fb28     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2fb2c     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2fb30     2D 00 64 AD |         if_z    ret
2fb34                 | 
2fb34     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2fb38                 | 
2fb38                 |                 ' Handle modifiers
2fb38     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2fb3c     00 87 C7 FA |                 rdbyte  hr1, ptra
2fb40     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2fb44     63 86 63 FD |                 mergew  hr1
2fb48     08 EC 07 F6 |                 mov     pa,#8
2fb4c                 | .modloop
2fb4c     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2fb50     E8 8C 07 F6 |                 mov     hpar1,#$E8
2fb54     F6 8D 83 F1 |                 sub     hpar1,pa
2fb58     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2fb5c     FB ED 6F FB |                 djnz    pa,#.modloop
2fb60                 | 
2fb60     6F E0 75 FD | .release        modc    _set    wc
2fb64                 |                 'alts    hdev_port, #hid_report_p
2fb64                 |                 'mov     ptra, hid_report_p
2fb64     02 F0 07 F1 |                 add     ptra, #2
2fb68     06 EC 07 F6 |                 mov     pa, #6
2fb6c     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2fb70     20 00 90 AD |         if_z    jmp     #.rl3
2fb74     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fb78     02 F2 07 F1 |                 add     ptrb, #2
2fb7c     06 EE 07 F6 |                 mov     pb, #6
2fb80     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2fb84     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2fb88     08 00 90 AD |         if_z    jmp     #.rl3
2fb8c     FC EF 6F FB |                 djnz    pb, #.rl2
2fb90     68 00 B0 FD |                 call    #hkbd_translate
2fb94     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2fb98                 | 
2fb98     00 90 07 F6 |                 mov     hpar3, #0
2fb9c     1F 90 27 F4 |                 bith    hpar3, #31
2fba0                 | 
2fba0     6F 00 74 FD | .press          modc    _clr    wc
2fba4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fba8     02 F0 07 F1 |                 add     ptra, #2
2fbac     06 EC 07 F6 |                 mov     pa, #6
2fbb0     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2fbb4     20 00 90 AD |         if_z    jmp     #.pl3
2fbb8     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2fbbc     02 F2 07 F1 |                 add     ptrb, #2
2fbc0     06 EE 07 F6 |                 mov     pb, #6
2fbc4     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2fbc8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2fbcc     08 00 90 AD |         if_z    jmp     #.pl3
2fbd0     FC EF 6F FB |                 djnz    pb, #.pl2
2fbd4     24 00 B0 FD |                 call    #hkbd_translate
2fbd8     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2fbdc                 | 
2fbdc     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2fbe0     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2fbe4     28 02 64 FD |                 setq #1
2fbe8     61 73 07 FB |                 rdlong  htmp1, ptra++
2fbec     28 02 64 FD |                 setq #1
2fbf0     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2fbf4     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2fbf8                 | 
2fbf8     2D 00 64 FD |                 ret
2fbfc                 | 
2fbfc                 | '------------------------------------------------------------------------------
2fbfc                 | ' Translate keyboard scancode to ASCII
2fbfc                 | '------------------------------------------------------------------------------
2fbfc                 | ' On entry:
2fbfc                 | '   hpar1 - scancode
2fbfc                 | '   hpar2 - key modifiers state
2fbfc                 | '       c - pressed (0) or released (1) flag
2fbfc                 | ' On exit:
2fbfc                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2fbfc                 | '               30..17 = unused
2fbfc                 | '                   18 = scroll-lock state 
2fbfc                 | '                   17 = caps-lock state
2fbfc                 | '                   16 = num-lock state 
2fbfc                 | '                15..8 = key modifiers state
2fbfc                 | '                 7..0 = scancode
2fbfc                 | '------------------------------------------------------------------------------
2fbfc                 | hkbd_translate
2fbfc     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2fc00     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2fc04     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2fc08     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2fc0c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2fc10     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2fc14                 | 
2fc14                 |         if EMUPAD_MAX_PLAYER > 0
2fc14                 | 
2fc14                 |         if EMUPAD_BT0_BIT >= 0
2fc14                 |         end
2fc14                 |         if EMUPAD_BT1_BIT >= 0
2fc14                 |         end
2fc14                 |         if EMUPAD_BT2_BIT >= 0
2fc14                 |         end
2fc14                 |         if EMUPAD_BT3_BIT >= 0
2fc14                 |         end
2fc14                 |         if EMUPAD_BT4_BIT >= 0
2fc14                 |         end
2fc14                 |         if EMUPAD_BT5_BIT >= 0
2fc14                 |         end
2fc14                 |         if EMUPAD_BT6_BIT >= 0
2fc14                 |         end
2fc14                 |         if EMUPAD_BT7_BIT >= 0
2fc14                 |         end
2fc14                 |         if EMUPAD_BT8_BIT >= 0
2fc14                 |         end
2fc14                 |         if EMUPAD_BT9_BIT >= 0
2fc14                 |         end
2fc14                 | 
2fc14                 |         end
2fc14     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2fc18     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2fc1c     1F 8C 47 F4 |                 bitc    hpar1, #31
2fc20                 |         if KEYQUEUE_SIZE > 0
2fc20     C4 09 B0 FE |                 loc pb,#keyq_head
2fc24     F7 71 E3 FA |                 rdword htmp,pb
2fc28     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2fc2c     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2fc30     B8 75 03 F6 |                 mov htmp2,htmp
2fc34     04 74 07 FA |                 mul htmp2,#4
2fc38     F7 75 03 F1 |                 add htmp2,pb
2fc3c     02 74 07 F1 |                 add htmp2,#2
2fc40     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2fc44     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2fc48     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2fc4c     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2fc50                 |         end
2fc50     2D 00 7C FD |                 ret wcz
2fc54                 | 
2fc54                 | if HAVE_MOUSE
2fc54                 | '------------------------------------------------------------------------------
2fc54                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2fc54                 | '------------------------------------------------------------------------------
2fc54                 | ' On entry:
2fc54                 | ' On exit:
2fc54                 | '------------------------------------------------------------------------------
2fc54                 | hget_mouse_in_report
2fc54     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2fc58     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fc5c     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2fc60     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2fc64     CF 02 A0 FD |                 call    #do_int_in
2fc68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fc6c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fc70                 | 
2fc70     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fc74     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fc78                 | 
2fc78     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2fc7c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fc80     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2fc84     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2fc88                 | 
2fc88     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fc8c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2fc90     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2fc94     01 90 87 31 |         if_ae   sub     hpar3, #1
2fc98                 | 
2fc98     40 09 90 FE |                 loc     pa, #mouse_limits
2fc9c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2fca0                 | 
2fca0                 |                 ' load xacc,yacc,zacc
2fca0     28 04 64 FD |                 setq    #3-1
2fca4     80 87 07 FB |                 rdlong  hr1,ptrb
2fca8                 |                 ' load limits and outptr
2fca8     28 04 64 FD |                 setq    #3-1
2fcac     F6 73 03 FB |                 rdlong  htmp1,pa
2fcb0                 | 
2fcb0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2fcb4     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2fcb8     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2fcbc     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2fcc0     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2fcc4     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2fcc8     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2fccc     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2fcd0                 |               
2fcd0                 | 
2fcd0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2fcd4     07 70 67 F7 |                 signx   htmp, #7
2fcd8     B8 87 03 F1 |                 add     hr1,htmp
2fcdc     00 72 0F F2 |                 cmp     htmp1,#0 wz
2fce0     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2fce4     00 86 47 53 |         if_ne   fges    hr1,#0
2fce8                 | 
2fce8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2fcec     07 70 67 F7 |                 signx   htmp, #7
2fcf0     B8 89 03 F1 |                 add     hr2,htmp
2fcf4     00 74 0F F2 |                 cmp     htmp2,#0 wz
2fcf8     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2fcfc     00 88 47 53 |         if_ne   fges    hr2,#0
2fd00                 |                 
2fd00                 | 
2fd00     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2fd04     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2fd08     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2fd0c     B8 8B 03 A1 |         if_z    add     hr3,htmp
2fd10                 | 
2fd10     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2fd14     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2fd18                 | 
2fd18                 |                 ' write back accumulators
2fd18     28 04 64 FD |                 setq    #3-1
2fd1c     80 87 67 FC |                 wrlong  hr1,ptrb
2fd20                 |                 ' if outptr set, write X/Y words
2fd20     00 76 0F F2 |                 cmp htmp3,#0                    wz
2fd24     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2fd28     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2fd2c     2D 00 64 FD |                 ret
2fd30                 | end
2fd30                 | 
2fd30                 | '------------------------------------------------------------------------------
2fd30                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2fd30                 | '------------------------------------------------------------------------------
2fd30                 | ' On entry:
2fd30                 | ' On exit:
2fd30                 | '------------------------------------------------------------------------------
2fd30                 | if _HAVE_GAMEPAD
2fd30                 | hget_gp_in_report
2fd30     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fd34     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2fd38                 | 
2fd38     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fd3c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2fd40     00 90 E3 F8 |                 getbyte hpar3
2fd44     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2fd48     CF 02 A0 FD |                 call    #do_int_in
2fd4c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fd50     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fd54                 | 
2fd54     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fd58     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fd5c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2fd5c                 | 
2fd5c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2fd60     00 70 E3 F8 |                 getbyte htmp                            ' |
2fd64     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fd68     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2fd6c     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2fd70     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2fd74     B8 01 C0 F8 |                 setbyte htmp                            ' |
2fd78                 | 
2fd78                 | ' Note: the following code compares the current and previous reports
2fd78                 | ' and process the data if there are changes to ease the debug output.
2fd78                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2fd78                 | ' gpPreReport buffer.
2fd78                 | 
2fd78                 |                 ' ----- start of block to remove
2fd78                 |                 {
2fd78                 |                 }
2fd78                 |                 ' ----- end of block to remove
2fd78     F4 04 90 FE |                 loc pa,#hpad_translate
2fd7c     2A EC 63 FD |                 push pa
2fd80                 | 
2fd80                 |                 ' FALL THROUGH !!!!
2fd80                 | 
2fd80                 | '------------------------------------------------------------------------------
2fd80                 | ' Decode controller report
2fd80                 | '------------------------------------------------------------------------------
2fd80                 | hid_decode
2fd80                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2fd80     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2fd84     00 04 00 FF 
2fd88     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2fd8c                 | 
2fd8c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fd90                 | 
2fd90     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2fd94     00 2A E3 F8 |                 getbyte hidr_type
2fd98     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2fd9c     34 02 90 AD |         if_z    jmp     #hpad_xinput
2fda0     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2fda4     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2fda8     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2fdac     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2fdb0     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2fdb4                 |                 
2fdb4                 | 
2fdb4                 | '------------------------------------------------------------------------------
2fdb4                 | ' Handle HID controller (or mouse now
2fdb4                 | ' On entry:
2fdb4                 | '   ptrb - controller report
2fdb4                 | '------------------------------------------------------------------------------
2fdb4                 | hpad_hid
2fdb4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fdb8     F7 F1 03 F6 |                 mov     ptra, pb
2fdbc     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2fdc0     00 EC 03 F6 |                 mov     pa, 0-0
2fdc4                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2fdc4     19 2A 3B FF 
2fdc8     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2fdcc                 | 
2fdcc                 | .next
2fdcc     00 EC 5F F2 |                 cmps    pa, #0      wcz
2fdd0     2D 00 7C ED |         if_be   ret     wcz
2fdd4                 | 
2fdd4     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2fdd8     01 EC 87 F1 |                 sub     pa, #1
2fddc     00 8E 07 F6 |                 mov     hpar2, #0
2fde0                 | 
2fde0     C6 71 03 F6 |                 mov     htmp, hpar1
2fde4     03 70 07 F5 |                 and     htmp, #$03
2fde8     01 70 0F F2 |                 cmp     htmp, #1    wz
2fdec     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2fdf0     07 8E 67 A7 |         if_z    signx   hpar2,#7
2fdf4     01 EC 87 A1 |         if_z    sub     pa, #1
2fdf8     02 70 0F F2 |                 cmp     htmp, #2    wz
2fdfc     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2fe00     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2fe04     02 EC 87 A1 |         if_z    sub     pa, #2
2fe08     03 70 0F F2 |                 cmp     htmp, #3    wz
2fe0c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2fe10     04 EC 87 A1 |         if_z    sub     pa, #4
2fe14                 | 
2fe14     FC 8C 07 F5 |                 and     hpar1, #$FC
2fe18                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2fe18                 | 
2fe18     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2fe1c     0C 01 90 AD |         if_z    jmp     #.report_id
2fe20     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2fe24     24 01 90 AD |         if_z    jmp     #.usage_page
2fe28     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2fe2c     2C 01 90 AD |         if_z    jmp     #.usage
2fe30     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2fe34     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2fe38     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2fe3c     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2fe40     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2fe44     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2fe48     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2fe4c     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2fe50     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2fe54     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2fe58     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2fe5c     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2fe60     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2fe64     64 FF 9F 5D |         if_nz   jmp     #.next
2fe68                 | 
2fe68     D8 1D A7 FB |                 tjf     hidr_state,#.next
2fe6c                 | 
2fe6c     03 8E 07 F5 |                 and     hpar2, #$03
2fe70     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2fe74     18 00 90 5D |         if_nz   jmp     #.skip
2fe78                 | 
2fe78     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2fe7c     20 00 90 AD |         if_z    jmp     #.axes
2fe80     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2fe84     5C 00 90 AD |         if_z    jmp     #.hats
2fe88     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2fe8c     70 00 90 AD |         if_z    jmp     #.buttons
2fe90                 | .skip
2fe90     8F 71 03 F6 |                 mov     htmp, hidr_size
2fe94     90 71 03 FA |                 mul     htmp, hidr_count
2fe98     B8 23 03 F1 |                 add     hidr_offset, htmp
2fe9c     2C FF 9F FD |                 jmp     #.next
2fea0                 | .axes
2fea0                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2fea0     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2fea4     90 87 03 F6 |                 mov     hr1, hidr_count
2fea8                 | .l1
2fea8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2feac     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2feb0     04 03 B0 FD |                 call    #hpad_getbits
2feb4     64 03 B0 FD |                 call    #hpad_normalize
2feb8     06 84 1F F2 |                 cmp     hr0, #6         wcz
2febc     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2fec0     00 88 43 C8 |         if_b    getnib  hr2
2fec4     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2fec8     5F 01 20 C9 |         if_b    setword retval
2fecc     01 84 07 C1 |         if_b    add     hr0, #1
2fed0     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2fed4     F4 87 6F FB |                 djnz    hr1, #.l1
2fed8                 | 
2fed8     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2fedc     01 1C 07 F6 |                 mov     hidr_state, #1
2fee0     E8 FE 9F FD |                 jmp     #.next
2fee4                 | .hats
2fee4                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2fee4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fee8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2feec     C8 02 B0 FD |                 call    #hpad_getbits
2fef0     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2fef4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2fef8     01 1C 07 F6 |                 mov     hidr_state, #1
2fefc     90 FF 9F FD |                 jmp     #.skip
2ff00                 | .buttons
2ff00                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2ff00     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2ff04     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2ff08     90 8F 03 FA |                 mul     hpar2, hidr_count
2ff0c     A8 02 B0 FD |                 call    #hpad_getbits
2ff10     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2ff14     B8 BF 62 F0 |                 shl     retval, htmp
2ff18     5F 17 43 F5 |                 or      hidr_buttons, retval
2ff1c     90 71 03 F1 |                 add     htmp, hidr_count
2ff20     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2ff24     01 1C 07 F6 |                 mov     hidr_state, #1
2ff28     64 FF 9F FD |                 jmp     #.skip
2ff2c                 | .report_id
2ff2c     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2ff30     2D 00 7C 5D |         if_nz   ret     wcz
2ff34     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2ff38     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2ff3c     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2ff40     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2ff44     01 F2 87 51 |         if_nz   sub     ptrb,#1
2ff48     80 FE 9F FD |                 jmp     #.next
2ff4c                 | .usage_page
2ff4c     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2ff50     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2ff54     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2ff58     70 FE 9F FD |                 jmp     #.next
2ff5c                 | .usage
2ff5c     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2ff60     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2ff64     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2ff68     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ff6c     5C FE 9F AD |         if_z    jmp     #.next
2ff70     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2ff74     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2ff78     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ff7c     4C FE 9F AD |         if_z    jmp     #.next
2ff80     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2ff84     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2ff88     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2ff8c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2ff90     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2ff94     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2ff98     10 00 90 AD |         if_z    jmp     #.usage_axis
2ff9c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2ffa0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2ffa4     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2ffa8     20 FE 9F FD |                 jmp     #.next
2ffac                 | .usage_axis
2ffac     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2ffb0     18 FE 9F CD |         if_b    jmp     #.next
2ffb4     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2ffb8     C7 01 00 F8 |                 setnib  hpar2
2ffbc                 | 
2ffbc     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2ffc0     C7 8F C3 F9 |                 decod   hpar2
2ffc4     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2ffc8                 | 
2ffc8     01 24 07 F1 |                 add     hidr_usage_idx, #1
2ffcc     02 1C 07 F6 |                 mov     hidr_state, #2
2ffd0     F8 FD 9F FD |                 jmp     #.next
2ffd4                 | 
2ffd4                 | '------------------------------------------------------------------------------
2ffd4                 | ' Handle XInput controller
2ffd4                 | ' On entry:
2ffd4                 | '   ptrb - controller report
2ffd4                 | '------------------------------------------------------------------------------
2ffd4                 | '   Default implementation translates the report to a pseudo-defacto hid
2ffd4                 | '   standard and jumps to hpad_translate for actions.
2ffd4                 | '   Implementors may take specific actions for this kind of controller.
2ffd4                 | '------------------------------------------------------------------------------
2ffd4                 | hpad_xinput
2ffd4     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2ffd8     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2ffdc     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2ffe0     14 70 0F F2 |                 cmp     htmp, #$14      wz
2ffe4     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2ffe8                 | 
2ffe8                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2ffe8                 | 
2ffe8     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2ffec     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2fff0                 | 
2fff0     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2fff4     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2fff8     5F BF 22 F6 |                 not     retval
2fffc     5F 11 2B F9 |                 setword hidr_axis, retval, #1
30000     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
30004     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
30008     5F BF 22 F6 |                 not     retval
3000c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
30010                 | 
30010     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
30014     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
30018     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3001c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
30020     F8 01 B0 FD |                 call    #hpad_normalize
30024     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
30028     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3002c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
30030     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
30034     E4 01 B0 FD |                 call    #hpad_normalize
30038     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3003c                 | 
3003c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
30040     81 BF E6 FA |                 rdword  retval, ptrb[1]
30044     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
30048     00 16 47 F4 |                 bitc    hidr_buttons, #0
3004c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
30050     01 16 47 F4 |                 bitc    hidr_buttons, #1
30054     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
30058     02 16 47 F4 |                 bitc    hidr_buttons, #2
3005c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
30060     03 16 47 F4 |                 bitc    hidr_buttons, #3
30064     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
30068     04 16 47 F4 |                 bitc    hidr_buttons, #4
3006c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
30070     05 16 47 F4 |                 bitc    hidr_buttons, #5
30074     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
30078     08 16 47 F4 |                 bitc    hidr_buttons, #8
3007c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
30080     09 16 47 F4 |                 bitc    hidr_buttons, #9
30084     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
30088     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3008c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
30090     0B 16 47 F4 |                 bitc    hidr_buttons, #11
30094     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
30098     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3009c                 | 
3009c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
300a0     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
300a4     7A BB 7A FF 
300a8     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
300ac     F9 FF 7F FF 
300b0     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
300b4     B9 71 5F F9 |                 altgn   htmp, #htmp1
300b8     00 70 43 F8 |                 getnib  htmp
300bc     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
300c0                 | 
300c0     AC 01 90 FD |                 jmp     #hpad_translate
300c4                 | 
300c4                 | '------------------------------------------------------------------------------
300c4                 | ' Handle PS3 controller
300c4                 | ' On entry:
300c4                 | '   ptrb - controller report
300c4                 | '------------------------------------------------------------------------------
300c4                 | '   Default implementation translates the report to a pseudo-defacto hid
300c4                 | '   standard and jumps to hpad_translate for actions.
300c4                 | '   Implementors may take specific actions for this kind of controller.
300c4                 | '------------------------------------------------------------------------------
300c4                 | hpad_ps3
300c4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
300c8     01 70 0F F2 |                 cmp     htmp, #$01      wz
300cc     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
300d0                 | 
300d0                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
300d0                 | 
300d0     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
300d4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
300d8     40 01 B0 FD |                 call    #hpad_normalize
300dc     5F 11 23 F9 |                 setword hidr_axis, retval, #0
300e0     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
300e4     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
300e8     30 01 B0 FD |                 call    #hpad_normalize
300ec     5F 11 2B F9 |                 setword hidr_axis, retval, #1
300f0     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
300f4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
300f8     20 01 B0 FD |                 call    #hpad_normalize
300fc     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
30100     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
30104     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
30108     10 01 B0 FD |                 call    #hpad_normalize
3010c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
30110     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
30114     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
30118                 | 
30118     08 8C 07 F6 |                 mov     hpar1, #8
3011c     13 8E 07 F6 |                 mov     hpar2, #19
30120     94 00 B0 FD |                 call    #hpad_getbits
30124                 | 
30124     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
30128     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3012c     00 16 47 F4 |                 bitc    hidr_buttons, #0
30130     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
30134     01 16 47 F4 |                 bitc    hidr_buttons, #1
30138     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3013c     02 16 47 F4 |                 bitc    hidr_buttons, #2
30140     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
30144     03 16 47 F4 |                 bitc    hidr_buttons, #3
30148     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3014c     04 16 47 F4 |                 bitc    hidr_buttons, #4
30150     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
30154     05 16 47 F4 |                 bitc    hidr_buttons, #5
30158     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3015c     06 16 47 F4 |                 bitc    hidr_buttons, #6
30160     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
30164     07 16 47 F4 |                 bitc    hidr_buttons, #7
30168     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3016c     08 16 47 F4 |                 bitc    hidr_buttons, #8
30170     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
30174     09 16 47 F4 |                 bitc    hidr_buttons, #9
30178     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3017c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
30180     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
30184     0B 16 47 F4 |                 bitc    hidr_buttons, #11
30188     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3018c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
30190                 | 
30190     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
30194     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
30198     09 FA 79 FF 
3019c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
301a0     FF FA 7F FF 
301a4     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
301a8     B9 71 5F F9 |                 altgn   htmp, #htmp1
301ac     00 70 43 F8 |                 getnib  htmp
301b0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
301b4                 | 
301b4     B8 00 90 FD |                 jmp     #hpad_translate
301b8                 | 
301b8                 | '------------------------------------------------------------------------------
301b8                 | ' Read bits from report data buffer
301b8                 | '------------------------------------------------------------------------------
301b8                 | ' On entry:
301b8                 | '   PTRB - report buffer
301b8                 | '   hpar1 - start bit
301b8                 | '   hpar2 - number of bits
301b8                 | ' On exit:
301b8                 | '   retval - bits
301b8                 | '------------------------------------------------------------------------------
301b8                 | hpad_getbits
301b8     C6 71 03 F6 |                 mov     htmp, hpar1
301bc     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
301c0     F9 71 03 F1 |                 add     htmp, ptrb
301c4     B8 BF 02 FB |                 rdlong  retval, htmp
301c8                 | 
301c8     C6 73 03 F6 |                 mov     htmp1, hpar1
301cc     07 72 07 F5 |                 and     htmp1, #$07     ' shift
301d0     B9 BF 42 F0 |                 shr     retval, htmp1
301d4                 | 
301d4     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
301d8     10 00 90 1D |         if_a    jmp     #.l1
301dc                 | 
301dc     C7 8F C3 F9 |                 decod   hpar2
301e0     01 8E 87 F1 |                 sub     hpar2, #1
301e4     C7 BF 02 F5 |                 and     retval, hpar2
301e8     2D 00 64 FD |                 ret
301ec                 | .l1
301ec     FF 7F 00 FF 
301f0     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
301f4     03 70 07 F1 |                 add     htmp, #3
301f8     B8 75 03 FB |                 rdlong  htmp2, htmp
301fc     18 8E 87 F1 |                 sub     hpar2, #24
30200     C7 8F C3 F9 |                 decod   hpar2
30204     01 8E 87 F1 |                 sub     hpar2, #1
30208     B9 75 43 F0 |                 shr     htmp2, htmp1
3020c     C7 75 03 F5 |                 and     htmp2, hpar2
30210     18 74 67 F0 |                 shl     htmp2, #24
30214     BA BF 42 F5 |                 or      retval, htmp2
30218     2D 00 64 FD |                 ret
3021c                 | 
3021c                 | '------------------------------------------------------------------------------
3021c                 | ' Normalize value to signed word (-32768 / 32767)
3021c                 | '------------------------------------------------------------------------------
3021c                 | ' On entry:
3021c                 | '   retval - value to normalize
3021c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3021c                 | '   - or -
3021c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3021c                 | '   hidr_size - value bits length
3021c                 | ' On exit:
3021c                 | '   retval - normalized value
3021c                 | '------------------------------------------------------------------------------
3021c                 | hpad_normalize
3021c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
30220     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
30224     2D 00 64 AD |         if_z    ret
30228     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3022c     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
30230     0F 72 77 F7 |                 signx   htmp1, #15      wc
30234     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
30238     00 BE 66 C7 |         if_c    signx   retval, #0-0
3023c     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
30240     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
30244     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
30248     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3024c     B8 71 53 F6 |                 abs     htmp            wc
30250     1F BE 0E F4 |                 testb   retval, #31     wz
30254     5F BF 42 F6 |                 abs     retval
30258     B8 BF 12 FD |                 qdiv    retval, htmp
3025c     18 BE 62 FD |                 getqx   retval
30260     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
30264     C0 FF 7F FF 
30268     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3026c     2D 00 64 FD |                 ret
30270                 | 
30270                 | '------------------------------------------------------------------------------
30270                 | ' Perform controller actions
30270                 | ' On entry:
30270                 | '    hidr_id        report id
30270                 | '    hidr_axis      axis value (signed word, 2 axes per long)
30270                 | '                      X = hidr_axis+0, #0
30270                 | '                      Y = hidr_axis+0, #1
30270                 | '                      Z = hidr_axis+1, #0
30270                 | '                     RX = hidr_axis+1, #1
30270                 | '                     RY = hidr_axis+2, #0
30270                 | '                     RZ = hidr_axis+2, #1
30270                 | '    hidr_buttons   buttons state (bits 0 to 31)
30270                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
30270                 | '
30270                 | '                     -------3 -------2 -------1 -------0 byte
30270                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
30270                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
30270                 | '                                zyx||| |||||||| ++++++++ n. buttons
30270                 | '                                |||||| ||||++++--------- n. axes
30270                 | '                                |||||| ++++------------- n. hats
30270                 | '                                ++++++------------------ valid axes
30270                 | '------------------------------------------------------------------------------
30270                 | hpad_translate
30270                 | 
30270                 | 
30270                 |         if HAVE_HIDPAD
30270     84 0C F0 FE |                 loc     ptrb,#hidpad_report
30274     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
30278     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3027c     01 70 E7 F2 |                 cmpsub  htmp,#1
30280     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
30284     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
30288     2D 00 7C 3D |         if_ae   ret     wcz
3028c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
30290     B8 F3 03 F1 |                 add     ptrb,htmp
30294     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
30298     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3029c     28 0C 64 FD |                 setq    #7-1
302a0     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
302a4                 |         end
302a4                 | 
302a4                 | 
302a4                 |         if EMUPAD_MAX_PLAYER > 0
302a4                 | .emupad_no_hat
302a4                 |         if EMUPAD_BT0_BIT >= 0
302a4                 |         end
302a4                 |         if EMUPAD_BT1_BIT >= 0
302a4                 |         end
302a4                 |         if EMUPAD_BT2_BIT >= 0
302a4                 |         end
302a4                 |         if EMUPAD_BT3_BIT >= 0
302a4                 |         end
302a4                 |         if EMUPAD_BT4_BIT >= 0
302a4                 |         end
302a4                 |         if EMUPAD_BT5_BIT >= 0
302a4                 |         end
302a4                 |         if EMUPAD_BT6_BIT >= 0
302a4                 |         end
302a4                 |         if EMUPAD_BT7_BIT >= 0
302a4                 |         end
302a4                 |         if EMUPAD_BT8_BIT >= 0
302a4                 |         end
302a4                 |         if EMUPAD_BT9_BIT >= 0
302a4                 |         end
302a4                 | .emupad_slot_over
302a4                 |         end
302a4                 | 
302a4                 |         if 0
302a4                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
302a4                 | 
302a4                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
302a4                 | 
302a4                 |         end
302a4     2D 00 64 FD |                 ret
302a8                 | end
302a8                 | 
302a8                 | if EMUPAD_MAX_PLAYER > 0
302a8                 | '------------------------------------------------------------------------------
302a8                 | ' Clear EmuPad state
302a8                 | '------------------------------------------------------------------------------
302a8                 | emupad_reset
302a8                 | 
302a8                 | '------------------------------------------------------------------------------
302a8                 | ' Get EmuPad Player number for current device (into retval)
302a8                 | ' Z flag is also set if current device is valid
302a8                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
302a8                 | '------------------------------------------------------------------------------
302a8                 | emupad_getnum
302a8                 | .loop
302a8                 | '------------------------------------------------------------------------------
302a8                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
302a8                 | '------------------------------------------------------------------------------
302a8                 | emupad_discon
302a8                 | .loop         
302a8                 |         
302a8                 |         ' FALL THROUGH!!!
302a8                 | 
302a8                 | '------------------------------------------------------------------------------
302a8                 | ' Update EmuPad reports (all of them...)
302a8                 | '------------------------------------------------------------------------------
302a8                 | emupad_write_reports
302a8                 | .devloop
302a8                 | 
302a8                 | end
302a8                 | 
302a8                 | 
302a8                 | '------------------------------------------------------------------------------
302a8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
302a8                 | '------------------------------------------------------------------------------
302a8                 | ' On entry:
302a8                 | ' On exit:
302a8                 | '------------------------------------------------------------------------------
302a8                 | hget_hub_status
302a8     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
302ac     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
302b0     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
302b4     01 90 2F F9 |                 setword hpar3, #1, #1
302b8     CF 02 A0 FD |                 call    #do_int_in
302bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
302c0     0C 00 90 AD |         if_z    jmp     #.data
302c4     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
302c8     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
302cc     2D 00 64 FD |                 ret
302d0                 | .data
302d0     00 90 0F F2 |                 cmp     hpar3, #0               wz
302d4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
302d8                 | 
302d8     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
302dc     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
302e0     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
302e4     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
302e8                 |                 debug(ubin_long(hub_status_chg))
302e8                 | 
302e8     01 5A 06 F6 |                 mov     hdev_port, #1
302ec                 | .loop
302ec     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
302f0     0C 00 B0 AD |         if_x1   call    #hub_port_handler
302f4     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
302f8     F0 FF 9F 3D |         if_nc   jmp     #.loop
302fc     2D 00 64 FD |                 ret
30300                 | 
30300                 | hub_port_handler
30300     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
30304     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
30308     27 EF 03 F6 |                 mov     pb, urx_buff_p
3030c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30310     55 02 A0 FD |                 call    #control_read
30314     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
30318                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
30318                 | 
30318     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3031c     50 01 90 5D |         if_x0   jmp     #.other
30320     68 02 D0 FE |                 loc     ptra, #clr_port_feat
30324     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
30328     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3032c     A0 02 A0 FD |                 call    #control_write
30330     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
30334     7C 01 90 5D |         if_x0   jmp     #.disconnect
30338     B0 99 02 F6 |                 mov     hctwait, _100ms_
3033c     EF 02 A0 FD |                 call    #poll_waitx
30340                 | 
30340     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
30344     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
30348     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3034c     A0 02 A0 FD |                 call    #control_write
30350                 | 
30350     02 76 07 F6 |                 mov     htmp3, #2
30354                 | .wait_reset
30354     AC 99 02 F6 |                 mov     hctwait, _8ms_
30358     EF 02 A0 FD |                 call    #poll_waitx
3035c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
30360     27 EF 03 F6 |                 mov     pb, urx_buff_p
30364     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30368     55 02 A0 FD |                 call    #control_read
3036c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
30370     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
30374     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
30378                 | 
30378     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3037c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
30380     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30384     A0 02 A0 FD |                 call    #control_write
30388                 | 
30388     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3038c                 | .wait_recover
3038c     A7 99 02 F6 |                 mov     hctwait, _1ms_
30390     EF 02 A0 FD |                 call    #poll_waitx
30394     FD 71 6F FB |                 djnz    htmp,#.wait_recover
30398                 | 
30398     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3039c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
303a0     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
303a4                 | 
303a4     00 08 00 FF 
303a8     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
303ac     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
303b0     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
303b4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
303b8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
303bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
303c0     48 01 90 5D |         if_nz   jmp     #.done
303c4                 | .get_dev_desc
303c4     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
303c8     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
303cc     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
303d0     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
303d4     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
303d8     01 71 57 FC |                 wrword  htmp, ptra[wValue]
303dc     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
303e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
303e4     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
303e8     AC 99 02 F6 |                 mov     hctwait, _8ms_
303ec     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
303f0     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
303f4     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
303f8     BE 00 A0 FD |                 call    #calc_crc5
303fc     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
30400     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
30404     F7 AD C2 FA |                 rdbyte  total_data, pb
30408     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3040c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
30410     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30414     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
30418     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3041c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
30420                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
30420     9F 99 02 F6 |                 mov     hctwait, _500us_
30424     EF 02 A0 FD |                 call    #poll_waitx
30428     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3042c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
30430     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
30434     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
30438     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3043c     CC 00 90 5D |         if_nz   jmp     #.done
30440     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
30444     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
30448     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3044c     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
30450     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
30454     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
30458     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3045c     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
30460     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
30464     A4 00 90 CD |         if_b    jmp     #.done
30468     6C F0 BF FD |                 call    #hparse_con_desc
3046c     9C 00 90 FD |                 jmp     #.done
30470                 | 
30470                 | .other
30470     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
30474     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
30478     28 00 90 AD |         if_x1   jmp     #.reset_feature
3047c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
30480     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
30484     1C 00 90 AD |         if_x1   jmp     #.reset_feature
30488     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3048c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
30490     10 00 90 AD |         if_x1   jmp     #.reset_feature
30494     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
30498     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3049c     04 00 90 AD |         if_x1   jmp     #.reset_feature
304a0     68 00 90 FD |                 jmp     #.done
304a4                 | .reset_feature
304a4     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
304a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
304ac     A0 02 A0 FD |                 call    #control_write
304b0     58 00 90 FD |                 jmp     #.done
304b4                 | .disconnect
304b4                 | 
304b4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
304b8     00 70 E3 F8 |                 getbyte htmp
304bc     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
304c0     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
304c4     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
304c8     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
304cc     00 76 06 A6 |         if_z    mov     kb_led_states, #0
304d0     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
304d4                 |         if EMUPAD_MAX_PLAYER > 0
304d4                 |         end
304d4                 |         if HAVE_MOUSE
304d4     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
304d8     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
304dc     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
304e0                 |         end
304e0                 |         if HAVE_HIDPAD
304e0     14 0A F0 FE |                 loc ptrb,#hidpad_report
304e4     2D 71 03 F6 |                 mov htmp,hdev_port
304e8     01 70 E7 F2 |                 cmpsub htmp,#1
304ec     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
304f0     B8 F3 03 F1 |                 add ptrb,htmp
304f4     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
304f8     80 01 6C FC |                 wrlong #0,ptrb
304fc                 |         end
304fc                 | 
304fc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
30500     00 00 C4 F8 |                 setbyte #0
30504     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
30508     00 00 04 F6 |                 mov     0-0, #0
3050c                 | 
3050c                 | .done
3050c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
30510     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
30514     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
30518     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3051c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
30520     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
30524                 | 
30524     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
30528     27 EF 03 F6 |                 mov     pb, urx_buff_p
3052c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30530     55 02 A0 FD |                 call    #control_read
30534     00 69 06 FB |                 rdlong  hub_port_status, ptra
30538                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
30538     2D 00 64 FD |                 ret
3053c                 | 
3053c                 | '------------------------------------------------------------------------------
3053c                 | ' Partially populated SETUP packets
3053c                 | '------------------------------------------------------------------------------
3053c     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3053d     06          |                 byte    REQ_GET_DESC
3053e     00 01       |                 word    TYPE_DEVICE << 8
30540     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30542     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30544     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
30545     06          |                 byte    REQ_GET_DESC
30546     00 02       |                 word    TYPE_CONFIG << 8
30548     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3054a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3054c     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3054d     09          |                 byte    REQ_SET_CONFIG
3054e     00 00       |                 word    0       ' Configuration value
30550     00 00       |                 word    0       ' Zero
30552     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
30554     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
30555     05          |                 byte    REQ_SET_ADDR
30556     00 00       |                 word    0       ' Zero
30558     00 00       |                 word    0       ' Zero
3055a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3055c                 | '------------------------------------------------------------------------------
3055c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3055c                 | ' wValue field dictates which protocol should be used.
3055c                 | '
3055c                 | ' When initialized, all devices default to report protocol. However the host
3055c                 | ' should not make any assumptions about the device state and should set the
3055c                 | ' desired protocol whenever initializing a device.
3055c                 | '------------------------------------------------------------------------------
3055c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3055d     0B          |                 byte    HID_SET_PROTO
3055e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
30560                 |                                                 ' (HID 1.11 Section 7.2.6).
30560     00 00       |                 word    0               ' Interface index number.
30562     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
30564                 | '------------------------------------------------------------------------------
30564     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30565     0A          |                 byte    HID_SET_IDLE
30566     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
30568                 |                                         ' reporting until a change is detected in the report data
30568                 | 
30568                 |                                         ' (HID 1.11 Section 7.2.4).
30568     00 00       |                 word    0       ' Interface index number.
3056a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3056c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3056d     09          |                 byte    HID_SET_REPORT
3056e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
30570                 |                                         ' (HID 1.11 Section 7.2.2).
30570     00 00       |                 word    0       ' Interface index number.
30572     00 00       |                 word    0       ' Size of the report, in bytes.
30574     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
30575     06          |                 byte    REQ_GET_DESC
30576     00 22       |                 word    TYPE_REPORT << 8
30578     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3057a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3057c                 | '------------------------------------------------------------------------------
3057c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3057d     06          |                 byte    REQ_GET_DESC
3057e     00 29       |                 word    TYPE_HUB << 8
30580     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30582     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30584     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30585     03          |                 byte    REQ_SET_FEATURE
30586     00 00       |                 word    0       ' port power
30588     01 00       |                 word    1       ' Port index number (1+)
3058a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3058c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3058d     01          |                 byte    REQ_CLEAR_FEATURE
3058e     00 00       |                 word    0       ' port power
30590     01 00       |                 word    1       ' Port index number (1+)
30592     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30594     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
30595     00          |                 byte    REQ_GET_STATUS
30596     00 00       |                 word    0
30598     01 00       |                 word    1       ' Port index number (1+)
3059a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3059c                 | '------------------------------------------------------------------------------
3059c                 | if _HAVE_GAMEPAD
3059c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
305a0                 | ps3_command_buff
305a0     00 00 00 00 
305a4     00          |                 byte    $00, $00, $00, $00, $00
305a5     00 00 00 00 
305a9     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
305aa     FF 27 10 00 
305ae     32          |                 byte    $FF, $27, $10, $00, $32
305af     FF 27 10 00 
305b3     32          |                 byte    $FF, $27, $10, $00, $32
305b4     FF 27 10 00 
305b8     32          |                 byte    $FF, $27, $10, $00, $32
305b9     FF 27 10 00 
305bd     32          |                 byte    $FF, $27, $10, $00, $32
305be     00 00 00 00 
305c2     00          |                 byte    $00, $00, $00, $00, $00
305c3     00 00 00 00 
305c7     00          |                 byte    $00, $00, $00, $00, $00
305c8     00 00 00 00 
305cc     00          |                 byte    $00, $00, $00, $00, $00
305cd     00 00 00    |                 byte    $00, $00, $00
305d0                 | '------------------------------------------------------------------------------
305d0     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
305d3                 |                                         ' 0x01 All blinking
305d3                 |                                         ' 0x02 1 flashes, then on
305d3                 |                                         ' 0x03 2 flashes, then on
305d3                 |                                         ' 0x04 3 flashes, then on
305d3                 |                                         ' 0x05 4 flashes, then on
305d3                 |                                         ' 0x06 1 on
305d3                 |                                         ' 0x07 2 on
305d3                 |                                         ' 0x08 3 on
305d3                 |                                         ' 0x09 4 on
305d3                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
305d3                 |                                         ' 0x0B Blinking*
305d3                 |                                         ' 0x0C Slow blinking*
305d3                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
305d3     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
305d6     00          |                 byte    $00             ' Left rumble
305d7     00          |                 byte    $00             ' Right rumble
305d8     00 00 00    |                 byte    $00, $00, $00
305db     00          | end
305dc                 | alignl
305dc                 | 
305dc                 | if HAVE_MOUSE
305dc     00 00 00 00 
305e0     00 00 00 00 | mouse_limits long 0[2]
305e4     00 00 00 00 | mouse_outptr long 0
305e8                 | end
305e8                 | 
305e8                 | if KEYQUEUE_SIZE > 0
305e8     00          | keyq_head byte 0
305e9     00          | keyq_tail byte 0
305ea     00 00 00 00 
      ...             
307e6     00 00 00 00 
307ea     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
307ec                 | alignl
307ec                 | end
307ec                 | 
307ec                 | if EMUPAD_MAX_PLAYER > 0
307ec                 | emupad_rule_buffer
307ec                 | if EMUPAD_BUILTIN_RULES
307ec                 | file "padmap_builtin.dat"
307ec                 | end
307ec                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
307ec                 | '' Default rule directly follows!
307ec                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
307ec                 | end
307ec                 | 
307ec                 | '------------------------------------------------------------------------------
307ec                 | ' The USB data cache area gets zero-filled at every device disconnect
307ec                 | '------------------------------------------------------------------------------
307ec                 | usb_cache_start
307ec                 | 
307ec                 | ' HID descriptor and report buffers
307ec                 | if !!OVERLAP_MEMORY
307ec     00 00 00 00 
      ...             
30ee4     00 00 00 00 
30ee8     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
30eec                 | end
30eec     00 00 00 00 
30ef0     00 00 00 00 | hkbd_report     byte    0[8]
30ef4     00 00 00 00 | hkbd_led_rep    byte    0
30ef8                 | alignl
30ef8                 | 
30ef8                 | if HAVE_HIDPAD
30ef8     00 00 00 00 
      ...             
30fb4     00 00 00 00 
30fb8     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
30fbc                 | end
30fbc                 | 
30fbc                 | ' HUB descriptor
30fbc     00          | hub_descr       byte    0   ' bDescLength
30fbd     00          |                 byte    0   ' bDescriptorType
30fbe     00          |                 byte    0   ' bNbrPorts
30fbf     00 00       |                 word    0   ' wHubCharacteristics
30fc1     00          |                 byte    0   ' bPwrOn2PwrGood
30fc2     00          |                 byte    0   ' bHubContrCurrent
30fc3     00          |                 byte    0   ' DeviceRemoveable
30fc4     00          |                 byte    0   ' PortPwrCtrlMask
30fc5                 | 
30fc5                 | usb_cache_end
30fc5                 | 
30fc5                 | if HAVE_MOUSE
30fc5     00 00 00 00 | mouse_xacc      long 0
30fc9     00 00 00 00 | mouse_yacc      long 0
30fcd     00 00 00 00 | mouse_zacc      long 0
30fd1     00          | mouse_bstate    byte 0
30fd2     00          | mouse_lpending  byte 0
30fd3     00          | mouse_rpending  byte 0
30fd4     00          | mouse_mpending  byte 0
30fd5     00          | mouse_lock      byte 0
30fd6     00 00 00    |                 byte 0[3] ' padding
30fd9                 | end
30fd9                 | 
30fd9     00 00 00 00 
      ...             
31051     00 00 00 00 
31055     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
31059     00 00 00 00 
3105d     00 00 00 00 
31061     00 00 00 00 
31065     00 00 00 00 
31069     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3106b     00 00 00 00 
      ...             
31163     00 00 00 00 
31167     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3116b                 | 
3116b     00          | driver_cog      byte    0                       ' Current driver cog + 1
3116c                 | 	alignl
3116c                 | _Audio093b_8_sc_spin2_dat_
3116c                 | 
3116c                 | audio       org     0
3116c                 | 
3116c     61 BD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
31170     61 0B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
31174     61 17 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
31178                 | 
31178     01 EC 63 FD |             cogid   pa                   ' compute cogid
3117c     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
31180     F6 BD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
31184     DE BA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
31188                 | 
31188     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3118c     0E 12 06 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/95
31190     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
31194     0F 12 06 FC |             wrpin   dac,#right
31198     0F BE 1C FC |             wxpin   #95,#right    
3119c     41 9C 64 FD |             dirh    #left addpins 1
311a0     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
311a4     C5 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
311a8     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
311ac                 |             
311ac                 | '---------------------------------------------------------------------------------        
311ac                 | '----------------- The main loop -------------------------------------------------
311ac                 | '---------------------------------------------------------------------------------
311ac                 | 
311ac     CE 9E 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
311b0     10 00 90 CD |       if_c  jmp     #loop1
311b4                 |   
311b4     09 F0 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
311b8     CE F0 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
311bc     CD 00 80 F1 |             sub     0-0,a40000000
311c0     FD F1 6D FB |             djnz    cn,#p402
311c4                 |     
311c4     00 F0 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
311c8     D0 F2 01 F6 |             mov     ct,time1            ' with the lowest next sample time
311cc     D1 F2 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
311d0     01 F0 05 C6 |     if_c    mov     cn,#1
311d4     D2 F2 39 F3 |             fle     ct,time3 wcz
311d8     02 F0 05 C6 |     if_c    mov     cn,#2     
311dc     D3 F2 39 F3 |             fle     ct,time4 wcz
311e0     03 F0 05 C6 |     if_c    mov     cn,#3
311e4     D4 F2 39 F3 |             fle     ct,time5 wcz
311e8     04 F0 05 C6 |     if_c    mov     cn,#4
311ec     D5 F2 39 F3 |             fle     ct,time6 wcz
311f0     05 F0 05 C6 |     if_c    mov     cn,#5
311f4     D6 F2 39 F3 |             fle     ct,time7 wcz
311f8     06 F0 05 C6 |     if_c    mov     cn,#6
311fc     D7 F2 39 F3 |             fle     ct,time8 wcz
31200     07 F0 05 C6 |     if_c    mov     cn,#7
31204                 | 
31204                 | 
31204                 | '----------------------------------------------------------------------------------
31204                 | '------------- Compute channel samples --------------------------------------------
31204                 | '----------------------------------------------------------------------------------
31204                 | 
31204                 | 
31204     F8 B0 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
31208     06 B0 65 F0 |             shl     channeladd,#6
3120c     D8 F0 03 F1 |             add     ptra,channeladd
31210                 | 
31210     28 16 64 FD |             setq    #11                        ' read parameters
31214     00 C7 05 FB |             rdlong  pointer0,ptra
31218                 |     	    
31218     1F D4 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
3121c     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
31220     EA B4 31 F9 |             getword qq,command0,#0            ' get the new rate
31224     4E B4 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
31228     DA B4 E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
3122c     00 B4 0D F2 |             cmp     qq,#0 wz                         
31230     4E 14 06 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
31234     4E 12 06 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
31238                 |             
31238     1E D4 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
3123c     DE BA 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
31240     00 BA 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
31244                 | 
31244                 | 
31244     E4 F6 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
31248     E4 F8 39 F9 |             getword oldrs,sample0,#1
3124c     E8 EC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
31250     E8 EA 31 F9 |     	    getword avol0,volpan0,#0
31254     E9 E8 39 F9 |             getword askip0,freqskip0,#1    	    
31258     E9 E6 31 F9 |             getword afreq0,freqskip0,#0
3125c                 | 
3125c     D0 F0 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
31260     00 F4 01 F6 |             mov     dt0,0-0    
31264     CF F4 81 F1 |             sub     dt0,time0
31268                 |             
31268     D0 F0 8D F9 |             altd    cn, #time1                ' add channel period to channel time
3126c     F3 00 00 F1 |             add     0-0,afreq0  	
31270                 | 
31270     00 D8 05 F2 |             cmp envptr0,#0
31274     20 00 00 AF 
31278     00 38 06 A6 |             if_z mov envs1,##$4000
3127c     50 00 90 AD |             if_z jmp #p410
31280     EB 34 02 F6 |       	    mov     envhi, envph0
31284     06 34 46 F0 | 	    shr     envhi,#6
31288     1A 37 32 F9 | 	    getword envlo,envhi, #0
3128c     10 34 46 F0 | 	    shr     envhi,#16
31290     EE 34 1A F2 | 	    cmp     envhi, envlen0 wcz
31294     EE 34 02 36 |     if_ge   mov     envhi,envlen0
31298     F3 38 02 C6 |     if_lt   mov envs1,afreq0
3129c     ED 38 02 CA |     if_lt  mul envs1,envspd0
312a0     1C D7 01 C1 |     if_lt   add	    envph0,envs1
312a4     1A 39 02 F6 |             mov envs1,envhi
312a8     01 38 66 F0 |             shl envs1,#1
312ac     EC 38 02 F1 |             add envs1,envptr0
312b0     1C 39 02 FB |             rdlong envs1,envs1
312b4     1C 3B 3A F9 |             getword envs2,envs1,#1
312b8     1C 39 32 F9 |             getword envs1,envs1,#0
312bc                 |             
312bc     1B 3B 02 FA |             mul envs2,envlo
312c0     1B 37 22 F6 |             not envlo
312c4     1B 39 02 FA |             mul envs1,envlo
312c8     1D 39 02 F1 |             add envs1,envs2
312cc     12 38 46 F0 |             shr envs1,#18
312d0                 |             
312d0                 | 	    
312d0                 | 
312d0     F4 C6 01 F1 | p410              add     pointer0,askip0           ' compute the pointer to the next sample       
312d4     E3 32 C2 F8 |          setbyte pointer00,pointer0,#0
312d8     08 C6 45 F0 |             shr     pointer0,#8
312dc                 |          
312dc     1F CA 0D F4 |             testb   sstart0,#31 wz            
312e0     01 C6 65 A0 |     if_z    shl     pointer0,#1        
312e4     1C CA 0D F4 |             testb   sstart0,#28 wz            
312e8     01 C6 65 A0 |     if_z    shl     pointer0,#1        
312ec                 |             
312ec     E7 C6 19 F2 |             cmp     pointer0,lend0 wcz
312f0     E7 C6 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
312f4     E6 C6 01 31 |     if_ge   add     pointer0,lstart0       
312f8                 |             
312f8     E3 B4 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
312fc     E5 B4 01 F1 |             add     qq,sstart0            
31300                 | 
31300                 | 
31300                 | 
31300     FF BB 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
31304     DA B6 E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
31308     14 01 B0 1D |     if_gt   call    #cache_read
3130c                 |          
3130c                 |          
3130c                 |  
3130c                 |          
3130c     1F CA 0D F4 |             testb   sstart0,#31 wz 
31310     08 B6 65 50 |     if_nz   shl     spl,#8
31314     08 C6 65 50 |     if_nz   shl     pointer0,#8
31318     07 C6 65 A0 |     if_z    shl     pointer0,#7
3131c     1C CA 0D F4 |             testb   sstart0,#28 wz            
31320     01 C6 45 A0 |     if_z    shr     pointer0,#1    
31324     19 C7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
31328                 |     
31328                 | 
31328                 | p406        
31328     1C B7 31 FA |             scas spl, envs1
3132c     00 B6 01 F6 |             mov spl,0-0
31330     F5 B6 31 FA |             scas    spl,avol0                 ' apply volume
31334     00 B6 01 F6 |             mov     spl,0-0
31338                 |  
31338     F6 B6 31 FA |             scas    spl,apan0                 ' apply pan
3133c     00 FA 01 F6 |             mov     ls0,0-0
31340     20 00 00 FF 
31344     00 B4 05 F6 |             mov     qq,##16384
31348     F6 B4 81 F1 |             sub     qq,apan0
3134c     DA B6 31 FA |             scas    spl,qq
31350     00 FC 01 F6 |             mov     rs0, 0-0
31354                 | 
31354     FC 00 82 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
31358     FE 00 02 F1 |             add     rs,rs0
3135c     FB FE 81 F1 |             sub     ls,oldls
31360     FD FE 01 F1 |             add     ls,ls0
31364                 |    
31364     FE C8 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
31368     FD C8 21 F9 |             setword sample0,ls0,#0
3136c                 |             
3136c     1E CA 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointers needs resetting  
31370     00 C6 05 A6 |     if_z    mov     pointer0, #0  
31374     00 D6 05 A6 |     if_z    mov     envph0, #0  
31378     02 CB 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
3137c     1D CA 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
31380     04 00 00 AF 
31384     00 A0 05 A1 |     if_z    add     time1,##2048
31388     D0 A2 01 A6 |     if_z    mov     time2,time1
3138c     02 CB 65 AC |     if_z    wrlong  sstart0,ptra[2]
31390                 |             
31390     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
31394     00 C7 65 FC |             wrlong  pointer0,ptra
31398     08 D7 65 FC |             wrlong  envph0,ptra[8]
3139c     D8 F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
313a0                 |                       
313a0     CF EE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
313a4     FF B3 25 A7 |     if_z    decmod  front, #511          
313a8                 |          
313a8     FF F6 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
313ac     00 F9 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
313b0     0F F6 E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
313b4     0F F8 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
313b8                 | 	    
313b8                 | 		    
313b8     FB F8 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
313bc     02 03 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
313c0     FC 04 02 F6 |             mov     newsample, oldrs       
313c4                 | 
313c4     CF EE 01 F6 |             mov     oldt0,time0              ' update global time
313c8     FA 9E 01 F1 |             add     time0,dt0    
313cc                 |                                      
313cc     00 F4 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
313d0     F0 FD 9F AD |     if_z    jmp     #loop1
313d4     FA B4 01 F6 |             mov     qq,dt0
313d8                 |   
313d8     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
313dc     00 B2 9D F2 |             cmpr    front, #0-0 wcz
313e0     F4 FF 9F AD |     if_e    jmp     #p301    
313e4                 | 		
313e4     00 0A 0E F2 | 	    cmp     scbase,#0 wz
313e8     20 00 90 AD |     if_z    jmp #p302	   
313ec                 |  
313ec                 |  
313ec     3F 10 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
313f0     06 0F 02 C6 |     if_c    mov scptr2,scptr
313f4     02 0E 66 C0 |     if_c    shl scptr2,#2
313f8     05 0F 02 C1 |     if_c    add scptr2,scbase     
313fc     60 0E 66 FC |             wrlong scptr2,#$60
31400     07 03 62 CC |     if_c    wrlong oldsample,scptr2
31404     01 00 00 CF 
31408     7F 0C 06 C7 |     if_c    incmod scptr,##639
3140c                 | 			    
3140c     D9 02 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
31410     00 00 00 FF 
31414     FF B3 05 F7 |             incmod  front, ##511
31418     EF B5 6D FB |             djnz    qq,#p301
3141c                 |             
3141c     8C FD 9F FD |             jmp     #loop            'loop
31420                 | 
31420                 | '----------------------------------------------------------------------------------
31420                 | '------------- This is the end of the main loop -----------------------------------
31420                 | '----------------------------------------------------------------------------------
31420                 | 
31420                 | '----------------------------------------------------------------------------------
31420                 | '------------- PSRAM cache ----------- --------------------------------------------
31420                 | '----------------------------------------------------------------------------------
31420                 | 
31420                 | ' There are 8 cache pointers for 8 channels
31420                 | ' if 24 higher bits of address=cache, then get a word from the cache
31420                 | ' else load the cache from PSRAM, update the pointer, then read a sample
31420                 | 
31420                 | 
31420     DA 2E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
31424                 |             
31424     DA 30 02 F6 | 	    mov     addrhi,qq		
31428     08 30 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3142c     0C F1 95 F9 | 	    alts    cn,#cache1            
31430     00 30 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
31434     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
31438                 | 	
31438     0C F1 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
3143c     18 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
31440     18 29 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
31444     08 28 66 F0 | 	    shl     cmd,#8
31448     0B 28 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3144c     F8 2A 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
31450     08 2A 66 F0 |             shl     hubaddr,#8                  '
31454     0B 2B 02 F1 |             add     hubaddr,hubptr 
31458     00 2D 06 F6 |             mov     count,#256                  ' 256 bytes
3145c     28 04 64 FD |             setq    #2                          ' write 3 longs
31460     DD 28 62 FC |             wrlong  cmd, mailbox                ' run it
31464     DD 28 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
31468     FE 29 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3146c                 |             
3146c                 | 	
3146c     F8 B4 01 F6 | p701	    mov     qq,cn			' cache hit
31470     08 B4 65 F0 | 	    shl     qq,#8			' compute the cache start
31474     0B B5 01 F1 | 	    add     qq,hubptr
31478     17 B5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3147c     DA B6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
31480                 |           
31480                 | 
31480                 | '--------------------------------------------------------------------------
31480                 | '------ Interrupt service -------------------------------------------------
31480                 | '------ Output the sample, get the next one if exists ---------------------
31480                 | '--------------------------------------------------------------------------
31480                 | 
31480     0E BE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
31484     0F C0 25 FC |             wypin   rsample,#right       '4
31488     D9 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3148c     80 C3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
31490     FF F3 07 57 |     if_ne   incmod  ptrb,#511
31494     E1 C0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
31498     E1 BE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3149c                 |     
3149c     F5 FF 3B FB |             reti1                        '17/19 
314a0                 |           
314a0                 | '---------------------------------------------------------------------------
314a0                 | '-------- End of interrupt -------------------------------------------------
314a0                 | '---------------------------------------------------------------------------    
314a0                 | 
314a0                 | 
314a0                 | '---------------------------------------------------------------------------
314a0                 | '------- Variables ---------------------------------------------------------
314a0                 | '---------------------------------------------------------------------------
314a0                 | 
314a0                 | ' constants
314a0                 | 
314a0     00 00 00 40 | a40000000   long $40000000
314a4     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
314a8                 | 
314a8                 | ' Time variables
314a8                 | 
314a8     00 00 00 00 | time0       long 0    ' Global sample computing time
314ac     01 00 00 00 | time1       long 1    ' Local channels time
314b0     02 00 00 00 | time2       long 2
314b4     03 00 00 00 | time3       long 3
314b8     04 00 00 00 | time4       long 4
314bc     05 00 00 00 | time5       long 5
314c0     06 00 00 00 | time6       long 6
314c4     07 00 00 00 | time7       long 7
314c8     08 00 00 00 | time8       long 8
314cc                 | 
314cc     00 00 00 00 | channeladd long 0
314d0                 | 
314d0     00 00 00 00 | front       long 0
314d4                 | 
314d4                 | ' temporary variables 
314d4     00 00 00 00 | qq          long 0
314d8     00 00 00 00 | spl         long 0
314dc     00 00 00 00 | zero        long 0
314e0     00 00 00 00 | mailbox     long 0
314e4     00 00 00 00 | mailbox2 long 0
314e8                 | 
314e8                 | ' Interrupt ISR variables
314e8                 | 
314e8     00 00 00 00 | lsample     long 0
314ec     00 00 00 00 | rsample     long 0
314f0     00 00 00 00 | lsnext      long 0
314f4     00 00 00 00 | rsnext      long 0 
314f8                 | 
314f8                 | ' channel parameter block
314f8                 | 
314f8     00 00 00 00 | pointer0    long 0     
314fc     00 00 00 00 | sample0     long 0
31500     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
31504     00 00 00 00 | lstart0     long 0
31508     00 00 00 00 | lend0       long 0
3150c     00 00 00 00 | volpan0     long 0
31510     00 00 00 00 | freqskip0   long 0
31514     00 00 00 00 | command0    long 0
31518     00 00 00 00 | envph0	    long 0
3151c     00 00 00 00 | envptr0	    long 0
31520     00 00 00 00 | envspd0	    long 0
31524     00 00 00 00 | envlen0	    long 0
31528     00 00 00 00 | res5	    long 0
3152c     00 00 00 00 | res6	    long 0
31530     00 00 00 00 | res7	    long 0
31534     00 00 00 00 | res8	    long 0
31538                 | 
31538     00 00 00 00 | afreq0      long 0
3153c     00 00 00 00 | askip0      long 0
31540     00 00 00 00 | avol0       long 0
31544     00 00 00 00 | apan0       long 0
31548                 | 
31548     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3154c     00 00 00 00 | cn          long 0
31550     00 00 00 00 | ct          long 0
31554     00 00 00 00 | dt0         long 0
31558                 | 
31558                 | ' Samples
31558     00 00 00 00 | oldls       long 0
3155c     00 00 00 00 | oldrs       long 0
31560                 | 
31560     00 00 00 00 | ls0         long 0
31564     00 00 00 00 | rs0         long 0
31568                 | 
31568     00 00 00 00 | ls          long 0    
3156c     00 00 00 00 | rs          long 0
31570                 | 
31570     00 00 00 00 | oldsample   long 0
31574     00 00 00 00 | newsample   long 0
31578                 | 
31578     00 00 00 00 | nrsample    long 0
3157c     00 00 00 00 | nlsample    long 0
31580                 | 
31580     00 00 00 00 | scbase long 0
31584     00 00 00 00 | scptr long 0
31588     00 00 00 00 | scptr2 long 0
3158c     00 00 00 00 | scope long 0
31590                 | 
31590     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
31594     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
31598                 | 
31598     00 18 07 00 | hubptr      long $71800
3159c     00 00 00 00 | cache1      long 0
315a0     00 00 00 00 | cache2      long 0
315a4     00 00 00 00 | cache3      long 0
315a8     00 00 00 00 | cache4      long 0
315ac     00 00 00 00 | cache5      long 0
315b0     00 00 00 00 | cache6      long 0
315b4     00 00 00 00 | cache7      long 0
315b8     00 00 00 00 | cache8      long 0
315bc                 | 
315bc                 | 
315bc     00 00 00 00 | cmd         long 0
315c0     00 00 00 00 | hubaddr     long 0
315c4     00 01 00 00 | count       long 256
315c8     00 00 00 00 | addrlo long 0
315cc     00 00 00 00 | addrhi long 0
315d0     00 00 00 00 | pointer00 long 0
315d4     00 00 00 00 | envhi long 0
315d8     00 00 00 00 | envlo long 0
315dc     00 00 00 00 | envs1 long 0
315e0     00 00 00 00 | envs2 long 0
315e4     00 00 00 00 
315e8     00 00 00 00 | null  			long 	0,0           ' for channel reset
315ec                 | 	alignl
315ec                 | __system__dat_
315ec     00 00 00 00 
315f0     00 00 00 00 | 	byte	$00[8]
315f4     03 00 00 00 
315f8     00 00 00 00 
315fc     00 00 00 00 
31600     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31604     00 00 00 00 
      ...             
31890     00 00 00 00 
31894     00 00 00 00 | 	byte	$00[660]
31898     00 00 80 06 | 	long	(104 {__system____root_opendir})<<20
3189c     00 00 90 06 | 	long	(105 {__system____root_closedir})<<20
318a0     00 00 A0 06 | 	long	(106 {__system____root_readdir})<<20
318a4     00 00 B0 06 | 	long	(107 {__system____root_stat})<<20
318a8     00 00 00 00 
318ac     00 00 00 00 
318b0     00 00 00 00 
318b4     00 00 00 00 
318b8     00 00 00 00 
318bc     00 00 00 00 
318c0     00 00 00 00 | 	byte	$00[28]
318c4     2C 19 03 00 | 	long	@@@__system__dat_ + 832
318c8     2F 19 03 00 | 	long	@@@__system__dat_ + 835
318cc     50 19 03 00 | 	long	@@@__system__dat_ + 868
318d0     69 19 03 00 | 	long	@@@__system__dat_ + 893
318d4     84 19 03 00 | 	long	@@@__system__dat_ + 920
318d8     9E 19 03 00 | 	long	@@@__system__dat_ + 946
318dc     AE 19 03 00 | 	long	@@@__system__dat_ + 962
318e0     C0 19 03 00 | 	long	@@@__system__dat_ + 980
318e4     D2 19 03 00 | 	long	@@@__system__dat_ + 998
318e8     E4 19 03 00 | 	long	@@@__system__dat_ + 1016
318ec     F0 19 03 00 | 	long	@@@__system__dat_ + 1028
318f0     01 1A 03 00 | 	long	@@@__system__dat_ + 1045
318f4     15 1A 03 00 | 	long	@@@__system__dat_ + 1065
318f8     1F 1A 03 00 | 	long	@@@__system__dat_ + 1075
318fc     2F 1A 03 00 | 	long	@@@__system__dat_ + 1091
31900     3E 1A 03 00 | 	long	@@@__system__dat_ + 1106
31904     54 1A 03 00 | 	long	@@@__system__dat_ + 1128
31908     6D 1A 03 00 | 	long	@@@__system__dat_ + 1153
3190c     81 1A 03 00 | 	long	@@@__system__dat_ + 1173
31910     8F 1A 03 00 | 	long	@@@__system__dat_ + 1187
31914     A3 1A 03 00 | 	long	@@@__system__dat_ + 1207
31918     AF 1A 03 00 | 	long	@@@__system__dat_ + 1219
3191c     C1 1A 03 00 | 	long	@@@__system__dat_ + 1237
31920     D9 1A 03 00 | 	long	@@@__system__dat_ + 1261
31924     EB 1A 03 00 | 	long	@@@__system__dat_ + 1279
31928     FE 1A 03 00 | 	long	@@@__system__dat_ + 1298
3192c     4F 4B 00 4E 
31930     75 6D 65 72 
31934     69 63 61 6C 
31938     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3193c     75 6D 65 6E 
31940     74 20 6F 75 
31944     74 20 6F 66 
31948     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3194c     61 69 6E 00 
31950     52 65 73 75 
31954     6C 74 20 6E 
31958     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3195c     65 70 72 65 
31960     73 65 6E 74 
31964     61 62 6C 65 
31968     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3196c     65 67 61 6C 
31970     20 6D 75 6C 
31974     74 69 62 79 
31978     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3197c     65 71 75 65 
31980     6E 63 65 00 
31984     4E 6F 20 73 
31988     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3198c     66 69 6C 65 
31990     20 6F 72 20 
31994     64 69 72 65 
31998     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3199c     79 00 42 61 
319a0     64 20 66 69 
319a4     6C 65 20 6E 
319a8     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
319ac     72 00 50 65 
319b0     72 6D 69 73 
319b4     73 69 6F 6E 
319b8     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
319bc     69 65 64 00 
319c0     4E 6F 74 20 
319c4     65 6E 6F 75 
319c8     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
319cc     65 6D 6F 72 
319d0     79 00 54 65 
319d4     6D 70 6F 72 
319d8     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
319dc     66 61 69 6C 
319e0     75 72 65 00 
319e4     46 69 6C 65 
319e8     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
319ec     73 74 73 00 
319f0     49 6E 76 61 
319f4     6C 69 64 20 
319f8     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
319fc     6D 65 6E 74 
31a00     00 54 6F 6F 
31a04     20 6D 61 6E 
31a08     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
31a0c     65 6E 20 66 
31a10     69 6C 65 73 
31a14     00 49 2F 4F 
31a18     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
31a1c     6F 72 00 4E 
31a20     6F 74 20 61 
31a24     20 64 69 72 
31a28     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
31a2c     72 79 00 49 
31a30     73 20 61 20 
31a34     64 69 72 65 
31a38     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31a3c     79 00 52 65 
31a40     61 64 20 6F 
31a44     6E 6C 79 20 
31a48     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
31a4c     20 73 79 73 
31a50     74 65 6D 00 
31a54     46 75 6E 63 
31a58     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
31a5c     20 6E 6F 74 
31a60     20 69 6D 70 
31a64     6C 65 6D 65 
31a68     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
31a6c     00 44 69 72 
31a70     65 63 74 6F 
31a74     72 79 20 6E 
31a78     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
31a7c     6D 70 74 79 
31a80     00 4E 61 6D 
31a84     65 20 74 6F 
31a88     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
31a8c     6E 67 00 44 
31a90     65 76 69 63 
31a94     65 20 6E 6F 
31a98     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
31a9c     65 6B 61 62 
31aa0     6C 65 00 42 
31aa4     61 64 20 61 
31aa8     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
31aac     73 73 00 42 
31ab0     72 6F 6B 65 
31ab4     6E 20 63 6F 
31ab8     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
31abc     74 69 6F 6E 
31ac0     00 44 65 76 
31ac4     69 63 65 20 
31ac8     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
31acc     65 73 6F 75 
31ad0     72 63 65 20 
31ad4     62 75 73 79 
31ad8     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
31adc     73 73 20 64 
31ae0     65 76 69 63 
31ae4     65 20 6C 69 
31ae8     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
31aec     6F 20 73 70 
31af0     61 63 65 20 
31af4     6F 6E 20 64 
31af8     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
31afc     65 00 55 6E 
31b00     6B 6E 6F 77 
31b04     6E 20 65 72 
31b08     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
31b0c     00 00 00 00 
31b10     00 00 00 00 | 	byte	$00[8]
31b14     05 00 00 00 
31b18     00 00 00 00 
31b1c     00 00 00 00 
31b20     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31b24     00 00 00 00 | 	byte	$00, $00, $00, $00
31b28     00 00 00 08 | 	long	(128 {__system___tx})<<20
31b2c     00 00 10 08 | 	long	(129 {__system___rx})<<20
31b30     00 00 00 00 | 	byte	$00, $00, $00, $00
31b34     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31b38     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31b3c     00 00 00 00 
31b40     00 00 00 00 | 	byte	$00[8]
31b44     01 00 00 00 
31b48     06 00 00 00 
31b4c     00 00 00 00 
31b50     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31b54     00 00 00 00 
31b58     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31b5c     00 00 00 08 | 	long	(128 {__system___tx})<<20
31b60     00 00 10 08 | 	long	(129 {__system___rx})<<20
31b64     00 00 00 00 | 	byte	$00, $00, $00, $00
31b68     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31b6c     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31b70     00 00 00 00 
31b74     00 00 00 00 | 	byte	$00[8]
31b78     01 00 00 00 
31b7c     06 00 00 00 
31b80     00 00 00 00 
31b84     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31b88     00 00 00 00 
31b8c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31b90     00 00 00 08 | 	long	(128 {__system___tx})<<20
31b94     00 00 10 08 | 	long	(129 {__system___rx})<<20
31b98     00 00 00 00 | 	byte	$00, $00, $00, $00
31b9c     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31ba0     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31ba4     00 00 00 00 
      ...             
31d14     00 00 00 00 
31d18     00 00 00 00 | 	byte	$00[376]
31d1c     20 1D 03 00 | 	long	@@@__system__dat_ + 1844
31d20     00 00 00 00 
31d24     00 00 00 00 
31d28     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31d2c                 | 	alignl
31d2c                 | _fatfs_cc_dat_
31d2c     C7 00 FC 00 
31d30     E9 00 E2 00 
31d34     E4 00 E0 00 
31d38     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
31d3c     EA 00 EB 00 
31d40     E8 00 EF 00 
31d44     EE 00 EC 00 
31d48     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
31d4c     C9 00 E6 00 
31d50     C6 00 F4 00 
31d54     F6 00 F2 00 
31d58     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
31d5c     FF 00 D6 00 
31d60     DC 00 F8 00 
31d64     A3 00 D8 00 
31d68     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
31d6c     E1 00 ED 00 
31d70     F3 00 FA 00 
31d74     F1 00 D1 00 
31d78     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
31d7c     BF 00 AE 00 
31d80     AC 00 BD 00 
31d84     BC 00 A1 00 
31d88     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
31d8c     91 25 92 25 
31d90     93 25 02 25 
31d94     24 25 C1 00 
31d98     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
31d9c     A9 00 63 25 
31da0     51 25 57 25 
31da4     5D 25 A2 00 
31da8     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
31dac     14 25 34 25 
31db0     2C 25 1C 25 
31db4     00 25 3C 25 
31db8     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
31dbc     5A 25 54 25 
31dc0     69 25 66 25 
31dc4     60 25 50 25 
31dc8     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
31dcc     F0 00 D0 00 
31dd0     CA 00 CB 00 
31dd4     C8 00 31 01 
31dd8     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
31ddc     CF 00 18 25 
31de0     0C 25 88 25 
31de4     84 25 A6 00 
31de8     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
31dec     D3 00 DF 00 
31df0     D4 00 D2 00 
31df4     F5 00 D5 00 
31df8     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
31dfc     DE 00 DA 00 
31e00     DB 00 D9 00 
31e04     FD 00 DD 00 
31e08     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
31e0c     AD 00 B1 00 
31e10     17 20 BE 00 
31e14     B6 00 A7 00 
31e18     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
31e1c     B0 00 A8 00 
31e20     B7 00 B9 00 
31e24     B3 00 B2 00 
31e28     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
31e2c     61 00 1A 03 
31e30     E0 00 17 03 
31e34     F8 00 07 03 
31e38     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
31e3c     78 01 00 01 
31e40     30 01 32 01 
31e44     06 01 39 01 
31e48     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
31e4c     2E 01 79 01 
31e50     06 01 80 01 
31e54     4D 00 43 02 
31e58     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
31e5c     82 01 84 01 
31e60     84 01 86 01 
31e64     87 01 87 01 
31e68     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
31e6c     8B 01 8B 01 
31e70     8D 01 8E 01 
31e74     8F 01 90 01 
31e78     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
31e7c     93 01 94 01 
31e80     F6 01 96 01 
31e84     97 01 98 01 
31e88     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
31e8c     9B 01 9C 01 
31e90     9D 01 20 02 
31e94     9F 01 A0 01 
31e98     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
31e9c     A2 01 A4 01 
31ea0     A4 01 A6 01 
31ea4     A7 01 A7 01 
31ea8     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
31eac     AB 01 AC 01 
31eb0     AC 01 AE 01 
31eb4     AF 01 AF 01 
31eb8     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
31ebc     B3 01 B3 01 
31ec0     B5 01 B5 01 
31ec4     B7 01 B8 01 
31ec8     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
31ecc     BB 01 BC 01 
31ed0     BC 01 BE 01 
31ed4     F7 01 C0 01 
31ed8     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
31edc     C3 01 C4 01 
31ee0     C5 01 C4 01 
31ee4     C7 01 C8 01 
31ee8     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
31eec     CB 01 CA 01 
31ef0     CD 01 10 01 
31ef4     DD 01 01 00 
31ef8     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
31efc     12 01 F3 01 
31f00     03 00 F1 01 
31f04     F4 01 F4 01 
31f08     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
31f0c     22 02 12 01 
31f10     3A 02 09 00 
31f14     65 2C 3B 02 
31f18     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
31f1c     66 2C 3F 02 
31f20     40 02 41 02 
31f24     41 02 46 02 
31f28     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
31f2c     40 00 81 01 
31f30     86 01 55 02 
31f34     89 01 8A 01 
31f38     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
31f3c     5A 02 90 01 
31f40     5C 02 5D 02 
31f44     5E 02 5F 02 
31f48     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
31f4c     62 02 94 01 
31f50     64 02 65 02 
31f54     66 02 67 02 
31f58     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
31f5c     6A 02 62 2C 
31f60     6C 02 6D 02 
31f64     6E 02 9C 01 
31f68     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
31f6c     9D 01 73 02 
31f70     74 02 9F 01 
31f74     76 02 77 02 
31f78     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
31f7c     7A 02 7B 02 
31f80     7C 02 64 2C 
31f84     7E 02 7F 02 
31f88     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
31f8c     82 02 A9 01 
31f90     84 02 85 02 
31f94     86 02 87 02 
31f98     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
31f9c     B1 01 B2 01 
31fa0     45 02 8D 02 
31fa4     8E 02 8F 02 
31fa8     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
31fac     B7 01 7B 03 
31fb0     03 00 FD 03 
31fb4     FE 03 FF 03 
31fb8     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
31fbc     86 03 88 03 
31fc0     89 03 8A 03 
31fc4     B1 03 11 03 
31fc8     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
31fcc     A3 03 A3 03 
31fd0     C4 03 08 03 
31fd4     CC 03 03 00 
31fd8     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
31fdc     8F 03 D8 03 
31fe0     18 01 F2 03 
31fe4     0A 00 F9 03 
31fe8     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
31fec     F5 03 F6 03 
31ff0     F7 03 F7 03 
31ff4     F9 03 FA 03 
31ff8     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
31ffc     20 03 50 04 
32000     10 07 60 04 
32004     22 01 8A 04 
32008     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3200c     0E 01 CF 04 
32010     01 00 C0 04 
32014     D0 04 44 01 
32018     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3201c     00 00 7D 1D 
32020     01 00 63 2C 
32024     00 1E 96 01 
32028     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3202c     00 1F 08 06 
32030     10 1F 06 06 
32034     20 1F 08 06 
32038     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3203c     40 1F 06 06 
32040     51 1F 07 00 
32044     59 1F 52 1F 
32048     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3204c     5D 1F 56 1F 
32050     5F 1F 60 1F 
32054     08 06 70 1F 
32058     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3205c     BB 1F C8 1F 
32060     C9 1F CA 1F 
32064     CB 1F DA 1F 
32068     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3206c     F9 1F EA 1F 
32070     EB 1F FA 1F 
32074     FB 1F 80 1F 
32078     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3207c     08 06 A0 1F 
32080     08 06 B0 1F 
32084     04 00 B8 1F 
32088     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3208c     BC 1F CC 1F 
32090     01 00 C3 1F 
32094     D0 1F 02 06 
32098     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3209c     E5 1F 01 00 
320a0     EC 1F F3 1F 
320a4     01 00 FC 1F 
320a8     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
320ac     32 21 70 21 
320b0     10 02 84 21 
320b4     01 00 83 21 
320b8     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
320bc     30 2C 2F 04 
320c0     60 2C 02 01 
320c4     67 2C 06 01 
320c8     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
320cc     80 2C 64 01 
320d0     00 2D 26 08 
320d4     41 FF 1A 03 
320d8     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
320dc     05 07 09 0E 
320e0     10 12 14 16 
320e4     18 1C 1E 43 
320e8     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
320ec     41 41 43 45 
320f0     45 45 49 49 
320f4     49 41 41 45 
320f8     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
320fc     4F 55 55 59 
32100     4F 55 4F 9C 
32104     4F 9E 9F 41 
32108     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3210c     A5 A6 A7 A8 
32110     A9 AA AB AC 
32114     AD AE AF B0 
32118     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3211c     41 41 41 B8 
32120     B9 BA BB BC 
32124     BD BE BF C0 
32128     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3212c     C5 41 41 C8 
32130     C9 CA CB CC 
32134     CD CE CF D1 
32138     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3213c     49 49 49 49 
32140     D9 DA DB DC 
32144     DD 49 DF 4F 
32148     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3214c     4F E6 E8 E8 
32150     55 55 55 59 
32154     59 EE EF F0 
32158     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3215c     F5 F6 F7 F8 
32160     F9 FA FB FC 
32164     FD FE FF 00 
32168     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3216c     00 00 00 00 | 	byte	$00, $00, $00, $00
32170     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_close})<<20
32174     00 00 00 07 | 	long	(112 {_fatfs_cc_v_read})<<20
32178     00 00 10 07 | 	long	(113 {_fatfs_cc_v_write})<<20
3217c     00 00 20 07 | 	long	(114 {_fatfs_cc_v_lseek})<<20
32180     00 00 30 07 | 	long	(115 {_fatfs_cc_v_ioctl})<<20
32184     00 00 40 08 | 	long	(132 {_fatfs_cc_v_flush})<<20
32188     00 00 00 00 
3218c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
32190     00 00 40 07 | 	long	(116 {_fatfs_cc_v_open})<<20
32194     00 00 50 07 | 	long	(117 {_fatfs_cc_v_creat})<<20
32198     00 00 60 07 | 	long	(118 {_fatfs_cc_v_opendir})<<20
3219c     00 00 70 07 | 	long	(119 {_fatfs_cc_v_closedir})<<20
321a0     00 00 80 07 | 	long	(120 {_fatfs_cc_v_readdir})<<20
321a4     00 00 90 07 | 	long	(121 {_fatfs_cc_v_stat})<<20
321a8     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_mkdir})<<20
321ac     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_rmdir})<<20
321b0     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_remove})<<20
321b4     00 00 D0 07 | 	long	(125 {_fatfs_cc_v_rename})<<20
321b8     00 00 E0 07 | 	long	(126 {_fatfs_cc_v_init})<<20
321bc     00 00 F0 07 | 	long	(127 {_fatfs_cc_v_deinit})<<20
321c0     FF FF FF FF 
321c4     1F 00 00 00 
321c8     1C 00 00 00 
321cc     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
321d0     1E 00 00 00 
321d4     1F 00 00 00 
321d8     1E 00 00 00 
321dc     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
321e0     1F 00 00 00 
321e4     1E 00 00 00 
321e8     1F 00 00 00 
321ec     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
321f0     1F 00 00 00 
321f4     00 00 00 00 
321f8     1F 00 00 00 
321fc     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
32200     5A 00 00 00 
32204     78 00 00 00 
32208     97 00 00 00 
3220c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
32210     D4 00 00 00 
32214     F3 00 00 00 
32218     11 01 00 00 
3221c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
32220     4E 01 00 00 
32224     6D 01 00 00 
32228     FF FF FF FF 
3222c     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
32230     00 00 00 00 
      ...             
32248     00 00 00 00 
3224c     00 00 00 00 | 	byte	$00[32]
32250     6E 22 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
32254     72 22 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
32258     00 00 00 00 
3225c     00 00 00 00 
32260     00 00 00 00 
32264     00 00 00 00 
32268     00 00       | 	byte	$00[18]
3226a     3F 3F 3F 00 
3226e     55 43 54 00 
32272     55 43 54 00 
32276     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3227a     00 00 00 00 
3227e     00 00 00    | 	byte	$00[7]
32281     CA 9A 3B 00 
32285     00 00 00 01 
32289     01 01 01 01 
3228d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
32291     91 11 11 11 
32295     11 01 01 01 
32299     01 01 01 01 
3229d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
322a1     01 01 01 01 
322a5     01 01 01    | 	byte	$01[7]
322a8     90 20 20 20 
322ac     20 20 20 20 
322b0     20 20 20 20 
322b4     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
322b8     42 42 42 42 
322bc     42 42 42 42 
322c0     42 42       | 	byte	$42[10]
322c2     20 20 20 20 
322c6     20 20 20    | 	byte	$20[7]
322c9     44 44 44 44 
322cd     44 44       | 	byte	$44[6]
322cf     04 04 04 04 
322d3     04 04 04 04 
322d7     04 04 04 04 
322db     04 04 04 04 
322df     04 04 04 04 | 	byte	$04[20]
322e3     20 20 20 20 
322e7     20 20       | 	byte	$20[6]
322e9     48 48 48 48 
322ed     48 48       | 	byte	$48[6]
322ef     08 08 08 08 
322f3     08 08 08 08 
322f7     08 08 08 08 
322fb     08 08 08 08 
322ff     08 08 08 08 | 	byte	$08[20]
32303     20 20 20 20 
32307     01 00 00 00 
3230b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3230c                 | __methodtable__
3230c     9C 47 01 00 | 	long	@_do_no_command
32310     9C D7 00 00 | 	long	@_do_plus
32314     88 DC 00 00 | 	long	@_do_minus
32318     50 E1 00 00 | 	long	@_do_or
3231c     68 E2 00 00 | 	long	@_do_mul
32320     F4 E7 00 00 | 	long	@_do_fdiv
32324     38 E0 00 00 | 	long	@_do_and
32328     D4 E5 00 00 | 	long	@_do_div
3232c     BC E9 00 00 | 	long	@_do_mod
32330     DC EB 00 00 | 	long	@_do_shl
32334     F4 EC 00 00 | 	long	@_do_shr
32338     0C EE 00 00 | 	long	@_do_power
3233c     E4 D1 00 00 | 	long	@_do_getvar
32340     68 9A 00 00 | 	long	@_do_push
32344     98 CA 00 00 | 	long	@_do_assign
32348     7C 24 01 00 | 	long	@_do_cls
3234c     94 C4 00 00 | 	long	@_do_new
32350     20 25 01 00 | 	long	@_do_plot
32354     F0 25 01 00 | 	long	@_do_draw
32358     64 2F 01 00 | 	long	@_do_print
3235c     5C 28 01 00 | 	long	@_do_circle
32360     E4 26 01 00 | 	long	@_do_fcircle
32364     D4 29 01 00 | 	long	@_do_box
32368     7C 2D 01 00 | 	long	@_do_frame
3236c     E8 24 01 00 | 	long	@_do_color
32370     6C 7A 00 00 | 	long	@_do_for
32374     98 7C 00 00 | 	long	@_do_next
32378     F8 C1 00 00 | 	long	@_do_list
3237c     B8 AA 00 00 | 	long	@_do_run
32380     54 C9 00 00 | 	long	@_do_error
32384     50 C6 00 00 | 	long	@_do_fast_goto
32388     40 C7 00 00 | 	long	@_do_find_goto
3238c     50 C9 00 00 | 	long	@_do_slow_goto
32390     D4 0C 01 00 | 	long	@_do_converttoint
32394     AC A0 00 00 | 	long	@_test_csave
32398     00 A4 00 00 | 	long	@_do_save
3239c     EC A6 00 00 | 	long	@_do_load
323a0     30 39 01 00 | 	long	@_do_pinwrite
323a4     D0 3D 01 00 | 	long	@_do_waitms
323a8     0C 3F 01 00 | 	long	@_do_waitvbl
323ac     0C 42 01 00 | 	long	@_do_if
323b0     F0 42 01 00 | 	long	@_do_else
323b4     B8 43 01 00 | 	long	@_do_nothing
323b8     D4 EF 00 00 | 	long	@_do_eq
323bc     4C FE 00 00 | 	long	@_do_ge
323c0     24 03 01 00 | 	long	@_do_le
323c4     AC F4 00 00 | 	long	@_do_gt
323c8     84 F9 00 00 | 	long	@_do_lt
323cc     FC 07 01 00 | 	long	@_do_ne
323d0     B0 0F 01 00 | 	long	@_do_rnd
323d4     BC 43 01 00 | 	long	@_do_brun
323d8     88 46 01 00 | 	long	@_do_beep
323dc     3C 3F 01 00 | 	long	@_do_dir
323e0     2C 34 01 00 | 	long	@_do_paper
323e4     B4 34 01 00 | 	long	@_do_ink
323e8     50 35 01 00 | 	long	@_do_font
323ec     CC 35 01 00 | 	long	@_do_mode
323f0     F4 45 01 00 | 	long	@_do_mouse
323f4     14 24 01 00 | 	long	@_do_gettime
323f8     28 46 01 00 | 	long	@_do_cursor
323fc     5C 46 01 00 | 	long	@_do_click
32400     A0 21 01 00 | 	long	@_do_mousex
32404     E4 21 01 00 | 	long	@_do_mousey
32408     6C 22 01 00 | 	long	@_do_mousek
3240c     28 22 01 00 | 	long	@_do_mousew
32410     78 11 01 00 | 	long	@_do_sin
32414     CC 18 01 00 | 	long	@_do_stick
32418     50 1A 01 00 | 	long	@_do_strig
3241c     B4 20 01 00 | 	long	@_do_sprite
32420     24 1D 01 00 | 	long	@_do_defsprite
32424     D4 1B 01 00 | 	long	@_do_getpixel
32428     18 3F 01 00 | 	long	@_do_waitclock
3242c     A8 47 01 00 | 	long	@_do_negative
32430     B0 22 01 00 | 	long	@_do_rdpin
32434     1C 23 01 00 | 	long	@_do_rqpin
32438     90 23 01 00 | 	long	@_do_pinread
3243c     C8 3B 01 00 | 	long	@_do_wrpin
32440     48 3C 01 00 | 	long	@_do_wxpin
32444     C8 3C 01 00 | 	long	@_do_wypin
32448     B8 39 01 00 | 	long	@_do_pinfloat
3244c     F8 39 01 00 | 	long	@_do_pinlo
32450     38 3A 01 00 | 	long	@_do_pinhi
32454     B8 3A 01 00 | 	long	@_do_pinstart
32458     78 3A 01 00 | 	long	@_do_pintoggle
3245c     48 3D 01 00 | 	long	@_do_position
32460     84 12 01 00 | 	long	@_do_cos
32464     A4 13 01 00 | 	long	@_do_tan
32468     C8 16 01 00 | 	long	@_do_atn
3246c     B0 14 01 00 | 	long	@_do_asin
32470     BC 15 01 00 | 	long	@_do_acos
32474     DC 17 01 00 | 	long	@_do_sqr
32478     BC 2B 01 00 | 	long	@_do_fill
3247c     74 B8 00 00 | 	long	@_do_defsnd
32480     DC AD 00 00 | 	long	@_do_defenv
32484     14 43 01 00 | 	long	@_do_rad
32488     3C 43 01 00 | 	long	@_do_deg
3248c     64 43 01 00 | 	long	@_do_int
32490     40 7B 01 00 | 	long	@_hg010b_spin2_putchar
32494     1C 82 02 00 | 	long	@__struct___bas_wrap_sender_tx
32498     60 82 02 00 | 	long	@__struct___bas_wrap_sender_rx
3249c     A8 82 02 00 | 	long	@__struct___bas_wrap_sender_close
324a0     4C 81 02 00 | 	long	@__struct__s_vfs_file_t_putchar
324a4     BC 81 02 00 | 	long	@__struct__s_vfs_file_t_getchar
324a8     04 81 02 00 | 	long	@___strs_cl_pfunc
324ac     74 E0 01 00 | 	long	@__system____root_opendir
324b0     10 E1 01 00 | 	long	@__system____root_closedir
324b4     8C E0 01 00 | 	long	@__system____root_readdir
324b8     18 E1 01 00 | 	long	@__system____root_stat
324bc     A0 D9 01 00 | 	long	@__system____default_putc
324c0     24 D9 01 00 | 	long	@__system____default_getc
324c4     48 DA 01 00 | 	long	@__system____default_flush
324c8     1C 6C 02 00 | 	long	@_fatfs_cc_v_close
324cc     38 70 02 00 | 	long	@_fatfs_cc_v_read
324d0     4C 71 02 00 | 	long	@_fatfs_cc_v_write
324d4     2C 72 02 00 | 	long	@_fatfs_cc_v_lseek
324d8     B4 72 02 00 | 	long	@_fatfs_cc_v_ioctl
324dc     08 73 02 00 | 	long	@_fatfs_cc_v_open
324e0     80 6B 02 00 | 	long	@_fatfs_cc_v_creat
324e4     60 6C 02 00 | 	long	@_fatfs_cc_v_opendir
324e8     D4 6C 02 00 | 	long	@_fatfs_cc_v_closedir
324ec     14 6D 02 00 | 	long	@_fatfs_cc_v_readdir
324f0     48 6E 02 00 | 	long	@_fatfs_cc_v_stat
324f4     C8 72 02 00 | 	long	@_fatfs_cc_v_mkdir
324f8     E8 72 02 00 | 	long	@_fatfs_cc_v_rmdir
324fc     D8 72 02 00 | 	long	@_fatfs_cc_v_remove
32500     F8 72 02 00 | 	long	@_fatfs_cc_v_rename
32504     18 74 02 00 | 	long	@_fatfs_cc_v_init
32508     20 74 02 00 | 	long	@_fatfs_cc_v_deinit
3250c     DC 8E 01 00 | 	long	@__system___tx
32510     1C 8F 01 00 | 	long	@__system___rx
32514     84 EC 01 00 | 	long	@__system___rxtxioctl_0579
32518     DC EC 01 00 | 	long	@__system____dummy_flush_0580
3251c     E8 73 02 00 | 	long	@_fatfs_cc_v_flush
32520                 | __heap_base
32520     00 00 00 00 
      ...             
61320     00 00 00 00 
61324     00 00 00 00 | 	long	0[48002]
61328                 | objmem
61328     00 00 00 00 
      ...             
70900     00 00 00 00 
70904     00 00 00 00 | 	long	0[15736]
70908                 | stackspace
70908     00 00 00 00 | 	long	0[1]
7090c 100             | 	org	COG_BSS_START
7090c 100             | _var01
7090c 100             | 	res	1
7090c 101             | _var02
7090c 101             | 	res	1
7090c 102             | _var03
7090c 102             | 	res	1
7090c 103             | _var04
7090c 103             | 	res	1
7090c 104             | _var05
7090c 104             | 	res	1
7090c 105             | _var06
7090c 105             | 	res	1
7090c 106             | _var07
7090c 106             | 	res	1
7090c 107             | _var08
7090c 107             | 	res	1
7090c 108             | _var09
7090c 108             | 	res	1
7090c 109             | arg01
7090c 109             | 	res	1
7090c 10a             | arg02
7090c 10a             | 	res	1
7090c 10b             | arg03
7090c 10b             | 	res	1
7090c 10c             | arg04
7090c 10c             | 	res	1
7090c 10d             | arg05
7090c 10d             | 	res	1
7090c 10e             | arg06
7090c 10e             | 	res	1
7090c 10f             | local01
7090c 10f             | 	res	1
7090c 110             | local02
7090c 110             | 	res	1
7090c 111             | local03
7090c 111             | 	res	1
7090c 112             | local04
7090c 112             | 	res	1
7090c 113             | local05
7090c 113             | 	res	1
7090c 114             | local06
7090c 114             | 	res	1
7090c 115             | local07
7090c 115             | 	res	1
7090c 116             | local08
7090c 116             | 	res	1
7090c 117             | local09
7090c 117             | 	res	1
7090c 118             | local10
7090c 118             | 	res	1
7090c 119             | local11
7090c 119             | 	res	1
7090c 11a             | local12
7090c 11a             | 	res	1
7090c 11b             | local13
7090c 11b             | 	res	1
7090c 11c             | local14
7090c 11c             | 	res	1
7090c 11d             | local15
7090c 11d             | 	res	1
7090c 11e             | local16
7090c 11e             | 	res	1
7090c 11f             | local17
7090c 11f             | 	res	1
7090c 120             | local18
7090c 120             | 	res	1
7090c 121             | local19
7090c 121             | 	res	1
7090c 122             | local20
7090c 122             | 	res	1
7090c 123             | local21
7090c 123             | 	res	1
7090c 124             | local22
7090c 124             | 	res	1
7090c 125             | local23
7090c 125             | 	res	1
7090c 126             | local24
7090c 126             | 	res	1
7090c 127             | local25
7090c 127             | 	res	1
7090c 128             | local26
7090c 128             | 	res	1
7090c 129             | local27
7090c 129             | 	res	1
7090c 12a             | local28
7090c 12a             | 	res	1
7090c 12b             | local29
7090c 12b             | 	res	1
7090c 12c             | local30
7090c 12c             | 	res	1
7090c 12d             | local31
7090c 12d             | 	res	1
7090c 12e             | local32
7090c 12e             | 	res	1
7090c 12f             | local33
7090c 12f             | 	res	1
7090c 130             | local34
7090c 130             | 	res	1
7090c 131             | muldiva_
7090c 131             | 	res	1
7090c 132             | muldivb_
7090c 132             | 	res	1
7090c 133             | 	fit	480
7090c 133             | 
